<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Initializes PBMS database * * @return bool */function initPBMSDatabase(){    // If no other choice then try this.    $query = "create database IF NOT EXISTS pbms;";    /*     * The user may not have privileges to create the 'pbms' database     * so if it doesn't exist then we perform a select on a pbms system     * table in an already existing database which will cause the PBMS     * daemon to create the 'pbms' database.     */    $db_array = PMA_DBI_fetch_result('SHOW DATABASES;');    if (! empty($db_array)) {        $target = "";        foreach ($db_array as $current_db) {            if ($current_db == 'pbms') {                return true;            }            if ($target == "") {                if ($current_db != 'pbxt'                    && ! PMA_is_system_schema($current_db, true)                ) {                    $target = $current_db;                }            }        }        if ($target != "") {            // If it exists this table will not contain much            $query = "select * from $target.pbms_metadata_header";        }    }    $result = PMA_DBI_query($query);    if (! $result) {        return false;    }    return true;}/** * checks whether the necessary plugins for BLOBStreaming exist * * @access  public * @return  boolean*/function checkBLOBStreamingPlugins(){    if (PMA_cacheGet('skip_blobstreaming', true) === true) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // If we don't know that we can skip blobstreaming, we continue    // verifications; anyway, in case we won't skip blobstreaming,    // we still need to set some variables in non-persistent settings,    // which is done via $PMA_Config->set().    /** Retrieve current server configuration;     *  at this point, $PMA_Config->get('Servers') contains the server parameters     *  as explicitely defined in config.inc.php, so it cannot be used; it's     *  better to use $GLOBALS['cfg']['Server'] which contains the explicit     *  parameters merged with the default ones     *     */    $serverCfg = $GLOBALS['cfg']['Server'];    // return if unable to retrieve current server configuration    if (! $serverCfg) {        return false;    }    // if PHP extension in use is 'mysql', specify element 'PersistentConnections'    if ($serverCfg['extension'] == "mysql") {        $serverCfg['PersistentConnections'] = $PMA_Config->settings['PersistentConnections'];    }    // if connection type is TCP, unload socket variable    if (strtolower($serverCfg['connect_type']) == "tcp") {        $serverCfg['socket'] = "";    }    $has_blobstreaming = PMA_cacheGet('has_blobstreaming', true);    if ($has_blobstreaming === null) {        if (! PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50109) {            // Retrieve MySQL plugins            $existing_plugins = PMA_DBI_fetch_result('SHOW PLUGINS');            foreach ($existing_plugins as $one_existing_plugin) {                // check if required plugins exist                if ( strtolower($one_existing_plugin['Library']) == 'libpbms.so'                    && $one_existing_plugin['Status'] == "ACTIVE"                ) {                    $has_blobstreaming = true;                    break;                }            }            unset($existing_plugins, $one_existing_plugin);        } else if (PMA_DRIZZLE) {            $has_blobstreaming = (bool) PMA_DBI_fetch_result(                "SELECT 1                FROM data_dictionary.plugins                WHERE module_name = 'PBMS'                    AND is_active = true                LIMIT 1"            );        }        PMA_cacheSet('has_blobstreaming', $has_blobstreaming, true);    }    // set variable indicating BS plugin existence    $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', $has_blobstreaming);    if (! $has_blobstreaming) {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    }    if ($has_blobstreaming) {        $bs_variables = PMA_BS_GetVariables();        // if no BS variables exist, set plugin existence to false and return        if (count($bs_variables) == 0) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        } // end if (count($bs_variables) <= 0)        // Check that the required pbms functions exist:        if (function_exists("pbms_connect") == false            || function_exists("pbms_error") == false            || function_exists("pbms_close") == false            || function_exists("pbms_is_blob_reference") == false            || function_exists("pbms_get_info") == false            || function_exists("pbms_get_metadata_value") == false            || function_exists("pbms_add_metadata") == false            || function_exists("pbms_read_stream") == false        ) {            // We should probably notify the user that they need to install            // the pbms client lib and PHP extension to make use of blob streaming.            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        }        if (function_exists("pbms_connection_pool_size")) {            if ( isset($PMA_Config->settings['pbms_connection_pool_size'])) {                $pool_size = $PMA_Config->settings['pbms_connection_pool_size'];                if ($pool_size == "") {                    $pool_size = 1;                }            } else {                $pool_size = 1;            }            pbms_connection_pool_size($pool_size);        }         // get BS server port        $BS_PORT = $bs_variables['pbms_port'];        // if no BS server port or 'pbms' database exists,        // set plugin existance to false and return        if ((! $BS_PORT) || (! initPBMSDatabase())) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        } // end if (!$BS_PORT)        // Ping PBMS: the database doesn't need to exist for this to work.        if (pbms_connect($serverCfg['host'], $BS_PORT, "anydb") == false) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        }        pbms_close();        if (function_exists("pbms_pconnect")) {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', true);        } else {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', false);        }        // add selected BS, CURL and fileinfo library variables to PMA configuration        $PMA_Config->set('BLOBSTREAMING_PORT', $BS_PORT);        $PMA_Config->set('BLOBSTREAMING_HOST', $serverCfg['host']);        $PMA_Config->set('BLOBSTREAMING_SERVER', $serverCfg['host'] . ':' . $BS_PORT);        $PMA_Config->set('PHP_PBMS_EXISTS', false);        $PMA_Config->set('FILEINFO_EXISTS', false);        // check if PECL's fileinfo library exist        $finfo = null;        if (function_exists("finfo_open")) {            $finfo = finfo_open(FILEINFO_MIME);        }        // fileinfo library exists, set necessary variable and close resource        if (! empty($finfo)) {            $PMA_Config->set('FILEINFO_EXISTS', true);            finfo_close($finfo);        } // end if (!empty($finfo))    } else {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    } // end if ($has_blobstreaming)    return true;}/** * returns a list of BLOBStreaming variables used by MySQL * * @access  public * @return  array - list of BLOBStreaming variables */function PMA_BS_GetVariables(){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return null;    }    // run query to retrieve BS variables    $query = "SHOW VARIABLES LIKE '%pbms%'";    $result = PMA_DBI_query($query);    $BS_Variables = array();    // while there are records to retrieve    while ($data = @PMA_DBI_fetch_assoc($result)) {        $BS_Variables[$data['Variable_name']] = $data['Value'];    }    // return BS variables    return $BS_Variables;}/** * Retrieves and shows PBMS error. * * @param sting $msg error message * * @return nothing */function PMA_BS_ReportPBMSError($msg){    $tmp_err = pbms_error();    PMA_showMessage(__('PBMS error') . " $msg $tmp_err");}/** * Tries to connect to PBMS server. * * @param string $db_name Database name * @param bool   $quiet   Whether to report errors * * @return bool Connection status. */function PMA_do_connect($db_name, $quiet){    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // generate bs reference link    $pbms_host = $PMA_Config->get('BLOBSTREAMING_HOST');    $pbms_port = $PMA_Config->get('BLOBSTREAMING_PORT');    if ($PMA_Config->get('PBMS_PCONNECT_EXISTS')) {        // Open a persistent connection.        $ok = pbms_pconnect($pbms_host, $pbms_port, $db_name);    } else {        $ok = pbms_connect($pbms_host, $pbms_port, $db_name);    }    if ($ok == false) {        if ($quiet == false) {            PMA_BS_ReportPBMSError(                __('PBMS connection failed:')                . " pbms_connect($pbms_host, $pbms_port, $db_name)"            );        }        return false;    }    return true;}/** * Disconnects from PBMS server. * * @return nothing */function PMA_do_disconnect(){    pbms_close();}/** * Checks whether the BLOB reference looks valid * * @param string $bs_reference BLOB reference * @param string $db_name      Database name * * @return bool True on success. */function PMA_BS_IsPBMSReference($bs_reference, $db_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // You do not really need a connection to the PBMS Daemon    // to check if a reference looks valid but unfortunalty the API    // requires one at this point so until the API is updated    // we need to epen one here. If you use pool connections this    // will not be a performance problem.    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $ok = pbms_is_blob_reference($bs_reference);    return $ok ;}//------------function PMA_BS_CreateReferenceLink($bs_reference, $db_name){    if (PMA_do_connect($db_name, false) == false) {        return __('Error');    }    if (pbms_get_info(trim($bs_reference)) == false) {        PMA_BS_ReportPBMSError(            __('PBMS get BLOB info failed:')            . " pbms_get_info($bs_reference)"        );        PMA_do_disconnect();        return __('Error');    }    $content_type = pbms_get_metadata_value("Content-Type");    if ($content_type == false) {        $br = trim($bs_reference);        PMA_BS_ReportPBMSError(            "PMA_BS_CreateReferenceLink('$br', '$db_name'): "            . __('PBMS get BLOB Content-Type failed')        );    }    PMA_do_disconnect();    if (! $content_type) {        $content_type = "image/jpeg";    }    $bs_url = PMA_BS_getURL($bs_reference);    if (empty($bs_url)) {        PMA_BS_ReportPBMSError(__('No blob streaming server configured!'));        return 'Error';    }    $output = $content_type;    // specify custom HTML for various content types    switch ($content_type) {    // no content specified    case null:        $output = "NULL";        break;    // image content    case 'image/jpeg':    case 'image/png':        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('View image') . '</a>)';        break;    // audio content    case 'audio/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 120)">' . __('Play audio')            . '</a>)';        break;    // video content    case 'application/x-flash-video':    case 'video/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 480)">' . __('View video')            . '</a>)';        break;    // unsupported content. specify download    default:        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('Download file') . '</a>)';    }    return $output;}/** * In the future there may be server variables to turn on/off PBMS * BLOB streaming on a per table or database basis. So in anticipation of this * PMA_BS_IsTablePBMSEnabled() passes in the table and database name even though * they are not currently needed. * * @param string $db_name  database name * @param string $tbl_name table name * @param string $tbl_type table type * * @return bool */function PMA_BS_IsTablePBMSEnabled($db_name, $tbl_name, $tbl_type){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if ((isset($tbl_type) == false) || (strlen($tbl_type) == 0)) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    if (! $PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        return false;    }    // This information should be cached rather than selecting it each time.    // $query = "SELECT count(*)  FROM information_schema.TABLES T,    // pbms.pbms_enabled E where T.table_schema = ". PMA_backquote($db_name) . "    // and T.table_name = ". PMA_backquote($tbl_name) . " and T.engine = E.name";    $query = "SELECT count(*)  FROM pbms.pbms_enabled E where E.name = '"        . PMA_sqlAddSlashes($tbl_type) . "'";    $result = PMA_DBI_query($query);    $data = PMA_DBI_fetch_row($result);    if ($data[0] == 1) {        return true;    }    return false;}//------------function PMA_BS_UpLoadFile($db_name, $tbl_name, $file_type, $file_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $fh = fopen($file_name, 'r');    if (! $fh) {        PMA_do_disconnect();        PMA_showMessage(sprintf(__('Could not open file: %s'), $file_name));        return false;    }    pbms_add_metadata("Content-Type", $file_type);    $pbms_blob_url = pbms_read_stream($fh, filesize($file_name), $tbl_name);    if (! $pbms_blob_url) {        PMA_BS_ReportPBMSError("pbms_read_stream()");    }    fclose($fh);    PMA_do_disconnect();    return $pbms_blob_url;}//------------function PMA_BS_SetContentType($db_name, $bsTable, $blobReference, $contentType){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // This is a really ugly way to do this but currently there is nothing better.    // In a future version of PBMS the system tables will be redesigned to make this    // more efficient.    $query = "SELECT Repository_id, Repo_blob_offset FROM pbms_reference"        . " WHERE Blob_url='" . PMA_sqlAddSlashes($blobReference) . "'";    //error_log(" PMA_BS_SetContentType: $query\n", 3, "/tmp/mylog");    $result = PMA_DBI_query($query);    //error_log(" $query\n", 3, "/tmp/mylog");    // if record exists    if ($data = PMA_DBI_fetch_assoc($result)) {        $where = "WHERE Repository_id=" . $data['Repository_id']           . " AND Repo_blob_offset=" . $data['Repo_blob_offset'] ;        $query = "SELECT name from  pbms_metadata $where";        $result = PMA_DBI_query($query);        if (PMA_DBI_num_rows($result) == 0) {            $query = "INSERT into pbms_metadata Values( ". $data['Repository_id']                . ", " . $data['Repo_blob_offset']  . ", 'Content_type', '"                . PMA_sqlAddSlashes($contentType)  . "')";        } else {            $query = "UPDATE pbms_metadata SET name = 'Content_type', Value = '"                . PMA_sqlAddSlashes($contentType) . "' $where";        }        //error_log("$query\n", 3, "/tmp/mylog");        PMA_DBI_query($query);    } else {        return false;    }    return true;}//------------function PMA_BS_IsHiddenTable($table){    if ($table === 'pbms_repository'        || $table === 'pbms_reference'        || $table === 'pbms_metadata'        || $table === 'pbms_metadata_header'        || $table === 'pbms_dump'    ) {        return true;    }    return false;}//------------function PMA_BS_getURL($reference){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    if (empty($PMA_Config)) {        return false;    }    // retrieve BS server variables from PMA configuration    $bs_server = $PMA_Config->get('BLOBSTREAMING_SERVER');    if (empty($bs_server)) {        return false;    }    $bs_url = PMA_linkURL('http://' . $bs_server . '/' . rtrim($reference));    return $bs_url;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/** * Factory class that handles the creation of geometric objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Factory{    /**     * Returns the singleton instance of geometric class of the given type.     *     * @param string $type type of the geometric object     *     * @throws Exception     *     * @return the singleton instance of geometric class of the given type     */    public static function factory($type)    {        include_once './libraries/gis/pma_gis_geometry.php';        $type_lower = strtolower($type);        if (! file_exists('./libraries/gis/pma_gis_' . $type_lower . '.php')) {            return false;        }        if (include_once './libraries/gis/pma_gis_' . $type_lower . '.php') {            switch($type) {            case 'MULTIPOLYGON' :                return PMA_GIS_Multipolygon::singleton();            case 'POLYGON' :                return PMA_GIS_Polygon::singleton();            case 'MULTIPOINT' :                return PMA_GIS_Multipoint::singleton();            case 'POINT' :                return PMA_GIS_Point::singleton();            case 'MULTILINESTRING' :                return PMA_GIS_Multilinestring::singleton();            case 'LINESTRING' :                return PMA_GIS_Linestring::singleton();            case 'GEOMETRYCOLLECTION' :                return PMA_GIS_Geometrycollection::singleton();            default :                return false;            }        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Don't display the page heading * @ignore */define('PMA_DISPLAY_HEADING', 0);/** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';require_once './libraries/transformations.lib.php';$types = PMA_getAvailableMIMEtypes();?><h2><?php echo __('Available MIME types'); ?></h2><?phpforeach ($types['mimetype'] as $key => $mimetype) {    if (isset($types['empty_mimetype'][$mimetype])) {        echo '<i>' . $mimetype . '</i><br />';    } else {        echo $mimetype . '<br />';    }}?><br /><i>(<?php echo __('MIME types printed in italics do not have a separate transformation function'); ?>)</i><br /><br /><br /><h2><?php echo __('Available transformations'); ?></h2><table border="0" width="90%"><thead><tr>    <th><?php echo __('Browser transformation'); ?></th>    <th><?php echo _pgettext('for MIME transformation', 'Description'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($types['transformation'] as $key => $transform) {    $desc = PMA_getTransformationDescription($types['transformation_file'][$key]);    ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><?php echo $transform; ?></td>        <td><?php echo $desc; ?></td>    </tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_variables.js';PMA_AddJSVar('pma_token', $_SESSION[' PMA_token ']);PMA_AddJSVar('url_query', str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar('is_superuser', PMA_isSuperuser() ? true : false);/** * Does the common work */require './libraries/server_common.inc.php';/** * Required to display documentation links */require './libraries/server_variables_doc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    if (isset($_REQUEST['type'])) {        switch($_REQUEST['type']) {            case 'getval':                $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                    && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte') {                    exit(implode(' ', PMA_formatByteDown($varValue[1], 3, 3)));                }                exit($varValue[1]);                break;            case 'setval':                $value = $_REQUEST['varValue'];                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                   && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte'                   && preg_match('/^\s*(\d+(\.\d+)?)\s*(mb|kb|mib|kib|gb|gib)\s*$/i', $value, $matches)) {                    $exp = array('kb' => 1, 'kib' => 1, 'mb' => 2, 'mib' => 2, 'gb' => 3, 'gib' => 3);                    $value = floatval($matches[1]) * pow(1024, $exp[strtolower($matches[3])]);                } else {                    $value = PMA_sqlAddslashes($value);                }                if (! is_numeric($value)) $value="'" . $value . "'";                if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName']) && PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value)) {                    // Some values are rounded down etc.                    $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                    exit(json_encode(array(                        'success' => true,                        'variable' => formatVariable($_REQUEST['varName'], $varValue[1])                        ))                    );                }                exit(json_encode(array(                    'success' => false,                    'error' => __('Setting variable failed')                    ))                );                break;        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')   . '' . __('Server variables and settings') . "\n"   . PMA_showMySQLDocu('server_system_variables', 'server_system_variables')   . '</h2>' . "\n";/** * Sends the queries and buffers the results */$serverVarsSession = PMA_DBI_fetch_result('SHOW SESSION VARIABLES;', 0, 1);$serverVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES;', 0, 1);/** * Displays the page */?><fieldset id="tableFilter" style="display:none;"><legend><?php echo __('Filters'); ?></legend><div class="formelement">    <label for="filterText"><?php echo __('Containing the word:'); ?></label>    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" /></div></fieldset><table id="serverVariables" class="data filteredData noclick"><thead><tr><th><?php echo __('Variable'); ?></th>    <th class="valueHeader"><?phpecho __('Session value') . ' / ' . __('Global value');?>    </th>    <th><?php echo __('Documentation'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($serverVars as $name => $value) {    $has_session_value = isset($serverVarsSession[$name]) && $serverVarsSession[$name] != $value;    $row_class = ($odd_row ? 'odd' : 'even') . ' ' . ($has_session_value ? 'diffSession' : '');    ?><tr class="<?php echo $row_class; ?>">    <th nowrap="nowrap"><?php echo htmlspecialchars(str_replace('_', ' ', $name)); ?></th>    <td class="value"><?php echo formatVariable($name, $value); ?></td>    <td class="value"><?php    // To display variable documentation link    if (isset($VARIABLE_DOC_LINKS[$name]))        echo PMA_showMySQLDocu($VARIABLE_DOC_LINKS[$name][1], $VARIABLE_DOC_LINKS[$name][1], false, $VARIABLE_DOC_LINKS[$name][2] . '_' . $VARIABLE_DOC_LINKS[$name][0]);    ?></td>    <?php    if ($has_session_value) {        ?></tr><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> ">    <td>(<?php echo __('Session value'); ?>)</td>    <td class="value"><?php echo formatVariable($name, $serverVarsSession[$name]); ?></td>    <td class="value"></td>    <?php } ?></tr>    <?php    $odd_row = ! $odd_row;}?></tbody></table><?phpfunction formatVariable($name, $value){    global $VARIABLE_DOC_LINKS;    if (is_numeric($value)) {        if (isset($VARIABLE_DOC_LINKS[$name][3]) && $VARIABLE_DOC_LINKS[$name][3]=='byte')            return '<abbr title="'.PMA_formatNumber($value, 0).'">'.implode(' ', PMA_formatByteDown($value, 3, 3)).'</abbr>';        else return PMA_formatNumber($value, 0);    }    return htmlspecialchars($value);}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * extracts table properties from create statement * * @todo should be handled by class Table * @todo this should be recoded as functions, to avoid messing with global variables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defining global variables, in case this script is included by a function. * This is necessary because this script can be included by libraries/header.inc.php. */global $showtable, $tbl_is_view, $tbl_type, $show_comment, $tbl_collation,       $table_info_num_rows, $auto_increment;/** * Gets table informations */// Seems we need to do this in MySQL 5.0.2,// otherwise error #1046, no database selectedPMA_DBI_select_db($GLOBALS['db']);/** * Holds information about the current table * * @todo replace this by PMA_Table * @global array $GLOBALS['showtable'] * @name $showtable */$GLOBALS['showtable'] = array();// PMA_Table::sGetStatusInfo() does caching by default, but here// we force reading of the current table status// if $reread_info is true (for example, coming from tbl_operations.php// and we just changed the table's storage engine)$GLOBALS['showtable'] = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, (isset($reread_info) && $reread_info ? true : false));// need this test because when we are creating a table, we get 0 rows// from the SHOW TABLE query// and we don't want to mess up the $tbl_type coming from the formif ($showtable) {    if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {        $tbl_is_view     = true;        $tbl_type        = __('View');        $show_comment    = null;    } else {        $tbl_is_view     = false;        $tbl_type        = isset($showtable['Engine'])            ? strtoupper($showtable['Engine'])            : '';        // a new comment could be coming from tbl_operations.php        // and we want to show it in the header        if (isset($submitcomment) && isset($comment)) {            $show_comment = $comment;        } else {            $show_comment    = isset($showtable['Comment'])                ? $showtable['Comment']                : '';        }    }    $tbl_collation       = empty($showtable['Collation'])        ? ''        : $showtable['Collation'];    if (null === $showtable['Rows']) {        $showtable['Rows']   = PMA_Table::countRecords($GLOBALS['db'],            $showtable['Name'], true);    }    $table_info_num_rows = isset($showtable['Rows']) ? $showtable['Rows'] : 0;    $row_format = isset($showtable['Row_format']) ? $showtable['Row_format'] : '';    $auto_increment      = isset($showtable['Auto_increment'])        ? $showtable['Auto_increment']        : '';    $create_options      = isset($showtable['Create_options'])        ? explode(' ', $showtable['Create_options'])        : array();    // export create options by its name as variables into global namespace    // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'    unset($pack_keys);    foreach ($create_options as $each_create_option) {        $each_create_option = explode('=', $each_create_option);        if (isset($each_create_option[1])) {            $$each_create_option[0]    = $each_create_option[1];        }    }    // we need explicit DEFAULT value here (different from '0')    $pack_keys = (! isset($pack_keys) || strlen($pack_keys) == 0) ? 'DEFAULT' : $pack_keys;    unset($create_options, $each_create_option);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['designerwork']) {    PMD_err_sav();}foreach ($t_x as $key => $value) {    $KEY = empty($IS_AJAX) ? urldecode($key) : $key; // table name decode (post PDF exp/imp)    list($DB,$TAB) = explode(".", $KEY);    PMA_query_as_controluser('DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                      WHERE `db_name` = \'' . PMA_sqlAddSlashes($DB) . '\'                        AND `table_name` = \'' . PMA_sqlAddSlashes($TAB) . '\'', true, PMA_DBI_QUERY_STORE);    PMA_query_as_controluser('INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                         (db_name, table_name, x, y, v, h)                  VALUES ('                  . '\'' . PMA_sqlAddSlashes($DB) . '\', '                  . '\'' . PMA_sqlAddSlashes($TAB) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_x[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_y[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_v[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_h[$key]) . '\''                  . ')', true, PMA_DBI_QUERY_STORE);}//----------------------------------------------------------------------------function PMD_err_sav(){    global $die_save_pos; // if this file included    if (! empty($die_save_pos)) {        header("Content-Type: text/xml; charset=utf-8");        header("Cache-Control: no-cache");        die('<root act="save_pos" return="' . __('Error saving coordinates for Designer.') . '"></root>');    }}if (! empty($die_save_pos)) {  header("Content-Type: text/xml; charset=utf-8");  header("Cache-Control: no-cache");?><root act='save_pos' return='<?php echo __('Modifications have been saved'); ?>'></root><?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__dateformat_info(){    return array(        'info' => __('Displays a TIME, TIMESTAMP, DATETIME or numeric unix timestamp column as formatted date. The first option is the offset (in hours) which will be added to the timestamp (Default: 0). Use second option to specify a different date/time format string. Third option determines whether you want to see local date or UTC one (use "local" or "utc" strings) for that. According to that, date format has different value - for "local" see the documentation for PHP\'s strftime() function and for "utc" it is done using gmdate() function.'),        );}/** * */function PMA_transformation_text_plain__dateformat($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (empty($options[0])) {        $options[0] = 0;    }    if (empty($options[2])) {        $options[2] = 'local';    } else {        $options[2] = strtolower($options[2]);    }    if (empty($options[1])) {        if ($options[2] == 'local') {            $options[1] = __('%B %d, %Y at %I:%M %p');        } else {            $options[1] = 'Y-m-d  H:i:s';        }    }    $timestamp = -1;    // INT columns will be treated as UNIX timestamps    // and need to be detected before the verification for    // MySQL TIMESTAMP    if ($meta->type == 'int') {        $timestamp = $buffer;    // Detect TIMESTAMP(6 | 8 | 10 | 12 | 14)    // TIMESTAMP (2 | 4) not supported here.    // (Note: prior to MySQL 4.1, TIMESTAMP has a display size, for example    // TIMESTAMP(8) means YYYYMMDD)    } else if (preg_match('/^(\d{2}){3,7}$/', $buffer)) {        if (strlen($buffer) == 14 || strlen($buffer) == 8) {            $offset = 4;        } else {            $offset = 2;        }        $d = array();        $d['year']   = substr($buffer, 0, $offset);        $d['month']  = substr($buffer, $offset, 2);        $d['day']    = substr($buffer, $offset + 2, 2);        $d['hour']   = substr($buffer, $offset + 4, 2);        $d['minute'] = substr($buffer, $offset + 6, 2);        $d['second'] = substr($buffer, $offset + 8, 2);        if (checkdate($d['month'], $d['day'], $d['year'])) {            $timestamp = mktime($d['hour'], $d['minute'], $d['second'], $d['month'], $d['day'], $d['year']);        }    // If all fails, assume one of the dozens of valid strtime() syntaxes (http://www.gnu.org/manual/tar-1.12/html_chapter/tar_7.html)    } else {        if (preg_match('/^[0-9]\d{1,9}$/', $buffer)) {            $timestamp = (int)$buffer;        } else {            $timestamp = strtotime($buffer);        }    }    // If all above failed, maybe it's a Unix timestamp already?    if ($timestamp < 0 && preg_match('/^[1-9]\d{1,9}$/', $buffer)) {        $timestamp = $buffer;    }    // Reformat a valid timestamp    if ($timestamp >= 0) {        $timestamp -= $options[0] * 60 * 60;        $source = $buffer;        if ($options[2] == 'local') {            $text = PMA_localisedDate($timestamp, $options[1]);        } elseif ($options[2] == 'utc') {            $text = gmdate($options[1], $timestamp);        } else {            $text = 'INVALID DATE TYPE';        }        $buffer = '<dfn onclick="alert(\'' . $source . '\');" title="' . $source . '">' . $text . '</dfn>';    }    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Formset processing library * * @package PhpMyAdmin-setup *//** * Processes forms registered in $form_display, handles error correction * * @param FormDisplay $form_display */function process_formset(FormDisplay $form_display){    if (filter_input(INPUT_GET, 'mode') == 'revert') {        // revert erroneous fields to their default values        $form_display->fixErrors();        // drop post data        header('HTTP/1.1 303 See Other');        header('Location: index.php');        exit;    }    if (!$form_display->process(false)) {        // handle form view and failed POST        $form_display->display(true, true);    } else {        // check for form errors        if ($form_display->hasErrors()) {            // form has errors, show warning            $separator = PMA_get_arg_separator('html');            $page = filter_input(INPUT_GET, 'page');            $formset = filter_input(INPUT_GET, 'formset');            $formset = $formset ? "{$separator}formset=$formset" : '';            $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);            if ($id === null && $page == 'servers') {                // we've just added a new server, get it's id                $id = ConfigFile::getInstance()->getServerCount();            }            $id = $id ? "{$separator}id=$id" : '';            ?>            <div class="error">                <h4><?php echo __('Warning') ?></h4>                <?php echo __('Submitted form contains errors') ?><br />                <a href="?page=<?php echo $page . $formset . $id . $separator ?>mode=revert"><?php echo __('Try to revert erroneous fields to their default values') ?></a>            </div>            <?php $form_display->displayErrors() ?>            <a class="btn" href="index.php"><?php echo __('Ignore errors') ?></a>            &nbsp;            <a class="btn" href="?page=<?php echo $page . $formset . $id . $separator ?>mode=edit"><?php echo __('Show form') ?></a>            <?php        } else {            // drop post data            header('HTTP/1.1 303 See Other');            header('Location: index.php');            exit;        }    }}?>
<?php/** * Base class for all GIS data type classes. * * @package PhpMyAdmin-GIS */abstract class PMA_GIS_Geometry{    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public abstract function prepareRowAsSvg($spatial, $label, $color, $scale_data);    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public abstract function prepareRowAsPng($spatial, $label, $color, $scale_data, $image);    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public abstract function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf);    /**     * Prepares the JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS data object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     *     * @return the JavaScript related to a row in the GIS dataset     */    public abstract function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data);    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public abstract function scaleRow($spatial);    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public abstract function generateWkt($gis_data, $index, $empty);    /**     * Returns OpenLayers.Bounds object that correspond to the bounds of GIS data.     *     * @param string $srid       Spatial reference ID     * @param array  $scale_data Data related to scaling     *     * @return OpenLayers.Bounds object that correspond to the bounds of GIS data     */    protected function getBoundsForOl($srid, $scale_data)    {        return 'bound = new OpenLayers.Bounds(); bound.extend(new OpenLayers.LonLat('            . $scale_data['minX'] . ', ' . $scale_data['minY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject())); bound.extend(new OpenLayers.LonLat('            . $scale_data['maxX'] . ', ' . $scale_data['maxY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject()));';    }    /**     * Update the min, max values with the given point set.     *     * @param string $point_set Point set     * @param array  $min_max   Existing min, max values     *     * @return the updated min, max values     */    protected function setMinMax($point_set, $min_max)    {        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            $x = (float) $cordinates[0];            if (! isset($min_max['maxX']) || $x > $min_max['maxX']) {                $min_max['maxX'] = $x;            }            if (! isset($min_max['minX']) || $x < $min_max['minX']) {                $min_max['minX'] = $x;            }            $y = (float) $cordinates[1];            if (! isset($min_max['maxY']) || $y > $min_max['maxY']) {                $min_max['maxY'] = $y;            }            if (! isset($min_max['minY']) || $y < $min_max['minY']) {                $min_max['minY'] = $y;            }        }        return $min_max;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     * This method performs common work.     * More specific work is performed by each of the geom classes.     *     * @param $gis_string $value of the GIS column     *     * @return array parameters for the GIS editor from the value of the GIS column     */    protected function generateParams($value)    {        $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';        $srid = 0;        $wkt = '';        if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $value)) {            $last_comma = strripos($value, ",");            $srid = trim(substr($value, $last_comma + 1));            $wkt = trim(substr($value, 1, $last_comma - 2));        } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $value)) {            $wkt = $value;        }        return array('srid' => $srid, 'wkt' => $wkt);    }    /**     * Extracts points, scales and returns them as an array.     *     * @param string  $point_set  String of comma sperated points     * @param array   $scale_data Data related to scaling     * @param boolean $linear     If true, as a 1D array, else as a 2D array     *     * @return scaled points     */    protected function extractPoints($point_set, $scale_data, $linear = false)    {        $points_arr = array();        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            if (isset($cordinates[0]) && trim($cordinates[0]) != ''                && isset($cordinates[1]) && trim($cordinates[1]) != ''            ) {                if ($scale_data != null) {                    $x = ($cordinates[0] - $scale_data['x']) * $scale_data['scale'];                    $y = $scale_data['height'] - ($cordinates[1] - $scale_data['y']) * $scale_data['scale'];                } else {                    $x = trim($cordinates[0]);                    $y = trim($cordinates[1]);                }            } else {                $x = '';                $y = '';            }            if (! $linear) {                $points_arr[] = array($x, $y);            } else {                $points_arr[] = $x;                $points_arr[] = $y;            }        }        return $points_arr;    }    /**     * Generates JavaScriipt for adding points for OpenLayers polygon.     *     * @param string $polygon points of a polygon in WKT form     * @param string $srid    spatial reference id     *     * @return JavaScriipt for adding points for OpenLayers polygon     */    protected function addPointsForOpenLayersPolygon($polygon, $srid)    {        $row = 'new OpenLayers.Geometry.Polygon(new Array(';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, null);            $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point('                    . $point[0] . ', ' . $point[1] . '))'                    . '.transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= '))';        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            foreach ($parts as $ring) {                $points_arr = $this->extractPoints($ring, null);                $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';                foreach ($points_arr as $point) {                    $row .= '(new OpenLayers.Geometry.Point('                        . $point[0] . ', ' . $point[1] . '))'                        . '.transform(new OpenLayers.Projection("EPSG:'                        . $srid . '"), map.getProjectionObject()), ';                }                $row = substr($row, 0, strlen($row) - 2);                $row .= ')), ';            }            $row = substr($row, 0, strlen($row) - 2);        }        $row .= ')), ';        return $row;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/innodb.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innobase extends PMA_StorageEngine_innodb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;require_once './libraries/header.inc.php';PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'db_sql.php?' . PMA_generate_common_url($db);/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Gets the list of the table in the current db and informations about these * tables if possible * * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full() *// speedup view on locked tables// Special speedup for newer MySQL Versions (in 4.0 format changed)if ($cfg['SkipLockedTables'] == true) {    $result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($result != false && PMA_DBI_num_rows($result) > 0) {        while ($tmp = PMA_DBI_fetch_row($result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[0])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($result);        if (isset($sot_cache)) {            $result      = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);            if ($result != false && PMA_DBI_num_rows($result) > 0) {                while ($tmp = PMA_DBI_fetch_row($result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        $tables[]    = $sts_tmp;                    } else { // table in use                        $tables[]    = array('Name' => $tmp[0]);                    }                }                PMA_DBI_free_result($result);                $sot_ready = true;            }        }        unset($tmp, $result);    }}if (! isset($sot_ready)) {    $result      = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ';');    if (PMA_DBI_num_rows($result) > 0) {        while ($sts_tmp = PMA_DBI_fetch_assoc($result)) {            $tables[] = $sts_tmp;        }        PMA_DBI_free_result($result);        unset($res);    }} *//** * If there is at least one table, displays the printer friendly view, else * an error message */$tables = PMA_DBI_get_tables_full($db);$num_tables = count($tables);echo '<br />';// 1. No tableif ($num_tables == 0) {    echo __('No tables found in database.');} else {// 2. Shows table information    ?><table><thead><tr>    <th><?php echo __('Table'); ?></th>    <th><?php echo __('Rows'); ?></th>    <th><?php echo __('Type'); ?></th>    <?php    if ($cfg['ShowStats']) {        echo '<th>' . __('Size') . '</th>';    }    ?>    <th><?php echo __('Comments'); ?></th></tr></thead><tbody>    <?php    $sum_entries = $sum_size = 0;    $odd_row = true;    foreach ($tables as $sts_data) {        if (PMA_Table::isMerge($db, $sts_data['TABLE_NAME'])         || strtoupper($sts_data['ENGINE']) == 'FEDERATED') {            $merged_size = true;        } else {            $merged_size = false;        }        $sum_entries += $sts_data['TABLE_ROWS'];        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">    <th>        <?php echo htmlspecialchars($sts_data['TABLE_NAME']); ?>    </th>        <?php        if (isset($sts_data['TABLE_ROWS'])) {            ?>    <td align="right">            <?php            if ($merged_size) {                echo '<i>' . PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . '</i>' . "\n";            } else {                echo PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . "\n";            }            ?>    </td>    <td nowrap="nowrap">        <?php echo $sts_data['ENGINE']; ?>    </td>            <?php            if ($cfg['ShowStats']) {                $tblsize =  $sts_data['Data_length'] + $sts_data['Index_length'];                $sum_size += $tblsize;                list($formated_size, $unit) =  PMA_formatByteDown($tblsize, 3, 1);                ?>    <td align="right" nowrap="nowrap">        <?php echo $formated_size . ' ' . $unit; ?>    </td>                <?php            } // end if        } else {            ?>    <td colspan="3" align="center">        <?php echo __('in use'); ?>    </td>            <?php        }        ?>    <td>        <?php        if (! empty($sts_data['Comment'])) {            echo htmlspecialchars($sts_data['Comment']);            $needs_break = '<br />';        } else {            $needs_break = '';        }        if (! empty($sts_data['Create_time'])         || ! empty($sts_data['Update_time'])         || ! empty($sts_data['Check_time'])) {            echo $needs_break;            ?>            <table width="100%">            <?php            if (! empty($sts_data['Create_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Creation') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Create_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Update_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last update') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Update_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Check_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last check') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Check_time'])); ?></td>                </tr>                <?php            }            ?>            </table>            <?php        }        ?>    </td></tr>        <?php    }    ?><tr>    <th align="center">        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>    </th>    <th align="right" nowrap="nowrap">        <?php echo PMA_formatNumber($sum_entries, 0); ?>    </th>    <th align="center">        --    </th>    <?php    if ($cfg['ShowStats']) {        list($sum_formated, $unit) = PMA_formatByteDown($sum_size, 3, 1);        ?>    <th align="right" nowrap="nowrap">        <?php echo $sum_formated . ' ' . $unit; ?>    </th>        <?php    }    ?>    <th></th></tr></tbody></table>    <?php}/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file generator * * @package PhpMyAdmin-setup *//** * Config file generation class * * @package PhpMyAdmin */class ConfigGenerator{    /**     * Creates config file     *     * @return string     */    public static function getConfigFile()    {        $cf = ConfigFile::getInstance();        $crlf = (isset($_SESSION['eol']) && $_SESSION['eol'] == 'win') ? "\r\n" : "\n";        $c = $cf->getConfig();        // header        $ret = '<?php' . $crlf            . '/*' . $crlf            . ' * Generated configuration file' . $crlf            . ' * Generated by: phpMyAdmin '                    . $GLOBALS['PMA_Config']->get('PMA_VERSION')                    . ' setup script' . $crlf            . ' * Date: ' . date(DATE_RFC1123) . $crlf            . ' */' . $crlf . $crlf;        // servers        if ($cf->getServerCount() > 0) {            $ret .= "/* Servers configuration */$crlf\$i = 0;" . $crlf . $crlf;            foreach ($c['Servers'] as $id => $server) {                $ret .= '/* Server: ' . strtr($cf->getServerName($id) . " [$id] ", '*/', '-') . "*/" . $crlf                    . '$i++;' . $crlf;                foreach ($server as $k => $v) {                    $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                    $ret .= "\$cfg['Servers'][\$i]['$k'] = "                        . (is_array($v) && self::_isZeroBasedArray($v)                                ? self::_exportZeroBasedArray($v, $crlf)                                : var_export($v, true))                        . ';' . $crlf;                }                $ret .= $crlf;            }            $ret .= '/* End of servers configuration */' . $crlf . $crlf;        }        unset($c['Servers']);        // other settings        $persistKeys = $cf->getPersistKeysMap();        foreach ($c as $k => $v) {            $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);            $ret .= self::_getVarExport($k, $v, $crlf);            if (isset($persistKeys[$k])) {                unset($persistKeys[$k]);            }        }        // keep 1d array keys which are present in $persist_keys (config.values.php)        foreach (array_keys($persistKeys) as $k) {            if (strpos($k, '/') === false) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= self::_getVarExport($k, $cf->getDefault($k), $crlf);            }        }        $ret .= '?>';        return $ret;    }    /**     * Returns exported configuration variable     *     * @param string $var_name     * @param mixed  $var_value     * @param string $crlf     * @return string     */    private static function _getVarExport($var_name, $var_value, $crlf)    {        if (!is_array($var_value) || empty($var_value)) {            return "\$cfg['$var_name'] = " . var_export($var_value, true) . ';' . $crlf;        }        $ret = '';        if (self::_isZeroBasedArray($var_value)) {            $ret = "\$cfg['$var_name'] = " . self::_exportZeroBasedArray($var_value, $crlf)                . ';' . $crlf;        } else {            // string keys: $cfg[key][subkey] = value            foreach ($var_value as $k => $v) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= "\$cfg['$var_name']['$k'] = " . var_export($v, true) . ';' . $crlf;            }        }        return $ret;    }    /**     * Check whether $array is a continuous 0-based array     *     * @param array $array     * @return boolean     */    private static function _isZeroBasedArray(array $array)    {        for ($i = 0; $i < count($array); $i++) {            if (! isset($array[$i])) {                return false;            }        }        return true;    }    /**     * Exports continuous 0-based array     *     * @param array $array     * @param string $crlf     * @return string     */    private static function _exportZeroBasedArray(array $array, $crlf)    {        $retv = array();        foreach ($array as $v) {            $retv[] = var_export($v, true);        }        $ret = "array(";        if (count($retv) <= 4) {            // up to 4 values - one line            $ret .= implode(', ', $retv);        } else {            // more than 4 values - value per line            $imax = count($retv)-1;            for ($i = 0; $i <= $imax; $i++) {                $ret .= ($i < $imax ? ($i > 0 ? ',' : '') : '') . $crlf . '    ' . $retv[$i];            }        }        $ret .= ')';        return $ret;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build XML dumps of tables * * @package PhpMyAdmin-Export * @subpackage XML */if (! defined('PHPMYADMIN')) {    exit;}if (!strlen($GLOBALS['db'])) { /* Can't do server export */    return;}if (isset($plugin_list)) {    $plugin_list['xml'] = array(        'text' => __('XML'),        'extension' => 'xml',        'mime_type' => 'text/xml',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options')        );    /* Export structure */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'structure',        'text' => __('Object creation options (all are recommended)')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_functions',            'text' => __('Functions')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_procedures',            'text' => __('Procedures')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_tables',        'text' => __('Tables')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_triggers',            'text' => __('Triggers')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_views',            'text' => __('Views')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );    /* Data */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'data',        'text' => __('Data dump options')        );    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_contents',        'text' => __('Export contents')        );    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        $foot = '</pma_xml_export>';        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $db;        global $table;        global $tables;        $export_struct = isset($GLOBALS['xml_export_functions']) || isset($GLOBALS['xml_export_procedures'])            || isset($GLOBALS['xml_export_tables']) || isset($GLOBALS['xml_export_triggers'])            || isset($GLOBALS['xml_export_views']);        $export_data = isset($GLOBALS['xml_export_contents']) ? true : false;        if ($GLOBALS['output_charset_conversion']) {            $charset = $GLOBALS['charset_of_file'];        } else {            $charset = 'utf-8';        }        $head  =  '<?xml version="1.0" encoding="' . $charset . '"?>' . $crlf               .  '<!--' . $crlf               .  '- phpMyAdmin XML Dump' . $crlf               .  '- version ' . PMA_VERSION . $crlf               .  '- http://www.phpmyadmin.net' . $crlf               .  '-' . $crlf               .  '- ' . __('Host') . ': ' . $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '- ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '- ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '- ' . __('PHP Version') . ': ' . phpversion() . $crlf               .  '-->' . $crlf . $crlf;        $head .= '<pma_xml_export version="1.0"' . (($export_struct) ? ' xmlns:pma="http://www.phpmyadmin.net/some_doc_url/"' : '') . '>' . $crlf;        if ($export_struct) {            if (PMA_DRIZZLE) {                $result = PMA_DBI_fetch_result("                    SELECT                        'utf8' AS DEFAULT_CHARACTER_SET_NAME,                        DEFAULT_COLLATION_NAME                    FROM data_dictionary.SCHEMAS                    WHERE SCHEMA_NAME = '" . PMA_sqlAddSlashes($db) . "'");            } else {                $result = PMA_DBI_fetch_result('SELECT `DEFAULT_CHARACTER_SET_NAME`, `DEFAULT_COLLATION_NAME` FROM `information_schema`.`SCHEMATA` WHERE `SCHEMA_NAME` = \''.PMA_sqlAddSlashes($db).'\' LIMIT 1');            }            $db_collation = $result[0]['DEFAULT_COLLATION_NAME'];            $db_charset = $result[0]['DEFAULT_CHARACTER_SET_NAME'];            $head .= '    <!--' . $crlf;            $head .= '    - Structure schemas' . $crlf;            $head .= '    -->' . $crlf;            $head .= '    <pma:structure_schemas>' . $crlf;            $head .= '        <pma:database name="' . htmlspecialchars($db) . '" collation="' . $db_collation . '" charset="' . $db_charset . '">' . $crlf;            if (count($tables) == 0) {                $tables[] = $table;            }            foreach ($tables as $table) {                // Export tables and views                $result = PMA_DBI_fetch_result('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0);                $tbl =  $result[$table][1];                $is_view = PMA_Table::isView($db, $table);                if ($is_view) {                    $type = 'view';                } else {                    $type = 'table';                }                if ($is_view && ! isset($GLOBALS['xml_export_views'])) {                    continue;                }                if (! $is_view && ! isset($GLOBALS['xml_export_tables'])) {                    continue;                }                $head .= '            <pma:' . $type . ' name="' . $table . '">' . $crlf;                $tbl = "                " . htmlspecialchars($tbl);                $tbl = str_replace("\n", "\n                ", $tbl);                $head .= $tbl . ';' . $crlf;                $head .= '            </pma:' . $type . '>' . $crlf;                if (isset($GLOBALS['xml_export_triggers']) && $GLOBALS['xml_export_triggers']) {                    // Export triggers                    $triggers = PMA_DBI_get_triggers($db, $table);                    if ($triggers) {                        foreach ($triggers as $trigger) {                            $code = $trigger['create'];                            $head .= '            <pma:trigger name="' . $trigger['name'] . '">' . $crlf;                            // Do some formatting                            $code = substr(rtrim($code), 0, -3);                            $code = "                " . htmlspecialchars($code);                            $code = str_replace("\n", "\n                ", $code);                            $head .= $code . $crlf;                            $head .= '            </pma:trigger>' . $crlf;                        }                        unset($trigger);                        unset($triggers);                    }                }            }            if (isset($GLOBALS['xml_export_functions']) && $GLOBALS['xml_export_functions']) {                // Export functions                $functions = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');                if ($functions) {                    foreach ($functions as $function) {                        $head .= '            <pma:function name="' . $function . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'FUNCTION', $function);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:function>' . $crlf;                    }                    unset($create_func);                    unset($function);                    unset($functions);                }            }            if (isset($GLOBALS['xml_export_procedures']) && $GLOBALS['xml_export_procedures']) {                // Export procedures                $procedures = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');                if ($procedures) {                    foreach ($procedures as $procedure) {                        $head .= '            <pma:procedure name="' . $procedure . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:procedure>' . $crlf;                    }                    unset($create_proc);                    unset($procedure);                    unset($procedures);                }            }            unset($result);            $head .= '        </pma:database>' . $crlf;            $head .= '    </pma:structure_schemas>' . $crlf;            if ($export_data) {                $head .= $crlf;            }        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $head = '    <!--' . $crlf                  . '    - ' . __('Database') . ': ' .  '\'' . $db . '\'' . $crlf                  . '    -->' . $crlf                  . '    <database name="' . htmlspecialchars($db) . '">' . $crlf;            return PMA_exportOutputHandler($head);        } else {            return true;        }    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            return PMA_exportOutputHandler('    </database>' . $crlf);        } else {            return true;        }    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in XML format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);            $columns_cnt = PMA_DBI_num_fields($result);            $columns = array();            for ($i = 0; $i < $columns_cnt; $i++) {                $columns[$i] = stripslashes(str_replace(' ', '_', PMA_DBI_field_name($result, $i)));            }            unset($i);            $buffer      = '        <!-- ' . __('Table') . ' ' . $table . ' -->' . $crlf;            if (!PMA_exportOutputHandler($buffer)) {                return false;            }            while ($record = PMA_DBI_fetch_row($result)) {                $buffer         = '        <table name="' . htmlspecialchars($table) . '">' . $crlf;                for ($i = 0; $i < $columns_cnt; $i++) {                    // If a cell is NULL, still export it to preserve the XML structure                    if (!isset($record[$i]) || is_null($record[$i])) {                        $record[$i] = 'NULL';                    }                    $buffer .= '            <column name="' . htmlspecialchars($columns[$i]) . '">' . htmlspecialchars((string)$record[$i])                            .  '</column>' . $crlf;                }                $buffer         .= '        </table>' . $crlf;                if (!PMA_exportOutputHandler($buffer)) {                    return false;                }            }            PMA_DBI_free_result($result);        }        return true;    } // end of the 'PMA_getTableXML()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         url(./themes/pmahomme/img/left_nav_bg.png) repeat-y right 0% #f3f3f3;    border-right:       1px solid #aaa;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes */.navi_dbName {    font-weight:    bold;    color:          <?php echo $GLOBALS['cfg']['NaviDatabaseNameColor']; ?>;}/******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>}div#recentTableList {    text-align: center;    margin: 20px 10px 0px 10px;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin:             5px 10px 0px 10px;}ul#databaseList {    margin: 0.8em 0px;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     0.3em;    font-style: italic;}ul#databaseList span {    padding: 5px;}ul#databaseList a {    color: #333;    background: url(./themes/pmahomme/img/database.png) no-repeat 0 5px transparent;    display: block;    text-indent: 0;    padding: 5px 5px 5px 25px;    font-style: normal;}div#navidbpageselector {    margin: 0.1em;    text-align: center;}div#navidbpageselector a,div#navidbpageselector select{    color: #333;    margin: 0.2em;}ul#databaseList ul {    margin: 0;    padding: 0;}ul#databaseList li {    list-style: none;    text-indent: 20px;    margin: 0;    padding: 0;}ul#databaseList a:hover {    background-color: #e4e4e4;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#reloadlink a img,div#leftframelinks a img.icon {    margin:        0.3em;    margin-top:    0.7em;    border:        0;}div#leftframelinks a:hover img {}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;}div#left_tableList {margin:10px 10px 0 10px;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            2px 0;    white-space:        nowrap;}#newtable {    margin-top: 15px !important;}#newtable a {    display: block;    padding: 1px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    border: 1px solid #aaa;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    border-radius: 20px;}#newtable li:hover {    background: transparent !important;}#newtable a:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}#newtable li a:hover {    text-decoration: none;}select{    -moz-border-radius:2px 2px 2px 2px;    -moz-box-shadow:0 1px 2px #DDDDDD;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(./themes/pmahomme/img/input_bg.gif);}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: #e4e4e4;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         #e4e4e4;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#reloadlink {    clear: both;    float: <?php echo $right; ?>;    display: block;    padding: 1em;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 0;    position: relative;    right: 3ex;}#fast_filter {    width: 85%;    padding: 0.1em;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various checks and message functions used on index page. * * Security checks are the idea of Aung Khant <aungkhant[at]yehg.net>, http://yehg.net/lab * Version check taken from the old setup script by Michal iha <michal@cihar.com> * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Initializes message list */function messages_begin(){    if (! isset($_SESSION['messages']) || !is_array($_SESSION['messages'])) {        $_SESSION['messages'] = array('error' => array(), 'notice' => array());    } else {        // reset message states        foreach ($_SESSION['messages'] as &$messages) {            foreach ($messages as &$msg) {                $msg['fresh'] = false;                $msg['active'] = false;            }        }    }}/** * Adds a new message to message list * * @param string $type one of: notice, error * @param string $id unique message identifier * @param string $title language string id (in $str array) * @param string $message message text */function messages_set($type, $id, $title, $message){    $fresh = ! isset($_SESSION['messages'][$type][$id]);    $_SESSION['messages'][$type][$id] = array(        'fresh' => $fresh,        'active' => true,        'title' => $title,        'message' => $message);}/** * Cleans up message list */function messages_end(){    foreach ($_SESSION['messages'] as &$messages) {        $remove_ids = array();        foreach ($messages as $id => &$msg) {            if ($msg['active'] == false) {                $remove_ids[] = $id;            }        }        foreach ($remove_ids as $id) {            unset($messages[$id]);        }    }}/** * Prints message list, must be called after messages_end() */function messages_show_html(){    $old_ids = array();    foreach ($_SESSION['messages'] as $type => $messages) {        foreach ($messages as $id => $msg) {            echo '<div class="' . $type . '" id="' . $id . '">' . '<h4>' . $msg['title'] . '</h4>' . $msg['message'] . '</div>';            if (!$msg['fresh'] && $type != 'error') {                $old_ids[] = $id;            }        }    }    echo "\n" . '<script type="text/javascript">';    foreach ($old_ids as $id) {        echo "\nhiddenMessages.push('$id');";    }    echo "\n</script>\n";}/** * Checks for newest phpMyAdmin version and sets result as a new notice */function PMA_version_check(){    // version check messages should always be visible so let's make    // a unique message id each time we run it    $message_id = uniqid('version_check');    // wait 3s at most for server response, it's enough to get information    // from a working server    $connection_timeout = 3;    $url = 'http://phpmyadmin.net/home_page/version.php';    $context = stream_context_create(array(        'http' => array(            'timeout' => $connection_timeout)));    $data = @file_get_contents($url, null, $context);    if ($data === false) {        if (function_exists('curl_init')) {            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HEADER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            curl_setopt($ch, CURLOPT_TIMEOUT, $connection_timeout);            $data = curl_exec($ch);            curl_close($ch);        } else {            messages_set(                'error',                $message_id,                __('Version check'),                __('Neither URL wrapper nor CURL is available. Version check is not possible.'));            return;        }    }    if (empty($data)) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Reading of version failed. Maybe you\'re offline or the upgrade server does not respond.'));        return;    }    /* Format: version\ndate\n(download\n)* */    $data_list = explode("\n", $data);    if (count($data_list) > 1) {        $version = $data_list[0];        $date = $data_list[1];    } else {        $version = $date = '';    }    $version_upstream = version_to_int($version);    if ($version_upstream === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Got invalid version string from server'));        return;    }    $version_local = version_to_int($GLOBALS['PMA_Config']->get('PMA_VERSION'));    if ($version_local === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Unparsable version string'));        return;    }    if ($version_upstream > $version_local) {        $version = htmlspecialchars($version);        $date = htmlspecialchars($date);        messages_set(            'notice',            $message_id,            __('Version check'),            sprintf(__('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.'), $version, $date));    } else {        if ($version_local % 100 == 0) {            messages_set(                'notice',                $message_id,                __('Version check'),                PMA_sanitize(sprintf(__('You are using Git version, run [kbd]git pull[/kbd] :-)[br]The latest stable version is %s, released on %s.'), $version, $date)));        } else {            messages_set(                'notice',                $message_id,                __('Version check'),                __('No newer stable version is available'));        }    }}/** * Calculates numerical equivalent of phpMyAdmin version string * * @param string  $version * @return mixed  false on failure, integer on success */function version_to_int($version){    $matches = array();    if (!preg_match('/^(\d+)\.(\d+)\.(\d+)((\.|-(pl|rc|dev|beta|alpha))(\d+)?(-dev)?)?$/', $version, $matches)) {        return false;    }    if (!empty($matches[6])) {        switch ($matches[6]) {            case 'pl':                $added = 60;                break;            case 'rc':                $added = 30;                break;            case 'beta':                $added = 20;                break;            case 'alpha':                $added = 10;                break;            case 'dev':                $added = 0;                break;            default:                messages_set(                    'notice',                    'version_match',                    __('Version check'),                    'Unknown version part: ' . htmlspecialchars($matches[6]));                $added = 0;                break;        }    } else {        $added = 50; // for final    }    if (!empty($matches[7])) {        $added = $added + $matches[7];    }    return $matches[1] * 1000000 + $matches[2] * 10000 + $matches[3] * 100 + $added;}/** * Checks whether config file is readable/writable * * @param bool &$is_readable * @param bool &$is_writable * @param bool &$file_exists */function check_config_rw(&$is_readable, &$is_writable, &$file_exists){    $file_path = ConfigFile::getInstance()->getFilePath();    $file_dir = dirname($file_path);    $is_readable = true;    $is_writable = is_dir($file_dir);    if (SETUP_DIR_WRITABLE) {        $is_writable = $is_writable && is_writable($file_dir);    }    $file_exists = file_exists($file_path);    if ($file_exists) {        $is_readable = is_readable($file_path);        $is_writable = $is_writable && is_writable($file_path);    }}/** * Performs various compatibility, security and consistency checks on current config * * Outputs results to message list, must be called between messages_begin() * and messages_end() */function perform_config_checks(){    $cf = ConfigFile::getInstance();    $blowfish_secret = $cf->get('blowfish_secret');    $blowfish_secret_set = false;    $cookie_auth_used = false;    $strAllowArbitraryServerWarning = __('This %soption%s should be disabled as it allows attackers to bruteforce login to any MySQL server. If you feel this is necessary, use %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strAllowArbitraryServerWarning = sprintf($strAllowArbitraryServerWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strBlowfishSecretMsg = __('You didn\'t have blowfish secret set and have enabled cookie authentication, so a key was automatically generated for you. It is used to encrypt cookies; you don\'t need to remember it.');    $strBZipDumpWarning = __('%sBzip2 compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strBZipDumpWarning = sprintf($strBZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strDirectoryNotice = __('This value should be double checked to ensure that this directory is neither world accessible nor readable or writable by other users on your server.');    $strForceSSLNotice = __('This %soption%s should be enabled if your web server supports it.');    $strForceSSLNotice = sprintf($strForceSSLNotice, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strGZipDumpWarning = __('%sGZip compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strGZipDumpWarning = sprintf($strGZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strLoginCookieValidityWarning = __('%sLogin cookie validity%s greater than 1440 seconds may cause random session invalidation if %ssession.gc_maxlifetime%s is lower than its value (currently %d).');    $strLoginCookieValidityWarning = sprintf($strLoginCookieValidityWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@' . PMA_getPHPDocLink('session.configuration.php#ini.session.gc-maxlifetime') . ']', '[/a]', ini_get('session.gc_maxlifetime'));    $strLoginCookieValidityWarning2 = __('%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) at most. Values larger than 1800 may pose a security risk such as impersonation.');    $strLoginCookieValidityWarning2 = sprintf($strLoginCookieValidityWarning2, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strLoginCookieValidityWarning3 = __('If using cookie authentication and %sLogin cookie store%s is not 0, %sLogin cookie validity%s must be set to a value less or equal to it.');    $strLoginCookieValidityWarning3 = sprintf($strLoginCookieValidityWarning3, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strSecurityInfoMsg = __('If you feel this is necessary, use additional protection settings - %shost authentication%s settings and %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strSecurityInfoMsg = sprintf($strSecurityInfoMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server_config]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strServerAuthConfigMsg = __('You set the [kbd]config[/kbd] authentication type and included username and password for auto-login, which is not a desirable option for live hosts. Anyone who knows or guesses your phpMyAdmin URL can directly access your phpMyAdmin panel. Set %sauthentication type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].');    $strServerAuthConfigMsg = sprintf($strServerAuthConfigMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server]', '[/a]');    $strZipDumpExportWarning = __('%sZip compression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpExportWarning = sprintf($strZipDumpExportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strZipDumpImportWarning = __('%sZip decompression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpImportWarning = sprintf($strZipDumpImportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    for ($i = 1, $server_cnt = $cf->getServerCount(); $i <= $server_cnt; $i++) {        $cookie_auth_server = ($cf->getValue("Servers/$i/auth_type") == 'cookie');        $cookie_auth_used |= $cookie_auth_server;        $server_name = $cf->getServerName($i);        if ($server_name == 'localhost') {            $server_name .=  " [$i]";        }        $server_name = htmlspecialchars($server_name);        if ($cookie_auth_server && $blowfish_secret === null) {            $blowfish_secret = uniqid('', true);            $blowfish_secret_set = true;            $cf->set('blowfish_secret', $blowfish_secret);        }        //        // $cfg['Servers'][$i]['ssl']        // should be enabled if possible        //        if (!$cf->getValue("Servers/$i/ssl")) {            $title = PMA_lang(PMA_lang_name('Servers/1/ssl')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/ssl",                $title,                __('You should use SSL connections if your database server supports it.'));        }        //        // $cfg['Servers'][$i]['extension']        // warn about using 'mysql'        //        if ($cf->getValue("Servers/$i/extension") == 'mysql') {            $title = PMA_lang(PMA_lang_name('Servers/1/extension')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/extension",                $title,                __('You should use mysqli for performance reasons.'));        }        //        // $cfg['Servers'][$i]['auth_type']        // warn about full user credentials if 'auth_type' is 'config'        //        if ($cf->getValue("Servers/$i/auth_type") == 'config'                && $cf->getValue("Servers/$i/user") != ''                && $cf->getValue("Servers/$i/password") != '') {            $title = PMA_lang(PMA_lang_name('Servers/1/auth_type')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/auth_type",                $title,                PMA_lang($strServerAuthConfigMsg, $i) . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }        //        // $cfg['Servers'][$i]['AllowRoot']        // $cfg['Servers'][$i]['AllowNoPassword']        // serious security flaw        //        if ($cf->getValue("Servers/$i/AllowRoot")                && $cf->getValue("Servers/$i/AllowNoPassword")) {            $title = PMA_lang(PMA_lang_name('Servers/1/AllowNoPassword')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/AllowNoPassword",                $title,                __('You allow for connecting to the server without a password.') . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }    }    //    // $cfg['blowfish_secret']    // it's required for 'cookie' authentication    //    if ($cookie_auth_used) {        if ($blowfish_secret_set) {            // 'cookie' auth used, blowfish_secret was generated            messages_set(                'notice',                'blowfish_secret_created',                PMA_lang(PMA_lang_name('blowfish_secret')),                $strBlowfishSecretMsg);        } else {            $blowfish_warnings = array();            // check length            if (strlen($blowfish_secret) < 8) {                // too short key                $blowfish_warnings[] = __('Key is too short, it should have at least 8 characters.');            }            // check used characters            $has_digits = (bool) preg_match('/\d/', $blowfish_secret);            $has_chars = (bool) preg_match('/\S/', $blowfish_secret);            $has_nonword = (bool) preg_match('/\W/', $blowfish_secret);            if (!$has_digits || !$has_chars || !$has_nonword) {                $blowfish_warnings[] = PMA_lang(__('Key should contain letters, numbers [em]and[/em] special characters.'));            }            if (!empty($blowfish_warnings)) {                messages_set(                    'error',                    'blowfish_warnings' . count($blowfish_warnings),                    PMA_lang(PMA_lang_name('blowfish_secret')),                    implode('<br />', $blowfish_warnings));            }        }    }    //    // $cfg['ForceSSL']    // should be enabled if possible    //    if (!$cf->getValue('ForceSSL')) {        messages_set(            'notice',            'ForceSSL',            PMA_lang(PMA_lang_name('ForceSSL')),            PMA_lang($strForceSSLNotice));    }    //    // $cfg['AllowArbitraryServer']    // should be disabled    //    if ($cf->getValue('AllowArbitraryServer')) {        messages_set(            'notice',            'AllowArbitraryServer',            PMA_lang(PMA_lang_name('AllowArbitraryServer')),            PMA_lang($strAllowArbitraryServerWarning));    }    //    // $cfg['LoginCookieValidity']    // value greater than session.gc_maxlifetime will cause random session invalidation after that time    //    if ($cf->getValue('LoginCookieValidity') > 1440            || $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')) {        $message_type = $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')            ? 'error'            : 'notice';        messages_set(            $message_type,            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning));    }    //    // $cfg['LoginCookieValidity']    // should be at most 1800 (30 min)    //    if ($cf->getValue('LoginCookieValidity') > 1800) {        messages_set(            'notice',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning2));    }    //    // $cfg['LoginCookieValidity']    // $cfg['LoginCookieStore']    // LoginCookieValidity must be less or equal to LoginCookieStore    //    if ($cf->getValue('LoginCookieStore') != 0 && $cf->getValue('LoginCookieValidity') > $cf->getValue('LoginCookieStore')) {        messages_set(            'error',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning3));    }    //    // $cfg['SaveDir']    // should not be world-accessible    //    if ($cf->getValue('SaveDir') != '') {        messages_set(            'notice',            'SaveDir',            PMA_lang(PMA_lang_name('SaveDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['TempDir']    // should not be world-accessible    //    if ($cf->getValue('TempDir') != '') {        messages_set(            'notice',            'TempDir',            PMA_lang(PMA_lang_name('TempDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['GZipDump']    // requires zlib functions    //    if ($cf->getValue('GZipDump')            && (@!function_exists('gzopen') || @!function_exists('gzencode'))) {        messages_set(            'error',            'GZipDump',            PMA_lang(PMA_lang_name('GZipDump')),            PMA_lang($strGZipDumpWarning, 'gzencode'));    }    //    // $cfg['BZipDump']    // requires bzip2 functions    //    if ($cf->getValue('BZipDump')            && (!@function_exists('bzopen') || !@function_exists('bzcompress'))) {        $functions = @function_exists('bzopen')                ? '' :                'bzopen';        $functions .= @function_exists('bzcompress')                ? ''                : ($functions ? ', ' : '') . 'bzcompress';        messages_set(            'error',            'BZipDump',            PMA_lang(PMA_lang_name('BZipDump')),            PMA_lang($strBZipDumpWarning, $functions));    }    //    // $cfg['ZipDump']    // requires zip_open in import    //    if ($cf->getValue('ZipDump') && !@function_exists('zip_open')) {        messages_set(            'error',            'ZipDump_import',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpImportWarning, 'zip_open'));    }    //    // $cfg['ZipDump']    // requires gzcompress in export    //    if ($cf->getValue('ZipDump') && !@function_exists('gzcompress')) {        messages_set(            'error',            'ZipDump_export',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpExportWarning, 'gzcompress'));    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Events management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/events.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_events.lib.php';/** * Do the magic */$_PMA_RTE = 'EVN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating a table (if user has privileges for that) * * for MySQL >= 4.1.0, we should be able to detect if user has a CREATE * privilege by looking at SHOW GRANTS output; * for < 4.1.0, it could be more difficult because the logic tries to * detect the current host and it might be expressed in many ways; also * on a shared server, the user might be unable to define a controluser * that has the proper rights to the "mysql" db; * so we give up and assume that user has the right to create a table * * Note: in this case we could even skip the following "foreach" logic * * Addendum, 2006-01-19: ok, I give up. We got some reports about servers * where the hostname field in mysql.user is not the same as the one * in mysql.db for a user. In this case, SHOW GRANTS does not return * the db-specific privileges. And probably, those users are on a shared * server, so can't set up a control user with rights to the "mysql" db. * We cannot reliably detect the db-specific privileges, so no more * warnings about the lack of privileges for CREATE TABLE. Tested * on MySQL 5.0.18. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';$is_create_table_priv = true;?>    <form id="create_table_form_minimal" method="post" action="tbl_create.php"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><fieldset>    <legend><?phpif ($GLOBALS['cfg']['PropertiesIconic']) {    echo PMA_getImage('b_newtbl.png');}echo __('Create table');?>    </legend>    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <div class="formelement">        <?php echo __('Name'); ?>:        <input type="text" name="table" maxlength="64" size="30" />    </div>    <div class="formelement">        <?php echo __('Number of columns'); ?>:        <input type="text" name="num_fields" size="2" />    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" value="<?php echo __('Go'); ?>" /></fieldset></form>
<?php/** * @package Swekey */?><script>	var g_SwekeyPlugin = null;	// -------------------------------------------------------------------	// Create the swekey plugin if it does not exists	function Swekey_Plugin()	{		try		{			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			if (window.ActiveXObject)			{    			g_SwekeyPlugin = document.getElementById("swekey_activex");    			if (g_SwekeyPlugin == null)    			{                    // we must create the activex that way instead of new ActiveXObject("FbAuthAx.FbAuthCtl");                    // ortherwise SetClientSite is not called and we can not get the url  			  		var div = document.createElement('div');	   				div.innerHTML='<object id="swekey_activex" style="display:none" CLASSID="CLSID:8E02E3F9-57AA-4EE1-AA68-A42DD7B0FADE"></object>';    				// Never append to the body because it may still loading and it breaks IE	   				document.body.insertBefore(div, document.body.firstChild);    				g_SwekeyPlugin = document.getElementById("swekey_activex");                }				return g_SwekeyPlugin;			}			g_SwekeyPlugin = document.getElementById("swekey_plugin");			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			for (i = 0; i < navigator.plugins.length; i ++)			{				try				{				    if (navigator.plugins[i] == null)				    {				        navigator.plugins.refresh();                    }                    else if (navigator.plugins[i][0] != null && navigator.plugins[i][0].type == "application/fbauth-plugin")					{						var x = document.createElement('embed');						x.setAttribute('type', 'application/fbauth-plugin');						x.setAttribute('id', 'swekey_plugin');						x.setAttribute('width', '0');						x.setAttribute('height', '0');						x.style.dislay='none';						//document.body.appendChild(x);						document.body.insertBefore(x, document.body.firstChild);						g_SwekeyPlugin = document.getElementById("swekey_plugin");						return g_SwekeyPlugin;					}				}				catch (e)				{				    navigator.plugins.refresh();					//alert ('Failed to create plugin: ' + e);				}			}		}		catch (e)		{			//alert("Swekey_Plugin " + e);			g_SwekeyPlugin = null;		}		return null;	}	// -------------------------------------------------------------------	// Returns true if the swekey plugin is installed	function Swekey_Installed()	{		return (Swekey_Plugin() != null);	}	// -------------------------------------------------------------------	// List the id of the Swekey connected to the PC	// Returns a string containing comma separated Swekey Ids    // A Swekey is a 32 char hexadecimal value.	function Swekey_ListKeyIds()	{		try		{			return Swekey_Plugin().list();		}		catch (e)		{//			alert("Swekey_ListKeyIds " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate an OTP	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetOtp(id, rt)	{		try		{			return Swekey_Plugin().getotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetOtp " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate a OTP linked to the current https host	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	// or "" if the current url does not start with https	function Swekey_GetLinkedOtp(id, rt)	{		try		{			return Swekey_Plugin().getlinkedotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetSOtp " + e);		}		return "";	}	// -------------------------------------------------------------------    // Calls Swekey_GetOtp or Swekey_GetLinkedOtp depending if we are in    // an https page or not.	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetSmartOtp(id, rt)	{        var res = Swekey_GetLinkedOtp(id, rt);        if (res == "")            res = Swekey_GetOtp(id, rt);		return res;	}	// -------------------------------------------------------------------	// Set a unplug handler (url) to the specified connected feebee	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// key: The key that index that url, (aplhanumeric values only)	// url: The url that will be launched ("" deletes the url)	function Swekey_SetUnplugUrl(id, key, url)	{		try		{			return Swekey_Plugin().setunplugurl(id, key, url);		}		catch (e)		{//			alert("Swekey_SetUnplugUrl " + e);		}	}</script>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin * * @todo    add an option for handling NULL values * @package PhpMyAdmin-Import * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}$analyze = false;if ($plugin_param !== 'table') {    $analyze = true;}if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns separated with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated with:'), 'size' => 2),            ),        'options_text' => __('Options'),        );    if ($plugin_param !== 'table') {        $plugin_list['csv']['options'][]            = array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>'));    } else {        $hint = new PMA_Message(__('If the data in each row of the file is not in the same order as in the database, list the corresponding column names here. Column names must be separated by commas and not enclosed in quotations.'));        $plugin_list['csv']['options'][]            = array('type' => 'text', 'name' => 'columns', 'text' => __('Column names: ') . PMA_showHint($hint));    }    $plugin_list['csv']['options'][] = array('type' => 'end_group');    /* We do not define function when plugin is just queried for information above */    return;}$replacements = array(    '\\n'   => "\n",    '\\t'   => "\t",    '\\r'   => "\r",    );$csv_terminated = strtr($csv_terminated, $replacements);$csv_enclosed = strtr($csv_enclosed,  $replacements);$csv_escaped = strtr($csv_escaped, $replacements);$csv_new_line = strtr($csv_new_line, $replacements);$param_error = false;if (strlen($csv_terminated) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns terminated by'), false);    $error = true;    $param_error = true;    // The default dialog of MS Excel when generating a CSV produces a    // semi-colon-separated file with no chance of specifying the    // enclosing character. Thus, users who want to import this file    // tend to remove the enclosing character on the Import dialog.    // I could not find a test case where having no enclosing characters    // confuses this script.    // But the parser won't work correctly with strings so we allow just    // one character.} elseif (strlen($csv_enclosed) > 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns enclosed by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_escaped) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns escaped by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_new_line) != 1 && $csv_new_line != 'auto') {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Lines terminated by'), false);    $error = true;    $param_error = true;}// If there is an error in the parameters entered, indicate that immediately.if ($param_error) {    PMA_mysqlDie($message->getMessage(), '', '', $err_url);}$buffer = '';$required_fields = 0;if (!$analyze) {    if (isset($csv_replace)) {        $sql_template = 'REPLACE';    } else {        $sql_template = 'INSERT';        if (isset($csv_ignore)) {            $sql_template .= ' IGNORE';        }    }    $sql_template .= ' INTO ' . PMA_backquote($table);    $tmp_fields = PMA_DBI_get_columns($db, $table);    if (empty($csv_columns)) {        $fields = $tmp_fields;    } else {        $sql_template .= ' (';        $fields = array();        $tmp   = preg_split('/,( ?)/', $csv_columns);        foreach ($tmp as $key => $val) {            if (count($fields) > 0) {                $sql_template .= ', ';            }            /* Trim also `, if user already included backquoted fields */            $val = trim($val, " \t\r\n\0\x0B`");            $found = false;            foreach ($tmp_fields as $id => $field) {                if ($field['Field'] == $val) {                    $found = true;                    break;                }            }            if (!$found) {                $message = PMA_Message::error(__('Invalid column (%s) specified! Ensure that columns names are spelled correctly, separated by commas, and not enclosed in quotes.'));                $message->addParam($val);                $error = true;                break;            }            $fields[] = $field;            $sql_template .= PMA_backquote($val);        }        $sql_template .= ') ';    }    $required_fields = count($fields);    $sql_template .= ' VALUES (';}// Defaults for parser$i = 0;$len = 0;$line = 1;$lasti = -1;$values = array();$csv_finish = false;$tempRow = array();$rows = array();$col_names = array();$tables = array();$col_count = 0;$max_cols = 0;while (!($finished && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        unset($data);        // Do not parse string when we're not at the end and don't have new line inside        if (($csv_new_line == 'auto' && strpos($buffer, "\r") === false && strpos($buffer, "\n") === false)            || ($csv_new_line != 'auto' && strpos($buffer, $csv_new_line) === false)        ) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Currently parsed char    $ch = $buffer[$i];    while ($i < $len) {        // Deadlock protection        if ($lasti == $i && $lastlen == $len) {            $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));            $message->addParam($line);            $error = true;            break;        }        $lasti = $i;        $lastlen = $len;        // This can happen with auto EOL and \r at the end of buffer        if (!$csv_finish) {            // Grab empty field            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    break;                }                $values[] = '';                $i++;                $ch = $buffer[$i];                continue;            }            // Grab one field            $fallbacki = $i;            if ($ch == $csv_enclosed) {                if ($i == $len - 1) {                    break;                }                $need_end = true;                $i++;                $ch = $buffer[$i];            } else {                $need_end = false;            }            $fail = false;            $value = '';            while (($need_end && ($ch != $csv_enclosed || $csv_enclosed == $csv_escaped))             || (!$need_end && !($ch == $csv_terminated               || $ch == $csv_new_line || ($csv_new_line == 'auto'                && ($ch == "\r" || $ch == "\n"))))) {                if ($ch == $csv_escaped) {                    if ($i == $len - 1) {                        $fail = true;                        break;                    }                    $i++;                    $ch = $buffer[$i];                    if ($csv_enclosed == $csv_escaped && ($ch == $csv_terminated                     || $ch == $csv_new_line || ($csv_new_line == 'auto'                      && ($ch == "\r" || $ch == "\n")))) {                        break;                    }                }                $value .= $ch;                if ($i == $len - 1) {                    if (!$finished) {                        $fail = true;                    }                    break;                }                $i++;                $ch = $buffer[$i];            }            // unquoted NULL string            if (false === $need_end && $value === 'NULL') {                $value = null;            }            if ($fail) {                $i = $fallbacki;                $ch = $buffer[$i];                break;            }            // Need to strip trailing enclosing char?            if ($need_end && $ch == $csv_enclosed) {                if ($finished && $i == $len - 1) {                    $ch = null;                } elseif ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                } else {                    $i++;                    $ch = $buffer[$i];                }            }            // Are we at the end?            if ($ch == $csv_new_line                || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))                || ($finished && $i == $len - 1)            ) {                $csv_finish = true;            }            // Go to next char            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                }                $i++;                $ch = $buffer[$i];            }            // If everything went okay, store value            $values[] = $value;        }        // End of line        if ($csv_finish            || $ch == $csv_new_line            || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))        ) {            if ($csv_new_line == 'auto' && $ch == "\r") { // Handle "\r\n"                if ($i >= ($len - 2) && !$finished) {                    break; // We need more data to decide new line                }                if ($buffer[$i + 1] == "\n") {                    $i++;                }            }            // We didn't parse value till the end of line, so there was empty one            if (!$csv_finish) {                $values[] = '';            }            if ($analyze) {                foreach ($values as $ley => $val) {                    $tempRow[] = $val;                    ++$col_count;                }                if ($col_count > $max_cols) {                    $max_cols = $col_count;                }                $col_count = 0;                $rows[] = $tempRow;                $tempRow = array();            } else {                // Do we have correct count of values?                if (count($values) != $required_fields) {                    // Hack for excel                    if ($values[count($values) - 1] == ';') {                        unset($values[count($values) - 1]);                    } else {                        $message = PMA_Message::error(__('Invalid column count in CSV input on line %d.'));                        $message->addParam($line);                        $error = true;                        break;                    }                }                $first = true;                $sql = $sql_template;                foreach ($values as $key => $val) {                    if (!$first) {                        $sql .= ', ';                    }                    if ($val === null) {                        $sql .= 'NULL';                    } else {                        $sql .= '\'' . PMA_sqlAddSlashes($val) . '\'';                    }                    $first = false;                }                $sql .= ')';                /**                 * @todo maybe we could add original line to verbose SQL in comment                 */                PMA_importRunQuery($sql, $sql);            }            $line++;            $csv_finish = false;            $values = array();            $buffer = substr($buffer, $i + 1);            $len = strlen($buffer);            $i = 0;            $lasti = -1;            $ch = $buffer[0];        }    } // End of parser loop} // End of import loopif ($analyze) {    /* Fill out all rows */    $num_rows = count($rows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($rows[$i]); $j < $max_cols; ++$j) {            $rows[$i][] = 'NULL';        }    }    if (isset($_REQUEST['csv_col_names'])) {        $col_names = array_splice($rows, 0, 1);        $col_names = $col_names[0];    }    if ((isset($col_names) && count($col_names) != $max_cols)        || ! isset($col_names)    ) {        // Fill out column names        for ($i = 0; $i < $max_cols; ++$i) {            $col_names[] = 'COL '.($i+1);        }    }    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $tbl_name = 'TABLE '.(count($result) + 1);    } else {        $tbl_name = 'TBL_NAME';    }    $tables[] = array($tbl_name, $col_names, $rows);    /* Obtain the best-fit MySQL types for each column */    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    /**     * string $db_name (no backquotes)     *     * array $table = array(table_name, array() column_names, array()() rows)     * array $tables = array of "$table"s     *     * array $analysis = array(array() column_types, array() column_sizes)     * array $analyses = array of "$analysis"s     *     * array $create = array of SQL strings     *     * array $options = an associative array of options     */    /* Set database name to the currently selected one, if applicable */    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'CSV_DB';        $options = null;    }    /* Non-applicable parameters */    $create = null;    /* Created and execute necessary SQL statements from data */    PMA_buildSQL($db_name, $tables, $analyses, $create, $options);    unset($tables);    unset($analyses);}// Commit any possible data in buffersPMA_importRunQuery();if (count($values) != 0 && !$error) {    $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));    $message->addParam($line);    $error = true;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin */require_once './db_triggers.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the partitions * * @package PhpMyAdmin *//** * base Partition Class * @package PhpMyAdmin */class PMA_Partition{    /**     * returns array of partition names for a specific db/table     *     * @access  public     * @return  array   of partition names     */    static public function getPartitionNames($db, $table)    {        if (PMA_Partition::havePartitioning()) {            return PMA_DBI_fetch_result("select `PARTITION_NAME` from `information_schema`.`PARTITIONS` where `TABLE_SCHEMA` = '" . $db . "' and `TABLE_NAME` = '" . $table . "'");        } else {            return array();        }    }    /**     * checks if MySQL server supports partitioning     *     * @static     * @staticvar boolean $have_partitioning     * @staticvar boolean $already_checked     * @access  public     * @return  boolean     */    static public function havePartitioning()    {        static $have_partitioning = false;        static $already_checked = false;        if (! $already_checked) {            $have_partitioning = PMA_MYSQL_INT_VERSION >= 50100 && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'have_partitioning';");            $already_checked = true;        }        return $have_partitioning;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Charset conversion functions. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}define('PMA_CHARSET_NONE', 0);define('PMA_CHARSET_ICONV', 1);define('PMA_CHARSET_RECODE', 2);define('PMA_CHARSET_ICONV_AIX', 3);// Finally detect which function we will use:if ($cfg['RecodingEngine'] == 'iconv') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('iconv');    }} elseif ($cfg['RecodingEngine'] == 'recode') {    if (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('recode');    }} elseif ($cfg['RecodingEngine'] == 'auto') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } elseif (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;    }} else {    $PMA_recoding_engine = PMA_CHARSET_NONE;}/* Load AIX iconv wrapper if needed */if ($PMA_recoding_engine == PMA_CHARSET_ICONV_AIX) {    include_once './libraries/iconv_wrapper.lib.php';}/** * Converts encoding of text according to parameters with detected * conversion function. * * @param string   source charset * @param string   target charset * @param string   what to convert * * @return  string   converted text * * @access  public * */function PMA_convert_string($src_charset, $dest_charset, $what){    if ($src_charset == $dest_charset) {        return $what;    }    switch ($GLOBALS['PMA_recoding_engine']) {        case PMA_CHARSET_RECODE:            return recode_string($src_charset . '..'  . $dest_charset, $what);        case PMA_CHARSET_ICONV:            return iconv($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        case PMA_CHARSET_ICONV_AIX:            return PMA_aix_iconv_wrapper($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        default:            return $what;    }} //  end of the "PMA_convert_string()" function?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build MediaWiki dumps of tables * * @package PhpMyAdmin-Export * @subpackage MediaWiki */if (! defined('PHPMYADMIN')) {    exit;}if (isset($plugin_list)) {    $plugin_list['mediawiki'] = array(        'text' => __('MediaWiki Table'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in MediaWiki format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        $columns = PMA_DBI_get_columns($db, $table);        $columns = array_values($columns);        $row_cnt = count($columns);        $output = "{| cellpadding=\"10\" cellspacing=\"0\" border=\"1\" style=\"text-align:center;\"\n";        $output .= "|+'''" . $table . "'''\n";        $output .= "|- style=\"background:#ffdead;\"\n";        $output .= "! style=\"background:#ffffff\" | \n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Field'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Type\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Type'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Null\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Null'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Default\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Default'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Extra\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Extra'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|}\n\n\n\n";        return PMA_exportOutputHandler($output);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple wrapper just to enable error reporting and include config * * @package PhpMyAdmin */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';PMA_no_cache_header();header('Content-Type: text/html; charset=utf-8');require './libraries/vendor_config.php';error_reporting(E_ALL);/** * Read config file. */if (is_readable(CONFIG_FILE)) {    require CONFIG_FILE;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__link_info(){    return array(        'info' => __('Displays a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second option is a title for the link.'),        );}/** * */function PMA_transformation_text_plain__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';//    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . '%1$s" title="' . (isset($options[1]) ? $options[1] : '%1$s') . '">' . (isset($options[1]) ? $options[1] : '%1$s') . '</a>');    $transform_options = array ('string' => '<a href="' . PMA_linkURL((isset($options[0]) ? $options[0] : '') . $buffer) . '" title="' . (isset($options[1]) ? $options[1] : '') . '">' . (isset($options[1]) ? $options[1] : $buffer) . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays and handles the form where the user can change his password * linked from main.php * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_privileges.js';/** * Displays an error message and exits if the user isn't allowed to use this * script */if (!$cfg['ShowChgPassword']) {    $cfg['ShowChgPassword'] = PMA_DBI_select_db('mysql');}if ($cfg['Server']['auth_type'] == 'config' || !$cfg['ShowChgPassword']) {    include_once './libraries/header.inc.php';    PMA_Message::error(__('You don\'t have sufficient privileges to be here right now!'))->display();    include './libraries/footer.inc.php';} // end if/** * If the "change password" form has been submitted, checks for valid values * and submit the query or logout */if (isset($_REQUEST['nopass'])) {    // similar logic in server_privileges.php    $_error = false;    if ($_REQUEST['nopass'] == '1') {        $password = '';    } elseif (empty($_REQUEST['pma_pw']) || empty($_REQUEST['pma_pw2'])) {        $message = PMA_Message::error(__('The password is empty!'));        $_error = true;    } elseif ($_REQUEST['pma_pw'] != $_REQUEST['pma_pw2']) {        $message = PMA_Message::error(__('The passwords aren\'t the same!'));        $_error = true;    } else {        $password = $_REQUEST['pma_pw'];    }    if ($GLOBALS['is_ajax_request'] == true && $_error == true) {        /**         * If in an Ajax request, we don't need to show the rest of the page         */        PMA_ajaxResponse($message, false);    }    if (! $_error) {        // Defines the url to return to in case of error in the sql statement        $_url_params = array();        $err_url          = 'user_password.php' . PMA_generate_common_url($_url_params);        if (PMA_isValid($_REQUEST['pw_hash'], 'identical', 'old')) {            $hashing_function = 'OLD_PASSWORD';        } else {            $hashing_function = 'PASSWORD';        }        $sql_query        = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'***\')');        $local_query      = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($password) . '\')');        $result           = @PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        // Changes password cookie if required        // Duration = till the browser is closed for password (we don't want this to be saved)        if ($cfg['Server']['auth_type'] == 'cookie') {            $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $server,                PMA_blowfish_encrypt($password, $GLOBALS['cfg']['blowfish_secret']));        } // end if        // For http auth. mode, the "back" link will also enforce new        // authentication        if ($cfg['Server']['auth_type'] == 'http') {            $_url_params['old_usr'] = 'relog';        }        $message = PMA_Message::success(__('The profile has been updated.'));        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage($message, $sql_query, 'success');            PMA_ajaxResponse($message, true, $extra_data);        }        // Displays the page        include_once './libraries/header.inc.php';        echo '<h1>' . __('Change password') . '</h1>' . "\n\n";        PMA_showMessage($message, $sql_query, 'success');        ?>        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">            <strong><?php echo __('Back'); ?></strong></a>        <?php        include './libraries/footer.inc.php';    } // end if} // end if/** * If the "change password" form hasn't been submitted or the values submitted * aren't valid -> displays the form */// Loads the headersrequire_once './libraries/header.inc.php';echo '<h1>' . __('Change password') . '</h1>' . "\n\n";// Displays an error message if requiredif (isset($message)) {    $message->display();}require_once './libraries/display_change_password.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Library that provides common functions that are used to help integrating Swekey Authentication in a PHP web site * Version 1.0 * * History: * 1.2 Use curl (widely installed) to query the server *     Fixed a possible tempfile race attack *     Random token cache can now be disabled * 1.1 Added Swekey_HttpGet function that support faulty servers *     Support for custom servers * 1.0 First release * * @package Swekey *//** * Errors codes */define ("SWEKEY_ERR_INVALID_DEV_STATUS", 901);   // The satus of the device is not SWEKEY_STATUS_OKdefine ("SWEKEY_ERR_INTERNAL", 902);             // Should never occurddefine ("SWEKEY_ERR_OUTDATED_RND_TOKEN", 910);   // You random token is too olddefine ("SWEKEY_ERR_INVALID_OTP", 911);          // The otp was not correct/** * Those errors are considered as an attack and your site will be blacklisted during one minute * if you receive one of those errors */define ("SWEKEY_ERR_BADLY_ENCODED_REQUEST", 920);define ("SWEKEY_ERR_INVALID_RND_TOKEN", 921);define ("SWEKEY_ERR_DEV_NOT_FOUND", 922);/** * Default values for configuration. */define ('SWEKEY_DEFAULT_CHECK_SERVER', 'https://auth-check.musbe.net');define ('SWEKEY_DEFAULT_RND_SERVER', 'https://auth-rnd-gen.musbe.net');define ('SWEKEY_DEFAULT_STATUS_SERVER', 'https://auth-status.musbe.net');/** * The last error of an operation is alway put in this global var */global $gSwekeyLastError;$gSwekeyLastError = 0;global $gSwekeyLastResult;$gSwekeyLastResult = "<not set>";/** * Servers addresses * Use the  Swekey_SetXxxServer($server) functions to set them */global $gSwekeyCheckServer;if (! isset($gSwekeyCheckServer))    $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;global $gSwekeyRndTokenServer;if (! isset($gSwekeyRndTokenServer))    $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;global $gSwekeyStatusServer;if (! isset($gSwekeyStatusServer))    $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;global $gSwekeyCA;global $gSwekeyTokenCacheEnabled;if (! isset($gSwekeyTokenCacheEnabled))    $gSwekeyTokenCacheEnabled = true;/** *  Change the address of the Check server. *  If $server is empty the default value 'http://auth-check.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetCheckServer($server){    global $gSwekeyCheckServer;    if (empty($server))        $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;    else        $gSwekeyCheckServer = $server;}/** *  Change the address of the Random Token Generator server. *  If $server is empty the default value 'http://auth-rnd-gen.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetRndTokenServer($server){    global $gSwekeyRndTokenServer;    if (empty($server))        $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;    else        $gSwekeyRndTokenServer = $server;}/** *  Change the address of the Satus server. *  If $server is empty the default value 'http://auth-status.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetStatusServer($server){    global $gSwekeyStatusServer;    if (empty($server))        $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;    else        $gSwekeyStatusServer = $server;}/** *  Change the certificat file in case of the the severs use https instead of http * *  @param  cafile              The path of the crt file to use *  @access public */function Swekey_SetCAFile($cafile){    global $gSwekeyCA;       $gSwekeyCA = $cafile;}/** *  Enable or disable the random token caching *  Because everybody has full access to the cache file, it can be a DOS vulnerability *  So disable it if you are running in a non secure enviromnement * *  @param  $enable *  @access public */function Swekey_EnableTokenCache($enable){    global $gSwekeyTokenCacheEnabled;    $gSwekeyTokenCacheEnabled = ! empty($enable);}/** *  Return the last error. * *  @return                     The Last Error *  @access public */function Swekey_GetLastError(){    global $gSwekeyLastError;    return $gSwekeyLastError;}/** *  Return the last result. * *  @return                     The Last Error *  @access public */function Swekey_GetLastResult(){    global $gSwekeyLastResult;    return $gSwekeyLastResult;}/** *  Send a synchronous request to the  server. *  This function manages timeout then will not block if one of the server is down * *  @param  url                 The url to get *  @param  response_code       The response code *  @return                     The body of the response or "" in case of error *  @access private */function Swekey_HttpGet($url, &$response_code){    global $gSwekeyLastError;    $gSwekeyLastError = 0;    global $gSwekeyLastResult;    $gSwekeyLastResult = "<not set>";     // use curl if available    if (function_exists('curl_init')) {        $sess = curl_init($url);        if (substr($url, 0, 8) == "https://") {            global $gSwekeyCA;            if (! empty($gSwekeyCA)) {                if (file_exists($gSwekeyCA)) {                    if (! curl_setopt($sess, CURLOPT_CAINFO, $gSwekeyCA)) {                        error_log("SWEKEY_ERROR:Could not set CA file : ".curl_error($sess));                    } else {                        $caFileOk = true;                    }                } else {                    error_log("SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url");                }            }            curl_setopt($sess, CURLOPT_SSL_VERIFYHOST, '2');            curl_setopt($sess, CURLOPT_SSL_VERIFYPEER, '2');            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '20');            curl_setopt($sess, CURLOPT_TIMEOUT, '20');        } else {            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '3');            curl_setopt($sess, CURLOPT_TIMEOUT, '5');        }        curl_setopt($sess, CURLOPT_RETURNTRANSFER, '1');        $res=curl_exec($sess);        $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);        $curlerr = curl_error($sess);        curl_close($sess);        if ($response_code == 200) {            $gSwekeyLastResult = $res;            return $res;        }        if (! empty($response_code)) {            $gSwekeyLastError = $response_code;            error_log("SWEKEY_ERROR:Error $gSwekeyLastError ($curlerr) getting $url");            return "";        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error $curlerr getting $url");        return "";    }    // use pecl_http if available    if (class_exists('HttpRequest')) {        // retry if one of the server is down        for ($num=1; $num <= 3; $num++ ) {            $r = new HttpRequest($url);            $options = array('timeout' => '3');            if (substr($url, 0, 6) == "https:") {                $sslOptions = array();                $sslOptions['verifypeer'] = true;                $sslOptions['verifyhost'] = true;                $capath = __FILE__;                $name = strrchr($capath, '/');                // windows                if (empty($name)) {                    $name = strrchr($capath, '\\');                }                $capath = substr($capath, 0, strlen($capath) - strlen($name) + 1).'musbe-ca.crt';                if (! empty($gSwekeyCA)) {                    $sslOptions['cainfo'] = $gSwekeyCA;                }                $options['ssl'] = $sslOptions;            }            $r->setOptions($options); //           try            {               $reply = $r->send();               $res = $reply->getBody();               $info = $r->getResponseInfo();               $response_code = $info['response_code'];               if ($response_code != 200)               {                    $gSwekeyLastError = $response_code;                    error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);                    return "";               }               $gSwekeyLastResult = $res;               return $res;            } //           catch (HttpException $e) //           { //               error_log("SWEKEY_WARNING:HttpException ".$e." getting ".$url); //           }        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);        return "";    }       global $http_response_header;    $res = @file_get_contents($url);    $response_code = substr($http_response_header[0], 9, 3); //HTTP/1.0    if ($response_code == 200) {       $gSwekeyLastResult = $res;       return $res;    }    $gSwekeyLastError = $response_code;    error_log("SWEKEY_ERROR:Error ".$response_code." getting ".$url);    return "";}/** *  Get a Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  You should better use Swekey_GetFastRndToken() for performance *  @access public */function Swekey_GetRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/FULL-RND-TOKEN', $response_code);}/** *  Get a Half Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  Use this value if you want to make your own Swekey_GetFastRndToken() *  @access public */function Swekey_GetHalfRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/HALF-RND-TOKEN', $response_code);}/** *  Get a Half Random Token *  The RT is a 64 vhars hexadecimal value *  This function get a new random token and reuse it. *  Token are refetched from the server only once every 30 seconds. *  You should always use this function to get half random token. *  @access public */function Swekey_GetFastHalfRndToken(){    global $gSwekeyTokenCacheEnabled;    $res = "";    $cachefile = "";    // We check if we have a valid RT is the session    if (isset($_SESSION['rnd-token-date'])) {        if (time() - $_SESSION['rnd-token-date'] < 30) {             $res = $_SESSION['rnd-token'];        }    }    // If not we try to get it from a temp file (PHP >= 5.2.1 only)    if (strlen($res) != 32 && $gSwekeyTokenCacheEnabled) {        if (function_exists('sys_get_temp_dir')) {            $tempdir = sys_get_temp_dir();            $cachefile = $tempdir."/swekey-rnd-token-".get_current_user();            $modif = filemtime($cachefile);            if ($modif != false) {                if (time() - $modif < 30) {                    $res = @file_get_contents($cachefile);                    if (strlen($res) != 32) {                         $res = "";                    } else {                         $_SESSION['rnd-token'] = $res;                         $_SESSION['rnd-token-date'] = $modif;                    }                }            }        }    }    // If we don't have a valid RT here we have to get it from the server    if (strlen($res) != 32) {        $res = substr(Swekey_GetHalfRndToken(), 0, 32);        $_SESSION['rnd-token'] = $res;        $_SESSION['rnd-token-date'] = time();        if (! empty($cachefile)) {            // we unlink the file so no possible tempfile race attack            unlink($cachefile);            $file = fopen($cachefile, "x");            if ($file != false) {                @fwrite($file, $res);                @fclose($file);            }        }    }   return $res."00000000000000000000000000000000";}/** *  Get a Random Token *  The RT is a 64 vhars hexadecimal value *  This function generates a unique random token for each call but call the *  server only once every 30 seconds. *  You should always use this function to get random token. *  @access public */function Swekey_GetFastRndToken(){    $res = Swekey_GetFastHalfRndToken();    if (strlen($res) == 64)        return substr($res, 0, 32).strtoupper(md5("Musbe Authentication Key" + mt_rand() + date(DATE_ATOM)));    return "";}/** *  Checks that an OTP generated by a Swekey is valid * *  @param  id                  The id of the swekey *  @param rt                   The random token used to generate the otp *  @param otp                  The otp generated by the swekey *  @return                     true or false *  @access public */function Swekey_CheckOtp($id, $rt, $otp){    global $gSwekeyCheckServer;    $res = Swekey_HttpGet($gSwekeyCheckServer.'/CHECK-OTP/'.$id.'/'.$rt.'/'.$otp, $response_code);    return $response_code == 200 && $res == "OK";}/** * Values that are associated with a key. * The following values can be returned by the Swekey_GetStatus() function */define ("SWEKEY_STATUS_OK", 0);define ("SWEKEY_STATUS_NOT_FOUND", 1);  // The key does not exist in the dbdefine ("SWEKEY_STATUS_INACTIVE", 2);   // The key has never been activateddefine ("SWEKEY_STATUS_LOST", 3);       // The user has lost his keydefine ("SWEKEY_STATUS_STOLEN", 4);       // The key was stolendefine ("SWEKEY_STATUS_FEE_DUE", 5);       // The annual fee was not paiddefine ("SWEKEY_STATUS_OBSOLETE", 6);   // The hardware is no longer supporteddefine ("SWEKEY_STATUS_UNKOWN", 201);   // We could not connect to the authentication server/** * Values that are associated with a key. * The Javascript Api can also return the following values */define ("SWEKEY_STATUS_REPLACED", 100);     // This key has been replaced by a backup keydefine ("SWEKEY_STATUS_BACKUP_KEY", 101); // This key is a backup key that is not activated yetdefine ("SWEKEY_STATUS_NOTPLUGGED", 200); // This key is not plugged in the computer/** *  Return the text corresponding to the integer status of a key * *  @param  status              The status *  @return                     The text corresponding to the status *  @access public */function Swekey_GetStatusStr($status){    switch($status)    {       case SWEKEY_STATUS_OK            : return 'OK';       case SWEKEY_STATUS_NOT_FOUND        : return 'Key does not exist in the db';       case SWEKEY_STATUS_INACTIVE        : return 'Key not activated';       case SWEKEY_STATUS_LOST            : return 'Key was lost';       case SWEKEY_STATUS_STOLEN        : return 'Key was stolen';       case SWEKEY_STATUS_FEE_DUE        : return 'The annual fee was not paid';       case SWEKEY_STATUS_OBSOLETE        : return 'Key no longer supported';       case SWEKEY_STATUS_REPLACED        : return 'This key has been replaced by a backup key';       case SWEKEY_STATUS_BACKUP_KEY    : return 'This key is a backup key that is not activated yet';       case SWEKEY_STATUS_NOTPLUGGED    : return 'This key is not plugged in the computer';       case SWEKEY_STATUS_UNKOWN        : return 'Unknow Status, could not connect to the authentication server';    }    return 'unknown status '.$status;}/** *  If your web site requires a key to login you should check that the key *  is still valid (has not been lost or stolen) before requiring it. *  A key can be authenticated only if its status is SWEKEY_STATUS_OK *  @param  id                  The id of the swekey *  @return                     The status of the swekey *  @access public */function Swekey_GetStatus($id){    global $gSwekeyStatusServer;    $res = Swekey_HttpGet($gSwekeyStatusServer.'/GET-STATUS/'.$id, $response_code);    if ($response_code == 200)        return intval($res);    return SWEKEY_STATUS_UNKOWN;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for displaying user preferences pages * * @package PhpMyAdmin *//** * Common initialization for user preferences modification pages * */function PMA_userprefs_pageinit(){    $forms_all_keys = PMA_read_userprefs_fieldnames($GLOBALS['forms']);    $cf = ConfigFile::getInstance();    $cf->resetConfigData(); // start with a clean instance    $cf->setAllowedKeys($forms_all_keys);    $cf->setCfgUpdateReadMapping(        array(            'Server/hide_db' => 'Servers/1/hide_db',            'Server/only_db' => 'Servers/1/only_db'        )    );    $cf->updateWithGlobalConfig($GLOBALS['cfg']);}/** * Loads user preferences * * Returns an array: * * config_data - path => value pairs * * mtime - last modification time * * type - 'db' (config read from pmadb) or 'session' (read from user session) * * @return array */function PMA_load_userprefs(){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['userconfigwork']) {        // no pmadb table, use session storage        if (! isset($_SESSION['userconfig'])) {            $_SESSION['userconfig'] = array(                'db' => array(),                'ts' => time());        }        return array(            'config_data' => $_SESSION['userconfig']['db'],            'mtime' => $_SESSION['userconfig']['ts'],            'type' => 'session');    }    // load configuration from pmadb    $query_table = PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['userconfig']);    $query = '        SELECT `config_data`, UNIX_TIMESTAMP(`timevalue`) ts        FROM ' . $query_table . '          WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    $row = PMA_DBI_fetch_single_row($query, 'ASSOC', $GLOBALS['controllink']);    return array(        'config_data' => $row ? (array)json_decode($row['config_data']) : array(),        'mtime' => $row ? $row['ts'] : time(),        'type' => 'db');}/** * Saves user preferences * * @param array $config_array configuration array * * @return true|PMA_Message */function PMA_save_userprefs(array $config_array){    $cfgRelation = PMA_getRelationsParam();    $server = isset($GLOBALS['server'])        ? $GLOBALS['server']        : $GLOBALS['cfg']['ServerDefault'];    $cache_key = 'server_' . $server;    if (! $cfgRelation['userconfigwork']) {        // no pmadb table, use session storage        $_SESSION['userconfig'] = array(            'db' => $config_array,            'ts' => time());        if (isset($_SESSION['cache'][$cache_key]['userprefs'])) {            unset($_SESSION['cache'][$cache_key]['userprefs']);        }        return true;    }    // save configuration to pmadb    $query_table = PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['userconfig']);    $query = '        SELECT `username`        FROM ' . $query_table . '          WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    $has_config = PMA_DBI_fetch_value($query, 0, 0, $GLOBALS['controllink']);    $config_data = json_encode($config_array);    if ($has_config) {        $query = '            UPDATE ' . $query_table . '            SET `config_data` = \'' . PMA_sqlAddSlashes($config_data) . '\'            WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    } else {        $query = '            INSERT INTO ' . $query_table . ' (`username`, `config_data`)            VALUES (\'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\',                \'' . PMA_sqlAddSlashes($config_data) . '\')';    }    if (isset($_SESSION['cache'][$cache_key]['userprefs'])) {        unset($_SESSION['cache'][$cache_key]['userprefs']);    }    if (!PMA_DBI_try_query($query, $GLOBALS['controllink'])) {        $message = PMA_Message::error(__('Could not save configuration'));        $message->addMessage('<br /><br />');        $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));        return $message;    }    return true;}/** * Returns a user preferences array filtered by $cfg['UserprefsDisallow'] * (blacklist) and keys from user preferences form (whitelist) * * @param array $config_data path => value pairs * * @return array */function PMA_apply_userprefs(array $config_data){    $cfg = array();    $blacklist = array_flip($GLOBALS['cfg']['UserprefsDisallow']);    if (!$GLOBALS['cfg']['UserprefsDeveloperTab']) {        // disallow everything in the Developers tab        $blacklist['Error_Handler/display'] = true;        $blacklist['Error_Handler/gather'] = true;        $blacklist['DBG/sql'] = true;    }    $whitelist = array_flip(PMA_read_userprefs_fieldnames());    // whitelist some additional fields which are custom handled    $whitelist['ThemeDefault'] = true;    $whitelist['fontsize'] = true;    $whitelist['lang'] = true;    $whitelist['collation_connection'] = true;    $whitelist['Server/hide_db'] = true;    $whitelist['Server/only_db'] = true;    foreach ($config_data as $path => $value) {        if (! isset($whitelist[$path]) || isset($blacklist[$path])) {            continue;        }        PMA_array_write($path, $cfg, $value);    }    return $cfg;}/** * Reads user preferences field names * * @param array|null $forms * * @return array */function PMA_read_userprefs_fieldnames(array $forms = null){    static $names;    // return cached results    if ($names !== null) {        return $names;    }    if (is_null($forms)) {        $forms = array();        include 'libraries/config/user_preferences.forms.php';    }    $names = array();    foreach ($forms as $formset) {        foreach ($formset as $form) {            foreach ($form as $k => $v) {                $names[] = is_int($k) ? $v : $k;            }        }    }    return $names;}/** * Updates one user preferences option (loads and saves to database). * * No validation is done! * * @param string $path          configuration * @param mixed  $value         value * @param mixed  $default_value default value * * @return void */function PMA_persist_option($path, $value, $default_value){    $prefs = PMA_load_userprefs();    if ($value === $default_value) {        if (isset($prefs['config_data'][$path])) {            unset($prefs['config_data'][$path]);        } else {            return;        }    } else {        $prefs['config_data'][$path] = $value;    }    PMA_save_userprefs($prefs['config_data']);}/** * Redirects after saving new user preferences * * @param array  $forms * @param array  $old_settings * @param string $file_name * @param array  $params * @param string $hash */function PMA_userprefs_redirect(array $forms, array $old_settings, $file_name, $params = null, $hash = null){    $reload_left_frame = isset($params['reload_left_frame']) && $params['reload_left_frame'];    if (!$reload_left_frame) {        // compute differences and check whether left frame should be refreshed        $old_settings = isset($old_settings['config_data'])                ? $old_settings['config_data']                : array();        $new_settings = ConfigFile::getInstance()->getConfigArray();        $diff_keys = array_keys(            array_diff_assoc($old_settings, $new_settings)            + array_diff_assoc($new_settings, $old_settings)        );        $check_keys = array('NaturalOrder', 'MainPageIconic', 'DefaultTabDatabase',            'Server/hide_db', 'Server/only_db');        $check_keys = array_merge(            $check_keys, $forms['Left_frame']['Left_frame'],            $forms['Left_frame']['Left_databases']        );        $diff = array_intersect($check_keys, $diff_keys);        $reload_left_frame = !empty($diff);    }    // redirect    $url_params = array(        'saved' => 1,        'reload_left_frame' => $reload_left_frame);    if (is_array($params)) {        $url_params = array_merge($params, $url_params);    }    if ($hash) {        $hash = '#' . urlencode($hash);    }    PMA_sendHeaderLocation(        $GLOBALS['cfg']['PmaAbsoluteUri'] . $file_name        . PMA_generate_common_url($url_params, '&') . $hash    );}/** * Shows form which allows to quickly load settings stored in browser's local storage * */function PMA_userprefs_autoload_header(){    if (isset($_REQUEST['prefs_autoload']) && $_REQUEST['prefs_autoload'] == 'hide') {        $_SESSION['userprefs_autoload'] = true;        exit;    }    $script_name = basename(basename($GLOBALS['PMA_PHP_SELF']));    $return_url = $script_name . '?' . http_build_query($_GET, '', '&');    ?>    <div id="prefs_autoload" class="notice" style="display:none">        <form action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>            <input type="hidden" name="json" value="" />            <input type="hidden" name="submit_import" value="1" />            <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />            <?php echo __('Your browser has phpMyAdmin configuration for this domain. Would you like to import it for current session?') ?>            <br />            <a href="#yes"><?php echo __('Yes') ?></a> / <a href="#no"><?php echo __('No') ?></a>        </form>    </div>    <?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';/** * Handles some variables that may have been sent by the calling script * Note: this can be called also from the db panel to get the privileges of *       a db, in which case we want to keep displaying the tabs of *       the Database panel */if (empty($viewing_mode)) {    $db = $table = '';}/** * Set parameters for links */$url_query = PMA_generate_common_url($db);/** * Defines the urls to return to in case of error in a sql statement */$err_url = 'main.php' . $url_query;/** * Displays the headers */require_once './libraries/header.inc.php';/** * @global boolean Checks for superuser privileges */$is_superuser = PMA_isSuperuser();// now, select the mysql dbif ($is_superuser && !PMA_DRIZZLE) {    PMA_DBI_select_db('mysql', $userlink);}/** * @global array binary log files */$binary_logs = PMA_DRIZZLE    ? null    : PMA_DBI_fetch_result('SHOW MASTER LOGS', 'Log_name', null, null, PMA_DBI_QUERY_STORE);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbxt extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBXT storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'pbxt_index_cache_size' => array(                'title' => __('Index cache size'),                'desc'  => __('This is the amount of memory allocated to the index cache. Default value is 32MB. The memory allocated here is used only for caching index pages.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_record_cache_size' => array(                'title' => __('Record cache size'),                'desc'  => __('This is the amount of memory allocated to the record cache used to cache table data. The default value is 32MB. This memory is used to cache changes to the handle data (.xtd) and row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_cache_size' => array(                'title' => __('Log cache size'),                'desc'  => __('The amount of memory allocated to the transaction log cache used to cache on transaction log data. The default is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_threshold' => array(                'title' => __('Log file threshold'),                'desc'  => __('The size of a transaction log before rollover, and a new log is created. The default value is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_transaction_buffer_size' => array(                'title' => __('Transaction buffer size'),                'desc'  => __('The size of the global transaction log buffer (the engine allocates 2 buffers of this size). The default is 1MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_checkpoint_frequency' => array(                'title' => __('Checkpoint frequency'),                'desc'  => __('The amount of data written to the transaction log before a checkpoint is performed. The default value is 24MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_log_threshold' => array(                'title' => __('Data log threshold'),                'desc'  => __('The maximum size of a data log file. The default value is 64MB. PBXT can create a maximum of 32000 data logs, which are used by all tables. So the value of this variable can be increased to increase the total amount of data that can be stored in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_garbage_threshold' => array(                'title' => __('Garbage threshold'),                'desc'  => __('The percentage of garbage in a data log file before it is compacted. This is a value between 1 and 99. The default is 50.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),            'pbxt_log_buffer_size' => array(                'title' => __('Log buffer size'),                'desc'  => __('The size of the buffer used when writing a data log. The default is 256MB. The engine allocates one buffer per thread, but only if the thread is required to write a data log.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_file_grow_size' => array(                'title' => __('Data file grow size'),                'desc'  => __('The grow size of the handle data (.xtd) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_row_file_grow_size' => array(                'title' => __('Row file grow size'),                'desc'  => __('The grow size of the row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_count' => array(                'title' => __('Log file count'),                'desc'  => __('This is the number of transaction log files (pbxt/system/xlog*.xt) the system will maintain. If the number of logs exceeds this value then old logs will be deleted, otherwise they are renamed and given the next highest number.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),        );    }    /**     * returns the pbxt engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE variables.     *     * @param   string   $formatted_size   the size expression (for example 8MB)     *     * @return string the formatted value and its unit     */    function resolveTypeSize($formatted_size)    {        if (preg_match('/^[0-9]+[a-zA-Z]+$/', $formatted_size)) {            $value = PMA_extractValueFromFormattedSize($formatted_size);        } else {            $value = $formatted_size;        }        return PMA_formatByteDown($value);    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBXT can be found on the %sPrimeBase XT Home Page%s.'), '<a href="' . PMA_linkURL('http://www.primebase.com/xt/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://pbxt.blogspot.com/') . '" target="_blank">' . __('The PrimeBase XT Blog by Paul McCullagh') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">' . __('The PrimeBase Media Streaming (PBMS) home page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-Native *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying language selection * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sorts available languages by their true english names * * @param array   the array to be sorted * @param mixed   a required parameter * @return  the sorted array * @access  private */function PMA_language_cmp(&$a, &$b){    return (strcmp($a[1], $b[1]));} // end of the 'PMA_language_cmp()' function/** * Displays for for language selection * * @access  public */function PMA_select_language($use_fieldset = false, $show_doc = true){    global $cfg, $lang;    ?><form method="post" action="index.php" target="_parent">    <?php    $_form_params = array(        'db' => $GLOBALS['db'],        'table' => $GLOBALS['table'],    );    echo PMA_generate_common_hidden_inputs($_form_params);    // For non-English, display "Language" with emphasis because it's    // not a proper word in the current language; we show it to help    // people recognize the dialog    $language_title = __('Language')        . (__('Language') != 'Language' ? ' - <em>Language</em>' : '');    if ($show_doc) {        $language_title .= PMA_showDocu('faq7_2');    }    if ($use_fieldset) {        echo '<fieldset><legend xml:lang="en" dir="ltr">' . $language_title . '</legend>';    } else {        echo '<bdo xml:lang="en" dir="ltr">' . $language_title . ':</bdo>';    }    ?>    <select name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    uasort($GLOBALS['available_languages'], 'PMA_language_cmp');    foreach ($GLOBALS['available_languages'] as $id => $tmplang) {        $lang_name = PMA_langName($tmplang);        //Is current one active?        if ($lang == $id) {            $selected = ' selected="selected"';        } else {            $selected = '';        }        echo '        ';        echo '<option value="' . $id . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select>    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    <noscript>    <?php    if ($use_fieldset) {        echo '<fieldset class="tblFooters">';    }    ?>        <input type="submit" value="Go" />    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    </noscript></form>    <?php} // End of function PMA_select_language?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/triggers.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_triggers.lib.php';/** * Do the magic */$_PMA_RTE = 'TRI';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Spreadsheet dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'mime_type' => 'application/vnd.oasis.opendocument.spreadsheet',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    $GLOBALS['ods_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        $GLOBALS['ods_buffer'] .= '</office:spreadsheet>'            . '</office:body>'            . '</office:document-content>';        if (!PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.spreadsheet', $GLOBALS['ods_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        $GLOBALS['ods_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:automatic-styles>'                . '<number:date-style style:name="N37" number:automatic-order="true">'                . '<number:month number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:day number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:year/>'              . '</number:date-style>'              . '<number:time-style style:name="N43">'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:seconds number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:time-style>'              . '<number:date-style style:name="N50" number:automatic-order="true" number:format-source="language">'                . '<number:month/>'                . '<number:text>/</number:text>'                . '<number:day/>'                . '<number:text>/</number:text>'                . '<number:year/>'                . '<number:text> </number:text>'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:date-style>'              . '<style:style style:name="DateCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>'              . '<style:style style:name="TimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N43"/>'              . '<style:style style:name="DateTimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N50"/>'            . '</office:automatic-styles>'            . '<office:body>'            . '<office:spreadsheet>';        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in ODS format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['ods_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '">';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "date") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d", strtotime($row[$j])) . '" table:style-name="DateCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "time") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="time" office:time-value="' . date("\P\TH\Hi\Ms\S", strtotime($row[$j])) . '" table:style-name="TimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "datetime") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d\TH:i:s", strtotime($row[$j])) . '" table:style-name="DateTimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['ods_buffer'] .= '</table:table>';        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table zoom search tab * * display table zoom search form, create SQL queries from form data * *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';require_once './libraries/relation.lib.php';require_once './libraries/tbl_info.inc.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_zoom_plot.js';$GLOBALS['js_include'][] = 'date.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';$GLOBALS['js_include'][] = 'canvg/canvg.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Handle AJAX request for data row on point select * @var post_params Object containing parameters for the POST request */if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {    $extra_data = array();    $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'        . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];    $result = PMA_DBI_query($row_info_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        // for bit fields we need to convert them to printable form        $i = 0;        foreach ($row as $col => $val) {            if ($fields_meta[$i]->type == 'bit') {                $row[$col] = PMA_printable_bit_value($val, $fields_meta[$i]->length);            }            $i++;        }        $extra_data['row_info'] = $row;    }    PMA_ajaxResponse(null, true, $extra_data);}$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));/** * Not selection yet required -> displays the selection form */// Gets some core librariesrequire_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (! isset($goto)) {    $goto = $GLOBALS['cfg']['DefaultTabTable'];}// Defines the url to return to in case of error in the next sql statement$err_url   = $goto . '?' . PMA_generate_common_url($db, $table);// Gets the list and number of fieldslist($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);$fields_cnt = count($fields_list);// retrieve keys into foreign fields, if any// check also foreigners even if relwork is FALSE (to get// foreign keys from innodb)$foreigners = PMA_getForeigners($db, $table);$flag = 1;$tbl_fields_type = $tbl_fields_collation = $tbl_fields_null = array();if (! isset($zoom_submit) && ! isset($inputs)) {    $dataLabel = PMA_getDisplayField($db, $table);}?><div id="sqlqueryresults"></div><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');/** *  Set the field name,type,collation and whether null on select of a coulmn */if (isset($inputs) && ($inputs[0] != 'pma_null' || $inputs[1] != 'pma_null')) {    $flag = 2;    for ($i = 0 ; $i < 4 ; $i++) {        if ($inputs[$i] != 'pma_null') {            $key = array_search($inputs[$i], $fields_list);            $tbl_fields_type[$i] = $fields_type[$key];            $tbl_fields_collation[$i] = $fields_collation[$key];            $tbl_fields_null[$i] = $fields_null[$key];        }    }}/* * Form for input criteria */?><form method="post" action="tbl_zoom_select.php" name="insertForm" id="zoom_search_form"    <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_zoom_select.php" /><input type="hidden" name="flag" id="id_flag" value="<?php echo $flag; ?>" /><fieldset id="inputSection"><legend><?php echo __('Do a "query by example" (wildcard: "%") for two different columns') ?></legend><table class="data"><?php echo PMA_tbl_setTableHeader();?><tbody><?php    $odd_row = true;for ($i = 0; $i < 4; $i++) {    if ($i == 2) {        echo "<tr><td>";        echo __("Additional search criteria");        echo "</td></tr>";    }    ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <th><select name="inputs[]" id="<?php echo 'tableid_' . $i; ?>" >        <option value="<?php echo 'pma_null'; ?>"><?php echo __('None');  ?></option>    <?php    for ($j = 0 ; $j < $fields_cnt ; $j++) {        if (isset($inputs[$i]) && $inputs[$i] == htmlspecialchars($fields_list[$j])) {?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        } else { ?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        }    } ?>        </select></th>        <td><?php if (isset($tbl_fields_type[$i])) echo $tbl_fields_type[$i]; ?></td>        <td><?php if (isset($tbl_fields_collation[$i])) echo $tbl_fields_collation[$i]; ?></td>        <td>    <?php    if (isset($inputs) && $inputs[$i] != 'pma_null') { ?>        <select name="zoomFunc[]">        <?php        if (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == htmlspecialchars($fc)) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } elseif (preg_match('@char|blob|text|set@i', $tbl_fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } // end if... else...        if ($tbl_fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        }        ?>        </select>        </td>        <td>        <?php        $field = $inputs[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        if (isset($fields)) {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $fields            );        } else {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], ''            );        }    } else { ?>        </td><td></td>        <?php    } ?>    </tr>    <tr><td>      <input type="hidden" name="types[<?php echo $i; ?>]" id="types_<?php echo $i; ?>"        value="<?php if(isset($tbl_fields_type[$i]))echo $tbl_fields_type[$i]; ?>" />      <input type="hidden" name="collations[<?php echo $i; ?>]"        value="<?php if(isset($tbl_fields_collation[$i]))echo $tbl_fields_collation[$i]; ?>" />    </td></tr>    <?php}//end for?>    </tbody>    </table><?php/* * Other inputs like data label and mode go after selection of column criteria *///Set default datalabel if not selectedif (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null') {    if ($dataLabel == '') {        $dataLabel = PMA_getDisplayField($db, $table);    }}?>    <table class="data">    <tr><td><label for="dataLabel"><?php echo __("Use this column to label each point"); ?></label></td>    <td><select name="dataLabel" id='dataLabel' >        <option value = ''> <?php echo __('None');  ?> </option><?phpfor ($j = 0; $j < $fields_cnt; $j++) {    if (isset($dataLabel) && $dataLabel == htmlspecialchars($fields_list[$j])) {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    } else {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" >            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    }}?>    </select>    </td></tr>    <tr><td><label for="maxRowPlotLimit"><?php echo __("Maximum rows to plot"); ?></label></td>    <td><?phpecho '<input type="text" name="maxPlotLimit" id="maxRowPlotLimit" value="';if (! empty($maxPlotLimit)) {    echo htmlspecialchars($maxPlotLimit);} else {    echo $GLOBALS['cfg']['maxRowPlotLimit'];}echo '" /></td></tr>';?>    </table></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="zoom_submit" id="inputFormSubmitId" value="<?php echo __('Go'); ?>" /></fieldset></form></fieldset><?php/* * Handle the input criteria and generate the query result * Form for displaying query results */if (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null' && $inputs[0] != $inputs[1]) {    /*     * Query generation part     */    $w = $data = array();    $sql_query = 'SELECT *';    //Add the table    $sql_query .= ' FROM ' . PMA_backquote($table);    for ($i = 0; $i < 4; $i++) {        if ($inputs[$i] == 'pma_null') {            continue;        }        $tmp = array();        // The where clause        $charsets = array();        $cnt_func = count($zoomFunc[$i]);        $func_type = $zoomFunc[$i];        list($charsets[$i]) = explode('_', $collations[$i]);        $unaryFlag = (isset($GLOBALS['cfg']['UnaryOperators'][$func_type])                      && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1)                      ? true                      : false;        $whereClause = PMA_tbl_search_getWhereClause(            $fields[$i], $inputs[$i], $types[$i],            $collations[$i], $func_type, $unaryFlag        );        if ($whereClause) {            $w[] = $whereClause;        }    } // end for    if ($w) {        $sql_query .= ' WHERE ' . implode(' AND ', $w);    }    $sql_query .= ' LIMIT ' . $maxPlotLimit;    /*     * Query execution part     */    $result = PMA_DBI_query($sql_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array        $tmpRow = array();        foreach ($row as $val) {            $tmpRow[] = $val;        }        //Get unique conditon on each row (will be needed for row update)        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);        //Append it to row array as where_clause        $row['where_clause'] = $uniqueCondition[0];        if ($dataLabel == $inputs[0] || $dataLabel == $inputs[1]) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                'where_clause' => $uniqueCondition[0]            );        } elseif ($dataLabel) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => $row[$dataLabel],                'where_clause' => $uniqueCondition[0]            );        } else {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => '',                'where_clause' => $uniqueCondition[0]            );        }    }    /*     * Form for displaying point data and also the scatter plot     */    ?>    <form method="post" action="tbl_zoom_select.php" name="displayResultForm" id="zoom_display_form"        <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="tbl_zoom_select.php" />    <fieldset id="displaySection">      <legend><?php echo __('Browse/Edit the points') ?></legend>      <center>    <?php    //JSON encode the data(query result)    if (isset($zoom_submit) && ! empty($data)) {        ?>        <div id='resizer' style="width:600px;height:400px">          <center><a href="#" onclick="displayHelp();"><?php echo __('How to use'); ?></a></center>          <div id="querydata" style="display:none">        <?php        echo json_encode($data);        ?>          </div>          <div id="querychart" style="float:right"></div>        </div>        <?php    }    ?>      </center>      <div id='dataDisplay' style="display:none">        <table>          <thead>            <tr>              <th> <?php echo __('Column'); ?> </th>              <th> <?php echo __('Null'); ?> </th>              <th> <?php echo __('Value'); ?> </th>            </tr>          </thead>          <tbody>    <?php    $odd_row = true;    for ($i = 4; $i < $fields_cnt + 4; $i++) {        $tbl_fields_type[$i] = $fields_type[$i - 4];        $fieldpopup = $fields_list[$i - 4];        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">              <th><?php echo htmlspecialchars($fields_list[$i - 4]); ?></th>              <th><?php echo ($fields_null[$i - 4] == 'YES')                  ? '<input type="checkbox" class="checkbox_null" name="fields_null[ '                      . $i . ' ]" id="fields_null_id_' . $i . '" />'                  : ''; ?>              </th>              <th> <?php              echo PMA_getForeignFields_Values(                  $foreigners, $foreignData, $fieldpopup, $tbl_fields_type,                  $i, $db, $table, $titles,                  $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', false, true              ); ?>              </th>            </tr>        <?php    }    ?>          </tbody>        </table>    </div>    <input type="hidden" id="queryID" name="sql_query" />    </form>    <?php}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * To define form field, use the notatnion below: * $forms['Form group']['Form name'] = array('Option/path'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin */$forms = array();$forms['Features']['General'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'LoginCookieValidity',    'ReplaceHelpImg',    'Servers/1/only_db', // saves to Server/only_db    'Servers/1/hide_db', // saves to Server/hide_db    'SkipLockedTables',    'DisableMultiTableMaintenance',    'MaxDbList',    'MaxTableList',    'ShowHint');$forms['Features']['Text_fields'] = array(    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');// settings from this form are treated specially, see prefs_forms.php and user_preferences.lib.php$forms['Features']['Developer'] = array(    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array(    'SQLQuery/Edit',    'SQLQuery/Explain',    'SQLQuery/ShowAsPHP',    'SQLQuery/Validate',    'SQLQuery/Refresh');$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'PropertiesIconic',    'ShowAll',    'MaxRows',    'Order',    'DisplayBinaryAsHex',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable');$forms['Import']['Import_defaults'] = array(    'Import/format',    'Import/charset',    'Import/allow_interrupt',    'Import/skip_queries');$forms['Import']['Sql'] = array(    'Import/sql_compatibility',    'Import/sql_no_auto_value_on_zero');$forms['Import']['Csv'] = array(    ':group:' . __('CSV'),        'Import/csv_replace',        'Import/csv_ignore',        'Import/csv_terminated',        'Import/csv_enclosed',        'Import/csv_escaped',        'Import/csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'Import/ldi_replace',        'Import/ldi_ignore',        'Import/ldi_terminated',        'Import/ldi_enclosed',        'Import/ldi_escaped',        'Import/ldi_local_option');$forms['Import']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Import/ods_col_names',        'Import/ods_empty_rows',        'Import/ods_recognize_percentages',        'Import/ods_recognize_currency');$forms['Export']['Export_defaults'] = array(    'Export/method',    ':group:' . __('Quick'),        'Export/quick_export_onserver',        'Export/quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'Export/format',        'Export/compression',        'Export/charset',        'Export/asfile' => ':group',            'Export/onserver',            'Export/onserver_overwrite',            ':group:end',        'Export/file_template_table',        'Export/file_template_database',        'Export/file_template_server');$forms['Export']['Sql'] = array(    'Export/sql_include_comments' => ':group',        'Export/sql_dates',        'Export/sql_relation',        'Export/sql_mime',        ':group:end',    'Export/sql_use_transaction',    'Export/sql_disable_fk',    'Export/sql_compatibility',    ':group:' . __('Database export options'),        'Export/sql_drop_database',        'Export/sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'Export/sql_drop_table',        'Export/sql_procedure_function',        'Export/sql_create_table_statements' => ':group',            'Export/sql_if_not_exists',            'Export/sql_auto_increment',            ':group:end',        'Export/sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'Export/sql_delayed',        'Export/sql_ignore',        'Export/sql_type',        'Export/sql_insert_syntax',        'Export/sql_max_query_size',        'Export/sql_hex_for_blob',        'Export/sql_utc_time');$forms['Export']['CodeGen'] = array(    'Export/codegen_format');$forms['Export']['Csv'] = array(    ':group:' . __('CSV'),        'Export/csv_separator',        'Export/csv_enclosed',        'Export/csv_escaped',        'Export/csv_terminated',        'Export/csv_null',        'Export/csv_removeCRLF',        'Export/csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'Export/excel_null',        'Export/excel_removeCRLF',        'Export/excel_columns',        'Export/excel_edition');$forms['Export']['Latex'] = array(    'Export/latex_caption',    'Export/latex_structure_or_data',    ':group:' . __('Structure'),        'Export/latex_structure_caption',        'Export/latex_structure_continued_caption',        'Export/latex_structure_label',        'Export/latex_relation',        'Export/latex_comments',        'Export/latex_mime',        ':group:end',    ':group:' . __('Data'),        'Export/latex_columns',        'Export/latex_data_caption',        'Export/latex_data_continued_caption',        'Export/latex_data_label',        'Export/latex_null');$forms['Export']['Microsoft_Office'] = array(    ':group:' . __('Microsoft Word 2000'),        'Export/htmlword_structure_or_data',        'Export/htmlword_null',        'Export/htmlword_columns');$forms['Export']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Export/ods_columns',        'Export/ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'Export/odt_structure_or_data',        ':group:' . __('Structure'),            'Export/odt_relation',            'Export/odt_comments',            'Export/odt_mime',            ':group:end',        ':group:' . __('Data'),            'Export/odt_columns',            'Export/odt_null');$forms['Export']['Texy'] = array(    'Export/texytext_structure_or_data',    ':group:' . __('Data'),        'Export/texytext_null',        'Export/texytext_columns');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * URL/hidden inputs generating. * * @package PhpMyAdmin *//** * Generates text with hidden inputs. * * @param string $db     optional database name *                       (can also be an array of parameters) * @param string $table  optional table name * @param int    $indent indenting level * @param string $skip   do not generate a hidden field for this parameter *                       (can be an array of strings) * * @see PMA_generate_common_url() * * @return  string   string with input fields * * @global  string   the current language * @global  string   the current conversion charset * @global  string   the current connection collation * @global  string   the current server * @global  array    the configuration array * @global  boolean  whether recoding is allowed or not * * @access  public */function PMA_generate_common_hidden_inputs($db = '', $table = '', $indent = 0, $skip = array()){    if (is_array($db)) {        $params  =& $db;        $_indent = empty($table) ? $indent : $table;        $_skip   = empty($indent) ? $skip : $indent;        $indent  =& $_indent;        $skip    =& $_skip;    } else {        $params = array();        if (strlen($db)) {            $params['db'] = $db;        }        if (strlen($table)) {            $params['table'] = $table;        }    }    if (! empty($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    $params['token'] = $_SESSION[' PMA_token '];    if (! is_array($skip)) {        if (isset($params[$skip])) {            unset($params[$skip]);        }    } else {        foreach ($skip as $skipping) {            if (isset($params[$skipping])) {                unset($params[$skipping]);            }        }    }    return PMA_getHiddenFields($params);}/** * create hidden form fields from array with name => value * * <code> * $values = array( *     'aaa' => aaa, *     'bbb' => array( *          'bbb_0', *          'bbb_1', *     ), *     'ccc' => array( *          'a' => 'ccc_a', *          'b' => 'ccc_b', *     ), * ); * echo PMA_getHiddenFields($values); * * // produces: * <input type="hidden" name="aaa" Value="aaa" /> * <input type="hidden" name="bbb[0]" Value="bbb_0" /> * <input type="hidden" name="bbb[1]" Value="bbb_1" /> * <input type="hidden" name="ccc[a]" Value="ccc_a" /> * <input type="hidden" name="ccc[b]" Value="ccc_b" /> * </code> * * @param array  $values hidden values * @param string $pre    prefix * * @return string form fields of type hidden */function PMA_getHiddenFields($values, $pre = ''){    $fields = '';    foreach ($values as $name => $value) {        if (! empty($pre)) {            $name = $pre. '[' . $name . ']';        }        if (is_array($value)) {            $fields .= PMA_getHiddenFields($value, $name);        } else {            // do not generate an ending "\n" because            // PMA_generate_common_hidden_inputs() is sometimes called            // from a JS document.write()            $fields .= '<input type="hidden" name="' . htmlspecialchars($name)                . '" value="' . htmlspecialchars($value) . '" />';        }    }    return $fields;}/** * Generates text with URL parameters. * * <code> * // OLD derepecated style * // note the ? * echo 'script.php?' . PMA_generate_common_url('mysql', 'rights'); * // produces with cookies enabled: * // script.php?db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights * * // NEW style * $params['myparam'] = 'myvalue'; * $params['db']      = 'mysql'; * $params['table']   = 'rights'; * // note the missing ? * echo 'script.php' . PMA_generate_common_url($params); * // produces with cookies enabled: * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights * * // note the missing ? * echo 'script.php' . PMA_generate_common_url(); * // produces with cookies enabled: * // script.php * // with cookies disabled: * // script.php?server=1&amp;lang=en * </code> * * @param mixed  assoc. array with url params or optional string with database name *               if first param is an array there is also an ? prefixed to the url * * @param string - if first param is array: 'html' to use htmlspecialchars() *               on the resulting URL (for a normal URL displayed in HTML) *               or something else to avoid using htmlspecialchars() (for *               a URL sent via a header); if not set,'html' is assumed *               - if first param is not array:  optional table name * * @param string - if first param is array: optional character to *               use instead of '?' *               - if first param is not array: optional character to use *               instead of '&amp;' for dividing URL parameters * * @return  string   string with URL parameters * @access  public */function PMA_generate_common_url(){    $args = func_get_args();    if (isset($args[0]) && is_array($args[0])) {        // new style        $params = $args[0];        if (isset($args[1])) {            $encode = $args[1];        } else {            $encode = 'html';        }        if (isset($args[2])) {            $questionmark = $args[2];        } else {            $questionmark = '?';        }    } else {        // old style        if (PMA_isValid($args[0])) {            $params['db'] = $args[0];        }        if (PMA_isValid($args[1])) {            $params['table'] = $args[1];        }        if (isset($args[2]) && $args[2] !== '&amp;') {            $encode = 'text';        } else {            $encode = 'html';        }        $questionmark = '';    }    $separator = PMA_get_arg_separator();    if (isset($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']        // avoid overwriting when creating navi panel links to servers        && ! isset($params['server'])    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    if (isset($_SESSION[' PMA_token '])) {        $params['token'] = $_SESSION[' PMA_token '];    }    if (empty($params)) {        return '';    }    $query = $questionmark . http_build_query($params, null, $separator);    if ($encode === 'html') {        $query = htmlspecialchars($query);    }    return $query;}/** * Returns url separator * * extracted from arg_separator.input as set in php.ini * we do not use arg_separator.output to avoid problems with &amp; and & * * @param string $encode whether to encode separator or not, * currently 'none' or 'html' * * @return  string  character used for separating url parts usally ; or & * @access  public */function PMA_get_arg_separator($encode = 'none'){    static $separator = null;    if (null === $separator) {        // use seperators defined by php, but prefer ';'        // as recommended by W3C        $php_arg_separator_input = ini_get('arg_separator.input');        if (strpos($php_arg_separator_input, ';') !== false) {            $separator = ';';        } elseif (strlen($php_arg_separator_input) > 0) {            $separator = $php_arg_separator_input{0};        } else {            $separator = '&';        }    }    switch ($encode) {    case 'html':        return htmlentities($separator);        break;    case 'text' :    case 'none' :    default :        return $separator;    }}?>
<?php/** * Column types and functions supported by MySQL * * @package PhpMyAdmin */// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INT',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'TINYINT',        'SMALLINT',        'MEDIUMINT',        'INT',        'BIGINT',        '-',        'DECIMAL',        'FLOAT',        'DOUBLE',        'REAL',        '-',        'BIT',        'BOOLEAN',        'SERIAL',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',        'YEAR',    ),    // Text    'STRING' => array(        'CHAR',        'VARCHAR',        '-',        'TINYTEXT',        'TEXT',        'MEDIUMTEXT',        'LONGTEXT',        '-',        'BINARY',        'VARBINARY',        '-',        'TINYBLOB',        'MEDIUMBLOB',        'BLOB',        'LONGBLOB',        '-',        'ENUM',        'SET',    ),    'SPATIAL' => array(        'GEOMETRY',        'POINT',        'LINESTRING',        'POLYGON',        'MULTIPOINT',        'MULTILINESTRING',        'MULTIPOLYGON',        'GEOMETRYCOLLECTION',    ),);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'BINARY',   'UNSIGNED',   'UNSIGNED ZEROFILL',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'TINYINT'   => 'FUNC_NUMBER',        'SMALLINT'  => 'FUNC_NUMBER',        'MEDIUMINT' => 'FUNC_NUMBER',        'INT'       => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'FLOAT'     => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'REAL'      => 'FUNC_NUMBER',        'BIT'       => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'YEAR'      => 'FUNC_DATE',        'CHAR'       => 'FUNC_CHAR',        'VARCHAR'    => 'FUNC_CHAR',        'TINYTEXT'   => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'MEDIUMTEXT' => 'FUNC_CHAR',        'LONGTEXT'   => 'FUNC_CHAR',        'BINARY'     => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'TINYBLOB'   => 'FUNC_CHAR',        'MEDIUMBLOB' => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'LONGBLOB'   => 'FUNC_CHAR',        'ENUM'       => '',        'SET'        => '',        'GEOMETRY'           => 'FUNC_SPATIAL',        'POINT'              => 'FUNC_SPATIAL',        'LINESTRING'         => 'FUNC_SPATIAL',        'POLYGON'            => 'FUNC_SPATIAL',        'MULTIPOINT'         => 'FUNC_SPATIAL',        'MULTILINESTRING'    => 'FUNC_SPATIAL',        'MULTIPOLYGON'       => 'FUNC_SPATIAL',        'GEOMETRYCOLLECTION' => 'FUNC_SPATIAL',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'DES_DECRYPT',            'DES_ENCRYPT',            'ENCRYPT',            'HEX',            'INET_NTOA',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'OLD_PASSWORD',            'PASSWORD',            'QUOTE',            'REVERSE',            'RTRIM',            'SHA1',            'SOUNDEX',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SEC_TO_TIME',            'SYSDATE',            'TIME',            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_LENGTH',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'INET_ATON',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TO_SECONDS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            'UUID_SHORT',            'WEEK',            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),        'FUNC_SPATIAL' => array(            'GeomFromText',            'GeomFromWKB',            'GeomCollFromText',            'LineFromText',            'MLineFromText',            'PointFromText',            'MPointFromText',            'PolyFromText',            'MPolyFromText',            'GeomCollFromWKB',            'LineFromWKB',            'MLineFromWKB',            'PointFromWKB',            'MPointFromWKB',            'PolyFromWKB',            'MPolyFromWKB',        ),    );    // $restrict_functions holds all known functions, remove these that are unavailable on current server    if (PMA_MYSQL_INT_VERSION < 50500) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('TO_SECONDS'));    }    if (PMA_MYSQL_INT_VERSION < 50120) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('UUID_SHORT'));    }    if (empty($cfg['RestrictFunctions'])) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            if ($cat != 'FUNC_SPATIAL') {                $cfg['Functions'] = array_merge($cfg['Functions'], $functions);            }        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * There are two possible notations: * $forms['Form group']['Form name'] = array('Servers' => array(1 => array('host'))); * can be written as * $forms['Form group']['Form name'] = array('Servers/1/host'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin-setup */$forms = array();$forms['_config.php'] = array(    'DefaultLang',    'ServerDefault');$forms['Servers']['Server'] = array('Servers' => array(1 => array(    'verbose',    'host',    'port',    'socket',    'ssl',    'connect_type',    'extension',    'compress',    'nopassword')));$forms['Servers']['Server_auth'] = array('Servers' => array(1 => array(    'auth_type',    ':group:' . __('Config authentication'),        'user',        'password',        ':group:end',    ':group:' . __('Cookie authentication'),        'auth_swekey_config' => './swekey.conf',        ':group:end',    ':group:' . __('HTTP authentication'),        'auth_http_realm',        ':group:end',    ':group:' . __('Signon authentication'),        'SignonSession',        'SignonURL',        'LogoutURL')));$forms['Servers']['Server_config'] = array('Servers' => array(1 => array(    'only_db',    'hide_db',    'AllowRoot',    'AllowNoPassword',    'DisableIS',    'AllowDeny/order',    'AllowDeny/rules',    'ShowDatabasesCommand',    'CountTables')));$forms['Servers']['Server_pmadb'] = array('Servers' => array(1 => array(    'pmadb' => 'phpmyadmin',    'controlhost',    'controluser',    'controlpass',    'verbose_check',    'bookmarktable' => 'pma_bookmark',    'relation' => 'pma_relation',    'userconfig' => 'pma_userconfig',    'table_info' => 'pma_table_info',    'column_info' => 'pma_column_info',    'history' => 'pma_history',    'recent' => 'pma_recent',    'table_uiprefs' => 'pma_table_uiprefs',    'tracking' => 'pma_tracking',    'table_coords' => 'pma_table_coords',    'pdf_pages' => 'pma_pdf_pages',    'designer_coords' => 'pma_designer_coords',    'MaxTableUiprefs' => 100)));$forms['Servers']['Server_tracking'] = array('Servers' => array(1 => array(    'tracking_version_auto_create',    'tracking_default_statements',    'tracking_add_drop_view',    'tracking_add_drop_table',    'tracking_add_drop_database',)));$forms['Features']['Import_export'] = array(    'UploadDir',    'SaveDir',    'RecodingEngine' => ':group',        'IconvExtraParams',        ':group:end',    'ZipDump',    'GZipDump',    'BZipDump',    'CompressOnFly');$forms['Features']['Security'] = array(    'blowfish_secret',    'ForceSSL',    'CheckConfigurationPermissions',    'TrustedProxies',    'AllowUserDropDatabase',    'AllowArbitraryServer',    'LoginCookieRecall',    'LoginCookieValidity',    'LoginCookieStore',    'LoginCookieDeleteAll');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');$forms['Features']['Developer'] = array(    'UserprefsDeveloperTab',    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Features']['Other_core_settings'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'ReplaceHelpImg',    'MaxDbList',    'MaxTableList',    'ShowHint',    'OBGzip',    'PersistentConnections',    'ExecTimeLimit',    'MemoryLimit',    'SkipLockedTables',    'DisableMultiTableMaintenance',    'UseDbSearch',    'AllowThirdPartyFraming');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryDB',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array('SQLQuery' => array(    'Edit',    'Explain',    'ShowAsPHP',    'Validate',    'Refresh'));$forms['Sql_queries']['Sql_validator'] = array('SQLValidator' => array(    'use',    'username',    'password'));$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_servers'] = array(    'LeftDisplayServers',    'DisplayServersList');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo',    'ShowPhpInfo',    'ShowChgPassword');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'ShowAll',    'MaxRows',    'Order',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'PropertiesIconic',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable',    'QueryWindowDefTab');$forms['Import']['Import_defaults'] = array('Import' => array(    'format',    'charset',    'allow_interrupt',    'skip_queries'));$forms['Import']['Sql'] = array('Import' => array(    'sql_compatibility',    'sql_no_auto_value_on_zero'));$forms['Import']['Csv'] = array('Import' => array(    ':group:' . __('CSV'),        'csv_replace',        'csv_ignore',        'csv_terminated',        'csv_enclosed',        'csv_escaped',        'csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'ldi_replace',        'ldi_ignore',        'ldi_terminated',        'ldi_enclosed',        'ldi_escaped',        'ldi_local_option',        ':group:end'));$forms['Import']['Open_Document'] = array('Import' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_col_names',        'ods_empty_rows',        'ods_recognize_percentages',        'ods_recognize_currency'));$forms['Export']['Export_defaults'] = array('Export' => array(    'method',    ':group:' . __('Quick'),        'quick_export_onserver',        'quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'format',        'compression',        'charset',        'asfile' => ':group',            'onserver',            'onserver_overwrite',            ':group:end',        'remember_file_template',        'file_template_table',        'file_template_database',        'file_template_server'));$forms['Export']['Sql'] = array('Export' => array(    'sql_include_comments' => ':group',        'sql_dates',        'sql_relation',        'sql_mime',        ':group:end',    'sql_use_transaction',    'sql_disable_fk',    'sql_compatibility',    ':group:' . __('Database export options'),        'sql_drop_database',        'sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'sql_drop_table',        'sql_procedure_function',        'sql_create_table_statements' => ':group',            'sql_if_not_exists',            'sql_auto_increment',            ':group:end',        'sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'sql_delayed',        'sql_ignore',        'sql_type',        'sql_insert_syntax',        'sql_max_query_size',        'sql_hex_for_blob',        'sql_utc_time'));$forms['Export']['CodeGen'] = array('Export' => array(    'codegen_format'));$forms['Export']['Csv'] = array('Export' => array(    ':group:' . __('CSV'),        'csv_separator',        'csv_enclosed',        'csv_escaped',        'csv_terminated',        'csv_null',        'csv_removeCRLF',        'csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'excel_null',        'excel_removeCRLF',        'excel_columns',        'excel_edition'));$forms['Export']['Latex'] = array('Export' => array(    'latex_caption',    'latex_structure_or_data',    ':group:' . __('Structure'),        'latex_structure_caption',        'latex_structure_continued_caption',        'latex_structure_label',        'latex_relation',        'latex_comments',        'latex_mime',        ':group:end',    ':group:' . __('Data'),        'latex_columns',        'latex_data_caption',        'latex_data_continued_caption',        'latex_data_label',        'latex_null'));$forms['Export']['Microsoft_Office'] = array('Export' => array(    ':group:' . __('Microsoft Word 2000'),        'htmlword_structure_or_data',        'htmlword_null',        'htmlword_columns'));$forms['Export']['Open_Document'] = array('Export' => array(    ':group:' . __('Open Document Spreadsheet'),        'ods_columns',        'ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'odt_structure_or_data',        ':group:' . __('Structure'),            'odt_relation',            'odt_comments',            'odt_mime',            ':group:end',        ':group:' . __('Data'),            'odt_columns',            'odt_null'));$forms['Export']['Texy'] = array('Export' => array(    'texytext_structure_or_data',    ':group:' . __('Data'),        'texytext_null',        'texytext_columns'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides download to a given field defined in parameters. * @package PhpMyAdmin *//** * Common functions. */require_once './libraries/common.inc.php';require_once './libraries/mime.lib.php';/* Check parameters */PMA_checkParameters(array('db', 'table', 'where_clause', 'transform_key'));/* Select database */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '', '');}/* Check if table exists */if (!PMA_DBI_get_columns($db, $table)) {    PMA_mysqlDie(__('Invalid table name'));}/* Grab data */$sql = 'SELECT ' . PMA_backquote($transform_key) . ' FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';$result = PMA_DBI_fetch_value($sql);/* Check return code */if ($result === false) {    PMA_mysqlDie(__('MySQL returned an empty result set (i.e. zero rows).'), $sql);}/* Avoid corrupting data */@ini_set('url_rewriter.tags', '');PMA_download_header(    $table . '-' .  $transform_key . '.bin',    PMA_detectMIME($result),    strlen($result)    );echo $result;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * "Echo" service to allow force downloading of exported charts (png or svg) * and server status monitor settings * * @package PhpMyAdmin */require_once './libraries/common.inc.php';/* For chart exporting */if (isset($_REQUEST['filename']) && isset($_REQUEST['image'])) {    $allowed = array(        'image/png'     => 'png',        'image/svg+xml' => 'svg',    );    /* Check whether MIME type is allowed */    if (! isset($allowed[$_REQUEST['type']])) {        die(__('Invalid export type'));    }    /*     * Check file name to match mime type and not contain new lines     * to prevent response splitting.     */    $extension = $allowed[$_REQUEST['type']];    $valid_match = '/^[^\n\r]*\.' . $extension . '$/';    if (! preg_match($valid_match, $_REQUEST['filename'])) {        if (! preg_match('/^[^\n\r]*$/', $_REQUEST['filename'])) {            /* Filename is unsafe, discard it */            $filename = 'download.' . $extension;        } else {            /* Add extension */            $filename = $_REQUEST['filename'] . '.' . $extension;        }    } else {        /* Filename from request should be safe here */        $filename = $_REQUEST['filename'];    }    /* Decode data */    if ($extension != 'svg') {        $data = substr($_REQUEST['image'], strpos($_REQUEST['image'], ',') + 1);        $data = base64_decode($data);    } else {        $data = $_REQUEST['image'];    }    /* Send download header */    PMA_download_header($filename, $_REQUEST['type'], strlen($data));    /* Send data */    echo $data;/* For monitor chart config export */} else if (isset($_REQUEST['monitorconfig'])) {    PMA_download_header('monitor.cfg', 'application/force-download');    echo urldecode($_REQUEST['monitorconfig']);/* For monitor chart config import */} else if (isset($_REQUEST['import'])) {    header('Content-type: text/plain');    if(!file_exists($_FILES['file']['tmp_name'])) exit();    echo file_get_contents($_FILES['file']['tmp_name']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * A simple rules engine, that parses and executes the rules in advisory_rules.txt. Adjusted to phpMyAdmin * * * @package PhpMyAdmin */class Advisor{    var $variables;    var $parseResult;    var $runResult;    function run()    {        // HowTo: A simple Advisory system in 3 easy steps.        // Step 1: Get some variables to evaluate on        $this->variables = array_merge(            PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1),            PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1)        );        if (PMA_DRIZZLE) {            $this->variables = array_merge(                $this->variables,                PMA_DBI_fetch_result(                    "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS", 0, 1                )            );        }        // Add total memory to variables as well        include_once 'libraries/sysinfo.lib.php';        $sysinfo = getSysInfo();        $memory  = $sysinfo->memory();        $this->variables['system_memory'] = $memory['MemTotal'];        // Step 2: Read and parse the list of rules        $this->parseResult = $this->parseRulesFile();        // Step 3: Feed the variables to the rules and let them fire. Sets $runResult        $this->runRules();        return array(            'parse' => array('errors' => $this->parseResult['errors']),            'run'   => $this->runResult        );    }    function runRules()    {        $this->runResult = array(            'fired' => array(),            'notfired' => array(),            'unchecked'=> array(),            'errors' => array()        );        foreach ($this->parseResult['rules'] as $rule) {            $this->variables['value'] = 0;            $precond = true;            if (isset($rule['precondition'])) {                try {                     $precond = $this->ruleExprEvaluate($rule['precondition']);                } catch (Exception $e) {                    $this->runResult['errors'][] = 'Failed evaluating precondition for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }            }            if (! $precond) {                $this->addRule('unchecked', $rule);            } else {                try {                    $value = $this->ruleExprEvaluate($rule['formula']);                } catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed calculating value for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }                $this->variables['value'] = $value;                try {                    if ($this->ruleExprEvaluate($rule['test'])) {                        $this->addRule('fired', $rule);                    } else {                        $this->addRule('notfired', $rule);                    }                }  catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed running test for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                }            }        }        return true;    }    /**     * Escapes percent string to be used in format string.     *     * @param string $str string to escape     *     * @return string     */    function escapePercent($str)    {        return preg_replace('/%( |,|\.|$|\(|\)|<|>)/', '%%\1', $str);    }    /**     * Wrapper function for translating.     *     * @param string $str     * @param mixed  $param     *     * @return string     */    function translate($str, $param = null)    {        if (is_null($param)) {            return sprintf(_gettext(Advisor::escapePercent($str)));        } else {            $printf = 'sprintf("' . _gettext(Advisor::escapePercent($str)) . '",';            return $this->ruleExprEvaluate(                $printf . $param . ')',                strlen($printf)            );        }    }    /**     * Splits justification to text and formula.     *     * @param string $rule     *     * @return array     */    function splitJustification($rule)    {        $jst = preg_split('/\s*\|\s*/', $rule['justification'], 2);        if (count($jst) > 1) {            return array($jst[0], $jst[1]);        }        return array($rule['justification']);    }    // Adds a rule to the result list    function addRule($type, $rule)    {        switch($type) {        case 'notfired':        case 'fired':            $jst = Advisor::splitJustification($rule);            if (count($jst) > 1) {                try {                    /* Translate */                    $str = $this->translate($jst[0], $jst[1]);                } catch (Exception $e) {                    $this->runResult['errors'][] = sprintf(                        __('Failed formatting string for rule \'%s\'. PHP threw following error: %s'),                        $rule['name'],                        $e->getMessage()                    );                    return;                }                $rule['justification'] = $str;            } else {                $rule['justification'] = $this->translate($rule['justification']);            }            $rule['name'] = $this->translate($rule['name']);            $rule['issue'] = $this->translate($rule['issue']);            // Replaces {server_variable} with 'server_variable'            // linking to server_variables.php            $rule['recommendation'] = preg_replace(                '/\{([a-z_0-9]+)\}/Ui',                '<a href="server_variables.php?' . PMA_generate_common_url() . '#filter=\1">\1</a>',                $this->translate($rule['recommendation'])            );            // Replaces external Links with PMA_linkURL() generated links            $rule['recommendation'] = preg_replace(                '#href=("|\')(https?://[^\1]+)\1#ie',                '\'href="\' . PMA_linkURL("\2") . \'"\'',                $rule['recommendation']            );            break;        }        $this->runResult[$type][] = $rule;    }    private function ruleExprEvaluate_var1($matches)    {        // '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Uie'        return '1'; //isset($this->runResult[\'fired\']    }    private function ruleExprEvaluate_var2($matches)    {        // '/\b(\w+)\b/e'        return isset($this->variables[$matches[1]])            ? (is_numeric($this->variables[$matches[1]])                ? $this->variables[$matches[1]]                : '"'.$this->variables[$matches[1]].'"')            : $matches[1];    }    // Runs a code expression, replacing variable names with their respective values    // ignoreUntil: if > 0, it doesn't replace any variables until that string    // position, but still evaluates the whole expr    function ruleExprEvaluate($expr, $ignoreUntil = 0)    {        if ($ignoreUntil > 0) {            $exprIgnore = substr($expr, 0, $ignoreUntil);            $expr = substr($expr, $ignoreUntil);        }        $expr = preg_replace_callback(            '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Ui',            array($this, 'ruleExprEvaluate_var1'),            $expr        );        $expr = preg_replace_callback(            '/\b(\w+)\b/',            array($this, 'ruleExprEvaluate_var2'),            $expr        );        if ($ignoreUntil > 0) {            $expr = $exprIgnore . $expr;        }        $value = 0;        $err = 0;        ob_start();        eval('$value = '.$expr.';');        $err = ob_get_contents();        ob_end_clean();        if ($err) {            throw new Exception(                strip_tags($err) . '<br />Executed code: $value = ' . $expr . ';'            );        }        return $value;    }    // Reads the rule file into an array, throwing errors messages on syntax errors    function parseRulesFile()    {        $file = file('libraries/advisory_rules.txt');        $errors = array();        $rules = array();        $ruleSyntax = array('name', 'formula', 'test', 'issue', 'recommendation', 'justification');        $numRules = count($ruleSyntax);        $numLines = count($file);        $j = -1;        $ruleLine = -1;        for ($i = 0; $i<$numLines; $i++) {            $line = $file[$i];            if ($line[0] == '#' || $line[0] == "\n") {                continue;            }            // Reading new rule            if (substr($line, 0, 4) == 'rule') {                if ($ruleLine > 0) {                    $errors[] = 'Invalid rule declaration on line ' . ($i+1)                        . ', expected line ' . $ruleSyntax[$ruleLine++]                        . ' of previous rule' ;                    continue;                }                if (preg_match("/rule\s'(.*)'( \[(.*)\])?$/", $line, $match)) {                    $ruleLine = 1;                    $j++;                    $rules[$j] = array( 'name' => $match[1]);                    if (isset($match[3])) {                        $rules[$j]['precondition'] = $match[3];                    }                } else {                    $errors[] = 'Invalid rule declaration on line '.($i+1);                }                continue;            } else {                if ($ruleLine == -1) {                    $errors[] = 'Unexpected characters on line '.($i+1);                }            }            // Reading rule lines            if ($ruleLine > 0) {                if (!isset($line[0])) {                    continue; // Empty lines are ok                }                // Non tabbed lines are not                if ($line[0] != "\t") {                    $errors[] = 'Unexpected character on line '.($i+1).'                        . Expected tab, but found \''.$line[0].'\'';                    continue;                }                $rules[$j][$ruleSyntax[$ruleLine++]] = chop(substr($line, 1));            }            // Rule complete            if ($ruleLine == $numRules) {                $ruleLine = -1;            }        }        return array('rules' => $rules, 'errors' => $errors);    }}function PMA_bytime($num, $precision){    $per = '';    if ($num >= 1) { // per second        $per = __('per second');    } elseif ($num*60 >= 1) { // per minute        $num = $num*60;        $per = __('per minute');    } elseif ($num*60*60 >=1 ) { // per hour        $num = $num*60*60;        $per = __('per hour');    } else {        $num = $num*60*60*24;        $per = __('per day');    }    $num = round($num, $precision);    if ($num == 0) {        $num = '<' . pow(10, -$precision);    }    return "$num $per";}?>
<?php/** * URL redirector to avoid leaking Referer with some sensitive information. *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';if (! PMA_isValid($_GET['url']) || ! preg_match('/^https?:\/\/[^\n\r]*$/', $_GET['url'])) {    header('Location: ' . $cfg['PmaAbsoluteUri']);} else {    header('Location: ' . $_GET['url']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file view and save screen * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';require_once './setup/lib/ConfigGenerator.class.php';$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);?><h2><?php echo __('Configuration file') ?></h2><?php display_form_top('config.php'); ?><input type="hidden" name="eol" value="<?php echo htmlspecialchars(PMA_ifSetOr($_GET['eol'], 'unix')) ?>" /><?php display_fieldset_top('', '', null, array('class' => 'simple')); ?><tr>    <td>        <textarea cols="50" rows="20" name="textconfig" id="textconfig" spellcheck="false"><?php            echo htmlspecialchars(ConfigGenerator::getConfigFile())        ?></textarea>    </td></tr><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" class="green" />        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?>
<?php/** * Handles the visualization of GIS GEOMETRYCOLLECTION objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Geometrycollection extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($sub_part);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $color, $scale_data, $image)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $image = $gis_obj->prepareRowAsPng($sub_part, $label, $color, $scale_data, $image);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $pdf = $gis_obj->prepareRowAsPdf($sub_part, $label, $color, $scale_data, $pdf);        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsSvg($sub_part, $label, $color, $scale_data);        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsOl($sub_part, $srid, $label, $color, $scale_data);        }        return $row;    }    /**     * Split the GEOMETRYCOLLECTION object and get its constituents.     *     * @param string $goem_col Geometry collection string     *     * @return the constituents of the geometry collection object     */    private function _explodeGeomCol($goem_col)    {        $sub_parts = array();        $br_count = 0;        $start = 0;        $count = 0;        foreach (str_split($goem_col) as $char) {            if ($char == '(') {                $br_count++;            } elseif ($char == ')') {                $br_count--;                if ($br_count == 0) {                    $sub_parts[] = substr($goem_col, $start, ($count + 1 - $start));                    $start = $count + 2;                }            }            $count++;        }        return $sub_parts;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $geom_count = (isset($gis_data['GEOMETRYCOLLECTION']['geom_count']))            ? $gis_data['GEOMETRYCOLLECTION']['geom_count'] : 1;        $wkt = 'GEOMETRYCOLLECTION(';        for ($i = 0; $i < $geom_count; $i++) {            if (isset($gis_data[$i]['gis_type'])) {                $type = $gis_data[$i]['gis_type'];                $gis_obj = PMA_GIS_Factory::factory($type);                if (! $gis_obj) {                    continue;                }                $wkt .= $gis_obj->generateWkt($gis_data, $i, $empty) . ',';            }        }        if (isset($gis_data[0]['gis_type'])) {            $wkt = substr($wkt, 0, strlen($wkt) - 1);        }        $wkt .= ')';        return $wkt;    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value)    {        $params = array();        $data = PMA_GIS_Geometry::generateParams($value);        $params['srid'] = $data['srid'];        $wkt = $data['wkt'];        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($wkt, 19, (strlen($wkt) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        $params['GEOMETRYCOLLECTION']['geom_count'] = count($sub_parts);        $i = 0;        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $params = array_merge($params, $gis_obj->generateParams($sub_part, $i));            $i++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for trigger management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_TRI_setGlobals(){    global $action_timings, $event_manipulations;    // Some definitions for triggers    $action_timings      = array('BEFORE',                                 'AFTER');    $event_manipulations = array('INSERT',                                 'UPDATE',                                 'DELETE');}/** * Main function for the triggers functionality */function PMA_TRI_main(){    global $db, $table;    PMA_TRI_setGlobals();    /**     * Process all requests     */    PMA_TRI_handleEditor();    PMA_TRI_handleExport();    /**     * Display a list of available triggers     */    $items = PMA_DBI_get_triggers($db, $table);    echo PMA_RTE_getList('trigger', $items);    /**     * Display a link for adding a new trigger,     * if the user has the necessary privileges     */    echo PMA_TRI_getFooterLinks();} // end PMA_TRI_main()/** * Handles editor requests for adding or editing an item */function PMA_TRI_handleEditor(){    global $_REQUEST, $_POST, $errors, $db, $table;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_TRI_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $trigger = PMA_TRI_getDataFromName($_REQUEST['item_original_name']);                $create_item = $trigger['create'];                $drop_item = $trigger['drop'] . ';';                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped trigger.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Trigger %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Trigger %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $items = PMA_DBI_get_triggers($db, $table, '');                $trigger = false;                foreach ($items as $value) {                    if ($value['name'] == $_REQUEST['item_name']) {                        $trigger = $value;                    }                }                $extra_data['insert'] = false;                if (empty($table) || ($trigger !== false && $table == $trigger['table'])) {                    $extra_data['insert'] = true;                    $extra_data['new_row'] = PMA_TRI_getRowForList($trigger);                    $extra_data['name'] = htmlspecialchars(                        strtoupper($_REQUEST['item_name'])                    );                }                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item']))) // FIXME: this must be simpler than that    ) {        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_TRI_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit trigger");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])            ) {                $item = PMA_TRI_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_TRI_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_TRI_getEditorForm($mode, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_TRI_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_table',                     'item_original_name',                     'item_action_timing',                     'item_event_manipulation',                     'item_definition',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    return $retval;} // end PMA_TRI_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit trigger" form given the name of a trigger. * * @param   string   $name   The name of the trigger. * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromName($name){    global $db, $table, $_REQUEST;    $temp = array();    $items = PMA_DBI_get_triggers($db, $table, '');    foreach ($items as $value) {        if ($value['name'] == $name) {            $temp = $value;        }    }    if (empty($temp)) {        return false;    } else {        $retval = array();        $retval['create']                  = $temp['create'];        $retval['drop']                    = $temp['drop'];        $retval['item_name']               = $temp['name'];        $retval['item_table']              = $temp['table'];        $retval['item_action_timing']      = $temp['action_timing'];        $retval['item_event_manipulation'] = $temp['event_manipulation'];        $retval['item_definition']         = $temp['definition'];        $retval['item_definer']            = $temp['definer'];        return $retval;    }} // end PMA_TRI_getDataFromName()/** * Displays a form used to add/edit a trigger * * @param   string   $mode         If the editor will be used edit a trigger *                                 or add a new one: 'edit' or 'add'. * @param   array    $item         Data for the trigger returned by *                                 PMA_TRI_getDataFromRequest() or *                                 PMA_TRI_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_TRI_getEditorForm($mode, $item){    global $db, $table, $event_manipulations, $action_timings;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_definition',                       'item_definer'                   );    foreach ($need_escape as $key => $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    $query  = "SELECT `TABLE_NAME` FROM `INFORMATION_SCHEMA`.`TABLES` ";    $query .= "WHERE `TABLE_SCHEMA`='" . PMA_sqlAddSlashes($db) . "' ";    $query .= "AND `TABLE_TYPE`='BASE TABLE'";    $tables = PMA_DBI_fetch_result($query);    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_triggers.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Trigger name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$item['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Table') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_table'>\n";    foreach ($tables as $key => $value) {        $selected = "";        if ($mode == 'add' && $value == $table) {            $selected = " selected='selected'";        } else if ($mode == 'edit' && $value == $item['item_table']) {            $selected = " selected='selected'";        }        $retval .= "            <option$selected>$value</option>\n";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . _pgettext('Trigger action time', 'Time') . "</td>\n";    $retval .= "    <td><select name='item_timing'>\n";    foreach ($action_timings as $key => $value) {        $selected = "";        if (! empty($item['item_action_timing'])            && $item['item_action_timing'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event') . "</td>\n";    $retval .= "    <td><select name='item_event'>\n";    foreach ($event_manipulations as $key => $value) {        $selected = "";        if (! empty($item['item_event_manipulation'])            && $item['item_event_manipulation'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    return $retval;} // end PMA_TRI_getEditorForm()/** * Composes the query necessary to create a trigger from an HTTP request. * * @return  string  The CREATE TRIGGER query. */function PMA_TRI_getQueryFromRequest(){    global $_REQUEST, $db, $errors, $action_timings, $event_manipulations;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'TRIGGER ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide a trigger name');    }    if (! empty($_REQUEST['item_timing']) && in_array($_REQUEST['item_timing'], $action_timings)) {        $query .= $_REQUEST['item_timing'] . ' ';    } else {        $errors[] = __('You must provide a valid timing for the trigger');    }    if (! empty($_REQUEST['item_event']) && in_array($_REQUEST['item_event'], $event_manipulations)) {        $query .= $_REQUEST['item_event'] . ' ';    } else {        $errors[] = __('You must provide a valid event for the trigger');    }    $query .= 'ON ';    if (! empty($_REQUEST['item_table']) && in_array($_REQUEST['item_table'], PMA_DBI_get_tables($db))) {        $query .= PMA_backQuote($_REQUEST['item_table']);    } else {        $errors[] = __('You must provide a valid table name');    }    $query .= ' FOR EACH ROW ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a trigger definition.');    }    return $query;} // end PMA_TRI_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * get some globals */require './libraries/common.inc.php';/* Theme Select */$path_to_themes = $cfg['ThemePath'] . '/';/* set language and charset */require './libraries/header_http.inc.php';/* HTML header */$page_title = 'phpMyAdmin - ' . __('Theme');require './libraries/header_meta_style.inc.php';require './libraries/header_scripts.inc.php';?></head><body id="bodythemes"><h1>phpMyAdmin - <?php echo __('Theme'); ?></h1><p><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/home_page/themes.php'); ?>#pma_<?php echo preg_replace('/([0-9]*)\.([0-9]*)\..*/', '\1_\2', PMA_VERSION); ?>"><?php echo __('Get more themes!'); ?></a></p><?php$_SESSION['PMA_Theme_Manager']->printPreviews();?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common config manipulation functions * * @package PhpMyAdmin *//** * Returns sanitized language string, taking into account our special codes * for formatting. Takes variable number of arguments. * Based on PMA_sanitize from sanitize.lib.php. * * @param  string  $lang_key  key in $GLOBALS WITHOUT 'strSetup' prefix * @param  mixed   $args,...  arguments for sprintf * @return string */function PMA_lang($lang_key, $args = null){    $message = isset($GLOBALS["strConfig$lang_key"]) ? $GLOBALS["strConfig$lang_key"] : $lang_key;    $message = PMA_sanitize($message);    if (func_num_args() == 1) {        return $message;    } else {        $args = func_get_args();        array_shift($args);        return vsprintf($message, $args);    }}/** * Returns translated field name/description or comment * * @param string $canonical_path * @param string $type  'name', 'desc' or 'cmt' * @param mixed  $default * @return string */function PMA_lang_name($canonical_path, $type = 'name', $default = 'key'){    $lang_key = str_replace(        array('Servers/1/', '/'),        array('Servers/', '_'),        $canonical_path) . '_' . $type;    return isset($GLOBALS["strConfig$lang_key"])        ? ($type == 'desc' ? PMA_lang($lang_key) : $GLOBALS["strConfig$lang_key"])        : ($default == 'key' ? $lang_key : $default);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';$_add_user_error = false;require './libraries/server_common.inc.php';if ($GLOBALS['cfg']['AjaxEnable']) {    $conditional_class = 'ajax';} else {    $conditional_class = '';}/** * Messages are built using the message name */$strPrivDescAllPrivileges = __('Includes all privileges except GRANT.');$strPrivDescAlter = __('Allows altering the structure of existing tables.');$strPrivDescAlterRoutine = __('Allows altering and dropping stored routines.');$strPrivDescCreateDb = __('Allows creating new databases and tables.');$strPrivDescCreateRoutine = __('Allows creating stored routines.');$strPrivDescCreateTbl = __('Allows creating new tables.');$strPrivDescCreateTmpTable = __('Allows creating temporary tables.');$strPrivDescCreateUser = __('Allows creating, dropping and renaming user accounts.');$strPrivDescCreateView = __('Allows creating new views.');$strPrivDescDelete = __('Allows deleting data.');$strPrivDescDropDb = __('Allows dropping databases and tables.');$strPrivDescDropTbl = __('Allows dropping tables.');$strPrivDescEvent = __('Allows to set up events for the event scheduler');$strPrivDescExecute = __('Allows executing stored routines.');$strPrivDescFile = __('Allows importing data from and exporting data into files.');$strPrivDescGrant = __('Allows adding users and privileges without reloading the privilege tables.');$strPrivDescIndex = __('Allows creating and dropping indexes.');$strPrivDescInsert = __('Allows inserting and replacing data.');$strPrivDescLockTables = __('Allows locking tables for the current thread.');$strPrivDescMaxConnections = __('Limits the number of new connections the user may open per hour.');$strPrivDescMaxQuestions = __('Limits the number of queries the user may send to the server per hour.');$strPrivDescMaxUpdates = __('Limits the number of commands that change any table or database the user may execute per hour.');$strPrivDescMaxUserConnections = __('Limits the number of simultaneous connections the user may have.');$strPrivDescProcess = __('Allows viewing processes of all users');$strPrivDescReferences = __('Has no effect in this MySQL version.');$strPrivDescReload = __('Allows reloading server settings and flushing the server\'s caches.');$strPrivDescReplClient = __('Allows the user to ask where the slaves / masters are.');$strPrivDescReplSlave = __('Needed for the replication slaves.');$strPrivDescSelect = __('Allows reading data.');$strPrivDescShowDb = __('Gives access to the complete list of databases.');$strPrivDescShowView = __('Allows performing SHOW CREATE VIEW queries.');$strPrivDescShutdown = __('Allows shutting down the server.');$strPrivDescSuper = __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.');$strPrivDescTrigger = __('Allows creating and dropping triggers');$strPrivDescUpdate = __('Allows changing data.');$strPrivDescUsage = __('No privileges.');/** * Checks if a dropdown box has been used for selecting a database / table */if (PMA_isValid($_REQUEST['pred_tablename'])) {    $tablename = $_REQUEST['pred_tablename'];    unset($pred_tablename);} elseif (PMA_isValid($_REQUEST['tablename'])) {    $tablename = $_REQUEST['tablename'];} else {    unset($tablename);}if (PMA_isValid($_REQUEST['pred_dbname'])) {    $dbname = $_REQUEST['pred_dbname'];    unset($pred_dbname);} elseif (PMA_isValid($_REQUEST['dbname'])) {    $dbname = $_REQUEST['dbname'];} else {    unset($dbname);    unset($tablename);}if (isset($dbname)) {    $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';    if (isset($tablename)) {        $db_and_table .= PMA_backquote($tablename);    } else {        $db_and_table .= '*';    }} else {    $db_and_table = '*.*';}// check if given $dbname is a wildcard or notif (isset($dbname)) {    //if (preg_match('/\\\\(?:_|%)/i', $dbname)) {    if (preg_match('/(?<!\\\\)(?:_|%)/i', $dbname)) {        $dbname_is_wildcard = true;    } else {        $dbname_is_wildcard = false;    }}/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"       . PMA_getIcon('b_usrlist.png')       . __('Privileges') . "\n"       . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}$random_n = mt_rand(0, 1000000); // a random number that will be appended to the id of the user forms/** * Escapes wildcard in a database+table specification * before using it in a GRANT statement. * * Escaping a wildcard character in a GRANT is only accepted at the global * or database level, not at table level; this is why I remove * the escaping character. Internally, in mysql.tables_priv.Db there are * no escaping (for example test_db) but in mysql.db you'll see test\_db * for a db-specific privilege. * * @param string $dbname    Database name * @param string $tablename Table name * * @return string the escaped (if necessary) database.table */function PMA_wildcardEscapeForGrant($dbname, $tablename){    if (! strlen($dbname)) {        $db_and_table = '*.*';    } else {        if (strlen($tablename)) {            $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';            $db_and_table .= PMA_backquote($tablename);        } else {            $db_and_table = PMA_backquote($dbname) . '.';            $db_and_table .= '*';        }    }    return $db_and_table;}/** * Generates a condition on the user name * * @param string $initial the user's initial * * @return  string   the generated condition */function PMA_rangeOfUsers($initial = ''){    // strtolower() is used because the User field    // might be BINARY, so LIKE would be case sensitive    if (! empty($initial)) {        $ret = " WHERE `User` LIKE '" . PMA_sqlAddSlashes($initial, true) . "%'"            . " OR `User` LIKE '" . PMA_sqlAddSlashes(strtolower($initial), true) . "%'";    } else {        $ret = '';    }    return $ret;} // end function/** * Extracts the privilege information of a priv table row * * @param array   $row        the row * @param boolean $enableHTML add <dfn> tag with tooltips * * @global  resource $user_link the database connection * * @return  array */function PMA_extractPrivInfo($row = '', $enableHTML = false){    $grants = array(        array(            'Select_priv',            'SELECT',            __('Allows reading data.')),        array(            'Insert_priv',            'INSERT',            __('Allows inserting and replacing data.')),        array(            'Update_priv',            'UPDATE',            __('Allows changing data.')),        array(            'Delete_priv',            'DELETE',            __('Allows deleting data.')),        array(            'Create_priv',            'CREATE',            __('Allows creating new databases and tables.')),        array(            'Drop_priv',            'DROP',            __('Allows dropping databases and tables.')),        array(            'Reload_priv',            'RELOAD',            __('Allows reloading server settings and flushing the server\'s caches.')),        array(            'Shutdown_priv',            'SHUTDOWN',            __('Allows shutting down the server.')),        array(            'Process_priv',            'PROCESS',            __('Allows viewing processes of all users')),        array(            'File_priv',            'FILE',            __('Allows importing data from and exporting data into files.')),        array(            'References_priv',            'REFERENCES',            __('Has no effect in this MySQL version.')),        array(            'Index_priv',            'INDEX',            __('Allows creating and dropping indexes.')),        array(            'Alter_priv',            'ALTER',            __('Allows altering the structure of existing tables.')),        array(            'Show_db_priv',            'SHOW DATABASES',            __('Gives access to the complete list of databases.')),        array(            'Super_priv',            'SUPER',            __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.')),        array(            'Create_tmp_table_priv',            'CREATE TEMPORARY TABLES',            __('Allows creating temporary tables.')),        array(            'Lock_tables_priv',            'LOCK TABLES',            __('Allows locking tables for the current thread.')),        array(            'Repl_slave_priv',            'REPLICATION SLAVE',            __('Needed for the replication slaves.')),        array(            'Repl_client_priv',            'REPLICATION CLIENT',            __('Allows the user to ask where the slaves / masters are.')),        array(            'Create_view_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Event_priv',            'EVENT',            __('Allows to set up events for the event scheduler')),        array(            'Trigger_priv',            'TRIGGER',            __('Allows creating and dropping triggers')),        // for table privs:        array(            'Create View_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Show_view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        // for table privs:        array(            'Show view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        array(            'Create_routine_priv',            'CREATE ROUTINE',            __('Allows creating stored routines.')),        array(            'Alter_routine_priv',            'ALTER ROUTINE',            __('Allows altering and dropping stored routines.')),        array(            'Create_user_priv',            'CREATE USER',            __('Allows creating, dropping and renaming user accounts.')),        array(            'Execute_priv',            'EXECUTE',            __('Allows executing stored routines.')),    );    if (! empty($row) && isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        $av_grants = explode('\',\'', substr($row1['Type'], 5, strlen($row1['Type']) - 7));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($current_grant);        unset($av_grants);        unset($users_grants);    }    $privs = array();    $allPrivileges = true;    foreach ($grants as $current_grant) {        if ((! empty($row) && isset($row[$current_grant[0]]))            || (empty($row) && isset($GLOBALS[$current_grant[0]]))        ) {            if ((! empty($row) && $row[$current_grant[0]] == 'Y')                || (empty($row)                && ($GLOBALS[$current_grant[0]] == 'Y'                || (is_array($GLOBALS[$current_grant[0]])                && count($GLOBALS[$current_grant[0]]) == $GLOBALS['column_count']                && empty($GLOBALS[$current_grant[0] . '_none']))))            ) {                if ($enableHTML) {                    $privs[] = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $privs[] = $current_grant[1];                }            } elseif (! empty($GLOBALS[$current_grant[0]])             && is_array($GLOBALS[$current_grant[0]])             && empty($GLOBALS[$current_grant[0] . '_none'])) {                if ($enableHTML) {                    $priv_string = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $priv_string = $current_grant[1];                }                $privs[] = $priv_string . ' (`' . join('`, `', $GLOBALS[$current_grant[0]]) . '`)';            } else {                $allPrivileges = false;            }        }    }    if (empty($privs)) {        if ($enableHTML) {            $privs[] = '<dfn title="' . __('No privileges.') . '">USAGE</dfn>';        } else {            $privs[] = 'USAGE';        }    } elseif ($allPrivileges && (! isset($GLOBALS['grant_count']) || count($privs) == $GLOBALS['grant_count'])) {        if ($enableHTML) {            $privs = array('<dfn title="' . __('Includes all privileges except GRANT.') . '">ALL PRIVILEGES</dfn>');        } else {            $privs = array('ALL PRIVILEGES');        }    }    return $privs;} // end of the 'PMA_extractPrivInfo()' function/** * Displays on which column(s) a table-specific privilege is granted */function PMA_display_column_privs($columns, $row, $name_for_select,    $priv_for_header, $name, $name_for_dfn, $name_for_current){    echo '    <div class="item" id="div_item_' . $name . '">' . "\n"       . '        <label for="select_' . $name . '_priv">' . "\n"       . '            <tt><dfn title="' . $name_for_dfn . '">'        . $priv_for_header . '</dfn></tt>' . "\n"       . '        </label><br />' . "\n"       . '        <select id="select_' . $name . '_priv" name="'        . $name_for_select . '[]" multiple="multiple" size="8">' . "\n";    foreach ($columns as $current_column => $current_column_privileges) {        echo '            <option value="' . htmlspecialchars($current_column) . '"';        if ($row[$name_for_select] == 'Y' || $current_column_privileges[$name_for_current]) {            echo ' selected="selected"';        }        echo '>' . htmlspecialchars($current_column) . '</option>' . "\n";    }    echo '        </select>' . "\n"       . '        <i>' . __('Or') . '</i>' . "\n"       . '        <label for="checkbox_' . $name_for_select        . '_none"><input type="checkbox"'        . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')        . ' name="' . $name_for_select . '_none" id="checkbox_'        . $name_for_select . '_none" title="' . _pgettext('None privileges', 'None') . '" />'        . _pgettext('None privileges', 'None') . '</label>' . "\n"       . '    </div>' . "\n";} // end function/** * Displays the privileges form table * * @param string  $db     the database * @param string  $table  the table * @param boolean $submit wheather to display the submit button or not * * @global  array      $cfg         the phpMyAdmin configuration * @global  ressource  $user_link   the database connection * * @return  void */function PMA_displayPrivTable($db = '*', $table = '*', $submit = true){    global $random_n;    if ($db == '*') {        $table = '*';    }    if (isset($GLOBALS['username'])) {        $username = $GLOBALS['username'];        $hostname = $GLOBALS['hostname'];        if ($db == '*') {            $sql_query = "SELECT * FROM `mysql`.`user`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        } elseif ($table == '*') {            $sql_query = "SELECT * FROM `mysql`.`db`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND '" . PMA_unescape_mysql_wildcards($db) . "'"                ." LIKE `Db`;";        } else {            $sql_query = "SELECT `Table_priv`"                ." FROM `mysql`.`tables_priv`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND `Db` = '" . PMA_unescape_mysql_wildcards($db) . "'"                ." AND `Table_name` = '" . PMA_sqlAddSlashes($table) . "';";        }        $row = PMA_DBI_fetch_single_row($sql_query);    }    if (empty($row)) {        if ($table == '*') {            if ($db == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`user`;';            } elseif ($table == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`db`;';            }            $res = PMA_DBI_query($sql_query);            while ($row1 = PMA_DBI_fetch_row($res)) {                if (substr($row1[0], 0, 4) == 'max_') {                    $row[$row1[0]] = 0;                } else {                    $row[$row1[0]] = 'N';                }            }            PMA_DBI_free_result($res);        } else {            $row = array('Table_priv' => '');        }    }    if (isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        // note: in MySQL 5.0.3 we get "Create View', 'Show view';        // the View for Create is spelled with uppercase V        // the view for Show is spelled with lowercase v        // and there is a space between the words        $av_grants = explode('\',\'', substr($row1['Type'], strpos($row1['Type'], '(') + 2, strpos($row1['Type'], ')') - strpos($row1['Type'], '(') - 3));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($row['Table_priv'], $current_grant, $av_grants, $users_grants);        // get collumns        $res = PMA_DBI_try_query('SHOW COLUMNS FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($db)) . '.' . PMA_backquote($table) . ';');        $columns = array();        if ($res) {            while ($row1 = PMA_DBI_fetch_row($res)) {                $columns[$row1[0]] = array(                    'Select' => false,                    'Insert' => false,                    'Update' => false,                    'References' => false                );            }            PMA_DBI_free_result($res);        }        unset($res, $row1);    }    // t a b l e - s p e c i f i c    p r i v i l e g e s    if (! empty($columns)) {        $res = PMA_DBI_query(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($hostname) . "'"            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes(PMA_unescape_mysql_wildcards($db)) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($table) . '\';'        );        while ($row1 = PMA_DBI_fetch_row($res)) {            $row1[1] = explode(',', $row1[1]);            foreach ($row1[1] as $current) {                $columns[$row1[0]][$current] = true;            }        }        PMA_DBI_free_result($res);        unset($res, $row1, $current);        echo '<input type="hidden" name="grant_count" value="' . count($row) . '" />' . "\n"           . '<input type="hidden" name="column_count" value="' . count($columns) . '" />' . "\n"           . '<fieldset id="fieldset_user_priv">' . "\n"           . '    <legend>' . __('Table-specific privileges')           . PMA_showHint(__('Note: MySQL privilege names are expressed in English'))           . '</legend>' . "\n";        // privs that are attached to a specific column        PMA_display_column_privs(            $columns, $row, 'Select_priv', 'SELECT',            'select', __('Allows reading data.'), 'Select'        );        PMA_display_column_privs(            $columns, $row, 'Insert_priv', 'INSERT',            'insert', __('Allows inserting and replacing data.'), 'Insert'        );        PMA_display_column_privs(            $columns, $row, 'Update_priv', 'UPDATE',            'update', __('Allows changing data.'), 'Update'        );        PMA_display_column_privs(            $columns, $row, 'References_priv', 'REFERENCES', 'references',            __('Has no effect in this MySQL version.'), 'References'        );        // privs that are not attached to a specific column        echo '    <div class="item">' . "\n";        foreach ($row as $current_grant => $current_grant_value) {            if (in_array(substr($current_grant, 0, (strlen($current_grant) - 5)),                    array('Select', 'Insert', 'Update', 'References'))) {                continue;            }            // make a substitution to match the messages variables;            // also we must substitute the grant we get, because we can't generate            // a form variable containing blanks (those would get changed to            // an underscore when receiving the POST)            if ($current_grant == 'Create View_priv') {                $tmp_current_grant = 'CreateView_priv';                $current_grant = 'Create_view_priv';            } elseif ($current_grant == 'Show view_priv') {                $tmp_current_grant = 'ShowView_priv';                $current_grant = 'Show_view_priv';            } else {                $tmp_current_grant = $current_grant;            }            echo '        <div class="item">' . "\n"               . '            <input type="checkbox"'               . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')               . ' name="' . $current_grant . '" id="checkbox_' . $current_grant               . '" value="Y" '               . ($current_grant_value == 'Y' ? 'checked="checked" ' : '')               . 'title="';            echo (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl']) . '"/>' . "\n";            echo '            <label for="checkbox_' . $current_grant                . '"><tt><dfn title="'                . (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                    ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                    : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl'])               . '">' . strtoupper(substr($current_grant, 0, strlen($current_grant) - 5)) . '</dfn></tt></label>' . "\n"               . '        </div>' . "\n";        } // end foreach ()        echo '    </div>' . "\n";        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    } else {        // g l o b a l    o r    d b - s p e c i f i c        //        $privTable_names = array(0 => __('Data'), 1 => __('Structure'), 2 => __('Administration'));        // d a t a        $privTable[0] = array(            array('Select', 'SELECT', __('Allows reading data.')),            array('Insert', 'INSERT', __('Allows inserting and replacing data.')),            array('Update', 'UPDATE', __('Allows changing data.')),            array('Delete', 'DELETE', __('Allows deleting data.'))        );        if ($db == '*') {            $privTable[0][] = array('File', 'FILE', __('Allows importing data from and exporting data into files.'));        }        // s t r u c t u r e        $privTable[1] = array(            array('Create', 'CREATE', ($table == '*' ? __('Allows creating new databases and tables.') : __('Allows creating new tables.'))),            array('Alter', 'ALTER', __('Allows altering the structure of existing tables.')),            array('Index', 'INDEX', __('Allows creating and dropping indexes.')),            array('Drop', 'DROP', ($table == '*' ? __('Allows dropping databases and tables.') : __('Allows dropping tables.'))),            array('Create_tmp_table', 'CREATE TEMPORARY TABLES', __('Allows creating temporary tables.')),            array('Show_view', 'SHOW VIEW', __('Allows performing SHOW CREATE VIEW queries.')),            array('Create_routine', 'CREATE ROUTINE', __('Allows creating stored routines.')),            array('Alter_routine', 'ALTER ROUTINE', __('Allows altering and dropping stored routines.')),            array('Execute', 'EXECUTE', __('Allows executing stored routines.')),        );        // this one is for a db-specific priv: Create_view_priv        if (isset($row['Create_view_priv'])) {            $privTable[1][] = array('Create_view', 'CREATE VIEW', __('Allows creating new views.'));        }        // this one is for a table-specific priv: Create View_priv        if (isset($row['Create View_priv'])) {            $privTable[1][] = array('Create View', 'CREATE VIEW', __('Allows creating new views.'));        }        if (isset($row['Event_priv'])) {            // MySQL 5.1.6            $privTable[1][] = array('Event', 'EVENT', __('Allows to set up events for the event scheduler'));            $privTable[1][] = array('Trigger', 'TRIGGER', __('Allows creating and dropping triggers'));        }        // a d m i n i s t r a t i o n        $privTable[2] = array(            array('Grant', 'GRANT', __('Allows adding users and privileges without reloading the privilege tables.')),        );        if ($db == '*') {            $privTable[2][] = array('Super', 'SUPER', __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.'));            $privTable[2][] = array('Process', 'PROCESS', __('Allows viewing processes of all users'));            $privTable[2][] = array('Reload', 'RELOAD', __('Allows reloading server settings and flushing the server\'s caches.'));            $privTable[2][] = array('Shutdown', 'SHUTDOWN', __('Allows shutting down the server.'));            $privTable[2][] = array('Show_db', 'SHOW DATABASES', __('Gives access to the complete list of databases.'));        }        $privTable[2][] = array('Lock_tables', 'LOCK TABLES', __('Allows locking tables for the current thread.'));        $privTable[2][] = array('References', 'REFERENCES', __('Has no effect in this MySQL version.'));        if ($db == '*') {            $privTable[2][] = array('Repl_client', 'REPLICATION CLIENT', __('Allows the user to ask where the slaves / masters are.'));            $privTable[2][] = array('Repl_slave', 'REPLICATION SLAVE', __('Needed for the replication slaves.'));            $privTable[2][] = array('Create_user', 'CREATE USER', __('Allows creating, dropping and renaming user accounts.'));        }        echo '<input type="hidden" name="grant_count" value="'            . (count($privTable[0]) + count($privTable[1]) + count($privTable[2]) - (isset($row['Grant_priv']) ? 1 : 0))            . '" />' . "\n"           . '<fieldset id="fieldset_user_global_rights">' . "\n"           . '    <legend>' . "\n"           . '        '            . ($db == '*'                ? __('Global privileges')                : ($table == '*'                    ? __('Database-specific privileges')                    : __('Table-specific privileges'))) . "\n"           . '        (<a href="server_privileges.php?'            . $GLOBALS['url_query'] . '&amp;checkall=1" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', true); return false;">'            . __('Check All') . '</a> /' . "\n"           . '        <a href="server_privileges.php?'            . $GLOBALS['url_query'] . '" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', false); return false;">'            . __('Uncheck All') . '</a>)' . "\n"           . '    </legend>' . "\n"           . '    <p><small><i>' . __('Note: MySQL privilege names are expressed in English') . '</i></small></p>' . "\n";        // Output the Global privilege tables with checkboxes        foreach ($privTable as $i => $table) {            echo '    <fieldset>' . "\n"                . '        <legend>' . __($privTable_names[$i]) . '</legend>' . "\n";            foreach ($table as $priv) {                echo '        <div class="item">' . "\n"                    . '            <input type="checkbox"'                    .                   ' name="' . $priv[0] . '_priv" id="checkbox_' . $priv[0] . '_priv"'                    .                   ' value="Y" title="' . $priv[2] . '"'                    .                   ((! empty($GLOBALS['checkall']) || $row[$priv[0] . '_priv'] == 'Y') ?  ' checked="checked"' : '')                    .               '/>' . "\n"                    . '            <label for="checkbox_' . $priv[0] . '_priv"><tt><dfn title="' . $priv[2] . '">'                    .                    $priv[1] . '</dfn></tt></label>' . "\n"                    . '        </div>' . "\n";            }            echo '    </fieldset>' . "\n";        }        // The "Resource limits" box is not displayed for db-specific privs        if ($db == '*') {            echo '    <fieldset>' . "\n"               . '        <legend>' . __('Resource limits') . '</legend>' . "\n"               . '        <p><small><i>' . __('Note: Setting these options to 0 (zero) removes the limit.') . '</i></small></p>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_questions"><tt><dfn title="'                . __('Limits the number of queries the user may send to the server per hour.') . '">MAX QUERIES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_questions" id="text_max_questions" value="'                . $row['max_questions'] . '" size="11" maxlength="11" title="' . __('Limits the number of queries the user may send to the server per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_updates"><tt><dfn title="'                . __('Limits the number of commands that change any table or database the user may execute per hour.') . '">MAX UPDATES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_updates" id="text_max_updates" value="'                . $row['max_updates'] . '" size="11" maxlength="11" title="' . __('Limits the number of commands that change any table or database the user may execute per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_connections"><tt><dfn title="'                . __('Limits the number of new connections the user may open per hour.') . '">MAX CONNECTIONS PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_connections" id="text_max_connections" value="'                . $row['max_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of new connections the user may open per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_user_connections"><tt><dfn title="'                . __('Limits the number of simultaneous connections the user may have.') . '">MAX USER_CONNECTIONS</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_user_connections" id="text_max_user_connections" value="'                . $row['max_user_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of simultaneous connections the user may have.') . '" />' . "\n"               . '        </div>' . "\n"               . '    </fieldset>' . "\n";        }        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    }    echo '</fieldset>' . "\n";    if ($submit) {        echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">' . "\n"           . '    <input type="submit" name="update_privs" value="' . __('Go') . '" />' . "\n"           . '</fieldset>' . "\n";    }} // end of the 'PMA_displayPrivTable()' function/** * Displays the fields used by the "new user" form as well as the * "change login information / copy user" form. * * @param string $mode are we creating a new user or are we just *                     changing  one? (allowed values: 'new', 'change') * * @global  array      $cfg     the phpMyAdmin configuration * @global  ressource  $user_link the database connection * * @return  void */function PMA_displayLoginInformationFields($mode = 'new'){    // Get user/host name lengths    $fields_info = PMA_DBI_get_columns('mysql', 'user', null, true);    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    unset($fields_info);    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<fieldset id="fieldset_add_user_login">' . "\n"       . '<legend>' . __('Login Information') . '</legend>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_username">' . "\n"       . '    ' . __('User name') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"' . "\n"       . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">' . "\n"       . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>' . "\n"       . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])            ? ''            : ' value="' . htmlspecialchars(isset($GLOBALS['new_username'])                ? $GLOBALS['new_username']                : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_hostname">' . "\n"       . '    ' . __('Host') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"' . "\n";    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '       . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')       . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')            ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>' . "\n"       . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')            ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>' . "\n";    if (! empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')                ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>' . "\n";    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')            ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>' . "\n"       . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')            ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . htmlspecialchars(isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />' . "\n"       . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_password">' . "\n"       . '    ' . __('Password') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"' . "\n"       . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">' . "\n"       . ($mode == 'change' ? '            <option value="keep" selected="selected">' . __('Do not change the password') . '</option>' . "\n" : '')       . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>' . "\n"       . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item" id="div_element_before_generate_password">' . "\n"       . '<label for="text_pma_pw2">' . "\n"       . '    ' . __('Re-type') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">&nbsp;</span>' . "\n"       . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       // Generate password added here via jQuery       . '</fieldset>' . "\n";} // end of the 'PMA_displayUserAndHostFields()' function/** * Changes / copies a user, part I */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $row = PMA_DBI_fetch_single_row('SELECT * FROM `mysql`.`user` ' . $user_host_condition);    if (! $row) {        PMA_Message::notice(__('No user found.'))->display();        unset($_REQUEST['change_copy']);    } else {        extract($row, EXTR_OVERWRITE);        // Recent MySQL versions have the field "Password" in mysql.user,        // so the previous extract creates $Password but this script        // uses $password        if (! isset($password) && isset($Password)) {            $password = $Password;        }        $queries = array();    }}/** * Adds a user *   (Changes / copies a user, part II) */if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {    $sql_query = '';    if ($pred_username == 'any') {        $username = '';    }    switch ($pred_hostname) {    case 'any':        $hostname = '%';        break;    case 'localhost':        $hostname = 'localhost';        break;    case 'hosttable':        $hostname = '';        break;    case 'thishost':        $_user_name = PMA_DBI_fetch_value('SELECT USER()');        $hostname = substr($_user_name, (strrpos($_user_name, '@') + 1));        unset($_user_name);        break;    }    $sql = "SELECT '1' FROM `mysql`.`user`"        . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"        . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";    if (PMA_DBI_fetch_value($sql) == 1) {        $message = PMA_Message::error(__('The user %s already exists!'));        $message->addParam('[i]\'' . $username . '\'@\'' . $hostname . '\'[/i]');        $_REQUEST['adduser'] = true;        $_add_user_error = true;    } else {        $create_user_real = 'CREATE USER \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        $real_sql_query = 'GRANT ' . join(', ', PMA_extractPrivInfo()) . ' ON *.* TO \''            . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        if ($pred_password != 'none' && $pred_password != 'keep') {            $sql_query = $real_sql_query . ' IDENTIFIED BY \'***\'';            $real_sql_query .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            if (isset($create_user_real)) {                $create_user_show = $create_user_real . ' IDENTIFIED BY \'***\'';                $create_user_real .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            }        } else {            if ($pred_password == 'keep' && ! empty($password)) {                $real_sql_query .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                if (isset($create_user_real)) {                    $create_user_real .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                }            }            $sql_query = $real_sql_query;            if (isset($create_user_real)) {                $create_user_show = $create_user_real;            }        }        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections))        ) {            $real_sql_query .= ' WITH';            $sql_query .= ' WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $real_sql_query .= ' GRANT OPTION';                $sql_query .= ' GRANT OPTION';            }            if (isset($max_questions)) {                // avoid negative values                $max_questions = max(0, (int)$max_questions);                $real_sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;                $sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $real_sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;                $sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $real_sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;                $sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $real_sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;                $sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        if (isset($create_user_real)) {            $create_user_real .= ';';            $create_user_show .= ';';        }        $real_sql_query .= ';';        $sql_query .= ';';        if (empty($_REQUEST['change_copy'])) {            $_error = false;            if (isset($create_user_real)) {                if (! PMA_DBI_try_query($create_user_real)) {                    $_error = true;                }                $sql_query = $create_user_show . $sql_query;            }            if ($_error || ! PMA_DBI_try_query($real_sql_query)) {                $_REQUEST['createdb'] = false;                $message = PMA_Message::rawError(PMA_DBI_getError());            } else {                $message = PMA_Message::success(__('You have added a new user.'));            }            switch (PMA_ifSetOr($_REQUEST['createdb'], '0')) {            case '1' :                // Create database with same name and grant all privileges                $q = 'CREATE DATABASE IF NOT EXISTS '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . ';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                    break;                }                /**                 * If we are not in an Ajax request, we can't reload navigation now                 */                if ($GLOBALS['is_ajax_request'] != true) {                    // this is needed in case tracking is on:                    $GLOBALS['db'] = $username;                    $GLOBALS['reload'] = true;                    PMA_reloadNavigation();                }                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '2' :                // Grant all privileges on wildcard name (username\_%)                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username) . '\_%') . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '3' :                // Grant all privileges on the specified database to the new user                $q = 'GRANT ALL PRIVILEGES ON '                . PMA_backquote(PMA_sqlAddSlashes($dbname)) . '.* TO \''                . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '0' :            default :                break;            }        } else {            if (isset($create_user_real)) {                $queries[]             = $create_user_real;            }            $queries[]             = $real_sql_query;            // we put the query containing the hidden password in            // $queries_for_display, at the same position occupied            // by the real query in $queries            $tmp_count = count($queries);            if (isset($create_user_real)) {                $queries_for_display[$tmp_count - 2] = $create_user_show;            }            $queries_for_display[$tmp_count - 1] = $sql_query;        }        unset($res, $real_sql_query);    }}/** * Changes / copies a user, part III */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $res = PMA_DBI_query('SELECT * FROM `mysql`.`db`' . $user_host_condition);    while ($row = PMA_DBI_fetch_assoc($res)) {        $queries[] = 'GRANT ' . join(', ', PMA_extractPrivInfo($row))            .' ON ' . PMA_backquote($row['Db']) . '.*'            .' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . ($row['Grant_priv'] == 'Y' ? ' WITH GRANT OPTION;' : ';');    }    PMA_DBI_free_result($res);    $res = PMA_DBI_query(        'SELECT `Db`, `Table_name`, `Table_priv` FROM `mysql`.`tables_priv`' . $user_host_condition,        $GLOBALS['userlink'],        PMA_DBI_QUERY_STORE    );    while ($row = PMA_DBI_fetch_assoc($res)) {        $res2 = PMA_DBI_QUERY(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($old_username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\''            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes($row['Db']) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($row['Table_name']) . "'"            .';',            null,            PMA_DBI_QUERY_STORE        );        $tmp_privs1 = PMA_extractPrivInfo($row);        $tmp_privs2 = array(            'Select' => array(),            'Insert' => array(),            'Update' => array(),            'References' => array()        );        while ($row2 = PMA_DBI_fetch_assoc($res2)) {            $tmp_array = explode(',', $row2['Column_priv']);            if (in_array('Select', $tmp_array)) {                $tmp_privs2['Select'][] = $row2['Column_name'];            }            if (in_array('Insert', $tmp_array)) {                $tmp_privs2['Insert'][] = $row2['Column_name'];            }            if (in_array('Update', $tmp_array)) {                $tmp_privs2['Update'][] = $row2['Column_name'];            }            if (in_array('References', $tmp_array)) {                $tmp_privs2['References'][] = $row2['Column_name'];            }            unset($tmp_array);        }        if (count($tmp_privs2['Select']) > 0 && ! in_array('SELECT', $tmp_privs1)) {            $tmp_privs1[] = 'SELECT (`' . join('`, `', $tmp_privs2['Select']) . '`)';        }        if (count($tmp_privs2['Insert']) > 0 && ! in_array('INSERT', $tmp_privs1)) {            $tmp_privs1[] = 'INSERT (`' . join('`, `', $tmp_privs2['Insert']) . '`)';        }        if (count($tmp_privs2['Update']) > 0 && ! in_array('UPDATE', $tmp_privs1)) {            $tmp_privs1[] = 'UPDATE (`' . join('`, `', $tmp_privs2['Update']) . '`)';        }        if (count($tmp_privs2['References']) > 0 && ! in_array('REFERENCES', $tmp_privs1)) {            $tmp_privs1[] = 'REFERENCES (`' . join('`, `', $tmp_privs2['References']) . '`)';        }        unset($tmp_privs2);        $queries[] = 'GRANT ' . join(', ', $tmp_privs1)            . ' ON ' . PMA_backquote($row['Db']) . '.' . PMA_backquote($row['Table_name'])            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . (in_array('Grant', explode(',', $row['Table_priv'])) ? ' WITH GRANT OPTION;' : ';');    }}/** * Updates privileges */if (! empty($update_privs)) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, (isset($tablename) ? $tablename : ''));    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    if (! isset($Grant_priv) || $Grant_priv != 'Y') {        $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table            . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    } else {        $sql_query1 = '';    }    // Should not do a GRANT USAGE for a table-specific privilege, it    // causes problems later (cannot revoke it)    if (! (isset($tablename) && 'USAGE' == implode('', PMA_extractPrivInfo()))) {        $sql_query2 = 'GRANT ' . join(', ', PMA_extractPrivInfo())            . ' ON ' . $db_and_table            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (! isset($dbname)            && (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections)))        ) {            $sql_query2 .= 'WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $sql_query2 .= ' GRANT OPTION';            }            if (isset($max_questions)) {                $max_questions = max(0, (int)$max_questions);                $sql_query2 .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $sql_query2 .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $sql_query2 .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $sql_query2 .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        $sql_query2 .= ';';    }    if (! PMA_DBI_try_query($sql_query0)) {        // This might fail when the executing user does not have ALL PRIVILEGES himself.        // See https://sourceforge.net/tracker/index.php?func=detail&aid=3285929&group_id=23067&atid=377408        $sql_query0 = '';    }    if (isset($sql_query1) && ! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    if (isset($sql_query2)) {        PMA_DBI_query($sql_query2);    } else {        $sql_query2 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1 . ' ' . $sql_query2;    $message = PMA_Message::success(__('You have updated the privileges for %s.'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');}/** * Revokes Privileges */if (isset($_REQUEST['revokeall'])) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, isset($tablename) ? $tablename : '');    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    PMA_DBI_query($sql_query0);    if (! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1;    $message = PMA_Message::success(__('You have revoked the privileges for %s'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    if (! isset($tablename)) {        unset($dbname);    } else {        unset($tablename);    }}/** * Updates the password */if (isset($_REQUEST['change_pw'])) {    // similar logic in user_password.php    $message = '';    if ($nopass == 0 && isset($pma_pw) && isset($pma_pw2)) {        if ($pma_pw != $pma_pw2) {            $message = PMA_Message::error(__('The passwords aren\'t the same!'));        } elseif (empty($pma_pw) || empty($pma_pw2)) {            $message = PMA_Message::error(__('The password is empty!'));        }    } // end if    // here $nopass could be == 1    if (empty($message)) {        $hashing_function = (! empty($pw_hash) && $pw_hash == 'old' ? 'OLD_' : '')                      . 'PASSWORD';        // in $sql_query which will be displayed, hide the password        $sql_query        = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . preg_replace('@.@s', '*', $pma_pw) . '\')');        $local_query      = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($pma_pw) . '\')');        PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        $message = PMA_Message::success(__('The password for %s was changed successfully.'));        $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    }}/** * Deletes users *   (Changes / copies a user, part IV) */if (isset($_REQUEST['delete']) || (isset($_REQUEST['change_copy']) && $_REQUEST['mode'] < 4)) {    if (isset($_REQUEST['change_copy'])) {        $selected_usr = array($old_username . '&amp;#27;' . $old_hostname);    } else {        $selected_usr = $_REQUEST['selected_usr'];        $queries = array();    }    foreach ($selected_usr as $each_user) {        list($this_user, $this_host) = explode('&amp;#27;', $each_user);        $queries[] = '# ' . sprintf(__('Deleting %s'), '\'' . $this_user . '\'@\'' . $this_host . '\'') . ' ...';        $queries[] = 'DROP USER \'' . PMA_sqlAddSlashes($this_user) . '\'@\'' . PMA_sqlAddSlashes($this_host) . '\';';        if (isset($_REQUEST['drop_users_db'])) {            $queries[] = 'DROP DATABASE IF EXISTS ' . PMA_backquote($this_user) . ';';            $GLOBALS['reload'] = true;            if ($GLOBALS['is_ajax_request'] != true) {                PMA_reloadNavigation();            }        }    }    if (empty($_REQUEST['change_copy'])) {        if (empty($queries)) {            $message = PMA_Message::error(__('No users selected for deleting!'));        } else {            if ($_REQUEST['mode'] == 3) {                $queries[] = '# ' . __('Reloading the privileges') . ' ...';                $queries[] = 'FLUSH PRIVILEGES;';            }            $drop_user_error = '';            foreach ($queries as $sql_query) {                if ($sql_query{0} != '#') {                    if (! PMA_DBI_try_query($sql_query, $GLOBALS['userlink'])) {                        $drop_user_error .= PMA_DBI_getError() . "\n";                    }                }            }            // tracking sets this, causing the deleted db to be shown in navi            unset($GLOBALS['db']);            $sql_query = join("\n", $queries);            if (! empty($drop_user_error)) {                $message = PMA_Message::rawError($drop_user_error);            } else {                $message = PMA_Message::success(__('The selected users have been deleted successfully.'));            }        }        unset($queries);    }}/** * Changes / copies a user, part V */if (isset($_REQUEST['change_copy'])) {    $tmp_count = 0;    foreach ($queries as $sql_query) {        if ($sql_query{0} != '#') {            PMA_DBI_query($sql_query);        }        // when there is a query containing a hidden password, take it        // instead of the real query sent        if (isset($queries_for_display[$tmp_count])) {            $queries[$tmp_count] = $queries_for_display[$tmp_count];        }        $tmp_count++;    }    $message = PMA_Message::success();    $sql_query = join("\n", $queries);}/** * Reloads the privilege tables into memory */if (isset($_REQUEST['flush_privileges'])) {    $sql_query = 'FLUSH PRIVILEGES;';    PMA_DBI_query($sql_query);    $message = PMA_Message::success(__('The privileges were reloaded successfully.'));}/** * defines some standard links */$link_edit = '<a class="edit_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s">'    . PMA_getIcon('b_usredit.png', __('Edit Privileges'))    . '</a>';$link_revoke = '<a href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s'    . '&amp;revokeall=1">'    . PMA_getIcon('b_usrdrop.png', __('Revoke'))    . '</a>';$link_export = '<a class="export_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;initial=%s'    . '&amp;export=1">'    . PMA_getIcon('b_tblexport.png', __('Export'))    . '</a>';/** * If we are in an Ajax request for Create User/Edit User/Revoke User/ * Flush Privileges, show $message and exit. */if ($GLOBALS['is_ajax_request'] && ! isset($_REQUEST['export']) && (! isset($_REQUEST['adduser']) || $_add_user_error) && ! isset($_REQUEST['initial']) && ! isset($_REQUEST['showall']) && ! isset($_REQUEST['edit_user_dialog']) && ! isset($_REQUEST['db_specific'])) {    if (isset($sql_query)) {        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);    }    if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {        /**         * generate html on the fly for the new user that was just created.         */        $new_user_string = '<tr>'."\n"                           .'<td> <input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_" value="' . htmlspecialchars($username) . '&amp;#27;' . htmlspecialchars($hostname) . '" /> </td>' . "\n"                           .'<td><label for="checkbox_sel_users_">' . (empty($username) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($username) ) . '</label></td>' . "\n"                           .'<td>' . htmlspecialchars($hostname) . '</td>' . "\n";        $new_user_string .= '<td>';        if (! empty($password) || isset($pma_pw)) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= '<span style="color: #FF0000">' . __('No') . '</span>';        };        $new_user_string .= '</td>'."\n";        $new_user_string .= '<td><tt>' . join(', ', PMA_extractPrivInfo('', true)) . '</tt></td>'; //Fill in privileges here        $new_user_string .= '<td>';        if ((isset($Grant_priv) && $Grant_priv == 'Y')) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= __('No');        }        $new_user_string .='</td>';        $new_user_string .= '<td>' . sprintf($link_edit, urlencode($username), urlencode($hostname), '', '') . '</td>' . "\n";        $new_user_string .= '<td>' . sprintf($link_export, urlencode($username), urlencode($hostname), (isset($initial) ? $initial : '')) . '</td>' . "\n";        $new_user_string .= '</tr>';        $extra_data['new_user_string'] = $new_user_string;        /**         * Generate the string for this alphabet's initial, to update the user         * pagination         */        $new_user_initial = strtoupper(substr($username, 0, 1));        $new_user_initial_string = '<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&initial=' . $new_user_initial            .'">' . $new_user_initial . '</a>';        $extra_data['new_user_initial'] = $new_user_initial;        $extra_data['new_user_initial_string'] = $new_user_initial_string;    }    if (isset($update_privs)) {        $extra_data['db_specific_privs'] = false;        if (isset($dbname_is_wildcard)) {            $extra_data['db_specific_privs'] = ! $dbname_is_wildcard;        }        $new_privileges = join(', ', PMA_extractPrivInfo('', true));        $extra_data['new_privileges'] = $new_privileges;    }    if ($message instanceof PMA_Message) {        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    }}/** * Displays the links */if (isset($viewing_mode) && $viewing_mode == 'db') {    $db = $checkprivs;    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";} else {    include './libraries/server_links.inc.php';}/** * Displays the page */// export user definitionif (isset($_REQUEST['export'])) {    $title = __('User') . ' `' . htmlspecialchars($username) . '`@`' . htmlspecialchars($hostname) . '`';    $response = '<textarea cols="' . $GLOBALS['cfg']['TextareaCols'] . '" rows="' . $GLOBALS['cfg']['TextareaRows'] . '">';    $grants = PMA_DBI_fetch_result("SHOW GRANTS FOR '" . PMA_sqlAddSlashes($username) . "'@'" . PMA_sqlAddSlashes($hostname) . "'");    foreach ($grants as $one_grant) {        $response .= $one_grant . ";\n\n";    }    $response .= '</textarea>';    unset($username, $hostname, $grants, $one_grant);    if ($GLOBALS['is_ajax_request']) {        PMA_ajaxResponse($response, 1, array('title' => $title));    } else {        echo "<h2>$title</h2>$response";    }}if (empty($_REQUEST['adduser']) && (! isset($checkprivs) || ! strlen($checkprivs))) {    if (! isset($username)) {        // No username is given --> display the overview        echo '<h2>' . "\n"           . PMA_getIcon('b_usrlist.png')           . __('Users overview') . "\n"           . '</h2>' . "\n";        $sql_query = 'SELECT *,' .            "       IF(`Password` = _latin1 '', 'N', 'Y') AS 'Password'" .            '  FROM `mysql`.`user`';        $sql_query .= (isset($initial) ? PMA_rangeOfUsers($initial) : '');        $sql_query .= ' ORDER BY `User` ASC, `Host` ASC;';        $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);        if (! $res) {            // the query failed! This may have two reasons:            // - the user does not have enough privileges            // - the privilege tables use a structure of an earlier version.            // so let's try a more simple query            $sql_query = 'SELECT * FROM `mysql`.`user`';            $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);            if (! $res) {                PMA_Message::error(__('No Privileges'))->display();                PMA_DBI_free_result($res);                unset($res);            } else {                // This message is hardcoded because I will replace it by                // a automatic repair feature soon.                $raw = 'Your privilege table structure seems to be older than'                    . ' this MySQL version!<br />'                    . 'Please run the <tt>mysql_upgrade</tt> command'                    . '(<tt>mysql_fix_privilege_tables</tt> on older systems)'                    . ' that should be included in your MySQL server distribution'                    . ' to solve this problem!';                PMA_Message::rawError($raw)->display();            }        } else {            // we also want users not in table `user` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            $tables_to_search_for_users = array(                'user', 'db', 'tables_priv', 'columns_priv', 'procs_priv',            );            $db_rights_sqls = array();            foreach ($tables_to_search_for_users as $table_search_in) {                if (in_array($table_search_in, $tables)) {                    $db_rights_sqls[] = 'SELECT DISTINCT `User`, `Host` FROM `mysql`.`' . $table_search_in . '` ' . (isset($initial) ? PMA_rangeOfUsers($initial) : '');                }            }            $user_defaults = array(                'User'      => '',                'Host'      => '%',                'Password'  => '?',                'Grant_priv' => 'N',                'privs'     => array('USAGE'),            );            // for all initials, even non A-Z            $array_initials = array();            // for the rights            $db_rights = array();            $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                .' ORDER BY `User` ASC, `Host` ASC';            $db_rights_result = PMA_DBI_query($db_rights_sql);            while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                $db_rights_row = array_merge($user_defaults, $db_rights_row);                $db_rights[$db_rights_row['User']][$db_rights_row['Host']]                    = $db_rights_row;            }            PMA_DBI_free_result($db_rights_result);            unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);            ksort($db_rights);            /**             * Displays the initials             * In an Ajax request, we don't need to show this.             * Also not necassary if there is less than 20 privileges             */            if ($GLOBALS['is_ajax_request'] != true && PMA_DBI_num_rows($res) > 20 ) {                // initialize to false the letters A-Z                for ($letter_counter = 1; $letter_counter < 27; $letter_counter++) {                    if (! isset($array_initials[chr($letter_counter + 64)])) {                        $array_initials[chr($letter_counter + 64)] = false;                    }                }                $initials = PMA_DBI_try_query('SELECT DISTINCT UPPER(LEFT(`User`,1)) FROM `user` ORDER BY `User` ASC', null, PMA_DBI_QUERY_STORE);                while (list($tmp_initial) = PMA_DBI_fetch_row($initials)) {                    $array_initials[$tmp_initial] = true;                }                // Display the initials, which can be any characters, not                // just letters. For letters A-Z, we add the non-used letters                // as greyed out.                uksort($array_initials, "strnatcasecmp");                echo '<table id="initials_table" class="' . $conditional_class . '" <cellspacing="5"><tr>';                foreach ($array_initials as $tmp_initial => $initial_was_found) {                    if ($initial_was_found) {                        echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;initial=' . urlencode($tmp_initial) . '">' . $tmp_initial . '</a></td>' . "\n";                    } else {                        echo '<td>' . $tmp_initial . '</td>';                    }                }                echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;showall=1" class="nowrap">[' . __('Show all') . ']</a></td>' . "\n";                echo '</tr></table>';            }            /**            * Display the user overview            * (if less than 50 users, display them immediately)            */            if (isset($initial) || isset($showall) || PMA_DBI_num_rows($res) < 50) {                while ($row = PMA_DBI_fetch_assoc($res)) {                    $row['privs'] = PMA_extractPrivInfo($row, true);                    $db_rights[$row['User']][$row['Host']] = $row;                }                @PMA_DBI_free_result($res);                unset($res);                echo '<form name="usersForm" id="usersForm" action="server_privileges.php" method="post">' . "\n"                   . PMA_generate_common_hidden_inputs('', '')                   . '    <table id="tableuserrights" class="data">' . "\n"                   . '    <thead>' . "\n"                   . '        <tr><th></th>' . "\n"                   . '            <th>' . __('User') . '</th>' . "\n"                   . '            <th>' . __('Host') . '</th>' . "\n"                   . '            <th>' . __('Password') . '</th>' . "\n"                   . '            <th>' . __('Global privileges') . ' '                   . PMA_showHint(__('Note: MySQL privilege names are expressed in English')) . '</th>' . "\n"                   . '            <th>' . __('Grant') . '</th>' . "\n"                   . '            <th colspan="2">' . __('Action') . '</th>' . "\n";                echo '        </tr>' . "\n";                echo '    </thead>' . "\n";                echo '    <tbody>' . "\n";                $odd_row = true;                $index_checkbox = -1;                foreach ($db_rights as $user) {                    $index_checkbox++;                    ksort($user);                    foreach ($user as $host) {                        $index_checkbox++;                        echo '        <tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                           . '            <td><input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_'                            . $index_checkbox . '" value="'                            . htmlspecialchars($host['User'] . '&amp;#27;' . $host['Host'])                            . '"'                            . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')                            . ' /></td>' . "\n"                           . '            <td><label for="checkbox_sel_users_' . $index_checkbox . '">' . (empty($host['User']) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($host['User'])) . '</label></td>' . "\n"                           . '            <td>' . htmlspecialchars($host['Host']) . '</td>' . "\n";                        echo '            <td>';                        switch ($host['Password']) {                        case 'Y':                            echo __('Yes');                            break;                        case 'N':                            echo '<span style="color: #FF0000">' . __('No') . '</span>';                            break;                        // this happens if this is a definition not coming from mysql.user                        default:                            echo '--'; // in future version, replace by "not present"                            break;                        } // end switch                        echo '</td>' . "\n"                           . '            <td><tt>' . "\n"                           . '                ' . implode(',' . "\n" . '            ', $host['privs']) . "\n"                           . '                </tt></td>' . "\n"                           . '            <td>' . ($host['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . '</td>' . "\n"                           . '            <td align="center">';                        printf($link_edit, urlencode($host['User']), urlencode($host['Host']), '', '');                        echo '</td>';                        echo '<td align="center">';                        printf($link_export, urlencode($host['User']), urlencode($host['Host']), (isset($initial) ? $initial : ''));                        echo '</td>';                        echo '</tr>';                        $odd_row = ! $odd_row;                    }                }                unset($user, $host, $odd_row);                echo '    </tbody></table>' . "\n"                   .'<img class="selectallarrow"'                   .' src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png"'                   .' width="38" height="22"'                   .' alt="' . __('With selected:') . '" />' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '&amp;checkall=1"'                   .' onclick="if (markAllRows(\'usersForm\')) return false;">'                   . __('Check All') . '</a>' . "\n"                   .'/' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '"'                   .' onclick="if (unMarkAllRows(\'usersForm\')) return false;">'                   . __('Uncheck All') . '</a>' . "\n";                // add/delete user fieldset                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user">'                   . '        <legend>' . "\n"                   . PMA_getIcon('b_usrdrop.png')                   . '            ' . __('Remove selected users') . '' . "\n"                   . '        </legend>' . "\n"                   . '        <input type="hidden" name="mode" value="2" />' . "\n"                   . '(' . __('Revoke all active privileges from the users and delete them afterwards.') . ')<br />' . "\n"                   . '        <input type="checkbox" title="' . __('Drop the databases that have the same names as the users.') . '" name="drop_users_db" id="checkbox_drop_users_db" />' . "\n"                   . '        <label for="checkbox_drop_users_db" title="' . __('Drop the databases that have the same names as the users.') . '">' . "\n"                   . '            ' . __('Drop the databases that have the same names as the users.') . "\n"                   . '        </label>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user_footer" class="tblFooters">' . "\n"                   . '        <input type="submit" name="delete" value="' . __('Go') . '" id="buttonGo" class="' . $conditional_class . '"/>' . "\n"                   . '    </fieldset>' . "\n"                   . '</form>' . "\n";            } else {                unset ($row);                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n";            } // end if (display overview)            if ($GLOBALS['is_ajax_request']) {                exit;            }            $flushnote = new PMA_Message(__('Note: phpMyAdmin gets the users\' privileges directly from MySQL\'s privilege tables. The content of these tables may differ from the privileges the server uses, if they have been changed manually. In this case, you should %sreload the privileges%s before you continue.'), PMA_Message::NOTICE);            $flushnote->addParam('<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;flush_privileges=1" id="reload_privileges_anchor" class="' . $conditional_class . '">', false);            $flushnote->addParam('</a>', false);            $flushnote->display();        }    } else {        // A user was selected -> display the user's properties        // In an Ajax request, prevent cached values from showing        if ($GLOBALS['is_ajax_request'] == true) {            header('Cache-Control: no-cache');        }        echo '<h2>' . "\n"           . PMA_getIcon('b_usredit.png')           . __('Edit Privileges') . ': '           . __('User');        if (isset($dbname)) {            echo ' <i><a href="server_privileges.php?'                . $GLOBALS['url_query'] . '&amp;username=' . htmlspecialchars(urlencode($username))                . '&amp;hostname=' . htmlspecialchars(urlencode($hostname)) . '&amp;dbname=&amp;tablename=">\''                . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</a></i>' . "\n";            $url_dbname = urlencode(str_replace(array('\_', '\%'), array('_', '%'), $dbname));            echo ' - ' . ($dbname_is_wildcard ? __('Databases') : __('Database') );            if (isset($tablename)) {                echo ' <i><a href="server_privileges.php?' . $GLOBALS['url_query']                    . '&amp;username=' . htmlspecialchars(urlencode($username)) . '&amp;hostname=' . htmlspecialchars(urlencode($hostname))                    . '&amp;dbname=' . htmlspecialchars($url_dbname) . '&amp;tablename=">' . htmlspecialchars($dbname) . '</a></i>';                echo ' - ' . __('Table') . ' <i>' . htmlspecialchars($tablename) . '</i>';            } else {                echo ' <i>' . htmlspecialchars($dbname) . '</i>';            }        } else {            echo ' <i>\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</i>' . "\n";        }        echo '</h2>' . "\n";        $sql = "SELECT '1' FROM `mysql`.`user`"            . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"            . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        $user_does_not_exists = (bool) ! PMA_DBI_fetch_value($sql);        unset($sql);        if ($user_does_not_exists) {            PMA_Message::error(__('The selected user was not found in the privilege table.'))->display();            PMA_displayLoginInformationFields();            //require './libraries/footer.inc.php';        }        echo '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n";        $_params = array(            'username' => $username,            'hostname' => $hostname,        );        if (isset($dbname)) {            $_params['dbname'] = $dbname;            if (isset($tablename)) {                $_params['tablename'] = $tablename;            }        }        echo PMA_generate_common_hidden_inputs($_params);        PMA_displayPrivTable(            PMA_ifSetOr($dbname, '*', 'length'),            PMA_ifSetOr($tablename, '*', 'length')        );        echo '</form>' . "\n";        if (! isset($tablename) && empty($dbname_is_wildcard)) {            // no table name was given, display all table specific rights            // but only if $dbname contains no wildcards            // table header            echo '<form action="server_privileges.php" id="db_or_table_specific_priv" method="post">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset>' . "\n"               . '<legend>' . (! isset($dbname) ? __('Database-specific privileges') : __('Table-specific privileges')) . '</legend>' . "\n"               . '<table class="data">' . "\n"               . '<thead>' . "\n"               . '<tr><th>' . (! isset($dbname) ? __('Database') : __('Table')) . '</th>' . "\n"               . '    <th>' . __('Privileges') . '</th>' . "\n"               . '    <th>' . __('Grant') . '</th>' . "\n"               . '    <th>' . (! isset($dbname) ? __('Table-specific privileges') : __('Column-specific privileges')) . '</th>' . "\n"               . '    <th colspan="2">' . __('Action') . '</th>' . "\n"               . '</tr>' . "\n"               . '</thead>' . "\n"               . '<tbody>' . "\n";            $user_host_condition = ' WHERE `User`'                . ' = \'' . PMA_sqlAddSlashes($username) . "'"                . ' AND `Host`'                . ' = \'' . PMA_sqlAddSlashes($hostname) . "'";            // table body            // get data            // we also want privielgs for this user not in table `db` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            if (! isset($dbname)) {                // no db name given, so we want all privs for the given user                $tables_to_search_for_users = array(                    'tables_priv', 'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Db`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Db'          => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Table_privs' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Db` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    // only Db names in the table `mysql`.`db` uses wildcards                    // as we are in the db specific rights display we want                    // all db names escaped, also from other sources                    $db_rights_row['Db'] = PMA_escape_mysql_wildcards(                        $db_rights_row['Db']                    );                    $db_rights[$db_rights_row['Db']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT * FROM `mysql`.`db`' . $user_host_condition . ' ORDER BY `Db` ASC';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Db']])) {                        $db_rights[$row['Db']] = array_merge($db_rights[$row['Db']], $row);                    } else {                        $db_rights[$row['Db']] = $row;                    }                    // there are db specific rights for this user                    // so we can drop this db rights                    $db_rights[$row['Db']]['can_delete'] = true;                }                PMA_DBI_free_result($res);                unset($row, $res);            } else {                // db name was given,                // so we want all user specific rights for this db                $user_host_condition .=                    ' AND `Db`'                    .' LIKE \'' . PMA_sqlAddSlashes($dbname, true) . "'";                $tables_to_search_for_users = array(                    'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Table_name`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Table_name'  => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Column_priv' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Table_name` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    $db_rights[$db_rights_row['Table_name']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT `Table_name`,'                    .' `Table_priv`,'                    .' IF(`Column_priv` = _latin1 \'\', 0, 1)'                    .' AS \'Column_priv\''                    .' FROM `mysql`.`tables_priv`'                    . $user_host_condition                    .' ORDER BY `Table_name` ASC;';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Table_name']])) {                        $db_rights[$row['Table_name']] = array_merge($db_rights[$row['Table_name']], $row);                    } else {                        $db_rights[$row['Table_name']] = $row;                    }                }                PMA_DBI_free_result($res);                unset($row, $res);            }            ksort($db_rights);            // display rows            if (count($db_rights) < 1) {                echo '<tr class="odd">' . "\n"                   . '    <td colspan="6"><center><i>' . __('None') . '</i></center></td>' . "\n"                   . '</tr>' . "\n";            } else {                $odd_row = true;                $found_rows = array();                //while ($row = PMA_DBI_fetch_assoc($res)) {                foreach ($db_rights as $row) {                    $found_rows[] = (! isset($dbname)) ? $row['Db'] : $row['Table_name'];                    echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                       . '    <td>' . htmlspecialchars((! isset($dbname)) ? $row['Db'] : $row['Table_name']) . '</td>' . "\n"                       . '    <td><tt>' . "\n"                       . '        ' . join(',' . "\n" . '            ', PMA_extractPrivInfo($row, true)) . "\n"                       . '        </tt></td>' . "\n"                       . '    <td>' . ((((! isset($dbname)) && $row['Grant_priv'] == 'Y') || (isset($dbname) && in_array('Grant', explode(',', $row['Table_priv'])))) ? __('Yes') : __('No')) . '</td>' . "\n"                       . '    <td>';                    if (! empty($row['Table_privs']) || ! empty ($row['Column_priv'])) {                        echo __('Yes');                    } else {                        echo __('No');                    }                    echo '</td>' . "\n"                       . '    <td>';                    printf(                        $link_edit,                        htmlspecialchars(urlencode($username)),                        urlencode(htmlspecialchars($hostname)),                        urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                        urlencode((! isset($dbname)) ? '' : $row['Table_name'])                    );                    echo '</td>' . "\n"                       . '    <td>';                    if (! empty($row['can_delete']) || isset($row['Table_name']) && strlen($row['Table_name'])) {                        printf(                            $link_revoke,                            htmlspecialchars(urlencode($username)),                            urlencode(htmlspecialchars($hostname)),                            urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                            urlencode((! isset($dbname)) ? '' : $row['Table_name'])                        );                    }                    echo '</td>' . "\n"                       . '</tr>' . "\n";                    $odd_row = ! $odd_row;                } // end while            }            unset($row);            echo '</tbody>' . "\n"               . '</table>' . "\n";            if (! isset($dbname)) {                // no database name was given, display select db                $pred_db_array =PMA_DBI_fetch_result('SHOW DATABASES;');                echo '    <label for="text_dbname">' . __('Add privileges on the following database') . ':</label>' . "\n";                if (! empty($pred_db_array)) {                    echo '    <select name="pred_dbname" class="autosubmit">' . "\n"                       . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                    foreach ($pred_db_array as $current_db) {                        $current_db = PMA_escape_mysql_wildcards($current_db);                        // cannot use array_diff() once, outside of the loop,                        // because the list of databases has special characters                        // already escaped in $found_rows,                        // contrary to the output of SHOW DATABASES                        if (empty($found_rows) || ! in_array($current_db, $found_rows)) {                            echo '        <option value="' . htmlspecialchars($current_db) . '">'                                . htmlspecialchars($current_db) . '</option>' . "\n";                        }                    }                    echo '    </select>' . "\n";                }                echo '    <input type="text" id="text_dbname" name="dbname" />' . "\n"                    . PMA_showHint(__('Wildcards % and _ should be escaped with a \ to use them literally'));            } else {                echo '    <input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '"/>' . "\n"                   . '    <label for="text_tablename">' . __('Add privileges on the following table') . ':</label>' . "\n";                if ($res = @PMA_DBI_try_query('SHOW TABLES FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . ';', null, PMA_DBI_QUERY_STORE)) {                    $pred_tbl_array = array();                    while ($row = PMA_DBI_fetch_row($res)) {                        if (! isset($found_rows) || ! in_array($row[0], $found_rows)) {                            $pred_tbl_array[] = $row[0];                        }                    }                    PMA_DBI_free_result($res);                    unset($res, $row);                    if (! empty($pred_tbl_array)) {                        echo '    <select name="pred_tablename" class="autosubmit">' . "\n"                           . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                        foreach ($pred_tbl_array as $current_table) {                            echo '        <option value="' . htmlspecialchars($current_table) . '">' . htmlspecialchars($current_table) . '</option>' . "\n";                        }                        echo '    </select>' . "\n";                    }                } else {                    unset($res);                }                echo '    <input type="text" id="text_tablename" name="tablename" />' . "\n";            }            echo '</fieldset>' . "\n";            echo '<fieldset class="tblFooters">' . "\n"               . '    <input type="submit" value="' . __('Go') . '" />'               . '</fieldset>' . "\n"               . '</form>' . "\n";        }        // Provide a line with links to the relevant database and table        if (isset($dbname) && empty($dbname_is_wildcard)) {            echo '[ ' . __('Database')                . ' <a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'                . $GLOBALS['url_query'] . '&amp;db=' . $url_dbname . '&amp;reload=1">'                . htmlspecialchars($dbname) . ': ' . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabDatabase']) . "</a> ]\n";            if (isset($tablename)) {                echo ' [ ' . __('Table') . ' <a href="'                    . $GLOBALS['cfg']['DefaultTabTable'] . '?' . $GLOBALS['url_query']                    . '&amp;db=' . $url_dbname . '&amp;table=' . htmlspecialchars(urlencode($tablename))                    . '&amp;reload=1">' . htmlspecialchars($tablename) . ': '                    . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])                    . "</a> ]\n";            }            unset($url_dbname);        }        if (! isset($dbname) && ! $user_does_not_exists) {            include_once './libraries/display_change_password.lib.php';            echo '<form action="server_privileges.php" method="post" onsubmit="return checkPassword(this);">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="old_username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="old_hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset id="fieldset_change_copy_user">' . "\n"               . '    <legend>' . __('Change Login Information / Copy User') . '</legend>' . "\n";            PMA_displayLoginInformationFields('change');            echo '    <fieldset>' . "\n"                . '        <legend>' . __('Create a new user with the same privileges and ...') . '</legend>' . "\n";            $choices = array(                '4' => __('... keep the old one.'),                '1' => __('... delete the old one from the user tables.'),                '2' => __('... revoke all active privileges from the old one and delete it afterwards.'),                '3' => __('... delete the old one from the user tables and reload the privileges afterwards.'));            PMA_display_html_radio('mode', $choices, '4', true);            unset($choices);            echo '    </fieldset>' . "\n"               . '</fieldset>' . "\n"               . '<fieldset id="fieldset_change_copy_user_footer" class="tblFooters">' . "\n"               . '    <input type="submit" name="change_copy" value="' . __('Go') . '" />' . "\n"               . '</fieldset>' . "\n"               . '</form>' . "\n";        }    }} elseif (isset($_REQUEST['adduser'])) {    // Add user    $GLOBALS['url_query'] .= '&amp;adduser=1';    echo '<h2>' . "\n"       . PMA_getIcon('b_usradd.png') . __('Add user') . "\n"       . '</h2>' . "\n"       . '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n"       . PMA_generate_common_hidden_inputs('', '');    PMA_displayLoginInformationFields('new');    echo '<fieldset id="fieldset_add_user_database">' . "\n"        . '<legend>' . __('Database for user') . '</legend>' . "\n";    $default_choice = 0;    $choices = array(        '0' => _pgettext('Create none database for user', 'None'),        '1' => __('Create database with same name and grant all privileges'),        '2' => __('Grant all privileges on wildcard name (username\\_%)'));    if (! empty($dbname) ) {        $choices['3'] = sprintf(            __('Grant all privileges on database &quot;%s&quot;'),            htmlspecialchars($dbname)        );        $default_choice = 3;        echo '<input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '" />' . "\n";    }    // 4th parameter set to true to add line breaks    // 5th parameter set to false to avoid htmlspecialchars() escaping in the label    //  since we have some HTML in some labels    PMA_display_html_radio('createdb', $choices, $default_choice, true, false);    unset($choices);    unset($default_choice);    echo '</fieldset>' . "\n";    PMA_displayPrivTable('*', '*', false);    echo '    <fieldset id="fieldset_add_user_footer" class="tblFooters">' . "\n"       . '        <input type="submit" name="adduser_submit" value="' . __('Go') . '" />' . "\n"       . '    </fieldset>' . "\n"       . '</form>' . "\n";} else {    // check the privileges for a particular database.    $user_form = '<form id="usersForm" action="server_privileges.php"><fieldset>' . "\n"       . '<legend>' . "\n"       . PMA_getIcon('b_usrcheck.png')       . '    ' . sprintf(__('Users having access to &quot;%s&quot;'), '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?' . PMA_generate_common_url($checkprivs) . '">' .  htmlspecialchars($checkprivs) . '</a>') . "\n"       . '</legend>' . "\n"       . '<table id="dbspecificuserrights" class="data">' . "\n"       . '<thead>' . "\n"       . '    <tr><th>' . __('User') . '</th>' . "\n"       . '        <th>' . __('Host') . '</th>' . "\n"       . '        <th>' . __('Type') . '</th>' . "\n"       . '        <th>' . __('Privileges') . '</th>' . "\n"       . '        <th>' . __('Grant') . '</th>' . "\n"       . '        <th>' . __('Action') . '</th>' . "\n"       . '    </tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    unset($row, $row1, $row2);    // now, we build the table...    $list_of_privileges        = '`User`, '        . '`Host`, '        . '`Select_priv`, '        . '`Insert_priv`, '        . '`Update_priv`, '        . '`Delete_priv`, '        . '`Create_priv`, '        . '`Drop_priv`, '        . '`Grant_priv`, '        . '`Index_priv`, '        . '`Alter_priv`, '        . '`References_priv`, '        . '`Create_tmp_table_priv`, '        . '`Lock_tables_priv`, '        . '`Create_view_priv`, '        . '`Show_view_priv`, '        . '`Create_routine_priv`, '        . '`Alter_routine_priv`, '        . '`Execute_priv`';    $list_of_compared_privileges        = '`Select_priv` = \'N\''        . ' AND `Insert_priv` = \'N\''        . ' AND `Update_priv` = \'N\''        . ' AND `Delete_priv` = \'N\''        . ' AND `Create_priv` = \'N\''        . ' AND `Drop_priv` = \'N\''        . ' AND `Grant_priv` = \'N\''        . ' AND `References_priv` = \'N\''        . ' AND `Create_tmp_table_priv` = \'N\''        . ' AND `Lock_tables_priv` = \'N\''        . ' AND `Create_view_priv` = \'N\''        . ' AND `Show_view_priv` = \'N\''        . ' AND `Create_routine_priv` = \'N\''        . ' AND `Alter_routine_priv` = \'N\''        . ' AND `Execute_priv` = \'N\'';    if (PMA_MYSQL_INT_VERSION >= 50106) {        $list_of_privileges .=            ', `Event_priv`, '            . '`Trigger_priv`';        $list_of_compared_privileges .=            ' AND `Event_priv` = \'N\''            . ' AND `Trigger_priv` = \'N\'';    }    $sql_query = '(SELECT ' . $list_of_privileges . ', `Db`'        .' FROM `mysql`.`db`'        .' WHERE \'' . PMA_sqlAddSlashes($checkprivs) . "'"        .' LIKE `Db`'        .' AND NOT (' . $list_of_compared_privileges. ')) '        .'UNION '        .'(SELECT ' . $list_of_privileges . ', \'*\' AS `Db`'        .' FROM `mysql`.`user` '        .' WHERE NOT (' . $list_of_compared_privileges . ')) '        .' ORDER BY `User` ASC,'        .'  `Host` ASC,'        .'  `Db` ASC;';    $res = PMA_DBI_query($sql_query);    $row = PMA_DBI_fetch_assoc($res);    if ($row) {        $found = true;    }    if ($found) {        while (true) {            // prepare the current user            $current_privileges = array();            $current_user = $row['User'];            $current_host = $row['Host'];            while ($row && $current_user == $row['User'] && $current_host == $row['Host']) {                $current_privileges[] = $row;                $row = PMA_DBI_fetch_assoc($res);            }            $user_form .= '    <tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . (empty($current_user) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($current_user)) . "\n"               . '        </td>' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . htmlspecialchars($current_host) . '</td>' . "\n";            for ($i = 0; $i < count($current_privileges); $i++) {                $current = $current_privileges[$i];                $user_form .= '        <td>' . "\n"                   . '            ';                if (! isset($current['Db']) || $current['Db'] == '*') {                    $user_form .= __('global');                } elseif ($current['Db'] == PMA_escape_mysql_wildcards($checkprivs)) {                    $user_form .= __('database-specific');                } else {                    $user_form .= __('wildcard'). ': <tt>' . htmlspecialchars($current['Db']) . '</tt>';                }                $user_form .= "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            <tt>' . "\n"                   . '                ' . join(',' . "\n" . '                ', PMA_extractPrivInfo($current, true)) . "\n"                   . '            </tt>' . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            ' . ($current['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n";                $user_form .= sprintf(                    $link_edit,                    urlencode($current_user),                    urlencode($current_host),                    urlencode(! isset($current['Db']) || $current['Db'] == '*' ? '' : $current['Db']),                    ''                );                $user_form .= '</td>' . "\n"                   . '    </tr>' . "\n";                if (($i + 1) < count($current_privileges)) {                    $user_form .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n";                }            }            if (empty($row) && empty($row1) && empty($row2)) {                break;            }            $odd_row = ! $odd_row;        }    } else {        $user_form .= '    <tr class="odd">' . "\n"           . '        <td colspan="6">' . "\n"           . '            ' . __('No user found.') . "\n"           . '        </td>' . "\n"           . '    </tr>' . "\n";    }    $user_form .= '</tbody>' . "\n"       . '</table></fieldset></form>' . "\n";    if ($GLOBALS['is_ajax_request'] == true) {        $extra_data['user_form'] = $user_form;        $message = PMA_Message::success(__('User has been added.'));        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    } else {        // Offer to create a new user for the current database        $user_form .= '<fieldset id="fieldset_add_user">' . "\n"           . '<legend>' . __('New') . '</legend>' . "\n"           . '    <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1&amp;dbname=' . htmlspecialchars($checkprivs) .'" rel="'.'checkprivs='.htmlspecialchars($checkprivs). '&amp;'.$GLOBALS['url_query'] . '" class="'.$conditional_class.'" name="db_specific">' . "\n"           . PMA_getIcon('b_usradd.png')           . '        ' . __('Add user') . '</a>' . "\n"           . '</fieldset>' . "\n";        echo $user_form ;    }} // end if (empty($_REQUEST['adduser']) && empty($checkprivs)) ... elseif ... else .../** * Displays the footer */echo "\n\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_bdb extends PMA_StorageEngine{    /**     * @return  array   variable names     */    function getVariables()    {        return array(            'version_bdb' => array(                'title' => __('Version information'),            ),            'bdb_cache_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_home' => array(            ),            'bdb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_logdir' => array(            ),            'bdb_max_lock' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'bdb_shared_data' => array(            ),            'bdb_tmpdir' => array(            ),            'bdb_data_direct' => array(            ),            'bdb_lock_detect' => array(            ),            'bdb_log_direct' => array(            ),            'bdb_no_recover' => array(            ),            'bdb_no_sync' => array(            ),            'skip_sync_bdb_logs' => array(            ),            'sync_bdb_logs' => array(            ),        );    }    /**     * @return string   LIKE pattern     */    function getVariablesLikePattern()    {        return '%bdb%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'bdb';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of SVG Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_SVG extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_SVG" constructor     *     * Upon instantiation This starts writing the Svg XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');        $this->startDtd(            'svg', '-//W3C//DTD SVG 1.1//EN',            'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'        );        $this->endDtd();    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Set document font     *     * @param string $value sets the font e.g Arial, Sans-serif etc     *     * @return void     * @access public     */    function setFont($value)    {        $this->font = $value;    }    /**     * Get document font     *     * @return string returns the font name     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Set document font size     *     * @param string $value sets the font size in pixels     *     * @return void     * @access public     */    function setFontSize($value)    {        $this->fontSize = $value;    }    /**     * Get document font size     *     * @return string returns the font size     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Starts Svg Document     *     * svg document starts by first initializing svg tag     * which contains all the attributes and namespace that needed     * to define the svg document     *     * @param integer $width  total width of the Svg document     * @param integer $height total height of the Svg document     *     * @return void     * @access public     *     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function startSvgDoc($width,$height)    {        $this->startElement('svg');        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('xmlns', 'http://www.w3.org/2000/svg');        $this->writeAttribute('version', '1.1');    }    /**     * Ends Svg Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endSvgDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * output Svg Document     *     * svg document prompted to the user for download     * Svg document saved in .svg extension and can be     * easily changeable by using any svg IDE     *     * @param string $fileName file name     *     * @return void     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function showOutput($fileName)    {        //ob_get_clean();        $output = $this->flush();        PMA_download_header($fileName . '.svg', 'image/svg+xml', strlen($output));        print $output;    }    /**     * Draws Svg elements     *     * SVG has some predefined shape elements like rectangle & text     * and other elements who have x,y co-ordinates are drawn.     * specify their width and height and can give styles too.     *     * @param string  $name   Svg element name     * @param integer $x      The x attr defines the left position of the element     * (e.g. x="0" places the element 0 pixels from the left of the browser window)     * @param integer $y      The y attribute defines the top position of the element     * (e.g. y="0" places the element 0 pixels from the top of the browser window)     * @param integer $width  The width attribute defines the width the element     * @param integer $height The height attribute defines the height the element     * @param string  $text   The text attribute defines the text the element     * @param string  $styles The style attribute defines the style the element     *  styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::text(), XMLWriter::endElement()     */    function printElement($name, $x, $y, $width = '', $height = '', $text = '', $styles = '')    {        $this->startElement($name);        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('x', $x);        $this->writeAttribute('y', $y);        $this->writeAttribute('style', $styles);        if (isset($text)) {            $this->writeAttribute('font-family', $this->font);            $this->writeAttribute('font-size', $this->fontSize);            $this->text($text);        }        $this->endElement();    }    /**     * Draws Svg Line element     *     * Svg line element is drawn for connecting the tables.     * arrows are also drawn by specify its start and ending     * co-ordinates     *     * @param string  $name   Svg element name i.e line     * @param integer $x1     Defines the start of the line on the x-axis     * @param integer $y1     Defines the start of the line on the y-axis     * @param integer $x2     Defines the end of the line on the x-axis     * @param integer $y2     Defines the end of the line on the y-axis     * @param string  $styles The style attribute defines the style the element     *                        styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::endElement()     */    function printElementLine($name,$x1,$y1,$x2,$y2,$styles)    {        $this->startElement($name);        $this->writeAttribute('x1', $x1);        $this->writeAttribute('y1', $y1);        $this->writeAttribute('x2', $x2);        $this->writeAttribute('y2', $y2);        $this->writeAttribute('style', $styles);        $this->endElement();    }    /**     * get width of string/text     *     * Svg text element width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other than this.     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in SVG XML document. * * @name Table_Stats * @see PMA_SVG */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             Font face     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current SVG image document     * @global integer   The current page number (from the     *                   $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     *     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,     *       Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber,    &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $svg, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : ''        ) . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font size     * @param integer $fontSize The font size     *     * @global object    The current SVG image document     *     * @return nothing     * @access private     *     * @see PMA_SVG     */    private function _setWidthTable($font,$fontSize)    {        global $svg;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $svg->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $svg->getStringWidth('  ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return nothing     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current SVG image document     *     * @access public     * @return nothing     *     * @see PMA_SVG,PMA_SVG::printElement     */    public function tableDraw($showColor)    {        global $svg;        //echo $this->_tableName.'<br />';        $svg->printElement(            'rect', $this->x, $this->y, $this->width,            $this->heightCell, null, 'fill:red;stroke:black;'        );        $svg->printElement(            'text', $this->x + 5, $this->y+ 14, $this->width, $this->heightCell,            $this->_getTitle(), 'fill:none;stroke:black;'        );        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $svg->printElement(                'rect', $this->x, $this->y + $this->currentCell, $this->width,                $this->heightCell, null, 'fill:'.$showColor.';stroke:black;'            );            $svg->printElement(                'text', $this->x + 5, $this->y + 14 + $this->currentCell,                $this->width, $this->heightCell, $field, 'fill:none;stroke:black;'            );        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in SVG XML document. * * @name Relation_Stats * @see PMA_SVG::printElementLine */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current SVG image document     *     * @return nothing     * @access public     *     * @see PMA_SVG     */    public function relationDraw($changeColor)    {        global $svg;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        $svg->printElementLine(            'line', $this->xSrc, $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick,            $this->yDest, $this->xDest, $this->yDest,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            $this->xDest + $this->destDir * $this->wTick, $this->yDest,            'fill:' . $color . ';stroke:' . $color . ';stroke-width:1;'        );        $root2 = 2 * sqrt(2);        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );    }}/** end of the "Relation_Stats" class*//** * Svg Relation Schema Class * * Purpose of this class is to generate the SVG XML Document because * SVG defines the graphics in XML format which is used for representing * the database diagrams as vector image. This class actually helps *  in preparing SVG XML format. * * SVG XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Svg_Relation_Schema */class PMA_Svg_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $t_marg = 10;    private $b_marg = 10;    private $l_marg = 10;    private $r_marg = 10;    private $_tablewidth;    /**     * The "PMA_Svg_Relation_Schema" constructor     *     * Upon instantiation This starts writing the SVG XML document     * user will be prompted for download as .svg extension     *     * @return void     * @see PMA_SVG     */    function __construct()    {        global $svg,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setExportType($_POST['export_type']);        $svg = new PMA_SVG();        $svg->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $svg->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $svg->setFont('Arial');        $svg->setFontSize('16px');        $svg->startSvgDoc('1000px', '1000px');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $svg->getFont(), $svg->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $svg->endSvgDoc();        $svg->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name     *     * @return nothing     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font face     * @param int     $fontSize     Font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     * @return nothing     *     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable,$font,$fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines     * connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return nothing     * @access private     *     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return nothing     * @access private     *     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/** * Functions used to generate GIS visualizations. * * @package PhpMyAdmin *//** * Returns a modified sql query with only the label column * and spatial column(wrapped with 'ASTEXT()' function). * * @param string $sql_query             original sql query * @param array  $visualizationSettings settings for the visualization * * @return the modified sql query. */function PMA_GIS_modifyQuery($sql_query, $visualizationSettings){    $modified_query = 'SELECT ';    $analyzed_query = PMA_SQP_analyze(PMA_SQP_parse($sql_query));    // If select clause is not *    if (trim($analyzed_query[0]['select_expr_clause']) != '*') {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            // Check to see whether an alias has been used on the label column            $is_label_alias = false;            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['alias'] == $visualizationSettings['labelColumn']) {                    $modified_query .= sanitize($select) . ' AS `'                    . $select['alias'] . '`, ';                    $is_label_alias = true;                    break;                }            }            // If no alias have been used on the label column            if (! $is_label_alias) {                foreach ($analyzed_query[0]['select_expr'] as $select) {                    if ($select['column'] == $visualizationSettings['labelColumn']) {                        $modified_query .= sanitize($select) . ', ';                    }                }            }        }        // Check to see whether an alias has been used on the spatial column        $is_spatial_alias = false;        foreach ($analyzed_query[0]['select_expr'] as $select) {            if ($select['alias'] == $visualizationSettings['spatialColumn']) {                $sanitized = sanitize($select);                $modified_query .= 'ASTEXT(' . $sanitized . ') AS `'                . $select['alias'] . '`, ';                // Get the SRID                $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                $is_spatial_alias = true;                break;            }        }        // If no alias have been used on the spatial column        if (! $is_spatial_alias) {            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['column'] == $visualizationSettings['spatialColumn']) {                    $sanitized = sanitize($select);                    $modified_query .= 'ASTEXT(' . $sanitized                        . ') AS `' . $select['column'] . '`, ';                    // Get the SRID                    $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                }            }        }        // If select cluase is *    } else {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            $modified_query .= '`' . $visualizationSettings['labelColumn'] .'`, ';        }        // Wrap the spatial column with 'ASTEXT()' function and add it        $modified_query .= 'ASTEXT(`' . $visualizationSettings['spatialColumn']            . '`) AS `' . $visualizationSettings['spatialColumn'] . '`, ';        // Get the SRID        $modified_query .= 'SRID(`' . $visualizationSettings['spatialColumn']            . '`) AS `srid` ';    }    // Append the rest of the query    $from_pos = stripos($sql_query, 'FROM');    $modified_query .= substr($sql_query, $from_pos);    return $modified_query;}// Local function to sanitize the expression taken// from the results of PMA_SQP_analyze function.function sanitize($select){    $table_col = $select['table_name'] . "." . $select['column'];    $db_table_col = $select['db'] . "." . $select['table_name']        . "." . $select['column'];    if ($select['expr'] == $select['column']) {        return "`" . $select['column'] . "`";    } elseif ($select['expr'] == $table_col) {        return "`" . $select['table_name'] . "`.`" . $select['column'] . "`";    } elseif ($select['expr'] == $db_table_col) {        return "`" . $select['db'] . "`.`" . $select['table_name']            . "`.`" . $select['column'] . "`";    }    return $select['expr'];}/** * Formats a visualization for the GIS query results. * * @param array  $data                   Data for the status chart * @param array  &$visualizationSettings Settings used to generate the chart * @param string $format                 Format of the visulaization * * @return string HTML and JS code for the GIS visualization */function PMA_GIS_visualizationResults($data, &$visualizationSettings, $format){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (! isset($data[0])) {        // empty data        return __('No data found for GIS visualization.');    } else {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($visualizationSettings != null) {            foreach ($visualization->getSettings() as $setting => $val) {                if (! isset($visualizationSettings[$setting])) {                    $visualizationSettings[$setting] = $val;                }            }        }        if ($format == 'svg') {            return $visualization->asSvg();        } elseif ($format == 'png') {            return $visualization->asPng();        } elseif ($format == 'ol') {            return $visualization->asOl();        }    }}/** * Generate visualization for the GIS query results and save it to a file. * * @param array  $data                  data for the status chart * @param array  $visualizationSettings settings used to generate the chart * @param string $format                format of the visulaization * @param string $fileName              file name * * @return file File containing the visualization */function PMA_GIS_saveToFile($data, $visualizationSettings, $format, $fileName){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (isset($data[0])) {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($format == 'svg') {            $visualization->toFileAsSvg($fileName);        } elseif ($format == 'png') {            $visualization->toFileAsPng($fileName);        } elseif ($format == 'pdf') {            $visualization->toFileAsPdf($fileName);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating lists of Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a list of items containing the relevant * information and some action links. * * @param    string   $type    One of ['routine'|'trigger'|'event'] * @param    array    $items   An array of items * * @return   string   HTML code of the list of items */function PMA_RTE_getList($type, $items){    global $table;    /**     * Conditional classes switch the list on or off     */    $class1 = 'hide';    $class2 = '';    if (! $items) {        $class1 = '';        $class2 = ' hide';    }    /**     * Generate output     */    $retval  = "<!-- LIST OF " . PMA_RTE_getWord('docu') . " START -->\n";    $retval .= "<fieldset>\n";    $retval .= "    <legend>\n";    $retval .= "        " . PMA_RTE_getWord('title') . "\n";    $retval .= "        " . PMA_showMySQLDocu('SQL-Syntax', PMA_RTE_getWord('docu')) . "\n";    $retval .= "    </legend>\n";    $retval .= "    <div class='$class1' id='nothing2display'>\n";    $retval .= "      " . PMA_RTE_getWord('nothing') . "\n";    $retval .= "    </div>\n";    $retval .= "    <table class='data$class2'>\n";    $retval .= "        <!-- TABLE HEADERS -->\n";    $retval .= "        <tr>\n";    switch ($type) {    case 'routine':        $retval .= "            <th>" . __('Name') . "</th>\n";        $retval .= "            <th colspan='4'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Type') . "</th>\n";        $retval .= "            <th>" . __('Returns') . "</th>\n";        break;    case 'trigger':        $retval .= "            <th>" . __('Name') . "</th>\n";        if (empty($table)) {            $retval .= "            <th>" . __('Table') . "</th>\n";        }        $retval .= "            <th colspan='3'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Time') . "</th>\n";        $retval .= "            <th>" . __('Event') . "</th>\n";        break;    case 'event':        $retval .= "            <th>" . __('Name') . "</th>\n";        $retval .= "            <th>" . __('Status') . "</th>\n";        $retval .= "            <th colspan='3'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Type') . "</th>\n";        break;    default:        break;    }    $retval .= "        </tr>\n";    $retval .= "        <!-- TABLE DATA -->\n";    $ct = 0;    foreach ($items as $item) {        $rowclass = ($ct % 2 == 0) ? 'odd' : 'even';        if ($GLOBALS['is_ajax_request']) {            $rowclass .= ' ajaxInsert hide';        }        // Get each row from the correct function        switch ($type) {        case 'routine':            $retval .= PMA_RTN_getRowForList($item, $rowclass);            break;        case 'trigger':            $retval .= PMA_TRI_getRowForList($item, $rowclass);            break;        case 'event':            $retval .= PMA_EVN_getRowForList($item, $rowclass);            break;        default:            break;        }        $ct++;    }    $retval .= "    </table>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- LIST OF " . PMA_RTE_getWord('docu') . " END -->\n";    return $retval;} // end PMA_RTE_getList()/** * Creates the contents for a row in the list of routines * * @param    array    $routine    An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a row for the list of routines */function PMA_RTN_getRowForList($routine, $rowclass = ''){    global $ajax_class, $url_query, $db, $titles;    $sql_drop = sprintf('DROP %s IF EXISTS %s',                         $routine['ROUTINE_TYPE'],                         PMA_backquote($routine['SPECIFIC_NAME']));    $type_link = "item_type={$routine['ROUTINE_TYPE']}";    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>$sql_drop</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($routine['SPECIFIC_NAME']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if ($routine['ROUTINE_DEFINITION'] !== null        && PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)        && PMA_currentUserHasPrivilege('CREATE ROUTINE', $db)    ) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_routines.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                         . '&amp;' . $type_link                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if ($routine['ROUTINE_DEFINITION'] !== null        && PMA_currentUserHasPrivilege('EXECUTE', $db)    ) {        // Check if he routine has any input parameters. If it does,        // we will show a dialog to get values for these parameters,        // otherwise we can execute it directly.        $routine_details = PMA_RTN_getDataFromName(            $routine['SPECIFIC_NAME'],            $routine['ROUTINE_TYPE'],            false        );        if ($routine !== false) {            $execute_action = 'execute_routine';            for ($i=0; $i<$routine_details['item_num_params']; $i++) {                if ($routine_details['item_type'] == 'PROCEDURE'                    && $routine_details['item_param_dir'][$i] == 'OUT'                ) {                    continue;                }                $execute_action = 'execute_dialog';                break;            }            $retval .= '                <a ' . $ajax_class['exec']                                             . ' href="db_routines.php?'                                             . $url_query                                             . '&amp;' . $execute_action . '=1'                                             . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                             . '&amp;' . $type_link                                             . '">' . $titles['Execute'] . "</a>\n";        }    } else {        $retval .= "                {$titles['NoExecute']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                <a ' . $ajax_class['export']                                     . ' href="db_routines.php?'                                     . $url_query                                     . '&amp;export_item=1'                                     . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                     . '&amp;' . $type_link                                     . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($sql_drop)                                         . '&amp;goto=db_routines.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$routine['ROUTINE_TYPE']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                " . htmlspecialchars($routine['DTD_IDENTIFIER']) . "\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getRowForList()/** * Creates the contents for a row in the list of triggers * * @param    array    $trigger    An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a cell for the list of triggers */function PMA_TRI_getRowForList($trigger, $rowclass = ''){    global $ajax_class, $url_query, $db, $table, $titles;    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>{$trigger['drop']}</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($trigger['name']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    if (empty($table)) {        $retval .= "            <td>\n";        $retval .= "                <a href='db_triggers.php?db={$db}"                                     . "&amp;table={$trigger['table']}'>"                                     . $trigger['table'] . "</a>\n";        $retval .= "            </td>\n";    }    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table)) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_triggers.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($trigger['name'])                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                    <a ' . $ajax_class['export']                                         . ' href="db_triggers.php?'                                         . $url_query                                         . '&amp;export_item=1'                                         . '&amp;item_name=' . urlencode($trigger['name'])                                         . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($trigger['drop'])                                         . '&amp;goto=db_triggers.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$trigger['action_timing']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$trigger['event_manipulation']}\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_TRI_getRowForList()/** * Creates the contents for a row in the list of events * * @param    array    $event      An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a cell for the list of events */function PMA_EVN_getRowForList($event, $rowclass = ''){    global $ajax_class, $url_query, $db, $titles;    $sql_drop = sprintf(        'DROP EVENT IF EXISTS %s',        PMA_backquote($event['EVENT_NAME'])    );    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>$sql_drop</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($event['EVENT_NAME']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$event['STATUS']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('EVENT', $db)) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_events.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($event['EVENT_NAME'])                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                <a ' . $ajax_class['export']                                     . ' href="db_events.php?'                                     . $url_query                                     . '&amp;export_item=1'                                     . '&amp;item_name=' . urlencode($event['EVENT_NAME'])                                     . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('EVENT', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($sql_drop)                                         . '&amp;goto=db_events.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$event['EVENT_TYPE']}\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_EVN_getRowForList()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';extract($_POST, EXTR_SKIP);extract($_GET, EXTR_SKIP);$die_save_pos = 0;require_once 'pmd_save_pos.php';list($DB1, $T1) = explode(".", $T1);list($DB2, $T2) = explode(".", $T2);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);$try_to_delete_internal_relation = false;if (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // InnoDB    $existrel_foreign = PMA_getForeigners($DB2, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2]['constraint'])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                  . ' DROP FOREIGN KEY '                  . PMA_backquote($existrel_foreign[$F2]['constraint']);        $upd_rs     = PMA_DBI_query($upd_query);    } else {        // there can be an internal relation even if InnoDB        $try_to_delete_internal_relation = true;    }} else {    $try_to_delete_internal_relation = true;}if ($try_to_delete_internal_relation) {    // internal relations    PMA_query_as_controluser(        'DELETE FROM '        . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'        . $cfg['Server']['relation'].' WHERE '        . 'master_db = \'' . PMA_sqlAddSlashes($DB2) . '\''        . ' AND master_table = \'' . PMA_sqlAddSlashes($T2) . '\''        . ' AND master_field = \'' . PMA_sqlAddSlashes($F2) . '\''        . ' AND foreign_db = \'' . PMA_sqlAddSlashes($DB1) . '\''        . ' AND foreign_table = \'' . PMA_sqlAddSlashes($T1) . '\''        . ' AND foreign_field = \'' . PMA_sqlAddSlashes($F1) . '\'',        false,        PMA_DBI_QUERY_STORE    );}PMD_return_upd(1, __('Relation deleted'));function PMD_return_upd($b, $ret){    global $K;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_upd" return="'.$ret.'" b="'.$b.'" K="'.$K.'"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=view_operations.php&amp;back=view_operations.php';$url_params['goto'] = $url_params['back'] = 'view_operations.php';/** * Gets tables informations */require './libraries/tbl_info.inc.php';$reread_info = false;/** * Updates if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'], null, $is_view = true)) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (isset($result)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? __('Your SQL query has been executed successfully') : __('Error');        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type, $is_view = true);    unset($_message, $_type);}$url_params['goto'] = 'view_operations.php';$url_params['back'] = 'view_operations.php';/** * Displays the page */?><!-- Table operations --><div class="operations_half_width"><form method="post" action="view_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Operations'); ?></legend>    <table>    <!-- Change view name -->    <tr><td><?php echo __('Rename view to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used for cleaning up phpMyAdmin tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Cleanu column related relation stuff * * @param string $db * @param string $table * @param string $column */function PMA_relationsCleanupColumn($db, $table, $column){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND column_name = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND display_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND master_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND foreign_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup table related relation stuff * * @param string $db * @param string $table */function PMA_relationsCleanupTable($db, $table){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup database related relation stuff * * @param string $db */function PMA_relationsCleanupDatabase($db){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['bookmarkwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['bookmark'])                    . ' WHERE dbase  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);     }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This function is used to retreive some language strings that are used * in functionalities that are common to routines, triggers and events. * * @param   string  $index   The index of the string to get * * @return  string  The requested string or an empty string, if not available */function PMA_RTE_getWord($index){    global $_PMA_RTE;    switch ($_PMA_RTE) {    case 'RTN':        $words = array(            'add'       => __('Add routine'),            'docu'      => 'STORED_ROUTINES',            'export'    => __('Export of routine %s'),            'human'     => __('routine'),            'no_create' => __('You do not have the necessary privileges to create a routine'),            'not_found' => __('No routine with name %1$s found in database %2$s'),            'nothing'   => __('There are no routines to display.'),            'title'     => __('Routines'),        );        break;    case 'TRI':        $words = array(            'add'       => __('Add trigger'),            'docu'      => 'TRIGGERS',            'export'    => __('Export of trigger %s'),            'human'     => __('trigger'),            'no_create' => __('You do not have the necessary privileges to create a trigger'),            'not_found' => __('No trigger with name %1$s found in database %2$s'),            'nothing'   => __('There are no triggers to display.'),            'title'     => __('Triggers'),        );        break;    case 'EVN':        $words = array(            'add'       => __('Add event'),            'docu'      => 'EVENTS',            'export'    => __('Export of event %s'),            'human'     => __('event'),            'no_create' => __('You do not have the necessary privileges to create an event'),            'not_found' => __('No event with name %1$s found in database %2$s'),            'nothing'   => __('There are no events to display.'),            'title'     => __('Events'),        );        break;    default:        $words = array();        break;    }    return isset($words[$index]) ? $words[$index] : '';} // end PMA_RTE_getWord()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/Message.class.php';/** * Handles the recently used tables. * * @TODO Change the release version in table pma_recent (#recent in Documentation.html) * * @package PhpMyAdmin */class PMA_RecentTable{    /**     * Defines the internal PMA table which contains recent tables.     *     * @access  private     * @var string     */    private $pma_table;    /**     * Reference to session variable containing recently used tables.     *     * @access public     * @var array     */    public $tables;    /**     * PMA_RecentTable instance.     *     * @var PMA_RecentTable     */    private static $_instance;    public function __construct()    {        if (strlen($GLOBALS['cfg']['Server']['pmadb']) &&            strlen($GLOBALS['cfg']['Server']['recent'])) {            $this->pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                               PMA_backquote($GLOBALS['cfg']['Server']['recent']);        }        $server_id = $GLOBALS['server'];        if (! isset($_SESSION['tmp_user_values']['recent_tables'][$server_id])) {            $_SESSION['tmp_user_values']['recent_tables'][$server_id] =                isset($this->pma_table) ? $this->getFromDb() : array();        }        $this->tables =& $_SESSION['tmp_user_values']['recent_tables'][$server_id];    }    /**     * Returns class instance.     *     * @return PMA_RecentTable     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new PMA_RecentTable();        }        return self::$_instance;    }    /**     * Returns recently used tables from phpMyAdmin database.     *     *     * @return array     */    public function getFromDb()    {        // Read from phpMyAdmin database, if recent tables is not in session        $sql_query            = " SELECT `tables` FROM " . $this->pma_table .            " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save recent tables into phpMyAdmin database.     *     *     * @return true|PMA_Message     */    public function saveToDb()    {        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query            = " REPLACE INTO " . $this->pma_table . " (`username`, `tables`)" .            " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes(json_encode($this->tables)) . "')";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save recent table'));            $message->addMessage('<br /><br />');            $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));            return $message;        }        return true;    }    /**     * Trim recent table according to the LeftRecentTable configuration.     *     * @return boolean True if trimming occurred     */    public function trim()    {        $max = max($GLOBALS['cfg']['LeftRecentTable'], 0);        $trimming_occured = count($this->tables) > $max;        while (count($this->tables) > $max) {            array_pop($this->tables);        }        return $trimming_occured;    }    /**     * Return options for HTML select.     *     * @return string     */    public function getHtmlSelectOption()    {        // trim and save, in case where the configuration is changed        if ($this->trim() && isset($this->pma_table)) {            $this->saveToDb();        }        $html = '<option value="">(' . __('Recent tables') . ') ...</option>';        if (count($this->tables)) {            foreach ($this->tables as $table) {                $html .= '<option value="' . htmlspecialchars(json_encode($table)) . '">' .                         htmlspecialchars('`' . $table['db'] . '`.`' . $table['table'] . '`') . '</option>';            }        } else {            $html .= '<option value="">' . __('There are no recent tables') . '</option>';        }        return $html;    }    /**     * Return HTML select.     *     * @return string     */    public function getHtmlSelect()    {        $html  = '<input type="hidden" name="goto" id="LeftDefaultTabTable" value="' .                         htmlspecialchars($GLOBALS['cfg']['LeftDefaultTabTable']) . '" />';        $html .= '<select name="selected_recent_table" id="recentTable">';        $html .= $this->getHtmlSelectOption();        $html .= '</select>';        return $html;    }    /**     * Add recently used tables.     *     * @param string $db Database name where the table is located     * @param string $table Table name     *     * @return true|PMA_Message True if success, PMA_Message if not     */    public function add($db, $table)    {        $table_arr = array();        $table_arr['db'] = $db;        $table_arr['table'] = $table;        // add only if this is new table        if (! isset($this->tables[0]) || $this->tables[0] != $table_arr) {            array_unshift($this->tables, $table_arr);            $this->tables = array_merge(array_unique($this->tables, SORT_REGULAR));            $this->trim();            if (isset($this->pma_table)) {                return $this->saveToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for the export functionality for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * This function is called from one of the other functions in this file * and it completes the handling of the export functionality. * * @param  string  $item_name    The name of the item that we are exporting * @param  string  $export_data  The SQL query to create the requested item */function PMA_RTE_handleExport($item_name, $export_data){    global $db;    $item_name = htmlspecialchars(PMA_backquote($_GET['item_name']));    if ($export_data !== false) {        $export_data = '<textarea cols="40" rows="15" style="width: 100%;">'                     . htmlspecialchars(trim($export_data)) . '</textarea>';        $title = sprintf(PMA_RTE_getWord('export'), $item_name);        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data = array('title' => $title);            PMA_ajaxResponse($export_data, true, $extra_data);        } else {            echo "<fieldset>\n"               . "<legend>$title</legend>\n"               . $export_data               . "</fieldset>\n";        }    } else {        $_db = htmlspecialchars(PMA_backquote($db));        $response = __('Error in Processing Request') . ' : '                  . sprintf(PMA_RTE_getWord('not_found'), $item_name, $_db);        $response = PMA_message::error($response);        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($response, false);        } else {            $response->display();        }    }} // end PMA_RTE_handleExport()/** * If necessary, prepares event information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_EVN_handleExport(){    global $_GET, $db;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $export_data = PMA_DBI_get_definition($db, 'EVENT', $item_name);        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_EVN_handleExport()/** * If necessary, prepares routine information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_RTN_handleExport(){    global $_GET, $db;    if (   ! empty($_GET['export_item'])        && ! empty($_GET['item_name'])        && ! empty($_GET['item_type'])    ) {        if ($_GET['item_type'] == 'FUNCTION' || $_GET['item_type'] == 'PROCEDURE') {            $export_data = PMA_DBI_get_definition(                $db,                $_GET['item_type'],                $_GET['item_name']);            PMA_RTE_handleExport($_GET['item_name'], $export_data);        }    }} // end PMA_RTN_handleExport()/** * If necessary, prepares trigger information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_TRI_handleExport(){    global $_GET, $db, $table;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $triggers = PMA_DBI_get_triggers($db, $table, '');        $export_data = false;        foreach ($triggers as $trigger) {            if ($trigger['name'] === $item_name) {                $export_data = $trigger['create'];                break;            }        }        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_TRI_handleExport()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin *//** * returns array of options from string with options separated by comma, removes quotes * * <code> * PMA_transformation_getOptions("'option ,, quoted',abd,'2,3',"); * // array { * //     'option ,, quoted', * //     'abc', * //     '2,3', * //     '', * // } * </code> * * @param string $option_string comma separated options * * @return array options */function PMA_transformation_getOptions($option_string){    $result = array();    if (! strlen($option_string)        || ! $transform_options = preg_split('/,/', $option_string)    ) {        return $result;    }    while (($option = array_shift($transform_options)) !== null) {        $trimmed = trim($option);        if (strlen($trimmed) > 1            && $trimmed[0] == "'"            && $trimmed[strlen($trimmed) - 1] == "'"        ) {            // '...'            $option = substr($trimmed, 1, -1);        } elseif (isset($trimmed[0]) && $trimmed[0] == "'") {            // '...,            $trimmed = ltrim($option);            while (($option = array_shift($transform_options)) !== null) {                // ...,                $trimmed .= ',' . $option;                $rtrimmed = rtrim($trimmed);                if ($rtrimmed[strlen($rtrimmed) - 1] == "'") {                    // ,...'                    break;                }            }            $option = substr($rtrimmed, 1, -1);        }        $result[] = stripslashes($option);    }    return $result;}/** * Gets all available MIME-types * * @access  public * @staticvar   array   mimetypes * @return  array    array[mimetype], array[transformation] */function PMA_getAvailableMIMEtypes(){    static $stack = null;    if (null !== $stack) {        return $stack;    }    $stack = array();    $filestack = array();    $handle = opendir('./libraries/transformations');    if (! $handle) {        return $stack;    }    while ($file = readdir($handle)) {        $filestack[] = $file;    }    closedir($handle);    sort($filestack);    foreach ($filestack as $file) {        if (preg_match('|^.*__.*\.inc\.php$|', $file)) {            // File contains transformation functions.            $base = explode('__', str_replace('.inc.php', '', $file));            $mimetype = str_replace('_', '/', $base[0]);            $stack['mimetype'][$mimetype] = $mimetype;            $stack['transformation'][] = $mimetype . ': ' . $base[1];            $stack['transformation_file'][] = $file;        } elseif (preg_match('|^.*\.inc\.php$|', $file)) {            // File is a plain mimetype, no functions.            $base = str_replace('.inc.php', '', $file);            if ($base != 'global') {                $mimetype = str_replace('_', '/', $base);                $stack['mimetype'][$mimetype] = $mimetype;                $stack['empty_mimetype'][$mimetype] = $mimetype;            }        }    }    return $stack;}/** * Returns the description of the transformation * * @param string $file           transformation file * @param string $html_formatted whether the description should be formatted as HTML * * @return the description of the transformation */function PMA_getTransformationDescription($file, $html_formatted = true){    include_once './libraries/transformations/' . $file;    $func = strtolower(str_replace('.inc.php', '', $file));    $funcname = 'PMA_transformation_' . $func . '_info';    $desc = sprintf(__('No description is available for this transformation.<br />Please ask the author what %s does.'), 'PMA_transformation_' . $func . '()');    if ($html_formatted) {        $desc = '<i>' . $desc . '</i>';    } else {        $desc = str_replace('<br />', ' ', $desc);    }    if (function_exists($funcname)) {        $desc_arr = $funcname();        if (isset($desc_arr['info'])) {            $desc = $desc_arr['info'];        }    }    return $desc;}/** * Gets the mimetypes for all columns of a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $strict whether to include only results having a mimetype set * * @access  public * * @return array [field_name][field_key] = field_value */function PMA_getMIME($db, $table, $strict = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $com_qry  = '         SELECT `column_name`,                `mimetype`,                `transformation`,                `transformation_options`         FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '         WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'           AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'           AND ( `mimetype` != \'\'' . (!$strict ? '              OR `transformation` != \'\'              OR `transformation_options` != \'\'' : '') . ')';    return PMA_DBI_fetch_result($com_qry, 'column_name', null, $GLOBALS['controllink']);} // end of the 'PMA_getMIME()' function/** * Set a single mimetype to a certain value. * * @param string $db                     the name of the db * @param string $table                  the name of the table * @param string $key                    the name of the column * @param string $mimetype               the mimetype of the column * @param string $transformation         the transformation of the column * @param string $transformation_options the transformation options of the column * @param string $forcedelete            force delete, will erase any existing *                                       comments for this column * * @access  public * * @return  boolean  true, if comment-query was made. */function PMA_setMIME($db, $table, $key, $mimetype, $transformation,    $transformation_options, $forcedelete = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $test_qry  = '         SELECT `mimetype`,                `comment`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '          WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'            AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'            AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    $test_rs   = PMA_query_as_controluser($test_qry, true, PMA_DBI_QUERY_STORE);    if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {        $row = @PMA_DBI_fetch_assoc($test_rs);        PMA_DBI_free_result($test_rs);        if (! $forcedelete            && (strlen($mimetype) || strlen($transformation)            || strlen($transformation_options) || strlen($row['comment']))        ) {            $upd_query = '                UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                   SET `mimetype`               = \'' . PMA_sqlAddSlashes($mimetype) . '\',                       `transformation`         = \'' . PMA_sqlAddSlashes($transformation) . '\',                       `transformation_options` = \'' . PMA_sqlAddSlashes($transformation_options) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']);        }        $upd_query .= '            WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'              AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'              AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    } elseif (strlen($mimetype) || strlen($transformation)     || strlen($transformation_options)) {        $upd_query = 'INSERT INTO ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                   . ' (db_name, table_name, column_name, mimetype, transformation, transformation_options) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($key) . '\','                   . '\'' . PMA_sqlAddSlashes($mimetype) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation_options) . '\')';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    } else {        return false;    }} // end of 'PMA_setMIME()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build YAML dumps of tables * * @package PhpMyAdmin-Export * @subpackage YAML */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['yaml'] = array(        'text'          => 'YAML',        'extension'     => 'yml',        'mime_type'     => 'text/yaml',        'force_file'    => true,        'options'       => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),            array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        PMA_exportOutputHandler('...' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler('%YAML 1.1' . $GLOBALS['crlf'] . '---' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in YAML format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer = '# ' . $db . '.' . $table . $crlf;                $buffer .= '-' . $crlf;            } else {                $buffer = '-' . $crlf;            }            for ($i = 0; $i < $columns_cnt; $i++) {                if (! isset($record[$i])) {                    continue;                }                $column = $columns[$i];                if (is_null($record[$i])) {                    $buffer .= '  ' . $column . ': null' . $crlf;                    continue;                }                if (is_numeric($record[$i])) {                    $buffer .= '  ' . $column . ': '  . $record[$i] . $crlf;                    continue;                }                $record[$i] = str_replace(array('\\', '"', "\n", "\r"), array('\\\\', '\"', '\n', '\r'), $record[$i]);                $buffer .= '  ' . $column . ': "' . $record[$i] . '"' . $crlf;            }            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        PMA_DBI_free_result($result);        return true;    }}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=720012;$enc='';$file='dejavusans.z';$ctg='dejavusans.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1021 -415 1681 1167]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>34,'StemH'=>15,'AvgWidth'=>507,'MaxWidth'=>1735,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>318,33=>401,34=>460,35=>838,36=>636,37=>950,38=>780,39=>275,40=>390,41=>390,42=>500,43=>838,44=>318,45=>361,46=>318,47=>337,48=>636,49=>636,50=>636,51=>636,52=>636,53=>636,54=>636,55=>636,56=>636,57=>636,58=>337,59=>337,60=>838,61=>838,62=>838,63=>531,64=>1000,65=>684,66=>686,67=>698,68=>770,69=>632,70=>575,71=>775,72=>752,73=>295,74=>295,75=>656,76=>557,77=>863,78=>748,79=>787,80=>603,81=>787,82=>695,83=>635,84=>611,85=>732,86=>684,87=>989,88=>685,89=>611,90=>685,91=>390,92=>337,93=>390,94=>838,95=>500,96=>500,97=>613,98=>635,99=>550,100=>635,101=>615,102=>352,103=>635,104=>634,105=>278,106=>278,107=>579,108=>278,109=>974,110=>634,111=>612,112=>635,113=>635,114=>411,115=>521,116=>392,117=>634,118=>592,119=>818,120=>592,121=>592,122=>525,123=>636,124=>337,125=>636,126=>838,127=>600,128=>684,129=>684,130=>698,131=>632,132=>748,133=>787,134=>732,135=>613,136=>613,137=>613,138=>613,139=>613,140=>613,141=>550,142=>615,143=>615,144=>615,145=>615,146=>278,147=>278,148=>278,149=>278,150=>634,151=>612,152=>612,153=>612,154=>612,155=>612,156=>634,157=>634,158=>634,159=>634,160=>318,161=>401,162=>636,163=>636,164=>636,165=>636,166=>337,167=>500,168=>500,169=>1000,170=>471,171=>612,172=>838,173=>361,174=>1000,175=>500,176=>500,177=>838,178=>401,179=>401,180=>500,181=>636,182=>636,183=>318,184=>500,185=>401,186=>471,187=>612,188=>969,189=>969,190=>969,191=>531,192=>684,193=>684,194=>684,195=>684,196=>684,197=>684,198=>974,199=>698,200=>632,201=>632,202=>632,203=>632,204=>295,205=>295,206=>295,207=>295,208=>775,209=>748,210=>787,211=>787,212=>787,213=>787,214=>787,215=>838,216=>787,217=>732,218=>732,219=>732,220=>732,221=>611,222=>605,223=>630,224=>613,225=>613,226=>613,227=>613,228=>613,229=>613,230=>982,231=>550,232=>615,233=>615,234=>615,235=>615,236=>278,237=>278,238=>278,239=>278,240=>612,241=>634,242=>612,243=>612,244=>612,245=>612,246=>612,247=>838,248=>612,249=>634,250=>634,251=>634,252=>634,253=>592,254=>635,255=>592,256=>684,257=>613,258=>684,259=>613,260=>684,261=>613,262=>698,263=>550,264=>698,265=>550,266=>698,267=>550,268=>698,269=>550,270=>770,271=>635,272=>775,273=>635,274=>632,275=>615,276=>632,277=>615,278=>632,279=>615,280=>632,281=>615,282=>632,283=>615,284=>775,285=>635,286=>775,287=>635,288=>775,289=>635,290=>775,291=>635,292=>752,293=>634,294=>916,295=>695,296=>295,297=>278,298=>295,299=>278,300=>295,301=>278,302=>295,303=>278,304=>295,305=>278,306=>590,307=>556,308=>295,309=>278,310=>656,311=>579,312=>579,313=>557,314=>278,315=>557,316=>278,317=>557,318=>375,319=>557,320=>342,321=>562,322=>284,323=>748,324=>634,325=>748,326=>634,327=>748,328=>634,329=>813,330=>748,331=>634,332=>787,333=>612,334=>787,335=>612,336=>787,337=>612,338=>1070,339=>1023,340=>695,341=>411,342=>695,343=>411,344=>695,345=>411,346=>635,347=>521,348=>635,349=>521,350=>635,351=>521,352=>635,353=>521,354=>611,355=>392,356=>611,357=>392,358=>611,359=>392,360=>732,361=>634,362=>732,363=>634,364=>732,365=>634,366=>732,367=>634,368=>732,369=>634,370=>732,371=>634,372=>989,373=>818,374=>611,375=>592,376=>611,377=>685,378=>525,379=>685,380=>525,381=>685,382=>525,383=>352,384=>635,385=>735,386=>686,387=>635,388=>686,389=>635,390=>703,391=>698,392=>550,393=>775,394=>819,395=>686,396=>635,397=>612,398=>632,399=>787,400=>614,401=>575,402=>352,403=>775,404=>687,405=>984,406=>354,407=>295,408=>746,409=>579,410=>278,411=>592,412=>974,413=>748,414=>634,415=>787,416=>913,417=>612,418=>949,419=>759,420=>652,421=>635,422=>695,423=>635,424=>521,425=>632,426=>336,427=>392,428=>611,429=>392,430=>611,431=>858,432=>634,433=>764,434=>721,435=>744,436=>730,437=>685,438=>525,439=>666,440=>666,441=>578,442=>525,443=>636,444=>666,445=>578,446=>510,447=>635,448=>295,449=>492,450=>459,451=>295,452=>1422,453=>1299,454=>1154,455=>835,456=>787,457=>457,458=>931,459=>924,460=>797,461=>684,462=>613,463=>295,464=>278,465=>787,466=>612,467=>732,468=>634,469=>732,470=>634,471=>732,472=>634,473=>732,474=>634,475=>732,476=>634,477=>615,478=>684,479=>613,480=>684,481=>613,482=>974,483=>982,484=>775,485=>635,486=>775,487=>635,488=>656,489=>579,490=>787,491=>612,492=>787,493=>612,494=>666,495=>578,496=>278,497=>1422,498=>1299,499=>1154,500=>775,501=>635,502=>1113,503=>682,504=>748,505=>634,506=>684,507=>613,508=>974,509=>982,510=>787,511=>612,512=>684,513=>613,514=>684,515=>613,516=>632,517=>615,518=>632,519=>615,520=>295,521=>278,522=>295,523=>278,524=>787,525=>612,526=>787,527=>612,528=>695,529=>411,530=>695,531=>411,532=>732,533=>634,534=>732,535=>634,536=>635,537=>521,538=>611,539=>392,540=>627,541=>521,542=>752,543=>634,544=>735,545=>838,546=>698,547=>610,548=>685,549=>525,550=>684,551=>613,552=>632,553=>615,554=>787,555=>612,556=>787,557=>612,558=>787,559=>612,560=>787,561=>612,562=>611,563=>592,564=>475,565=>843,566=>477,567=>278,568=>998,569=>998,570=>684,571=>698,572=>550,573=>557,574=>611,575=>521,576=>525,577=>603,578=>479,579=>686,580=>732,581=>684,582=>632,583=>615,584=>295,585=>278,586=>781,587=>635,588=>695,589=>411,590=>611,591=>592,592=>600,593=>635,594=>635,595=>635,596=>549,597=>550,598=>635,599=>696,600=>615,601=>615,602=>819,603=>541,604=>532,605=>775,606=>664,607=>278,608=>696,609=>635,610=>629,611=>596,612=>596,613=>634,614=>634,615=>634,616=>278,617=>338,618=>372,619=>396,620=>487,621=>278,622=>706,623=>974,624=>974,625=>974,626=>646,627=>642,628=>634,629=>612,630=>858,631=>728,632=>660,633=>414,634=>414,635=>414,636=>411,637=>411,638=>530,639=>530,640=>604,641=>604,642=>521,643=>336,644=>336,645=>461,646=>336,647=>392,648=>392,649=>634,650=>618,651=>598,652=>592,653=>818,654=>592,655=>611,656=>525,657=>525,658=>578,659=>578,660=>510,661=>510,662=>510,663=>510,664=>787,665=>580,666=>664,667=>708,668=>654,669=>292,670=>667,671=>507,672=>727,673=>510,674=>510,675=>1014,676=>1058,677=>1013,678=>824,679=>610,680=>778,681=>848,682=>641,683=>654,684=>515,685=>515,686=>661,687=>664,688=>404,689=>399,690=>175,691=>259,692=>295,693=>296,694=>379,695=>515,696=>373,697=>278,698=>460,699=>318,700=>318,701=>318,702=>307,703=>307,704=>370,705=>370,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>275,713=>500,714=>500,715=>500,716=>275,717=>500,718=>500,719=>500,720=>337,721=>337,722=>307,723=>307,724=>500,725=>500,726=>390,727=>317,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>315,735=>500,736=>426,737=>166,738=>373,739=>444,740=>370,741=>493,742=>493,743=>493,744=>493,745=>493,748=>500,749=>500,750=>518,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>654,881=>568,882=>862,883=>647,884=>278,885=>278,886=>748,887=>650,890=>500,891=>549,892=>550,893=>549,894=>337,900=>500,901=>500,902=>692,903=>318,904=>746,905=>871,906=>408,908=>813,910=>825,911=>826,912=>338,913=>684,914=>686,915=>557,916=>684,917=>632,918=>685,919=>752,920=>787,921=>295,922=>656,923=>684,924=>863,925=>748,926=>632,927=>787,928=>752,929=>603,931=>632,932=>611,933=>611,934=>787,935=>685,936=>787,937=>764,938=>295,939=>611,940=>659,941=>541,942=>634,943=>338,944=>579,945=>659,946=>638,947=>592,948=>612,949=>541,950=>544,951=>634,952=>612,953=>338,954=>589,955=>592,956=>636,957=>559,958=>558,959=>612,960=>602,961=>635,962=>587,963=>634,964=>602,965=>579,966=>660,967=>578,968=>660,969=>837,970=>338,971=>579,972=>612,973=>579,974=>837,975=>656,976=>614,977=>619,978=>699,979=>842,980=>699,981=>660,982=>837,983=>664,984=>787,985=>612,986=>648,987=>587,988=>575,989=>458,990=>660,991=>660,992=>865,993=>627,994=>934,995=>837,996=>758,997=>659,998=>792,999=>615,1000=>687,1001=>607,1002=>768,1003=>625,1004=>699,1005=>612,1006=>611,1007=>536,1008=>664,1009=>635,1010=>550,1011=>278,1012=>787,1013=>615,1014=>615,1015=>605,1016=>635,1017=>698,1018=>863,1019=>651,1020=>635,1021=>703,1022=>698,1023=>703,1024=>632,1025=>632,1026=>786,1027=>610,1028=>698,1029=>635,1030=>295,1031=>295,1032=>295,1033=>1094,1034=>1045,1035=>786,1036=>710,1037=>748,1038=>609,1039=>752,1040=>684,1041=>686,1042=>686,1043=>610,1044=>781,1045=>632,1046=>1077,1047=>641,1048=>748,1049=>748,1050=>710,1051=>752,1052=>863,1053=>752,1054=>787,1055=>752,1056=>603,1057=>698,1058=>611,1059=>609,1060=>861,1061=>685,1062=>776,1063=>686,1064=>1069,1065=>1094,1066=>833,1067=>882,1068=>686,1069=>698,1070=>1080,1071=>695,1072=>613,1073=>617,1074=>589,1075=>525,1076=>691,1077=>615,1078=>901,1079=>532,1080=>650,1081=>650,1082=>604,1083=>639,1084=>754,1085=>654,1086=>612,1087=>654,1088=>635,1089=>550,1090=>583,1091=>592,1092=>855,1093=>592,1094=>681,1095=>591,1096=>915,1097=>942,1098=>707,1099=>790,1100=>589,1101=>549,1102=>842,1103=>602,1104=>615,1105=>615,1106=>625,1107=>525,1108=>549,1109=>521,1110=>278,1111=>278,1112=>278,1113=>902,1114=>898,1115=>652,1116=>604,1117=>650,1118=>592,1119=>654,1120=>934,1121=>837,1122=>771,1123=>672,1124=>942,1125=>749,1126=>879,1127=>783,1128=>1160,1129=>1001,1130=>787,1131=>612,1132=>1027,1133=>824,1134=>636,1135=>541,1136=>856,1137=>876,1138=>787,1139=>612,1140=>781,1141=>665,1142=>781,1143=>665,1144=>992,1145=>904,1146=>953,1147=>758,1148=>1180,1149=>1028,1150=>934,1151=>837,1152=>698,1153=>550,1154=>502,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>772,1163=>677,1164=>686,1165=>589,1166=>603,1167=>635,1168=>610,1169=>525,1170=>675,1171=>590,1172=>624,1173=>530,1174=>1077,1175=>901,1176=>641,1177=>532,1178=>710,1179=>604,1180=>710,1181=>604,1182=>710,1183=>604,1184=>856,1185=>832,1186=>752,1187=>661,1188=>1014,1189=>877,1190=>1081,1191=>916,1192=>878,1193=>693,1194=>698,1195=>550,1196=>611,1197=>583,1198=>611,1199=>592,1200=>611,1201=>592,1202=>685,1203=>592,1204=>934,1205=>807,1206=>686,1207=>591,1208=>686,1209=>591,1210=>686,1211=>634,1212=>941,1213=>728,1214=>941,1215=>728,1216=>295,1217=>1077,1218=>901,1219=>656,1220=>604,1221=>776,1222=>670,1223=>752,1224=>661,1225=>776,1226=>681,1227=>686,1228=>591,1229=>888,1230=>774,1231=>278,1232=>684,1233=>613,1234=>684,1235=>613,1236=>974,1237=>982,1238=>632,1239=>615,1240=>787,1241=>615,1242=>787,1243=>615,1244=>1077,1245=>901,1246=>641,1247=>532,1248=>666,1249=>578,1250=>748,1251=>650,1252=>748,1253=>650,1254=>787,1255=>612,1256=>787,1257=>612,1258=>787,1259=>612,1260=>698,1261=>549,1262=>609,1263=>592,1264=>609,1265=>592,1266=>609,1267=>592,1268=>686,1269=>591,1270=>610,1271=>525,1272=>882,1273=>790,1274=>675,1275=>590,1276=>685,1277=>592,1278=>685,1279=>592,1280=>686,1281=>589,1282=>1006,1283=>897,1284=>975,1285=>869,1286=>679,1287=>588,1288=>1072,1289=>957,1290=>1113,1291=>967,1292=>775,1293=>660,1294=>773,1295=>711,1296=>614,1297=>541,1298=>752,1299=>639,1300=>1169,1301=>994,1302=>894,1303=>864,1304=>1032,1305=>986,1306=>787,1307=>635,1308=>989,1309=>818,1310=>710,1311=>604,1312=>1081,1313=>905,1314=>1081,1315=>912,1316=>793,1317=>683,1329=>766,1330=>732,1331=>753,1332=>753,1333=>732,1334=>772,1335=>640,1336=>732,1337=>859,1338=>753,1339=>691,1340=>533,1341=>922,1342=>863,1343=>732,1344=>716,1345=>766,1346=>753,1347=>767,1348=>792,1349=>728,1350=>729,1351=>757,1352=>732,1353=>713,1354=>800,1355=>768,1356=>792,1357=>732,1358=>753,1359=>705,1360=>694,1361=>744,1362=>538,1363=>811,1364=>757,1365=>787,1366=>790,1369=>307,1370=>318,1371=>234,1372=>361,1373=>238,1374=>405,1375=>500,1377=>974,1378=>634,1379=>658,1380=>663,1381=>634,1382=>635,1383=>515,1384=>634,1385=>738,1386=>658,1387=>634,1388=>271,1389=>980,1390=>623,1391=>634,1392=>634,1393=>608,1394=>634,1395=>629,1396=>634,1397=>271,1398=>634,1399=>499,1400=>634,1401=>404,1402=>974,1403=>560,1404=>648,1405=>634,1406=>634,1407=>974,1408=>634,1409=>633,1410=>435,1411=>974,1412=>636,1413=>609,1414=>805,1415=>812,1417=>337,1418=>361,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>361,1471=>0,1472=>295,1473=>0,1474=>0,1475=>295,1478=>441,1479=>0,1488=>668,1489=>578,1490=>412,1491=>546,1492=>653,1493=>272,1494=>346,1495=>653,1496=>648,1497=>224,1498=>537,1499=>529,1500=>568,1501=>664,1502=>679,1503=>272,1504=>400,1505=>649,1506=>626,1507=>640,1508=>625,1509=>540,1510=>593,1511=>709,1512=>564,1513=>708,1514=>657,1520=>471,1521=>423,1522=>331,1523=>416,1524=>645,1542=>637,1543=>637,1545=>757,1546=>977,1548=>323,1557=>0,1563=>318,1567=>531,1569=>470,1570=>278,1571=>278,1572=>483,1573=>278,1574=>783,1575=>278,1576=>941,1577=>524,1578=>941,1579=>941,1580=>646,1581=>646,1582=>646,1583=>445,1584=>445,1585=>483,1586=>483,1587=>1221,1588=>1221,1589=>1209,1590=>1209,1591=>925,1592=>925,1593=>597,1594=>597,1600=>293,1601=>1037,1602=>776,1603=>824,1604=>727,1605=>619,1606=>734,1607=>524,1608=>483,1609=>783,1610=>783,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>537,1633=>537,1634=>537,1635=>537,1636=>537,1637=>537,1638=>537,1639=>537,1640=>537,1641=>537,1642=>537,1643=>325,1644=>318,1645=>545,1646=>941,1647=>776,1648=>0,1652=>292,1657=>941,1658=>941,1659=>941,1660=>941,1661=>941,1662=>941,1663=>941,1664=>941,1665=>646,1666=>646,1667=>646,1668=>646,1669=>646,1670=>646,1671=>646,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>483,1682=>483,1683=>498,1684=>530,1685=>610,1686=>530,1687=>483,1688=>483,1689=>483,1690=>1221,1691=>1221,1692=>1221,1693=>1209,1694=>1209,1695=>925,1696=>597,1697=>1037,1698=>1037,1699=>1037,1700=>1037,1701=>1037,1702=>1037,1703=>776,1704=>776,1705=>895,1706=>1054,1707=>895,1708=>824,1709=>824,1710=>824,1711=>895,1712=>895,1713=>895,1714=>895,1715=>895,1716=>895,1717=>727,1718=>727,1719=>727,1720=>727,1721=>734,1722=>734,1723=>734,1724=>734,1725=>734,1726=>698,1727=>646,1734=>483,1740=>783,1742=>783,1749=>524,1776=>537,1777=>537,1778=>537,1779=>537,1780=>537,1781=>537,1782=>537,1783=>537,1784=>537,1785=>537,1984=>636,1985=>636,1986=>636,1987=>636,1988=>636,1989=>636,1990=>636,1991=>636,1992=>636,1993=>636,1994=>278,1995=>571,1996=>424,1997=>592,1998=>654,1999=>654,2000=>594,2001=>654,2002=>829,2003=>438,2004=>438,2005=>559,2006=>612,2007=>350,2008=>959,2009=>473,2010=>783,2011=>654,2012=>625,2013=>734,2014=>530,2015=>724,2016=>473,2017=>625,2018=>594,2019=>530,2020=>530,2021=>522,2022=>594,2023=>594,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>313,2037=>313,2040=>560,2041=>560,2042=>361,3647=>636,3713=>670,3714=>684,3716=>688,3719=>482,3720=>628,3722=>684,3725=>688,3732=>669,3733=>642,3734=>645,3735=>655,3737=>659,3738=>625,3739=>625,3740=>745,3741=>767,3742=>687,3743=>687,3745=>702,3746=>688,3747=>684,3749=>649,3751=>632,3754=>703,3755=>819,3757=>633,3758=>684,3759=>788,3760=>632,3761=>0,3762=>539,3763=>539,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>663,3776=>375,3777=>657,3778=>460,3779=>547,3780=>491,3782=>674,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>636,3793=>641,3794=>641,3795=>670,3796=>625,3797=>625,3798=>703,3799=>670,3800=>674,3801=>677,3804=>1028,3805=>1028,4256=>840,4257=>690,4258=>642,4259=>759,4260=>591,4261=>686,4262=>789,4263=>811,4264=>467,4265=>565,4266=>789,4267=>793,4268=>584,4269=>837,4270=>750,4271=>688,4272=>811,4273=>584,4274=>584,4275=>837,4276=>837,4277=>646,4278=>604,4279=>584,4280=>596,4281=>584,4282=>721,4283=>795,4284=>584,4285=>566,4286=>584,4287=>669,4288=>799,4289=>542,4290=>664,4291=>542,4292=>565,4293=>674,4304=>508,4305=>508,4306=>533,4307=>785,4308=>522,4309=>517,4310=>508,4311=>797,4312=>507,4313=>518,4314=>1058,4315=>522,4316=>523,4317=>783,4318=>518,4319=>523,4320=>792,4321=>523,4322=>656,4323=>524,4324=>788,4325=>523,4326=>782,4327=>523,4328=>522,4329=>522,4330=>566,4331=>523,4332=>523,4333=>489,4334=>522,4335=>498,4336=>517,4337=>560,4338=>508,4339=>508,4340=>508,4341=>563,4342=>824,4343=>595,4344=>522,4345=>554,4346=>553,4347=>586,4348=>304,5121=>684,5122=>684,5123=>684,5124=>684,5125=>769,5126=>769,5127=>769,5129=>769,5130=>769,5131=>769,5132=>835,5133=>834,5134=>835,5135=>834,5136=>835,5137=>834,5138=>967,5139=>1007,5140=>967,5141=>1007,5142=>769,5143=>967,5144=>1007,5145=>967,5146=>1007,5147=>769,5149=>256,5150=>543,5151=>423,5152=>423,5153=>389,5154=>389,5155=>393,5156=>389,5157=>466,5158=>385,5159=>256,5160=>389,5161=>389,5162=>389,5163=>1090,5164=>909,5165=>953,5166=>1117,5167=>684,5168=>684,5169=>684,5170=>684,5171=>729,5172=>729,5173=>729,5175=>729,5176=>729,5177=>729,5178=>835,5179=>684,5180=>835,5181=>834,5182=>835,5183=>834,5184=>967,5185=>1007,5186=>967,5187=>1007,5188=>967,5189=>1007,5190=>967,5191=>1007,5192=>729,5193=>508,5194=>192,5196=>732,5197=>732,5198=>732,5199=>732,5200=>730,5201=>730,5202=>730,5204=>730,5205=>730,5206=>730,5207=>921,5208=>889,5209=>921,5210=>889,5211=>921,5212=>889,5213=>928,5214=>900,5215=>928,5216=>900,5217=>947,5218=>900,5219=>947,5220=>900,5221=>947,5222=>434,5223=>877,5224=>877,5225=>866,5226=>890,5227=>628,5228=>628,5229=>628,5230=>628,5231=>628,5232=>628,5233=>628,5234=>628,5235=>628,5236=>860,5237=>771,5238=>815,5239=>816,5240=>815,5241=>816,5242=>860,5243=>771,5244=>860,5245=>771,5246=>815,5247=>816,5248=>815,5249=>816,5250=>815,5251=>407,5252=>407,5253=>750,5254=>775,5255=>750,5256=>775,5257=>628,5258=>628,5259=>628,5260=>628,5261=>628,5262=>628,5263=>628,5264=>628,5265=>628,5266=>860,5267=>771,5268=>815,5269=>816,5270=>815,5271=>816,5272=>860,5273=>771,5274=>860,5275=>771,5276=>815,5277=>816,5278=>815,5279=>816,5280=>815,5281=>435,5282=>435,5283=>610,5284=>557,5285=>557,5286=>557,5287=>610,5288=>610,5289=>610,5290=>557,5291=>557,5292=>749,5293=>769,5294=>746,5295=>764,5296=>746,5297=>764,5298=>749,5299=>769,5300=>749,5301=>769,5302=>746,5303=>764,5304=>746,5305=>764,5306=>746,5307=>386,5308=>508,5309=>386,5312=>852,5313=>852,5314=>852,5315=>852,5316=>852,5317=>852,5318=>852,5319=>852,5320=>852,5321=>1069,5322=>1035,5323=>1059,5324=>852,5325=>1059,5326=>852,5327=>852,5328=>600,5329=>453,5330=>600,5331=>852,5332=>852,5333=>852,5334=>852,5335=>852,5336=>852,5337=>852,5338=>852,5339=>852,5340=>1069,5341=>1035,5342=>1059,5343=>1030,5344=>1059,5345=>1030,5346=>1069,5347=>1035,5348=>1069,5349=>1035,5350=>1083,5351=>1030,5352=>1083,5353=>1030,5354=>600,5356=>729,5357=>603,5358=>603,5359=>603,5360=>603,5361=>603,5362=>603,5363=>603,5364=>603,5365=>603,5366=>834,5367=>754,5368=>792,5369=>771,5370=>792,5371=>771,5372=>834,5373=>754,5374=>834,5375=>754,5376=>792,5377=>771,5378=>792,5379=>771,5380=>792,5381=>418,5382=>420,5383=>418,5392=>712,5393=>712,5394=>712,5395=>892,5396=>892,5397=>892,5398=>892,5399=>910,5400=>872,5401=>910,5402=>872,5403=>910,5404=>872,5405=>1140,5406=>1100,5407=>1140,5408=>1100,5409=>1140,5410=>1100,5411=>1140,5412=>1100,5413=>641,5414=>627,5415=>627,5416=>627,5417=>627,5418=>627,5419=>627,5420=>627,5421=>627,5422=>627,5423=>844,5424=>781,5425=>816,5426=>818,5427=>816,5428=>818,5429=>844,5430=>781,5431=>844,5432=>781,5433=>816,5434=>818,5435=>816,5436=>818,5437=>816,5438=>418,5440=>389,5441=>484,5442=>916,5443=>916,5444=>916,5445=>916,5446=>916,5447=>916,5448=>603,5449=>603,5450=>603,5451=>603,5452=>603,5453=>603,5454=>834,5455=>754,5456=>418,5458=>729,5459=>684,5460=>684,5461=>684,5462=>684,5463=>726,5464=>726,5465=>726,5466=>726,5467=>924,5468=>1007,5469=>508,5470=>732,5471=>732,5472=>732,5473=>732,5474=>732,5475=>732,5476=>730,5477=>730,5478=>730,5479=>730,5480=>947,5481=>900,5482=>508,5492=>831,5493=>831,5494=>831,5495=>831,5496=>831,5497=>831,5498=>831,5499=>563,5500=>752,5501=>484,5502=>1047,5503=>1047,5504=>1047,5505=>1047,5506=>1047,5507=>1047,5508=>1047,5509=>825,5514=>831,5515=>831,5516=>831,5517=>831,5518=>1259,5519=>1259,5520=>1259,5521=>1002,5522=>1002,5523=>1259,5524=>1259,5525=>700,5526=>1073,5536=>852,5537=>852,5538=>852,5539=>852,5540=>852,5541=>852,5542=>600,5543=>643,5544=>643,5545=>643,5546=>643,5547=>643,5548=>643,5549=>643,5550=>418,5551=>628,5598=>770,5601=>767,5702=>468,5703=>468,5742=>444,5743=>1047,5744=>1310,5745=>1632,5746=>1632,5747=>1375,5748=>1375,5749=>1632,5750=>1632,5760=>477,5761=>493,5762=>712,5763=>931,5764=>1150,5765=>1370,5766=>493,5767=>712,5768=>931,5769=>1150,5770=>1370,5771=>498,5772=>718,5773=>938,5774=>1159,5775=>1379,5776=>493,5777=>712,5778=>930,5779=>1149,5780=>1370,5781=>498,5782=>752,5783=>789,5784=>1205,5785=>1150,5786=>683,5787=>507,5788=>507,7424=>592,7425=>717,7426=>982,7427=>586,7428=>550,7429=>605,7430=>605,7431=>491,7432=>541,7433=>278,7434=>395,7435=>579,7436=>583,7437=>754,7438=>650,7439=>612,7440=>550,7441=>684,7442=>684,7443=>684,7444=>1023,7446=>612,7447=>612,7448=>524,7449=>602,7450=>602,7451=>583,7452=>574,7453=>737,7454=>948,7455=>638,7456=>592,7457=>818,7458=>525,7459=>526,7462=>583,7463=>592,7464=>564,7465=>524,7466=>590,7467=>639,7468=>431,7469=>613,7470=>432,7472=>485,7473=>398,7474=>398,7475=>488,7476=>474,7477=>186,7478=>186,7479=>413,7480=>351,7481=>543,7482=>471,7483=>471,7484=>496,7485=>439,7486=>380,7487=>438,7488=>385,7489=>461,7490=>623,7491=>392,7492=>392,7493=>405,7494=>648,7495=>428,7496=>405,7497=>417,7498=>417,7499=>360,7500=>359,7501=>405,7502=>179,7503=>426,7504=>623,7505=>409,7506=>414,7507=>370,7508=>414,7509=>414,7510=>428,7511=>295,7512=>405,7513=>470,7514=>623,7515=>417,7517=>402,7518=>373,7519=>385,7520=>416,7521=>364,7522=>179,7523=>259,7524=>405,7525=>417,7526=>402,7527=>373,7528=>412,7529=>416,7530=>364,7543=>635,7544=>474,7547=>372,7549=>667,7557=>278,7579=>405,7580=>370,7581=>370,7582=>414,7583=>360,7584=>296,7585=>233,7586=>405,7587=>405,7588=>261,7589=>250,7590=>261,7591=>261,7592=>234,7593=>250,7594=>235,7595=>376,7596=>623,7597=>623,7598=>411,7599=>479,7600=>409,7601=>414,7602=>414,7603=>360,7604=>287,7605=>295,7606=>508,7607=>418,7608=>361,7609=>406,7610=>417,7611=>366,7612=>437,7613=>366,7614=>392,7615=>414,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>684,7681=>613,7682=>686,7683=>635,7684=>686,7685=>635,7686=>686,7687=>635,7688=>698,7689=>550,7690=>770,7691=>635,7692=>770,7693=>635,7694=>770,7695=>635,7696=>770,7697=>635,7698=>770,7699=>635,7700=>632,7701=>615,7702=>632,7703=>615,7704=>632,7705=>615,7706=>632,7707=>615,7708=>632,7709=>615,7710=>575,7711=>352,7712=>775,7713=>635,7714=>752,7715=>634,7716=>752,7717=>634,7718=>752,7719=>634,7720=>752,7721=>634,7722=>752,7723=>634,7724=>295,7725=>278,7726=>295,7727=>278,7728=>656,7729=>579,7730=>656,7731=>579,7732=>656,7733=>579,7734=>557,7735=>288,7736=>557,7737=>288,7738=>557,7739=>278,7740=>557,7741=>278,7742=>863,7743=>974,7744=>863,7745=>974,7746=>863,7747=>974,7748=>748,7749=>634,7750=>748,7751=>634,7752=>748,7753=>634,7754=>748,7755=>634,7756=>787,7757=>612,7758=>787,7759=>612,7760=>787,7761=>612,7762=>787,7763=>612,7764=>603,7765=>635,7766=>603,7767=>635,7768=>695,7769=>411,7770=>695,7771=>411,7772=>695,7773=>411,7774=>695,7775=>411,7776=>635,7777=>521,7778=>635,7779=>521,7780=>635,7781=>521,7782=>635,7783=>521,7784=>635,7785=>521,7786=>611,7787=>392,7788=>611,7789=>392,7790=>611,7791=>392,7792=>611,7793=>392,7794=>732,7795=>634,7796=>732,7797=>634,7798=>732,7799=>634,7800=>732,7801=>634,7802=>732,7803=>634,7804=>684,7805=>592,7806=>684,7807=>592,7808=>989,7809=>818,7810=>989,7811=>818,7812=>989,7813=>818,7814=>989,7815=>818,7816=>989,7817=>818,7818=>685,7819=>592,7820=>685,7821=>592,7822=>611,7823=>592,7824=>685,7825=>525,7826=>685,7827=>525,7828=>685,7829=>525,7830=>634,7831=>392,7832=>818,7833=>592,7834=>613,7835=>352,7836=>352,7837=>352,7838=>769,7839=>612,7840=>684,7841=>613,7842=>684,7843=>613,7844=>684,7845=>613,7846=>684,7847=>613,7848=>684,7849=>613,7850=>684,7851=>613,7852=>684,7853=>613,7854=>684,7855=>613,7856=>684,7857=>613,7858=>684,7859=>613,7860=>684,7861=>613,7862=>684,7863=>613,7864=>632,7865=>615,7866=>632,7867=>615,7868=>632,7869=>615,7870=>632,7871=>615,7872=>632,7873=>615,7874=>632,7875=>615,7876=>632,7877=>615,7878=>632,7879=>615,7880=>295,7881=>278,7882=>295,7883=>278,7884=>787,7885=>612,7886=>787,7887=>612,7888=>787,7889=>612,7890=>787,7891=>612,7892=>787,7893=>612,7894=>787,7895=>612,7896=>787,7897=>612,7898=>913,7899=>612,7900=>913,7901=>612,7902=>913,7903=>612,7904=>913,7905=>612,7906=>913,7907=>612,7908=>732,7909=>634,7910=>732,7911=>634,7912=>858,7913=>634,7914=>858,7915=>634,7916=>858,7917=>634,7918=>858,7919=>634,7920=>858,7921=>634,7922=>611,7923=>592,7924=>611,7925=>592,7926=>611,7927=>592,7928=>611,7929=>592,7930=>769,7931=>477,7936=>659,7937=>659,7938=>659,7939=>659,7940=>659,7941=>659,7942=>659,7943=>659,7944=>684,7945=>684,7946=>877,7947=>877,7948=>769,7949=>801,7950=>708,7951=>743,7952=>541,7953=>541,7954=>541,7955=>541,7956=>541,7957=>541,7960=>711,7961=>711,7962=>966,7963=>975,7964=>898,7965=>928,7968=>634,7969=>634,7970=>634,7971=>634,7972=>634,7973=>634,7974=>634,7975=>634,7976=>837,7977=>835,7978=>1086,7979=>1089,7980=>1027,7981=>1051,7982=>934,7983=>947,7984=>338,7985=>338,7986=>338,7987=>338,7988=>338,7989=>338,7990=>338,7991=>338,7992=>380,7993=>374,7994=>635,7995=>635,7996=>570,7997=>600,7998=>489,7999=>493,8000=>612,8001=>612,8002=>612,8003=>612,8004=>612,8005=>612,8008=>804,8009=>848,8010=>1095,8011=>1100,8012=>938,8013=>970,8016=>579,8017=>579,8018=>579,8019=>579,8020=>579,8021=>579,8022=>579,8023=>579,8025=>784,8027=>998,8029=>1012,8031=>897,8032=>837,8033=>837,8034=>837,8035=>837,8036=>837,8037=>837,8038=>837,8039=>837,8040=>802,8041=>843,8042=>1089,8043=>1095,8044=>946,8045=>972,8046=>921,8047=>952,8048=>659,8049=>659,8050=>541,8051=>548,8052=>634,8053=>654,8054=>338,8055=>338,8056=>612,8057=>612,8058=>579,8059=>579,8060=>837,8061=>837,8064=>659,8065=>659,8066=>659,8067=>659,8068=>659,8069=>659,8070=>659,8071=>659,8072=>684,8073=>684,8074=>877,8075=>877,8076=>769,8077=>801,8078=>708,8079=>743,8080=>634,8081=>634,8082=>634,8083=>634,8084=>634,8085=>634,8086=>634,8087=>634,8088=>837,8089=>835,8090=>1086,8091=>1089,8092=>1027,8093=>1051,8094=>934,8095=>947,8096=>837,8097=>837,8098=>837,8099=>837,8100=>837,8101=>837,8102=>837,8103=>837,8104=>802,8105=>843,8106=>1089,8107=>1095,8108=>946,8109=>972,8110=>921,8111=>952,8112=>659,8113=>659,8114=>659,8115=>659,8116=>659,8118=>659,8119=>659,8120=>684,8121=>684,8122=>716,8123=>692,8124=>684,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>634,8131=>634,8132=>654,8134=>634,8135=>634,8136=>805,8137=>746,8138=>931,8139=>871,8140=>752,8141=>500,8142=>500,8143=>500,8144=>338,8145=>338,8146=>338,8147=>338,8150=>338,8151=>338,8152=>295,8153=>295,8154=>475,8155=>408,8157=>500,8158=>500,8159=>500,8160=>579,8161=>579,8162=>579,8163=>579,8164=>635,8165=>635,8166=>579,8167=>579,8168=>611,8169=>611,8170=>845,8171=>825,8172=>685,8173=>500,8174=>500,8175=>500,8178=>837,8179=>837,8180=>837,8182=>837,8183=>837,8184=>941,8185=>813,8186=>922,8187=>826,8188=>764,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>636,8200=>318,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>361,8209=>361,8210=>636,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>318,8217=>318,8218=>318,8219=>318,8220=>518,8221=>518,8222=>518,8223=>518,8224=>500,8225=>500,8226=>590,8227=>590,8228=>334,8229=>667,8230=>1000,8231=>318,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1342,8241=>1735,8242=>227,8243=>374,8244=>520,8245=>227,8246=>374,8247=>520,8248=>339,8249=>400,8250=>400,8251=>838,8252=>485,8253=>531,8254=>500,8255=>804,8256=>804,8257=>250,8258=>1000,8259=>500,8260=>167,8261=>390,8262=>390,8263=>922,8264=>733,8265=>733,8266=>497,8267=>636,8268=>500,8269=>500,8270=>500,8271=>337,8272=>804,8273=>500,8274=>450,8275=>1000,8276=>804,8277=>838,8278=>586,8279=>663,8280=>838,8281=>838,8282=>318,8283=>797,8284=>838,8285=>318,8286=>318,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>401,8305=>179,8308=>401,8309=>401,8310=>401,8311=>401,8312=>401,8313=>401,8314=>528,8315=>528,8316=>528,8317=>246,8318=>246,8319=>398,8320=>401,8321=>401,8322=>401,8323=>401,8324=>401,8325=>401,8326=>401,8327=>401,8328=>401,8329=>401,8330=>528,8331=>528,8332=>528,8333=>246,8334=>246,8336=>392,8337=>417,8338=>414,8339=>444,8340=>417,8341=>404,8342=>426,8343=>166,8344=>623,8345=>398,8346=>428,8347=>373,8348=>295,8352=>877,8353=>636,8354=>636,8355=>636,8356=>636,8357=>974,8358=>748,8359=>1272,8360=>1074,8361=>989,8362=>784,8363=>636,8364=>636,8365=>636,8366=>636,8367=>1272,8368=>636,8369=>636,8370=>636,8371=>636,8372=>774,8373=>636,8376=>636,8377=>636,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1019,8449=>1019,8450=>698,8451=>1123,8452=>642,8453=>1019,8454=>1067,8455=>614,8456=>698,8457=>952,8459=>988,8460=>754,8461=>850,8462=>634,8463=>634,8464=>470,8465=>697,8466=>720,8467=>413,8468=>818,8469=>801,8470=>1040,8471=>1000,8472=>697,8473=>701,8474=>787,8475=>798,8476=>814,8477=>792,8478=>896,8479=>684,8480=>1020,8481=>1074,8482=>1000,8483=>684,8484=>745,8485=>578,8486=>764,8487=>764,8488=>616,8489=>338,8490=>656,8491=>684,8492=>786,8493=>703,8494=>854,8495=>592,8496=>605,8497=>786,8498=>575,8499=>1069,8500=>462,8501=>745,8502=>674,8503=>466,8504=>645,8505=>380,8506=>926,8507=>1194,8508=>702,8509=>728,8510=>654,8511=>849,8512=>811,8513=>775,8514=>557,8515=>557,8516=>611,8517=>819,8518=>708,8519=>615,8520=>351,8521=>351,8523=>780,8526=>526,8528=>969,8529=>969,8530=>1370,8531=>969,8532=>969,8533=>969,8534=>969,8535=>969,8536=>969,8537=>969,8538=>969,8539=>969,8540=>969,8541=>969,8542=>969,8543=>568,8544=>295,8545=>492,8546=>689,8547=>923,8548=>684,8549=>922,8550=>1120,8551=>1317,8552=>917,8553=>685,8554=>933,8555=>1131,8556=>557,8557=>698,8558=>770,8559=>863,8560=>278,8561=>458,8562=>637,8563=>812,8564=>592,8565=>811,8566=>991,8567=>1170,8568=>819,8569=>592,8570=>822,8571=>1002,8572=>278,8573=>550,8574=>635,8575=>974,8576=>1245,8577=>770,8578=>1245,8579=>703,8580=>549,8581=>698,8585=>969,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>684,8705=>636,8706=>517,8707=>632,8708=>632,8709=>871,8710=>669,8711=>669,8712=>871,8713=>871,8714=>718,8715=>871,8716=>871,8717=>718,8718=>636,8719=>757,8720=>757,8721=>674,8722=>838,8723=>838,8724=>838,8725=>337,8726=>637,8727=>838,8728=>626,8729=>626,8730=>637,8731=>637,8732=>637,8733=>714,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>732,8744=>732,8745=>732,8746=>732,8747=>521,8748=>789,8749=>1057,8750=>521,8751=>789,8752=>1057,8753=>521,8754=>521,8755=>521,8756=>636,8757=>636,8758=>260,8759=>636,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>839,8787=>839,8788=>1000,8789=>1000,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>838,8809=>838,8810=>1047,8811=>1047,8812=>464,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>732,8845=>732,8846=>732,8847=>838,8848=>838,8849=>838,8850=>838,8851=>780,8852=>780,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>871,8867=>871,8868=>871,8869=>871,8870=>521,8871=>521,8872=>871,8873=>871,8874=>871,8875=>871,8876=>871,8877=>871,8878=>871,8879=>871,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>521,8891=>732,8892=>732,8893=>732,8894=>838,8895=>838,8896=>820,8897=>820,8898=>820,8899=>820,8900=>494,8901=>318,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>732,8911=>732,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1000,8947=>871,8948=>718,8949=>871,8950=>871,8951=>718,8952=>871,8953=>871,8954=>1000,8955=>871,8956=>718,8957=>871,8958=>718,8959=>871,8960=>602,8961=>602,8962=>635,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>390,8969=>390,8970=>390,8971=>390,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>513,8984=>1000,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>521,8993=>521,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>338,9076=>635,9077=>837,9082=>659,9085=>757,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>521,9166=>838,9167=>945,9187=>873,9189=>769,9192=>636,9250=>635,9251=>635,9312=>896,9313=>896,9314=>896,9315=>896,9316=>896,9317=>896,9318=>896,9319=>896,9320=>896,9321=>896,9472=>602,9473=>602,9474=>602,9475=>602,9476=>602,9477=>602,9478=>602,9479=>602,9480=>602,9481=>602,9482=>602,9483=>602,9484=>602,9485=>602,9486=>602,9487=>602,9488=>602,9489=>602,9490=>602,9491=>602,9492=>602,9493=>602,9494=>602,9495=>602,9496=>602,9497=>602,9498=>602,9499=>602,9500=>602,9501=>602,9502=>602,9503=>602,9504=>602,9505=>602,9506=>602,9507=>602,9508=>602,9509=>602,9510=>602,9511=>602,9512=>602,9513=>602,9514=>602,9515=>602,9516=>602,9517=>602,9518=>602,9519=>602,9520=>602,9521=>602,9522=>602,9523=>602,9524=>602,9525=>602,9526=>602,9527=>602,9528=>602,9529=>602,9530=>602,9531=>602,9532=>602,9533=>602,9534=>602,9535=>602,9536=>602,9537=>602,9538=>602,9539=>602,9540=>602,9541=>602,9542=>602,9543=>602,9544=>602,9545=>602,9546=>602,9547=>602,9548=>602,9549=>602,9550=>602,9551=>602,9552=>602,9553=>602,9554=>602,9555=>602,9556=>602,9557=>602,9558=>602,9559=>602,9560=>602,9561=>602,9562=>602,9563=>602,9564=>602,9565=>602,9566=>602,9567=>602,9568=>602,9569=>602,9570=>602,9571=>602,9572=>602,9573=>602,9574=>602,9575=>602,9576=>602,9577=>602,9578=>602,9579=>602,9580=>602,9581=>602,9582=>602,9583=>602,9584=>602,9585=>602,9586=>602,9587=>602,9588=>602,9589=>602,9590=>602,9591=>602,9592=>602,9593=>602,9594=>602,9595=>602,9596=>602,9597=>602,9598=>602,9599=>602,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>791,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>873,9697=>873,9698=>769,9699=>769,9700=>769,9701=>769,9702=>590,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>322,10076=>322,10077=>538,10078=>538,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>896,10103=>896,10104=>896,10105=>896,10106=>896,10107=>896,10108=>896,10109=>896,10110=>896,10111=>896,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>390,10182=>390,10208=>494,10214=>495,10215=>495,10216=>390,10217=>390,10218=>556,10219=>556,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>732,10241=>732,10242=>732,10243=>732,10244=>732,10245=>732,10246=>732,10247=>732,10248=>732,10249=>732,10250=>732,10251=>732,10252=>732,10253=>732,10254=>732,10255=>732,10256=>732,10257=>732,10258=>732,10259=>732,10260=>732,10261=>732,10262=>732,10263=>732,10264=>732,10265=>732,10266=>732,10267=>732,10268=>732,10269=>732,10270=>732,10271=>732,10272=>732,10273=>732,10274=>732,10275=>732,10276=>732,10277=>732,10278=>732,10279=>732,10280=>732,10281=>732,10282=>732,10283=>732,10284=>732,10285=>732,10286=>732,10287=>732,10288=>732,10289=>732,10290=>732,10291=>732,10292=>732,10293=>732,10294=>732,10295=>732,10296=>732,10297=>732,10298=>732,10299=>732,10300=>732,10301=>732,10302=>732,10303=>732,10304=>732,10305=>732,10306=>732,10307=>732,10308=>732,10309=>732,10310=>732,10311=>732,10312=>732,10313=>732,10314=>732,10315=>732,10316=>732,10317=>732,10318=>732,10319=>732,10320=>732,10321=>732,10322=>732,10323=>732,10324=>732,10325=>732,10326=>732,10327=>732,10328=>732,10329=>732,10330=>732,10331=>732,10332=>732,10333=>732,10334=>732,10335=>732,10336=>732,10337=>732,10338=>732,10339=>732,10340=>732,10341=>732,10342=>732,10343=>732,10344=>732,10345=>732,10346=>732,10347=>732,10348=>732,10349=>732,10350=>732,10351=>732,10352=>732,10353=>732,10354=>732,10355=>732,10356=>732,10357=>732,10358=>732,10359=>732,10360=>732,10361=>732,10362=>732,10363=>732,10364=>732,10365=>732,10366=>732,10367=>732,10368=>732,10369=>732,10370=>732,10371=>732,10372=>732,10373=>732,10374=>732,10375=>732,10376=>732,10377=>732,10378=>732,10379=>732,10380=>732,10381=>732,10382=>732,10383=>732,10384=>732,10385=>732,10386=>732,10387=>732,10388=>732,10389=>732,10390=>732,10391=>732,10392=>732,10393=>732,10394=>732,10395=>732,10396=>732,10397=>732,10398=>732,10399=>732,10400=>732,10401=>732,10402=>732,10403=>732,10404=>732,10405=>732,10406=>732,10407=>732,10408=>732,10409=>732,10410=>732,10411=>732,10412=>732,10413=>732,10414=>732,10415=>732,10416=>732,10417=>732,10418=>732,10419=>732,10420=>732,10421=>732,10422=>732,10423=>732,10424=>732,10425=>732,10426=>732,10427=>732,10428=>732,10429=>732,10430=>732,10431=>732,10432=>732,10433=>732,10434=>732,10435=>732,10436=>732,10437=>732,10438=>732,10439=>732,10440=>732,10441=>732,10442=>732,10443=>732,10444=>732,10445=>732,10446=>732,10447=>732,10448=>732,10449=>732,10450=>732,10451=>732,10452=>732,10453=>732,10454=>732,10455=>732,10456=>732,10457=>732,10458=>732,10459=>732,10460=>732,10461=>732,10462=>732,10463=>732,10464=>732,10465=>732,10466=>732,10467=>732,10468=>732,10469=>732,10470=>732,10471=>732,10472=>732,10473=>732,10474=>732,10475=>732,10476=>732,10477=>732,10478=>732,10479=>732,10480=>732,10481=>732,10482=>732,10483=>732,10484=>732,10485=>732,10486=>732,10487=>732,10488=>732,10489=>732,10490=>732,10491=>732,10492=>732,10493=>732,10494=>732,10495=>732,10502=>838,10503=>838,10506=>838,10507=>838,10560=>683,10561=>683,10627=>734,10628=>734,10702=>838,10703=>1000,10704=>1000,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1325,10765=>521,10766=>521,10767=>521,10768=>521,10769=>521,10770=>521,10771=>521,10772=>521,10773=>521,10774=>521,10775=>521,10776=>521,10777=>521,10778=>521,10779=>521,10780=>521,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>836,11023=>836,11024=>836,11025=>836,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>557,11361=>278,11362=>557,11363=>603,11364=>695,11365=>613,11366=>392,11367=>752,11368=>634,11369=>656,11370=>579,11371=>685,11372=>525,11373=>781,11374=>863,11375=>684,11376=>781,11377=>734,11378=>1128,11379=>961,11380=>592,11381=>654,11382=>568,11383=>660,11385=>414,11386=>612,11387=>491,11388=>175,11389=>431,11390=>635,11391=>685,11568=>646,11569=>888,11570=>888,11571=>682,11572=>684,11573=>635,11574=>562,11575=>684,11576=>684,11577=>632,11578=>632,11579=>683,11580=>875,11581=>685,11582=>491,11583=>685,11584=>888,11585=>888,11586=>300,11587=>627,11588=>752,11589=>656,11590=>527,11591=>685,11592=>645,11593=>632,11594=>502,11595=>953,11596=>778,11597=>748,11598=>621,11599=>295,11600=>778,11601=>295,11602=>752,11603=>633,11604=>888,11605=>888,11606=>752,11607=>320,11608=>749,11609=>888,11610=>888,11611=>698,11612=>768,11613=>685,11614=>698,11615=>622,11616=>684,11617=>752,11618=>632,11619=>788,11620=>567,11621=>788,11631=>515,11800=>531,11810=>390,11811=>390,11812=>390,11813=>390,11822=>531,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>635,42565=>521,42566=>354,42567=>338,42572=>1180,42573=>1028,42576=>1029,42577=>906,42580=>1080,42581=>842,42582=>977,42583=>843,42594=>1062,42595=>912,42596=>1066,42597=>901,42598=>1178,42599=>1008,42600=>787,42601=>612,42602=>855,42603=>712,42604=>1358,42605=>1019,42606=>879,42634=>782,42635=>685,42636=>611,42637=>583,42644=>686,42645=>634,42760=>493,42761=>493,42762=>493,42763=>493,42764=>493,42765=>493,42766=>493,42767=>493,42768=>493,42769=>493,42770=>493,42771=>493,42772=>493,42773=>493,42774=>493,42779=>369,42780=>369,42781=>252,42782=>252,42783=>252,42786=>385,42787=>356,42788=>472,42789=>472,42790=>752,42791=>634,42792=>878,42793=>709,42794=>614,42795=>541,42800=>491,42801=>521,42802=>1250,42803=>985,42804=>1203,42805=>990,42806=>1142,42807=>981,42808=>971,42809=>818,42810=>971,42811=>818,42812=>959,42813=>818,42814=>703,42815=>549,42822=>680,42823=>392,42824=>582,42825=>427,42826=>807,42827=>704,42830=>1358,42831=>1019,42832=>603,42833=>635,42834=>734,42835=>774,42838=>787,42839=>635,42852=>605,42853=>635,42854=>605,42855=>635,42880=>557,42881=>278,42882=>735,42883=>634,42889=>337,42890=>376,42891=>401,42892=>275,42893=>686,42894=>487,42896=>772,42897=>667,43002=>915,43003=>575,43004=>603,43005=>863,43006=>295,43007=>1199,61184=>213,61185=>238,61186=>257,61187=>264,61188=>267,61189=>238,61190=>213,61191=>238,61192=>257,61193=>264,61194=>257,61195=>238,61196=>213,61197=>238,61198=>257,61199=>264,61200=>257,61201=>238,61202=>213,61203=>238,61204=>267,61205=>264,61206=>257,61207=>238,61208=>213,61209=>275,61440=>977,61441=>977,61442=>977,61443=>977,63173=>612,64256=>689,64257=>630,64258=>630,64259=>967,64260=>967,64261=>686,64262=>861,64275=>1202,64276=>1202,64277=>1196,64278=>1186,64279=>1529,64285=>224,64286=>0,64287=>331,64288=>636,64289=>856,64290=>774,64291=>906,64292=>771,64293=>843,64294=>855,64295=>807,64296=>875,64297=>838,64298=>708,64299=>708,64300=>708,64301=>708,64302=>668,64303=>668,64304=>668,64305=>578,64306=>412,64307=>546,64308=>653,64309=>355,64310=>406,64312=>648,64313=>330,64314=>537,64315=>529,64316=>568,64318=>679,64320=>399,64321=>649,64323=>640,64324=>625,64326=>593,64327=>709,64328=>564,64329=>708,64330=>657,64331=>272,64332=>578,64333=>529,64334=>625,64335=>629,64338=>941,64339=>982,64340=>278,64341=>302,64342=>941,64343=>982,64344=>278,64345=>302,64346=>941,64347=>982,64348=>278,64349=>302,64350=>941,64351=>982,64352=>278,64353=>302,64354=>941,64355=>982,64356=>278,64357=>302,64358=>941,64359=>982,64360=>278,64361=>302,64362=>1037,64363=>1035,64364=>478,64365=>506,64366=>1037,64367=>1035,64368=>478,64369=>506,64370=>646,64371=>646,64372=>618,64373=>646,64374=>646,64375=>646,64376=>618,64377=>646,64378=>646,64379=>646,64380=>618,64381=>646,64382=>646,64383=>646,64384=>618,64385=>646,64386=>445,64387=>525,64388=>445,64389=>525,64390=>445,64391=>525,64392=>445,64393=>525,64394=>483,64395=>552,64396=>483,64397=>552,64398=>895,64399=>895,64400=>476,64401=>552,64402=>895,64403=>895,64404=>476,64405=>552,64406=>895,64407=>895,64408=>476,64409=>552,64410=>895,64411=>895,64412=>476,64413=>552,64414=>734,64415=>761,64416=>734,64417=>761,64418=>278,64419=>302,64426=>698,64427=>632,64428=>527,64429=>461,64467=>824,64468=>843,64469=>476,64470=>552,64473=>483,64474=>517,64488=>278,64489=>302,64508=>783,64509=>833,64510=>278,64511=>302,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>293,65137=>293,65138=>293,65139=>262,65140=>293,65142=>293,65143=>293,65144=>293,65145=>293,65146=>293,65147=>293,65148=>293,65149=>293,65150=>293,65151=>293,65152=>470,65153=>278,65154=>305,65155=>278,65156=>305,65157=>483,65158=>517,65159=>278,65160=>305,65161=>783,65162=>833,65163=>278,65164=>302,65165=>278,65166=>305,65167=>941,65168=>982,65169=>278,65170=>302,65171=>524,65172=>536,65173=>941,65174=>982,65175=>278,65176=>302,65177=>941,65178=>982,65179=>278,65180=>302,65181=>646,65182=>646,65183=>618,65184=>646,65185=>646,65186=>646,65187=>618,65188=>646,65189=>646,65190=>646,65191=>618,65192=>646,65193=>445,65194=>525,65195=>445,65196=>525,65197=>483,65198=>552,65199=>483,65200=>552,65201=>1221,65202=>1275,65203=>838,65204=>892,65205=>1221,65206=>1275,65207=>838,65208=>892,65209=>1209,65210=>1225,65211=>849,65212=>867,65213=>1209,65214=>1225,65215=>849,65216=>867,65217=>925,65218=>949,65219=>796,65220=>820,65221=>925,65222=>949,65223=>796,65224=>820,65225=>597,65226=>532,65227=>597,65228=>482,65229=>597,65230=>532,65231=>523,65232=>482,65233=>1037,65234=>1035,65235=>478,65236=>506,65237=>776,65238=>834,65239=>478,65240=>506,65241=>824,65242=>843,65243=>476,65244=>552,65245=>727,65246=>757,65247=>305,65248=>331,65249=>619,65250=>666,65251=>536,65252=>578,65253=>734,65254=>761,65255=>278,65256=>302,65257=>524,65258=>536,65259=>527,65260=>461,65261=>483,65262=>517,65263=>783,65264=>833,65265=>783,65266=>833,65267=>278,65268=>302,65269=>570,65270=>597,65271=>570,65272=>597,65273=>570,65274=>597,65275=>570,65276=>597,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1025,65535=>600);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (!defined('PHPMYADMIN')) {    exit;}/**  * constant for differenciating array in $_SESSION variable  */$SESSION_KEY = '__upload_status';/**  * sets default plugin for handling the import process  */$_SESSION[$SESSION_KEY]["handler"] = "";/**  * unique ID for each upload  */$upload_id = uniqid("");/**  * list of available plugins  */$plugins = array(       "uploadprogress",       "apc",       "noplugin"       ); // available plugins. Each plugin has own checkfunction in display_import_ajax.lib.php and own file with functions in upload_#KEY#.php// select available pluginforeach ($plugins as $plugin) {    $check = "PMA_import_" . $plugin . "Check";    if ($check()) {        $_SESSION[$SESSION_KEY]["handler"] = $plugin;        include_once "import/upload/" . $plugin . ".php";        break;    }}/**  * Checks if APC bar extension is available and configured correctly.  *  * @return true if APC extension is available and if rfc1867 is enabled, false if it is not  */function PMA_import_apcCheck(){    if (! extension_loaded('apc') || ! function_exists('apc_fetch') || ! function_exists('getallheaders')) {        return false;    }    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));}/**  * Checks if UploadProgress bar extension is available.  *  * @return true if UploadProgress extension is available, false if it is not  */function PMA_import_uploadprogressCheck(){    if (! function_exists("uploadprogress_get_info") || ! function_exists('getallheaders')) {        return false;    }    return true;}/**  * Default plugin for handling import. If no other plugin is available, noplugin is used.  *  * @return true  */function PMA_import_nopluginCheck(){    return true;}/**  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin's file.  *  * @param $id - ID of transfer, usually $upload_id from display_import_ajax.lib.php  */function PMA_importAjaxStatus($id){    header('Content-type: application/json');    echo json_encode(PMA_getUploadStatus($id));}?>
