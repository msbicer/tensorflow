<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * <code> * N   N  OOO  !!   DDDD   OOO    N   N  OOO  TTTTT   EEEE DDDD  I TTTTT !! * NN  N O   O !!   D   D O   O   NN  N O   O   T     E    D   D I   T   !! * N N N O   O !!   D   D O   O   N N N O   O   T     EEEE D   D I   T   !! * N  NN O   O      D   D O   O   N  NN O   O   T     E    D   D I   T * N   N  OOO  !!   DDDD   OOO    N   N  OOO    T     EEEE DDDD  I   T   !! * </code> * * DO NOT EDIT THIS FILE, EDIT config.inc.php INSTEAD !!! * * phpMyAdmin default configuration, you can copy values from here to your * config.inc.php * * All directives are explained in Documentation.html * * @package PhpMyAdmin *//** * Your phpMyAdmin URL. * * Complete the variable below with the full URL ie *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/ * * It must contain characters that are valid for a URL, and the path is * case sensitive on some Web servers, for example Unix-based servers. * * In most cases you can leave this variable empty, as the correct value * will be detected automatically. However, we recommend that you do * test to see that the auto-detection code works in your system. A good * test is to browse a table, then edit a row and save it.  There will be * an error message if phpMyAdmin cannot auto-detect the correct value. * * @global string $cfg['PmaAbsoluteUri'] */$cfg['PmaAbsoluteUri'] = '';/** * Disable the default warning that is displayed on the DB Details Structure page if * any of the required Tables for the configuration storage could not be found * * @global boolean $cfg['PmaNoRelation_DisableWarning'] */$cfg['PmaNoRelation_DisableWarning'] = false;/** * Disable the default warning that is displayed if Suhosin is detected * * @global boolean $cfg['SuhosinDisableWarning'] */$cfg['SuhosinDisableWarning'] = false;/** * Disable the default warning that is displayed if mcrypt is missing for * cookie authentication. * * @global boolean $cfg['McryptDisableWarning'] */$cfg['McryptDisableWarning'] = false;/** * Show warning about incomplete translations on certain threshold. * * @global boolean $cfg['TranslationWarningThreshold'] */$cfg['TranslationWarningThreshold'] = 80;/** * Allows phpMyAdmin to be included from a document located on * another domain; setting this to true is a potential security hole * * @global boolean $cfg['AllowThirdPartyFraming'] */$cfg['AllowThirdPartyFraming'] = false;/** * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If * at least one server configuration uses 'cookie' auth_type, enter here a * pass phrase that will be used by blowfish. The maximum length seems to be 46 * characters. * * @global string $cfg['blowfish_secret'] */$cfg['blowfish_secret'] = '';/******************************************************************************* * Server(s) configuration * * The $cfg['Servers'] array starts with $cfg['Servers'][1].  Do not use * $cfg['Servers'][0]. You can disable a server configuration entry by setting host * to ''. If you want more than one server, just copy following section * (including $i incrementation) several times. There is no need to define * full server array, just define values you need to change. * * @global array $cfg['Servers'] */$cfg['Servers'] = array();$i = 1;/** * MySQL hostname or IP address * * @global string $cfg['Servers'][$i]['host'] */$cfg['Servers'][$i]['host'] = 'localhost';/** * MySQL port - leave blank for default port * * @global string $cfg['Servers'][$i]['port'] */$cfg['Servers'][$i]['port'] = '';/** * Path to the socket - leave blank for default socket * * @global string $cfg['Servers'][$i]['socket'] */$cfg['Servers'][$i]['socket'] = '';/** * Use SSL for connecting to MySQL server? * * @global boolean $cfg['Servers'][$i]['ssl'] */$cfg['Servers'][$i]['ssl'] = false;/** * How to connect to MySQL server ('tcp' or 'socket') * * @global string $cfg['Servers'][$i]['connect_type'] */$cfg['Servers'][$i]['connect_type'] = 'tcp';/** * The PHP MySQL extension to use ('mysql' or 'mysqli') * * @global string $cfg['Servers'][$i]['extension'] */$cfg['Servers'][$i]['extension'] = 'mysqli';/** * Use compressed protocol for the MySQL connection * * @global boolean $cfg['Servers'][$i]['compress'] */$cfg['Servers'][$i]['compress'] = false;/** * MySQL control host. This permits to use a host different than the * main host, for the phpMyAdmin configuration storage. If left empty, * $cfg['Servers'][$i]['host'] is used instead. * * @global string $cfg['Servers'][$i]['controlhost'] */$cfg['Servers'][$i]['controlhost'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controluser'] */$cfg['Servers'][$i]['controluser'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controlpass'] */$cfg['Servers'][$i]['controlpass'] = '';/** * Authentication method (valid choices: config, http, signon or cookie) * * @global string $cfg['Servers'][$i]['auth_type'] */$cfg['Servers'][$i]['auth_type'] = 'cookie';/** * HTTP Basic Auth Realm name to display (only used with 'HTTP' auth_type) * * @global string $cfg['Servers'][$i]['auth_http_realm'] */$cfg['Servers'][$i]['auth_http_realm'] = '';/** * File containing Swekey ids and login names (see /contrib); * leave empty to deactivate Swekey hardware authentication * * @global string $cfg['Servers'][$i]['auth_swekey_config'] */$cfg['Servers'][$i]['auth_swekey_config'] = '';/** * MySQL user * * @global string $cfg['Servers'][$i]['user'] */$cfg['Servers'][$i]['user'] = 'root';/** * MySQL password (only needed with 'config' auth_type) * * @global string $cfg['Servers'][$i]['password'] */$cfg['Servers'][$i]['password'] = '';/** * Session to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonSession'] */$cfg['Servers'][$i]['SignonSession'] = '';/** * PHP script to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonScript'] */$cfg['Servers'][$i]['SignonScript'] = '';/** * URL where to redirect user to login for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonURL'] */$cfg['Servers'][$i]['SignonURL'] = '';/** * URL where to redirect user after logout * * @global string $cfg['Servers'][$i]['LogoutURL'] */$cfg['Servers'][$i]['LogoutURL'] = '';/** * Whether to try to connect without password * * @global boolean $cfg['Servers'][$i]['nopassword'] */$cfg['Servers'][$i]['nopassword'] = false;/** * If set to a db-name, only this db is displayed in left frame * It may also be an array of db-names, where sorting order is relevant. * * @global string $cfg['Servers'][$i]['only_db'] */$cfg['Servers'][$i]['only_db'] = '';/** * Database name to be hidden from listings * * @global string $cfg['Servers'][$i]['hide_db'] */$cfg['Servers'][$i]['hide_db'] = '';/** * Verbose name for this host - leave blank to show the hostname * (for HTTP authentication, all non-US-ASCII characters will be stripped) * * @global string $cfg['Servers'][$i]['verbose'] */$cfg['Servers'][$i]['verbose'] = '';/** * Database used for Relation, Bookmark and PDF Features * (see examples/create_tables.sql) *   - leave blank for no support *     SUGGESTED: 'phpmyadmin' * * @global string $cfg['Servers'][$i]['pmadb'] */$cfg['Servers'][$i]['pmadb'] = '';/** * Bookmark table *   - leave blank for no bookmark support *     SUGGESTED: 'pma_bookmark' * * @global string $cfg['Servers'][$i]['bookmarktable'] */$cfg['Servers'][$i]['bookmarktable'] = '';/** * table to describe the relation between links (see doc) *   - leave blank for no relation-links support *     SUGGESTED: 'pma_relation' * * @global string $cfg['Servers'][$i]['relation'] */$cfg['Servers'][$i]['relation'] = '';/** * table to describe the display fields *   - leave blank for no display fields support *     SUGGESTED: 'pma_table_info' * * @global string $cfg['Servers'][$i]['table_info'] */$cfg['Servers'][$i]['table_info'] = '';/** * table to describe the tables position for the PDF schema *   - leave blank for no PDF schema support *     SUGGESTED: 'pma_table_coords' * * @global string $cfg['Servers'][$i]['table_coords'] */$cfg['Servers'][$i]['table_coords'] = '';/** * table to describe pages of relationpdf *   - leave blank if you don't want to use this *     SUGGESTED: 'pma_pdf_pages' * * @global string $cfg['Servers'][$i]['pdf_pages'] */$cfg['Servers'][$i]['pdf_pages'] = '';/** * table to store column information *   - leave blank for no column comments/mime types *     SUGGESTED: 'pma_column_info' * * @global string $cfg['Servers'][$i]['column_info'] */$cfg['Servers'][$i]['column_info'] = '';/** * table to store SQL history *   - leave blank for no SQL query history *     SUGGESTED: 'pma_history' * * @global string $cfg['Servers'][$i]['history'] */$cfg['Servers'][$i]['history'] = '';/** * table to store the coordinates for Designer *   - leave blank for no Designer feature *     SUGGESTED: 'pma_designer_coords' * * @global string $cfg['Servers'][$i]['designer_coords'] */$cfg['Servers'][$i]['designer_coords'] = '';/** * table to store recently used tables *   - leave blank for no "persistent" recently used tables *     SUGGESTED: 'pma_recent' */$cfg['Servers'][$i]['recent'] = '';/** * table to store UI preferences for tables *   - leave blank for no "persistent" UI preferences *     SUGGESTED: 'pma_table_uiprefs' */$cfg['Servers'][$i]['table_uiprefs'] = '';/** * table to store SQL tracking *   - leave blank for no SQL tracking *     SUGGESTED: 'pma_tracking' * * @global string $cfg['Servers'][$i]['tracking'] */$cfg['Servers'][$i]['tracking'] = '';/** * table to store user preferences *   - leave blank to disable server storage *     SUGGESTED: 'pma_userconfig' * * @global string $cfg['Servers'][$i]['userconfig'] */$cfg['Servers'][$i]['userconfig'] = '';/** * Maximum number of records saved in $cfg['Servers'][$i]['table_uiprefs'] table. * * In case where tables in databases is modified (e.g. dropped or renamed), * table_uiprefs may contains invalid data (referring to tables which are not * exist anymore). * This configuration make sure that we only keep N (N = MaxTableUiprefs) * newest record in table_uiprefs and automatically delete older records. * * @global integer $cfg['Servers'][$i]['userconfig'] = ''; */$cfg['Servers'][$i]['MaxTableUiprefs'] = 100;/** * set to false if you know that your pma_* tables are up to date. * This prevents compatibility checks and thereby increases performance. * * @global boolean $cfg['Servers'][$i]['verbose_check'] */$cfg['Servers'][$i]['verbose_check'] = true;/** * whether to allow root login * * @global boolean $cfg['Servers'][$i]['AllowRoot'] */$cfg['Servers'][$i]['AllowRoot'] = true;/** * whether to allow login of any user without a password * * @global boolean $cfg['Servers'][$i]['AllowNoPassword'] */$cfg['Servers'][$i]['AllowNoPassword'] = false;/** * Host authentication order, leave blank to not use * * @global string $cfg['Servers'][$i]['AllowDeny']['order'] */$cfg['Servers'][$i]['AllowDeny']['order'] = '';/** * Host authentication rules, leave blank for defaults * * @global array $cfg['Servers'][$i]['AllowDeny']['rules'] */$cfg['Servers'][$i]['AllowDeny']['rules'] = array();/** * Disable use of INFORMATION_SCHEMA. Is always 'true' for Drizzle. * * @see http://sf.net/support/tracker.php?aid=1849494 * @see http://bugs.mysql.com/19588 * @global boolean $cfg['Servers'][$i]['DisableIS'] */$cfg['Servers'][$i]['DisableIS'] = true;/** * SQL command to fetch available databases * * by default most user will be fine with SHOW DATABASES, * for servers with a huge amount of databases it is possible to * define a command which executes faster but with less information * * especially when accessing database servers from ISPs changing this command * can result in a great speed improvement * * false will disable fetching databases from the server, only databases in * $cfg['Servers'][$i]['only_db'] will be displayed * * #user# will be replaced by current user * * examples: * 'SHOW DATABASES' * "SHOW DATABASES LIKE '#user#\_%'" * 'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES' * 'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA' * false * * @global array $cfg['Servers'][$i]['ShowDatabasesCommand'] */$cfg['Servers'][$i]['ShowDatabasesCommand'] = 'SHOW DATABASES';/** * Whether to count tables when showing database list * * @global array $cfg['Servers'][$i]['CountTables'] */$cfg['Servers'][$i]['CountTables'] = false;/** * Whether the tracking mechanism creates versions for tables and views automatically. * * @global bool $cfg['Servers'][$i]['tracking_version_auto_create'] */$cfg['Servers'][$i]['tracking_version_auto_create'] = false;/** * Defines the list of statements the auto-creation uses for new versions. * * @global string $cfg['Servers'][$i]['tracking_default_statements'] */$cfg['Servers'][$i]['tracking_default_statements'] = 'CREATE TABLE,ALTER TABLE,DROP TABLE,RENAME TABLE,' .                                          'CREATE INDEX,DROP INDEX,' .                                          'INSERT,UPDATE,DELETE,TRUNCATE,REPLACE,' .                                          'CREATE VIEW,ALTER VIEW,DROP VIEW,' .                                          'CREATE DATABASE,ALTER DATABASE,DROP DATABASE';/** * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_view'] */$cfg['Servers'][$i]['tracking_add_drop_view'] = true;/** * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_table'] */$cfg['Servers'][$i]['tracking_add_drop_table'] = true;/** * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_database'] */$cfg['Servers'][$i]['tracking_add_drop_database'] = true;/** * Default server (0 = no default server) * * If you have more than one server configured, you can set $cfg['ServerDefault'] * to any one of them to auto-connect to that server when phpMyAdmin is started, * or set it to 0 to be given a list of servers without logging in * If you have only one server configured, $cfg['ServerDefault'] *MUST* be * set to that server. * * @global integer $cfg['ServerDefault'] */$cfg['ServerDefault'] = 1;/* * Other core phpMyAdmin settings *//** * whether Ajax behavior is active * * @global boolean $cfg['AjaxEnable'] */$cfg['AjaxEnable'] = true;/** * whether version check is active * * @global boolean $cfg['VersionCheck'] */$cfg['VersionCheck'] = VERSION_CHECK_DEFAULT;/** * maximum number of db's displayed in left frame and database list * * @global integer $cfg['MaxDbList'] */$cfg['MaxDbList'] = 100;/** * maximum number of tables displayed in table list * * @global integer $cfg['MaxTableList'] */$cfg['MaxTableList'] = 250;/** * whether to show hint or not * * @global boolean $cfg['ShowHint'] */$cfg['ShowHint'] = true;/** * maximum number of characters when a SQL query is displayed * * @global integer $cfg['MaxCharactersInDisplayedSQL'] */$cfg['MaxCharactersInDisplayedSQL'] = 1000;/** * use GZIP output buffering if possible (true|false|'auto') * * @global string $cfg['OBGzip'] */$cfg['OBGzip'] = 'auto';/** * use persistent connections to MySQL database * * @global boolean $cfg['PersistentConnections'] */$cfg['PersistentConnections'] = false;/** * whether to force using HTTPS * * @global boolean $cfg['ForceSSL'] */$cfg['ForceSSL'] = false;/** * maximum execution time in seconds (0 for no limit) * * @global integer $cfg['ExecTimeLimit'] */$cfg['ExecTimeLimit'] = 300;/** * Path for storing session data (session_save_path PHP parameter). * * @global integer $cfg['SessionSavePath'] */$cfg['SessionSavePath'] = '';/** * maximum allocated bytes ('0' for no limit) * this is a string because '16M' is a valid value; we must put here * a string as the default value so that /setup accepts strings * * @global string $cfg['MemoryLimit'] */$cfg['MemoryLimit'] = '0';/** * mark used tables, make possible to show locked tables (since MySQL 3.23.30) * Is ignored for Drizzle. * * @global boolean $cfg['SkipLockedTables'] */$cfg['SkipLockedTables'] = false;/** * show SQL queries as run * * @global boolean $cfg['ShowSQL'] */$cfg['ShowSQL'] = true;/** * retain SQL input on Ajax execute * * @global boolean $cfg['RetainQueryEditor'] */$cfg['RetainQueryBox'] = false;/** * show a 'Drop database' link to normal users * * @global boolean $cfg['AllowUserDropDatabase'] */$cfg['AllowUserDropDatabase'] = false;/** * confirm some commands that can result in loss of data * (see "need_confirm" in the parser) * * @global boolean $cfg['Confirm'] */$cfg['Confirm'] = true;/** * recall previous login in cookie authentication mode or not * * @global boolean $cfg['LoginCookieRecall'] */$cfg['LoginCookieRecall'] = true;/** * validity of cookie login (in seconds; 1440 matches php.ini's * session.gc_maxlifetime) * * @global integer $cfg['LoginCookieValidity'] */$cfg['LoginCookieValidity'] = 1440;/** * how long login cookie should be stored (in seconds) * * @global integer $cfg['LoginCookieStore'] */$cfg['LoginCookieStore'] = 0;/** * whether to delete all login cookies on logout * * @global boolean $cfg['LoginCookieDeleteAll'] */$cfg['LoginCookieDeleteAll'] = true;/** * whether to enable the "database search" feature or not * * @global boolean $cfg['UseDbSearch'] */$cfg['UseDbSearch'] = true;/** * if set to true, PMA continues computing multiple-statement queries * even if one of the queries failed * * @global boolean $cfg['IgnoreMultiSubmitErrors'] */$cfg['IgnoreMultiSubmitErrors'] = false;/** * if set to true, PMA will show the affected rows of EACH statement on * multiple-statement queries. See the libraries/import.php file for * hard coded defaults on how many queries a statement may contain! * * @global boolean $cfg['VerboseMultiSubmit'] */$cfg['VerboseMultiSubmit'] = true;/** * allow login to any user entered server in cookie based authentication * * @global boolean $cfg['AllowArbitraryServer'] */$cfg['AllowArbitraryServer'] = false;/******************************************************************************* * Error handler configuration * * this configures phpMyAdmin's own error handler, it is used to avoid information * disclosure, gather errors for logging, reporting and displaying * * @global array $cfg['Error_Handler'] */$cfg['Error_Handler'] = array();/** * whether to display errors or not * * this does not affect errors of type  E_USER_* * * @global boolean $cfg['Error_Handler']['display'] */$cfg['Error_Handler']['display'] = false;/** * (NOT IMPLEMENTED YET) * where to log errors, false or empty to disable * * <code> * // EXAMPLE log to std PHP error log * $cfg['Error_Handler']['log'] = array(0); * // EXAMPLE mail errors * $cfg['Error_Handler']['log'] = array(1, 'admin@example.org'); * // EXAMPLE append to specific file * $cfg['Error_Handler']['log'] = array(3, '/var/log/phpmyadmin_error.log'); * </code> * * @see     http://php.net/error_log * @global  string $cfg['Error_Handler']['log'] *///$cfg['Error_Handler']['log'] = false;/** * gather all errors in session to be displayed on a error reporting page * for viewing and/or sending to phpMyAdmin developer team * * @global boolean $cfg['Error_Handler']['gather'] */$cfg['Error_Handler']['gather'] = false;/******************************************************************************* * Left frame setup *//** * use a select-based menu and display only the current tables in the left frame. * * @global boolean $cfg['LeftFrameLight'] */$cfg['LeftFrameLight'] = true;/** * turn the select-based light menu into a tree * * @global boolean $cfg['LeftFrameDBTree'] */$cfg['LeftFrameDBTree'] = true;/** * the separator to sub-tree the select-based light menu tree * * @global string $cfg['LeftFrameDBSeparator'] */$cfg['LeftFrameDBSeparator'] = '_';/** * Which string will be used to generate table prefixes * to split/nest tables into multiple categories * * @global string $cfg['LeftFrameTableSeparator'] */$cfg['LeftFrameTableSeparator']= '__';/** * How many sublevels should be displayed when splitting up tables by the above Separator * * @global integer $cfg['LeftFrameTableLevel'] */$cfg['LeftFrameTableLevel'] = 1;/** * display table comment as tooltip in left frame * * @global boolean $cfg['ShowTooltip'] */$cfg['ShowTooltip'] = true;/** * if ShowToolTip is enabled, this defines that table/db comments * * @global boolean $cfg['ShowTooltipAliasDB'] */$cfg['ShowTooltipAliasDB'] = false;/** * are shown (in the left menu and db_structure) instead of table/db names. * Setting ShowTooltipAliasTB to 'nested' will only use the Aliases for nested * descriptors, not the table itself. * * @global boolean $cfg['ShowTooltipAliasTB'] */$cfg['ShowTooltipAliasTB'] = false;/** * display logo at top of left frame * * @global boolean $cfg['LeftDisplayLogo'] */$cfg['LeftDisplayLogo'] = true;/** * where should logo link point to (can also contain an external URL) * * @global string $cfg['LeftLogoLink'] */$cfg['LeftLogoLink'] = 'main.php';/** * whether to open the linked page in the main window ('main') or * in a new window ('new') * * @global string $cfg['LeftLogoLinkWindow'] */$cfg['LeftLogoLinkWindow'] = 'main';/** * number of recently used tables displayed in the navigation frame * * @global integer $cfg['LeftRecentTable'] */$cfg['LeftRecentTable'] = 10;/** * display a JavaScript table filter in the left frame * when more then x tables are present * * @global boolean $cfg['LeftDisplayTableFilterMinimum'] */$cfg['LeftDisplayTableFilterMinimum'] = 30;/** * display server choice at top of left frame * * @global boolean $cfg['LeftDisplayServers'] */$cfg['LeftDisplayServers'] = false;/** * server choice as links * * @global boolean $cfg['DisplayServersList'] */$cfg['DisplayServersList'] = false;/** * database choice in light as links * * @global boolean $cfg['DisplayDatabasesList'] */$cfg['DisplayDatabasesList'] = 'auto';/** * target of the navigation panel quick access icon * * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['LeftDefaultTabTable'] */$cfg['LeftDefaultTabTable'] = 'tbl_structure.php';/******************************************************************************* * In the main frame, at startup... *//** * allow to display statistics and space usage in the pages about database * details and table properties * * @global boolean $cfg['ShowStats'] */$cfg['ShowStats'] = true;/** * show PHP info link * * @global boolean $cfg['ShowPhpInfo'] */$cfg['ShowPhpInfo'] = false;/** * show MySQL server and web server information * * @global boolean $cfg['ShowServerInfo'] */$cfg['ShowServerInfo'] = true;/** * show change password link * * @global boolean $cfg['ShowChgPassword'] */$cfg['ShowChgPassword'] = true;/** * show create database form * * @global boolean $cfg['ShowCreateDb'] */$cfg['ShowCreateDb'] = true;/** * suggest a new DB name if possible (false = keep empty) * * @global boolean $cfg['SuggestDBName'] */$cfg['SuggestDBName'] = true;/******************************************************************************* * In browse mode... *//** * Use icons instead of text for the navigation bar buttons * and on right panel top menu (server db table) (true|false|'both') * * @global string $cfg['NavigationBarIconic'] */$cfg['NavigationBarIconic'] = true;/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * * @global boolean $cfg['ShowAll'] */$cfg['ShowAll'] = false;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * * @global integer $cfg['MaxRows'] */$cfg['MaxRows'] = 30;/** * default for 'ORDER BY' clause (valid values are 'ASC', 'DESC' or 'SMART' -ie * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP, * ascending order else-) * * @global string $cfg['Order'] */$cfg['Order'] = 'SMART';/** * default for 'Show binary contents as HEX' * * @global string $cfg['DisplayBinaryAsHex'] */$cfg['DisplayBinaryAsHex'] = true;/******************************************************************************* * In edit mode... *//** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * * @global string $cfg['ProtectBinary'] */$cfg['ProtectBinary'] = 'blob';/** * Display the function fields in edit/insert mode * * @global boolean $cfg['ShowFunctionFields'] */$cfg['ShowFunctionFields'] = true;/** * Display the type fields in edit/insert mode * * @global boolean $cfg['ShowFieldTypesInDataEditView'] */$cfg['ShowFieldTypesInDataEditView'] = true;/** * Which editor should be used for CHAR/VARCHAR fields: *  input - allows limiting of input length *  textarea - allows newlines in fields * * @global string $cfg['CharEditing'] */$cfg['CharEditing'] = 'input';/** * The minimum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MinSizeForInputField'] = 4;/** * The maximum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MaxSizeForInputField'] = 60;/** * How many rows can be inserted at one time * * @global integer $cfg['InsertRows'] */$cfg['InsertRows'] = 2;/** * Sort order for items in a foreign-key drop-down list. * 'content' is the referenced data, 'id' is the key value. * * @global array $cfg['ForeignKeyDropdownOrder'] */$cfg['ForeignKeyDropdownOrder'] = array('content-id', 'id-content');/** * A drop-down list will be used if fewer items are present * * @global integer $cfg['ForeignKeyMaxLimit'] */$cfg['ForeignKeyMaxLimit'] = 100;/******************************************************************************* * For the export features... *//** * Allow for the use of zip compression (requires zip support to be enabled) * * @global boolean $cfg['ZipDump'] */$cfg['ZipDump'] = true;/** * Allow for the use of gzip compression (requires zlib) * * @global boolean $cfg['GZipDump'] */$cfg['GZipDump'] = true;/** * Allow for the use of bzip2 compression (requires bz2 extension) * * @global boolean $cfg['BZipDump'] */$cfg['BZipDump'] = true;/** * Will compress gzip/bzip2 exports on the fly without the need for much memory. * If you encounter problems with created gzip/bzip2 files disable this feature. * * @global boolean $cfg['CompressOnFly'] */$cfg['CompressOnFly'] = true;/******************************************************************************* * Tabs display settings *//** * Use graphically less intense menu tabs * * @global boolean $cfg['LightTabs'] */$cfg['LightTabs'] = false;/** * Use icons instead of text for the table display of a database (true|false|'both') * * @global boolean $cfg['PropertiesIconic'] */$cfg['PropertiesIconic'] = 'both';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * * @global integer $cfg['PropertiesNumColumns'] */$cfg['PropertiesNumColumns'] = 1;/** * Possible values: * 'main.php' = the welcome page * (recommended for multiuser setups) * 'server_databases.php' = list of databases * 'server_status.php' = runtime information * 'server_variables.php' = MySQL server variables * 'server_privileges.php' = user management * 'server_processlist.php' = process list * * @global string $cfg['DefaultTabServer'] */$cfg['DefaultTabServer'] = 'main.php';/** * Possible values: * 'db_structure.php' = tables list * 'db_sql.php' = SQL form * 'db_search.php' = search query * 'db_operations.php' = operations on database * * @global string $cfg['DefaultTabDatabase'] */$cfg['DefaultTabDatabase'] = 'db_structure.php';/** * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['DefaultTabTable'] */$cfg['DefaultTabTable'] = 'sql.php';/******************************************************************************* * Export defaults */$cfg['Export'] = array();/** * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml * * @global string $cfg['Export']['format'] */$cfg['Export']['format'] = 'sql';/** * quick/custom/custom-no-form * * @global string $cfg['Export']['format'] */$cfg['Export']['method'] = 'quick';/** * none/zip/gzip/bzip2 * * @global string $cfg['Export']['compression'] */$cfg['Export']['compression'] = 'none';/** * * * @global boolean $cfg['Export']['asfile'] */$cfg['Export']['asfile'] = true;/** * * * @global string $cfg['Export']['charset'] */$cfg['Export']['charset'] = '';/** * * * @global boolean $cfg['Export']['onserver'] */$cfg['Export']['onserver'] = false;/** * * * @global boolean $cfg['Export']['onserver_overwrite'] */$cfg['Export']['onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver'] */$cfg['Export']['quick_export_onserver'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver_overwrite'] */$cfg['Export']['quick_export_onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['remember_file_template'] */$cfg['Export']['remember_file_template'] = true;/** * * * @global string $cfg['Export']['file_template_table'] */$cfg['Export']['file_template_table'] = '@TABLE@';/** * * * @global string $cfg['Export']['file_template_database'] */$cfg['Export']['file_template_database'] = '@DATABASE@';/** * * * @global string $cfg['Export']['file_template_server'] */$cfg['Export']['file_template_server'] = '@SERVER@';/** * * * @global string $cfg['Export']['codegen_structure_or_data'] */$cfg['Export']['codegen_structure_or_data'] = 'data';/** * * * @global $cfg['Export']['codegen_format'] */$cfg['Export']['codegen_format'] = 0;/** * * * @global boolean $cfg['Export']['ods_columns'] */$cfg['Export']['ods_columns'] = false;/** * * * @global string $cfg['Export']['ods_null'] */$cfg['Export']['ods_null'] = 'NULL';/** * * * @global string $cfg['Export']['odt_structure_or_data'] */$cfg['Export']['odt_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['odt_columns'] */$cfg['Export']['odt_columns'] = true;/** * * * @global boolean $cfg['Export']['odt_relation'] */$cfg['Export']['odt_relation'] = true;/** * * * @global boolean $cfg['Export']['odt_comments'] */$cfg['Export']['odt_comments'] = true;/** * * * @global boolean $cfg['Export']['odt_mime'] */$cfg['Export']['odt_mime'] = true;/** * * * @global string $cfg['Export']['odt_null'] */$cfg['Export']['odt_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['htmlword_structure_or_data'] */$cfg['Export']['htmlword_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['htmlword_columns'] */$cfg['Export']['htmlword_columns'] = false;/** * * * @global string $cfg['Export']['htmlword_null'] */$cfg['Export']['htmlword_null'] = 'NULL';/** * * * @global string $cfg['Export']['texytext_structure_or_data'] */$cfg['Export']['texytext_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['texytext_columns'] */$cfg['Export']['texytext_columns'] = false;/** * * * @global string $cfg['Export']['texytext_null'] */$cfg['Export']['texytext_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xls_columns'] */$cfg['Export']['xls_columns'] = false;/** * * * @global string $cfg['Export']['xls_structure_or_data'] */$cfg['Export']['xls_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xls_null'] */$cfg['Export']['xls_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xlsx_columns'] */$cfg['Export']['xlsx_columns'] = false;/** * * * @global string $cfg['Export']['xlsx_structure_or_data'] */$cfg['Export']['xlsx_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xlsx_null'] */$cfg['Export']['xlsx_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['csv_columns'] */$cfg['Export']['csv_columns'] = false;/** * * * @global string $cfg['Export']['csv_structure_or_data'] */$cfg['Export']['csv_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['csv_null'] */$cfg['Export']['csv_null'] = 'NULL';/** * * * @global string $cfg['Export']['csv_separator'] */$cfg['Export']['csv_separator'] = ',';/** * * * @global string $cfg['Export']['csv_enclosed'] */$cfg['Export']['csv_enclosed'] = '"';/** * * * @global string $cfg['Export']['csv_escaped'] */$cfg['Export']['csv_escaped'] = '"';/** * * * @global string $cfg['Export']['csv_terminated'] */$cfg['Export']['csv_terminated'] = 'AUTO';/** * * * @global string $cfg['Export']['csv_removeCRLF'] */$cfg['Export']['csv_removeCRLF'] = false;/** * * * @global boolean $cfg['Export']['excel_columns'] */$cfg['Export']['excel_columns'] = false;/** * * * @global string $cfg['Export']['excel_null'] */$cfg['Export']['excel_null'] = 'NULL';/** * win/mac * * @global string $cfg['Export']['excel_edition'] */$cfg['Export']['excel_edition'] = 'win';/** * * * @global string $cfg['Export']['excel_removeCRLF'] */$cfg['Export']['excel_removeCRLF'] = false;/** * * * @global string $cfg['Export']['excel_structure_or_data'] */$cfg['Export']['excel_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['latex_structure_or_data'] */$cfg['Export']['latex_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['latex_columns'] */$cfg['Export']['latex_columns'] = true;/** * * * @global boolean $cfg['Export']['latex_relation'] */$cfg['Export']['latex_relation'] = true;/** * * * @global boolean $cfg['Export']['latex_comments'] */$cfg['Export']['latex_comments'] = true;/** * * * @global boolean $cfg['Export']['latex_mime'] */$cfg['Export']['latex_mime'] = true;/** * * * @global string $cfg['Export']['latex_null'] */$cfg['Export']['latex_null'] = '\textit{NULL}';/** * * * @global boolean $cfg['Export']['latex_caption'] */$cfg['Export']['latex_caption'] = true;/** * * * @global string $cfg['Export']['latex_structure_caption'] */$cfg['Export']['latex_structure_caption'] = 'strLatexStructure';/** * * * @global string $cfg['Export']['latex_structure_continued_caption'] */$cfg['Export']['latex_structure_continued_caption'] = 'strLatexStructure strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_caption'] */$cfg['Export']['latex_data_caption'] = 'strLatexContent';/** * * * @global string $cfg['Export']['latex_data_continued_caption'] */$cfg['Export']['latex_data_continued_caption'] = 'strLatexContent strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_label'] */$cfg['Export']['latex_data_label'] = 'tab:@TABLE@-data';/** * * * @global string $cfg['Export']['latex_structure_label'] */$cfg['Export']['latex_structure_label'] = 'tab:@TABLE@-structure';/** * * * @global string $cfg['Export']['mediawiki_structure_or_data'] */$cfg['Export']['mediawiki_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['ods_structure_or_data'] */$cfg['Export']['ods_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['pdf_structure_or_data'] */$cfg['Export']['pdf_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['php_array_structure_or_data'] */$cfg['Export']['php_array_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['json_structure_or_data'] */$cfg['Export']['json_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['sql_structure_or_data'] */$cfg['Export']['sql_structure_or_data'] = 'structure_and_data';/** * * * @global string $cfg['Export']['sql_compatibility'] */$cfg['Export']['sql_compatibility'] = 'NONE';/** * Whether to include comments in SQL export. * * @global string $cfg['Export']['sql_include_comments'] */$cfg['Export']['sql_include_comments'] = true;/** * * * @global boolean $cfg['Export']['sql_disable_fk'] */$cfg['Export']['sql_disable_fk'] = false;/** * * * @global boolean $cfg['Export']['sql_use_transaction'] */$cfg['Export']['sql_use_transaction'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_database'] */$cfg['Export']['sql_drop_database'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_table'] */$cfg['Export']['sql_drop_table'] = false;/** * * * true by default for correct behavior when dealing with exporting * of VIEWs and the stand-in table * @global boolean $cfg['Export']['sql_if_not_exists'] */$cfg['Export']['sql_if_not_exists'] = true;/** * * * @global boolean $cfg['Export']['sql_procedure_function'] */$cfg['Export']['sql_procedure_function'] = true;/** * * * @global boolean $cfg['Export']['sql_auto_increment'] */$cfg['Export']['sql_auto_increment'] = true;/** * * * @global boolean $cfg['Export']['sql_backquotes'] */$cfg['Export']['sql_backquotes'] = true;/** * * * @global boolean $cfg['Export']['sql_dates'] */$cfg['Export']['sql_dates'] = false;/** * * * @global boolean $cfg['Export']['sql_relation'] */$cfg['Export']['sql_relation'] = false;/** * * * @global boolean $cfg['Export']['sql_delayed'] */$cfg['Export']['sql_delayed'] = false;/** * * * @global boolean $cfg['Export']['sql_ignore'] */$cfg['Export']['sql_ignore'] = false;/** * Export time in UTC. * * @global boolean $cfg['Export']['sql_utc_time'] */$cfg['Export']['sql_utc_time'] = true;/** * * * @global boolean $cfg['Export']['sql_hex_for_blob'] */$cfg['Export']['sql_hex_for_blob'] = true;/** * insert/update/replace * * @global string $cfg['Export']['sql_type'] */$cfg['Export']['sql_type'] = 'INSERT';/** * * * @global integer $cfg['Export']['sql_max_query_size'] */$cfg['Export']['sql_max_query_size'] = 50000;/** * * * @global boolean $cfg['Export']['sql_comments'] */$cfg['Export']['sql_comments'] = false;/** * * * @global boolean $cfg['Export']['sql_mime'] */$cfg['Export']['sql_mime'] = false;/** * \n is replaced by new line * * @global string $cfg['Export']['sql_header_comment'] */$cfg['Export']['sql_header_comment'] = '';/** * * * @global boolean $cfg['Export']['sql_create_table_statements'] */$cfg['Export']['sql_create_table_statements'] = true;/** * Whether to use complete inserts, extended inserts, both, or neither * * @global string $cfg['Export']['sql_insert_syntax'] */$cfg['Export']['sql_insert_syntax'] = 'both';/** * * * @global string $cfg['Export']['pdf_report_title'] */$cfg['Export']['pdf_report_title'] = '';/** * * *@global string $cfg['Export']['xml_structure_or_data'] */$cfg['Export']['xml_structure_or_data'] = 'data';/** * Export schema for each structure * * @global string $cfg['Export']['xml_export_struc'] */$cfg['Export']['xml_export_struc'] = true;/** * Export functions * * @global string $cfg['Export']['xml_export_functions'] */$cfg['Export']['xml_export_functions'] = true;/** * Export procedures * * @global string $cfg['Export']['xml_export_procedures'] */$cfg['Export']['xml_export_procedures'] = true;/** * Export schema for each table * * @global string $cfg['Export']['xml_export_tables'] */$cfg['Export']['xml_export_tables'] = true;/** * Export triggers * * @global string $cfg['Export']['xml_export_triggers'] */$cfg['Export']['xml_export_triggers'] = true;/** * Export views * * @global string $cfg['Export']['xml_export_views'] */$cfg['Export']['xml_export_views'] = true;/** * Export contents data * * @global string $cfg['Export']['xml_export_contents'] */$cfg['Export']['xml_export_contents'] = true;/** * * * @global string $cfg['Export']['yaml_structure_or_data'] */$cfg['Export']['yaml_structure_or_data'] = 'data';/******************************************************************************* * Import defaults */$cfg['Import'] = array();/** * * * @global string $cfg['Import']['format'] */$cfg['Import']['format'] = 'sql';/** * Default charset for import. * * @global string $cfg['Import']['charset'] */$cfg['Import']['charset'] = '';/** * * * @global boolean $cfg['Import']['allow_interrupt'] */$cfg['Import']['allow_interrupt'] = true;/** * * * @global integer $cfg['Import']['skip_queries'] */$cfg['Import']['skip_queries'] = 0;/** * * * @global string $cfg['Import']['sql_compatibility'] */$cfg['Import']['sql_compatibility'] = 'NONE';/** * * * @global string $cfg['Import']['sql_no_auto_value_on_zero'] */$cfg['Import']['sql_no_auto_value_on_zero'] = true;/** * * * @global boolean $cfg['Import']['csv_replace'] */$cfg['Import']['csv_replace'] = false;/** * * * @global boolean $cfg['Import']['csv_ignore'] */$cfg['Import']['csv_ignore'] = false;/** * * * @global string $cfg['Import']['csv_terminated'] */$cfg['Import']['csv_terminated'] = ',';/** * * * @global string $cfg['Import']['csv_enclosed'] */$cfg['Import']['csv_enclosed'] = '"';/** * * * @global string $cfg['Import']['csv_escaped'] */$cfg['Import']['csv_escaped'] = '"';/** * * * @global string $cfg['Import']['csv_new_line'] */$cfg['Import']['csv_new_line'] = 'auto';/** * * * @global string $cfg['Import']['csv_columns'] */$cfg['Import']['csv_columns'] = '';/** * * * @global string $cfg['Import']['csv_col_names'] */$cfg['Import']['csv_col_names'] = false;/** * * * @global boolean $cfg['Import']['ldi_replace'] */$cfg['Import']['ldi_replace'] = false;/** * * * @global boolean $cfg['Import']['ldi_ignore'] */$cfg['Import']['ldi_ignore'] = false;/** * * * @global string $cfg['Import']['ldi_terminated'] */$cfg['Import']['ldi_terminated'] = ';';/** * * * @global string $cfg['Import']['ldi_enclosed'] */$cfg['Import']['ldi_enclosed'] = '"';/** * * * @global string $cfg['Import']['ldi_escaped'] */$cfg['Import']['ldi_escaped'] = '\\';/** * * * @global string $cfg['Import']['ldi_new_line'] */$cfg['Import']['ldi_new_line'] = 'auto';/** * * * @global string $cfg['Import']['ldi_columns'] */$cfg['Import']['ldi_columns'] = '';/** * 'auto' for auto-detection, true or false for forcing * * @global string $cfg['Import']['ldi_local_option'] */$cfg['Import']['ldi_local_option'] = 'auto';/** * * * @global string $cfg['Import']['ods_col_names'] */$cfg['Import']['ods_col_names'] = false;/** * * * @global string $cfg['Import']['ods_empty_rows'] */$cfg['Import']['ods_empty_rows'] = true;/** * * * @global string $cfg['Import']['ods_recognize_percentages'] */$cfg['Import']['ods_recognize_percentages'] = true;/** * * * @global string $cfg['Import']['ods_recognize_currency'] */$cfg['Import']['ods_recognize_currency'] = true;/** * * * @global string $cfg['Import']['xml_col_names'] */$cfg['Import']['xls_col_names'] = false;/** * * * @global string $cfg['Import']['xml_empty_rows'] */$cfg['Import']['xls_empty_rows'] = true;/** * * * @global string $cfg['Import']['xlsx_col_names'] */$cfg['Import']['xlsx_col_names'] = false;/** * Link to the official MySQL documentation. * Be sure to include no trailing slash on the path. * See http://dev.mysql.com/doc/ for more information * about MySQL manuals and their types. * * @global string $cfg['MySQLManualBase'] */$cfg['MySQLManualBase'] = 'http://dev.mysql.com/doc/refman';/** * Type of MySQL documentation: *   viewable   - "viewable online", current one used on MySQL website *   searchable - "Searchable, with user comments" *   chapters   - "HTML, one page per chapter" *   chapters_old - "HTML, one page per chapter", format used prior to MySQL 5.0 release *   big        - "HTML, all on one page" *   old        - old style used in phpMyAdmin 2.3.0 and sooner *   none       - do not show documentation links * * @global string $cfg['MySQLManualType'] */$cfg['MySQLManualType'] = 'viewable';/******************************************************************************* * PDF options *//** * * * @global array $cfg['PDFPageSizes'] */$cfg['PDFPageSizes'] = array('A3', 'A4', 'A5', 'letter', 'legal');/** * * * @global string $cfg['PDFDefaultPageSize'] */$cfg['PDFDefaultPageSize'] = 'A4';/******************************************************************************* * Language and character set conversion settings *//** * Default language to use, if not browser-defined or user-defined * * @global string $cfg['DefaultLang'] */$cfg['DefaultLang'] = 'en';/** * Default connection collation * * @global string $cfg['DefaultConnectionCollation'] */$cfg['DefaultConnectionCollation'] = 'utf8_general_ci';/** * Force: always use this language * $cfg['Lang'] = 'en'; * * Regular expression to limit listed languages, e.g. '^(cs|en)' for Czech and * English only * * @global string $cfg['FilterLanguages'] */$cfg['FilterLanguages'] = '';/** * You can select here which functions will be used for character set conversion. * Possible values are: *      auto   - automatically use available one (first is tested iconv, then *               recode) *      iconv  - use iconv or libiconv functions *      recode - use recode_string function *      none   - disable encoding conversion * * @global string $cfg['RecodingEngine'] */$cfg['RecodingEngine'] = 'auto';/** * Specify some parameters for iconv used in character set conversion. See iconv * documentation for details: * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html * * @global string $cfg['IconvExtraParams'] */$cfg['IconvExtraParams'] = '//TRANSLIT';/** * Available character sets for MySQL conversion. currently contains all which could * be found in lang/* files and few more. * Character sets will be shown in same order as here listed, so if you frequently * use some of these move them to the top. * * @global array $cfg['AvailableCharsets'] */$cfg['AvailableCharsets'] = array(    'iso-8859-1',    'iso-8859-2',    'iso-8859-3',    'iso-8859-4',    'iso-8859-5',    'iso-8859-6',    'iso-8859-7',    'iso-8859-8',    'iso-8859-9',    'iso-8859-10',    'iso-8859-11',    'iso-8859-12',    'iso-8859-13',    'iso-8859-14',    'iso-8859-15',    'windows-1250',    'windows-1251',    'windows-1252',    'windows-1256',    'windows-1257',    'koi8-r',    'big5',    'gb2312',    'utf-16',    'utf-8',    'utf-7',    'x-user-defined',    'euc-jp',    'ks_c_5601-1987',    'tis-620',    'SHIFT_JIS');/******************************************************************************* * Customization & design * * The graphical settings are now located in themes/theme-name/layout.inc.php *//** * enable the left panel pointer * (used when LeftFrameLight is false) * see also LeftPointerColor * in layout.inc.php * * @global boolean $cfg['LeftPointerEnable'] */$cfg['LeftPointerEnable'] = true;/** * enable the browse pointer * see also BrowsePointerColor * in layout.inc.php * * @global boolean $cfg['BrowsePointerEnable'] */$cfg['BrowsePointerEnable'] = true;/** * enable the browse marker * see also BrowseMarkerColor * in layout.inc.php * * @global boolean $cfg['BrowseMarkerEnable'] */$cfg['BrowseMarkerEnable'] = true;/** * textarea size (columns) in edit mode * (this value will be emphasized (*2) for SQL * query textareas and (*1.25) for query window) * * @global integer $cfg['TextareaCols'] */$cfg['TextareaCols'] = 40;/** * textarea size (rows) in edit mode * * @global integer $cfg['TextareaRows'] */$cfg['TextareaRows'] = 15;/** * double size of textarea size for LONGTEXT columns * * @global boolean $cfg['LongtextDoubleTextarea'] */$cfg['LongtextDoubleTextarea'] = true;/** * auto-select when clicking in the textarea of the query-box * * @global boolean $cfg['TextareaAutoSelect'] */$cfg['TextareaAutoSelect'] = false;/** * textarea size (columns) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaCols'] */$cfg['CharTextareaCols'] = 40;/** * textarea size (rows) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaRows'] */$cfg['CharTextareaRows'] = 2;/** * Max field data length in browse mode for all non-numeric fields * * @global integer $cfg['LimitChars'] */$cfg['LimitChars'] = 50;/** * Where to show the edit/copy/delete links in browse mode * Possible values are 'left', 'right', 'both' and 'none'; * which will be interpreted as 'top', 'bottom', 'both' and 'none' * respectively for vertical display mode * * @global string $cfg['RowActionLinks'] */$cfg['RowActionLinks'] = 'left';/** * default display direction (horizontal|vertical|horizontalflipped) * * @global string $cfg['DefaultDisplay'] */$cfg['DefaultDisplay'] = 'horizontal';/** * remember the last way a table sorted * * @global string $cfg['RememberSorting'] */$cfg['RememberSorting'] = true;/** * table-header rotation via faking or CSS? (css|fake|auto) * NOTE: CSS only works in IE browsers! * * @global string $cfg['HeaderFlipType'] */$cfg['HeaderFlipType'] = 'auto';/** * shows stored relation-comments in 'browse' mode. * * @global boolean $cfg['ShowBrowseComments'] */$cfg['ShowBrowseComments'] = true;/** * shows stored relation-comments in 'table property' mode. * * @global boolean $cfg['ShowPropertyComments'] */$cfg['ShowPropertyComments']= true;/** * save edited cell(s) in browse-mode at once. */$cfg['SaveCellsAtOnce'] = false;/** * shows table display direction. */$cfg['ShowDisplayDirection'] = false;/** * repeat header names every X cells? (0 = deactivate) * * @global integer $cfg['RepeatCells'] */$cfg['RepeatCells'] = 100;/** * Set to true if Edit link should open the query to edit in the query window * (assuming JavaScript is enabled), and to false if we should edit in the right panel * * @global boolean $cfg['EditInWindow'] */$cfg['EditInWindow'] = true;/** * Width of Query window * * @global integer $cfg['QueryWindowWidth'] */$cfg['QueryWindowWidth'] = 550;/** * Height of Query window * * @global integer $cfg['QueryWindowHeight'] */$cfg['QueryWindowHeight'] = 310;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * @global boolean $cfg['QueryHistoryDB'] */$cfg['QueryHistoryDB'] = false;/** * which tab to display in the querywindow on startup * (sql|files|history|full) * * @global string $cfg['QueryWindowDefTab'] */$cfg['QueryWindowDefTab'] = 'sql';/** * When using DB-based query history, how many entries should be kept? * * @global integer $cfg['QueryHistoryMax'] */$cfg['QueryHistoryMax'] = 25;/** * Use MIME-Types (stored in column comments table) for * * @global boolean $cfg['BrowseMIME'] */$cfg['BrowseMIME'] = true;/** * When approximate count < this, PMA will get exact count for table rows. * * @global integer $cfg['MaxExactCount'] */$cfg['MaxExactCount'] = 20000;/** * Zero means that no row count is done for views; see the doc * * @global integer $cfg['MaxExactCountViews'] */$cfg['MaxExactCountViews'] = 100000;/** * Sort table and database in natural order * * @global boolean $cfg['NaturalOrder'] */$cfg['NaturalOrder'] = true;/** * Initial state for sliders * (open | closed | disabled) * * @global string $cfg['InitialSlidersState'] */$cfg['InitialSlidersState'] = 'closed';/** * User preferences: disallow these settings * For possible setting names look in libraries/config/user_preferences.forms.php * * @global array $cfg['UserprefsDisallow'] */$cfg['UserprefsDisallow'] = array();/** * User preferences: enable the Developer tab */$cfg['UserprefsDeveloperTab'] = false;/******************************************************************************* * Window title settings *//** * title of browser window when a table is selected * * @global string $cfg['TitleTable'] */$cfg['TitleTable'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ / @TABLE@ | @PHPMYADMIN@';/** * title of browser window when a database is selected * * @global string $cfg['TitleDatabase'] */$cfg['TitleDatabase'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ | @PHPMYADMIN@';/** * title of browser window when a server is selected * * @global string $cfg['TitleServer'] */$cfg['TitleServer'] = '@HTTP_HOST@ / @VSERVER@ | @PHPMYADMIN@';/** * title of browser window when nothing is selected * @global string $cfg['TitleDefault'] */$cfg['TitleDefault'] = '@HTTP_HOST@ | @PHPMYADMIN@';/** * show some icons for warning, error and information messages (true|false)? * * @global boolean $cfg['ErrorIconic'] */$cfg['ErrorIconic'] = true;/** * show icons in list on main page and on menu tabs (true|false)? * * @global boolean $cfg['MainPageIconic'] */$cfg['MainPageIconic'] = true;/** * show help button instead of Documentation text (true|false)? * * @global boolean $cfg['ReplaceHelpImg'] */$cfg['ReplaceHelpImg'] = true;/******************************************************************************* * theme manager *//** * using themes manager please set up here the path to 'themes' else leave empty * * @global string $cfg['ThemePath'] */$cfg['ThemePath'] = './themes';/** * if you want to use selectable themes and if ThemesPath not empty * set it to true, else set it to false (default is false); * * @global boolean $cfg['ThemeManager'] */$cfg['ThemeManager'] = true;/** * set up default theme, if ThemePath not empty you can set up here an valid * path to themes or 'original' for the original pma-theme * * @global string $cfg['ThemeDefault'] */$cfg['ThemeDefault'] = 'pmahomme';/** * allow different theme for each configured server * * @global boolean $cfg['ThemePerServer'] */$cfg['ThemePerServer'] = false;/******************************************************************************* * *//** * Default query for table * * @global string $cfg['DefaultQueryTable'] */$cfg['DefaultQueryTable'] = 'SELECT * FROM @TABLE@ WHERE 1';/** * Default query for database * * @global string $cfg['DefaultQueryDatabase'] */$cfg['DefaultQueryDatabase'] = '';/******************************************************************************* * SQL Query box settings * These are the links display in all of the SQL Query boxes * * @global array $cfg['SQLQuery'] */$cfg['SQLQuery'] = array();/** * Edit link to change a query * * @global boolean $cfg['SQLQuery']['Edit'] */$cfg['SQLQuery']['Edit'] = true;/** * EXPLAIN on SELECT queries * * @global boolean $cfg['SQLQuery']['Explain'] */$cfg['SQLQuery']['Explain'] = true;/** * Wrap a query in PHP * * @global boolean $cfg['SQLQuery']['ShowAsPHP'] */$cfg['SQLQuery']['ShowAsPHP'] = true;/** * Validate a query (see $cfg['SQLValidator'] as well) * * @global boolean $cfg['SQLQuery']['Validate'] */$cfg['SQLQuery']['Validate'] = false;/** * Refresh the results page * * @global boolean $cfg['SQLQuery']['Refresh'] */$cfg['SQLQuery']['Refresh'] = true;/******************************************************************************* * Web server upload/save/import directories *//** * Directory for uploaded files that can be executed by phpMyAdmin. * For example './upload'. Leave empty for no upload directory support. * Use %u for username inclusion. * * @global string $cfg['UploadDir'] */$cfg['UploadDir'] = '';/** * Directory where phpMyAdmin can save exported data on server. * For example './save'. Leave empty for no save directory support. * Use %u for username inclusion. * * @global string $cfg['SaveDir'] */$cfg['SaveDir'] = '';/** * Directory where phpMyAdmin can save temporary files. * This is needed for MS Excel export, see documentation how to enable that. * * @global string $cfg['TempDir'] */$cfg['TempDir'] = '';/** * Misc. settings *//** * Is GD >= 2 available? Set to yes/no/auto. 'auto' does auto-detection, * which is the only safe way to determine GD version. * * @global string $cfg['GD2Available'] */$cfg['GD2Available'] = 'auto';/** * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny * * @global array $cfg['TrustedProxies'] */$cfg['TrustedProxies'] = array();/** * We normally check the permissions on the configuration file to ensure * it's not world writable. However, phpMyAdmin could be installed on * a NTFS filesystem mounted on a non-Windows server, in which case the * permissions seems wrong but in fact cannot be detected. In this case * a sysadmin would set the following to false. */$cfg['CheckConfigurationPermissions'] = true;/** * Limit for length of URL in links. When length would be above this limit, it * is replaced by form with button. * This is required as some web servers (IIS) have problems with long URLs. * The recommended limit is 2000 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put * 1000 to accommodate Suhosin, see bug #3358750. */$cfg['LinkLengthLimit'] = 1000;/** * Disable the table maintenance mass operations, like optimizing or * repairing the selected tables of a database. An accidental execution * of such a maintenance task can enormously slow down a bigger database. */$cfg['DisableMultiTableMaintenance'] = false;/******************************************************************************* * SQL Parser Settings * * @global array $cfg['SQP'] */$cfg['SQP'] = array();/** * Pretty-printing style to use on queries (html, text, none) * * @global string $cfg['SQP']['fmtType'] */$cfg['SQP']['fmtType'] = 'html';/** * Amount to indent each level (floats are valid) * * @global integer $cfg['SQP']['fmtInd'] */$cfg['SQP']['fmtInd'] = '1';/** * Units for indenting each level (CSS Types - {em, px, pt}) * * @global string $cfg['SQP']['fmtIndUnit'] */$cfg['SQP']['fmtIndUnit'] = 'em';/******************************************************************************* * If you wish to use the SQL Validator service, you should be aware of the * following: * All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved. * * @global array $cfg['SQLValidator'] */$cfg['SQLValidator'] = array();/** * Make the SQL Validator available * * @global boolean $cfg['SQLValidator']['use'] */$cfg['SQLValidator']['use'] = false;/** * If you have a custom username, specify it here (defaults to anonymous) * * @global string $cfg['SQLValidator']['username'] */$cfg['SQLValidator']['username'] = '';/** * Password for username * * @global string $cfg['SQLValidator']['password'] */$cfg['SQLValidator']['password'] = '';/******************************************************************************* * Developers ONLY! * * @global array $cfg['DBG'] */$cfg['DBG'] = array();/** * Output executed queries and their execution times * * @global boolean $cfg['DBG']['sql'] */$cfg['DBG']['sql'] = false;/******************************************************************************* * MySQL settings *//** * Column types; * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity * * This variable is filled in data_*.inc.php * * @global array $cfg['ColumnTypes'] */$cfg['ColumnTypes'] = array();/** * Attributes * * This variable is filled in data_*.inc.php * * @global array $cfg['AttributeTypes'] */$cfg['AttributeTypes'] = array();if ($cfg['ShowFunctionFields']) {    /**     * Available functions     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['Functions']     */    $cfg['Functions'] = array();    /**     * Which column types will be mapped to which Group?     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictColumnTypes']     */    $cfg['RestrictColumnTypes'] = array();    /**     * Map above defined groups to any function     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictFunctions']     */    $cfg['RestrictFunctions'] = array();    /**     * Default functions for above defined groups     *     * @global array $cfg['DefaultFunctions']     */    $cfg['DefaultFunctions'] = array(        'FUNC_CHAR' => '',        'FUNC_DATE' => '',        'FUNC_NUMBER' => '',        'FUNC_SPATIAL' => 'GeomFromText',        'FUNC_UUID' => 'UUID',        'first_timestamp' => 'NOW',    );} // end if/** * Search operators * * @global array $cfg['NumOperators'] */$cfg['NumOperators'] = array(   '=',   '>',   '>=',   '<',   '<=',   '!=',   'LIKE',   'NOT LIKE',   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['TextOperators'] */$cfg['TextOperators'] = array(   'LIKE',   'LIKE %...%',   'NOT LIKE',   '=',   '!=',   'REGEXP',   'REGEXP ^...$',   'NOT REGEXP',   "= ''",   "!= ''",   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['EnumOperators'] */$cfg['EnumOperators'] = array(   '=',   '!=',);/** * Search operators * * @global array $cfg['SetOperators'] */$cfg['SetOperators'] = array(   'IN',   'NOT IN',);/** * Search operators * * @global array $cfg['NullOperators'] */$cfg['NullOperators'] = array(   'IS NULL',   'IS NOT NULL',);/** * Search operators * * @global array $cfg['UnaryOperators'] */$cfg['UnaryOperators'] = array(   'IS NULL' => 1,   'IS NOT NULL' => 1,   "= ''" => 1,   "!= ''" => 1);/** * Max rows retreived for zoom search */$cfg['maxRowPlotLimit'] = 500;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';require_once './libraries/sql_query_form.lib.php';$err_url   = 'tbl_sql.php' . $err_url;// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'tbl_sql.php';$back = 'tbl_sql.php';/** * Get table information */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Database with allowed values for configuration stored in the $cfg array, * used by setup script and user preferences to generate forms. * * @package PhpMyAdmin */if (!defined('PHPMYADMIN')) {    exit;}/** * Value meaning: * o array - select field, array contains allowed values * o string - type override * * Use normal array, paths won't be expanded */$cfg_db = array();$cfg_db['Servers'] = array(1 => array(    'port'         => 'integer',    'connect_type' => array('tcp', 'socket'),    'extension'    => array('mysql', 'mysqli'),    'auth_type'    => array('config', 'http', 'signon', 'cookie'),    'AllowDeny'    => array(        'order'    => array('', 'deny,allow', 'allow,deny', 'explicit')),    'only_db'      => 'array'));$cfg_db['RecodingEngine'] = array('auto', 'iconv', 'recode', 'none');$cfg_db['OBGzip'] = array('auto', true, false);$cfg_db['MemoryLimit'] = 'short_string';$cfg_db['ShowTooltipAliasTB'] = array('nested', true, false);$cfg_db['DisplayDatabasesList'] = array('auto', true, false);$cfg_db['LeftLogoLinkWindow'] = array('main', 'new');$cfg_db['LeftDefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['LeftFrameDBSeparator'] = 'short_string';$cfg_db['LeftFrameTableSeparator'] = 'short_string';$cfg_db['NavigationBarIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['Order'] = array('ASC', 'DESC', 'SMART');$cfg_db['RowActionLinks'] = array('none' => __('Nowhere'), 'left' => __('Left'), 'right' => __('Right'), 'both' => __('Both'));$cfg_db['ProtectBinary'] = array(false, 'blob', 'all');$cfg_db['DefaultDisplay'] = array('horizontal', 'vertical', 'horizontalflipped');$cfg_db['CharEditing'] = array('input', 'textarea');$cfg_db['PropertiesIconic'] = array(true => __('Yes'), false => __('No'), 'both' => __('Both'));$cfg_db['DefaultTabServer'] = array(    'main.php',                // the welcome page (recommended for multiuser setups)    'server_databases.php',    // list of databases    'server_status.php',       // runtime information    'server_variables.php',    // MySQL server variables    'server_privileges.php',   // user management    'server_processlist.php'); // process list$cfg_db['DefaultTabDatabase'] = array(    'db_structure.php',   // tables list    'db_sql.php',         // SQL form    'db_search.php',      // search query    'db_operations.php'); // operations on database$cfg_db['DefaultTabTable'] = array(    'tbl_structure.php', // fields list    'tbl_sql.php',       // SQL form    'tbl_select.php',    // search page    'tbl_change.php',    // insert row page    'sql.php');          // browse page$cfg_db['QueryWindowDefTab'] = array(    'sql',     // SQL    'files',   // Import files    'history', // SQL history    'full');   // All (SQL and SQL history)$cfg_db['InitialSlidersState'] = array(    'open' => __('Open'),     'closed' => __('Closed'),    'disabled' => __('Disabled'));$cfg_db['Import']['format'] = array(    'csv',    // CSV    'docsql', // DocSQL    'ldi',    // CSV using LOAD DATA    'sql');   // SQL$cfg_db['Import']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Import']['sql_compatibility'] = $cfg_db['Export']['sql_compatibility'] = array(    'NONE', 'ANSI', 'DB2', 'MAXDB', 'MYSQL323', 'MYSQL40', 'MSSQL', 'ORACLE',    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //'POSTGRESQL',    'TRADITIONAL');$cfg_db['Import']['csv_terminated'] = 'short_string';$cfg_db['Import']['csv_enclosed'] = 'short_string';$cfg_db['Import']['csv_escaped'] = 'short_string';$cfg_db['Import']['ldi_terminated'] = 'short_string';$cfg_db['Import']['ldi_enclosed'] = 'short_string';$cfg_db['Import']['ldi_escaped'] = 'short_string';$cfg_db['Import']['ldi_local_option'] = array('auto', true, false);$cfg_db['Export']['_sod_select'] = array(    'structure' => __('structure'),    'data' => __('data'),    'structure_and_data' => __('structure and data'));$cfg_db['Export']['method'] = array(    'quick' => __('Quick - display only the minimal options to configure'),    'custom' => __('Custom - display all possible options to configure'),    'custom-no-form' => __('Custom - like above, but without the quick/custom choice'));$cfg_db['Export']['format'] = array('codegen', 'csv', 'excel', 'htmlexcel',    'htmlword', 'latex', 'ods', 'odt', 'pdf', 'sql', 'texytext', 'xls', 'xml',    'yaml');$cfg_db['Export']['compression'] = array('none', 'zip', 'gzip', 'bzip2');$cfg_db['Export']['charset'] = array_merge(array(''), $GLOBALS['cfg']['AvailableCharsets']);$cfg_db['Export']['codegen_format'] = array('#', 'NHibernate C# DO', 'NHibernate XML');$cfg_db['Export']['csv_separator'] = 'short_string';$cfg_db['Export']['csv_terminated'] = 'short_string';$cfg_db['Export']['csv_enclosed'] = 'short_string';$cfg_db['Export']['csv_escaped'] = 'short_string';$cfg_db['Export']['csv_null'] = 'short_string';$cfg_db['Export']['excel_null'] = 'short_string';$cfg_db['Export']['excel_edition'] = array('win' => 'Windows',    'mac_excel2003' => 'Excel 2003 / Macintosh', 'mac_excel2008' => 'Excel 2008 / Macintosh');$cfg_db['Export']['sql_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['sql_type'] = array('INSERT', 'UPDATE', 'REPLACE');$cfg_db['Export']['sql_insert_syntax'] = array(    'complete' => __('complete inserts'),    'extended' => __('extended inserts'),    'both' => __('both of the above'),    'none' => __('neither of the above'));$cfg_db['Export']['xls_null'] = 'short_string';$cfg_db['Export']['xlsx_null'] = 'short_string';$cfg_db['Export']['htmlword_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['htmlword_null'] = 'short_string';$cfg_db['Export']['ods_null'] = 'short_string';$cfg_db['Export']['odt_null'] = 'short_string';$cfg_db['Export']['odt_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_structure_or_data'] = $cfg_db['Export']['_sod_select'];$cfg_db['Export']['texytext_null'] = 'short_string';/** * Default values overrides * Use only full paths */$cfg_db['_overrides'] = array();$cfg_db['_overrides']['Servers/1/extension'] = extension_loaded('mysqli')    ? 'mysqli' : 'mysql';/** * Basic validator assignments (functions from libraries/config/validate.lib.php and 'validators' * object in js/config.js) * Use only full paths and form ids */$cfg_db['_validators'] = array(    'CharTextareaCols' => 'validate_positive_number',    'CharTextareaRows' => 'validate_positive_number',    'ExecTimeLimit' => 'validate_non_negative_number',    'Export/sql_max_query_size' => 'validate_positive_number',    'ForeignKeyMaxLimit' => 'validate_positive_number',    'Import/csv_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/csv_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/csv_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_enclosed' => array(array('validate_by_regex', '/^.?$/')),    'Import/ldi_escaped' => array(array('validate_by_regex', '/^.$/')),    'Import/ldi_terminated' => array(array('validate_by_regex', '/^.$/')),    'Import/skip_queries' => 'validate_non_negative_number',    'InsertRows' => 'validate_positive_number',    'LeftFrameTableLevel' => 'validate_positive_number',    'LeftRecentTable' => 'validate_non_negative_number',    'LimitChars' => 'validate_positive_number',    'LoginCookieValidity' => 'validate_positive_number',    'LoginCookieStore' => 'validate_non_negative_number',    'MaxDbList' => 'validate_positive_number',    'MaxCharactersInDisplayedSQL' => 'validate_positive_number',    'MaxRows' => 'validate_positive_number',    'MaxTableList' => 'validate_positive_number',    'MemoryLimit' => array(array('validate_by_regex', '/^\d+(?:[kmg])?$/i')),    'QueryHistoryMax' => 'validate_positive_number',    'QueryWindowWidth' => 'validate_positive_number',    'QueryWindowHeight' => 'validate_positive_number',    'RepeatCells' => 'validate_non_negative_number',    'Server' => 'validate_server',    'Server_pmadb' => 'validate_pmadb',    'Servers/1/port' => 'validate_port_number',    'Servers/1/hide_db' => 'validate_regex',    'TextareaCols' => 'validate_positive_number',    'TextareaRows' => 'validate_positive_number',    'TrustedProxies' => 'validate_trusted_proxies');/** * Additional validators used for user preferences */$cfg_db['_userValidators'] = array(    'MaxDbList' => array(array('validate_upper_bound', 'value:MaxDbList')),    'MaxTableList' => array(array('validate_upper_bound', 'value:MaxTableList')),    'QueryHistoryMax' => array(array('validate_upper_bound', 'value:QueryHistoryMax')),);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** SQL Parser Functions for phpMyAdmin * * These functions define an SQL parser system, capable of understanding and * extracting data from a MySQL type SQL query. * * The basic procedure for using the new SQL parser: * On any page that needs to extract data from a query or to pretty-print a * query, you need code like this up at the top: * * ($sql contains the query) * $parsed_sql = PMA_SQP_parse($sql); * * If you want to extract data from it then, you just need to run * $sql_info = PMA_SQP_analyze($parsed_sql); * * See comments in PMA_SQP_analyze for the returned info * from the analyzer. * * If you want a pretty-printed version of the query, do: * $string = PMA_SQP_formatHtml($parsed_sql); * (note that that you need to have syntax.css.php included somehow in your * page for it to work, I recommend '<link rel="stylesheet" type="text/css" * href="syntax.css.php" />' at the moment.) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Minimum inclusion? (i.e. for the stylesheet builder) */if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Include the string library as we use it heavily     */    include_once './libraries/string.lib.php';    /**     * Include data for the SQL Parser     */    include_once './libraries/sqlparser.data.php';    if (!defined('TESTSUITE')) {        include_once './libraries/mysql_charsets.lib.php';    }    if (! isset($mysql_charsets)) {        $mysql_charsets = array();        $mysql_collations_flat = array();    }    if (!defined('DEBUG_TIMING')) {        /**         * currently we don't need the $pos (token position in query)         * for other purposes than LIMIT clause verification,         * so many calls to this function do not include the 4th parameter         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            $arr[] = array('type' => $type, 'data' => $data, 'pos' => $pos);            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } else {        /**         * This is debug variant of above.         * @ignore         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            global $timer;            $t     = $timer;            $arr[] = array(                'type' => $type,                'data' => $data,                'pos' => $pos,                'time' => $t);            $timer = microtime();            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } // end if... else...    /**     * Reset the error variable for the SQL parser     *     * @access public     */    function PMA_SQP_resetError()    {        global $SQP_errorString;        $SQP_errorString = '';        unset($SQP_errorString);    }    /**     * Get the contents of the error variable for the SQL parser     *     * @return string Error string from SQL parser     *     * @access public     */    function PMA_SQP_getErrorString()    {        global $SQP_errorString;        return isset($SQP_errorString) ? $SQP_errorString : '';    }    /**     * Check if the SQL parser hit an error     *     * @return boolean error state     *     * @access public     */    function PMA_SQP_isError()    {        global $SQP_errorString;        return isset($SQP_errorString) && !empty($SQP_errorString);    }    /**     * Set an error message for the system     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access private     * @scope SQL Parser internal     */    function PMA_SQP_throwError($message, $sql)    {        global $SQP_errorString;        $SQP_errorString = '<p>'.__('There seems to be an error in your SQL query. The MySQL server error output below, if there is any, may also help you in diagnosing the problem') . '</p>' . "\n"            . '<pre>' . "\n"            . 'ERROR: ' . $message . "\n"            . 'SQL: ' . htmlspecialchars($sql) .  "\n"            . '</pre>' . "\n";    } // end of the "PMA_SQP_throwError()" function    /**     * Do display the bug report     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access public     */    function PMA_SQP_bug($message, $sql)    {        global $SQP_errorString;        $debugstr = 'ERROR: ' . $message . "\n";        $debugstr .= 'MySQL: '.PMA_MYSQL_STR_VERSION . "\n";        $debugstr .= 'USR OS, AGENT, VER: ' . PMA_USR_OS . ' ';        $debugstr .= PMA_USR_BROWSER_AGENT . ' ' . PMA_USR_BROWSER_VER . "\n";        $debugstr .= 'PMA: ' . PMA_VERSION . "\n";        $debugstr .= 'PHP VER,OS: ' . PMA_PHP_STR_VERSION . ' ' . PHP_OS . "\n";        $debugstr .= 'LANG: ' . $GLOBALS['lang'] . "\n";        $debugstr .= 'SQL: ' . htmlspecialchars($sql);        $encodedstr     = $debugstr;        if (@function_exists('gzcompress')) {            $encodedstr = gzcompress($debugstr, 9);        }        $encodedstr     = preg_replace(            "/(\015\012)|(\015)|(\012)/",            '<br />' . "\n",            chunk_split(base64_encode($encodedstr)));        $SQP_errorString .= __('There is a chance that you may have found a bug in the SQL parser. Please examine your query closely, and check that the quotes are correct and not mis-matched. Other possible failure causes may be that you are uploading a file with binary outside of a quoted text area. You can also try your query on the MySQL command line interface. The MySQL server error output below, if there is any, may also help you in diagnosing the problem. If you still have problems or if the parser fails where the command line interface succeeds, please reduce your SQL query input to the single query that causes problems, and submit a bug report with the data chunk in the CUT section below:')             . '<br />' . "\n"             . '----' . __('BEGIN CUT') . '----' . '<br />' . "\n"             . $encodedstr . "\n"             . '----' . __('END CUT') . '----' . '<br />' . "\n";        $SQP_errorString .= '----' . __('BEGIN RAW') . '----<br />' . "\n"             . '<pre>' . "\n"             . $debugstr             . '</pre>' . "\n"             . '----' . __('END RAW') . '----<br />' . "\n";    } // end of the "PMA_SQP_bug()" function    /**     * Parses the SQL queries     *     * @param string   The SQL query list     *     * @return mixed    Most of times, nothing...     *     * @global array    The current PMA configuration     * @global array    MySQL column attributes     * @global array    MySQL reserved words     * @global array    MySQL column types     * @global array    MySQL function names     * @global array    List of available character sets     * @global array    List of available collations     *     * @access public     */    function PMA_SQP_parse($sql)    {        static $PMA_SQPdata_column_attrib, $PMA_SQPdata_reserved_word;        static $PMA_SQPdata_column_type;        static $PMA_SQPdata_function_name, $PMA_SQPdata_forbidden_word;        global $mysql_charsets, $mysql_collations_flat;        // Convert all line feeds to Unix style        $sql = str_replace("\r\n", "\n", $sql);        $sql = str_replace("\r", "\n", $sql);        $len = PMA_strlen($sql);        if ($len == 0) {            return array();        }        // Create local hashtables        if (!isset($PMA_SQPdata_column_attrib)) {            $PMA_SQPdata_column_attrib  = array_flip(                $GLOBALS['PMA_SQPdata_column_attrib']                );            $PMA_SQPdata_function_name  = array_flip(                $GLOBALS['PMA_SQPdata_function_name']                );            $PMA_SQPdata_reserved_word  = array_flip(                $GLOBALS['PMA_SQPdata_reserved_word']                );            $PMA_SQPdata_forbidden_word = array_flip(                $GLOBALS['PMA_SQPdata_forbidden_word']                );            $PMA_SQPdata_column_type    = array_flip(                $GLOBALS['PMA_SQPdata_column_type']                );        }        $sql_array               = array();        $sql_array['raw']        = $sql;        $count1                  = 0;        $count2                  = 0;        $punct_queryend          = ';';        $punct_qualifier         = '.';        $punct_listsep           = ',';        $punct_level_plus        = '(';        $punct_level_minus       = ')';        $punct_user              = '@';        $digit_floatdecimal      = '.';        $digit_hexset            = 'x';        $bracket_list            = '()[]{}';        $allpunct_list           =  '-,;:!?/.^~\*&%+<=>|';        $allpunct_list_pair      = array(            '!=' => 1,            '&&' => 1,            ':=' => 1,            '<<' => 1,            '<=' => 1,            '<=>' => 1,            '<>' => 1,            '>=' => 1,            '>>' => 1,            '||' => 1,            '==' => 1        );        $quote_list              = '\'"`';        $arraysize               = 0;        $previous_was_space   = false;        $this_was_space       = false;        $previous_was_bracket = false;        $this_was_bracket     = false;        $previous_was_punct   = false;        $this_was_punct       = false;        $previous_was_listsep = false;        $this_was_listsep     = false;        $previous_was_quote   = false;        $this_was_quote       = false;        while ($count2 < $len) {            $c      = PMA_substr($sql, $count2, 1);            $count1 = $count2;            $previous_was_space = $this_was_space;            $this_was_space = false;            $previous_was_bracket = $this_was_bracket;            $this_was_bracket = false;            $previous_was_punct = $this_was_punct;            $this_was_punct = false;            $previous_was_listsep = $this_was_listsep;            $this_was_listsep = false;            $previous_was_quote = $this_was_quote;            $this_was_quote = false;            if (($c == "\n")) {                $this_was_space = true;                $count2++;                PMA_SQP_arrayAdd($sql_array, 'white_newline', '', $arraysize);                continue;            }            // Checks for white space            if (PMA_STR_isSpace($c)) {                $this_was_space = true;                $count2++;                continue;            }            // Checks for comment lines.            // MySQL style #            // C style /* */            // ANSI style --            $next_c = PMA_substr($sql, $count2 + 1, 1);            if (($c == '#')                || (($count2 + 1 < $len) && ($c == '/') && ($next_c == '*'))                || (($count2 + 2 == $len) && ($c == '-') && ($next_c == '-'))                || (($count2 + 2 < $len) && ($c == '-') && ($next_c == '-') && ((PMA_substr($sql, $count2 + 2, 1) <= ' ')))) {                $count2++;                $pos  = 0;                $type = 'bad';                switch ($c) {                case '#':                    $type = 'mysql';                case '-':                    $type = 'ansi';                    $pos  = PMA_strpos($sql, "\n", $count2);                    break;                case '/':                    $type = 'c';                    $pos  = PMA_strpos($sql, '*/', $count2);                    $pos  += 2;                    break;                default:                    break;                } // end switch                $count2 = ($pos < $count2) ? $len : $pos;                $str    = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, 'comment_' . $type, $str, $arraysize);                continue;            } // end if            // Checks for something inside quotation marks            if (PMA_strpos($quote_list, $c) !== false) {                $startquotepos   = $count2;                $quotetype       = $c;                $count2++;                $escaped         = false;                $pos             = $count2;                $oldpos          = 0;                do {                    $oldpos = $pos;                    $pos    = PMA_strpos(' ' . $sql, $quotetype, $oldpos + 1) - 1;                    // ($pos === false)                    if ($pos < 0) {                        if ($c == '`') {                            /*                             * Behave same as MySQL and accept end of query as end of backtick.                             * I know this is sick, but MySQL behaves like this:                             *                             * SELECT * FROM `table                             *                             * is treated like                             *                             * SELECT * FROM `table`                             */                            $pos_quote_separator = PMA_strpos(' ' . $sql, $GLOBALS['sql_delimiter'], $oldpos + 1) - 1;                            if ($pos_quote_separator < 0) {                                $len += 1;                                $sql .= '`';                                $sql_array['raw'] .= '`';                                $pos = $len;                            } else {                                $len += 1;                                $sql = PMA_substr($sql, 0, $pos_quote_separator) . '`' . PMA_substr($sql, $pos_quote_separator);                                $sql_array['raw'] = $sql;                                $pos = $pos_quote_separator;                            }                            if (class_exists('PMA_Message') && $GLOBALS['is_ajax_request'] != true) {                                PMA_Message::notice(__('Automatically appended backtick to the end of query!'))->display();                            }                        } else {                            $debugstr = __('Unclosed quote') . ' @ ' . $startquotepos. "\n"                                      . 'STR: ' . htmlspecialchars($quotetype);                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    // If the quote is the first character, it can't be                    // escaped, so don't do the rest of the code                    if ($pos == 0) {                        break;                    }                    // Checks for MySQL escaping using a \                    // And checks for ANSI escaping using the $quotetype character                    if (($pos < $len) && PMA_STR_charIsEscaped($sql, $pos) && $c != '`') {                        $pos ++;                        continue;                    } elseif (($pos + 1 < $len) && (PMA_substr($sql, $pos, 1) == $quotetype) && (PMA_substr($sql, $pos + 1, 1) == $quotetype)) {                        $pos = $pos + 2;                        continue;                    } else {                        break;                    }                } while ($len > $pos); // end do                $count2       = $pos;                $count2++;                $type         = 'quote_';                switch ($quotetype) {                case '\'':                    $type .= 'single';                    $this_was_quote = true;                    break;                case '"':                    $type .= 'double';                    $this_was_quote = true;                    break;                case '`':                    $type .= 'backtick';                    $this_was_quote = true;                    break;                default:                    break;                } // end switch                $data = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, $type, $data, $arraysize);                continue;            }            // Checks for brackets            if (PMA_strpos($bracket_list, $c) !== false) {                // All bracket tokens are only one item long                $this_was_bracket = true;                $count2++;                $type_type     = '';                if (PMA_strpos('([{', $c) !== false) {                    $type_type = 'open';                } else {                    $type_type = 'close';                }                $type_style     = '';                if (PMA_strpos('()', $c) !== false) {                    $type_style = 'round';                } elseif (PMA_strpos('[]', $c) !== false) {                    $type_style = 'square';                } else {                    $type_style = 'curly';                }                $type = 'punct_bracket_' . $type_type . '_' . $type_style;                PMA_SQP_arrayAdd($sql_array, $type, $c, $arraysize);                continue;            }            /* DEBUG            echo '<pre>1';            var_dump(PMA_STR_isSqlIdentifier($c, false));            var_dump($c == '@');            var_dump($c == '.');            var_dump(PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1)));            var_dump($previous_was_space);            var_dump($previous_was_bracket);            var_dump($previous_was_listsep);            echo '</pre>';            */            // Checks for identifier (alpha or numeric)            if (PMA_STR_isSqlIdentifier($c, false)             || $c == '@'             || ($c == '.'              && PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1))              && ($previous_was_space || $previous_was_bracket || $previous_was_listsep))) {                /* DEBUG                echo PMA_substr($sql, $count2);                echo '<hr />';                */                $count2++;                /**                 * @todo a @ can also be present in expressions like                 * FROM 'user'@'%' or  TO 'user'@'%'                 * in this case, the @ is wrongly marked as alpha_variable                 */                $is_identifier           = $previous_was_punct;                $is_sql_variable         = $c == '@' && ! $previous_was_quote;                $is_user                 = $c == '@' && $previous_was_quote;                $is_digit                = !$is_identifier && !$is_sql_variable && PMA_STR_isDigit($c);                $is_hex_digit            = $is_digit && $c == '0' && $count2 < $len && PMA_substr($sql, $count2, 1) == 'x';                $is_float_digit          = $c == '.';                $is_float_digit_exponent = false;                /* DEBUG                echo '<pre>2';                var_dump($is_identifier);                var_dump($is_sql_variable);                var_dump($is_digit);                var_dump($is_float_digit);                echo '</pre>';                 */                // Fast skip is especially needed for huge BLOB data                if ($is_hex_digit) {                    $count2++;                    $pos = strspn($sql, '0123456789abcdefABCDEF', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                } elseif ($is_digit) {                    $pos = strspn($sql, '0123456789', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                }                while (($count2 < $len) && PMA_STR_isSqlIdentifier(PMA_substr($sql, $count2, 1), ($is_sql_variable || $is_digit))) {                    $c2 = PMA_substr($sql, $count2, 1);                    if ($is_sql_variable && ($c2 == '.')) {                        $count2++;                        continue;                    }                    if ($is_digit && (!$is_hex_digit) && ($c2 == '.')) {                        $count2++;                        if (!$is_float_digit) {                            $is_float_digit = true;                            continue;                        } else {                            $debugstr = __('Invalid Identifer') . ' @ ' . ($count1+1) . "\n"                                      . 'STR: ' . htmlspecialchars(PMA_substr($sql, $count1, $count2 - $count1));                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    if ($is_digit && (!$is_hex_digit) && (($c2 == 'e') || ($c2 == 'E'))) {                        if (!$is_float_digit_exponent) {                            $is_float_digit_exponent = true;                            $is_float_digit          = true;                            $count2++;                            continue;                        } else {                            $is_digit                = false;                            $is_float_digit          = false;                        }                    }                    if (($is_hex_digit && PMA_STR_isHexDigit($c2)) || ($is_digit && PMA_STR_isDigit($c2))) {                        $count2++;                        continue;                    } else {                        $is_digit     = false;                        $is_hex_digit = false;                    }                    $count2++;                } // end while                $l    = $count2 - $count1;                $str  = PMA_substr($sql, $count1, $l);                $type = '';                if ($is_digit || $is_float_digit || $is_hex_digit) {                    $type     = 'digit';                    if ($is_float_digit) {                        $type .= '_float';                    } elseif ($is_hex_digit) {                        $type .= '_hex';                    } else {                        $type .= '_integer';                    }                } elseif ($is_user) {                    $type = 'punct_user';                } elseif ($is_sql_variable != false) {                    $type = 'alpha_variable';                } else {                    $type = 'alpha';                } // end if... else....                PMA_SQP_arrayAdd($sql_array, $type, $str, $arraysize, $count2);                continue;            }            // Checks for punct            if (PMA_strpos($allpunct_list, $c) !== false) {                while (($count2 < $len) && PMA_strpos($allpunct_list, PMA_substr($sql, $count2, 1)) !== false) {                    $count2++;                }                $l = $count2 - $count1;                if ($l == 1) {                    $punct_data = $c;                } else {                    $punct_data = PMA_substr($sql, $count1, $l);                }                // Special case, sometimes, althought two characters are                // adjectent directly, they ACTUALLY need to be seperate                /* DEBUG                echo '<pre>';                var_dump($l);                var_dump($punct_data);                echo '</pre>';                */                if ($l == 1) {                    $t_suffix         = '';                    switch ($punct_data) {                    case $punct_queryend:                        $t_suffix = '_queryend';                        break;                    case $punct_qualifier:                        $t_suffix = '_qualifier';                        $this_was_punct = true;                        break;                    case $punct_listsep:                        $this_was_listsep = true;                        $t_suffix = '_listsep';                        break;                    default:                        break;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct' . $t_suffix, $punct_data, $arraysize);                } elseif ($punct_data == $GLOBALS['sql_delimiter'] || isset($allpunct_list_pair[$punct_data])) {                    // Ok, we have one of the valid combined punct expressions                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                } else {                    // Bad luck, lets split it up more                    $first  = $punct_data[0];                    $first2 = $punct_data[0] . $punct_data[1];                    $last2  = $punct_data[$l - 2] . $punct_data[$l - 1];                    $last   = $punct_data[$l - 1];                    if (($first == ',') || ($first == ';') || ($first == '.') || ($first == '*')) {                        $count2     = $count1 + 1;                        $punct_data = $first;                    } elseif (($last2 == '/*') || (($last2 == '--') && ($count2 == $len || PMA_substr($sql, $count2, 1) <= ' '))) {                        $count2     -= 2;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif (($last == '-') || ($last == '+') || ($last == '!')) {                        $count2--;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif ($last != '~') {                        /**                         * @todo for negation operator, split in 2 tokens ?                         * "select x&~1 from t"                         * becomes "select x & ~ 1 from t" ?                         */                        $debugstr =  __('Unknown Punctuation String') . ' @ ' . ($count1+1) . "\n"                                  . 'STR: ' . htmlspecialchars($punct_data);                        PMA_SQP_throwError($debugstr, $sql);                        return $sql_array;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                    continue;                } // end if... elseif... else                continue;            }            // DEBUG            $count2++;            $debugstr = 'C1 C2 LEN: ' . $count1 . ' ' . $count2 . ' ' . $len .  "\n"                      . 'STR: ' . PMA_substr($sql, $count1, $count2 - $count1) . "\n";            PMA_SQP_bug($debugstr, $sql);            return $sql_array;        } // end while ($count2 < $len)        /*        echo '<pre>';        print_r($sql_array);        echo '</pre>';        */        if ($arraysize > 0) {            $t_next           = $sql_array[0]['type'];            $t_prev           = '';            $t_bef_prev       = '';            $t_cur            = '';            $d_next           = $sql_array[0]['data'];            $d_prev           = '';            $d_bef_prev       = '';            $d_cur            = '';            $d_next_upper     = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            $d_prev_upper     = '';            $d_bef_prev_upper = '';            $d_cur_upper      = '';        }        for ($i = 0; $i < $arraysize; $i++) {            $t_bef_prev       = $t_prev;            $t_prev           = $t_cur;            $t_cur            = $t_next;            $d_bef_prev       = $d_prev;            $d_prev           = $d_cur;            $d_cur            = $d_next;            $d_bef_prev_upper = $d_prev_upper;            $d_prev_upper     = $d_cur_upper;            $d_cur_upper      = $d_next_upper;            if (($i + 1) < $arraysize) {                $t_next = $sql_array[$i + 1]['type'];                $d_next = $sql_array[$i + 1]['data'];                $d_next_upper = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            } else {                $t_next       = '';                $d_next       = '';                $d_next_upper = '';            }            //DEBUG echo "[prev: <strong>".$d_prev."</strong> ".$t_prev."][cur: <strong>".$d_cur."</strong> ".$t_cur."][next: <strong>".$d_next."</strong> ".$t_next."]<br />";            if ($t_cur == 'alpha') {                $t_suffix     = '_identifier';                // for example: `thebit` bit(8) NOT NULL DEFAULT b'0'                if ($t_prev == 'alpha' && $d_prev == 'DEFAULT' && $d_cur == 'b' && $t_next == 'quote_single') {                    $t_suffix = '_bitfield_constant_introducer';                } elseif (($t_next == 'punct_qualifier') || ($t_prev == 'punct_qualifier')) {                    $t_suffix = '_identifier';                } elseif (($t_next == 'punct_bracket_open_round')                  && isset($PMA_SQPdata_function_name[$d_cur_upper])) {                    /**                     * @todo 2005-10-16: in the case of a CREATE TABLE containing                     * a TIMESTAMP, since TIMESTAMP() is also a function, it's                     * found here and the token is wrongly marked as alpha_functionName.                     * But we compensate for this when analysing for timestamp_not_null                     * later in this script.                     *                     * Same applies to CHAR vs. CHAR() function.                     */                    $t_suffix = '_functionName';                    /* There are functions which might be as well column types */                } elseif (isset($PMA_SQPdata_column_type[$d_cur_upper])) {                    $t_suffix = '_columnType';                    /**                     * Temporary fix for BUG #621357 and #2027720                     *                     * @todo FIX PROPERLY NEEDS OVERHAUL OF SQL TOKENIZER                     */                    if (($d_cur_upper == 'SET' || $d_cur_upper == 'BINARY') && $t_next != 'punct_bracket_open_round') {                        $t_suffix = '_reservedWord';                    }                    //END OF TEMPORARY FIX                    // CHARACTER is a synonym for CHAR, but can also be meant as                    // CHARACTER SET. In this case, we have a reserved word.                    if ($d_cur_upper == 'CHARACTER' && $d_next_upper == 'SET') {                        $t_suffix = '_reservedWord';                    }                    // experimental                    // current is a column type, so previous must not be                    // a reserved word but an identifier                    // CREATE TABLE SG_Persons (first varchar(64))                    //if ($sql_array[$i-1]['type'] =='alpha_reservedWord') {                    //    $sql_array[$i-1]['type'] = 'alpha_identifier';                    //}                } elseif (isset($PMA_SQPdata_reserved_word[$d_cur_upper])) {                    $t_suffix = '_reservedWord';                } elseif (isset($PMA_SQPdata_column_attrib[$d_cur_upper])) {                    $t_suffix = '_columnAttrib';                    // INNODB is a MySQL table type, but in "SHOW INNODB STATUS",                    // it should be regarded as a reserved word.                    if ($d_cur_upper == 'INNODB' && $d_prev_upper == 'SHOW' && $d_next_upper == 'STATUS') {                        $t_suffix = '_reservedWord';                    }                    if ($d_cur_upper == 'DEFAULT' && $d_next_upper == 'CHARACTER') {                        $t_suffix = '_reservedWord';                    }                    // Binary as character set                    if ($d_cur_upper == 'BINARY' && (                      ($d_bef_prev_upper == 'CHARACTER' && $d_prev_upper == 'SET')                      || ($d_bef_prev_upper == 'SET' && $d_prev_upper == '=')                      || ($d_bef_prev_upper == 'CHARSET' && $d_prev_upper == '=')                      || $d_prev_upper == 'CHARSET'                      ) && in_array($d_cur, $mysql_charsets)) {                        $t_suffix = '_charset';                    }                } elseif (in_array($d_cur, $mysql_charsets)                  || in_array($d_cur, $mysql_collations_flat)                  || ($d_cur{0} == '_' && in_array(substr($d_cur, 1), $mysql_charsets))) {                    $t_suffix = '_charset';                } else {                    // Do nothing                }                // check if present in the list of forbidden words                if ($t_suffix == '_reservedWord' && isset($PMA_SQPdata_forbidden_word[$d_cur_upper])) {                    $sql_array[$i]['forbidden'] = true;                } else {                    $sql_array[$i]['forbidden'] = false;                }                $sql_array[$i]['type'] .= $t_suffix;            }        } // end for        // Stores the size of the array inside the array, as count() is a slow        // operation.        $sql_array['len'] = $arraysize;        // DEBUG echo 'After parsing<pre>'; print_r($sql_array); echo '</pre>';        // Sends the data back        return $sql_array;    } // end of the "PMA_SQP_parse()" function    /**     * Checks for token types being what we want...     *     * @param string String of type that we have     * @param string String of type that we want     *     * @return boolean result of check     *     * @access private     */    function PMA_SQP_typeCheck($toCheck, $whatWeWant)    {        $typeSeperator = '_';        if (strcmp($whatWeWant, $toCheck) == 0) {            return true;        } else {            if (strpos($whatWeWant, $typeSeperator) === false) {                return strncmp($whatWeWant, $toCheck, strpos($toCheck, $typeSeperator)) == 0;            } else {                return false;            }        }    }    /**     * Analyzes SQL queries     *     * @param array   The SQL queries     *     * @return array   The analyzed SQL queries     *     * @access public     */    function PMA_SQP_analyze($arr)    {        if ($arr == array() || ! isset($arr['len'])) {            return array();        }        $result          = array();        $size            = $arr['len'];        $subresult       = array(            'querytype'      => '',            'select_expr_clause'=> '', // the whole stuff between SELECT and FROM , except DISTINCT            'position_of_first_select' => '', // the array index            'from_clause'=> '',            'group_by_clause'=> '',            'order_by_clause'=> '',            'having_clause'  => '',            'limit_clause'  => '',            'where_clause'   => '',            'where_clause_identifiers'   => array(),            'unsorted_query' => '',            'queryflags'     => array(),            'select_expr'    => array(),            'table_ref'      => array(),            'foreign_keys'   => array(),            'create_table_fields' => array()        );        $subresult_empty = $subresult;        $seek_queryend         = false;        $seen_end_of_table_ref = false;        $number_of_brackets_in_extract = 0;        $number_of_brackets_in_group_concat = 0;        $number_of_brackets = 0;        $in_subquery = false;        $seen_subquery = false;        $seen_from = false;        // for SELECT EXTRACT(YEAR_MONTH FROM CURDATE())        // we must not use CURDATE as a table_ref        // so we track whether we are in the EXTRACT()        $in_extract          = false;        // for GROUP_CONCAT(...)        $in_group_concat     = false;        /* Description of analyzer results         *         * db, table, column, alias         * ------------------------         *         * Inside the $subresult array, we create ['select_expr'] and ['table_ref'] arrays.         *         * The SELECT syntax (simplified) is         *         * SELECT         *    select_expression,...         *    [FROM [table_references]         *         *         * ['select_expr'] is filled with each expression, the key represents the         * expression position in the list (0-based) (so we don't lose track of         * multiple occurences of the same column).         *         * ['table_ref'] is filled with each table ref, same thing for the key.         *         * I create all sub-values empty, even if they are         * not present (for example no select_expression alias).         *         * There is a debug section at the end of loop #1, if you want to         * see the exact contents of select_expr and table_ref         *         * queryflags         * ----------         *         * In $subresult, array 'queryflags' is filled, according to what we         * find in the query.         *         * Currently, those are generated:         *         * ['queryflags']['need_confirm'] = 1; if the query needs confirmation         * ['queryflags']['select_from'] = 1;  if this is a real SELECT...FROM         * ['queryflags']['distinct'] = 1;     for a DISTINCT         * ['queryflags']['union'] = 1;        for a UNION         * ['queryflags']['join'] = 1;         for a JOIN         * ['queryflags']['offset'] = 1;       for the presence of OFFSET         * ['queryflags']['procedure'] = 1;    for the presence of PROCEDURE         *         * query clauses         * -------------         *         * The select is splitted in those clauses:         * ['select_expr_clause']         * ['from_clause']         * ['group_by_clause']         * ['order_by_clause']         * ['having_clause']         * ['limit_clause']         * ['where_clause']         *         * The identifiers of the WHERE clause are put into the array         * ['where_clause_identifier']         *         * For a SELECT, the whole query without the ORDER BY clause is put into         * ['unsorted_query']         *         * foreign keys         * ------------         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get         * analyzed and ['foreign_keys'] is an array filled with         * the constraint name, the index list,         * the REFERENCES table name and REFERENCES index list,         * and ON UPDATE | ON DELETE clauses         *         * position_of_first_select         * ------------------------         *         * The array index of the first SELECT we find. Will be used to         * insert a SQL_CALC_FOUND_ROWS.         *         * create_table_fields         * -------------------         *         * Used to detect the DEFAULT CURRENT_TIMESTAMP and         * ON UPDATE CURRENT_TIMESTAMP clauses of the CREATE TABLE query.         * Also used to store the default value of the field.         * An array, each element is the identifier name.         * Note that for now, the timestamp_not_null element is created         * even for non-TIMESTAMP fields.         *         * Sub-elements: ['type'] which contains the column type         *               optional (currently they are never false but can be absent):         *               ['default_current_timestamp'] boolean         *               ['on_update_current_timestamp'] boolean         *               ['timestamp_not_null'] boolean         *         * section_before_limit, section_after_limit         * -----------------------------------------         *         * Marks the point of the query where we can insert a LIMIT clause;         * so the section_before_limit will contain the left part before         * a possible LIMIT clause         *         *         * End of description of analyzer results         */        // must be sorted        // TODO: current logic checks for only one word, so I put only the        // first word of the reserved expressions that end a table ref;        // maybe this is not ok (the first word might mean something else)        //        $words_ending_table_ref = array(        //            'FOR UPDATE',        //            'GROUP BY',        //            'HAVING',        //            'LIMIT',        //            'LOCK IN SHARE MODE',        //            'ORDER BY',        //            'PROCEDURE',        //            'UNION',        //            'WHERE'        //        );        $words_ending_table_ref = array(            'FOR' => 1,            'GROUP' => 1,            'HAVING' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'ORDER' => 1,            'PROCEDURE' => 1,            'UNION' => 1,            'WHERE' => 1        );        $words_ending_clauses = array(            'FOR' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'PROCEDURE' => 1,            'UNION' => 1        );        $supported_query_types = array(            'SELECT' => 1,            /*            // Support for these additional query types will come later on.            'DELETE' => 1,            'INSERT' => 1,            'REPLACE' => 1,            'TRUNCATE' => 1,            'UPDATE' => 1,            'EXPLAIN' => 1,            'DESCRIBE' => 1,            'SHOW' => 1,            'CREATE' => 1,            'SET' => 1,            'ALTER' => 1            */        );        // loop #1 for each token: select_expr, table_ref for SELECT        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop1 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // High speed seek for locating the end of the current query            if ($seek_queryend == true) {                if ($arr[$i]['type'] == 'punct_queryend') {                    $seek_queryend = false;                } else {                    continue;                } // end if (type == punct_queryend)            } // end if ($seek_queryend)            /**             * Note: do not split if this is a punct_queryend for the first and only query             * @todo when we find a UNION, should we split in another subresult?             */            if ($arr[$i]['type'] == 'punct_queryend' && ($i + 1 != $size)) {                $result[]  = $subresult;                $subresult = $subresult_empty;                continue;            } // end if (type == punct_queryend)            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;                if ($in_extract) {                    $number_of_brackets_in_extract++;                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }                if ($in_extract) {                    $number_of_brackets_in_extract--;                    if ($number_of_brackets_in_extract == 0) {                       $in_extract = false;                    }                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                       $in_group_concat = false;                    }                }            }            if ($in_subquery) {                /**                 * skip the subquery to avoid setting                 * select_expr or table_ref with the contents                 * of this subquery; this is to avoid a bug when                 * trying to edit the results of                 * select * from child where not exists (select id from                 * parent where child.parent_id = parent.id);                 */                continue;            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_functionName') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='EXTRACT') {                    $in_extract = true;                    $number_of_brackets_in_extract = 0;                }                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_reservedWord'                //&& $arr[$i]['forbidden'] == false) {                ) {                // We don't know what type of query yet, so run this                if ($subresult['querytype'] == '') {                    $subresult['querytype'] = strtoupper($arr[$i]['data']);                } // end if (querytype was empty)                // Check if we support this type of query                if (!isset($supported_query_types[$subresult['querytype']])) {                    // Skip ahead to the next one if we don't                    $seek_queryend = true;                    continue;                } // end if (query not supported)                // upper once                $upper_data = strtoupper($arr[$i]['data']);                /**                 * @todo reset for each query?                 */                if ($upper_data == 'SELECT') {                    if ($number_of_brackets > 0) {                        $in_subquery = true;                        $seen_subquery = true;                        // this is a subquery so do not analyze inside it                        continue;                    }                    $seen_from = false;                    $previous_was_identifier = false;                    $current_select_expr = -1;                    $seen_end_of_table_ref = false;                } // end if (data == SELECT)                if ($upper_data =='FROM' && !$in_extract) {                    $current_table_ref = -1;                    $seen_from = true;                    $previous_was_identifier = false;                    $save_table_ref = true;                } // end if (data == FROM)                // here, do not 'continue' the loop, as we have more work for                // reserved words below            } // end if (type == alpha_reservedWord)            // ==============================            if ($arr[$i]['type'] == 'quote_backtick'             || $arr[$i]['type'] == 'quote_double'             || $arr[$i]['type'] == 'quote_single'             || $arr[$i]['type'] == 'alpha_identifier'             || ($arr[$i]['type'] == 'alpha_reservedWord'                && $arr[$i]['forbidden'] == false)) {                switch ($arr[$i]['type']) {                case 'alpha_identifier':                case 'alpha_reservedWord':                    /**                     * this is not a real reservedWord, because it's not                     * present in the list of forbidden words, for example                     * "storage" which can be used as an identifier                     *                     * @todo avoid the pretty printing in color in this case                     */                    $identifier = $arr[$i]['data'];                    break;                case 'quote_backtick':                case 'quote_double':                case 'quote_single':                    $identifier = PMA_unQuote($arr[$i]['data']);                    break;                } // end switch                if ($subresult['querytype'] == 'SELECT'                 && ! $in_group_concat                 && ! ($seen_subquery && $arr[$i - 1]['type'] == 'punct_bracket_close_round')) {                    if (!$seen_from) {                        if ($previous_was_identifier && isset($chain)) {                            // found alias for this select_expr, save it                            // but only if we got something in $chain                            // (for example, SELECT COUNT(*) AS cnt                            // puts nothing in $chain, so we avoid                            // setting the alias)                            $alias_for_select_expr = $identifier;                        } else {                            $chain[] = $identifier;                            $previous_was_identifier = true;                        } // end if !$previous_was_identifier                    } else {                        // ($seen_from)                        if ($save_table_ref && !$seen_end_of_table_ref) {                            if ($previous_was_identifier) {                                // found alias for table ref                                // save it for later                                $alias_for_table_ref = $identifier;                            } else {                                $chain[] = $identifier;                                $previous_was_identifier = true;                            } // end if ($previous_was_identifier)                        } // end if ($save_table_ref &&!$seen_end_of_table_ref)                    } // end if (!$seen_from)                } // end if (querytype SELECT)            } // end if (quote_backtick or double quote or alpha_identifier)            // ===================================            if ($arr[$i]['type'] == 'punct_qualifier') {                // to be able to detect an identifier following another                $previous_was_identifier = false;                continue;            } // end if (punct_qualifier)            /**             * @todo check if 3 identifiers following one another -> error             */            //    s a v e    a    s e l e c t    e x p r            // finding a list separator or FROM            // means that we must save the current chain of identifiers            // into a select expression            // for now, we only save a select expression if it contains            // at least one identifier, as we are interested in checking            // the columns and table names, so in "select * from persons",            // the "*" is not saved            if (isset($chain) && !$seen_end_of_table_ref             && ((!$seen_from && $arr[$i]['type'] == 'punct_listsep')              || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data == 'FROM'))) {                $size_chain = count($chain);                $current_select_expr++;                $subresult['select_expr'][$current_select_expr] = array(                  'expr' => '',                  'alias' => '',                  'db'   => '',                  'table_name' => '',                  'table_true_name' => '',                  'column' => ''                 );                if (isset($alias_for_select_expr) && strlen($alias_for_select_expr)) {                    // we had found an alias for this select expression                    $subresult['select_expr'][$current_select_expr]['alias'] = $alias_for_select_expr;                    unset($alias_for_select_expr);                }                // there is at least a column                $subresult['select_expr'][$current_select_expr]['column'] = $chain[$size_chain - 1];                $subresult['select_expr'][$current_select_expr]['expr'] = $chain[$size_chain - 1];                // maybe a table                if ($size_chain > 1) {                    $subresult['select_expr'][$current_select_expr]['table_name'] = $chain[$size_chain - 2];                    // we assume for now that this is also the true name                    $subresult['select_expr'][$current_select_expr]['table_true_name'] = $chain[$size_chain - 2];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['table_name']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 1)                // maybe a db                if ($size_chain > 2) {                    $subresult['select_expr'][$current_select_expr]['db'] = $chain[$size_chain - 3];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['db']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 2)                unset($chain);                /**                 * @todo explain this:                 */                if (($arr[$i]['type'] == 'alpha_reservedWord')                 && ($upper_data != 'FROM')) {                    $previous_was_identifier = true;                }            } // end if (save a select expr)            //======================================            //    s a v e    a    t a b l e    r e f            //======================================            // maybe we just saw the end of table refs            // but the last table ref has to be saved            // or we are at the last token            // or we just got a reserved word            /**             * @todo there could be another query after this one             */            if (isset($chain) && $seen_from && $save_table_ref             && ($arr[$i]['type'] == 'punct_listsep'               || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data!="AS")               || $seen_end_of_table_ref               || $i==$size-1)) {                $size_chain = count($chain);                $current_table_ref++;                $subresult['table_ref'][$current_table_ref] = array(                  'expr'            => '',                  'db'              => '',                  'table_name'      => '',                  'table_alias'     => '',                  'table_true_name' => ''                 );                if (isset($alias_for_table_ref) && strlen($alias_for_table_ref)) {                    $subresult['table_ref'][$current_table_ref]['table_alias'] = $alias_for_table_ref;                    unset($alias_for_table_ref);                }                $subresult['table_ref'][$current_table_ref]['table_name'] = $chain[$size_chain - 1];                // we assume for now that this is also the true name                $subresult['table_ref'][$current_table_ref]['table_true_name'] = $chain[$size_chain - 1];                $subresult['table_ref'][$current_table_ref]['expr']                    = $subresult['table_ref'][$current_table_ref]['table_name'];                // maybe a db                if ($size_chain > 1) {                    $subresult['table_ref'][$current_table_ref]['db'] = $chain[$size_chain - 2];                    $subresult['table_ref'][$current_table_ref]['expr']                        = $subresult['table_ref'][$current_table_ref]['db']                        . '.' . $subresult['table_ref'][$current_table_ref]['expr'];                } // end if ($size_chain > 1)                // add the table alias into the whole expression                $subresult['table_ref'][$current_table_ref]['expr']                 .= ' ' . $subresult['table_ref'][$current_table_ref]['table_alias'];                unset($chain);                $previous_was_identifier = true;                //continue;            } // end if (save a table ref)            // when we have found all table refs,            // for each table_ref alias, put the true name of the table            // in the corresponding select expressions            if (isset($current_table_ref) && ($seen_end_of_table_ref || $i == $size-1) && $subresult != $subresult_empty) {                for ($tr=0; $tr <= $current_table_ref; $tr++) {                    $alias = $subresult['table_ref'][$tr]['table_alias'];                    $truename = $subresult['table_ref'][$tr]['table_true_name'];                    for ($se=0; $se <= $current_select_expr; $se++) {                        if (isset($alias)                            && strlen($alias)                            && $subresult['select_expr'][$se]['table_true_name'] == $alias                        ) {                            $subresult['select_expr'][$se]['table_true_name'] = $truename;                        } // end if (found the alias)                    } // end for (select expressions)                } // end for (table refs)            } // end if (set the true names)            // e n d i n g    l o o p  #1            // set the $previous_was_identifier to false if the current            // token is not an identifier            if (($arr[$i]['type'] != 'alpha_identifier')             && ($arr[$i]['type'] != 'quote_double')             && ($arr[$i]['type'] != 'quote_single')             && ($arr[$i]['type'] != 'quote_backtick')) {                $previous_was_identifier = false;            } // end if            // however, if we are on AS, we must keep the $previous_was_identifier            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data == 'AS')) {                $previous_was_identifier = true;            }            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='ON' || $upper_data =='USING')) {                $save_table_ref = false;            } // end if (data == ON)            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='JOIN' || $upper_data =='FROM')) {                $save_table_ref = true;            } // end if (data == JOIN)            /**             * no need to check the end of table ref if we already did             *             * @todo maybe add "&& $seen_from"             */            if (!$seen_end_of_table_ref) {                // if this is the last token, it implies that we have                // seen the end of table references                // Check for the end of table references                //                // Note: if we are analyzing a GROUP_CONCAT clause,                // we might find a word that seems to indicate that                // we have found the end of table refs (like ORDER)                // but it's a modifier of the GROUP_CONCAT so                // it's not the real end of table refs                if (($i == $size-1)                 || ($arr[$i]['type'] == 'alpha_reservedWord'                 && !$in_group_concat                 && isset($words_ending_table_ref[$upper_data]))) {                    $seen_end_of_table_ref = true;                    // to be able to save the last table ref, but do not                    // set it true if we found a word like "ON" that has                    // already set it to false                    if (isset($save_table_ref) && $save_table_ref != false) {                        $save_table_ref = true;                    } //end if                } // end if (check for end of table ref)            } //end if (!$seen_end_of_table_ref)            if ($seen_end_of_table_ref) {                $save_table_ref = false;            } // end if        } // end for $i (loop #1)        //DEBUG        /*          if (isset($current_select_expr)) {           for ($trace=0; $trace<=$current_select_expr; $trace++) {               echo "<br />";               reset ($subresult['select_expr'][$trace]);               while (list ($key, $val) = each ($subresult['select_expr'][$trace]))                   echo "sel expr $trace $key => $val<br />\n";               }          }          if (isset($current_table_ref)) {           echo "current_table_ref = " . $current_table_ref . "<br>";           for ($trace=0; $trace<=$current_table_ref; $trace++) {               echo "<br />";               reset ($subresult['table_ref'][$trace]);               while (list ($key, $val) = each ($subresult['table_ref'][$trace]))               echo "table ref $trace $key => $val<br />\n";               }          }        */        // -------------------------------------------------------        // loop #2: - queryflags        //          - querytype (for queries != 'SELECT')        //          - section_before_limit, section_after_limit        //        // we will also need this queryflag in loop 2        // so set it here        if (isset($current_table_ref) && $current_table_ref > -1) {            $subresult['queryflags']['select_from'] = 1;        }        $section_before_limit = '';        $section_after_limit = ''; // truly the section after the limit clause        $seen_reserved_word = false;        $seen_group = false;        $seen_order = false;        $seen_order_by = false;        $in_group_by = false; // true when we are inside the GROUP BY clause        $in_order_by = false; // true when we are inside the ORDER BY clause        $in_having = false; // true when we are inside the HAVING clause        $in_select_expr = false; // true when we are inside the select expr clause        $in_where = false; // true when we are inside the WHERE clause        $seen_limit = false; // true if we have seen a LIMIT clause        $in_limit = false; // true when we are inside the LIMIT clause        $after_limit = false; // true when we are after the LIMIT clause        $in_from = false; // true when we are in the FROM clause        $in_group_concat = false;        $first_reserved_word = '';        $current_identifier = '';        $unsorted_query = $arr['raw']; // in case there is no ORDER BY        $number_of_brackets = 0;        $in_subquery = false;        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop2 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // need_confirm            //            // check for reserved words that will have to generate            // a confirmation request later in sql.php            // the cases are:            //   DROP TABLE            //   DROP DATABASE            //   ALTER TABLE... DROP            //   DELETE FROM...            //            // this code is not used for confirmations coming from functions.js            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }            }            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'SELECT' && $number_of_brackets > 0) {                    $in_subquery = true;                }                if (!$seen_reserved_word) {                    $first_reserved_word = $upper_data;                    $subresult['querytype'] = $upper_data;                    $seen_reserved_word = true;                    // if the first reserved word is DROP or DELETE,                    // we know this is a query that needs to be confirmed                    if ($first_reserved_word=='DROP'                     || $first_reserved_word == 'DELETE'                     || $first_reserved_word == 'TRUNCATE') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                    if ($first_reserved_word=='SELECT') {                        $position_of_first_select = $i;                    }                } else {                    if ($upper_data == 'DROP' && $first_reserved_word == 'ALTER') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                }                if ($upper_data == 'LIMIT' && ! $in_subquery) {                    $section_before_limit = substr($arr['raw'], 0, $arr[$i]['pos'] - 5);                    $in_limit = true;                    $seen_limit = true;                    $limit_clause = '';                    $in_order_by = false; // @todo maybe others to set false                }                if ($upper_data == 'PROCEDURE') {                    $subresult['queryflags']['procedure'] = 1;                    $in_limit = false;                    $after_limit = true;                }                /**                 * @todo set also to false if we find FOR UPDATE or LOCK IN SHARE MODE                 */                if ($upper_data == 'SELECT') {                    $in_select_expr = true;                    $select_expr_clause = '';                }                if ($upper_data == 'DISTINCT' && !$in_group_concat) {                    $subresult['queryflags']['distinct'] = 1;                }                if ($upper_data == 'UNION') {                    $subresult['queryflags']['union'] = 1;                }                if ($upper_data == 'JOIN') {                    $subresult['queryflags']['join'] = 1;                }                if ($upper_data == 'OFFSET') {                    $subresult['queryflags']['offset'] = 1;                }                // if this is a real SELECT...FROM                if ($upper_data == 'FROM' && isset($subresult['queryflags']['select_from']) && $subresult['queryflags']['select_from'] == 1) {                    $in_from = true;                    $from_clause = '';                    $in_select_expr = false;                }                // (we could have less resetting of variables to false                // if we trust that the query respects the standard                // MySQL order for clauses)                // we use $seen_group and $seen_order because we are looking                // for the BY                if ($upper_data == 'GROUP') {                    $seen_group = true;                    $seen_order = false;                    $in_having = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'ORDER' && !$in_group_concat) {                    $seen_order = true;                    $seen_group = false;                    $in_having = false;                    $in_group_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'HAVING') {                    $in_having = true;                    $having_clause = '';                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'WHERE') {                    $in_where = true;                    $where_clause = '';                    $where_clause_identifiers = array();                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_having = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'BY') {                    if ($seen_group) {                        $in_group_by = true;                        $group_by_clause = '';                    }                    if ($seen_order) {                        $seen_order_by = true;                        // Here we assume that the ORDER BY keywords took                        // exactly 8 characters.                        // We use PMA_substr() to be charset-safe; otherwise                        // if the table name contains accents, the unsorted                        // query would be missing some characters.                        $unsorted_query = PMA_substr($arr['raw'], 0, $arr[$i]['pos'] - 8);                        $in_order_by = true;                        $order_by_clause = '';                    }                }                // if we find one of the words that could end the clause                if (isset($words_ending_clauses[$upper_data])) {                    $in_group_by = false;                    $in_order_by = false;                    $in_having   = false;                    $in_where    = false;                    $in_select_expr = false;                    $in_from = false;                }            } // endif (reservedWord)            // do not add a space after a function name            /**             * @todo can we combine loop 2 and loop 1? some code is repeated here...             */            $sep = ' ';            if ($arr[$i]['type'] == 'alpha_functionName') {                $sep='';                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                        $in_group_concat = false;                    }                }            }            // do not add a space after an identifier if followed by a dot            if ($arr[$i]['type'] == 'alpha_identifier' && $i < $size - 1 && $arr[$i + 1]['data'] == '.') {                $sep = '';            }            // do not add a space after a dot if followed by an identifier            if ($arr[$i]['data'] == '.' && $i < $size - 1 && $arr[$i + 1]['type'] == 'alpha_identifier') {                $sep = '';            }            if ($in_select_expr && $upper_data != 'SELECT' && $upper_data != 'DISTINCT') {                $select_expr_clause .= $arr[$i]['data'] . $sep;            }            if ($in_from && $upper_data != 'FROM') {                $from_clause .= $arr[$i]['data'] . $sep;            }            if ($in_group_by && $upper_data != 'GROUP' && $upper_data != 'BY') {                $group_by_clause .= $arr[$i]['data'] . $sep;            }            if ($in_order_by && $upper_data != 'ORDER' && $upper_data != 'BY') {                // add a space only before ASC or DESC                // not around the dot between dbname and tablename                if ($arr[$i]['type'] == 'alpha_reservedWord') {                    $order_by_clause .= $sep;                }                $order_by_clause .= $arr[$i]['data'];            }            if ($in_having && $upper_data != 'HAVING') {                $having_clause .= $arr[$i]['data'] . $sep;            }            if ($in_where && $upper_data != 'WHERE') {                $where_clause .= $arr[$i]['data'] . $sep;                if (($arr[$i]['type'] == 'quote_backtick')                 || ($arr[$i]['type'] == 'alpha_identifier')) {                    $where_clause_identifiers[] = $arr[$i]['data'];                }            }            // to grab the rest of the query after the ORDER BY clause            if (isset($subresult['queryflags']['select_from'])             && $subresult['queryflags']['select_from'] == 1             && ! $in_order_by             && $seen_order_by             && $upper_data != 'BY') {                $unsorted_query .= $arr[$i]['data'];                if ($arr[$i]['type'] != 'punct_bracket_open_round'                 && $arr[$i]['type'] != 'punct_bracket_close_round'                 && $arr[$i]['type'] != 'punct') {                    $unsorted_query .= $sep;                }            }            if ($in_limit) {                if ($upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }                $limit_clause .= $arr[$i]['data'];                if ($upper_data == 'LIMIT' || $upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }            }            if ($after_limit && $seen_limit) {                $section_after_limit .= $arr[$i]['data'] . $sep;            }            // clear $upper_data for next iteration            $upper_data='';        } // end for $i (loop #2)        if (empty($section_before_limit)) {            $section_before_limit = $arr['raw'];        }        // -----------------------------------------------------        // loop #3: foreign keys and MySQL 4.1.2+ TIMESTAMP options        // (for now, check only the first query)        // (for now, identifiers are assumed to be backquoted)        // If we find that we are dealing with a CREATE TABLE query,        // we look for the next punct_bracket_open_round, which        // introduces the fields list. Then, when we find a        // quote_backtick, it must be a field, so we put it into        // the create_table_fields array. Even if this field is        // not a timestamp, it will be useful when logic has been        // added for complete field attributes analysis.        $seen_foreign = false;        $seen_references = false;        $seen_constraint = false;        $foreign_key_number = -1;        $seen_create_table = false;        $seen_create = false;        $seen_alter = false;        $in_create_table_fields = false;        $brackets_level = 0;        $in_timestamp_options = false;        $seen_default = false;        for ($i = 0; $i < $size; $i++) {        // DEBUG echo "Loop 3 <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'NOT' && $in_timestamp_options) {                    $create_table_fields[$current_identifier]['timestamp_not_null'] = true;                }                if ($upper_data == 'CREATE') {                    $seen_create = true;                }                if ($upper_data == 'ALTER') {                    $seen_alter = true;                }                if ($upper_data == 'TABLE' && $seen_create) {                    $seen_create_table = true;                    $create_table_fields = array();                }                if ($upper_data == 'CURRENT_TIMESTAMP') {                    if ($in_timestamp_options) {                        if ($seen_default) {                            $create_table_fields[$current_identifier]['default_current_timestamp'] = true;                        }                    }                }                if ($upper_data == 'CONSTRAINT') {                    $foreign_key_number++;                    $seen_foreign = false;                    $seen_references = false;                    $seen_constraint = true;                }                if ($upper_data == 'FOREIGN') {                    $seen_foreign = true;                    $seen_references = false;                    $seen_constraint = false;                }                if ($upper_data == 'REFERENCES') {                    $seen_foreign = false;                    $seen_references = true;                    $seen_constraint = false;                }                // Cases covered:                // [ON DELETE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // [ON UPDATE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // but we set ['on_delete'] or ['on_cascade'] to                // CASCADE | SET_NULL | NO_ACTION | RESTRICT                // ON UPDATE CURRENT_TIMESTAMP                if ($upper_data == 'ON') {                    if (isset($arr[$i+1]) && $arr[$i+1]['type'] == 'alpha_reservedWord') {                        $second_upper_data = strtoupper($arr[$i+1]['data']);                        if ($second_upper_data == 'DELETE') {                            $clause = 'on_delete';                        }                        if ($second_upper_data == 'UPDATE') {                            $clause = 'on_update';                        }                        if (isset($clause)                        && ($arr[$i+2]['type'] == 'alpha_reservedWord'                // ugly workaround because currently, NO is not                // in the list of reserved words in sqlparser.data                // (we got a bug report about not being able to use                // 'no' as an identifier)                           || ($arr[$i+2]['type'] == 'alpha_identifier'                              && strtoupper($arr[$i+2]['data'])=='NO'))                          ) {                            $third_upper_data = strtoupper($arr[$i+2]['data']);                            if ($third_upper_data == 'CASCADE'                            || $third_upper_data == 'RESTRICT') {                                $value = $third_upper_data;                            } elseif ($third_upper_data == 'SET'                              || $third_upper_data == 'NO') {                                if ($arr[$i+3]['type'] == 'alpha_reservedWord') {                                    $value = $third_upper_data . '_' . strtoupper($arr[$i+3]['data']);                                }                            } elseif ($third_upper_data == 'CURRENT_TIMESTAMP') {                                if ($clause == 'on_update'                                && $in_timestamp_options) {                                    $create_table_fields[$current_identifier]['on_update_current_timestamp'] = true;                                    $seen_default = false;                                }                            } else {                                $value = '';                            }                            if (!empty($value)) {                                $foreign[$foreign_key_number][$clause] = $value;                            }                            unset($clause);                        } // endif (isset($clause))                    }                }            } // end of reserved words analysis            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $brackets_level++;                if ($seen_create_table && $brackets_level == 1) {                    $in_create_table_fields = true;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $brackets_level--;                if ($seen_references) {                    $seen_references = false;                }                if ($seen_create_table && $brackets_level == 0) {                    $in_create_table_fields = false;                }            }            if (($arr[$i]['type'] == 'alpha_columnAttrib')) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields) {                    if ($upper_data == 'DEFAULT') {                        $seen_default = true;                        $create_table_fields[$current_identifier]['default_value'] = $arr[$i + 1]['data'];                    }                }            }            /**             * @see @todo 2005-10-16 note: the "or" part here is a workaround for a bug             */            if (($arr[$i]['type'] == 'alpha_columnType') || ($arr[$i]['type'] == 'alpha_functionName' && $seen_create_table)) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields && isset($current_identifier)) {                    $create_table_fields[$current_identifier]['type'] = $upper_data;                    if ($upper_data == 'TIMESTAMP') {                        $arr[$i]['type'] = 'alpha_columnType';                        $in_timestamp_options = true;                    } else {                        $in_timestamp_options = false;                        if ($upper_data == 'CHAR') {                            $arr[$i]['type'] = 'alpha_columnType';                        }                    }                }            }            if ($arr[$i]['type'] == 'quote_backtick' || $arr[$i]['type'] == 'alpha_identifier') {                if ($arr[$i]['type'] == 'quote_backtick') {                    // remove backquotes                    $identifier = PMA_unQuote($arr[$i]['data']);                } else {                    $identifier = $arr[$i]['data'];                }                if ($seen_create_table && $in_create_table_fields) {                    $current_identifier = $identifier;                    // we set this one even for non TIMESTAMP type                    $create_table_fields[$current_identifier]['timestamp_not_null'] = false;                }                if ($seen_constraint) {                    $foreign[$foreign_key_number]['constraint'] = $identifier;                }                if ($seen_foreign && $brackets_level > 0) {                    $foreign[$foreign_key_number]['index_list'][] = $identifier;                }                if ($seen_references) {                    if ($seen_alter && $brackets_level > 0) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                        // here, the first bracket level corresponds to the                        // bracket of CREATE TABLE                        // so if we are on level 2, it must be the index list                        // of the foreign key REFERENCES                    } elseif ($brackets_level > 1) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                    } elseif ($arr[$i+1]['type'] == 'punct_qualifier') {                        // identifier is `db`.`table`                        // the first pass will pick the db name                        // the next pass will pick the table name                        $foreign[$foreign_key_number]['ref_db_name'] = $identifier;                    } else {                        // identifier is `table`                        $foreign[$foreign_key_number]['ref_table_name'] = $identifier;                    }                }            }        } // end for $i (loop #3)        // Fill the $subresult array        if (isset($create_table_fields)) {            $subresult['create_table_fields'] = $create_table_fields;        }        if (isset($foreign)) {            $subresult['foreign_keys'] = $foreign;        }        if (isset($select_expr_clause)) {            $subresult['select_expr_clause'] = $select_expr_clause;        }        if (isset($from_clause)) {            $subresult['from_clause'] = $from_clause;        }        if (isset($group_by_clause)) {            $subresult['group_by_clause'] = $group_by_clause;        }        if (isset($order_by_clause)) {            $subresult['order_by_clause'] = $order_by_clause;        }        if (isset($having_clause)) {            $subresult['having_clause'] = $having_clause;        }        if (isset($limit_clause)) {            $subresult['limit_clause'] = $limit_clause;        }        if (isset($where_clause)) {            $subresult['where_clause'] = $where_clause;        }        if (isset($unsorted_query) && !empty($unsorted_query)) {            $subresult['unsorted_query'] = $unsorted_query;        }        if (isset($where_clause_identifiers)) {            $subresult['where_clause_identifiers'] = $where_clause_identifiers;        }        if (isset($position_of_first_select)) {            $subresult['position_of_first_select'] = $position_of_first_select;            $subresult['section_before_limit'] = $section_before_limit;            $subresult['section_after_limit'] = $section_after_limit;        }        // They are naughty and didn't have a trailing semi-colon,        // then still handle it properly        if ($subresult['querytype'] != '') {            $result[] = $subresult;        }        return $result;    } // end of the "PMA_SQP_analyze()" function    /**     * Colorizes SQL queries html formatted     *     * @todo check why adding a "\n" after the </span> would cause extra blanks     * to be displayed: SELECT p . person_name     * @param array   The SQL queries html formatted     *     * @return array   The colorized SQL queries     *     * @access public     */    function PMA_SQP_formatHtml_colorize($arr)    {        $i         = PMA_strpos($arr['type'], '_');        $class     = '';        if ($i > 0) {            $class = 'syntax_' . PMA_substr($arr['type'], 0, $i) . ' ';        }        $class     .= 'syntax_' . $arr['type'];        return '<span class="' . $class . '">' . htmlspecialchars($arr['data']) . '</span>';    } // end of the "PMA_SQP_formatHtml_colorize()" function    /**     * Formats SQL queries to html     *     * @param array   The SQL queries     * @param string  mode     * @param integer starting token     * @param integer number of tokens to format, -1 = all     *     * @return string  The formatted SQL queries     *     * @access public     */    function PMA_SQP_formatHtml($arr, $mode='color', $start_token=0,        $number_of_tokens=-1)    {        global $PMA_SQPdata_operators_docs, $PMA_SQPdata_functions_docs;        //DEBUG echo 'in Format<pre>'; print_r($arr); echo '</pre>';        // then check for an array        if (! is_array($arr)) {            return htmlspecialchars($arr);        }        // first check for the SQL parser having hit an error        if (PMA_SQP_isError()) {            return htmlspecialchars($arr['raw']);        }        // else do it properly        switch ($mode) {        case 'color':            $str                                = '<span class="syntax">';            $html_line_break                    = '<br />';            $docu                               = true;            break;        case 'query_only':            $str                                = '';            $html_line_break                    = "\n";            $docu                               = false;            break;        case 'text':            $str                                = '';            $html_line_break                    = '<br />';            $docu                               = true;            break;        } // end switch        // inner_sql is a span that exists for all cases, except query_only        // of $cfg['SQP']['fmtType'] to make possible a replacement        // for inline editing        if ($mode!='query_only') {            $str .= '<span class="inner_sql">';        }        $close_docu_link = false;        $indent                                     = 0;        $bracketlevel                               = 0;        $functionlevel                              = 0;        $infunction                                 = false;        $space_punct_listsep                        = ' ';        $space_punct_listsep_function_name          = ' ';        // $space_alpha_reserved_word = '<br />'."\n";        $space_alpha_reserved_word                  = ' ';        $keywords_with_brackets_1before            = array(            'INDEX' => 1,            'KEY' => 1,            'ON' => 1,            'USING' => 1        );        $keywords_with_brackets_2before            = array(            'IGNORE' => 1,            'INDEX' => 1,            'INTO' => 1,            'KEY' => 1,            'PRIMARY' => 1,            'PROCEDURE' => 1,            'REFERENCES' => 1,            'UNIQUE' => 1,            'USE' => 1        );        // These reserved words do NOT get a newline placed near them.        $keywords_no_newline               = array(            'AS' => 1,            'ASC' => 1,            'DESC' => 1,            'DISTINCT' => 1,            'DUPLICATE' => 1,            'HOUR' => 1,            'INTERVAL' => 1,            'IS' => 1,            'LIKE' => 1,            'NOT' => 1,            'NULL' => 1,            'ON' => 1,            'REGEXP' => 1        );        // These reserved words introduce a privilege list        $keywords_priv_list                = array(            'GRANT' => 1,            'REVOKE' => 1        );        if ($number_of_tokens == -1) {            $number_of_tokens = $arr['len'];        }        $typearr   = array();        if ($number_of_tokens >= 0) {            $typearr[0] = '';            $typearr[1] = '';            $typearr[2] = '';            $typearr[3] = $arr[$start_token]['type'];        }        $in_priv_list = false;        for ($i = $start_token; $i < $number_of_tokens; $i++) {            // DEBUG echo "Loop format <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            $before = '';            $after  = '';            // array_shift($typearr);            /*            0 prev2            1 prev            2 current            3 next            */            if (($i + 1) < $number_of_tokens) {                $typearr[4] = $arr[$i + 1]['type'];            } else {                $typearr[4] = '';            }            for ($j=0; $j<4; $j++) {                $typearr[$j] = $typearr[$j + 1];            }            switch ($typearr[2]) {            case 'alpha_bitfield_constant_introducer':                $before     = ' ';                $after      = '';                break;            case 'white_newline':                $before     = '';                break;            case 'punct_bracket_open_round':                $bracketlevel++;                $infunction = false;                // Make sure this array is sorted!                if (($typearr[1] == 'alpha_functionName') || ($typearr[1] == 'alpha_columnType') || ($typearr[1] == 'punct')                    || ($typearr[3] == 'digit_integer') || ($typearr[3] == 'digit_hex') || ($typearr[3] == 'digit_float')                    || (($typearr[0] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_2before[strtoupper($arr[$i - 2]['data'])]))                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_1before[strtoupper($arr[$i - 1]['data'])]))                    ) {                    $functionlevel++;                    $infunction = true;                    $after      .= ' ';                } else {                    $indent++;                    $after      .= ($mode != 'query_only' ? '<div class="syntax_indent' . $indent . '">' : ' ');                }                break;            case 'alpha_identifier':                if (($typearr[1] == 'punct_qualifier') || ($typearr[3] == 'punct_qualifier')) {                    $after      = '';                    $before     = '';                }                // for example SELECT 1 somealias                if ($typearr[1] == 'digit_integer') {                    $before     = ' ';                }                if (($typearr[3] == 'alpha_columnType') || ($typearr[3] == 'alpha_identifier')) {                    $after      .= ' ';                }                break;            case 'punct_user':            case 'punct_qualifier':                $before         = '';                $after          = '';                break;            case 'punct_listsep':                if ($infunction == true) {                    $after      .= $space_punct_listsep_function_name;                } else {                    $after      .= $space_punct_listsep;                }                break;            case 'punct_queryend':                if (($typearr[3] != 'comment_mysql') && ($typearr[3] != 'comment_ansi') && $typearr[3] != 'comment_c') {                    $after     .= $html_line_break;                    $after     .= $html_line_break;                }                $space_punct_listsep               = ' ';                $space_punct_listsep_function_name = ' ';                $space_alpha_reserved_word         = ' ';                $in_priv_list                      = false;                break;            case 'comment_mysql':            case 'comment_ansi':                $after         .= $html_line_break;                break;            case 'punct':                $before         .= ' ';                if ($docu && isset($PMA_SQPdata_operators_docs[$arr[$i]['data']]) &&                        ($arr[$i]['data'] != '*' || in_array($arr[$i]['type'], array('digit_integer','digit_float','digit_hex')))) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['link'],                        false,                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['anchor'],                        true);                    $after .= '</a>';                }                // workaround for                // select * from mytable limit 0,-1                // (a side effect of this workaround is that                // select 20 - 9                // becomes                // select 20 -9                // )                if ($typearr[3] != 'digit_integer') {                    $after        .= ' ';                }                break;            case 'punct_bracket_close_round':                // only close bracket level when it was opened before                if ($bracketlevel > 0) {                    $bracketlevel--;                    if ($infunction == true) {                        $functionlevel--;                        $after     .= ' ';                        $before    .= ' ';                    } else {                        $indent--;                        $before    .= ($mode != 'query_only' ? '</div>' : ' ');                    }                    $infunction    = ($functionlevel > 0) ? true : false;                }                break;            case 'alpha_columnType':                if ($docu) {                    switch ($arr[$i]['data']) {                    case 'tinyint':                    case 'smallint':                    case 'mediumint':                    case 'int':                    case 'bigint':                    case 'decimal':                    case 'float':                    case 'double':                    case 'real':                    case 'bit':                    case 'boolean':                    case 'serial':                        $before .= PMA_showMySQLDocu('data-types', 'numeric-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'date':                    case 'datetime':                    case 'timestamp':                    case 'time':                    case 'year':                        $before .= PMA_showMySQLDocu('data-types', 'date-and-time-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'char':                    case 'varchar':                    case 'tinytext':                    case 'text':                    case 'mediumtext':                    case 'longtext':                    case 'binary':                    case 'varbinary':                    case 'tinyblob':                    case 'mediumblob':                    case 'blob':                    case 'longblob':                    case 'enum':                    case 'set':                        $before .= PMA_showMySQLDocu('data-types', 'string-types', false, '', true);                        $after = '</a>' . $after;                        break;                    }                }                if ($typearr[3] == 'alpha_columnAttrib') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnType') {                    $before    .= ' ';                }                break;            case 'alpha_columnAttrib':                // ALTER TABLE tbl_name AUTO_INCREMENT = 1                // COLLATE LATIN1_GENERAL_CI DEFAULT                if ($typearr[1] == 'alpha_identifier' || $typearr[1] == 'alpha_charset') {                    $before .= ' ';                }                if (($typearr[3] == 'alpha_columnAttrib') || ($typearr[3] == 'quote_single') || ($typearr[3] == 'digit_integer')) {                    $after     .= ' ';                }                // workaround for                // AUTO_INCREMENT = 31DEFAULT_CHARSET = utf-8                if ($typearr[2] == 'alpha_columnAttrib' && $typearr[3] == 'alpha_reservedWord') {                    $before .= ' ';                }                // workaround for                // select * from mysql.user where binary user="root"                // binary is marked as alpha_columnAttrib                // but should be marked as a reserved word                if (strtoupper($arr[$i]['data']) == 'BINARY'                  && $typearr[3] == 'alpha_identifier') {                    $after     .= ' ';                }                break;            case 'alpha_functionName':                $funcname = strtoupper($arr[$i]['data']);                if ($docu && isset($PMA_SQPdata_functions_docs[$funcname])) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_functions_docs[$funcname]['link'],                        false,                        $PMA_SQPdata_functions_docs[$funcname]['anchor'],                        true);                    $after .= '</a>';                }                break;            case 'alpha_reservedWord':                // do not uppercase the reserved word if we are calling                // this function in query_only mode, because we need                // the original query (otherwise we get problems with                // semi-reserved words like "storage" which is legal                // as an identifier name)                if ($mode != 'query_only') {                    $arr[$i]['data'] = strtoupper($arr[$i]['data']);                }                if ((($typearr[1] != 'alpha_reservedWord')                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_no_newline[strtoupper($arr[$i - 1]['data'])])))                    && ($typearr[1] != 'punct_level_plus')                    && (!isset($keywords_no_newline[$arr[$i]['data']]))) {                    // do not put a space before the first token, because                    // we use a lot of pattern matching checking for the                    // first reserved word at beginning of query                    // so do not put a newline before                    //                    // also we must not be inside a privilege list                    if ($i > 0) {                        // the alpha_identifier exception is there to                        // catch cases like                        // GRANT SELECT ON mydb.mytable TO myuser@localhost                        // (else, we get mydb.mytableTO)                        //                        // the quote_single exception is there to                        // catch cases like                        // GRANT ... TO 'marc'@'domain.com' IDENTIFIED...                        /**                         * @todo fix all cases and find why this happens                         */                        if (!$in_priv_list || $typearr[1] == 'alpha_identifier' || $typearr[1] == 'quote_single' || $typearr[1] == 'white_newline') {                            $before    .= $space_alpha_reserved_word;                        }                    } else {                        // on first keyword, check if it introduces a                        // privilege list                        if (isset($keywords_priv_list[$arr[$i]['data']])) {                            $in_priv_list = true;                        }                    }                } else {                    $before    .= ' ';                }                switch ($arr[$i]['data']) {                case 'CREATE':                case 'ALTER':                case 'DROP':                case 'RENAME';                case 'TRUNCATE':                case 'ANALYZE':                case 'ANALYSE':                case 'OPTIMIZE':                    if ($docu) {                        switch ($arr[$i + 1]['data']) {                        case 'EVENT':                        case 'TABLE':                        case 'TABLESPACE':                        case 'FUNCTION':                        case 'INDEX':                        case 'PROCEDURE':                        case 'TRIGGER':                        case 'SERVER':                        case 'DATABASE':                        case 'VIEW':                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_' . $arr[$i + 1]['data'], false, '', true);                            $close_docu_link = true;                            break;                        }                        if ($arr[$i + 1]['data'] == 'LOGFILE' && $arr[$i + 2]['data'] == 'GROUP') {                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_LOGFILE_GROUP', false, '', true);                            $close_docu_link = true;                        }                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EVENT':                case 'TABLESPACE':                case 'TABLE':                case 'FUNCTION':                case 'INDEX':                case 'PROCEDURE':                case 'SERVER':                case 'TRIGGER':                case 'DATABASE':                case 'VIEW':                case 'GROUP':                    if ($close_docu_link) {                        $after = '</a>' . $after;                        $close_docu_link = false;                    }                    break;                case 'SET':                    if ($docu && ($i == 0 || $arr[$i - 1]['data'] != 'CHARACTER')) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EXPLAIN':                case 'DESCRIBE':                case 'DELETE':                case 'SHOW':                case 'UPDATE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'INSERT':                case 'REPLACE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = $html_line_break;                    }                    break;                case 'VALUES':                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'SELECT':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT', false, '', true);                        $after = '</a>' . $after;                    }                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'CALL':                case 'DO':                case 'HANDLER':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    break;                default:                    if ($close_docu_link && in_array($arr[$i]['data'], array('LIKE', 'NOT', 'IN', 'REGEXP', 'NULL'))) {                        $after .= '</a>';                        $close_docu_link = false;                    } else if ($docu && isset($PMA_SQPdata_functions_docs[$arr[$i]['data']])) {                        /* Handle multi word statements first */                        if (isset($typearr[4]) && $typearr[4] == 'alpha_reservedWord' && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else if (isset($typearr[3]) && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else {                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$arr[$i]['data']]['link'], false, $PMA_SQPdata_functions_docs[$arr[$i]['data']]['anchor'], true);                            $after .= '</a>';                        }                    }                    break;                } // end switch ($arr[$i]['data'])                $after         .= ' ';                break;            case 'digit_integer':            case 'digit_float':            case 'digit_hex':                /**                 * @todo could there be other types preceding a digit?                 */                if ($typearr[1] == 'alpha_reservedWord') {                    $after .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnAttrib') {                    $before .= ' ';                }                break;            case 'alpha_variable':                $after      = ' ';                break;            case 'quote_double':            case 'quote_single':                // workaround: for the query                // REVOKE SELECT ON `base2\_db`.* FROM 'user'@'%'                // the @ is incorrectly marked as alpha_variable                // in the parser, and here, the '%' gets a blank before,                // which is a syntax error                if ($typearr[1] != 'punct_user' && $typearr[1] != 'alpha_bitfield_constant_introducer') {                    $before        .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                break;            case 'quote_backtick':                // here we check for punct_user to handle correctly                // DEFINER = `username`@`%`                // where @ is the punct_user and `%` is the quote_backtick                if ($typearr[3] != 'punct_qualifier' && $typearr[3] != 'alpha_variable' && $typearr[3] != 'punct_user') {                    $after     .= ' ';                }                if ($typearr[1] != 'punct_qualifier' && $typearr[1] != 'alpha_variable' && $typearr[1] != 'punct_user') {                    $before    .= ' ';                }                break;            default:                break;            } // end switch ($typearr[2])            /*            if ($typearr[3] != 'punct_qualifier') {                $after             .= ' ';            }            $after                 .= "\n";            */            $str .= $before;            if ($mode=='color') {                $str .= PMA_SQP_formatHTML_colorize($arr[$i]);            } elseif ($mode == 'text') {                $str .= htmlspecialchars($arr[$i]['data']);            } else {                $str .= $arr[$i]['data'];            }            $str .= $after;        } // end for        // close unclosed indent levels        while ($indent > 0) {            $indent--;            $str .= ($mode != 'query_only' ? '</div>' : ' ');        }        /* End possibly unclosed documentation link */        if ($close_docu_link) {            $str .= '</a>';            $close_docu_link = false;        }        if ($mode!='query_only') {            // close inner_sql span                $str .= '</span>';        }        if ($mode=='color') {            // close syntax span            $str .= '</span>';        }        return $str;    } // end of the "PMA_SQP_formatHtml()" function}/** * Builds a CSS rule used for html formatted SQL queries * * @param string  The class name * @param string  The property name * @param string  The property value * * @return string  The CSS rule * * @access public * * @see    PMA_SQP_buildCssData() */function PMA_SQP_buildCssRule($classname, $property, $value){    $str     = '.' . $classname . ' {';    if ($value != '') {        $str .= $property . ': ' . $value . ';';    }    $str     .= '}' . "\n";    return $str;} // end of the "PMA_SQP_buildCssRule()" function/** * Builds CSS rules used for html formatted SQL queries * * @return string  The CSS rules set * * @access public * * @global array   The current PMA configuration * * @see    PMA_SQP_buildCssRule() */function PMA_SQP_buildCssData(){    global $cfg;    $css_string     = '';    foreach ($cfg['SQP']['fmtColor'] AS $key => $col) {        $css_string .= PMA_SQP_buildCssRule('syntax_' . $key, 'color', $col);    }    for ($i = 0; $i < 8; $i++) {        $css_string .= PMA_SQP_buildCssRule(            'syntax_indent' . $i, 'margin-left',            ($i * $cfg['SQP']['fmtInd']) . $cfg['SQP']['fmtIndUnit']);    }    return $css_string;} // end of the "PMA_SQP_buildCssData()" functionif (! defined('PMA_MINIMUM_COMMON')) {    /**     * Gets SQL queries with no format     *     * @param array   The SQL queries list     *     * @return string  The SQL queries with no format     *     * @access public     */    function PMA_SQP_formatNone($arr)    {        $formatted_sql = htmlspecialchars($arr['raw']);        $formatted_sql = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $formatted_sql);        return $formatted_sql;    } // end of the "PMA_SQP_formatNone()" function} // end if: minimal common.lib needed??>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Exporting of translated messages from PHP to Javascript * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Close session early as we won't write anything theresession_write_close();// But this one is needed for PMA_escapeJsString()require_once './libraries/js_escape.lib.php';$js_messages['strNoDropDatabases'] = $cfg['AllowUserDropDatabase'] ? '' : __('"DROP DATABASE" statements are disabled.');/* For confirmations */$js_messages['strDoYouReally'] = __('Do you really want to ');$js_messages['strDropDatabaseStrongWarning'] = __('You are about to DESTROY a complete database!');$js_messages['strDropTableStrongWarning'] = __('You are about to DESTROY a complete table!');$js_messages['strTruncateTableStrongWarning'] = __('You are about to TRUNCATE a complete table!');$js_messages['strDeleteTrackingData'] = __('Delete tracking data for this table');$js_messages['strDeletingTrackingData'] = __('Deleting tracking data');$js_messages['strDroppingPrimaryKeyIndex'] = __('Dropping Primary Key/Index');$js_messages['strOperationTakesLongTime'] = __('This operation could take a long time. Proceed anyway?');/* For blobstreaming */$js_messages['strBLOBRepositoryDisableStrongWarning'] = __('You are about to DISABLE a BLOB Repository!');$js_messages['strBLOBRepositoryDisableAreYouSure'] = sprintf(__('Are you sure you want to disable all BLOB references for database %s?'), PMA_escapeJsString($GLOBALS['db']));/* For indexes */$js_messages['strFormEmpty'] = __('Missing value in the form!');$js_messages['strNotNumber'] = __('This is not a number!');$js_messages['strAddIndex'] = __('Add Index');$js_messages['strEditIndex'] = __('Edit Index');$js_messages['strAddToIndex'] = __('Add %d column(s) to index');/* Charts *//* l10n: Default description for the y-Axis of Charts */$js_messages['strTotalCount'] = __('Total count');/* For server_privileges.js */$js_messages['strHostEmpty'] = __('The host name is empty!');$js_messages['strUserEmpty'] = __('The user name is empty!');$js_messages['strPasswordEmpty'] = __('The password is empty!');$js_messages['strPasswordNotSame'] = __('The passwords aren\'t the same!');$js_messages['strAddUser'] = __('Add user');$js_messages['strReloadingPrivileges'] = __('Reloading Privileges');$js_messages['strRemovingSelectedUsers'] = __('Removing Selected Users');$js_messages['strClose'] = __('Close');/* for server_status.js */$js_messages['strEdit'] = __('Edit');$js_messages['strLiveTrafficChart'] = __('Live traffic chart');$js_messages['strLiveConnChart'] = __('Live conn./process chart');$js_messages['strLiveQueryChart'] = __('Live query chart');$js_messages['strStaticData'] = __('Static data');/* l10n: Total number of queries */$js_messages['strTotal'] = __('Total');/* l10n: Other, small valued, queries */$js_messages['strOther'] = __('Other');/* l10n: Thousands separator */$js_messages['strThousandsSeperator'] = __(',');/* l10n: Decimal separator */$js_messages['strDecimalSeperator'] = __('.');$js_messages['strChartKBSent'] = __('KiB sent since last refresh');$js_messages['strChartKBReceived'] = __('KiB received since last refresh');$js_messages['strChartServerTraffic'] = __('Server traffic (in KiB)');$js_messages['strChartConnections'] = __('Connections since last refresh');$js_messages['strChartProcesses'] = __('Processes');$js_messages['strChartConnectionsTitle'] = __('Connections / Processes');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueries'] = __('Questions since last refresh');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueriesTitle'] = __('Questions (executed statements by the server)');$js_messages['strChartQueryPie'] = __('Query statistics');/* server status monitor */$js_messages['strIncompatibleMonitorConfig'] = __('Local monitor configuration incompatible');$js_messages['strIncompatibleMonitorConfigDescription'] = __('The chart arrangement configuration in your browsers local storage is not compatible anymore to the newer version of the monitor dialog. It is very likely that your current configuration will not work anymore. Please reset your configuration to default in the <i>Settings</i> menu.');$js_messages['strQueryCacheEfficiency'] = __('Query cache efficiency');$js_messages['strQueryCacheUsage'] = __('Query cache usage');$js_messages['strQueryCacheUsed'] = __('Query cache used');$js_messages['strSystemCPUUsage'] = __('System CPU Usage');$js_messages['strSystemMemory'] = __('System memory');$js_messages['strSystemSwap'] = __('System swap');$js_messages['strMiB'] = __('MiB');$js_messages['strKiB'] = __('KiB');$js_messages['strAverageLoad'] = __('Average load');$js_messages['strTotalMemory'] = __('Total memory');$js_messages['strCachedMemory'] = __('Cached memory');$js_messages['strBufferedMemory'] = __('Buffered memory');$js_messages['strFreeMemory'] = __('Free memory');$js_messages['strUsedMemory'] = __('Used memory');$js_messages['strTotalSwap'] = __('Total Swap');$js_messages['strCachedSwap'] = __('Cached Swap');$js_messages['strUsedSwap'] = __('Used Swap');$js_messages['strFreeSwap'] = __('Free Swap');$js_messages['strBytesSent'] = __('Bytes sent');$js_messages['strBytesReceived'] = __('Bytes received');$js_messages['strConnections'] = __('Connections');$js_messages['strProcesses'] = __('Processes');/* summary row */$js_messages['strB'] = __('B');$js_messages['strKiB'] = __('KiB');$js_messages['strMiB'] = __('MiB');$js_messages['strGiB'] = __('GiB');$js_messages['strTiB'] = __('TiB');$js_messages['strPiB'] = __('PiB');$js_messages['strEiB'] = __('EiB');$js_messages['strTables'] = __('%d table(s)');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strQuestions'] = __('Questions');$js_messages['strTraffic'] = __('Traffic');$js_messages['strSettings'] = __('Settings');$js_messages['strRemoveChart'] = __('Remove chart');$js_messages['strEditChart'] = __('Edit title and labels');$js_messages['strAddChart'] = __('Add chart to grid');$js_messages['strClose'] = __('Close');$js_messages['strAddOneSeriesWarning'] = __('Please add at least one variable to the series');$js_messages['strNone'] = __('None');$js_messages['strResumeMonitor'] = __('Resume monitor');$js_messages['strPauseMonitor'] = __('Pause monitor');/* Monitor: Instructions Dialog */$js_messages['strBothLogOn'] = __('general_log and slow_query_log are enabled.');$js_messages['strGenLogOn'] = __('general_log is enabled.');$js_messages['strSlowLogOn'] = __('slow_query_log is enabled.');$js_messages['strBothLogOff'] = __('slow_query_log and general_log are disabled.');$js_messages['strLogOutNotTable'] = __('log_output is not set to TABLE.');$js_messages['strLogOutIsTable'] = __('log_output is set to TABLE.');$js_messages['strSmallerLongQueryTimeAdvice'] = __('slow_query_log is enabled, but the server logs only queries that take longer than %d seconds. It is advisable to set this long_query_time 0-2 seconds, depending on your system.');$js_messages['strLongQueryTimeSet'] = __('long_query_time is set to %d second(s).');$js_messages['strSettingsAppliedGlobal'] = __('Following settings will be applied globally and reset to default on server restart:');/* l10n: %s is FILE or TABLE */$js_messages['strSetLogOutput'] = __('Set log_output to %s');/* l10n: Enable in this context means setting a status variable to ON */$js_messages['strEnableVar'] = __('Enable %s');/* l10n: Disable in this context means setting a status variable to OFF */$js_messages['strDisableVar'] = __('Disable %s');/* l10n: %d seconds */$js_messages['setSetLongQueryTime'] = __('Set long_query_time to %ds');$js_messages['strNoSuperUser'] = __('You can\'t change these variables. Please log in as root or contact your database administrator.');$js_messages['strChangeSettings'] = __('Change settings');$js_messages['strCurrentSettings'] = __('Current settings');$js_messages['strChartTitle'] = __('Chart Title');/* l10n: As in differential values */$js_messages['strDifferential'] = __('Differential');$js_messages['strDividedBy'] = __('Divided by %s');$js_messages['strUnit'] = __('Unit');$js_messages['strFromSlowLog'] = __('From slow log');$js_messages['strFromGeneralLog'] = __('From general log');$js_messages['strAnalysingLogs'] = __('Analysing & loading logs. This may take a while.');$js_messages['strCancelRequest'] = __('Cancel request');$js_messages['strCountColumnExplanation'] = __('This column shows the amount of identical queries that are grouped together. However only the SQL query itself has been used as a grouping criteria, so the other attributes of queries, such as start time, may differ.');$js_messages['strMoreCountColumnExplanation'] = __('Since grouping of INSERTs queries has been selected, INSERT queries into the same table are also being grouped together, disregarding of the inserted data.');$js_messages['strLogDataLoaded'] = __('Log data loaded. Queries executed in this time span:');$js_messages['strJumpToTable'] = __('Jump to Log table');$js_messages['strNoDataFound'] = __('Log analysed, but no data found in this time span.');$js_messages['strAnalyzing'] = __('Analyzing...');$js_messages['strExplainOutput'] = __('Explain output');$js_messages['strStatus'] = __('Status');$js_messages['strTime'] = __('Time');$js_messages['strTotalTime'] = __('Total time:');$js_messages['strProfilingResults'] = __('Profiling results');$js_messages['strTable'] = _pgettext('Display format', 'Table');$js_messages['strChart'] = __('Chart');/* l10n: A collection of available filters */$js_messages['strFiltersForLogTable'] = __('Log table filter options');/* l10n: Filter as in "Start Filtering" */$js_messages['strFilter'] = __('Filter');$js_messages['strFilterByWordRegexp'] = __('Filter queries by word/regexp:');$js_messages['strIgnoreWhereAndGroup'] = __('Group queries, ignoring variable data in WHERE clauses');$js_messages['strSumRows'] = __('Sum of grouped rows:');$js_messages['strTotal'] = __('Total:');$js_messages['strLoadingLogs'] = __('Loading logs');$js_messages['strRefreshFailed'] = __('Monitor refresh failed');$js_messages['strInvalidResponseExplanation'] = __('While requesting new chart data the server returned an invalid response. This is most likely because your session expired. Reloading the page and reentering your credentials should help.');$js_messages['strReloadPage'] = __('Reload page');$js_messages['strAffectedRows'] = __('Affected rows:');$js_messages['strFailedParsingConfig'] = __('Failed parsing config file. It doesn\'t seem to be valid JSON code.');$js_messages['strFailedBuildingGrid'] = __('Failed building chart grid with imported config. Resetting to default config...');$js_messages['strImport'] = __('Import');$js_messages['strAnalyzeQuery'] = __('Analyse Query');/* Server status advisor */$js_messages['strAdvisorSystem'] = __('Advisor system');$js_messages['strPerformanceIssues'] = __('Possible performance issues');$js_messages['strIssuse'] = __('Issue');$js_messages['strRecommendation'] = __('Recommendation');$js_messages['strRuleDetails'] = __('Rule details');$js_messages['strJustification'] = __('Justification');$js_messages['strFormula'] = __('Used variable / formula');$js_messages['strTest'] = __('Test');/* For inline query editing */$js_messages['strGo'] = __('Go');$js_messages['strCancel'] = __('Cancel');/* For Ajax Notifications */$js_messages['strLoading'] = __('Loading');$js_messages['strProcessingRequest'] = __('Processing Request');$js_messages['strErrorProcessingRequest'] = __('Error in Processing Request');$js_messages['strDroppingColumn'] = __('Dropping Column');$js_messages['strAddingPrimaryKey'] = __('Adding Primary Key');$js_messages['strOK'] = __('OK');$js_messages['strDismiss'] = __('Click to dismiss this notification');/* For db_operations.js */$js_messages['strRenamingDatabases'] = __('Renaming Databases');$js_messages['strReloadDatabase'] = __('Reload Database');$js_messages['strCopyingDatabase'] = __('Copying Database');$js_messages['strChangingCharset'] = __('Changing Charset');$js_messages['strTableMustHaveAtleastOneColumn'] = __('Table must have at least one column');$js_messages['strYes'] = __('Yes');$js_messages['strNo'] = __('No');/* For db_stucture.js */$js_messages['strInsertTable'] = __('Insert Table');$js_messages['strHideIndexes'] = __('Hide indexes');$js_messages['strShowIndexes'] = __('Show indexes');/* For db_search.js */$js_messages['strSearching'] = __('Searching');$js_messages['strHideSearchResults'] = __('Hide search results');$js_messages['strShowSearchResults'] = __('Show search results');$js_messages['strBrowsing'] = __('Browsing');$js_messages['strDeleting'] = __('Deleting');/* For db_routines.js */$js_messages['MissingReturn'] = __('The definition of a stored function must contain a RETURN statement!');/* For ENUM/SET editor*/$js_messages['enum_editor'] = __('ENUM/SET editor');$js_messages['enum_columnVals'] =__('Values for column %s');$js_messages['enum_newColumnVals'] = __('Values for a new column');$js_messages['enum_hint'] =__('Enter each value in a separate field');$js_messages['enum_addValue'] =__('Add %d value(s)');/* For import.js */$js_messages['strImportCSV'] = __('Note: If the file contains multiple tables, they will be combined into one');/* For sql.js */$js_messages['strHideQueryBox'] = __('Hide query box');$js_messages['strShowQueryBox'] = __('Show query box');$js_messages['strEdit'] = __('Edit');$js_messages['strNoRowSelected'] = __('No rows selected');$js_messages['strChangeTbl'] = __('Change');$js_messages['strQueryExecutionTime'] = __('Query execution time');/* For server_variables.js */$js_messages['strSave'] = __('Save');/* For tbl_select.js */$js_messages['strHideSearchCriteria'] = __('Hide search criteria');$js_messages['strShowSearchCriteria'] = __('Show search criteria');/* For tbl_zoom_plot.js */$js_messages['strZoomSearch'] = __('Zoom Search');$js_messages['strDisplayHelp'] = '<ul><li>'    . __('Each point represents a data row.')    . '</li><li>'    . __('Hovering over a point will show its label.')    . '</li><li>'    . __('Use mousewheel to zoom in or out of the plot.')    . '</li><li>'    . __('Click and drag the mouse to navigate the plot.')    . '</li><li>'    . __('Click reset zoom link to come back to original state.')    . '</li><li>'    . __('Click a data point to view and possibly edit the data row.')    . '</li><li>'    . __('The plot can be resized by dragging it along the bottom right corner.')    . '</li><li>'    . __('Strings are converted into integer for plotting')    . '</li></ul>';$js_messages['strInputNull'] = '<strong>' . __('Select two columns') . '</strong>';$js_messages['strSameInputs'] = '<strong>' . __('Select two different columns') . '</strong>';$js_messages['strQueryResults'] = __('Query results');$js_messages['strDataPointContent'] = __('Data point content');/* For tbl_change.js */$js_messages['strIgnore'] = __('Ignore');$js_messages['strCopy'] = __('Copy');$js_messages['strX'] = __('X');$js_messages['strY'] = __('Y');$js_messages['strPoint'] = __('Point');$js_messages['strPointN'] = __('Point %d');$js_messages['strLineString'] = __('Linestring');$js_messages['strPolygon'] = __('Polygon');$js_messages['strGeometry'] = __('Geometry');$js_messages['strInnerRing'] = __('Inner Ring');$js_messages['strOuterRing'] = __('Outer Ring');$js_messages['strAddPoint'] = __('Add a point');$js_messages['strAddInnerRing'] = __('Add an inner ring');$js_messages['strAddPolygon'] = __('Add a polygon');/* For tbl_structure.js */$js_messages['strAddColumns'] = __('Add columns');/* Designer (js/pmd/move.js) */$js_messages['strSelectReferencedKey'] = __('Select referenced key');$js_messages['strSelectForeignKey'] = __('Select Foreign Key');$js_messages['strPleaseSelectPrimaryOrUniqueKey'] = __('Please select the primary key or a unique key');$js_messages['strChangeDisplay'] = __('Choose column to display');$js_messages['strLeavingDesigner'] = __('You haven\'t saved the changes in the layout. They will be lost if you don\'t save them. Do you want to continue?');/* Visual query builder (js/pmd/move.js) */$js_messages['strAddOption'] = __('Add an option for column ');/* For makegrid.js (column reordering, show/hide column, grid editing) */$js_messages['strCellEditHint'] = __('Press escape to cancel editing');$js_messages['strSaveCellWarning'] = __('You have edited some data and they have not been saved. Are you sure you want to leave this page before saving the data?');$js_messages['strColOrderHint'] = __('Drag to reorder');$js_messages['strSortHint'] = __('Click to sort');$js_messages['strColMarkHint'] = __('Click to mark/unmark');$js_messages['strColVisibHint'] = __('Click the drop-down arrow<br />to toggle column\'s visibility');$js_messages['strShowAllCol'] = __('Show all');$js_messages['strAlertNonUnique'] = __('This table does not contain a unique column. Features related to the grid edit, checkbox, Edit, Copy and Delete links may not work after saving.');$js_messages['strGridEditFeatureHint'] = __('You can also edit most columns<br />by clicking directly on their content.');$js_messages['strGoToLink'] = __('Go to link');/* password generation */$js_messages['strGeneratePassword'] = __('Generate password');$js_messages['strGenerate'] = __('Generate');$js_messages['strChangePassword'] = __('Change Password');/* navigation tabs */$js_messages['strMore'] = __('More');/* update */$js_messages['strNewerVersion'] = __('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.');/* l10n: Latest available phpMyAdmin version */$js_messages['strLatestAvailable'] = __(', latest stable version:');$js_messages['strUpToDate'] = __('up to date');echo "var PMA_messages = new Array();\n";foreach ($js_messages as $name => $js_message) {    PMA_printJsValue("PMA_messages['" . $name . "']", $js_message);}/* Calendar */echo "var themeCalendarImage = '" . $GLOBALS['pmaThemeImage'] . 'b_calendar.png' . "';\n";/* Image path */echo "var pmaThemeImage = '" . $GLOBALS['pmaThemeImage'] . "';\n";/* Version */echo "var pmaversion = '" . PMA_VERSION . "';\n";echo "if ($.datepicker) {\n";/* l10n: Display text for calendar close link */PMA_printJsValue("$.datepicker.regional['']['closeText']", __('Done'));/* l10n: Display text for previous month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['prevText']",    _pgettext('Previous month', 'Prev'));/* l10n: Display text for next month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['nextText']",    _pgettext('Next month', 'Next'));/* l10n: Display text for current month link in calendar */PMA_printJsValue("$.datepicker.regional['']['currentText']", __('Today'));PMA_printJsValue("$.datepicker.regional['']['monthNames']",    array(        __('January'),        __('February'),        __('March'),        __('April'),        __('May'),        __('June'),        __('July'),        __('August'),        __('September'),        __('October'),        __('November'),        __('December')));PMA_printJsValue("$.datepicker.regional['']['monthNamesShort']",    array(/* l10n: Short month name */        __('Jan'),/* l10n: Short month name */        __('Feb'),/* l10n: Short month name */        __('Mar'),/* l10n: Short month name */        __('Apr'),/* l10n: Short month name */        _pgettext('Short month name', 'May'),/* l10n: Short month name */        __('Jun'),/* l10n: Short month name */        __('Jul'),/* l10n: Short month name */        __('Aug'),/* l10n: Short month name */        __('Sep'),/* l10n: Short month name */        __('Oct'),/* l10n: Short month name */        __('Nov'),/* l10n: Short month name */        __('Dec')));PMA_printJsValue("$.datepicker.regional['']['dayNames']",    array(        __('Sunday'),        __('Monday'),        __('Tuesday'),        __('Wednesday'),        __('Thursday'),        __('Friday'),        __('Saturday')));PMA_printJsValue("$.datepicker.regional['']['dayNamesShort']",    array(/* l10n: Short week day name */        __('Sun'),/* l10n: Short week day name */        __('Mon'),/* l10n: Short week day name */        __('Tue'),/* l10n: Short week day name */        __('Wed'),/* l10n: Short week day name */        __('Thu'),/* l10n: Short week day name */        __('Fri'),/* l10n: Short week day name */        __('Sat')));PMA_printJsValue("$.datepicker.regional['']['dayNamesMin']",    array(/* l10n: Minimal week day name */        __('Su'),/* l10n: Minimal week day name */        __('Mo'),/* l10n: Minimal week day name */        __('Tu'),/* l10n: Minimal week day name */        __('We'),/* l10n: Minimal week day name */        __('Th'),/* l10n: Minimal week day name */        __('Fr'),/* l10n: Minimal week day name */        __('Sa')));/* l10n: Column header for week of the year in calendar */PMA_printJsValue("$.datepicker.regional['']['weekHeader']", __('Wk'));/* l10n: Month-year order for calendar, use either "calendar-month-year" or "calendar-year-month". */PMA_printJsValue("$.datepicker.regional['']['showMonthAfterYear']", (__('calendar-month-year') == 'calendar-year-month'));/* l10n: Year suffix for calendar, "none" is empty. */$year_suffix = _pgettext('Year suffix', 'none');PMA_printJsValue("$.datepicker.regional['']['yearSuffix']", ($year_suffix == 'none' ? '' : $year_suffix));?>$.extend($.datepicker._defaults, $.datepicker.regional['']);} /* if ($.datepicker) */<?phpecho "if ($.timepicker) {\n";PMA_printJsValue("$.timepicker.regional['']['timeText']", __('Time'));PMA_printJsValue("$.timepicker.regional['']['hourText']", __('Hour'));PMA_printJsValue("$.timepicker.regional['']['minuteText']", __('Minute'));PMA_printJsValue("$.timepicker.regional['']['secondText']", __('Second'));?>$.extend($.timepicker._defaults, $.timepicker.regional['']);} /* if ($.timepicker) */
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays a form for editing ENUM and SET values with more * space (as an alternative to doing it in tbl_alter.php). * This form is only for users with JavaScript disabled, * users with JavaScript enabled will see a jQuery dialog. * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';?></head><body>    <form action="enum_editor.php" method="get">        <?php echo PMA_generate_common_hidden_inputs(); ?>        <input type="hidden" name="field" value="<?php echo htmlspecialchars($_GET['field']); ?>" />        <fieldset class="enum_editor_no_js">        <legend><?php echo __('ENUM/SET editor'); ?></legend>        <div class="enum_editor_no_js">            <h3>            <?php                if (empty($_GET['field'])) {                    echo __('Values for a new column');                } else {                    printf(__('Values for column %s'), '"' . htmlspecialchars($_GET['field']) . '"');                }            ?>            </h3>            <p><?php echo PMA_getImage('s_info.png') . __('Enter each value in a separate field'); ?></p>            <table id="values">            <?php                // Get the enum values                $values = array();                // If the values are in an array                if (isset($_GET['values']) && is_array($_GET['values'])) {                     // then this page was called from itself via the "Add a value", "Drop" or "Go" buttons                    $values = $_GET['values'];                    foreach ($values as $key => $value) {                        $values[$key] = htmlentities($value);                    }                    // If the values are in a string                } elseif (isset($_GET['values']) && is_string($_GET['values'])) {                    // then this page was called via a link from some external page                    $values_string = htmlentities($_GET['values']);                    // There is a JS port of the below parser in functions.js                    // If you are fixing something here,                    // you need to also update the JS port.                    $values = array();                    $in_string = false;                    $buffer = '';                    for ($i=0; $i<strlen($values_string); $i++) {                        $curr = $values_string[$i];                        $next = $i == strlen($values_string)-1 ? '' : $values_string[$i+1];                        if (! $in_string && $curr == "'") {                            $in_string = true;                        } else if ($in_string && $curr == "\\" && $next == "\\") {                            $buffer .= "&#92;";                            $i++;                        } else if ($in_string && $next == "'" && ($curr == "'" || $curr == "\\")) {                            $buffer .= "&#39;";                            $i++;                        } else if ($in_string && $curr == "'") {                            $in_string = false;                            $values[] = $buffer;                            $buffer = '';                        } else if ($in_string) {                             $buffer .= $curr;                        }                    }                    if (strlen($buffer) > 0) {                        // The leftovers in the buffer are the last value (if any)                        $values[] = $buffer;                    }                }                // Escape double quotes                foreach ($values as $key => $value) {                    $values[$key] = str_replace('"', "&quote;", $value);                }                // If there are no values, maybe the user is about to make a                // new list so we add a few for him/her to get started with.                if (! count($values)                    || (count($values) == 1 && strlen($values[0]) == 0)                ) {                    array_push($values, '', '', '');                }                // Add an empty value, if there was a request to do so                if (! empty($_GET['add_field'])) {                    $values[] = '';                }                // Remove a value, given a valid index, from the list                // of values, if there was a request to do so.                if (isset($_GET['drop']) && is_array($_GET['drop'])) {                    foreach ($_GET['drop'] as $index => $value) {                        if ((int)$index == $index                            && $index > 0                            && $index <= count($values)                        ) {                            unset($values[$index]);                        }                    }                }                // Display the values in text fields                $field_counter = 0;                foreach ($values as $value) {                    $field_counter++;                    echo sprintf(                        '<tr><td><input class="text" type="text" size="30" value="%s" name="values[' . $field_counter . ']" />' . "\n",                        $value                    );                    echo '</td><td>';                    echo '<input class="drop" type="submit" value="' . __('Drop') . '" name="drop[' . $field_counter . ']" />' . "\n";                    echo '</td></tr>' . "\n";                }            ?>                <tr><td>                    <input type="submit" class="submit" value="<?php echo __('Go'); ?>" />                </td><td>                    <input type="submit" class="submit" name="add_field" value="<?php echo __('Add a value'); ?>" />                </td></tr>            </table>        </div>        <hr class='enum_editor_no_js' />        <div id="enum_editor_output">        <h3><?php echo __('Output'); ?></h3>        <p><?php echo PMA_getImage('s_info.png') . __('Copy and paste the joined values into the "Length/Values" field'); ?></p>            <?php                // Escape quotes and slashes for usage with MySQL                foreach ($values as $key => $value) {                    $values[$key]  = "'";                    $values[$key] .= str_replace(                        array("'", "\\", "&#39;", "&#92;"),                        array("''", '\\\\', "''", '\\\\'),                        $value                    );                    $values[$key] .= "'";                }                // Print out the values as a string            ?>            <textarea id="joined_values" cols="95" rows="5"><?php echo join(",", $values); ?></textarea>        </div>        </fieldset>    </form></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays status variables with descriptions and some hints an optmizing *  + reset status variables * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_header_sent'] = true;}require_once './libraries/common.inc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    // real-time charting data    if (isset($_REQUEST['chart_data'])) {        switch($_REQUEST['type']) {        // Process and Connections realtime chart        case 'proc':            $c = PMA_DBI_fetch_result("SHOW GLOBAL STATUS WHERE Variable_name = 'Connections'", 0, 1);            $result = PMA_DBI_query('SHOW PROCESSLIST');            $num_procs = PMA_DBI_num_rows($result);            $ret = array(                'x'      => microtime(true) * 1000,                'y_proc' => $num_procs,                'y_conn' => $c['Connections']            );            exit(json_encode($ret));        // Query realtime chart        case 'queries':            if (PMA_DRIZZLE) {                $sql = "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS                    WHERE variable_value > 0                      UNION                    SELECT variable_name, variable_value                    FROM data_dictionary.GLOBAL_STATUS                    WHERE variable_name = 'Questions'";                $queries = PMA_DBI_fetch_result($sql, 0, 1);            } else {                $queries = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE (Variable_name LIKE 'Com_%' OR Variable_name = 'Questions')                        AND Value > 0", 0, 1                );            }            cleanDeprecated($queries);            // admin commands are not queries            unset($queries['Com_admin_commands']);            $questions = $queries['Questions'];            unset($queries['Questions']);            //$sum=array_sum($queries);            $ret = array(                'x'         => microtime(true) * 1000,                'y'         => $questions,                'pointInfo' => $queries            );            exit(json_encode($ret));        // Traffic realtime chart        case 'traffic':            $traffic = PMA_DBI_fetch_result(                "SHOW GLOBAL STATUS                WHERE Variable_name = 'Bytes_received'                    OR Variable_name = 'Bytes_sent'", 0, 1            );            $ret = array(                'x'          => microtime(true) * 1000,                'y_sent'     => $traffic['Bytes_sent'],                'y_received' => $traffic['Bytes_received']            );            exit(json_encode($ret));        // Data for the monitor        case 'chartgrid':            $ret = json_decode($_REQUEST['requiredData'], true);            $statusVars = array();            $serverVars = array();            $sysinfo = $cpuload = $memory = 0;            $pName = '';            /* Accumulate all required variables and data */            // For each chart            foreach ($ret as $chart_id => $chartNodes) {                // For each data series                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    // For each data point in the series (usually just 1)                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        $pName = $dataPoint['name'];                        switch ($dataPoint['type']) {                        /* We only collect the status and server variables here to                         * read them all in one query, and only afterwards assign them.                         * Also do some white list filtering on the names                        */                        case 'servervar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $serverVars[] = $pName;                            }                            break;                        case 'statusvar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $statusVars[] = $pName;                            }                            break;                        case 'proc':                            $result = PMA_DBI_query('SHOW PROCESSLIST');                            $ret[$chart_id][$node_id][$point_id]['value'] = PMA_DBI_num_rows($result);                            break;                        case 'cpu':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$cpuload) {                                $cpuload = $sysinfo->loadavg();                            }                            if (PHP_OS == 'Linux') {                                $ret[$chart_id][$node_id][$point_id]['idle'] = $cpuload['idle'];                                $ret[$chart_id][$node_id][$point_id]['busy'] = $cpuload['busy'];                            } else                                $ret[$chart_id][$node_id][$point_id]['value'] = $cpuload['loadavg'];                            break;                        case 'memory':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$memory) {                                $memory  = $sysinfo->memory();                            }                            $ret[$chart_id][$node_id][$point_id]['value'] = $memory[$pName];                            break;                        } /* switch */                    } /* foreach */                } /* foreach */            } /* foreach */            // Retrieve all required status variables            if (count($statusVars)) {                $statusVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE Variable_name='" . implode("' OR Variable_name='", $statusVars) . "'", 0, 1                );            } else {                $statusVarValues = array();            }            // Retrieve all required server variables            if (count($serverVars)) {                $serverVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL VARIABLES                    WHERE Variable_name='" . implode("' OR Variable_name='", $serverVars) . "'", 0, 1                );            } else {                $serverVarValues = array();            }            // ...and now assign them            foreach ($ret as $chart_id => $chartNodes) {                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        switch($dataPoint['type']) {                        case 'statusvar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $statusVarValues[$dataPoint['name']];                            break;                        case 'servervar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $serverVarValues[$dataPoint['name']];                            break;                        }                    }                }            }            $ret['x'] = microtime(true) * 1000;            exit(json_encode($ret));        }    }    if (isset($_REQUEST['log_data'])) {        if (PMA_MYSQL_INT_VERSION < 50106) {            /* FIXME: why this? */            exit('""');        }        $start = intval($_REQUEST['time_start']);        $end = intval($_REQUEST['time_end']);        if ($_REQUEST['type'] == 'slow') {            $q = 'SELECT start_time, user_host, Sec_to_Time(Sum(Time_to_Sec(query_time))) as query_time, Sec_to_Time(Sum(Time_to_Sec(lock_time))) as lock_time, '.                 'SUM(rows_sent) AS rows_sent, SUM(rows_examined) AS rows_examined, db, sql_text, COUNT(sql_text) AS \'#\' '.                 'FROM `mysql`.`slow_log` WHERE start_time > FROM_UNIXTIME(' . $start . ') '.                 'AND start_time < FROM_UNIXTIME(' . $end . ') GROUP BY sql_text';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            while ($row = PMA_DBI_fetch_assoc($result)) {                $type = strtolower(substr($row['sql_text'], 0, strpos($row['sql_text'], ' ')));                switch($type) {                case 'insert':                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['sql_text']) > 220) {                        $row['sql_text'] = substr($row['sql_text'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['sql_text']), 2, 2))                            . ']';                    }                    break;                default:                    break;                }                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                $return['rows'][] = $row;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }        if ($_REQUEST['type'] == 'general') {            $limitTypes = (isset($_REQUEST['limitTypes']) && $_REQUEST['limitTypes'])                            ? 'AND argument REGEXP \'^(INSERT|SELECT|UPDATE|DELETE)\' ' : '';            $q = 'SELECT TIME(event_time) as event_time, user_host, thread_id, server_id, argument, count(argument) as \'#\' '.                 'FROM `mysql`.`general_log` WHERE command_type=\'Query\' '.                 'AND event_time > FROM_UNIXTIME(' . $start . ') AND event_time < FROM_UNIXTIME(' . $end . ') '.                 $limitTypes . 'GROUP by argument'; // HAVING count > 1';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            $insertTables = array();            $insertTablesFirst = -1;            $i = 0;            $removeVars = isset($_REQUEST['removeVariables']) && $_REQUEST['removeVariables'];            while ($row = PMA_DBI_fetch_assoc($result)) {                preg_match('/^(\w+)\s/', $row['argument'], $match);                $type = strtolower($match[1]);                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                switch($type) {                case 'insert':                    // Group inserts if selected                    if ($removeVars && preg_match('/^INSERT INTO (`|\'|"|)([^\s\\1]+)\\1/i', $row['argument'], $matches)) {                        $insertTables[$matches[2]]++;                        if ($insertTables[$matches[2]] > 1) {                            $return['rows'][$insertTablesFirst]['#'] = $insertTables[$matches[2]];                            // Add a ... to the end of this query to indicate that there's been other queries                            if ($return['rows'][$insertTablesFirst]['argument'][strlen($return['rows'][$insertTablesFirst]['argument'])-1] != '.') {                                $return['rows'][$insertTablesFirst]['argument'] .= '<br/>...';                            }                            // Group this value, thus do not add to the result list                            continue 2;                        } else {                            $insertTablesFirst = $i;                            $insertTables[$matches[2]] += $row['#'] - 1;                        }                    }                    // No break here                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['argument']) > 220) {                        $row['argument'] = substr($row['argument'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['argument'])), 2, 2)                            . ']';                    }                    break;                default:                    break;                }                $return['rows'][] = $row;                $i++;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }    }    if (isset($_REQUEST['logging_vars'])) {        if (isset($_REQUEST['varName']) && isset($_REQUEST['varValue'])) {            $value = PMA_sqlAddslashes($_REQUEST['varValue']);            if (!is_numeric($value)) {                $value="'" . $value . "'";            }            if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName'])) {                PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value);            }        }        $loggingVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES WHERE Variable_name IN ("general_log","slow_query_log","long_query_time","log_output")', 0, 1);        exit(json_encode($loggingVars));    }    if (isset($_REQUEST['query_analyzer'])) {        $return = array();        if (strlen($_REQUEST['database'])) {            PMA_DBI_select_db($_REQUEST['database']);        }        if ($profiling = PMA_profilingSupported()) {            PMA_DBI_query('SET PROFILING=1;');        }        // Do not cache query        $query = preg_replace('/^(\s*SELECT)/i', '\\1 SQL_NO_CACHE', $_REQUEST['query']);        $result = PMA_DBI_try_query($query);        $return['affectedRows'] = $GLOBALS['cached_affected_rows'];        $result = PMA_DBI_try_query('EXPLAIN ' . $query);        while ($row = PMA_DBI_fetch_assoc($result)) {            $return['explain'][] = $row;        }        // In case an error happened        $return['error'] = PMA_DBI_getError();        PMA_DBI_free_result($result);        if ($profiling) {            $return['profiling'] = array();            $result = PMA_DBI_try_query('SELECT seq,state,duration FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID=1 ORDER BY seq');            while ($row = PMA_DBI_fetch_assoc($result)) {                $return['profiling'][]= $row;            }            PMA_DBI_free_result($result);        }        exit(json_encode($return));    }    if (isset($_REQUEST['advisor'])) {        include 'libraries/Advisor.class.php';        $advisor = new Advisor();        exit(json_encode($advisor->run()));    }}/** * Replication library */if (PMA_DRIZZLE) {    $server_master_status = false;    $server_slave_status = false;} else {    include_once './libraries/replication.inc.php';    include_once './libraries/replication_gui.lib.php';}/** * JS Includes */$GLOBALS['js_include'][] = 'server_status.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js'; // For tab persistence// Charting$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * flush status variables if requested */if (isset($_REQUEST['flush'])) {    $_flush_commands = array(        'STATUS',        'TABLES',        'QUERY CACHE',    );    if (in_array($_REQUEST['flush'], $_flush_commands)) {        PMA_DBI_query('FLUSH ' . $_REQUEST['flush'] . ';');    }    unset($_flush_commands);}/** * Kills a selected process */if (!empty($_REQUEST['kill'])) {    if (PMA_DBI_try_query('KILL ' . $_REQUEST['kill'] . ';')) {        $message = PMA_Message::success(__('Thread %s was successfully killed.'));    } else {        $message = PMA_Message::error(__('phpMyAdmin was unable to kill thread %s. It probably has already been closed.'));    }    $message->addParam($_REQUEST['kill']);    //$message->display();}/** * get status from server */$server_status = PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1);if (PMA_DRIZZLE) {    // Drizzle doesn't put query statistics into variables, add it    $sql = "SELECT concat('Com_', variable_name), variable_value        FROM data_dictionary.GLOBAL_STATEMENTS";    $statements = PMA_DBI_fetch_result($sql, 0, 1);    $server_status = array_merge($server_status, $statements);}/** * for some calculations we require also some server settings */$server_variables = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1);/** * cleanup of some deprecated values */cleanDeprecated($server_status);/** * calculate some values */// Key_buffer_fractionif (isset($server_status['Key_blocks_unused'])    && isset($server_variables['key_cache_block_size'])    && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = 100        - $server_status['Key_blocks_unused']        * $server_variables['key_cache_block_size']        / $server_variables['key_buffer_size']        * 100;} elseif (isset($server_status['Key_blocks_used'])        && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = $server_status['Key_blocks_used']        * 1024        / $server_variables['key_buffer_size'];}// Ratio for key read/writeif (isset($server_status['Key_writes'])    && isset($server_status['Key_write_requests'])    && $server_status['Key_write_requests'] > 0) {    $server_status['Key_write_ratio_%'] = 100 * $server_status['Key_writes'] / $server_status['Key_write_requests'];}if (isset($server_status['Key_reads'])    && isset($server_status['Key_read_requests'])    && $server_status['Key_read_requests'] > 0) {    $server_status['Key_read_ratio_%'] = 100 * $server_status['Key_reads'] / $server_status['Key_read_requests'];}// Threads_cache_hitrateif (isset($server_status['Threads_created'])    && isset($server_status['Connections'])    && $server_status['Connections'] > 0) {    $server_status['Threads_cache_hitrate_%']        = 100 - $server_status['Threads_created'] / $server_status['Connections'] * 100;}/** * split variables in sections */$allocations = array(    // variable name => section    // variable names match when they begin with the given string    'Com_'              => 'com',    'Innodb_'           => 'innodb',    'Ndb_'              => 'ndb',    'Handler_'          => 'handler',    'Qcache_'           => 'qcache',    'Threads_'          => 'threads',    'Slow_launch_threads' => 'threads',    'Binlog_cache_'     => 'binlog_cache',    'Created_tmp_'      => 'created_tmp',    'Key_'              => 'key',    'Delayed_'          => 'delayed',    'Not_flushed_delayed_rows' => 'delayed',    'Flush_commands'    => 'query',    'Last_query_cost'   => 'query',    'Slow_queries'      => 'query',    'Queries'           => 'query',    'Prepared_stmt_count' => 'query',    'Select_'           => 'select',    'Sort_'             => 'sort',    'Open_tables'       => 'table',    'Opened_tables'     => 'table',    'Open_table_definitions' => 'table',    'Opened_table_definitions' => 'table',    'Table_locks_'      => 'table',    'Rpl_status'        => 'repl',    'Slave_'            => 'repl',    'Tc_'               => 'tc',    'Ssl_'              => 'ssl',    'Open_files'        => 'files',    'Open_streams'      => 'files',    'Opened_files'      => 'files',);$sections = array(    // section => section name (description)    'com'           => 'Com',    'query'         => __('SQL query'),    'innodb'        => 'InnoDB',    'ndb'           => 'NDB',    'handler'       => __('Handler'),    'qcache'        => __('Query cache'),    'threads'       => __('Threads'),    'binlog_cache'  => __('Binary log'),    'created_tmp'   => __('Temporary data'),    'delayed'       => __('Delayed inserts'),    'key'           => __('Key cache'),    'select'        => __('Joins'),    'repl'          => __('Replication'),    'sort'          => __('Sorting'),    'table'         => __('Tables'),    'tc'            => __('Transaction coordinator'),    'files'         => __('Files'),    'ssl'           => 'SSL',    'other'         => __('Other'));/** * define some needfull links/commands */// variable or section name => (name => url)$links = array();$links['table'][__('Flush (close) all tables')]    = $PMA_PHP_SELF . '?flush=TABLES&amp;' . PMA_generate_common_url();$links['table'][__('Show open tables')]    = 'sql.php?sql_query=' . urlencode('SHOW OPEN TABLES') .        '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();if ($server_master_status) {    $links['repl'][__('Show slave hosts')]        = 'sql.php?sql_query=' . urlencode('SHOW SLAVE HOSTS') .            '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();    $links['repl'][__('Show master status')] = '#replication_master';}if ($server_slave_status) {    $links['repl'][__('Show slave status')] = '#replication_slave';}$links['repl']['doc'] = 'replication';$links['qcache'][__('Flush query cache')]    = $PMA_PHP_SELF . '?flush=' . urlencode('QUERY CACHE') . '&amp;' .        PMA_generate_common_url();$links['qcache']['doc'] = 'query_cache';//$links['threads'][__('Show processes')]//    = 'server_processlist.php?' . PMA_generate_common_url();$links['threads']['doc'] = 'mysql_threads';$links['key']['doc'] = 'myisam_key_cache';$links['binlog_cache']['doc'] = 'binary_log';$links['Slow_queries']['doc'] = 'slow_query_log';$links['innodb'][__('Variables')]    = 'server_engines.php?engine=InnoDB&amp;' . PMA_generate_common_url();$links['innodb'][__('InnoDB Status')]    = 'server_engines.php?engine=InnoDB&amp;page=Status&amp;' .        PMA_generate_common_url();$links['innodb']['doc'] = 'innodb';// Variable to contain all com_ variables (query statistics)$used_queries = array();// Variable to map variable names to their respective section name// (used for js category filtering)$allocationMap = array();// Variable to mark used sections$categoryUsed = array();// sort vars into arraysforeach ($server_status as $name => $value) {    $section_found = false;    foreach ($allocations as $filter => $section) {        if (strpos($name, $filter) !== false) {            $allocationMap[$name] = $section;            $categoryUsed[$section] = true;            $section_found = true;            if ($section == 'com' && $value > 0) {                $used_queries[$name] = $value;            }            break; // Only exits inner loop        }    }    if (!$section_found) {        $allocationMap[$name] = 'other';        $categoryUsed['other'] = true;    }}if (PMA_DRIZZLE) {    $used_queries = PMA_DBI_fetch_result(        'SELECT * FROM data_dictionary.global_statements',        0,        1    );    unset($used_queries['admin_commands']);} else {    // admin commands are not queries (e.g. they include COM_PING,    // which is excluded from $server_status['Questions'])    unset($used_queries['Com_admin_commands']);}/* Ajax request refresh */if (isset($_REQUEST['show']) && isset($_REQUEST['ajax_request'])) {    switch($_REQUEST['show']) {    case 'query_statistics':        printQueryStatistics();        exit();    case 'server_traffic':        printServerTraffic();        exit();    case 'variables_table':        // Prints the variables table        printVariablesTable();        exit();    default:        break;    }}$server_db_isLocal = strtolower($cfg['Server']['host']) == 'localhost'                              || $cfg['Server']['host'] == '127.0.0.1'                              || $cfg['Server']['host'] == '::1';PMA_AddJSVar(    'pma_token',    $_SESSION[' PMA_token ']);PMA_AddJSVar(    'url_query',    str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar(    'server_time_diff',    'new Date().getTime() - ' . (microtime(true) * 1000),    false);PMA_AddJSVar(    'server_os',    PHP_OS);PMA_AddJSVar(    'is_superuser',    PMA_isSuperuser());PMA_AddJSVar(    'server_db_isLocal',    $server_db_isLocal);PMA_AddJSVar(    'profiling_docu',    PMA_showMySQLDocu('general-thread-states', 'general-thread-states'));PMA_AddJSVar(    'explain_docu',    PMA_showMySQLDocu('explain-output', 'explain-output'));/** * start output */ /** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';?><div id="serverstatus">    <h2><?php/** * Displays the sub-page heading */if ($GLOBALS['cfg']['MainPageIconic']) {    echo PMA_getImage('s_status.png');}echo __('Runtime Information');?></h2>    <div id="serverStatusTabs">        <ul>            <li><a href="#statustabs_traffic"><?php echo __('Server'); ?></a></li>            <li><a href="#statustabs_queries"><?php echo __('Query statistics'); ?></a></li>            <li><a href="#statustabs_allvars"><?php echo __('All status variables'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_charting"><?php echo __('Monitor'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_advisor"><?php echo __('Advisor'); ?></a></li>        </ul>        <div id="statustabs_traffic" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=server_traffic&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_trafficChartRefresh"><?php echo __('Refresh rate: '); ?></label>                    <?php refreshList('trafficChartRefresh'); ?>                </span>                <a class="tabChart livetrafficLink" href="#">                    <?php echo __('Live traffic chart'); ?>                </a>                <a class="tabChart liveconnectionsLink" href="#">                    <?php echo __('Live conn./process chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printServerTraffic(); ?>            </div>        </div>        <div id="statustabs_queries" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh"  href="<?php echo $PMA_PHP_SELF . '?show=query_statistics&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_queryChartRefresh"><?php echo __('Refresh rate: '); ?></label>                       <?php refreshList('queryChartRefresh'); ?>                </span>                <a class="tabChart livequeriesLink" href="#">                    <?php echo __('Live query chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printQueryStatistics(); ?>            </div>        </div>        <div id="statustabs_allvars" class="clearfloat">            <fieldset id="tableFilter" class="jsfeature">                <div class="buttonlinks">                    <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=variables_table&amp;' . PMA_generate_common_url(); ?>" >                        <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                        <?php echo __('Refresh'); ?>                    </a>                </div>                <legend><?php echo __('Filters'); ?></legend>                <div class="formelement">                    <label for="filterText"><?php echo __('Containing the word:'); ?></label>                    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" />                </div>                <div class="formelement">                    <input type="checkbox" name="filterAlert" id="filterAlert" />                    <label for="filterAlert"><?php echo __('Show only alert values'); ?></label>                </div>                <div class="formelement">                    <select id="filterCategory" name="filterCategory">                        <option value=''><?php echo __('Filter by category...'); ?></option>                <?php                        foreach ($sections as $section_id => $section_name) {                            if (isset($categoryUsed[$section_id])) {                ?>                                <option value='<?php echo $section_id; ?>'><?php echo $section_name; ?></option>                <?php                            }                        }                ?>                    </select>                </div>                <div class="formelement">                    <input type="checkbox" name="dontFormat" id="dontFormat" />                    <label for="dontFormat"><?php echo __('Show unformatted values'); ?></label>                </div>            </fieldset>            <div id="linkSuggestions" class="defaultLinks" style="display:none">                <p class="notice"><?php echo __('Related links:'); ?>                <?php                foreach ($links as $section_name => $section_links) {                    echo '<span class="status_' . $section_name . '"> ';                    $i=0;                    foreach ($section_links as $link_name => $link_url) {                        if ($i > 0) {                            echo ', ';                        }                        if ('doc' == $link_name) {                            echo PMA_showMySQLDocu($link_url, $link_url);                        } else {                            echo '<a href="' . $link_url . '">' . $link_name . '</a>';                        }                        $i++;                    }                    echo '</span>';                }                unset($link_url, $link_name, $i);                ?>                </p>            </div>            <div class="tabInnerContent">                <?php printVariablesTable(); ?>            </div>        </div>        <div id="statustabs_charting" class="jsfeature">            <?php printMonitor(); ?>        </div>        <div id="statustabs_advisor" class="jsfeature">            <div class="tabLinks">                <?php echo PMA_getImage('play.png'); ?> <a href="#startAnalyzer"><?php echo __('Run analyzer'); ?></a>                <?php echo PMA_getImage('b_help.png'); ?> <a href="#openAdvisorInstructions"><?php echo __('Instructions'); ?></a>            </div>            <div class="tabInnerContent clearfloat">            </div>            <div id="advisorInstructionsDialog" style="display:none;">            <?php            echo '<p>';            echo __('The Advisor system can provide recommendations on server variables by analyzing the server status variables.');            echo '</p> <p>';            echo __('Do note however that this system provides recommendations based on simple calculations and by rule of thumb which may not necessarily apply to your system.');            echo '</p> <p>';            echo __('Prior to changing any of the configuration, be sure to know what you are changing (by reading the documentation) and how to undo the change. Wrong tuning can have a very negative effect on performance.');            echo '</p> <p>';            echo __('The best way to tune your system would be to change only one setting at a time, observe or benchmark your database, and undo the change if there was no clearly measurable improvement.');            echo '</p>';            ?>            </div>        </div>    </div></div><?phpfunction printQueryStatistics(){    global $server_status, $used_queries, $url_query, $PMA_PHP_SELF;    $hour_factor   = 3600 / $server_status['Uptime'];    $total_queries = array_sum($used_queries);    ?>    <h3 id="serverstatusqueries">        <?php        /* l10n: Questions is the name of a MySQL Status variable */        echo sprintf(__('Questions since startup: %s'), PMA_formatNumber($total_queries, 0)) . ' ';        echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_Questions');        ?>        <br />        <span>        <?php        echo '&oslash; ' . __('per hour') . ': ';        echo PMA_formatNumber($total_queries * $hour_factor, 0);        echo '<br />';        echo '&oslash; ' . __('per minute') . ': ';        echo PMA_formatNumber($total_queries * 60 / $server_status['Uptime'], 0);        echo '<br />';        if ($total_queries / $server_status['Uptime'] >= 1) {            echo '&oslash; ' . __('per second') . ': ';            echo PMA_formatNumber($total_queries / $server_status['Uptime'], 0);        }        ?>        </span>    </h3>    <?php    // reverse sort by value to show most used statements first    arsort($used_queries);    $odd_row        = true;    $count_displayed_rows = 0;    $perc_factor    = 100 / $total_queries; //(- $server_status['Connections']);    ?>        <table id="serverstatusqueriesdetails" class="data sortable noclick">        <col class="namecol" />        <col class="valuecol" span="3" />        <thead>            <tr><th><?php echo __('Statements'); ?></th>                <th><?php                    /* l10n: # = Amount of queries */                    echo __('#');                    ?>                </th>                <th>&oslash; <?php echo __('per hour'); ?></th>                <th>%</th>            </tr>        </thead>        <tbody>    <?php    $chart_json = array();    $query_sum = array_sum($used_queries);    $other_sum = 0;    foreach ($used_queries as $name => $value) {        $odd_row = !$odd_row;        // For the percentage column, use Questions - Connections, because        // the number of connections is not an item of the Query types        // but is included in Questions. Then the total of the percentages is 100.        $name = str_replace(array('Com_', '_'), array('', ' '), $name);        // Group together values that make out less than 2% into "Other", but only if we have more than 6 fractions already        if ($value < $query_sum * 0.02 && count($chart_json)>6) {            $other_sum += $value;        } else {            $chart_json[$name] = $value;        }    ?>            <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">                <th class="name"><?php echo htmlspecialchars($name); ?></th>                <td class="value"><?php echo htmlspecialchars(PMA_formatNumber($value, 5, 0, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $hour_factor, 4, 1, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $perc_factor, 0, 2)); ?>%</td>            </tr>    <?php    }    ?>        </tbody>        </table>        <div id="serverstatusquerieschart">            <span style="display:none;">        <?php            if ($other_sum > 0) {                $chart_json[__('Other')] = $other_sum;            }            echo json_encode($chart_json);        ?>            </span>        </div>        <?php}function printServerTraffic(){    global $server_status, $PMA_PHP_SELF;    global $server_master_status, $server_slave_status, $replication_types;    $hour_factor    = 3600 / $server_status['Uptime'];    /**     * starttime calculation     */    $start_time = PMA_DBI_fetch_value(        'SELECT UNIX_TIMESTAMP() - ' . $server_status['Uptime']    );    ?>    <h3><?php    echo sprintf(        __('Network traffic since startup: %s'),        implode(' ', PMA_formatByteDown($server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1))    );    ?>    </h3>    <p>    <?php    echo sprintf(        __('This MySQL server has been running for %1$s. It started up on %2$s.'),        PMA_timespanFormat($server_status['Uptime']),        PMA_localisedDate($start_time)    ) . "\n";    ?>    </p>    <?php    if ($server_master_status || $server_slave_status) {        echo '<p class="notice">';        if ($server_master_status && $server_slave_status) {            echo __('This MySQL server works as <b>master</b> and <b>slave</b> in <b>replication</b> process.');        } elseif ($server_master_status) {            echo __('This MySQL server works as <b>master</b> in <b>replication</b> process.');        } elseif ($server_slave_status) {            echo __('This MySQL server works as <b>slave</b> in <b>replication</b> process.');        }        echo ' ';        echo __('For further information about replication status on the server, please visit the <a href="#replication">replication section</a>.');        echo '</p>';    }    /* if the server works as master or slave in replication process, display useful information */    if ($server_master_status || $server_slave_status) {    ?>      <hr class="clearfloat" />      <h3><a name="replication"></a><?php echo __('Replication status'); ?></h3>    <?php        foreach ($replication_types as $type) {            if (${"server_{$type}_status"}) {                PMA_replication_print_status_table($type);            }        }        unset($types);    }    ?>    <table id="serverstatustraffic" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Traffic') . '&nbsp;' . PMA_showHint(__('On a busy server, the byte counters may overrun, so those statistics as reported by the MySQL server may be incorrect.')); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('Received'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_received'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Sent'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_sent'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_sent'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1)            ); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    ($server_status['Bytes_received'] + $server_status['Bytes_sent'])                    * $hour_factor, 3, 1)            ); ?></td>    </tr>    </tbody>    </table>    <table id="serverstatusconnections" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Connections'); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>        <th>%</th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('max. concurrent connections'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Max_used_connections'], 0); ?>  </td>        <td class="value">--- </td>        <td class="value">--- </td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Failed attempts'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_connects'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Aborted'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_clients'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'], 4, 0); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'] * $hour_factor,                4, 2); ?></td>        <td class="value"><?php echo            PMA_formatNumber(100, 0, 2); ?>%</td>    </tr>    </tbody>    </table>    <?php    $url_params = array();    $show_full_sql = !empty($_REQUEST['full']);    if ($show_full_sql) {        $url_params['full'] = 1;        $full_text_link = 'server_status.php' . PMA_generate_common_url(array(), 'html', '?');    } else {        $full_text_link = 'server_status.php' . PMA_generate_common_url(array('full' => 1));    }    if (PMA_DRIZZLE) {        $sql_query = "SELECT                p.id       AS Id,                p.username AS User,                p.host     AS Host,                p.db       AS db,                p.command  AS Command,                p.time     AS Time,                p.state    AS State,                " . ($show_full_sql ? 's.query' : 'left(p.info, ' . (int)$GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] . ')') . " AS Info            FROM data_dictionary.PROCESSLIST p                " . ($show_full_sql ? 'LEFT JOIN data_dictionary.SESSIONS s ON s.session_id = p.id' : '');    } else {        $sql_query = $show_full_sql            ? 'SHOW FULL PROCESSLIST'            : 'SHOW PROCESSLIST';    }    $result = PMA_DBI_query($sql_query);    /**     * Displays the page     */    ?>    <table id="tableprocesslist" class="data clearfloat noclick">    <thead>    <tr>        <th><?php echo __('Processes'); ?></th>        <th><?php echo __('ID'); ?></th>        <th><?php echo __('User'); ?></th>        <th><?php echo __('Host'); ?></th>        <th><?php echo __('Database'); ?></th>        <th><?php echo __('Command'); ?></th>        <th><?php echo __('Time'); ?></th>        <th><?php echo __('Status'); ?></th>        <th><?php            echo __('SQL query');            if (! PMA_DRIZZLE) {                ?>            <a href="<?php echo $full_text_link; ?>"                title="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>">                <img src="<?php echo $GLOBALS['pmaThemeImage'] . 's_' . ($show_full_sql ? 'partial' : 'full'); ?>text.png"                alt="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>" />            </a>            <?php } ?>        </th>    </tr>    </thead>    <tbody>    <?php    $odd_row = true;    while ($process = PMA_DBI_fetch_assoc($result)) {        $url_params['kill'] = $process['Id'];        $kill_process = 'server_status.php' . PMA_generate_common_url($url_params);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><a href="<?php echo $kill_process ; ?>"><?php echo __('Kill'); ?></a></td>        <td class="value"><?php echo $process['Id']; ?></td>        <td><?php echo $process['User']; ?></td>        <td><?php echo $process['Host']; ?></td>        <td><?php echo ((! isset($process['db']) || ! strlen($process['db'])) ? '<i>' . __('None') . '</i>' : $process['db']); ?></td>        <td><?php echo $process['Command']; ?></td>        <td class="value"><?php echo $process['Time']; ?></td>        <td><?php echo (empty($process['State']) ? '---' : $process['State']); ?></td>        <td>        <?php        if (empty($process['Info'])) {            echo '---';        } else {            if (!$show_full_sql && strlen($process['Info']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                echo htmlspecialchars(substr($process['Info'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';            } else {                echo PMA_SQP_formatHtml(PMA_SQP_parse($process['Info']));            }        }        ?>        </td>    </tr>        <?php        $odd_row = ! $odd_row;    }    ?>    </tbody>    </table>    <?php}function printVariablesTable(){    global $server_status, $server_variables, $allocationMap, $links;    /**     * Messages are built using the message name     */    $strShowStatus = array(        'Aborted_clients' => __('The number of connections that were aborted because the client died without closing the connection properly.'),        'Aborted_connects' => __('The number of failed attempts to connect to the MySQL server.'),        'Binlog_cache_disk_use' => __('The number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size and used a temporary file to store statements from the transaction.'),        'Binlog_cache_use' => __('The number of transactions that used the temporary binary log cache.'),        'Connections' => __('The number of connection attempts (successful or not) to the MySQL server.'),        'Created_tmp_disk_tables' => __('The number of temporary tables on disk created automatically by the server while executing statements. If Created_tmp_disk_tables is big, you may want to increase the tmp_table_size  value to cause temporary tables to be memory-based instead of disk-based.'),        'Created_tmp_files' => __('How many temporary files mysqld has created.'),        'Created_tmp_tables' => __('The number of in-memory temporary tables created automatically by the server while executing statements.'),        'Delayed_errors' => __('The number of rows written with INSERT DELAYED for which some error occurred (probably duplicate key).'),        'Delayed_insert_threads' => __('The number of INSERT DELAYED handler threads in use. Every different table on which one uses INSERT DELAYED gets its own thread.'),        'Delayed_writes' => __('The number of INSERT DELAYED rows written.'),        'Flush_commands'  => __('The number of executed FLUSH statements.'),        'Handler_commit' => __('The number of internal COMMIT statements.'),        'Handler_delete' => __('The number of times a row was deleted from a table.'),        'Handler_discover' => __('The MySQL server can ask the NDB Cluster storage engine if it knows about a table with a given name. This is called discovery. Handler_discover indicates the number of time tables have been discovered.'),        'Handler_read_first' => __('The number of times the first entry was read from an index. If this is high, it suggests that the server is doing a lot of full index scans; for example, SELECT col1 FROM foo, assuming that col1 is indexed.'),        'Handler_read_key' => __('The number of requests to read a row based on a key. If this is high, it is a good indication that your queries and tables are properly indexed.'),        'Handler_read_next' => __('The number of requests to read the next row in key order. This is incremented if you are querying an index column with a range constraint or if you are doing an index scan.'),        'Handler_read_prev' => __('The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ... DESC.'),        'Handler_read_rnd' => __('The number of requests to read a row based on a fixed position. This is high if you are doing a lot of queries that require sorting of the result. You probably have a lot of queries that require MySQL to scan whole tables or you have joins that don\'t use keys properly.'),        'Handler_read_rnd_next' => __('The number of requests to read the next row in the data file. This is high if you are doing a lot of table scans. Generally this suggests that your tables are not properly indexed or that your queries are not written to take advantage of the indexes you have.'),        'Handler_rollback' => __('The number of internal ROLLBACK statements.'),        'Handler_update' => __('The number of requests to update a row in a table.'),        'Handler_write' => __('The number of requests to insert a row in a table.'),        'Innodb_buffer_pool_pages_data' => __('The number of pages containing data (dirty or clean).'),        'Innodb_buffer_pool_pages_dirty' => __('The number of pages currently dirty.'),        'Innodb_buffer_pool_pages_flushed' => __('The number of buffer pool pages that have been requested to be flushed.'),        'Innodb_buffer_pool_pages_free' => __('The number of free pages.'),        'Innodb_buffer_pool_pages_latched' => __('The number of latched pages in InnoDB buffer pool. These are pages currently being read or written or that can\'t be flushed or removed for some other reason.'),        'Innodb_buffer_pool_pages_misc' => __('The number of pages busy because they have been allocated for administrative overhead such as row locks or the adaptive hash index. This value can also be calculated as Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data.'),        'Innodb_buffer_pool_pages_total' => __('Total size of buffer pool, in pages.'),        'Innodb_buffer_pool_read_ahead_rnd' => __('The number of "random" read-aheads InnoDB initiated. This happens when a query is to scan a large portion of a table but in random order.'),        'Innodb_buffer_pool_read_ahead_seq' => __('The number of sequential read-aheads InnoDB initiated. This happens when InnoDB does a sequential full table scan.'),        'Innodb_buffer_pool_read_requests' => __('The number of logical read requests InnoDB has done.'),        'Innodb_buffer_pool_reads' => __('The number of logical reads that InnoDB could not satisfy from buffer pool and had to do a single-page read.'),        'Innodb_buffer_pool_wait_free' => __('Normally, writes to the InnoDB buffer pool happen in the background. However, if it\'s necessary to read or create a page and no clean pages are available, it\'s necessary to wait for pages to be flushed first. This counter counts instances of these waits. If the buffer pool size was set properly, this value should be small.'),        'Innodb_buffer_pool_write_requests' => __('The number writes done to the InnoDB buffer pool.'),        'Innodb_data_fsyncs' => __('The number of fsync() operations so far.'),        'Innodb_data_pending_fsyncs' => __('The current number of pending fsync() operations.'),        'Innodb_data_pending_reads' => __('The current number of pending reads.'),        'Innodb_data_pending_writes' => __('The current number of pending writes.'),        'Innodb_data_read' => __('The amount of data read so far, in bytes.'),        'Innodb_data_reads' => __('The total number of data reads.'),        'Innodb_data_writes' => __('The total number of data writes.'),        'Innodb_data_written' => __('The amount of data written so far, in bytes.'),        'Innodb_dblwr_pages_written' => __('The number of pages that have been written for doublewrite operations.'),        'Innodb_dblwr_writes' => __('The number of doublewrite operations that have been performed.'),        'Innodb_log_waits' => __('The number of waits we had because log buffer was too small and we had to wait for it to be flushed before continuing.'),        'Innodb_log_write_requests' => __('The number of log write requests.'),        'Innodb_log_writes' => __('The number of physical writes to the log file.'),        'Innodb_os_log_fsyncs' => __('The number of fsync() writes done to the log file.'),        'Innodb_os_log_pending_fsyncs' => __('The number of pending log file fsyncs.'),        'Innodb_os_log_pending_writes' => __('Pending log file writes.'),        'Innodb_os_log_written' => __('The number of bytes written to the log file.'),        'Innodb_pages_created' => __('The number of pages created.'),        'Innodb_page_size' => __('The compiled-in InnoDB page size (default 16KB). Many values are counted in pages; the page size allows them to be easily converted to bytes.'),        'Innodb_pages_read' => __('The number of pages read.'),        'Innodb_pages_written' => __('The number of pages written.'),        'Innodb_row_lock_current_waits' => __('The number of row locks currently being waited for.'),        'Innodb_row_lock_time_avg' => __('The average time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_time' => __('The total time spent in acquiring row locks, in milliseconds.'),        'Innodb_row_lock_time_max' => __('The maximum time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_waits' => __('The number of times a row lock had to be waited for.'),        'Innodb_rows_deleted' => __('The number of rows deleted from InnoDB tables.'),        'Innodb_rows_inserted' => __('The number of rows inserted in InnoDB tables.'),        'Innodb_rows_read' => __('The number of rows read from InnoDB tables.'),        'Innodb_rows_updated' => __('The number of rows updated in InnoDB tables.'),        'Key_blocks_not_flushed' => __('The number of key blocks in the key cache that have changed but haven\'t yet been flushed to disk. It used to be known as Not_flushed_key_blocks.'),        'Key_blocks_unused' => __('The number of unused blocks in the key cache. You can use this value to determine how much of the key cache is in use.'),        'Key_blocks_used' => __('The number of used blocks in the key cache. This value is a high-water mark that indicates the maximum number of blocks that have ever been in use at one time.'),        'Key_read_requests' => __('The number of requests to read a key block from the cache.'),        'Key_reads' => __('The number of physical reads of a key block from disk. If Key_reads is big, then your key_buffer_size value is probably too small. The cache miss rate can be calculated as Key_reads/Key_read_requests.'),        'Key_write_requests' => __('The number of requests to write a key block to the cache.'),        'Key_writes' => __('The number of physical writes of a key block to disk.'),        'Last_query_cost' => __('The total cost of the last compiled query as computed by the query optimizer. Useful for comparing the cost of different query plans for the same query. The default value of 0 means that no query has been compiled yet.'),        'Max_used_connections' => __('The maximum number of connections that have been in use simultaneously since the server started.'),        'Not_flushed_delayed_rows' => __('The number of rows waiting to be written in INSERT DELAYED queues.'),        'Opened_tables' => __('The number of tables that have been opened. If opened tables is big, your table cache value is probably too small.'),        'Open_files' => __('The number of files that are open.'),        'Open_streams' => __('The number of streams that are open (used mainly for logging).'),        'Open_tables' => __('The number of tables that are open.'),        'Qcache_free_blocks' => __('The number of free memory blocks in query cache. High numbers can indicate fragmentation issues, which may be solved by issuing a FLUSH QUERY CACHE statement.'),        'Qcache_free_memory' => __('The amount of free memory for query cache.'),        'Qcache_hits' => __('The number of cache hits.'),        'Qcache_inserts' => __('The number of queries added to the cache.'),        'Qcache_lowmem_prunes' => __('The number of queries that have been removed from the cache to free up memory for caching new queries. This information can help you tune the query cache size. The query cache uses a least recently used (LRU) strategy to decide which queries to remove from the cache.'),        'Qcache_not_cached' => __('The number of non-cached queries (not cachable, or not cached due to the query_cache_type setting).'),        'Qcache_queries_in_cache' => __('The number of queries registered in the cache.'),        'Qcache_total_blocks' => __('The total number of blocks in the query cache.'),        'Rpl_status' => __('The status of failsafe replication (not yet implemented).'),        'Select_full_join' => __('The number of joins that do not use indexes. If this value is not 0, you should carefully check the indexes of your tables.'),        'Select_full_range_join' => __('The number of joins that used a range search on a reference table.'),        'Select_range_check' => __('The number of joins without keys that check for key usage after each row. (If this is not 0, you should carefully check the indexes of your tables.)'),        'Select_range' => __('The number of joins that used ranges on the first table. (It\'s normally not critical even if this is big.)'),        'Select_scan' => __('The number of joins that did a full scan of the first table.'),        'Slave_open_temp_tables' => __('The number of temporary tables currently open by the slave SQL thread.'),        'Slave_retried_transactions' => __('Total (since startup) number of times the replication slave SQL thread has retried transactions.'),        'Slave_running' => __('This is ON if this server is a slave that is connected to a master.'),        'Slow_launch_threads' => __('The number of threads that have taken more than slow_launch_time seconds to create.'),        'Slow_queries' => __('The number of queries that have taken more than long_query_time seconds.'),        'Sort_merge_passes' => __('The number of merge passes the sort algorithm has had to do. If this value is large, you should consider increasing the value of the sort_buffer_size system variable.'),        'Sort_range' => __('The number of sorts that were done with ranges.'),        'Sort_rows' => __('The number of sorted rows.'),        'Sort_scan' => __('The number of sorts that were done by scanning the table.'),        'Table_locks_immediate' => __('The number of times that a table lock was acquired immediately.'),        'Table_locks_waited' => __('The number of times that a table lock could not be acquired immediately and a wait was needed. If this is high, and you have performance problems, you should first optimize your queries, and then either split your table or tables or use replication.'),        'Threads_cached' => __('The number of threads in the thread cache. The cache hit rate can be calculated as Threads_created/Connections. If this value is red you should raise your thread_cache_size.'),        'Threads_connected' => __('The number of currently open connections.'),        'Threads_created' => __('The number of threads created to handle connections. If Threads_created is big, you may want to increase the thread_cache_size value. (Normally this doesn\'t give a notable performance improvement if you have a good thread implementation.)'),        'Threads_running' => __('The number of threads that are not sleeping.')    );    /**     * define some alerts     */    // name => max value before alert    $alerts = array(        // lower is better        // variable => max value        'Aborted_clients' => 0,        'Aborted_connects' => 0,        'Binlog_cache_disk_use' => 0,        'Created_tmp_disk_tables' => 0,        'Handler_read_rnd' => 0,        'Handler_read_rnd_next' => 0,        'Innodb_buffer_pool_pages_dirty' => 0,        'Innodb_buffer_pool_reads' => 0,        'Innodb_buffer_pool_wait_free' => 0,        'Innodb_log_waits' => 0,        'Innodb_row_lock_time_avg' => 10, // ms        'Innodb_row_lock_time_max' => 50, // ms        'Innodb_row_lock_waits' => 0,        'Slow_queries' => 0,        'Delayed_errors' => 0,        'Select_full_join' => 0,        'Select_range_check' => 0,        'Sort_merge_passes' => 0,        'Opened_tables' => 0,        'Table_locks_waited' => 0,        'Qcache_lowmem_prunes' => 0,        'Qcache_free_blocks' => isset($server_status['Qcache_total_blocks']) ? $server_status['Qcache_total_blocks'] / 5 : 0,        'Slow_launch_threads' => 0,        // depends on Key_read_requests        // normaly lower then 1:0.01        'Key_reads' => isset($server_status['Key_read_requests']) ? (0.01 * $server_status['Key_read_requests']) : 0,        // depends on Key_write_requests        // normaly nearly 1:1        'Key_writes' => isset($server_status['Key_write_requests']) ? (0.9 * $server_status['Key_write_requests']) : 0,        'Key_buffer_fraction' => 0.5,        // alert if more than 95% of thread cache is in use        'Threads_cached' => isset($server_variables['thread_cache_size']) ? 0.95 * $server_variables['thread_cache_size'] : 0        // higher is better        // variable => min value        //'Handler read key' => '> ',    );?><table class="data sortable noclick" id="serverstatusvariables">    <col class="namecol" />    <col class="valuecol" />    <col class="descrcol" />    <thead>        <tr>            <th><?php echo __('Variable'); ?></th>            <th><?php echo __('Value'); ?></th>            <th><?php echo __('Description'); ?></th>        </tr>    </thead>    <tbody>    <?php    $odd_row = false;    foreach ($server_status as $name => $value) {            $odd_row = !$odd_row;?>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; echo isset($allocationMap[$name])?' s_' . $allocationMap[$name]:''; ?>">            <th class="name"><?php            echo htmlspecialchars(str_replace('_', ' ', $name));            /* Fields containing % are calculated, they can not be described in MySQL documentation */            if (strpos($name, '%') === FALSE) {                 echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_' . $name);            }            ?>            </th>            <td class="value"><span class="formatted"><?php            if (isset($alerts[$name])) {                if ($value > $alerts[$name]) {                    echo '<span class="attention">';                } else {                    echo '<span class="allfine">';                }            }            if ('%' === substr($name, -1, 1)) {                echo htmlspecialchars(PMA_formatNumber($value, 0, 2)) . ' %';            } elseif (strpos($name, 'Uptime') !== false) {                echo htmlspecialchars(PMA_timespanFormat($value));            } elseif (is_numeric($value) && $value == (int) $value && $value > 1000) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } elseif (is_numeric($value) && $value == (int) $value) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 0));            } elseif (is_numeric($value)) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } else {                echo htmlspecialchars($value);            }            if (isset($alerts[$name])) {                echo '</span>';            }            ?></span><span style="display:none;" class="original"><?php echo $value; ?></span>            </td>            <td class="descr">            <?php            if (isset($strShowStatus[$name ])) {                echo $strShowStatus[$name];            }            if (isset($links[$name])) {                foreach ($links[$name] as $link_name => $link_url) {                    if ('doc' == $link_name) {                        echo PMA_showMySQLDocu($link_url, $link_url);                    } else {                        echo ' <a href="' . $link_url . '">' . $link_name . '</a>' .                        "\n";                    }                }                unset($link_url, $link_name);            }            ?>            </td>        </tr>    <?php    }    ?>    </tbody>    </table>    <?php}function printMonitor(){    global $server_status, $server_db_isLocal;?>    <div class="tabLinks" style="display:none;">        <a href="#pauseCharts">            <?php echo PMA_getImage('play.png'); ?>            <?php echo __('Start Monitor'); ?>        </a>        <a href="#settingsPopup" rel="popupLink" style="display:none;">            <?php echo PMA_getImage('s_cog.png'); ?>            <?php echo __('Settings'); ?>        </a>        <?php if (!PMA_DRIZZLE) { ?>        <a href="#monitorInstructionsDialog">            <?php echo PMA_getImage('b_help.png'); ?>            <?php echo __('Instructions/Setup'); ?>        </a>        <?php } ?>        <a href="#endChartEditMode" style="display:none;">            <?php echo PMA_getImage('s_okay.png'); ?>            <?php echo __('Done rearranging/editing charts'); ?>        </a>    </div>    <div class="popupContent settingsPopup">        <a href="#addNewChart">            <?php echo PMA_getImage('b_chart.png'); ?>            <?php echo __('Add chart'); ?>        </a>        <a href="#rearrangeCharts"><?php echo PMA_getImage('b_tblops.png'); ?><?php echo __('Rearrange/edit charts'); ?></a>        <div class="clearfloat paddingtop"></div>        <div class="floatleft">            <?php            echo __('Refresh rate') . '<br />';            refreshList('gridChartRefresh', 5, Array(2, 3, 4, 5, 10, 20, 40, 60, 120, 300, 600, 1200));        ?><br />        </div>        <div class="floatleft">            <?php echo __('Chart columns'); ?> <br />            <select name="chartColumns">                <option>1</option>                <option>2</option>                <option>3</option>                <option>4</option>                <option>5</option>                <option>6</option>                <option>7</option>                <option>8</option>                <option>9</option>                <option>10</option>            </select>        </div>        <div class="clearfloat paddingtop">        <b><?php echo __('Chart arrangement'); ?></b> <?php echo PMA_showHint(__('The arrangement of the charts is stored to the browsers local storage. You may want to export it if you have a complicated set up.')); ?><br/>        <a href="#importMonitorConfig"><?php echo __('Import'); ?></a>&nbsp;&nbsp;<a href="#exportMonitorConfig"><?php echo __('Export'); ?></a>&nbsp;&nbsp;<a href="#clearMonitorConfig"><?php echo __('Reset to default'); ?></a>        </div>    </div>    <div id="monitorInstructionsDialog" title="<?php echo __('Monitor Instructions'); ?>" style="display:none;">        <?php echo __('The phpMyAdmin Monitor can assist you in optimizing the server configuration and track down time intensive queries. For the latter you will need to set log_output to \'TABLE\' and have either the slow_query_log or general_log enabled. Note however, that the general_log produces a lot of data and increases server load by up to 15%'); ?>    <?php if (PMA_MYSQL_INT_VERSION < 50106) { ?>        <p>        <?php echo PMA_getImage('s_attention.png'); ?>        <?php            echo __('Unfortunately your Database server does not support logging to table, which is a requirement for analyzing the database logs with phpMyAdmin. Logging to table is supported by MySQL 5.1.6 and onwards. You may still use the server charting features however.');        ?>        </p>    <?php    } else {    ?>        <p></p>        <img class="ajaxIcon" src="<?php echo $GLOBALS['pmaThemeImage']; ?>ajax_clock_small.gif" alt="Loading" />        <div class="ajaxContent"></div>        <div class="monitorUse" style="display:none;">            <p></p>            <?php                echo '<strong>';                echo __('Using the monitor:');                echo '</strong><p>';                echo __('Your browser will refresh all displayed charts in a regular interval. You may add charts and change the refresh rate under \'Settings\', or remove any chart using the cog icon on each respective chart.');                echo '</p><p>';                echo __('To display queries from the logs, select the relevant time span on any chart by holding down the left mouse button and panning over the chart. Once confirmed, this will load a table of grouped queries, there you may click on any occuring SELECT statements to further analyze them.');                echo '</p>';            ?>            <p>            <?php echo PMA_getImage('s_attention.png'); ?>            <?php                echo '<strong>';                echo __('Please note:');                echo '</strong><br />';                echo __('Enabling the general_log may increase the server load by 5-15%. Also be aware that generating statistics from the logs is a load intensive task, so it is advisable to select only a small time span and to disable the general_log and empty its table once monitoring is not required any more.');            ?>            </p>        </div>    <?php } ?>    </div>    <div id="addChartDialog" title="<?php echo __('Add chart'); ?>" style="display:none;">        <div id="tabGridVariables">            <p><input type="text" name="chartTitle" value="<?php echo __('Chart Title'); ?>" /></p>            <input type="radio" name="chartType" value="preset" id="chartPreset" />            <label for="chartPreset"><?php echo __('Preset chart'); ?></label>            <select name="presetCharts"></select><br/>            <input type="radio" name="chartType" value="variable" id="chartStatusVar" checked="checked" />            <label for="chartStatusVar"><?php echo __('Status variable(s)'); ?></label><br/>            <div id="chartVariableSettings">                <label for="chartSeries"><?php echo __('Select series:'); ?></label><br />                <select id="chartSeries" name="varChartList" size="1">                    <option><?php echo __('Commonly monitored'); ?></option>                    <option>Processes</option>                    <option>Questions</option>                    <option>Connections</option>                    <option>Bytes_sent</option>                    <option>Bytes_received</option>                    <option>Threads_connected</option>                    <option>Created_tmp_disk_tables</option>                    <option>Handler_read_first</option>                    <option>Innodb_buffer_pool_wait_free</option>                    <option>Key_reads</option>                    <option>Open_tables</option>                    <option>Select_full_join</option>                    <option>Slow_queries</option>                </select><br />                <label for="variableInput"><?php echo __('or type variable name:'); ?> </label>                <input type="text" name="variableInput" id="variableInput" />                <p></p>                <input type="checkbox" name="differentialValue" id="differentialValue" value="differential" checked="checked" />                <label for="differentialValue"><?php echo __('Display as differential value'); ?></label><br />                <input type="checkbox" id="useDivisor" name="useDivisor" value="1" />                <label for="useDivisor"><?php echo __('Apply a divisor'); ?></label>                <span class="divisorInput" style="display:none;">                    <input type="text" name="valueDivisor" size="4" value="1" />                    (<a href="#kibDivisor"><?php echo __('KiB'); ?></a>, <a href="#mibDivisor"><?php echo __('MiB'); ?></a>)                </span><br />                <input type="checkbox" id="useUnit" name="useUnit" value="1" />                <label for="useUnit"><?php echo __('Append unit to data values'); ?></label>                <span class="unitInput" style="display:none;">                    <input type="text" name="valueUnit" size="4" value="" />                </span>                <p>                    <a href="#submitAddSeries"><b><?php echo __('Add this series'); ?></b></a>                    <span id="clearSeriesLink" style="display:none;">                       | <a href="#submitClearSeries"><?php echo __('Clear series'); ?></a>                    </span>                </p>                <?php echo __('Series in Chart:'); ?><br/>                <span id="seriesPreview">                <i><?php echo __('None'); ?></i>                </span>            </div>        </div>    </div>    <!-- For generic use -->    <div id="emptyDialog" title="Dialog" style="display:none;">    </div>    <?php if (!PMA_DRIZZLE) { ?>    <div id="logAnalyseDialog" title="<?php echo __('Log statistics'); ?>" style="display:none;">        <p> <?php echo __('Selected time range:'); ?>        <input type="text" name="dateStart" class="datetimefield" value="" /> -        <input type="text" name="dateEnd" class="datetimefield" value="" /></p>        <input type="checkbox" id="limitTypes" value="1" checked="checked" />        <label for="limitTypes">            <?php echo __('Only retrieve SELECT,INSERT,UPDATE and DELETE Statements'); ?>        </label>        <br/>        <input type="checkbox" id="removeVariables" value="1" checked="checked" />        <label for="removeVariables">            <?php echo __('Remove variable data in INSERT statements for better grouping'); ?>        </label>        <?php        echo '<p>';        echo __('Choose from which log you want the statistics to be generated from.');        echo '</p><p>';        echo __('Results are grouped by query text.');        echo '</p>';        ?>    </div>    <div id="queryAnalyzerDialog" title="<?php echo __('Query analyzer'); ?>" style="display:none;">        <textarea id="sqlquery"> </textarea>        <p></p>        <div class="placeHolder"></div>    </div>    <?php } ?>    <table border="0" class="clearfloat" id="chartGrid">    </table>    <div id="logTable">        <br/>    </div>    <script type="text/javascript">        variableNames = [ <?php            $i=0;            foreach ($server_status as $name=>$value) {                if (is_numeric($value)) {                    if ($i++ > 0) {                        echo ", ";                    }                    echo "'" . $name . "'";                }            }            ?> ];    </script><?php}/* Builds a <select> list for refresh rates */function refreshList($name, $defaultRate=5, $refreshRates=Array(1, 2, 5, 10, 20, 40, 60, 120, 300, 600)){?>    <select name="<?php echo $name; ?>" id="id_<?php echo $name; ?>">        <?php            foreach ($refreshRates as $rate) {                $selected = ($rate == $defaultRate)?' selected="selected"':'';                if ($rate<60) {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d second', '%d seconds', $rate), $rate) . '</option>';                } else {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d minute', '%d minutes', $rate/60), $rate/60) . '</option>';                }            }        ?>    </select><?php}/** * cleanup of some deprecated values * * @param array &$server_status */function cleanDeprecated(&$server_status){    $deprecated = array(        'Com_prepare_sql' => 'Com_stmt_prepare',        'Com_execute_sql' => 'Com_stmt_execute',        'Com_dealloc_sql' => 'Com_stmt_close',    );    foreach ($deprecated as $old => $new) {        if (isset($server_status[$old]) && isset($server_status[$new])) {            unset($server_status[$old]);        }    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/db_common.inc.php';require_once './libraries/sql_query_form.lib.php';// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'db_sql.php';$back = 'db_sql.php';/** * Gets informations about the database and, if it is empty, move to the * "db_structure.php" script where table can be created */require './libraries/db_info.inc.php';if ($num_tables == 0 && empty($db_query_force)) {    $sub_part   = '';    $is_info    = true;    include './db_structure.php';    exit();}/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';// Handles some variables that may have been sent by the calling script$GLOBALS['db'] = '';$GLOBALS['table'] = '';$show_query = '1';require_once './libraries/header.inc.php';// Any message to display?if (! empty($message)) {    PMA_showMessage($message);    unset($message);}$common_url_query =  PMA_generate_common_url('', '');// when $server > 0, a server has been chosen so we can display// all MySQL-related informationif ($server > 0) {    include './libraries/server_common.inc.php';    include './libraries/StorageEngine.class.php';    include './libraries/server_links.inc.php';    // Use the verbose name of the server instead of the hostname    // if a value is set    $server_info = '';    if (! empty($cfg['Server']['verbose'])) {        $server_info .= htmlspecialchars($cfg['Server']['verbose']);        if ($GLOBALS['cfg']['ShowServerInfo']) {            $server_info .= ' (';        }    }    if ($GLOBALS['cfg']['ShowServerInfo'] || empty($cfg['Server']['verbose'])) {        $server_info .= PMA_DBI_get_host_info();    }    if (! empty($cfg['Server']['verbose']) && $GLOBALS['cfg']['ShowServerInfo']) {    $server_info .= ')';    }    $mysql_cur_user_and_host = PMA_DBI_fetch_value('SELECT USER();');    // should we add the port info here?    $short_server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                ? $GLOBALS['cfg']['Server']['verbose']                : $GLOBALS['cfg']['Server']['host']);}echo '<div id="maincontainer">' . "\n";echo '<div id="main_pane_left">';if ($server > 0 || (! $cfg['LeftDisplayServers'] && count($cfg['Servers']) > 1)) {    echo '<div class="group">';    echo '<h2>' . __('General Settings') . '</h2>';    echo '<ul>';    /**     * Displays the MySQL servers choice form     */    if (! $cfg['LeftDisplayServers']     && (count($cfg['Servers']) > 1 || $server == 0 && count($cfg['Servers']) == 1)) {        echo '<li id="li_select_server">';        include_once './libraries/select_server.lib.php';        PMA_select_server(true, true);        echo '</li>';    }    /**     * Displays the mysql server related links     */    if ($server > 0 && !PMA_DRIZZLE) {        include_once './libraries/check_user_privileges.lib.php';        // Logout for advanced authentication        if ($cfg['Server']['auth_type'] != 'config') {            if ($cfg['ShowChgPassword']) {                if ($GLOBALS['cfg']['AjaxEnable']) {                    $conditional_class = 'ajax';                } else {                    $conditional_class = null;                }                PMA_printListItem(                    __('Change password'),                    'li_change_password',                    './user_password.php?' . $common_url_query,                    null,                    null,                    'change_password_anchor',                    null,                    $conditional_class                );            }        } // end if        echo '    <li id="li_select_mysql_collation">';        echo '        <form method="post" action="index.php" target="_parent">' . "\n"           . PMA_generate_common_hidden_inputs(null, null, 4, 'collation_connection')           . '            <label for="select_collation_connection">' . "\n"           . '                ' . __('Server connection collation') . "\n"           // put the doc link in the form so that it appears on the same line           . PMA_showMySQLDocu('MySQL_Database_Administration', 'Charset-connection') . ': ' .  "\n"           . '            </label>' . "\n"           . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'collation_connection', 'select_collation_connection', $collation_connection, true, 4, true)           . '            <noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n"           . '        </form>' . "\n"           . '    </li>' . "\n";    } // end of if ($server > 0 && !PMA_DRIZZLE)    echo '</ul>';    echo '</div>';}echo '<div class="group">';echo '<h2>' . __('Appearance Settings') . '</h2>';echo '  <ul>';// Displays language selection comboif (empty($cfg['Lang'])) {    echo '<li id="li_select_lang">';    include_once './libraries/display_select_lang.lib.php';    PMA_select_language();    echo '</li>';}// ThemeManager if availableif ($GLOBALS['cfg']['ThemeManager']) {    echo '<li id="li_select_theme">';    echo $_SESSION['PMA_Theme_Manager']->getHtmlSelectBox();    echo '</li>';}echo '<li id="li_select_fontsize">';echo PMA_Config::getFontsizeForm();echo '</li>';echo '</ul>';// User preferencesif ($server > 0) {    echo '<ul>';    echo PMA_printListItem(        __('More settings'),        'li_user_preferences',        './prefs_manage.php?' . $common_url_query    );    echo '</ul>';}echo '</div>';echo '</div>';echo '<div id="main_pane_right">';if ($server > 0 && $GLOBALS['cfg']['ShowServerInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Database server') . '</h2>';    echo '<ul>' . "\n";    PMA_printListItem(__('Server') . ': ' . $server_info, 'li_server_info');    PMA_printListItem(__('Software') . ': ' . PMA_getServerType(), 'li_server_type');    PMA_printListItem(__('Software version') . ': ' . PMA_MYSQL_STR_VERSION . ' - ' . PMA_MYSQL_VERSION_COMMENT, 'li_server_version');    PMA_printListItem(        __('Protocol version') . ': ' . PMA_DBI_get_proto_info(),        'li_mysql_proto'    );    PMA_printListItem(        __('User') . ': ' . htmlspecialchars($mysql_cur_user_and_host),        'li_user_info'    );    echo '    <li id="li_select_mysql_charset">';    echo '        ' . __('Server charset') . ': '       . '        <span xml:lang="en" dir="ltr">'       . '           ' . $mysql_charsets_descriptions[$mysql_charset_map['utf-8']] . "\n"       . '           (' . $mysql_charset_map['utf-8'] . ')' . "\n"       . '        </span>' . "\n"       . '    </li>' . "\n";    echo '  </ul>';    echo ' </div>';}if ($GLOBALS['cfg']['ShowServerInfo'] || $GLOBALS['cfg']['ShowPhpInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Web server') . '</h2>';    echo '<ul>';    if ($GLOBALS['cfg']['ShowServerInfo']) {        PMA_printListItem($_SERVER['SERVER_SOFTWARE'], 'li_web_server_software');        if ($server > 0) {            $client_version_str = PMA_DBI_get_client_info();            if (preg_match('#\d+\.\d+\.\d+#', $client_version_str)                && in_array($GLOBALS['cfg']['Server']['extension'], array('mysql', 'mysqli'))            ) {                $client_version_str = 'libmysql - ' . $client_version_str;            }            PMA_printListItem(                __('Database client version') . ': ' . $client_version_str,                'li_mysql_client_version'            );            PMA_printListItem(                __('PHP extension') . ': ' . $GLOBALS['cfg']['Server']['extension']. ' '                    . PMA_showPHPDocu('book.' . $GLOBALS['cfg']['Server']['extension'] . '.php'),                'li_used_php_extension'            );        }    }    if ($cfg['ShowPhpInfo']) {        PMA_printListItem(__('Show PHP information'), 'li_phpinfo', './phpinfo.php?' . $common_url_query);    }    echo '  </ul>';    echo ' </div>';}echo '<div class="group pmagroup">';echo '<h2>phpMyAdmin</h2>';echo '<ul>';$class = null;// workaround for bug 3302733; some browsers don't like the situation// where phpMyAdmin is called on a secure page but a part of the page// (the version check) refers to a non-secure pageif ($GLOBALS['cfg']['VersionCheck'] && ! $GLOBALS['PMA_Config']->get('is_https')) {    $class = 'jsversioncheck';}PMA_printListItem(__('Version information') . ': ' . PMA_VERSION, 'li_pma_version', null, null, null, null, $class);PMA_printListItem(__('Documentation'), 'li_pma_docs', 'Documentation.html', null, '_blank');PMA_printListItem(__('Wiki'), 'li_pma_wiki', PMA_linkURL('http://wiki.phpmyadmin.net/'), null, '_blank');// does not work if no target specified, don't know whyPMA_printListItem(__('Official Homepage'), 'li_pma_homepage', PMA_linkURL('http://www.phpMyAdmin.net/'), null, '_blank');PMA_printListItem(__('Contribute'), 'li_pma_contribute', PMA_linkURL('http://www.phpmyadmin.net/home_page/improve.php'), null, '_blank');PMA_printListItem(__('Get support'), 'li_pma_support', PMA_linkURL('http://www.phpmyadmin.net/home_page/support.php'), null, '_blank');PMA_printListItem(__('List of changes'), 'li_pma_changes', PMA_linkURL('changelog.php'), null, '_blank');?>    </ul> </div></div><?php/** * BUG: MSIE needs two <br /> here, otherwise it will not extend the outer div to the * full height of the inner divs */?><br class="clearfloat" /><br class="clearfloat" /></div><?php/** * Warning if using the default MySQL privileged account */if ($server != 0 && $cfg['Server']['user'] == 'root' && $cfg['Server']['password'] == '') {    trigger_error(__('Your configuration file contains settings (root with no password) that correspond to the default MySQL privileged account. Your MySQL server is running with this default, is open to intrusion, and you really should fix this security hole by setting a password for user \'root\'.'), E_USER_WARNING);}/** * Nijel: As we try to handle charsets by ourself, mbstring overloads just * break it, see bug 1063821. */if (@extension_loaded('mbstring') && @ini_get('mbstring.func_overload') > 1) {    trigger_error(__('You have enabled mbstring.func_overload in your PHP configuration. This option is incompatible with phpMyAdmin and might cause some data to be corrupted!'), E_USER_WARNING);}/** * Nijel: mbstring is used for handling multibyte inside parser, so it is good * to tell user something might be broken without it, see bug #1063149. */if (! @extension_loaded('mbstring')) {    trigger_error(__('The mbstring PHP extension was not found and you seem to be using a multibyte charset. Without the mbstring extension phpMyAdmin is unable to split strings correctly and it may result in unexpected results.'), E_USER_WARNING);}/** * Check whether session.gc_maxlifetime limits session validity. */$gc_time = (int)@ini_get('session.gc_maxlifetime');if ($gc_time < $GLOBALS['cfg']['LoginCookieValidity'] ) {    trigger_error(PMA_Message::decodeBB(__('Your PHP parameter [a@http://php.net/manual/en/session.configuration.php#ini.session.gc-maxlifetime@]session.gc_maxlifetime[/a] is lower that cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check whether LoginCookieValidity is limited by LoginCookieStore. */if ($GLOBALS['cfg']['LoginCookieStore'] != 0 && $GLOBALS['cfg']['LoginCookieStore'] < $GLOBALS['cfg']['LoginCookieValidity']) {    trigger_error(PMA_Message::decodeBB(__('Login cookie store is lower than cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check if user does not have defined blowfish secret and it is being used. */if (!empty($_SESSION['auto_blowfish_secret']) &&        empty($GLOBALS['cfg']['blowfish_secret'])) {    trigger_error(__('The configuration file now needs a secret passphrase (blowfish_secret).'), E_USER_WARNING);}/** * Check for existence of config directory which should not exist in * production environment. */if (file_exists('./config')) {    trigger_error(__('Directory [code]config[/code], which is used by the setup script, still exists in your phpMyAdmin directory. You should remove it once phpMyAdmin has been configured.'), E_USER_WARNING);}if ($server > 0) {    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage is not completely configured, some extended features have been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $common_url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        $message->display();    } // end if}/** * Show notice when javascript support is missing. */echo '<noscript>';$message = PMA_Message::notice(__('Javascript support is missing or disabled in your browser, some phpMyAdmin functionality will be missing. For example navigation frame will not refresh automatically.'));$message->isError(true);$message->display();echo '</noscript>';/** * Warning about different MySQL library and server version * (a difference on the third digit does not count). * If someday there is a constant that we can check about mysqlnd, we can use it instead * of strpos(). * If no default server is set, PMA_DBI_get_client_info() is not defined yet. * Drizzle can speak MySQL protocol, so don't warn about version mismatch for Drizzle servers. */if (function_exists('PMA_DBI_get_client_info') && !PMA_DRIZZLE) {    $_client_info = PMA_DBI_get_client_info();    if ($server > 0 && strpos($_client_info, 'mysqlnd') === false && substr(PMA_MYSQL_CLIENT_API, 0, 3) != substr(PMA_MYSQL_INT_VERSION, 0, 3)) {        trigger_error(            PMA_sanitize(                sprintf(                    __('Your PHP MySQL library version %s differs from your MySQL server version %s. This may cause unpredictable behavior.'),                    $_client_info,                    substr(                        PMA_MYSQL_STR_VERSION,                        0,                        strpos(PMA_MYSQL_STR_VERSION . '-', '-')                    )                )            ),            E_USER_NOTICE        );    }    unset($_client_info);}/** * Warning about Suhosin */if ($cfg['SuhosinDisableWarning'] == false    && @ini_get('suhosin.request.max_value_length')) {    trigger_error(        PMA_sanitize(            sprintf(                __('Server running with Suhosin. Please refer to %sdocumentation%s for possible issues.'),                '[a@./Documentation.html#faq1_38@_blank]',                '[/a]'            )        ),        E_USER_WARNING    );}/** * Warning about mcrypt. */if (!function_exists('mcrypt_encrypt') && !$GLOBALS['cfg']['McryptDisableWarning']) {    PMA_warnMissingExtension('mcrypt');}/** * Warning about incomplete translations. * * The data file is created while creating release by ./scripts/remove-incomplete-mo */if (file_exists('./libraries/language_stats.inc.php')) {    include './libraries/language_stats.inc.php';    /*     * This message is intentionally not translated, because we're     * handling incomplete translations here and focus on english     * speaking users.     */    if (isset($GLOBALS['language_stats'][$lang]) && $GLOBALS['language_stats'][$lang] < $cfg['TranslationWarningThreshold']) {        trigger_error('You are using an incomplete translation, please help to make it better by <a href="http://www.phpmyadmin.net/home_page/improve.php#translate" target="_blank">contributing</a>.', E_USER_NOTICE);    }}/** * prints list item for main page * * @param string  $name   displayed text * @param string  $id     id, used for css styles * @param string  $url    make item as link with $url as target * @param string  $mysql_help_page  display a link to MySQL's manual * @param string  $target special target for $url * @param string  $a_id   id for the anchor, used for jQuery to hook in functions * @param string  $class  class for the li element * @param string  $a_class  class for the anchor element */function PMA_printListItem($name, $id = null, $url = null, $mysql_help_page = null, $target = null, $a_id = null, $class = null, $a_class = null){    echo '<li id="' . $id . '"';    if (null !== $class) {        echo ' class="' . $class . '"';    }    echo '>';    if (null !== $url) {        echo '<a href="' . $url . '"';        if (null !== $target) {           echo ' target="' . $target . '"';        }        if (null != $a_id) {            echo ' id="' . $a_id .'"';        }        if (null != $a_class) {            echo ' class="' . $a_class .'"';        }        echo '>';    }    echo $name;    if (null !== $url) {        echo '</a>' . "\n";    }    if (null !== $mysql_help_page) {        echo PMA_showMySQLDocu('', $mysql_help_page);    }    echo '</li>';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage Original *//** * */$theme_name = 'Original';$theme_full_version = '2.9';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * this file is register_globals safe * * @todo    move JavaScript out of here into .js files * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$is_superuser = PMA_isSuperuser();/** * Gets a core script and starts output buffering work */require_once './libraries/sql_query_form.lib.php';/** * starts output buffering if requested and supported */require_once './libraries/ob.lib.php';PMA_outBufferPre();/** * load relation params */$cfgRelation = PMA_getRelationsParam();/** * load bookmark support */require_once './libraries/bookmark.lib.php';$querydisplay_tabs = array(    'sql',    'files',    'history',    'full',);if (isset($_REQUEST['querydisplay_tab']) && in_array($_REQUEST['querydisplay_tab'], $querydisplay_tabs)) {    $querydisplay_tab = $_REQUEST['querydisplay_tab'];} else {    $querydisplay_tab = $GLOBALS['cfg']['QueryWindowDefTab'];}/** * $_REQUEST['no_js'] is set if open new window by JavaScript failed * so this page is loaded in main frame */$no_js = PMA_ifSetOr($_REQUEST['no_js'], false);if ($no_js) {    $querydisplay_tab = 'full';    $tabs = false;} else {    $tabs = array();    $tabs['sql']['icon']   = 'b_sql.png';    $tabs['sql']['text']   = __('SQL');    $tabs['sql']['fragment']   = '#';    $tabs['sql']['attr']   = 'onclick="PMA_querywindowCommit(\'sql\');return false;"';    $tabs['sql']['active'] = (bool) ($querydisplay_tab == 'sql');    $tabs['import']['icon']   = 'b_import.png';    $tabs['import']['text']   = __('Import files');    $tabs['import']['fragment']   = '#';    $tabs['import']['attr']   = 'onclick="PMA_querywindowCommit(\'files\');return false;"';    $tabs['import']['active'] = (bool) ($querydisplay_tab == 'files');    $tabs['history']['icon']   = 'b_bookmark.png';    $tabs['history']['text']   = __('SQL history');    $tabs['history']['fragment']   = '#';    $tabs['history']['attr']   = 'onclick="PMA_querywindowCommit(\'history\');return false;"';    $tabs['history']['active'] = (bool) ($querydisplay_tab == 'history');    if ($GLOBALS['cfg']['QueryWindowDefTab'] == 'full') {        $tabs['all']['text']   = __('All');        $tabs['all']['fragment']   = '#';        $tabs['all']['attr']   = 'onclick="PMA_querywindowCommit(\'full\');return false;"';        $tabs['all']['active'] = (bool) ($querydisplay_tab == 'full');    }}$titles['Change'] = PMA_getIcon('b_edit.png', __('Change'));$url_query = PMA_generate_common_url($db, $table);if (! empty($sql_query)) {    $show_query = 1;}if ($no_js) {    // ... we redirect to appropriate query sql page    // works only full if $db and $table is also stored/grabbed from $_COOKIE    if (strlen($table)) {        include './tbl_sql.php';    } elseif (strlen($db)) {        include './db_sql.php';    } else {        include './server_sql.php';    }    exit;}/** * Defines the query to be displayed in the query textarea */if (! empty($show_query)) {    $query_to_display = $sql_query;} else {    $query_to_display = '';}$sql_query = '';/** * prepare JavaScript functionality */$js_include[] = 'common.js';$js_include[] = 'querywindow.js';if (PMA_isValid($_REQUEST['auto_commit'], 'identical', 'true')) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_queryAutoCommit',    );}if (PMA_isValid($_REQUEST['init'])) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowResize',    );}// always set focus to the textareaif ($querydisplay_tab == 'sql' || $querydisplay_tab == 'full') {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowSetFocus',    );}/** * start HTTP/HTML output */require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';require_once './libraries/header_scripts.inc.php';?></head><body id="bodyquerywindow"><div id="querywindowcontainer"><?phpif ($tabs) {    echo PMA_generate_html_tabs($tabs, array());    unset($tabs);}PMA_sqlQueryForm($query_to_display, $querydisplay_tab);// Hidden forms and query frame interaction stuff$_sql_history = PMA_getHistory($GLOBALS['cfg']['Server']['user']);if (! empty($_sql_history) && ($querydisplay_tab == 'history' || $querydisplay_tab == 'full')) {    $tab = $querydisplay_tab != 'full' ? 'sql' : 'full';    echo __('SQL history') . ':<br />'        . '<ul>';    foreach ($_sql_history as $query) {        echo '<li>' . "\n";        // edit link        $url_params = array(            'querydisplay_tab' => $tab,            'sql_query' => $query['sqlquery'],            'db' => $query['db'],            'table' => $query['table'],        );        echo '<a href="querywindow.php' . PMA_generate_common_url($url_params)            . '">' . $titles['Change'] . '</a>';        // execute link        $url_params['auto_commit'] = 'true';        echo '<a href="import.php' . PMA_generate_common_url($url_params) . '"'            . ' target="frame_content">';        if (! empty($query['db'])) {            echo '[';            echo htmlspecialchars(PMA_backquote($query['db']));            if (! empty($query['table'])) {                echo '.' . htmlspecialchars(PMA_backquote($query['table']));            }            echo  '] ';        }        if (strlen($query['sqlquery']) > 120) {            echo '<span title="' . htmlspecialchars($query['sqlquery']) . '">';            echo htmlspecialchars(substr($query['sqlquery'], 0, 50)) . ' [...] ';            echo htmlspecialchars(substr($query['sqlquery'], -50));            echo '</span>';        } else {            echo htmlspecialchars($query['sqlquery']);        }        echo '</a>' . "\n";        echo '</li>' . "\n";    }    unset($tab, $_sql_history, $query);    echo '</ul>' . "\n";}?><form action="querywindow.php" method="post" name="hiddenqueryform"    id="hiddenqueryform">    <?php echo PMA_generate_common_hidden_inputs('', ''); ?>    <input type="hidden" name="db" value="<?php echo htmlspecialchars($db); ?>" />    <input type="hidden" name="table" value="<?php echo htmlspecialchars($table); ?>" />    <input type="hidden" name="sql_query" value="" />    <input type="hidden" name="querydisplay_tab" value="<?php echo $querydisplay_tab; ?>" /></form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays the pma logo, links and db and server selection in left frame * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (empty($query_url)) {    // avoid putting here $db because it could display a db name    // to which the next user does not have access    $query_url = PMA_generate_common_url();}// display Logo, depending on $GLOBALS['cfg']['LeftDisplayLogo']if ($GLOBALS['cfg']['LeftDisplayLogo']) {    $logo = 'phpMyAdmin';    if (@file_exists($GLOBALS['pmaThemeImage'] . 'logo_left.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'logo_left.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    } elseif (@file_exists($GLOBALS['pmaThemeImage'] . 'pma_logo2.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo2.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    }    echo '<div id="pmalogo">' . "\n";    if ($GLOBALS['cfg']['LeftLogoLink']) {        echo '<a href="' . htmlspecialchars($GLOBALS['cfg']['LeftLogoLink']);        switch ($GLOBALS['cfg']['LeftLogoLinkWindow']) {            case 'new':                echo '" target="_blank"';                break;            case 'main':                // do not add our parameters for an external link                if (substr(strtolower($GLOBALS['cfg']['LeftLogoLink']), 0, 4) !== '://') {                    echo '?' . $query_url . '" target="frame_content"';                } else {                    echo '" target="_blank"';                }        }        echo '>' . $logo . '</a>' . "\n";    } else {        echo $logo . "\n";    }    echo '</div>' . "\n";} // end of display logo?><div id="leftframelinks"><?php    echo '<a href="main.php?' . $query_url . '"'        .' title="' . __('Home') . '">'        .($GLOBALS['cfg']['MainPageIconic']            ? PMA_getImage('b_home.png', __('Home'))            : __('Home'))        .'</a>' . "\n";    // if we have chosen server    if ($server != 0) {        // Logout for advanced authentication        if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {            echo ($GLOBALS['cfg']['MainPageIconic'] ? '' : ' - ');            echo '<a href="index.php?' . $query_url . '&amp;old_usr='                .urlencode($PHP_AUTH_USER) . '" target="_parent"'                .' title="' . __('Log out') . '" >'                .($GLOBALS['cfg']['MainPageIconic']                    ? PMA_getImage('s_loggoff.png', __('Log out'))                    : __('Log out'))                .'</a>' . "\n";        } // end if ($GLOBALS['cfg']['Server']['auth_type'] != 'config'        $anchor = 'querywindow.php?' . PMA_generate_common_url($db, $table);        if ($GLOBALS['cfg']['MainPageIconic']) {            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));        } else {            echo '<br />' . "\n";            $query_frame_link_text = __('Query window');        }        echo '<a href="' . $anchor . '&amp;no_js=true"'            .' title="' . __('Query window') . '"';        echo ' onclick="if (window.parent.open_querywindow()) return false;"';        echo '>' . $query_frame_link_text . '</a>' . "\n";    } // end if ($server != 0)    echo '    <a href="Documentation.html" target="documentation"'        .' title="' . __('phpMyAdmin documentation') . '" >';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));    } else {        echo '<br />' . __('phpMyAdmin documentation');    }    echo '</a>';    $documentation_link = PMA_showMySQLDocu('', '', true);    if ($GLOBALS['cfg']['MainPageIconic']) {        echo $documentation_link . "\n";    } else {        preg_match('/<a[^>]*>/', $documentation_link, $matches);        $link = $matches[0];        echo substr($link, 0, strlen($link) - 1) . ' title="' . __('Documentation') . '" >'            . '<br />' . __('Documentation') . '</a>';    }    $params = array('uniqid' => uniqid());    if (!empty($GLOBALS['db'])) {        $params['db'] = $GLOBALS['db'];    }    echo '<a href="navigation.php?' . PMA_generate_common_url($params)        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('s_reload', __('Reload navigation frame'));    } else {        echo '<br />' . __('Reload navigation frame');    }    echo '</a>';echo '</div>' . "\n";/** * Displays the MySQL servers choice form */if ($GLOBALS['cfg']['LeftDisplayServers'] && (count($GLOBALS['cfg']['Servers']) > 1 || $server == 0 && count($GLOBALS['cfg']['Servers']) == 1)) {    echo '<div id="serverinfo">';    include './libraries/select_server.lib.php';    PMA_select_server(true, true);    echo '</div><br />';} // end if LeftDisplayServers?>
<?php/** * Front controller for setup script * * @package    phpMyAdmin-setup * @copyright  Copyright (c) 2008, Piotr Przybylski <piotrprz@gmail.com> * @license    http://www.gnu.org/licenses/gpl.html GNU GPL 2.0 *//** * Core libraries. */require './lib/common.inc.php';$page = filter_input(INPUT_GET, 'page');$page = preg_replace('/[^a-z]/', '', $page);if ($page === '') {    $page = 'index';}if (!file_exists("./setup/frames/$page.inc.php")) {    // it will happen only when enterung URL by hand, we don't care for these cases    die(__('Wrong GET file attribute value'));}// Handle done action info$action_done = filter_input(INPUT_GET, 'action_done');$action_done = preg_replace('/[^a-z_]/', '', $action_done);// send no-cache headersrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>phpMyAdmin setup</title><link href="../favicon.ico" rel="icon" type="image/x-icon" /><link href="../favicon.ico" rel="shortcut icon" type="image/x-icon" /><link href="styles.css" rel="stylesheet" type="text/css" /><script type="text/javascript" src="../js/jquery/jquery-1.6.2.js"></script><script type="text/javascript" src="../js/jquery/jquery-ui-1.8.16.custom.js"></script><script type="text/javascript" src="../js/jquery/jquery.json-2.2.js"></script><script type="text/javascript" src="../js/config.js"></script><script type="text/javascript" src="scripts.js"></script></head><body><h1><span class="blue">php</span><span class="orange">MyAdmin</span>  setup</h1><div id="menu"><?phprequire './setup/frames/menu.inc.php';?></div><div id="page"><?phprequire "./setup/frames/$page.inc.php";?></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * Selects the database to work with */PMA_DBI_select_db($db);$goto = $cfg['DefaultTabTable'];/** * $_REQUEST['target_db'] could be empty in case we came from an input field * (when there are many databases, no drop-down) */if (empty($_REQUEST['target_db'])) {    $_REQUEST['target_db'] = $db;}/** * A target table name has been sent to this script -> do the work */if (PMA_isValid($_REQUEST['new_name'])) {    if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::error(__('Can\'t move table to same one!'));        } else {            $message = PMA_Message::error(__('Can\'t copy table to same one!'));        }        $result = false;    } else {        $result = PMA_Table::moveCopy($db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],            $_REQUEST['what'], isset($_REQUEST['submit_move']), 'one_table');        if (isset($_REQUEST['submit_move'])) {            $message = PMA_Message::success(__('Table %s has been moved to %s.'));        } else {            $message = PMA_Message::success(__('Table %s has been copied to %s.'));        }        $old = PMA_backquote($db) . '.' . PMA_backquote($table);        $message->addParam($old);        $new = PMA_backquote($_REQUEST['target_db']) . '.' . PMA_backquote($_REQUEST['new_name']);        $message->addParam($new);        /* Check: Work on new table or on old table? */        if (isset($_REQUEST['submit_move']) || PMA_isValid($_REQUEST['switch_to_new'])) {            $db        = $_REQUEST['target_db'];            $table     = $_REQUEST['new_name'];        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            $extra_data['db'] = $GLOBALS['db'];            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $reload = 1;    }} else {    /**     * No new name for the table!     */    $message = PMA_Message::error(__('The table name is empty!'));    $result = false;}/** * Back to the calling script */$_message = $message;unset($message);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * OpenDocument Spreadsheet import plugin for phpMyAdmin * * @todo    Pretty much everything * @todo    Importing of accented characters seems to fail * @package PhpMyAdmin-Import * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * We need way to disable external XML entities processing. */if (!function_exists('libxml_disable_entity_loader')) {    return;}/** * The possible scopes for $plugin_param are: 'table', 'database', and 'server' */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'options' => array(                array('type' => 'begin_group', 'name' => 'general_opts'),                array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>')),                array('type' => 'bool', 'name' => 'empty_rows', 'text' => __('Do not import empty rows')),                array('type' => 'bool', 'name' => 'recognize_percentages', 'text' => __('Import percentages as proper decimals <i>(ex. 12.00% to .12)</i>')),                array('type' => 'bool', 'name' => 'recognize_currency', 'text' => __('Import currencies <i>(ex. $5.00 to 5.00)</i>')),                array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}$i = 0;$len = 0;$buffer = "";/** * Read in the file via PMA_importGetNextChunk so that * it can process compressed files */while (! ($finished && $i >= $len) && ! $error && ! $timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        /* subtract data we didn't handle yet and stop processing */        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        /* Handle rest of buffer */    } else {        /* Append new data to buffer */        $buffer .= $data;        unset($data);    }}unset($data);/** * Disable loading of external XML entities. */libxml_disable_entity_loader();/** * Load the XML string * * The option LIBXML_COMPACT is specified because it can * result in increased performance without the need to * alter the code in any way. It's basically a freebee. */$xml = simplexml_load_string($buffer, "SimpleXMLElement", LIBXML_COMPACT);unset($buffer);if ($xml === false) {    $sheets = array();    $message = PMA_Message::error(__('The XML file specified was either malformed or incomplete. Please correct the issue and try again.'));    $error = true;} else {    $sheets = $xml->children('office', true)->{'body'}->{'spreadsheet'}->children('table', true);}$tables = array();$max_cols = 0;$row_count = 0;$col_count = 0;$col_names = array();$tempRow = array();$tempRows = array();$rows = array();/* Iterate over tables */foreach ($sheets as $sheet) {    $col_names_in_first_row = isset($_REQUEST['ods_col_names']);    /* Iterate over rows */    foreach ($sheet as $row) {        $type = $row->getName();        if (! strcmp('table-row', $type)) {            /* Iterate over columns */            foreach ($row as $cell) {                $text = $cell->children('text', true);                $cell_attrs = $cell->attributes('office', true);                if (count($text) != 0) {                    $attr = $cell->attributes('table', true);                    $num_repeat = (int) $attr['number-columns-repeated'];                    $num_iterations = $num_repeat ? $num_repeat : 1;                    for ($k = 0; $k < $num_iterations; $k++) {                        if (! $col_names_in_first_row) {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } elseif ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } else {                                $tempRow[] = (string)$text;                            }                        } else {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else if ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else {                                $col_names[] = (string)$text;                            }                        }                        ++$col_count;                    }                } else {                    /* Number of blank columns repeated */                    if ($col_count < count($row->children('table', true)) - 1) {                        $attr = $cell->attributes('table', true);                        $num_null = (int)$attr['number-columns-repeated'];                        if ($num_null) {                            if (! $col_names_in_first_row) {                                for ($i = 0; $i < $num_null; ++$i) {                                    $tempRow[] = 'NULL';                                    ++$col_count;                                }                            } else {                                for ($i = 0; $i < $num_null; ++$i) {                                    $col_names[] = PMA_getColumnAlphaName($col_count + 1);                                    ++$col_count;                                }                            }                        } else {                            if (! $col_names_in_first_row) {                                $tempRow[] = 'NULL';                            } else {                                $col_names[] = PMA_getColumnAlphaName($col_count + 1);                            }                            ++$col_count;                        }                    }                }            }            /* Find the widest row */            if ($col_count > $max_cols) {                $max_cols = $col_count;            }            /* Don't include a row that is full of NULL values */            if (! $col_names_in_first_row) {                if ($_REQUEST['ods_empty_rows']) {                    foreach ($tempRow as $cell) {                        if (strcmp('NULL', $cell)) {                            $tempRows[] = $tempRow;                            break;                        }                    }                } else {                    $tempRows[] = $tempRow;                }            }            $col_count = 0;            $col_names_in_first_row = false;            $tempRow = array();        }    }    /* Skip over empty sheets */    if (count($tempRows) == 0 || count($tempRows[0]) == 0) {        $col_names = array();        $tempRow = array();        $tempRows = array();        continue;    }    /**     * Fill out each row as necessary to make     * every one exactly as wide as the widest     * row. This included column names.     */    /* Fill out column names */    for ($i = count($col_names); $i < $max_cols; ++$i) {        $col_names[] = PMA_getColumnAlphaName($i + 1);    }    /* Fill out all rows */    $num_rows = count($tempRows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($tempRows[$i]); $j < $max_cols; ++$j) {            $tempRows[$i][] = 'NULL';        }    }    /* Store the table name so we know where to place the row set */    $tbl_attr = $sheet->attributes('table', true);    $tables[] = array((string)$tbl_attr['name']);    /* Store the current sheet in the accumulator */    $rows[] = array((string)$tbl_attr['name'], $col_names, $tempRows);    $tempRows = array();    $col_names = array();    $max_cols = 0;}unset($tempRow);unset($tempRows);unset($col_names);unset($sheets);unset($xml);/** * Bring accumulated rows into the corresponding table */$num_tbls = count($tables);for ($i = 0; $i < $num_tbls; ++$i) {    for ($j = 0; $j < count($rows); ++$j) {        if (! strcmp($tables[$i][TBL_NAME], $rows[$j][TBL_NAME])) {            if (! isset($tables[$i][COL_NAMES])) {                $tables[$i][] = $rows[$j][COL_NAMES];            }            $tables[$i][ROWS] = $rows[$j][ROWS];        }    }}/* No longer needed */unset($rows);/* Obtain the best-fit MySQL types for each column */$analyses = array();$len = count($tables);for ($i = 0; $i < $len; ++$i) {    $analyses[] = PMA_analyzeTable($tables[$i]);}/** * string $db_name (no backquotes) * * array $table = array(table_name, array() column_names, array()() rows) * array $tables = array of "$table"s * * array $analysis = array(array() column_types, array() column_sizes) * array $analyses = array of "$analysis"s * * array $create = array of SQL strings * * array $options = an associative array of options *//* Set database name to the currently selected one, if applicable */if (strlen($db)) {    $db_name = $db;    $options = array('create_db' => false);} else {    $db_name = 'ODS_DB';    $options = null;}/* Non-applicable parameters */$create = null;/* Created and execute necessary SQL statements from data */PMA_buildSQL($db_name, $tables, $analyses, $create, $options);unset($tables);unset($analyses);/* Commit any possible data in buffers */PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for event management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_EVN_setGlobals(){    global $event_status, $event_type, $event_interval;    $event_status        = array(                               'query'   => array('ENABLE',                                                  'DISABLE',                                                  'DISABLE ON SLAVE'),                               'display' => array('ENABLED',                                                  'DISABLED',                                                  'SLAVESIDE_DISABLED')                           );    $event_type          = array('RECURRING',                                 'ONE TIME');    $event_interval      = array('YEAR',                                 'QUARTER',                                 'MONTH',                                 'DAY',                                 'HOUR',                                 'MINUTE',                                 'WEEK',                                 'SECOND',                                 'YEAR_MONTH',                                 'DAY_HOUR',                                 'DAY_MINUTE',                                 'DAY_SECOND',                                 'HOUR_MINUTE',                                 'HOUR_SECOND',                                 'MINUTE_SECOND');}/** * Main function for the events functionality */function PMA_EVN_main(){    global $db;    PMA_EVN_setGlobals();    /**     * Process all requests     */    PMA_EVN_handleEditor();    PMA_EVN_handleExport();    /**     * Display a list of available events     */    $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` "             . "WHERE $where ORDER BY `EVENT_NAME` ASC;";    $items   = PMA_DBI_fetch_result($query);    echo PMA_RTE_getList('event', $items);    /**     * Display a link for adding a new event, if     * the user has the privileges and a link to     * toggle the state of the event scheduler.     */    echo PMA_EVN_getFooterLinks();} // end PMA_EVN_main()/** * Handles editor requests for adding or editing an item */function PMA_EVN_handleEditor(){    global $_REQUEST, $_POST, $errors, $db;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_EVN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $create_item = PMA_DBI_get_definition(                    $db,                    'EVENT',                    $_REQUEST['item_original_name']                );                $drop_item = "DROP EVENT " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped event.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Event %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Event %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";                $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                         . "AND EVENT_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'";                $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";                $event   = PMA_DBI_fetch_single_row($query);                $extra_data['name'] = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_EVN_getRowForList($event);                $extra_data['insert'] = ! empty($event);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['item_changetype'])))    ) { // FIXME: this must be simpler than that        $operation = '';        if (! empty($_REQUEST['item_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_EVN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit event");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])                && empty($_REQUEST['item_changetype'])            ) {                $item = PMA_EVN_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_EVN_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_EVN_getEditorForm($mode, $operation, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_EVN_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_status',                     'item_execute_at',                     'item_interval_value',                     'item_interval_field',                     'item_starts',                     'item_ends',                     'item_definition',                     'item_preserve',                     'item_comment',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']        = 'ONE TIME';    $retval['item_type_toggle'] = 'RECURRING';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'RECURRING') {        $retval['item_type']        = 'RECURRING';        $retval['item_type_toggle'] = 'ONE TIME';    }    return $retval;} // end PMA_EVN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit event" form given the name of a event. * * @param   string   $name   The name of the event. * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromName($name){    global $db;    $retval = array();    $columns = "`EVENT_NAME`, `STATUS`, `EVENT_TYPE`, `EXECUTE_AT`, "             . "`INTERVAL_VALUE`, `INTERVAL_FIELD`, `STARTS`, `ENDS`, "             . "`EVENT_DEFINITION`, `ON_COMPLETION`, `DEFINER`, `EVENT_COMMENT`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND EVENT_NAME='" . PMA_sqlAddSlashes($name) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";    $item    = PMA_DBI_fetch_single_row($query);    if (! $item) {        return false;    }    $retval['item_name']   = $item['EVENT_NAME'];    $retval['item_status'] = $item['STATUS'];    $retval['item_type']   = $item['EVENT_TYPE'];    if ($retval['item_type'] == 'RECURRING') {        $retval['item_type_toggle'] = 'ONE TIME';    } else {        $retval['item_type_toggle'] = 'RECURRING';    }    $retval['item_execute_at']     = $item['EXECUTE_AT'];    $retval['item_interval_value'] = $item['INTERVAL_VALUE'];    $retval['item_interval_field'] = $item['INTERVAL_FIELD'];    $retval['item_starts']         = $item['STARTS'];    $retval['item_ends']           = $item['ENDS'];    $retval['item_preserve']       = '';    if ($item['ON_COMPLETION'] == 'PRESERVE') {        $retval['item_preserve']   = " checked='checked'";    }    $retval['item_definition'] = $item['EVENT_DEFINITION'];    $retval['item_definer']    = $item['DEFINER'];    $retval['item_comment']    = $item['EVENT_COMMENT'];    return $retval;} // end PMA_EVN_getDataFromName()/** * Displays a form used to add/edit an event * * @param   string   $mode      If the editor will be used edit an event *                              or add a new one: 'edit' or 'add'. * @param   string   $operation If the editor was previously invoked with *                              JS turned off, this will hold the name of *                              the current operation * @param   array    $item      Data for the event returned by *                              PMA_EVN_getDataFromRequest() or *                              PMA_EVN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_EVN_getEditorForm($mode, $operation, $item){    global $db, $table, $event_status, $event_type, $event_interval;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_type',                       'item_execute_at',                       'item_interval_value',                       'item_starts',                       'item_ends',                       'item_definition',                       'item_definer',                       'item_comment'                   );    foreach ($need_escape as $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    // Handle some logic first    if ($operation == 'change') {        if ($item['item_type'] == 'RECURRING') {            $item['item_type']         = 'ONE TIME';            $item['item_type_toggle']  = 'RECURRING';        } else {            $item['item_type']         = 'RECURRING';            $item['item_type_toggle']  = 'ONE TIME';        }    }    if ($item['item_type'] == 'ONE TIME') {        $isrecurring_class = ' hide';        $isonetime_class   = '';    } else {        $isrecurring_class = '';        $isonetime_class   = ' hide';    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " EVENT FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_events.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Event name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' \n";    $retval .= "               value='{$item['item_name']}'\n";    $retval .= "               maxlength='64' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Status') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_status'>\n";    foreach ($event_status['display'] as $key => $value) {        $selected = "";        if (! empty($item['item_status']) && $item['item_status'] == $value) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>";        foreach ($event_type as $key => $value) {            $selected = "";            if (! empty($item['item_type']) && $item['item_type'] == $value) {                $selected = " selected='selected'";            }            $retval .= "<option$selected>$value</option>";        }        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' \n";        $retval .= "               value='{$item['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$item['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit'\n";        $retval .= "               name='item_changetype'\n";        $retval .= "               value='";        $retval .= sprintf(__('Change to %s'), $item['item_type_toggle']);        $retval .= "' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='onetime_event_row $isonetime_class'>\n";    $retval .= "    <td>" . __('Execute at') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_execute_at'\n";    $retval .= "               value='{$item['item_execute_at']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row $isrecurring_class'>\n";    $retval .= "    <td>" . __('Execute every') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='text'\n";    $retval .= "               name='item_interval_value'\n";    $retval .= "               value='{$item['item_interval_value']}' />\n";    $retval .= "        <select style='width: 49%;' name='item_interval_field'>";    foreach ($event_interval as $key => $value) {        $selected = "";        if (! empty($item['item_interval_field'])            && $item['item_interval_field'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('Start of recurring event', 'Start') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text'\n name='item_starts'\n";    $retval .= "               value='{$item['item_starts']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('End of recurring event', 'End') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_ends'\n";    $retval .= "               value='{$item['item_ends']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('On completion preserve') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_preserve'{$item['item_preserve']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$item['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " EVENT FORM -->\n\n";    return $retval;} // end PMA_EVN_getEditorForm()/** * Composes the query necessary to create an event from an HTTP request. * * @return  string  The CREATE EVENT query. */function PMA_EVN_getQueryFromRequest(){    global $_REQUEST, $errors, $event_status, $event_type, $event_interval;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'EVENT ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide an event name');    }    $query .= 'ON SCHEDULE ';    if (! empty($_REQUEST['item_type']) && in_array($_REQUEST['item_type'], $event_type)) {        if ($_REQUEST['item_type'] == 'RECURRING') {            if (! empty($_REQUEST['item_interval_value'])                && !empty($_REQUEST['item_interval_field'])                && in_array($_REQUEST['item_interval_field'], $event_interval)            ) {                $query .= 'EVERY ' . intval($_REQUEST['item_interval_value']) . ' ';                $query .= $_REQUEST['item_interval_field'] . ' ';            } else {                $errors[] = __('You must provide a valid interval value for the event.');            }            if (! empty($_REQUEST['item_starts'])) {                $query .= "STARTS '" . PMA_sqlAddSlashes($_REQUEST['item_starts']) . "' ";            }            if (! empty($_REQUEST['item_ends'])) {                $query .= "ENDS '" . PMA_sqlAddSlashes($_REQUEST['item_ends']) . "' ";            }        } else {            if (! empty($_REQUEST['item_execute_at'])) {                $query .= "AT '" . PMA_sqlAddSlashes($_REQUEST['item_execute_at']) . "' ";            } else {                $errors[] = __('You must provide a valid execution time for the event.');            }        }    } else {        $errors[] = __('You must provide a valid type for the event.');    }    $query .= 'ON COMPLETION ';    if (empty($_REQUEST['item_preserve'])) {        $query .= 'NOT ';    }    $query .= 'PRESERVE ';    if (! empty($_REQUEST['item_status'])) {        foreach ($event_status['display'] as $key => $value) {            if ($value == $_REQUEST['item_status']) {                $query .= $event_status['query'][$key] . ' ';                break;            }        }    }    $query .= 'DO ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide an event definition.');    }    return $query;} // end PMA_EVN_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core functions used all over the scripts. * This script is distinct from libraries/common.inc.php because this * script is called from /test. * * @package PhpMyAdmin *//** * checks given $var and returns it if valid, or $default of not valid * given $var is also checked for type being 'similar' as $default * or against any other type if $type is provided * * <code> * // $_REQUEST['db'] not set * echo PMA_ifSetOr($_REQUEST['db'], ''); // '' * // $_REQUEST['sql_query'] not set * echo PMA_ifSetOr($_REQUEST['sql_query']); // null * // $cfg['ForceSSL'] not set * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL']); // null * // $cfg['ForceSSL'] set to 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1 * // $cfg['ForceSSL'] set to true * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true * </code> * * @see     PMA_isValid() * @param mixed   $var        param to check * @param mixed   $default    default value * @param mixed   $type       var type or array of values to check against $var * @return  mixed   $var or $default */function PMA_ifSetOr(&$var, $default = null, $type = 'similar'){    if (! PMA_isValid($var, $type, $default)) {        return $default;    }    return $var;}/** * checks given $var against $type or $compare * * $type can be: * - false       : no type checking * - 'scalar'    : whether type of $var is integer, float, string or boolean * - 'numeric'   : whether type of $var is any number repesentation * - 'length'    : whether type of $var is scalar with a string length > 0 * - 'similar'   : whether type of $var is similar to type of $compare * - 'equal'     : whether type of $var is identical to type of $compare * - 'identical' : whether $var is identical to $compare, not only the type! * - or any other valid PHP variable type * * <code> * // $_REQUEST['doit'] = true; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false * // $_REQUEST['doit'] = 'true'; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true * </code> * * NOTE: call-by-reference is used to not get NOTICE on undefined vars, * but the var is not altered inside this function, also after checking a var * this var exists nut is not set, example: * <code> * // $var is not set * isset($var); // false * functionCallByReference($var); // false * isset($var); // true * functionCallByReference($var); // true * </code> * * to avoid this we set this var to null if not isset * * @todo create some testsuites * @todo add some more var types like hex, bin, ...? * @see     http://php.net/gettype * @param mixed   $var        variable to check * @param mixed   $type       var type or array of valid values to check against $var * @param mixed   $compare    var to compare with $var * @return  boolean whether valid or not */function PMA_isValid(&$var, $type = 'length', $compare = null){    if (! isset($var)) {        // var is not even set        return false;    }    if ($type === false) {        // no vartype requested        return true;    }    if (is_array($type)) {        return in_array($var, $type);    }    // allow some aliaes of var types    $type = strtolower($type);    switch ($type) {        case 'identic' :            $type = 'identical';            break;        case 'len' :            $type = 'length';            break;        case 'bool' :            $type = 'boolean';            break;        case 'float' :            $type = 'double';            break;        case 'int' :            $type = 'integer';            break;        case 'null' :            $type = 'NULL';            break;    }    if ($type === 'identical') {        return $var === $compare;    }    // whether we should check against given $compare    if ($type === 'similar') {        switch (gettype($compare)) {            case 'string':            case 'boolean':                $type = 'scalar';                break;            case 'integer':            case 'double':                $type = 'numeric';                break;            default:                $type = gettype($compare);        }    } elseif ($type === 'equal') {        $type = gettype($compare);    }    // do the check    if ($type === 'length' || $type === 'scalar') {        $is_scalar = is_scalar($var);        if ($is_scalar && $type === 'length') {            return (bool) strlen($var);        }        return $is_scalar;    }    if ($type === 'numeric') {        return is_numeric($var);    }    if (gettype($var) === $type) {        return true;    }    return false;}/** * Removes insecure parts in a path; used before include() or * require() when a part of the path comes from an insecure source * like a cookie or form. * * @param string  The path to check * * @return   string  The secured path * * @access  public */function PMA_securePath($path){    // change .. to .    $path = preg_replace('@\.\.*@', '.', $path);    return $path;} // end function/** * displays the given error message on phpMyAdmin error page in foreign language, * ends script execution and closes session * * loads language file if not loaded already * * @todo    use detected argument separator (PMA_Config) * @param string $error_message the error message or named error message * @param string|array $message_args arguments applied to $error_message * @return  exit */function PMA_fatalError($error_message, $message_args = null){    /* Use format string if applicable */    if (is_string($message_args)) {        $error_message = sprintf($error_message, $message_args);    } elseif (is_array($message_args)) {        $error_message = vsprintf($error_message, $message_args);    }    $error_message = strtr($error_message, array('<br />' => '[br]'));    if (function_exists('__')) {        $error_header = __('Error');    } else {        $error_header = 'Error';    }    // Displays the error message    $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];    $dir = $GLOBALS['text_dir'];    $type = $error_header;    $error = $error_message;    // on fatal errors it cannot hurt to always delete the current session    if (isset($GLOBALS['session_name']) && isset($_COOKIE[$GLOBALS['session_name']])) {        $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);    }    include './libraries/error.inc.php';    if (!defined('TESTSUITE')) {        exit;    }}/** * Returns a link to the PHP documentation * * @param string  anchor in documentation * * @return  string  the URL * * @access  public */function PMA_getPHPDocLink($target){    /* Gettext does not have to be loaded yet */    if (function_exists('_pgettext')) {        /* l10n: Please check that translation actually exists. */        $lang = _pgettext('PHP documentation language', 'en');    } else {        $lang = 'en';    }    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);}/** * Warn or fail on missing extension. * * @param string $extension Extension name * @param bool $fatal Whether the error is fatal. / @param string $extra Extra string to append to messsage. */function PMA_warnMissingExtension($extension, $fatal = false, $extra = ''){    /* Gettext does not have to be loaded yet here */    if (function_exists('__')) {        $message = __('The %s extension is missing. Please check your PHP configuration.');    } else {        $message = 'The %s extension is missing. Please check your PHP configuration.';    }    $message = sprintf($message,        '[a@' . PMA_getPHPDocLink('book.' . $extension . '.php') . '@Documentation][em]' . $extension . '[/em][/a]');    if ($extra != '') {        $message .= ' ' . $extra;    }    if ($fatal) {        PMA_fatalError($message);    } else {        trigger_error($message, E_USER_WARNING);    }}/** * returns count of tables in given db * * @param string  $db database to count tables for * @return  integer count of tables in $db */function PMA_getTableCount($db){    $tables = PMA_DBI_try_query(        'SHOW TABLES FROM ' . PMA_backquote($db) . ';',        null, PMA_DBI_QUERY_STORE);    if ($tables) {        $num_tables = PMA_DBI_num_rows($tables);        // do not count hidden blobstreaming tables        while ((($num_tables > 0)) && $data = PMA_DBI_fetch_assoc($tables)) {            if (PMA_BS_IsHiddenTable($data['Tables_in_' . $db])) {                $num_tables--;            }        }        PMA_DBI_free_result($tables);    } else {        $num_tables = 0;    }    return $num_tables;}/** * Converts numbers like 10M into bytes * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas * (renamed with PMA prefix to avoid double definition when embedded * in Moodle) * * @param string  $size * @return  integer $size */function PMA_get_real_size($size = 0){    if (! $size) {        return 0;    }    $scan['gb'] = 1073741824; //1024 * 1024 * 1024;    $scan['g']  = 1073741824; //1024 * 1024 * 1024;    $scan['mb'] = 1048576;    $scan['m']  = 1048576;    $scan['kb'] =    1024;    $scan['k']  =    1024;    $scan['b']  =       1;    foreach ($scan as $unit => $factor) {        if (strlen($size) > strlen($unit)         && strtolower(substr($size, strlen($size) - strlen($unit))) == $unit) {            return substr($size, 0, strlen($size) - strlen($unit)) * $factor;        }    }    return $size;} // end function PMA_get_real_size()/** * merges array recursive like array_merge_recursive() but keyed-values are * always overwritten. * * array PMA_array_merge_recursive(array $array1[, array $array2[, array ...]]) * * @see     http://php.net/array_merge * @see     http://php.net/array_merge_recursive * @param array   array to merge * @param array   array to merge * @param array   ... * @return  array   merged array */function PMA_array_merge_recursive(){    switch(func_num_args()) {        case 0 :            return false;            break;        case 1 :            // when does that happen?            return func_get_arg(0);            break;        case 2 :            $args = func_get_args();            if (! is_array($args[0]) || ! is_array($args[1])) {                return $args[1];            }            foreach ($args[1] as $key2 => $value2) {                if (isset($args[0][$key2]) && !is_int($key2)) {                    $args[0][$key2] = PMA_array_merge_recursive($args[0][$key2],                        $value2);                } else {                    // we erase the parent array, otherwise we cannot override a directive that                    // contains array elements, like this:                    // (in config.default.php) $cfg['ForeignKeyDropdownOrder'] = array('id-content','content-id');                    // (in config.inc.php) $cfg['ForeignKeyDropdownOrder'] = array('content-id');                    if (is_int($key2) && $key2 == 0) {                        unset($args[0]);                    }                    $args[0][$key2] = $value2;                }            }            return $args[0];            break;        default :            $args = func_get_args();            $args[1] = PMA_array_merge_recursive($args[0], $args[1]);            array_shift($args);            return call_user_func_array('PMA_array_merge_recursive', $args);            break;    }}/** * calls $function vor every element in $array recursively * * this function is protected against deep recursion attack CVE-2006-1549, * 1000 seems to be more than enough * * @see http://www.php-security.org/MOPB/MOPB-02-2007.html * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549 * * @param array   $array      array to walk * @param string  $function   function to call for every array element */function PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false){    static $recursive_counter = 0;    if (++$recursive_counter > 1000) {        die(__('possible deep recursion attack'));    }    foreach ($array as $key => $value) {        if (is_array($value)) {            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);        } else {            $array[$key] = $function($value);        }        if ($apply_to_keys_also && is_string($key)) {            $new_key = $function($key);            if ($new_key != $key) {                $array[$new_key] = $array[$key];                unset($array[$key]);            }        }    }    $recursive_counter--;}/** * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist) * * checks given given $page against given $whitelist and returns true if valid * it ignores optionaly query paramters in $page (script.php?ignored) * * @param string  &$page      page to check * @param array   $whitelist  whitelist to check page against * @return  boolean whether $page is valid or not (in $whitelist or not) */function PMA_checkPageValidity(&$page, $whitelist){    if (! isset($page) || !is_string($page)) {        return false;    }    if (in_array($page, $whitelist)) {        return true;    } elseif (in_array(substr($page, 0, strpos($page . '?', '?')), $whitelist)) {        return true;    } else {        $_page = urldecode($page);        if (in_array(substr($_page, 0, strpos($_page . '?', '?')), $whitelist)) {            return true;        }    }    return false;}/** * trys to find the value for the given environment vriable name * * searchs in $_SERVER, $_ENV than trys getenv() and apache_getenv() * in this order * * @param string  $var_name   variable name * @return  string  value of $var or empty string */function PMA_getenv($var_name){    if (isset($_SERVER[$var_name])) {        return $_SERVER[$var_name];    } elseif (isset($_ENV[$var_name])) {        return $_ENV[$var_name];    } elseif (getenv($var_name)) {        return getenv($var_name);    } elseif (function_exists('apache_getenv')     && apache_getenv($var_name, true)) {        return apache_getenv($var_name, true);    }    return '';}/** * Send HTTP header, taking IIS limits into account (600 seems ok) * * @param string   $uri the header to send * @return  boolean  always true */function PMA_sendHeaderLocation($uri){    if (PMA_IS_IIS && strlen($uri) > 600) {        include_once './libraries/js_escape.lib.php';        echo '<html><head><title>- - -</title>' . "\n";        echo '<meta http-equiv="expires" content="0">' . "\n";        echo '<meta http-equiv="Pragma" content="no-cache">' . "\n";        echo '<meta http-equiv="Cache-Control" content="no-cache">' . "\n";        echo '<meta http-equiv="Refresh" content="0;url=' .  htmlspecialchars($uri) . '">' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'setTimeout("window.location = unescape(\'"' . PMA_escapeJsString($uri) . '"\')", 2000);' . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";        echo '</head>' . "\n";        echo '<body>' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'document.write(\'<p><a href="' . htmlspecialchars($uri) . '">' . __('Go') . '</a></p>\');' . "\n";        echo '//]]>' . "\n";        echo '</script></body></html>' . "\n";    } else {        if (SID) {            if (strpos($uri, '?') === false) {                header('Location: ' . $uri . '?' . SID);            } else {                $separator = PMA_get_arg_separator();                header('Location: ' . $uri . $separator . SID);            }        } else {            session_write_close();            if (headers_sent()) {                if (function_exists('debug_print_backtrace')) {                    echo '<pre>';                    debug_print_backtrace();                    echo '</pre>';                }                trigger_error('PMA_sendHeaderLocation called when headers are already sent!', E_USER_ERROR);            }            // bug #1523784: IE6 does not like 'Refresh: 0', it            // results in a blank page            // but we need it when coming from the cookie login panel)            if (PMA_IS_IIS && defined('PMA_COMING_FROM_COOKIE_LOGIN')) {                header('Refresh: 0; ' . $uri);            } else {                header('Location: ' . $uri);            }        }    }}/** * Outputs headers to prevent caching in browser (and on the way). * * @return nothing */function PMA_no_cache_header(){    header('Expires: ' . date(DATE_RFC1123)); // rfc2616 - Section 14.21    header('Cache-Control: no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0'); // HTTP/1.1    if (PMA_USR_BROWSER_AGENT == 'IE') {        /* FIXME: Why is this speecial case for IE needed? */        header('Pragma: public');    } else {        header('Pragma: no-cache'); // HTTP/1.0        // test case: exporting a database into a .gz file with Safari        // would produce files not having the current time        // (added this header for Safari but should not harm other browsers)        header('Last-Modified: ' . date(DATE_RFC1123));    }}/** * Sends header indicating file download. * * @param string $filename Filename to include in headers if empty, *                         none Content-Disposition header will be sent. * @param string $mimetype MIME type to include in headers. * @param int    $length   Length of content (optional) * @param bool   $no_cache Whether to include no-caching headers. * * @return nothing */function PMA_download_header($filename, $mimetype, $length = 0, $no_cache = true){    if ($no_cache) {        PMA_no_cache_header();    }    /* Replace all possibly dangerous chars in filename */    $filename = str_replace(array(';', '"', "\n", "\r"), '-', $filename);    if (!empty($filename)) {        header('Content-Description: File Transfer');        header('Content-Disposition: attachment; filename="' . $filename . '"');    }    header('Content-Type: ' . $mimetype);    header('Content-Transfer-Encoding: binary');    if ($length > 0) {        header('Content-Length: ' . $length);    }}/** * Returns value of an element in $array given by $path. * $path is a string describing position of an element in an associative array, * eg. Servers/1/host refers to $array[Servers][1][host] * * @param string   $path * @param array    $array * @param mixed    $default * @return mixed    array element or $default */function PMA_array_read($path, $array, $default = null){    $keys = explode('/', $path);    $value =& $array;    foreach ($keys as $key) {        if (! isset($value[$key])) {            return $default;        }        $value =& $value[$key];    }    return $value;}/** * Stores value in an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_write($path, &$array, $value){    $keys = explode('/', $path);    $last_key = array_pop($keys);    $a =& $array;    foreach ($keys as $key) {        if (! isset($a[$key])) {            $a[$key] = array();        }        $a =& $a[$key];    }    $a[$last_key] = $value;}/** * Removes value from an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_remove($path, &$array){    $keys = explode('/', $path);    $keys_last = array_pop($keys);    $path = array();    $depth = 0;    $path[0] =& $array;    $found = true;    // go as deep as required or possible    foreach ($keys as $key) {        if (! isset($path[$depth][$key])) {            $found = false;            break;        }        $depth++;        $path[$depth] =& $path[$depth-1][$key];    }    // if element found, remove it    if ($found) {        unset($path[$depth][$keys_last]);        $depth--;    }    // remove empty nested arrays    for (; $depth >= 0; $depth--) {        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {            unset($path[$depth][$keys[$depth]]);        } else {            break;        }    }}/** * Returns link to (possibly) external site using defined redirector. * * @param string $url  URL where to go. * * @return string URL for a link. */function PMA_linkURL($url){    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {        return $url;    } else {        if (!function_exists('PMA_generate_common_url')) {            include_once './libraries/url_generating.lib.php';        }        $params = array();        $params['url'] = $url;        return './url.php' . PMA_generate_common_url($params);    }}/** * Returns HTML code to include javascript file. * * @param string $url Location of javascript, relative to js/ folder. * * @return string HTML code for javascript inclusion. */function PMA_includeJS($url){    if (strpos($url, '?') === false) {        return '<script src="./js/' . $url . '?ts=' . filemtime('./js/' . $url) . '" type="text/javascript"></script>' . "\n";    } else {        return '<script src="./js/' . $url . '" type="text/javascript"></script>' . "\n";    }}/** * Adds JS code snippets to be displayed by header.inc.php. Adds a * newline to each snippet. * * @param string $str Js code to be added (e.g. "token=1234;") * */function PMA_AddJSCode($str){    $GLOBALS['js_script'][] = $str;}/** * Adds JS code snippet for variable assignment to be displayed by header.inc.php. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * */function PMA_AddJSVar($key, $value, $escape = true){    PMA_AddJsCode(PMA_getJsValue($key, $value, $escape));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_export.php&amp;back=tbl_export.php';require_once './libraries/tbl_info.inc.php';// Dump of a table$export_page_title = __('View dump (schema) of table');// When we have some query, we need to remove LIMIT from that and possibly// generate WHERE clause (if we are asked to export specific rows)if (! empty($sql_query)) {    // Parse query so we can work with tokens    $parsed_sql = PMA_SQP_parse($sql_query);    $analyzed_sql = PMA_SQP_analyze($parsed_sql);    // Need to generate WHERE clause?    if (isset($where_clause)) {        // Yes => rebuild query from scratch; this doesn't work with nested        // selects :-(        $sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $sql_query .= ' DISTINCT ';        }        $sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }        $wheres = array();        if (isset($where_clause) && is_array($where_clause)         && count($where_clause) > 0) {            $wheres[] = '(' . implode(') OR (', $where_clause) . ')';        }        if (!empty($analyzed_sql[0]['where_clause'])) {            $wheres[] = $analyzed_sql[0]['where_clause'];        }        if (count($wheres) > 0) {            $sql_query .= ' WHERE (' . implode(') AND (', $wheres) . ')';        }        if (!empty($analyzed_sql[0]['group_by_clause'])) {            $sql_query .= ' GROUP BY ' . $analyzed_sql[0]['group_by_clause'];        }        if (!empty($analyzed_sql[0]['having_clause'])) {            $sql_query .= ' HAVING ' . $analyzed_sql[0]['having_clause'];        }        if (!empty($analyzed_sql[0]['order_by_clause'])) {            $sql_query .= ' ORDER BY ' . $analyzed_sql[0]['order_by_clause'];        }    } else {        // Just crop LIMIT clause        $sql_query = $analyzed_sql[0]['section_before_limit'] . $analyzed_sql[0]['section_after_limit'];    }    $message = PMA_Message::success();}/** * Displays top menu links */require './libraries/tbl_links.inc.php';$export_type = 'table';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * @todo make use of PMA_Message and PMA_Error * @package PhpMyAdmin */class PMA_Table{    /**     * UI preferences properties     */    const PROP_SORTED_COLUMN = 'sorted_col';    const PROP_COLUMN_ORDER = 'col_order';    const PROP_COLUMN_VISIB = 'col_visib';    static $cache = array();    /**     * @var string  table name     */    var $name = '';    /**     * @var string  database name     */    var $db_name = '';    /**     * @var string  engine (innodb, myisam, bdb, ...)     */    var $engine = '';    /**     * @var string  type (view, base table, system view)     */    var $type = '';    /**     * @var array   settings     */    var $settings = array();    /**     * @var array UI preferences     */    var $uiprefs;    /**     * @var array errors occured     */    var $errors = array();    /**     * @var array messages     */    var $messages = array();    /**     * Constructor     *     * @param string $table_name table name     * @param string $db_name    database name     */    function __construct($table_name, $db_name)    {        $this->setName($table_name);        $this->setDbName($db_name);    }    /**     * returns table name     *     * @see PMA_Table::getName()     * @return  string  table name     */    function __toString()    {        return $this->getName();    }    /**     * return the last error     *     * @return the last error     */    function getLastError()    {        return end($this->errors);    }    /**     * return the last message     *     * @return the last message     */    function getLastMessage()    {        return end($this->messages);    }    /**     * sets table name     *     * @param string $table_name new table name     *     * @return nothing     */    function setName($table_name)    {        $this->name = $table_name;    }    /**     * returns table name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  table name     */    function getName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->name);        }        return $this->name;    }    /**     * sets database name for this table     *     * @param string $db_name database name     *     * @return nothing     */    function setDbName($db_name)    {        $this->db_name = $db_name;    }    /**     * returns database name for this table     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  database name for this table     */    function getDbName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->db_name);        }        return $this->db_name;    }    /**     * returns full name for table, including database name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return string     */    function getFullName($backquoted = false)    {        return $this->getDbName($backquoted) . '.' . $this->getName($backquoted);    }    /**     * returns whether the table is actually a view     *     * @param string $db    database     * @param string $table table     *     * @return whether the given is a view     */    static public function isView($db = null, $table = null)    {        if (empty($db) || empty($table)) {            return false;        }        // use cached data or load information with SHOW command        if (isset(PMA_Table::$cache[$db][$table]) || $GLOBALS['cfg']['Server']['DisableIS']) {            $type = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_TYPE');            return $type == 'VIEW';        }        // query information_schema        $result = PMA_DBI_fetch_result(            "SELECT TABLE_NAME            FROM information_schema.VIEWS            WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'");        return $result ? true : false;    }    /**     * sets given $value for given $param     *     * @param string $param name     * @param mixed  $value value     *     * @return nothing     */    function set($param, $value)    {        $this->settings[$param] = $value;    }    /**     * returns value for given setting/param     *     * @param string $param name for value to return     *     * @return  mixed   value for $param     */    function get($param)    {        if (isset($this->settings[$param])) {            return $this->settings[$param];        }        return null;    }    /**     * loads structure data     * (this function is work in progress? not yet used)     *     * @return boolean     */    function loadStructure()    {        $table_info = PMA_DBI_get_tables_full($this->getDbName(), $this->getName());        if (false === $table_info) {            return false;        }        $this->settings = $table_info;        if ($this->get('TABLE_ROWS') === null) {            $this->set(                'TABLE_ROWS',                PMA_Table::countRecords($this->getDbName(), $this->getName(), true)            );        }        $create_options = explode(' ', $this->get('TABLE_ROWS'));        // export create options by its name as variables into gloabel namespace        // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'        foreach ($create_options as $each_create_option) {            $each_create_option = explode('=', $each_create_option);            if (isset($each_create_option[1])) {                $this->set($$each_create_option[0], $each_create_option[1]);            }        }        return true;    }    /**     * Checks if this is a merge table     *     * If the ENGINE of the table is MERGE or MRG_MYISAM (alias),     * this is a merge table.     *     * @param string $db    the database name     * @param string $table the table name     *     * @return  boolean  true if it is a merge table     */    static public function isMerge($db = null, $table = null)    {        $engine = null;        // if called static, with parameters        if (! empty($db) && ! empty($table)) {            $engine = PMA_Table::sGetStatusInfo($db, $table, 'ENGINE', null, true);        }        return (! empty($engine) && ((strtoupper($engine) == 'MERGE') || (strtoupper($engine) == 'MRG_MYISAM')));    }    static public function sGetToolTip($db, $table)    {        return PMA_Table::sGetStatusInfo($db, $table, 'Comment')            . ' (' . PMA_Table::countRecords($db, $table) . ')';    }    /**     * Returns full table status info, or specific if $info provided     * this info is collected from information_schema     *     * @param string  $db            database name     * @param string  $table         table name     * @param string  $info     * @param boolean $force_read    read new rather than serving from cache     * @param boolean $disable_error if true, disables error message     *     * @todo PMA_DBI_get_tables_full needs to be merged somehow into this class     * or at least better documented     *     * @return mixed     */    static public function sGetStatusInfo($db, $table, $info = null, $force_read = false, $disable_error = false)    {        if (! isset(PMA_Table::$cache[$db][$table]) || $force_read) {            PMA_DBI_get_tables_full($db, $table);        }        if (! isset(PMA_Table::$cache[$db][$table])) {            // happens when we enter the table creation dialog            // or when we really did not get any status info, for example            // when $table == 'TABLE_NAMES' after the user tried SHOW TABLES            return '';        }        if (null === $info) {            return PMA_Table::$cache[$db][$table];        }        // array_key_exists allows for null values        if (!array_key_exists($info, PMA_Table::$cache[$db][$table])) {            if (! $disable_error) {                trigger_error(__('unknown table status: ') . $info, E_USER_WARNING);            }            return false;        }        return PMA_Table::$cache[$db][$table][$info];    }    /**     * generates column specification for ALTER or CREATE TABLE syntax     *     * @param string      $name           name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     *     * @todo    move into class PMA_Column     * @todo on the interface, some js to clear the default value when the default     * current_timestamp is checked     *     * @return  string  field specification     */    static function generateFieldSpec($name, $type, $length = '', $attribute = '',        $collation = '', $null = false, $default_type = 'USER_DEFINED',        $default_value = '', $extra = '', $comment = '',        &$field_primary, $index)    {        $is_timestamp = strpos(strtoupper($type), 'TIMESTAMP') !== false;        $query = PMA_backquote($name) . ' ' . $type;        if ($length != ''            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|'                . 'MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN|UUID)$@i', $type)) {            $query .= '(' . $length . ')';        }        if ($attribute != '') {            $query .= ' ' . $attribute;        }        if (! empty($collation) && $collation != 'NULL'            && preg_match('@^(TINYTEXT|TEXT|MEDIUMTEXT|LONGTEXT|VARCHAR|CHAR|ENUM|SET)$@i', $type)        ) {            $query .= PMA_generateCharsetQueryPart($collation);        }        if ($null !== false) {            if ($null == 'NULL') {                $query .= ' NULL';            } else {                $query .= ' NOT NULL';            }        }        switch ($default_type) {        case 'USER_DEFINED' :            if ($is_timestamp && $default_value === '0') {                // a TIMESTAMP does not accept DEFAULT '0'                // but DEFAULT 0 works                $query .= ' DEFAULT 0';            } elseif ($type == 'BIT') {                $query .= ' DEFAULT b\''                        . preg_replace('/[^01]/', '0', $default_value)                        . '\'';            } elseif ($type == 'BOOLEAN') {                if (preg_match('/^1|T|TRUE|YES$/i', $default_value)) {                    $query .= ' DEFAULT TRUE';                } elseif (preg_match('/^0|F|FALSE|NO$/i', $default_value)) {                    $query .= ' DEFAULT FALSE';                } else {                    // Invalid BOOLEAN value                    $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';                }            } else {                $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';            }            break;        case 'NULL' :        case 'CURRENT_TIMESTAMP' :            $query .= ' DEFAULT ' . $default_type;            break;        case 'NONE' :        default :            break;        }        if (!empty($extra)) {            $query .= ' ' . $extra;            // Force an auto_increment field to be part of the primary key            // even if user did not tick the PK box;            if ($extra == 'AUTO_INCREMENT') {                $primary_cnt = count($field_primary);                if (1 == $primary_cnt) {                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            break;                        }                    }                    if (isset($field_primary[$j]) && $field_primary[$j] == $index) {                        $query .= ' PRIMARY KEY';                        unset($field_primary[$j]);                    }                } else {                    // but the PK could contain other columns so do not append                    // a PRIMARY KEY clause, just add a member to $field_primary                    $found_in_pk = false;                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            $found_in_pk = true;                            break;                        }                    } // end for                    if (! $found_in_pk) {                        $field_primary[] = $index;                    }                }            } // end if (auto_increment)        }        if (!empty($comment)) {            $query .= " COMMENT '" . PMA_sqlAddSlashes($comment) . "'";        }        return $query;    } // end function    /**     * Counts and returns (or displays) the number of records in a table     *     * Revision 13 July 2001: Patch for limiting dump size from     * vinay@sanisoft.com & girish@sanisoft.com     *     * @param string $db          the current database name     * @param string $table       the current table name     * @param bool   $force_exact whether to force an exact count     * @param bool   $is_view     whether the table is a view     *     * @return mixed the number of records if "retain" param is true,     *               otherwise true     */    static public function countRecords($db, $table, $force_exact = false, $is_view = null)    {        if (isset(PMA_Table::$cache[$db][$table]['ExactRows'])) {            $row_count = PMA_Table::$cache[$db][$table]['ExactRows'];        } else {            $row_count = false;            if (null === $is_view) {                $is_view = PMA_Table::isView($db, $table);            }            if (! $force_exact) {                if (! isset(PMA_Table::$cache[$db][$table]['Rows']) && ! $is_view) {                    $tmp_tables = PMA_DBI_get_tables_full($db, $table);                    if (isset($tmp_tables[$table])) {                        PMA_Table::$cache[$db][$table] = $tmp_tables[$table];                    }                }                if (isset(PMA_Table::$cache[$db][$table]['Rows'])) {                    $row_count = PMA_Table::$cache[$db][$table]['Rows'];                } else {                    $row_count = false;                }            }            // for a VIEW, $row_count is always false at this point            if (false === $row_count || $row_count < $GLOBALS['cfg']['MaxExactCount']) {                // Make an exception for views in I_S and D_D schema in Drizzle, as these map to                // in-memory data and should execute fast enough                if (! $is_view || (PMA_DRIZZLE && PMA_is_system_schema($db))) {                    $row_count = PMA_DBI_fetch_value(                        'SELECT COUNT(*) FROM ' . PMA_backquote($db) . '.'                        . PMA_backquote($table)                    );                } else {                    // For complex views, even trying to get a partial record                    // count could bring down a server, so we offer an                    // alternative: setting MaxExactCountViews to 0 will bypass                    // completely the record counting for views                    if ($GLOBALS['cfg']['MaxExactCountViews'] == 0) {                        $row_count = 0;                    } else {                        // Counting all rows of a VIEW could be too long, so use                        // a LIMIT clause.                        // Use try_query because it can fail (when a VIEW is                        // based on a table that no longer exists)                        $result = PMA_DBI_try_query(                            'SELECT 1 FROM ' . PMA_backquote($db) . '.'                            . PMA_backquote($table) . ' LIMIT '                            . $GLOBALS['cfg']['MaxExactCountViews'],                            null,                            PMA_DBI_QUERY_STORE                        );                        if (!PMA_DBI_getError()) {                            $row_count = PMA_DBI_num_rows($result);                            PMA_DBI_free_result($result);                        }                    }                }                PMA_Table::$cache[$db][$table]['ExactRows'] = $row_count;            }        }        return $row_count;    } // end of the 'PMA_Table::countRecords()' function    /**     * Generates column specification for ALTER syntax     *     * @param string      $oldcol         old column name     * @param string      $newcol         new column name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     * @param mixed       $default_orig     *     * @see PMA_Table::generateFieldSpec()     *     * @return  string  field specification     */    static public function generateAlter($oldcol, $newcol, $type, $length,        $attribute, $collation, $null, $default_type, $default_value,        $extra, $comment = '', &$field_primary, $index, $default_orig)    {        return PMA_backquote($oldcol) . ' '            . PMA_Table::generateFieldSpec(                $newcol, $type, $length, $attribute,                $collation, $null, $default_type, $default_value, $extra,                $comment, $field_primary, $index, $default_orig            );    } // end function    /**     * Inserts existing entries in a PMA_* table by reading a value from an old entry     *     * @param string $work         The array index, which Relation feature to check     *                             ('relwork', 'commwork', ...)     * @param string $pma_table    The array index, which PMA-table to update     *                             ('bookmark', 'relation', ...)     * @param array  $get_fields   Which fields will be SELECT'ed from the old entry     * @param array  $where_fields Which fields will be used for the WHERE query     *                             (array('FIELDNAME' => 'FIELDVALUE'))     * @param array  $new_fields   Which fields will be used as new VALUES. These are     *                             the important keys which differ from the old entry     *                             (array('FIELDNAME' => 'NEW FIELDVALUE'))     *     * @global relation variable     *     * @return int|true     */    static public function duplicateInfo($work, $pma_table, $get_fields, $where_fields, $new_fields)    {        $last_id = -1;        if (isset($GLOBALS['cfgRelation']) && $GLOBALS['cfgRelation'][$work]) {            $select_parts = array();            $row_fields = array();            foreach ($get_fields as $get_field) {                $select_parts[] = PMA_backquote($get_field);                $row_fields[$get_field] = 'cc';            }            $where_parts = array();            foreach ($where_fields as $_where => $_value) {                $where_parts[] = PMA_backquote($_where) . ' = \''                    . PMA_sqlAddSlashes($_value) . '\'';            }            $new_parts = array();            $new_value_parts = array();            foreach ($new_fields as $_where => $_value) {                $new_parts[] = PMA_backquote($_where);                $new_value_parts[] = PMA_sqlAddSlashes($_value);            }            $table_copy_query = '                SELECT ' . implode(', ', $select_parts) . '                  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                  . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                 WHERE ' . implode(' AND ', $where_parts);            // must use PMA_DBI_QUERY_STORE here, since we execute another            // query inside the loop            $table_copy_rs = PMA_query_as_controluser(                $table_copy_query, true, PMA_DBI_QUERY_STORE            );            while ($table_copy_row = @PMA_DBI_fetch_assoc($table_copy_rs)) {                $value_parts = array();                foreach ($table_copy_row as $_key => $_val) {                    if (isset($row_fields[$_key]) && $row_fields[$_key] == 'cc') {                        $value_parts[] = PMA_sqlAddSlashes($_val);                    }                }                $new_table_query = 'INSERT IGNORE INTO '                    . PMA_backquote($GLOBALS['cfgRelation']['db'])                    . '.' . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                    (' . implode(', ', $select_parts) . ',                     ' . implode(', ', $new_parts) . ')                    VALUES                    (\'' . implode('\', \'', $value_parts) . '\',                     \'' . implode('\', \'', $new_value_parts) . '\')';                PMA_query_as_controluser($new_table_query);                $last_id = PMA_DBI_insert_id();            } // end while            PMA_DBI_free_result($table_copy_rs);            return $last_id;        }        return true;    } // end of 'PMA_Table::duplicateInfo()' function    /**     * Copies or renames table     *     * @param string $source_db    source database     * @param string $source_table source table     * @param string $target_db    target database     * @param string $target_table target table     * @param string $what         what to be moved or copied (data, dataonly)     * @param bool   $move         whether to move     * @param string $mode         mode     *     * @return bool true if success, false otherwise     */    static public function moveCopy($source_db, $source_table, $target_db, $target_table, $what, $move, $mode)    {        global $err_url;        /* Try moving table directly */        if ($move && $what == 'data') {            $tbl = new PMA_Table($source_table, $source_db);            $result = $tbl->rename(                $target_table, $target_db,                PMA_Table::isView($source_db, $source_table)            );            if ($result) {                $GLOBALS['message'] = $tbl->getLastMessage();                return true;            }        }        // set export settings we need        $GLOBALS['sql_backquotes'] = 1;        $GLOBALS['asfile']         = 1;        // Ensure the target is valid        if (! $GLOBALS['pma']->databases->exists($source_db, $target_db)) {            if (! $GLOBALS['pma']->databases->exists($source_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'source database `' . htmlspecialchars($source_db) . '` not found'                );            }            if (! $GLOBALS['pma']->databases->exists($target_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'target database `' . htmlspecialchars($target_db) . '` not found'                );            }            return false;        }        $source = PMA_backquote($source_db) . '.' . PMA_backquote($source_table);        if (! isset($target_db) || ! strlen($target_db)) {            $target_db = $source_db;        }        // Doing a select_db could avoid some problems with replicated databases,        // when moving table from replicated one to not replicated one        PMA_DBI_select_db($target_db);        $target = PMA_backquote($target_db) . '.' . PMA_backquote($target_table);        // do not create the table if dataonly        if ($what != 'dataonly') {            include_once './libraries/export/sql.php';            $no_constraints_comments = true;            $GLOBALS['sql_constraints_query'] = '';            $sql_structure = PMA_getTableDef(                $source_db, $source_table, "\n", $err_url, false, false            );            unset($no_constraints_comments);            $parsed_sql =  PMA_SQP_parse($sql_structure);            $analyzed_sql = PMA_SQP_analyze($parsed_sql);            $i = 0;            if (empty($analyzed_sql[0]['create_table_fields'])) {                // this is not a CREATE TABLE, so find the first VIEW                $target_for_view = PMA_backquote($target_db);                while (true) {                    if ($parsed_sql[$i]['type'] == 'alpha_reservedWord'                        && $parsed_sql[$i]['data'] == 'VIEW'                    ) {                        break;                    }                    $i++;                }            }            unset($analyzed_sql);            if (PMA_DRIZZLE) {                $table_delimiter = 'quote_backtick';            } else {                $server_sql_mode = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'sql_mode'", 0, 1);                // ANSI_QUOTES might be a subset of sql_mode, for example                // REAL_AS_FLOAT,PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ANSI                if (false !== strpos($server_sql_mode, 'ANSI_QUOTES')) {                    $table_delimiter = 'quote_double';                } else {                    $table_delimiter = 'quote_backtick';                }                unset($server_sql_mode);            }            /* Find table name in query and replace it */            while ($parsed_sql[$i]['type'] != $table_delimiter) {                $i++;            }            /* no need to PMA_backquote() */            if (isset($target_for_view)) {                // this a view definition; we just found the first db name                // that follows DEFINER VIEW                // so change it for the new db name                        $parsed_sql[$i]['data'] = $target_for_view;                // then we have to find all references to the source db                // and change them to the target db, ensuring we stay into                // the $parsed_sql limits                $last = $parsed_sql['len'] - 1;                $backquoted_source_db = PMA_backquote($source_db);                for (++$i; $i <= $last; $i++) {                    if ($parsed_sql[$i]['type'] == $table_delimiter                        && $parsed_sql[$i]['data'] == $backquoted_source_db                    ) {                        $parsed_sql[$i]['data'] = $target_for_view;                    }                }                unset($last,$backquoted_source_db);            } else {                $parsed_sql[$i]['data'] = $target;            }            /* Generate query back */            $sql_structure = PMA_SQP_formatHtml($parsed_sql, 'query_only');            // If table exists, and 'add drop table' is selected: Drop it!            $drop_query = '';            if (isset($GLOBALS['drop_if_exists'])                && $GLOBALS['drop_if_exists'] == 'true'            ) {                if (PMA_Table::isView($target_db, $target_table)) {                    $drop_query = 'DROP VIEW';                } else {                    $drop_query = 'DROP TABLE';                }                $drop_query .= ' IF EXISTS '                    . PMA_backquote($target_db) . '.'                    . PMA_backquote($target_table);                PMA_DBI_query($drop_query);                $GLOBALS['sql_query'] .= "\n" . $drop_query . ';';                // If an existing table gets deleted, maintain any                // entries for the PMA_* tables                $maintain_relations = true;            }            @PMA_DBI_query($sql_structure);            $GLOBALS['sql_query'] .= "\n" . $sql_structure . ';';            if (($move || isset($GLOBALS['add_constraints']))                && !empty($GLOBALS['sql_constraints_query'])            ) {                $parsed_sql =  PMA_SQP_parse($GLOBALS['sql_constraints_query']);                $i = 0;                // find the first $table_delimiter, it must be the source table name                while ($parsed_sql[$i]['type'] != $table_delimiter) {                    $i++;                    // maybe someday we should guard against going over limit                    //if ($i == $parsed_sql['len']) {                    //    break;                    //}                }                // replace it by the target table name, no need to PMA_backquote()                $parsed_sql[$i]['data'] = $target;                // now we must remove all $table_delimiter that follow a CONSTRAINT                // keyword, because a constraint name must be unique in a db                $cnt = $parsed_sql['len'] - 1;                for ($j = $i; $j < $cnt; $j++) {                    if ($parsed_sql[$j]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_sql[$j]['data']) == 'CONSTRAINT'                    ) {                        if ($parsed_sql[$j+1]['type'] == $table_delimiter) {                            $parsed_sql[$j+1]['data'] = '';                        }                    }                }                // Generate query back                $GLOBALS['sql_constraints_query'] = PMA_SQP_formatHtml(                    $parsed_sql, 'query_only'                );                if ($mode == 'one_table') {                    PMA_DBI_query($GLOBALS['sql_constraints_query']);                }                $GLOBALS['sql_query'] .= "\n" . $GLOBALS['sql_constraints_query'];                if ($mode == 'one_table') {                    unset($GLOBALS['sql_constraints_query']);                }            }        } else {            $GLOBALS['sql_query'] = '';        }        // Copy the data unless this is a VIEW        if (($what == 'data' || $what == 'dataonly')            && ! PMA_Table::isView($target_db, $target_table)        ) {            $sql_set_mode = "SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO'";            PMA_DBI_query($sql_set_mode);            $GLOBALS['sql_query'] .= "\n\n" . $sql_set_mode . ';';            $sql_insert_data = 'INSERT INTO ' . $target . ' SELECT * FROM ' . $source;            PMA_DBI_query($sql_insert_data);            $GLOBALS['sql_query']      .= "\n\n" . $sql_insert_data . ';';        }        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        // Drops old table if the user has requested to move it        if ($move) {            // This could avoid some problems with replicated databases, when            // moving table from replicated one to not replicated one            PMA_DBI_select_db($source_db);            if (PMA_Table::isView($source_db, $source_table)) {                $sql_drop_query = 'DROP VIEW';            } else {                $sql_drop_query = 'DROP TABLE';            }            $sql_drop_query .= ' ' . $source;            PMA_DBI_query($sql_drop_query);            // Move old entries from PMA-DBs to new table            if ($GLOBALS['cfgRelation']['commwork']) {                $remove_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                              . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\', '                              . '        db_name    = \'' . PMA_sqlAddSlashes($target_db) . '\''                              . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                              . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($remove_query);                unset($remove_query);            }            // updating bookmarks is not possible since only a single table is moved,            // and not the whole DB.            if ($GLOBALS['cfgRelation']['displaywork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_info'])                                . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\', '                                . '         table_name = \'' . PMA_sqlAddSlashes($target_table) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            if ($GLOBALS['cfgRelation']['relwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     foreign_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         foreign_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND foreign_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     master_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         master_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND master_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            /**             * @todo Can't get moving PDFs the right way. The page numbers             * always get screwed up independently from duplication because the             * numbers do not seem to be stored on a per-database basis. Would             * the author of pdf support please have a look at it?             */            if ($GLOBALS['cfgRelation']['pdfwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                /*                $pdf_query = 'SELECT pdf_page_number '                           . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                           . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($target_db) . '\''                           . ' AND table_name = \'' . PMA_sqlAddSlashes($target_table) . '\'';                $pdf_rs = PMA_query_as_controluser($pdf_query);                while ($pdf_copy_row = PMA_DBI_fetch_assoc($pdf_rs)) {                    $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['pdf_pages'])                                    . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                    . ' AND page_nr = \'' . PMA_sqlAddSlashes($pdf_copy_row['pdf_page_number']) . '\'';                    $tb_rs    = PMA_query_as_controluser($table_query);                    unset($table_query);                    unset($tb_rs);                }                */            }            if ($GLOBALS['cfgRelation']['designerwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            $GLOBALS['sql_query']      .= "\n\n" . $sql_drop_query . ';';            // end if ($move)        } else {            // we are copying            // Create new entries as duplicates from old PMA DBs            if ($what != 'dataonly' && ! isset($maintain_relations)) {                if ($GLOBALS['cfgRelation']['commwork']) {                    // Get all comments and MIME-Types for current table                    $comments_copy_query = 'SELECT                                                column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . '                                            FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                                            WHERE                                                db_name = \'' . PMA_sqlAddSlashes($source_db) . '\' AND                                                table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                    $comments_copy_rs    = PMA_query_as_controluser($comments_copy_query);                    // Write every comment as new copied entry. [MIME]                    while ($comments_copy_row = PMA_DBI_fetch_assoc($comments_copy_rs)) {                        $new_comment_query = 'REPLACE INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                                    . ' (db_name, table_name, column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . ') '                                    . ' VALUES('                                    . '\'' . PMA_sqlAddSlashes($target_db) . '\','                                    . '\'' . PMA_sqlAddSlashes($target_table) . '\','                                    . '\'' . PMA_sqlAddSlashes($comments_copy_row['column_name']) . '\''                                    . ($GLOBALS['cfgRelation']['mimework'] ? ',\'' . PMA_sqlAddSlashes($comments_copy_row['comment']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['mimetype']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation_options']) . '\'' : '')                                    . ')';                        PMA_query_as_controluser($new_comment_query);                    } // end while                    PMA_DBI_free_result($comments_copy_rs);                    unset($comments_copy_rs);                }                // duplicating the bookmarks must not be done here, but                // just once per db                $get_fields = array('display_field');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('displaywork', 'table_info', $get_fields, $where_fields, $new_fields);                /**                 * @todo revise this code when we support cross-db relations                 */                $get_fields = array('master_field', 'foreign_table', 'foreign_field');                $where_fields = array('master_db' => $source_db, 'master_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'master_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('foreign_field', 'master_table', 'master_field');                $where_fields = array('foreign_db' => $source_db, 'foreign_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'foreign_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('x', 'y', 'v', 'h');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('designerwork', 'designer_coords', $get_fields, $where_fields, $new_fields);                /**                 * @todo Can't get duplicating PDFs the right way. The                 * page numbers always get screwed up independently from                 * duplication because the numbers do not seem to be stored on a                 * per-database basis. Would the author of pdf support please                 * have a look at it?                 *                $get_fields = array('page_descr');                $where_fields = array('db_name' => $source_db);                $new_fields = array('db_name' => $target_db);                $last_id = PMA_Table::duplicateInfo('pdfwork', 'pdf_pages', $get_fields, $where_fields, $new_fields);                if (isset($last_id) && $last_id >= 0) {                    $get_fields = array('x', 'y');                    $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                    $new_fields = array('db_name' => $target_db, 'table_name' => $target_table, 'pdf_page_number' => $last_id);                    PMA_Table::duplicateInfo('pdfwork', 'table_coords', $get_fields, $where_fields, $new_fields);                }                 */            }        }        return true;    }    /**     * checks if given name is a valid table name,     * currently if not empty, trailing spaces, '.', '/' and '\'     *     * @param string $table_name name to check     *     * @todo add check for valid chars in filename on current system/os     * @see  http://dev.mysql.com/doc/refman/5.0/en/legal-names.html     *     * @return  boolean whether the string is valid or not     */    function isValidName($table_name)    {        if ($table_name !== trim($table_name)) {            // trailing spaces            return false;        }        if (! strlen($table_name)) {            // zero length            return false;        }        if (preg_match('/[.\/\\\\]+/i', $table_name)) {            // illegal char . / \            return false;        }        return true;    }    /**     * renames table     *     * @param string $new_name new table name     * @param string $new_db   new database name     * @param bool   $is_view  is this for a VIEW rename?     * @todo    remove the $is_view parameter (also in callers)     *     * @return bool success     */    function rename($new_name, $new_db = null, $is_view = false)    {        if (null !== $new_db && $new_db !== $this->getDbName()) {            // Ensure the target is valid            if (! $GLOBALS['pma']->databases->exists($new_db)) {                $this->errors[] = __('Invalid database') . ': ' . $new_db;                return false;            }        } else {            $new_db = $this->getDbName();        }        $new_table = new PMA_Table($new_name, $new_db);        if ($this->getFullName() === $new_table->getFullName()) {            return true;        }        if (! PMA_Table::isValidName($new_name)) {            $this->errors[] = __('Invalid table name') . ': ' . $new_table->getFullName();            return false;        }        // If the table is moved to a different database drop its triggers first        $triggers = PMA_DBI_get_triggers($this->getDbName(), $this->getName(), '');        $handle_triggers = $this->getDbName() != $new_db && $triggers;        if ($handle_triggers) {            foreach ($triggers as $trigger) {                $sql = 'DROP TRIGGER IF EXISTS ' . PMA_backquote($this->getDbName()) . '.'                    . PMA_backquote($trigger['name']) . ';';                PMA_DBI_query($sql);            }        }        /*         * tested also for a view, in MySQL 5.0.92, 5.1.55 and 5.5.13         */        $GLOBALS['sql_query'] = '            RENAME TABLE ' . $this->getFullName(true) . '                  TO ' . $new_table->getFullName(true) . ';';        // I don't think a specific error message for views is necessary        if (! PMA_DBI_query($GLOBALS['sql_query'])) {            // Restore triggers in the old database            if ($handle_triggers) {                PMA_DBI_select_db($this->getDbName());                foreach ($triggers as $trigger) {                    PMA_DBI_query($trigger['create']);                }            }            $this->errors[] = sprintf(                __('Error renaming table %1$s to %2$s'),                $this->getFullName(),                $new_table->getFullName()            );            return false;        }        $old_name = $this->getName();        $old_db = $this->getDbName();        $this->setName($new_name);        $this->setDbName($new_db);        /**         * @todo move into extra function PMA_Relation::renameTable($new_name, $old_name, $new_db, $old_db)         */        // Move old entries from comments to new table        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        if ($GLOBALS['cfgRelation']['commwork']) {            $remove_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($remove_query);            unset($remove_query);        }        if ($GLOBALS['cfgRelation']['displaywork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['relwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `foreign_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `foreign_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `foreign_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `foreign_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `master_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `master_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `master_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `master_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['pdfwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['designerwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        $this->messages[] = sprintf(            __('Table %s has been renamed to %s'),            htmlspecialchars($old_name),            htmlspecialchars($new_name)        );        return true;    }    /**     * Get all unique columns     *     * returns an array with all columns with unqiue content, in fact these are     * all columns being single indexed in PRIMARY or UNIQUE     *     * e.g.     *  - PRIMARY(id) // id     *  - UNIQUE(name) // name     *  - PRIMARY(fk_id1, fk_id2) // NONE     *  - UNIQUE(x,y) // NONE     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getUniqueColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Non_unique = 0');        $uniques = PMA_DBI_fetch_result($sql, array('Key_name', null), 'Column_name');        $return = array();        foreach ($uniques as $index) {            if (count($index) > 1) {                continue;            }            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($index[0]) : $index[0]);        }        return $return;    }    /**     * Get all indexed columns     *     * returns an array with all columns make use of an index, in fact only     * first columns in an index     *     * e.g. index(col1, col2) would only return col1     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getIndexedColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Seq_in_index = 1');        $indexed = PMA_DBI_fetch_result($sql, 'Column_name', 'Column_name');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Get all columns     *     * returns an array with all columns     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getColumns($backquoted = true)    {        $sql = 'SHOW COLUMNS FROM ' . $this->getFullName(true);        $indexed = PMA_DBI_fetch_result($sql, 'Field', 'Field');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Return UI preferences for this table from phpMyAdmin database.     *     * @return array     */    protected function getUiPrefsFromDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                     PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        // Read from phpMyAdmin database        $sql_query = " SELECT `prefs` FROM " . $pma_table            . " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'"            . " AND `db_name` = '" . PMA_sqlAddSlashes($this->db_name) . "'"            . " AND `table_name` = '" . PMA_sqlAddSlashes($this->name) . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save this table's UI preferences into phpMyAdmin database.     *     * @return true|PMA_Message     */    protected function saveUiPrefsToDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "."            . PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query = " REPLACE INTO " . $pma_table            . " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes($this->db_name)            . "', '" . PMA_sqlAddSlashes($this->name) . "', '"            . PMA_sqlAddSlashes(json_encode($this->uiprefs)) . "', NULL)";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save table UI preferences'));            $message->addMessage('<br /><br />');            $message->addMessage(                PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink']))            );            return $message;        }        // Remove some old rows in table_uiprefs if it exceeds the configured maximum rows        $sql_query = 'SELECT COUNT(*) FROM ' . $pma_table;        $rows_count = PMA_DBI_fetch_value($sql_query);        $max_rows = $GLOBALS['cfg']['Server']['MaxTableUiprefs'];        if ($rows_count > $max_rows) {            $num_rows_to_delete = $rows_count - $max_rows;            $sql_query                = ' DELETE FROM ' . $pma_table .                ' ORDER BY last_update ASC' .                ' LIMIT ' . $num_rows_to_delete;            $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);            if (!$success) {                $message = PMA_Message::error(                    sprintf(                        __('Failed to cleanup table UI preferences (see $cfg[\'Servers\'][$i][\'MaxTableUiprefs\'] %s)'),                        PMA_showDocu('cfg_Servers_MaxTableUiprefs')                    )                );                $message->addMessage('<br /><br />');                $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));                print_r($message);                return $message;            }        }        return true;    }    /**     * Loads the UI preferences for this table.     * If pmadb and table_uiprefs is set, it will load the UI preferences from     * phpMyAdmin database.     *     * @return nothing     */    protected function loadUiPrefs()    {        $server_id = $GLOBALS['server'];        // set session variable if it's still undefined        if (! isset($_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name])) {            $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name] =                // check whether we can get from pmadb                (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs']))                    ?  $this->getUiPrefsFromDb()                    : array();        }        $this->uiprefs =& $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name];    }    /**     * Get a property from UI preferences.     * Return false if the property is not found.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property property     *     * @return mixed     */    public function getUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // do checking based on property        if ($property == self::PROP_SORTED_COLUMN) {            if (isset($this->uiprefs[$property])) {                // check if the column name is exist in this table                $tmp = explode(' ', $this->uiprefs[$property]);                $colname = $tmp[0];                $avail_columns = $this->getColumns();                foreach ($avail_columns as $each_col) {                    // check if $each_col ends with $colname                    if (substr_compare($each_col, $colname, strlen($each_col) - strlen($colname)) === 0) {                        return $this->uiprefs[$property];                    }                }                // remove the property, since it is not exist anymore in database                $this->removeUiProp(self::PROP_SORTED_COLUMN);                return false;            } else {                return false;            }        } elseif ($property == self::PROP_COLUMN_ORDER            || $property == self::PROP_COLUMN_VISIB        ) {            if (! PMA_Table::isView($this->db_name, $this->name) && isset($this->uiprefs[$property])) {                // check if the table has not been modified                if (self::sGetStatusInfo($this->db_name, $this->name, 'Create_time') == $this->uiprefs['CREATE_TIME']) {                    return $this->uiprefs[$property];                } else {                    // remove the property, since the table has been modified                    $this->removeUiProp(self::PROP_COLUMN_ORDER);                    return false;                }            } else {                return false;            }        }        // default behaviour for other property:        return isset($this->uiprefs[$property]) ? $this->uiprefs[$property] : false;    }    /**     * Set a property from UI preferences.     * If pmadb and table_uiprefs is set, it will save the UI preferences to     * phpMyAdmin database.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property          Property     * @param mixed  $value             Value for the property     * @param string $table_create_time Needed for PROP_COLUMN_ORDER and PROP_COLUMN_VISIB     *     * @return boolean|PMA_Message     */    public function setUiProp($property, $value, $table_create_time = null)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // we want to save the create time if the property is PROP_COLUMN_ORDER        if (! PMA_Table::isView($this->db_name, $this->name)            && ($property == self::PROP_COLUMN_ORDER || $property == self::PROP_COLUMN_VISIB)        ) {            $curr_create_time = self::sGetStatusInfo($this->db_name, $this->name, 'CREATE_TIME');            if (isset($table_create_time)                && $table_create_time == $curr_create_time            ) {                $this->uiprefs['CREATE_TIME'] = $curr_create_time;            } else {                // there is no $table_create_time, or                // supplied $table_create_time is older than current create time,                // so don't save                return PMA_Message::error(sprintf(                    __('Cannot save UI property "%s". The changes made will not be persistent after you refresh this page. Please check if the table structure has been changed.'), $property));            }        }        // save the value        $this->uiprefs[$property] = $value;        // check if pmadb is set        if (strlen($GLOBALS['cfg']['Server']['pmadb'])            && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])        ) {            return $this->saveUiprefsToDb();        }        return true;    }    /**     * Remove a property from UI preferences.     *     * @param string $property the property     *     * @return true|PMA_Message     */    public function removeUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        if (isset($this->uiprefs[$property])) {            unset($this->uiprefs[$property]);            // check if pmadb is set            if (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])            ) {                return $this->saveUiprefsToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Text dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODT */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['odt'] = array(        'text' => __('Open Document Text'),        'extension' => 'odt',        'mime_type' => 'application/vnd.oasis.opendocument.text',        'force_file' => true,        'options' => array(), /* Filled later */        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'text' => __('Dump table') , 'name' => 'general_opts');    $plugin_list['odt']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['odt']['options'][] = array('type' => 'end_group');    /* Structure options */    if (!$hide_structure) {        $plugin_list['odt']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['odt']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['odt']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['odt']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['odt']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['odt']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['odt']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['odt']['options'][]        = array('type' => 'end_group');} else {    $GLOBALS['odt_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportFooter()    {        $GLOBALS['odt_buffer'] .= '</office:text>'            . '</office:body>'            . '</office:document-content>';        if (! PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.text', $GLOBALS['odt_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        $GLOBALS['odt_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:body>'            . '<office:text>';        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="1" text:style-name="Heading_1" text:is-list-header="true">'            . __('Database') . ' ' . htmlspecialchars($db) . '</text:h>';        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in ODT format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</text:h>';        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_structure">';        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $fields_cnt . '"/>';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['odt_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    }    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /* Heading */        $GLOBALS['odt_buffer'] .= '<text:h text:outline-level="2" text:style-name="Heading_2" text:is-list-header="true">'            . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</text:h>';        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $GLOBALS['odt_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '_data">';        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $GLOBALS['odt_buffer'] .= '<table:table-column table:number-columns-repeated="' . $columns_cnt . '"/>';        /* Header */        $GLOBALS['odt_buffer'] .= '<table:table-row>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Column') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Type') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Null') . '</text:p>'            . '</table:table-cell>';        $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'            . '<text:p>' . __('Default') . '</text:p>'            . '</table:table-cell>';        if ($do_relation && $have_rel) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Links to') . '</text:p>'                . '</table:table-cell>';        }        if ($do_comments) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('Comments') . '</text:p>'                . '</table:table-cell>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . __('MIME type') . '</text:p>'                . '</table:table-cell>';            $mime_map = PMA_getMIME($db, $table, true);        }        $GLOBALS['odt_buffer'] .= '</table:table-row>';        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $field_name = $column['Field'];            $GLOBALS['odt_buffer'] .= '<table:table-row>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($field_name) . '</text:p>'                . '</table:table-cell>';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($type) . '</text:p>'                . '</table:table-cell>';            if (!isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                } else {                    $column['Default'] = '';                }            } else {                $column['Default'] = $column['Default'];            }            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</text:p>'                . '</table:table-cell>';            $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                . '<text:p>' . htmlspecialchars($column['Default']) . '</text:p>'                . '</table:table-cell>';            if ($do_relation && $have_rel) {                if (isset($res_rel[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') . '</text:p>'                        . '</table:table-cell>';                }            }            if ($do_comments) {                if (isset($comments[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($comments[$field_name]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            if ($do_mime && $cfgRelation['mimework']) {                if (isset($mime_map[$field_name])) {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['odt_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                }            }            $GLOBALS['odt_buffer'] .= '</table:table-row>';        } // end while        $GLOBALS['odt_buffer'] .= '</table:table>';        return true;    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library grabs the names and values of the variables sent or posted to a * script in $_GET, $_POST and $_FILES superglobals and sets simple globals * variables from them. It does the same work for $HTTP_ACCEPT_LANGUAGE and * $HTTP_AUTHORIZATION. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * copy values from one array to another, usually from a superglobal into $GLOBALS * * @param array   $array      values from * @param array   &$target    values to * @param bool    $sanitize   prevent importing key names in $_import_blacklist * @return bool */function PMA_recursive_extract($array, &$target, $sanitize = true){    if (! is_array($array)) {        return false;    }    if ($sanitize) {        $valid_variables = preg_replace($GLOBALS['_import_blacklist'], '',            array_keys($array));        $valid_variables = array_unique($valid_variables);    } else {        $valid_variables = array_keys($array);    }    foreach ($valid_variables as $key) {        if (strlen($key) === 0) {            continue;        }        if (is_array($array[$key])) {            // there could be a variable coming from a cookie of            // another application, with the same name as this array            unset($target[$key]);            PMA_recursive_extract($array[$key], $target[$key], false);        } else {            $target[$key] = $array[$key];        }    }    return true;}/** * @var array $_import_blacklist variable names that should NEVER be imported *                              from superglobals */$_import_blacklist = array(    '/^cfg$/i',         // PMA configuration    '/^server$/i',      // selected server    '/^db$/i',          // page to display    '/^table$/i',       // page to display    '/^goto$/i',        // page to display    '/^back$/i',        // the page go back    '/^lang$/i',        // selected language    '/^collation_connection$/i', //    '/^set_theme$/i',   //    '/^sql_query$/i',   // the query to be executed    '/^GLOBALS$/i',     // the global scope    '/^str.*$/i',       // PMA localized strings    '/^error_handler.*$/i',       // the error handler    '/^_.*$/i',         // PMA does not use variables starting with _ from extern    '/^.*\s+.*$/i',     // no whitespaces anywhere    '/^[0-9]+.*$/i',    // numeric variable names    //'/^PMA_.*$/i',      // other PMA variables);if (! empty($_GET)) {    PMA_recursive_extract($_GET, $GLOBALS);}if (! empty($_POST)) {    PMA_recursive_extract($_POST, $GLOBALS);}if (! empty($_FILES)) {    $_valid_variables = preg_replace($GLOBALS['_import_blacklist'], '', array_keys($_FILES));    foreach ($_valid_variables as $name) {        if (strlen($name) != 0) {            $$name = $_FILES[$name]['tmp_name'];            ${$name . '_name'} = $_FILES[$name]['name'];        }    }    unset($name, $value);}/** * globalize some environment variables */$server_vars = array('HTTP_ACCEPT_LANGUAGE', 'HTTP_AUTHORIZATION');foreach ($server_vars as $current) {    // it's not important HOW we detect html tags    // it's more important to prevent XSS    // so it's not important if we result in an invalid string,    // it's even better than a XSS capable string    if (PMA_getenv($current) && false === strpos(PMA_getenv($current), '<')) {        $$current = PMA_getenv($current);    // already imported by register_globals?    } elseif (! isset($$current) || false !== strpos($$current, '<')) {        $$current = '';    }}unset($server_vars, $current, $_import_blacklist);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for routine management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_RTN_setGlobals(){    global $param_directions, $param_opts_num, $param_sqldataaccess;    $param_directions    = array('IN',                                 'OUT',                                 'INOUT');    $param_opts_num      = array('UNSIGNED',                                 'ZEROFILL',                                 'UNSIGNED ZEROFILL');    $param_sqldataaccess = array('NO SQL',                                 'CONTAINS SQL',                                 'READS SQL DATA',                                 'MODIFIES SQL DATA');}/** * Main function for the routines functionality */function PMA_RTN_main(){    global $db;    PMA_RTN_setGlobals();    /**     * Process all requests     */    PMA_RTN_handleEditor();    PMA_RTN_handleExecute();    PMA_RTN_handleExport();    /**     * Display a list of available routines     */    $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, ";    $columns .= "`DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";    $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $items    = PMA_DBI_fetch_result(        "SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;"    );    echo PMA_RTE_getList('routine', $items);    /**     * Display the form for adding a new routine, if the user has the privileges.     */    echo PMA_RTN_getFooterLinks();    /**     * Display a warning for users with PHP's old "mysql" extension.     */    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        trigger_error(            __('You are using PHP\'s deprecated \'mysql\' extension, '            . 'which is not capable of handling multi queries. '            . '<b>The execution of some stored routines may fail!</b> '            . 'Please use the improved \'mysqli\' extension to '            . 'avoid any problems.'),            E_USER_WARNING        );    }} // end PMA_RTN_main()/** * This function parses a string containing one parameter of a routine, * as returned by PMA_RTN_parseAllParameters() and returns an array containing * the information about this parameter. * * @param   string  $value    A string containing one parameter of a routine * * @return  array             Parsed information about the input parameter */function PMA_RTN_parseOneParameter($value){    global $param_directions;    $retval = array(0 => '',                    1 => '',                    2 => '',                    3 => '',                    4 => '');    $parsed_param = PMA_SQP_parse($value);    $pos = 0;    if (in_array(strtoupper($parsed_param[$pos]['data']), $param_directions)) {        $retval[0] = strtoupper($parsed_param[0]['data']);        $pos++;    }    if ($parsed_param[$pos]['type'] == 'alpha_identifier'        || $parsed_param[$pos]['type'] == 'quote_backtick'    ) {        $retval[1] = PMA_unQuote($parsed_param[$pos]['data']);        $pos++;    }    $depth = 0;    $param_length = '';    $param_opts = array();    for ($i=$pos; $i<$parsed_param['len']; $i++) {        if (($parsed_param[$i]['type'] == 'alpha_columnType'            || $parsed_param[$i]['type'] == 'alpha_functionName') && $depth == 0 // "CHAR" seems to be mistaken for a function by the parser        ) {            $retval[2] = strtoupper($parsed_param[$i]['data']);        } else if ($parsed_param[$i]['type'] == 'punct_bracket_open_round' && $depth == 0) {            $depth = 1;        } else if ($parsed_param[$i]['type'] == 'punct_bracket_close_round' && $depth == 1) {            $depth = 0;        } else if ($depth == 1) {            $param_length .= $parsed_param[$i]['data'];        } else if ($parsed_param[$i]['type'] == 'alpha_reservedWord' && strtoupper($parsed_param[$i]['data']) == 'CHARSET' && $depth == 0) {            if ($parsed_param[$i+1]['type'] == 'alpha_charset' || $parsed_param[$i+1]['type'] == 'alpha_identifier') {                $param_opts[] = strtolower($parsed_param[$i+1]['data']);            }        } else if ($parsed_param[$i]['type'] == 'alpha_columnAttrib' && $depth == 0) {            $param_opts[] = strtoupper($parsed_param[$i]['data']);        }    }    $retval[3] = $param_length;    sort($param_opts);    $retval[4] = implode(' ', $param_opts);    return $retval;} // end PMA_RTN_parseOneParameter()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's parameters. * * @param   array   $parsed_query  Parsed query, returned by by PMA_SQP_parse() * @param   string  $routine_type  Routine type: 'PROCEDURE' or 'FUNCTION' * * @return  array   Information about the parameteres of a routine. */function PMA_RTN_parseAllParameters($parsed_query, $routine_type){    $retval = array();    $retval['num'] = 0;    // First get the list of parameters from the query    $buffer = '';    $params = array();    $fetching = false;    $depth = 0;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == $routine_type) {            $fetching = true;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_open_round') {            $depth++;            if ($depth > 1) {                $buffer .= $parsed_query[$i]['data'] . ' ';            }        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_close_round') {            $depth--;            if ($depth > 0) {                $buffer .= $parsed_query[$i]['data'] . ' ';            } else {                break;            }        } else if ($parsed_query[$i]['type'] == 'punct_listsep' && $depth == 1) {            $params[] = $buffer;            $retval['num']++;            $buffer = '';        } else if ($fetching == true && $depth > 0) {            $buffer .= $parsed_query[$i]['data'] . ' ';        }    }    if (! empty($buffer)) {        $params[] = $buffer;        $retval['num']++;    }    // Now parse each parameter individually    foreach ($params as $key => $value) {        list($retval['dir'][],             $retval['name'][],             $retval['type'][],             $retval['length'][],             $retval['opts'][]) = PMA_RTN_parseOneParameter($value);    }    // Since some indices of $retval may be still undefined, we fill    // them each with an empty array to avoid E_ALL errors in PHP.    foreach (array('dir', 'name', 'type', 'length', 'opts') as $key => $index) {        if (! isset($retval[$index])) {            $retval[$index] = array();        }    }    return $retval;} // end PMA_RTN_parseAllParameters()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's definer. * * @param   array   $parsed_query   Parsed query, returned by PMA_SQP_parse() * * @return  string  The definer of a routine. */function PMA_RTN_parseRoutineDefiner($parsed_query){    $retval = '';    $fetching = false;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == 'DEFINER') {            $fetching = true;        } else if ($fetching == true && ($parsed_query[$i]['type'] != 'quote_backtick' && substr($parsed_query[$i]['type'], 0, 5) != 'punct')) {            break;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'quote_backtick') {            $retval .= PMA_unQuote($parsed_query[$i]['data']);        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_user') {            $retval .= $parsed_query[$i]['data'];        }    }    return $retval;} // end PMA_RTN_parseRoutineDefiner()/** * Handles editor requests for adding or editing an item */function PMA_RTN_handleEditor(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $errors;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        /**         * Handle a request to create/edit a routine         */        $sql_query = '';        $routine_query = PMA_RTN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                if (! in_array($_REQUEST['item_original_type'], array('PROCEDURE', 'FUNCTION'))) {                    $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_original_type']));                } else {                    // Backup the old routine, in case something goes wrong                    $create_routine = PMA_DBI_get_definition($db, $_REQUEST['item_original_type'], $_REQUEST['item_original_name']);                    $drop_routine = "DROP {$_REQUEST['item_original_type']} " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                    $result = PMA_DBI_try_query($drop_routine);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_routine) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                    } else {                        $result = PMA_DBI_try_query($routine_query);                        if (! $result) {                            $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                            // We dropped the old routine, but were unable to create the new one                            // Try to restore the backup query                            $result = PMA_DBI_try_query($create_routine);                            if (! $result) {                                // OMG, this is really bad! We dropped the query, failed to create a new one                                // and now even the backup query does not execute!                                // This should not happen, but we better handle this just in case.                                $errors[] = __('Sorry, we failed to restore the dropped routine.') . '<br />'                                                  . __('The backed up query was:') . "\"$create_routine\"" . '<br />'                                                  . __('MySQL said: ') . PMA_DBI_getError(null);                            }                        } else {                            $message = PMA_Message::success(__('Routine %1$s has been modified.'));                            $message->addParam(PMA_backquote($_REQUEST['item_name']));                            $sql_query = $drop_routine . $routine_query;                        }                    }                }            } else {                // 'Add a new routine' mode                $result = PMA_DBI_try_query($routine_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Routine %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $routine_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, `DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";                $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                          . "AND ROUTINE_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'"                          . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($_REQUEST['item_type']) . "'";                $routine  = PMA_DBI_fetch_single_row("SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;");                $extra_data['name']    = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_RTN_getRowForList($routine);                $extra_data['insert']  = ! empty($routine);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a routine, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['routine_addparameter']) || ! empty($_REQUEST['routine_removeparameter'])        || ! empty($_REQUEST['routine_changetype']))) // FIXME: this must be simpler than that    ) {        // Handle requests to add/remove parameters and changing routine type        // This is necessary when JS is disabled        $operation = '';        if (! empty($_REQUEST['routine_addparameter'])) {            $operation = 'add';        } else if (! empty($_REQUEST['routine_removeparameter'])) {            $operation = 'remove';        } else if (! empty($_REQUEST['routine_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $routine = PMA_RTN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit routine");            if (! $operation && ! empty($_REQUEST['item_name']) && empty($_REQUEST['editor_process_edit'])) {                $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type']);                if ($routine !== false) {                    $routine['item_original_name'] = $routine['item_name'];                    $routine['item_original_type'] = $routine['item_type'];                }            } else {                $routine = PMA_RTN_getDataFromRequest();            }            $mode = 'edit';        }        if ($routine !== false) {            // Show form            $editor = PMA_RTN_getEditorForm($mode, $operation, $routine);            if ($GLOBALS['is_ajax_request']) {                $template   = PMA_RTN_getParameterRow();                $extra_data = array('title' => $title,                                    'param_template' => $template,                                    'type' => $routine['item_type']);                PMA_ajaxResponse($editor, true, $extra_data);            }            echo "\n\n<h2>$title</h2>\n\n$editor";            include './libraries/footer.inc.php';            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_RTN_handleEditor()/** * This function will generate the values that are required to * complete the editor form. It is especially necessary to handle * the 'Add another parameter', 'Remove last parameter' and * 'Change routine type' functionalities when JS is disabled. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromRequest(){    global $_REQUEST, $param_directions, $param_sqldataaccess;    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_returnlength',                     'item_returnopts_num',                     'item_returnopts_text',                     'item_definition',                     'item_comment',                     'item_definer');    foreach ($indices as $key => $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']         = 'PROCEDURE';    $retval['item_type_toggle']  = 'FUNCTION';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'FUNCTION') {        $retval['item_type']         = 'FUNCTION';        $retval['item_type_toggle']  = 'PROCEDURE';    }    $retval['item_original_type'] = 'PROCEDURE';    if (isset($_REQUEST['item_original_type'])        && $_REQUEST['item_original_type'] == 'FUNCTION'    ) {        $retval['item_original_type'] = 'FUNCTION';    }    $retval['item_num_params']      = 0;    $retval['item_param_dir']       = array();    $retval['item_param_name']      = array();    $retval['item_param_type']      = array();    $retval['item_param_length']    = array();    $retval['item_param_opts_num']  = array();    $retval['item_param_opts_text'] = array();    if (   isset($_REQUEST['item_param_name'])        && isset($_REQUEST['item_param_type'])        && isset($_REQUEST['item_param_length'])        && isset($_REQUEST['item_param_opts_num'])        && isset($_REQUEST['item_param_opts_text'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_opts_num'])        && is_array($_REQUEST['item_param_opts_text'])    ) {        if ($_REQUEST['item_type'] == 'PROCEDURE') {            $retval['item_param_dir'] = $_REQUEST['item_param_dir'];            foreach ($retval['item_param_dir'] as $key => $value) {                if (! in_array($value, $param_directions, true)) {                    $retval['item_param_dir'][$key] = '';                }            }        }        $retval['item_param_name'] = $_REQUEST['item_param_name'];        $retval['item_param_type'] = $_REQUEST['item_param_type'];        foreach ($retval['item_param_type'] as $key => $value) {            if (! in_array($value, PMA_getSupportedDatatypes(), true)) {                $retval['item_param_type'][$key] = '';            }        }        $retval['item_param_length']    = $_REQUEST['item_param_length'];        $retval['item_param_opts_num']  = $_REQUEST['item_param_opts_num'];        $retval['item_param_opts_text'] = $_REQUEST['item_param_opts_text'];        $retval['item_num_params'] = max(            count($retval['item_param_name']),            count($retval['item_param_type']),            count($retval['item_param_length']),            count($retval['item_param_opts_num']),            count($retval['item_param_opts_text'])        );    }    $retval['item_returntype'] = '';    if (isset($_REQUEST['item_returntype'])        && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())    ) {        $retval['item_returntype'] = $_REQUEST['item_returntype'];    }    $retval['item_isdeterministic'] = '';    if (isset($_REQUEST['item_isdeterministic'])        && strtolower($_REQUEST['item_isdeterministic']) == 'on'    ) {        $retval['item_isdeterministic'] = " checked='checked'";    }    $retval['item_securitytype_definer'] = '';    $retval['item_securitytype_invoker'] = '';    if (isset($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] === 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($_REQUEST['item_securitytype'] === 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }    }    $retval['item_sqldataaccess'] = '';    if (isset($_REQUEST['item_sqldataaccess'])        && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess, true)    ) {        $retval['item_sqldataaccess'] = $_REQUEST['item_sqldataaccess'];    }    return $retval;} // end function PMA_RTN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit routine" form given the name of a routine. * * @param   string   $name   The name of the routine. * @param   string   $type   Type of routine (ROUTINE|PROCEDURE) * @param   bool     $all    Whether to return all data or just *                           the info about parameters. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromName($name, $type, $all = true){    global $db;    $retval  = array();    // Build and execute the query    $fields  = "SPECIFIC_NAME, ROUTINE_TYPE, DTD_IDENTIFIER, "             . "ROUTINE_DEFINITION, IS_DETERMINISTIC, SQL_DATA_ACCESS, "             . "ROUTINE_COMMENT, SECURITY_TYPE";    $where   = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND SPECIFIC_NAME='" . PMA_sqlAddSlashes($name) . "'"             . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($type) . "'";    $query   = "SELECT $fields FROM INFORMATION_SCHEMA.ROUTINES WHERE $where;";    $routine = PMA_DBI_fetch_single_row($query);    if (! $routine) {        return false;    }    // Get required data    $retval['item_name'] = $routine['SPECIFIC_NAME'];    $retval['item_type'] = $routine['ROUTINE_TYPE'];    $parsed_query = PMA_SQP_parse(        PMA_DBI_get_definition(            $db,            $routine['ROUTINE_TYPE'],            $routine['SPECIFIC_NAME']        )    );    $params = PMA_RTN_parseAllParameters($parsed_query, $routine['ROUTINE_TYPE']);    $retval['item_num_params']      = $params['num'];    $retval['item_param_dir']       = $params['dir'];    $retval['item_param_name']      = $params['name'];    $retval['item_param_type']      = $params['type'];    $retval['item_param_length']    = $params['length'];    $retval['item_param_opts_num']  = $params['opts'];    $retval['item_param_opts_text'] = $params['opts'];    // Get extra data    if ($all) {        if ($retval['item_type'] == 'FUNCTION') {            $retval['item_type_toggle'] = 'PROCEDURE';        } else {            $retval['item_type_toggle'] = 'FUNCTION';        }        $retval['item_returntype']   = '';        $retval['item_returnlength'] = '';        $retval['item_returnopts_num']  = '';        $retval['item_returnopts_text'] = '';        if (! empty($routine['DTD_IDENTIFIER'])) {            if (strlen($routine['DTD_IDENTIFIER']) > 63) {                // If the DTD_IDENTIFIER string from INFORMATION_SCHEMA is                // at least 64 characters, then it may actually have been                // chopped because that column is a varchar(64), so we will                // parse the output of SHOW CREATE query to get accurate                // information about the return variable.                $dtd = '';                $fetching = false;                for ($i=0; $i<$parsed_query['len']; $i++) {                    if ($parsed_query[$i]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_query[$i]['data']) == 'RETURNS'                    ) {                        $fetching = true;                    } else if ($fetching == true && $parsed_query[$i]['type'] == 'alpha_reservedWord') {                        // We will not be looking for options such as UNSIGNED                        // or ZEROFILL because there is no way that a numeric                        // field's DTD_IDENTIFIER can be longer than 64                        // characters. We can safely assume that the return                        // datatype is either ENUM or SET, so we only look                        // for CHARSET.                        $word = strtoupper($parsed_query[$i]['data']);                        if ($word == 'CHARSET'                            && ($parsed_query[$i+1]['type'] == 'alpha_charset'                            || $parsed_query[$i+1]['type'] == 'alpha_identifier')                        ) {                            $dtd .= $word . ' ' . $parsed_query[$i+1]['data'];                        }                        break;                    } else if ($fetching == true) {                        $dtd .= $parsed_query[$i]['data'] . ' ';                    }                }                $routine['DTD_IDENTIFIER'] = $dtd;            }            $returnparam = PMA_RTN_parseOneParameter($routine['DTD_IDENTIFIER']);            $retval['item_returntype']      = $returnparam[2];            $retval['item_returnlength']    = $returnparam[3];            $retval['item_returnopts_num']  = $returnparam[4];            $retval['item_returnopts_text'] = $returnparam[4];        }        $retval['item_definer']         = PMA_RTN_parseRoutineDefiner($parsed_query);        $retval['item_definition']      = $routine['ROUTINE_DEFINITION'];        $retval['item_isdeterministic'] = '';        if ($routine['IS_DETERMINISTIC'] == 'YES') {            $retval['item_isdeterministic'] = " checked='checked'";        }        $retval['item_securitytype_definer'] = '';        $retval['item_securitytype_invoker'] = '';        if ($routine['SECURITY_TYPE'] == 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($routine['SECURITY_TYPE'] == 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }        $retval['item_sqldataaccess'] = $routine['SQL_DATA_ACCESS'];        $retval['item_comment']       = $routine['ROUTINE_COMMENT'];    }    return $retval;} // PMA_RTN_getDataFromName()/** * Creates one row for the parameter table used in the routine editor. * * @param   array    $routine    Data for the routine returned by *                               PMA_RTN_getDataFromRequest() or *                               PMA_RTN_getDataFromName() * @param   mixed    $index      Either a numeric index of the row being processed *                               or NULL to create a template row for AJAX request * @param   string   $class      Class used to hide the direction column, if the *                               row is for a stored function. * * @return    string    HTML code of one row of parameter table for the editor. */function PMA_RTN_getParameterRow($routine = array(), $index = null, $class = ''){    global $param_directions, $param_opts_num, $titles;    if ($index === null) {        // template row for AJAX request        $i = 0;        $index = '%s';        $drop_class = '';        $routine = array(            'item_param_dir'       => array(0 => ''),            'item_param_name'      => array(0 => ''),            'item_param_type'      => array(0 => ''),            'item_param_length'    => array(0 => ''),            'item_param_opts_num'  => array(0 => ''),            'item_param_opts_text' => array(0 => '')        );    } else if (! empty($routine)) {        // regular row for routine editor        $drop_class = ' hide';        $i = $index;    } else {        // No input data. This shouldn't happen,        // but better be safe than sorry.        return '';    }    // Create the output    $retval  = "";    $retval .= "        <tr>\n";    $retval .= "            <td class='routine_direction_cell$class'>\n";    $retval .= "                <select name='item_param_dir[$index]'>\n";    foreach ($param_directions as $key => $value) {        $selected = "";        if (! empty($routine['item_param_dir'][$i])            && $routine['item_param_dir'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "                    <option$selected>$value</option>\n";    }    $retval .= "                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td><input name='item_param_name[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_name'][$i]}' /></td>\n";    $retval .= "            <td><select name='item_param_type[$index]'>";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_param_type'][$i]) . "\n";    $retval .= "            </select></td>\n";    $retval .= "            <td>\n";    $retval .= "                <input id='item_param_length_$index'\n";    $retval .= "                       name='item_param_length[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_length'][$i]}' />\n";    $retval .= "                <div class='enum_hint'>\n";    $retval .= "                    <a class='open_enum_editor' target='_blank'\n";    $retval .= "                       href='enum_editor.php?" . PMA_generate_common_url() . "&amp;values=" . $routine['item_param_length'][$i] . "&amp;field=" . $routine['item_param_name'][$i] . "'>\n";    $retval .= "                        " . PMA_getImage('b_edit', '', array('title'=>__('ENUM/SET editor'))) . "\n";    $retval .= "                    </a>\n";    $retval .= "                </div>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_len'>---</td>\n";    $retval .= "            <td class='routine_param_opts_text'>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_param_opts_text[$index]",        null,        $routine['item_param_opts_text'][$i]    );    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_opts'>---</td>\n";    $retval .= "            <td class='routine_param_opts_num'>\n";    $retval .= "                <select name='item_param_opts_num[$index]'>\n";    $retval .= "                    <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_param_opts_num'][$i])            && $routine['item_param_opts_num'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='routine_param_remove$drop_class'>\n";    $retval .= "                <a href='#' class='routine_param_remove_anchor'>\n";    $retval .= "                    {$titles['Drop']}\n";    $retval .= "                </a>\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getParameterRow()/** * Displays a form used to add/edit a routine * * @param   string   $mode         If the editor will be used edit a routine *                                 or add a new one: 'edit' or 'add'. * @param   string   $operation    If the editor was previously invoked with *                                 JS turned off, this will hold the name of *                                 the current operation * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromRequest() or *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_RTN_getEditorForm($mode, $operation, $routine){    global $db, $errors, $param_sqldataaccess, $param_opts_num;    // Escape special characters    $need_escape = array(        'item_original_name',        'item_name',        'item_returnlength',        'item_definition',        'item_definer',        'item_comment'    );    foreach ($need_escape as $key => $index) {        $routine[$index] = htmlentities($routine[$index], ENT_QUOTES);    }    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i]   = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );        $routine['item_param_length'][$i] = htmlentities(            $routine['item_param_length'][$i],            ENT_QUOTES        );    }    // Handle some logic first    if ($operation == 'change') {        if ($routine['item_type'] == 'PROCEDURE') {            $routine['item_type']        = 'FUNCTION';            $routine['item_type_toggle'] = 'PROCEDURE';        } else {            $routine['item_type']        = 'PROCEDURE';            $routine['item_type_toggle'] = 'FUNCTION';        }    } else if ($operation == 'add' || ($routine['item_num_params'] == 0 && $mode == 'add' && ! $errors)) {        $routine['item_param_dir'][]       = '';        $routine['item_param_name'][]      = '';        $routine['item_param_type'][]      = '';        $routine['item_param_length'][]    = '';        $routine['item_param_opts_num'][]  = '';        $routine['item_param_opts_text'][] = '';        $routine['item_num_params']++;    } else if ($operation == 'remove') {        unset($routine['item_param_dir'][$routine['item_num_params']-1]);        unset($routine['item_param_name'][$routine['item_num_params']-1]);        unset($routine['item_param_type'][$routine['item_num_params']-1]);        unset($routine['item_param_length'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_num'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_text'][$routine['item_num_params']-1]);        $routine['item_num_params']--;    }    $disable_remove_parameter = '';    if (! $routine['item_num_params']) {        $disable_remove_parameter = " color: gray;' disabled='disabled";    }    $original_routine = '';    if ($mode == 'edit') {        $original_routine = "<input name='item_original_name' "                          . "type='hidden' "                          . "value='{$routine['item_original_name']}'/>\n"                          . "<input name='item_original_type' "                          . "type='hidden' "                          . "value='{$routine['item_original_type']}'/>\n";    }    $isfunction_class   = '';    $isprocedure_class  = '';    $isfunction_select  = '';    $isprocedure_select = '';    if ($routine['item_type'] == 'PROCEDURE') {        $isfunction_class   = ' hide';        $isprocedure_select = " selected='selected'";    } else {        $isprocedure_class = ' hide';        $isfunction_select = " selected='selected'";    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_routines.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_routine;    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Routine name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$routine['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>\n";        $retval .= "            <option value='PROCEDURE'$isprocedure_select>PROCEDURE</option>\n";        $retval .= "            <option value='FUNCTION'$isfunction_select>FUNCTION</option>\n";        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' value='{$routine['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$routine['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit' name='routine_changetype'\n";        $retval .= "               value='".sprintf(__('Change to %s'), $routine['item_type_toggle'])."' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Parameters') . "</td>\n";    $retval .= "    <td>\n";    // parameter handling start    $retval .= "        <table class='routine_params_table'>\n";    $retval .= "        <tr>\n";    $retval .= "            <th class='routine_direction_cell$isprocedure_class'>" . __('Direction') . "</th>\n";    $retval .= "            <th>" . __('Name') . "</th>\n";    $retval .= "            <th>" . __('Type') . "</th>\n";    $retval .= "            <th>" . __('Length/Values') . "</th>\n";    $retval .= "            <th colspan='2'>" . __('Options') . "</th>\n";    $retval .= "            <th class='routine_param_remove hide'>&nbsp;</th>\n";    $retval .= "        </tr>";    for ($i=0; $i<$routine['item_num_params']; $i++) { // each parameter        $retval .= PMA_RTN_getParameterRow($routine, $i, $isprocedure_class);    }    $retval .= "        </table>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>&nbsp;</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='submit' \n";    $retval .= "               name='routine_addparameter'\n";    $retval .= "               value='" . __('Add parameter') . "' />\n";    $retval .= "        <input style='width: 49%;$disable_remove_parameter'\n";    $retval .= "               type='submit' \n";    $retval .= "               name='routine_removeparameter'\n";    $retval .= "               value='" . __('Remove last parameter') . "' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    // parameter handling end    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return type') . "</td>\n";    $retval .= "    <td><select name='item_returntype'>\n";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_returntype']) . "\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return length/values') . "</td>\n";    $retval .= "    <td><input type='text' name='item_returnlength'\n";    $retval .= "               value='{$routine['item_returnlength']}' /></td>\n";    $retval .= "    <td class='hide no_len'>---</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return options') . "</td>\n";    $retval .= "    <td><div>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_returnopts_text",        null,        $routine['item_returnopts_text']    );    $retval .= "\n    </div>\n";    $retval .= "    <div><select name='item_returnopts_num'>\n";    $retval .= "        <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_returnopts_num'])            && $routine['item_returnopts_num'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n    </select></div>\n";    $retval .= "    <div class='hide no_opts'>---</div>\n";    $retval .= "</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $routine['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Is deterministic') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_isdeterministic'{$routine['item_isdeterministic']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$routine['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Security type') . "</td>\n";    $retval .= "    <td><select name='item_securitytype'>\n";    $retval .= "        <option value='DEFINER'{$routine['item_securitytype_definer']}>DEFINER</option>\n";    $retval .= "        <option value='INVOKER'{$routine['item_securitytype_invoker']}>INVOKER</option>\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('SQL data access') . "</td>\n";    $retval .= "    <td><select name='item_sqldataaccess'>\n";    foreach ($param_sqldataaccess as $key => $value) {        $selected = "";        if ($routine['item_sqldataaccess'] == $value) {            $selected = " selected='selected'";        }        $retval .= "        <option$selected>$value</option>\n";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$routine['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    return $retval;} // end PMA_RTN_getEditorForm()/** * Composes the query necessary to create a routine from an HTTP request. * * @return  string  The CREATE [ROUTINE | PROCEDURE] query. */function PMA_RTN_getQueryFromRequest(){    global $_REQUEST, $cfg, $errors, $param_sqldataaccess, $param_directions;    $_REQUEST['item_type'] = isset($_REQUEST['item_type']) ? $_REQUEST['item_type'] : '';    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    if ($_REQUEST['item_type'] == 'FUNCTION'        || $_REQUEST['item_type'] == 'PROCEDURE'    ) {        $query .= $_REQUEST['item_type'] . ' ';    } else {        $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_type']));    }    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']);    } else {        $errors[] = __('You must provide a routine name');    }    $params = '';    $warned_about_dir    = false;    $warned_about_name   = false;    $warned_about_length = false;    if (   ! empty($_REQUEST['item_param_name'])        && ! empty($_REQUEST['item_param_type'])        && ! empty($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])    ) {        for ($i=0; $i<count($_REQUEST['item_param_name']); $i++) {            if (! empty($_REQUEST['item_param_name'][$i]) && ! empty($_REQUEST['item_param_type'][$i])) {                if ($_REQUEST['item_type'] == 'PROCEDURE'                    && ! empty($_REQUEST['item_param_dir'][$i])                    && in_array($_REQUEST['item_param_dir'][$i], $param_directions)                ) {                    $params .= $_REQUEST['item_param_dir'][$i] . " " . PMA_backquote($_REQUEST['item_param_name'][$i]) . " "                            . $_REQUEST['item_param_type'][$i];                } else if ($_REQUEST['item_type'] == 'FUNCTION') {                    $params .= PMA_backquote($_REQUEST['item_param_name'][$i]) . " " . $_REQUEST['item_param_type'][$i];                } else if (! $warned_about_dir) {                    $warned_about_dir = true;                    $errors[] = sprintf(                        __('Invalid direction "%s" given for parameter.'),                        htmlspecialchars($_REQUEST['item_param_dir'][$i])                    );                }                if ($_REQUEST['item_param_length'][$i] != ''                    && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                                   $_REQUEST['item_param_type'][$i])                ) {                    $params .= "(" . $_REQUEST['item_param_length'][$i] . ")";                } else if ($_REQUEST['item_param_length'][$i] == '' && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_param_type'][$i])) {                    if (! $warned_about_length) {                        $warned_about_length = true;                        $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');                    }                }                if (! empty($_REQUEST['item_param_opts_text'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['STRING'])) {                        $params .= ' CHARSET ' . strtolower($_REQUEST['item_param_opts_text'][$i]);                    }                }                if (! empty($_REQUEST['item_param_opts_num'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['NUMERIC'])) {                        $params .= ' ' . strtoupper($_REQUEST['item_param_opts_num'][$i]);                    }                }                if ($i != count($_REQUEST['item_param_name'])-1) {                    $params .= ", ";                }            } else if (! $warned_about_name) {                $warned_about_name = true;                $errors[] = __('You must provide a name and a type for each routine parameter.');                break;            }        }    }    $query .= "(" . $params . ") ";    if ($_REQUEST['item_type'] == 'FUNCTION') {        if (! empty($_REQUEST['item_returntype']) && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())) {            $query .= "RETURNS {$_REQUEST['item_returntype']}";        } else {            $errors[] = __('You must provide a valid return type for the routine.');        }        if (! empty($_REQUEST['item_returnlength'])            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                            $_REQUEST['item_returntype'])        ) {            $query .= "(" . $_REQUEST['item_returnlength'] . ")";        } else if (empty($_REQUEST['item_returnlength']) && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_returntype'])) {            if (! $warned_about_length) {                $warned_about_length = true;                $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');            }        }        if (! empty($_REQUEST['item_returnopts_text'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['STRING'])) {                $query .= ' CHARSET ' . strtolower($_REQUEST['item_returnopts_text']);            }        }        if (! empty($_REQUEST['item_returnopts_num'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['NUMERIC'])) {                $query .= ' ' . strtoupper($_REQUEST['item_returnopts_num']);            }        }        $query .= ' ';    }    if (! empty($_REQUEST['item_comment'])) {        $query .= "COMMENT '" . PMA_sqlAddslashes($_REQUEST['item_comment']) . "' ";    }    if (isset($_REQUEST['item_isdeterministic'])) {        $query .= 'DETERMINISTIC ';    } else {        $query .= 'NOT DETERMINISTIC ';    }    if (! empty($_REQUEST['item_sqldataaccess']) && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess)) {        $query .= $_REQUEST['item_sqldataaccess'] . ' ';    }    if (! empty($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] == 'DEFINER' || $_REQUEST['item_securitytype'] == 'INVOKER') {            $query .= 'SQL SECURITY ' . $_REQUEST['item_securitytype'] . ' ';        }    }    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a routine definition.');    }    return $query;} // end PMA_RTN_getQueryFromRequest()/** * Handles requests for executing a routine */function PMA_RTN_handleExecute(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $cfg;    /**     * Handle all user requests other than the default of listing routines     */    if (! empty($_REQUEST['execute_routine']) && ! empty($_REQUEST['item_name'])) {        // Build the queries        $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type'], false);        if ($routine !== false) {            $queries   = array();            $end_query = array();            $args      = array();            for ($i=0; $i<$routine['item_num_params']; $i++) {                if (isset($_REQUEST['params'][$routine['item_param_name'][$i]])) {                    $value = $_REQUEST['params'][$routine['item_param_name'][$i]];                    if (is_array($value)) { // is SET type                        $value = implode(',', $value);                    }                    $value = PMA_sqlAddSlashes($value);                    if (! empty($_REQUEST['funcs'][$routine['item_param_name'][$i]])                        && in_array($_REQUEST['funcs'][$routine['item_param_name'][$i]], $cfg['Functions'])                    ) {                        $queries[] = "SET @p$i={$_REQUEST['funcs'][$routine['item_param_name'][$i]]}('$value');\n";                    } else {                        $queries[] = "SET @p$i='$value';\n";                    }                    $args[] = "@p$i";                } else {                    $args[] = "@p$i";                }                if ($routine['item_type'] == 'PROCEDURE') {                    if ($routine['item_param_dir'][$i] == 'OUT'                        || $routine['item_param_dir'][$i] == 'INOUT'                    ) {                        $end_query[] = "@p$i AS " . PMA_backquote($routine['item_param_name'][$i]);                    }                }            }            if ($routine['item_type'] == 'PROCEDURE') {                $queries[] = "CALL " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ");\n";                if (count($end_query)) {                    $queries[] = "SELECT " . implode(', ', $end_query) . ";\n";                }            } else {                $queries[] = "SELECT " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ") "                           . "AS " . PMA_backquote($routine['item_name']) . ";\n";            }            // Execute the queries            $affected = 0;            $result = null;            $outcome = true;            foreach ($queries as $query) {                $resource = PMA_DBI_try_query($query);                if ($resource === false) {                    $outcome = false;                    break;                }                while (true) {                    if (! PMA_DBI_more_results()) {                        break;                    }                    PMA_DBI_next_result();                }                if (substr($query, 0, 6) == 'SELECT') {                    $result = $resource;                } else if (substr($query, 0, 4) == 'CALL') {                    $result = $resource ? $resource : $result;                    $affected = PMA_DBI_affected_rows() - PMA_DBI_num_rows($resource);                }            }            // Generate output            if ($outcome) {                $message = __('Your SQL query has been executed successfully');                if ($routine['item_type'] == 'PROCEDURE') {                    $message .= '<br />';                    $message .= sprintf(                        _ngettext(                            '%d row affected by the last statement inside the procedure',                            '%d rows affected by the last statement inside the procedure',                            $affected                        ),                        $affected                    );                }                $message = PMA_message::success($message);                // Pass the SQL queries through the "pretty printer"                $output  = '<code class="sql" style="margin-bottom: 1em;">';                $output .= PMA_SQP_formatHtml(PMA_SQP_parse(implode($queries)));                $output .= '</code>';                // Display results                if ($result) {                    $output .= "<fieldset><legend>";                    $output .= sprintf(                        __('Execution results of routine %s'),                        PMA_backquote(htmlspecialchars($routine['item_name']))                    );                    $output .= "</legend>";                    $output .= "<table><tr>";                    foreach (PMA_DBI_get_fields_meta($result) as $key => $field) {                        $output .= "<th>";                        $output .= htmlspecialchars($field->name);                        $output .= "</th>";                    }                    $output .= "</tr>";                    // Stored routines can only ever return ONE ROW.                    $data = PMA_DBI_fetch_single_row($result);                    foreach ($data as $key => $value) {                        if ($value === null) {                            $value = '<i>NULL</i>';                        } else {                            $value = htmlspecialchars($value);                        }                        $output .= "<td class='odd'>" . $value . "</td>";                    }                    $output .= "</table></fieldset>";                } else {                    $notice = __('MySQL returned an empty result set (i.e. zero rows).');                    $output .= PMA_message::notice($notice)->getDisplay();                }            } else {                $output = '';                $message = PMA_message::error(sprintf(__('The following query has failed: "%s"'), $query) . '<br /><br />'                                                    . __('MySQL said: ') . PMA_DBI_getError(null));            }            // Print/send output            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('dialog' => false);                PMA_ajaxResponse(                    $message->getDisplay() . $output,                    $message->isSuccess(),                    $extra_data                );            } else {                echo $message->getDisplay() . $output;                if ($message->isError()) {                    // At least one query has failed, so shouldn't                    // execute any more queries, so we quit.                    exit;                }                unset($_POST);                // Now deliberately fall through to displaying the routines list            }        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, $message->isSuccess());            } else {                echo $message->getDisplay();                unset($_POST);            }        }    } else if (! empty($_GET['execute_dialog']) && ! empty($_GET['item_name'])) {        /**         * Display the execute form for a routine.         */        $routine = PMA_RTN_getDataFromName($_GET['item_name'], $_GET['item_type'], true);        if ($routine !== false) {            $form = PMA_RTN_getExecuteForm($routine);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data = array();                $extra_data['dialog'] = true;                $extra_data['title']  = __("Execute routine") . " ";                $extra_data['title'] .= PMA_backquote(                    htmlentities($_GET['item_name'], ENT_QUOTES)                );                PMA_ajaxResponse($form, true, $extra_data);            } else {                echo "\n\n<h2>" . __("Execute routine") . "</h2>\n\n";                echo $form;                include './libraries/footer.inc.php';                // exit;            }        } else if (($GLOBALS['is_ajax_request'] == true)) {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            PMA_ajaxResponse($message, false);        }    }}/** * Creates the HTML code that shows the routine execution dialog. * * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the routine execution dialog. */function PMA_RTN_getExecuteForm($routine){    global $db, $cfg;    // Escape special characters    $routine['item_name'] = htmlentities($routine['item_name'], ENT_QUOTES);    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i] = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );    }    // Create the output    $retval  = "";    $retval .= "<!-- START ROUTINE EXECUTE FORM -->\n\n";    $retval .= "<form action='db_routines.php' method='post' class='rte_form'>\n";    $retval .= "<input type='hidden' name='item_name'\n";    $retval .= "       value='{$routine['item_name']}' />\n";    $retval .= "<input type='hidden' name='item_type'\n";    $retval .= "       value='{$routine['item_type']}' />\n";    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "<legend>{$routine['item_name']}</legend>\n";        $retval .= "<table class='rte_table'>\n";        $retval .= "<caption class='tblHeaders'>\n";        $retval .= __('Routine parameters');        $retval .= "</caption>\n";    } else {        $retval .= "<legend>" . __('Routine parameters') . "</legend>\n";        $retval .= "<table class='rte_table' style='width: 100%;'>\n";    }    $retval .= "<tr>\n";    $retval .= "<th>" . __('Name') . "</th>\n";    $retval .= "<th>" . __('Type') . "</th>\n";    if ($cfg['ShowFunctionFields']) {        $retval .= "<th>" . __('Function') . "</th>\n";    }    $retval .= "<th>" . __('Value')    . "</th>\n";    $retval .= "</tr>\n";    // Get a list of data types that are not yet supported.    $no_support_types = PMA_unsupportedDatatypes();    for ($i=0; $i<$routine['item_num_params']; $i++) { // Each parameter        if ($routine['item_type'] == 'PROCEDURE'            && $routine['item_param_dir'][$i] == 'OUT'        ) {            continue;        }        $rowclass = ($i % 2 == 0) ? 'even' : 'odd';        $retval .= "\n<tr class='$rowclass'>\n";        $retval .= "<td>{$routine['item_param_name'][$i]}</td>\n";        $retval .= "<td>{$routine['item_param_type'][$i]}</td>\n";        if ($cfg['ShowFunctionFields']) {            $retval .= "<td>\n";            if (stristr($routine['item_param_type'][$i], 'enum')                || stristr($routine['item_param_type'][$i], 'set')                || in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)            ) {                $retval .= "--\n";            } else {                $field = array(                    'True_Type'       => strtolower($routine['item_param_type'][$i]),                    'Type'            => '',                    'Key'             => '',                    'Field'           => '',                    'Default'         => '',                    'first_timestamp' => false                );                $retval .= "<select name='funcs[{$routine['item_param_name'][$i]}]'>";                $retval .= PMA_getFunctionsForField($field, false);                $retval .= "</select>";            }            $retval .= "</td>\n";        }        // Append a class to date/time fields so that        // jQuery can attach a datepicker to them        $class = '';        if ($routine['item_param_type'][$i] == 'DATETIME'            || $routine['item_param_type'][$i] == 'TIMESTAMP'        ) {            $class = 'datetimefield';        } else if ($routine['item_param_type'][$i] == 'DATE') {            $class = 'datefield';        }        $retval .= "<td class='nowrap'>\n";        if (in_array($routine['item_param_type'][$i], array('ENUM', 'SET'))) {            $tokens = PMA_SQP_parse($routine['item_param_length'][$i]);            if ($routine['item_param_type'][$i] == 'ENUM') {                $input_type = 'radio';            } else {                $input_type = 'checkbox';            }            for ($j=0; $j<$tokens['len']; $j++) {                if ($tokens[$j]['type'] != 'punct_listsep') {                    $tokens[$j]['data'] = htmlentities(                        PMA_unquote($tokens[$j]['data']),                        ENT_QUOTES                    );                    $retval .= "<input name='params[{$routine['item_param_name'][$i]}][]' "                             . "value='{$tokens[$j]['data']}' type='$input_type' />"                             . "{$tokens[$j]['data']}<br />\n";                }            }        } else if (in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)) {            $retval .= "\n";        } else {            $retval .= "<input class='$class' type='text' name='params[{$routine['item_param_name'][$i]}]' />\n";        }        $retval .= "</td>\n";        $retval .= "</tr>\n";    }    $retval .= "\n</table>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "</fieldset>\n\n";        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='execute_routine'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    } else {        $retval .= "<input type='hidden' name='execute_routine' value='true' />";        $retval .= "<input type='hidden' name='ajax_request' value='true' />";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END ROUTINE EXECUTE FORM -->\n\n";    return $retval;} // end PMA_RTN_getExecuteForm()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @todo    we must handle the case if sql.php is called directly with a query *          that returns 0 rows - to prevent cyclic redirects or includes * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Table.class.php';require_once './libraries/check_user_privileges.lib.php';require_once './libraries/bookmark.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'tbl_change.js';// the next one needed because sql.php may do a "goto" to tbl_structure.php$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';if (isset($_SESSION['profiling'])) {    $GLOBALS['js_include'][] = 'highcharts/highcharts.js';    /* Files required for chart exporting */    $GLOBALS['js_include'][] = 'highcharts/exporting.js';    /* < IE 9 doesn't support canvas natively */    if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {        $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';    }    $GLOBALS['js_include'][] = 'canvg/canvg.js';}/** * Defines the url to return to in case of error in a sql statement */// Security checkingsif (! empty($goto)) {    $is_gotofile     = preg_replace('@^([^?]+).*$@s', '\\1', $goto);    if (! @file_exists('./' . $is_gotofile)) {        unset($goto);    } else {        $is_gotofile = ($is_gotofile == $goto);    }} else {    $goto = (! strlen($table)) ? $cfg['DefaultTabDatabase'] : $cfg['DefaultTabTable'];    $is_gotofile  = true;} // end ifif (! isset($err_url)) {    $err_url = (! empty($back) ? $back : $goto)             . '?' . PMA_generate_common_url($db)             . ((strpos(' ' . $goto, 'db_') != 1 && strlen($table)) ? '&amp;table=' . urlencode($table) : '');} // end if// Coming from a bookmark dialogif (isset($fields['query'])) {    $sql_query = $fields['query'];}// This one is just to fill $dbif (isset($fields['dbase'])) {    $db = $fields['dbase'];}/** * During grid edit, if we have a relational field, show the dropdown for it * * Logic taken from libraries/display_tbl_lib.php * * This doesn't seem to be the right place to do this, but I can't think of any * better place either. */if (isset($_REQUEST['get_relational_values']) && $_REQUEST['get_relational_values'] == true) {    include_once 'libraries/relation.lib.php';    $column = $_REQUEST['column'];    $foreigners = PMA_getForeigners($db, $table, $column);    $display_field = PMA_getDisplayField($foreigners[$column]['foreign_db'], $foreigners[$column]['foreign_table']);    $foreignData = PMA_getForeignData($foreigners, $column, false, '', '');    if ($_SESSION['tmp_user_values']['relational_display'] == 'D'        && isset($display_field)        && strlen($display_field)        && isset($_REQUEST['relation_key_or_display_column'])        && $_REQUEST['relation_key_or_display_column']    ) {            $curr_value = $_REQUEST['relation_key_or_display_column'];    } else {        $curr_value = $_REQUEST['curr_value'];    }    if ($foreignData['disp_row'] == null) {        //Handle the case when number of values is more than $cfg['ForeignKeyMaxLimit']        $_url_params = array(                'db' => $db,                'table' => $table,                'field' => $column        );        $dropdown = '<span class="curr_value">' . htmlspecialchars($_REQUEST['curr_value']) . '</span> <a href="browse_foreigners.php' . PMA_generate_common_url($_url_params) . '"'                    . ' target="_blank" class="browse_foreign" '                    .'>' . __('Browse foreign values') . '</a>';    } else {        $dropdown = PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $curr_value, $cfg['ForeignKeyMaxLimit']);        $dropdown = '<select>' . $dropdown . '</select>';    }    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Just like above, find possible values for enum fields during grid edit. * * Logic taken from libraries/display_tbl_lib.php */if (isset($_REQUEST['get_enum_values']) && $_REQUEST['get_enum_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $search = array('enum', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $dropdown = '<option value="">&nbsp;</option>';    foreach ($values as $value) {        $dropdown .= '<option value="' . htmlspecialchars($value) . '"';        if ($value == $_REQUEST['curr_value']) {            $dropdown .= ' selected="selected"';        }        $dropdown .= '>' . $value . '</option>';    }    $dropdown = '<select>' . $dropdown . '</select>';    $extra_data['dropdown'] = $dropdown;    PMA_ajaxResponse(null, true, $extra_data);}/** * Find possible values for set fields during grid edit. */if (isset($_REQUEST['get_set_values']) && $_REQUEST['get_set_values'] == true) {    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);    $field_info_result = PMA_DBI_fetch_result($field_info_query, null, null, null, PMA_DBI_QUERY_STORE);    $selected_values = explode(',', $_REQUEST['curr_value']);    $search = array('set', '(', ')', "'");    $values = explode(',', str_replace($search, '', $field_info_result[0]['Type']));    $select = '';    foreach ($values as $value) {        $select .= '<option value="' . htmlspecialchars($value) . '"';        if (in_array($value, $selected_values, true)) {            $select .= ' selected="selected"';        }        $select .= '>' . $value . '</option>';    }    $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);    $select = '<select multiple="multiple" size="' . $select_size . '">' . $select . '</select>';    $extra_data['select'] = $select;    PMA_ajaxResponse(null, true, $extra_data);}/** * Check ajax request to set the column order */if (isset($_REQUEST['set_col_prefs']) && $_REQUEST['set_col_prefs'] == true) {    $pmatable = new PMA_Table($table, $db);    $retval = false;    // set column order    if (isset($_REQUEST['col_order'])) {        $col_order = explode(',', $_REQUEST['col_order']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_ORDER, $col_order, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    // set column visibility    if ($retval === true && isset($_REQUEST['col_visib'])) {        $col_visib = explode(',', $_REQUEST['col_visib']);        $retval = $pmatable->setUiProp(PMA_Table::PROP_COLUMN_VISIB, $col_visib, $_REQUEST['table_create_time']);        if (gettype($retval) != 'boolean') {            PMA_ajaxResponse($retval->getString(), false);        }    }    PMA_ajaxResponse(null, ($retval == true));}// Default to browse if no query set and we have table// (needed for browsing from DefaultTabTable)if (empty($sql_query) && strlen($table) && strlen($db)) {    include_once './libraries/bookmark.lib.php';    $book_sql_query = PMA_Bookmark_get(        $db,        '\'' . PMA_sqlAddSlashes($table) . '\'',        'label',        false,        true    );    if (! empty($book_sql_query)) {        $GLOBALS['using_bookmark_message'] = PMA_message::notice(__('Using bookmark "%s" as default browse query.'));        $GLOBALS['using_bookmark_message']->addParam($table);        $GLOBALS['using_bookmark_message']->addMessage(PMA_showDocu('faq6_22'));        $sql_query = $book_sql_query;    } else {        $sql_query = 'SELECT * FROM ' . PMA_backquote($table);    }    unset($book_sql_query);    // set $goto to what will be displayed if query returns 0 rows    $goto = 'tbl_structure.php';} else {    // Now we can check the parameters    PMA_checkParameters(array('sql_query'));}// instead of doing the test twice$is_drop_database = preg_match(    '/DROP[[:space:]]+(DATABASE|SCHEMA)[[:space:]]+/i',    $sql_query);/** * Check rights in case of DROP DATABASE * * This test may be bypassed if $is_js_confirmed = 1 (already checked with js) * but since a malicious user may pass this variable by url/form, we don't take * into account this case. */if (! defined('PMA_CHK_DROP')    && ! $cfg['AllowUserDropDatabase']    && $is_drop_database    && ! $is_superuser) {    include_once './libraries/header.inc.php';    PMA_mysqlDie(__('"DROP DATABASE" statements are disabled.'), '', '', $err_url);} // end ifrequire_once './libraries/display_tbl.lib.php';PMA_displayTable_checkConfigParams();/** * Need to find the real end of rows? */if (isset($find_real_end) && $find_real_end) {    $unlim_num_rows = PMA_Table::countRecords($db, $table, $force_exact = true);    $_SESSION['tmp_user_values']['pos'] = @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']) - 1) * $_SESSION['tmp_user_values']['max_rows']);}/** * Bookmark add */if (isset($store_bkm)) {    PMA_Bookmark_save($fields, (isset($bkm_all_users) && $bkm_all_users == 'true' ? true : false));    // go back to sql.php to redisplay query; do not use &amp; in this case:    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . $goto . '&label=' . $fields['label']);} // end if/** * Parse and analyze the query */require_once './libraries/parse_analyze.lib.php';/** * Sets or modifies the $goto variable if required */if ($goto == 'sql.php') {    $is_gotofile = false;    $goto = 'sql.php?'          . PMA_generate_common_url($db, $table)          . '&amp;sql_query=' . urlencode($sql_query);} // end if/** * Go back to further page if table should not be dropped */if (isset($btnDrop) && $btnDrop == __('No')) {    if (! empty($back)) {        $goto = $back;    }    if ($is_gotofile) {        if (strpos($goto, 'db_') === 0 && strlen($table)) {            $table = '';        }        $active_page = $goto;        include './' . PMA_securePath($goto);    } else {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto));    }    exit();} // end if/** * Displays the confirm page if required * * This part of the script is bypassed if $is_js_confirmed = 1 (already checked * with js) because possible security issue is not so important here: at most, * the confirm message isn't displayed. * * Also bypassed if only showing php code.or validating a SQL query */if (! $cfg['Confirm']    || isset($_REQUEST['is_js_confirmed'])    || isset($btnDrop)    // if we are coming from a "Create PHP code" or a "Without PHP Code"    // dialog, we won't execute the query anyway, so don't confirm    || isset($GLOBALS['show_as_php'])    || ! empty($GLOBALS['validatequery'])) {    $do_confirm = false;} else {    $do_confirm = isset($analyzed_sql[0]['queryflags']['need_confirm']);}if ($do_confirm) {    $stripped_sql_query = $sql_query;    include_once './libraries/header.inc.php';    if ($is_drop_database) {        echo '<h1 class="error">' . __('You are about to DESTROY a complete database!') . '</h1>';    }    echo '<form action="sql.php" method="post">' . "\n"        .PMA_generate_common_hidden_inputs($db, $table);    ?>    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <input type="hidden" name="message_to_show" value="<?php echo isset($message_to_show) ? PMA_sanitize($message_to_show, true) : ''; ?>" />    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="<?php echo isset($back) ? PMA_sanitize($back, true) : ''; ?>" />    <input type="hidden" name="reload" value="<?php echo isset($reload) ? PMA_sanitize($reload, true) : 0; ?>" />    <input type="hidden" name="purge" value="<?php echo isset($purge) ? PMA_sanitize($purge, true) : ''; ?>" />    <input type="hidden" name="dropped_column" value="<?php echo isset($dropped_column) ? PMA_sanitize($dropped_column, true) : ''; ?>" />    <input type="hidden" name="show_query" value="<?php echo isset($show_query) ? PMA_sanitize($show_query, true) : ''; ?>" />    <?php    echo '<fieldset class="confirmation">' . "\n"        .'    <legend>' . __('Do you really want to ') . '</legend>'        .'    <tt>' . htmlspecialchars($stripped_sql_query) . '</tt>' . "\n"        .'</fieldset>' . "\n"        .'<fieldset class="tblFooters">' . "\n";    ?>    <input type="submit" name="btnDrop" value="<?php echo __('Yes'); ?>" id="buttonYes" />    <input type="submit" name="btnDrop" value="<?php echo __('No'); ?>" id="buttonNo" />    <?php    echo '</fieldset>' . "\n"       . '</form>' . "\n";    /**     * Displays the footer and exit     */    include './libraries/footer.inc.php';} // end if $do_confirm// Defines some variables// A table has to be created, renamed, dropped -> navi frame should be reloaded/** * @todo use the parser/analyzer */if (empty($reload)    && preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {    $reload = 1;}// SK -- Patch: $is_group added for use in calculation of total number of//              rows.//              $is_count is changed for more correct "LIMIT" clause//              appending in queries like//                "SELECT COUNT(...) FROM ... GROUP BY ..."/** * @todo detect all this with the parser, to avoid problems finding * those strings in comments or backquoted identifiers */$is_explain = $is_count = $is_export = $is_delete = $is_insert = $is_affected = $is_show = $is_maint = $is_analyse = $is_group = $is_func = $is_replace = false;if ($is_select) { // see line 141    $is_group = preg_match('@(GROUP[[:space:]]+BY|HAVING|SELECT[[:space:]]+DISTINCT)[[:space:]]+@i', $sql_query);    $is_func =  ! $is_group && (preg_match('@[[:space:]]+(SUM|AVG|STD|STDDEV|MIN|MAX|BIT_OR|BIT_AND)\s*\(@i', $sql_query));    $is_count = ! $is_group && (preg_match('@^SELECT[[:space:]]+COUNT\((.*\.+)?.*\)@i', $sql_query));    $is_export   = (preg_match('@[[:space:]]+INTO[[:space:]]+OUTFILE[[:space:]]+@i', $sql_query));    $is_analyse  = (preg_match('@[[:space:]]+PROCEDURE[[:space:]]+ANALYSE@i', $sql_query));} elseif (preg_match('@^EXPLAIN[[:space:]]+@i', $sql_query)) {    $is_explain  = true;} elseif (preg_match('@^DELETE[[:space:]]+@i', $sql_query)) {    $is_delete   = true;    $is_affected = true;} elseif (preg_match('@^(INSERT|LOAD[[:space:]]+DATA|REPLACE)[[:space:]]+@i', $sql_query)) {    $is_insert   = true;    $is_affected = true;    if (preg_match('@^(REPLACE)[[:space:]]+@i', $sql_query)) {        $is_replace = true;    }} elseif (preg_match('@^UPDATE[[:space:]]+@i', $sql_query)) {    $is_affected = true;} elseif (preg_match('@^[[:space:]]*SHOW[[:space:]]+@i', $sql_query)) {    $is_show     = true;} elseif (preg_match('@^(CHECK|ANALYZE|REPAIR|OPTIMIZE)[[:space:]]+TABLE[[:space:]]+@i', $sql_query)) {    $is_maint    = true;}// assign default full_sql_query$full_sql_query = $sql_query;// Handle remembered sorting order, only for single table queryif ($GLOBALS['cfg']['RememberSorting']    && ! ($is_count || $is_export || $is_func || $is_analyse)    && count($analyzed_sql[0]['select_expr']) == 0    && isset($analyzed_sql[0]['queryflags']['select_from'])    && count($analyzed_sql[0]['table_ref']) == 1) {    $pmatable = new PMA_Table($table, $db);    if (empty($analyzed_sql[0]['order_by_clause'])) {        $sorted_col = $pmatable->getUiProp(PMA_Table::PROP_SORTED_COLUMN);        if ($sorted_col) {            // retrieve the remembered sorting order for current table            $sql_order_to_append = ' ORDER BY ' . $sorted_col . ' ';            $full_sql_query = $analyzed_sql[0]['section_before_limit'] . $sql_order_to_append                . $analyzed_sql[0]['section_after_limit'];            // update the $analyzed_sql            $analyzed_sql[0]['section_before_limit'] .= $sql_order_to_append;            $analyzed_sql[0]['order_by_clause'] = $sorted_col;        }    } else {        // store the remembered table into session        $pmatable->setUiProp(PMA_Table::PROP_SORTED_COLUMN, $analyzed_sql[0]['order_by_clause']);    }}// Do append a "LIMIT" clause?if (($_SESSION['tmp_user_values']['max_rows'] != 'all')    && ! ($is_count || $is_export || $is_func || $is_analyse)    && isset($analyzed_sql[0]['queryflags']['select_from'])    && ! isset($analyzed_sql[0]['queryflags']['offset'])    && empty($analyzed_sql[0]['limit_clause'])) {    $sql_limit_to_append = ' LIMIT ' . $_SESSION['tmp_user_values']['pos']        . ', ' . $_SESSION['tmp_user_values']['max_rows'] . " ";    $full_sql_query  = $analyzed_sql[0]['section_before_limit'] . "\n"        . $sql_limit_to_append . $analyzed_sql[0]['section_after_limit'];    /**     * @todo pretty printing of this modified query     */    if (isset($display_query)) {        // if the analysis of the original query revealed that we found        // a section_after_limit, we now have to analyze $display_query        // to display it correctly        if (! empty($analyzed_sql[0]['section_after_limit'])            && trim($analyzed_sql[0]['section_after_limit']) != ';'        ) {            $analyzed_display_query = PMA_SQP_analyze(PMA_SQP_parse($display_query));            $display_query  = $analyzed_display_query[0]['section_before_limit']                . "\n" . $sql_limit_to_append . $analyzed_display_query[0]['section_after_limit'];        }    }}if (strlen($db)) {    PMA_DBI_select_db($db);}//  E x e c u t e    t h e    q u e r y// Only if we didn't ask to see the php code (mikebeck)if (isset($GLOBALS['show_as_php']) || ! empty($GLOBALS['validatequery'])) {    unset($result);    $num_rows = 0;    $unlim_num_rows = 0;} else {    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        PMA_DBI_query('SET PROFILING=1;');    }    // Measure query time.    $querytime_before = array_sum(explode(' ', microtime()));    $result   = @PMA_DBI_try_query($full_sql_query, null, PMA_DBI_QUERY_STORE);    // If a stored procedure was called, there may be more results that are    // queued up and waiting to be flushed from the buffer. So let's do that.    while (true) {        if (! PMA_DBI_more_results()) {            break;        }        PMA_DBI_next_result();    }    $querytime_after = array_sum(explode(' ', microtime()));    $GLOBALS['querytime'] = $querytime_after - $querytime_before;    // Displays an error message if required and stop parsing the script    if ($error        = PMA_DBI_getError()) {        if ($is_gotofile) {            if (strpos($goto, 'db_') === 0 && strlen($table)) {                $table = '';            }            $active_page = $goto;            $message = PMA_Message::rawError($error);            if ($GLOBALS['is_ajax_request'] == true) {                PMA_ajaxResponse($message, false);            }            /**             * Go to target path.             */            include './' . PMA_securePath($goto);        } else {            $full_err_url = (preg_match('@^(db|tbl)_@', $err_url))                          ? $err_url . '&amp;show_query=1&amp;sql_query=' . urlencode($sql_query)                          : $err_url;            PMA_mysqlDie($error, $full_sql_query, '', $full_err_url);        }        exit;    }    unset($error);    // Gets the number of rows affected/returned    // (This must be done immediately after the query because    // mysql_affected_rows() reports about the last query done)    if (! $is_affected) {        $num_rows = ($result) ? @PMA_DBI_num_rows($result) : 0;    } elseif (! isset($num_rows)) {        $num_rows = @PMA_DBI_affected_rows();    }    // Grabs the profiling results    if (isset($_SESSION['profiling']) && PMA_profilingSupported()) {        $profiling_results = PMA_DBI_fetch_result('SHOW PROFILE;');    }    // Checks if the current database has changed    // This could happen if the user sends a query like "USE `database`;"    /**     * commented out auto-switching to active database - really required?     * bug #1814718 win: table list disappears (mixed case db names)     * https://sourceforge.net/support/tracker.php?aid=1814718     * @todo RELEASE test and comit or rollback before release    $current_db = PMA_DBI_fetch_value('SELECT DATABASE()');    if ($db !== $current_db) {        $db     = $current_db;        $reload = 1;    }    unset($current_db);     */    // tmpfile remove after convert encoding appended by Y.Kawada    if (function_exists('PMA_kanji_file_conv')        && (isset($textfile) && file_exists($textfile))    ) {        unlink($textfile);    }    // Counts the total number of rows for the same 'SELECT' query without the    // 'LIMIT' clause that may have been programatically added    if (empty($sql_limit_to_append)) {        $unlim_num_rows         = $num_rows;        // if we did not append a limit, set this to get a correct        // "Showing rows..." message        //$_SESSION['tmp_user_values']['max_rows'] = 'all';    } elseif ($is_select) {        //    c o u n t    q u e r y        // If we are "just browsing", there is only one table,        // and no WHERE clause (or just 'WHERE 1 '),        // we do a quick count (which uses MaxExactCount) because        // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables        // However, do not count again if we did it previously        // due to $find_real_end == true        if (! $is_group            && ! isset($analyzed_sql[0]['queryflags']['union'])            && ! isset($analyzed_sql[0]['queryflags']['distinct'])            && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])            && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')            && ! isset($find_real_end)        ) {            // "j u s t   b r o w s i n g"            $unlim_num_rows = PMA_Table::countRecords($db, $table);        } else { // n o t   " j u s t   b r o w s i n g "            // add select expression after the SQL_CALC_FOUND_ROWS            // for UNION, just adding SQL_CALC_FOUND_ROWS            // after the first SELECT works.            // take the left part, could be:            // SELECT            // (SELECT            $count_query = PMA_SQP_formatHtml($parsed_sql, 'query_only', 0, $analyzed_sql[0]['position_of_first_select'] + 1);            $count_query .= ' SQL_CALC_FOUND_ROWS ';            // add everything that was after the first SELECT            $count_query .= PMA_SQP_formatHtml($parsed_sql, 'query_only', $analyzed_sql[0]['position_of_first_select'] + 1);            // ensure there is no semicolon at the end of the            // count query because we'll probably add            // a LIMIT 1 clause after it            $count_query = rtrim($count_query);            $count_query = rtrim($count_query, ';');            // if using SQL_CALC_FOUND_ROWS, add a LIMIT to avoid            // long delays. Returned count will be complete anyway.            // (but a LIMIT would disrupt results in an UNION)            if (! isset($analyzed_sql[0]['queryflags']['union'])) {                $count_query .= ' LIMIT 1';            }            // run the count query            PMA_DBI_try_query($count_query);            // if (mysql_error()) {            // void.            // I tried the case            // (SELECT `User`, `Host`, `Db`, `Select_priv` FROM `db`)            // UNION (SELECT `User`, `Host`, "%" AS "Db",            // `Select_priv`            // FROM `user`) ORDER BY `User`, `Host`, `Db`;            // and although the generated count_query is wrong            // the SELECT FOUND_ROWS() work! (maybe it gets the            // count from the latest query that worked)            //            // another case where the count_query is wrong:            // SELECT COUNT(*), f1 from t1 group by f1            // and you click to sort on count(*)            // }            $unlim_num_rows = PMA_DBI_fetch_value('SELECT FOUND_ROWS()');        } // end else "just browsing"    } else { // not $is_select         $unlim_num_rows         = 0;    } // end rows total count    // if a table or database gets dropped, check column comments.    if (isset($purge) && $purge == '1') {        /**         * Cleanup relations.         */        include_once './libraries/relation_cleanup.lib.php';        if (strlen($table) && strlen($db)) {            PMA_relationsCleanupTable($db, $table);        } elseif (strlen($db)) {            PMA_relationsCleanupDatabase($db);        } else {            // VOID. No DB/Table gets deleted.        } // end if relation-stuff    } // end if ($purge)    // If a column gets dropped, do relation magic.    if (isset($dropped_column) && strlen($db) && strlen($table) && ! empty($dropped_column)) {        include_once './libraries/relation_cleanup.lib.php';        PMA_relationsCleanupColumn($db, $table, $dropped_column);        // to refresh the list of indexes (Ajax mode)        $extra_data['indexes_list'] = PMA_Index::getView($table, $db);    } // end if column was dropped} // end else "didn't ask to see php code"// No rows returned -> move back to the calling pageif ((0 == $num_rows && 0 == $unlim_num_rows) || $is_affected) {    if ($is_delete) {        $message = PMA_Message::deleted_rows($num_rows);    } elseif ($is_insert) {        if ($is_replace) {            /* For replace we get DELETED + INSERTED row count, so we have to call it affected */            $message = PMA_Message::affected_rows($num_rows);        } else {            $message = PMA_Message::inserted_rows($num_rows);        }        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we inserted multiple rows, we had to increment this            $message->addMessage('[br]');            // need to use a temporary because the Message class            // currently supports adding parameters only to the first            // message            $_inserted = PMA_Message::notice(__('Inserted row id: %1$d'));            $_inserted->addParam($insert_id + $num_rows - 1);            $message->addMessage($_inserted);        }    } elseif ($is_affected) {        $message = PMA_Message::affected_rows($num_rows);        // Ok, here is an explanation for the !$is_select.        // The form generated by sql_query_form.lib.php        // and db_sql.php has many submit buttons        // on the same form, and some confusion arises from the        // fact that $message_to_show is sent for every case.        // The $message_to_show containing a success message and sent with        // the form should not have priority over errors    } elseif (! empty($message_to_show) && ! $is_select) {        $message = PMA_Message::rawSuccess(htmlspecialchars($message_to_show));    } elseif (! empty($GLOBALS['show_as_php'])) {        $message = PMA_Message::success(__('Showing as PHP code'));    } elseif (isset($GLOBALS['show_as_php'])) {        /* User disable showing as PHP, query is only displayed */        $message = PMA_Message::notice(__('Showing SQL query'));    } elseif (! empty($GLOBALS['validatequery'])) {        $message = PMA_Message::notice(__('Validated SQL'));    } else {        $message = PMA_Message::success(__('MySQL returned an empty result set (i.e. zero rows).'));    }    if (isset($GLOBALS['querytime'])) {        $_querytime = PMA_Message::notice(__('Query took %01.4f sec'));        $_querytime->addParam($GLOBALS['querytime']);        $message->addMessage('(');        $message->addMessage($_querytime);        $message->addMessage(')');    }    if ($GLOBALS['is_ajax_request'] == true) {        if ($cfg['ShowSQL']) {            $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        }        if (isset($GLOBALS['reload']) && $GLOBALS['reload'] == 1) {            $extra_data['reload'] = 1;            $extra_data['db'] = $GLOBALS['db'];        }        PMA_ajaxResponse($message, $message->isSuccess(), (isset($extra_data) ? $extra_data : ''));    }    if ($is_gotofile) {        $goto = PMA_securePath($goto);        // Checks for a valid target script        $is_db = $is_table = false;        if (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1') {            $table = '';            unset($url_params['table']);        }        include 'libraries/db_table_exists.lib.php';        if (strpos($goto, 'tbl_') === 0 && ! $is_table) {            if (strlen($table)) {                $table = '';            }            $goto = 'db_sql.php';        }        if (strpos($goto, 'db_') === 0 && ! $is_db) {            if (strlen($db)) {                $db = '';            }            $goto = 'main.php';        }        // Loads to target script        if ($goto != 'main.php') {            include_once './libraries/header.inc.php';        }        $active_page = $goto;        include './' . $goto;    } else {        // avoid a redirect loop when last record was deleted        if (0 == $num_rows && 'sql.php' == $cfg['DefaultTabTable']) {            $goto = str_replace('sql.php', 'tbl_structure.php', $goto);        }        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . str_replace('&amp;', '&', $goto) . '&message=' . urlencode($message));    } // end else    exit();// end no rows returned} else {    // At least one row is returned -> displays a table with results    //If we are retrieving the full value of a truncated field or the original    // value of a transformed field, show it here and exit    if ($GLOBALS['grid_edit'] == true && $GLOBALS['cfg']['AjaxEnable']) {        $row = PMA_DBI_fetch_row($result);        $extra_data = array();        $extra_data['value'] = $row[0];        PMA_ajaxResponse(null, true, $extra_data);    }    if (isset($_REQUEST['ajax_request']) && isset($_REQUEST['table_maintenance'])) {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        // Gets the list of fields properties        if (isset($result) && $result) {            $fields_meta = PMA_DBI_get_fields_meta($result);            $fields_cnt  = count($fields_meta);        }        if (empty($disp_mode)) {            // see the "PMA_setDisplayMode()" function in            // libraries/display_tbl.lib.php            $disp_mode = 'urdr111101';        }        // hide edit and delete links for information_schema        if (PMA_is_system_schema($db)) {            $disp_mode = 'nnnn110111';        }        $message = PMA_Message::success($message);        echo PMA_showMessage($message, $GLOBALS['sql_query'], 'success');        PMA_displayTable($result, $disp_mode, $analyzed_sql);        exit();    }    // Displays the headers    if (isset($show_query)) {        unset($show_query);    }    if (isset($printview) && $printview == '1') {        include_once './libraries/header_printview.inc.php';    } else {        $GLOBALS['js_include'][] = 'functions.js';        $GLOBALS['js_include'][] = 'makegrid.js';        $GLOBALS['js_include'][] = 'sql.js';        unset($message);        if (! $GLOBALS['is_ajax_request'] || ! $GLOBALS['cfg']['AjaxEnable']) {            if (strlen($table)) {                include './libraries/tbl_common.php';                $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';                include './libraries/tbl_info.inc.php';                include './libraries/tbl_links.inc.php';            } elseif (strlen($db)) {                include './libraries/db_common.inc.php';                include './libraries/db_info.inc.php';            } else {                include './libraries/server_common.inc.php';                include './libraries/server_links.inc.php';            }        } else {            include_once './libraries/header.inc.php';            //we don't need to buffer the output in PMA_showMessage here.            //set a global variable and check against it in the function            $GLOBALS['buffer_message'] = false;        }    }    if (strlen($db)) {        $cfgRelation = PMA_getRelationsParam();    }    // Gets the list of fields properties    if (isset($result) && $result) {        $fields_meta = PMA_DBI_get_fields_meta($result);        $fields_cnt  = count($fields_meta);    }    if (! $GLOBALS['is_ajax_request']) {        //begin the sqlqueryresults div here. container div        echo '<div id="sqlqueryresults"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo '>';    }    // Display previous update query (from tbl_replace)    if (isset($disp_query) && $cfg['ShowSQL'] == true) {        PMA_showMessage($disp_message, $disp_query, 'success');    }    if (isset($profiling_results)) {        // pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo isset($url_query)?$url_query:PMA_generate_common_url($db);?>';$(document).ready(makeProfilingChart);</script><?php        echo '<fieldset><legend>' . __('Profiling') . '</legend>' . "\n";        echo '<div style="float: left;">';        echo '<table>' . "\n";        echo ' <tr>' .  "\n";        echo '  <th>' . __('Status') . PMA_showMySQLDocu('general-thread-states', 'general-thread-states') .  '</th>' . "\n";        echo '  <th>' . __('Time') . '</th>' . "\n";        echo ' </tr>' .  "\n";        $chart_json = Array();        foreach ($profiling_results as $one_result) {            echo ' <tr>' .  "\n";            echo '<td>' . ucwords($one_result['Status']) . '</td>' .  "\n";            echo '<td align="right">' . (PMA_formatNumber($one_result['Duration'], 3, 1)) . 's</td>' .  "\n";            $chart_json[ucwords($one_result['Status'])] = $one_result['Duration'];        }        echo '</table>' . "\n";        echo '</div>';        //require_once './libraries/chart.lib.php';        echo '<div id="profilingchart" style="display:none;">';        //PMA_chart_profiling($profiling_results);        echo json_encode($chart_json);        echo '</div>';        echo '</fieldset>' . "\n";    }    // Displays the results in a table    if (empty($disp_mode)) {        // see the "PMA_setDisplayMode()" function in        // libraries/display_tbl.lib.php        $disp_mode = 'urdr111101';    }    // hide edit and delete links for information_schema    if (PMA_is_system_schema($db)) {        $disp_mode = 'nnnn110111';    }    if (isset($label)) {        $message = PMA_message::success(__('Bookmark %s created'));        $message->addParam($label);        $message->display();    }    PMA_displayTable($result, $disp_mode, $analyzed_sql);    PMA_DBI_free_result($result);    // BEGIN INDEX CHECK See if indexes should be checked.    if (isset($query_type) && $query_type == 'check_tbl' && isset($selected) && is_array($selected)) {        foreach ($selected as $idx => $tbl_name) {            $check = PMA_Index::findDuplicates($tbl_name, $db);            if (! empty($check)) {                printf(__('Problems with indexes of table `%s`'), $tbl_name);                echo $check;            }        }    } // End INDEX CHECK    // Bookmark support if required    if ($disp_mode[7] == '1'        && (! empty($cfg['Bookmark']) && empty($id_bookmark))        && ! empty($sql_query)    ) {        echo "\n";        $goto = 'sql.php?'              . PMA_generate_common_url($db, $table)              . '&amp;sql_query=' . urlencode($sql_query)              . '&amp;id_bookmark=1';        ?><form action="sql.php" method="post" onsubmit="return emptyFormElements(this, 'fields[label]');"><?php echo PMA_generate_common_hidden_inputs(); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="fields[dbase]" value="<?php echo htmlspecialchars($db); ?>" /><input type="hidden" name="fields[user]" value="<?php echo $cfg['Bookmark']['user']; ?>" /><input type="hidden" name="fields[query]" value="<?php echo urlencode(isset($complete_query) ? $complete_query : $sql_query); ?>" /><fieldset>    <legend><?php    echo PMA_getIcon('b_bookmark.png', __('Bookmark this SQL query'), true);?>    </legend>    <div class="formelement">        <label for="fields_label_"><?php echo __('Label'); ?>:</label>        <input type="text" id="fields_label_" name="fields[label]" value="" />    </div>    <div class="formelement">        <input type="checkbox" name="bkm_all_users" id="bkm_all_users" value="true" />        <label for="bkm_all_users"><?php echo __('Let every user access this bookmark'); ?></label>    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" name="store_bkm" value="<?php echo __('Bookmark this SQL query'); ?>" /></fieldset></form>        <?php    } // end bookmark support    // Do print the page if required    if (isset($printview) && $printview == '1') {        PMA_printButton();    } // end print case    if ($GLOBALS['is_ajax_request'] != true) {        echo '</div>'; // end sqlqueryresults div    }} // end rows returned/** * Displays the footer */if (! isset($_REQUEST['table_maintenance'])) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Get user's global privileges and some db-specific privileges * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['is_superuser']       = PMA_isSuperuser();/** * sets privilege information extracted from SHOW GRANTS result * * Detection for some CREATE privilege. * * Since MySQL 4.1.2, we can easily detect current user's grants using $userlink * (no control user needed) and we don't have to try any other method for * detection * * @todo fix to get really all privileges, not only explicitly defined for this user * from MySQL manual: (http://dev.mysql.com/doc/refman/5.0/en/show-grants.html) * SHOW GRANTS displays only the privileges granted explicitly to the named * account. Other privileges might be available to the account, but they are not * displayed. For example, if an anonymous account exists, the named account * might be able to use its privileges, but SHOW GRANTS will not display them. * */function PMA_analyseShowGrant(){    if (PMA_cacheExists('is_create_db_priv', true)) {        $GLOBALS['is_create_db_priv']  = PMA_cacheGet('is_create_db_priv', true);        $GLOBALS['is_process_priv']    = PMA_cacheGet('is_process_priv', true);        $GLOBALS['is_reload_priv']     = PMA_cacheGet('is_reload_priv', true);        $GLOBALS['db_to_create']       = PMA_cacheGet('db_to_create', true);        $GLOBALS['dbs_where_create_table_allowed']            = PMA_cacheGet('dbs_where_create_table_allowed', true);        return;    }    // defaults    $GLOBALS['is_create_db_priv']  = false;    $GLOBALS['is_process_priv']    = true;    $GLOBALS['is_reload_priv']     = false;    $GLOBALS['db_to_create']       = '';    $GLOBALS['dbs_where_create_table_allowed'] = array();    $rs_usr = PMA_DBI_try_query('SHOW GRANTS');    if (! $rs_usr) {        return;    }    $re0 = '(^|(\\\\\\\\)+|[^\\\\])'; // non-escaped wildcards    $re1 = '(^|[^\\\\])(\\\)+'; // escaped wildcards    while ($row = PMA_DBI_fetch_row($rs_usr)) {        // extract db from GRANT ... ON *.* or GRANT ... ON db.*        $db_name_offset = strpos($row[0], ' ON ') + 4;        $show_grants_dbname = substr($row[0],            $db_name_offset,            strpos($row[0], '.', $db_name_offset) - $db_name_offset);        $show_grants_dbname = PMA_unQuote($show_grants_dbname, '`');        $show_grants_str    = substr($row[0], 6, (strpos($row[0], ' ON ') - 6));        if ($show_grants_str == 'RELOAD') {            $GLOBALS['is_reload_priv'] = true;        }        /**         * @todo if we find CREATE VIEW but not CREATE, do not offer         * the create database dialog box         */        if ($show_grants_str == 'ALL'         || $show_grants_str == 'ALL PRIVILEGES'         || $show_grants_str == 'CREATE'         || strpos($show_grants_str, 'CREATE,') !== false) {            if ($show_grants_dbname == '*') {                // a global CREATE privilege                $GLOBALS['is_create_db_priv'] = true;                $GLOBALS['is_reload_priv'] = true;                $GLOBALS['db_to_create']   = '';                $GLOBALS['dbs_where_create_table_allowed'][] = '*';                // @todo we should not break here, cause GRANT ALL *.*                // could be revoked by a later rule like GRANT SELECT ON db.*                break;            } else {                // this array may contain wildcards                $GLOBALS['dbs_where_create_table_allowed'][] = $show_grants_dbname;                $dbname_to_test = PMA_backquote($show_grants_dbname);                if ($GLOBALS['is_create_db_priv']) {                    // no need for any more tests if we already know this                    continue;                }                if ((preg_match('/' . $re0 . '%|_/', $show_grants_dbname)                  && ! preg_match('/\\\\%|\\\\_/', $show_grants_dbname))                 // does this db exist?                 || (! PMA_DBI_try_query('USE ' .  preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $dbname_to_test))                  && substr(PMA_DBI_getError(), 1, 4) != 1044)                ) {                    if ($GLOBALS['cfg']['SuggestDBName']) {                        /**                         * Do not handle the underscore wildcard                          * (this case must be rare anyway)                         */                        $GLOBALS['db_to_create'] = preg_replace('/' . $re0 . '%/',     '\\1...', $show_grants_dbname);                        $GLOBALS['db_to_create'] = preg_replace('/' . $re1 . '(%|_)/', '\\1\\3', $GLOBALS['db_to_create']);                    }                    $GLOBALS['is_create_db_priv'] = true;                    /**                     * @todo collect $GLOBALS['db_to_create'] into an array, to display a                     * drop-down in the "Create database" dialog                     */                     // we don't break, we want all possible databases                     //break;                } // end if            } // end elseif        } // end if    } // end while    PMA_DBI_free_result($rs_usr);    // must also PMA_cacheUnset() them in libraries/auth/cookie.auth.lib.php    PMA_cacheSet('is_create_db_priv', $GLOBALS['is_create_db_priv'], true);    PMA_cacheSet('is_process_priv', $GLOBALS['is_process_priv'], true);    PMA_cacheSet('is_reload_priv', $GLOBALS['is_reload_priv'], true);    PMA_cacheSet('db_to_create', $GLOBALS['db_to_create'], true);    PMA_cacheSet('dbs_where_create_table_allowed', $GLOBALS['dbs_where_create_table_allowed'], true);} // end functionif (!PMA_DRIZZLE) {    PMA_analyseShowGrant();} else {    // todo: for simple_user_policy only database with user's login can be created (unless logged in as root)    $GLOBALS['is_create_db_priv'] = $GLOBALS['is_superuser'];    $GLOBALS['is_process_priv']   = false;    $GLOBALS['is_reload_priv']    = false;    $GLOBALS['db_to_create']      = '';    $GLOBALS['dbs_where_create_table_allowed'] = array('*');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * manipulation of table data like inserting, replacing and updating * * usally called as form action from tbl_change.php to insert or update table rows * * * @todo 'edit_next' tends to not work as expected if used ... at least there is no order by *       it needs the original query and the row number and than replace the LIMIT clause * @package PhpMyAdmin *//** * do not import request variable into global scope * * cannot be used as long as it could happen that the $goto file that is included * at the end of this script is not updated to work without imported request variables * * @todo uncomment this if all possible included files to rely on import request variablesif (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);} *//** * Gets some core libraries */require_once './libraries/common.inc.php';$blob_streaming_active = $GLOBALS['PMA_Config']->get('BLOBSTREAMING_PLUGINS_EXIST');// Check parametersPMA_checkParameters(array('db', 'table', 'goto'));PMA_DBI_select_db($GLOBALS['db']);/** * Initializes some variables */$goto_include = false;$GLOBALS['js_include'][] = 'makegrid.js';// Needed for generation of Inline Edit anchors$GLOBALS['js_include'][] = 'sql.js';if (isset($_REQUEST['insert_rows']) && is_numeric($_REQUEST['insert_rows']) && $_REQUEST['insert_rows'] != $cfg['InsertRows']) {    $cfg['InsertRows'] = $_REQUEST['insert_rows'];    $GLOBALS['js_include'][] = 'tbl_change.js';    include_once './libraries/header.inc.php';    include './tbl_change.php';    exit;}if (isset($_REQUEST['after_insert']) && in_array($_REQUEST['after_insert'], array('new_insert', 'same_insert', 'edit_next'))) {    $url_params['after_insert'] = $_REQUEST['after_insert'];    //$GLOBALS['goto'] = 'tbl_change.php';    $goto_include = 'tbl_change.php';    if (isset($_REQUEST['where_clause'])) {        if ($_REQUEST['after_insert'] == 'same_insert') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $url_params['where_clause'][] = $one_where_clause;            }        } elseif ($_REQUEST['after_insert'] == 'edit_next') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $local_query    = 'SELECT * FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                                . ' WHERE ' . str_replace('` =', '` >', $one_where_clause)                                . ' LIMIT 1;';                $res            = PMA_DBI_query($local_query);                $row            = PMA_DBI_fetch_row($res);                $meta           = PMA_DBI_get_fields_meta($res);                // must find a unique condition based on unique key,                // not a combination of all fields                list($unique_condition, $clause_is_unique) = PMA_getUniqueCondition($res, count($meta), $meta, $row, true);                if (! empty($unique_condition)) {                    $_SESSION['edit_next'] = $unique_condition;                }                unset($unique_condition, $clause_is_unique);            }        }    }} elseif (! empty($GLOBALS['goto'])) {    if (! preg_match('@^[a-z_]+\.php$@', $GLOBALS['goto'])) {        // this should NOT happen        //$GLOBALS['goto'] = false;        $goto_include = false;    } else {        $goto_include = $GLOBALS['goto'];    }    if ($GLOBALS['goto'] == 'db_sql.php' && strlen($GLOBALS['table'])) {        $GLOBALS['table'] = '';    }}if (! $goto_include) {    if (! strlen($GLOBALS['table'])) {        $goto_include = 'db_sql.php';    } else {        $goto_include = 'tbl_sql.php';    }}// Defines the url to return in case of failure of the queryif (isset($_REQUEST['err_url'])) {    $err_url = $_REQUEST['err_url'];} else {    $err_url = 'tbl_change.php' . PMA_generate_common_url($url_params);}/** * Prepares the update/insert of a row */if (isset($_REQUEST['where_clause'])) {    // we were editing something => use the WHERE clause    $loop_array = (is_array($_REQUEST['where_clause']) ? $_REQUEST['where_clause'] : array($_REQUEST['where_clause']));    $using_key  = true;    $is_insert  = ($_REQUEST['submit_type'] == 'insert') || ($_REQUEST['submit_type'] == 'showinsert') || ($_REQUEST['submit_type'] == 'insertignore');    $is_insertignore  = ($_REQUEST['submit_type'] == 'insertignore');} else {    // new row => use indexes    $loop_array = array();    foreach ($_REQUEST['fields']['multi_edit'] as $key => $dummy) {        $loop_array[] = $key;    }    $using_key  = false;    $is_insert  = true;    $is_insertignore = false;}$query = array();$value_sets = array();$func_no_param = array(    'CONNECTION_ID',    'CURRENT_USER',    'CURDATE',    'CURTIME',    'DATABASE',    'LAST_INSERT_ID',    'NOW',    'PI',    'RAND',    'SYSDATE',    'UNIX_TIMESTAMP',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',    'VERSION',);$func_optional_param = array(    'RAND',    'UNIX_TIMESTAMP',);$gis_from_text_functions = array(    'GeomFromText',    'GeomCollFromText',    'LineFromText',    'MLineFromText',    'PointFromText',    'MPointFromText',    'PolyFromText',    'MPolyFromText',);$gis_from_wkb_functions = array(    'GeomFromWKB',    'GeomCollFromWKB',    'LineFromWKB',    'MLineFromWKB',    'PointFromWKB',    'MPointFromWKB',    'PolyFromWKB',    'MPolyFromWKB',);foreach ($loop_array as $rownumber => $where_clause) {    // skip fields to be ignored    if (! $using_key && isset($_REQUEST['insert_ignore_' . $where_clause])) {        continue;    }    // Defines the SET part of the sql query    $query_values = array();    // Map multi-edit keys to single-level arrays, dependent on how we got the fields    $me_fields        = isset($_REQUEST['fields']['multi_edit'][$rownumber])        ? $_REQUEST['fields']['multi_edit'][$rownumber]        : array();    $me_fields_name        = isset($_REQUEST['fields_name']['multi_edit'][$rownumber])        ? $_REQUEST['fields_name']['multi_edit'][$rownumber]        : null;    $me_fields_prev        = isset($_REQUEST['fields_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_prev']['multi_edit'][$rownumber]        : null;    $me_funcs        = isset($_REQUEST['funcs']['multi_edit'][$rownumber])        ? $_REQUEST['funcs']['multi_edit'][$rownumber]        : null;    $me_fields_type        = isset($_REQUEST['fields_type']['multi_edit'][$rownumber])        ? $_REQUEST['fields_type']['multi_edit'][$rownumber]        : null;    $me_fields_null        = isset($_REQUEST['fields_null']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null']['multi_edit'][$rownumber]        : null;    $me_fields_null_prev        = isset($_REQUEST['fields_null_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null_prev']['multi_edit'][$rownumber]        : null;    $me_auto_increment        = isset($_REQUEST['auto_increment']['multi_edit'][$rownumber])        ? $_REQUEST['auto_increment']['multi_edit'][$rownumber]        : null;    // Fetch the current values of a row to use in case we have a protected field    // @todo possibly move to ./libraries/tbl_replace_fields.inc.php    if ($is_insert && $using_key && isset($me_fields_type) && is_array($me_fields_type) && isset($where_clause)) {        $prot_row = PMA_DBI_fetch_single_row('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';');    }    // When a select field is nullified, it's not present in $_REQUEST    // so initialize it; this way, the foreach($me_fields) will process it    foreach ($me_fields_name as $key => $val) {        if (! isset($me_fields[$key])) {            $me_fields[$key] = '';        }    }    // Iterate in the order of $me_fields_name, not $me_fields, to avoid problems    // when inserting multiple entries    foreach ($me_fields_name as $key => $field_name) {        $val = $me_fields[$key];        // Note: $key is an md5 of the fieldname. The actual fieldname is available in $me_fields_name[$key]        include './libraries/tbl_replace_fields.inc.php';        // for blobstreaming        if ($blob_streaming_active) {            $remove_blob_repo = isset($_REQUEST['remove_blob_repo_' . $key]) ? $_REQUEST['remove_blob_repo_' . $key] : null;            $upload_blob_repo = isset($_REQUEST['upload_blob_repo_' . $key]) ? $_REQUEST['upload_blob_repo_' . $key] : null;            // checks if an existing blob repository reference should be removed            if (isset($remove_blob_repo) && ! isset($upload_blob_repo)) {                $remove_blob_reference = $_REQUEST['remove_blob_ref_' . $key];                if (isset($remove_blob_reference)) {                    $val = "NULL";                }            }            // checks if this field requires a bs reference attached to it            if (isset($upload_blob_repo)) {                // get the most recent BLOB reference                $bs_reference = PMA_File::getRecentBLOBReference();                // if the most recent BLOB reference exists, set it as a field value                if (!is_null($bs_reference)) {                    $val = "'" . PMA_sqlAddSlashes($bs_reference) . "'";                }            }        }        if (empty($me_funcs[$key])) {            $cur_value = $val;        } elseif ('UUID' === $me_funcs[$key]) {            /* This way user will know what UUID new row has */            $uuid = PMA_DBI_fetch_value('SELECT UUID()');            $cur_value = "'" . $uuid . "'";        } elseif ((in_array($me_funcs[$key], $gis_from_text_functions)            && substr($val, 0, 3) == "'''")            || in_array($me_funcs[$key], $gis_from_wkb_functions)        ) {            // Remove enclosing apostrophes            $val = substr($val, 1, strlen($val) - 2);            // Remove escaping apostrophes            $val = str_replace("''", "'", $val);            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } elseif (! in_array($me_funcs[$key], $func_no_param)                  || ($val != "''" && in_array($me_funcs[$key], $func_optional_param))) {            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } else {            $cur_value = $me_funcs[$key] . '()';        }        //  i n s e r t        if ($is_insert) {            // no need to add column into the valuelist            if (strlen($cur_value)) {                $query_values[] = $cur_value;                // first inserted row so prepare the list of fields                if (empty($value_sets)) {                    $query_fields[] = PMA_backquote($me_fields_name[$key]);                }            }        //  u p d a t e        } elseif (!empty($me_fields_null_prev[$key])         && ! isset($me_fields_null[$key])) {            // field had the null checkbox before the update            // field no longer has the null checkbox            $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;        } elseif (empty($me_funcs[$key])         && isset($me_fields_prev[$key])         && ("'" . PMA_sqlAddSlashes($me_fields_prev[$key]) . "'" == $val)) {            // No change for this column and no MySQL function is used -> next column            continue;        } elseif (! empty($val)) {            // avoid setting a field to NULL when it's already NULL            // (field had the null checkbox before the update            //  field still has the null checkbox)            if (empty($me_fields_null_prev[$key])             || empty($me_fields_null[$key])) {                 $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;            }        }    } // end foreach ($me_fields as $key => $val)    if (count($query_values) > 0) {        if ($is_insert) {            $value_sets[] = implode(', ', $query_values);        } else {            // build update query            $query[] = 'UPDATE ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                . ' SET ' . implode(', ', $query_values) . ' WHERE ' . $where_clause . ($_REQUEST['clause_is_unique'] ? '' : ' LIMIT 1');        }    }} // end foreach ($loop_array as $where_clause)unset($me_fields_name, $me_fields_prev, $me_funcs, $me_fields_type, $me_fields_null, $me_fields_null_prev,    $me_auto_increment, $cur_value, $key, $val, $loop_array, $where_clause, $using_key,    $func_no_param);// Builds the sql queryif ($is_insert && count($value_sets) > 0) {    if ($is_insertignore) {        $insert_command = 'INSERT IGNORE ';    } else {        $insert_command = 'INSERT ';    }    $query[] = $insert_command . 'INTO ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])        . ' (' . implode(', ', $query_fields) . ') VALUES (' . implode('), (', $value_sets) . ')';    unset($insert_command);    unset($query_fields);} elseif (empty($query)) {    // No change -> move back to the calling script    //    // Note: logic passes here for inline edit    $message = PMA_Message::success(__('No change'));    $active_page = $goto_include;    if (! $GLOBALS['is_ajax_request'] == true) {        include_once './libraries/header.inc.php';    }    include './' . PMA_securePath($goto_include);    exit;}unset($me_fields, $is_insertignore);/** * Executes the sql query and get the result, then move back to the calling * page */if (! empty($GLOBALS['sql_query'])) {    $url_params['sql_query'] = $GLOBALS['sql_query'];    $return_to_sql_query = $GLOBALS['sql_query'];}$GLOBALS['sql_query'] = implode('; ', $query) . ';';// to ensure that the query is displayed in case of// "insert as new row" and then "insert another new row"$GLOBALS['display_query'] = $GLOBALS['sql_query'];$total_affected_rows = 0;$last_messages = array();$warning_messages = array();$error_messages = array();foreach ($query as $single_query) {    if ($_REQUEST['submit_type'] == 'showinsert') {        $last_messages[] = PMA_Message::notice(__('Showing SQL query'));        continue;    }    if ($GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {        $result = PMA_DBI_try_query($single_query);    } else {        $result = PMA_DBI_query($single_query);    }    if (! $result) {        $error_messages[] = PMA_Message::sanitize(PMA_DBI_getError());    } else {        // The next line contains a real assignment, it's not a typo        if ($tmp = @PMA_DBI_affected_rows()) {            $total_affected_rows += $tmp;        }        unset($tmp);        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we            // inserted multiple rows, we had to increment this            if ($total_affected_rows > 0) {                $insert_id = $insert_id + $total_affected_rows - 1;            }            $last_message = PMA_Message::notice(__('Inserted row id: %1$d'));            $last_message->addParam($insert_id);            $last_messages[] = $last_message;        }        PMA_DBI_free_result($result);    } // end if    foreach (PMA_DBI_get_warnings() as $warning) {        $warning_messages[]            = PMA_Message::sanitize(                $warning['Level'] . ': #' . $warning['Code'] . ' ' . $warning['Message']            );    }    unset($result);}unset($single_query, $query);if ($is_insert && count($value_sets) > 0) {    $message = PMA_Message::inserted_rows($total_affected_rows);} else {    $message = PMA_Message::affected_rows($total_affected_rows);}$message->addMessages($last_messages, '<br />');if (! empty($warning_messages)) {    $message->addMessages($warning_messages, '<br />');    $message->isError(true);}if (! empty($error_messages)) {    $message->addMessages($error_messages);    $message->isError(true);}unset($error_messages, $warning_messages, $total_affected_rows, $last_messages, $last_message);if ($GLOBALS['is_ajax_request'] == true) {    /**     * If we are in grid editing, we need to process the relational and     * transformed fields, if they were edited. After that, output the correct     * link/transformed value and exit     *     * Logic taken from libraries/display_tbl.lib.php     */    if (isset($_REQUEST['rel_fields_list']) && $_REQUEST['rel_fields_list'] != '') {        //handle relations work here for updated row.        include_once './libraries/relation.lib.php';        $map = PMA_getForeigners($db, $table, '', 'both');        $rel_fields = array();        parse_str($_REQUEST['rel_fields_list'], $rel_fields);        // loop for each relation cell        foreach ( $rel_fields as $cell_index => $curr_cell_rel_field) {            foreach ( $curr_cell_rel_field as $rel_field => $rel_field_value) {                $where_comparison = "='" . $rel_field_value . "'";                $display_field = PMA_getDisplayField($map[$rel_field]['foreign_db'], $map[$rel_field]['foreign_table']);                // Field to display from the foreign table?                if (isset($display_field) && strlen($display_field)) {                    $dispsql     = 'SELECT ' . PMA_backquote($display_field)                        . ' FROM ' . PMA_backquote($map[$rel_field]['foreign_db'])                        . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                        . $where_comparison;                    $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);                    if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                        list($dispval) = PMA_DBI_fetch_row($dispresult, 0);                    } else {                        //$dispval = __('Link not found');                    }                    @PMA_DBI_free_result($dispresult);                } else {                    $dispval     = '';                } // end if... else...                if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational key" in the display options, so                    // the title contains the display field                    $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';                } else {                    $title = ' title="' . htmlspecialchars($rel_field_value) . '"';                }                $_url_params = array(                    'db'    => $map[$rel_field]['foreign_db'],                    'table' => $map[$rel_field]['foreign_table'],                    'pos'   => '0',                    'sql_query' => 'SELECT * FROM '                                        . PMA_backquote($map[$rel_field]['foreign_db']) . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                                        . $where_comparison                );                $output = '<a href="sql.php' . PMA_generate_common_url($_url_params) . '"' . $title . '>';                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $output .= (!empty($dispval)) ? htmlspecialchars($dispval) : '';                } else {                    // otherwise display data in the cell                    $output .= htmlspecialchars($rel_field_value);                }                $output .= '</a>';                $extra_data['relations'][$cell_index] = $output;            }        }   // end of loop for each relation cell    }    if (isset($_REQUEST['do_transformations']) && $_REQUEST['do_transformations'] == true ) {        include_once './libraries/transformations.lib.php';        //if some posted fields need to be transformed, generate them here.        $mime_map = PMA_getMIME($db, $table);        if ($mime_map === false) {            $mime_map = array();        }        $edited_values = array();        parse_str($_REQUEST['transform_fields_list'], $edited_values);        foreach ($mime_map as $transformation) {            $include_file = PMA_securePath($transformation['transformation']);            $column_name = $transformation['column_name'];            foreach ($edited_values as $cell_index => $curr_cell_edited_values) {                if (isset($curr_cell_edited_values[$column_name])) {                    $column_data = $curr_cell_edited_values[$column_name];                    $_url_params = array(                        'db'            => $db,                        'table'         => $table,                        'where_clause'  => $_REQUEST['where_clause'],                        'transform_key' => $column_name,                    );                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $transformation['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($transformation['transformation_options']) ? $transformation['transformation_options'] : ''));                            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);                        }                    }                    $extra_data['transformations'][$cell_index] = $transform_function($column_data, $transform_options);                }            }   // end of loop for each transformation cell        }   // end of loop for each $mime_map    }    /**Get the total row count of the table*/    $extra_data['row_count'] = PMA_Table::countRecords($_REQUEST['db'], $_REQUEST['table']);    $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['display_query']);    PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);}if (isset($return_to_sql_query)) {    $disp_query = $GLOBALS['sql_query'];    $disp_message = $message;    unset($message);    $GLOBALS['sql_query'] = $return_to_sql_query;}$GLOBALS['js_include'][] = 'tbl_change.js';// in case we call sql.php which needs those:$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$active_page = $goto_include;/** * If user asked for "and then Insert another new row" we have to remove * WHERE clause information so that tbl_change.php does not go back * to the current record */if (isset($_REQUEST['after_insert']) && 'new_insert' == $_REQUEST['after_insert']) {        unset($_REQUEST['where_clause']);}/** * Load header. */require_once './libraries/header.inc.php';/** * Load target page. */require './' . PMA_securePath($goto_include);exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';PMA_checkParameters(array('db', 'table'));/** * Prepares links */require_once './libraries/bookmark.lib.php';/** * Set parameters for links */$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Displays headers */require_once './libraries/header.inc.php';/** * Ensure that $db_is_information_schema is not null */if (! isset($db_is_information_schema)) {    $db_is_information_schema = false;}/** * Displays links */$tabs = array();$tabs['browse']['icon'] = 'b_browse.png';$tabs['browse']['text'] = __('Browse');$tabs['browse']['link'] = 'sql.php';$tabs['browse']['args']['pos'] = 0;$tabs['structure']['icon'] = 'b_props.png';$tabs['structure']['link'] = 'tbl_structure.php';$tabs['structure']['text'] = __('Structure');$tabs['sql']['icon'] = 'b_sql.png';$tabs['sql']['link'] = 'tbl_sql.php';$tabs['sql']['text'] = __('SQL');$tabs['search']['icon'] = 'b_search.png';$tabs['search']['text'] = __('Search');$tabs['search']['link'] = 'tbl_select.php';if (!$db_is_information_schema) {    $tabs['insert']['icon'] = 'b_insrow.png';    $tabs['insert']['link'] = 'tbl_change.php';    $tabs['insert']['text'] = __('Insert');}$tabs['export']['icon'] = 'b_tblexport.png';$tabs['export']['link'] = 'tbl_export.php';$tabs['export']['args']['single_table'] = 'true';$tabs['export']['text'] = __('Export');/** * Don't display "Import" and "Operations" * for views and information_schema */if (! $tbl_is_view && !$db_is_information_schema) {    $tabs['import']['icon'] = 'b_tblimport.png';    $tabs['import']['link'] = 'tbl_import.php';    $tabs['import']['text'] = __('Import');    $tabs['operation']['icon'] = 'b_tblops.png';    $tabs['operation']['link'] = 'tbl_operations.php';    $tabs['operation']['text'] = __('Operations');}if (PMA_Tracker::isActive()) {    $tabs['tracking']['icon'] = 'eye.png';    $tabs['tracking']['text'] = __('Tracking');    $tabs['tracking']['link'] = 'tbl_tracking.php';}if (!$db_is_information_schema && !PMA_DRIZZLE) {    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table) && ! PMA_Table::isView($db, $table)) {        $tabs['triggers']['link'] = 'tbl_triggers.php';        $tabs['triggers']['text'] = __('Triggers');        $tabs['triggers']['icon'] = 'b_triggers.png';    }}/** * Views support a limited number of operations */if ($tbl_is_view && !$db_is_information_schema) {    $tabs['operation']['icon'] = 'b_tblops.png';    $tabs['operation']['link'] = 'view_operations.php';    $tabs['operation']['text'] = __('Operations');}if ($table_info_num_rows == 0 && !$tbl_is_view) {    $tabs['browse']['warning'] = __('Table seems to be empty!');    $tabs['search']['warning'] = __('Table seems to be empty!');}echo PMA_generate_html_tabs($tabs, $url_params);unset($tabs);if (PMA_Tracker::isActive() and PMA_Tracker::isTracked($GLOBALS["db"], $GLOBALS["table"])) {    $msg = PMA_Message::notice('<a href="tbl_tracking.php?'.$url_query.'">'.sprintf(__('Tracking of %s.%s is activated.'), htmlspecialchars($GLOBALS["db"]), htmlspecialchars($GLOBALS["table"])).'</a>');    $msg->display();}/** * Displays a message */if (!empty($message)) {    PMA_showMessage($message);    unset($message);}?>
