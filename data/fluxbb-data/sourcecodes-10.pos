<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */// Tell header.php to use the admin templatedefine('PUN_ADMIN_CONSOLE', 1);define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';require PUN_ROOT.'include/common_admin.php';if (!$pun_user['is_admmod'])	message($lang_common['No permission'], false, '403 Forbidden');// The plugin to load should be supplied via GET$plugin = isset($_GET['plugin']) ? $_GET['plugin'] : '';if (!preg_match('%^AM?P_(\w*?)\.php$%i', $plugin))	message($lang_common['Bad request']);// AP_ == Admins only, AMP_ == admins and moderators$prefix = substr($plugin, 0, strpos($plugin, '_'));if ($pun_user['g_moderator'] == '1' && $prefix == 'AP')	message($lang_common['No permission'], false, '403 Forbidden');// Make sure the file actually existsif (!file_exists(PUN_ROOT.'plugins/'.$plugin))	message(sprintf($lang_admin_common['No plugin message'], $plugin));// Construct REQUEST_URI if it isn't setif (!isset($_SERVER['REQUEST_URI']))	$_SERVER['REQUEST_URI'] = (isset($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : '').'?'.(isset($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : '');$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_common['Admin'], str_replace('_', ' ', substr($plugin, strpos($plugin, '_') + 1, -4)));define('PUN_ACTIVE_PAGE', 'admin');require PUN_ROOT.'header.php';// Attempt to load the plugin. We don't use @ here to suppress error messages,// because if we did and a parse error occurred in the plugin, we would only// get the "blank page of death"include PUN_ROOT.'plugins/'.$plugin;if (!defined('PUN_PLUGIN_LOADED'))	message(sprintf($lang_admin_common['Plugin failed message'], $plugin));// Output the clearer div?>	<div class="clearer"></div></div><?phprequire PUN_ROOT.'footer.php';
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */// Tell header.php to use the admin templatedefine('PUN_ADMIN_CONSOLE', 1);define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';require PUN_ROOT.'include/common_admin.php';if (!$pun_user['is_admmod'])	message($lang_common['No permission'], false, '403 Forbidden');// Load the admin_users.php language filerequire PUN_ROOT.'lang/'.$admin_language.'/admin_users.php';// Show IP statistics for a certain user IDif (isset($_GET['ip_stats'])){	$ip_stats = intval($_GET['ip_stats']);	if ($ip_stats < 1)		message($lang_common['Bad request']);	// Fetch ip count	$result = $db->query('SELECT poster_ip, MAX(posted) AS last_used FROM '.$db->prefix.'posts WHERE poster_id='.$ip_stats.' GROUP BY poster_ip') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());	$num_ips = $db->num_rows($result);	// Determine the ip offset (based on $_GET['p'])	$num_pages = ceil($num_ips / 50);	$p = (!isset($_GET['p']) || $_GET['p'] <= 1 || $_GET['p'] > $num_pages) ? 1 : intval($_GET['p']);	$start_from = 50 * ($p - 1);	// Generate paging links	$paging_links = '<span class="pages-label">'.$lang_common['Pages'].' </span>'.paginate($num_pages, $p, 'admin_users.php?ip_stats='.$ip_stats );	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Users'], $lang_admin_users['Results head']);	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';?><div class="linkst">	<div class="inbox crumbsplus">		<ul class="crumbs">			<li><a href="admin_index.php"><?php echo $lang_admin_common['Admin'].' '.$lang_admin_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="admin_users.php"><?php echo $lang_admin_common['Users'] ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_admin_users['Results head'] ?></strong></li>		</ul>		<div class="pagepost">			<p class="pagelink"><?php echo $paging_links ?></p>		</div>		<div class="clearer"></div>	</div></div><div id="users1" class="blocktable">	<h2><span><?php echo $lang_admin_users['Results head'] ?></span></h2>	<div class="box">		<div class="inbox">			<table cellspacing="0">			<thead>				<tr>					<th class="tcl" scope="col"><?php echo $lang_admin_users['Results IP address head'] ?></th>					<th class="tc2" scope="col"><?php echo $lang_admin_users['Results last used head'] ?></th>					<th class="tc3" scope="col"><?php echo $lang_admin_users['Results times found head'] ?></th>					<th class="tcr" scope="col"><?php echo $lang_admin_users['Results action head'] ?></th>				</tr>			</thead>			<tbody><?php	$result = $db->query('SELECT poster_ip, MAX(posted) AS last_used, COUNT(id) AS used_times FROM '.$db->prefix.'posts WHERE poster_id='.$ip_stats.' GROUP BY poster_ip ORDER BY last_used DESC LIMIT '.$start_from.', 50') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());	if ($db->num_rows($result))	{		while ($cur_ip = $db->fetch_assoc($result))		{?>				<tr>					<td class="tcl"><a href="moderate.php?get_host=<?php echo pun_htmlspecialchars($cur_ip['poster_ip']) ?>"><?php echo pun_htmlspecialchars($cur_ip['poster_ip']) ?></a></td>					<td class="tc2"><?php echo format_time($cur_ip['last_used']) ?></td>					<td class="tc3"><?php echo $cur_ip['used_times'] ?></td>					<td class="tcr"><a href="admin_users.php?show_users=<?php echo pun_htmlspecialchars($cur_ip['poster_ip']) ?>"><?php echo $lang_admin_users['Results find more link'] ?></a></td>				</tr><?php		}	}	else		echo "\t\t\t\t".'<tr><td class="tcl" colspan="4">'.$lang_admin_users['Results no posts found'].'</td></tr>'."\n";?>			</tbody>			</table>		</div>	</div></div><div class="linksb">	<div class="inbox crumbsplus">		<div class="pagepost">			<p class="pagelink"><?php echo $paging_links ?></p>		</div>		<ul class="crumbs">			<li><a href="admin_index.php"><?php echo $lang_admin_common['Admin'].' '.$lang_admin_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="admin_users.php"><?php echo $lang_admin_common['Users'] ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_admin_users['Results head'] ?></strong></li>		</ul>		<div class="clearer"></div>	</div></div><?php	require PUN_ROOT.'footer.php';}if (isset($_GET['show_users'])){	$ip = pun_trim($_GET['show_users']);	if (!@preg_match('%^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$%', $ip) && !@preg_match('%^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$%', $ip))		message($lang_admin_users['Bad IP message']);	// Fetch user count	$result = $db->query('SELECT DISTINCT poster_id, poster FROM '.$db->prefix.'posts WHERE poster_ip=\''.$db->escape($ip).'\'') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());	$num_users = $db->num_rows($result);	// Determine the user offset (based on $_GET['p'])	$num_pages = ceil($num_users / 50);	$p = (!isset($_GET['p']) || $_GET['p'] <= 1 || $_GET['p'] > $num_pages) ? 1 : intval($_GET['p']);	$start_from = 50 * ($p - 1);	// Generate paging links	$paging_links = '<span class="pages-label">'.$lang_common['Pages'].' </span>'.paginate($num_pages, $p, 'admin_users.php?show_users='.$ip);	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Users'], $lang_admin_users['Results head']);	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';?><div class="linkst">	<div class="inbox crumbsplus">		<ul class="crumbs">			<li><a href="admin_index.php"><?php echo $lang_admin_common['Admin'].' '.$lang_admin_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="admin_users.php"><?php echo $lang_admin_common['Users'] ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_admin_users['Results head'] ?></strong></li>		</ul>		<div class="pagepost">			<p class="pagelink"><?php echo $paging_links ?></p>		</div>		<div class="clearer"></div>	</div></div><div id="users2" class="blocktable">	<h2><span><?php echo $lang_admin_users['Results head'] ?></span></h2>	<div class="box">		<div class="inbox">			<table cellspacing="0">			<thead>				<tr>					<th class="tcl" scope="col"><?php echo $lang_admin_users['Results username head'] ?></th>					<th class="tc2" scope="col"><?php echo $lang_admin_users['Results e-mail head'] ?></th>					<th class="tc3" scope="col"><?php echo $lang_admin_users['Results title head'] ?></th>					<th class="tc4" scope="col"><?php echo $lang_admin_users['Results posts head'] ?></th>					<th class="tc5" scope="col"><?php echo $lang_admin_users['Results admin note head'] ?></th>					<th class="tcr" scope="col"><?php echo $lang_admin_users['Results actions head'] ?></th>				</tr>			</thead>			<tbody><?php	$result = $db->query('SELECT DISTINCT poster_id, poster FROM '.$db->prefix.'posts WHERE poster_ip=\''.$db->escape($ip).'\' ORDER BY poster ASC LIMIT '.$start_from.', 50') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());	$num_posts = $db->num_rows($result);	if ($num_posts)	{		$posters = $poster_ids = array();		while ($cur_poster = $db->fetch_assoc($result))		{			$posters[] = $cur_poster;			$poster_ids[] = $cur_poster['poster_id'];		}		$result = $db->query('SELECT u.id, u.username, u.email, u.title, u.num_posts, u.admin_note, g.g_id, g.g_user_title FROM '.$db->prefix.'users AS u INNER JOIN '.$db->prefix.'groups AS g ON g.g_id=u.group_id WHERE u.id>1 AND u.id IN('.implode(',', $poster_ids).')') or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());		$user_data = array();		while ($cur_user = $db->fetch_assoc($result))			$user_data[$cur_user['id']] = $cur_user;		// Loop through users and print out some info		foreach ($posters as $cur_poster)		{			if (isset($user_data[$cur_poster['poster_id']]))			{				$user_title = get_title($user_data[$cur_poster['poster_id']]);				$actions = '<a href="admin_users.php?ip_stats='.$user_data[$cur_poster['poster_id']]['id'].'">'.$lang_admin_users['Results view IP link'].'</a> | <a href="search.php?action=show_user_posts&amp;user_id='.$user_data[$cur_poster['poster_id']]['id'].'">'.$lang_admin_users['Results show posts link'].'</a>';?>				<tr>					<td class="tcl"><?php echo '<a href="profile.php?id='.$user_data[$cur_poster['poster_id']]['id'].'">'.pun_htmlspecialchars($user_data[$cur_poster['poster_id']]['username']).'</a>' ?></td>					<td class="tc2"><a href="mailto:<?php echo $user_data[$cur_poster['poster_id']]['email'] ?>"><?php echo $user_data[$cur_poster['poster_id']]['email'] ?></a></td>					<td class="tc3"><?php echo $user_title ?></td>					<td class="tc4"><?php echo forum_number_format($user_data[$cur_poster['poster_id']]['num_posts']) ?></td>					<td class="tc5"><?php echo ($user_data[$cur_poster['poster_id']]['admin_note'] != '') ? pun_htmlspecialchars($user_data[$cur_poster['poster_id']]['admin_note']) : '&#160;' ?></td>					<td class="tcr"><?php echo $actions ?></td>				</tr><?php			}			else			{?>				<tr>					<td class="tcl"><?php echo pun_htmlspecialchars($cur_poster['poster']) ?></td>					<td class="tc2">&#160;</td>					<td class="tc3"><?php echo $lang_admin_users['Results guest'] ?></td>					<td class="tc4">&#160;</td>					<td class="tc5">&#160;</td>					<td class="tcr">&#160;</td>				</tr><?php			}		}	}	else		echo "\t\t\t\t".'<tr><td class="tcl" colspan="6">'.$lang_admin_users['Results no IP found'].'</td></tr>'."\n";?>			</tbody>			</table>		</div>	</div></div><div class="linksb">	<div class="inbox crumbsplus">		<div class="pagepost">			<p class="pagelink"><?php echo $paging_links ?></p>		</div>		<ul class="crumbs">			<li><a href="admin_index.php"><?php echo $lang_admin_common['Admin'].' '.$lang_admin_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="admin_users.php"><?php echo $lang_admin_common['Users'] ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_admin_users['Results head'] ?></strong></li>		</ul>		<div class="clearer"></div>	</div></div><?php	require PUN_ROOT.'footer.php';}// Move multiple users to other user groupselse if (isset($_POST['move_users']) || isset($_POST['move_users_comply'])){	if ($pun_user['g_id'] > PUN_ADMIN)		message($lang_common['No permission'], false, '403 Forbidden');	confirm_referrer('admin_users.php');	if (isset($_POST['users']))	{		$user_ids = is_array($_POST['users']) ? array_keys($_POST['users']) : explode(',', $_POST['users']);		$user_ids = array_map('intval', $user_ids);		// Delete invalid IDs		$user_ids = array_diff($user_ids, array(0, 1));	}	else		$user_ids = array();	if (empty($user_ids))		message($lang_admin_users['No users selected']);	// Are we trying to batch move any admins?	$result = $db->query('SELECT COUNT(*) FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).') AND group_id='.PUN_ADMIN) or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());	if ($db->result($result) > 0)		message($lang_admin_users['No move admins message']);	// Fetch all user groups	$all_groups = array();	$result = $db->query('SELECT g_id, g_title FROM '.$db->prefix.'groups WHERE g_id NOT IN ('.PUN_GUEST.','.PUN_ADMIN.') ORDER BY g_title ASC') or error('Unable to fetch groups', __FILE__, __LINE__, $db->error());	while ($row = $db->fetch_row($result))		$all_groups[$row[0]] = $row[1];	if (isset($_POST['move_users_comply']))	{		$new_group = isset($_POST['new_group']) && isset($all_groups[$_POST['new_group']]) ? $_POST['new_group'] : message($lang_admin_users['Invalid group message']);		// Is the new group a moderator group?		$result = $db->query('SELECT g_moderator FROM '.$db->prefix.'groups WHERE g_id='.$new_group) or error('Unable to fetch group info', __FILE__, __LINE__, $db->error());		$new_group_mod = $db->result($result);		// Fetch user groups		$user_groups = array();		$result = $db->query('SELECT id, group_id FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).')') or error('Unable to fetch user groups', __FILE__, __LINE__, $db->error());		while ($cur_user = $db->fetch_assoc($result))		{			if (!isset($user_groups[$cur_user['group_id']]))				$user_groups[$cur_user['group_id']] = array();			$user_groups[$cur_user['group_id']][] = $cur_user['id'];		}		// Are any users moderators?		$group_ids = array_keys($user_groups);		$result = $db->query('SELECT g_id, g_moderator FROM '.$db->prefix.'groups WHERE g_id IN ('.implode(',', $group_ids).')') or error('Unable to fetch group moderators', __FILE__, __LINE__, $db->error());		while ($cur_group = $db->fetch_assoc($result))		{			if ($cur_group['g_moderator'] == '0')				unset($user_groups[$cur_group['g_id']]);		}		if (!empty($user_groups) && $new_group != PUN_ADMIN && $new_group_mod != '1')		{			// Fetch forum list and clean up their moderator list			$result = $db->query('SELECT id, moderators FROM '.$db->prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db->error());			while ($cur_forum = $db->fetch_assoc($result))			{				$cur_moderators = ($cur_forum['moderators'] != '') ? unserialize($cur_forum['moderators']) : array();				foreach ($user_groups as $group_users)					$cur_moderators = array_diff($cur_moderators, $group_users);				$cur_moderators = (!empty($cur_moderators)) ? '\''.$db->escape(serialize($cur_moderators)).'\'' : 'NULL';				$db->query('UPDATE '.$db->prefix.'forums SET moderators='.$cur_moderators.' WHERE id='.$cur_forum['id']) or error('Unable to update forum', __FILE__, __LINE__, $db->error());			}		}		// Change user group		$db->query('UPDATE '.$db->prefix.'users SET group_id='.$new_group.' WHERE id IN ('.implode(',', $user_ids).')') or error('Unable to change user group', __FILE__, __LINE__, $db->error());		redirect('admin_users.php', $lang_admin_users['Users move redirect']);	}	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Users'], $lang_admin_users['Move users']);	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('users');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_users['Move users'] ?></span></h2>		<div class="box">			<form name="confirm_move_users" method="post" action="admin_users.php">				<input type="hidden" name="users" value="<?php echo implode(',', $user_ids) ?>" />				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_users['Move users subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_users['New group label'] ?></th>									<td>										<select name="new_group" tabindex="1"><?php foreach ($all_groups as $gid => $group) : ?>											<option value="<?php echo $gid ?>"><?php echo pun_htmlspecialchars($group) ?></option><?php endforeach; ?>										</select>										<span><?php echo $lang_admin_users['New group help'] ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>				<p class="submitend"><input type="submit" name="move_users_comply" value="<?php echo $lang_admin_common['Save'] ?>" tabindex="2" /></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}// Delete multiple userselse if (isset($_POST['delete_users']) || isset($_POST['delete_users_comply'])){	if ($pun_user['g_id'] > PUN_ADMIN)		message($lang_common['No permission'], false, '403 Forbidden');	confirm_referrer('admin_users.php');	if (isset($_POST['users']))	{		$user_ids = is_array($_POST['users']) ? array_keys($_POST['users']) : explode(',', $_POST['users']);		$user_ids = array_map('intval', $user_ids);		// Delete invalid IDs		$user_ids = array_diff($user_ids, array(0, 1));	}	else		$user_ids = array();	if (empty($user_ids))		message($lang_admin_users['No users selected']);	// Are we trying to delete any admins?	$result = $db->query('SELECT COUNT(*) FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).') AND group_id='.PUN_ADMIN) or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());	if ($db->result($result) > 0)		message($lang_admin_users['No delete admins message']);	if (isset($_POST['delete_users_comply']))	{		// Fetch user groups		$user_groups = array();		$result = $db->query('SELECT id, group_id FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).')') or error('Unable to fetch user groups', __FILE__, __LINE__, $db->error());		while ($cur_user = $db->fetch_assoc($result))		{			if (!isset($user_groups[$cur_user['group_id']]))				$user_groups[$cur_user['group_id']] = array();			$user_groups[$cur_user['group_id']][] = $cur_user['id'];		}		// Are any users moderators?		$group_ids = array_keys($user_groups);		$result = $db->query('SELECT g_id, g_moderator FROM '.$db->prefix.'groups WHERE g_id IN ('.implode(',', $group_ids).')') or error('Unable to fetch group moderators', __FILE__, __LINE__, $db->error());		while ($cur_group = $db->fetch_assoc($result))		{			if ($cur_group['g_moderator'] == '0')				unset($user_groups[$cur_group['g_id']]);		}		// Fetch forum list and clean up their moderator list		$result = $db->query('SELECT id, moderators FROM '.$db->prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db->error());		while ($cur_forum = $db->fetch_assoc($result))		{			$cur_moderators = ($cur_forum['moderators'] != '') ? unserialize($cur_forum['moderators']) : array();			foreach ($user_groups as $group_users)				$cur_moderators = array_diff($cur_moderators, $group_users);			$cur_moderators = (!empty($cur_moderators)) ? '\''.$db->escape(serialize($cur_moderators)).'\'' : 'NULL';			$db->query('UPDATE '.$db->prefix.'forums SET moderators='.$cur_moderators.' WHERE id='.$cur_forum['id']) or error('Unable to update forum', __FILE__, __LINE__, $db->error());		}		// Delete any subscriptions		$db->query('DELETE FROM '.$db->prefix.'topic_subscriptions WHERE user_id IN ('.implode(',', $user_ids).')') or error('Unable to delete topic subscriptions', __FILE__, __LINE__, $db->error());		$db->query('DELETE FROM '.$db->prefix.'forum_subscriptions WHERE user_id IN ('.implode(',', $user_ids).')') or error('Unable to delete forum subscriptions', __FILE__, __LINE__, $db->error());		// Remove them from the online list (if they happen to be logged in)		$db->query('DELETE FROM '.$db->prefix.'online WHERE user_id IN ('.implode(',', $user_ids).')') or error('Unable to remove users from online list', __FILE__, __LINE__, $db->error());		// Should we delete all posts made by these users?		if (isset($_POST['delete_posts']))		{			require PUN_ROOT.'include/search_idx.php';			@set_time_limit(0);			// Find all posts made by this user			$result = $db->query('SELECT p.id, p.topic_id, t.forum_id FROM '.$db->prefix.'posts AS p INNER JOIN '.$db->prefix.'topics AS t ON t.id=p.topic_id INNER JOIN '.$db->prefix.'forums AS f ON f.id=t.forum_id WHERE p.poster_id IN ('.implode(',', $user_ids).')') or error('Unable to fetch posts', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result))			{				while ($cur_post = $db->fetch_assoc($result))				{					// Determine whether this post is the "topic post" or not					$result2 = $db->query('SELECT id FROM '.$db->prefix.'posts WHERE topic_id='.$cur_post['topic_id'].' ORDER BY posted LIMIT 1') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());					if ($db->result($result2) == $cur_post['id'])						delete_topic($cur_post['topic_id']);					else						delete_post($cur_post['id'], $cur_post['topic_id']);					update_forum($cur_post['forum_id']);				}			}		}		else			// Set all their posts to guest			$db->query('UPDATE '.$db->prefix.'posts SET poster_id=1 WHERE poster_id IN ('.implode(',', $user_ids).')') or error('Unable to update posts', __FILE__, __LINE__, $db->error());		// Delete the users		$db->query('DELETE FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).')') or error('Unable to delete users', __FILE__, __LINE__, $db->error());		// Delete user avatars		foreach ($user_ids as $user_id)			delete_avatar($user_id);		// Regenerate the users info cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_users_info_cache();		redirect('admin_users.php', $lang_admin_users['Users delete redirect']);	}	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Users'], $lang_admin_users['Delete users']);	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('users');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_users['Delete users'] ?></span></h2>		<div class="box">			<form name="confirm_del_users" method="post" action="admin_users.php">				<input type="hidden" name="users" value="<?php echo implode(',', $user_ids) ?>" />				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_users['Confirm delete legend'] ?></legend>						<div class="infldset">							<p><?php echo $lang_admin_users['Confirm delete info'] ?></p>							<div class="rbox">								<label><input type="checkbox" name="delete_posts" value="1" checked="checked" /><?php echo $lang_admin_users['Delete posts'] ?><br /></label>							</div>							<p class="warntext"><strong><?php echo $lang_admin_users['Delete warning'] ?></strong></p>						</div>					</fieldset>				</div>				<p class="buttons"><input type="submit" name="delete_users_comply" value="<?php echo $lang_admin_users['Delete'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_admin_common['Go back'] ?></a></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}// Ban multiple userselse if (isset($_POST['ban_users']) || isset($_POST['ban_users_comply'])){	if ($pun_user['g_id'] != PUN_ADMIN && ($pun_user['g_moderator'] != '1' || $pun_user['g_mod_ban_users'] == '0'))		message($lang_common['No permission'], false, '403 Forbidden');	confirm_referrer('admin_users.php');	if (isset($_POST['users']))	{		$user_ids = is_array($_POST['users']) ? array_keys($_POST['users']) : explode(',', $_POST['users']);		$user_ids = array_map('intval', $user_ids);		// Delete invalid IDs		$user_ids = array_diff($user_ids, array(0, 1));	}	else		$user_ids = array();	if (empty($user_ids))		message($lang_admin_users['No users selected']);	// Are we trying to ban any admins?	$result = $db->query('SELECT COUNT(*) FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).') AND group_id='.PUN_ADMIN) or error('Unable to fetch group info', __FILE__, __LINE__, $db->error());	if ($db->result($result) > 0)		message($lang_admin_users['No ban admins message']);	// Also, we cannot ban moderators	$result = $db->query('SELECT COUNT(*) FROM '.$db->prefix.'users AS u INNER JOIN '.$db->prefix.'groups AS g ON u.group_id=g.g_id WHERE g.g_moderator=1 AND u.id IN ('.implode(',', $user_ids).')') or error('Unable to fetch moderator group info', __FILE__, __LINE__, $db->error());	if ($db->result($result) > 0)		message($lang_admin_users['No ban mods message']);	if (isset($_POST['ban_users_comply']))	{		$ban_message = pun_trim($_POST['ban_message']);		$ban_expire = pun_trim($_POST['ban_expire']);		$ban_the_ip = isset($_POST['ban_the_ip']) ? intval($_POST['ban_the_ip']) : 0;		if ($ban_expire != '' && $ban_expire != 'Never')		{			$ban_expire = strtotime($ban_expire.' GMT');			if ($ban_expire == -1 || !$ban_expire)				message($lang_admin_users['Invalid date message'].' '.$lang_admin_users['Invalid date reasons']);			$diff = ($pun_user['timezone'] + $pun_user['dst']) * 3600;			$ban_expire -= $diff;			if ($ban_expire <= time())				message($lang_admin_users['Invalid date message'].' '.$lang_admin_users['Invalid date reasons']);		}		else			$ban_expire = 'NULL';		$ban_message = ($ban_message != '') ? '\''.$db->escape($ban_message).'\'' : 'NULL';		// Fetch user information		$user_info = array();		$result = $db->query('SELECT id, username, email, registration_ip FROM '.$db->prefix.'users WHERE id IN ('.implode(',', $user_ids).')') or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());		while ($cur_user = $db->fetch_assoc($result))			$user_info[$cur_user['id']] = array('username' => $cur_user['username'], 'email' => $cur_user['email'], 'ip' => $cur_user['registration_ip']);		// Overwrite the registration IP with one from the last post (if it exists)		if ($ban_the_ip != 0)		{			$result = $db->query('SELECT p.poster_id, p.poster_ip FROM '.$db->prefix.'posts AS p INNER JOIN (SELECT MAX(id) AS id FROM '.$db->prefix.'posts WHERE poster_id IN ('.implode(',', $user_ids).') GROUP BY poster_id) AS i ON p.id=i.id') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());			while ($cur_address = $db->fetch_assoc($result))				$user_info[$cur_address['poster_id']]['ip'] = $cur_address['poster_ip'];		}		// And insert the bans!		foreach ($user_ids as $user_id)		{			$ban_username = '\''.$db->escape($user_info[$user_id]['username']).'\'';			$ban_email = '\''.$db->escape($user_info[$user_id]['email']).'\'';			$ban_ip = ($ban_the_ip != 0) ? '\''.$db->escape($user_info[$user_id]['ip']).'\'' : 'NULL';			$db->query('INSERT INTO '.$db->prefix.'bans (username, ip, email, message, expire, ban_creator) VALUES('.$ban_username.', '.$ban_ip.', '.$ban_email.', '.$ban_message.', '.$ban_expire.', '.$pun_user['id'].')') or error('Unable to add ban', __FILE__, __LINE__, $db->error());		}		// Regenerate the bans cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_bans_cache();		redirect('admin_users.php', $lang_admin_users['Users banned redirect']);	}	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Bans']);	$focus_element = array('bans2', 'ban_message');	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('users');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_users['Ban users'] ?></span></h2>		<div class="box">			<form id="bans2" name="confirm_ban_users" method="post" action="admin_users.php">				<input type="hidden" name="users" value="<?php echo implode(',', $user_ids) ?>" />				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_users['Message expiry subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_users['Ban message label'] ?></th>									<td>										<input type="text" name="ban_message" size="50" maxlength="255" tabindex="1" />										<span><?php echo $lang_admin_users['Ban message help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Expire date label'] ?></th>									<td>										<input type="text" name="ban_expire" size="17" maxlength="10" tabindex="2" />										<span><?php echo $lang_admin_users['Expire date help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Ban IP label'] ?></th>									<td>										<label class="conl"><input type="radio" name="ban_the_ip" tabindex="3" value="1" checked="checked" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="ban_the_ip" tabindex="4" value="0" checked="checked" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_users['Ban IP help'] ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>				<p class="submitend"><input type="submit" name="ban_users_comply" value="<?php echo $lang_admin_common['Save'] ?>" tabindex="3" /></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}else if (isset($_GET['find_user'])){	$form = isset($_GET['form']) ? $_GET['form'] : array();	// trim() all elements in $form	$form = array_map('pun_trim', $form);	$conditions = $query_str = array();	$posts_greater = isset($_GET['posts_greater']) ? pun_trim($_GET['posts_greater']) : '';	$posts_less = isset($_GET['posts_less']) ? pun_trim($_GET['posts_less']) : '';	$last_post_after = isset($_GET['last_post_after']) ? pun_trim($_GET['last_post_after']) : '';	$last_post_before = isset($_GET['last_post_before']) ? pun_trim($_GET['last_post_before']) : '';	$last_visit_after = isset($_GET['last_visit_after']) ? pun_trim($_GET['last_visit_after']) : '';	$last_visit_before = isset($_GET['last_visit_before']) ? pun_trim($_GET['last_visit_before']) : '';	$registered_after = isset($_GET['registered_after']) ? pun_trim($_GET['registered_after']) : '';	$registered_before = isset($_GET['registered_before']) ? pun_trim($_GET['registered_before']) : '';	$order_by = isset($_GET['order_by']) && in_array($_GET['order_by'], array('username', 'email', 'num_posts', 'last_post', 'last_visit', 'registered')) ? $_GET['order_by'] : 'username';	$direction = isset($_GET['direction']) && $_GET['direction'] == 'DESC' ? 'DESC' : 'ASC';	$user_group = isset($_GET['user_group']) ? intval($_GET['user_group']) : -1;	$query_str[] = 'order_by='.$order_by;	$query_str[] = 'direction='.$direction;	$query_str[] = 'user_group='.$user_group;	if (preg_match('%[^0-9]%', $posts_greater.$posts_less))		message($lang_admin_users['Non numeric message']);	// Try to convert date/time to timestamps	if ($last_post_after != '')	{		$query_str[] = 'last_post_after='.$last_post_after;		$last_post_after = strtotime($last_post_after);		if ($last_post_after === false || $last_post_after == -1)			message($lang_admin_users['Invalid date time message']);		$conditions[] = 'u.last_post>'.$last_post_after;	}	if ($last_post_before != '')	{		$query_str[] = 'last_post_before='.$last_post_before;		$last_post_before = strtotime($last_post_before);		if ($last_post_before === false || $last_post_before == -1)			message($lang_admin_users['Invalid date time message']);		$conditions[] = 'u.last_post<'.$last_post_before;	}	if ($last_visit_after != '')	{		$query_str[] = 'last_visit_after='.$last_visit_after;		$last_visit_after = strtotime($last_visit_after);		if ($last_visit_after === false || $last_visit_after == -1)			message($lang_admin_users['Invalid date time message']);		$conditions[] = 'u.last_visit>'.$last_visit_after;	}	if ($last_visit_before != '')	{		$query_str[] = 'last_visit_before='.$last_visit_before;		$last_visit_before = strtotime($last_visit_before);		if ($last_visit_before === false || $last_visit_before == -1)			message($lang_admin_users['Invalid date time message']);		$conditions[] = 'u.last_visit<'.$last_visit_before;	}	if ($registered_after != '')	{		$query_str[] = 'registered_after='.$registered_after;		$registered_after = strtotime($registered_after);		if ($registered_after === false || $registered_after == -1)			message($lang_admin_users['Invalid date time message']);		$conditions[] = 'u.registered>'.$registered_after;	}	if ($registered_before != '')	{		$query_str[] = 'registered_before='.$registered_before;		$registered_before = strtotime($registered_before);		if ($registered_before === false || $registered_before == -1)			message($lang_admin_users['Invalid date time message']);		$conditions[] = 'u.registered<'.$registered_before;	}	$like_command = ($db_type == 'pgsql') ? 'ILIKE' : 'LIKE';	foreach ($form as $key => $input)	{		if ($input != '' && in_array($key, array('username', 'email', 'title', 'realname', 'url', 'jabber', 'icq', 'msn', 'aim', 'yahoo', 'location', 'signature', 'admin_note')))		{			$conditions[] = 'u.'.$db->escape($key).' '.$like_command.' \''.$db->escape(str_replace('*', '%', $input)).'\'';			$query_str[] = 'form%5B'.$key.'%5D='.urlencode($input);		}	}	if ($posts_greater != '')	{		$query_str[] = 'posts_greater='.$posts_greater;		$conditions[] = 'u.num_posts>'.$posts_greater;	}	if ($posts_less != '')	{		$query_str[] = 'posts_less='.$posts_less;		$conditions[] = 'u.num_posts<'.$posts_less;	}	if ($user_group > -1)		$conditions[] = 'u.group_id='.$user_group;	// Fetch user count	$result = $db->query('SELECT COUNT(id) FROM '.$db->prefix.'users AS u LEFT JOIN '.$db->prefix.'groups AS g ON g.g_id=u.group_id WHERE u.id>1'.(!empty($conditions) ? ' AND '.implode(' AND ', $conditions) : '')) or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());	$num_users = $db->result($result);	// Determine the user offset (based on $_GET['p'])	$num_pages = ceil($num_users / 50);	$p = (!isset($_GET['p']) || $_GET['p'] <= 1 || $_GET['p'] > $num_pages) ? 1 : intval($_GET['p']);	$start_from = 50 * ($p - 1);	// Generate paging links	$paging_links = '<span class="pages-label">'.$lang_common['Pages'].' </span>'.paginate($num_pages, $p, 'admin_users.php?find_user=&amp;'.implode('&amp;', $query_str));	// Some helper variables for permissions	$can_delete = $can_move = $pun_user['g_id'] == PUN_ADMIN;	$can_ban = $pun_user['g_id'] == PUN_ADMIN || ($pun_user['g_moderator'] == '1' && $pun_user['g_mod_ban_users'] == '1');	$can_action = ($can_delete || $can_ban || $can_move) && $num_users > 0;	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Users'], $lang_admin_users['Results head']);	$page_head = array('js' => '<script type="text/javascript" src="common.js"></script>');	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';?><div class="linkst">	<div class="inbox crumbsplus">		<ul class="crumbs">			<li><a href="admin_index.php"><?php echo $lang_admin_common['Admin'].' '.$lang_admin_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="admin_users.php"><?php echo $lang_admin_common['Users'] ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_admin_users['Results head'] ?></strong></li>		</ul>		<div class="pagepost">			<p class="pagelink"><?php echo $paging_links ?></p>		</div>		<div class="clearer"></div>	</div></div><form id="search-users-form" action="admin_users.php" method="post"><div id="users2" class="blocktable">	<h2><span><?php echo $lang_admin_users['Results head'] ?></span></h2>	<div class="box">		<div class="inbox">			<table cellspacing="0">			<thead>				<tr>					<th class="tcl" scope="col"><?php echo $lang_admin_users['Results username head'] ?></th>					<th class="tc2" scope="col"><?php echo $lang_admin_users['Results e-mail head'] ?></th>					<th class="tc3" scope="col"><?php echo $lang_admin_users['Results title head'] ?></th>					<th class="tc4" scope="col"><?php echo $lang_admin_users['Results posts head'] ?></th>					<th class="tc5" scope="col"><?php echo $lang_admin_users['Results admin note head'] ?></th>					<th class="tcr" scope="col"><?php echo $lang_admin_users['Results actions head'] ?></th><?php if ($can_action): ?>					<th class="tcmod" scope="col"><?php echo $lang_admin_users['Select'] ?></th><?php endif; ?>				</tr>			</thead>			<tbody><?php	$result = $db->query('SELECT u.id, u.username, u.email, u.title, u.num_posts, u.admin_note, g.g_id, g.g_user_title FROM '.$db->prefix.'users AS u LEFT JOIN '.$db->prefix.'groups AS g ON g.g_id=u.group_id WHERE u.id>1'.(!empty($conditions) ? ' AND '.implode(' AND ', $conditions) : '').' ORDER BY '.$db->escape($order_by).' '.$db->escape($direction).' LIMIT '.$start_from.', 50') or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());	if ($db->num_rows($result))	{		while ($user_data = $db->fetch_assoc($result))		{			$user_title = get_title($user_data);			// This script is a special case in that we want to display "Not verified" for non-verified users			if (($user_data['g_id'] == '' || $user_data['g_id'] == PUN_UNVERIFIED) && $user_title != $lang_common['Banned'])				$user_title = '<span class="warntext">'.$lang_admin_users['Not verified'].'</span>';			$actions = '<a href="admin_users.php?ip_stats='.$user_data['id'].'">'.$lang_admin_users['Results view IP link'].'</a> | <a href="search.php?action=show_user_posts&amp;user_id='.$user_data['id'].'">'.$lang_admin_users['Results show posts link'].'</a>';?>				<tr>					<td class="tcl"><?php echo '<a href="profile.php?id='.$user_data['id'].'">'.pun_htmlspecialchars($user_data['username']).'</a>' ?></td>					<td class="tc2"><a href="mailto:<?php echo $user_data['email'] ?>"><?php echo $user_data['email'] ?></a></td>					<td class="tc3"><?php echo $user_title ?></td>					<td class="tc4"><?php echo forum_number_format($user_data['num_posts']) ?></td>					<td class="tc5"><?php echo ($user_data['admin_note'] != '') ? pun_htmlspecialchars($user_data['admin_note']) : '&#160;' ?></td>					<td class="tcr"><?php echo $actions ?></td><?php if ($can_action): ?>					<td class="tcmod"><input type="checkbox" name="users[<?php echo $user_data['id'] ?>]" value="1" /></td><?php endif; ?>				</tr><?php		}	}	else		echo "\t\t\t\t".'<tr><td class="tcl" colspan="6">'.$lang_admin_users['No match'].'</td></tr>'."\n";?>			</tbody>			</table>		</div>	</div></div><div class="linksb">	<div class="inbox crumbsplus">		<div class="pagepost">			<p class="pagelink"><?php echo $paging_links ?></p><?php if ($can_action): ?>			<p class="conr modbuttons"><a href="#" onclick="return select_checkboxes('search-users-form', this, '<?php echo $lang_admin_users['Unselect all'] ?>')"><?php echo $lang_admin_users['Select all'] ?></a> <?php if ($can_ban) : ?><input type="submit" name="ban_users" value="<?php echo $lang_admin_users['Ban'] ?>" /><?php endif; if ($can_delete) : ?><input type="submit" name="delete_users" value="<?php echo $lang_admin_users['Delete'] ?>" /><?php endif; if ($can_move) : ?><input type="submit" name="move_users" value="<?php echo $lang_admin_users['Change group'] ?>" /><?php endif; ?></p><?php endif; ?>		</div>		<ul class="crumbs">			<li><a href="admin_index.php"><?php echo $lang_admin_common['Admin'].' '.$lang_admin_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="admin_users.php"><?php echo $lang_admin_common['Users'] ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_admin_users['Results head'] ?></strong></li>		</ul>		<div class="clearer"></div>	</div></div></form><?php	require PUN_ROOT.'footer.php';}else{	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Users']);	$focus_element = array('find_user', 'form[username]');	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('users');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_users['User search head'] ?></span></h2>		<div class="box">			<form id="find_user" method="get" action="admin_users.php">				<p class="submittop"><input type="submit" name="find_user" value="<?php echo $lang_admin_users['Submit search'] ?>" tabindex="1" /></p>				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_users['User search subhead'] ?></legend>						<div class="infldset">							<p><?php echo $lang_admin_users['User search info'] ?></p>							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_users['Username label'] ?></th>									<td><input type="text" name="form[username]" size="25" maxlength="25" tabindex="2" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['E-mail address label'] ?></th>									<td><input type="text" name="form[email]" size="30" maxlength="80" tabindex="3" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Title label'] ?></th>									<td><input type="text" name="form[title]" size="30" maxlength="50" tabindex="4" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Real name label'] ?></th>									<td><input type="text" name="form[realname]" size="30" maxlength="40" tabindex="5" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Website label'] ?></th>									<td><input type="text" name="form[url]" size="35" maxlength="100" tabindex="6" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Jabber label'] ?></th>									<td><input type="text" name="form[jabber]" size="30" maxlength="75" tabindex="7" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['ICQ label'] ?></th>									<td><input type="text" name="form[icq]" size="12" maxlength="12" tabindex="8" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['MSN label'] ?></th>									<td><input type="text" name="form[msn]" size="30" maxlength="50" tabindex="9" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['AOL label'] ?></th>									<td><input type="text" name="form[aim]" size="20" maxlength="20" tabindex="10" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Yahoo label'] ?></th>									<td><input type="text" name="form[yahoo]" size="20" maxlength="20" tabindex="11" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Location label'] ?></th>									<td><input type="text" name="form[location]" size="30" maxlength="30" tabindex="12" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Signature label'] ?></th>									<td><input type="text" name="form[signature]" size="35" maxlength="512" tabindex="13" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Admin note label'] ?></th>									<td><input type="text" name="form[admin_note]" size="30" maxlength="30" tabindex="14" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Posts more than label'] ?></th>									<td><input type="text" name="posts_greater" size="5" maxlength="8" tabindex="15" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Posts less than label'] ?></th>									<td><input type="text" name="posts_less" size="5" maxlength="8" tabindex="16" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Last post after label'] ?></th>									<td><input type="text" name="last_post_after" size="24" maxlength="19" tabindex="17" />									<span><?php echo $lang_admin_users['Date help'] ?></span></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Last post before label'] ?></th>									<td><input type="text" name="last_post_before" size="24" maxlength="19" tabindex="18" />									<span><?php echo $lang_admin_users['Date help'] ?></span></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Last visit after label'] ?></th>									<td><input type="text" name="last_visit_after" size="24" maxlength="19" tabindex="17" />									<span><?php echo $lang_admin_users['Date help'] ?></span></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Last visit before label'] ?></th>									<td><input type="text" name="last_visit_before" size="24" maxlength="19" tabindex="18" />									<span><?php echo $lang_admin_users['Date help'] ?></span></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Registered after label'] ?></th>									<td><input type="text" name="registered_after" size="24" maxlength="19" tabindex="19" />									<span><?php echo $lang_admin_users['Date help'] ?></span></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Registered before label'] ?></th>									<td><input type="text" name="registered_before" size="24" maxlength="19" tabindex="20" />									<span><?php echo $lang_admin_users['Date help'] ?></span></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['Order by label'] ?></th>									<td>										<select name="order_by" tabindex="21">											<option value="username" selected="selected"><?php echo $lang_admin_users['Order by username'] ?></option>											<option value="email"><?php echo $lang_admin_users['Order by e-mail'] ?></option>											<option value="num_posts"><?php echo $lang_admin_users['Order by posts'] ?></option>											<option value="last_post"><?php echo $lang_admin_users['Order by last post'] ?></option>											<option value="last_visit"><?php echo $lang_admin_users['Order by last visit'] ?></option>											<option value="registered"><?php echo $lang_admin_users['Order by registered'] ?></option>										</select>&#160;&#160;&#160;<select name="direction" tabindex="22">											<option value="ASC" selected="selected"><?php echo $lang_admin_users['Ascending'] ?></option>											<option value="DESC"><?php echo $lang_admin_users['Descending'] ?></option>										</select>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_users['User group label'] ?></th>									<td>										<select name="user_group" tabindex="23">											<option value="-1" selected="selected"><?php echo $lang_admin_users['All groups'] ?></option>											<option value="0"><?php echo $lang_admin_users['Unverified users'] ?></option><?php	$result = $db->query('SELECT g_id, g_title FROM '.$db->prefix.'groups WHERE g_id!='.PUN_GUEST.' ORDER BY g_title') or error('Unable to fetch user group list', __FILE__, __LINE__, $db->error());	while ($cur_group = $db->fetch_assoc($result))		echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";?>										</select>									</td>								</tr>							</table>						</div>					</fieldset>				</div>				<p class="submitend"><input type="submit" name="find_user" value="<?php echo $lang_admin_users['Submit search'] ?>" tabindex="25" /></p>			</form>		</div>		<h2 class="block2"><span><?php echo $lang_admin_users['IP search head'] ?></span></h2>		<div class="box">			<form method="get" action="admin_users.php">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_users['IP search subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_users['IP address label'] ?><div><input type="submit" value="<?php echo $lang_admin_users['Find IP address'] ?>" tabindex="26" /></div></th>									<td><input type="text" name="show_users" size="18" maxlength="15" tabindex="24" />									<span><?php echo $lang_admin_users['IP address help'] ?></span></td>								</tr>							</table>						</div>					</fieldset>				</div>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';// This particular function doesn't require forum-based moderator access. It can be used// by all moderators and adminsif (isset($_GET['get_host'])){	if (!$pun_user['is_admmod'])		message($lang_common['No permission'], false, '403 Forbidden');	// Is get_host an IP address or a post ID?	if (@preg_match('%^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$%', $_GET['get_host']) || @preg_match('%^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$%', $_GET['get_host']))		$ip = $_GET['get_host'];	else	{		$get_host = intval($_GET['get_host']);		if ($get_host < 1)			message($lang_common['Bad request']);		$result = $db->query('SELECT poster_ip FROM '.$db->prefix.'posts WHERE id='.$get_host) or error('Unable to fetch post IP address', __FILE__, __LINE__, $db->error());		if (!$db->num_rows($result))			message($lang_common['Bad request'], false, '404 Not Found');		$ip = $db->result($result);	}	// Load the misc.php language file	require PUN_ROOT.'lang/'.$pun_user['language'].'/misc.php';	message(sprintf($lang_misc['Host info 1'], $ip).'<br />'.sprintf($lang_misc['Host info 2'], @gethostbyaddr($ip)).'<br /><br /><a href="admin_users.php?show_users='.$ip.'">'.$lang_misc['Show more users'].'</a>');}// All other functions require moderator/admin access$fid = isset($_GET['fid']) ? intval($_GET['fid']) : 0;if ($fid < 1)	message($lang_common['Bad request'], false, '404 Not Found');$result = $db->query('SELECT moderators FROM '.$db->prefix.'forums WHERE id='.$fid) or error('Unable to fetch forum info', __FILE__, __LINE__, $db->error());$moderators = $db->result($result);$mods_array = ($moderators != '') ? unserialize($moderators) : array();if ($pun_user['g_id'] != PUN_ADMIN && ($pun_user['g_moderator'] == '0' || !array_key_exists($pun_user['username'], $mods_array)))	message($lang_common['No permission'], false, '403 Forbidden');// Get topic/forum tracking dataif (!$pun_user['is_guest'])	$tracked_topics = get_tracked_topics();// Load the misc.php language filerequire PUN_ROOT.'lang/'.$pun_user['language'].'/misc.php';// All other topic moderation features require a topic ID in GETif (isset($_GET['tid'])){	$tid = intval($_GET['tid']);	if ($tid < 1)		message($lang_common['Bad request'], false, '404 Not Found');	// Fetch some info about the topic	$result = $db->query('SELECT t.subject, t.num_replies, t.first_post_id, f.id AS forum_id, forum_name FROM '.$db->prefix.'topics AS t INNER JOIN '.$db->prefix.'forums AS f ON f.id=t.forum_id LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.forum_id=f.id AND fp.group_id='.$pun_user['g_id'].') WHERE (fp.read_forum IS NULL OR fp.read_forum=1) AND f.id='.$fid.' AND t.id='.$tid.' AND t.moved_to IS NULL') or error('Unable to fetch topic info', __FILE__, __LINE__, $db->error());	if (!$db->num_rows($result))		message($lang_common['Bad request'], false, '404 Not Found');	$cur_topic = $db->fetch_assoc($result);	// Delete one or more posts	if (isset($_POST['delete_posts']) || isset($_POST['delete_posts_comply']))	{		$posts = isset($_POST['posts']) ? $_POST['posts'] : array();		if (empty($posts))			message($lang_misc['No posts selected']);		if (isset($_POST['delete_posts_comply']))		{			confirm_referrer('moderate.php');			if (@preg_match('%[^0-9,]%', $posts))				message($lang_common['Bad request']);			// Verify that the post IDs are valid			$result = $db->query('SELECT 1 FROM '.$db->prefix.'posts WHERE id IN('.$posts.') AND topic_id='.$tid) or error('Unable to check posts', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result) != substr_count($posts, ',') + 1)				message($lang_common['Bad request']);			// Delete the posts			$db->query('DELETE FROM '.$db->prefix.'posts WHERE id IN('.$posts.')') or error('Unable to delete posts', __FILE__, __LINE__, $db->error());			require PUN_ROOT.'include/search_idx.php';			strip_search_index($posts);			// Get last_post, last_post_id, and last_poster for the topic after deletion			$result = $db->query('SELECT id, poster, posted FROM '.$db->prefix.'posts WHERE topic_id='.$tid.' ORDER BY id DESC LIMIT 1') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());			$last_post = $db->fetch_assoc($result);			// How many posts did we just delete?			$num_posts_deleted = substr_count($posts, ',') + 1;			// Update the topic			$db->query('UPDATE '.$db->prefix.'topics SET last_post='.$last_post['posted'].', last_post_id='.$last_post['id'].', last_poster=\''.$db->escape($last_post['poster']).'\', num_replies=num_replies-'.$num_posts_deleted.' WHERE id='.$tid) or error('Unable to update topic', __FILE__, __LINE__, $db->error());			update_forum($fid);			redirect('viewtopic.php?id='.$tid, $lang_misc['Delete posts redirect']);		}		$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_misc['Moderate']);		define('PUN_ACTIVE_PAGE', 'index');		require PUN_ROOT.'header.php';?><div class="blockform">	<h2><span><?php echo $lang_misc['Delete posts'] ?></span></h2>	<div class="box">		<form method="post" action="moderate.php?fid=<?php echo $fid ?>&amp;tid=<?php echo $tid ?>">			<div class="inform">				<fieldset>					<legend><?php echo $lang_misc['Confirm delete legend'] ?></legend>					<div class="infldset">						<input type="hidden" name="posts" value="<?php echo implode(',', array_map('intval', array_keys($posts))) ?>" />						<p><?php echo $lang_misc['Delete posts comply'] ?></p>					</div>				</fieldset>			</div>			<p class="buttons"><input type="submit" name="delete_posts_comply" value="<?php echo $lang_misc['Delete'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><?php		require PUN_ROOT.'footer.php';	}	else if (isset($_POST['split_posts']) || isset($_POST['split_posts_comply']))	{		$posts = isset($_POST['posts']) ? $_POST['posts'] : array();		if (empty($posts))			message($lang_misc['No posts selected']);		if (isset($_POST['split_posts_comply']))		{			confirm_referrer('moderate.php');			if (@preg_match('%[^0-9,]%', $posts))				message($lang_common['Bad request']);			$move_to_forum = isset($_POST['move_to_forum']) ? intval($_POST['move_to_forum']) : 0;			if ($move_to_forum < 1)				message($lang_common['Bad request']);			// How many posts did we just split off?			$num_posts_splitted = substr_count($posts, ',') + 1;			// Verify that the post IDs are valid			$result = $db->query('SELECT 1 FROM '.$db->prefix.'posts WHERE id IN('.$posts.') AND topic_id='.$tid) or error('Unable to check posts', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result) != $num_posts_splitted)				message($lang_common['Bad request']);			// Verify that the move to forum ID is valid			$result = $db->query('SELECT 1 FROM '.$db->prefix.'forums AS f LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.group_id='.$pun_user['g_id'].' AND fp.forum_id='.$move_to_forum.') WHERE f.redirect_url IS NULL AND (fp.post_topics IS NULL OR fp.post_topics=1)') or error('Unable to fetch forum permissions', __FILE__, __LINE__, $db->error());			if (!$db->num_rows($result))				message($lang_common['Bad request']);			// Load the post.php language file			require PUN_ROOT.'lang/'.$pun_user['language'].'/post.php';			// Check subject			$new_subject = isset($_POST['new_subject']) ? pun_trim($_POST['new_subject']) : '';			if ($new_subject == '')				message($lang_post['No subject']);			else if (pun_strlen($new_subject) > 70)				message($lang_post['Too long subject']);			// Get data from the new first post			$result = $db->query('SELECT p.id, p.poster, p.posted FROM '.$db->prefix.'posts AS p WHERE id IN('.$posts.') ORDER BY p.id ASC LIMIT 1') or error('Unable to get first post', __FILE__, __LINE__, $db->error());			$first_post_data = $db->fetch_assoc($result);			// Create the new topic			$db->query('INSERT INTO '.$db->prefix.'topics (poster, subject, posted, first_post_id, forum_id) VALUES (\''.$db->escape($first_post_data['poster']).'\', \''.$db->escape($new_subject).'\', '.$first_post_data['posted'].', '.$first_post_data['id'].', '.$move_to_forum.')') or error('Unable to create new topic', __FILE__, __LINE__, $db->error());			$new_tid = $db->insert_id();			// Move the posts to the new topic			$db->query('UPDATE '.$db->prefix.'posts SET topic_id='.$new_tid.' WHERE id IN('.$posts.')') or error('Unable to move posts into new topic', __FILE__, __LINE__, $db->error());			// Apply every subscription to both topics			$db->query('INSERT INTO '.$db->prefix.'topic_subscriptions (user_id, topic_id) SELECT user_id, '.$new_tid.' FROM '.$db->prefix.'topic_subscriptions WHERE topic_id='.$tid) or error('Unable to copy existing subscriptions', __FILE__, __LINE__, $db->error());			// Get last_post, last_post_id, and last_poster from the topic and update it			$result = $db->query('SELECT id, poster, posted FROM '.$db->prefix.'posts WHERE topic_id='.$tid.' ORDER BY id DESC LIMIT 1') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());			$last_post_data = $db->fetch_assoc($result);			$db->query('UPDATE '.$db->prefix.'topics SET last_post='.$last_post_data['posted'].', last_post_id='.$last_post_data['id'].', last_poster=\''.$db->escape($last_post_data['poster']).'\', num_replies=num_replies-'.$num_posts_splitted.' WHERE id='.$tid) or error('Unable to update topic', __FILE__, __LINE__, $db->error());			// Get last_post, last_post_id, and last_poster from the new topic and update it			$result = $db->query('SELECT id, poster, posted FROM '.$db->prefix.'posts WHERE topic_id='.$new_tid.' ORDER BY id DESC LIMIT 1') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());			$last_post_data = $db->fetch_assoc($result);			$db->query('UPDATE '.$db->prefix.'topics SET last_post='.$last_post_data['posted'].', last_post_id='.$last_post_data['id'].', last_poster=\''.$db->escape($last_post_data['poster']).'\', num_replies='.($num_posts_splitted-1).' WHERE id='.$new_tid) or error('Unable to update topic', __FILE__, __LINE__, $db->error());			update_forum($fid);			update_forum($move_to_forum);			redirect('viewtopic.php?id='.$new_tid, $lang_misc['Split posts redirect']);		}		$result = $db->query('SELECT c.id AS cid, c.cat_name, f.id AS fid, f.forum_name FROM '.$db->prefix.'categories AS c INNER JOIN '.$db->prefix.'forums AS f ON c.id=f.cat_id LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.forum_id=f.id AND fp.group_id='.$pun_user['g_id'].') WHERE (fp.post_topics IS NULL OR fp.post_topics=1) AND f.redirect_url IS NULL ORDER BY c.disp_position, c.id, f.disp_position') or error('Unable to fetch category/forum list', __FILE__, __LINE__, $db->error());		$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_misc['Moderate']);		$focus_element = array('subject','new_subject');		define('PUN_ACTIVE_PAGE', 'index');		require PUN_ROOT.'header.php';?><div class="blockform">	<h2><span><?php echo $lang_misc['Split posts'] ?></span></h2>	<div class="box">		<form id="subject" method="post" action="moderate.php?fid=<?php echo $fid ?>&amp;tid=<?php echo $tid ?>">			<div class="inform">				<fieldset>					<legend><?php echo $lang_misc['Confirm split legend'] ?></legend>					<div class="infldset">						<input type="hidden" name="posts" value="<?php echo implode(',', array_map('intval', array_keys($posts))) ?>" />						<label class="required"><strong><?php echo $lang_misc['New subject'] ?> <span><?php echo $lang_common['Required'] ?></span></strong><br /><input type="text" name="new_subject" size="80" maxlength="70" /><br /></label>						<label><?php echo $lang_misc['Move to'] ?>						<br /><select name="move_to_forum"><?php	$cur_category = 0;	while ($cur_forum = $db->fetch_assoc($result))	{		if ($cur_forum['cid'] != $cur_category) // A new category since last iteration?		{			if ($cur_category)				echo "\t\t\t\t\t\t\t".'</optgroup>'."\n";			echo "\t\t\t\t\t\t\t".'<optgroup label="'.pun_htmlspecialchars($cur_forum['cat_name']).'">'."\n";			$cur_category = $cur_forum['cid'];		}		echo "\t\t\t\t\t\t\t\t".'<option value="'.$cur_forum['fid'].'"'.($fid == $cur_forum['fid'] ? ' selected="selected"' : '').'>'.pun_htmlspecialchars($cur_forum['forum_name']).'</option>'."\n";	}?>							</optgroup>						</select>						<br /></label>						<p><?php echo $lang_misc['Split posts comply'] ?></p>					</div>				</fieldset>			</div>			<p class="buttons"><input type="submit" name="split_posts_comply" value="<?php echo $lang_misc['Split'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><?php		require PUN_ROOT.'footer.php';	}	// Show the moderate posts view	// Load the viewtopic.php language file	require PUN_ROOT.'lang/'.$pun_user['language'].'/topic.php';	// Used to disable the Move and Delete buttons if there are no replies to this topic	$button_status = ($cur_topic['num_replies'] == 0) ? ' disabled="disabled"' : '';	// Determine the post offset (based on $_GET['p'])	$num_pages = ceil(($cur_topic['num_replies'] + 1) / $pun_user['disp_posts']);	$p = (!isset($_GET['p']) || $_GET['p'] <= 1 || $_GET['p'] > $num_pages) ? 1 : intval($_GET['p']);	$start_from = $pun_user['disp_posts'] * ($p - 1);	// Generate paging links	$paging_links = '<span class="pages-label">'.$lang_common['Pages'].' </span>'.paginate($num_pages, $p, 'moderate.php?fid='.$fid.'&amp;tid='.$tid);	if ($pun_config['o_censoring'] == '1')		$cur_topic['subject'] = censor_words($cur_topic['subject']);	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), pun_htmlspecialchars($cur_topic['forum_name']), pun_htmlspecialchars($cur_topic['subject']));	define('PUN_ACTIVE_PAGE', 'index');	require PUN_ROOT.'header.php';?><div class="linkst">	<div class="inbox crumbsplus">		<ul class="crumbs">			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="viewforum.php?id=<?php echo $fid ?>"><?php echo pun_htmlspecialchars($cur_topic['forum_name']) ?></a></li>			<li><span>&#160;</span><a href="viewtopic.php?id=<?php echo $tid ?>"><?php echo pun_htmlspecialchars($cur_topic['subject']) ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_misc['Moderate'] ?></strong></li>		</ul>		<div class="pagepost">			<p class="pagelink conl"><?php echo $paging_links ?></p>		</div>		<div class="clearer"></div>	</div></div><form method="post" action="moderate.php?fid=<?php echo $fid ?>&amp;tid=<?php echo $tid ?>"><?php	require PUN_ROOT.'include/parser.php';	$post_count = 0; // Keep track of post numbers	// Retrieve a list of post IDs, LIMIT is (really) expensive so we only fetch the IDs here then later fetch the remaining data	$result = $db->query('SELECT id FROM '.$db->prefix.'posts WHERE topic_id='.$tid.' ORDER BY id LIMIT '.$start_from.','.$pun_user['disp_posts']) or error('Unable to fetch post IDs', __FILE__, __LINE__, $db->error());	$post_ids = array();	for ($i = 0;$cur_post_id = $db->result($result, $i);$i++)		$post_ids[] = $cur_post_id;	// Retrieve the posts (and their respective poster)	$result = $db->query('SELECT u.title, u.num_posts, g.g_id, g.g_user_title, p.id, p.poster, p.poster_id, p.message, p.hide_smilies, p.posted, p.edited, p.edited_by FROM '.$db->prefix.'posts AS p INNER JOIN '.$db->prefix.'users AS u ON u.id=p.poster_id INNER JOIN '.$db->prefix.'groups AS g ON g.g_id=u.group_id WHERE p.id IN ('.implode(',', $post_ids).') ORDER BY p.id', true) or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());	while ($cur_post = $db->fetch_assoc($result))	{		$post_count++;		// If the poster is a registered user		if ($cur_post['poster_id'] > 1)		{			if ($pun_user['g_view_users'] == '1')				$poster = '<a href="profile.php?id='.$cur_post['poster_id'].'">'.pun_htmlspecialchars($cur_post['poster']).'</a>';			else				$poster = pun_htmlspecialchars($cur_post['poster']);			// get_title() requires that an element 'username' be present in the array			$cur_post['username'] = $cur_post['poster'];			$user_title = get_title($cur_post);			if ($pun_config['o_censoring'] == '1')				$user_title = censor_words($user_title);		}		// If the poster is a guest (or a user that has been deleted)		else		{			$poster = pun_htmlspecialchars($cur_post['poster']);			$user_title = $lang_topic['Guest'];		}		// Perform the main parsing of the message (BBCode, smilies, censor words etc)		$cur_post['message'] = parse_message($cur_post['message'], $cur_post['hide_smilies']);?><div id="p<?php echo $cur_post['id'] ?>" class="blockpost<?php if($cur_post['id'] == $cur_topic['first_post_id']) echo ' firstpost' ?><?php echo ($post_count % 2 == 0) ? ' roweven' : ' rowodd' ?><?php if ($post_count == 1) echo ' blockpost1' ?>">	<h2><span><span class="conr">#<?php echo ($start_from + $post_count) ?></span> <a href="viewtopic.php?pid=<?php echo $cur_post['id'].'#p'.$cur_post['id'] ?>"><?php echo format_time($cur_post['posted']) ?></a></span></h2>	<div class="box">		<div class="inbox">			<div class="postbody">				<div class="postleft">					<dl>						<dt><strong><?php echo $poster ?></strong></dt>						<dd class="usertitle"><strong><?php echo $user_title ?></strong></dd>					</dl>				</div>				<div class="postright">					<h3 class="nosize"><?php echo $lang_common['Message'] ?></h3>					<div class="postmsg">						<?php echo $cur_post['message']."\n" ?><?php if ($cur_post['edited'] != '') echo "\t\t\t\t\t\t".'<p class="postedit"><em>'.$lang_topic['Last edit'].' '.pun_htmlspecialchars($cur_post['edited_by']).' ('.format_time($cur_post['edited']).')</em></p>'."\n"; ?>					</div>				</div>			</div>		</div>		<div class="inbox">			<div class="postfoot clearb">				<div class="postfootright"><?php echo ($cur_post['id'] != $cur_topic['first_post_id']) ? '<p class="multidelete"><label><strong>'.$lang_misc['Select'].'</strong>&#160;<input type="checkbox" name="posts['.$cur_post['id'].']" value="1" /></label></p>' : '<p>'.$lang_misc['Cannot select first'].'</p>' ?></div>			</div>		</div>	</div></div><?php	}?><div class="postlinksb">	<div class="inbox crumbsplus">		<div class="pagepost">			<p class="pagelink conl"><?php echo $paging_links ?></p>			<p class="conr modbuttons"><input type="submit" name="split_posts" value="<?php echo $lang_misc['Split'] ?>"<?php echo $button_status ?> /> <input type="submit" name="delete_posts" value="<?php echo $lang_misc['Delete'] ?>"<?php echo $button_status ?> /></p>			<div class="clearer"></div>		</div>		<ul class="crumbs">			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="viewforum.php?id=<?php echo $fid ?>"><?php echo pun_htmlspecialchars($cur_topic['forum_name']) ?></a></li>			<li><span>&#160;</span><a href="viewtopic.php?id=<?php echo $tid ?>"><?php echo pun_htmlspecialchars($cur_topic['subject']) ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_misc['Moderate'] ?></strong></li>		</ul>		<div class="clearer"></div>	</div></div></form><?php	require PUN_ROOT.'footer.php';}// Move one or more topicsif (isset($_REQUEST['move_topics']) || isset($_POST['move_topics_to'])){	if (isset($_POST['move_topics_to']))	{		confirm_referrer('moderate.php');		if (@preg_match('%[^0-9,]%', $_POST['topics']))			message($lang_common['Bad request']);		$topics = explode(',', $_POST['topics']);		$move_to_forum = isset($_POST['move_to_forum']) ? intval($_POST['move_to_forum']) : 0;		if (empty($topics) || $move_to_forum < 1)			message($lang_common['Bad request']);		// Verify that the topic IDs are valid		$result = $db->query('SELECT 1 FROM '.$db->prefix.'topics WHERE id IN('.implode(',',$topics).') AND forum_id='.$fid) or error('Unable to check topics', __FILE__, __LINE__, $db->error());		if ($db->num_rows($result) != count($topics))			message($lang_common['Bad request']);		// Verify that the move to forum ID is valid		$result = $db->query('SELECT 1 FROM '.$db->prefix.'forums AS f LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.group_id='.$pun_user['g_id'].' AND fp.forum_id='.$move_to_forum.') WHERE f.redirect_url IS NULL AND (fp.post_topics IS NULL OR fp.post_topics=1)') or error('Unable to fetch forum permissions', __FILE__, __LINE__, $db->error());		if (!$db->num_rows($result))			message($lang_common['Bad request']);		// Delete any redirect topics if there are any (only if we moved/copied the topic back to where it was once moved from)		$db->query('DELETE FROM '.$db->prefix.'topics WHERE forum_id='.$move_to_forum.' AND moved_to IN('.implode(',',$topics).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db->error());		// Move the topic(s)		$db->query('UPDATE '.$db->prefix.'topics SET forum_id='.$move_to_forum.' WHERE id IN('.implode(',',$topics).')') or error('Unable to move topics', __FILE__, __LINE__, $db->error());		// Should we create redirect topics?		if (isset($_POST['with_redirect']))		{			foreach ($topics as $cur_topic)			{				// Fetch info for the redirect topic				$result = $db->query('SELECT poster, subject, posted, last_post FROM '.$db->prefix.'topics WHERE id='.$cur_topic) or error('Unable to fetch topic info', __FILE__, __LINE__, $db->error());				$moved_to = $db->fetch_assoc($result);				// Create the redirect topic				$db->query('INSERT INTO '.$db->prefix.'topics (poster, subject, posted, last_post, moved_to, forum_id) VALUES(\''.$db->escape($moved_to['poster']).'\', \''.$db->escape($moved_to['subject']).'\', '.$moved_to['posted'].', '.$moved_to['last_post'].', '.$cur_topic.', '.$fid.')') or error('Unable to create redirect topic', __FILE__, __LINE__, $db->error());			}		}		update_forum($fid); // Update the forum FROM which the topic was moved		update_forum($move_to_forum); // Update the forum TO which the topic was moved		$redirect_msg = (count($topics) > 1) ? $lang_misc['Move topics redirect'] : $lang_misc['Move topic redirect'];		redirect('viewforum.php?id='.$move_to_forum, $redirect_msg);	}	if (isset($_POST['move_topics']))	{		$topics = isset($_POST['topics']) ? $_POST['topics'] : array();		if (empty($topics))			message($lang_misc['No topics selected']);		$topics = implode(',', array_map('intval', array_keys($topics)));		$action = 'multi';	}	else	{		$topics = intval($_GET['move_topics']);		if ($topics < 1)			message($lang_common['Bad request']);		$action = 'single';	}	$result = $db->query('SELECT c.id AS cid, c.cat_name, f.id AS fid, f.forum_name FROM '.$db->prefix.'categories AS c INNER JOIN '.$db->prefix.'forums AS f ON c.id=f.cat_id LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.forum_id=f.id AND fp.group_id='.$pun_user['g_id'].') WHERE (fp.post_topics IS NULL OR fp.post_topics=1) AND f.redirect_url IS NULL ORDER BY c.disp_position, c.id, f.disp_position') or error('Unable to fetch category/forum list', __FILE__, __LINE__, $db->error());	if ($db->num_rows($result) < 2)		message($lang_misc['Nowhere to move']);	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_misc['Moderate']);	define('PUN_ACTIVE_PAGE', 'index');	require PUN_ROOT.'header.php';?><div class="blockform">	<h2><span><?php echo ($action == 'single') ? $lang_misc['Move topic'] : $lang_misc['Move topics'] ?></span></h2>	<div class="box">		<form method="post" action="moderate.php?fid=<?php echo $fid ?>">			<div class="inform">			<input type="hidden" name="topics" value="<?php echo $topics ?>" />				<fieldset>					<legend><?php echo $lang_misc['Move legend'] ?></legend>					<div class="infldset">						<label><?php echo $lang_misc['Move to'] ?>						<br /><select name="move_to_forum"><?php	$cur_category = 0;	while ($cur_forum = $db->fetch_assoc($result))	{		if ($cur_forum['cid'] != $cur_category) // A new category since last iteration?		{			if ($cur_category)				echo "\t\t\t\t\t\t\t".'</optgroup>'."\n";			echo "\t\t\t\t\t\t\t".'<optgroup label="'.pun_htmlspecialchars($cur_forum['cat_name']).'">'."\n";			$cur_category = $cur_forum['cid'];		}		if ($cur_forum['fid'] != $fid)			echo "\t\t\t\t\t\t\t\t".'<option value="'.$cur_forum['fid'].'">'.pun_htmlspecialchars($cur_forum['forum_name']).'</option>'."\n";	}?>							</optgroup>						</select>						<br /></label>						<div class="rbox">							<label><input type="checkbox" name="with_redirect" value="1"<?php if ($action == 'single') echo ' checked="checked"' ?> /><?php echo $lang_misc['Leave redirect'] ?><br /></label>						</div>					</div>				</fieldset>			</div>			<p class="buttons"><input type="submit" name="move_topics_to" value="<?php echo $lang_misc['Move'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><?php	require PUN_ROOT.'footer.php';}// Merge two or more topicselse if (isset($_POST['merge_topics']) || isset($_POST['merge_topics_comply'])){	if (isset($_POST['merge_topics_comply']))	{		confirm_referrer('moderate.php');		if (@preg_match('%[^0-9,]%', $_POST['topics']))			message($lang_common['Bad request']);		$topics = explode(',', $_POST['topics']);		if (count($topics) < 2)			message($lang_misc['Not enough topics selected']);		// Verify that the topic IDs are valid (redirect links will point to the merged topic after the merge)		$result = $db->query('SELECT id FROM '.$db->prefix.'topics WHERE id IN('.implode(',', $topics).') AND forum_id='.$fid.' ORDER BY id ASC') or error('Unable to check topics', __FILE__, __LINE__, $db->error());		if ($db->num_rows($result) != count($topics))			message($lang_common['Bad request']);		// The topic that we are merging into is the one with the smallest ID		$merge_to_tid = $db->result($result);		// Make any redirect topics point to our new, merged topic		$query = 'UPDATE '.$db->prefix.'topics SET moved_to='.$merge_to_tid.' WHERE moved_to IN('.implode(',', $topics).')';		// Should we create redirect topics?		if (isset($_POST['with_redirect']))			$query .= ' OR (id IN('.implode(',', $topics).') AND id != '.$merge_to_tid.')';		$db->query($query) or error('Unable to make redirection topics', __FILE__, __LINE__, $db->error());		// Merge the posts into the topic		$db->query('UPDATE '.$db->prefix.'posts SET topic_id='.$merge_to_tid.' WHERE topic_id IN('.implode(',', $topics).')') or error('Unable to merge the posts into the topic', __FILE__, __LINE__, $db->error());		// Update any subscriptions		$result = $db->query('SELECT user_id FROM '.$db->prefix.'topic_subscriptions WHERE topic_id IN ('.implode(',', $topics).')') or error('Unable to fetch subscriptions of merged topics', __FILE__, __LINE__, $db->error());		$subscribed_users = array();		while ($cur_user_id = $db->result($result))			$subscribed_users[] = $cur_user_id;		$subscribed_users = array_unique($subscribed_users);		$db->query('DELETE FROM '.$db->prefix.'topic_subscriptions WHERE topic_id IN ('.implode(',', $topics).')') or error('Unable to delete subscriptions of merged topics', __FILE__, __LINE__, $db->error());		foreach ($subscribed_users as $cur_user_id)			$db->query('INSERT INTO '.$db->prefix.'topic_subscriptions (topic_id, user_id) VALUES ('.$merge_to_tid.', '.$cur_user_id.')') or error('Unable to re-enter subscriptions for merge topic', __FILE__, __LINE__, $db->error());		// Without redirection the old topics are removed		if (!isset($_POST['with_redirect']))			$db->query('DELETE FROM '.$db->prefix.'topics WHERE id IN('.implode(',', $topics).') AND id != '.$merge_to_tid) or error('Unable to delete old topics', __FILE__, __LINE__, $db->error());		// Count number of replies in the topic		$result = $db->query('SELECT COUNT(id) FROM '.$db->prefix.'posts WHERE topic_id='.$merge_to_tid) or error('Unable to fetch post count for topic', __FILE__, __LINE__, $db->error());		$num_replies = $db->result($result, 0) - 1;		// Get last_post, last_post_id and last_poster		$result = $db->query('SELECT posted, id, poster FROM '.$db->prefix.'posts WHERE topic_id='.$merge_to_tid.' ORDER BY id DESC LIMIT 1') or error('Unable to get last post info', __FILE__, __LINE__, $db->error());		list($last_post, $last_post_id, $last_poster) = $db->fetch_row($result);		// Update topic		$db->query('UPDATE '.$db->prefix.'topics SET num_replies='.$num_replies.', last_post='.$last_post.', last_post_id='.$last_post_id.', last_poster=\''.$db->escape($last_poster).'\' WHERE id='.$merge_to_tid) or error('Unable to update topic', __FILE__, __LINE__, $db->error());		// Update the forum FROM which the topic was moved and redirect		update_forum($fid);		redirect('viewforum.php?id='.$fid, $lang_misc['Merge topics redirect']);	}	$topics = isset($_POST['topics']) ? $_POST['topics'] : array();	if (count($topics) < 2)		message($lang_misc['Not enough topics selected']);	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_misc['Moderate']);	define('PUN_ACTIVE_PAGE', 'index');	require PUN_ROOT.'header.php';?><div class="blockform">	<h2><span><?php echo $lang_misc['Merge topics'] ?></span></h2>	<div class="box">		<form method="post" action="moderate.php?fid=<?php echo $fid ?>">			<input type="hidden" name="topics" value="<?php echo implode(',', array_map('intval', array_keys($topics))) ?>" />			<div class="inform">				<fieldset>					<legend><?php echo $lang_misc['Confirm merge legend'] ?></legend>					<div class="infldset">						<div class="rbox">							<label><input type="checkbox" name="with_redirect" value="1" /><?php echo $lang_misc['Leave redirect'] ?><br /></label>						</div>					</div>				</fieldset>			</div>			<p class="buttons"><input type="submit" name="merge_topics_comply" value="<?php echo $lang_misc['Merge'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><?php	require PUN_ROOT.'footer.php';}// Delete one or more topicselse if (isset($_POST['delete_topics']) || isset($_POST['delete_topics_comply'])){	$topics = isset($_POST['topics']) ? $_POST['topics'] : array();	if (empty($topics))		message($lang_misc['No topics selected']);	if (isset($_POST['delete_topics_comply']))	{		confirm_referrer('moderate.php');		if (@preg_match('%[^0-9,]%', $topics))			message($lang_common['Bad request']);		require PUN_ROOT.'include/search_idx.php';		// Verify that the topic IDs are valid		$result = $db->query('SELECT 1 FROM '.$db->prefix.'topics WHERE id IN('.$topics.') AND forum_id='.$fid) or error('Unable to check topics', __FILE__, __LINE__, $db->error());		if ($db->num_rows($result) != substr_count($topics, ',') + 1)			message($lang_common['Bad request']);		// Delete the topics and any redirect topics		$db->query('DELETE FROM '.$db->prefix.'topics WHERE id IN('.$topics.') OR moved_to IN('.$topics.')') or error('Unable to delete topic', __FILE__, __LINE__, $db->error());		// Delete any subscriptions		$db->query('DELETE FROM '.$db->prefix.'topic_subscriptions WHERE topic_id IN('.$topics.')') or error('Unable to delete subscriptions', __FILE__, __LINE__, $db->error());		// Create a list of the post IDs in this topic and then strip the search index		$result = $db->query('SELECT id FROM '.$db->prefix.'posts WHERE topic_id IN('.$topics.')') or error('Unable to fetch posts', __FILE__, __LINE__, $db->error());		$post_ids = '';		while ($row = $db->fetch_row($result))			$post_ids .= ($post_ids != '') ? ','.$row[0] : $row[0];		// We have to check that we actually have a list of post IDs since we could be deleting just a redirect topic		if ($post_ids != '')			strip_search_index($post_ids);		// Delete posts		$db->query('DELETE FROM '.$db->prefix.'posts WHERE topic_id IN('.$topics.')') or error('Unable to delete posts', __FILE__, __LINE__, $db->error());		update_forum($fid);		redirect('viewforum.php?id='.$fid, $lang_misc['Delete topics redirect']);	}	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_misc['Moderate']);	define('PUN_ACTIVE_PAGE', 'index');	require PUN_ROOT.'header.php';?><div class="blockform">	<h2><span><?php echo $lang_misc['Delete topics'] ?></span></h2>	<div class="box">		<form method="post" action="moderate.php?fid=<?php echo $fid ?>">			<input type="hidden" name="topics" value="<?php echo implode(',', array_map('intval', array_keys($topics))) ?>" />			<div class="inform">				<fieldset>					<legend><?php echo $lang_misc['Confirm delete legend'] ?></legend>					<div class="infldset">						<p><?php echo $lang_misc['Delete topics comply'] ?></p>					</div>				</fieldset>			</div>			<p class="buttons"><input type="submit" name="delete_topics_comply" value="<?php echo $lang_misc['Delete'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><?php	require PUN_ROOT.'footer.php';}// Open or close one or more topicselse if (isset($_REQUEST['open']) || isset($_REQUEST['close'])){	$action = (isset($_REQUEST['open'])) ? 0 : 1;	// There could be an array of topic IDs in $_POST	if (isset($_POST['open']) || isset($_POST['close']))	{		confirm_referrer('moderate.php');		$topics = isset($_POST['topics']) ? @array_map('intval', @array_keys($_POST['topics'])) : array();		if (empty($topics))			message($lang_misc['No topics selected']);		$db->query('UPDATE '.$db->prefix.'topics SET closed='.$action.' WHERE id IN('.implode(',', $topics).') AND forum_id='.$fid) or error('Unable to close topics', __FILE__, __LINE__, $db->error());		$redirect_msg = ($action) ? $lang_misc['Close topics redirect'] : $lang_misc['Open topics redirect'];		redirect('moderate.php?fid='.$fid, $redirect_msg);	}	// Or just one in $_GET	else	{		confirm_referrer('viewtopic.php');		$topic_id = ($action) ? intval($_GET['close']) : intval($_GET['open']);		if ($topic_id < 1)			message($lang_common['Bad request']);		$db->query('UPDATE '.$db->prefix.'topics SET closed='.$action.' WHERE id='.$topic_id.' AND forum_id='.$fid) or error('Unable to close topic', __FILE__, __LINE__, $db->error());		$redirect_msg = ($action) ? $lang_misc['Close topic redirect'] : $lang_misc['Open topic redirect'];		redirect('viewtopic.php?id='.$topic_id, $redirect_msg);	}}// Stick a topicelse if (isset($_GET['stick'])){	confirm_referrer('viewtopic.php');	$stick = intval($_GET['stick']);	if ($stick < 1)		message($lang_common['Bad request']);	$db->query('UPDATE '.$db->prefix.'topics SET sticky=\'1\' WHERE id='.$stick.' AND forum_id='.$fid) or error('Unable to stick topic', __FILE__, __LINE__, $db->error());	redirect('viewtopic.php?id='.$stick, $lang_misc['Stick topic redirect']);}// Unstick a topicelse if (isset($_GET['unstick'])){	confirm_referrer('viewtopic.php');	$unstick = intval($_GET['unstick']);	if ($unstick < 1)		message($lang_common['Bad request']);	$db->query('UPDATE '.$db->prefix.'topics SET sticky=\'0\' WHERE id='.$unstick.' AND forum_id='.$fid) or error('Unable to unstick topic', __FILE__, __LINE__, $db->error());	redirect('viewtopic.php?id='.$unstick, $lang_misc['Unstick topic redirect']);}// No specific forum moderation action was specified in the query string, so we'll display the moderator forum// Load the viewforum.php language filerequire PUN_ROOT.'lang/'.$pun_user['language'].'/forum.php';// Fetch some info about the forum$result = $db->query('SELECT f.forum_name, f.redirect_url, f.num_topics, f.sort_by FROM '.$db->prefix.'forums AS f LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.forum_id=f.id AND fp.group_id='.$pun_user['g_id'].') WHERE (fp.read_forum IS NULL OR fp.read_forum=1) AND f.id='.$fid) or error('Unable to fetch forum info', __FILE__, __LINE__, $db->error());if (!$db->num_rows($result))	message($lang_common['Bad request'], false, '404 Not Found');$cur_forum = $db->fetch_assoc($result);// Is this a redirect forum? In that case, abort!if ($cur_forum['redirect_url'] != '')	message($lang_common['Bad request']);switch ($cur_forum['sort_by']){	case 0:		$sort_by = 'last_post DESC';		break;	case 1:		$sort_by = 'posted DESC';		break;	case 2:		$sort_by = 'subject ASC';		break;	default:		$sort_by = 'last_post DESC';		break;}// Determine the topic offset (based on $_GET['p'])$num_pages = ceil($cur_forum['num_topics'] / $pun_user['disp_topics']);$p = (!isset($_GET['p']) || $_GET['p'] <= 1 || $_GET['p'] > $num_pages) ? 1 : intval($_GET['p']);$start_from = $pun_user['disp_topics'] * ($p - 1);// Generate paging links$paging_links = '<span class="pages-label">'.$lang_common['Pages'].' </span>'.paginate($num_pages, $p, 'moderate.php?fid='.$fid);$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), pun_htmlspecialchars($cur_forum['forum_name']));define('PUN_ACTIVE_PAGE', 'index');require PUN_ROOT.'header.php';?><div class="linkst">	<div class="inbox crumbsplus">		<ul class="crumbs">			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="viewforum.php?id=<?php echo $fid ?>"><?php echo pun_htmlspecialchars($cur_forum['forum_name']) ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_misc['Moderate'] ?></strong></li>		</ul>		<div class="pagepost">			<p class="pagelink conl"><?php echo $paging_links ?></p>		</div>		<div class="clearer"></div>	</div></div><form method="post" action="moderate.php?fid=<?php echo $fid ?>"><div id="vf" class="blocktable">	<h2><span><?php echo pun_htmlspecialchars($cur_forum['forum_name']) ?></span></h2>	<div class="box">		<div class="inbox">			<table cellspacing="0">			<thead>				<tr>					<th class="tcl" scope="col"><?php echo $lang_common['Topic'] ?></th>					<th class="tc2" scope="col"><?php echo $lang_common['Replies'] ?></th><?php if ($pun_config['o_topic_views'] == '1'): ?>					<th class="tc3" scope="col"><?php echo $lang_forum['Views'] ?></th><?php endif; ?>					<th class="tcr"><?php echo $lang_common['Last post'] ?></th>					<th class="tcmod" scope="col"><?php echo $lang_misc['Select'] ?></th>				</tr>			</thead>			<tbody><?php// Retrieve a list of topic IDs, LIMIT is (really) expensive so we only fetch the IDs here then later fetch the remaining data$result = $db->query('SELECT id FROM '.$db->prefix.'topics WHERE forum_id='.$fid.' ORDER BY sticky DESC, '.$sort_by.', id DESC LIMIT '.$start_from.', '.$pun_user['disp_topics']) or error('Unable to fetch topic IDs', __FILE__, __LINE__, $db->error());// If there are topics in this forumif ($db->num_rows($result)){	$topic_ids = array();	for ($i = 0;$cur_topic_id = $db->result($result, $i);$i++)		$topic_ids[] = $cur_topic_id;	// Select topics	$result = $db->query('SELECT id, poster, subject, posted, last_post, last_post_id, last_poster, num_views, num_replies, closed, sticky, moved_to FROM '.$db->prefix.'topics WHERE id IN('.implode(',', $topic_ids).') ORDER BY sticky DESC, '.$sort_by.', id DESC') or error('Unable to fetch topic list for forum', __FILE__, __LINE__, $db->error());	$button_status = '';	$topic_count = 0;	while ($cur_topic = $db->fetch_assoc($result))	{		++$topic_count;		$status_text = array();		$item_status = ($topic_count % 2 == 0) ? 'roweven' : 'rowodd';		$icon_type = 'icon';		if (is_null($cur_topic['moved_to']))		{			$last_post = '<a href="viewtopic.php?pid='.$cur_topic['last_post_id'].'#p'.$cur_topic['last_post_id'].'">'.format_time($cur_topic['last_post']).'</a> <span class="byuser">'.$lang_common['by'].' '.pun_htmlspecialchars($cur_topic['last_poster']).'</span>';			$ghost_topic = false;		}		else		{			$last_post = '- - -';			$ghost_topic = true;		}		if ($pun_config['o_censoring'] == '1')			$cur_topic['subject'] = censor_words($cur_topic['subject']);		if ($cur_topic['sticky'] == '1')		{			$item_status .= ' isticky';			$status_text[] = '<span class="stickytext">'.$lang_forum['Sticky'].'</span>';		}		if ($cur_topic['moved_to'] != 0)		{			$subject = '<a href="viewtopic.php?id='.$cur_topic['moved_to'].'">'.pun_htmlspecialchars($cur_topic['subject']).'</a> <span class="byuser">'.$lang_common['by'].' '.pun_htmlspecialchars($cur_topic['poster']).'</span>';			$status_text[] = '<span class="movedtext">'.$lang_forum['Moved'].'</span>';			$item_status .= ' imoved';		}		else if ($cur_topic['closed'] == '0')			$subject = '<a href="viewtopic.php?id='.$cur_topic['id'].'">'.pun_htmlspecialchars($cur_topic['subject']).'</a> <span class="byuser">'.$lang_common['by'].' '.pun_htmlspecialchars($cur_topic['poster']).'</span>';		else		{			$subject = '<a href="viewtopic.php?id='.$cur_topic['id'].'">'.pun_htmlspecialchars($cur_topic['subject']).'</a> <span class="byuser">'.$lang_common['by'].' '.pun_htmlspecialchars($cur_topic['poster']).'</span>';			$status_text[] = '<span class="closedtext">'.$lang_forum['Closed'].'</span>';			$item_status .= ' iclosed';		}		if (!$ghost_topic && $cur_topic['last_post'] > $pun_user['last_visit'] && (!isset($tracked_topics['topics'][$cur_topic['id']]) || $tracked_topics['topics'][$cur_topic['id']] < $cur_topic['last_post']) && (!isset($tracked_topics['forums'][$fid]) || $tracked_topics['forums'][$fid] < $cur_topic['last_post']))		{			$item_status .= ' inew';			$icon_type = 'icon icon-new';			$subject = '<strong>'.$subject.'</strong>';			$subject_new_posts = '<span class="newtext">[ <a href="viewtopic.php?id='.$cur_topic['id'].'&amp;action=new" title="'.$lang_common['New posts info'].'">'.$lang_common['New posts'].'</a> ]</span>';		}		else			$subject_new_posts = null;		// Insert the status text before the subject		$subject = implode(' ', $status_text).' '.$subject;		$num_pages_topic = ceil(($cur_topic['num_replies'] + 1) / $pun_user['disp_posts']);		if ($num_pages_topic > 1)			$subject_multipage = '<span class="pagestext">[ '.paginate($num_pages_topic, -1, 'viewtopic.php?id='.$cur_topic['id']).' ]</span>';		else			$subject_multipage = null;		// Should we show the "New posts" and/or the multipage links?		if (!empty($subject_new_posts) || !empty($subject_multipage))		{			$subject .= !empty($subject_new_posts) ? ' '.$subject_new_posts : '';			$subject .= !empty($subject_multipage) ? ' '.$subject_multipage : '';		}?>				<tr class="<?php echo $item_status ?>">					<td class="tcl">						<div class="<?php echo $icon_type ?>"><div class="nosize"><?php echo forum_number_format($topic_count + $start_from) ?></div></div>						<div class="tclcon">							<div>								<?php echo $subject."\n" ?>							</div>						</div>					</td>					<td class="tc2"><?php echo (!$ghost_topic) ? forum_number_format($cur_topic['num_replies']) : '-' ?></td><?php if ($pun_config['o_topic_views'] == '1'): ?>					<td class="tc3"><?php echo (!$ghost_topic) ? forum_number_format($cur_topic['num_views']) : '-' ?></td><?php endif; ?>					<td class="tcr"><?php echo $last_post ?></td>					<td class="tcmod"><input type="checkbox" name="topics[<?php echo $cur_topic['id'] ?>]" value="1" /></td>				</tr><?php	}}else{	$colspan = ($pun_config['o_topic_views'] == '1') ? 5 : 4;	$button_status = ' disabled="disabled"';	echo "\t\t\t\t\t".'<tr><td class="tcl" colspan="'.$colspan.'">'.$lang_forum['Empty forum'].'</td></tr>'."\n";}?>			</tbody>			</table>		</div>	</div></div><div class="linksb">	<div class="inbox crumbsplus">		<div class="pagepost">			<p class="pagelink conl"><?php echo $paging_links ?></p>			<p class="conr modbuttons"><input type="submit" name="move_topics" value="<?php echo $lang_misc['Move'] ?>"<?php echo $button_status ?> /> <input type="submit" name="delete_topics" value="<?php echo $lang_misc['Delete'] ?>"<?php echo $button_status ?> /> <input type="submit" name="merge_topics" value="<?php echo $lang_misc['Merge'] ?>"<?php echo $button_status ?> /> <input type="submit" name="open" value="<?php echo $lang_misc['Open'] ?>"<?php echo $button_status ?> /> <input type="submit" name="close" value="<?php echo $lang_misc['Close'] ?>"<?php echo $button_status ?> /></p>			<div class="clearer"></div>		</div>		<ul class="crumbs">			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="viewforum.php?id=<?php echo $fid ?>"><?php echo pun_htmlspecialchars($cur_forum['forum_name']) ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_misc['Moderate'] ?></strong></li>		</ul>		<div class="clearer"></div>	</div></div></form><?phprequire PUN_ROOT.'footer.php';
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */// The FluxBB version this script updates todefine('UPDATE_TO', '1.5.3');define('UPDATE_TO_DB_REVISION', 18);define('UPDATE_TO_SI_REVISION', 2);define('UPDATE_TO_PARSER_REVISION', 2);define('MIN_PHP_VERSION', '4.4.0');define('MIN_MYSQL_VERSION', '4.1.2');define('MIN_PGSQL_VERSION', '7.0.0');define('PUN_SEARCH_MIN_WORD', 3);define('PUN_SEARCH_MAX_WORD', 20);// The MySQL connection character set that was used for FluxBB 1.2 - in 99% of cases this should be detected automatically,// but can be overridden using the below constant if required.//define('FORUM_DEFAULT_CHARSET', 'latin1');// The number of items to process per page view (lower this if the update script times out during UTF-8 conversion)define('PER_PAGE', 300);// Don't set to UTF-8 until after we've found out what the default character set isdefine('FORUM_NO_SET_NAMES', 1);// Make sure we are running at least MIN_PHP_VERSIONif (!function_exists('version_compare') || version_compare(PHP_VERSION, MIN_PHP_VERSION, '<'))	exit('You are running PHP version '.PHP_VERSION.'. FluxBB '.UPDATE_TO.' requires at least PHP '.MIN_PHP_VERSION.' to run properly. You must upgrade your PHP installation before you can continue.');define('PUN_ROOT', dirname(__FILE__).'/');// Attempt to load the configuration file config.phpif (file_exists(PUN_ROOT.'config.php'))	include PUN_ROOT.'config.php';// If we have the 1.3-legacy constant defined, define the proper 1.4 constant so we don't get an incorrect "need to install" messageif (defined('FORUM'))	define('PUN', FORUM);// If PUN isn't defined, config.php is missing or corruptif (!defined('PUN')){	header('Location: install.php');	exit;}// Enable debug modeif (!defined('PUN_DEBUG'))	define('PUN_DEBUG', 1);// Load the functions scriptrequire PUN_ROOT.'include/functions.php';// Load UTF-8 functionsrequire PUN_ROOT.'include/utf8/utf8.php';// Strip out "bad" UTF-8 charactersforum_remove_bad_characters();// Reverse the effect of register_globalsforum_unregister_globals();// Turn on full PHP error reportingerror_reporting(E_ALL);// Force POSIX locale (to prevent functions such as strtolower() from messing up UTF-8 strings)setlocale(LC_CTYPE, 'C');// Turn off magic_quotes_runtimeif (get_magic_quotes_runtime())	set_magic_quotes_runtime(0);// Strip slashes from GET/POST/COOKIE (if magic_quotes_gpc is enabled)if (get_magic_quotes_gpc()){	function stripslashes_array($array)	{		return is_array($array) ? array_map('stripslashes_array', $array) : stripslashes($array);	}	$_GET = stripslashes_array($_GET);	$_POST = stripslashes_array($_POST);	$_COOKIE = stripslashes_array($_COOKIE);	$_REQUEST = stripslashes_array($_REQUEST);}// If a cookie name is not specified in config.php, we use the default (forum_cookie)if (empty($cookie_name))	$cookie_name = 'pun_cookie';// If the cache directory is not specified, we use the default settingif (!defined('FORUM_CACHE_DIR'))	define('FORUM_CACHE_DIR', PUN_ROOT.'cache/');// Turn off PHP time limit@set_time_limit(0);// Define a few commonly used constantsdefine('PUN_UNVERIFIED', 0);define('PUN_ADMIN', 1);define('PUN_MOD', 2);define('PUN_GUEST', 3);define('PUN_MEMBER', 4);// Load DB abstraction layer and try to connectrequire PUN_ROOT.'include/dblayer/common_db.php';// Check what the default character set is - since 1.2 didn't specify any we will use whatever the default was (usually latin1)$old_connection_charset = defined('FORUM_DEFAULT_CHARSET') ? FORUM_DEFAULT_CHARSET : $db->get_names();// Set the connection to UTF-8 now$db->set_names('utf8');// Get the forum config$result = $db->query('SELECT * FROM '.$db->prefix.'config') or error('Unable to fetch config.', __FILE__, __LINE__, $db->error());while ($cur_config_item = $db->fetch_row($result))	$pun_config[$cur_config_item[0]] = $cur_config_item[1];// Load language file$default_lang = $pun_config['o_default_lang'];if (!file_exists(PUN_ROOT.'lang/'.$default_lang.'/update.php'))	$default_lang = 'English';require PUN_ROOT.'lang/'.$default_lang.'/common.php';require PUN_ROOT.'lang/'.$default_lang.'/update.php';// Check current version$cur_version = $pun_config['o_cur_version'];if (version_compare($cur_version, '1.2', '<'))	error(sprintf($lang_update['Version mismatch error'], $db_name));// Do some DB type specific checks$mysql = false;switch ($db_type){	case 'mysql':	case 'mysqli':	case 'mysql_innodb':	case 'mysqli_innodb':		$mysql_info = $db->get_version();		if (version_compare($mysql_info['version'], MIN_MYSQL_VERSION, '<'))			error(sprintf($lang_update['You are running error'], 'MySQL', $mysql_info['version'], UPDATE_TO, MIN_MYSQL_VERSION));		$mysql = true;		break;	case 'pgsql':		$pgsql_info = $db->get_version();		if (version_compare($pgsql_info['version'], MIN_PGSQL_VERSION, '<'))			error(sprintf($lang_update['You are running error'], 'PostgreSQL', $pgsql_info['version'], UPDATE_TO, MIN_PGSQL_VERSION));		break;}// Check the database, search index and parser revision and the current versionif (isset($pun_config['o_database_revision']) && $pun_config['o_database_revision'] >= UPDATE_TO_DB_REVISION &&		isset($pun_config['o_searchindex_revision']) && $pun_config['o_searchindex_revision'] >= UPDATE_TO_SI_REVISION &&		isset($pun_config['o_parser_revision']) && $pun_config['o_parser_revision'] >= UPDATE_TO_PARSER_REVISION &&		version_compare($pun_config['o_cur_version'], UPDATE_TO, '>='))	error($lang_update['No update error']);$default_style = $pun_config['o_default_style'];if (!file_exists(PUN_ROOT.'style/'.$default_style.'.css'))	$default_style = 'Air';// Start a session, used to queue up errors if duplicate users occur when converting from FluxBB v1.2.session_start();//// Determines whether $str is UTF-8 encoded or not//function seems_utf8($str){	$str_len = strlen($str);	for ($i = 0; $i < $str_len; ++$i)	{		if (ord($str[$i]) < 0x80) continue; # 0bbbbbbb		else if ((ord($str[$i]) & 0xE0) == 0xC0) $n=1; # 110bbbbb		else if ((ord($str[$i]) & 0xF0) == 0xE0) $n=2; # 1110bbbb		else if ((ord($str[$i]) & 0xF8) == 0xF0) $n=3; # 11110bbb		else if ((ord($str[$i]) & 0xFC) == 0xF8) $n=4; # 111110bb		else if ((ord($str[$i]) & 0xFE) == 0xFC) $n=5; # 1111110b		else return false; # Does not match any model		for ($j = 0; $j < $n; ++$j) # n bytes matching 10bbbbbb follow ?		{			if ((++$i == strlen($str)) || ((ord($str[$i]) & 0xC0) != 0x80))				return false;		}	}	return true;}//// Translates the number from a HTML numeric entity into an UTF-8 character//function dcr2utf8($src){	$dest = '';	if ($src < 0)		return false;	else if ($src <= 0x007f)		$dest .= chr($src);	else if ($src <= 0x07ff)	{		$dest .= chr(0xc0 | ($src >> 6));		$dest .= chr(0x80 | ($src & 0x003f));	}	else if ($src == 0xFEFF)	{		// nop -- zap the BOM	}	else if ($src >= 0xD800 && $src <= 0xDFFF)	{		// found a surrogate		return false;	}	else if ($src <= 0xffff)	{		$dest .= chr(0xe0 | ($src >> 12));		$dest .= chr(0x80 | (($src >> 6) & 0x003f));		$dest .= chr(0x80 | ($src & 0x003f));	}	else if ($src <= 0x10ffff)	{		$dest .= chr(0xf0 | ($src >> 18));		$dest .= chr(0x80 | (($src >> 12) & 0x3f));		$dest .= chr(0x80 | (($src >> 6) & 0x3f));		$dest .= chr(0x80 | ($src & 0x3f));	}	else	{		// out of range		return false;	}	return $dest;}//// Attempts to convert $str from $old_charset to UTF-8. Also converts HTML entities (including numeric entities) to UTF-8 characters//function convert_to_utf8(&$str, $old_charset){	if (is_null($str) || $str == '')		return false;	$save = $str;	// Replace literal entities (for non-UTF-8 compliant html_entity_encode)	if (version_compare(PHP_VERSION, '5.0.0', '<') && $old_charset == 'ISO-8859-1' || $old_charset == 'ISO-8859-15')		$str = html_entity_decode($str, ENT_QUOTES, $old_charset);	if ($old_charset != 'UTF-8' && !seems_utf8($str))	{		if (function_exists('iconv'))			$str = iconv($old_charset == 'ISO-8859-1' ? 'WINDOWS-1252' : 'ISO-8859-1', 'UTF-8', $str);		else if (function_exists('mb_convert_encoding'))			$str = mb_convert_encoding($str, 'UTF-8', $old_charset == 'ISO-8859-1' ? 'WINDOWS-1252' : 'ISO-8859-1');		else if ($old_charset == 'ISO-8859-1')			$str = utf8_encode($str);	}	// Replace literal entities (for UTF-8 compliant html_entity_encode)	if (version_compare(PHP_VERSION, '5.0.0', '>='))		$str = html_entity_decode($str, ENT_QUOTES, 'UTF-8');	// Replace numeric entities	$str = preg_replace_callback('%&#([0-9]+);%', 'utf8_callback_1', $str);	$str = preg_replace_callback('%&#x([a-f0-9]+);%i', 'utf8_callback_2', $str);	// Remove "bad" characters	$str = remove_bad_characters($str);	return ($save != $str);}function utf8_callback_1($matches){	return dcr2utf8($matches[1]);}function utf8_callback_2($matches){	return dcr2utf8(hexdec($matches[1]));}//// Alter a table to be utf8. MySQL only// Function based on update_convert_table_utf8() from the Drupal project (http://drupal.org/)//function alter_table_utf8($table){	global $mysql, $db;	static $types;	if (!$mysql)		return;	if (!isset($types))	{		$types = array(			'char'			=> 'binary',			'varchar'		=> 'varbinary',			'tinytext'		=> 'tinyblob',			'mediumtext'	=> 'mediumblob',			'text'			=> 'blob',			'longtext'		=> 'longblob'		);	}	// Set table default charset to utf8	$db->query('ALTER TABLE '.$table.' CHARACTER SET utf8') or error('Unable to set table character set', __FILE__, __LINE__, $db->error());	// Find out which columns need converting and build SQL statements	$result = $db->query('SHOW FULL COLUMNS FROM '.$table) or error('Unable to fetch column information', __FILE__, __LINE__, $db->error());	while ($cur_column = $db->fetch_assoc($result))	{		if (is_null($cur_column['Collation']))			continue;		list($type) = explode('(', $cur_column['Type']);		if (isset($types[$type]) && strpos($cur_column['Collation'], 'utf8') === false)		{			$allow_null = ($cur_column['Null'] == 'YES');			$collate = (substr($cur_column['Collation'], -3) == 'bin') ? 'utf8_bin' : 'utf8_general_ci';			$db->alter_field($table, $cur_column['Field'], preg_replace('%'.$type.'%i', $types[$type], $cur_column['Type']), $allow_null, $cur_column['Default'], null, true) or error('Unable to alter field to binary', __FILE__, __LINE__, $db->error());			$db->alter_field($table, $cur_column['Field'], $cur_column['Type'].' CHARACTER SET utf8 COLLATE '.$collate, $allow_null, $cur_column['Default'], null, true) or error('Unable to alter field to utf8', __FILE__, __LINE__, $db->error());		}	}}//// Safely converts text type columns into utf8// If finished returns true, otherwise returns $end_at//function convert_table_utf8($table, $callback, $old_charset, $key = null, $start_at = null, $error_callback = null){	global $mysql, $db, $old_connection_charset;	$finished = true;	$end_at = 0;	if ($mysql)	{		// Only set up the tables if we are doing this in 1 go, or it's the first go		if (is_null($start_at) || $start_at == 0)		{			// Drop any temp table that exists, in-case it's left over from a failed update			$db->drop_table($table.'_utf8', true) or error('Unable to drop left over temp table', __FILE__, __LINE__, $db->error());			// Copy the table			$db->query('CREATE TABLE '.$table.'_utf8 LIKE '.$table) or error('Unable to create new table', __FILE__, __LINE__, $db->error());			// Set table default charset to utf8			alter_table_utf8($table.'_utf8');		}		// Change to the old character set so MySQL doesn't attempt to perform conversion on the data from the old table		$db->set_names($old_connection_charset);		// Move & Convert everything		$result = $db->query('SELECT * FROM '.$table.(is_null($start_at) ? '' : ' WHERE '.$key.'>'.$start_at).' ORDER BY '.$key.' ASC'.(is_null($start_at) ? '' : ' LIMIT '.PER_PAGE), false) or error('Unable to select from old table', __FILE__, __LINE__, $db->error());		// Change back to utf8 mode so we can insert it into the new table		$db->set_names('utf8');		while ($cur_item = $db->fetch_assoc($result))		{			$cur_item = call_user_func($callback, $cur_item, $old_charset);			$temp = array();			foreach ($cur_item as $idx => $value)				$temp[$idx] = is_null($value) ? 'NULL' : '\''.$db->escape($value).'\'';			$db->query('INSERT INTO '.$table.'_utf8('.implode(',', array_keys($temp)).') VALUES ('.implode(',', array_values($temp)).')') or (is_null($error_callback) ? error('Unable to insert data to new table', __FILE__, __LINE__, $db->error()) : call_user_func($error_callback, $cur_item));			$end_at = $cur_item[$key];		}		// If we aren't doing this all in 1 go and $end_at has a value (i.e. we have processed at least 1 row), figure out if we have more to do or not		if (!is_null($start_at) && $end_at > 0)		{			$result = $db->query('SELECT 1 FROM '.$table.' WHERE '.$key.'>'.$end_at.' ORDER BY '.$key.' ASC LIMIT 1') or error('Unable to check for next row', __FILE__, __LINE__, $db->error());			$finished = $db->num_rows($result) == 0;		}		// Only swap the tables if we are doing this in 1 go, or it's the last go		if ($finished)		{			// Delete old table			$db->drop_table($table, true) or error('Unable to drop old table', __FILE__, __LINE__, $db->error());			// Rename table			$db->query('ALTER TABLE '.$table.'_utf8 RENAME '.$table) or error('Unable to rename new table', __FILE__, __LINE__, $db->error());			return true;		}		return $end_at;	}	else	{		// Convert everything		$result = $db->query('SELECT * FROM '.$table.(is_null($start_at) ? '' : ' WHERE '.$key.'>'.$start_at).' ORDER BY '.$key.' ASC'.(is_null($start_at ) ? '' : ' LIMIT '.PER_PAGE)) or error('Unable to select from table', __FILE__, __LINE__, $db->error());		while ($cur_item = $db->fetch_assoc($result))		{			$cur_item = call_user_func($callback, $cur_item, $old_charset);			$temp = array();			foreach ($cur_item as $idx => $value)				$temp[] = $idx.'='.(is_null($value) ? 'NULL' : '\''.$db->escape($value).'\'');			if (!empty($temp))				$db->query('UPDATE '.$table.' SET '.implode(', ', $temp).' WHERE '.$key.'=\''.$db->escape($cur_item[$key]).'\'') or error('Unable to update data', __FILE__, __LINE__, $db->error());			$end_at = $cur_item[$key];		}		if (!is_null($start_at) && $end_at > 0)		{			$result = $db->query('SELECT 1 FROM '.$table.' WHERE '.$key.'>'.$end_at.' ORDER BY '.$key.' ASC LIMIT 1') or error('Unable to check for next row', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result) == 0)				return true;			return $end_at;		}		return true;	}}header('Content-type: text/html; charset=utf-8');// Empty all output buffers and stop bufferingwhile (@ob_end_clean());$stage = isset($_REQUEST['stage']) ? $_REQUEST['stage'] : '';$old_charset = isset($_REQUEST['req_old_charset']) ? str_replace('ISO8859', 'ISO-8859', strtoupper($_REQUEST['req_old_charset'])) : 'ISO-8859-1';$start_at = isset($_REQUEST['start_at']) ? intval($_REQUEST['start_at']) : 0;$query_str = '';// Show formif (empty($stage)){	if (file_exists(FORUM_CACHE_DIR.'db_update.lock'))	{		// Deal with newlines, tabs and multiple spaces		$pattern = array("\t", '  ', '  ');		$replace = array('&#160; &#160; ', '&#160; ', ' &#160;');		$message = str_replace($pattern, $replace, $pun_config['o_maintenance_message']);?><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang_common['lang_identifier'] ?>" lang="<?php echo $lang_common['lang_identifier'] ?>" dir="<?php echo $lang_common['lang_direction'] ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title><?php echo $lang_update['Maintenance'] ?></title><link rel="stylesheet" type="text/css" href="style/<?php echo $default_style ?>.css" /></head><body><div id="punmaint" class="pun"><div class="top-box"><div><!-- Top Corners --></div></div><div class="punwrap"><div id="brdmain"><div class="block">	<h2><?php echo $lang_update['Maintenance'] ?></h2>	<div class="box">		<div class="inbox">			<p><?php echo $message ?></p>		</div>	</div></div></div></div><div class="end-box"><div><!-- Bottom Corners --></div></div></div></body></html><?php	}	else	{?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang_common['lang_identifier'] ?>" lang="<?php echo $lang_common['lang_identifier'] ?>" dir="<?php echo $lang_common['lang_direction'] ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title><?php echo $lang_update['Update'] ?></title><link rel="stylesheet" type="text/css" href="style/<?php echo $default_style ?>.css" /></head><body onload="document.getElementById('install').req_db_pass.focus();document.getElementById('install').start.disabled=false;"><div id="pundb_update" class="pun"><div class="top-box"><div><!-- Top Corners --></div></div><div class="punwrap"><div id="brdheader" class="block">	<div class="box">		<div id="brdtitle" class="inbox">			<h1><span><?php echo $lang_update['Update'] ?></span></h1>			<div id="brddesc"><p><?php echo $lang_update['Update message'] ?></p><p><strong><?php echo $lang_update['Note']; ?></strong> <?php echo $lang_update['Members message']; ?></p></div>		</div>	</div></div><div id="brdmain"><div class="blockform">	<h2><span><?php echo $lang_update['Update'] ?></span></h2>	<div class="box">		<form id="install" method="post" action="db_update.php">			<input type="hidden" name="stage" value="start" />			<div class="inform">				<fieldset>				<legend><?php echo $lang_update['Administrator only'] ?></legend>					<div class="infldset">						<p><?php echo $lang_update['Database password info'] ?></p>						<p><strong><?php echo $lang_update['Note']; ?></strong> <?php echo $lang_update['Database password note'] ?></p>						<label class="required"><strong><?php echo $lang_update['Database password'] ?> <span><?php echo $lang_update['Required'] ?></span></strong><br /><input type="password" id="req_db_pass" name="req_db_pass" /><br /></label>						<p><?php echo $lang_update['Maintenance message info'] ?></p>						<div class="txtarea">							<label class="required"><strong><?php echo $lang_update['Maintenance message'] ?> <span><?php echo $lang_update['Required'] ?></span></strong><br />							<textarea name="req_maintenance_message" rows="4" cols="65"><?php echo pun_htmlspecialchars($pun_config['o_maintenance_message']) ?></textarea><br /></label>						</div>					</div>				</fieldset>			</div>			<div class="inform">				<div class="forminfo">					<p><?php echo $lang_update['Intro 1'] ?></p>					<p><?php echo $lang_update['Intro 2'] ?></p><?php	if (strpos($cur_version, '1.2') === 0)	{		if (!function_exists('iconv') && !function_exists('mb_convert_encoding'))		{?>					<p><?php echo $lang_update['No charset conversion'] ?></p><?php		}?>				</div>			</div>			<div class="inform">				<div class="forminfo">					<p><?php echo $lang_update['Enable conversion'] ?></p>					<p><?php echo $lang_update['Current character set'] ?></p>				</div>				<fieldset>					<legend><?php echo $lang_update['Charset conversion'] ?></legend>					<div class="infldset">						<div class="rbox">							<label><input type="checkbox" name="convert_charset" value="1" checked="checked" /><?php echo $lang_update['Enable conversion label'] ?><br /></label>						</div>						<label>							<strong><?php echo $lang_update['Current character set label'] ?></strong><br /><?php echo $lang_update['Current character set info'] ?><br />							<input type="text" name="req_old_charset" size="12" maxlength="20" value="<?php echo $old_charset ?>" /><br />						</label>					</div>				</fieldset><?php	}	else		echo "\t\t\t\t".'</div>'."\n";?>			</div>			<p class="buttons"><input type="submit" name="start" value="<?php echo $lang_update['Start update'] ?>" /></p>		</form>	</div></div></div></div><div class="end-box"><div><!-- Bottom Corners --></div></div></div></body></html><?php	}	$db->end_transaction();	$db->close();	exit;}// Read the lock file$lock = file_exists(FORUM_CACHE_DIR.'db_update.lock') ? trim(file_get_contents(FORUM_CACHE_DIR.'db_update.lock')) : false;$lock_error = false;// Generate or fetch the UID - this confirms we have a valid adminif (isset($_POST['req_db_pass'])){	$req_db_pass = strtolower(pun_trim($_POST['req_db_pass']));	switch ($db_type)	{		// For SQLite we compare against the database file name, since the password is left blank		case 'sqlite':			if ($req_db_pass != strtolower($db_name))				error(sprintf($lang_update['Invalid file error'], 'config.php'));			break;		// For everything else, check the password matches		default:			if ($req_db_pass != strtolower($db_password))				error(sprintf($lang_update['Invalid password error'], 'config.php'));			break;	}	// Generate a unique id to identify this session, only if this is a valid session	$uid = pun_hash($req_db_pass.'|'.uniqid(rand(), true));	if ($lock) // We already have a lock file		$lock_error = true;	else // Create the lock file	{		$fh = @fopen(FORUM_CACHE_DIR.'db_update.lock', 'wb');		if (!$fh)			error(sprintf($lang_update['Unable to lock error'], 'cache'));		fwrite($fh, $uid);		fclose($fh);		// Update maintenance message		if ($_POST['req_maintenance_message'] != '')			$maintenance_message = pun_trim(pun_linebreaks($_POST['req_maintenance_message']));		else		{			// Load the admin_options.php language file			require PUN_ROOT.'lang/'.$default_lang.'/admin_options.php';			$maintenance_message = $lang_admin_options['Default maintenance message'];		}		$db->query('UPDATE '.$db->prefix.'config SET conf_value=\''.$db->escape($maintenance_message).'\' WHERE conf_name=\'o_maintenance_message\'') or error('Unable to update board config', __FILE__, __LINE__, $db->error());		// Regenerate the config cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_config_cache();	}}else if (isset($_GET['uid'])){	$uid = pun_trim($_GET['uid']);	if (!$lock || $lock != $uid) // The lock doesn't exist or doesn't match the given UID		$lock_error = true;}else	error($lang_update['No password error']);// If there is an error with the lock fileif ($lock_error)	error(sprintf($lang_update['Script runs error'], FORUM_CACHE_DIR.'db_update.lock'));switch ($stage){	// Start by updating the database structure	case 'start':		$query_str = '?stage=preparse_posts';		// If we don't need to update the database, skip this stage		if (isset($pun_config['o_database_revision']) && $pun_config['o_database_revision'] >= UPDATE_TO_DB_REVISION)			break;		// Make all email fields VARCHAR(80)		$db->alter_field('bans', 'email', 'VARCHAR(80)', true) or error('Unable to alter email field', __FILE__, __LINE__, $db->error());		$db->alter_field('posts', 'poster_email', 'VARCHAR(80)', true) or error('Unable to alter poster_email field', __FILE__, __LINE__, $db->error());		$db->alter_field('users', 'email', 'VARCHAR(80)', false, '') or error('Unable to alter email field', __FILE__, __LINE__, $db->error());		$db->alter_field('users', 'jabber', 'VARCHAR(80)', true) or error('Unable to alter jabber field', __FILE__, __LINE__, $db->error());		$db->alter_field('users', 'msn', 'VARCHAR(80)', true) or error('Unable to alter msn field', __FILE__, __LINE__, $db->error());		$db->alter_field('users', 'activate_string', 'VARCHAR(80)', true) or error('Unable to alter activate_string field', __FILE__, __LINE__, $db->error());		// Make all IP fields VARCHAR(39) to support IPv6		$db->alter_field('posts', 'poster_ip', 'VARCHAR(39)', true) or error('Unable to alter poster_ip field', __FILE__, __LINE__, $db->error());		$db->alter_field('users', 'registration_ip', 'VARCHAR(39)', false, '0.0.0.0') or error('Unable to alter registration_ip field', __FILE__, __LINE__, $db->error());		// Make the message field MEDIUMTEXT to allow proper conversion of 65535 character posts to UTF-8		$db->alter_field('posts', 'message', 'MEDIUMTEXT', true) or error('Unable to alter message field', __FILE__, __LINE__, $db->error());		// Add the DST option to the users table		$db->add_field('users', 'dst', 'TINYINT(1)', false, 0, 'timezone') or error('Unable to add dst field', __FILE__, __LINE__, $db->error());		// Add the last_post column to the online table		$db->add_field('online', 'last_post', 'INT(10) UNSIGNED', true, null, null) or error('Unable to add last_post field', __FILE__, __LINE__, $db->error());		// Add the last_search column to the online table		$db->add_field('online', 'last_search', 'INT(10) UNSIGNED', true, null, null) or error('Unable to add last_search field', __FILE__, __LINE__, $db->error());		// Add the last_search column to the users table		$db->add_field('users', 'last_search', 'INT(10) UNSIGNED', true, null, 'last_post') or error('Unable to add last_search field', __FILE__, __LINE__, $db->error());		// Drop use_avatar column from users table		$db->drop_field('users', 'use_avatar') or error('Unable to drop use_avatar field', __FILE__, __LINE__, $db->error());		// Drop save_pass column from users table		$db->drop_field('users', 'save_pass') or error('Unable to drop save_pass field', __FILE__, __LINE__, $db->error());		// Drop g_edit_subjects_interval column from groups table		$db->drop_field('groups', 'g_edit_subjects_interval');		// Add database revision number		if (!array_key_exists('o_database_revision', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_database_revision\', \'0\')') or error('Unable to insert config value \'o_database_revision\'', __FILE__, __LINE__, $db->error());		// Add search index revision number		if (!array_key_exists('o_searchindex_revision', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_searchindex_revision\', \'0\')') or error('Unable to insert config value \'o_searchindex_revision\'', __FILE__, __LINE__, $db->error());		// Add parser revision number		if (!array_key_exists('o_parser_revision', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_parser_revision\', \'0\')') or error('Unable to insert config value \'o_parser_revision\'', __FILE__, __LINE__, $db->error());		// Add default email setting option		if (!array_key_exists('o_default_email_setting', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_default_email_setting\', \'1\')') or error('Unable to insert config value \'o_default_email_setting\'', __FILE__, __LINE__, $db->error());		// Make sure we have o_additional_navlinks (was added in 1.2.1)		if (!array_key_exists('o_additional_navlinks', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_additional_navlinks\', \'\')') or error('Unable to insert config value \'o_additional_navlinks\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_topic_views		if (!array_key_exists('o_topic_views', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_topic_views\', \'1\')') or error('Unable to insert config value \'o_topic_views\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_signatures		if (!array_key_exists('o_signatures', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_signatures\', \'1\')') or error('Unable to insert config value \'o_signatures\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_smtp_ssl		if (!array_key_exists('o_smtp_ssl', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_smtp_ssl\', \'0\')') or error('Unable to insert config value \'o_smtp_ssl\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_default_dst		if (!array_key_exists('o_default_dst', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_default_dst\', \'0\')') or error('Unable to insert config value \'o_default_dst\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_quote_depth		if (!array_key_exists('o_quote_depth', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_quote_depth\', \'3\')') or error('Unable to insert config value \'o_quote_depth\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_feed_type		if (!array_key_exists('o_feed_type', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_feed_type\', \'2\')') or error('Unable to insert config value \'o_feed_type\'', __FILE__, __LINE__, $db->error());		// Insert new config option o_feed_ttl		if (!array_key_exists('o_feed_ttl', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_feed_ttl\', \'0\')') or error('Unable to insert config value \'o_feed_ttl\'', __FILE__, __LINE__, $db->error());		// Insert config option o_base_url which was removed in 1.3		if (!array_key_exists('o_base_url', $pun_config))		{			// If it isn't in $pun_config['o_base_url'] it should be in $base_url, but just in-case it isn't we can make a guess at it			if (!isset($base_url))			{				// Make an educated guess regarding base_url				$base_url  = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https://' : 'http://';	// protocol				$base_url .= preg_replace('%:(80|443)$%', '', $_SERVER['HTTP_HOST']);							// host[:port]				$base_url .= str_replace('\\', '/', dirname($_SERVER['SCRIPT_NAME']));							// path			}			if (substr($base_url, -1) == '/')				$base_url = substr($base_url, 0, -1);			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_base_url\', \''.$db->escape($base_url).'\')') or error('Unable to insert config value \'o_quote_depth\'', __FILE__, __LINE__, $db->error());		}		if (strpos($cur_version, '1.2') === 0)		{			// Groups are almost the same as 1.2:			// unverified:	32000 -> 0			$db->query('UPDATE '.$db->prefix.'users SET group_id = 0 WHERE group_id = 32000') or error('Unable to update unverified users', __FILE__, __LINE__, $db->error());		}		else if (strpos($cur_version, '1.3') === 0)		{			// Groups have changed quite a lot from 1.3:			// unverified:	0 -> 0			// admin:		1 -> 1			// mod:			? -> 2			// guest:		2 -> 3			// member:		? -> 4			$result = $db->query('SELECT MAX(g_id) + 1 FROM '.$db->prefix.'groups') or error('Unable to select temp group ID', __FILE__, __LINE__, $db->error());			$temp_id = $db->result($result);			$result = $db->query('SELECT g_id FROM '.$db->prefix.'groups WHERE g_moderator = 1 AND g_id > 1 LIMIT 1') or error('Unable to select moderator group', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result))				$mod_gid = $db->result($result);			else			{				$db->query('INSERT INTO '.$db->prefix.'groups (g_title, g_user_title, g_moderator, g_mod_edit_users, g_mod_rename_users, g_mod_change_passwords, g_mod_ban_users, g_read_board, g_view_users, g_post_replies, g_post_topics, g_edit_posts, g_delete_posts, g_delete_topics, g_set_title, g_search, g_search_users, g_send_email, g_post_flood, g_search_flood, g_email_flood, g_report_flood) VALUES('."'Moderators', 'Moderator', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0)") or error('Unable to add group', __FILE__, __LINE__, $db->error());				$mod_gid = $db->insert_id();			}			$member_gid = $pun_config['o_default_user_group'];			// move the mod group to a temp place			$db->query('UPDATE '.$db->prefix.'groups SET g_id = '.$temp_id.' WHERE g_id = '.$mod_gid) or error('Unable to update group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'users SET group_id = '.$temp_id.' WHERE group_id = '.$mod_gid) or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = '.$temp_id.' WHERE group_id = '.$mod_gid) or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());			if ($member_gid == $mod_gid) $member_gid = $temp_id;			// move whoever is in 3 to a spare slot			$db->query('UPDATE '.$db->prefix.'groups SET g_id = '.$mod_gid.' WHERE g_id = 3') or error('Unable to update group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'users SET group_id = '.$mod_gid.' WHERE group_id = 3') or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = '.$mod_gid.' WHERE group_id = 3') or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());			if ($member_gid == 3) $member_gid = $mod_gid;			// move guest to 3			$db->query('UPDATE '.$db->prefix.'groups SET g_id = 3 WHERE g_id = 2') or error('Unable to update group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'users SET group_id = 3 WHERE group_id = 2') or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = 3 WHERE group_id = 2') or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());			if ($member_gid == 2) $member_gid = 3;			// move mod group in temp place to 2			$db->query('UPDATE '.$db->prefix.'groups SET g_id = 2 WHERE g_id = '.$temp_id) or error('Unable to update group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'users SET group_id = 2 WHERE group_id = '.$temp_id) or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = 2 WHERE group_id = '.$temp_id) or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());			if ($member_gid == $temp_id) $member_gid = 2;			// Only move stuff around if it isn't already in the right place			if ($member_gid != $mod_gid || $member_gid != 4)			{				// move members to temp place				$db->query('UPDATE '.$db->prefix.'groups SET g_id = '.$temp_id.' WHERE g_id = '.$member_gid) or error('Unable to update group ID', __FILE__, __LINE__, $db->error());				$db->query('UPDATE '.$db->prefix.'users SET group_id = '.$temp_id.' WHERE group_id = '.$member_gid) or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());				$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = '.$temp_id.' WHERE group_id = '.$member_gid) or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());				// move whoever is in 4 to members place				$db->query('UPDATE '.$db->prefix.'groups SET g_id = '.$member_gid.' WHERE g_id = 4') or error('Unable to update group ID', __FILE__, __LINE__, $db->error());				$db->query('UPDATE '.$db->prefix.'users SET group_id = '.$member_gid.' WHERE group_id = 4') or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());				$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = '.$member_gid.' WHERE group_id = 4') or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());				// move members in temp place to 4				$db->query('UPDATE '.$db->prefix.'groups SET g_id = 4 WHERE g_id = '.$temp_id) or error('Unable to update group ID', __FILE__, __LINE__, $db->error());				$db->query('UPDATE '.$db->prefix.'users SET group_id = 4 WHERE group_id = '.$temp_id) or error('Unable to update users group ID', __FILE__, __LINE__, $db->error());				$db->query('UPDATE '.$db->prefix.'forum_perms SET group_id = 4 WHERE group_id = '.$temp_id) or error('Unable to forum_perms group ID', __FILE__, __LINE__, $db->error());			}			$db->query('UPDATE '.$db->prefix.'config SET conf_value=\''.$member_gid.'\' WHERE conf_name=\'o_default_user_group\'') or error('Unable to update default user group ID', __FILE__, __LINE__, $db->error());		}		// Server time zone is now simply the default time zone		if (!array_key_exists('o_default_timezone', $pun_config))			$db->query('UPDATE '.$db->prefix.'config SET conf_name = \'o_default_timezone\' WHERE conf_name = \'o_server_timezone\'') or error('Unable to update time zone config', __FILE__, __LINE__, $db->error());		// Increase visit timeout to 30 minutes (only if it hasn't been changed from the default)		if (!array_key_exists('o_database_revision', $pun_config) && $pun_config['o_timeout_visit'] == '600')			$db->query('UPDATE '.$db->prefix.'config SET conf_value = \'1800\' WHERE conf_name = \'o_timeout_visit\'') or error('Unable to update visit timeout config', __FILE__, __LINE__, $db->error());		// Remove obsolete g_post_polls permission from groups table		$db->drop_field('groups', 'g_post_polls');		// Make room for multiple moderator groups		if (!$db->field_exists('groups', 'g_moderator'))		{			// Add g_moderator column to groups table			$db->add_field('groups', 'g_moderator', 'TINYINT(1)', false, 0, 'g_user_title') or error('Unable to add g_moderator field', __FILE__, __LINE__, $db->error());			// Give the moderator group moderator privileges			$db->query('UPDATE '.$db->prefix.'groups SET g_moderator = 1 WHERE g_id = 2') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());		}		// Replace obsolete p_mod_edit_users config setting with new per-group permission		if (array_key_exists('p_mod_edit_users', $pun_config))		{			$db->query('DELETE FROM '.$db->prefix.'config WHERE conf_name = \'p_mod_edit_users\'') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());			$db->add_field('groups', 'g_mod_edit_users', 'TINYINT(1)', false, 0, 'g_moderator') or error('Unable to add g_mod_edit_users field', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'groups SET g_mod_edit_users = '.$pun_config['p_mod_edit_users'].' WHERE g_moderator = 1') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());		}		// Replace obsolete p_mod_rename_users config setting with new per-group permission		if (array_key_exists('p_mod_rename_users', $pun_config))		{			$db->query('DELETE FROM '.$db->prefix.'config WHERE conf_name = \'p_mod_rename_users\'') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());			$db->add_field('groups', 'g_mod_rename_users', 'TINYINT(1)', false, 0, 'g_mod_edit_users') or error('Unable to add g_mod_rename_users field', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'groups SET g_mod_rename_users = '.$pun_config['p_mod_rename_users'].' WHERE g_moderator = 1') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());		}		// Replace obsolete p_mod_change_passwords config setting with new per-group permission		if (array_key_exists('p_mod_change_passwords', $pun_config))		{			$db->query('DELETE FROM '.$db->prefix.'config WHERE conf_name = \'p_mod_change_passwords\'') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());			$db->add_field('groups', 'g_mod_change_passwords', 'TINYINT(1)', false, 0, 'g_mod_rename_users') or error('Unable to add g_mod_change_passwords field', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'groups SET g_mod_change_passwords = '.$pun_config['p_mod_change_passwords'].' WHERE g_moderator = 1') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());		}		// Replace obsolete p_mod_ban_users config setting with new per-group permission		if (array_key_exists('p_mod_ban_users', $pun_config))		{			$db->query('DELETE FROM '.$db->prefix.'config WHERE conf_name = \'p_mod_ban_users\'') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());			$db->add_field('groups', 'g_mod_ban_users', 'TINYINT(1)', false, 0, 'g_mod_change_passwords') or error('Unable to add g_mod_ban_users field', __FILE__, __LINE__, $db->error());			$db->query('UPDATE '.$db->prefix.'groups SET g_mod_ban_users = '.$pun_config['p_mod_ban_users'].' WHERE g_moderator = 1') or error('Unable to update moderator powers', __FILE__, __LINE__, $db->error());		}		// We need to add a unique index to avoid users having multiple rows in the online table		if (!$db->index_exists('online', 'user_id_ident_idx'))		{			$db->truncate_table('online') or error('Unable to clear online table', __FILE__, __LINE__, $db->error());			if ($mysql)				$db->add_index('online', 'user_id_ident_idx', array('user_id', 'ident(25)'), true) or error('Unable to add user_id_ident_idx index', __FILE__, __LINE__, $db->error());			else				$db->add_index('online', 'user_id_ident_idx', array('user_id', 'ident'), true) or error('Unable to add user_id_ident_idx index', __FILE__, __LINE__, $db->error());		}		// Remove the redundant user_id_idx on the online table		$db->drop_index('online', 'user_id_idx') or error('Unable to drop user_id_idx index', __FILE__, __LINE__, $db->error());		// Add an index to ident on the online table		if ($mysql)			$db->add_index('online', 'ident_idx', array('ident(25)')) or error('Unable to add ident_idx index', __FILE__, __LINE__, $db->error());		else			$db->add_index('online', 'ident_idx', array('ident')) or error('Unable to add ident_idx index', __FILE__, __LINE__, $db->error());		// Add an index to logged in the online table		$db->add_index('online', 'logged_idx', array('logged')) or error('Unable to add logged_idx index', __FILE__, __LINE__, $db->error());		// Add an index to last_post in the topics table		$db->add_index('topics', 'last_post_idx', array('last_post')) or error('Unable to add last_post_idx index', __FILE__, __LINE__, $db->error());		// Add an index to username on the bans table		if ($mysql)			$db->add_index('bans', 'username_idx', array('username(25)')) or error('Unable to add username_idx index', __FILE__, __LINE__, $db->error());		else			$db->add_index('bans', 'username_idx', array('username')) or error('Unable to add username_idx index', __FILE__, __LINE__, $db->error());		// Change the username_idx on users to a unique index of max size 25		$db->drop_index('users', 'username_idx') or error('Unable to drop old username_idx index', __FILE__, __LINE__, $db->error());		$field = $mysql ? 'username(25)' : 'username';		// Attempt to add a unique index. If the user doesn't use a transactional database this can fail due to multiple matching usernames in the		// users table. This is bad, but just giving up if it happens is even worse! If it fails just add a regular non-unique index.		if (!$db->add_index('users', 'username_idx', array($field), true))			$db->add_index('users', 'username_idx', array($field)) or error('Unable to add username_idx field', __FILE__, __LINE__, $db->error());		// Add g_view_users column to groups table		$db->add_field('groups', 'g_view_users', 'TINYINT(1)', false, 1, 'g_read_board') or error('Unable to add g_view_users field', __FILE__, __LINE__, $db->error());		// Add the last_email_sent column to the users table and the g_send_email and		// g_email_flood columns to the groups table		$db->add_field('users', 'last_email_sent', 'INT(10) UNSIGNED', true, null, 'last_search') or error('Unable to add last_email_sent field', __FILE__, __LINE__, $db->error());		$db->add_field('groups', 'g_send_email', 'TINYINT(1)', false, 1, 'g_search_users') or error('Unable to add g_send_email field', __FILE__, __LINE__, $db->error());		$db->add_field('groups', 'g_email_flood', 'SMALLINT(6)', false, 60, 'g_search_flood') or error('Unable to add g_email_flood field', __FILE__, __LINE__, $db->error());		// Add the last_report_sent column to the users table and the g_report_flood		// column to the groups table		$db->add_field('users', 'last_report_sent', 'INT(10) UNSIGNED', true, null, 'last_email_sent') or error('Unable to add last_report_sent field', __FILE__, __LINE__, $db->error());		$db->add_field('groups', 'g_report_flood', 'SMALLINT(6)', false, 60, 'g_email_flood') or error('Unable to add g_report_flood field', __FILE__, __LINE__, $db->error());		// Set non-default g_send_email, g_flood_email and g_flood_report values properly		$db->query('UPDATE '.$db->prefix.'groups SET g_send_email = 0 WHERE g_id = 3') or error('Unable to update group email permissions', __FILE__, __LINE__, $db->error());		$db->query('UPDATE '.$db->prefix.'groups SET g_email_flood = 0, g_report_flood = 0 WHERE g_id IN (1,2,3)') or error('Unable to update group email permissions', __FILE__, __LINE__, $db->error());		// Add the auto notify/subscription option to the users table		$db->add_field('users', 'auto_notify', 'TINYINT(1)', false, 0, 'notify_with_post') or error('Unable to add auto_notify field', __FILE__, __LINE__, $db->error());		// Add the first_post_id column to the topics table		if (!$db->field_exists('topics', 'first_post_id'))		{			$db->add_field('topics', 'first_post_id', 'INT(10) UNSIGNED', false, 0, 'posted') or error('Unable to add first_post_id field', __FILE__, __LINE__, $db->error());			$db->add_index('topics', 'first_post_id_idx', array('first_post_id')) or error('Unable to add first_post_id_idx index', __FILE__, __LINE__, $db->error());			// Now that we've added the column and indexed it, we need to give it correct data			$result = $db->query('SELECT MIN(id) AS first_post, topic_id FROM '.$db->prefix.'posts GROUP BY topic_id') or error('Unable to fetch first_post_id', __FILE__, __LINE__, $db->error());			while ($cur_post = $db->fetch_assoc($result))				$db->query('UPDATE '.$db->prefix.'topics SET first_post_id = '.$cur_post['first_post'].' WHERE id = '.$cur_post['topic_id']) or error('Unable to update first_post_id', __FILE__, __LINE__, $db->error());		}		// Move any users with the old unverified status to their new group		$db->query('UPDATE '.$db->prefix.'users SET group_id=0 WHERE group_id=32000') or error('Unable to move unverified users', __FILE__, __LINE__, $db->error());		// Add the ban_creator column to the bans table		$db->add_field('bans', 'ban_creator', 'INT(10) UNSIGNED', false, 0) or error('Unable to add ban_creator field', __FILE__, __LINE__, $db->error());		// Add the time/date format settings to the user table		$db->add_field('users', 'time_format', 'TINYINT(1)', false, 0, 'dst') or error('Unable to add time_format field', __FILE__, __LINE__, $db->error());		$db->add_field('users', 'date_format', 'TINYINT(1)', false, 0, 'dst') or error('Unable to add date_format field', __FILE__, __LINE__, $db->error());		// Change the search_data column to mediumtext		$db->alter_field('search_cache', 'search_data', 'MEDIUMTEXT', true) or error('Unable to alter search_data field', __FILE__, __LINE__, $db->error());		// Add the group promotion columns to the groups table		$db->add_field('groups', 'g_promote_min_posts', 'INT(10) UNSIGNED', false, 0, 'g_user_title') or error('Unable to add g_promote_min_posts field', __FILE__, __LINE__, $db->error());		$db->add_field('groups', 'g_promote_next_group', 'INT(10) UNSIGNED', false, 0, 'g_promote_min_posts') or error('Unable to add g_promote_next_group field', __FILE__, __LINE__, $db->error());		// Add a field for the per-group permission to post links		$db->add_field('groups', 'g_post_links', 'TINYINT(1)', false, 1, 'g_delete_topics') or error('Unable to add per-group permission to post links', __FILE__, __LINE__, $db->error());		// In case we had the fulltext search extension installed (1.3-legacy), remove it		$db->drop_index('topics', 'subject_idx') or error('Unable to drop subject_idx index', __FILE__, __LINE__, $db->error());		$db->drop_index('posts', 'message_idx') or error('Unable to drop message_idx index', __FILE__, __LINE__, $db->error());		// In case we had the fulltext search mod installed (1.2), remove it		$db->drop_index('topics', 'subject_fulltext_search') or error('Unable to drop subject_fulltext_search index', __FILE__, __LINE__, $db->error());		$db->drop_index('posts', 'message_fulltext_search') or error('Unable to drop message_fulltext_search index', __FILE__, __LINE__, $db->error());		// If the search_cache table has been dropped by the fulltext search extension, recreate it		if (!$db->table_exists('search_cache'))		{			$schema = array(				'FIELDS'		=> array(					'id'			=> array(						'datatype'		=> 'INT(10) UNSIGNED',						'allow_null'	=> false,						'default'		=> '0'					),					'ident'			=> array(						'datatype'		=> 'VARCHAR(200)',						'allow_null'	=> false,						'default'		=> '\'\''					),					'search_data'	=> array(						'datatype'		=> 'MEDIUMTEXT',						'allow_null'	=> true					)				),				'PRIMARY KEY'	=> array('id'),				'INDEXES'		=> array(					'ident_idx'	=> array('ident')				)			);			if ($db_type == 'mysql' || $db_type == 'mysqli' || $db_type == 'mysql_innodb' || $db_type == 'mysqli_innodb')				$schema['INDEXES']['ident_idx'] = array('ident(8)');			$db->create_table('search_cache', $schema);		}		// If the search_matches table has been dropped by the fulltext search extension, recreate it		if (!$db->table_exists('search_matches'))		{			$schema = array(				'FIELDS'		=> array(					'post_id'		=> array(						'datatype'		=> 'INT(10) UNSIGNED',						'allow_null'	=> false,						'default'		=> '0'					),					'word_id'		=> array(						'datatype'		=> 'INT(10) UNSIGNED',						'allow_null'	=> false,						'default'		=> '0'					),					'subject_match'	=> array(						'datatype'		=> 'TINYINT(1)',						'allow_null'	=> false,						'default'		=> '0'					)				),				'INDEXES'		=> array(					'word_id_idx'	=> array('word_id'),					'post_id_idx'	=> array('post_id')				)			);			$db->create_table('search_matches', $schema);		}		// If the search_words table has been dropped by the fulltext search extension, recreate it		if (!$db->table_exists('search_words'))		{			$schema = array(				'FIELDS'		=> array(					'id'			=> array(						'datatype'		=> 'SERIAL',						'allow_null'	=> false					),					'word'			=> array(						'datatype'		=> 'VARCHAR(20)',						'allow_null'	=> false,						'default'		=> '\'\'',						'collation'		=> 'bin'					)				),				'PRIMARY KEY'	=> array('word'),				'INDEXES'		=> array(					'id_idx'	=> array('id')				)			);			if ($db_type == 'sqlite')			{				$schema['PRIMARY KEY'] = array('id');				$schema['UNIQUE KEYS'] = array('word_idx'	=> array('word'));			}			$db->create_table('search_words', $schema);		}		// Rename the subscription table		$db->rename_table('subscriptions', 'topic_subscriptions');		// if we don't have the forum_subscriptions table, create it		if (!$db->table_exists('forum_subscriptions'))		{			$schema = array(				'FIELDS'		=> array(					'user_id'		=> array(						'datatype'		=> 'INT(10) UNSIGNED',						'allow_null'	=> false,						'default'		=> '0'					),					'forum_id'		=> array(						'datatype'		=> 'INT(10) UNSIGNED',						'allow_null'	=> false,						'default'		=> '0'					)				),				'PRIMARY KEY'	=> array('user_id', 'forum_id')			);			$db->create_table('forum_subscriptions', $schema) or error('Unable to create forum subscriptions table', __FILE__, __LINE__, $db->error());		}		// Insert new config option o_forum_subscriptions		if (!array_key_exists('o_forum_subscriptions', $pun_config))			$db->query('INSERT INTO '.$db->prefix.'config (conf_name, conf_value) VALUES (\'o_forum_subscriptions\', \'1\')') or error('Unable to insert config value \'o_forum_subscriptions\'', __FILE__, __LINE__, $db->error());		// Rename config option o_subscriptions to o_topic_subscriptions		if (!array_key_exists('o_topic_subscriptions', $pun_config))			$db->query('UPDATE '.$db->prefix.'config SET conf_name=\'o_topic_subscriptions\' WHERE conf_name=\'o_subscriptions\'') or error('Unable to rename config value \'o_subscriptions\'', __FILE__, __LINE__, $db->error());		// Change the default style if the old doesn't exist anymore		if ($pun_config['o_default_style'] != $default_style)			$db->query('UPDATE '.$db->prefix.'config SET conf_value = \''.$db->escape($default_style).'\' WHERE conf_name = \'o_default_style\'') or error('Unable to update default style config', __FILE__, __LINE__, $db->error());		// For MySQL(i) without InnoDB, change the engine of the online table (for performance reasons)		if ($db_type == 'mysql' || $db_type == 'mysqli')			$db->query('ALTER TABLE '.$db->prefix.'online ENGINE = MyISAM') or error('Unable to change engine type of online table to MyISAM', __FILE__, __LINE__, $db->error());		// Remove config option o_ranks		if (array_key_exists('o_ranks', $pun_config))			$db->query('DELETE FROM '.$db->prefix.'config WHERE conf_name=\'o_ranks\'') or error('Unable to remove config value \'o_ranks\'', __FILE__, __LINE__, $db->error());		// Remove the ranks table		if ($db->table_exists('ranks'))			$db->drop_table('ranks') or error('Unable to drop ranks table', __FILE__, __LINE__, $db->error());		// Should we do charset conversion or not?		if (strpos($cur_version, '1.2') === 0 && isset($_POST['convert_charset']))			$query_str = '?stage=conv_bans&req_old_charset='.$old_charset;		break;	// Convert bans	case 'conv_bans':		$query_str = '?stage=conv_categories&req_old_charset='.$old_charset;		function _conv_bans($cur_item, $old_charset)		{			global $lang_update;			echo sprintf($lang_update['Converting item'], $lang_update['ban'], $cur_item['id']).'<br />'."\n";			convert_to_utf8($cur_item['username'], $old_charset);			convert_to_utf8($cur_item['message'], $old_charset);			return $cur_item;		}		$end_at = convert_table_utf8($db->prefix.'bans', '_conv_bans', $old_charset, 'id', $start_at);		if ($end_at !== true)			$query_str = '?stage=conv_bans&req_old_charset='.$old_charset.'&start_at='.$end_at;		break;	// Convert categories	case 'conv_categories':		$query_str = '?stage=conv_censors&req_old_charset='.$old_charset;		echo sprintf($lang_update['Converting'], $lang_update['categories']).'<br />'."\n";		function _conv_categories($cur_item, $old_charset)		{			convert_to_utf8($cur_item['cat_name'], $old_charset);			return $cur_item;		}		convert_table_utf8($db->prefix.'categories', '_conv_categories', $old_charset, 'id');		break;	// Convert censor words	case 'conv_censors':		$query_str = '?stage=conv_config&req_old_charset='.$old_charset;		echo sprintf($lang_update['Converting'], $lang_update['censor words']).'<br />'."\n";		function _conv_censoring($cur_item, $old_charset)		{			convert_to_utf8($cur_item['search_for'], $old_charset);			convert_to_utf8($cur_item['replace_with'], $old_charset);			return $cur_item;		}		convert_table_utf8($db->prefix.'censoring', '_conv_censoring', $old_charset, 'id');		break;	// Convert config	case 'conv_config':		$query_str = '?stage=conv_forums&req_old_charset='.$old_charset;		echo sprintf($lang_update['Converting'], $lang_update['configuration']).'<br />'."\n";		function _conv_config($cur_item, $old_charset)		{			convert_to_utf8($cur_item['conf_value'], $old_charset);			return $cur_item;		}		convert_table_utf8($db->prefix.'config', '_conv_config', $old_charset, 'conf_name');		break;	// Convert forums	case 'conv_forums':		$query_str = '?stage=conv_perms&req_old_charset='.$old_charset;		echo sprintf($lang_update['Converting'], $lang_update['forums']).'<br />'."\n";		function _conv_forums($cur_item, $old_charset)		{			$moderators = ($cur_item['moderators'] != '') ? unserialize($cur_item['moderators']) : array();			$moderators_utf8 = array();			foreach ($moderators as $mod_username => $mod_user_id)			{				convert_to_utf8($mod_username, $old_charset);				$moderators_utf8[$mod_username] = $mod_user_id;			}			convert_to_utf8($cur_item['forum_name'], $old_charset);			convert_to_utf8($cur_item['forum_desc'], $old_charset);			if (!empty($moderators_utf8))				$cur_item['moderators'] = serialize($moderators_utf8);			return $cur_item;		}		convert_table_utf8($db->prefix.'forums', '_conv_forums', $old_charset, 'id');		break;	// Convert forum permissions	case 'conv_perms':		$query_str = '?stage=conv_groups&req_old_charset='.$old_charset;		alter_table_utf8($db->prefix.'forum_perms');		break;	// Convert groups	case 'conv_groups':		$query_str = '?stage=conv_online&req_old_charset='.$old_charset;		echo sprintf($lang_update['Converting'], $lang_update['groups']).'<br />'."\n";		function _conv_groups($cur_item, $old_charset)		{			convert_to_utf8($cur_item['g_title'], $old_charset);			convert_to_utf8($cur_item['g_user_title'], $old_charset);			return $cur_item;		}		convert_table_utf8($db->prefix.'groups', '_conv_groups', $old_charset, 'g_id');		break;	// Convert online	case 'conv_online':		$query_str = '?stage=conv_posts&req_old_charset='.$old_charset;		// Truncate the table		$db->truncate_table('online') or error('Unable to empty online table', __FILE__, __LINE__, $db->error());		alter_table_utf8($db->prefix.'online');		break;	// Convert posts	case 'conv_posts':		$query_str = '?stage=conv_reports&req_old_charset='.$old_charset;		function _conv_posts($cur_item, $old_charset)		{			global $lang_update;			echo sprintf($lang_update['Converting item'], $lang_update['post'], $cur_item['id']).'<br />'."\n";			convert_to_utf8($cur_item['poster'], $old_charset);			convert_to_utf8($cur_item['message'], $old_charset);			convert_to_utf8($cur_item['edited_by'], $old_charset);			return $cur_item;		}		$end_at = convert_table_utf8($db->prefix.'posts', '_conv_posts', $old_charset, 'id', $start_at);		if ($end_at !== true)			$query_str = '?stage=conv_posts&req_old_charset='.$old_charset.'&start_at='.$end_at;		break;	// Convert reports	case 'conv_reports':		$query_str = '?stage=conv_search_cache&req_old_charset='.$old_charset;		function _conv_reports($cur_item, $old_charset)		{			global $lang_update;			echo sprintf($lang_update['Converting item'], $lang_update['report'], $cur_item['id']).'<br />'."\n";			convert_to_utf8($cur_item['message'], $old_charset);			return $cur_item;		}		$end_at = convert_table_utf8($db->prefix.'reports', '_conv_reports', $old_charset, 'id', $start_at);		if ($end_at !== true)			$query_str = '?stage=conv_reports&req_old_charset='.$old_charset.'&start_at='.$end_at;		break;	// Convert search cache	case 'conv_search_cache':		$query_str = '?stage=conv_search_matches&req_old_charset='.$old_charset;		// Truncate the table		$db->truncate_table('search_cache') or error('Unable to empty search cache table', __FILE__, __LINE__, $db->error());		alter_table_utf8($db->prefix.'search_cache');		break;	// Convert search matches	case 'conv_search_matches':		$query_str = '?stage=conv_search_words&req_old_charset='.$old_charset;		// Truncate the table		$db->truncate_table('search_matches') or error('Unable to empty search index match table', __FILE__, __LINE__, $db->error());		alter_table_utf8($db->prefix.'search_matches');		break;	// Convert search words	case 'conv_search_words':		$query_str = '?stage=conv_subscriptions&req_old_charset='.$old_charset;		// Truncate the table		$db->truncate_table('search_words') or error('Unable to empty search index words table', __FILE__, __LINE__, $db->error());		// Reset the sequence for the search words (not needed for SQLite)		switch ($db_type)		{			case 'mysql':			case 'mysqli':			case 'mysql_innodb':			case 'mysqli_innodb':				$db->query('ALTER TABLE '.$db->prefix.'search_words auto_increment=1') or error('Unable to update table auto_increment', __FILE__, __LINE__, $db->error());				break;			case 'pgsql';				$db->query('SELECT setval(\''.$db->prefix.'search_words_id_seq\', 1, false)') or error('Unable to update sequence', __FILE__, __LINE__, $db->error());				break;		}		alter_table_utf8($db->prefix.'search_words');		break;	// Convert subscriptions	case 'conv_subscriptions':		$query_str = '?stage=conv_topics&req_old_charset='.$old_charset;		// By this stage we should have already renamed the subscription table		alter_table_utf8($db->prefix.'topic_subscriptions');		alter_table_utf8($db->prefix.'forum_subscriptions'); // This should actually already be utf8, but for consistency...		break;	// Convert topics	case 'conv_topics':		$query_str = '?stage=conv_users&req_old_charset='.$old_charset;		function _conv_topics($cur_item, $old_charset)		{			global $lang_update;			echo sprintf($lang_update['Converting item'], $lang_update['topic'], $cur_item['id']).'<br />'."\n";			convert_to_utf8($cur_item['poster'], $old_charset);			convert_to_utf8($cur_item['subject'], $old_charset);			convert_to_utf8($cur_item['last_poster'], $old_charset);			return $cur_item;		}		$end_at = convert_table_utf8($db->prefix.'topics', '_conv_topics', $old_charset, 'id', $start_at);		if ($end_at !== true)			$query_str = '?stage=conv_topics&req_old_charset='.$old_charset.'&start_at='.$end_at;		break;	// Convert users	case 'conv_users':		$query_str = '?stage=preparse_posts';		if ($start_at == 0)			$_SESSION['dupe_users'] = array();		function _conv_users($cur_item, $old_charset)		{			global $lang_update;			echo sprintf($lang_update['Converting item'], $lang_update['user'], $cur_item['id']).'<br />'."\n";			convert_to_utf8($cur_item['username'], $old_charset);			convert_to_utf8($cur_item['title'], $old_charset);			convert_to_utf8($cur_item['realname'], $old_charset);			convert_to_utf8($cur_item['location'], $old_charset);			convert_to_utf8($cur_item['signature'], $old_charset);			convert_to_utf8($cur_item['admin_note'], $old_charset);			return $cur_item;		}		function _error_users($cur_user)		{			$_SESSION['dupe_users'][$cur_user['id']] = $cur_user;		}		$end_at = convert_table_utf8($db->prefix.'users', '_conv_users', $old_charset, 'id', $start_at, '_error_users');		if ($end_at !== true)			$query_str = '?stage=conv_users&req_old_charset='.$old_charset.'&start_at='.$end_at;		else if (!empty($_SESSION['dupe_users']))			$query_str = '?stage=conv_users_dupe';		break;	// Handle any duplicate users which occured due to conversion	case 'conv_users_dupe':		$query_str = '?stage=preparse_posts';		if (!$mysql || empty($_SESSION['dupe_users']))			break;		if (isset($_POST['form_sent']))		{			$errors = array();			require PUN_ROOT.'include/email.php';			foreach ($_SESSION['dupe_users'] as $id => $cur_user)			{				$errors[$id] = array();				$username = pun_trim($_POST['dupe_users'][$id]);				if (pun_strlen($username) < 2)					$errors[$id][] = $lang_update['Username too short error'];				else if (pun_strlen($username) > 25) // This usually doesn't happen since the form element only accepts 25 characters					$errors[$id][] = $lang_update['Username too long error'];				else if (!strcasecmp($username, 'Guest'))					$errors[$id][] = $lang_update['Username Guest reserved error'];				else if (preg_match('%[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}%', $username) || preg_match('%((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))%', $username))					$errors[$id][] = $lang_update['Username IP format error'];				else if ((strpos($username, '[') !== false || strpos($username, ']') !== false) && strpos($username, '\'') !== false && strpos($username, '"') !== false)					$errors[$id][] = $lang_update['Username bad characters error'];				else if (preg_match('%(?:\[/?(?:b|u|s|ins|del|em|i|h|colou?r|quote|code|img|url|email|list|\*)\]|\[(?:img|url|quote|list)=)%i', $username))					$errors[$id][] = $lang_update['Username BBCode error'];				$result = $db->query('SELECT username FROM '.$db->prefix.'users WHERE (UPPER(username)=UPPER(\''.$db->escape($username).'\') OR UPPER(username)=UPPER(\''.$db->escape(ucp_preg_replace('%[^\p{L}\p{N}]%u', '', $username)).'\')) AND id>1') or error('Unable to fetch user info', __FILE__, __LINE__, $db->error());				if ($db->num_rows($result))				{					$busy = $db->result($result);					$errors[$id][] = sprintf($lang_update['Username duplicate error'], pun_htmlspecialchars($busy));				}				if (empty($errors[$id]))				{					$old_username = $cur_user['username'];					$_SESSION['dupe_users'][$id]['username'] = $cur_user['username'] = $username;					$temp = array();					foreach ($cur_user as $idx => $value)						$temp[$idx] = is_null($value) ? 'NULL' : '\''.$db->escape($value).'\'';					// Insert the renamed user					$db->query('INSERT INTO '.$db->prefix.'users('.implode(',', array_keys($temp)).') VALUES ('.implode(',', array_values($temp)).')') or error('Unable to insert data to new table', __FILE__, __LINE__, $db->error());					// Renaming a user also affects a bunch of other stuff, lets fix that too...					$db->query('UPDATE '.$db->prefix.'posts SET poster=\''.$db->escape($username).'\' WHERE poster_id='.$id) or error('Unable to update posts', __FILE__, __LINE__, $db->error());					// TODO: The following must compare using collation utf8_bin otherwise we will accidently update posts/topics/etc belonging to both of the duplicate users, not just the one we renamed!					$db->query('UPDATE '.$db->prefix.'posts SET edited_by=\''.$db->escape($username).'\' WHERE edited_by=\''.$db->escape($old_username).'\' COLLATE utf8_bin') or error('Unable to update posts', __FILE__, __LINE__, $db->error());					$db->query('UPDATE '.$db->prefix.'topics SET poster=\''.$db->escape($username).'\' WHERE poster=\''.$db->escape($old_username).'\' COLLATE utf8_bin') or error('Unable to update topics', __FILE__, __LINE__, $db->error());					$db->query('UPDATE '.$db->prefix.'topics SET last_poster=\''.$db->escape($username).'\' WHERE last_poster=\''.$db->escape($old_username).'\' COLLATE utf8_bin') or error('Unable to update topics', __FILE__, __LINE__, $db->error());					$db->query('UPDATE '.$db->prefix.'forums SET last_poster=\''.$db->escape($username).'\' WHERE last_poster=\''.$db->escape($old_username).'\' COLLATE utf8_bin') or error('Unable to update forums', __FILE__, __LINE__, $db->error());					$db->query('UPDATE '.$db->prefix.'online SET ident=\''.$db->escape($username).'\' WHERE ident=\''.$db->escape($old_username).'\' COLLATE utf8_bin') or error('Unable to update online list', __FILE__, __LINE__, $db->error());					// If the user is a moderator or an administrator we have to update the moderator lists					$result = $db->query('SELECT g_moderator FROM '.$db->prefix.'groups WHERE g_id='.$cur_user['group_id']) or error('Unable to fetch group', __FILE__, __LINE__, $db->error());					$group_mod = $db->result($result);					if ($cur_user['group_id'] == PUN_ADMIN || $group_mod == '1')					{						$result = $db->query('SELECT id, moderators FROM '.$db->prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db->error());						while ($cur_forum = $db->fetch_assoc($result))						{							$cur_moderators = ($cur_forum['moderators'] != '') ? unserialize($cur_forum['moderators']) : array();							if (in_array($id, $cur_moderators))							{								unset($cur_moderators[$old_username]);								$cur_moderators[$username] = $id;								uksort($cur_moderators, 'utf8_strcasecmp');								$db->query('UPDATE '.$db->prefix.'forums SET moderators=\''.$db->escape(serialize($cur_moderators)).'\' WHERE id='.$cur_forum['id']) or error('Unable to update forum', __FILE__, __LINE__, $db->error());							}						}					}					// Email the user alerting them of the change					if (file_exists(PUN_ROOT.'lang/'.$cur_user['language'].'/mail_templates/rename.tpl'))						$mail_tpl = trim(file_get_contents(PUN_ROOT.'lang/'.$cur_user['language'].'/mail_templates/rename.tpl'));					else if (file_exists(PUN_ROOT.'lang/'.$pun_config['o_default_lang'].'/mail_templates/rename.tpl'))						$mail_tpl = trim(file_get_contents(PUN_ROOT.'lang/'.$pun_config['o_default_lang'].'/mail_templates/rename.tpl'));					else						$mail_tpl = trim(file_get_contents(PUN_ROOT.'lang/English/mail_templates/rename.tpl'));					// The first row contains the subject					$first_crlf = strpos($mail_tpl, "\n");					$mail_subject = trim(substr($mail_tpl, 8, $first_crlf-8));					$mail_message = trim(substr($mail_tpl, $first_crlf));					$mail_subject = str_replace('<board_title>', $pun_config['o_board_title'], $mail_subject);					$mail_message = str_replace('<base_url>', get_base_url().'/', $mail_message);					$mail_message = str_replace('<old_username>', $old_username, $mail_message);					$mail_message = str_replace('<new_username>', $username, $mail_message);					$mail_message = str_replace('<board_mailer>', $pun_config['o_board_title'], $mail_message);					pun_mail($cur_user['email'], $mail_subject, $mail_message);					unset($_SESSION['dupe_users'][$id]);				}			}		}		if (!empty($_SESSION['dupe_users']))		{			$query_str = '';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang_common['lang_identifier'] ?>" lang="<?php echo $lang_common['lang_identifier'] ?>" dir="<?php echo $lang_common['lang_direction'] ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title><?php echo $lang_update['Update'] ?></title><link rel="stylesheet" type="text/css" href="style/<?php echo $default_style ?>.css" /></head><body><div id="pundb_update" class="pun"><div class="top-box"><div><!-- Top Corners --></div></div><div class="punwrap"><div class="blockform">	<h2><span><?php echo $lang_update['Error converting users'] ?></span></h2>	<div class="box">		<form method="post" action="db_update.php?stage=conv_users_dupe&amp;uid=<?php echo $uid ?>">			<input type="hidden" name="form_sent" value="1" />			<div class="inform">				<div class="forminfo">						<p style="font-size: 1.1em"><?php echo $lang_update['Error info 1'] ?></p>						<p style="font-size: 1.1em"><?php echo $lang_update['Error info 2'] ?></p>				</div>			</div><?php			foreach ($_SESSION['dupe_users'] as $id => $cur_user)			{?>			<div class="inform">				<fieldset>					<legend><?php echo pun_htmlspecialchars($cur_user['username']); ?></legend>					<div class="infldset">						<label class="required"><strong><?php echo $lang_update['New username'] ?> <span><?php echo $lang_update['Required'] ?></span></strong><br /><input type="text" name="<?php echo 'dupe_users['.$id.']'; ?>" value="<?php if (isset($_POST['dupe_users'][$id])) echo pun_htmlspecialchars($_POST['dupe_users'][$id]); ?>" size="25" maxlength="25" /><br /></label>					</div>				</fieldset><?php if (!empty($errors[$id])): ?>				<div class="forminfo error-info">					<h3><?php echo $lang_update['Correct errors'] ?></h3>					<ul class="error-list"><?phpforeach ($errors[$id] as $cur_error)	echo "\t\t\t\t\t\t".'<li><strong>'.$cur_error.'</strong></li>'."\n";?>					</ul>				</div><?php endif; ?>			</div><?php			}?>			<p class="buttons"><input type="submit" name="rename" value="<?php echo $lang_update['Rename users'] ?>" /></p>		</form>	</div></div></div><div class="end-box"><div><!-- Bottom Corners --></div></div></div></body></html><?php		}		break;	// Preparse posts	case 'preparse_posts':		$query_str = '?stage=preparse_sigs';		// If we don't need to parse the posts, skip this stage		if (isset($pun_config['o_parser_revision']) && $pun_config['o_parser_revision'] >= UPDATE_TO_PARSER_REVISION)			break;		require PUN_ROOT.'include/parser.php';		// Fetch posts to process this cycle		$result = $db->query('SELECT id, message FROM '.$db->prefix.'posts WHERE id > '.$start_at.' ORDER BY id ASC LIMIT '.PER_PAGE) or error('Unable to fetch posts', __FILE__, __LINE__, $db->error());		$temp = array();		$end_at = 0;		while ($cur_item = $db->fetch_assoc($result))		{			echo sprintf($lang_update['Preparsing item'], $lang_update['post'], $cur_item['id']).'<br />'."\n";			$db->query('UPDATE '.$db->prefix.'posts SET message = \''.$db->escape(preparse_bbcode($cur_item['message'], $temp)).'\' WHERE id = '.$cur_item['id']) or error('Unable to update post', __FILE__, __LINE__, $db->error());			$end_at = $cur_item['id'];		}		// Check if there is more work to do		if ($end_at > 0)		{			$result = $db->query('SELECT 1 FROM '.$db->prefix.'posts WHERE id > '.$end_at.' ORDER BY id ASC LIMIT 1') or error('Unable to fetch next ID', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result) > 0)				$query_str = '?stage=preparse_posts&start_at='.$end_at;		}		break;	// Preparse signatures	case 'preparse_sigs':		$query_str = '?stage=rebuild_idx';		// If we don't need to parse the sigs, skip this stage		if (isset($pun_config['o_parser_revision']) && $pun_config['o_parser_revision'] >= UPDATE_TO_PARSER_REVISION)			break;		require PUN_ROOT.'include/parser.php';		// Fetch users to process this cycle		$result = $db->query('SELECT id, signature FROM '.$db->prefix.'users WHERE id > '.$start_at.' ORDER BY id ASC LIMIT '.PER_PAGE) or error('Unable to fetch users', __FILE__, __LINE__, $db->error());		$temp = array();		$end_at = 0;		while ($cur_item = $db->fetch_assoc($result))		{			echo sprintf($lang_update['Preparsing item'], $lang_update['signature'], $cur_item['id']).'<br />'."\n";			$db->query('UPDATE '.$db->prefix.'users SET signature = \''.$db->escape(preparse_bbcode($cur_item['signature'], $temp, true)).'\' WHERE id = '.$cur_item['id']) or error('Unable to update user', __FILE__, __LINE__, $db->error());			$end_at = $cur_item['id'];		}		// Check if there is more work to do		if ($end_at > 0)		{			$result = $db->query('SELECT 1 FROM '.$db->prefix.'users WHERE id > '.$end_at.' ORDER BY id ASC LIMIT 1') or error('Unable to fetch next ID', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result) > 0)				$query_str = '?stage=preparse_sigs&start_at='.$end_at;		}		break;	// Rebuild the search index	case 'rebuild_idx':		$query_str = '?stage=finish';		// If we don't need to update the search index, skip this stage		if (isset($pun_config['o_searchindex_revision']) && $pun_config['o_searchindex_revision'] >= UPDATE_TO_SI_REVISION)			break;		if ($start_at == 0)		{			// Truncate the tables just in-case we didn't already (if we are coming directly here without converting the tables)			$db->truncate_table('search_cache') or error('Unable to empty search cache table', __FILE__, __LINE__, $db->error());			$db->truncate_table('search_matches') or error('Unable to empty search index match table', __FILE__, __LINE__, $db->error());			$db->truncate_table('search_words') or error('Unable to empty search index words table', __FILE__, __LINE__, $db->error());			// Reset the sequence for the search words (not needed for SQLite)			switch ($db_type)			{				case 'mysql':				case 'mysqli':				case 'mysql_innodb':				case 'mysqli_innodb':					$db->query('ALTER TABLE '.$db->prefix.'search_words auto_increment=1') or error('Unable to update table auto_increment', __FILE__, __LINE__, $db->error());					break;				case 'pgsql';					$db->query('SELECT setval(\''.$db->prefix.'search_words_id_seq\', 1, false)') or error('Unable to update sequence', __FILE__, __LINE__, $db->error());					break;			}		}		require PUN_ROOT.'include/search_idx.php';		// Fetch posts to process this cycle		$result = $db->query('SELECT p.id, p.message, t.subject, t.first_post_id FROM '.$db->prefix.'posts AS p INNER JOIN '.$db->prefix.'topics AS t ON t.id=p.topic_id WHERE p.id > '.$start_at.' ORDER BY p.id ASC LIMIT '.PER_PAGE) or error('Unable to fetch posts', __FILE__, __LINE__, $db->error());		$end_at = 0;		while ($cur_item = $db->fetch_assoc($result))		{			echo sprintf($lang_update['Rebuilding index item'], $lang_update['post'], $cur_item['id']).'<br />'."\n";			if ($cur_item['id'] == $cur_item['first_post_id'])				update_search_index('post', $cur_item['id'], $cur_item['message'], $cur_item['subject']);			else				update_search_index('post', $cur_item['id'], $cur_item['message']);			$end_at = $cur_item['id'];		}		// Check if there is more work to do		if ($end_at > 0)		{			$result = $db->query('SELECT 1 FROM '.$db->prefix.'posts WHERE id > '.$end_at.' ORDER BY id ASC LIMIT 1') or error('Unable to fetch next ID', __FILE__, __LINE__, $db->error());			if ($db->num_rows($result) > 0)				$query_str = '?stage=rebuild_idx&start_at='.$end_at;		}		break;	// Show results page	case 'finish':		// We update the version number		$db->query('UPDATE '.$db->prefix.'config SET conf_value = \''.UPDATE_TO.'\' WHERE conf_name = \'o_cur_version\'') or error('Unable to update version', __FILE__, __LINE__, $db->error());		// And the database revision number		$db->query('UPDATE '.$db->prefix.'config SET conf_value = \''.UPDATE_TO_DB_REVISION.'\' WHERE conf_name = \'o_database_revision\'') or error('Unable to update database revision number', __FILE__, __LINE__, $db->error());		// And the search index revision number		$db->query('UPDATE '.$db->prefix.'config SET conf_value = \''.UPDATE_TO_SI_REVISION.'\' WHERE conf_name = \'o_searchindex_revision\'') or error('Unable to update search index revision number', __FILE__, __LINE__, $db->error());		// And the parser revision number		$db->query('UPDATE '.$db->prefix.'config SET conf_value = \''.UPDATE_TO_PARSER_REVISION.'\' WHERE conf_name = \'o_parser_revision\'') or error('Unable to update parser revision number', __FILE__, __LINE__, $db->error());		// Check the default language still exists!		if (!file_exists(PUN_ROOT.'lang/'.$pun_config['o_default_lang'].'/common.php'))			$db->query('UPDATE '.$db->prefix.'config SET conf_value = \'English\' WHERE conf_name = \'o_default_lang\'') or error('Unable to update default language', __FILE__, __LINE__, $db->error());		// Check the default style still exists!		if (!file_exists(PUN_ROOT.'style/'.$pun_config['o_default_style'].'.css'))			$db->query('UPDATE '.$db->prefix.'config SET conf_value = \'Air\' WHERE conf_name = \'o_default_style\'') or error('Unable to update default style', __FILE__, __LINE__, $db->error());		// This feels like a good time to synchronize the forums		$result = $db->query('SELECT id FROM '.$db->prefix.'forums') or error('Unable to fetch forum IDs', __FILE__, __LINE__, $db->error());		while ($row = $db->fetch_row($result))			update_forum($row[0]);		// Empty the PHP cache		forum_clear_cache();		// Delete the update lock file		@unlink(FORUM_CACHE_DIR.'db_update.lock');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang_common['lang_identifier'] ?>" lang="<?php echo $lang_common['lang_identifier'] ?>" dir="<?php echo $lang_common['lang_direction'] ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title><?php echo $lang_update['Update'] ?></title><link rel="stylesheet" type="text/css" href="style/<?php echo $default_style ?>.css" /></head><body><div id="pundb_update" class="pun"><div class="top-box"><div><!-- Top Corners --></div></div><div class="punwrap"><div class="blockform">	<h2><span><?php echo $lang_update['Update'] ?></span></h2>	<div class="box">		<div class="fakeform">			<div class="inform">				<div class="forminfo">					<p style="font-size: 1.1em"><?php printf($lang_update['Successfully updated'], sprintf('<a href="index.php">%s</a>', $lang_update['go to index'])) ?></p>				</div>			</div>		</div>	</div></div></div><div class="end-box"><div><!-- Bottom Corners --></div></div></div></body></html><?php		break;}$db->end_transaction();$db->close();if ($query_str != '')	exit('<script type="text/javascript">window.location="db_update.php'.$query_str.'&uid='.$uid.'"</script><noscript><meta http-equiv="refresh" content="0;url=db_update.php'.$query_str.'&uid='.$uid.'" /></noscript>');
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */// Tell header.php to use the admin templatedefine('PUN_ADMIN_CONSOLE', 1);define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';require PUN_ROOT.'include/common_admin.php';if ($pun_user['g_id'] != PUN_ADMIN)	message($lang_common['No permission'], false, '403 Forbidden');// Load the admin_censoring.php language filerequire PUN_ROOT.'lang/'.$admin_language.'/admin_groups.php';// Fetch all groups$result = $db->query('SELECT * FROM '.$db->prefix.'groups ORDER BY g_id') or error('Unable to fetch user groups', __FILE__, __LINE__, $db->error());$groups = array();while ($cur_group = $db->fetch_assoc($result))	$groups[$cur_group['g_id']] = $cur_group;// Add/edit a group (stage 1)if (isset($_POST['add_group']) || isset($_GET['edit_group'])){	if (isset($_POST['add_group']))	{		$base_group = intval($_POST['base_group']);		$group = $groups[$base_group];		$mode = 'add';	}	else // We are editing a group	{		$group_id = intval($_GET['edit_group']);		if ($group_id < 1 || !isset($groups[$group_id]))			message($lang_common['Bad request']);		$group = $groups[$group_id];		$mode = 'edit';	}	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['User groups']);	$required_fields = array('req_title' => $lang_admin_groups['Group title label']);	$focus_element = array('groups2', 'req_title');	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('groups');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_groups['Group settings head'] ?></span></h2>		<div class="box">			<form id="groups2" method="post" action="admin_groups.php" onsubmit="return process_form(this)">				<p class="submittop"><input type="submit" name="add_edit_group" value="<?php echo $lang_admin_common['Save'] ?>" /></p>				<div class="inform">					<input type="hidden" name="mode" value="<?php echo $mode ?>" /><?php if ($mode == 'edit'): ?>					<input type="hidden" name="group_id" value="<?php echo $group_id ?>" /><?php endif; ?><?php if ($mode == 'add'): ?>					<input type="hidden" name="base_group" value="<?php echo $base_group ?>" /><?php endif; ?>					<fieldset>						<legend><?php echo $lang_admin_groups['Group settings subhead'] ?></legend>						<div class="infldset">							<p><?php echo $lang_admin_groups['Group settings info'] ?></p>							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_groups['Group title label'] ?></th>									<td>										<input type="text" name="req_title" size="25" maxlength="50" value="<?php if ($mode == 'edit') echo pun_htmlspecialchars($group['g_title']); ?>" tabindex="1" />									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['User title label'] ?></th>									<td>										<input type="text" name="user_title" size="25" maxlength="50" value="<?php echo pun_htmlspecialchars($group['g_user_title']) ?>" tabindex="2" />										<span><?php printf($lang_admin_groups['User title help'], ($group['g_id'] != PUN_GUEST ? $lang_common['Member'] : $lang_common['Guest'])) ?></span>									</td>								</tr><?php if ($group['g_id'] != PUN_ADMIN): if ($group['g_id'] != PUN_GUEST): ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Promote users label'] ?></th>									<td>										<select name="promote_next_group" tabindex="3">											<option value="0"><?php echo $lang_admin_groups['Disable promotion'] ?></option><?phpforeach ($groups as $cur_group){	if (($cur_group['g_id'] != $group['g_id'] || $mode == 'add') && $cur_group['g_id'] != PUN_ADMIN && $cur_group['g_id'] != PUN_GUEST)	{		if ($cur_group['g_id'] == $group['g_promote_next_group'])			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'" selected="selected">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";		else			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";	}}?>										</select>										<input type="text" name="promote_min_posts" size="5" maxlength="10" value="<?php echo pun_htmlspecialchars($group['g_promote_min_posts']) ?>" tabindex="4" />										<span><?php printf($lang_admin_groups['Promote users help'], $lang_admin_groups['Disable promotion']) ?></span>									</td>								</tr><?php if ($mode != 'edit' || $pun_config['o_default_user_group'] != $group['g_id']): ?>								<tr>									<th scope="row"> <?php echo $lang_admin_groups['Mod privileges label'] ?></th>									<td>										<label class="conl"><input type="radio" name="moderator" value="1"<?php if ($group['g_moderator'] == '1') echo ' checked="checked"' ?> tabindex="5" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="moderator" value="0"<?php if ($group['g_moderator'] == '0') echo ' checked="checked"' ?> tabindex="6" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Mod privileges help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Edit profile label'] ?></th>									<td>										<label class="conl"><input type="radio" name="mod_edit_users" value="1"<?php if ($group['g_mod_edit_users'] == '1') echo ' checked="checked"' ?> tabindex="7" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="mod_edit_users" value="0"<?php if ($group['g_mod_edit_users'] == '0') echo ' checked="checked"' ?> tabindex="8" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Edit profile help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Rename users label'] ?></th>									<td>										<label class="conl"><input type="radio" name="mod_rename_users" value="1"<?php if ($group['g_mod_rename_users'] == '1') echo ' checked="checked"' ?> tabindex="9" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="mod_rename_users" value="0"<?php if ($group['g_mod_rename_users'] == '0') echo ' checked="checked"' ?> tabindex="10" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Rename users help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Change passwords label'] ?></th>									<td>										<label class="conl"><input type="radio" name="mod_change_passwords" value="1"<?php if ($group['g_mod_change_passwords'] == '1') echo ' checked="checked"' ?> tabindex="11" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="mod_change_passwords" value="0"<?php if ($group['g_mod_change_passwords'] == '0') echo ' checked="checked"' ?> tabindex="12" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Change passwords help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Ban users label'] ?></th>									<td>										<label class="conl"><input type="radio" name="mod_ban_users" value="1"<?php if ($group['g_mod_ban_users'] == '1') echo ' checked="checked"' ?> tabindex="13" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="mod_ban_users" value="0"<?php if ($group['g_mod_ban_users'] == '0') echo ' checked="checked"' ?> tabindex="14" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Ban users help'] ?></span>									</td>								</tr><?php endif; endif; ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Read board label'] ?></th>									<td>										<label class="conl"><input type="radio" name="read_board" value="1"<?php if ($group['g_read_board'] == '1') echo ' checked="checked"' ?> tabindex="15" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="read_board" value="0"<?php if ($group['g_read_board'] == '0') echo ' checked="checked"' ?> tabindex="16" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Read board help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['View user info label'] ?></th>									<td>										<label class="conl"><input type="radio" name="view_users" value="1"<?php if ($group['g_view_users'] == '1') echo ' checked="checked"' ?> tabindex="17" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="view_users" value="0"<?php if ($group['g_view_users'] == '0') echo ' checked="checked"' ?> tabindex="18" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['View user info help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Post replies label'] ?></th>									<td>										<label class="conl"><input type="radio" name="post_replies" value="1"<?php if ($group['g_post_replies'] == '1') echo ' checked="checked"' ?> tabindex="19" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="post_replies" value="0"<?php if ($group['g_post_replies'] == '0') echo ' checked="checked"' ?> tabindex="20" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Post replies help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Post topics label'] ?></th>									<td>										<label class="conl"><input type="radio" name="post_topics" value="1"<?php if ($group['g_post_topics'] == '1') echo ' checked="checked"' ?> tabindex="21" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="post_topics" value="0"<?php if ($group['g_post_topics'] == '0') echo ' checked="checked"' ?> tabindex="22" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Post topics help'] ?></span>									</td>								</tr><?php if ($group['g_id'] != PUN_GUEST): ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Edit posts label'] ?></th>									<td>										<label class="conl"><input type="radio" name="edit_posts" value="1"<?php if ($group['g_edit_posts'] == '1') echo ' checked="checked"' ?> tabindex="23" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="edit_posts" value="0"<?php if ($group['g_edit_posts'] == '0') echo ' checked="checked"' ?> tabindex="24" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Edit posts help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Delete posts label'] ?></th>									<td>										<label class="conl"><input type="radio" name="delete_posts" value="1"<?php if ($group['g_delete_posts'] == '1') echo ' checked="checked"' ?> tabindex="25" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="delete_posts" value="0"<?php if ($group['g_delete_posts'] == '0') echo ' checked="checked"' ?> tabindex="26" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Delete posts help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Delete topics label'] ?></th>									<td>										<label class="conl"><input type="radio" name="delete_topics" value="1"<?php if ($group['g_delete_topics'] == '1') echo ' checked="checked"' ?> tabindex="27" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="delete_topics" value="0"<?php if ($group['g_delete_topics'] == '0') echo ' checked="checked"' ?> tabindex="28" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Delete topics help'] ?></span>									</td>								</tr><?php endif; ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Post links label'] ?></th>									<td>										<label class="conl"><input type="radio" name="post_links" value="1"<?php if ($group['g_post_links'] == '1') echo ' checked="checked"' ?> tabindex="29" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="post_links" value="0"<?php if ($group['g_post_links'] == '0') echo ' checked="checked"' ?> tabindex="30" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Post links help'] ?></span>									</td>								</tr><?php if ($group['g_id'] != PUN_GUEST): ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Set own title label'] ?></th>									<td>										<label class="conl"><input type="radio" name="set_title" value="1"<?php if ($group['g_set_title'] == '1') echo ' checked="checked"' ?> tabindex="31" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="set_title" value="0"<?php if ($group['g_set_title'] == '0') echo ' checked="checked"' ?> tabindex="32" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Set own title help'] ?></span>									</td>								</tr><?php endif; ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['User search label'] ?></th>									<td>										<label class="conl"><input type="radio" name="search" value="1"<?php if ($group['g_search'] == '1') echo ' checked="checked"' ?> tabindex="33" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="search" value="0"<?php if ($group['g_search'] == '0') echo ' checked="checked"' ?> tabindex="34" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['User search help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['User list search label'] ?></th>									<td>										<label class="conl"><input type="radio" name="search_users" value="1"<?php if ($group['g_search_users'] == '1') echo ' checked="checked"' ?> tabindex="35" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="search_users" value="0"<?php if ($group['g_search_users'] == '0') echo ' checked="checked"' ?> tabindex="36" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['User list search help'] ?></span>									</td>								</tr><?php if ($group['g_id'] != PUN_GUEST): ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Send e-mails label'] ?></th>									<td>										<label class="conl"><input type="radio" name="send_email" value="1"<?php if ($group['g_send_email'] == '1') echo ' checked="checked"' ?> tabindex="37" />&#160;<strong><?php echo $lang_admin_common['Yes'] ?></strong></label>										<label class="conl"><input type="radio" name="send_email" value="0"<?php if ($group['g_send_email'] == '0') echo ' checked="checked"' ?> tabindex="38" />&#160;<strong><?php echo $lang_admin_common['No'] ?></strong></label>										<span class="clearb"><?php echo $lang_admin_groups['Send e-mails help'] ?></span>									</td>								</tr><?php endif; ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Post flood label'] ?></th>									<td>										<input type="text" name="post_flood" size="5" maxlength="4" value="<?php echo $group['g_post_flood'] ?>" tabindex="39" />										<span><?php echo $lang_admin_groups['Post flood help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Search flood label'] ?></th>									<td>										<input type="text" name="search_flood" size="5" maxlength="4" value="<?php echo $group['g_search_flood'] ?>" tabindex="40" />										<span><?php echo $lang_admin_groups['Search flood help'] ?></span>									</td>								</tr><?php if ($group['g_id'] != PUN_GUEST): ?>								<tr>									<th scope="row"><?php echo $lang_admin_groups['E-mail flood label'] ?></th>									<td>										<input type="text" name="email_flood" size="5" maxlength="4" value="<?php echo $group['g_email_flood'] ?>" tabindex="41" />										<span><?php echo $lang_admin_groups['E-mail flood help'] ?></span>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_groups['Report flood label'] ?></th>									<td>										<input type="text" name="report_flood" size="5" maxlength="4" value="<?php echo $group['g_report_flood'] ?>" tabindex="42" />										<span><?php echo $lang_admin_groups['Report flood help'] ?></span>									</td>								</tr><?php endif; endif; ?>							</table><?php if ($group['g_moderator'] == '1' ): ?>							<p class="warntext"><?php echo $lang_admin_groups['Moderator info'] ?></p><?php endif; ?>						</div>					</fieldset>				</div>				<p class="submitend"><input type="submit" name="add_edit_group" value="<?php echo $lang_admin_common['Save'] ?>" tabindex="43" /></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}// Add/edit a group (stage 2)else if (isset($_POST['add_edit_group'])){	confirm_referrer('admin_groups.php');	// Is this the admin group? (special rules apply)	$is_admin_group = (isset($_POST['group_id']) && $_POST['group_id'] == PUN_ADMIN) ? true : false;	$title = pun_trim($_POST['req_title']);	$user_title = pun_trim($_POST['user_title']);	$promote_min_posts = isset($_POST['promote_min_posts']) ? intval($_POST['promote_min_posts']) : '0';	if (isset($_POST['promote_next_group']) &&			isset($groups[$_POST['promote_next_group']]) &&			!in_array($_POST['promote_next_group'], array(PUN_ADMIN, PUN_GUEST)) &&			(!isset($_POST['group_id']) || $_POST['promote_next_group'] != $_POST['group_id']))		$promote_next_group = $_POST['promote_next_group'];	else		$promote_next_group = '0';	$moderator = isset($_POST['moderator']) && $_POST['moderator'] == '1' ? '1' : '0';	$mod_edit_users = $moderator == '1' && isset($_POST['mod_edit_users']) && $_POST['mod_edit_users'] == '1' ? '1' : '0';	$mod_rename_users = $moderator == '1' && isset($_POST['mod_rename_users']) && $_POST['mod_rename_users'] == '1' ? '1' : '0';	$mod_change_passwords = $moderator == '1' && isset($_POST['mod_change_passwords']) && $_POST['mod_change_passwords'] == '1' ? '1' : '0';	$mod_ban_users = $moderator == '1' && isset($_POST['mod_ban_users']) && $_POST['mod_ban_users'] == '1' ? '1' : '0';	$read_board = isset($_POST['read_board']) ? intval($_POST['read_board']) : '1';	$view_users = (isset($_POST['view_users']) && $_POST['view_users'] == '1') || $is_admin_group ? '1' : '0';	$post_replies = isset($_POST['post_replies']) ? intval($_POST['post_replies']) : '1';	$post_topics = isset($_POST['post_topics']) ? intval($_POST['post_topics']) : '1';	$edit_posts = isset($_POST['edit_posts']) ? intval($_POST['edit_posts']) : ($is_admin_group) ? '1' : '0';	$delete_posts = isset($_POST['delete_posts']) ? intval($_POST['delete_posts']) : ($is_admin_group) ? '1' : '0';	$delete_topics = isset($_POST['delete_topics']) ? intval($_POST['delete_topics']) : ($is_admin_group) ? '1' : '0';	$post_links = isset($_POST['post_links']) ? intval($_POST['post_links']) : '1';	$set_title = isset($_POST['set_title']) ? intval($_POST['set_title']) : ($is_admin_group) ? '1' : '0';	$search = isset($_POST['search']) ? intval($_POST['search']) : '1';	$search_users = isset($_POST['search_users']) ? intval($_POST['search_users']) : '1';	$send_email = (isset($_POST['send_email']) && $_POST['send_email'] == '1') || $is_admin_group ? '1' : '0';	$post_flood = (isset($_POST['post_flood']) && $_POST['post_flood'] >= 0) ? intval($_POST['post_flood']) : '0';	$search_flood = (isset($_POST['search_flood']) && $_POST['search_flood'] >= 0) ? intval($_POST['search_flood']) : '0';	$email_flood = (isset($_POST['email_flood']) && $_POST['email_flood'] >= 0) ? intval($_POST['email_flood']) : '0';	$report_flood = (isset($_POST['report_flood']) && $_POST['report_flood'] >= 0) ? intval($_POST['report_flood']) : '0';	if ($title == '')		message($lang_admin_groups['Must enter title message']);	$user_title = ($user_title != '') ? '\''.$db->escape($user_title).'\'' : 'NULL';	if ($_POST['mode'] == 'add')	{		$result = $db->query('SELECT 1 FROM '.$db->prefix.'groups WHERE g_title=\''.$db->escape($title).'\'') or error('Unable to check group title collision', __FILE__, __LINE__, $db->error());		if ($db->num_rows($result))			message(sprintf($lang_admin_groups['Title already exists message'], pun_htmlspecialchars($title)));		$db->query('INSERT INTO '.$db->prefix.'groups (g_title, g_user_title, g_promote_min_posts, g_promote_next_group, g_moderator, g_mod_edit_users, g_mod_rename_users, g_mod_change_passwords, g_mod_ban_users, g_read_board, g_view_users, g_post_replies, g_post_topics, g_edit_posts, g_delete_posts, g_delete_topics, g_post_links, g_set_title, g_search, g_search_users, g_send_email, g_post_flood, g_search_flood, g_email_flood, g_report_flood) VALUES(\''.$db->escape($title).'\', '.$user_title.', '.$promote_min_posts.', '.$promote_next_group.', '.$moderator.', '.$mod_edit_users.', '.$mod_rename_users.', '.$mod_change_passwords.', '.$mod_ban_users.', '.$read_board.', '.$view_users.', '.$post_replies.', '.$post_topics.', '.$edit_posts.', '.$delete_posts.', '.$delete_topics.', '.$post_links.', '.$set_title.', '.$search.', '.$search_users.', '.$send_email.', '.$post_flood.', '.$search_flood.', '.$email_flood.', '.$report_flood.')') or error('Unable to add group', __FILE__, __LINE__, $db->error());		$new_group_id = $db->insert_id();		// Now lets copy the forum specific permissions from the group which this group is based on		$result = $db->query('SELECT forum_id, read_forum, post_replies, post_topics FROM '.$db->prefix.'forum_perms WHERE group_id='.intval($_POST['base_group'])) or error('Unable to fetch group forum permission list', __FILE__, __LINE__, $db->error());		while ($cur_forum_perm = $db->fetch_assoc($result))			$db->query('INSERT INTO '.$db->prefix.'forum_perms (group_id, forum_id, read_forum, post_replies, post_topics) VALUES('.$new_group_id.', '.$cur_forum_perm['forum_id'].', '.$cur_forum_perm['read_forum'].', '.$cur_forum_perm['post_replies'].', '.$cur_forum_perm['post_topics'].')') or error('Unable to insert group forum permissions', __FILE__, __LINE__, $db->error());	}	else	{		$result = $db->query('SELECT 1 FROM '.$db->prefix.'groups WHERE g_title=\''.$db->escape($title).'\' AND g_id!='.intval($_POST['group_id'])) or error('Unable to check group title collision', __FILE__, __LINE__, $db->error());		if ($db->num_rows($result))			message(sprintf($lang_admin_groups['Title already exists message'], pun_htmlspecialchars($title)));		$db->query('UPDATE '.$db->prefix.'groups SET g_title=\''.$db->escape($title).'\', g_user_title='.$user_title.', g_promote_min_posts='.$promote_min_posts.', g_promote_next_group='.$promote_next_group.', g_moderator='.$moderator.', g_mod_edit_users='.$mod_edit_users.', g_mod_rename_users='.$mod_rename_users.', g_mod_change_passwords='.$mod_change_passwords.', g_mod_ban_users='.$mod_ban_users.', g_read_board='.$read_board.', g_view_users='.$view_users.', g_post_replies='.$post_replies.', g_post_topics='.$post_topics.', g_edit_posts='.$edit_posts.', g_delete_posts='.$delete_posts.', g_delete_topics='.$delete_topics.', g_post_links='.$post_links.', g_set_title='.$set_title.', g_search='.$search.', g_search_users='.$search_users.', g_send_email='.$send_email.', g_post_flood='.$post_flood.', g_search_flood='.$search_flood.', g_email_flood='.$email_flood.', g_report_flood='.$report_flood.' WHERE g_id='.intval($_POST['group_id'])) or error('Unable to update group', __FILE__, __LINE__, $db->error());	}	// Regenerate the quick jump cache	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require PUN_ROOT.'include/cache.php';	$group_id = $_POST['mode'] == 'add' ? $new_group_id : intval($_POST['group_id']);	generate_quickjump_cache($group_id);	if ($_POST['mode'] == 'edit')		redirect('admin_groups.php', $lang_admin_groups['Group edited redirect']);	else		redirect('admin_groups.php', $lang_admin_groups['Group added redirect']);}// Set default groupelse if (isset($_POST['set_default_group'])){	confirm_referrer('admin_groups.php');	$group_id = intval($_POST['default_group']);	// Make sure it's not the admin or guest groups	if ($group_id == PUN_ADMIN || $group_id == PUN_GUEST)		message($lang_common['Bad request']);	// Make sure it's not a moderator group	if ($groups[$group_id]['g_moderator'] != 0)		message($lang_common['Bad request']);	$db->query('UPDATE '.$db->prefix.'config SET conf_value='.$group_id.' WHERE conf_name=\'o_default_user_group\'') or error('Unable to update board config', __FILE__, __LINE__, $db->error());	// Regenerate the config cache	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require PUN_ROOT.'include/cache.php';	generate_config_cache();	redirect('admin_groups.php', $lang_admin_groups['Default group redirect']);}// Remove a groupelse if (isset($_GET['del_group'])){	confirm_referrer('admin_groups.php');	$group_id = isset($_POST['group_to_delete']) ? intval($_POST['group_to_delete']) : intval($_GET['del_group']);	if ($group_id < 5)		message($lang_common['Bad request']);	// Make sure we don't remove the default group	if ($group_id == $pun_config['o_default_user_group'])		message($lang_admin_groups['Cannot remove default message']);	// Check if this group has any members	$result = $db->query('SELECT g.g_title, COUNT(u.id) FROM '.$db->prefix.'groups AS g INNER JOIN '.$db->prefix.'users AS u ON g.g_id=u.group_id WHERE g.g_id='.$group_id.' GROUP BY g.g_id, g_title') or error('Unable to fetch group info', __FILE__, __LINE__, $db->error());	// If the group doesn't have any members or if we've already selected a group to move the members to	if (!$db->num_rows($result) || isset($_POST['del_group']))	{		if (isset($_POST['del_group_comply']) || isset($_POST['del_group']))		{			if (isset($_POST['del_group']))			{				$move_to_group = intval($_POST['move_to_group']);				$db->query('UPDATE '.$db->prefix.'users SET group_id='.$move_to_group.' WHERE group_id='.$group_id) or error('Unable to move users into group', __FILE__, __LINE__, $db->error());			}			// Delete the group and any forum specific permissions			$db->query('DELETE FROM '.$db->prefix.'groups WHERE g_id='.$group_id) or error('Unable to delete group', __FILE__, __LINE__, $db->error());			$db->query('DELETE FROM '.$db->prefix.'forum_perms WHERE group_id='.$group_id) or error('Unable to delete group forum permissions', __FILE__, __LINE__, $db->error());			// Don't let users be promoted to this group			$db->query('UPDATE '.$db->prefix.'groups SET g_promote_next_group=0 WHERE g_promote_next_group='.$group_id) or error('Unable to remove group as promotion target', __FILE__, __LINE__, $db->error());			redirect('admin_groups.php', $lang_admin_groups['Group removed redirect']);		}		else		{			$result = $db->query('SELECT g_title FROM '.$db->prefix.'groups WHERE g_id='.$group_id) or error('Unable to fetch group title', __FILE__, __LINE__, $db->error());			$group_title = $db->result($result);			$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['User groups']);			define('PUN_ACTIVE_PAGE', 'admin');			require PUN_ROOT.'header.php';			generate_admin_menu('groups');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_groups['Group delete head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_groups.php?del_group=<?php echo $group_id ?>">				<div class="inform">				<input type="hidden" name="group_to_delete" value="<?php echo $group_id ?>" />					<fieldset>						<legend><?php echo $lang_admin_groups['Confirm delete subhead'] ?></legend>						<div class="infldset">							<p><?php printf($lang_admin_groups['Confirm delete info'], pun_htmlspecialchars($group_title)) ?></p>							<p class="warntext"><?php echo $lang_admin_groups['Confirm delete warn'] ?></p>						</div>					</fieldset>				</div>				<p class="buttons"><input type="submit" name="del_group_comply" value="<?php echo $lang_admin_common['Delete'] ?>" tabindex="1" /><a href="javascript:history.go(-1)" tabindex="2"><?php echo $lang_admin_common['Go back'] ?></a></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php			require PUN_ROOT.'footer.php';		}	}	list($group_title, $group_members) = $db->fetch_row($result);	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['User groups']);	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('groups');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_groups['Delete group head'] ?></span></h2>		<div class="box">			<form id="groups" method="post" action="admin_groups.php?del_group=<?php echo $group_id ?>">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_groups['Move users subhead'] ?></legend>						<div class="infldset">							<p><?php printf($lang_admin_groups['Move users info'], pun_htmlspecialchars($group_title), forum_number_format($group_members)) ?></p>							<label><?php echo $lang_admin_groups['Move users label'] ?>							<select name="move_to_group"><?php	$result = $db->query('SELECT g_id, g_title FROM '.$db->prefix.'groups WHERE g_id!='.PUN_GUEST.' AND g_id!='.$group_id.' ORDER BY g_title') or error('Unable to fetch user group list', __FILE__, __LINE__, $db->error());	while ($cur_group = $db->fetch_assoc($result))	{		if ($cur_group['g_id'] == PUN_MEMBER) // Pre-select the pre-defined Members group			echo "\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'" selected="selected">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";		else			echo "\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";	}?>							</select>							<br /></label>						</div>					</fieldset>				</div>				<p class="buttons"><input type="submit" name="del_group" value="<?php echo $lang_admin_groups['Delete group'] ?>" /><a href="javascript:history.go(-1)"><?php echo $lang_admin_common['Go back'] ?></a></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['User groups']);define('PUN_ACTIVE_PAGE', 'admin');require PUN_ROOT.'header.php';generate_admin_menu('groups');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_groups['Add groups head'] ?></span></h2>		<div class="box">			<form id="groups" method="post" action="admin_groups.php">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_groups['Add group subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_groups['New group label'] ?><div><input type="submit" name="add_group" value="<?php echo $lang_admin_common['Add'] ?>" tabindex="2" /></div></th>									<td>										<select id="base_group" name="base_group" tabindex="1"><?phpforeach ($groups as $cur_group){	if ($cur_group['g_id'] != PUN_ADMIN && $cur_group['g_id'] != PUN_GUEST)	{		if ($cur_group['g_id'] == $pun_config['o_default_user_group'])			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'" selected="selected">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";		else			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";	}}?>										</select>										<span><?php echo $lang_admin_groups['New group help'] ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_groups['Default group subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_groups['Default group label'] ?><div><input type="submit" name="set_default_group" value="<?php echo $lang_admin_common['Save'] ?>" tabindex="4" /></div></th>									<td>										<select id="default_group" name="default_group" tabindex="3"><?phpforeach ($groups as $cur_group){	if ($cur_group['g_id'] > PUN_GUEST && $cur_group['g_moderator'] == 0)	{		if ($cur_group['g_id'] == $pun_config['o_default_user_group'])			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'" selected="selected">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";		else			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_group['g_id'].'">'.pun_htmlspecialchars($cur_group['g_title']).'</option>'."\n";	}}?>										</select>										<span><?php echo $lang_admin_groups['Default group help'] ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>			</form>		</div>		<h2 class="block2"><span><?php echo $lang_admin_groups['Existing groups head'] ?></span></h2>		<div class="box">			<div class="fakeform">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_groups['Edit groups subhead'] ?></legend>						<div class="infldset">							<p><?php echo $lang_admin_groups['Edit groups info'] ?></p>							<table cellspacing="0"><?php$cur_index = 5;foreach ($groups as $cur_group)	echo "\t\t\t\t\t\t\t\t".'<tr><th scope="row"><a href="admin_groups.php?edit_group='.$cur_group['g_id'].'" tabindex="'.$cur_index++.'">'.$lang_admin_groups['Edit link'].'</a>'.(($cur_group['g_id'] > PUN_MEMBER) ? ' | <a href="admin_groups.php?del_group='.$cur_group['g_id'].'" tabindex="'.$cur_index++.'">'.$lang_admin_groups['Delete link'].'</a>' : '').'</th><td>'.pun_htmlspecialchars($cur_group['g_title']).'</td></tr>'."\n";?>							</table>						</div>					</fieldset>				</div>			</div>		</div>	</div>	<div class="clearer"></div></div><?phprequire PUN_ROOT.'footer.php';
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */// Tell header.php to use the admin templatedefine('PUN_ADMIN_CONSOLE', 1);define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';require PUN_ROOT.'include/common_admin.php';if ($pun_user['g_id'] != PUN_ADMIN)	message($lang_common['No permission'], false, '403 Forbidden');// Load the admin_forums.php language filerequire PUN_ROOT.'lang/'.$admin_language.'/admin_forums.php';// Add a "default" forumif (isset($_POST['add_forum'])){	confirm_referrer('admin_forums.php');	$add_to_cat = intval($_POST['add_to_cat']);	if ($add_to_cat < 1)		message($lang_common['Bad request']);	$db->query('INSERT INTO '.$db->prefix.'forums (forum_name, cat_id) VALUES(\''.$db->escape($lang_admin_forums['New forum']).'\', '.$add_to_cat.')') or error('Unable to create forum', __FILE__, __LINE__, $db->error());	// Regenerate the quick jump cache	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require PUN_ROOT.'include/cache.php';	generate_quickjump_cache();	redirect('admin_forums.php', $lang_admin_forums['Forum added redirect']);}// Delete a forumelse if (isset($_GET['del_forum'])){	confirm_referrer('admin_forums.php');	$forum_id = intval($_GET['del_forum']);	if ($forum_id < 1)		message($lang_common['Bad request']);	if (isset($_POST['del_forum_comply'])) // Delete a forum with all posts	{		@set_time_limit(0);		// Prune all posts and topics		prune($forum_id, 1, -1);		// Locate any "orphaned redirect topics" and delete them		$result = $db->query('SELECT t1.id FROM '.$db->prefix.'topics AS t1 LEFT JOIN '.$db->prefix.'topics AS t2 ON t1.moved_to=t2.id WHERE t2.id IS NULL AND t1.moved_to IS NOT NULL') or error('Unable to fetch redirect topics', __FILE__, __LINE__, $db->error());		$num_orphans = $db->num_rows($result);		if ($num_orphans)		{			for ($i = 0; $i < $num_orphans; ++$i)				$orphans[] = $db->result($result, $i);			$db->query('DELETE FROM '.$db->prefix.'topics WHERE id IN('.implode(',', $orphans).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db->error());		}		// Delete the forum and any forum specific group permissions		$db->query('DELETE FROM '.$db->prefix.'forums WHERE id='.$forum_id) or error('Unable to delete forum', __FILE__, __LINE__, $db->error());		$db->query('DELETE FROM '.$db->prefix.'forum_perms WHERE forum_id='.$forum_id) or error('Unable to delete group forum permissions', __FILE__, __LINE__, $db->error());		// Delete any subscriptions for this forum		$db->query('DELETE FROM '.$db->prefix.'forum_subscriptions WHERE forum_id='.$forum_id) or error('Unable to delete subscriptions', __FILE__, __LINE__, $db->error());		// Regenerate the quick jump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_quickjump_cache();		redirect('admin_forums.php', $lang_admin_forums['Forum deleted redirect']);	}	else // If the user hasn't confirmed the delete	{		$result = $db->query('SELECT forum_name FROM '.$db->prefix.'forums WHERE id='.$forum_id) or error('Unable to fetch forum info', __FILE__, __LINE__, $db->error());		$forum_name = pun_htmlspecialchars($db->result($result));		$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Forums']);		define('PUN_ACTIVE_PAGE', 'admin');		require PUN_ROOT.'header.php';		generate_admin_menu('forums');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_forums['Confirm delete head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_forums.php?del_forum=<?php echo $forum_id ?>">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_forums['Confirm delete subhead'] ?></legend>						<div class="infldset">							<p><?php printf($lang_admin_forums['Confirm delete info'], $forum_name) ?></p>							<p class="warntext"><?php echo $lang_admin_forums['Confirm delete warn'] ?></p>						</div>					</fieldset>				</div>				<p class="buttons"><input type="submit" name="del_forum_comply" value="<?php echo $lang_admin_common['Delete'] ?>" /><a href="javascript:history.go(-1)"><?php echo $lang_admin_common['Go back'] ?></a></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php		require PUN_ROOT.'footer.php';	}}// Update forum positionselse if (isset($_POST['update_positions'])){	confirm_referrer('admin_forums.php');	foreach ($_POST['position'] as $forum_id => $disp_position)	{		$disp_position = trim($disp_position);		if ($disp_position == '' || preg_match('%[^0-9]%', $disp_position))			message($lang_admin_forums['Must be integer message']);		$db->query('UPDATE '.$db->prefix.'forums SET disp_position='.$disp_position.' WHERE id='.intval($forum_id)) or error('Unable to update forum', __FILE__, __LINE__, $db->error());	}	// Regenerate the quick jump cache	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require PUN_ROOT.'include/cache.php';	generate_quickjump_cache();	redirect('admin_forums.php', $lang_admin_forums['Forums updated redirect']);}else if (isset($_GET['edit_forum'])){	$forum_id = intval($_GET['edit_forum']);	if ($forum_id < 1)		message($lang_common['Bad request']);	// Update group permissions for $forum_id	if (isset($_POST['save']))	{		confirm_referrer('admin_forums.php');		// Start with the forum details		$forum_name = pun_trim($_POST['forum_name']);		$forum_desc = pun_linebreaks(pun_trim($_POST['forum_desc']));		$cat_id = intval($_POST['cat_id']);		$sort_by = intval($_POST['sort_by']);		$redirect_url = isset($_POST['redirect_url']) ? pun_trim($_POST['redirect_url']) : null;		if ($forum_name == '')			message($lang_admin_forums['Must enter name message']);		if ($cat_id < 1)			message($lang_common['Bad request']);		$forum_desc = ($forum_desc != '') ? '\''.$db->escape($forum_desc).'\'' : 'NULL';		$redirect_url = ($redirect_url != '') ? '\''.$db->escape($redirect_url).'\'' : 'NULL';		$db->query('UPDATE '.$db->prefix.'forums SET forum_name=\''.$db->escape($forum_name).'\', forum_desc='.$forum_desc.', redirect_url='.$redirect_url.', sort_by='.$sort_by.', cat_id='.$cat_id.' WHERE id='.$forum_id) or error('Unable to update forum', __FILE__, __LINE__, $db->error());		// Now let's deal with the permissions		if (isset($_POST['read_forum_old']))		{			$result = $db->query('SELECT g_id, g_read_board, g_post_replies, g_post_topics FROM '.$db->prefix.'groups WHERE g_id!='.PUN_ADMIN) or error('Unable to fetch user group list', __FILE__, __LINE__, $db->error());			while ($cur_group = $db->fetch_assoc($result))			{				$read_forum_new = ($cur_group['g_read_board'] == '1') ? isset($_POST['read_forum_new'][$cur_group['g_id']]) ? '1' : '0' : intval($_POST['read_forum_old'][$cur_group['g_id']]);				$post_replies_new = isset($_POST['post_replies_new'][$cur_group['g_id']]) ? '1' : '0';				$post_topics_new = isset($_POST['post_topics_new'][$cur_group['g_id']]) ? '1' : '0';				// Check if the new settings differ from the old				if ($read_forum_new != $_POST['read_forum_old'][$cur_group['g_id']] || $post_replies_new != $_POST['post_replies_old'][$cur_group['g_id']] || $post_topics_new != $_POST['post_topics_old'][$cur_group['g_id']])				{					// If the new settings are identical to the default settings for this group, delete its row in forum_perms					if ($read_forum_new == '1' && $post_replies_new == $cur_group['g_post_replies'] && $post_topics_new == $cur_group['g_post_topics'])						$db->query('DELETE FROM '.$db->prefix.'forum_perms WHERE group_id='.$cur_group['g_id'].' AND forum_id='.$forum_id) or error('Unable to delete group forum permissions', __FILE__, __LINE__, $db->error());					else					{						// Run an UPDATE and see if it affected a row, if not, INSERT						$db->query('UPDATE '.$db->prefix.'forum_perms SET read_forum='.$read_forum_new.', post_replies='.$post_replies_new.', post_topics='.$post_topics_new.' WHERE group_id='.$cur_group['g_id'].' AND forum_id='.$forum_id) or error('Unable to insert group forum permissions', __FILE__, __LINE__, $db->error());						if (!$db->affected_rows())							$db->query('INSERT INTO '.$db->prefix.'forum_perms (group_id, forum_id, read_forum, post_replies, post_topics) VALUES('.$cur_group['g_id'].', '.$forum_id.', '.$read_forum_new.', '.$post_replies_new.', '.$post_topics_new.')') or error('Unable to insert group forum permissions', __FILE__, __LINE__, $db->error());					}				}			}		}		// Regenerate the quick jump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_quickjump_cache();		redirect('admin_forums.php', $lang_admin_forums['Forum updated redirect']);	}	else if (isset($_POST['revert_perms']))	{		confirm_referrer('admin_forums.php');		$db->query('DELETE FROM '.$db->prefix.'forum_perms WHERE forum_id='.$forum_id) or error('Unable to delete group forum permissions', __FILE__, __LINE__, $db->error());		// Regenerate the quick jump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_quickjump_cache();		redirect('admin_forums.php?edit_forum='.$forum_id, $lang_admin_forums['Perms reverted redirect']);	}	// Fetch forum info	$result = $db->query('SELECT id, forum_name, forum_desc, redirect_url, num_topics, sort_by, cat_id FROM '.$db->prefix.'forums WHERE id='.$forum_id) or error('Unable to fetch forum info', __FILE__, __LINE__, $db->error());	if (!$db->num_rows($result))		message($lang_common['Bad request']);	$cur_forum = $db->fetch_assoc($result);	$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Forums']);	define('PUN_ACTIVE_PAGE', 'admin');	require PUN_ROOT.'header.php';	generate_admin_menu('forums');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_forums['Edit forum head'] ?></span></h2>		<div class="box">			<form id="edit_forum" method="post" action="admin_forums.php?edit_forum=<?php echo $forum_id ?>">				<p class="submittop"><input type="submit" name="save" value="<?php echo $lang_admin_common['Save changes'] ?>" tabindex="6" /></p>				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_forums['Edit details subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_forums['Forum name label'] ?></th>									<td><input type="text" name="forum_name" size="35" maxlength="80" value="<?php echo pun_htmlspecialchars($cur_forum['forum_name']) ?>" tabindex="1" /></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_forums['Forum description label'] ?></th>									<td><textarea name="forum_desc" rows="3" cols="50" tabindex="2"><?php echo pun_htmlspecialchars($cur_forum['forum_desc']) ?></textarea></td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_forums['Category label'] ?></th>									<td>										<select name="cat_id" tabindex="3"><?php	$result = $db->query('SELECT id, cat_name FROM '.$db->prefix.'categories ORDER BY disp_position') or error('Unable to fetch category list', __FILE__, __LINE__, $db->error());	while ($cur_cat = $db->fetch_assoc($result))	{		$selected = ($cur_cat['id'] == $cur_forum['cat_id']) ? ' selected="selected"' : '';		echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_cat['id'].'"'.$selected.'>'.pun_htmlspecialchars($cur_cat['cat_name']).'</option>'."\n";	}?>										</select>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_forums['Sort by label'] ?></th>									<td>										<select name="sort_by" tabindex="4">											<option value="0"<?php if ($cur_forum['sort_by'] == '0') echo ' selected="selected"' ?>><?php echo $lang_admin_forums['Last post'] ?></option>											<option value="1"<?php if ($cur_forum['sort_by'] == '1') echo ' selected="selected"' ?>><?php echo $lang_admin_forums['Topic start'] ?></option>											<option value="2"<?php if ($cur_forum['sort_by'] == '2') echo ' selected="selected"' ?>><?php echo $lang_admin_forums['Subject'] ?></option>										</select>									</td>								</tr>								<tr>									<th scope="row"><?php echo $lang_admin_forums['Redirect label'] ?></th>									<td><?php echo ($cur_forum['num_topics']) ? $lang_admin_forums['Redirect help'] : '<input type="text" name="redirect_url" size="45" maxlength="100" value="'.pun_htmlspecialchars($cur_forum['redirect_url']).'" tabindex="5" />'; ?></td>								</tr>							</table>						</div>					</fieldset>				</div>				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_forums['Group permissions subhead'] ?></legend>						<div class="infldset">							<p><?php printf($lang_admin_forums['Group permissions info'], '<a href="admin_groups.php">'.$lang_admin_common['User groups'].'</a>') ?></p>							<table id="forumperms" cellspacing="0">							<thead>								<tr>									<th class="atcl">&#160;</th>									<th><?php echo $lang_admin_forums['Read forum label'] ?></th>									<th><?php echo $lang_admin_forums['Post replies label'] ?></th>									<th><?php echo $lang_admin_forums['Post topics label'] ?></th>								</tr>							</thead>							<tbody><?php	$result = $db->query('SELECT g.g_id, g.g_title, g.g_read_board, g.g_post_replies, g.g_post_topics, fp.read_forum, fp.post_replies, fp.post_topics FROM '.$db->prefix.'groups AS g LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (g.g_id=fp.group_id AND fp.forum_id='.$forum_id.') WHERE g.g_id!='.PUN_ADMIN.' ORDER BY g.g_id') or error('Unable to fetch group forum permission list', __FILE__, __LINE__, $db->error());	$cur_index = 7;	while ($cur_perm = $db->fetch_assoc($result))	{		$read_forum = ($cur_perm['read_forum'] != '0') ? true : false;		$post_replies = (($cur_perm['g_post_replies'] == '0' && $cur_perm['post_replies'] == '1') || ($cur_perm['g_post_replies'] == '1' && $cur_perm['post_replies'] != '0')) ? true : false;		$post_topics = (($cur_perm['g_post_topics'] == '0' && $cur_perm['post_topics'] == '1') || ($cur_perm['g_post_topics'] == '1' && $cur_perm['post_topics'] != '0')) ? true : false;		// Determine if the current settings differ from the default or not		$read_forum_def = ($cur_perm['read_forum'] == '0') ? false : true;		$post_replies_def = (($post_replies && $cur_perm['g_post_replies'] == '0') || (!$post_replies && ($cur_perm['g_post_replies'] == '' || $cur_perm['g_post_replies'] == '1'))) ? false : true;		$post_topics_def = (($post_topics && $cur_perm['g_post_topics'] == '0') || (!$post_topics && ($cur_perm['g_post_topics'] == '' || $cur_perm['g_post_topics'] == '1'))) ? false : true;?>								<tr>									<th class="atcl"><?php echo pun_htmlspecialchars($cur_perm['g_title']) ?></th>									<td<?php if (!$read_forum_def) echo ' class="nodefault"'; ?>>										<input type="hidden" name="read_forum_old[<?php echo $cur_perm['g_id'] ?>]" value="<?php echo ($read_forum) ? '1' : '0'; ?>" />										<input type="checkbox" name="read_forum_new[<?php echo $cur_perm['g_id'] ?>]" value="1"<?php echo ($read_forum) ? ' checked="checked"' : ''; ?><?php echo ($cur_perm['g_read_board'] == '0') ? ' disabled="disabled"' : ''; ?> tabindex="<?php echo $cur_index++ ?>" />									</td>									<td<?php if (!$post_replies_def && $cur_forum['redirect_url'] == '') echo ' class="nodefault"'; ?>>										<input type="hidden" name="post_replies_old[<?php echo $cur_perm['g_id'] ?>]" value="<?php echo ($post_replies) ? '1' : '0'; ?>" />										<input type="checkbox" name="post_replies_new[<?php echo $cur_perm['g_id'] ?>]" value="1"<?php echo ($post_replies) ? ' checked="checked"' : ''; ?><?php echo ($cur_forum['redirect_url'] != '') ? ' disabled="disabled"' : ''; ?> tabindex="<?php echo $cur_index++ ?>" />									</td>									<td<?php if (!$post_topics_def && $cur_forum['redirect_url'] == '') echo ' class="nodefault"'; ?>>										<input type="hidden" name="post_topics_old[<?php echo $cur_perm['g_id'] ?>]" value="<?php echo ($post_topics) ? '1' : '0'; ?>" />										<input type="checkbox" name="post_topics_new[<?php echo $cur_perm['g_id'] ?>]" value="1"<?php echo ($post_topics) ? ' checked="checked"' : ''; ?><?php echo ($cur_forum['redirect_url'] != '') ? ' disabled="disabled"' : ''; ?> tabindex="<?php echo $cur_index++ ?>" />									</td>								</tr><?php	}?>							</tbody>							</table>							<div class="fsetsubmit"><input type="submit" name="revert_perms" value="<?php echo $lang_admin_forums['Revert to default'] ?>" tabindex="<?php echo $cur_index++ ?>" /></div>						</div>					</fieldset>				</div>				<p class="submitend"><input type="submit" name="save" value="<?php echo $lang_admin_common['Save changes'] ?>" tabindex="<?php echo $cur_index++ ?>" /></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php	require PUN_ROOT.'footer.php';}$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Forums']);define('PUN_ACTIVE_PAGE', 'admin');require PUN_ROOT.'header.php';generate_admin_menu('forums');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_forums['Add forum head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_forums.php?action=adddel">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_forums['Create new subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_forums['Add forum label'] ?><div><input type="submit" name="add_forum" value="<?php echo $lang_admin_forums['Add forum'] ?>" tabindex="2" /></div></th>									<td>										<select name="add_to_cat" tabindex="1"><?php	$result = $db->query('SELECT id, cat_name FROM '.$db->prefix.'categories ORDER BY disp_position') or error('Unable to fetch category list', __FILE__, __LINE__, $db->error());	if ($db->num_rows($result) > 0)	{		while ($cur_cat = $db->fetch_assoc($result))			echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_cat['id'].'">'.pun_htmlspecialchars($cur_cat['cat_name']).'</option>'."\n";	}	else		echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="0" disabled="disabled">'.$lang_admin_forums['No categories exist'].'</option>'."\n";?>										</select>										<span><?php echo $lang_admin_forums['Add forum help'] ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>			</form>		</div><?php// Display all the categories and forums$result = $db->query('SELECT c.id AS cid, c.cat_name, f.id AS fid, f.forum_name, f.disp_position FROM '.$db->prefix.'categories AS c INNER JOIN '.$db->prefix.'forums AS f ON c.id=f.cat_id ORDER BY c.disp_position, c.id, f.disp_position') or error('Unable to fetch category/forum list', __FILE__, __LINE__, $db->error());if ($db->num_rows($result) > 0){?>		<h2 class="block2"><span><?php echo $lang_admin_forums['Edit forums head'] ?></span></h2>		<div class="box">			<form id="edforum" method="post" action="admin_forums.php?action=edit">				<p class="submittop"><input type="submit" name="update_positions" value="<?php echo $lang_admin_forums['Update positions'] ?>" tabindex="3" /></p><?php$cur_index = 4;$cur_category = 0;while ($cur_forum = $db->fetch_assoc($result)){	if ($cur_forum['cid'] != $cur_category) // A new category since last iteration?	{		if ($cur_category != 0)			echo "\t\t\t\t\t\t\t".'</tbody>'."\n\t\t\t\t\t\t\t".'</table>'."\n\t\t\t\t\t\t".'</div>'."\n\t\t\t\t\t".'</fieldset>'."\n\t\t\t\t".'</div>'."\n";?>				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_forums['Category subhead'] ?> <?php echo pun_htmlspecialchars($cur_forum['cat_name']) ?></legend>						<div class="infldset">							<table cellspacing="0">							<thead>								<tr>									<th class="tcl"><?php echo $lang_admin_common['Action'] ?></th>									<th class="tc2"><?php echo $lang_admin_forums['Position label'] ?></th>									<th class="tcr"><?php echo $lang_admin_forums['Forum label'] ?></th>								</tr>							</thead>							<tbody><?php		$cur_category = $cur_forum['cid'];	}?>								<tr>									<td class="tcl"><a href="admin_forums.php?edit_forum=<?php echo $cur_forum['fid'] ?>" tabindex="<?php echo $cur_index++ ?>"><?php echo $lang_admin_forums['Edit link'] ?></a> | <a href="admin_forums.php?del_forum=<?php echo $cur_forum['fid'] ?>" tabindex="<?php echo $cur_index++ ?>"><?php echo $lang_admin_forums['Delete link'] ?></a></td>									<td class="tc2"><input type="text" name="position[<?php echo $cur_forum['fid'] ?>]" size="3" maxlength="3" value="<?php echo $cur_forum['disp_position'] ?>" tabindex="<?php echo $cur_index++ ?>" /></td>									<td class="tcr"><strong><?php echo pun_htmlspecialchars($cur_forum['forum_name']) ?></strong></td>								</tr><?php}?>							</tbody>							</table>						</div>					</fieldset>				</div>				<p class="submitend"><input type="submit" name="update_positions" value="<?php echo $lang_admin_forums['Update positions'] ?>" tabindex="<?php echo $cur_index++ ?>" /></p>			</form>		</div><?php}?>	</div>	<div class="clearer"></div></div><?phprequire PUN_ROOT.'footer.php';
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';if ($pun_user['g_read_board'] == '0')	message($lang_common['No view'], false, '403 Forbidden');$id = isset($_GET['id']) ? intval($_GET['id']) : 0;if ($id < 1)	message($lang_common['Bad request'], false, '404 Not Found');// Fetch some info about the post, the topic and the forum$result = $db->query('SELECT f.id AS fid, f.forum_name, f.moderators, f.redirect_url, fp.post_replies, fp.post_topics, t.id AS tid, t.subject, t.first_post_id, t.closed, p.posted, p.poster, p.poster_id, p.message, p.hide_smilies FROM '.$db->prefix.'posts AS p INNER JOIN '.$db->prefix.'topics AS t ON t.id=p.topic_id INNER JOIN '.$db->prefix.'forums AS f ON f.id=t.forum_id LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.forum_id=f.id AND fp.group_id='.$pun_user['g_id'].') WHERE (fp.read_forum IS NULL OR fp.read_forum=1) AND p.id='.$id) or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());if (!$db->num_rows($result))	message($lang_common['Bad request'], false, '404 Not Found');$cur_post = $db->fetch_assoc($result);if ($pun_config['o_censoring'] == '1')	$cur_post['subject'] = censor_words($cur_post['subject']);// Sort out who the moderators are and if we are currently a moderator (or an admin)$mods_array = ($cur_post['moderators'] != '') ? unserialize($cur_post['moderators']) : array();$is_admmod = ($pun_user['g_id'] == PUN_ADMIN || ($pun_user['g_moderator'] == '1' && array_key_exists($pun_user['username'], $mods_array))) ? true : false;$is_topic_post = ($id == $cur_post['first_post_id']) ? true : false;// Do we have permission to edit this post?if (($pun_user['g_delete_posts'] == '0' ||	($pun_user['g_delete_topics'] == '0' && $is_topic_post) ||	$cur_post['poster_id'] != $pun_user['id'] ||	$cur_post['closed'] == '1') &&	!$is_admmod)	message($lang_common['No permission'], false, '403 Forbidden');// Load the delete.php language filerequire PUN_ROOT.'lang/'.$pun_user['language'].'/delete.php';if (isset($_POST['delete'])){	if ($is_admmod)		confirm_referrer('delete.php');	require PUN_ROOT.'include/search_idx.php';	if ($is_topic_post)	{		// Delete the topic and all of its posts		delete_topic($cur_post['tid']);		update_forum($cur_post['fid']);		redirect('viewforum.php?id='.$cur_post['fid'], $lang_delete['Topic del redirect']);	}	else	{		// Delete just this one post		delete_post($id, $cur_post['tid']);		update_forum($cur_post['fid']);		// Redirect towards the previous post		$result = $db->query('SELECT id FROM '.$db->prefix.'posts WHERE topic_id='.$cur_post['tid'].' AND id < '.$id.' ORDER BY id DESC LIMIT 1') or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());		$post_id = $db->result($result);		redirect('viewtopic.php?pid='.$post_id.'#p'.$post_id, $lang_delete['Post del redirect']);	}}$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_delete['Delete post']);define ('PUN_ACTIVE_PAGE', 'index');require PUN_ROOT.'header.php';require PUN_ROOT.'include/parser.php';$cur_post['message'] = parse_message($cur_post['message'], $cur_post['hide_smilies']);?><div class="linkst">	<div class="inbox">		<ul class="crumbs">			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="viewforum.php?id=<?php echo $cur_post['fid'] ?>"><?php echo pun_htmlspecialchars($cur_post['forum_name']) ?></a></li>			<li><span>&#160;</span><a href="viewtopic.php?pid=<?php echo $id ?>#p<?php echo $id ?>"><?php echo pun_htmlspecialchars($cur_post['subject']) ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_delete['Delete post'] ?></strong></li>		</ul>	</div></div><div class="blockform">	<h2><span><?php echo $lang_delete['Delete post'] ?></span></h2>	<div class="box">		<form method="post" action="delete.php?id=<?php echo $id ?>">			<div class="inform">				<div class="forminfo">					<h3><span><?php printf($is_topic_post ? $lang_delete['Topic by'] : $lang_delete['Reply by'], '<strong>'.pun_htmlspecialchars($cur_post['poster']).'</strong>', format_time($cur_post['posted'])) ?></span></h3>					<p><?php echo ($is_topic_post) ? '<strong>'.$lang_delete['Topic warning'].'</strong>' : '<strong>'.$lang_delete['Warning'].'</strong>' ?><br /><?php echo $lang_delete['Delete info'] ?></p>				</div>			</div>			<p class="buttons"><input type="submit" name="delete" value="<?php echo $lang_delete['Delete'] ?>" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><div id="postreview">	<div class="blockpost">		<div class="box">			<div class="inbox">				<div class="postbody">					<div class="postleft">						<dl>							<dt><strong><?php echo pun_htmlspecialchars($cur_post['poster']) ?></strong></dt>							<dd><span><?php echo format_time($cur_post['posted']) ?></span></dd>						</dl>					</div>					<div class="postright">						<div class="postmsg">							<?php echo $cur_post['message']."\n" ?>						</div>					</div>				</div>				<div class="clearer"></div>			</div>		</div>	</div></div><?phprequire PUN_ROOT.'footer.php';
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';if ($pun_user['g_read_board'] == '0')	message($lang_common['No view'], false, '403 Forbidden');$id = isset($_GET['id']) ? intval($_GET['id']) : 0;if ($id < 1)	message($lang_common['Bad request'], false, '404 Not Found');// Fetch some info about the post, the topic and the forum$result = $db->query('SELECT f.id AS fid, f.forum_name, f.moderators, f.redirect_url, fp.post_replies, fp.post_topics, t.id AS tid, t.subject, t.posted, t.first_post_id, t.sticky, t.closed, p.poster, p.poster_id, p.message, p.hide_smilies FROM '.$db->prefix.'posts AS p INNER JOIN '.$db->prefix.'topics AS t ON t.id=p.topic_id INNER JOIN '.$db->prefix.'forums AS f ON f.id=t.forum_id LEFT JOIN '.$db->prefix.'forum_perms AS fp ON (fp.forum_id=f.id AND fp.group_id='.$pun_user['g_id'].') WHERE (fp.read_forum IS NULL OR fp.read_forum=1) AND p.id='.$id) or error('Unable to fetch post info', __FILE__, __LINE__, $db->error());if (!$db->num_rows($result))	message($lang_common['Bad request'], false, '404 Not Found');$cur_post = $db->fetch_assoc($result);// Sort out who the moderators are and if we are currently a moderator (or an admin)$mods_array = ($cur_post['moderators'] != '') ? unserialize($cur_post['moderators']) : array();$is_admmod = ($pun_user['g_id'] == PUN_ADMIN || ($pun_user['g_moderator'] == '1' && array_key_exists($pun_user['username'], $mods_array))) ? true : false;$can_edit_subject = $id == $cur_post['first_post_id'];if ($pun_config['o_censoring'] == '1'){	$cur_post['subject'] = censor_words($cur_post['subject']);	$cur_post['message'] = censor_words($cur_post['message']);}// Do we have permission to edit this post?if (($pun_user['g_edit_posts'] == '0' ||	$cur_post['poster_id'] != $pun_user['id'] ||	$cur_post['closed'] == '1') &&	!$is_admmod)	message($lang_common['No permission'], false, '403 Forbidden');// Load the post.php language filerequire PUN_ROOT.'lang/'.$pun_user['language'].'/post.php';// Start with a clean slate$errors = array();if (isset($_POST['form_sent'])){	if ($is_admmod)		confirm_referrer('edit.php');	// If it's a topic it must contain a subject	if ($can_edit_subject)	{		$subject = pun_trim($_POST['req_subject']);		if ($pun_config['o_censoring'] == '1')			$censored_subject = pun_trim(censor_words($subject));		if ($subject == '')			$errors[] = $lang_post['No subject'];		else if ($pun_config['o_censoring'] == '1' && $censored_subject == '')			$errors[] = $lang_post['No subject after censoring'];		else if (pun_strlen($subject) > 70)			$errors[] = $lang_post['Too long subject'];		else if ($pun_config['p_subject_all_caps'] == '0' && is_all_uppercase($subject) && !$pun_user['is_admmod'])			$errors[] = $lang_post['All caps subject'];	}	// Clean up message from POST	$message = pun_linebreaks(pun_trim($_POST['req_message']));	// Here we use strlen() not pun_strlen() as we want to limit the post to PUN_MAX_POSTSIZE bytes, not characters	if (strlen($message) > PUN_MAX_POSTSIZE)		$errors[] = sprintf($lang_post['Too long message'], forum_number_format(PUN_MAX_POSTSIZE));	else if ($pun_config['p_message_all_caps'] == '0' && is_all_uppercase($message) && !$pun_user['is_admmod'])		$errors[] = $lang_post['All caps message'];	// Validate BBCode syntax	if ($pun_config['p_message_bbcode'] == '1')	{		require PUN_ROOT.'include/parser.php';		$message = preparse_bbcode($message, $errors);	}	if (empty($errors))	{		if ($message == '')			$errors[] = $lang_post['No message'];		else if ($pun_config['o_censoring'] == '1')		{			// Censor message to see if that causes problems			$censored_message = pun_trim(censor_words($message));			if ($censored_message == '')				$errors[] = $lang_post['No message after censoring'];		}	}	$hide_smilies = isset($_POST['hide_smilies']) ? '1' : '0';	$stick_topic = isset($_POST['stick_topic']) ? '1' : '0';	if (!$is_admmod)		$stick_topic = $cur_post['sticky'];	// Replace four-byte characters (MySQL cannot handle them)	$message = strip_bad_multibyte_chars($message);	// Did everything go according to plan?	if (empty($errors) && !isset($_POST['preview']))	{		$edited_sql = (!isset($_POST['silent']) || !$is_admmod) ? ', edited='.time().', edited_by=\''.$db->escape($pun_user['username']).'\'' : '';		require PUN_ROOT.'include/search_idx.php';		if ($can_edit_subject)		{			// Update the topic and any redirect topics			$db->query('UPDATE '.$db->prefix.'topics SET subject=\''.$db->escape($subject).'\', sticky='.$stick_topic.' WHERE id='.$cur_post['tid'].' OR moved_to='.$cur_post['tid']) or error('Unable to update topic', __FILE__, __LINE__, $db->error());			// We changed the subject, so we need to take that into account when we update the search words			update_search_index('edit', $id, $message, $subject);		}		else			update_search_index('edit', $id, $message);		// Update the post		$db->query('UPDATE '.$db->prefix.'posts SET message=\''.$db->escape($message).'\', hide_smilies='.$hide_smilies.$edited_sql.' WHERE id='.$id) or error('Unable to update post', __FILE__, __LINE__, $db->error());		redirect('viewtopic.php?pid='.$id.'#p'.$id, $lang_post['Edit redirect']);	}}$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_post['Edit post']);$required_fields = array('req_subject' => $lang_common['Subject'], 'req_message' => $lang_common['Message']);$focus_element = array('edit', 'req_message');define('PUN_ACTIVE_PAGE', 'index');require PUN_ROOT.'header.php';$cur_index = 1;?><div class="linkst">	<div class="inbox">		<ul class="crumbs">			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>			<li><span>&#160;</span><a href="viewforum.php?id=<?php echo $cur_post['fid'] ?>"><?php echo pun_htmlspecialchars($cur_post['forum_name']) ?></a></li>			<li><span>&#160;</span><a href="viewtopic.php?id=<?php echo $cur_post['tid'] ?>"><?php echo pun_htmlspecialchars($cur_post['subject']) ?></a></li>			<li><span>&#160;</span><strong><?php echo $lang_post['Edit post'] ?></strong></li>		</ul>	</div></div><?php// If there are errors, we display themif (!empty($errors)){?><div id="posterror" class="block">	<h2><span><?php echo $lang_post['Post errors'] ?></span></h2>	<div class="box">		<div class="inbox error-info">			<p><?php echo $lang_post['Post errors info'] ?></p>			<ul class="error-list"><?php	foreach ($errors as $cur_error)		echo "\t\t\t\t".'<li><strong>'.$cur_error.'</strong></li>'."\n";?>			</ul>		</div>	</div></div><?php}else if (isset($_POST['preview'])){	require_once PUN_ROOT.'include/parser.php';	$preview_message = parse_message($message, $hide_smilies);?><div id="postpreview" class="blockpost">	<h2><span><?php echo $lang_post['Post preview'] ?></span></h2>	<div class="box">		<div class="inbox">			<div class="postbody">				<div class="postright">					<div class="postmsg">						<?php echo $preview_message."\n" ?>					</div>				</div>			</div>		</div>	</div></div><?php}?><div id="editform" class="blockform">	<h2><span><?php echo $lang_post['Edit post'] ?></span></h2>	<div class="box">		<form id="edit" method="post" action="edit.php?id=<?php echo $id ?>&amp;action=edit" onsubmit="return process_form(this)">			<div class="inform">				<fieldset>					<legend><?php echo $lang_post['Edit post legend'] ?></legend>					<input type="hidden" name="form_sent" value="1" />					<div class="infldset txtarea"><?php if ($can_edit_subject): ?>						<label class="required"><strong><?php echo $lang_common['Subject'] ?> <span><?php echo $lang_common['Required'] ?></span></strong><br />						<input class="longinput" type="text" name="req_subject" size="80" maxlength="70" tabindex="<?php echo $cur_index++ ?>" value="<?php echo pun_htmlspecialchars(isset($_POST['req_subject']) ? $_POST['req_subject'] : $cur_post['subject']) ?>" /><br /></label><?php endif; ?>						<label class="required"><strong><?php echo $lang_common['Message'] ?> <span><?php echo $lang_common['Required'] ?></span></strong><br />						<textarea name="req_message" rows="20" cols="95" tabindex="<?php echo $cur_index++ ?>"><?php echo pun_htmlspecialchars(isset($_POST['req_message']) ? $message : $cur_post['message']) ?></textarea><br /></label>						<ul class="bblinks">							<li><span><a href="help.php#bbcode" onclick="window.open(this.href); return false;"><?php echo $lang_common['BBCode'] ?></a> <?php echo ($pun_config['p_message_bbcode'] == '1') ? $lang_common['on'] : $lang_common['off']; ?></span></li>							<li><span><a href="help.php#url" onclick="window.open(this.href); return false;"><?php echo $lang_common['url tag'] ?></a> <?php echo ($pun_config['p_message_bbcode'] == '1' && $pun_user['g_post_links'] == '1') ? $lang_common['on'] : $lang_common['off']; ?></span></li>							<li><span><a href="help.php#img" onclick="window.open(this.href); return false;"><?php echo $lang_common['img tag'] ?></a> <?php echo ($pun_config['p_message_bbcode'] == '1' && $pun_config['p_message_img_tag'] == '1') ? $lang_common['on'] : $lang_common['off']; ?></span></li>							<li><span><a href="help.php#smilies" onclick="window.open(this.href); return false;"><?php echo $lang_common['Smilies'] ?></a> <?php echo ($pun_config['o_smilies'] == '1') ? $lang_common['on'] : $lang_common['off']; ?></span></li>						</ul>					</div>				</fieldset><?php$checkboxes = array();if ($can_edit_subject && $is_admmod){	if (isset($_POST['stick_topic']) || $cur_post['sticky'] == '1')		$checkboxes[] = '<label><input type="checkbox" name="stick_topic" value="1" checked="checked" tabindex="'.($cur_index++).'" />'.$lang_common['Stick topic'].'<br /></label>';	else		$checkboxes[] = '<label><input type="checkbox" name="stick_topic" value="1" tabindex="'.($cur_index++).'" />'.$lang_common['Stick topic'].'<br /></label>';}if ($pun_config['o_smilies'] == '1'){	if (isset($_POST['hide_smilies']) || $cur_post['hide_smilies'] == '1')		$checkboxes[] = '<label><input type="checkbox" name="hide_smilies" value="1" checked="checked" tabindex="'.($cur_index++).'" />'.$lang_post['Hide smilies'].'<br /></label>';	else		$checkboxes[] = '<label><input type="checkbox" name="hide_smilies" value="1" tabindex="'.($cur_index++).'" />'.$lang_post['Hide smilies'].'<br /></label>';}if ($is_admmod){	if ((isset($_POST['form_sent']) && isset($_POST['silent'])) || !isset($_POST['form_sent']))		$checkboxes[] = '<label><input type="checkbox" name="silent" value="1" tabindex="'.($cur_index++).'" checked="checked" />'.$lang_post['Silent edit'].'<br /></label>';	else		$checkboxes[] = '<label><input type="checkbox" name="silent" value="1" tabindex="'.($cur_index++).'" />'.$lang_post['Silent edit'].'<br /></label>';}if (!empty($checkboxes)){?>			</div>			<div class="inform">				<fieldset>					<legend><?php echo $lang_common['Options'] ?></legend>					<div class="infldset">						<div class="rbox">							<?php echo implode("\n\t\t\t\t\t\t\t", $checkboxes)."\n" ?>						</div>					</div>				</fieldset><?php	}?>			</div>			<p class="buttons"><input type="submit" name="submit" value="<?php echo $lang_common['Submit'] ?>" tabindex="<?php echo $cur_index++ ?>" accesskey="s" /> <input type="submit" name="preview" value="<?php echo $lang_post['Preview'] ?>" tabindex="<?php echo $cur_index++ ?>" accesskey="p" /> <a href="javascript:history.go(-1)"><?php echo $lang_common['Go back'] ?></a></p>		</form>	</div></div><?phprequire PUN_ROOT.'footer.php';
<?php/** * Copyright (C) 2008-2012 FluxBB * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher */// Tell header.php to use the admin templatedefine('PUN_ADMIN_CONSOLE', 1);define('PUN_ROOT', dirname(__FILE__).'/');require PUN_ROOT.'include/common.php';require PUN_ROOT.'include/common_admin.php';if ($pun_user['g_id'] != PUN_ADMIN)	message($lang_common['No permission'], false, '403 Forbidden');// Load the admin_categories.php language filerequire PUN_ROOT.'lang/'.$admin_language.'/admin_categories.php';// Add a new categoryif (isset($_POST['add_cat'])){	confirm_referrer('admin_categories.php');	$new_cat_name = pun_trim($_POST['new_cat_name']);	if ($new_cat_name == '')		message($lang_admin_categories['Must enter name message']);	$db->query('INSERT INTO '.$db->prefix.'categories (cat_name) VALUES(\''.$db->escape($new_cat_name).'\')') or error('Unable to create category', __FILE__, __LINE__, $db->error());	redirect('admin_categories.php', $lang_admin_categories['Category added redirect']);}// Delete a categoryelse if (isset($_POST['del_cat']) || isset($_POST['del_cat_comply'])){	confirm_referrer('admin_categories.php');	$cat_to_delete = intval($_POST['cat_to_delete']);	if ($cat_to_delete < 1)		message($lang_common['Bad request']);	if (isset($_POST['del_cat_comply'])) // Delete a category with all forums and posts	{		@set_time_limit(0);		$result = $db->query('SELECT id FROM '.$db->prefix.'forums WHERE cat_id='.$cat_to_delete) or error('Unable to fetch forum list', __FILE__, __LINE__, $db->error());		$num_forums = $db->num_rows($result);		for ($i = 0; $i < $num_forums; ++$i)		{			$cur_forum = $db->result($result, $i);			// Prune all posts and topics			prune($cur_forum, 1, -1);			// Delete the forum			$db->query('DELETE FROM '.$db->prefix.'forums WHERE id='.$cur_forum) or error('Unable to delete forum', __FILE__, __LINE__, $db->error());		}		// Locate any "orphaned redirect topics" and delete them		$result = $db->query('SELECT t1.id FROM '.$db->prefix.'topics AS t1 LEFT JOIN '.$db->prefix.'topics AS t2 ON t1.moved_to=t2.id WHERE t2.id IS NULL AND t1.moved_to IS NOT NULL') or error('Unable to fetch redirect topics', __FILE__, __LINE__, $db->error());		$num_orphans = $db->num_rows($result);		if ($num_orphans)		{			for ($i = 0; $i < $num_orphans; ++$i)				$orphans[] = $db->result($result, $i);			$db->query('DELETE FROM '.$db->prefix.'topics WHERE id IN('.implode(',', $orphans).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db->error());		}		// Delete the category		$db->query('DELETE FROM '.$db->prefix.'categories WHERE id='.$cat_to_delete) or error('Unable to delete category', __FILE__, __LINE__, $db->error());		// Regenerate the quick jump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require PUN_ROOT.'include/cache.php';		generate_quickjump_cache();		redirect('admin_categories.php', $lang_admin_categories['Category deleted redirect']);	}	else // If the user hasn't confirmed the delete	{		$result = $db->query('SELECT cat_name FROM '.$db->prefix.'categories WHERE id='.$cat_to_delete) or error('Unable to fetch category info', __FILE__, __LINE__, $db->error());		$cat_name = $db->result($result);		$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Categories']);		define('PUN_ACTIVE_PAGE', 'admin');		require PUN_ROOT.'header.php';		generate_admin_menu('categories');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_categories['Delete category head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_categories.php">				<div class="inform">				<input type="hidden" name="cat_to_delete" value="<?php echo $cat_to_delete ?>" />					<fieldset>						<legend><?php echo $lang_admin_categories['Confirm delete subhead'] ?></legend>						<div class="infldset">							<p><?php printf($lang_admin_categories['Confirm delete info'], pun_htmlspecialchars($cat_name)) ?></p>							<p class="warntext"><?php echo $lang_admin_categories['Delete category warn'] ?></p>						</div>					</fieldset>				</div>				<p class="buttons"><input type="submit" name="del_cat_comply" value="<?php echo $lang_admin_common['Delete'] ?>" /><a href="javascript:history.go(-1)"><?php echo $lang_admin_common['Go back'] ?></a></p>			</form>		</div>	</div>	<div class="clearer"></div></div><?php		require PUN_ROOT.'footer.php';	}}else if (isset($_POST['update'])) // Change position and name of the categories{	confirm_referrer('admin_categories.php');	$categories = $_POST['cat'];	if (empty($categories))		message($lang_common['Bad request']);	foreach ($categories as $cat_id => $cur_cat)	{		$cur_cat['name'] = pun_trim($cur_cat['name']);		$cur_cat['order'] = pun_trim($cur_cat['order']);		if ($cur_cat['name'] == '')			message($lang_admin_categories['Must enter name message']);		if ($cur_cat['order'] == '' || preg_match('%[^0-9]%', $cur_cat['order']))			message($lang_admin_categories['Must enter integer message']);		$db->query('UPDATE '.$db->prefix.'categories SET cat_name=\''.$db->escape($cur_cat['name']).'\', disp_position='.$cur_cat['order'].' WHERE id='.intval($cat_id)) or error('Unable to update category', __FILE__, __LINE__, $db->error());	}	// Regenerate the quick jump cache	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require PUN_ROOT.'include/cache.php';	generate_quickjump_cache();	redirect('admin_categories.php', $lang_admin_categories['Categories updated redirect']);}// Generate an array with all categories$result = $db->query('SELECT id, cat_name, disp_position FROM '.$db->prefix.'categories ORDER BY disp_position') or error('Unable to fetch category list', __FILE__, __LINE__, $db->error());$num_cats = $db->num_rows($result);for ($i = 0; $i < $num_cats; ++$i)	$cat_list[] = $db->fetch_assoc($result);$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Categories']);define('PUN_ACTIVE_PAGE', 'admin');require PUN_ROOT.'header.php';generate_admin_menu('categories');?>	<div class="blockform">		<h2><span><?php echo $lang_admin_categories['Add categories head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_categories.php">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_categories['Add categories subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_categories['Add category label'] ?><div><input type="submit" name="add_cat" value="<?php echo $lang_admin_categories['Add new submit'] ?>" tabindex="2" /></div></th>									<td>										<input type="text" name="new_cat_name" size="35" maxlength="80" tabindex="1" />										<span><?php printf($lang_admin_categories['Add category help'], '<a href="admin_forums.php">'.$lang_admin_common['Forums'].'</a>') ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>			</form>		</div><?php if ($num_cats): ?>		<h2 class="block2"><span><?php echo $lang_admin_categories['Delete categories head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_categories.php">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_categories['Delete categories subhead'] ?></legend>						<div class="infldset">							<table class="aligntop" cellspacing="0">								<tr>									<th scope="row"><?php echo $lang_admin_categories['Delete category label'] ?><div><input type="submit" name="del_cat" value="<?php echo $lang_admin_common['Delete'] ?>" tabindex="4" /></div></th>									<td>										<select name="cat_to_delete" tabindex="3"><?php	foreach ($cat_list as $cur_cat)		echo "\t\t\t\t\t\t\t\t\t\t\t".'<option value="'.$cur_cat['id'].'">'.pun_htmlspecialchars($cur_cat['cat_name']).'</option>'."\n";?>										</select>										<span><?php echo $lang_admin_categories['Delete category help'] ?></span>									</td>								</tr>							</table>						</div>					</fieldset>				</div>			</form>		</div><?php endif; ?><?php if ($num_cats): ?>		<h2 class="block2"><span><?php echo $lang_admin_categories['Edit categories head'] ?></span></h2>		<div class="box">			<form method="post" action="admin_categories.php">				<div class="inform">					<fieldset>						<legend><?php echo $lang_admin_categories['Edit categories subhead'] ?></legend>						<div class="infldset">							<table id="categoryedit" cellspacing="0" >							<thead>								<tr>									<th class="tcl" scope="col"><?php echo $lang_admin_categories['Category name label'] ?></th>									<th scope="col"><?php echo $lang_admin_categories['Category position label'] ?></th>								</tr>							</thead>							<tbody><?php	foreach ($cat_list as $cur_cat)	{?>								<tr>									<td class="tcl"><input type="text" name="cat[<?php echo $cur_cat['id'] ?>][name]" value="<?php echo pun_htmlspecialchars($cur_cat['cat_name']) ?>" size="35" maxlength="80" /></td>									<td><input type="text" name="cat[<?php echo $cur_cat['id'] ?>][order]" value="<?php echo $cur_cat['disp_position'] ?>" size="3" maxlength="3" /></td>								</tr><?php	}?>							</tbody>							</table>							<div class="fsetsubmit"><input type="submit" name="update" value="<?php echo $lang_admin_common['Update'] ?>" /></div>						</div>					</fieldset>				</div>			</form>		</div><?php endif; ?>	</div>	<div class="clearer"></div></div><?phprequire PUN_ROOT.'footer.php';
