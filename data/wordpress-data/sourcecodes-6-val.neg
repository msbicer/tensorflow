<?php/** * TwentyTen functions and definitions * * Sets up the theme and provides some helper functions. Some helper functions * are used in the theme as custom template tags. Others are attached to action and * filter hooks in WordPress to change core functionality. * * The first function, twentyten_setup(), sets up the theme by registering support * for various features in WordPress, such as post thumbnails, navigation menus, and the like. * * When using a child theme (see http://codex.wordpress.org/Theme_Development and * http://codex.wordpress.org/Child_Themes), you can override certain functions * (those wrapped in a function_exists() call) by defining them first in your child theme's * functions.php file. The child theme's functions.php file is included before the parent * theme's file, so the child theme functions would be used. * * Functions that are not pluggable (not wrapped in function_exists()) are instead attached * to a filter or action hook. The hook can be removed by using remove_action() or * remove_filter() and you can attach your own function to the hook. * * We can remove the parent theme's hook only after it is attached, which means we need to * wait until setting up the child theme: * * <code> * add_action( 'after_setup_theme', 'my_child_theme_setup' ); * function my_child_theme_setup() { *     // We are providing our own filter for excerpt_length (or using the unfiltered value) *     remove_filter( 'excerpt_length', 'twentyten_excerpt_length' ); *     ... * } * </code> * * For more information on hooks, actions, and filters, see http://codex.wordpress.org/Plugin_API. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 *//** * Set the content width based on the theme's design and stylesheet. * * Used to set the width of images and content. Should be equal to the width the theme * is designed for, generally via the style.css stylesheet. */if ( ! isset( $content_width ) )	$content_width = 640;/** Tell WordPress to run twentyten_setup() when the 'after_setup_theme' hook is run. */add_action( 'after_setup_theme', 'twentyten_setup' );if ( ! function_exists( 'twentyten_setup' ) ):/** * Sets up theme defaults and registers support for various WordPress features. * * Note that this function is hooked into the after_setup_theme hook, which runs * before the init hook. The init hook is too late for some features, such as indicating * support post thumbnails. * * To override twentyten_setup() in a child theme, add your own twentyten_setup to your child theme's * functions.php file. * * @uses add_theme_support() To add support for post thumbnails and automatic feed links. * @uses register_nav_menus() To add support for navigation menus. * @uses add_custom_background() To add support for a custom background. * @uses add_editor_style() To style the visual editor. * @uses load_theme_textdomain() For translation/localization support. * @uses add_custom_image_header() To add support for a custom header. * @uses register_default_headers() To register the default custom header images provided with the theme. * @uses set_post_thumbnail_size() To set a custom post thumbnail size. * * @since Twenty Ten 1.0 */function twentyten_setup() {	// This theme styles the visual editor with editor-style.css to match the theme style.	add_editor_style();	// This theme uses post thumbnails	add_theme_support( 'post-thumbnails' );	// Add default posts and comments RSS feed links to head	add_theme_support( 'automatic-feed-links' );	// Make theme available for translation	// Translations can be filed in the /languages/ directory	load_theme_textdomain( 'twentyten', TEMPLATEPATH . '/languages' );	$locale = get_locale();	$locale_file = TEMPLATEPATH . "/languages/$locale.php";	if ( is_readable( $locale_file ) )		require_once( $locale_file );	// This theme uses wp_nav_menu() in one location.	register_nav_menus( array(		'primary' => __( 'Primary Navigation', 'twentyten' ),	) );	// This theme allows users to set a custom background	add_custom_background();	// Your changeable header business starts here	define( 'HEADER_TEXTCOLOR', '' );	// No CSS, just IMG call. The %s is a placeholder for the theme template directory URI.	define( 'HEADER_IMAGE', '%s/images/headers/path.jpg' );	// The height and width of your custom header. You can hook into the theme's own filters to change these values.	// Add a filter to twentyten_header_image_width and twentyten_header_image_height to change these values.	define( 'HEADER_IMAGE_WIDTH', apply_filters( 'twentyten_header_image_width', 940 ) );	define( 'HEADER_IMAGE_HEIGHT', apply_filters( 'twentyten_header_image_height', 198 ) );	// We'll be using post thumbnails for custom header images on posts and pages.	// We want them to be 940 pixels wide by 198 pixels tall.	// Larger images will be auto-cropped to fit, smaller ones will be ignored. See header.php.	set_post_thumbnail_size( HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT, true );	// Don't support text inside the header image.	define( 'NO_HEADER_TEXT', true );	// Add a way for the custom header to be styled in the admin panel that controls	// custom headers. See twentyten_admin_header_style(), below.	add_custom_image_header( '', 'twentyten_admin_header_style' );	// ... and thus ends the changeable header business.	// Default custom headers packaged with the theme. %s is a placeholder for the theme template directory URI.	register_default_headers( array(		'berries' => array(			'url' => '%s/images/headers/berries.jpg',			'thumbnail_url' => '%s/images/headers/berries-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Berries', 'twentyten' )		),		'cherryblossom' => array(			'url' => '%s/images/headers/cherryblossoms.jpg',			'thumbnail_url' => '%s/images/headers/cherryblossoms-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Cherry Blossoms', 'twentyten' )		),		'concave' => array(			'url' => '%s/images/headers/concave.jpg',			'thumbnail_url' => '%s/images/headers/concave-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Concave', 'twentyten' )		),		'fern' => array(			'url' => '%s/images/headers/fern.jpg',			'thumbnail_url' => '%s/images/headers/fern-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Fern', 'twentyten' )		),		'forestfloor' => array(			'url' => '%s/images/headers/forestfloor.jpg',			'thumbnail_url' => '%s/images/headers/forestfloor-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Forest Floor', 'twentyten' )		),		'inkwell' => array(			'url' => '%s/images/headers/inkwell.jpg',			'thumbnail_url' => '%s/images/headers/inkwell-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Inkwell', 'twentyten' )		),		'path' => array(			'url' => '%s/images/headers/path.jpg',			'thumbnail_url' => '%s/images/headers/path-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Path', 'twentyten' )		),		'sunset' => array(			'url' => '%s/images/headers/sunset.jpg',			'thumbnail_url' => '%s/images/headers/sunset-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Sunset', 'twentyten' )		)	) );}endif;if ( ! function_exists( 'twentyten_admin_header_style' ) ) :/** * Styles the header image displayed on the Appearance > Header admin panel. * * Referenced via add_custom_image_header() in twentyten_setup(). * * @since Twenty Ten 1.0 */function twentyten_admin_header_style() {?><style type="text/css">/* Shows the same border as on front end */#headimg {	border-bottom: 1px solid #000;	border-top: 4px solid #000;}/* If NO_HEADER_TEXT is false, you would style the text with these selectors:	#headimg #name { }	#headimg #desc { }*/</style><?php}endif;/** * Makes some changes to the <title> tag, by filtering the output of wp_title(). * * If we have a site description and we're viewing the home page or a blog posts * page (when using a static front page), then we will add the site description. * * If we're viewing a search result, then we're going to recreate the title entirely. * We're going to add page numbers to all titles as well, to the middle of a search * result title and the end of all other titles. * * The site title also gets added to all titles. * * @since Twenty Ten 1.0 * * @param string $title Title generated by wp_title() * @param string $separator The separator passed to wp_title(). Twenty Ten uses a * 	vertical bar, "|", as a separator in header.php. * @return string The new title, ready for the <title> tag. */function twentyten_filter_wp_title( $title, $separator ) {	// Don't affect wp_title() calls in feeds.	if ( is_feed() )		return $title;	// The $paged global variable contains the page number of a listing of posts.	// The $page global variable contains the page number of a single post that is paged.	// We'll display whichever one applies, if we're not looking at the first page.	global $paged, $page;	if ( is_search() ) {		// If we're a search, let's start over:		$title = sprintf( __( 'Search results for %s', 'twentyten' ), '"' . get_search_query() . '"' );		// Add a page number if we're on page 2 or more:		if ( $paged >= 2 )			$title .= " $separator " . sprintf( __( 'Page %s', 'twentyten' ), $paged );		// Add the site name to the end:		$title .= " $separator " . get_bloginfo( 'name', 'display' );		// We're done. Let's send the new title back to wp_title():		return $title;	}	// Otherwise, let's start by adding the site name to the end:	$title .= get_bloginfo( 'name', 'display' );	// If we have a site description and we're on the home/front page, add the description:	$site_description = get_bloginfo( 'description', 'display' );	if ( $site_description && ( is_home() || is_front_page() ) )		$title .= " $separator " . $site_description;	// Add a page number if necessary:	if ( $paged >= 2 || $page >= 2 )		$title .= " $separator " . sprintf( __( 'Page %s', 'twentyten' ), max( $paged, $page ) );	// Return the new title to wp_title():	return $title;}add_filter( 'wp_title', 'twentyten_filter_wp_title', 10, 2 );/** * Get our wp_nav_menu() fallback, wp_page_menu(), to show a home link. * * To override this in a child theme, remove the filter and optionally add * your own function tied to the wp_page_menu_args filter hook. * * @since Twenty Ten 1.0 */function twentyten_page_menu_args( $args ) {	$args['show_home'] = true;	return $args;}add_filter( 'wp_page_menu_args', 'twentyten_page_menu_args' );/** * Sets the post excerpt length to 40 characters. * * To override this length in a child theme, remove the filter and add your own * function tied to the excerpt_length filter hook. * * @since Twenty Ten 1.0 * @return int */function twentyten_excerpt_length( $length ) {	return 40;}add_filter( 'excerpt_length', 'twentyten_excerpt_length' );/** * Returns a "Continue Reading" link for excerpts * * @since Twenty Ten 1.0 * @return string "Continue Reading" link */function twentyten_continue_reading_link() {	return ' <a href="'. get_permalink() . '">' . __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) . '</a>';}/** * Replaces "[...]" (appended to automatically generated excerpts) with an ellipsis and twentyten_continue_reading_link(). * * To override this in a child theme, remove the filter and add your own * function tied to the excerpt_more filter hook. * * @since Twenty Ten 1.0 * @return string An ellipsis */function twentyten_auto_excerpt_more( $more ) {	return ' &hellip;' . twentyten_continue_reading_link();}add_filter( 'excerpt_more', 'twentyten_auto_excerpt_more' );/** * Adds a pretty "Continue Reading" link to custom post excerpts. * * To override this link in a child theme, remove the filter and add your own * function tied to the get_the_excerpt filter hook. * * @since Twenty Ten 1.0 * @return string Excerpt with a pretty "Continue Reading" link */function twentyten_custom_excerpt_more( $output ) {	if ( has_excerpt() && ! is_attachment() ) {		$output .= twentyten_continue_reading_link();	}	return $output;}add_filter( 'get_the_excerpt', 'twentyten_custom_excerpt_more' );/** * Remove inline styles printed when the gallery shortcode is used. * * Galleries are styled by the theme in Twenty Ten's style.css. * * @since Twenty Ten 1.0 * @return string The gallery style filter, with the styles themselves removed. */function twentyten_remove_gallery_css( $css ) {	return preg_replace( "#<style type='text/css'>(.*?)</style>#s", '', $css );}add_filter( 'gallery_style', 'twentyten_remove_gallery_css' );if ( ! function_exists( 'twentyten_comment' ) ) :/** * Template for comments and pingbacks. * * To override this walker in a child theme without modifying the comments template * simply create your own twentyten_comment(), and that function will be used instead. * * Used as a callback by wp_list_comments() for displaying the comments. * * @since Twenty Ten 1.0 */function twentyten_comment( $comment, $args, $depth ) {	$GLOBALS['comment'] = $comment;	switch ( $comment->comment_type ) :		case '' :	?>	<li <?php comment_class(); ?> id="li-comment-<?php comment_ID(); ?>">		<div id="comment-<?php comment_ID(); ?>">		<div class="comment-author vcard">			<?php echo get_avatar( $comment, 40 ); ?>			<?php printf( __( '%s <span class="says">says:</span>', 'twentyten' ), sprintf( '<cite class="fn">%s</cite>', get_comment_author_link() ) ); ?>		</div><!-- .comment-author .vcard -->		<?php if ( $comment->comment_approved == '0' ) : ?>			<em><?php _e( 'Your comment is awaiting moderation.', 'twentyten' ); ?></em>			<br />		<?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo esc_url( get_comment_link( $comment->comment_ID ) ); ?>">			<?php				/* translators: 1: date, 2: time */				printf( __( '%1$s at %2$s', 'twentyten' ), get_comment_date(),  get_comment_time() ); ?></a><?php edit_comment_link( __( '(Edit)', 'twentyten' ), ' ' );			?>		</div><!-- .comment-meta .commentmetadata -->		<div class="comment-body"><?php comment_text(); ?></div>		<div class="reply">			<?php comment_reply_link( array_merge( $args, array( 'depth' => $depth, 'max_depth' => $args['max_depth'] ) ) ); ?>		</div><!-- .reply -->	</div><!-- #comment-##  -->	<?php			break;		case 'pingback'  :		case 'trackback' :	?>	<li class="post pingback">		<p><?php _e( 'Pingback:', 'twentyten' ); ?> <?php comment_author_link(); ?><?php edit_comment_link( __('(Edit)', 'twentyten'), ' ' ); ?></p>	<?php			break;	endswitch;}endif;/** * Register widgetized areas, including two sidebars and four widget-ready columns in the footer. * * To override twentyten_widgets_init() in a child theme, remove the action hook and add your own * function tied to the init hook. * * @since Twenty Ten 1.0 * @uses register_sidebar */function twentyten_widgets_init() {	// Area 1, located at the top of the sidebar.	register_sidebar( array(		'name' => __( 'Primary Widget Area', 'twentyten' ),		'id' => 'primary-widget-area',		'description' => __( 'The primary widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 2, located below the Primary Widget Area in the sidebar. Empty by default.	register_sidebar( array(		'name' => __( 'Secondary Widget Area', 'twentyten' ),		'id' => 'secondary-widget-area',		'description' => __( 'The secondary widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 3, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'First Footer Widget Area', 'twentyten' ),		'id' => 'first-footer-widget-area',		'description' => __( 'The first footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 4, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Second Footer Widget Area', 'twentyten' ),		'id' => 'second-footer-widget-area',		'description' => __( 'The second footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 5, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Third Footer Widget Area', 'twentyten' ),		'id' => 'third-footer-widget-area',		'description' => __( 'The third footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 6, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Fourth Footer Widget Area', 'twentyten' ),		'id' => 'fourth-footer-widget-area',		'description' => __( 'The fourth footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );}/** Register sidebars by running twentyten_widgets_init() on the widgets_init hook. */add_action( 'widgets_init', 'twentyten_widgets_init' );/** * Removes the default styles that are packaged with the Recent Comments widget. * * To override this in a child theme, remove the filter and optionally add your own * function tied to the widgets_init action hook. * * @since Twenty Ten 1.0 */function twentyten_remove_recent_comments_style() {	global $wp_widget_factory;	remove_action( 'wp_head', array( $wp_widget_factory->widgets['WP_Widget_Recent_Comments'], 'recent_comments_style' ) );}add_action( 'widgets_init', 'twentyten_remove_recent_comments_style' );if ( ! function_exists( 'twentyten_posted_on' ) ) :/** * Prints HTML with meta information for the current postdate/time and author. * * @since Twenty Ten 1.0 */function twentyten_posted_on() {	printf( __( '<span class="%1$s">Posted on</span> %2$s <span class="meta-sep">by</span> %3$s', 'twentyten' ),		'meta-prep meta-prep-author',		sprintf( '<a href="%1$s" title="%2$s" rel="bookmark"><span class="entry-date">%3$s</span></a>',			get_permalink(),			esc_attr( get_the_time() ),			get_the_date()		),		sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',			get_author_posts_url( get_the_author_meta( 'ID' ) ),			sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),			get_the_author()		)	);}endif;if ( ! function_exists( 'twentyten_posted_in' ) ) :/** * Prints HTML with meta information for the current post (category, tags and permalink). * * @since Twenty Ten 1.0 */function twentyten_posted_in() {	// Retrieves tag list of current post, separated by commas.	$tag_list = get_the_tag_list( '', ', ' );	if ( $tag_list ) {		$posted_in = __( 'This entry was posted in %1$s and tagged %2$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	} elseif ( is_object_in_taxonomy( get_post_type(), 'category' ) ) {		$posted_in = __( 'This entry was posted in %1$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	} else {		$posted_in = __( 'Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	}	// Prints the string, replacing the placeholders.	printf(		$posted_in,		get_the_category_list( ', ' ),		$tag_list,		get_permalink(),		the_title_attribute( 'echo=0' )	);}endif;
<?php/** * These functions are needed to load WordPress. * * @package WordPress *//** * Turn register globals off. * * @access private * @since 2.1.0 * @return null Will return null if register_globals PHP directive was disabled */function wp_unregister_GLOBALS() {	if ( !ini_get( 'register_globals' ) )		return;	if ( isset( $_REQUEST['GLOBALS'] ) )		die( /*WP_I18N_GLOBALS_OVERWRITE*/'GLOBALS overwrite attempt detected'/*/WP_I18N_GLOBALS_OVERWRITE*/ );	// Variables that shouldn't be unset	$no_unset = array( 'GLOBALS', '_GET', '_POST', '_COOKIE', '_REQUEST', '_SERVER', '_ENV', '_FILES', 'table_prefix' );	$input = array_merge( $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_FILES, isset( $_SESSION ) && is_array( $_SESSION ) ? $_SESSION : array() );	foreach ( $input as $k => $v )		if ( !in_array( $k, $no_unset ) && isset( $GLOBALS[$k] ) ) {			$GLOBALS[$k] = null;			unset( $GLOBALS[$k] );		}}/** * Fix $_SERVER variables for various setups. * * @access private * @since 3.0.0 */function wp_fix_server_vars() {	global $PHP_SELF;	$default_server_values = array(		'SERVER_SOFTWARE' => '',		'REQUEST_URI' => '',	);	$_SERVER = array_merge( $default_server_values, $_SERVER );	// Fix for IIS when running with PHP ISAPI	if ( empty( $_SERVER['REQUEST_URI'] ) || ( php_sapi_name() != 'cgi-fcgi' && preg_match( '/^Microsoft-IIS\//', $_SERVER['SERVER_SOFTWARE'] ) ) ) {		// IIS Mod-Rewrite		if ( isset( $_SERVER['HTTP_X_ORIGINAL_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_ORIGINAL_URL'];		}		// IIS Isapi_Rewrite		else if ( isset( $_SERVER['HTTP_X_REWRITE_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL'];		} else {			// Use ORIG_PATH_INFO if there is no PATH_INFO			if ( !isset( $_SERVER['PATH_INFO'] ) && isset( $_SERVER['ORIG_PATH_INFO'] ) )				$_SERVER['PATH_INFO'] = $_SERVER['ORIG_PATH_INFO'];			// Some IIS + PHP configurations puts the script-name in the path-info (No need to append it twice)			if ( isset( $_SERVER['PATH_INFO'] ) ) {				if ( $_SERVER['PATH_INFO'] == $_SERVER['SCRIPT_NAME'] )					$_SERVER['REQUEST_URI'] = $_SERVER['PATH_INFO'];				else					$_SERVER['REQUEST_URI'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];			}			// Append the query string if it exists and isn't null			if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {				$_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];			}		}	}	// Fix for PHP as CGI hosts that set SCRIPT_FILENAME to something ending in php.cgi for all requests	if ( isset( $_SERVER['SCRIPT_FILENAME'] ) && ( strpos( $_SERVER['SCRIPT_FILENAME'], 'php.cgi' ) == strlen( $_SERVER['SCRIPT_FILENAME'] ) - 7 ) )		$_SERVER['SCRIPT_FILENAME'] = $_SERVER['PATH_TRANSLATED'];	// Fix for Dreamhost and other PHP as CGI hosts	if ( strpos( $_SERVER['SCRIPT_NAME'], 'php.cgi' ) !== false )		unset( $_SERVER['PATH_INFO'] );	// Fix empty PHP_SELF	$PHP_SELF = $_SERVER['PHP_SELF'];	if ( empty( $PHP_SELF ) )		$_SERVER['PHP_SELF'] = $PHP_SELF = preg_replace( '/(\?.*)?$/', '', $_SERVER["REQUEST_URI"] );}/** * Check for the required PHP version, and the MySQL extension or a database drop-in. * * Dies if requirements are not met. * * @access private * @since 3.0.0 */function wp_check_php_mysql_versions() {	// we can probably extend this function to check if wp_die() exists then use translated strings, and then use it in install.php etc.	global $required_php_version, $wp_version;	$php_version = phpversion();	if ( version_compare( $required_php_version, $php_version, '>' ) )		die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress %2$s requires at least %3$s.'/*/WP_I18N_OLD_PHP*/, $php_version, $wp_version, $required_php_version ) );	if ( !extension_loaded( 'mysql' ) && !file_exists( WP_CONTENT_DIR . '/db.php' ) )		die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );}/** * Don't load all of WordPress when handling a favicon.ico request. * Instead, send the headers for a zero-length favicon and bail. * * @since 3.0.0 */function wp_favicon_request() {	if ( '/favicon.ico' == $_SERVER['REQUEST_URI'] ) {		header('Content-Type: image/vnd.microsoft.icon');		header('Content-Length: 0');		exit;	}}/** * Dies with a maintenance message when conditions are met. * * Checks for a file in the WordPress root directory named ".maintenance". * This file will contain the variable $upgrading, set to the time the file * was created. If the file was created less than 10 minutes ago, WordPress * enters maintenance mode and displays a message. * * The default message can be replaced by using a drop-in (maintenance.php in * the wp-content directory). * * @access private * @since 3.0.0 */function wp_maintenance() {	if ( !file_exists( ABSPATH . '.maintenance' ) || defined( 'WP_INSTALLING' ) )		return;	global $upgrading;	include( ABSPATH . '.maintenance' );	// If the $upgrading timestamp is older than 10 minutes, don't die.	if ( ( time() - $upgrading ) >= 600 )		return;	if ( file_exists( WP_CONTENT_DIR . '/maintenance.php' ) ) {		require_once( WP_CONTENT_DIR . '/maintenance.php' );		die();	}	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	header( "$protocol 503 Service Unavailable", true, 503 );	header( 'Content-Type: text/html; charset=utf-8' );	header( 'Retry-After: 600' );?>	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">	<html xmlns="http://www.w3.org/1999/xhtml">	<head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />		<title><?php echo /*WP_I18N_MAINTENANCE*/'Maintenance'/*/WP_I18N_MAINTENANCE*/; ?></title>	</head>	<body>		<h1><?php echo /*WP_I18N_MAINT_MSG*/'Briefly unavailable for scheduled maintenance. Check back in a minute.'/*/WP_I18N_MAINT_MSG*/; ?></h1>	</body>	</html><?php	die();}/** * PHP 4 standard microtime start capture. * * @access private * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when function is called. * @return bool Always returns true. */function timer_start() {	global $timestart;	$mtime = explode( ' ', microtime() );	$timestart = $mtime[1] + $mtime[0];	return true;}/** * Return and/or display the time from the page start to when function is called. * * You can get the results and print them by doing: * <code> * $nTimePageTookToExecute = timer_stop(); * echo $nTimePageTookToExecute; * </code> * * Or instead, you can do: * <code> * timer_stop(1); * </code> * which will do what the above does. If you need the result, you can assign it to a variable, but * most cases, you only need to echo it. * * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when timer_start() is called * @global int $timeend  Seconds and Microseconds added together from when function is called * * @param int $display Use '0' or null to not echo anything and 1 to echo the total time * @param int $precision The amount of digits from the right of the decimal to display. Default is 3. * @return float The "second.microsecond" finished time calculation */function timer_stop( $display = 0, $precision = 3 ) { // if called like timer_stop(1), will echo $timetotal	global $timestart, $timeend;	$mtime = microtime();	$mtime = explode( ' ', $mtime );	$timeend = $mtime[1] + $mtime[0];	$timetotal = $timeend - $timestart;	$r = ( function_exists( 'number_format_i18n' ) ) ? number_format_i18n( $timetotal, $precision ) : number_format( $timetotal, $precision );	if ( $display )		echo $r;	return $r;}/** * Sets PHP error handling and handles WordPress debug mode. * * Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be * defined in wp-config.php. Example: <code> define( 'WP_DEBUG', true ); </code> * * WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true. * WP_DEBUG defaults to false. * * When WP_DEBUG is true, all PHP notices are reported. WordPress will also display * notices, including one when a deprecated WordPress function, function argument, * or file is used. Deprecated code may be removed from a later version. * * It is strongly recommended that plugin and theme developers use WP_DEBUG in their * development environments. * * When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed. * WP_DEBUG_DISPLAY defaults to true. Defining it as false prevents WordPress from * changing the global configuration setting. (Defining WP_DEBUG_DISPLAY as false * will never force errors to be hidden.) * * When WP_DEBUG_LOG is true, errors will be logged to wp-content/debug.log. * WP_DEBUG_LOG defaults to false. * * @access private * @since 3.0.0 */function wp_debug_mode() {	if ( WP_DEBUG ) {		if ( defined( 'E_DEPRECATED' ) )			error_reporting( E_ALL & ~E_DEPRECATED & ~E_STRICT );		else			error_reporting( E_ALL );		if ( WP_DEBUG_DISPLAY )			ini_set( 'display_errors', 1 );		if ( WP_DEBUG_LOG ) {			ini_set( 'log_errors', 1 );			ini_set( 'error_log', WP_CONTENT_DIR . '/debug.log' );		}	} else {		if ( defined( 'E_RECOVERABLE_ERROR' ) )			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );		else			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING );	}}/** * Sets the location of the language directory. * * To set directory manually, define <code>WP_LANG_DIR</code> in wp-config.php. * * First looks for language folder in WP_CONTENT_DIR and uses that folder if it * exists. Or it uses the "languages" folder in WPINC. * * The WP_LANG_DIR constant was introduced in 2.1.0. * * @access private * @since 3.0.0 */function wp_set_lang_dir() {	if ( !defined( 'WP_LANG_DIR' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/languages' ) && @is_dir( WP_CONTENT_DIR . '/languages' ) ) {			define( 'WP_LANG_DIR', WP_CONTENT_DIR . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old static relative path maintained for limited backwards compatibility - won't work in some cases				define( 'LANGDIR', 'wp-content/languages' );			}		} else {			define( 'WP_LANG_DIR', ABSPATH . WPINC . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old relative path maintained for backwards compatibility				define( 'LANGDIR', WPINC . '/languages' );			}		}	}}/** * Sets the database table prefix and the format specifiers for database table columns. * * Columns not listed here default to %s. * * @see wpdb::$field_types Since 2.8.0 * @see wpdb::prepare() * @see wpdb::insert() * @see wpdb::update() * @see wpdb::set_prefix() * * @access private * @since 3.0.0 */function wp_set_wpdb_vars() {	global $wpdb, $table_prefix;	if ( !empty( $wpdb->error ) )		dead_db();	$wpdb->field_types = array( 'post_author' => '%d', 'post_parent' => '%d', 'menu_order' => '%d', 'term_id' => '%d', 'term_group' => '%d', 'term_taxonomy_id' => '%d',		'parent' => '%d', 'count' => '%d','object_id' => '%d', 'term_order' => '%d', 'ID' => '%d', 'commment_ID' => '%d', 'comment_post_ID' => '%d', 'comment_parent' => '%d',		'user_id' => '%d', 'link_id' => '%d', 'link_owner' => '%d', 'link_rating' => '%d', 'option_id' => '%d', 'blog_id' => '%d', 'meta_id' => '%d', 'post_id' => '%d',		'user_status' => '%d', 'umeta_id' => '%d', 'comment_karma' => '%d', 'comment_count' => '%d',		// multisite:		'active' => '%d', 'cat_id' => '%d', 'deleted' => '%d', 'lang_id' => '%d', 'mature' => '%d', 'public' => '%d', 'site_id' => '%d', 'spam' => '%d',	);	$prefix = $wpdb->set_prefix( $table_prefix );	if ( is_wp_error( $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: <code>$table_prefix</code> in <code>wp-config.php</code> can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );}/** * Starts the WordPress object cache. * * If an object-cache.php file exists in the wp-content directory, * it uses that drop-in as an external object cache. * * @access private * @since 3.0.0 */function wp_start_object_cache() {	global $_wp_using_ext_object_cache;	$first_init = false; 	if ( ! function_exists( 'wp_cache_init' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {			require_once ( WP_CONTENT_DIR . '/object-cache.php' );			$_wp_using_ext_object_cache = true;		} else {			require_once ( ABSPATH . WPINC . '/cache.php' );			$_wp_using_ext_object_cache = false;		}		$first_init = true;	} else if ( !$_wp_using_ext_object_cache && file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {		// Sometimes advanced-cache.php can load object-cache.php before it is loaded here.		// This breaks the function_exists check above and can result in $_wp_using_ext_object_cache		// being set incorrectly.  Double check if an external cache exists.		$_wp_using_ext_object_cache = true;	}	// If cache supports reset, reset instead of init if already initialized.	// Reset signals to the cache that global IDs have changed and it may need to update keys	// and cleanup caches.	if ( !$first_init && function_exists('wp_cache_reset') )		wp_cache_reset();	else		wp_cache_init();	if ( function_exists( 'wp_cache_add_global_groups' ) ) {		wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-transient', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'global-posts' ) );		wp_cache_add_non_persistent_groups( array( 'comment', 'counts', 'plugins' ) );	}}/** * Redirects to the installer if WordPress is not installed. * * Dies with an error message when multisite is enabled. * * @access private * @since 3.0.0 */function wp_not_installed() {	if ( is_multisite() ) {		if ( ! is_blog_installed() && ! defined( 'WP_INSTALLING' ) )			wp_die( __( 'The site you have requested is not installed properly. Please contact the system administrator.' ) );	} elseif ( ! is_blog_installed() && false === strpos( $_SERVER['PHP_SELF'], 'install.php' ) && !defined( 'WP_INSTALLING' ) ) {		if ( defined( 'WP_SITEURL' ) )			$link = WP_SITEURL . '/wp-admin/install.php';		elseif ( false !== strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) )			$link = preg_replace( '|/wp-admin/?.*?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		else			$link = preg_replace( '|/[^/]+?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		require( ABSPATH . WPINC . '/kses.php' );		require( ABSPATH . WPINC . '/pluggable.php' );		require( ABSPATH . WPINC . '/formatting.php' );		wp_redirect( $link );		die();	}}/** * Returns array of must-use plugin files to be included in global scope. * * The default directory is wp-content/mu-plugins. To change the default directory * manually, define <code>WPMU_PLUGIN_DIR</code> and <code>WPMU_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_mu_plugins() {	$mu_plugins = array();	if ( !is_dir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	if ( ! $dh = opendir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	while ( ( $plugin = readdir( $dh ) ) !== false ) {		if ( substr( $plugin, -4 ) == '.php' )			$mu_plugins[] = WPMU_PLUGIN_DIR . '/' . $plugin;	}	closedir( $dh );	sort( $mu_plugins );	return $mu_plugins;}/** * Returns array of plugin files to be included in global scope. * * The default directory is wp-content/plugins. To change the default directory * manually, define <code>WP_PLUGIN_DIR</code> and <code>WP_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_active_and_valid_plugins() {	$plugins = array();	$active_plugins = (array) get_option( 'active_plugins', array() );	// Get active network plugins	if ( is_multisite() ) {		$active_sitewide_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		if ( !empty($active_sitewide_plugins) ) {			$active_plugins = array_merge( $active_plugins, array_keys( $active_sitewide_plugins ) );			sort( $active_plugins );		}	}	// Check for hacks file if the option is enabled	if ( get_option( 'hack_file' ) && file_exists( ABSPATH . 'my-hacks.php' ) ) {		_deprecated_file( 'my-hacks.php', '1.5' );		array_unshift( $plugins, ABSPATH . 'my-hacks.php' );	}	if ( empty( $active_plugins ) || defined( 'WP_INSTALLING' ) )		return $plugins;	foreach ( $active_plugins as $plugin ) {		if ( ! validate_file( $plugin ) // $plugin must validate as file			&& '.php' == substr( $plugin, -4 ) // $plugin must end with '.php'			&& file_exists( WP_PLUGIN_DIR . '/' . $plugin ) // $plugin must exist			)		$plugins[] = WP_PLUGIN_DIR . '/' . $plugin;	}	return $plugins;}/** * Sets internal encoding using mb_internal_encoding(). * * In most cases the default internal encoding is latin1, which is of no use, * since we want to use the mb_ functions for utf-8 strings. * * @access private * @since 3.0.0 */function wp_set_internal_encoding() {	if ( function_exists( 'mb_internal_encoding' ) ) {		if ( !@mb_internal_encoding( get_option( 'blog_charset' ) ) )			mb_internal_encoding( 'UTF-8' );	}}/** * Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER. * * Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE, * or $_ENV are needed, use those superglobals directly. * * @access private * @since 3.0.0 */function wp_magic_quotes() {	// If already slashed, strip.	if ( get_magic_quotes_gpc() ) {		$_GET    = stripslashes_deep( $_GET    );		$_POST   = stripslashes_deep( $_POST   );		$_COOKIE = stripslashes_deep( $_COOKIE );	}	// Escape with wpdb.	$_GET    = add_magic_quotes( $_GET    );	$_POST   = add_magic_quotes( $_POST   );	$_COOKIE = add_magic_quotes( $_COOKIE );	$_SERVER = add_magic_quotes( $_SERVER );	// Force REQUEST to be GET + POST.	$_REQUEST = array_merge( $_GET, $_POST );}/** * Runs just before PHP shuts down execution. * * @access private * @since 1.2.0 */function shutdown_action_hook() {	do_action( 'shutdown' );	wp_cache_close();}/** * Copy an object. * * Returns a cloned copy of an object. * * @since 2.7.0 * * @param object $object The object to clone * @return object The cloned object */function wp_clone( $object ) {	static $can_clone;	if ( !isset( $can_clone ) )		$can_clone = version_compare( phpversion(), '5.0', '>=' );	return $can_clone ? clone( $object ) : $object;}/** * Whether the current request is in WordPress admin Panel * * Does not inform on whether the user is an admin! Use capability checks to * tell if the user should be accessing a section or not. * * @since 1.5.1 * * @return bool True if inside WordPress administration pages. */function is_admin() {	if ( defined( 'WP_ADMIN' ) )		return WP_ADMIN;	return false;}/** * Whether Multisite support is enabled * * @since 3.0.0 * * @return bool True if multisite is enabled, false otherwise. */function is_multisite() {	if ( defined( 'MULTISITE' ) )		return MULTISITE;	if ( defined( 'VHOST' ) || defined( 'SUNRISE' ) )		return true;	return false;}?>
<?php/** * Plugins administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( is_multisite() ) {	$menu_perms = get_site_option( 'menu_items', array() );	if ( empty($menu_perms['plugins']) && ! is_super_admin() )		wp_die( __( 'Cheatin&#8217; uh?' ) );	else if ( $menu_perms['plugins'] != 1 && is_super_admin() )		add_action( 'admin_notices', '_admin_notice_multisite_activate_plugins_page' );}if ( ! current_user_can( 'activate_plugins' ) )	wp_die( __( 'You do not have sufficient permissions to manage plugins for this site.' ) );if ( isset($_POST['clear-recent-list']) )	$action = 'clear-recent-list';elseif ( !empty($_REQUEST['action']) )	$action = $_REQUEST['action'];elseif ( !empty($_REQUEST['action2']) )	$action = $_REQUEST['action2'];else	$action = false;$plugin = isset($_REQUEST['plugin']) ? $_REQUEST['plugin'] : '';$default_status = get_user_option('plugins_last_view');if ( empty($default_status) )	$default_status = 'all';$status = isset($_REQUEST['plugin_status']) ? $_REQUEST['plugin_status'] : $default_status;if ( !in_array($status, array('all', 'active', 'inactive', 'recent', 'upgrade', 'network', 'mustuse', 'dropins', 'search')) )	$status = 'all';if ( $status != $default_status && 'search' != $status )	update_user_meta($current_user->ID, 'plugins_last_view', $status);$page = isset($_REQUEST['paged']) ? $_REQUEST['paged'] : 1;//Clean up request URI from temporary args for screen options/paging uri's to work as expected.$_SERVER['REQUEST_URI'] = remove_query_arg(array('error', 'deleted', 'activate', 'activate-multi', 'deactivate', 'deactivate-multi', '_error_nonce'), $_SERVER['REQUEST_URI']);if ( !empty($action) ) {	$network_wide = false;	if ( ( isset( $_GET['networkwide'] ) || 'network-activate-selected' == $action ) && is_multisite() && current_user_can( 'manage_network_plugins' ) )		$network_wide = true;	switch ( $action ) {		case 'activate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('activate-plugin_' . $plugin);			$result = activate_plugin($plugin, 'plugins.php?error=true&plugin=' . $plugin, $network_wide);			if ( is_wp_error( $result ) ) {				if ( 'unexpected_output' == $result->get_error_code() ) {					$redirect = 'plugins.php?error=true&charsout=' . strlen($result->get_error_data()) . '&plugin=' . $plugin;					wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect));					exit;				} else {					wp_die($result);				}			}			$recent = (array)get_option('recently_activated');			if ( isset($recent[ $plugin ]) ) {				unset($recent[ $plugin ]);				update_option('recently_activated', $recent);			}			if ( isset($_GET['from']) && 'import' == $_GET['from'] ) {				wp_redirect("import.php?import=" . str_replace('-importer', '', dirname($plugin)) ); // overrides the ?error=true one above and redirects to the Imports page, striping the -importer suffix			} else {				wp_redirect("plugins.php?activate=true&plugin_status=$status&paged=$page"); // overrides the ?error=true one above			}			exit;			break;		case 'activate-selected':		case 'network-activate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); // Only activate plugins which are not already active.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			activate_plugins($plugins, 'plugins.php?error=true', $network_wide);			$recent = (array)get_option('recently_activated');			foreach ( $plugins as $plugin => $time)				if ( isset($recent[ $plugin ]) )					unset($recent[ $plugin ]);			update_option('recently_activated', $recent);			wp_redirect("plugins.php?activate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'update-selected' :			check_admin_referer( 'bulk-manage-plugins' );			if ( isset( $_GET['plugins'] ) )				$plugins = explode( ',', $_GET['plugins'] );			elseif ( isset( $_POST['checked'] ) )				$plugins = (array) $_POST['checked'];			else				$plugins = array();			$title = __( 'Upgrade Plugins' );			$parent_file = 'plugins.php';			require_once( './admin-header.php' );			echo '<div class="wrap">';			screen_icon();			echo '<h2>' . esc_html( $title ) . '</h2>';			$url = 'update.php?action=update-selected&amp;plugins=' . urlencode( join(',', $plugins) );			$url = wp_nonce_url($url, 'bulk-update-plugins');			echo "<iframe src='$url' style='width: 100%; height:100%; min-height:850px;'></iframe>";			echo '</div>';			require_once( './admin-footer.php' );			exit;			break;		case 'error_scrape':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('plugin-activation-error_' . $plugin);			$valid = validate_plugin($plugin);			if ( is_wp_error($valid) )				wp_die($valid);			if ( ! WP_DEBUG ) {				if ( defined('E_RECOVERABLE_ERROR') )					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);				else					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			}			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			// Go back to "sandbox" scope so we get the same errors as before			function plugin_sandbox_scrape( $plugin ) {				include( WP_PLUGIN_DIR . '/' . $plugin );			}			plugin_sandbox_scrape( $plugin );			do_action('activate_' . $plugin);			exit;			break;		case 'deactivate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('deactivate-plugin_' . $plugin);			deactivate_plugins($plugin);			update_option('recently_activated', array($plugin => time()) + (array)get_option('recently_activated'));			if (headers_sent())				echo "<meta http-equiv='refresh' content='" . esc_attr( "0;url=plugins.php?deactivate=true&plugin_status=$status&paged=$page" ) . "' />";			else				wp_redirect("plugins.php?deactivate=true&plugin_status=$status&paged=$page");			exit;			break;		case 'deactivate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, 'is_plugin_active'); //Do not deactivate plugins which are already deactivated.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			deactivate_plugins($plugins);			$deactivated = array();			foreach ( $plugins as $plugin )				$deactivated[ $plugin ] = time();			update_option('recently_activated', $deactivated + (array)get_option('recently_activated'));			wp_redirect("plugins.php?deactivate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'delete-selected':			if ( ! current_user_can('delete_plugins') )				wp_die(__('You do not have sufficient permissions to delete plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			//$_POST = from the plugin form; $_GET = from the FTP details screen.			$plugins = isset( $_REQUEST['checked'] ) ? (array) $_REQUEST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); //Do not allow to delete Activated plugins.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			include(ABSPATH . 'wp-admin/update.php');			$parent_file = 'plugins.php';			if ( ! isset($_REQUEST['verify-delete']) ) {				wp_enqueue_script('jquery');				require_once('./admin-header.php');				?>			<div class="wrap">				<?php					$files_to_delete = $plugin_info = array();					foreach ( (array) $plugins as $plugin ) {						if ( '.' == dirname($plugin) ) {							$files_to_delete[] = WP_PLUGIN_DIR . '/' . $plugin;							if( $data = get_plugin_data(WP_PLUGIN_DIR . '/' . $plugin) ) {								$plugin_info[ $plugin ] = $data;								$plugin_info[ $plugin ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );							}						} else {							// Locate all the files in that folder							$files = list_files( WP_PLUGIN_DIR . '/' . dirname($plugin) );							if ( $files ) {								$files_to_delete = array_merge($files_to_delete, $files);							}							// Get plugins list from that folder							if ( $folder_plugins = get_plugins( '/' . dirname($plugin)) ) {								foreach( $folder_plugins as $plugin_file => $data ) {									$plugin_info[ $plugin_file ] = $data;									$plugin_info[ $plugin_file ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );								}							}						}					}					screen_icon();					$plugins_to_delete = count( $plugin_info );					echo '<h2>' . _n( 'Delete Plugin', 'Delete Plugins', $plugins_to_delete ) . '</h2>';				?>				<p><?php echo _n( 'You are about to remove the following plugin:', 'You are about to remove the following plugins:', $plugins_to_delete ); ?></p>					<ul class="ul-disc">						<?php						$data_to_delete = false;						foreach ( $plugin_info as $plugin ) {							if ( $plugin['is_uninstallable'] ) {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __( '<strong>%1$s</strong> by <em>%2$s</em> (will also <strong>delete its data</strong>)' ), $plugin['Name'], $plugin['Author'] ), '</li>';								$data_to_delete = true;							} else {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __('<strong>%1$s</strong> by <em>%2$s</em>' ), $plugin['Name'], $plugin['Author'] ), '</li>';							}						}						?>					</ul>				<p><?php				if ( $data_to_delete )					_e('Are you sure you wish to delete these files and data?');				else					_e('Are you sure you wish to delete these files?');				?></p>				<form method="post" action="<?php echo esc_url($_SERVER['REQUEST_URI']); ?>" style="display:inline;">					<input type="hidden" name="verify-delete" value="1" />					<input type="hidden" name="action" value="delete-selected" />					<?php						foreach ( (array)$plugins as $plugin )							echo '<input type="hidden" name="checked[]" value="' . esc_attr($plugin) . '" />';					?>					<?php wp_nonce_field('bulk-manage-plugins') ?>					<input type="submit" name="submit" value="<?php $data_to_delete ? esc_attr_e('Yes, Delete these files and data') : esc_attr_e('Yes, Delete these files') ?>" class="button" />				</form>				<form method="post" action="<?php echo esc_url(wp_get_referer()); ?>" style="display:inline;">					<input type="submit" name="submit" value="<?php esc_attr_e('No, Return me to the plugin list') ?>" class="button" />				</form>				<p><a href="#" onclick="jQuery('#files-list').toggle(); return false;"><?php _e('Click to view entire list of files which will be deleted'); ?></a></p>				<div id="files-list" style="display:none;">					<ul class="code">					<?php						foreach ( (array)$files_to_delete as $file )							echo '<li>' . str_replace(WP_PLUGIN_DIR, '', $file) . '</li>';					?>					</ul>				</div>			</div>				<?php				require_once('./admin-footer.php');				exit;			} //Endif verify-delete			$delete_result = delete_plugins($plugins);			set_transient('plugins_delete_result_'.$user_ID, $delete_result); //Store the result in a cache rather than a URL param due to object type & length			wp_redirect("plugins.php?deleted=true&plugin_status=$status&paged=$page");			exit;			break;		case 'clear-recent-list':			update_option('recently_activated', array());			break;	}}wp_enqueue_script('plugin-install');add_thickbox();add_contextual_help($current_screen,	'<p>' . __('Plugins extend and expand the functionality of WordPress. Once a plugin is installed, you may activate it or deactivate it here.') . '</p>' .	'<p>' . sprintf(__('You can find additional plugins for your site by using the <a href="%1$s">Plugin Browser/Installer</a> functionality or by browsing the <a href="%2$s" target="_blank">WordPress Plugin Directory</a> directly and installing new plugins manually. To manually install a plugin you generally just need to upload the plugin file into your <code>/wp-content/plugins</code> directory. Once a plugin has been installed, you can activate it here.'), 'plugin-install.php', 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('Most of the time, plugins play nicely with the core of WordPress and with other plugins. Sometimes, though, a plugin&#8217;s code will get in the way of another plugin, causing compatibility issues. If your site starts doing strange things, this may be the problem. Try deactivating all your plugins and re-activating them in various combinations until you isolate which one(s) caused the issue.') . '</p>' .	'<p>' . sprintf( __('If something goes wrong with a plugin and you can&#8217;t use WordPress, delete or rename that file in the <code>%s</code> directory and it will be automatically deactivated.'), WP_PLUGIN_DIR) . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Managing_Plugins#Plugin_Management" target="_blank">Documentation on Managing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$title = __('Plugins');require_once('./admin-header.php');$invalid = validate_active_plugins();if ( !empty($invalid) )	foreach ( $invalid as $plugin_file => $error )		echo '<div id="message" class="error"><p>' . sprintf(__('The plugin <code>%s</code> has been <strong>deactivated</strong> due to an error: %s'), esc_html($plugin_file), $error->get_error_message()) . '</p></div>';?><?php if ( isset($_GET['error']) ) :	if ( isset($_GET['charsout']) )		$errmsg = sprintf(__('The plugin generated %d characters of <strong>unexpected output</strong> during activation.  If you notice &#8220;headers already sent&#8221; messages, problems with syndication feeds or other issues, try deactivating or removing this plugin.'), $_GET['charsout']);	else		$errmsg = __('Plugin could not be activated because it triggered a <strong>fatal error</strong>.');	?>	<div id="message" class="updated"><p><?php echo $errmsg; ?></p>	<?php		if ( !isset($_GET['charsout']) && wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $plugin) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php echo admin_url('plugins.php?action=error_scrape&amp;plugin=' . esc_attr($plugin) . '&amp;_wpnonce=' . esc_attr($_GET['_error_nonce'])); ?>"></iframe>	<?php		}	?>	</div><?php elseif ( isset($_GET['deleted']) ) :		$delete_result = get_transient('plugins_delete_result_'.$user_ID);		delete_transient('plugins_delete_result'); //Delete it once we're done.		if ( is_wp_error($delete_result) ) : ?>		<div id="message" class="updated"><p><?php printf( __('Plugin could not be deleted due to an error: %s'), $delete_result->get_error_message() ); ?></p></div>		<?php else : ?>		<div id="message" class="updated"><p><?php _e('The selected plugins have been <strong>deleted</strong>.'); ?></p></div>		<?php endif; ?><?php elseif ( isset($_GET['activate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>activated</strong>.') ?></p></div><?php elseif (isset($_GET['activate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>activated</strong>.'); ?></p></div><?php elseif ( isset($_GET['deactivate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>deactivated</strong>.') ?></p></div><?php elseif (isset($_GET['deactivate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>deactivated</strong>.'); ?></p></div><?php elseif ( 'update-selected' == $action ) : ?>	<div id="message" class="updated"><p><?php _e('No out of date plugins were selected.'); ?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can('install_plugins') ) { ?> <a href="plugin-install.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'plugin'); ?></a><?php } ?></h2><?php$all_plugins = apply_filters( 'all_plugins', get_plugins() );$search_plugins = array();$active_plugins = array();$inactive_plugins = array();$recent_plugins = array();$recently_activated = get_option('recently_activated', array());$upgrade_plugins = array();$network_plugins = array();$mustuse_plugins = $dropins_plugins = array();if ( ! is_multisite() || current_user_can('manage_network_plugins') ) {	if ( apply_filters( 'show_advanced_plugins', true, 'mustuse' ) )		$mustuse_plugins = get_mu_plugins();	if ( apply_filters( 'show_advanced_plugins', true, 'dropins' ) )		$dropins_plugins = get_dropins();}set_transient( 'plugin_slugs', array_keys($all_plugins), 86400 );// Clean out any plugins which were deactivated over a week ago.foreach ( $recently_activated as $key => $time )	if ( $time + (7*24*60*60) < time() ) //1 week		unset($recently_activated[ $key ]);if ( $recently_activated != get_option('recently_activated') ) //If array changed, update it.	update_option('recently_activated', $recently_activated);$current = get_site_transient( 'update_plugins' );foreach ( array( 'all_plugins', 'mustuse_plugins', 'dropins_plugins' ) as $plugin_array_name) {	foreach ( (array) $$plugin_array_name as $plugin_file => $plugin_data ) {		// Translate, Apply Markup, Sanitize HTML		$plugin_data = _get_plugin_data_markup_translate($plugin_file, $plugin_data, false, true);		${$plugin_array_name}[ $plugin_file ] = $plugin_data;	}}unset( $plugin_array_name );foreach ( (array) $all_plugins as $plugin_file => $plugin_data) {	// Filter into individual sections	if ( is_multisite() && is_network_only_plugin( $plugin_file ) && !current_user_can( 'manage_network_plugins' ) ) {		unset( $all_plugins[ $plugin_file ] );		continue;	} elseif ( is_plugin_active_for_network($plugin_file) ) {		$network_plugins[ $plugin_file ] = $plugin_data;	} elseif ( is_plugin_active($plugin_file) ) {		$active_plugins[ $plugin_file ] = $plugin_data;	} else {		if ( isset( $recently_activated[ $plugin_file ] ) ) // Was the plugin recently activated?			$recent_plugins[ $plugin_file ] = $plugin_data;		$inactive_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $current->response[ $plugin_file ] ) )		$upgrade_plugins[ $plugin_file ] = $plugin_data;}if ( !current_user_can('update_plugins') )	$upgrade_plugins = array();$total_all_plugins = count($all_plugins);$total_inactive_plugins = count($inactive_plugins);$total_active_plugins = count($active_plugins);$total_recent_plugins = count($recent_plugins);$total_upgrade_plugins = count($upgrade_plugins);$total_network_plugins = count($network_plugins);$total_mustuse_plugins = count($mustuse_plugins);$total_dropins_plugins = count($dropins_plugins);// Searching.if ( !empty($_GET['s']) ) {	function _search_plugins_filter_callback($plugin) {		static $term;		if ( is_null($term) )			$term = stripslashes($_GET['s']);		if ( 	stripos($plugin['Name'], $term) !== false ||				stripos($plugin['Description'], $term) !== false ||				stripos($plugin['Author'], $term) !== false ||				stripos($plugin['PluginURI'], $term) !== false ||				stripos($plugin['AuthorURI'], $term) !== false ||				stripos($plugin['Version'], $term) !== false )			return true;		else			return false;	}	$status = 'search';	$search_plugins = array_filter($all_plugins, '_search_plugins_filter_callback');	$total_search_plugins = count($search_plugins);}$plugin_array_name = "${status}_plugins";if ( empty($$plugin_array_name) && !in_array($status, array('all', 'search')) ) {	$status = 'all';	$plugin_array_name = "${status}_plugins";}$plugins = &$$plugin_array_name;// Paging.$total_this_page = "total_{$status}_plugins";$total_this_page = $$total_this_page;$plugins_per_page = (int) get_user_option( 'plugins_per_page' );if ( empty( $plugins_per_page ) || $plugins_per_page < 1 )	$plugins_per_page = 999;$plugins_per_page = apply_filters( 'plugins_per_page', $plugins_per_page );$start = ($page - 1) * $plugins_per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($total_this_page / $plugins_per_page),	'current' => $page));$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $plugins_per_page, $total_this_page ) ),	'<span class="total-type-count">' . number_format_i18n( $total_this_page ) . '</span>',	$page_links);/** * @ignore * * @param array $plugins * @param string $context */function print_plugins_table($plugins, $context = '') {	global $page;	$checkbox = ! in_array( $context, array( 'mustuse', 'dropins' ) ) ? '<input type="checkbox" />' : '';?><table class="widefat" cellspacing="0" id="<?php echo $context ?>-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	if ( empty($plugins) ) {		echo '<tr>			<td colspan="3">' . __('No plugins to show') . '</td>		</tr>';	}	foreach ( (array)$plugins as $plugin_file => $plugin_data) {		// preorder		$actions = array(			'network_deactivate' => '', 'deactivate' => '',			'network_only' => '', 'activate' => '',			'network_activate' => '',			'edit' => '',			'delete' => '',		);		if ( 'mustuse' == $context ) {			$is_active = true;		} elseif ( 'dropins' == $context ) {			$dropins = _get_dropins();			$plugin_name = $plugin_file;			if ( $plugin_file != $plugin_data['Name'] )				$plugin_name .= '<br/>' . $plugin_data['Name'];			if ( true === ( $dropins[ $plugin_file ][1] ) ) { // Doesn't require a constant				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} elseif ( constant( $dropins[ $plugin_file ][1] ) ) { // Constant is true				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} else {				$is_active = false;				$description = '<strong>' . $dropins[ $plugin_file ][0] . ' <span class="attention">' . __('Inactive:') . '</span></strong> ' . sprintf( __( 'Requires <code>%s</code> in <code>wp-config.php</code>.' ), "define('" . $dropins[ $plugin_file ][1] . "', true);" ) . '</p>';			}			$description .= '<p>' . $plugin_data['Description'] . '</p>';		} else {			$is_active_for_network = is_plugin_active_for_network($plugin_file);			$is_active = $is_active_for_network || is_plugin_active( $plugin_file );			if ( $is_active_for_network && !is_super_admin() )				continue;			if ( $is_active ) {				if ( $is_active_for_network ) {					if ( is_super_admin() )						$actions['network_deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Network Deactivate') . '</a>';				} else {					$actions['deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Deactivate') . '</a>';				}			} else {				if ( is_multisite() && is_network_only_plugin( $plugin_file ) )					$actions['network_only'] = '<span title="' . __('This plugin can only be activated for all sites in a network') . '">' . __('Network Only') . '</span>';				else					$actions['activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin') . '" class="edit">' . __('Activate') . '</a>';				if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )					$actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" class="edit">' . __('Network Activate') . '</a>';				if ( current_user_can('delete_plugins') )					$actions['delete'] = '<a href="' . wp_nonce_url('plugins.php?action=delete-selected&amp;checked[]=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'bulk-manage-plugins') . '" title="' . __('Delete this plugin') . '" class="delete">' . __('Delete') . '</a>';			} // end if $is_active			if ( current_user_can('edit_plugins') && is_writable(WP_PLUGIN_DIR . '/' . $plugin_file) )				$actions['edit'] = '<a href="plugin-editor.php?file=' . $plugin_file . '" title="' . __('Open this file in the Plugin Editor') . '" class="edit">' . __('Edit') . '</a>';		} // end if $context		$actions = apply_filters( 'plugin_action_links', array_filter( $actions ), $plugin_file, $plugin_data, $context );		$actions = apply_filters( "plugin_action_links_$plugin_file", $actions, $plugin_file, $plugin_data, $context );		$class = $is_active ? 'active' : 'inactive';		$checkbox = in_array( $context, array( 'mustuse', 'dropins' ) ) ? '' : "<input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' />";		if ( 'dropins' != $context ) {			$description = '<p>' . $plugin_data['Description'] . '</p>';			$plugin_name = $plugin_data['Name'];		}		echo "	<tr class='$class'>		<th scope='row' class='check-column'>$checkbox</th>		<td class='plugin-title'><strong>$plugin_name</strong></td>		<td class='desc'>$description</td>	</tr>	<tr class='$class second'>		<td></td>		<td class='plugin-title'>";		echo '<div class="row-actions-visible">';		foreach ( $actions as $action => $link ) {			$sep = end($actions) == $link ? '' : ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo "</div></td>		<td class='desc'>";		$plugin_meta = array();		if ( !empty($plugin_data['Version']) )			$plugin_meta[] = sprintf(__('Version %s'), $plugin_data['Version']);		if ( !empty($plugin_data['Author']) ) {			$author = $plugin_data['Author'];			if ( !empty($plugin_data['AuthorURI']) )				$author = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';			$plugin_meta[] = sprintf( __('By %s'), $author );		}		if ( ! empty($plugin_data['PluginURI']) )			$plugin_meta[] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin site' ) . '">' . __('Visit plugin site') . '</a>';		$plugin_meta = apply_filters('plugin_row_meta', $plugin_meta, $plugin_file, $plugin_data, $context);		echo implode(' | ', $plugin_meta);		echo "</td>	</tr>\n";		do_action( 'after_plugin_row', $plugin_file, $plugin_data, $context );		do_action( "after_plugin_row_$plugin_file", $plugin_file, $plugin_data, $context );	}?>	</tbody></table><?php} //End print_plugins_table()/** * @ignore * * @param string $context */function print_plugin_actions($context, $field_name = 'action' ) {	if ( in_array( $context, array( 'mustuse', 'dropins' ) ) )		return;?>	<div class="alignleft actions">		<select name="<?php echo $field_name; ?>">			<option value="" selected="selected"><?php _e('Bulk Actions'); ?></option>	<?php if ( 'active' != $context ) : ?>			<option value="activate-selected"><?php _e('Activate'); ?></option>	<?php endif; ?>	<?php if ( is_multisite() && 'network' != $context ) : ?>			<option value="network-activate-selected"><?php _e('Network Activate'); ?></option>	<?php endif; ?>	<?php if ( 'inactive' != $context && 'recent' != $context ) : ?>			<option value="deactivate-selected"><?php _e('Deactivate'); ?></option>	<?php endif; ?>	<?php if ( current_user_can( 'update_plugins' ) ) : ?>			<option value="update-selected"><?php _e( 'Upgrade' ); ?></option>	<?php endif; ?>	<?php if ( current_user_can('delete_plugins') && ( 'active' != $context ) ) : ?>			<option value="delete-selected"><?php _e('Delete'); ?></option>	<?php endif; ?>		</select>		<input type="submit" name="doaction_active" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary action" />	<?php if ( 'recent' == $context ) : ?>		<input type="submit" name="clear-recent-list" value="<?php esc_attr_e('Clear List') ?>" class="button-secondary" />	<?php endif; ?>	</div><?php}?><form method="get" action=""><p class="search-box">	<label class="screen-reader-text" for="plugin-search-input"><?php _e( 'Search Plugins' ); ?>:</label>	<input type="text" id="plugin-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Installed Plugins' ); ?>" class="button" /></p></form><?php do_action( 'pre_current_active_plugins', $all_plugins ) ?><form method="post" action="<?php echo admin_url('plugins.php') ?>"><?php wp_nonce_field('bulk-manage-plugins') ?><input type="hidden" name="plugin_status" value="<?php echo esc_attr($status) ?>" /><input type="hidden" name="paged" value="<?php echo esc_attr($page) ?>" /><ul class="subsubsub"><?php$status_links = array();$class = ( 'all' == $status ) ? ' class="current"' : '';$status_links[] = "<li><a href='plugins.php?plugin_status=all' $class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_all_plugins, 'plugins' ), number_format_i18n( $total_all_plugins ) ) . '</a>';if ( ! empty($active_plugins) ) {	$class = ( 'active' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=active' $class>" . sprintf( _n( 'Active <span class="count">(%s)</span>', 'Active <span class="count">(%s)</span>', $total_active_plugins ), number_format_i18n( $total_active_plugins ) ) . '</a>';}if ( ! empty($recent_plugins) ) {	$class = ( 'recent' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=recent' $class>" . sprintf( _n( 'Recently Active <span class="count">(%s)</span>', 'Recently Active <span class="count">(%s)</span>', $total_recent_plugins ), number_format_i18n( $total_recent_plugins ) ) . '</a>';}if ( ! empty($inactive_plugins) ) {	$class = ( 'inactive' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=inactive' $class>" . sprintf( _n( 'Inactive <span class="count">(%s)</span>', 'Inactive <span class="count">(%s)</span>', $total_inactive_plugins ), number_format_i18n( $total_inactive_plugins ) ) . '</a>';}if ( ! empty($network_plugins) ) {	$class = ( 'network' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=network' $class>" . sprintf( _n( 'Network <span class="count">(%s)</span>', 'Network <span class="count">(%s)</span>', $total_network_plugins ), number_format_i18n( $total_network_plugins ) ) . '</a>';}if ( ! empty($mustuse_plugins) ) {	$class = ( 'mustuse' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=mustuse' $class>" . sprintf( _n( 'Must-Use <span class="count">(%s)</span>', 'Must-Use <span class="count">(%s)</span>', $total_mustuse_plugins ), number_format_i18n( $total_mustuse_plugins ) ) . '</a>';}if ( ! empty($dropins_plugins) ) {	$class = ( 'dropins' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=dropins' $class>" . sprintf( _n( 'Drop-ins <span class="count">(%s)</span>', 'Drop-ins <span class="count">(%s)</span>', $total_dropins_plugins ), number_format_i18n( $total_dropins_plugins ) ) . '</a>';}if ( ! empty($upgrade_plugins) ) {	$class = ( 'upgrade' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=upgrade' $class>" . sprintf( _n( 'Upgrade Available <span class="count">(%s)</span>', 'Upgrade Available <span class="count">(%s)</span>', $total_upgrade_plugins ), number_format_i18n( $total_upgrade_plugins ) ) . '</a>';}if ( ! empty($search_plugins) ) {	$class = ( 'search' == $status ) ? ' class="current"' : '';	$term = isset($_REQUEST['s']) ? urlencode(stripslashes($_REQUEST['s'])) : '';	$status_links[] = "<li><a href='plugins.php?s=$term' $class>" . sprintf( _n( 'Search Results <span class="count">(%s)</span>', 'Search Results <span class="count">(%s)</span>', $total_search_plugins ), number_format_i18n( $total_search_plugins ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );?></ul><?phpif ( 'mustuse' == $status )	echo '<div class="clear"><p>' . __( 'Files in the <code>/wp-content/mu-plugins</code> directory are executed automatically.' ) . '</p>';elseif ( 'dropins' == $status )	echo '<div class="clear"><p>' . __( 'Drop-ins are advanced plugins in the <code>/wp-content</code> directory that replace WordPress functionality when present.' ) . '</p>';if ( !empty( $plugins ) && ( ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) ) :?><div class="tablenav"><?phpif ( $page_links )	echo '<div class="tablenav-pages">', $page_links_text, '</div>';print_plugin_actions($status);?></div><div class="clear"></div><?phpendif;if ( $total_this_page > $plugins_per_page )	$plugins = array_slice($plugins, $start, $plugins_per_page);print_plugins_table($plugins, $status);if ( !empty( $plugins ) && ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) {?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";print_plugin_actions($status, "action2");?></div><?php } elseif ( ! empty( $all_plugins ) ) { ?><p><?php __( 'No plugins found.' ); ?></p><?php } ?></form><?php if ( empty($all_plugins) ) : ?><br class="clear" /><p><?php _e('You do not appear to have any plugins available at this time.') ?></p><?php endif; ?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Metadata API * * Functions for retrieving and manipulating metadata of various WordPress object types.  Metadata * for an object is a represented by a simple key-value pair.  Objects may contain multiple * metadata entries that share the same key and differ only in their value. * * @package WordPress * @subpackage Meta * @since 2.9.0 *//** * Add metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'added_{$meta_type}_meta' with meta_id of added metadata entry, * 		object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param bool $unique Optional, default is false.  Whether the specified metadata key should be * 		unique for the object.  If true, and the object already has a value for the specified * 		metadata key, no change will be made * @return bool True on successful update, false on failure. */function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( $unique && $wpdb->get_var( $wpdb->prepare(		"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d",		$meta_key, $object_id ) ) )		return false;	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$wpdb->insert( $table, array(		$column => $object_id,		'meta_key' => $meta_key,		'meta_value' => $meta_value	) );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "added_{$meta_type}_meta", $wpdb->insert_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Update metadata for the specified object.  If no value already exists for the specified object * ID and metadata key, the metadata will be added. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'update_{$meta_type}_meta' before updating metadata with meta_id of * 		metadata entry to update, object ID, meta key, and meta value * @uses do_action() Calls 'updated_{$meta_type}_meta' after updating metadata with meta_id of * 		updated metadata entry, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param string $prev_value Optional.  If specified, only update existing metadata entries with * 		the specified value.  Otherwise, update all entries. * @return bool True on successful update, false on failure. */function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( ! $meta_id = $wpdb->get_var( $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d", $meta_key, $object_id ) ) )		return add_metadata($meta_type, $object_id, $meta_key, $meta_value);	// Compare existing value to new value if no prev value given and the key exists only once.	if ( empty($prev_value) ) {		$old_value = get_metadata($meta_type, $object_id, $meta_key);		if ( count($old_value) == 1 ) {			if ( $old_value[0] == $meta_value )				return false;		}	}	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$data  = compact( 'meta_value' );	$where = array( $column => $object_id, 'meta_key' => $meta_key );	if ( !empty( $prev_value ) ) {		$prev_value = maybe_serialize($prev_value);		$where['meta_value'] = $prev_value;	}	do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	$wpdb->update( $table, $data, $where );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Delete metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'deleted_{$meta_type}_meta' after deleting with meta_id of * 		deleted metadata entries, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Optional. Metadata value.  If specified, only delete metadata entries * 		with this value.  Otherwise, delete all entries with the specified meta_key. * @param bool $delete_all Optional, default is false.  If true, delete matching metadata entries * 		for all objects, ignoring the specified object_id.  Otherwise, only delete matching * 		metadata entries for the specified object_id. * @return bool True on successful delete, false on failure. */function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( (!$object_id = absint($object_id)) && !$delete_all )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$type_column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$query = $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s", $meta_key );	if ( !$delete_all )		$query .= $wpdb->prepare(" AND $type_column = %d", $object_id );	if ( $meta_value )		$query .= $wpdb->prepare(" AND meta_value = %s", $meta_value );	$meta_ids = $wpdb->get_col( $query );	if ( !count( $meta_ids ) )		return false;	$query = "DELETE FROM $table WHERE $id_column IN( " . implode( ',', $meta_ids ) . " )";	$count = $wpdb->query($query);	if ( !$count )		return false;	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "deleted_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $meta_value );	return true;}/** * Retrieve metadata for the specified object. * * @since 2.9.0 * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Optional.  Metadata key.  If not specified, retrieve all metadata for * 		the specified object. * @param bool $single Optional, default is false.  If true, return only the first value of the * 		specified meta_key.  This parameter has no effect if meta_key is not specified. * @return string|array Single metadata value, or array of values */function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {	if ( !$meta_type )		return false;	if ( !$object_id = absint($object_id) )		return false;	$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	if ( !$meta_cache ) {		update_meta_cache($meta_type, $object_id);		$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	}	if ( ! $meta_key )		return $meta_cache;	if ( isset($meta_cache[$meta_key]) ) {		if ( $single )			return maybe_unserialize( $meta_cache[$meta_key][0] );		else			return array_map('maybe_unserialize', $meta_cache[$meta_key]);	}	if ($single)		return '';	else		return array();}/** * Update the metadata cache for the specified objects. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int|array $object_ids array or comma delimited list of object IDs to update cache for * @return mixed Metadata cache for the specified objects, or false on failure. */function update_meta_cache($meta_type, $object_ids) {	if ( empty( $meta_type ) || empty( $object_ids ) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	$column = esc_sql($meta_type . '_id');	global $wpdb;	if ( !is_array($object_ids) ) {		$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);		$object_ids = explode(',', $object_ids);	}	$object_ids = array_map('intval', $object_ids);	$cache_key = $meta_type . '_meta';	$ids = array();	foreach ( $object_ids as $id ) {		if ( false === wp_cache_get($id, $cache_key) )			$ids[] = $id;	}	if ( empty( $ids ) )		return false;	// Get meta info	$id_list = join(',', $ids);	$cache = array();	$meta_list = $wpdb->get_results( $wpdb->prepare("SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list)",		$meta_type), ARRAY_A );	if ( !empty($meta_list) ) {		foreach ( $meta_list as $metarow) {			$mpid = intval($metarow[$column]);			$mkey = $metarow['meta_key'];			$mval = $metarow['meta_value'];			// Force subkeys to be array type:			if ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )				$cache[$mpid] = array();			if ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )				$cache[$mpid][$mkey] = array();			// Add a value to the current pid/key:			$cache[$mpid][$mkey][] = $mval;		}	}	foreach ( $ids as $id ) {		if ( ! isset($cache[$id]) )			$cache[$id] = array();	}	foreach ( array_keys($cache) as $object)		wp_cache_set($object, $cache[$object], $cache_key);	return $cache;}/** * Retrieve the name of the metadata table for the specified object type. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object to get metadata table for (e.g., comment, post, or user) * @return mixed Metadata table name, or false if no metadata table exists */function _get_meta_table($type) {	global $wpdb;	$table_name = $type . 'meta';	if ( empty($wpdb->$table_name) )		return false;	return $wpdb->$table_name;}?>
<?php/** * Misc WordPress Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function got_mod_rewrite() {	$got_rewrite = apache_mod_loaded('mod_rewrite', true);	return apply_filters('got_rewrite', $got_rewrite);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $filename * @param unknown_type $marker * @return array An array of strings from a file (.htaccess ) from between BEGIN and END markers. */function extract_from_markers( $filename, $marker ) {	$result = array ();	if (!file_exists( $filename ) ) {		return $result;	}	if ( $markerdata = explode( "\n", implode( '', file( $filename ) ) ));	{		$state = false;		foreach ( $markerdata as $markerline ) {			if (strpos($markerline, '# END ' . $marker) !== false)				$state = false;			if ( $state )				$result[] = $markerline;			if (strpos($markerline, '# BEGIN ' . $marker) !== false)				$state = true;		}	}	return $result;}/** * {@internal Missing Short Description}} * * Inserts an array of strings into a file (.htaccess ), placing it between * BEGIN and END markers. Replaces existing marked info. Retains surrounding * data. Creates file if none exists. * * @since unknown * * @param unknown_type $filename * @param unknown_type $marker * @param unknown_type $insertion * @return bool True on write success, false on failure. */function insert_with_markers( $filename, $marker, $insertion ) {	if (!file_exists( $filename ) || is_writeable( $filename ) ) {		if (!file_exists( $filename ) ) {			$markerdata = '';		} else {			$markerdata = explode( "\n", implode( '', file( $filename ) ) );		}		if ( !$f = @fopen( $filename, 'w' ) )			return false;		$foundit = false;		if ( $markerdata ) {			$state = true;			foreach ( $markerdata as $n => $markerline ) {				if (strpos($markerline, '# BEGIN ' . $marker) !== false)					$state = false;				if ( $state ) {					if ( $n + 1 < count( $markerdata ) )						fwrite( $f, "{$markerline}\n" );					else						fwrite( $f, "{$markerline}" );				}				if (strpos($markerline, '# END ' . $marker) !== false) {					fwrite( $f, "# BEGIN {$marker}\n" );					if ( is_array( $insertion ))						foreach ( $insertion as $insertline )							fwrite( $f, "{$insertline}\n" );					fwrite( $f, "# END {$marker}\n" );					$state = true;					$foundit = true;				}			}		}		if (!$foundit) {			fwrite( $f, "\n# BEGIN {$marker}\n" );			foreach ( $insertion as $insertline )				fwrite( $f, "{$insertline}\n" );			fwrite( $f, "# END {$marker}\n" );		}		fclose( $f );		return true;	} else {		return false;	}}/** * Updates the htaccess file with the current rules if it is writable. * * Always writes to the file if it exists and is writable to ensure that we * blank out old rules. * * @since unknown */function save_mod_rewrite_rules() {	if ( is_multisite() )		return;	global $wp_rewrite;	$home_path = get_home_path();	$htaccess_file = $home_path.'.htaccess';	// If the file doesn't already exist check for write access to the directory and whether we have some rules.	// else check for write access to the file.	if ((!file_exists($htaccess_file) && is_writable($home_path) && $wp_rewrite->using_mod_rewrite_permalinks()) || is_writable($htaccess_file)) {		if ( got_mod_rewrite() ) {			$rules = explode( "\n", $wp_rewrite->mod_rewrite_rules() );			return insert_with_markers( $htaccess_file, 'WordPress', $rules );		}	}	return false;}/** * Updates the IIS web.config file with the current rules if it is writable. * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file. * * @since 2.8.0 * * @return bool True if web.config was updated successfully */function iis7_save_url_rewrite_rules(){	global $wp_rewrite;	$home_path = get_home_path();	$web_config_file = $home_path . 'web.config';	// Using win_is_writable() instead of is_writable() because of a bug in Windows PHP	if ( ( ! file_exists($web_config_file) && win_is_writable($home_path) && $wp_rewrite->using_mod_rewrite_permalinks() ) || win_is_writable($web_config_file) ) {		if ( iis7_supports_permalinks() ) {			$rule = $wp_rewrite->iis7_url_rewrite_rules(false, '', '');			if ( ! empty($rule) ) {				return iis7_add_rewrite_rule($web_config_file, $rule);			} else {				return iis7_delete_rewrite_rule($web_config_file);			}		}	}	return false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file */function update_recently_edited( $file ) {	$oldfiles = (array ) get_option( 'recently_edited' );	if ( $oldfiles ) {		$oldfiles = array_reverse( $oldfiles );		$oldfiles[] = $file;		$oldfiles = array_reverse( $oldfiles );		$oldfiles = array_unique( $oldfiles );		if ( 5 < count( $oldfiles ))			array_pop( $oldfiles );	} else {		$oldfiles[] = $file;	}	update_option( 'recently_edited', $oldfiles );}/** * If siteurl or home changed, flush rewrite rules. * * @since unknown * * @param unknown_type $old_value * @param unknown_type $value */function update_home_siteurl( $old_value, $value ) {	global $wp_rewrite;	if ( defined( "WP_INSTALLING" ) )		return;	// If home changed, write rewrite rules to new location.	$wp_rewrite->flush_rules();}add_action( 'update_option_home', 'update_home_siteurl', 10, 2 );add_action( 'update_option_siteurl', 'update_home_siteurl', 10, 2 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $url * @return unknown */function url_shorten( $url ) {	$short_url = str_replace( 'http://', '', stripslashes( $url ));	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	return $short_url;}/** * Resets global variables based on $_GET and $_POST * * This function resets global variables based on the names passed * in the $vars array to the value of $_POST[$var] or $_GET[$var] or '' * if neither is defined. * * @since unknown * * @param array $vars An array of globals to reset. */function wp_reset_vars( $vars ) {	for ( $i=0; $i<count( $vars ); $i += 1 ) {		$var = $vars[$i];		global $$var;		if ( empty( $_POST[$var] ) ) {			if ( empty( $_GET[$var] ) )				$$var = '';			else				$$var = $_GET[$var];		} else {			$$var = $_POST[$var];		}	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $message */function show_message($message) {	if ( is_wp_error($message) ){		if ( $message->get_error_data() )			$message = $message->get_error_message() . ': ' . $message->get_error_data();		else			$message = $message->get_error_message();	}	echo "<p>$message</p>\n";	wp_ob_end_flush_all();	flush();}function wp_doc_link_parse( $content ) {	if ( !is_string( $content ) || empty( $content ) )		return array();	if ( !function_exists('token_get_all') )		return array();	$tokens = token_get_all( $content );	$functions = array();	$ignore_functions = array();	for ( $t = 0, $count = count( $tokens ); $t < $count; $t++ ) {		if ( !is_array( $tokens[$t] ) ) continue;		if ( T_STRING == $tokens[$t][0] && ( '(' == $tokens[ $t + 1 ] || '(' == $tokens[ $t + 2 ] ) ) {			// If it's a function or class defined locally, there's not going to be any docs available			if ( ( isset( $tokens[ $t - 2 ][1] ) && in_array( $tokens[ $t - 2 ][1], array( 'function', 'class' ) ) ) || ( isset( $tokens[ $t - 2 ][0] ) && T_OBJECT_OPERATOR == $tokens[ $t - 1 ][0] ) ) {				$ignore_functions[] = $tokens[$t][1];			}			// Add this to our stack of unique references			$functions[] = $tokens[$t][1];		}	}	$functions = array_unique( $functions );	sort( $functions );	$ignore_functions = apply_filters( 'documentation_ignore_functions', $ignore_functions );	$ignore_functions = array_unique( $ignore_functions );	$out = array();	foreach ( $functions as $function ) {		if ( in_array( $function, $ignore_functions ) )			continue;		$out[] = $function;	}	return $out;}/** * Saves option for number of rows when listing posts, pages, comments, etc. * * @since 2.8**/function set_screen_options() {	if ( isset($_POST['wp_screen_options']) && is_array($_POST['wp_screen_options']) ) {		check_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );		if ( !$user = wp_get_current_user() )			return;		$option = $_POST['wp_screen_options']['option'];		$value = $_POST['wp_screen_options']['value'];		if ( !preg_match( '/^[a-z_-]+$/', $option ) )			return;		$option = str_replace('-', '_', $option);		$map_option = $option;		$type = str_replace('edit_', '', $map_option);		$type = str_replace('_per_page', '', $type);		if ( in_array($type, get_post_types()) )			$map_option = 'edit_per_page';		if ( in_array( $type, get_taxonomies()) )			$map_option = 'edit_tags_per_page';		switch ( $map_option ) {			case 'edit_per_page':			case 'ms_sites_per_page':			case 'ms_users_per_page':			case 'edit_comments_per_page':			case 'upload_per_page':			case 'edit_tags_per_page':			case 'plugins_per_page':				$value = (int) $value;				if ( $value < 1 || $value > 999 )					return;				break;			default:				$value = apply_filters('set-screen-option', false, $option, $value);				if ( false === $value )					return;				break;		}		update_user_meta($user->ID, $option, $value);		wp_redirect( remove_query_arg( array('pagenum', 'apage', 'paged'), wp_get_referer() ) );		exit;	}}function wp_menu_unfold() {	if ( isset($_GET['unfoldmenu']) ) {		delete_user_setting('mfold');		wp_redirect( remove_query_arg( 'unfoldmenu', stripslashes($_SERVER['REQUEST_URI']) ) );	 	exit;	}}/** * Check if IIS 7 supports pretty permalinks * * @since 2.8.0 * * @return bool */function iis7_supports_permalinks() {	global $is_iis7;	$supports_permalinks = false;	if ( $is_iis7 ) {		/* First we check if the DOMDocument class exists. If it does not exist,		 * which is the case for PHP 4.X, then we cannot easily update the xml configuration file,		 * hence we just bail out and tell user that pretty permalinks cannot be used.		 * This is not a big issue because PHP 4.X is going to be depricated and for IIS it		 * is recommended to use PHP 5.X NTS.		 * Next we check if the URL Rewrite Module 1.1 is loaded and enabled for the web site. When		 * URL Rewrite 1.1 is loaded it always sets a server variable called 'IIS_UrlRewriteModule'.		 * Lastly we make sure that PHP is running via FastCGI. This is important because if it runs		 * via ISAPI then pretty permalinks will not work.		 */		$supports_permalinks = class_exists('DOMDocument') && isset($_SERVER['IIS_UrlRewriteModule']) && ( php_sapi_name() == 'cgi-fcgi' );	}	return apply_filters('iis7_supports_permalinks', $supports_permalinks);}/** * Check if rewrite rule for WordPress already exists in the IIS 7 configuration file * * @since 2.8.0 * * @return bool * @param string $filename The file path to the configuration file */function iis7_rewrite_rule_exists($filename) {	if ( ! file_exists($filename) )		return false;	if ( ! class_exists('DOMDocument') )		return false;	$doc = new DOMDocument();	if ( $doc->load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	$rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $rules->length == 0 )		return false;	else		return true;}/** * Delete WordPress rewrite rule from web.config file if it exists there * * @since 2.8.0 * * @param string $filename Name of the configuration file * @return bool */function iis7_delete_rewrite_rule($filename) {	// If configuration file does not exist then rules also do not exist so there is nothing to delete	if ( ! file_exists($filename) )		return true;	if ( ! class_exists('DOMDocument') )		return false;	$doc = new DOMDocument();	$doc->preserveWhiteSpace = false;	if ( $doc -> load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	$rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $rules->length > 0 ) {		$child = $rules->item(0);		$parent = $child->parentNode;		$parent->removeChild($child);		$doc->formatOutput = true;		saveDomDocument($doc, $filename);	}	return true;}/** * Add WordPress rewrite rule to the IIS 7 configuration file. * * @since 2.8.0 * * @param string $filename The file path to the configuration file * @param string $rewrite_rule The XML fragment with URL Rewrite rule * @return bool */function iis7_add_rewrite_rule($filename, $rewrite_rule) {	if ( ! class_exists('DOMDocument') )		return false;	// If configuration file does not exist then we create one.	if ( ! file_exists($filename) ) {		$fp = fopen( $filename, 'w');		fwrite($fp, '<configuration/>');		fclose($fp);	}	$doc = new DOMDocument();	$doc->preserveWhiteSpace = false;	if ( $doc->load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	// First check if the rule already exists as in that case there is no need to re-add it	$wordpress_rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $wordpress_rules->length > 0 )		return true;	// Check the XPath to the rewrite rule and create XML nodes if they do not exist	$xmlnodes = $xpath->query('/configuration/system.webServer/rewrite/rules');	if ( $xmlnodes->length > 0 ) {		$rules_node = $xmlnodes->item(0);	} else {		$rules_node = $doc->createElement('rules');		$xmlnodes = $xpath->query('/configuration/system.webServer/rewrite');		if ( $xmlnodes->length > 0 ) {			$rewrite_node = $xmlnodes->item(0);			$rewrite_node->appendChild($rules_node);		} else {			$rewrite_node = $doc->createElement('rewrite');			$rewrite_node->appendChild($rules_node);			$xmlnodes = $xpath->query('/configuration/system.webServer');			if ( $xmlnodes->length > 0 ) {				$system_webServer_node = $xmlnodes->item(0);				$system_webServer_node->appendChild($rewrite_node);			} else {				$system_webServer_node = $doc->createElement('system.webServer');				$system_webServer_node->appendChild($rewrite_node);				$xmlnodes = $xpath->query('/configuration');				if ( $xmlnodes->length > 0 ) {					$config_node = $xmlnodes->item(0);					$config_node->appendChild($system_webServer_node);				} else {					$config_node = $doc->createElement('configuration');					$doc->appendChild($config_node);					$config_node->appendChild($system_webServer_node);				}			}		}	}	$rule_fragment = $doc->createDocumentFragment();	$rule_fragment->appendXML($rewrite_rule);	$rules_node->appendChild($rule_fragment);	$doc->encoding = "UTF-8";	$doc->formatOutput = true;	saveDomDocument($doc, $filename);	return true;}/** * Saves the XML document into a file * * @since 2.8.0 * * @param DOMDocument $doc * @param string $filename */function saveDomDocument($doc, $filename) {	$config = $doc->saveXML();	$config = preg_replace("/([^\r])\n/", "$1\r\n", $config);	$fp = fopen($filename, 'w');	fwrite($fp, $config);	fclose($fp);}/** * Workaround for Windows bug in is_writable() function * * @since 2.8.0 * * @param object $path * @return bool */function win_is_writable($path) {	/* will work in despite of Windows ACLs bug	 * NOTE: use a trailing slash for folders!!!	 * see http://bugs.php.net/bug.php?id=27609	 * see http://bugs.php.net/bug.php?id=30931	 */    if ( $path{strlen($path)-1} == '/' ) // recursively return a temporary file path        return win_is_writable($path . uniqid(mt_rand()) . '.tmp');    else if ( is_dir($path) )        return win_is_writable($path . '/' . uniqid(mt_rand()) . '.tmp');    // check tmp file for read/write capabilities    $rm = file_exists($path);    $f = @fopen($path, 'a');    if ($f===false)        return false;    fclose($f);    if ( ! $rm )        unlink($path);    return true;}/** * Display the default admin color scheme picker (Used in user-edit.php) * * @since 3.0.0 */function admin_color_scheme_picker() {	global $_wp_admin_css_colors, $user_id; ?><fieldset><legend class="screen-reader-text"><span><?php _e('Admin Color Scheme')?></span></legend><?php$current_color = get_user_option('admin_color', $user_id);if ( empty($current_color) )	$current_color = 'fresh';foreach ( $_wp_admin_css_colors as $color => $color_info ): ?><div class="color-option"><input name="admin_color" id="admin_color_<?php echo $color; ?>" type="radio" value="<?php echo esc_attr($color) ?>" class="tog" <?php checked($color, $current_color); ?> />	<table class="color-palette">	<tr>	<?php foreach ( $color_info->colors as $html_color ): ?>	<td style="background-color: <?php echo $html_color ?>" title="<?php echo $color ?>">&nbsp;</td>	<?php endforeach; ?>	</tr>	</table>	<label for="admin_color_<?php echo $color; ?>"><?php echo $color_info->name ?></label></div>	<?php endforeach; ?></fieldset><?php}?>
<?php/** * WordPress Link Template Functions * * @package WordPress * @subpackage Template *//** * Display the permalink for the current post. * * @since 1.2.0 * @uses apply_filters() Calls 'the_permalink' filter on the permalink string. */function the_permalink() {	echo apply_filters('the_permalink', get_permalink());}/** * Retrieve trailing slash string, if blog set for adding trailing slashes. * * Conditionally adds a trailing slash if the permalink structure has a trailing * slash, strips the trailing slash if not. The string is passed through the * 'user_trailingslashit' filter. Will remove trailing slash from string, if * blog is not set to have them. * * @since 2.2.0 * @uses $wp_rewrite * * @param $string String a URL with or without a trailing slash. * @param $type_of_url String the type of URL being considered (e.g. single, category, etc) for use in the filter. * @return string */function user_trailingslashit($string, $type_of_url = '') {	global $wp_rewrite;	if ( $wp_rewrite->use_trailing_slashes )		$string = trailingslashit($string);	else		$string = untrailingslashit($string);	// Note that $type_of_url can be one of following:	// single, single_trackback, single_feed, single_paged, feed, category, page, year, month, day, paged	$string = apply_filters('user_trailingslashit', $string, $type_of_url);	return $string;}/** * Display permalink anchor for current post. * * The permalink mode title will use the post title for the 'a' element 'id' * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute. * * @since 0.71 * * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'. */function permalink_anchor($mode = 'id') {	global $post;	switch ( strtolower($mode) ) {		case 'title':			$title = sanitize_title($post->post_title) . '-' . $post->ID;			echo '<a id="'.$title.'"></a>';			break;		case 'id':		default:			echo '<a id="post-' . $post->ID . '"></a>';			break;	}}/** * Retrieve full permalink for current post or post ID. * * @since 1.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name. * @return string */function get_permalink($id = 0, $leavename = false) {	$rewritecode = array(		'%year%',		'%monthnum%',		'%day%',		'%hour%',		'%minute%',		'%second%',		$leavename? '' : '%postname%',		'%post_id%',		'%category%',		'%author%',		$leavename? '' : '%pagename%',	);	if ( is_object($id) && isset($id->filter) && 'sample' == $id->filter ) {		$post = $id;		$sample = true;	} else {		$post = &get_post($id);		$sample = false;	}	if ( empty($post->ID) )		return false;	if ( $post->post_type == 'page' )		return get_page_link($post->ID, $leavename, $sample);	elseif ( $post->post_type == 'attachment' )		return get_attachment_link($post->ID);	elseif ( in_array($post->post_type, get_post_types( array('_builtin' => false) ) ) )		return get_post_permalink($post, $leavename, $sample);	$permalink = get_option('permalink_structure');	$permalink = apply_filters('pre_post_link', $permalink, $post, $leavename);	if ( '' != $permalink && !in_array($post->post_status, array('draft', 'pending', 'auto-draft')) ) {		$unixtime = strtotime($post->post_date);		$category = '';		if ( strpos($permalink, '%category%') !== false ) {			$cats = get_the_category($post->ID);			if ( $cats ) {				usort($cats, '_usort_terms_by_ID'); // order by ID				$category = $cats[0]->slug;				if ( $parent = $cats[0]->parent )					$category = get_category_parents($parent, false, '/', true) . $category;			}			// show default category in permalinks, without			// having to assign it explicitly			if ( empty($category) ) {				$default_category = get_category( get_option( 'default_category' ) );				$category = is_wp_error( $default_category ) ? '' : $default_category->slug;			}		}		$author = '';		if ( strpos($permalink, '%author%') !== false ) {			$authordata = get_userdata($post->post_author);			$author = $authordata->user_nicename;		}		$date = explode(" ",date('Y m d H i s', $unixtime));		$rewritereplace =		array(			$date[0],			$date[1],			$date[2],			$date[3],			$date[4],			$date[5],			$post->post_name,			$post->ID,			$category,			$author,			$post->post_name,		);		$permalink = home_url( str_replace($rewritecode, $rewritereplace, $permalink) );		$permalink = user_trailingslashit($permalink, 'single');	} else { // if they're not using the fancy permalink option		$permalink = home_url('?p=' . $post->ID);	}	return apply_filters('post_link', $permalink, $post, $leavename);}/** * Retrieve the permalink for a post with a custom post type. * * @since 3.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_post_permalink( $id = 0, $leavename = false, $sample = false ) {	global $wp_rewrite;	$post = &get_post($id);	if ( is_wp_error( $post ) )		return $post;	$post_link = $wp_rewrite->get_extra_permastruct($post->post_type);	$slug = $post->post_name;	$draft_or_pending = in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft' ) );	$post_type = get_post_type_object($post->post_type);	if ( !empty($post_link) && ( ( isset($post->post_status) && !$draft_or_pending ) || $sample ) ) {		if ( ! $leavename ) {			if ( $post_type->hierarchical )				$slug = get_page_uri($id);			$post_link = str_replace("%$post->post_type%", $slug, $post_link);		}		$post_link = home_url( user_trailingslashit($post_link) );	} else {		if ( $post_type->query_var && ( isset($post->post_status) && !$draft_or_pending ) )			$post_link = add_query_arg($post_type->query_var, $slug, '');		else			$post_link = add_query_arg(array('post_type' => $post->post_type, 'p' => $post->ID), '');		$post_link = home_url($post_link);	}	return apply_filters('post_type_link', $post_link, $id, $leavename, $sample);}/** * Retrieve permalink from post ID. * * @since 1.0.0 * * @param int $post_id Optional. Post ID. * @param mixed $deprecated Not used. * @return string */function post_permalink( $post_id = 0, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	return get_permalink($post_id);}/** * Retrieve the permalink for current page or page ID. * * Respects page_on_front. Use this one. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep page name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	if ( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') )		$link = home_url('/');	else		$link = _get_page_link( $id , $leavename, $sample );	return apply_filters('page_link', $link, $id, $sample);}/** * Retrieve the page permalink. * * Ignores page_on_front. Internal use only. * * @since 2.1.0 * @access private * * @param int $id Optional. Post ID. * @param bool $leavename Optional. Leave name. * @param bool $sample Optional. Sample permalink. * @return string */function _get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post, $wp_rewrite;	if ( !$id )		$id = (int) $post->ID;	else		$post = &get_post($id);	$link = $wp_rewrite->get_page_permastruct();	if ( '' != $link && ( ( isset($post->post_status) && 'draft' != $post->post_status && 'pending' != $post->post_status ) || $sample ) ) {		if ( ! $leavename )			$link = str_replace('%pagename%', get_page_uri($id), $link);		$link = home_url($link);		$link = user_trailingslashit($link, 'page');	} else {		$link = home_url("?page_id=$id");	}	return apply_filters( '_get_page_link', $link, $id );}/** * Retrieve permalink for attachment. * * This can be used in the WordPress Loop or outside of it. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @return string */function get_attachment_link($id = false) {	global $post, $wp_rewrite;	$link = false;	if ( ! $id)		$id = (int) $post->ID;	$object = get_post($id);	if ( $wp_rewrite->using_permalinks() && ($object->post_parent > 0) && ($object->post_parent != $id) ) {		$parent = get_post($object->post_parent);		if ( 'page' == $parent->post_type )			$parentlink = _get_page_link( $object->post_parent ); // Ignores page_on_front		else			$parentlink = get_permalink( $object->post_parent );		if ( is_numeric($object->post_name) || false !== strpos(get_option('permalink_structure'), '%category%') )			$name = 'attachment/' . $object->post_name; // <permalink>/<int>/ is paged so we use the explicit attachment marker		else			$name = $object->post_name;		if ( strpos($parentlink, '?') === false )			$link = user_trailingslashit( trailingslashit($parentlink) . $name );	}	if ( ! $link )		$link = home_url( "/?attachment_id=$id" );	return apply_filters('attachment_link', $link, $id);}/** * Retrieve the permalink for the year archives. * * @since 1.5.0 * * @param int|bool $year False for current year or year for permalink. * @return string */function get_year_link($year) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	$yearlink = $wp_rewrite->get_year_permastruct();	if ( !empty($yearlink) ) {		$yearlink = str_replace('%year%', $year, $yearlink);		return apply_filters('year_link', home_url( user_trailingslashit($yearlink, 'year') ), $year);	} else {		return apply_filters('year_link', home_url('?m=' . $year), $year);	}}/** * Retrieve the permalink for the month archives with year. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @return string */function get_month_link($year, $month) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	$monthlink = $wp_rewrite->get_month_permastruct();	if ( !empty($monthlink) ) {		$monthlink = str_replace('%year%', $year, $monthlink);		$monthlink = str_replace('%monthnum%', zeroise(intval($month), 2), $monthlink);		return apply_filters('month_link', home_url( user_trailingslashit($monthlink, 'month') ), $year, $month);	} else {		return apply_filters('month_link', home_url( '?m=' . $year . zeroise($month, 2) ), $year, $month);	}}/** * Retrieve the permalink for the day archives with year and month. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @param bool|int $day False for current day. Integer of day. * @return string */function get_day_link($year, $month, $day) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	if ( !$day )		$day = gmdate('j', current_time('timestamp'));	$daylink = $wp_rewrite->get_day_permastruct();	if ( !empty($daylink) ) {		$daylink = str_replace('%year%', $year, $daylink);		$daylink = str_replace('%monthnum%', zeroise(intval($month), 2), $daylink);		$daylink = str_replace('%day%', zeroise(intval($day), 2), $daylink);		return apply_filters('day_link', home_url( user_trailingslashit($daylink, 'day') ), $year, $month, $day);	} else {		return apply_filters('day_link', home_url( '?m=' . $year . zeroise($month, 2) . zeroise($day, 2) ), $year, $month, $day);	}}/** * Display the permalink for the feed type. * * @since 3.0.0 * * @param string $anchor The link's anchor text. * @param string $feed Optional, defaults to default feed. Feed type. */function the_feed_link( $anchor, $feed = '' ) {	$link = '<a href="' . esc_url( get_feed_link( $feed ) ) . '">' . $anchor . '</a>';	echo apply_filters( 'the_feed_link', $link, $feed );}/** * Retrieve the permalink for the feed type. * * @since 1.5.0 * * @param string $feed Optional, defaults to default feed. Feed type. * @return string */function get_feed_link($feed = '') {	global $wp_rewrite;	$permalink = $wp_rewrite->get_feed_permastruct();	if ( '' != $permalink ) {		if ( false !== strpos($feed, 'comments_') ) {			$feed = str_replace('comments_', '', $feed);			$permalink = $wp_rewrite->get_comment_feed_permastruct();		}		if ( get_default_feed() == $feed )			$feed = '';		$permalink = str_replace('%feed%', $feed, $permalink);		$permalink = preg_replace('#/+#', '/', "/$permalink");		$output =  home_url( user_trailingslashit($permalink, 'feed') );	} else {		if ( empty($feed) )			$feed = get_default_feed();		if ( false !== strpos($feed, 'comments_') )			$feed = str_replace('comments_', 'comments-', $feed);		$output = home_url("?feed={$feed}");	}	return apply_filters('feed_link', $output, $feed);}/** * Retrieve the permalink for the post comments feed. * * @since 2.2.0 * * @param int $post_id Optional. Post ID. * @param string $feed Optional. Feed type. * @return string */function get_post_comments_feed_link($post_id = '', $feed = '') {	global $id;	if ( empty($post_id) )		$post_id = (int) $id;	if ( empty($feed) )		$feed = get_default_feed();	if ( '' != get_option('permalink_structure') ) {		if ( 'page' == get_option('show_on_front') && $post_id == get_option('page_on_front') )			$url = _get_page_link( $post_id );		else			$url = get_permalink($post_id);		$url = trailingslashit($url) . 'feed';		if ( $feed != get_default_feed() )			$url .= "/$feed";		$url = user_trailingslashit($url, 'single_feed');	} else {		$type = get_post_field('post_type', $post_id);		if ( 'page' == $type )			$url = home_url("?feed=$feed&amp;page_id=$post_id");		else			$url = home_url("?feed=$feed&amp;p=$post_id");	}	return apply_filters('post_comments_feed_link', $url);}/** * Display the comment feed link for a post. * * Prints out the comment feed link for a post. Link text is placed in the * anchor. If no link text is specified, default text is used. If no post ID is * specified, the current post is used. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param string $link_text Descriptive text. * @param int $post_id Optional post ID.  Default to current post. * @param string $feed Optional. Feed format. * @return string Link to the comment feed for the current post.*/function post_comments_feed_link( $link_text = '', $post_id = '', $feed = '' ) {	$url = get_post_comments_feed_link($post_id, $feed);	if ( empty($link_text) )		$link_text = __('Comments Feed');	echo apply_filters( 'post_comments_feed_link_html', "<a href='$url'>$link_text</a>", $post_id, $feed );}/** * Retrieve the feed link for a given author. * * Returns a link to the feed for all posts by a given author. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $author_id ID of an author. * @param string $feed Optional. Feed type. * @return string Link to the feed for the author specified by $author_id.*/function get_author_feed_link( $author_id, $feed = '' ) {	$author_id = (int) $author_id;	$permalink_structure = get_option('permalink_structure');	if ( empty($feed) )		$feed = get_default_feed();	if ( '' == $permalink_structure ) {		$link = home_url("?feed=$feed&amp;author=" . $author_id);	} else {		$link = get_author_posts_url($author_id);		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit($link) . user_trailingslashit($feed_link, 'feed');	}	$link = apply_filters('author_feed_link', $link, $feed);	return $link;}/** * Retrieve the feed link for a category. * * Returns a link to the feed for all post in a given category. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $cat_id ID of a category. * @param string $feed Optional. Feed type. * @return string Link to the feed for the category specified by $cat_id.*/function get_category_feed_link($cat_id, $feed = '') {	return get_term_feed_link($cat_id, 'category', $feed);}/** * Retrieve the feed link for a taxonomy. * * Returns a link to the feed for all post in a given term. A specific feed * can be requested or left blank to get the default feed. * * @since 3.0 * * @param int $term_id ID of a category. * @param string $taxonomy Optional. Taxonomy of $term_id * @param string $feed Optional. Feed type. * @return string Link to the feed for the taxonomy specified by $term_id and $taxonomy.*/function get_term_feed_link( $term_id, $taxonomy = 'category', $feed = '' ) {	global $wp_rewrite;	$term_id = ( int ) $term_id;	$term = get_term( $term_id, $taxonomy  );	if ( empty( $term ) || is_wp_error( $term ) )		return false;	if ( empty( $feed ) )		$feed = get_default_feed();	$permalink_structure = get_option( 'permalink_structure' );	if ( '' == $permalink_structure ) {		if ( 'category' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;cat=$term_id");		}		elseif ( 'post_tag' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;tag=$term->slug");		} else {			$t = get_taxonomy( $taxonomy );			$link = home_url("?feed=$feed&amp;$t->query_var=$term->slug");		}	} else {		$link = get_term_link( $term_id, $term->taxonomy );		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit( $link ) . user_trailingslashit( $feed_link, 'feed' );	}	if ( 'category' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	elseif ( 'post_tag' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	else		$link = apply_filters( 'taxonomy_feed_link', $link, $feed, $taxonomy );	return $link;}/** * Retrieve permalink for feed of tag. * * @since 2.3.0 * * @param int $tag_id Tag ID. * @param string $feed Optional. Feed type. * @return string */function get_tag_feed_link($tag_id, $feed = '') {	return get_term_feed_link($tag_id, 'post_tag', $feed);}/** * Retrieve edit tag link. * * @since 2.7.0 * * @param int $tag_id Tag ID * @return string */function get_edit_tag_link( $tag_id = 0, $taxonomy = 'post_tag' ) {	global $post_type;	$tax = get_taxonomy($taxonomy);	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag_id, $taxonomy);	$location = admin_url('edit-tags.php?action=edit&amp;taxonomy=' . $taxonomy . '&amp;' . (!empty($post_type) ? 'post_type=' . $post_type .'&amp;' : '') .'tag_ID=' . $tag->term_id);	return apply_filters( 'get_edit_tag_link', $location );}/** * Display or retrieve edit tag link with formatting. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int|object $tag Tag object or ID * @return string|null HTML content, if $echo is set to false. */function edit_tag_link( $link = '', $before = '', $after = '', $tag = null ) {	$tax = get_taxonomy('post_tag');	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag, 'post_tag');	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_tag_link( $tag->term_id ) . '" title="' . __( 'Edit Tag' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_tag_link', $link, $tag->term_id ) . $after;}/*** Retrieve permalink for search.** @since  3.0.0* @param string $query Optional. The query string to use. If empty the current query is used.* @return string*/function get_search_link( $query = '' ) {	global $wp_rewrite;	if ( empty($query) )		$search = get_search_query( false );	else		$search = stripslashes($query);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty( $permastruct ) ) {		$link = home_url('?s=' . urlencode($search) );	} else {		$search = urlencode($search);		$search = str_replace('%2F', '/', $search); // %2F(/) is not valid within a URL, send it unencoded.		$link = str_replace( '%search%', $search, $permastruct );		$link = home_url( user_trailingslashit( $link, 'search' ) );	}	return apply_filters( 'search_link', $link, $search );}/** * Retrieve the permalink for the feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	$link = get_search_link($search_query);	if ( empty($feed) )		$feed = get_default_feed();	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) ) {		$link = add_query_arg('feed', $feed, $link);	} else {		$link = trailingslashit($link);		$link .= "feed/$feed/";	}	$link = apply_filters('search_feed_link', $link, $feed, 'posts');	return $link;}/** * Retrieve the permalink for the comments feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_comments_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	if ( empty($feed) )		$feed = get_default_feed();	$link = get_search_feed_link($search_query, $feed);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) )		$link = add_query_arg('feed', 'comments-' . $feed, $link);	else		$link = add_query_arg('withcomments', 1, $link);	$link = apply_filters('search_feed_link', $link, $feed, 'comments');	return $link;}/** * Retrieve edit posts link for post. * * Can be used within the WordPress loop or outside of it. Can be used with * pages, posts, attachments, and revisions. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @param string $context Optional, default to display. How to write the '&', defaults to '&amp;'. * @return string */function get_edit_post_link( $id = 0, $context = 'display' ) {	if ( !$post = &get_post( $id ) )		return;	if ( 'display' == $context )		$action = '&amp;action=edit';	else		$action = '&action=edit';	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->edit_post, $post->ID ) )		return;	return apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );}/** * Display edit post link for post. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $id Optional. Post ID. */function edit_post_link( $link = null, $before = '', $after = '', $id = 0 ) {	if ( !$post = &get_post( $id ) )		return;	if ( !$url = get_edit_post_link( $post->ID ) )		return;	if ( null === $link )		$link = __('Edit This');	$post_type_obj = get_post_type_object( $post->post_type );	$link = '<a class="post-edit-link" href="' . $url . '" title="' . esc_attr( $post_type_obj->labels->edit_item ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_post_link', $link, $post->ID ) . $after;}/** * Retrieve delete posts link for post. * * Can be used within the WordPress loop or outside of it, with any post type. * * @since 2.9.0 * * @param int $id Optional. Post ID. * @param string $deprecated Not used. * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return string */function get_delete_post_link( $id = 0, $deprecated = '', $force_delete = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0.0' );	if ( !$post = &get_post( $id ) )		return;	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->delete_post, $post->ID ) )		return;	$action = ( $force_delete || !EMPTY_TRASH_DAYS ) ? 'delete' : 'trash';	$delete_link = add_query_arg( 'action', $action, admin_url( sprintf( $post_type_object->_edit_link, $post->ID ) ) );	return apply_filters( 'get_delete_post_link', wp_nonce_url( $delete_link, "$action-{$post->post_type}_{$post->ID}" ), $post->ID, $force_delete );}/** * Retrieve edit comment link. * * @since 2.3.0 * * @param int $comment_id Optional. Comment ID. * @return string */function get_edit_comment_link( $comment_id = 0 ) {	$comment = &get_comment( $comment_id );	$post = &get_post( $comment->comment_post_ID );	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	$location = admin_url('comment.php?action=editcomment&amp;c=') . $comment->comment_ID;	return apply_filters( 'get_edit_comment_link', $location );}/** * Display or retrieve edit comment link with formatting. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @return string|null HTML content, if $echo is set to false. */function edit_comment_link( $link = null, $before = '', $after = '' ) {	global $comment, $post;	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	if ( null === $link )		$link = __('Edit This');	$link = '<a class="comment-edit-link" href="' . get_edit_comment_link( $comment->comment_ID ) . '" title="' . __( 'Edit comment' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_comment_link', $link, $comment->comment_ID ) . $after;}/** * Display edit bookmark (literally a URL external to blog) link. * * @since 2.7.0 * * @param int $link Optional. Bookmark ID. * @return string */function get_edit_bookmark_link( $link = 0 ) {	$link = get_bookmark( $link );	if ( !current_user_can('manage_links') )		return;	$location = admin_url('link.php?action=edit&amp;link_id=') . $link->link_id;	return apply_filters( 'get_edit_bookmark_link', $location, $link->link_id );}/** * Display edit bookmark (literally a URL external to blog) link anchor content. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $bookmark Optional. Bookmark ID. */function edit_bookmark_link( $link = '', $before = '', $after = '', $bookmark = null ) {	$bookmark = get_bookmark($bookmark);	if ( !current_user_can('manage_links') )		return;	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_bookmark_link( $link ) . '" title="' . __( 'Edit Link' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_bookmark_link', $link, $bookmark->link_id ) . $after;}// Navigation links/** * Retrieve previous post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_previous_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories);}/** * Retrieve next post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_next_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories, false);}/** * Retrieve adjacent post link. * * Can either be next or previous post link. * * @since 2.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve previous post. * @return string */function get_adjacent_post($in_same_cat = false, $excluded_categories = '', $previous = true) {	global $post, $wpdb;	if ( empty( $post ) )		return null;	$current_post_date = $post->post_date;	$join = '';	$posts_in_ex_cats_sql = '';	if ( $in_same_cat || !empty($excluded_categories) ) {		$join = " INNER JOIN $wpdb->term_relationships AS tr ON p.ID = tr.object_id INNER JOIN $wpdb->term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";		if ( $in_same_cat ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));			$join .= " AND tt.taxonomy = 'category' AND tt.term_id IN (" . implode(',', $cat_array) . ")";		}		$posts_in_ex_cats_sql = "AND tt.taxonomy = 'category'";		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(' and ', $excluded_categories));			if ( !empty($cat_array) ) {				$excluded_categories = array_diff($excluded_categories, $cat_array);				$posts_in_ex_cats_sql = '';			}			if ( !empty($excluded_categories) ) {				$posts_in_ex_cats_sql = " AND tt.taxonomy = 'category' AND tt.term_id NOT IN (" . implode($excluded_categories, ',') . ')';			}		}	}	$adjacent = $previous ? 'previous' : 'next';	$op = $previous ? '<' : '>';	$order = $previous ? 'DESC' : 'ASC';	$join  = apply_filters( "get_{$adjacent}_post_join", $join, $in_same_cat, $excluded_categories );	$where = apply_filters( "get_{$adjacent}_post_where", $wpdb->prepare("WHERE p.post_date $op %s AND p.post_type = %s AND p.post_status = 'publish' $posts_in_ex_cats_sql", $current_post_date, $post->post_type), $in_same_cat, $excluded_categories );	$sort  = apply_filters( "get_{$adjacent}_post_sort", "ORDER BY p.post_date $order LIMIT 1" );	$query = "SELECT p.* FROM $wpdb->posts AS p $join $where $sort";	$query_key = 'adjacent_post_' . md5($query);	$result = wp_cache_get($query_key, 'counts');	if ( false !== $result )		return $result;	$result = $wpdb->get_row("SELECT p.* FROM $wpdb->posts AS p $join $where $sort");	if ( null === $result )		$result = '';	wp_cache_set($query_key, $result, 'counts');	return $result;}/** * Get adjacent post relational link. * * Can either be next or previous post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. * @return string */function get_adjacent_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() && is_object( $GLOBALS['post'] ) )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat,$excluded_categories,$previous);	if ( empty($post) )		return;	if ( empty($post->post_title) )		$post->post_title = $previous ? __('Previous Post') : __('Next Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $previous ? "<link rel='prev' title='" : "<link rel='next' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	$adjacent = $previous ? 'previous' : 'next';	return apply_filters( "{$adjacent}_post_rel_link", $link );}/** * Display relational links for the posts adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function adjacent_posts_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational links for the posts adjacent to the current post for single post pages. * * This is meant to be attached to actions like 'wp_head'.  Do not call this directly in plugins or theme templates. * @since 3.0.0 * */function adjacent_posts_rel_link_wp_head() {	if ( !is_singular() || is_attachment() )		return;	adjacent_posts_rel_link();}/** * Display relational link for the next post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational link for the previous post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function prev_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);}/** * Retrieve boundary post. * * Boundary being either the first or last post by publish date within the contraitns specified * by in same category or excluded categories. * * @since 2.8.0 * * @param bool $in_same_cat Optional. Whether returned post should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve first post. * @return object */function get_boundary_post($in_same_cat = false, $excluded_categories = '', $start = true) {	global $post;	if ( empty($post) || !is_single() || is_attachment() )		return null;	$cat_array = array();	$excluded_categories = array();	if ( !empty($in_same_cat) || !empty($excluded_categories) ) {		if ( !empty($in_same_cat) ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));		}		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(',', $excluded_categories));			if ( !empty($cat_array) )				$excluded_categories = array_diff($excluded_categories, $cat_array);			$inverse_cats = array();			foreach ( $excluded_categories as $excluded_category)				$inverse_cats[] = $excluded_category * -1;			$excluded_categories = $inverse_cats;		}	}	$categories = implode(',', array_merge($cat_array, $excluded_categories) );	$order = $start ? 'ASC' : 'DESC';	return get_posts( array('numberposts' => 1, 'no_found_rows' => true, 'order' => $order, 'orderby' => 'ID', 'category' => $categories) );}/** * Get boundary post relational link. * * Can either be start or end post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $start Optional, default is true. Whether display link to first post. * @return string */function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {	$posts = get_boundary_post($in_same_cat,$excluded_categories,$start);	// If there is no post stop.	if ( empty($posts) )		return;	// Even though we limited get_posts to return only 1 item it still returns an array of objects.	$post = $posts[0];	if ( empty($post->post_title) )		$post->post_title = $start ? __('First Post') : __('Last Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $start ? "<link rel='start' title='" : "<link rel='end' title='";	$link .= esc_attr($title);	$link .= "' href='" . get_permalink($post) . "' />\n";	$boundary = $start ? 'start' : 'end';	return apply_filters( "{$boundary}_post_rel_link", $link );}/** * Display relational link for the first post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_boundary_post_rel_link($title, $in_same_cat, $excluded_categories, true);}/** * Get site index relational link. * * @since 2.8.0 * * @return string */function get_index_rel_link() {	$link = "<link rel='index' title='" . esc_attr( get_bloginfo( 'name', 'display' ) ) . "' href='" . esc_url( user_trailingslashit( get_bloginfo( 'url', 'display' ) ) ) . "' />\n";	return apply_filters( "index_rel_link", $link );}/** * Display relational link for the site index. * * @since 2.8.0 */function index_rel_link() {	echo get_index_rel_link();}/** * Get parent post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @return string */function get_parent_post_rel_link($title = '%title') {	if ( ! empty( $GLOBALS['post'] ) && ! empty( $GLOBALS['post']->post_parent ) )		$post = & get_post($GLOBALS['post']->post_parent);	if ( empty($post) )		return;	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = "<link rel='up' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	return apply_filters( "parent_post_rel_link", $link );}/** * Display relational link for parent item * * @since 2.8.0 */function parent_post_rel_link($title = '%title') {	echo get_parent_post_rel_link($title);}/** * Display previous post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, true);}/** * Display next post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, false);}/** * Display adjacent post link. * * Can be either next post link or previous. * * @since 2.5.0 * * @param string $format Link anchor format. * @param string $link Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. */function adjacent_post_link($format, $link, $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat, $excluded_categories, $previous);	if ( !$post )		return;	$title = $post->post_title;	if ( empty($post->post_title) )		$title = $previous ? __('Previous Post') : __('Next Post');	$title = apply_filters('the_title', $title, $post->ID);	$date = mysql2date(get_option('date_format'), $post->post_date);	$rel = $previous ? 'prev' : 'next';	$string = '<a href="'.get_permalink($post).'" rel="'.$rel.'">';	$link = str_replace('%title', $title, $link);	$link = str_replace('%date', $date, $link);	$link = $string . $link . '</a>';	$format = str_replace('%link', $link, $format);	$adjacent = $previous ? 'previous' : 'next';	echo apply_filters( "{$adjacent}_post_link", $format, $link );}/** * Retrieve get links for page numbers. * * @since 1.5.0 * * @param int $pagenum Optional. Page ID. * @return string */function get_pagenum_link($pagenum = 1) {	global $wp_rewrite;	$pagenum = (int) $pagenum;	$request = remove_query_arg( 'paged' );	$home_root = parse_url(home_url());	$home_root = ( isset($home_root['path']) ) ? $home_root['path'] : '';	$home_root = preg_quote( trailingslashit( $home_root ), '|' );	$request = preg_replace('|^'. $home_root . '|', '', $request);	$request = preg_replace('|^/+|', '', $request);	if ( !$wp_rewrite->using_permalinks() || is_admin() ) {		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $pagenum > 1 ) {			$result = add_query_arg( 'paged', $pagenum, $base . $request );		} else {			$result = $base . $request;		}	} else {		$qs_regex = '|\?.*?$|';		preg_match( $qs_regex, $request, $qs_match );		if ( !empty( $qs_match[0] ) ) {			$query_string = $qs_match[0];			$request = preg_replace( $qs_regex, '', $request );		} else {			$query_string = '';		}		$request = preg_replace( '|page/\d+/?$|', '', $request);		$request = preg_replace( '|^index\.php|', '', $request);		$request = ltrim($request, '/');		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $wp_rewrite->using_index_permalinks() && ( $pagenum > 1 || '' != $request ) )			$base .= 'index.php/';		if ( $pagenum > 1 ) {			$request = ( ( !empty( $request ) ) ? trailingslashit( $request ) : $request ) . user_trailingslashit( 'page/' . $pagenum, 'paged' );		}		$result = $base . $request . $query_string;	}	$result = apply_filters('get_pagenum_link', $result);	return $result;}/** * Retrieve next posts pages link. * * Backported from 2.1.3 to 2.0.10. * * @since 2.0.10 * * @param int $max_page Optional. Max pages. * @return string */function get_next_posts_page_link($max_page = 0) {	global $paged;	if ( !is_single() ) {		if ( !$paged )			$paged = 1;		$nextpage = intval($paged) + 1;		if ( !$max_page || $max_page >= $nextpage )			return get_pagenum_link($nextpage);	}}/** * Display or return the next posts pages link. * * @since 0.71 * * @param int $max_page Optional. Max pages. * @param boolean $echo Optional. Echo or return; */function next_posts( $max_page = 0, $echo = true ) {	$output = esc_url( get_next_posts_page_link( $max_page ) );	if ( $echo )		echo $output;	else		return $output;}/** * Return the next posts pages link. * * @since 2.7.0 * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. * @return string|null */function get_next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	global $paged, $wp_query;	if ( !$max_page )		$max_page = $wp_query->max_num_pages;	if ( !$paged )		$paged = 1;	$nextpage = intval($paged) + 1;	if ( !is_single() && ( empty($paged) || $nextpage <= $max_page) ) {		$attr = apply_filters( 'next_posts_link_attributes', '' );		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';	}}/** * Display the next posts pages link. * * @since 0.71 * @uses get_next_posts_link() * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. */function next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	echo get_next_posts_link( $label, $max_page );}/** * Retrieve previous post pages link. * * Will only return string, if not on a single page or post. * * Backported to 2.0.10 from 2.1.3. * * @since 2.0.10 * * @return string|null */function get_previous_posts_page_link() {	global $paged;	if ( !is_single() ) {		$nextpage = intval($paged) - 1;		if ( $nextpage < 1 )			$nextpage = 1;		return get_pagenum_link($nextpage);	}}/** * Display or return the previous posts pages link. * * @since 0.71 * * @param boolean $echo Optional. Echo or return; */function previous_posts( $echo = true ) {	$output = esc_url( get_previous_posts_page_link() );	if ( $echo )		echo $output;	else		return $output;}/** * Return the previous posts pages link. * * @since 2.7.0 * * @param string $label Optional. Previous page link text. * @return string|null */function get_previous_posts_link( $label = '&laquo; Previous Page' ) {	global $paged;	if ( !is_single() && $paged > 1 ) {		$attr = apply_filters( 'previous_posts_link_attributes', '' );		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/', '&#038;$1', $label ) .'</a>';	}}/** * Display the previous posts page link. * * @since 0.71 * @uses get_previous_posts_link() * * @param string $label Optional. Previous page link text. */function previous_posts_link( $label = '&laquo; Previous Page' ) {	echo get_previous_posts_link( $label );}/** * Return post pages link navigation for previous and next pages. * * @since 2.8 * * @param string|array $args Optional args. * @return string The posts link navigation. */function get_posts_nav_link( $args = array() ) {	global $wp_query;	$return = '';	if ( !is_singular() ) {		$defaults = array(			'sep' => ' &#8212; ',			'prelabel' => __('&laquo; Previous Page'),			'nxtlabel' => __('Next Page &raquo;'),		);		$args = wp_parse_args( $args, $defaults );		$max_num_pages = $wp_query->max_num_pages;		$paged = get_query_var('paged');		//only have sep if there's both prev and next results		if ($paged < 2 || $paged >= $max_num_pages) {			$args['sep'] = '';		}		if ( $max_num_pages > 1 ) {			$return = get_previous_posts_link($args['prelabel']);			$return .= preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $args['sep']);			$return .= get_next_posts_link($args['nxtlabel']);		}	}	return $return;}/** * Display post pages link navigation for previous and next pages. * * @since 0.71 * * @param string $sep Optional. Separator for posts navigation links. * @param string $prelabel Optional. Label for previous pages. * @param string $nxtlabel Optional Label for next pages. */function posts_nav_link( $sep = '', $prelabel = '', $nxtlabel = '' ) {	$args = array_filter( compact('sep', 'prelabel', 'nxtlabel') );	echo get_posts_nav_link($args);}/** * Retrieve page numbers links. * * @since 2.7.0 * * @param int $pagenum Optional. Page number. * @return string */function get_comments_pagenum_link( $pagenum = 1, $max_page = 0 ) {	global $post, $wp_rewrite;	$pagenum = (int) $pagenum;	$result = get_permalink( $post->ID );	if ( 'newest' == get_option('default_comments_page') ) {		if ( $pagenum != $max_page ) {			if ( $wp_rewrite->using_permalinks() )				$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');			else				$result = add_query_arg( 'cpage', $pagenum, $result );		}	} elseif ( $pagenum > 1 ) {		if ( $wp_rewrite->using_permalinks() )			$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');		else			$result = add_query_arg( 'cpage', $pagenum, $result );	}	$result .= '#comments';	$result = apply_filters('get_comments_pagenum_link', $result);	return $result;}/** * Return the link to next comments pages. * * @since 2.7.1 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. * @return string|null */function get_next_comments_link( $label = '', $max_page = 0 ) {	global $wp_query;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	$nextpage = intval($page) + 1;	if ( empty($max_page) )		$max_page = $wp_query->max_num_comment_pages;	if ( empty($max_page) )		$max_page = get_comment_pages_count();	if ( $nextpage > $max_page )		return;	if ( empty($label) )		$label = __('Newer Comments &raquo;');	return '<a href="' . esc_url( get_comments_pagenum_link( $nextpage, $max_page ) ) . '" ' . apply_filters( 'next_comments_link_attributes', '' ) . '>'. preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the link to next comments pages. * * @since 2.7.0 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. */function next_comments_link( $label = '', $max_page = 0 ) {	echo get_next_comments_link( $label, $max_page );}/** * Return the previous comments page link. * * @since 2.7.1 * * @param string $label Optional. Label for comments link text. * @return string|null */function get_previous_comments_link( $label = '' ) {	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( intval($page) <= 1 )		return;	$prevpage = intval($page) - 1;	if ( empty($label) )		$label = __('&laquo; Older Comments');	return '<a href="' . esc_url( get_comments_pagenum_link( $prevpage ) ) . '" ' . apply_filters( 'previous_comments_link_attributes', '' ) . '>' . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the previous comments page link. * * @since 2.7.0 * * @param string $label Optional. Label for comments link text. */function previous_comments_link( $label = '' ) {	echo get_previous_comments_link( $label );}/** * Create pagination links for the comments on the current post. * * @see paginate_links() * @since 2.7.0 * * @param string|array $args Optional args. See paginate_links. * @return string Markup for pagination links.*/function paginate_comments_links($args = array()) {	global $wp_rewrite;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( !$page )		$page = 1;	$max_page = get_comment_pages_count();	$defaults = array(		'base' => add_query_arg( 'cpage', '%#%' ),		'format' => '',		'total' => $max_page,		'current' => $page,		'echo' => true,		'add_fragment' => '#comments'	);	if ( $wp_rewrite->using_permalinks() )		$defaults['base'] = user_trailingslashit(trailingslashit(get_permalink()) . 'comment-page-%#%', 'commentpaged');	$args = wp_parse_args( $args, $defaults );	$page_links = paginate_links( $args );	if ( $args['echo'] )		echo $page_links;	else		return $page_links;}/** * Retrieve shortcut link. * * Use this in 'a' element 'href' attribute. * * @since 2.6.0 * * @return string */function get_shortcut_link() {	$link = "javascript:			var d=document,			w=window,			e=w.getSelection,			k=d.getSelection,			x=d.selection,			s=(e?e():(k)?k():(x?x.createRange().text:0)),			f='" . admin_url('press-this.php') . "',			l=d.location,			e=encodeURIComponent,			u=f+'?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s)+'&v=4';			a=function(){if(!w.open(u,'t','toolbar=0,resizable=1,scrollbars=1,status=1,width=720,height=570'))l.href=u;};			if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0); else a();			void(0)";	$link = str_replace(array("\r", "\n", "\t"),  '', $link);	return apply_filters('shortcut_link', $link);}/** * Retrieve the home url for the current site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @uses get_home_url() * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function home_url( $path = '', $scheme = null ) {	return get_home_url(null, $path, $scheme);}/** * Retrieve the home url for a given site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  int $blog_id   (optional) Blog ID. Defaults to current blog. * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function get_home_url( $blog_id = null, $path = '', $scheme = null ) {	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	if ( empty( $blog_id ) || !is_multisite() )		$home = get_option( 'home' );	else		$home = get_blog_option( $blog_id, 'home' );	$url = str_replace( 'http://', "$scheme://", $home );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'home_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the site url for the current site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 2.6.0 * * @uses get_site_url() * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function site_url( $path = '', $scheme = null ) {	return get_site_url(null, $path, $scheme);}/** * Retrieve the site url for a given site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function get_site_url( $blog_id = null, $path = '', $scheme = null ) {	// should the list of allowed schemes be maintained elsewhere?	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ( 'login' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		elseif ( ( 'admin' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	if ( empty( $blog_id ) || !is_multisite() )		$url = get_option( 'siteurl' );	else		$url = get_blog_option( $blog_id, 'siteurl' );	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'site_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the url to the admin area for the current site. * * @package WordPress * @since 2.6.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function admin_url( $path = '', $scheme = 'admin' ) {	return get_admin_url(null, $path, $scheme);}/** * Retrieve the url to the admin area for a given site. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function get_admin_url( $blog_id = null, $path = '', $scheme = 'admin' ) {	$url = get_site_url($blog_id, 'wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('admin_url', $url, $path, $blog_id);}/** * Retrieve the url to the includes directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the includes url. * @return string Includes url link with optional path appended.*/function includes_url($path = '') {	$url = site_url() . '/' . WPINC . '/';	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('includes_url', $url, $path);}/** * Retrieve the url to the content directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the content url. * @return string Content url link with optional path appended.*/function content_url($path = '') {	$url = WP_CONTENT_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('content_url', $url, $path);}/** * Retrieve the url to the plugins directory or to a specific file within that directory. * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the plugins url. * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__ * @return string Plugins url link with optional path appended.*/function plugins_url($path = '', $plugin = '') {	$mu_plugin_dir = WPMU_PLUGIN_DIR;	foreach ( array('path', 'plugin', 'mu_plugin_dir') as $var ) {		$$var = str_replace('\\' ,'/', $$var); // sanitize for Win32 installs		$$var = preg_replace('|/+|', '/', $$var);	}	if ( !empty($plugin) && 0 === strpos($plugin, $mu_plugin_dir) )		$url = WPMU_PLUGIN_URL;	else		$url = WP_PLUGIN_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($plugin) && is_string($plugin) ) {		$folder = dirname(plugin_basename($plugin));		if ( '.' != $folder )			$url .= '/' . ltrim($folder, '/');	}	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('plugins_url', $url, $path, $plugin);}/** * Retrieve the site url for the current network. * * Returns the site url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function network_site_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return site_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('login' == $scheme) && ( force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('admin' == $scheme) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_site_url', $url, $path, $orig_scheme);}/** * Retrieve the home url for the current network. * * Returns the home url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function network_home_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return home_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "$scheme://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= ltrim( $path, '/' );	return apply_filters( 'network_home_url', $url, $path, $orig_scheme);}/** * Retrieve the url to the admin area for the network. * * @package WordPress * @since 3.0.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function network_admin_url( $path = '', $scheme = 'admin' ) {	$url = network_site_url('wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_admin_url', $url, $path);}/** * Output rel=canonical for singular queries * * @package WordPress * @since 2.9.0*/function rel_canonical() {	if ( !is_singular() )		return;	global $wp_the_query;	if ( !$id = $wp_the_query->get_queried_object_id() )		return;	$link = get_permalink( $id );	echo "<link rel='canonical' href='$link' />\n";}/** * Return a shortlink for a post, page, attachment, or blog. * * This function exists to provide a shortlink tag that all themes and plugins can target.  A plugin must hook in to * provide the actual shortlinks.  Default shortlink support is limited to providing ?p= style links for posts. * Plugins can short circuit this function via the pre_get_shortlink filter or filter the output * via the get_shortlink filter. * * @since 3.0.0. * * @param int $id A post or blog id.  Default is 0, which means the current post or blog. * @param string $contex Whether the id is a 'blog' id, 'post' id, or 'media' id.  If 'post', the post_type of the post is consulted.  If 'query', the current query is consulted to determine the id and context. Default is 'post'. * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. */function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {	// Allow plugins to short-circuit this function.	$shortlink = apply_filters('pre_get_shortlink', false, $id, $context, $allow_slugs);	if ( false !== $shortlink )		return $shortlink;	global $wp_query;	$post_id = 0;	if ( 'query' == $context && is_single() ) {		$post_id = $wp_query->get_queried_object_id();	} elseif ( 'post' == $context ) {		$post = get_post($id);		$post_id = $post->ID;	}	$shortlink = '';	// Return p= link for posts.	if ( !empty($post_id) && '' != get_option('permalink_structure') ) {		$post = get_post($post_id);		if ( isset($post->post_type) && 'post' == $post->post_type )			$shortlink = home_url('?p=' . $post->ID);	}	return apply_filters('get_shortlink', $shortlink, $id, $context, $allow_slugs);}/** *  Inject rel=sortlink into head if a shortlink is defined for the current page. * *  Attached to the wp_head action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_wp_head() {	$shortlink = wp_get_shortlink( 0, 'query' );	if ( empty( $shortlink ) )		return;	echo "<link rel='shortlink' href='" . esc_url_raw( $shortlink ) . "' />\n";}/** * Send a Link: rel=shortlink header if a shortlink is defined for the current page. * * Attached to the wp action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_header() {    if ( headers_sent() )		return;	$shortlink = wp_get_shortlink(0, 'query');	if ( empty($shortlink) )		return;	header('Link: <' . $shortlink . '>; rel=shortlink', false);}/** * Display the Short Link for a Post * * Must be called from inside "The Loop" * * Call like the_shortlink(__('Shortlinkage FTW')) * * @since 3.0.0 * * @param string $text Optional The link text or HTML to be displayed.  Defaults to 'This is the short link.' * @param string $title Optional The tooltip for the link.  Must be sanitized.  Defaults to the sanitized post title. * @param string $before Optional HTML to display before the link. * @param string $before Optional HTML to display after the link. */function the_shortlink( $text = '', $title = '', $before = '', $after = '' ) {	global $post;	if ( empty( $text ) )		$text = __('This is the short link.');	if ( empty( $title ) )		$title = the_title_attribute( array( 'echo' => FALSE ) );	$shortlink = wp_get_shortlink( $post->ID );	if ( !empty( $shortlink ) ) {		$link = '<a rel="shortlink" href="' . esc_url( $shortlink ) . '" title="' . $title . '">' . $text . '</a>';		$link = apply_filters( 'the_shortlink', $link, $shortlink, $text, $title );		echo $before, $link, $after;	}}?>
<?php/** * WordPress Plugin Install Administration API * * @package WordPress * @subpackage Administration *//** * Retrieve plugin installer pages from WordPress Plugins API. * * It is possible for a plugin to override the Plugin API result with three * filters. Assume this is for plugins, which can extend on the Plugin Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'plugins_api_args', is for the args and gives the action as * the second parameter. The hook for 'plugins_api_args' must ensure that an * object is returned. * * The second filter, 'plugins_api', is the result that would be returned. * * @since 2.7.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Plugin Info API. * @return object plugins_api response object on success, WP_Error on failure. */function plugins_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	// Allows a plugin to override the WordPress.org API entirely.	// Use the filter 'plugins_api_result' to mearly add results.	// Please ensure that a object is returned from the following filters.	$args = apply_filters('plugins_api_args', $args, $action);	$res = apply_filters('plugins_api', false, $action, $args);	if ( false === $res ) {		$request = wp_remote_post('http://api.wordpress.org/plugins/info/1.0/', array( 'timeout' => 15, 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('plugins_api_failed', __('An Unexpected HTTP Error occurred during the API request.'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( false === $res )				$res = new WP_Error('plugins_api_failed', __('An unknown error occurred.'), $request['body']);		}	} elseif ( !is_wp_error($res) ) {		$res->external = true;	}	return apply_filters('plugins_api_result', $res, $action, $args);}/** * Retrieve popular WordPress plugin tags. * * @since 2.7.0 * * @param array $args * @return array */function install_popular_tags( $args = array() ) {	if ( ! ($cache = wp_cache_get('popular_tags', 'api')) && ! ($cache = get_option('wporg_popular_tags')) )		add_option('wporg_popular_tags', array(), '', 'no'); ///No autoload.	if ( $cache && $cache->timeout + 3 * 60 * 60 > time() )		return $cache->cached;	$tags = plugins_api('hot_tags', $args);	if ( is_wp_error($tags) )		return $tags;	$cache = (object) array('timeout' => time(), 'cached' => $tags);	update_option('wporg_popular_tags', $cache);	wp_cache_set('popular_tags', $cache, 'api');	return $tags;}add_action('install_plugins_search', 'install_search', 10, 1);/** * Display search results and display as tag cloud. * * @since 2.7.0 * * @param string $page */function install_search($page) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$args['tag'] = sanitize_title_with_dashes($term);			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_plugins_table_header', 'install_search_form');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);	return;}add_action('install_plugins_dashboard', 'install_dashboard');function install_dashboard() {	?>	<p><?php _e('Plugins extend and expand the functionality of WordPress. You may automatically install plugins from the <a href="http://wordpress.org/extend/plugins/">WordPress Plugin Directory</a> or upload a plugin in .zip format via this page.') ?></p>	<h4><?php _e('Search') ?></h4>	<p class="install-help"><?php _e('Search for plugins by keyword, author, or tag.') ?></p>	<?php install_search_form(); ?>	<h4><?php _e('Popular tags') ?></h4>	<p class="install-help"><?php _e('You may also browse based on the most popular tags in the Plugin Directory:') ?></p>	<?php	$api_tags = install_popular_tags();	echo '<p class="popular-tags">';	if ( is_wp_error($api_tags) ) {		echo $api_tags->get_error_message();	} else {		//Set up the tags in a way which can be interprated by wp_generate_tag_cloud()		$tags = array();		foreach ( (array)$api_tags as $tag )			$tags[ $tag['name'] ] = (object) array(									'link' => esc_url( admin_url('plugin-install.php?tab=search&type=tag&s=' . urlencode($tag['name'])) ),									'name' => $tag['name'],									'id' => sanitize_title_with_dashes($tag['name']),									'count' => $tag['count'] );		echo wp_generate_tag_cloud($tags, array( 'single_text' => __('%d plugin'), 'multiple_text' => __('%d plugins') ) );	}	echo '</p><br class="clear" />';}/** * Display search form for searching plugins. * * @since 2.7.0 */function install_search_form(){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><form id="search-plugins" method="post" action="<?php echo admin_url('plugin-install.php?tab=search'); ?>">		<select name="type" id="typeselector">			<option value="term"<?php selected('term', $type) ?>><?php _e('Term'); ?></option>			<option value="author"<?php selected('author', $type) ?>><?php _e('Author'); ?></option>			<option value="tag"<?php selected('tag', $type) ?>><?php _ex('Tag', 'Plugin Installer'); ?></option>		</select>		<input type="text" name="s" value="<?php echo esc_attr($term) ?>" />		<label class="screen-reader-text" for="plugin-search-input"><?php _e('Search Plugins'); ?></label>		<input type="submit" id="plugin-search-input" name="search" value="<?php esc_attr_e('Search Plugins'); ?>" class="button" />	</form><?php}add_action('install_plugins_featured', 'install_featured', 10, 1);/** * Display featured plugins. * * @since 2.7.0 * * @param string $page */function install_featured($page = 1) {	$args = array('browse' => 'featured', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_popular', 'install_popular', 10, 1);/** * Display popular plugins. * * @since 2.7.0 * * @param string $page */function install_popular($page = 1) {	$args = array('browse' => 'popular', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_upload', 'install_plugins_upload', 10, 1);/** * Upload from zip * @since 2.8.0 * * @param string $page */function install_plugins_upload( $page = 1 ) {?>	<h4><?php _e('Install a plugin in .zip format') ?></h4>	<p class="install-help"><?php _e('If you have a plugin in a .zip format, you may install it by uploading it here.') ?></p>	<form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-plugin') ?>">		<?php wp_nonce_field( 'plugin-upload') ?>		<label class="screen-reader-text" for="pluginzip"><?php _e('Plugin zip file'); ?></label>		<input type="file" id="pluginzip" name="pluginzip" />		<input type="submit" class="button" value="<?php esc_attr_e('Install Now') ?>" />	</form><?php}add_action('install_plugins_new', 'install_new', 10, 1);/** * Display new plugins. * * @since 2.7.0 * * @param string $page */function install_new($page = 1) {	$args = array('browse' => 'new', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_updated', 'install_updated', 10, 1);/** * Display recently updated plugins. * * @since 2.7.0 * * @param string $page */function install_updated($page = 1) {	$args = array('browse' => 'updated', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}/** * Display plugin content based on plugin list. * * @since 2.7.0 * * @param array $plugins List of plugins. * @param string $page * @param int $totalpages Number of pages. */function display_plugins_table($plugins, $page = 1, $totalpages = 1){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array(), 'target' => array()),								'abbr' => array('title' => array()),'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(),'strong' => array(),								'ul' => array(), 'ol' => array(), 'li' => array(), 'p' => array(), 'br' => array());?>	<div class="tablenav">		<div class="alignleft actions">		<?php do_action('install_plugins_table_header'); ?>		</div>		<?php			$url = esc_url($_SERVER['REQUEST_URI']);			if ( ! empty($term) )				$url = add_query_arg('s', $term, $url);			if ( ! empty($type) )				$url = add_query_arg('type', $type, $url);			$page_links = paginate_links( array(				'base' => add_query_arg('paged', '%#%', $url),				'format' => '',				'prev_text' => __('&laquo;'),				'next_text' => __('&raquo;'),				'total' => $totalpages,				'current' => $page			));			if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>";?>		<br class="clear" />	</div>	<table class="widefat" id="install-plugins" cellspacing="0">		<thead>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</thead>		<tfoot>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</tfoot>		<tbody class="plugins">		<?php			if ( empty($plugins) )				echo '<tr><td colspan="5">', __('No plugins match your request.'), '</td></tr>';			foreach ( (array) $plugins as $plugin ){				if ( is_object($plugin) )					$plugin = (array) $plugin;				$title = wp_kses($plugin['name'], $plugins_allowedtags);				//Limit description to 400char, and remove any HTML.				$description = strip_tags($plugin['description']);				if ( strlen($description) > 400 )					$description = mb_substr($description, 0, 400) . '&#8230;';				//remove any trailing entities				$description = preg_replace('/&[^;\s]{0,6}$/', '', $description);				//strip leading/trailing & multiple consecutive lines				$description = trim($description);				$description = preg_replace("|(\r?\n)+|", "\n", $description);				//\n => <br>				$description = nl2br($description);				$version = wp_kses($plugin['version'], $plugins_allowedtags);				$name = strip_tags($title . ' ' . $version);				$author = $plugin['author'];				if ( ! empty($plugin['author']) )					$author = ' <cite>' . sprintf( __('By %s'), $author ) . '.</cite>';				$author = wp_kses($author, $plugins_allowedtags);				$action_links = array();				$action_links[] = '<a href="' . admin_url('plugin-install.php?tab=plugin-information&amp;plugin=' . $plugin['slug'] .									'&amp;TB_iframe=true&amp;width=600&amp;height=550') . '" class="thickbox" title="' .									esc_attr( sprintf( __( 'More information about %s' ), $name ) ) . '">' . __('Details') . '</a>';				if ( current_user_can('install_plugins') || current_user_can('update_plugins') ) {					$status = install_plugin_install_status($plugin);					switch ( $status['status'] ) {						case 'install':							if ( $status['url'] )								$action_links[] = '<a class="install-now" href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Install %s' ), $name ) ) . '">' . __('Install Now') . '</a>';							break;						case 'update_available':							if ( $status['url'] )								$action_links[] = '<a href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Update to version %s' ), $status['version'] ) ) . '">' . sprintf( __('Update Now'), $status['version'] ) . '</a>';							break;						case 'latest_installed':						case 'newer_installed':							$action_links[] = '<span title="' . esc_attr__( 'This plugin is already installed and is up to date' ) . ' ">' . __('Installed') . '</span>';							break;					}				}				$action_links = apply_filters( 'plugin_install_action_links', $action_links, $plugin );			?>			<tr>				<td class="name"><strong><?php echo $title; ?></strong>					<div class="action-links"><?php if ( !empty($action_links) ) echo implode(' | ', $action_links); ?></div>				</td>				<td class="vers"><?php echo $version; ?></td>				<td class="vers">					<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $plugin['num_ratings']), number_format_i18n($plugin['num_ratings'])) ?>">						<div class="star star-rating" style="width: <?php echo esc_attr($plugin['rating']) ?>px"></div>						<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>						<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>						<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>						<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>						<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>					</div>				</td>				<td class="desc"><?php echo $description, $author; ?></td>			</tr>			<?php			}			?>		</tbody>	</table>	<div class="tablenav">		<?php if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?>		<br class="clear" />	</div><?php}add_action('install_plugins_pre_plugin-information', 'install_plugin_information');/** * Determine the status we can perform on a plugin. * * @since 3.0.0 */function install_plugin_install_status($api, $loop = false) {	// this function is called recursivly, $loop prevents futhur loops.	if ( is_array($api) )		$api = (object) $api;	//Default to a "new" plugin	$status = 'install';	$url = false;	//Check to see if this plugin is known to be installed, and has an update awaiting it.	$update_plugins = get_site_transient('update_plugins');	if ( is_object( $update_plugins ) ) {		foreach ( (array)$update_plugins->response as $file => $plugin ) {			if ( $plugin->slug === $api->slug ) {				$status = 'update_available';				$update_file = $file;				$version = $plugin->new_version;				if ( current_user_can('update_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=upgrade-plugin&plugin=' . $update_file), 'upgrade-plugin_' . $update_file);				break;			}		}	}	if ( 'install' == $status ) {		if ( is_dir( WP_PLUGIN_DIR  . '/' . $api->slug ) ) {			$installed_plugin = get_plugins('/' . $api->slug);			if ( empty($installed_plugin) ) {				if ( current_user_can('install_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);			} else {				$key = array_shift( $key = array_keys($installed_plugin) ); //Use the first plugin regardless of the name, Could have issues for multiple-plugins in one directory if they share different version numbers				if ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '=') ){					$status = 'latest_installed';				} elseif ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '<') ) {					$status = 'newer_installed';					$version = $installed_plugin[ $key ]['Version'];				} else {					//If the above update check failed, Then that probably means that the update checker has out-of-date information, force a refresh					if ( ! $loop ) {						delete_site_transient('update_plugins');						wp_update_plugins();						return install_plugin_install_status($api, true);					}				}			}		} else {			// "install" & no directory with that slug			if ( current_user_can('install_plugins') )				$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);		}	}	if ( isset($_GET['from']) )		$url .= '&amp;from=' . urlencode(stripslashes($_GET['from']));	return compact('status', 'url', 'version');}/** * Display plugin information in dialog box form. * * @since 2.7.0 */function install_plugin_information() {	global $tab;	$api = plugins_api('plugin_information', array('slug' => stripslashes( $_REQUEST['plugin'] ) ));	if ( is_wp_error($api) )		wp_die($api);	$plugins_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),								'abbr' => array('title' => array()), 'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),								'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),								'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),								'img' => array('src' => array(), 'class' => array(), 'alt' => array()));	//Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $plugins_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key )		$api->$key = wp_kses($api->$key, $plugins_allowedtags);	$section = isset($_REQUEST['section']) ? stripslashes( $_REQUEST['section'] ) : 'description'; //Default to the Description tab, Do not translate, API returns English.	if ( empty($section) || ! isset($api->sections[ $section ]) )		$section = array_shift( $section_titles = array_keys((array)$api->sections) );	iframe_header( __('Plugin Install') );	echo "<div id='$tab-header'>\n";	echo "<ul id='sidemenu'>\n";	foreach ( (array)$api->sections as $section_name => $content ) {		$title = $section_name;		$title = ucwords(str_replace('_', ' ', $title));		$class = ( $section_name == $section ) ? ' class="current"' : '';		$href = add_query_arg( array('tab' => $tab, 'section' => $section_name) );		$href = esc_url($href);		$san_title = esc_attr(sanitize_title_with_dashes($title));		echo "\t<li><a name='$san_title' target='' href='$href'$class>$title</a></li>\n";	}	echo "</ul>\n";	echo "</div>\n";	?>	<div class="alignright fyi">		<?php if ( ! empty($api->download_link) && ( current_user_can('install_plugins') || current_user_can('update_plugins') ) ) : ?>		<p class="action-button">		<?php		$status = install_plugin_install_status($api);		switch ( $status['status'] ) {			case 'install':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Now') . '</a>';				break;			case 'update_available':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Update Now') .'</a>';				break;			case 'newer_installed':				echo '<a>' . sprintf(__('Newer Version (%s) Installed'), $status['version']) . '</a>';				break;			case 'latest_installed':				echo '<a>' . __('Latest Version Installed') . '</a>';				break;		}		?>		</p>		<?php endif; ?>		<h2 class="mainheader"><?php /* translators: For Your Information */ _e('FYI') ?></h2>		<ul><?php if ( ! empty($api->version) ) : ?>			<li><strong><?php _e('Version:') ?></strong> <?php echo $api->version ?></li><?php endif; if ( ! empty($api->author) ) : ?>			<li><strong><?php _e('Author:') ?></strong> <?php echo links_add_target($api->author, '_blank') ?></li><?php endif; if ( ! empty($api->last_updated) ) : ?>			<li><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $api->last_updated ?>"><?php							printf( __('%s ago'), human_time_diff(strtotime($api->last_updated)) ) ?></span></li><?php endif; if ( ! empty($api->requires) ) : ?>			<li><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $api->requires) ?></li><?php endif; if ( ! empty($api->tested) ) : ?>			<li><strong><?php _e('Compatible up to:') ?></strong> <?php echo $api->tested ?></li><?php endif; if ( ! empty($api->downloaded) ) : ?>			<li><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $api->downloaded), number_format_i18n($api->downloaded)) ?></li><?php endif; if ( ! empty($api->slug) && empty($api->external) ) : ?>			<li><a target="_blank" href="http://wordpress.org/extend/plugins/<?php echo $api->slug ?>/"><?php _e('WordPress.org Plugin Page &#187;') ?></a></li><?php endif; if ( ! empty($api->homepage) ) : ?>			<li><a target="_blank" href="<?php echo $api->homepage ?>"><?php _e('Plugin Homepage  &#187;') ?></a></li><?php endif; ?>		</ul>		<?php if ( ! empty($api->rating) ) : ?>		<h2><?php _e('Average Rating') ?></h2>		<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?>">			<div class="star star-rating" style="width: <?php echo esc_attr($api->rating) ?>px"></div>			<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>			<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>			<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>			<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>			<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>		</div>		<small><?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?></small>		<?php endif; ?>	</div>	<div id="section-holder" class="wrap">	<?php		if ( !empty($api->tested) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->tested)), $api->tested, '>') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';		else if ( !empty($api->requires) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->requires)), $api->requires, '<') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been marked as compatible</strong> with your version of WordPress.') . '</p></div>';		foreach ( (array)$api->sections as $section_name => $content ) {			$title = $section_name;			$title[0] = strtoupper($title[0]);			$title = str_replace('_', ' ', $title);			$content = links_add_base_url($content, 'http://wordpress.org/extend/plugins/' . $api->slug . '/');			$content = links_add_target($content, '_blank');			$san_title = esc_attr(sanitize_title_with_dashes($title));			$display = ( $section_name == $section ) ? 'block' : 'none';			echo "\t<div id='section-{$san_title}' class='section' style='display: {$display};'>\n";			echo "\t\t<h2 class='long-header'>$title</h2>";			echo $content;			echo "\t</div>\n";		}	echo "</div>\n";	iframe_footer();	exit;}
<?php/** * Category Template Tags and API. * * @package WordPress * @subpackage Template *//** * Retrieve category link URL. * * @since 1.0.0 * @uses apply_filters() Calls 'category_link' filter on category link and category ID. * * @param int $category_id Category ID. * @return string */function get_category_link( $category_id ) {	global $wp_rewrite;	$catlink = $wp_rewrite->get_category_permastruct();	if ( empty( $catlink ) ) {		$catlink = home_url('?cat=' . $category_id);	} else {		$category = &get_category( $category_id );		if ( is_wp_error( $category ) )			return $category;		$category_nicename = $category->slug;		if ( $category->parent == $category_id ) // recursive recursion			$category->parent = 0;		elseif ($category->parent != 0 )			$category_nicename = get_category_parents( $category->parent, false, '/', true ) . $category_nicename;		$catlink = str_replace( '%category%', $category_nicename, $catlink );		$catlink = home_url( user_trailingslashit( $catlink, 'category' ) );	}	return apply_filters( 'category_link', $catlink, $category_id );}/** * Retrieve category parents with separator. * * @since 1.2.0 * * @param int $id Category ID. * @param bool $link Optional, default is false. Whether to format with link. * @param string $separator Optional, default is '/'. How to separate categories. * @param bool $nicename Optional, default is false. Whether to use nice name for display. * @param array $visited Optional. Already linked to categories to prevent duplicates. * @return string */function get_category_parents( $id, $link = false, $separator = '/', $nicename = false, $visited = array() ) {	$chain = '';	$parent = &get_category( $id );	if ( is_wp_error( $parent ) )		return $parent;	if ( $nicename )		$name = $parent->slug;	else		$name = $parent->cat_name;	if ( $parent->parent && ( $parent->parent != $parent->term_id ) && !in_array( $parent->parent, $visited ) ) {		$visited[] = $parent->parent;		$chain .= get_category_parents( $parent->parent, $link, $separator, $nicename, $visited );	}	if ( $link )		$chain .= '<a href="' . get_category_link( $parent->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $parent->cat_name ) ) . '">'.$name.'</a>' . $separator;	else		$chain .= $name.$separator;	return $chain;}/** * Retrieve post categories. * * @since 0.71 * @uses $post * * @param int $id Optional, default to current post ID. The post ID. * @return array */function get_the_category( $id = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	$categories = get_object_term_cache( $id, 'category' );	if ( false === $categories ) {		$categories = wp_get_object_terms( $id, 'category' );		wp_cache_add($id, $categories, 'category_relationships');	}	if ( !empty( $categories ) )		usort( $categories, '_usort_terms_by_name' );	else		$categories = array();	foreach ( (array) array_keys( $categories ) as $key ) {		_make_cat_compat( $categories[$key] );	}	return $categories;}/** * Sort categories by name. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_name( $a, $b ) {	return strcmp( $a->name, $b->name );}/** * Sort categories by ID. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_ID( $a, $b ) {	if ( $a->term_id > $b->term_id )		return 1;	elseif ( $a->term_id < $b->term_id )		return -1;	else		return 0;}/** * Retrieve category name based on category ID. * * @since 0.71 * * @param int $cat_ID Category ID. * @return string Category name. */function get_the_category_by_ID( $cat_ID ) {	$cat_ID = (int) $cat_ID;	$category = &get_category( $cat_ID );	if ( is_wp_error( $category ) )		return $category;	return $category->name;}/** * Retrieve category list in either HTML list or custom format. * * @since 1.5.1 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. * @return string */function get_the_category_list( $separator = '', $parents='', $post_id = false ) {	global $wp_rewrite;	$categories = get_the_category( $post_id );	if ( !is_object_in_taxonomy( get_post_type( $post_id ), 'category' ) )		return apply_filters( 'the_category', '', $separator, $parents );	if ( empty( $categories ) )		return apply_filters( 'the_category', __( 'Uncategorized' ), $separator, $parents );	$rel = ( is_object( $wp_rewrite ) && $wp_rewrite->using_permalinks() ) ? 'rel="category tag"' : 'rel="category"';	$thelist = '';	if ( '' == $separator ) {		$thelist .= '<ul class="post-categories">';		foreach ( $categories as $category ) {			$thelist .= "\n\t<li>";			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a></li>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= $category->name.'</a></li>';					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a></li>';			}		}		$thelist .= '</ul>';	} else {		$i = 0;		foreach ( $categories as $category ) {			if ( 0 < $i )				$thelist .= $separator;			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= "$category->cat_name</a>";					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a>';			}			++$i;		}	}	return apply_filters( 'the_category', $thelist, $separator, $parents );}/** * Check if the current post in within any of the given categories. * * The given categories are checked against the post's categories' term_ids, names and slugs. * Categories given as integers will only be checked against the post's categories' term_ids. * * Prior to v2.5 of WordPress, category names were not supported. * Prior to v2.7, category slugs were not supported. * Prior to v2.7, only one category could be compared: in_category( $single_category ). * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 1.2.0 * * @uses is_object_in_term() * * @param int|string|array $category. Category ID, name or slug, or array of said. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post is in any of the given categories. */function in_category( $category, $_post = null ) {	if ( empty( $category ) )		return false;	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'category', $category );	if ( is_wp_error( $r ) )		return false;	return $r;}/** * Display the category list for the post. * * @since 0.71 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. */function the_category( $separator = '', $parents='', $post_id = false ) {	echo get_the_category_list( $separator, $parents, $post_id );}/** * Retrieve category description. * * @since 1.0.0 * * @param int $category Optional. Category ID. Will use global category ID by default. * @return string Category description, available. */function category_description( $category = 0 ) {	return term_description( $category, 'category' );}/** * Display or retrieve the HTML dropdown list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'show_option_none' (string) - Text to display for showing no categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link get_categories()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'depth' (int) - The max depth. *     'tab_index' (int) - Tab index for select element. *     'name' (string) - The name attribute value for select element. *     'id' (string) - The ID attribute value for select element. Defaults to name if omitted. *     'class' (string) - The class attribute value for select element. *     'selected' (int) - Which category ID is selected. *     'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category. * * The 'hierarchical' argument, which is disabled by default, will override the * depth argument, unless it is true. When the argument is false, it will * display all of the categories. When it is enabled it will use the value in * the 'depth' argument. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_dropdown_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'id', 'order' => 'ASC',		'show_last_update' => 0, 'show_count' => 0,		'hide_empty' => 1, 'child_of' => 0,		'exclude' => '', 'echo' => 1,		'selected' => 0, 'hierarchical' => 0,		'name' => 'cat', 'id' => '',		'class' => 'postform', 'depth' => 0,		'tab_index' => 0, 'taxonomy' => 'category',		'hide_if_empty' => false	);	$defaults['selected'] = ( is_category() ) ? get_query_var( 'cat' ) : 0;	// Back compat.	if ( isset( $args['type'] ) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$args['taxonomy'] = 'link_category';	}	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] ) {		$r['pad_counts'] = true;	}	$r['include_last_update_time'] = $r['show_last_update'];	extract( $r );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	$categories = get_terms( $taxonomy, $r );	$name = esc_attr( $name );	$class = esc_attr( $class );	$id = $id ? esc_attr( $id ) : $name;	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output = "<select name='$name' id='$id' class='$class' $tab_index_attribute>\n";	else		$output = '';	if ( empty($categories) && ! $r['hide_if_empty'] && !empty($show_option_none) ) {		$show_option_none = apply_filters( 'list_cats', $show_option_none );		$output .= "\t<option value='-1' selected='selected'>$show_option_none</option>\n";	}	if ( ! empty( $categories ) ) {		if ( $show_option_all ) {			$show_option_all = apply_filters( 'list_cats', $show_option_all );			$selected = ( '0' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='0'$selected>$show_option_all</option>\n";		}		if ( $show_option_none ) {			$show_option_none = apply_filters( 'list_cats', $show_option_none );			$selected = ( '-1' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='-1'$selected>$show_option_none</option>\n";		}		if ( $hierarchical )			$depth = $r['depth'];  // Walk the full depth.		else			$depth = -1; // Flat.		$output .= walk_category_dropdown_tree( $categories, $depth, $r );	}	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output .= "</select>\n";	$output = apply_filters( 'wp_dropdown_cats', $output );	if ( $echo )		echo $output;	return $output;}/** * Display or retrieve the HTML list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link * walk_category_dropdown_tree()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the * description instead of the category title. *     'feed' - See {@link get_categories()}. *     'feed_type' - See {@link get_categories()}. *     'feed_image' - See {@link get_categories()}. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'exclude_tree' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'current_category' (int) - See {@link get_categories()}. *     'hierarchical' (bool) - See {@link get_categories()}. *     'title_li' (string) - See {@link get_categories()}. *     'depth' (int) - The max depth. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_list_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => __('No categories'),		'orderby' => 'name', 'order' => 'ASC',		'show_last_update' => 0, 'style' => 'list',		'show_count' => 0, 'hide_empty' => 1,		'use_desc_for_title' => 1, 'child_of' => 0,		'feed' => '', 'feed_type' => '',		'feed_image' => '', 'exclude' => '',		'exclude_tree' => '', 'current_category' => 0,		'hierarchical' => true, 'title_li' => __( 'Categories' ),		'echo' => 1, 'depth' => 0,		'taxonomy' => 'category'	);	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] )		$r['pad_counts'] = true;	if ( isset( $r['show_date'] ) )		$r['include_last_update_time'] = $r['show_date'];	if ( true == $r['hierarchical'] ) {		$r['exclude_tree'] = $r['exclude'];		$r['exclude'] = '';	}	if ( !isset( $r['class'] ) )		$r['class'] = ( 'category' == $r['taxonomy'] ) ? 'categories' : $r['taxonomy'];	extract( $r );	if ( !taxonomy_exists($taxonomy) )		return false;	$categories = get_categories( $r );	$output = '';	if ( $title_li && 'list' == $style )			$output = '<li class="' . $class . '">' . $title_li . '<ul>';	if ( empty( $categories ) ) {		if ( ! empty( $show_option_none ) ) {			if ( 'list' == $style )				$output .= '<li>' . $show_option_none . '</li>';			else				$output .= $show_option_none;		}	} else {		global $wp_query;		if( !empty( $show_option_all ) )			if ( 'list' == $style )				$output .= '<li><a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a></li>';			else				$output .= '<a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a>';		if ( empty( $r['current_category'] ) && ( is_category() || is_tax() ) )			$r['current_category'] = $wp_query->get_queried_object_id();		if ( $hierarchical )			$depth = $r['depth'];		else			$depth = -1; // Flat.		$output .= walk_category_tree( $categories, $depth, $r );	}	if ( $title_li && 'list' == $style )		$output .= '</ul></li>';	$output = apply_filters( 'wp_list_categories', $output, $args );	if ( $echo )		echo $output;	else		return $output;}/** * Display tag cloud. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the top 45 tags in the tag cloud list. * * The 'topic_count_text_callback' argument is a function, which, given the count * of the posts  with that tag, returns a text for the tooltip of the tag link. * * The 'exclude' and 'include' arguments are used for the {@link get_tags()} * function. Only one should be used, because only one will be used and the * other ignored, if they are both set. * * @since 2.3.0 * * @param array|string $args Optional. Override default arguments. * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument. */function wp_tag_cloud( $args = '' ) {	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 45,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'exclude' => '', 'include' => '', 'link' => 'view', 'taxonomy' => 'post_tag', 'echo' => true	);	$args = wp_parse_args( $args, $defaults );	$tags = get_terms( $args['taxonomy'], array_merge( $args, array( 'orderby' => 'count', 'order' => 'DESC' ) ) ); // Always query top tags	if ( empty( $tags ) )		return;	foreach ( $tags as $key => $tag ) {		if ( 'edit' == $args['link'] )			$link = get_edit_tag_link( $tag->term_id, $args['taxonomy'] );		else			$link = get_term_link( intval($tag->term_id), $args['taxonomy'] );		if ( is_wp_error( $link ) )			return false;		$tags[ $key ]->link = $link;		$tags[ $key ]->id = $tag->term_id;	}	$return = wp_generate_tag_cloud( $tags, $args ); // Here's where those top tags get sorted according to $args	$return = apply_filters( 'wp_tag_cloud', $return, $args );	if ( 'array' == $args['format'] || empty($args['echo']) )		return $return;	echo $return;}/** * Default text for tooltip for tag links * * @param integer $count number of posts with that tag * @return string text for the tooltip of a tag link. */function default_topic_count_text( $count ) {	return sprintf( _n('%s topic', '%s topics', $count), number_format_i18n( $count ) );}/** * Default topic count scaling for tag links * * @param integer $count number of posts with that tag * @return integer scaled count */function default_topic_count_scale( $count ) {	return round(log10($count + 1) * 100);}/** * Generates a tag cloud (heatmap) from provided data. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'tag_cloud_sort' filter allows you to override the sorting. * Passed to the filter: $tags array and $args array, has to return the $tags array * after sorting it. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or * 'RAND'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the entire tag cloud list. * * The 'topic_count_text_callback' argument is a function, which given the count * of the posts  with that tag returns a text for the tooltip of the tag link. * * @todo Complete functionality. * @since 2.3.0 * * @param array $tags List of tags. * @param string|array $args Optional, override default arguments. * @return string */function wp_generate_tag_cloud( $tags, $args = '' ) {	global $wp_rewrite;	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 0,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'topic_count_text_callback' => 'default_topic_count_text',		'topic_count_scale_callback' => 'default_topic_count_scale', 'filter' => 1,	);	if ( !isset( $args['topic_count_text_callback'] ) && isset( $args['single_text'] ) && isset( $args['multiple_text'] ) ) {		$body = 'return sprintf (			_n(' . var_export($args['single_text'], true) . ', ' . var_export($args['multiple_text'], true) . ', $count),			number_format_i18n( $count ));';		$args['topic_count_text_callback'] = create_function('$count', $body);	}	$args = wp_parse_args( $args, $defaults );	extract( $args );	if ( empty( $tags ) )		return;	$tags_sorted = apply_filters( 'tag_cloud_sort', $tags, $args );	if ( $tags_sorted != $tags  ) { // the tags have been sorted by a plugin		$tags = $tags_sorted;		unset($tags_sorted);	} else {		if ( 'RAND' == $order ) {			shuffle($tags);		} else {			// SQL cannot save you; this is a second (potentially different) sort on a subset of data.			if ( 'name' == $orderby )				uasort( $tags, create_function('$a, $b', 'return strnatcasecmp($a->name, $b->name);') );			else				uasort( $tags, create_function('$a, $b', 'return ($a->count > $b->count);') );			if ( 'DESC' == $order )				$tags = array_reverse( $tags, true );		}	}	if ( $number > 0 )		$tags = array_slice($tags, 0, $number);	$counts = array();	$real_counts = array(); // For the alt tag	foreach ( (array) $tags as $key => $tag ) {		$real_counts[ $key ] = $tag->count;		$counts[ $key ] = $topic_count_scale_callback($tag->count);	}	$min_count = min( $counts );	$spread = max( $counts ) - $min_count;	if ( $spread <= 0 )		$spread = 1;	$font_spread = $largest - $smallest;	if ( $font_spread < 0 )		$font_spread = 1;	$font_step = $font_spread / $spread;	$a = array();	foreach ( $tags as $key => $tag ) {		$count = $counts[ $key ];		$real_count = $real_counts[ $key ];		$tag_link = '#' != $tag->link ? esc_url( $tag->link ) : '#';		$tag_id = isset($tags[ $key ]->id) ? $tags[ $key ]->id : $key;		$tag_name = $tags[ $key ]->name;		$a[] = "<a href='$tag_link' class='tag-link-$tag_id' title='" . esc_attr( $topic_count_text_callback( $real_count ) ) . "' style='font-size: " .			( $smallest + ( ( $count - $min_count ) * $font_step ) )			. "$unit;'>$tag_name</a>";	}	switch ( $format ) :	case 'array' :		$return =& $a;		break;	case 'list' :		$return = "<ul class='wp-tag-cloud'>\n\t<li>";		$return .= join( "</li>\n\t<li>", $a );		$return .= "</li>\n</ul>\n";		break;	default :		$return = join( $separator, $a );		break;	endswitch;    if ( $filter )		return apply_filters( 'wp_generate_tag_cloud', $return, $tags, $args );    else		return $return;}//// Helper functions///** * Retrieve HTML list content for category list. * * @uses Walker_Category to create HTML list content. * @since 2.1.0 * @see Walker_Category::walk() for parameters and return description. */function walk_category_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_Category;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}/** * Retrieve HTML dropdown (select) content for category list. * * @uses Walker_CategoryDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_CategoryDropdown::walk() for parameters and return description. */function walk_category_dropdown_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_CategoryDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}//// Tags///** * Retrieve the link to the tag. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_link' with tag link and tag ID as parameters. * * @param int $tag_id Tag (term) ID. * @return string */function get_tag_link( $tag_id ) {	global $wp_rewrite;	$taglink = $wp_rewrite->get_tag_permastruct();	$tag = &get_term( $tag_id, 'post_tag' );	if ( is_wp_error( $tag ) )		return $tag;	$slug = $tag->slug;	if ( empty( $taglink ) ) {		$file = get_option( 'home' ) . '/';		$taglink = $file . '?tag=' . $slug;	} else {		$taglink = str_replace( '%tag%', $slug, $taglink );		$taglink = get_option( 'home' ) . user_trailingslashit( $taglink, 'category' );	}	return apply_filters( 'tag_link', $taglink, $tag_id );}/** * Retrieve the tags for a post. * * @since 2.3.0 * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags. * * @param int $id Post ID. * @return array */function get_the_tags( $id = 0 ) {	return apply_filters( 'get_the_tags', get_the_terms( $id, 'post_tag' ) );}/** * Retrieve the tags for a post formatted as a string. * * @since 2.3.0 * @uses apply_filters() Calls 'the_tags' filter on string list of tags. * * @param string $before Optional. Before tags. * @param string $sep Optional. Between tags. * @param string $after Optional. After tags. * @return string */function get_the_tag_list( $before = '', $sep = '', $after = '' ) {	return apply_filters( 'the_tags', get_the_term_list( 0, 'post_tag', $before, $sep, $after ), $before, $sep, $after);}/** * Retrieve the tags for a post. * * @since 2.3.0 * * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function the_tags( $before = null, $sep = ', ', $after = '' ) {	if ( null === $before )		$before = __('Tags: ');	echo get_the_tag_list($before, $sep, $after);}/** * Retrieve tag description. * * @since 2.8 * * @param int $tag Optional. Tag ID. Will use global tag ID by default. * @return string Tag description, available. */function tag_description( $tag = 0 ) {	return term_description( $tag );}/** * Retrieve term description. * * @since 2.8 * * @param int $term Optional. Term ID. Will use global term ID by default. * @return string Term description, available. */function term_description( $term = 0, $taxonomy = 'post_tag' ) {	if ( !$term && ( is_tax() || is_tag() || is_category() ) ) {		global $wp_query;		$term = $wp_query->get_queried_object();		$taxonomy = $term->taxonomy;		$term = $term->term_id;	}	$description = get_term_field( 'description', $term, $taxonomy );	return is_wp_error( $description ) ? '' : $description;}/** * Retrieve the terms of the taxonomy that are attached to the post. * * This function can only be used within the loop. * * @since 2.5.0 * * @param int $id Post ID. Is not optional. * @param string $taxonomy Taxonomy name. * @return array|bool False on failure. Array of term objects on success. */function get_the_terms( $id = 0, $taxonomy ) {	global $post; 	$id = (int) $id;	if ( !$id ) {		if ( !$post->ID )			return false;		else			$id = (int) $post->ID;	}	$terms = get_object_term_cache( $id, $taxonomy );	if ( false === $terms )		$terms = wp_get_object_terms( $id, $taxonomy );	if ( empty( $terms ) )		return false;	return $terms;}/** * Retrieve a post's terms as a list with specified format. * * @since 2.5.0 * * @param int $id Post ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function get_the_term_list( $id = 0, $taxonomy, $before = '', $sep = '', $after = '' ) {	$terms = get_the_terms( $id, $taxonomy );	if ( is_wp_error( $terms ) )		return $terms;	if ( empty( $terms ) )		return false;	foreach ( $terms as $term ) {		$link = get_term_link( $term, $taxonomy );		if ( is_wp_error( $link ) )			return $link;		$term_links[] = '<a href="' . $link . '" rel="tag">' . $term->name . '</a>';	}	$term_links = apply_filters( "term_links-$taxonomy", $term_links );	return $before . join( $sep, $term_links ) . $after;}/** * Display the terms in a list. * * @since 2.5.0 * * @param int $id Term ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return null|bool False on WordPress error. Returns null when displaying. */function the_terms( $id, $taxonomy, $before = '', $sep = ', ', $after = '' ) {	$term_list = get_the_term_list( $id, $taxonomy, $before, $sep, $after );	if ( is_wp_error( $term_list ) )		return false;	echo apply_filters('the_terms', $term_list, $taxonomy, $before, $sep, $after);}/** * Check if the current post has any of given tags. * * The given tags are checked against the post's tags' term_ids, names and slugs. * Tags given as integers will only be checked against the post's tags' term_ids. * If no tags are given, determines if post has any tags. * * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids) * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 2.6.0 * * @uses is_object_in_term() * * @param string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post has any of the the given tags (or any tag, if no tag specified). */function has_tag( $tag = '', $_post = null ) {	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'post_tag', $tag );	if ( is_wp_error( $r ) )		return false;	return $r;}?>
<?php/** * WordPress Administration Update API * * @package WordPress * @subpackage Administration */// The admin side of our 1.1 update system/** * Selects the first update version from the update_core option * * @return object the response from the API */function get_preferred_from_update_core() {	$updates = get_core_updates();	if ( !is_array( $updates ) )		return false;	if ( empty( $updates ) )		return (object)array('response' => 'latest');	return $updates[0];}/** * Get available core updates * * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too, * 	set $options['available'] to false to skip not-dimissed updates. * @return array Array of the update objects */function get_core_updates( $options = array() ) {	$options = array_merge( array('available' => true, 'dismissed' => false ), $options );	$dismissed = get_site_option( 'dismissed_update_core' );	if ( !is_array( $dismissed ) ) $dismissed = array();	$from_api = get_site_transient( 'update_core' );	if ( empty($from_api) )		return false;	if ( !isset( $from_api->updates ) || !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	if ( !is_array( $updates ) ) return false;	$result = array();	foreach($updates as $update) {		if ( array_key_exists( $update->current.'|'.$update->locale, $dismissed ) ) {			if ( $options['dismissed'] ) {				$update->dismissed = true;				$result[]= $update;			}		} else {			if ( $options['available'] ) {				$update->dismissed = false;				$result[]= $update;			}		}	}	return $result;}function dismiss_core_update( $update ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$dismissed[ $update->current.'|'.$update->locale ] = true;	return update_site_option( 'dismissed_update_core', $dismissed );}function undismiss_core_update( $version, $locale ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$key = $version.'|'.$locale;	if ( !isset( $dismissed[$key] ) ) return false;	unset( $dismissed[$key] );	return update_site_option( 'dismissed_update_core', $dismissed );}function find_core_update( $version, $locale ) {	$from_api = get_site_transient( 'update_core' );	if ( !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	foreach($updates as $update) {		if ( $update->current == $version && $update->locale == $locale )			return $update;	}	return false;}function core_update_footer( $msg = '' ) {	if ( is_multisite() && !current_user_can('update_core') )		return false;	if ( !current_user_can('update_core') )		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->current ) )		$cur->current = '';	if ( ! isset( $cur->url ) )		$cur->url = '';	if ( ! isset( $cur->response ) )		$cur->response = '';	switch ( $cur->response ) {	case 'development' :		return sprintf( __( 'You are using a development version (%1$s). Cool! Please <a href="%2$s">stay updated</a>.' ), $GLOBALS['wp_version'], 'update-core.php');	break;	case 'upgrade' :		return sprintf( '<strong>'.__( '<a href="%1$s">Get Version %2$s</a>' ).'</strong>', 'update-core.php', $cur->current);	break;	case 'latest' :	default :		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	break;	}}add_filter( 'update_footer', 'core_update_footer' );function update_nag() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	global $pagenow;	if ( 'update-core.php' == $pagenow )		return;	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->response ) || $cur->response != 'upgrade' )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! <a href="%2$s">Please update now</a>.'), $cur->current, 'update-core.php' );	else		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! Please notify the site administrator.'), $cur->current );	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'update_nag', 3 );// Called directly from dashboardfunction update_right_now_message() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	$cur = get_preferred_from_update_core();	$msg = sprintf( __('You are using <span class="b">WordPress %s</span>.'), $GLOBALS['wp_version'] );	if ( isset( $cur->response ) && $cur->response == 'upgrade' && current_user_can('update_core') )		$msg .= " <a href='update-core.php' class='button'>" . sprintf( __('Update to %s'), $cur->current ? $cur->current : __( 'Latest' ) ) . '</a>';	echo "<span id='wp-version-message'>$msg</span>";}function get_plugin_updates() {	$all_plugins = get_plugins();	$upgrade_plugins = array();	$current = get_site_transient( 'update_plugins' );	foreach ( (array)$all_plugins as $plugin_file => $plugin_data) {		if ( isset( $current->response[ $plugin_file ] ) ) {			$upgrade_plugins[ $plugin_file ] = (object) $plugin_data;			$upgrade_plugins[ $plugin_file ]->update = $current->response[ $plugin_file ];		}	}	return $upgrade_plugins;}function wp_plugin_update_rows() {	if ( !current_user_can('update_plugins' ) )		return;	$plugins = get_site_transient( 'update_plugins' );	if ( isset($plugins->response) && is_array($plugins->response) ) {		$plugins = array_keys( $plugins->response );		foreach( $plugins as $plugin_file ) {			add_action( "after_plugin_row_$plugin_file", 'wp_plugin_update_row', 10, 2 );		}	}}add_action( 'admin_init', 'wp_plugin_update_rows' );function wp_plugin_update_row( $file, $plugin_data ) {	$current = get_site_transient( 'update_plugins' );	if ( !isset( $current->response[ $file ] ) )		return false;	$r = $current->response[ $file ];	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	$plugin_name = wp_kses( $plugin_data['Name'], $plugins_allowedtags );	$details_url = admin_url('plugin-install.php?tab=plugin-information&plugin=' . $r->slug . '&TB_iframe=true&width=600&height=800');	echo '<tr class="plugin-update-tr"><td colspan="3" class="plugin-update"><div class="update-message">';	if ( ! current_user_can('update_plugins') )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else if ( empty($r->package) )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> <em>automatic upgrade unavailable for this plugin</em>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> or <a href="%5$s">upgrade automatically</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version, wp_nonce_url('update.php?action=upgrade-plugin&plugin=' . $file, 'upgrade-plugin_' . $file) );	do_action( "in_plugin_update_message-$file", $plugin_data, $r );	echo '</div></td></tr>';}function wp_update_plugin($plugin, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Plugin_Upgrader();	return $upgrader->upgrade($plugin);}function get_theme_updates() {	$themes = get_themes();	$current = get_site_transient('update_themes');	$update_themes = array();	foreach ( $themes as $theme ) {		$theme = (object) $theme;		if ( isset($current->response[ $theme->Stylesheet ]) ) {			$update_themes[$theme->Stylesheet] = $theme;			$update_themes[$theme->Stylesheet]->update = $current->response[ $theme->Stylesheet ];		}	}	return $update_themes;}function wp_update_theme($theme, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Theme_Upgrader();	return $upgrader->upgrade($theme);}function wp_update_core($current, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Core_Upgrader();	return $upgrader->upgrade($current);}function maintenance_nag() {	global $upgrading;	if ( ! isset( $upgrading ) )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('An automated WordPress update has failed to complete - <a href="%s">please attempt the update again now</a>.'), 'update-core.php' );	else		$msg = __('An automated WordPress update has failed to complete! Please notify the site administrator.');	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'maintenance_nag' );?>
<?php/** * Deprecated admin functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed * in a later version. * * @package WordPress * @subpackage Deprecated *//* * Deprecated functions come here to die. *//** * @since 2.1 * @deprecated 2.1 * @deprecated Use wp_tiny_mce(). * @see wp_tiny_mce() */function tinymce_include() {	_deprecated_function( __FUNCTION__, '2.1', 'wp_tiny_mce()' );	wp_tiny_mce();}/** * Unused Admin function. * * @since 2.0 * @deprecated 2.5 * */function documentation_link() {	_deprecated_function( __FUNCTION__, '2.5', '' );	return;}/** * Calculates the new dimentions for a downsampled image. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use wp_constrain_dimensions() * * @param int $width Current width of the image * @param int $height Current height of the image * @param int $wmax Maximum wanted width * @param int $hmax Maximum wanted height * @return mixed Array(height,width) of shrunk dimensions. */function wp_shrink_dimensions( $width, $height, $wmax = 128, $hmax = 96 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_constrain_dimensions()' );	return wp_constrain_dimensions( $width, $height, $wmax, $hmax );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated unknown * @deprecated Use wp_category_checklist() * @see wp_category_checklist() * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $popular_ids */function dropdown_categories( $default = 0, $parent = 0, $popular_ids = array() ) {	_deprecated_function( __FUNCTION__, '0.0', 'wp_category_checklist()' );	global $post_ID;	wp_category_checklist( $post_ID );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated unknown * @deprecated Use wp_link_category_checklist() * @see wp_link_category_checklist() * * @param unknown_type $default */function dropdown_link_categories( $default = 0 ) {	_deprecated_function( __FUNCTION__, '0.0', 'wp_link_category_checklist()' );	global $link_id;	wp_link_category_checklist( $link_id );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated 3.0.0 * @deprecated Use wp_dropdown_categories() * @see wp_dropdown_categories() * * @param unknown_type $currentcat * @param unknown_type $currentparent * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $categories * @return unknown */function wp_dropdown_cats( $currentcat = 0, $currentparent = 0, $parent = 0, $level = 0, $categories = 0 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_dropdown_categories()' );	if (!$categories )		$categories = get_categories( array('hide_empty' => 0) );	if ( $categories ) {		foreach ( $categories as $category ) {			if ( $currentcat != $category->term_id && $parent == $category->parent) {				$pad = str_repeat( '&#8211; ', $level );				$category->name = esc_html( $category->name );				echo "\n\t<option value='$category->term_id'";				if ( $currentparent == $category->term_id )					echo " selected='selected'";				echo ">$pad$category->name</option>";				wp_dropdown_cats( $currentcat, $currentparent, $category->term_id, $level +1, $categories );			}		}	} else {		return false;	}}/** * Register a setting and its sanitization callback * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use register_setting() * @see register_setting() * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function add_option_update_handler( $option_group, $option_name, $sanitize_callback = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'register_setting()' );	return register_setting( $option_group, $option_name, $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use unregister_setting() * @see unregister_setting() * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function remove_option_update_handler( $option_group, $option_name, $sanitize_callback = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'unregister_setting()' );	return unregister_setting( $option_group, $option_name, $sanitize_callback );}/** * Determines the language to use for CodePress syntax highlighting. * * @since 2.8.0 * @deprecated 3.0.0 * * @param string $filename**/function codepress_get_lang( $filename ) {	_deprecated_function( __FUNCTION__, '3.0' );	return;}/** * Adds Javascript required to make CodePress work on the theme/plugin editors. * * @since 2.8.0 * @deprecated 3.0.0**/function codepress_footer_js() {	_deprecated_function( __FUNCTION__, '3.0' );	return;}/** * Determine whether to use CodePress. * * @since 2.8 * @deprecated 3.0.0**/function use_codepress() {	_deprecated_function( __FUNCTION__, '3.0' );	return;}?>
<?php/** * Comment template functions * * These functions are meant to live inside of the WordPress loop. * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current comment. * * If the comment has an empty comment_author field, then 'Anonymous' person is * assumed. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author' hook on the comment author * * @param int $comment_ID The ID of the comment for which to retrieve the author. Optional. * @return string The comment author */function get_comment_author( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( empty($comment->comment_author) ) {		if (!empty($comment->user_id)){			$user=get_userdata($comment->user_id);			$author=$user->user_login;		} else {			$author = __('Anonymous');		}	} else {		$author = $comment->comment_author;	}	return apply_filters('get_comment_author', $author);}/** * Displays the author of the current comment. * * @since 0.71 * @uses apply_filters() Calls 'comment_author' on comment author before displaying * * @param int $comment_ID The ID of the comment for which to print the author. Optional. */function comment_author( $comment_ID = 0 ) {	$author = apply_filters('comment_author', get_comment_author( $comment_ID ) );	echo $author;}/** * Retrieve the email of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_email' hook on the comment author email * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the author's email.  Optional. * @return string The current comment author's email */function get_comment_author_email( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_email', $comment->comment_author_email);}/** * Display the email of the author of the current global $comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'author_email' hook on the author email * * @param int $comment_ID The ID of the comment for which to print the author's email. Optional. */function comment_author_email( $comment_ID = 0 ) {	echo apply_filters('author_email', get_comment_author_email( $comment_ID ) );}/** * Display the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @uses get_comment_author_email_link() For generating the link * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_email_link($linktext='', $before='', $after='') {	if ( $link = get_comment_author_email_link( $linktext, $before, $after ) )		echo $link;}/** * Return the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 2.7 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function get_comment_author_email_link($linktext='', $before='', $after='') {	global $comment;	$email = apply_filters('comment_email', $comment->comment_author_email);	if ((!empty($email)) && ($email != '@')) {	$display = ($linktext != '') ? $linktext : $email;		$return  = $before;		$return .= "<a href='mailto:$email'>$display</a>";	 	$return .= $after;		return $return;	} else {		return '';	}}/** * Retrieve the html link to the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_link' hook on the complete link HTML or author * * @param int $comment_ID The ID of the comment for which to get the author's link.  Optional. * @return string Comment Author name or HTML link for author's URL */function get_comment_author_link( $comment_ID = 0 ) {	/** @todo Only call these functions when they are needed. Include in if... else blocks */	$url    = get_comment_author_url( $comment_ID );	$author = get_comment_author( $comment_ID );	if ( empty( $url ) || 'http://' == $url )		$return = $author;	else		$return = "<a href='$url' rel='external nofollow' class='url'>$author</a>";	return apply_filters('get_comment_author_link', $return);}/** * Display the html link to the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_link() Echoes result * * @param int The ID of the comment for which to print the author's link. Optional. */function comment_author_link( $comment_ID = 0 ) {	echo get_comment_author_link( $comment_ID );}/** * Retrieve the IP address of the author of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() * * @param int $comment_ID The ID of the comment for which to get the author's IP address. Optional. * @return string The comment author's IP address. */function get_comment_author_IP( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_IP', $comment->comment_author_IP);}/** * Display the IP address of the author of the current comment. * * @since 0.71 * @see get_comment_author_IP() Echoes Result * * @param int $comment_ID The ID of the comment for which to print the author's IP address.  Optional. */function comment_author_IP( $comment_ID = 0 ) {	echo get_comment_author_IP( $comment_ID );}/** * Retrieve the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_url' hook on the comment author's URL * * @param int $comment_ID The ID of the comment for which to get the author's URL.  Optional. * @return string */function get_comment_author_url( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$url = ('http://' == $comment->comment_author_url) ? '' : $comment->comment_author_url;	$url = esc_url( $url, array('http', 'https') );	return apply_filters('get_comment_author_url', $url);}/** * Display the url of the author of the current comment. * * @since 0.71 * @uses apply_filters() * @uses get_comment_author_url() Retrieves the comment author's URL * * @param int $comment_ID The ID of the comment for which to print the author's URL. Optional. */function comment_author_url( $comment_ID = 0 ) {	echo apply_filters('comment_url', get_comment_author_url( $comment_ID ));}/** * Retrieves the HTML link of the url of the author of the current comment. * * $linktext parameter is only used if the URL does not exist for the comment * author. If the URL does exist then the URL will be used and the $linktext * will be ignored. * * Encapsulate the HTML link between the $before and $after. So it will appear * in the order of $before, link, and finally $after. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_url_link' on the complete HTML before returning. * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. * @return string The HTML link between the $before and $after parameters */function get_comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	$url = get_comment_author_url();	$display = ($linktext != '') ? $linktext : $url;	$display = str_replace( 'http://www.', '', $display );	$display = str_replace( 'http://', '', $display );	if ( '/' == substr($display, -1) )		$display = substr($display, 0, -1);	$return = "$before<a href='$url' rel='external'>$display</a>$after";	return apply_filters('get_comment_author_url_link', $return);}/** * Displays the HTML link of the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_url_link() Echoes result * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	echo get_comment_author_url_link( $linktext, $before, $after );}/** * Generates semantic classes for each comment element * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @param bool $echo Whether comment_class should echo or return */function comment_class( $class = '', $comment_id = null, $post_id = null, $echo = true ) {	// Separates classes with a single space, collates classes for comment DIV	$class = 'class="' . join( ' ', get_comment_class( $class, $comment_id, $post_id ) ) . '"';	if ( $echo)		echo $class;	else		return $class;}/** * Returns the classes for the comment div as an array * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @return array Array of classes */function get_comment_class( $class = '', $comment_id = null, $post_id = null ) {	global $comment_alt, $comment_depth, $comment_thread_alt;	$comment = get_comment($comment_id);	$classes = array();	// Get the comment type (comment, trackback),	$classes[] = ( empty( $comment->comment_type ) ) ? 'comment' : $comment->comment_type;	// If the comment author has an id (registered), then print the log in name	if ( $comment->user_id > 0 && $user = get_userdata($comment->user_id) ) {		// For all registered users, 'byuser'		$classes[] = 'byuser';		$classes[] = 'comment-author-' . sanitize_html_class($user->user_nicename, $comment->user_id);		// For comment authors who are the author of the post		if ( $post = get_post($post_id) ) {			if ( $comment->user_id === $post->post_author )				$classes[] = 'bypostauthor';		}	}	if ( empty($comment_alt) )		$comment_alt = 0;	if ( empty($comment_depth) )		$comment_depth = 1;	if ( empty($comment_thread_alt) )		$comment_thread_alt = 0;	if ( $comment_alt % 2 ) {		$classes[] = 'odd';		$classes[] = 'alt';	} else {		$classes[] = 'even';	}	$comment_alt++;	// Alt for top-level comments	if ( 1 == $comment_depth ) {		if ( $comment_thread_alt % 2 ) {			$classes[] = 'thread-odd';			$classes[] = 'thread-alt';		} else {			$classes[] = 'thread-even';		}		$comment_thread_alt++;	}	$classes[] = "depth-$comment_depth";	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('comment_class', $classes, $class, $comment_id, $post_id);}/** * Retrieve the comment date of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_date' hook with the formated date and the $d parameter respectively * @uses $comment * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to get the date. Optional. * @return string The comment's date */function get_comment_date( $d = '', $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $d )		$date = mysql2date(get_option('date_format'), $comment->comment_date);	else		$date = mysql2date($d, $comment->comment_date);	return apply_filters('get_comment_date', $date, $d);}/** * Display the comment date of the current comment. * * @since 0.71 * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to print the date.  Optional. */function comment_date( $d = '', $comment_ID = 0 ) {	echo get_comment_date( $d, $comment_ID );}/** * Retrieve the excerpt of the current comment. * * Will cut each word and only output the first 20 words with '...' at the end. * If the word count is less than 20, then no truncating is done and no '...' * will appear. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls 'get_comment_excerpt' on truncated comment * * @param int $comment_ID The ID of the comment for which to get the excerpt. Optional. * @return string The maybe truncated comment with 20 words or less */function get_comment_excerpt( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$comment_text = strip_tags($comment->comment_content);	$blah = explode(' ', $comment_text);	if (count($blah) > 20) {		$k = 20;		$use_dotdotdot = 1;	} else {		$k = count($blah);		$use_dotdotdot = 0;	}	$excerpt = '';	for ($i=0; $i<$k; $i++) {		$excerpt .= $blah[$i] . ' ';	}	$excerpt .= ($use_dotdotdot) ? '...' : '';	return apply_filters('get_comment_excerpt', $excerpt);}/** * Display the excerpt of the current comment. * * @since 1.2.0 * @uses apply_filters() Calls 'comment_excerpt' hook before displaying excerpt * * @param int $comment_ID The ID of the comment for which to print the excerpt. Optional. */function comment_excerpt( $comment_ID = 0 ) {	echo apply_filters('comment_excerpt', get_comment_excerpt($comment_ID) );}/** * Retrieve the comment id of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_ID' hook for the comment ID * * @return int The comment ID */function get_comment_ID() {	global $comment;	return apply_filters('get_comment_ID', $comment->comment_ID);}/** * Displays the comment id of the current comment. * * @since 0.71 * @see get_comment_ID() Echoes Result */function comment_ID() {	echo get_comment_ID();}/** * Retrieve the link to a given comment. * * @since 1.5.0 * @uses $comment * * @param object|string|int $comment Comment to retrieve. * @param array $args Optional args. * @return string The permalink to the given comment. */function get_comment_link( $comment = null, $args = array() ) {	global $wp_rewrite, $in_comment_loop;	$comment = get_comment($comment);	// Backwards compat	if ( !is_array($args) ) {		$page = $args;		$args = array();		$args['page'] = $page;	}	$defaults = array( 'type' => 'all', 'page' => '', 'per_page' => '', 'max_depth' => '' );	$args = wp_parse_args( $args, $defaults );	if ( '' === $args['per_page'] && get_option('page_comments') )		$args['per_page'] = get_option('comments_per_page');	if ( empty($args['per_page']) ) {		$args['per_page'] = 0;		$args['page'] = 0;	}	if ( $args['per_page'] ) {		if ( '' == $args['page'] )			$args['page'] = ( !empty($in_comment_loop) ) ? get_query_var('cpage') : get_page_of_comment( $comment->comment_ID, $args );		if ( $wp_rewrite->using_permalinks() )			$link = user_trailingslashit( trailingslashit( get_permalink( $comment->comment_post_ID ) ) . 'comment-page-' . $args['page'], 'comment' );		else			$link = add_query_arg( 'cpage', $args['page'], get_permalink( $comment->comment_post_ID ) );	} else {		$link = get_permalink( $comment->comment_post_ID );	}	return apply_filters( 'get_comment_link', $link . '#comment-' . $comment->comment_ID, $comment, $args );}/** * Retrieves the link to the current post comments. * * @since 1.5.0 * * @param int $post_id Optional post id * @return string The link to the comments */function get_comments_link($post_id = 0) {	return get_permalink($post_id) . '#comments';}/** * Displays the link to the current post comments. * * @since 0.71 * * @param string $deprecated Not Used * @param bool $deprecated_2 Not Used */function comments_link( $deprecated = '', $deprecated_2 = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.72' );	if ( !empty( $deprecated_2 ) )		_deprecated_argument( __FUNCTION__, '1.3' );	echo get_comments_link();}/** * Retrieve the amount of comments a post has. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comments_number' hook on the number of comments * * @param int $post_id The Post ID * @return int The number of comments a post has */function get_comments_number( $post_id = 0 ) {	global $id;	$post_id = (int) $post_id;	if ( !$post_id )		$post_id = (int) $id;	$post = get_post($post_id);	if ( ! isset($post->comment_count) )		$count = 0;	else		$count = $post->comment_count;	return apply_filters('get_comments_number', $count, $post_id);}/** * Display the language string for the number of comments the current post has. * * @since 0.71 * @uses $id * @uses apply_filters() Calls the 'comments_number' hook on the output and number of comments respectively. * * @param string $zero Text for no comments * @param string $one Text for one comment * @param string $more Text for more than one comment * @param string $deprecated Not used. */function comments_number( $zero = false, $one = false, $more = false, $deprecated = '' ) {	global $id;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	$number = get_comments_number($id);	if ( $number > 1 )		$output = str_replace('%', number_format_i18n($number), ( false === $more ) ? __('% Comments') : $more);	elseif ( $number == 0 )		$output = ( false === $zero ) ? __('No Comments') : $zero;	else // must be one		$output = ( false === $one ) ? __('1 Comment') : $one;	echo apply_filters('comments_number', $output, $number);}/** * Retrieve the text of the current comment. * * @since 1.5.0 * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the text. Optional. * @return string The comment content */function get_comment_text( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_text', $comment->comment_content);}/** * Displays the text of the current comment. * * @since 0.71 * @uses apply_filters() Passes the comment content through the 'comment_text' hook before display * @uses get_comment_text() Gets the comment content * * @param int $comment_ID The ID of the comment for which to print the text. Optional. */function comment_text( $comment_ID = 0 ) {	echo apply_filters('comment_text', get_comment_text() );}/** * Retrieve the comment time of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filter() Calls 'get_comment_time' hook with the formatted time, the $d parameter, and $gmt parameter passed. * * @param string $d Optional. The format of the time (defaults to user's config) * @param bool $gmt Whether to use the GMT date * @param bool $translate Whether to translate the time (for use in feeds) * @return string The formatted time */function get_comment_time( $d = '', $gmt = false, $translate = true ) {	global $comment;	$comment_date = $gmt ? $comment->comment_date_gmt : $comment->comment_date;	if ( '' == $d )		$date = mysql2date(get_option('time_format'), $comment_date, $translate);	else		$date = mysql2date($d, $comment_date, $translate);	return apply_filters('get_comment_time', $date, $d, $gmt, $translate);}/** * Display the comment time of the current comment. * * @since 0.71 * * @param string $d Optional. The format of the time (defaults to user's config) */function comment_time( $d = '' ) {	echo get_comment_time($d);}/** * Retrieve the comment type of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_type' hook on the comment type * * @param int $comment_ID The ID of the comment for which to get the type. Optional. * @return string The comment type */function get_comment_type( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $comment->comment_type )		$comment->comment_type = 'comment';	return apply_filters('get_comment_type', $comment->comment_type);}/** * Display the comment type of the current comment. * * @since 0.71 * * @param string $commenttxt The string to display for comment type * @param string $trackbacktxt The string to display for trackback type * @param string $pingbacktxt The string to display for pingback type */function comment_type($commenttxt = false, $trackbacktxt = false, $pingbacktxt = false) {    if ( false === $commenttxt ) $commenttxt = _x( 'Comment', 'noun' );    if ( false === $trackbacktxt ) $trackbacktxt = __( 'Trackback' );    if ( false === $pingbacktxt ) $pingbacktxt = __( 'Pingback' );	$type = get_comment_type();	switch( $type ) {		case 'trackback' :			echo $trackbacktxt;			break;		case 'pingback' :			echo $pingbacktxt;			break;		default :			echo $commenttxt;	}}/** * Retrieve The current post's trackback URL. * * There is a check to see if permalink's have been enabled and if so, will * retrieve the pretty path. If permalinks weren't enabled, the ID of the * current post is used and appended to the correct page to go to. * * @since 1.5.0 * @uses apply_filters() Calls 'trackback_url' on the resulting trackback URL * @uses $id * * @return string The trackback URL after being filtered */function get_trackback_url() {	global $id;	if ( '' != get_option('permalink_structure') ) {		$tb_url = trailingslashit(get_permalink()) . user_trailingslashit('trackback', 'single_trackback');	} else {		$tb_url = get_option('siteurl') . '/wp-trackback.php?p=' . $id;	}	return apply_filters('trackback_url', $tb_url);}/** * Displays the current post's trackback URL. * * @since 0.71 * @uses get_trackback_url() Gets the trackback url for the current post * * @param bool $deprecated_echo Remove backwards compat in 2.5 * @return void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead. */function trackback_url( $deprecated_echo = true ) {	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '2.5', __('Use <code>get_trackback_url()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_trackback_url();	else		return get_trackback_url();}/** * Whether the current post is open for comments. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if the comments are open */function comments_open( $post_id=NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->comment_status );	return apply_filters( 'comments_open', $open, $post_id );}/** * Whether the current post is open for pings. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if pings are accepted */function pings_open( $post_id = NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->ping_status );	return apply_filters( 'pings_open', $open, $post_id );}/** * Displays form token for unfiltered comments. * * Will only display nonce token if the current user has permissions for * unfiltered html. Won't display the token for other users. * * The function was backported to 2.0.10 and was added to versions 2.1.3 and * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0. * * Backported to 2.0.10. * * @since 2.1.3 * @uses $post Gets the ID of the current post for the token */function wp_comment_form_unfiltered_html_nonce() {	global $post;	$post_id = 0;	if ( !empty($post) )		$post_id = $post->ID;	if ( current_user_can('unfiltered_html') )		wp_nonce_field('unfiltered-html-comment_' . $post_id, '_wp_unfiltered_html_comment', false);}/** * Loads the comment template specified in $file. * * Will not display the comments template if not on single post or page, or if * the post does not have comments. * * Uses the WordPress database object to query for the comments. The comments * are passed through the 'comments_array' filter hook with the list of comments * and the post ID respectively. * * The $file path is passed through a filter hook called, 'comments_template' * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path * first and if it fails it will require the default comment themplate from the * default theme. If either does not exist, then the WordPress process will be * halted. It is advised for that reason, that the default theme is not deleted. * * @since 1.5.0 * @global array $comment List of comment objects for the current post * @uses $wpdb * @uses $id * @uses $post * @uses $withcomments Will not try to get the comments if the post has none. * * @param string $file Optional, default '/comments.php'. The file to load * @param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false. * @return null Returns null if no comments appear */function comments_template( $file = '/comments.php', $separate_comments = false ) {	global $wp_query, $withcomments, $post, $wpdb, $id, $comment, $user_login, $user_ID, $user_identity, $overridden_cpage;	if ( !(is_single() || is_page() || $withcomments) || empty($post) )		return;	if ( empty($file) )		$file = '/comments.php';	$req = get_option('require_name_email');	/**	 * Comment author information fetched from the comment cookies.	 *	 * @uses wp_get_current_commenter()	 */	$commenter = wp_get_current_commenter();	/**	 * The name of the current comment author escaped for use in attributes.	 */	$comment_author = $commenter['comment_author']; // Escaped by sanitize_comment_cookies()	/**	 * The email address of the current comment author escaped for use in attributes.	 */	$comment_author_email = $commenter['comment_author_email'];  // Escaped by sanitize_comment_cookies()	/**	 * The url of the current comment author escaped for use in attributes.	 */	$comment_author_url = esc_url($commenter['comment_author_url']);	/** @todo Use API instead of SELECTs. */	if ( $user_ID) {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND (comment_approved = '1' OR ( user_id = %d AND comment_approved = '0' ) )  ORDER BY comment_date_gmt", $post->ID, $user_ID));	} else if ( empty($comment_author) ) {		$comments = get_comments( array('post_id' => $post->ID, 'status' => 'approve', 'order' => 'ASC') );	} else {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND ( comment_approved = '1' OR ( comment_author = %s AND comment_author_email = %s AND comment_approved = '0' ) ) ORDER BY comment_date_gmt", $post->ID, wp_specialchars_decode($comment_author,ENT_QUOTES), $comment_author_email));	}	// keep $comments for legacy's sake	$wp_query->comments = apply_filters( 'comments_array', $comments, $post->ID );	$comments = &$wp_query->comments;	$wp_query->comment_count = count($wp_query->comments);	update_comment_cache($wp_query->comments);	if ( $separate_comments ) {		$wp_query->comments_by_type = &separate_comments($comments);		$comments_by_type = &$wp_query->comments_by_type;	}	$overridden_cpage = FALSE;	if ( '' == get_query_var('cpage') && get_option('page_comments') ) {		set_query_var( 'cpage', 'newest' == get_option('default_comments_page') ? get_comment_pages_count() : 1 );		$overridden_cpage = TRUE;	}	if ( !defined('COMMENTS_TEMPLATE') || !COMMENTS_TEMPLATE)		define('COMMENTS_TEMPLATE', true);	$include = apply_filters('comments_template', STYLESHEETPATH . $file );	if ( file_exists( $include ) )		require( $include );	elseif ( file_exists( TEMPLATEPATH . $file ) )		require( TEMPLATEPATH .  $file );	else // Backward compat code will be removed in a future release		require( WPINC . '/theme-compat/comments.php');}/** * Displays the JS popup script to show a comment. * * If the $file parameter is empty, then the home page is assumed. The defaults * for the window are 400px by 400px. * * For the comment link popup to work, this function has to be called or the * normal comment link will be assumed. * * @since 0.71 * @global string $wpcommentspopupfile The URL to use for the popup window * @global int $wpcommentsjavascript Whether to use JavaScript. Set when function is called * * @param int $width Optional. The width of the popup window * @param int $height Optional. The height of the popup window * @param string $file Optional. Sets the location of the popup window */function comments_popup_script($width=400, $height=400, $file='') {	global $wpcommentspopupfile, $wpcommentsjavascript;	if (empty ($file)) {		$wpcommentspopupfile = '';  // Use the index.	} else {		$wpcommentspopupfile = $file;	}	$wpcommentsjavascript = 1;	$javascript = "<script type='text/javascript'>\nfunction wpopen (macagna) {\n    window.open(macagna, '_blank', 'width=$width,height=$height,scrollbars=yes,status=yes');\n}\n</script>\n";	echo $javascript;}/** * Displays the link to the comments popup window for the current post ID. * * Is not meant to be displayed on single posts and pages. Should be used on the * lists of posts * * @since 0.71 * @uses $id * @uses $wpcommentspopupfile * @uses $wpcommentsjavascript * @uses $post * * @param string $zero The string to display when no comments * @param string $one The string to display when only one comment is available * @param string $more The string to display when there are more than one comment * @param string $css_class The CSS class to use for comments * @param string $none The string to display when comments have been turned off * @return null Returns null on single posts and pages. */function comments_popup_link( $zero = false, $one = false, $more = false, $css_class = '', $none = false ) {	global $id, $wpcommentspopupfile, $wpcommentsjavascript;    if ( false === $zero ) $zero = __( 'No Comments' );    if ( false === $one ) $one = __( '1 Comment' );    if ( false === $more ) $more = __( '% Comments' );    if ( false === $none ) $none = __( 'Comments Off' );	$number = get_comments_number( $id );	if ( 0 == $number && !comments_open() && !pings_open() ) {		echo '<span' . ((!empty($css_class)) ? ' class="' . esc_attr( $css_class ) . '"' : '') . '>' . $none . '</span>';		return;	}	if ( post_password_required() ) {		echo __('Enter your password to view comments.');		return;	}	echo '<a href="';	if ( $wpcommentsjavascript ) {		if ( empty( $wpcommentspopupfile ) )			$home = home_url();		else			$home = get_option('siteurl');		echo $home . '/' . $wpcommentspopupfile . '?comments_popup=' . $id;		echo '" onclick="wpopen(this.href); return false"';	} else { // if comments_popup_script() is not in the template, display simple comment link		if ( 0 == $number )			echo get_permalink() . '#respond';		else			comments_link();		echo '"';	}	if ( !empty( $css_class ) ) {		echo ' class="'.$css_class.'" ';	}	$title = the_title_attribute( array('echo' => 0 ) );	echo apply_filters( 'comments_popup_link_attributes', '' );	echo ' title="' . esc_attr( sprintf( __('Comment on %s'), $title ) ) . '">';	comments_number( $zero, $one, $more );	echo '</a>';}/** * Retrieve HTML content for reply to comment link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_comment_reply_link($args = array(), $comment = null, $post = null) {	global $user_ID;	$defaults = array('add_below' => 'comment', 'respond_id' => 'respond', 'reply_text' => __('Reply'),		'login_text' => __('Log in to Reply'), 'depth' => 0, 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	if ( 0 == $args['depth'] || $args['max_depth'] <= $args['depth'] )		return;	extract($args, EXTR_SKIP);	$comment = get_comment($comment);	if ( empty($post) )		$post = $comment->comment_post_ID;	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	$link = '';	if ( get_option('comment_registration') && !$user_ID )		$link = '<a rel="nofollow" class="comment-reply-login" href="' . esc_url( wp_login_url( get_permalink() ) ) . '">' . $login_text . '</a>';	else		$link = "<a rel='nofollow' class='comment-reply-link' href='" . esc_url( add_query_arg( 'replytocom', $comment->comment_ID ) ) . "#" . $respond_id . "' onclick='return addComment.moveForm(\"$add_below-$comment->comment_ID\", \"$comment->comment_ID\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	return apply_filters('comment_reply_link', $before . $link . $after, $args, $comment, $post);}/** * Displays the HTML content for reply to comment link. * * @since 2.7.0 * @see get_comment_reply_link() Echoes result * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function comment_reply_link($args = array(), $comment = null, $post = null) {	echo get_comment_reply_link($args, $comment, $post);}/** * Retrieve HTML content for reply to post link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on.  Defaults to current post. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_post_reply_link($args = array(), $post = null) {	global $user_ID;	$defaults = array('add_below' => 'post', 'respond_id' => 'respond', 'reply_text' => __('Leave a Comment'),		'login_text' => __('Log in to leave a Comment'), 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	if ( get_option('comment_registration') && !$user_ID ) {		$link = '<a rel="nofollow" href="' . wp_login_url( get_permalink() ) . '">' . $login_text . '</a>';	} else {		$link = "<a rel='nofollow' class='comment-reply-link' href='" . get_permalink($post->ID) . "#$respond_id' onclick='return addComment.moveForm(\"$add_below-$post->ID\", \"0\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	}	return apply_filters('post_comments_link', $before . $link . $after, $post);}/** * Displays the HTML content for reply to post link. * @since 2.7.0 * @see get_post_reply_link() * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function post_reply_link($args = array(), $post = null) {	echo get_post_reply_link($args, $post);}/** * Retrieve HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function get_cancel_comment_reply_link($text = '') {	if ( empty($text) )		$text = __('Click here to cancel reply.');	$style = isset($_GET['replytocom']) ? '' : ' style="display:none;"';	$link = esc_html( remove_query_arg('replytocom') ) . '#respond';	return apply_filters('cancel_comment_reply_link', '<a rel="nofollow" id="cancel-comment-reply-link" href="' . $link . '"' . $style . '>' . $text . '</a>', $link, $text);}/** * Display HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function cancel_comment_reply_link($text = '') {	echo get_cancel_comment_reply_link($text);}/** * Retrieve hidden input HTML for replying to comments. * * @since 3.0.0 * * @return string Hidden input HTML for replying to comments */function get_comment_id_fields() {	global $id;	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	$result  = "<input type='hidden' name='comment_post_ID' value='$id' id='comment_post_ID' />\n";	$result .= "<input type='hidden' name='comment_parent' id='comment_parent' value='$replytoid' />\n";	return apply_filters('comment_id_fields', $result, $id, $replytoid);}/** * Output hidden input HTML for replying to comments. * * @since 2.7.0 * @see get_comment_id_fields() Echoes result */function comment_id_fields() {	echo get_comment_id_fields();}/** * Display text based on comment reply status. Only affects users with Javascript disabled. * * @since 2.7.0 * * @param string $noreplytext Optional. Text to display when not replying to a comment. * @param string $replytext Optional. Text to display when replying to a comment. Accepts "%s" for the author of the comment being replied to. * @param string $linktoparent Optional. Boolean to control making the author's name a link to their comment. */function comment_form_title( $noreplytext = false, $replytext = false, $linktoparent = TRUE ) {	global $comment;	if ( false === $noreplytext ) $noreplytext = __( 'Leave a Reply' );	if ( false === $replytext ) $replytext = __( 'Leave a Reply to %s' );	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	if ( 0 == $replytoid )		echo $noreplytext;	else {		$comment = get_comment($replytoid);		$author = ( $linktoparent ) ? '<a href="#comment-' . get_comment_ID() . '">' . get_comment_author() . '</a>' : get_comment_author();		printf( $replytext, $author );	}}/** * HTML comment list class. * * @package WordPress * @uses Walker * @since unknown */class Walker_Comment extends Walker {	/**	 * @see Walker::$tree_type	 * @since unknown	 * @var string	 */	var $tree_type = 'comment';	/**	 * @see Walker::$db_fields	 * @since unknown	 * @var array	 */	var $db_fields = array ('parent' => 'comment_parent', 'id' => 'comment_ID');	/**	 * @see Walker::start_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Uses 'style' argument for type of HTML list.	 */	function start_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "<ol class='children'>\n";				break;			default:			case 'ul':				echo "<ul class='children'>\n";				break;		}	}	/**	 * @see Walker::end_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Will only append content if style argument value is 'ol' or 'ul'.	 */	function end_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "</ol>\n";				break;			default:			case 'ul':				echo "</ul>\n";				break;		}	}	/**	 * This function is designed to enhance Walker::display_element() to	 * display children of higher nesting levels than selected inline on	 * the highest depth level displayed. This prevents them being orphaned	 * at the end of the comment list.	 *	 * Example: max_depth = 2, with 5 levels of nested content.	 * 1	 *  1.1	 *    1.1.1	 *    1.1.1.1	 *    1.1.1.1.1	 *    1.1.2	 *    1.1.2.1	 * 2	 *  2.2	 *	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		$id = $element->$id_field;		parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );		// If we're at the max depth, and the current element still has children, loop over those and display them at this level		// This is to prevent them being orphaned to the end of the list.		if ( $max_depth <= $depth + 1 && isset( $children_elements[$id]) ) {			foreach ( $children_elements[ $id ] as $child )				$this->display_element( $child, $children_elements, $max_depth, $depth, $args, $output );			unset( $children_elements[ $id ] );		}	}	/**	 * @see Walker::start_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment Comment data object.	 * @param int $depth Depth of comment in reference to parents.	 * @param array $args	 */	function start_el(&$output, $comment, $depth, $args) {		$depth++;		$GLOBALS['comment_depth'] = $depth;		if ( !empty($args['callback']) ) {			call_user_func($args['callback'], $comment, $args, $depth);			return;		}		$GLOBALS['comment'] = $comment;		extract($args, EXTR_SKIP);		if ( 'div' == $args['style'] ) {			$tag = 'div';			$add_below = 'comment';		} else {			$tag = 'li';			$add_below = 'div-comment';		}?>		<<?php echo $tag ?> <?php comment_class(empty( $args['has_children'] ) ? '' : 'parent') ?> id="comment-<?php comment_ID() ?>">		<?php if ( 'div' != $args['style'] ) : ?>		<div id="div-comment-<?php comment_ID() ?>" class="comment-body">		<?php endif; ?>		<div class="comment-author vcard">		<?php if ($args['avatar_size'] != 0) echo get_avatar( $comment, $args['avatar_size'] ); ?>		<?php printf(__('<cite class="fn">%s</cite> <span class="says">says:</span>'), get_comment_author_link()) ?>		</div><?php if ($comment->comment_approved == '0') : ?>		<em><?php _e('Your comment is awaiting moderation.') ?></em>		<br /><?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo htmlspecialchars( get_comment_link( $comment->comment_ID ) ) ?>">			<?php				/* translators: 1: date, 2: time */				printf( __('%1$s at %2$s'), get_comment_date(),  get_comment_time()) ?></a><?php edit_comment_link(__('(Edit)'),'&nbsp;&nbsp;','' );			?>		</div>		<?php comment_text() ?>		<div class="reply">		<?php comment_reply_link(array_merge( $args, array('add_below' => $add_below, 'depth' => $depth, 'max_depth' => $args['max_depth']))) ?>		</div>		<?php if ( 'div' != $args['style'] ) : ?>		</div>		<?php endif; ?><?php	}	/**	 * @see Walker::end_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment	 * @param int $depth Depth of comment.	 * @param array $args	 */	function end_el(&$output, $comment, $depth, $args) {		if ( !empty($args['end-callback']) ) {			call_user_func($args['end-callback'], $comment, $args, $depth);			return;		}		if ( 'div' == $args['style'] )			echo "</div>\n";		else			echo "</li>\n";	}}/** * List comments * * Used in the comments.php template to list comments for a particular post * * @since 2.7.0 * @uses Walker_Comment * * @param string|array $args Formatting options * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments */function wp_list_comments($args = array(), $comments = null ) {	global $wp_query, $comment_alt, $comment_depth, $comment_thread_alt, $overridden_cpage, $in_comment_loop;	$in_comment_loop = true;	$comment_alt = $comment_thread_alt = 0;	$comment_depth = 1;	$defaults = array('walker' => null, 'max_depth' => '', 'style' => 'ul', 'callback' => null, 'end-callback' => null, 'type' => 'all',		'page' => '', 'per_page' => '', 'avatar_size' => 32, 'reverse_top_level' => null, 'reverse_children' => '');	$r = wp_parse_args( $args, $defaults );	// Figure out what comments we'll be looping through ($_comments)	if ( null !== $comments ) {		$comments = (array) $comments;		if ( empty($comments) )			return;		if ( 'all' != $r['type'] ) {			$comments_by_type = &separate_comments($comments);			if ( empty($comments_by_type[$r['type']]) )				return;			$_comments = $comments_by_type[$r['type']];		} else {			$_comments = $comments;		}	} else {		if ( empty($wp_query->comments) )			return;		if ( 'all' != $r['type'] ) {			if ( empty($wp_query->comments_by_type) )				$wp_query->comments_by_type = &separate_comments($wp_query->comments);			if ( empty($wp_query->comments_by_type[$r['type']]) )				return;			$_comments = $wp_query->comments_by_type[$r['type']];		} else {			$_comments = $wp_query->comments;		}	}	if ( '' === $r['per_page'] && get_option('page_comments') )		$r['per_page'] = get_query_var('comments_per_page');	if ( empty($r['per_page']) ) {		$r['per_page'] = 0;		$r['page'] = 0;	}	if ( '' === $r['max_depth'] ) {		if ( get_option('thread_comments') )			$r['max_depth'] = get_option('thread_comments_depth');		else			$r['max_depth'] = -1;	}	if ( '' === $r['page'] ) {		if ( empty($overridden_cpage) ) {			$r['page'] = get_query_var('cpage');		} else {			$threaded = ( -1 != $r['max_depth'] );			$r['page'] = ( 'newest' == get_option('default_comments_page') ) ? get_comment_pages_count($_comments, $r['per_page'], $threaded) : 1;			set_query_var( 'cpage', $r['page'] );		}	}	// Validation check	$r['page'] = intval($r['page']);	if ( 0 == $r['page'] && 0 != $r['per_page'] )		$r['page'] = 1;	if ( null === $r['reverse_top_level'] )		$r['reverse_top_level'] = ( 'desc' == get_option('comment_order') );	extract( $r, EXTR_SKIP );	if ( empty($walker) )		$walker = new Walker_Comment;	$walker->paged_walk($_comments, $max_depth, $page, $per_page, $r);	$wp_query->max_num_comment_pages = $walker->max_pages;	$in_comment_loop = false;}/** * Outputs a complete commenting form for use within a template. * Most strings and form fields may be controlled through the $args array passed * into the function, while you may also choose to use the comment_form_default_fields * filter to modify the array of default fields if you'd just like to add a new * one or remove a single field. All fields are also individually passed through * a filter of the form comment_form_field_$name where $name is the key used * in the array of fields. * * @since 3.0.0 * @param array $args Options for strings, fields etc in the form * @param mixed $post_id Post ID to generate the form for, uses the current post if null * @return void */function comment_form( $args = array(), $post_id = null ) {	global $user_identity, $id;	if ( null === $post_id )		$post_id = $id;	else		$id = $post_id;	$commenter = wp_get_current_commenter();	$req = get_option( 'require_name_email' );	$aria_req = ( $req ? " aria-required='true'" : '' );	$fields =  array(		'author' => '<p class="comment-form-author">' . '<label for="author">' . __( 'Name' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="author" name="author" type="text" value="' . esc_attr( $commenter['comment_author'] ) . '" size="30"' . $aria_req . ' /></p>',		'email'  => '<p class="comment-form-email"><label for="email">' . __( 'Email' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="email" name="email" type="text" value="' . esc_attr(  $commenter['comment_author_email'] ) . '" size="30"' . $aria_req . ' /></p>',		'url'    => '<p class="comment-form-url"><label for="url">' . __( 'Website' ) . '</label>' .		            '<input id="url" name="url" type="text" value="' . esc_attr( $commenter['comment_author_url'] ) . '" size="30" /></p>',	);	$required_text = sprintf( ' ' . __('Required fields are marked %s'), '<span class="required">*</span>' );	$defaults = array(		'fields'               => apply_filters( 'comment_form_default_fields', $fields ),		'comment_field'        => '<p class="comment-form-comment"><label for="comment">' . _x( 'Comment', 'noun' ) . '</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>',		'must_log_in'          => '<p class="must-log-in">' .  sprintf( __( 'You must be <a href="%s">logged in</a> to post a comment.' ), wp_login_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'logged_in_as'         => '<p class="logged-in-as">' . sprintf( __( 'Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out?</a>' ), admin_url( 'profile.php' ), $user_identity, wp_logout_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'comment_notes_before' => '<p class="comment-notes">' . __( 'Your email address will not be published.' ) . ( $req ? $required_text : '' ) . '</p>',		'comment_notes_after'  => '<p class="form-allowed-tags">' . sprintf( __( 'You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: %s' ), ' <code>' . allowed_tags() . '</code>' ) . '</p>',		'id_form'              => 'commentform',		'id_submit'            => 'submit',		'title_reply'          => __( 'Leave a Reply' ),		'title_reply_to'       => __( 'Leave a Reply to %s' ),		'cancel_reply_link'    => __( 'Cancel reply' ),		'label_submit'         => __( 'Post Comment' ),	);	$args = wp_parse_args( $args, apply_filters( 'comment_form_defaults', $defaults ) );	?>		<?php if ( comments_open() ) : ?>			<?php do_action( 'comment_form_before' ); ?>			<div id="respond">				<h3 id="reply-title"><?php comment_form_title( $args['title_reply'], $args['title_reply_to'] ); ?> <small><?php cancel_comment_reply_link( $args['cancel_reply_link'] ); ?></small></h3>				<?php if ( get_option( 'comment_registration' ) && !is_user_logged_in() ) : ?>					<?php echo $args['must_log_in']; ?>					<?php do_action( 'comment_form_must_log_in_after' ); ?>				<?php else : ?>					<form action="<?php echo site_url( '/wp-comments-post.php' ); ?>" method="post" id="<?php echo esc_attr( $args['id_form'] ); ?>">						<?php do_action( 'comment_form_top' ); ?>						<?php if ( is_user_logged_in() ) : ?>							<?php echo apply_filters( 'comment_form_logged_in', $args['logged_in_as'], $commenter, $user_identity ); ?>							<?php do_action( 'comment_form_logged_in_after', $commenter, $user_identity ); ?>						<?php else : ?>							<?php echo $args['comment_notes_before']; ?>							<?php							do_action( 'comment_form_before_fields' );							foreach ( (array) $args['fields'] as $name => $field ) {								echo apply_filters( "comment_form_field_{$name}", $field ) . "\n";							}							do_action( 'comment_form_after_fields' );							?>						<?php endif; ?>						<?php echo apply_filters( 'comment_form_field_comment', $args['comment_field'] ); ?>						<?php echo $args['comment_notes_after']; ?>						<p class="form-submit">							<input name="submit" type="submit" id="<?php echo esc_attr( $args['id_submit'] ); ?>" value="<?php echo esc_attr( $args['label_submit'] ); ?>" />							<?php comment_id_fields(); ?>						</p>						<?php do_action( 'comment_form', $post_id ); ?>					</form>				<?php endif; ?>			</div><!-- #respond -->			<?php do_action( 'comment_form_after' ); ?>		<?php else : ?>			<?php do_action( 'comment_form_comments_closed' ); ?>		<?php endif; ?>	<?php}?>
<?php/** * Discussion settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Discussion Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen provides many options for controlling the management and display of comments and links to your posts/pages. So many, in fact, they won&#8217;t all fit here! :) Use the documentation link below to get information on what each discussion setting does.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Discussion_SubPanel" target="_blank">Discussion Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('discussion'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Default article settings') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Default article settings') ?></span></legend><label for="default_pingback_flag"><input name="default_pingback_flag" type="checkbox" id="default_pingback_flag" value="1" <?php checked('1', get_option('default_pingback_flag')); ?> /><?php _e('Attempt to notify any blogs linked to from the article.') ?></label><br /><label for="default_ping_status"><input name="default_ping_status" type="checkbox" id="default_ping_status" value="open" <?php checked('open', get_option('default_ping_status')); ?> /><?php _e('Allow link notifications from other blogs (pingbacks and trackbacks.)') ?></label><br /><label for="default_comment_status"><input name="default_comment_status" type="checkbox" id="default_comment_status" value="open" <?php checked('open', get_option('default_comment_status')); ?> /><?php _e('Allow people to post comments on new articles') ?></label><br /><small><em><?php echo '(' . __('These settings may be overridden for individual articles.') . ')'; ?></em></small></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Other comment settings') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Other comment settings') ?></span></legend><label for="require_name_email"><input type="checkbox" name="require_name_email" id="require_name_email" value="1" <?php checked('1', get_option('require_name_email')); ?> /> <?php _e('Comment author must fill out name and e-mail') ?></label><br /><label for="comment_registration"><input name="comment_registration" type="checkbox" id="comment_registration" value="1" <?php checked('1', get_option('comment_registration')); ?> /><?php _e('Users must be registered and logged in to comment') ?><?php if ( !get_option( 'users_can_register' ) && is_multisite() ) _e( ' (Signup has been disabled. Only members of this site can comment.)' ); ?></label><br /><label for="close_comments_for_old_posts"><input name="close_comments_for_old_posts" type="checkbox" id="close_comments_for_old_posts" value="1" <?php checked('1', get_option('close_comments_for_old_posts')); ?> /><?php printf( __('Automatically close comments on articles older than %s days'), '</label><input name="close_comments_days_old" type="text" id="close_comments_days_old" value="' . esc_attr(get_option('close_comments_days_old')) . '" class="small-text" />') ?><br /><label for="thread_comments"><input name="thread_comments" type="checkbox" id="thread_comments" value="1" <?php checked('1', get_option('thread_comments')); ?> /><?php$maxdeep = (int) apply_filters( 'thread_comments_depth_max', 10 );$thread_comments_depth = '</label><select name="thread_comments_depth" id="thread_comments_depth">';for ( $i = 2; $i <= $maxdeep; $i++ ) {	$thread_comments_depth .= "<option value='" . esc_attr($i) . "'";	if ( get_option('thread_comments_depth') == $i ) $thread_comments_depth .= " selected='selected'";	$thread_comments_depth .= ">$i</option>";}$thread_comments_depth .= '</select>';printf( __('Enable threaded (nested) comments %s levels deep'), $thread_comments_depth );?><br /><label for="page_comments"><input name="page_comments" type="checkbox" id="page_comments" value="1" <?php checked('1', get_option('page_comments')); ?> /><?php$default_comments_page = '</label><label for="default_comments_page"><select name="default_comments_page" id="default_comments_page"><option value="newest"';if ( 'newest' == get_option('default_comments_page') ) $default_comments_page .= ' selected="selected"';$default_comments_page .= '>' . __('last') . '</option><option value="oldest"';if ( 'oldest' == get_option('default_comments_page') ) $default_comments_page .= ' selected="selected"';$default_comments_page .= '>' . __('first') . '</option></select>';printf( __('Break comments into pages with %1$s top level comments per page and the %2$s page displayed by default'), '</label><label for="comments_per_page"><input name="comments_per_page" type="text" id="comments_per_page" value="' . esc_attr(get_option('comments_per_page')) . '" class="small-text" />', $default_comments_page );?></label><br /><label for="comment_order"><?php$comment_order = '<select name="comment_order" id="comment_order"><option value="asc"';if ( 'asc' == get_option('comment_order') ) $comment_order .= ' selected="selected"';$comment_order .= '>' . __('older') . '</option><option value="desc"';if ( 'desc' == get_option('comment_order') ) $comment_order .= ' selected="selected"';$comment_order .= '>' . __('newer') . '</option></select>';printf( __('Comments should be displayed with the %s comments at the top of each page'), $comment_order );?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('E-mail me whenever') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('E-mail me whenever') ?></span></legend><label for="comments_notify"><input name="comments_notify" type="checkbox" id="comments_notify" value="1" <?php checked('1', get_option('comments_notify')); ?> /><?php _e('Anyone posts a comment') ?> </label><br /><label for="moderation_notify"><input name="moderation_notify" type="checkbox" id="moderation_notify" value="1" <?php checked('1', get_option('moderation_notify')); ?> /><?php _e('A comment is held for moderation') ?> </label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Before a comment appears') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Before a comment appears') ?></span></legend><label for="comment_moderation"><input name="comment_moderation" type="checkbox" id="comment_moderation" value="1" <?php checked('1', get_option('comment_moderation')); ?> /><?php _e('An administrator must always approve the comment') ?> </label><br /><label for="comment_whitelist"><input type="checkbox" name="comment_whitelist" id="comment_whitelist" value="1" <?php checked('1', get_option('comment_whitelist')); ?> /> <?php _e('Comment author must have a previously approved comment') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Comment Moderation') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Comment Moderation') ?></span></legend><p><label for="comment_max_links"><?php printf(__('Hold a comment in the queue if it contains %s or more links. (A common characteristic of comment spam is a large number of hyperlinks.)'), '<input name="comment_max_links" type="text" id="comment_max_links" value="' . esc_attr(get_option('comment_max_links')) . '" class="small-text" />' ) ?></label></p><p><label for="moderation_keys"><?php _e('When a comment contains any of these words in its content, name, URL, e-mail, or IP, it will be held in the <a href="edit-comments.php?comment_status=moderated">moderation queue</a>. One word or IP per line. It will match inside words, so &#8220;press&#8221; will match &#8220;WordPress&#8221;.') ?></label></p><p><textarea name="moderation_keys" rows="10" cols="50" id="moderation_keys" class="large-text code"><?php form_option('moderation_keys'); ?></textarea></p></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Comment Blacklist') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Comment Blacklist') ?></span></legend><p><label for="blacklist_keys"><?php _e('When a comment contains any of these words in its content, name, URL, e-mail, or IP, it will be marked as spam. One word or IP per line. It will match inside words, so &#8220;press&#8221; will match &#8220;WordPress&#8221;.') ?></label></p><p><textarea name="blacklist_keys" rows="10" cols="50" id="blacklist_keys" class="large-text code"><?php form_option('blacklist_keys'); ?></textarea></p></fieldset></td></tr><?php do_settings_fields('discussion', 'default'); ?></table><h3><?php _e('Avatars') ?></h3><p><?php _e('An avatar is an image that follows you from weblog to weblog appearing beside your name when you comment on avatar enabled sites.  Here you can enable the display of avatars for people who comment on your site.'); ?></p><?php // the above would be a good place to link to codex documentation on the gravatar functions, for putting it in themes. anything like that? ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Avatar Display') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Avatar Display') ?></span></legend><?php	$yesorno = array( 0 => __( 'Don&#8217;t show Avatars' ), 1 => __( 'Show Avatars' ) );	foreach ( $yesorno as $key => $value) {		$selected = (get_option('show_avatars') == $key) ? 'checked="checked"' : '';		echo "\n\t<label><input type='radio' name='show_avatars' value='" . esc_attr($key) . "' $selected/> $value</label><br />";	}?></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum Rating') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Maximum Rating') ?></span></legend><?php$ratings = array(	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'G' => __('G &#8212; Suitable for all audiences'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'PG' => __('PG &#8212; Possibly offensive, usually for audiences 13 and above'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'R' => __('R &#8212; Intended for adult audiences above 17'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'X' => __('X &#8212; Even more mature than above'));foreach ($ratings as $key => $rating) :	$selected = (get_option('avatar_rating') == $key) ? 'checked="checked"' : '';	echo "\n\t<label><input type='radio' name='avatar_rating' value='" . esc_attr($key) . "' $selected/> $rating</label><br />";endforeach;?></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Default Avatar') ?></th><td class="defaultavatarpicker"><fieldset><legend class="screen-reader-text"><span><?php _e('Default Avatar') ?></span></legend><?php _e('For users without a custom avatar of their own, you can either display a generic logo or a generated one based on their e-mail address.'); ?><br /><?php$avatar_defaults = array(	'mystery' => __('Mystery Man'),	'blank' => __('Blank'),	'gravatar_default' => __('Gravatar Logo'),	'identicon' => __('Identicon (Generated)'),	'wavatar' => __('Wavatar (Generated)'),	'monsterid' => __('MonsterID (Generated)'));$avatar_defaults = apply_filters('avatar_defaults', $avatar_defaults);$default = get_option('avatar_default');if ( empty($default) )	$default = 'mystery';$size = 32;$avatar_list = '';foreach ( $avatar_defaults as $default_key => $default_name ) {	$selected = ($default == $default_key) ? 'checked="checked" ' : '';	$avatar_list .= "\n\t<label><input type='radio' name='avatar_default' id='avatar_{$default_key}' value='" . esc_attr($default_key)  . "' {$selected}/> ";	$avatar = get_avatar( $user_email, $size, $default_key );	$avatar_list .= preg_replace("/src='(.+?)'/", "src='\$1&amp;forcedefault=1'", $avatar);	$avatar_list .= ' ' . $default_name . '</label>';	$avatar_list .= '<br />';}echo apply_filters('default_avatar_select', $avatar_list);?></fieldset></td></tr><?php do_settings_fields('discussion', 'avatars'); ?></table><?php do_settings_sections('discussion'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * WordPress Administration Bootstrap * * @package WordPress * @subpackage Administration *//** * In WordPress Administration Panels * * @since unknown */if ( !defined('WP_ADMIN') )	define('WP_ADMIN', TRUE);if ( isset($_GET['import']) && !defined('WP_LOAD_IMPORTERS') )	define('WP_LOAD_IMPORTERS', true);require_once(dirname(dirname(__FILE__)) . '/wp-load.php');if ( get_option('db_upgraded') ) {	$wp_rewrite->flush_rules();	update_option( 'db_upgraded',  false );	/**	 * Runs on the next page load after successful upgrade	 *	 * @since 2.8	 */	do_action('after_db_upgrade');} elseif ( get_option('db_version') != $wp_db_version ) {	if ( !is_multisite() ) {		wp_redirect(admin_url('upgrade.php?_wp_http_referer=' . urlencode(stripslashes($_SERVER['REQUEST_URI']))));		exit;	} elseif ( apply_filters( 'do_mu_upgrade', true ) ) {		/**		 * On really small MU installs run the upgrader every time,		 * else run it less often to reduce load.		 *		 * @since 2.8.4b		 */		$c = get_blog_count();		if ( $c <= 50 || ( $c > 50 && mt_rand( 0, (int)( $c / 50 ) ) == 1 ) ) {			require_once( ABSPATH . WPINC . '/http.php' );			$response = wp_remote_get( admin_url( 'upgrade.php?step=1' ), array( 'timeout' => 120, 'httpversion' => '1.1' ) );			do_action( 'after_mu_upgrade', $response );			unset($response);		}		unset($c);	}}require_once(ABSPATH . 'wp-admin/includes/admin.php');auth_redirect();nocache_headers();update_category_cache();// Schedule trash collectionif ( !wp_next_scheduled('wp_scheduled_delete') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'daily', 'wp_scheduled_delete');set_screen_options();$date_format = get_option('date_format');$time_format = get_option('time_format');wp_reset_vars(array('profile', 'redirect', 'redirect_url', 'a', 'text', 'trackback', 'pingback'));wp_enqueue_script( 'common' );wp_enqueue_script( 'jquery-color' );$editing = false;if ( isset($_GET['page']) ) {	$plugin_page = stripslashes($_GET['page']);	$plugin_page = plugin_basename($plugin_page);}if ( isset($_GET['post_type']) )	$typenow = sanitize_key($_GET['post_type']);else	$typenow = '';if ( isset($_GET['taxonomy']) )	$taxnow = sanitize_key($_GET['taxonomy']);else	$taxnow = '';require(ABSPATH . 'wp-admin/menu.php');if ( current_user_can( 'manage_options' ) )	@ini_set( 'memory_limit', apply_filters( 'admin_memory_limit', '256M' ) );do_action('admin_init');if ( isset($plugin_page) ) {	if ( !empty($typenow) )		$the_parent = $pagenow . '?post_type=' . $typenow;	else		$the_parent = $pagenow;	if ( ! $page_hook = get_plugin_page_hook($plugin_page, $the_parent) ) {		$page_hook = get_plugin_page_hook($plugin_page, $plugin_page);		// backwards compatibility for plugins using add_management_page		if ( empty( $page_hook ) && 'edit.php' == $pagenow && '' != get_plugin_page_hook($plugin_page, 'tools.php') ) {			// There could be plugin specific params on the URL, so we need the whole query string			if ( !empty($_SERVER[ 'QUERY_STRING' ]) )				$query_string = $_SERVER[ 'QUERY_STRING' ];			else				$query_string = 'page=' . $plugin_page;			wp_redirect( 'tools.php?' . $query_string );			exit;		}	}	unset($the_parent);}$hook_suffix = '';if ( isset($page_hook) )	$hook_suffix = $page_hook;else if ( isset($plugin_page) )	$hook_suffix = $plugin_page;else if ( isset($pagenow) )	$hook_suffix = $pagenow;set_current_screen();// Handle plugin admin pages.if ( isset($plugin_page) ) {	if ( $page_hook ) {		do_action('load-' . $page_hook);		if (! isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		do_action($page_hook);	} else {		if ( validate_file($plugin_page) )			wp_die(__('Invalid plugin page'));		if ( !( file_exists(WP_PLUGIN_DIR . "/$plugin_page") && is_file(WP_PLUGIN_DIR . "/$plugin_page") ) && !( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") && is_file(WPMU_PLUGIN_DIR . "/$plugin_page") ) )			wp_die(sprintf(__('Cannot load %s.'), htmlentities($plugin_page)));		do_action('load-' . $plugin_page);		if ( !isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		if ( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") )			include(WPMU_PLUGIN_DIR . "/$plugin_page");		else			include(ABSPATH . PLUGINDIR . "/$plugin_page");	}	include(ABSPATH . 'wp-admin/admin-footer.php');	exit();} else if (isset($_GET['import'])) {	$importer = $_GET['import'];	if ( ! current_user_can('import') )		wp_die(__('You are not allowed to import.'));	if ( validate_file($importer) )		wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );	// Allow plugins to define importers as well	if ( !isset($wp_importers) || !isset($wp_importers[$importer]) || ! is_callable($wp_importers[$importer][2])) {		if (! file_exists(ABSPATH . "wp-admin/import/$importer.php"))			wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );		include(ABSPATH . "wp-admin/import/$importer.php");	}	$parent_file = 'tools.php';	$submenu_file = 'import.php';	$title = __('Import');	if (! isset($_GET['noheader']))		require_once(ABSPATH . 'wp-admin/admin-header.php');	require_once(ABSPATH . 'wp-admin/includes/upgrade.php');	define('WP_IMPORTING', true);	if ( is_multisite() )		kses_init_filters();  // Always filter imported data with kses.	call_user_func($wp_importers[$importer][2]);	include(ABSPATH . 'wp-admin/admin-footer.php');	// Make sure rules are flushed	global $wp_rewrite;	$wp_rewrite->flush_rules(false);	exit();} else {	do_action("load-$pagenow");}if ( !empty($_REQUEST['action']) )	do_action('admin_action_' . $_REQUEST['action']);?>
