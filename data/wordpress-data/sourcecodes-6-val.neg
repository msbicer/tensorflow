<?php/** * WordPress Post Template Functions. * * Gets content for the current post in the loop. * * @package WordPress * @subpackage Template *//** * Display the ID of the current item in the WordPress Loop. * * @since 0.71 * @uses $id */function the_ID() {	global $id;	echo $id;}/** * Retrieve the ID of the current item in the WordPress Loop. * * @since 2.1.0 * @uses $id * * @return unknown */function get_the_ID() {	global $id;	return $id;}/** * Display or retrieve the current post title with optional content. * * @since 0.71 * * @param string $before Optional. Content to prepend to the title. * @param string $after Optional. Content to append to the title. * @param bool $echo Optional, default to true.Whether to display or return. * @return null|string Null on no title. String if $echo parameter is false. */function the_title($before = '', $after = '', $echo = true) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$title = $before . $title . $after;	if ( $echo )		echo $title;	else		return $title;}/** * Sanitize the current title when retrieving or displaying. * * Works like {@link the_title()}, except the parameters can be in a string or * an array. See the function for what can be override in the $args parameter. * * The title before it is displayed will have the tags stripped and {@link * esc_attr()} before it is passed to the user or displayed. The default * as with {@link the_title()}, is to display the title. * * @since 2.3.0 * * @param string|array $args Optional. Override the defaults. * @return string|null Null on failure or display. String when echo is false. */function the_title_attribute( $args = '' ) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$defaults = array('before' => '', 'after' =>  '', 'echo' => true);	$r = wp_parse_args($args, $defaults);	extract( $r, EXTR_SKIP );	$title = $before . $title . $after;	$title = esc_attr(strip_tags($title));	if ( $echo )		echo $title;	else		return $title;}/** * Retrieve post title. * * If the post is protected and the visitor is not an admin, then "Protected" * will be displayed before the post title. If the post is private, then * "Private" will be located before the post title. * * @since 0.71 * * @param int $id Optional. Post ID. * @return string */function get_the_title( $id = 0 ) {	$post = &get_post($id);	$title = isset($post->post_title) ? $post->post_title : '';	$id = isset($post->ID) ? $post->ID : (int) $id;	if ( !is_admin() ) {		if ( !empty($post->post_password) ) {			$protected_title_format = apply_filters('protected_title_format', __('Protected: %s'));			$title = sprintf($protected_title_format, $title);		} else if ( isset($post->post_status) && 'private' == $post->post_status ) {			$private_title_format = apply_filters('private_title_format', __('Private: %s'));			$title = sprintf($private_title_format, $title);		}	}	return apply_filters( 'the_title', $title, $id );}/** * Display the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * Url is escaped to make it xml safe * * @since 1.5.0 * * @param int $id Optional. Post ID. */function the_guid( $id = 0 ) {	echo esc_url( get_the_guid( $id ) );}/** * Retrieve the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @return string */function get_the_guid( $id = 0 ) {	$post = &get_post($id);	return apply_filters('get_the_guid', $post->guid);}/** * Display the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. */function the_content($more_link_text = null, $stripteaser = 0) {	$content = get_the_content($more_link_text, $stripteaser);	$content = apply_filters('the_content', $content);	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Retrieve the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. * @return string */function get_the_content($more_link_text = null, $stripteaser = 0) {	global $id, $post, $more, $page, $pages, $multipage, $preview;	if ( null === $more_link_text )		$more_link_text = __( '(more...)' );	$output = '';	$hasTeaser = false;	// If post password required and it doesn't match the cookie.	if ( post_password_required($post) ) {		$output = get_the_password_form();		return $output;	}	if ( $page > count($pages) ) // if the requested page doesn't exist		$page = count($pages); // give them the highest numbered page that DOES exist	$content = $pages[$page-1];	if ( preg_match('/<!--more(.*?)?-->/', $content, $matches) ) {		$content = explode($matches[0], $content, 2);		if ( !empty($matches[1]) && !empty($more_link_text) )			$more_link_text = strip_tags(wp_kses_no_null(trim($matches[1])));		$hasTeaser = true;	} else {		$content = array($content);	}	if ( (false !== strpos($post->post_content, '<!--noteaser-->') && ((!$multipage) || ($page==1))) )		$stripteaser = 1;	$teaser = $content[0];	if ( ($more) && ($stripteaser) && ($hasTeaser) )		$teaser = '';	$output .= $teaser;	if ( count($content) > 1 ) {		if ( $more ) {			$output .= '<span id="more-' . $id . '"></span>' . $content[1];		} else {			if ( ! empty($more_link_text) )				$output .= apply_filters( 'the_content_more_link', ' <a href="' . get_permalink() . "#more-$id\" class=\"more-link\">$more_link_text</a>", $more_link_text );			$output = force_balance_tags($output);		}	}	if ( $preview ) // preview fix for javascript bug with foreign languages		$output =	preg_replace_callback('/\%u([0-9A-F]{4})/', create_function('$match', 'return "&#" . base_convert($match[1], 16, 10) . ";";'), $output);	return $output;}/** * Display the post excerpt. * * @since 0.71 * @uses apply_filters() Calls 'the_excerpt' hook on post excerpt. */function the_excerpt() {	echo apply_filters('the_excerpt', get_the_excerpt());}/** * Retrieve the post excerpt. * * @since 0.71 * * @param mixed $deprecated Not used. * @return string */function get_the_excerpt( $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	global $post;	$output = $post->post_excerpt;	if ( post_password_required($post) ) {		$output = __('There is no excerpt because this is a protected post.');		return $output;	}	return apply_filters('get_the_excerpt', $output);}/** * Whether post has excerpt. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @return bool */function has_excerpt( $id = 0 ) {	$post = &get_post( $id );	return ( !empty( $post->post_excerpt ) );}/** * Display the classes for the post div. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. */function post_class( $class = '', $post_id = null ) {	// Separates classes with a single space, collates classes for post DIV	echo 'class="' . join( ' ', get_post_class( $class, $post_id ) ) . '"';}/** * Retrieve the classes for the post div as an array. * * The class names are add are many. If the post is a sticky, then the 'sticky' * class name. The class 'hentry' is always added to each post. For each * category, the class will be added with 'category-' with category slug is * added. The tags are the same way as the categories with 'tag-' before the tag * slug. All classes are passed through the filter, 'post_class' with the list * of classes, followed by $class parameter value, with the post ID as the last * parameter. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. * @return array Array of classes. */function get_post_class( $class = '', $post_id = null ) {	$post = get_post($post_id);	$classes = array();	if ( empty($post) )		return $classes;	$classes[] = 'post-' . $post->ID;	$classes[] = $post->post_type;	$classes[] = 'type-' . $post->post_type;	// sticky for Sticky Posts	if ( is_sticky($post->ID) && is_home() && !is_paged() )		$classes[] = 'sticky';	// hentry for hAtom compliace	$classes[] = 'hentry';	// Categories	foreach ( (array) get_the_category($post->ID) as $cat ) {		if ( empty($cat->slug ) )			continue;		$classes[] = 'category-' . sanitize_html_class($cat->slug, $cat->cat_ID);	}	// Tags	foreach ( (array) get_the_tags($post->ID) as $tag ) {		if ( empty($tag->slug ) )			continue;		$classes[] = 'tag-' . sanitize_html_class($tag->slug, $tag->term_id);	}	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('post_class', $classes, $class, $post->ID);}/** * Display the classes for the body element. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. */function body_class( $class = '' ) {	// Separates classes with a single space, collates classes for body element	echo 'class="' . join( ' ', get_body_class( $class ) ) . '"';}/** * Retrieve the classes for the body element as an array. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. * @return array Array of classes. */function get_body_class( $class = '' ) {	global $wp_query, $wpdb;	$classes = array();	if ( is_rtl() )		$classes[] = 'rtl';	if ( is_front_page() )		$classes[] = 'home';	if ( is_home() )		$classes[] = 'blog';	if ( is_archive() )		$classes[] = 'archive';	if ( is_date() )		$classes[] = 'date';	if ( is_search() )		$classes[] = 'search';	if ( is_paged() )		$classes[] = 'paged';	if ( is_attachment() )		$classes[] = 'attachment';	if ( is_404() )		$classes[] = 'error404';	if ( is_single() ) {		$post_id = $wp_query->get_queried_object_id();		$post = $wp_query->get_queried_object();		$classes[] = 'single';		$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);		$classes[] = 'postid-' . $post_id;		if ( is_attachment() ) {			$mime_type = get_post_mime_type($post_id);			$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );			$classes[] = 'attachmentid-' . $post_id;			$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );		}	} elseif ( is_archive() ) {		if ( is_author() ) {			$author = $wp_query->get_queried_object();			$classes[] = 'author';			$classes[] = 'author-' . sanitize_html_class( $author->user_nicename , $author->ID );		} elseif ( is_category() ) {			$cat = $wp_query->get_queried_object();			$classes[] = 'category';			$classes[] = 'category-' . sanitize_html_class( $cat->slug, $cat->cat_ID );		} elseif ( is_tag() ) {			$tags = $wp_query->get_queried_object();			$classes[] = 'tag';			$classes[] = 'tag-' . sanitize_html_class( $tags->slug, $tags->term_id );		}	} elseif ( is_page() ) {		$classes[] = 'page';		$page_id = $wp_query->get_queried_object_id();		$post = get_page($page_id);		$classes[] = 'page-id-' . $page_id;		if ( $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' AND post_status = 'publish' LIMIT 1", $page_id) ) )			$classes[] = 'page-parent';		if ( $post->post_parent ) {			$classes[] = 'page-child';			$classes[] = 'parent-pageid-' . $post->post_parent;		}		if ( is_page_template() ) {			$classes[] = 'page-template';			$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', get_post_meta( $page_id, '_wp_page_template', true ) ), '' );		}	} elseif ( is_search() ) {		if ( !empty( $wp_query->posts ) )			$classes[] = 'search-results';		else			$classes[] = 'search-no-results';	}	if ( is_user_logged_in() )		$classes[] = 'logged-in';	$page = $wp_query->get( 'page' );	if ( !$page || $page < 2)		$page = $wp_query->get( 'paged' );	if ( $page && $page > 1 ) {		$classes[] = 'paged-' . $page;		if ( is_single() )			$classes[] = 'single-paged-' . $page;		elseif ( is_page() )			$classes[] = 'page-paged-' . $page;		elseif ( is_category() )			$classes[] = 'category-paged-' . $page;		elseif ( is_tag() )			$classes[] = 'tag-paged-' . $page;		elseif ( is_date() )			$classes[] = 'date-paged-' . $page;		elseif ( is_author() )			$classes[] = 'author-paged-' . $page;		elseif ( is_search() )			$classes[] = 'search-paged-' . $page;	}	if ( !empty( $class ) ) {		if ( !is_array( $class ) )			$class = preg_split( '#\s+#', $class );		$classes = array_merge( $classes, $class );	}	$classes = array_map( 'esc_attr', $classes );	return apply_filters( 'body_class', $classes, $class );}/** * Whether post requires password and correct password has been provided. * * @since 2.7.0 * * @param int|object $post An optional post.  Global $post used if not provided. * @return bool false if a password is not required or the correct password cookie is present, true otherwise. */function post_password_required( $post = null ) {	$post = get_post($post);	if ( empty($post->post_password) )		return false;	if ( !isset($_COOKIE['wp-postpass_' . COOKIEHASH]) )		return true;	if ( $_COOKIE['wp-postpass_' . COOKIEHASH] != $post->post_password )		return true;	return false;}/** * Display "sticky" CSS class, if a post is sticky. * * @since 2.7.0 * * @param int $post_id An optional post ID. */function sticky_class( $post_id = null ) {	if ( !is_sticky($post_id) )		return;	echo " sticky";}/** * Page Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of pages. * * Displays page links for paginated posts (i.e. includes the <!--nextpage-->. * Quicktag one or more times). This tag must be within The Loop. * * The defaults for overwriting are: * 'next_or_number' - Default is 'number' (string). Indicates whether page *      numbers should be used. Valid values are number and next. * 'nextpagelink' - Default is 'Next Page' (string). Text for link to next page. *      of the bookmark. * 'previouspagelink' - Default is 'Previous Page' (string). Text for link to *      previous page, if available. * 'pagelink' - Default is '%' (String).Format string for page numbers. The % in *      the parameter string will be replaced with the page number, so Page % *      generates "Page 1", "Page 2", etc. Defaults to %, just the page number. * 'before' - Default is '<p> Pages:' (string). The html or text to prepend to *      each bookmarks. * 'after' - Default is '</p>' (string). The html or text to append to each *      bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *      Pages link inside the <a> tag. Also prepended to the current item, which *      is not linked. * 'link_after' - Default is '' (string). The html or text to append to each *      Pages link inside the <a> tag. Also appended to the current item, which *      is not linked. * * @since 1.2.0 * @access private * * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML. */function wp_link_pages($args = '') {	$defaults = array(		'before' => '<p>' . __('Pages:'), 'after' => '</p>',		'link_before' => '', 'link_after' => '',		'next_or_number' => 'number', 'nextpagelink' => __('Next page'),		'previouspagelink' => __('Previous page'), 'pagelink' => '%',		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	$r = apply_filters( 'wp_link_pages_args', $r );	extract( $r, EXTR_SKIP );	global $post, $page, $numpages, $multipage, $more, $pagenow;	$output = '';	if ( $multipage ) {		if ( 'number' == $next_or_number ) {			$output .= $before;			for ( $i = 1; $i < ($numpages+1); $i = $i + 1 ) {				$j = str_replace('%',$i,$pagelink);				$output .= ' ';				if ( ($i != $page) || ((!$more) && ($page==1)) ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}				}				$output .= $link_before;				$output .= $j;				$output .= $link_after;				if ( ($i != $page) || ((!$more) && ($page==1)) )					$output .= '</a>';			}			$output .= $after;		} else {			if ( $more ) {				$output .= $before;				$i = $page - 1;				if ( $i && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $previouspagelink . $link_after . '</a>';				}				$i = $page + 1;				if ( $i <= $numpages && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $nextpagelink . $link_after . '</a>';				}				$output .= $after;			}		}	}	if ( $echo )		echo $output;	return $output;}//// Post-meta: Custom per-post fields.///** * Retrieve post custom meta data field. * * @since 1.5.0 * * @param string $key Meta data key name. * @return bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist. */function post_custom( $key = '' ) {	$custom = get_post_custom();	if ( !isset( $custom[$key] ) )		return false;	elseif ( 1 == count($custom[$key]) )		return $custom[$key][0];	else		return $custom[$key];}/** * Display list of post custom fields. * * @internal This will probably change at some point... * @since 1.2.0 * @uses apply_filters() Calls 'the_meta_key' on list item HTML content, with key and value as separate parameters. */function the_meta() {	if ( $keys = get_post_custom_keys() ) {		echo "<ul class='post-meta'>\n";		foreach ( (array) $keys as $key ) {			$keyt = trim($key);			if ( '_' == $keyt{0} )				continue;			$values = array_map('trim', get_post_custom_values($key));			$value = implode($values,', ');			echo apply_filters('the_meta_key', "<li><span class='post-meta-key'>$key:</span> $value</li>\n", $key, $value);		}		echo "</ul>\n";	}}//// Pages///** * Retrieve or display list of pages as a dropdown (select list). * * @since 2.1.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_dropdown_pages($args = '') {	$defaults = array(		'depth' => 0, 'child_of' => 0,		'selected' => 0, 'echo' => 1,		'name' => 'page_id', 'id' => '',		'show_option_none' => '', 'show_option_no_change' => '',		'option_none_value' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$pages = get_pages($r);	$output = '';	$name = esc_attr($name);	// Back-compat with old system where both id and name were based on $name argument	if ( empty($id) )		$id = $name;	if ( ! empty($pages) ) {		$output = "<select name=\"$name\" id=\"$id\">\n";		if ( $show_option_no_change )			$output .= "\t<option value=\"-1\">$show_option_no_change</option>";		if ( $show_option_none )			$output .= "\t<option value=\"" . esc_attr($option_none_value) . "\">$show_option_none</option>\n";		$output .= walk_page_dropdown_tree($pages, $depth, $r);		$output .= "</select>\n";	}	$output = apply_filters('wp_dropdown_pages', $output);	if ( $echo )		echo $output;	return $output;}/** * Retrieve or display list of pages in list (li) format. * * @since 1.5.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_list_pages($args = '') {	$defaults = array(		'depth' => 0, 'show_date' => '',		'date_format' => get_option('date_format'),		'child_of' => 0, 'exclude' => '',		'title_li' => __('Pages'), 'echo' => 1,		'authors' => '', 'sort_column' => 'menu_order, post_title',		'link_before' => '', 'link_after' => '', 'walker' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	$current_page = 0;	// sanitize, mostly to keep spaces out	$r['exclude'] = preg_replace('/[^0-9,]/', '', $r['exclude']);	// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)	$exclude_array = ( $r['exclude'] ) ? explode(',', $r['exclude']) : array();	$r['exclude'] = implode( ',', apply_filters('wp_list_pages_excludes', $exclude_array) );	// Query pages.	$r['hierarchical'] = 0;	$pages = get_pages($r);	if ( !empty($pages) ) {		if ( $r['title_li'] )			$output .= '<li class="pagenav">' . $r['title_li'] . '<ul>';		global $wp_query;		if ( is_page() || is_attachment() || $wp_query->is_posts_page )			$current_page = $wp_query->get_queried_object_id();		$output .= walk_page_tree($pages, $r['depth'], $current_page, $r);		if ( $r['title_li'] )			$output .= '</ul></li>';	}	$output = apply_filters('wp_list_pages', $output, $r);	if ( $r['echo'] )		echo $output;	else		return $output;}/** * Display or retrieve list of pages with optional home link. * * The arguments are listed below and part of the arguments are for {@link * wp_list_pages()} function. Check that function for more info on those * arguments. * * <ul> * <li><strong>sort_column</strong> - How to sort the list of pages. Defaults * to page title. Use column for posts table.</li> * <li><strong>menu_class</strong> - Class to use for the div ID which contains * the page list. Defaults to 'menu'.</li> * <li><strong>echo</strong> - Whether to echo list or return it. Defaults to * echo.</li> * <li><strong>link_before</strong> - Text before show_home argument text.</li> * <li><strong>link_after</strong> - Text after show_home argument text.</li> * <li><strong>show_home</strong> - If you set this argument, then it will * display the link to the home page. The show_home argument really just needs * to be set to the value of the text of the link.</li> * </ul> * * @since 2.7.0 * * @param array|string $args */function wp_page_menu( $args = array() ) {	$defaults = array('sort_column' => 'menu_order, post_title', 'menu_class' => 'menu', 'echo' => true, 'link_before' => '', 'link_after' => '');	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_page_menu_args', $args );	$menu = '';	$list_args = $args;	// Show Home in the menu	if ( ! empty($args['show_home']) ) {		if ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )			$text = __('Home');		else			$text = $args['show_home'];		$class = '';		if ( is_front_page() && !is_paged() )			$class = 'class="current_page_item"';		$menu .= '<li ' . $class . '><a href="' . home_url( '/' ) . '" title="' . esc_attr($text) . '">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';		// If the front page is a page, add it to the exclude list		if (get_option('show_on_front') == 'page') {			if ( !empty( $list_args['exclude'] ) ) {				$list_args['exclude'] .= ',';			} else {				$list_args['exclude'] = '';			}			$list_args['exclude'] .= get_option('page_on_front');		}	}	$list_args['echo'] = false;	$list_args['title_li'] = '';	$menu .= str_replace( array( "\r", "\n", "\t" ), '', wp_list_pages($list_args) );	if ( $menu )		$menu = '<ul>' . $menu . '</ul>';	$menu = '<div class="' . esc_attr($args['menu_class']) . '">' . $menu . "</div>\n";	$menu = apply_filters( 'wp_page_menu', $menu, $args );	if ( $args['echo'] )		echo $menu;	else		return $menu;}//// Page helpers///** * Retrieve HTML list content for page list. * * @uses Walker_Page to create HTML list content. * @since 2.1.0 * @see Walker_Page::walk() for parameters and return description. */function walk_page_tree($pages, $depth, $current_page, $r) {	if ( empty($r['walker']) )		$walker = new Walker_Page;	else		$walker = $r['walker'];	$args = array($pages, $depth, $r, $current_page);	return call_user_func_array(array(&$walker, 'walk'), $args);}/** * Retrieve HTML dropdown (select) content for page list. * * @uses Walker_PageDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_PageDropdown::walk() for parameters and return description. */function walk_page_dropdown_tree() {	$args = func_get_args();	if ( empty($args[2]['walker']) ) // the user's options are the third parameter		$walker = new Walker_PageDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array(&$walker, 'walk'), $args);}//// Attachments///** * Display an attachment page link using an image or icon. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size. * @param bool $deprecated Deprecated. Not used. * @param bool $permalink Optional, default is false. Whether to include permalink. */function the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.5' );	if ( $fullsize )		echo wp_get_attachment_link($id, 'full', $permalink);	else		echo wp_get_attachment_link($id, 'thumbnail', $permalink);}/** * Retrieve an attachment page link using an image or icon, if possible. * * @since 2.5.0 * @uses apply_filters() Calls 'wp_get_attachment_link' filter on HTML content with same parameters as function. * * @param int $id Optional. Post ID. * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @param bool $permalink Optional, default is false. Whether to add permalink to image. * @param bool $icon Optional, default is false. Whether to include icon. * @param string $text Optional, default is false. If string, then will be link text. * @return string HTML content. */function wp_get_attachment_link($id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false) {	$id = intval($id);	$_post = & get_post( $id );	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	if ( $text ) {		$link_text = esc_attr($text);	} elseif ( ( is_int($size) && $size != 0 ) or ( is_string($size) && $size != 'none' ) or $size != false ) {		$link_text = wp_get_attachment_image($id, $size, $icon);	} else {		$link_text = '';	}	if( trim($link_text) == '' )		$link_text = $_post->post_title;	return apply_filters( 'wp_get_attachment_link', "<a href='$url' title='$post_title'>$link_text</a>", $id, $size, $permalink, $icon, $text );}/** * Wrap attachment in <<p>> element before content. * * @since 2.0.0 * @uses apply_filters() Calls 'prepend_attachment' hook on HTML content. * * @param string $content * @return string */function prepend_attachment($content) {	global $post;	if ( empty($post->post_type) || $post->post_type != 'attachment' )		return $content;	$p = '<p class="attachment">';	// show the medium sized image representation of the attachment if available, and link to the raw file	$p .= wp_get_attachment_link(0, 'medium', false);	$p .= '</p>';	$p = apply_filters('prepend_attachment', $p);	return "$p\n$content";}//// Misc///** * Retrieve protected post password form content. * * @since 1.0.0 * @uses apply_filters() Calls 'the_password_form' filter on output. * * @return string HTML content for password form for password protected post. */function get_the_password_form() {	global $post;	$label = 'pwbox-'.(empty($post->ID) ? rand() : $post->ID);	$output = '<form action="' . get_option('siteurl') . '/wp-pass.php" method="post">	<p>' . __("This post is password protected. To view it please enter your password below:") . '</p>	<p><label for="' . $label . '">' . __("Password:") . ' <input name="post_password" id="' . $label . '" type="password" size="20" /></label> <input type="submit" name="Submit" value="' . esc_attr__("Submit") . '" /></p>	</form>	';	return apply_filters('the_password_form', $output);}/** * Whether currently in a page template. * * This template tag allows you to determine if you are in a page template. * You can optionally provide a template name and then the check will be * specific to that template. * * @since 2.5.0 * @uses $wp_query * * @param string $template The specific template name if specific matching is required. * @return bool False on failure, true if success. */function is_page_template($template = '') {	if (!is_page()) {		return false;	}	global $wp_query;	$page = $wp_query->get_queried_object();	$custom_fields = get_post_custom_values('_wp_page_template',$page->ID);	$page_template = $custom_fields[0];	// We have no argument passed so just see if a page_template has been specified	if ( empty( $template ) ) {		if (!empty( $page_template ) ) {			return true;		}	} elseif ( $template == $page_template) {		return true;	}	return false;}/** * Retrieve formatted date timestamp of a revision (linked to that revisions's page). * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses date_i18n() * * @param int|object $revision Revision ID or revision object. * @param bool $link Optional, default is true. Link to revisions's page? * @return string i18n formatted datetimestamp or localized 'Current Revision'. */function wp_post_revision_title( $revision, $link = true ) {	if ( !$revision = get_post( $revision ) )		return $revision;	if ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )		return false;	/* translators: revision date format, see http://php.net/date */	$datef = _x( 'j F, Y @ G:i', 'revision date format');	/* translators: 1: date */	$autosavef = __( '%1$s [Autosave]' );	/* translators: 1: date */	$currentf  = __( '%1$s [Current Revision]' );	$date = date_i18n( $datef, strtotime( $revision->post_modified ) );	if ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )		$date = "<a href='$link'>$date</a>";	if ( !wp_is_post_revision( $revision ) )		$date = sprintf( $currentf, $date );	elseif ( wp_is_post_autosave( $revision ) )		$date = sprintf( $autosavef, $date );	return $date;}/** * Display list of a post's revisions. * * Can output either a UL with edit links or a TABLE with diff interface, and * restore action links. * * Second argument controls parameters: *   (bool)   parent : include the parent (the "Current Revision") in the list. *   (string) format : 'list' or 'form-table'.  'list' outputs UL, 'form-table' *                     outputs TABLE with UI. *   (int)    right  : what revision is currently being viewed - used in *                     form-table format. *   (int)    left   : what revision is currently being diffed against right - *                     used in form-table format. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revisions() * @uses wp_post_revision_title() * @uses get_edit_post_link() * @uses get_the_author_meta() * * @todo split into two functions (list, form-table) ? * * @param int|object $post_id Post ID or post object. * @param string|array $args See description {@link wp_parse_args()}. * @return null */function wp_list_post_revisions( $post_id = 0, $args = null ) {	if ( !$post = get_post( $post_id ) )		return;	$defaults = array( 'parent' => false, 'right' => false, 'left' => false, 'format' => 'list', 'type' => 'all' );	extract( wp_parse_args( $args, $defaults ), EXTR_SKIP );	switch ( $type ) {		case 'autosave' :			if ( !$autosave = wp_get_post_autosave( $post->ID ) )				return;			$revisions = array( $autosave );			break;		case 'revision' : // just revisions - remove autosave later		case 'all' :		default :			if ( !$revisions = wp_get_post_revisions( $post->ID ) )				return;			break;	}	/* translators: post revision: 1: when, 2: author name */	$titlef = _x( '%1$s by %2$s', 'post revision' );	if ( $parent )		array_unshift( $revisions, $post );	$rows = '';	$class = false;	$can_edit_post = current_user_can( 'edit_post', $post->ID );	foreach ( $revisions as $revision ) {		if ( !current_user_can( 'read_post', $revision->ID ) )			continue;		if ( 'revision' === $type && wp_is_post_autosave( $revision ) )			continue;		$date = wp_post_revision_title( $revision );		$name = get_the_author_meta( 'display_name', $revision->post_author );		if ( 'form-table' == $format ) {			if ( $left )				$left_checked = $left == $revision->ID ? ' checked="checked"' : '';			else				$left_checked = $right_checked ? ' checked="checked"' : ''; // [sic] (the next one)			$right_checked = $right == $revision->ID ? ' checked="checked"' : '';			$class = $class ? '' : " class='alternate'";			if ( $post->ID != $revision->ID && $can_edit_post )				$actions = '<a href="' . wp_nonce_url( add_query_arg( array( 'revision' => $revision->ID, 'action' => 'restore' ) ), "restore-post_$post->ID|$revision->ID" ) . '">' . __( 'Restore' ) . '</a>';			else				$actions = '';			$rows .= "<tr$class>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='left' value='$revision->ID'$left_checked /></th>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='right' value='$revision->ID'$right_checked /></th>\n";			$rows .= "\t<td>$date</td>\n";			$rows .= "\t<td>$name</td>\n";			$rows .= "\t<td class='action-links'>$actions</td>\n";			$rows .= "</tr>\n";		} else {			$title = sprintf( $titlef, $date, $name );			$rows .= "\t<li>$title</li>\n";		}	}	if ( 'form-table' == $format ) : ?><form action="revision.php" method="get"><div class="tablenav">	<div class="alignleft">		<input type="submit" class="button-secondary" value="<?php esc_attr_e( 'Compare Revisions' ); ?>" />		<input type="hidden" name="action" value="diff" />		<input type="hidden" name="post_type" value="<?php echo esc_attr($post->post_type); ?>" />	</div></div><br class="clear" /><table class="widefat post-revisions" cellspacing="0" id="post-revisions">	<col />	<col />	<col style="width: 33%" />	<col style="width: 33%" />	<col style="width: 33%" /><thead><tr>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Old', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'New', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Date Created', 'revisions column name' ); ?></th>	<th scope="col"><?php _e( 'Author' ); ?></th>	<th scope="col" class="action-links"><?php _e( 'Actions' ); ?></th></tr></thead><tbody><?php echo $rows; ?></tbody></table></form><?php	else :		echo "<ul class='post-revisions'>\n";		echo $rows;		echo "</ul>";	endif;}
<?php/** * WordPress Taxonomy Administration API. * * @package WordPress * @subpackage Administration *///// Category///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @return unknown */function category_exists($cat_name, $parent = 0) {	$id = term_exists($cat_name, 'category', $parent);	if ( is_array($id) )		$id = $id['term_id'];	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_category_to_edit( $id ) {	$category = get_category( $id, OBJECT, 'edit' );	return $category;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @param unknown_type $parent * @return unknown */function wp_create_category( $cat_name, $parent = 0 ) {	if ( $id = category_exists($cat_name, $parent) )		return $id;	return wp_insert_category( array('cat_name' => $cat_name, 'category_parent' => $parent) );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $categories * @param unknown_type $post_id * @return unknown */function wp_create_categories($categories, $post_id = '') {	$cat_ids = array ();	foreach ($categories as $category) {		if ($id = category_exists($category))			$cat_ids[] = $id;		else			if ($id = wp_create_category($category))				$cat_ids[] = $id;	}	if ( $post_id )		wp_set_post_categories($post_id, $cat_ids);	return $cat_ids;}/** * Deletes one existing category. * * @since 2.0.0 * * @param int $cat_ID * @return mixed Returns true if completes delete action; false if term doesnt exist; Zero on attempted deletion of default Category; WP_Error object is also a possibility. */function wp_delete_category($cat_ID) {	$cat_ID = (int) $cat_ID;	$default = get_option('default_category');	// Don't delete the default cat	if ( $cat_ID == $default )		return 0;	return wp_delete_term($cat_ID, 'category', array('default' => $default));}/** * Updates an existing Category or creates a new Category. * * @since 2.0.0 * * @param mixed $catarr See defaults below. Set 'cat_ID' to a non-zero value to update an existing category. The 'taxonomy' key was added in 3.0.0. * @param bool $wp_error Optional, since 2.5.0. Set this to true if the caller handles WP_Error return values. * @return int|object The ID number of the new or updated Category on success.  Zero or a WP_Error on failure, depending on param $wp_error. */function wp_insert_category($catarr, $wp_error = false) {	$cat_defaults = array('cat_ID' => 0, 'taxonomy' => 'category', 'cat_name' => '', 'category_description' => '', 'category_nicename' => '', 'category_parent' => '');	$catarr = wp_parse_args($catarr, $cat_defaults);	extract($catarr, EXTR_SKIP);	if ( trim( $cat_name ) == '' ) {		if ( ! $wp_error )			return 0;		else			return new WP_Error( 'cat_name', __('You did not enter a category name.') );	}	$cat_ID = (int) $cat_ID;	// Are we updating or creating?	if ( !empty ($cat_ID) )		$update = true;	else		$update = false;	$name = $cat_name;	$description = $category_description;	$slug = $category_nicename;	$parent = $category_parent;	$parent = (int) $parent;	if ( $parent < 0 )		$parent = 0;	if ( empty($parent) || !category_exists( $parent ) || ($cat_ID && cat_is_ancestor_of($cat_ID, $parent) ) )		$parent = 0;	$args = compact('name', 'slug', 'parent', 'description');	if ( $update )		$cat_ID = wp_update_term($cat_ID, $taxonomy, $args);	else		$cat_ID = wp_insert_term($cat_name, $taxonomy, $args);	if ( is_wp_error($cat_ID) ) {		if ( $wp_error )			return $cat_ID;		else			return 0;	}	return $cat_ID['term_id'];}/** * Aliases wp_insert_category() with minimal args. * * If you want to update only some fields of an existing category, call this * function with only the new values set inside $catarr. * * @since 2.0.0 * * @param array $catarr The 'cat_ID' value is required.  All other keys are optional. * @return int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure. */function wp_update_category($catarr) {	$cat_ID = (int) $catarr['cat_ID'];	if ( isset($catarr['category_parent']) && ($cat_ID == $catarr['category_parent']) )		return false;	// First, get all of the original fields	$category = get_category($cat_ID, ARRAY_A);	// Escape data pulled from DB.	$category = add_magic_quotes($category);	// Merge old and new fields with new fields overwriting old ones.	$catarr = array_merge($category, $catarr);	return wp_insert_category($catarr);}//// Tags///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_tags_to_edit( $post_id, $taxonomy = 'post_tag' ) {	return get_terms_to_edit( $post_id, $taxonomy);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_terms_to_edit( $post_id, $taxonomy = 'post_tag' ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	$tags = wp_get_post_terms($post_id, $taxonomy, array());	if ( !$tags )		return false;	if ( is_wp_error($tags) )		return $tags;	foreach ( $tags as $tag )		$tag_names[] = $tag->name;	$tags_to_edit = join( ',', $tag_names );	$tags_to_edit = esc_attr( $tags_to_edit );	$tags_to_edit = apply_filters( 'terms_to_edit', $tags_to_edit, $taxonomy );	return $tags_to_edit;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function tag_exists($tag_name) {	return term_exists($tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_tag($tag_name) {	return wp_create_term( $tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_term($tag_name, $taxonomy = 'post_tag') {	if ( $id = term_exists($tag_name, $taxonomy) )		return $id;	return wp_insert_term($tag_name, $taxonomy);}
<?php/** * WordPress Roles and Capabilities. * * @package WordPress * @subpackage User *//** * WordPress User Roles. * * The role option is simple, the structure is organized by role name that store * the name in value of the 'name' key. The capabilities are stored as an array * in the value of the 'capability' key. * * <code> * array ( *		'rolename' => array ( *			'name' => 'rolename', *			'capabilities' => array() *		) * ) * </code> * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Roles {	/**	 * List of roles and capabilities.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles;	/**	 * List of the role objects.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_objects = array();	/**	 * List of role names.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_names = array();	/**	 * Option name for storing role list.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $role_key;	/**	 * Whether to use the database for retrieval and storage.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $use_db = true;	/**	 * PHP4 Constructor - Call {@link WP_Roles::_init()} method.	 *	 * @since 2.0.0	 * @access public	 *	 * @return WP_Roles	 */	function WP_Roles() {		$this->_init();	}	/**	 * Set up the object properties.	 *	 * The role key is set to the current prefix for the $wpdb object with	 * 'user_roles' appended. If the $wp_user_roles global is set, then it will	 * be used and the role option will not be updated or used.	 *	 * @since 2.1.0	 * @access protected	 * @uses $wpdb Used to get the database prefix.	 * @global array $wp_user_roles Used to set the 'roles' property value.	 */	function _init () {		global $wpdb, $wp_user_roles;		$this->role_key = $wpdb->prefix . 'user_roles';		if ( ! empty( $wp_user_roles ) ) {			$this->roles = $wp_user_roles;			$this->use_db = false;		} else {			$this->roles = get_option( $this->role_key );		}		if ( empty( $this->roles ) )			return;		$this->role_objects = array();		$this->role_names =  array();		foreach ( (array) $this->roles as $role => $data ) {			$this->role_objects[$role] = new WP_Role( $role, $this->roles[$role]['capabilities'] );			$this->role_names[$role] = $this->roles[$role]['name'];		}	}	/**	 * Add role name with capabilities to list.	 *	 * Updates the list of roles, if the role doesn't already exist.	 *	 * The capabilities are defined in the following format `array( 'read' => true );`	 * To explicitly deny a role a capability you set the value for that capability to false.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $display_name Role display name.	 * @param array $capabilities List of role capabilities in the above format.	 * @return null|WP_Role WP_Role object if role is added, null if already exists.	 */	function add_role( $role, $display_name, $capabilities = array() ) {		if ( isset( $this->roles[$role] ) )			return;		$this->roles[$role] = array(			'name' => $display_name,			'capabilities' => $capabilities			);		if ( $this->use_db )			update_option( $this->role_key, $this->roles );		$this->role_objects[$role] = new WP_Role( $role, $capabilities );		$this->role_names[$role] = $display_name;		return $this->role_objects[$role];	}	/**	 * Remove role by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( ! isset( $this->role_objects[$role] ) )			return;		unset( $this->role_objects[$role] );		unset( $this->role_names[$role] );		unset( $this->roles[$role] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Add capability to role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 * @param bool $grant Optional, default is true. Whether role is capable of performing capability.	 */	function add_cap( $role, $cap, $grant = true ) {		$this->roles[$role]['capabilities'][$cap] = $grant;		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Remove capability from role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 */	function remove_cap( $role, $cap ) {		unset( $this->roles[$role]['capabilities'][$cap] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Retrieve role object by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @return object|null Null, if role does not exist. WP_Role object, if found.	 */	function &get_role( $role ) {		if ( isset( $this->role_objects[$role] ) )			return $this->role_objects[$role];		else			return null;	}	/**	 * Retrieve list of role names.	 *	 * @since 2.0.0	 * @access public	 *	 * @return array List of role names.	 */	function get_names() {		return $this->role_names;	}	/**	 * Whether role name is currently in the list of available roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name to look up.	 * @return bool	 */	function is_role( $role )	{		return isset( $this->role_names[$role] );	}}/** * WordPress Role class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Role {	/**	 * Role name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $name;	/**	 * List of capabilities the role contains.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $capabilities;	/**	 * PHP4 Constructor - Set up object properties.	 *	 * The list of capabilities, must have the key as the name of the capability	 * and the value a boolean of whether it is granted to the role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param array $capabilities List of capabilities.	 * @return WP_Role	 */	function WP_Role( $role, $capabilities ) {		$this->name = $role;		$this->capabilities = $capabilities;	}	/**	 * Assign role a capability.	 *	 * @see WP_Roles::add_cap() Method uses implementation for role.	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether role has capability privilege.	 */	function add_cap( $cap, $grant = true ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$this->capabilities[$cap] = $grant;		$wp_roles->add_cap( $this->name, $cap, $grant );	}	/**	 * Remove capability from role.	 *	 * This is a container for {@link WP_Roles::remove_cap()} to remove the	 * capability from the role. That is to say, that {@link	 * WP_Roles::remove_cap()} implements the functionality, but it also makes	 * sense to use this class, because you don't need to enter the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		unset( $this->capabilities[$cap] );		$wp_roles->remove_cap( $this->name, $cap );	}	/**	 * Whether role has capability.	 *	 * The capabilities is passed through the 'role_has_cap' filter. The first	 * parameter for the hook is the list of capabilities the class has	 * assigned. The second parameter is the capability name to look for. The	 * third and final parameter for the hook is the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @return bool True, if user has capability. False, if doesn't have capability.	 */	function has_cap( $cap ) {		$capabilities = apply_filters( 'role_has_cap', $this->capabilities, $cap, $this->name );		if ( !empty( $capabilities[$cap] ) )			return $capabilities[$cap];		else			return false;	}}/** * WordPress User class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_User {	/**	 * User data container.	 *	 * This will be set as properties of the object.	 *	 * @since 2.0.0	 * @access private	 * @var array	 */	var $data;	/**	 * The user's ID.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $ID = 0;	/**	 * The deprecated user's ID.	 *	 * @since 2.0.0	 * @access public	 * @deprecated Use WP_User::$ID	 * @see WP_User::$ID	 * @var int	 */	var $id = 0;	/**	 * The individual capabilities the user has been given.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $caps = array();	/**	 * User metadata option name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $cap_key;	/**	 * The roles the user is part of.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles = array();	/**	 * All capabilities the user has, including individual and role based.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $allcaps = array();	/**	 * First name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $first_name = '';	/**	 * Last name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $last_name = '';	/**	 * The filter context applied to user data fields.	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $filter = null;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * Retrieves the userdata and then assigns all of the data keys to direct	 * properties of the object. Calls {@link WP_User::_init_caps()} after	 * setting up the object's user data properties.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int|string $id User's ID or username	 * @param int $name Optional. User's username	 * @return WP_User	 */	function WP_User( $id, $name = '' ) {		if ( empty( $id ) && empty( $name ) )			return;		if ( ! is_numeric( $id ) ) {			$name = $id;			$id = 0;		}		if ( ! empty( $id ) )			$this->data = get_userdata( $id );		else			$this->data = get_userdatabylogin( $name );		if ( empty( $this->data->ID ) )			return;		foreach ( get_object_vars( $this->data ) as $key => $value ) {			$this->{$key} = $value;		}		$this->id = $this->ID;		$this->_init_caps();	}	/**	 * Set up capability object properties.	 *	 * Will set the value for the 'cap_key' property to current database table	 * prefix, followed by 'capabilities'. Will then check to see if the	 * property matching the 'cap_key' exists and is an array. If so, it will be	 * used.	 *	 * @since 2.1.0	 *	 * @param string $cap_key Optional capability key	 * @access protected	 */	function _init_caps( $cap_key = '' ) {		global $wpdb;		if ( empty($cap_key) )			$this->cap_key = $wpdb->prefix . 'capabilities';		else			$this->cap_key = $cap_key;		$this->caps = &$this->{$this->cap_key};		if ( ! is_array( $this->caps ) )			$this->caps = array();		$this->get_role_caps();	}	/**	 * Retrieve all of the role capabilities and merge with individual capabilities.	 *	 * All of the capabilities of the roles the user belongs to are merged with	 * the users individual roles. This also means that the user can be denied	 * specific roles that their role might have, but the specific user isn't	 * granted permission to.	 *	 * @since 2.0.0	 * @uses $wp_roles	 * @access public	 */	function get_role_caps() {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		//Filter out caps that are not role names and assign to $this->roles		if ( is_array( $this->caps ) )			$this->roles = array_filter( array_keys( $this->caps ), array( &$wp_roles, 'is_role' ) );		//Build $allcaps from role caps, overlay user's $caps		$this->allcaps = array();		foreach ( (array) $this->roles as $role ) {			$the_role =& $wp_roles->get_role( $role );			$this->allcaps = array_merge( (array) $this->allcaps, (array) $the_role->capabilities );		}		$this->allcaps = array_merge( (array) $this->allcaps, (array) $this->caps );	}	/**	 * Add role to user.	 *	 * Updates the user's meta data option with capabilities and roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function add_role( $role ) {		$this->caps[$role] = true;		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Remove role from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( !in_array($role, $this->roles) )			return;		unset( $this->caps[$role] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Set the role of the user.	 *	 * This will remove the previous roles of the user and assign the user the	 * new one. You can set the role to an empty string and it will remove all	 * of the roles from the user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function set_role( $role ) {		foreach ( (array) $this->roles as $oldrole )			unset( $this->caps[$oldrole] );		if ( !empty( $role ) ) {			$this->caps[$role] = true;			$this->roles = array( $role => true );		} else {			$this->roles = false;		}		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();		do_action( 'set_user_role', $this->ID, $role );	}	/**	 * Choose the maximum level the user has.	 *	 * Will compare the level from the $item parameter against the $max	 * parameter. If the item is incorrect, then just the $max parameter value	 * will be returned.	 *	 * Used to get the max level based on the capabilities the user has. This	 * is also based on roles, so if the user is assigned the Administrator role	 * then the capability 'level_10' will exist and the user will get that	 * value.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $max Max level of user.	 * @param string $item Level capability name.	 * @return int Max Level.	 */	function level_reduction( $max, $item ) {		if ( preg_match( '/^level_(10|[0-9])$/i', $item, $matches ) ) {			$level = intval( $matches[1] );			return max( $max, $level );		} else {			return $max;		}	}	/**	 * Update the maximum user level for the user.	 *	 * Updates the 'user_level' user metadata (includes prefix that is the	 * database table prefix) with the maximum user level. Gets the value from	 * the all of the capabilities that the user has.	 *	 * @since 2.0.0	 * @access public	 */	function update_user_level_from_caps() {		global $wpdb;		$this->user_level = array_reduce( array_keys( $this->allcaps ), array( &$this, 'level_reduction' ), 0 );		update_user_meta( $this->ID, $wpdb->prefix . 'user_level', $this->user_level );	}	/**	 * Add capability and grant or deny access to capability.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether to grant capability to user.	 */	function add_cap( $cap, $grant = true ) {		$this->caps[$cap] = $grant;		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove capability from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		if ( empty( $this->caps[$cap] ) )			return;		unset( $this->caps[$cap] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove all of the capabilities of the user.	 *	 * @since 2.1.0	 * @access public	 */	function remove_all_caps() {		global $wpdb;		$this->caps = array();		delete_user_meta( $this->ID, $this->cap_key );		delete_user_meta( $this->ID, $wpdb->prefix . 'user_level' );		$this->get_role_caps();	}	/**	 * Whether user has capability or role name.	 *	 * This is useful for looking up whether the user has a specific role	 * assigned to the user. The second optional parameter can also be used to	 * check for capabilities against a specfic post.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string|int $cap Capability or role name to search.	 * @param int $post_id Optional. Post ID to check capability against specific post.	 * @return bool True, if user has capability; false, if user does not have capability.	 */	function has_cap( $cap ) {		if ( is_numeric( $cap ) ) {			_deprecated_argument( __FUNCTION__, '2.0', __('Usage of user levels by plugins and themes is deprecated. Use roles and capabilities instead.') );			$cap = $this->translate_level_to_cap( $cap );		}		$args = array_slice( func_get_args(), 1 );		$args = array_merge( array( $cap, $this->ID ), $args );		$caps = call_user_func_array( 'map_meta_cap', $args );		// Multisite super admin has all caps by definition, Unless specifically denied.		if ( is_multisite() && is_super_admin() ) {			if ( in_array('do_not_allow', $caps) )				return false;			return true;		}		// Must have ALL requested caps		$capabilities = apply_filters( 'user_has_cap', $this->allcaps, $caps, $args );		foreach ( (array) $caps as $cap ) {			//echo "Checking cap $cap<br />";			if ( empty( $capabilities[$cap] ) || !$capabilities[$cap] )				return false;		}		return true;	}	/**	 * Convert numeric level to level capability name.	 *	 * Prepends 'level_' to level number.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $level Level number, 1 to 10.	 * @return string	 */	function translate_level_to_cap( $level ) {		return 'level_' . $level;	}	/**	 * Set the blog to operate on. Defaults to the current blog.	 *	 * @since 3.0.0	 *	 * @param int $blog_id Optional Blog ID, defaults to current blog.	 */	function for_blog( $blog_id = '' ) {		global $wpdb;		if ( ! empty( $blog_id ) )			$cap_key = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';		else			$cap_key = '';		$this->_init_caps( $cap_key );	}}/** * Map meta capabilities to primitive capabilities. * * This does not actually compare whether the user ID has the actual capability, * just what the capability or capabilities are. Meta capability list value can * be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post', * 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'. * * @since 2.0.0 * * @param string $cap Capability name. * @param int $user_id User ID. * @return array Actual capabilities for meta capability. */function map_meta_cap( $cap, $user_id ) {	$args = array_slice( func_get_args(), 2 );	$caps = array();	switch ( $cap ) {	case 'remove_user':		$caps[] = 'remove_users';		break;	case 'delete_user':		$caps[] = 'delete_users';		break;	case 'promote_user':		$caps[] = 'promote_users';		break;	case 'edit_user':		// Allow user to edit itself		if ( isset( $args[0] ) && $user_id == $args[0] )			break;		// Fall through	case 'edit_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = 'edit_users'; // Explicit due to primitive fall through		break;	case 'delete_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->delete_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( '' != $post->post_author ) {			$post_author_data = get_userdata( $post->post_author );		} else {			//No author set yet so default to current user for cap checks			$post_author_data = $author_data;		}		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'delete_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_posts';			} else {				// If the post is draft...				$caps[] = 'delete_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'delete_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'delete_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'delete_private_posts';		}		break;	case 'delete_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ('' != $page->post_author) {			$page_author_data = get_userdata( $page->post_author );		} else {			//No author set yet so default to current user for cap checks			$page_author_data = $author_data;		}		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( $page->post_status == 'publish' ) {				$caps[] = 'delete_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_pages';			} else {				// If the page is draft...				$caps[] = 'delete_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'delete_others_pages';			// The page is published, extra cap required.			if ( $page->post_status == 'publish' )				$caps[] = 'delete_published_pages';			elseif ( $page->post_status == 'private' )				$caps[] = 'delete_private_pages';		}		break;		// edit_post breaks down to edit_posts, edit_published_posts, or		// edit_others_posts	case 'edit_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->edit_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		$post_author_data = get_userdata( $post->post_author );		//echo "current user id : $user_id, post author id: " . $post_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'edit_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_posts';			} else {				// If the post is draft...				$caps[] = 'edit_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'edit_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'edit_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'edit_private_posts';		}		break;	case 'edit_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( 'publish' == $page->post_status ) {				$caps[] = 'edit_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_pages';			} else {				// If the page is draft...				$caps[] = 'edit_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'edit_others_pages';			// The page is published, extra cap required.			if ( 'publish' == $page->post_status )				$caps[] = 'edit_published_pages';			elseif ( 'private' == $page->post_status )				$caps[] = 'edit_private_pages';		}		break;	case 'read_post':		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->read_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( 'private' != $post->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$post_author_data = get_userdata( $post->post_author );		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_posts';		break;	case 'read_page':		$page = get_page( $args[0] );		if ( 'private' != $page->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$page_author_data = get_userdata( $page->post_author );		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_pages';		break;	case 'unfiltered_upload':		if ( defined('ALLOW_UNFILTERED_UPLOADS') && ALLOW_UNFILTERED_UPLOADS && ( !is_multisite() || is_super_admin() )  )			$caps[] = $cap;		else			$caps[] = 'do_not_allow';		break;	case 'edit_files':	case 'edit_plugins':	case 'edit_themes':		if ( defined('DISALLOW_FILE_EDIT') && DISALLOW_FILE_EDIT ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_EDIT.	case 'update_plugins':	case 'delete_plugins':	case 'install_plugins':	case 'update_themes':	case 'delete_themes':	case 'install_themes':	case 'update_core':		// Disallow anything that creates, deletes, or edits core, plugin, or theme files.		// Files in uploads are excepted.		if ( defined('DISALLOW_FILE_MODS') && DISALLOW_FILE_MODS ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_MODS.	case 'unfiltered_html':		// Disallow unfiltered_html for all users, even admins and super admins.		if ( defined('DISALLOW_UNFILTERED_HTML') && DISALLOW_UNFILTERED_HTML ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_UNFILTERED_HTML	case 'delete_user':	case 'delete_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	case 'create_users':		if ( is_multisite() && !get_site_option( 'add_new_users' ) )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	default:		// If no meta caps match, return the original cap.		$caps[] = $cap;	}	return apply_filters('map_meta_cap', $caps, $cap, $user_id, $args);}/** * Whether current user has capability or role. * * @since 2.0.0 * * @param string $capability Capability or role name. * @return bool */function current_user_can( $capability ) {	$current_user = wp_get_current_user();	if ( empty( $current_user ) )		return false;	$args = array_slice( func_get_args(), 1 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$current_user, 'has_cap' ), $args );}/** * Whether current user has a capability or role for a given blog. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param string $capability Capability or role name. * @return bool */function current_user_can_for_blog( $blog_id, $capability ) {	$current_user = wp_get_current_user();    if ( is_multisite() && is_super_admin() )		return true;	if ( empty( $current_user ) )		return false;	// Create new object to avoid stomping the global current_user.	$user = new WP_User( $current_user->id) ;	// Set the blog id.  @todo add blog id arg to WP_User constructor?	$user->for_blog( $blog_id );	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$user, 'has_cap' ), $args );}/** * Whether author of supplied post has capability or role. * * @since 2.9.0 * * @param int|object $post Post ID or post object. * @param string $capability Capability or role name. * @return bool */function author_can( $post, $capability ) {	if ( !$post = get_post($post) )		return false;	$author = new WP_User( $post->post_author );	if ( empty( $author ) )		return false;	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$author, 'has_cap' ), $args );}/** * Retrieve role object. * * @see WP_Roles::get_role() Uses method to retrieve role object. * @since 2.0.0 * * @param string $role Role name. * @return object */function get_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->get_role( $role );}/** * Add role, if it does not exist. * * @see WP_Roles::add_role() Uses method to add role. * @since 2.0.0 * * @param string $role Role name. * @param string $display_name Display name for role. * @param array $capabilities List of capabilities. * @return null|WP_Role WP_Role object if role is added, null if already exists. */function add_role( $role, $display_name, $capabilities = array() ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->add_role( $role, $display_name, $capabilities );}/** * Remove role, if it exists. * * @see WP_Roles::remove_role() Uses method to remove role. * @since 2.0.0 * * @param string $role Role name. * @return null */function remove_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->remove_role( $role );}/** * Retrieve a list of super admins. * * @since 3.0.0 * * @uses $super_admins Super admins global variable, if set. * * @return array List of super admin logins */function get_super_admins() {	global $super_admins;	if ( isset($super_admins) )		return $super_admins;	else		return get_site_option( 'site_admins', array('admin') );}/** * Determine if user is a site admin. * * @since 3.0.0 * * @param int $user_id (Optional) The ID of a user. Defaults to the current user. * @return bool True if the user is a site admin. */function is_super_admin( $user_id = false ) {	if ( ! $user_id ) {		$current_user = wp_get_current_user();		$user_id = ! empty($current_user) ? $current_user->id : 0;	}	if ( ! $user_id )		return false;	$user = new WP_User($user_id);	if ( is_multisite() ) {		$super_admins = get_super_admins();		if ( is_array( $super_admins ) && in_array( $user->user_login, $super_admins ) )			return true;	} else {		if ( $user->has_cap('delete_users') )			return true;	}	return false;}?>
<?php/** * Import WordPress Administration Panel * * @package WordPress * @subpackage Administration */define('WP_LOAD_IMPORTERS', true);/** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('import') )	wp_die(__('You do not have sufficient permissions to import content in this site.'));$title = __('Import');add_contextual_help($current_screen,	'<p>' . __('This screen lists links to plugins to import data from blogging/content management platforms. Choose the platform you want to import from, and click Install Now when you are prompted in the popup window. If your platform is not listed, click the link to search the plugin directory for other importer plugins to see if there is one for your platform.') . '</p>' .	'<p>' . __('In previous versions of WordPress, all the importers were built-in, but they have been turned into plugins as of version 3.0 since most people only use them once or infrequently.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Import_SubPanel" target="_blank">Import Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$popular_importers = array();if ( current_user_can('install_plugins') )	$popular_importers = array(		'blogger' => array( __('Blogger'), __('Install the Blogger importer to import posts, comments, and users from a Blogger blog.'), 'install' ),		'wpcat2tag' => array(__('Categories and Tags Converter'), __('Install the category/tag converter to convert existing categories to tags or tags to categories, selectively.'), 'install', 'wp-cat2tag' ),		'livejournal' => array( __( 'LiveJournal' ), __( 'Install the LiveJournal importer to import posts from LiveJournal using their API.' ), 'install' ),		'movabletype' => array( __('Movable Type and TypePad'), __('Install the Movable Type importer to import posts and comments from a Movable Type or TypePad blog.'), 'install', 'mt' ),		'opml' => array( __('Blogroll'), __('Install the blogroll importer to import links in OPML format.'), 'install' ),		'rss' => array( __('RSS'), __('Install the RSS importer to import posts from an RSS feed.'), 'install' ),		'wordpress' => array( 'WordPress', __('Install the WordPress importer to import posts, pages, comments, custom fields, categories, and tags from a WordPress export file.'), 'install' )	);if ( ! empty( $_GET['invalid'] ) && !empty($popular_importers[$_GET['invalid']][3]) ) {	wp_redirect("import.php?import=" . $popular_importers[$_GET['invalid']][3]);	exit;}add_thickbox();require_once ('admin-header.php');$parent_file = 'tools.php';?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( ! empty( $_GET['invalid'] ) ) : ?>	<div class="error"><p><strong><?php _e('ERROR:')?></strong> <?php printf( __('The <strong>%s</strong> importer is invalid or is not installed.'), esc_html( $_GET['invalid'] ) ); ?></p></div><?php endif; ?><p><?php _e('If you have posts or comments in another system, WordPress can import those into this site. To get started, choose a system to import from below:'); ?></p><?php// Load all importers so that they can register.$import_loc = 'wp-admin/import';$import_root = ABSPATH.$import_loc;$imports_dir = @ opendir($import_root);if ($imports_dir) {	while (($file = readdir($imports_dir)) !== false) {		if ($file{0} == '.') {			continue;		} elseif (substr($file, -4) == '.php') {			require_once($import_root . '/' . $file);		}	}}@closedir($imports_dir);$importers = get_importers();// If a popular importer is not registered, create a dummy registration that links to the plugin installer.foreach ( $popular_importers as $pop_importer => $pop_data ) {	if ( isset($importers[$pop_importer] ) )		continue;	if ( isset( $pop_data[3] ) && isset( $importers[ $pop_data[3] ] ) )		continue;	$importers[$pop_importer] = $popular_importers[$pop_importer];}if (empty ($importers)) {	echo '<p>'.__('No importers are available.').'</p>'; // TODO: make more helpful} else {	uasort($importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));?><table class="widefat" cellspacing="0"><?php	$style = '';	foreach ($importers as $id => $data) {		$style = ('class="alternate"' == $style || 'class="alternate active"' == $style) ? '' : 'alternate';		$action = '';		if ( 'install' == $data[2] ) {			$plugin_slug = $id . '-importer';			if ( file_exists( WP_PLUGIN_DIR . '/' . $plugin_slug ) ) {				// Looks like Importer is installed, But not active				$plugins = get_plugins( '/' . $plugin_slug );				if ( !empty($plugins) ) {					$keys = array_keys($plugins);					$plugin_file = $plugin_slug . '/' . $keys[0];					$action = '<a href="' . esc_url(wp_nonce_url(admin_url('plugins.php?action=activate&plugin=' . $plugin_file . '&from=import'), 'activate-plugin_' . $plugin_file)) .											'"title="' . esc_attr__('Activate importer') . '"">' . $data[0] . '</a>';				}			}			if ( empty($action) )				$action = '<a href="' . esc_url(admin_url('plugin-install.php?tab=plugin-information&plugin=' . $plugin_slug .										'&from=import&TB_iframe=true&width=600&height=550')) . '" class="thickbox" title="' .										esc_attr__('Install importer') . '">' . $data[0] . '</a>';		} else {			$action = "<a href='" . esc_url("admin.php?import=$id") . "' title='" . esc_attr( wptexturize(strip_tags($data[1])) ) ."'>{$data[0]}</a>";		}		if ($style != '')			$style = 'class="'.$style.'"';		echo "			<tr $style>				<td class='import-system row-title'>$action</td>				<td class='desc'>{$data[1]}</td>			</tr>";	}?></table><?php}if ( current_user_can('install_plugins') )	echo '<p>' . sprintf('If the importer you need is not listed, <a href="%s">search the plugins directory</a> to see if an importer is available.', esc_url(admin_url('plugin-install.php?tab=search&type=tag&s=importer')) ) . '</p>';?></div><?phpinclude ('admin-footer.php');?>
<?php/** * Holds Most of the WordPress classes. * * Some of the other classes are contained in other files. For example, the * WordPress cache is in cache.php and the WordPress roles API is in * capabilities.php. The third party libraries are contained in their own * separate files. * * @package WordPress *//** * WordPress environment setup class. * * @package WordPress * @since 2.0.0 */class WP {	/**	 * Public query variables.	 *	 * Long list of public query variables.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'debug', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'comments_popup', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type');	/**	 * Private query variables.	 *	 * Long list of private query variables.	 *	 * @since 2.0.0	 * @var array	 */	var $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page');	/**	 * Extra query variables set by the user.	 *	 * @since 2.1.0	 * @var array	 */	var $extra_query_vars = array();	/**	 * Query variables for setting up the WordPress Query Loop.	 *	 * @since 2.0.0	 * @var array	 */	var $query_vars;	/**	 * String parsed to set the query variables.	 *	 * @since 2.0.0	 * @var string	 */	var $query_string;	/**	 * Permalink or requested URI.	 *	 * @since 2.0.0	 * @var string	 */	var $request;	/**	 * Rewrite rule the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_rule;	/**	 * Rewrite query the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_query;	/**	 * Whether already did the permalink.	 *	 * @since 2.0.0	 * @var bool	 */	var $did_permalink = false;	/**	 * Add name to list of public query variables.	 *	 * @since 2.1.0	 *	 * @param string $qv Query variable name.	 */	function add_query_var($qv) {		if ( !in_array($qv, $this->public_query_vars) )			$this->public_query_vars[] = $qv;	}	/**	 * Set the value of a query variable.	 *	 * @since 2.3.0	 *	 * @param string $key Query variable name.	 * @param mixed $value Query variable value.	 */	function set_query_var($key, $value) {		$this->query_vars[$key] = $value;	}	/**	 * Parse request to find correct WordPress query.	 *	 * Sets up the query variables based on the request. There are also many	 * filters and actions that can be used to further manipulate the result.	 *	 * @since 2.0.0	 *	 * @param array|string $extra_query_vars Set the extra query variables.	 */	function parse_request($extra_query_vars = '') {		global $wp_rewrite;		$this->query_vars = array();		$taxonomy_query_vars = array();		$post_type_query_vars = array();		if ( is_array($extra_query_vars) )			$this->extra_query_vars = & $extra_query_vars;		else if (! empty($extra_query_vars))			parse_str($extra_query_vars, $this->extra_query_vars);		// Process PATH_INFO, REQUEST_URI, and 404 for permalinks.		// Fetch the rewrite rules.		$rewrite = $wp_rewrite->wp_rewrite_rules();		if ( ! empty($rewrite) ) {			// If we match a rewrite rule, this will be cleared.			$error = '404';			$this->did_permalink = true;			if ( isset($_SERVER['PATH_INFO']) )				$pathinfo = $_SERVER['PATH_INFO'];			else				$pathinfo = '';			$pathinfo_array = explode('?', $pathinfo);			$pathinfo = str_replace("%", "%25", $pathinfo_array[0]);			$req_uri = $_SERVER['REQUEST_URI'];			$req_uri_array = explode('?', $req_uri);			$req_uri = $req_uri_array[0];			$self = $_SERVER['PHP_SELF'];			$home_path = parse_url(home_url());			if ( isset($home_path['path']) )				$home_path = $home_path['path'];			else				$home_path = '';			$home_path = trim($home_path, '/');			// Trim path info from the end and the leading home path from the			// front.  For path info requests, this leaves us with the requesting			// filename, if any.  For 404 requests, this leaves us with the			// requested permalink.			$req_uri = str_replace($pathinfo, '', rawurldecode($req_uri));			$req_uri = trim($req_uri, '/');			$req_uri = preg_replace("|^$home_path|", '', $req_uri);			$req_uri = trim($req_uri, '/');			$pathinfo = trim($pathinfo, '/');			$pathinfo = preg_replace("|^$home_path|", '', $pathinfo);			$pathinfo = trim($pathinfo, '/');			$self = trim($self, '/');			$self = preg_replace("|^$home_path|", '', $self);			$self = trim($self, '/');			// The requested permalink is in $pathinfo for path info requests and			//  $req_uri for other requests.			if ( ! empty($pathinfo) && !preg_match('|^.*' . $wp_rewrite->index . '$|', $pathinfo) ) {				$request = $pathinfo;			} else {				// If the request uri is the index, blank it out so that we don't try to match it against a rule.				if ( $req_uri == $wp_rewrite->index )					$req_uri = '';				$request = $req_uri;			}			$this->request = $request;			// Look for matches.			$request_match = $request;			foreach ( (array) $rewrite as $match => $query) {				// Don't try to match against AtomPub calls				if ( $req_uri == 'wp-app.php' )					break;				// If the requesting file is the anchor of the match, prepend it				// to the path info.				if ( (! empty($req_uri)) && (strpos($match, $req_uri) === 0) && ($req_uri != $request) )					$request_match = $req_uri . '/' . $request;				if ( preg_match("#^$match#", $request_match, $matches) ||					preg_match("#^$match#", urldecode($request_match), $matches) ) {					// Got a match.					$this->matched_rule = $match;					// Trim the query of everything up to the '?'.					$query = preg_replace("!^.+\?!", '', $query);					// Substitute the substring matches into the query.					$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));					$this->matched_query = $query;					// Parse the query.					parse_str($query, $perma_query_vars);					// If we're processing a 404 request, clear the error var					// since we found something.					if ( isset($_GET['error']) )						unset($_GET['error']);					if ( isset($error) )						unset($error);					break;				}			}			// If req_uri is empty or if it is a request for ourself, unset error.			if ( empty($request) || $req_uri == $self || strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false ) {				if ( isset($_GET['error']) )					unset($_GET['error']);				if ( isset($error) )					unset($error);				if ( isset($perma_query_vars) && strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )					unset($perma_query_vars);				$this->did_permalink = false;			}		}		$this->public_query_vars = apply_filters('query_vars', $this->public_query_vars);		foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t )			if ( $t->query_var )				$taxonomy_query_vars[$t->query_var] = $taxonomy;		foreach ( $GLOBALS['wp_post_types'] as $post_type => $t )			if ( $t->query_var )				$post_type_query_vars[$t->query_var] = $post_type;		for ( $i = 0; $i < count($this->public_query_vars); $i += 1 ) {			$wpvar = $this->public_query_vars[$i];			if ( isset($this->extra_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $this->extra_query_vars[$wpvar];			elseif ( isset($GLOBALS[$wpvar]) )				$this->query_vars[$wpvar] = $GLOBALS[$wpvar];			elseif ( !empty($_POST[$wpvar]) )				$this->query_vars[$wpvar] = $_POST[$wpvar];			elseif ( !empty($_GET[$wpvar]) )				$this->query_vars[$wpvar] = $_GET[$wpvar];			elseif ( !empty($perma_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $perma_query_vars[$wpvar];			if ( !empty( $this->query_vars[$wpvar] ) ) {				$this->query_vars[$wpvar] = (string) $this->query_vars[$wpvar];				if ( isset( $taxonomy_query_vars[$wpvar] ) ) {					$this->query_vars['taxonomy'] = $taxonomy_query_vars[$wpvar];					$this->query_vars['term'] = $this->query_vars[$wpvar];				} elseif ( isset($post_type_query_vars[$wpvar] ) ) {					$this->query_vars['post_type'] = $post_type_query_vars[$wpvar];					$this->query_vars['name'] = $this->query_vars[$wpvar];				}			}		}		// Limit publicly queried post_types to those that are publicly_queryable		if ( isset( $this->query_vars['post_type']) ) {			$queryable_post_types =  get_post_types( array('publicly_queryable' => true) );			if ( ! in_array( $this->query_vars['post_type'], $queryable_post_types ) )				unset( $this->query_vars['post_type'] );		}		foreach ( (array) $this->private_query_vars as $var) {			if ( isset($this->extra_query_vars[$var]) )				$this->query_vars[$var] = $this->extra_query_vars[$var];			elseif ( isset($GLOBALS[$var]) && '' != $GLOBALS[$var] )				$this->query_vars[$var] = $GLOBALS[$var];		}		if ( isset($error) )			$this->query_vars['error'] = $error;		$this->query_vars = apply_filters('request', $this->query_vars);		do_action_ref_array('parse_request', array(&$this));	}	/**	 * Send additional HTTP headers for caching, content type, etc.	 *	 * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing	 * a feed, it will also send last-modified, etag, and 304 status if needed.	 *	 * @since 2.0.0	 */	function send_headers() {		$headers = array('X-Pingback' => get_bloginfo('pingback_url'));		$status = null;		$exit_required = false;		if ( is_user_logged_in() )			$headers = array_merge($headers, wp_get_nocache_headers());		if ( !empty($this->query_vars['error']) && '404' == $this->query_vars['error'] ) {			$status = 404;			if ( !is_user_logged_in() )				$headers = array_merge($headers, wp_get_nocache_headers());			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else if ( empty($this->query_vars['feed']) ) {			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else {			// We're showing a feed, so WP is indeed the only thing that last changed			if ( !empty($this->query_vars['withcomments'])				|| ( empty($this->query_vars['withoutcomments'])					&& ( !empty($this->query_vars['p'])						|| !empty($this->query_vars['name'])						|| !empty($this->query_vars['page_id'])						|| !empty($this->query_vars['pagename'])						|| !empty($this->query_vars['attachment'])						|| !empty($this->query_vars['attachment_id'])					)				)			)				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastcommentmodified('GMT'), 0).' GMT';			else				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';			$wp_etag = '"' . md5($wp_last_modified) . '"';			$headers['Last-Modified'] = $wp_last_modified;			$headers['ETag'] = $wp_etag;			// Support for Conditional GET			if (isset($_SERVER['HTTP_IF_NONE_MATCH']))				$client_etag = stripslashes(stripslashes($_SERVER['HTTP_IF_NONE_MATCH']));			else $client_etag = false;			$client_last_modified = empty($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? '' : trim($_SERVER['HTTP_IF_MODIFIED_SINCE']);			// If string is empty, return 0. If not, attempt to parse into a timestamp			$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;			// Make a timestamp for our most recent modification...			$wp_modified_timestamp = strtotime($wp_last_modified);			if ( ($client_last_modified && $client_etag) ?					 (($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :					 (($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {				$status = 304;				$exit_required = true;			}		}		$headers = apply_filters('wp_headers', $headers, $this);		if ( ! empty( $status ) )			status_header( $status );		foreach( (array) $headers as $name => $field_value )			@header("{$name}: {$field_value}");		if ($exit_required)			exit();		do_action_ref_array('send_headers', array(&$this));	}	/**	 * Sets the query string property based off of the query variable property.	 *	 * The 'query_string' filter is deprecated, but still works. Plugins should	 * use the 'request' filter instead.	 *	 * @since 2.0.0	 */	function build_query_string() {		$this->query_string = '';		foreach ( (array) array_keys($this->query_vars) as $wpvar) {			if ( '' != $this->query_vars[$wpvar] ) {				$this->query_string .= (strlen($this->query_string) < 1) ? '' : '&';				if ( !is_scalar($this->query_vars[$wpvar]) ) // Discard non-scalars.					continue;				$this->query_string .= $wpvar . '=' . rawurlencode($this->query_vars[$wpvar]);			}		}		// query_string filter deprecated.  Use request filter instead.		if ( has_filter('query_string') ) {  // Don't bother filtering and parsing if no plugins are hooked in.			$this->query_string = apply_filters('query_string', $this->query_string);			parse_str($this->query_string, $this->query_vars);		}	}	/**	 * Set up the WordPress Globals.	 *	 * The query_vars property will be extracted to the GLOBALS. So care should	 * be taken when naming global variables that might interfere with the	 * WordPress environment.	 *	 * @global string $query_string Query string for the loop.	 * @global int $more Only set, if single page or post.	 * @global int $single If single page or post. Only set, if single page or post.	 *	 * @since 2.0.0	 */	function register_globals() {		global $wp_query;		// Extract updated query vars back into global namespace.		foreach ( (array) $wp_query->query_vars as $key => $value) {			$GLOBALS[$key] = $value;		}		$GLOBALS['query_string'] = $this->query_string;		$GLOBALS['posts'] = & $wp_query->posts;		$GLOBALS['post'] = $wp_query->post;		$GLOBALS['request'] = $wp_query->request;		if ( is_single() || is_page() ) {			$GLOBALS['more'] = 1;			$GLOBALS['single'] = 1;		}	}	/**	 * Set up the current user.	 *	 * @since 2.0.0	 */	function init() {		wp_get_current_user();	}	/**	 * Set up the Loop based on the query variables.	 *	 * @uses WP::$query_vars	 * @since 2.0.0	 */	function query_posts() {		global $wp_the_query;		$this->build_query_string();		$wp_the_query->query($this->query_vars); 	} 	/** 	 * Set the Headers for 404, if nothing is found for requested URL.	 *	 * Issue a 404 if a request doesn't match any posts and doesn't match	 * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already	 * issued, and if the request was not a search or the homepage.	 *	 * Otherwise, issue a 200.	 *	 * @since 2.0.0 	 */	function handle_404() {		global $wp_query;		if ( ( 0 == count( $wp_query->posts ) ) && !is_404() && !is_robots() && !is_search() && !is_home() ) {			// Don't 404 for these queries if they matched an object.			if ( ( is_tag() || is_category() || is_tax() || is_author() ) && $wp_query->get_queried_object() && !is_paged() ) {				if ( !is_404() )					status_header( 200 );				return;			}			$wp_query->set_404();			status_header( 404 );			nocache_headers();		} elseif ( !is_404() ) {			status_header( 200 );		}	}	/**	 * Sets up all of the variables required by the WordPress environment.	 *	 * The action 'wp' has one parameter that references the WP object. It	 * allows for accessing the properties and methods to further manipulate the	 * object.	 *	 * @since 2.0.0	 *	 * @param string|array $query_args Passed to {@link parse_request()}	 */	function main($query_args = '') {		$this->init();		$this->parse_request($query_args);		$this->send_headers();		$this->query_posts();		$this->handle_404();		$this->register_globals();		do_action_ref_array('wp', array(&$this));	}	/**	 * PHP4 Constructor - Does nothing.	 *	 * Call main() method when ready to run setup.	 *	 * @since 2.0.0	 *	 * @return WP	 */	function WP() {		// Empty.	}}/** * WordPress Error class. * * Container for checking for WordPress errors and error messages. Return * WP_Error and use {@link is_wp_error()} to check if this class is returned. * Many core WordPress functions pass this class in the event of an error and * if not handled properly will result in code errors. * * @package WordPress * @since 2.1.0 */class WP_Error {	/**	 * Stores the list of errors.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $errors = array();	/**	 * Stores the list of data for error codes.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $error_data = array();	/**	 * PHP4 Constructor - Sets up error message.	 *	 * If code parameter is empty then nothing will be done. It is possible to	 * add multiple messages to the same code, but with other methods in the	 * class.	 *	 * All parameters are optional, but if the code parameter is set, then the	 * data parameter is optional.	 *	 * @since 2.1.0	 *	 * @param string|int $code Error code	 * @param string $message Error message	 * @param mixed $data Optional. Error data.	 * @return WP_Error	 */	function WP_Error($code = '', $message = '', $data = '') {		if ( empty($code) )			return;		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Retrieve all error codes.	 *	 * @since 2.1.0	 * @access public	 *	 * @return array List of error codes, if avaiable.	 */	function get_error_codes() {		if ( empty($this->errors) )			return array();		return array_keys($this->errors);	}	/**	 * Retrieve first error code available.	 *	 * @since 2.1.0	 * @access public	 *	 * @return string|int Empty string, if no error codes.	 */	function get_error_code() {		$codes = $this->get_error_codes();		if ( empty($codes) )			return '';		return $codes[0];	}	/**	 * Retrieve all error messages or error messages matching code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Retrieve messages matching code, if exists.	 * @return array Error strings on success, or empty array on failure (if using codee parameter).	 */	function get_error_messages($code = '') {		// Return all messages if no code specified.		if ( empty($code) ) {			$all_messages = array();			foreach ( (array) $this->errors as $code => $messages )				$all_messages = array_merge($all_messages, $messages);			return $all_messages;		}		if ( isset($this->errors[$code]) )			return $this->errors[$code];		else			return array();	}	/**	 * Get single error message.	 *	 * This will get the first message available for the code. If no code is	 * given then the first code available will be used.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code to retrieve message.	 * @return string	 */	function get_error_message($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$messages = $this->get_error_messages($code);		if ( empty($messages) )			return '';		return $messages[0];	}	/**	 * Retrieve error data for error code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code.	 * @return mixed Null, if no errors.	 */	function get_error_data($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		if ( isset($this->error_data[$code]) )			return $this->error_data[$code];		return null;	}	/**	 * Append more error messages to list of error messages.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $code Error code.	 * @param string $message Error message.	 * @param mixed $data Optional. Error data.	 */	function add($code, $message, $data = '') {		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Add data for error code.	 *	 * The error code can only contain one error data.	 *	 * @since 2.1.0	 *	 * @param mixed $data Error data.	 * @param string|int $code Error code.	 */	function add_data($data, $code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$this->error_data[$code] = $data;	}}/** * Check whether variable is a WordPress Error. * * Looks at the object and if a WP_Error class. Does not check to see if the * parent is also WP_Error, so can't inherit WP_Error and still use this * function. * * @since 2.1.0 * * @param mixed $thing Check if unknown variable is WordPress Error object. * @return bool True, if WP_Error. False, if not WP_Error. */function is_wp_error($thing) {	if ( is_object($thing) && is_a($thing, 'WP_Error') )		return true;	return false;}/** * A class for displaying various tree-like structures. * * Extend the Walker class to use it, see examples at the below. Child classes * do not need to implement all of the abstract methods in the class. The child * only needs to implement the methods that are needed. Also, the methods are * not strictly abstract in that the parameter definition needs to be followed. * The child classes can have additional parameters. * * @package WordPress * @since 2.1.0 * @abstract */class Walker {	/**	 * What the class handles.	 *	 * @since 2.1.0	 * @var string	 * @access public	 */	var $tree_type;	/**	 * DB fields to use.	 *	 * @since 2.1.0	 * @var array	 * @access protected	 */	var $db_fields;	/**	 * Max number of pages walked by the paged walker	 *	 * @since 2.7.0	 * @var int	 * @access protected	 */	var $max_pages = 1;	/**	 * Starts the list before the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method is called at the start of the output list.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_lvl(&$output) {}	/**	 * Ends the list of after the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method finishes the list at the end of output of the elements.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_lvl(&$output)   {}	/**	 * Start the element output.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. Includes	 * the element output also.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_el(&$output)  {}	/**	 * Ends the element output, if needed.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_el(&$output)    {}	/**	 * Traverse elements to create list from elements.	 *	 * Display one element if the element doesn't have any children otherwise,	 * display the element and its children. Will only traverse up to the max	 * depth and no ignore elements under that depth. It is possible to set the	 * max depth to include all depths, see walk() method.	 *	 * This method shouldn't be called directly, use the walk() method instead.	 *	 * @since 2.5.0	 *	 * @param object $element Data object	 * @param array $children_elements List of elements to continue traversing.	 * @param int $max_depth Max depth to traverse.	 * @param int $depth Depth of current element.	 * @param array $args	 * @param string $output Passed by reference. Used to append additional content.	 * @return null Null on failure with no changes to parameters.	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		//display this element		if ( is_array( $args[0] ) )			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'start_el'), $cb_args);		$id = $element->$id_field;		// descend only when the depth is right and there are childrens for this element		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {			foreach( $children_elements[ $id ] as $child ){				if ( !isset($newlevel) ) {					$newlevel = true;					//start the child delimiter					$cb_args = array_merge( array(&$output, $depth), $args);					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);				}				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );			}			unset( $children_elements[ $id ] );		}		if ( isset($newlevel) && $newlevel ){			//end the child delimiter			$cb_args = array_merge( array(&$output, $depth), $args);			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);		}		//end this element		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'end_el'), $cb_args);	}	/**	 * Display array of elements hierarchically.	 *	 * It is a generic function which does not assume any existing order of	 * elements. max_depth = -1 means flatly display every element. max_depth =	 * 0 means display all levels. max_depth > 0  specifies the number of	 * display levels.	 *	 * @since 2.1.0	 *	 * @param array $elements	 * @param int $max_depth	 * @return string	 */	function walk( $elements, $max_depth) {		$args = array_slice(func_get_args(), 2);		$output = '';		if ($max_depth < -1) //invalid parameter			return $output;		if (empty($elements)) //nothing to walk			return $output;		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		// flat display		if ( -1 == $max_depth ) {			$empty_array = array();			foreach ( $elements as $e )				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			return $output;		}		/*		 * need to display in hierarchical order		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		/*		 * when none of the elements is top level		 * assume the first one must be root of the sub elements		 */		if ( empty($top_level_elements) ) {			$first = array_slice( $elements, 0, 1 );			$root = $first[0];			$top_level_elements = array();			$children_elements  = array();			foreach ( $elements as $e) {				if ( $root->$parent_field == $e->$parent_field )					$top_level_elements[] = $e;				else					$children_elements[ $e->$parent_field ][] = $e;			}		}		foreach ( $top_level_elements as $e )			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		/*		 * if we are displaying all levels, and remaining children_elements is not empty,		 * then we got orphans, which should be displayed regardless		 */		if ( ( $max_depth == 0 ) && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		 }		 return $output;	}	/** 	 * paged_walk() - produce a page of nested elements 	 * 	 * Given an array of hierarchical elements, the maximum depth, a specific page number, 	 * and number of elements per page, this function first determines all top level root elements 	 * belonging to that page, then lists them and all of their children in hierarchical order. 	 * 	 * @package WordPress 	 * @since 2.7 	 * @param $max_depth = 0  means display all levels; $max_depth > 0  specifies the number of display levels. 	 * @param $page_num the specific page number, beginning with 1. 	 * @return XHTML of the specified page of elements 	 */	function paged_walk( $elements, $max_depth, $page_num, $per_page ) {		/* sanity check */		if ( empty($elements) || $max_depth < -1 )			return '';		$args = array_slice( func_get_args(), 4 );		$output = '';		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		$count = -1;		if ( -1 == $max_depth )			$total_top = count( $elements );		if ( $page_num < 1 || $per_page < 0  ) {			// No paging			$paging = false;			$start = 0;			if ( -1 == $max_depth )				$end = $total_top;			$this->max_pages = 1;		} else {			$paging = true;			$start = ( (int)$page_num - 1 ) * (int)$per_page;			$end   = $start + $per_page;			if ( -1 == $max_depth )				$this->max_pages = ceil($total_top / $per_page);		}		// flat display		if ( -1 == $max_depth ) {			if ( !empty($args[0]['reverse_top_level']) ) {				$elements = array_reverse( $elements );				$oldstart = $start;				$start = $total_top - $end;				$end = $total_top - $oldstart;			}			$empty_array = array();			foreach ( $elements as $e ) {				$count++;				if ( $count < $start )					continue;				if ( $count >= $end )					break;				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			}			return $output;		}		/*		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		$total_top = count( $top_level_elements );		if ( $paging )			$this->max_pages = ceil($total_top / $per_page);		else			$end = $total_top;		if ( !empty($args[0]['reverse_top_level']) ) {			$top_level_elements = array_reverse( $top_level_elements );			$oldstart = $start;			$start = $total_top - $end;			$end = $total_top - $oldstart;		}		if ( !empty($args[0]['reverse_children']) ) {			foreach ( $children_elements as $parent => $children )				$children_elements[$parent] = array_reverse( $children );		}		foreach ( $top_level_elements as $e ) {			$count++;			//for the last page, need to unset earlier children in order to keep track of orphans			if ( $end >= $total_top && $count < $start )					$this->unset_children( $e, $children_elements );			if ( $count < $start )				continue;			if ( $count >= $end )				break;			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		}		if ( $end >= $total_top && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		}		return $output;	}	function get_number_of_root_elements( $elements ){		$num = 0;		$parent_field = $this->db_fields['parent'];		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$num++;		}		return $num;	}	// unset all the children for a given top level element	function unset_children( $e, &$children_elements ){		if ( !$e || !$children_elements )			return;		$id_field = $this->db_fields['id'];		$id = $e->$id_field;		if ( !empty($children_elements[$id]) && is_array($children_elements[$id]) )			foreach ( (array) $children_elements[$id] as $child )				$this->unset_children( $child, $children_elements );		if ( isset($children_elements[$id]) )			unset( $children_elements[$id] );	}}/** * Create HTML list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Page extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page. Used for padding.	 * @param int $current_page Page ID.	 * @param array $args	 */	function start_el(&$output, $page, $depth, $args, $current_page) {		if ( $depth )			$indent = str_repeat("\t", $depth);		else			$indent = '';		extract($args, EXTR_SKIP);		$css_class = array('page_item', 'page-item-'.$page->ID);		if ( !empty($current_page) ) {			$_current_page = get_page( $current_page );			if ( isset($_current_page->ancestors) && in_array($page->ID, (array) $_current_page->ancestors) )				$css_class[] = 'current_page_ancestor';			if ( $page->ID == $current_page )				$css_class[] = 'current_page_item';			elseif ( $_current_page && $page->ID == $_current_page->post_parent )				$css_class[] = 'current_page_parent';		} elseif ( $page->ID == get_option('page_for_posts') ) {			$css_class[] = 'current_page_parent';		}		$css_class = implode(' ', apply_filters('page_css_class', $css_class, $page));		$output .= $indent . '<li class="' . $css_class . '"><a href="' . get_page_link($page->ID) . '" title="' . esc_attr( wp_strip_all_tags( apply_filters( 'the_title', $page->post_title, $page->ID ) ) ) . '">' . $link_before . apply_filters( 'the_title', $page->post_title, $page->ID ) . $link_after . '</a>';		if ( !empty($show_date) ) {			if ( 'modified' == $show_date )				$time = $page->post_modified;			else				$time = $page->post_date;			$output .= " " . mysql2date($date_format, $time);		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $page, $depth) {		$output .= "</li>\n";	}}/** * Create HTML dropdown list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_PageDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page in reference to parent pages. Used for padding.	 * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.	 */	function start_el(&$output, $page, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$output .= "\t<option class=\"level-$depth\" value=\"$page->ID\"";		if ( $page->ID == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$title = esc_html($page->post_title);		$output .= "$pad$title";		$output .= "</option>\n";	}}/** * Create HTML list of categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Category extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function start_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function end_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category in reference to parents.	 * @param array $args	 */	function start_el(&$output, $category, $depth, $args) {		extract($args);		$cat_name = esc_attr( $category->name);		$cat_name = apply_filters( 'list_cats', $cat_name, $category );		$link = '<a href="' . get_term_link( $category, $category->taxonomy ) . '" ';		if ( $use_desc_for_title == 0 || empty($category->description) )			$link .= 'title="' . sprintf(__( 'View all posts filed under %s' ), $cat_name) . '"';		else			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';		$link .= '>';		$link .= $cat_name . '</a>';		if ( (! empty($feed_image)) || (! empty($feed)) ) {			$link .= ' ';			if ( empty($feed_image) )				$link .= '(';			$link .= '<a href="' . get_term_feed_link( $category->term_id, $category->taxonomy, $feed_type ) . '"';			if ( empty($feed) )				$alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s' ), $cat_name ) . '"';			else {				$title = ' title="' . $feed . '"';				$alt = ' alt="' . $feed . '"';				$name = $feed;				$link .= $title;			}			$link .= '>';			if ( empty($feed_image) )				$link .= $name;			else				$link .= "<img src='$feed_image'$alt$title" . ' />';			$link .= '</a>';			if ( empty($feed_image) )				$link .= ')';		}		if ( isset($show_count) && $show_count )			$link .= ' (' . intval($category->count) . ')';		if ( isset($show_date) && $show_date ) {			$link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);		}		if ( isset($current_category) && $current_category )			$_current_category = get_category( $current_category );		if ( 'list' == $args['style'] ) {			$output .= "\t<li";			$class = 'cat-item cat-item-'.$category->term_id;			if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )				$class .=  ' current-cat';			elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )				$class .=  ' current-cat-parent';			$output .=  ' class="'.$class.'"';			$output .= ">$link\n";		} else {			$output .= "\t$link<br />\n";		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Not used.	 * @param int $depth Depth of category. Not used.	 * @param array $args Only uses 'list' for whether should append to output.	 */	function end_el(&$output, $page, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$output .= "</li>\n";	}}/** * Create HTML dropdown list of Categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_CategoryDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category. Used for padding.	 * @param array $args Uses 'selected', 'show_count', and 'show_last_update' keys, if they exist.	 */	function start_el(&$output, $category, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$cat_name = apply_filters('list_cats', $category->name, $category);		$output .= "\t<option class=\"level-$depth\" value=\"".$category->term_id."\"";		if ( $category->term_id == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$output .= $pad.$cat_name;		if ( $args['show_count'] )			$output .= '&nbsp;&nbsp;('. $category->count .')';		if ( $args['show_last_update'] ) {			$format = 'Y-m-d';			$output .= '&nbsp;&nbsp;' . gmdate($format, $category->last_update_timestamp);		}		$output .= "</option>\n";	}}/** * Send XML response back to AJAX request. * * @package WordPress * @since 2.1.0 */class WP_Ajax_Response {	/**	 * Store XML responses to send.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $responses = array();	/**	 * PHP4 Constructor - Passes args to {@link WP_Ajax_Response::add()}.	 *	 * @since 2.1.0	 * @see WP_Ajax_Response::add()	 *	 * @param string|array $args Optional. Will be passed to add() method.	 * @return WP_Ajax_Response	 */	function WP_Ajax_Response( $args = '' ) {		if ( !empty($args) )			$this->add($args);	}	/**	 * Append to XML response based on given arguments.	 *	 * The arguments that can be passed in the $args parameter are below. It is	 * also possible to pass a WP_Error object in either the 'id' or 'data'	 * argument. The parameter isn't actually optional, content should be given	 * in order to send the correct response.	 *	 * 'what' argument is a string that is the XMLRPC response type.	 * 'action' argument is a boolean or string that acts like a nonce.	 * 'id' argument can be WP_Error or an integer.	 * 'old_id' argument is false by default or an integer of the previous ID.	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,	 * html ID = after, -html ID = before.	 * 'data' argument is a string with the content or message.	 * 'supplemental' argument is an array of strings that will be children of	 * the supplemental element.	 *	 * @since 2.1.0	 *	 * @param string|array $args Override defaults.	 * @return string XML response.	 */	function add( $args = '' ) {		$defaults = array(			'what' => 'object', 'action' => false,			'id' => '0', 'old_id' => false,			'position' => 1,			'data' => '', 'supplemental' => array()		);		$r = wp_parse_args( $args, $defaults );		extract( $r, EXTR_SKIP );		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );		if ( is_wp_error($id) ) {			$data = $id;			$id = 0;		}		$response = '';		if ( is_wp_error($data) ) {			foreach ( (array) $data->get_error_codes() as $code ) {				$response .= "<wp_error code='$code'><![CDATA[" . $data->get_error_message($code) . "]]></wp_error>";				if ( !$error_data = $data->get_error_data($code) )					continue;				$class = '';				if ( is_object($error_data) ) {					$class = ' class="' . get_class($error_data) . '"';					$error_data = get_object_vars($error_data);				}				$response .= "<wp_error_data code='$code'$class>";				if ( is_scalar($error_data) ) {					$response .= "<![CDATA[$error_data]]>";				} elseif ( is_array($error_data) ) {					foreach ( $error_data as $k => $v )						$response .= "<$k><![CDATA[$v]]></$k>";				}				$response .= "</wp_error_data>";			}		} else {			$response = "<response_data><![CDATA[$data]]></response_data>";		}		$s = '';		if ( is_array($supplemental) ) {			foreach ( $supplemental as $k => $v )				$s .= "<$k><![CDATA[$v]]></$k>";			$s = "<supplemental>$s</supplemental>";		}		if ( false === $action )			$action = $_POST['action'];		$x = '';		$x .= "<response action='{$action}_$id'>"; // The action attribute in the xml output is formatted like a nonce action		$x .=	"<$what id='$id' " . ( false === $old_id ? '' : "old_id='$old_id' " ) . "position='$position'>";		$x .=		$response;		$x .=		$s;		$x .=	"</$what>";		$x .= "</response>";		$this->responses[] = $x;		return $x;	}	/**	 * Display XML formatted responses.	 *	 * Sets the content type header to text/xml.	 *	 * @since 2.1.0	 */	function send() {		header('Content-Type: text/xml');		echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";		foreach ( (array) $this->responses as $response )			echo $response;		echo '</wp_ajax>';		die();	}}/** * Helper class to remove the need to use eval to replace $matches[] in query strings. * * @since 2.9.0 */class WP_MatchesMapRegex {	/**	 * store for matches	 *	 * @access private	 * @var array	 */	var $_matches;	/**	 * store for mapping result	 *	 * @access public	 * @var string	 */	var $output;	/**	 * subject to perform mapping on (query string containing $matches[] references	 *	 * @access private	 * @var string	 */	var $_subject;	/**	 * regexp pattern to match $matches[] references	 *	 * @var string	 */	var $_pattern = '(\$matches\[[1-9]+[0-9]*\])'; // magic number	/**	 * constructor	 *	 * @param string $subject subject if regex	 * @param array  $matches data to use in map	 * @return self	 */	function WP_MatchesMapRegex($subject, $matches) {		$this->_subject = $subject;		$this->_matches = $matches;		$this->output = $this->_map();	}	/**	 * Substitute substring matches in subject.	 *	 * static helper function to ease use	 *	 * @access public	 * @param string $subject subject	 * @param array  $matches data used for subsitution	 * @return string	 */	function apply($subject, $matches) {		$oSelf =& new WP_MatchesMapRegex($subject, $matches);		return $oSelf->output;	}	/**	 * do the actual mapping	 *	 * @access private	 * @return string	 */	function _map() {		$callback = array(&$this, 'callback');		return preg_replace_callback($this->_pattern, $callback, $this->_subject);	}	/**	 * preg_replace_callback hook	 *	 * @access public	 * @param  array $matches preg_replace regexp matches	 * @return string	 */	function callback($matches) {		$index = intval(substr($matches[0], 9, -1));		return ( isset( $this->_matches[$index] ) ? urlencode($this->_matches[$index]) : '' );	}}?>
<?php/** * WordPress Administration for Navigation Menus * Interface functions * * @version 2.0.0 * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once( 'admin.php' );// Load all the nav menu interface functionsrequire_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );if ( ! current_theme_supports( 'menus' ) && ! current_theme_supports( 'widgets' ) )	wp_die( __( 'Your theme does not support navigation menus or widgets.' ) );// Permissions Checkif ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );// Nav Menu CSSwp_admin_css( 'nav-menu' );// jQuerywp_enqueue_script( 'jquery' );wp_enqueue_script( 'jquery-ui-draggable' );wp_enqueue_script( 'jquery-ui-droppable' );wp_enqueue_script( 'jquery-ui-sortable' );// Nav Menu functionswp_enqueue_script( 'nav-menu' );// Metaboxeswp_enqueue_script( 'common' );wp_enqueue_script( 'wp-lists' );wp_enqueue_script( 'postbox' );// Container for any messages displayed to the user$messages = array();// Container that stores the name of the active menu$nav_menu_selected_title = '';// The menu id of the current menu being edited$nav_menu_selected_id = isset( $_REQUEST['menu'] ) ? (int) $_REQUEST['menu'] : 0;// Allowed actions: add, update, delete$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'edit';switch ( $action ) {	case 'add-menu-item':		check_admin_referer( 'add-menu_item', 'menu-settings-column-nonce' );		if ( isset( $_REQUEST['nav-menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_REQUEST['menu-locations'] ) );		elseif ( isset( $_REQUEST['menu-item'] ) )			wp_save_nav_menu_items( $nav_menu_selected_id, $_REQUEST['menu-item'] );		break;	case 'move-down-menu-item' :		// moving down a menu item is the same as moving up the next in order		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// get next in order				if (					isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1] )				) {					$next_item_id = $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1];					$next_item_data = (array) wp_setup_nav_menu_item( get_post( $next_item_id ) );					// if not siblings of same parent, bubble menu item up but keep order					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						(							empty( $next_item_data['menu_item_parent'] ) ||							$next_item_data['menu_item_parent'] != $menu_item_data['menu_item_parent']						)					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						}					// make menu item a child of its next sibling					} else {						$next_item_data['menu_order'] = $next_item_data['menu_order'] - 1;						$menu_item_data['menu_order'] = $menu_item_data['menu_order'] + 1;						$menu_item_data['menu_item_parent'] = $next_item_data['ID'];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);						wp_update_post($next_item_data);					}				// the item is last but still has a parent, so bubble up				} elseif (					! empty( $menu_item_data['menu_item_parent'] ) &&					in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids )				) {					$menu_item_data['menu_item_parent'] = (int) get_post_meta( $menu_item_data['menu_item_parent'], '_menu_item_menu_item_parent', true);					update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );				}			}		}		break;	case 'move-up-menu-item' :		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// if this menu item is not first				if ( ! empty( $dbids_to_orders[$menu_item_id] ) && ! empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ) {					// if this menu item is a child of the previous					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) &&						isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) &&						( $menu_item_data['menu_item_parent'] == $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] )					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							// if there is something before the parent and parent a child of it, make menu item a child also of it							if (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] ) &&								! empty( $parent_data['menu_item_parent'] )							) {								$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							// else if there is something before parent and parent not a child of it, make menu item a child of that something's parent							} elseif (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] )							) {								$_possible_parent_id = (int) get_post_meta( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1], '_menu_item_menu_item_parent', true);								if ( in_array( $_possible_parent_id, array_keys( $dbids_to_orders ) ) )									$menu_item_data['menu_item_parent'] = $_possible_parent_id;								else									$menu_item_data['menu_item_parent'] = 0;							// else there isn't something before the parent							} else {								$menu_item_data['menu_item_parent'] = 0;							}							// set former parent's [menu_order] to that of menu-item's							$parent_data['menu_order'] = $parent_data['menu_order'] + 1;							// set menu-item's [menu_order] to that of former parent							$menu_item_data['menu_order'] = $menu_item_data['menu_order'] - 1;							// save changes							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );							wp_update_post($menu_item_data);							wp_update_post($parent_data);						}					// else this menu item is not a child of the previous					} elseif (						empty( $menu_item_data['menu_order'] ) ||						empty( $menu_item_data['menu_item_parent'] ) ||						! in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) ||						empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ||						$orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] != $menu_item_data['menu_item_parent']					) {						// just make it a child of the previous; keep the order						$menu_item_data['menu_item_parent'] = (int) $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);					}				}			}		}		break;	case 'delete-menu-item':		$menu_item_id = (int) $_REQUEST['menu-item'];		check_admin_referer( 'delete-menu_item_' . $menu_item_id );		if ( is_nav_menu_item( $menu_item_id ) && wp_delete_post( $menu_item_id, true ) )			$messages[] = '<div id="message" class="updated"><p>' . __('The menu item has been successfully deleted.') . '</p></div>';		break;	case 'delete':		check_admin_referer( 'delete-nav_menu-' . $nav_menu_selected_id );		if ( is_nav_menu( $nav_menu_selected_id ) ) {			$deleted_nav_menu = wp_get_nav_menu_object( $nav_menu_selected_id );			$delete_nav_menu = wp_delete_nav_menu( $nav_menu_selected_id );			if ( is_wp_error($delete_nav_menu) ) {				$messages[] = '<div id="message" class="error"><p>' . $delete_nav_menu->get_error_message() . '</p></div>';			} else {				// Remove this menu from any locations.				$locations = get_theme_mod( 'nav_menu_locations' );				foreach ( (array) $locations as $location => $menu_id ) {					if ( $menu_id == $nav_menu_selected_id )						$locations[ $location ] = 0;				}				set_theme_mod( 'nav_menu_locations', $locations );				$messages[] = '<div id="message" class="updated"><p>' . __('The menu has been successfully deleted.') . '</p></div>';				// Select the next available menu				$nav_menu_selected_id = 0;				$_nav_menus = wp_get_nav_menus( array('orderby' => 'name') );				foreach( $_nav_menus as $index => $_nav_menu ) {					if ( strcmp( $_nav_menu->name, $deleted_nav_menu->name ) >= 0					 || $index == count( $_nav_menus ) - 1 ) {						$nav_menu_selected_id = $_nav_menu->term_id;						break;					}				}			}			unset( $delete_nav_menu, $deleted_nav_menu, $_nav_menus );		} else {			// Reset the selected menu			$nav_menu_selected_id = 0;			unset( $_REQUEST['menu'] );		}		break;	case 'update':		check_admin_referer( 'update-nav_menu', 'update-nav-menu-nonce' );		// Update menu theme locations		if ( isset( $_POST['menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );		// Add Menu		if ( 0 == $nav_menu_selected_id ) {			$new_menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( $new_menu_title ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( 0, array('menu-name' => $new_menu_title) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					if ( ( $_menu_locations = get_registered_nav_menus() ) && 1 == count( wp_get_nav_menus() ) )						set_theme_mod( 'nav_menu_locations', array( key( $_menu_locations ) => $_nav_menu_selected_id ) );					unset( $_menu_locations );					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_id = $_nav_menu_selected_id;					$nav_menu_selected_title = $_menu_object->name;					$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been successfully created.'), $nav_menu_selected_title ) . '</p></div>';				}			} else {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';			}		// update existing menu		} else {			$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );			$menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( ! $menu_title ) {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';				$menu_title = $_menu_object->name;			}			if ( ! is_wp_error( $_menu_object ) ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( $nav_menu_selected_id, array( 'menu-name' => $menu_title ) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$_menu_object = $_nav_menu_selected_id;					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_title = $_menu_object->name;				}			}			// Update menu items			if ( ! is_wp_error( $_menu_object ) ) {				$unsorted_menu_items = wp_get_nav_menu_items( $nav_menu_selected_id, array('orderby' => 'ID', 'output' => ARRAY_A, 'output_key' => 'ID', 'post_status' => 'draft,publish') );				$menu_items = array();				// Index menu items by db ID				foreach( $unsorted_menu_items as $_item )					$menu_items[$_item->db_id] = $_item;				$post_fields = array( 'menu-item-db-id', 'menu-item-object-id', 'menu-item-object', 'menu-item-parent-id', 'menu-item-position', 'menu-item-type', 'menu-item-title', 'menu-item-url', 'menu-item-description', 'menu-item-attr-title', 'menu-item-target', 'menu-item-classes', 'menu-item-xfn' );				wp_defer_term_counting(true);				// Loop through all the menu items' POST variables				if ( ! empty( $_POST['menu-item-db-id'] ) ) {					foreach( (array) $_POST['menu-item-db-id'] as $_key => $k ) {						// Menu item title can't be blank						if ( empty( $_POST['menu-item-title'][$_key] ) )							continue;						$args = array();						foreach ( $post_fields as $field )							$args[$field] = isset( $_POST[$field][$_key] ) ? $_POST[$field][$_key] : '';						$menu_item_db_id = wp_update_nav_menu_item( $nav_menu_selected_id, ( $_POST['menu-item-db-id'][$_key] != $_key ? 0 : $_key ), $args );						if ( is_wp_error( $menu_item_db_id ) )							$messages[] = '<div id="message" class="error"><p>' . $menu_item_db_id->get_error_message() . '</p></div>';						elseif ( isset( $menu_items[$menu_item_db_id] ) )							unset( $menu_items[$menu_item_db_id] );					}				}				// Remove menu items from the menu that weren't in $_POST				if ( ! empty( $menu_items ) ) {					foreach ( array_keys( $menu_items ) as $menu_item_id ) {						if ( is_nav_menu_item( $menu_item_id ) ) {							wp_delete_post( $menu_item_id );						}					}				}				// Store 'auto-add' pages.				$auto_add = ! empty( $_POST['auto-add-pages'] );				$nav_menu_option = (array) get_option( 'nav_menu_options' );				if ( ! isset( $nav_menu_option['auto_add'] ) )					$nav_menu_option['auto_add'] = array();				if ( $auto_add ) {					if ( ! in_array( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) )						$nav_menu_option['auto_add'][] = $nav_menu_selected_id;				} else {					if ( false !== ( $key = array_search( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) ) )						unset( $nav_menu_option['auto_add'][$key] );				}				// Remove nonexistent/deleted menus				$nav_menu_option['auto_add'] = array_intersect( $nav_menu_option['auto_add'], wp_get_nav_menus( array( 'fields' => 'ids' ) ) );				update_option( 'nav_menu_options', $nav_menu_option );				wp_defer_term_counting(false);				do_action( 'wp_update_nav_menu', $nav_menu_selected_id );				$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been updated.'), $nav_menu_selected_title ) . '</p></div>';				unset( $menu_items, $unsorted_menu_items );			}		}		break;}// Get all nav menus$nav_menus = wp_get_nav_menus( array('orderby' => 'name') );// Get recently edited nav menu$recently_edited = (int) get_user_option( 'nav_menu_recently_edited' );// If there was no recently edited menu, and $nav_menu_selected_id is a nav menu, update recently edited menu.if ( !$recently_edited && is_nav_menu( $nav_menu_selected_id ) ) {	$recently_edited = $nav_menu_selected_id;// Else if $nav_menu_selected_id is not a menu and not requesting that we create a new menu, but $recently_edited is a menu, grab that one.} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && is_nav_menu( $recently_edited ) ) {	$nav_menu_selected_id = $recently_edited;// Else try to grab the first menu from the menus list} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && ! empty($nav_menus) ) {	$nav_menu_selected_id = $nav_menus[0]->term_id;}// Update the user's settingif ( $nav_menu_selected_id != $recently_edited && is_nav_menu( $nav_menu_selected_id ) )	update_user_meta( $current_user->ID, 'nav_menu_recently_edited', $nav_menu_selected_id );// If there's a menu, get its name.if ( ! $nav_menu_selected_title && is_nav_menu( $nav_menu_selected_id ) ) {	$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );	$nav_menu_selected_title = ! is_wp_error( $_menu_object ) ? $_menu_object->name : '';}// Generate truncated menu namesforeach( (array) $nav_menus as $key => $_nav_menu ) {	$_nav_menu->truncated_name = trim( wp_html_excerpt( $_nav_menu->name, 40 ) );	if ( $_nav_menu->truncated_name != $_nav_menu->name )		$_nav_menu->truncated_name .= '&hellip;';	$nav_menus[$key]->truncated_name = $_nav_menu->truncated_name;}// Ensure the user will be able to scroll horizontally// by adding a class for the max menu depth.global $_wp_nav_menu_max_depth;$_wp_nav_menu_max_depth = 0;// Calling wp_get_nav_menu_to_edit generates $_wp_nav_menu_max_depthif ( is_nav_menu( $nav_menu_selected_id ) )	$edit_markup = wp_get_nav_menu_to_edit( $nav_menu_selected_id  );function wp_nav_menu_max_depth() {	global $_wp_nav_menu_max_depth;	return "menu-max-depth-$_wp_nav_menu_max_depth";}add_action('admin_body_class','wp_nav_menu_max_depth');wp_nav_menu_setup();wp_initial_nav_menu_meta_boxes();if ( ! current_theme_supports( 'menus' ) && ! wp_get_nav_menus() )	echo '<div id="message" class="updated"><p>' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p></div>';$help =  '<p>' . __('This feature is new in version 3.0; to use a custom menu in place of your theme&#8217;s default menus, support for this feature must be registered in the theme&#8217;s functions.php file. If your theme does not support the custom menus feature yet (the new default theme, Twenty Ten, does), you can learn about adding support yourself by following the below link.') . '</p>';$help .= '<p>' . __('You can create custom menus for your site. These menus may contain links to pages, categories, custom links or other content types (use the Screen Options tab to decide which ones to show on the screen). You can specify a different navigation label for a menu item as well as other attributes. You can create multiple menus. If your theme includes more than one menu, you can choose which custom menu to associate with each. You can also use custom menus in conjunction with the Custom Menus widget.') . '</p>';$help .= '<p>' . __('To create a new custom menu, click on the + tab, give the menu a name, and click Create Menu. Next, add menu items from the appropriate boxes. You&#8217;ll be able to edit the information for each menu item, and can drag and drop to put them in order. You can also drag a menu item a little to the right to make it a submenu, to create menus with hierarchy. You&#8217;ll see when the position of the drop target shifts over to create the nested placement. Don&#8217;t forget to click Save when you&#8217;re finished.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Menus_SubPanel" target="_blank">Menus Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// Get the admin headerrequire_once( 'admin-header.php' );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e('Menus'); ?></h2>	<?php	foreach( $messages as $message ) :		echo $message . "\n";	endforeach;	?>	<div id="nav-menus-frame">	<div id="menu-settings-column" class="metabox-holder<?php if ( !$nav_menu_selected_id ) { echo ' metabox-holder-disabled'; } ?>">		<form id="nav-menu-meta" action="<?php echo admin_url( 'nav-menus.php' ); ?>" class="nav-menu-meta" method="post" enctype="multipart/form-data">			<input type="hidden" name="menu" id="nav-menu-meta-object-id" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />			<input type="hidden" name="action" value="add-menu-item" />			<?php wp_nonce_field( 'add-menu_item', 'menu-settings-column-nonce' ); ?>			<?php do_meta_boxes( 'nav-menus', 'side', null ); ?>		</form>	</div><!-- /#menu-settings-column -->	<div id="menu-management-liquid">		<div id="menu-management">			<div id="select-nav-menu-container" class="hide-if-js">				<form id="select-nav-menu" action="">					<strong><label for="select-nav-menu"><?php esc_html_e( 'Select Menu:' ); ?></label></strong>					<select class="select-nav-menu" name="menu">						<?php foreach( (array) $nav_menus as $_nav_menu ) : ?>							<option value="<?php echo esc_attr($_nav_menu->term_id) ?>" <?php selected($nav_menu_selected_id, $_nav_menu->term_id); ?>>								<?php echo esc_html( $_nav_menu->truncated_name ); ?>							</option>						<?php endforeach; ?>						<option value="0"><?php esc_html_e('Add New Menu'); ?></option>					</select>					<input type="hidden" name="action" value="edit" />					<input class="button-secondary" name="select_menu" type="submit" value="<?php esc_attr_e('Select'); ?>" />				</form>			</div>			<div class="nav-tabs-wrapper">			<div class="nav-tabs">				<?php				foreach( (array) $nav_menus as $_nav_menu ) :					if ( $nav_menu_selected_id == $_nav_menu->term_id ) : ?><span class="nav-tab nav-tab-active">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</span><?php else : ?><a href="<?php							echo esc_url(add_query_arg(								array(									'action' => 'edit',									'menu' => $_nav_menu->term_id,								),								admin_url( 'nav-menus.php' )							));						?>" class="nav-tab hide-if-no-js">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</a><?php endif;				endforeach;				if ( 0 == $nav_menu_selected_id ) : ?><span class="nav-tab menu-add-new nav-tab-active">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</span><?php else : ?><a href="<?php					echo esc_url(add_query_arg(						array(							'action' => 'edit',							'menu' => 0,						),						admin_url( 'nav-menus.php' )					));				?>" class="nav-tab menu-add-new">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</a><?php endif; ?>			</div>			</div>			<div class="menu-edit">				<form id="update-nav-menu" action="<?php echo admin_url( 'nav-menus.php' ); ?>" method="post" enctype="multipart/form-data">					<div id="nav-menu-header">						<div id="submitpost" class="submitbox">							<div class="major-publishing-actions">								<label class="menu-name-label howto open-label" for="menu-name">									<span><?php _e('Menu Name'); ?></span>									<input name="menu-name" id="menu-name" type="text" class="menu-name regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Enter menu name here'); ?>" value="<?php echo esc_attr( $nav_menu_selected_title  ); ?>" />								</label>								<?php if ( !empty( $nav_menu_selected_id ) ) :									if ( ! isset( $auto_add ) ) {										$auto_add = get_option( 'nav_menu_options' );										if ( ! isset( $auto_add['auto_add'] ) )											$auto_add = false;										elseif ( false !== array_search( $nav_menu_selected_id, $auto_add['auto_add'] ) )											$auto_add = true;										else											$auto_add = false;									}								?>								<div class="auto-add-pages">									<label class="howto"><input type="checkbox"<?php checked( $auto_add ); ?> name="auto-add-pages" value="1" /> <?php printf( __('Automatically add new top-level pages' ), esc_url( admin_url( 'edit.php?post_type=page' ) ) ); ?></label>								</div>								<?php endif; ?>								<br class="clear" />								<div class="publishing-action">									<input class="button-primary menu-save" name="save_menu" type="submit" value="<?php empty($nav_menu_selected_id) ? esc_attr_e('Create Menu') : esc_attr_e('Save Menu'); ?>" />								</div><!-- END .publishing-action -->								<?php if ( ! empty( $nav_menu_selected_id ) ) : ?>								<div class="delete-action">									<a class="submitdelete deletion menu-delete" href="<?php echo esc_url( wp_nonce_url( admin_url('nav-menus.php?action=delete&amp;menu=' . $nav_menu_selected_id), 'delete-nav_menu-' . $nav_menu_selected_id ) ); ?>"><?php _e('Delete Menu'); ?></a>								</div><!-- END .delete-action -->								<?php endif; ?>							</div><!-- END .major-publishing-actions -->						</div><!-- END #submitpost .submitbox -->						<?php						wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );						wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );						wp_nonce_field( 'update-nav_menu', 'update-nav-menu-nonce' );						?>						<input type="hidden" name="action" value="update" />						<input type="hidden" name="menu" id="menu" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />					</div><!-- END #nav-menu-header -->					<div id="post-body">						<div id="post-body-content">							<?php							if ( isset( $edit_markup ) ) {								if ( ! is_wp_error( $edit_markup ) )									echo $edit_markup;							} else if ( empty( $nav_menu_selected_id ) ) {								echo '<div class="post-body-plain">';								echo '<p>' . __('To create a custom menu, give it a name above and click Create Menu. Then choose items like pages, categories or custom links from the left column to add to this menu.') . '</p>';								echo '<p>' . __('After you have added your items, drag and drop to put them in the order you want. You can also click each item to reveal additional configuration options.') . '</p>';								echo '<p>' . __('When you have finished building your custom menu, make sure you click the Save Menu button.') . '</p>';								echo '</div>';							}							?>						</div><!-- /#post-body-content -->					</div><!-- /#post-body -->				</form><!-- /#update-nav-menu -->			</div><!-- /.menu-edit -->		</div><!-- /#menu-management -->	</div><!-- /#menu-management-liquid -->	</div><!-- /#nav-menus-frame --></div><!-- /.wrap--><?php include( 'admin-footer.php' ); ?>
<?php/** * A File upgrader class for WordPress. * * This set of classes are designed to be used to upgrade/install a local set of files on the filesystem via the Filesystem Abstraction classes. * * @link http://trac.wordpress.org/ticket/7875 consolidate plugin/theme/core upgrade/install functions * * @package WordPress * @subpackage Upgrader * @since 2.8.0 *//** * WordPress Upgrader class for Upgrading/Installing a local set of files via the Filesystem Abstraction classes from a Zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader {	var $strings = array();	var $skin = null;	var $result = array();	function WP_Upgrader($skin = null) {		return $this->__construct($skin);	}	function __construct($skin = null) {		if ( null == $skin )			$this->skin = new WP_Upgrader_Skin();		else			$this->skin = $skin;	}	function init() {		$this->skin->set_upgrader($this);		$this->generic_strings();	}	function generic_strings() {		$this->strings['bad_request'] = __('Invalid Data provided.');		$this->strings['fs_unavailable'] = __('Could not access filesystem.');		$this->strings['fs_error'] = __('Filesystem error.');		$this->strings['fs_no_root_dir'] = __('Unable to locate WordPress Root directory.');		$this->strings['fs_no_content_dir'] = __('Unable to locate WordPress Content directory (wp-content).');		$this->strings['fs_no_plugins_dir'] = __('Unable to locate WordPress Plugin directory.');		$this->strings['fs_no_themes_dir'] = __('Unable to locate WordPress Theme directory.');		/* translators: %s: directory name */		$this->strings['fs_no_folder'] = __('Unable to locate needed folder (%s).');		$this->strings['download_failed'] = __('Download failed.');		$this->strings['installing_package'] = __('Installing the latest version&#8230;');		$this->strings['folder_exists'] = __('Destination folder already exists.');		$this->strings['mkdir_failed'] = __('Could not create directory.');		$this->strings['bad_package'] = __('Incompatible Archive.');		$this->strings['maintenance_start'] = __('Enabling Maintenance mode&#8230;');		$this->strings['maintenance_end'] = __('Disabling Maintenance mode&#8230;');	}	function fs_connect( $directories = array() ) {		global $wp_filesystem;		if ( false === ($credentials = $this->skin->request_filesystem_credentials()) )			return false;		if ( ! WP_Filesystem($credentials) ) {			$error = true;			if ( is_object($wp_filesystem) && $wp_filesystem->errors->get_error_code() )				$error = $wp_filesystem->errors;			$this->skin->request_filesystem_credentials($error); //Failed to connect, Error and request again			return false;		}		if ( ! is_object($wp_filesystem) )			return new WP_Error('fs_unavailable', $this->strings['fs_unavailable'] );		if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )			return new WP_Error('fs_error', $this->strings['fs_error'], $wp_filesystem->errors);		foreach ( (array)$directories as $dir ) {			switch ( $dir ) {				case ABSPATH:					if ( ! $wp_filesystem->abspath() )						return new WP_Error('fs_no_root_dir', $this->strings['fs_no_root_dir']);					break;				case WP_CONTENT_DIR:					if ( ! $wp_filesystem->wp_content_dir() )						return new WP_Error('fs_no_content_dir', $this->strings['fs_no_content_dir']);					break;				case WP_PLUGIN_DIR:					if ( ! $wp_filesystem->wp_plugins_dir() )						return new WP_Error('fs_no_plugins_dir', $this->strings['fs_no_plugins_dir']);					break;				case WP_CONTENT_DIR . '/themes':					if ( ! $wp_filesystem->find_folder(WP_CONTENT_DIR . '/themes') )						return new WP_Error('fs_no_themes_dir', $this->strings['fs_no_themes_dir']);					break;				default:					if ( ! $wp_filesystem->find_folder($dir) )						return new WP_Error('fs_no_folder', sprintf($this->strings['fs_no_folder'], $dir));					break;			}		}		return true;	} //end fs_connect();	function download_package($package) {		if ( ! preg_match('!^(http|https|ftp)://!i', $package) && file_exists($package) ) //Local file or remote?			return $package; //must be a local file..		if ( empty($package) )			return new WP_Error('no_package', $this->strings['no_package']);		$this->skin->feedback('downloading_package', $package);		$download_file = download_url($package);		if ( is_wp_error($download_file) )			return new WP_Error('download_failed', $this->strings['download_failed'], $download_file->get_error_message());		return $download_file;	}	function unpack_package($package, $delete_package = true) {		global $wp_filesystem;		$this->skin->feedback('unpack_package');		$upgrade_folder = $wp_filesystem->wp_content_dir() . 'upgrade/';		//Clean up contents of upgrade directory beforehand.		$upgrade_files = $wp_filesystem->dirlist($upgrade_folder);		if ( !empty($upgrade_files) ) {			foreach ( $upgrade_files as $file )				$wp_filesystem->delete($upgrade_folder . $file['name'], true);		}		//We need a working directory		$working_dir = $upgrade_folder . basename($package, '.zip');		// Clean up working directory		if ( $wp_filesystem->is_dir($working_dir) )			$wp_filesystem->delete($working_dir, true);		// Unzip package to working directory		$result = unzip_file($package, $working_dir); //TODO optimizations, Copy when Move/Rename would suffice?		// Once extracted, delete the package if required.		if ( $delete_package )			unlink($package);		if ( is_wp_error($result) ) {			$wp_filesystem->delete($working_dir, true);			return $result;		}		return $working_dir;	}	function install_package($args = array()) {		global $wp_filesystem;		$defaults = array( 'source' => '', 'destination' => '', //Please always pass these						'clear_destination' => false, 'clear_working' => false,						'hook_extra' => array());		$args = wp_parse_args($args, $defaults);		extract($args);		@set_time_limit( 300 );		if ( empty($source) || empty($destination) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$this->skin->feedback('installing_package');		$res = apply_filters('upgrader_pre_install', true, $hook_extra);		if ( is_wp_error($res) )			return $res;		//Retain the Original source and destinations		$remote_source = $source;		$local_destination = $destination;		$source_files = array_keys( $wp_filesystem->dirlist($remote_source) );		$remote_destination = $wp_filesystem->find_folder($local_destination);		//Locate which directory to copy to the new folder, This is based on the actual folder holding the files.		if ( 1 == count($source_files) && $wp_filesystem->is_dir( trailingslashit($source) . $source_files[0] . '/') ) //Only one folder? Then we want its contents.			$source = trailingslashit($source) . trailingslashit($source_files[0]);		elseif ( count($source_files) == 0 )			return new WP_Error('bad_package', $this->strings['bad_package']); //There are no files?		//else //Its only a single file, The upgrader will use the foldername of this file as the destination folder. foldername is based on zip filename.		//Hook ability to change the source file location..		$source = apply_filters('upgrader_source_selection', $source, $remote_source, $this);		if ( is_wp_error($source) )			return $source;		//Has the source location changed? If so, we need a new source_files list.		if ( $source !== $remote_source )			$source_files = array_keys( $wp_filesystem->dirlist($source) );		//Protection against deleting files in any important base directories.		if ( in_array( $destination, array(ABSPATH, WP_CONTENT_DIR, WP_PLUGIN_DIR, WP_CONTENT_DIR . '/themes') ) ) {			$remote_destination = trailingslashit($remote_destination) . trailingslashit(basename($source));			$destination = trailingslashit($destination) . trailingslashit(basename($source));		}		if ( $wp_filesystem->exists($remote_destination) ) {			if ( $clear_destination ) {				//We're going to clear the destination if theres something there				$this->skin->feedback('remove_old');				$removed = $wp_filesystem->delete($remote_destination, true);				$removed = apply_filters('upgrader_clear_destination', $removed, $local_destination, $remote_destination, $hook_extra);				if ( is_wp_error($removed) )					return $removed;				else if ( ! $removed )					return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);			} else {				//If we're not clearing the destination folder and something exists there allready, Bail.				//But first check to see if there are actually any files in the folder.				$_files = $wp_filesystem->dirlist($remote_destination);				if ( ! empty($_files) ) {					$wp_filesystem->delete($remote_source, true); //Clear out the source files.					return new WP_Error('folder_exists', $this->strings['folder_exists'], $remote_destination );				}			}		}		//Create destination if needed		if ( !$wp_filesystem->exists($remote_destination) )			if ( !$wp_filesystem->mkdir($remote_destination, FS_CHMOD_DIR) )				return new WP_Error('mkdir_failed', $this->strings['mkdir_failed'], $remote_destination);		// Copy new version of item into place.		$result = copy_dir($source, $remote_destination);		if ( is_wp_error($result) ) {			if ( $clear_working )				$wp_filesystem->delete($remote_source, true);			return $result;		}		//Clear the Working folder?		if ( $clear_working )			$wp_filesystem->delete($remote_source, true);		$destination_name = basename( str_replace($local_destination, '', $destination) );		if ( '.' == $destination_name )			$destination_name = '';		$this->result = compact('local_source', 'source', 'source_name', 'source_files', 'destination', 'destination_name', 'local_destination', 'remote_destination', 'clear_destination', 'delete_source_dir');		$res = apply_filters('upgrader_post_install', true, $hook_extra, $this->result);		if ( is_wp_error($res) ) {			$this->result = $res;			return $res;		}		//Bombard the calling function will all the info which we've just used.		return $this->result;	}	function run($options) {		$defaults = array( 	'package' => '', //Please always pass this.							'destination' => '', //And this							'clear_destination' => false,							'clear_working' => true,							'is_multi' => false,							'hook_extra' => array() //Pass any extra $hook_extra args here, this will be passed to any hooked filters.						);		$options = wp_parse_args($options, $defaults);		extract($options);		//Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, $destination) );		if ( ! $res ) //Mainly for non-connected filesystem.			return false;		if ( is_wp_error($res) ) {			$this->skin->error($res);			return $res;		}		if ( !$is_multi ) // call $this->header separately if running multiple times			$this->skin->header();		$this->skin->before();		//Download the package (Note, This just returns the filename of the file if the package is a local file)		$download = $this->download_package( $package );		if ( is_wp_error($download) ) {			$this->skin->error($download);			$this->skin->after();			return $download;		}		//Unzip's the file into a temporary directory		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) ) {			$this->skin->error($working_dir);			$this->skin->after();			return $working_dir;		}		//With the given options, this installs it to the destination directory.		$result = $this->install_package( array(											'source' => $working_dir,											'destination' => $destination,											'clear_destination' => $clear_destination,											'clear_working' => $clear_working,											'hook_extra' => $hook_extra										) );		$this->skin->set_result($result);		if ( is_wp_error($result) ) {			$this->skin->error($result);			$this->skin->feedback('process_failed');		} else {			//Install Suceeded			$this->skin->feedback('process_success');		}		$this->skin->after();		if ( !$is_multi )			$this->skin->footer();		return $result;	}	function maintenance_mode($enable = false) {		global $wp_filesystem;		$file = $wp_filesystem->abspath() . '.maintenance';		if ( $enable ) {			$this->skin->feedback('maintenance_start');			// Create maintenance file to signal that we are upgrading			$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';			$wp_filesystem->delete($file);			$wp_filesystem->put_contents($file, $maintenance_string, FS_CHMOD_FILE);		} else if ( !$enable && $wp_filesystem->exists($file) ) {			$this->skin->feedback('maintenance_end');			$wp_filesystem->delete($file);		}	}}/** * Plugin Upgrader class for WordPress Plugins, It is designed to upgrade/install plugins from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader extends WP_Upgrader {	var $result;	var $bulk = false;	var $show_before = '';	function upgrade_strings() {		$this->strings['up_to_date'] = __('The plugin is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['deactivate_plugin'] = __('Deactivating the plugin&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the plugin&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old plugin.');		$this->strings['process_failed'] = __('Plugin upgrade failed.');		$this->strings['process_success'] = __('Plugin upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the plugin&#8230;');		$this->strings['process_failed'] = __('Plugin install failed.');		$this->strings['process_success'] = __('Plugin installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$this->run(array(					'package' => $package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => false, //Do not overwrite files.					'clear_working' => true,					'hook_extra' => array()					));		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function upgrade($plugin) {		$this->init();		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		if ( !isset( $current->response[ $plugin ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		// Get the URL to the zip file		$r = $current->response[ $plugin ];		add_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		//'source_selection' => array(&$this, 'source_selection'), //theres a track ticket to move up the directory for zip's which are made a bit differently, useful for non-.org plugins.		$this->run(array(					'package' => $r->package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => true,					'clear_working' => true,					'hook_extra' => array(								'plugin' => $plugin					)				));		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'));		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function bulk_upgrade($plugins) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, WP_PLUGIN_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($plugins);		$this->update_current = 0;		foreach ( $plugins as $plugin ) {			$this->update_current++;			$this->skin->plugin_info = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin, false, true);			if ( !isset( $current->response[ $plugin ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$plugin] = false;				continue;			}			// Get the URL to the zip file			$r = $current->response[ $plugin ];			$this->skin->plugin_active = is_plugin_active($plugin);			$result = $this->run(array(						'package' => $r->package,						'destination' => WP_PLUGIN_DIR,						'clear_destination' => true,						'clear_working' => true,						'is_multi' => true,						'hook_extra' => array(									'plugin' => $plugin						)					));			$results[$plugin] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		// Force refresh of plugin update information		delete_site_transient('update_plugins');		return $results;	}	//return plugin info.	function plugin_info() {		if ( ! is_array($this->result) )			return false;		if ( empty($this->result['destination_name']) )			return false;		$plugin = get_plugins('/' . $this->result['destination_name']); //Ensure to pass with leading slash		if ( empty($plugin) )			return false;		$pluginfiles = array_keys($plugin); //Assume the requested plugin is the first in the list		return $this->result['destination_name'] . '/' . $pluginfiles[0];	}	//Hooked to pre_install	function deactivate_plugin_before_upgrade($return, $plugin) {		if ( is_wp_error($return) ) //Bypass.			return $return;		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		if ( is_plugin_active($plugin) ) {			$this->skin->feedback('deactivate_plugin');			//Deactivate the plugin silently, Prevent deactivation hooks from running.			deactivate_plugins($plugin, true);		}	}	//Hooked to upgrade_clear_destination	function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin) {		global $wp_filesystem;		if ( is_wp_error($removed) )			return $removed; //Pass errors through.		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$plugins_dir = $wp_filesystem->wp_plugins_dir();		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin) );		if ( ! $wp_filesystem->exists($this_plugin_dir) ) //If its already vanished.			return $removed;		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin);		if ( ! $deleted )			return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);		return $removed;	}}/** * Theme Upgrader class for WordPress Themes, It is designed to upgrade/install themes from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader extends WP_Upgrader {	var $result;	function upgrade_strings() {		$this->strings['up_to_date'] = __('The theme is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the theme&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old theme.');		$this->strings['process_failed'] = __('Theme upgrade failed.');		$this->strings['process_success'] = __('Theme upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the theme&#8230;');		$this->strings['process_failed'] = __('Theme install failed.');		$this->strings['process_success'] = __('Theme installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$options = array(						'package' => $package,						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => false, //Do not overwrite files.						'clear_working' => true						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		if ( empty($result['destination_name']) )			return false;		else			return $result['destination_name'];	}	function upgrade($theme) {		$this->init();		$this->upgrade_strings();		// Is an update available?		$current = get_site_transient( 'update_themes' );		if ( !isset( $current->response[ $theme ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		$r = $current->response[ $theme ];		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$options = array(						'package' => $r['package'],						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => true,						'clear_working' => true,						'hook_extra' => array(											'theme' => $theme											)						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		return true;	}	function bulk_upgrade($themes) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_themes' );		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($themes);		$this->update_current = 0;		foreach ( $themes as $theme ) {			$this->update_current++;			if ( !isset( $current->response[ $theme ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$theme] = false;				continue;			}			$this->skin->theme_info = $this->theme_info($theme);			// Get the URL to the zip file			$r = $current->response[ $theme ];			$options = array(							'package' => $r['package'],							'destination' => WP_CONTENT_DIR . '/themes',							'clear_destination' => true,							'clear_working' => true,							'hook_extra' => array(												'theme' => $theme												)							);			$result = $this->run($options);			$results[$theme] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		remove_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		// Force refresh of theme update information		delete_site_transient('update_themes');		return $results;	}	function current_before($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Change to maintainence mode now.		if ( ! $this->bulk )			$this->maintenance_mode(true);		return $return;	}	function current_after($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Ensure stylesheet name hasnt changed after the upgrade:		if ( $theme == get_stylesheet() && $theme != $this->result['destination_name'] ) {			$theme_info = $this->theme_info();			$stylesheet = $this->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			switch_theme($template, $stylesheet, true);		}		//Time to remove maintainence mode		if ( ! $this->bulk )			$this->maintenance_mode(false);		return $return;	}	function delete_old_theme($removed, $local_destination, $remote_destination, $theme) {		global $wp_filesystem;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( is_wp_error($removed) || empty($theme) )			return $removed; //Pass errors through.		$themes_dir = $wp_filesystem->wp_themes_dir();		if ( $wp_filesystem->exists( trailingslashit($themes_dir) . $theme ) )			if ( ! $wp_filesystem->delete( trailingslashit($themes_dir) . $theme, true ) )				return false;		return true;	}	function theme_info($theme = null) {		if ( empty($theme) ) {			if ( !empty($this->result['destination_name']) )				$theme = $this->result['destination_name'];			else				return false;		}		return get_theme_data(WP_CONTENT_DIR . '/themes/' . $theme . '/style.css');	}}/** * Core Upgrader class for WordPress. It allows for WordPress to upgrade itself in combiantion with the wp-admin/includes/update-core.php file * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Core_Upgrader extends WP_Upgrader {	function upgrade_strings() {		$this->strings['up_to_date'] = __('WordPress is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['copy_failed'] = __('Could not copy files.');	}	function upgrade($current) {		global $wp_filesystem;		$this->init();		$this->upgrade_strings();		if ( !empty($feedback) )			add_filter('update_feedback', $feedback);		// Is an update available?		if ( !isset( $current->response ) || $current->response == 'latest' )			return new WP_Error('up_to_date', $this->strings['up_to_date']);		$res = $this->fs_connect( array(ABSPATH, WP_CONTENT_DIR) );		if ( is_wp_error($res) )			return $res;		$wp_dir = trailingslashit($wp_filesystem->abspath());		$download = $this->download_package( $current->package );		if ( is_wp_error($download) )			return $download;		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) )			return $working_dir;		// Copy update-core.php from the new version into place.		if ( !$wp_filesystem->copy($working_dir . '/wordpress/wp-admin/includes/update-core.php', $wp_dir . 'wp-admin/includes/update-core.php', true) ) {			$wp_filesystem->delete($working_dir, true);			return new WP_Error('copy_failed', $this->strings['copy_failed']);		}		$wp_filesystem->chmod($wp_dir . 'wp-admin/includes/update-core.php', FS_CHMOD_FILE);		require(ABSPATH . 'wp-admin/includes/update-core.php');		return update_core($working_dir, $wp_dir);	}}/** * Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader_Skin {	var $upgrader;	var $done_header = false;	var $result = false;	function WP_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '', 'title' => '', 'context' => false );		$this->options = wp_parse_args($args, $defaults);	}	function set_upgrader(&$upgrader) {		if ( is_object($upgrader) )			$this->upgrader =& $upgrader;		$this->add_strings();	}	function add_strings() {	}	function set_result($result) {		$this->result = $result;	}	function request_filesystem_credentials($error = false) {		$url = $this->options['url'];		$context = $this->options['context'];		if ( !empty($this->options['nonce']) )			$url = wp_nonce_url($url, $this->options['nonce']);		return request_filesystem_credentials($url, '', $error, $context); //Possible to bring inline, Leaving as is for now.	}	function header() {		if ( $this->done_header )			return;		$this->done_header = true;		echo '<div class="wrap">';		echo screen_icon();		echo '<h2>' . $this->options['title'] . '</h2>';	}	function footer() {		echo '</div>';	}	function error($errors) {		if ( ! $this->done_header )			$this->header();		if ( is_string($errors) ) {			$this->feedback($errors);		} elseif ( is_wp_error($errors) && $errors->get_error_code() ) {			foreach ( $errors->get_error_messages() as $message ) {				if ( $errors->get_error_data() )					$this->feedback($message . ' ' . $errors->get_error_data() );				else					$this->feedback($message);			}		}	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		show_message($string);	}	function before() {}	function after() {}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader_Skin extends WP_Upgrader_Skin {	var $plugin = '';	var $plugin_active = false;	var $plugin_network_active = false;	function Plugin_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => __('Upgrade Plugin') );		$args = wp_parse_args($args, $defaults);		$this->plugin = $args['plugin'];		$this->plugin_active = is_plugin_active( $this->plugin );		$this->plugin_network_active = is_plugin_active_for_network( $this->plugin );		parent::__construct($args);	}	function after() {		$this->plugin = $this->upgrader->plugin_info();		if ( !empty($this->plugin) && !is_wp_error($this->result) && $this->plugin_active ){			show_message(__('Reactivating the plugin&#8230;'));			echo '<iframe style="border:0;overflow:hidden" width="100%" height="170px" src="' . wp_nonce_url('update.php?action=activate-plugin&networkwide=' . $this->plugin_network_active . '&plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) .'"></iframe>';		}		$update_actions =  array(			'activate_plugin' => '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>',			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>'		);		if ( $this->plugin_active )			unset( $update_actions['activate_plugin'] );		if ( ! $this->result || is_wp_error($this->result) )			unset( $update_actions['activate_plugin'] );		$update_actions = apply_filters('update_plugin_complete_actions', $update_actions, $this->plugin);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}	function before() {		if ( $this->upgrader->show_before ) {			echo $this->upgrader->show_before;			$this->upgrader->show_before = '';		}	}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @package WordPress * @subpackage Upgrader * @since 3.0.0 */class Bulk_Upgrader_Skin extends WP_Upgrader_Skin {	var $in_loop = false;	var $error = false;	function Bulk_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '' );		$args = wp_parse_args($args, $defaults);		parent::__construct($args);	}	function add_strings() {		$this->upgrader->strings['skin_upgrade_start'] = __('The update process is starting. This process may take awhile on some hosts, so please be patient.');		$this->upgrader->strings['skin_update_failed_error'] = __('An error occured while updating %1$s: <strong>%2$s</strong>.');		$this->upgrader->strings['skin_update_failed'] = __('The update of %1$s failed.');		$this->upgrader->strings['skin_update_successful'] = __('%1$s updated successfully.').' <a onclick="%2$s" href="#" class="hide-if-no-js"><span>'.__('Show Details').'</span><span class="hidden">'.__('Hide Details').'</span>.</a>';		$this->upgrader->strings['skin_upgrade_end'] = __('All updates have been completed.');	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		if ( $this->in_loop )			echo "$string<br />\n";		else			echo "<p>$string</p>\n";	}	function header() {		// Nothing, This will be displayed within a iframe.	}	function footer() {		// Nothing, This will be displayed within a iframe.	}	function error($error) {		if ( is_string($error) && isset( $this->upgrader->strings[$error] ) )			$this->error = $this->upgrader->strings[$error];		if ( is_wp_error($error) ) {			foreach ( $error->get_error_messages() as $emessage ) {				if ( $error->get_error_data() )					$messages[] = $emessage . ' ' . $error->get_error_data();				else					$messages[] = $emessage;			}			$this->error = implode(', ', $messages);		}		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';	}	function bulk_header() {		$this->feedback('skin_upgrade_start');	}	function bulk_footer() {		$this->feedback('skin_upgrade_end');	}	function before($title = '') {		$this->in_loop = true;		printf( '<h4>' . $this->upgrader->strings['skin_before_update_header'] . ' <img alt="" src="' . admin_url( 'images/wpspin_light.gif' ) . '" class="hidden waiting-' . $this->upgrader->update_current . '" style="vertical-align:middle;"></h4>',  $title, $this->upgrader->update_current, $this->upgrader->update_count);		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		echo '<div class="update-messages hide-if-js" id="progress-' . esc_attr($this->upgrader->update_current) . '"><p>';		$this->flush_output();	}	function after($title = '') {		echo '</p></div>';		if ( $this->error || ! $this->result ) {			if ( $this->error )				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed_error'], $title, $this->error) . '</p></div>';			else				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed'], $title) . '</p></div>';			echo '<script type="text/javascript">jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		}		if ( !empty($this->result) && !is_wp_error($this->result) ) {			echo '<div class="updated"><p>' . sprintf($this->upgrader->strings['skin_update_successful'], $title, 'jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').toggle();jQuery(\'span\', this).toggle(); return false;') . '</p></div>';			echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';		}		$this->reset();		$this->flush_output();	}	function reset() {		$this->in_loop = false;		$this->error = false;	}	function flush_output() {		wp_ob_end_flush_all();		flush();	}}class Bulk_Plugin_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $plugin_info = array(); // Plugin_Upgrader::bulk() will fill this in.	function Plugin_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Plugin %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->plugin_info['Title']);	}	function after() {		parent::after($this->plugin_info['Title']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_plugins_complete_actions', $update_actions, $this->plugin_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}class Bulk_Theme_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $theme_info = array(); // Theme_Upgrader::bulk() will fill this in.	function Theme_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Theme %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->theme_info['Name']);	}	function after() {		parent::after($this->theme_info['Name']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'themes_page' => '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Goto themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_theme_complete_actions', $update_actions, $this->theme_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Plugin Installer Skin for WordPress Plugin Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Plugin_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) )			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the plugin <strong>%s %s</strong>.'), $this->api->name, $this->api->version);	}	function after() {		$plugin_file = $this->upgrader->plugin_info();		$install_actions = array();		$from = isset($_GET['from']) ? stripslashes($_GET['from']) : 'plugins';		if ( 'import' == $from )			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;from=import&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin &amp; Run Importer') . '</a>';		else			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>';		if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )			$install_actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" target="_parent">' . __('Network Activate') . '</a>';		if ( 'import' == $from )			$install_actions['importers_page'] = '<a href="' . admin_url('import.php') . '" title="' . esc_attr__('Return to Importers') . '" target="_parent">' . __('Return to Importers') . '</a>';		else if ( $this->type == 'web' )			$install_actions['plugins_page'] = '<a href="' . admin_url('plugin-install.php') . '" title="' . esc_attr__('Return to Plugin Installer') . '" target="_parent">' . __('Return to Plugin Installer') . '</a>';		else			$install_actions['plugins_page'] = '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Return to Plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) ) {			unset( $install_actions['activate_plugin'] );			unset( $install_actions['network_activate'] );		}		$install_actions = apply_filters('install_plugin_complete_actions', $install_actions, $this->api, $plugin_file);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Installer Skin for the WordPress Theme Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Theme_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'theme' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) ) {			/* translators: 1: theme name, 2: version */			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the theme <strong>%1$s %2$s</strong>.'), $this->api->name, $this->api->version);		}	}	function after() {		if ( empty($this->upgrader->result['destination_name']) )			return;		$theme_info = $this->upgrader->theme_info();		if ( empty($theme_info) )			return;		$name = $theme_info['Name'];		$stylesheet = $this->upgrader->result['destination_name'];		$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;		$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );		$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);		$install_actions = array(			'preview' => '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>',			'activate' => '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>'							);		if ( $this->type == 'web' )			$install_actions['themes_page'] = '<a href="' . admin_url('theme-install.php') . '" title="' . esc_attr__('Return to Theme Installer') . '" target="_parent">' . __('Return to Theme Installer') . '</a>';		else			$install_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) )			unset( $install_actions['activate'], $install_actions['preview'] );		$install_actions = apply_filters('install_theme_complete_actions', $install_actions, $this->api, $stylesheet, $theme_info);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Upgrader Skin for WordPress Theme Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader_Skin extends WP_Upgrader_Skin {	var $theme = '';	function Theme_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'theme' => '', 'nonce' => '', 'title' => __('Upgrade Theme') );		$args = wp_parse_args($args, $defaults);		$this->theme = $args['theme'];		parent::__construct($args);	}	function after() {		$update_actions = array();		if ( !empty($this->upgrader->result['destination_name']) &&			($theme_info = $this->upgrader->theme_info()) &&			!empty($theme_info) ) {			$name = $theme_info['Name'];			$stylesheet = $this->upgrader->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );			$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);			$update_actions['preview'] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>';			$update_actions['activate'] = '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>';			if ( ( ! $this->result || is_wp_error($this->result) ) || $stylesheet == get_stylesheet() )				unset($update_actions['preview'], $update_actions['activate']);		}		$update_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Return to Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		$update_actions = apply_filters('update_theme_complete_actions', $update_actions, $this->theme);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Upgrade Skin helper for File uploads. This class handles the upload process and passes it as if its a local file to the Upgrade/Installer functions. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class File_Upload_Upgrader {	var $package;	var $filename;	function File_Upload_Upgrader($form, $urlholder) {		return $this->__construct($form, $urlholder);	}	function __construct($form, $urlholder) {		if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )			wp_die($uploads['error']);		if ( empty($_FILES[$form]['name']) && empty($_GET[$urlholder]) )			wp_die(__('Please select a file'));		if ( !empty($_FILES) )			$this->filename = $_FILES[$form]['name'];		else if ( isset($_GET[$urlholder]) )			$this->filename = $_GET[$urlholder];		//Handle a newly uploaded file, Else assume its already been uploaded		if ( !empty($_FILES) ) {			$this->filename = wp_unique_filename( $uploads['basedir'], $this->filename );			$this->package = $uploads['basedir'] . '/' . $this->filename;			// Move the file to the uploads dir			if ( false === @ move_uploaded_file( $_FILES[$form]['tmp_name'], $this->package) )				wp_die( sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path']));		} else {			$this->package = $uploads['basedir'] . '/' . $this->filename;		}	}}
<?php// -- Post related Meta Boxes/** * Display post submit form fields. * * @since 2.7.0 * * @param object $post */function post_submit_meta_box($post) {	global $action;	$post_type = $post->post_type;	$post_type_object = get_post_type_object($post_type);	$can_publish = current_user_can($post_type_object->cap->publish_posts);?><div class="submitbox" id="submitpost"><div id="minor-publishing"><?php // Hidden submit button early on so that the browser chooses the right button when form is submitted with Return key ?><div style="display:none;"><input type="submit" name="save" value="<?php esc_attr_e('Save'); ?>" /></div><div id="minor-publishing-actions"><div id="save-action"><?php if ( 'publish' != $post->post_status && 'future' != $post->post_status && 'pending' != $post->post_status )  { ?><input <?php if ( 'private' == $post->post_status ) { ?>style="display:none"<?php } ?> type="submit" name="save" id="save-post" value="<?php esc_attr_e('Save Draft'); ?>" tabindex="4" class="button button-highlighted" /><?php } elseif ( 'pending' == $post->post_status && $can_publish ) { ?><input type="submit" name="save" id="save-post" value="<?php esc_attr_e('Save as Pending'); ?>" tabindex="4" class="button button-highlighted" /><?php } ?></div><div id="preview-action"><?phpif ( 'publish' == $post->post_status ) {	$preview_link = esc_url(get_permalink($post->ID));	$preview_button = __('Preview Changes');} else {	$preview_link = esc_url(apply_filters('preview_post_link', add_query_arg('preview', 'true', get_permalink($post->ID))));	$preview_button = __('Preview');}?><a class="preview button" href="<?php echo $preview_link; ?>" target="wp-preview" id="post-preview" tabindex="4"><?php echo $preview_button; ?></a><input type="hidden" name="wp-preview" id="wp-preview" value="" /></div><div class="clear"></div></div><?php // /minor-publishing-actions ?><div id="misc-publishing-actions"><div class="misc-pub-section<?php if ( !$can_publish ) { echo ' misc-pub-section-last'; } ?>"><label for="post_status"><?php _e('Status:') ?></label><span id="post-status-display"><?phpswitch ( $post->post_status ) {	case 'private':		_e('Privately Published');		break;	case 'publish':		_e('Published');		break;	case 'future':		_e('Scheduled');		break;	case 'pending':		_e('Pending Review');		break;	case 'draft':	case 'auto-draft':		_e('Draft');		break;	case 'auto-draft':		_e('Unsaved');		break;}?></span><?php if ( 'publish' == $post->post_status || 'private' == $post->post_status || $can_publish ) { ?><a href="#post_status" <?php if ( 'private' == $post->post_status ) { ?>style="display:none;" <?php } ?>class="edit-post-status hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id="post-status-select" class="hide-if-js"><input type="hidden" name="hidden_post_status" id="hidden_post_status" value="<?php echo esc_attr( ('auto-draft' == $post->post_status ) ? 'draft' : $post->post_status); ?>" /><select name='post_status' id='post_status' tabindex='4'><?php if ( 'publish' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'publish' ); ?> value='publish'><?php _e('Published') ?></option><?php elseif ( 'private' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'private' ); ?> value='publish'><?php _e('Privately Published') ?></option><?php elseif ( 'future' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'future' ); ?> value='future'><?php _e('Scheduled') ?></option><?php endif; ?><option<?php selected( $post->post_status, 'pending' ); ?> value='pending'><?php _e('Pending Review') ?></option><?php if ( 'auto-draft' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'auto-draft' ); ?> value='draft'><?php _e('Draft') ?></option><?php else : ?><option<?php selected( $post->post_status, 'draft' ); ?> value='draft'><?php _e('Draft') ?></option><?php endif; ?></select> <a href="#post_status" class="save-post-status hide-if-no-js button"><?php _e('OK'); ?></a> <a href="#post_status" class="cancel-post-status hide-if-no-js"><?php _e('Cancel'); ?></a></div><?php } ?></div><?php // /misc-pub-section ?><div class="misc-pub-section " id="visibility"><?php _e('Visibility:'); ?> <span id="post-visibility-display"><?phpif ( 'private' == $post->post_status ) {	$post->post_password = '';	$visibility = 'private';	$visibility_trans = __('Private');} elseif ( !empty( $post->post_password ) ) {	$visibility = 'password';	$visibility_trans = __('Password protected');} elseif ( $post_type == 'post' && is_sticky( $post->ID ) ) {	$visibility = 'public';	$visibility_trans = __('Public, Sticky');} else {	$visibility = 'public';	$visibility_trans = __('Public');}echo esc_html( $visibility_trans ); ?></span><?php if ( $can_publish ) { ?><a href="#visibility" class="edit-visibility hide-if-no-js"><?php _e('Edit'); ?></a><div id="post-visibility-select" class="hide-if-js"><input type="hidden" name="hidden_post_password" id="hidden-post-password" value="<?php echo esc_attr($post->post_password); ?>" /><?php if ($post_type == 'post'): ?><input type="checkbox" style="display:none" name="hidden_post_sticky" id="hidden-post-sticky" value="sticky" <?php checked(is_sticky($post->ID)); ?> /><?php endif; ?><input type="hidden" name="hidden_post_visibility" id="hidden-post-visibility" value="<?php echo esc_attr( $visibility ); ?>" /><input type="radio" name="visibility" id="visibility-radio-public" value="public" <?php checked( $visibility, 'public' ); ?> /> <label for="visibility-radio-public" class="selectit"><?php _e('Public'); ?></label><br /><?php if ($post_type == 'post'): ?><span id="sticky-span"><input id="sticky" name="sticky" type="checkbox" value="sticky" <?php checked(is_sticky($post->ID)); ?> tabindex="4" /> <label for="sticky" class="selectit"><?php _e('Stick this post to the front page') ?></label><br /></span><?php endif; ?><input type="radio" name="visibility" id="visibility-radio-password" value="password" <?php checked( $visibility, 'password' ); ?> /> <label for="visibility-radio-password" class="selectit"><?php _e('Password protected'); ?></label><br /><span id="password-span"><label for="post_password"><?php _e('Password:'); ?></label> <input type="text" name="post_password" id="post_password" value="<?php echo esc_attr($post->post_password); ?>" /><br /></span><input type="radio" name="visibility" id="visibility-radio-private" value="private" <?php checked( $visibility, 'private' ); ?> /> <label for="visibility-radio-private" class="selectit"><?php _e('Private'); ?></label><br /><p> <a href="#visibility" class="save-post-visibility hide-if-no-js button"><?php _e('OK'); ?></a> <a href="#visibility" class="cancel-post-visibility hide-if-no-js"><?php _e('Cancel'); ?></a></p></div><?php } ?></div><?php // /misc-pub-section ?><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );if ( 0 != $post->ID ) {	if ( 'future' == $post->post_status ) { // scheduled for publishing at a future date		$stamp = __('Scheduled for: <b>%1$s</b>');	} else if ( 'publish' == $post->post_status || 'private' == $post->post_status ) { // already published		$stamp = __('Published on: <b>%1$s</b>');	} else if ( '0000-00-00 00:00:00' == $post->post_date_gmt ) { // draft, 1 or more saves, no date specified		$stamp = __('Publish <b>immediately</b>');	} else if ( time() < strtotime( $post->post_date_gmt . ' +0000' ) ) { // draft, 1 or more saves, future date specified		$stamp = __('Schedule for: <b>%1$s</b>');	} else { // draft, 1 or more saves, date specified		$stamp = __('Publish on: <b>%1$s</b>');	}	$date = date_i18n( $datef, strtotime( $post->post_date ) );} else { // draft (no saves, and thus no date specified)	$stamp = __('Publish <b>immediately</b>');	$date = date_i18n( $datef, strtotime( current_time('mysql') ) );}if ( $can_publish ) : // Contributors don't get to choose the date of publish ?><div class="misc-pub-section curtime misc-pub-section-last">	<span id="timestamp">	<?php printf($stamp, $date); ?></span>	<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a>	<div id="timestampdiv" class="hide-if-js"><?php touch_time(($action == 'edit'),1,4); ?></div></div><?php // /misc-pub-section ?><?php endif; ?><?php do_action('post_submitbox_misc_actions'); ?></div><div class="clear"></div></div><div id="major-publishing-actions"><?php do_action('post_submitbox_start'); ?><div id="delete-action"><?phpif ( current_user_can( "delete_post", $post->ID ) ) {	if ( !EMPTY_TRASH_DAYS )		$delete_text = __('Delete Permanently');	else		$delete_text = __('Move to Trash');	?><a class="submitdelete deletion" href="<?php echo get_delete_post_link($post->ID); ?>"><?php echo $delete_text; ?></a><?php} ?></div><div id="publishing-action"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" id="ajax-loading" style="visibility:hidden;" alt="" /><?phpif ( !in_array( $post->post_status, array('publish', 'future', 'private') ) || 0 == $post->ID ) {	if ( $can_publish ) :		if ( !empty($post->post_date_gmt) && time() < strtotime( $post->post_date_gmt . ' +0000' ) ) : ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Schedule') ?>" />		<input name="publish" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Schedule') ?>" /><?php	else : ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Publish') ?>" />		<input name="publish" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Publish') ?>" /><?php	endif;	else : ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Submit for Review') ?>" />		<input name="publish" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Submit for Review') ?>" /><?php	endif;} else { ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Update') ?>" />		<input name="save" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Update') ?>" /><?php} ?></div><div class="clear"></div></div></div><?php}/** * Display post tags form fields. * * @since 2.6.0 * * @param object $post */function post_tags_meta_box($post, $box) {	$defaults = array('taxonomy' => 'post_tag');	if ( !isset($box['args']) || !is_array($box['args']) )		$args = array();	else		$args = $box['args'];	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	$tax_name = esc_attr($taxonomy);	$taxonomy = get_taxonomy($taxonomy);	$disabled = !current_user_can($taxonomy->cap->assign_terms) ? 'disabled="disabled"' : '';?><div class="tagsdiv" id="<?php echo $tax_name; ?>">	<div class="jaxtag">	<div class="nojs-tags hide-if-js">	<p><?php echo $taxonomy->labels->add_or_remove_items; ?></p>	<textarea name="<?php echo "tax_input[$tax_name]"; ?>" rows="3" cols="20" class="the-tags" id="tax-input-<?php echo $tax_name; ?>" <?php echo $disabled; ?>><?php echo esc_attr(get_terms_to_edit( $post->ID, $tax_name )); ?></textarea></div> 	<?php if ( current_user_can($taxonomy->cap->assign_terms) ) : ?>	<div class="ajaxtag hide-if-no-js">		<label class="screen-reader-text" for="new-tag-<?php echo $tax_name; ?>"><?php echo $box['title']; ?></label>		<div class="taghint"><?php echo $taxonomy->labels->add_new_item; ?></div>		<p><input type="text" id="new-tag-<?php echo $tax_name; ?>" name="newtag[<?php echo $tax_name; ?>]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />		<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" /></p>	</div>	<p class="howto"><?php echo esc_attr( $taxonomy->labels->separate_items_with_commas ); ?></p>	<?php endif; ?>	</div>	<div class="tagchecklist"></div></div><?php if ( current_user_can($taxonomy->cap->assign_terms) ) : ?><p class="hide-if-no-js"><a href="#titlediv" class="tagcloud-link" id="link-<?php echo $tax_name; ?>"><?php echo $taxonomy->labels->choose_from_most_used; ?></a></p><?php else : ?><p><em><?php _e('You cannot modify this taxonomy.'); ?></em></p><?php endif; ?><?php}/** * Display post categories form fields. * * @since 2.6.0 * * @param object $post */function post_categories_meta_box( $post, $box ) {	$defaults = array('taxonomy' => 'category');	if ( !isset($box['args']) || !is_array($box['args']) )		$args = array();	else		$args = $box['args'];	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	$tax = get_taxonomy($taxonomy);	?>	<div id="taxonomy-<?php echo $taxonomy; ?>" class="categorydiv">		<ul id="<?php echo $taxonomy; ?>-tabs" class="category-tabs">			<li class="tabs"><a href="#<?php echo $taxonomy; ?>-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>			<li class="hide-if-no-js"><a href="#<?php echo $taxonomy; ?>-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>		</ul>		<div id="<?php echo $taxonomy; ?>-pop" class="tabs-panel" style="display: none;">			<ul id="<?php echo $taxonomy; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php $popular_ids = wp_popular_terms_checklist($taxonomy); ?>			</ul>		</div>		<div id="<?php echo $taxonomy; ?>-all" class="tabs-panel">			<?php            $name = ( $taxonomy == 'category' ) ? 'post_category' : 'tax_input[' . $taxonomy . ']';            echo "<input type='hidden' name='{$name}[]' value='0' />"; // Allows for an empty term set to be sent. 0 is an invalid Term ID and will be ignored by empty() checks.            ?>			<ul id="<?php echo $taxonomy; ?>checklist" class="list:<?php echo $taxonomy?> categorychecklist form-no-clear">				<?php wp_terms_checklist($post->ID, array( 'taxonomy' => $taxonomy, 'popular_cats' => $popular_ids ) ) ?>			</ul>		</div>	<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>	<p><em><?php _e('You cannot modify this taxonomy.'); ?></em></p>	<?php endif; ?>	<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>			<div id="<?php echo $taxonomy; ?>-adder" class="wp-hidden-children">				<h4>					<a id="<?php echo $taxonomy; ?>-add-toggle" href="#<?php echo $taxonomy; ?>-add" class="hide-if-no-js" tabindex="3">						<?php							/* translators: %s: add new taxonomy label */							printf( __( '+ %s' ), $tax->labels->add_new_item );						?>					</a>				</h4>				<p id="<?php echo $taxonomy; ?>-add" class="category-add wp-hidden-child">					<label class="screen-reader-text" for="new<?php echo $taxonomy; ?>"><?php echo $tax->labels->add_new_item; ?></label>					<input type="text" name="new<?php echo $taxonomy; ?>" id="new<?php echo $taxonomy; ?>" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>					<label class="screen-reader-text" for="new<?php echo $taxonomy; ?>_parent">						<?php echo $tax->labels->parent_item_colon; ?>					</label>					<?php wp_dropdown_categories( array( 'taxonomy' => $taxonomy, 'hide_empty' => 0, 'name' => 'new'.$taxonomy.'_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>					<input type="button" id="<?php echo $taxonomy; ?>-add-submit" class="add:<?php echo $taxonomy ?>checklist:<?php echo $taxonomy ?>-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />					<?php wp_nonce_field( 'add-'.$taxonomy, '_ajax_nonce-add-'.$taxonomy, false ); ?>					<span id="<?php echo $taxonomy; ?>-ajax-response"></span>				</p>			</div>		<?php endif; ?>	</div>	<?php}/** * Display post excerpt form fields. * * @since 2.6.0 * * @param object $post */function post_excerpt_meta_box($post) {?><label class="screen-reader-text" for="excerpt"><?php _e('Excerpt') ?></label><textarea rows="1" cols="40" name="excerpt" tabindex="6" id="excerpt"><?php echo $post->post_excerpt ?></textarea><p><?php _e('Excerpts are optional hand-crafted summaries of your content that can be used in your theme. <a href="http://codex.wordpress.org/Excerpt" target="_blank">Learn more about manual excerpts.</a>'); ?></p><?php}/** * Display trackback links form fields. * * @since 2.6.0 * * @param object $post */function post_trackback_meta_box($post) {	$form_trackback = '<input type="text" name="trackback_url" id="trackback_url" class="code" tabindex="7" value="'. esc_attr( str_replace("\n", ' ', $post->to_ping) ) .'" />';	if ('' != $post->pinged) {		$pings = '<p>'. __('Already pinged:') . '</p><ul>';		$already_pinged = explode("\n", trim($post->pinged));		foreach ($already_pinged as $pinged_url) {			$pings .= "\n\t<li>" . esc_html($pinged_url) . "</li>";		}		$pings .= '</ul>';	}?><p><label for="trackback_url"><?php _e('Send trackbacks to:'); ?></label> <?php echo $form_trackback; ?><br /> (<?php _e('Separate multiple URLs with spaces'); ?>)</p><p><?php _e('Trackbacks are a way to notify legacy blog systems that you&#8217;ve linked to them. If you link other WordPress sites they&#8217;ll be notified automatically using <a href="http://codex.wordpress.org/Introduction_to_Blogging#Managing_Comments" target="_blank">pingbacks</a>, no other action necessary.'); ?></p><?phpif ( ! empty($pings) )	echo $pings;}/** * Display custom fields form fields. * * @since 2.6.0 * * @param object $post */function post_custom_meta_box($post) {?><div id="postcustomstuff"><div id="ajax-response"></div><?php$metadata = has_meta($post->ID);list_meta($metadata);meta_form(); ?></div><p><?php _e('Custom fields can be used to add extra metadata to a post that you can <a href="http://codex.wordpress.org/Using_Custom_Fields" target="_blank">use in your theme</a>.'); ?></p><?php}/** * Display comments status form fields. * * @since 2.6.0 * * @param object $post */function post_comment_status_meta_box($post) {?><input name="advanced_view" type="hidden" value="1" /><p class="meta-options">	<label for="comment_status" class="selectit"><input name="comment_status" type="checkbox" id="comment_status" value="open" <?php checked($post->comment_status, 'open'); ?> /> <?php _e( 'Allow comments.' ) ?></label><br />	<label for="ping_status" class="selectit"><input name="ping_status" type="checkbox" id="ping_status" value="open" <?php checked($post->ping_status, 'open'); ?> /> <?php printf( __( 'Allow <a href="%s" target="_blank">trackbacks and pingbacks</a> on this page.' ), __( 'http://codex.wordpress.org/Introduction_to_Blogging#Managing_Comments' ) ); ?></label></p><?php}/** * Display comments for post table header * * @since 3.0.0 * * @param $result table header rows * @return */function post_comment_meta_box_thead($result) {	unset($result['cb'], $result['response']);	return $result;}/** * Display comments for post. * * @since 2.8.0 * * @param object $post */function post_comment_meta_box($post) {	global $wpdb, $post_ID;	$total = $wpdb->get_var($wpdb->prepare("SELECT count(1) FROM $wpdb->comments WHERE comment_post_ID = '%d' AND ( comment_approved = '0' OR comment_approved = '1')", $post_ID));	if ( 1 > $total ) {		echo '<p>' . __('No comments yet.') . '</p>';		return;	}	wp_nonce_field( 'get-comments', 'add_comment_nonce', false );	add_filter('manage_edit-comments_columns', 'post_comment_meta_box_thead', 8, 1);?><table class="widefat comments-box fixed" cellspacing="0" style="display:none;"><thead><tr>	<?php print_column_headers('edit-comments'); ?></tr></thead><tbody id="the-comment-list" class="list:comment"></tbody></table><p class="hide-if-no-js"><a href="#commentstatusdiv" id="show-comments" onclick="commentsBox.get(<?php echo $total; ?>);return false;"><?php _e('Show comments'); ?></a> <img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /></p><?php	$hidden = get_hidden_meta_boxes('post');	if ( ! in_array('commentsdiv', $hidden) ) { ?>		<script type="text/javascript">jQuery(document).ready(function(){commentsBox.get(<?php echo $total; ?>, 10);});</script><?php	}	remove_filter('manage_edit-comments_columns', 'post_comment_meta_box_thead');	wp_comment_trashnotice();}/** * Display slug form fields. * * @since 2.6.0 * * @param object $post */function post_slug_meta_box($post) {?><label class="screen-reader-text" for="post_name"><?php _e('Slug') ?></label><input name="post_name" type="text" size="13" id="post_name" value="<?php echo esc_attr( $post->post_name ); ?>" /><?php}/** * Display form field with list of authors. * * @since 2.6.0 * * @param object $post */function post_author_meta_box($post) {	global $current_user, $user_ID;	$authors = get_editable_user_ids( $current_user->id, true, $post->post_type ); // TODO: ROLE SYSTEM	if ( $post->post_author && !in_array($post->post_author, $authors) )		$authors[] = $post->post_author;?><label class="screen-reader-text" for="post_author_override"><?php _e('Author'); ?></label><?php wp_dropdown_users( array('include' => $authors, 'name' => 'post_author_override', 'selected' => empty($post->ID) ? $user_ID : $post->post_author) ); ?><?php}/** * Display list of revisions. * * @since 2.6.0 * * @param object $post */function post_revisions_meta_box($post) {	wp_list_post_revisions();}// -- Page related Meta Boxes/** * Display page attributes form fields. * * @since 2.7.0 * * @param object $post */function page_attributes_meta_box($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( $post_type_object->hierarchical ) {		$pages = wp_dropdown_pages(array('post_type' => $post->post_type, 'exclude_tree' => $post->ID, 'selected' => $post->post_parent, 'name' => 'parent_id', 'show_option_none' => __('(no parent)'), 'sort_column'=> 'menu_order, post_title', 'echo' => 0));		if ( ! empty($pages) ) {?><p><strong><?php _e('Parent') ?></strong></p><label class="screen-reader-text" for="parent_id"><?php _e('Parent') ?></label><?php echo $pages; ?><?php		} // end empty pages check	} // end hierarchical check.	if ( 'page' == $post->post_type && 0 != count( get_page_templates() ) ) {		$template = !empty($post->page_template) ? $post->page_template : false;		?><p><strong><?php _e('Template') ?></strong></p><label class="screen-reader-text" for="page_template"><?php _e('Page Template') ?></label><select name="page_template" id="page_template"><option value='default'><?php _e('Default Template'); ?></option><?php page_template_dropdown($template); ?></select><?php	} ?><p><strong><?php _e('Order') ?></strong></p><p><label class="screen-reader-text" for="menu_order"><?php _e('Order') ?></label><input name="menu_order" type="text" size="4" id="menu_order" value="<?php echo esc_attr($post->menu_order) ?>" /></p><p><?php if ( 'page' == $post->post_type ) _e( 'Need help? Use the Help tab in the upper right of your screen.' ); ?></p><?php}// -- Link related Meta Boxes/** * Display link create form fields. * * @since 2.7.0 * * @param object $link */function link_submit_meta_box($link) {?><div class="submitbox" id="submitlink"><div id="minor-publishing"><?php // Hidden submit button early on so that the browser chooses the right button when form is submitted with Return key ?><div style="display:none;"><input type="submit" name="save" value="<?php esc_attr_e('Save'); ?>" /></div><div id="minor-publishing-actions"><div id="preview-action"><?php if ( !empty($link->link_id) ) { ?>	<a class="preview button" href="<?php echo $link->link_url; ?>" target="_blank" tabindex="4"><?php _e('Visit Link'); ?></a><?php } ?></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section misc-pub-section-last">	<label for="link_private" class="selectit"><input id="link_private" name="link_visible" type="checkbox" value="N" <?php checked($link->link_visible, 'N'); ?> /> <?php _e('Keep this link private') ?></label></div></div></div><div id="major-publishing-actions"><?php do_action('post_submitbox_start'); ?><div id="delete-action"><?phpif ( !empty($_GET['action']) && 'edit' == $_GET['action'] && current_user_can('manage_links') ) { ?>	<a class="submitdelete deletion" href="<?php echo wp_nonce_url("link.php?action=delete&amp;link_id=$link->link_id", 'delete-bookmark_' . $link->link_id); ?>" onclick="if ( confirm('<?php echo esc_js(sprintf(__("You are about to delete this link '%s'\n  'Cancel' to stop, 'OK' to delete."), $link->link_name )); ?>') ) {return true;}return false;"><?php _e('Delete'); ?></a><?php } ?></div><div id="publishing-action"><?php if ( !empty($link->link_id) ) { ?>	<input name="save" type="submit" class="button-primary" id="publish" tabindex="4" accesskey="p" value="<?php esc_attr_e('Update Link') ?>" /><?php } else { ?>	<input name="save" type="submit" class="button-primary" id="publish" tabindex="4" accesskey="p" value="<?php esc_attr_e('Add Link') ?>" /><?php } ?></div><div class="clear"></div></div><?php do_action('submitlink_box'); ?><div class="clear"></div></div><?php}/** * Display link categories form fields. * * @since 2.6.0 * * @param object $link */function link_categories_meta_box($link) { ?><ul id="category-tabs" class="category-tabs">	<li class="tabs"><a href="#categories-all"><?php _e( 'All Categories' ); ?></a></li>	<li class="hide-if-no-js"><a href="#categories-pop"><?php _e( 'Most Used' ); ?></a></li></ul><div id="categories-all" class="tabs-panel">	<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">		<?php		if ( isset($link->link_id) )			wp_link_category_checklist($link->link_id);		else			wp_link_category_checklist();		?>	</ul></div><div id="categories-pop" class="tabs-panel" style="display: none;">	<ul id="categorychecklist-pop" class="categorychecklist form-no-clear">		<?php wp_popular_terms_checklist('link_category'); ?>	</ul></div><div id="category-adder" class="wp-hidden-children">	<h4><a id="category-add-toggle" href="#category-add"><?php _e( '+ Add New Category' ); ?></a></h4>	<p id="link-category-add" class="wp-hidden-child">		<label class="screen-reader-text" for="newcat"><?php _e( '+ Add New Category' ); ?></label>		<input type="text" name="newcat" id="newcat" class="form-required form-input-tip" value="<?php esc_attr_e( 'New category name' ); ?>" aria-required="true" />		<input type="button" id="category-add-submit" class="add:categorychecklist:linkcategorydiv button" value="<?php esc_attr_e( 'Add' ); ?>" />		<?php wp_nonce_field( 'add-link-category', '_ajax_nonce', false ); ?>		<span id="category-ajax-response"></span>	</p></div><?php}/** * Display form fields for changing link target. * * @since 2.6.0 * * @param object $link */function link_target_meta_box($link) { ?><fieldset><legend class="screen-reader-text"><span><?php _e('Target') ?></span></legend><p><label for="link_target_blank" class="selectit"><input id="link_target_blank" type="radio" name="link_target" value="_blank" <?php echo ( isset( $link->link_target ) && ($link->link_target == '_blank') ? 'checked="checked"' : ''); ?> /><?php _e('<code>_blank</code> &mdash; new window or tab.'); ?></label></p><p><label for="link_target_top" class="selectit"><input id="link_target_top" type="radio" name="link_target" value="_top" <?php echo ( isset( $link->link_target ) && ($link->link_target == '_top') ? 'checked="checked"' : ''); ?> /><?php _e('<code>_top</code> &mdash; current window or tab, with no frames.'); ?></label></p><p><label for="link_target_none" class="selectit"><input id="link_target_none" type="radio" name="link_target" value="" <?php echo ( isset( $link->link_target ) && ($link->link_target == '') ? 'checked="checked"' : ''); ?> /><?php _e('<code>_none</code> &mdash; same window or tab.'); ?></label></p></fieldset><p><?php _e('Choose the target frame for your link.'); ?></p><?php}/** * Display checked checkboxes attribute for xfn microformat options. * * @since 1.0.1 * * @param string $class * @param string $value * @param mixed $deprecated Never used. */function xfn_check( $class, $value = '', $deprecated = '' ) {	global $link;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.0' ); // Never implemented	$link_rel = isset( $link->link_rel ) ? $link->link_rel : ''; // In PHP 5.3: $link_rel = $link->link_rel ?: '';	$rels = preg_split('/\s+/', $link_rel);	if ('' != $value && in_array($value, $rels) ) {		echo ' checked="checked"';	}	if ('' == $value) {		if ('family' == $class && strpos($link_rel, 'child') === false && strpos($link_rel, 'parent') === false && strpos($link_rel, 'sibling') === false && strpos($link_rel, 'spouse') === false && strpos($link_rel, 'kin') === false) echo ' checked="checked"';		if ('friendship' == $class && strpos($link_rel, 'friend') === false && strpos($link_rel, 'acquaintance') === false && strpos($link_rel, 'contact') === false) echo ' checked="checked"';		if ('geographical' == $class && strpos($link_rel, 'co-resident') === false && strpos($link_rel, 'neighbor') === false) echo ' checked="checked"';		if ('identity' == $class && in_array('me', $rels) ) echo ' checked="checked"';	}}/** * Display xfn form fields. * * @since 2.6.0 * * @param object $link */function link_xfn_meta_box($link) {?><table class="editform" style="width: 100%;" cellspacing="2" cellpadding="5">	<tr>		<th style="width: 20%;" scope="row"><label for="link_rel"><?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('rel:') ?></label></th>		<td style="width: 80%;"><input type="text" name="link_rel" id="link_rel" size="50" value="<?php echo ( isset( $link->link_rel ) ? esc_attr($link->link_rel) : ''); ?>" /></td>	</tr>	<tr>		<td colspan="2">			<table cellpadding="3" cellspacing="5" class="form-table">				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('identity') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('identity') ?> </span></legend>						<label for="me">						<input type="checkbox" name="identity" value="me" id="me" <?php xfn_check('identity', 'me'); ?> />						<?php _e('another web address of mine') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('friendship') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('friendship') ?> </span></legend>						<label for="contact">						<input class="valinp" type="radio" name="friendship" value="contact" id="contact" <?php xfn_check('friendship', 'contact'); ?> /> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('contact') ?></label>						<label for="acquaintance">						<input class="valinp" type="radio" name="friendship" value="acquaintance" id="acquaintance" <?php xfn_check('friendship', 'acquaintance'); ?> />  <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('acquaintance') ?></label>						<label for="friend">						<input class="valinp" type="radio" name="friendship" value="friend" id="friend" <?php xfn_check('friendship', 'friend'); ?> /> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('friend') ?></label>						<label for="friendship">						<input name="friendship" type="radio" class="valinp" value="" id="friendship" <?php xfn_check('friendship'); ?> /> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('none') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('physical') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('physical') ?> </span></legend>						<label for="met">						<input class="valinp" type="checkbox" name="physical" value="met" id="met" <?php xfn_check('physical', 'met'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('met') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('professional') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('professional') ?> </span></legend>						<label for="co-worker">						<input class="valinp" type="checkbox" name="professional" value="co-worker" id="co-worker" <?php xfn_check('professional', 'co-worker'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('co-worker') ?></label>						<label for="colleague">						<input class="valinp" type="checkbox" name="professional" value="colleague" id="colleague" <?php xfn_check('professional', 'colleague'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('colleague') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('geographical') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('geographical') ?> </span></legend>						<label for="co-resident">						<input class="valinp" type="radio" name="geographical" value="co-resident" id="co-resident" <?php xfn_check('geographical', 'co-resident'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('co-resident') ?></label>						<label for="neighbor">						<input class="valinp" type="radio" name="geographical" value="neighbor" id="neighbor" <?php xfn_check('geographical', 'neighbor'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('neighbor') ?></label>						<label for="geographical">						<input class="valinp" type="radio" name="geographical" value="" id="geographical" <?php xfn_check('geographical'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('none') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('family') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('family') ?> </span></legend>						<label for="child">						<input class="valinp" type="radio" name="family" value="child" id="child" <?php xfn_check('family', 'child'); ?>  />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('child') ?></label>						<label for="kin">						<input class="valinp" type="radio" name="family" value="kin" id="kin" <?php xfn_check('family', 'kin'); ?>  />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('kin') ?></label>						<label for="parent">						<input class="valinp" type="radio" name="family" value="parent" id="parent" <?php xfn_check('family', 'parent'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('parent') ?></label>						<label for="sibling">						<input class="valinp" type="radio" name="family" value="sibling" id="sibling" <?php xfn_check('family', 'sibling'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('sibling') ?></label>						<label for="spouse">						<input class="valinp" type="radio" name="family" value="spouse" id="spouse" <?php xfn_check('family', 'spouse'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('spouse') ?></label>						<label for="family">						<input class="valinp" type="radio" name="family" value="" id="family" <?php xfn_check('family'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('none') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('romantic') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('romantic') ?> </span></legend>						<label for="muse">						<input class="valinp" type="checkbox" name="romantic" value="muse" id="muse" <?php xfn_check('romantic', 'muse'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('muse') ?></label>						<label for="crush">						<input class="valinp" type="checkbox" name="romantic" value="crush" id="crush" <?php xfn_check('romantic', 'crush'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('crush') ?></label>						<label for="date">						<input class="valinp" type="checkbox" name="romantic" value="date" id="date" <?php xfn_check('romantic', 'date'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('date') ?></label>						<label for="romantic">						<input class="valinp" type="checkbox" name="romantic" value="sweetheart" id="romantic" <?php xfn_check('romantic', 'sweetheart'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('sweetheart') ?></label>					</fieldset></td>				</tr>			</table>		</td>	</tr></table><p><?php _e('If the link is to a person, you can specify your relationship with them using the above form. If you would like to learn more about the idea check out <a href="http://gmpg.org/xfn/">XFN</a>.'); ?></p><?php}/** * Display advanced link options form fields. * * @since 2.6.0 * * @param object $link */function link_advanced_meta_box($link) {?><table class="form-table" style="width: 100%;" cellspacing="2" cellpadding="5">	<tr class="form-field">		<th valign="top"  scope="row"><label for="link_image"><?php _e('Image Address') ?></label></th>		<td><input type="text" name="link_image" class="code" id="link_image" size="50" value="<?php echo ( isset( $link->link_image ) ? esc_attr($link->link_image) : ''); ?>" style="width: 95%" /></td>	</tr>	<tr class="form-field">		<th valign="top"  scope="row"><label for="rss_uri"><?php _e('RSS Address') ?></label></th>		<td><input name="link_rss" class="code" type="text" id="rss_uri" value="<?php echo  ( isset( $link->link_rss ) ? esc_attr($link->link_rss) : ''); ?>" size="50" style="width: 95%" /></td>	</tr>	<tr class="form-field">		<th valign="top"  scope="row"><label for="link_notes"><?php _e('Notes') ?></label></th>		<td><textarea name="link_notes" id="link_notes" cols="50" rows="10" style="width: 95%"><?php echo  ( isset( $link->link_notes ) ? $link->link_notes : ''); ?></textarea></td>	</tr>	<tr class="form-field">		<th valign="top"  scope="row"><label for="link_rating"><?php _e('Rating') ?></label></th>		<td><select name="link_rating" id="link_rating" size="1">		<?php			for ($r = 0; $r <= 10; $r++) {				echo('            <option value="'. esc_attr($r) .'" ');				if ( isset($link->link_rating) && $link->link_rating == $r)					echo 'selected="selected"';				echo('>'.$r.'</option>');			}		?></select>&nbsp;<?php _e('(Leave at 0 for no rating.)') ?>		</td>	</tr></table><?php}/** * Display post thumbnail meta box. * * @since 2.9.0 */function post_thumbnail_meta_box() {	global $post;	$thumbnail_id = get_post_meta( $post->ID, '_thumbnail_id', true );	echo _wp_post_thumbnail_html( $thumbnail_id );}
<?php/** * Multi-site WordPress API * * @package WordPress * @subpackage Multisite * @since 3.0.0 */function get_sitestats() {	global $wpdb;	$stats['blogs'] = get_blog_count();	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( "SELECT COUNT(ID) FROM $wpdb->users" );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	} else {		$count = get_site_option( 'user_count' );	}	$stats['users'] = $count;	return $stats;}function get_admin_users_for_domain( $sitedomain = '', $path = '' ) {	global $wpdb;	if ( ! $sitedomain )		$site_id = $wpdb->siteid;	else		$site_id = $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE domain = %s AND path = %s", $sitedomain, $path ) );	if ( $site_id )		return $wpdb->get_results( $wpdb->prepare( "SELECT u.ID, u.user_login, u.user_pass FROM $wpdb->users AS u, $wpdb->sitemeta AS sm WHERE sm.meta_key = 'admin_user_id' AND u.ID = sm.meta_value AND sm.site_id = %d", $site_id ), ARRAY_A );	return false;}function get_blogs_of_user( $id, $all = false ) {	global $wpdb;	$cache_suffix = $all ? '_all' : '_short';	$return = wp_cache_get( 'blogs_of_user_' . $id . $cache_suffix, 'users' );	if ( $return )		return apply_filters( 'get_blogs_of_user', $return, $id, $all );	$user = get_userdata( (int) $id );	if ( !$user )		return false;	$blogs = $match = array();	$prefix_length = strlen($wpdb->base_prefix);	foreach ( (array) $user as $key => $value ) {		if ( $prefix_length && substr($key, 0, $prefix_length) != $wpdb->base_prefix )			continue;		if ( substr($key, -12, 12) != 'capabilities' )			continue;		if ( preg_match( '/^' . $wpdb->base_prefix . '((\d+)_)?capabilities$/', $key, $match ) ) {			if ( count( $match ) > 2 )				$blog_id = $match[ 2 ];			else				$blog_id = 1;			$blog = get_blog_details( $blog_id );			if ( $blog && isset( $blog->domain ) && ( $all == true || $all == false && ( $blog->archived == 0 && $blog->spam == 0 && $blog->deleted == 0 ) ) ) {				$blogs[ $blog_id ]->userblog_id	= $blog_id;				$blogs[ $blog_id ]->blogname		= $blog->blogname;				$blogs[ $blog_id ]->domain		= $blog->domain;				$blogs[ $blog_id ]->path			= $blog->path;				$blogs[ $blog_id ]->site_id		= $blog->site_id;				$blogs[ $blog_id ]->siteurl		= $blog->siteurl;			}		}	}	wp_cache_add( 'blogs_of_user_' . $id . $cache_suffix, $blogs, 'users', 5 );	return apply_filters( 'get_blogs_of_user', $blogs, $id, $all );}function get_active_blog_for_user( $user_id ) { // get an active blog for user - either primary blog or from blogs list	global $wpdb;	$blogs = get_blogs_of_user( $user_id );	if ( empty( $blogs ) ) {		$details = get_dashboard_blog();		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );		update_user_meta( $user_id, 'primary_blog', $details->blog_id );		wp_cache_delete( $user_id, 'users' );		return $details;	}	$primary_blog = get_user_meta( $user_id, 'primary_blog', true );	$details = get_dashboard_blog();	if ( $primary_blog ) {		$blogs = get_blogs_of_user( $user_id );		if ( isset( $blogs[ $primary_blog ] ) == false ) {			add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );			update_user_meta( $user_id, 'primary_blog', $details->blog_id );			wp_cache_delete( $user_id, 'users' );		} else {			$details = get_blog_details( $primary_blog );		}	} else {		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog		update_user_meta( $user_id, 'primary_blog', $details->blog_id );	}	if ( ( is_object( $details ) == false ) || ( is_object( $details ) && $details->archived == 1 || $details->spam == 1 || $details->deleted == 1 ) ) {		$blogs = get_blogs_of_user( $user_id, true ); // if a user's primary blog is shut down, check their other blogs.		$ret = false;		if ( is_array( $blogs ) && count( $blogs ) > 0 ) {			foreach ( (array) $blogs as $blog_id => $blog ) {				if ( $blog->site_id != $wpdb->siteid )					continue;				$details = get_blog_details( $blog_id );				if ( is_object( $details ) && $details->archived == 0 && $details->spam == 0 && $details->deleted == 0 ) {					$ret = $blog;					$changed = false;					if ( get_user_meta( $user_id , 'primary_blog', true ) != $blog_id ) {						update_user_meta( $user_id, 'primary_blog', $blog_id );						$changed = true;					}					if ( !get_user_meta($user_id , 'source_domain', true) ) {						update_user_meta( $user_id, 'source_domain', $blog->domain );						$changed = true;					}					if ( $changed )						wp_cache_delete( $user_id, 'users' );					break;				}			}		} else {			// Should never get here			$dashboard_blog = get_dashboard_blog();			add_user_to_blog( $dashboard_blog->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog			update_user_meta( $user_id, 'primary_blog', $dashboard_blog->blog_id );			return $dashboard_blog;		}		return $ret;	} else {		return $details;	}}function is_user_member_of_blog( $user_id, $blog_id = 0 ) {	$user_id = (int) $user_id;	$blog_id = (int) $blog_id;	if ( $blog_id == 0 ) {		global $wpdb;		$blog_id = $wpdb->blogid;	}	$blogs = get_blogs_of_user( $user_id );	if ( is_array( $blogs ) )		return array_key_exists( $blog_id, $blogs );	else		return false;}function get_user_count() {	global $wpdb;	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(ID) as c FROM $wpdb->users WHERE spam = '0' AND deleted = '0'") );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	}	$count = get_site_option( 'user_count' );	return $count;}function get_blog_count( $id = 0 ) {	global $wpdb;	if ( $id == 0 )		$id = $wpdb->siteid;	$count_ts = get_site_option( 'blog_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(blog_id) as c FROM $wpdb->blogs WHERE site_id = %d AND spam = '0' AND deleted = '0' and archived = '0'", $id) );		update_site_option( 'blog_count', $count );		update_site_option( 'blog_count_ts', time() );	}	$count = get_site_option( 'blog_count' );	return $count;}function get_blog_post( $blog_id, $post_id ) {	global $wpdb;	$key = $blog_id . '-' . $post_id;	$post = wp_cache_get( $key, 'global-posts' );	if ( $post == false ) {		$post = $wpdb->get_row( $wpdb->prepare( 'SELECT * FROM ' . $wpdb->get_blog_prefix( $blog_id ) . 'posts WHERE ID = %d', $post_id ) );		wp_cache_add( $key, $post, 'global-posts' );	}	return $post;}function add_user_to_blog( $blog_id, $user_id, $role ) {	switch_to_blog($blog_id);	$user = new WP_User($user_id);	if ( empty($user) || !$user->ID )		return new WP_Error('user_does_not_exist', __('That user does not exist.'));	if ( !get_user_meta($user_id, 'primary_blog', true) ) {		update_user_meta($user_id, 'primary_blog', $blog_id);		$details = get_blog_details($blog_id);		update_user_meta($user_id, 'source_domain', $details->domain);	}	$user->set_role($role);	do_action('add_user_to_blog', $user_id, $role, $blog_id);	wp_cache_delete( $user_id, 'users' );	restore_current_blog();	return true;}function remove_user_from_blog($user_id, $blog_id = '', $reassign = '') {	global $wpdb;	switch_to_blog($blog_id);	$user_id = (int) $user_id;	do_action('remove_user_from_blog', $user_id, $blog_id);	// If being removed from the primary blog, set a new primary if the user is assigned	// to multiple blogs.	$primary_blog = get_user_meta($user_id, 'primary_blog', true);	if ( $primary_blog == $blog_id ) {		$new_id = '';		$new_domain = '';		$blogs = get_blogs_of_user($user_id);		foreach ( (array) $blogs as $blog ) {			if ( $blog->userblog_id == $blog_id )				continue;			$new_id = $blog->userblog_id;			$new_domain = $blog->domain;			break;		}		update_user_meta($user_id, 'primary_blog', $new_id);		update_user_meta($user_id, 'source_domain', $new_domain);	}	// wp_revoke_user($user_id);	$user = new WP_User($user_id);	$user->remove_all_caps();	$blogs = get_blogs_of_user($user_id);	if ( count($blogs) == 0 ) {		update_user_meta($user_id, 'primary_blog', '');		update_user_meta($user_id, 'source_domain', '');	}	if ( $reassign != '' ) {		$reassign = (int) $reassign;		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_author = %d WHERE post_author = %d", $reassign, $user_id) );		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->links SET link_owner = %d WHERE link_owner = %d", $reassign, $user_id) );	}	restore_current_blog();}function create_empty_blog( $domain, $path, $weblog_title, $site_id = 1 ) {	$domain			= addslashes( $domain );	$weblog_title	= addslashes( $weblog_title );	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return __( 'Error: Site URL already taken.' );	// Need to backup wpdb table names, and create a new wp_blogs entry for new blog.	// Need to get blog_id from wp_blogs, and create new table names.	// Must restore table names at the end of function.	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return __( 'Error: problem creating site entry.' );	switch_to_blog($blog_id);	install_blog($blog_id);	restore_current_blog();	return $blog_id;}function get_blog_permalink( $_blog_id, $post_id ) {	$key = "{$_blog_id}-{$post_id}-blog_permalink";	$link = wp_cache_get( $key, 'site-options' );	if ( $link == false ) {		switch_to_blog( $_blog_id );		$link = get_permalink( $post_id );		restore_current_blog();		wp_cache_add( $key, $link, 'site-options', 360 );	}	return $link;}function get_blog_id_from_url( $domain, $path = '/' ) {	global $wpdb;	$domain = strtolower( $wpdb->escape( $domain ) );	$path = strtolower( $wpdb->escape( $path ) );	$id = wp_cache_get( md5( $domain . $path ), 'blog-id-cache' );	if ( $id == -1 ) { // blog does not exist		return 0;	} elseif ( $id ) {		return (int)$id;	}	$id = $wpdb->get_var( "SELECT blog_id FROM $wpdb->blogs WHERE domain = '$domain' and path = '$path' /* get_blog_id_from_url */" );	if ( !$id ) {		wp_cache_set( md5( $domain . $path ), -1, 'blog-id-cache' );		return false;	}	wp_cache_set( md5( $domain . $path ), $id, 'blog-id-cache' );	return $id;}// wpmu admin functionsfunction wpmu_admin_do_redirect( $url = '' ) {	$ref = '';	if ( isset( $_GET['ref'] ) )		$ref = $_GET['ref'];	if ( isset( $_POST['ref'] ) )		$ref = $_POST['ref'];	if ( $ref ) {		$ref = wpmu_admin_redirect_add_updated_param( $ref );		wp_redirect( $ref );		exit();	}	if ( empty( $_SERVER['HTTP_REFERER'] ) == false ) {		wp_redirect( $_SERVER['HTTP_REFERER'] );		exit();	}	$url = wpmu_admin_redirect_add_updated_param( $url );	if ( isset( $_GET['redirect'] ) ) {		if ( substr( $_GET['redirect'], 0, 2 ) == 's_' )			$url .= '&action=blogs&s='. esc_html( substr( $_GET['redirect'], 2 ) );	} elseif ( isset( $_POST['redirect'] ) ) {		$url = wpmu_admin_redirect_add_updated_param( $_POST['redirect'] );	}	wp_redirect( $url );	exit();}function wpmu_admin_redirect_add_updated_param( $url = '' ) {	if ( strpos( $url, 'updated=true' ) === false ) {		if ( strpos( $url, '?' ) === false )			return $url . '?updated=true';		else			return $url . '&updated=true';	}	return $url;}function is_blog_user( $blog_id = 0 ) {	global $current_user, $wpdb;	if ( !$blog_id )		$blog_id = $wpdb->blogid;	$cap_key = $wpdb->base_prefix . $blog_id . '_capabilities';	if ( is_array($current_user->$cap_key) && in_array(1, $current_user->$cap_key) )		return true;	return false;}function is_email_address_unsafe( $user_email ) {	$banned_names = get_site_option( 'banned_email_domains' );	if ($banned_names && !is_array( $banned_names ))		$banned_names = explode( "\n", $banned_names);	if ( is_array( $banned_names ) && empty( $banned_names ) == false ) {		$email_domain = strtolower( substr( $user_email, 1 + strpos( $user_email, '@' ) ) );		foreach ( (array) $banned_names as $banned_domain ) {			if ( $banned_domain == '' )				continue;			if (				strstr( $email_domain, $banned_domain ) ||				(					strstr( $banned_domain, '/' ) &&					preg_match( $banned_domain, $email_domain )				)			)			return true;		}	}	return false;}function wpmu_validate_user_signup($user_name, $user_email) {	global $wpdb;	$errors = new WP_Error();	$orig_username = $user_name;	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$maybe = array();	preg_match( '/[a-z0-9]+/', $user_name, $maybe );	if ( $user_name != $orig_username || $user_name != $maybe[0] ) {		$errors->add( 'user_name', __( "Only the lowercase letters a-z and numbers allowed" ) );		$user_name = $orig_username;	}	$user_email = sanitize_email( $user_email );	if ( empty( $user_name ) )	   	$errors->add('user_name', __('Please enter a username'));	$illegal_names = get_site_option( 'illegal_names' );	if ( is_array( $illegal_names ) == false ) {		$illegal_names = array(  'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	if ( in_array( $user_name, $illegal_names ) == true )		$errors->add('user_name',  __('That username is not allowed'));	if ( is_email_address_unsafe( $user_email ) )		$errors->add('user_email',  __('You cannot use that email address to signup. We are having problems with them blocking some of our email. Please use another email provider.'));	if ( strlen( $user_name ) < 4 )		$errors->add('user_name',  __('Username must be at least 4 characters'));	if ( strpos( ' ' . $user_name, '_' ) != false )		$errors->add( 'user_name', __( 'Sorry, usernames may not contain the character &#8220;_&#8221;!' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $user_name, $match );	if ( $match[0] == $user_name )		$errors->add('user_name', __('Sorry, usernames must have letters too!'));	if ( !is_email( $user_email ) )		$errors->add('user_email', __('Please enter a correct email address'));	$limited_email_domains = get_site_option( 'limited_email_domains' );	if ( is_array( $limited_email_domains ) && empty( $limited_email_domains ) == false ) {		$emaildomain = substr( $user_email, 1 + strpos( $user_email, '@' ) );		if ( in_array( $emaildomain, $limited_email_domains ) == false )			$errors->add('user_email', __('Sorry, that email address is not allowed!'));	}	// Check if the username has been used already.	if ( username_exists($user_name) )		$errors->add('user_name', __('Sorry, that username already exists!'));	// Check if the email address has been used already.	if ( email_exists($user_email) )		$errors->add('user_email', __('Sorry, that email address is already used!'));	// Has someone already signed up for this username?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_login = %s", $user_name) );	if ( $signup != null ) {		$registered_at =  mysql2date('U', $signup->registered);		$now = current_time( 'timestamp', true );		$diff = $now - $registered_at;		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_login = %s", $user_name) );		else			$errors->add('user_name', __('That username is currently reserved but may be available in a couple of days.'));		if ( $signup->active == 0 && $signup->user_email == $user_email )			$errors->add('user_email_used', __('username and email used'));	}	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_email = %s", $user_email) );	if ( $signup != null ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_email = %s", $user_email) );		else			$errors->add('user_email', __('That email address has already been used. Please check your inbox for an activation email. It will become available in a couple of days if you do nothing.'));	}	$result = array('user_name' => $user_name, 'orig_username' => $orig_username, 'user_email' => $user_email, 'errors' => $errors);	return apply_filters('wpmu_validate_user_signup', $result);}function wpmu_validate_blog_signup($blogname, $blog_title, $user = '') {	global $wpdb, $domain, $base, $current_site;	$blog_title = strip_tags( $blog_title );	$blog_title = substr( $blog_title, 0, 50 );	$errors = new WP_Error();	$illegal_names = get_site_option( 'illegal_names' );	if ( $illegal_names == false ) {		$illegal_names = array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	// On sub dir installs, Some names are so illegal, only a filter can spring them from jail	if (! is_subdomain_install() )		$illegal_names = array_merge($illegal_names, apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) ) );	if ( empty( $blogname ) )		$errors->add('blogname', __('Please enter a site name'));	$maybe = array();	preg_match( '/[a-z0-9]+/', $blogname, $maybe );	if ( $blogname != $maybe[0] )		$errors->add('blogname', __('Only lowercase letters and numbers allowed'));	if ( in_array( $blogname, $illegal_names ) == true )		$errors->add('blogname',  __('That name is not allowed'));	if ( strlen( $blogname ) < 4 && !is_super_admin() )		$errors->add('blogname',  __('Site name must be at least 4 characters'));	if ( strpos( ' ' . $blogname, '_' ) != false )		$errors->add( 'blogname', __( 'Sorry, site names may not contain the character &#8220;_&#8221;!' ) );	// do not allow users to create a blog that conflicts with a page on the main blog.	if ( !is_subdomain_install() && $wpdb->get_var( $wpdb->prepare( "SELECT post_name FROM " . $wpdb->get_blog_prefix( $current_site->blog_id ) . "posts WHERE post_type = 'page' AND post_name = %s", $blogname ) ) )		$errors->add( 'blogname', __( 'Sorry, you may not use that site name.' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $blogname, $match );	if ( $match[0] == $blogname )		$errors->add('blogname', __('Sorry, site names must have letters too!'));	$blogname = apply_filters( 'newblogname', $blogname );	$blog_title = stripslashes(  $blog_title );	if ( empty( $blog_title ) )		$errors->add('blog_title', __('Please enter a site title'));	// Check if the domain/path has been used already.	if ( is_subdomain_install() ) {		$mydomain = $blogname . '.' . preg_replace( '|^www\.|', '', $domain );		$path = $base;	} else {		$mydomain = "$domain";		$path = $base.$blogname.'/';	}	if ( domain_exists($mydomain, $path) )		$errors->add('blogname', __('Sorry, that site already exists!'));	if ( username_exists( $blogname ) ) {		if ( is_object( $user ) == false || ( is_object($user) && ( $user->user_login != $blogname ) ) )			$errors->add( 'blogname', __( 'Sorry, that site is reserved!' ) );	}	// Has someone already signed up for this domain?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) ); // TODO: Check email too?	if ( ! empty($signup) ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) );		else			$errors->add('blogname', __('That site is currently reserved but may be available in a couple days.'));	}	$result = array('domain' => $mydomain, 'path' => $path, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors);	return apply_filters('wpmu_validate_blog_signup', $result);}// Record signup information for future activation. wpmu_validate_signup() should be run// on the inputs before calling wpmu_signup().function wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta = '') {	global $wpdb;	$key = substr( md5( time() . rand() . $domain ), 0, 16 );	$meta = serialize($meta);	$domain = $wpdb->escape($domain);	$path = $wpdb->escape($path);	$title = $wpdb->escape($title);	$wpdb->insert( $wpdb->signups, array(		'domain' => $domain,		'path' => $path,		'title' => $title,		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta);}function wpmu_signup_user($user, $user_email, $meta = '') {	global $wpdb;	// Format data	$user = preg_replace( '/\s+/', '', sanitize_user( $user, true ) );	$user_email = sanitize_email( $user_email );	$key = substr( md5( time() . rand() . $user_email ), 0, 16 );	$meta = serialize($meta);	$wpdb->insert( $wpdb->signups, array(		'domain' => '',		'path' => '',		'title' => '',		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_user_notification($user, $user_email, $key, $meta);}// Notify user of signup success.function wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_signup_blog_notification', $domain, $path, $title, $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	if ( !is_subdomain_install() || $current_site->id != 1 )		$activate_url = network_site_url("wp-activate.php?key=$key");	else		$activate_url = "http://{$domain}{$path}wp-activate.php?key=$key"; // @todo use *_url() API	$activate_url = esc_url($activate_url);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_blog_notification_email', __( "To activate your blog, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\nAfter you activate, you can visit your site here:\n\n%s" ) ), $activate_url, esc_url( "http://{$domain}{$path}" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( apply_filters( 'wpmu_signup_blog_notification_subject', __( '[%1s] Activate %2s' ) ), $from_name, esc_url( 'http://' . $domain . $path ) );	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_signup_user_notification($user, $user_email, $key, $meta = '') {	if ( !apply_filters('wpmu_signup_user_notification', $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_user_notification_email', __( "To activate your user, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\n" ) ), site_url( "wp-activate.php?key=$key" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( __( apply_filters( 'wpmu_signup_user_notification_subject', '[%1s] Activate %2s' ) ), $from_name, $user);	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_activate_signup($key) {	global $wpdb, $current_site;	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE activation_key = %s", $key) );	if ( empty($signup) )		return new WP_Error('invalid_key', __('Invalid activation key.'));	if ( $signup->active )		return new WP_Error('already_active', __('The site is already active.'), $signup);	$meta = unserialize($signup->meta);	$user_login = $wpdb->escape($signup->user_login);	$user_email = $wpdb->escape($signup->user_email);	$password = wp_generate_password();	$user_id = username_exists($user_login);	if ( ! $user_id )		$user_id = wpmu_create_user($user_login, $password, $user_email);	else		$user_already_exists = true;	if ( ! $user_id )		return new WP_Error('create_user', __('Could not create user'), $signup);	$now = current_time('mysql', true);	if ( empty($signup->domain) ) {		$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );		if ( isset( $user_already_exists ) )			return new WP_Error( 'user_already_exists', __( 'That username is already activated.' ), $signup);		wpmu_welcome_user_notification($user_id, $password, $meta);		$user_site = get_site_option( 'dashboard_blog', $current_site->blog_id );		if ( $user_site == false )			add_user_to_blog( '1', $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( $user_site, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		add_new_user_to_blog( $user_id, $user_email, $meta );		do_action('wpmu_activate_user', $user_id, $password, $meta);		return array('user_id' => $user_id, 'password' => $password, 'meta' => $meta);	}	$blog_id = wpmu_create_blog( $signup->domain, $signup->path, $signup->title, $user_id, $meta, $wpdb->siteid );	// TODO: What to do if we create a user but cannot create a blog?	if ( is_wp_error($blog_id) ) {		// If blog is taken, that means a previous attempt to activate this blog failed in between creating the blog and		// setting the activation flag.  Let's just set the active flag and instruct the user to reset their password.		if ( 'blog_taken' == $blog_id->get_error_code() ) {			$blog_id->add_data( $signup );			$wpdb->update( $wpdb->signups, array( 'active' => 1, 'activated' => $now ), array( 'activation_key' => $key ) );		}		return $blog_id;	}	$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );	wpmu_welcome_notification($blog_id, $user_id, $password, $signup->title, $meta);	do_action('wpmu_activate_blog', $blog_id, $user_id, $password, $signup->title, $meta);	return array('blog_id' => $blog_id, 'user_id' => $user_id, 'password' => $password, 'title' => $signup->title, 'meta' => $meta);}function wpmu_create_user( $user_name, $password, $email) {	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$user_id = wp_create_user( $user_name, $password, $email );	if ( is_wp_error($user_id) )		return false;	// Newly created users have no roles or caps until they are added to a blog.	delete_user_option( $user_id, 'capabilities' );	delete_user_option( $user_id, 'user_level' );	do_action( 'wpmu_new_user', $user_id );	return $user_id;}function wpmu_create_blog($domain, $path, $title, $user_id, $meta = '', $site_id = 1) {	$domain = preg_replace( '/\s+/', '', sanitize_user( $domain, true ) );	if ( is_subdomain_install() )		$domain = str_replace( '@', '', $domain );	$title = strip_tags( $title );	$user_id = (int) $user_id;	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return new WP_Error('blog_taken', __('Site already exists.'));	if ( !defined('WP_INSTALLING') )		define( 'WP_INSTALLING', true );	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return new WP_Error('insert_blog', __('Could not create site.'));	switch_to_blog($blog_id);	install_blog($blog_id, $title);	wp_install_defaults($user_id);	add_user_to_blog($blog_id, $user_id, 'administrator');	if ( is_array($meta) ) foreach ($meta as $key => $value) {		if ( $key == 'public' || $key == 'archived' || $key == 'mature' || $key == 'spam' || $key == 'deleted' || $key == 'lang_id' )			update_blog_status( $blog_id, $key, $value );		else			update_option( $key, $value );	}	add_option( 'WPLANG', get_site_option( 'WPLANG' ) );	update_option( 'blog_public', (int)$meta['public'] );	if ( !is_super_admin() && get_user_meta( $user_id, 'primary_blog', true ) == get_site_option( 'dashboard_blog', 1 ) )		update_user_meta( $user_id, 'primary_blog', $blog_id );	restore_current_blog();	do_action( 'wpmu_new_blog', $blog_id, $user_id, $domain, $path, $site_id, $meta );	return $blog_id;}function newblog_notify_siteadmin( $blog_id, $deprecated = '' ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$options_site_url = esc_url(network_admin_url('ms-options.php'));	switch_to_blog( $blog_id );	$blogname = get_option( 'blogname' );	$siteurl = site_url();	restore_current_blog();	$msg = sprintf( __( 'New Site: %1sURL: %2sRemote IP: %3sDisable these notifications: %4s' ), $blogname, $siteurl, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newblog_notify_siteadmin', $msg );	wp_mail( $email, sprintf( __( 'New Site Registration: %s' ), $siteurl ), $msg );	return true;}function newuser_notify_siteadmin( $user_id ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$user = new WP_User($user_id);	$options_site_url = esc_url(network_admin_url('ms-options.php'));	$msg = sprintf(__('New User: %1sRemote IP: %2sDisable these notifications: %3s'), $user->user_login, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newuser_notify_siteadmin', $msg );	wp_mail( $email, sprintf(__('New User Registration: %s'), $user->user_login), $msg );	return true;}function domain_exists($domain, $path, $site_id = 1) {	global $wpdb;	return $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s AND site_id = %d", $domain, $path, $site_id) );}function insert_blog($domain, $path, $site_id) {	global $wpdb;	$path = trailingslashit($path);	$site_id = (int) $site_id;	$result = $wpdb->insert( $wpdb->blogs, array('site_id' => $site_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time('mysql')) );	if ( ! $result )		return false;	refresh_blog_details($wpdb->insert_id);	return $wpdb->insert_id;}// Install an empty blog.  wpdb should already be switched.function install_blog($blog_id, $blog_title = '') {	global $wpdb, $table_prefix, $wp_roles;	$wpdb->suppress_errors();	// Cast for security	$blog_id = (int) $blog_id;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	if ( $wpdb->get_results("SELECT ID FROM $wpdb->posts") )		die(__('<h1>Already Installed</h1><p>You appear to have already installed WordPress. To reinstall please clear your old database tables first.</p>') . '</body></html>');	$wpdb->suppress_errors(false);	$url = get_blogaddress_by_id($blog_id);	// Set everything up	make_db_current_silent();	populate_options();	populate_roles();	$wp_roles->_init();	// fix url.	update_option('siteurl', $url);	update_option('home', $url);	update_option('fileupload_url', $url . "files" );	update_option('upload_path', "wp-content/blogs.dir/" . $blog_id . "/files");	update_option('blogname', stripslashes( $blog_title ) );	update_option('admin_email', '');	$wpdb->update( $wpdb->options, array('option_value' => ''), array('option_name' => 'admin_email') );	// remove all perms	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'user_level') );	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'capabilities') );	$wpdb->suppress_errors( false );}// Deprecated, use wp_install_defaults()// should be switched already as $blog_id is ignored.function install_blog_defaults($blog_id, $user_id) {	global $wpdb;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	$wpdb->suppress_errors();	wp_install_defaults($user_id);	$wpdb->suppress_errors( false );}function wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_notification', $blog_id, $user_id, $password, $title, $meta) )		return false;	$welcome_email = stripslashes( get_site_option( 'welcome_email' ) );	if ( $welcome_email == false )		$welcome_email = stripslashes( __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' ) );	$url = get_blogaddress_by_id($blog_id);	$user = new WP_User($user_id);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'BLOG_TITLE', $title, $welcome_email );	$welcome_email = str_replace( 'BLOG_URL', $url, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = apply_filters( 'update_welcome_email', $welcome_email, $blog_id, $user_id, $password, $title, $meta);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_subject', sprintf(__('New %1$s Site: %2$s'), $current_site->site_name, stripslashes( $title ) ) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function wpmu_welcome_user_notification($user_id, $password, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_user_notification', $user_id, $password, $meta) )		return false;	$welcome_email = get_site_option( 'welcome_user_email' );	$user = new WP_User($user_id);	$welcome_email = apply_filters( 'update_welcome_user_email', $welcome_email, $user_id, $password, $meta);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = str_replace( 'LOGINLINK', wp_login_url(), $welcome_email );	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_user_subject', sprintf(__('New %1$s User: %2$s'), $current_site->site_name, $user->user_login) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function get_current_site() {	global $current_site;	return $current_site;}function get_user_id_from_string( $string ) {	$user_id = 0;	if ( is_email( $string ) ) {		$user = get_user_by('email', $string);		if ( $user )			$user_id = $user->ID;	} elseif ( is_numeric( $string ) ) {		$user_id = $string;	} else {		$user = get_user_by('login', $string);		if ( $user )			$user_id = $user->ID;	}	return $user_id;}function get_most_recent_post_of_user( $user_id ) {	global $wpdb;	$user_blogs = get_blogs_of_user( (int) $user_id );	$most_recent_post = array();	// Walk through each blog and get the most recent post	// published by $user_id	foreach ( (array) $user_blogs as $blog ) {		$recent_post = $wpdb->get_row( $wpdb->prepare("SELECT ID, post_date_gmt FROM {$wpdb->base_prefix}{$blog->userblog_id}_posts WHERE post_author = %d AND post_type = 'post' AND post_status = 'publish' ORDER BY post_date_gmt DESC LIMIT 1", $user_id ), ARRAY_A);		// Make sure we found a post		if ( isset($recent_post['ID']) ) {			$post_gmt_ts = strtotime($recent_post['post_date_gmt']);			// If this is the first post checked or if this post is			// newer than the current recent post, make it the new			// most recent post.			if ( !isset($most_recent_post['post_gmt_ts']) || ( $post_gmt_ts > $most_recent_post['post_gmt_ts'] ) ) {				$most_recent_post = array(					'blog_id'		=> $blog->userblog_id,					'post_id'		=> $recent_post['ID'],					'post_date_gmt'	=> $recent_post['post_date_gmt'],					'post_gmt_ts'	=> $post_gmt_ts				);			}		}	}	return $most_recent_post;}/* Misc functions */function get_dirsize( $directory ) {	$dirsize = get_transient( 'dirsize_cache' );	if ( is_array( $dirsize ) && isset( $dirsize[ $directory ][ 'size' ] ) )		return $dirsize[ $directory ][ 'size' ];	if ( false == is_array( $dirsize ) )		$dirsize = array();	$dirsize[ $directory ][ 'size' ] = recurse_dirsize( $directory );	set_transient( 'dirsize_cache', $dirsize, 3600 );	return $dirsize[ $directory ][ 'size' ];}function recurse_dirsize( $directory ) {	$size = 0;	if ( substr( $directory, -1 ) == '/' )		$directory = substr($directory,0,-1);	if ( !file_exists($directory) || !is_dir( $directory ) || !is_readable( $directory ) )		return false;	if ($handle = opendir($directory)) {		while(($file = readdir($handle)) !== false) {			$path = $directory.'/'.$file;			if ($file != '.' && $file != '..') {				if (is_file($path)) {					$size += filesize($path);				} elseif (is_dir($path)) {					$handlesize = recurse_dirsize($path);					if ($handlesize > 0)						$size += $handlesize;				}			}		}		closedir($handle);	}	return $size;}function upload_is_user_over_quota( $echo = true ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$spaceAllowed = get_space_allowed();	if ( empty( $spaceAllowed ) || !is_numeric( $spaceAllowed ) )		$spaceAllowed = 10;	// Default space allowed is 10 MB	$dirName = BLOGUPLOADDIR;	$size = get_dirsize($dirName) / 1024 / 1024;	if ( ($spaceAllowed-$size) < 0 ) {		if ( $echo )			_e( 'Sorry, you have used your space allocation. Please delete some files to upload more files.' ); // No space left		return true;	} else {		return false;	}}function check_upload_mimes( $mimes ) {	$site_exts = explode( ' ', get_site_option( 'upload_filetypes' ) );	foreach ( $site_exts as $ext ) {		foreach ( $mimes as $ext_pattern => $mime ) {			if ( $ext != '' && strpos( $ext_pattern, $ext ) !== false )				$site_mimes[$ext_pattern] = $mime;		}	}	return $site_mimes;}function update_posts_count( $deprecated = '' ) {	global $wpdb;	update_option( 'post_count', (int) $wpdb->get_var( "SELECT COUNT(ID) FROM {$wpdb->posts} WHERE post_status = 'publish' and post_type = 'post'" ) );}function wpmu_log_new_registrations( $blog_id, $user_id ) {	global $wpdb;	$user = new WP_User( (int) $user_id );	$wpdb->insert( $wpdb->registration_log, array('email' => $user->user_email, 'IP' => preg_replace( '/[^0-9., ]/', '',$_SERVER['REMOTE_ADDR'] ), 'blog_id' => $blog_id, 'date_registered' => current_time('mysql')) );}function fix_import_form_size( $size ) {	if ( upload_is_user_over_quota( false ) == true )		return 0;	$spaceAllowed = 1024 * 1024 * get_space_allowed();	$dirName = BLOGUPLOADDIR;	$dirsize = get_dirsize($dirName) ;	if ( $size > $spaceAllowed - $dirsize )		return $spaceAllowed - $dirsize; // remaining space	else		return $size; // default}/** * Maintains a canonical list of terms by syncing terms created for each blog with the global terms table. * * @since 3.0.0 * * @see term_id_filter * * @param int $term_id An ID for a term on the current blog. * @return int An ID from the global terms table mapped from $term_id. */function global_terms( $term_id, $deprecated = '' ) {	global $wpdb;	static $global_terms_recurse = null;	if ( !global_terms_enabled() )		return $term_id;	// prevent a race condition	$recurse_start = false;	if ( $global_terms_recurse === null ) {		$recurse_start = true;		$global_terms_recurse = 1;	} elseif ( 10 < $global_terms_recurse++ ) {		return $term_id;	}	$term_id = intval( $term_id );	$c = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->terms WHERE term_id = %d", $term_id ) );	$global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE category_nicename = %s", $c->slug ) );	if ( $global_id == null ) {		$used_global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE cat_ID = %d", $c->term_id ) );		if ( null == $used_global_id ) {			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $term_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;			if ( empty( $global_id ) )				return $term_id;		} else {			$max_global_id = $wpdb->get_var( "SELECT MAX(cat_ID) FROM $wpdb->sitecategories" );			$max_local_id = $wpdb->get_var( "SELECT MAX(term_id) FROM $wpdb->terms" );			$new_global_id = max( $max_global_id, $max_local_id ) + mt_rand( 100, 400 );			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $new_global_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;		}	} elseif ( $global_id != $term_id ) {		$local_id = $wpdb->get_row( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE term_id = %d", $global_id ) );		if ( null != $local_id )			$local_id = global_terms( $local_id );			if ( 10 < $global_terms_recurse )				$global_id = $term_id;	}	if ( $global_id != $term_id ) {		if ( get_option( 'default_category' ) == $term_id )			update_option( 'default_category', $global_id );		$wpdb->update( $wpdb->terms, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('parent' => $global_id), array('parent' => $term_id) );		clean_term_cache($term_id);	}	if( $recurse_start )		$global_terms_recurse = null;	return $global_id;}function redirect_this_site( $deprecated = '' ) {	global $current_site;	return array( $current_site->domain );}function upload_is_file_too_big( $upload ) {	if ( is_array( $upload ) == false || defined( 'WP_IMPORTING' ) )		return $upload;	if ( strlen( $upload['bits'] )  > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		return sprintf( __( 'This file is too big. Files must be less than %d KB in size.' ) . '<br />', get_site_option( 'fileupload_maxk', 1500 ));	return $upload;}function wordpressmu_wp_mail_from( $email ) {	if ( strpos( $email, 'wordpress@' ) !== false )		$email = get_option( 'admin_email' );	return $email;}function signup_nonce_fields() {	$id = mt_rand();	echo "<input type='hidden' name='signup_form_id' value='{$id}' />";	wp_nonce_field('signup_form_' . $id, '_signup_form', false);}function signup_nonce_check( $result ) {	if ( !strpos( $_SERVER[ 'PHP_SELF' ], 'wp-signup.php' ) )		return $result;	if ( wp_create_nonce('signup_form_' . $_POST[ 'signup_form_id' ]) != $_POST['_signup_form'] )		wp_die( __('Please try again!') );	return $result;}function maybe_redirect_404() {	global $current_site;	if ( is_main_site() && is_404() && defined( 'NOBLOGREDIRECT' ) && ( $destination = apply_filters( 'blog_redirect_404', NOBLOGREDIRECT ) ) ) {		if ( $destination == '%siteurl%' )			$destination = network_home_url();		wp_redirect( $destination );		exit();	}}function maybe_add_existing_user_to_blog() {	if ( false === strpos( $_SERVER[ 'REQUEST_URI' ], '/newbloguser/' ) )		return false;	$parts = explode( '/', $_SERVER[ 'REQUEST_URI' ] );	$key = array_pop( $parts );	if ( $key == '' )		$key = array_pop( $parts );	$details = get_option( 'new_user_' . $key );	if ( !empty( $details ) )		delete_option( 'new_user_' . $key );	if ( empty( $details ) || is_wp_error( add_existing_user_to_blog( $details ) ) )		wp_die( sprintf(__('An error occurred adding you to this site. Back to the <a href="%s">homepage</a>.'), site_url() ) );	wp_die( sprintf(__('You have been added to this site. Please visit the <a href="%s">homepage</a> or <a href="%s">login</a> using your username and password.'), site_url(), admin_url() ), __('Success') );}function add_existing_user_to_blog( $details = false ) {	if ( is_array( $details ) ) {		$result = add_user_to_blog( '', $details[ 'user_id' ], $details[ 'role' ] );		do_action( 'added_existing_user', $details[ 'user_id' ], $result );	}	return $result;}function add_new_user_to_blog( $user_id, $email, $meta ) {	global $current_site;	if ( $meta[ 'add_to_blog' ] ) {		$blog_id = $meta[ 'add_to_blog' ];		$role = $meta[ 'new_role' ];		remove_user_from_blog($user_id, $current_site->blogid); // remove user from main blog.		add_user_to_blog( $blog_id, $user_id, $role );		update_user_meta( $user_id, 'primary_blog', $blog_id );	}}function fix_phpmailer_messageid( $phpmailer ) {	global $current_site;	$phpmailer->Hostname = $current_site->domain;}function is_user_spammy( $username = 0 ) {	if ( $username == 0 ) {		global $current_user;		$user_id = $current_user->ID;	} else {		$user_id = get_user_id_from_string( $username );	}	$u = new WP_User( $user_id );	if ( $u->spam == 1 )		return true;	return false;}function update_blog_public( $old_value, $value ) {	global $wpdb;	do_action('update_blog_public');	update_blog_status( $wpdb->blogid, 'public', (int) $value );}add_action('update_option_blog_public', 'update_blog_public', 10, 2);/* Redirect all hits to "dashboard" blog to wp-admin/ Dashboard. */function redirect_mu_dashboard() {	global $current_site, $current_blog;	$dashboard_blog = get_dashboard_blog();	if ( $current_blog->blog_id == $dashboard_blog->blog_id && $dashboard_blog->blog_id != $current_site->blog_id ) {		$protocol = ( is_ssl() ? 'https://' : 'http://' );		wp_redirect( $protocol . $dashboard_blog->domain . trailingslashit( $dashboard_blog->path ) . 'wp-admin/' );		die();	}}add_action( 'template_redirect', 'redirect_mu_dashboard' );function get_dashboard_blog() {	if ( $blog = get_site_option( 'dashboard_blog' ) )		return get_blog_details( $blog );	return get_blog_details( $GLOBALS['current_site']->blog_id );}function is_user_option_local( $key, $user_id = 0, $blog_id = 0 ) {	global $current_user, $wpdb;	if ( $user_id == 0 )		$user_id = $current_user->ID;	if ( $blog_id == 0 )		$blog_id = $wpdb->blogid;	$local_key = $wpdb->base_prefix . $blog_id . '_' . $key;	if ( isset( $current_user->$local_key ) )		return true;	return false;}function users_can_register_signup_filter() {	$registration = get_site_option('registration');	if ( $registration == 'all' || $registration == 'user' )		return true;	return false;}add_filter('option_users_can_register', 'users_can_register_signup_filter');function welcome_user_msg_filter( $text ) {	if ( !$text ) {		return __( 'Dear User,Your new account is set up.You can log in with the following information:Username: USERNAMEPassword: PASSWORDLOGINLINKThanks!--The Team @ SITE_NAME' );	}	return $text;}add_filter( 'site_option_welcome_user_email', 'welcome_user_msg_filter' );/** * Whether to force SSL on content. * * @since 2.8.5 * * @param string|bool $force * @return bool True if forced, false if not forced. */function force_ssl_content( $force = '' ) {	static $forced_content;	if ( '' != $force ) {		$old_forced = $forced_content;		$forced_content = $force;		return $old_forced;	}	return $forced_content;}/** * Formats an String URL to use HTTPS if HTTP is found. * Useful as a filter. * * @since 2.8.5 **/function filter_SSL( $url ) {	if ( !is_string( $url ) )		return get_bloginfo( 'url' ); //return home blog url with proper scheme	$arrURL = parse_url( $url );	if ( force_ssl_content() && is_ssl() ) {		if ( 'http' === $arrURL['scheme'] && 'https' !== $arrURL['scheme'] )			$url = str_replace( $arrURL['scheme'], 'https', $url );	}	return $url;}?>
<?php/** * Install plugin administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_plugins') )	wp_die(__('You do not have sufficient permissions to install plugins on this site.'));include(ABSPATH . 'wp-admin/includes/plugin-install.php');$title = __('Install Plugins');$parent_file = 'plugins.php';wp_reset_vars( array('tab', 'paged') );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Plugin Installer');$tabs['popular']  = _x('Popular','Plugin Installer');$tabs['new']      = _x('Newest','Plugin Installer');$tabs['updated']  = _x('Recently Updated','Plugin Installer');$nonmenu_tabs = array('plugin-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_plugins_tabs', $tabs );$nonmenu_tabs = apply_filters('install_plugins_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;wp_enqueue_style( 'plugin-install' );wp_enqueue_script( 'plugin-install' );if ( 'plugin-information' != $tab )	add_thickbox();$body_id = $tab;do_action('install_plugins_pre_' . $tab); //Used to override the general interface, Eg, install or plugin information.add_contextual_help($current_screen,	'<p>' . sprintf(__('Plugins hook into WordPress to extend its functionality with custom features. Plugins are developed independently from WordPress core by thousands of developers all over the world. All plugins in the official <a href="%s" target="_blank">WordPress.org Plugin Directory</a> are compatible with the WordPress GPL v2 license. You can find new plugins to install by searching or browsing the Directory right here in your own Plugins section.'), 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('If you know what you&#8217;re looking for, Search is your best bet. The Search screen has options to search the WordPress.org Plugin Directory for a particular Term, Author, or Tag. You can also search the directory by selecting a popular tags. Tags in larger type mean more plugins have been labeled with that tag.') . '</p>' .	'<p>' . __('If you just want to get an idea of what&#8217;s available, you can browse Featured, Popular, Newest, and Recently Updated plugins by using the links in the upper left of the screen. These sections rotate regularly.') . '</p>' .	'<p>' . __('If you want to install a plugin that you&#8217;ve downloaded elsewhere, click Upload in the upper left. You will be prompted to upload the .zip package, and once uploaded, you can activate the new plugin.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Add_New_SubPanel" target="_blank">Documentation on Installing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('plugin-install.php?tab=' . $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_plugins_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * Template WordPress Administration API. * * A Big Mess. Also some neat functions that are nicely written. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since 2.7 * * Outputs the HTML for the hidden table rows used in Categories, Link Categories and Tags quick edit. * * @param string $type "edit-tags", "categoried" or "edit-link-categories" * @param string $taxonomy The taxonomy of the row. * @return */function inline_edit_term_row($type, $taxonomy) {	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		return;	$columns = get_column_headers($type);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($type) ) );	$col_count = count($columns) - count($hidden);	?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<tr id="inline-edit" class="inline-edit-row" style="display: none"><td colspan="<?php echo $col_count; ?>">		<fieldset><div class="inline-edit-col">			<h4><?php _e( 'Quick Edit' ); ?></h4>			<label>				<span class="title"><?php _e( 'Name' ); ?></span>				<span class="input-text-wrap"><input type="text" name="name" class="ptitle" value="" /></span>			</label><?php if ( !is_multisite() ) { ?>			<label>				<span class="title"><?php _e( 'Slug' ); ?></span>				<span class="input-text-wrap"><input type="text" name="slug" class="ptitle" value="" /></span>			</label><?php } ?>		</div></fieldset><?php	$core_columns = array( 'cb' => true, 'description' => true, 'name' => true, 'slug' => true, 'posts' => true );	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( 'quick_edit_custom_box', $column_name, $type, $taxonomy );	}?>	<p class="inline-edit-save submit">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="cancel button-secondary alignleft"><?php _e('Cancel'); ?></a>		<?php $update_text = $tax->labels->update_item; ?>		<a accesskey="s" href="#inline-edit" title="<?php echo esc_attr( $update_text ); ?>" class="save button-primary alignright"><?php echo $update_text; ?></a>		<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<span class="error" style="display:none;"></span>		<?php wp_nonce_field( 'taxinlineeditnonce', '_inline_edit', false ); ?>		<input type="hidden" name="taxonomy" value="<?php echo esc_attr( $tax->name ); ?>" />		<br class="clear" />	</p>	</td></tr>	</tbody></table></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $category * @param unknown_type $name_override * @return unknown */function link_cat_row( $category, $name_override = false ) {	static $row_class = '';	if ( !$category = get_term( $category, 'link_category', OBJECT, 'display' ) )		return false;	if ( is_wp_error( $category ) )		return $category;	$default_cat_id = (int) get_option( 'default_link_category' );	$name = ( $name_override ? $name_override : $category->name );	$edit_link = "link-category.php?action=edit&amp;cat_ID=$category->term_id";	if ( current_user_can( 'manage_categories' ) ) {		$edit = "<a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $category->name)) . "'>$name</a><br />";		$actions = array();		$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		if ( $default_cat_id != $category->term_id )			$actions['delete'] = "<a class='delete:the-list:link-cat-$category->term_id submitdelete' href='" . wp_nonce_url("link-category.php?action=delete&amp;cat_ID=$category->term_id", 'delete-link-category_' . $category->term_id) . "'>" . __('Delete') . "</a>";		$actions = apply_filters('link_cat_row_actions', $actions, $category);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';	} else {		$edit = $name;	}	$row_class = 'alternate' == $row_class ? '' : 'alternate';	$qe_data = get_term_to_edit($category->term_id, 'link_category');	$category->count = number_format_i18n( $category->count );	$count = ( $category->count > 0 ) ? "<a href='link-manager.php?cat_id=$category->term_id'>$category->count</a>" : $category->count;	$output = "<tr id='link-cat-$category->term_id' class='iedit $row_class'>";	$columns = get_column_headers('edit-link-categories');	$hidden = get_hidden_columns('edit-link-categories');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$output .= "<th scope='row' class='check-column'>";				if ( absint( get_option( 'default_link_category' ) ) != $category->term_id ) {					$output .= "<input type='checkbox' name='delete[]' value='$category->term_id' />";				} else {					$output .= "&nbsp;";				}				$output .= "</th>";				break;			case 'name':				$output .= "<td $attributes>$edit";				$output .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';				$output .= '<div class="name">' . $qe_data->name . '</div>';				$output .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';				$output .= '<div class="cat_parent">' . $qe_data->parent . '</div></div></td>';				break;			case 'description':				$output .= "<td $attributes>$category->description</td>";				break;			case 'slug':				$output .= "<td $attributes>" . apply_filters('editable_slug', $category->slug) . "</td>";				break;			case 'links':				$attributes = 'class="links column-links num"' . $style;				$output .= "<td $attributes>$count</td>";				break;			default:				$output .= "<td $attributes>";				$output .= apply_filters('manage_link_categories_custom_column', '', $column_name, $category->term_id);				$output .= "</td>";		}	}	$output .= '</tr>';	return $output;}//// Category Checklists///** * {@internal Missing Short Description}} * * @since unknown */class Walker_Category_Checklist extends Walker {	var $tree_type = 'category';	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id'); //TODO: decouple this	function start_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	function end_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	function start_el(&$output, $category, $depth, $args) {		extract($args);		if ( empty($taxonomy) )			$taxonomy = 'category';		if ( $taxonomy == 'category' )			$name = 'post_category';		else			$name = 'tax_input['.$taxonomy.']';		$class = in_array( $category->term_id, $popular_cats ) ? ' class="popular-category"' : '';		$output .= "\n<li id='{$taxonomy}-{$category->term_id}'$class>" . '<label class="selectit"><input value="' . $category->term_id . '" type="checkbox" name="'.$name.'[]" id="in-'.$taxonomy.'-' . $category->term_id . '"' . checked( in_array( $category->term_id, $selected_cats ), true, false ) . disabled( empty( $args['disabled'] ), false, false ) . ' /> ' . esc_html( apply_filters('the_category', $category->name )) . '</label>';	}	function end_el(&$output, $category, $depth, $args) {		$output .= "</li>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @param unknown_type $descendants_and_self * @param unknown_type $selected_cats * @param unknown_type $popular_cats */function wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {	wp_terms_checklist($post_id,	 	array(			'taxonomy' => 'category',			'descendants_and_self' => $descendants_and_self,			'selected_cats' => $selected_cats,			'popular_cats' => $popular_cats,			'walker' => $walker,			'checked_ontop' => $checked_ontop  ));}/** * Taxonomy independent version of wp_category_checklist * * @param int $post_id * @param array $args */function wp_terms_checklist($post_id = 0, $args = array()) { 	$defaults = array(		'descendants_and_self' => 0,		'selected_cats' => false,		'popular_cats' => false,		'walker' => null,		'taxonomy' => 'category',		'checked_ontop' => true	);	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	if ( empty($walker) || !is_a($walker, 'Walker') )		$walker = new Walker_Category_Checklist;	$descendants_and_self = (int) $descendants_and_self;	$args = array('taxonomy' => $taxonomy);	$tax = get_taxonomy($taxonomy);	$args['disabled'] = !current_user_can($tax->cap->assign_terms);	if ( is_array( $selected_cats ) )		$args['selected_cats'] = $selected_cats;	elseif ( $post_id )		$args['selected_cats'] = wp_get_object_terms($post_id, $taxonomy, array_merge($args, array('fields' => 'ids')));	else		$args['selected_cats'] = array();	if ( is_array( $popular_cats ) )		$args['popular_cats'] = $popular_cats;	else		$args['popular_cats'] = get_terms( $taxonomy, array( 'fields' => 'ids', 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );	if ( $descendants_and_self ) {		$categories = (array) get_terms($taxonomy, array( 'child_of' => $descendants_and_self, 'hierarchical' => 0, 'hide_empty' => 0 ) );		$self = get_term( $descendants_and_self, $taxonomy );		array_unshift( $categories, $self );	} else {		$categories = (array) get_terms($taxonomy, array('get' => 'all'));	}	if ( $checked_ontop ) {		// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)		$checked_categories = array();		$keys = array_keys( $categories );		foreach( $keys as $k ) {			if ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {				$checked_categories[] = $categories[$k];				unset( $categories[$k] );			}		}		// Put checked cats on top		echo call_user_func_array(array(&$walker, 'walk'), array($checked_categories, 0, $args));	}	// Then the rest of them	echo call_user_func_array(array(&$walker, 'walk'), array($categories, 0, $args));}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $taxonomy * @param unknown_type $default * @param unknown_type $number * @param unknown_type $echo * @return unknown */function wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {	global $post_ID;	if ( $post_ID )		$checked_terms = wp_get_object_terms($post_ID, $taxonomy, array('fields'=>'ids'));	else		$checked_terms = array();	$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can($tax->cap->assign_terms) )		$disabled = 'disabled="disabled"';	else		$disabled = '';	$popular_ids = array();	foreach ( (array) $terms as $term ) {		$popular_ids[] = $term->term_id;		if ( !$echo ) // hack for AJAX use			continue;		$id = "popular-$taxonomy-$term->term_id";		$checked = in_array( $term->term_id, $checked_terms ) ? 'checked="checked"' : '';		?>		<li id="<?php echo $id; ?>" class="popular-category">			<label class="selectit">			<input id="in-<?php echo $id; ?>" type="checkbox" <?php echo $checked; ?> value="<?php echo (int) $term->term_id; ?>" <?php echo $disabled ?>/>				<?php echo esc_html( apply_filters( 'the_category', $term->name ) ); ?>			</label>		</li>		<?php	}	return $popular_ids;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id */function wp_link_category_checklist( $link_id = 0 ) {	$default = 1;	if ( $link_id ) {		$checked_categories = wp_get_link_cats( $link_id );		// No selected categories, strange		if ( ! count( $checked_categories ) )			$checked_categories[] = $default;	} else {		$checked_categories[] = $default;	}	$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );	if ( empty( $categories ) )		return;	foreach ( $categories as $category ) {		$cat_id = $category->term_id;		$name = esc_html( apply_filters( 'the_category', $category->name ) );		$checked = in_array( $cat_id, $checked_categories ) ? ' checked="checked"' : '';		echo '<li id="link-category-', $cat_id, '"><label for="in-link-category-', $cat_id, '" class="selectit"><input value="', $cat_id, '" type="checkbox" name="link_category[]" id="in-link-category-', $cat_id, '"', $checked, '/> ', $name, "</label></li>";	}}// Tag stuff// Returns a single tag row (see tag_rows below)// Note: this is also used in admin-ajax.php!/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag * @param unknown_type $class * @return unknown */function _tag_row( $tag, $level, $taxonomy = 'post_tag' ) {		global $post_type, $current_screen;		static $row_class = '';		$row_class = ($row_class == '' ? ' class="alternate"' : '');		$count = number_format_i18n( $tag->count );		$tax = get_taxonomy($taxonomy);		if ( 'post_tag' == $taxonomy ) {			$tagsel = 'tag';		} elseif ( 'category' == $taxonomy ) {			$tagsel = 'category_name';		} elseif ( ! empty($tax->query_var) ) {			$tagsel = $tax->query_var;		} else {			$tagsel = $taxonomy;		}		$pad = str_repeat( '&#8212; ', max(0, $level) );		$name = apply_filters( 'term_name', $pad . ' ' . $tag->name, $tag );		$qe_data = get_term($tag->term_id, $taxonomy, object, 'edit');		$edit_link = "edit-tags.php?action=edit&amp;taxonomy=$taxonomy&amp;post_type=$post_type&amp;tag_ID=$tag->term_id";		$out = '';		$out .= '<tr id="tag-' . $tag->term_id . '"' . $row_class . '>';		$columns = get_column_headers($current_screen);		$hidden = get_hidden_columns($current_screen);		$default_term = get_option('default_' . $taxonomy);		foreach ( $columns as $column_name => $column_display_name ) {			$class = "class=\"$column_name column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch ($column_name) {				case 'cb':					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$out .= '<th scope="row" class="check-column"> <input type="checkbox" name="delete_tags[]" value="' . $tag->term_id . '" /></th>';					else						$out .= '<th scope="row" class="check-column">&nbsp;</th>';					break;				case 'name':					$out .= '<td ' . $attributes . '><strong><a class="row-title" href="' . $edit_link . '" title="' . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $name)) . '">' . $name . '</a></strong><br />';					$actions = array();					if ( current_user_can($tax->cap->edit_terms) ) {						$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';						$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';					}					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$actions['delete'] = "<a class='delete-tag' href='" . wp_nonce_url("edit-tags.php?action=delete&amp;taxonomy=$taxonomy&amp;tag_ID=$tag->term_id", 'delete-tag_' . $tag->term_id) . "'>" . __('Delete') . "</a>";					$actions = apply_filters('tag_row_actions', $actions, $tag);					$actions = apply_filters("${taxonomy}_row_actions", $actions, $tag);					$action_count = count($actions);					$i = 0;					$out .= '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						$out .= "<span class='$action'>$link$sep</span>";					}					$out .= '</div>';					$out .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';					$out .= '<div class="name">' . $qe_data->name . '</div>';					$out .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';					$out .= '<div class="parent">' . $qe_data->parent . '</div></div></td>';					break;				case 'description':					$out .= "<td $attributes>$tag->description</td>";					break;				case 'slug':					$out .= "<td $attributes>" . apply_filters('editable_slug', $tag->slug) . "</td>";					break;				case 'posts':					$attributes = 'class="posts column-posts num"' . $style;					$out .= "<td $attributes><a href='edit.php?$tagsel=$tag->slug&amp;post_type=$post_type'>$count</a></td>";					break;				default:					$out .= "<td $attributes>";					$out .= apply_filters("manage_${taxonomy}_custom_column", '', $column_name, $tag->term_id);					$out .= "</td>";			}		}		$out .= "</tr>\n";		return $out;}// Outputs appropriate rows for the Nth page of the Tag Management screen,// assuming M tags displayed at a time on the page// Returns the number of tags displayed/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $pagesize * @param unknown_type $searchterms * @return unknown */function tag_rows( $page = 1, $pagesize = 20, $searchterms = '', $taxonomy = 'post_tag' ) {	// Get a page worth of tags	$start = ($page - 1) * $pagesize;	$args = array('offset' => $start, 'number' => $pagesize, 'hide_empty' => 0);	if ( !empty( $searchterms ) )		$args['search'] = $searchterms;	// convert it to table rows	$out = '';	$count = 0;	if ( is_taxonomy_hierarchical($taxonomy) ) {		// We'll need the full set of terms then.		$args['number'] = $args['offset'] = 0;		$terms = get_terms( $taxonomy, $args );		if ( !empty( $searchterms ) ) // Ignore children on searches.			$children = array();		else			$children = _get_term_hierarchy($taxonomy);		// Some funky recursion to get the job done(Paging & parents mainly) is contained within, Skip it for non-hierarchical taxonomies for performance sake		$out .= _term_rows($taxonomy, $terms, $children, $page, $pagesize, $count);	} else {		$terms = get_terms( $taxonomy, $args );		foreach( $terms as $term )			$out .= _tag_row( $term, 0, $taxonomy );		$count = $pagesize; // Only displaying a single page.	}	echo $out;	return $count;}function _term_rows( $taxonomy, $terms, &$children, $page = 1, $per_page = 20, &$count, $parent = 0, $level = 0 ) {	$start = ($page - 1) * $per_page;	$end = $start + $per_page;	$output = '';	foreach ( $terms as $key => $term ) {		if ( $count >= $end )			break;		if ( $term->parent != $parent && empty($_GET['s']) )			continue;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $term->parent > 0 && empty($_GET['s']) ) {			$my_parents = $parent_ids = array();			$p = $term->parent;			while ( $p ) {				$my_parent = get_term( $p, $taxonomy );				$my_parents[] = $my_parent;				$p = $my_parent->parent;				if ( in_array($p, $parent_ids) ) // Prevent parent loops.					break;				$parent_ids[] = $p;			}			unset($parent_ids);			$num_parents = count($my_parents);			while ( $my_parent = array_pop($my_parents) ) {				$output .=  "\t" . _tag_row( $my_parent, $level - $num_parents, $taxonomy );				$num_parents--;			}		}		if ( $count >= $start )			$output .= "\t" . _tag_row( $term, $level, $taxonomy );		++$count;		unset($terms[$key]);		if ( isset($children[$term->term_id]) && empty($_GET['s']) )			$output .= _term_rows( $taxonomy, $terms, $children, $page, $per_page, $count, $term->term_id, $level + 1 );	}	return $output;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_posts_columns( $screen = '') {	if ( empty($screen) )		$post_type = 'post';	else		$post_type = $screen->post_type;	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	/* translators: manage posts column name */	$posts_columns['title'] = _x('Title', 'column name');	$posts_columns['author'] = __('Author');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'category') )		$posts_columns['categories'] = __('Categories');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'post_tag') )		$posts_columns['tags'] = __('Tags');	$post_status = !empty($_REQUEST['post_status']) ? $_REQUEST['post_status'] : 'all';	if ( !in_array( $post_status, array('pending', 'draft', 'future') ) && ( empty($post_type) || post_type_supports($post_type, 'comments') ) )		$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	$posts_columns['date'] = __('Date');	if ( 'page' == $post_type )		$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );	else		$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );	$posts_columns = apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );	return $posts_columns;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_media_columns() {	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	$posts_columns['icon'] = '';	/* translators: column name */	$posts_columns['media'] = _x('File', 'column name');	$posts_columns['author'] = __('Author');	//$posts_columns['tags'] = _x('Tags', 'column name');	/* translators: column name */	$posts_columns['parent'] = _x('Attached to', 'column name');	$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	//$posts_columns['comments'] = __('Comments');	/* translators: column name */	$posts_columns['date'] = _x('Date', 'column name');	$posts_columns = apply_filters('manage_media_columns', $posts_columns);	return $posts_columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_pages_columns() {	return wp_manage_posts_columns();}/** * Get the column headers for a screen * * @since unknown * * @param string|object $screen The screen you want the headers for * @return array Containing the headers in the format id => UI String */function get_column_headers($screen) {	global $_wp_column_headers;	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	if ( is_string($screen) )		$screen = convert_to_screen($screen);	// Store in static to avoid running filters on each call	if ( isset($_wp_column_headers[$screen->id]) )		return $_wp_column_headers[$screen->id];	switch ($screen->base) {		case 'edit':			 $_wp_column_headers[$screen->id] = wp_manage_posts_columns( $screen );			 break;		case 'edit-comments':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'author' => __('Author'),				/* translators: column name */				'comment' => _x('Comment', 'column name'),				//'date' => __('Submitted'),				'response' => __('In Response To')			);			break;		case 'link-manager':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'url' => __('URL'),				'categories' => __('Categories'),				'rel' => __('Relationship'),				'visible' => __('Visible'),				'rating' => __('Rating')			);			break;		case 'upload':			$_wp_column_headers[$screen->id] = wp_manage_media_columns();			break;		case 'categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'edit-link-categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'links' => __('Links')			);			break;		case 'edit-tags':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'users':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'username' => __('Username'),				'name' => __('Name'),				'email' => __('E-mail'),				'role' => __('Role'),				'posts' => __('Posts')			);			break;		default :			$_wp_column_headers[$screen->id] = array();	}	$_wp_column_headers[$screen->id] = apply_filters('manage_' . $screen->id . '_columns', $_wp_column_headers[$screen->id]);	return $_wp_column_headers[$screen->id];}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen * @param unknown_type $id */function print_column_headers( $screen, $id = true ) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = get_column_headers( $screen );	$hidden = get_hidden_columns($screen);	$styles = array();	foreach ( $columns as $column_key => $column_display_name ) {		$class = ' class="manage-column';		$class .= " column-$column_key";		if ( 'cb' == $column_key )			$class .= ' check-column';		elseif ( in_array($column_key, array('posts', 'comments', 'links')) )			$class .= ' num';		$class .= '"';		$style = '';		if ( in_array($column_key, $hidden) )			$style = 'display:none;';		if ( isset($styles[$screen->id]) && isset($styles[$screen->id][$column_key]) )			$style .= ' ' . $styles[$screen>id][$column_key];		$style = ' style="' . $style . '"';?>	<th scope="col" <?php echo $id ? "id=\"$column_key\"" : ""; echo $class; echo $style; ?>><?php echo $column_display_name; ?></th><?php }}/** * Register column headers for a particular screen.  The header names will be listed in the Screen Options. * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param array $columns An array of columns with column IDs as the keys and translated column names as the values * @see get_column_headers(), print_column_headers(), get_hidden_columns() */function register_column_headers($screen, $columns) {	global $_wp_column_headers;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	$_wp_column_headers[$screen->id] = $columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function get_hidden_columns($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	return (array) get_user_option( 'manage' . $screen->id. 'columnshidden' );}/** * {@internal Missing Short Description}} * * Outputs the quick edit and bulk edit table rows for posts and pages * * @since 2.7 * * @param string $screen */function inline_edit_row( $screen ) {	global $current_user, $mode;	if ( is_string($screen) ) {		$screen = array('id' => 'edit-' . $screen, 'base' => 'edit', 'post_type' => $screen );		$screen = (object) $screen;	}	$post = get_default_post_to_edit( $screen->post_type );	$post_type_object = get_post_type_object( $screen->post_type );	$taxonomy_names = get_object_taxonomies( $screen->post_type );	$hierarchical_taxonomies = array();	$flat_taxonomies = array();	foreach ( $taxonomy_names as $taxonomy_name ) {		$taxonomy = get_taxonomy( $taxonomy_name);		if ( !$taxonomy->show_ui )			continue;		if ( $taxonomy->hierarchical )			$hierarchical_taxonomies[] = $taxonomy;		else			$flat_taxonomies[] = $taxonomy;	}	$columns = wp_manage_posts_columns($screen);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($screen) ) );	$col_count = count($columns) - count($hidden);	$m = ( isset($mode) && 'excerpt' == $mode ) ? 'excerpt' : 'list';	$can_publish = current_user_can($post_type_object->cap->publish_posts);	$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<?php	$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';	$bulk = 0;	while ( $bulk < 2 ) { ?>	<tr id="<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>" class="inline-edit-row inline-edit-row-<?php echo "$hclass inline-edit-$screen->post_type ";		echo $bulk ? "bulk-edit-row bulk-edit-row-$hclass bulk-edit-$screen->post_type" : "quick-edit-row quick-edit-row-$hclass inline-edit-$screen->post_type";	?>" style="display: none"><td colspan="<?php echo $col_count; ?>">	<fieldset class="inline-edit-col-left"><div class="inline-edit-col">		<h4><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></h4><?phpif ( post_type_supports( $screen->post_type, 'title' ) ) :	if ( $bulk ) : ?>		<div id="bulk-title-div">			<div id="bulk-titles"></div>		</div><?php else : // $bulk ?>		<label>			<span class="title"><?php _e( 'Title' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_title" class="ptitle" value="" /></span>		</label>		<label>			<span class="title"><?php _e( 'Slug' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_name" value="" /></span>		</label><?php endif; // $bulkendif; // post_type_supports title ?><?php if ( !$bulk ) : ?>		<label><span class="title"><?php _e( 'Date' ); ?></span></label>		<div class="inline-edit-date">			<?php touch_time(1, 1, 4, 1); ?>		</div>		<br class="clear" /><?php endif; // $bulk	if ( post_type_supports( $screen->post_type, 'author' ) ) :		$authors = get_editable_user_ids( $current_user->id, true, $screen->post_type ); // TODO: ROLE SYSTEM		$authors_dropdown = '';		if ( $authors && count( $authors ) > 1 ) :			$users_opt = array('include' => $authors, 'name' => 'post_author', 'class'=> 'authors', 'multi' => 1, 'echo' => 0);			if ( $bulk )				$users_opt['show_option_none'] = __('&mdash; No Change &mdash;');			$authors_dropdown  = '<label>';			$authors_dropdown .= '<span class="title">' . __( 'Author' ) . '</span>';			$authors_dropdown .= wp_dropdown_users( $users_opt );			$authors_dropdown .= '</label>';		endif; // authors?><?php if ( !$bulk ) echo $authors_dropdown;endif; // post_type_supports authorif ( !$bulk ) :?>		<div class="inline-edit-group">			<label class="alignleft">				<span class="title"><?php _e( 'Password' ); ?></span>				<span class="input-text-wrap"><input type="text" name="post_password" class="inline-edit-password-input" value="" /></span>			</label>			<em style="margin:5px 10px 0 0" class="alignleft">				<?php				/* translators: Between password field and private checkbox on post quick edit interface */				echo __( '&ndash;OR&ndash;' );				?>			</em>			<label class="alignleft inline-edit-private">				<input type="checkbox" name="keep_private" value="private" />				<span class="checkbox-title"><?php echo __('Private'); ?></span>			</label>		</div><?php endif; ?>	</div></fieldset><?php if ( count($hierarchical_taxonomies) && !$bulk ) : ?>	<fieldset class="inline-edit-col-center inline-edit-categories"><div class="inline-edit-col"><?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>		<span class="title inline-edit-categories-label"><?php echo esc_html($taxonomy->labels->name) ?>			<span class="catshow"><?php _e('[more]'); ?></span>			<span class="cathide" style="display:none;"><?php _e('[less]'); ?></span>		</span>		<input type="hidden" name="<?php echo ( $taxonomy->name == 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr($taxonomy->name) . '][]'; ?>" value="0" />		<ul class="cat-checklist <?php echo esc_attr($taxonomy->name)?>-checklist">			<?php wp_terms_checklist(null, array('taxonomy' => $taxonomy->name)) ?>		</ul><?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>	</div></fieldset><?php endif; // count($hierarchical_taxonomies) && !$bulk ?>	<fieldset class="inline-edit-col-right"><div class="inline-edit-col"><?php	if ( post_type_supports( $screen->post_type, 'author' ) && $bulk )		echo $authors_dropdown;?><?php if ( $post_type_object->hierarchical ) : ?>		<label>			<span class="title"><?php _e( 'Parent' ); ?></span><?php	$dropdown_args = array('post_type' => $post_type_object->name, 'selected' => $post->post_parent, 'name' => 'post_parent', 'show_option_none' => __('Main Page (no parent)'), 'option_none_value' => 0, 'sort_column'=> 'menu_order, post_title');	if ( $bulk )		$dropdown_args['show_option_no_change'] =  __('&mdash; No Change &mdash;');	$dropdown_args = apply_filters('quick_edit_dropdown_pages_args', $dropdown_args);	wp_dropdown_pages($dropdown_args);?>		</label><?php if ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :		if ( !$bulk ) : ?>		<label>			<span class="title"><?php _e( 'Order' ); ?></span>			<span class="input-text-wrap"><input type="text" name="menu_order" class="inline-edit-menu-order-input" value="<?php echo $post->menu_order ?>" /></span>		</label><?php	endif; // !$bulk ?>		<label>			<span class="title"><?php _e( 'Template' ); ?></span>			<select name="page_template"><?php	if ( $bulk ) : ?>				<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php	endif; // $bulk ?>				<option value="default"><?php _e( 'Default Template' ); ?></option>				<?php page_template_dropdown() ?>			</select>		</label><?php	endif; // post_type_supports page-attributesendif; // $post_type_object->hierarchical ?><?php if ( count($flat_taxonomies) && !$bulk ) : ?><?php foreach ( $flat_taxonomies as $taxonomy ) : ?>		<label class="inline-edit-tags">			<span class="title"><?php echo esc_html($taxonomy->labels->name) ?></span>			<textarea cols="22" rows="1" name="tax_input[<?php echo esc_attr($taxonomy->name)?>]" class="tax_input_<?php echo esc_attr($taxonomy->name)?>"></textarea>		</label><?php endforeach; //$flat_taxonomies as $taxonomy ?><?php endif; // count($flat_taxonomies) && !$bulk  ?><?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :	if ( $bulk ) : ?>		<div class="inline-edit-group">	<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>		<label class="alignleft">			<span class="title"><?php _e( 'Comments' ); ?></span>			<select name="comment_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>		<label class="alignright">			<span class="title"><?php _e( 'Pings' ); ?></span>			<select name="ping_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; ?>		</div><?php else : // $bulk ?>		<div class="inline-edit-group">		<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="comment_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Comments' ); ?></span>			</label>		<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="ping_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Pings' ); ?></span>			</label>		<?php endif; ?>		</div><?php endif; // $bulkendif; // post_type_supports comments or pings ?>		<div class="inline-edit-group">			<label class="inline-edit-status alignleft">				<span class="title"><?php _e( 'Status' ); ?></span>				<select name="_status"><?php if ( $bulk ) : ?>					<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php endif; // $bulk ?>				<?php if ( $can_publish ) : // Contributors only get "Unpublished" and "Pending Review" ?>					<option value="publish"><?php _e( 'Published' ); ?></option>					<option value="future"><?php _e( 'Scheduled' ); ?></option><?php if ( $bulk ) : ?>					<option value="private"><?php _e('Private') ?></option><?php endif; // $bulk ?>				<?php endif; ?>					<option value="pending"><?php _e( 'Pending Review' ); ?></option>					<option value="draft"><?php _e( 'Draft' ); ?></option>				</select>			</label><?php if ( 'post' == $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?><?php	if ( $bulk ) : ?>			<label class="alignright">				<span class="title"><?php _e( 'Sticky' ); ?></span>				<select name="sticky">					<option value="-1"><?php _e( '&mdash; No Change &mdash;' ); ?></option>					<option value="sticky"><?php _e( 'Sticky' ); ?></option>					<option value="unsticky"><?php _e( 'Not Sticky' ); ?></option>				</select>			</label><?php	else : // $bulk ?>			<label class="alignleft">				<input type="checkbox" name="sticky" value="sticky" />				<span class="checkbox-title"><?php _e( 'Make this post sticky' ); ?></span>			</label><?php	endif; // $bulk ?><?php endif; // !$is_page && $can_publish && current_user_can( 'edit_others_cap' ) ?>		</div>	</div></fieldset><?php	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( $bulk ? 'bulk_edit_custom_box' : 'quick_edit_custom_box', $column_name, $screen->post_type );	}?>	<p class="submit inline-edit-save">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="button-secondary cancel alignleft"><?php _e('Cancel'); ?></a>		<?php if ( ! $bulk ) {			wp_nonce_field( 'inlineeditnonce', '_inline_edit', false );			$update_text = __( 'Update' );			?>			<a accesskey="s" href="#inline-edit" title="<?php _e('Update'); ?>" class="button-primary save alignright"><?php echo esc_attr( $update_text ); ?></a>			<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<?php } else {			$update_text = __( 'Update' );		?>			<input accesskey="s" class="button-primary alignright" type="submit" name="bulk_edit" value="<?php echo esc_attr( $update_text ); ?>" />		<?php } ?>		<input type="hidden" name="post_view" value="<?php echo esc_attr($m); ?>" />		<input type="hidden" name="screen" value="<?php echo esc_attr($screen->id); ?>" />		<br class="clear" />	</p>	</td></tr><?php	$bulk++;	} ?>	</tbody></table></form><?php}// adds hidden fields with the data for use in the inline editor for posts and pages/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post */function get_inline_data($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( ! current_user_can($post_type_object->cap->edit_post, $post->ID) )		return;	$title = esc_attr( get_the_title( $post->ID ) );	echo '<div class="hidden" id="inline_' . $post->ID . '">	<div class="post_title">' . $title . '</div>	<div class="post_name">' . apply_filters('editable_slug', $post->post_name) . '</div>	<div class="post_author">' . $post->post_author . '</div>	<div class="comment_status">' . $post->comment_status . '</div>	<div class="ping_status">' . $post->ping_status . '</div>	<div class="_status">' . $post->post_status . '</div>	<div class="jj">' . mysql2date( 'd', $post->post_date, false ) . '</div>	<div class="mm">' . mysql2date( 'm', $post->post_date, false ) . '</div>	<div class="aa">' . mysql2date( 'Y', $post->post_date, false ) . '</div>	<div class="hh">' . mysql2date( 'H', $post->post_date, false ) . '</div>	<div class="mn">' . mysql2date( 'i', $post->post_date, false ) . '</div>	<div class="ss">' . mysql2date( 's', $post->post_date, false ) . '</div>	<div class="post_password">' . esc_html( $post->post_password ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="post_parent">' . $post->post_parent . '</div>';	if ( $post->post_type == 'page' )		echo '<div class="page_template">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="menu_order">' . $post->menu_order . '</div>';	$taxonomy_names = get_object_taxonomies( $post->post_type );	foreach ( $taxonomy_names as $taxonomy_name) {		$taxonomy = get_taxonomy( $taxonomy_name );		if ( $taxonomy->hierarchical && $taxonomy->show_ui )				echo '<div class="post_category" id="'.$taxonomy_name.'_'.$post->ID.'">' . implode( ',', wp_get_object_terms( $post->ID, $taxonomy_name, array('fields'=>'ids')) ) . '</div>';		elseif ( $taxonomy->show_ui )			echo '<div class="tags_input" id="'.$taxonomy_name.'_'.$post->ID.'">' . esc_html( str_replace( ',', ', ', get_terms_to_edit($post->ID, $taxonomy_name) ) ) . '</div>';	}	if ( !$post_type_object->hierarchical )		echo '<div class="sticky">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';	echo '</div>';}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $posts */function post_rows( $posts = array() ) {	global $wp_query, $post, $mode;	add_filter('the_title','esc_html');	// Create array of post IDs.	$post_ids = array();	if ( empty($posts) )		$posts = &$wp_query->posts;	foreach ( $posts as $a_post )		$post_ids[] = $a_post->ID;	$comment_pending_count = get_pending_comments_num($post_ids);	foreach ( $posts as $post ) {		if ( empty($comment_pending_count[$post->ID]) )			$comment_pending_count[$post->ID] = 0;		_post_row($post, $comment_pending_count[$post->ID], $mode);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $a_post * @param unknown_type $pending_comments * @param unknown_type $mode */function _post_row($a_post, $pending_comments, $mode) {	global $post, $current_user, $current_screen;	static $rowclass;	$global_post = $post;	$post = $a_post;	setup_postdata($post);	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );	$edit_link = get_edit_post_link( $post->ID );	$title = _draft_or_post_title();	$post_type_object = get_post_type_object($post->post_type);?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo trim( $rowclass . ' author-' . $post_owner . ' status-' . $post->post_status ); ?> iedit' valign="top"><?php	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns( $current_screen );	foreach ( $posts_columns as $column_name=>$column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {		case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $post->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;		case 'date':			if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {				$t_time = $h_time = __('Unpublished');				$time_diff = 0;			} else {				$t_time = get_the_time(__('Y/m/d g:i:s A'));				$m_time = $post->post_date;				$time = get_post_time('G', true, $post);				$time_diff = time() - $time;				if ( $time_diff > 0 && $time_diff < 24*60*60 )					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );				else					$h_time = mysql2date(__('Y/m/d'), $m_time);			}			echo '<td ' . $attributes . '>';			if ( 'excerpt' == $mode )				echo apply_filters('post_date_column_time', $t_time, $post, $column_name, $mode);			else				echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $post, $column_name, $mode) . '</abbr>';			echo '<br />';			if ( 'publish' == $post->post_status ) {				_e('Published');			} elseif ( 'future' == $post->post_status ) {				if ( $time_diff > 0 )					echo '<strong class="attention">' . __('Missed schedule') . '</strong>';				else					_e('Scheduled');			} else {				_e('Last Modified');			}			echo '</td>';		break;		case 'title':			$attributes = 'class="post-title column-title"' . $style;		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $title ?></a><?php } else { echo $title; }; _post_states($post); ?></strong>		<?php			if ( 'excerpt' == $mode )				the_excerpt();			$actions = array();			if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && 'trash' != $post->post_status ) {				$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '" title="' . esc_attr(__('Edit this item')) . '">' . __('Edit') . '</a>';				$actions['inline hide-if-no-js'] = '<a href="#" class="editinline" title="' . esc_attr(__('Edit this item inline')) . '">' . __('Quick&nbsp;Edit') . '</a>';			}			if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) {				if ( 'trash' == $post->post_status )					$actions['untrash'] = "<a title='" . esc_attr(__('Restore this item from the Trash')) . "' href='" . wp_nonce_url( admin_url( sprintf($post_type_object->_edit_link . '&amp;action=untrash', $post->ID) ), 'untrash-' . $post->post_type . '_' . $post->ID ) . "'>" . __('Restore') . "</a>";				elseif ( EMPTY_TRASH_DAYS )					$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this item to the Trash')) . "' href='" . get_delete_post_link($post->ID) . "'>" . __('Trash') . "</a>";				if ( 'trash' == $post->post_status || !EMPTY_TRASH_DAYS )					$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this item permanently')) . "' href='" . get_delete_post_link($post->ID, '', true) . "'>" . __('Delete Permanently') . "</a>";			}			if ( in_array($post->post_status, array('pending', 'draft')) ) {				if ( current_user_can($post_type_object->cap->edit_post, $post->ID) )					$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($post->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';			} elseif ( 'trash' != $post->post_status ) {				$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';			}			$actions = apply_filters('post_row_actions', $actions, $post);			$action_count = count($actions);			$i = 0;			echo '<div class="row-actions">';			foreach ( $actions as $action => $link ) {				++$i;				( $i == $action_count ) ? $sep = '' : $sep = ' | ';				echo "<span class='$action'>$link$sep</span>";			}			echo '</div>';			get_inline_data($post);		?>		</td>		<?php		break;		case 'categories':		?>		<td <?php echo $attributes ?>><?php			$categories = get_the_category();			if ( !empty( $categories ) ) {				$out = array();				foreach ( $categories as $c )					$out[] = "<a href='edit.php?category_name=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'category', 'display')) . "</a>";					echo join( ', ', $out );			} else {				_e('Uncategorized');			}		?></td>		<?php		break;		case 'tags':		?>		<td <?php echo $attributes ?>><?php			$tags = get_the_tags($post->ID);			if ( !empty( $tags ) ) {				$out = array();				foreach ( $tags as $c )					$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";				echo join( ', ', $out );			} else {				_e('No Tags');			}		?></td>		<?php		break;		case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php			$pending_phrase = sprintf( __('%s pending'), number_format( $pending_comments ) );			if ( $pending_comments )				echo '<strong>';				comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');				if ( $pending_comments )				echo '</strong>';		?>		</div></td>		<?php		break;		case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post->post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;		case 'control_view':		?>		<td><a href="<?php the_permalink(); ?>" rel="permalink" class="view"><?php _e('View'); ?></a></td>		<?php		break;		case 'control_edit':		?>		<td><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) ) { echo "<a href='$edit_link' class='edit'>" . __('Edit') . "</a>"; } ?></td>		<?php		break;		case 'control_delete':		?>		<td><?php if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) { echo "<a href='" . wp_nonce_url("post.php?action=delete&amp;post=$id", 'delete-post_' . $post->ID) . "' class='delete'>" . __('Delete') . "</a>"; } ?></td>		<?php		break;		default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_posts_custom_column', $column_name, $post->ID); ?></td>		<?php		break;	}}?>	</tr><?php	$post = $global_post;}/* * display one row if the page doesn't have any children * otherwise, display the row and its children in subsequent rows *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $level */function display_page_row( $page, $level = 0 ) {	global $post, $current_screen;	static $rowclass;	$post = $page;	setup_postdata($page);	if ( 0 == $level && (int)$page->post_parent > 0 ) {		//sent level 0 by accident, by default, or because we don't know the actual level		$find_main_page = (int)$page->post_parent;		while ( $find_main_page > 0 ) {			$parent = get_page($find_main_page);			if ( is_null($parent) )				break;			$level++;			$find_main_page = (int)$parent->post_parent;			if ( !isset($parent_name) )				$parent_name = $parent->post_title;		}	}	$page->post_title = esc_html( $page->post_title );	$pad = str_repeat( '&#8212; ', $level );	$id = (int) $page->ID;	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns(  $current_screen );	$title = _draft_or_post_title();	$post_type = $page->post_type;	$post_type_object = get_post_type_object($post_type);?><tr id="page-<?php echo $id; ?>" class="<?php echo $rowclass; ?> iedit"><?phpforeach ( $posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch ($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $page->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $page->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');			$time_diff = 0;		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $page->post_date;			$time = get_post_time('G', true);			$time_diff = time() - $time;			if ( $time_diff > 0 && $time_diff < 24*60*60 )				$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			else				$h_time = mysql2date(__('Y/m/d'), $m_time);		}		echo '<td ' . $attributes . '>';		echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $page, $column_name, '') . '</abbr>';		echo '<br />';		if ( 'publish' == $page->post_status ) {			_e('Published');		} elseif ( 'future' == $page->post_status ) {			if ( $time_diff > 0 )				echo '<strong class="attention">' . __('Missed schedule') . '</strong>';			else				_e('Scheduled');		} else {			_e('Last Modified');		}		echo '</td>';		break;	case 'title':		$attributes = 'class="post-title page-title column-title"' . $style;		$edit_link = get_edit_post_link( $page->ID );		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $pad; echo $title ?></a><?php } else { echo $pad; echo $title; }; _post_states($page); echo isset($parent_name) ? ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html($parent_name) : ''; ?></strong>		<?php		$actions = array();		if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) {			$actions['edit'] = '<a href="' . $edit_link . '" title="' . esc_attr(__('Edit this page')) . '">' . __('Edit') . '</a>';			$actions['inline'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		}		if ( current_user_can($post_type_object->cap->delete_post, $page->ID) ) {			if ( $post->post_status == 'trash' )				$actions['untrash'] = "<a title='" . esc_attr(__('Remove this page from the Trash')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=untrash&amp;post=$page->ID", 'untrash-' . $post->post_type . '_' . $page->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS )				$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this page to the Trash')) . "' href='" . get_delete_post_link($page->ID) . "'>" . __('Trash') . "</a>";			if ( $post->post_status == 'trash' || !EMPTY_TRASH_DAYS )				$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this page permanently')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=delete&amp;post=$page->ID", 'delete-' . $post->post_type . '_' . $page->ID) . "'>" . __('Delete Permanently') . "</a>";		}		if ( in_array($post->post_status, array('pending', 'draft')) ) {			if ( current_user_can($post_type_object->cap->edit_post, $page->ID) )				$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($page->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';		} elseif ( $post->post_status != 'trash' ) {			$actions['view'] = '<a href="' . get_permalink($page->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters('page_row_actions', $actions, $page);		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		get_inline_data($post);		echo '</td>';		break;	case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $page->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_pages_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?></tr><?php}/* * displays pages in hierarchical order with paging support *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $pages * @param unknown_type $pagenum * @param unknown_type $per_page * @return unknown */function page_rows($pages, $pagenum = 1, $per_page = 20) {	global $wpdb;	$level = 0;	if ( ! $pages ) {		$pages = get_pages( array('sort_column' => 'menu_order') );		if ( ! $pages )			return false;	}	/*	 * arrange pages into two parts: top level pages and children_pages	 * children_pages is two dimensional array, eg.	 * children_pages[10][] contains all sub-pages whose parent is 10.	 * It only takes O(N) to arrange this and it takes O(1) for subsequent lookup operations	 * If searching, ignore hierarchy and treat everything as top level	 */	if ( empty($_GET['s']) ) {		$top_level_pages = array();		$children_pages = array();		foreach ( $pages as $page ) {			// catch and repair bad pages			if ( $page->post_parent == $page->ID ) {				$page->post_parent = 0;				$wpdb->update($wpdb->posts, array('post_parent' => 0), array('ID' => $page->ID));				clean_page_cache( $page->ID );			}			if ( 0 == $page->post_parent )				$top_level_pages[] = $page;			else				$children_pages[ $page->post_parent ][] = $page;		}		$pages = &$top_level_pages;	}	$count = 0;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $pages as $page ) {		if ( $count >= $end )			break;		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		if ( isset($children_pages) )			_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	// if it is the last pagenum and there are orphaned pages, display them with paging as well	if ( isset($children_pages) && $count < $end ){		foreach( $children_pages as $orphans ){			foreach ( $orphans as $op ) {				if ( $count >= $end )					break;				if ( $count >= $start )					echo "\t" . display_page_row( $op, 0 );				$count++;			}		}	}}/** * Given a top level page ID, display the nested hierarchy of sub-pages * together with paging support * * @since unknown * * @param unknown_type $children_pages * @param unknown_type $count * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $pagenum * @param unknown_type $per_page */function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page ) {	if ( ! isset( $children_pages[$parent] ) )		return;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $children_pages[$parent] as $page ) {		if ( $count >= $end )			break;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $page->post_parent > 0 ) {			$my_parents = array();			$my_parent = $page->post_parent;			while ( $my_parent) {				$my_parent = get_post($my_parent);				$my_parents[] = $my_parent;				if ( !$my_parent->post_parent )					break;				$my_parent = $my_parent->post_parent;			}			$num_parents = count($my_parents);			while( $my_parent = array_pop($my_parents) ) {				echo "\t" . display_page_row( $my_parent, $level - $num_parents );				$num_parents--;			}		}		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	unset( $children_pages[$parent] ); //required in order to keep track of orphans}/** * Generate HTML for a single row on the users.php admin panel. * * @since 2.1.0 * * @param object $user_object * @param string $style Optional. Attributes added to the TR element.  Must be sanitized. * @param string $role Key for the $wp_roles array. * @param int $numposts Optional. Post count to display for this user.  Defaults to zero, as in, a new user has made zero posts. * @return string */function user_row( $user_object, $style = '', $role = '', $numposts = 0 ) {	global $wp_roles;	$current_user = wp_get_current_user();	if ( !( is_object( $user_object) && is_a( $user_object, 'WP_User' ) ) )		$user_object = new WP_User( (int) $user_object );	$user_object = sanitize_user_object($user_object, 'display');	$email = $user_object->user_email;	$url = $user_object->user_url;	$short_url = str_replace( 'http://', '', $url );	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	$checkbox = '';	// Check if the user for this row is editable	if ( current_user_can( 'list_users' ) ) {		// Set up the user editing link		// TODO: make profile/user-edit determination a separate function		if ($current_user->ID == $user_object->ID) {			$edit_link = 'profile.php';		} else {			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( esc_url( stripslashes( $_SERVER['REQUEST_URI'] ) ) ), "user-edit.php?user_id=$user_object->ID" ) );		}		$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";		// Set up the hover actions for this user		$actions = array();		if ( current_user_can('edit_user',  $user_object->ID) ) {			$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";			$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		} else {			$edit = "<strong>$user_object->user_login</strong><br />";		}		if ( !is_multisite() && $current_user->ID != $user_object->ID && current_user_can('delete_user', $user_object->ID) )			$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=delete&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Delete') . "</a>";		if ( is_multisite() && $current_user->ID != $user_object->ID && current_user_can('remove_user', $user_object->ID) )			$actions['remove'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=remove&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Remove') . "</a>";		$actions = apply_filters('user_row_actions', $actions, $user_object);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';		// Set up the checkbox (because the user is editable, otherwise its empty)		$checkbox = "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />";	} else {		$edit = '<strong>' . $user_object->user_login . '</strong>';	}	$role_name = isset($wp_roles->role_names[$role]) ? translate_user_role($wp_roles->role_names[$role] ) : __('None');	$r = "<tr id='user-$user_object->ID'$style>";	$columns = get_column_headers('users');	$hidden = get_hidden_columns('users');	$avatar = get_avatar( $user_object->ID, 32 );	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$r .= "<th scope='row' class='check-column'>$checkbox</th>";				break;			case 'username':				$r .= "<td $attributes>$avatar $edit</td>";				break;			case 'name':				$r .= "<td $attributes>$user_object->first_name $user_object->last_name</td>";				break;			case 'email':				$r .= "<td $attributes><a href='mailto:$email' title='" . sprintf( __('E-mail: %s' ), $email ) . "'>$email</a></td>";				break;			case 'role':				$r .= "<td $attributes>$role_name</td>";				break;			case 'posts':				$attributes = 'class="posts column-posts num"' . $style;				$r .= "<td $attributes>";				if ( $numposts > 0 ) {					$r .= "<a href='edit.php?author=$user_object->ID' title='" . __( 'View posts by this author' ) . "' class='edit'>";					$r .= $numposts;					$r .= '</a>';				} else {					$r .= 0;				}				$r .= "</td>";				break;			default:				$r .= "<td $attributes>";				$r .= apply_filters('manage_users_custom_column', '', $column_name, $user_object->ID);				$r .= "</td>";		}	}	$r .= '</tr>';	return $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param string $status Comment status (approved, spam, trash, etc) * @param string $s Term to search for * @param int $start Offset to start at for pagination * @param int $num Maximum number of comments to return * @param int $post Post ID or 0 to return all comments * @param string $type Comment type (comment, trackback, pingback, etc) * @return array [0] contains the comments and [1] contains the total number of comments that match (ignoring $start and $num) */function _wp_get_comment_list( $status = '', $s = false, $start, $num, $post = 0, $type = '' ) {	global $wpdb;	$start = abs( (int) $start );	$num = (int) $num;	$post = (int) $post;	$count = wp_count_comments();	$index = '';	if ( 'moderated' == $status ) {		$approved = "c.comment_approved = '0'";		$total = $count->moderated;	} elseif ( 'approved' == $status ) {		$approved = "c.comment_approved = '1'";		$total = $count->approved;	} elseif ( 'spam' == $status ) {		$approved = "c.comment_approved = 'spam'";		$total = $count->spam;	} elseif ( 'trash' == $status ) {		$approved = "c.comment_approved = 'trash'";		$total = $count->trash;	} else {		$approved = "( c.comment_approved = '0' OR c.comment_approved = '1' )";		$total = $count->moderated + $count->approved;		$index = 'USE INDEX (c.comment_date_gmt)';	}	if ( $post ) {		$total = '';		$post = " AND c.comment_post_ID = '$post'";	} else {		$post = '';	}	$orderby = "ORDER BY c.comment_date_gmt DESC LIMIT $start, $num";	if ( 'comment' == $type )		$typesql = "AND c.comment_type = ''";	elseif ( 'pings' == $type )		$typesql = "AND ( c.comment_type = 'pingback' OR c.comment_type = 'trackback' )";	elseif ( 'all' == $type )		$typesql = '';	elseif ( !empty($type) )		$typesql = $wpdb->prepare("AND c.comment_type = %s", $type);	else		$typesql = '';	if ( !empty($type) )		$total = '';	$query = "FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ";	if ( $s ) {		$total = '';		$s = $wpdb->escape($s);		$query .= "AND			(c.comment_author LIKE '%$s%' OR			c.comment_author_email LIKE '%$s%' OR			c.comment_author_url LIKE ('%$s%') OR			c.comment_author_IP LIKE ('%$s%') OR			c.comment_content LIKE ('%$s%') ) AND			$approved			$typesql";	} else {		$query .= "AND $approved $post $typesql";	}	$comments = $wpdb->get_results("SELECT * $query $orderby");	if ( '' === $total )		$total = $wpdb->get_var("SELECT COUNT(c.comment_ID) $query");	update_comment_cache($comments);	return array($comments, $total);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $comment_id * @param unknown_type $mode * @param unknown_type $comment_status * @param unknown_type $checkbox */function _wp_comment_row( $comment_id, $mode, $comment_status, $checkbox = true, $from_ajax = false ) {	global $comment, $post, $_comment_pending_count;	$comment = get_comment( $comment_id );	$post = get_post($comment->comment_post_ID);	$the_comment_status = wp_get_comment_status($comment->comment_ID);	$post_type_object = get_post_type_object($post->post_type);	$user_can = current_user_can($post_type_object->cap->edit_post, $post->ID);	$comment_url = esc_url(get_comment_link($comment->comment_ID));	$author_url = get_comment_author_url();	if ( 'http://' == $author_url )		$author_url = '';	$author_url_display = preg_replace('|http://(www\.)?|i', '', $author_url);	if ( strlen($author_url_display) > 50 )		$author_url_display = substr($author_url_display, 0, 49) . '...';	$ptime = date('G', strtotime( $comment->comment_date ) );	if ( ( abs(time() - $ptime) ) < 86400 )		$ptime = sprintf( __('%s ago'), human_time_diff( $ptime ) );	else		$ptime = mysql2date(__('Y/m/d \a\t g:i A'), $comment->comment_date );	if ( $user_can ) {		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$unspam_url = esc_url( "comment.php?action=unspamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$untrash_url = esc_url( "comment.php?action=untrashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );	}	echo "<tr id='comment-$comment->comment_ID' class='$the_comment_status'>";	$columns = get_column_headers('edit-comments');	$hidden = get_hidden_columns('edit-comments');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				if ( !$checkbox ) break;				echo '<th scope="row" class="check-column">';				if ( $user_can ) echo "<input type='checkbox' name='delete_comments[]' value='$comment->comment_ID' />";				echo '</th>';				break;			case 'comment':				echo "<td $attributes>";				echo '<div id="submitted-on">';				/* translators: 2: comment date, 3: comment time */				printf( __( '<a href="%1$s">%2$s at %3$s</a>' ), $comment_url,					/* translators: comment date format. See http://php.net/date */ get_comment_date( __('Y/m/d') ),					/* translators: comment time format. See http://php.net/date */ get_comment_date( get_option( 'time_format' ) ) );				if ( $comment->comment_parent ) {					$parent = get_comment( $comment->comment_parent );					$parent_link = esc_url( get_comment_link( $comment->comment_parent ) );					$name = apply_filters( 'get_comment_author', $parent->comment_author ); // there's no API function for this					printf( ' | '.__( 'In reply to <a href="%1$s">%2$s</a>.' ), $parent_link, $name );				}				echo '</div>';				comment_text();				if ( $user_can ) { ?>				<div id="inline-<?php echo $comment->comment_ID; ?>" class="hidden">				<textarea class="comment" rows="1" cols="1"><?php echo htmlspecialchars( apply_filters('comment_edit_pre', $comment->comment_content), ENT_QUOTES ); ?></textarea>				<div class="author-email"><?php echo esc_attr( $comment->comment_author_email ); ?></div>				<div class="author"><?php echo esc_attr( $comment->comment_author ); ?></div>				<div class="author-url"><?php echo esc_attr( $comment->comment_author_url ); ?></div>				<div class="comment_status"><?php echo $comment->comment_approved; ?></div>				</div>				<?php				}				if ( $user_can ) {					// preorder it: Approve | Reply | Quick Edit | Edit | Spam | Trash					$actions = array(						'approve' => '', 'unapprove' => '',						'reply' => '',						'quickedit' => '',						'edit' => '',						'spam' => '', 'unspam' => '',						'trash' => '', 'untrash' => '', 'delete' => ''					);					if ( $comment_status && 'all' != $comment_status ) { // not looking at all comments						if ( 'approved' == $the_comment_status )							$actions['unapprove'] = "<a href='$unapprove_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=unapproved vim-u vim-destructive' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';						else if ( 'unapproved' == $the_comment_status )							$actions['approve'] = "<a href='$approve_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=approved vim-a vim-destructive' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';					} else {						$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';						$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';					}					if ( 'spam' != $the_comment_status && 'trash' != $the_comment_status ) {						$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . esc_attr__( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */ _x( 'Spam', 'verb' ) . '</a>';					} elseif ( 'spam' == $the_comment_status ) {						$actions['unspam'] = "<a href='$unspam_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:unspam=1 vim-z vim-destructive'>" . _x( 'Not Spam', 'comment' ) . '</a>';					} elseif ( 'trash' == $the_comment_status ) {						$actions['untrash'] = "<a href='$untrash_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:untrash=1 vim-z vim-destructive'>" . __( 'Restore' ) . '</a>';					}					if ( 'spam' == $the_comment_status || 'trash' == $the_comment_status || !EMPTY_TRASH_DAYS ) {						$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::delete=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';					} else {						$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . esc_attr__( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';					}					if ( 'trash' != $the_comment_status ) {						$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . esc_attr__('Edit comment') . "'>". __('Edit') . '</a>';						$actions['quickedit'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\',\'edit\');return false;" class="vim-q" title="'.esc_attr__('Quick Edit').'" href="#">' . __('Quick&nbsp;Edit') . '</a>';						if ( 'spam' != $the_comment_status )							$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\');return false;" class="vim-r" title="'.esc_attr__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';					}					$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';						// Reply and quickedit need a hide-if-no-js span when not added with ajax						if ( ('reply' == $action || 'quickedit' == $action) && ! $from_ajax )							$action .= ' hide-if-no-js';						elseif ( ($action == 'untrash' && $the_comment_status == 'trash') || ($action == 'unspam' && $the_comment_status == 'spam') ) {							if ('1' == get_comment_meta($comment_id, '_wp_trash_meta_status', true))								$action .= ' approve';							else								$action .= ' unapprove';						}						echo "<span class='$action'>$sep$link</span>";					}					echo '</div>';				}				echo '</td>';				break;			case 'author':				echo "<td $attributes><strong>"; comment_author(); echo '</strong><br />';				if ( !empty($author_url) )					echo "<a title='$author_url' href='$author_url'>$author_url_display</a><br />";				if ( $user_can ) {					if ( !empty($comment->comment_author_email) ) {						comment_author_email_link();						echo '<br />';					}					echo '<a href="edit-comments.php?s=';					comment_author_IP();					echo '&amp;mode=detail';					if ( 'spam' == $comment_status )						echo '&amp;comment_status=spam';					echo '">';					comment_author_IP();					echo '</a>';				} //current_user_can				echo '</td>';				break;			case 'date':				echo "<td $attributes>" . get_comment_date(__('Y/m/d \a\t g:ia')) . '</td>';				break;			case 'response':				if ( 'single' !== $mode ) {					if ( isset( $_comment_pending_count[$post->ID] ) ) {						$pending_comments = $_comment_pending_count[$post->ID];					} else {						$_comment_pending_count_temp = get_pending_comments_num( array( $post->ID ) );						$pending_comments = $_comment_pending_count[$post->ID] = $_comment_pending_count_temp[$post->ID];					}					if ( $user_can ) {						$post_link = "<a href='" . get_edit_post_link($post->ID) . "'>";						$post_link .= get_the_title($post->ID) . '</a>';					} else {						$post_link = get_the_title($post->ID);					}					echo "<td $attributes>\n";					echo '<div class="response-links"><span class="post-com-count-wrapper">';					echo $post_link . '<br />';					$pending_phrase = esc_attr(sprintf( __('%s pending'), number_format( $pending_comments ) ));					if ( $pending_comments )						echo '<strong>';					comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');					if ( $pending_comments )						echo '</strong>';					echo '</span> ';					echo "<a href='" . get_permalink( $post->ID ) . "'>#</a>";					echo '</div>';					if ( 'attachment' == $post->post_type && ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) )						echo $thumb;					echo '</td>';				}				break;			default:				echo "<td $attributes>\n";				do_action( 'manage_comments_custom_column', $column_name, $comment->comment_ID );				echo "</td>\n";				break;		}	}	echo "</tr>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $position * @param unknown_type $checkbox * @param unknown_type $mode */function wp_comment_reply($position = '1', $checkbox = false, $mode = 'single', $table_row = true) {	global $current_user;	// allow plugin to replace the popup content	$content = apply_filters( 'wp_comment_reply', '', array('position' => $position, 'checkbox' => $checkbox, 'mode' => $mode) );	if ( ! empty($content) ) {		echo $content;		return;	}	$columns = get_column_headers('edit-comments');	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns('edit-comments') ) );	$col_count = count($columns) - count($hidden);?><form method="get" action=""><?php if ( $table_row ) : ?><table style="display:none;"><tbody id="com-reply"><tr id="replyrow" style="display:none;"><td colspan="<?php echo $col_count; ?>"><?php else : ?><div id="com-reply" style="display:none;"><div id="replyrow" style="display:none;"><?php endif; ?>	<div id="replyhead" style="display:none;"><?php _e('Reply to Comment'); ?></div>	<div id="edithead" style="display:none;">		<div class="inside">		<label for="author"><?php _e('Name') ?></label>		<input type="text" name="newcomment_author" size="50" value="" tabindex="101" id="author" />		</div>		<div class="inside">		<label for="author-email"><?php _e('E-mail') ?></label>		<input type="text" name="newcomment_author_email" size="50" value="" tabindex="102" id="author-email" />		</div>		<div class="inside">		<label for="author-url"><?php _e('URL') ?></label>		<input type="text" id="author-url" name="newcomment_author_url" size="103" value="" tabindex="103" />		</div>		<div style="clear:both;"></div>	</div>	<div id="replycontainer"><textarea rows="8" cols="40" name="replycontent" tabindex="104" id="replycontent"></textarea></div>	<p id="replysubmit" class="submit">	<a href="#comments-form" class="cancel button-secondary alignleft" tabindex="106"><?php _e('Cancel'); ?></a>	<a href="#comments-form" class="save button-primary alignright" tabindex="104">	<span id="savebtn" style="display:none;"><?php _e('Update Comment'); ?></span>	<span id="replybtn" style="display:none;"><?php _e('Submit Reply'); ?></span></a>	<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />	<span class="error" style="display:none;"></span>	<br class="clear" />	</p>	<input type="hidden" name="user_ID" id="user_ID" value="<?php echo $current_user->ID; ?>" />	<input type="hidden" name="action" id="action" value="" />	<input type="hidden" name="comment_ID" id="comment_ID" value="" />	<input type="hidden" name="comment_post_ID" id="comment_post_ID" value="" />	<input type="hidden" name="status" id="status" value="" />	<input type="hidden" name="position" id="position" value="<?php echo $position; ?>" />	<input type="hidden" name="checkbox" id="checkbox" value="<?php echo $checkbox ? 1 : 0; ?>" />	<input type="hidden" name="mode" id="mode" value="<?php echo esc_attr($mode); ?>" />	<?php wp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false ); ?>	<?php wp_comment_form_unfiltered_html_nonce(); ?><?php if ( $table_row ) : ?></td></tr></tbody></table><?php else : ?></div></div><?php endif; ?></form><?php}/** * Output 'undo move to trash' text for comments * * @since 2.9.0 */function wp_comment_trashnotice() {?><div class="hidden" id="trash-undo-holder">	<div class="trash-undo-inside"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class="undo untrash"><a href="#"><?php _e('Undo'); ?></a></span></div></div><div class="hidden" id="spam-undo-holder">	<div class="spam-undo-inside"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class="undo unspam"><a href="#"><?php _e('Undo'); ?></a></span></div></div><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta */function list_meta( $meta ) {	// Exit if no meta	if ( ! $meta ) {		echo '<table id="list-table" style="display: none;">	<thead>	<tr>		<th class="left">' . __( 'Name' ) . '</th>		<th>' . __( 'Value' ) . '</th>	</tr>	</thead>	<tbody id="the-list" class="list:meta">	<tr><td></td></tr>	</tbody></table>'; //TBODY needed for list-manipulation JS		return;	}	$count = 0;?><table id="list-table">	<thead>	<tr>		<th class="left"><?php _e( 'Name' ) ?></th>		<th><?php _e( 'Value' ) ?></th>	</tr>	</thead>	<tbody id='the-list' class='list:meta'><?php	foreach ( $meta as $entry )		echo _list_meta_row( $entry, $count );?>	</tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $entry * @param unknown_type $count * @return unknown */function _list_meta_row( $entry, &$count ) {	static $update_nonce = false;	if ( !$update_nonce )		$update_nonce = wp_create_nonce( 'add-meta' );	$r = '';	++ $count;	if ( $count % 2 )		$style = 'alternate';	else		$style = '';	if ('_' == $entry['meta_key'] { 0 } )		$style .= ' hidden';	if ( is_serialized( $entry['meta_value'] ) ) {		if ( is_serialized_string( $entry['meta_value'] ) ) {			// this is a serialized string, so we should display it			$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );		} else {			// this is a serialized array/object so we should NOT display it			--$count;			return;		}	}	$entry['meta_key'] = esc_attr($entry['meta_key']);	$entry['meta_value'] = htmlspecialchars($entry['meta_value']); // using a <textarea />	$entry['meta_id'] = (int) $entry['meta_id'];	$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );	$r .= "\n\t<tr id='meta-{$entry['meta_id']}' class='$style'>";	$r .= "\n\t\t<td class='left'><label class='screen-reader-text' for='meta[{$entry['meta_id']}][key]'>" . __( 'Key' ) . "</label><input name='meta[{$entry['meta_id']}][key]' id='meta[{$entry['meta_id']}][key]' tabindex='6' type='text' size='20' value='{$entry['meta_key']}' />";	$r .= "\n\t\t<div class='submit'><input name='deletemeta[{$entry['meta_id']}]' type='submit' ";	$r .= "class='delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce deletemeta' tabindex='6' value='". esc_attr__( 'Delete' ) ."' />";	$r .= "\n\t\t<input name='updatemeta' type='submit' tabindex='6' value='". esc_attr__( 'Update' ) ."' class='add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce updatemeta' /></div>";	$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );	$r .= "</td>";	$r .= "\n\t\t<td><label class='screen-reader-text' for='meta[{$entry['meta_id']}][value]'>" . __( 'Value' ) . "</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta[{$entry['meta_id']}][value]' tabindex='6' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\n\t</tr>";	return $r;}/** * {@internal Missing Short Description}} * * @since unknown */function meta_form() {	global $wpdb;	$limit = (int) apply_filters( 'postmeta_form_limit', 30 );	$keys = $wpdb->get_col( "		SELECT meta_key		FROM $wpdb->postmeta		GROUP BY meta_key		HAVING meta_key NOT LIKE '\_%'		ORDER BY meta_key		LIMIT $limit" );	if ( $keys )		natcasesort($keys);?><p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p><table id="newmeta"><thead><tr><th class="left"><label for="metakeyselect"><?php _e( 'Name' ) ?></label></th><th><label for="metavalue"><?php _e( 'Value' ) ?></label></th></tr></thead><tbody><tr><td id="newmetaleft" class="left"><?php if ( $keys ) { ?><select id="metakeyselect" name="metakeyselect" tabindex="7"><option value="#NONE#"><?php _e( '&mdash; Select &mdash;' ); ?></option><?php	foreach ( $keys as $key ) {		echo "\n<option value='" . esc_attr($key) . "'>" . esc_html($key) . "</option>";	}?></select><input class="hide-if-js" type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><a href="#postcustomstuff" class="hide-if-no-js" onclick="jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;"><span id="enternew"><?php _e('Enter new'); ?></span><span id="cancelnew" class="hidden"><?php _e('Cancel'); ?></span></a><?php } else { ?><input type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><?php } ?></td><td><textarea id="metavalue" name="metavalue" rows="2" cols="25" tabindex="8"></textarea></td></tr><tr><td colspan="2" class="submit"><input type="submit" id="addmetasub" name="addmeta" class="add:the-list:newmeta" tabindex="9" value="<?php esc_attr_e( 'Add Custom Field' ) ?>" /><?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?></td></tr></tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $edit * @param unknown_type $for_post * @param unknown_type $tab_index * @param unknown_type $multi */function touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {	global $wp_locale, $post, $comment;	if ( $for_post )		$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	// echo '<label for="timestamp" style="display: block;"><input type="checkbox" class="checkbox" name="edit_date" value="1" id="timestamp"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';	$time_adj = current_time('timestamp');	$post_date = ($for_post) ? $post->post_date : $comment->comment_date;	$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );	$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );	$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );	$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );	$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );	$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );	$cur_jj = gmdate( 'd', $time_adj );	$cur_mm = gmdate( 'm', $time_adj );	$cur_aa = gmdate( 'Y', $time_adj );	$cur_hh = gmdate( 'H', $time_adj );	$cur_mn = gmdate( 'i', $time_adj );	$month = "<select " . ( $multi ? '' : 'id="mm" ' ) . "name=\"mm\"$tab_index_attribute>\n";	for ( $i = 1; $i < 13; $i = $i +1 ) {		$month .= "\t\t\t" . '<option value="' . zeroise($i, 2) . '"';		if ( $i == $mm )			$month .= ' selected="selected"';		$month .= '>' . $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) ) . "</option>\n";	}	$month .= '</select>';	$day = '<input type="text" ' . ( $multi ? '' : 'id="jj" ' ) . 'name="jj" value="' . $jj . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$year = '<input type="text" ' . ( $multi ? '' : 'id="aa" ' ) . 'name="aa" value="' . $aa . '" size="4" maxlength="4"' . $tab_index_attribute . ' autocomplete="off" />';	$hour = '<input type="text" ' . ( $multi ? '' : 'id="hh" ' ) . 'name="hh" value="' . $hh . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$minute = '<input type="text" ' . ( $multi ? '' : 'id="mn" ' ) . 'name="mn" value="' . $mn . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	echo '<div class="timestamp-wrap">';	/* translators: 1: month input, 2: day input, 3: year input, 4: hour input, 5: minute input */	printf(__('%1$s%2$s, %3$s @ %4$s : %5$s'), $month, $day, $year, $hour, $minute);	echo '</div><input type="hidden" id="ss" name="ss" value="' . $ss . '" />';	if ( $multi ) return;	echo "\n\n";	foreach ( array('mm', 'jj', 'aa', 'hh', 'mn') as $timeunit ) {		echo '<input type="hidden" id="hidden_' . $timeunit . '" name="hidden_' . $timeunit . '" value="' . $$timeunit . '" />' . "\n";		$cur_timeunit = 'cur_' . $timeunit;		echo '<input type="hidden" id="'. $cur_timeunit . '" name="'. $cur_timeunit . '" value="' . $$cur_timeunit . '" />' . "\n";	}?><p><a href="#edit_timestamp" class="save-timestamp hide-if-no-js button"><?php _e('OK'); ?></a><a href="#edit_timestamp" class="cancel-timestamp hide-if-no-js"><?php _e('Cancel'); ?></a></p><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default */function page_template_dropdown( $default = '' ) {	$templates = get_page_templates();	ksort( $templates );	foreach (array_keys( $templates ) as $template )		: if ( $default == $templates[$template] )			$selected = " selected='selected'";		else			$selected = '';	echo "\n\t<option value='".$templates[$template]."' $selected>$template</option>";	endforeach;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $level * @return unknown */function parent_dropdown( $default = 0, $parent = 0, $level = 0 ) {	global $wpdb, $post_ID;	$items = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order", $parent) );	if ( $items ) {		foreach ( $items as $item ) {			// A page cannot be its own parent.			if (!empty ( $post_ID ) ) {				if ( $item->ID == $post_ID ) {					continue;				}			}			$pad = str_repeat( '&nbsp;', $level * 3 );			if ( $item->ID == $default)				$current = ' selected="selected"';			else				$current = '';			echo "\n\t<option class='level-$level' value='$item->ID'$current>$pad " . esc_html($item->post_title) . "</option>";			parent_dropdown( $default, $item->ID, $level +1 );		}	} else {		return false;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function the_attachment_links( $id = false ) {	$id = (int) $id;	$post = & get_post( $id );	if ( $post->post_type != 'attachment' )		return false;	$icon = wp_get_attachment_image( $post->ID, 'thumbnail', true );	$attachment_data = wp_get_attachment_metadata( $id );	$thumb = isset( $attachment_data['thumb'] );?><form id="the-attachment-links"><table>	<col />	<col class="widefat" />	<tr>		<th scope="row"><?php _e( 'URL' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><?php echo wp_get_attachment_url(); ?></textarea></td>	</tr><?php if ( $icon ) : ?>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to file' ) : _e( 'Image linked to file' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>"><?php echo $icon ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to page' ) : _e( 'Image linked to page' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID; ?>"><?php echo $icon ?></a></textarea></td>	</tr><?php else : ?>	<tr>		<th scope="row"><?php _e( 'Link to file' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>" class="attachmentlink"><?php echo basename( wp_get_attachment_url() ); ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php _e( 'Link to page' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID ?>"><?php the_title(); ?></a></textarea></td>	</tr><?php endif; ?></table></form><?php}/** * Print out <option> html elements for role selectors based on $wp_roles * * @package WordPress * @subpackage Administration * @since 2.1 * * @uses $wp_roles * @param string $default slug for the role that should be already selected */function wp_dropdown_roles( $selected = false ) {	$p = '';	$r = '';	$editable_roles = get_editable_roles();	foreach ( $editable_roles as $role => $details ) {		$name = translate_user_role($details['name'] );		if ( $selected == $role ) // Make default first in list			$p = "\n\t<option selected='selected' value='" . esc_attr($role) . "'>$name</option>";		else			$r .= "\n\t<option value='" . esc_attr($role) . "'>$name</option>";	}	echo $p . $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $size * @return unknown */function wp_convert_hr_to_bytes( $size ) {	$size = strtolower($size);	$bytes = (int) $size;	if ( strpos($size, 'k') !== false )		$bytes = intval($size) * 1024;	elseif ( strpos($size, 'm') !== false )		$bytes = intval($size) * 1024 * 1024;	elseif ( strpos($size, 'g') !== false )		$bytes = intval($size) * 1024 * 1024 * 1024;	return $bytes;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $bytes * @return unknown */function wp_convert_bytes_to_hr( $bytes ) {	$units = array( 0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB' );	$log = log( $bytes, 1024 );	$power = (int) $log;	$size = pow(1024, $log - $power);	return $size . $units[$power];}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_max_upload_size() {	$u_bytes = wp_convert_hr_to_bytes( ini_get( 'upload_max_filesize' ) );	$p_bytes = wp_convert_hr_to_bytes( ini_get( 'post_max_size' ) );	$bytes = apply_filters( 'upload_size_limit', min($u_bytes, $p_bytes), $u_bytes, $p_bytes );	return $bytes;}/** * Outputs the form used by the importers to accept the data to be imported * * @since 2.0 * * @param string $action The action attribute for the form. */function wp_import_upload_form( $action ) {	$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );	$size = wp_convert_bytes_to_hr( $bytes );	$upload_dir = wp_upload_dir();	if ( ! empty( $upload_dir['error'] ) ) :		?><div class="error"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>		<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php	else :?><form enctype="multipart/form-data" id="import-upload-form" method="post" action="<?php echo esc_attr(wp_nonce_url($action, 'import-upload')); ?>"><p><label for="upload"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)<input type="file" id="upload" name="import" size="25" /><input type="hidden" name="action" value="save" /><input type="hidden" name="max_file_size" value="<?php echo $bytes; ?>" /></p><p class="submit"><input type="submit" class="button" value="<?php esc_attr_e( 'Upload file and import' ); ?>" /></p></form><?php	endif;}/** * Add a meta box to an edit form. * * @since 2.5.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $title Title of the meta box. * @param string $callback Function that fills the box with the desired content. The function should echo its output. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). * @param string $priority The priority within the context where the boxes should show ('high', 'low'). */function add_meta_box($id, $title, $callback, $page, $context = 'advanced', $priority = 'default', $callback_args=null) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {	foreach ( array('high', 'core', 'default', 'low') as $a_priority ) {		if ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )			continue;		// If a core box was previously added or removed by a plugin, don't add.		if ( 'core' == $priority ) {			// If core box previously deleted, don't add			if ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )				return;			// If box was added with default priority, give it core priority to maintain sort order			if ( 'default' == $a_priority ) {				$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];				unset($wp_meta_boxes[$page][$a_context]['default'][$id]);			}			return;		}		// If no priority given and id already present, use existing priority		if ( empty($priority) ) {			$priority = $a_priority;		// else if we're adding to the sorted priortiy, we don't know the title or callback. Glab them from the previously added context/priority.		} elseif ( 'sorted' == $priority ) {			$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];			$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];			$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];		}		// An id can be in only one priority and one context		if ( $priority != $a_priority || $context != $a_context )			unset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);	}	}	if ( empty($priority) )		$priority = 'low';	if ( !isset($wp_meta_boxes[$page][$context][$priority]) )		$wp_meta_boxes[$page][$context][$priority] = array();	$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);}/** * Meta-Box template function * * @since 2.5.0 * * @param string $page page identifier, also known as screen identifier * @param string $context box context * @param mixed $object gets passed to the box callback function as first parameter * @return int number of meta_boxes */function do_meta_boxes($page, $context, $object) {	global $wp_meta_boxes;	static $already_sorted = false;	$hidden = get_hidden_meta_boxes($page);	printf('<div id="%s-sortables" class="meta-box-sortables">', htmlspecialchars($context));	$i = 0;	do {		// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose		if ( !$already_sorted && $sorted = get_user_option( "meta-box-order_$page" ) ) {			foreach ( $sorted as $box_context => $ids )				foreach ( explode(',', $ids) as $id )					if ( $id )						add_meta_box( $id, null, null, $page, $box_context, 'sorted' );		}		$already_sorted = true;		if ( !isset($wp_meta_boxes) || !isset($wp_meta_boxes[$page]) || !isset($wp_meta_boxes[$page][$context]) )			break;		foreach ( array('high', 'sorted', 'core', 'default', 'low') as $priority ) {			if ( isset($wp_meta_boxes[$page][$context][$priority]) ) {				foreach ( (array) $wp_meta_boxes[$page][$context][$priority] as $box ) {					if ( false == $box || ! $box['title'] )						continue;					$i++;					$style = '';					$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';					echo '<div id="' . $box['id'] . '" class="postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '" ' . '>' . "\n";					echo '<div class="handlediv" title="' . __('Click to toggle') . '"><br /></div>';					echo "<h3 class='hndle'><span>{$box['title']}</span></h3>\n";					echo '<div class="inside">' . "\n";					call_user_func($box['callback'], $object, $box);					echo "</div>\n";					echo "</div>\n";				}			}		}	} while(0);	echo "</div>";	return $i;}/** * Remove a meta box from an edit form. * * @since 2.6.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). */function remove_meta_box($id, $page, $context) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array('high', 'core', 'default', 'low') as $priority )		$wp_meta_boxes[$page][$context][$priority][$id] = false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function meta_box_prefs($screen) {	global $wp_meta_boxes;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( empty($wp_meta_boxes[$screen->id]) )		return;	$hidden = get_hidden_meta_boxes($screen);	foreach ( array_keys($wp_meta_boxes[$screen->id]) as $context ) {		foreach ( array_keys($wp_meta_boxes[$screen->id][$context]) as $priority ) {			foreach ( $wp_meta_boxes[$screen->id][$context][$priority] as $box ) {				if ( false == $box || ! $box['title'] )					continue;				// Submit box cannot be hidden				if ( 'submitdiv' == $box['id'] || 'linksubmitdiv' == $box['id'] )					continue;				$box_id = $box['id'];				echo '<label for="' . $box_id . '-hide">';				echo '<input class="hide-postbox-tog" name="' . $box_id . '-hide" type="checkbox" id="' . $box_id . '-hide" value="' . $box_id . '"' . (! in_array($box_id, $hidden) ? ' checked="checked"' : '') . ' />';				echo "{$box['title']}</label>\n";			}		}	}}/** * Get Hidden Meta Boxes * * @since 2.7 * * @param string|object $screen Screen identifier * @return array Hidden Meta Boxes */function get_hidden_meta_boxes( $screen ) {	if ( is_string( $screen ) )		$screen = convert_to_screen( $screen );	$hidden = get_user_option( "metaboxhidden_{$screen->id}" );	// Hide slug boxes by default	if ( !is_array( $hidden ) )		$hidden = array('slugdiv');	return $hidden;}/** * Add a new section to a settings page. * * Part of the Settings API. Use this to define new settings sections for an admin page. * Show settings sections in your admin page callback function with do_settings_sections(). * Add settings fields to your section with add_settings_field() * * The $callback argument should be the name of a function that echoes out any * content you want to show at the top of the settings section before the actual * fields. It can output nothing if you want. * * @since 2.7.0 * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * * @param string $id Slug-name to identify the section. Used in the 'id' attribute of tags. * @param string $title Formatted title of the section. Shown as the heading for the section. * @param string $callback Function that echos out any content at the top of the section (between heading and fields). * @param string $page The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page(); */function add_settings_section($id, $title, $callback, $page) {	global $wp_settings_sections;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_sections) )		$wp_settings_sections = array();	if ( !isset($wp_settings_sections[$page]) )		$wp_settings_sections[$page] = array();	if ( !isset($wp_settings_sections[$page][$id]) )		$wp_settings_sections[$page][$id] = array();	$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);}/** * Add a new field to a section of a settings page * * Part of the Settings API. Use this to define a settings field that will show * as part of a settings section inside a settings page. The fields are shown using * do_settings_fields() in do_settings-sections() * * The $callback argument should be the name of a function that echoes out the * html input tags for this setting field. Use get_option() to retrive existing * values to show. * * @since 2.7.0 * * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * * @param string $id Slug-name to identify the field. Used in the 'id' attribute of tags. * @param string $title Formatted title of the field. Shown as the label for the field during output. * @param string $callback Function that fills the field with the desired form inputs. The function should echo its output. * @param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...). * @param string $section The slug-name of the section of the settingss page in which to show the box (default, ...). * @param array $args Additional arguments */function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {	global $wp_settings_fields;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_fields) )		$wp_settings_fields = array();	if ( !isset($wp_settings_fields[$page]) )		$wp_settings_fields[$page] = array();	if ( !isset($wp_settings_fields[$page][$section]) )		$wp_settings_fields[$page][$section] = array();	$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);}/** * Prints out all settings sections added to a particular settings page * * Part of the Settings API. Use this in a settings page callback function * to output all the sections and fields that were added to that $page with * add_settings_section() and add_settings_field() * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * @since unknown * * @param string $page The slug name of the page whos settings sections you want to output */function do_settings_sections($page) {	global $wp_settings_sections, $wp_settings_fields;	if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )		return;	foreach ( (array) $wp_settings_sections[$page] as $section ) {		echo "<h3>{$section['title']}</h3>\n";		call_user_func($section['callback'], $section);		if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )			continue;		echo '<table class="form-table">';		do_settings_fields($page, $section['id']);		echo '</table>';	}}/** * Print out the settings fields for a particular settings section * * Part of the Settings API. Use this in a settings page to output * a specific section. Should normally be called by do_settings_sections() * rather than directly. * * @global $wp_settings_fields Storage array of settings fields and their pages/sections * * @since unknown * * @param string $page Slug title of the admin page who's settings fields you want to show. * @param section $section Slug title of the settings section who's fields you want to show. */function do_settings_fields($page, $section) {	global $wp_settings_fields;	if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section]) )		return;	foreach ( (array) $wp_settings_fields[$page][$section] as $field ) {		echo '<tr valign="top">';		if ( !empty($field['args']['label_for']) )			echo '<th scope="row"><label for="' . $field['args']['label_for'] . '">' . $field['title'] . '</label></th>';		else			echo '<th scope="row">' . $field['title'] . '</th>';		echo '<td>';		call_user_func($field['callback'], $field['args']);		echo '</td>';		echo '</tr>';	}}/** * Register a settings error to be displayed to the user * * Part of the Settings API. Use this to show messages to users about settings validation * problems, missing settings or anything else. * * Settings errors should be added inside the $sanitize_callback function defined in * register_setting() for a given setting to give feedback about the submission. * * By default messages will show immediately after the submission that generated the error. * Additional calls to settings_errors() can be used to show errors even when the settings * page is first accessed. * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Slug title of the setting to which this error applies * @param string $code Slug-name to identify the error. Used as part of 'id' attribute in HTML output. * @param string $message The formatted message text to display to the user (will be shown inside styled <div> and <p>) * @param string $type The type of message it is, controls HTML class. Use 'error' or 'updated'. */function add_settings_error( $setting, $code, $message, $type = 'error' ) {	global $wp_settings_errors;	if ( !isset($wp_settings_errors) )		$wp_settings_errors = array();	$new_error = array(		'setting' => $setting,		'code' => $code,		'message' => $message,		'type' => $type	);	$wp_settings_errors[] = $new_error;}/** * Fetch settings errors registered by add_settings_error() * * Checks the $wp_settings_errors array for any errors declared during the current * pageload and returns them. * * If changes were just submitted ($_GET['updated']) and settings errors were saved * to the 'settings_errors' transient then those errors will be returned instead. This * is used to pass errors back across pageloads. * * Use the $sanitize argument to manually re-sanitize the option before returning errors. * This is useful if you have errors or notices you want to show even when the user * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook) * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @return array Array of settings errors */function get_settings_errors( $setting = '', $sanitize = FALSE ) {	global $wp_settings_errors;	// If $sanitize is true, manually re-run the sanitizisation for this option	// This allows the $sanitize_callback from register_setting() to run, adding	// any settings errors you want to show by default.	if ( $sanitize )		sanitize_option( $setting, get_option($setting));	// If settings were passed back from options.php then use them	// Ignore transients if $sanitize is true, we dont' want the old values anyway	if ( isset($_GET['updated']) && $_GET['updated'] && get_transient('settings_errors') ) {		$settings_errors = get_transient('settings_errors');		delete_transient('settings_errors');	// Otherwise check global in case validation has been run on this pageload	} elseif ( count( $wp_settings_errors ) ) {		$settings_errors = $wp_settings_errors;	} else {		return;	}	// Filter the results to those of a specific setting if one was set	if ( $setting ) {		foreach ( (array) $settings_errors as $key => $details )			if ( $setting != $details['setting'] )				unset( $settings_errors[$key] );	}	return $settings_errors;}/** * Display settings errors registered by add_settings_error() * * Part of the Settings API. Outputs a <div> for each error retrieved by get_settings_errors(). * * This is called automatically after a settings page based on the Settings API is submitted. * Errors should be added during the validation callback function for a setting defined in register_setting() * * The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization * on its current value. * * The $hide_on_update option will cause errors to only show when the settings page is first loaded. * if the user has already saved new values it will be hidden to avoid repeating messages already * shown in the default error reporting after submission. This is useful to show general errors like missing * settings when the user arrives at the settings page. * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted. * @return <type> */function settings_errors ( $setting = '', $sanitize = FALSE, $hide_on_update = FALSE ) {	if ($hide_on_update AND $_GET['updated']) return;	$settings_errors = get_settings_errors( $setting, $sanitize );	if ( !is_array($settings_errors) ) return;	$output = '';	foreach ( $settings_errors as $key => $details ) {		$css_id = 'setting-error-' . $details['code'];		$css_class = $details['type'] . ' settings-error';		$output .= "<div id='$css_id' class='$css_class'> \n";		$output .= "<p><strong>{$details['message']}</strong></p>";		$output .= "</div> \n";	}	echo $output;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page */function manage_columns_prefs( $page ) {	$columns = get_column_headers( $page );	$hidden  = get_hidden_columns( $page );	$special = array('_title', 'cb', 'comment', 'media', 'name', 'title', 'username');	foreach ( $columns as $column => $title ) {		// Can't hide these or they are special		if ( in_array( $column, $special ) )			continue;		if ( empty( $title ) )			continue;		if ( 'comments' == $column )			$title = __( 'Comments' );		$id = "$column-hide";		echo '<label for="' . $id . '">';		echo '<input class="hide-column-tog" name="' . $id . '" type="checkbox" id="' . $id . '" value="' . $column . '"' . (! in_array($column, $hidden) ? ' checked="checked"' : '') . ' />';		echo "$title</label>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $found_action */function find_posts_div($found_action = '') {?>	<div id="find-posts" class="find-box" style="display:none;">		<div id="find-posts-head" class="find-box-head"><?php _e('Find Posts or Pages'); ?></div>		<div class="find-box-inside">			<div class="find-box-search">				<?php if ( $found_action ) { ?>					<input type="hidden" name="found_action" value="<?php echo esc_attr($found_action); ?>" />				<?php } ?>				<input type="hidden" name="affected" id="affected" value="" />				<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>				<label class="screen-reader-text" for="find-posts-input"><?php _e( 'Search' ); ?></label>				<input type="text" id="find-posts-input" name="ps" value="" />				<input type="button" onclick="findPosts.send();" value="<?php esc_attr_e( 'Search' ); ?>" class="button" /><br />				<?php				$post_types = get_post_types( array('public' => true), 'objects' );				foreach ( $post_types as $post ) {					if ( 'attachment' == $post->name )						continue;				?>				<input type="radio" name="find-posts-what" id="find-posts-<?php echo esc_attr($post->name); ?>" value="<?php echo esc_attr($post->name); ?>" <?php checked($post->name,  'post'); ?> />				<label for="find-posts-<?php echo esc_attr($post->name); ?>"><?php echo $post->label; ?></label>				<?php				} ?>			</div>			<div id="find-posts-response"></div>		</div>		<div class="find-box-buttons">			<input type="button" class="button alignleft" onclick="findPosts.close();" value="<?php esc_attr_e('Close'); ?>" />			<input id="find-posts-submit" type="submit" class="button-primary alignright" value="<?php esc_attr_e('Select'); ?>" />		</div>	</div><?php}/** * Display the post password. * * The password is passed through {@link esc_attr()} to ensure that it * is safe for placing in an html attribute. * * @uses attr * @since 2.7.0 */function the_post_password() {	global $post;	if ( isset( $post->post_password ) ) echo esc_attr( $post->post_password );}/** * {@internal Missing Short Description}} * * @since unknown */function favorite_actions( $screen = null ) {	$default_action = false;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( isset($screen->post_type) ) {		$post_type_object = get_post_type_object($screen->post_type);		if ( 'add' != $screen->action )			$default_action = array('post-new.php?post_type=' . $post_type_object->name => array($post_type_object->labels->new_item, $post_type_object->cap->edit_posts));		else			$default_action = array('edit.php?post_type=' . $post_type_object->name => array($post_type_object->labels->name, $post_type_object->cap->edit_posts));	}	if ( !$default_action ) {		switch ( $screen->id ) {			case 'upload':				$default_action = array('media-new.php' => array(__('New Media'), 'upload_files'));				break;			case 'media':				$default_action = array('upload.php' => array(__('Edit Media'), 'upload_files'));				break;			case 'link-manager':			case 'link':				if ( 'add' != $screen->action )					$default_action = array('link-add.php' => array(__('New Link'), 'manage_links'));				else					$default_action = array('link-manager.php' => array(__('Edit Links'), 'manage_links'));				break;			case 'users':				$default_action = array('user-new.php' => array(__('New User'), 'create_users'));				break;			case 'user':				$default_action = array('users.php' => array(__('Edit Users'), 'edit_users'));				break;			case 'plugins':				$default_action = array('plugin-install.php' => array(__('Install Plugins'), 'install_plugins'));				break;			case 'plugin-install':				$default_action = array('plugins.php' => array(__('Manage Plugins'), 'activate_plugins'));				break;			case 'themes':				$default_action = array('theme-install.php' => array(__('Install Themes'), 'install_themes'));				break;			case 'theme-install':				$default_action = array('themes.php' => array(__('Manage Themes'), 'switch_themes'));				break;			default:				$default_action = array('post-new.php' => array(__('New Post'), 'edit_posts'));				break;		}	}	$actions = array(		'post-new.php' => array(__('New Post'), 'edit_posts'),		'edit.php?post_status=draft' => array(__('Drafts'), 'edit_posts'),		'post-new.php?post_type=page' => array(__('New Page'), 'edit_pages'),		'media-new.php' => array(__('Upload'), 'upload_files'),		'edit-comments.php' => array(__('Comments'), 'moderate_comments')		);	$default_key = array_keys($default_action);	$default_key = $default_key[0];	if ( isset($actions[$default_key]) )		unset($actions[$default_key]);	$actions = array_merge($default_action, $actions);	$actions = apply_filters('favorite_actions', $actions);	$allowed_actions = array();	foreach ( $actions as $action => $data ) {		if ( current_user_can($data[1]) )			$allowed_actions[$action] = $data[0];	}	if ( empty($allowed_actions) )		return;	$first = array_keys($allowed_actions);	$first = $first[0];	echo '<div id="favorite-actions">';	echo '<div id="favorite-first"><a href="' . $first . '">' . $allowed_actions[$first] . '</a></div><div id="favorite-toggle"><br /></div>';	echo '<div id="favorite-inside">';	array_shift($allowed_actions);	foreach ( $allowed_actions as $action => $label) {		echo "<div class='favorite-action'><a href='$action'>";		echo $label;		echo "</a></div>\n";	}	echo "</div></div>\n";}/** * Get the post title. * * The post title is fetched and if it is blank then a default string is * returned. * * @since 2.7.0 * @param int $id The post id. If not supplied the global $post is used. * */function _draft_or_post_title($post_id = 0) {	$title = get_the_title($post_id);	if ( empty($title) )		$title = __('(no title)');	return $title;}/** * Display the search query. * * A simple wrapper to display the "s" parameter in a GET URI. This function * should only be used when {@link the_search_query()} cannot. * * @uses attr * @since 2.7.0 * */function _admin_search_query() {	echo isset($_GET['s']) ? esc_attr( stripslashes( $_GET['s'] ) ) : '';}/** * Generic Iframe header for use with Thickbox * * @since 2.7.0 * @param string $title Title of the Iframe page. * @param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued). * */function iframe_header( $title = '', $limit_styles = false ) {global $hook_suffix;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );if ( ! $limit_styles )	wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}//]]></script><?phpdo_action('admin_print_styles');do_action('admin_print_scripts');do_action('admin_head');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>  class="no-js <?php echo $admin_body_class; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><?php}/** * Generic Iframe footer for use with Thickbox * * @since 2.7.0 * */function iframe_footer() {	//We're going to hide any footer output on iframe pages, but run the hooks anyway since they output Javascript or other needed content. ?>	<div class="hidden"><?php	do_action('admin_footer', '');	do_action('admin_print_footer_scripts'); ?>	</div><script type="text/javascript">if(typeof wpOnload=="function")wpOnload();</script></body></html><?php}function _post_states($post) {	$post_states = array();	if ( isset($_GET['post_status']) )		$post_status = $_GET['post_status'];	else		$post_status = '';	if ( !empty($post->post_password) )		$post_states[] = __('Password protected');	if ( 'private' == $post->post_status && 'private' != $post_status )		$post_states[] = __('Private');	if ( 'draft' == $post->post_status && 'draft' != $post_status )		$post_states[] = __('Draft');	if ( 'pending' == $post->post_status && 'pending' != $post_status )		/* translators: post state */		$post_states[] = _x('Pending', 'post state');	if ( is_sticky($post->ID) )		$post_states[] = __('Sticky');	$post_states = apply_filters( 'display_post_states', $post_states );	if ( ! empty($post_states) ) {		$state_count = count($post_states);		$i = 0;		echo ' - ';		foreach ( $post_states as $state ) {			++$i;			( $i == $state_count ) ? $sep = '' : $sep = ', ';			echo "<span class='post-state'>$state$sep</span>";		}	}}/** * Convert a screen string to a screen object * * @since 3.0.0 * * @param string $screen The name of the screen * @return object An object containing the safe screen name and id */function convert_to_screen( $screen ) {	$screen = str_replace( array('.php', '-new', '-add' ), '', $screen);	$screen = (string) apply_filters( 'screen_meta_screen', $screen );	$screen = (object) array('id' => $screen, 'base' => $screen);	return $screen;}function screen_meta($screen) {	global $wp_meta_boxes, $_wp_contextual_help, $title;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$column_screens = get_column_headers($screen);	$meta_screens = array('index' => 'dashboard');	if ( isset($meta_screens[$screen->id]) ) {		$screen->id = $meta_screens[$screen->id];		$screen->base = $screen->id;	}	$show_screen = false;	if ( !empty($wp_meta_boxes[$screen->id]) || !empty($column_screens) )		$show_screen = true;	$screen_options = screen_options($screen);	if ( $screen_options )		$show_screen = true;	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$settings = apply_filters('screen_settings', '', $screen);	switch ( $screen->id ) {		case 'widgets':			$settings = '<p><a id="access-on" href="widgets.php?widgets-access=on">' . __('Enable accessibility mode') . '</a><a id="access-off" href="widgets.php?widgets-access=off">' . __('Disable accessibility mode') . "</a></p>\n";			$show_screen = true;			break;	}	if( ! empty( $settings ) )		$show_screen = true;?><div id="screen-meta"><?php if ( $show_screen ) : ?><div id="screen-options-wrap" class="hidden">	<form id="adv-settings" action="" method="post">	<?php if ( isset($wp_meta_boxes[$screen->id]) ) : ?>		<h5><?php _ex('Show on screen', 'Metaboxes') ?></h5>		<div class="metabox-prefs">			<?php meta_box_prefs($screen); ?>			<br class="clear" />		</div>		<?php endif;		if ( ! empty($column_screens) ) : ?>		<h5><?php echo ( isset( $column_screens['_title'] ) ?  $column_screens['_title'] :  _x('Show on screen', 'Columns') ) ?></h5>		<div class="metabox-prefs">			<?php manage_columns_prefs($screen); ?>			<br class="clear" />		</div>	<?php endif;	echo screen_layout($screen);	if ( !empty( $screen_options ) ) {		?>		<h5><?php _ex('Show on screen', 'Screen Options') ?></h5>		<?php	}	echo $screen_options;	echo $settings; ?><div><?php wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false ); ?></div></form></div><?php endif; // $show_screen	$_wp_contextual_help = apply_filters('contextual_help_list', $_wp_contextual_help, $screen);	?>	<div id="contextual-help-wrap" class="hidden">	<?php	$contextual_help = '';	if ( isset($_wp_contextual_help[$screen->id]) ) {		$contextual_help .= '<div class="metabox-prefs">' . $_wp_contextual_help[$screen->id] . "</div>\n";	} else {		$contextual_help .= '<div class="metabox-prefs">';		$default_help = __('<a href="http://codex.wordpress.org/" target="_blank">Documentation</a>');		$default_help .= '<br />';		$default_help .= __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>');		$contextual_help .= apply_filters('default_contextual_help', $default_help);		$contextual_help .= "</div>\n";	}	echo apply_filters('contextual_help', $contextual_help, $screen->id, $screen);	?>	</div><div id="screen-meta-links"><div id="contextual-help-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#contextual-help" id="contextual-help-link" class="show-settings"><?php _e('Help') ?></a></div><?php if ( $show_screen ) { ?><div id="screen-options-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#screen-options" id="show-settings-link" class="show-settings"><?php _e('Screen Options') ?></a></div><?php } ?></div></div><?php}/** * Add contextual help text for a page * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param string $help Arbitrary help text */function add_contextual_help($screen, $help) {	global $_wp_contextual_help;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$_wp_contextual_help[$screen->id] = $help;}function drag_drop_help() {	return '	<p>' .	__('Most of the modules on this screen can be moved. If you hover your mouse over the title bar of a module you&rsquo;ll notice the 4 arrow cursor appears to let you know it is movable. Click on it, hold down the mouse button and start dragging the module to a new location. As you drag the module, notice the dotted gray box that also moves. This box indicates where the module will be placed when you release the mouse button.') . '</p>	<p>' . __('The same modules can be expanded and collapsed by clicking once on their title bar and also completely hidden from the Screen Options tab.') . '</p>';}function plugins_search_help() {	return '	<p><strong>' . __('Search help') . '</strong></p>' .	'<p>' . __('You may search based on 3 criteria:') . '<br />' .	__('<strong>Term:</strong> Searches theme names and descriptions for the specified term.') . '<br />' .	__('<strong>Tag:</strong> Searches for themes tagged as such.') . '<br />' .	__('<strong>Author:</strong> Searches for themes created by the Author, or which the Author contributed to.') . '</p>';}function screen_layout($screen) {	global $screen_layout_columns;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = array('dashboard' => 4, 'link' => 2);	// Add custom post types	foreach ( get_post_types( array('show_ui' => true) ) as $post_type )		$columns[$post_type] = 2;	$columns = apply_filters('screen_layout_columns', $columns, $screen->id, $screen);	if ( !isset($columns[$screen->id]) ) {		$screen_layout_columns = 0;		return ''; 	}	$screen_layout_columns = get_user_option("screen_layout_$screen->id");	$num = $columns[$screen->id];	if ( ! $screen_layout_columns )			$screen_layout_columns = 2;	$i = 1;	$return = '<h5>' . __('Screen Layout') . "</h5>\n<div class='columns-prefs'>" . __('Number of Columns:') . "\n";	while ( $i <= $num ) {		$return .= "<label><input type='radio' name='screen_columns' value='$i'" . ( ($screen_layout_columns == $i) ? " checked='checked'" : "" ) . " /> $i</label>\n";		++$i;	}	$return .= "</div>\n";	return $return;}function screen_options($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	switch ( $screen->base ) {		case 'edit':		case 'edit-pages':			$post_type = 'post';			if ( isset($_GET['post_type']) && in_array( $_GET['post_type'], get_post_types( array('public' => true ) ) ) )				$post_type = $_GET['post_type'];			$post_type_object = get_post_type_object($post_type);			$per_page_label = $post_type_object->labels->name;			break;		case 'ms-sites':			$per_page_label = _x( 'Sites', 'sites per page (screen options)' );			break;		case 'ms-users':			$per_page_label = _x( 'Users', 'users per page (screen options)' );			break;		case 'edit-comments':			$per_page_label = _x( 'Comments', 'comments per page (screen options)' );			break;		case 'upload':			$per_page_label = _x( 'Media items', 'items per page (screen options)' );			break;		case 'edit-tags':			global $tax;			$per_page_label = $tax->labels->name;			break;		case 'plugins':			$per_page_label = _x( 'Plugins', 'plugins per page (screen options)' );			break;		default:			return '';	}	$option = str_replace( '-', '_', "{$screen->id}_per_page" );	if ( 'edit_tags_per_page' == $option ) {		if ( 'category' == $tax->name )			$option = 'categories_per_page';		elseif ( 'post_tag' != $tax->name )			$option = 'edit_' . $tax->name . '_per_page';	}	$per_page = (int) get_user_option( $option );	if ( empty( $per_page ) || $per_page < 1 ) {		if ( 'plugins' == $screen->id )			$per_page = 999;		else			$per_page = 20;	}	if ( 'edit_comments_per_page' == $option )		$per_page = apply_filters( 'comments_per_page', $per_page, isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all' );	elseif ( 'categories_per_page' == $option )		$per_page = apply_filters( 'edit_categories_per_page', $per_page );	else		$per_page = apply_filters( $option, $per_page );	$return = "<div class='screen-options'>\n";	if ( !empty($per_page_label) )		$return .= "<input type='text' class='screen-per-page' name='wp_screen_options[value]' id='$option' maxlength='3' value='$per_page' /> <label for='$option'>$per_page_label</label>\n";	$return .= "<input type='submit' class='button' value='" . esc_attr__('Apply') . "' />";	$return .= "<input type='hidden' name='wp_screen_options[option]' value='" . esc_attr($option) . "' />";	$return .= "</div>\n";	return $return;}function screen_icon($screen = '') {	global $current_screen;	if ( empty($screen) )		$screen = $current_screen;	elseif ( is_string($screen) )		$name = $screen;	if ( empty($name) ) {		if ( !empty($screen->parent_base) )			$name = $screen->parent_base;		else			$name = $screen->base;		if ( 'edit' == $name && isset($screen->post_type) && 'page' == $screen->post_type )			$name = 'edit-pages';	}?>	<div id="icon-<?php echo $name; ?>" class="icon32"><br /></div><?php}/** * Test support for compressing JavaScript from PHP * * Outputs JavaScript that tests if compression from PHP works as expected * and sets an option with the result. Has no effect when the current user * is not an administrator. To run the test again the option 'can_compress_scripts' * has to be deleted. * * @since 2.8.0 */function compression_test() {?>	<script type="text/javascript">	/* <![CDATA[ */	var testCompression = {		get : function(test) {			var x;			if ( window.XMLHttpRequest ) {				x = new XMLHttpRequest();			} else {				try{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}			}			if (x) {				x.onreadystatechange = function() {					var r, h;					if ( x.readyState == 4 ) {						r = x.responseText.substr(0, 18);						h = x.getResponseHeader('Content-Encoding');						testCompression.check(r, h, test);					}				}				x.open('GET', 'admin-ajax.php?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);				x.send('');			}		},		check : function(r, h, test) {			if ( ! r && ! test )				this.get(1);			if ( 1 == test ) {				if ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )					this.get('no');				else					this.get(2);				return;			}			if ( 2 == test ) {				if ( '"wpCompressionTest' == r )					this.get('yes');				else					this.get('no');			}		}	};	testCompression.check();	/* ]]> */	</script><?php}/** * Set the current screen object * * @since 3.0.0 * * @uses $current_screen * * @param string $id Screen id, optional. */function set_current_screen( $id =  '' ) {	global $current_screen, $hook_suffix, $typenow, $taxnow;	$action = '';	if ( empty($id) ) {		$current_screen = $hook_suffix;		$current_screen = str_replace('.php', '', $current_screen);		if ( preg_match('/-add|-new$/', $current_screen) )			$action = 'add';		$current_screen = str_replace('-new', '', $current_screen);		$current_screen = str_replace('-add', '', $current_screen);		$current_screen = array('id' => $current_screen, 'base' => $current_screen);	} else {		$id = sanitize_key($id);		if ( false !== strpos($id, '-') ) {			list( $id, $typenow ) = explode('-', $id, 2);			if ( taxonomy_exists( $typenow ) ) {				$id = 'edit-tags';				$taxnow = $typenow;				$typenow = '';			}		}		$current_screen = array('id' => $id, 'base' => $id);	}	$current_screen = (object) $current_screen;	$current_screen->action = $action;	// Map index to dashboard	if ( 'index' == $current_screen->base )		$current_screen->base = 'dashboard';	if ( 'index' == $current_screen->id )		$current_screen->id = 'dashboard';	if ( 'edit' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id .= '-' . $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'post' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id = $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'edit-tags' == $current_screen->id ) {		if ( empty($taxnow) )			$taxnow = 'post_tag';		$current_screen->id = 'edit-' . $taxnow;		$current_screen->taxonomy = $taxnow;	}	$current_screen = apply_filters('current_screen', $current_screen);}?>
<?php/** * WordPress Plugin Administration API * * @package WordPress * @subpackage Administration *//** * Parse the plugin contents to retrieve plugin's metadata. * * The metadata of the plugin's data searches for the following in the plugin's * header. All plugin data must be on its own line. For plugin description, it * must not have any newlines or only parts of the description will be displayed * and the same goes for the plugin data. The below is formatted for printing. * * <code> * /* * Plugin Name: Name of Plugin * Plugin URI: Link to plugin information * Description: Plugin Description * Author: Plugin author's name * Author URI: Link to the author's web site * Version: Must be set in the plugin for WordPress 2.3+ * Text Domain: Optional. Unique identifier, should be same as the one used in *		plugin_text_domain() * Domain Path: Optional. Only useful if the translations are located in a *		folder above the plugin's base path. For example, if .mo files are *		located in the locale folder then Domain Path will be "/locale/" and *		must have the first slash. Defaults to the base folder the plugin is *		located in. * Network: Optional. Specify "Network: true" to require that a plugin is activated *		across all sites in an installation. This will prevent a plugin from being *		activated on a single site when Multisite is enabled. *  * / # Remove the space to close comment * </code> * * Plugin data returned array contains the following: *		'Name' - Name of the plugin, must be unique. *		'Title' - Title of the plugin and the link to the plugin's web site. *		'Description' - Description of what the plugin does and/or notes *		from the author. *		'Author' - The author's name *		'AuthorURI' - The authors web site address. *		'Version' - The plugin version number. *		'PluginURI' - Plugin web site address. *		'TextDomain' - Plugin's text domain for localization. *		'DomainPath' - Plugin's relative directory path to .mo files. *		'Network' - Boolean. Whether the plugin can only be activated network wide. * * Some users have issues with opening large files and manipulating the contents * for want is usually the first 1kiB or 2kiB. This function stops pulling in * the plugin contents when it has all of the required plugin data. * * The first 8kiB of the file will be pulled in and if the plugin data is not * within that first 8kiB, then the plugin author should correct their plugin * and move the plugin data headers to the top. * * The plugin file is assumed to have permissions to allow for scripts to read * the file. This is not checked however and the file is only opened for * reading. * * @link http://trac.wordpress.org/ticket/5651 Previous Optimizations. * @link http://trac.wordpress.org/ticket/7372 Further and better Optimizations. * @since 1.5.0 * * @param string $plugin_file Path to the plugin file * @param bool $markup If the returned data should have HTML markup applied * @param bool $translate If the returned data should be translated * @return array See above for description. */function get_plugin_data( $plugin_file, $markup = true, $translate = true ) {	$default_headers = array(		'Name' => 'Plugin Name',		'PluginURI' => 'Plugin URI',		'Version' => 'Version',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'TextDomain' => 'Text Domain',		'DomainPath' => 'Domain Path',		'Network' => 'Network',		// Site Wide Only is deprecated in favor of Network.		'_sitewide' => 'Site Wide Only',	);	$plugin_data = get_file_data( $plugin_file, $default_headers, 'plugin' );	// Site Wide Only is the old header for Network	if ( empty( $plugin_data['Network'] ) && ! empty( $plugin_data['_sitewide'] ) ) {		_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The <code>%1$s</code> plugin header is deprecated. Use <code>%2$s</code> instead.' ), 'Site Wide Only: true', 'Network: true' ) );		$plugin_data['Network'] = $plugin_data['_sitewide'];	}	$plugin_data['Network'] = ( 'true' == strtolower( $plugin_data['Network'] ) );	unset( $plugin_data['_sitewide'] );	//For backward compatibility by default Title is the same as Name.	$plugin_data['Title'] = $plugin_data['Name'];	if ( $markup || $translate )		$plugin_data = _get_plugin_data_markup_translate( $plugin_file, $plugin_data, $markup, $translate );	return $plugin_data;}function _get_plugin_data_markup_translate($plugin_file, $plugin_data, $markup = true, $translate = true) {	//Translate fields30	if ( $translate && ! empty($plugin_data['TextDomain']) ) {		if ( ! empty( $plugin_data['DomainPath'] ) )			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file). $plugin_data['DomainPath']);		else			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file));		foreach ( array('Name', 'PluginURI', 'Description', 'Author', 'AuthorURI', 'Version') as $field )			$plugin_data[ $field ] = translate($plugin_data[ $field ], $plugin_data['TextDomain']);	}	//Apply Markup	if ( $markup ) {		if ( ! empty($plugin_data['PluginURI']) && ! empty($plugin_data['Name']) )			$plugin_data['Title'] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin homepage' ) . '">' . $plugin_data['Name'] . '</a>';		else			$plugin_data['Title'] = $plugin_data['Name'];		if ( ! empty($plugin_data['AuthorURI']) && ! empty($plugin_data['Author']) )			$plugin_data['Author'] = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';		$plugin_data['Description'] = wptexturize( $plugin_data['Description'] );		if ( ! empty($plugin_data['Author']) )			$plugin_data['Description'] .= ' <cite>' . sprintf( __('By %s'), $plugin_data['Author'] ) . '.</cite>';	}	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	// Sanitize all displayed data	$plugin_data['Title']       = wp_kses($plugin_data['Title'], $plugins_allowedtags);	$plugin_data['Version']     = wp_kses($plugin_data['Version'], $plugins_allowedtags);	$plugin_data['Description'] = wp_kses($plugin_data['Description'], $plugins_allowedtags);	$plugin_data['Author']      = wp_kses($plugin_data['Author'], $plugins_allowedtags);	return $plugin_data;}/** * Get a list of a plugin's files. * * @since 2.8.0 * * @param string $plugin Plugin ID * @return array List of files relative to the plugin root. */function get_plugin_files($plugin) {	$plugin_file = WP_PLUGIN_DIR . '/' . $plugin;	$dir = dirname($plugin_file);	$plugin_files = array($plugin);	if ( is_dir($dir) && $dir != WP_PLUGIN_DIR ) {		$plugins_dir = @ opendir( $dir );		if ( $plugins_dir ) {			while (($file = readdir( $plugins_dir ) ) !== false ) {				if ( substr($file, 0, 1) == '.' )					continue;				if ( is_dir( $dir . '/' . $file ) ) {					$plugins_subdir = @ opendir( $dir . '/' . $file );					if ( $plugins_subdir ) {						while (($subfile = readdir( $plugins_subdir ) ) !== false ) {							if ( substr($subfile, 0, 1) == '.' )								continue;							$plugin_files[] = plugin_basename("$dir/$file/$subfile");						}						@closedir( $plugins_subdir );					}				} else {					if ( plugin_basename("$dir/$file") != $plugin )						$plugin_files[] = plugin_basename("$dir/$file");				}			}			@closedir( $plugins_dir );		}	}	return $plugin_files;}/** * Check the plugins directory and retrieve all plugin files with plugin data. * * WordPress only supports plugin files in the base plugins directory * (wp-content/plugins) and in one directory above the plugins directory * (wp-content/plugins/my-plugin). The file it looks for has the plugin data and * must be found in those two locations. It is recommended that do keep your * plugin files in directories. * * The file with the plugin data is the file that will be included and therefore * needs to have the main execution for the plugin. This does not mean * everything must be contained in the file and it is recommended that the file * be split for maintainability. Keep everything in one file for extreme * optimization purposes. * * @since unknown * * @param string $plugin_folder Optional. Relative path to single plugin folder. * @return array Key is the plugin file path and the value is an array of the plugin data. */function get_plugins($plugin_folder = '') {	if ( ! $cache_plugins = wp_cache_get('plugins', 'plugins') )		$cache_plugins = array();	if ( isset($cache_plugins[ $plugin_folder ]) )		return $cache_plugins[ $plugin_folder ];	$wp_plugins = array ();	$plugin_root = WP_PLUGIN_DIR;	if ( !empty($plugin_folder) )		$plugin_root .= $plugin_folder;	// Files in wp-content/plugins directory	$plugins_dir = @ opendir( $plugin_root);	$plugin_files = array();	if ( $plugins_dir ) {		while (($file = readdir( $plugins_dir ) ) !== false ) {			if ( substr($file, 0, 1) == '.' )				continue;			if ( is_dir( $plugin_root.'/'.$file ) ) {				$plugins_subdir = @ opendir( $plugin_root.'/'.$file );				if ( $plugins_subdir ) {					while (($subfile = readdir( $plugins_subdir ) ) !== false ) {						if ( substr($subfile, 0, 1) == '.' )							continue;						if ( substr($subfile, -4) == '.php' )							$plugin_files[] = "$file/$subfile";					}				}			} else {				if ( substr($file, -4) == '.php' )					$plugin_files[] = $file;			}		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	@closedir( $plugins_subdir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( "$plugin_root/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( "$plugin_root/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			continue;		$wp_plugins[plugin_basename( $plugin_file )] = $plugin_data;	}	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	$cache_plugins[ $plugin_folder ] = $wp_plugins;	wp_cache_set('plugins', $cache_plugins, 'plugins');	return $wp_plugins;}/** * Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data. * * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins). * * @since 3.0.0 * @return array Key is the mu-plugin file path and the value is an array of the mu-plugin data. */function get_mu_plugins() {	$wp_plugins = array();	// Files in wp-content/mu-plugins directory	$plugin_files = array();	if ( ! is_dir( WPMU_PLUGIN_DIR ) )		return $wp_plugins;	if ( $plugins_dir = @ opendir( WPMU_PLUGIN_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( substr( $file, -4 ) == '.php' )				$plugin_files[] = $file;		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WPMU_PLUGIN_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WPMU_PLUGIN_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$wp_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $wp_plugins['index.php'] ) && filesize( WPMU_PLUGIN_DIR . '/index.php') <= 30 ) // silence is golden		unset( $wp_plugins['index.php'] );	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	return $wp_plugins;}/** * Check the wp-content directory and retrieve all drop-ins with any plugin data. * * @since 3.0.0 * @return array Key is the file path and the value is an array of the plugin data. */function get_dropins() {	$dropins = array();	$plugin_files = array();	$_dropins = _get_dropins();	// These exist in the wp-content directory	if ( $plugins_dir = @ opendir( WP_CONTENT_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( isset( $_dropins[ $file ] ) )				$plugin_files[] = $file;		}	} else {		return $dropins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $dropins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WP_CONTENT_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WP_CONTENT_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$dropins[ $plugin_file ] = $plugin_data;	}	uksort( $dropins, create_function( '$a, $b', 'return strnatcasecmp( $a, $b );' ));	return $dropins;}/** * Returns drop-ins that WordPress uses. * * Includes Multisite drop-ins only when is_multisite() * * @since 3.0.0 * @return array Key is file name. The value is an array, with the first value the *	purpose of the drop-in and the second value the name of the constant that must be *	true for the drop-in to be used, or true if no constant is required. */function _get_dropins() {	$dropins = array(		'advanced-cache.php' => array( __( 'Advanced caching plugin.'       ), 'WP_CACHE' ), // WP_CACHE		'db.php'             => array( __( 'Custom database class.'         ), true ), // auto on load		'db-error.php'       => array( __( 'Custom database error message.' ), true ), // auto on error		'install.php'        => array( __( 'Custom install script.'         ), true ), // auto on install		'maintenance.php'    => array( __( 'Custom maintenance message.'    ), true ), // auto on maintenance		'object-cache.php'   => array( __( 'External object cache.'         ), true ), // auto on load	);	if ( is_multisite() ) {		$dropins['sunrise.php'       ] = array( __( 'Executed before Multisite is loaded.' ), 'SUNRISE' ); // SUNRISE		$dropins['blog-deleted.php'  ] = array( __( 'Custom site deleted message.'   ), true ); // auto on deleted blog		$dropins['blog-inactive.php' ] = array( __( 'Custom site inactive message.'  ), true ); // auto on inactive blog		$dropins['blog-suspended.php'] = array( __( 'Custom site suspended message.' ), true ); // auto on archived or spammed blog	}	return $dropins;}/** * Check whether the plugin is active by checking the active_plugins list. * * @since 2.5.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if in the active plugins list. False, not in the list. */function is_plugin_active( $plugin ) {	return in_array( $plugin, (array) get_option( 'active_plugins', array() ) ) || is_plugin_active_for_network( $plugin );}/** * Check whether the plugin is active for the entire network. * * @since 3.0.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if active for the network, otherwise false. */function is_plugin_active_for_network( $plugin ) {	if ( !is_multisite() )		return false;	$plugins = get_site_option( 'active_sitewide_plugins');	if ( isset($plugins[$plugin]) )		return true;	return false;}/** * Checks for "Network: true" in the plugin header to see if this should * be activated only as a network wide plugin. The plugin would also work * when Multisite is not enabled. * * Checks for "Site Wide Only: true" for backwards compatibility. * * @since 3.0.0 * * @param $file Plugin to check * $return bool True if plugin is network only, false otherwise. */function is_network_only_plugin( $plugin ) {	$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );	if ( $plugin_data )		return $plugin_data['Network'];	return false;}/** * Attempts activation of plugin in a "sandbox" and redirects on success. * * A plugin that is already activated will not attempt to be activated again. * * The way it works is by setting the redirection to the error before trying to * include the plugin file. If the plugin fails, then the redirection will not * be overwritten with the success message. Also, the options will not be * updated and the activation hook will not be called on plugin error. * * It should be noted that in no way the below code will actually prevent errors * within the file. The code should not be used elsewhere to replicate the * "sandbox", which uses redirection to work. * {@source 13 1} * * If any errors are found or text is outputted, then it will be captured to * ensure that the success redirection will update the error redirection. * * @since unknown * * @param string $plugin Plugin path to main plugin file with plugin data. * @param string $redirect Optional. URL to redirect to. * @param bool $network_wide Whether to enable the plugin for all sites in the network or just the current site.  Multisite only. Default is false. * @return WP_Error|null WP_Error on invalid file or null on success. */function activate_plugin( $plugin, $redirect = '', $network_wide = false) {	$plugin  = plugin_basename( trim( $plugin ) );	if ( is_multisite() && ( $network_wide || is_network_only_plugin($plugin) ) ) {		$network_wide = true;		$current = get_site_option( 'active_sitewide_plugins', array() );	} else {		$current = get_option( 'active_plugins', array() );	}	$valid = validate_plugin($plugin);	if ( is_wp_error($valid) )		return $valid;	if ( !in_array($plugin, $current) ) {		if ( !empty($redirect) )			wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect)); // we'll override this later if the plugin can be included without fatal error		ob_start();		include(WP_PLUGIN_DIR . '/' . $plugin);		do_action( 'activate_plugin', trim( $plugin) );		if ( $network_wide ) {			$current[$plugin] = time();			update_site_option( 'active_sitewide_plugins', $current );		} else {			$current[] = $plugin;			sort($current);			update_option('active_plugins', $current);		}		do_action( 'activate_' . trim( $plugin ) );		do_action( 'activated_plugin', trim( $plugin) );		if ( ob_get_length() > 0 ) {			$output = ob_get_clean();			return new WP_Error('unexpected_output', __('The plugin generated unexpected output.'), $output);		}		ob_end_clean();	}	return null;}/** * Deactivate a single plugin or multiple plugins. * * The deactivation hook is disabled by the plugin upgrader by using the $silent * parameter. * * @since unknown * * @param string|array $plugins Single plugin or list of plugins to deactivate. * @param bool $silent Optional, default is false. Prevent calling deactivate hook. */function deactivate_plugins( $plugins, $silent = false ) {	$network_current = get_site_option( 'active_sitewide_plugins', array() );	$current = get_option( 'active_plugins', array() );	$do_blog = $do_network = false;	foreach ( (array) $plugins as $plugin ) {		$plugin = plugin_basename($plugin);		if ( ! is_plugin_active($plugin) )			continue;		if ( ! $silent )			do_action( 'deactivate_plugin', trim( $plugin ) );		if ( is_plugin_active_for_network($plugin) ) {			// Deactivate network wide			$do_network = true;			unset( $network_current[ $plugin ] );		} else {			// Deactivate for this blog only			$key = array_search( $plugin, (array) $current );			if ( false !== $key ) {				$do_blog = true;				array_splice( $current, $key, 1 );			}		}		//Used by Plugin updater to internally deactivate plugin, however, not to notify plugins of the fact to prevent plugin output.		if ( ! $silent ) {			do_action( 'deactivate_' . trim( $plugin ) );			do_action( 'deactivated_plugin', trim( $plugin ) );		}	}	if ( $do_blog )		update_option('active_plugins', $current);	if ( $do_network )		update_site_option( 'active_sitewide_plugins', $network_current );}/** * Activate multiple plugins. * * When WP_Error is returned, it does not mean that one of the plugins had * errors. It means that one or more of the plugins file path was invalid. * * The execution will be halted as soon as one of the plugins has an error. * * @since unknown * * @param string|array $plugins * @param string $redirect Redirect to page after successful activation. * @param bool $network_wide Whether to enable the plugin for all sites in the network. * @return bool|WP_Error True when finished or WP_Error if there were errors during a plugin activation. */function activate_plugins($plugins, $redirect = '', $network_wide) {	if ( !is_array($plugins) )		$plugins = array($plugins);	$errors = array();	foreach ( (array) $plugins as $plugin ) {		if ( !empty($redirect) )			$redirect = add_query_arg('plugin', $plugin, $redirect);		$result = activate_plugin($plugin, $redirect, $network_wide);		if ( is_wp_error($result) )			$errors[$plugin] = $result;	}	if ( !empty($errors) )		return new WP_Error('plugins_invalid', __('One of the plugins is invalid.'), $errors);	return true;}/** * Remove directory and files of a plugin for a single or list of plugin(s). * * If the plugins parameter list is empty, false will be returned. True when * completed. * * @since unknown * * @param array $plugins List of plugin * @param string $redirect Redirect to page when complete. * @return mixed */function delete_plugins($plugins, $redirect = '' ) {	global $wp_filesystem;	if ( empty($plugins) )		return false;	$checked = array();	foreach( $plugins as $plugin )		$checked[] = 'checked[]=' . $plugin;	ob_start();	$url = wp_nonce_url('plugins.php?action=delete-selected&verify-delete=1&' . implode('&', $checked), 'bulk-manage-plugins');	if ( false === ($credentials = request_filesystem_credentials($url)) ) {		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! WP_Filesystem($credentials) ) {		request_filesystem_credentials($url, '', true); //Failed to connect, Error and request again		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return new WP_Error('fs_error', __('Filesystem error.'), $wp_filesystem->errors);	//Get the base plugin folder	$plugins_dir = $wp_filesystem->wp_plugins_dir();	if ( empty($plugins_dir) )		return new WP_Error('fs_no_plugins_dir', __('Unable to locate WordPress Plugin directory.'));	$plugins_dir = trailingslashit( $plugins_dir );	$errors = array();	foreach( $plugins as $plugin_file ) {		// Run Uninstall hook		if ( is_uninstallable_plugin( $plugin_file ) )			uninstall_plugin($plugin_file);		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin_file) );		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin_file, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin_file);		if ( ! $deleted )			$errors[] = $plugin_file;	}	if ( ! empty($errors) )		return new WP_Error('could_not_remove_plugin', sprintf(__('Could not fully remove the plugin(s) %s.'), implode(', ', $errors)) );	// Force refresh of plugin update information	if ( $current = get_site_transient('update_plugins') ) {		unset( $current->response[ $plugin_file ] );		set_site_transient('update_plugins', $current);	}	return true;}/** * Validate active plugins * * Validate all active plugins, deactivates invalid and * returns an array of deactivated ones. * * @since unknown * @return array invalid plugins, plugin as key, error as value */function validate_active_plugins() {	$plugins = get_option( 'active_plugins', array() );	// validate vartype: array	if ( ! is_array( $plugins ) ) {		update_option( 'active_plugins', array() );		$plugins = array();	}	if ( is_multisite() && is_super_admin() ) {		$network_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		$plugins = array_merge( $plugins, array_keys( $network_plugins ) );	}	if ( empty( $plugins ) )		return;	$invalid = array();	// invalid plugins get deactivated	foreach ( $plugins as $plugin ) {		$result = validate_plugin( $plugin );		if ( is_wp_error( $result ) ) {			$invalid[$plugin] = $result;			deactivate_plugins( $plugin, true );		}	}	return $invalid;}/** * Validate the plugin path. * * Checks that the file exists and {@link validate_file() is valid file}. * * @since unknown * * @param string $plugin Plugin Path * @return WP_Error|int 0 on success, WP_Error on failure. */function validate_plugin($plugin) {	if ( validate_file($plugin) )		return new WP_Error('plugin_invalid', __('Invalid plugin path.'));	if ( ! file_exists(WP_PLUGIN_DIR . '/' . $plugin) )		return new WP_Error('plugin_not_found', __('Plugin file does not exist.'));	$installed_plugins = get_plugins();	if ( ! isset($installed_plugins[$plugin]) )		return new WP_Error('no_plugin_header', __('The plugin does not have a valid header.'));	return 0;}/** * Whether the plugin can be uninstalled. * * @since 2.7.0 * * @param string $plugin Plugin path to check. * @return bool Whether plugin can be uninstalled. */function is_uninstallable_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( isset( $uninstallable_plugins[$file] ) || file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) )		return true;	return false;}/** * Uninstall a single plugin. * * Calls the uninstall hook, if it is available. * * @since 2.7.0 * * @param string $plugin Relative plugin path from Plugin Directory. */function uninstall_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) ) {		if ( isset( $uninstallable_plugins[$file] ) ) {			unset($uninstallable_plugins[$file]);			update_option('uninstall_plugins', $uninstallable_plugins);		}		unset($uninstallable_plugins);		define('WP_UNINSTALL_PLUGIN', $file);		include WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php';		return true;	}	if ( isset( $uninstallable_plugins[$file] ) ) {		$callable = $uninstallable_plugins[$file];		unset($uninstallable_plugins[$file]);		update_option('uninstall_plugins', $uninstallable_plugins);		unset($uninstallable_plugins);		include WP_PLUGIN_DIR . '/' . $file;		add_action( 'uninstall_' . $file, $callable );		do_action( 'uninstall_' . $file );	}}//// Menu///** * Add a top level menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu * @param int $position The position in the menu order this one should appear */function add_menu_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = NULL ) {	global $menu, $admin_page_hooks, $_registered_pages, $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$admin_page_hooks[$menu_slug] = sanitize_title( $menu_title );	$hookname = get_plugin_page_hookname( $menu_slug, '' );	if ( !empty( $function ) && !empty( $hookname ) && current_user_can( $capability ) )		add_action( $hookname, $function );	if ( empty($icon_url) )		$icon_url = esc_url( admin_url( 'images/generic.png' ) );	elseif ( is_ssl() && 0 === strpos($icon_url, 'http://') )		$icon_url = 'https://' . substr($icon_url, 7);	$new_menu = array( $menu_title, $capability, $menu_slug, $page_title, 'menu-top ' . $hookname, $hookname, $icon_url );	if ( null === $position  )		$menu[] = $new_menu;	else		$menu[$position] = $new_menu;	$_registered_pages[$hookname] = true;	// No parent as top level	$_parent_pages[$menu_slug] = false;	return $hookname;}/** * Add a top level menu page in the 'objects' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_object_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_object_menu;	$_wp_last_object_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_object_menu);}/** * Add a top level menu page in the 'utility' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_utility_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_utility_menu;	$_wp_last_utility_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_utility_menu);}/** * Add a sub menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $parent_slug The slug name for the parent menu (or the file name of a standard WordPress admin page) * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_submenu_page( $parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	global $submenu;	global $menu;	global $_wp_real_parent_file;	global $_wp_submenu_nopriv;	global $_registered_pages;	global $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$parent_slug = plugin_basename( $parent_slug);	if ( isset( $_wp_real_parent_file[$parent_slug] ) )		$parent_slug = $_wp_real_parent_file[$parent_slug];	if ( !current_user_can( $capability ) ) {		$_wp_submenu_nopriv[$parent_slug][$menu_slug] = true;		return false;	}	// If the parent doesn't already have a submenu, add a link to the parent	// as the first item in the submenu.  If the submenu file is the same as the	// parent file someone is trying to link back to the parent manually.  In	// this case, don't automatically add a link back to avoid duplication.	if (!isset( $submenu[$parent_slug] ) && $menu_slug != $parent_slug  ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $parent_slug && current_user_can( $parent_menu[1] ) )				$submenu[$parent_slug][] = $parent_menu;		}	}	$submenu[$parent_slug][] = array ( $menu_title, $capability, $menu_slug, $page_title );	$hookname = get_plugin_page_hookname( $menu_slug, $parent_slug);	if (!empty ( $function ) && !empty ( $hookname ))		add_action( $hookname, $function );	$_registered_pages[$hookname] = true;	// backwards-compatibility for plugins using add_management page.  See wp-admin/admin.php for redirect from edit.php to tools.php	if ( 'tools.php' == $parent_slug )		$_registered_pages[get_plugin_page_hookname( $menu_slug, 'edit.php')] = true;	// No parent as top level	$_parent_pages[$menu_slug] = $parent_slug;	return $hookname;}/** * Add sub menu page to the tools main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_management_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'tools.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the options main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_options_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'options-general.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the themes main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_theme_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'themes.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the plugins main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_plugins_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'plugins.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Users/Profile main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_users_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	if ( current_user_can('edit_users') )		$parent = 'users.php';	else		$parent = 'profile.php';	return add_submenu_page( $parent, $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Dashboard main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_dashboard_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'index.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the posts main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_posts_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the media main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_media_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'upload.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the links main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_links_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'link-manager.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the pages main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_pages_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php?post_type=page', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the comments main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_comments_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit-comments.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Get the url to access a particular menu page based on the slug it was registered with. * * If the slug hasn't been registered properly no url will be returned * * @since 3.0 * * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param bool $echo Whether or not to echo the url - default is true * @return string the url */function menu_page_url($menu_slug, $echo = true) {	global $_parent_pages;	if ( isset( $_parent_pages[$menu_slug] ) ) {		if ( $_parent_pages[$menu_slug] ) {			$url = admin_url( add_query_arg( 'page', $menu_slug, $_parent_pages[$menu_slug] ) );		} else {			$url = admin_url('admin.php?page=' . $menu_slug);		}	} else {		$url = '';	}	$url = esc_url($url);	if ( $echo )		echo $url;	return $url;}//// Pluggable Menu Support -- Private//function get_admin_page_parent( $parent = '' ) {	global $parent_file;	global $menu;	global $submenu;	global $pagenow;	global $typenow;	global $plugin_page;	global $_wp_real_parent_file;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	if ( !empty ( $parent ) && 'admin.php' != $parent ) {		if ( isset( $_wp_real_parent_file[$parent] ) )			$parent = $_wp_real_parent_file[$parent];		return $parent;	}	/*	if ( !empty ( $parent_file ) ) {		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	*/	if ( $pagenow == 'admin.php' && isset( $plugin_page ) ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $plugin_page ) {				$parent_file = $plugin_page;				if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];				return $parent_file;			}		}		if ( isset( $_wp_menu_nopriv[$plugin_page] ) ) {			$parent_file = $plugin_page;			if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];			return $parent_file;		}	}	if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) ) {		$parent_file = $pagenow;		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	foreach (array_keys( (array)$submenu ) as $parent) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $_wp_real_parent_file[$parent] ) )				$parent = $_wp_real_parent_file[$parent];			if ( !empty($typenow) && ($submenu_array[2] == "$pagenow?post_type=$typenow") ) {				$parent_file = $parent;				return $parent;			} elseif ( $submenu_array[2] == $pagenow && empty($typenow) && ( empty($parent_file) || false === strpos($parent_file, '?') ) ) {				$parent_file = $parent;				return $parent;			} else				if ( isset( $plugin_page ) && ($plugin_page == $submenu_array[2] ) ) {					$parent_file = $parent;					return $parent;				}		}	}	if ( empty($parent_file) )		$parent_file = '';	return '';}function get_admin_page_title() {	global $title;	global $menu;	global $submenu;	global $pagenow;	global $plugin_page;	global $typenow;	if ( ! empty ( $title ) )		return $title;	$hook = get_plugin_page_hook( $plugin_page, $pagenow );	$parent = $parent1 = get_admin_page_parent();	if ( empty ( $parent) ) {		foreach ( (array)$menu as $menu_array ) {			if ( isset( $menu_array[3] ) ) {				if ( $menu_array[2] == $pagenow ) {					$title = $menu_array[3];					return $menu_array[3];				} else					if ( isset( $plugin_page ) && ($plugin_page == $menu_array[2] ) && ($hook == $menu_array[3] ) ) {						$title = $menu_array[3];						return $menu_array[3];					}			} else {				$title = $menu_array[0];				return $title;			}		}	} else {		foreach ( array_keys( $submenu ) as $parent ) {			foreach ( $submenu[$parent] as $submenu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $submenu_array[2] ) &&					(						( $parent == $pagenow ) ||						( $parent == $plugin_page ) ||						( $plugin_page == $hook ) ||						( $pagenow == 'admin.php' && $parent1 != $submenu_array[2] ) ||						( !empty($typenow) && $parent == $pagenow . '?post_type=' . $typenow)					)					) {						$title = $submenu_array[3];						return $submenu_array[3];					}				if ( $submenu_array[2] != $pagenow || isset( $_GET['page'] ) ) // not the current page					continue;				if ( isset( $submenu_array[3] ) ) {					$title = $submenu_array[3];					return $submenu_array[3];				} else {					$title = $submenu_array[0];					return $title;				}			}		}		if ( empty ( $title ) ) {			foreach ( $menu as $menu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $menu_array[2] ) &&					( $pagenow == 'admin.php' ) &&					( $parent1 == $menu_array[2] ) )					{						$title = $menu_array[3];						return $menu_array[3];					}			}		}	}	return $title;}function get_plugin_page_hook( $plugin_page, $parent_page ) {	$hook = get_plugin_page_hookname( $plugin_page, $parent_page );	if ( has_action($hook) )		return $hook;	else		return null;}function get_plugin_page_hookname( $plugin_page, $parent_page ) {	global $admin_page_hooks;	$parent = get_admin_page_parent( $parent_page );	$page_type = 'admin';	if ( empty ( $parent_page ) || 'admin.php' == $parent_page || isset( $admin_page_hooks[$plugin_page] ) ) {		if ( isset( $admin_page_hooks[$plugin_page] ) )			$page_type = 'toplevel';		else			if ( isset( $admin_page_hooks[$parent] ))				$page_type = $admin_page_hooks[$parent];	} else if ( isset( $admin_page_hooks[$parent] ) ) {		$page_type = $admin_page_hooks[$parent];	}	$plugin_name = preg_replace( '!\.php!', '', $plugin_page );	return $page_type . '_page_' . $plugin_name;}function user_can_access_admin_page() {	global $pagenow;	global $menu;	global $submenu;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	global $plugin_page;	global $_registered_pages;	$parent = get_admin_page_parent();	if ( !isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$parent][$pagenow] ) )		return false;	if ( isset( $plugin_page ) ) {		if ( isset( $_wp_submenu_nopriv[$parent][$plugin_page] ) )			return false;		$hookname = get_plugin_page_hookname($plugin_page, $parent);		if ( !isset($_registered_pages[$hookname]) )			return false;	}	if ( empty( $parent) ) {		if ( isset( $_wp_menu_nopriv[$pagenow] ) )			return false;		if ( isset( $_wp_submenu_nopriv[$pagenow][$pagenow] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_menu_nopriv[$plugin_page] ) )			return false;		foreach (array_keys( $_wp_submenu_nopriv ) as $key ) {			if ( isset( $_wp_submenu_nopriv[$key][$pagenow] ) )				return false;			if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$key][$plugin_page] ) )			return false;		}		return true;	}	if ( isset( $plugin_page ) && ( $plugin_page == $parent ) && isset( $_wp_menu_nopriv[$plugin_page] ) )		return false;	if ( isset( $submenu[$parent] ) ) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $plugin_page ) && ( $submenu_array[2] == $plugin_page ) ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			} else if ( $submenu_array[2] == $pagenow ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			}		}	}	foreach ( $menu as $menu_array ) {		if ( $menu_array[2] == $parent) {			if ( current_user_can( $menu_array[1] ))				return true;			else				return false;		}	}	return true;}/* Whitelist functions *//** * Register a setting and its sanitization callback * * @since 2.7.0 * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function register_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$new_whitelist_options[ $option_group ][] = $option_name;	if ( $sanitize_callback != '' )		add_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function unregister_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$pos = array_search( $option_name, (array) $new_whitelist_options );	if ( $pos !== false )		unset( $new_whitelist_options[ $option_group ][ $pos ] );	if ( $sanitize_callback != '' )		remove_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $options * @return unknown */function option_update_filter( $options ) {	global $new_whitelist_options;	if ( is_array( $new_whitelist_options ) )		$options = add_option_whitelist( $new_whitelist_options, $options );	return $options;}add_filter( 'whitelist_options', 'option_update_filter' );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $new_options * @param unknown_type $options * @return unknown */function add_option_whitelist( $new_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $new_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( !isset($whitelist_options[ $page ]) || !is_array($whitelist_options[ $page ]) ) {				$whitelist_options[ $page ] = array();				$whitelist_options[ $page ][] = $key;			} else {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos === false )					$whitelist_options[ $page ][] = $key;			}		}	}	return $whitelist_options;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $del_options * @param unknown_type $options * @return unknown */function remove_option_whitelist( $del_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $del_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( isset($whitelist_options[ $page ]) && is_array($whitelist_options[ $page ]) ) {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos !== false )					unset( $whitelist_options[ $page ][ $pos ] );			}		}	}	return $whitelist_options;}/** * Output nonce, action, and option_page fields for a settings page. * * @since 2.7.0 * * @param string $option_group A settings group name.  This should match the group name used in register_setting(). */function settings_fields($option_group) {	echo "<input type='hidden' name='option_page' value='" . esc_attr($option_group) . "' />";	echo '<input type="hidden" name="action" value="update" />';	wp_nonce_field("$option_group-options");}?>
<?php/** * Network installation administration panel. * * A multi-step process allowing the user to enable a network of WordPress sites. * * @since 3.0.0 * * @package WordPress * @subpackage Administration */define( 'WP_NETWORK_ADMIN_PAGE', true );/** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! is_super_admin() )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );if ( is_multisite() && ! defined( 'MULTISITE' ) )	wp_die( __( 'The Network creation panel is not for WordPress MU networks.' ) );// We need to create references to ms global tables to enable Network.foreach ( $wpdb->tables( 'ms_global' ) as $table => $prefixed_table )	$wpdb->$table = $prefixed_table;/** * Check for an existing network. * * @since 3.0.0 * @return Whether a network exists. */function network_domain_check() {	global $wpdb;	if ( $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) )		return $wpdb->get_var( "SELECT domain FROM $wpdb->site ORDER BY id ASC LIMIT 1" );	return false;}/** * Allow subdomain install * * @since 3.0.0 * @return bool Whether subdomain install is allowed */function allow_subdomain_install() {	$domain = preg_replace( '|https?://([^/]+)|', '$1', get_option( 'siteurl' ) );	if( false !== strpos( $domain, '/' ) || 'localhost' == $domain || preg_match( '|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|', $domain ) )		return false;	return true;}/** * Allow subdirectory install * * @since 3.0.0 * @return bool Whether subdirectory install is allowed */function allow_subdirectory_install() {	global $wpdb;	if ( apply_filters( 'allow_subdirectory_install', false ) )		return true;	if ( defined( 'ALLOW_SUBDIRECTORY_INSTALL' ) && ALLOW_SUBDIRECTORY_INSTALL )		return true;	$post = $wpdb->get_row( "SELECT ID FROM $wpdb->posts WHERE post_date < DATE_SUB(NOW(), INTERVAL 1 MONTH) AND post_status = 'publish'" );	if ( empty( $post ) )		return true;	return false;}/** * Get base domain of network. * * @since 3.0.0 * @return string Base domain. */function get_clean_basedomain() {	if ( $existing_domain = network_domain_check() )		return $existing_domain;	$domain = preg_replace( '|https?://|', '', get_option( 'siteurl' ) );	if ( $slash = strpos( $domain, '/' ) )		$domain = substr( $domain, 0, $slash );	return $domain;}if ( ! network_domain_check() && ( ! defined( 'WP_ALLOW_MULTISITE' ) || ! WP_ALLOW_MULTISITE ) )	wp_die( __( 'You must define the <code>WP_ALLOW_MULTISITE</code> constant as true in your wp-config.php file to allow creation of a Network.' ) );$title = __( 'Create a Network of WordPress Sites' );$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen allows you to configure a network as having subdomains (<code>site1.example.com</code>) or subdirectories (<code>example.com/site1</code>). Subdomains require wildcard subdomains to be enabled in Apache and DNS records, if your host allows it.') . '</p>' .	'<p>' . __('Choose subdomains or subdirectories; this can only be switched afterwards by reconfiguring your install. Fill out the network details, and click install. If this does not work, you may have to add a wildcard DNS record (for subdomains) or change to another setting in Permalinks (for subdirectories).') . '</p>' .	'<p>' . __('The next screen for Network will give you individually-generated lines of code to add to your wp-config.php and .htaccess files. Make sure the settings of your FTP client make files starting with a dot visible, so that you can find .htaccess; you may have to create this file if it really is not there. Make backup copies of those two files.') . '</p>' .	'<p>' . __('Add a <code>blogs.dir</code> directory under <code>/wp-content</code> and add the designated lines of code to wp-config.php (just before <code>/*...stop editing...*/</code>) and <code>.htaccess</code> (replacing the existing WordPress rules).') . '</p>' .	'<p>' . __('Refreshing your browser will take you to a screen with an archive of those added lines of code. A set of six links under Super Admin will appear at the top of the main left navigation menu. The multisite network is now enabled.') . '</p>' .	'<p>' . __('The choice of subdirectory sites is disabled if this setup is more than a month old because of permalink problems with &#8220;/blog/&#8221; from the main site. This disabling will be addressed soon in a future version.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Create_A_Network" target="_blank">General Network Creation Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Network_SubPanel" target="_blank">Tools > Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php/** * Prints step 1 for Network installation process. * * @todo Realistically, step 1 should be a welcome screen explaining what a Network is and such. Navigating to Tools > Network * 	should not be a sudden "Welcome to a new install process! Fill this out and click here." See also contextual help todo. * * @since 3.0.0 */function network_step1( $errors = false ) {	global $is_apache;	if ( get_option( 'siteurl' ) != get_option( 'home' ) ) {		echo '<div class="error"><p><strong>' . __('Error:') . '</strong> ' . sprintf( __( 'Your <strong>WordPress address</strong> must match your <strong>Site address</strong> before creating a Network. See <a href="%s">General Settings</a>.' ), esc_url( admin_url( 'options-general.php' ) ) ) . '</p></div>';		echo '</div>';		include ('./admin-footer.php' );		die();	}	$active_plugins = get_option( 'active_plugins' );	if ( ! empty( $active_plugins ) ) {		echo '<div class="updated"><p><strong>' . __('Warning:') . '</strong> ' . sprintf( __( 'Please <a href="%s">deactivate your plugins</a> before enabling the Network feature.' ), admin_url( 'plugins.php?plugin_status=active' ) ) . '</p></div><p>' . __( 'Once the network is created, you may reactivate your plugins.' ) . '</p>';		echo '</div>';		include( './admin-footer.php' );		die();	}	$hostname = get_clean_basedomain();	$has_ports = strstr( $hostname, ':' );	if ( ( false !== $has_ports && ! in_array( $has_ports, array( ':80', ':443' ) ) ) ) {		echo '<div class="error"><p><strong>' . __( 'Error:') . '</strong> ' . __( 'You cannot install a network of sites with your server address.' ) . '</p></div>';		echo '<p>' . sprintf( __( 'You cannot use port numbers such as <code>%s</code>.' ), $has_ports ) . '</p>';		echo '<a href="' . esc_url( admin_url() ) . '">' . __( 'Return to Dashboard' ) . '</a>';		echo '</div>';		include( './admin-footer.php' );		die();	}	echo '<form method="post" action="">';	wp_nonce_field( 'install-network-1' );	$error_codes = array();	if ( is_wp_error( $errors ) ) {		echo '<div class="error"><p><strong>' . __( 'ERROR: The network could not be created.' ) . '</strong></p>';		foreach ( $errors->get_error_messages() as $error )			echo "<p>$error</p>";		echo '</div>';		$error_codes = $errors->get_error_codes();	}	if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )		echo '<div class="error"><p><strong>' . __('Warning!') . '</strong> ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</p></div>';	$site_name = ( ! empty( $_POST['sitename'] ) && ! in_array( 'empty_sitename', $error_codes ) ) ? $_POST['sitename'] : sprintf( _x('%s Sites', 'Default network name' ), get_option( 'blogname' ) );	$admin_email = ( ! empty( $_POST['email'] ) && ! in_array( 'invalid_email', $error_codes ) ) ? $_POST['email'] : get_option( 'admin_email' );	?>	<p><?php _e( 'Welcome to the Network installation process!' ); ?></p>	<p><?php _e( 'Fill in the information below and you&#8217;ll be on your way to creating a network of WordPress sites. We will create configuration files in the next step.' ); ?></p>	<?php	if ( isset( $_POST['subdomain_install'] ) ) {		$subdomain_install = (bool) $_POST['subdomain_install'];	} elseif ( apache_mod_loaded('mod_rewrite') ) { // assume nothing		$subdomain_install = true;	} elseif ( !allow_subdirectory_install() ) {		$subdomain_install = true;	} else {		$subdomain_install = false;		if ( $got_mod_rewrite = got_mod_rewrite() ) // dangerous assumptions			echo '<div class="updated inline"><p><strong>' . __( 'Note:' ) . '</strong> ' . __( 'Please make sure the Apache <code>mod_rewrite</code> module is installed as it will be used at the end of this installation.' ) . '</p>';		elseif ( $is_apache )			echo '<div class="error inline"><p><strong>' . __( 'Warning!' ) . '</strong> ' . __( 'It looks like the Apache <code>mod_rewrite</code> module is not installed.' ) . '</p>';		if ( $got_mod_rewrite || $is_apache ) // Protect against mod_rewrite mimicry (but ! Apache)			echo '<p>' . __( 'If <code>mod_rewrite</code> is disabled, ask your administrator to enable that module, or look at the <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html">Apache documentation</a> or <a href="http://www.google.com/search?q=apache+mod_rewrite">elsewhere</a> for help setting it up.' ) . '</p></div>';	}	if ( allow_subdomain_install() && allow_subdirectory_install() ) : ?>		<h3><?php esc_html_e( 'Addresses of Sites in your Network' ); ?></h3>		<p><?php _e( 'Please choose whether you would like sites in your WordPress network to use sub-domains or sub-directories. <strong>You cannot change this later.</strong>' ); ?></p>		<p><?php _e( 'You will need a wildcard DNS record if you are going to use the virtual host (sub-domain) functionality.' ); ?></p>		<?php // @todo: Link to an MS readme? ?>		<table class="form-table">			<tr>				<th><label><input type='radio' name='subdomain_install' value='1'<?php checked( $subdomain_install ); ?> /> <?php _e( 'Sub-domains' ); ?></label></th>				<td><?php printf( _x( 'like <code>site1.%1$s</code> and <code>site2.%1$s</code>', 'subdomain examples' ), $hostname ); ?></td>			</tr>			<tr>				<th><label><input type='radio' name='subdomain_install' value='0'<?php checked( ! $subdomain_install ); ?> /> <?php _e( 'Sub-directories' ); ?></label></th>				<td><?php printf( _x( 'like <code>%1$s/site1</code> and <code>%1$s/site2</code>', 'subdirectory examples' ), $hostname ); ?></td>			</tr>		</table><?php	endif;		$is_www = ( 0 === strpos( $hostname, 'www.' ) );		if ( $is_www ) :		?>		<h3><?php esc_html_e( 'Server Address' ); ?></h3>		<p><?php printf( __( 'We recommend you change your siteurl to <code>%1$s</code> before enabling the network feature. It will still be possible to visit your site using the <code>www</code> prefix with an address like <code>%2$s</code> but any links will not have the <code>www</code> prefix.' ), substr( $hostname, 4 ), $hostname ); ?></h3>		<table class="form-table">			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		</table>		<?php endif; ?>		<h3><?php esc_html_e( 'Network Details' ); ?></h3>		<table class="form-table">		<?php if ( 'localhost' == $hostname ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because you are using <code>localhost</code>, the sites in your WordPress network must use sub-directories. Consider using <code>localhost.localdomain</code> if you wish to use sub-domains.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdomain_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because your install is in a directory, the sites in your WordPress network must use sub-directories.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdirectory_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-domain Install' ); ?></th>				<td><?php _e( 'Because your install is not new, the sites in your WordPress network must use sub-domains.' );					echo ' <strong>' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php endif; ?>		<?php if ( ! $is_www ) : ?>			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		<?php endif; ?>			<tr>				<th scope='row'><?php esc_html_e( 'Network Title' ); ?></th>				<td>					<input name='sitename' type='text' size='45' value='<?php echo esc_attr( $site_name ); ?>' />					<br /><?php _e( 'What would you like to call your network?' ); ?>				</td>			</tr>			<tr>				<th scope='row'><?php esc_html_e( 'Admin E-mail Address' ); ?></th>				<td>					<input name='email' type='text' size='45' value='<?php echo esc_attr( $admin_email ); ?>' />					<br /><?php _e( 'Your email address.' ); ?>				</td>			</tr>		</table>		<p class='submit'><input class="button-primary" name='submit' type='submit' value='<?php esc_attr_e( 'Install' ); ?>' /></p>	</form>		<?php}/** * Prints step 2 for Network installation process. * * @since 3.0.0 */function network_step2( $errors = false ) {	global $base, $wpdb;	$hostname = get_clean_basedomain();	// Wildcard DNS message.	if ( is_wp_error( $errors ) )		echo '<div class="error">' . $errors->get_error_message() . '</div>';	if ( $_POST ) {		$subdomain_install = allow_subdomain_install() ? ( allow_subdirectory_install() ? ! empty( $_POST['subdomain_install'] ) : true ) : false;	} else {		if ( is_multisite() ) {			$subdomain_install = is_subdomain_install();?>	<div class="updated"><p><strong><?php _e( 'Notice: The Network feature is already enabled.' ); ?></strong> <?php _e( 'The original configuration steps are shown here for reference.' ); ?></p></div><?php	} else {			$subdomain_install = (bool) $wpdb->get_var( "SELECT meta_value FROM $wpdb->sitemeta WHERE site_id = 1 AND meta_key = 'subdomain_install'" );?>	<div class="error"><p><strong><?php _e('Warning:'); ?></strong> <?php _e( 'An existing WordPress network was detected.' ); ?></p></div>	<p><?php _e( 'Please complete the configuration steps. To create a new network, you will need to empty or remove the network database tables.' ); ?></p><?php		}	}	if ( $_POST || ! is_multisite() ) {?>		<h3><?php esc_html_e( 'Enabling the Network' ); ?></h3>		<p><?php _e( 'Complete the following steps to enable the features for creating a network of sites.' ); ?></p>		<div class="updated inline"><p><?php			if ( iis7_supports_permalinks() )				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> file.' );			else				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> and <code>.htaccess</code> files.' );		?></p></div><?php	}?>		<ol>			<li><p><?php				printf( __( 'Create a <code>blogs.dir</code> directory in <code>%s</code>. This directory is used to stored uploaded media for your additional sites and must be writeable by the web server.' ), WP_CONTENT_DIR );				if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )					echo ' <strong>' . __('Warning:') . ' ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</strong';			?></p></li>			<li><p><?php printf( __( 'Add the following to your <code>wp-config.php</code> file in <code>%s</code> <strong>above</strong> the line reading <code>/* That&#8217;s all, stop editing! Happy blogging. */</code>:' ), ABSPATH ); ?></p>				<textarea class="code" readonly="readonly" cols="100" rows="7">define( 'MULTISITE', true );define( 'SUBDOMAIN_INSTALL', <?php echo $subdomain_install ? 'true' : 'false'; ?> );$base = '<?php echo $base; ?>';define( 'DOMAIN_CURRENT_SITE', '<?php echo $hostname; ?>' );define( 'PATH_CURRENT_SITE', '<?php echo $base; ?>' );define( 'SITE_ID_CURRENT_SITE', 1 );define( 'BLOG_ID_CURRENT_SITE', 1 );</textarea><?php	$keys_salts = array( 'AUTH_KEY' => '', 'SECURE_AUTH_KEY' => '', 'LOGGED_IN_KEY' => '', 'NONCE_KEY' => '', 'AUTH_SALT' => '', 'SECURE_AUTH_SALT' => '', 'LOGGED_IN_SALT' => '', 'NONCE_SALT' => '' );	foreach ( $keys_salts as $c => $v ) {		if ( defined( $c ) )			unset( $keys_salts[ $c ] );	}	if ( ! empty( $keys_salts ) ) {		$from_api = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );		if ( is_wp_error( $from_api ) ) {			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = wp_generate_password( 64, true, true );			}		} else {			$from_api = explode( "\n", wp_remote_retrieve_body( $from_api ) );			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = substr( array_shift( $from_api ), 28, 64 );			}		}		$num_keys_salts = count( $keys_salts );?>	<p><?php		echo _n( 'This unique authentication key is also missing from your <code>wp-config.php</code> file.', 'These unique authentication keys are also missing from your <code>wp-config.php</code> file.', $num_keys_salts ); ?> <?php _e( 'To make your installation more secure, you should also add:' ) ?></p>	<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $num_keys_salts; ?>"><?php	foreach ( $keys_salts as $c => $v ) {		echo "\ndefine( '$c', '$v' );";	}?></textarea><?php	}?></li><?php	if ( iis7_supports_permalinks() ) :			if ( $subdomain_install ) {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			} else {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />                    <action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 5" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 6" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 7" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			}	?>		<li><p><?php printf( __( 'Add the following to your <code>web.config</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="20">		<?php echo wp_htmledit_pre( $web_config_file ); ?>		</textarea></li>		</ol>	<?php else : // end iis7_supports_permalinks(). construct an htaccess file instead:		$htaccess_file = 'RewriteEngine OnRewriteBase ' . $base . 'RewriteRule ^index\.php$ - [L]# uploaded filesRewriteRule ^' . ( $subdomain_install ? '' : '([_0-9a-zA-Z-]+/)?' ) . 'files/(.+) wp-includes/ms-files.php?file=$' . ( $subdomain_install ? 1 : 2 ) . ' [L]' . "\n";		if ( ! $subdomain_install )			$htaccess_file .= "\n# add a trailing slash to /wp-admin\n" . 'RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]' . "\n";		$htaccess_file .= "\n" . 'RewriteCond %{REQUEST_FILENAME} -f [OR]RewriteCond %{REQUEST_FILENAME} -dRewriteRule ^ - [L]';		// @todo custom content dir.		if ( ! $subdomain_install )			$htaccess_file .= "\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]";		$htaccess_file .= "\nRewriteRule . index.php [L]";		?>		<li><p><?php printf( __( 'Add the following to your <code>.htaccess</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $subdomain_install ? 11 : 16; ?>"><?php echo wp_htmledit_pre( $htaccess_file ); ?></textarea></li>		</ol>	<?php endif; // end IIS/Apache code branches.	if ( !is_multisite() ) { ?>		<p><?php printf( __( 'Once you complete these steps, your network is enabled and configured. You will have to log in again.') ); ?> <a href="<?php echo esc_url( site_url( 'wp-login.php' ) ); ?>"><?php _e( 'Log In' ); ?></a></p><?php	}}$base = trailingslashit( stripslashes( dirname( dirname( $_SERVER['SCRIPT_NAME'] ) ) ) );if ( $_POST ) {	check_admin_referer( 'install-network-1' );	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	// create network tables	install_network();	$hostname = get_clean_basedomain();	$subdomain_install = !allow_subdomain_install() ? false : (bool) $_POST['subdomain_install'];	if ( ! network_domain_check() ) {		$result = populate_network( 1, get_clean_basedomain(), sanitize_email( $_POST['email'] ), stripslashes( $_POST['sitename'] ), $base, $subdomain_install );		if ( is_wp_error( $result ) ) {			if ( 1 == count( $result->get_error_codes() ) && 'no_wildcard_dns' == $result->get_error_code() )				network_step2( $result );			else				network_step1( $result );		} else {			network_step2();		}	} else {		network_step2();	}} elseif ( is_multisite() || network_domain_check() ) {	network_step2();} else {	network_step1();}?></div><?php include( './admin-footer.php' ); ?>
<?php/** * WordPress Administration Scheme API * * Here we keep the DB structure and option values. * * @package WordPress * @subpackage Administration *//** * The database character collate. * @var string * @global string * @name $charset_collate */$charset_collate = '';// Declare these as global in case schema.php is included from a function.global $wpdb, $wp_queries;if ( ! empty($wpdb->charset) )	$charset_collate = "DEFAULT CHARACTER SET $wpdb->charset";if ( ! empty($wpdb->collate) )	$charset_collate .= " COLLATE $wpdb->collate";/** Create WordPress database tables SQL */$wp_queries = "CREATE TABLE $wpdb->terms ( term_id bigint(20) unsigned NOT NULL auto_increment, name varchar(200) NOT NULL default '', slug varchar(200) NOT NULL default '', term_group bigint(10) NOT NULL default 0, PRIMARY KEY  (term_id), UNIQUE KEY slug (slug), KEY name (name)) $charset_collate;CREATE TABLE $wpdb->term_taxonomy ( term_taxonomy_id bigint(20) unsigned NOT NULL auto_increment, term_id bigint(20) unsigned NOT NULL default 0, taxonomy varchar(32) NOT NULL default '', description longtext NOT NULL, parent bigint(20) unsigned NOT NULL default 0, count bigint(20) NOT NULL default 0, PRIMARY KEY  (term_taxonomy_id), UNIQUE KEY term_id_taxonomy (term_id,taxonomy), KEY taxonomy (taxonomy)) $charset_collate;CREATE TABLE $wpdb->term_relationships ( object_id bigint(20) unsigned NOT NULL default 0, term_taxonomy_id bigint(20) unsigned NOT NULL default 0, term_order int(11) NOT NULL default 0, PRIMARY KEY  (object_id,term_taxonomy_id), KEY term_taxonomy_id (term_taxonomy_id)) $charset_collate;CREATE TABLE $wpdb->commentmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  comment_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY comment_id (comment_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->comments (  comment_ID bigint(20) unsigned NOT NULL auto_increment,  comment_post_ID bigint(20) unsigned NOT NULL default '0',  comment_author tinytext NOT NULL,  comment_author_email varchar(100) NOT NULL default '',  comment_author_url varchar(200) NOT NULL default '',  comment_author_IP varchar(100) NOT NULL default '',  comment_date datetime NOT NULL default '0000-00-00 00:00:00',  comment_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  comment_content text NOT NULL,  comment_karma int(11) NOT NULL default '0',  comment_approved varchar(20) NOT NULL default '1',  comment_agent varchar(255) NOT NULL default '',  comment_type varchar(20) NOT NULL default '',  comment_parent bigint(20) unsigned NOT NULL default '0',  user_id bigint(20) unsigned NOT NULL default '0',  PRIMARY KEY  (comment_ID),  KEY comment_approved (comment_approved),  KEY comment_post_ID (comment_post_ID),  KEY comment_approved_date_gmt (comment_approved,comment_date_gmt),  KEY comment_date_gmt (comment_date_gmt),  KEY comment_parent (comment_parent)) $charset_collate;CREATE TABLE $wpdb->links (  link_id bigint(20) unsigned NOT NULL auto_increment,  link_url varchar(255) NOT NULL default '',  link_name varchar(255) NOT NULL default '',  link_image varchar(255) NOT NULL default '',  link_target varchar(25) NOT NULL default '',  link_description varchar(255) NOT NULL default '',  link_visible varchar(20) NOT NULL default 'Y',  link_owner bigint(20) unsigned NOT NULL default '1',  link_rating int(11) NOT NULL default '0',  link_updated datetime NOT NULL default '0000-00-00 00:00:00',  link_rel varchar(255) NOT NULL default '',  link_notes mediumtext NOT NULL,  link_rss varchar(255) NOT NULL default '',  PRIMARY KEY  (link_id),  KEY link_visible (link_visible)) $charset_collate;CREATE TABLE $wpdb->options (  option_id bigint(20) unsigned NOT NULL auto_increment,  blog_id int(11) NOT NULL default '0',  option_name varchar(64) NOT NULL default '',  option_value longtext NOT NULL,  autoload varchar(20) NOT NULL default 'yes',  PRIMARY KEY  (option_id),  UNIQUE KEY option_name (option_name)) $charset_collate;CREATE TABLE $wpdb->postmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  post_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY post_id (post_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->posts (  ID bigint(20) unsigned NOT NULL auto_increment,  post_author bigint(20) unsigned NOT NULL default '0',  post_date datetime NOT NULL default '0000-00-00 00:00:00',  post_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content longtext NOT NULL,  post_title text NOT NULL,  post_excerpt text NOT NULL,  post_status varchar(20) NOT NULL default 'publish',  comment_status varchar(20) NOT NULL default 'open',  ping_status varchar(20) NOT NULL default 'open',  post_password varchar(20) NOT NULL default '',  post_name varchar(200) NOT NULL default '',  to_ping text NOT NULL,  pinged text NOT NULL,  post_modified datetime NOT NULL default '0000-00-00 00:00:00',  post_modified_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content_filtered text NOT NULL,  post_parent bigint(20) unsigned NOT NULL default '0',  guid varchar(255) NOT NULL default '',  menu_order int(11) NOT NULL default '0',  post_type varchar(20) NOT NULL default 'post',  post_mime_type varchar(100) NOT NULL default '',  comment_count bigint(20) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY post_name (post_name),  KEY type_status_date (post_type,post_status,post_date,ID),  KEY post_parent (post_parent),  KEY post_author (post_author)) $charset_collate;CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->usermeta (  umeta_id bigint(20) unsigned NOT NULL auto_increment,  user_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (umeta_id),  KEY user_id (user_id),  KEY meta_key (meta_key)) $charset_collate;";/** * Create WordPress options and set the default values. * * @since 1.5.0 * @uses $wpdb * @uses $wp_db_version */function populate_options() {	global $wpdb, $wp_db_version, $current_site;	$guessurl = wp_guess_url();	do_action('populate_options');	if ( ini_get('safe_mode') ) {		// Safe mode can break mkdir() so use a flat structure by default.		$uploads_use_yearmonth_folders = 0;	} else {		$uploads_use_yearmonth_folders = 1;	}	$options = array(	'siteurl' => $guessurl,	'blogname' => __('My Site'),	/* translators: blog tagline */	'blogdescription' => __('Just another WordPress site'),	'users_can_register' => 0,	'admin_email' => 'you@example.com',	'start_of_week' => 1,	'use_balanceTags' => 0,	'use_smilies' => 1,	'require_name_email' => 1,	'comments_notify' => 1,	'posts_per_rss' => 10,	'rss_use_excerpt' => 0,	'mailserver_url' => 'mail.example.com',	'mailserver_login' => 'login@example.com',	'mailserver_pass' => 'password',	'mailserver_port' => 110,	'default_category' => 1,	'default_comment_status' => 'open',	'default_ping_status' => 'open',	'default_pingback_flag' => 1,	'default_post_edit_rows' => 10,	'posts_per_page' => 10,	/* translators: default date format, see http://php.net/date */	'date_format' => __('F j, Y'),	/* translators: default time format, see http://php.net/date */	'time_format' => __('g:i a'),	/* translators: links last updated date format, see http://php.net/date */	'links_updated_date_format' => __('F j, Y g:i a'),	'links_recently_updated_prepend' => '<em>',	'links_recently_updated_append' => '</em>',	'links_recently_updated_time' => 120,	'comment_moderation' => 0,	'moderation_notify' => 1,	'permalink_structure' => '',	'gzipcompression' => 0,	'hack_file' => 0,	'blog_charset' => 'UTF-8',	'moderation_keys' => '',	'active_plugins' => array(),	'home' => $guessurl,	'category_base' => '',	'ping_sites' => 'http://rpc.pingomatic.com/',	'advanced_edit' => 0,	'comment_max_links' => 2,	'gmt_offset' => date('Z') / 3600,	// 1.5	'default_email_category' => 1,	'recently_edited' => '',	'template' => WP_DEFAULT_THEME,	'stylesheet' => WP_DEFAULT_THEME,	'comment_whitelist' => 1,	'blacklist_keys' => '',	'comment_registration' => 0,	'rss_language' => 'en',	'html_type' => 'text/html',	// 1.5.1	'use_trackback' => 0,	// 2.0	'default_role' => 'subscriber',	'db_version' => $wp_db_version,	// 2.0.1	'uploads_use_yearmonth_folders' => $uploads_use_yearmonth_folders,	'upload_path' => '',	// 2.1	'blog_public' => '1',	'default_link_category' => 2,	'show_on_front' => 'posts',	// 2.2	'tag_base' => '',	// 2.5	'show_avatars' => '1',	'avatar_rating' => 'G',	'upload_url_path' => '',	'thumbnail_size_w' => 150,	'thumbnail_size_h' => 150,	'thumbnail_crop' => 1,	'medium_size_w' => 300,	'medium_size_h' => 300,	// 2.6	'avatar_default' => 'mystery',	'enable_app' => 0,	'enable_xmlrpc' => 0,	// 2.7	'large_size_w' => 1024,	'large_size_h' => 1024,	'image_default_link_type' => 'file',	'image_default_size' => '',	'image_default_align' => '',	'close_comments_for_old_posts' => 0,	'close_comments_days_old' => 14,	'thread_comments' => 1,	'thread_comments_depth' => 5,	'page_comments' => 0,	'comments_per_page' => 50,	'default_comments_page' => 'newest',	'comment_order' => 'asc',	'sticky_posts' => array(),	'widget_categories' => array(),	'widget_text' => array(),	'widget_rss' => array(),	// 2.8	'timezone_string' => '',	// 2.9	'embed_autourls' => 1,	'embed_size_w' => '',	'embed_size_h' => 600,	// 3.0	'page_for_posts' => 0,	'page_on_front' => 0,	);	// 3.0 multisite	if ( is_multisite() ) {		/* translators: blog tagline */		$options[ 'blogdescription' ] = sprintf(__('Just another %s site'), $current_site->site_name );		$options[ 'permalink_structure' ] = '/%year%/%monthnum%/%day%/%postname%/';	}	// Set autoload to no for these options	$fat_options = array( 'moderation_keys', 'recently_edited', 'blacklist_keys' );	$existing_options = $wpdb->get_col("SELECT option_name FROM $wpdb->options");	$insert = '';	foreach ( $options as $option => $value ) {		if ( in_array($option, $existing_options) )			continue;		if ( in_array($option, $fat_options) )			$autoload = 'no';		else			$autoload = 'yes';		$option = $wpdb->escape($option);		if ( is_array($value) )			$value = serialize($value);		$value = $wpdb->escape($value);		if ( !empty($insert) )			$insert .= ', ';		$insert .= "('$option', '$value', '$autoload')";	}	if ( !empty($insert) )		$wpdb->query("INSERT INTO $wpdb->options (option_name, option_value, autoload) VALUES " . $insert);	// in case it is set, but blank, update "home"	if ( !__get_option('home') ) update_option('home', $guessurl);	// Delete unused options	$unusedoptions = array ('blodotgsping_url', 'bodyterminator', 'emailtestonly', 'phoneemail_separator', 'smilies_directory', 'subjectprefix', 'use_bbcode', 'use_blodotgsping', 'use_phoneemail', 'use_quicktags', 'use_weblogsping', 'weblogs_cache_file', 'use_preview', 'use_htmltrans', 'smilies_directory', 'fileupload_allowedusers', 'use_phoneemail', 'default_post_status', 'default_post_category', 'archive_mode', 'time_difference', 'links_minadminlevel', 'links_use_adminlevels', 'links_rating_type', 'links_rating_char', 'links_rating_ignore_zero', 'links_rating_single_image', 'links_rating_image0', 'links_rating_image1', 'links_rating_image2', 'links_rating_image3', 'links_rating_image4', 'links_rating_image5', 'links_rating_image6', 'links_rating_image7', 'links_rating_image8', 'links_rating_image9', 'weblogs_cacheminutes', 'comment_allowed_tags', 'search_engine_friendly_urls', 'default_geourl_lat', 'default_geourl_lon', 'use_default_geourl', 'weblogs_xml_url', 'new_users_can_blog', '_wpnonce', '_wp_http_referer', 'Update', 'action', 'rich_editing', 'autosave_interval', 'deactivated_plugins', 'can_compress_scripts',		'page_uris', 'update_core', 'update_plugins', 'update_themes', 'doing_cron', 'random_seed', 'rss_excerpt_length', 'secret', 'use_linksupdate', 'default_comment_status_page' );	foreach ($unusedoptions as $option)		delete_option($option);	// delete obsolete magpie stuff	$wpdb->query("DELETE FROM $wpdb->options WHERE option_name REGEXP '^rss_[0-9a-f]{32}(_ts)?$'");}/** * Execute WordPress role creation for the various WordPress versions. * * @since 2.0.0 */function populate_roles() {	populate_roles_160();	populate_roles_210();	populate_roles_230();	populate_roles_250();	populate_roles_260();	populate_roles_270();	populate_roles_280();	populate_roles_300();}/** * Create the roles for WordPress 2.0 * * @since 2.0.0 */function populate_roles_160() {	// Add roles	// Dummy gettext calls to get strings in the catalog.	/* translators: user role */	_x('Administrator', 'User role');	/* translators: user role */	_x('Editor', 'User role');	/* translators: user role */	_x('Author', 'User role');	/* translators: user role */	_x('Contributor', 'User role');	/* translators: user role */	_x('Subscriber', 'User role');	add_role('administrator', 'Administrator');	add_role('editor', 'Editor');	add_role('author', 'Author');	add_role('contributor', 'Contributor');	add_role('subscriber', 'Subscriber');	// Add caps for Administrator role	$role =& get_role('administrator');	$role->add_cap('switch_themes');	$role->add_cap('edit_themes');	$role->add_cap('activate_plugins');	$role->add_cap('edit_plugins');	$role->add_cap('edit_users');	$role->add_cap('edit_files');	$role->add_cap('manage_options');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('import');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_10');	$role->add_cap('level_9');	$role->add_cap('level_8');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Editor role	$role =& get_role('editor');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Author role	$role =& get_role('author');	$role->add_cap('upload_files');	$role->add_cap('edit_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('read');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Contributor role	$role =& get_role('contributor');	$role->add_cap('edit_posts');	$role->add_cap('read');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Subscriber role	$role =& get_role('subscriber');	$role->add_cap('read');	$role->add_cap('level_0');}/** * Create and modify WordPress roles for WordPress 2.1. * * @since 2.1.0 */function populate_roles_210() {	$roles = array('administrator', 'editor');	foreach ($roles as $role) {		$role =& get_role($role);		if ( empty($role) )			continue;		$role->add_cap('edit_others_pages');		$role->add_cap('edit_published_pages');		$role->add_cap('publish_pages');		$role->add_cap('delete_pages');		$role->add_cap('delete_others_pages');		$role->add_cap('delete_published_pages');		$role->add_cap('delete_posts');		$role->add_cap('delete_others_posts');		$role->add_cap('delete_published_posts');		$role->add_cap('delete_private_posts');		$role->add_cap('edit_private_posts');		$role->add_cap('read_private_posts');		$role->add_cap('delete_private_pages');		$role->add_cap('edit_private_pages');		$role->add_cap('read_private_pages');	}	$role =& get_role('administrator');	if ( ! empty($role) ) {		$role->add_cap('delete_users');		$role->add_cap('create_users');	}	$role =& get_role('author');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');		$role->add_cap('delete_published_posts');	}	$role =& get_role('contributor');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');	}}/** * Create and modify WordPress roles for WordPress 2.3. * * @since 2.3.0 */function populate_roles_230() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'unfiltered_upload' );	}}/** * Create and modify WordPress roles for WordPress 2.5. * * @since 2.5.0 */function populate_roles_250() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'edit_dashboard' );	}}/** * Create and modify WordPress roles for WordPress 2.6. * * @since 2.6.0 */function populate_roles_260() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_plugins' );		$role->add_cap( 'delete_plugins' );	}}/** * Create and modify WordPress roles for WordPress 2.7. * * @since 2.7.0 */function populate_roles_270() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_plugins' );		$role->add_cap( 'update_themes' );	}}/** * Create and modify WordPress roles for WordPress 2.8. * * @since 2.8.0 */function populate_roles_280() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_themes' );	}}/** * Create and modify WordPress roles for WordPress 3.0. * * @since 3.0.0 */function populate_roles_300() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_core' );		$role->add_cap( 'list_users' );		$role->add_cap( 'remove_users' );		$role->add_cap( 'add_users' );		$role->add_cap( 'promote_users' );		$role->add_cap( 'edit_theme_options' );		$role->add_cap( 'delete_themes' );		$role->add_cap( 'export' );	}}/** * populate network settings * * @since 3.0.0 * * @param int $network_id id of network to populate * @return bool|WP_Error True on success, or WP_Error on warning (with the install otherwise successful, * 	so the error code must be checked) or failure. */function populate_network( $network_id = 1, $domain = '', $email = '', $site_name = '', $path = '/', $subdomain_install = false ) {	global $wpdb, $current_site, $wp_db_version, $wp_rewrite;	$errors = new WP_Error();	if ( '' == $domain )		$errors->add( 'empty_domain', __( 'You must provide a domain name.' ) );	if ( '' == $site_name )		$errors->add( 'empty_sitename', __( 'You must provide a name for your network of sites.' ) );	// check for network collision	if ( $network_id == $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE id = %d", $network_id ) ) )		$errors->add( 'siteid_exists', __( 'The network already exists.' ) );	$site_user = get_user_by_email( $email );	if ( ! is_email( $email ) )		$errors->add( 'invalid_email', __( 'You must provide a valid e-mail address.' ) );	if ( $errors->get_error_code() )		return $errors;	// set up site tables	$template = get_option( 'template' );	$stylesheet = get_option( 'stylesheet' );	$allowed_themes = array( $stylesheet => true );	if ( $template != $stylesheet )		$allowed_themes[ $template ] = true;	if ( WP_DEFAULT_THEME != $stylesheet && WP_DEFAULT_THEME != $template )		$allowed_themes[ WP_DEFAULT_THEME ] = true;	if ( 1 == $network_id ) {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path ) );		$network_id = $wpdb->insert_id;	} else {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path, 'id' => $network_id ) );	}	if ( !is_multisite() ) {		$site_admins = array( $site_user->user_login );		$users = get_users_of_blog();		if ( $users ) {			foreach ( $users as $user ) {				if ( is_super_admin( $user->ID ) && !in_array( $user->user_login, $site_admins ) )					$site_admins[] = $user->user_login;			}		}	} else {		$site_admins = get_site_option( 'site_admins' );	}	$welcome_email = __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' );	$sitemeta = array(		'site_name' => $site_name,		'admin_email' => $site_user->user_email,		'admin_user_id' => $site_user->ID,		'registration' => 'none',		'upload_filetypes' => 'jpg jpeg png gif mp3 mov avi wmv midi mid pdf',		'blog_upload_space' => 10,		'fileupload_maxk' => 1500,		'site_admins' => $site_admins,		'allowedthemes' => $allowed_themes,		'illegal_names' => array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator', 'files' ),		'wpmu_upgrade_site' => $wp_db_version,		'welcome_email' => $welcome_email,		'first_post' => __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ),		// @todo - network admins should have a method of editing the network siteurl (used for cookie hash)		'siteurl' => get_option( 'siteurl' ) . '/',		'add_new_users' => '0',		'upload_space_check_disabled' => '0',		'subdomain_install' => intval( $subdomain_install ),		'global_terms_enabled' => global_terms_enabled() ? '1' : '0'	);	if ( !intval( $subdomain_install ) )		$sitemeta['illegal_names'][] = 'blog';	$insert = '';	foreach ( $sitemeta as $meta_key => $meta_value ) {		$meta_key = $wpdb->escape( $meta_key );		if ( is_array( $meta_value ) )			$meta_value = serialize( $meta_value );		$meta_value = $wpdb->escape( $meta_value );		if ( !empty( $insert ) )			$insert .= ', ';		$insert .= "( $network_id, '$meta_key', '$meta_value')";	}	$wpdb->query( "INSERT INTO $wpdb->sitemeta ( site_id, meta_key, meta_value ) VALUES " . $insert );	$current_site->domain = $domain;	$current_site->path = $path;	$current_site->site_name = ucfirst( $domain );	if ( !is_multisite() ) {		$wpdb->insert( $wpdb->blogs, array( 'site_id' => $network_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time( 'mysql' ) ) );		$blog_id = $wpdb->insert_id;		update_user_meta( $site_user->ID, 'source_domain', $domain );		update_user_meta( $site_user->ID, 'primary_blog', $blog_id );		if ( !$upload_path = get_option( 'upload_path' ) ) {			$upload_path = substr( WP_CONTENT_DIR, strlen( ABSPATH ) ) . '/uploads';			update_option( 'upload_path', $upload_path );		}		update_option( 'fileupload_url', get_option( 'siteurl' ) . '/' . $upload_path );	}	if ( $subdomain_install )		update_option( 'permalink_structure', '/%year%/%monthnum%/%day%/%postname%/');	else		update_option( 'permalink_structure', '/blog/%year%/%monthnum%/%day%/%postname%/');	$wp_rewrite->flush_rules();	if ( $subdomain_install ) {		$vhost_ok = false;		$errstr = '';		$hostname = substr( md5( time() ), 0, 6 ) . '.' . $domain; // Very random hostname!		$page = wp_remote_get( 'http://' . $hostname, array( 'timeout' => 5, 'httpversion' => '1.1' ) );		if ( is_wp_error( $page ) )			$errstr = $page->get_error_message();		elseif ( 200 == $page['response']['code'] )				$vhost_ok = true;		if ( ! $vhost_ok ) {			$msg = '<p><strong>' . __( 'Warning! Wildcard DNS may not be configured correctly!' ) . '</strong></p>';			$msg .= '<p>' . sprintf( __( 'The installer attempted to contact a random hostname (<code>%1$s</code>) on your domain.' ), $hostname );			if ( ! empty ( $errstr ) )				$msg .= ' ' . sprintf( __( 'This resulted in an error message: %s' ), '<code>' . $errstr . '</code>' );			$msg .= '</p>';			$msg .= '<p>' . _e( 'To use a subdomain configuration, you must have a wildcard entry in your DNS. This usually means adding a <code>*</code> hostname record pointing at your web server in your DNS configuration tool.' ) . '</p>';			$msg .= '<p>' . __( 'You can still use your site but any subdomain you create may not be accessible. If you know your DNS is correct, ignore this message.' ) . '</p>';			return new WP_Error( 'no_wildcard_dns', $msg );		}	}	return true;}?>
<?php/** * Edit tag form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( empty($tag_ID) ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'You did not select an item for editing.' ); ?></strong></p></div><?php	return;}if ( 'category' == $taxonomy )	do_action('edit_category_form_pre', $tag );else	do_action('edit_tag_form_pre', $tag);do_action($taxonomy . '_pre_edit_form', $tag, $taxonomy);  ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo $tax->labels->edit_item; ?></h2><div id="ajax-response"></div><form name="edittag" id="edittag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="editedtag" /><input type="hidden" name="tag_ID" value="<?php echo esc_attr($tag->term_id) ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field('update-tag_' . $tag_ID); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _ex('Name', 'Taxonomy Name'); ?></label></th>			<td><input name="name" id="name" type="text" value="<?php if ( isset( $tag->name ) ) echo esc_attr($tag->name); ?>" size="40" aria-required="true" />			<p class="description"><?php _e('The name is how it appears on your site.'); ?></p></td>		</tr><?php if ( !global_terms_enabled() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php if ( isset( $tag->slug ) ) echo esc_attr(apply_filters('editable_slug', $tag->slug)); ?>" size="40" />			<p class="description"><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></td>		</tr><?php } ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label></th>			<td>				<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'name' => 'parent', 'orderby' => 'name', 'taxonomy' => $taxonomy, 'selected' => $tag->parent, 'exclude' => $tag->term_id, 'hierarchical' => true, 'show_option_none' => __('None'))); ?><br />				<?php if ( 'category' == $taxonomy ) : ?>				<span class="description"><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></span>				<?php endif; ?>			</td>		</tr><?php endif; // is_taxonomy_hierarchical() ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _ex('Description', 'Taxonomy Description'); ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo esc_html($tag->description); ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default, however some themes may show it.'); ?></span></td>		</tr>		<?php		if ( 'category' == $taxonomy )			do_action('edit_category_form_fields', $tag);		else			do_action('edit_tag_form_fields', $tag);		do_action($taxonomy . '_edit_form_fields', $tag, $taxonomy);		?>	</table><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form', $tag);else	do_action('edit_tag_form', $tag);do_action($taxonomy . '_edit_form', $tag, $taxonomy);?><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr( __( 'Update' ) ); ?>" /></p></form></div>
<?php/** * Edit user administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'redirect', 'profile', 'user_id', 'wp_http_referer'));$user_id = (int) $user_id;$current_user = wp_get_current_user();if ( ! defined( 'IS_PROFILE_PAGE' ) )	define( 'IS_PROFILE_PAGE', ( $user_id == $current_user->ID ) );if ( ! $user_id && IS_PROFILE_PAGE )	$user_id = $current_user->ID;elseif ( ! $user_id && ! IS_PROFILE_PAGE )	wp_die(__( 'Invalid user ID.' ) );elseif ( ! get_userdata( $user_id ) )	wp_die( __('Invalid user ID.') );wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');$title = IS_PROFILE_PAGE ? __('Profile') : __('Edit User');if ( current_user_can('edit_users') && !IS_PROFILE_PAGE )	$submenu_file = 'users.php';else	$submenu_file = 'profile.php';$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('Your profile contains information about you (your &#8220;account&#8221;) as well as some personal options related to using WordPress.') . '</p>' .    '<p>' . __('You can change your password, turn on keyboard shortcuts, change the color scheme of your WordPress administration screens, and turn off the WYSIWYG (Visual) editor, among other things.') . '</p>' .    '<p>' . __('Your username cannot be changed, but you can use other fields to enter your real name or a nickname, and change which name to display on your posts.') . '</p>' .    '<p>' . __('Required fields are indicated; the rest are optional. Profile information will only be displayed if your theme is set up to do so.') . '</p>' .    '<p>' . __('Remember to click the Update Profile button when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Your_Profile_SubPanel" target="_blank">Documentation on User Profiles</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$wp_http_referer = remove_query_arg(array('update', 'delete_count'), stripslashes($wp_http_referer));$all_post_caps = array('posts', 'pages');$user_can_edit = false;foreach ( $all_post_caps as $post_cap )	$user_can_edit |= current_user_can("edit_$post_cap");/** * Optional SSL preference that can be turned on by hooking to the 'personal_options' action. * * @since 2.7.0 * * @param object $user User data object */function use_ssl_preference($user) {?>	<tr>		<th scope="row"><?php _e('Use https')?></th>		<td><label for="use_ssl"><input name="use_ssl" type="checkbox" id="use_ssl" value="1" <?php checked('1', $user->use_ssl); ?> /> <?php _e('Always use https when visiting the admin'); ?></label></td>	</tr><?php}// Only allow super admins on multisite to edit every user.if ( is_multisite() && ! current_user_can( 'manage_network_users' ) && $user_id != $current_user->ID && ! apply_filters( 'enable_edit_any_user_configuration', true ) )	wp_die( __( 'You do not have permission to edit this user.' ) );// Execute confirmed email change. See send_confirmation_on_profile_email().if ( is_multisite() && IS_PROFILE_PAGE && isset( $_GET[ 'newuseremail' ] ) && $current_user->ID ) {	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email[ 'hash' ] == $_GET[ 'newuseremail' ] ) {		$user->ID = $current_user->ID;		$user->user_email = esc_html( trim( $new_email[ 'newemail' ] ) );		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $current_user->user_login ) ) )			$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $user->user_email, $current_user->user_login ) );		wp_update_user( get_object_vars( $user ) );		delete_option( $current_user->ID . '_new_email' );		wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );		die();	}} elseif ( is_multisite() && IS_PROFILE_PAGE && !empty( $_GET['dismiss'] ) && $current_user->ID . '_new_email' == $_GET['dismiss'] ) {	delete_option( $current_user->ID . '_new_email' );	wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );	die();}switch ($action) {case 'switchposts':check_admin_referer();/* TODO: Switch all posts from one user to another user */break;case 'update':check_admin_referer('update-user_' . $user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));if ( IS_PROFILE_PAGE )	do_action('personal_options_update', $user_id);else	do_action('edit_user_profile_update', $user_id);if ( !is_multisite() ) {	$errors = edit_user($user_id);} else {	$user = get_userdata( $user_id );	// Update the email address in signups, if present.	if ( $user->user_login && isset( $_POST[ 'email' ] ) && is_email( $_POST[ 'email' ] ) && $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $user->user_login ) ) )		$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $_POST[ 'email' ], $user_login ) );	// WPMU must delete the user from the current blog if WP added him after editing.	$delete_role = false;	$blog_prefix = $wpdb->get_blog_prefix();	if ( $user_id != $current_user->ID ) {		$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$user_id}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );		if ( null == $cap && $_POST[ 'role' ] == '' ) {			$_POST[ 'role' ] = 'contributor';			$delete_role = true;		}	}	if ( !isset( $errors ) || ( isset( $errors ) && is_object( $errors ) && false == $errors->get_error_codes() ) )		$errors = edit_user($user_id);	if ( $delete_role ) // stops users being added to current blog when they are edited		delete_user_meta( $user_id, $blog_prefix . 'capabilities' );	if ( is_multisite() && !IS_PROFILE_PAGE && current_user_can( 'manage_network_options' ) && !isset($super_admins) && empty( $_POST['super_admin'] ) == is_super_admin( $user_id ) )		empty( $_POST['super_admin'] ) ? revoke_super_admin( $user_id ) : grant_super_admin( $user_id );}if ( !is_wp_error( $errors ) ) {	$redirect = (IS_PROFILE_PAGE ? "profile.php?" : "user-edit.php?user_id=$user_id&"). "updated=true";	$redirect = add_query_arg('wp_http_referer', urlencode($wp_http_referer), $redirect);	wp_redirect($redirect);	exit;}default:$profileuser = get_user_to_edit($user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));include ('admin-header.php');?><?php if ( !IS_PROFILE_PAGE && is_super_admin( $profileuser->ID ) && current_user_can( 'manage_network_options' ) ) { ?>	<div class="updated"><p><strong><?php _e('Important:'); ?></strong> <?php _e('This user has super admin privileges.'); ?></p></div><?php } ?><?php if ( isset($_GET['updated']) ) : ?><div id="message" class="updated">	<p><strong><?php _e('User updated.') ?></strong></p>	<?php if ( $wp_http_referer && !IS_PROFILE_PAGE ) : ?>	<p><a href="users.php"><?php _e('&larr; Back to Authors and Users'); ?></a></p>	<?php endif; ?></div><?php endif; ?><?php if ( isset( $errors ) && is_wp_error( $errors ) ) : ?><div class="error"><p><?php echo implode( "</p>\n<p>", $errors->get_error_messages() ); ?></p></div><?php endif; ?><div class="wrap" id="profile-page"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="your-profile" action="<?php echo esc_url( admin_url( IS_PROFILE_PAGE ? 'profile.php' : 'user-edit.php' ) ); ?>" method="post"<?php do_action('user_edit_form_tag'); ?>><?php wp_nonce_field('update-user_' . $user_id) ?><?php if ( $wp_http_referer ) : ?>	<input type="hidden" name="wp_http_referer" value="<?php echo esc_url($wp_http_referer); ?>" /><?php endif; ?><p><input type="hidden" name="from" value="profile" /><input type="hidden" name="checkuser_id" value="<?php echo $user_ID ?>" /></p><h3><?php _e('Personal Options'); ?></h3><table class="form-table"><?php if ( rich_edit_exists() && !( IS_PROFILE_PAGE && !$user_can_edit ) ) : // don't bother showing the option if the editor has been removed ?>	<tr>		<th scope="row"><?php _e('Visual Editor')?></th>		<td><label for="rich_editing"><input name="rich_editing" type="checkbox" id="rich_editing" value="false" <?php checked('false', $profileuser->rich_editing); ?> /> <?php _e('Disable the visual editor when writing'); ?></label></td>	</tr><?php endif; ?><?php if ( count($_wp_admin_css_colors) > 1 && has_action('admin_color_scheme_picker') ) : ?><tr><th scope="row"><?php _e('Admin Color Scheme')?></th><td><?php do_action( 'admin_color_scheme_picker' ); ?></td></tr><?phpendif; // $_wp_admin_css_colorsif ( !( IS_PROFILE_PAGE && !$user_can_edit ) ) : ?><tr><th scope="row"><?php _e( 'Keyboard Shortcuts' ); ?></th><td><label for="comment_shortcuts"><input type="checkbox" name="comment_shortcuts" id="comment_shortcuts" value="true" <?php if ( !empty($profileuser->comment_shortcuts) ) checked('true', $profileuser->comment_shortcuts); ?> /> <?php _e('Enable keyboard shortcuts for comment moderation.'); ?></label> <?php _e('<a href="http://codex.wordpress.org/Keyboard_Shortcuts">More information</a>'); ?></td></tr><?phpendif;do_action('personal_options', $profileuser);?></table><?php	if ( IS_PROFILE_PAGE )		do_action('profile_personal_options', $profileuser);?><h3><?php _e('Name') ?></h3><table class="form-table">	<tr>		<th><label for="user_login"><?php _e('Username'); ?></label></th>		<td><input type="text" name="user_login" id="user_login" value="<?php echo esc_attr($profileuser->user_login); ?>" disabled="disabled" class="regular-text" /> <span class="description"><?php _e('Usernames cannot be changed.'); ?></span></td>	</tr><?php if ( !IS_PROFILE_PAGE ): ?><tr><th><label for="role"><?php _e('Role:') ?></label></th><td><select name="role" id="role"><?php// Get the highest/primary role for this user// TODO: create a function that does this: wp_get_user_role()$user_roles = $profileuser->roles;$user_role = array_shift($user_roles);// print the full list of roles with the primary one selected.wp_dropdown_roles($user_role);// print the 'no role' option. Make it selected if the user has no role yet.if ( $user_role )	echo '<option value="">' . __('&mdash; No role for this site &mdash;') . '</option>';else	echo '<option value="" selected="selected">' . __('&mdash; No role for this site &mdash;') . '</option>';?></select><?php if ( is_multisite() && current_user_can( 'manage_network_options' ) && !isset($super_admins) ) { ?><p><label><input type="checkbox" id="super_admin" name="super_admin"<?php checked( is_super_admin( $profileuser->ID ) ); ?> /> <?php _e( 'Grant this user super admin privileges for the Network.'); ?></label></p><?php } ?></td></tr><?php endif; //!IS_PROFILE_PAGE ?><tr>	<th><label for="first_name"><?php _e('First Name') ?></label></th>	<td><input type="text" name="first_name" id="first_name" value="<?php echo esc_attr($profileuser->first_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="last_name"><?php _e('Last Name') ?></label></th>	<td><input type="text" name="last_name" id="last_name" value="<?php echo esc_attr($profileuser->last_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="nickname"><?php _e('Nickname'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="nickname" id="nickname" value="<?php echo esc_attr($profileuser->nickname) ?>" class="regular-text" /></td></tr><tr>	<th><label for="display_name"><?php _e('Display name publicly as') ?></label></th>	<td>		<select name="display_name" id="display_name">		<?php			$public_display = array();			$public_display['display_username']  = $profileuser->user_login;			$public_display['display_nickname']  = $profileuser->nickname;			if ( !empty($profileuser->first_name) )				$public_display['display_firstname'] = $profileuser->first_name;			if ( !empty($profileuser->last_name) )				$public_display['display_lastname'] = $profileuser->last_name;			if ( !empty($profileuser->first_name) && !empty($profileuser->last_name) ) {				$public_display['display_firstlast'] = $profileuser->first_name . ' ' . $profileuser->last_name;				$public_display['display_lastfirst'] = $profileuser->last_name . ' ' . $profileuser->first_name;			}			if ( !in_array( $profileuser->display_name, $public_display ) ) // Only add this if it isn't duplicated elsewhere				$public_display = array( 'display_displayname' => $profileuser->display_name ) + $public_display;			$public_display = array_map( 'trim', $public_display );			$public_display = array_unique( $public_display );			foreach ( $public_display as $id => $item ) {		?>			<option id="<?php echo $id; ?>" value="<?php echo esc_attr($item); ?>"<?php selected( $profileuser->display_name, $item ); ?>><?php echo $item; ?></option>		<?php			}		?>		</select>	</td></tr></table><h3><?php _e('Contact Info') ?></h3><table class="form-table"><tr>	<th><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="email" id="email" value="<?php echo esc_attr($profileuser->user_email) ?>" class="regular-text" />	<?php	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email && $new_email != $current_user->user_email ) : ?>	<div class="updated inline">	<p><?php printf( __('There is a pending change of your e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_email['newemail'], esc_url( admin_url( 'profile.php?dismiss=' . $current_user->ID . '_new_email' ) ) ); ?></p>	</div>	<?php endif; ?>	</td></tr><tr>	<th><label for="url"><?php _e('Website') ?></label></th>	<td><input type="text" name="url" id="url" value="<?php echo esc_attr($profileuser->user_url) ?>" class="regular-text code" /></td></tr><?php	foreach (_wp_get_user_contactmethods() as $name => $desc) {?><tr>	<th><label for="<?php echo $name; ?>"><?php echo apply_filters('user_'.$name.'_label', $desc); ?></label></th>	<td><input type="text" name="<?php echo $name; ?>" id="<?php echo $name; ?>" value="<?php echo esc_attr($profileuser->$name) ?>" class="regular-text" /></td></tr><?php	}?></table><h3><?php IS_PROFILE_PAGE ? _e('About Yourself') : _e('About the user'); ?></h3><table class="form-table"><tr>	<th><label for="description"><?php _e('Biographical Info'); ?></label></th>	<td><textarea name="description" id="description" rows="5" cols="30"><?php echo esc_html($profileuser->description); ?></textarea><br />	<span class="description"><?php _e('Share a little biographical information to fill out your profile. This may be shown publicly.'); ?></span></td></tr><?php$show_password_fields = apply_filters('show_password_fields', true, $profileuser);if ( $show_password_fields ) :?><tr id="password">	<th><label for="pass1"><?php _e('New Password'); ?></label></th>	<td><input type="password" name="pass1" id="pass1" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("If you would like to change the password type a new one. Otherwise leave this blank."); ?></span><br />		<input type="password" name="pass2" id="pass2" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("Type your new password again."); ?></span><br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>	</td></tr><?php endif; ?></table><?php	if ( IS_PROFILE_PAGE )		do_action( 'show_user_profile', $profileuser );	else		do_action( 'edit_user_profile', $profileuser );?><?php if ( count($profileuser->caps) > count($profileuser->roles) && apply_filters('additional_capabilities_display', true, $profileuser) ) { ?><br class="clear" />	<table width="99%" style="border: none;" cellspacing="2" cellpadding="3" class="editform">		<tr>			<th scope="row"><?php _e('Additional Capabilities') ?></th>			<td><?php			$output = '';			foreach ( $profileuser->caps as $cap => $value ) {				if ( !$wp_roles->is_role($cap) ) {					if ( $output != '' )						$output .= ', ';					$output .= $value ? $cap : "Denied: {$cap}";				}			}			echo $output;			?></td>		</tr>	</table><?php } ?><p class="submit">	<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="<?php echo esc_attr($user_id); ?>" />	<input type="submit" class="button-primary" value="<?php IS_PROFILE_PAGE ? esc_attr_e('Update Profile') : esc_attr_e('Update User') ?>" name="submit" /></p></form></div><?phpbreak;}?><script type="text/javascript" charset="utf-8">	if (window.location.hash == '#password') {		document.getElementById('pass1').focus();	}</script><?phpinclude('./admin-footer.php');?>
<?php/** * Edit plugin editor administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_plugins') )	wp_die( __('You do not have sufficient permissions to edit plugins for this site.') );$title = __("Edit Plugins");$parent_file = 'plugins.php';wp_reset_vars(array('action', 'redirect', 'profile', 'error', 'warning', 'a', 'file', 'plugin'));wp_admin_css( 'theme-editor' );$plugins = get_plugins();if ( empty($plugins) )	wp_die( __('There are no plugins installed on this site.') );if ( isset($_REQUEST['file']) )	$plugin = stripslashes($_REQUEST['file']);if ( empty($plugin) ) {	$plugin = array_keys($plugins);	$plugin = $plugin[0];}$plugin_files = get_plugin_files($plugin);if ( empty($file) )	$file = $plugin_files[0];else	$file = stripslashes($file);$file = validate_file_to_edit($file, $plugin_files);$real_file = WP_PLUGIN_DIR . '/' . $file;$scrollto = isset($_REQUEST['scrollto']) ? (int) $_REQUEST['scrollto'] : 0;switch ( $action ) {case 'update':	check_admin_referer('edit-plugin_' . $file);	$newcontent = stripslashes($_POST['newcontent']);	if ( is_writeable($real_file) ) {		$f = fopen($real_file, 'w+');		fwrite($f, $newcontent);		fclose($f);		$network_wide = is_plugin_active_for_network( $file );		// Deactivate so we can test it.		if ( is_plugin_active($file) || isset($_POST['phperror']) ) {			if ( is_plugin_active($file) )				deactivate_plugins($file, true);			update_option('recently_activated', array($file => time()) + (array)get_option('recently_activated'));			wp_redirect(add_query_arg('_wpnonce', wp_create_nonce('edit-plugin-test_' . $file), "plugin-editor.php?file=$file&liveupdate=1&scrollto=$scrollto&networkwide=" . $network_wide));			exit;		}		wp_redirect("plugin-editor.php?file=$file&a=te&scrollto=$scrollto");	} else {		wp_redirect("plugin-editor.php?file=$file&scrollto=$scrollto");	}	exit;break;default:	if ( isset($_GET['liveupdate']) ) {		check_admin_referer('edit-plugin-test_' . $file);		$error = validate_plugin($file);		if ( is_wp_error($error) )			wp_die( $error );		if ( ! is_plugin_active($file) )			activate_plugin($file, "plugin-editor.php?file=$file&phperror=1", ! empty( $_GET['networkwide'] ) ); // we'll override this later if the plugin can be included without fatal error		wp_redirect("plugin-editor.php?file=$file&a=te&scrollto=$scrollto");		exit;	}	// List of allowable extensions	$editable_extensions = array('php', 'txt', 'text', 'js', 'css', 'html', 'htm', 'xml', 'inc', 'include');	$editable_extensions = (array) apply_filters('editable_extensions', $editable_extensions);	if ( ! is_file($real_file) ) {		wp_die(sprintf('<p>%s</p>', __('No such file exists! Double check the name and try again.')));	} else {		// Get the extension of the file		if ( preg_match('/\.([^.]+)$/', $real_file, $matches) ) {			$ext = strtolower($matches[1]);			// If extension is not in the acceptable list, skip it			if ( !in_array( $ext, $editable_extensions) )				wp_die(sprintf('<p>%s</p>', __('Files of this type are not editable.')));		}	}	add_contextual_help($current_screen,		'<p>' . __('You can use the editor to make changes to any of your plugins&#8217; individual PHP files. Be aware that if you make changes, plugins updates will overwrite your customizations.') . '</p>' .		'<p>' . __('Choose a plugin to edit from the menu in the upper right and click the Select button. Click once on any file name to load it in the editor, and make your changes. Don&#8217;t forget to save your changes (Update File) when you&#8217;re finished.') . '</p>' .		'<p>' . __('The Documentation menu below the editor lists the PHP functions recognized in the plugin file. Clicking Lookup takes you to a web page about that particular function.') . '</p>' .		'<p>' . __('If you want to make changes but don&#8217;t want them to be overwritten when the plugin is updated, you may be ready to think about writing your own plugin. For information on how to edit a plugin or start from scratch, check out the links below.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Editor_SubPanel" target="_blank">Documentation on Editing Plugins</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);	require_once('./admin-header.php');	update_recently_edited(WP_PLUGIN_DIR . '/' . $file);	$content = file_get_contents( $real_file );	if ( '.php' == substr( $real_file, strrpos( $real_file, '.' ) ) ) {		$functions = wp_doc_link_parse( $content );		if ( !empty($functions) ) {			$docs_select = '<select name="docs-list" id="docs-list">';			$docs_select .= '<option value="">' . __( 'Function Name&hellip;' ) . '</option>';			foreach ( $functions as $function) {				$docs_select .= '<option value="' . esc_attr( $function ) . '">' . esc_html( $function ) . '()</option>';			}			$docs_select .= '</select>';		}	}	$content = htmlspecialchars( $content );	?><?php if (isset($_GET['a'])) : ?> <div id="message" class="updated"><p><?php _e('File edited successfully.') ?></p></div><?php elseif (isset($_GET['phperror'])) : ?> <div id="message" class="updated"><p><?php _e('This plugin has been deactivated because your changes resulted in a <strong>fatal error</strong>.') ?></p>	<?php		if ( wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $file) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php bloginfo('wpurl'); ?>/wp-admin/plugins.php?action=error_scrape&amp;plugin=<?php echo esc_attr($file); ?>&amp;_wpnonce=<?php echo esc_attr($_GET['_error_nonce']); ?>"></iframe>	<?php } ?></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div class="fileedit-sub"><div class="alignleft"><big><?php	if ( is_plugin_active($plugin) ) {		if ( is_writeable($real_file) )			echo sprintf(__('Editing <strong>%s</strong> (active)'), $file);		else			echo sprintf(__('Browsing <strong>%s</strong> (active)'), $file);	} else {		if ( is_writeable($real_file) )			echo sprintf(__('Editing <strong>%s</strong> (inactive)'), $file);		else			echo sprintf(__('Browsing <strong>%s</strong> (inactive)'), $file);	}	?></big></div><div class="alignright">	<form action="plugin-editor.php" method="post">		<strong><label for="plugin"><?php _e('Select plugin to edit:'); ?> </label></strong>		<select name="plugin" id="plugin"><?php	foreach ( $plugins as $plugin_key => $a_plugin ) {		$plugin_name = $a_plugin['Name'];		if ( $plugin_key == $plugin )			$selected = " selected='selected'";		else			$selected = '';		$plugin_name = esc_attr($plugin_name);		$plugin_key = esc_attr($plugin_key);		echo "\n\t<option value=\"$plugin_key\" $selected>$plugin_name</option>";	}?>		</select>		<input type="submit" name="Submit" value="<?php esc_attr_e('Select') ?>" class="button" />	</form></div><br class="clear" /></div><div id="templateside">	<h3><?php _e('Plugin Files'); ?></h3>	<ul><?phpforeach ( $plugin_files as $plugin_file ) :	// Get the extension of the file	if ( preg_match('/\.([^.]+)$/', $plugin_file, $matches) ) {		$ext = strtolower($matches[1]);		// If extension is not in the acceptable list, skip it		if ( !in_array( $ext, $editable_extensions ) )			continue;	} else {		// No extension found		continue;	}?>		<li<?php echo $file == $plugin_file ? ' class="highlight"' : ''; ?>><a href="plugin-editor.php?file=<?php echo $plugin_file; ?>&amp;plugin=<?php echo $plugin; ?>"><?php echo $plugin_file ?></a></li><?php endforeach; ?>	</ul></div><form name="template" id="template" action="plugin-editor.php" method="post">	<?php wp_nonce_field('edit-plugin_' . $file) ?>		<div><textarea cols="70" rows="25" name="newcontent" id="newcontent" tabindex="1"><?php echo $content ?></textarea>		<input type="hidden" name="action" value="update" />		<input type="hidden" name="file" value="<?php echo esc_attr($file) ?>" />		<input type="hidden" name="plugin" value="<?php echo esc_attr($plugin) ?>" />		<input type="hidden" name="scrollto" id="scrollto" value="<?php echo $scrollto; ?>" />		</div>		<?php if ( !empty( $docs_select ) ) : ?>		<div id="documentation" class="hide-if-no-js"><label for="docs-list"><?php _e('Documentation:') ?></label> <?php echo $docs_select ?> <input type="button" class="button" value="<?php esc_attr_e( 'Lookup' ) ?> " onclick="if ( '' != jQuery('#docs-list').val() ) { window.open( 'http://api.wordpress.org/core/handbook/1.0/?function=' + escape( jQuery( '#docs-list' ).val() ) + '&amp;locale=<?php echo urlencode( get_locale() ) ?>&amp;version=<?php echo urlencode( $wp_version ) ?>&amp;redirect=true'); }" /></div>		<?php endif; ?><?php if ( is_writeable($real_file) ) : ?>	<?php if ( in_array( $file, (array) get_option( 'active_plugins', array() ) ) ) { ?>		<p><?php _e('<strong>Warning:</strong> Making changes to active plugins is not recommended.  If your changes cause a fatal error, the plugin will be automatically deactivated.'); ?></p>	<?php } ?>	<p class="submit">	<?php		if ( isset($_GET['phperror']) )			echo "<input type='hidden' name='phperror' value='1' /><input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File and Attempt to Reactivate') . "' tabindex='2' />";		else			echo "<input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File') . "' tabindex='2' />";	?>	</p><?php else : ?>	<p><em><?php _e('You need to make this file writable before you can save your changes. See <a href="http://codex.wordpress.org/Changing_File_Permissions">the Codex</a> for more information.'); ?></em></p><?php endif; ?></form><br class="clear" /></div><script type="text/javascript">/* <![CDATA[ */jQuery(document).ready(function($){	$('#template').submit(function(){ $('#scrollto').val( $('#newcontent').scrollTop() ); });	$('#newcontent').scrollTop( $('#scrollto').val() );});/* ]]> */</script><?php	break;}include("./admin-footer.php");
<?php/** * WordPress Upgrade API * * Most of the functions are pluggable and can be overwritten * * @package WordPress * @subpackage Administration *//** Include user install customize script. */if ( file_exists(WP_CONTENT_DIR . '/install.php') )	require (WP_CONTENT_DIR . '/install.php');/** WordPress Administration API */require_once(ABSPATH . 'wp-admin/includes/admin.php');/** WordPress Schema API */require_once(ABSPATH . 'wp-admin/includes/schema.php');if ( !function_exists('wp_install') ) :/** * Installs the blog * * {@internal Missing Long Description}} * * @since unknown * * @param string $blog_title Blog title. * @param string $user_name User's username. * @param string $user_email User's email. * @param bool $public Whether blog is public. * @param null $deprecated Optional. Not used. * @param string $user_password Optional. User's chosen password. Will default to a random password. * @return array Array keys 'url', 'user_id', 'password', 'password_message'. */function wp_install( $blog_title, $user_name, $user_email, $public, $deprecated = '', $user_password = '' ) {	global $wp_rewrite;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.6' );	wp_check_mysql_version();	wp_cache_flush();	make_db_current_silent();	populate_options();	populate_roles();	update_option('blogname', $blog_title);	update_option('admin_email', $user_email);	update_option('blog_public', $public);	$guessurl = wp_guess_url();	update_option('siteurl', $guessurl);	// If not a public blog, don't ping.	if ( ! $public )		update_option('default_pingback_flag', 0);	// Create default user.  If the user already exists, the user tables are	// being shared among blogs.  Just set the role in that case.	$user_id = username_exists($user_name);	$user_password = trim($user_password);	$email_password = false;	if ( !$user_id && empty($user_password) ) {		$user_password = wp_generate_password();		$message = __('<strong><em>Note that password</em></strong> carefully! It is a <em>random</em> password that was generated just for you.');		$user_id = wp_create_user($user_name, $user_password, $user_email);		update_user_option($user_id, 'default_password_nag', true, true);		$email_password = true;	} else if ( !$user_id ) {		// Password has been provided		$message = '<em>'.__('Your chosen password.').'</em>';		$user_id = wp_create_user($user_name, $user_password, $user_email);	} else {		$message =  __('User already exists. Password inherited.');	}	$user = new WP_User($user_id);	$user->set_role('administrator');	wp_install_defaults($user_id);	$wp_rewrite->flush_rules();	wp_new_blog_notification($blog_title, $guessurl, $user_id, ($email_password ? $user_password : __('The password you chose during the install.') ) );	wp_cache_flush();	return array('url' => $guessurl, 'user_id' => $user_id, 'password' => $user_password, 'password_message' => $message);}endif;if ( !function_exists('wp_install_defaults') ) :/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. */function wp_install_defaults($user_id) {	global $wpdb, $wp_rewrite, $current_site, $table_prefix;	// Default category	$cat_name = __('Uncategorized');	/* translators: Default category slug */	$cat_slug = sanitize_title(_x('Uncategorized', 'Default category slug'));	if ( global_terms_enabled() ) {		$cat_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s", $cat_slug ) );		if ( $cat_id == null ) {			$wpdb->insert( $wpdb->sitecategories, array('cat_ID' => 0, 'cat_name' => $cat_name, 'category_nicename' => $cat_slug, 'last_updated' => current_time('mysql', true)) );			$cat_id = $wpdb->insert_id;		}		update_option('default_category', $cat_id);	} else {		$cat_id = 1;	}	$wpdb->insert( $wpdb->terms, array('term_id' => $cat_id, 'name' => $cat_name, 'slug' => $cat_slug, 'term_group' => 0) );	$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $cat_id, 'taxonomy' => 'category', 'description' => '', 'parent' => 0, 'count' => 1));	$cat_tt_id = $wpdb->insert_id;	// Default link category	$cat_name = __('Blogroll');	/* translators: Default link category slug */	$cat_slug = sanitize_title(_x('Blogroll', 'Default link category slug'));	if ( global_terms_enabled() ) {		$blogroll_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s", $cat_slug ) );		if ( $blogroll_id == null ) {			$wpdb->insert( $wpdb->sitecategories, array('cat_ID' => 0, 'cat_name' => $cat_name, 'category_nicename' => $cat_slug, 'last_updated' => current_time('mysql', true)) );			$blogroll_id = $wpdb->insert_id;		}		update_option('default_link_category', $blogroll_id);	} else {		$blogroll_id = 2;	}	$wpdb->insert( $wpdb->terms, array('term_id' => $blogroll_id, 'name' => $cat_name, 'slug' => $cat_slug, 'term_group' => 0) );	$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $blogroll_id, 'taxonomy' => 'link_category', 'description' => '', 'parent' => 0, 'count' => 7));	$blogroll_tt_id = $wpdb->insert_id;	// Now drop in some default links	$default_links = array();	$default_links[] = array(	'link_url' => 'http://codex.wordpress.org/',								'link_name' => 'Documentation',								'link_rss' => '',								'link_notes' => '');	$default_links[] = array(	'link_url' => 'http://wordpress.org/development/',								'link_name' => 'WordPress Blog',								'link_rss' => 'http://wordpress.org/development/feed/',								'link_notes' => '');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/ideas/',								'link_name' => 'Suggest Ideas',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/support/',								'link_name' => 'Support Forum',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/plugins/',								'link_name' => 'Plugins',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/themes/',								'link_name' => 'Themes',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://planet.wordpress.org/',								'link_name' => 'WordPress Planet',								'link_rss' => '',								'link_notes' =>'');	foreach ( $default_links as $link ) {		$wpdb->insert( $wpdb->links, $link);		$wpdb->insert( $wpdb->term_relationships, array('term_taxonomy_id' => $blogroll_tt_id, 'object_id' => $wpdb->insert_id) );	}	// First post	$now = date('Y-m-d H:i:s');	$now_gmt = gmdate('Y-m-d H:i:s');	$first_post_guid = get_option('home') . '/?p=1';	if ( is_multisite() ) {		$first_post = get_site_option( 'first_post' );		if ( empty($first_post) )			$first_post = stripslashes( __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ) );		$first_post = str_replace( "SITE_URL", esc_url( network_home_url() ), $first_post );		$first_post = str_replace( "SITE_NAME", $current_site->site_name, $first_post );	} else {		$first_post = __('Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!');	}	$wpdb->insert( $wpdb->posts, array(								'post_author' => $user_id,								'post_date' => $now,								'post_date_gmt' => $now_gmt,								'post_content' => $first_post,								'post_excerpt' => '',								'post_title' => __('Hello world!'),								/* translators: Default post slug */								'post_name' => sanitize_title( _x('hello-world', 'Default post slug') ),								'post_modified' => $now,								'post_modified_gmt' => $now_gmt,								'guid' => $first_post_guid,								'comment_count' => 1,								'to_ping' => '',								'pinged' => '',								'post_content_filtered' => ''								));	$wpdb->insert( $wpdb->term_relationships, array('term_taxonomy_id' => $cat_tt_id, 'object_id' => 1) );	// Default comment	$first_comment_author = __('Mr WordPress');	$first_comment_url = 'http://wordpress.org/';	$first_comment = __('Hi, this is a comment.<br />To delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.');	if ( is_multisite() ) {		$first_comment_author = get_site_option( 'first_comment_author', $first_comment_author );		$first_comment_url = get_site_option( 'first_comment_url', network_home_url() );		$first_comment = get_site_option( 'first_comment', $first_comment );	}	$wpdb->insert( $wpdb->comments, array(								'comment_post_ID' => 1,								'comment_author' => $first_comment_author,								'comment_author_email' => '',								'comment_author_url' => $first_comment_url,								'comment_date' => $now,								'comment_date_gmt' => $now_gmt,								'comment_content' => $first_comment								));	// First Page	$first_page = __('This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress.');	if ( is_multisite() )		$first_page = get_site_option( 'first_page', $first_page );	$first_post_guid = get_option('home') . '/?page_id=2';	$wpdb->insert( $wpdb->posts, array(								'post_author' => $user_id,								'post_date' => $now,								'post_date_gmt' => $now_gmt,								'post_content' => $first_page,								'post_excerpt' => '',								'post_title' => __('About'),								/* translators: Default page slug */								'post_name' => _x('about', 'Default page slug'),								'post_modified' => $now,								'post_modified_gmt' => $now_gmt,								'guid' => $first_post_guid,								'post_type' => 'page',								'to_ping' => '',								'pinged' => '',								'post_content_filtered' => ''								));	$wpdb->insert( $wpdb->postmeta, array( 'post_id' => 2, 'meta_key' => '_wp_page_template', 'meta_value' => 'default' ) );	// Setup default widgets for default theme.	update_option( 'widget_search', array ( 2 => array ( 'title' => '' ), '_multiwidget' => 1 ) );	update_option( 'widget_recent-posts', array ( 2 => array ( 'title' => '', 'number' => 5 ), '_multiwidget' => 1 ) );	update_option( 'widget_recent-comments', array ( 2 => array ( 'title' => '', 'number' => 5 ), '_multiwidget' => 1 ) );	update_option( 'widget_archives', array ( 2 => array ( 'title' => '', 'count' => 0, 'dropdown' => 0 ), '_multiwidget' => 1 ) );	update_option( 'widget_categories', array ( 2 => array ( 'title' => '', 'count' => 0, 'hierarchical' => 0, 'dropdown' => 0 ), '_multiwidget' => 1 ) );	update_option( 'widget_meta', array ( 2 => array ( 'title' => '' ), '_multiwidget' => 1 ) );	update_option( 'sidebars_widgets', array ( 'wp_inactive_widgets' => array ( ), 'primary-widget-area' => array ( 0 => 'search-2', 1 => 'recent-posts-2', 2 => 'recent-comments-2', 3 => 'archives-2', 4 => 'categories-2', 5 => 'meta-2', ), 'secondary-widget-area' => array ( ), 'first-footer-widget-area' => array ( ), 'second-footer-widget-area' => array ( ), 'third-footer-widget-area' => array ( ), 'fourth-footer-widget-area' => array ( ), 'array_version' => 3 ) );	if ( is_multisite() ) {		// Flush rules to pick up the new page.		$wp_rewrite->init();		$wp_rewrite->flush_rules();		$user = new WP_User($user_id);		$wpdb->update( $wpdb->options, array('option_value' => $user->user_email), array('option_name' => 'admin_email') );		// Remove all perms except for the login user.		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id != %d AND meta_key = %s", $user_id, $table_prefix.'user_level') );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id != %d AND meta_key = %s", $user_id, $table_prefix.'capabilities') );		// Delete any caps that snuck into the previously active blog. (Hardcoded to blog 1 for now.) TODO: Get previous_blog_id.		if ( !is_super_admin( $user_id ) && $user_id != 1 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $wpdb->base_prefix.'1_capabilities') );	}}endif;if ( !function_exists('wp_new_blog_notification') ) :/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $blog_title Blog title. * @param string $blog_url Blog url. * @param int $user_id User ID. * @param string $password User's Password. */function wp_new_blog_notification($blog_title, $blog_url, $user_id, $password) {	$user = new WP_User($user_id);	$email = $user->user_email;	$name = $user->user_login;	$message = sprintf(__("Your new WordPress site has been successfully set up at:%1\$sYou can log in to the administrator account with the following information:Username: %2\$sPassword: %3\$sWe hope you enjoy your new site. Thanks!--The WordPress Teamhttp://wordpress.org/"), $blog_url, $name, $password);	@wp_mail($email, __('New WordPress Site'), $message);}endif;if ( !function_exists('wp_upgrade') ) :/** * Run WordPress Upgrade functions. * * {@internal Missing Long Description}} * * @since unknown * * @return null */function wp_upgrade() {	global $wp_current_db_version, $wp_db_version, $wpdb;	$wp_current_db_version = __get_option('db_version');	// We are up-to-date.  Nothing to do.	if ( $wp_db_version == $wp_current_db_version )		return;	if ( ! is_blog_installed() )		return;	wp_check_mysql_version();	wp_cache_flush();	pre_schema_upgrade();	make_db_current_silent();	upgrade_all();	if ( is_multisite() && is_main_site() )		upgrade_network();	wp_cache_flush();	if ( is_multisite() ) {		if ( $wpdb->get_row( "SELECT blog_id FROM {$wpdb->blog_versions} WHERE blog_id = '{$wpdb->blogid}'" ) )			$wpdb->query( "UPDATE {$wpdb->blog_versions} SET db_version = '{$wp_db_version}' WHERE blog_id = '{$wpdb->blogid}'" );		else			$wpdb->query( "INSERT INTO {$wpdb->blog_versions} ( `blog_id` , `db_version` , `last_updated` ) VALUES ( '{$wpdb->blogid}', '{$wp_db_version}', NOW());" );	}}endif;/** * Functions to be called in install and upgrade scripts. * * {@internal Missing Long Description}} * * @since unknown */function upgrade_all() {	global $wp_current_db_version, $wp_db_version, $wp_rewrite;	$wp_current_db_version = __get_option('db_version');	// We are up-to-date.  Nothing to do.	if ( $wp_db_version == $wp_current_db_version )		return;	// If the version is not set in the DB, try to guess the version.	if ( empty($wp_current_db_version) ) {		$wp_current_db_version = 0;		// If the template option exists, we have 1.5.		$template = __get_option('template');		if ( !empty($template) )			$wp_current_db_version = 2541;	}	if ( $wp_current_db_version < 6039 )		upgrade_230_options_table();	populate_options();	if ( $wp_current_db_version < 2541 ) {		upgrade_100();		upgrade_101();		upgrade_110();		upgrade_130();	}	if ( $wp_current_db_version < 3308 )		upgrade_160();	if ( $wp_current_db_version < 4772 )		upgrade_210();	if ( $wp_current_db_version < 4351 )		upgrade_old_slugs();	if ( $wp_current_db_version < 5539 )		upgrade_230();	if ( $wp_current_db_version < 6124 )		upgrade_230_old_tables();	if ( $wp_current_db_version < 7499 )		upgrade_250();	if ( $wp_current_db_version < 7935 )		upgrade_252();	if ( $wp_current_db_version < 8201 )		upgrade_260();	if ( $wp_current_db_version < 8989 )		upgrade_270();	if ( $wp_current_db_version < 10360 )		upgrade_280();	if ( $wp_current_db_version < 11958 )		upgrade_290();	if ( $wp_current_db_version < 15260 )		upgrade_300();	maybe_disable_automattic_widgets();	update_option( 'db_version', $wp_db_version );	update_option( 'db_upgraded', true );}/** * Execute changes made in WordPress 1.0. * * @since 1.0.0 */function upgrade_100() {	global $wpdb;	// Get the title and ID of every post, post_name to check if it already has a value	$posts = $wpdb->get_results("SELECT ID, post_title, post_name FROM $wpdb->posts WHERE post_name = ''");	if ($posts) {		foreach($posts as $post) {			if ('' == $post->post_name) {				$newtitle = sanitize_title($post->post_title);				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_name = %s WHERE ID = %d", $newtitle, $post->ID) );			}		}	}	$categories = $wpdb->get_results("SELECT cat_ID, cat_name, category_nicename FROM $wpdb->categories");	foreach ($categories as $category) {		if ('' == $category->category_nicename) {			$newtitle = sanitize_title($category->cat_name);			$wpdb>update( $wpdb->categories, array('category_nicename' => $newtitle), array('cat_ID' => $category->cat_ID) );		}	}	$wpdb->query("UPDATE $wpdb->options SET option_value = REPLACE(option_value, 'wp-links/links-images/', 'wp-images/links/')	WHERE option_name LIKE 'links_rating_image%'	AND option_value LIKE 'wp-links/links-images/%'");	$done_ids = $wpdb->get_results("SELECT DISTINCT post_id FROM $wpdb->post2cat");	if ($done_ids) :		foreach ($done_ids as $done_id) :			$done_posts[] = $done_id->post_id;		endforeach;		$catwhere = ' AND ID NOT IN (' . implode(',', $done_posts) . ')';	else:		$catwhere = '';	endif;	$allposts = $wpdb->get_results("SELECT ID, post_category FROM $wpdb->posts WHERE post_category != '0' $catwhere");	if ($allposts) :		foreach ($allposts as $post) {			// Check to see if it's already been imported			$cat = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->post2cat WHERE post_id = %d AND category_id = %d", $post->ID, $post->post_category) );			if (!$cat && 0 != $post->post_category) { // If there's no result				$wpdb->insert( $wpdb->post2cat, array('post_id' => $post->ID, 'category_id' => $post->post_category) );			}		}	endif;}/** * Execute changes made in WordPress 1.0.1. * * @since 1.0.1 */function upgrade_101() {	global $wpdb;	// Clean up indices, add a few	add_clean_index($wpdb->posts, 'post_name');	add_clean_index($wpdb->posts, 'post_status');	add_clean_index($wpdb->categories, 'category_nicename');	add_clean_index($wpdb->comments, 'comment_approved');	add_clean_index($wpdb->comments, 'comment_post_ID');	add_clean_index($wpdb->links , 'link_category');	add_clean_index($wpdb->links , 'link_visible');}/** * Execute changes made in WordPress 1.2. * * @since 1.2.0 */function upgrade_110() {	global $wpdb;	// Set user_nicename.	$users = $wpdb->get_results("SELECT ID, user_nickname, user_nicename FROM $wpdb->users");	foreach ($users as $user) {		if ('' == $user->user_nicename) {			$newname = sanitize_title($user->user_nickname);			$wpdb->update( $wpdb->users, array('user_nicename' => $newname), array('ID' => $user->ID) );		}	}	$users = $wpdb->get_results("SELECT ID, user_pass from $wpdb->users");	foreach ($users as $row) {		if (!preg_match('/^[A-Fa-f0-9]{32}$/', $row->user_pass)) {			$wpdb->update( $wpdb->users, array('user_pass' => md5($row->user_pass)), array('ID' => $row->ID) );		}	}	// Get the GMT offset, we'll use that later on	$all_options = get_alloptions_110();	$time_difference = $all_options->time_difference;	$server_time = time()+date('Z');	$weblogger_time = $server_time + $time_difference*3600;	$gmt_time = time();	$diff_gmt_server = ($gmt_time - $server_time) / 3600;	$diff_weblogger_server = ($weblogger_time - $server_time) / 3600;	$diff_gmt_weblogger = $diff_gmt_server - $diff_weblogger_server;	$gmt_offset = -$diff_gmt_weblogger;	// Add a gmt_offset option, with value $gmt_offset	add_option('gmt_offset', $gmt_offset);	// Check if we already set the GMT fields (if we did, then	// MAX(post_date_gmt) can't be '0000-00-00 00:00:00'	// <michel_v> I just slapped myself silly for not thinking about it earlier	$got_gmt_fields = ! ($wpdb->get_var("SELECT MAX(post_date_gmt) FROM $wpdb->posts") == '0000-00-00 00:00:00');	if (!$got_gmt_fields) {		// Add or substract time to all dates, to get GMT dates		$add_hours = intval($diff_gmt_weblogger);		$add_minutes = intval(60 * ($diff_gmt_weblogger - $add_hours));		$wpdb->query("UPDATE $wpdb->posts SET post_date_gmt = DATE_ADD(post_date, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");		$wpdb->query("UPDATE $wpdb->posts SET post_modified = post_date");		$wpdb->query("UPDATE $wpdb->posts SET post_modified_gmt = DATE_ADD(post_modified, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE) WHERE post_modified != '0000-00-00 00:00:00'");		$wpdb->query("UPDATE $wpdb->comments SET comment_date_gmt = DATE_ADD(comment_date, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");		$wpdb->query("UPDATE $wpdb->users SET user_registered = DATE_ADD(user_registered, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");	}}/** * Execute changes made in WordPress 1.5. * * @since 1.5.0 */function upgrade_130() {	global $wpdb;	// Remove extraneous backslashes.	$posts = $wpdb->get_results("SELECT ID, post_title, post_content, post_excerpt, guid, post_date, post_name, post_status, post_author FROM $wpdb->posts");	if ($posts) {		foreach($posts as $post) {			$post_content = addslashes(deslash($post->post_content));			$post_title = addslashes(deslash($post->post_title));			$post_excerpt = addslashes(deslash($post->post_excerpt));			if ( empty($post->guid) )				$guid = get_permalink($post->ID);			else				$guid = $post->guid;			$wpdb->update( $wpdb->posts, compact('post_title', 'post_content', 'post_excerpt', 'guid'), array('ID' => $post->ID) );		}	}	// Remove extraneous backslashes.	$comments = $wpdb->get_results("SELECT comment_ID, comment_author, comment_content FROM $wpdb->comments");	if ($comments) {		foreach($comments as $comment) {			$comment_content = deslash($comment->comment_content);			$comment_author = deslash($comment->comment_author);			$wpdb->update($wpdb->comments, compact('comment_content', 'comment_author'), array('comment_ID' => $comment->comment_ID) );		}	}	// Remove extraneous backslashes.	$links = $wpdb->get_results("SELECT link_id, link_name, link_description FROM $wpdb->links");	if ($links) {		foreach($links as $link) {			$link_name = deslash($link->link_name);			$link_description = deslash($link->link_description);			$wpdb->update( $wpdb->links, compact('link_name', 'link_description'), array('link_id' => $link->link_id) );		}	}	$active_plugins = __get_option('active_plugins');	// If plugins are not stored in an array, they're stored in the old	// newline separated format.  Convert to new format.	if ( !is_array( $active_plugins ) ) {		$active_plugins = explode("\n", trim($active_plugins));		update_option('active_plugins', $active_plugins);	}	// Obsolete tables	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optionvalues');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiontypes');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiongroups');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiongroup_options');	// Update comments table to use comment_type	$wpdb->query("UPDATE $wpdb->comments SET comment_type='trackback', comment_content = REPLACE(comment_content, '<trackback />', '') WHERE comment_content LIKE '<trackback />%'");	$wpdb->query("UPDATE $wpdb->comments SET comment_type='pingback', comment_content = REPLACE(comment_content, '<pingback />', '') WHERE comment_content LIKE '<pingback />%'");	// Some versions have multiple duplicate option_name rows with the same values	$options = $wpdb->get_results("SELECT option_name, COUNT(option_name) AS dupes FROM `$wpdb->options` GROUP BY option_name");	foreach ( $options as $option ) {		if ( 1 != $option->dupes ) { // Could this be done in the query?			$limit = $option->dupes - 1;			$dupe_ids = $wpdb->get_col( $wpdb->prepare("SELECT option_id FROM $wpdb->options WHERE option_name = %s LIMIT %d", $option->option_name, $limit) );			if ( $dupe_ids ) {				$dupe_ids = join($dupe_ids, ',');				$wpdb->query("DELETE FROM $wpdb->options WHERE option_id IN ($dupe_ids)");			}		}	}	make_site_theme();}/** * Execute changes made in WordPress 2.0. * * @since 2.0.0 */function upgrade_160() {	global $wpdb, $wp_current_db_version;	populate_roles_160();	$users = $wpdb->get_results("SELECT * FROM $wpdb->users");	foreach ( $users as $user ) :		if ( !empty( $user->user_firstname ) )			update_user_meta( $user->ID, 'first_name', $wpdb->escape($user->user_firstname) );		if ( !empty( $user->user_lastname ) )			update_user_meta( $user->ID, 'last_name', $wpdb->escape($user->user_lastname) );		if ( !empty( $user->user_nickname ) )			update_user_meta( $user->ID, 'nickname', $wpdb->escape($user->user_nickname) );		if ( !empty( $user->user_level ) )			update_user_meta( $user->ID, $wpdb->prefix . 'user_level', $user->user_level );		if ( !empty( $user->user_icq ) )			update_user_meta( $user->ID, 'icq', $wpdb->escape($user->user_icq) );		if ( !empty( $user->user_aim ) )			update_user_meta( $user->ID, 'aim', $wpdb->escape($user->user_aim) );		if ( !empty( $user->user_msn ) )			update_user_meta( $user->ID, 'msn', $wpdb->escape($user->user_msn) );		if ( !empty( $user->user_yim ) )			update_user_meta( $user->ID, 'yim', $wpdb->escape($user->user_icq) );		if ( !empty( $user->user_description ) )			update_user_meta( $user->ID, 'description', $wpdb->escape($user->user_description) );		if ( isset( $user->user_idmode ) ):			$idmode = $user->user_idmode;			if ($idmode == 'nickname') $id = $user->user_nickname;			if ($idmode == 'login') $id = $user->user_login;			if ($idmode == 'firstname') $id = $user->user_firstname;			if ($idmode == 'lastname') $id = $user->user_lastname;			if ($idmode == 'namefl') $id = $user->user_firstname.' '.$user->user_lastname;			if ($idmode == 'namelf') $id = $user->user_lastname.' '.$user->user_firstname;			if (!$idmode) $id = $user->user_nickname;			$wpdb->update( $wpdb->users, array('display_name' => $id), array('ID' => $user->ID) );		endif;		// FIXME: RESET_CAPS is temporary code to reset roles and caps if flag is set.		$caps = get_user_meta( $user->ID, $wpdb->prefix . 'capabilities');		if ( empty($caps) || defined('RESET_CAPS') ) {			$level = get_user_meta($user->ID, $wpdb->prefix . 'user_level', true);			$role = translate_level_to_role($level);			update_user_meta( $user->ID, $wpdb->prefix . 'capabilities', array($role => true) );		}	endforeach;	$old_user_fields = array( 'user_firstname', 'user_lastname', 'user_icq', 'user_aim', 'user_msn', 'user_yim', 'user_idmode', 'user_ip', 'user_domain', 'user_browser', 'user_description', 'user_nickname', 'user_level' );	$wpdb->hide_errors();	foreach ( $old_user_fields as $old )		$wpdb->query("ALTER TABLE $wpdb->users DROP $old");	$wpdb->show_errors();	// populate comment_count field of posts table	$comments = $wpdb->get_results( "SELECT comment_post_ID, COUNT(*) as c FROM $wpdb->comments WHERE comment_approved = '1' GROUP BY comment_post_ID" );	if ( is_array( $comments ) )		foreach ($comments as $comment)			$wpdb->update( $wpdb->posts, array('comment_count' => $comment->c), array('ID' => $comment->comment_post_ID) );	// Some alpha versions used a post status of object instead of attachment and put	// the mime type in post_type instead of post_mime_type.	if ( $wp_current_db_version > 2541 && $wp_current_db_version <= 3091 ) {		$objects = $wpdb->get_results("SELECT ID, post_type FROM $wpdb->posts WHERE post_status = 'object'");		foreach ($objects as $object) {			$wpdb->update( $wpdb->posts, array(	'post_status' => 'attachment',												'post_mime_type' => $object->post_type,												'post_type' => ''),										 array( 'ID' => $object->ID ) );			$meta = get_post_meta($object->ID, 'imagedata', true);			if ( ! empty($meta['file']) )				update_attached_file( $object->ID, $meta['file'] );		}	}}/** * Execute changes made in WordPress 2.1. * * @since 2.1.0 */function upgrade_210() {	global $wpdb, $wp_current_db_version;	if ( $wp_current_db_version < 3506 ) {		// Update status and type.		$posts = $wpdb->get_results("SELECT ID, post_status FROM $wpdb->posts");		if ( ! empty($posts) ) foreach ($posts as $post) {			$status = $post->post_status;			$type = 'post';			if ( 'static' == $status ) {				$status = 'publish';				$type = 'page';			} else if ( 'attachment' == $status ) {				$status = 'inherit';				$type = 'attachment';			}			$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_status = %s, post_type = %s WHERE ID = %d", $status, $type, $post->ID) );		}	}	if ( $wp_current_db_version < 3845 ) {		populate_roles_210();	}	if ( $wp_current_db_version < 3531 ) {		// Give future posts a post_status of future.		$now = gmdate('Y-m-d H:i:59');		$wpdb->query ("UPDATE $wpdb->posts SET post_status = 'future' WHERE post_status = 'publish' AND post_date_gmt > '$now'");		$posts = $wpdb->get_results("SELECT ID, post_date FROM $wpdb->posts WHERE post_status ='future'");		if ( !empty($posts) )			foreach ( $posts as $post )				wp_schedule_single_event(mysql2date('U', $post->post_date, false), 'publish_future_post', array($post->ID));	}}/** * Execute changes made in WordPress 2.3. * * @since 2.3.0 */function upgrade_230() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 5200 ) {		populate_roles_230();	}	// Convert categories to terms.	$tt_ids = array();	$have_tags = false;	$categories = $wpdb->get_results("SELECT * FROM $wpdb->categories ORDER BY cat_ID");	foreach ($categories as $category) {		$term_id = (int) $category->cat_ID;		$name = $category->cat_name;		$description = $category->category_description;		$slug = $category->category_nicename;		$parent = $category->category_parent;		$term_group = 0;		// Associate terms with the same slug in a term group and make slugs unique.		if ( $exists = $wpdb->get_results( $wpdb->prepare("SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $slug) ) ) {			$term_group = $exists[0]->term_group;			$id = $exists[0]->term_id;			$num = 2;			do {				$alt_slug = $slug . "-$num";				$num++;				$slug_check = $wpdb->get_var( $wpdb->prepare("SELECT slug FROM $wpdb->terms WHERE slug = %s", $alt_slug) );			} while ( $slug_check );			$slug = $alt_slug;			if ( empty( $term_group ) ) {				$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms GROUP BY term_group") + 1;				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->terms SET term_group = %d WHERE term_id = %d", $term_group, $id) );			}		}		$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->terms (term_id, name, slug, term_group) VALUES		(%d, %s, %s, %d)", $term_id, $name, $slug, $term_group) );		$count = 0;		if ( !empty($category->category_count) ) {			$count = (int) $category->category_count;			$taxonomy = 'category';			$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->term_taxonomy (term_id, taxonomy, description, parent, count) VALUES ( %d, %s, %s, %d, %d)", $term_id, $taxonomy, $description, $parent, $count) );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( !empty($category->link_count) ) {			$count = (int) $category->link_count;			$taxonomy = 'link_category';			$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->term_taxonomy (term_id, taxonomy, description, parent, count) VALUES ( %d, %s, %s, %d, %d)", $term_id, $taxonomy, $description, $parent, $count) );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( !empty($category->tag_count) ) {			$have_tags = true;			$count = (int) $category->tag_count;			$taxonomy = 'post_tag';			$wpdb->insert( $wpdb->term_taxonomy, compact('term_id', 'taxonomy', 'description', 'parent', 'count') );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( empty($count) ) {			$count = 0;			$taxonomy = 'category';			$wpdb->insert( $wpdb->term_taxonomy, compact('term_id', 'taxonomy', 'description', 'parent', 'count') );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}	}	$select = 'post_id, category_id';	if ( $have_tags )		$select .= ', rel_type';	$posts = $wpdb->get_results("SELECT $select FROM $wpdb->post2cat GROUP BY post_id, category_id");	foreach ( $posts as $post ) {		$post_id = (int) $post->post_id;		$term_id = (int) $post->category_id;		$taxonomy = 'category';		if ( !empty($post->rel_type) && 'tag' == $post->rel_type)			$taxonomy = 'tag';		$tt_id = $tt_ids[$term_id][$taxonomy];		if ( empty($tt_id) )			continue;		$wpdb->insert( $wpdb->term_relationships, array('object_id' => $post_id, 'term_taxonomy_id' => $tt_id) );	}	// < 3570 we used linkcategories.  >= 3570 we used categories and link2cat.	if ( $wp_current_db_version < 3570 ) {		// Create link_category terms for link categories.  Create a map of link cat IDs		// to link_category terms.		$link_cat_id_map = array();		$default_link_cat = 0;		$tt_ids = array();		$link_cats = $wpdb->get_results("SELECT cat_id, cat_name FROM " . $wpdb->prefix . 'linkcategories');		foreach ( $link_cats as $category) {			$cat_id = (int) $category->cat_id;			$term_id = 0;			$name = $wpdb->escape($category->cat_name);			$slug = sanitize_title($name);			$term_group = 0;			// Associate terms with the same slug in a term group and make slugs unique.			if ( $exists = $wpdb->get_results( $wpdb->prepare("SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $slug) ) ) {				$term_group = $exists[0]->term_group;				$term_id = $exists[0]->term_id;			}			if ( empty($term_id) ) {				$wpdb->insert( $wpdb->terms, compact('name', 'slug', 'term_group') );				$term_id = (int) $wpdb->insert_id;			}			$link_cat_id_map[$cat_id] = $term_id;			$default_link_cat = $term_id;			$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $term_id, 'taxonomy' => 'link_category', 'description' => '', 'parent' => 0, 'count' => 0) );			$tt_ids[$term_id] = (int) $wpdb->insert_id;		}		// Associate links to cats.		$links = $wpdb->get_results("SELECT link_id, link_category FROM $wpdb->links");		if ( !empty($links) ) foreach ( $links as $link ) {			if ( 0 == $link->link_category )				continue;			if ( ! isset($link_cat_id_map[$link->link_category]) )				continue;			$term_id = $link_cat_id_map[$link->link_category];			$tt_id = $tt_ids[$term_id];			if ( empty($tt_id) )				continue;			$wpdb->insert( $wpdb->term_relationships, array('object_id' => $link->link_id, 'term_taxonomy_id' => $tt_id) );		}		// Set default to the last category we grabbed during the upgrade loop.		update_option('default_link_category', $default_link_cat);	} else {		$links = $wpdb->get_results("SELECT link_id, category_id FROM $wpdb->link2cat GROUP BY link_id, category_id");		foreach ( $links as $link ) {			$link_id = (int) $link->link_id;			$term_id = (int) $link->category_id;			$taxonomy = 'link_category';			$tt_id = $tt_ids[$term_id][$taxonomy];			if ( empty($tt_id) )				continue;			$wpdb->insert( $wpdb->term_relationships, array('object_id' => $link_id, 'term_taxonomy_id' => $tt_id) );		}	}	if ( $wp_current_db_version < 4772 ) {		// Obsolete linkcategories table		$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'linkcategories');	}	// Recalculate all counts	$terms = $wpdb->get_results("SELECT term_taxonomy_id, taxonomy FROM $wpdb->term_taxonomy");	foreach ( (array) $terms as $term ) {		if ( ('post_tag' == $term->taxonomy) || ('category' == $term->taxonomy) )			$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->term_relationships, $wpdb->posts WHERE $wpdb->posts.ID = $wpdb->term_relationships.object_id AND post_status = 'publish' AND post_type = 'post' AND term_taxonomy_id = %d", $term->term_taxonomy_id) );		else			$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $term->term_taxonomy_id) );		$wpdb->update( $wpdb->term_taxonomy, array('count' => $count), array('term_taxonomy_id' => $term->term_taxonomy_id) );	}}/** * Remove old options from the database. * * @since 2.3.0 */function upgrade_230_options_table() {	global $wpdb;	$old_options_fields = array( 'option_can_override', 'option_type', 'option_width', 'option_height', 'option_description', 'option_admin_level' );	$wpdb->hide_errors();	foreach ( $old_options_fields as $old )		$wpdb->query("ALTER TABLE $wpdb->options DROP $old");	$wpdb->show_errors();}/** * Remove old categories, link2cat, and post2cat database tables. * * @since 2.3.0 */function upgrade_230_old_tables() {	global $wpdb;	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'categories');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'link2cat');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'post2cat');}/** * Upgrade old slugs made in version 2.2. * * @since 2.2.0 */function upgrade_old_slugs() {	// upgrade people who were using the Redirect Old Slugs plugin	global $wpdb;	$wpdb->query("UPDATE $wpdb->postmeta SET meta_key = '_wp_old_slug' WHERE meta_key = 'old_slug'");}/** * Execute changes made in WordPress 2.5.0. * * @since 2.5.0 */function upgrade_250() {	global $wp_current_db_version;	if ( $wp_current_db_version < 6689 ) {		populate_roles_250();	}}/** * Execute changes made in WordPress 2.5.2. * * @since 2.5.2 */function upgrade_252() {	global $wpdb;	$wpdb->query("UPDATE $wpdb->users SET user_activation_key = ''");}/** * Execute changes made in WordPress 2.6. * * @since 2.6.0 */function upgrade_260() {	global $wp_current_db_version;	if ( $wp_current_db_version < 8000 )		populate_roles_260();	if ( $wp_current_db_version < 8201 ) {		update_option('enable_app', 1);		update_option('enable_xmlrpc', 1);	}}/** * Execute changes made in WordPress 2.7. * * @since 2.7.0 */function upgrade_270() {	global $wpdb, $wp_current_db_version;	if ( $wp_current_db_version < 8980 )		populate_roles_270();	// Update post_date for unpublished posts with empty timestamp	if ( $wp_current_db_version < 8921 )		$wpdb->query( "UPDATE $wpdb->posts SET post_date = post_modified WHERE post_date = '0000-00-00 00:00:00'" );}/** * Execute changes made in WordPress 2.8. * * @since 2.8.0 */function upgrade_280() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 10360 )		populate_roles_280();	if ( is_multisite() ) {		$start = 0;		while( $rows = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options ORDER BY option_id LIMIT $start, 20" ) ) {			foreach( $rows as $row ) {				$value = $row->option_value;				if ( !@unserialize( $value ) )					$value = stripslashes( $value );				if ( $value !== $row->option_value ) {					update_option( $row->option_name, $value );				}			}			$start += 20;		}		refresh_blog_details( $wpdb->blogid );	}}/** * Execute changes made in WordPress 2.9. * * @since 2.9.0 */function upgrade_290() {	global $wp_current_db_version;	if ( $wp_current_db_version < 11958 ) {		// Previously, setting depth to 1 would redundantly disable threading, but now 2 is the minimum depth to avoid confusion		if ( get_option( 'thread_comments_depth' ) == '1' ) {			update_option( 'thread_comments_depth', 2 );			update_option( 'thread_comments', 0 );		}	}}/** * Execute changes made in WordPress 3.0. * * @since 3.0.0 */function upgrade_300() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 15093 )		populate_roles_300();	if ( $wp_current_db_version < 14139 && is_multisite() && is_main_site() && ! defined( 'MULTISITE' ) && get_site_option( 'siteurl' ) === false )		add_site_option( 'siteurl', '' );	// 3.0-alpha nav menu postmeta changes. can be removed before release. // r13802	if ( $wp_current_db_version >= 13226 && $wp_current_db_version < 13974 )		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_key IN( 'menu_type', 'object_id', 'menu_new_window', 'menu_link', '_menu_item_append', 'menu_item_append', 'menu_item_type', 'menu_item_object_id', 'menu_item_target', 'menu_item_classes', 'menu_item_xfn', 'menu_item_url' )" );	// 3.0-beta1 remove_user primitive->meta cap. can be removed before release. r13956	if ( $wp_current_db_version >= 12751 && $wp_current_db_version < 13974 ) {		$role =& get_role( 'administrator' );		if ( ! empty( $role ) )			$role->remove_cap( 'remove_user' );	}	// 3.0-beta1 nav menu postmeta changes. can be removed before release. r13974	if ( $wp_current_db_version >= 13802 && $wp_current_db_version < 13974 )		$wpdb->update( $wpdb->postmeta, array( 'meta_value' => '' ), array( 'meta_key' => '_menu_item_target', 'meta_value' => '_self' ) );	// 3.0 screen options key name changes.	if ( !is_multisite() || is_main_site() ) {		$prefix = like_escape($wpdb->base_prefix);		$wpdb->query( "DELETE FROM $wpdb->usermeta WHERE meta_key LIKE '{$prefix}%meta-box-hidden%' OR meta_key LIKE '{$prefix}%closedpostboxes%' OR meta_key LIKE '{$prefix}%manage-%-columns-hidden%' OR meta_key LIKE '{$prefix}%meta-box-order%' OR meta_key LIKE '{$prefix}%metaboxorder%' OR meta_key LIKE '{$prefix}%screen_layout%'					 OR meta_key = 'manageedittagscolumnshidden' OR meta_key='managecategoriescolumnshidden' OR meta_key = 'manageedit-tagscolumnshidden' OR meta_key = 'manageeditcolumnshidden' OR meta_key = 'categories_per_page' OR meta_key = 'edit_tags_per_page'" );	}}/** * Execute network level changes * * @since 3.0.0 */function upgrade_network() {	global $wp_current_db_version, $wpdb;	// 2.8	if ( $wp_current_db_version < 11549 ) {		$wpmu_sitewide_plugins = get_site_option( 'wpmu_sitewide_plugins' );		$active_sitewide_plugins = get_site_option( 'active_sitewide_plugins' );		if ( $wpmu_sitewide_plugins ) {			if ( !$active_sitewide_plugins )				$sitewide_plugins = (array) $wpmu_sitewide_plugins;			else				$sitewide_plugins = array_merge( (array) $active_sitewide_plugins, (array) $wpmu_sitewide_plugins );			update_site_option( 'active_sitewide_plugins', $sitewide_plugins );		}		delete_site_option( 'wpmu_sitewide_plugins' );		delete_site_option( 'deactivated_sitewide_plugins' );		$start = 0;		while( $rows = $wpdb->get_results( "SELECT meta_key, meta_value FROM {$wpdb->sitemeta} ORDER BY meta_id LIMIT $start, 20" ) ) {			foreach( $rows as $row ) {				$value = $row->meta_value;				if ( !@unserialize( $value ) )					$value = stripslashes( $value );				if ( $value !== $row->meta_value ) {					update_site_option( $row->meta_key, $value );				}			}			$start += 20;		}	}	// 3.0	if ( $wp_current_db_version < 13576 )		update_site_option( 'global_terms_enabled', '1' );}// The functions we use to actually do stuff// General/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table_name Database table name to create. * @param string $create_ddl SQL statement to create table. * @return bool If table already exists or was created by function. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	if ( $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name )		return true;	//didn't find it try to create it.	$q = $wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	if ( $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name )		return true;	return false;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table Database table name. * @param string $index Index name to drop. * @return bool True, when finished. */function drop_index($table, $index) {	global $wpdb;	$wpdb->hide_errors();	$wpdb->query("ALTER TABLE `$table` DROP INDEX `$index`");	// Now we need to take out all the extra ones we may have created	for ($i = 0; $i < 25; $i++) {		$wpdb->query("ALTER TABLE `$table` DROP INDEX `{$index}_$i`");	}	$wpdb->show_errors();	return true;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table Database table name. * @param string $index Database table index column. * @return bool True, when done with execution. */function add_clean_index($table, $index) {	global $wpdb;	drop_index($table, $index);	$wpdb->query("ALTER TABLE `$table` ADD INDEX ( `$index` )");	return true;}/** ** maybe_add_column() ** Add column to db table if it doesn't exist. ** Returns:  true if already exists or on successful completion **           false on error */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name", 0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$q = $wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name", 0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}/** * Retrieve all options as it was for 1.2. * * @since 1.2.0 * * @return array List of options. */function get_alloptions_110() {	global $wpdb;	if ($options = $wpdb->get_results("SELECT option_name, option_value FROM $wpdb->options")) {		foreach ($options as $option) {			// "When trying to design a foolproof system,			//  never underestimate the ingenuity of the fools :)" -- Dougal			if ('siteurl' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			if ('home' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			if ('category_base' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			$all_options->{$option->option_name} = stripslashes($option->option_value);		}	}	return $all_options;}/** * Version of get_option that is private to install/upgrade. * * @since unknown * @access private * * @param string $setting Option name. * @return mixed */function __get_option($setting) {	global $wpdb;	if ( $setting == 'home' && defined( 'WP_HOME' ) ) {		return preg_replace( '|/+$|', '', WP_HOME );	}	if ( $setting == 'siteurl' && defined( 'WP_SITEURL' ) ) {		return preg_replace( '|/+$|', '', WP_SITEURL );	}	$option = $wpdb->get_var( $wpdb->prepare("SELECT option_value FROM $wpdb->options WHERE option_name = %s", $setting) );	if ( 'home' == $setting && '' == $option )		return __get_option('siteurl');	if ( 'siteurl' == $setting || 'home' == $setting || 'category_base' == $setting )		$option = preg_replace('|/+$|', '', $option);	@ $kellogs = unserialize($option);	if ($kellogs !== FALSE)		return $kellogs;	else		return $option;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $content * @return string */function deslash($content) {	// Note: \\\ inside a regex denotes a single backslash.	// Replace one or more backslashes followed by a single quote with	// a single quote.	$content = preg_replace("/\\\+'/", "'", $content);	// Replace one or more backslashes followed by a double quote with	// a double quote.	$content = preg_replace('/\\\+"/', '"', $content);	// Replace one or more backslashes with one backslash.	$content = preg_replace("/\\\+/", "\\", $content);	return $content;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $queries * @param unknown_type $execute * @return unknown */function dbDelta($queries, $execute = true) {	global $wpdb;	// Separate individual queries into an array	if ( !is_array($queries) ) {		$queries = explode( ';', $queries );		if ('' == $queries[count($queries) - 1]) array_pop($queries);	}	$cqueries = array(); // Creation Queries	$iqueries = array(); // Insertion Queries	$for_update = array();	// Create a tablename index for an array ($cqueries) of queries	foreach($queries as $qry) {		if (preg_match("|CREATE TABLE ([^ ]*)|", $qry, $matches)) {			$cqueries[trim( strtolower($matches[1]), '`' )] = $qry;			$for_update[$matches[1]] = 'Created table '.$matches[1];		} else if (preg_match("|CREATE DATABASE ([^ ]*)|", $qry, $matches)) {			array_unshift($cqueries, $qry);		} else if (preg_match("|INSERT INTO ([^ ]*)|", $qry, $matches)) {			$iqueries[] = $qry;		} else if (preg_match("|UPDATE ([^ ]*)|", $qry, $matches)) {			$iqueries[] = $qry;		} else {			// Unrecognized query type		}	}	// Check to see which tables and fields exist	if ($tables = $wpdb->get_col('SHOW TABLES;')) {		// For every table in the database		foreach ($tables as $table) {			// If a table query exists for the database table...			if ( array_key_exists(strtolower($table), $cqueries) ) {				// Clear the field and index arrays				$cfields = $indices = array();				// Get all of the field names in the query from between the parens				preg_match("|\((.*)\)|ms", $cqueries[strtolower($table)], $match2);				$qryline = trim($match2[1]);				// Separate field lines into an array				$flds = explode("\n", $qryline);				//echo "<hr/><pre>\n".print_r(strtolower($table), true).":\n".print_r($cqueries, true)."</pre><hr/>";				// For every field line specified in the query				foreach ($flds as $fld) {					// Extract the field name					preg_match("|^([^ ]*)|", trim($fld), $fvals);					$fieldname = trim( $fvals[1], '`' );					// Verify the found field name					$validfield = true;					switch (strtolower($fieldname)) {					case '':					case 'primary':					case 'index':					case 'fulltext':					case 'unique':					case 'key':						$validfield = false;						$indices[] = trim(trim($fld), ", \n");						break;					}					$fld = trim($fld);					// If it's a valid field, add it to the field array					if ($validfield) {						$cfields[strtolower($fieldname)] = trim($fld, ", \n");					}				}				// Fetch the table column structure from the database				$tablefields = $wpdb->get_results("DESCRIBE {$table};");				// For every field in the table				foreach ($tablefields as $tablefield) {					// If the table field exists in the field array...					if (array_key_exists(strtolower($tablefield->Field), $cfields)) {						// Get the field type from the query						preg_match("|".$tablefield->Field." ([^ ]*( unsigned)?)|i", $cfields[strtolower($tablefield->Field)], $matches);						$fieldtype = $matches[1];						// Is actual field type different from the field type in query?						if ($tablefield->Type != $fieldtype) {							// Add a query to change the column type							$cqueries[] = "ALTER TABLE {$table} CHANGE COLUMN {$tablefield->Field} " . $cfields[strtolower($tablefield->Field)];							$for_update[$table.'.'.$tablefield->Field] = "Changed type of {$table}.{$tablefield->Field} from {$tablefield->Type} to {$fieldtype}";						}						// Get the default value from the array							//echo "{$cfields[strtolower($tablefield->Field)]}<br>";						if (preg_match("| DEFAULT '(.*)'|i", $cfields[strtolower($tablefield->Field)], $matches)) {							$default_value = $matches[1];							if ($tablefield->Default != $default_value) {								// Add a query to change the column's default value								$cqueries[] = "ALTER TABLE {$table} ALTER COLUMN {$tablefield->Field} SET DEFAULT '{$default_value}'";								$for_update[$table.'.'.$tablefield->Field] = "Changed default value of {$table}.{$tablefield->Field} from {$tablefield->Default} to {$default_value}";							}						}						// Remove the field from the array (so it's not added)						unset($cfields[strtolower($tablefield->Field)]);					} else {						// This field exists in the table, but not in the creation queries?					}				}				// For every remaining field specified for the table				foreach ($cfields as $fieldname => $fielddef) {					// Push a query line into $cqueries that adds the field to that table					$cqueries[] = "ALTER TABLE {$table} ADD COLUMN $fielddef";					$for_update[$table.'.'.$fieldname] = 'Added column '.$table.'.'.$fieldname;				}				// Index stuff goes here				// Fetch the table index structure from the database				$tableindices = $wpdb->get_results("SHOW INDEX FROM {$table};");				if ($tableindices) {					// Clear the index array					unset($index_ary);					// For every index in the table					foreach ($tableindices as $tableindex) {						// Add the index to the index data array						$keyname = $tableindex->Key_name;						$index_ary[$keyname]['columns'][] = array('fieldname' => $tableindex->Column_name, 'subpart' => $tableindex->Sub_part);						$index_ary[$keyname]['unique'] = ($tableindex->Non_unique == 0)?true:false;					}					// For each actual index in the index array					foreach ($index_ary as $index_name => $index_data) {						// Build a create string to compare to the query						$index_string = '';						if ($index_name == 'PRIMARY') {							$index_string .= 'PRIMARY ';						} else if($index_data['unique']) {							$index_string .= 'UNIQUE ';						}						$index_string .= 'KEY ';						if ($index_name != 'PRIMARY') {							$index_string .= $index_name;						}						$index_columns = '';						// For each column in the index						foreach ($index_data['columns'] as $column_data) {							if ($index_columns != '') $index_columns .= ',';							// Add the field to the column list string							$index_columns .= $column_data['fieldname'];							if ($column_data['subpart'] != '') {								$index_columns .= '('.$column_data['subpart'].')';							}						}						// Add the column list to the index create string						$index_string .= ' ('.$index_columns.')';						if (!(($aindex = array_search($index_string, $indices)) === false)) {							unset($indices[$aindex]);							//echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">{$table}:<br />Found index:".$index_string."</pre>\n";						}						//else echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">{$table}:<br /><b>Did not find index:</b>".$index_string."<br />".print_r($indices, true)."</pre>\n";					}				}				// For every remaining index specified for the table				foreach ( (array) $indices as $index ) {					// Push a query line into $cqueries that adds the index to that table					$cqueries[] = "ALTER TABLE {$table} ADD $index";					$for_update[$table.'.'.$fieldname] = 'Added index '.$table.' '.$index;				}				// Remove the original table creation query from processing				unset($cqueries[strtolower($table)]);				unset($for_update[strtolower($table)]);			} else {				// This table exists in the database, but not in the creation queries?			}		}	}	$allqueries = array_merge($cqueries, $iqueries);	if ($execute) {		foreach ($allqueries as $query) {			//echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">".print_r($query, true)."</pre>\n";			$wpdb->query($query);		}	}	return $for_update;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function make_db_current() {	global $wp_queries;	$alterations = dbDelta($wp_queries);	echo "<ol>\n";	foreach($alterations as $alteration) echo "<li>$alteration</li>\n";	echo "</ol>\n";}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function make_db_current_silent() {	global $wp_queries;	$alterations = dbDelta($wp_queries);}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $theme_name * @param unknown_type $template * @return unknown */function make_site_theme_from_oldschool($theme_name, $template) {	$home_path = get_home_path();	$site_dir = WP_CONTENT_DIR . "/themes/$template";	if (! file_exists("$home_path/index.php"))		return false;	// Copy files from the old locations to the site theme.	// TODO: This does not copy arbitarary include dependencies.  Only the	// standard WP files are copied.	$files = array('index.php' => 'index.php', 'wp-layout.css' => 'style.css', 'wp-comments.php' => 'comments.php', 'wp-comments-popup.php' => 'comments-popup.php');	foreach ($files as $oldfile => $newfile) {		if ($oldfile == 'index.php')			$oldpath = $home_path;		else			$oldpath = ABSPATH;		if ($oldfile == 'index.php') { // Check to make sure it's not a new index			$index = implode('', file("$oldpath/$oldfile"));			if (strpos($index, 'WP_USE_THEMES') !== false) {				if (! @copy(WP_CONTENT_DIR . '/themes/' . WP_DEFAULT_THEME . '/index.php', "$site_dir/$newfile"))					return false;				continue; // Don't copy anything				}		}		if (! @copy("$oldpath/$oldfile", "$site_dir/$newfile"))			return false;		chmod("$site_dir/$newfile", 0777);		// Update the blog header include in each file.		$lines = explode("\n", implode('', file("$site_dir/$newfile")));		if ($lines) {			$f = fopen("$site_dir/$newfile", 'w');			foreach ($lines as $line) {				if (preg_match('/require.*wp-blog-header/', $line))					$line = '//' . $line;				// Update stylesheet references.				$line = str_replace("<?php echo __get_option('siteurl'); ?>/wp-layout.css", "<?php bloginfo('stylesheet_url'); ?>", $line);				// Update comments template inclusion.				$line = str_replace("<?php include(ABSPATH . 'wp-comments.php'); ?>", "<?php comments_template(); ?>", $line);				fwrite($f, "{$line}\n");			}			fclose($f);		}	}	// Add a theme header.	$header = "/*\nTheme Name: $theme_name\nTheme URI: " . __get_option('siteurl') . "\nDescription: A theme automatically created by the upgrade.\nVersion: 1.0\nAuthor: Moi\n*/\n";	$stylelines = file_get_contents("$site_dir/style.css");	if ($stylelines) {		$f = fopen("$site_dir/style.css", 'w');		fwrite($f, $header);		fwrite($f, $stylelines);		fclose($f);	}	return true;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $theme_name * @param unknown_type $template * @return unknown */function make_site_theme_from_default($theme_name, $template) {	$site_dir = WP_CONTENT_DIR . "/themes/$template";	$default_dir = WP_CONTENT_DIR . '/themes/' . WP_DEFAULT_THEME;	// Copy files from the default theme to the site theme.	//$files = array('index.php', 'comments.php', 'comments-popup.php', 'footer.php', 'header.php', 'sidebar.php', 'style.css');	$theme_dir = @ opendir($default_dir);	if ($theme_dir) {		while(($theme_file = readdir( $theme_dir )) !== false) {			if (is_dir("$default_dir/$theme_file"))				continue;			if (! @copy("$default_dir/$theme_file", "$site_dir/$theme_file"))				return;			chmod("$site_dir/$theme_file", 0777);		}	}	@closedir($theme_dir);	// Rewrite the theme header.	$stylelines = explode("\n", implode('', file("$site_dir/style.css")));	if ($stylelines) {		$f = fopen("$site_dir/style.css", 'w');		foreach ($stylelines as $line) {			if (strpos($line, 'Theme Name:') !== false) $line = 'Theme Name: ' . $theme_name;			elseif (strpos($line, 'Theme URI:') !== false) $line = 'Theme URI: ' . __get_option('url');			elseif (strpos($line, 'Description:') !== false) $line = 'Description: Your theme.';			elseif (strpos($line, 'Version:') !== false) $line = 'Version: 1';			elseif (strpos($line, 'Author:') !== false) $line = 'Author: You';			fwrite($f, $line . "\n");		}		fclose($f);	}	// Copy the images.	umask(0);	if (! mkdir("$site_dir/images", 0777)) {		return false;	}	$images_dir = @ opendir("$default_dir/images");	if ($images_dir) {		while(($image = readdir($images_dir)) !== false) {			if (is_dir("$default_dir/images/$image"))				continue;			if (! @copy("$default_dir/images/$image", "$site_dir/images/$image"))				return;			chmod("$site_dir/images/$image", 0777);		}	}	@closedir($images_dir);}// Create a site theme from the default theme./** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return unknown */function make_site_theme() {	// Name the theme after the blog.	$theme_name = __get_option('blogname');	$template = sanitize_title($theme_name);	$site_dir = WP_CONTENT_DIR . "/themes/$template";	// If the theme already exists, nothing to do.	if ( is_dir($site_dir)) {		return false;	}	// We must be able to write to the themes dir.	if (! is_writable(WP_CONTENT_DIR . "/themes")) {		return false;	}	umask(0);	if (! mkdir($site_dir, 0777)) {		return false;	}	if (file_exists(ABSPATH . 'wp-layout.css')) {		if (! make_site_theme_from_oldschool($theme_name, $template)) {			// TODO:  rm -rf the site theme directory.			return false;		}	} else {		if (! make_site_theme_from_default($theme_name, $template))			// TODO:  rm -rf the site theme directory.			return false;	}	// Make the new site theme active.	$current_template = __get_option('template');	if ($current_template == WP_DEFAULT_THEME) {		update_option('template', $template);		update_option('stylesheet', $template);	}	return $template;}/** * Translate user level to user role name. * * @since unknown * * @param int $level User level. * @return string User role name. */function translate_level_to_role($level) {	switch ($level) {	case 10:	case 9:	case 8:		return 'administrator';	case 7:	case 6:	case 5:		return 'editor';	case 4:	case 3:	case 2:		return 'author';	case 1:		return 'contributor';	case 0:		return 'subscriber';	}}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function wp_check_mysql_version() {	global $wpdb;	$result = $wpdb->check_database_version();	if ( is_wp_error( $result ) )		die( $result->get_error_message() );}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function maybe_disable_automattic_widgets() {	$plugins = __get_option( 'active_plugins' );	foreach ( (array) $plugins as $plugin ) {		if ( basename( $plugin ) == 'widgets.php' ) {			array_splice( $plugins, array_search( $plugin, $plugins ), 1 );			update_option( 'active_plugins', $plugins );			break;		}	}}/** * Runs before the schema is upgraded. */function pre_schema_upgrade() {	global $wp_current_db_version, $wp_db_version, $wpdb;	// Upgrade versions prior to 2.9	if ( $wp_current_db_version < 11557 ) {		// Delete duplicate options.  Keep the option with the highest option_id.		$wpdb->query("DELETE o1 FROM $wpdb->options AS o1 JOIN $wpdb->options AS o2 USING (`option_name`) WHERE o2.option_id > o1.option_id");		// Drop the old primary key and add the new.		$wpdb->query("ALTER TABLE $wpdb->options DROP PRIMARY KEY, ADD PRIMARY KEY(option_id)");		// Drop the old option_name index. dbDelta() doesn't do the drop.		$wpdb->query("ALTER TABLE $wpdb->options DROP INDEX option_name");	}}/** * Install Network. * * @since 3.0.0 * */if ( !function_exists( 'install_network' ) ) :function install_network() {	global $wpdb, $charset_collate;	$ms_queries = "CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  spam tinyint(2) NOT NULL default '0',  deleted tinyint(2) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->blogs (  blog_id bigint(20) NOT NULL auto_increment,  site_id bigint(20) NOT NULL default '0',  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  registered datetime NOT NULL default '0000-00-00 00:00:00',  last_updated datetime NOT NULL default '0000-00-00 00:00:00',  public tinyint(2) NOT NULL default '1',  archived enum('0','1') NOT NULL default '0',  mature tinyint(2) NOT NULL default '0',  spam tinyint(2) NOT NULL default '0',  deleted tinyint(2) NOT NULL default '0',  lang_id int(11) NOT NULL default '0',  PRIMARY KEY  (blog_id),  KEY domain (domain(50),path(5)),  KEY lang_id (lang_id)) $charset_collate;CREATE TABLE $wpdb->blog_versions (  blog_id bigint(20) NOT NULL default '0',  db_version varchar(20) NOT NULL default '',  last_updated datetime NOT NULL default '0000-00-00 00:00:00',  PRIMARY KEY  (blog_id),  KEY db_version (db_version)) $charset_collate;CREATE TABLE $wpdb->registration_log (  ID bigint(20) NOT NULL auto_increment,  email varchar(255) NOT NULL default '',  IP varchar(30) NOT NULL default '',  blog_id bigint(20) NOT NULL default '0',  date_registered datetime NOT NULL default '0000-00-00 00:00:00',  PRIMARY KEY  (ID),  KEY IP (IP)) $charset_collate;CREATE TABLE $wpdb->site (  id bigint(20) NOT NULL auto_increment,  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  PRIMARY KEY  (id),  KEY domain (domain,path)) $charset_collate;CREATE TABLE $wpdb->sitemeta (  meta_id bigint(20) NOT NULL auto_increment,  site_id bigint(20) NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY meta_key (meta_key),  KEY site_id (site_id)) $charset_collate;CREATE TABLE $wpdb->signups (  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  title longtext NOT NULL,  user_login varchar(60) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  registered datetime NOT NULL default '0000-00-00 00:00:00',  activated datetime NOT NULL default '0000-00-00 00:00:00',  active tinyint(1) NOT NULL default '0',  activation_key varchar(50) NOT NULL default '',  meta longtext,  KEY activation_key (activation_key),  KEY domain (domain)) $charset_collate;";// now create tables	dbDelta( $ms_queries );}endif;/** * Install global terms. * * @since 3.0.0 * */if ( !function_exists( 'install_global_terms' ) ) :function install_global_terms() {	global $wpdb, $charset_collate;	$ms_queries = "CREATE TABLE $wpdb->sitecategories (  cat_ID bigint(20) NOT NULL auto_increment,  cat_name varchar(55) NOT NULL default '',  category_nicename varchar(200) NOT NULL default '',  last_updated timestamp NOT NULL,  PRIMARY KEY  (cat_ID),  KEY category_nicename (category_nicename),  KEY last_updated (last_updated)) $charset_collate;";// now create tables	dbDelta( $ms_queries );}endif;?>
<?php/** * WordPress user administration API. * * @package WordPress * @subpackage Administration *//** * Creates a new user from the "Users" form using $_POST information. * * It seems that the first half is for backwards compatibility, but only * has the ability to alter the user's role. WordPress core seems to * use this function only in the second way, running edit_user() with * no id so as to create a new user. * * @since 2.0 * * @param int $user_id Optional. User ID. * @return null|WP_Error|int Null when adding user, WP_Error or User ID integer when no parameters. */function add_user() {	if ( func_num_args() ) { // The hackiest hack that ever did hack		global $current_user, $wp_roles;		$user_id = (int) func_get_arg( 0 );		if ( isset( $_POST['role'] ) ) {			$new_role = sanitize_text_field( $_POST['role'] );			// Don't let anyone with 'edit_users' (admins) edit their own role to something without it.			if ( $user_id != $current_user->id || $wp_roles->role_objects[$new_role]->has_cap( 'edit_users' ) ) {				// If the new role isn't editable by the logged-in user die with error				$editable_roles = get_editable_roles();				if ( empty( $editable_roles[$new_role] ) )					wp_die(__('You can&#8217;t give users that role.'));				$user = new WP_User( $user_id );				$user->set_role( $new_role );			}		}	} else {		add_action( 'user_register', 'add_user' ); // See above		return edit_user();	}}/** * Edit user settings based on contents of $_POST * * Used on user-edit.php and profile.php to manage and process user options, passwords etc. * * @since 2.0 * * @param int $user_id Optional. User ID. * @return int user id of the updated user */function edit_user( $user_id = 0 ) {	global $current_user, $wp_roles, $wpdb;	if ( $user_id != 0 ) {		$update = true;		$user->ID = (int) $user_id;		$userdata = get_userdata( $user_id );		$user->user_login = $wpdb->escape( $userdata->user_login );	} else {		$update = false;		$user = '';	}	if ( !$update && isset( $_POST['user_login'] ) )		$user->user_login = sanitize_user($_POST['user_login'], true);	$pass1 = $pass2 = '';	if ( isset( $_POST['pass1'] ))		$pass1 = $_POST['pass1'];	if ( isset( $_POST['pass2'] ))		$pass2 = $_POST['pass2'];	if ( isset( $_POST['role'] ) && current_user_can( 'edit_users' ) ) {		$new_role = sanitize_text_field( $_POST['role'] );		$potential_role = isset($wp_roles->role_objects[$new_role]) ? $wp_roles->role_objects[$new_role] : false;		// Don't let anyone with 'edit_users' (admins) edit their own role to something without it.		// Multisite super admins can freely edit their blog roles -- they possess all caps.		if ( ( is_multisite() && current_user_can( 'manage_sites' ) ) || $user_id != $current_user->id || ($potential_role && $potential_role->has_cap( 'edit_users' ) ) )			$user->role = $new_role;		// If the new role isn't editable by the logged-in user die with error		$editable_roles = get_editable_roles();		if ( ! empty( $new_role ) && empty( $editable_roles[$new_role] ) )			wp_die(__('You can&#8217;t give users that role.'));	}	if ( isset( $_POST['email'] ))		$user->user_email = sanitize_text_field( $_POST['email'] );	if ( isset( $_POST['url'] ) ) {		if ( empty ( $_POST['url'] ) || $_POST['url'] == 'http://' ) {			$user->user_url = '';		} else {			$user->user_url = esc_url_raw( $_POST['url'] );			$user->user_url = preg_match('/^(https?|ftps?|mailto|news|irc|gopher|nntp|feed|telnet):/is', $user->user_url) ? $user->user_url : 'http://'.$user->user_url;		}	}	if ( isset( $_POST['first_name'] ) )		$user->first_name = sanitize_text_field( $_POST['first_name'] );	if ( isset( $_POST['last_name'] ) )		$user->last_name = sanitize_text_field( $_POST['last_name'] );	if ( isset( $_POST['nickname'] ) )		$user->nickname = sanitize_text_field( $_POST['nickname'] );	if ( isset( $_POST['display_name'] ) )		$user->display_name = sanitize_text_field( $_POST['display_name'] );	if ( isset( $_POST['description'] ) )		$user->description = trim( $_POST['description'] );	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( isset( $_POST[$method] ))			$user->$method = sanitize_text_field( $_POST[$method] );	}	if ( $update ) {		$user->rich_editing = isset( $_POST['rich_editing'] ) && 'false' == $_POST['rich_editing'] ? 'false' : 'true';		$user->admin_color = isset( $_POST['admin_color'] ) ? sanitize_text_field( $_POST['admin_color'] ) : 'fresh';	}	$user->comment_shortcuts = isset( $_POST['comment_shortcuts'] ) && 'true' == $_POST['comment_shortcuts'] ? 'true' : '';	$user->use_ssl = 0;	if ( !empty($_POST['use_ssl']) )		$user->use_ssl = 1;	$errors = new WP_Error();	/* checking that username has been typed */	if ( $user->user_login == '' )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: Please enter a username.' ));	/* checking the password has been typed twice */	do_action_ref_array( 'check_passwords', array ( $user->user_login, & $pass1, & $pass2 ));	if ( $update ) {		if ( empty($pass1) && !empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: You entered your new password only once.' ), array( 'form-field' => 'pass1' ) );		elseif ( !empty($pass1) && empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: You entered your new password only once.' ), array( 'form-field' => 'pass2' ) );	} else {		if ( empty($pass1) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter your password.' ), array( 'form-field' => 'pass1' ) );		elseif ( empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter your password twice.' ), array( 'form-field' => 'pass2' ) );	}	/* Check for "\" in password */	if ( false !== strpos( stripslashes($pass1), "\\" ) )		$errors->add( 'pass', __( '<strong>ERROR</strong>: Passwords may not contain the character "\\".' ), array( 'form-field' => 'pass1' ) );	/* checking the password has been typed twice the same */	if ( $pass1 != $pass2 )		$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter the same password in the two password fields.' ), array( 'form-field' => 'pass1' ) );	if ( !empty( $pass1 ) )		$user->user_pass = $pass1;	if ( !$update && isset( $_POST['user_login'] ) && !validate_username( $_POST['user_login'] ) )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ));	if ( !$update && username_exists( $user->user_login ) )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: This username is already registered. Please choose another one.' ));	/* checking e-mail address */	if ( empty( $user->user_email ) ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please enter an e-mail address.' ), array( 'form-field' => 'email' ) );	} elseif ( !is_email( $user->user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The e-mail address isn&#8217;t correct.' ), array( 'form-field' => 'email' ) );	} elseif ( ( $owner_id = email_exists($user->user_email) ) && $owner_id != $user->ID ) {		$errors->add( 'email_exists', __('<strong>ERROR</strong>: This email is already registered, please choose another one.'), array( 'form-field' => 'email' ) );	}	// Allow plugins to return their own errors.	do_action_ref_array('user_profile_update_errors', array ( &$errors, $update, &$user ) );	if ( $errors->get_error_codes() )		return $errors;	if ( $update ) {		$user_id = wp_update_user( get_object_vars( $user ) );	} else {		$user_id = wp_insert_user( get_object_vars( $user ) );		wp_new_user_notification( $user_id, isset($_POST['send_password']) ? $pass1 : '' );	}	return $user_id;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return array List of user IDs. */function get_author_user_ids() {	global $wpdb;	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	return $wpdb->get_col( $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value != '0'", $level_key) );}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. * @return array|bool List of editable authors. False if no editable users. */function get_editable_authors( $user_id ) {	global $wpdb;	$editable = get_editable_user_ids( $user_id );	if ( !$editable ) {		return false;	} else {		$editable = join(',', $editable);		$authors = $wpdb->get_results( "SELECT * FROM $wpdb->users WHERE ID IN ($editable) ORDER BY display_name" );	}	return apply_filters('get_editable_authors', $authors);}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. * @param bool $exclude_zeros Optional, default is true. Whether to exclude zeros. * @return unknown */function get_editable_user_ids( $user_id, $exclude_zeros = true, $post_type = 'post' ) {	global $wpdb;	$user = new WP_User( $user_id );	$post_type_obj = get_post_type_object($post_type);	if ( ! $user->has_cap($post_type_obj->cap->edit_others_posts) ) {		if ( $user->has_cap($post_type_obj->cap->edit_posts) || ! $exclude_zeros )			return array($user->id);		else			return array();	}	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	$query = $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s", $level_key);	if ( $exclude_zeros )		$query .= " AND meta_value != '0'";	return $wpdb->get_col( $query );}/** * Fetch a filtered list of user roles that the current user is * allowed to edit. * * Simple function who's main purpose is to allow filtering of the * list of roles in the $wp_roles object so that plugins can remove * innappropriate ones depending on the situation or user making edits. * Specifically because without filtering anyone with the edit_users * capability can edit others to be administrators, even if they are * only editors or authors. This filter allows admins to delegate * user management. * * @since 2.8 * * @return unknown */function get_editable_roles() {	global $wp_roles;	$all_roles = $wp_roles->roles;	$editable_roles = apply_filters('editable_roles', $all_roles);	return $editable_roles;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return unknown */function get_nonauthor_user_ids() {	global $wpdb;	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	return $wpdb->get_col( $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value = '0'", $level_key) );}/** * Retrieve editable posts from other users. * * @since unknown * * @param int $user_id User ID to not retrieve posts from. * @param string $type Optional, defaults to 'any'. Post type to retrieve, can be 'draft' or 'pending'. * @return array List of posts from others. */function get_others_unpublished_posts($user_id, $type='any') {	global $wpdb;	$editable = get_editable_user_ids( $user_id );	if ( in_array($type, array('draft', 'pending')) )		$type_sql = " post_status = '$type' ";	else		$type_sql = " ( post_status = 'draft' OR post_status = 'pending' ) ";	$dir = ( 'pending' == $type ) ? 'ASC' : 'DESC';	if ( !$editable ) {		$other_unpubs = '';	} else {		$editable = join(',', $editable);		$other_unpubs = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_title, post_author FROM $wpdb->posts WHERE post_type = 'post' AND $type_sql AND post_author IN ($editable) AND post_author != %d ORDER BY post_modified $dir", $user_id) );	}	return apply_filters('get_others_drafts', $other_unpubs);}/** * Retrieve drafts from other users. * * @since unknown * * @param int $user_id User ID. * @return array List of drafts from other users. */function get_others_drafts($user_id) {	return get_others_unpublished_posts($user_id, 'draft');}/** * Retrieve pending review posts from other users. * * @since unknown * * @param int $user_id User ID. * @return array List of posts with pending review post type from other users. */function get_others_pending($user_id) {	return get_others_unpublished_posts($user_id, 'pending');}/** * Retrieve user data and filter it. * * @since unknown * * @param int $user_id User ID. * @return object WP_User object with user data. */function get_user_to_edit( $user_id ) {	$user = new WP_User( $user_id );	$user_contactmethods = _wp_get_user_contactmethods();	foreach ($user_contactmethods as $method => $name) {		if ( empty( $user->{$method} ) )			$user->{$method} = '';	}	if ( empty($user->description) )		$user->description = '';	$user = sanitize_user_object($user, 'edit');	return $user;}/** * Retrieve the user's drafts. * * @since unknown * * @param int $user_id User ID. * @return array */function get_users_drafts( $user_id ) {	global $wpdb;	$query = $wpdb->prepare("SELECT ID, post_title FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'draft' AND post_author = %d ORDER BY post_modified DESC", $user_id);	$query = apply_filters('get_users_drafts', $query);	return $wpdb->get_results( $query );}/** * Remove user and optionally reassign posts and links to another user. * * If the $reassign parameter is not assigned to an User ID, then all posts will * be deleted of that user. The action 'delete_user' that is passed the User ID * being deleted will be run after the posts are either reassigned or deleted. * The user meta will also be deleted that are for that User ID. * * @since unknown * * @param int $id User ID. * @param int $reassign Optional. Reassign posts and links to new User ID. * @return bool True when finished. */function wp_delete_user( $id, $reassign = 'novalue' ) {	global $wpdb;	$id = (int) $id;	// allow for transaction statement	do_action('delete_user', $id);	if ( 'novalue' === $reassign || null === $reassign ) {		$post_ids = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id) );		if ( $post_ids ) {			foreach ( $post_ids as $post_id )				wp_delete_post($post_id);		}		// Clean links		$link_ids = $wpdb->get_col( $wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id) );		if ( $link_ids ) {			foreach ( $link_ids as $link_id )				wp_delete_link($link_id);		}	} else {		$reassign = (int) $reassign;		$wpdb->update( $wpdb->posts, array('post_author' => $reassign), array('post_author' => $id) );		$wpdb->update( $wpdb->links, array('link_owner' => $reassign), array('link_owner' => $id) );	}	clean_user_cache($id);	// FINALLY, delete user	if ( !is_multisite() ) {		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id) );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->users WHERE ID = %d", $id) );	} else {		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels		$wpdb->query("DELETE FROM $wpdb->usermeta WHERE user_id = $id AND meta_key = '{$level_key}'");	}	// allow for commit transaction	do_action('deleted_user', $id);	return true;}/** * Remove all capabilities from user. * * @since unknown * * @param int $id User ID. */function wp_revoke_user($id) {	$id = (int) $id;	$user = new WP_User($id);	$user->remove_all_caps();}if ( !class_exists('WP_User_Search') ) :/** * WordPress User Search class. * * @since unknown */class WP_User_Search {	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $results;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $search_term;	/**	 * Page number.	 *	 * @since unknown	 * @access private	 * @var int	 */	var $page;	/**	 * Role name that users have.	 *	 * @since unknown	 * @access private	 * @var string	 */	var $role;	/**	 * Raw page number.	 *	 * @since unknown	 * @access private	 * @var int|bool	 */	var $raw_page;	/**	 * Amount of users to display per page.	 *	 * @since unknown	 * @access public	 * @var int	 */	var $users_per_page = 50;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $first_user;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var int	 */	var $last_user;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var string	 */	var $query_limit;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_orderby;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_from;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_where;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var int	 */	var $total_users_for_query = 0;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var bool	 */	var $too_many_total_users = false;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $search_errors;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $paging_text;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * @since unknown	 *	 * @param string $search_term Search terms string.	 * @param int $page Optional. Page ID.	 * @param string $role Role name.	 * @return WP_User_Search	 */	function WP_User_Search ($search_term = '', $page = '', $role = '') {		$this->search_term = $search_term;		$this->raw_page = ( '' == $page ) ? false : (int) $page;		$this->page = (int) ( '' == $page ) ? 1 : $page;		$this->role = $role;		$this->prepare_query();		$this->query();		$this->prepare_vars_for_template_usage();		$this->do_paging();	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function prepare_query() {		global $wpdb;		$this->first_user = ($this->page - 1) * $this->users_per_page;		$this->query_limit = $wpdb->prepare(" LIMIT %d, %d", $this->first_user, $this->users_per_page);		$this->query_orderby = ' ORDER BY user_login';		$search_sql = '';		if ( $this->search_term ) {			$searches = array();			$search_sql = 'AND (';			foreach ( array('user_login', 'user_nicename', 'user_email', 'user_url', 'display_name') as $col )				$searches[] = $col . " LIKE '%$this->search_term%'";			$search_sql .= implode(' OR ', $searches);			$search_sql .= ')';		}		$this->query_from = " FROM $wpdb->users";		$this->query_where = " WHERE 1=1 $search_sql";		if ( $this->role ) {			$this->query_from .= " INNER JOIN $wpdb->usermeta ON $wpdb->users.ID = $wpdb->usermeta.user_id";			$this->query_where .= $wpdb->prepare(" AND $wpdb->usermeta.meta_key = '{$wpdb->prefix}capabilities' AND $wpdb->usermeta.meta_value LIKE %s", '%' . $this->role . '%');		} elseif ( is_multisite() ) {			$level_key = $wpdb->prefix . 'capabilities'; // wpmu site admins don't have user_levels			$this->query_from .= ", $wpdb->usermeta";			$this->query_where .= " AND $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '{$level_key}'";		}		do_action_ref_array( 'pre_user_search', array( &$this ) );	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function query() {		global $wpdb;		$this->results = $wpdb->get_col("SELECT DISTINCT($wpdb->users.ID)" . $this->query_from . $this->query_where . $this->query_orderby . $this->query_limit);		if ( $this->results )			$this->total_users_for_query = $wpdb->get_var("SELECT COUNT(DISTINCT($wpdb->users.ID))" . $this->query_from . $this->query_where); // no limit		else			$this->search_errors = new WP_Error('no_matching_users_found', __('No matching users were found!'));	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function prepare_vars_for_template_usage() {		$this->search_term = stripslashes($this->search_term); // done with DB, from now on we want slashes gone	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function do_paging() {		if ( $this->total_users_for_query > $this->users_per_page ) { // have to page the results			$args = array();			if( ! empty($this->search_term) )				$args['usersearch'] = urlencode($this->search_term);			if( ! empty($this->role) )				$args['role'] = urlencode($this->role);			$this->paging_text = paginate_links( array(				'total' => ceil($this->total_users_for_query / $this->users_per_page),				'current' => $this->page,				'base' => 'users.php?%_%',				'format' => 'userspage=%#%',				'add_args' => $args			) );			if ( $this->paging_text ) {				$this->paging_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',					number_format_i18n( ( $this->page - 1 ) * $this->users_per_page + 1 ),					number_format_i18n( min( $this->page * $this->users_per_page, $this->total_users_for_query ) ),					number_format_i18n( $this->total_users_for_query ),					$this->paging_text				);			}		}	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 *	 * @return unknown	 */	function get_results() {		return (array) $this->results;	}	/**	 * Displaying paging text.	 *	 * @see do_paging() Builds paging text.	 *	 * @since unknown	 * @access public	 */	function page_links() {		echo $this->paging_text;	}	/**	 * Whether paging is enabled.	 *	 * @see do_paging() Builds paging text.	 *	 * @since unknown	 * @access public	 *	 * @return bool	 */	function results_are_paged() {		if ( $this->paging_text )			return true;		return false;	}	/**	 * Whether there are search terms.	 *	 * @since unknown	 * @access public	 *	 * @return bool	 */	function is_search() {		if ( $this->search_term )			return true;		return false;	}}endif;add_action('admin_init', 'default_password_nag_handler');function default_password_nag_handler($errors = false) {	global $user_ID;	if ( ! get_user_option('default_password_nag') ) //Short circuit it.		return;	//get_user_setting = JS saved UI setting. else no-js-falback code.	if ( 'hide' == get_user_setting('default_password_nag') || isset($_GET['default_password_nag']) && '0' == $_GET['default_password_nag'] ) {		delete_user_setting('default_password_nag');		update_user_option($user_ID, 'default_password_nag', false, true);	}}add_action('profile_update', 'default_password_nag_edit_user', 10, 2);function default_password_nag_edit_user($user_ID, $old_data) {	if ( ! get_user_option('default_password_nag', $user_ID) ) //Short circuit it.		return;	$new_data = get_userdata($user_ID);	if ( $new_data->user_pass != $old_data->user_pass ) { //Remove the nag if the password has been changed.		delete_user_setting('default_password_nag', $user_ID);		update_user_option($user_ID, 'default_password_nag', false, true);	}}add_action('admin_notices', 'default_password_nag');function default_password_nag() {	if ( ! get_user_option('default_password_nag') ) //Short circuit it.		return;	echo '<div class="error default-password-nag">';	echo '<p>';	echo '<strong>' . __('Notice:') . '</strong> ';	_e('You&rsquo;re using the auto-generated password for your account. Would you like to change it to something you&rsquo;ll remember easier?');	echo '</p><p>';	printf( '<a href="%s">' . __('Yes, take me to my profile page') . '</a> | ', admin_url('profile.php') . '#password' );	printf( '<a href="%s" id="default-password-nag-no">' . __('No thanks, do not remind me again') . '</a>', '?default_password_nag=0' );	echo '</p></div>';}?>
<?php/** * Link Management Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');// Handle bulk deletesif ( isset($_GET['action']) && isset($_GET['linkcheck']) ) {	check_admin_referer('bulk-bookmarks');	$doaction = $_GET['action'] ? $_GET['action'] : $_GET['action2'];	if ( ! current_user_can('manage_links') )		wp_die( __('You do not have sufficient permissions to edit the links for this site.') );	if ( 'delete' == $doaction ) {		$bulklinks = (array) $_GET['linkcheck'];		foreach ( $bulklinks as $link_id ) {			$link_id = (int) $link_id;			wp_delete_link($link_id);		}		wp_safe_redirect( wp_get_referer() );		exit;	}} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( empty($cat_id) )	$cat_id = 'all';if ( empty($order_by) )	$order_by = 'order_name';$title = __('Links');$this_file = $parent_file = 'link-manager.php';add_contextual_help( $current_screen,	'<p>' . sprintf(__('You can add links here to be displayed on your site, usually using <a href="%s">Widgets</a>. By default, links to several sites in the WordPress community are included as examples.'), 'widgets.php') . '</p>' .    '<p>' . __('Links may be separated into categories; these are different than the categories used on your posts.') . '</p>' .    '<p>' . __('You can customize the display of this screen using the Screen Options tab and/or the dropdown filters above the links table.') . '</p>' .    '<p>' . __('If you delete a link, it will be removed permanently, as Links do not have a Trash function yet.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Links_Edit_SubPanel" target="_blank">Link Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include_once ('./admin-header.php');if ( ! current_user_can('manage_links') )	wp_die(__("You do not have sufficient permissions to edit the links for this site."));switch ($order_by) {	case 'order_id' :		$sqlorderby = 'id';		break;	case 'order_url' :		$sqlorderby = 'url';		break;	case 'order_desc' :		$sqlorderby = 'description';		break;	case 'order_owner' :		$sqlorderby = 'owner';		break;	case 'order_rating' :		$sqlorderby = 'rating';		break;	case 'order_name' :	default :		$sqlorderby = 'name';		break;} ?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?> <a href="link-add.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'link'); ?></a> <?phpif ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?phpif ( isset($_GET['deleted']) ) {	echo '<div id="message" class="updated"><p>';	$deleted = (int) $_GET['deleted'];	printf(_n('%s link deleted.', '%s links deleted', $deleted), $deleted);	echo '</p></div>';	$_SERVER['REQUEST_URI'] = remove_query_arg(array('deleted'), $_SERVER['REQUEST_URI']);}?><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="link-search-input"><?php _e( 'Search Links' ); ?>:</label>	<input type="text" id="link-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Links' ); ?>" class="button" /></p></form><br class="clear" /><form id="posts-filter" action="" method="get"><div class="tablenav"><?phpif ( 'all' == $cat_id )	$cat_id = '';$args = array( 'category' => $cat_id, 'hide_invisible' => 0, 'orderby' => $sqlorderby, 'hide_empty' => 0 );if ( ! empty( $_GET['s'] ) )	$args['search'] = $_GET['s'];$links = get_bookmarks( $args );if ( $links ) {?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php$categories = get_terms('link_category', array("hide_empty" => 1));$select_cat = "<select name=\"cat_id\">\n";$select_cat .= '<option value="all"'  . (($cat_id == 'all') ? " selected='selected'" : '') . '>' . __('View all Categories') . "</option>\n";foreach ((array) $categories as $cat)	$select_cat .= '<option value="' . esc_attr($cat->term_id) . '"' . (($cat->term_id == $cat_id) ? " selected='selected'" : '') . '>' . sanitize_term_field('name', $cat->name, $cat->term_id, 'link_category', 'display') . "</option>\n";$select_cat .= "</select>\n";$select_order = "<select name=\"order_by\">\n";$select_order .= '<option value="order_id"' . (($order_by == 'order_id') ? " selected='selected'" : '') . '>' .  __('Order by Link ID') . "</option>\n";$select_order .= '<option value="order_name"' . (($order_by == 'order_name') ? " selected='selected'" : '') . '>' .  __('Order by Name') . "</option>\n";$select_order .= '<option value="order_url"' . (($order_by == 'order_url') ? " selected='selected'" : '') . '>' .  __('Order by Address') . "</option>\n";$select_order .= '<option value="order_rating"' . (($order_by == 'order_rating') ? " selected='selected'" : '') . '>' .  __('Order by Rating') . "</option>\n";$select_order .= "</select>\n";echo $select_cat;echo $select_order;?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /></div><br class="clear" /></div><div class="clear"></div><?php	$link_columns = get_column_headers('link-manager');	$hidden = get_hidden_columns('link-manager');?><?php wp_nonce_field('bulk-bookmarks') ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('link-manager'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('link-manager', false); ?>	</tr>	</tfoot>	<tbody><?php	$alt = 0;	foreach ($links as $link) {		$link = sanitize_bookmark($link);		$link->link_name = esc_attr($link->link_name);		$link->link_category = wp_get_link_cats($link->link_id);		$short_url = str_replace('http://', '', $link->link_url);		$short_url = preg_replace('/^www\./i', '', $short_url);		if ('/' == substr($short_url, -1))			$short_url = substr($short_url, 0, -1);		if (strlen($short_url) > 35)			$short_url = substr($short_url, 0, 32).'...';		$visible = ($link->link_visible == 'Y') ? __('Yes') : __('No');		$rating  = $link->link_rating;		$style = ($alt % 2) ? '' : ' class="alternate"';		++ $alt;		$edit_link = get_edit_bookmark_link();		?><tr id="link-<?php echo $link->link_id; ?>" valign="middle" <?php echo $style; ?>><?php		foreach($link_columns as $column_name=>$column_display_name) {			$class = "class=\"column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch($column_name) {				case 'cb':					echo '<th scope="row" class="check-column"><input type="checkbox" name="linkcheck[]" value="'. esc_attr($link->link_id) .'" /></th>';					break;				case 'name':					echo "<td $attributes><strong><a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $link->link_name)) . "'>$link->link_name</a></strong><br />";					$actions = array();					$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';					$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("link.php?action=delete&amp;link_id=$link->link_id", 'delete-bookmark_' . $link->link_id) . "' onclick=\"if ( confirm('" . esc_js(sprintf( __("You are about to delete this link '%s'\n  'Cancel' to stop, 'OK' to delete."), $link->link_name )) . "') ) { return true;}return false;\">" . __('Delete') . "</a>";					$action_count = count($actions);					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $linkaction ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						echo "<span class='$action'>$linkaction$sep</span>";					}					echo '</div>';					echo '</td>';					break;				case 'url':					echo "<td $attributes><a href='$link->link_url' title='".sprintf(__('Visit %s'), $link->link_name)."'>$short_url</a></td>";					break;				case 'categories':					?><td <?php echo $attributes ?>><?php					$cat_names = array();					foreach ($link->link_category as $category) {						$cat = get_term($category, 'link_category', OBJECT, 'display');						if ( is_wp_error( $cat ) )							echo $cat->get_error_message();						$cat_name = $cat->name;						if ( $cat_id != $category )							$cat_name = "<a href='link-manager.php?cat_id=$category'>$cat_name</a>";						$cat_names[] = $cat_name;					}					echo implode(', ', $cat_names);					?></td><?php					break;				case 'rel':					?><td <?php echo $attributes ?>><?php echo empty($link->link_rel) ? '<br />' : $link->link_rel; ?></td><?php					break;				case 'visible':					?><td <?php echo $attributes ?>><?php echo $visible; ?></td><?php					break;				case 'rating': 					?><td <?php echo $attributes ?>><?php echo $rating; ?></td><?php					break;				default:					?>					<td <?php echo $attributes ?>><?php do_action('manage_link_custom_column', $column_name, $link->link_id); ?></td>					<?php					break;			}		}		echo "\n    </tr>\n";	}?>	</tbody></table><div class="tablenav"><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><?php } else { ?><p><?php _e( 'No links found.' ) ?></p><?php } ?><br class="clear" /></div></form><div id="ajax-response"></div></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Administration Template Header * * @package WordPress * @subpackage Administration */@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! defined( 'WP_ADMIN' ) )	require_once( './admin.php' );get_admin_page_title();$title = esc_html( strip_tags( $title ) );wp_user_settings();wp_menu_unfold();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php echo $title; ?> &lsaquo; <?php bloginfo('name') ?>  &#8212; WordPress</title><?phpwp_admin_css( 'css/global' );wp_admin_css();wp_admin_css( 'css/colors' );wp_admin_css( 'css/ie' );if ( is_multisite() )	wp_admin_css( 'css/ms' );wp_enqueue_script('utils');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {		'url': '<?php echo SITECOOKIEPATH; ?>',		'uid': '<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>',		'time':'<?php echo time() ?>'	},	ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>',	pagenow = '<?php echo $current_screen->id; ?>',	typenow = '<?php if ( isset($current_screen->post_type) ) echo $current_screen->post_type; ?>',	adminpage = '<?php echo $admin_body_class; ?>',	thousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',	decimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',	isRtl = <?php echo (int) is_rtl(); ?>;//]]></script><?phpif ( in_array( $pagenow, array('post.php', 'post-new.php') ) ) {	add_action( 'admin_print_footer_scripts', 'wp_tiny_mce', 25 );	wp_enqueue_script('quicktags');}do_action('admin_enqueue_scripts', $hook_suffix);do_action("admin_print_styles-$hook_suffix");do_action('admin_print_styles');do_action("admin_print_scripts-$hook_suffix");do_action('admin_print_scripts');do_action("admin_head-$hook_suffix");do_action('admin_head');if ( get_user_setting('mfold') == 'f' )	$admin_body_class .= ' folded';if ( $is_iphone ) { ?><style type="text/css">.row-actions{visibility:visible;}</style><?php } ?></head><body class="wp-admin no-js <?php echo apply_filters( 'admin_body_class', '' ) . " $admin_body_class"; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><div id="wpwrap"><div id="wpcontent"><div id="wphead"><?php$blog_name = get_bloginfo('name', 'display');if ( '' == $blog_name ) {	$blog_name = '&nbsp;';} else {	$blog_name_excerpt = wp_html_excerpt($blog_name, 40);	if ( $blog_name != $blog_name_excerpt )		$blog_name_excerpt = trim($blog_name_excerpt) . '&hellip;';	$blog_name = $blog_name_excerpt;	unset($blog_name_excerpt);}$title_class = '';if ( function_exists('mb_strlen') ) {	if ( mb_strlen($blog_name, 'UTF-8') > 30 )		$title_class = 'class="long-title"';} else {	if ( strlen($blog_name) > 30 )		$title_class = 'class="long-title"';}?><img id="header-logo" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" alt="" width="32" height="32" /><h1 id="site-heading" <?php echo $title_class ?>>	<a href="<?php echo trailingslashit( get_bloginfo( 'url' ) ); ?>" title="<?php esc_attr_e('Visit Site') ?>">		<span id="site-title"><?php echo $blog_name ?></span>	</a><?php if ( current_user_can('manage_options') && '1' != get_option('blog_public') ): ?>	<a id="privacy-on-link" href="options-privacy.php" title="<?php echo esc_attr( apply_filters('privacy_on_link_title', __('Your site is asking search engines not to index its content') ) ); ?>"><?php echo apply_filters('privacy_on_link_text', __('Search Engines Blocked') ); ?></a><?php endif; ?></h1><?php do_action('in_admin_header'); ?><div id="wphead-info"><div id="user_info"><p><?php$links = array();$links[5] = sprintf(__('Howdy, <a href="%1$s" title="Edit your profile">%2$s</a>'), 'profile.php', $user_identity);$links[15] = '| <a href="' . wp_logout_url() . '" title="' . __('Log Out') . '">' . __('Log Out') . '</a>';$links = apply_filters('admin_user_info_links', $links, $current_user);ksort($links);echo implode(' ', $links);?></p></div><?php favorite_actions($current_screen); ?></div></div><div id="wpbody"><?phpunset($title_class, $blog_name);require(ABSPATH . 'wp-admin/menu-header.php');$current_screen->parent_file = $parent_file;$current_screen->parent_base = preg_replace('/\?.*$/', '', $parent_file);$current_screen->parent_base = str_replace('.php', '', $current_screen->parent_base);?><div id="wpbody-content"><?phpscreen_meta($current_screen);do_action('admin_notices');if ( $parent_file == 'options-general.php' )	require(ABSPATH . 'wp-admin/options-head.php');
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r16 *//** * BackPress Scripts enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r16 */class WP_Scripts extends WP_Dependencies {	var $base_url; // Full URL with trailing slash	var $content_url;	var $default_version;	var $in_footer = array();	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $print_code = '';	var $ext_handles = '';	var $ext_version = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_scripts', array(&$this) );	}	/**	 * Prints scripts	 *	 * Prints the scripts passed to it or the print queue.  Also prints all necessary dependencies.	 *	 * @param mixed handles (optional) Scripts to be printed.  (void) prints queue, (string) prints that script, (array of strings) prints those scripts.	 * @param int group (optional) If scripts were queued in groups prints this group number.	 * @return array Scripts that have been printed	 */	function print_scripts( $handles = false, $group = false ) {		return $this->do_items( $handles, $group );	}	function print_scripts_l10n( $handle, $echo = true ) {		if ( empty($this->registered[$handle]->extra['l10n']) || empty($this->registered[$handle]->extra['l10n'][0]) || !is_array($this->registered[$handle]->extra['l10n'][1]) )			return false;		$object_name = $this->registered[$handle]->extra['l10n'][0];		$data = "var $object_name = {\n";		$eol = '';		foreach ( $this->registered[$handle]->extra['l10n'][1] as $var => $val ) {			if ( 'l10n_print_after' == $var ) {				$after = $val;				continue;			}			$data .= "$eol\t$var: \"" . esc_js( $val ) . '"';			$eol = ",\n";		}		$data .= "\n};\n";		$data .= isset($after) ? "$after\n" : '';		if ( $echo ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $data;			echo "/* ]]> */\n";			echo "</script>\n";			return true;		} else {			return $data;		}	}	function do_item( $handle, $group = false ) {		if ( !parent::do_item($handle) )			return false;		if ( 0 === $group && $this->groups[$handle] > 0 ) {			$this->in_footer[] = $handle;			return false;		}		if ( false === $group && in_array($handle, $this->in_footer, true) )			$this->in_footer = array_diff( $this->in_footer, (array) $handle );		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		$src = $this->registered[$handle]->src;		if ( $this->do_concat ) {			$srce = apply_filters( 'script_loader_src', $src, $handle );			if ( $this->in_default_dir($srce) ) {				$this->print_code .= $this->print_scripts_l10n( $handle, false );				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			} else {				$this->ext_handles .= "$handle,";				$this->ext_version .= "$handle$ver";			}		}		$this->print_scripts_l10n( $handle );		if ( !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = esc_url(apply_filters( 'script_loader_src', $src, $handle ));		if ( $this->do_concat )			$this->print_html .= "<script type='text/javascript' src='$src'></script>\n";		else			echo "<script type='text/javascript' src='$src'></script>\n";		return true;	}	/**	 * Localizes a script	 *	 * Localizes only if script has already been added	 *	 * @param string handle Script name	 * @param string object_name Name of JS object to hold l10n info	 * @param array l10n Array of JS var name => localized string	 * @return bool Successful localization	 */	function localize( $handle, $object_name, $l10n ) {		if ( !$object_name || !$l10n )			return false;		return $this->add_data( $handle, 'l10n', array( $object_name, $l10n ) );	}	function set_group( $handle, $recursion, $group = false ) {		$grp = isset($this->registered[$handle]->extra['group']) ? (int) $this->registered[$handle]->extra['group'] : 0;		if ( false !== $group && $grp > $group )			$grp = $group;		return parent::set_group( $handle, $recursion, $grp );	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_scripts_array', $this->to_do );		return $r;	}	function do_head_items() {		$this->do_items(false, 0);		return $this->done;	}	function do_footer_items() {		if ( !empty($this->in_footer) ) {			foreach( $this->in_footer as $key => $handle ) {				if ( !in_array($handle, $this->done, true) && isset($this->registered[$handle]) ) {					$this->do_item($handle);					$this->done[] = $handle;					unset( $this->in_footer[$key] );				}			}		}		return $this->done;	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}	function reset() {		$this->do_concat = false;		$this->print_code = '';		$this->concat = '';		$this->concat_version = '';		$this->print_html = '';		$this->ext_version = '';		$this->ext_handles = '';	}}
<?php/** * General template tags that can go anywhere in a template. * * @package WordPress * @subpackage Template *//** * Load header template. * * Includes the header template for a theme or if a name is specified then a * specialised header will be included. * * For the parameter, if the file is called "header-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_header' action. * * @param string $name The name of the specialised header. */function get_header( $name = null ) {	do_action( 'get_header', $name );	$templates = array();	if ( isset($name) )		$templates[] = "header-{$name}.php";	$templates[] = "header.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/header.php');}/** * Load footer template. * * Includes the footer template for a theme or if a name is specified then a * specialised footer will be included. * * For the parameter, if the file is called "footer-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_footer' action. * * @param string $name The name of the specialised footer. */function get_footer( $name = null ) {	do_action( 'get_footer', $name );	$templates = array();	if ( isset($name) )		$templates[] = "footer-{$name}.php";	$templates[] = "footer.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/footer.php');}/** * Load sidebar template. * * Includes the sidebar template for a theme or if a name is specified then a * specialised sidebar will be included. * * For the parameter, if the file is called "sidebar-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_sidebar' action. * * @param string $name The name of the specialised sidebar. */function get_sidebar( $name = null ) {	do_action( 'get_sidebar', $name );	$templates = array();	if ( isset($name) )		$templates[] = "sidebar-{$name}.php";	$templates[] = "sidebar.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/sidebar.php');}/** * Load a template part into a template * * Makes it easy for a theme to reuse sections of code in a easy to overload way * for child themes. * * Includes the named template part for a theme or if a name is specified then a * specialised part will be included. If the theme contains no {slug}.php file * then no template will be included. * * The template is included using require, not require_once, so you may include the * same template part multiple times. * * For the parameter, if the file is called "{slug}-special.php" then specify * "special". * * @uses locate_template() * @since 3.0.0 * @uses do_action() Calls 'get_template_part{$slug}' action. * * @param string $slug The slug name for the generic template. * @param string $name The name of the specialised template. */function get_template_part( $slug, $name = null ) {	do_action( "get_template_part_{$slug}", $slug, $name );	$templates = array();	if ( isset($name) )		$templates[] = "{$slug}-{$name}.php";	$templates[] = "{$slug}.php";	locate_template($templates, true, false);}/** * Display search form. * * Will first attempt to locate the searchform.php file in either the child or * the parent, then load it. If it doesn't exist, then the default search form * will be displayed. The default search form is HTML, which will be displayed. * There is a filter applied to the search form HTML in order to edit or replace * it. The filter is 'get_search_form'. * * This function is primarily used by themes which want to hardcode the search * form into the sidebar and also by the search widget in WordPress. * * There is also an action that is called whenever the function is run called, * 'get_search_form'. This can be useful for outputting JavaScript that the * search relies on or various formatting that applies to the beginning of the * search. To give a few examples of what it can be used for. * * @since 2.7.0 * @param boolean $echo Default to echo and not return the form. */function get_search_form($echo = true) {	do_action( 'get_search_form' );	$search_form_template = locate_template(array('searchform.php'));	if ( '' != $search_form_template ) {		require($search_form_template);		return;	}	$form = '<form role="search" method="get" id="searchform" action="' . home_url( '/' ) . '" >	<div><label class="screen-reader-text" for="s">' . __('Search for:') . '</label>	<input type="text" value="' . get_search_query() . '" name="s" id="s" />	<input type="submit" id="searchsubmit" value="'. esc_attr__('Search') .'" />	</div>	</form>';	if ( $echo )		echo apply_filters('get_search_form', $form);	else		return apply_filters('get_search_form', $form);}/** * Display the Log In/Out link. * * Displays a link, which allows users to navigate to the Log In page to log in * or log out depending on whether they are currently logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'loginout' hook on HTML link content. * * @param string $redirect Optional path to redirect to on login/logout. * @param boolean $echo Default to echo and not return the link. */function wp_loginout($redirect = '', $echo = true) {	if ( ! is_user_logged_in() )		$link = '<a href="' . esc_url( wp_login_url($redirect) ) . '">' . __('Log in') . '</a>';	else		$link = '<a href="' . esc_url( wp_logout_url($redirect) ) . '">' . __('Log out') . '</a>';	if ( $echo )		echo apply_filters('loginout', $link);	else		return apply_filters('loginout', $link);}/** * Returns the Log Out URL. * * Returns the URL that allows the user to log out of the site * * @since 2.7 * @uses wp_nonce_url() To protect against CSRF * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'logout_url' hook on final logout url * * @param string $redirect Path to redirect to on logout. */function wp_logout_url($redirect = '') {	$args = array( 'action' => 'logout' );	if ( !empty($redirect) ) {		$args['redirect_to'] = urlencode( $redirect );	}	$logout_url = add_query_arg($args, site_url('wp-login.php', 'login'));	$logout_url = wp_nonce_url( $logout_url, 'log-out' );	return apply_filters('logout_url', $logout_url, $redirect);}/** * Returns the Log In URL. * * Returns the URL that allows the user to log in to the site * * @since 2.7 * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'login_url' hook on final login url * * @param string $redirect Path to redirect to on login. * @param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false. * @return string A log in url */function wp_login_url($redirect = '', $force_reauth = false) {	$login_url = site_url('wp-login.php', 'login');	if ( !empty($redirect) )		$login_url = add_query_arg('redirect_to', urlencode($redirect), $login_url);	if ( $force_reauth )		$login_url = add_query_arg('reauth', '1', $login_url);	return apply_filters('login_url', $login_url, $redirect);}/** * Provides a simple login form for use anywhere within WordPress. By default, it echoes * the HTML immediately. Pass array('echo'=>false) to return the string instead. * * @since 3.0.0 * @param array $args Configuration options to modify the form output * @return Void, or string containing the form */function wp_login_form( $args = array() ) {	$defaults = array( 'echo' => true,						'redirect' => site_url( $_SERVER['REQUEST_URI'] ), // Default redirect is back to the current page	 					'form_id' => 'loginform',						'label_username' => __( 'Username' ),						'label_password' => __( 'Password' ),						'label_remember' => __( 'Remember Me' ),						'label_log_in' => __( 'Log In' ),						'id_username' => 'user_login',						'id_password' => 'user_pass',						'id_remember' => 'rememberme',						'id_submit' => 'wp-submit',						'remember' => true,						'value_username' => '',						'value_remember' => false, // Set this to true to default the "Remember me" checkbox to checked					);	$args = wp_parse_args( $args, apply_filters( 'login_form_defaults', $defaults ) );	$form = '		<form name="' . $args['form_id'] . '" id="' . $args['form_id'] . '" action="' . site_url( 'wp-login.php', 'login' ) . '" method="post">			' . apply_filters( 'login_form_top', '' ) . '			<p class="login-username">				<label for="' . esc_attr( $args['id_username'] ) . '">' . esc_html( $args['label_username'] ) . '</label>				<input type="text" name="log" id="' . esc_attr( $args['id_username'] ) . '" class="input" value="' . esc_attr( $args['value_username'] ) . '" size="20" tabindex="10" />			</p>			<p class="login-password">				<label for="' . esc_attr( $args['id_password'] ) . '">' . esc_html( $args['label_password'] ) . '</label>				<input type="password" name="pwd" id="' . esc_attr( $args['id_password'] ) . '" class="input" value="" size="20" tabindex="20" />			</p>			' . apply_filters( 'login_form_middle', '' ) . '			' . ( $args['remember'] ? '<p class="login-remember"><label><input name="rememberme" type="checkbox" id="' . esc_attr( $args['id_remember'] ) . '" value="forever" tabindex="90"' . ( $args['value_remember'] ? ' checked="checked"' : '' ) . ' /> ' . esc_html( $args['label_remember'] ) . '</label></p>' : '' ) . '			<p class="login-submit">				<input type="submit" name="wp-submit" id="' . esc_attr( $args['id_submit'] ) . '" class="button-primary" value="' . esc_attr( $args['label_log_in'] ) . '" tabindex="100" />				<input type="hidden" name="redirect_to" value="' . esc_attr( $args['redirect'] ) . '" />			</p>			' . apply_filters( 'login_form_bottom', '' ) . '		</form>';	if ( $args['echo'] )		echo $form;	else		return $form;}/** * Returns the Lost Password URL. * * Returns the URL that allows the user to retrieve the lost password * * @since 2.8.0 * @uses site_url() To generate the lost password URL * @uses apply_filters() calls 'lostpassword_url' hook on the lostpassword url * * @param string $redirect Path to redirect to on login. */function wp_lostpassword_url($redirect = '') {	$args = array( 'action' => 'lostpassword' );	if ( !empty($redirect) ) {		$args['redirect_to'] = $redirect;	}	$lostpassword_url = add_query_arg($args, site_url('wp-login.php', 'login'));	return apply_filters('lostpassword_url', $lostpassword_url, $redirect);}/** * Display the Registration or Admin link. * * Display a link which allows the user to navigate to the registration page if * not logged in and registration is enabled or to the dashboard if logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'register' hook on register / admin link content. * * @param string $before Text to output before the link (defaults to <li>). * @param string $after Text to output after the link (defaults to </li>). * @param boolean $echo Default to echo and not return the link. */function wp_register( $before = '<li>', $after = '</li>', $echo = true ) {	if ( ! is_user_logged_in() ) {		if ( get_option('users_can_register') )			$link = $before . '<a href="' . site_url('wp-login.php?action=register', 'login') . '">' . __('Register') . '</a>' . $after;		else			$link = '';	} else {		$link = $before . '<a href="' . admin_url() . '">' . __('Site Admin') . '</a>' . $after;	}	if ( $echo )		echo apply_filters('register', $link);	else		return apply_filters('register', $link);}/** * Theme container function for the 'wp_meta' action. * * The 'wp_meta' action can have several purposes, depending on how you use it, * but one purpose might have been to allow for theme switching. * * @since 1.5.0 * @link http://trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action. * @uses do_action() Calls 'wp_meta' hook. */function wp_meta() {	do_action('wp_meta');}/** * Display information about the blog. * * @see get_bloginfo() For possible values for the parameter. * @since 0.71 * * @param string $show What to display. */function bloginfo( $show='' ) {	echo get_bloginfo( $show, 'display' );}/** * Retrieve information about the blog. * * Some show parameter values are deprecated and will be removed in future * versions. These options will trigger the _deprecated_argument() function. * The deprecated blog info options are listed in the function contents. * * The possible values for the 'show' parameter are listed below. * <ol> * <li><strong>url<strong> - Blog URI to homepage.</li> * <li><strong>wpurl</strong> - Blog URI path to WordPress.</li> * <li><strong>description</strong> - Secondary title</li> * </ol> * * The feed URL options can be retrieved from 'rdf_url' (RSS 0.91), * 'rss_url' (RSS 1.0), 'rss2_url' (RSS 2.0), or 'atom_url' (Atom feed). The * comment feeds can be retrieved from the 'comments_atom_url' (Atom comment * feed) or 'comments_rss2_url' (RSS 2.0 comment feed). * * @since 0.71 * * @param string $show Blog info to retrieve. * @param string $filter How to filter what is retrieved. * @return string Mostly string values, might be empty. */function get_bloginfo( $show = '', $filter = 'raw' ) {	switch( $show ) {		case 'home' : // DEPRECATED		case 'siteurl' : // DEPRECATED			_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> option instead.' ), 'url'  ) );		case 'url' :			$output = home_url();			break;		case 'wpurl' :			$output = site_url();			break;		case 'description':			$output = get_option('blogdescription');			break;		case 'rdf_url':			$output = get_feed_link('rdf');			break;		case 'rss_url':			$output = get_feed_link('rss');			break;		case 'rss2_url':			$output = get_feed_link('rss2');			break;		case 'atom_url':			$output = get_feed_link('atom');			break;		case 'comments_atom_url':			$output = get_feed_link('comments_atom');			break;		case 'comments_rss2_url':			$output = get_feed_link('comments_rss2');			break;		case 'pingback_url':			$output = get_option('siteurl') .'/xmlrpc.php';			break;		case 'stylesheet_url':			$output = get_stylesheet_uri();			break;		case 'stylesheet_directory':			$output = get_stylesheet_directory_uri();			break;		case 'template_directory':		case 'template_url':			$output = get_template_directory_uri();			break;		case 'admin_email':			$output = get_option('admin_email');			break;		case 'charset':			$output = get_option('blog_charset');			if ('' == $output) $output = 'UTF-8';			break;		case 'html_type' :			$output = get_option('html_type');			break;		case 'version':			global $wp_version;			$output = $wp_version;			break;		case 'language':			$output = get_locale();			$output = str_replace('_', '-', $output);			break;		case 'text_direction':			//_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> function instead.' ), 'is_rtl()'  ) );			if ( function_exists( 'is_rtl' ) ) {				$output = is_rtl() ? 'rtl' : 'ltr';			} else {				$output = 'ltr';			}			break;		case 'name':		default:			$output = get_option('blogname');			break;	}	$url = true;	if (strpos($show, 'url') === false &&		strpos($show, 'directory') === false &&		strpos($show, 'home') === false)		$url = false;	if ( 'display' == $filter ) {		if ( $url )			$output = apply_filters('bloginfo_url', $output, $show);		else			$output = apply_filters('bloginfo', $output, $show);	}	return $output;}/** * Display or retrieve page title for all areas of blog. * * By default, the page title will display the separator before the page title, * so that the blog title will be before the page title. This is not good for * title display, since the blog title shows up on most tabs and not what is * important, which is the page that the user is looking at. * * There are also SEO benefits to having the blog title after or to the 'right' * or the page title. However, it is mostly common sense to have the blog title * to the right with most browsers supporting tabs. You can achieve this by * using the seplocation parameter and setting the value to 'right'. This change * was introduced around 2.5.0, in case backwards compatibility of themes is * important. * * @since 1.0.0 * * @param string $sep Optional, default is '&raquo;'. How to separate the various items within the page title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @param string $seplocation Optional. Direction to display title, 'right'. * @return string|null String on retrieve, null when displaying. */function wp_title($sep = '&raquo;', $display = true, $seplocation = '') {	global $wpdb, $wp_locale, $wp_query;	$cat = get_query_var('cat');	$tag = get_query_var('tag_id');	$category_name = get_query_var('category_name');	$author = get_query_var('author');	$author_name = get_query_var('author_name');	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	$day = get_query_var('day');	$search = get_query_var('s');	$title = '';	$t_sep = '%WP_TITILE_SEP%'; // Temporary separator, for accurate flipping, if necessary	// If there's a category	if ( !empty($cat) ) {			// category exclusion			if ( !stristr($cat,'-') )				$title = apply_filters('single_cat_title', get_the_category_by_ID($cat));	} elseif ( !empty($category_name) ) {		if ( stristr($category_name,'/') ) {				$category_name = explode('/',$category_name);				if ( $category_name[count($category_name)-1] )					$category_name = $category_name[count($category_name)-1]; // no trailing slash				else					$category_name = $category_name[count($category_name)-2]; // there was a trailling slash		}		$cat = get_term_by('slug', $category_name, 'category', OBJECT, 'display');		if ( $cat )			$title = apply_filters('single_cat_title', $cat->name);	}	if ( !empty($tag) ) {		$tag = get_term($tag, 'post_tag', OBJECT, 'display');		if ( is_wp_error( $tag ) )			return $tag;		if ( ! empty($tag->name) )			$title = apply_filters('single_tag_title', $tag->name);	}	// If there's an author	if ( !empty($author) ) {		$title = get_userdata($author);		$title = $title->display_name;	}	if ( !empty($author_name) ) {		// We do a direct query here because we don't cache by nicename.		$title = $wpdb->get_var($wpdb->prepare("SELECT display_name FROM $wpdb->users WHERE user_nicename = %s", $author_name));	}	// If there's a month	if ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));		$my_day = intval(substr($m, 6, 2));		$title = $my_year . ($my_month ? $t_sep . $my_month : "") . ($my_day ? $t_sep . $my_day : "");	}	if ( !empty($year) ) {		$title = $year;		if ( !empty($monthnum) )			$title .= $t_sep . $wp_locale->get_month($monthnum);		if ( !empty($day) )			$title .= $t_sep . zeroise($day, 2);	}	// If there is a post	if ( is_single() || ( is_home() && !is_front_page() ) || ( is_page() && !is_front_page() ) ) {		$post = $wp_query->get_queried_object();		$title = apply_filters( 'single_post_title', $post->post_title );	}	// If there's a taxonomy	if ( is_tax() ) {		$taxonomy = get_query_var( 'taxonomy' );		$tax = get_taxonomy( $taxonomy );		$term = $wp_query->get_queried_object();		$term = $term->name;		$title = $tax->labels->name . $t_sep . $term;	}	//If it's a search	if ( is_search() ) {		/* translators: 1: separator, 2: search phrase */		$title = sprintf(__('Search Results %1$s %2$s'), $t_sep, strip_tags($search));	}	if ( is_404() ) {		$title = __('Page not found');	}	$prefix = '';	if ( !empty($title) )		$prefix = " $sep "; 	// Determines position of the separator and direction of the breadcrumb	if ( 'right' == $seplocation ) { // sep on right, so reverse the order		$title_array = explode( $t_sep, $title );		$title_array = array_reverse( $title_array );		$title = implode( " $sep ", $title_array ) . $prefix;	} else {		$title_array = explode( $t_sep, $title );		$title = $prefix . implode( " $sep ", $title_array );	}	$title = apply_filters('wp_title', $title, $sep, $seplocation);	// Send it out	if ( $display )		echo $title;	else		return $title;}/** * Display or retrieve page title for post. * * This is optimized for single.php template file for displaying the post title. * Only useful for posts, does not support pages for example. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * @uses $wpdb * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_post_title($prefix = '', $display = true) {	global $wp_query, $post;	if ( ! $post )		$_post = $wp_query->get_queried_object();	else		$_post = $post;	if ( !isset($_post->post_title) )		return;	$title = apply_filters('single_post_title', $_post->post_title, $_post);	if ( $display )		echo $prefix . $title;	else		return $title;}/** * Display or retrieve page title for category archive. * * This is useful for category template file or files, because it is optimized * for category page title and with less overhead than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_cat_title($prefix = '', $display = true ) {	global $wp_query;	if ( is_tag() )		return single_tag_title($prefix, $display);	if ( !is_category() )		return;	$cat = $wp_query->get_queried_object();	$my_cat_name = apply_filters('single_cat_title', $cat->name);	if ( !empty($my_cat_name) ) {		if ( $display )			echo $prefix . $my_cat_name;		else			return $my_cat_name;	}}/** * Display or retrieve page title for tag post archive. * * Useful for tag template files for displaying the tag page title. It has less * overhead than {@link wp_title()}, because of its limited implementation. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 2.3.0 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_tag_title($prefix = '', $display = true ) {	global $wp_query;	if ( !is_tag() )		return;	$tag = $wp_query->get_queried_object();	if ( ! $tag )		return;	$my_tag_name = apply_filters('single_tag_title', $tag->name);	if ( !empty($my_tag_name) ) {		if ( $display )			echo $prefix . $my_tag_name;		else			return $my_tag_name;	}}/** * Display or retrieve page title for post archive based on date. * * Useful for when the template only needs to display the month and year, if * either are available. Optimized for just this purpose, so if it is all that * is needed, should be better than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_month_title($prefix = '', $display = true ) {	global $wp_locale;	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	if ( !empty($monthnum) && !empty($year) ) {		$my_year = $year;		$my_month = $wp_locale->get_month($monthnum);	} elseif ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));	}	if ( empty($my_month) )		return false;	$result = $prefix . $my_month . $prefix . $my_year;	if ( !$display )		return $result;	echo $result;}/** * Retrieve archive link content based on predefined or custom code. * * The format can be one of four styles. The 'link' for head element, 'option' * for use in the select element, 'html' for use in list (either ol or ul HTML * elements). Custom content is also supported using the before and after * parameters. * * The 'link' format uses the link HTML element with the <em>archives</em> * relationship. The before and after parameters are not used. The text * parameter is used to describe the link. * * The 'option' format uses the option HTML element for use in select element. * The value is the url parameter and the before and after parameters are used * between the text description. * * The 'html' format, which is the default, uses the li HTML element for use in * the list HTML elements. The before parameter is before the link and the after * parameter is after the closing link. * * The custom format uses the before parameter before the link ('a' HTML * element) and the after parameter after the closing link tag. If the above * three values for the format are not used, then custom format is assumed. * * @since 1.0.0 * * @param string $url URL to archive. * @param string $text Archive text description. * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom. * @param string $before Optional. * @param string $after Optional. * @return string HTML link content for archive. */function get_archives_link($url, $text, $format = 'html', $before = '', $after = '') {	$text = wptexturize($text);	$title_text = esc_attr($text);	$url = esc_url($url);	if ('link' == $format)		$link_html = "\t<link rel='archives' title='$title_text' href='$url' />\n";	elseif ('option' == $format)		$link_html = "\t<option value='$url'>$before $text $after</option>\n";	elseif ('html' == $format)		$link_html = "\t<li>$before<a href='$url' title='$title_text'>$text</a>$after</li>\n";	else // custom		$link_html = "\t$before<a href='$url' title='$title_text'>$text</a>$after\n";	$link_html = apply_filters( "get_archives_link", $link_html );	return $link_html;}/** * Display archive links based on type and format. * * The 'type' argument offers a few choices and by default will display monthly * archive links. The other options for values are 'daily', 'weekly', 'monthly', * 'yearly', 'postbypost' or 'alpha'. Both 'postbypost' and 'alpha' display the * same archive link list, the difference between the two is that 'alpha' * will order by post title and 'postbypost' will order by post date. * * The date archives will logically display dates with links to the archive post * page. The 'postbypost' and 'alpha' values for 'type' argument will display * the post titles. * * The 'limit' argument will only display a limited amount of links, specified * by the 'limit' integer value. By default, there is no limit. The * 'show_post_count' argument will show how many posts are within the archive. * By default, the 'show_post_count' argument is set to false. * * For the 'format', 'before', and 'after' arguments, see {@link * get_archives_link()}. The values of these arguments have to do with that * function. * * @since 1.2.0 * * @param string|array $args Optional. Override defaults. */function wp_get_archives($args = '') {	global $wpdb, $wp_locale;	$defaults = array(		'type' => 'monthly', 'limit' => '',		'format' => 'html', 'before' => '',		'after' => '', 'show_post_count' => false,		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	if ( '' == $type )		$type = 'monthly';	if ( '' != $limit ) {		$limit = absint($limit);		$limit = ' LIMIT '.$limit;	}	// this is what will separate dates on weekly archive links	$archive_week_separator = '&#8211;';	// over-ride general date format ? 0 = no: use the date format set in Options, 1 = yes: over-ride	$archive_date_format_over_ride = 0;	// options for daily archive (only if you over-ride the general date format)	$archive_day_date_format = 'Y/m/d';	// options for weekly archive (only if you over-ride the general date format)	$archive_week_start_date_format = 'Y/m/d';	$archive_week_end_date_format	= 'Y/m/d';	if ( !$archive_date_format_over_ride ) {		$archive_day_date_format = get_option('date_format');		$archive_week_start_date_format = get_option('date_format');		$archive_week_end_date_format = get_option('date_format');	}	//filters	$where = apply_filters('getarchives_where', "WHERE post_type = 'post' AND post_status = 'publish'", $r );	$join = apply_filters('getarchives_join', "", $r);	$output = '';	if ( 'monthly' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url = get_month_link( $arcresult->year, $arcresult->month );				/* translators: 1: month name, 2: 4-digit year */				$text = sprintf(__('%1$s %2$d'), $wp_locale->get_month($arcresult->month), $arcresult->year);				if ( $show_post_count )					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ('yearly' == $type) {		$query = "SELECT YEAR(post_date) AS `year`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ($arcresults) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult) {				$url = get_year_link($arcresult->year);				$text = sprintf('%d', $arcresult->year);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'daily' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, DAYOFMONTH(post_date) AS `dayofmonth`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date), DAYOFMONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url	= get_day_link($arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$date = sprintf('%1$d-%2$02d-%3$02d 00:00:00', $arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$text = mysql2date($archive_day_date_format, $date);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'weekly' == $type ) {		$week = _wp_mysql_week( '`post_date`' );		$query = "SELECT DISTINCT $week AS `week`, YEAR( `post_date` ) AS `yr`, DATE_FORMAT( `post_date`, '%Y-%m-%d' ) AS `yyyymmdd`, count( `ID` ) AS `posts` FROM `$wpdb->posts` $join $where GROUP BY $week, YEAR( `post_date` ) ORDER BY `post_date` DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		$arc_w_last = '';		$afterafter = $after;		if ( $arcresults ) {				foreach ( (array) $arcresults as $arcresult ) {					if ( $arcresult->week != $arc_w_last ) {						$arc_year = $arcresult->yr;						$arc_w_last = $arcresult->week;						$arc_week = get_weekstartend($arcresult->yyyymmdd, get_option('start_of_week'));						$arc_week_start = date_i18n($archive_week_start_date_format, $arc_week['start']);						$arc_week_end = date_i18n($archive_week_end_date_format, $arc_week['end']);						$url  = sprintf('%1$s/%2$s%3$sm%4$s%5$s%6$sw%7$s%8$d', home_url(), '', '?', '=', $arc_year, '&amp;', '=', $arcresult->week);						$text = $arc_week_start . $archive_week_separator . $arc_week_end;						if ($show_post_count)							$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;						$output .= get_archives_link($url, $text, $format, $before, $after);					}				}		}	} elseif ( ( 'postbypost' == $type ) || ('alpha' == $type) ) {		$orderby = ('alpha' == $type) ? "post_title ASC " : "post_date DESC ";		$query = "SELECT * FROM $wpdb->posts $join $where ORDER BY $orderby $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			foreach ( (array) $arcresults as $arcresult ) {				if ( $arcresult->post_date != '0000-00-00 00:00:00' ) {					$url  = get_permalink($arcresult);					$arc_title = $arcresult->post_title;					if ( $arc_title )						$text = strip_tags(apply_filters('the_title', $arc_title));					else						$text = $arcresult->ID;					$output .= get_archives_link($url, $text, $format, $before, $after);				}			}		}	}	if ( $echo )		echo $output;	else		return $output;}/** * Get number of days since the start of the week. * * @since 1.5.0 * @usedby get_calendar() * * @param int $num Number of day. * @return int Days since the start of the week. */function calendar_week_mod($num) {	$base = 7;	return ($num - $base*floor($num/$base));}/** * Display calendar with days that have posts as links. * * The calendar is cached, which will be retrieved, if it exists. If there are * no posts for the month, then it will not be displayed. * * @since 1.0.0 * * @param bool $initial Optional, default is true. Use initial calendar names. * @param bool $echo Optional, default is true. Set to false for return. */function get_calendar($initial = true, $echo = true) {	global $wpdb, $m, $monthnum, $year, $wp_locale, $posts;	$cache = array();	$key = md5( $m . $monthnum . $year );	if ( $cache = wp_cache_get( 'get_calendar', 'calendar' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			if ( $echo ) {				echo apply_filters( 'get_calendar',  $cache[$key] );				return;			} else {				return apply_filters( 'get_calendar',  $cache[$key] );			}		}	}	if ( !is_array($cache) )		$cache = array();	// Quick check. If we have no posts at all, abort!	if ( !$posts ) {		$gotsome = $wpdb->get_var("SELECT 1 as test FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'publish' LIMIT 1");		if ( !$gotsome ) {			$cache[ $key ] = '';			wp_cache_set( 'get_calendar', $cache, 'calendar' );			return;		}	}	if ( isset($_GET['w']) )		$w = ''.intval($_GET['w']);	// week_begins = 0 stands for Sunday	$week_begins = intval(get_option('start_of_week'));	// Let's figure out when we are	if ( !empty($monthnum) && !empty($year) ) {		$thismonth = ''.zeroise(intval($monthnum), 2);		$thisyear = ''.intval($year);	} elseif ( !empty($w) ) {		// We need to get the month from MySQL		$thisyear = ''.intval(substr($m, 0, 4));		$d = (($w - 1) * 7) + 6; //it seems MySQL's weeks disagree with PHP's		$thismonth = $wpdb->get_var("SELECT DATE_FORMAT((DATE_ADD('${thisyear}0101', INTERVAL $d DAY) ), '%m')");	} elseif ( !empty($m) ) {		$thisyear = ''.intval(substr($m, 0, 4));		if ( strlen($m) < 6 )				$thismonth = '01';		else				$thismonth = ''.zeroise(intval(substr($m, 4, 2)), 2);	} else {		$thisyear = gmdate('Y', current_time('timestamp'));		$thismonth = gmdate('m', current_time('timestamp'));	}	$unixmonth = mktime(0, 0 , 0, $thismonth, 1, $thisyear);	// Get the next and previous month and year with at least one post	$previous = $wpdb->get_row("SELECT DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date < '$thisyear-$thismonth-01'		AND post_type = 'post' AND post_status = 'publish'			ORDER BY post_date DESC			LIMIT 1");	$next = $wpdb->get_row("SELECT	DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date >	'$thisyear-$thismonth-01'		AND MONTH( post_date ) != MONTH( '$thisyear-$thismonth-01' )		AND post_type = 'post' AND post_status = 'publish'			ORDER	BY post_date ASC			LIMIT 1");	/* translators: Calendar caption: 1: month name, 2: 4-digit year */	$calendar_caption = _x('%1$s %2$s', 'calendar caption');	$calendar_output = '<table id="wp-calendar" summary="' . esc_attr__('Calendar') . '">	<caption>' . sprintf($calendar_caption, $wp_locale->get_month($thismonth), date('Y', $unixmonth)) . '</caption>	<thead>	<tr>';	$myweek = array();	for ( $wdcount=0; $wdcount<=6; $wdcount++ ) {		$myweek[] = $wp_locale->get_weekday(($wdcount+$week_begins)%7);	}	foreach ( $myweek as $wd ) {		$day_name = (true == $initial) ? $wp_locale->get_weekday_initial($wd) : $wp_locale->get_weekday_abbrev($wd);		$wd = esc_attr($wd);		$calendar_output .= "\n\t\t<th scope=\"col\" title=\"$wd\">$day_name</th>";	}	$calendar_output .= '	</tr>	</thead>	<tfoot>	<tr>';	if ( $previous ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev"><a href="' . get_month_link($previous->year, $previous->month) . '" title="' . sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($previous->month), date('Y', mktime(0, 0 , 0, $previous->month, 1, $previous->year))) . '">&laquo; ' . $wp_locale->get_month_abbrev($wp_locale->get_month($previous->month)) . '</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev" class="pad">&nbsp;</td>';	}	$calendar_output .= "\n\t\t".'<td class="pad">&nbsp;</td>';	if ( $next ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next"><a href="' . get_month_link($next->year, $next->month) . '" title="' . esc_attr( sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($next->month), date('Y', mktime(0, 0 , 0, $next->month, 1, $next->year))) ) . '">' . $wp_locale->get_month_abbrev($wp_locale->get_month($next->month)) . ' &raquo;</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next" class="pad">&nbsp;</td>';	}	$calendar_output .= '	</tr>	</tfoot>	<tbody>	<tr>';	// Get days with posts	$dayswithposts = $wpdb->get_results("SELECT DISTINCT DAYOFMONTH(post_date)		FROM $wpdb->posts WHERE MONTH(post_date) = '$thismonth'		AND YEAR(post_date) = '$thisyear'		AND post_type = 'post' AND post_status = 'publish'		AND post_date < '" . current_time('mysql') . '\'', ARRAY_N);	if ( $dayswithposts ) {		foreach ( (array) $dayswithposts as $daywith ) {			$daywithpost[] = $daywith[0];		}	} else {		$daywithpost = array();	}	if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'camino') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false)		$ak_title_separator = "\n";	else		$ak_title_separator = ', ';	$ak_titles_for_day = array();	$ak_post_titles = $wpdb->get_results("SELECT ID, post_title, DAYOFMONTH(post_date) as dom "		."FROM $wpdb->posts "		."WHERE YEAR(post_date) = '$thisyear' "		."AND MONTH(post_date) = '$thismonth' "		."AND post_date < '".current_time('mysql')."' "		."AND post_type = 'post' AND post_status = 'publish'"	);	if ( $ak_post_titles ) {		foreach ( (array) $ak_post_titles as $ak_post_title ) {				$post_title = esc_attr( apply_filters( 'the_title', $ak_post_title->post_title, $ak_post_title->ID ) );				if ( empty($ak_titles_for_day['day_'.$ak_post_title->dom]) )					$ak_titles_for_day['day_'.$ak_post_title->dom] = '';				if ( empty($ak_titles_for_day["$ak_post_title->dom"]) ) // first one					$ak_titles_for_day["$ak_post_title->dom"] = $post_title;				else					$ak_titles_for_day["$ak_post_title->dom"] .= $ak_title_separator . $post_title;		}	}	// See how much we should pad in the beginning	$pad = calendar_week_mod(date('w', $unixmonth)-$week_begins);	if ( 0 != $pad )		$calendar_output .= "\n\t\t".'<td colspan="'. esc_attr($pad) .'" class="pad">&nbsp;</td>';	$daysinmonth = intval(date('t', $unixmonth));	for ( $day = 1; $day <= $daysinmonth; ++$day ) {		if ( isset($newrow) && $newrow )			$calendar_output .= "\n\t</tr>\n\t<tr>\n\t\t";		$newrow = false;		if ( $day == gmdate('j', current_time('timestamp')) && $thismonth == gmdate('m', current_time('timestamp')) && $thisyear == gmdate('Y', current_time('timestamp')) )			$calendar_output .= '<td id="today">';		else			$calendar_output .= '<td>';		if ( in_array($day, $daywithpost) ) // any posts today?				$calendar_output .= '<a href="' . get_day_link($thisyear, $thismonth, $day) . "\" title=\"" . esc_attr($ak_titles_for_day[$day]) . "\">$day</a>";		else			$calendar_output .= $day;		$calendar_output .= '</td>';		if ( 6 == calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins) )			$newrow = true;	}	$pad = 7 - calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins);	if ( $pad != 0 && $pad != 7 )		$calendar_output .= "\n\t\t".'<td class="pad" colspan="'. esc_attr($pad) .'">&nbsp;</td>';	$calendar_output .= "\n\t</tr>\n\t</tbody>\n\t</table>";	$cache[ $key ] = $calendar_output;	wp_cache_set( 'get_calendar', $cache, 'calendar' );	if ( $echo )		echo apply_filters( 'get_calendar',  $calendar_output );	else		return apply_filters( 'get_calendar',  $calendar_output );}/** * Purge the cached results of get_calendar. * * @see get_calendar * @since 2.1.0 */function delete_get_calendar_cache() {	wp_cache_delete( 'get_calendar', 'calendar' );}add_action( 'save_post', 'delete_get_calendar_cache' );add_action( 'delete_post', 'delete_get_calendar_cache' );add_action( 'update_option_start_of_week', 'delete_get_calendar_cache' );add_action( 'update_option_gmt_offset', 'delete_get_calendar_cache' );/** * Display all of the allowed tags in HTML format with attributes. * * This is useful for displaying in the comment area, which elements and * attributes are supported. As well as any plugins which want to display it. * * @since 1.0.1 * @uses $allowedtags * * @return string HTML allowed tags entity encoded. */function allowed_tags() {	global $allowedtags;	$allowed = '';	foreach ( (array) $allowedtags as $tag => $attributes ) {		$allowed .= '<'.$tag;		if ( 0 < count($attributes) ) {			foreach ( $attributes as $attribute => $limits ) {				$allowed .= ' '.$attribute.'=""';			}		}		$allowed .= '> ';	}	return htmlentities($allowed);}/***** Date/Time tags *****//** * Outputs the date in iso8601 format for xml files. * * @since 1.0.0 */function the_date_xml() {	global $post;	echo mysql2date('Y-m-d', $post->post_date, false);}/** * Display or Retrieve the date the current $post was written (once per date) * * Will only output the date if the current post's date is different from the * previous one output. * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the * function is called several times for each post. * * HTML output can be filtered with 'the_date'. * Date string output can be filtered with 'get_the_date'. * * @since 0.71 * @uses get_the_date() * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_date( $d = '', $before = '', $after = '', $echo = true ) {	global $day, $previousday;	$the_date = '';	if ( $day != $previousday ) {		$the_date .= $before;		$the_date .= get_the_date( $d );		$the_date .= $after;		$previousday = $day;		$the_date = apply_filters('the_date', $the_date, $d, $before, $after);		if ( $echo )			echo $the_date;		else			return $the_date;	}	return null;}/** * Retrieve the date the current $post was written. * * Unlike the_date() this function will always return the date. * Modify output with 'get_the_date' filter. * * @since 3.0.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @return string|null Null if displaying, string if retrieving. */function get_the_date( $d = '' ) {	global $post;	$the_date = '';	if ( '' == $d )		$the_date .= mysql2date(get_option('date_format'), $post->post_date);	else		$the_date .= mysql2date($d, $post->post_date);	return apply_filters('get_the_date', $the_date, $d);}/** * Display the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_modified_date($d = '', $before='', $after='', $echo = true) {	$the_modified_date = $before . get_the_modified_date($d) . $after;	$the_modified_date = apply_filters('the_modified_date', $the_modified_date, $d, $before, $after);	if ( $echo )		echo $the_modified_date;	else		return $the_modified_date;}/** * Retrieve the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format. Defaults to the "date_format" option * @return string */function get_the_modified_date($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('date_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_date', $the_time, $d);}/** * Display the time at which the post was written. * * @since 0.71 * * @param string $d Either 'G', 'U', or php date format. */function the_time( $d = '' ) {	echo apply_filters('the_time', get_the_time( $d ), $d);}/** * Retrieve the time at which the post was written. * * @since 1.5.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @param int|object $post Optional post ID or object. Default is global $post object. * @return string */function get_the_time( $d = '', $post = null ) {	$post = get_post($post);	if ( '' == $d )		$the_time = get_post_time(get_option('time_format'), false, $post, true);	else		$the_time = get_post_time($d, false, $post, true);	return apply_filters('get_the_time', $the_time, $d, $post);}/** * Retrieve the time at which the post was written. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional post ID or object. Default is global $post object. * @param bool $translate Whether to translate the time string * @return string */function get_post_time( $d = 'U', $gmt = false, $post = null, $translate = false ) { // returns timestamp	$post = get_post($post);	if ( $gmt )		$time = $post->post_date_gmt;	else		$time = $post->post_date;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_time', $time, $d, $gmt);}/** * Display the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. */function the_modified_time($d = '') {	echo apply_filters('the_modified_time', get_the_modified_time($d), $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @return string */function get_the_modified_time($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('time_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_time', $the_time, $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional, default is 'U'. Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional, default is global post object. A post_id or post object * @param bool $translate Optional, default is false. Whether to translate the result * @return string Returns timestamp */function get_post_modified_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {	$post = get_post($post);	if ( $gmt )		$time = $post->post_modified_gmt;	else		$time = $post->post_modified;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_modified_time', $time, $d, $gmt);}/** * Display the weekday on which the post was written. * * @since 0.71 * @uses $wp_locale * @uses $post */function the_weekday() {	global $wp_locale, $post;	$the_weekday = $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));	$the_weekday = apply_filters('the_weekday', $the_weekday);	echo $the_weekday;}/** * Display the weekday on which the post was written. * * Will only output the weekday if the current post's weekday is different from * the previous one output. * * @since 0.71 * * @param string $before Optional Output before the date. * @param string $after Optional Output after the date.  */function the_weekday_date($before='',$after='') {	global $wp_locale, $post, $day, $previousweekday;	$the_weekday_date = '';	if ( $day != $previousweekday ) {		$the_weekday_date .= $before;		$the_weekday_date .= $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));		$the_weekday_date .= $after;		$previousweekday = $day;	}	$the_weekday_date = apply_filters('the_weekday_date', $the_weekday_date, $before, $after);	echo $the_weekday_date;}/** * Fire the wp_head action * * @since 1.2.0 * @uses do_action() Calls 'wp_head' hook. */function wp_head() {	do_action('wp_head');}/** * Fire the wp_footer action * * @since 1.5.1 * @uses do_action() Calls 'wp_footer' hook. */function wp_footer() {	do_action('wp_footer');}/** * Display the links to the general feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links( $args = array() ) {	if ( !current_theme_supports('automatic-feed-links') )		return;	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'	=> _x('&raquo;', 'feed link'),		/* translators: 1: blog title, 2: separator (raquo) */		'feedtitle'	=> __('%1$s %2$s Feed'),		/* translators: %s: blog title, 2: separator (raquo) */		'comstitle'	=> __('%1$s %2$s Comments Feed'),	);	$args = wp_parse_args( $args, $defaults );	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['feedtitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link() . "\" />\n";	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['comstitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link( 'comments_' . get_default_feed() ) . "\" />\n";}/** * Display the links to the extra feeds such as category feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links_extra( $args = array() ) {	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'   => _x('&raquo;', 'feed link'),		/* translators: 1: blog name, 2: separator(raquo), 3: post title */		'singletitle' => __('%1$s %2$s %3$s Comments Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: category name */		'cattitle'    => __('%1$s %2$s %3$s Category Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: tag name */		'tagtitle'    => __('%1$s %2$s %3$s Tag Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: author name  */		'authortitle' => __('%1$s %2$s Posts by %3$s Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: search phrase */		'searchtitle' => __('%1$s %2$s Search Results for &#8220;%3$s&#8221; Feed'),	);	$args = wp_parse_args( $args, $defaults );	if ( is_single() || is_page() ) {		$post = &get_post( $id = 0 );		if ( comments_open() || pings_open() || $post->comment_count > 0 ) {			$title = esc_attr(sprintf( $args['singletitle'], get_bloginfo('name'), $args['separator'], esc_html( get_the_title() ) ));			$href = get_post_comments_feed_link( $post->ID );		}	} elseif ( is_category() ) {		$cat_id = intval( get_query_var('cat') );		$title = esc_attr(sprintf( $args['cattitle'], get_bloginfo('name'), $args['separator'], get_cat_name( $cat_id ) ));		$href = get_category_feed_link( $cat_id );	} elseif ( is_tag() ) {		$tag_id = intval( get_query_var('tag_id') );		$tag = get_tag( $tag_id );		$title = esc_attr(sprintf( $args['tagtitle'], get_bloginfo('name'), $args['separator'], $tag->name ));		$href = get_tag_feed_link( $tag_id );	} elseif ( is_author() ) {		$author_id = intval( get_query_var('author') );		$title = esc_attr(sprintf( $args['authortitle'], get_bloginfo('name'), $args['separator'], get_the_author_meta( 'display_name', $author_id ) ));		$href = get_author_feed_link( $author_id );	} elseif ( is_search() ) {		$title = esc_attr(sprintf( $args['searchtitle'], get_bloginfo('name'), $args['separator'], get_search_query( false ) ));		$href = get_search_feed_link();	}	if ( isset($title) && isset($href) )		echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . $title . '" href="' . $href . '" />' . "\n";}/** * Display the link to the Really Simple Discovery service endpoint. * * @link http://archipelago.phrasewise.com/rsd * @since 2.0.0 */function rsd_link() {	echo '<link rel="EditURI" type="application/rsd+xml" title="RSD" href="' . get_bloginfo('wpurl') . "/xmlrpc.php?rsd\" />\n";}/** * Display the link to the Windows Live Writer manifest file. * * @link http://msdn.microsoft.com/en-us/library/bb463265.aspx * @since 2.3.1 */function wlwmanifest_link() {	echo '<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="'		. get_bloginfo('wpurl') . '/wp-includes/wlwmanifest.xml" /> ' . "\n";}/** * Display a noindex meta tag if required by the blog configuration. * * If a blog is marked as not being public then the noindex meta tag will be * output to tell web robots not to index the page content. * * @since 2.1.0 */function noindex() {	// If the blog is not public, tell robots to go away.	if ( '0' == get_option('blog_public') )		echo "<meta name='robots' content='noindex,nofollow' />\n";}/** * Determine if TinyMCE is available. * * Checks to see if the user has deleted the tinymce files to slim down there WordPress install. * * @since 2.1.0 * * @return bool Whether TinyMCE exists. */function rich_edit_exists() {	global $wp_rich_edit_exists;	if ( !isset($wp_rich_edit_exists) )		$wp_rich_edit_exists = file_exists(ABSPATH . WPINC . '/js/tinymce/tiny_mce.js');	return $wp_rich_edit_exists;}/** * Whether the user should have a WYSIWIG editor. * * Checks that the user requires a WYSIWIG editor and that the editor is * supported in the users browser. * * @since 2.0.0 * * @return bool */function user_can_richedit() {	global $wp_rich_edit, $pagenow;	if ( !isset( $wp_rich_edit) ) {		if ( get_user_option( 'rich_editing' ) == 'true' &&			( ( preg_match( '!AppleWebKit/(\d+)!', $_SERVER['HTTP_USER_AGENT'], $match ) && intval($match[1]) >= 420 ) ||				!preg_match( '!opera[ /][2-8]|konqueror|safari!i', $_SERVER['HTTP_USER_AGENT'] ) )				&& 'comment.php' != $pagenow ) {			$wp_rich_edit = true;		} else {			$wp_rich_edit = false;		}	}	return apply_filters('user_can_richedit', $wp_rich_edit);}/** * Find out which editor should be displayed by default. * * Works out which of the two editors to display as the current editor for a * user. * * @since 2.5.0 * * @return string Either 'tinymce', or 'html', or 'test' */function wp_default_editor() {	$r = user_can_richedit() ? 'tinymce' : 'html'; // defaults	if ( $user = wp_get_current_user() ) { // look for cookie		$ed = get_user_setting('editor', 'tinymce');		$r = ( in_array($ed, array('tinymce', 'html', 'test') ) ) ? $ed : $r;	}	return apply_filters( 'wp_default_editor', $r ); // filter}/** * Display visual editor forms: TinyMCE, or HTML, or both. * * The amount of rows the text area will have for the content has to be between * 3 and 100 or will default at 12. There is only one option used for all users, * named 'default_post_edit_rows'. * * If the user can not use the rich editor (TinyMCE), then the switch button * will not be displayed. * * @since 2.1.0 * * @param string $content Textarea content. * @param string $id Optional, default is 'content'. HTML ID attribute value. * @param string $prev_id Optional, default is 'title'. HTML ID name for switching back and forth between visual editors. * @param bool $media_buttons Optional, default is true. Whether to display media buttons. * @param int $tab_index Optional, default is 2. Tabindex for textarea element. */function the_editor($content, $id = 'content', $prev_id = 'title', $media_buttons = true, $tab_index = 2) {	$rows = get_option('default_post_edit_rows');	if (($rows < 3) || ($rows > 100))		$rows = 12;	if ( !current_user_can( 'upload_files' ) )		$media_buttons = false;	$richedit =  user_can_richedit();	$class = '';	if ( $richedit || $media_buttons ) { ?>	<div id="editor-toolbar"><?php	if ( $richedit ) {		$wp_default_editor = wp_default_editor(); ?>		<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('<?php echo $id; ?>')" /></div><?php	if ( 'html' == $wp_default_editor ) {			add_filter('the_editor_content', 'wp_htmledit_pre'); ?>			<a id="edButtonHTML" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	} else {			$class = " class='theEditor'";			add_filter('the_editor_content', 'wp_richedit_pre'); ?>			<a id="edButtonHTML" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	}	}	if ( $media_buttons ) { ?>		<div id="media-buttons" class="hide-if-no-js"><?php	do_action( 'media_buttons' ); ?>		</div><?php	} ?>	</div><?php	}?>	<div id="quicktags"><?php	wp_print_scripts( 'quicktags' ); ?>	<script type="text/javascript">edToolbar()</script>	</div><?php	$the_editor = apply_filters('the_editor', "<div id='editorcontainer'><textarea rows='$rows'$class cols='40' name='$id' tabindex='$tab_index' id='$id'>%s</textarea></div>\n");	$the_editor_content = apply_filters('the_editor_content', $content);	printf($the_editor, $the_editor_content);?>	<script type="text/javascript">	edCanvas = document.getElementById('<?php echo $id; ?>');	</script><?php}/** * Retrieve the contents of the search WordPress query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @since 2.3.0 * @uses esc_attr() * * @param bool $escaped Whether the result is escaped. Default true. * 	Only use when you are later escaping it. Do not use unescaped. * @return string */function get_search_query( $escaped = true ) {	$query = apply_filters( 'get_search_query', get_query_var( 's' ) );	if ( $escaped )		$query = esc_attr( $query );	return $query;}/** * Display the contents of the search query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @uses esc_attr() * @since 2.1.0 */function the_search_query() {	echo esc_attr( apply_filters( 'the_search_query', get_search_query( false ) ) );}/** * Display the language attributes for the html tag. * * Builds up a set of html attributes containing the text direction and language * information for the page. * * @since 2.1.0 * * @param string $doctype The type of html document (xhtml|html). */function language_attributes($doctype = 'html') {	$attributes = array();	$output = '';	if ( function_exists( 'is_rtl' ) )		$attributes[] = 'dir="' . ( is_rtl() ? 'rtl' : 'ltr' ) . '"';	if ( $lang = get_bloginfo('language') ) {		if ( get_option('html_type') == 'text/html' || $doctype == 'html' )			$attributes[] = "lang=\"$lang\"";		if ( get_option('html_type') != 'text/html' || $doctype == 'xhtml' )			$attributes[] = "xml:lang=\"$lang\"";	}	$output = implode(' ', $attributes);	$output = apply_filters('language_attributes', $output);	echo $output;}/** * Retrieve paginated link for archive post pages. * * Technically, the function can be used to create paginated link list for any * area. The 'base' argument is used to reference the url, which will be used to * create the paginated links. The 'format' argument is then used for replacing * the page number. It is however, most likely and by default, to be used on the * archive post pages. * * The 'type' argument controls format of the returned value. The default is * 'plain', which is just a string with the links separated by a newline * character. The other possible values are either 'array' or 'list'. The * 'array' value will return an array of the paginated link list to offer full * control of display. The 'list' value will place all of the paginated links in * an unordered HTML list. * * The 'total' argument is the total amount of pages and is an integer. The * 'current' argument is the current page number and is also an integer. * * An example of the 'base' argument is "http://example.com/all_posts.php%_%" * and the '%_%' is required. The '%_%' will be replaced by the contents of in * the 'format' argument. An example for the 'format' argument is "?page=%#%" * and the '%#%' is also required. The '%#%' will be replaced with the page * number. * * You can include the previous and next links in the list by setting the * 'prev_next' argument to true, which it is by default. You can set the * previous text, by using the 'prev_text' argument. You can set the next text * by setting the 'next_text' argument. * * If the 'show_all' argument is set to true, then it will show all of the pages * instead of a short list of the pages near the current page. By default, the * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size' * arguments. The 'end_size' argument is how many numbers on either the start * and the end list edges, by default is 1. The 'mid_size' argument is how many * numbers to either side of current page, but not including current page. * * It is possible to add query vars to the link by using the 'add_args' argument * and see {@link add_query_arg()} for more information. * * @since 2.1.0 * * @param string|array $args Optional. Override defaults. * @return array|string String of page links or array of page links. */function paginate_links( $args = '' ) {	$defaults = array(		'base' => '%_%', // http://example.com/all_posts.php%_% : %_% is replaced by format (below)		'format' => '?page=%#%', // ?page=%#% : %#% is replaced by the page number		'total' => 1,		'current' => 0,		'show_all' => false,		'prev_next' => true,		'prev_text' => __('&laquo; Previous'),		'next_text' => __('Next &raquo;'),		'end_size' => 1,		'mid_size' => 2,		'type' => 'plain',		'add_args' => false, // array of query args to add		'add_fragment' => ''	);	$args = wp_parse_args( $args, $defaults );	extract($args, EXTR_SKIP);	// Who knows what else people pass in $args	$total = (int) $total;	if ( $total < 2 )		return;	$current  = (int) $current;	$end_size = 0  < (int) $end_size ? (int) $end_size : 1; // Out of bounds?  Make it the default.	$mid_size = 0 <= (int) $mid_size ? (int) $mid_size : 2;	$add_args = is_array($add_args) ? $add_args : false;	$r = '';	$page_links = array();	$n = 0;	$dots = false;	if ( $prev_next && $current && 1 < $current ) :		$link = str_replace('%_%', 2 == $current ? '' : $format, $base);		$link = str_replace('%#%', $current - 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='prev page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$prev_text</a>";	endif;	for ( $n = 1; $n <= $total; $n++ ) :		$n_display = number_format_i18n($n);		if ( $n == $current ) :			$page_links[] = "<span class='page-numbers current'>$n_display</span>";			$dots = true;		else :			if ( $show_all || ( $n <= $end_size || ( $current && $n >= $current - $mid_size && $n <= $current + $mid_size ) || $n > $total - $end_size ) ) :				$link = str_replace('%_%', 1 == $n ? '' : $format, $base);				$link = str_replace('%#%', $n, $link);				if ( $add_args )					$link = add_query_arg( $add_args, $link );				$link .= $add_fragment;				$page_links[] = "<a class='page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$n_display</a>";				$dots = true;			elseif ( $dots && !$show_all ) :				$page_links[] = "<span class='page-numbers dots'>...</span>";				$dots = false;			endif;		endif;	endfor;	if ( $prev_next && $current && ( $current < $total || -1 == $total ) ) :		$link = str_replace('%_%', $format, $base);		$link = str_replace('%#%', $current + 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='next page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$next_text</a>";	endif;	switch ( $type ) :		case 'array' :			return $page_links;			break;		case 'list' :			$r .= "<ul class='page-numbers'>\n\t<li>";			$r .= join("</li>\n\t<li>", $page_links);			$r .= "</li>\n</ul>\n";			break;		default :			$r = join("\n", $page_links);			break;	endswitch;	return $r;}/** * Registers an admin colour scheme css file. * * Allows a plugin to register a new admin colour scheme. For example: * <code> * wp_admin_css_color('classic', __('Classic'), admin_url("css/colors-classic.css"), * array('#07273E', '#14568A', '#D54E21', '#2683AE')); * </code> * * @since 2.5.0 * * @param string $key The unique key for this theme. * @param string $name The name of the theme. * @param string $url The url of the css file containing the colour scheme. * @param array @colors Optional An array of CSS color definitions which are used to give the user a feel for the theme. */function wp_admin_css_color($key, $name, $url, $colors = array()) {	global $_wp_admin_css_colors;	if ( !isset($_wp_admin_css_colors) )		$_wp_admin_css_colors = array();	$_wp_admin_css_colors[$key] = (object) array('name' => $name, 'url' => $url, 'colors' => $colors);}/** * Registers the default Admin color schemes * * @since 3.0.0 */function register_admin_color_schemes() {	wp_admin_css_color('classic', __('Blue'), admin_url("css/colors-classic.css"), array('#073447', '#21759B', '#EAF3FA', '#BBD8E7'));	wp_admin_css_color('fresh', __('Gray'), admin_url("css/colors-fresh.css"), array('#464646', '#6D6D6D', '#F1F1F1', '#DFDFDF'));}/** * Display the URL of a WordPress admin CSS file. * * @see WP_Styles::_css_href and its style_loader_src filter. * * @since 2.3.0 * * @param string $file file relative to wp-admin/ without its ".css" extension. */function wp_admin_css_uri( $file = 'wp-admin' ) {	if ( defined('WP_INSTALLING') ) {		$_file = "./$file.css";	} else {		$_file = admin_url("$file.css");	}	$_file = add_query_arg( 'version', get_bloginfo( 'version' ),  $_file );	return apply_filters( 'wp_admin_css_uri', $_file, $file );}/** * Enqueues or directly prints a stylesheet link to the specified CSS file. * * "Intelligently" decides to enqueue or to print the CSS file. If the * 'wp_print_styles' action has *not* yet been called, the CSS file will be * enqueued. If the wp_print_styles action *has* been called, the CSS link will * be printed. Printing may be forced by passing TRUE as the $force_echo * (second) parameter. * * For backward compatibility with WordPress 2.3 calling method: If the $file * (first) parameter does not correspond to a registered CSS file, we assume * $file is a file relative to wp-admin/ without its ".css" extension. A * stylesheet link to that generated URL is printed. * * @package WordPress * @since 2.3.0 * @uses $wp_styles WordPress Styles Object * * @param string $file Style handle name or file name (without ".css" extension) relative to wp-admin/ * @param bool $force_echo Optional.  Force the stylesheet link to be printed rather than enqueued. */function wp_admin_css( $file = 'wp-admin', $force_echo = false ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	// For backward compatibility	$handle = 0 === strpos( $file, 'css/' ) ? substr( $file, 4 ) : $file;	if ( $wp_styles->query( $handle ) ) {		if ( $force_echo || did_action( 'wp_print_styles' ) ) // we already printed the style queue.  Print this one immediately			wp_print_styles( $handle );		else // Add to style queue			wp_enqueue_style( $handle );		return;	}	echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( $file ) ) . "' type='text/css' />\n", $file );	if ( is_rtl() )		echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( "$file-rtl" ) ) . "' type='text/css' />\n", "$file-rtl" );}/** * Enqueues the default ThickBox js and css. * * If any of the settings need to be changed, this can be done with another js * file similar to media-upload.js and theme-preview.js. That file should * require array('thickbox') to ensure it is loaded after. * * @since 2.5.0 */function add_thickbox() {	wp_enqueue_script( 'thickbox' );	wp_enqueue_style( 'thickbox' );}/** * Display the XHTML generator that is generated on the wp_head hook. * * @since 2.5.0 */function wp_generator() {	the_generator( apply_filters( 'wp_generator_type', 'xhtml' ) );}/** * Display the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators overall the the_generator filter. * * @since 2.5.0 * @uses apply_filters() Calls 'the_generator' hook. * * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export). */function the_generator( $type ) {	echo apply_filters('the_generator', get_the_generator($type), $type) . "\n";}/** * Creates the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators on an individual basis using the * 'get_the_generator_{$type}' filter. * * @since 2.5.0 * @uses apply_filters() Calls 'get_the_generator_$type' hook. * * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export). * @return string The HTML content for the generator. */function get_the_generator( $type = '' ) {	if ( empty( $type ) ) {		$current_filter = current_filter();		if ( empty( $current_filter ) )			return;		switch ( $current_filter ) {			case 'rss2_head' :			case 'commentsrss2_head' :				$type = 'rss2';				break;			case 'rss_head' :			case 'opml_head' :				$type = 'comment';				break;			case 'rdf_header' :				$type = 'rdf';				break;			case 'atom_head' :			case 'comments_atom_head' :			case 'app_head' :				$type = 'atom';				break;		}	}	switch ( $type ) {		case 'html':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '">';			break;		case 'xhtml':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '" />';			break;		case 'atom':			$gen = '<generator uri="http://wordpress.org/" version="' . get_bloginfo_rss( 'version' ) . '">WordPress</generator>';			break;		case 'rss2':			$gen = '<generator>http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '</generator>';			break;		case 'rdf':			$gen = '<admin:generatorAgent rdf:resource="http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '" />';			break;		case 'comment':			$gen = '<!-- generator="WordPress/' . get_bloginfo( 'version' ) . '" -->';			break;		case 'export':			$gen = '<!-- generator="WordPress/' . get_bloginfo_rss('version') . '" created="'. date('Y-m-d H:i') . '"-->';			break;	}	return apply_filters( "get_the_generator_{$type}", $gen, $type );}/** * Outputs the html checked attribute. * * Compares the first two arguments and if identical marks as checked * * @since 1.0 * * @param mixed $checked One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function checked( $checked, $current = true, $echo = true ) {	return __checked_selected_helper( $checked, $current, $echo, 'checked' );}/** * Outputs the html selected attribute. * * Compares the first two arguments and if identical marks as selected * * @since 1.0 * * @param mixed selected One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function selected( $selected, $current = true, $echo = true ) {	return __checked_selected_helper( $selected, $current, $echo, 'selected' );}/** * Outputs the html disabled attribute. * * Compares the first two arguments and if identical marks as disabled * * @since 3.0.0 * * @param mixed $disabled One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function disabled( $disabled, $current = true, $echo = true ) {	return __checked_selected_helper( $disabled, $current, $echo, 'disabled' );}/** * Private helper function for checked, selected, and disabled. * * Compares the first two arguments and if identical marks as $type * * @since 2.8 * @access private * * @param any $helper One of the values to compare * @param any $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @param string $type The type of checked|selected|disabled we are doing * @return string html attribute or empty string */function __checked_selected_helper( $helper, $current, $echo, $type ) {	if ( (string) $helper === (string) $current )		$result = " $type='$type'";	else		$result = '';	if ( $echo )		echo $result;	return $result;}?>
<?php/** * Deprecated functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be * removed in a later version. * * @package WordPress * @subpackage Deprecated *//* * Deprecated functions come here to die. *//** * Entire Post data. * * @since 0.71 * @deprecated 1.5.1 * @deprecated Use get_post() * @see get_post() * * @param int $postid * @return array */function get_postdata($postid) {	_deprecated_function( __FUNCTION__, '1.5.1', 'get_post()' );	$post = &get_post($postid);	$postdata = array (		'ID' => $post->ID,		'Author_ID' => $post->post_author,		'Date' => $post->post_date,		'Content' => $post->post_content,		'Excerpt' => $post->post_excerpt,		'Title' => $post->post_title,		'Category' => $post->post_category,		'post_status' => $post->post_status,		'comment_status' => $post->comment_status,		'ping_status' => $post->ping_status,		'post_password' => $post->post_password,		'to_ping' => $post->to_ping,		'pinged' => $post->pinged,		'post_type' => $post->post_type,		'post_name' => $post->post_name	);	return $postdata;}/** * Sets up the WordPress Loop. * * @since 1.0.1 * @deprecated 1.5 * @deprecated Use The Loop - {@link http://codex.wordpress.org/The_Loop Use new WordPress Loop} */function start_wp() {	global $wp_query, $post;	_deprecated_function( __FUNCTION__, '1.5', __('new WordPress Loop') );	// Since the old style loop is being used, advance the query iterator here.	$wp_query->next_post();	setup_postdata($post);}/** * Return or Print Category ID. * * @since 0.71 * @deprecated 0.71 * @deprecated use get_the_category() * @see get_the_category() * * @param bool $echo * @return null|int */function the_category_ID($echo = true) {	_deprecated_function( __FUNCTION__, '0.71', 'get_the_category()' );	// Grab the first cat in the list.	$categories = get_the_category();	$cat = $categories[0]->term_id;	if ( $echo )		echo $cat;	return $cat;}/** * Print category with optional text before and after. * * @since 0.71 * @deprecated 0.71 * @deprecated use get_the_category_by_ID() * @see get_the_category_by_ID() * * @param string $before * @param string $after */function the_category_head($before='', $after='') {	global $currentcat, $previouscat;	_deprecated_function( __FUNCTION__, '0.71', 'get_the_category_by_ID()' );	// Grab the first cat in the list.	$categories = get_the_category();	$currentcat = $categories[0]->category_id;	if ( $currentcat != $previouscat ) {		echo $before;		echo get_the_category_by_ID($currentcat);		echo $after;		$previouscat = $currentcat;	}}/** * Prints link to the previous post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use previous_post_link() * @see previous_post_link() * * @param string $format * @param string $previous * @param string $title * @param string $in_same_cat * @param int $limitprev * @param string $excluded_categories */function previous_post($format='%', $previous='previous post: ', $title='yes', $in_same_cat='no', $limitprev=1, $excluded_categories='') {	_deprecated_function( __FUNCTION__, '2.0', 'previous_post_link()' );	if ( empty($in_same_cat) || 'no' == $in_same_cat )		$in_same_cat = false;	else		$in_same_cat = true;	$post = get_previous_post($in_same_cat, $excluded_categories);	if ( !$post )		return;	$string = '<a href="'.get_permalink($post->ID).'">'.$previous;	if ( 'yes' == $title )		$string .= apply_filters('the_title', $post->post_title, $post);	$string .= '</a>';	$format = str_replace('%', $string, $format);	echo $format;}/** * Prints link to the next post. * * @since 0.71 * @deprecated 2.0 * @deprecated Use next_post_link() * @see next_post_link() * * @param string $format * @param string $previous * @param string $title * @param string $in_same_cat * @param int $limitprev * @param string $excluded_categories */function next_post($format='%', $next='next post: ', $title='yes', $in_same_cat='no', $limitnext=1, $excluded_categories='') {	_deprecated_function( __FUNCTION__, '2.0', 'next_post_link()' );	if ( empty($in_same_cat) || 'no' == $in_same_cat )		$in_same_cat = false;	else		$in_same_cat = true;	$post = get_next_post($in_same_cat, $excluded_categories);	if ( !$post	)		return;	$string = '<a href="'.get_permalink($post->ID).'">'.$next;	if ( 'yes' == $title )		$string .= apply_filters('the_title', $post->post_title, $nextpost);	$string .= '</a>';	$format = str_replace('%', $string, $format);	echo $format;}/** * Whether user can create a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_create_post($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return ($author_data->user_level > 1);}/** * Whether user can create a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_create_draft($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return ($author_data->user_level >= 1);}/** * Whether user can edit a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool */function user_can_edit_post($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	$post = get_post($post_id);	$post_author_data = get_userdata($post->post_author);	if ( (($user_id == $post_author_data->ID) && !($post->post_status == 'publish' && $author_data->user_level < 2))			 || ($author_data->user_level > $post_author_data->user_level)			 || ($author_data->user_level >= 10) ) {		return true;	} else {		return false;	}}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool */function user_can_delete_post($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit, one can delete	return user_can_edit_post($user_id, $post_id, $blog_id);}/** * Whether user can set new posts' dates. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_set_post_date($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return (($author_data->user_level > 4) && user_can_create_post($user_id, $blog_id, $category_id));}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can edit $post_id's date */function user_can_edit_post_date($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return (($author_data->user_level > 4) && user_can_edit_post($user_id, $post_id, $blog_id));}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can edit $post_id's comments */function user_can_edit_post_comments($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit a post, one can edit comments made on it	return user_can_edit_post($user_id, $post_id, $blog_id);}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can delete $post_id's comments */function user_can_delete_post_comments($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit comments, one can delete comments	return user_can_edit_post_comments($user_id, $post_id, $blog_id);}/** * Can user can edit other user. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $other_user * @return bool */function user_can_edit_user($user_id, $other_user) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$user  = get_userdata($user_id);	$other = get_userdata($other_user);	if ( $user->user_level > $other->user_level || $user->user_level > 8 || $user->ID == $other->ID )		return true;	else		return false;}/** * Gets the links associated with category $cat_name. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name Optional. The category name to use. If no match is found uses all. * @param string $before Optional. The html to output before the link. * @param string $after Optional. The html to output after the link. * @param string $between Optional. The html to output between the link/image and it's description. Not used if no image or $show_images is true. * @param bool $show_images Optional. Whether to show images (if defined). * @param string $orderby Optional. The order to output the links. E.g. 'id', 'name', 'url', 'description' or 'rating'. Or maybe owner. *		If you start the name with an underscore the order will be reversed. You can also specify 'rand' as the order which will return links in a *		random order. * @param bool $show_description Optional. Whether to show the description if show_images=false/not defined. * @param bool $show_rating Optional. Show rating stars/chars. * @param int $limit		Optional. Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Optional. Whether to show last updated timestamp */function get_linksbyname($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = true, $orderby = 'id',						 $show_description = true, $show_rating = false,						 $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$cat_id = -1;	$cat = get_term_by('name', $cat_name, 'link_category');	if ( $cat )		$cat_id = $cat->term_id;	get_links($cat_id, $before, $after, $between, $show_images, $orderby, $show_description, $show_rating, $limit, $show_updated);}/** * Gets the links associated with the named category. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $category The category to use. * @param string $args * @return bool|null */function wp_get_linksbyname($category, $args = '') {	_deprecated_function(__FUNCTION__, '0.0', 'wp_list_bookmarks()');	$defaults = array(		'after' => '<br />',		'before' => '',		'categorize' => 0,		'category_after' => '',		'category_before' => '',		'category_name' => $category,		'show_description' => 1,		'title_li' => '',	);	$r = wp_parse_args( $args, $defaults );	return wp_list_bookmarks($r);}/** * Gets an array of link objects associated with category $cat_name. * * <code> *	$links = get_linkobjectsbyname('fred'); *	foreach ($links as $link) { * 		echo '<li>'.$link->link_name.'</li>'; *	} * </code> * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name The category name to use. If no match is found uses all. * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', 'description', or 'rating'. *		Or maybe owner. If you start the name with an underscore the order will be reversed. You can also *		specify 'rand' as the order which will return links in a random order. * @param int $limit Limit to X entries. If not specified, all entries are shown. * @return unknown */function get_linkobjectsbyname($cat_name = "noname" , $orderby = 'name', $limit = -1) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$cat_id = -1;	$cat = get_term_by('name', $cat_name, 'link_category');	if ( $cat )		$cat_id = $cat->term_id;	return get_linkobjects($cat_id, $orderby, $limit);}/** * Gets an array of link objects associated with category n. * * Usage: * <code> *	$links = get_linkobjects(1); *	if ($links) { *		foreach ($links as $link) { *			echo '<li>'.$link->link_name.'<br />'.$link->link_description.'</li>'; *		} *	} * </code> * * Fields are: * <ol> *	<li>link_id</li> *	<li>link_url</li> *	<li>link_name</li> *	<li>link_image</li> *	<li>link_target</li> *	<li>link_category</li> *	<li>link_description</li> *	<li>link_visible</li> *	<li>link_owner</li> *	<li>link_rating</li> *	<li>link_updated</li> *	<li>link_rel</li> *	<li>link_notes</li> * </ol> * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param int $limit Limit to X entries. If not specified, all entries are shown. * @return unknown */function get_linkobjects($category = 0, $orderby = 'name', $limit = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$links = get_bookmarks( array( 'category' => $category, 'orderby' => $orderby, 'limit' => $limit ) ) ;	$links_array = array();	foreach ($links as $link)		$links_array[] = $link;	return $links_array;}/** * Gets the links associated with category 'cat_name' and display rating stars/chars. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name The category name to use. If no match is found uses all * @param string $before The html to output before the link * @param string $after The html to output after the link * @param string $between The html to output between the link/image and it's description. Not used if no image or show_images is true * @param bool $show_images Whether to show images (if defined). * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param bool $show_description Whether to show the description if show_images=false/not defined * @param int $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Whether to show last updated timestamp */function get_linksbyname_withrating($cat_name = "noname", $before = '', $after = '<br />', $between = " ",									$show_images = true, $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	get_linksbyname($cat_name, $before, $after, $between, $show_images, $orderby, $show_description, true, $limit, $show_updated);}/** * Gets the links associated with category n and display rating stars/chars. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $before The html to output before the link * @param string $after The html to output after the link * @param string $between The html to output between the link/image and it's description. Not used if no image or show_images == true * @param bool $show_images Whether to show images (if defined). * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param bool $show_description Whether to show the description if show_images=false/not defined. * @param string $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Whether to show last updated timestamp */function get_links_withrating($category = -1, $before = '', $after = '<br />', $between = " ", $show_images = true,							  $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	get_links($category, $before, $after, $between, $show_images, $orderby, $show_description, true, $limit, $show_updated);}/** * Gets the auto_toggle setting. * * @since 0.71 * @deprecated 2.1 * @deprecated No alternative function available * * @param int $id The category to get. If no category supplied uses 0 * @return int Only returns 0. */function get_autotoggle($id = 0) {	_deprecated_function( __FUNCTION__, '2.1' );	return 0;}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_list_categories() * @see wp_list_categories() * * @param int $optionall * @param string $all * @param string $sort_column * @param string $sort_order * @param string $file * @param bool $list * @param int $optiondates * @param int $optioncount * @param int $hide_empty * @param int $use_desc_for_title * @param bool $children * @param int $child_of * @param int $categories * @param int $recurse * @param string $feed * @param string $feed_image * @param string $exclude * @param bool $hierarchical * @return unknown */function list_cats($optionall = 1, $all = 'All', $sort_column = 'ID', $sort_order = 'asc', $file = '', $list = true, $optiondates = 0,				   $optioncount = 0, $hide_empty = 1, $use_desc_for_title = 1, $children=false, $child_of=0, $categories=0,				   $recurse=0, $feed = '', $feed_image = '', $exclude = '', $hierarchical=false) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_categories()' );	$query = compact('optionall', 'all', 'sort_column', 'sort_order', 'file', 'list', 'optiondates', 'optioncount', 'hide_empty', 'use_desc_for_title', 'children',		'child_of', 'categories', 'recurse', 'feed', 'feed_image', 'exclude', 'hierarchical');	return wp_list_cats($query);}/** * @since 1.2 * @deprecated 2.1 * @deprecated Use wp_list_categories() * @see wp_list_categories() * * @param string|array $args * @return unknown */function wp_list_cats($args = '') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_categories()' );	$r = wp_parse_args( $args );	// Map to new names.	if ( isset($r['optionall']) && isset($r['all']))		$r['show_option_all'] = $r['all'];	if ( isset($r['sort_column']) )		$r['orderby'] = $r['sort_column'];	if ( isset($r['sort_order']) )		$r['order'] = $r['sort_order'];	if ( isset($r['optiondates']) )		$r['show_last_update'] = $r['optiondates'];	if ( isset($r['optioncount']) )		$r['show_count'] = $r['optioncount'];	if ( isset($r['list']) )		$r['style'] = $r['list'] ? 'list' : 'break';	$r['title_li'] = '';	return wp_list_categories($r);}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_dropdown_categories() * @see wp_dropdown_categories() * * @param int $optionall * @param string $all * @param string $orderby * @param string $order * @param int $show_last_update * @param int $show_count * @param int $hide_empty * @param bool $optionnone * @param int $selected * @param int $exclude * @return unknown */function dropdown_cats($optionall = 1, $all = 'All', $orderby = 'ID', $order = 'asc',		$show_last_update = 0, $show_count = 0, $hide_empty = 1, $optionnone = false,		$selected = 0, $exclude = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_dropdown_categories()' );	$show_option_all = '';	if ( $optionall )		$show_option_all = $all;	$show_option_none = '';	if ( $optionnone )		$show_option_none = __('None');	$vars = compact('show_option_all', 'show_option_none', 'orderby', 'order',					'show_last_update', 'show_count', 'hide_empty', 'selected', 'exclude');	$query = add_query_arg($vars, '');	return wp_dropdown_categories($query);}/** * @since 1.2 * @deprecated 2.1 * @deprecated Use wp_list_authors() * @see wp_list_authors() * * @param bool $optioncount * @param bool $exclude_admin * @param bool $show_fullname * @param bool $hide_empty * @param string $feed * @param string $feed_image * @return unknown */function list_authors($optioncount = false, $exclude_admin = true, $show_fullname = false, $hide_empty = true, $feed = '', $feed_image = '') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_authors()' );	$args = compact('optioncount', 'exclude_admin', 'show_fullname', 'hide_empty', 'feed', 'feed_image');	return wp_list_authors($args);}/** * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_get_post_categories() * @see wp_get_post_categories() * * @param int $blogid Not Used * @param int $post_ID * @return unknown */function wp_get_post_cats($blogid = '1', $post_ID = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_get_post_categories()' );	return wp_get_post_categories($post_ID);}/** * Sets the categories that the post id belongs to. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_set_post_categories() * @see wp_set_post_categories() * * @param int $blogid Not used * @param int $post_ID * @param array $post_categories * @return unknown */function wp_set_post_cats($blogid = '1', $post_ID = 0, $post_categories = array()) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_set_post_categories()' );	return wp_set_post_categories($post_ID, $post_categories);}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_get_archives() * @see wp_get_archives() * * @param string $type * @param string $limit * @param string $format * @param string $before * @param string $after * @param bool $show_post_count * @return unknown */function get_archives($type='', $limit='', $format='html', $before = '', $after = '', $show_post_count = false) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_get_archives()' );	$args = compact('type', 'limit', 'format', 'before', 'after', 'show_post_count');	return wp_get_archives($args);}/** * Returns or Prints link to the author's posts. * * @since 1.2 * @deprecated 2.1 * @deprecated Use get_author_posts_url() * @see get_author_posts_url() * * @param bool $echo Optional. * @param int $author_id Required. * @param string $author_nicename Optional. * @return string|null */function get_author_link($echo = false, $author_id, $author_nicename = '') {	_deprecated_function( __FUNCTION__, '2.1', 'get_author_posts_url()' );	$link = get_author_posts_url($author_id, $author_nicename);	if ( $echo )		echo $link;	return $link;}/** * Print list of pages based on arguments. * * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_link_pages() * @see wp_link_pages() * * @param string $before * @param string $after * @param string $next_or_number * @param string $nextpagelink * @param string $previouspagelink * @param string $pagelink * @param string $more_file * @return string */function link_pages($before='<br />', $after='<br />', $next_or_number='number', $nextpagelink='next page', $previouspagelink='previous page',					$pagelink='%', $more_file='') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_link_pages()' );	$args = compact('before', 'after', 'next_or_number', 'nextpagelink', 'previouspagelink', 'pagelink', 'more_file');	return wp_link_pages($args);}/** * Get value based on option. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_option() * @see get_option() * * @param string $option * @return string */function get_settings($option) {	_deprecated_function( __FUNCTION__, '2.1', 'get_option()' );	return get_option($option);}/** * Print the permalink of the current post in the loop. * * @since 0.71 * @deprecated 1.2 * @deprecated Use the_permalink() * @see the_permalink() */function permalink_link() {	_deprecated_function( __FUNCTION__, '1.2', 'the_permalink()' );	the_permalink();}/** * Print the permalink to the RSS feed. * * @since 0.71 * @deprecated 2.3 * @deprecated Use the_permalink_rss() * @see the_permalink_rss() * * @param string $file */function permalink_single_rss($deprecated = '') {	_deprecated_function( __FUNCTION__, '0.0', 'the_permalink_rss()' );	the_permalink_rss();}/** * Gets the links associated with category. * * @see get_links() for argument information that can be used in $args * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $args a query string * @return null|string */function wp_get_links($args = '') {	_deprecated_function( __FUNCTION__, '0.0', 'wp_list_bookmarks()' );	if ( strpos( $args, '=' ) === false ) {		$cat_id = $args;		$args = add_query_arg( 'category', $cat_id, $args );	}	$defaults = array(		'after' => '<br />',		'before' => '',		'between' => ' ',		'categorize' => 0,		'category' => '',		'echo' => true,		'limit' => -1,		'orderby' => 'name',		'show_description' => true,		'show_images' => true,		'show_rating' => false,		'show_updated' => true,		'title_li' => '',	);	$r = wp_parse_args( $args, $defaults );	return wp_list_bookmarks($r);}/** * Gets the links associated with category by id. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $before the html to output before the link * @param string $after the html to output after the link * @param string $between the html to output between the link/image and its description. *		Not used if no image or show_images == true * @param bool $show_images whether to show images (if defined). * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the order *		which will return links in a random order. * @param bool $show_description whether to show the description if show_images=false/not defined. * @param bool $show_rating show rating stars/chars * @param int $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated whether to show last updated timestamp * @param bool $echo whether to echo the results, or return them instead * @return null|string */function get_links($category = -1, $before = '', $after = '<br />', $between = ' ', $show_images = true, $orderby = 'name',			$show_description = true, $show_rating = false, $limit = -1, $show_updated = 1, $echo = true) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$order = 'ASC';	if ( substr($orderby, 0, 1) == '_' ) {		$order = 'DESC';		$orderby = substr($orderby, 1);	}	if ( $category == -1 ) //get_bookmarks uses '' to signify all categories		$category = '';	$results = get_bookmarks(array('category' => $category, 'orderby' => $orderby, 'order' => $order, 'show_updated' => $show_updated, 'limit' => $limit));	if ( !$results )		return;	$output = '';	foreach ( (array) $results as $row ) {		if ( !isset($row->recently_updated) )			$row->recently_updated = false;		$output .= $before;		if ( $show_updated && $row->recently_updated )			$output .= get_option('links_recently_updated_prepend');		$the_link = '#';		if ( !empty($row->link_url) )			$the_link = esc_url($row->link_url);		$rel = $row->link_rel;		if ( '' != $rel )			$rel = ' rel="' . $rel . '"';		$desc = esc_attr(sanitize_bookmark_field('link_description', $row->link_description, $row->link_id, 'display'));		$name = esc_attr(sanitize_bookmark_field('link_name', $row->link_name, $row->link_id, 'display'));		$title = $desc;		if ( $show_updated )			if (substr($row->link_updated_f, 0, 2) != '00')				$title .= ' ('.__('Last updated') . ' ' . date(get_option('links_updated_date_format'), $row->link_updated_f + (get_option('gmt_offset') * 3600)) . ')';		if ( '' != $title )			$title = ' title="' . $title . '"';		$alt = ' alt="' . $name . '"';		$target = $row->link_target;		if ( '' != $target )			$target = ' target="' . $target . '"';		$output .= '<a href="' . $the_link . '"' . $rel . $title . $target. '>';		if ( $row->link_image != null && $show_images ) {			if ( strpos($row->link_image, 'http') !== false )				$output .= "<img src=\"$row->link_image\" $alt $title />";			else // If it's a relative path				$output .= "<img src=\"" . get_option('siteurl') . "$row->link_image\" $alt $title />";		} else {			$output .= $name;		}		$output .= '</a>';		if ( $show_updated && $row->recently_updated )			$output .= get_option('links_recently_updated_append');		if ( $show_description && '' != $desc )			$output .= $between . $desc;		if ($show_rating) {			$output .= $between . get_linkrating($row);		}		$output .= "$after\n";	} // end while	if ( !$echo )		return $output;	echo $output;}/** * Output entire list of links by category. * * Output a list of all links, listed by category, using the settings in * $wpdb->linkcategories and output it as a nested HTML unordered list. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $order Sort link categories by 'name' or 'id' */function get_links_list($order = 'name') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_bookmarks()' );	$order = strtolower($order);	// Handle link category sorting	$direction = 'ASC';	if ( '_' == substr($order,0,1) ) {		$direction = 'DESC';		$order = substr($order,1);	}	if ( !isset($direction) )		$direction = '';	$cats = get_categories(array('type' => 'link', 'orderby' => $order, 'order' => $direction, 'hierarchical' => 0));	// Display each category	if ( $cats ) {		foreach ( (array) $cats as $cat ) {			// Handle each category.			// Display the category name			echo '  <li id="linkcat-' . $cat->term_id . '" class="linkcat"><h2>' . apply_filters('link_category', $cat->name ) . "</h2>\n\t<ul>\n";			// Call get_links() with all the appropriate params			get_links($cat->term_id, '<li>', "</li>", "\n", true, 'name', false);			// Close the last category			echo "\n\t</ul>\n</li>\n";		}	}}/** * Show the link to the links popup and the number of links. * * @since 0.71 * @deprecated 2.1 * @deprecated {@internal Use function instead is unknown}} * * @param string $text the text of the link * @param int $width the width of the popup window * @param int $height the height of the popup window * @param string $file the page to open in the popup window * @param bool $count the number of links in the db */function links_popup_script($text = 'Links', $width=400, $height=400, $file='links.all.php', $count = true) {	_deprecated_function( __FUNCTION__, '2.1' );	if ( $count )		$counts = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->links");	$javascript = "<a href=\"#\" onclick=\"javascript:window.open('$file?popup=1', '_blank', 'width=$width,height=$height,scrollbars=yes,status=no'); return false\">";	$javascript .= $text;	if ( $count )		$javascript .= " ($counts)";	$javascript .= "</a>\n\n";		echo $javascript;}/** * @since 1.0.1 * @deprecated 2.1 * @deprecated Use sanitize_bookmark_field() * @see sanitize_bookmark_field() * * @param object $link * @return unknown */function get_linkrating($link) {	_deprecated_function( __FUNCTION__, '2.1', 'sanitize_bookmark_field()' );	return sanitize_bookmark_field('link_rating', $link->link_rating, $link->link_id, 'display');}/** * Gets the name of category by id. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_category() * @see get_category() * * @param int $id The category to get. If no category supplied uses 0 * @return string */function get_linkcatname($id = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_category()' );	$id = (int) $id;	if ( empty($id) )		return '';	$cats = wp_get_link_cats($id);	if ( empty($cats) || ! is_array($cats) )		return '';	$cat_id = (int) $cats[0]; // Take the first cat.	$cat = get_category($cat_id);	return $cat->name;}/** * Print RSS comment feed link. * * @since 1.0.1 * @deprecated 2.5 * @deprecated Use post_comments_feed_link() * @see post_comments_feed_link() * * @param string $link_text */function comments_rss_link($link_text = 'Comments RSS') {	_deprecated_function( __FUNCTION__, '2.5', 'post_comments_feed_link()' );	post_comments_feed_link($link_text);}/** * Print/Return link to category RSS2 feed. * * @since 1.2 * @deprecated 2.5 * @deprecated Use get_category_feed_link() * @see get_category_feed_link() * * @param bool $echo * @param int $cat_ID * @return string|null */function get_category_rss_link($echo = false, $cat_ID = 1) {	_deprecated_function( __FUNCTION__, '2.5', 'get_category_feed_link()' );	$link = get_category_feed_link($cat_ID, 'rss2');	if ( $echo )		echo $link;	return $link;}/** * Print/Return link to author RSS feed. * * @since 1.2 * @deprecated 2.5 * @deprecated Use get_author_feed_link() * @see get_author_feed_link() * * @param bool $echo * @param int $author_id * @return string|null */function get_author_rss_link($echo = false, $author_id = 1) {	_deprecated_function( __FUNCTION__, '2.5', 'get_author_feed_link()' );	$link = get_author_feed_link($author_id);	if ( $echo )		echo $link;	return $link;}/** * Return link to the post RSS feed. * * @since 1.5 * @deprecated 2.2 * @deprecated Use get_post_comments_feed_link() * @see get_post_comments_feed_link() * * @return string */function comments_rss() {	_deprecated_function( __FUNCTION__, '2.2', 'get_post_comments_feed_link()' );	return get_post_comments_feed_link();}/** * An alias of wp_create_user(). * * @since 2.0 * @deprecated 2.0 * @deprecated Use wp_create_user() * @see wp_create_user() * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function create_user($username, $password, $email) {	_deprecated_function( __FUNCTION__, '2.0', 'wp_create_user()' );	return wp_create_user($username, $password, $email);}/** * Unused function. * * @deprecated 2.5*/function gzip_compression() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}/** * Retrieve an array of comment data about comment $comment_ID. * * @since 0.71 * @deprecated 2.7 * @deprecated Use get_comment() * @see get_comment() * * @param int $comment_ID The ID of the comment * @param int $no_cache Whether to use the cache (cast to bool) * @param bool $include_unapproved Whether to include unapproved comments * @return array The comment data */function get_commentdata( $comment_ID, $no_cache = 0, $include_unapproved = false ) {	_deprecated_function( __FUNCTION__, '2.7', 'get_comment()' );	return get_comment($comment_ID, ARRAY_A);}/** * Retrieve the category name by the category ID. * * @since 0.71 * @deprecated 2.8 * @deprecated Use get_cat_name() * @see get_cat_name() * * @param int $cat_ID Category ID * @return string category name */function get_catname( $cat_ID ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_cat_name()' );	return get_cat_name( $cat_ID );}/** * Retrieve category children list separated before and after the term IDs. * * @since 1.2.0 * @deprecated 2.8 * @deprecated Use get_term_children() * @see get_term_children() * * @param int $id Category ID to retrieve children. * @param string $before Optional. Prepend before category term ID. * @param string $after Optional, default is empty string. Append after category term ID. * @param array $visited Optional. Category Term IDs that have already been added. * @return string */function get_category_children( $id, $before = '/', $after = '', $visited = array() ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_term_children()' );	if ( 0 == $id )		return '';	$chain = '';	/** TODO: consult hierarchy */	$cat_ids = get_all_category_ids();	foreach ( (array) $cat_ids as $cat_id ) {		if ( $cat_id == $id )			continue;		$category = get_category( $cat_id );		if ( is_wp_error( $category ) )			return $category;		if ( $category->parent == $id && !in_array( $category->term_id, $visited ) ) {			$visited[] = $category->term_id;			$chain .= $before.$category->term_id.$after;			$chain .= get_category_children( $category->term_id, $before, $after );		}	}	return $chain;}/** * Retrieve the description of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('description') * @see get_the_author_meta() * * @return string The author's description. */function get_the_author_description() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'description\')' );	return get_the_author_meta('description');}/** * Display the description of the author of the current post. * * @since 1.0.0 * @deprecated 2.8 * @deprecated Use the_author_meta('description') * @see the_author_meta() */function the_author_description() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'description\')' );	the_author_meta('description');}/** * Retrieve the login name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('login') * @see get_the_author_meta() * * @return string The author's login name (username). */function get_the_author_login() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'login\')' );	return get_the_author_meta('login');}/** * Display the login name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('login') * @see the_author_meta() */function the_author_login() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'login\')' );	the_author_meta('login');}/** * Retrieve the first name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('first_name') * @see get_the_author_meta() * * @return string The author's first name. */function get_the_author_firstname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'first_name\')' );	return get_the_author_meta('first_name');}/** * Display the first name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('first_name') * @see the_author_meta() */function the_author_firstname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'first_name\')' );	the_author_meta('first_name');}/** * Retrieve the last name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('last_name') * @see get_the_author_meta() * * @return string The author's last name. */function get_the_author_lastname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'last_name\')' );	return get_the_author_meta('last_name');}/** * Display the last name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('last_name') * @see the_author_meta() */function the_author_lastname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'last_name\')' );	the_author_meta('last_name');}/** * Retrieve the nickname of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('nickname') * @see get_the_author_meta() * * @return string The author's nickname. */function get_the_author_nickname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'nickname\')' );	return get_the_author_meta('nickname');}/** * Display the nickname of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('nickname') * @see the_author_meta() */function the_author_nickname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'nickname\')' );	the_author_meta('nickname');}/** * Retrieve the email of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('email') * @see get_the_author_meta() * * @return string The author's username. */function get_the_author_email() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'email\')' );	return get_the_author_meta('email');}/** * Display the email of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('email') * @see the_author_meta() */function the_author_email() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'email\')' );	the_author_meta('email');}/** * Retrieve the ICQ number of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('icq') * @see get_the_author_meta() * * @return string The author's ICQ number. */function get_the_author_icq() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'icq\')' );	return get_the_author_meta('icq');}/** * Display the ICQ number of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('icq') * @see the_author_meta() */function the_author_icq() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'icq\')' );	the_author_meta('icq');}/** * Retrieve the Yahoo! IM name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('yim') * @see get_the_author_meta() * * @return string The author's Yahoo! IM name. */function get_the_author_yim() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'yim\')' );	return get_the_author_meta('yim');}/** * Display the Yahoo! IM name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('yim') * @see the_author_meta() */function the_author_yim() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'yim\')' );	the_author_meta('yim');}/** * Retrieve the MSN address of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('msn') * @see get_the_author_meta() * * @return string The author's MSN address. */function get_the_author_msn() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'msn\')' );	return get_the_author_meta('msn');}/** * Display the MSN address of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('msn') * @see the_author_meta() */function the_author_msn() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'msn\')' );	the_author_meta('msn');}/** * Retrieve the AIM address of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('aim') * @see get_the_author_meta() * * @return string The author's AIM address. */function get_the_author_aim() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'aim\')' );	return get_the_author_meta('aim');}/** * Display the AIM address of the author of the current post. * * @since 0.71 * @see the_author_meta() * @deprecated 2.8 * @deprecated Use the_author_meta('aim') */function the_author_aim() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'aim\')' );	the_author_meta('aim');}/** * Retrieve the specified author's preferred display name. * * @since 1.0.0 * @deprecated 2.8 * @deprecated Use get_the_author_meta('display_name') * @see get_the_author_meta() * * @param int $auth_id The ID of the author. * @return string The author's display name. */function get_author_name( $auth_id = false ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'display_name\')' );	return get_the_author_meta('display_name', $auth_id);}/** * Retrieve the URL to the home page of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('url') * @see get_the_author_meta() * * @return string The URL to the author's page. */function get_the_author_url() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'url\')' );	return get_the_author_meta('url');}/** * Display the URL to the home page of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('url') * @see the_author_meta() */function the_author_url() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'url\')' );	the_author_meta('url');}/** * Retrieve the ID of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('ID') * @see get_the_author_meta() * * @return int The author's ID. */function get_the_author_ID() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'ID\')' );	return get_the_author_meta('ID');}/** * Display the ID of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('ID') * @see the_author_meta()*/function the_author_ID() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'ID\')' );	the_author_meta('ID');}/** * Display the post content for the feed. * * For encoding the html or the $encode_html parameter, there are three possible * values. '0' will make urls footnotes and use make_url_footnote(). '1' will * encode special characters and automatically display all of the content. The * value of '2' will strip all HTML tags from the content. * * Also note that you cannot set the amount of words and not set the html * encoding. If that is the case, then the html encoding will default to 2, * which will strip all HTML tags. * * To restrict the amount of words of the content, you can use the cut * parameter. If the content is less than the amount, then there won't be any * dots added to the end. If there is content left over, then dots will be added * and the rest of the content will be removed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_content_rss' on the content before processing. * @see get_the_content() For the $more_link_text, $stripteaser, and $more_file *		parameters. * * @deprecated 2.9.0 * @deprecated Use the_content_feed() * @see the_content_feed() * * @param string $more_link_text Optional. Text to display when more content is available but not displayed. * @param int|bool $stripteaser Optional. Default is 0. * @param string $more_file Optional. * @param int $cut Optional. Amount of words to keep for the content. * @param int $encode_html Optional. How to encode the content. */function the_content_rss($more_link_text='(more...)', $stripteaser=0, $more_file='', $cut = 0, $encode_html = 0) {	_deprecated_function( __FUNCTION__, '2.9', 'the_content_feed' );	$content = get_the_content($more_link_text, $stripteaser, $more_file);	$content = apply_filters('the_content_rss', $content);	if ( $cut && !$encode_html )		$encode_html = 2;	if ( 1== $encode_html ) {		$content = esc_html($content);		$cut = 0;	} elseif ( 0 == $encode_html ) {		$content = make_url_footnote($content);	} elseif ( 2 == $encode_html ) {		$content = strip_tags($content);	}	if ( $cut ) {		$blah = explode(' ', $content);		if ( count($blah) > $cut ) {			$k = $cut;			$use_dotdotdot = 1;		} else {			$k = count($blah);			$use_dotdotdot = 0;		}		/** @todo Check performance, might be faster to use array slice instead. */		for ( $i=0; $i<$k; $i++ )			$excerpt .= $blah[$i].' ';		$excerpt .= ($use_dotdotdot) ? '...' : '';		$content = $excerpt;	}	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Strip HTML and put links at the bottom of stripped content. * * Searches for all of the links, strips them out of the content, and places * them at the bottom of the content with numbers. * * @since 0.71 * @deprecated 2.9.0 * * @param string $content Content to get links * @return string HTML stripped out of content with links at the bottom. */function make_url_footnote( $content ) {	_deprecated_function( __FUNCTION__, '2.9', '' );	preg_match_all( '/<a(.+?)href=\"(.+?)\"(.*?)>(.+?)<\/a>/', $content, $matches );	$links_summary = "\n";	for ( $i=0; $i<count($matches[0]); $i++ ) {		$link_match = $matches[0][$i];		$link_number = '['.($i+1).']';		$link_url = $matches[2][$i];		$link_text = $matches[4][$i];		$content = str_replace( $link_match, $link_text . ' ' . $link_number, $content );		$link_url = ( ( strtolower( substr( $link_url, 0, 7 ) ) != 'http://' ) && ( strtolower( substr( $link_url, 0, 8 ) ) != 'https://' ) ) ? get_option( 'home' ) . $link_url : $link_url;		$links_summary .= "\n" . $link_number . ' ' . $link_url;	}	$content  = strip_tags( $content );	$content .= $links_summary;	return $content;}/** * Retrieve translated string with vertical bar context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * In order to use the separate contexts, the _c() function is used and the * translatable string uses a pipe ('|') which has the context the string is in. * * When the translated string is returned, it is everything before the pipe, not * including the pipe character. If there is no pipe in the translated text then * everything is returned. * * @since 2.2.0 * @deprecated 2.9.0 * @deprecated Use _x() * @see _x() * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _c( $text, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_x()' );	return before_last_bar( translate( $text, $domain ) );}/** * Translates $text like translate(), but assumes that the text * contains a context after its last vertical bar. * * @since 2.5 * @uses translate() * @deprecated 3.0.0 * @deprecated Use _x() * @see _x() * * @param string $text Text to translate * @param string $domain Domain to retrieve the translated text * @return string Translated text */function translate_with_context( $text, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_x()' );	return before_last_bar( translate( $text, $domain ) );}/** * A version of _n(), which supports contexts. * Strips everything from the translation after the last bar. * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use _nx() * @see _nx() * @see _n() For parameters. * @see _c() For parameters. _c() is deprecated. * */function _nc( $single, $plural, $number, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_nx()' );	return before_last_bar( _n( $single, $plural, $number, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * @since 1.2.0 * @deprecated 2.8.0 * @deprecated Use _n() * @see _n() */function __ngettext() {	_deprecated_function( __FUNCTION__, '2.8', '_n()' );	$args = func_get_args();	return call_user_func_array('_n', $args);}/** * Register plural strings in POT file, but don't translate them. * * @since 2.5 * @deprecated 2.8.0 * @deprecated Use _n_noop() * @see _n_noop() */function __ngettext_noop() {	_deprecated_function( __FUNCTION__, '2.8', '_n_noop()' );	$args = func_get_args();	return call_user_func_array('_n_noop', $args);}/** * Retrieve all autoload options, or all options if no autoloaded ones exist. * * @since 1.0.0 * @deprecated 3.0.0 * @deprecated Use wp_load_alloptions()) * @see wp_load_alloptions() * * @return array List of all options. */function get_alloptions() {	_deprecated_function( __FUNCTION__, '3.0', 'wp_load_alloptions()' );	return wp_load_alloptions();}/** * Retrieve HTML content of attachment image with link. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_link() * @see wp_get_attachment_link() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size image. * @param array $max_dims Optional. Max image dimensions. * @param bool $permalink Optional, default is false. Whether to include permalink to image. * @return string */function get_the_attachment_link($id = 0, $fullsize = false, $max_dims = false, $permalink = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_link()' );	$id = (int) $id;	$_post = & get_post($id);	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	$innerHTML = get_attachment_innerHTML($_post->ID, $fullsize, $max_dims);	return "<a href='$url' title='$post_title'>$innerHTML</a>";}/** * Retrieve icon URL and Path. * * @since 2.1.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image_src() * @see wp_get_attachment_image_src() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full image. * @return array Icon URL and full path to file, respectively. */function get_attachment_icon_src( $id = 0, $fullsize = false ) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image_src()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	$file = get_attached_file( $post->ID );	if ( !$fullsize && $src = wp_get_attachment_thumb_url( $post->ID ) ) {		// We have a thumbnail desired, specified and existing		$src_file = basename($src);		$class = 'attachmentthumb';	} elseif ( wp_attachment_is_image( $post->ID ) ) {		// We have an image without a thumbnail		$src = wp_get_attachment_url( $post->ID );		$src_file = & $file;		$class = 'attachmentimage';	} elseif ( $src = wp_mime_type_icon( $post->ID ) ) {		// No thumb, no image. We'll look for a mime-related icon instead.		$icon_dir = apply_filters( 'icon_dir', get_template_directory() . '/images' );		$src_file = $icon_dir . '/' . basename($src);	}	if ( !isset($src) || !$src )		return false;	return array($src, $src_file);}/** * Retrieve HTML content of icon attachment image element. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image() * @see wp_get_attachment_image() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full size image. * @param array $max_dims Optional. Dimensions of image. * @return string HTML content. */function get_attachment_icon( $id = 0, $fullsize = false, $max_dims = false ) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	if ( !$src = get_attachment_icon_src( $post->ID, $fullsize ) )		return false;	list($src, $src_file) = $src;	// Do we need to constrain the image?	if ( ($max_dims = apply_filters('attachment_max_dims', $max_dims)) && file_exists($src_file) ) {		$imagesize = getimagesize($src_file);		if (($imagesize[0] > $max_dims[0]) || $imagesize[1] > $max_dims[1] ) {			$actual_aspect = $imagesize[0] / $imagesize[1];			$desired_aspect = $max_dims[0] / $max_dims[1];			if ( $actual_aspect >= $desired_aspect ) {				$height = $actual_aspect * $max_dims[0];				$constraint = "width='{$max_dims[0]}' ";				$post->iconsize = array($max_dims[0], $height);			} else {				$width = $max_dims[1] / $actual_aspect;				$constraint = "height='{$max_dims[1]}' ";				$post->iconsize = array($width, $max_dims[1]);			}		} else {			$post->iconsize = array($imagesize[0], $imagesize[1]);			$constraint = '';		}	} else {		$constraint = '';	}	$post_title = esc_attr($post->post_title);	$icon = "<img src='$src' title='$post_title' alt='$post_title' $constraint/>";	return apply_filters( 'attachment_icon', $icon, $post->ID );}/** * Retrieve HTML content of image element. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image() * @see wp_get_attachment_image() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full size image. * @param array $max_dims Optional. Dimensions of image. * @return string */function get_attachment_innerHTML($id = 0, $fullsize = false, $max_dims = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	if ( $innerHTML = get_attachment_icon($post->ID, $fullsize, $max_dims))		return $innerHTML;	$innerHTML = esc_attr($post->post_title);	return apply_filters('attachment_innerHTML', $innerHTML, $post->ID);}/* * Retrieve bookmark data based on ID. * * @since 2.0.0 * @deprecated 2.1.0 * @deprecated Use get_bookmark() * @see get_bookmark() * * @param int $bookmark_id ID of link * @param string $output OBJECT, ARRAY_N, or ARRAY_A * @return object|array */function get_link($bookmark_id, $output = OBJECT, $filter = 'raw') {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmark()' );	return get_bookmark($bookmark_id, $output, $filter);}/** * Performs esc_url() for database or redirect usage. * * @since 2.3.1 * @deprecated 2.8.0 * @deprecated Use esc_url_raw() * @see esc_url_raw() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function sanitize_url( $url, $protocols = null ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_url_raw()' );	return esc_url_raw( $url, $protocols );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 1.2.0 * @deprecated 3.0.0 * @deprecated Use esc_url() * @see Alias for esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. * @param string $context Optional. How the URL will be used. Default is 'display'. * @return string The cleaned $url after the 'clean_url' filter is applied. */function clean_url( $url, $protocols = null, $context = 'display' ) {	if ( $context == 'db' )		_deprecated_function( 'clean_url( $context = \'db\' )', '3.0', 'esc_url_raw()' );	else		_deprecated_function( __FUNCTION__, '3.0', 'esc_url()' );	return esc_url( $url, $protocols, $context );}/** * Escape single quotes, specialchar double quotes, and fix line endings. * * The filter 'js_escape' is also applied by esc_js() * * @since 2.0.4 * @deprecated 2.8.0 * @deprecated Use esc_js() * @see esc_js() * * @param string $text The text to be escaped. * @return string Escaped text. */function js_escape( $text ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_js()' );	return esc_js( $text );}/** * Escaping for HTML blocks. * * @deprecated 2.8.0 * @deprecated Use esc_html() * @see esc_html() */function wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_html()' );	if ( func_num_args() > 1 ) { // Maintain backwards compat for people passing additional args		$args = func_get_args();		return call_user_func_array( '_wp_specialchars', $args );	} else {		return esc_html( $string );	}}/** * Escaping for HTML attributes. * * @since 2.0.6 * @deprecated 2.8.0 * @deprecated Use esc_attr() * @see esc_attr() * * @param string $text * @return string */function attribute_escape( $text ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_attr()' );	return esc_attr( $text );}/** * Register widget for sidebar with backwards compatibility. * * Allows $name to be an array that accepts either three elements to grab the * first element and the third for the name or just uses the first element of * the array for the name. * * Passes to {@link wp_register_sidebar_widget()} after argument list and * backwards compatibility is complete. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_register_sidebar_widget() * @see wp_register_sidebar_widget() * * @param string|int $name Widget ID. * @param callback $output_callback Run when widget is called. * @param string $classname Classname widget option. * @param mixed $params,... Widget parameters. */function register_sidebar_widget($name, $output_callback, $classname = '') {	_deprecated_function( __FUNCTION__, '2.8', 'wp_register_sidebar_widget()' );	// Compat	if ( is_array($name) ) {		if ( count($name) == 3 )			$name = sprintf($name[0], $name[2]);		else			$name = $name[0];	}	$id = sanitize_title($name);	$options = array();	if ( !empty($classname) && is_string($classname) )		$options['classname'] = $classname;	$params = array_slice(func_get_args(), 2);	$args = array($id, $name, $output_callback, $options);	if ( !empty($params) )		$args = array_merge($args, $params);	call_user_func_array('wp_register_sidebar_widget', $args);}/** * Alias of {@link wp_unregister_sidebar_widget()}. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_unregister_sidebar_widget() * @see wp_unregister_sidebar_widget() * * @param int|string $id Widget ID. */function unregister_sidebar_widget($id) {	_deprecated_function( __FUNCTION__, '2.8', 'wp_unregister_sidebar_widget()' );	return wp_unregister_sidebar_widget($id);}/** * Registers widget control callback for customizing options. * * Allows $name to be an array that accepts either three elements to grab the * first element and the third for the name or just uses the first element of * the array for the name. * * Passes to {@link wp_register_widget_control()} after the argument list has * been compiled. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_register_widget_control() * @see wp_register_widget_control() * * @param int|string $name Sidebar ID. * @param callback $control_callback Widget control callback to display and process form. * @param int $width Widget width. * @param int $height Widget height. */function register_widget_control($name, $control_callback, $width = '', $height = '') {	_deprecated_function( __FUNCTION__, '2.8', 'wp_register_widget_control()' );	// Compat	if ( is_array($name) ) {		if ( count($name) == 3 )			$name = sprintf($name[0], $name[2]);		else			$name = $name[0];	}	$id = sanitize_title($name);	$options = array();	if ( !empty($width) )		$options['width'] = $width;	if ( !empty($height) )		$options['height'] = $height;	$params = array_slice(func_get_args(), 4);	$args = array($id, $name, $control_callback, $options);	if ( !empty($params) )		$args = array_merge($args, $params);	call_user_func_array('wp_register_widget_control', $args);}/** * Alias of {@link wp_unregister_widget_control()}. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_unregister_widget_control() * @see wp_unregister_widget_control() * * @param int|string $id Widget ID. */function unregister_widget_control($id) {	_deprecated_function( __FUNCTION__, '2.8', 'wp_unregister_widget_control()' );	return wp_unregister_widget_control($id);}/** * Remove user meta data. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use delete_user_meta() * @see delete_user_meta() * * @param int $user_id User ID. * @param string $meta_key Metadata key. * @param mixed $meta_value Metadata value. * @return bool True deletion completed and false if user_id is not a number. */function delete_usermeta( $user_id, $meta_key, $meta_value = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'delete_user_meta()' );	global $wpdb;	if ( !is_numeric( $user_id ) )		return false;	$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);	if ( is_array($meta_value) || is_object($meta_value) )		$meta_value = serialize($meta_value);	$meta_value = trim( $meta_value );	$cur = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	if ( $cur && $cur->umeta_id )		do_action( 'delete_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	if ( ! empty($meta_value) )		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s AND meta_value = %s", $user_id, $meta_key, $meta_value) );	else		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	wp_cache_delete($user_id, 'users');	if ( $cur && $cur->umeta_id )		do_action( 'deleted_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	return true;}/** * Retrieve user metadata. * * If $user_id is not a number, then the function will fail over with a 'false' * boolean return value. Other returned values depend on whether there is only * one item to be returned, which be that single item type. If there is more * than one metadata value, then it will be list of metadata values. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use get_user_meta() * @see get_user_meta() * * @param int $user_id User ID * @param string $meta_key Optional. Metadata key. * @return mixed */function get_usermeta( $user_id, $meta_key = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_user_meta()' );	global $wpdb;	$user_id = (int) $user_id;	if ( !$user_id )		return false;	if ( !empty($meta_key) ) {		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);		$user = wp_cache_get($user_id, 'users');		// Check the cached user object		if ( false !== $user && isset($user->$meta_key) )			$metas = array($user->$meta_key);		else			$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	} else {		$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d", $user_id) );	}	if ( empty($metas) ) {		if ( empty($meta_key) )			return array();		else			return '';	}	$metas = array_map('maybe_unserialize', $metas);	if ( count($metas) == 1 )		return $metas[0];	else		return $metas;}/** * Update metadata of user. * * There is no need to serialize values, they will be serialized if it is * needed. The metadata key can only be a string with underscores. All else will * be removed. * * Will remove the metadata, if the meta value is empty. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use update_user_meta() * @see update_user_meta() * * @param int $user_id User ID * @param string $meta_key Metadata key. * @param mixed $meta_value Metadata value. * @return bool True on successful update, false on failure. */function update_usermeta( $user_id, $meta_key, $meta_value ) {	_deprecated_function( __FUNCTION__, '3.0', 'update_user_meta()' );	global $wpdb;	if ( !is_numeric( $user_id ) )		return false;	$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);	/** @todo Might need fix because usermeta data is assumed to be already escaped */	if ( is_string($meta_value) )		$meta_value = stripslashes($meta_value);	$meta_value = maybe_serialize($meta_value);	if (empty($meta_value)) {		return delete_usermeta($user_id, $meta_key);	}	$cur = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	if ( $cur )		do_action( 'update_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	if ( !$cur )		$wpdb->insert($wpdb->usermeta, compact('user_id', 'meta_key', 'meta_value') );	else if ( $cur->meta_value != $meta_value )		$wpdb->update($wpdb->usermeta, compact('meta_value'), compact('user_id', 'meta_key') );	else		return false;	wp_cache_delete($user_id, 'users');	if ( !$cur )		do_action( 'added_usermeta', $wpdb->insert_id, $user_id, $meta_key, $meta_value );	else		do_action( 'updated_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	return true;}/** * Enable/disable automatic general feed link outputting. * * @since 2.8.0 * @deprecated 3.0.0 * @deprecated Use add_theme_support( 'automatic-feed-links' ) * * @param boolean $add Optional, default is true. Add or remove links. Defaults to true. */function automatic_feed_links( $add = true ) {	_deprecated_function( __FUNCTION__, '3.0', "add_theme_support( 'automatic-feed-links' )" );	if ( $add )		add_theme_support( 'automatic-feed-links' );	else		remove_action( 'wp_head', 'feed_links_extra', 3 ); // Just do this yourself in 3.0+}/** * Retrieve user data based on field. * * @since 1.5.0 * @deprecated 3.0.0 * @deprecated Use get_the_author_meta() * @see get_the_author_meta() */function get_profile( $field, $user = false ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_the_author_meta()' );	if ( $user ) {		$user = get_user_by( 'login', $user );		$user = $user->ID;	}	return get_the_author_meta( $field, $user );}/** * Number of posts user has written. * * @since 0.71 * @deprecated 3.0.0 * @deprecated Use count_user_posts() * @see count_user_posts() */function get_usernumposts( $userid ) {	_deprecated_function( __FUNCTION__, '3.0', 'count_user_posts()' );	return count_user_posts( $userid );}/** * Callback used to change %uXXXX to &#YYY; syntax * * @since 2.8.0 * @access private * @deprecated 3.0.0 * * @param array $matches Single Match * @return string An HTML entity */function funky_javascript_callback($matches) {	return "&#".base_convert($matches[1],16,10).";";}/** * Fixes javascript bugs in browsers. * * Converts unicode characters to HTML numbered entities. * * @since 1.5.0 * @uses $is_macIE * @uses $is_winIE * @deprecated 3.0.0 * * @param string $text Text to be made safe. * @return string Fixed text. */function funky_javascript_fix($text) {	_deprecated_function( __FUNCTION__, '3.0' );	// Fixes for browsers' javascript bugs	global $is_macIE, $is_winIE;	if ( $is_winIE || $is_macIE )		$text =  preg_replace_callback("/\%u([0-9A-F]{4,4})/",					"funky_javascript_callback",					$text);	return $text;}/** * Generates and displays the RDF for the trackback information of current post. * * @since 0.71 * @deprecated 3.0.0 * * @param int $deprecated Not used (Was $timezone = 0) */function trackback_rdf($deprecated = '') {	_deprecated_function( __FUNCTION__, '3.0' );	return '';}/** * Checks that the taxonomy name exists. * * @since 2.3.0 * @deprecated 3.0.0 * @deprecated Use taxonomy_exists() * @see taxonomy_exists() * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy exists. */function is_taxonomy( $taxonomy ) {	_deprecated_function( __FUNCTION__, '3.0', 'taxonomy_exists()' );	return taxonomy_exists( $taxonomy );}/** * Check if Term exists. * * @since 2.3.0 * @deprecated 3.0.0 * @deprecated Use term_exists() * @see term_exists() * * @param int|string $term The term to check * @param string $taxonomy The taxonomy name to use * @param int $parent ID of parent term under which to confine the exists search. * @return mixed Get the term id or Term Object, if exists. */function is_term( $term, $taxonomy = '', $parent = 0 ) {	_deprecated_function( __FUNCTION__, '3.0', 'term_exists()' );	return term_exists( $term, $taxonomy, $parent );}
<?php/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Edit extends Walker_Nav_Menu  {	/**	 * @see Walker_Nav_Menu::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function start_lvl(&$output) {}	/**	 * @see Walker_Nav_Menu::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function end_lvl(&$output) {	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_wp_nav_menu_max_depth;		$_wp_nav_menu_max_depth = $depth > $_wp_nav_menu_max_depth ? $depth : $_wp_nav_menu_max_depth;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		ob_start();		$item_id = esc_attr( $item->ID );		$removed_args = array(			'action',			'customlink-tab',			'edit-menu-item',			'menu-item',			'page-tab',			'_wpnonce',		);		$original_title = '';		if ( 'taxonomy' == $item->type ) {			$original_title = get_term_field( 'name', $item->object_id, $item->object, 'raw' );		} elseif ( 'post_type' == $item->type ) {			$original_object = get_post( $item->object_id );			$original_title = $original_object->post_title;		}		$classes = array(			'menu-item menu-item-depth-' . $depth,			'menu-item-' . esc_attr( $item->object ),			'menu-item-edit-' . ( ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? 'active' : 'inactive'),		);		$title = $item->title;		if ( isset( $item->post_status ) && 'draft' == $item->post_status ) {			$classes[] = 'pending';			/* translators: %s: title of menu item in draft status */			$title = sprintf( __('%s (Pending)'), $item->title );		}		$title = empty( $item->label ) ? $title : $item->label;		?>		<li id="menu-item-<?php echo $item_id; ?>" class="<?php echo implode(' ', $classes ); ?>">			<dl class="menu-item-bar">				<dt class="menu-item-handle">					<span class="item-title"><?php echo esc_html( $title ); ?></span>					<span class="item-controls">						<span class="item-type"><?php echo esc_html( $item->type_label ); ?></span>						<span class="item-order">							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-up-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-up"><abbr title="<?php esc_attr_e('Move up'); ?>">&#8593;</abbr></a>							|							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-down-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-down"><abbr title="<?php esc_attr_e('Move down'); ?>">&#8595;</abbr></a>						</span>						<a class="item-edit" id="edit-<?php echo $item_id; ?>" title="<?php _e('Edit Menu Item'); ?>" href="<?php							echo ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? admin_url( 'nav-menus.php' ) : add_query_arg( 'edit-menu-item', $item_id, remove_query_arg( $removed_args, admin_url( 'nav-menus.php#menu-item-settings-' . $item_id ) ) );						?>"><?php _e( 'Edit Menu Item' ); ?></a>					</span>				</dt>			</dl>			<div class="menu-item-settings" id="menu-item-settings-<?php echo $item_id; ?>">				<?php if( 'custom' == $item->type ) : ?>					<p class="field-url description description-wide">						<label for="edit-menu-item-url-<?php echo $item_id; ?>">							<?php _e( 'URL' ); ?><br />							<input type="text" id="edit-menu-item-url-<?php echo $item_id; ?>" class="widefat code edit-menu-item-url" name="menu-item-url[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->url ); ?>" />						</label>					</p>				<?php endif; ?>				<p class="description description-thin">					<label for="edit-menu-item-title-<?php echo $item_id; ?>">						<?php _e( 'Navigation Label' ); ?><br />						<input type="text" id="edit-menu-item-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-title" name="menu-item-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->title ); ?>" />					</label>				</p>				<p class="description description-thin">					<label for="edit-menu-item-attr-title-<?php echo $item_id; ?>">						<?php _e( 'Title Attribute' ); ?><br />						<input type="text" id="edit-menu-item-attr-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-attr-title" name="menu-item-attr-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->post_excerpt ); ?>" />					</label>				</p>				<p class="field-link-target description description-thin">					<label for="edit-menu-item-target-<?php echo $item_id; ?>">						<?php _e( 'Link Target' ); ?><br />						<select id="edit-menu-item-target-<?php echo $item_id; ?>" class="widefat edit-menu-item-target" name="menu-item-target[<?php echo $item_id; ?>]">							<option value="" <?php selected( $item->target, ''); ?>><?php _e('Same window or tab'); ?></option>							<option value="_blank" <?php selected( $item->target, '_blank'); ?>><?php _e('New window or tab'); ?></option>						</select>					</label>				</p>				<p class="field-css-classes description description-thin">					<label for="edit-menu-item-classes-<?php echo $item_id; ?>">						<?php _e( 'CSS Classes (optional)' ); ?><br />						<input type="text" id="edit-menu-item-classes-<?php echo $item_id; ?>" class="widefat code edit-menu-item-classes" name="menu-item-classes[<?php echo $item_id; ?>]" value="<?php echo esc_attr( implode(' ', $item->classes ) ); ?>" />					</label>				</p>				<p class="field-xfn description description-thin">					<label for="edit-menu-item-xfn-<?php echo $item_id; ?>">						<?php _e( 'Link Relationship (XFN)' ); ?><br />						<input type="text" id="edit-menu-item-xfn-<?php echo $item_id; ?>" class="widefat code edit-menu-item-xfn" name="menu-item-xfn[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->xfn ); ?>" />					</label>				</p>				<p class="field-description description description-wide">					<label for="edit-menu-item-description-<?php echo $item_id; ?>">						<?php _e( 'Description' ); ?><br />						<textarea id="edit-menu-item-description-<?php echo $item_id; ?>" class="widefat edit-menu-item-description" rows="3" cols="20" name="menu-item-description[<?php echo $item_id; ?>]"><?php echo esc_html( $item->description ); ?></textarea>						<span class="description"><?php _e('The description will be displayed in the menu if the current theme supports it.'); ?></span>					</label>				</p>				<div class="menu-item-actions description-wide submitbox">					<?php if( 'custom' != $item->type ) : ?>						<p class="link-to-original">							<?php printf( __('Original: %s'), '<a href="' . esc_attr( $item->url ) . '">' . esc_html( $original_title ) . '</a>' ); ?>						</p>					<?php endif; ?>					<a class="item-delete submitdelete deletion" id="delete-<?php echo $item_id; ?>" href="<?php					echo wp_nonce_url(						add_query_arg(							array(								'action' => 'delete-menu-item',								'menu-item' => $item_id,							),							remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )						),						'delete-menu_item_' . $item_id					); ?>"><?php _e('Remove'); ?></a> <span class="meta-sep"> | </span> <a class="item-cancel submitcancel" id="cancel-<?php echo $item_id; ?>" href="<?php	echo add_query_arg( array('edit-menu-item' => $item_id, 'cancel' => time()), remove_query_arg( $removed_args, admin_url( 'nav-menus.php' ) ) );						?>#menu-item-settings-<?php echo $item_id; ?>"><?php _e('Cancel'); ?></a>				</div>				<input class="menu-item-data-db-id" type="hidden" name="menu-item-db-id[<?php echo $item_id; ?>]" value="<?php echo $item_id; ?>" />				<input class="menu-item-data-object-id" type="hidden" name="menu-item-object-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object_id ); ?>" />				<input class="menu-item-data-object" type="hidden" name="menu-item-object[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object ); ?>" />				<input class="menu-item-data-parent-id" type="hidden" name="menu-item-parent-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_item_parent ); ?>" />				<input class="menu-item-data-position" type="hidden" name="menu-item-position[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_order ); ?>" />				<input class="menu-item-data-type" type="hidden" name="menu-item-type[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->type ); ?>" />			</div><!-- .menu-item-settings-->			<ul class="menu-item-transport"></ul>		<?php		$output .= ob_get_clean();	}}/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Checklist extends Walker_Nav_Menu  {	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_nav_menu_placeholder;		$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;		$possible_object_id = isset( $item->post_type ) && 'nav_menu_item' == $item->post_type ? $item->object_id : $_nav_menu_placeholder;		$possible_db_id = ( ! empty( $item->ID ) ) && ( 0 < $possible_object_id ) ? (int) $item->ID : 0;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$output .= $indent . '<li>';		$output .= '<label class="menu-item-title">';		$output .= '<input type="checkbox" class="menu-item-checkbox';		if ( ! empty( $item->_add_to_top ) ) {			$output .= ' add-to-top';		}		$output .= '" name="menu-item[' . $possible_object_id . '][menu-item-object-id]" value="'. esc_attr( $item->object_id ) .'" /> ';		$output .= empty( $item->label ) ? esc_html( $item->title ) : esc_html( $item->label );		$output .= '</label>';		// Menu item hidden fields		$output .= '<input type="hidden" class="menu-item-db-id" name="menu-item[' . $possible_object_id . '][menu-item-db-id]" value="' . $possible_db_id . '" />';		$output .= '<input type="hidden" class="menu-item-object" name="menu-item[' . $possible_object_id . '][menu-item-object]" value="'. esc_attr( $item->object ) .'" />';		$output .= '<input type="hidden" class="menu-item-parent-id" name="menu-item[' . $possible_object_id . '][menu-item-parent-id]" value="'. esc_attr( $item->menu_item_parent ) .'" />';		$output .= '<input type="hidden" class="menu-item-type" name="menu-item[' . $possible_object_id . '][menu-item-type]" value="'. esc_attr( $item->type ) .'" />';		$output .= '<input type="hidden" class="menu-item-title" name="menu-item[' . $possible_object_id . '][menu-item-title]" value="'. esc_attr( $item->title ) .'" />';		$output .= '<input type="hidden" class="menu-item-url" name="menu-item[' . $possible_object_id . '][menu-item-url]" value="'. esc_attr( $item->url ) .'" />';		$output .= '<input type="hidden" class="menu-item-target" name="menu-item[' . $possible_object_id . '][menu-item-target]" value="'. esc_attr( $item->target ) .'" />';		$output .= '<input type="hidden" class="menu-item-attr_title" name="menu-item[' . $possible_object_id . '][menu-item-attr_title]" value="'. esc_attr( $item->attr_title ) .'" />';		$output .= '<input type="hidden" class="menu-item-description" name="menu-item[' . $possible_object_id . '][menu-item-description]" value="'. esc_attr( $item->description ) .'" />';		$output .= '<input type="hidden" class="menu-item-classes" name="menu-item[' . $possible_object_id . '][menu-item-classes]" value="'. esc_attr( implode( ' ', $item->classes ) ) .'" />';		$output .= '<input type="hidden" class="menu-item-xfn" name="menu-item[' . $possible_object_id . '][menu-item-xfn]" value="'. esc_attr( $item->xfn ) .'" />';	}}/** * Prints the appropriate response to a menu quick search. * * @since 3.0.0 * * @param array $request The unsanitized request values. */function _wp_ajax_menu_quick_search( $request = array() ) {	$args = array();	$type = isset( $request['type'] ) ? $request['type'] : '';	$object_type = isset( $request['object_type'] ) ? $request['object_type'] : '';	$query = isset( $request['q'] ) ? $request['q'] : '';	$response_format = isset( $request['response-format'] ) && in_array( $request['response-format'], array( 'json', 'markup' ) ) ? $request['response-format'] : 'json';	if ( 'markup' == $response_format ) {		$args['walker'] = new Walker_Nav_Menu_Checklist;	}	if ( 'get-post-item' == $type ) {		if ( post_type_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( $object_id ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_post( $object_id );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => get_the_title( $object_id ),							'post_type' => get_post_type( $object_id ),						)					);					echo "\n";				}			}		} elseif ( taxonomy_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_term( $object_id, $object_type ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_term( $object_id, $object_type );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => $post_obj->name,							'post_type' => $object_type,						)					);					echo "\n";				}			}		}	} elseif ( preg_match('/quick-search-(posttype|taxonomy)-([a-zA-Z_-]*\b)/', $type, $matches) ) {		if ( 'posttype' == $matches[1] && get_post_type_object( $matches[2] ) ) {			query_posts(array(				'posts_per_page' => 10,				'post_type' => $matches[2],				's' => $query,			));			if ( ! have_posts() )				return;			while ( have_posts() ) {				the_post();				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( get_the_ID() ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => get_the_ID(),							'post_title' => get_the_title(),							'post_type' => get_post_type(),						)					);					echo "\n";				}			}		} elseif ( 'taxonomy' == $matches[1] ) {			$terms = get_terms( $matches[2], array(				'name__like' => $query,				'number' => 10,			));			if ( empty( $terms ) || is_wp_error( $terms ) )				return;			foreach( (array) $terms as $term ) {				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( $term ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => $term->term_id,							'post_title' => $term->name,							'post_type' => $matches[2],						)					);					echo "\n";				}			}		}	}}/** * Register nav menu metaboxes and advanced menu items * * @since 3.0.0 **/function wp_nav_menu_setup() {	// Register meta boxes	if ( wp_get_nav_menus() )		add_meta_box( 'nav-menu-theme-locations', __( 'Theme Locations' ), 'wp_nav_menu_locations_meta_box' , 'nav-menus', 'side', 'default' );	add_meta_box( 'add-custom-links', __('Custom Links'), 'wp_nav_menu_item_link_meta_box', 'nav-menus', 'side', 'default' );	wp_nav_menu_post_type_meta_boxes();	wp_nav_menu_taxonomy_meta_boxes();	// Register advanced menu items (columns)	add_filter( 'manage_nav-menus_columns', 'wp_nav_menu_manage_columns');	// If first time editing, disable advanced items by default.	if( false === get_user_option( 'managenav-menuscolumnshidden' ) ) {		$user = wp_get_current_user();		update_user_option($user->ID, 'managenav-menuscolumnshidden',			array( 0 => 'link-target', 1 => 'css-classes', 2 => 'xfn', 3 => 'description', ),			true);	}}/** * Limit the amount of meta boxes to just links, pages and cats for first time users. * * @since 3.0.0 **/function wp_initial_nav_menu_meta_boxes() {	global $wp_meta_boxes;	if ( get_user_option( 'metaboxhidden_nav-menus' ) !== false || ! is_array($wp_meta_boxes) )		return;	$initial_meta_boxes = array( 'nav-menu-theme-locations', 'add-custom-links', 'add-page', 'add-category' );	$hidden_meta_boxes = array();	foreach ( array_keys($wp_meta_boxes['nav-menus']) as $context ) {		foreach ( array_keys($wp_meta_boxes['nav-menus'][$context]) as $priority ) {			foreach ( $wp_meta_boxes['nav-menus'][$context][$priority] as $box ) {				if ( in_array( $box['id'], $initial_meta_boxes ) ) {					unset( $box['id'] );				} else {					$hidden_meta_boxes[] = $box['id'];				}			}		}	}	$user = wp_get_current_user();	update_user_option( $user->ID, 'metaboxhidden_nav-menus', $hidden_meta_boxes, true );}/** * Creates metaboxes for any post type menu item. * * @since 3.0.0 */function wp_nav_menu_post_type_meta_boxes() {	$post_types = get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	if ( ! $post_types )		return;	foreach ( $post_types as $post_type ) {		$post_type = apply_filters( 'nav_menu_meta_box_object', $post_type );		if ( $post_type ) {			$id = $post_type->name;			add_meta_box( "add-{$id}", $post_type->labels->name, 'wp_nav_menu_item_post_type_meta_box', 'nav-menus', 'side', 'default', $post_type );		}	}}/** * Creates metaboxes for any taxonomy menu item. * * @since 3.0.0 */function wp_nav_menu_taxonomy_meta_boxes() {	$taxonomies = get_taxonomies( array( 'show_in_nav_menus' => true ), 'object' );	if ( !$taxonomies )		return;	foreach ( $taxonomies as $tax ) {		$tax = apply_filters( 'nav_menu_meta_box_object', $tax );		if ( $tax ) {			$id = $tax->name;			add_meta_box( "add-{$id}", $tax->labels->name, 'wp_nav_menu_item_taxonomy_meta_box', 'nav-menus', 'side', 'default', $tax );		}	}}/** * Displays a metabox for the nav menu theme locations. * * @since 3.0.0 */function wp_nav_menu_locations_meta_box() {	global $nav_menu_selected_id;	if ( ! current_theme_supports( 'menus' ) ) {		// We must only support widgets. Leave a message and bail.		echo '<p class="howto">' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p>';		return;	}	$locations = get_registered_nav_menus();	$menus = wp_get_nav_menus();	$menu_locations = get_nav_menu_locations();	$num_locations = count( array_keys($locations) );	echo '<p class="howto">' . sprintf( _n('Your theme supports %s menu. Select which menu you would like to use.', 'Your theme supports %s menus. Select which menu appears in each location.', $num_locations ), number_format_i18n($num_locations) ) . '</p>';	foreach ( $locations as $location => $description ) {		?>		<p>			<label class="howto" for="locations-<?php echo $location; ?>">				<span><?php echo $description; ?></span>				<select name="menu-locations[<?php echo $location; ?>]" id="locations-<?php echo $location; ?>">					<option value="0"></option>					<?php foreach ( $menus as $menu ) : ?>					<option<?php selected( isset( $menu_locations[ $location ] ) && $menu_locations[ $location ] == $menu->term_id ); ?>						value="<?php echo $menu->term_id; ?>"><?php						$truncated_name = wp_html_excerpt( $menu->name, 40 );						echo $truncated_name == $menu->name ? $menu->name : trim( $truncated_name ) . '&hellip;';					?></option>					<?php endforeach; ?>				</select>			</label>		</p>	<?php	}	?>	<p class="button-controls">		<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-primary" name="nav-menu-locations" value="<?php esc_attr_e( 'Save' ); ?>" />	</p>	<?php}/** * Displays a metabox for the custom links menu item. * * @since 3.0.0 */function wp_nav_menu_item_link_meta_box() {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$_nav_menu_placeholder = 0 > $_nav_menu_placeholder ? $_nav_menu_placeholder - 1 : -1;	$current_tab = 'create';	if ( isset( $_REQUEST['customlink-tab'] ) && in_array( $_REQUEST['customlink-tab'], array('create', 'all') ) ) {		$current_tab = $_REQUEST['customlink-tab'];	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div class="customlinkdiv" id="customlinkdiv">			<input type="hidden" value="custom" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-type]" />			<p id="menu-item-url-wrap">				<label class="howto" for="custom-menu-item-url">					<span><?php _e('URL'); ?></span>					<input id="custom-menu-item-url" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-url]" type="text" class="code menu-item-textbox" value="http://" />				</label>			</p>			<p id="menu-item-name-wrap">				<label class="howto" for="custom-menu-item-name">					<span><?php _e('Label'); ?></span>					<input id="custom-menu-item-name" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-title]" type="text" class="regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Menu Item'); ?>" />				</label>			</p>		<p class="button-controls">			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-custom-menu-item" id="submit-customlinkdiv" />			</span>		</p>	</div><!-- /.customlinkdiv -->	<?php}/** * Displays a metabox for a post type menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $post_type The post type object. */function wp_nav_menu_item_post_type_meta_box( $object, $post_type ) {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$post_type_name = $post_type['args']->name;	// paginate browsing for large numbers of post objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$post_type_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'title',		'posts_per_page' => $per_page,		'post_type' => $post_type_name,		'suppress_filters' => true,		'update_post_term_cache' => false,		'update_post_meta_cache' => false	);	if ( isset( $post_type['args']->_default_query ) )		$args = array_merge($args, (array) $post_type['args']->_default_query );	// @todo transient caching of these results with proper invalidation on updating of a post of this type	$get_posts = new WP_Query;	$posts = $get_posts->query( $args );	if ( ! $get_posts->post_count ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$post_type_object = get_post_type_object($post_type_name);	$num_pages = $get_posts->max_num_pages;	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$post_type_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'post_type',				'item-object' => $post_type_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	if ( !$posts )		$error = '<li id="error">'. $post_type['args']->labels->not_found .'</li>';	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-recent';	if ( isset( $_REQUEST[$post_type_name . '-tab'] ) && in_array( $_REQUEST[$post_type_name . '-tab'], array('all', 'search') ) ) {		$current_tab = $_REQUEST[$post_type_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="posttype-<?php echo $post_type_name; ?>" class="posttypediv">		<ul id="posttype-<?php echo $post_type_name; ?>-tabs" class="posttype-tabs add-menu-item-tabs">			<li <?php echo ( 'most-recent' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'most-recent', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent"><?php _e('Most Recent'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#<?php echo $post_type_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-search"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent" class="tabs-panel <?php			echo ( 'most-recent' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $post_type_name; ?>checklist-most-recent" class="categorychecklist form-no-clear">				<?php				$recent_args = array_merge( $args, array( 'orderby' => 'post_date', 'order' => 'DESC', 'showposts' => 15 ) );				$most_recent = $get_posts->query( $recent_args );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $most_recent), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-posttype-<?php echo $post_type_name; ?>-search">			<?php			if ( isset( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-posttype-' . $post_type_name] );				$search_results = get_posts( array( 's' => $searched, 'post_type' => $post_type_name, 'fields' => 'all', 'order' => 'DESC', ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-posttype-<?php echo $post_type_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $post_type_name; ?>-search-checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<div id="<?php echo $post_type_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $post_type_name; ?>checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				// if we're dealing with pages, let's put a checkbox for the front page at the top of the list				if ( 'page' == $post_type_name ) {					$front_page = 'page' == get_option('show_on_front') ? (int) get_option( 'page_on_front' ) : 0;					if ( ! empty( $front_page ) ) {						$front_page_obj = get_post( $front_page );						$front_page_obj->_add_to_top = true;						$front_page_obj->label = sprintf( _x('Home: %s', 'nav menu front page title'), $front_page_obj->post_title );						array_unshift( $posts, $front_page_obj );					} else {						$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;						array_unshift( $posts, (object) array(							'_add_to_top' => true,							'ID' => 0,							'object_id' => $_nav_menu_placeholder,							'post_content' => '',							'post_excerpt' => '',							'post_title' => _x('Home', 'nav menu home label'),							'post_type' => 'nav_menu_item',							'type' => 'custom',							'url' => home_url('/'),						) );					}				}				$checkbox_items = walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $posts), 0, (object) $args );				if ( 'all' == $current_tab && ! empty( $_REQUEST['selectall'] ) ) {					$checkbox_items = preg_replace('/(type=(.)checkbox(\2))/', '$1 checked=$2checked$2', $checkbox_items);				}				echo $checkbox_items;				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$post_type_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#posttype-<?php echo $post_type_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-post-type-menu-item" id="submit-posttype-<?php echo $post_type_name; ?>" />			</span>		</p>	</div><!-- /.posttypediv -->	<?php}/** * Displays a metabox for a taxonomy menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $taxonomy The taxonomy object. */function wp_nav_menu_item_taxonomy_meta_box( $object, $taxonomy ) {	global $nav_menu_selected_id;	$taxonomy_name = $taxonomy['args']->name;	// paginate browsing for large numbers of objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$taxonomy_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'child_of' => 0,		'exclude' => '',		'hide_empty' => false,		'hierarchical' => 1,		'include' => '',		'include_last_update_time' => false,		'number' => $per_page,		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'name',		'pad_counts' => false,	);	$terms = get_terms( $taxonomy_name, $args );	if ( ! $terms || is_wp_error($terms) ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$num_pages = ceil( wp_count_terms( $taxonomy_name , array_merge( $args, array('number' => '', 'offset' => '') ) ) / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$taxonomy_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'taxonomy',				'item-object' => $taxonomy_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-used';	if ( isset( $_REQUEST[$taxonomy_name . '-tab'] ) && in_array( $_REQUEST[$taxonomy_name . '-tab'], array('all', 'most-used', 'search') ) ) {		$current_tab = $_REQUEST[$taxonomy_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="taxonomy-<?php echo $taxonomy_name; ?>" class="taxonomydiv">		<ul id="taxonomy-<?php echo $taxonomy_name; ?>-tabs" class="taxonomy-tabs add-menu-item-tabs">			<li <?php echo ( 'most-used' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'most-used', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-pop"><?php _e('Most Used'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-pop" class="tabs-panel <?php			echo ( 'most-used' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $taxonomy_name; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php				$popular_terms = get_terms( $taxonomy_name, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $popular_terms), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $taxonomy_name; ?>checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $terms), 0, (object) $args );				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>">			<?php			if ( isset( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] );				$search_results = get_terms( $taxonomy_name, array( 'name__like' => $searched, 'fields' => 'all', 'orderby' => 'count', 'order' => 'DESC', 'hierarchical' => false ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-taxonomy-<?php echo $taxonomy_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $taxonomy_name; ?>-search-checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$taxonomy_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#taxonomy-<?php echo $taxonomy_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-taxonomy-menu-item" id="submit-taxonomy-<?php echo $taxonomy_name; ?>" />			</span>		</p>	</div><!-- /.taxonomydiv -->	<?php}/** * Save posted nav menu item data. * * @since 3.0.0 * * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item. * @param array $menu_data The unsanitized posted menu item data. * @return array The database IDs of the items saved */function wp_save_nav_menu_items( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$items_saved = array();	if ( 0 == $menu_id || is_nav_menu( $menu_id ) ) {		// Loop through all the menu items' POST values		foreach( (array) $menu_data as $_possible_db_id => $_item_object_data ) {			if (				empty( $_item_object_data['menu-item-object-id'] ) && // checkbox is not checked				(					! isset( $_item_object_data['menu-item-type'] ) || // and item type either isn't set					in_array( $_item_object_data['menu-item-url'], array( 'http://', '' ) ) || // or URL is the default					! ( 'custom' == $_item_object_data['menu-item-type'] && ! isset( $_item_object_data['menu-item-db-id'] ) ) ||  // or it's not a custom menu item (but not the custom home page)					! empty( $_item_object_data['menu-item-db-id'] ) // or it *is* a custom menu item that already exists				)			) {				continue; // then this potential menu item is not getting added to this menu			}			// if this possible menu item doesn't actually have a menu database ID yet			if (				empty( $_item_object_data['menu-item-db-id'] ) ||				( 0 > $_possible_db_id ) ||				$_possible_db_id != $_item_object_data['menu-item-db-id']			) {				$_actual_db_id = 0;			} else {				$_actual_db_id = (int) $_item_object_data['menu-item-db-id'];			}			$args = array(				'menu-item-db-id' => ( isset( $_item_object_data['menu-item-db-id'] ) ? $_item_object_data['menu-item-db-id'] : '' ),				'menu-item-object-id' => ( isset( $_item_object_data['menu-item-object-id'] ) ? $_item_object_data['menu-item-object-id'] : '' ),				'menu-item-object' => ( isset( $_item_object_data['menu-item-object'] ) ? $_item_object_data['menu-item-object'] : '' ),				'menu-item-parent-id' => ( isset( $_item_object_data['menu-item-parent-id'] ) ? $_item_object_data['menu-item-parent-id'] : '' ),				'menu-item-position' => ( isset( $_item_object_data['menu-item-position'] ) ? $_item_object_data['menu-item-position'] : '' ),				'menu-item-type' => ( isset( $_item_object_data['menu-item-type'] ) ? $_item_object_data['menu-item-type'] : '' ),				'menu-item-title' => ( isset( $_item_object_data['menu-item-title'] ) ? $_item_object_data['menu-item-title'] : '' ),				'menu-item-url' => ( isset( $_item_object_data['menu-item-url'] ) ? $_item_object_data['menu-item-url'] : '' ),				'menu-item-description' => ( isset( $_item_object_data['menu-item-description'] ) ? $_item_object_data['menu-item-description'] : '' ),				'menu-item-attr-title' => ( isset( $_item_object_data['menu-item-attr-title'] ) ? $_item_object_data['menu-item-attr-title'] : '' ),				'menu-item-target' => ( isset( $_item_object_data['menu-item-target'] ) ? $_item_object_data['menu-item-target'] : '' ),				'menu-item-classes' => ( isset( $_item_object_data['menu-item-classes'] ) ? $_item_object_data['menu-item-classes'] : '' ),				'menu-item-xfn' => ( isset( $_item_object_data['menu-item-xfn'] ) ? $_item_object_data['menu-item-xfn'] : '' ),			);			$items_saved[] = wp_update_nav_menu_item( $menu_id, $_actual_db_id, $args );		}	}	return $items_saved;}/** * Adds custom arguments to some of the meta box object types. * * @since 3.0.0 * * @access private * * @param object $object The post type or taxonomy meta-object. * @return object The post type of taxonomy object. */function _wp_nav_menu_meta_box_object( $object = null ) {	if ( isset( $object->name ) ) {		if ( 'page' == $object->name ) {			$object->_default_query = array(				'orderby' => 'menu_order title',				'post_status' => 'publish',			);		// posts should show only published items		} elseif ( 'post' == $object->name ) {			$object->_default_query = array(				'post_status' => 'publish',			);		// cats should be in reverse chronological order		} elseif ( 'category' == $object->name ) {			$object->_default_query = array(				'orderby' => 'id',				'order' => 'DESC',			);		// custom post types should show only published items		} else {			$object->_default_query = array(				'post_status' => 'publish',			);		}	}	return $object;}/** * Returns the menu formatted to edit. * * @since 3.0.0 * * @param string $menu_id The ID of the menu to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_get_nav_menu_to_edit( $menu_id = 0 ) {	$menu = wp_get_nav_menu_object( $menu_id );	// If the menu exists, get its items.	if ( is_nav_menu( $menu ) ) {		$menu_items = wp_get_nav_menu_items( $menu->term_id, array('post_status' => 'any') );		$result = '<div id="menu-instructions" class="post-body-plain';		$result .= ( ! empty($menu_items) ) ? ' menu-instructions-inactive">' : '">';		$result .= '<p>' . __('Select menu items (pages, categories, links) from the boxes at left to begin building your custom menu.') . '</p>';		$result .= '</div>';		if( empty($menu_items) )			return $result . ' <ul class="menu" id="menu-to-edit"> </ul>';		$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $menu_id );		if ( class_exists( $walker_class_name ) )			$walker = new $walker_class_name;		else			return new WP_Error( 'menu_walker_not_exist', sprintf( __('The Walker class named <strong>%s</strong> does not exist.'), $walker_class_name ) );		$some_pending_menu_items = false;		foreach( (array) $menu_items as $menu_item ) {			if ( isset( $menu_item->post_status ) && 'draft' == $menu_item->post_status )				$some_pending_menu_items = true;		}		if ( $some_pending_menu_items )			$result .= '<div class="updated inline"><p>' . __('Click Save Menu to make pending menu items public.') . '</p></div>';		$result .= '<ul class="menu" id="menu-to-edit"> ';		$result .= walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $menu_items), 0, (object) array('walker' => $walker ) );		$result .= ' </ul> ';		return $result;	} elseif ( is_wp_error( $menu ) ) {		return $menu;	}}/** * Returns the columns for the nav menus page. * * @since 3.0.0 * * @param string $menu_item_id The ID of the menu item to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_nav_menu_manage_columns() {	return array(		'_title' => __('Show advanced menu properties'),		'cb' => '<input type="checkbox" />',		'link-target' => __('Link Target'),		'css-classes' => __('CSS Classes'),		'xfn' => __('Link Relationship (XFN)'),		'description' => __('Description'),	);}/** * Deletes orphaned draft menu items * * @access private * @since 3.0.0 * */function _wp_delete_orphaned_draft_menu_items() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	// delete orphaned draft menu items	$menu_items_to_delete = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts AS p LEFT JOIN $wpdb->postmeta AS m ON p.ID = m.post_id WHERE post_type = 'nav_menu_item' AND post_status = 'draft' AND meta_key = '_menu_item_orphaned' AND meta_value < '%d'", $delete_timestamp ) );	foreach( (array) $menu_items_to_delete as $menu_item_id )		wp_delete_post( $menu_item_id, true );}add_action('admin_head-nav-menus.php', '_wp_delete_orphaned_draft_menu_items');?>
