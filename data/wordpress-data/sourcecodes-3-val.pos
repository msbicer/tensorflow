<?php/** * Multisite upload handler. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite */define( 'SHORTINIT', true );require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );if( !is_multisite() )	die( 'Multisite support not enabled' );ms_file_constants();error_reporting( 0 );if ( $current_blog->archived == '1' || $current_blog->spam == '1' || $current_blog->deleted == '1' ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$file = BLOGUPLOADDIR . str_replace( '..', '', $_GET[ 'file' ] );if ( !is_file( $file ) ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$mime = wp_check_filetype( $_SERVER[ 'REQUEST_URI' ] );if( false === $mime[ 'type' ] && function_exists( 'mime_content_type' ) )	$mime[ 'type' ] = mime_content_type( $file );if( $mime[ 'type' ] )	$mimetype = $mime[ 'type' ];else	$mimetype = 'image/' . substr( $_SERVER[ 'REQUEST_URI' ], strrpos( $_SERVER[ 'REQUEST_URI' ], '.' ) + 1 );header( 'Content-type: ' . $mimetype ); // always send thisif ( false === strpos( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) )	header( 'Content-Length: ' . filesize( $file ) );// Optional support for X-Sendfile and X-Accel-Redirectif ( WPMU_ACCEL_REDIRECT ) {	header( 'X-Accel-Redirect: ' . str_replace( WP_CONTENT_DIR, '', $file ) );	exit;} elseif ( WPMU_SENDFILE ) {	header( 'X-Sendfile: ' . $file );	exit;}$last_modified = gmdate( 'D, d M Y H:i:s', filemtime( $file ) );$etag = '"' . md5( $last_modified ) . '"';header( "Last-Modified: $last_modified GMT" );header( 'ETag: ' . $etag );header( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 100000000 ) . ' GMT' );// Support for Conditional GET$client_etag = isset( $_SERVER['HTTP_IF_NONE_MATCH'] ) ? stripslashes( $_SERVER['HTTP_IF_NONE_MATCH'] ) : false;if( ! isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) )	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = false;$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );// If string is empty, return 0. If not, attempt to parse into a timestamp$client_modified_timestamp = $client_last_modified ? strtotime( $client_last_modified ) : 0;// Make a timestamp for our most recent modification...$modified_timestamp = strtotime($last_modified);if ( ( $client_last_modified && $client_etag )	? ( ( $client_modified_timestamp >= $modified_timestamp) && ( $client_etag == $etag ) )	: ( ( $client_modified_timestamp >= $modified_timestamp) || ( $client_etag == $etag ) )	) {	status_header( 304 );	exit;}// If we made it this far, just serve the filereadfile( $file );?>
<?php/** * Multisite themes administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! current_user_can( 'manage_network_themes' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Themes' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen enables and disables the inclusion of themes available to choose in the Appearance menu for each site. It does not activate or deactivate which theme a site is currently using.') . '</p>' .	'<p>' . __('If the network admin disables a theme that is in use, it can still remain selected on that site. If another theme is chosen, the disabled theme will not appear in the site&#8217;s Appearance > Themes screen.') . '</p>' .	'<p>' . __('Themes can be enabled on a site by site basis by the network admin on the Edit Site screen you go to via the Edit action link on the Sites screen.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Themes_SubPanel" target="_blank">Documentation on Network Themes</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) ) {	?>	<div id="message" class="updated"><p><?php _e( 'Site themes saved.' ) ?></p></div>	<?php}$themes = get_themes();$allowed_themes = get_site_allowed_themes();?><div class="wrap">	<form action="<?php echo esc_url( admin_url( 'ms-edit.php?action=updatethemes' ) ); ?>" method="post">		<?php screen_icon(); ?>		<h2><?php _e( 'Network Themes' ) ?></h2>		<p><?php _e( 'Themes must be enabled for your network before they will be available to individual sites.' ) ?></p>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>		<table class="widefat">			<thead>				<tr>					<th style="width:15%;"><?php _e( 'Enable' ) ?></th>					<th style="width:25%;"><?php _e( 'Theme' ) ?></th>					<th style="width:10%;"><?php _e( 'Version' ) ?></th>					<th style="width:60%;"><?php _e( 'Description' ) ?></th>				</tr>			</thead>			<tbody id="plugins">			<?php			$total_theme_count = $activated_themes_count = 0;			$class = '';			foreach ( (array) $themes as $key => $theme ) {				$total_theme_count++;				$theme_key = esc_html( $theme['Stylesheet'] );				$class = ( 'alt' == $class ) ? '' : 'alt';				$class1 = $enabled = $disabled = '';				$enabled = $disabled = false;				if ( isset( $allowed_themes[$theme_key] ) == true ) {					$enabled = true;					$activated_themes_count++;					$class1 = 'active';				} else {					$disabled = true;				}				?>				<tr valign="top" class="<?php echo $class . ' ' . $class1; ?>">					<td>						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="enabled_<?php echo $theme_key ?>" value="enabled" <?php checked( $enabled ) ?> /> <?php _e( 'Yes' ) ?></label>						&nbsp;&nbsp;&nbsp;						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="disabled_<?php echo $theme_key ?>" value="disabled" <?php checked( $disabled ) ?> /> <?php _e( 'No' ) ?></label>					</td>					<th scope="row" style="text-align:left;"><?php echo $key ?></th>					<td><?php echo $theme['Version'] ?></td>					<td><?php echo $theme['Description'] ?></td>				</tr>			<?php } ?>			</tbody>		</table>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>	</form>	<h3><?php _e( 'Total' )?></h3>	<p>		<?php printf( __( 'Themes Installed: %d' ), $total_theme_count); ?>		<br />		<?php printf( __( 'Themes Enabled: %d' ), $activated_themes_count); ?>	</p></div><?php include( './admin-footer.php' ); ?>
<?php/** * XML-RPC protocol support for WordPress * * @license GPL v2 <./license.txt> * @package WordPress *//** * Whether this is a XMLRPC Request * * @var bool */define('XMLRPC_REQUEST', true);// Some browser-embedded clients send cookies. We don't want them.$_COOKIE = array();// A bug in PHP < 5.2.2 makes $HTTP_RAW_POST_DATA not set by default,// but we can do it ourself.if ( !isset( $HTTP_RAW_POST_DATA ) ) {	$HTTP_RAW_POST_DATA = file_get_contents( 'php://input' );}// fix for mozBlog and other cases where '<?xml' isn't on the very first lineif ( isset($HTTP_RAW_POST_DATA) )	$HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA);/** Include the bootstrap for setting up WordPress environment */include('./wp-load.php');if ( isset( $_GET['rsd'] ) ) { // http://archipelago.phrasewise.com/rsdheader('Content-Type: text/xml; charset=' . get_option('blog_charset'), true);?><?php echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rsd version="1.0" xmlns="http://archipelago.phrasewise.com/rsd">  <service>    <engineName>WordPress</engineName>    <engineLink>http://wordpress.org/</engineLink>    <homePageLink><?php bloginfo_rss('url') ?></homePageLink>    <apis>      <api name="WordPress" blogID="1" preferred="true" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Movable Type" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="MetaWeblog" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Blogger" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Atom" blogID="" preferred="false" apiLink="<?php echo apply_filters('atom_service_url', site_url('wp-app.php/service', 'rpc') ) ?>" />    </apis>  </service></rsd><?phpexit;}include_once(ABSPATH . 'wp-admin/includes/admin.php');include_once(ABSPATH . WPINC . '/class-IXR.php');// Turn off all warnings and errors.// error_reporting(0);/** * Posts submitted via the xmlrpc interface get that title * @name post_default_title * @var string */$post_default_title = "";/** * Whether to enable XMLRPC Logging. * * @name xmlrpc_logging * @var int|bool */$xmlrpc_logging = 0;/** * logIO() - Writes logging info to a file. * * @uses $xmlrpc_logging * @package WordPress * @subpackage Logging * * @param string $io Whether input or output * @param string $msg Information describing logging reason. * @return bool Always return true */function logIO($io,$msg) {	global $xmlrpc_logging;	if ($xmlrpc_logging) {		$fp = fopen("../xmlrpc.log","a+");		$date = gmdate("Y-m-d H:i:s ");		$iot = ($io == "I") ? " Input: " : " Output: ";		fwrite($fp, "\n\n".$date.$iot.$msg);		fclose($fp);	}	return true;}if ( isset($HTTP_RAW_POST_DATA) )	logIO("I", $HTTP_RAW_POST_DATA);/** * WordPress XMLRPC server implementation. * * Implements compatability for Blogger API, MetaWeblog API, MovableType, and * pingback. Additional WordPress API for managing comments, pages, posts, * options, etc. * * Since WordPress 2.6.0, WordPress XMLRPC server can be disabled in the * administration panels. * * @package WordPress * @subpackage Publishing * @since 1.5.0 */class wp_xmlrpc_server extends IXR_Server {	/**	 * Register all of the XMLRPC methods that XMLRPC server understands.	 *	 * PHP4 constructor and sets up server and method property. Passes XMLRPC	 * methods through the 'xmlrpc_methods' filter to allow plugins to extend	 * or replace XMLRPC methods.	 *	 * @since 1.5.0	 *	 * @return wp_xmlrpc_server	 */	function wp_xmlrpc_server() {		$this->methods = array(			// WordPress API			'wp.getUsersBlogs'		=> 'this:wp_getUsersBlogs',			'wp.getPage'			=> 'this:wp_getPage',			'wp.getPages'			=> 'this:wp_getPages',			'wp.newPage'			=> 'this:wp_newPage',			'wp.deletePage'			=> 'this:wp_deletePage',			'wp.editPage'			=> 'this:wp_editPage',			'wp.getPageList'		=> 'this:wp_getPageList',			'wp.getAuthors'			=> 'this:wp_getAuthors',			'wp.getCategories'		=> 'this:mw_getCategories',		// Alias			'wp.getTags'			=> 'this:wp_getTags',			'wp.newCategory'		=> 'this:wp_newCategory',			'wp.deleteCategory'		=> 'this:wp_deleteCategory',			'wp.suggestCategories'	=> 'this:wp_suggestCategories',			'wp.uploadFile'			=> 'this:mw_newMediaObject',	// Alias			'wp.getCommentCount'	=> 'this:wp_getCommentCount',			'wp.getPostStatusList'	=> 'this:wp_getPostStatusList',			'wp.getPageStatusList'	=> 'this:wp_getPageStatusList',			'wp.getPageTemplates'	=> 'this:wp_getPageTemplates',			'wp.getOptions'			=> 'this:wp_getOptions',			'wp.setOptions'			=> 'this:wp_setOptions',			'wp.getComment'			=> 'this:wp_getComment',			'wp.getComments'		=> 'this:wp_getComments',			'wp.deleteComment'		=> 'this:wp_deleteComment',			'wp.editComment'		=> 'this:wp_editComment',			'wp.newComment'			=> 'this:wp_newComment',			'wp.getCommentStatusList' => 'this:wp_getCommentStatusList',			// Blogger API			'blogger.getUsersBlogs' => 'this:blogger_getUsersBlogs',			'blogger.getUserInfo' => 'this:blogger_getUserInfo',			'blogger.getPost' => 'this:blogger_getPost',			'blogger.getRecentPosts' => 'this:blogger_getRecentPosts',			'blogger.getTemplate' => 'this:blogger_getTemplate',			'blogger.setTemplate' => 'this:blogger_setTemplate',			'blogger.newPost' => 'this:blogger_newPost',			'blogger.editPost' => 'this:blogger_editPost',			'blogger.deletePost' => 'this:blogger_deletePost',			// MetaWeblog API (with MT extensions to structs)			'metaWeblog.newPost' => 'this:mw_newPost',			'metaWeblog.editPost' => 'this:mw_editPost',			'metaWeblog.getPost' => 'this:mw_getPost',			'metaWeblog.getRecentPosts' => 'this:mw_getRecentPosts',			'metaWeblog.getCategories' => 'this:mw_getCategories',			'metaWeblog.newMediaObject' => 'this:mw_newMediaObject',			// MetaWeblog API aliases for Blogger API			// see http://www.xmlrpc.com/stories/storyReader$2460			'metaWeblog.deletePost' => 'this:blogger_deletePost',			'metaWeblog.getTemplate' => 'this:blogger_getTemplate',			'metaWeblog.setTemplate' => 'this:blogger_setTemplate',			'metaWeblog.getUsersBlogs' => 'this:blogger_getUsersBlogs',			// MovableType API			'mt.getCategoryList' => 'this:mt_getCategoryList',			'mt.getRecentPostTitles' => 'this:mt_getRecentPostTitles',			'mt.getPostCategories' => 'this:mt_getPostCategories',			'mt.setPostCategories' => 'this:mt_setPostCategories',			'mt.supportedMethods' => 'this:mt_supportedMethods',			'mt.supportedTextFilters' => 'this:mt_supportedTextFilters',			'mt.getTrackbackPings' => 'this:mt_getTrackbackPings',			'mt.publishPost' => 'this:mt_publishPost',			// PingBack			'pingback.ping' => 'this:pingback_ping',			'pingback.extensions.getPingbacks' => 'this:pingback_extensions_getPingbacks',			'demo.sayHello' => 'this:sayHello',			'demo.addTwoNumbers' => 'this:addTwoNumbers'		);		$this->initialise_blog_option_info( );		$this->methods = apply_filters('xmlrpc_methods', $this->methods);	}	function serve_request() {		$this->IXR_Server($this->methods);	}	/**	 * Test XMLRPC API by saying, "Hello!" to client.	 *	 * @since 1.5.0	 *	 * @param array $args Method Parameters.	 * @return string	 */	function sayHello($args) {		return 'Hello!';	}	/**	 * Test XMLRPC API by adding two numbers for client.	 *	 * @since 1.5.0	 *	 * @param array $args Method Parameters.	 * @return int	 */	function addTwoNumbers($args) {		$number1 = $args[0];		$number2 = $args[1];		return $number1 + $number2;	}	/**	 * Check user's credentials.	 *	 * @since 1.5.0	 *	 * @param string $user_login User's username.	 * @param string $user_pass User's password.	 * @return bool Whether authentication passed.	 * @deprecated use wp_xmlrpc_server::login	 * @see wp_xmlrpc_server::login	 */	function login_pass_ok($user_login, $user_pass) {		if ( !get_option( 'enable_xmlrpc' ) ) {			$this->error = new IXR_Error( 405, sprintf( __( 'XML-RPC services are disabled on this site.  An admin user can enable them at %s'),  admin_url('options-writing.php') ) );			return false;		}		if (!user_pass_ok($user_login, $user_pass)) {			$this->error = new IXR_Error(403, __('Bad login/pass combination.'));			return false;		}		return true;	}	/**	 * Log user in.	 *	 * @since 2.8	 *	 * @param string $username User's username.	 * @param string $password User's password.	 * @return mixed WP_User object if authentication passed, false otherwise	 */	function login($username, $password) {		if ( !get_option( 'enable_xmlrpc' ) ) {			$this->error = new IXR_Error( 405, sprintf( __( 'XML-RPC services are disabled on this site.  An admin user can enable them at %s'),  admin_url('options-writing.php') ) );			return false;		}		$user = wp_authenticate($username, $password);		if (is_wp_error($user)) {			$this->error = new IXR_Error(403, __('Bad login/pass combination.'));			return false;		}		wp_set_current_user( $user->ID );		return $user;	}	/**	 * Sanitize string or array of strings for database.	 *	 * @since 1.5.2	 *	 * @param string|array $array Sanitize single string or array of strings.	 * @return string|array Type matches $array and sanitized for the database.	 */	function escape(&$array) {		global $wpdb;		if (!is_array($array)) {			return($wpdb->escape($array));		} else {			foreach ( (array) $array as $k => $v ) {				if ( is_array($v) ) {					$this->escape($array[$k]);				} else if ( is_object($v) ) {					//skip				} else {					$array[$k] = $wpdb->escape($v);				}			}		}	}	/**	 * Retrieve custom fields for post.	 *	 * @since 2.5.0	 *	 * @param int $post_id Post ID.	 * @return array Custom fields, if exist.	 */	function get_custom_fields($post_id) {		$post_id = (int) $post_id;		$custom_fields = array();		foreach ( (array) has_meta($post_id) as $meta ) {			// Don't expose protected fields.			if ( strpos($meta['meta_key'], '_wp_') === 0 ) {				continue;			}			$custom_fields[] = array(				"id"    => $meta['meta_id'],				"key"   => $meta['meta_key'],				"value" => $meta['meta_value']			);		}		return $custom_fields;	}	/**	 * Set custom fields for post.	 *	 * @since 2.5.0	 *	 * @param int $post_id Post ID.	 * @param array $fields Custom fields.	 */	function set_custom_fields($post_id, $fields) {		$post_id = (int) $post_id;		foreach ( (array) $fields as $meta ) {			if ( isset($meta['id']) ) {				$meta['id'] = (int) $meta['id'];				if ( isset($meta['key']) ) {					update_meta($meta['id'], $meta['key'], $meta['value']);				}				else {					delete_meta($meta['id']);				}			}			else {				$_POST['metakeyinput'] = $meta['key'];				$_POST['metavalue'] = $meta['value'];				add_meta($post_id);			}		}	}	/**	 * Set up blog options property.	 *	 * Passes property through 'xmlrpc_blog_options' filter.	 *	 * @since 2.6.0	 */	function initialise_blog_option_info( ) {		global $wp_version;		$this->blog_options = array(			// Read only options			'software_name'		=> array(				'desc'			=> __( 'Software Name' ),				'readonly'		=> true,				'value'			=> 'WordPress'			),			'software_version'	=> array(				'desc'			=> __( 'Software Version' ),				'readonly'		=> true,				'value'			=> $wp_version			),			'blog_url'			=> array(				'desc'			=> __( 'Site URL' ),				'readonly'		=> true,				'option'		=> 'siteurl'			),			// Updatable options			'time_zone'			=> array(				'desc'			=> __( 'Time Zone' ),				'readonly'		=> false,				'option'		=> 'gmt_offset'			),			'blog_title'		=> array(				'desc'			=> __( 'Site Title' ),				'readonly'		=> false,				'option'			=> 'blogname'			),			'blog_tagline'		=> array(				'desc'			=> __( 'Site Tagline' ),				'readonly'		=> false,				'option'		=> 'blogdescription'			),			'date_format'		=> array(				'desc'			=> __( 'Date Format' ),				'readonly'		=> false,				'option'		=> 'date_format'			),			'time_format'		=> array(				'desc'			=> __( 'Time Format' ),				'readonly'		=> false,				'option'		=> 'time_format'			),			'users_can_register'	=> array(				'desc'			=> __( 'Allow new users to sign up' ),				'readonly'		=> false,				'option'		=> 'users_can_register'			)		);		$this->blog_options = apply_filters( 'xmlrpc_blog_options', $this->blog_options );	}	/**	 * Retrieve the blogs of the user.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getUsersBlogs( $args ) {		global $current_site;		// If this isn't on WPMU then just use blogger_getUsersBlogs		if ( !is_multisite() ) {			array_unshift( $args, 1 );			return $this->blogger_getUsersBlogs( $args );		}		$this->escape( $args );		$username = $args[0];		$password = $args[1];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action( 'xmlrpc_call', 'wp.getUsersBlogs' );		$blogs = (array) get_blogs_of_user( $user->ID );		$struct = array( );		foreach ( $blogs as $blog ) {			// Don't include blogs that aren't hosted at this site			if ( $blog->site_id != $current_site->id )				continue;			$blog_id = $blog->userblog_id;			switch_to_blog($blog_id);			$is_admin = current_user_can('manage_options');			$struct[] = array(				'isAdmin'		=> $is_admin,				'url'			=> get_option( 'home' ) . '/',				'blogid'		=> $blog_id,				'blogName'		=> get_option( 'blogname' ),				'xmlrpc'		=> site_url( 'xmlrpc.php' )			);			restore_current_blog( );		}		return $struct;	}	/**	 * Retrieve page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPage($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$page_id	= (int) $args[1];		$username	= $args[2];		$password	= $args[3];		if ( !$user = $this->login($username, $password) ) {			return $this->error;		}		if ( !current_user_can( 'edit_page', $page_id ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this page.' ) );		do_action('xmlrpc_call', 'wp.getPage');		// Lookup page info.		$page = get_page($page_id);		// If we found the page then format the data.		if ( $page->ID && ($page->post_type == "page") ) {			// Get all of the page content and link.			$full_page = get_extended($page->post_content);			$link = post_permalink($page->ID);			// Get info the page parent if there is one.			$parent_title = "";			if ( !empty($page->post_parent) ) {				$parent = get_page($page->post_parent);				$parent_title = $parent->post_title;			}			// Determine comment and ping settings.			$allow_comments = comments_open($page->ID) ? 1 : 0;			$allow_pings = pings_open($page->ID) ? 1 : 0;			// Format page date.			$page_date = mysql2date("Ymd\TH:i:s", $page->post_date, false);			$page_date_gmt = mysql2date("Ymd\TH:i:s", $page->post_date_gmt, false);			// For drafts use the GMT version of the date			if ( $page->post_status == 'draft' )				$page_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $page->post_date ), 'Ymd\TH:i:s' );			// Pull the categories info together.			$categories = array();			foreach ( wp_get_post_categories($page->ID) as $cat_id ) {				$categories[] = get_cat_name($cat_id);			}			// Get the author info.			$author = get_userdata($page->post_author);			$page_template = get_post_meta( $page->ID, '_wp_page_template', true );			if ( empty( $page_template ) )				$page_template = 'default';			$page_struct = array(				"dateCreated"			=> new IXR_Date($page_date),				"userid"				=> $page->post_author,				"page_id"				=> $page->ID,				"page_status"			=> $page->post_status,				"description"			=> $full_page["main"],				"title"					=> $page->post_title,				"link"					=> $link,				"permaLink"				=> $link,				"categories"			=> $categories,				"excerpt"				=> $page->post_excerpt,				"text_more"				=> $full_page["extended"],				"mt_allow_comments"		=> $allow_comments,				"mt_allow_pings"		=> $allow_pings,				"wp_slug"				=> $page->post_name,				"wp_password"			=> $page->post_password,				"wp_author"				=> $author->display_name,				"wp_page_parent_id"		=> $page->post_parent,				"wp_page_parent_title"	=> $parent_title,				"wp_page_order"			=> $page->menu_order,				"wp_author_id"			=> $author->ID,				"wp_author_display_name"	=> $author->display_name,				"date_created_gmt"		=> new IXR_Date($page_date_gmt),				"custom_fields"			=> $this->get_custom_fields($page_id),				"wp_page_template"		=> $page_template			);			return($page_struct);		}		// If the page doesn't exist indicate that.		else {			return(new IXR_Error(404, __("Sorry, no such page.")));		}	}	/**	 * Retrieve Pages.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPages($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$num_pages	= isset($args[3]) ? (int) $args[3] : 10;		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit pages.' ) );		do_action('xmlrpc_call', 'wp.getPages');		$pages = get_posts( array('post_type' => 'page', 'post_status' => 'any', 'numberposts' => $num_pages) );		$num_pages = count($pages);		// If we have pages, put together their info.		if ( $num_pages >= 1 ) {			$pages_struct = array();			for ( $i = 0; $i < $num_pages; $i++ ) {				$page = wp_xmlrpc_server::wp_getPage(array(					$blog_id, $pages[$i]->ID, $username, $password				));				$pages_struct[] = $page;			}			return($pages_struct);		}		// If no pages were found return an error.		else {			return(array());		}	}	/**	 * Create new page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_newPage($args) {		// Items not escaped here will be escaped in newPost.		$username	= $this->escape($args[1]);		$password	= $this->escape($args[2]);		$page		= $args[3];		$publish	= $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.newPage');		// Make sure the user is allowed to add new pages.		if ( !current_user_can("publish_pages") )			return(new IXR_Error(401, __("Sorry, you cannot add new pages.")));		// Mark this as content for a page.		$args[3]["post_type"] = "page";		// Let mw_newPost do all of the heavy lifting.		return($this->mw_newPost($args));	}	/**	 * Delete page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return bool True, if success.	 */	function wp_deletePage($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$page_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.deletePage');		// Get the current page based on the page_id and		// make sure it is a page and not a post.		$actual_page = wp_get_single_post($page_id, ARRAY_A);		if ( !$actual_page || ($actual_page["post_type"] != "page") )			return(new IXR_Error(404, __("Sorry, no such page.")));		// Make sure the user can delete pages.		if ( !current_user_can("delete_page", $page_id) )			return(new IXR_Error(401, __("Sorry, you do not have the right to delete this page.")));		// Attempt to delete the page.		$result = wp_delete_post($page_id);		if ( !$result )			return(new IXR_Error(500, __("Failed to delete the page.")));		return(true);	}	/**	 * Edit page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_editPage($args) {		// Items not escaped here will be escaped in editPost.		$blog_id	= (int) $args[0];		$page_id	= (int) $this->escape($args[1]);		$username	= $this->escape($args[2]);		$password	= $this->escape($args[3]);		$content	= $args[4];		$publish	= $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.editPage');		// Get the page data and make sure it is a page.		$actual_page = wp_get_single_post($page_id, ARRAY_A);		if ( !$actual_page || ($actual_page["post_type"] != "page") )			return(new IXR_Error(404, __("Sorry, no such page.")));		// Make sure the user is allowed to edit pages.		if ( !current_user_can("edit_page", $page_id) )			return(new IXR_Error(401, __("Sorry, you do not have the right to edit this page.")));		// Mark this as content for a page.		$content["post_type"] = "page";		// Arrange args in the way mw_editPost understands.		$args = array(			$page_id,			$username,			$password,			$content,			$publish		);		// Let mw_editPost do all of the heavy lifting.		return($this->mw_editPost($args));	}	/**	 * Retrieve page list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_getPageList($args) {		global $wpdb;		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit pages.' ) );		do_action('xmlrpc_call', 'wp.getPageList');		// Get list of pages ids and titles		$page_list = $wpdb->get_results("			SELECT ID page_id,				post_title page_title,				post_parent page_parent_id,				post_date_gmt,				post_date,				post_status			FROM {$wpdb->posts}			WHERE post_type = 'page'			ORDER BY ID		");		// The date needs to be formated properly.		$num_pages = count($page_list);		for ( $i = 0; $i < $num_pages; $i++ ) {			$post_date = mysql2date("Ymd\TH:i:s", $page_list[$i]->post_date, false);			$post_date_gmt = mysql2date("Ymd\TH:i:s", $page_list[$i]->post_date_gmt, false);			$page_list[$i]->dateCreated = new IXR_Date($post_date);			$page_list[$i]->date_created_gmt = new IXR_Date($post_date_gmt);			// For drafts use the GMT version of the date			if ( $page_list[$i]->post_status == 'draft' ) {				$page_list[$i]->date_created_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $page_list[$i]->post_date ), 'Ymd\TH:i:s' );				$page_list[$i]->date_created_gmt = new IXR_Date( $page_list[$i]->date_created_gmt );			}			unset($page_list[$i]->post_date_gmt);			unset($page_list[$i]->post_date);			unset($page_list[$i]->post_status);		}		return($page_list);	}	/**	 * Retrieve authors list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getAuthors($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can("edit_posts") )			return(new IXR_Error(401, __("Sorry, you cannot edit posts on this site.")));		do_action('xmlrpc_call', 'wp.getAuthors');		$authors = array();		foreach ( (array) get_users_of_blog() as $row ) {			$authors[] = array(				"user_id"       => $row->user_id,				"user_login"    => $row->user_login,				"display_name"  => $row->display_name			);		}		return($authors);	}	/**	 * Get list of all tags	 *	 * @since 2.7	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getTags( $args ) {		$this->escape( $args );		$blog_id		= (int) $args[0];		$username		= $args[1];		$password		= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view tags.' ) );		do_action( 'xmlrpc_call', 'wp.getKeywords' );		$tags = array( );		if ( $all_tags = get_tags() ) {			foreach( (array) $all_tags as $tag ) {				$struct['tag_id']			= $tag->term_id;				$struct['name']				= $tag->name;				$struct['count']			= $tag->count;				$struct['slug']				= $tag->slug;				$struct['html_url']			= esc_html( get_tag_link( $tag->term_id ) );				$struct['rss_url']			= esc_html( get_tag_feed_link( $tag->term_id ) );				$tags[] = $struct;			}		}		return $tags;	}	/**	 * Create new category.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return int Category ID.	 */	function wp_newCategory($args) {		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		$category				= $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.newCategory');		// Make sure the user is allowed to add a category.		if ( !current_user_can("manage_categories") )			return(new IXR_Error(401, __("Sorry, you do not have the right to add a category.")));		// If no slug was provided make it empty so that		// WordPress will generate one.		if ( empty($category["slug"]) )			$category["slug"] = "";		// If no parent_id was provided make it empty		// so that it will be a top level page (no parent).		if ( !isset($category["parent_id"]) )			$category["parent_id"] = "";		// If no description was provided make it empty.		if ( empty($category["description"]) )			$category["description"] = "";		$new_category = array(			"cat_name"				=> $category["name"],			"category_nicename"		=> $category["slug"],			"category_parent"		=> $category["parent_id"],			"category_description"	=> $category["description"]		);		$cat_id = wp_insert_category($new_category);		if ( !$cat_id )			return(new IXR_Error(500, __("Sorry, the new category failed.")));		return($cat_id);	}	/**	 * Remove category.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return mixed See {@link wp_delete_category()} for return info.	 */	function wp_deleteCategory($args) {		$this->escape($args);		$blog_id		= (int) $args[0];		$username		= $args[1];		$password		= $args[2];		$category_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.deleteCategory');		if ( !current_user_can("manage_categories") )			return new IXR_Error( 401, __( "Sorry, you do not have the right to delete a category." ) );		return wp_delete_category( $category_id );	}	/**	 * Retrieve category list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_suggestCategories($args) {		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		$category				= $args[3];		$max_results			= (int) $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts to this site in order to view categories.' ) );		do_action('xmlrpc_call', 'wp.suggestCategories');		$category_suggestions = array();		$args = array('get' => 'all', 'number' => $max_results, 'name__like' => $category);		foreach ( (array) get_categories($args) as $cat ) {			$category_suggestions[] = array(				"category_id"	=> $cat->cat_ID,				"category_name"	=> $cat->cat_name			);		}		return($category_suggestions);	}	/**	 * Retrieve comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.getComment');		if ( ! $comment = get_comment($comment_id) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		// Format page date.		$comment_date = mysql2date("Ymd\TH:i:s", $comment->comment_date, false);		$comment_date_gmt = mysql2date("Ymd\TH:i:s", $comment->comment_date_gmt, false);		if ( '0' == $comment->comment_approved )			$comment_status = 'hold';		else if ( 'spam' == $comment->comment_approved )			$comment_status = 'spam';		else if ( '1' == $comment->comment_approved )			$comment_status = 'approve';		else			$comment_status = $comment->comment_approved;		$link = get_comment_link($comment);		$comment_struct = array(			"date_created_gmt"		=> new IXR_Date($comment_date_gmt),			"user_id"				=> $comment->user_id,			"comment_id"			=> $comment->comment_ID,			"parent"				=> $comment->comment_parent,			"status"				=> $comment_status,			"content"				=> $comment->comment_content,			"link"					=> $link,			"post_id"				=> $comment->comment_post_ID,			"post_title"			=> get_the_title($comment->comment_post_ID),			"author"				=> $comment->comment_author,			"author_url"			=> $comment->comment_author_url,			"author_email"			=> $comment->comment_author_email,			"author_ip"				=> $comment->comment_author_IP,			"type"					=> $comment->comment_type,		);		return $comment_struct;	}	/**	 * Retrieve comments.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getComments($args) {		$raw_args = $args;		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$struct		= $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit comments.' ) );		do_action('xmlrpc_call', 'wp.getComments');		if ( isset($struct['status']) )			$status = $struct['status'];		else			$status = '';		$post_id = '';		if ( isset($struct['post_id']) )			$post_id = absint($struct['post_id']);		$offset = 0;		if ( isset($struct['offset']) )			$offset = absint($struct['offset']);		$number = 10;		if ( isset($struct['number']) )			$number = absint($struct['number']);		$comments = get_comments( array('status' => $status, 'post_id' => $post_id, 'offset' => $offset, 'number' => $number ) );		$num_comments = count($comments);		if ( ! $num_comments )			return array();		$comments_struct = array();		for ( $i = 0; $i < $num_comments; $i++ ) {			$comment = wp_xmlrpc_server::wp_getComment(array(				$raw_args[0], $raw_args[1], $raw_args[2], $comments[$i]->comment_ID,			));			$comments_struct[] = $comment;		}		return $comments_struct;	}	/**	 * Remove comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return mixed {@link wp_delete_comment()}	 */	function wp_deleteComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_ID	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.deleteComment');		if ( ! get_comment($comment_ID) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		return wp_delete_comment($comment_ID);	}	/**	 * Edit comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return bool True, on success.	 */	function wp_editComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_ID	= (int) $args[3];		$content_struct = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.editComment');		if ( ! get_comment($comment_ID) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		if ( isset($content_struct['status']) ) {			$statuses = get_comment_statuses();			$statuses = array_keys($statuses);			if ( ! in_array($content_struct['status'], $statuses) )				return new IXR_Error( 401, __( 'Invalid comment status.' ) );			$comment_approved = $content_struct['status'];		}		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) ) {			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force			$comment_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$comment_date_gmt = iso8601_to_datetime($dateCreated, GMT);		}		if ( isset($content_struct['content']) )			$comment_content = $content_struct['content'];		if ( isset($content_struct['author']) )			$comment_author = $content_struct['author'];		if ( isset($content_struct['author_url']) )			$comment_author_url = $content_struct['author_url'];		if ( isset($content_struct['author_email']) )			$comment_author_email = $content_struct['author_email'];		// We've got all the data -- post it:		$comment = compact('comment_ID', 'comment_content', 'comment_approved', 'comment_date', 'comment_date_gmt', 'comment_author', 'comment_author_email', 'comment_author_url');		$result = wp_update_comment($comment);		if ( is_wp_error( $result ) )			return new IXR_Error(500, $result->get_error_message());		if ( !$result )			return new IXR_Error(500, __('Sorry, the comment could not be edited. Something wrong happened.'));		return true;	}	/**	 * Create new comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return mixed {@link wp_new_comment()}	 */	function wp_newComment($args) {		global $wpdb;		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$post		= $args[3];		$content_struct = $args[4];		$allow_anon = apply_filters('xmlrpc_allow_anonymous_comments', false);		$user = $this->login($username, $password);		if ( !$user ) {			$logged_in = false;			if ( $allow_anon && get_option('comment_registration') )				return new IXR_Error( 403, __( 'You must be registered to comment' ) );			else if ( !$allow_anon )				return $this->error;		} else {			$logged_in = true;		}		if ( is_numeric($post) )			$post_id = absint($post);		else			$post_id = url_to_postid($post);		if ( ! $post_id )			return new IXR_Error( 404, __( 'Invalid post ID.' ) );		if ( ! get_post($post_id) )			return new IXR_Error( 404, __( 'Invalid post ID.' ) );		$comment['comment_post_ID'] = $post_id;		if ( $logged_in ) {			$comment['comment_author'] = $wpdb->escape( $user->display_name );			$comment['comment_author_email'] = $wpdb->escape( $user->user_email );			$comment['comment_author_url'] = $wpdb->escape( $user->user_url );			$comment['user_ID'] = $user->ID;		} else {			$comment['comment_author'] = '';			if ( isset($content_struct['author']) )				$comment['comment_author'] = $content_struct['author'];			$comment['comment_author_email'] = '';			if ( isset($content_struct['author_email']) )				$comment['comment_author_email'] = $content_struct['author_email'];			$comment['comment_author_url'] = '';			if ( isset($content_struct['author_url']) )				$comment['comment_author_url'] = $content_struct['author_url'];			$comment['user_ID'] = 0;			if ( get_option('require_name_email') ) {				if ( 6 > strlen($comment['comment_author_email']) || '' == $comment['comment_author'] )					return new IXR_Error( 403, __( 'Comment author name and email are required' ) );				elseif ( !is_email($comment['comment_author_email']) )					return new IXR_Error( 403, __( 'A valid email address is required' ) );			}		}		$comment['comment_parent'] = isset($content_struct['comment_parent']) ? absint($content_struct['comment_parent']) : 0;		$comment['comment_content'] = $content_struct['content'];		do_action('xmlrpc_call', 'wp.newComment');		return wp_new_comment($comment);	}	/**	 * Retrieve all of the comment status.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getCommentStatusList($args) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getCommentStatusList');		return get_comment_statuses( );	}	/**	 * Retrieve comment count.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getCommentCount( $args ) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$post_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about comments.' ) );		do_action('xmlrpc_call', 'wp.getCommentCount');		$count = wp_count_comments( $post_id );		return array(			"approved" => $count->approved,			"awaiting_moderation" => $count->moderated,			"spam" => $count->spam,			"total_comments" => $count->total_comments		);	}	/**	 * Retrieve post statuses.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPostStatusList( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getPostStatusList');		return get_post_statuses( );	}	/**	 * Retrieve page statuses.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPageStatusList( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getPageStatusList');		return get_page_statuses( );	}	/**	 * Retrieve page templates.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPageTemplates( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		$templates = get_page_templates( );		$templates['Default'] = 'default';		return $templates;	}	/**	 * Retrieve blog options.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getOptions( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$options	= (array) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		// If no specific options where asked for, return all of them		if ( count( $options ) == 0 )			$options = array_keys($this->blog_options);		return $this->_getOptions($options);	}	/**	 * Retrieve blog options value from list.	 *	 * @since 2.6.0	 *	 * @param array $options Options to retrieve.	 * @return array	 */	function _getOptions($options) {		$data = array( );		foreach ( $options as $option ) {			if ( array_key_exists( $option, $this->blog_options ) ) {				$data[$option] = $this->blog_options[$option];				//Is the value static or dynamic?				if ( isset( $data[$option]['option'] ) ) {					$data[$option]['value'] = get_option( $data[$option]['option'] );					unset($data[$option]['option']);				}			}		}		return $data;	}	/**	 * Update blog options.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_setOptions( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$options	= (array) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'manage_options' ) )			return new IXR_Error( 403, __( 'You are not allowed to update options.' ) );		foreach ( $options as $o_name => $o_value ) {			$option_names[] = $o_name;			if ( !array_key_exists( $o_name, $this->blog_options ) )				continue;			if ( $this->blog_options[$o_name]['readonly'] == true )				continue;			update_option( $this->blog_options[$o_name]['option'], $o_value );		}		//Now return the updated values		return $this->_getOptions($option_names);	}	/* Blogger API functions.	 * specs on http://plant.blogger.com/api and http://groups.yahoo.com/group/bloggerDev/	 */	/**	 * Retrieve blogs that user owns.	 *	 * Will make more sense once we support multiple blogs.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getUsersBlogs($args) {		if ( is_multisite() )			return $this->_multisite_getUsersBlogs($args);		$this->escape($args);		$username = $args[1];		$password  = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getUsersBlogs');		$is_admin = current_user_can('manage_options');		$struct = array(			'isAdmin'  => $is_admin,			'url'      => get_option('home') . '/',			'blogid'   => '1',			'blogName' => get_option('blogname'),			'xmlrpc'   => site_url( 'xmlrpc.php' )		);		return array($struct);	}	/**	 * Private function for retrieving a users blogs for multisite setups	 *	 * @access protected	 */	function _multisite_getUsersBlogs($args) {		global $current_blog;		$domain = $current_blog->domain;		$path = $current_blog->path . 'xmlrpc.php';		$protocol = is_ssl() ? 'https' : 'http';		$rpc = new IXR_Client("$protocol://{$domain}{$path}");		$rpc->query('wp.getUsersBlogs', $args[1], $args[2]);		$blogs = $rpc->getResponse();		if ( isset($blogs['faultCode']) )			return new IXR_Error($blogs['faultCode'], $blogs['faultString']);		if ( $_SERVER['HTTP_HOST'] == $domain && $_SERVER['REQUEST_URI'] == $path ) {			return $blogs;		} else {			foreach ( (array) $blogs as $blog ) {				if ( strpos($blog['url'], $_SERVER['HTTP_HOST']) )					return array($blog);			}			return array();		}	}	/**	 * Retrieve user's data.	 *	 * Gives your client some info about you, so you don't have to.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getUserInfo($args) {		$this->escape($args);		$username = $args[1];		$password  = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you do not have access to user data on this site.' ) );		do_action('xmlrpc_call', 'blogger.getUserInfo');		$struct = array(			'nickname'  => $user->nickname,			'userid'    => $user->ID,			'url'       => $user->user_url,			'lastname'  => $user->last_name,			'firstname' => $user->first_name		);		return $struct;	}	/**	 * Retrieve post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getPost($args) {		$this->escape($args);		$post_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this post.' ) );		do_action('xmlrpc_call', 'blogger.getPost');		$post_data = wp_get_single_post($post_ID, ARRAY_A);		$categories = implode(',', wp_get_post_categories($post_ID));		$content  = '<title>'.stripslashes($post_data['post_title']).'</title>';		$content .= '<category>'.$categories.'</category>';		$content .= stripslashes($post_data['post_content']);		$struct = array(			'userid'    => $post_data['post_author'],			'dateCreated' => new IXR_Date(mysql2date('Ymd\TH:i:s', $post_data['post_date'], false)),			'content'     => $content,			'postid'  => $post_data['ID']		);		return $struct;	}	/**	 * Retrieve list of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getRecentPosts($args) {		$this->escape($args);		$blog_ID    = (int) $args[1]; /* though we don't use it yet */		$username = $args[2];		$password  = $args[3];		$num_posts  = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getRecentPosts');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list ) {			$this->error = new IXR_Error(500, __('Either there are no posts, or something went wrong.'));			return $this->error;		}		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$categories = implode(',', wp_get_post_categories($entry['ID']));			$content  = '<title>'.stripslashes($entry['post_title']).'</title>';			$content .= '<category>'.$categories.'</category>';			$content .= stripslashes($entry['post_content']);			$struct[] = array(				'userid' => $entry['post_author'],				'dateCreated' => new IXR_Date($post_date),				'content' => $content,				'postid' => $entry['ID'],			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve blog_filename content.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return string	 */	function blogger_getTemplate($args) {		$this->escape($args);		$blog_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		$template   = $args[4]; /* could be 'main' or 'archiveIndex', but we don't use it */		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getTemplate');		if ( !current_user_can('edit_themes') )			return new IXR_Error(401, __('Sorry, this user can not edit the template.'));		/* warning: here we make the assumption that the blog's URL is on the same server */		$filename = get_option('home') . '/';		$filename = preg_replace('#https?://.+?/#', $_SERVER['DOCUMENT_ROOT'].'/', $filename);		$f = fopen($filename, 'r');		$content = fread($f, filesize($filename));		fclose($f);		/* so it is actually editable with a windows/mac client */		// FIXME: (or delete me) do we really want to cater to bad clients at the expense of good ones by BEEPing up their line breaks? commented.     $content = str_replace("\n", "\r\n", $content);		return $content;	}	/**	 * Updates the content of blog_filename.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True when done.	 */	function blogger_setTemplate($args) {		$this->escape($args);		$blog_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		$content    = $args[4];		$template   = $args[5]; /* could be 'main' or 'archiveIndex', but we don't use it */		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.setTemplate');		if ( !current_user_can('edit_themes') )			return new IXR_Error(401, __('Sorry, this user cannot edit the template.'));		/* warning: here we make the assumption that the blog's URL is on the same server */		$filename = get_option('home') . '/';		$filename = preg_replace('#https?://.+?/#', $_SERVER['DOCUMENT_ROOT'].'/', $filename);		if ($f = fopen($filename, 'w+')) {			fwrite($f, $content);			fclose($f);		} else {			return new IXR_Error(500, __('Either the file is not writable, or something wrong happened. The file has not been updated.'));		}		return true;	}	/**	 * Create new post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function blogger_newPost($args) {		$this->escape($args);		$blog_ID    = (int) $args[1]; /* though we don't use it yet */		$username = $args[2];		$password  = $args[3];		$content    = $args[4];		$publish    = $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.newPost');		$cap = ($publish) ? 'publish_posts' : 'edit_posts';		if ( !current_user_can($cap) )			return new IXR_Error(401, __('Sorry, you are not allowed to post on this site.'));		$post_status = ($publish) ? 'publish' : 'draft';		$post_author = $user->ID;		$post_title = xmlrpc_getposttitle($content);		$post_category = xmlrpc_getpostcategory($content);		$post_content = xmlrpc_removepostdata($content);		$post_date = current_time('mysql');		$post_date_gmt = current_time('mysql', 1);		$post_data = compact('blog_ID', 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status');		$post_ID = wp_insert_post($post_data);		if ( is_wp_error( $post_ID ) )			return new IXR_Error(500, $post_ID->get_error_message());		if ( !$post_ID )			return new IXR_Error(500, __('Sorry, your entry could not be posted. Something wrong happened.'));		$this->attach_uploads( $post_ID, $post_content );		logIO('O', "Posted ! ID: $post_ID");		return $post_ID;	}	/**	 * Edit a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool true when done.	 */	function blogger_editPost($args) {		$this->escape($args);		$post_ID     = (int) $args[1];		$username  = $args[2];		$password   = $args[3];		$content     = $args[4];		$publish     = $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.editPost');		$actual_post = wp_get_single_post($post_ID,ARRAY_A);		if ( !$actual_post || $actual_post['post_type'] != 'post' )			return new IXR_Error(404, __('Sorry, no such post.'));		$this->escape($actual_post);		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you do not have the right to edit this post.'));		extract($actual_post, EXTR_SKIP);		if ( ('publish' == $post_status) && !current_user_can('publish_posts') )			return new IXR_Error(401, __('Sorry, you do not have the right to publish this post.'));		$post_title = xmlrpc_getposttitle($content);		$post_category = xmlrpc_getpostcategory($content);		$post_content = xmlrpc_removepostdata($content);		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt');		$result = wp_update_post($postdata);		if ( !$result )			return new IXR_Error(500, __('For some strange yet very annoying reason, this post could not be edited.'));		$this->attach_uploads( $ID, $post_content );		return true;	}	/**	 * Remove a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True when post is deleted.	 */	function blogger_deletePost($args) {		$this->escape($args);		$post_ID     = (int) $args[1];		$username  = $args[2];		$password   = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.deletePost');		$actual_post = wp_get_single_post($post_ID,ARRAY_A);		if ( !$actual_post || $actual_post['post_type'] != 'post' )			return new IXR_Error(404, __('Sorry, no such post.'));		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you do not have the right to delete this post.'));		$result = wp_delete_post($post_ID);		if ( !$result )			return new IXR_Error(500, __('For some strange yet very annoying reason, this post could not be deleted.'));		return true;	}	/* MetaWeblog API functions	 * specs on wherever Dave Winer wants them to be	 */	/**	 * Create a new post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function mw_newPost($args) {		$this->escape($args);		$blog_ID     = (int) $args[0]; // we will support this in the near future		$username  = $args[1];		$password   = $args[2];		$content_struct = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.newPost');		$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';		$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );		$post_type = 'post';		$page_template = '';		if ( !empty( $content_struct['post_type'] ) ) {			if ( $content_struct['post_type'] == 'page' ) {				$cap = ( $publish ) ? 'publish_pages' : 'edit_pages';				$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );				$post_type = 'page';				if ( !empty( $content_struct['wp_page_template'] ) )					$page_template = $content_struct['wp_page_template'];			} elseif ( $content_struct['post_type'] == 'post' ) {				// This is the default, no changes needed			} else {				// No other post_type values are allowed here				return new IXR_Error( 401, __( 'Invalid post type.' ) );			}		}		if ( !current_user_can( $cap ) )			return new IXR_Error( 401, $error_message );		// Let WordPress generate the post_name (slug) unless		// one has been provided.		$post_name = "";		if ( isset($content_struct["wp_slug"]) )			$post_name = $content_struct["wp_slug"];		// Only use a password if one was given.		if ( isset($content_struct["wp_password"]) )			$post_password = $content_struct["wp_password"];		// Only set a post parent if one was provided.		if ( isset($content_struct["wp_page_parent_id"]) )			$post_parent = $content_struct["wp_page_parent_id"];		// Only set the menu_order if it was provided.		if ( isset($content_struct["wp_page_order"]) )			$menu_order = $content_struct["wp_page_order"];		$post_author = $user->ID;		// If an author id was provided then use it instead.		if ( isset($content_struct["wp_author_id"]) && ($user->ID != $content_struct["wp_author_id"]) ) {			switch ( $post_type ) {				case "post":					if ( !current_user_can("edit_others_posts") )						return(new IXR_Error(401, __("You are not allowed to post as this user")));					break;				case "page":					if ( !current_user_can("edit_others_pages") )						return(new IXR_Error(401, __("You are not allowed to create pages as this user")));					break;				default:					return(new IXR_Error(401, __("Invalid post type.")));					break;			}			$post_author = $content_struct["wp_author_id"];		}		$post_title = $content_struct['title'];		$post_content = $content_struct['description'];		$post_status = $publish ? 'publish' : 'draft';		if ( isset( $content_struct["{$post_type}_status"] ) ) {			switch ( $content_struct["{$post_type}_status"] ) {				case 'draft':				case 'private':				case 'publish':					$post_status = $content_struct["{$post_type}_status"];					break;				case 'pending':					// Pending is only valid for posts, not pages.					if ( $post_type === 'post' )						$post_status = $content_struct["{$post_type}_status"];					break;				default:					$post_status = $publish ? 'publish' : 'draft';					break;			}		}		$post_excerpt = $content_struct['mt_excerpt'];		$post_more = $content_struct['mt_text_more'];		$tags_input = $content_struct['mt_keywords'];		if ( isset($content_struct["mt_allow_comments"]) ) {			if ( !is_numeric($content_struct["mt_allow_comments"]) ) {				switch ( $content_struct["mt_allow_comments"] ) {					case "closed":						$comment_status = "closed";						break;					case "open":						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_comments"] ) {					case 0:					case 2:						$comment_status = "closed";						break;					case 1:						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			}		} else {			$comment_status = get_option("default_comment_status");		}		if ( isset($content_struct["mt_allow_pings"]) ) {			if ( !is_numeric($content_struct["mt_allow_pings"]) ) {				switch ( $content_struct['mt_allow_pings'] ) {					case "closed":						$ping_status = "closed";						break;					case "open":						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_pings"] ) {					case 0:						$ping_status = "closed";						break;					case 1:						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			}		} else {			$ping_status = get_option("default_ping_status");		}		if ( $post_more )			$post_content = $post_content . "<!--more-->" . $post_more;		$to_ping = $content_struct['mt_tb_ping_urls'];		if ( is_array($to_ping) )			$to_ping = implode(' ', $to_ping);		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) )			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force		elseif ( !empty( $content_struct['dateCreated']) )			$dateCreated = $content_struct['dateCreated']->getIso();		if ( !empty( $dateCreated ) ) {			$post_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$post_date_gmt = iso8601_to_datetime($dateCreated, GMT);		} else {			$post_date = current_time('mysql');			$post_date_gmt = current_time('mysql', 1);		}		$catnames = $content_struct['categories'];		logIO('O', 'Post cats: ' . var_export($catnames,true));		$post_category = array();		if ( is_array($catnames) ) {			foreach ($catnames as $cat) {				$post_category[] = get_cat_ID($cat);			}		}		// We've got all the data -- post it:		$postdata = compact('post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'comment_status', 'ping_status', 'to_ping', 'post_type', 'post_name', 'post_password', 'post_parent', 'menu_order', 'tags_input', 'page_template');		$post_ID = wp_insert_post($postdata, true);		if ( is_wp_error( $post_ID ) )			return new IXR_Error(500, $post_ID->get_error_message());		if ( !$post_ID )			return new IXR_Error(500, __('Sorry, your entry could not be posted. Something wrong happened.'));		// Only posts can be sticky		if ( $post_type == 'post' && isset( $content_struct['sticky'] ) ) {			if ( $content_struct['sticky'] == true )				stick_post( $post_ID );			elseif ( $content_struct['sticky'] == false )				unstick_post( $post_ID );		}		if ( isset($content_struct['custom_fields']) )			$this->set_custom_fields($post_ID, $content_struct['custom_fields']);		// Handle enclosures		$this->add_enclosure_if_new($post_ID, $content_struct['enclosure']);		$this->attach_uploads( $post_ID, $post_content );		logIO('O', "Posted ! ID: $post_ID");		return strval($post_ID);	}	function add_enclosure_if_new($post_ID, $enclosure) {		if ( is_array( $enclosure ) && isset( $enclosure['url'] ) && isset( $enclosure['length'] ) && isset( $enclosure['type'] ) ) {			$encstring = $enclosure['url'] . "\n" . $enclosure['length'] . "\n" . $enclosure['type'];			$found = false;			foreach ( (array) get_post_custom($post_ID) as $key => $val) {				if ($key == 'enclosure') {					foreach ( (array) $val as $enc ) {						if ($enc == $encstring) {							$found = true;							break 2;						}					}				}			}			if (!$found)				add_post_meta( $post_ID, 'enclosure', $encstring );		}	}	/**	 * Attach upload to a post.	 *	 * @since 2.1.0	 *	 * @param int $post_ID Post ID.	 * @param string $post_content Post Content for attachment.	 */	function attach_uploads( $post_ID, $post_content ) {		global $wpdb;		// find any unattached files		$attachments = $wpdb->get_results( "SELECT ID, guid FROM {$wpdb->posts} WHERE post_parent = '0' AND post_type = 'attachment'" );		if ( is_array( $attachments ) ) {			foreach ( $attachments as $file ) {				if ( strpos( $post_content, $file->guid ) !== false )					$wpdb->update($wpdb->posts, array('post_parent' => $post_ID), array('ID' => $file->ID) );			}		}	}	/**	 * Edit a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True on success.	 */	function mw_editPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$content_struct = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.editPost');		$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';		$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );		$post_type = 'post';		$page_template = '';		if ( !empty( $content_struct['post_type'] ) ) {			if ( $content_struct['post_type'] == 'page' ) {				$cap = ( $publish ) ? 'publish_pages' : 'edit_pages';				$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );				$post_type = 'page';				if ( !empty( $content_struct['wp_page_template'] ) )					$page_template = $content_struct['wp_page_template'];			} elseif ( $content_struct['post_type'] == 'post' ) {				// This is the default, no changes needed			} else {				// No other post_type values are allowed here				return new IXR_Error( 401, __( 'Invalid post type.' ) );			}		}		if ( !current_user_can( $cap ) )			return new IXR_Error( 401, $error_message );		$postdata = wp_get_single_post($post_ID, ARRAY_A);		// If there is no post data for the give post id, stop		// now and return an error.  Other wise a new post will be		// created (which was the old behavior).		if ( empty($postdata["ID"]) )			return(new IXR_Error(404, __("Invalid post ID.")));		$this->escape($postdata);		extract($postdata, EXTR_SKIP);		// Let WordPress manage slug if none was provided.		$post_name = "";		if ( isset($content_struct["wp_slug"]) )			$post_name = $content_struct["wp_slug"];		// Only use a password if one was given.		if ( isset($content_struct["wp_password"]) )			$post_password = $content_struct["wp_password"];		// Only set a post parent if one was given.		if ( isset($content_struct["wp_page_parent_id"]) )			$post_parent = $content_struct["wp_page_parent_id"];		// Only set the menu_order if it was given.		if ( isset($content_struct["wp_page_order"]) )			$menu_order = $content_struct["wp_page_order"];		$post_author = $postdata["post_author"];		// Only set the post_author if one is set.		if ( isset($content_struct["wp_author_id"]) && ($user->ID != $content_struct["wp_author_id"]) ) {			switch ( $post_type ) {				case "post":					if ( !current_user_can("edit_others_posts") )						return(new IXR_Error(401, __("You are not allowed to change the post author as this user.")));					break;				case "page":					if ( !current_user_can("edit_others_pages") )						return(new IXR_Error(401, __("You are not allowed to change the page author as this user.")));					break;				default:					return(new IXR_Error(401, __("Invalid post type.")));					break;			}			$post_author = $content_struct["wp_author_id"];		}		if ( isset($content_struct["mt_allow_comments"]) ) {			if ( !is_numeric($content_struct["mt_allow_comments"]) ) {				switch ( $content_struct["mt_allow_comments"] ) {					case "closed":						$comment_status = "closed";						break;					case "open":						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_comments"] ) {					case 0:					case 2:						$comment_status = "closed";						break;					case 1:						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			}		}		if ( isset($content_struct["mt_allow_pings"]) ) {			if ( !is_numeric($content_struct["mt_allow_pings"]) ) {				switch ( $content_struct["mt_allow_pings"] ) {					case "closed":						$ping_status = "closed";						break;					case "open":						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_pings"] ) {					case 0:						$ping_status = "closed";						break;					case 1:						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			}		}		$post_title = $content_struct['title'];		$post_content = $content_struct['description'];		$catnames = $content_struct['categories'];		$post_category = array();		if ( is_array($catnames) ) {			foreach ($catnames as $cat) {		 		$post_category[] = get_cat_ID($cat);			}		}		$post_excerpt = $content_struct['mt_excerpt'];		$post_more = $content_struct['mt_text_more'];		$post_status = $publish ? 'publish' : 'draft';		if ( isset( $content_struct["{$post_type}_status"] ) ) {			switch( $content_struct["{$post_type}_status"] ) {				case 'draft':				case 'private':				case 'publish':					$post_status = $content_struct["{$post_type}_status"];					break;				case 'pending':					// Pending is only valid for posts, not pages.					if ( $post_type === 'post' )						$post_status = $content_struct["{$post_type}_status"];					break;				default:					$post_status = $publish ? 'publish' : 'draft';					break;			}		}		$tags_input = $content_struct['mt_keywords'];		if ( ('publish' == $post_status) ) {			if ( ( 'page' == $post_type ) && !current_user_can('publish_pages') )				return new IXR_Error(401, __('Sorry, you do not have the right to publish this page.'));			else if ( !current_user_can('publish_posts') )				return new IXR_Error(401, __('Sorry, you do not have the right to publish this post.'));		}		if ( $post_more )			$post_content = $post_content . "<!--more-->" . $post_more;		$to_ping = $content_struct['mt_tb_ping_urls'];		if ( is_array($to_ping) )			$to_ping = implode(' ', $to_ping);		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) )			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force		elseif ( !empty( $content_struct['dateCreated']) )			$dateCreated = $content_struct['dateCreated']->getIso();		if ( !empty( $dateCreated ) ) {			$post_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$post_date_gmt = iso8601_to_datetime($dateCreated, GMT);		} else {			$post_date     = $postdata['post_date'];			$post_date_gmt = $postdata['post_date_gmt'];		}		// We've got all the data -- post it:		$newpost = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'comment_status', 'ping_status', 'post_date', 'post_date_gmt', 'to_ping', 'post_name', 'post_password', 'post_parent', 'menu_order', 'post_author', 'tags_input', 'page_template');		$result = wp_update_post($newpost, true);		if ( is_wp_error( $result ) )			return new IXR_Error(500, $result->get_error_message());		if ( !$result )			return new IXR_Error(500, __('Sorry, your entry could not be edited. Something wrong happened.'));		// Only posts can be sticky		if ( $post_type == 'post' && isset( $content_struct['sticky'] ) ) {			if ( $content_struct['sticky'] == true )				stick_post( $post_ID );			elseif ( $content_struct['sticky'] == false )				unstick_post( $post_ID );		}		if ( isset($content_struct['custom_fields']) )			$this->set_custom_fields($post_ID, $content_struct['custom_fields']);		// Handle enclosures		$this->add_enclosure_if_new($post_ID, $content_struct['enclosure']);		$this->attach_uploads( $ID, $post_content );		logIO('O',"(MW) Edited ! ID: $post_ID");		return true;	}	/**	 * Retrieve post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this post.' ) );		do_action('xmlrpc_call', 'metaWeblog.getPost');		$postdata = wp_get_single_post($post_ID, ARRAY_A);		if ($postdata['post_date'] != '') {			$post_date = mysql2date('Ymd\TH:i:s', $postdata['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $postdata['post_date_gmt'], false);			// For drafts use the GMT version of the post date			if ( $postdata['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $postdata['post_date'] ), 'Ymd\TH:i:s' );			$categories = array();			$catids = wp_get_post_categories($post_ID);			foreach($catids as $catid)				$categories[] = get_cat_name($catid);			$tagnames = array();			$tags = wp_get_post_tags( $post_ID );			if ( !empty( $tags ) ) {				foreach ( $tags as $tag )					$tagnames[] = $tag->name;				$tagnames = implode( ', ', $tagnames );			} else {				$tagnames = '';			}			$post = get_extended($postdata['post_content']);			$link = post_permalink($postdata['ID']);			// Get the author info.			$author = get_userdata($postdata['post_author']);			$allow_comments = ('open' == $postdata['comment_status']) ? 1 : 0;			$allow_pings = ('open' == $postdata['ping_status']) ? 1 : 0;			// Consider future posts as published			if ( $postdata['post_status'] === 'future' )				$postdata['post_status'] = 'publish';			$sticky = false;			if ( is_sticky( $post_ID ) )				$sticky = true;			$enclosure = array();			foreach ( (array) get_post_custom($post_ID) as $key => $val) {				if ($key == 'enclosure') {					foreach ( (array) $val as $enc ) {						$encdata = split("\n", $enc);						$enclosure['url'] = trim(htmlspecialchars($encdata[0]));						$enclosure['length'] = (int) trim($encdata[1]);						$enclosure['type'] = trim($encdata[2]);						break 2;					}				}			}			$resp = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $postdata['post_author'],				'postid' => $postdata['ID'],				'description' => $post['main'],				'title' => $postdata['post_title'],				'link' => $link,				'permaLink' => $link,				// commented out because no other tool seems to use this				//	      'content' => $entry['post_content'],				'categories' => $categories,				'mt_excerpt' => $postdata['post_excerpt'],				'mt_text_more' => $post['extended'],				'mt_allow_comments' => $allow_comments,				'mt_allow_pings' => $allow_pings,				'mt_keywords' => $tagnames,				'wp_slug' => $postdata['post_name'],				'wp_password' => $postdata['post_password'],				'wp_author_id' => $author->ID,				'wp_author_display_name'	=> $author->display_name,				'date_created_gmt' => new IXR_Date($post_date_gmt),				'post_status' => $postdata['post_status'],				'custom_fields' => $this->get_custom_fields($post_ID),				'sticky' => $sticky			);			if ( !empty($enclosure) ) $resp['enclosure'] = $enclosure;			return $resp;		} else {			return new IXR_Error(404, __('Sorry, no such post.'));		}	}	/**	 * Retrieve list of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getRecentPosts($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$num_posts   = (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.getRecentPosts');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list )			return array( );		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $entry['post_date_gmt'], false);			// For drafts use the GMT version of the date			if ( $entry['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $entry['post_date'] ), 'Ymd\TH:i:s' );			$categories = array();			$catids = wp_get_post_categories($entry['ID']);			foreach( $catids as $catid )				$categories[] = get_cat_name($catid);			$tagnames = array();			$tags = wp_get_post_tags( $entry['ID'] );			if ( !empty( $tags ) ) {				foreach ( $tags as $tag ) {					$tagnames[] = $tag->name;				}				$tagnames = implode( ', ', $tagnames );			} else {				$tagnames = '';			}			$post = get_extended($entry['post_content']);			$link = post_permalink($entry['ID']);			// Get the post author info.			$author = get_userdata($entry['post_author']);			$allow_comments = ('open' == $entry['comment_status']) ? 1 : 0;			$allow_pings = ('open' == $entry['ping_status']) ? 1 : 0;			// Consider future posts as published			if ( $entry['post_status'] === 'future' )				$entry['post_status'] = 'publish';			$struct[] = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $entry['post_author'],				'postid' => $entry['ID'],				'description' => $post['main'],				'title' => $entry['post_title'],				'link' => $link,				'permaLink' => $link,				// commented out because no other tool seems to use this				// 'content' => $entry['post_content'],				'categories' => $categories,				'mt_excerpt' => $entry['post_excerpt'],				'mt_text_more' => $post['extended'],				'mt_allow_comments' => $allow_comments,				'mt_allow_pings' => $allow_pings,				'mt_keywords' => $tagnames,				'wp_slug' => $entry['post_name'],				'wp_password' => $entry['post_password'],				'wp_author_id' => $author->ID,				'wp_author_display_name' => $author->display_name,				'date_created_gmt' => new IXR_Date($post_date_gmt),				'post_status' => $entry['post_status'],				'custom_fields' => $this->get_custom_fields($entry['ID'])			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve the list of categories on a given blog.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getCategories($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view categories.' ) );		do_action('xmlrpc_call', 'metaWeblog.getCategories');		$categories_struct = array();		if ( $cats = get_categories(array('get' => 'all')) ) {			foreach ( $cats as $cat ) {				$struct['categoryId'] = $cat->term_id;				$struct['parentId'] = $cat->parent;				$struct['description'] = $cat->name;				$struct['categoryDescription'] = $cat->description;				$struct['categoryName'] = $cat->name;				$struct['htmlUrl'] = esc_html(get_category_link($cat->term_id));				$struct['rssUrl'] = esc_html(get_category_feed_link($cat->term_id, 'rss2'));				$categories_struct[] = $struct;			}		}		return $categories_struct;	}	/**	 * Uploads a file, following your settings.	 *	 * Adapted from a patch by Johann Richard.	 *	 * @link http://mycvs.org/archives/2004/06/30/file-upload-to-wordpress-in-ecto/	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_newMediaObject($args) {		global $wpdb;		$blog_ID     = (int) $args[0];		$username  = $wpdb->escape($args[1]);		$password   = $wpdb->escape($args[2]);		$data        = $args[3];		$name = sanitize_file_name( $data['name'] );		$type = $data['type'];		$bits = $data['bits'];		logIO('O', '(MW) Received '.strlen($bits).' bytes');		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.newMediaObject');		if ( !current_user_can('upload_files') ) {			logIO('O', '(MW) User does not have upload_files capability');			$this->error = new IXR_Error(401, __('You are not allowed to upload files to this site.'));			return $this->error;		}		if ( $upload_err = apply_filters( "pre_upload_error", false ) )			return new IXR_Error(500, $upload_err);		if ( !empty($data["overwrite"]) && ($data["overwrite"] == true) ) {			// Get postmeta info on the object.			$old_file = $wpdb->get_row("				SELECT ID				FROM {$wpdb->posts}				WHERE post_title = '{$name}'					AND post_type = 'attachment'			");			// Delete previous file.			wp_delete_attachment($old_file->ID);			// Make sure the new name is different by pre-pending the			// previous post id.			$filename = preg_replace("/^wpid\d+-/", "", $name);			$name = "wpid{$old_file->ID}-{$filename}";		}		$upload = wp_upload_bits($name, $type, $bits);		if ( ! empty($upload['error']) ) {			$errorString = sprintf(__('Could not write file %1$s (%2$s)'), $name, $upload['error']);			logIO('O', '(MW) ' . $errorString);			return new IXR_Error(500, $errorString);		}		// Construct the attachment array		// attach to post_id 0		$post_id = 0;		$attachment = array(			'post_title' => $name,			'post_content' => '',			'post_type' => 'attachment',			'post_parent' => $post_id,			'post_mime_type' => $type,			'guid' => $upload[ 'url' ]		);		// Save the data		$id = wp_insert_attachment( $attachment, $upload[ 'file' ], $post_id );		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $upload['file'] ) );		return apply_filters( 'wp_handle_upload', array( 'file' => $name, 'url' => $upload[ 'url' ], 'type' => $type ), 'upload' );	}	/* MovableType API functions	 * specs on http://www.movabletype.org/docs/mtmanual_programmatic.html	 */	/**	 * Retrieve the post titles of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getRecentPostTitles($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$num_posts   = (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.getRecentPostTitles');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list ) {			$this->error = new IXR_Error(500, __('Either there are no posts, or something went wrong.'));			return $this->error;		}		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $entry['post_date_gmt'], false);			// For drafts use the GMT version of the date			if ( $entry['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $entry['post_date'] ), 'Ymd\TH:i:s' );			$struct[] = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $entry['post_author'],				'postid' => $entry['ID'],				'title' => $entry['post_title'],				'date_created_gmt' => new IXR_Date($post_date_gmt)			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve list of all categories on blog.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getCategoryList($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view categories.' ) );		do_action('xmlrpc_call', 'mt.getCategoryList');		$categories_struct = array();		if ( $cats = get_categories(array('hide_empty' => 0, 'hierarchical' => 0)) ) {			foreach ( $cats as $cat ) {				$struct['categoryId'] = $cat->term_id;				$struct['categoryName'] = $cat->name;				$categories_struct[] = $struct;			}		}		return $categories_struct;	}	/**	 * Retrieve post categories.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getPostCategories($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you can not edit this post.' ) );		do_action('xmlrpc_call', 'mt.getPostCategories');		$categories = array();		$catids = wp_get_post_categories(intval($post_ID));		// first listed category will be the primary category		$isPrimary = true;		foreach ( $catids as $catid ) {			$categories[] = array(				'categoryName' => get_cat_name($catid),				'categoryId' => (string) $catid,				'isPrimary' => $isPrimary			);			$isPrimary = false;		}		return $categories;	}	/**	 * Sets categories for a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True on success.	 */	function mt_setPostCategories($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$categories  = $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.setPostCategories');		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you cannot edit this post.'));		foreach ( $categories as $cat ) {			$catids[] = $cat['categoryId'];		}		wp_set_post_categories($post_ID, $catids);		return true;	}	/**	 * Retrieve an array of methods supported by this server.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_supportedMethods($args) {		do_action('xmlrpc_call', 'mt.supportedMethods');		$supported_methods = array();		foreach ( $this->methods as $key => $value ) {			$supported_methods[] = $key;		}		return $supported_methods;	}	/**	 * Retrieve an empty array because we don't support per-post text filters.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 */	function mt_supportedTextFilters($args) {		do_action('xmlrpc_call', 'mt.supportedTextFilters');		return apply_filters('xmlrpc_text_filters', array());	}	/**	 * Retrieve trackbacks sent to a given post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return mixed	 */	function mt_getTrackbackPings($args) {		global $wpdb;		$post_ID = intval($args);		do_action('xmlrpc_call', 'mt.getTrackbackPings');		$actual_post = wp_get_single_post($post_ID, ARRAY_A);		if ( !$actual_post )			return new IXR_Error(404, __('Sorry, no such post.'));		$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_author_url, comment_content, comment_author_IP, comment_type FROM $wpdb->comments WHERE comment_post_ID = %d", $post_ID) );		if ( !$comments )			return array();		$trackback_pings = array();		foreach ( $comments as $comment ) {			if ( 'trackback' == $comment->comment_type ) {				$content = $comment->comment_content;				$title = substr($content, 8, (strpos($content, '</strong>') - 8));				$trackback_pings[] = array(					'pingTitle' => $title,					'pingURL'   => $comment->comment_author_url,					'pingIP'    => $comment->comment_author_IP				);			}		}		return $trackback_pings;	}	/**	 * Sets a post's publish status to 'publish'.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function mt_publishPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.publishPost');		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you cannot edit this post.'));		$postdata = wp_get_single_post($post_ID,ARRAY_A);		$postdata['post_status'] = 'publish';		// retain old cats		$cats = wp_get_post_categories($post_ID);		$postdata['post_category'] = $cats;		$this->escape($postdata);		$result = wp_update_post($postdata);		return $result;	}	/* PingBack functions	 * specs on www.hixie.ch/specs/pingback/pingback	 */	/**	 * Retrieves a pingback and registers it.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function pingback_ping($args) {		global $wpdb;		do_action('xmlrpc_call', 'pingback.ping');		$this->escape($args);		$pagelinkedfrom = $args[0];		$pagelinkedto   = $args[1];		$title = '';		$pagelinkedfrom = str_replace('&amp;', '&', $pagelinkedfrom);		$pagelinkedto = str_replace('&amp;', '&', $pagelinkedto);		$pagelinkedto = str_replace('&', '&amp;', $pagelinkedto);		// Check if the page linked to is in our site		$pos1 = strpos($pagelinkedto, str_replace(array('http://www.','http://','https://www.','https://'), '', get_option('home')));		if ( !$pos1 )			return new IXR_Error(0, __('Is there no link to us?'));		// let's find which post is linked to		// FIXME: does url_to_postid() cover all these cases already?		//        if so, then let's use it and drop the old code.		$urltest = parse_url($pagelinkedto);		if ( $post_ID = url_to_postid($pagelinkedto) ) {			$way = 'url_to_postid()';		} elseif ( preg_match('#p/[0-9]{1,}#', $urltest['path'], $match) ) {			// the path defines the post_ID (archives/p/XXXX)			$blah = explode('/', $match[0]);			$post_ID = (int) $blah[1];			$way = 'from the path';		} elseif ( preg_match('#p=[0-9]{1,}#', $urltest['query'], $match) ) {			// the querystring defines the post_ID (?p=XXXX)			$blah = explode('=', $match[0]);			$post_ID = (int) $blah[1];			$way = 'from the querystring';		} elseif ( isset($urltest['fragment']) ) {			// an #anchor is there, it's either...			if ( intval($urltest['fragment']) ) {				// ...an integer #XXXX (simpliest case)				$post_ID = (int) $urltest['fragment'];				$way = 'from the fragment (numeric)';			} elseif ( preg_match('/post-[0-9]+/',$urltest['fragment']) ) {				// ...a post id in the form 'post-###'				$post_ID = preg_replace('/[^0-9]+/', '', $urltest['fragment']);				$way = 'from the fragment (post-###)';			} elseif ( is_string($urltest['fragment']) ) {				// ...or a string #title, a little more complicated				$title = preg_replace('/[^a-z0-9]/i', '.', $urltest['fragment']);				$sql = $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_title RLIKE %s", $title);				if (! ($post_ID = $wpdb->get_var($sql)) ) {					// returning unknown error '0' is better than die()ing			  		return new IXR_Error(0, '');				}				$way = 'from the fragment (title)';			}		} else {			// TODO: Attempt to extract a post ID from the given URL	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		}		$post_ID = (int) $post_ID;		logIO("O","(PB) URL='$pagelinkedto' ID='$post_ID' Found='$way'");		$post = get_post($post_ID);		if ( !$post ) // Post_ID not found	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		if ( $post_ID == url_to_postid($pagelinkedfrom) )			return new IXR_Error(0, __('The source URL and the target URL cannot both point to the same resource.'));		// Check if pings are on		if ( !pings_open($post) )	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		// Let's check that the remote site didn't already pingback this entry		if ( $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $post_ID, $pagelinkedfrom) ) )			return new IXR_Error( 48, __( 'The pingback has already been registered.' ) );		// very stupid, but gives time to the 'from' server to publish !		sleep(1);		// Let's check the remote site		$linea = wp_remote_fopen( $pagelinkedfrom );		if ( !$linea )	  		return new IXR_Error(16, __('The source URL does not exist.'));		$linea = apply_filters('pre_remote_source', $linea, $pagelinkedto);		// Work around bug in strip_tags():		$linea = str_replace('<!DOC', '<DOC', $linea);		$linea = preg_replace( '/[\s\r\n\t]+/', ' ', $linea ); // normalize spaces		$linea = preg_replace( "/ <(h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body)[^>]*>/", "\n\n", $linea );		preg_match('|<title>([^<]*?)</title>|is', $linea, $matchtitle);		$title = $matchtitle[1];		if ( empty( $title ) )			return new IXR_Error(32, __('We cannot find a title on that page.'));		$linea = strip_tags( $linea, '<a>' ); // just keep the tag we need		$p = explode( "\n\n", $linea );		$preg_target = preg_quote($pagelinkedto, '|');		foreach ( $p as $para ) {			if ( strpos($para, $pagelinkedto) !== false ) { // it exists, but is it a link?				preg_match("|<a[^>]+?".$preg_target."[^>]*>([^>]+?)</a>|", $para, $context);				// If the URL isn't in a link context, keep looking				if ( empty($context) )					continue;				// We're going to use this fake tag to mark the context in a bit				// the marker is needed in case the link text appears more than once in the paragraph				$excerpt = preg_replace('|\</?wpcontext\>|', '', $para);				// prevent really long link text				if ( strlen($context[1]) > 100 )					$context[1] = substr($context[1], 0, 100) . '...';				$marker = '<wpcontext>'.$context[1].'</wpcontext>';    // set up our marker				$excerpt= str_replace($context[0], $marker, $excerpt); // swap out the link for our marker				$excerpt = strip_tags($excerpt, '<wpcontext>');        // strip all tags but our context marker				$excerpt = trim($excerpt);				$preg_marker = preg_quote($marker, '|');				$excerpt = preg_replace("|.*?\s(.{0,100}$preg_marker.{0,100})\s.*|s", '$1', $excerpt);				$excerpt = strip_tags($excerpt); // YES, again, to remove the marker wrapper				break;			}		}		if ( empty($context) ) // Link to target not found			return new IXR_Error(17, __('The source URL does not contain a link to the target URL, and so cannot be used as a source.'));		$pagelinkedfrom = str_replace('&', '&amp;', $pagelinkedfrom);		$context = '[...] ' . esc_html( $excerpt ) . ' [...]';		$pagelinkedfrom = $wpdb->escape( $pagelinkedfrom );		$comment_post_ID = (int) $post_ID;		$comment_author = $title;		$this->escape($comment_author);		$comment_author_url = $pagelinkedfrom;		$comment_content = $context;		$this->escape($comment_content);		$comment_type = 'pingback';		$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_url', 'comment_content', 'comment_type');		$comment_ID = wp_new_comment($commentdata);		do_action('pingback_post', $comment_ID);		return sprintf(__('Pingback from %1$s to %2$s registered. Keep the web talking! :-)'), $pagelinkedfrom, $pagelinkedto);	}	/**	 * Retrieve array of URLs that pingbacked the given URL.	 *	 * Specs on http://www.aquarionics.com/misc/archives/blogite/0198.html	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function pingback_extensions_getPingbacks($args) {		global $wpdb;		do_action('xmlrpc_call', 'pingback.extensions.getPingbacks');		$this->escape($args);		$url = $args;		$post_ID = url_to_postid($url);		if ( !$post_ID ) {			// We aren't sure that the resource is available and/or pingback enabled	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		}		$actual_post = wp_get_single_post($post_ID, ARRAY_A);		if ( !$actual_post ) {			// No such post = resource not found	  		return new IXR_Error(32, __('The specified target URL does not exist.'));		}		$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_author_url, comment_content, comment_author_IP, comment_type FROM $wpdb->comments WHERE comment_post_ID = %d", $post_ID) );		if ( !$comments )			return array();		$pingbacks = array();		foreach ( $comments as $comment ) {			if ( 'pingback' == $comment->comment_type )				$pingbacks[] = $comment->comment_author_url;		}		return $pingbacks;	}}$wp_xmlrpc_server = new wp_xmlrpc_server();$wp_xmlrpc_server->serve_request();?>
<?php/** * Classes, which help reading streams of data from files. * Based on the classes from Danilo Segan <danilo@kvota.net> * * @version $Id: streams.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage streams */if ( !class_exists( 'POMO_Reader' ) ):class POMO_Reader {	var $endian = 'little';	var $_post = '';	function POMO_Reader() {		$this->is_overloaded = ((ini_get("mbstring.func_overload") & 2) != 0) && function_exists('mb_substr');		$this->_pos = 0;	}	/**	 * Sets the endianness of the file.	 *	 * @param $endian string 'big' or 'little'	 */	function setEndian($endian) {		$this->endian = $endian;	}	/**	 * Reads a 32bit Integer from the Stream	 *	 * @return mixed The integer, corresponding to the next 32 bits from	 * 	the stream of false if there are not enough bytes or on error	 */	function readint32() {		$bytes = $this->read(4);		if (4 != $this->strlen($bytes))			return false;		$endian_letter = ('big' == $this->endian)? 'N' : 'V';		$int = unpack($endian_letter, $bytes);		return array_shift($int);	}	/**	 * Reads an array of 32-bit Integers from the Stream	 *	 * @param integer count How many elements should be read	 * @return mixed Array of integers or false if there isn't	 * 	enough data or on error	 */	function readint32array($count) {		$bytes = $this->read(4 * $count);		if (4*$count != $this->strlen($bytes))			return false;		$endian_letter = ('big' == $this->endian)? 'N' : 'V';		return unpack($endian_letter.$count, $bytes);	}	function substr($string, $start, $length) {		if ($this->is_overloaded) {			return mb_substr($string, $start, $length, 'ascii');		} else {			return substr($string, $start, $length);		}	}	function strlen($string) {		if ($this->is_overloaded) {			return mb_strlen($string, 'ascii');		} else {			return strlen($string);		}	}	function str_split($string, $chunk_size) {		if (!function_exists('str_split')) {			$length = $this->strlen($string);			$out = array();			for ($i = 0; $i < $length; $i += $chunk_size)				$out[] = $this->substr($string, $i, $chunk_size);			return $out;		} else {			return str_split( $string, $chunk_size );		}	}	function pos() {		return $this->_pos;	}	function is_resource() {		return true;	}	function close() {		return true;	}}endif;if ( !class_exists( 'POMO_FileReader' ) ):class POMO_FileReader extends POMO_Reader {	function POMO_FileReader($filename) {		parent::POMO_Reader();		$this->_f = fopen($filename, 'r');	}	function read($bytes) {		return fread($this->_f, $bytes);	}	function seekto($pos) {		if ( -1 == fseek($this->_f, $pos, SEEK_SET)) {			return false;		}		$this->_pos = $pos;		return true;	}	function is_resource() {		return is_resource($this->_f);	}	function feof() {		return feof($this->_f);	}	function close() {		return fclose($this->_f);	}	function read_all() {		$all = '';		while ( !$this->feof() )			$all .= $this->read(4096);		return $all;	}}endif;if ( !class_exists( 'POMO_StringReader' ) ):/** * Provides file-like methods for manipulating a string instead * of a physical file. */class POMO_StringReader extends POMO_Reader {	var $_str = '';	function POMO_StringReader($str = '') {		parent::POMO_Reader();		$this->_str = $str;		$this->_pos = 0;	}	function read($bytes) {		$data = $this->substr($this->_str, $this->_pos, $bytes);		$this->_pos += $bytes;		if ($this->strlen($this->_str) < $this->_pos) $this->_pos = $this->strlen($this->_str);		return $data;	}	function seekto($pos) {		$this->_pos = $pos;		if ($this->strlen($this->_str) < $this->_pos) $this->_pos = $this->strlen($this->_str);		return $this->_pos;	}	function length() {		return $this->strlen($this->_str);	}	function read_all() {		return $this->substr($this->_str, $this->_pos, $this->strlen($this->_str));	}}endif;if ( !class_exists( 'POMO_CachedFileReader' ) ):/** * Reads the contents of the file in the beginning. */class POMO_CachedFileReader extends POMO_StringReader {	function POMO_CachedFileReader($filename) {		parent::POMO_StringReader();		$this->_str = file_get_contents($filename);		if (false === $this->_str)			return false;		$this->_pos = 0;	}}endif;if ( !class_exists( 'POMO_CachedIntFileReader' ) ):/** * Reads the contents of the file in the beginning. */class POMO_CachedIntFileReader extends POMO_CachedFileReader {	function POMO_CachedIntFileReader($filename) {		parent::POMO_CachedFileReader($filename);	}}endif;
<?php/** * Used to be the page which displayed the registration form. * * This file is no longer used in WordPress and is * deprecated. * * @package WordPress * @deprecated Use wp_register() to create a registration link instead */require('./wp-load.php');wp_redirect('wp-login.php?action=register');?>
<?php/** * Base WordPress Filesystem. * * @package WordPress * @subpackage Filesystem *//** * Base WordPress Filesystem class for which Filesystem implementations extend * * @since 2.5 */class WP_Filesystem_Base {	/**	 * Whether to display debug data for the connection.	 *	 * @since 2.5	 * @access public	 * @var bool	 */	var $verbose = false;	/**	 * Cached list of local filepaths to maped remote filepaths.	 *	 * @since 2.7	 * @access private	 * @var array	 */	var $cache = array();	/**	 * The Access method of the current connection, Set automatically.	 *	 * @since 2.5	 * @access public	 * @var string	 */	var $method = '';	/**	 * Returns the path on the remote filesystem of ABSPATH	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function abspath() {		$folder = $this->find_folder(ABSPATH);		//Perhaps the FTP folder is rooted at the WordPress install, Check for wp-includes folder in root, Could have some false positives, but rare.		if ( ! $folder && $this->is_dir('/wp-includes') )			$folder = '/';		return $folder;	}	/**	 * Returns the path on the remote filesystem of WP_CONTENT_DIR	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function wp_content_dir() {		return $this->find_folder(WP_CONTENT_DIR);	}	/**	 * Returns the path on the remote filesystem of WP_PLUGIN_DIR	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_plugins_dir() {		return $this->find_folder(WP_PLUGIN_DIR);	}	/**	 * Returns the path on the remote filesystem of the Themes Directory	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_themes_dir() {		return $this->wp_content_dir() . '/themes';	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function find_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function get_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Assumes that on Windows systems, Stripping off the Drive letter is OK	 * Sanitizes \\ to / in windows filepaths.	 *	 * @since 2.7	 * @access public	 *	 * @param string $folder the folder to locate	 * @return string The location of the remote path.	 */	function find_folder($folder) {		if ( strpos($this->method, 'ftp') !== false ) {			$constant_overrides = array( 'FTP_BASE' => ABSPATH, 'FTP_CONTENT_DIR' => WP_CONTENT_DIR, 'FTP_PLUGIN_DIR' => WP_PLUGIN_DIR );			foreach ( $constant_overrides as $constant => $dir )				if ( defined($constant) && $folder === $dir )					return trailingslashit(constant($constant));		} elseif ( 'direct' == $this->method ) {			$folder = str_replace('\\', '/', $folder); //Windows path sanitiation			return trailingslashit($folder);		}		$folder = preg_replace('|^([a-z]{1}):|i', '', $folder); //Strip out windows driveletter if its there.		$folder = str_replace('\\', '/', $folder); //Windows path sanitiation		if ( isset($this->cache[ $folder ] ) )			return $this->cache[ $folder ];		if ( $this->exists($folder) ) { //Folder exists at that absolute path.			$folder = trailingslashit($folder);			$this->cache[ $folder ] = $folder;			return $folder;		}		if ( $return = $this->search_for_folder($folder) )			$this->cache[ $folder ] = $return;		return $return;	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Expects Windows sanitized path	 *	 * @since 2.7	 * @access private	 *	 * @param string $folder the folder to locate	 * @param string $base the folder to start searching from	 * @param bool $loop if the function has recursed, Internal use only	 * @return string The location of the remote path.	 */	function search_for_folder($folder, $base = '.', $loop = false ) {		if ( empty( $base ) || '.' == $base )			$base = trailingslashit($this->cwd());		$folder = untrailingslashit($folder);		$folder_parts = explode('/', $folder);		$last_path = $folder_parts[ count($folder_parts) - 1 ];		$files = $this->dirlist( $base );		foreach ( $folder_parts as $key ) {			if ( $key == $last_path )				continue; //We want this to be caught by the next code block.			//Working from /home/ to /user/ to /wordpress/ see if that file exists within the current folder,			// If its found, change into it and follow through looking for it.			// If it cant find WordPress down that route, it'll continue onto the next folder level, and see if that matches, and so on.			// If it reaches the end, and still cant find it, it'll return false for the entire function.			if ( isset($files[ $key ]) ){				//Lets try that folder:				$newdir = trailingslashit(path_join($base, $key));				if ( $this->verbose )					printf( __('Changing to %s') . '<br/>', $newdir );				if ( $ret = $this->search_for_folder( $folder, $newdir, $loop) )					return $ret;			}		}		//Only check this as a last resort, to prevent locating the incorrect install. All above proceeedures will fail quickly if this is the right branch to take.		if (isset( $files[ $last_path ] ) ) {			if ( $this->verbose )				printf( __('Found %s') . '<br/>',  $base . $last_path );			return trailingslashit($base . $last_path);		}		if ( $loop )			return false; //Prevent tihs function looping again.		//As an extra last resort, Change back to / if the folder wasnt found. This comes into effect when the CWD is /home/user/ but WP is at /var/www/.... mainly dedicated setups.		return $this->search_for_folder($folder, '/', true);	}	/**	 * Returns the *nix style file permissions for a file	 *	 * From the PHP documentation page for fileperms()	 *	 * @link http://docs.php.net/fileperms	 * @since 2.5	 * @access public	 *	 * @param string $file string filename	 * @return int octal representation of permissions	 */	function gethchmod($file){		$perms = $this->getchmod($file);		if (($perms & 0xC000) == 0xC000) // Socket			$info = 's';		elseif (($perms & 0xA000) == 0xA000) // Symbolic Link			$info = 'l';		elseif (($perms & 0x8000) == 0x8000) // Regular			$info = '-';		elseif (($perms & 0x6000) == 0x6000) // Block special			$info = 'b';		elseif (($perms & 0x4000) == 0x4000) // Directory			$info = 'd';		elseif (($perms & 0x2000) == 0x2000) // Character special			$info = 'c';		elseif (($perms & 0x1000) == 0x1000) // FIFO pipe			$info = 'p';		else // Unknown			$info = 'u';		// Owner		$info .= (($perms & 0x0100) ? 'r' : '-');		$info .= (($perms & 0x0080) ? 'w' : '-');		$info .= (($perms & 0x0040) ?					(($perms & 0x0800) ? 's' : 'x' ) :					(($perms & 0x0800) ? 'S' : '-'));		// Group		$info .= (($perms & 0x0020) ? 'r' : '-');		$info .= (($perms & 0x0010) ? 'w' : '-');		$info .= (($perms & 0x0008) ?					(($perms & 0x0400) ? 's' : 'x' ) :					(($perms & 0x0400) ? 'S' : '-'));		// World		$info .= (($perms & 0x0004) ? 'r' : '-');		$info .= (($perms & 0x0002) ? 'w' : '-');		$info .= (($perms & 0x0001) ?					(($perms & 0x0200) ? 't' : 'x' ) :					(($perms & 0x0200) ? 'T' : '-'));		return $info;	}	/**	 * Converts *nix style file permissions to a octal number.	 *	 * Converts '-rw-r--r--' to 0644	 * From "info at rvgate dot nl"'s comment on the PHP documentation for chmod() 	 *	 * @link http://docs.php.net/manual/en/function.chmod.php#49614	 * @since 2.5	 * @access public	 *	 * @param string $mode string *nix style file permission	 * @return int octal representation	 */	function getnumchmodfromh($mode) {		$realmode = '';		$legal =  array('', 'w', 'r', 'x', '-');		$attarray = preg_split('//', $mode);		for ($i=0; $i < count($attarray); $i++)		   if ($key = array_search($attarray[$i], $legal))			   $realmode .= $legal[$key];		$mode = str_pad($realmode, 9, '-');		$trans = array('-'=>'0', 'r'=>'4', 'w'=>'2', 'x'=>'1');		$mode = strtr($mode,$trans);		$newmode = '';		$newmode .= $mode[0] + $mode[1] + $mode[2];		$newmode .= $mode[3] + $mode[4] + $mode[5];		$newmode .= $mode[6] + $mode[7] + $mode[8];		return $newmode;	}	/**	 * Determines if the string provided contains binary characters.	 *	 * @since 2.7	 * @access private	 *	 * @param string $text String to test against	 * @return bool true if string is binary, false otherwise	 */	function is_binary( $text ) {		return (bool) preg_match('|[^\x20-\x7E]|', $text); //chr(32)..chr(127)	}}?>
<?php/** * RSS2 Feed Template for displaying RSS2 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"	<?php do_action('rss2_ns'); ?>><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<language><?php echo get_option('rss_language'); ?></language>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('rss2_head'); ?>	<?php while( have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<link><?php the_permalink_rss() ?></link>		<comments><?php comments_link_feed(); ?></comments>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false); ?></pubDate>		<dc:creator><?php the_author() ?></dc:creator>		<?php the_category_rss() ?>		<guid isPermaLink="false"><?php the_guid(); ?></guid><?php if (get_option('rss_use_excerpt')) : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description><?php else : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>	<?php if ( strlen( $post->post_content ) > 0 ) : ?>		<content:encoded><![CDATA[<?php the_content_feed('rss2') ?>]]></content:encoded>	<?php else : ?>		<content:encoded><![CDATA[<?php the_excerpt_rss() ?>]]></content:encoded>	<?php endif; ?><?php endif; ?>		<wfw:commentRss><?php echo esc_url( get_post_comments_feed_link(null, 'rss2') ); ?></wfw:commentRss>		<slash:comments><?php echo get_comments_number(); ?></slash:comments><?php rss_enclosure(); ?>	<?php do_action('rss2_item'); ?>	</item>	<?php endwhile; ?></channel></rss>
<?php/** * RSS 0.92 Feed Template for displaying RSS 0.92 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="0.92"><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<docs>http://backend.userland.com/rss092</docs>	<language><?php echo get_option('rss_language'); ?></language>	<?php do_action('rss_head'); ?><?php while (have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>		<link><?php the_permalink_rss() ?></link>		<?php do_action('rss_item'); ?>	</item><?php endwhile; ?></channel></rss>
<?php/** * User Registration API * * @package WordPress *//** * Checks whether the given username exists. * * @since 2.0.0 * * @param string $username Username. * @return null|int The user's ID on success, and null on failure. */function username_exists( $username ) {	if ( $user = get_userdatabylogin( $username ) ) {		return $user->ID;	} else {		return null;	}}/** * Checks whether the given email exists. * * @since 2.1.0 * @uses $wpdb * * @param string $email Email. * @return bool|int The user's ID on success, and false on failure. */function email_exists( $email ) {	if ( $user = get_user_by_email($email) )		return $user->ID;	return false;}/** * Checks whether an username is valid. * * @since 2.0.1 * @uses apply_filters() Calls 'validate_username' hook on $valid check and $username as parameters * * @param string $username Username. * @return bool Whether username given is valid */function validate_username( $username ) {	$sanitized = sanitize_user( $username, true );	$valid = ( $sanitized == $username );	return apply_filters( 'validate_username', $valid, $username );}/** * Insert an user into the database. * * Can update a current user or insert a new user based on whether the user's ID * is present. * * Can be used to update the user's info (see below), set the user's role, and * set the user's preference on whether they want the rich editor on. * * Most of the $userdata array fields have filters associated with the values. * The exceptions are 'rich_editing', 'role', 'jabber', 'aim', 'yim', * 'user_registered', and 'ID'. The filters have the prefix 'pre_user_' followed * by the field name. An example using 'description' would have the filter * called, 'pre_user_description' that can be hooked into. * * The $userdata array can contain the following fields: * 'ID' - An integer that will be used for updating an existing user. * 'user_pass' - A string that contains the plain text password for the user. * 'user_login' - A string that contains the user's username for logging in. * 'user_nicename' - A string that contains a nicer looking name for the user. *		The default is the user's username. * 'user_url' - A string containing the user's URL for the user's web site. * 'user_email' - A string containing the user's email address. * 'display_name' - A string that will be shown on the site. Defaults to user's *		username. It is likely that you will want to change this, for both *		appearance and security through obscurity (that is if you don't use and *		delete the default 'admin' user). * 'nickname' - The user's nickname, defaults to the user's username. * 'first_name' - The user's first name. * 'last_name' - The user's last name. * 'description' - A string containing content about the user. * 'rich_editing' - A string for whether to enable the rich editor. False *		if not empty. * 'user_registered' - The date the user registered. Format is 'Y-m-d H:i:s'. * 'role' - A string used to set the user's role. * 'jabber' - User's Jabber account. * 'aim' - User's AOL IM account. * 'yim' - User's Yahoo IM account. * * @since 2.0.0 * @uses $wpdb WordPress database layer. * @uses apply_filters() Calls filters for most of the $userdata fields with the prefix 'pre_user'. See note above. * @uses do_action() Calls 'profile_update' hook when updating giving the user's ID * @uses do_action() Calls 'user_register' hook when creating a new user giving the user's ID * * @param array $userdata An array of user data. * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not be created. */function wp_insert_user($userdata) {	global $wpdb;	extract($userdata, EXTR_SKIP);	// Are we updating or creating?	if ( !empty($ID) ) {		$ID = (int) $ID;		$update = true;		$old_user_data = get_userdata($ID);	} else {		$update = false;		// Hash the password		$user_pass = wp_hash_password($user_pass);	}	$user_login = sanitize_user($user_login, true);	$user_login = apply_filters('pre_user_login', $user_login);	//Remove any non-printable chars from the login string to see if we have ended up with an empty username	$user_login = trim($user_login);	if ( empty($user_login) )		return new WP_Error('empty_user_login', __('Cannot create a user with an empty login name.') );	if ( !$update && username_exists( $user_login ) )		return new WP_Error('existing_user_login', __('This username is already registered.') );	if ( empty($user_nicename) )		$user_nicename = sanitize_title( $user_login );	$user_nicename = apply_filters('pre_user_nicename', $user_nicename);	if ( empty($user_url) )		$user_url = '';	$user_url = apply_filters('pre_user_url', $user_url);	if ( empty($user_email) )		$user_email = '';	$user_email = apply_filters('pre_user_email', $user_email);	if ( !$update && ! defined( 'WP_IMPORTING' ) && email_exists($user_email) )		return new WP_Error('existing_user_email', __('This email address is already registered.') );	if ( empty($display_name) )		$display_name = $user_login;	$display_name = apply_filters('pre_user_display_name', $display_name);	if ( empty($nickname) )		$nickname = $user_login;	$nickname = apply_filters('pre_user_nickname', $nickname);	if ( empty($first_name) )		$first_name = '';	$first_name = apply_filters('pre_user_first_name', $first_name);	if ( empty($last_name) )		$last_name = '';	$last_name = apply_filters('pre_user_last_name', $last_name);	if ( empty($description) )		$description = '';	$description = apply_filters('pre_user_description', $description);	if ( empty($rich_editing) )		$rich_editing = 'true';	if ( empty($comment_shortcuts) )		$comment_shortcuts = 'false';	if ( empty($admin_color) )		$admin_color = 'fresh';	$admin_color = preg_replace('|[^a-z0-9 _.\-@]|i', '', $admin_color);	if ( empty($use_ssl) )		$use_ssl = 0;	if ( empty($user_registered) )		$user_registered = gmdate('Y-m-d H:i:s');	$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $user_nicename, $user_login));	if ( $user_nicename_check ) {		$suffix = 2;		while ($user_nicename_check) {			$alt_user_nicename = $user_nicename . "-$suffix";			$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $alt_user_nicename, $user_login));			$suffix++;		}		$user_nicename = $alt_user_nicename;	}	$data = compact( 'user_pass', 'user_email', 'user_url', 'user_nicename', 'display_name', 'user_registered' );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->users, $data, compact( 'ID' ) );		$user_id = (int) $ID;	} else {		$wpdb->insert( $wpdb->users, $data + compact( 'user_login' ) );		$user_id = (int) $wpdb->insert_id;	}	update_user_meta( $user_id, 'first_name', $first_name);	update_user_meta( $user_id, 'last_name', $last_name);	update_user_meta( $user_id, 'nickname', $nickname );	update_user_meta( $user_id, 'description', $description );	update_user_meta( $user_id, 'rich_editing', $rich_editing);	update_user_meta( $user_id, 'comment_shortcuts', $comment_shortcuts);	update_user_meta( $user_id, 'admin_color', $admin_color);	update_user_meta( $user_id, 'use_ssl', $use_ssl);	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( empty($$method) )			$$method = '';		update_user_meta( $user_id, $method, $$method );	}	if ( isset($role) ) {		$user = new WP_User($user_id);		$user->set_role($role);	} elseif ( !$update ) {		$user = new WP_User($user_id);		$user->set_role(get_option('default_role'));	}	wp_cache_delete($user_id, 'users');	wp_cache_delete($user_login, 'userlogins');	if ( $update )		do_action('profile_update', $user_id, $old_user_data);	else		do_action('user_register', $user_id);	return $user_id;}/** * Update an user in the database. * * It is possible to update a user's password by specifying the 'user_pass' * value in the $userdata parameter array. * * If $userdata does not contain an 'ID' key, then a new user will be created * and the new user's ID will be returned. * * If current user's password is being updated, then the cookies will be * cleared. * * @since 2.0.0 * @see wp_insert_user() For what fields can be set in $userdata * @uses wp_insert_user() Used to update existing user or add new one if user doesn't exist already * * @param array $userdata An array of user data. * @return int The updated user's ID. */function wp_update_user($userdata) {	$ID = (int) $userdata['ID'];	// First, get all of the original fields	$user = get_userdata($ID);	// Escape data pulled from DB.	$user = add_magic_quotes(get_object_vars($user));	// If password is changing, hash it now.	if ( ! empty($userdata['user_pass']) ) {		$plaintext_pass = $userdata['user_pass'];		$userdata['user_pass'] = wp_hash_password($userdata['user_pass']);	}	wp_cache_delete($user[ 'user_email' ], 'useremail');	// Merge old and new fields with new fields overwriting old ones.	$userdata = array_merge($user, $userdata);	$user_id = wp_insert_user($userdata);	// Update the cookies if the password changed.	$current_user = wp_get_current_user();	if ( $current_user->id == $ID ) {		if ( isset($plaintext_pass) ) {			wp_clear_auth_cookie();			wp_set_auth_cookie($ID);		}	}	return $user_id;}/** * A simpler way of inserting an user into the database. * * Creates a new user with just the username, password, and email. For a more * detail creation of a user, use wp_insert_user() to specify more infomation. * * @since 2.0.0 * @see wp_insert_user() More complete way to create a new user * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function wp_create_user($username, $password, $email = '') {	$user_login = esc_sql( $username );	$user_email = esc_sql( $email    );	$user_pass = $password;	$userdata = compact('user_login', 'user_email', 'user_pass');	return wp_insert_user($userdata);}/** * Set up the default contact methods * * @access private * @since * * @return array $user_contactmethods Array of contact methods and their labels. */function _wp_get_user_contactmethods() {	$user_contactmethods = array(		'aim' => __('AIM'),		'yim' => __('Yahoo IM'),		'jabber' => __('Jabber / Google Talk')	);	return apply_filters('user_contactmethods',$user_contactmethods);}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>     <title><?php printf(__('%1$s - Comments on %2$s'), get_option('blogname'), the_title('','',false)); ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<style type="text/css" media="screen">		@import url( <?php bloginfo('stylesheet_url'); ?> );		body { margin: 3px; }	</style></head><body id="commentspopup"><h1 id="header"><a href="" title="<?php echo get_option('blogname'); ?>"><?php echo get_option('blogname'); ?></a></h1><?php/* Don't remove these lines. */add_filter('comment_text', 'popuplinks');if ( have_posts() ) :while( have_posts()) : the_post();?><h2 id="comments"><?php _e('Comments'); ?></h2><p><a href="<?php echo get_post_comments_feed_link($post->ID); ?>"><?php _e('<abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.'); ?></a></p><?php if ( pings_open() ) { ?><p><?php printf(__('The <abbr title="Universal Resource Locator">URL</abbr> to TrackBack this entry is: <em>%s</em>'), get_trackback_url()); ?></p><?php } ?><?php// this line is WordPress' motor, do not delete it.$commenter = wp_get_current_commenter();extract($commenter);$comments = get_approved_comments($id);$post = get_post($id);if ( post_password_required($post) ) {  // and it doesn't match the cookie	echo(get_the_password_form());} else { ?><?php if ($comments) { ?><ol id="commentlist"><?php foreach ($comments as $comment) { ?>	<li id="comment-<?php comment_ID() ?>">	<?php comment_text() ?>	<p><cite><?php comment_type(__('Comment'), __('Trackback'), __('Pingback')); ?> <?php printf(__('by %1$s &#8212; %2$s @ <a href="#comment-%3$s">%4$s</a>'), get_comment_author_link(), get_comment_date(), get_comment_ID(), get_comment_time()); ?></cite></p>	</li><?php } // end for each comment ?></ol><?php } else { // this is displayed if there are no comments so far ?>	<p><?php _e('No comments yet.'); ?></p><?php } ?><?php if ( comments_open() ) { ?><h2><?php _e('Leave a comment'); ?></h2><p><?php printf(__('Line and paragraph breaks automatic, e-mail address never displayed, <acronym title="Hypertext Markup Language">HTML</acronym> allowed: <code>%s</code>'), allowed_tags()); ?></p><form action="<?php echo get_option('siteurl'); ?>/wp-comments-post.php" method="post" id="commentform"><?php if ( $user_ID ) : ?>	<p><?php printf(__('Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out &raquo;</a>'), get_option('siteurl') . '/wp-admin/profile.php', $user_identity, wp_logout_url(get_permalink())); ?></p><?php else : ?>	<p>	  <input type="text" name="author" id="author" class="textarea" value="<?php echo esc_attr($comment_author); ?>" size="28" tabindex="1" />	   <label for="author"><?php _e('Name'); ?></label>	</p>	<p>	  <input type="text" name="email" id="email" value="<?php echo esc_attr($comment_author_email); ?>" size="28" tabindex="2" />	   <label for="email"><?php _e('E-mail'); ?></label>	</p>	<p>	  <input type="text" name="url" id="url" value="<?php echo esc_attr($comment_author_url); ?>" size="28" tabindex="3" />	   <label for="url"><?php _e('<abbr title="Universal Resource Locator">URL</abbr>'); ?></label>	</p><?php endif; ?>	<p>	  <label for="comment"><?php _e('Your Comment'); ?></label>	<br />	  <textarea name="comment" id="comment" cols="70" rows="4" tabindex="4"></textarea>	</p>	<p>	  <input type="hidden" name="comment_post_ID" value="<?php echo $id; ?>" />	  <input type="hidden" name="redirect_to" value="<?php echo esc_attr($_SERVER["REQUEST_URI"]); ?>" />	  <input name="submit" type="submit" tabindex="5" value="<?php _e('Say It!' ); ?>" />	</p>	<?php do_action('comment_form', $post->ID); ?></form><?php } else { // comments are closed ?><p><?php _e('Sorry, the comment form is closed at this time.'); ?></p><?php }} // end password check?><div><strong><a href="javascript:window.close()"><?php _e('Close this window.'); ?></a></strong></div><?php // if you delete this the sky will fall on your headendwhile; // have_posts()else: // have_posts()?><p><?php _e('Sorry, no posts matched your criteria.'); ?></p><?php endif; ?><!-- // this is just the end of the motor - don't touch that line either :) --><?php //} ?><p class="credit"><?php timer_stop(1); ?> <cite><?php printf(__('Powered by <a href="%s" title="Powered by WordPress, state-of-the-art semantic personal publishing platform"><strong>WordPress</strong></a>'), 'http://wordpress.org/'); ?></cite></p><?php // Seen at http://www.mijnkopthee.nl/log2/archive/2003/05/28/esc(18) ?><script type="text/javascript"><!--document.onkeypress = function esc(e) {	if(typeof(e) == "undefined") { e=event; }	if (e.keyCode == 27) { self.close(); }}// --></script></body></html>
<?php/** * RSS2 Feed Template for displaying RSS2 Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>';?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	<?php do_action('rss2_ns'); do_action('rss2_comments_ns'); ?>	><channel>	<title><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on: %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %s searching on %s')), get_bloginfo_rss( 'name' ), esc_attr($wp_query->query_vars['s']));		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php (is_single()) ? the_permalink_rss() : bloginfo_rss("url") ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('r', get_lastcommentmodified('GMT')); ?></lastBuildDate>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('commentsrss2_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<item>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link><?php comment_link() ?></link>		<dc:creator><?php echo get_comment_author_rss() ?></dc:creator>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_comment_time('Y-m-d H:i:s', true, false), false); ?></pubDate>		<guid isPermaLink="false"><?php comment_guid() ?></guid><?php if ( post_password_required($comment_post) ) : ?>		<description><?php echo ent2ncr(__('Protected Comments: Please enter your password to view comments.')); ?></description>		<content:encoded><![CDATA[<?php echo get_the_password_form() ?>]]></content:encoded><?php else : // post pass ?>		<description><?php comment_text_rss() ?></description>		<content:encoded><![CDATA[<?php comment_text() ?>]]></content:encoded><?php endif; // post pass	do_action('commentrss2_item', $comment->comment_ID, $comment_post->ID);?>	</item><?php endwhile; endif; ?></channel></rss>
<?php/** * WP_Importer base class */class WP_Importer {	/**	 * Class Constructor	 *	 * @return void	 */	function __construct() {}	function WP_Importer() {		$this->__construct();	}	/**	 * Returns array with imported permalinks from WordPress database	 *	 * @param string $bid	 * @return array	 */	function get_imported_posts( $importer_name, $bid ) {		global $wpdb;		$hashtable = array();		$limit = 100;		$offset = 0;		// Grab all posts in chunks		do {			$meta_key = $importer_name . '_' . $bid . '_permalink';			$sql = $wpdb->prepare( "SELECT post_id, meta_value FROM $wpdb->postmeta WHERE meta_key = '%s' LIMIT %d,%d", $meta_key, $offset, $limit );			$results = $wpdb->get_results( $sql );			// Increment offset			$offset = ( $limit + $offset );			if ( !empty( $results ) ) {				foreach ( $results as $r ) {					// Set permalinks into array					$hashtable[$r->meta_value] = intval( $r->post_id );				}			}		} while ( count( $results ) == $limit );		// unset to save memory		unset( $results, $r );		return $hashtable;	}	/**	 * Return count of imported permalinks from WordPress database	 *	 * @param string $bid	 * @return int	 */	function count_imported_posts( $importer_name, $bid ) {		global $wpdb;		$count = 0;		// Get count of permalinks		$meta_key = $importer_name . '_' . $bid . '_permalink';		$sql = $wpdb->prepare( "SELECT COUNT( post_id ) AS cnt FROM $wpdb->postmeta WHERE meta_key = '%s'", $meta_key );		$result = $wpdb->get_results( $sql );		if ( !empty( $result ) )			$count = intval( $result[0]->cnt );		// unset to save memory		unset( $results );		return $count;	}	/**	 * Set array with imported comments from WordPress database	 *	 * @param string $bid	 * @return array	 */	function get_imported_comments( $bid ) {		global $wpdb;		$hashtable = array();		$limit = 100;		$offset = 0;		// Grab all comments in chunks		do {			$sql = $wpdb->prepare( "SELECT comment_ID, comment_agent FROM $wpdb->comments LIMIT %d,%d", $offset, $limit );			$results = $wpdb->get_results( $sql );			// Increment offset			$offset = ( $limit + $offset );			if ( !empty( $results ) ) {				foreach ( $results as $r ) {					// Explode comment_agent key					list ( $ca_bid, $source_comment_id ) = explode( '-', $r->comment_agent );					$source_comment_id = intval( $source_comment_id );					// Check if this comment came from this blog					if ( $bid == $ca_bid ) {						$hashtable[$source_comment_id] = intval( $r->comment_ID );					}				}			}		} while ( count( $results ) == $limit );		// unset to save memory		unset( $results, $r );		return $hashtable;	}	function set_blog( $blog_id ) {		if ( is_numeric( $blog_id ) ) {			$blog_id = (int) $blog_id;		} else {			$blog = 'http://' . preg_replace( '#^https?://#', '', $blog_id );			if ( ( !$parsed = parse_url( $blog ) ) || empty( $parsed['host'] ) ) {				fwrite( STDERR, "Error: can not determine blog_id from $blog_id\n" );				exit();			}			if ( empty( $parsed['path'] ) )				$parsed['path'] = '/';			if ( !$blog = get_blog_info( $parsed['host'], $parsed['path'] ) ) {				fwrite( STDERR, "Error: Could not find blog\n" );				exit();			}			$blog_id = (int) $blog->blog_id;			// Restore global $current_blog			global $current_blog;			$current_blog = $blog;		}		if ( function_exists( 'is_multisite' ) ) {			if ( is_multisite() )				switch_to_blog( $blog_id );		}		return $blog_id;	}	function set_user( $user_id ) {		if ( is_numeric( $user_id ) ) {			$user_id = (int) $user_id;		} else {			$user_id = (int) username_exists( $user_id );		}		if ( !$user_id || !wp_set_current_user( $user_id ) ) {			fwrite( STDERR, "Error: can not find user\n" );			exit();		}		return $user_id;	}	/**	 * Sort by strlen, longest string first	 *	 * @param string $a	 * @param string $b	 * @return int	 */	function cmpr_strlen( $a, $b ) {		return strlen( $b ) - strlen( $a );	}	/**	 * GET URL	 *	 * @param string $url	 * @param string $username	 * @param string $password	 * @param bool $head	 * @return array	 */	function get_page( $url, $username = '', $password = '', $head = false ) {		// Increase the timeout		add_filter( 'http_request_timeout', array( &$this, 'bump_request_timeout' ) );		$headers = array();		$args = array();		if ( true === $head )			$args['method'] = 'HEAD';		if ( !empty( $username ) && !empty( $password ) )			$headers['Authorization'] = 'Basic ' . base64_encode( "$username:$password" );		$args['headers'] = $headers;		return wp_remote_request( $url, $args );	}	/**	 * Bump up the request timeout for http requests	 *	 * @param int $val	 * @return int	 */	function bump_request_timeout( $val ) {		return 60;	}	/**	 * Check if user has exceeded disk quota	 *	 * @return bool	 */	function is_user_over_quota() {		global $current_user, $current_blog;		if ( function_exists( 'upload_is_user_over_quota' ) ) {			if ( upload_is_user_over_quota( 1 ) ) {				echo "Sorry, you have used your upload quota.\n";				return true;			}		}		return false;	}	/**	 * Replace newlines, tabs, and multiple spaces with a single space	 *	 * @param string $string	 * @return string	 */	function min_whitespace( $string ) {		return preg_replace( '|[\r\n\t ]+|', ' ', $string );	}	/**	 * Reset global variables that grow out of control during imports	 *	 * @return void	 */	function stop_the_insanity() {		global $wpdb, $wp_actions;		// Or define( 'WP_IMPORTING', true );		$wpdb->queries = array();		// Reset $wp_actions to keep it from growing out of control		$wp_actions = array();	}}/** * Returns value of command line params. * Exits when a required param is not set. * * @param string $param * @param bool $required * @return mixed */function get_cli_args( $param, $required = false ) {	$args = $_SERVER['argv'];	$out = array();	$last_arg = null;	$return = null;	$il = sizeof( $args );	for ( $i = 1, $il; $i < $il; $i++ ) {		if ( (bool) preg_match( "/^--(.+)/", $args[$i], $match ) ) {			$parts = explode( "=", $match[1] );			$key = preg_replace( "/[^a-z0-9]+/", "", $parts[0] );			if ( isset( $parts[1] ) ) {				$out[$key] = $parts[1];			} else {				$out[$key] = true;			}			$last_arg = $key;		} else if ( (bool) preg_match( "/^-([a-zA-Z0-9]+)/", $args[$i], $match ) ) {			for ( $j = 0, $jl = strlen( $match[1] ); $j < $jl; $j++ ) {				$key = $match[1]{$j};				$out[$key] = true;			}			$last_arg = $key;		} else if ( $last_arg !== null ) {			$out[$last_arg] = $args[$i];		}	}	// Check array for specified param	if ( isset( $out[$param] ) ) {		// Set return value		$return = $out[$param];	}	// Check for missing required param	if ( !isset( $out[$param] ) && $required ) {		// Display message and exit		echo "\"$param\" parameter is required but was not specified\n";		exit();	}	return $return;}
<?php/** * Dashboard Administration Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once('./admin.php');/** Load WordPress dashboard API */require_once(ABSPATH . 'wp-admin/includes/dashboard.php');wp_dashboard_setup();wp_enqueue_script( 'dashboard' );wp_enqueue_script( 'plugin-install' );wp_enqueue_script( 'media-upload' );wp_admin_css( 'dashboard' );wp_admin_css( 'plugin-install' );add_thickbox();$title = __('Dashboard');$parent_file = 'index.php';add_contextual_help($current_screen,	'<p>' . __('Welcome to your WordPress Dashboard! You will find helpful tips in the Help tab of each screen to assist you as you get to know the application.') . '</p>' .	'<p>' . __('The left-hand navigation menu provides links to the administration screens in your WordPress application. You can expand or collapse navigation sections by clicking on the arrow that appears on the right side of each navigation item when you hover over it. You can also minimize the navigation menu to a narrow icon strip by clicking on the separator lines between navigation sections that end in double arrowheads; when minimized, the submenu items will be displayed on hover.') . '</p>' .	'<p>' . __('You can configure your dashboard by choosing which modules to display, how many columns to display them in, and where each module should be placed. You can hide/show modules and select the number of columns in the Screen Options tab. To rearrange the modules, drag and drop by clicking on the title bar of the selected module and releasing when you see a gray dotted-line box appear in the location you want to place the module. You can also expand or collapse each module by clicking once on the the module&#8217;s title bar. In addition, some modules are configurable, and will show a &#8220;Configure&#8221; link in the title bar when you hover over it.') . '</p>' .	'<p>' . __('The modules on your Dashboard screen are:') . '</p>' .	'<p>' . __('<strong>Right Now</strong> - Displays a summary of the content on your site and identifies which theme and version of WordPress you are using.') . '</p>' .	'<p>' . __('<strong>Recent Comments</strong> - Shows the most recent comments on your posts (configurable, up to 30) and allows you to moderate them.') . '</p>' .	'<p>' . __('<strong>Incoming Links</strong> - Shows links to your site found by Google Blog Search.') . '</p>' .	'<p>' . __('<strong>QuickPress</strong> - Allows you to create a new post and either publish it or save it as a draft.') . '</p>' .	'<p>' . __('<strong>Recent Drafts</strong> - Displays links to the 5 most recent draft posts you&#8217;ve started.') . '</p>' .	'<p>' . __('<strong>Other WordPress News</strong> - Shows the feed from <a href="http://planet.wordpress.org" target="_blank">WordPress Planet</a>. You can configure it to show a different feed of your choosing.') . '</p>' .	'<p>' . __('<strong>Plugins</strong> - Features the most popular, newest, and recently updated plugins from the WordPress.org Plugin Directory.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_SubPanel" target="_blank">Dashboard Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');$today = current_time('mysql', 1);?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div id="dashboard-widgets-wrap"><?php wp_dashboard(); ?><div class="clear"></div></div><!-- dashboard-widgets-wrap --></div><!-- wrap --><?php require(ABSPATH . 'wp-admin/admin-footer.php'); ?>
<?phpif ( !class_exists( 'Services_JSON' ) ) :/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: *//** * Converts to and from JSON format. * * JSON (JavaScript Object Notation) is a lightweight data-interchange * format. It is easy for humans to read and write. It is easy for machines * to parse and generate. It is based on a subset of the JavaScript * Programming Language, Standard ECMA-262 3rd Edition - December 1999. * This feature can also be found in  Python. JSON is a text format that is * completely language independent but uses conventions that are familiar * to programmers of the C-family of languages, including C, C++, C#, Java, * JavaScript, Perl, TCL, and many others. These properties make JSON an * ideal data-interchange language. * * This package provides a simple encoder and decoder for JSON notation. It * is intended for use with client-side Javascript applications that make * use of HTTPRequest to perform server communication functions - data can * be encoded into JSON notation for use in a client-side javascript, or * decoded from incoming Javascript requests. JSON format is native to * Javascript, and can be directly eval()'ed with no further parsing * overhead * * All strings should be in ASCII or UTF-8 format! * * LICENSE: Redistribution and use in source and binary forms, with or * without modification, are permitted provided that the following * conditions are met: Redistributions of source code must retain the * above copyright notice, this list of conditions and the following * disclaimer. Redistributions in binary form must reproduce the above * copyright notice, this list of conditions and the following disclaimer * in the documentation and/or other materials provided with the * distribution. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * DAMAGE. * * @category * @package		Services_JSON * @author		Michal Migurski <mike-json@teczno.com> * @author		Matt Knapp <mdknapp[at]gmail[dot]com> * @author		Brett Stimmerman <brettstimmerman[at]gmail[dot]com> * @copyright	2005 Michal Migurski * @version     CVS: $Id: JSON.php 288200 2009-09-09 15:41:29Z alan_k $ * @license		http://www.opensource.org/licenses/bsd-license.php * @link		http://pear.php.net/pepr/pepr-proposal-show.php?id=198 *//** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_SLICE', 1);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_STR',  2);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_ARR',  3);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_OBJ',  4);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_CMT', 5);/** * Behavior switch for Services_JSON::decode() */define('SERVICES_JSON_LOOSE_TYPE', 16);/** * Behavior switch for Services_JSON::decode() */define('SERVICES_JSON_SUPPRESS_ERRORS', 32);/** * Converts to and from JSON format. * * Brief example of use: * * <code> * // create a new instance of Services_JSON * $json = new Services_JSON(); * * // convert a complexe value to JSON notation, and send it to the browser * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4))); * $output = $json->encode($value); * * print($output); * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]] * * // accept incoming POST data, assumed to be in JSON notation * $input = file_get_contents('php://input', 1000000); * $value = $json->decode($input); * </code> */class Services_JSON{ /**	* constructs a new JSON instance	*	* @param int $use object behavior flags; combine with boolean-OR	*	*						possible values:	*						- SERVICES_JSON_LOOSE_TYPE:  loose typing.	*								"{...}" syntax creates associative arrays	*								instead of objects in decode().	*						- SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.	*								Values which can't be encoded (e.g. resources)	*								appear as NULL instead of throwing errors.	*								By default, a deeply-nested resource will	*								bubble up with an error, so all return values	*								from encode() should be checked with isError()	*/	function Services_JSON($use = 0)	{		$this->use = $use;	} /**	* convert a string from one UTF-16 char to one UTF-8 char	*	* Normally should be handled by mb_convert_encoding, but	* provides a slower PHP-only method for installations	* that lack the multibye string extension.	*	* @param	string  $utf16  UTF-16 character	* @return string  UTF-8 character	* @access private	*/	function utf162utf8($utf16)	{		// oh please oh please oh please oh please oh please		if(function_exists('mb_convert_encoding')) {			return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');		}		$bytes = (ord($utf16{0}) << 8) | ord($utf16{1});		switch(true) {			case ((0x7F & $bytes) == $bytes):				// this case should never be reached, because we are in ASCII range				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0x7F & $bytes);			case (0x07FF & $bytes) == $bytes:				// return a 2-byte UTF-8 character				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0xC0 | (($bytes >> 6) & 0x1F))					. chr(0x80 | ($bytes & 0x3F));			case (0xFFFF & $bytes) == $bytes:				// return a 3-byte UTF-8 character				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0xE0 | (($bytes >> 12) & 0x0F))					. chr(0x80 | (($bytes >> 6) & 0x3F))					. chr(0x80 | ($bytes & 0x3F));		}		// ignoring UTF-32 for now, sorry		return '';	} /**	* convert a string from one UTF-8 char to one UTF-16 char	*	* Normally should be handled by mb_convert_encoding, but	* provides a slower PHP-only method for installations	* that lack the multibye string extension.	*	* @param	string  $utf8 UTF-8 character	* @return string  UTF-16 character	* @access private	*/	function utf82utf16($utf8)	{		// oh please oh please oh please oh please oh please		if(function_exists('mb_convert_encoding')) {			return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8');		}		switch(strlen($utf8)) {			case 1:				// this case should never be reached, because we are in ASCII range				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return $utf8;			case 2:				// return a UTF-16 character from a 2-byte UTF-8 char				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0x07 & (ord($utf8{0}) >> 2))					. chr((0xC0 & (ord($utf8{0}) << 6))						| (0x3F & ord($utf8{1})));			case 3:				// return a UTF-16 character from a 3-byte UTF-8 char				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr((0xF0 & (ord($utf8{0}) << 4))						| (0x0F & (ord($utf8{1}) >> 2)))					. chr((0xC0 & (ord($utf8{1}) << 6))						| (0x7F & ord($utf8{2})));		}		// ignoring UTF-32 for now, sorry		return '';	} /**	* encodes an arbitrary variable into JSON format (and sends JSON Header)	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function encode($var)	{		header('Content-type: application/json');		return $this->_encode($var);	}	/**	* encodes an arbitrary variable into JSON format without JSON Header - warning - may allow CSS!!!!)	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function encodeUnsafe($var)	{		return $this->_encode($var);	}	/**	* PRIVATE CODE that does the work of encodes an arbitrary variable into JSON format	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function _encode($var)	{		switch (gettype($var)) {			case 'boolean':				return $var ? 'true' : 'false';			case 'NULL':				return 'null';			case 'integer':				return (int) $var;			case 'double':			case 'float':				return (float) $var;			case 'string':				// STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT				$ascii = '';				$strlen_var = strlen($var);			/*				* Iterate over every character in the string,				* escaping with a slash or encoding to UTF-8 where necessary				*/				for ($c = 0; $c < $strlen_var; ++$c) {					$ord_var_c = ord($var{$c});					switch (true) {						case $ord_var_c == 0x08:							$ascii .= '\b';							break;						case $ord_var_c == 0x09:							$ascii .= '\t';							break;						case $ord_var_c == 0x0A:							$ascii .= '\n';							break;						case $ord_var_c == 0x0C:							$ascii .= '\f';							break;						case $ord_var_c == 0x0D:							$ascii .= '\r';							break;						case $ord_var_c == 0x22:						case $ord_var_c == 0x2F:						case $ord_var_c == 0x5C:							// double quote, slash, slosh							$ascii .= '\\'.$var{$c};							break;						case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):							// characters U-00000000 - U-0000007F (same as ASCII)							$ascii .= $var{$c};							break;						case (($ord_var_c & 0xE0) == 0xC0):							// characters U-00000080 - U-000007FF, mask 110XXXXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							if ($c+1 >= $strlen_var) {								$c += 1;								$ascii .= '?';								break;							}							$char = pack('C*', $ord_var_c, ord($var{$c + 1}));							$c += 1;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xF0) == 0xE0):							if ($c+2 >= $strlen_var) {								$c += 2;								$ascii .= '?';								break;							}							// characters U-00000800 - U-0000FFFF, mask 1110XXXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										@ord($var{$c + 1}),										@ord($var{$c + 2}));							$c += 2;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xF8) == 0xF0):							if ($c+3 >= $strlen_var) {								$c += 3;								$ascii .= '?';								break;							}							// characters U-00010000 - U-001FFFFF, mask 11110XXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}));							$c += 3;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xFC) == 0xF8):							// characters U-00200000 - U-03FFFFFF, mask 111110XX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							if ($c+4 >= $strlen_var) {								$c += 4;								$ascii .= '?';								break;							}							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}),										ord($var{$c + 4}));							$c += 4;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xFE) == 0xFC):						if ($c+5 >= $strlen_var) {								$c += 5;								$ascii .= '?';								break;							}							// characters U-04000000 - U-7FFFFFFF, mask 1111110X							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}),										ord($var{$c + 4}),										ord($var{$c + 5}));							$c += 5;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;					}				}				return  '"'.$ascii.'"';			case 'array':			/*				* As per JSON spec if any array key is not an integer				* we must treat the the whole array as an object. We				* also try to catch a sparsely populated associative				* array with numeric keys here because some JS engines				* will create an array with empty indexes up to				* max_index which can cause memory issues and because				* the keys, which may be relevant, will be remapped				* otherwise.				*				* As per the ECMA and JSON specification an object may				* have any string as a property. Unfortunately due to				* a hole in the ECMA specification if the key is a				* ECMA reserved word or starts with a digit the				* parameter is only accessible using ECMAScript's				* bracket notation.				*/				// treat as a JSON object				if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {					$properties = array_map(array($this, 'name_value'),											array_keys($var),											array_values($var));					foreach($properties as $property) {						if(Services_JSON::isError($property)) {							return $property;						}					}					return '{' . join(',', $properties) . '}';				}				// treat it like a regular array				$elements = array_map(array($this, '_encode'), $var);				foreach($elements as $element) {					if(Services_JSON::isError($element)) {						return $element;					}				}				return '[' . join(',', $elements) . ']';			case 'object':				$vars = get_object_vars($var);				$properties = array_map(array($this, 'name_value'),										array_keys($vars),										array_values($vars));				foreach($properties as $property) {					if(Services_JSON::isError($property)) {						return $property;					}				}				return '{' . join(',', $properties) . '}';			default:				return ($this->use & SERVICES_JSON_SUPPRESS_ERRORS)					? 'null'					: new Services_JSON_Error(gettype($var)." can not be encoded as JSON string");		}	} /**	* array-walking function for use in generating JSON-formatted name-value pairs	*	* @param	string  $name name of key to use	* @param	mixed $value  reference to an array element to be encoded	*	* @return string  JSON-formatted name-value pair, like '"name":value'	* @access private	*/	function name_value($name, $value)	{		$encoded_value = $this->_encode($value);		if(Services_JSON::isError($encoded_value)) {			return $encoded_value;		}		return $this->_encode(strval($name)) . ':' . $encoded_value;	} /**	* reduce a string by removing leading and trailing comments and whitespace	*	* @param	$str	string	string value to strip of comments and whitespace	*	* @return string  string value stripped of comments and whitespace	* @access private	*/	function reduce_string($str)	{		$str = preg_replace(array(				// eliminate single line comments in '// ...' form				'#^\s*//(.+)$#m',				// eliminate multi-line comments in '/* ... */' form, at start of string				'#^\s*/\*(.+)\*/#Us',				// eliminate multi-line comments in '/* ... */' form, at end of string				'#/\*(.+)\*/\s*$#Us'			), '', $str);		// eliminate extraneous space		return trim($str);	} /**	* decodes a JSON string into appropriate variable	*	* @param	string  $str	JSON-formatted string	*	* @return mixed number, boolean, string, array, or object	*				corresponding to given JSON input string.	*				See argument 1 to Services_JSON() above for object-output behavior.	*				Note that decode() always returns strings	*				in ASCII or UTF-8 format!	* @access public	*/	function decode($str)	{		$str = $this->reduce_string($str);		switch (strtolower($str)) {			case 'true':				return true;			case 'false':				return false;			case 'null':				return null;			default:				$m = array();				if (is_numeric($str)) {					// Lookie-loo, it's a number					// This would work on its own, but I'm trying to be					// good about returning integers where appropriate:					// return (float)$str;					// Return float or int, as appropriate					return ((float)$str == (integer)$str)						? (integer)$str						: (float)$str;				} elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) && $m[1] == $m[2]) {					// STRINGS RETURNED IN UTF-8 FORMAT					$delim = substr($str, 0, 1);					$chrs = substr($str, 1, -1);					$utf8 = '';					$strlen_chrs = strlen($chrs);					for ($c = 0; $c < $strlen_chrs; ++$c) {						$substr_chrs_c_2 = substr($chrs, $c, 2);						$ord_chrs_c = ord($chrs{$c});						switch (true) {							case $substr_chrs_c_2 == '\b':								$utf8 .= chr(0x08);								++$c;								break;							case $substr_chrs_c_2 == '\t':								$utf8 .= chr(0x09);								++$c;								break;							case $substr_chrs_c_2 == '\n':								$utf8 .= chr(0x0A);								++$c;								break;							case $substr_chrs_c_2 == '\f':								$utf8 .= chr(0x0C);								++$c;								break;							case $substr_chrs_c_2 == '\r':								$utf8 .= chr(0x0D);								++$c;								break;							case $substr_chrs_c_2 == '\\"':							case $substr_chrs_c_2 == '\\\'':							case $substr_chrs_c_2 == '\\\\':							case $substr_chrs_c_2 == '\\/':								if (($delim == '"' && $substr_chrs_c_2 != '\\\'') ||								($delim == "'" && $substr_chrs_c_2 != '\\"')) {									$utf8 .= $chrs{++$c};								}								break;							case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)):								// single, escaped unicode character								$utf16 = chr(hexdec(substr($chrs, ($c + 2), 2)))									. chr(hexdec(substr($chrs, ($c + 4), 2)));								$utf8 .= $this->utf162utf8($utf16);								$c += 5;								break;							case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F):								$utf8 .= $chrs{$c};								break;							case ($ord_chrs_c & 0xE0) == 0xC0:								// characters U-00000080 - U-000007FF, mask 110XXXXX								//see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 2);								++$c;								break;							case ($ord_chrs_c & 0xF0) == 0xE0:								// characters U-00000800 - U-0000FFFF, mask 1110XXXX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 3);								$c += 2;								break;							case ($ord_chrs_c & 0xF8) == 0xF0:								// characters U-00010000 - U-001FFFFF, mask 11110XXX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 4);								$c += 3;								break;							case ($ord_chrs_c & 0xFC) == 0xF8:								// characters U-00200000 - U-03FFFFFF, mask 111110XX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 5);								$c += 4;								break;							case ($ord_chrs_c & 0xFE) == 0xFC:								// characters U-04000000 - U-7FFFFFFF, mask 1111110X								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 6);								$c += 5;								break;						}					}					return $utf8;				} elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) {					// array, or object notation					if ($str{0} == '[') {						$stk = array(SERVICES_JSON_IN_ARR);						$arr = array();					} else {						if ($this->use & SERVICES_JSON_LOOSE_TYPE) {							$stk = array(SERVICES_JSON_IN_OBJ);							$obj = array();						} else {							$stk = array(SERVICES_JSON_IN_OBJ);							$obj = new stdClass();						}					}					array_push($stk, array('what'  => SERVICES_JSON_SLICE,										'where' => 0,										'delim' => false));					$chrs = substr($str, 1, -1);					$chrs = $this->reduce_string($chrs);					if ($chrs == '') {						if (reset($stk) == SERVICES_JSON_IN_ARR) {							return $arr;						} else {							return $obj;						}					}					//print("\nparsing {$chrs}\n");					$strlen_chrs = strlen($chrs);					for ($c = 0; $c <= $strlen_chrs; ++$c) {						$top = end($stk);						$substr_chrs_c_2 = substr($chrs, $c, 2);						if (($c == $strlen_chrs) || (($chrs{$c} == ',') && ($top['what'] == SERVICES_JSON_SLICE))) {							// found a comma that is not inside a string, array, etc.,							// OR we've reached the end of the character list							$slice = substr($chrs, $top['where'], ($c - $top['where']));							array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => ($c + 1), 'delim' => false));							//print("Found split at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");							if (reset($stk) == SERVICES_JSON_IN_ARR) {								// we are in an array, so just push an element onto the stack								array_push($arr, $this->decode($slice));							} elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {								// we are in an object, so figure								// out the property name and set an								// element in an associative array,								// for now								$parts = array();								if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {									// "name":value pair									$key = $this->decode($parts[1]);									$val = $this->decode($parts[2]);									if ($this->use & SERVICES_JSON_LOOSE_TYPE) {										$obj[$key] = $val;									} else {										$obj->$key = $val;									}								} elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {									// name:value pair, where name is unquoted									$key = $parts[1];									$val = $this->decode($parts[2]);									if ($this->use & SERVICES_JSON_LOOSE_TYPE) {										$obj[$key] = $val;									} else {										$obj->$key = $val;									}								}							}						} elseif ((($chrs{$c} == '"') || ($chrs{$c} == "'")) && ($top['what'] != SERVICES_JSON_IN_STR)) {							// found a quote, and we are not inside a string							array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs{$c}));							//print("Found start of string at {$c}\n");						} elseif (($chrs{$c} == $top['delim']) &&								($top['what'] == SERVICES_JSON_IN_STR) &&								((strlen(substr($chrs, 0, $c)) - strlen(rtrim(substr($chrs, 0, $c), '\\'))) % 2 != 1)) {							// found a quote, we're in a string, and it's not escaped							// we know that it's not escaped becase there is _not_ an							// odd number of backslashes at the end of the string so far							array_pop($stk);							//print("Found end of string at {$c}: ".substr($chrs, $top['where'], (1 + 1 + $c - $top['where']))."\n");						} elseif (($chrs{$c} == '[') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a left-bracket, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false));							//print("Found start of array at {$c}\n");						} elseif (($chrs{$c} == ']') && ($top['what'] == SERVICES_JSON_IN_ARR)) {							// found a right-bracket, and we're in an array							array_pop($stk);							//print("Found end of array at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						} elseif (($chrs{$c} == '{') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a left-brace, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false));							//print("Found start of object at {$c}\n");						} elseif (($chrs{$c} == '}') && ($top['what'] == SERVICES_JSON_IN_OBJ)) {							// found a right-brace, and we're in an object							array_pop($stk);							//print("Found end of object at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						} elseif (($substr_chrs_c_2 == '/*') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a comment start, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false));							$c++;							//print("Found start of comment at {$c}\n");						} elseif (($substr_chrs_c_2 == '*/') && ($top['what'] == SERVICES_JSON_IN_CMT)) {							// found a comment end, and we're in one now							array_pop($stk);							$c++;							for ($i = $top['where']; $i <= $c; ++$i)								$chrs = substr_replace($chrs, ' ', $i, 1);							//print("Found end of comment at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						}					}					if (reset($stk) == SERVICES_JSON_IN_ARR) {						return $arr;					} elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {						return $obj;					}				}		}	}	/**	* @todo Ultimately, this should just call PEAR::isError()	*/	function isError($data, $code = null)	{		if (class_exists('pear')) {			return PEAR::isError($data, $code);		} elseif (is_object($data) && (get_class($data) == 'services_json_error' ||								is_subclass_of($data, 'services_json_error'))) {			return true;		}		return false;	}}if (class_exists('PEAR_Error')) {	class Services_JSON_Error extends PEAR_Error	{		function Services_JSON_Error($message = 'unknown error', $code = null,									$mode = null, $options = null, $userinfo = null)		{			parent::PEAR_Error($message, $code, $mode, $options, $userinfo);		}	}} else {	/**	* @todo Ultimately, this class shall be descended from PEAR_Error	*/	class Services_JSON_Error	{		function Services_JSON_Error($message = 'unknown error', $code = null,									$mode = null, $options = null, $userinfo = null)		{		}	}}endif;?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function home_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;require(ABSPATH . WPINC . '/script-loader.php');require(ABSPATH . WPINC . '/version.php');$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$expires_offset = 31536000;$out = '';$wp_scripts = new WP_Scripts();wp_default_scripts($wp_scripts);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_scripts->registered) )		continue;	$path = ABSPATH . $wp_scripts->registered[$handle]->src;	$out .= get_file($path) . "\n";}header('Content-Type: application/x-javascript; charset=UTF-8');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * FTP implementation using fsockopen to connect. * * @package PemFTP * @subpackage Pure * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(false, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@stream_set_timeout($sock, $this->_timeout)) {			$this->PushError('_settimeout','socket set send timeout');			$this->_quit();			return FALSE;		}		return TRUE;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		$sock = @fsockopen($host, $port, $errno, $errstr, $this->_timeout);		if (!$sock) {			$this->PushError('_connect','socket connect failed', $errstr." (".$errno.")");			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction, 'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@fgets($this->_ftp_control_sock, 512);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed');			} else {				$this->_message.=$tmp;				if(preg_match("/^([0-9]{3})(-(.*[".CRLF."]{1,2})+\\1)? [^".CRLF."]+[".CRLF."]{1,2}$/", $this->_message, $regs)) $go=false;			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@fputs($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed');			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_data_sock=@fsockopen($this->_datahost, $this->_dataport, $errno, $errstr, $this->_timeout);			if(!$this->_ftp_data_sock) {				$this->PushError("_data_prepare","fsockopen fails", $errstr." (".$errno.")");				$this->_data_close();				return FALSE;			}			else $this->_ftp_data_sock;		} else {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		while (!feof($this->_ftp_data_sock)) {			$block=fread($this->_ftp_data_sock, $this->_ftp_buff_size);			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return TRUE;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@fwrite($this->_ftp_data_sock, $block))===FALSE) {				$this->PushError("_data_write","Can't write to socket");				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@fclose($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit($force=FALSE) {		if($this->_connected or $force) {			@fclose($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * Atom Feed Template for displaying Atom Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="' . get_option('blog_charset') . '" ?' . '>';?><feed	xmlns="http://www.w3.org/2005/Atom"	xml:lang="<?php echo get_option('rss_language'); ?>"	xmlns:thr="http://purl.org/syndication/thread/1.0"	<?php do_action('atom_ns'); do_action('atom_comments_ns'); ?>>	<title type="text"><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %1$s searching on %2$s')), get_bloginfo_rss( 'name' ), get_search_query() );		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<subtitle type="text"><?php bloginfo_rss('description'); ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastcommentmodified('GMT'), false); ?></updated><?php if ( is_singular() ) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php comments_link_feed(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_post_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_post_comments_feed_link('', 'atom'); ?></id><?php } elseif(is_search()) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php echo home_url() . '?s=' . get_search_query(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_search_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_search_comments_feed_link('', 'atom'); ?></id><?php } else { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php bloginfo_rss('url'); ?>" />	<link rel="self" type="application/atom+xml" href="<?php bloginfo_rss('comments_atom_url'); ?>" />	<id><?php bloginfo_rss('comments_atom_url'); ?></id><?php } ?><?php do_action('comments_atom_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<entry>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link rel="alternate" href="<?php comment_link(); ?>" type="<?php bloginfo_rss('html_type'); ?>" />		<author>			<name><?php comment_author_rss(); ?></name>			<?php if (get_comment_author_url()) echo '<uri>' . get_comment_author_url() . '</uri>'; ?>		</author>		<id><?php comment_guid(); ?></id>		<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></updated>		<published><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></published><?php if ( post_password_required($comment_post) ) : ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php echo get_the_password_form(); ?>]]></content><?php else : // post pass ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php comment_text(); ?>]]></content><?php endif; // post pass	// Return comment threading information (http://www.ietf.org/rfc/rfc4685.txt)	if ( $comment->comment_parent == 0 ) : // This comment is top level ?>		<thr:in-reply-to ref="<?php the_guid(); ?>" href="<?php the_permalink_rss() ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php else : // This comment is in reply to another comment	$parent_comment = get_comment($comment->comment_parent);	// The rel attribute below and the id tag above should be GUIDs, but WP doesn't create them for comments (unlike posts). Either way, its more important that they both use the same system?>		<thr:in-reply-to ref="<?php comment_guid($parent_comment) ?>" href="<?php echo get_comment_link($parent_comment) ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php endif;	do_action('comment_atom_entry', $comment->comment_ID, $comment_post->ID);?>	</entry><?php endwhile; endif; ?></feed>
<?php/** * The template for displaying Category Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Category Archives: %s', 'twentyten' ), '<span>' . single_cat_title( '', false ) . '</span>' );				?></h1>				<?php					$category_description = category_description();					if ( ! empty( $category_description ) )						echo '<div class="archive-meta">' . $category_description . '</div>';				/* Run the loop for the category page to output the posts.				 * If you want to overload this in a child theme then include a file				 * called loop-category.php and that will be used instead.				 */				get_template_part( 'loop', 'category' );				?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Outputs the OPML XML format for getting the links defined in the link * administration. This can be used to export links from one blog over to * another. Links aren't exported by the WordPress export, so this file handles * that. * * This file is not added by default to WordPress theme pages when outputting * feed links. It will have to be added manually for browsers and users to pick * up that this file exists. * * @package WordPress */if ( empty($wp) ) {	require_once('./wp-load.php');	wp();}header('Content-Type: text/xml; charset=' . get_option('blog_charset'), true);$link_cat = '';if ( !empty($_GET['link_cat']) ) {	$link_cat = $_GET['link_cat'];	if ( !in_array($link_cat, array('all', '0')) )		$link_cat = absint( (string)urldecode($link_cat) );}echo '<?xml version="1.0"?'.">\n";?><opml version="1.0">	<head>		<title><?php printf( __('Links for %s'), esc_attr(get_bloginfo('name', 'display')) ); ?></title>		<dateCreated><?php echo gmdate("D, d M Y H:i:s"); ?> GMT</dateCreated>		<?php do_action('opml_head'); ?>	</head>	<body><?phpif ( empty($link_cat) )	$cats = get_categories(array('type' => 'link', 'hierarchical' => 0));else	$cats = get_categories(array('type' => 'link', 'hierarchical' => 0, 'include' => $link_cat));foreach ( (array)$cats as $cat ) :	$catname = apply_filters('link_category', $cat->name);?><outline type="category" title="<?php echo esc_attr($catname); ?>"><?php	$bookmarks = get_bookmarks(array("category" => $cat->term_id));	foreach ( (array)$bookmarks as $bookmark ) :		$title = apply_filters('link_title', $bookmark->link_name);?>	<outline text="<?php echo esc_attr($title); ?>" type="link" xmlUrl="<?php echo esc_attr($bookmark->link_rss); ?>" htmlUrl="<?php echo esc_attr($bookmark->link_url); ?>" updated="<?php if ('0000-00-00 00:00:00' != $bookmark->link_updated) echo $bookmark->link_updated; ?>" /><?php	endforeach; // $bookmarks?></outline><?phpendforeach; // $cats?></body></opml>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?>	<div id="sidebar" role="complementary">		<ul>			<?php 	/* Widgetized sidebar, if you have the plugin installed. */					if ( !function_exists('dynamic_sidebar') || !dynamic_sidebar() ) : ?>			<li>				<?php get_search_form(); ?>			</li>			<!-- Author information is disabled per default. Uncomment and fill in your details if you want to use it.			<li><h2><?php _e('Author'); ?></h2>			<p>A little something about you, the author. Nothing lengthy, just an overview.</p>			</li>			-->			<?php if ( is_404() || is_category() || is_day() || is_month() ||						is_year() || is_search() || is_paged() ) {			?> <li>			<?php /* If this is a 404 page */ if (is_404()) { ?>			<?php /* If this is a category archive */ } elseif (is_category()) { ?>			<p><?php printf(__('You are currently browsing the archives for the %s category.'), single_cat_title('', false)); ?></p>			<?php /* If this is a daily archive */ } elseif (is_day()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the day %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('l, F jS, Y'))); ?></p>			<?php /* If this is a monthly archive */ } elseif (is_month()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('F, Y'))); ?></p>			<?php /* If this is a yearly archive */ } elseif (is_year()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the year %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time('Y')); ?></p>			<?php /* If this is a search result */ } elseif (is_search()) { ?>			<p><?php printf(__('You have searched the <a href="%1$s/">%2$s</a> blog archives for <strong>&#8216;%3$s&#8217;</strong>. If you are unable to find anything in these search results, you can try one of these links.'), get_bloginfo('url'), get_bloginfo('name'), esc_html( get_search_query() ) ); ?></p>			<?php /* If this set is paginated */ } elseif (isset($_GET['paged']) && !empty($_GET['paged'])) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives.'), get_bloginfo('url'), get_bloginfo('name')); ?></p>			<?php } ?>			</li>		<?php }?>		</ul>		<ul role="navigation">			<?php wp_list_pages('title_li=<h2>' . __('Pages') . '</h2>' ); ?>			<li><h2><?php _e('Archives'); ?></h2>				<ul>				<?php wp_get_archives(array('type' => 'monthly')); ?>				</ul>			</li>			<?php wp_list_categories(array('show_count' => 1, 'title_li' => '<h2>' . __('Categories') . '</h2>')); ?>		</ul>		<ul>			<?php /* If this is the frontpage */ if ( is_home() || is_page() ) { ?>				<?php wp_list_bookmarks(); ?>				<li><h2><?php _e('Meta'); ?></h2>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<li><a href="http://validator.w3.org/check/referer" title="<?php _e('This page validates as XHTML 1.0 Transitional'); ?>"><?php _e('Valid <abbr title="eXtensible HyperText Markup Language">XHTML</abbr>'); ?></a></li>					<li><a href="http://gmpg.org/xfn/"><abbr title="<?php _e('XHTML Friends Network'); ?>"><?php _e('XFN'); ?></abbr></a></li>					<li><a href="http://wordpress.org/" title="<?php _e('Powered by WordPress, state-of-the-art semantic personal publishing platform.'); ?>">WordPress</a></li>					<?php wp_meta(); ?>				</ul>				</li>			<?php } ?>			<?php endif; ?>		</ul>	</div>
<?php/** * WordPress Administration Importer API. * * @package WordPress * @subpackage Administration *//** * Retrieve list of importers. * * @since 2.0.0 * * @return array */function get_importers() {	global $wp_importers;	if ( is_array($wp_importers) )		uasort($wp_importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));	return $wp_importers;}/** * Register importer for WordPress. * * @since 2.0.0 * * @param string $id Importer tag. Used to uniquely identify importer. * @param string $name Importer name and title. * @param string $description Importer description. * @param callback $callback Callback to run. * @return WP_Error Returns WP_Error when $callback is WP_Error. */function register_importer( $id, $name, $description, $callback ) {	global $wp_importers;	if ( is_wp_error( $callback ) )		return $callback;	$wp_importers[$id] = array ( $name, $description, $callback );}/** * Cleanup importer. * * Removes attachment based on ID. * * @since 2.0.0 * * @param string $id Importer ID. */function wp_import_cleanup( $id ) {	wp_delete_attachment( $id );}/** * Handle importer uploading and add attachment. * * @since 2.0.0 * * @return array */function wp_import_handle_upload() {	if ( !isset($_FILES['import']) ) {		$file['error'] = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return $file;	}	$overrides = array( 'test_form' => false, 'test_type' => false );	$_FILES['import']['name'] .= '.txt';	$file = wp_handle_upload( $_FILES['import'], $overrides );	if ( isset( $file['error'] ) )		return $file;	$url = $file['url'];	$type = $file['type'];	$file = addslashes( $file['file'] );	$filename = basename( $file );	// Construct the object array	$object = array( 'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url	);	// Save the data	$id = wp_insert_attachment( $object, $file );	return array( 'file' => $file, 'id' => $id );}?>
<?php/** * Author Template functions for use in themes. * * These functions must be used within the WordPress Loop. * * @link http://codex.wordpress.org/Author_Templates * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current post. * * @since 1.5 * @uses $authordata The current author's DB object. * @uses apply_filters() Calls 'the_author' hook on the author display name. * * @param string $deprecated Deprecated. * @return string The author's display name. */function get_the_author($deprecated = '') {	global $authordata;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	return apply_filters('the_author', is_object($authordata) ? $authordata->display_name : null);}/** * Display the name of the author of the current post. * * The behavior of this function is based off of old functionality predating * get_the_author(). This function is not deprecated, but is designed to echo * the value from get_the_author() and as an result of any old theme that might * still use the old behavior will also pass the value from get_the_author(). * * The normal, expected behavior of this function is to echo the author and not * return it. However, backwards compatiability has to be maintained. * * @since 0.71 * @see get_the_author() * @link http://codex.wordpress.org/Template_Tags/the_author * * @param string $deprecated Deprecated. * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it. * @return string The author's display name, from get_the_author(). */function the_author( $deprecated = '', $deprecated_echo = true ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '1.5', __('Use <code>get_the_author()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_the_author();	return get_the_author();}/** * Retrieve the author who last edited the current post. * * @since 2.8 * @uses $post The current post's DB object. * @uses get_post_meta() Retrieves the ID of the author who last edited the current post. * @uses get_userdata() Retrieves the author's DB object. * @uses apply_filters() Calls 'the_modified_author' hook on the author display name. * @return string The author's display name. */function get_the_modified_author() {	global $post;	if ( $last_id = get_post_meta($post->ID, '_edit_last', true) ) {		$last_user = get_userdata($last_id);		return apply_filters('the_modified_author', $last_user->display_name);	}}/** * Display the name of the author who last edited the current post. * * @since 2.8 * @see get_the_author() * @return string The author's display name, from get_the_modified_author(). */function the_modified_author() {	echo get_the_modified_author();}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @uses $authordata The current author's DB object (if $user_id not specified). * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @return string The author's field from the current author's DB object. */function get_the_author_meta($field = '', $user_id = false) {	if ( ! $user_id )		global $authordata;	else		$authordata = get_userdata( $user_id );	$field = strtolower($field);	$user_field = "user_$field";	if ( 'id' == $field )		$value = isset($authordata->ID) ? (int)$authordata->ID : 0;	elseif ( isset($authordata->$user_field) )		$value = $authordata->$user_field;	else		$value = isset($authordata->$field) ? $authordata->$field : '';	return apply_filters('get_the_author_' . $field, $value, $user_id);}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @echo string The author's field from the current author's DB object. */function the_author_meta($field = '', $user_id = false) {	echo apply_filters('the_author_' . $field, get_the_author_meta($field, $user_id), $user_id);}/** * Retrieve either author's link or author's name. * * If the author has a home page set, return an HTML link, otherwise just return the * author's name. * * @uses get_the_author_meta() * @uses get_the_author() */function get_the_author_link() {	if ( get_the_author_meta('url') ) {		return '<a href="' . get_the_author_meta('url') . '" title="' . esc_attr( sprintf(__("Visit %s&#8217;s website"), get_the_author()) ) . '" rel="external">' . get_the_author() . '</a>';	} else {		return get_the_author();	}}/** * Display either author's link or author's name. * * If the author has a home page set, echo an HTML link, otherwise just echo the * author's name. * * @link http://codex.wordpress.org/Template_Tags/the_author_link * @since 2.1 * @uses get_the_author_link() */function the_author_link() {	echo get_the_author_link();}/** * Retrieve the number of posts by the author of the current post. * * @since 1.5 * @uses $post The current post in the Loop's DB object. * @uses count_user_posts() * @return int The number of posts by the author. */function get_the_author_posts() {	global $post;	return count_user_posts($post->post_author);}/** * Display the number of posts by the author of the current post. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts * @since 0.71 * @uses get_the_author_posts() Echoes returned value from function. */function the_author_posts() {	echo get_the_author_posts();}/** * Display an HTML link to the author page of the author of the current post. * * Does just echo get_author_posts_url() function, like the others do. The * reason for this, is that another function is used to help in printing the * link to the author's posts. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts_link * @since 1.2.0 * @uses $authordata The current author's DB object. * @uses get_author_posts_url() * @uses get_the_author() * @param string $deprecated Deprecated. */function the_author_posts_link($deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	global $authordata;	$link = sprintf(		'<a href="%1$s" title="%2$s">%3$s</a>',		get_author_posts_url( $authordata->ID, $authordata->user_nicename ),		esc_attr( sprintf( __( 'Posts by %s' ), get_the_author() ) ),		get_the_author()	);	echo apply_filters( 'the_author_posts_link', $link );}/** * Retrieve the URL to the author page of the author of the current post. * * @since 2.1.0 * @uses $wp_rewrite WP_Rewrite * @return string The URL to the author's page. */function get_author_posts_url($author_id, $author_nicename = '') {	global $wp_rewrite;	$auth_ID = (int) $author_id;	$link = $wp_rewrite->get_author_permastruct();	if ( empty($link) ) {		$file = home_url() . '/';		$link = $file . '?author=' . $auth_ID;	} else {		if ( '' == $author_nicename ) {			$user = get_userdata($author_id);			if ( !empty($user->user_nicename) )				$author_nicename = $user->user_nicename;		}		$link = str_replace('%author%', $author_nicename, $link);		$link = home_url() . trailingslashit($link);	}	$link = apply_filters('author_link', $link, $author_id, $author_nicename);	return $link;}/** * List all the authors of the blog, with several options available. * * <ul> * <li>optioncount (boolean) (false): Show the count in parenthesis next to the * author's name.</li> * <li>exclude_admin (boolean) (true): Exclude the 'admin' user that is * installed bydefault.</li> * <li>show_fullname (boolean) (false): Show their full names.</li> * <li>hide_empty (boolean) (true): Don't show authors without any posts.</li> * <li>feed (string) (''): If isn't empty, show links to author's feeds.</li> * <li>feed_image (string) (''): If isn't empty, use this image to link to * feeds.</li> * <li>echo (boolean) (true): Set to false to return the output, instead of * echoing.</li> * <li>style (string) ('list'): Whether to display list of authors in list form * or as a string.</li> * <li>html (bool) (true): Whether to list the items in html for or plaintext. * </li> * </ul> * * @link http://codex.wordpress.org/Template_Tags/wp_list_authors * @since 1.2.0 * @param array $args The argument array. * @return null|string The output, if echo is set to false. */function wp_list_authors($args = '') {	global $wpdb;	$defaults = array(		'optioncount' => false, 'exclude_admin' => true,		'show_fullname' => false, 'hide_empty' => true,		'feed' => '', 'feed_image' => '', 'feed_type' => '', 'echo' => true,		'style' => 'list', 'html' => true	);	$r = wp_parse_args( $args, $defaults );	extract($r, EXTR_SKIP);	$return = '';	/** @todo Move select to get_authors(). */	$users = get_users_of_blog();	$author_ids = array();	foreach ( (array) $users as $user )		$author_ids[] = $user->user_id;	if ( count($author_ids) > 0  ) {		$author_ids = implode(',', $author_ids );		$authors = $wpdb->get_results( "SELECT ID, user_nicename from $wpdb->users WHERE ID IN($author_ids) " . ($exclude_admin ? "AND user_login <> 'admin' " : '') . "ORDER BY display_name" );	} else {		$authors = array();	}	$author_count = array();	foreach ( (array) $wpdb->get_results("SELECT DISTINCT post_author, COUNT(ID) AS count FROM $wpdb->posts WHERE post_type = 'post' AND " . get_private_posts_cap_sql( 'post' ) . " GROUP BY post_author") as $row )		$author_count[$row->post_author] = $row->count;	foreach ( (array) $authors as $author ) {		$link = '';		$author = get_userdata( $author->ID );		$posts = (isset($author_count[$author->ID])) ? $author_count[$author->ID] : 0;		$name = $author->display_name;		if ( $show_fullname && ($author->first_name != '' && $author->last_name != '') )			$name = "$author->first_name $author->last_name";		if( !$html ) {			if ( $posts == 0 ) {				if ( ! $hide_empty )					$return .= $name . ', ';			} else				$return .= $name . ', ';			// No need to go further to process HTML.			continue;		}		if ( !($posts == 0 && $hide_empty) && 'list' == $style )			$return .= '<li>';		if ( $posts == 0 ) {			if ( ! $hide_empty )				$link = $name;		} else {			$link = '<a href="' . get_author_posts_url($author->ID, $author->user_nicename) . '" title="' . esc_attr( sprintf(__("Posts by %s"), $author->display_name) ) . '">' . $name . '</a>';			if ( (! empty($feed_image)) || (! empty($feed)) ) {				$link .= ' ';				if (empty($feed_image))					$link .= '(';				$link .= '<a href="' . get_author_feed_link($author->ID) . '"';				if ( !empty($feed) ) {					$title = ' title="' . esc_attr($feed) . '"';					$alt = ' alt="' . esc_attr($feed) . '"';					$name = $feed;					$link .= $title;				}				$link .= '>';				if ( !empty($feed_image) )					$link .= "<img src=\"" . esc_url($feed_image) . "\" style=\"border: none;\"$alt$title" . ' />';				else					$link .= $name;				$link .= '</a>';				if ( empty($feed_image) )					$link .= ')';			}			if ( $optioncount )				$link .= ' ('. $posts . ')';		}		if ( $posts || ! $hide_empty )			$return .= $link . ( ( 'list' == $style ) ? '</li>' : ', ' );	}	$return = trim($return, ', ');	if ( ! $echo )		return $return;	echo $return;}?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the Unix `diff` program via shell_exec to compute the * differences between the two input arrays. * * Copyright 2007-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Milian Wolff <mail@milianw.de> * @package Text_Diff * @since   0.3.0 */class Text_Diff_Engine_shell {    /**     * Path to the diff executable     *     * @var string     */    var $_diffCommand = 'diff';    /**     * Returns the array of differences.     *     * @param array $from_lines lines of text from old file     * @param array $to_lines   lines of text from new file     *     * @return array all changes made (array with Text_Diff_Op_* objects)     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        $temp_dir = Text_Diff::_getTempDir();        // Execute gnu diff or similar to get a standard diff file.        $from_file = tempnam($temp_dir, 'Text_Diff');        $to_file = tempnam($temp_dir, 'Text_Diff');        $fp = fopen($from_file, 'w');        fwrite($fp, implode("\n", $from_lines));        fclose($fp);        $fp = fopen($to_file, 'w');        fwrite($fp, implode("\n", $to_lines));        fclose($fp);        $diff = shell_exec($this->_diffCommand . ' ' . $from_file . ' ' . $to_file);        unlink($from_file);        unlink($to_file);        if (is_null($diff)) {            // No changes were made            return array(new Text_Diff_Op_copy($from_lines));        }        $from_line_no = 1;        $to_line_no = 1;        $edits = array();        // Get changed lines by parsing something like:        // 0a1,2        // 1,2c4,6        // 1,5d6        preg_match_all('#^(\d+)(?:,(\d+))?([adc])(\d+)(?:,(\d+))?$#m', $diff,            $matches, PREG_SET_ORDER);        foreach ($matches as $match) {            if (!isset($match[5])) {                // This paren is not set every time (see regex).                $match[5] = false;            }            if ($match[3] == 'a') {                $from_line_no--;            }            if ($match[3] == 'd') {                $to_line_no--;            }            if ($from_line_no < $match[1] || $to_line_no < $match[4]) {                // copied lines                assert('$match[1] - $from_line_no == $match[4] - $to_line_no');                array_push($edits,                    new Text_Diff_Op_copy(                        $this->_getLines($from_lines, $from_line_no, $match[1] - 1),                        $this->_getLines($to_lines, $to_line_no, $match[4] - 1)));            }            switch ($match[3]) {            case 'd':                // deleted lines                array_push($edits,                    new Text_Diff_Op_delete(                        $this->_getLines($from_lines, $from_line_no, $match[2])));                $to_line_no++;                break;            case 'c':                // changed lines                array_push($edits,                    new Text_Diff_Op_change(                        $this->_getLines($from_lines, $from_line_no, $match[2]),                        $this->_getLines($to_lines, $to_line_no, $match[5])));                break;            case 'a':                // added lines                array_push($edits,                    new Text_Diff_Op_add(                        $this->_getLines($to_lines, $to_line_no, $match[5])));                $from_line_no++;                break;            }        }        if (!empty($from_lines)) {            // Some lines might still be pending. Add them as copied            array_push($edits,                new Text_Diff_Op_copy(                    $this->_getLines($from_lines, $from_line_no,                                     $from_line_no + count($from_lines) - 1),                    $this->_getLines($to_lines, $to_line_no,                                     $to_line_no + count($to_lines) - 1)));        }        return $edits;    }    /**     * Get lines from either the old or new text     *     * @access private     *     * @param array &$text_lines Either $from_lines or $to_lines     * @param int   &$line_no    Current line number     * @param int   $end         Optional end line, when we want to chop more     *                           than one line.     *     * @return array The chopped lines     */    function _getLines(&$text_lines, &$line_no, $end = false)    {        if (!empty($end)) {            $lines = array();            // We can shift even more            while ($line_no <= $end) {                array_push($lines, array_shift($text_lines));                $line_no++;            }        } else {            $lines = array(array_shift($text_lines));            $line_no++;        }        return $lines;    }}
<?php/** * WordPress Installer * * @package WordPress * @subpackage Administration */// Sanity check.if ( false ) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" ><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title>Error: PHP is not running</title></head><body>	<h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1>	<h2>Error: PHP is not running</h2>	<p>WordPress requires that your web server is running PHP. Your server does not have PHP installed, or PHP is turned off.</p></body></html><?php}/** * We are installing WordPress. * * @since 1.5.1 * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );/** Load WordPress Administration Upgrade API */require_once( dirname( __FILE__ ) . '/includes/upgrade.php' );/** Load wpdb */require_once(dirname(dirname(__FILE__)) . '/wp-includes/wp-db.php');$step = isset( $_GET['step'] ) ? $_GET['step'] : 0;/** * Display install header. * * @since 2.5.0 * @package WordPress * @subpackage Installer */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e( 'WordPress &rsaquo; Installation' ); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php} // end display_header()/** * Display installer setup form. * * @since 2.8.0 * @package WordPress * @subpackage Installer */function display_setup_form( $error = null ) {	global $wpdb;	$user_table = ( $wpdb->get_var("SHOW TABLES LIKE '$wpdb->users'") != null );	// Ensure that Blogs appear in search engines by default	$blog_public = 1;	if ( ! empty( $_POST ) )		$blog_public = isset( $_POST['blog_public'] );	$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';	$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';	$admin_password = isset($_POST['admin_password']) ? trim( stripslashes( $_POST['admin_password'] ) ) : '';	$admin_email  = isset( $_POST['admin_email']  ) ? trim( stripslashes( $_POST['admin_email'] ) ) : '';	if ( ! is_null( $error ) ) {?><p class="message"><?php printf( __( '<strong>ERROR</strong>: %s' ), $error ); ?></p><?php } ?><form id="setup" method="post" action="install.php?step=2">	<table class="form-table">		<tr>			<th scope="row"><label for="weblog_title"><?php _e( 'Site Title' ); ?></label></th>			<td><input name="weblog_title" type="text" id="weblog_title" size="25" value="<?php echo esc_attr( $weblog_title ); ?>" /></td>		</tr>		<tr>			<th scope="row"><label for="user_name"><?php _e('Username'); ?></label></th>			<td>			<?php			if ( $user_table ) {				_e('User(s) already exists.');			} else {				?><input name="user_name" type="text" id="user_login" size="25" value="<?php echo esc_attr( sanitize_user( $user_name, true ) ); ?>" />				<p><?php _e( 'Usernames can have only alphanumeric characters, spaces, underscores, hyphens, periods and the @ symbol.' ); ?></p>			<?php			} ?>			</td>		</tr>		<?php if ( ! $user_table ) : ?>		<tr>			<th scope="row">				<label for="admin_password"><?php _e('Password, twice'); ?></label>				<p><?php _e('A password will be automatically generated for you if you leave this blank.'); ?></p>			</th>			<td>				<input name="admin_password" type="password" id="pass1" size="25" value="" />				<p><input name="admin_password2" type="password" id="pass2" size="25" value="" /></p>				<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>				<p><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>			</td>		</tr>		<?php endif; ?>		<tr>			<th scope="row"><label for="admin_email"><?php _e( 'Your E-mail' ); ?></label></th>			<td><input name="admin_email" type="text" id="admin_email" size="25" value="<?php echo esc_attr( $admin_email ); ?>" />			<p><?php _e( 'Double-check your email address before continuing.' ); ?></p></td>		</tr>		<tr>			<td colspan="2"><label><input type="checkbox" name="blog_public" value="1" <?php checked( $blog_public ); ?> /> <?php _e( 'Allow my site to appear in search engines like Google and Technorati.' ); ?></label></td>		</tr>	</table>	<p class="step"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Install WordPress' ); ?>" class="button" /></p></form><?php} // end display_setup_form()// Let's check to make sure WP isn't already installed.if ( is_blog_installed() ) {	display_header();	die( '<h1>' . __( 'Already Installed' ) . '</h1><p>' . __( 'You appear to have already installed WordPress. To reinstall please clear your old database tables first.' ) . '</p><p class="step"><a href="../wp-login.php" class="button">' . __('Log In') . '</a></p></body></html>' );}$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );if ( !$mysql_compat && !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );elseif ( !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );elseif ( !$mysql_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );if ( !$mysql_compat || !$php_compat ) {	display_header();	die('<h1>' . __('Insufficient Requirements') . '</h1><p>' . $compat . '</p></body></html>');}switch($step) {	case 0: // Step 1	case 1: // Step 1, direct link.	  display_header();?><h1><?php _e( 'Welcome' ); ?></h1><p><?php printf( __( 'Welcome to the famous five minute WordPress installation process! You may want to browse the <a href="%s">ReadMe documentation</a> at your leisure. Otherwise, just fill in the information below and you&#8217;ll be on your way to using the most extendable and powerful personal publishing platform in the world.' ), '../readme.html' ); ?></p><h1><?php _e( 'Information needed' ); ?></h1><p><?php _e( 'Please provide the following information. Don&#8217;t worry, you can always change these settings later.' ); ?></p><?php		display_setup_form();		break;	case 2:		if ( ! empty( $wpdb->error ) )			wp_die( $wpdb->error->get_error_message() );		display_header();		// Fill in the data we gathered		$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';		$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';		$admin_password = isset($_POST['admin_password']) ? $_POST['admin_password'] : '';		$admin_password_check = isset($_POST['admin_password2']) ? $_POST['admin_password2'] : '';		$admin_email  = isset( $_POST['admin_email']  ) ?trim( stripslashes( $_POST['admin_email'] ) ) : '';		$public       = isset( $_POST['blog_public']  ) ? (int) $_POST['blog_public'] : 0;		// check e-mail address		$error = false;		if ( empty( $user_name ) ) {			// TODO: poka-yoke			display_setup_form( __('you must provide a valid username.') );			$error = true;		} elseif ( $user_name != sanitize_user( $user_name, true ) ) {			display_setup_form( __('the username you provided has invalid characters.') );			$error = true;		} elseif ( $admin_password != $admin_password_check ) {			// TODO: poka-yoke			display_setup_form( __( 'your passwords do not match. Please try again' ) );			$error = true;		} else if ( empty( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'you must provide an e-mail address.' ) );			$error = true;		} elseif ( ! is_email( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'that isn&#8217;t a valid e-mail address.  E-mail addresses look like: <code>username@example.com</code>' ) );			$error = true;		}		if ( $error === false ) {			$wpdb->show_errors();			$result = wp_install($weblog_title, $user_name, $admin_email, $public, '', $admin_password);			extract( $result, EXTR_SKIP );?><h1><?php _e( 'Success!' ); ?></h1><p><?php _e( 'WordPress has been installed. Were you expecting more steps? Sorry to disappoint.' ); ?></p><table class="form-table">	<tr>		<th><?php _e( 'Username' ); ?></th>		<td><code><?php echo esc_html( sanitize_user( $user_name, true ) ); ?></code></td>	</tr>	<tr>		<th><?php _e( 'Password' ); ?></th>		<td><?php		if ( ! empty( $password ) && empty($admin_password_check) )			echo '<code>'. esc_html($password) .'</code><br />';		echo "<p>$password_message</p>"; ?>		</td>	</tr></table><p class="step"><a href="../wp-login.php" class="button"><?php _e( 'Log In' ); ?></a></p><?php		}		break;}?><script type="text/javascript">var t = document.getElementById('weblog_title'); if (t){ t.focus(); }</script><script type="text/javascript" src="../wp-includes/js/jquery/jquery.js"></script><script type="text/javascript" src="js/password-strength-meter.js"></script><script type="text/javascript" src="js/user-profile.js"></script><script type="text/javascript" src="js/utils.js"></script><script type='text/javascript'>/* <![CDATA[ */var pwsL10n = { empty: "<?php echo esc_js( __( 'Strength indicator' ) ); ?>", short: "<?php echo esc_js( __( 'Very weak' ) ); ?>", bad: "<?php echo esc_js( __( 'Weak' ) ); ?>", good: "<?php echo esc_js( __( 'Medium' ) ); ?>", strong: "<?php echo esc_js( __( 'Strong' ) ); ?>", mismatch: "<?php echo esc_js( __( 'Mismatch' ) ); ?>"};try{convertEntities(pwsL10n);}catch(e){};/* ]]> */</script></body></html>
<?php/** * BackPress styles procedural API. * * @package BackPress * @since r79 *//** * Display styles that are in the queue or part of $handles. * * @since r79 * @uses do_action() Calls 'wp_print_styles' hook. * @global object $wp_styles The WP_Styles object for printing styles. * * @param array|bool $handles Styles to be printed. An empty array prints the queue, *  an array with one string prints that style, and an array of strings prints those styles. * @return bool True on success, false on failure. */function wp_print_styles( $handles = false ) {	do_action( 'wp_print_styles' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_styles = new WP_Styles();	}	return $wp_styles->do_items( $handles );}/** * Register CSS style file. * * @since r79 * @see WP_Styles::add() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number. Set to NULL to disable. *  Used to ensure that the correct version is sent to the client regardless of caching. * @param string $media The media for which this stylesheet has been defined. */function wp_register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->add( $handle, $src, $deps, $ver, $media );}/** * Remove a registered CSS file. * * @since r79 * @see WP_Styles::remove() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. */function wp_deregister_style( $handle ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->remove( $handle );}/** * Enqueue a CSS style file. * * Registers the style if src provided (does NOT overwrite) and enqueues. * * @since r79 * @see WP_Styles::add(), WP_Styles::enqueue() * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles (names) of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number, if it has one. This parameter *  is used to ensure that the correct version is sent to the client regardless of caching, and so should be included *  if a version number is available and makes sense for the stylesheet. * @param string $media The media for which this stylesheet has been defined. */function wp_enqueue_style( $handle, $src = false, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_styles->add( $_handle[0], $src, $deps, $ver, $media );	}	$wp_styles->enqueue( $handle );}/** * Check whether style has been added to WordPress Styles. * * The values for list defaults to 'queue', which is the same as wp_enqueue_style(). * * @since WP unknown; BP unknown * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. * @param string $list Values are 'registered', 'done', 'queue' and 'to_do'. * @return bool True on success, false on failure. */function wp_style_is( $handle, $list = 'queue' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$query = $wp_styles->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?phpif ( !defined( 'ABSPATH' ) )	exit;/** @ignore */function dvortr( $str ) {	return strtr(		$str,		'\',.pyfgcrl/=\\aoeuidhtns-;qjkxbmwvz"<>PYFGCRL?+|AOEUIDHTNS_:QJKXBMWVZ[]',		'qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?-='	);}$j = esc_url( site_url( '/wp-includes/js/jquery/jquery.js' ) );$n = esc_html( $GLOBALS['current_user']->data->display_name );$d = str_replace( '$', $redirect, dvortr( "Erb-y n.y ydco dall.b aiacbv Wa ce]-irxajt- dp.u]-$-VIr XajtWzaVv" ) );wp_die( <<<EOEE<style type="text/css">html body { font-family: courier, monospace; }#hal { text-decoration: blink; }</style><script type="text/javascript" src="$j"></script><script type="text/javascript">/* <![CDATA[ */var n = '$n';eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p}('6(4(){2 e=6(\\'#Q\\').v();2 i=\\'\\\\\\',.R/=\\\\\\\\S-;T"<>U?+|V:W[]X{}\\'.u(\\'\\');2 o=\\'Y[]\\\\\\\\Z;\\\\\\'10,./11{}|12:"13<>?-=14+\\'.u(\\'\\');2 5=4(s){r=\\'\\';6.15(s.u(\\'\\'),4(){2 t=16.D();2 c=6.17(t,i);r+=\\'\$\\'==t?n:(-1==c?t:o[c])});j r};2 a=[\\'O.E[18 e.y.19.1a\\',\\'1b 1c. 1d .1e.,1f 1g\\',\\'O.E e.1h 1i 8\\',\\'9\\',\\'0\\'];2 b=[\\'<1j. 1k \$1l\\',\\'1m. 1n 1o 1p\\',\\'1q, 1r. ,1s. 1t\\'];2 w=[];2 h=6(5(\\'#1u\\'));6(5(\\'1v\\')).1w(4(e){7(1x!==e.1y){j}7(x&&x.F){x.F();j G}1z.1A=6(5(\\'#1B\\')).1C(\\'1D\\');j G});2 k=4(){2 l=a.H();7(\\'I\\'==J l){7(m){2 c={};c[5(\\'1E\\')]=5(\\'1F\\');c[5(\\'1G\\')]=5(\\'1H..b\\');6(5(\\'1I 1J\\')).1K(c);p();h.v().1L({1M:1},z,\\'1N\\',4(){h.K()});d(m,L)}j}w=5(l).u(\\'\\');A()};2 A=4(){B=w.H();7(\\'I\\'==J B){7(m){h.M(5(\\'1O 1P\\'));d(k,C)}N{7(a.P){d(p,C);d(k,z)}N{d(4(){p();h.v()},C);d(4(){e.K()},L)}}j}h.M(B.D());d(A,1Q)};2 m=4(){a=b;m=1R;k()};p=4(){2 f=6(\\'p\\').1S(0);2 g=6.1T(f.q).1U();1V(2 g=f.q.P;g>0;g--){7(3==f.q[g-1].1W||\\'1X\\'==f.q[g-1].1Y.1Z()){f.20(f.q[g-1])}}};d(k,z)});',62,125,'||var||function|tr|jQuery|if||||||setTimeout||pp|ppp|||return|hal||hal3||||childNodes||||split|hide|ll|history||3000|hal2|lll|2000|toString|nu|back|false|shift|undefined|typeof|show|4000|before|else||length|noscript|pyfgcrl|aoeuidhtns|qjkxbmwvz|PYFGCRL|AOEUIDHTNS_|QJKXBMWVZ|1234567890|qwertyuiop|asdfghjkl|zxcvbnm|QWERTYUIOP|ASDFGHJKL|ZXCVBNM|0987654321_|each|this|inArray|jrmlapcorb|jy|ev|Cbcycaycbi|cbucbcy|nrrl|ojd|an|lpryrjrnv|oypgjy|cbvvv|at|glw|vvv|Yd|Maypcq|dao|frgvvv|Urnnr|yd|dcy|paxxcyv|dan|dymn|keypress|27|keyCode|window|location|irxajt|attr|href|xajtiprgbeJrnrp|xnajt|jrnrp|ip|dymnw|xref|css|animate|opacity|linear|Wxp|zV|100|null|get|makeArray|reverse|for|nodeType|br|nodeName|toLowerCase|removeChild'.split('|'),0,{}))/* ]]> */</script><span id="noscript">$d</span><blink id="hal">&#x258c;</blink>EOEE,dvortr( 'Eabi.p!' ));
<?php/** * Multisite network settings administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_options' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Options' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen sets and changes options for the network as a whole. The first site is the main site in the network and network options are pulled from that original site&#8217;s options.') . '</p>' .	'<p>' . __('Operational settings has fields for the network&#8217;s name and admin email.') . '</p>' .	'<p>' . __('Dashboard Site is an option to give a site to users who do not have a site on the system. Their default role is Subscriber, but that default can be changed. The Admin Notice Feed can provide a notice on all dashboards of the latest post via RSS or Atom, or provide no such notice if left blank.') . '</p>' .	'<p>' . __('Registration settings can disable/enable public signups. If you let others sign up for a site, install spam plugins. Spaces, not commas, should separate names banned as sites for this network.') . '</p>' .	'<p>' . __('New site settings are defaults applied when a new site is created in the network. These include welcome email for when a new site or user account is registered, and what&#8127;s put in the first post, page, comment, comment author, and comment URL.') . '</p>' .	'<p>' . __('Upload settings control the size of the uploaded files and the amount of available upload space for each site. You can change the default value for specific sites when you edit a particular site. Allowed file types are also listed (space separated only).') . '</p>' .	'<p>' . __('Checkboxes for media upload buttons set which are shown in the visual editor. If unchecked, a generic upload button is still visible; other media types can still be uploaded if on the allowed file types list.') . '</p>' .	'<p>' . __('Menu setting enables/disables the plugin menus from appearing for non super admins, so that only super admins, not site admins, have access to activate plugins.') . '</p>' .	'<p>' . __('Super admins can no longer be added on the Options screen. You must now go to the list of existing users on Super Admin > Users and click on Username or the Edit action link below that name. This goes to an Edit User page where you can check a box to grant super admin privileges.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Options_SubPanel" target="_blank">Network Options Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );if (isset($_GET['updated'])) {	?>	<div id="message" class="updated"><p><?php _e( 'Options saved.' ) ?></p></div>	<?php}?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e( 'Network Options' ) ?></h2>	<form method="post" action="ms-edit.php?action=siteoptions">		<?php wp_nonce_field( 'siteoptions' ); ?>		<h3><?php _e( 'Operational Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="site_name"><?php _e( 'Network Name' ) ?></label></th>				<td>					<input name="site_name" type="text" id="site_name" class="regular-text" value="<?php echo esc_attr( $current_site->site_name ) ?>" />					<br />					<?php _e( 'What you would like to call this website.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_email"><?php _e( 'Network Admin Email' ) ?></label></th>				<td>					<input name="admin_email" type="text" id="admin_email" class="regular-text" value="<?php echo esc_attr( get_site_option('admin_email') ) ?>" />					<br />					<?php printf( __( 'Registration and support emails will come from this address. An address such as <code>support@%s</code> is recommended.' ), $current_site->domain ); ?>				</td>			</tr>		</table>		<h3><?php _e( 'Dashboard Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="dashboard_blog"><?php _e( 'Dashboard Site' ) ?></label></th>				<td>					<?php					if ( $dashboard_blog = get_site_option( 'dashboard_blog' ) ) {						$details = get_blog_details( $dashboard_blog );						$blogname = untrailingslashit( sanitize_user( str_replace( '.', '', str_replace( $current_site->domain . $current_site->path, '', $details->domain . $details->path ) ) ) );					} else {						$blogname = '';					}?>					<input name="dashboard_blog_orig" type="hidden" id="dashboard_blog_orig" value="<?php echo esc_attr( $blogname ); ?>" />					<input name="dashboard_blog" type="text" id="dashboard_blog" value="<?php echo esc_attr( $blogname ); ?>" class="regular-text" />					<br />					<?php _e( 'Site path (&#8220;dashboard&#8221;, &#8220;control&#8221;, &#8220;manager&#8221;, etc.) or blog ID.<br />New users are added to this site as the user role defined below if they don&#8217;t have a site. Leave blank for the main site. Users with the Subscriber role on the old site will be moved to the new site if changed. The new site will be created if it does not exist.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="default_user_role"><?php _e( 'Dashboard User Default Role' ) ?></label></th>				<td>					<select name="default_user_role" id="default_user_role"><?php					wp_dropdown_roles( get_site_option( 'default_user_role', 'subscriber' ) );					?>					</select>					<br />					<?php _e( 'The default role for new users on the Dashboard site. &#8220;Subscriber&#8221; or &#8220;Contributor&#8221; roles are recommended.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_notice_feed"><?php _e( 'Admin Notice Feed' ) ?></label></th>				<td><input name="admin_notice_feed" class="large-text" type="text" id="admin_notice_feed" value="<?php echo esc_attr( get_site_option( 'admin_notice_feed' ) ) ?>" size="80" /><br />				<?php _e( 'Display the latest post from this RSS or Atom feed on all site dashboards. Leave blank to disable.' ); ?><br />				<?php if ( get_site_option( 'admin_notice_feed' ) != get_home_url( $current_site->id, 'feed/' ) )					echo __( 'A good one to use would be the feed from your main site: ' ) . esc_url( get_home_url( $current_site->id, 'feed/' ) ) ?></td>			</tr>		</table>		<h3><?php _e( 'Registration Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Allow new registrations' ) ?></th>				<?php				if ( !get_site_option( 'registration' ) )					update_site_option( 'registration', 'none' );				$reg = get_site_option( 'registration' );				?>				<td>					<label><input name="registration" type="radio" id="registration1" value="none"<?php checked( $reg, 'none') ?> /> <?php _e( 'Registration is disabled.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration2" value="user"<?php checked( $reg, 'user') ?> /> <?php _e( 'User accounts may be registered.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration3" value="blog"<?php checked( $reg, 'blog') ?> /> <?php _e( 'Logged in users may register new sites.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration4" value="all"<?php checked( $reg, 'all') ?> /> <?php _e( 'Both sites and user accounts can be registered.' ); ?></label><br />					<p><?php _e( 'Disable or enable registration and who or what can be registered. (Default is disabled.)' ); ?></p>					<?php if ( is_subdomain_install() ) {						echo '<p>' . __( 'If registration is disabled, please set <code>NOBLOGREDIRECT</code> in <code>wp-config.php</code> to a URL you will redirect visitors to if they visit a non-existent site.' ) . '</p>';					} ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Registration notification' ) ?></th>				<?php				if ( !get_site_option( 'registrationnotification' ) )					update_site_option( 'registrationnotification', 'yes' );				?>				<td>					<label><input name="registrationnotification" type="checkbox" id="registrationnotification" value="yes"<?php checked( get_site_option( 'registrationnotification' ), 'yes' ) ?> /> <?php _e( 'Send the network admin an email notification every time someone registers a site or user account.' ) ?></label>				</td>			</tr>			<tr valign="top" id="addnewusers">				<th scope="row"><?php _e( 'Add New Users' ) ?></th>				<td>					<label><input name="add_new_users" type="checkbox" id="add_new_users" value="1"<?php checked( get_site_option( 'add_new_users' ) ) ?> /> <?php _e( 'Allow site administrators to add new users to their site via the "Users->Add New" page.' ); ?></label>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="illegal_names"><?php _e( 'Banned Names' ) ?></label></th>				<td>					<input name="illegal_names" type="text" id="illegal_names" class="large-text" value="<?php echo esc_attr( implode( " ", get_site_option( 'illegal_names' ) ) ); ?>" size="45" />					<br />					<?php _e( 'Users are not allowed to register these sites. Separate names by spaces.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="limited_email_domains"><?php _e( 'Limited Email Registrations' ) ?></label></th>				<td>					<?php $limited_email_domains = get_site_option( 'limited_email_domains' );					$limited_email_domains = str_replace( ' ', "\n", $limited_email_domains ); ?>					<textarea name="limited_email_domains" id="limited_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( $limited_email_domains == '' ? '' : implode( "\n", (array) $limited_email_domains ) ); ?></textarea>					<br />					<?php _e( 'If you want to limit site registrations to certain domains. One domain per line.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="banned_email_domains"><?php _e('Banned Email Domains') ?></label></th>				<td>					<textarea name="banned_email_domains" id="banned_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( get_site_option( 'banned_email_domains' ) == '' ? '' : implode( "\n", (array) get_site_option( 'banned_email_domains' ) ) ); ?></textarea>					<br />					<?php _e( 'If you want to ban domains from site registrations. One domain per line.' ) ?>				</td>			</tr>		</table>		<h3><?php _e('New Site Settings'); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="welcome_email"><?php _e( 'Welcome Email' ) ?></label></th>				<td>					<textarea name="welcome_email" id="welcome_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new site owners.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="welcome_user_email"><?php _e( 'Welcome User Email' ) ?></label></th>				<td>					<textarea name="welcome_user_email" id="welcome_user_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_user_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new users.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_post"><?php _e( 'First Post' ) ?></label></th>				<td>					<textarea name="first_post" id="first_post" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'first_post' ) ) ) ?></textarea>					<br />					<?php _e( 'The first post on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_page"><?php _e( 'First Page' ) ?></label></th>				<td>					<textarea name="first_page" id="first_page" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_page') ) ) ?></textarea>					<br />					<?php _e( 'The first page on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment"><?php _e( 'First Comment' ) ?></label></th>				<td>					<textarea name="first_comment" id="first_comment" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_comment') ) ) ?></textarea>					<br />					<?php _e( 'The first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_author"><?php _e( 'First Comment Author' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_author" id="first_comment_author" value="<?php echo get_site_option('first_comment_author') ?>" />					<br />					<?php _e( 'The author of the first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_url"><?php _e( 'First Comment URL' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_url" id="first_comment_url" value="<?php echo esc_attr( get_site_option( 'first_comment_url' ) ) ?>" />					<br />					<?php _e( 'The URL for the first comment on a new site.' ) ?>				</td>			</tr>		</table>		<h3><?php _e( 'Upload Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Media upload buttons' ) ?></th>				<?php $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ); ?>				<td><label><input type="checkbox" id="mu_media_buttons_image" name="mu_media_buttons[image]" value="1"<?php checked( ! empty( $mu_media_buttons['image'] ) ) ?>/> <?php _e( 'Images' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_video" name="mu_media_buttons[video]" value="1"<?php checked( ! empty( $mu_media_buttons['video'] ) ) ?>/> <?php _e( 'Videos' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_audio" name="mu_media_buttons[audio]" value="1"<?php checked( ! empty( $mu_media_buttons['audio'] ) ) ?>/> <?php _e( 'Music' ); ?></label><br />				<?php _e( 'The media upload buttons to display on the &#8220;Write Post&#8221; page. Make sure you update the allowed upload file types below as well.' ); ?></td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Site upload space' ) ?></th>				<td>				<label><input type="checkbox" id="upload_space_check_disabled" name="upload_space_check_disabled" value="0"<?php checked( get_site_option( 'upload_space_check_disabled' ), 0 ) ?>/> <?php printf( __( 'Limit total size of files uploaded to %s MB' ), '</label><label><input name="blog_upload_space" type="text" id="blog_upload_space" value="' . esc_attr( get_site_option('blog_upload_space', 10) ) . '" size="3" />' ); ?></label><br />				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="upload_filetypes"><?php _e( 'Upload file types' ) ?></label></th>				<td><input name="upload_filetypes" type="text" id="upload_filetypes" class="large-text" value="<?php echo esc_attr( get_site_option('upload_filetypes', 'jpg jpeg png gif') ) ?>" size="45" /></td>			</tr>			<tr valign="top">				<th scope="row"><label for="fileupload_maxk"><?php _e( 'Max upload file size' ) ?></label></th>				<td><?php printf( _x( '%s KB', 'File size in kilobytes' ), '<input name="fileupload_maxk" type="text" id="fileupload_maxk" value="' . esc_attr( get_site_option( 'fileupload_maxk', 300 ) ) . '" size="5" />' ); ?></td>			</tr>		</table><?php		$languages = get_available_languages();		if ( ! empty( $languages ) ) {			$lang = get_site_option( 'WPLANG' );?>		<h3><?php _e( 'Network Wide Settings' ); ?></h3>		<div class="updated inline"><p><strong><?php _e( 'Notice:' ); ?></strong> <?php _e( 'These settings may be overridden by site owners.' ); ?></p></div>		<table class="form-table">			<?php				?>				<tr valign="top">					<th><label for="WPLANG"><?php _e( 'Default Language' ) ?></label></th>					<td>						<select name="WPLANG" id="WPLANG">							<?php mu_dropdown_languages( $languages, get_site_option( 'WPLANG' ) ); ?>						</select>					</td>				</tr>		</table><?php		} // languages?>		<h3><?php _e( 'Menu Settings' ); ?></h3>		<table id="menu" class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Enable administration menus' ); ?></th>				<td>			<?php			$menu_perms = get_site_option( 'menu_items' );			$menu_items = apply_filters( 'mu_menu_items', array( 'plugins' => __( 'Plugins' ) ) );			foreach ( (array) $menu_items as $key => $val ) {				echo "<label><input type='checkbox' name='menu_items[" . $key . "]' value='1'" .  ( isset( $menu_perms[$key] ) ? checked( $menu_perms[$key], '1', false ) : '' ) . " /> " . esc_html( $val ) . "</label><br/>";			}			?>				</td>			</tr>		</table>		<?php do_action( 'wpmu_options' ); // Add more options here ?>		<p class="submit"><input type="submit" class="button-primary" name="Submit" value="<?php esc_attr_e( 'Save Changes' ) ?>" /></p>	</form></div><?php include( './admin-footer.php' ); ?>
<?php/** * WordPress Cron Implementation for hosts, which do not offer CRON or for which * the user has not set up a CRON job pointing to this file. * * The HTTP request to this file will not slow down the visitor who happens to * visit when the cron job is needed to run. * * @package WordPress */ignore_user_abort(true);if ( !empty($_POST) || defined('DOING_AJAX') || defined('DOING_CRON') )	die();/** * Tell WordPress we are doing the CRON task. * * @var bool */define('DOING_CRON', true);if ( !defined('ABSPATH') ) {	/** Set up WordPress environment */	require_once('./wp-load.php');}if ( false === $crons = _get_cron_array() )	die();$keys = array_keys( $crons );$local_time = time();if ( isset($keys[0]) && $keys[0] > $local_time )	die();foreach ($crons as $timestamp => $cronhooks) {	if ( $timestamp > $local_time )		break;	foreach ($cronhooks as $hook => $keys) {		foreach ($keys as $k => $v) {			$schedule = $v['schedule'];			if ($schedule != false) {				$new_args = array($timestamp, $schedule, $hook, $v['args']);				call_user_func_array('wp_reschedule_event', $new_args);			}			wp_unschedule_event($timestamp, $hook, $v['args']); 			do_action_ref_array($hook, $v['args']);		}	}}die();
<?php/** * The plugin API is located in this file, which allows for creating actions * and filters and hooking functions, and methods. The functions or methods will * then be run when the action or filter is called. * * The API callback examples reference functions, but can be methods of classes. * To hook methods, you'll need to pass an array one of two ways. * * Any of the syntaxes explained in the PHP documentation for the * {@link http://us2.php.net/manual/en/language.pseudo-types.php#language.types.callback 'callback'} * type are valid. * * Also see the {@link http://codex.wordpress.org/Plugin_API Plugin API} for * more information and examples on how to use a lot of these functions. * * @package WordPress * @subpackage Plugin * @since 1.5 *//** * Hooks a function or method to a specific filter action. * * Filters are the hooks that WordPress launches to modify text of various types * before adding it to the database or sending it to the browser screen. Plugins * can specify that one or more of its PHP functions is executed to * modify specific types of text at these times, using the Filter API. * * To use the API, the following code should be used to bind a callback to the * filter. * * <code> * function example_hook($example) { echo $example; } * add_filter('example_filter', 'example_hook'); * </code> * * In WordPress 1.5.1+, hooked functions can take extra arguments that are set * when the matching do_action() or apply_filters() call is run. The * $accepted_args allow for calling functions only when the number of args * match. Hooked functions can take extra arguments that are set when the * matching do_action() or apply_filters() call is run. For example, the action * comment_id_not_found will pass any functions that hook onto it the ID of the * requested comment. * * <strong>Note:</strong> the function will return true no matter if the * function was hooked fails or not. There are no checks for whether the * function exists beforehand and no checks to whether the <tt>$function_to_add * is even a string. It is up to you to take care and this is done for * optimization purposes, so everything is as quick as possible. * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters added in the form of *	wp_filter['tag']['array of priorities']['array of functions serialized']['array of ['array (functions, accepted_args)']'] * @global array $merged_filters Tracks the tags that need to be merged for later. If the hook is added, it doesn't need to run through that process. * * @param string $tag The name of the filter to hook the $function_to_add to. * @param callback $function_to_add The name of the function to be called when the filter is applied. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). * @return boolean true */function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	global $wp_filter, $merged_filters;	$idx = _wp_filter_build_unique_id($tag, $function_to_add, $priority);	$wp_filter[$tag][$priority][$idx] = array('function' => $function_to_add, 'accepted_args' => $accepted_args);	unset( $merged_filters[ $tag ] );	return true;}/** * Check if any filter has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @global array $wp_filter Stores all of the filters * * @param string $tag The name of the filter hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_filter($tag, $function_to_check = false) {	global $wp_filter;	$has = !empty($wp_filter[$tag]);	if ( false === $function_to_check || false == $has )		return $has;	if ( !$idx = _wp_filter_build_unique_id($tag, $function_to_check, false) )		return false;	foreach ( (array) array_keys($wp_filter[$tag]) as $priority ) {		if ( isset($wp_filter[$tag][$priority][$idx]) )			return $priority;	}	return false;}/** * Call the functions added to a filter hook. * * The callback functions attached to filter hook $tag are invoked by calling * this function. This function can be used to create a new filter hook by * simply calling this function with the name of the new hook specified using * the $tag parameter. * * The function allows for additional arguments to be added and passed to hooks. * <code> * function example_hook($string, $arg1, $arg2) * { *		//Do stuff *		return $string; * } * $value = apply_filters('example_filter', 'filter me', 'arg1', 'arg2'); * </code> * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param mixed $value The value on which the filters hooked to <tt>$tag</tt> are applied on. * @param mixed $var,... Additional variables passed to the functions hooked to <tt>$tag</tt>. * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters($tag, $value) {	global $wp_filter, $merged_filters, $wp_current_filter;	$args = array();	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$args = func_get_args();		_wp_call_all_hook($args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $value;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	if ( empty($args) )		$args = func_get_args();	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) ){				$args[1] = $value;				$value = call_user_func_array($the_['function'], array_slice($args, 1, (int) $the_['accepted_args']));			}	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $value;}/** * Execute functions hooked on a specific filter hook, specifying arguments in an array. * * @see apply_filters() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 3.0.0 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters_ref_array($tag, $args) {	global $wp_filter, $merged_filters, $wp_current_filter;	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $args[0];	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $args[0];}/** * Removes a function from a specified filter hook. * * This function removes a function attached to a specified filter hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * To remove a hook, the $function_to_remove and $priority arguments must match * when the hook was added. This goes for both filters and actions. No warning * will be given on removal failure. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The filter hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional. The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function existed before it was removed. */function remove_filter($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	$function_to_remove = _wp_filter_build_unique_id($tag, $function_to_remove, $priority);	$r = isset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);	if ( true === $r) {		unset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);		if ( empty($GLOBALS['wp_filter'][$tag][$priority]) )			unset($GLOBALS['wp_filter'][$tag][$priority]);		unset($GLOBALS['merged_filters'][$tag]);	}	return $r;}/** * Remove all of the hooks from a filter. * * @since 2.7 * * @param string $tag The filter to remove hooks from. * @param int $priority The priority number to remove. * @return bool True when finished. */function remove_all_filters($tag, $priority = false) {	global $wp_filter, $merged_filters;	if( isset($wp_filter[$tag]) ) {		if( false !== $priority && isset($wp_filter[$tag][$priority]) )			unset($wp_filter[$tag][$priority]);		else			unset($wp_filter[$tag]);	}	if( isset($merged_filters[$tag]) )		unset($merged_filters[$tag]);	return true;}/** * Retrieve the name of the current filter or action. * * @package WordPress * @subpackage Plugin * @since 2.5 * * @return string Hook name of the current filter or action. */function current_filter() {	global $wp_current_filter;	return end( $wp_current_filter );}/** * Hooks a function on to a specific action. * * Actions are the hooks that the WordPress core launches at specific points * during execution, or when specific events occur. Plugins can specify that * one or more of its PHP functions are executed at these points, using the * Action API. * * @uses add_filter() Adds an action. Parameter list and functionality are the same. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The name of the action to which the $function_to_add is hooked. * @param callback $function_to_add The name of the function you wish to be called. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). */function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	return add_filter($tag, $function_to_add, $priority, $accepted_args);}/** * Execute functions hooked on a specific action hook. * * This function invokes all functions attached to action hook $tag. It is * possible to create new action hooks by simply calling this function, * specifying the name of the new hook using the <tt>$tag</tt> parameter. * * You can pass extra arguments to the hooks, much like you can with * apply_filters(). * * @see apply_filters() This function works similar with the exception that * nothing is returned and only the functions or methods are called. * * @package WordPress * @subpackage Plugin * @since 1.2 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action. * @return null Will return null if $tag does not exist in $wp_filter array */function do_action($tag, $arg = '') {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	$args = array();	if ( is_array($arg) && 1 == count($arg) && isset($arg[0]) && is_object($arg[0]) ) // array(&$this)		$args[] =& $arg[0];	else		$args[] = $arg;	for ( $a = 2; $a < func_num_args(); $a++ )		$args[] = func_get_arg($a);	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach ( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Retrieve the number times an action is fired. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action hook. * @return int The number of times action hook <tt>$tag</tt> is fired */function did_action($tag) {	global $wp_actions;	if ( ! isset( $wp_actions ) || ! isset( $wp_actions[$tag] ) )		return 0;	return $wp_actions[$tag];}/** * Execute functions hooked on a specific action hook, specifying arguments in an array. * * @see do_action() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return null Will return null if $tag does not exist in $wp_filter array */function do_action_ref_array($tag, $args) {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Check if any action has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @see has_filter() has_action() is an alias of has_filter(). * * @param string $tag The name of the action hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_action($tag, $function_to_check = false) {	return has_filter($tag, $function_to_check);}/** * Removes a function from a specified action hook. * * This function removes a function attached to a specified action hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The action hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function is removed. */function remove_action($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	return remove_filter($tag, $function_to_remove, $priority, $accepted_args);}/** * Remove all of the hooks from an action. * * @since 2.7 * * @param string $tag The action to remove hooks from. * @param int $priority The priority number to remove them from. * @return bool True when finished. */function remove_all_actions($tag, $priority = false) {	return remove_all_filters($tag, $priority);}//// Functions for handling plugins.///** * Gets the basename of a plugin. * * This method extracts the name of a plugin from its filename. * * @package WordPress * @subpackage Plugin * @since 1.5 * * @access private * * @param string $file The filename of plugin. * @return string The name of a plugin. * @uses WP_PLUGIN_DIR */function plugin_basename($file) {	$file = str_replace('\\','/',$file); // sanitize for Win32 installs	$file = preg_replace('|/+|','/', $file); // remove any duplicate slash	$plugin_dir = str_replace('\\','/',WP_PLUGIN_DIR); // sanitize for Win32 installs	$plugin_dir = preg_replace('|/+|','/', $plugin_dir); // remove any duplicate slash	$mu_plugin_dir = str_replace('\\','/',WPMU_PLUGIN_DIR); // sanitize for Win32 installs	$mu_plugin_dir = preg_replace('|/+|','/', $mu_plugin_dir); // remove any duplicate slash	$file = preg_replace('#^' . preg_quote($plugin_dir, '#') . '/|^' . preg_quote($mu_plugin_dir, '#') . '/#','',$file); // get relative path from plugins dir	$file = trim($file, '/');	return $file;}/** * Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the filesystem path of the directory that contains the plugin */function plugin_dir_path( $file ) {	return trailingslashit( dirname( $file ) );}/** * Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the URL path of the directory that contains the plugin */function plugin_dir_url( $file ) {	return trailingslashit( plugins_url( '', $file ) );}/** * Set the activation hook for a plugin. * * When a plugin is activated, the action 'activate_PLUGINNAME' hook is * activated. In the name of this hook, PLUGINNAME is replaced with the name of * the plugin, including the optional subdirectory. For example, when the plugin * is located in wp-content/plugin/sampleplugin/sample.php, then the name of * this hook will become 'activate_sampleplugin/sample.php'. When the plugin * consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_activation_hook($file, $function) {	$file = plugin_basename($file);	add_action('activate_' . $file, $function);}/** * Set the deactivation hook for a plugin. * * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is * deactivated. In the name of this hook, PLUGINNAME is replaced with the name * of the plugin, including the optional subdirectory. For example, when the * plugin is located in wp-content/plugin/sampleplugin/sample.php, then * the name of this hook will become 'activate_sampleplugin/sample.php'. * * When the plugin consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_deactivation_hook($file, $function) {	$file = plugin_basename($file);	add_action('deactivate_' . $file, $function);}/** * Set the uninstallation hook for a plugin. * * Registers the uninstall hook that will be called when the user clicks on the * uninstall link that calls for the plugin to uninstall itself. The link won't * be active unless the plugin hooks into the action. * * The plugin should not run arbitrary code outside of functions, when * registering the uninstall hook. In order to run using the hook, the plugin * will have to be included, which means that any code laying outside of a * function will be run during the uninstall process. The plugin should not * hinder the uninstall process. * * If the plugin can not be written without running code within the plugin, then * the plugin should create a file named 'uninstall.php' in the base plugin * folder. This file will be called, if it exists, during the uninstall process * bypassing the uninstall hook. The plugin, when using the 'uninstall.php' * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before * executing. * * @since 2.7 * * @param string $file * @param callback $callback The callback to run when the hook is called. */function register_uninstall_hook($file, $callback) {	// The option should not be autoloaded, because it is not needed in most	// cases. Emphasis should be put on using the 'uninstall.php' way of	// uninstalling the plugin.	$uninstallable_plugins = (array) get_option('uninstall_plugins');	$uninstallable_plugins[plugin_basename($file)] = $callback;	update_option('uninstall_plugins', $uninstallable_plugins);}/** * Calls the 'all' hook, which will process the functions hooked into it. * * The 'all' hook passes all of the arguments or parameters that were used for * the hook, which this function was called for. * * This function is used internally for apply_filters(), do_action(), and * do_action_ref_array() and is not meant to be used from outside those * functions. This function does not check for the existence of the all hook, so * it will fail unless the all hook exists prior to this function call. * * @package WordPress * @subpackage Plugin * @since 2.5 * @access private * * @uses $wp_filter Used to process all of the functions in the 'all' hook * * @param array $args The collected parameters from the hook that was called. * @param string $hook Optional. The hook name that was used to call the 'all' hook. */function _wp_call_all_hook($args) {	global $wp_filter;	reset( $wp_filter['all'] );	do {		foreach( (array) current($wp_filter['all']) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], $args);	} while ( next($wp_filter['all']) !== false );}/** * Build Unique ID for storage and retrieval. * * The old way to serialize the callback caused issues and this function is the * solution. It works by checking for objects and creating an a new property in * the class to keep track of the object and new objects of the same class that * need to be added. * * It also allows for the removal of actions and filters for objects after they * change class properties. It is possible to include the property $wp_filter_id * in your class and set it to "null" or a number to bypass the workaround. * However this will prevent you from adding new classes and any new classes * will overwrite the previous hook by the same class. * * Functions and static method callbacks are just returned as strings and * shouldn't have any speed penalty. * * @package WordPress * @subpackage Plugin * @access private * @since 2.2.3 * @link http://trac.wordpress.org/ticket/3875 * * @global array $wp_filter Storage for all of the filters and actions * @param string $tag Used in counting how many hooks were applied * @param callback $function Used for creating unique id * @param int|bool $priority Used in counting how many hooks were applied.  If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise. * @param string $type filter or action * @return string|bool Unique ID for usage as array key or false if $priority === false and $function is an object reference, and it does not already have a uniqe id. */function _wp_filter_build_unique_id($tag, $function, $priority) {	global $wp_filter;	static $filter_id_count = 0;	if ( is_string($function) )		return $function;	if ( is_object($function) ) {		// Closures are currently implemented as objects		$function = array( $function, '' );	} else {		$function = (array) $function;	}	if (is_object($function[0]) ) {		// Object Class Calling		if ( function_exists('spl_object_hash') ) {			return spl_object_hash($function[0]) . $function[1];		} else {			$obj_idx = get_class($function[0]).$function[1];			if ( !isset($function[0]->wp_filter_id) ) {				if ( false === $priority )					return false;				$obj_idx .= isset($wp_filter[$tag][$priority]) ? count((array)$wp_filter[$tag][$priority]) : $filter_id_count;				$function[0]->wp_filter_id = $filter_id_count;				++$filter_id_count;			} else {				$obj_idx .= $function[0]->wp_filter_id;			}			return $obj_idx;		}	} else if ( is_string($function[0]) ) {		// Static Calling		return $function[0].$function[1];	}}?>
