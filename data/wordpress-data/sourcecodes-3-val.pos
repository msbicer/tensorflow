<?php/** * Upgrade WordPress Page. * * @package WordPress * @subpackage Administration *//** * We are upgrading WordPress. * * @since unknown * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require( '../wp-load.php' );timer_start();require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );delete_site_transient('update_core');if ( isset( $_GET['step'] ) )	$step = $_GET['step'];else	$step = 0;// Do it.  No output.if ( 'upgrade_db' === $step ) {	wp_upgrade();	die( '0' );}$step = (int) $step;$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo( 'html_type' ); ?>; charset=<?php echo get_option( 'blog_charset' ); ?>" />	<title><?php _e( 'WordPress &rsaquo; Upgrade' ); ?></title>	<?php	wp_admin_css( 'install', true );	wp_admin_css( 'ie', true );	?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php if ( get_option( 'db_version' ) == $wp_db_version || !is_blog_installed() ) : ?><h2><?php _e( 'No Upgrade Required' ); ?></h2><p><?php _e( 'Your WordPress database is already up-to-date!' ); ?></p><p class="step"><a class="button" href="<?php echo get_option( 'home' ); ?>/"><?php _e( 'Continue' ); ?></a></p><?php elseif ( !$php_compat || !$mysql_compat ) :	if ( !$mysql_compat && !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );	elseif ( !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );	elseif ( !$mysql_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );?><?php else :switch ( $step ) :	case 0:		$goback = stripslashes( wp_get_referer() );		$goback = esc_url_raw( $goback );		$goback = urlencode( $goback );?><h2><?php _e( 'Database Upgrade Required' ); ?></h2><p><?php _e( 'WordPress has been updated! Before we send you on your way, we have to upgrade your database to the newest version.' ); ?></p><p><?php _e( 'The upgrade process may take a little while, so please be patient.' ); ?></p><p class="step"><a class="button" href="upgrade.php?step=1&amp;backto=<?php echo $goback; ?>"><?php _e( 'Upgrade WordPress Database' ); ?></a></p><?php		break;	case 1:		wp_upgrade();			$backto = !empty($_GET['backto']) ? stripslashes( urldecode( $_GET['backto'] ) ) :  __get_option( 'home' ) . '/';			$backto = esc_url_raw( $backto );			$backto = wp_validate_redirect($backto, __get_option( 'home' ) . '/');?><h2><?php _e( 'Upgrade Complete' ); ?></h2>	<p><?php _e( 'Your WordPress database has been successfully upgraded!' ); ?></p>	<p class="step"><a class="button" href="<?php echo $backto; ?>"><?php _e( 'Continue' ); ?></a></p><!--<pre><?php printf( __( '%s queries' ), $wpdb->num_queries ); ?><?php printf( __( '%s seconds' ), timer_stop( 0 ) ); ?></pre>--><?php		break;endswitch;endif;?></body></html>
<?php/** * A File upgrader class for WordPress. * * This set of classes are designed to be used to upgrade/install a local set of files on the filesystem via the Filesystem Abstraction classes. * * @link http://trac.wordpress.org/ticket/7875 consolidate plugin/theme/core upgrade/install functions * * @package WordPress * @subpackage Upgrader * @since 2.8.0 *//** * WordPress Upgrader class for Upgrading/Installing a local set of files via the Filesystem Abstraction classes from a Zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader {	var $strings = array();	var $skin = null;	var $result = array();	function WP_Upgrader($skin = null) {		return $this->__construct($skin);	}	function __construct($skin = null) {		if ( null == $skin )			$this->skin = new WP_Upgrader_Skin();		else			$this->skin = $skin;	}	function init() {		$this->skin->set_upgrader($this);		$this->generic_strings();	}	function generic_strings() {		$this->strings['bad_request'] = __('Invalid Data provided.');		$this->strings['fs_unavailable'] = __('Could not access filesystem.');		$this->strings['fs_error'] = __('Filesystem error.');		$this->strings['fs_no_root_dir'] = __('Unable to locate WordPress Root directory.');		$this->strings['fs_no_content_dir'] = __('Unable to locate WordPress Content directory (wp-content).');		$this->strings['fs_no_plugins_dir'] = __('Unable to locate WordPress Plugin directory.');		$this->strings['fs_no_themes_dir'] = __('Unable to locate WordPress Theme directory.');		/* translators: %s: directory name */		$this->strings['fs_no_folder'] = __('Unable to locate needed folder (%s).');		$this->strings['download_failed'] = __('Download failed.');		$this->strings['installing_package'] = __('Installing the latest version&#8230;');		$this->strings['folder_exists'] = __('Destination folder already exists.');		$this->strings['mkdir_failed'] = __('Could not create directory.');		$this->strings['bad_package'] = __('Incompatible Archive.');		$this->strings['maintenance_start'] = __('Enabling Maintenance mode&#8230;');		$this->strings['maintenance_end'] = __('Disabling Maintenance mode&#8230;');	}	function fs_connect( $directories = array() ) {		global $wp_filesystem;		if ( false === ($credentials = $this->skin->request_filesystem_credentials()) )			return false;		if ( ! WP_Filesystem($credentials) ) {			$error = true;			if ( is_object($wp_filesystem) && $wp_filesystem->errors->get_error_code() )				$error = $wp_filesystem->errors;			$this->skin->request_filesystem_credentials($error); //Failed to connect, Error and request again			return false;		}		if ( ! is_object($wp_filesystem) )			return new WP_Error('fs_unavailable', $this->strings['fs_unavailable'] );		if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )			return new WP_Error('fs_error', $this->strings['fs_error'], $wp_filesystem->errors);		foreach ( (array)$directories as $dir ) {			switch ( $dir ) {				case ABSPATH:					if ( ! $wp_filesystem->abspath() )						return new WP_Error('fs_no_root_dir', $this->strings['fs_no_root_dir']);					break;				case WP_CONTENT_DIR:					if ( ! $wp_filesystem->wp_content_dir() )						return new WP_Error('fs_no_content_dir', $this->strings['fs_no_content_dir']);					break;				case WP_PLUGIN_DIR:					if ( ! $wp_filesystem->wp_plugins_dir() )						return new WP_Error('fs_no_plugins_dir', $this->strings['fs_no_plugins_dir']);					break;				case WP_CONTENT_DIR . '/themes':					if ( ! $wp_filesystem->find_folder(WP_CONTENT_DIR . '/themes') )						return new WP_Error('fs_no_themes_dir', $this->strings['fs_no_themes_dir']);					break;				default:					if ( ! $wp_filesystem->find_folder($dir) )						return new WP_Error('fs_no_folder', sprintf($this->strings['fs_no_folder'], $dir));					break;			}		}		return true;	} //end fs_connect();	function download_package($package) {		if ( ! preg_match('!^(http|https|ftp)://!i', $package) && file_exists($package) ) //Local file or remote?			return $package; //must be a local file..		if ( empty($package) )			return new WP_Error('no_package', $this->strings['no_package']);		$this->skin->feedback('downloading_package', $package);		$download_file = download_url($package);		if ( is_wp_error($download_file) )			return new WP_Error('download_failed', $this->strings['download_failed'], $download_file->get_error_message());		return $download_file;	}	function unpack_package($package, $delete_package = true) {		global $wp_filesystem;		$this->skin->feedback('unpack_package');		$upgrade_folder = $wp_filesystem->wp_content_dir() . 'upgrade/';		//Clean up contents of upgrade directory beforehand.		$upgrade_files = $wp_filesystem->dirlist($upgrade_folder);		if ( !empty($upgrade_files) ) {			foreach ( $upgrade_files as $file )				$wp_filesystem->delete($upgrade_folder . $file['name'], true);		}		//We need a working directory		$working_dir = $upgrade_folder . basename($package, '.zip');		// Clean up working directory		if ( $wp_filesystem->is_dir($working_dir) )			$wp_filesystem->delete($working_dir, true);		// Unzip package to working directory		$result = unzip_file($package, $working_dir); //TODO optimizations, Copy when Move/Rename would suffice?		// Once extracted, delete the package if required.		if ( $delete_package )			unlink($package);		if ( is_wp_error($result) ) {			$wp_filesystem->delete($working_dir, true);			return $result;		}		return $working_dir;	}	function install_package($args = array()) {		global $wp_filesystem;		$defaults = array( 'source' => '', 'destination' => '', //Please always pass these						'clear_destination' => false, 'clear_working' => false,						'hook_extra' => array());		$args = wp_parse_args($args, $defaults);		extract($args);		@set_time_limit( 300 );		if ( empty($source) || empty($destination) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$this->skin->feedback('installing_package');		$res = apply_filters('upgrader_pre_install', true, $hook_extra);		if ( is_wp_error($res) )			return $res;		//Retain the Original source and destinations		$remote_source = $source;		$local_destination = $destination;		$source_files = array_keys( $wp_filesystem->dirlist($remote_source) );		$remote_destination = $wp_filesystem->find_folder($local_destination);		//Locate which directory to copy to the new folder, This is based on the actual folder holding the files.		if ( 1 == count($source_files) && $wp_filesystem->is_dir( trailingslashit($source) . $source_files[0] . '/') ) //Only one folder? Then we want its contents.			$source = trailingslashit($source) . trailingslashit($source_files[0]);		elseif ( count($source_files) == 0 )			return new WP_Error('bad_package', $this->strings['bad_package']); //There are no files?		//else //Its only a single file, The upgrader will use the foldername of this file as the destination folder. foldername is based on zip filename.		//Hook ability to change the source file location..		$source = apply_filters('upgrader_source_selection', $source, $remote_source, $this);		if ( is_wp_error($source) )			return $source;		//Has the source location changed? If so, we need a new source_files list.		if ( $source !== $remote_source )			$source_files = array_keys( $wp_filesystem->dirlist($source) );		//Protection against deleting files in any important base directories.		if ( in_array( $destination, array(ABSPATH, WP_CONTENT_DIR, WP_PLUGIN_DIR, WP_CONTENT_DIR . '/themes') ) ) {			$remote_destination = trailingslashit($remote_destination) . trailingslashit(basename($source));			$destination = trailingslashit($destination) . trailingslashit(basename($source));		}		if ( $wp_filesystem->exists($remote_destination) ) {			if ( $clear_destination ) {				//We're going to clear the destination if theres something there				$this->skin->feedback('remove_old');				$removed = $wp_filesystem->delete($remote_destination, true);				$removed = apply_filters('upgrader_clear_destination', $removed, $local_destination, $remote_destination, $hook_extra);				if ( is_wp_error($removed) )					return $removed;				else if ( ! $removed )					return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);			} else {				//If we're not clearing the destination folder and something exists there allready, Bail.				//But first check to see if there are actually any files in the folder.				$_files = $wp_filesystem->dirlist($remote_destination);				if ( ! empty($_files) ) {					$wp_filesystem->delete($remote_source, true); //Clear out the source files.					return new WP_Error('folder_exists', $this->strings['folder_exists'], $remote_destination );				}			}		}		//Create destination if needed		if ( !$wp_filesystem->exists($remote_destination) )			if ( !$wp_filesystem->mkdir($remote_destination, FS_CHMOD_DIR) )				return new WP_Error('mkdir_failed', $this->strings['mkdir_failed'], $remote_destination);		// Copy new version of item into place.		$result = copy_dir($source, $remote_destination);		if ( is_wp_error($result) ) {			if ( $clear_working )				$wp_filesystem->delete($remote_source, true);			return $result;		}		//Clear the Working folder?		if ( $clear_working )			$wp_filesystem->delete($remote_source, true);		$destination_name = basename( str_replace($local_destination, '', $destination) );		if ( '.' == $destination_name )			$destination_name = '';		$this->result = compact('local_source', 'source', 'source_name', 'source_files', 'destination', 'destination_name', 'local_destination', 'remote_destination', 'clear_destination', 'delete_source_dir');		$res = apply_filters('upgrader_post_install', true, $hook_extra, $this->result);		if ( is_wp_error($res) ) {			$this->result = $res;			return $res;		}		//Bombard the calling function will all the info which we've just used.		return $this->result;	}	function run($options) {		$defaults = array( 	'package' => '', //Please always pass this.							'destination' => '', //And this							'clear_destination' => false,							'clear_working' => true,							'is_multi' => false,							'hook_extra' => array() //Pass any extra $hook_extra args here, this will be passed to any hooked filters.						);		$options = wp_parse_args($options, $defaults);		extract($options);		//Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, $destination) );		if ( ! $res ) //Mainly for non-connected filesystem.			return false;		if ( is_wp_error($res) ) {			$this->skin->error($res);			return $res;		}		if ( !$is_multi ) // call $this->header separately if running multiple times			$this->skin->header();		$this->skin->before();		//Download the package (Note, This just returns the filename of the file if the package is a local file)		$download = $this->download_package( $package );		if ( is_wp_error($download) ) {			$this->skin->error($download);			$this->skin->after();			return $download;		}		//Unzip's the file into a temporary directory		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) ) {			$this->skin->error($working_dir);			$this->skin->after();			return $working_dir;		}		//With the given options, this installs it to the destination directory.		$result = $this->install_package( array(											'source' => $working_dir,											'destination' => $destination,											'clear_destination' => $clear_destination,											'clear_working' => $clear_working,											'hook_extra' => $hook_extra										) );		$this->skin->set_result($result);		if ( is_wp_error($result) ) {			$this->skin->error($result);			$this->skin->feedback('process_failed');		} else {			//Install Suceeded			$this->skin->feedback('process_success');		}		$this->skin->after();		if ( !$is_multi )			$this->skin->footer();		return $result;	}	function maintenance_mode($enable = false) {		global $wp_filesystem;		$file = $wp_filesystem->abspath() . '.maintenance';		if ( $enable ) {			$this->skin->feedback('maintenance_start');			// Create maintenance file to signal that we are upgrading			$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';			$wp_filesystem->delete($file);			$wp_filesystem->put_contents($file, $maintenance_string, FS_CHMOD_FILE);		} else if ( !$enable && $wp_filesystem->exists($file) ) {			$this->skin->feedback('maintenance_end');			$wp_filesystem->delete($file);		}	}}/** * Plugin Upgrader class for WordPress Plugins, It is designed to upgrade/install plugins from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader extends WP_Upgrader {	var $result;	var $bulk = false;	var $show_before = '';	function upgrade_strings() {		$this->strings['up_to_date'] = __('The plugin is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['deactivate_plugin'] = __('Deactivating the plugin&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the plugin&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old plugin.');		$this->strings['process_failed'] = __('Plugin upgrade failed.');		$this->strings['process_success'] = __('Plugin upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the plugin&#8230;');		$this->strings['process_failed'] = __('Plugin install failed.');		$this->strings['process_success'] = __('Plugin installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$this->run(array(					'package' => $package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => false, //Do not overwrite files.					'clear_working' => true,					'hook_extra' => array()					));		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function upgrade($plugin) {		$this->init();		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		if ( !isset( $current->response[ $plugin ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		// Get the URL to the zip file		$r = $current->response[ $plugin ];		add_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		//'source_selection' => array(&$this, 'source_selection'), //theres a track ticket to move up the directory for zip's which are made a bit differently, useful for non-.org plugins.		$this->run(array(					'package' => $r->package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => true,					'clear_working' => true,					'hook_extra' => array(								'plugin' => $plugin					)				));		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'));		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function bulk_upgrade($plugins) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, WP_PLUGIN_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($plugins);		$this->update_current = 0;		foreach ( $plugins as $plugin ) {			$this->update_current++;			$this->skin->plugin_info = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin, false, true);			if ( !isset( $current->response[ $plugin ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$plugin] = false;				continue;			}			// Get the URL to the zip file			$r = $current->response[ $plugin ];			$this->skin->plugin_active = is_plugin_active($plugin);			$result = $this->run(array(						'package' => $r->package,						'destination' => WP_PLUGIN_DIR,						'clear_destination' => true,						'clear_working' => true,						'is_multi' => true,						'hook_extra' => array(									'plugin' => $plugin						)					));			$results[$plugin] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		// Force refresh of plugin update information		delete_site_transient('update_plugins');		return $results;	}	//return plugin info.	function plugin_info() {		if ( ! is_array($this->result) )			return false;		if ( empty($this->result['destination_name']) )			return false;		$plugin = get_plugins('/' . $this->result['destination_name']); //Ensure to pass with leading slash		if ( empty($plugin) )			return false;		$pluginfiles = array_keys($plugin); //Assume the requested plugin is the first in the list		return $this->result['destination_name'] . '/' . $pluginfiles[0];	}	//Hooked to pre_install	function deactivate_plugin_before_upgrade($return, $plugin) {		if ( is_wp_error($return) ) //Bypass.			return $return;		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		if ( is_plugin_active($plugin) ) {			$this->skin->feedback('deactivate_plugin');			//Deactivate the plugin silently, Prevent deactivation hooks from running.			deactivate_plugins($plugin, true);		}	}	//Hooked to upgrade_clear_destination	function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin) {		global $wp_filesystem;		if ( is_wp_error($removed) )			return $removed; //Pass errors through.		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$plugins_dir = $wp_filesystem->wp_plugins_dir();		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin) );		if ( ! $wp_filesystem->exists($this_plugin_dir) ) //If its already vanished.			return $removed;		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin);		if ( ! $deleted )			return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);		return $removed;	}}/** * Theme Upgrader class for WordPress Themes, It is designed to upgrade/install themes from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader extends WP_Upgrader {	var $result;	function upgrade_strings() {		$this->strings['up_to_date'] = __('The theme is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the theme&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old theme.');		$this->strings['process_failed'] = __('Theme upgrade failed.');		$this->strings['process_success'] = __('Theme upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the theme&#8230;');		$this->strings['process_failed'] = __('Theme install failed.');		$this->strings['process_success'] = __('Theme installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$options = array(						'package' => $package,						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => false, //Do not overwrite files.						'clear_working' => true						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		if ( empty($result['destination_name']) )			return false;		else			return $result['destination_name'];	}	function upgrade($theme) {		$this->init();		$this->upgrade_strings();		// Is an update available?		$current = get_site_transient( 'update_themes' );		if ( !isset( $current->response[ $theme ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		$r = $current->response[ $theme ];		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$options = array(						'package' => $r['package'],						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => true,						'clear_working' => true,						'hook_extra' => array(											'theme' => $theme											)						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		return true;	}	function bulk_upgrade($themes) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_themes' );		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($themes);		$this->update_current = 0;		foreach ( $themes as $theme ) {			$this->update_current++;			if ( !isset( $current->response[ $theme ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$theme] = false;				continue;			}			$this->skin->theme_info = $this->theme_info($theme);			// Get the URL to the zip file			$r = $current->response[ $theme ];			$options = array(							'package' => $r['package'],							'destination' => WP_CONTENT_DIR . '/themes',							'clear_destination' => true,							'clear_working' => true,							'hook_extra' => array(												'theme' => $theme												)							);			$result = $this->run($options);			$results[$theme] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		remove_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		// Force refresh of theme update information		delete_site_transient('update_themes');		return $results;	}	function current_before($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Change to maintainence mode now.		if ( ! $this->bulk )			$this->maintenance_mode(true);		return $return;	}	function current_after($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Ensure stylesheet name hasnt changed after the upgrade:		if ( $theme == get_stylesheet() && $theme != $this->result['destination_name'] ) {			$theme_info = $this->theme_info();			$stylesheet = $this->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			switch_theme($template, $stylesheet, true);		}		//Time to remove maintainence mode		if ( ! $this->bulk )			$this->maintenance_mode(false);		return $return;	}	function delete_old_theme($removed, $local_destination, $remote_destination, $theme) {		global $wp_filesystem;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( is_wp_error($removed) || empty($theme) )			return $removed; //Pass errors through.		$themes_dir = $wp_filesystem->wp_themes_dir();		if ( $wp_filesystem->exists( trailingslashit($themes_dir) . $theme ) )			if ( ! $wp_filesystem->delete( trailingslashit($themes_dir) . $theme, true ) )				return false;		return true;	}	function theme_info($theme = null) {		if ( empty($theme) ) {			if ( !empty($this->result['destination_name']) )				$theme = $this->result['destination_name'];			else				return false;		}		return get_theme_data(WP_CONTENT_DIR . '/themes/' . $theme . '/style.css');	}}/** * Core Upgrader class for WordPress. It allows for WordPress to upgrade itself in combiantion with the wp-admin/includes/update-core.php file * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Core_Upgrader extends WP_Upgrader {	function upgrade_strings() {		$this->strings['up_to_date'] = __('WordPress is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['copy_failed'] = __('Could not copy files.');	}	function upgrade($current) {		global $wp_filesystem;		$this->init();		$this->upgrade_strings();		if ( !empty($feedback) )			add_filter('update_feedback', $feedback);		// Is an update available?		if ( !isset( $current->response ) || $current->response == 'latest' )			return new WP_Error('up_to_date', $this->strings['up_to_date']);		$res = $this->fs_connect( array(ABSPATH, WP_CONTENT_DIR) );		if ( is_wp_error($res) )			return $res;		$wp_dir = trailingslashit($wp_filesystem->abspath());		$download = $this->download_package( $current->package );		if ( is_wp_error($download) )			return $download;		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) )			return $working_dir;		// Copy update-core.php from the new version into place.		if ( !$wp_filesystem->copy($working_dir . '/wordpress/wp-admin/includes/update-core.php', $wp_dir . 'wp-admin/includes/update-core.php', true) ) {			$wp_filesystem->delete($working_dir, true);			return new WP_Error('copy_failed', $this->strings['copy_failed']);		}		$wp_filesystem->chmod($wp_dir . 'wp-admin/includes/update-core.php', FS_CHMOD_FILE);		require(ABSPATH . 'wp-admin/includes/update-core.php');		return update_core($working_dir, $wp_dir);	}}/** * Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader_Skin {	var $upgrader;	var $done_header = false;	var $result = false;	function WP_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '', 'title' => '', 'context' => false );		$this->options = wp_parse_args($args, $defaults);	}	function set_upgrader(&$upgrader) {		if ( is_object($upgrader) )			$this->upgrader =& $upgrader;		$this->add_strings();	}	function add_strings() {	}	function set_result($result) {		$this->result = $result;	}	function request_filesystem_credentials($error = false) {		$url = $this->options['url'];		$context = $this->options['context'];		if ( !empty($this->options['nonce']) )			$url = wp_nonce_url($url, $this->options['nonce']);		return request_filesystem_credentials($url, '', $error, $context); //Possible to bring inline, Leaving as is for now.	}	function header() {		if ( $this->done_header )			return;		$this->done_header = true;		echo '<div class="wrap">';		echo screen_icon();		echo '<h2>' . $this->options['title'] . '</h2>';	}	function footer() {		echo '</div>';	}	function error($errors) {		if ( ! $this->done_header )			$this->header();		if ( is_string($errors) ) {			$this->feedback($errors);		} elseif ( is_wp_error($errors) && $errors->get_error_code() ) {			foreach ( $errors->get_error_messages() as $message ) {				if ( $errors->get_error_data() )					$this->feedback($message . ' ' . $errors->get_error_data() );				else					$this->feedback($message);			}		}	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		show_message($string);	}	function before() {}	function after() {}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader_Skin extends WP_Upgrader_Skin {	var $plugin = '';	var $plugin_active = false;	var $plugin_network_active = false;	function Plugin_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => __('Upgrade Plugin') );		$args = wp_parse_args($args, $defaults);		$this->plugin = $args['plugin'];		$this->plugin_active = is_plugin_active( $this->plugin );		$this->plugin_network_active = is_plugin_active_for_network( $this->plugin );		parent::__construct($args);	}	function after() {		$this->plugin = $this->upgrader->plugin_info();		if ( !empty($this->plugin) && !is_wp_error($this->result) && $this->plugin_active ){			show_message(__('Reactivating the plugin&#8230;'));			echo '<iframe style="border:0;overflow:hidden" width="100%" height="170px" src="' . wp_nonce_url('update.php?action=activate-plugin&networkwide=' . $this->plugin_network_active . '&plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) .'"></iframe>';		}		$update_actions =  array(			'activate_plugin' => '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>',			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>'		);		if ( $this->plugin_active )			unset( $update_actions['activate_plugin'] );		if ( ! $this->result || is_wp_error($this->result) )			unset( $update_actions['activate_plugin'] );		$update_actions = apply_filters('update_plugin_complete_actions', $update_actions, $this->plugin);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}	function before() {		if ( $this->upgrader->show_before ) {			echo $this->upgrader->show_before;			$this->upgrader->show_before = '';		}	}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @package WordPress * @subpackage Upgrader * @since 3.0.0 */class Bulk_Upgrader_Skin extends WP_Upgrader_Skin {	var $in_loop = false;	var $error = false;	function Bulk_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '' );		$args = wp_parse_args($args, $defaults);		parent::__construct($args);	}	function add_strings() {		$this->upgrader->strings['skin_upgrade_start'] = __('The update process is starting. This process may take awhile on some hosts, so please be patient.');		$this->upgrader->strings['skin_update_failed_error'] = __('An error occured while updating %1$s: <strong>%2$s</strong>.');		$this->upgrader->strings['skin_update_failed'] = __('The update of %1$s failed.');		$this->upgrader->strings['skin_update_successful'] = __('%1$s updated successfully.').' <a onclick="%2$s" href="#" class="hide-if-no-js"><span>'.__('Show Details').'</span><span class="hidden">'.__('Hide Details').'</span>.</a>';		$this->upgrader->strings['skin_upgrade_end'] = __('All updates have been completed.');	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		if ( $this->in_loop )			echo "$string<br />\n";		else			echo "<p>$string</p>\n";	}	function header() {		// Nothing, This will be displayed within a iframe.	}	function footer() {		// Nothing, This will be displayed within a iframe.	}	function error($error) {		if ( is_string($error) && isset( $this->upgrader->strings[$error] ) )			$this->error = $this->upgrader->strings[$error];		if ( is_wp_error($error) ) {			foreach ( $error->get_error_messages() as $emessage ) {				if ( $error->get_error_data() )					$messages[] = $emessage . ' ' . $error->get_error_data();				else					$messages[] = $emessage;			}			$this->error = implode(', ', $messages);		}		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';	}	function bulk_header() {		$this->feedback('skin_upgrade_start');	}	function bulk_footer() {		$this->feedback('skin_upgrade_end');	}	function before($title = '') {		$this->in_loop = true;		printf( '<h4>' . $this->upgrader->strings['skin_before_update_header'] . ' <img alt="" src="' . admin_url( 'images/wpspin_light.gif' ) . '" class="hidden waiting-' . $this->upgrader->update_current . '" style="vertical-align:middle;"></h4>',  $title, $this->upgrader->update_current, $this->upgrader->update_count);		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		echo '<div class="update-messages hide-if-js" id="progress-' . esc_attr($this->upgrader->update_current) . '"><p>';		$this->flush_output();	}	function after($title = '') {		echo '</p></div>';		if ( $this->error || ! $this->result ) {			if ( $this->error )				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed_error'], $title, $this->error) . '</p></div>';			else				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed'], $title) . '</p></div>';			echo '<script type="text/javascript">jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		}		if ( !empty($this->result) && !is_wp_error($this->result) ) {			echo '<div class="updated"><p>' . sprintf($this->upgrader->strings['skin_update_successful'], $title, 'jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').toggle();jQuery(\'span\', this).toggle(); return false;') . '</p></div>';			echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';		}		$this->reset();		$this->flush_output();	}	function reset() {		$this->in_loop = false;		$this->error = false;	}	function flush_output() {		wp_ob_end_flush_all();		flush();	}}class Bulk_Plugin_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $plugin_info = array(); // Plugin_Upgrader::bulk() will fill this in.	function Plugin_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Plugin %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->plugin_info['Title']);	}	function after() {		parent::after($this->plugin_info['Title']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_plugins_complete_actions', $update_actions, $this->plugin_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}class Bulk_Theme_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $theme_info = array(); // Theme_Upgrader::bulk() will fill this in.	function Theme_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Theme %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->theme_info['Name']);	}	function after() {		parent::after($this->theme_info['Name']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'themes_page' => '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Goto themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_theme_complete_actions', $update_actions, $this->theme_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Plugin Installer Skin for WordPress Plugin Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Plugin_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) )			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the plugin <strong>%s %s</strong>.'), $this->api->name, $this->api->version);	}	function after() {		$plugin_file = $this->upgrader->plugin_info();		$install_actions = array();		$from = isset($_GET['from']) ? stripslashes($_GET['from']) : 'plugins';		if ( 'import' == $from )			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;from=import&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin &amp; Run Importer') . '</a>';		else			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>';		if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )			$install_actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" target="_parent">' . __('Network Activate') . '</a>';		if ( 'import' == $from )			$install_actions['importers_page'] = '<a href="' . admin_url('import.php') . '" title="' . esc_attr__('Return to Importers') . '" target="_parent">' . __('Return to Importers') . '</a>';		else if ( $this->type == 'web' )			$install_actions['plugins_page'] = '<a href="' . admin_url('plugin-install.php') . '" title="' . esc_attr__('Return to Plugin Installer') . '" target="_parent">' . __('Return to Plugin Installer') . '</a>';		else			$install_actions['plugins_page'] = '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Return to Plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) ) {			unset( $install_actions['activate_plugin'] );			unset( $install_actions['network_activate'] );		}		$install_actions = apply_filters('install_plugin_complete_actions', $install_actions, $this->api, $plugin_file);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Installer Skin for the WordPress Theme Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Theme_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'theme' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) ) {			/* translators: 1: theme name, 2: version */			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the theme <strong>%1$s %2$s</strong>.'), $this->api->name, $this->api->version);		}	}	function after() {		if ( empty($this->upgrader->result['destination_name']) )			return;		$theme_info = $this->upgrader->theme_info();		if ( empty($theme_info) )			return;		$name = $theme_info['Name'];		$stylesheet = $this->upgrader->result['destination_name'];		$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;		$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );		$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);		$install_actions = array(			'preview' => '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>',			'activate' => '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>'							);		if ( $this->type == 'web' )			$install_actions['themes_page'] = '<a href="' . admin_url('theme-install.php') . '" title="' . esc_attr__('Return to Theme Installer') . '" target="_parent">' . __('Return to Theme Installer') . '</a>';		else			$install_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) )			unset( $install_actions['activate'], $install_actions['preview'] );		$install_actions = apply_filters('install_theme_complete_actions', $install_actions, $this->api, $stylesheet, $theme_info);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Upgrader Skin for WordPress Theme Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader_Skin extends WP_Upgrader_Skin {	var $theme = '';	function Theme_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'theme' => '', 'nonce' => '', 'title' => __('Upgrade Theme') );		$args = wp_parse_args($args, $defaults);		$this->theme = $args['theme'];		parent::__construct($args);	}	function after() {		$update_actions = array();		if ( !empty($this->upgrader->result['destination_name']) &&			($theme_info = $this->upgrader->theme_info()) &&			!empty($theme_info) ) {			$name = $theme_info['Name'];			$stylesheet = $this->upgrader->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );			$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);			$update_actions['preview'] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>';			$update_actions['activate'] = '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>';			if ( ( ! $this->result || is_wp_error($this->result) ) || $stylesheet == get_stylesheet() )				unset($update_actions['preview'], $update_actions['activate']);		}		$update_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Return to Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		$update_actions = apply_filters('update_theme_complete_actions', $update_actions, $this->theme);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Upgrade Skin helper for File uploads. This class handles the upload process and passes it as if its a local file to the Upgrade/Installer functions. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class File_Upload_Upgrader {	var $package;	var $filename;	function File_Upload_Upgrader($form, $urlholder) {		return $this->__construct($form, $urlholder);	}	function __construct($form, $urlholder) {		if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )			wp_die($uploads['error']);		if ( empty($_FILES[$form]['name']) && empty($_GET[$urlholder]) )			wp_die(__('Please select a file'));		if ( !empty($_FILES) )			$this->filename = $_FILES[$form]['name'];		else if ( isset($_GET[$urlholder]) )			$this->filename = $_GET[$urlholder];		//Handle a newly uploaded file, Else assume its already been uploaded		if ( !empty($_FILES) ) {			$this->filename = wp_unique_filename( $uploads['basedir'], $this->filename );			$this->package = $uploads['basedir'] . '/' . $this->filename;			// Move the file to the uploads dir			if ( false === @ move_uploaded_file( $_FILES[$form]['tmp_name'], $this->package) )				wp_die( sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path']));		} else {			$this->package = $uploads['basedir'] . '/' . $this->filename;		}	}}
<?php/** * WordPress Taxonomy Administration API. * * @package WordPress * @subpackage Administration *///// Category///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @return unknown */function category_exists($cat_name, $parent = 0) {	$id = term_exists($cat_name, 'category', $parent);	if ( is_array($id) )		$id = $id['term_id'];	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_category_to_edit( $id ) {	$category = get_category( $id, OBJECT, 'edit' );	return $category;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @param unknown_type $parent * @return unknown */function wp_create_category( $cat_name, $parent = 0 ) {	if ( $id = category_exists($cat_name, $parent) )		return $id;	return wp_insert_category( array('cat_name' => $cat_name, 'category_parent' => $parent) );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $categories * @param unknown_type $post_id * @return unknown */function wp_create_categories($categories, $post_id = '') {	$cat_ids = array ();	foreach ($categories as $category) {		if ($id = category_exists($category))			$cat_ids[] = $id;		else			if ($id = wp_create_category($category))				$cat_ids[] = $id;	}	if ( $post_id )		wp_set_post_categories($post_id, $cat_ids);	return $cat_ids;}/** * Deletes one existing category. * * @since 2.0.0 * * @param int $cat_ID * @return mixed Returns true if completes delete action; false if term doesnt exist; Zero on attempted deletion of default Category; WP_Error object is also a possibility. */function wp_delete_category($cat_ID) {	$cat_ID = (int) $cat_ID;	$default = get_option('default_category');	// Don't delete the default cat	if ( $cat_ID == $default )		return 0;	return wp_delete_term($cat_ID, 'category', array('default' => $default));}/** * Updates an existing Category or creates a new Category. * * @since 2.0.0 * * @param mixed $catarr See defaults below. Set 'cat_ID' to a non-zero value to update an existing category. The 'taxonomy' key was added in 3.0.0. * @param bool $wp_error Optional, since 2.5.0. Set this to true if the caller handles WP_Error return values. * @return int|object The ID number of the new or updated Category on success.  Zero or a WP_Error on failure, depending on param $wp_error. */function wp_insert_category($catarr, $wp_error = false) {	$cat_defaults = array('cat_ID' => 0, 'taxonomy' => 'category', 'cat_name' => '', 'category_description' => '', 'category_nicename' => '', 'category_parent' => '');	$catarr = wp_parse_args($catarr, $cat_defaults);	extract($catarr, EXTR_SKIP);	if ( trim( $cat_name ) == '' ) {		if ( ! $wp_error )			return 0;		else			return new WP_Error( 'cat_name', __('You did not enter a category name.') );	}	$cat_ID = (int) $cat_ID;	// Are we updating or creating?	if ( !empty ($cat_ID) )		$update = true;	else		$update = false;	$name = $cat_name;	$description = $category_description;	$slug = $category_nicename;	$parent = $category_parent;	$parent = (int) $parent;	if ( $parent < 0 )		$parent = 0;	if ( empty($parent) || !category_exists( $parent ) || ($cat_ID && cat_is_ancestor_of($cat_ID, $parent) ) )		$parent = 0;	$args = compact('name', 'slug', 'parent', 'description');	if ( $update )		$cat_ID = wp_update_term($cat_ID, $taxonomy, $args);	else		$cat_ID = wp_insert_term($cat_name, $taxonomy, $args);	if ( is_wp_error($cat_ID) ) {		if ( $wp_error )			return $cat_ID;		else			return 0;	}	return $cat_ID['term_id'];}/** * Aliases wp_insert_category() with minimal args. * * If you want to update only some fields of an existing category, call this * function with only the new values set inside $catarr. * * @since 2.0.0 * * @param array $catarr The 'cat_ID' value is required.  All other keys are optional. * @return int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure. */function wp_update_category($catarr) {	$cat_ID = (int) $catarr['cat_ID'];	if ( isset($catarr['category_parent']) && ($cat_ID == $catarr['category_parent']) )		return false;	// First, get all of the original fields	$category = get_category($cat_ID, ARRAY_A);	// Escape data pulled from DB.	$category = add_magic_quotes($category);	// Merge old and new fields with new fields overwriting old ones.	$catarr = array_merge($category, $catarr);	return wp_insert_category($catarr);}//// Tags///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_tags_to_edit( $post_id, $taxonomy = 'post_tag' ) {	return get_terms_to_edit( $post_id, $taxonomy);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_terms_to_edit( $post_id, $taxonomy = 'post_tag' ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	$tags = wp_get_post_terms($post_id, $taxonomy, array());	if ( !$tags )		return false;	if ( is_wp_error($tags) )		return $tags;	foreach ( $tags as $tag )		$tag_names[] = $tag->name;	$tags_to_edit = join( ',', $tag_names );	$tags_to_edit = esc_attr( $tags_to_edit );	$tags_to_edit = apply_filters( 'terms_to_edit', $tags_to_edit, $taxonomy );	return $tags_to_edit;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function tag_exists($tag_name) {	return term_exists($tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_tag($tag_name) {	return wp_create_term( $tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_term($tag_name, $taxonomy = 'post_tag') {	if ( $id = term_exists($tag_name, $taxonomy) )		return $id;	return wp_insert_term($tag_name, $taxonomy);}
<?php/** * Category Template Tags and API. * * @package WordPress * @subpackage Template *//** * Retrieve category link URL. * * @since 1.0.0 * @uses apply_filters() Calls 'category_link' filter on category link and category ID. * * @param int $category_id Category ID. * @return string */function get_category_link( $category_id ) {	global $wp_rewrite;	$catlink = $wp_rewrite->get_category_permastruct();	if ( empty( $catlink ) ) {		$catlink = home_url('?cat=' . $category_id);	} else {		$category = &get_category( $category_id );		if ( is_wp_error( $category ) )			return $category;		$category_nicename = $category->slug;		if ( $category->parent == $category_id ) // recursive recursion			$category->parent = 0;		elseif ($category->parent != 0 )			$category_nicename = get_category_parents( $category->parent, false, '/', true ) . $category_nicename;		$catlink = str_replace( '%category%', $category_nicename, $catlink );		$catlink = home_url( user_trailingslashit( $catlink, 'category' ) );	}	return apply_filters( 'category_link', $catlink, $category_id );}/** * Retrieve category parents with separator. * * @since 1.2.0 * * @param int $id Category ID. * @param bool $link Optional, default is false. Whether to format with link. * @param string $separator Optional, default is '/'. How to separate categories. * @param bool $nicename Optional, default is false. Whether to use nice name for display. * @param array $visited Optional. Already linked to categories to prevent duplicates. * @return string */function get_category_parents( $id, $link = false, $separator = '/', $nicename = false, $visited = array() ) {	$chain = '';	$parent = &get_category( $id );	if ( is_wp_error( $parent ) )		return $parent;	if ( $nicename )		$name = $parent->slug;	else		$name = $parent->cat_name;	if ( $parent->parent && ( $parent->parent != $parent->term_id ) && !in_array( $parent->parent, $visited ) ) {		$visited[] = $parent->parent;		$chain .= get_category_parents( $parent->parent, $link, $separator, $nicename, $visited );	}	if ( $link )		$chain .= '<a href="' . get_category_link( $parent->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $parent->cat_name ) ) . '">'.$name.'</a>' . $separator;	else		$chain .= $name.$separator;	return $chain;}/** * Retrieve post categories. * * @since 0.71 * @uses $post * * @param int $id Optional, default to current post ID. The post ID. * @return array */function get_the_category( $id = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	$categories = get_object_term_cache( $id, 'category' );	if ( false === $categories ) {		$categories = wp_get_object_terms( $id, 'category' );		wp_cache_add($id, $categories, 'category_relationships');	}	if ( !empty( $categories ) )		usort( $categories, '_usort_terms_by_name' );	else		$categories = array();	foreach ( (array) array_keys( $categories ) as $key ) {		_make_cat_compat( $categories[$key] );	}	return $categories;}/** * Sort categories by name. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_name( $a, $b ) {	return strcmp( $a->name, $b->name );}/** * Sort categories by ID. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_ID( $a, $b ) {	if ( $a->term_id > $b->term_id )		return 1;	elseif ( $a->term_id < $b->term_id )		return -1;	else		return 0;}/** * Retrieve category name based on category ID. * * @since 0.71 * * @param int $cat_ID Category ID. * @return string Category name. */function get_the_category_by_ID( $cat_ID ) {	$cat_ID = (int) $cat_ID;	$category = &get_category( $cat_ID );	if ( is_wp_error( $category ) )		return $category;	return $category->name;}/** * Retrieve category list in either HTML list or custom format. * * @since 1.5.1 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. * @return string */function get_the_category_list( $separator = '', $parents='', $post_id = false ) {	global $wp_rewrite;	$categories = get_the_category( $post_id );	if ( !is_object_in_taxonomy( get_post_type( $post_id ), 'category' ) )		return apply_filters( 'the_category', '', $separator, $parents );	if ( empty( $categories ) )		return apply_filters( 'the_category', __( 'Uncategorized' ), $separator, $parents );	$rel = ( is_object( $wp_rewrite ) && $wp_rewrite->using_permalinks() ) ? 'rel="category tag"' : 'rel="category"';	$thelist = '';	if ( '' == $separator ) {		$thelist .= '<ul class="post-categories">';		foreach ( $categories as $category ) {			$thelist .= "\n\t<li>";			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a></li>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= $category->name.'</a></li>';					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a></li>';			}		}		$thelist .= '</ul>';	} else {		$i = 0;		foreach ( $categories as $category ) {			if ( 0 < $i )				$thelist .= $separator;			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= "$category->cat_name</a>";					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a>';			}			++$i;		}	}	return apply_filters( 'the_category', $thelist, $separator, $parents );}/** * Check if the current post in within any of the given categories. * * The given categories are checked against the post's categories' term_ids, names and slugs. * Categories given as integers will only be checked against the post's categories' term_ids. * * Prior to v2.5 of WordPress, category names were not supported. * Prior to v2.7, category slugs were not supported. * Prior to v2.7, only one category could be compared: in_category( $single_category ). * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 1.2.0 * * @uses is_object_in_term() * * @param int|string|array $category. Category ID, name or slug, or array of said. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post is in any of the given categories. */function in_category( $category, $_post = null ) {	if ( empty( $category ) )		return false;	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'category', $category );	if ( is_wp_error( $r ) )		return false;	return $r;}/** * Display the category list for the post. * * @since 0.71 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. */function the_category( $separator = '', $parents='', $post_id = false ) {	echo get_the_category_list( $separator, $parents, $post_id );}/** * Retrieve category description. * * @since 1.0.0 * * @param int $category Optional. Category ID. Will use global category ID by default. * @return string Category description, available. */function category_description( $category = 0 ) {	return term_description( $category, 'category' );}/** * Display or retrieve the HTML dropdown list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'show_option_none' (string) - Text to display for showing no categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link get_categories()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'depth' (int) - The max depth. *     'tab_index' (int) - Tab index for select element. *     'name' (string) - The name attribute value for select element. *     'id' (string) - The ID attribute value for select element. Defaults to name if omitted. *     'class' (string) - The class attribute value for select element. *     'selected' (int) - Which category ID is selected. *     'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category. * * The 'hierarchical' argument, which is disabled by default, will override the * depth argument, unless it is true. When the argument is false, it will * display all of the categories. When it is enabled it will use the value in * the 'depth' argument. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_dropdown_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'id', 'order' => 'ASC',		'show_last_update' => 0, 'show_count' => 0,		'hide_empty' => 1, 'child_of' => 0,		'exclude' => '', 'echo' => 1,		'selected' => 0, 'hierarchical' => 0,		'name' => 'cat', 'id' => '',		'class' => 'postform', 'depth' => 0,		'tab_index' => 0, 'taxonomy' => 'category',		'hide_if_empty' => false	);	$defaults['selected'] = ( is_category() ) ? get_query_var( 'cat' ) : 0;	// Back compat.	if ( isset( $args['type'] ) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$args['taxonomy'] = 'link_category';	}	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] ) {		$r['pad_counts'] = true;	}	$r['include_last_update_time'] = $r['show_last_update'];	extract( $r );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	$categories = get_terms( $taxonomy, $r );	$name = esc_attr( $name );	$class = esc_attr( $class );	$id = $id ? esc_attr( $id ) : $name;	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output = "<select name='$name' id='$id' class='$class' $tab_index_attribute>\n";	else		$output = '';	if ( empty($categories) && ! $r['hide_if_empty'] && !empty($show_option_none) ) {		$show_option_none = apply_filters( 'list_cats', $show_option_none );		$output .= "\t<option value='-1' selected='selected'>$show_option_none</option>\n";	}	if ( ! empty( $categories ) ) {		if ( $show_option_all ) {			$show_option_all = apply_filters( 'list_cats', $show_option_all );			$selected = ( '0' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='0'$selected>$show_option_all</option>\n";		}		if ( $show_option_none ) {			$show_option_none = apply_filters( 'list_cats', $show_option_none );			$selected = ( '-1' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='-1'$selected>$show_option_none</option>\n";		}		if ( $hierarchical )			$depth = $r['depth'];  // Walk the full depth.		else			$depth = -1; // Flat.		$output .= walk_category_dropdown_tree( $categories, $depth, $r );	}	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output .= "</select>\n";	$output = apply_filters( 'wp_dropdown_cats', $output );	if ( $echo )		echo $output;	return $output;}/** * Display or retrieve the HTML list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link * walk_category_dropdown_tree()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the * description instead of the category title. *     'feed' - See {@link get_categories()}. *     'feed_type' - See {@link get_categories()}. *     'feed_image' - See {@link get_categories()}. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'exclude_tree' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'current_category' (int) - See {@link get_categories()}. *     'hierarchical' (bool) - See {@link get_categories()}. *     'title_li' (string) - See {@link get_categories()}. *     'depth' (int) - The max depth. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_list_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => __('No categories'),		'orderby' => 'name', 'order' => 'ASC',		'show_last_update' => 0, 'style' => 'list',		'show_count' => 0, 'hide_empty' => 1,		'use_desc_for_title' => 1, 'child_of' => 0,		'feed' => '', 'feed_type' => '',		'feed_image' => '', 'exclude' => '',		'exclude_tree' => '', 'current_category' => 0,		'hierarchical' => true, 'title_li' => __( 'Categories' ),		'echo' => 1, 'depth' => 0,		'taxonomy' => 'category'	);	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] )		$r['pad_counts'] = true;	if ( isset( $r['show_date'] ) )		$r['include_last_update_time'] = $r['show_date'];	if ( true == $r['hierarchical'] ) {		$r['exclude_tree'] = $r['exclude'];		$r['exclude'] = '';	}	if ( !isset( $r['class'] ) )		$r['class'] = ( 'category' == $r['taxonomy'] ) ? 'categories' : $r['taxonomy'];	extract( $r );	if ( !taxonomy_exists($taxonomy) )		return false;	$categories = get_categories( $r );	$output = '';	if ( $title_li && 'list' == $style )			$output = '<li class="' . $class . '">' . $title_li . '<ul>';	if ( empty( $categories ) ) {		if ( ! empty( $show_option_none ) ) {			if ( 'list' == $style )				$output .= '<li>' . $show_option_none . '</li>';			else				$output .= $show_option_none;		}	} else {		global $wp_query;		if( !empty( $show_option_all ) )			if ( 'list' == $style )				$output .= '<li><a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a></li>';			else				$output .= '<a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a>';		if ( empty( $r['current_category'] ) && ( is_category() || is_tax() ) )			$r['current_category'] = $wp_query->get_queried_object_id();		if ( $hierarchical )			$depth = $r['depth'];		else			$depth = -1; // Flat.		$output .= walk_category_tree( $categories, $depth, $r );	}	if ( $title_li && 'list' == $style )		$output .= '</ul></li>';	$output = apply_filters( 'wp_list_categories', $output, $args );	if ( $echo )		echo $output;	else		return $output;}/** * Display tag cloud. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the top 45 tags in the tag cloud list. * * The 'topic_count_text_callback' argument is a function, which, given the count * of the posts  with that tag, returns a text for the tooltip of the tag link. * * The 'exclude' and 'include' arguments are used for the {@link get_tags()} * function. Only one should be used, because only one will be used and the * other ignored, if they are both set. * * @since 2.3.0 * * @param array|string $args Optional. Override default arguments. * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument. */function wp_tag_cloud( $args = '' ) {	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 45,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'exclude' => '', 'include' => '', 'link' => 'view', 'taxonomy' => 'post_tag', 'echo' => true	);	$args = wp_parse_args( $args, $defaults );	$tags = get_terms( $args['taxonomy'], array_merge( $args, array( 'orderby' => 'count', 'order' => 'DESC' ) ) ); // Always query top tags	if ( empty( $tags ) )		return;	foreach ( $tags as $key => $tag ) {		if ( 'edit' == $args['link'] )			$link = get_edit_tag_link( $tag->term_id, $args['taxonomy'] );		else			$link = get_term_link( intval($tag->term_id), $args['taxonomy'] );		if ( is_wp_error( $link ) )			return false;		$tags[ $key ]->link = $link;		$tags[ $key ]->id = $tag->term_id;	}	$return = wp_generate_tag_cloud( $tags, $args ); // Here's where those top tags get sorted according to $args	$return = apply_filters( 'wp_tag_cloud', $return, $args );	if ( 'array' == $args['format'] || empty($args['echo']) )		return $return;	echo $return;}/** * Default text for tooltip for tag links * * @param integer $count number of posts with that tag * @return string text for the tooltip of a tag link. */function default_topic_count_text( $count ) {	return sprintf( _n('%s topic', '%s topics', $count), number_format_i18n( $count ) );}/** * Default topic count scaling for tag links * * @param integer $count number of posts with that tag * @return integer scaled count */function default_topic_count_scale( $count ) {	return round(log10($count + 1) * 100);}/** * Generates a tag cloud (heatmap) from provided data. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'tag_cloud_sort' filter allows you to override the sorting. * Passed to the filter: $tags array and $args array, has to return the $tags array * after sorting it. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or * 'RAND'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the entire tag cloud list. * * The 'topic_count_text_callback' argument is a function, which given the count * of the posts  with that tag returns a text for the tooltip of the tag link. * * @todo Complete functionality. * @since 2.3.0 * * @param array $tags List of tags. * @param string|array $args Optional, override default arguments. * @return string */function wp_generate_tag_cloud( $tags, $args = '' ) {	global $wp_rewrite;	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 0,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'topic_count_text_callback' => 'default_topic_count_text',		'topic_count_scale_callback' => 'default_topic_count_scale', 'filter' => 1,	);	if ( !isset( $args['topic_count_text_callback'] ) && isset( $args['single_text'] ) && isset( $args['multiple_text'] ) ) {		$body = 'return sprintf (			_n(' . var_export($args['single_text'], true) . ', ' . var_export($args['multiple_text'], true) . ', $count),			number_format_i18n( $count ));';		$args['topic_count_text_callback'] = create_function('$count', $body);	}	$args = wp_parse_args( $args, $defaults );	extract( $args );	if ( empty( $tags ) )		return;	$tags_sorted = apply_filters( 'tag_cloud_sort', $tags, $args );	if ( $tags_sorted != $tags  ) { // the tags have been sorted by a plugin		$tags = $tags_sorted;		unset($tags_sorted);	} else {		if ( 'RAND' == $order ) {			shuffle($tags);		} else {			// SQL cannot save you; this is a second (potentially different) sort on a subset of data.			if ( 'name' == $orderby )				uasort( $tags, create_function('$a, $b', 'return strnatcasecmp($a->name, $b->name);') );			else				uasort( $tags, create_function('$a, $b', 'return ($a->count > $b->count);') );			if ( 'DESC' == $order )				$tags = array_reverse( $tags, true );		}	}	if ( $number > 0 )		$tags = array_slice($tags, 0, $number);	$counts = array();	$real_counts = array(); // For the alt tag	foreach ( (array) $tags as $key => $tag ) {		$real_counts[ $key ] = $tag->count;		$counts[ $key ] = $topic_count_scale_callback($tag->count);	}	$min_count = min( $counts );	$spread = max( $counts ) - $min_count;	if ( $spread <= 0 )		$spread = 1;	$font_spread = $largest - $smallest;	if ( $font_spread < 0 )		$font_spread = 1;	$font_step = $font_spread / $spread;	$a = array();	foreach ( $tags as $key => $tag ) {		$count = $counts[ $key ];		$real_count = $real_counts[ $key ];		$tag_link = '#' != $tag->link ? esc_url( $tag->link ) : '#';		$tag_id = isset($tags[ $key ]->id) ? $tags[ $key ]->id : $key;		$tag_name = $tags[ $key ]->name;		$a[] = "<a href='$tag_link' class='tag-link-$tag_id' title='" . esc_attr( $topic_count_text_callback( $real_count ) ) . "' style='font-size: " .			( $smallest + ( ( $count - $min_count ) * $font_step ) )			. "$unit;'>$tag_name</a>";	}	switch ( $format ) :	case 'array' :		$return =& $a;		break;	case 'list' :		$return = "<ul class='wp-tag-cloud'>\n\t<li>";		$return .= join( "</li>\n\t<li>", $a );		$return .= "</li>\n</ul>\n";		break;	default :		$return = join( $separator, $a );		break;	endswitch;    if ( $filter )		return apply_filters( 'wp_generate_tag_cloud', $return, $tags, $args );    else		return $return;}//// Helper functions///** * Retrieve HTML list content for category list. * * @uses Walker_Category to create HTML list content. * @since 2.1.0 * @see Walker_Category::walk() for parameters and return description. */function walk_category_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_Category;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}/** * Retrieve HTML dropdown (select) content for category list. * * @uses Walker_CategoryDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_CategoryDropdown::walk() for parameters and return description. */function walk_category_dropdown_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_CategoryDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}//// Tags///** * Retrieve the link to the tag. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_link' with tag link and tag ID as parameters. * * @param int $tag_id Tag (term) ID. * @return string */function get_tag_link( $tag_id ) {	global $wp_rewrite;	$taglink = $wp_rewrite->get_tag_permastruct();	$tag = &get_term( $tag_id, 'post_tag' );	if ( is_wp_error( $tag ) )		return $tag;	$slug = $tag->slug;	if ( empty( $taglink ) ) {		$file = get_option( 'home' ) . '/';		$taglink = $file . '?tag=' . $slug;	} else {		$taglink = str_replace( '%tag%', $slug, $taglink );		$taglink = get_option( 'home' ) . user_trailingslashit( $taglink, 'category' );	}	return apply_filters( 'tag_link', $taglink, $tag_id );}/** * Retrieve the tags for a post. * * @since 2.3.0 * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags. * * @param int $id Post ID. * @return array */function get_the_tags( $id = 0 ) {	return apply_filters( 'get_the_tags', get_the_terms( $id, 'post_tag' ) );}/** * Retrieve the tags for a post formatted as a string. * * @since 2.3.0 * @uses apply_filters() Calls 'the_tags' filter on string list of tags. * * @param string $before Optional. Before tags. * @param string $sep Optional. Between tags. * @param string $after Optional. After tags. * @return string */function get_the_tag_list( $before = '', $sep = '', $after = '' ) {	return apply_filters( 'the_tags', get_the_term_list( 0, 'post_tag', $before, $sep, $after ), $before, $sep, $after);}/** * Retrieve the tags for a post. * * @since 2.3.0 * * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function the_tags( $before = null, $sep = ', ', $after = '' ) {	if ( null === $before )		$before = __('Tags: ');	echo get_the_tag_list($before, $sep, $after);}/** * Retrieve tag description. * * @since 2.8 * * @param int $tag Optional. Tag ID. Will use global tag ID by default. * @return string Tag description, available. */function tag_description( $tag = 0 ) {	return term_description( $tag );}/** * Retrieve term description. * * @since 2.8 * * @param int $term Optional. Term ID. Will use global term ID by default. * @return string Term description, available. */function term_description( $term = 0, $taxonomy = 'post_tag' ) {	if ( !$term && ( is_tax() || is_tag() || is_category() ) ) {		global $wp_query;		$term = $wp_query->get_queried_object();		$taxonomy = $term->taxonomy;		$term = $term->term_id;	}	$description = get_term_field( 'description', $term, $taxonomy );	return is_wp_error( $description ) ? '' : $description;}/** * Retrieve the terms of the taxonomy that are attached to the post. * * This function can only be used within the loop. * * @since 2.5.0 * * @param int $id Post ID. Is not optional. * @param string $taxonomy Taxonomy name. * @return array|bool False on failure. Array of term objects on success. */function get_the_terms( $id = 0, $taxonomy ) {	global $post; 	$id = (int) $id;	if ( !$id ) {		if ( !$post->ID )			return false;		else			$id = (int) $post->ID;	}	$terms = get_object_term_cache( $id, $taxonomy );	if ( false === $terms )		$terms = wp_get_object_terms( $id, $taxonomy );	if ( empty( $terms ) )		return false;	return $terms;}/** * Retrieve a post's terms as a list with specified format. * * @since 2.5.0 * * @param int $id Post ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function get_the_term_list( $id = 0, $taxonomy, $before = '', $sep = '', $after = '' ) {	$terms = get_the_terms( $id, $taxonomy );	if ( is_wp_error( $terms ) )		return $terms;	if ( empty( $terms ) )		return false;	foreach ( $terms as $term ) {		$link = get_term_link( $term, $taxonomy );		if ( is_wp_error( $link ) )			return $link;		$term_links[] = '<a href="' . $link . '" rel="tag">' . $term->name . '</a>';	}	$term_links = apply_filters( "term_links-$taxonomy", $term_links );	return $before . join( $sep, $term_links ) . $after;}/** * Display the terms in a list. * * @since 2.5.0 * * @param int $id Term ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return null|bool False on WordPress error. Returns null when displaying. */function the_terms( $id, $taxonomy, $before = '', $sep = ', ', $after = '' ) {	$term_list = get_the_term_list( $id, $taxonomy, $before, $sep, $after );	if ( is_wp_error( $term_list ) )		return false;	echo apply_filters('the_terms', $term_list, $taxonomy, $before, $sep, $after);}/** * Check if the current post has any of given tags. * * The given tags are checked against the post's tags' term_ids, names and slugs. * Tags given as integers will only be checked against the post's tags' term_ids. * If no tags are given, determines if post has any tags. * * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids) * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 2.6.0 * * @uses is_object_in_term() * * @param string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post has any of the the given tags (or any tag, if no tag specified). */function has_tag( $tag = '', $_post = null ) {	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'post_tag', $tag );	if ( is_wp_error( $r ) )		return false;	return $r;}?>
<?php/** * Sets up the default filters and actions for most * of the WordPress hooks. * * If you need to remove a default hook, this file will * give you the priority for which to use to remove the * hook. * * Not all of the default hooks are found in default-filters.php * * @package WordPress */// Strip, trim, kses, special chars for string savesforeach ( array( 'pre_term_name', 'pre_comment_author_name', 'pre_link_name', 'pre_link_target', 'pre_link_rel', 'pre_user_display_name', 'pre_user_first_name', 'pre_user_last_name', 'pre_user_nickname' ) as $filter ) {	add_filter( $filter, 'sanitize_text_field'  );	add_filter( $filter, 'wp_filter_kses'       );	add_filter( $filter, '_wp_specialchars', 30 );}// Strip, kses, special chars for string displayforeach ( array( 'term_name', 'comment_author_name', 'link_name', 'link_target', 'link_rel', 'user_display_name', 'user_first_name', 'user_last_name', 'user_nickname' ) as $filter ) {	add_filter( $filter, 'sanitize_text_field'  );	add_filter( $filter, 'wp_kses_data'       );	add_filter( $filter, '_wp_specialchars', 30 );}// Kses only for textarea savesforeach ( array( 'pre_term_description', 'pre_link_description', 'pre_link_notes', 'pre_user_description' ) as $filter ) {	add_filter( $filter, 'wp_filter_kses' );}// Kses only for textarea saves displaysforeach ( array( 'term_description', 'link_description', 'link_notes', 'user_description' ) as $filter ) {	add_filter( $filter, 'wp_kses_data' );}// Email savesforeach ( array( 'pre_comment_author_email', 'pre_user_email' ) as $filter ) {	add_filter( $filter, 'trim'           );	add_filter( $filter, 'sanitize_email' );	add_filter( $filter, 'wp_filter_kses' );}// Email displayforeach ( array( 'comment_author_email', 'user_email' ) as $filter ) {	add_filter( $filter, 'sanitize_email' );	add_filter( $filter, 'wp_kses_data' );}// Save URLforeach ( array( 'pre_comment_author_url', 'pre_user_url', 'pre_link_url', 'pre_link_image',	'pre_link_rss' ) as $filter ) {	add_filter( $filter, 'wp_strip_all_tags' );	add_filter( $filter, 'esc_url_raw'       );	add_filter( $filter, 'wp_filter_kses'    );}// Display URLforeach ( array( 'user_url', 'link_url', 'link_image', 'link_rss', 'comment_url' ) as $filter ) {	add_filter( $filter, 'wp_strip_all_tags' );	add_filter( $filter, 'esc_url'           );	add_filter( $filter, 'wp_kses_data'    );}// Slugsforeach ( array( 'pre_term_slug' ) as $filter ) {	add_filter( $filter, 'sanitize_title' );}// Keysforeach ( array( 'pre_post_type' ) as $filter ) {	add_filter( $filter, 'sanitize_user' );}// Places to balance tags on inputforeach ( array( 'content_save_pre', 'excerpt_save_pre', 'comment_save_pre', 'pre_comment_content' ) as $filter ) {	add_filter( $filter, 'balanceTags', 50 );}// Format strings for display.foreach ( array( 'comment_author', 'term_name', 'link_name', 'link_description', 'link_notes', 'bloginfo', 'wp_title', 'widget_title' ) as $filter ) {	add_filter( $filter, 'wptexturize'   );	add_filter( $filter, 'convert_chars' );	add_filter( $filter, 'esc_html'      );}// Format WordPressforeach ( array( 'the_content', 'the_title', 'comment_text' ) as $filter )	add_filter( $filter, 'capital_P_dangit' );// Format titlesforeach ( array( 'single_post_title', 'single_cat_title', 'single_tag_title', 'single_month_title', 'nav_menu_attr_title', 'nav_menu_description' ) as $filter ) {	add_filter( $filter, 'wptexturize' );	add_filter( $filter, 'strip_tags'  );}// Format text area for display.foreach ( array( 'term_description' ) as $filter ) {	add_filter( $filter, 'wptexturize'      );	add_filter( $filter, 'convert_chars'    );	add_filter( $filter, 'wpautop'          );	add_filter( $filter, 'shortcode_unautop');}// Format for RSSforeach ( array( 'term_name_rss' ) as $filter ) {	add_filter( $filter, 'convert_chars' );}// Display filtersadd_filter( 'the_title', 'wptexturize'   );add_filter( 'the_title', 'convert_chars' );add_filter( 'the_title', 'trim'          );add_filter( 'the_content', 'wptexturize'        );add_filter( 'the_content', 'convert_smilies'    );add_filter( 'the_content', 'convert_chars'      );add_filter( 'the_content', 'wpautop'            );add_filter( 'the_content', 'shortcode_unautop'  );add_filter( 'the_content', 'prepend_attachment' );add_filter( 'the_excerpt',     'wptexturize'      );add_filter( 'the_excerpt',     'convert_smilies'  );add_filter( 'the_excerpt',     'convert_chars'    );add_filter( 'the_excerpt',     'wpautop'          );add_filter( 'the_excerpt',     'shortcode_unautop');add_filter( 'get_the_excerpt', 'wp_trim_excerpt'  );add_filter( 'comment_text', 'wptexturize'            );add_filter( 'comment_text', 'convert_chars'          );add_filter( 'comment_text', 'make_clickable',      9 );add_filter( 'comment_text', 'force_balance_tags', 25 );add_filter( 'comment_text', 'convert_smilies',    20 );add_filter( 'comment_text', 'wpautop',            30 );add_filter( 'comment_excerpt', 'convert_chars' );add_filter( 'list_cats',         'wptexturize' );add_filter( 'single_post_title', 'wptexturize' );add_filter( 'wp_sprintf', 'wp_sprintf_l', 10, 2 );// RSS filtersadd_filter( 'the_title_rss',      'strip_tags'      );add_filter( 'the_title_rss',      'ent2ncr',      8 );add_filter( 'the_title_rss',      'esc_html'        );add_filter( 'the_content_rss',    'ent2ncr',      8 );add_filter( 'the_excerpt_rss',    'convert_chars'   );add_filter( 'the_excerpt_rss',    'ent2ncr',      8 );add_filter( 'comment_author_rss', 'ent2ncr',      8 );add_filter( 'comment_text_rss',   'ent2ncr',      8 );add_filter( 'comment_text_rss',   'esc_html'        );add_filter( 'bloginfo_rss',       'ent2ncr',      8 );add_filter( 'the_author',         'ent2ncr',      8 );// Misc filtersadd_filter( 'option_ping_sites',    'privacy_ping_filter'                 );add_filter( 'option_blog_charset',  '_wp_specialchars'                    ); // IMPORTANT: This must not be wp_specialchars() or esc_html() or it'll cause an infinite loopadd_filter( 'option_home',          '_config_wp_home'                     );add_filter( 'option_siteurl',       '_config_wp_siteurl'                  );add_filter( 'tiny_mce_before_init', '_mce_set_direction'                  );add_filter( 'pre_kses',             'wp_pre_kses_less_than'               );add_filter( 'sanitize_title',       'sanitize_title_with_dashes'          );add_action( 'check_comment_flood',  'check_comment_flood_db',       10, 3 );add_filter( 'comment_flood_filter', 'wp_throttle_comment_flood',    10, 3 );add_filter( 'pre_comment_content',  'wp_rel_nofollow',              15    );add_filter( 'comment_email',        'antispambot'                         );add_filter( 'option_tag_base',      '_wp_filter_taxonomy_base'            );add_filter( 'option_category_base', '_wp_filter_taxonomy_base'            );add_filter( 'the_posts',            '_close_comments_for_old_posts'       );add_filter( 'comments_open',        '_close_comments_for_old_post', 10, 2 );add_filter( 'pings_open',           '_close_comments_for_old_post', 10, 2 );add_filter( 'editable_slug',        'urldecode'                           );add_filter( 'nav_menu_meta_box_object', '_wp_nav_menu_meta_box_object'    );// Atom SSL supportadd_filter( 'atom_service_url','atom_service_url_filter' );// Actionsadd_action( 'wp_head',             'wp_enqueue_scripts',            1     );add_action( 'wp_head',             'feed_links',                    2     );add_action( 'wp_head',             'feed_links_extra',              3     );add_action( 'wp_head',             'rsd_link'                             );add_action( 'wp_head',             'wlwmanifest_link'                     );add_action( 'wp_head',             'index_rel_link'                       );add_action( 'wp_head',             'parent_post_rel_link',          10, 0 );add_action( 'wp_head',             'start_post_rel_link',           10, 0 );add_action( 'wp_head',             'adjacent_posts_rel_link_wp_head', 10, 0 );add_action( 'wp_head',             'locale_stylesheet'                    );add_action( 'publish_future_post', 'check_and_publish_future_post', 10, 1 );add_action( 'wp_head',             'noindex',                       1     );add_action( 'wp_head',             'wp_print_styles',               8     );add_action( 'wp_head',             'wp_print_head_scripts',         9     );add_action( 'wp_head',             'wp_generator'                         );add_action( 'wp_head',             'rel_canonical'                        );add_action( 'wp_footer',           'wp_print_footer_scripts'              );add_action( 'wp_head',             'wp_shortlink_wp_head',          10, 0 );add_action( 'template_redirect',   'wp_shortlink_header',           11, 0 );// Feed Generator Tagsforeach ( array( 'rss2_head', 'commentsrss2_head', 'rss_head', 'rdf_header', 'atom_head', 'comments_atom_head', 'opml_head', 'app_head' ) as $action ) {	add_action( $action, 'the_generator' );}// WP Cronif ( !defined( 'DOING_CRON' ) )	add_action( 'sanitize_comment_cookies', 'wp_cron' );// 2 Actions 2 Furiousadd_action( 'do_feed_rdf',                'do_feed_rdf',             10, 1 );add_action( 'do_feed_rss',                'do_feed_rss',             10, 1 );add_action( 'do_feed_rss2',               'do_feed_rss2',            10, 1 );add_action( 'do_feed_atom',               'do_feed_atom',            10, 1 );add_action( 'do_pings',                   'do_all_pings',            10, 1 );add_action( 'do_robots',                  'do_robots'                      );add_action( 'sanitize_comment_cookies',   'sanitize_comment_cookies'       );add_action( 'admin_print_scripts',        'print_head_scripts',      20    );add_action( 'admin_print_footer_scripts', 'print_footer_scripts',    20    );add_action( 'admin_print_styles',         'print_admin_styles',      20    );add_action( 'init',                       'smilies_init',             5    );add_action( 'plugins_loaded',             'wp_maybe_load_widgets',    0    );add_action( 'plugins_loaded',             'wp_maybe_load_embeds',     0    );add_action( 'shutdown',                   'wp_ob_end_flush_all',      1    );add_action( 'pre_post_update',            'wp_save_post_revision'          );add_action( 'publish_post',               '_publish_post_hook',       5, 1 );add_action( 'save_post',                  '_save_post_hook',          5, 2 );add_action( 'transition_post_status',     '_transition_post_status',  5, 3 );add_action( 'comment_form', 'wp_comment_form_unfiltered_html_nonce'        );add_action( 'wp_scheduled_delete',        'wp_scheduled_delete'            );// Navigation menu actionsadd_action( 'delete_post',                '_wp_delete_post_menu_item'      );add_action( 'delete_term',                '_wp_delete_tax_menu_item'       );add_action( 'transition_post_status', '_wp_auto_add_pages_to_menu',  10, 3 );// Post Thumbnail CSS class filteringadd_action( 'begin_fetch_post_thumbnail_html', '_wp_post_thumbnail_class_filter_add'    );add_action( 'end_fetch_post_thumbnail_html',   '_wp_post_thumbnail_class_filter_remove' );// Redirect Old Slugsadd_action( 'template_redirect', 'wp_old_slug_redirect'              );add_action( 'post_updated',      'wp_check_for_changed_slugs', 12, 3 );// Nonce check for Post Previewsadd_action( 'init', '_show_post_preview' );// Timezoneadd_filter( 'pre_option_gmt_offset','wp_timezone_override_offset' );// Admin Color Schemesadd_action( 'admin_init', 'register_admin_color_schemes', 1);add_action( 'admin_color_scheme_picker', 'admin_color_scheme_picker' );?>
<?php/** * WordPress Upgrade API * * Most of the functions are pluggable and can be overwritten * * @package WordPress * @subpackage Administration *//** Include user install customize script. */if ( file_exists(WP_CONTENT_DIR . '/install.php') )	require (WP_CONTENT_DIR . '/install.php');/** WordPress Administration API */require_once(ABSPATH . 'wp-admin/includes/admin.php');/** WordPress Schema API */require_once(ABSPATH . 'wp-admin/includes/schema.php');if ( !function_exists('wp_install') ) :/** * Installs the blog * * {@internal Missing Long Description}} * * @since unknown * * @param string $blog_title Blog title. * @param string $user_name User's username. * @param string $user_email User's email. * @param bool $public Whether blog is public. * @param null $deprecated Optional. Not used. * @param string $user_password Optional. User's chosen password. Will default to a random password. * @return array Array keys 'url', 'user_id', 'password', 'password_message'. */function wp_install( $blog_title, $user_name, $user_email, $public, $deprecated = '', $user_password = '' ) {	global $wp_rewrite;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.6' );	wp_check_mysql_version();	wp_cache_flush();	make_db_current_silent();	populate_options();	populate_roles();	update_option('blogname', $blog_title);	update_option('admin_email', $user_email);	update_option('blog_public', $public);	$guessurl = wp_guess_url();	update_option('siteurl', $guessurl);	// If not a public blog, don't ping.	if ( ! $public )		update_option('default_pingback_flag', 0);	// Create default user.  If the user already exists, the user tables are	// being shared among blogs.  Just set the role in that case.	$user_id = username_exists($user_name);	$user_password = trim($user_password);	$email_password = false;	if ( !$user_id && empty($user_password) ) {		$user_password = wp_generate_password();		$message = __('<strong><em>Note that password</em></strong> carefully! It is a <em>random</em> password that was generated just for you.');		$user_id = wp_create_user($user_name, $user_password, $user_email);		update_user_option($user_id, 'default_password_nag', true, true);		$email_password = true;	} else if ( !$user_id ) {		// Password has been provided		$message = '<em>'.__('Your chosen password.').'</em>';		$user_id = wp_create_user($user_name, $user_password, $user_email);	} else {		$message =  __('User already exists. Password inherited.');	}	$user = new WP_User($user_id);	$user->set_role('administrator');	wp_install_defaults($user_id);	$wp_rewrite->flush_rules();	wp_new_blog_notification($blog_title, $guessurl, $user_id, ($email_password ? $user_password : __('The password you chose during the install.') ) );	wp_cache_flush();	return array('url' => $guessurl, 'user_id' => $user_id, 'password' => $user_password, 'password_message' => $message);}endif;if ( !function_exists('wp_install_defaults') ) :/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. */function wp_install_defaults($user_id) {	global $wpdb, $wp_rewrite, $current_site, $table_prefix;	// Default category	$cat_name = __('Uncategorized');	/* translators: Default category slug */	$cat_slug = sanitize_title(_x('Uncategorized', 'Default category slug'));	if ( global_terms_enabled() ) {		$cat_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s", $cat_slug ) );		if ( $cat_id == null ) {			$wpdb->insert( $wpdb->sitecategories, array('cat_ID' => 0, 'cat_name' => $cat_name, 'category_nicename' => $cat_slug, 'last_updated' => current_time('mysql', true)) );			$cat_id = $wpdb->insert_id;		}		update_option('default_category', $cat_id);	} else {		$cat_id = 1;	}	$wpdb->insert( $wpdb->terms, array('term_id' => $cat_id, 'name' => $cat_name, 'slug' => $cat_slug, 'term_group' => 0) );	$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $cat_id, 'taxonomy' => 'category', 'description' => '', 'parent' => 0, 'count' => 1));	$cat_tt_id = $wpdb->insert_id;	// Default link category	$cat_name = __('Blogroll');	/* translators: Default link category slug */	$cat_slug = sanitize_title(_x('Blogroll', 'Default link category slug'));	if ( global_terms_enabled() ) {		$blogroll_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s", $cat_slug ) );		if ( $blogroll_id == null ) {			$wpdb->insert( $wpdb->sitecategories, array('cat_ID' => 0, 'cat_name' => $cat_name, 'category_nicename' => $cat_slug, 'last_updated' => current_time('mysql', true)) );			$blogroll_id = $wpdb->insert_id;		}		update_option('default_link_category', $blogroll_id);	} else {		$blogroll_id = 2;	}	$wpdb->insert( $wpdb->terms, array('term_id' => $blogroll_id, 'name' => $cat_name, 'slug' => $cat_slug, 'term_group' => 0) );	$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $blogroll_id, 'taxonomy' => 'link_category', 'description' => '', 'parent' => 0, 'count' => 7));	$blogroll_tt_id = $wpdb->insert_id;	// Now drop in some default links	$default_links = array();	$default_links[] = array(	'link_url' => 'http://codex.wordpress.org/',								'link_name' => 'Documentation',								'link_rss' => '',								'link_notes' => '');	$default_links[] = array(	'link_url' => 'http://wordpress.org/development/',								'link_name' => 'WordPress Blog',								'link_rss' => 'http://wordpress.org/development/feed/',								'link_notes' => '');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/ideas/',								'link_name' => 'Suggest Ideas',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/support/',								'link_name' => 'Support Forum',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/plugins/',								'link_name' => 'Plugins',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/themes/',								'link_name' => 'Themes',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://planet.wordpress.org/',								'link_name' => 'WordPress Planet',								'link_rss' => '',								'link_notes' =>'');	foreach ( $default_links as $link ) {		$wpdb->insert( $wpdb->links, $link);		$wpdb->insert( $wpdb->term_relationships, array('term_taxonomy_id' => $blogroll_tt_id, 'object_id' => $wpdb->insert_id) );	}	// First post	$now = date('Y-m-d H:i:s');	$now_gmt = gmdate('Y-m-d H:i:s');	$first_post_guid = get_option('home') . '/?p=1';	if ( is_multisite() ) {		$first_post = get_site_option( 'first_post' );		if ( empty($first_post) )			$first_post = stripslashes( __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ) );		$first_post = str_replace( "SITE_URL", esc_url( network_home_url() ), $first_post );		$first_post = str_replace( "SITE_NAME", $current_site->site_name, $first_post );	} else {		$first_post = __('Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!');	}	$wpdb->insert( $wpdb->posts, array(								'post_author' => $user_id,								'post_date' => $now,								'post_date_gmt' => $now_gmt,								'post_content' => $first_post,								'post_excerpt' => '',								'post_title' => __('Hello world!'),								/* translators: Default post slug */								'post_name' => sanitize_title( _x('hello-world', 'Default post slug') ),								'post_modified' => $now,								'post_modified_gmt' => $now_gmt,								'guid' => $first_post_guid,								'comment_count' => 1,								'to_ping' => '',								'pinged' => '',								'post_content_filtered' => ''								));	$wpdb->insert( $wpdb->term_relationships, array('term_taxonomy_id' => $cat_tt_id, 'object_id' => 1) );	// Default comment	$first_comment_author = __('Mr WordPress');	$first_comment_url = 'http://wordpress.org/';	$first_comment = __('Hi, this is a comment.<br />To delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.');	if ( is_multisite() ) {		$first_comment_author = get_site_option( 'first_comment_author', $first_comment_author );		$first_comment_url = get_site_option( 'first_comment_url', network_home_url() );		$first_comment = get_site_option( 'first_comment', $first_comment );	}	$wpdb->insert( $wpdb->comments, array(								'comment_post_ID' => 1,								'comment_author' => $first_comment_author,								'comment_author_email' => '',								'comment_author_url' => $first_comment_url,								'comment_date' => $now,								'comment_date_gmt' => $now_gmt,								'comment_content' => $first_comment								));	// First Page	$first_page = __('This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress.');	if ( is_multisite() )		$first_page = get_site_option( 'first_page', $first_page );	$first_post_guid = get_option('home') . '/?page_id=2';	$wpdb->insert( $wpdb->posts, array(								'post_author' => $user_id,								'post_date' => $now,								'post_date_gmt' => $now_gmt,								'post_content' => $first_page,								'post_excerpt' => '',								'post_title' => __('About'),								/* translators: Default page slug */								'post_name' => _x('about', 'Default page slug'),								'post_modified' => $now,								'post_modified_gmt' => $now_gmt,								'guid' => $first_post_guid,								'post_type' => 'page',								'to_ping' => '',								'pinged' => '',								'post_content_filtered' => ''								));	$wpdb->insert( $wpdb->postmeta, array( 'post_id' => 2, 'meta_key' => '_wp_page_template', 'meta_value' => 'default' ) );	// Setup default widgets for default theme.	update_option( 'widget_search', array ( 2 => array ( 'title' => '' ), '_multiwidget' => 1 ) );	update_option( 'widget_recent-posts', array ( 2 => array ( 'title' => '', 'number' => 5 ), '_multiwidget' => 1 ) );	update_option( 'widget_recent-comments', array ( 2 => array ( 'title' => '', 'number' => 5 ), '_multiwidget' => 1 ) );	update_option( 'widget_archives', array ( 2 => array ( 'title' => '', 'count' => 0, 'dropdown' => 0 ), '_multiwidget' => 1 ) );	update_option( 'widget_categories', array ( 2 => array ( 'title' => '', 'count' => 0, 'hierarchical' => 0, 'dropdown' => 0 ), '_multiwidget' => 1 ) );	update_option( 'widget_meta', array ( 2 => array ( 'title' => '' ), '_multiwidget' => 1 ) );	update_option( 'sidebars_widgets', array ( 'wp_inactive_widgets' => array ( ), 'primary-widget-area' => array ( 0 => 'search-2', 1 => 'recent-posts-2', 2 => 'recent-comments-2', 3 => 'archives-2', 4 => 'categories-2', 5 => 'meta-2', ), 'secondary-widget-area' => array ( ), 'first-footer-widget-area' => array ( ), 'second-footer-widget-area' => array ( ), 'third-footer-widget-area' => array ( ), 'fourth-footer-widget-area' => array ( ), 'array_version' => 3 ) );	if ( is_multisite() ) {		// Flush rules to pick up the new page.		$wp_rewrite->init();		$wp_rewrite->flush_rules();		$user = new WP_User($user_id);		$wpdb->update( $wpdb->options, array('option_value' => $user->user_email), array('option_name' => 'admin_email') );		// Remove all perms except for the login user.		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id != %d AND meta_key = %s", $user_id, $table_prefix.'user_level') );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id != %d AND meta_key = %s", $user_id, $table_prefix.'capabilities') );		// Delete any caps that snuck into the previously active blog. (Hardcoded to blog 1 for now.) TODO: Get previous_blog_id.		if ( !is_super_admin( $user_id ) && $user_id != 1 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $wpdb->base_prefix.'1_capabilities') );	}}endif;if ( !function_exists('wp_new_blog_notification') ) :/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $blog_title Blog title. * @param string $blog_url Blog url. * @param int $user_id User ID. * @param string $password User's Password. */function wp_new_blog_notification($blog_title, $blog_url, $user_id, $password) {	$user = new WP_User($user_id);	$email = $user->user_email;	$name = $user->user_login;	$message = sprintf(__("Your new WordPress site has been successfully set up at:%1\$sYou can log in to the administrator account with the following information:Username: %2\$sPassword: %3\$sWe hope you enjoy your new site. Thanks!--The WordPress Teamhttp://wordpress.org/"), $blog_url, $name, $password);	@wp_mail($email, __('New WordPress Site'), $message);}endif;if ( !function_exists('wp_upgrade') ) :/** * Run WordPress Upgrade functions. * * {@internal Missing Long Description}} * * @since unknown * * @return null */function wp_upgrade() {	global $wp_current_db_version, $wp_db_version, $wpdb;	$wp_current_db_version = __get_option('db_version');	// We are up-to-date.  Nothing to do.	if ( $wp_db_version == $wp_current_db_version )		return;	if ( ! is_blog_installed() )		return;	wp_check_mysql_version();	wp_cache_flush();	pre_schema_upgrade();	make_db_current_silent();	upgrade_all();	if ( is_multisite() && is_main_site() )		upgrade_network();	wp_cache_flush();	if ( is_multisite() ) {		if ( $wpdb->get_row( "SELECT blog_id FROM {$wpdb->blog_versions} WHERE blog_id = '{$wpdb->blogid}'" ) )			$wpdb->query( "UPDATE {$wpdb->blog_versions} SET db_version = '{$wp_db_version}' WHERE blog_id = '{$wpdb->blogid}'" );		else			$wpdb->query( "INSERT INTO {$wpdb->blog_versions} ( `blog_id` , `db_version` , `last_updated` ) VALUES ( '{$wpdb->blogid}', '{$wp_db_version}', NOW());" );	}}endif;/** * Functions to be called in install and upgrade scripts. * * {@internal Missing Long Description}} * * @since unknown */function upgrade_all() {	global $wp_current_db_version, $wp_db_version, $wp_rewrite;	$wp_current_db_version = __get_option('db_version');	// We are up-to-date.  Nothing to do.	if ( $wp_db_version == $wp_current_db_version )		return;	// If the version is not set in the DB, try to guess the version.	if ( empty($wp_current_db_version) ) {		$wp_current_db_version = 0;		// If the template option exists, we have 1.5.		$template = __get_option('template');		if ( !empty($template) )			$wp_current_db_version = 2541;	}	if ( $wp_current_db_version < 6039 )		upgrade_230_options_table();	populate_options();	if ( $wp_current_db_version < 2541 ) {		upgrade_100();		upgrade_101();		upgrade_110();		upgrade_130();	}	if ( $wp_current_db_version < 3308 )		upgrade_160();	if ( $wp_current_db_version < 4772 )		upgrade_210();	if ( $wp_current_db_version < 4351 )		upgrade_old_slugs();	if ( $wp_current_db_version < 5539 )		upgrade_230();	if ( $wp_current_db_version < 6124 )		upgrade_230_old_tables();	if ( $wp_current_db_version < 7499 )		upgrade_250();	if ( $wp_current_db_version < 7935 )		upgrade_252();	if ( $wp_current_db_version < 8201 )		upgrade_260();	if ( $wp_current_db_version < 8989 )		upgrade_270();	if ( $wp_current_db_version < 10360 )		upgrade_280();	if ( $wp_current_db_version < 11958 )		upgrade_290();	if ( $wp_current_db_version < 15260 )		upgrade_300();	maybe_disable_automattic_widgets();	update_option( 'db_version', $wp_db_version );	update_option( 'db_upgraded', true );}/** * Execute changes made in WordPress 1.0. * * @since 1.0.0 */function upgrade_100() {	global $wpdb;	// Get the title and ID of every post, post_name to check if it already has a value	$posts = $wpdb->get_results("SELECT ID, post_title, post_name FROM $wpdb->posts WHERE post_name = ''");	if ($posts) {		foreach($posts as $post) {			if ('' == $post->post_name) {				$newtitle = sanitize_title($post->post_title);				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_name = %s WHERE ID = %d", $newtitle, $post->ID) );			}		}	}	$categories = $wpdb->get_results("SELECT cat_ID, cat_name, category_nicename FROM $wpdb->categories");	foreach ($categories as $category) {		if ('' == $category->category_nicename) {			$newtitle = sanitize_title($category->cat_name);			$wpdb>update( $wpdb->categories, array('category_nicename' => $newtitle), array('cat_ID' => $category->cat_ID) );		}	}	$wpdb->query("UPDATE $wpdb->options SET option_value = REPLACE(option_value, 'wp-links/links-images/', 'wp-images/links/')	WHERE option_name LIKE 'links_rating_image%'	AND option_value LIKE 'wp-links/links-images/%'");	$done_ids = $wpdb->get_results("SELECT DISTINCT post_id FROM $wpdb->post2cat");	if ($done_ids) :		foreach ($done_ids as $done_id) :			$done_posts[] = $done_id->post_id;		endforeach;		$catwhere = ' AND ID NOT IN (' . implode(',', $done_posts) . ')';	else:		$catwhere = '';	endif;	$allposts = $wpdb->get_results("SELECT ID, post_category FROM $wpdb->posts WHERE post_category != '0' $catwhere");	if ($allposts) :		foreach ($allposts as $post) {			// Check to see if it's already been imported			$cat = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->post2cat WHERE post_id = %d AND category_id = %d", $post->ID, $post->post_category) );			if (!$cat && 0 != $post->post_category) { // If there's no result				$wpdb->insert( $wpdb->post2cat, array('post_id' => $post->ID, 'category_id' => $post->post_category) );			}		}	endif;}/** * Execute changes made in WordPress 1.0.1. * * @since 1.0.1 */function upgrade_101() {	global $wpdb;	// Clean up indices, add a few	add_clean_index($wpdb->posts, 'post_name');	add_clean_index($wpdb->posts, 'post_status');	add_clean_index($wpdb->categories, 'category_nicename');	add_clean_index($wpdb->comments, 'comment_approved');	add_clean_index($wpdb->comments, 'comment_post_ID');	add_clean_index($wpdb->links , 'link_category');	add_clean_index($wpdb->links , 'link_visible');}/** * Execute changes made in WordPress 1.2. * * @since 1.2.0 */function upgrade_110() {	global $wpdb;	// Set user_nicename.	$users = $wpdb->get_results("SELECT ID, user_nickname, user_nicename FROM $wpdb->users");	foreach ($users as $user) {		if ('' == $user->user_nicename) {			$newname = sanitize_title($user->user_nickname);			$wpdb->update( $wpdb->users, array('user_nicename' => $newname), array('ID' => $user->ID) );		}	}	$users = $wpdb->get_results("SELECT ID, user_pass from $wpdb->users");	foreach ($users as $row) {		if (!preg_match('/^[A-Fa-f0-9]{32}$/', $row->user_pass)) {			$wpdb->update( $wpdb->users, array('user_pass' => md5($row->user_pass)), array('ID' => $row->ID) );		}	}	// Get the GMT offset, we'll use that later on	$all_options = get_alloptions_110();	$time_difference = $all_options->time_difference;	$server_time = time()+date('Z');	$weblogger_time = $server_time + $time_difference*3600;	$gmt_time = time();	$diff_gmt_server = ($gmt_time - $server_time) / 3600;	$diff_weblogger_server = ($weblogger_time - $server_time) / 3600;	$diff_gmt_weblogger = $diff_gmt_server - $diff_weblogger_server;	$gmt_offset = -$diff_gmt_weblogger;	// Add a gmt_offset option, with value $gmt_offset	add_option('gmt_offset', $gmt_offset);	// Check if we already set the GMT fields (if we did, then	// MAX(post_date_gmt) can't be '0000-00-00 00:00:00'	// <michel_v> I just slapped myself silly for not thinking about it earlier	$got_gmt_fields = ! ($wpdb->get_var("SELECT MAX(post_date_gmt) FROM $wpdb->posts") == '0000-00-00 00:00:00');	if (!$got_gmt_fields) {		// Add or substract time to all dates, to get GMT dates		$add_hours = intval($diff_gmt_weblogger);		$add_minutes = intval(60 * ($diff_gmt_weblogger - $add_hours));		$wpdb->query("UPDATE $wpdb->posts SET post_date_gmt = DATE_ADD(post_date, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");		$wpdb->query("UPDATE $wpdb->posts SET post_modified = post_date");		$wpdb->query("UPDATE $wpdb->posts SET post_modified_gmt = DATE_ADD(post_modified, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE) WHERE post_modified != '0000-00-00 00:00:00'");		$wpdb->query("UPDATE $wpdb->comments SET comment_date_gmt = DATE_ADD(comment_date, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");		$wpdb->query("UPDATE $wpdb->users SET user_registered = DATE_ADD(user_registered, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");	}}/** * Execute changes made in WordPress 1.5. * * @since 1.5.0 */function upgrade_130() {	global $wpdb;	// Remove extraneous backslashes.	$posts = $wpdb->get_results("SELECT ID, post_title, post_content, post_excerpt, guid, post_date, post_name, post_status, post_author FROM $wpdb->posts");	if ($posts) {		foreach($posts as $post) {			$post_content = addslashes(deslash($post->post_content));			$post_title = addslashes(deslash($post->post_title));			$post_excerpt = addslashes(deslash($post->post_excerpt));			if ( empty($post->guid) )				$guid = get_permalink($post->ID);			else				$guid = $post->guid;			$wpdb->update( $wpdb->posts, compact('post_title', 'post_content', 'post_excerpt', 'guid'), array('ID' => $post->ID) );		}	}	// Remove extraneous backslashes.	$comments = $wpdb->get_results("SELECT comment_ID, comment_author, comment_content FROM $wpdb->comments");	if ($comments) {		foreach($comments as $comment) {			$comment_content = deslash($comment->comment_content);			$comment_author = deslash($comment->comment_author);			$wpdb->update($wpdb->comments, compact('comment_content', 'comment_author'), array('comment_ID' => $comment->comment_ID) );		}	}	// Remove extraneous backslashes.	$links = $wpdb->get_results("SELECT link_id, link_name, link_description FROM $wpdb->links");	if ($links) {		foreach($links as $link) {			$link_name = deslash($link->link_name);			$link_description = deslash($link->link_description);			$wpdb->update( $wpdb->links, compact('link_name', 'link_description'), array('link_id' => $link->link_id) );		}	}	$active_plugins = __get_option('active_plugins');	// If plugins are not stored in an array, they're stored in the old	// newline separated format.  Convert to new format.	if ( !is_array( $active_plugins ) ) {		$active_plugins = explode("\n", trim($active_plugins));		update_option('active_plugins', $active_plugins);	}	// Obsolete tables	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optionvalues');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiontypes');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiongroups');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiongroup_options');	// Update comments table to use comment_type	$wpdb->query("UPDATE $wpdb->comments SET comment_type='trackback', comment_content = REPLACE(comment_content, '<trackback />', '') WHERE comment_content LIKE '<trackback />%'");	$wpdb->query("UPDATE $wpdb->comments SET comment_type='pingback', comment_content = REPLACE(comment_content, '<pingback />', '') WHERE comment_content LIKE '<pingback />%'");	// Some versions have multiple duplicate option_name rows with the same values	$options = $wpdb->get_results("SELECT option_name, COUNT(option_name) AS dupes FROM `$wpdb->options` GROUP BY option_name");	foreach ( $options as $option ) {		if ( 1 != $option->dupes ) { // Could this be done in the query?			$limit = $option->dupes - 1;			$dupe_ids = $wpdb->get_col( $wpdb->prepare("SELECT option_id FROM $wpdb->options WHERE option_name = %s LIMIT %d", $option->option_name, $limit) );			if ( $dupe_ids ) {				$dupe_ids = join($dupe_ids, ',');				$wpdb->query("DELETE FROM $wpdb->options WHERE option_id IN ($dupe_ids)");			}		}	}	make_site_theme();}/** * Execute changes made in WordPress 2.0. * * @since 2.0.0 */function upgrade_160() {	global $wpdb, $wp_current_db_version;	populate_roles_160();	$users = $wpdb->get_results("SELECT * FROM $wpdb->users");	foreach ( $users as $user ) :		if ( !empty( $user->user_firstname ) )			update_user_meta( $user->ID, 'first_name', $wpdb->escape($user->user_firstname) );		if ( !empty( $user->user_lastname ) )			update_user_meta( $user->ID, 'last_name', $wpdb->escape($user->user_lastname) );		if ( !empty( $user->user_nickname ) )			update_user_meta( $user->ID, 'nickname', $wpdb->escape($user->user_nickname) );		if ( !empty( $user->user_level ) )			update_user_meta( $user->ID, $wpdb->prefix . 'user_level', $user->user_level );		if ( !empty( $user->user_icq ) )			update_user_meta( $user->ID, 'icq', $wpdb->escape($user->user_icq) );		if ( !empty( $user->user_aim ) )			update_user_meta( $user->ID, 'aim', $wpdb->escape($user->user_aim) );		if ( !empty( $user->user_msn ) )			update_user_meta( $user->ID, 'msn', $wpdb->escape($user->user_msn) );		if ( !empty( $user->user_yim ) )			update_user_meta( $user->ID, 'yim', $wpdb->escape($user->user_icq) );		if ( !empty( $user->user_description ) )			update_user_meta( $user->ID, 'description', $wpdb->escape($user->user_description) );		if ( isset( $user->user_idmode ) ):			$idmode = $user->user_idmode;			if ($idmode == 'nickname') $id = $user->user_nickname;			if ($idmode == 'login') $id = $user->user_login;			if ($idmode == 'firstname') $id = $user->user_firstname;			if ($idmode == 'lastname') $id = $user->user_lastname;			if ($idmode == 'namefl') $id = $user->user_firstname.' '.$user->user_lastname;			if ($idmode == 'namelf') $id = $user->user_lastname.' '.$user->user_firstname;			if (!$idmode) $id = $user->user_nickname;			$wpdb->update( $wpdb->users, array('display_name' => $id), array('ID' => $user->ID) );		endif;		// FIXME: RESET_CAPS is temporary code to reset roles and caps if flag is set.		$caps = get_user_meta( $user->ID, $wpdb->prefix . 'capabilities');		if ( empty($caps) || defined('RESET_CAPS') ) {			$level = get_user_meta($user->ID, $wpdb->prefix . 'user_level', true);			$role = translate_level_to_role($level);			update_user_meta( $user->ID, $wpdb->prefix . 'capabilities', array($role => true) );		}	endforeach;	$old_user_fields = array( 'user_firstname', 'user_lastname', 'user_icq', 'user_aim', 'user_msn', 'user_yim', 'user_idmode', 'user_ip', 'user_domain', 'user_browser', 'user_description', 'user_nickname', 'user_level' );	$wpdb->hide_errors();	foreach ( $old_user_fields as $old )		$wpdb->query("ALTER TABLE $wpdb->users DROP $old");	$wpdb->show_errors();	// populate comment_count field of posts table	$comments = $wpdb->get_results( "SELECT comment_post_ID, COUNT(*) as c FROM $wpdb->comments WHERE comment_approved = '1' GROUP BY comment_post_ID" );	if ( is_array( $comments ) )		foreach ($comments as $comment)			$wpdb->update( $wpdb->posts, array('comment_count' => $comment->c), array('ID' => $comment->comment_post_ID) );	// Some alpha versions used a post status of object instead of attachment and put	// the mime type in post_type instead of post_mime_type.	if ( $wp_current_db_version > 2541 && $wp_current_db_version <= 3091 ) {		$objects = $wpdb->get_results("SELECT ID, post_type FROM $wpdb->posts WHERE post_status = 'object'");		foreach ($objects as $object) {			$wpdb->update( $wpdb->posts, array(	'post_status' => 'attachment',												'post_mime_type' => $object->post_type,												'post_type' => ''),										 array( 'ID' => $object->ID ) );			$meta = get_post_meta($object->ID, 'imagedata', true);			if ( ! empty($meta['file']) )				update_attached_file( $object->ID, $meta['file'] );		}	}}/** * Execute changes made in WordPress 2.1. * * @since 2.1.0 */function upgrade_210() {	global $wpdb, $wp_current_db_version;	if ( $wp_current_db_version < 3506 ) {		// Update status and type.		$posts = $wpdb->get_results("SELECT ID, post_status FROM $wpdb->posts");		if ( ! empty($posts) ) foreach ($posts as $post) {			$status = $post->post_status;			$type = 'post';			if ( 'static' == $status ) {				$status = 'publish';				$type = 'page';			} else if ( 'attachment' == $status ) {				$status = 'inherit';				$type = 'attachment';			}			$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_status = %s, post_type = %s WHERE ID = %d", $status, $type, $post->ID) );		}	}	if ( $wp_current_db_version < 3845 ) {		populate_roles_210();	}	if ( $wp_current_db_version < 3531 ) {		// Give future posts a post_status of future.		$now = gmdate('Y-m-d H:i:59');		$wpdb->query ("UPDATE $wpdb->posts SET post_status = 'future' WHERE post_status = 'publish' AND post_date_gmt > '$now'");		$posts = $wpdb->get_results("SELECT ID, post_date FROM $wpdb->posts WHERE post_status ='future'");		if ( !empty($posts) )			foreach ( $posts as $post )				wp_schedule_single_event(mysql2date('U', $post->post_date, false), 'publish_future_post', array($post->ID));	}}/** * Execute changes made in WordPress 2.3. * * @since 2.3.0 */function upgrade_230() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 5200 ) {		populate_roles_230();	}	// Convert categories to terms.	$tt_ids = array();	$have_tags = false;	$categories = $wpdb->get_results("SELECT * FROM $wpdb->categories ORDER BY cat_ID");	foreach ($categories as $category) {		$term_id = (int) $category->cat_ID;		$name = $category->cat_name;		$description = $category->category_description;		$slug = $category->category_nicename;		$parent = $category->category_parent;		$term_group = 0;		// Associate terms with the same slug in a term group and make slugs unique.		if ( $exists = $wpdb->get_results( $wpdb->prepare("SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $slug) ) ) {			$term_group = $exists[0]->term_group;			$id = $exists[0]->term_id;			$num = 2;			do {				$alt_slug = $slug . "-$num";				$num++;				$slug_check = $wpdb->get_var( $wpdb->prepare("SELECT slug FROM $wpdb->terms WHERE slug = %s", $alt_slug) );			} while ( $slug_check );			$slug = $alt_slug;			if ( empty( $term_group ) ) {				$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms GROUP BY term_group") + 1;				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->terms SET term_group = %d WHERE term_id = %d", $term_group, $id) );			}		}		$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->terms (term_id, name, slug, term_group) VALUES		(%d, %s, %s, %d)", $term_id, $name, $slug, $term_group) );		$count = 0;		if ( !empty($category->category_count) ) {			$count = (int) $category->category_count;			$taxonomy = 'category';			$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->term_taxonomy (term_id, taxonomy, description, parent, count) VALUES ( %d, %s, %s, %d, %d)", $term_id, $taxonomy, $description, $parent, $count) );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( !empty($category->link_count) ) {			$count = (int) $category->link_count;			$taxonomy = 'link_category';			$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->term_taxonomy (term_id, taxonomy, description, parent, count) VALUES ( %d, %s, %s, %d, %d)", $term_id, $taxonomy, $description, $parent, $count) );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( !empty($category->tag_count) ) {			$have_tags = true;			$count = (int) $category->tag_count;			$taxonomy = 'post_tag';			$wpdb->insert( $wpdb->term_taxonomy, compact('term_id', 'taxonomy', 'description', 'parent', 'count') );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( empty($count) ) {			$count = 0;			$taxonomy = 'category';			$wpdb->insert( $wpdb->term_taxonomy, compact('term_id', 'taxonomy', 'description', 'parent', 'count') );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}	}	$select = 'post_id, category_id';	if ( $have_tags )		$select .= ', rel_type';	$posts = $wpdb->get_results("SELECT $select FROM $wpdb->post2cat GROUP BY post_id, category_id");	foreach ( $posts as $post ) {		$post_id = (int) $post->post_id;		$term_id = (int) $post->category_id;		$taxonomy = 'category';		if ( !empty($post->rel_type) && 'tag' == $post->rel_type)			$taxonomy = 'tag';		$tt_id = $tt_ids[$term_id][$taxonomy];		if ( empty($tt_id) )			continue;		$wpdb->insert( $wpdb->term_relationships, array('object_id' => $post_id, 'term_taxonomy_id' => $tt_id) );	}	// < 3570 we used linkcategories.  >= 3570 we used categories and link2cat.	if ( $wp_current_db_version < 3570 ) {		// Create link_category terms for link categories.  Create a map of link cat IDs		// to link_category terms.		$link_cat_id_map = array();		$default_link_cat = 0;		$tt_ids = array();		$link_cats = $wpdb->get_results("SELECT cat_id, cat_name FROM " . $wpdb->prefix . 'linkcategories');		foreach ( $link_cats as $category) {			$cat_id = (int) $category->cat_id;			$term_id = 0;			$name = $wpdb->escape($category->cat_name);			$slug = sanitize_title($name);			$term_group = 0;			// Associate terms with the same slug in a term group and make slugs unique.			if ( $exists = $wpdb->get_results( $wpdb->prepare("SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $slug) ) ) {				$term_group = $exists[0]->term_group;				$term_id = $exists[0]->term_id;			}			if ( empty($term_id) ) {				$wpdb->insert( $wpdb->terms, compact('name', 'slug', 'term_group') );				$term_id = (int) $wpdb->insert_id;			}			$link_cat_id_map[$cat_id] = $term_id;			$default_link_cat = $term_id;			$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $term_id, 'taxonomy' => 'link_category', 'description' => '', 'parent' => 0, 'count' => 0) );			$tt_ids[$term_id] = (int) $wpdb->insert_id;		}		// Associate links to cats.		$links = $wpdb->get_results("SELECT link_id, link_category FROM $wpdb->links");		if ( !empty($links) ) foreach ( $links as $link ) {			if ( 0 == $link->link_category )				continue;			if ( ! isset($link_cat_id_map[$link->link_category]) )				continue;			$term_id = $link_cat_id_map[$link->link_category];			$tt_id = $tt_ids[$term_id];			if ( empty($tt_id) )				continue;			$wpdb->insert( $wpdb->term_relationships, array('object_id' => $link->link_id, 'term_taxonomy_id' => $tt_id) );		}		// Set default to the last category we grabbed during the upgrade loop.		update_option('default_link_category', $default_link_cat);	} else {		$links = $wpdb->get_results("SELECT link_id, category_id FROM $wpdb->link2cat GROUP BY link_id, category_id");		foreach ( $links as $link ) {			$link_id = (int) $link->link_id;			$term_id = (int) $link->category_id;			$taxonomy = 'link_category';			$tt_id = $tt_ids[$term_id][$taxonomy];			if ( empty($tt_id) )				continue;			$wpdb->insert( $wpdb->term_relationships, array('object_id' => $link_id, 'term_taxonomy_id' => $tt_id) );		}	}	if ( $wp_current_db_version < 4772 ) {		// Obsolete linkcategories table		$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'linkcategories');	}	// Recalculate all counts	$terms = $wpdb->get_results("SELECT term_taxonomy_id, taxonomy FROM $wpdb->term_taxonomy");	foreach ( (array) $terms as $term ) {		if ( ('post_tag' == $term->taxonomy) || ('category' == $term->taxonomy) )			$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->term_relationships, $wpdb->posts WHERE $wpdb->posts.ID = $wpdb->term_relationships.object_id AND post_status = 'publish' AND post_type = 'post' AND term_taxonomy_id = %d", $term->term_taxonomy_id) );		else			$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $term->term_taxonomy_id) );		$wpdb->update( $wpdb->term_taxonomy, array('count' => $count), array('term_taxonomy_id' => $term->term_taxonomy_id) );	}}/** * Remove old options from the database. * * @since 2.3.0 */function upgrade_230_options_table() {	global $wpdb;	$old_options_fields = array( 'option_can_override', 'option_type', 'option_width', 'option_height', 'option_description', 'option_admin_level' );	$wpdb->hide_errors();	foreach ( $old_options_fields as $old )		$wpdb->query("ALTER TABLE $wpdb->options DROP $old");	$wpdb->show_errors();}/** * Remove old categories, link2cat, and post2cat database tables. * * @since 2.3.0 */function upgrade_230_old_tables() {	global $wpdb;	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'categories');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'link2cat');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'post2cat');}/** * Upgrade old slugs made in version 2.2. * * @since 2.2.0 */function upgrade_old_slugs() {	// upgrade people who were using the Redirect Old Slugs plugin	global $wpdb;	$wpdb->query("UPDATE $wpdb->postmeta SET meta_key = '_wp_old_slug' WHERE meta_key = 'old_slug'");}/** * Execute changes made in WordPress 2.5.0. * * @since 2.5.0 */function upgrade_250() {	global $wp_current_db_version;	if ( $wp_current_db_version < 6689 ) {		populate_roles_250();	}}/** * Execute changes made in WordPress 2.5.2. * * @since 2.5.2 */function upgrade_252() {	global $wpdb;	$wpdb->query("UPDATE $wpdb->users SET user_activation_key = ''");}/** * Execute changes made in WordPress 2.6. * * @since 2.6.0 */function upgrade_260() {	global $wp_current_db_version;	if ( $wp_current_db_version < 8000 )		populate_roles_260();	if ( $wp_current_db_version < 8201 ) {		update_option('enable_app', 1);		update_option('enable_xmlrpc', 1);	}}/** * Execute changes made in WordPress 2.7. * * @since 2.7.0 */function upgrade_270() {	global $wpdb, $wp_current_db_version;	if ( $wp_current_db_version < 8980 )		populate_roles_270();	// Update post_date for unpublished posts with empty timestamp	if ( $wp_current_db_version < 8921 )		$wpdb->query( "UPDATE $wpdb->posts SET post_date = post_modified WHERE post_date = '0000-00-00 00:00:00'" );}/** * Execute changes made in WordPress 2.8. * * @since 2.8.0 */function upgrade_280() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 10360 )		populate_roles_280();	if ( is_multisite() ) {		$start = 0;		while( $rows = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options ORDER BY option_id LIMIT $start, 20" ) ) {			foreach( $rows as $row ) {				$value = $row->option_value;				if ( !@unserialize( $value ) )					$value = stripslashes( $value );				if ( $value !== $row->option_value ) {					update_option( $row->option_name, $value );				}			}			$start += 20;		}		refresh_blog_details( $wpdb->blogid );	}}/** * Execute changes made in WordPress 2.9. * * @since 2.9.0 */function upgrade_290() {	global $wp_current_db_version;	if ( $wp_current_db_version < 11958 ) {		// Previously, setting depth to 1 would redundantly disable threading, but now 2 is the minimum depth to avoid confusion		if ( get_option( 'thread_comments_depth' ) == '1' ) {			update_option( 'thread_comments_depth', 2 );			update_option( 'thread_comments', 0 );		}	}}/** * Execute changes made in WordPress 3.0. * * @since 3.0.0 */function upgrade_300() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 15093 )		populate_roles_300();	if ( $wp_current_db_version < 14139 && is_multisite() && is_main_site() && ! defined( 'MULTISITE' ) && get_site_option( 'siteurl' ) === false )		add_site_option( 'siteurl', '' );	// 3.0-alpha nav menu postmeta changes. can be removed before release. // r13802	if ( $wp_current_db_version >= 13226 && $wp_current_db_version < 13974 )		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_key IN( 'menu_type', 'object_id', 'menu_new_window', 'menu_link', '_menu_item_append', 'menu_item_append', 'menu_item_type', 'menu_item_object_id', 'menu_item_target', 'menu_item_classes', 'menu_item_xfn', 'menu_item_url' )" );	// 3.0-beta1 remove_user primitive->meta cap. can be removed before release. r13956	if ( $wp_current_db_version >= 12751 && $wp_current_db_version < 13974 ) {		$role =& get_role( 'administrator' );		if ( ! empty( $role ) )			$role->remove_cap( 'remove_user' );	}	// 3.0-beta1 nav menu postmeta changes. can be removed before release. r13974	if ( $wp_current_db_version >= 13802 && $wp_current_db_version < 13974 )		$wpdb->update( $wpdb->postmeta, array( 'meta_value' => '' ), array( 'meta_key' => '_menu_item_target', 'meta_value' => '_self' ) );	// 3.0 screen options key name changes.	if ( !is_multisite() || is_main_site() ) {		$prefix = like_escape($wpdb->base_prefix);		$wpdb->query( "DELETE FROM $wpdb->usermeta WHERE meta_key LIKE '{$prefix}%meta-box-hidden%' OR meta_key LIKE '{$prefix}%closedpostboxes%' OR meta_key LIKE '{$prefix}%manage-%-columns-hidden%' OR meta_key LIKE '{$prefix}%meta-box-order%' OR meta_key LIKE '{$prefix}%metaboxorder%' OR meta_key LIKE '{$prefix}%screen_layout%'					 OR meta_key = 'manageedittagscolumnshidden' OR meta_key='managecategoriescolumnshidden' OR meta_key = 'manageedit-tagscolumnshidden' OR meta_key = 'manageeditcolumnshidden' OR meta_key = 'categories_per_page' OR meta_key = 'edit_tags_per_page'" );	}}/** * Execute network level changes * * @since 3.0.0 */function upgrade_network() {	global $wp_current_db_version, $wpdb;	// 2.8	if ( $wp_current_db_version < 11549 ) {		$wpmu_sitewide_plugins = get_site_option( 'wpmu_sitewide_plugins' );		$active_sitewide_plugins = get_site_option( 'active_sitewide_plugins' );		if ( $wpmu_sitewide_plugins ) {			if ( !$active_sitewide_plugins )				$sitewide_plugins = (array) $wpmu_sitewide_plugins;			else				$sitewide_plugins = array_merge( (array) $active_sitewide_plugins, (array) $wpmu_sitewide_plugins );			update_site_option( 'active_sitewide_plugins', $sitewide_plugins );		}		delete_site_option( 'wpmu_sitewide_plugins' );		delete_site_option( 'deactivated_sitewide_plugins' );		$start = 0;		while( $rows = $wpdb->get_results( "SELECT meta_key, meta_value FROM {$wpdb->sitemeta} ORDER BY meta_id LIMIT $start, 20" ) ) {			foreach( $rows as $row ) {				$value = $row->meta_value;				if ( !@unserialize( $value ) )					$value = stripslashes( $value );				if ( $value !== $row->meta_value ) {					update_site_option( $row->meta_key, $value );				}			}			$start += 20;		}	}	// 3.0	if ( $wp_current_db_version < 13576 )		update_site_option( 'global_terms_enabled', '1' );}// The functions we use to actually do stuff// General/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table_name Database table name to create. * @param string $create_ddl SQL statement to create table. * @return bool If table already exists or was created by function. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	if ( $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name )		return true;	//didn't find it try to create it.	$q = $wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	if ( $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name )		return true;	return false;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table Database table name. * @param string $index Index name to drop. * @return bool True, when finished. */function drop_index($table, $index) {	global $wpdb;	$wpdb->hide_errors();	$wpdb->query("ALTER TABLE `$table` DROP INDEX `$index`");	// Now we need to take out all the extra ones we may have created	for ($i = 0; $i < 25; $i++) {		$wpdb->query("ALTER TABLE `$table` DROP INDEX `{$index}_$i`");	}	$wpdb->show_errors();	return true;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table Database table name. * @param string $index Database table index column. * @return bool True, when done with execution. */function add_clean_index($table, $index) {	global $wpdb;	drop_index($table, $index);	$wpdb->query("ALTER TABLE `$table` ADD INDEX ( `$index` )");	return true;}/** ** maybe_add_column() ** Add column to db table if it doesn't exist. ** Returns:  true if already exists or on successful completion **           false on error */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name", 0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$q = $wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name", 0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}/** * Retrieve all options as it was for 1.2. * * @since 1.2.0 * * @return array List of options. */function get_alloptions_110() {	global $wpdb;	if ($options = $wpdb->get_results("SELECT option_name, option_value FROM $wpdb->options")) {		foreach ($options as $option) {			// "When trying to design a foolproof system,			//  never underestimate the ingenuity of the fools :)" -- Dougal			if ('siteurl' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			if ('home' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			if ('category_base' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			$all_options->{$option->option_name} = stripslashes($option->option_value);		}	}	return $all_options;}/** * Version of get_option that is private to install/upgrade. * * @since unknown * @access private * * @param string $setting Option name. * @return mixed */function __get_option($setting) {	global $wpdb;	if ( $setting == 'home' && defined( 'WP_HOME' ) ) {		return preg_replace( '|/+$|', '', WP_HOME );	}	if ( $setting == 'siteurl' && defined( 'WP_SITEURL' ) ) {		return preg_replace( '|/+$|', '', WP_SITEURL );	}	$option = $wpdb->get_var( $wpdb->prepare("SELECT option_value FROM $wpdb->options WHERE option_name = %s", $setting) );	if ( 'home' == $setting && '' == $option )		return __get_option('siteurl');	if ( 'siteurl' == $setting || 'home' == $setting || 'category_base' == $setting )		$option = preg_replace('|/+$|', '', $option);	@ $kellogs = unserialize($option);	if ($kellogs !== FALSE)		return $kellogs;	else		return $option;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $content * @return string */function deslash($content) {	// Note: \\\ inside a regex denotes a single backslash.	// Replace one or more backslashes followed by a single quote with	// a single quote.	$content = preg_replace("/\\\+'/", "'", $content);	// Replace one or more backslashes followed by a double quote with	// a double quote.	$content = preg_replace('/\\\+"/', '"', $content);	// Replace one or more backslashes with one backslash.	$content = preg_replace("/\\\+/", "\\", $content);	return $content;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $queries * @param unknown_type $execute * @return unknown */function dbDelta($queries, $execute = true) {	global $wpdb;	// Separate individual queries into an array	if ( !is_array($queries) ) {		$queries = explode( ';', $queries );		if ('' == $queries[count($queries) - 1]) array_pop($queries);	}	$cqueries = array(); // Creation Queries	$iqueries = array(); // Insertion Queries	$for_update = array();	// Create a tablename index for an array ($cqueries) of queries	foreach($queries as $qry) {		if (preg_match("|CREATE TABLE ([^ ]*)|", $qry, $matches)) {			$cqueries[trim( strtolower($matches[1]), '`' )] = $qry;			$for_update[$matches[1]] = 'Created table '.$matches[1];		} else if (preg_match("|CREATE DATABASE ([^ ]*)|", $qry, $matches)) {			array_unshift($cqueries, $qry);		} else if (preg_match("|INSERT INTO ([^ ]*)|", $qry, $matches)) {			$iqueries[] = $qry;		} else if (preg_match("|UPDATE ([^ ]*)|", $qry, $matches)) {			$iqueries[] = $qry;		} else {			// Unrecognized query type		}	}	// Check to see which tables and fields exist	if ($tables = $wpdb->get_col('SHOW TABLES;')) {		// For every table in the database		foreach ($tables as $table) {			// If a table query exists for the database table...			if ( array_key_exists(strtolower($table), $cqueries) ) {				// Clear the field and index arrays				$cfields = $indices = array();				// Get all of the field names in the query from between the parens				preg_match("|\((.*)\)|ms", $cqueries[strtolower($table)], $match2);				$qryline = trim($match2[1]);				// Separate field lines into an array				$flds = explode("\n", $qryline);				//echo "<hr/><pre>\n".print_r(strtolower($table), true).":\n".print_r($cqueries, true)."</pre><hr/>";				// For every field line specified in the query				foreach ($flds as $fld) {					// Extract the field name					preg_match("|^([^ ]*)|", trim($fld), $fvals);					$fieldname = trim( $fvals[1], '`' );					// Verify the found field name					$validfield = true;					switch (strtolower($fieldname)) {					case '':					case 'primary':					case 'index':					case 'fulltext':					case 'unique':					case 'key':						$validfield = false;						$indices[] = trim(trim($fld), ", \n");						break;					}					$fld = trim($fld);					// If it's a valid field, add it to the field array					if ($validfield) {						$cfields[strtolower($fieldname)] = trim($fld, ", \n");					}				}				// Fetch the table column structure from the database				$tablefields = $wpdb->get_results("DESCRIBE {$table};");				// For every field in the table				foreach ($tablefields as $tablefield) {					// If the table field exists in the field array...					if (array_key_exists(strtolower($tablefield->Field), $cfields)) {						// Get the field type from the query						preg_match("|".$tablefield->Field." ([^ ]*( unsigned)?)|i", $cfields[strtolower($tablefield->Field)], $matches);						$fieldtype = $matches[1];						// Is actual field type different from the field type in query?						if ($tablefield->Type != $fieldtype) {							// Add a query to change the column type							$cqueries[] = "ALTER TABLE {$table} CHANGE COLUMN {$tablefield->Field} " . $cfields[strtolower($tablefield->Field)];							$for_update[$table.'.'.$tablefield->Field] = "Changed type of {$table}.{$tablefield->Field} from {$tablefield->Type} to {$fieldtype}";						}						// Get the default value from the array							//echo "{$cfields[strtolower($tablefield->Field)]}<br>";						if (preg_match("| DEFAULT '(.*)'|i", $cfields[strtolower($tablefield->Field)], $matches)) {							$default_value = $matches[1];							if ($tablefield->Default != $default_value) {								// Add a query to change the column's default value								$cqueries[] = "ALTER TABLE {$table} ALTER COLUMN {$tablefield->Field} SET DEFAULT '{$default_value}'";								$for_update[$table.'.'.$tablefield->Field] = "Changed default value of {$table}.{$tablefield->Field} from {$tablefield->Default} to {$default_value}";							}						}						// Remove the field from the array (so it's not added)						unset($cfields[strtolower($tablefield->Field)]);					} else {						// This field exists in the table, but not in the creation queries?					}				}				// For every remaining field specified for the table				foreach ($cfields as $fieldname => $fielddef) {					// Push a query line into $cqueries that adds the field to that table					$cqueries[] = "ALTER TABLE {$table} ADD COLUMN $fielddef";					$for_update[$table.'.'.$fieldname] = 'Added column '.$table.'.'.$fieldname;				}				// Index stuff goes here				// Fetch the table index structure from the database				$tableindices = $wpdb->get_results("SHOW INDEX FROM {$table};");				if ($tableindices) {					// Clear the index array					unset($index_ary);					// For every index in the table					foreach ($tableindices as $tableindex) {						// Add the index to the index data array						$keyname = $tableindex->Key_name;						$index_ary[$keyname]['columns'][] = array('fieldname' => $tableindex->Column_name, 'subpart' => $tableindex->Sub_part);						$index_ary[$keyname]['unique'] = ($tableindex->Non_unique == 0)?true:false;					}					// For each actual index in the index array					foreach ($index_ary as $index_name => $index_data) {						// Build a create string to compare to the query						$index_string = '';						if ($index_name == 'PRIMARY') {							$index_string .= 'PRIMARY ';						} else if($index_data['unique']) {							$index_string .= 'UNIQUE ';						}						$index_string .= 'KEY ';						if ($index_name != 'PRIMARY') {							$index_string .= $index_name;						}						$index_columns = '';						// For each column in the index						foreach ($index_data['columns'] as $column_data) {							if ($index_columns != '') $index_columns .= ',';							// Add the field to the column list string							$index_columns .= $column_data['fieldname'];							if ($column_data['subpart'] != '') {								$index_columns .= '('.$column_data['subpart'].')';							}						}						// Add the column list to the index create string						$index_string .= ' ('.$index_columns.')';						if (!(($aindex = array_search($index_string, $indices)) === false)) {							unset($indices[$aindex]);							//echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">{$table}:<br />Found index:".$index_string."</pre>\n";						}						//else echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">{$table}:<br /><b>Did not find index:</b>".$index_string."<br />".print_r($indices, true)."</pre>\n";					}				}				// For every remaining index specified for the table				foreach ( (array) $indices as $index ) {					// Push a query line into $cqueries that adds the index to that table					$cqueries[] = "ALTER TABLE {$table} ADD $index";					$for_update[$table.'.'.$fieldname] = 'Added index '.$table.' '.$index;				}				// Remove the original table creation query from processing				unset($cqueries[strtolower($table)]);				unset($for_update[strtolower($table)]);			} else {				// This table exists in the database, but not in the creation queries?			}		}	}	$allqueries = array_merge($cqueries, $iqueries);	if ($execute) {		foreach ($allqueries as $query) {			//echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">".print_r($query, true)."</pre>\n";			$wpdb->query($query);		}	}	return $for_update;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function make_db_current() {	global $wp_queries;	$alterations = dbDelta($wp_queries);	echo "<ol>\n";	foreach($alterations as $alteration) echo "<li>$alteration</li>\n";	echo "</ol>\n";}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function make_db_current_silent() {	global $wp_queries;	$alterations = dbDelta($wp_queries);}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $theme_name * @param unknown_type $template * @return unknown */function make_site_theme_from_oldschool($theme_name, $template) {	$home_path = get_home_path();	$site_dir = WP_CONTENT_DIR . "/themes/$template";	if (! file_exists("$home_path/index.php"))		return false;	// Copy files from the old locations to the site theme.	// TODO: This does not copy arbitarary include dependencies.  Only the	// standard WP files are copied.	$files = array('index.php' => 'index.php', 'wp-layout.css' => 'style.css', 'wp-comments.php' => 'comments.php', 'wp-comments-popup.php' => 'comments-popup.php');	foreach ($files as $oldfile => $newfile) {		if ($oldfile == 'index.php')			$oldpath = $home_path;		else			$oldpath = ABSPATH;		if ($oldfile == 'index.php') { // Check to make sure it's not a new index			$index = implode('', file("$oldpath/$oldfile"));			if (strpos($index, 'WP_USE_THEMES') !== false) {				if (! @copy(WP_CONTENT_DIR . '/themes/' . WP_DEFAULT_THEME . '/index.php', "$site_dir/$newfile"))					return false;				continue; // Don't copy anything				}		}		if (! @copy("$oldpath/$oldfile", "$site_dir/$newfile"))			return false;		chmod("$site_dir/$newfile", 0777);		// Update the blog header include in each file.		$lines = explode("\n", implode('', file("$site_dir/$newfile")));		if ($lines) {			$f = fopen("$site_dir/$newfile", 'w');			foreach ($lines as $line) {				if (preg_match('/require.*wp-blog-header/', $line))					$line = '//' . $line;				// Update stylesheet references.				$line = str_replace("<?php echo __get_option('siteurl'); ?>/wp-layout.css", "<?php bloginfo('stylesheet_url'); ?>", $line);				// Update comments template inclusion.				$line = str_replace("<?php include(ABSPATH . 'wp-comments.php'); ?>", "<?php comments_template(); ?>", $line);				fwrite($f, "{$line}\n");			}			fclose($f);		}	}	// Add a theme header.	$header = "/*\nTheme Name: $theme_name\nTheme URI: " . __get_option('siteurl') . "\nDescription: A theme automatically created by the upgrade.\nVersion: 1.0\nAuthor: Moi\n*/\n";	$stylelines = file_get_contents("$site_dir/style.css");	if ($stylelines) {		$f = fopen("$site_dir/style.css", 'w');		fwrite($f, $header);		fwrite($f, $stylelines);		fclose($f);	}	return true;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $theme_name * @param unknown_type $template * @return unknown */function make_site_theme_from_default($theme_name, $template) {	$site_dir = WP_CONTENT_DIR . "/themes/$template";	$default_dir = WP_CONTENT_DIR . '/themes/' . WP_DEFAULT_THEME;	// Copy files from the default theme to the site theme.	//$files = array('index.php', 'comments.php', 'comments-popup.php', 'footer.php', 'header.php', 'sidebar.php', 'style.css');	$theme_dir = @ opendir($default_dir);	if ($theme_dir) {		while(($theme_file = readdir( $theme_dir )) !== false) {			if (is_dir("$default_dir/$theme_file"))				continue;			if (! @copy("$default_dir/$theme_file", "$site_dir/$theme_file"))				return;			chmod("$site_dir/$theme_file", 0777);		}	}	@closedir($theme_dir);	// Rewrite the theme header.	$stylelines = explode("\n", implode('', file("$site_dir/style.css")));	if ($stylelines) {		$f = fopen("$site_dir/style.css", 'w');		foreach ($stylelines as $line) {			if (strpos($line, 'Theme Name:') !== false) $line = 'Theme Name: ' . $theme_name;			elseif (strpos($line, 'Theme URI:') !== false) $line = 'Theme URI: ' . __get_option('url');			elseif (strpos($line, 'Description:') !== false) $line = 'Description: Your theme.';			elseif (strpos($line, 'Version:') !== false) $line = 'Version: 1';			elseif (strpos($line, 'Author:') !== false) $line = 'Author: You';			fwrite($f, $line . "\n");		}		fclose($f);	}	// Copy the images.	umask(0);	if (! mkdir("$site_dir/images", 0777)) {		return false;	}	$images_dir = @ opendir("$default_dir/images");	if ($images_dir) {		while(($image = readdir($images_dir)) !== false) {			if (is_dir("$default_dir/images/$image"))				continue;			if (! @copy("$default_dir/images/$image", "$site_dir/images/$image"))				return;			chmod("$site_dir/images/$image", 0777);		}	}	@closedir($images_dir);}// Create a site theme from the default theme./** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return unknown */function make_site_theme() {	// Name the theme after the blog.	$theme_name = __get_option('blogname');	$template = sanitize_title($theme_name);	$site_dir = WP_CONTENT_DIR . "/themes/$template";	// If the theme already exists, nothing to do.	if ( is_dir($site_dir)) {		return false;	}	// We must be able to write to the themes dir.	if (! is_writable(WP_CONTENT_DIR . "/themes")) {		return false;	}	umask(0);	if (! mkdir($site_dir, 0777)) {		return false;	}	if (file_exists(ABSPATH . 'wp-layout.css')) {		if (! make_site_theme_from_oldschool($theme_name, $template)) {			// TODO:  rm -rf the site theme directory.			return false;		}	} else {		if (! make_site_theme_from_default($theme_name, $template))			// TODO:  rm -rf the site theme directory.			return false;	}	// Make the new site theme active.	$current_template = __get_option('template');	if ($current_template == WP_DEFAULT_THEME) {		update_option('template', $template);		update_option('stylesheet', $template);	}	return $template;}/** * Translate user level to user role name. * * @since unknown * * @param int $level User level. * @return string User role name. */function translate_level_to_role($level) {	switch ($level) {	case 10:	case 9:	case 8:		return 'administrator';	case 7:	case 6:	case 5:		return 'editor';	case 4:	case 3:	case 2:		return 'author';	case 1:		return 'contributor';	case 0:		return 'subscriber';	}}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function wp_check_mysql_version() {	global $wpdb;	$result = $wpdb->check_database_version();	if ( is_wp_error( $result ) )		die( $result->get_error_message() );}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function maybe_disable_automattic_widgets() {	$plugins = __get_option( 'active_plugins' );	foreach ( (array) $plugins as $plugin ) {		if ( basename( $plugin ) == 'widgets.php' ) {			array_splice( $plugins, array_search( $plugin, $plugins ), 1 );			update_option( 'active_plugins', $plugins );			break;		}	}}/** * Runs before the schema is upgraded. */function pre_schema_upgrade() {	global $wp_current_db_version, $wp_db_version, $wpdb;	// Upgrade versions prior to 2.9	if ( $wp_current_db_version < 11557 ) {		// Delete duplicate options.  Keep the option with the highest option_id.		$wpdb->query("DELETE o1 FROM $wpdb->options AS o1 JOIN $wpdb->options AS o2 USING (`option_name`) WHERE o2.option_id > o1.option_id");		// Drop the old primary key and add the new.		$wpdb->query("ALTER TABLE $wpdb->options DROP PRIMARY KEY, ADD PRIMARY KEY(option_id)");		// Drop the old option_name index. dbDelta() doesn't do the drop.		$wpdb->query("ALTER TABLE $wpdb->options DROP INDEX option_name");	}}/** * Install Network. * * @since 3.0.0 * */if ( !function_exists( 'install_network' ) ) :function install_network() {	global $wpdb, $charset_collate;	$ms_queries = "CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  spam tinyint(2) NOT NULL default '0',  deleted tinyint(2) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->blogs (  blog_id bigint(20) NOT NULL auto_increment,  site_id bigint(20) NOT NULL default '0',  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  registered datetime NOT NULL default '0000-00-00 00:00:00',  last_updated datetime NOT NULL default '0000-00-00 00:00:00',  public tinyint(2) NOT NULL default '1',  archived enum('0','1') NOT NULL default '0',  mature tinyint(2) NOT NULL default '0',  spam tinyint(2) NOT NULL default '0',  deleted tinyint(2) NOT NULL default '0',  lang_id int(11) NOT NULL default '0',  PRIMARY KEY  (blog_id),  KEY domain (domain(50),path(5)),  KEY lang_id (lang_id)) $charset_collate;CREATE TABLE $wpdb->blog_versions (  blog_id bigint(20) NOT NULL default '0',  db_version varchar(20) NOT NULL default '',  last_updated datetime NOT NULL default '0000-00-00 00:00:00',  PRIMARY KEY  (blog_id),  KEY db_version (db_version)) $charset_collate;CREATE TABLE $wpdb->registration_log (  ID bigint(20) NOT NULL auto_increment,  email varchar(255) NOT NULL default '',  IP varchar(30) NOT NULL default '',  blog_id bigint(20) NOT NULL default '0',  date_registered datetime NOT NULL default '0000-00-00 00:00:00',  PRIMARY KEY  (ID),  KEY IP (IP)) $charset_collate;CREATE TABLE $wpdb->site (  id bigint(20) NOT NULL auto_increment,  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  PRIMARY KEY  (id),  KEY domain (domain,path)) $charset_collate;CREATE TABLE $wpdb->sitemeta (  meta_id bigint(20) NOT NULL auto_increment,  site_id bigint(20) NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY meta_key (meta_key),  KEY site_id (site_id)) $charset_collate;CREATE TABLE $wpdb->signups (  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  title longtext NOT NULL,  user_login varchar(60) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  registered datetime NOT NULL default '0000-00-00 00:00:00',  activated datetime NOT NULL default '0000-00-00 00:00:00',  active tinyint(1) NOT NULL default '0',  activation_key varchar(50) NOT NULL default '',  meta longtext,  KEY activation_key (activation_key),  KEY domain (domain)) $charset_collate;";// now create tables	dbDelta( $ms_queries );}endif;/** * Install global terms. * * @since 3.0.0 * */if ( !function_exists( 'install_global_terms' ) ) :function install_global_terms() {	global $wpdb, $charset_collate;	$ms_queries = "CREATE TABLE $wpdb->sitecategories (  cat_ID bigint(20) NOT NULL auto_increment,  cat_name varchar(55) NOT NULL default '',  category_nicename varchar(200) NOT NULL default '',  last_updated timestamp NOT NULL,  PRIMARY KEY  (cat_ID),  KEY category_nicename (category_nicename),  KEY last_updated (last_updated)) $charset_collate;";// now create tables	dbDelta( $ms_queries );}endif;?>
<?php/** * WordPress Administration Scheme API * * Here we keep the DB structure and option values. * * @package WordPress * @subpackage Administration *//** * The database character collate. * @var string * @global string * @name $charset_collate */$charset_collate = '';// Declare these as global in case schema.php is included from a function.global $wpdb, $wp_queries;if ( ! empty($wpdb->charset) )	$charset_collate = "DEFAULT CHARACTER SET $wpdb->charset";if ( ! empty($wpdb->collate) )	$charset_collate .= " COLLATE $wpdb->collate";/** Create WordPress database tables SQL */$wp_queries = "CREATE TABLE $wpdb->terms ( term_id bigint(20) unsigned NOT NULL auto_increment, name varchar(200) NOT NULL default '', slug varchar(200) NOT NULL default '', term_group bigint(10) NOT NULL default 0, PRIMARY KEY  (term_id), UNIQUE KEY slug (slug), KEY name (name)) $charset_collate;CREATE TABLE $wpdb->term_taxonomy ( term_taxonomy_id bigint(20) unsigned NOT NULL auto_increment, term_id bigint(20) unsigned NOT NULL default 0, taxonomy varchar(32) NOT NULL default '', description longtext NOT NULL, parent bigint(20) unsigned NOT NULL default 0, count bigint(20) NOT NULL default 0, PRIMARY KEY  (term_taxonomy_id), UNIQUE KEY term_id_taxonomy (term_id,taxonomy), KEY taxonomy (taxonomy)) $charset_collate;CREATE TABLE $wpdb->term_relationships ( object_id bigint(20) unsigned NOT NULL default 0, term_taxonomy_id bigint(20) unsigned NOT NULL default 0, term_order int(11) NOT NULL default 0, PRIMARY KEY  (object_id,term_taxonomy_id), KEY term_taxonomy_id (term_taxonomy_id)) $charset_collate;CREATE TABLE $wpdb->commentmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  comment_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY comment_id (comment_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->comments (  comment_ID bigint(20) unsigned NOT NULL auto_increment,  comment_post_ID bigint(20) unsigned NOT NULL default '0',  comment_author tinytext NOT NULL,  comment_author_email varchar(100) NOT NULL default '',  comment_author_url varchar(200) NOT NULL default '',  comment_author_IP varchar(100) NOT NULL default '',  comment_date datetime NOT NULL default '0000-00-00 00:00:00',  comment_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  comment_content text NOT NULL,  comment_karma int(11) NOT NULL default '0',  comment_approved varchar(20) NOT NULL default '1',  comment_agent varchar(255) NOT NULL default '',  comment_type varchar(20) NOT NULL default '',  comment_parent bigint(20) unsigned NOT NULL default '0',  user_id bigint(20) unsigned NOT NULL default '0',  PRIMARY KEY  (comment_ID),  KEY comment_approved (comment_approved),  KEY comment_post_ID (comment_post_ID),  KEY comment_approved_date_gmt (comment_approved,comment_date_gmt),  KEY comment_date_gmt (comment_date_gmt),  KEY comment_parent (comment_parent)) $charset_collate;CREATE TABLE $wpdb->links (  link_id bigint(20) unsigned NOT NULL auto_increment,  link_url varchar(255) NOT NULL default '',  link_name varchar(255) NOT NULL default '',  link_image varchar(255) NOT NULL default '',  link_target varchar(25) NOT NULL default '',  link_description varchar(255) NOT NULL default '',  link_visible varchar(20) NOT NULL default 'Y',  link_owner bigint(20) unsigned NOT NULL default '1',  link_rating int(11) NOT NULL default '0',  link_updated datetime NOT NULL default '0000-00-00 00:00:00',  link_rel varchar(255) NOT NULL default '',  link_notes mediumtext NOT NULL,  link_rss varchar(255) NOT NULL default '',  PRIMARY KEY  (link_id),  KEY link_visible (link_visible)) $charset_collate;CREATE TABLE $wpdb->options (  option_id bigint(20) unsigned NOT NULL auto_increment,  blog_id int(11) NOT NULL default '0',  option_name varchar(64) NOT NULL default '',  option_value longtext NOT NULL,  autoload varchar(20) NOT NULL default 'yes',  PRIMARY KEY  (option_id),  UNIQUE KEY option_name (option_name)) $charset_collate;CREATE TABLE $wpdb->postmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  post_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY post_id (post_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->posts (  ID bigint(20) unsigned NOT NULL auto_increment,  post_author bigint(20) unsigned NOT NULL default '0',  post_date datetime NOT NULL default '0000-00-00 00:00:00',  post_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content longtext NOT NULL,  post_title text NOT NULL,  post_excerpt text NOT NULL,  post_status varchar(20) NOT NULL default 'publish',  comment_status varchar(20) NOT NULL default 'open',  ping_status varchar(20) NOT NULL default 'open',  post_password varchar(20) NOT NULL default '',  post_name varchar(200) NOT NULL default '',  to_ping text NOT NULL,  pinged text NOT NULL,  post_modified datetime NOT NULL default '0000-00-00 00:00:00',  post_modified_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content_filtered text NOT NULL,  post_parent bigint(20) unsigned NOT NULL default '0',  guid varchar(255) NOT NULL default '',  menu_order int(11) NOT NULL default '0',  post_type varchar(20) NOT NULL default 'post',  post_mime_type varchar(100) NOT NULL default '',  comment_count bigint(20) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY post_name (post_name),  KEY type_status_date (post_type,post_status,post_date,ID),  KEY post_parent (post_parent),  KEY post_author (post_author)) $charset_collate;CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->usermeta (  umeta_id bigint(20) unsigned NOT NULL auto_increment,  user_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (umeta_id),  KEY user_id (user_id),  KEY meta_key (meta_key)) $charset_collate;";/** * Create WordPress options and set the default values. * * @since 1.5.0 * @uses $wpdb * @uses $wp_db_version */function populate_options() {	global $wpdb, $wp_db_version, $current_site;	$guessurl = wp_guess_url();	do_action('populate_options');	if ( ini_get('safe_mode') ) {		// Safe mode can break mkdir() so use a flat structure by default.		$uploads_use_yearmonth_folders = 0;	} else {		$uploads_use_yearmonth_folders = 1;	}	$options = array(	'siteurl' => $guessurl,	'blogname' => __('My Site'),	/* translators: blog tagline */	'blogdescription' => __('Just another WordPress site'),	'users_can_register' => 0,	'admin_email' => 'you@example.com',	'start_of_week' => 1,	'use_balanceTags' => 0,	'use_smilies' => 1,	'require_name_email' => 1,	'comments_notify' => 1,	'posts_per_rss' => 10,	'rss_use_excerpt' => 0,	'mailserver_url' => 'mail.example.com',	'mailserver_login' => 'login@example.com',	'mailserver_pass' => 'password',	'mailserver_port' => 110,	'default_category' => 1,	'default_comment_status' => 'open',	'default_ping_status' => 'open',	'default_pingback_flag' => 1,	'default_post_edit_rows' => 10,	'posts_per_page' => 10,	/* translators: default date format, see http://php.net/date */	'date_format' => __('F j, Y'),	/* translators: default time format, see http://php.net/date */	'time_format' => __('g:i a'),	/* translators: links last updated date format, see http://php.net/date */	'links_updated_date_format' => __('F j, Y g:i a'),	'links_recently_updated_prepend' => '<em>',	'links_recently_updated_append' => '</em>',	'links_recently_updated_time' => 120,	'comment_moderation' => 0,	'moderation_notify' => 1,	'permalink_structure' => '',	'gzipcompression' => 0,	'hack_file' => 0,	'blog_charset' => 'UTF-8',	'moderation_keys' => '',	'active_plugins' => array(),	'home' => $guessurl,	'category_base' => '',	'ping_sites' => 'http://rpc.pingomatic.com/',	'advanced_edit' => 0,	'comment_max_links' => 2,	'gmt_offset' => date('Z') / 3600,	// 1.5	'default_email_category' => 1,	'recently_edited' => '',	'template' => WP_DEFAULT_THEME,	'stylesheet' => WP_DEFAULT_THEME,	'comment_whitelist' => 1,	'blacklist_keys' => '',	'comment_registration' => 0,	'rss_language' => 'en',	'html_type' => 'text/html',	// 1.5.1	'use_trackback' => 0,	// 2.0	'default_role' => 'subscriber',	'db_version' => $wp_db_version,	// 2.0.1	'uploads_use_yearmonth_folders' => $uploads_use_yearmonth_folders,	'upload_path' => '',	// 2.1	'blog_public' => '1',	'default_link_category' => 2,	'show_on_front' => 'posts',	// 2.2	'tag_base' => '',	// 2.5	'show_avatars' => '1',	'avatar_rating' => 'G',	'upload_url_path' => '',	'thumbnail_size_w' => 150,	'thumbnail_size_h' => 150,	'thumbnail_crop' => 1,	'medium_size_w' => 300,	'medium_size_h' => 300,	// 2.6	'avatar_default' => 'mystery',	'enable_app' => 0,	'enable_xmlrpc' => 0,	// 2.7	'large_size_w' => 1024,	'large_size_h' => 1024,	'image_default_link_type' => 'file',	'image_default_size' => '',	'image_default_align' => '',	'close_comments_for_old_posts' => 0,	'close_comments_days_old' => 14,	'thread_comments' => 1,	'thread_comments_depth' => 5,	'page_comments' => 0,	'comments_per_page' => 50,	'default_comments_page' => 'newest',	'comment_order' => 'asc',	'sticky_posts' => array(),	'widget_categories' => array(),	'widget_text' => array(),	'widget_rss' => array(),	// 2.8	'timezone_string' => '',	// 2.9	'embed_autourls' => 1,	'embed_size_w' => '',	'embed_size_h' => 600,	// 3.0	'page_for_posts' => 0,	'page_on_front' => 0,	);	// 3.0 multisite	if ( is_multisite() ) {		/* translators: blog tagline */		$options[ 'blogdescription' ] = sprintf(__('Just another %s site'), $current_site->site_name );		$options[ 'permalink_structure' ] = '/%year%/%monthnum%/%day%/%postname%/';	}	// Set autoload to no for these options	$fat_options = array( 'moderation_keys', 'recently_edited', 'blacklist_keys' );	$existing_options = $wpdb->get_col("SELECT option_name FROM $wpdb->options");	$insert = '';	foreach ( $options as $option => $value ) {		if ( in_array($option, $existing_options) )			continue;		if ( in_array($option, $fat_options) )			$autoload = 'no';		else			$autoload = 'yes';		$option = $wpdb->escape($option);		if ( is_array($value) )			$value = serialize($value);		$value = $wpdb->escape($value);		if ( !empty($insert) )			$insert .= ', ';		$insert .= "('$option', '$value', '$autoload')";	}	if ( !empty($insert) )		$wpdb->query("INSERT INTO $wpdb->options (option_name, option_value, autoload) VALUES " . $insert);	// in case it is set, but blank, update "home"	if ( !__get_option('home') ) update_option('home', $guessurl);	// Delete unused options	$unusedoptions = array ('blodotgsping_url', 'bodyterminator', 'emailtestonly', 'phoneemail_separator', 'smilies_directory', 'subjectprefix', 'use_bbcode', 'use_blodotgsping', 'use_phoneemail', 'use_quicktags', 'use_weblogsping', 'weblogs_cache_file', 'use_preview', 'use_htmltrans', 'smilies_directory', 'fileupload_allowedusers', 'use_phoneemail', 'default_post_status', 'default_post_category', 'archive_mode', 'time_difference', 'links_minadminlevel', 'links_use_adminlevels', 'links_rating_type', 'links_rating_char', 'links_rating_ignore_zero', 'links_rating_single_image', 'links_rating_image0', 'links_rating_image1', 'links_rating_image2', 'links_rating_image3', 'links_rating_image4', 'links_rating_image5', 'links_rating_image6', 'links_rating_image7', 'links_rating_image8', 'links_rating_image9', 'weblogs_cacheminutes', 'comment_allowed_tags', 'search_engine_friendly_urls', 'default_geourl_lat', 'default_geourl_lon', 'use_default_geourl', 'weblogs_xml_url', 'new_users_can_blog', '_wpnonce', '_wp_http_referer', 'Update', 'action', 'rich_editing', 'autosave_interval', 'deactivated_plugins', 'can_compress_scripts',		'page_uris', 'update_core', 'update_plugins', 'update_themes', 'doing_cron', 'random_seed', 'rss_excerpt_length', 'secret', 'use_linksupdate', 'default_comment_status_page' );	foreach ($unusedoptions as $option)		delete_option($option);	// delete obsolete magpie stuff	$wpdb->query("DELETE FROM $wpdb->options WHERE option_name REGEXP '^rss_[0-9a-f]{32}(_ts)?$'");}/** * Execute WordPress role creation for the various WordPress versions. * * @since 2.0.0 */function populate_roles() {	populate_roles_160();	populate_roles_210();	populate_roles_230();	populate_roles_250();	populate_roles_260();	populate_roles_270();	populate_roles_280();	populate_roles_300();}/** * Create the roles for WordPress 2.0 * * @since 2.0.0 */function populate_roles_160() {	// Add roles	// Dummy gettext calls to get strings in the catalog.	/* translators: user role */	_x('Administrator', 'User role');	/* translators: user role */	_x('Editor', 'User role');	/* translators: user role */	_x('Author', 'User role');	/* translators: user role */	_x('Contributor', 'User role');	/* translators: user role */	_x('Subscriber', 'User role');	add_role('administrator', 'Administrator');	add_role('editor', 'Editor');	add_role('author', 'Author');	add_role('contributor', 'Contributor');	add_role('subscriber', 'Subscriber');	// Add caps for Administrator role	$role =& get_role('administrator');	$role->add_cap('switch_themes');	$role->add_cap('edit_themes');	$role->add_cap('activate_plugins');	$role->add_cap('edit_plugins');	$role->add_cap('edit_users');	$role->add_cap('edit_files');	$role->add_cap('manage_options');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('import');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_10');	$role->add_cap('level_9');	$role->add_cap('level_8');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Editor role	$role =& get_role('editor');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Author role	$role =& get_role('author');	$role->add_cap('upload_files');	$role->add_cap('edit_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('read');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Contributor role	$role =& get_role('contributor');	$role->add_cap('edit_posts');	$role->add_cap('read');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Subscriber role	$role =& get_role('subscriber');	$role->add_cap('read');	$role->add_cap('level_0');}/** * Create and modify WordPress roles for WordPress 2.1. * * @since 2.1.0 */function populate_roles_210() {	$roles = array('administrator', 'editor');	foreach ($roles as $role) {		$role =& get_role($role);		if ( empty($role) )			continue;		$role->add_cap('edit_others_pages');		$role->add_cap('edit_published_pages');		$role->add_cap('publish_pages');		$role->add_cap('delete_pages');		$role->add_cap('delete_others_pages');		$role->add_cap('delete_published_pages');		$role->add_cap('delete_posts');		$role->add_cap('delete_others_posts');		$role->add_cap('delete_published_posts');		$role->add_cap('delete_private_posts');		$role->add_cap('edit_private_posts');		$role->add_cap('read_private_posts');		$role->add_cap('delete_private_pages');		$role->add_cap('edit_private_pages');		$role->add_cap('read_private_pages');	}	$role =& get_role('administrator');	if ( ! empty($role) ) {		$role->add_cap('delete_users');		$role->add_cap('create_users');	}	$role =& get_role('author');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');		$role->add_cap('delete_published_posts');	}	$role =& get_role('contributor');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');	}}/** * Create and modify WordPress roles for WordPress 2.3. * * @since 2.3.0 */function populate_roles_230() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'unfiltered_upload' );	}}/** * Create and modify WordPress roles for WordPress 2.5. * * @since 2.5.0 */function populate_roles_250() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'edit_dashboard' );	}}/** * Create and modify WordPress roles for WordPress 2.6. * * @since 2.6.0 */function populate_roles_260() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_plugins' );		$role->add_cap( 'delete_plugins' );	}}/** * Create and modify WordPress roles for WordPress 2.7. * * @since 2.7.0 */function populate_roles_270() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_plugins' );		$role->add_cap( 'update_themes' );	}}/** * Create and modify WordPress roles for WordPress 2.8. * * @since 2.8.0 */function populate_roles_280() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_themes' );	}}/** * Create and modify WordPress roles for WordPress 3.0. * * @since 3.0.0 */function populate_roles_300() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_core' );		$role->add_cap( 'list_users' );		$role->add_cap( 'remove_users' );		$role->add_cap( 'add_users' );		$role->add_cap( 'promote_users' );		$role->add_cap( 'edit_theme_options' );		$role->add_cap( 'delete_themes' );		$role->add_cap( 'export' );	}}/** * populate network settings * * @since 3.0.0 * * @param int $network_id id of network to populate * @return bool|WP_Error True on success, or WP_Error on warning (with the install otherwise successful, * 	so the error code must be checked) or failure. */function populate_network( $network_id = 1, $domain = '', $email = '', $site_name = '', $path = '/', $subdomain_install = false ) {	global $wpdb, $current_site, $wp_db_version, $wp_rewrite;	$errors = new WP_Error();	if ( '' == $domain )		$errors->add( 'empty_domain', __( 'You must provide a domain name.' ) );	if ( '' == $site_name )		$errors->add( 'empty_sitename', __( 'You must provide a name for your network of sites.' ) );	// check for network collision	if ( $network_id == $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE id = %d", $network_id ) ) )		$errors->add( 'siteid_exists', __( 'The network already exists.' ) );	$site_user = get_user_by_email( $email );	if ( ! is_email( $email ) )		$errors->add( 'invalid_email', __( 'You must provide a valid e-mail address.' ) );	if ( $errors->get_error_code() )		return $errors;	// set up site tables	$template = get_option( 'template' );	$stylesheet = get_option( 'stylesheet' );	$allowed_themes = array( $stylesheet => true );	if ( $template != $stylesheet )		$allowed_themes[ $template ] = true;	if ( WP_DEFAULT_THEME != $stylesheet && WP_DEFAULT_THEME != $template )		$allowed_themes[ WP_DEFAULT_THEME ] = true;	if ( 1 == $network_id ) {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path ) );		$network_id = $wpdb->insert_id;	} else {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path, 'id' => $network_id ) );	}	if ( !is_multisite() ) {		$site_admins = array( $site_user->user_login );		$users = get_users_of_blog();		if ( $users ) {			foreach ( $users as $user ) {				if ( is_super_admin( $user->ID ) && !in_array( $user->user_login, $site_admins ) )					$site_admins[] = $user->user_login;			}		}	} else {		$site_admins = get_site_option( 'site_admins' );	}	$welcome_email = __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' );	$sitemeta = array(		'site_name' => $site_name,		'admin_email' => $site_user->user_email,		'admin_user_id' => $site_user->ID,		'registration' => 'none',		'upload_filetypes' => 'jpg jpeg png gif mp3 mov avi wmv midi mid pdf',		'blog_upload_space' => 10,		'fileupload_maxk' => 1500,		'site_admins' => $site_admins,		'allowedthemes' => $allowed_themes,		'illegal_names' => array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator', 'files' ),		'wpmu_upgrade_site' => $wp_db_version,		'welcome_email' => $welcome_email,		'first_post' => __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ),		// @todo - network admins should have a method of editing the network siteurl (used for cookie hash)		'siteurl' => get_option( 'siteurl' ) . '/',		'add_new_users' => '0',		'upload_space_check_disabled' => '0',		'subdomain_install' => intval( $subdomain_install ),		'global_terms_enabled' => global_terms_enabled() ? '1' : '0'	);	if ( !intval( $subdomain_install ) )		$sitemeta['illegal_names'][] = 'blog';	$insert = '';	foreach ( $sitemeta as $meta_key => $meta_value ) {		$meta_key = $wpdb->escape( $meta_key );		if ( is_array( $meta_value ) )			$meta_value = serialize( $meta_value );		$meta_value = $wpdb->escape( $meta_value );		if ( !empty( $insert ) )			$insert .= ', ';		$insert .= "( $network_id, '$meta_key', '$meta_value')";	}	$wpdb->query( "INSERT INTO $wpdb->sitemeta ( site_id, meta_key, meta_value ) VALUES " . $insert );	$current_site->domain = $domain;	$current_site->path = $path;	$current_site->site_name = ucfirst( $domain );	if ( !is_multisite() ) {		$wpdb->insert( $wpdb->blogs, array( 'site_id' => $network_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time( 'mysql' ) ) );		$blog_id = $wpdb->insert_id;		update_user_meta( $site_user->ID, 'source_domain', $domain );		update_user_meta( $site_user->ID, 'primary_blog', $blog_id );		if ( !$upload_path = get_option( 'upload_path' ) ) {			$upload_path = substr( WP_CONTENT_DIR, strlen( ABSPATH ) ) . '/uploads';			update_option( 'upload_path', $upload_path );		}		update_option( 'fileupload_url', get_option( 'siteurl' ) . '/' . $upload_path );	}	if ( $subdomain_install )		update_option( 'permalink_structure', '/%year%/%monthnum%/%day%/%postname%/');	else		update_option( 'permalink_structure', '/blog/%year%/%monthnum%/%day%/%postname%/');	$wp_rewrite->flush_rules();	if ( $subdomain_install ) {		$vhost_ok = false;		$errstr = '';		$hostname = substr( md5( time() ), 0, 6 ) . '.' . $domain; // Very random hostname!		$page = wp_remote_get( 'http://' . $hostname, array( 'timeout' => 5, 'httpversion' => '1.1' ) );		if ( is_wp_error( $page ) )			$errstr = $page->get_error_message();		elseif ( 200 == $page['response']['code'] )				$vhost_ok = true;		if ( ! $vhost_ok ) {			$msg = '<p><strong>' . __( 'Warning! Wildcard DNS may not be configured correctly!' ) . '</strong></p>';			$msg .= '<p>' . sprintf( __( 'The installer attempted to contact a random hostname (<code>%1$s</code>) on your domain.' ), $hostname );			if ( ! empty ( $errstr ) )				$msg .= ' ' . sprintf( __( 'This resulted in an error message: %s' ), '<code>' . $errstr . '</code>' );			$msg .= '</p>';			$msg .= '<p>' . _e( 'To use a subdomain configuration, you must have a wildcard entry in your DNS. This usually means adding a <code>*</code> hostname record pointing at your web server in your DNS configuration tool.' ) . '</p>';			$msg .= '<p>' . __( 'You can still use your site but any subdomain you create may not be accessible. If you know your DNS is correct, ignore this message.' ) . '</p>';			return new WP_Error( 'no_wildcard_dns', $msg );		}	}	return true;}?>
<?php/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Edit extends Walker_Nav_Menu  {	/**	 * @see Walker_Nav_Menu::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function start_lvl(&$output) {}	/**	 * @see Walker_Nav_Menu::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function end_lvl(&$output) {	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_wp_nav_menu_max_depth;		$_wp_nav_menu_max_depth = $depth > $_wp_nav_menu_max_depth ? $depth : $_wp_nav_menu_max_depth;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		ob_start();		$item_id = esc_attr( $item->ID );		$removed_args = array(			'action',			'customlink-tab',			'edit-menu-item',			'menu-item',			'page-tab',			'_wpnonce',		);		$original_title = '';		if ( 'taxonomy' == $item->type ) {			$original_title = get_term_field( 'name', $item->object_id, $item->object, 'raw' );		} elseif ( 'post_type' == $item->type ) {			$original_object = get_post( $item->object_id );			$original_title = $original_object->post_title;		}		$classes = array(			'menu-item menu-item-depth-' . $depth,			'menu-item-' . esc_attr( $item->object ),			'menu-item-edit-' . ( ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? 'active' : 'inactive'),		);		$title = $item->title;		if ( isset( $item->post_status ) && 'draft' == $item->post_status ) {			$classes[] = 'pending';			/* translators: %s: title of menu item in draft status */			$title = sprintf( __('%s (Pending)'), $item->title );		}		$title = empty( $item->label ) ? $title : $item->label;		?>		<li id="menu-item-<?php echo $item_id; ?>" class="<?php echo implode(' ', $classes ); ?>">			<dl class="menu-item-bar">				<dt class="menu-item-handle">					<span class="item-title"><?php echo esc_html( $title ); ?></span>					<span class="item-controls">						<span class="item-type"><?php echo esc_html( $item->type_label ); ?></span>						<span class="item-order">							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-up-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-up"><abbr title="<?php esc_attr_e('Move up'); ?>">&#8593;</abbr></a>							|							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-down-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-down"><abbr title="<?php esc_attr_e('Move down'); ?>">&#8595;</abbr></a>						</span>						<a class="item-edit" id="edit-<?php echo $item_id; ?>" title="<?php _e('Edit Menu Item'); ?>" href="<?php							echo ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? admin_url( 'nav-menus.php' ) : add_query_arg( 'edit-menu-item', $item_id, remove_query_arg( $removed_args, admin_url( 'nav-menus.php#menu-item-settings-' . $item_id ) ) );						?>"><?php _e( 'Edit Menu Item' ); ?></a>					</span>				</dt>			</dl>			<div class="menu-item-settings" id="menu-item-settings-<?php echo $item_id; ?>">				<?php if( 'custom' == $item->type ) : ?>					<p class="field-url description description-wide">						<label for="edit-menu-item-url-<?php echo $item_id; ?>">							<?php _e( 'URL' ); ?><br />							<input type="text" id="edit-menu-item-url-<?php echo $item_id; ?>" class="widefat code edit-menu-item-url" name="menu-item-url[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->url ); ?>" />						</label>					</p>				<?php endif; ?>				<p class="description description-thin">					<label for="edit-menu-item-title-<?php echo $item_id; ?>">						<?php _e( 'Navigation Label' ); ?><br />						<input type="text" id="edit-menu-item-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-title" name="menu-item-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->title ); ?>" />					</label>				</p>				<p class="description description-thin">					<label for="edit-menu-item-attr-title-<?php echo $item_id; ?>">						<?php _e( 'Title Attribute' ); ?><br />						<input type="text" id="edit-menu-item-attr-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-attr-title" name="menu-item-attr-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->post_excerpt ); ?>" />					</label>				</p>				<p class="field-link-target description description-thin">					<label for="edit-menu-item-target-<?php echo $item_id; ?>">						<?php _e( 'Link Target' ); ?><br />						<select id="edit-menu-item-target-<?php echo $item_id; ?>" class="widefat edit-menu-item-target" name="menu-item-target[<?php echo $item_id; ?>]">							<option value="" <?php selected( $item->target, ''); ?>><?php _e('Same window or tab'); ?></option>							<option value="_blank" <?php selected( $item->target, '_blank'); ?>><?php _e('New window or tab'); ?></option>						</select>					</label>				</p>				<p class="field-css-classes description description-thin">					<label for="edit-menu-item-classes-<?php echo $item_id; ?>">						<?php _e( 'CSS Classes (optional)' ); ?><br />						<input type="text" id="edit-menu-item-classes-<?php echo $item_id; ?>" class="widefat code edit-menu-item-classes" name="menu-item-classes[<?php echo $item_id; ?>]" value="<?php echo esc_attr( implode(' ', $item->classes ) ); ?>" />					</label>				</p>				<p class="field-xfn description description-thin">					<label for="edit-menu-item-xfn-<?php echo $item_id; ?>">						<?php _e( 'Link Relationship (XFN)' ); ?><br />						<input type="text" id="edit-menu-item-xfn-<?php echo $item_id; ?>" class="widefat code edit-menu-item-xfn" name="menu-item-xfn[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->xfn ); ?>" />					</label>				</p>				<p class="field-description description description-wide">					<label for="edit-menu-item-description-<?php echo $item_id; ?>">						<?php _e( 'Description' ); ?><br />						<textarea id="edit-menu-item-description-<?php echo $item_id; ?>" class="widefat edit-menu-item-description" rows="3" cols="20" name="menu-item-description[<?php echo $item_id; ?>]"><?php echo esc_html( $item->description ); ?></textarea>						<span class="description"><?php _e('The description will be displayed in the menu if the current theme supports it.'); ?></span>					</label>				</p>				<div class="menu-item-actions description-wide submitbox">					<?php if( 'custom' != $item->type ) : ?>						<p class="link-to-original">							<?php printf( __('Original: %s'), '<a href="' . esc_attr( $item->url ) . '">' . esc_html( $original_title ) . '</a>' ); ?>						</p>					<?php endif; ?>					<a class="item-delete submitdelete deletion" id="delete-<?php echo $item_id; ?>" href="<?php					echo wp_nonce_url(						add_query_arg(							array(								'action' => 'delete-menu-item',								'menu-item' => $item_id,							),							remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )						),						'delete-menu_item_' . $item_id					); ?>"><?php _e('Remove'); ?></a> <span class="meta-sep"> | </span> <a class="item-cancel submitcancel" id="cancel-<?php echo $item_id; ?>" href="<?php	echo add_query_arg( array('edit-menu-item' => $item_id, 'cancel' => time()), remove_query_arg( $removed_args, admin_url( 'nav-menus.php' ) ) );						?>#menu-item-settings-<?php echo $item_id; ?>"><?php _e('Cancel'); ?></a>				</div>				<input class="menu-item-data-db-id" type="hidden" name="menu-item-db-id[<?php echo $item_id; ?>]" value="<?php echo $item_id; ?>" />				<input class="menu-item-data-object-id" type="hidden" name="menu-item-object-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object_id ); ?>" />				<input class="menu-item-data-object" type="hidden" name="menu-item-object[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object ); ?>" />				<input class="menu-item-data-parent-id" type="hidden" name="menu-item-parent-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_item_parent ); ?>" />				<input class="menu-item-data-position" type="hidden" name="menu-item-position[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_order ); ?>" />				<input class="menu-item-data-type" type="hidden" name="menu-item-type[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->type ); ?>" />			</div><!-- .menu-item-settings-->			<ul class="menu-item-transport"></ul>		<?php		$output .= ob_get_clean();	}}/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Checklist extends Walker_Nav_Menu  {	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_nav_menu_placeholder;		$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;		$possible_object_id = isset( $item->post_type ) && 'nav_menu_item' == $item->post_type ? $item->object_id : $_nav_menu_placeholder;		$possible_db_id = ( ! empty( $item->ID ) ) && ( 0 < $possible_object_id ) ? (int) $item->ID : 0;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$output .= $indent . '<li>';		$output .= '<label class="menu-item-title">';		$output .= '<input type="checkbox" class="menu-item-checkbox';		if ( ! empty( $item->_add_to_top ) ) {			$output .= ' add-to-top';		}		$output .= '" name="menu-item[' . $possible_object_id . '][menu-item-object-id]" value="'. esc_attr( $item->object_id ) .'" /> ';		$output .= empty( $item->label ) ? esc_html( $item->title ) : esc_html( $item->label );		$output .= '</label>';		// Menu item hidden fields		$output .= '<input type="hidden" class="menu-item-db-id" name="menu-item[' . $possible_object_id . '][menu-item-db-id]" value="' . $possible_db_id . '" />';		$output .= '<input type="hidden" class="menu-item-object" name="menu-item[' . $possible_object_id . '][menu-item-object]" value="'. esc_attr( $item->object ) .'" />';		$output .= '<input type="hidden" class="menu-item-parent-id" name="menu-item[' . $possible_object_id . '][menu-item-parent-id]" value="'. esc_attr( $item->menu_item_parent ) .'" />';		$output .= '<input type="hidden" class="menu-item-type" name="menu-item[' . $possible_object_id . '][menu-item-type]" value="'. esc_attr( $item->type ) .'" />';		$output .= '<input type="hidden" class="menu-item-title" name="menu-item[' . $possible_object_id . '][menu-item-title]" value="'. esc_attr( $item->title ) .'" />';		$output .= '<input type="hidden" class="menu-item-url" name="menu-item[' . $possible_object_id . '][menu-item-url]" value="'. esc_attr( $item->url ) .'" />';		$output .= '<input type="hidden" class="menu-item-target" name="menu-item[' . $possible_object_id . '][menu-item-target]" value="'. esc_attr( $item->target ) .'" />';		$output .= '<input type="hidden" class="menu-item-attr_title" name="menu-item[' . $possible_object_id . '][menu-item-attr_title]" value="'. esc_attr( $item->attr_title ) .'" />';		$output .= '<input type="hidden" class="menu-item-description" name="menu-item[' . $possible_object_id . '][menu-item-description]" value="'. esc_attr( $item->description ) .'" />';		$output .= '<input type="hidden" class="menu-item-classes" name="menu-item[' . $possible_object_id . '][menu-item-classes]" value="'. esc_attr( implode( ' ', $item->classes ) ) .'" />';		$output .= '<input type="hidden" class="menu-item-xfn" name="menu-item[' . $possible_object_id . '][menu-item-xfn]" value="'. esc_attr( $item->xfn ) .'" />';	}}/** * Prints the appropriate response to a menu quick search. * * @since 3.0.0 * * @param array $request The unsanitized request values. */function _wp_ajax_menu_quick_search( $request = array() ) {	$args = array();	$type = isset( $request['type'] ) ? $request['type'] : '';	$object_type = isset( $request['object_type'] ) ? $request['object_type'] : '';	$query = isset( $request['q'] ) ? $request['q'] : '';	$response_format = isset( $request['response-format'] ) && in_array( $request['response-format'], array( 'json', 'markup' ) ) ? $request['response-format'] : 'json';	if ( 'markup' == $response_format ) {		$args['walker'] = new Walker_Nav_Menu_Checklist;	}	if ( 'get-post-item' == $type ) {		if ( post_type_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( $object_id ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_post( $object_id );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => get_the_title( $object_id ),							'post_type' => get_post_type( $object_id ),						)					);					echo "\n";				}			}		} elseif ( taxonomy_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_term( $object_id, $object_type ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_term( $object_id, $object_type );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => $post_obj->name,							'post_type' => $object_type,						)					);					echo "\n";				}			}		}	} elseif ( preg_match('/quick-search-(posttype|taxonomy)-([a-zA-Z_-]*\b)/', $type, $matches) ) {		if ( 'posttype' == $matches[1] && get_post_type_object( $matches[2] ) ) {			query_posts(array(				'posts_per_page' => 10,				'post_type' => $matches[2],				's' => $query,			));			if ( ! have_posts() )				return;			while ( have_posts() ) {				the_post();				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( get_the_ID() ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => get_the_ID(),							'post_title' => get_the_title(),							'post_type' => get_post_type(),						)					);					echo "\n";				}			}		} elseif ( 'taxonomy' == $matches[1] ) {			$terms = get_terms( $matches[2], array(				'name__like' => $query,				'number' => 10,			));			if ( empty( $terms ) || is_wp_error( $terms ) )				return;			foreach( (array) $terms as $term ) {				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( $term ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => $term->term_id,							'post_title' => $term->name,							'post_type' => $matches[2],						)					);					echo "\n";				}			}		}	}}/** * Register nav menu metaboxes and advanced menu items * * @since 3.0.0 **/function wp_nav_menu_setup() {	// Register meta boxes	if ( wp_get_nav_menus() )		add_meta_box( 'nav-menu-theme-locations', __( 'Theme Locations' ), 'wp_nav_menu_locations_meta_box' , 'nav-menus', 'side', 'default' );	add_meta_box( 'add-custom-links', __('Custom Links'), 'wp_nav_menu_item_link_meta_box', 'nav-menus', 'side', 'default' );	wp_nav_menu_post_type_meta_boxes();	wp_nav_menu_taxonomy_meta_boxes();	// Register advanced menu items (columns)	add_filter( 'manage_nav-menus_columns', 'wp_nav_menu_manage_columns');	// If first time editing, disable advanced items by default.	if( false === get_user_option( 'managenav-menuscolumnshidden' ) ) {		$user = wp_get_current_user();		update_user_option($user->ID, 'managenav-menuscolumnshidden',			array( 0 => 'link-target', 1 => 'css-classes', 2 => 'xfn', 3 => 'description', ),			true);	}}/** * Limit the amount of meta boxes to just links, pages and cats for first time users. * * @since 3.0.0 **/function wp_initial_nav_menu_meta_boxes() {	global $wp_meta_boxes;	if ( get_user_option( 'metaboxhidden_nav-menus' ) !== false || ! is_array($wp_meta_boxes) )		return;	$initial_meta_boxes = array( 'nav-menu-theme-locations', 'add-custom-links', 'add-page', 'add-category' );	$hidden_meta_boxes = array();	foreach ( array_keys($wp_meta_boxes['nav-menus']) as $context ) {		foreach ( array_keys($wp_meta_boxes['nav-menus'][$context]) as $priority ) {			foreach ( $wp_meta_boxes['nav-menus'][$context][$priority] as $box ) {				if ( in_array( $box['id'], $initial_meta_boxes ) ) {					unset( $box['id'] );				} else {					$hidden_meta_boxes[] = $box['id'];				}			}		}	}	$user = wp_get_current_user();	update_user_option( $user->ID, 'metaboxhidden_nav-menus', $hidden_meta_boxes, true );}/** * Creates metaboxes for any post type menu item. * * @since 3.0.0 */function wp_nav_menu_post_type_meta_boxes() {	$post_types = get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	if ( ! $post_types )		return;	foreach ( $post_types as $post_type ) {		$post_type = apply_filters( 'nav_menu_meta_box_object', $post_type );		if ( $post_type ) {			$id = $post_type->name;			add_meta_box( "add-{$id}", $post_type->labels->name, 'wp_nav_menu_item_post_type_meta_box', 'nav-menus', 'side', 'default', $post_type );		}	}}/** * Creates metaboxes for any taxonomy menu item. * * @since 3.0.0 */function wp_nav_menu_taxonomy_meta_boxes() {	$taxonomies = get_taxonomies( array( 'show_in_nav_menus' => true ), 'object' );	if ( !$taxonomies )		return;	foreach ( $taxonomies as $tax ) {		$tax = apply_filters( 'nav_menu_meta_box_object', $tax );		if ( $tax ) {			$id = $tax->name;			add_meta_box( "add-{$id}", $tax->labels->name, 'wp_nav_menu_item_taxonomy_meta_box', 'nav-menus', 'side', 'default', $tax );		}	}}/** * Displays a metabox for the nav menu theme locations. * * @since 3.0.0 */function wp_nav_menu_locations_meta_box() {	global $nav_menu_selected_id;	if ( ! current_theme_supports( 'menus' ) ) {		// We must only support widgets. Leave a message and bail.		echo '<p class="howto">' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p>';		return;	}	$locations = get_registered_nav_menus();	$menus = wp_get_nav_menus();	$menu_locations = get_nav_menu_locations();	$num_locations = count( array_keys($locations) );	echo '<p class="howto">' . sprintf( _n('Your theme supports %s menu. Select which menu you would like to use.', 'Your theme supports %s menus. Select which menu appears in each location.', $num_locations ), number_format_i18n($num_locations) ) . '</p>';	foreach ( $locations as $location => $description ) {		?>		<p>			<label class="howto" for="locations-<?php echo $location; ?>">				<span><?php echo $description; ?></span>				<select name="menu-locations[<?php echo $location; ?>]" id="locations-<?php echo $location; ?>">					<option value="0"></option>					<?php foreach ( $menus as $menu ) : ?>					<option<?php selected( isset( $menu_locations[ $location ] ) && $menu_locations[ $location ] == $menu->term_id ); ?>						value="<?php echo $menu->term_id; ?>"><?php						$truncated_name = wp_html_excerpt( $menu->name, 40 );						echo $truncated_name == $menu->name ? $menu->name : trim( $truncated_name ) . '&hellip;';					?></option>					<?php endforeach; ?>				</select>			</label>		</p>	<?php	}	?>	<p class="button-controls">		<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-primary" name="nav-menu-locations" value="<?php esc_attr_e( 'Save' ); ?>" />	</p>	<?php}/** * Displays a metabox for the custom links menu item. * * @since 3.0.0 */function wp_nav_menu_item_link_meta_box() {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$_nav_menu_placeholder = 0 > $_nav_menu_placeholder ? $_nav_menu_placeholder - 1 : -1;	$current_tab = 'create';	if ( isset( $_REQUEST['customlink-tab'] ) && in_array( $_REQUEST['customlink-tab'], array('create', 'all') ) ) {		$current_tab = $_REQUEST['customlink-tab'];	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div class="customlinkdiv" id="customlinkdiv">			<input type="hidden" value="custom" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-type]" />			<p id="menu-item-url-wrap">				<label class="howto" for="custom-menu-item-url">					<span><?php _e('URL'); ?></span>					<input id="custom-menu-item-url" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-url]" type="text" class="code menu-item-textbox" value="http://" />				</label>			</p>			<p id="menu-item-name-wrap">				<label class="howto" for="custom-menu-item-name">					<span><?php _e('Label'); ?></span>					<input id="custom-menu-item-name" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-title]" type="text" class="regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Menu Item'); ?>" />				</label>			</p>		<p class="button-controls">			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-custom-menu-item" id="submit-customlinkdiv" />			</span>		</p>	</div><!-- /.customlinkdiv -->	<?php}/** * Displays a metabox for a post type menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $post_type The post type object. */function wp_nav_menu_item_post_type_meta_box( $object, $post_type ) {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$post_type_name = $post_type['args']->name;	// paginate browsing for large numbers of post objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$post_type_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'title',		'posts_per_page' => $per_page,		'post_type' => $post_type_name,		'suppress_filters' => true,		'update_post_term_cache' => false,		'update_post_meta_cache' => false	);	if ( isset( $post_type['args']->_default_query ) )		$args = array_merge($args, (array) $post_type['args']->_default_query );	// @todo transient caching of these results with proper invalidation on updating of a post of this type	$get_posts = new WP_Query;	$posts = $get_posts->query( $args );	if ( ! $get_posts->post_count ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$post_type_object = get_post_type_object($post_type_name);	$num_pages = $get_posts->max_num_pages;	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$post_type_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'post_type',				'item-object' => $post_type_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	if ( !$posts )		$error = '<li id="error">'. $post_type['args']->labels->not_found .'</li>';	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-recent';	if ( isset( $_REQUEST[$post_type_name . '-tab'] ) && in_array( $_REQUEST[$post_type_name . '-tab'], array('all', 'search') ) ) {		$current_tab = $_REQUEST[$post_type_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="posttype-<?php echo $post_type_name; ?>" class="posttypediv">		<ul id="posttype-<?php echo $post_type_name; ?>-tabs" class="posttype-tabs add-menu-item-tabs">			<li <?php echo ( 'most-recent' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'most-recent', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent"><?php _e('Most Recent'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#<?php echo $post_type_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-search"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent" class="tabs-panel <?php			echo ( 'most-recent' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $post_type_name; ?>checklist-most-recent" class="categorychecklist form-no-clear">				<?php				$recent_args = array_merge( $args, array( 'orderby' => 'post_date', 'order' => 'DESC', 'showposts' => 15 ) );				$most_recent = $get_posts->query( $recent_args );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $most_recent), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-posttype-<?php echo $post_type_name; ?>-search">			<?php			if ( isset( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-posttype-' . $post_type_name] );				$search_results = get_posts( array( 's' => $searched, 'post_type' => $post_type_name, 'fields' => 'all', 'order' => 'DESC', ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-posttype-<?php echo $post_type_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $post_type_name; ?>-search-checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<div id="<?php echo $post_type_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $post_type_name; ?>checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				// if we're dealing with pages, let's put a checkbox for the front page at the top of the list				if ( 'page' == $post_type_name ) {					$front_page = 'page' == get_option('show_on_front') ? (int) get_option( 'page_on_front' ) : 0;					if ( ! empty( $front_page ) ) {						$front_page_obj = get_post( $front_page );						$front_page_obj->_add_to_top = true;						$front_page_obj->label = sprintf( _x('Home: %s', 'nav menu front page title'), $front_page_obj->post_title );						array_unshift( $posts, $front_page_obj );					} else {						$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;						array_unshift( $posts, (object) array(							'_add_to_top' => true,							'ID' => 0,							'object_id' => $_nav_menu_placeholder,							'post_content' => '',							'post_excerpt' => '',							'post_title' => _x('Home', 'nav menu home label'),							'post_type' => 'nav_menu_item',							'type' => 'custom',							'url' => home_url('/'),						) );					}				}				$checkbox_items = walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $posts), 0, (object) $args );				if ( 'all' == $current_tab && ! empty( $_REQUEST['selectall'] ) ) {					$checkbox_items = preg_replace('/(type=(.)checkbox(\2))/', '$1 checked=$2checked$2', $checkbox_items);				}				echo $checkbox_items;				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$post_type_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#posttype-<?php echo $post_type_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-post-type-menu-item" id="submit-posttype-<?php echo $post_type_name; ?>" />			</span>		</p>	</div><!-- /.posttypediv -->	<?php}/** * Displays a metabox for a taxonomy menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $taxonomy The taxonomy object. */function wp_nav_menu_item_taxonomy_meta_box( $object, $taxonomy ) {	global $nav_menu_selected_id;	$taxonomy_name = $taxonomy['args']->name;	// paginate browsing for large numbers of objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$taxonomy_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'child_of' => 0,		'exclude' => '',		'hide_empty' => false,		'hierarchical' => 1,		'include' => '',		'include_last_update_time' => false,		'number' => $per_page,		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'name',		'pad_counts' => false,	);	$terms = get_terms( $taxonomy_name, $args );	if ( ! $terms || is_wp_error($terms) ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$num_pages = ceil( wp_count_terms( $taxonomy_name , array_merge( $args, array('number' => '', 'offset' => '') ) ) / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$taxonomy_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'taxonomy',				'item-object' => $taxonomy_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-used';	if ( isset( $_REQUEST[$taxonomy_name . '-tab'] ) && in_array( $_REQUEST[$taxonomy_name . '-tab'], array('all', 'most-used', 'search') ) ) {		$current_tab = $_REQUEST[$taxonomy_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="taxonomy-<?php echo $taxonomy_name; ?>" class="taxonomydiv">		<ul id="taxonomy-<?php echo $taxonomy_name; ?>-tabs" class="taxonomy-tabs add-menu-item-tabs">			<li <?php echo ( 'most-used' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'most-used', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-pop"><?php _e('Most Used'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-pop" class="tabs-panel <?php			echo ( 'most-used' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $taxonomy_name; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php				$popular_terms = get_terms( $taxonomy_name, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $popular_terms), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $taxonomy_name; ?>checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $terms), 0, (object) $args );				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>">			<?php			if ( isset( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] );				$search_results = get_terms( $taxonomy_name, array( 'name__like' => $searched, 'fields' => 'all', 'orderby' => 'count', 'order' => 'DESC', 'hierarchical' => false ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-taxonomy-<?php echo $taxonomy_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $taxonomy_name; ?>-search-checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$taxonomy_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#taxonomy-<?php echo $taxonomy_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-taxonomy-menu-item" id="submit-taxonomy-<?php echo $taxonomy_name; ?>" />			</span>		</p>	</div><!-- /.taxonomydiv -->	<?php}/** * Save posted nav menu item data. * * @since 3.0.0 * * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item. * @param array $menu_data The unsanitized posted menu item data. * @return array The database IDs of the items saved */function wp_save_nav_menu_items( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$items_saved = array();	if ( 0 == $menu_id || is_nav_menu( $menu_id ) ) {		// Loop through all the menu items' POST values		foreach( (array) $menu_data as $_possible_db_id => $_item_object_data ) {			if (				empty( $_item_object_data['menu-item-object-id'] ) && // checkbox is not checked				(					! isset( $_item_object_data['menu-item-type'] ) || // and item type either isn't set					in_array( $_item_object_data['menu-item-url'], array( 'http://', '' ) ) || // or URL is the default					! ( 'custom' == $_item_object_data['menu-item-type'] && ! isset( $_item_object_data['menu-item-db-id'] ) ) ||  // or it's not a custom menu item (but not the custom home page)					! empty( $_item_object_data['menu-item-db-id'] ) // or it *is* a custom menu item that already exists				)			) {				continue; // then this potential menu item is not getting added to this menu			}			// if this possible menu item doesn't actually have a menu database ID yet			if (				empty( $_item_object_data['menu-item-db-id'] ) ||				( 0 > $_possible_db_id ) ||				$_possible_db_id != $_item_object_data['menu-item-db-id']			) {				$_actual_db_id = 0;			} else {				$_actual_db_id = (int) $_item_object_data['menu-item-db-id'];			}			$args = array(				'menu-item-db-id' => ( isset( $_item_object_data['menu-item-db-id'] ) ? $_item_object_data['menu-item-db-id'] : '' ),				'menu-item-object-id' => ( isset( $_item_object_data['menu-item-object-id'] ) ? $_item_object_data['menu-item-object-id'] : '' ),				'menu-item-object' => ( isset( $_item_object_data['menu-item-object'] ) ? $_item_object_data['menu-item-object'] : '' ),				'menu-item-parent-id' => ( isset( $_item_object_data['menu-item-parent-id'] ) ? $_item_object_data['menu-item-parent-id'] : '' ),				'menu-item-position' => ( isset( $_item_object_data['menu-item-position'] ) ? $_item_object_data['menu-item-position'] : '' ),				'menu-item-type' => ( isset( $_item_object_data['menu-item-type'] ) ? $_item_object_data['menu-item-type'] : '' ),				'menu-item-title' => ( isset( $_item_object_data['menu-item-title'] ) ? $_item_object_data['menu-item-title'] : '' ),				'menu-item-url' => ( isset( $_item_object_data['menu-item-url'] ) ? $_item_object_data['menu-item-url'] : '' ),				'menu-item-description' => ( isset( $_item_object_data['menu-item-description'] ) ? $_item_object_data['menu-item-description'] : '' ),				'menu-item-attr-title' => ( isset( $_item_object_data['menu-item-attr-title'] ) ? $_item_object_data['menu-item-attr-title'] : '' ),				'menu-item-target' => ( isset( $_item_object_data['menu-item-target'] ) ? $_item_object_data['menu-item-target'] : '' ),				'menu-item-classes' => ( isset( $_item_object_data['menu-item-classes'] ) ? $_item_object_data['menu-item-classes'] : '' ),				'menu-item-xfn' => ( isset( $_item_object_data['menu-item-xfn'] ) ? $_item_object_data['menu-item-xfn'] : '' ),			);			$items_saved[] = wp_update_nav_menu_item( $menu_id, $_actual_db_id, $args );		}	}	return $items_saved;}/** * Adds custom arguments to some of the meta box object types. * * @since 3.0.0 * * @access private * * @param object $object The post type or taxonomy meta-object. * @return object The post type of taxonomy object. */function _wp_nav_menu_meta_box_object( $object = null ) {	if ( isset( $object->name ) ) {		if ( 'page' == $object->name ) {			$object->_default_query = array(				'orderby' => 'menu_order title',				'post_status' => 'publish',			);		// posts should show only published items		} elseif ( 'post' == $object->name ) {			$object->_default_query = array(				'post_status' => 'publish',			);		// cats should be in reverse chronological order		} elseif ( 'category' == $object->name ) {			$object->_default_query = array(				'orderby' => 'id',				'order' => 'DESC',			);		// custom post types should show only published items		} else {			$object->_default_query = array(				'post_status' => 'publish',			);		}	}	return $object;}/** * Returns the menu formatted to edit. * * @since 3.0.0 * * @param string $menu_id The ID of the menu to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_get_nav_menu_to_edit( $menu_id = 0 ) {	$menu = wp_get_nav_menu_object( $menu_id );	// If the menu exists, get its items.	if ( is_nav_menu( $menu ) ) {		$menu_items = wp_get_nav_menu_items( $menu->term_id, array('post_status' => 'any') );		$result = '<div id="menu-instructions" class="post-body-plain';		$result .= ( ! empty($menu_items) ) ? ' menu-instructions-inactive">' : '">';		$result .= '<p>' . __('Select menu items (pages, categories, links) from the boxes at left to begin building your custom menu.') . '</p>';		$result .= '</div>';		if( empty($menu_items) )			return $result . ' <ul class="menu" id="menu-to-edit"> </ul>';		$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $menu_id );		if ( class_exists( $walker_class_name ) )			$walker = new $walker_class_name;		else			return new WP_Error( 'menu_walker_not_exist', sprintf( __('The Walker class named <strong>%s</strong> does not exist.'), $walker_class_name ) );		$some_pending_menu_items = false;		foreach( (array) $menu_items as $menu_item ) {			if ( isset( $menu_item->post_status ) && 'draft' == $menu_item->post_status )				$some_pending_menu_items = true;		}		if ( $some_pending_menu_items )			$result .= '<div class="updated inline"><p>' . __('Click Save Menu to make pending menu items public.') . '</p></div>';		$result .= '<ul class="menu" id="menu-to-edit"> ';		$result .= walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $menu_items), 0, (object) array('walker' => $walker ) );		$result .= ' </ul> ';		return $result;	} elseif ( is_wp_error( $menu ) ) {		return $menu;	}}/** * Returns the columns for the nav menus page. * * @since 3.0.0 * * @param string $menu_item_id The ID of the menu item to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_nav_menu_manage_columns() {	return array(		'_title' => __('Show advanced menu properties'),		'cb' => '<input type="checkbox" />',		'link-target' => __('Link Target'),		'css-classes' => __('CSS Classes'),		'xfn' => __('Link Relationship (XFN)'),		'description' => __('Description'),	);}/** * Deletes orphaned draft menu items * * @access private * @since 3.0.0 * */function _wp_delete_orphaned_draft_menu_items() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	// delete orphaned draft menu items	$menu_items_to_delete = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts AS p LEFT JOIN $wpdb->postmeta AS m ON p.ID = m.post_id WHERE post_type = 'nav_menu_item' AND post_status = 'draft' AND meta_key = '_menu_item_orphaned' AND meta_value < '%d'", $delete_timestamp ) );	foreach( (array) $menu_items_to_delete as $menu_item_id )		wp_delete_post( $menu_item_id, true );}add_action('admin_head-nav-menus.php', '_wp_delete_orphaned_draft_menu_items');?>
<?php/** * The loop that displays posts. * * The loop displays the posts and the post content.  See * http://codex.wordpress.org/The_Loop to understand it and * http://codex.wordpress.org/Template_Tags to understand * the tags used in it. * * This can be overridden in child themes with loop.php or * loop-template.php, where 'template' is the loop context * requested by a template. For example, loop-index.php would * be used if it exists and we ask for the loop with: * <code>get_template_part( 'loop', 'index' );</code> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if ( $wp_query->max_num_pages > 1 ) : ?>	<div id="nav-above" class="navigation">		<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>		<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>	</div><!-- #nav-above --><?php endif; ?><?php /* If there are no posts to display, such as an empty archive page */ ?><?php if ( ! have_posts() ) : ?>	<div id="post-0" class="post error404 not-found">		<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>		<div class="entry-content">			<p><?php _e( 'Apologies, but no results were found for the requested archive. Perhaps searching will help find a related post.', 'twentyten' ); ?></p>			<?php get_search_form(); ?>		</div><!-- .entry-content -->	</div><!-- #post-0 --><?php endif; ?><?php	/* Start the Loop.	 *	 * In Twenty Ten we use the same loop in multiple contexts.	 * It is broken into three main parts: when we're displaying	 * posts that are in the gallery category, when we're displaying	 * posts in the asides category, and finally all other posts.	 *	 * Additionally, we sometimes check for whether we are on an	 * archive page, a search page, etc., allowing for small differences	 * in the loop on each template without actually duplicating	 * the rest of the loop that is shared.	 *	 * Without further ado, the loop:	 */ ?><?php while ( have_posts() ) : the_post(); ?><?php /* How to display posts in the Gallery category. */ ?>	<?php if ( in_category( _x('gallery', 'gallery category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->			<div class="entry-content"><?php if ( post_password_required() ) : ?>				<?php the_content(); ?><?php else : ?>				<div class="gallery-thumb"><?php	$images = get_children( array( 'post_parent' => $post->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image', 'orderby' => 'menu_order', 'order' => 'ASC', 'numberposts' => 999 ) );	$total_images = count( $images );	$image = array_shift( $images );	$image_img_tag = wp_get_attachment_image( $image->ID, 'thumbnail' );?>					<a class="size-thumbnail" href="<?php the_permalink(); ?>"><?php echo $image_img_tag; ?></a>				</div><!-- .gallery-thumb -->				<p><em><?php printf( __( 'This gallery contains <a %1$s>%2$s photos</a>.', 'twentyten' ),						'href="' . get_permalink() . '" title="' . sprintf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ) . '" rel="bookmark"',						$total_images					); ?></em></p>				<?php the_excerpt(); ?><?php endif; ?>			</div><!-- .entry-content -->			<div class="entry-utility">				<a href="<?php echo get_term_link( _x('gallery', 'gallery category slug', 'twentyten'), 'category' ); ?>" title="<?php esc_attr_e( 'View posts in the Gallery category', 'twentyten' ); ?>"><?php _e( 'More Galleries', 'twentyten' ); ?></a>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display posts in the asides category */ ?>	<?php elseif ( in_category( _x('asides', 'asides category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>		<?php if ( is_archive() || is_search() ) : // Display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->		<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>			</div><!-- .entry-content -->		<?php endif; ?>			<div class="entry-utility">				<?php twentyten_posted_on(); ?>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display all other posts. */ ?>	<?php else : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->	<?php if ( is_archive() || is_search() ) : // Only display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->	<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>				<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>			</div><!-- .entry-content -->	<?php endif; ?>			<div class="entry-utility">				<?php if ( count( get_the_category() ) ) : ?>					<span class="cat-links">						<?php printf( __( '<span class="%1$s">Posted in</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-cat-links', get_the_category_list( ', ' ) ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<?php					$tags_list = get_the_tag_list( '', ', ' );					if ( $tags_list ):				?>					<span class="tag-links">						<?php printf( __( '<span class="%1$s">Tagged</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-tag-links', $tags_list ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## -->		<?php comments_template( '', true ); ?>	<?php endif; // This was the if statement that broke the loop into three parts based on categories. ?><?php endwhile; // End the loop. Whew. ?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if (  $wp_query->max_num_pages > 1 ) : ?>				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>					<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>				</div><!-- #nav-below --><?php endif; ?>
<?php/** * WordPress Dashboard Widget Administration Panel API * * @package WordPress * @subpackage Administration *//** * Registers dashboard widgets. * * handles POST data, sets up filters. * * @since unknown */function wp_dashboard_setup() {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_dashboard_control_callbacks;	$wp_dashboard_control_callbacks = array();	$update = false;	$widget_options = get_option( 'dashboard_widget_options' );	if ( !$widget_options || !is_array($widget_options) )		$widget_options = array();	/* Register Widgets and Controls */	// Right Now	wp_add_dashboard_widget( 'dashboard_right_now', __( 'Right Now' ), 'wp_dashboard_right_now' );	// Recent Comments Widget	if ( !isset( $widget_options['dashboard_recent_comments'] ) || !isset( $widget_options['dashboard_recent_comments']['items'] ) ) {		$update = true;		$widget_options['dashboard_recent_comments'] = array(			'items' => 5,		);	}	$recent_comments_title = __( 'Recent Comments' );	wp_add_dashboard_widget( 'dashboard_recent_comments', $recent_comments_title, 'wp_dashboard_recent_comments', 'wp_dashboard_recent_comments_control' );	// Incoming Links Widget	if ( !isset( $widget_options['dashboard_incoming_links'] ) || !isset( $widget_options['dashboard_incoming_links']['home'] ) || $widget_options['dashboard_incoming_links']['home'] != get_option('home') ) {		$update = true;		$num_items = isset($widget_options['dashboard_incoming_links']['items']) ? $widget_options['dashboard_incoming_links']['items'] : 10;		$widget_options['dashboard_incoming_links'] = array(			'home' => get_option('home'),			'link' => apply_filters( 'dashboard_incoming_links_link', 'http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'url' => isset($widget_options['dashboard_incoming_links']['url']) ? apply_filters( 'dashboard_incoming_links_feed', $widget_options['dashboard_incoming_links']['url'] ) : apply_filters( 'dashboard_incoming_links_feed', 'http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=' . $num_items . '&output=rss&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'items' => $num_items,			'show_date' => isset($widget_options['dashboard_incoming_links']['show_date']) ? $widget_options['dashboard_incoming_links']['show_date'] : false		);	}	wp_add_dashboard_widget( 'dashboard_incoming_links', __( 'Incoming Links' ), 'wp_dashboard_incoming_links', 'wp_dashboard_incoming_links_control' );	// WP Plugins Widget	if ( current_user_can( 'install_plugins' ) )		wp_add_dashboard_widget( 'dashboard_plugins', __( 'Plugins' ), 'wp_dashboard_plugins' );	// QuickPress Widget	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_quick_press', __( 'QuickPress' ), 'wp_dashboard_quick_press' );	// Recent Drafts	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_recent_drafts', __('Recent Drafts'), 'wp_dashboard_recent_drafts' );	// Primary feed (Dev Blog) Widget	if ( !isset( $widget_options['dashboard_primary'] ) ) {		$update = true;		$widget_options['dashboard_primary'] = array(			'link' => apply_filters( 'dashboard_primary_link',  __( 'http://wordpress.org/development/' ) ),			'url' => apply_filters( 'dashboard_primary_feed',  __( 'http://wordpress.org/development/feed/' ) ),			'title' => apply_filters( 'dashboard_primary_title', __( 'WordPress Blog' ) ),			'items' => 2,			'show_summary' => 1,			'show_author' => 0,			'show_date' => 1,		);	}	wp_add_dashboard_widget( 'dashboard_primary', $widget_options['dashboard_primary']['title'], 'wp_dashboard_primary', 'wp_dashboard_primary_control' );	// Secondary Feed (Planet) Widget	if ( !isset( $widget_options['dashboard_secondary'] ) ) {		$update = true;		$widget_options['dashboard_secondary'] = array(			'link' => apply_filters( 'dashboard_secondary_link',  __( 'http://planet.wordpress.org/' ) ),			'url' => apply_filters( 'dashboard_secondary_feed',  __( 'http://planet.wordpress.org/feed/' ) ),			'title' => apply_filters( 'dashboard_secondary_title', __( 'Other WordPress News' ) ),			'items' => 5,			'show_summary' => 0,			'show_author' => 0,			'show_date' => 0,		);	}	wp_add_dashboard_widget( 'dashboard_secondary', $widget_options['dashboard_secondary']['title'], 'wp_dashboard_secondary', 'wp_dashboard_secondary_control' );	// Hook to register new widgets	do_action( 'wp_dashboard_setup' );	// Filter widget order	$dashboard_widgets = apply_filters( 'wp_dashboard_widgets', array() );	foreach ( $dashboard_widgets as $widget_id ) {		$name = empty( $wp_registered_widgets[$widget_id]['all_link'] ) ? $wp_registered_widgets[$widget_id]['name'] : $wp_registered_widgets[$widget_id]['name'] . " <a href='{$wp_registered_widgets[$widget_id]['all_link']}' class='edit-box open-box'>" . __('View all') . '</a>';		wp_add_dashboard_widget( $widget_id, $name, $wp_registered_widgets[$widget_id]['callback'], $wp_registered_widget_controls[$widget_id]['callback'] );	}	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget_id']) ) {		ob_start(); // hack - but the same hack wp-admin/widgets.php uses		wp_dashboard_trigger_widget_control( $_POST['widget_id'] );		ob_end_clean();		wp_redirect( remove_query_arg( 'edit' ) );		exit;	}	if ( $update )		update_option( 'dashboard_widget_options', $widget_options );	do_action('do_meta_boxes', 'dashboard', 'normal', '');	do_action('do_meta_boxes', 'dashboard', 'side', '');}function wp_add_dashboard_widget( $widget_id, $widget_name, $callback, $control_callback = null ) {	global $wp_dashboard_control_callbacks;	if ( $control_callback && current_user_can( 'edit_dashboard' ) && is_callable( $control_callback ) ) {		$wp_dashboard_control_callbacks[$widget_id] = $control_callback;		if ( isset( $_GET['edit'] ) && $widget_id == $_GET['edit'] ) {			list($url) = explode( '#', add_query_arg( 'edit', false ), 2 );			$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( $url ) . '">' . __( 'Cancel' ) . '</a></span>';			add_meta_box( $widget_id, $widget_name, '_wp_dashboard_control_callback', 'dashboard', 'normal', 'core' );			return;		}		list($url) = explode( '#', add_query_arg( 'edit', $widget_id ), 2 );		$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( "$url#$widget_id" ) . '" class="edit-box open-box">' . __( 'Configure' ) . '</a></span>';	}	$side_widgets = array('dashboard_quick_press', 'dashboard_recent_drafts', 'dashboard_primary', 'dashboard_secondary');	$location = 'normal';	if ( in_array($widget_id, $side_widgets) )		$location = 'side';	add_meta_box( $widget_id, $widget_name , $callback, 'dashboard', $location, 'core' );}function _wp_dashboard_control_callback( $dashboard, $meta_box ) {	echo '<form action="" method="post" class="dashboard-widget-control-form">';	wp_dashboard_trigger_widget_control( $meta_box['id'] );	echo '<p class="submit"><input type="hidden" name="widget_id" value="' . esc_attr($meta_box['id']) . '" /><input type="submit" value="' . esc_attr__( 'Submit' ) . '" /></p>';	echo '</form>';}/** * Displays the dashboard. * * @since unknown */function wp_dashboard() {	global $screen_layout_columns;	$hide2 = $hide3 = $hide4 = '';	switch ( $screen_layout_columns ) {		case 4:			$width = 'width:24.5%;';			break;		case 3:			$width = 'width:32.67%;';			$hide4 = 'display:none;';			break;		case 2:			$width = 'width:49%;';			$hide3 = $hide4 = 'display:none;';			break;		default:			$width = 'width:98%;';			$hide2 = $hide3 = $hide4 = 'display:none;';	}?><div id="dashboard-widgets" class="metabox-holder"><?php	echo "\t<div class='postbox-container' style='$width'>\n";	do_meta_boxes( 'dashboard', 'normal', '' );	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";	do_meta_boxes( 'dashboard', 'side', '' );	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";	do_meta_boxes( 'dashboard', 'column3', '' );	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";	do_meta_boxes( 'dashboard', 'column4', '' );?></div></div><form style="display:none" method="get" action="">	<p><?php	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );?>	</p></form><?php}/* Dashboard Widgets */function wp_dashboard_right_now() {	global $wp_registered_sidebars;	$num_posts = wp_count_posts( 'post' );	$num_pages = wp_count_posts( 'page' );	$num_cats  = wp_count_terms('category');	$num_tags = wp_count_terms('post_tag');	$num_comm = wp_count_comments( );	echo "\n\t".'<div class="table table_content">';	echo "\n\t".'<p class="sub">' . __('Content') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Posts	$num = number_format_i18n( $num_posts->publish );	$text = _n( 'Post', 'Posts', intval($num_posts->publish) );	if ( current_user_can( 'edit_posts' ) ) {		$num = "<a href='edit.php'>$num</a>";		$text = "<a href='edit.php'>$text</a>";	}	echo '<td class="first b b-posts">' . $num . '</td>';	echo '<td class="t posts">' . $text . '</td>';	echo '</tr><tr>';	/* TODO: Show status breakdown on hover	if ( $can_edit_pages && !empty($num_pages->publish) ) { // how many pages is not exposed in feeds.  Don't show if !current_user_can		$post_type_texts[] = '<a href="edit-pages.php">'.sprintf( _n( '%s page', '%s pages', $num_pages->publish ), number_format_i18n( $num_pages->publish ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->draft) ) {		$post_type_texts[] = '<a href="edit.php?post_status=draft">'.sprintf( _n( '%s draft', '%s drafts', $num_posts->draft ), number_format_i18n( $num_posts->draft ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->future) ) {		$post_type_texts[] = '<a href="edit.php?post_status=future">'.sprintf( _n( '%s scheduled post', '%s scheduled posts', $num_posts->future ), number_format_i18n( $num_posts->future ) ).'</a>';	}	if ( current_user_can('publish_posts') && !empty($num_posts->pending) ) {		$pending_text = sprintf( _n( 'There is <a href="%1$s">%2$s post</a> pending your review.', 'There are <a href="%1$s">%2$s posts</a> pending your review.', $num_posts->pending ), 'edit.php?post_status=pending', number_format_i18n( $num_posts->pending ) );	} else {		$pending_text = '';	}	*/	// Pages	$num = number_format_i18n( $num_pages->publish );	$text = _n( 'Page', 'Pages', $num_pages->publish );	if ( current_user_can( 'edit_pages' ) ) {		$num = "<a href='edit.php?post_type=page'>$num</a>";		$text = "<a href='edit.php?post_type=page'>$text</a>";	}	echo '<td class="first b b_pages">' . $num . '</td>';	echo '<td class="t pages">' . $text . '</td>';	echo '</tr><tr>';	// Categories	$num = number_format_i18n( $num_cats );	$text = _n( 'Category', 'Categories', $num_cats );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php?taxonomy=category'>$num</a>";		$text = "<a href='edit-tags.php?taxonomy=category'>$text</a>";	}	echo '<td class="first b b-cats">' . $num . '</td>';	echo '<td class="t cats">' . $text . '</td>';	echo '</tr><tr>';	// Tags	$num = number_format_i18n( $num_tags );	$text = _n( 'Tag', 'Tags', $num_tags );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php'>$num</a>";		$text = "<a href='edit-tags.php'>$text</a>";	}	echo '<td class="first b b-tags">' . $num . '</td>';	echo '<td class="t tags">' . $text . '</td>';	echo "</tr>";	do_action('right_now_content_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="table table_discussion">';	echo "\n\t".'<p class="sub">' . __('Discussion') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Total Comments	$num = '<span class="total-count">' . number_format_i18n($num_comm->total_comments) . '</span>';	$text = _n( 'Comment', 'Comments', $num_comm->total_comments );	if ( current_user_can( 'moderate_comments' ) ) {		$num = '<a href="edit-comments.php">' . $num . '</a>';		$text = '<a href="edit-comments.php">' . $text . '</a>';	}	echo '<td class="b b-comments">' . $num . '</td>';	echo '<td class="last t comments">' . $text . '</td>';	echo '</tr><tr>';	// Approved Comments	$num = '<span class="approved-count">' . number_format_i18n($num_comm->approved) . '</span>';	$text = _nx( 'Approved', 'Approved', $num_comm->approved, 'Right Now' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=approved'>$num</a>";		$text = "<a class='approved' href='edit-comments.php?comment_status=approved'>$text</a>";	}	echo '<td class="b b_approved">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Pending Comments	$num = '<span class="pending-count">' . number_format_i18n($num_comm->moderated) . '</span>';	$text = _n( 'Pending', 'Pending', $num_comm->moderated );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=moderated'>$num</a>";		$text = "<a class='waiting' href='edit-comments.php?comment_status=moderated'>$text</a>";	}	echo '<td class="b b-waiting">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Spam Comments	$num = number_format_i18n($num_comm->spam);	$text = _nx( 'Spam', 'Spam', $num_comm->spam, 'comment' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=spam'><span class='spam-count'>$num</span></a>";		$text = "<a class='spam' href='edit-comments.php?comment_status=spam'>$text</a>";	}	echo '<td class="b b-spam">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>";	do_action('right_now_table_end');	do_action('right_now_discussion_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="versions">';	$ct = current_theme_info();	echo "\n\t<p>";	if ( !empty($wp_registered_sidebars) ) {		$sidebars_widgets = wp_get_sidebars_widgets();		$num_widgets = 0;		foreach ( (array) $sidebars_widgets as $k => $v ) {			if ( 'wp_inactive_widgets' == $k )				continue;			if ( is_array($v) )				$num_widgets = $num_widgets + count($v);		}		$num = number_format_i18n( $num_widgets );		$switch_themes = $ct->title;		if ( current_user_can( 'switch_themes') ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			$switch_themes = '<a href="themes.php">' . $switch_themes . '</a>';		}		if ( current_user_can( 'edit_theme_options' ) ) {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widget</a></span>', 'Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widgets</a></span>', $num_widgets), $switch_themes, $num);		} else {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b">%2$s Widget</span>', 'Theme <span class="b">%1$s</span> with <span class="b">%2$s Widgets</span>', $num_widgets), $switch_themes, $num);		}	} else {		if ( current_user_can( 'switch_themes' ) ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			printf( __('Theme <span class="b"><a href="themes.php">%1$s</a></span>'), $ct->title );		} else {			printf( __('Theme <span class="b">%1$s</span>'), $ct->title );		}	}	echo '</p>';	update_right_now_message();	echo "\n\t".'<br class="clear" /></div>';	do_action( 'rightnow_end' );	do_action( 'activity_box_end' );}function wp_dashboard_quick_press_output() {	global $post_ID;	$drafts = false;	if ( 'post' === strtolower( $_SERVER['REQUEST_METHOD'] ) && isset( $_POST['action'] ) && 0 === strpos( $_POST['action'], 'post-quickpress' ) && (int) $_POST['post_ID'] ) {		$view = get_permalink( $_POST['post_ID'] );		$edit = esc_url( get_edit_post_link( $_POST['post_ID'] ) );		if ( 'post-quickpress-publish' == $_POST['action'] ) {			if ( current_user_can('publish_posts') )				printf( '<div class="updated"><p>' . __( 'Post published. <a href="%s">View post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( $view ), $edit );			else				printf( '<div class="updated"><p>' . __( 'Post submitted. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );		} else {			printf( '<div class="updated"><p>' . __( 'Draft saved. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );			$drafts_query = new WP_Query( array(				'post_type' => 'post',				'post_status' => 'draft',				'author' => $GLOBALS['current_user']->ID,				'posts_per_page' => 1,				'orderby' => 'modified',				'order' => 'DESC'			) );			if ( $drafts_query->posts )				$drafts =& $drafts_query->posts;		}		printf('<p class="textright">' . __('You can also try %s, easy blogging from anywhere on the Web.') . '</p>', '<a href="' . esc_url( admin_url( 'tools.php' ) ) . '">' . __('Press This') . '</a>' );		$_REQUEST = array(); // hack for get_default_post_to_edit()	}	/* Check if a new auto-draft (= no new post_ID) is needed or if the old can be used */	$last_post_id = (int) get_user_option( 'dashboard_quick_press_last_post_id' ); // Get the last post_ID	if ( $last_post_id ) {		$post = get_post( $last_post_id );		if ( empty( $post ) || $post->post_status != 'auto-draft' ) { // auto-draft doesn't exists anymore			$post = get_default_post_to_edit('post', true);			update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID		} else {			$post->post_title = ''; // Remove the auto draft title		}	} else {		$post = get_default_post_to_edit('post', true);		update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID	}	$post_ID = (int) $post->ID;?>	<form name="post" action="<?php echo esc_url( admin_url( 'post.php' ) ); ?>" method="post" id="quick-press">		<h4 id="quick-post-title"><label for="title"><?php _e('Title') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="post_title" id="title" tabindex="1" autocomplete="off" value="<?php echo esc_attr( $post->post_title ); ?>" />		</div>		<?php if ( current_user_can( 'upload_files' ) ) : ?>		<div id="media-buttons" class="hide-if-no-js">			<?php do_action( 'media_buttons' ); ?>		</div>		<?php endif; ?>		<h4 id="content-label"><label for="content"><?php _e('Content') ?></label></h4>		<div class="textarea-wrap">			<textarea name="content" id="content" class="mceEditor" rows="3" cols="15" tabindex="2"><?php echo $post->post_content; ?></textarea>		</div>		<script type="text/javascript">edCanvas = document.getElementById('content');edInsertContent = null;</script>		<h4><label for="tags-input"><?php _e('Tags') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="tags_input" id="tags-input" tabindex="3" value="<?php echo get_tags_to_edit( $post->ID ); ?>" />		</div>		<p class="submit">			<input type="hidden" name="action" id="quickpost-action" value="post-quickpress-save" />			<input type="hidden" name="quickpress_post_ID" value="<?php echo $post_ID; ?>" />			<input type="hidden" name="post_type" value="post" />			<?php wp_nonce_field('add-post'); ?>			<input type="submit" name="save" id="save-post" class="button" tabindex="4" value="<?php esc_attr_e('Save Draft'); ?>" />			<input type="reset" value="<?php esc_attr_e( 'Reset' ); ?>" class="button" />			<span id="publishing-action">				<input type="submit" name="publish" id="publish" accesskey="p" tabindex="5" class="button-primary" value="<?php current_user_can('publish_posts') ? esc_attr_e('Publish') : esc_attr_e('Submit for Review'); ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" />			</span>			<br class="clear" />		</p>	</form><?php	if ( $drafts )		wp_dashboard_recent_drafts( $drafts );}function wp_dashboard_quick_press() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_recent_drafts( $drafts = false ) {	if ( !$drafts ) {		$drafts_query = new WP_Query( array(			'post_type' => 'post',			'post_status' => 'draft',			'author' => $GLOBALS['current_user']->ID,			'posts_per_page' => 5,			'orderby' => 'modified',			'order' => 'DESC'		) );		$drafts =& $drafts_query->posts;	}	if ( $drafts && is_array( $drafts ) ) {		$list = array();		foreach ( $drafts as $draft ) {			$url = get_edit_post_link( $draft->ID );			$title = _draft_or_post_title( $draft->ID );			$item = "<h4><a href='$url' title='" . sprintf( __( 'Edit &#8220;%s&#8221;' ), esc_attr( $title ) ) . "'>" . esc_html($title) . "</a> <abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'>" . get_the_time( get_option( 'date_format' ), $draft ) . '</abbr></h4>';			if ( $the_content = preg_split( '#\s#', strip_tags( $draft->post_content ), 11, PREG_SPLIT_NO_EMPTY ) )				$item .= '<p>' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 < count( $the_content ) ? '&hellip;' : '' ) . '</p>';			$list[] = $item;		}?>	<ul>		<li><?php echo join( "</li>\n<li>", $list ); ?></li>	</ul>	<p class="textright"><a href="edit.php?post_status=draft" class="button"><?php _e('View all'); ?></a></p><?php	} else {		_e('There are no drafts at the moment');	}}/** * Display recent comments dashboard widget content. * * @since unknown */function wp_dashboard_recent_comments() {	global $wpdb;	if ( current_user_can('edit_posts') )		$allowed_states = array('0', '1');	else		$allowed_states = array('1');	// Select all comment types and filter out spam later for better query performance.	$comments = array();	$start = 0;	$widgets = get_option( 'dashboard_widget_options' );	if ( isset( $widgets['dashboard_recent_comments'] ) && isset( $widgets['dashboard_recent_comments']['items'] ) )		$total_items = (int) $widgets['dashboard_recent_comments']['items'];	else		$total_items = 5;	while ( count( $comments ) < 5 && $possible = $wpdb->get_results( "SELECT * FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {		foreach ( $possible as $comment ) {			if ( count( $comments ) >= $total_items )				break;			if ( in_array( $comment->comment_approved, $allowed_states ) && current_user_can( 'read_post', $comment->comment_post_ID ) )				$comments[] = $comment;		}		$start = $start + 50;	}	if ( $comments ) :?>		<div id="the-comment-list" class="list:comment"><?php		foreach ( $comments as $comment )			_wp_dashboard_recent_comments_row( $comment );?>		</div><?php		if ( current_user_can('edit_posts') ) { ?>			<p class="textright"><a href="edit-comments.php" class="button"><?php _e('View all'); ?></a></p><?php	}		wp_comment_reply( -1, false, 'dashboard', false );		wp_comment_trashnotice();	else :?>	<p><?php _e( 'No comments yet.' ); ?></p><?php	endif; // $comments;}function _wp_dashboard_recent_comments_row( &$comment, $show_date = true ) {	$GLOBALS['comment'] =& $comment;	$comment_post_url = get_edit_post_link( $comment->comment_post_ID );	$comment_post_title = strip_tags(get_the_title( $comment->comment_post_ID ));	$comment_post_link = "<a href='$comment_post_url'>$comment_post_title</a>";	$comment_link = '<a class="comment-link" href="' . esc_url(get_comment_link()) . '">#</a>';	$actions_string = '';	if ( current_user_can('edit_post', $comment->comment_post_ID) ) {		// preorder it: Approve | Reply | Edit | Spam | Trash		$actions = array(			'approve' => '', 'unapprove' => '',			'reply' => '',			'edit' => '',			'spam' => '',			'trash' => '', 'delete' => ''		);		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';		$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';		$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . __('Edit comment') . "'>". __('Edit') . '</a>';		$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$comment->comment_post_ID.'\');return false;" class="vim-r hide-if-no-js" title="'.__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';		$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '</a>';		if ( !EMPTY_TRASH_DAYS )			$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';		else			$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . __( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';		$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';			// Reply and quickedit need a hide-if-no-js span			if ( 'reply' == $action || 'quickedit' == $action )				$action .= ' hide-if-no-js';			$actions_string .= "<span class='$action'>$sep$link</span>";		}	}?>		<div id="comment-<?php echo $comment->comment_ID; ?>" <?php comment_class( array( 'comment-item', wp_get_comment_status($comment->comment_ID) ) ); ?>>			<?php if ( !$comment->comment_type || 'comment' == $comment->comment_type ) : ?>			<?php echo get_avatar( $comment, 50 ); ?>			<div class="dashboard-comment-wrap">			<h4 class="comment-meta">				<?php printf( /* translators: 1: comment author, 2: post link, 3: notification if the comment is pending */__( 'From %1$s on %2$s%3$s' ),					'<cite class="comment-author">' . get_comment_author_link() . '</cite>', $comment_post_link.' '.$comment_link, ' <span class="approve">' . __( '[Pending]' ) . '</span>' ); ?>			</h4>			<?php			else :				switch ( $comment->comment_type ) :				case 'pingback' :					$type = __( 'Pingback' );					break;				case 'trackback' :					$type = __( 'Trackback' );					break;				default :					$type = ucwords( $comment->comment_type );				endswitch;				$type = esc_html( $type );			?>			<div class="dashboard-comment-wrap">			<?php /* translators: %1$s is type of comment, %2$s is link to the post */ ?>			<h4 class="comment-meta"><?php printf( _x( '%1$s on %2$s', 'dashboard' ), "<strong>$type</strong>", $comment_post_link." ".$comment_link ); ?></h4>			<p class="comment-author"><?php comment_author_link(); ?></p>			<?php endif; // comment_type ?>			<blockquote><p><?php comment_excerpt(); ?></p></blockquote>			<p class="row-actions"><?php echo $actions_string; ?></p>			</div>		</div><?php}/** * The recent comments dashboard widget control. * * @since 3.0.0 */function wp_dashboard_recent_comments_control() {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options['dashboard_recent_comments']) )		$widget_options['dashboard_recent_comments'] = array();	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-recent-comments']) ) {		$number = (int) stripslashes($_POST['widget-recent-comments']['items']);		if ( $number < 1 || $number > 30 )			$number = 5;		$widget_options['dashboard_recent_comments']['items'] = $number;		update_option( 'dashboard_widget_options', $widget_options );	}	$number = isset( $widget_options['dashboard_recent_comments']['items'] ) ? (int) $widget_options['dashboard_recent_comments']['items'] : '';	echo '<p><label for="comments-number">' . __('Number of comments to show:') . '</label>';	echo '<input id="comments-number" name="widget-recent-comments[items]" type="text" value="' . $number . '" size="3" /> <small>' . __( '(at most 30)' ) . '</small></p>';}function wp_dashboard_incoming_links() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display incoming links dashboard widget content. * * @since unknown */function wp_dashboard_incoming_links_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_incoming_links'], EXTR_SKIP );	$rss = fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p>';		}		return;	}	if ( !$rss->get_item_quantity() ) {		echo '<p>' . __('This dashboard widget queries <a href="http://blogsearch.google.com/">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.') . "</p>\n";		$rss->__destruct();		unset($rss);		return;	}	echo "<ul>\n";	if ( !isset($items) )		$items = 10;	foreach ( $rss->get_items(0, $items) as $item ) {		$publisher = '';		$site_link = '';		$link = '';		$content = '';		$date = '';		$link = esc_url( strip_tags( $item->get_link() ) );		$author = $item->get_author();		if ( $author ) {			$site_link = esc_url( strip_tags( $author->get_link() ) );			if ( !$publisher = esc_html( strip_tags( $author->get_name() ) ) )				$publisher = __( 'Somebody' );		} else {		  $publisher = __( 'Somebody' );		}		if ( $site_link )			$publisher = "<a href='$site_link'>$publisher</a>";		else			$publisher = "<strong>$publisher</strong>";		$content = $item->get_content();		$content = wp_html_excerpt($content, 50) . ' ...';		if ( $link )			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here <a href="%2$s">saying</a>, "%3$s"' );		else			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here saying, "%3$s"' );		if ( $show_date ) {			if ( $show_author || $show_summary )				/* translators: incoming links feed, %4$s is the date */				$text .= ' ' . __( 'on %4$s' );			$date = esc_html( strip_tags( $item->get_date() ) );			$date = strtotime( $date );			$date = gmdate( get_option( 'date_format' ), $date );		}		echo "\t<li>" . sprintf( $text, $publisher, $link, $content, $date ) . "</li>\n";	}	echo "</ul>\n";	$rss->__destruct();	unset($rss);}function wp_dashboard_incoming_links_control() {	wp_dashboard_rss_control( 'dashboard_incoming_links', array( 'title' => false, 'show_summary' => false, 'show_author' => false ) );}function wp_dashboard_primary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_primary_control() {	wp_dashboard_rss_control( 'dashboard_primary' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param int $widget_id */function wp_dashboard_rss_output( $widget_id ) {	$widgets = get_option( 'dashboard_widget_options' );	echo '<div class="rss-widget">';	wp_widget_rss_output( $widgets[$widget_id] );	echo "</div>";}function wp_dashboard_secondary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_secondary_control() {	wp_dashboard_rss_control( 'dashboard_secondary' );}/** * Display secondary dashboard RSS widget feed. * * @since unknown * * @return unknown */function wp_dashboard_secondary_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_secondary'], EXTR_SKIP );	$rss = @fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<div class="rss-widget"><p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p></div>';		}	} elseif ( !$rss->get_item_quantity() ) {		$rss->__destruct();		unset($rss);		return false;	} else {		echo '<div class="rss-widget">';		wp_widget_rss_output( $rss, $widgets['dashboard_secondary'] );		echo '</div>';		$rss->__destruct();		unset($rss);	}}function wp_dashboard_plugins() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display plugins most popular, newest plugins, and recently updated widget text. * * @since unknown */function wp_dashboard_plugins_output() {	$popular = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/popular/' );	$new     = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/new/' );	$updated = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/updated/' );	if ( false === $plugin_slugs = get_transient( 'plugin_slugs' ) ) {		$plugin_slugs = array_keys( get_plugins() );		set_transient( 'plugin_slugs', $plugin_slugs, 86400 );	}	foreach ( array( 'popular' => __('Most Popular'), 'new' => __('Newest Plugins'), 'updated' => __('Recently Updated') ) as $feed => $label ) {		if ( is_wp_error($$feed) || !$$feed->get_item_quantity() )			continue;		$items = $$feed->get_items(0, 5);		// Pick a random, non-installed plugin		while ( true ) {			// Abort this foreach loop iteration if there's no plugins left of this type			if ( 0 == count($items) )				continue 2;			$item_key = array_rand($items);			$item = $items[$item_key];			list($link, $frag) = explode( '#', $item->get_link() );			$link = esc_url($link);			if ( preg_match( '|/([^/]+?)/?$|', $link, $matches ) )				$slug = $matches[1];			else {				unset( $items[$item_key] );				continue;			}			// Is this random plugin's slug already installed? If so, try again.			reset( $plugin_slugs );			foreach ( $plugin_slugs as $plugin_slug ) {				if ( $slug == substr( $plugin_slug, 0, strlen( $slug ) ) ) {					unset( $items[$item_key] );					continue 2;				}			}			// If we get to this point, then the random plugin isn't installed and we can stop the while().			break;		}		// Eliminate some common badly formed plugin descriptions		while ( ( null !== $item_key = array_rand($items) ) && false !== strpos( $items[$item_key]->get_description(), 'Plugin Name:' ) )			unset($items[$item_key]);		if ( !isset($items[$item_key]) )			continue;		// current bbPress feed item titles are: user on "topic title"		if ( preg_match( '/&quot;(.*)&quot;/s', $item->get_title(), $matches ) )			$title = $matches[1];		else // but let's make it forward compatible if things change			$title = $item->get_title();		$title = esc_html( $title );		$description = esc_html( strip_tags(@html_entity_decode($item->get_description(), ENT_QUOTES, get_option('blog_charset'))) );		$ilink = wp_nonce_url('plugin-install.php?tab=plugin-information&plugin=' . $slug, 'install-plugin_' . $slug) .							'&amp;TB_iframe=true&amp;width=600&amp;height=800';		echo "<h4>$label</h4>\n";		echo "<h5><a href='$link'>$title</a></h5>&nbsp;<span>(<a href='$ilink' class='thickbox' title='$title'>" . __( 'Install' ) . "</a>)</span>\n";		echo "<p>$description</p>\n";		$$feed->__destruct();		unset($$feed);	}}/** * Checks to see if all of the feed url in $check_urls are cached. * * If $check_urls is empty, look for the rss feed url found in the dashboard * widget optios of $widget_id. If cached, call $callback, a function that * echoes out output for this widget. If not cache, echo a "Loading..." stub * which is later replaced by AJAX call (see top of /wp-admin/index.php) * * @since unknown * * @param int $widget_id * @param callback $callback * @param array $check_urls RSS feeds * @return bool False on failure. True on success. */function wp_dashboard_cached_rss_widget( $widget_id, $callback, $check_urls = array() ) {	$loading = '<p class="widget-loading">' . __( 'Loading&#8230;' ) . '</p>';	if ( empty($check_urls) ) {		$widgets = get_option( 'dashboard_widget_options' );		if ( empty($widgets[$widget_id]['url']) ) {			echo $loading;			return false;		}		$check_urls = array( $widgets[$widget_id]['url'] );	}	include_once ABSPATH . WPINC . '/class-feed.php';	foreach ( $check_urls as $check_url ) {		$cache = new WP_Feed_Cache_Transient('', md5($check_url), '');		if ( ! $cache->load() ) {			echo $loading;			return false;		}	}	if ( $callback && is_callable( $callback ) ) {		$args = array_slice( func_get_args(), 2 );		array_unshift( $args, $widget_id );		call_user_func_array( $callback, $args );	}	return true;}/* Dashboard Widgets Controls */// Calls widget_control callback/** * Calls widget control callback. * * @since unknown * * @param int $widget_control_id Registered Widget ID. */function wp_dashboard_trigger_widget_control( $widget_control_id = false ) {	global $wp_dashboard_control_callbacks;	if ( is_scalar($widget_control_id) && $widget_control_id && isset($wp_dashboard_control_callbacks[$widget_control_id]) && is_callable($wp_dashboard_control_callbacks[$widget_control_id]) ) {		call_user_func( $wp_dashboard_control_callbacks[$widget_control_id], '', array( 'id' => $widget_control_id, 'callback' => $wp_dashboard_control_callbacks[$widget_control_id] ) );	}}/** * The RSS dashboard widget control. * * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data * from RSS-type widgets. * * @since unknown * * @param string widget_id * @param array form_inputs */function wp_dashboard_rss_control( $widget_id, $form_inputs = array() ) {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options[$widget_id]) )		$widget_options[$widget_id] = array();	$number = 1; // Hack to use wp_widget_rss_form()	$widget_options[$widget_id]['number'] = $number;	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-rss'][$number]) ) {		$_POST['widget-rss'][$number] = stripslashes_deep( $_POST['widget-rss'][$number] );		$widget_options[$widget_id] = wp_widget_rss_process( $_POST['widget-rss'][$number] );		// title is optional.  If black, fill it if possible		if ( !$widget_options[$widget_id]['title'] && isset($_POST['widget-rss'][$number]['title']) ) {			$rss = fetch_feed($widget_options[$widget_id]['url']);			if ( is_wp_error($rss) ) {				$widget_options[$widget_id]['title'] = htmlentities(__('Unknown Feed'));			} else {				$widget_options[$widget_id]['title'] = htmlentities(strip_tags($rss->get_title()));				$rss->__destruct();				unset($rss);			}		}		update_option( 'dashboard_widget_options', $widget_options );	}	wp_widget_rss_form( $widget_options[$widget_id], $form_inputs );}/** * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS). */function wp_dashboard_empty() {}?>
<?php/** * WordPress Widgets Administration API * * @package WordPress * @subpackage Administration *//** * Display list of the available widgets, either all or matching search. * * The search parameter are search terms separated by spaces. * * @since unknown * * @param string $show Optional, default is all. What to display, can be 'all', 'unused', or 'used'. * @param string $_search Optional. Search for widgets. Should be unsanitized. */function wp_list_widgets() {	global $wp_registered_widgets, $sidebars_widgets, $wp_registered_widget_controls;	$sort = $wp_registered_widgets;	usort( $sort, create_function( '$a, $b', 'return strnatcasecmp( $a["name"], $b["name"] );' ) );	$done = array();	foreach ( $sort as $widget ) {		if ( in_array( $widget['callback'], $done, true ) ) // We already showed this multi-widget			continue;		$sidebar = is_active_widget( $widget['callback'], $widget['id'], false, false );		$done[] = $widget['callback'];		if ( ! isset( $widget['params'][0] ) )			$widget['params'][0] = array();		$args = array( 'widget_id' => $widget['id'], 'widget_name' => $widget['name'], '_display' => 'template' );		if ( isset($wp_registered_widget_controls[$widget['id']]['id_base']) && isset($widget['params'][0]['number']) ) {			$id_base = $wp_registered_widget_controls[$widget['id']]['id_base'];			$args['_temp_id'] = "$id_base-__i__";			$args['_multi_num'] = next_widget_id_number($id_base);			$args['_add'] = 'multi';		} else {			$args['_add'] = 'single';			if ( $sidebar )				$args['_hide'] = '1';		}		$args = wp_list_widget_controls_dynamic_sidebar( array( 0 => $args, 1 => $widget['params'][0] ) );		call_user_func_array( 'wp_widget_control', $args );	}}/** * Show the widgets and their settings for a sidebar. * Used in the the admin widget config screen. * * @since unknown * * @param string $sidebar id slug of the sidebar */function wp_list_widget_controls( $sidebar ) {	add_filter( 'dynamic_sidebar_params', 'wp_list_widget_controls_dynamic_sidebar' );	echo "<div id='$sidebar' class='widgets-sortables'>\n";	$description = wp_sidebar_description( $sidebar );	if ( !empty( $description ) ) {		echo "<div class='sidebar-description'>\n";		echo "\t<p class='description'>$description</p>";		echo "</div>\n";	}	dynamic_sidebar( $sidebar );	echo "</div>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param array $params * @return array */function wp_list_widget_controls_dynamic_sidebar( $params ) {	global $wp_registered_widgets;	static $i = 0;	$i++;	$widget_id = $params[0]['widget_id'];	$id = isset($params[0]['_temp_id']) ? $params[0]['_temp_id'] : $widget_id;	$hidden = isset($params[0]['_hide']) ? ' style="display:none;"' : '';	$params[0]['before_widget'] = "<div id='widget-${i}_$id' class='widget'$hidden>";	$params[0]['after_widget'] = "</div>";	$params[0]['before_title'] = "%BEG_OF_TITLE%"; // deprecated	$params[0]['after_title'] = "%END_OF_TITLE%"; // deprecated	if ( is_callable( $wp_registered_widgets[$widget_id]['callback'] ) ) {		$wp_registered_widgets[$widget_id]['_callback'] = $wp_registered_widgets[$widget_id]['callback'];		$wp_registered_widgets[$widget_id]['callback'] = 'wp_widget_control';	}	return $params;}function next_widget_id_number($id_base) {	global $wp_registered_widgets;	$number = 1;	foreach ( $wp_registered_widgets as $widget_id => $widget ) {		if ( preg_match( '/' . $id_base . '-([0-9]+)$/', $widget_id, $matches ) )			$number = max($number, $matches[1]);	}	$number++;	return $number;}/** * Meta widget used to display the control form for a widget. * * Called from dynamic_sidebar(). * * @since unknown * * @param array $sidebar_args * @return array */function wp_widget_control( $sidebar_args ) {	global $wp_registered_widgets, $wp_registered_widget_controls, $sidebars_widgets;	$widget_id = $sidebar_args['widget_id'];	$sidebar_id = isset($sidebar_args['id']) ? $sidebar_args['id'] : false;	$key = $sidebar_id ? array_search( $widget_id, $sidebars_widgets[$sidebar_id] ) : '-1'; // position of widget in sidebar	$control = isset($wp_registered_widget_controls[$widget_id]) ? $wp_registered_widget_controls[$widget_id] : array();	$widget = $wp_registered_widgets[$widget_id];	$id_format = $widget['id'];	$widget_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $widget_id;	$multi_number = isset($sidebar_args['_multi_num']) ? $sidebar_args['_multi_num'] : '';	$add_new = isset($sidebar_args['_add']) ? $sidebar_args['_add'] : '';	$query_arg = array( 'editwidget' => $widget['id'] );	if ( $add_new ) {		$query_arg['addnew'] = 1;		if ( $multi_number ) {			$query_arg['num'] = $multi_number;			$query_arg['base'] = $id_base;		}	} else {		$query_arg['sidebar'] = $sidebar_id;		$query_arg['key'] = $key;	}	// We aren't showing a widget control, we're outputing a template for a mult-widget control	if ( isset($sidebar_args['_display']) && 'template' == $sidebar_args['_display'] && $widget_number ) {		// number == -1 implies a template where id numbers are replaced by a generic '__i__'		$control['params'][0]['number'] = -1;		// with id_base widget id's are constructed like {$id_base}-{$id_number}		if ( isset($control['id_base']) )			$id_format = $control['id_base'] . '-__i__';	}	$wp_registered_widgets[$widget_id]['callback'] = $wp_registered_widgets[$widget_id]['_callback'];	unset($wp_registered_widgets[$widget_id]['_callback']);	$widget_title = esc_html( strip_tags( $sidebar_args['widget_name'] ) );	$has_form = 'noform';	echo $sidebar_args['before_widget']; ?>	<div class="widget-top">	<div class="widget-title-action">		<a class="widget-action hide-if-no-js" href="#available-widgets"></a>		<a class="widget-control-edit hide-if-js" href="<?php echo esc_url( add_query_arg( $query_arg ) ); ?>"><span class="edit"><?php _e('Edit'); ?></span><span class="add"><?php _e('Add'); ?></span></a>	</div>	<div class="widget-title"><h4><?php echo $widget_title ?><span class="in-widget-title"></span></h4></div>	</div>	<div class="widget-inside">	<form action="" method="post">	<div class="widget-content"><?php	if ( isset($control['callback']) )		$has_form = call_user_func_array( $control['callback'], $control['params'] );	else		echo "\t\t<p>" . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($id_format); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="widget-width" class="widget-width" value="<?php if (isset( $control['width'] )) echo esc_attr($control['width']); ?>" />	<input type="hidden" name="widget-height" class="widget-height" value="<?php if (isset( $control['height'] )) echo esc_attr($control['height']); ?>" />	<input type="hidden" name="widget_number" class="widget_number" value="<?php echo esc_attr($widget_number); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" />	<input type="hidden" name="add_new" class="add_new" value="<?php echo esc_attr($add_new); ?>" />	<div class="widget-control-actions">		<div class="alignleft">		<a class="widget-control-remove" href="#remove"><?php _e('Delete'); ?></a> |		<a class="widget-control-close" href="#close"><?php _e('Close'); ?></a>		</div>		<div class="alignright<?php if ( 'noform' === $has_form ) echo ' widget-control-noform'; ?>">		<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback " title="" alt="" />		<input type="submit" name="savewidget" class="button-primary widget-control-save" value="<?php esc_attr_e('Save'); ?>" />		</div>		<br class="clear" />	</div>	</form>	</div>	<div class="widget-description"><?php echo ( $widget_description = wp_widget_description($widget_id) ) ? "$widget_description\n" : "$widget_title\n"; ?>	</div><?php	echo $sidebar_args['after_widget'];	return $sidebar_args;}
<?php/** * WordPress Export Administration Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('export') )	wp_die(__('You do not have sufficient permissions to export the content of this site.'));/** Load WordPress export API */require_once('./includes/export.php');$title = __('Export');add_contextual_help($current_screen,	'<p>' . __('You can export a file of your site&#8217;s content in order to import it into another installation or platform. The export file will be an XML file format called WXR. Posts, pages, comments, custom fields, categories, and tags can be included. You can set filters to have the WXR file only include a certain date, author, category, tag, all posts or all pages, certain publishing statuses.') . '</p>' .	'<p>' . __('Once generated, your WXR file can be imported by another WordPress site or by another blogging platform able to access this format.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Export_SubPanel" target="_blank">Export Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( isset( $_GET['download'] ) ) {		$author = isset($_GET['author']) ? $_GET['author'] : 'all';		$taxonomy = array();		foreach ( get_taxonomies( array( 'show_ui' => true ) ) as $tax )			$taxonomy[ $tax ] = ! empty( $_GET['taxonomy'][ $tax ] ) ? $_GET['taxonomy'][ $tax ] : 'all';		$post_type = isset($_GET['post_type']) ? stripslashes_deep($_GET['post_type']) : 'all';		$status = isset($_GET['status']) ? stripslashes_deep($_GET['status']) : 'all';		$mm_start = isset($_GET['mm_start']) ? $_GET['mm_start'] : 'all';		$mm_end = isset($_GET['mm_end']) ? $_GET['mm_end'] : 'all';		if( $mm_start != 'all' ) {			$start_date = sprintf( "%04d-%02d-%02d", substr( $mm_start, 0, 4 ), substr( $mm_start, 5, 2 ), 1 );		} else {			$start_date = 'all';		}		if( $mm_end != 'all' ) {			$end_date = sprintf( "%04d-%02d-%02d", substr( $mm_end, 0, 4 ), substr( $mm_end, 5, 2 ), 1 );		} else {			$end_date = 'all';		}	export_wp( array( 'author' => $author, 'taxonomy' => $taxonomy, 'post_type' => $post_type, 'post_status' => $status, 'start_date' => $start_date, 'end_date' => $end_date ) );	die();}require_once ('admin-header.php');$dateoptions = $edateoptions = '';$types = "'" . implode("', '", get_post_types( array( 'public' => true, 'can_export' => true ), 'names' )) . "'";$stati = "'" . implode("', '", get_post_stati( array( 'internal' => false ), 'names' )) . "'";if ( $monthyears = $wpdb->get_results("SELECT DISTINCT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, YEAR(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `eyear`, MONTH(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `emonth` FROM $wpdb->posts WHERE post_type IN ($types) AND post_status IN ($stati) ORDER BY post_date ASC ") ) {	foreach ( $monthyears as $k => $monthyear )		$monthyears[$k]->lmonth = $wp_locale->get_month( $monthyear->month, 2 );	for( $s = 0, $e = count( $monthyears ) - 1; $e >= 0; $s++, $e-- ) {		$dateoptions .= "\t<option value=\"" . $monthyears[$s]->year . '-' . zeroise( $monthyears[$s]->month, 2 ) . '">' . $monthyears[$s]->lmonth . ' ' . $monthyears[$s]->year . "</option>\n";		$edateoptions .= "\t<option value=\"" . $monthyears[$e]->eyear . '-' . zeroise( $monthyears[$e]->emonth, 2 ) . '">' . $monthyears[$e]->lmonth . ' ' . $monthyears[$e]->year . "</option>\n";	}}?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><p><?php _e('When you click the button below WordPress will create an XML file for you to save to your computer.'); ?></p><p><?php _e('This format, which we call WordPress eXtended RSS or WXR, will contain your posts, pages, comments, custom fields, categories, and tags.'); ?></p><p><?php _e('Once you&#8217;ve saved the download file, you can use the Import function on another WordPress site to import this site.'); ?></p><form action="" method="get"><h3><?php _e('Filters'); ?></h3><table class="form-table"><tr><th><label for="mm_start"><?php _e('Start Date'); ?></label></th><td><select name="mm_start" id="mm_start">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $dateoptions; ?></select></td></tr><tr><th><label for="mm_end" id="mm_end"><?php _e('End Date'); ?></label></th><td><select name="mm_end" id="mm_end">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $edateoptions; ?></select></td></tr><tr><th><label for="author"><?php _e('Authors'); ?></label></th><td><select name="author" id="author"><option value="all" selected="selected"><?php _e('All Authors'); ?></option><?php$authors = $wpdb->get_results( "SELECT DISTINCT u.id, u.display_name FROM $wpdb->users u INNER JOIN $wpdb->posts p WHERE u.id = p.post_author ORDER BY u.display_name" );foreach ( (array) $authors as $author ) {	echo "<option value='{$author->id}'>{$author->display_name}</option>\n";}?></select></td></tr><?php foreach ( get_taxonomies( array( 'show_ui' => true ), 'objects' ) as $tax_obj ) {	$term_dropdown = wp_dropdown_categories( array( 'taxonomy' => $tax_obj->name, 'hide_if_empty' => true, 'show_option_all' => __( 'All Terms' ), 'name' => 'taxonomy[' . $tax_obj->name . ']', 'id' => 'taxonomy-' . $tax_obj->name, 'class' => '', 'echo' => false ) );	if ( $term_dropdown )		echo '<tr><th><label for="taxonomy-' . $tax_obj->name . '">' . $tax_obj->labels->name . '</label></th><td>' . $term_dropdown . '</td></tr>';}?><tr><th><label for="post_type"><?php _e('Content Types'); ?></label></th><td><select name="post_type" id="post_type">	<option value="all" selected="selected"><?php _e('All Content'); ?></option>	<?php foreach ( get_post_types( array( 'public' => true, 'can_export' => true ), 'objects' ) as $post_type_obj ) { ?>		<option value="<?php echo $post_type_obj->name; ?>"><?php echo $post_type_obj->labels->name; ?></option>	<?php } ?></select></td></tr><tr><th><label for="status"><?php _e('Statuses'); ?></label></th><td><select name="status" id="status">	<option value="all" selected="selected"><?php _e('All Statuses'); ?></option><?php foreach ( get_post_stati( array( 'internal' => false ), 'objects' ) as $post_status_obj ) { ?>	<option value="<?php echo $post_status_obj->name; ?>"><?php echo $post_status_obj->label; ?></option><?php } ?></select></td></tr></table><p class="submit"><input type="submit" name="submit" class="button" value="<?php esc_attr_e('Download Export File'); ?>" /><input type="hidden" name="download" value="true" /></p></form></div><?phpinclude ('admin-footer.php');?>
<?php/** * Writing settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Writing Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can submit content in several different ways; this screen holds the settings for all of them. The top section controls the editor within these administration screens, while the rest control external publishing methods. For more information on any of these methods, use the documentation links below.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Writing_SubPanel" target="_blank">Writing Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('writing'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="default_post_edit_rows"> <?php _e('Size of the post box') ?></label></th><td><input name="default_post_edit_rows" type="text" id="default_post_edit_rows" value="<?php form_option('default_post_edit_rows'); ?>" class="small-text" /><?php _e('lines') ?></td></tr><tr valign="top"><th scope="row"><?php _e('Formatting') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Formatting') ?></span></legend><label for="use_smilies"><input name="use_smilies" type="checkbox" id="use_smilies" value="1" <?php checked('1', get_option('use_smilies')); ?> /><?php _e('Convert emoticons like <code>:-)</code> and <code>:-P</code> to graphics on display') ?></label><br /><label for="use_balanceTags"><input name="use_balanceTags" type="checkbox" id="use_balanceTags" value="1" <?php checked('1', get_option('use_balanceTags')); ?> /> <?php _e('WordPress should correct invalidly nested XHTML automatically') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_category"><?php _e('Default Post Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_category', 'orderby' => 'name', 'selected' => get_option('default_category'), 'hierarchical' => true));?></td></tr><tr valign="top"><th scope="row"><label for="default_link_category"><?php _e('Default Link Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_link_category', 'orderby' => 'name', 'selected' => get_option('default_link_category'), 'hierarchical' => true, 'taxonomy' => 'link_category'));?></td></tr><?php do_settings_fields('writing', 'default'); ?></table><h3 class="title"><?php _e('Press This') ?></h3><p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p><p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p><p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p><p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p><?php if ( apply_filters( 'enable_post_by_email_configuration', true ) ) { ?><h3><?php _e('Post via e-mail') ?></h3><p><?php printf(__('To post to WordPress by e-mail you must set up a secret e-mail account with POP3 access. Any mail received at this address will be posted, so it&#8217;s a good idea to keep this address very secret. Here are three random strings you could use: <kbd>%s</kbd>, <kbd>%s</kbd>, <kbd>%s</kbd>.'), wp_generate_password(8, false), wp_generate_password(8, false), wp_generate_password(8, false)) ?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="mailserver_url"><?php _e('Mail Server') ?></label></th><td><input name="mailserver_url" type="text" id="mailserver_url" value="<?php form_option('mailserver_url'); ?>" class="regular-text code" /><label for="mailserver_port"><?php _e('Port') ?></label><input name="mailserver_port" type="text" id="mailserver_port" value="<?php form_option('mailserver_port'); ?>" class="small-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_login"><?php _e('Login Name') ?></label></th><td><input name="mailserver_login" type="text" id="mailserver_login" value="<?php form_option('mailserver_login'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_pass"><?php _e('Password') ?></label></th><td><input name="mailserver_pass" type="text" id="mailserver_pass" value="<?php form_option('mailserver_pass'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="default_email_category"><?php _e('Default Mail Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_email_category', 'orderby' => 'name', 'selected' => get_option('default_email_category'), 'hierarchical' => true));?></td></tr><?php do_settings_fields('writing', 'post_via_email'); ?></table><?php } ?><h3><?php _e('Remote Publishing') ?></h3><p><?php printf(__('To post to WordPress from a desktop blogging client or remote website that uses the Atom Publishing Protocol or one of the XML-RPC publishing interfaces you must enable them below.')) ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Atom Publishing Protocol') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Atom Publishing Protocol') ?></span></legend><label for="enable_app"><input name="enable_app" type="checkbox" id="enable_app" value="1" <?php checked('1', get_option('enable_app')); ?> /><?php _e('Enable the Atom Publishing Protocol.') ?></label><br /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('XML-RPC') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('XML-RPC') ?></span></legend><label for="enable_xmlrpc"><input name="enable_xmlrpc" type="checkbox" id="enable_xmlrpc" value="1" <?php checked('1', get_option('enable_xmlrpc')); ?> /><?php _e('Enable the WordPress, Movable Type, MetaWeblog and Blogger XML-RPC publishing protocols.') ?></label><br /></fieldset></td></tr><?php do_settings_fields('writing', 'remote_publishing'); ?></table><?php if ( apply_filters( 'enable_update_services_configuration', true ) ) { ?><h3><?php _e('Update Services') ?></h3><?php if ( get_option('blog_public') ) : ?><p><label for="ping_sites"><?php _e('When you publish a new post, WordPress automatically notifies the following site update services. For more about this, see <a href="http://codex.wordpress.org/Update_Services">Update Services</a> on the Codex. Separate multiple service <abbr title="Universal Resource Locator">URL</abbr>s with line breaks.') ?></label></p><textarea name="ping_sites" id="ping_sites" class="large-text code" rows="3"><?php form_option('ping_sites'); ?></textarea><?php else : ?>	<p><?php printf(__('WordPress is not notifying any <a href="http://codex.wordpress.org/Update_Services">Update Services</a> because of your site&#8217;s <a href="%s">privacy settings</a>.'), 'options-privacy.php'); ?></p><?php endif; ?><?php } // multisite ?><?php do_settings_sections('writing'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Install theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_themes') )	wp_die(__('You do not have sufficient permissions to install themes on this site.'));include(ABSPATH . 'wp-admin/includes/theme-install.php');$title = __('Install Themes');$parent_file = 'themes.php';$submenu_file = 'themes.php';wp_reset_vars( array('tab', 'paged') );wp_enqueue_style( 'theme-install' );wp_enqueue_script( 'theme-install' );add_thickbox();wp_enqueue_script( 'theme-preview' );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Theme Installer');//$tabs['popular']  = _x('Popular','Theme Installer');$tabs['new']      = _x('Newest','Theme Installer');$tabs['updated']  = _x('Recently Updated','Theme Installer');$nonmenu_tabs = array('theme-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_themes_tabs', $tabs );$nonmenu_tabs = apply_filters('install_themes_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;$body_id = $tab;do_action('install_themes_pre_' . $tab); //Used to override the general interface, Eg, install or theme information.$help = '<p>' . sprintf(__('You can find additional themes for your site by using the Theme Browser/Installer on this screen, which will display themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. These themes are designed and developed by third parties, are available free of charge, and are licensed under the GNU General Public License, version 2, just like WordPress.'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p>' . __('You can Search for themes by keyword, author, or tag, or can get more specific and search by criteria listed in the feature filter. Alternately, you can browse the themes that are Featured, Newest, or Recently Updated. When you find a theme you like, you can preview it or install it.') . '</p>';$help .= '<p>' . __('You can Upload a theme manually if you have already downloaded its ZIP archive onto your computer (make sure it is from a trusted and original source). You can also do it the old-fashioned way and copy a downloaded theme&#8217;s folder via FTP into your <code>/wp-content/themes</code> directory.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes#Adding_New_Themes" target="_blank">Documentation on Adding New Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab"><?php echo esc_html_x('Manage Themes', 'theme'); ?></a><a href="theme-install.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('theme-install.php?tab='. $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_themes_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Administration Media API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_tabs() {	$_default_tabs = array(		'type' => __('From Computer'), // handler action suffix => tab text		'type_url' => __('From URL'),		'gallery' => __('Gallery'),		'library' => __('Media Library')	);	return apply_filters('media_upload_tabs', $_default_tabs);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tabs * @return unknown */function update_gallery_tab($tabs) {	global $wpdb;	if ( !isset($_REQUEST['post_id']) ) {		unset($tabs['gallery']);		return $tabs;	}	$post_id = intval($_REQUEST['post_id']);	if ( $post_id )		$attachments = intval( $wpdb->get_var( $wpdb->prepare( "SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d", $post_id ) ) );	if ( empty($attachments) ) {		unset($tabs['gallery']);		return $tabs;	}	$tabs['gallery'] = sprintf(__('Gallery (%s)'), "<span id='attachments-count'>$attachments</span>");	return $tabs;}add_filter('media_upload_tabs', 'update_gallery_tab');/** * {@internal Missing Short Description}} * * @since unknown */function the_media_upload_tabs() {	global $redir_tab;	$tabs = media_upload_tabs();	if ( !empty($tabs) ) {		echo "<ul id='sidemenu'>\n";		if ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) )			$current = $redir_tab;		elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) )			$current = $_GET['tab'];		else			$current = apply_filters('media_upload_default_tab', 'type');		foreach ( $tabs as $callback => $text ) {			$class = '';			if ( $current == $callback )				$class = " class='current'";			$href = add_query_arg(array('tab'=>$callback, 's'=>false, 'paged'=>false, 'post_mime_type'=>false, 'm'=>false));			$link = "<a href='" . esc_url($href) . "'$class>$text</a>";			echo "\t<li id='" . esc_attr("tab-$callback") . "'>$link</li>\n";		}		echo "</ul>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $rel * @param unknown_type $size * @return unknown */function get_image_send_to_editor($id, $caption, $title, $align, $url='', $rel = false, $size='medium', $alt = '') {	$html = get_image_tag($id, $alt, $title, $align, $size);	$rel = $rel ? ' rel="attachment wp-att-' . esc_attr($id).'"' : '';	if ( $url )		$html = '<a href="' . esc_attr($url) . "\"$rel>$html</a>";	$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );	return $html;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $size * @return unknown */function image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {	if ( empty($caption) || apply_filters( 'disable_captions', '' ) )		return $html;	$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';	if ( ! preg_match( '/width="([0-9]+)/', $html, $matches ) )		return $html;	$width = $matches[1];	$html = preg_replace( '/(class=["\'][^\'"]*)align(none|left|right|center)\s?/', '$1', $html );	if ( empty($align) )		$align = 'none';	$shcode = '[caption id="' . $id . '" align="align' . $align	. '" width="' . $width . '" caption="' . addslashes($caption) . '"]' . $html . '[/caption]';	return apply_filters( 'image_add_caption_shortcode', $shcode, $html );}add_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html */function media_send_to_editor($html) {?><script type="text/javascript">/* <![CDATA[ */var win = window.dialogArguments || opener || parent || top;win.send_to_editor('<?php echo addslashes($html); ?>');/* ]]> */</script><?php	exit;}/** * {@internal Missing Short Description}} * * This handles the file upload POST itself, creating the attachment post. * * @since unknown * * @param string $file_id Index into the {@link $_FILES} array of the upload * @param int $post_id The post ID the media is associated with * @param array $post_data allows you to overwrite some of the attachment * @param array $overrides allows you to override the {@link wp_handle_upload()} behavior * @return int the ID of the attachment */function media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {	$time = current_time('mysql');	if ( $post = get_post($post_id) ) {		if ( substr( $post->post_date, 0, 4 ) > 0 )			$time = $post->post_date;	}	$name = $_FILES[$file_id]['name'];	$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$name_parts = pathinfo($name);	$name = trim( substr( $name, 0, -(1 + strlen($name_parts['extension'])) ) );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = $name;	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the data	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );	}	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file_array * @param unknown_type $post_id * @param unknown_type $desc * @param unknown_type $post_data * @return unknown */function media_handle_sideload($file_array, $post_id, $desc = null, $post_data = array()) {	$overrides = array('test_form'=>false);	$file = wp_handle_sideload($file_array, $overrides);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = preg_replace('/\.[^.]+$/', '', basename($file));	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	$title = @$desc;	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the attachment metadata	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		return $url;	}	return $id;}/** * {@internal Missing Short Description}} * * Wrap iframe content (produced by $content_func) in a doctype, html head/body * etc any additional function args will be passed to content_func. * * @since unknown * * @param unknown_type $content_func */function wp_iframe($content_func /* ... */) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );// Check callback name for 'media'if ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) ) || 0 === strpos( $content_func, 'media' ) )	wp_enqueue_style( 'media' );wp_enqueue_style( 'ie' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time(); ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup';//]]></script><?phpdo_action('admin_enqueue_scripts', 'media-upload-popup');do_action('admin_print_styles-media-upload-popup');do_action('admin_print_styles');do_action('admin_print_scripts-media-upload-popup');do_action('admin_print_scripts');do_action('admin_head-media-upload-popup');do_action('admin_head');if ( is_string($content_func) )	do_action( "admin_head_{$content_func}" );?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>><?php	$args = func_get_args();	$args = array_slice($args, 1);	call_user_func_array($content_func, $args);	do_action('admin_print_footer_scripts');?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html><?php}/** * {@internal Missing Short Description}} * * @since unknown */function media_buttons() {	$do_image = $do_audio = $do_video = true;	if ( is_multisite() ) {		$media_buttons = get_site_option( 'mu_media_buttons' );		if ( empty($media_buttons['image']) )			$do_image = false;		if ( empty($media_buttons['audio']) )			$do_audio = false;		if ( empty($media_buttons['video']) )			$do_video = false;	}	$out = '';	if ( $do_image )		$out .= _media_button(__('Add an Image'), 'images/media-button-image.gif?ver=20100531', 'image');	if ( $do_video )		$out .= _media_button(__('Add Video'), 'images/media-button-video.gif?ver=20100531', 'video');	if ( $do_audio )		$out .= _media_button(__('Add Audio'), 'images/media-button-music.gif?ver=20100531', 'audio');	$out .= _media_button(__('Add Media'), 'images/media-button-other.gif?ver=20100531', 'media');	$context = apply_filters('media_buttons_context', __('Upload/Insert %s'));	printf($context, $out);}add_action( 'media_buttons', 'media_buttons' );function _media_button($title, $icon, $type) {	return "<a href='" . esc_url( get_upload_iframe_src($type) ) . "' id='add_$type' class='thickbox' title='$title'><img src='" . esc_url( admin_url( $icon ) ) . "' alt='$title' /></a>";}function get_upload_iframe_src($type) {	global $post_ID, $temp_ID;	$uploading_iframe_ID = (int) (0 == $post_ID ? $temp_ID : $post_ID);	$upload_iframe_src = add_query_arg('post_id', $uploading_iframe_ID, 'media-upload.php');	if ( 'media' != $type )		$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);	$upload_iframe_src = apply_filters($type . '_upload_iframe_src', $upload_iframe_src);	return add_query_arg('TB_iframe', true, $upload_iframe_src);}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_form_handler() {	check_admin_referer('media-form');	$errors = null;	if ( isset($_POST['send']) ) {		$keys = array_keys($_POST['send']);		$send_id = (int) array_shift($keys);	}	if ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {		$post = $_post = get_post($attachment_id, ARRAY_A);		if ( isset($attachment['post_content']) )			$post['post_content'] = $attachment['post_content'];		if ( isset($attachment['post_title']) )			$post['post_title'] = $attachment['post_title'];		if ( isset($attachment['post_excerpt']) )			$post['post_excerpt'] = $attachment['post_excerpt'];		if ( isset($attachment['menu_order']) )			$post['menu_order'] = $attachment['menu_order'];		if ( isset($send_id) && $attachment_id == $send_id ) {			if ( isset($attachment['post_parent']) )				$post['post_parent'] = $attachment['post_parent'];		}		$post = apply_filters('attachment_fields_to_save', $post, $attachment);		if ( isset($attachment['image_alt']) ) {			$image_alt = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);			if ( $image_alt != stripslashes($attachment['image_alt']) ) {				$image_alt = wp_strip_all_tags( stripslashes($attachment['image_alt']), true );				// update_meta expects slashed				update_post_meta( $attachment_id, '_wp_attachment_image_alt', addslashes($image_alt) );			}		}		if ( isset($post['errors']) ) {			$errors[$attachment_id] = $post['errors'];			unset($post['errors']);		}		if ( $post != $_post )			wp_update_post($post);		foreach ( get_attachment_taxonomies($post) as $t ) {			if ( isset($attachment[$t]) )				wp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);		}	}	if ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>		<script type="text/javascript">		/* <![CDATA[ */		var win = window.dialogArguments || opener || parent || top;		win.tb_remove();		/* ]]> */		</script>		<?php		exit;	}	if ( isset($send_id) ) {		$attachment = stripslashes_deep( $_POST['attachments'][$send_id] );		$html = $attachment['post_title'];		if ( !empty($attachment['url']) ) {			$rel = '';			if ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )				$rel = " rel='attachment wp-att-" . esc_attr($send_id) . "'";			$html = "<a href='{$attachment['url']}'$rel>$html</a>";		}		$html = apply_filters('media_send_to_editor', $html, $send_id, $attachment);		return media_send_to_editor($html);	}	return $errors;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_image() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$alt = $align = '';		$src = $_POST['insertonly']['src'];		if ( !empty($src) && !strpos($src, '://') )			$src = "http://$src";		$alt = esc_attr($_POST['insertonly']['alt']);		if ( isset($_POST['insertonly']['align']) ) {			$align = esc_attr($_POST['insertonly']['align']);			$class = " class='align$align'";		}		if ( !empty($src) )			$html = "<img src='" . esc_url($src) . "' alt='$alt'$class />";		$html = apply_filters('image_send_to_editor_url', $html, esc_url_raw($src), $alt, $align);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'image', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'image', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $post_id * @param unknown_type $desc * @return unknown */function media_sideload_image($file, $post_id, $desc = null) {	if (!empty($file) ) {		// Download file to temp location		$tmp = download_url($file);		// Set variables for storage		// fix file filename for query strings		preg_match('/[^\?]+\.(jpg|JPG|jpe|JPE|jpeg|JPEG|gif|GIF|png|PNG)/', $file, $matches);		$file_array['name'] = basename($matches[0]);		$file_array['tmp_name'] = $tmp;		// If error storing temporarily, unlink		if ( is_wp_error($tmp) ) {			@unlink($file_array['tmp_name']);			$file_array['tmp_name'] = '';		}		// do the validation and storage stuff		$id = media_handle_sideload($file_array, $post_id, @$desc);		$src = $id;		// If error storing permanently, unlink		if ( is_wp_error($id) ) {			@unlink($file_array['tmp_name']);			return $id;		}	}	// Finally check to make sure the file has been saved, then return the html	if ( !empty($src) ) {		$alt = @$desc;		$html = "<img src='$src' alt='$alt' />";		return $html;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_audio() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('audio_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'audio', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'audio', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_video() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);        if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('video_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'video', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'video', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_file() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )			$title = basename($href);		if ( !empty($title) && !empty($href) )			$html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('file_send_to_editor_url', $html, esc_url_raw($href), $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'file', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'file', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_gallery() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	wp_enqueue_script('admin-gallery');	return wp_iframe( 'media_upload_gallery_form', $errors );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_library() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	return wp_iframe( 'media_upload_library_form', $errors );}/** * Retrieve HTML for the image alignment radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_align_input_fields( $post, $checked = '' ) {	if ( empty($checked) )		$checked = get_user_setting('align', 'none');	$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));	if ( !array_key_exists( (string) $checked, $alignments ) )		$checked = 'none';	$out = array();	foreach ( $alignments as $name => $label ) {		$name = esc_attr($name);		$out[] = "<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'".		 	( $checked == $name ? " checked='checked'" : "" ) .			" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>";	}	return join("\n", $out);}/** * Retrieve HTML for the size radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_size_input_fields( $post, $check = '' ) {		// get a list of the actual pixel dimensions of each possible intermediate version of this image		$size_names = array('thumbnail' => __('Thumbnail'), 'medium' => __('Medium'), 'large' => __('Large'), 'full' => __('Full Size'));		if ( empty($check) )			$check = get_user_setting('imgsize', 'medium');		foreach ( $size_names as $size => $label ) {			$downsize = image_downsize($post->ID, $size);			$checked = '';			// is this size selectable?			$enabled = ( $downsize[3] || 'full' == $size );			$css_id = "image-size-{$size}-{$post->ID}";			// if this size is the default but that's not available, don't select it			if ( $size == $check ) {				if ( $enabled )					$checked = " checked='checked'";				else					$check = '';			} elseif ( !$check && $enabled && 'thumbnail' != $size ) {				// if $check is not enabled, default to the first available size that's bigger than a thumbnail				$check = $size;				$checked = " checked='checked'";			}			$html = "<div class='image-size-item'><input type='radio' " . disabled( $enabled, false, false ) . "name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />";			$html .= "<label for='{$css_id}'>$label</label>";			// only show the dimensions if that choice is available			if ( $enabled )				$html .= " <label for='{$css_id}' class='help'>" . sprintf( "(%d&nbsp;&times;&nbsp;%d)", $downsize[1], $downsize[2] ). "</label>";			$html .= '</div>';			$out[] = $html;		}		return array(			'label' => __('Size'),			'input' => 'html',			'html'  => join("\n", $out),		);}/** * Retrieve HTML for the Link URL buttons with the default link type as specified. * * @since unknown * * @param unknown_type $post * @param unknown_type $url_type * @return unknown */function image_link_input_fields($post, $url_type = '') {	$file = wp_get_attachment_url($post->ID);	$link = get_attachment_link($post->ID);	if ( empty($url_type) )		$url_type = get_user_setting('urlbutton', 'post');	$url = '';	if ( $url_type == 'file' )		$url = $file;	elseif ( $url_type == 'post' )		$url = $link;	return "	<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='" . esc_attr($url) . "' /><br />	<button type='button' class='button urlnone' title=''>" . __('None') . "</button>	<button type='button' class='button urlfile' title='" . esc_attr($file) . "'>" . __('File URL') . "</button>	<button type='button' class='button urlpost' title='" . esc_attr($link) . "'>" . __('Post URL') . "</button>";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function image_attachment_fields_to_edit($form_fields, $post) {	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);		if ( empty($alt) )			$alt = '';		$form_fields['post_title']['required'] = true;		$form_fields['image_alt'] = array(			'value' => $alt,			'label' => __('Alternate Text'),			'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')		);		$form_fields['align'] = array(			'label' => __('Alignment'),			'input' => 'html',			'html'  => image_align_input_fields($post, get_option('image_default_align')),		);		$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );	} else {		unset( $form_fields['image_alt'] );	}	return $form_fields;}add_filter('attachment_fields_to_edit', 'image_attachment_fields_to_edit', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function media_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);	return $form_fields;}function media_post_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['image_url']);	return $form_fields;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $attachment * @return unknown */function image_attachment_fields_to_save($post, $attachment) {	if ( substr($post['post_mime_type'], 0, 5) == 'image' ) {		if ( strlen(trim($post['post_title'])) == 0 ) {			$post['post_title'] = preg_replace('/\.\w+$/', '', basename($post['guid']));			$post['errors']['post_title']['errors'][] = __('Empty Title filled from filename.');		}	}	return $post;}add_filter('attachment_fields_to_save', 'image_attachment_fields_to_save', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $attachment_id * @param unknown_type $attachment * @return unknown */function image_media_send_to_editor($html, $attachment_id, $attachment) {	$post =& get_post($attachment_id);	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$url = $attachment['url'];		$align = !empty($attachment['align']) ? $attachment['align'] : 'none';		$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';		$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';		$rel = ( $url == get_attachment_link($attachment_id) );		return get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);	}	return $html;}add_filter('media_send_to_editor', 'image_media_send_to_editor', 10, 3);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $errors * @return unknown */function get_attachment_fields_to_edit($post, $errors = null) {	if ( is_int($post) )		$post =& get_post($post);	if ( is_array($post) )		$post = (object) $post;	$image_url = wp_get_attachment_url($post->ID);	$edit_post = sanitize_post($post, 'edit');	$form_fields = array(		'post_title'   => array(			'label'      => __('Title'),			'value'      => $edit_post->post_title		),		'image_alt'   => array(),		'post_excerpt' => array(			'label'      => __('Caption'),			'value'      => $edit_post->post_excerpt		),		'post_content' => array(			'label'      => __('Description'),			'value'      => $edit_post->post_content,			'input'      => 'textarea'		),		'url'          => array(			'label'      => __('Link URL'),			'input'      => 'html',			'html'       => image_link_input_fields($post, get_option('image_default_link_type')),			'helps'      => __('Enter a link URL or click above for presets.')		),		'menu_order'   => array(			'label'      => __('Order'),			'value'      => $edit_post->menu_order		),		'image_url'	=> array(			'label'      => __('File URL'),			'input'      => 'html',			'html'       => "<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='" . esc_attr($image_url) . "' /><br />",			'value'      => wp_get_attachment_url($post->ID),			'helps'      => __('Location of the uploaded file.')		)	);	foreach ( get_attachment_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$values = array();		foreach ( $terms as $term )			$values[] = $term->name;		$t['value'] = join(', ', $values);		$form_fields[$taxonomy] = $t;	}	// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default	// The recursive merge is easily traversed with array casting: foreach( (array) $things as $thing )	$form_fields = array_merge_recursive($form_fields, (array) $errors);	$form_fields = apply_filters('attachment_fields_to_edit', $form_fields, $post);	return $form_fields;}/** * Retrieve HTML for media items of post gallery. * * The HTML markup retrieved will be created for the progress of SWF Upload * component. Will also create link for showing and hiding the form to modify * the image attachment. * * @since unknown * * @param int $post_id Optional. Post ID. * @param array $errors Errors for attachment, if any. * @return string */function get_media_items( $post_id, $errors ) {	$attachments = array();	if ( $post_id ) {		$post = get_post($post_id);		if ( $post && $post->post_type == 'attachment' )			$attachments = array($post->ID => $post);		else			$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );	} else {		if ( is_array($GLOBALS['wp_the_query']->posts) )			foreach ( $GLOBALS['wp_the_query']->posts as $attachment )				$attachments[$attachment->ID] = $attachment;	}	$output = '';	foreach ( (array) $attachments as $id => $attachment ) {		if ( $attachment->post_status == 'trash' )			continue;		if ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )			$output .= "\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress'><div class='bar'></div></div><div id='media-upload-error-$id'></div><div class='filename'></div>$item\n</div>";	}	return $output;}/** * Retrieve HTML form for modifying the image attachment. * * @since unknown * * @param int $attachment_id Attachment ID for modification. * @param string|array $args Optional. Override defaults. * @return string HTML form for attachment. */function get_media_item( $attachment_id, $args = null ) {	global $redir_tab;	if ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )		$thumb_url = $thumb_url[0];	else		$thumb_url = false;	$post = get_post( $attachment_id );	$default_args = array( 'errors' => null, 'send' => post_type_supports(get_post_type($post->post_parent), 'editor'), 'delete' => true, 'toggle' => true, 'show_title' => true );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$toggle_on  = __( 'Show' );	$toggle_off = __( 'Hide' );	$filename = basename( $post->guid );	$title = esc_attr( $post->post_title );	if ( $_tags = get_the_tags( $attachment_id ) ) {		foreach ( $_tags as $tag )			$tags[] = $tag->name;		$tags = esc_attr( join( ', ', $tags ) );	}	$post_mime_types = get_post_mime_types();	$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );	$type = array_shift( $keys );	$type_html = "<input type='hidden' id='type-of-$attachment_id' value='" . esc_attr( $type ) . "' />";	$form_fields = get_attachment_fields_to_edit( $post, $errors );	if ( $toggle ) {		$class = empty( $errors ) ? 'startclosed' : 'startopen';		$toggle_links = "	<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>	<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>";	} else {		$class = 'form-table';		$toggle_links = '';	}	$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case	$display_title = $show_title ? "<div class='filename new'><span class='title'>" . wp_html_excerpt( $display_title, 60 ) . "</span></div>" : '';	$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );	$order = '';	foreach ( $form_fields as $key => $val ) {		if ( 'menu_order' == $key ) {			if ( $gallery )				$order = "<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ). "' /></div>";			else				$order = "<input type='hidden' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ) . "' />";			unset( $form_fields['menu_order'] );			break;		}	}	$media_dims = '';	$meta = wp_get_attachment_metadata( $post->ID );	if ( is_array( $meta ) && array_key_exists( 'width', $meta ) && array_key_exists( 'height', $meta ) )		$media_dims .= "<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> ";	$media_dims = apply_filters( 'media_meta', $media_dims, $post );	$image_edit_button = '';	if ( gd_edit_image_support( $post->post_mime_type ) ) {		$nonce = wp_create_nonce( "image_editor-$post->ID" );		$image_edit_button = "<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \"$nonce\" )' class='button' value='" . esc_attr__( 'Edit Image' ) . "' /> <img src='" . esc_url( admin_url( 'images/wpspin_light.gif' ) ) . "' class='imgedit-wait-spin' alt='' />";	}	$attachment_url = get_permalink( $attachment_id );	$item = "	$type_html	$toggle_links	$order	$display_title	<table class='slidetoggle describe $class'>		<thead class='media-item-info' id='media-head-$post->ID'>		<tr valign='top'>			<td class='A1B1' id='thumbnail-head-$post->ID'>			<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' style='margin-top: 3px' /></a></p>			<p>$image_edit_button</p>			</td>			<td>			<p><strong>" . __('File name:') . "</strong> $filename</p>			<p><strong>" . __('File type:') . "</strong> $post->post_mime_type</p>			<p><strong>" . __('Upload date:') . "</strong> " . mysql2date( get_option('date_format'), $post->post_date ). '</p>';			if ( !empty( $media_dims ) )				$item .= "<p><strong>" . __('Dimensions:') . "</strong> $media_dims</p>\n";			$item .= "</td></tr>\n";	$item .= "		</thead>		<tbody>		<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>		<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\n";	$defaults = array(		'input'      => 'text',		'required'   => false,		'value'      => '',		'extra_rows' => array(),	);	if ( $send )		$send = "<input type='submit' class='button' name='send[$attachment_id]' value='" . esc_attr__( 'Insert into Post' ) . "' />";	if ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {		if ( !EMPTY_TRASH_DAYS ) {			$delete = "<a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Delete Permanently' ) . '</a>';		} elseif ( !MEDIA_TRASH ) {			$delete = "<a href='#' class='del-link' onclick=\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\">" . __( 'Delete' ) . "</a>			 <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>" . sprintf( __( 'You are about to delete <strong>%s</strong>.' ), $filename ) . "			 <a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='button'>" . __( 'Continue' ) . "</a>			 <a href='#' class='button' onclick=\"this.parentNode.style.display='none';return false;\">" . __( 'Cancel' ) . "</a>			 </div>";		} else {			$delete = "<a href='" . wp_nonce_url( "post.php?action=trash&amp;post=$attachment_id", 'trash-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Move to Trash' ) . "</a>			<a href='" . wp_nonce_url( "post.php?action=untrash&amp;post=$attachment_id", 'untrash-attachment_' . $attachment_id ) . "' id='undo[$attachment_id]' class='undo hidden'>" . __( 'Undo' ) . "</a>";		}	} else {		$delete = '';	}	$thumbnail = '';	$calling_post_id = 0;	if ( isset( $_GET['post_id'] ) )		$calling_post_id = absint( $_GET['post_id'] );	elseif ( isset( $_POST ) && count( $_POST ) ) // Like for async-upload where $_GET['post_id'] isn't set		$calling_post_id = $post->post_parent;	if ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {		$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$calling_post_id" );		$thumbnail = "<a class='wp-post-thumbnail' id='wp-post-thumbnail-" . $attachment_id . "' href='#' onclick='WPSetAsThumbnail(\"$attachment_id\", \"$ajax_nonce\");return false;'>" . esc_html__( "Use as featured image" ) . "</a>";	}	if ( ( $send || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) )		$form_fields['buttons'] = array( 'tr' => "\t\t<tr class='submit'><td></td><td class='savesend'>$send $thumbnail $delete</td></tr>\n" );	$hidden_fields = array();	foreach ( $form_fields as $id => $field ) {		if ( $id{0} == '_' )			continue;		if ( !empty( $field['tr'] ) ) {			$item .= $field['tr'];			continue;		}		$field = array_merge( $defaults, $field );		$name = "attachments[$attachment_id][$id]";		if ( $field['input'] == 'hidden' ) {			$hidden_fields[$name] = $field['value'];			continue;		}		$required      = $field['required'] ? '<span class="alignright"><abbr title="required" class="required">*</abbr></span>' : '';		$aria_required = $field['required'] ? " aria-required='true' " : '';		$class  = $id;		$class .= $field['required'] ? ' form-required' : '';		$item .= "\t\t<tr class='$class'>\n\t\t\t<th valign='top' scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label></th>\n\t\t\t<td class='field'>";		if ( !empty( $field[ $field['input'] ] ) )			$item .= $field[ $field['input'] ];		elseif ( $field['input'] == 'textarea' ) {			$item .= "<textarea type='text' id='$name' name='$name' $aria_required>" . esc_html( $field['value'] ) . '</textarea>';		} else {			$item .= "<input type='text' class='text' id='$name' name='$name' value='" . esc_attr( $field['value'] ) . "' $aria_required />";		}		if ( !empty( $field['helps'] ) )			$item .= "<p class='help'>" . join( "</p>\n<p class='help'>", array_unique( (array) $field['helps'] ) ) . '</p>';		$item .= "</td>\n\t\t</tr>\n";		$extra_rows = array();		if ( !empty( $field['errors'] ) )			foreach ( array_unique( (array) $field['errors'] ) as $error )				$extra_rows['error'][] = $error;		if ( !empty( $field['extra_rows'] ) )			foreach ( $field['extra_rows'] as $class => $rows )				foreach ( (array) $rows as $html )					$extra_rows[$class][] = $html;		foreach ( $extra_rows as $class => $rows )			foreach ( $rows as $html )				$item .= "\t\t<tr><td></td><td class='$class'>$html</td></tr>\n";	}	if ( !empty( $form_fields['_final'] ) )		$item .= "\t\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\n";	$item .= "\t</tbody>\n";	$item .= "\t</table>\n";	foreach ( $hidden_fields as $name => $value )		$item .= "\t<input type='hidden' name='$name' id='$name' value='" . esc_attr( $value ) . "' />\n";	if ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {		$parent = (int) $_REQUEST['post_id'];		$parent_name = "attachments[$attachment_id][post_parent]";		$item .= "\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\n";	}	return $item;}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_header() {	?>	<script type="text/javascript">post_id = <?php echo intval($_REQUEST['post_id']); ?>;</script>	<div id="media-upload-header">	<?php the_media_upload_tabs(); ?>	</div>	<?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_form( $errors = null ) {	global $type, $tab;	$flash_action_url = admin_url('async-upload.php');	// If Mac and mod_security, no Flash. :(	$flash = true;	if ( false !== stripos($_SERVER['HTTP_USER_AGENT'], 'mac') && apache_mod_loaded('mod_security') )		$flash = false;	$flash = apply_filters('flash_uploader', $flash);	$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;	$upload_size_unit = $max_upload_size =  wp_max_upload_size();	$sizes = array( 'KB', 'MB', 'GB' );	for ( $u = -1; $upload_size_unit > 1024 && $u < count( $sizes ) - 1; $u++ )		$upload_size_unit /= 1024;	if ( $u < 0 ) {		$upload_size_unit = 0;		$u = 0;	} else {		$upload_size_unit = (int) $upload_size_unit;	}?><script type="text/javascript">//<![CDATA[var uploaderMode = 0;jQuery(document).ready(function($){	uploaderMode = getUserSetting('uploader');	$('.upload-html-bypass a').click(function(){deleteUserSetting('uploader');uploaderMode=0;swfuploadPreLoad();return false;});	$('.upload-flash-bypass a').click(function(){setUserSetting('uploader', '1');uploaderMode=1;swfuploadPreLoad();return false;});});//]]></script><div id="media-upload-notice"><?php if (isset($errors['upload_notice']) ) { ?>	<?php echo $errors['upload_notice']; ?><?php } ?></div><div id="media-upload-error"><?php if (isset($errors['upload_error']) && is_wp_error($errors['upload_error'])) { ?>	<?php echo $errors['upload_error']->get_error_message(); ?><?php } ?></div><?php// Check quota for this blog if multisiteif ( is_multisite() && !is_upload_space_available() ) {	echo '<p>' . sprintf( __( 'Sorry, you have filled your storage quota (%s MB).' ), get_space_allowed() ) . '</p>';	return;}do_action('pre-upload-ui');if ( $flash ) : ?><script type="text/javascript">//<![CDATA[var swfu;SWFUpload.onload = function() {	var settings = {			button_text: '<span class="button"><?php _e('Select Files'); ?><\/span>',			button_text_style: '.button { text-align: center; font-weight: bold; font-family:"Lucida Grande",Verdana,Arial,"Bitstream Vera Sans",sans-serif; font-size: 11px; text-shadow: 0 1px 0 #FFFFFF; color:#464646; }',			button_height: "23",			button_width: "132",			button_text_top_padding: 3,			button_image_url: '<?php echo includes_url('images/upload.png?ver=20100531'); ?>',			button_placeholder_id: "flash-browse-button",			upload_url : "<?php echo esc_attr( $flash_action_url ); ?>",			flash_url : "<?php echo includes_url('js/swfupload/swfupload.swf'); ?>",			file_post_name: "async-upload",			file_types: "<?php echo apply_filters('upload_file_glob', '*.*'); ?>",			post_params : {				"post_id" : "<?php echo $post_id; ?>",				"auth_cookie" : "<?php echo (is_ssl() ? $_COOKIE[SECURE_AUTH_COOKIE] : $_COOKIE[AUTH_COOKIE]); ?>",				"logged_in_cookie": "<?php echo $_COOKIE[LOGGED_IN_COOKIE]; ?>",				"_wpnonce" : "<?php echo wp_create_nonce('media-form'); ?>",				"type" : "<?php echo $type; ?>",				"tab" : "<?php echo $tab; ?>",				"short" : "1"			},			file_size_limit : "<?php echo $max_upload_size; ?>b",			file_dialog_start_handler : fileDialogStart,			file_queued_handler : fileQueued,			upload_start_handler : uploadStart,			upload_progress_handler : uploadProgress,			upload_error_handler : uploadError,			upload_success_handler : uploadSuccess,			upload_complete_handler : uploadComplete,			file_queue_error_handler : fileQueueError,			file_dialog_complete_handler : fileDialogComplete,			swfupload_pre_load_handler: swfuploadPreLoad,			swfupload_load_failed_handler: swfuploadLoadFailed,			custom_settings : {				degraded_element_id : "html-upload-ui", // id of the element displayed when swfupload is unavailable				swfupload_element_id : "flash-upload-ui" // id of the element displayed when swfupload is available			},			debug: false		};		swfu = new SWFUpload(settings);};//]]></script><div id="flash-upload-ui" class="hide-if-no-js"><?php do_action('pre-flash-upload-ui'); ?>	<div>	<?php _e( 'Choose files to upload' ); ?>	<div id="flash-browse-button"></div>	<span><input id="cancel-upload" disabled="disabled" onclick="cancelUpload()" type="button" value="<?php esc_attr_e('Cancel Upload'); ?>" class="button" /></span>	</div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p><?php do_action('post-flash-upload-ui'); ?>	<p class="howto"><?php _e('After a file has been uploaded, you can add titles and descriptions.'); ?></p></div><?php endif; // $flash ?><div id="html-upload-ui"><?php do_action('pre-html-upload-ui'); ?>	<p id="async-upload-wrap">	<label class="screen-reader-text" for="async-upload"><?php _e('Upload'); ?></label>	<input type="file" name="async-upload" id="async-upload" /> <input type="submit" class="button" name="html-upload" value="<?php esc_attr_e('Upload'); ?>" /> <a href="#" onclick="try{top.tb_remove();}catch(e){}; return false;"><?php _e('Cancel'); ?></a>	</p>	<div class="clear"></div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p>	<?php if ( is_lighttpd_before_150() ): ?>	<p><?php _e('If you want to use all capabilities of the uploader, like uploading multiple files at once, please upgrade to lighttpd 1.5.'); ?></p>	<?php endif;?><?php do_action('post-html-upload-ui', $flash); ?></div><?php do_action('post-upload-ui'); ?><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="submit" class="hidden" name="save" value="" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><h3 class="media-title"><?php _e('Add media files from your computer'); ?></h3><?php media_upload_form( $errors ); ?><script type="text/javascript">//<![CDATA[jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});	}	updateMediaForm();});//]]></script><div id="media-items"><?phpif ( $id ) {	if ( !is_wp_error($id) ) {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_items( $id, $errors );	} else {		echo '<div id="media-upload-error">'.esc_html($id->get_error_message()).'</div>';		exit;	}}?></div><p class="savebutton ml-submit"><input type="submit" class="button" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_url_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$callback = "type_url_form_$type";?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><?php if ( is_callable($callback) ) { ?><h3 class="media-title"><?php _e('Add media file from URL'); ?></h3><script type="text/javascript">//<![CDATA[var addExtImage = {	width : '',	height : '',	align : 'alignnone',	insert : function() {		var t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';		if ( '' == f.src.value || '' == t.width )			return false;		if ( f.title.value ) {			title = f.title.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');			title = ' title="'+title+'"';		}		if ( f.alt.value )			alt = f.alt.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php if ( ! apply_filters( 'disable_captions', '' ) ) { ?>		if ( f.caption.value )			caption = f.caption.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php } ?>		cls = caption ? '' : ' class="'+t.align+'"';		html = '<img alt="'+alt+'" src="'+f.src.value+'"'+title+cls+' width="'+t.width+'" height="'+t.height+'" />';		if ( f.url.value )			html = '<a href="'+f.url.value+'">'+html+'</a>';		if ( caption )			html = '[caption id="" align="'+t.align+'" width="'+t.width+'" caption="'+caption+'"]'+html+'[/caption]';		var win = window.dialogArguments || opener || parent || top;		win.send_to_editor(html);		return false;	},	resetImageData : function() {		var t = addExtImage;		t.width = t.height = '';		document.getElementById('go_button').style.color = '#bbb';		if ( ! document.forms[0].src.value )			document.getElementById('status_img').innerHTML = '*';		else document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>" alt="" />';	},	updateImageData : function() {		var t = addExtImage;		t.width = t.preloadImg.width;		t.height = t.preloadImg.height;		document.getElementById('go_button').style.color = '#333';		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>" alt="" />';	},	getImageData : function() {		var t = addExtImage, src = document.forms[0].src.value;		if ( ! src ) {			t.resetImageData();			return false;		}		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />';		t.preloadImg = new Image();		t.preloadImg.onload = t.updateImageData;		t.preloadImg.onerror = t.resetImageData;		t.preloadImg.src = src;	}}//]]></script><div id="media-items"><div class="media-item media-blank"><?php echo apply_filters($callback, call_user_func($callback)); ?></div></div></form><?php	} else {		wp_die( __('Unknown action.') );	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_gallery_form($errors) {	global $redir_tab, $type;	$redir_tab = 'gallery';	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=gallery&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="sort-buttons" class="hide-if-no-js"><span><?php _e('All Tabs:'); ?><a href="#" id="showall"><?php _e('Show'); ?></a><a href="#" id="hideall" style="display:none;"><?php _e('Hide'); ?></a></span><?php _e('Sort Order:'); ?><a href="#" id="asc"><?php _e('Ascending'); ?></a> |<a href="#" id="desc"><?php _e('Descending'); ?></a> |<a href="#" id="clear"><?php _ex('Clear', 'verb'); ?></a></div><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="gallery-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><table class="widefat" cellspacing="0"><thead><tr><th><?php _e('Media'); ?></th><th class="order-head"><?php _e('Order'); ?></th><th class="actions-head"><?php _e('Actions'); ?></th></tr></thead></table><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items($post_id, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" style="display:none;" name="save" id="save-all" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="type" value="<?php echo esc_attr( $GLOBALS['type'] ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $GLOBALS['tab'] ); ?>" /></p><div id="gallery-settings" style="display:none;"><div class="title"><?php _e('Gallery Settings'); ?></div><table id="basic" class="describe"><tbody>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Link thumbnails to:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" name="linkto" id="linkto-file" value="file" />		<label for="linkto-file" class="radio"><?php _e('Image File'); ?></label>		<input type="radio" checked="checked" name="linkto" id="linkto-post" value="post" />		<label for="linkto-post" class="radio"><?php _e('Attachment Page'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order images by:'); ?></span>		</label>	</th>	<td class="field">		<select id="orderby" name="orderby">			<option value="menu_order" selected="selected"><?php _e('Menu order'); ?></option>			<option value="title"><?php _e('Title'); ?></option>			<option value="ID"><?php _e('Date/Time'); ?></option>			<option value="rand"><?php _e('Random'); ?></option>		</select>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" checked="checked" name="order" id="order-asc" value="asc" />		<label for="order-asc" class="radio"><?php _e('Ascending'); ?></label>		<input type="radio" name="order" id="order-desc" value="desc" />		<label for="order-desc" class="radio"><?php _e('Descending'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Gallery columns:'); ?></span>		</label>	</th>	<td class="field">		<select id="columns" name="columns">			<option value="2">2</option>			<option value="3" selected="selected">3</option>			<option value="4">4</option>			<option value="5">5</option>			<option value="6">6</option>			<option value="7">7</option>			<option value="8">8</option>			<option value="9">9</option>		</select>	</td>	</tr></tbody></table><p class="ml-submit"><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="insert-gallery" id="insert-gallery" value="<?php esc_attr_e( 'Insert gallery' ); ?>" /><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="update-gallery" id="update-gallery" value="<?php esc_attr_e( 'Update gallery settings' ); ?>" /></p></div></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_library_form($errors) {	global $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=library&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$_GET['paged'] = isset( $_GET['paged'] ) ? intval($_GET['paged']) : 0;	if ( $_GET['paged'] < 1 )		$_GET['paged'] = 1;	$start = ( $_GET['paged'] - 1 ) * 10;	if ( $start < 1 )		$start = 0;	add_filter( 'post_limits', create_function( '$a', "return 'LIMIT $start, 10';" ) );	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();?><form id="filter" action="" method="get"><input type="hidden" name="type" value="<?php echo esc_attr( $type ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $tab ); ?>" /><input type="hidden" name="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="post_mime_type" value="<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>" /><p id="media-search" class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e('Search Media');?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $_type => $reals )	foreach ( $reals as $real )		if ( isset($num_posts[$_type]) )			$num_posts[$_type] += $_num_posts[$real];		else			$num_posts[$_type] = $_num_posts[$real];// If available type specified by media button clicked, filter by that typeif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {	$_GET['post_mime_type'] = $type;	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}if ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )	$class = ' class="current"';else	$class = '';$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . "'$class>".__('All Types')."</a>";foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . "'$class>" . sprintf(_n($label[2][0], $label[2][1], $num_posts[$mime_type]), "<span id='$mime_type-counter'>" . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';}echo implode(' | </li>', $type_links) . '</li>';unset($type_links);?></ul><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($wp_query->found_posts / 10),	'current' => $_GET['paged']));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><?php$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?><select name='m'><option<?php selected( @$_GET['m'], 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . "'>";	echo esc_html( $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear" );	echo "</option>\n";}?></select><?php } ?><input type="submit" id="post-query-submit" value="<?php echo esc_attr( __( 'Filter &#187;' ) ); ?>" class="button-secondary" /></div><br class="clear" /></div></form><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="library-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items(null, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_image() {	if ( !apply_filters( 'disable_captions', '' ) ) {		$caption = '		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="caption">' . __('Image Caption') . '</label></span>			</th>			<td class="field"><input id="caption" name="caption" value="" type="text" /></td>		</tr>';	} else {		$caption = '';	}	$default_align = get_option('image_default_align');	if ( empty($default_align) )		$default_align = 'none';	return '	<h4 class="media-sub-title">' . __('Insert an image from another web site') . '</h4>	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label" style="width:130px;">				<span class="alignleft"><label for="src">' . __('Image URL') . '</label></span>				<span class="alignright"><abbr id="status_img" title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="src" name="src" value="" type="text" aria-required="true" onblur="addExtImage.getImageData()" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="title">' . __('Image Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="title" name="title" value="" type="text" aria-required="true" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="alt">' . __('Alternate Text') . '</label></span>			</th>			<td class="field"><input id="alt" name="alt" value="" type="text" aria-required="true" />			<p class="help">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>		</tr>		' . $caption . '		<tr class="align">			<th valign="top" scope="row" class="label"><p><label for="align">' . __('Alignment') . '</label></p></th>			<td class="field">				<input name="align" id="align-none" value="none" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'none' ? ' checked="checked"' : '').' />				<label for="align-none" class="align image-align-none-label">' . __('None') . '</label>				<input name="align" id="align-left" value="left" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'left' ? ' checked="checked"' : '').' />				<label for="align-left" class="align image-align-left-label">' . __('Left') . '</label>				<input name="align" id="align-center" value="center" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'center' ? ' checked="checked"' : '').' />				<label for="align-center" class="align image-align-center-label">' . __('Center') . '</label>				<input name="align" id="align-right" value="right" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'right' ? ' checked="checked"' : '').' />				<label for="align-right" class="align image-align-right-label">' . __('Right') . '</label>			</td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="url">' . __('Link Image To:') . '</label></span>			</th>			<td class="field"><input id="url" name="url" value="" type="text" /><br />			<button type="button" class="button" value="" onclick="document.forms[0].url.value=null">' . __('None') . '</button>			<button type="button" class="button" value="" onclick="document.forms[0].url.value=document.forms[0].src.value">' . __('Link to image') . '</button>			<p class="help">' . __('Enter a link URL or click above for presets.') . '</p></td>		</tr>	' . _insert_into_post_button('image') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_audio() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Audio File URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Still Alive by Jonathan Coulton&#8221;') . '</td></tr>	' . _insert_into_post_button('audio') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_video() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Video URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Lucy on YouTube&#8220;') . '</td></tr>	' . _insert_into_post_button('video') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_file() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</td></tr>	' . _insert_into_post_button('file') . '	</tbody></table>';}function _insert_into_post_button($type) {	if ( !post_type_supports(get_post_type($_GET['post_id']), 'editor') )		return '';	if ( 'image' == $type )	return '		<tr>			<td></td>			<td>				<input type="button" class="button" id="go_button" style="color:#bbb;" onclick="addExtImage.insert()" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';	return '		<tr>			<td></td>			<td>				<input type="submit" class="button" name="insertonlybutton" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';}/** * {@internal Missing Short Description}} * * Support a GET parameter for disabling the flash uploader. * * @since unknown * * @param unknown_type $flash * @return unknown */function media_upload_use_flash($flash) {	if ( array_key_exists('flash', $_REQUEST) )		$flash = !empty($_REQUEST['flash']);	return $flash;}add_filter('flash_uploader', 'media_upload_use_flash');/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_flash_bypass() {	echo '<p class="upload-flash-bypass">';	printf( __('You are using the Flash uploader.  Problems?  Try the <a href="%s">Browser uploader</a> instead.'), esc_url(add_query_arg('flash', 0)) );	echo '</p>';}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_html_bypass($flash = true) {	echo '<p class="upload-html-bypass hide-if-no-js">';	_e('You are using the Browser uploader.');	if ( $flash ) {		// the user manually selected the browser uploader, so let them switch back to Flash		echo ' ';		printf( __('Try the <a href="%s">Flash uploader</a> instead.'), esc_url(add_query_arg('flash', 1)) );	}	echo "</p>\n";}add_action('post-flash-upload-ui', 'media_upload_flash_bypass');add_action('post-html-upload-ui', 'media_upload_html_bypass');/** * {@internal Missing Short Description}} * * Make sure the GET parameter sticks when we submit a form. * * @since unknown * * @param unknown_type $url * @return unknown */function media_upload_bypass_url($url) {	if ( array_key_exists('flash', $_REQUEST) )		$url = add_query_arg('flash', intval($_REQUEST['flash']));	return $url;}add_filter('media_upload_form_url', 'media_upload_bypass_url');add_filter('async_upload_image', 'get_media_item', 10, 2);add_filter('async_upload_audio', 'get_media_item', 10, 2);add_filter('async_upload_video', 'get_media_item', 10, 2);add_filter('async_upload_file', 'get_media_item', 10, 2);add_action('media_upload_image', 'media_upload_image');add_action('media_upload_audio', 'media_upload_audio');add_action('media_upload_video', 'media_upload_video');add_action('media_upload_file', 'media_upload_file');add_filter('media_upload_gallery', 'media_upload_gallery');add_filter('media_upload_library', 'media_upload_library');
<?php/** * WordPress User Page * * Handles authentication, registering, resetting passwords, forgot password, * and other user handling. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php' );// Redirect to https login if forced to use SSLif ( force_ssl_admin() && !is_ssl() ) {	if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {		wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));		exit();	} else {		wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);		exit();	}}/** * Outputs the header for the login page. * * @uses do_action() Calls the 'login_head' for outputting HTML in the Log In *		header. * @uses apply_filters() Calls 'login_headerurl' for the top login link. * @uses apply_filters() Calls 'login_headertitle' for the top login title. * @uses apply_filters() Calls 'login_message' on the message to display in the *		header. * @uses $error The error global, which is checked for displaying errors. * * @param string $title Optional. WordPress Log In Page title to display in *		<title/> element. * @param string $message Optional. Message to display in header. * @param WP_Error $wp_error Optional. WordPress Error Object */function login_header($title = 'Log In', $message = '', $wp_error = '') {	global $error, $is_iphone, $interim_login, $current_site;	// Don't index any of these forms	add_filter( 'pre_option_blog_public', '__return_zero' );	add_action( 'login_head', 'noindex' );	if ( empty($wp_error) )		$wp_error = new WP_Error();	// Shake it!	$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );	$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );	if ( $shake_error_codes && $wp_error->get_error_code() && in_array( $wp_error->get_error_code(), $shake_error_codes ) )		add_action( 'login_head', 'wp_shake_js', 12 );	?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<title><?php bloginfo('name'); ?> &rsaquo; <?php echo $title; ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><?php	wp_admin_css( 'login', true );	wp_admin_css( 'colors-fresh', true );	if ( $is_iphone ) { ?>	<meta name="viewport" content="width=320; initial-scale=0.9; maximum-scale=1.0; user-scalable=0;" />	<style type="text/css" media="screen">	form { margin-left: 0px; }	#login { margin-top: 20px; }	</style><?php	} elseif ( isset($interim_login) && $interim_login ) { ?>	<style type="text/css" media="all">	.login #login { margin: 20px auto; }	</style><?php	}	do_action('login_head'); ?></head><body class="login"><?php   if ( !is_multisite() ) { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', 'http://wordpress.org/'); ?>" title="<?php echo apply_filters('login_headertitle', __('Powered by WordPress')); ?>"><?php bloginfo('name'); ?></a></h1><?php   } else { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', network_home_url() ); ?>" title="<?php echo apply_filters('login_headertitle', $current_site->site_name ); ?>"><span class="hide"><?php bloginfo('name'); ?></span></a></h1><?php   }	$message = apply_filters('login_message', $message);	if ( !empty( $message ) ) echo $message . "\n";	// Incase a plugin uses $error rather than the $errors object	if ( !empty( $error ) ) {		$wp_error->add('error', $error);		unset($error);	}	if ( $wp_error->get_error_code() ) {		$errors = '';		$messages = '';		foreach ( $wp_error->get_error_codes() as $code ) {			$severity = $wp_error->get_error_data($code);			foreach ( $wp_error->get_error_messages($code) as $error ) {				if ( 'message' == $severity )					$messages .= '	' . $error . "<br />\n";				else					$errors .= '	' . $error . "<br />\n";			}		}		if ( !empty($errors) )			echo '<div id="login_error">' . apply_filters('login_errors', $errors) . "</div>\n";		if ( !empty($messages) )			echo '<p class="message">' . apply_filters('login_messages', $messages) . "</p>\n";	}} // End of login_header()function wp_shake_js() {	global $is_iphone;	if ( $is_iphone )		return;?><script type="text/javascript">addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function s(id,pos){g(id).left=pos+'px';}function g(id){return document.getElementById(id).style;}function shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}addLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});</script><?php}/** * Handles sending password retrieval email to user. * * @uses $wpdb WordPress Database object * * @return bool|WP_Error True: when finish. WP_Error on error */function retrieve_password() {	global $wpdb, $current_site;	$errors = new WP_Error();	if ( empty( $_POST['user_login'] ) && empty( $_POST['user_email'] ) )		$errors->add('empty_username', __('<strong>ERROR</strong>: Enter a username or e-mail address.'));	if ( strpos($_POST['user_login'], '@') ) {		$user_data = get_user_by_email(trim($_POST['user_login']));		if ( empty($user_data) )			$errors->add('invalid_email', __('<strong>ERROR</strong>: There is no user registered with that email address.'));	} else {		$login = trim($_POST['user_login']);		$user_data = get_userdatabylogin($login);	}	do_action('lostpassword_post');	if ( $errors->get_error_code() )		return $errors;	if ( !$user_data ) {		$errors->add('invalidcombo', __('<strong>ERROR</strong>: Invalid username or e-mail.'));		return $errors;	}	// redefining user_login ensures we return the right case in the email	$user_login = $user_data->user_login;	$user_email = $user_data->user_email;	do_action('retreive_password', $user_login);  // Misspelled and deprecated	do_action('retrieve_password', $user_login);	$allow = apply_filters('allow_password_reset', true, $user_data->ID);	if ( ! $allow )		return new WP_Error('no_password_reset', __('Password reset is not allowed for this user'));	else if ( is_wp_error($allow) )		return $allow;	$key = $wpdb->get_var($wpdb->prepare("SELECT user_activation_key FROM $wpdb->users WHERE user_login = %s", $user_login));	if ( empty($key) ) {		// Generate something random for a key...		$key = wp_generate_password(20, false);		do_action('retrieve_password_key', $user_login, $key);		// Now insert the new md5 key into the db		$wpdb->update($wpdb->users, array('user_activation_key' => $key), array('user_login' => $user_login));	}	$message = __('Someone has asked to reset the password for the following site and username.') . "\r\n\r\n";	$message .= network_site_url() . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= __('To reset your password visit the following address, otherwise just ignore this email and nothing will happen.') . "\r\n\r\n";	$message .= network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_login), 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Password Reset'), $blogname );	$title = apply_filters('retrieve_password_title', $title);	$message = apply_filters('retrieve_password_message', $message, $key);	if ( $message && !wp_mail($user_email, $title, $message) )		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	return true;}/** * Handles resetting the user's password. * * @uses $wpdb WordPress Database object * * @param string $key Hash to validate sending user's password * @return bool|WP_Error */function reset_password($key, $login) {	global $wpdb;	$key = preg_replace('/[^a-z0-9]/i', '', $key);	if ( empty( $key ) || !is_string( $key ) )		return new WP_Error('invalid_key', __('Invalid key'));	if ( empty($login) || !is_string($login) )		return new WP_Error('invalid_key', __('Invalid key'));	$user = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->users WHERE user_activation_key = %s AND user_login = %s", $key, $login));	if ( empty( $user ) )		return new WP_Error('invalid_key', __('Invalid key'));	// Generate something random for a password...	$new_pass = wp_generate_password();	do_action('password_reset', $user, $new_pass);	wp_set_password($new_pass, $user->ID);	update_user_option($user->ID, 'default_password_nag', true, true); //Set up the Password change nag.	$message  = sprintf(__('Username: %s'), $user->user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $new_pass) . "\r\n";	$message .= site_url('wp-login.php', 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Your new password'), $blogname );	$title = apply_filters('password_reset_title', $title);	$message = apply_filters('password_reset_message', $message, $new_pass);	if ( $message && !wp_mail($user->user_email, $title, $message) )  		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	wp_password_change_notification($user);	return true;}/** * Handles registering a new user. * * @param string $user_login User's username for logging in * @param string $user_email User's email address to send password and add * @return int|WP_Error Either user's ID or error on failure. */function register_new_user( $user_login, $user_email ) {	$errors = new WP_Error();	$sanitized_user_login = sanitize_user( $user_login );	$user_email = apply_filters( 'user_registration_email', $user_email );	// Check the username	if ( $sanitized_user_login == '' ) {		$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Please enter a username.' ) );	} elseif ( ! validate_username( $user_login ) ) {		$errors->add( 'invalid_username', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ) );		$sanitized_user_login = '';	} elseif ( username_exists( $sanitized_user_login ) ) {		$errors->add( 'username_exists', __( '<strong>ERROR</strong>: This username is already registered, please choose another one.' ) );	}	// Check the e-mail address	if ( $user_email == '' ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please type your e-mail address.' ) );	} elseif ( ! is_email( $user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The email address isn&#8217;t correct.' ) );		$user_email = '';	} elseif ( email_exists( $user_email ) ) {		$errors->add( 'email_exists', __( '<strong>ERROR</strong>: This email is already registered, please choose another one.' ) );	}	do_action( 'register_post', $sanitized_user_login, $user_email, $errors );	$errors = apply_filters( 'registration_errors', $errors, $sanitized_user_login, $user_email );	if ( $errors->get_error_code() )		return $errors;	$user_pass = wp_generate_password();	$user_id = wp_create_user( $sanitized_user_login, $user_pass, $user_email );	if ( ! $user_id ) {		$errors->add( 'registerfail', sprintf( __( '<strong>ERROR</strong>: Couldn&#8217;t register you... please contact the <a href="mailto:%s">webmaster</a> !' ), get_option( 'admin_email' ) ) );		return $errors;	}	update_user_option( $user_id, 'default_password_nag', true, true ); //Set up the Password change nag.	wp_new_user_notification( $user_id, $user_pass );	return $user_id;}//// Main//$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : 'login';$errors = new WP_Error();if ( isset($_GET['key']) )	$action = 'resetpass';// validate action so as to default to the login screenif ( !in_array($action, array('logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login'), true) && false === has_filter('login_form_' . $action) )	$action = 'login';nocache_headers();header('Content-Type: '.get_bloginfo('html_type').'; charset='.get_bloginfo('charset'));if ( defined('RELOCATE') ) { // Move flag is set	if ( isset( $_SERVER['PATH_INFO'] ) && ($_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF']) )		$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );	$schema = is_ssl() ? 'https://' : 'http://';	if ( dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) != get_option('siteurl') )		update_option('siteurl', dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) );}//Set a cookie now to see if they are supported by the browser.setcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN);if ( SITECOOKIEPATH != COOKIEPATH )	setcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN);// allow plugins to override the default actions, and to add extra actions if they wantdo_action('login_form_' . $action);$http_post = ('POST' == $_SERVER['REQUEST_METHOD']);switch ($action) {case 'logout' :	check_admin_referer('log-out');	wp_logout();	$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?loggedout=true';	wp_safe_redirect( $redirect_to );	exit();break;case 'lostpassword' :case 'retrievepassword' :	if ( $http_post ) {		$errors = retrieve_password();		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';			wp_safe_redirect( $redirect_to );			exit();		}	}	if ( isset($_GET['error']) && 'invalidkey' == $_GET['error'] ) $errors->add('invalidkey', __('Sorry, that key does not appear to be valid.'));	$redirect_to = apply_filters( 'lostpassword_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	do_action('lost_password');	login_header(__('Lost Password'), '<p class="message">' . __('Please enter your username or e-mail address. You will receive a new password via e-mail.') . '</p>', $errors);	$user_login = isset($_POST['user_login']) ? stripslashes($_POST['user_login']) : '';?><form name="lostpasswordform" id="lostpasswordform" action="<?php echo site_url('wp-login.php?action=lostpassword', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username or E-mail:') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p><?php do_action('lostpassword_form'); ?>	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Get New Password'); ?>" tabindex="100" /></p></form><p id="nav"><?php if (get_option('users_can_register')) : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'resetpass' :case 'rp' :	$errors = reset_password($_GET['key'], $_GET['login']);	if ( ! is_wp_error($errors) ) {		wp_redirect('wp-login.php?checkemail=newpass');		exit();	}	wp_redirect('wp-login.php?action=lostpassword&error=invalidkey');	exit();break;case 'register' :	if ( is_multisite() ) {		// Multisite uses wp-signup.php		wp_redirect( apply_filters( 'wp_signup_location', get_bloginfo('wpurl') . '/wp-signup.php' ) );		exit;	}	if ( !get_option('users_can_register') ) {		wp_redirect('wp-login.php?registration=disabled');		exit();	}	$user_login = '';	$user_email = '';	if ( $http_post ) {		require_once( ABSPATH . WPINC . '/registration.php');		$user_login = $_POST['user_login'];		$user_email = $_POST['user_email'];		$errors = register_new_user($user_login, $user_email);		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';			wp_safe_redirect( $redirect_to );			exit();		}	}	$redirect_to = apply_filters( 'registration_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	login_header(__('Registration Form'), '<p class="message register">' . __('Register For This Site') . '</p>', $errors);?><form name="registerform" id="registerform" action="<?php echo site_url('wp-login.php?action=register', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr(stripslashes($user_login)); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('E-mail') ?><br />		<input type="text" name="user_email" id="user_email" class="input" value="<?php echo esc_attr(stripslashes($user_email)); ?>" size="25" tabindex="20" /></label>	</p><?php do_action('register_form'); ?>	<p id="reg_passmail"><?php _e('A password will be e-mailed to you.') ?></p>	<br class="clear" />	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Register'); ?>" tabindex="100" /></p></form><p id="nav"><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'login' :default:	$secure_cookie = '';	$interim_login = isset($_REQUEST['interim-login']);	// If the user wants ssl but the session is not ssl, force a secure cookie.	if ( !empty($_POST['log']) && !force_ssl_admin() ) {		$user_name = sanitize_user($_POST['log']);		if ( $user = get_userdatabylogin($user_name) ) {			if ( get_user_option('use_ssl', $user->ID) ) {				$secure_cookie = true;				force_ssl_admin(true);			}		}	}	if ( isset( $_REQUEST['redirect_to'] ) ) {		$redirect_to = $_REQUEST['redirect_to'];		// Redirect to https if user wants ssl		if ( $secure_cookie && false !== strpos($redirect_to, 'wp-admin') )			$redirect_to = preg_replace('|^http://|', 'https://', $redirect_to);	} else {		$redirect_to = admin_url();	}	$reauth = empty($_REQUEST['reauth']) ? false : true;	// If the user was redirected to a secure login form from a non-secure admin page, and secure login is required but secure admin is not, then don't use a secure	// cookie and redirect back to the referring non-secure admin page.  This allows logins to always be POSTed over SSL while allowing the user to choose visiting	// the admin via http or https.	if ( !$secure_cookie && is_ssl() && force_ssl_login() && !force_ssl_admin() && ( 0 !== strpos($redirect_to, 'https') ) && ( 0 === strpos($redirect_to, 'http') ) )		$secure_cookie = false;	$user = wp_signon('', $secure_cookie);	$redirect_to = apply_filters('login_redirect', $redirect_to, isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '', $user);	if ( !is_wp_error($user) && !$reauth ) {		if ( $interim_login ) {			$message = '<p class="message">' . __('You have logged in successfully.') . '</p>';			login_header( '', $message ); ?>			<script type="text/javascript">setTimeout( function(){window.close()}, 8000);</script>			<p class="alignright">			<input type="button" class="button-primary" value="<?php esc_attr_e('Close'); ?>" onclick="window.close()" /></p>			</div></body></html><?php		exit;		}		// If the user can't edit posts, send them to their profile.		if ( !$user->has_cap('edit_posts') && ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) )			$redirect_to = admin_url('profile.php');		wp_safe_redirect($redirect_to);		exit();	}	$errors = $user;	// Clear errors if loggedout is set.	if ( !empty($_GET['loggedout']) || $reauth )		$errors = new WP_Error();	// If cookies are disabled we can't log in even with a valid user+pass	if ( isset($_POST['testcookie']) && empty($_COOKIE[TEST_COOKIE]) )		$errors->add('test_cookie', __("<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href='http://www.google.com/cookies.html'>enable cookies</a> to use WordPress."));	// Some parts of this script use the main login form to display a message	if		( isset($_GET['loggedout']) && TRUE == $_GET['loggedout'] )		$errors->add('loggedout', __('You are now logged out.'), 'message');	elseif	( isset($_GET['registration']) && 'disabled' == $_GET['registration'] )		$errors->add('registerdisabled', __('User registration is currently not allowed.'));	elseif	( isset($_GET['checkemail']) && 'confirm' == $_GET['checkemail'] )		$errors->add('confirm', __('Check your e-mail for the confirmation link.'), 'message');	elseif	( isset($_GET['checkemail']) && 'newpass' == $_GET['checkemail'] )		$errors->add('newpass', __('Check your e-mail for your new password.'), 'message');	elseif	( isset($_GET['checkemail']) && 'registered' == $_GET['checkemail'] )		$errors->add('registered', __('Registration complete. Please check your e-mail.'), 'message');	elseif	( $interim_login )		$errors->add('expired', __('Your session has expired. Please log-in again.'), 'message');	// Clear any stale cookies.	if ( $reauth )		wp_clear_auth_cookie();	login_header(__('Log In'), '', $errors);	if ( isset($_POST['log']) )		$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr(stripslashes($_POST['log'])) : '';	$rememberme = ! empty( $_POST['rememberme'] );?><form name="loginform" id="loginform" action="<?php echo site_url('wp-login.php', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="log" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('Password') ?><br />		<input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="20" /></label>	</p><?php do_action('login_form'); ?>	<p class="forgetmenot"><label><input name="rememberme" type="checkbox" id="rememberme" value="forever" tabindex="90"<?php checked( $rememberme ); ?> /> <?php esc_attr_e('Remember Me'); ?></label></p>	<p class="submit">		<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Log In'); ?>" tabindex="100" /><?php	if ( $interim_login ) { ?>		<input type="hidden" name="interim-login" value="1" /><?php	} else { ?>		<input type="hidden" name="redirect_to" value="<?php echo esc_attr($redirect_to); ?>" /><?php 	} ?>		<input type="hidden" name="testcookie" value="1" />	</p></form><?php if ( !$interim_login ) { ?><p id="nav"><?php if ( isset($_GET['checkemail']) && in_array( $_GET['checkemail'], array('confirm', 'newpass') ) ) : ?><?php elseif ( get_option('users_can_register') ) : ?><a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><?php } else { ?></div><?php } ?><script type="text/javascript">function wp_attempt_focus(){setTimeout( function(){ try{<?php if ( $user_login || $interim_login ) { ?>d = document.getElementById('user_pass');<?php } else { ?>d = document.getElementById('user_login');<?php } ?>d.value = '';d.focus();} catch(e){}}, 200);}<?php if ( !$error ) { ?>wp_attempt_focus();<?php } ?>if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;} // end action switch?>
<?php/** * WordPress Administration Template Header * * @package WordPress * @subpackage Administration */@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! defined( 'WP_ADMIN' ) )	require_once( './admin.php' );get_admin_page_title();$title = esc_html( strip_tags( $title ) );wp_user_settings();wp_menu_unfold();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php echo $title; ?> &lsaquo; <?php bloginfo('name') ?>  &#8212; WordPress</title><?phpwp_admin_css( 'css/global' );wp_admin_css();wp_admin_css( 'css/colors' );wp_admin_css( 'css/ie' );if ( is_multisite() )	wp_admin_css( 'css/ms' );wp_enqueue_script('utils');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {		'url': '<?php echo SITECOOKIEPATH; ?>',		'uid': '<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>',		'time':'<?php echo time() ?>'	},	ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>',	pagenow = '<?php echo $current_screen->id; ?>',	typenow = '<?php if ( isset($current_screen->post_type) ) echo $current_screen->post_type; ?>',	adminpage = '<?php echo $admin_body_class; ?>',	thousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',	decimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',	isRtl = <?php echo (int) is_rtl(); ?>;//]]></script><?phpif ( in_array( $pagenow, array('post.php', 'post-new.php') ) ) {	add_action( 'admin_print_footer_scripts', 'wp_tiny_mce', 25 );	wp_enqueue_script('quicktags');}do_action('admin_enqueue_scripts', $hook_suffix);do_action("admin_print_styles-$hook_suffix");do_action('admin_print_styles');do_action("admin_print_scripts-$hook_suffix");do_action('admin_print_scripts');do_action("admin_head-$hook_suffix");do_action('admin_head');if ( get_user_setting('mfold') == 'f' )	$admin_body_class .= ' folded';if ( $is_iphone ) { ?><style type="text/css">.row-actions{visibility:visible;}</style><?php } ?></head><body class="wp-admin no-js <?php echo apply_filters( 'admin_body_class', '' ) . " $admin_body_class"; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><div id="wpwrap"><div id="wpcontent"><div id="wphead"><?php$blog_name = get_bloginfo('name', 'display');if ( '' == $blog_name ) {	$blog_name = '&nbsp;';} else {	$blog_name_excerpt = wp_html_excerpt($blog_name, 40);	if ( $blog_name != $blog_name_excerpt )		$blog_name_excerpt = trim($blog_name_excerpt) . '&hellip;';	$blog_name = $blog_name_excerpt;	unset($blog_name_excerpt);}$title_class = '';if ( function_exists('mb_strlen') ) {	if ( mb_strlen($blog_name, 'UTF-8') > 30 )		$title_class = 'class="long-title"';} else {	if ( strlen($blog_name) > 30 )		$title_class = 'class="long-title"';}?><img id="header-logo" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" alt="" width="32" height="32" /><h1 id="site-heading" <?php echo $title_class ?>>	<a href="<?php echo trailingslashit( get_bloginfo( 'url' ) ); ?>" title="<?php esc_attr_e('Visit Site') ?>">		<span id="site-title"><?php echo $blog_name ?></span>	</a><?php if ( current_user_can('manage_options') && '1' != get_option('blog_public') ): ?>	<a id="privacy-on-link" href="options-privacy.php" title="<?php echo esc_attr( apply_filters('privacy_on_link_title', __('Your site is asking search engines not to index its content') ) ); ?>"><?php echo apply_filters('privacy_on_link_text', __('Search Engines Blocked') ); ?></a><?php endif; ?></h1><?php do_action('in_admin_header'); ?><div id="wphead-info"><div id="user_info"><p><?php$links = array();$links[5] = sprintf(__('Howdy, <a href="%1$s" title="Edit your profile">%2$s</a>'), 'profile.php', $user_identity);$links[15] = '| <a href="' . wp_logout_url() . '" title="' . __('Log Out') . '">' . __('Log Out') . '</a>';$links = apply_filters('admin_user_info_links', $links, $current_user);ksort($links);echo implode(' ', $links);?></p></div><?php favorite_actions($current_screen); ?></div></div><div id="wpbody"><?phpunset($title_class, $blog_name);require(ABSPATH . 'wp-admin/menu-header.php');$current_screen->parent_file = $parent_file;$current_screen->parent_base = preg_replace('/\?.*$/', '', $parent_file);$current_screen->parent_base = str_replace('.php', '', $current_screen->parent_base);?><div id="wpbody-content"><?phpscreen_meta($current_screen);do_action('admin_notices');if ( $parent_file == 'options-general.php' )	require(ABSPATH . 'wp-admin/options-head.php');
<?php/** * WordPress DB Class * * Original code from {@link http://php.justinvincent.com Justin Vincent (justin@visunet.ie)} * * @package WordPress * @subpackage Database * @since 0.71 *//** * @since 0.71 */define( 'EZSQL_VERSION', 'WP1.25' );/** * @since 0.71 */define( 'OBJECT', 'OBJECT', true );/** * @since 2.5.0 */define( 'OBJECT_K', 'OBJECT_K' );/** * @since 0.71 */define( 'ARRAY_A', 'ARRAY_A' );/** * @since 0.71 */define( 'ARRAY_N', 'ARRAY_N' );/** * WordPress Database Access Abstraction Object * * It is possible to replace this class with your own * by setting the $wpdb global variable in wp-content/db.php * file with your class. You can name it wpdb also, since * this file will not be included, if the other file is * available. * * @link http://codex.wordpress.org/Function_Reference/wpdb_Class * * @package WordPress * @subpackage Database * @since 0.71 * @final */class wpdb {	/**	 * Whether to show SQL/DB errors	 *	 * @since 0.71	 * @access private	 * @var bool	 */	var $show_errors = false;	/**	 * Whether to suppress errors during the DB bootstrapping.	 *	 * @access private	 * @since 2.5	 * @var bool	 */	var $suppress_errors = false;	/**	 * The last error during query.	 *	 * @see get_last_error()	 * @since 2.5	 * @access private	 * @var string	 */	var $last_error = '';	/**	 * Amount of queries made	 *	 * @since 1.2.0	 * @access private	 * @var int	 */	var $num_queries = 0;	/**	 * Count of rows returned by previous query	 *	 * @since 1.2	 * @access private	 * @var int	 */	var $num_rows = 0;	/**	 * Count of affected rows by previous query	 *	 * @since 0.71	 * @access private	 * @var int	 */	var $rows_affected = 0;	/**	 * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).	 *	 * @since 0.71	 * @access public	 * @var int	 */	var $insert_id = 0;	/**	 * Saved result of the last query made	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $last_query;	/**	 * Results of the last query made	 *	 * @since 1.0.0	 * @access private	 * @var array|null	 */	var $last_result;	/**	 * Saved info on the table column	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $col_info;	/**	 * Saved queries that were executed	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queries;	/**	 * WordPress table prefix	 *	 * You can set this to have multiple WordPress installations	 * in a single database. The second reason is for possible	 * security precautions.	 *	 * @since 0.71	 * @access private	 * @var string	 */	var $prefix = '';	/**	 * Whether the database queries are ready to start executing.	 *	 * @since 2.5.0	 * @access private	 * @var bool	 */	var $ready = false;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $blogid = 0;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $siteid = 0;	/**	 * List of WordPress per-blog tables	 *	 * @since 2.5.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $tables = array( 'posts', 'comments', 'links', 'options', 'postmeta',		'terms', 'term_taxonomy', 'term_relationships', 'commentmeta' );	/**	 * List of deprecated WordPress tables	 *	 * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539	 *	 * @since 2.9.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $old_tables = array( 'categories', 'post2cat', 'link2cat' );	/**	 * List of WordPress global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $global_tables = array( 'users', 'usermeta' );	/**	 * List of Multisite global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $ms_global_tables = array( 'blogs', 'signups', 'site', 'sitemeta',		'sitecategories', 'registration_log', 'blog_versions' );	/**	 * WordPress Comments table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $comments;	/**	 * WordPress Comment Metadata table	 *	 * @since 2.9.0	 * @access public	 * @var string	 */	var $commentmeta;	/**	 * WordPress Links table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $links;	/**	 * WordPress Options table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $options;	/**	 * WordPress Post Metadata table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $postmeta;	/**	 * WordPress Posts table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $posts;	/**	 * WordPress Terms table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $terms;	/**	 * WordPress Term Relationships table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_relationships;	/**	 * WordPress Term Taxonomy table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_taxonomy;	/*	 * Global and Multisite tables	 */	/**	 * WordPress User Metadata table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $usermeta;	/**	 * WordPress Users table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $users;	/**	 * Multisite Blogs table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blogs;	/**	 * Multisite Blog Versions table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blog_versions;	/**	 * Multisite Registration Log table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $registration_log;	/**	 * Multisite Signups table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $signups;	/**	 * Multisite Sites table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $site;	/**	 * Multisite Sitewide Terms table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitecategories;	/**	 * Multisite Site Metadata table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitemeta;	/**	 * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.	 *	 * Keys are column names, values are format types: 'ID' => '%d'	 *	 * @since 2.8.0	 * @see wpdb:prepare()	 * @see wpdb:insert()	 * @see wpdb:update()	 * @see wp_set_wpdb_vars()	 * @access public	 * @var array	 */	var $field_types = array();	/**	 * Database table columns charset	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $charset;	/**	 * Database table columns collate	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $collate;	/**	 * Whether to use mysql_real_escape_string	 *	 * @since 2.8.0	 * @access public	 * @var bool	 */	var $real_escape = false;	/**	 * Database Username	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $dbuser;	/**	 * A textual description of the last query/get_row/get_var call	 *	 * @since unknown	 * @access public	 * @var string	 */	var $func_call;	/**	 * Connects to the database server and selects a database	 *	 * PHP4 compatibility layer for calling the PHP5 constructor.	 *	 * @uses wpdb::__construct() Passes parameters and returns result	 * @since 0.71	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function wpdb( $dbuser, $dbpassword, $dbname, $dbhost ) {		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB )			$this->db_connect();		return $this->__construct( $dbuser, $dbpassword, $dbname, $dbhost );	}	/**	 * Connects to the database server and selects a database	 *	 * PHP5 style constructor for compatibility with PHP5. Does	 * the actual setting up of the class properties and connection	 * to the database.	 *	 * @link http://core.trac.wordpress.org/ticket/3354	 * @since 2.0.8	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function __construct( $dbuser, $dbpassword, $dbname, $dbhost ) {		register_shutdown_function( array( &$this, '__destruct' ) );		if ( WP_DEBUG )			$this->show_errors();		if ( is_multisite() ) {			$this->charset = 'utf8';			if ( defined( 'DB_COLLATE' ) && DB_COLLATE )				$this->collate = DB_COLLATE;			else				$this->collate = 'utf8_general_ci';		} elseif ( defined( 'DB_COLLATE' ) ) {			$this->collate = DB_COLLATE;		}		if ( defined( 'DB_CHARSET' ) )			$this->charset = DB_CHARSET;		$this->dbuser = $dbuser;		$this->dbh = @mysql_connect( $dbhost, $dbuser, $dbpassword, true );		if ( !$this->dbh ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $dbhost ), 'db_connect_fail' );			return;		}		$this->ready = true;		if ( $this->has_cap( 'collation' ) && !empty( $this->charset ) ) {			if ( function_exists( 'mysql_set_charset' ) ) {				mysql_set_charset( $this->charset, $this->dbh );				$this->real_escape = true;			} else {				$query = $this->prepare( 'SET NAMES %s', $this->charset );				if ( ! empty( $this->collate ) )					$query .= $this->prepare( ' COLLATE %s', $this->collate );				$this->query( $query );			}		}		$this->select( $dbname, $this->dbh );	}	/**	 * PHP5 style destructor and will run when database object is destroyed.	 *	 * @see wpdb::__construct()	 * @since 2.0.8	 * @return bool true	 */	function __destruct() {		return true;	}	/**	 * Sets the table prefix for the WordPress tables.	 *	 * @since 2.5.0	 *	 * @param string $prefix Alphanumeric name for the new prefix.	 * @return string|WP_Error Old prefix or WP_Error on error	 */	function set_prefix( $prefix, $set_table_names = true ) {		if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )			return new WP_Error('invalid_db_prefix', /*WP_I18N_DB_BAD_PREFIX*/'Invalid database prefix'/*/WP_I18N_DB_BAD_PREFIX*/);		$old_prefix = is_multisite() ? '' : $prefix;		if ( isset( $this->base_prefix ) )			$old_prefix = $this->base_prefix;		$this->base_prefix = $prefix;		if ( $set_table_names ) {			foreach ( $this->tables( 'global' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			if ( is_multisite() && empty( $this->blogid ) )				return $old_prefix;			$this->prefix = $this->get_blog_prefix();			foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			foreach ( $this->tables( 'old' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;		}		return $old_prefix;	}	/**	 * Sets blog id.	 *	 * @since 3.0.0	 * @access public	 * @param int $blog_id	 * @param int $site_id Optional.	 * @return string previous blog id	 */	function set_blog_id( $blog_id, $site_id = 0 ) {		if ( ! empty( $site_id ) )			$this->siteid = $site_id;		$old_blog_id  = $this->blogid;		$this->blogid = $blog_id;		$this->prefix = $this->get_blog_prefix();		foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		foreach ( $this->tables( 'old' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		return $old_blog_id;	}	/**	 * Gets blog prefix.	 *	 * @uses is_multisite()	 * @since 3.0.0	 * @param int $blog_id Optional.	 * @return string Blog prefix.	 */	function get_blog_prefix( $blog_id = null ) {		if ( is_multisite() ) {			if ( null === $blog_id )				$blog_id = $this->blogid;			if ( defined( 'MULTISITE' ) && ( 0 == $blog_id || 1 == $blog_id ) )				return $this->base_prefix;			else				return $this->base_prefix . $blog_id . '_';		} else {			return $this->base_prefix;		}	}	/**	 * Returns an array of WordPress tables.	 *	 * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to	 * override the WordPress users and usersmeta tables that would otherwise	 * be determined by the prefix.	 *	 * The scope argument can take one of the following:	 *	 * 'all' - returns 'all' and 'global' tables. No old tables are returned.	 * 'blog' - returns the blog-level tables for the queried blog.	 * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.	 * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.	 * 'old' - returns tables which are deprecated.	 *	 * @since 3.0.0	 * @uses wpdb::$tables	 * @uses wpdb::$old_tables	 * @uses wpdb::$global_tables	 * @uses wpdb::$ms_global_tables	 * @uses is_multisite()	 *	 * @param string $scope Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.	 * @param bool $prefix Optional. Whether to include table prefixes. Default true. If blog	 * 	prefix is requested, then the custom users and usermeta tables will be mapped.	 * @param int $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.	 * @return array Table names. When a prefix is requested, the key is the unprefixed table name.	 */	function tables( $scope = 'all', $prefix = true, $blog_id = 0 ) {		switch ( $scope ) {			case 'all' :				$tables = array_merge( $this->global_tables, $this->tables );				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'blog' :				$tables = $this->tables;				break;			case 'global' :				$tables = $this->global_tables;				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'ms_global' :				$tables = $this->ms_global_tables;				break;			case 'old' :				$tables = $this->old_tables;				break;			default :				return array();				break;		}		if ( $prefix ) {			if ( ! $blog_id )				$blog_id = $this->blogid;			$blog_prefix = $this->get_blog_prefix( $blog_id );			$base_prefix = $this->base_prefix;			$global_tables = array_merge( $this->global_tables, $this->ms_global_tables );			foreach ( $tables as $k => $table ) {				if ( in_array( $table, $global_tables ) )					$tables[ $table ] = $base_prefix . $table;				else					$tables[ $table ] = $blog_prefix . $table;				unset( $tables[ $k ] );			}			if ( isset( $tables['users'] ) && defined( 'CUSTOM_USER_TABLE' ) )				$tables['users'] = CUSTOM_USER_TABLE;			if ( isset( $tables['usermeta'] ) && defined( 'CUSTOM_USER_META_TABLE' ) )				$tables['usermeta'] = CUSTOM_USER_META_TABLE;		}		return $tables;	}	/**	 * Selects a database using the current database connection.	 *	 * The database name will be changed based on the current database	 * connection. On failure, the execution will bail and display an DB error.	 *	 * @since 0.71	 *	 * @param string $db MySQL database name	 * @param resource $dbh Optional link identifier.	 * @return null Always null.	 */	function select( $db, $dbh = null) {		if ( is_null($dbh) ) 			$dbh = $this->dbh;		if ( !@mysql_select_db( $db, $dbh ) ) {			$this->ready = false;			$this->bail( sprintf( /*WP_I18N_DB_SELECT_DB*/'<h1>Can&#8217;t select database</h1><p>We were able to connect to the database server (which means your username and password is okay) but not able to select the <code>%1$s</code> database.</p><ul><li>Are you sure it exists?</li><li>Does the user <code>%2$s</code> have permission to use the <code>%1$s</code> database?</li><li>On some systems the name of your database is prefixed with your username, so it would be like <code>username_%1$s</code>. Could that be the problem?</li></ul><p>If you don\'t know how to set up a database you should <strong>contact your host</strong>. If all else fails you may find help at the <a href="http://wordpress.org/support/">WordPress Support Forums</a>.</p>'/*/WP_I18N_DB_SELECT_DB*/, $db, $this->dbuser ), 'db_select_fail' );			return;		}	}	/**	 * Weak escape, using addslashes()	 *	 * @see addslashes()	 * @since 2.8.0	 * @access private	 *	 * @param string $string	 * @return string	 */	function _weak_escape( $string ) {		return addslashes( $string );	}	/**	 * Real escape, using mysql_real_escape_string() or addslashes()	 *	 * @see mysql_real_escape_string()	 * @see addslashes()	 * @since 2.8	 * @access private	 *	 * @param  string $string to escape	 * @return string escaped	 */	function _real_escape( $string ) {		if ( $this->dbh && $this->real_escape )			return mysql_real_escape_string( $string, $this->dbh );		else			return addslashes( $string );	}	/**	 * Escape data. Works on arrays.	 *     * @uses wpdb::_escape()     * @uses wpdb::_real_escape()	 * @since  2.8	 * @access private	 *	 * @param  string|array $data	 * @return string|array escaped	 */	function _escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array($v) )					$data[$k] = $this->_escape( $v );				else					$data[$k] = $this->_real_escape( $v );			}		} else {			$data = $this->_real_escape( $data );		}		return $data;	}	/**	 * Escapes content for insertion into the database using addslashes(), for security.	 *	 * Works on arrays.	 *	 * @since 0.71	 * @param string|array $data to escape	 * @return string|array escaped as query safe string	 */	function escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array( $v ) )					$data[$k] = $this->escape( $v );				else					$data[$k] = $this->_weak_escape( $v );			}		} else {			$data = $this->_weak_escape( $data );		}		return $data;	}	/**	 * Escapes content by reference for insertion into the database, for security	 *	 * @uses wpdb::_real_escape()	 * @since 2.3.0	 * @param string $string to escape	 * @return void	 */	function escape_by_ref( &$string ) {		$string = $this->_real_escape( $string );	}	/**	 * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.	 *	 * The following directives can be used in the query format string:	 *   %d (decimal number)	 *   %s (string)	 *   %% (literal percentage sign - no argument needed)	 *	 * Both %d and %s are to be left unquoted in the query string and they need an argument passed for them.	 * Literals (%) as parts of the query must be properly written as %%.	 *	 * This function only supports a small subset of the sprintf syntax; it only supports %d (decimal number), %s (string).	 * Does not support sign, padding, alignment, width or precision specifiers.	 * Does not support argument numbering/swapping.	 *	 * May be called like {@link http://php.net/sprintf sprintf()} or like {@link http://php.net/vsprintf vsprintf()}.	 *	 * Both %d and %s should be left unquoted in the query string.	 *	 * <code>	 * wpdb::prepare( "SELECT * FROM `table` WHERE `column` = %s AND `field` = %d", 'foo', 1337 )	 * wpdb::prepare( "SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s", 'foo' );	 * </code>	 *	 * @link http://php.net/sprintf Description of syntax.	 * @since 2.3.0	 *	 * @param string $query Query statement with sprintf()-like placeholders	 * @param array|mixed $args The array of variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/vsprintf vsprintf()}, or the first variable to substitute into the query's placeholders if	 * 	being called like {@link http://php.net/sprintf sprintf()}.	 * @param mixed $args,... further variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/sprintf sprintf()}.	 * @return null|false|string Sanitized query string, null if there is no query, false if there is an error and string	 * 	if there was something to prepare	 */	function prepare( $query = null ) { // ( $query, *$args )		if ( is_null( $query ) )			return;		$args = func_get_args();		array_shift( $args );		// If args were passed as an array (as in vsprintf), move them up		if ( isset( $args[0] ) && is_array($args[0]) )			$args = $args[0];		$query = str_replace( "'%s'", '%s', $query ); // in case someone mistakenly already singlequoted it		$query = str_replace( '"%s"', '%s', $query ); // doublequote unquoting		$query = preg_replace( '|(?<!%)%s|', "'%s'", $query ); // quote the strings, avoiding escaped strings like %%s		array_walk( $args, array( &$this, 'escape_by_ref' ) );		return @vsprintf( $query, $args );	}	/**	 * Print SQL/DB error.	 *	 * @since 0.71	 * @global array $EZSQL_ERROR Stores error information of query and error string	 *	 * @param string $str The error to display	 * @return bool False if the showing of errors is disabled.	 */	function print_error( $str = '' ) {		global $EZSQL_ERROR;		if ( !$str )			$str = mysql_error( $this->dbh );		$EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str );		if ( $this->suppress_errors )			return false;		if ( $caller = $this->get_caller() )			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR_FULL*/'WordPress database error %1$s for query %2$s made by %3$s'/*/WP_I18N_DB_QUERY_ERROR_FULL*/, $str, $this->last_query, $caller );		else			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR*/'WordPress database error %1$s for query %2$s'/*/WP_I18N_DB_QUERY_ERROR*/, $str, $this->last_query );		if ( function_exists( 'error_log' )			&& ( $log_file = @ini_get( 'error_log' ) )			&& ( 'syslog' == $log_file || @is_writable( $log_file ) )			)			@error_log( $error_str );		// Are we showing errors?		if ( ! $this->show_errors )			return false;		// If there is an error then take note of it		if ( is_multisite() ) {			$msg = "WordPress database error: [$str]\n{$this->last_query}\n";			if ( defined( 'ERRORLOGFILE' ) )				error_log( $msg, 3, ERRORLOGFILE );			if ( defined( 'DIEONDBERROR' ) )				wp_die( $msg );		} else {			$str   = htmlspecialchars( $str, ENT_QUOTES );			$query = htmlspecialchars( $this->last_query, ENT_QUOTES );			print "<div id='error'>			<p class='wpdberror'><strong>WordPress database error:</strong> [$str]<br />			<code>$query</code></p>			</div>";		}	}	/**	 * Enables showing of database errors.	 *	 * This function should be used only to enable showing of errors.	 * wpdb::hide_errors() should be used instead for hiding of errors. However,	 * this function can be used to enable and disable showing of database	 * errors.	 *	 * @since 0.71	 * @see wpdb::hide_errors()	 *	 * @param bool $show Whether to show or hide errors	 * @return bool Old value for showing errors.	 */	function show_errors( $show = true ) {		$errors = $this->show_errors;		$this->show_errors = $show;		return $errors;	}	/**	 * Disables showing of database errors.	 *	 * By default database errors are not shown.	 *	 * @since 0.71	 * @see wpdb::show_errors()	 *	 * @return bool Whether showing of errors was active	 */	function hide_errors() {		$show = $this->show_errors;		$this->show_errors = false;		return $show;	}	/**	 * Whether to suppress database errors.	 *	 * By default database errors are suppressed, with a simple	 * call to this function they can be enabled.	 *	 * @since 2.5	 * @see wpdb::hide_errors()	 * @param bool $suppress Optional. New value. Defaults to true.	 * @return bool Old value	 */	function suppress_errors( $suppress = true ) {		$errors = $this->suppress_errors;		$this->suppress_errors = (bool) $suppress;		return $errors;	}	/**	 * Kill cached query results.	 *	 * @since 0.71	 * @return void	 */	function flush() {		$this->last_result = array();		$this->col_info    = null;		$this->last_query  = null;	}	function db_connect( $query = "SELECT" ) {		global $db_list, $global_db_list;		if ( ! is_array( $db_list ) )			return true;		if ( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {			$action = 'global';			$details = $global_db_list[ mt_rand( 0, count( $global_db_list ) -1 ) ];			$this->db_global = $details;		} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {			$action = 'write';			$details = $db_list[ 'write' ][ mt_rand( 0, count( $db_list[ 'write' ] ) -1 ) ];			$this->db_write = $details;		} else {			$action = '';			$details = $db_list[ 'read' ][ mt_rand( 0, count( $db_list[ 'read' ] ) -1 ) ];			$this->db_read = $details;		}		$dbhname = "dbh" . $action;		$this->$dbhname = @mysql_connect( $details[ 'db_host' ], $details[ 'db_user' ], $details[ 'db_password' ] );		if (!$this->$dbhname ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $details['db_host'] ), 'db_connect_fail' );		}		$this->select( $details[ 'db_name' ], $this->$dbhname );	}	/**	 * Perform a MySQL database query, using current database connection.	 *	 * More information can be found on the codex page.	 *	 * @since 0.71	 *	 * @param string $query Database query	 * @return int|false Number of rows affected/selected or false on error	 */	function query( $query ) {		if ( ! $this->ready )			return false;		// some queries are made before the plugins have been loaded, and thus cannot be filtered with this method		if ( function_exists( 'apply_filters' ) )			$query = apply_filters( 'query', $query );		$return_val = 0;		$this->flush();		// Log how the function was called		$this->func_call = "\$db->query(\"$query\")";		// Keep track of the last query for debug..		$this->last_query = $query;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->timer_start();		// use $this->dbh for read ops, and $this->dbhwrite for write ops		// use $this->dbhglobal for gloal table ops		unset( $dbh );		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB ) {			if( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {				if( false == isset( $this->dbhglobal ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhglobal;				$this->last_db_used = "global";			} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {				if( false == isset( $this->dbhwrite ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhwrite;				$this->last_db_used = "write";			} else {				$dbh =& $this->dbh;				$this->last_db_used = "read";			}		} else {			$dbh =& $this->dbh;			$this->last_db_used = "other/read";		}		$this->result = @mysql_query( $query, $dbh );		$this->num_queries++;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() );		// If there is an error then take note of it..		if ( $this->last_error = mysql_error( $dbh ) ) {			$this->print_error();			return false;		}		if ( preg_match( "/^\\s*(insert|delete|update|replace|alter) /i", $query ) ) {			$this->rows_affected = mysql_affected_rows( $dbh );			// Take note of the insert_id			if ( preg_match( "/^\\s*(insert|replace) /i", $query ) ) {				$this->insert_id = mysql_insert_id($dbh);			}			// Return number of rows affected			$return_val = $this->rows_affected;		} else {			$i = 0;			while ( $i < @mysql_num_fields( $this->result ) ) {				$this->col_info[$i] = @mysql_fetch_field( $this->result );				$i++;			}			$num_rows = 0;			while ( $row = @mysql_fetch_object( $this->result ) ) {				$this->last_result[$num_rows] = $row;				$num_rows++;			}			@mysql_free_result( $this->result );			// Log number of rows the query returned			// and return number of rows selected			$this->num_rows = $num_rows;			$return_val     = $num_rows;		}		return $return_val;	}	/**	 * Insert a row into a table.	 *	 * <code>	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows inserted, or false on error.	 */	function insert( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'INSERT' );	}	/**	 * Replace a row into a table.	 *	 * <code>	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function replace( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'REPLACE' );	}	/**	 * Helper function for insert and replace.	 *	 * Runs an insert or replace query based on $type argument.	 *	 * @access private	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs).  Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function _insert_replace_helper( $table, $data, $format = null, $type = 'INSERT' ) {		if ( ! in_array( strtoupper( $type ), array( 'REPLACE', 'INSERT' ) ) )			return false;		$formats = $format = (array) $format;		$fields = array_keys( $data );		$formatted_fields = array();		foreach ( $fields as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$formatted_fields[] = $form;		}		$sql = "{$type} INTO `$table` (`" . implode( '`,`', $fields ) . "`) VALUES ('" . implode( "','", $formatted_fields ) . "')";		return $this->query( $this->prepare( $sql, $data ) );	}	/**	 * Update a row in the table	 *	 * <code>	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to update (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be "raw".	 * @param array|string $format Optional. An array of formats to be mapped to each of the values in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @param array|string $format_where Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where.  A format is one of '%d', '%s' (decimal number, string).  If omitted, all values in $where will be treated as strings.	 * @return int|false The number of rows updated, or false on error.	 */	function update( $table, $data, $where, $format = null, $where_format = null ) {		if ( ! is_array( $data ) || ! is_array( $where ) )			return false;		$formats = $format = (array) $format;		$bits = $wheres = array();		foreach ( (array) array_keys( $data ) as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset($this->field_types[$field]) )				$form = $this->field_types[$field];			else				$form = '%s';			$bits[] = "`$field` = {$form}";		}		$where_formats = $where_format = (array) $where_format;		foreach ( (array) array_keys( $where ) as $field ) {			if ( !empty( $where_format ) )				$form = ( $form = array_shift( $where_formats ) ) ? $form : $where_format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$wheres[] = "`$field` = {$form}";		}		$sql = "UPDATE `$table` SET " . implode( ', ', $bits ) . ' WHERE ' . implode( ' AND ', $wheres );		return $this->query( $this->prepare( $sql, array_merge( array_values( $data ), array_values( $where ) ) ) );	}	/**	 * Retrieve one variable from the database.	 *	 * Executes a SQL query and returns the value from the SQL result.	 * If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified.	 * If $query is null, this function returns the value in the specified column and row from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.	 * @param int $x Optional. Column of value to return.  Indexed from 0.	 * @param int $y Optional. Row of value to return.  Indexed from 0.	 * @return string|null Database query result (as string), or null on failure	 */	function get_var( $query = null, $x = 0, $y = 0 ) {		$this->func_call = "\$db->get_var(\"$query\", $x, $y)";		if ( $query )			$this->query( $query );		// Extract var out of cached results based x,y vals		if ( !empty( $this->last_result[$y] ) ) {			$values = array_values( get_object_vars( $this->last_result[$y] ) );		}		// If there is a value return it else return null		return ( isset( $values[$x] ) && $values[$x] !== '' ) ? $values[$x] : null;	}	/**	 * Retrieve one row from the database.	 *	 * Executes a SQL query and returns the row from the SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query SQL query.	 * @param string $output Optional. one of ARRAY_A | ARRAY_N | OBJECT constants. Return an associative array (column => value, ...),	 * 	a numerically indexed array (0 => value, ...) or an object ( ->column = value ), respectively.	 * @param int $y Optional. Row to return. Indexed from 0.	 * @return mixed Database query result in format specifed by $output or null on failure	 */	function get_row( $query = null, $output = OBJECT, $y = 0 ) {		$this->func_call = "\$db->get_row(\"$query\",$output,$y)";		if ( $query )			$this->query( $query );		else			return null;		if ( !isset( $this->last_result[$y] ) )			return null;		if ( $output == OBJECT ) {			return $this->last_result[$y] ? $this->last_result[$y] : null;		} elseif ( $output == ARRAY_A ) {			return $this->last_result[$y] ? get_object_vars( $this->last_result[$y] ) : null;		} elseif ( $output == ARRAY_N ) {			return $this->last_result[$y] ? array_values( get_object_vars( $this->last_result[$y] ) ) : null;		} else {			$this->print_error(/*WP_I18N_DB_GETROW_ERROR*/" \$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N"/*/WP_I18N_DB_GETROW_ERROR*/);		}	}	/**	 * Retrieve one column from the database.	 *	 * Executes a SQL query and returns the column from the SQL result.	 * If the SQL result contains more than one column, this function returns the column specified.	 * If $query is null, this function returns the specified column from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to previous query.	 * @param int $x Optional. Column to return. Indexed from 0.	 * @return array Database query result. Array indexed from 0 by SQL result row number.	 */	function get_col( $query = null , $x = 0 ) {		if ( $query )			$this->query( $query );		$new_array = array();		// Extract the column values		for ( $i = 0, $j = count( $this->last_result ); $i < $j; $i++ ) {			$new_array[$i] = $this->get_var( null, $x, $i );		}		return $new_array;	}	/**	 * Retrieve an entire SQL result set from the database (i.e., many rows)	 *	 * Executes a SQL query and returns the entire SQL result.	 *	 * @since 0.71	 *	 * @param string $query SQL query.	 * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants. With one of the first three, return an array of rows indexed from 0 by SQL result row number.	 * 	Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.	 * 	With OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value.  Duplicate keys are discarded.	 * @return mixed Database query results	 */	function get_results( $query = null, $output = OBJECT ) {		$this->func_call = "\$db->get_results(\"$query\", $output)";		if ( $query )			$this->query( $query );		else			return null;		$new_array = array();		if ( $output == OBJECT ) {			// Return an integer-keyed array of row objects			return $this->last_result;		} elseif ( $output == OBJECT_K ) {			// Return an array of row objects with keys from column 1			// (Duplicates are discarded)			foreach ( $this->last_result as $row ) {				$key = array_shift( get_object_vars( $row ) );				if ( ! isset( $new_array[ $key ] ) )					$new_array[ $key ] = $row;			}			return $new_array;		} elseif ( $output == ARRAY_A || $output == ARRAY_N ) {			// Return an integer-keyed array of...			if ( $this->last_result ) {				foreach( (array) $this->last_result as $row ) {					if ( $output == ARRAY_N ) {						// ...integer-keyed row arrays						$new_array[] = array_values( get_object_vars( $row ) );					} else {						// ...column name-keyed row arrays						$new_array[] = get_object_vars( $row );					}				}			}			return $new_array;		}		return null;	}	/**	 * Retrieve column metadata from the last query.	 *	 * @since 0.71	 *	 * @param string $info_type Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill	 * @param int $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type	 * @return mixed Column Results	 */	function get_col_info( $info_type = 'name', $col_offset = -1 ) {		if ( $this->col_info ) {			if ( $col_offset == -1 ) {				$i = 0;				$new_array = array();				foreach( (array) $this->col_info as $col ) {					$new_array[$i] = $col->{$info_type};					$i++;				}				return $new_array;			} else {				return $this->col_info[$col_offset]->{$info_type};			}		}	}	/**	 * Starts the timer, for debugging purposes.	 *	 * @since 1.5.0	 *	 * @return true	 */	function timer_start() {		$mtime            = explode( ' ', microtime() );		$this->time_start = $mtime[1] + $mtime[0];		return true;	}	/**	 * Stops the debugging timer.	 *	 * @since 1.5.0	 *	 * @return int Total time spent on the query, in milliseconds	 */	function timer_stop() {		$mtime      = explode( ' ', microtime() );		$time_end   = $mtime[1] + $mtime[0];		$time_total = $time_end - $this->time_start;		return $time_total;	}	/**	 * Wraps errors in a nice header and footer and dies.	 *	 * Will not die if wpdb::$show_errors is true	 *	 * @since 1.5.0	 *	 * @param string $message The Error message	 * @param string $error_code Optional. A Computer readable string to identify the error.	 * @return false|void	 */	function bail( $message, $error_code = '500' ) {		if ( !$this->show_errors ) {			if ( class_exists( 'WP_Error' ) )				$this->error = new WP_Error($error_code, $message);			else				$this->error = $message;			return false;		}		wp_die($message);	}	/**	 * Whether MySQL database is at least the required minimum version.	 *	 * @since 2.5.0	 * @uses $wp_version	 * @uses $required_mysql_version	 *	 * @return WP_Error	 */	function check_database_version() {		global $wp_version, $required_mysql_version;		// Make sure the server has the required MySQL version		if ( version_compare($this->db_version(), $required_mysql_version, '<') )			return new WP_Error('database_version', sprintf( __( '<strong>ERROR</strong>: WordPress %1$s requires MySQL %2$s or higher' ), $wp_version, $required_mysql_version ));	}	/**	 * Whether the database supports collation.	 *	 * Called when WordPress is generating the table scheme.	 *	 * @since 2.5.0	 *	 * @return bool True if collation is supported, false if version does not	 */	function supports_collation() {		return $this->has_cap( 'collation' );	}	/**	 * Determine if a database supports a particular feature	 *	 * @since 2.7	 * @see   wpdb::db_version()	 *	 * @param string $db_cap the feature	 * @return bool	 */	function has_cap( $db_cap ) {		$version = $this->db_version();		switch ( strtolower( $db_cap ) ) {			case 'collation' :    // @since 2.5.0			case 'group_concat' : // @since 2.7			case 'subqueries' :   // @since 2.7				return version_compare( $version, '4.1', '>=' );		};		return false;	}	/**	 * Retrieve the name of the function that called wpdb.	 *	 * Searches up the list of functions until it reaches	 * the one that would most logically had called this method.	 *	 * @since 2.5.0	 *	 * @return string The name of the calling function	 */	function get_caller() {		$trace  = array_reverse( debug_backtrace() );		$caller = array();		foreach ( $trace as $call ) {			if ( isset( $call['class'] ) && __CLASS__ == $call['class'] )				continue; // Filter out wpdb calls.			$caller[] = isset( $call['class'] ) ? "{$call['class']}->{$call['function']}" : $call['function'];		}		return join( ', ', $caller );	}	/**	 * The database version number.	 *	 * @return false|string false on failure, version number on success	 */	function db_version() {		return preg_replace( '/[^0-9.].*/', '', mysql_get_server_info( $this->dbh ) );	}}if ( ! isset( $wpdb ) ) {	/**	 * WordPress Database Object, if it isn't set already in wp-content/db.php	 * @global object $wpdb Creates a new wpdb object based on wp-config.php Constants for the database	 * @since 0.71	 */	$wpdb = new wpdb( DB_USER, DB_PASSWORD, DB_NAME, DB_HOST );}?>
<?php/** * Deprecated admin functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed * in a later version. * * @package WordPress * @subpackage Deprecated *//* * Deprecated functions come here to die. *//** * @since 2.1 * @deprecated 2.1 * @deprecated Use wp_tiny_mce(). * @see wp_tiny_mce() */function tinymce_include() {	_deprecated_function( __FUNCTION__, '2.1', 'wp_tiny_mce()' );	wp_tiny_mce();}/** * Unused Admin function. * * @since 2.0 * @deprecated 2.5 * */function documentation_link() {	_deprecated_function( __FUNCTION__, '2.5', '' );	return;}/** * Calculates the new dimentions for a downsampled image. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use wp_constrain_dimensions() * * @param int $width Current width of the image * @param int $height Current height of the image * @param int $wmax Maximum wanted width * @param int $hmax Maximum wanted height * @return mixed Array(height,width) of shrunk dimensions. */function wp_shrink_dimensions( $width, $height, $wmax = 128, $hmax = 96 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_constrain_dimensions()' );	return wp_constrain_dimensions( $width, $height, $wmax, $hmax );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated unknown * @deprecated Use wp_category_checklist() * @see wp_category_checklist() * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $popular_ids */function dropdown_categories( $default = 0, $parent = 0, $popular_ids = array() ) {	_deprecated_function( __FUNCTION__, '0.0', 'wp_category_checklist()' );	global $post_ID;	wp_category_checklist( $post_ID );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated unknown * @deprecated Use wp_link_category_checklist() * @see wp_link_category_checklist() * * @param unknown_type $default */function dropdown_link_categories( $default = 0 ) {	_deprecated_function( __FUNCTION__, '0.0', 'wp_link_category_checklist()' );	global $link_id;	wp_link_category_checklist( $link_id );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated 3.0.0 * @deprecated Use wp_dropdown_categories() * @see wp_dropdown_categories() * * @param unknown_type $currentcat * @param unknown_type $currentparent * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $categories * @return unknown */function wp_dropdown_cats( $currentcat = 0, $currentparent = 0, $parent = 0, $level = 0, $categories = 0 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_dropdown_categories()' );	if (!$categories )		$categories = get_categories( array('hide_empty' => 0) );	if ( $categories ) {		foreach ( $categories as $category ) {			if ( $currentcat != $category->term_id && $parent == $category->parent) {				$pad = str_repeat( '&#8211; ', $level );				$category->name = esc_html( $category->name );				echo "\n\t<option value='$category->term_id'";				if ( $currentparent == $category->term_id )					echo " selected='selected'";				echo ">$pad$category->name</option>";				wp_dropdown_cats( $currentcat, $currentparent, $category->term_id, $level +1, $categories );			}		}	} else {		return false;	}}/** * Register a setting and its sanitization callback * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use register_setting() * @see register_setting() * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function add_option_update_handler( $option_group, $option_name, $sanitize_callback = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'register_setting()' );	return register_setting( $option_group, $option_name, $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use unregister_setting() * @see unregister_setting() * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function remove_option_update_handler( $option_group, $option_name, $sanitize_callback = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'unregister_setting()' );	return unregister_setting( $option_group, $option_name, $sanitize_callback );}/** * Determines the language to use for CodePress syntax highlighting. * * @since 2.8.0 * @deprecated 3.0.0 * * @param string $filename**/function codepress_get_lang( $filename ) {	_deprecated_function( __FUNCTION__, '3.0' );	return;}/** * Adds Javascript required to make CodePress work on the theme/plugin editors. * * @since 2.8.0 * @deprecated 3.0.0**/function codepress_footer_js() {	_deprecated_function( __FUNCTION__, '3.0' );	return;}/** * Determine whether to use CodePress. * * @since 2.8 * @deprecated 3.0.0**/function use_codepress() {	_deprecated_function( __FUNCTION__, '3.0' );	return;}?>
<?php/** * Atom Publishing Protocol support for WordPress * * @version 1.0.5-dc *//** * WordPress is handling an Atom Publishing Protocol request. * * @var bool */define('APP_REQUEST', true);/** Set up WordPress environment */require_once('./wp-load.php');/** Atom Publishing Protocol Class */require_once(ABSPATH . WPINC . '/atomlib.php');/** Admin Image API for metadata updating */require_once(ABSPATH . '/wp-admin/includes/image.php');$_SERVER['PATH_INFO'] = preg_replace( '/.*\/wp-app\.php/', '', $_SERVER['REQUEST_URI'] );/** * Whether to enable Atom Publishing Protocol Logging. * * @name app_logging * @var int|bool */$app_logging = 0;/** * Whether to always authenticate user. Permanently set to true. * * @name always_authenticate * @var int|bool * @todo Should be an option somewhere */$always_authenticate = 1;/** * Writes logging info to a file. * * @since 2.2.0 * @uses $app_logging * @package WordPress * @subpackage Logging * * @param string $label Type of logging * @param string $msg Information describing logging reason. */function log_app($label,$msg) {	global $app_logging;	if ($app_logging) {		$fp = fopen( 'wp-app.log', 'a+');		$date = gmdate( 'Y-m-d H:i:s' );		fwrite($fp, "\n\n$date - $label\n$msg\n");		fclose($fp);	}}/** * Filter to add more post statuses. * * @since 2.2.0 * * @param string $where SQL statement to filter. * @return string Filtered SQL statement with added post_status for where clause. */function wa_posts_where_include_drafts_filter($where) {	$where = str_replace("post_status = 'publish'","post_status = 'publish' OR post_status = 'future' OR post_status = 'draft' OR post_status = 'inherit'", $where);	return $where;}add_filter('posts_where', 'wa_posts_where_include_drafts_filter');/** * WordPress AtomPub API implementation. * * @package WordPress * @subpackage Publishing * @since 2.2.0 */class AtomServer {	/**	 * ATOM content type.	 *	 * @since 2.2.0	 * @var string	 */	var $ATOM_CONTENT_TYPE = 'application/atom+xml';	/**	 * Categories ATOM content type.	 *	 * @since 2.2.0	 * @var string	 */	var $CATEGORIES_CONTENT_TYPE = 'application/atomcat+xml';	/**	 * Service ATOM content type.	 *	 * @since 2.3.0	 * @var string	 */	var $SERVICE_CONTENT_TYPE = 'application/atomsvc+xml';	/**	 * ATOM XML namespace.	 *	 * @since 2.3.0	 * @var string	 */	var $ATOM_NS = 'http://www.w3.org/2005/Atom';	/**	 * ATOMPUB XML namespace.	 *	 * @since 2.3.0	 * @var string	 */	var $ATOMPUB_NS = 'http://www.w3.org/2007/app';	/**	 * Entries path.	 *	 * @since 2.2.0	 * @var string	 */	var $ENTRIES_PATH = "posts";	/**	 * Categories path.	 *	 * @since 2.2.0	 * @var string	 */	var $CATEGORIES_PATH = "categories";	/**	 * Media path.	 *	 * @since 2.2.0	 * @var string	 */	var $MEDIA_PATH = "attachments";	/**	 * Entry path.	 *	 * @since 2.2.0	 * @var string	 */	var $ENTRY_PATH = "post";	/**	 * Service path.	 *	 * @since 2.2.0	 * @var string	 */	var $SERVICE_PATH = "service";	/**	 * Media single path.	 *	 * @since 2.2.0	 * @var string	 */	var $MEDIA_SINGLE_PATH = "attachment";	/**	 * ATOMPUB parameters.	 *	 * @since 2.2.0	 * @var array	 */	var $params = array();	/**	 * Supported ATOMPUB media types.	 *	 * @since 2.3.0	 * @var array	 */	var $media_content_types = array('image/*','audio/*','video/*');	/**	 * ATOMPUB content type(s).	 *	 * @since 2.2.0	 * @var array	 */	var $atom_content_types = array('application/atom+xml');	/**	 * ATOMPUB methods.	 *	 * @since 2.2.0	 * @var unknown_type	 */	var $selectors = array();	/**	 * Whether to do output.	 *	 * Support for head.	 *	 * @since 2.2.0	 * @var bool	 */	var $do_output = true;	/**	 * PHP4 constructor - Sets up object properties.	 *	 * @since 2.2.0	 * @return AtomServer	 */	function AtomServer() {		$this->script_name = array_pop(explode('/',$_SERVER['SCRIPT_NAME']));		$this->app_base = site_url( $this->script_name . '/' );		$this->selectors = array(			'@/service$@' =>				array('GET' => 'get_service'),			'@/categories$@' =>				array('GET' => 'get_categories_xml'),			'@/post/(\d+)$@' =>				array('GET' => 'get_post',						'PUT' => 'put_post',						'DELETE' => 'delete_post'),			'@/posts/?(\d+)?$@' =>				array('GET' => 'get_posts',						'POST' => 'create_post'),			'@/attachments/?(\d+)?$@' =>				array('GET' => 'get_attachment',						'POST' => 'create_attachment'),			'@/attachment/file/(\d+)$@' =>				array('GET' => 'get_file',						'PUT' => 'put_file',						'DELETE' => 'delete_file'),			'@/attachment/(\d+)$@' =>				array('GET' => 'get_attachment',						'PUT' => 'put_attachment',						'DELETE' => 'delete_attachment'),		);	}	/**	 * Handle ATOMPUB request.	 *	 * @since 2.2.0	 */	function handle_request() {		global $always_authenticate;		if ( !empty( $_SERVER['ORIG_PATH_INFO'] ) )			$path = $_SERVER['ORIG_PATH_INFO'];		else			$path = $_SERVER['PATH_INFO'];		$method = $_SERVER['REQUEST_METHOD'];		log_app('REQUEST',"$method $path\n================");		$this->process_conditionals();		//$this->process_conditionals();		// exception case for HEAD (treat exactly as GET, but don't output)		if ($method == 'HEAD') {			$this->do_output = false;			$method = 'GET';		}		// redirect to /service in case no path is found.		if (strlen($path) == 0 || $path == '/')			$this->redirect($this->get_service_url());		// check to see if AtomPub is enabled		if ( !get_option( 'enable_app' ) )			$this->forbidden( sprintf( __( 'AtomPub services are disabled on this site.  An admin user can enable them at %s' ), admin_url('options-writing.php') ) );		// dispatch		foreach ( $this->selectors as $regex => $funcs ) {			if ( preg_match($regex, $path, $matches) ) {				if ( isset($funcs[$method]) ) {					// authenticate regardless of the operation and set the current					// user. each handler will decide if auth is required or not.					if ( !$this->authenticate() ) {						if ( $always_authenticate )							$this->auth_required('Credentials required.');					}					array_shift($matches);					call_user_func_array(array(&$this,$funcs[$method]), $matches);					exit();				} else {					// only allow what we have handlers for...					$this->not_allowed(array_keys($funcs));				}			}		}		// oops, nothing found		$this->not_found();	}	/**	 * Retrieve XML for ATOMPUB service.	 *	 * @since 2.2.0	 */	function get_service() {		log_app('function','get_service()');		if ( !current_user_can( 'edit_posts' ) )			$this->auth_required( __( 'Sorry, you do not have the right to access this site.' ) );		$entries_url = esc_attr($this->get_entries_url());		$categories_url = esc_attr($this->get_categories_url());		$media_url = esc_attr($this->get_attachments_url());		$accepted_media_types = '';		foreach ($this->media_content_types as $med) {			$accepted_media_types = $accepted_media_types . "<accept>" . $med . "</accept>";		}		$atom_prefix="atom";		$atom_blogname = get_bloginfo('name');		$service_doc = <<<EOD<service xmlns="$this->ATOMPUB_NS" xmlns:$atom_prefix="$this->ATOM_NS">  <workspace>    <$atom_prefix:title>$atom_blogname Workspace</$atom_prefix:title>    <collection href="$entries_url">      <$atom_prefix:title>$atom_blogname Posts</$atom_prefix:title>      <accept>$this->ATOM_CONTENT_TYPE;type=entry</accept>      <categories href="$categories_url" />    </collection>    <collection href="$media_url">      <$atom_prefix:title>$atom_blogname Media</$atom_prefix:title>      $accepted_media_types    </collection>  </workspace></service>EOD;		$this->output($service_doc, $this->SERVICE_CONTENT_TYPE);	}	/**	 * Retrieve categories list in XML format.	 *	 * @since 2.2.0	 */	function get_categories_xml() {		log_app('function','get_categories_xml()');		if ( !current_user_can( 'edit_posts' ) )			$this->auth_required( __( 'Sorry, you do not have the right to access this site.' ) );		$home = esc_attr(get_bloginfo_rss('url'));		$categories = "";		$cats = get_categories(array('hierarchical' => 0, 'hide_empty' => 0));		foreach ( (array) $cats as $cat ) {			$categories .= "    <category term=\"" . esc_attr($cat->name) .  "\" />\n";		}		$output = <<<EOD<app:categories xmlns:app="$this->ATOMPUB_NS"	xmlns="$this->ATOM_NS"	fixed="yes" scheme="$home">	$categories</app:categories>EOD;		$this->output($output, $this->CATEGORIES_CONTENT_TYPE);	}	/**	 * Create new post.	 *	 * @since 2.2.0	 */	function create_post() {		global $blog_id, $user_ID;		$this->get_accepted_content_type($this->atom_content_types);		$parser = new AtomParser();		if ( !$parser->parse() )			$this->client_error();		$entry = array_pop($parser->feed->entries);		log_app('Received entry:', print_r($entry,true));		$catnames = array();		foreach ( $entry->categories as $cat ) {			array_push($catnames, $cat["term"]);		}		$wp_cats = get_categories(array('hide_empty' => false));		$post_category = array();		foreach ( $wp_cats as $cat ) {			if ( in_array($cat->name, $catnames) )				array_push($post_category, $cat->term_id);		}		$publish = ! ( isset( $entry->draft ) && 'yes' == trim( $entry->draft ) );		$cap = ($publish) ? 'publish_posts' : 'edit_posts';		if ( !current_user_can($cap) )			$this->auth_required(__('Sorry, you do not have the right to edit/publish new posts.'));		$blog_ID = (int ) $blog_id;		$post_status = ($publish) ? 'publish' : 'draft';		$post_author = (int) $user_ID;		$post_title = $entry->title[1];		$post_content = $entry->content[1];		$post_excerpt = $entry->summary[1];		$pubtimes = $this->get_publish_time($entry->published);		$post_date = $pubtimes[0];		$post_date_gmt = $pubtimes[1];		if ( isset( $_SERVER['HTTP_SLUG'] ) )			$post_name = $_SERVER['HTTP_SLUG'];		$post_data = compact('blog_ID', 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'post_name');		$this->escape($post_data);		log_app('Inserting Post. Data:', print_r($post_data,true));		$postID = wp_insert_post($post_data);		if ( is_wp_error( $postID ) )			$this->internal_error($postID->get_error_message());		if ( !$postID )			$this->internal_error(__('Sorry, your entry could not be posted. Something wrong happened.'));		// getting warning here about unable to set headers		// because something in the cache is printing to the buffer		// could we clean up wp_set_post_categories or cache to not print		// this could affect our ability to send back the right headers		@wp_set_post_categories($postID, $post_category);		do_action( 'atompub_create_post', $postID, $entry );		$output = $this->get_entry($postID);		log_app('function',"create_post($postID)");		$this->created($postID, $output);	}	/**	 * Retrieve post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function get_post($postID) {		global $entry;		if ( !current_user_can( 'edit_post', $postID ) )			$this->auth_required( __( 'Sorry, you do not have the right to access this post.' ) );		$this->set_current_entry($postID);		$output = $this->get_entry($postID);		log_app('function',"get_post($postID)");		$this->output($output);	}	/**	 * Update post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function put_post($postID) {		// checked for valid content-types (atom+xml)		// quick check and exit		$this->get_accepted_content_type($this->atom_content_types);		$parser = new AtomParser();		if ( !$parser->parse() )			$this->bad_request();		$parsed = array_pop($parser->feed->entries);		log_app('Received UPDATED entry:', print_r($parsed,true));		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $entry['ID']) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		$publish = ! ( isset($parsed->draft) && 'yes' == trim($parsed->draft) );		$post_status = ($publish) ? 'publish' : 'draft';		extract($entry);		$post_title = $parsed->title[1];		$post_content = $parsed->content[1];		$post_excerpt = $parsed->summary[1];		$pubtimes = $this->get_publish_time($entry->published);		$post_date = $pubtimes[0];		$post_date_gmt = $pubtimes[1];		$pubtimes = $this->get_publish_time($parsed->updated);		$post_modified = $pubtimes[0];		$post_modified_gmt = $pubtimes[1];		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt');		$this->escape($postdata);		$result = wp_update_post($postdata);		if ( !$result )			$this->internal_error(__('For some strange yet very annoying reason, this post could not be edited.'));		do_action( 'atompub_put_post', $ID, $parsed );		log_app('function',"put_post($postID)");		$this->ok();	}	/**	 * Remove post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function delete_post($postID) {		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to delete this post.'));		if ( $entry['post_type'] == 'attachment' ) {			$this->delete_attachment($postID);		} else {			$result = wp_delete_post($postID);			if ( !$result ) {				$this->internal_error(__('For some strange yet very annoying reason, this post could not be deleted.'));			}			log_app('function',"delete_post($postID)");			$this->ok();		}	}	/**	 * Retrieve attachment.	 *	 * @since 2.2.0	 *	 * @param int $postID Optional. Post ID.	 */	function get_attachment($postID = null) {		if ( !current_user_can( 'upload_files' ) )			$this->auth_required( __( 'Sorry, you do not have permission to upload files.' ) );		if ( !isset($postID) ) {			$this->get_attachments();		} else {			$this->set_current_entry($postID);			$output = $this->get_entry($postID, 'attachment');			log_app('function',"get_attachment($postID)");			$this->output($output);		}	}	/**	 * Create new attachment.	 *	 * @since 2.2.0	 */	function create_attachment() {		$type = $this->get_accepted_content_type();		if ( !current_user_can('upload_files') )			$this->auth_required(__('You do not have permission to upload files.'));		$fp = fopen("php://input", "rb");		$bits = null;		while ( !feof($fp) ) {			$bits .= fread($fp, 4096);		}		fclose($fp);		$slug = '';		if ( isset( $_SERVER['HTTP_SLUG'] ) )			$slug = sanitize_file_name( $_SERVER['HTTP_SLUG'] );		elseif ( isset( $_SERVER['HTTP_TITLE'] ) )			$slug = sanitize_file_name( $_SERVER['HTTP_TITLE'] );		elseif ( empty( $slug ) ) // just make a random name			$slug = substr( md5( uniqid( microtime() ) ), 0, 7);		$ext = preg_replace( '|.*/([a-z0-9]+)|', '$1', $_SERVER['CONTENT_TYPE'] );		$slug = "$slug.$ext";		$file = wp_upload_bits( $slug, NULL, $bits);		log_app('wp_upload_bits returns:',print_r($file,true));		$url = $file['url'];		$file = $file['file'];		do_action('wp_create_file_in_uploads', $file); // replicate		// Construct the attachment array		$attachment = array(			'post_title' => $slug,			'post_content' => $slug,			'post_status' => 'attachment',			'post_parent' => 0,			'post_mime_type' => $type,			'guid' => $url			);		// Save the data		$postID = wp_insert_attachment($attachment, $file);		if (!$postID)			$this->internal_error(__('Sorry, your entry could not be posted. Something wrong happened.'));		$output = $this->get_entry($postID, 'attachment');		$this->created($postID, $output, 'attachment');		log_app('function',"create_attachment($postID)");	}	/**	 * Update attachment.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function put_attachment($postID) {		// checked for valid content-types (atom+xml)		// quick check and exit		$this->get_accepted_content_type($this->atom_content_types);		$parser = new AtomParser();		if (!$parser->parse()) {			$this->bad_request();		}		$parsed = array_pop($parser->feed->entries);		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $entry['ID']) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		extract($entry);		$post_title = $parsed->title[1];		$post_content = $parsed->summary[1];		$pubtimes = $this->get_publish_time($parsed->updated);		$post_modified = $pubtimes[0];		$post_modified_gmt = $pubtimes[1];		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'post_modified', 'post_modified_gmt');		$this->escape($postdata);		$result = wp_update_post($postdata);		if ( !$result )			$this->internal_error(__('For some strange yet very annoying reason, this post could not be edited.'));		log_app('function',"put_attachment($postID)");		$this->ok();	}	/**	 * Remove attachment.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function delete_attachment($postID) {		log_app('function',"delete_attachment($postID). File '$location' deleted.");		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to delete this post.'));		$location = get_post_meta($entry['ID'], '_wp_attached_file', true);		$filetype = wp_check_filetype($location);		if ( !isset($location) || 'attachment' != $entry['post_type'] || empty($filetype['ext']) )			$this->internal_error(__('Error ocurred while accessing post metadata for file location.'));		// delete file		@unlink($location);		// delete attachment		$result = wp_delete_post($postID);		if ( !$result )			$this->internal_error(__('For some strange yet very annoying reason, this post could not be deleted.'));		log_app('function',"delete_attachment($postID). File '$location' deleted.");		$this->ok();	}	/**	 * Retrieve attachment from post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function get_file($postID) {		// check for not found		global $entry;		$this->set_current_entry($postID);		// then whether user can edit the specific post		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		$location = get_post_meta($entry['ID'], '_wp_attached_file', true);		$location = get_option ('upload_path') . '/' . $location;		$filetype = wp_check_filetype($location);		if ( !isset($location) || 'attachment' != $entry['post_type'] || empty($filetype['ext']) )			$this->internal_error(__('Error ocurred while accessing post metadata for file location.'));		status_header('200');		header('Content-Type: ' . $entry['post_mime_type']);		header('Connection: close');		if ( $fp = fopen($location, "rb") ) {			status_header('200');			header('Content-Type: ' . $entry['post_mime_type']);			header('Connection: close');			while ( !feof($fp) ) {				echo fread($fp, 4096);			}			fclose($fp);		} else {			status_header ('404');		}		log_app('function',"get_file($postID)");		exit;	}	/**	 * Upload file to blog and add attachment to post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function put_file($postID) {		// first check if user can upload		if ( !current_user_can('upload_files') )			$this->auth_required(__('You do not have permission to upload files.'));		// check for not found		global $entry;		$this->set_current_entry($postID);		// then whether user can edit the specific post		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		$upload_dir = wp_upload_dir( );		$location = get_post_meta($entry['ID'], '_wp_attached_file', true);		$filetype = wp_check_filetype($location);		$location = "{$upload_dir['basedir']}/{$location}";		if (!isset($location) || 'attachment' != $entry['post_type'] || empty($filetype['ext']))			$this->internal_error(__('Error ocurred while accessing post metadata for file location.'));		$fp = fopen("php://input", "rb");		$localfp = fopen($location, "w+");		while ( !feof($fp) ) {			fwrite($localfp,fread($fp, 4096));		}		fclose($fp);		fclose($localfp);		$ID = $entry['ID'];		$pubtimes = $this->get_publish_time($entry->published);		$post_date = $pubtimes[0];		$post_date_gmt = $pubtimes[1];		$pubtimes = $this->get_publish_time($parsed->updated);		$post_modified = $pubtimes[0];		$post_modified_gmt = $pubtimes[1];		$post_data = compact('ID', 'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt');		$result = wp_update_post($post_data);		if ( !$result )			$this->internal_error(__('Sorry, your entry could not be posted. Something wrong happened.'));		wp_update_attachment_metadata( $postID, wp_generate_attachment_metadata( $postID, $location ) );		log_app('function',"put_file($postID)");		$this->ok();	}	/**	 * Retrieve entries URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @return string	 */	function get_entries_url($page = null) {		if ( isset($GLOBALS['post_type']) && ( $GLOBALS['post_type'] == 'attachment' ) )			$path = $this->MEDIA_PATH;		else			$path = $this->ENTRIES_PATH;		$url = $this->app_base . $path;		if ( isset($page) && is_int($page) )			$url .= "/$page";		return $url;	}	/**	 * Display entries URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 */	function the_entries_url($page = null) {		echo $this->get_entries_url($page);	}	/**	 * Retrieve categories URL.	 *	 * @since 2.2.0	 *	 * @param mixed $deprecated Not used.	 * @return string	 */	function get_categories_url($deprecated = '') {		if ( !empty( $deprecated ) )			_deprecated_argument( __FUNCTION__, '2.5' );		return $this->app_base . $this->CATEGORIES_PATH;	}	/**	 * Display category URL.	 *	 * @since 2.2.0	 */	function the_categories_url() {		echo $this->get_categories_url();	}	/**	 * Retrieve attachment URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @return string	 */	function get_attachments_url($page = null) {		$url = $this->app_base . $this->MEDIA_PATH;		if (isset($page) && is_int($page)) {			$url .= "/$page";		}		return $url;	}	/**	 * Display attachment URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 */	function the_attachments_url($page = null) {		echo $this->get_attachments_url($page);	}	/**	 * Retrieve service URL.	 *	 * @since 2.3.0	 *	 * @return string	 */	function get_service_url() {		return $this->app_base . $this->SERVICE_PATH;	}	/**	 * Retrieve entry URL.	 *	 * @since 2.7.0	 *	 * @param int $postID Post ID.	 * @return string	 */	function get_entry_url($postID = null) {		if (!isset($postID)) {			global $post;			$postID = (int) $post->ID;		}		$url = $this->app_base . $this->ENTRY_PATH . "/$postID";		log_app('function',"get_entry_url() = $url");		return $url;	}	/**	 * Display entry URL.	 *	 * @since 2.7.0	 *	 * @param int $postID Post ID.	 */	function the_entry_url($postID = null) {		echo $this->get_entry_url($postID);	}	/**	 * Retrieve media URL.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 * @return string	 */	function get_media_url($postID = null) {		if (!isset($postID)) {			global $post;			$postID = (int) $post->ID;		}		$url = $this->app_base . $this->MEDIA_SINGLE_PATH ."/file/$postID";		log_app('function',"get_media_url() = $url");		return $url;	}	/**	 * Display the media URL.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function the_media_url($postID = null) {		echo $this->get_media_url($postID);	}	/**	 * Set the current entry to post ID.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function set_current_entry($postID) {		global $entry;		log_app('function',"set_current_entry($postID)");		if (!isset($postID)) {			// $this->bad_request();			$this->not_found();		}		$entry = wp_get_single_post($postID,ARRAY_A);		if (!isset($entry) || !isset($entry['ID']))			$this->not_found();		return;	}	/**	 * Display posts XML.	 *	 * @since 2.2.0	 *	 * @param int $page Optional. Page ID.	 * @param string $post_type Optional, default is 'post'. Post Type.	 */	function get_posts($page = 1, $post_type = 'post') {			log_app('function',"get_posts($page, '$post_type')");			$feed = $this->get_feed($page, $post_type);			$this->output($feed);	}	/**	 * Display attachment XML.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @param string $post_type Optional, default is 'attachment'. Post type.	 */	function get_attachments($page = 1, $post_type = 'attachment') {		log_app('function',"get_attachments($page, '$post_type')");		$GLOBALS['post_type'] = $post_type;		$feed = $this->get_feed($page, $post_type);		$this->output($feed);	}	/**	 * Retrieve feed XML.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @param string $post_type Optional, default is post. Post type.	 * @return string	 */	function get_feed($page = 1, $post_type = 'post') {		global $post, $wp, $wp_query, $posts, $wpdb, $blog_id;		log_app('function',"get_feed($page, '$post_type')");		ob_start();		$this->ENTRY_PATH = $post_type;		if (!isset($page)) {			$page = 1;		}		$page = (int) $page;		$count = get_option('posts_per_rss');		wp('posts_per_page=' . $count . '&offset=' . ($count * ($page-1) . '&orderby=modified'));		$post = $GLOBALS['post'];		$posts = $GLOBALS['posts'];		$wp = $GLOBALS['wp'];		$wp_query = $GLOBALS['wp_query'];		$wpdb = $GLOBALS['wpdb'];		$blog_id = (int) $GLOBALS['blog_id'];		log_app('function',"query_posts(# " . print_r($wp_query, true) . "#)");		log_app('function',"total_count(# $wp_query->max_num_pages #)");		$last_page = $wp_query->max_num_pages;		$next_page = (($page + 1) > $last_page) ? NULL : $page + 1;		$prev_page = ($page - 1) < 1 ? NULL : $page - 1;		$last_page = ((int)$last_page == 1 || (int)$last_page == 0) ? NULL : (int) $last_page;		$self_page = $page > 1 ? $page : NULL;?><feed xmlns="<?php echo $this->ATOM_NS ?>" xmlns:app="<?php echo $this->ATOMPUB_NS ?>" xml:lang="<?php echo get_option('rss_language'); ?>" <?php do_action('app_ns'); ?> ><id><?php $this->the_entries_url() ?></id><updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated><title type="text"><?php bloginfo_rss('name') ?></title><subtitle type="text"><?php bloginfo_rss("description") ?></subtitle><link rel="first" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url() ?>" /><?php if (isset($prev_page)): ?><link rel="previous" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($prev_page) ?>" /><?php endif; ?><?php if (isset($next_page)): ?><link rel="next" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($next_page) ?>" /><?php endif; ?><link rel="last" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($last_page) ?>" /><link rel="self" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($self_page) ?>" /><rights type="text">Copyright <?php echo date('Y'); ?></rights><?php do_action('app_head'); ?><?php if ( have_posts() ) {			while ( have_posts() ) {				the_post();				$this->echo_entry();			}		}?></feed><?php		$feed = ob_get_contents();		ob_end_clean();		return $feed;	}	/**	 * Display entry XML.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 * @param string $post_type Optional, default is post. Post type.	 * @return string.	 */	function get_entry($postID, $post_type = 'post') {		log_app('function',"get_entry($postID, '$post_type')");		ob_start();		switch($post_type) {			case 'post':				$varname = 'p';				break;			case 'attachment':				$this->ENTRY_PATH = 'attachment';				$varname = 'attachment_id';				break;		}		query_posts($varname . '=' . $postID);		if ( have_posts() ) {			while ( have_posts() ) {				the_post();				$this->echo_entry();				log_app('$post',print_r($GLOBALS['post'],true));				$entry = ob_get_contents();				break;			}		}		ob_end_clean();		log_app('get_entry returning:',$entry);		return $entry;	}	/**	 * Display post content XML.	 *	 * @since 2.3.0	 */	function echo_entry() { ?><entry xmlns="<?php echo $this->ATOM_NS ?>"       xmlns:app="<?php echo $this->ATOMPUB_NS ?>" xml:lang="<?php echo get_option('rss_language'); ?>">	<id><?php the_guid( $GLOBALS['post']->ID ); ?></id><?php list($content_type, $content) = prep_atom_text_construct(get_the_title()); ?>	<title type="<?php echo $content_type ?>"><?php echo $content ?></title>	<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>	<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>	<app:edited><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></app:edited>	<app:control>		<app:draft><?php echo ($GLOBALS['post']->post_status == 'draft' ? 'yes' : 'no') ?></app:draft>	</app:control>	<author>		<name><?php the_author()?></name><?php if ( get_the_author_meta('url') && get_the_author_meta('url') != 'http://' ) { ?>		<uri><?php the_author_meta('url') ?></uri><?php } ?>	</author><?php if ($GLOBALS['post']->post_type == 'attachment') { ?>	<link rel="edit-media" href="<?php $this->the_media_url() ?>" />	<content type="<?php echo $GLOBALS['post']->post_mime_type ?>" src="<?php the_guid() ; ?>"/><?php } else { ?>	<link href="<?php the_permalink_rss() ?>" /><?php if ( strlen( $GLOBALS['post']->post_content ) ) :list($content_type, $content) = prep_atom_text_construct(get_the_content()); ?>	<content type="<?php echo $content_type ?>"><?php echo $content ?></content><?php endif; ?><?php } ?>	<link rel="edit" href="<?php $this->the_entry_url() ?>" />	<?php the_category_rss( 'atom' ); ?><?php list($content_type, $content) = prep_atom_text_construct(get_the_excerpt()); ?>	<summary type="<?php echo $content_type ?>"><?php echo $content ?></summary>	<?php do_action('app_entry'); ?></entry><?php }	/**	 * Set 'OK' (200) status header.	 *	 * @since 2.2.0	 */	function ok() {		log_app('Status','200: OK');		header('Content-Type: text/plain');		status_header('200');		exit;	}	/**	 * Set 'No Content' (204) status header.	 *	 * @since 2.2.0	 */	function no_content() {		log_app('Status','204: No Content');		header('Content-Type: text/plain');		status_header('204');		echo "Moved to Trash.";		exit;	}	/**	 * Display 'Internal Server Error' (500) status header.	 *	 * @since 2.2.0	 *	 * @param string $msg Optional. Status string.	 */	function internal_error($msg = 'Internal Server Error') {		log_app('Status','500: Server Error');		header('Content-Type: text/plain');		status_header('500');		echo $msg;		exit;	}	/**	 * Set 'Bad Request' (400) status header.	 *	 * @since 2.2.0	 */	function bad_request() {		log_app('Status','400: Bad Request');		header('Content-Type: text/plain');		status_header('400');		exit;	}	/**	 * Set 'Length Required' (411) status header.	 *	 * @since 2.2.0	 */	function length_required() {		log_app('Status','411: Length Required');		header("HTTP/1.1 411 Length Required");		header('Content-Type: text/plain');		status_header('411');		exit;	}	/**	 * Set 'Unsupported Media Type' (415) status header.	 *	 * @since 2.2.0	 */	function invalid_media() {		log_app('Status','415: Unsupported Media Type');		header("HTTP/1.1 415 Unsupported Media Type");		header('Content-Type: text/plain');		exit;	}	/**	 * Set 'Forbidden' (403) status header.	 *	 * @since 2.6.0	 */	function forbidden($reason='') {		log_app('Status','403: Forbidden');		header('Content-Type: text/plain');		status_header('403');		echo $reason;		exit;	}	/**	 * Set 'Not Found' (404) status header.	 *	 * @since 2.2.0	 */	function not_found() {		log_app('Status','404: Not Found');		header('Content-Type: text/plain');		status_header('404');		exit;	}	/**	 * Set 'Not Allowed' (405) status header.	 *	 * @since 2.2.0	 */	function not_allowed($allow) {		log_app('Status','405: Not Allowed');		header('Allow: ' . join(',', $allow));		status_header('405');		exit;	}	/**	 * Display Redirect (302) content and set status headers.	 *	 * @since 2.3.0	 */	function redirect($url) {		log_app('Status','302: Redirect');		$escaped_url = esc_attr($url);		$content = <<<EOD<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html>  <head>    <title>302 Found</title>  </head><body>  <h1>Found</h1>  <p>The document has moved <a href="$escaped_url">here</a>.</p>  </body></html>EOD;		header('HTTP/1.1 302 Moved');		header('Content-Type: text/html');		header('Location: ' . $url);		echo $content;		exit;	}	/**	 * Set 'Client Error' (400) status header.	 *	 * @since 2.2.0	 */	function client_error($msg = 'Client Error') {		log_app('Status','400: Client Error');		header('Content-Type: text/plain');		status_header('400');		exit;	}	/**	 * Set created status headers (201).	 *	 * Sets the 'content-type', 'content-location', and 'location'.	 *	 * @since 2.2.0	 */	function created($post_ID, $content, $post_type = 'post') {		log_app('created()::$post_ID',"$post_ID, $post_type");		$edit = $this->get_entry_url($post_ID);		switch($post_type) {			case 'post':				$ctloc = $this->get_entry_url($post_ID);				break;			case 'attachment':				$edit = $this->app_base . "attachments/$post_ID";				break;		}		header("Content-Type: $this->ATOM_CONTENT_TYPE");		if (isset($ctloc))			header('Content-Location: ' . $ctloc);		header('Location: ' . $edit);		status_header('201');		echo $content;		exit;	}	/**	 * Set 'Auth Required' (401) headers.	 *	 * @since 2.2.0	 *	 * @param string $msg Status header content and HTML content.	 */	function auth_required($msg) {		log_app('Status','401: Auth Required');		nocache_headers();		header('WWW-Authenticate: Basic realm="WordPress Atom Protocol"');		header("HTTP/1.1 401 $msg");		header('Status: 401 ' . $msg);		header('Content-Type: text/html');		$content = <<<EOD<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html>  <head>    <title>401 Unauthorized</title>  </head><body>    <h1>401 Unauthorized</h1>    <p>$msg</p>  </body></html>EOD;		echo $content;		exit;	}	/**	 * Display XML and set headers with content type.	 *	 * @since 2.2.0	 *	 * @param string $xml Display feed content.	 * @param string $ctype Optional, default is 'atom+xml'. Feed content type.	 */	function output($xml, $ctype = 'application/atom+xml') {			status_header('200');			$xml = '<?xml version="1.0" encoding="' . strtolower(get_option('blog_charset')) . '"?>'."\n".$xml;			header('Connection: close');			header('Content-Length: '. strlen($xml));			header('Content-Type: ' . $ctype);			header('Content-Disposition: attachment; filename=atom.xml');			header('Date: '. date('r'));			if ($this->do_output)				echo $xml;			log_app('function', "output:\n$xml");			exit;	}	/**	 * Sanitize content for database usage.	 *	 * @since 2.2.0	 *	 * @param array $array Sanitize array and multi-dimension array.	 */	function escape(&$array) {		global $wpdb;		foreach ($array as $k => $v) {				if (is_array($v)) {						$this->escape($array[$k]);				} else if (is_object($v)) {						//skip				} else {						$array[$k] = $wpdb->escape($v);				}		}	}	/**	 * Access credential through various methods and perform login.	 *	 * @since 2.2.0	 *	 * @return bool	 */	function authenticate() {		log_app("authenticate()",print_r($_ENV, true));		// if using mod_rewrite/ENV hack		// http://www.besthostratings.com/articles/http-auth-php-cgi.html		if (isset($_SERVER['HTTP_AUTHORIZATION'])) {			list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) =				explode(':', base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6)));		} else if (isset($_SERVER['REDIRECT_REMOTE_USER'])) {			// Workaround for setups that do not forward HTTP_AUTHORIZATION			// See http://trac.wordpress.org/ticket/7361			list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) =				explode(':', base64_decode(substr($_SERVER['REDIRECT_REMOTE_USER'], 6)));		}		// If Basic Auth is working...		if (isset($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) {			log_app("Basic Auth",$_SERVER['PHP_AUTH_USER']);			$user = wp_authenticate($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']);			if ( $user && !is_wp_error($user) ) {				wp_set_current_user($user->ID);				log_app("authenticate()", $user->user_login);				return true;			}		}		return false;	}	/**	 * Retrieve accepted content types.	 *	 * @since 2.2.0	 *	 * @param array $types Optional. Content Types.	 * @return string	 */	function get_accepted_content_type($types = null) {		if (!isset($types)) {			$types = $this->media_content_types;		}		if (!isset($_SERVER['CONTENT_LENGTH']) || !isset($_SERVER['CONTENT_TYPE'])) {			$this->length_required();		}		$type = $_SERVER['CONTENT_TYPE'];		list($type,$subtype) = explode('/',$type);		list($subtype) = explode(";",$subtype); // strip MIME parameters		log_app("get_accepted_content_type", "type=$type, subtype=$subtype");		foreach($types as $t) {			list($acceptedType,$acceptedSubtype) = explode('/',$t);			if ($acceptedType == '*' || $acceptedType == $type) {				if ($acceptedSubtype == '*' || $acceptedSubtype == $subtype)					return $type . "/" . $subtype;			}		}		$this->invalid_media();	}	/**	 * Process conditionals for posts.	 *	 * @since 2.2.0	 */	function process_conditionals() {		if (empty($this->params)) return;		if ($_SERVER['REQUEST_METHOD'] == 'DELETE') return;		switch($this->params[0]) {			case $this->ENTRY_PATH:				global $post;				$post = wp_get_single_post($this->params[1]);				$wp_last_modified = get_post_modified_time('D, d M Y H:i:s', true);				$post = NULL;				break;			case $this->ENTRIES_PATH:				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';				break;			default:				return;		}		$wp_etag = md5($wp_last_modified);		@header("Last-Modified: $wp_last_modified");		@header("ETag: $wp_etag");		// Support for Conditional GET		if (isset($_SERVER['HTTP_IF_NONE_MATCH']))			$client_etag = stripslashes($_SERVER['HTTP_IF_NONE_MATCH']);		else			$client_etag = false;		$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE']);		// If string is empty, return 0. If not, attempt to parse into a timestamp		$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;		// Make a timestamp for our most recent modification...		$wp_modified_timestamp = strtotime($wp_last_modified);		if ( ($client_last_modified && $client_etag) ?		(($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :		(($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {			status_header( 304 );			exit;		}	}	/**	 * Convert RFC3339 time string to timestamp.	 *	 * @since 2.3.0	 *	 * @param string $str String to time.	 * @return bool|int false if format is incorrect.	 */	function rfc3339_str2time($str) {		$match = false;		if (!preg_match("/(\d{4}-\d{2}-\d{2})T(\d{2}\:\d{2}\:\d{2})\.?\d{0,3}(Z|[+-]+\d{2}\:\d{2})/", $str, $match))			return false;		if ($match[3] == 'Z')			$match[3] = '+0000';		return strtotime($match[1] . " " . $match[2] . " " . $match[3]);	}	/**	 * Retrieve published time to display in XML.	 *	 * @since 2.3.0	 *	 * @param string $published Time string.	 * @return string	 */	function get_publish_time($published) {		$pubtime = $this->rfc3339_str2time($published);		if (!$pubtime) {			return array(current_time('mysql'),current_time('mysql',1));		} else {			return array(date("Y-m-d H:i:s", $pubtime), gmdate("Y-m-d H:i:s", $pubtime));		}	}}/** * AtomServer * @var AtomServer * @global object $server */$server = new AtomServer();$server->handle_request();?>
<?php/** * Taxonomy API * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 *///// Taxonomy Registration///** * Creates the initial taxonomies when 'init' action is fired. */function create_initial_taxonomies() {	register_taxonomy( 'category', 'post', array(		'hierarchical' => true,	 	'update_count_callback' => '_update_post_term_count',		'query_var' => false,		'rewrite' => false,		'public' => true,		'show_ui' => true,		'_builtin' => true,	) ) ;	register_taxonomy( 'post_tag', 'post', array(	 	'hierarchical' => false,		'update_count_callback' => '_update_post_term_count',		'query_var' => false,		'rewrite' => false,		'public' => true,		'show_ui' => true,		'_builtin' => true,	) );	register_taxonomy( 'nav_menu', 'nav_menu_item', array(		'hierarchical' => false,		'labels' => array(			'name' => __( 'Navigation Menus' ),			'singular_name' => __( 'Navigation Menu' ),		),		'query_var' => false,		'rewrite' => false,		'show_ui' => false,		'_builtin' => true,		'show_in_nav_menus' => false,	) ) ;	register_taxonomy( 'link_category', 'link', array(		'hierarchical' => false,		'labels' => array(			'name' => __( 'Categories' ),			'singular_name' => __( 'Category' ),			'update_item' => __( 'Update Category' ),		),		'query_var' => false,		'rewrite' => false,		'public' => false,		'show_ui' => false,		'_builtin' => true,	) ) ;}add_action( 'init', 'create_initial_taxonomies', 0 ); // highest priority/** * Get a list of registered taxonomy objects. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * @uses $wp_taxonomies * @see register_taxonomy * * @param array $args An array of key => value arguments to match against the taxonomy objects. * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of taxonomy names or objects */function get_taxonomies( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_taxonomies;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_taxonomies, $args, $operator, $field);}/** * Return all of the taxonomy names that are of $object_type. * * It appears that this function can be used to find all of the names inside of * $wp_taxonomies global variable. * * <code><?php $taxonomies = get_object_taxonomies('post'); ?></code> Should * result in <code>Array('category', 'post_tag')</code> * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wp_taxonomies * * @param array|string|object $object Name of the type of taxonomy object, or an object (row from posts) * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default. * @return array The names of all taxonomy of $object_type. */function get_object_taxonomies($object, $output = 'names') {	global $wp_taxonomies;	if ( is_object($object) ) {		if ( $object->post_type == 'attachment' )			return get_attachment_taxonomies($object);		$object = $object->post_type;	}	$object = (array) $object;	$taxonomies = array();	foreach ( (array) $wp_taxonomies as $tax_name => $tax_obj ) {		if ( array_intersect($object, (array) $tax_obj->object_type) ) {			if ( 'names' == $output )				$taxonomies[] = $tax_name;			else				$taxonomies[ $tax_name ] = $tax_obj;		}	}	return $taxonomies;}/** * Retrieves the taxonomy object of $taxonomy. * * The get_taxonomy function will first check that the parameter string given * is a taxonomy object and if it is, it will return it. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wp_taxonomies * @uses taxonomy_exists() Checks whether taxonomy exists * * @param string $taxonomy Name of taxonomy object to return * @return object|bool The Taxonomy Object or false if $taxonomy doesn't exist */function get_taxonomy( $taxonomy ) {	global $wp_taxonomies;	if ( ! taxonomy_exists( $taxonomy ) )		return false;	return $wp_taxonomies[$taxonomy];}/** * Checks that the taxonomy name exists. * * Formerly is_taxonomy(), introduced in 2.3.0. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * * @uses $wp_taxonomies * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy exists. */function taxonomy_exists( $taxonomy ) {	global $wp_taxonomies;	return isset( $wp_taxonomies[$taxonomy] );}/** * Whether the taxonomy object is hierarchical. * * Checks to make sure that the taxonomy is an object first. Then Gets the * object, and finally returns the hierarchical value in the object. * * A false return value might also mean that the taxonomy does not exist. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses taxonomy_exists() Checks whether taxonomy exists * @uses get_taxonomy() Used to get the taxonomy object * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy is hierarchical */function is_taxonomy_hierarchical($taxonomy) {	if ( ! taxonomy_exists($taxonomy) )		return false;	$taxonomy = get_taxonomy($taxonomy);	return $taxonomy->hierarchical;}/** * Create or modify a taxonomy object. Do not use before init. * * A simple function for creating or modifying a taxonomy object based on the * parameters given. The function will accept an array (third optional * parameter), along with strings for the taxonomy name and another string for * the object type. * * Nothing is returned, so expect error maybe or use taxonomy_exists() to check * whether taxonomy exists. * * Optional $args contents: * * label - Name of the taxonomy shown in the menu. Usually plural. If not set, labels['name'] will be used. * * hierarchical - has some defined purpose at other parts of the API and is a * boolean value. * * update_count_callback - works much like a hook, in that it will be called * when the count is updated. * * rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize * permastruct; default will use $taxonomy as slug. * * query_var - false to prevent queries, or string to customize query var * (?$query_var=$term); default will use $taxonomy as query var. * * public - If the taxonomy should be publically queryable; //@TODO not implemented. * defaults to true. * * show_ui - If the WordPress UI admin tags UI should apply to this taxonomy; * defaults to public. * * show_in_nav_menus - true makes this taxonomy available for selection in navigation menus. * Defaults to public. * * show_tagcloud - false to prevent the taxonomy being listed in the Tag Cloud Widget; * defaults to show_ui which defalts to public. * * labels - An array of labels for this taxonomy. You can see accepted values in {@link get_taxonomy_labels()}. By default tag labels are used for non-hierarchical types and category labels for hierarchical ones. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wp_taxonomies Inserts new taxonomy object into the list * @uses $wp_rewrite Adds rewrite tags and permastructs * @uses $wp Adds query vars * * @param string $taxonomy Name of taxonomy object * @param array|string $object_type Name of the object type for the taxonomy object. * @param array|string $args See above description for the two keys values. */function register_taxonomy( $taxonomy, $object_type, $args = array() ) {	global $wp_taxonomies, $wp_rewrite, $wp;	if ( ! is_array($wp_taxonomies) )		$wp_taxonomies = array();	$defaults = array(	'hierarchical' => false,						'update_count_callback' => '',						'rewrite' => true,						'query_var' => $taxonomy,						'public' => true,						'show_ui' => null,						'show_tagcloud' => null,						'_builtin' => false,						'labels' => array(),						'capabilities' => array(),						'show_in_nav_menus' => null,					);	$args = wp_parse_args($args, $defaults);	if ( false !== $args['query_var'] && !empty($wp) ) {		if ( true === $args['query_var'] )			$args['query_var'] = $taxonomy;		$args['query_var'] = sanitize_title_with_dashes($args['query_var']);		$wp->add_query_var($args['query_var']);	}	if ( false !== $args['rewrite'] && '' != get_option('permalink_structure') ) {		$args['rewrite'] = wp_parse_args($args['rewrite'], array(			'slug' => sanitize_title_with_dashes($taxonomy),			'with_front' => true,		));		$wp_rewrite->add_rewrite_tag("%$taxonomy%", '([^/]+)', $args['query_var'] ? "{$args['query_var']}=" : "taxonomy=$taxonomy&term=");		$wp_rewrite->add_permastruct($taxonomy, "{$args['rewrite']['slug']}/%$taxonomy%", $args['rewrite']['with_front']);	}	if ( is_null($args['show_ui']) )		$args['show_ui'] = $args['public'];	// Whether to show this type in nav-menus.php. Defaults to the setting for public.	if ( null === $args['show_in_nav_menus'] )		$args['show_in_nav_menus'] = $args['public'];	if ( is_null($args['show_tagcloud']) )		$args['show_tagcloud'] = $args['show_ui'];	$default_caps = array(		'manage_terms' => 'manage_categories',		'edit_terms'   => 'manage_categories',		'delete_terms' => 'manage_categories',		'assign_terms' => 'edit_posts',	);	$args['cap'] = (object) array_merge( $default_caps, $args['capabilities'] );	unset( $args['capabilities'] );	$args['name'] = $taxonomy;	$args['object_type'] = (array) $object_type;	$args['labels'] = get_taxonomy_labels( (object) $args );	$args['label'] = $args['labels']->name;	$wp_taxonomies[$taxonomy] = (object) $args;	// register callback handling for metabox 	add_filter('wp_ajax_add-'.$taxonomy, '_wp_ajax_add_hierarchical_term');}/** * Builds an object with all taxonomy labels out of a taxonomy object * * Accepted keys of the label array in the taxonomy object: * - name - general name for the taxonomy, usually plural. The same as and overriden by $tax->label. Default is Post Tags/Categories * - singular_name - name for one object of this taxonomy. Default is Post Tag/Category * - search_items - Default is Search Tags/Search Categories * - popular_items - This string isn't used on hierarchical taxonomies. Default is Popular Tags * - all_items - Default is All Tags/All Categories * - parent_item - This string isn't used on non-hierarchical taxonomies. In hierarchical ones the default is Parent Category * - parent_item_colon - The same as <code>parent_item</code>, but with colon <code>:</code> in the end * - edit_item - Default is Edit Tag/Edit Category * - update_item - Default is Update Tag/Update Category * - add_new_item - Default is Add New Tag/Add New Category * - new_item_name - Default is New Tag Name/New Category Name * - separate_items_with_commas - This string isn't used on hierarchical taxonomies. Default is "Separate tags with commas," used in the meta box. * - add_or_remove_items - This string isn't used on hierarchical taxonomies. Default is "Add or remove tags," used in the meta box when JavaScript is disabled. * - choose_from_most_used - This string isn't used on hierarchical taxonomies. Default is "Choose from the most used tags," used in the meta box. * * Above, the first default value is for non-hierarchical taxonomies (like tags) and the second one is for hierarchical taxonomies (like categories.) * * @since 3.0.0 * @param object $tax Taxonomy object * @return object object with all the labels as member variables */function get_taxonomy_labels( $tax ) {	if ( isset( $tax->helps ) && empty( $tax->labels['separate_items_with_commas'] ) )		$tax->labels['separate_items_with_commas'] = $tax->helps;	$nohier_vs_hier_defaults = array(		'name' => array( _x( 'Post Tags', 'taxonomy general name' ), _x( 'Categories', 'taxonomy general name' ) ),		'singular_name' => array( _x( 'Post Tag', 'taxonomy singular name' ), _x( 'Category', 'taxonomy singular name' ) ),		'search_items' => array( __( 'Search Tags' ), __( 'Search Categories' ) ),		'popular_items' => array( __( 'Popular Tags' ), null ),		'all_items' => array( __( 'All Tags' ), __( 'All Categories' ) ),		'parent_item' => array( null, __( 'Parent Category' ) ),		'parent_item_colon' => array( null, __( 'Parent Category:' ) ),		'edit_item' => array( __( 'Edit Tag' ), __( 'Edit Category' ) ),		'update_item' => array( __( 'Update Tag' ), __( 'Update Category' ) ),		'add_new_item' => array( __( 'Add New Tag' ), __( 'Add New Category' ) ),		'new_item_name' => array( __( 'New Tag Name' ), __( 'New Category Name' ) ),		'separate_items_with_commas' => array( __( 'Separate tags with commas' ), null ),		'add_or_remove_items' => array( __( 'Add or remove tags' ), null ),		'choose_from_most_used' => array( __( 'Choose from the most used tags' ), null ),	);	return _get_custom_object_labels( $tax, $nohier_vs_hier_defaults );}/** * Add an already registered taxonomy to an object type. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * @uses $wp_taxonomies Modifies taxonomy object * * @param string $taxonomy Name of taxonomy object * @param array|string $object_type Name of the object type * @return bool True if successful, false if not */function register_taxonomy_for_object_type( $taxonomy, $object_type) {	global $wp_taxonomies;	if ( !isset($wp_taxonomies[$taxonomy]) )		return false;	if ( ! get_post_type_object($object_type) )		return false;	$wp_taxonomies[$taxonomy]->object_type[] = $object_type;	return true;}//// Term API///** * Retrieve object_ids of valid taxonomy and term. * * The strings of $taxonomies must exist before this function will continue. On * failure of finding a valid taxonomy, it will return an WP_Error class, kind * of like Exceptions in PHP 5, except you can't catch them. Even so, you can * still test for the WP_Error class and get the error message. * * The $terms aren't checked the same as $taxonomies, but still need to exist * for $object_ids to be returned. * * It is possible to change the order that object_ids is returned by either * using PHP sort family functions or using the database by using $args with * either ASC or DESC array. The value should be in the key named 'order'. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses wp_parse_args() Creates an array from string $args. * * @param int|array $term_ids Term id or array of term ids of terms that will be used * @param string|array $taxonomies String of taxonomy name or Array of string values of taxonomy names * @param array|string $args Change the order of the object_ids, either ASC or DESC * @return WP_Error|array If the taxonomy does not exist, then WP_Error will be returned. On success *	the array can be empty meaning that there are no $object_ids found or it will return the $object_ids found. */function get_objects_in_term( $term_ids, $taxonomies, $args = array() ) {	global $wpdb;	if ( ! is_array( $term_ids ) )		$term_ids = array( $term_ids );	if ( ! is_array( $taxonomies ) )		$taxonomies = array( $taxonomies );	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists( $taxonomy ) )			return new WP_Error( 'invalid_taxonomy', __( 'Invalid Taxonomy' ) );	}	$defaults = array( 'order' => 'ASC' );	$args = wp_parse_args( $args, $defaults );	extract( $args, EXTR_SKIP );	$order = ( 'desc' == strtolower( $order ) ) ? 'DESC' : 'ASC';	$term_ids = array_map('intval', $term_ids );	$taxonomies = "'" . implode( "', '", $taxonomies ) . "'";	$term_ids = "'" . implode( "', '", $term_ids ) . "'";	$object_ids = $wpdb->get_col("SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy IN ($taxonomies) AND tt.term_id IN ($term_ids) ORDER BY tr.object_id $order");	if ( ! $object_ids )		return array();	return $object_ids;}/** * Get all Term data from database by Term ID. * * The usage of the get_term function is to apply filters to a term object. It * is possible to get a term object from the database before applying the * filters. * * $term ID must be part of $taxonomy, to get from the database. Failure, might * be able to be captured by the hooks. Failure would be the same value as $wpdb * returns for the get_row method. * * There are two hooks, one is specifically for each term, named 'get_term', and * the second is for the taxonomy name, 'term_$taxonomy'. Both hooks gets the * term object, and the taxonomy name as parameters. Both hooks are expected to * return a Term object. * * 'get_term' hook - Takes two parameters the term Object and the taxonomy name. * Must return term object. Used in get_term() as a catch-all filter for every * $term. * * 'get_$taxonomy' hook - Takes two parameters the term Object and the taxonomy * name. Must return term object. $taxonomy will be the taxonomy name, so for * example, if 'category', it would be 'get_category' as the filter name. Useful * for custom taxonomies or plugging into default taxonomies. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses sanitize_term() Cleanses the term based on $filter context before returning. * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param. * * @param int|object $term If integer, will get from database. If object will apply filters and return $term. * @param string $taxonomy Taxonomy name that $term is part of. * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional, default is raw or no WordPress defined filter will applied. * @return mixed|null|WP_Error Term Row from database. Will return null if $term is empty. If taxonomy does not * exist then WP_Error will be returned. */function &get_term($term, $taxonomy, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($term) ) {		$error = new WP_Error('invalid_term', __('Empty Term'));		return $error;	}	if ( ! taxonomy_exists($taxonomy) ) {		$error = new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));		return $error;	}	if ( is_object($term) && empty($term->filter) ) {		wp_cache_add($term->term_id, $term, $taxonomy);		$_term = $term;	} else {		if ( is_object($term) )			$term = $term->term_id;		$term = (int) $term;		if ( ! $_term = wp_cache_get($term, $taxonomy) ) {			$_term = $wpdb->get_row( $wpdb->prepare( "SELECT t.*, tt.* FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = %s AND t.term_id = %s LIMIT 1", $taxonomy, $term) );			if ( ! $_term )				return $null;			wp_cache_add($term, $_term, $taxonomy);		}	}	$_term = apply_filters('get_term', $_term, $taxonomy);	$_term = apply_filters("get_$taxonomy", $_term, $taxonomy);	$_term = sanitize_term($_term, $taxonomy, $filter);	if ( $output == OBJECT ) {		return $_term;	} elseif ( $output == ARRAY_A ) {		$__term = get_object_vars($_term);		return $__term;	} elseif ( $output == ARRAY_N ) {		$__term = array_values(get_object_vars($_term));		return $__term;	} else {		return $_term;	}}/** * Get all Term data from database by Term field and data. * * Warning: $value is not escaped for 'name' $field. You must do it yourself, if * required. * * The default $field is 'id', therefore it is possible to also use null for * field, but not recommended that you do so. * * If $value does not exist, the return value will be false. If $taxonomy exists * and $field and $value combinations exist, the Term will be returned. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses sanitize_term() Cleanses the term based on $filter context before returning. * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param. * * @param string $field Either 'slug', 'name', or 'id' * @param string|int $value Search for this term value * @param string $taxonomy Taxonomy Name * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional, default is raw or no WordPress defined filter will applied. * @return mixed Term Row from database. Will return false if $taxonomy does not exist or $term was not found. */function get_term_by($field, $value, $taxonomy, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return false;	if ( 'slug' == $field ) {		$field = 't.slug';		$value = sanitize_title($value);		if ( empty($value) )			return false;	} else if ( 'name' == $field ) {		// Assume already escaped		$value = stripslashes($value);		$field = 't.name';	} else {		return get_term( (int) $value, $taxonomy, $output, $filter);	}	$term = $wpdb->get_row( $wpdb->prepare( "SELECT t.*, tt.* FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = %s AND $field = %s LIMIT 1", $taxonomy, $value) );	if ( !$term )		return false;	wp_cache_add($term->term_id, $term, $taxonomy);	$term = apply_filters('get_term', $term, $taxonomy);	$term = apply_filters("get_$taxonomy", $term, $taxonomy);	$term = sanitize_term($term, $taxonomy, $filter);	if ( $output == OBJECT ) {		return $term;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($term);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($term));	} else {		return $term;	}}/** * Merge all term children into a single array of their IDs. * * This recursive function will merge all of the children of $term into the same * array of term IDs. Only useful for taxonomies which are hierarchical. * * Will return an empty array if $term does not exist in $taxonomy. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses _get_term_hierarchy() * @uses get_term_children() Used to get the children of both $taxonomy and the parent $term * * @param string $term ID of Term to get children * @param string $taxonomy Taxonomy Name * @return array|WP_Error List of Term Objects. WP_Error returned if $taxonomy does not exist */function get_term_children( $term_id, $taxonomy ) {	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	$term_id = intval( $term_id );	$terms = _get_term_hierarchy($taxonomy);	if ( ! isset($terms[$term_id]) )		return array();	$children = $terms[$term_id];	foreach ( (array) $terms[$term_id] as $child ) {		if ( isset($terms[$child]) )			$children = array_merge($children, get_term_children($child, $taxonomy));	}	return $children;}/** * Get sanitized Term field. * * Does checks for $term, based on the $taxonomy. The function is for contextual * reasons and for simplicity of usage. See sanitize_term_field() for more * information. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term_field() Passes the return value in sanitize_term_field on success. * * @param string $field Term field to fetch * @param int $term Term ID * @param string $taxonomy Taxonomy Name * @param string $context Optional, default is display. Look at sanitize_term_field() for available options. * @return mixed Will return an empty string if $term is not an object or if $field is not set in $term. */function get_term_field( $field, $term, $taxonomy, $context = 'display' ) {	$term = (int) $term;	$term = get_term( $term, $taxonomy );	if ( is_wp_error($term) )		return $term;	if ( !is_object($term) )		return '';	if ( !isset($term->$field) )		return '';	return sanitize_term_field($field, $term->$field, $term->term_id, $taxonomy, $context);}/** * Sanitizes Term for editing. * * Return value is sanitize_term() and usage is for sanitizing the term for * editing. Function is for contextual and simplicity. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term() Passes the return value on success * * @param int|object $id Term ID or Object * @param string $taxonomy Taxonomy Name * @return mixed|null|WP_Error Will return empty string if $term is not an object. */function get_term_to_edit( $id, $taxonomy ) {	$term = get_term( $id, $taxonomy );	if ( is_wp_error($term) )		return $term;	if ( !is_object($term) )		return '';	return sanitize_term($term, $taxonomy, 'edit');}/** * Retrieve the terms in a given taxonomy or list of taxonomies. * * You can fully inject any customizations to the query before it is sent, as * well as control the output with a filter. * * The 'get_terms' filter will be called when the cache has the term and will * pass the found term along with the array of $taxonomies and array of $args. * This filter is also called before the array of terms is passed and will pass * the array of terms, along with the $taxonomies and $args. * * The 'list_terms_exclusions' filter passes the compiled exclusions along with * the $args. * * The 'get_terms_orderby' filter passes the ORDER BY clause for the query * along with the $args array. * * The 'get_terms_fields' filter passes the fields for the SELECT query * along with the $args array. * * The list of arguments that $args can contain, which will overwrite the defaults: * * orderby - Default is 'name'. Can be name, count, term_group, slug or nothing * (will use term_id), Passing a custom value other than these will cause it to * order based on the custom value. * * order - Default is ASC. Can use DESC. * * hide_empty - Default is true. Will not return empty terms, which means * terms whose count is 0 according to the given taxonomy. * * exclude - Default is an empty array.  An array, comma- or space-delimited string * of term ids to exclude from the return array.  If 'include' is non-empty, * 'exclude' is ignored. * * exclude_tree - Default is an empty array.  An array, comma- or space-delimited * string of term ids to exclude from the return array, along with all of their * descendant terms according to the primary taxonomy.  If 'include' is non-empty, * 'exclude_tree' is ignored. * * include - Default is an empty array.  An array, comma- or space-delimited string * of term ids to include in the return array. * * number - The maximum number of terms to return.  Default is to return them all. * * offset - The number by which to offset the terms query. * * fields - Default is 'all', which returns an array of term objects. * If 'fields' is 'ids' or 'names', returns an array of * integers or strings, respectively. * * slug - Returns terms whose "slug" matches this value. Default is empty string. * * hierarchical - Whether to include terms that have non-empty descendants * (even if 'hide_empty' is set to true). * * search - Returned terms' names will contain the value of 'search', * case-insensitive.  Default is an empty string. * * name__like - Returned terms' names will begin with the value of 'name__like', * case-insensitive. Default is empty string. * * The argument 'pad_counts', if set to true will include the quantity of a term's * children in the quantity of each term's "count" object variable. * * The 'get' argument, if set to 'all' instead of its default empty string, * returns terms regardless of ancestry or whether the terms are empty. * * The 'child_of' argument, when used, should be set to the integer of a term ID.  Its default * is 0.  If set to a non-zero value, all returned terms will be descendants * of that term according to the given taxonomy.  Hence 'child_of' is set to 0 * if more than one taxonomy is passed in $taxonomies, because multiple taxonomies * make term ancestry ambiguous. * * The 'parent' argument, when used, should be set to the integer of a term ID.  Its default is * the empty string '', which has a different meaning from the integer 0. * If set to an integer value, all returned terms will have as an immediate * ancestor the term whose ID is specified by that integer according to the given taxonomy. * The 'parent' argument is different from 'child_of' in that a term X is considered a 'parent' * of term Y only if term X is the father of term Y, not its grandfather or great-grandfather, etc. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses wp_parse_args() Merges the defaults with those defined by $args and allows for strings. * * @param string|array Taxonomy name or list of Taxonomy names * @param string|array $args The values of what to search for when returning terms * @return array|WP_Error List of Term Objects and their children. Will return WP_Error, if any of $taxonomies do not exist. */function &get_terms($taxonomies, $args = '') {	global $wpdb;	$empty_array = array();	$single_taxonomy = false;	if ( !is_array($taxonomies) ) {		$single_taxonomy = true;		$taxonomies = array($taxonomies);	}	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists($taxonomy) ) {			$error = & new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));			return $error;		}	}	$in_taxonomies = "'" . implode("', '", $taxonomies) . "'";	$defaults = array('orderby' => 'name', 'order' => 'ASC',		'hide_empty' => true, 'exclude' => array(), 'exclude_tree' => array(), 'include' => array(),		'number' => '', 'fields' => 'all', 'slug' => '', 'parent' => '',		'hierarchical' => true, 'child_of' => 0, 'get' => '', 'name__like' => '',		'pad_counts' => false, 'offset' => '', 'search' => '');	$args = wp_parse_args( $args, $defaults );	$args['number'] = absint( $args['number'] );	$args['offset'] = absint( $args['offset'] );	if ( !$single_taxonomy || !is_taxonomy_hierarchical($taxonomies[0]) ||		'' !== $args['parent'] ) {		$args['child_of'] = 0;		$args['hierarchical'] = false;		$args['pad_counts'] = false;	}	if ( 'all' == $args['get'] ) {		$args['child_of'] = 0;		$args['hide_empty'] = 0;		$args['hierarchical'] = false;		$args['pad_counts'] = false;	}	extract($args, EXTR_SKIP);	if ( $child_of ) {		$hierarchy = _get_term_hierarchy($taxonomies[0]);		if ( !isset($hierarchy[$child_of]) )			return $empty_array;	}	if ( $parent ) {		$hierarchy = _get_term_hierarchy($taxonomies[0]);		if ( !isset($hierarchy[$parent]) )			return $empty_array;	}	// $args can be whatever, only use the args defined in defaults to compute the key	$filter_key = ( has_filter('list_terms_exclusions') ) ? serialize($GLOBALS['wp_filter']['list_terms_exclusions']) : '';	$key = md5( serialize( compact(array_keys($defaults)) ) . serialize( $taxonomies ) . $filter_key );	$last_changed = wp_cache_get('last_changed', 'terms');	if ( !$last_changed ) {		$last_changed = time();		wp_cache_set('last_changed', $last_changed, 'terms');	}	$cache_key = "get_terms:$key:$last_changed";	$cache = wp_cache_get( $cache_key, 'terms' );	if ( false !== $cache ) {		$cache = apply_filters('get_terms', $cache, $taxonomies, $args);		return $cache;	}	$_orderby = strtolower($orderby);	if ( 'count' == $_orderby )		$orderby = 'tt.count';	else if ( 'name' == $_orderby )		$orderby = 't.name';	else if ( 'slug' == $_orderby )		$orderby = 't.slug';	else if ( 'term_group' == $_orderby )		$orderby = 't.term_group';	else if ( 'none' == $_orderby )		$orderby = '';	elseif ( empty($_orderby) || 'id' == $_orderby )		$orderby = 't.term_id';	$orderby = apply_filters( 'get_terms_orderby', $orderby, $args );	if ( !empty($orderby) )		$orderby = "ORDER BY $orderby";	else		$order = '';	$where = '';	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';		$exclude_tree = '';		$interms = wp_parse_id_list($include);		foreach ( $interms as $interm ) {			if ( empty($inclusions) )				$inclusions = ' AND ( t.term_id = ' . intval($interm) . ' ';			else				$inclusions .= ' OR t.term_id = ' . intval($interm) . ' ';		}	}	if ( !empty($inclusions) )		$inclusions .= ')';	$where .= $inclusions;	$exclusions = '';	if ( !empty( $exclude_tree ) ) {		$excluded_trunks = wp_parse_id_list($exclude_tree);		foreach ( $excluded_trunks as $extrunk ) {			$excluded_children = (array) get_terms($taxonomies[0], array('child_of' => intval($extrunk), 'fields' => 'ids'));			$excluded_children[] = $extrunk;			foreach( $excluded_children as $exterm ) {				if ( empty($exclusions) )					$exclusions = ' AND ( t.term_id <> ' . intval($exterm) . ' ';				else					$exclusions .= ' AND t.term_id <> ' . intval($exterm) . ' ';			}		}	}	if ( !empty($exclude) ) {		$exterms = wp_parse_id_list($exclude);		foreach ( $exterms as $exterm ) {			if ( empty($exclusions) )				$exclusions = ' AND ( t.term_id <> ' . intval($exterm) . ' ';			else				$exclusions .= ' AND t.term_id <> ' . intval($exterm) . ' ';		}	}	if ( !empty($exclusions) )		$exclusions .= ')';	$exclusions = apply_filters('list_terms_exclusions', $exclusions, $args );	$where .= $exclusions;	if ( !empty($slug) ) {		$slug = sanitize_title($slug);		$where .= " AND t.slug = '$slug'";	}	if ( !empty($name__like) )		$where .= " AND t.name LIKE '{$name__like}%'";	if ( '' !== $parent ) {		$parent = (int) $parent;		$where .= " AND tt.parent = '$parent'";	}	if ( $hide_empty && !$hierarchical )		$where .= ' AND tt.count > 0';	// don't limit the query results when we have to descend the family tree	if ( ! empty($number) && ! $hierarchical && empty( $child_of ) && '' === $parent ) {		if ( $offset )			$limit = 'LIMIT ' . $offset . ',' . $number;		else			$limit = 'LIMIT ' . $number;	} else {		$limit = '';	}	if ( !empty($search) ) {		$search = like_escape($search);		$where .= " AND (t.name LIKE '%$search%')";	}	$selects = array();	switch ( $fields ) { 		case 'all': 			$selects = array('t.*', 'tt.*'); 			break; 		case 'ids':		case 'id=>parent': 			$selects = array('t.term_id', 'tt.parent', 'tt.count'); 			break; 		case 'names': 			$selects = array('t.term_id', 'tt.parent', 'tt.count', 't.name'); 			break; 		case 'count':			$orderby = '';			$order = ''; 			$selects = array('COUNT(*)'); 	}    $select_this = implode(', ', apply_filters( 'get_terms_fields', $selects, $args ));	$query = "SELECT $select_this FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy IN ($in_taxonomies) $where $orderby $order $limit";	if ( 'count' == $fields ) {		$term_count = $wpdb->get_var($query);		return $term_count;	}	$terms = $wpdb->get_results($query);	if ( 'all' == $fields ) {		update_term_cache($terms);	}	if ( empty($terms) ) {		wp_cache_add( $cache_key, array(), 'terms' );		$terms = apply_filters('get_terms', array(), $taxonomies, $args);		return $terms;	}	if ( $child_of ) {		$children = _get_term_hierarchy($taxonomies[0]);		if ( ! empty($children) )			$terms = & _get_term_children($child_of, $terms, $taxonomies[0]);	}	// Update term counts to include children.	if ( $pad_counts && 'all' == $fields )		_pad_term_counts($terms, $taxonomies[0]);	// Make sure we show empty categories that have children.	if ( $hierarchical && $hide_empty && is_array($terms) ) {		foreach ( $terms as $k => $term ) {			if ( ! $term->count ) {				$children = _get_term_children($term->term_id, $terms, $taxonomies[0]);				if ( is_array($children) )					foreach ( $children as $child )						if ( $child->count )							continue 2;				// It really is empty				unset($terms[$k]);			}		}	}	reset ( $terms );	$_terms = array();	if ( 'id=>parent' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[$term->term_id] = $term->parent;		$terms = $_terms;	} elseif ( 'ids' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[] = $term->term_id;		$terms = $_terms;	} elseif ( 'names' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[] = $term->name;		$terms = $_terms;	}	if ( 0 < $number && intval(@count($terms)) > $number ) {		$terms = array_slice($terms, $offset, $number);	}	wp_cache_add( $cache_key, $terms, 'terms' );	$terms = apply_filters('get_terms', $terms, $taxonomies, $args);	return $terms;}/** * Check if Term exists. * * Returns the index of a defined term, or 0 (false) if the term doesn't exist. * * Formerly is_term(), introduced in 2.3.0. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * * @uses $wpdb * * @param int|string $term The term to check * @param string $taxonomy The taxonomy name to use * @param int $parent ID of parent term under which to confine the exists search. * @return mixed Get the term id or Term Object, if exists. */function term_exists($term, $taxonomy = '', $parent = 0) {	global $wpdb;	$select = "SELECT term_id FROM $wpdb->terms as t WHERE ";	$tax_select = "SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE ";	if ( is_int($term) ) {		if ( 0 == $term )			return 0;		$where = 't.term_id = %d';		if ( !empty($taxonomy) )			return $wpdb->get_row( $wpdb->prepare( $tax_select . $where . " AND tt.taxonomy = %s", $term, $taxonomy ), ARRAY_A );		else			return $wpdb->get_var( $wpdb->prepare( $select . $where, $term ) );	}	$term = trim( stripslashes( $term ) );	if ( '' === $slug = sanitize_title($term) )		return 0;	$where = 't.slug = %s';	$else_where = 't.name = %s';	$where_fields = array($slug);	$else_where_fields = array($term);	if ( !empty($taxonomy) ) {		$parent = (int) $parent;		if ( $parent > 0 ) {			$where_fields[] = $parent;			$else_where_fields[] = $parent;			$where .= ' AND tt.parent = %d';			$else_where .= ' AND tt.parent = %d';		}		$where_fields[] = $taxonomy;		$else_where_fields[] = $taxonomy;		if ( $result = $wpdb->get_row( $wpdb->prepare("SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE $where AND tt.taxonomy = %s", $where_fields), ARRAY_A) )			return $result;		return $wpdb->get_row( $wpdb->prepare("SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE $else_where AND tt.taxonomy = %s", $else_where_fields), ARRAY_A);	}	if ( $result = $wpdb->get_var( $wpdb->prepare("SELECT term_id FROM $wpdb->terms as t WHERE $where", $where_fields) ) )		return $result;	return $wpdb->get_var( $wpdb->prepare("SELECT term_id FROM $wpdb->terms as t WHERE $else_where", $else_where_fields) );}/** * Sanitize Term all fields. * * Relys on sanitize_term_field() to sanitize the term. The difference is that * this function will sanitize <strong>all</strong> fields. The context is based * on sanitize_term_field(). * * The $term is expected to be either an array or an object. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term_field Used to sanitize all fields in a term * * @param array|object $term The term to check * @param string $taxonomy The taxonomy name to use * @param string $context Default is 'display'. * @return array|object Term with all fields sanitized */function sanitize_term($term, $taxonomy, $context = 'display') {	if ( 'raw' == $context )		return $term;	$fields = array('term_id', 'name', 'description', 'slug', 'count', 'parent', 'term_group');	$do_object = false;	if ( is_object($term) )		$do_object = true;	$term_id = $do_object ? $term->term_id : (isset($term['term_id']) ? $term['term_id'] : 0);	foreach ( (array) $fields as $field ) {		if ( $do_object ) {			if ( isset($term->$field) )				$term->$field = sanitize_term_field($field, $term->$field, $term_id, $taxonomy, $context);		} else {			if ( isset($term[$field]) )				$term[$field] = sanitize_term_field($field, $term[$field], $term_id, $taxonomy, $context);		}	}	if ( $do_object )		$term->filter = $context;	else		$term['filter'] = $context;	return $term;}/** * Cleanse the field value in the term based on the context. * * Passing a term field value through the function should be assumed to have * cleansed the value for whatever context the term field is going to be used. * * If no context or an unsupported context is given, then default filters will * be applied. * * There are enough filters for each context to support a custom filtering * without creating your own filter function. Simply create a function that * hooks into the filter you need. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * * @param string $field Term field to sanitize * @param string $value Search for this term value * @param int $term_id Term ID * @param string $taxonomy Taxonomy Name * @param string $context Either edit, db, display, attribute, or js. * @return mixed sanitized field */function sanitize_term_field($field, $value, $term_id, $taxonomy, $context) {	if ( 'parent' == $field  || 'term_id' == $field || 'count' == $field || 'term_group' == $field ) {		$value = (int) $value;		if ( $value < 0 )			$value = 0;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$value = apply_filters("edit_term_$field", $value, $term_id, $taxonomy);		$value = apply_filters("edit_${taxonomy}_$field", $value, $term_id);		if ( 'description' == $field )			$value = format_to_edit($value);		else			$value = esc_attr($value);	} else if ( 'db' == $context ) {		$value = apply_filters("pre_term_$field", $value, $taxonomy);		$value = apply_filters("pre_${taxonomy}_$field", $value);		// Back compat filters		if ( 'slug' == $field )			$value = apply_filters('pre_category_nicename', $value);	} else if ( 'rss' == $context ) {		$value = apply_filters("term_${field}_rss", $value, $taxonomy);		$value = apply_filters("${taxonomy}_${field}_rss", $value);	} else {		// Use display filters by default.		$value = apply_filters("term_$field", $value, $term_id, $taxonomy, $context);		$value = apply_filters("${taxonomy}_$field", $value, $term_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Count how many terms are in Taxonomy. * * Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' => true). * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses get_terms() * @uses wp_parse_args() Turns strings into arrays and merges defaults into an array. * * @param string $taxonomy Taxonomy name * @param array|string $args Overwrite defaults. See get_terms() * @return int How many terms are in $taxonomy */function wp_count_terms( $taxonomy, $args = array() ) {	$defaults = array('hide_empty' => false);	$args = wp_parse_args($args, $defaults);	// backwards compatibility	if ( isset($args['ignore_empty']) ) {		$args['hide_empty'] = $args['ignore_empty'];		unset($args['ignore_empty']);	}	$args['fields'] = 'count';	return get_terms($taxonomy, $args);}/** * Will unlink the term from the taxonomy. * * Will remove the term's relationship to the taxonomy, not the term or taxonomy * itself. The term and taxonomy will still exist. Will require the term's * object ID to perform the operation. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int $object_id The term Object Id that refers to the term * @param string|array $taxonomy List of Taxonomy Names or single Taxonomy name. */function wp_delete_object_term_relationships( $object_id, $taxonomies ) {	global $wpdb;	$object_id = (int) $object_id;	if ( !is_array($taxonomies) )		$taxonomies = array($taxonomies);	foreach ( (array) $taxonomies as $taxonomy ) {		$tt_ids = wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids'));		$in_tt_ids = "'" . implode("', '", $tt_ids) . "'";		do_action( 'delete_term_relationships', $object_id, $tt_ids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id IN ($in_tt_ids)", $object_id) );		do_action( 'deleted_term_relationships', $object_id, $tt_ids );		wp_update_term_count($tt_ids, $taxonomy);	}}/** * Removes a term from the database. * * If the term is a parent of other terms, then the children will be updated to * that term's parent. * * The $args 'default' will only override the terms found, if there is only one * term found. Any other and the found terms are used. * * The $args 'force_default' will force the term supplied as default to be * assigned even if the object was not going to be termless * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses do_action() Calls both 'delete_term' and 'delete_$taxonomy' action *	hooks, passing term object, term id. 'delete_term' gets an additional *	parameter with the $taxonomy parameter. * * @param int $term Term ID * @param string $taxonomy Taxonomy Name * @param array|string $args Optional. Change 'default' term id and override found term ids. * @return bool|WP_Error Returns false if not term; true if completes delete action. */function wp_delete_term( $term, $taxonomy, $args = array() ) {	global $wpdb;	$term = (int) $term;	if ( ! $ids = term_exists($term, $taxonomy) )		return false;	if ( is_wp_error( $ids ) )		return $ids;	$tt_id = $ids['term_taxonomy_id'];	$defaults = array();	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	if ( isset($default) ) {		$default = (int) $default;		if ( ! term_exists($default, $taxonomy) )			unset($default);	}	// Update children to point to new parent	if ( is_taxonomy_hierarchical($taxonomy) ) {		$term_obj = get_term($term, $taxonomy);		if ( is_wp_error( $term_obj ) )			return $term_obj;		$parent = $term_obj->parent;		$edit_tt_ids = $wpdb->get_col( "SELECT `term_taxonomy_id` FROM $wpdb->term_taxonomy WHERE `parent` = " . (int)$term_obj->term_id );		do_action( 'edit_term_taxonomies', $edit_tt_ids );		$wpdb->update( $wpdb->term_taxonomy, compact( 'parent' ), array( 'parent' => $term_obj->term_id) + compact( 'taxonomy' ) );		do_action( 'edited_term_taxonomies', $edit_tt_ids );	}	$objects = $wpdb->get_col( $wpdb->prepare( "SELECT object_id FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $tt_id ) );	foreach ( (array) $objects as $object ) {		$terms = wp_get_object_terms($object, $taxonomy, array('fields' => 'ids', 'orderby' => 'none'));		if ( 1 == count($terms) && isset($default) ) {			$terms = array($default);		} else {			$terms = array_diff($terms, array($term));			if (isset($default) && isset($force_default) && $force_default)				$terms = array_merge($terms, array($default));		}		$terms = array_map('intval', $terms);		wp_set_object_terms($object, $terms, $taxonomy);	}	do_action( 'delete_term_taxonomy', $tt_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->term_taxonomy WHERE term_taxonomy_id = %d", $tt_id ) );	do_action( 'deleted_term_taxonomy', $tt_id );	// Delete the term if no taxonomies use it.	if ( !$wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_taxonomy WHERE term_id = %d", $term) ) )		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->terms WHERE term_id = %d", $term) );	clean_term_cache($term, $taxonomy);	do_action('delete_term', $term, $tt_id, $taxonomy);	do_action("delete_$taxonomy", $term, $tt_id);	return true;}/** * Retrieves the terms associated with the given object(s), in the supplied taxonomies. * * The following information has to do the $args parameter and for what can be * contained in the string or array of that parameter, if it exists. * * The first argument is called, 'orderby' and has the default value of 'name'. * The other value that is supported is 'count'. * * The second argument is called, 'order' and has the default value of 'ASC'. * The only other value that will be acceptable is 'DESC'. * * The final argument supported is called, 'fields' and has the default value of * 'all'. There are multiple other options that can be used instead. Supported * values are as follows: 'all', 'ids', 'names', and finally * 'all_with_object_id'. * * The fields argument also decides what will be returned. If 'all' or * 'all_with_object_id' is choosen or the default kept intact, then all matching * terms objects will be returned. If either 'ids' or 'names' is used, then an * array of all matching term ids or term names will be returned respectively. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $object_id The id of the object(s) to retrieve. * @param string|array $taxonomies The taxonomies to retrieve terms from. * @param array|string $args Change what is returned * @return array|WP_Error The requested term data or empty array if no terms found. WP_Error if $taxonomy does not exist. */function wp_get_object_terms($object_ids, $taxonomies, $args = array()) {	global $wpdb;	if ( !is_array($taxonomies) )		$taxonomies = array($taxonomies);	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists($taxonomy) )			return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	}	if ( !is_array($object_ids) )		$object_ids = array($object_ids);	$object_ids = array_map('intval', $object_ids);	$defaults = array('orderby' => 'name', 'order' => 'ASC', 'fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$terms = array();	if ( count($taxonomies) > 1 ) {		foreach ( $taxonomies as $index => $taxonomy ) {			$t = get_taxonomy($taxonomy);			if ( isset($t->args) && is_array($t->args) && $args != array_merge($args, $t->args) ) {				unset($taxonomies[$index]);				$terms = array_merge($terms, wp_get_object_terms($object_ids, $taxonomy, array_merge($args, $t->args)));			}		}	} else {		$t = get_taxonomy($taxonomies[0]);		if ( isset($t->args) && is_array($t->args) )			$args = array_merge($args, $t->args);	}	extract($args, EXTR_SKIP);	if ( 'count' == $orderby )		$orderby = 'tt.count';	else if ( 'name' == $orderby )		$orderby = 't.name';	else if ( 'slug' == $orderby )		$orderby = 't.slug';	else if ( 'term_group' == $orderby )		$orderby = 't.term_group';	else if ( 'term_order' == $orderby )		$orderby = 'tr.term_order';	else if ( 'none' == $orderby ) {		$orderby = '';		$order = '';	} else {		$orderby = 't.term_id';	}	// tt_ids queries can only be none or tr.term_taxonomy_id	if ( ('tt_ids' == $fields) && !empty($orderby) )		$orderby = 'tr.term_taxonomy_id';	if ( !empty($orderby) )		$orderby = "ORDER BY $orderby";	$taxonomies = "'" . implode("', '", $taxonomies) . "'";	$object_ids = implode(', ', $object_ids);	$select_this = '';	if ( 'all' == $fields )		$select_this = 't.*, tt.*';	else if ( 'ids' == $fields )		$select_this = 't.term_id';	else if ( 'names' == $fields )		$select_this = 't.name';	else if ( 'all_with_object_id' == $fields )		$select_this = 't.*, tt.*, tr.object_id';	$query = "SELECT $select_this FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON tt.term_id = t.term_id INNER JOIN $wpdb->term_relationships AS tr ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy IN ($taxonomies) AND tr.object_id IN ($object_ids) $orderby $order";	if ( 'all' == $fields || 'all_with_object_id' == $fields ) {		$terms = array_merge($terms, $wpdb->get_results($query));		update_term_cache($terms);	} else if ( 'ids' == $fields || 'names' == $fields ) {		$terms = array_merge($terms, $wpdb->get_col($query));	} else if ( 'tt_ids' == $fields ) {		$terms = $wpdb->get_col("SELECT tr.term_taxonomy_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tr.object_id IN ($object_ids) AND tt.taxonomy IN ($taxonomies) $orderby $order");	}	if ( ! $terms )		$terms = array();	return apply_filters('wp_get_object_terms', $terms, $object_ids, $taxonomies, $args);}/** * Adds a new term to the database. Optionally marks it as an alias of an existing term. * * Error handling is assigned for the nonexistance of the $taxonomy and $term * parameters before inserting. If both the term id and taxonomy exist * previously, then an array will be returned that contains the term id and the * contents of what is returned. The keys of the array are 'term_id' and * 'term_taxonomy_id' containing numeric values. * * It is assumed that the term does not yet exist or the above will apply. The * term will be first added to the term table and then related to the taxonomy * if everything is well. If everything is correct, then several actions will be * run prior to a filter and then several actions will be run after the filter * is run. * * The arguments decide how the term is handled based on the $args parameter. * The following is a list of the available overrides and the defaults. * * 'alias_of'. There is no default, but if added, expected is the slug that the * term will be an alias of. Expected to be a string. * * 'description'. There is no default. If exists, will be added to the database * along with the term. Expected to be a string. * * 'parent'. Expected to be numeric and default is 0 (zero). Will assign value * of 'parent' to the term. * * 'slug'. Expected to be a string. There is no default. * * If 'slug' argument exists then the slug will be checked to see if it is not * a valid term. If that check succeeds (it is not a valid term), then it is * added and the term id is given. If it fails, then a check is made to whether * the taxonomy is hierarchical and the parent argument is not empty. If the * second check succeeds, the term will be inserted and the term id will be * given. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @uses apply_filters() Calls 'pre_insert_term' hook with term and taxonomy as parameters. * @uses do_action() Calls 'create_term' hook with the term id and taxonomy id as parameters. * @uses do_action() Calls 'create_$taxonomy' hook with term id and taxonomy id as parameters. * @uses apply_filters() Calls 'term_id_filter' hook with term id and taxonomy id as parameters. * @uses do_action() Calls 'created_term' hook with the term id and taxonomy id as parameters. * @uses do_action() Calls 'created_$taxonomy' hook with term id and taxonomy id as parameters. * * @param string $term The term to add or update. * @param string $taxonomy The taxonomy to which to add the term * @param array|string $args Change the values of the inserted term * @return array|WP_Error The Term ID and Term Taxonomy ID */function wp_insert_term( $term, $taxonomy, $args = array() ) {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid taxonomy'));	$term = apply_filters( 'pre_insert_term', $term, $taxonomy );		if ( is_wp_error( $term ) )			return $term;	if ( is_int($term) && 0 == $term )		return new WP_Error('invalid_term_id', __('Invalid term ID'));	if ( '' == trim($term) )		return new WP_Error('empty_term_name', __('A name is required for this term'));	$defaults = array( 'alias_of' => '', 'description' => '', 'parent' => 0, 'slug' => '');	$args = wp_parse_args($args, $defaults);	$args['name'] = $term;	$args['taxonomy'] = $taxonomy;	$args = sanitize_term($args, $taxonomy, 'db');	extract($args, EXTR_SKIP);	// expected_slashed ($name)	$name = stripslashes($name);	$description = stripslashes($description);	if ( empty($slug) )		$slug = sanitize_title($name);	$term_group = 0;	if ( $alias_of ) {		$alias = $wpdb->get_row( $wpdb->prepare( "SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $alias_of) );		if ( $alias->term_group ) {			// The alias we want is already in a group, so let's use that one.			$term_group = $alias->term_group;		} else {			// The alias isn't in a group, so let's create a new one and firstly add the alias term to it.			$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms") + 1;			do_action( 'edit_terms', $alias->term_id );			$wpdb->update($wpdb->terms, compact('term_group'), array('term_id' => $alias->term_id) );			do_action( 'edited_terms', $alias->term_id );		}	}	if ( $term_id = term_exists($slug) ) {		$existing_term = $wpdb->get_row( $wpdb->prepare( "SELECT name FROM $wpdb->terms WHERE term_id = %d", $term_id), ARRAY_A );		// We've got an existing term in the same taxonomy, which matches the name of the new term:		if ( is_taxonomy_hierarchical($taxonomy) && $existing_term['name'] == $name && term_exists( (int) $term_id, $taxonomy ) ) {			// Hierarchical, and it matches an existing term, Do not allow same "name" in the same level.			$siblings = get_terms($taxonomy, array('fields' => 'names', 'get' => 'all', 'parent' => (int)$parent) );			if ( in_array($name, $siblings) ) {				return new WP_Error('term_exists', __('A term with the name provided already exists with this parent.'));			} else {				$slug = wp_unique_term_slug($slug, (object) $args);				if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )					return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);				$term_id = (int) $wpdb->insert_id;			}		} elseif ( $existing_term['name'] != $name ) {			// We've got an existing term, with a different name, Create the new term.			$slug = wp_unique_term_slug($slug, (object) $args);			if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )				return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);			$term_id = (int) $wpdb->insert_id;		} elseif ( term_exists( (int) $term_id, $taxonomy ) )  {			// Same name, same slug.			return new WP_Error('term_exists', __('A term with the name provided already exists.'));		}	} else {		// This term does not exist at all in the database, Create it.		$slug = wp_unique_term_slug($slug, (object) $args);		if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )			return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);		$term_id = (int) $wpdb->insert_id;	}	// Seems unreachable, However, Is used in the case that a term name is provided, which sanitizes to an empty string.	if ( empty($slug) ) {		$slug = sanitize_title($slug, $term_id);		do_action( 'edit_terms', $term_id );		$wpdb->update( $wpdb->terms, compact( 'slug' ), compact( 'term_id' ) );		do_action( 'edited_terms', $term_id );	}	$tt_id = $wpdb->get_var( $wpdb->prepare( "SELECT tt.term_taxonomy_id FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = %s AND t.term_id = %d", $taxonomy, $term_id ) );	if ( !empty($tt_id) )		return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);	$wpdb->insert( $wpdb->term_taxonomy, compact( 'term_id', 'taxonomy', 'description', 'parent') + array( 'count' => 0 ) );	$tt_id = (int) $wpdb->insert_id;	do_action("create_term", $term_id, $tt_id, $taxonomy);	do_action("create_$taxonomy", $term_id, $tt_id);	$term_id = apply_filters('term_id_filter', $term_id, $tt_id);	clean_term_cache($term_id, $taxonomy);	do_action("created_term", $term_id, $tt_id, $taxonomy);	do_action("created_$taxonomy", $term_id, $tt_id);	return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);}/** * Create Term and Taxonomy Relationships. * * Relates an object (post, link etc) to a term and taxonomy type. Creates the * term and taxonomy relationship if it doesn't already exist. Creates a term if * it doesn't exist (using the slug). * * A relationship means that the term is grouped in or belongs to the taxonomy. * A term has no meaning until it is given context by defining which taxonomy it * exists under. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int $object_id The object to relate to. * @param array|int|string $term The slug or id of the term, will replace all existing * related terms in this taxonomy. * @param array|string $taxonomy The context in which to relate the term to the object. * @param bool $append If false will delete difference of terms. * @return array|WP_Error Affected Term IDs */function wp_set_object_terms($object_id, $terms, $taxonomy, $append = false) {	global $wpdb;	$object_id = (int) $object_id;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	if ( !is_array($terms) )		$terms = array($terms);	if ( ! $append )		$old_tt_ids =  wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids', 'orderby' => 'none'));	else		$old_tt_ids = array();	$tt_ids = array();	$term_ids = array();	foreach ( (array) $terms as $term) {		if ( !strlen(trim($term)) )			continue;		if ( !$term_info = term_exists($term, $taxonomy) ) {			// Skip if a non-existent term ID is passed.			if ( is_int($term) )				continue;			$term_info = wp_insert_term($term, $taxonomy);		}		if ( is_wp_error($term_info) )			return $term_info;		$term_ids[] = $term_info['term_id'];		$tt_id = $term_info['term_taxonomy_id'];		$tt_ids[] = $tt_id;		if ( $wpdb->get_var( $wpdb->prepare( "SELECT term_taxonomy_id FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id = %d", $object_id, $tt_id ) ) )			continue;		do_action( 'add_term_relationship', $object_id, $tt_id );		$wpdb->insert( $wpdb->term_relationships, array( 'object_id' => $object_id, 'term_taxonomy_id' => $tt_id ) );		do_action( 'added_term_relationship', $object_id, $tt_id );	}	wp_update_term_count($tt_ids, $taxonomy);	if ( ! $append ) {		$delete_terms = array_diff($old_tt_ids, $tt_ids);		if ( $delete_terms ) {			$in_delete_terms = "'" . implode("', '", $delete_terms) . "'";			do_action( 'delete_term_relationships', $object_id, $delete_terms );			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id IN ($in_delete_terms)", $object_id) );			do_action( 'deleted_term_relationships', $object_id, $delete_terms );			wp_update_term_count($delete_terms, $taxonomy);		}	}	$t = get_taxonomy($taxonomy);	if ( ! $append && isset($t->sort) && $t->sort ) {		$values = array();		$term_order = 0;		$final_tt_ids = wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids'));		foreach ( $tt_ids as $tt_id )			if ( in_array($tt_id, $final_tt_ids) )				$values[] = $wpdb->prepare( "(%d, %d, %d)", $object_id, $tt_id, ++$term_order);		if ( $values )			$wpdb->query("INSERT INTO $wpdb->term_relationships (object_id, term_taxonomy_id, term_order) VALUES " . join(',', $values) . " ON DUPLICATE KEY UPDATE term_order = VALUES(term_order)");	}	do_action('set_object_terms', $object_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids);	return $tt_ids;}/** * Will make slug unique, if it isn't already. * * The $slug has to be unique global to every taxonomy, meaning that one * taxonomy term can't have a matching slug with another taxonomy term. Each * slug has to be globally unique for every taxonomy. * * The way this works is that if the taxonomy that the term belongs to is * hierarchical and has a parent, it will append that parent to the $slug. * * If that still doesn't return an unique slug, then it try to append a number * until it finds a number that is truely unique. * * The only purpose for $term is for appending a parent, if one exists. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param string $slug The string that will be tried for a unique slug * @param object $term The term object that the $slug will belong too * @return string Will return a true unique slug. */function wp_unique_term_slug($slug, $term) {	global $wpdb;	if ( ! term_exists( $slug ) )		return $slug;	// If the taxonomy supports hierarchy and the term has a parent, make the slug unique	// by incorporating parent slugs.	if ( is_taxonomy_hierarchical($term->taxonomy) && !empty($term->parent) ) {		$the_parent = $term->parent;		while ( ! empty($the_parent) ) {			$parent_term = get_term($the_parent, $term->taxonomy);			if ( is_wp_error($parent_term) || empty($parent_term) )				break;			$slug .= '-' . $parent_term->slug;			if ( ! term_exists( $slug ) )				return $slug;			if ( empty($parent_term->parent) )				break;			$the_parent = $parent_term->parent;		}	}	// If we didn't get a unique slug, try appending a number to make it unique.	if ( !empty($args['term_id']) )		$query = $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s AND term_id != %d", $slug, $args['term_id'] );	else		$query = $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s", $slug );	if ( $wpdb->get_var( $query ) ) {		$num = 2;		do {			$alt_slug = $slug . "-$num";			$num++;			$slug_check = $wpdb->get_var( $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s", $alt_slug ) );		} while ( $slug_check );		$slug = $alt_slug;	}	return $slug;}/** * Update term based on arguments provided. * * The $args will indiscriminately override all values with the same field name. * Care must be taken to not override important information need to update or * update will fail (or perhaps create a new term, neither would be acceptable). * * Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not * defined in $args already. * * 'alias_of' will create a term group, if it doesn't already exist, and update * it for the $term. * * If the 'slug' argument in $args is missing, then the 'name' in $args will be * used. It should also be noted that if you set 'slug' and it isn't unique then * a WP_Error will be passed back. If you don't pass any slug, then a unique one * will be created for you. * * For what can be overrode in $args, check the term scheme can contain and stay * away from the term keys. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses do_action() Will call both 'edit_term' and 'edit_$taxonomy' twice. * @uses apply_filters() Will call the 'term_id_filter' filter and pass the term *	id and taxonomy id. * * @param int $term_id The ID of the term * @param string $taxonomy The context in which to relate the term to the object. * @param array|string $args Overwrite term field values * @return array|WP_Error Returns Term ID and Taxonomy Term ID */function wp_update_term( $term_id, $taxonomy, $args = array() ) {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid taxonomy'));	$term_id = (int) $term_id;	// First, get all of the original args	$term = get_term ($term_id, $taxonomy, ARRAY_A);	if ( is_wp_error( $term ) )		return $term;	// Escape data pulled from DB.	$term = add_magic_quotes($term);	// Merge old and new args with new args overwriting old ones.	$args = array_merge($term, $args);	$defaults = array( 'alias_of' => '', 'description' => '', 'parent' => 0, 'slug' => '');	$args = wp_parse_args($args, $defaults);	$args = sanitize_term($args, $taxonomy, 'db');	extract($args, EXTR_SKIP);	// expected_slashed ($name)	$name = stripslashes($name);	$description = stripslashes($description);	if ( '' == trim($name) )		return new WP_Error('empty_term_name', __('A name is required for this term'));	$empty_slug = false;	if ( empty($slug) ) {		$empty_slug = true;		$slug = sanitize_title($name);	}	if ( $alias_of ) {		$alias = $wpdb->get_row( $wpdb->prepare( "SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $alias_of) );		if ( $alias->term_group ) {			// The alias we want is already in a group, so let's use that one.			$term_group = $alias->term_group;		} else {			// The alias isn't in a group, so let's create a new one and firstly add the alias term to it.			$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms") + 1;			do_action( 'edit_terms', $alias->term_id );			$wpdb->update( $wpdb->terms, compact('term_group'), array( 'term_id' => $alias->term_id ) );			do_action( 'edited_terms', $alias->term_id );		}	}	// Check for duplicate slug	$id = $wpdb->get_var( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE slug = %s", $slug ) );	if ( $id && ($id != $term_id) ) {		// If an empty slug was passed or the parent changed, reset the slug to something unique.		// Otherwise, bail.		if ( $empty_slug || ( $parent != $term['parent']) )			$slug = wp_unique_term_slug($slug, (object) $args);		else			return new WP_Error('duplicate_term_slug', sprintf(__('The slug &#8220;%s&#8221; is already in use by another term'), $slug));	}	do_action( 'edit_terms', $term_id );	$wpdb->update($wpdb->terms, compact( 'name', 'slug', 'term_group' ), compact( 'term_id' ) );	if ( empty($slug) ) {		$slug = sanitize_title($name, $term_id);		$wpdb->update( $wpdb->terms, compact( 'slug' ), compact( 'term_id' ) );	}	do_action( 'edited_terms', $term_id );	$tt_id = $wpdb->get_var( $wpdb->prepare( "SELECT tt.term_taxonomy_id FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = %s AND t.term_id = %d", $taxonomy, $term_id) );	do_action( 'edit_term_taxonomy', $tt_id, $taxonomy );	$wpdb->update( $wpdb->term_taxonomy, compact( 'term_id', 'taxonomy', 'description', 'parent' ), array( 'term_taxonomy_id' => $tt_id ) );	do_action( 'edited_term_taxonomy', $tt_id, $taxonomy );	do_action("edit_term", $term_id, $tt_id, $taxonomy);	do_action("edit_$taxonomy", $term_id, $tt_id);	$term_id = apply_filters('term_id_filter', $term_id, $tt_id);	clean_term_cache($term_id, $taxonomy);	do_action("edited_term", $term_id, $tt_id, $taxonomy);	do_action("edited_$taxonomy", $term_id, $tt_id);	return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);}/** * Enable or disable term counting. * * @since 2.5.0 * * @param bool $defer Optional. Enable if true, disable if false. * @return bool Whether term counting is enabled or disabled. */function wp_defer_term_counting($defer=null) {	static $_defer = false;	if ( is_bool($defer) ) {		$_defer = $defer;		// flush any deferred counts		if ( !$defer )			wp_update_term_count( null, null, true );	}	return $_defer;}/** * Updates the amount of terms in taxonomy. * * If there is a taxonomy callback applyed, then it will be called for updating * the count. * * The default action is to count what the amount of terms have the relationship * of term ID. Once that is done, then update the database. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $terms The term_taxonomy_id of the terms * @param string $taxonomy The context of the term. * @return bool If no terms will return false, and if successful will return true. */function wp_update_term_count( $terms, $taxonomy, $do_deferred=false ) {	static $_deferred = array();	if ( $do_deferred ) {		foreach ( (array) array_keys($_deferred) as $tax ) {			wp_update_term_count_now( $_deferred[$tax], $tax );			unset( $_deferred[$tax] );		}	}	if ( empty($terms) )		return false;	if ( !is_array($terms) )		$terms = array($terms);	if ( wp_defer_term_counting() ) {		if ( !isset($_deferred[$taxonomy]) )			$_deferred[$taxonomy] = array();		$_deferred[$taxonomy] = array_unique( array_merge($_deferred[$taxonomy], $terms) );		return true;	}	return wp_update_term_count_now( $terms, $taxonomy );}/** * Perform term count update immediately. * * @since 2.5.0 * * @param array $terms The term_taxonomy_id of terms to update. * @param string $taxonomy The context of the term. * @return bool Always true when complete. */function wp_update_term_count_now( $terms, $taxonomy ) {	global $wpdb;	$terms = array_map('intval', $terms);	$taxonomy = get_taxonomy($taxonomy);	if ( !empty($taxonomy->update_count_callback) ) {		call_user_func($taxonomy->update_count_callback, $terms, $taxonomy);	} else {		// Default count updater		foreach ( (array) $terms as $term) {			$count = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $term) );			do_action( 'edit_term_taxonomy', $term, $taxonomy );			$wpdb->update( $wpdb->term_taxonomy, compact( 'count' ), array( 'term_taxonomy_id' => $term ) );			do_action( 'edited_term_taxonomy', $term, $taxonomy );		}	}	clean_term_cache($terms, '', false);	return true;}//// Cache///** * Removes the taxonomy relationship to terms from the cache. * * Will remove the entire taxonomy relationship containing term $object_id. The * term IDs have to exist within the taxonomy $object_type for the deletion to * take place. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @see get_object_taxonomies() for more on $object_type * @uses do_action() Will call action hook named, 'clean_object_term_cache' after completion. *	Passes, function params in same order. * * @param int|array $object_ids Single or list of term object ID(s) * @param array|string $object_type The taxonomy object type */function clean_object_term_cache($object_ids, $object_type) {	if ( !is_array($object_ids) )		$object_ids = array($object_ids);	foreach ( $object_ids as $id )		foreach ( get_object_taxonomies($object_type) as $taxonomy )			wp_cache_delete($id, "{$taxonomy}_relationships");	do_action('clean_object_term_cache', $object_ids, $object_type);}/** * Will remove all of the term ids from the cache. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $ids Single or list of Term IDs * @param string $taxonomy Can be empty and will assume tt_ids, else will use for context. * @param bool $clean_taxonomy Whether to clean taxonomy wide caches (true), or just individual term object caches (false). Default is true. */function clean_term_cache($ids, $taxonomy = '', $clean_taxonomy = true) {	global $wpdb;	static $cleaned = array();	if ( !is_array($ids) )		$ids = array($ids);	$taxonomies = array();	// If no taxonomy, assume tt_ids.	if ( empty($taxonomy) ) {		$tt_ids = array_map('intval', $ids);		$tt_ids = implode(', ', $tt_ids);		$terms = $wpdb->get_results("SELECT term_id, taxonomy FROM $wpdb->term_taxonomy WHERE term_taxonomy_id IN ($tt_ids)");		$ids = array();		foreach ( (array) $terms as $term ) {			$taxonomies[] = $term->taxonomy;			$ids[] = $term->term_id;			wp_cache_delete($term->term_id, $term->taxonomy);		}		$taxonomies = array_unique($taxonomies);	} else {		$taxonomies = array($taxonomy);		foreach ( $taxonomies as $taxonomy ) {			foreach ( $ids as $id ) {				wp_cache_delete($id, $taxonomy);			}		}	}	foreach ( $taxonomies as $taxonomy ) {		if ( isset($cleaned[$taxonomy]) )			continue;		$cleaned[$taxonomy] = true;		if ( $clean_taxonomy ) {			wp_cache_delete('all_ids', $taxonomy);			wp_cache_delete('get', $taxonomy);			delete_option("{$taxonomy}_children");			// Regenerate {$taxonomy}_children			_get_term_hierarchy($taxonomy);		}		do_action('clean_term_cache', $ids, $taxonomy);	}	wp_cache_set('last_changed', time(), 'terms');}/** * Retrieves the taxonomy relationship to the term object id. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses wp_cache_get() Retrieves taxonomy relationship from cache * * @param int|array $id Term object ID * @param string $taxonomy Taxonomy Name * @return bool|array Empty array if $terms found, but not $taxonomy. False if nothing is in cache for $taxonomy and $id. */function &get_object_term_cache($id, $taxonomy) {	$cache = wp_cache_get($id, "{$taxonomy}_relationships");	return $cache;}/** * Updates the cache for Term ID(s). * * Will only update the cache for terms not already cached. * * The $object_ids expects that the ids be separated by commas, if it is a * string. * * It should be noted that update_object_term_cache() is very time extensive. It * is advised that the function is not called very often or at least not for a * lot of terms that exist in a lot of taxonomies. The amount of time increases * for each term and it also increases for each taxonomy the term belongs to. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses wp_get_object_terms() Used to get terms from the database to update * * @param string|array $object_ids Single or list of term object ID(s) * @param array|string $object_type The taxonomy object type * @return null|bool Null value is given with empty $object_ids. False if */function update_object_term_cache($object_ids, $object_type) {	if ( empty($object_ids) )		return;	if ( !is_array($object_ids) )		$object_ids = explode(',', $object_ids);	$object_ids = array_map('intval', $object_ids);	$taxonomies = get_object_taxonomies($object_type);	$ids = array();	foreach ( (array) $object_ids as $id ) {		foreach ( $taxonomies as $taxonomy ) {			if ( false === wp_cache_get($id, "{$taxonomy}_relationships") ) {				$ids[] = $id;				break;			}		}	}	if ( empty( $ids ) )		return false;	$terms = wp_get_object_terms($ids, $taxonomies, array('fields' => 'all_with_object_id'));	$object_terms = array();	foreach ( (array) $terms as $term )		$object_terms[$term->object_id][$term->taxonomy][$term->term_id] = $term;	foreach ( $ids as $id ) {		foreach ( $taxonomies  as $taxonomy ) {			if ( ! isset($object_terms[$id][$taxonomy]) ) {				if ( !isset($object_terms[$id]) )					$object_terms[$id] = array();				$object_terms[$id][$taxonomy] = array();			}		}	}	foreach ( $object_terms as $id => $value ) {		foreach ( $value as $taxonomy => $terms ) {			wp_cache_set($id, $terms, "{$taxonomy}_relationships");		}	}}/** * Updates Terms to Taxonomy in cache. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @param array $terms List of Term objects to change * @param string $taxonomy Optional. Update Term to this taxonomy in cache */function update_term_cache($terms, $taxonomy = '') {	foreach ( (array) $terms as $term ) {		$term_taxonomy = $taxonomy;		if ( empty($term_taxonomy) )			$term_taxonomy = $term->taxonomy;		wp_cache_add($term->term_id, $term, $term_taxonomy);	}}//// Private///** * Retrieves children of taxonomy as Term IDs. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * * @uses update_option() Stores all of the children in "$taxonomy_children" *	 option. That is the name of the taxonomy, immediately followed by '_children'. * * @param string $taxonomy Taxonomy Name * @return array Empty if $taxonomy isn't hierarchical or returns children as Term IDs. */function _get_term_hierarchy($taxonomy) {	if ( !is_taxonomy_hierarchical($taxonomy) )		return array();	$children = get_option("{$taxonomy}_children");	if ( is_array($children) )		return $children;	$children = array();	$terms = get_terms($taxonomy, array('get' => 'all', 'orderby' => 'id', 'fields' => 'id=>parent'));	foreach ( $terms as $term_id => $parent ) {		if ( $parent > 0 )			$children[$parent][] = $term_id;	}	update_option("{$taxonomy}_children", $children);	return $children;}/** * Get the subset of $terms that are descendants of $term_id. * * If $terms is an array of objects, then _get_term_children returns an array of objects. * If $terms is an array of IDs, then _get_term_children returns an array of IDs. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * * @param int $term_id The ancestor term: all returned terms should be descendants of $term_id. * @param array $terms The set of terms---either an array of term objects or term IDs---from which those that are descendants of $term_id will be chosen. * @param string $taxonomy The taxonomy which determines the hierarchy of the terms. * @return array The subset of $terms that are descendants of $term_id. */function &_get_term_children($term_id, $terms, $taxonomy) {	$empty_array = array();	if ( empty($terms) )		return $empty_array;	$term_list = array();	$has_children = _get_term_hierarchy($taxonomy);	if  ( ( 0 != $term_id ) && ! isset($has_children[$term_id]) )		return $empty_array;	foreach ( (array) $terms as $term ) {		$use_id = false;		if ( !is_object($term) ) {			$term = get_term($term, $taxonomy);			if ( is_wp_error( $term ) )				return $term;			$use_id = true;		}		if ( $term->term_id == $term_id )			continue;		if ( $term->parent == $term_id ) {			if ( $use_id )				$term_list[] = $term->term_id;			else				$term_list[] = $term;			if ( !isset($has_children[$term->term_id]) )				continue;			if ( $children = _get_term_children($term->term_id, $terms, $taxonomy) )				$term_list = array_merge($term_list, $children);		}	}	return $term_list;}/** * Add count of children to parent count. * * Recalculates term counts by including items from child terms. Assumes all * relevant children are already in the $terms argument. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * @uses $wpdb * * @param array $terms List of Term IDs * @param string $taxonomy Term Context * @return null Will break from function if conditions are not met. */function _pad_term_counts(&$terms, $taxonomy) {	global $wpdb;	// This function only works for hierarchical taxonomies like post categories.	if ( !is_taxonomy_hierarchical( $taxonomy ) )		return;	$term_hier = _get_term_hierarchy($taxonomy);	if ( empty($term_hier) )		return;	$term_items = array();	foreach ( (array) $terms as $key => $term ) {		$terms_by_id[$term->term_id] = & $terms[$key];		$term_ids[$term->term_taxonomy_id] = $term->term_id;	}	// Get the object and term ids and stick them in a lookup table	$tax_obj = get_taxonomy($taxonomy);	$object_types = esc_sql($tax_obj->object_type);	$results = $wpdb->get_results("SELECT object_id, term_taxonomy_id FROM $wpdb->term_relationships INNER JOIN $wpdb->posts ON object_id = ID WHERE term_taxonomy_id IN (" . implode(',', array_keys($term_ids)) . ") AND post_type IN ('" . implode("', '", $object_types) . "') AND post_status = 'publish'");	foreach ( $results as $row ) {		$id = $term_ids[$row->term_taxonomy_id];		$term_items[$id][$row->object_id] = isset($term_items[$id][$row->object_id]) ? ++$term_items[$id][$row->object_id] : 1;	}	// Touch every ancestor's lookup row for each post in each term	foreach ( $term_ids as $term_id ) {		$child = $term_id;		while ( $parent = $terms_by_id[$child]->parent ) {			if ( !empty($term_items[$term_id]) )				foreach ( $term_items[$term_id] as $item_id => $touches ) {					$term_items[$parent][$item_id] = isset($term_items[$parent][$item_id]) ? ++$term_items[$parent][$item_id]: 1;				}			$child = $parent;		}	}	// Transfer the touched cells	foreach ( (array) $term_items as $id => $items )		if ( isset($terms_by_id[$id]) )			$terms_by_id[$id]->count = count($items);}//// Default callbacks///** * Will update term count based on object types of the current taxonomy. * * Private function for the default callback for post_tag and category * taxonomies. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * @uses $wpdb * * @param array $terms List of Term taxonomy IDs * @param object $taxonomy Current taxonomy object of terms */function _update_post_term_count( $terms, $taxonomy ) {	global $wpdb;	$object_types = is_array($taxonomy->object_type) ? $taxonomy->object_type : array($taxonomy->object_type);	$object_types = esc_sql($object_types);	foreach ( (array) $terms as $term ) {		$count = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_relationships, $wpdb->posts WHERE $wpdb->posts.ID = $wpdb->term_relationships.object_id AND post_status = 'publish' AND post_type IN ('" . implode("', '", $object_types) . "') AND term_taxonomy_id = %d", $term ) );		do_action( 'edit_term_taxonomy', $term, $taxonomy );		$wpdb->update( $wpdb->term_taxonomy, compact( 'count' ), array( 'term_taxonomy_id' => $term ) );		do_action( 'edited_term_taxonomy', $term, $taxonomy );	}}/** * Generates a permalink for a taxonomy term archive. * * @since 2.5.0 * * @param object|int|string $term * @param string $taxonomy * @return string HTML link to taxonomy term archive */function get_term_link( $term, $taxonomy ) {	global $wp_rewrite;	if ( !is_object($term) ) {		if ( is_int($term) ) {			$term = &get_term($term, $taxonomy);		} else {			$term = &get_term_by('slug', $term, $taxonomy);		}	}	if ( !is_object($term) )		$term = new WP_Error('invalid_term', __('Empty Term'));	if ( is_wp_error( $term ) )		return $term;	// use legacy functions for core taxonomies until they are fully plugged in	if ( $taxonomy == 'category' )		return get_category_link((int) $term->term_id);	if ( $taxonomy == 'post_tag' )		return get_tag_link((int) $term->term_id);	$termlink = $wp_rewrite->get_extra_permastruct($taxonomy);	$slug = $term->slug;	if ( empty($termlink) ) {		$t = get_taxonomy($taxonomy);		if ( $t->query_var )			$termlink = "?$t->query_var=$slug";		else			$termlink = "?taxonomy=$taxonomy&term=$slug";		$termlink = home_url($termlink);	} else {		$termlink = str_replace("%$taxonomy%", $slug, $termlink);		$termlink = home_url( user_trailingslashit($termlink, 'category') );	}	return apply_filters('term_link', $termlink, $term, $taxonomy);}/** * Display the taxonomies of a post with available options. * * This function can be used within the loop to display the taxonomies for a * post without specifying the Post ID. You can also use it outside the Loop to * display the taxonomies for a specific post. * * The available defaults are: * 'post' : default is 0. The post ID to get taxonomies of. * 'before' : default is empty string. Display before taxonomies list. * 'sep' : default is empty string. Separate every taxonomy with value in this. * 'after' : default is empty string. Display this after the taxonomies list. * * @since 2.5.0 * @uses get_the_taxonomies() * * @param array $args Override the defaults. */function the_taxonomies($args = array()) {	$defaults = array(		'post' => 0,		'before' => '',		'sep' => ' ',		'after' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	echo $before . join($sep, get_the_taxonomies($post)) . $after;}/** * Retrieve all taxonomies associated with a post. * * This function can be used within the loop. It will also return an array of * the taxonomies with links to the taxonomy and name. * * @since 2.5.0 * * @param int $post Optional. Post ID or will use Global Post ID (in loop). * @return array */function get_the_taxonomies($post = 0) {	if ( is_int($post) )		$post =& get_post($post);	elseif ( !is_object($post) )		$post =& $GLOBALS['post'];	$taxonomies = array();	if ( !$post )		return $taxonomies;	$template = apply_filters('taxonomy_template', '%s: %l.');	foreach ( get_object_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		if ( empty($t['template']) )			$t['template'] = $template;		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$links = array();		foreach ( $terms as $term )			$links[] = "<a href='" . esc_attr(get_term_link($term, $taxonomy)) . "'>$term->name</a>";		if ( $links )			$taxonomies[$taxonomy] = wp_sprintf($t['template'], $t['label'], $links, $terms);	}	return $taxonomies;}/** * Retrieve all taxonomies of a post with just the names. * * @since 2.5.0 * @uses get_object_taxonomies() * * @param int $post Optional. Post ID * @return array */function get_post_taxonomies($post = 0) {	$post =& get_post($post);	return get_object_taxonomies($post);}/** * Determine if the given object is associated with any of the given terms. * * The given terms are checked against the object's terms' term_ids, names and slugs. * Terms given as integers will only be checked against the object's terms' term_ids. * If no terms are given, determines if object is associated with any terms in the given taxonomy. * * @since 2.7.0 * @uses get_object_term_cache() * @uses wp_get_object_terms() * * @param int $object_id.  ID of the object (post ID, link ID, ...) * @param string $taxonomy.  Single taxonomy name * @param int|string|array $terms Optional.  Term term_id, name, slug or array of said * @return bool|WP_Error. WP_Error on input error. */function is_object_in_term( $object_id, $taxonomy, $terms = null ) {	if ( !$object_id = (int) $object_id )		return new WP_Error( 'invalid_object', __( 'Invalid object ID' ) );	$object_terms = get_object_term_cache( $object_id, $taxonomy );	if ( empty( $object_terms ) )		 $object_terms = wp_get_object_terms( $object_id, $taxonomy );	if ( is_wp_error( $object_terms ) )		return $object_terms;	if ( empty( $object_terms ) )		return false;	if ( empty( $terms ) )		return ( !empty( $object_terms ) );	$terms = (array) $terms;	if ( $ints = array_filter( $terms, 'is_int' ) )		$strs = array_diff( $terms, $ints );	else		$strs =& $terms;	foreach ( $object_terms as $object_term ) {		if ( $ints && in_array( $object_term->term_id, $ints ) ) return true; // If int, check against term_id		if ( $strs ) {			if ( in_array( $object_term->term_id, $strs ) ) return true;			if ( in_array( $object_term->name, $strs ) )    return true;			if ( in_array( $object_term->slug, $strs ) )    return true;		}	}	return false;}/** * Determine if the given object type is associated with the given taxonomy. * * @since 3.0.0 * @uses get_object_taxonomies() * * @param string $object_type Object type string * @param string $taxonomy.  Single taxonomy name * @return bool True if object is associated with the taxonomy, otherwise false. */function is_object_in_taxonomy($object_type, $taxonomy) {	$taxonomies = get_object_taxonomies($object_type);	if ( empty($taxonomies) )		return false;	if ( in_array($taxonomy, $taxonomies) )		return true;	return false;}
<?phpdefine( "WP_INSTALLING", true );/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );require( './wp-blog-header.php' );if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}require_once( ABSPATH . WPINC . '/registration.php');if ( is_object( $wp_object_cache ) )	$wp_object_cache->cache_enabled = false;do_action("activate_header");function do_activate_header() {	do_action("activate_wp_head");}add_action( 'wp_head', 'do_activate_header' );function wpmu_activate_stylesheet() {	?>	<style type="text/css">		form { margin-top: 2em; }		#submit, #key { width: 90%; font-size: 24px; }		#language { margin-top: .5em; }		.error { background: #f66; }		span.h3 { padding:0 8px; font-size:1.3em; font-family:'Trebuchet MS','Lucida Grande',Verdana,Arial,Sans-Serif; font-weight:700; color:#333333; }	</style>	<?php}add_action( 'wp_head', 'wpmu_activate_stylesheet' );get_header();?><div id="content" class="widecolumn">	<?php if ( empty($_GET['key']) && empty($_POST['key']) ) { ?>		<h2><?php _e('Activation Key Required') ?></h2>		<form name="activateform" id="activateform" method="post" action="<?php echo network_site_url('wp-activate.php'); ?>">			<p>			    <label for="key"><?php _e('Activation Key:') ?></label>			    <br /><input type="text" name="key" id="key" value="" size="50" />			</p>			<p class="submit">			    <input id="submit" type="submit" name="Submit" class="submit" value="<?php esc_attr_e('Activate') ?>" />			</p>		</form>	<?php } else {		$key = !empty($_GET['key']) ? $_GET['key'] : $_POST['key'];		$result = wpmu_activate_signup($key);		if ( is_wp_error($result) ) {			if ( 'already_active' == $result->get_error_code() || 'blog_taken' == $result->get_error_code() ) {			    $signup = $result->get_error_data();				?>				<h2><?php _e('Your account is now active!'); ?></h2>				<?php				echo '<p class="lead-in">';				if ( $signup->domain . $signup->path == '' ) {					printf( __('Your account has been activated. You may now <a href="%1$s">login</a> to the site using your chosen username of &#8220;%2$s&#8221;.  Please check your email inbox at %3$s for your password and login instructions. If you do not receive an email, please check your junk or spam folder. If you still do not receive an email within an hour, you can <a href="%4$s">reset your password</a>.'), network_site_url( 'wp-login.php', 'login' ), $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword', 'login' ) );				} else {					printf( __('Your site at <a href="%1$s">%2$s</a> is active. You may now log in to your site using your chosen username of &#8220;%3$s&#8221;.  Please check your email inbox at %4$s for your password and login instructions.  If you do not receive an email, please check your junk or spam folder.  If you still do not receive an email within an hour, you can <a href="%5$s">reset your password</a>.'), 'http://' . $signup->domain, $signup->domain, $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword' ) );				}				echo '</p>';			} else {				?>				<h2><?php _e('An error occurred during the activation'); ?></h2>				<?php			    echo '<p>'.$result->get_error_message().'</p>';			}		} else {			extract($result);			$url = get_blogaddress_by_id( (int) $blog_id);			$user = new WP_User( (int) $user_id);			?>			<h2><?php _e('Your account is now active!'); ?></h2>			<div id="signup-welcome">				<p><span class="h3"><?php _e('Username:'); ?></span> <?php echo $user->user_login ?></p>				<p><span class="h3"><?php _e('Password:'); ?></span> <?php echo $password; ?></p>			</div>			<?php if ( $url != network_home_url('', 'http') ) : ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">View your site</a> or <a href="%2$s">Login</a>'), $url, $url . 'wp-login.php' ); ?></p>			<?php else: ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">Login</a> or go back to the <a href="%2$s">homepage</a>.' ), network_site_url('wp-login.php', 'login'), network_home_url() ); ?></p>			<?php endif;		}	}	?></div><script type="text/javascript">	var key_input = document.getElementById('key');	key_input && key_input.focus();</script><?php get_footer(); ?>
<?php/** * Discussion settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Discussion Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen provides many options for controlling the management and display of comments and links to your posts/pages. So many, in fact, they won&#8217;t all fit here! :) Use the documentation link below to get information on what each discussion setting does.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Discussion_SubPanel" target="_blank">Discussion Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('discussion'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Default article settings') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Default article settings') ?></span></legend><label for="default_pingback_flag"><input name="default_pingback_flag" type="checkbox" id="default_pingback_flag" value="1" <?php checked('1', get_option('default_pingback_flag')); ?> /><?php _e('Attempt to notify any blogs linked to from the article.') ?></label><br /><label for="default_ping_status"><input name="default_ping_status" type="checkbox" id="default_ping_status" value="open" <?php checked('open', get_option('default_ping_status')); ?> /><?php _e('Allow link notifications from other blogs (pingbacks and trackbacks.)') ?></label><br /><label for="default_comment_status"><input name="default_comment_status" type="checkbox" id="default_comment_status" value="open" <?php checked('open', get_option('default_comment_status')); ?> /><?php _e('Allow people to post comments on new articles') ?></label><br /><small><em><?php echo '(' . __('These settings may be overridden for individual articles.') . ')'; ?></em></small></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Other comment settings') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Other comment settings') ?></span></legend><label for="require_name_email"><input type="checkbox" name="require_name_email" id="require_name_email" value="1" <?php checked('1', get_option('require_name_email')); ?> /> <?php _e('Comment author must fill out name and e-mail') ?></label><br /><label for="comment_registration"><input name="comment_registration" type="checkbox" id="comment_registration" value="1" <?php checked('1', get_option('comment_registration')); ?> /><?php _e('Users must be registered and logged in to comment') ?><?php if ( !get_option( 'users_can_register' ) && is_multisite() ) _e( ' (Signup has been disabled. Only members of this site can comment.)' ); ?></label><br /><label for="close_comments_for_old_posts"><input name="close_comments_for_old_posts" type="checkbox" id="close_comments_for_old_posts" value="1" <?php checked('1', get_option('close_comments_for_old_posts')); ?> /><?php printf( __('Automatically close comments on articles older than %s days'), '</label><input name="close_comments_days_old" type="text" id="close_comments_days_old" value="' . esc_attr(get_option('close_comments_days_old')) . '" class="small-text" />') ?><br /><label for="thread_comments"><input name="thread_comments" type="checkbox" id="thread_comments" value="1" <?php checked('1', get_option('thread_comments')); ?> /><?php$maxdeep = (int) apply_filters( 'thread_comments_depth_max', 10 );$thread_comments_depth = '</label><select name="thread_comments_depth" id="thread_comments_depth">';for ( $i = 2; $i <= $maxdeep; $i++ ) {	$thread_comments_depth .= "<option value='" . esc_attr($i) . "'";	if ( get_option('thread_comments_depth') == $i ) $thread_comments_depth .= " selected='selected'";	$thread_comments_depth .= ">$i</option>";}$thread_comments_depth .= '</select>';printf( __('Enable threaded (nested) comments %s levels deep'), $thread_comments_depth );?><br /><label for="page_comments"><input name="page_comments" type="checkbox" id="page_comments" value="1" <?php checked('1', get_option('page_comments')); ?> /><?php$default_comments_page = '</label><label for="default_comments_page"><select name="default_comments_page" id="default_comments_page"><option value="newest"';if ( 'newest' == get_option('default_comments_page') ) $default_comments_page .= ' selected="selected"';$default_comments_page .= '>' . __('last') . '</option><option value="oldest"';if ( 'oldest' == get_option('default_comments_page') ) $default_comments_page .= ' selected="selected"';$default_comments_page .= '>' . __('first') . '</option></select>';printf( __('Break comments into pages with %1$s top level comments per page and the %2$s page displayed by default'), '</label><label for="comments_per_page"><input name="comments_per_page" type="text" id="comments_per_page" value="' . esc_attr(get_option('comments_per_page')) . '" class="small-text" />', $default_comments_page );?></label><br /><label for="comment_order"><?php$comment_order = '<select name="comment_order" id="comment_order"><option value="asc"';if ( 'asc' == get_option('comment_order') ) $comment_order .= ' selected="selected"';$comment_order .= '>' . __('older') . '</option><option value="desc"';if ( 'desc' == get_option('comment_order') ) $comment_order .= ' selected="selected"';$comment_order .= '>' . __('newer') . '</option></select>';printf( __('Comments should be displayed with the %s comments at the top of each page'), $comment_order );?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('E-mail me whenever') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('E-mail me whenever') ?></span></legend><label for="comments_notify"><input name="comments_notify" type="checkbox" id="comments_notify" value="1" <?php checked('1', get_option('comments_notify')); ?> /><?php _e('Anyone posts a comment') ?> </label><br /><label for="moderation_notify"><input name="moderation_notify" type="checkbox" id="moderation_notify" value="1" <?php checked('1', get_option('moderation_notify')); ?> /><?php _e('A comment is held for moderation') ?> </label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Before a comment appears') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Before a comment appears') ?></span></legend><label for="comment_moderation"><input name="comment_moderation" type="checkbox" id="comment_moderation" value="1" <?php checked('1', get_option('comment_moderation')); ?> /><?php _e('An administrator must always approve the comment') ?> </label><br /><label for="comment_whitelist"><input type="checkbox" name="comment_whitelist" id="comment_whitelist" value="1" <?php checked('1', get_option('comment_whitelist')); ?> /> <?php _e('Comment author must have a previously approved comment') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Comment Moderation') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Comment Moderation') ?></span></legend><p><label for="comment_max_links"><?php printf(__('Hold a comment in the queue if it contains %s or more links. (A common characteristic of comment spam is a large number of hyperlinks.)'), '<input name="comment_max_links" type="text" id="comment_max_links" value="' . esc_attr(get_option('comment_max_links')) . '" class="small-text" />' ) ?></label></p><p><label for="moderation_keys"><?php _e('When a comment contains any of these words in its content, name, URL, e-mail, or IP, it will be held in the <a href="edit-comments.php?comment_status=moderated">moderation queue</a>. One word or IP per line. It will match inside words, so &#8220;press&#8221; will match &#8220;WordPress&#8221;.') ?></label></p><p><textarea name="moderation_keys" rows="10" cols="50" id="moderation_keys" class="large-text code"><?php form_option('moderation_keys'); ?></textarea></p></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Comment Blacklist') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Comment Blacklist') ?></span></legend><p><label for="blacklist_keys"><?php _e('When a comment contains any of these words in its content, name, URL, e-mail, or IP, it will be marked as spam. One word or IP per line. It will match inside words, so &#8220;press&#8221; will match &#8220;WordPress&#8221;.') ?></label></p><p><textarea name="blacklist_keys" rows="10" cols="50" id="blacklist_keys" class="large-text code"><?php form_option('blacklist_keys'); ?></textarea></p></fieldset></td></tr><?php do_settings_fields('discussion', 'default'); ?></table><h3><?php _e('Avatars') ?></h3><p><?php _e('An avatar is an image that follows you from weblog to weblog appearing beside your name when you comment on avatar enabled sites.  Here you can enable the display of avatars for people who comment on your site.'); ?></p><?php // the above would be a good place to link to codex documentation on the gravatar functions, for putting it in themes. anything like that? ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Avatar Display') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Avatar Display') ?></span></legend><?php	$yesorno = array( 0 => __( 'Don&#8217;t show Avatars' ), 1 => __( 'Show Avatars' ) );	foreach ( $yesorno as $key => $value) {		$selected = (get_option('show_avatars') == $key) ? 'checked="checked"' : '';		echo "\n\t<label><input type='radio' name='show_avatars' value='" . esc_attr($key) . "' $selected/> $value</label><br />";	}?></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum Rating') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Maximum Rating') ?></span></legend><?php$ratings = array(	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'G' => __('G &#8212; Suitable for all audiences'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'PG' => __('PG &#8212; Possibly offensive, usually for audiences 13 and above'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'R' => __('R &#8212; Intended for adult audiences above 17'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'X' => __('X &#8212; Even more mature than above'));foreach ($ratings as $key => $rating) :	$selected = (get_option('avatar_rating') == $key) ? 'checked="checked"' : '';	echo "\n\t<label><input type='radio' name='avatar_rating' value='" . esc_attr($key) . "' $selected/> $rating</label><br />";endforeach;?></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Default Avatar') ?></th><td class="defaultavatarpicker"><fieldset><legend class="screen-reader-text"><span><?php _e('Default Avatar') ?></span></legend><?php _e('For users without a custom avatar of their own, you can either display a generic logo or a generated one based on their e-mail address.'); ?><br /><?php$avatar_defaults = array(	'mystery' => __('Mystery Man'),	'blank' => __('Blank'),	'gravatar_default' => __('Gravatar Logo'),	'identicon' => __('Identicon (Generated)'),	'wavatar' => __('Wavatar (Generated)'),	'monsterid' => __('MonsterID (Generated)'));$avatar_defaults = apply_filters('avatar_defaults', $avatar_defaults);$default = get_option('avatar_default');if ( empty($default) )	$default = 'mystery';$size = 32;$avatar_list = '';foreach ( $avatar_defaults as $default_key => $default_name ) {	$selected = ($default == $default_key) ? 'checked="checked" ' : '';	$avatar_list .= "\n\t<label><input type='radio' name='avatar_default' id='avatar_{$default_key}' value='" . esc_attr($default_key)  . "' {$selected}/> ";	$avatar = get_avatar( $user_email, $size, $default_key );	$avatar_list .= preg_replace("/src='(.+?)'/", "src='\$1&amp;forcedefault=1'", $avatar);	$avatar_list .= ' ' . $default_name . '</label>';	$avatar_list .= '<br />';}echo apply_filters('default_avatar_select', $avatar_list);?></fieldset></td></tr><?php do_settings_fields('discussion', 'avatars'); ?></table><?php do_settings_sections('discussion'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * WordPress Post Template Functions. * * Gets content for the current post in the loop. * * @package WordPress * @subpackage Template *//** * Display the ID of the current item in the WordPress Loop. * * @since 0.71 * @uses $id */function the_ID() {	global $id;	echo $id;}/** * Retrieve the ID of the current item in the WordPress Loop. * * @since 2.1.0 * @uses $id * * @return unknown */function get_the_ID() {	global $id;	return $id;}/** * Display or retrieve the current post title with optional content. * * @since 0.71 * * @param string $before Optional. Content to prepend to the title. * @param string $after Optional. Content to append to the title. * @param bool $echo Optional, default to true.Whether to display or return. * @return null|string Null on no title. String if $echo parameter is false. */function the_title($before = '', $after = '', $echo = true) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$title = $before . $title . $after;	if ( $echo )		echo $title;	else		return $title;}/** * Sanitize the current title when retrieving or displaying. * * Works like {@link the_title()}, except the parameters can be in a string or * an array. See the function for what can be override in the $args parameter. * * The title before it is displayed will have the tags stripped and {@link * esc_attr()} before it is passed to the user or displayed. The default * as with {@link the_title()}, is to display the title. * * @since 2.3.0 * * @param string|array $args Optional. Override the defaults. * @return string|null Null on failure or display. String when echo is false. */function the_title_attribute( $args = '' ) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$defaults = array('before' => '', 'after' =>  '', 'echo' => true);	$r = wp_parse_args($args, $defaults);	extract( $r, EXTR_SKIP );	$title = $before . $title . $after;	$title = esc_attr(strip_tags($title));	if ( $echo )		echo $title;	else		return $title;}/** * Retrieve post title. * * If the post is protected and the visitor is not an admin, then "Protected" * will be displayed before the post title. If the post is private, then * "Private" will be located before the post title. * * @since 0.71 * * @param int $id Optional. Post ID. * @return string */function get_the_title( $id = 0 ) {	$post = &get_post($id);	$title = isset($post->post_title) ? $post->post_title : '';	$id = isset($post->ID) ? $post->ID : (int) $id;	if ( !is_admin() ) {		if ( !empty($post->post_password) ) {			$protected_title_format = apply_filters('protected_title_format', __('Protected: %s'));			$title = sprintf($protected_title_format, $title);		} else if ( isset($post->post_status) && 'private' == $post->post_status ) {			$private_title_format = apply_filters('private_title_format', __('Private: %s'));			$title = sprintf($private_title_format, $title);		}	}	return apply_filters( 'the_title', $title, $id );}/** * Display the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * Url is escaped to make it xml safe * * @since 1.5.0 * * @param int $id Optional. Post ID. */function the_guid( $id = 0 ) {	echo esc_url( get_the_guid( $id ) );}/** * Retrieve the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @return string */function get_the_guid( $id = 0 ) {	$post = &get_post($id);	return apply_filters('get_the_guid', $post->guid);}/** * Display the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. */function the_content($more_link_text = null, $stripteaser = 0) {	$content = get_the_content($more_link_text, $stripteaser);	$content = apply_filters('the_content', $content);	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Retrieve the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. * @return string */function get_the_content($more_link_text = null, $stripteaser = 0) {	global $id, $post, $more, $page, $pages, $multipage, $preview;	if ( null === $more_link_text )		$more_link_text = __( '(more...)' );	$output = '';	$hasTeaser = false;	// If post password required and it doesn't match the cookie.	if ( post_password_required($post) ) {		$output = get_the_password_form();		return $output;	}	if ( $page > count($pages) ) // if the requested page doesn't exist		$page = count($pages); // give them the highest numbered page that DOES exist	$content = $pages[$page-1];	if ( preg_match('/<!--more(.*?)?-->/', $content, $matches) ) {		$content = explode($matches[0], $content, 2);		if ( !empty($matches[1]) && !empty($more_link_text) )			$more_link_text = strip_tags(wp_kses_no_null(trim($matches[1])));		$hasTeaser = true;	} else {		$content = array($content);	}	if ( (false !== strpos($post->post_content, '<!--noteaser-->') && ((!$multipage) || ($page==1))) )		$stripteaser = 1;	$teaser = $content[0];	if ( ($more) && ($stripteaser) && ($hasTeaser) )		$teaser = '';	$output .= $teaser;	if ( count($content) > 1 ) {		if ( $more ) {			$output .= '<span id="more-' . $id . '"></span>' . $content[1];		} else {			if ( ! empty($more_link_text) )				$output .= apply_filters( 'the_content_more_link', ' <a href="' . get_permalink() . "#more-$id\" class=\"more-link\">$more_link_text</a>", $more_link_text );			$output = force_balance_tags($output);		}	}	if ( $preview ) // preview fix for javascript bug with foreign languages		$output =	preg_replace_callback('/\%u([0-9A-F]{4})/', create_function('$match', 'return "&#" . base_convert($match[1], 16, 10) . ";";'), $output);	return $output;}/** * Display the post excerpt. * * @since 0.71 * @uses apply_filters() Calls 'the_excerpt' hook on post excerpt. */function the_excerpt() {	echo apply_filters('the_excerpt', get_the_excerpt());}/** * Retrieve the post excerpt. * * @since 0.71 * * @param mixed $deprecated Not used. * @return string */function get_the_excerpt( $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	global $post;	$output = $post->post_excerpt;	if ( post_password_required($post) ) {		$output = __('There is no excerpt because this is a protected post.');		return $output;	}	return apply_filters('get_the_excerpt', $output);}/** * Whether post has excerpt. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @return bool */function has_excerpt( $id = 0 ) {	$post = &get_post( $id );	return ( !empty( $post->post_excerpt ) );}/** * Display the classes for the post div. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. */function post_class( $class = '', $post_id = null ) {	// Separates classes with a single space, collates classes for post DIV	echo 'class="' . join( ' ', get_post_class( $class, $post_id ) ) . '"';}/** * Retrieve the classes for the post div as an array. * * The class names are add are many. If the post is a sticky, then the 'sticky' * class name. The class 'hentry' is always added to each post. For each * category, the class will be added with 'category-' with category slug is * added. The tags are the same way as the categories with 'tag-' before the tag * slug. All classes are passed through the filter, 'post_class' with the list * of classes, followed by $class parameter value, with the post ID as the last * parameter. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. * @return array Array of classes. */function get_post_class( $class = '', $post_id = null ) {	$post = get_post($post_id);	$classes = array();	if ( empty($post) )		return $classes;	$classes[] = 'post-' . $post->ID;	$classes[] = $post->post_type;	$classes[] = 'type-' . $post->post_type;	// sticky for Sticky Posts	if ( is_sticky($post->ID) && is_home() && !is_paged() )		$classes[] = 'sticky';	// hentry for hAtom compliace	$classes[] = 'hentry';	// Categories	foreach ( (array) get_the_category($post->ID) as $cat ) {		if ( empty($cat->slug ) )			continue;		$classes[] = 'category-' . sanitize_html_class($cat->slug, $cat->cat_ID);	}	// Tags	foreach ( (array) get_the_tags($post->ID) as $tag ) {		if ( empty($tag->slug ) )			continue;		$classes[] = 'tag-' . sanitize_html_class($tag->slug, $tag->term_id);	}	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('post_class', $classes, $class, $post->ID);}/** * Display the classes for the body element. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. */function body_class( $class = '' ) {	// Separates classes with a single space, collates classes for body element	echo 'class="' . join( ' ', get_body_class( $class ) ) . '"';}/** * Retrieve the classes for the body element as an array. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. * @return array Array of classes. */function get_body_class( $class = '' ) {	global $wp_query, $wpdb;	$classes = array();	if ( is_rtl() )		$classes[] = 'rtl';	if ( is_front_page() )		$classes[] = 'home';	if ( is_home() )		$classes[] = 'blog';	if ( is_archive() )		$classes[] = 'archive';	if ( is_date() )		$classes[] = 'date';	if ( is_search() )		$classes[] = 'search';	if ( is_paged() )		$classes[] = 'paged';	if ( is_attachment() )		$classes[] = 'attachment';	if ( is_404() )		$classes[] = 'error404';	if ( is_single() ) {		$post_id = $wp_query->get_queried_object_id();		$post = $wp_query->get_queried_object();		$classes[] = 'single';		$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);		$classes[] = 'postid-' . $post_id;		if ( is_attachment() ) {			$mime_type = get_post_mime_type($post_id);			$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );			$classes[] = 'attachmentid-' . $post_id;			$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );		}	} elseif ( is_archive() ) {		if ( is_author() ) {			$author = $wp_query->get_queried_object();			$classes[] = 'author';			$classes[] = 'author-' . sanitize_html_class( $author->user_nicename , $author->ID );		} elseif ( is_category() ) {			$cat = $wp_query->get_queried_object();			$classes[] = 'category';			$classes[] = 'category-' . sanitize_html_class( $cat->slug, $cat->cat_ID );		} elseif ( is_tag() ) {			$tags = $wp_query->get_queried_object();			$classes[] = 'tag';			$classes[] = 'tag-' . sanitize_html_class( $tags->slug, $tags->term_id );		}	} elseif ( is_page() ) {		$classes[] = 'page';		$page_id = $wp_query->get_queried_object_id();		$post = get_page($page_id);		$classes[] = 'page-id-' . $page_id;		if ( $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' AND post_status = 'publish' LIMIT 1", $page_id) ) )			$classes[] = 'page-parent';		if ( $post->post_parent ) {			$classes[] = 'page-child';			$classes[] = 'parent-pageid-' . $post->post_parent;		}		if ( is_page_template() ) {			$classes[] = 'page-template';			$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', get_post_meta( $page_id, '_wp_page_template', true ) ), '' );		}	} elseif ( is_search() ) {		if ( !empty( $wp_query->posts ) )			$classes[] = 'search-results';		else			$classes[] = 'search-no-results';	}	if ( is_user_logged_in() )		$classes[] = 'logged-in';	$page = $wp_query->get( 'page' );	if ( !$page || $page < 2)		$page = $wp_query->get( 'paged' );	if ( $page && $page > 1 ) {		$classes[] = 'paged-' . $page;		if ( is_single() )			$classes[] = 'single-paged-' . $page;		elseif ( is_page() )			$classes[] = 'page-paged-' . $page;		elseif ( is_category() )			$classes[] = 'category-paged-' . $page;		elseif ( is_tag() )			$classes[] = 'tag-paged-' . $page;		elseif ( is_date() )			$classes[] = 'date-paged-' . $page;		elseif ( is_author() )			$classes[] = 'author-paged-' . $page;		elseif ( is_search() )			$classes[] = 'search-paged-' . $page;	}	if ( !empty( $class ) ) {		if ( !is_array( $class ) )			$class = preg_split( '#\s+#', $class );		$classes = array_merge( $classes, $class );	}	$classes = array_map( 'esc_attr', $classes );	return apply_filters( 'body_class', $classes, $class );}/** * Whether post requires password and correct password has been provided. * * @since 2.7.0 * * @param int|object $post An optional post.  Global $post used if not provided. * @return bool false if a password is not required or the correct password cookie is present, true otherwise. */function post_password_required( $post = null ) {	$post = get_post($post);	if ( empty($post->post_password) )		return false;	if ( !isset($_COOKIE['wp-postpass_' . COOKIEHASH]) )		return true;	if ( $_COOKIE['wp-postpass_' . COOKIEHASH] != $post->post_password )		return true;	return false;}/** * Display "sticky" CSS class, if a post is sticky. * * @since 2.7.0 * * @param int $post_id An optional post ID. */function sticky_class( $post_id = null ) {	if ( !is_sticky($post_id) )		return;	echo " sticky";}/** * Page Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of pages. * * Displays page links for paginated posts (i.e. includes the <!--nextpage-->. * Quicktag one or more times). This tag must be within The Loop. * * The defaults for overwriting are: * 'next_or_number' - Default is 'number' (string). Indicates whether page *      numbers should be used. Valid values are number and next. * 'nextpagelink' - Default is 'Next Page' (string). Text for link to next page. *      of the bookmark. * 'previouspagelink' - Default is 'Previous Page' (string). Text for link to *      previous page, if available. * 'pagelink' - Default is '%' (String).Format string for page numbers. The % in *      the parameter string will be replaced with the page number, so Page % *      generates "Page 1", "Page 2", etc. Defaults to %, just the page number. * 'before' - Default is '<p> Pages:' (string). The html or text to prepend to *      each bookmarks. * 'after' - Default is '</p>' (string). The html or text to append to each *      bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *      Pages link inside the <a> tag. Also prepended to the current item, which *      is not linked. * 'link_after' - Default is '' (string). The html or text to append to each *      Pages link inside the <a> tag. Also appended to the current item, which *      is not linked. * * @since 1.2.0 * @access private * * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML. */function wp_link_pages($args = '') {	$defaults = array(		'before' => '<p>' . __('Pages:'), 'after' => '</p>',		'link_before' => '', 'link_after' => '',		'next_or_number' => 'number', 'nextpagelink' => __('Next page'),		'previouspagelink' => __('Previous page'), 'pagelink' => '%',		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	$r = apply_filters( 'wp_link_pages_args', $r );	extract( $r, EXTR_SKIP );	global $post, $page, $numpages, $multipage, $more, $pagenow;	$output = '';	if ( $multipage ) {		if ( 'number' == $next_or_number ) {			$output .= $before;			for ( $i = 1; $i < ($numpages+1); $i = $i + 1 ) {				$j = str_replace('%',$i,$pagelink);				$output .= ' ';				if ( ($i != $page) || ((!$more) && ($page==1)) ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}				}				$output .= $link_before;				$output .= $j;				$output .= $link_after;				if ( ($i != $page) || ((!$more) && ($page==1)) )					$output .= '</a>';			}			$output .= $after;		} else {			if ( $more ) {				$output .= $before;				$i = $page - 1;				if ( $i && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $previouspagelink . $link_after . '</a>';				}				$i = $page + 1;				if ( $i <= $numpages && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $nextpagelink . $link_after . '</a>';				}				$output .= $after;			}		}	}	if ( $echo )		echo $output;	return $output;}//// Post-meta: Custom per-post fields.///** * Retrieve post custom meta data field. * * @since 1.5.0 * * @param string $key Meta data key name. * @return bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist. */function post_custom( $key = '' ) {	$custom = get_post_custom();	if ( !isset( $custom[$key] ) )		return false;	elseif ( 1 == count($custom[$key]) )		return $custom[$key][0];	else		return $custom[$key];}/** * Display list of post custom fields. * * @internal This will probably change at some point... * @since 1.2.0 * @uses apply_filters() Calls 'the_meta_key' on list item HTML content, with key and value as separate parameters. */function the_meta() {	if ( $keys = get_post_custom_keys() ) {		echo "<ul class='post-meta'>\n";		foreach ( (array) $keys as $key ) {			$keyt = trim($key);			if ( '_' == $keyt{0} )				continue;			$values = array_map('trim', get_post_custom_values($key));			$value = implode($values,', ');			echo apply_filters('the_meta_key', "<li><span class='post-meta-key'>$key:</span> $value</li>\n", $key, $value);		}		echo "</ul>\n";	}}//// Pages///** * Retrieve or display list of pages as a dropdown (select list). * * @since 2.1.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_dropdown_pages($args = '') {	$defaults = array(		'depth' => 0, 'child_of' => 0,		'selected' => 0, 'echo' => 1,		'name' => 'page_id', 'id' => '',		'show_option_none' => '', 'show_option_no_change' => '',		'option_none_value' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$pages = get_pages($r);	$output = '';	$name = esc_attr($name);	// Back-compat with old system where both id and name were based on $name argument	if ( empty($id) )		$id = $name;	if ( ! empty($pages) ) {		$output = "<select name=\"$name\" id=\"$id\">\n";		if ( $show_option_no_change )			$output .= "\t<option value=\"-1\">$show_option_no_change</option>";		if ( $show_option_none )			$output .= "\t<option value=\"" . esc_attr($option_none_value) . "\">$show_option_none</option>\n";		$output .= walk_page_dropdown_tree($pages, $depth, $r);		$output .= "</select>\n";	}	$output = apply_filters('wp_dropdown_pages', $output);	if ( $echo )		echo $output;	return $output;}/** * Retrieve or display list of pages in list (li) format. * * @since 1.5.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_list_pages($args = '') {	$defaults = array(		'depth' => 0, 'show_date' => '',		'date_format' => get_option('date_format'),		'child_of' => 0, 'exclude' => '',		'title_li' => __('Pages'), 'echo' => 1,		'authors' => '', 'sort_column' => 'menu_order, post_title',		'link_before' => '', 'link_after' => '', 'walker' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	$current_page = 0;	// sanitize, mostly to keep spaces out	$r['exclude'] = preg_replace('/[^0-9,]/', '', $r['exclude']);	// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)	$exclude_array = ( $r['exclude'] ) ? explode(',', $r['exclude']) : array();	$r['exclude'] = implode( ',', apply_filters('wp_list_pages_excludes', $exclude_array) );	// Query pages.	$r['hierarchical'] = 0;	$pages = get_pages($r);	if ( !empty($pages) ) {		if ( $r['title_li'] )			$output .= '<li class="pagenav">' . $r['title_li'] . '<ul>';		global $wp_query;		if ( is_page() || is_attachment() || $wp_query->is_posts_page )			$current_page = $wp_query->get_queried_object_id();		$output .= walk_page_tree($pages, $r['depth'], $current_page, $r);		if ( $r['title_li'] )			$output .= '</ul></li>';	}	$output = apply_filters('wp_list_pages', $output, $r);	if ( $r['echo'] )		echo $output;	else		return $output;}/** * Display or retrieve list of pages with optional home link. * * The arguments are listed below and part of the arguments are for {@link * wp_list_pages()} function. Check that function for more info on those * arguments. * * <ul> * <li><strong>sort_column</strong> - How to sort the list of pages. Defaults * to page title. Use column for posts table.</li> * <li><strong>menu_class</strong> - Class to use for the div ID which contains * the page list. Defaults to 'menu'.</li> * <li><strong>echo</strong> - Whether to echo list or return it. Defaults to * echo.</li> * <li><strong>link_before</strong> - Text before show_home argument text.</li> * <li><strong>link_after</strong> - Text after show_home argument text.</li> * <li><strong>show_home</strong> - If you set this argument, then it will * display the link to the home page. The show_home argument really just needs * to be set to the value of the text of the link.</li> * </ul> * * @since 2.7.0 * * @param array|string $args */function wp_page_menu( $args = array() ) {	$defaults = array('sort_column' => 'menu_order, post_title', 'menu_class' => 'menu', 'echo' => true, 'link_before' => '', 'link_after' => '');	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_page_menu_args', $args );	$menu = '';	$list_args = $args;	// Show Home in the menu	if ( ! empty($args['show_home']) ) {		if ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )			$text = __('Home');		else			$text = $args['show_home'];		$class = '';		if ( is_front_page() && !is_paged() )			$class = 'class="current_page_item"';		$menu .= '<li ' . $class . '><a href="' . home_url( '/' ) . '" title="' . esc_attr($text) . '">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';		// If the front page is a page, add it to the exclude list		if (get_option('show_on_front') == 'page') {			if ( !empty( $list_args['exclude'] ) ) {				$list_args['exclude'] .= ',';			} else {				$list_args['exclude'] = '';			}			$list_args['exclude'] .= get_option('page_on_front');		}	}	$list_args['echo'] = false;	$list_args['title_li'] = '';	$menu .= str_replace( array( "\r", "\n", "\t" ), '', wp_list_pages($list_args) );	if ( $menu )		$menu = '<ul>' . $menu . '</ul>';	$menu = '<div class="' . esc_attr($args['menu_class']) . '">' . $menu . "</div>\n";	$menu = apply_filters( 'wp_page_menu', $menu, $args );	if ( $args['echo'] )		echo $menu;	else		return $menu;}//// Page helpers///** * Retrieve HTML list content for page list. * * @uses Walker_Page to create HTML list content. * @since 2.1.0 * @see Walker_Page::walk() for parameters and return description. */function walk_page_tree($pages, $depth, $current_page, $r) {	if ( empty($r['walker']) )		$walker = new Walker_Page;	else		$walker = $r['walker'];	$args = array($pages, $depth, $r, $current_page);	return call_user_func_array(array(&$walker, 'walk'), $args);}/** * Retrieve HTML dropdown (select) content for page list. * * @uses Walker_PageDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_PageDropdown::walk() for parameters and return description. */function walk_page_dropdown_tree() {	$args = func_get_args();	if ( empty($args[2]['walker']) ) // the user's options are the third parameter		$walker = new Walker_PageDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array(&$walker, 'walk'), $args);}//// Attachments///** * Display an attachment page link using an image or icon. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size. * @param bool $deprecated Deprecated. Not used. * @param bool $permalink Optional, default is false. Whether to include permalink. */function the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.5' );	if ( $fullsize )		echo wp_get_attachment_link($id, 'full', $permalink);	else		echo wp_get_attachment_link($id, 'thumbnail', $permalink);}/** * Retrieve an attachment page link using an image or icon, if possible. * * @since 2.5.0 * @uses apply_filters() Calls 'wp_get_attachment_link' filter on HTML content with same parameters as function. * * @param int $id Optional. Post ID. * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @param bool $permalink Optional, default is false. Whether to add permalink to image. * @param bool $icon Optional, default is false. Whether to include icon. * @param string $text Optional, default is false. If string, then will be link text. * @return string HTML content. */function wp_get_attachment_link($id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false) {	$id = intval($id);	$_post = & get_post( $id );	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	if ( $text ) {		$link_text = esc_attr($text);	} elseif ( ( is_int($size) && $size != 0 ) or ( is_string($size) && $size != 'none' ) or $size != false ) {		$link_text = wp_get_attachment_image($id, $size, $icon);	} else {		$link_text = '';	}	if( trim($link_text) == '' )		$link_text = $_post->post_title;	return apply_filters( 'wp_get_attachment_link', "<a href='$url' title='$post_title'>$link_text</a>", $id, $size, $permalink, $icon, $text );}/** * Wrap attachment in <<p>> element before content. * * @since 2.0.0 * @uses apply_filters() Calls 'prepend_attachment' hook on HTML content. * * @param string $content * @return string */function prepend_attachment($content) {	global $post;	if ( empty($post->post_type) || $post->post_type != 'attachment' )		return $content;	$p = '<p class="attachment">';	// show the medium sized image representation of the attachment if available, and link to the raw file	$p .= wp_get_attachment_link(0, 'medium', false);	$p .= '</p>';	$p = apply_filters('prepend_attachment', $p);	return "$p\n$content";}//// Misc///** * Retrieve protected post password form content. * * @since 1.0.0 * @uses apply_filters() Calls 'the_password_form' filter on output. * * @return string HTML content for password form for password protected post. */function get_the_password_form() {	global $post;	$label = 'pwbox-'.(empty($post->ID) ? rand() : $post->ID);	$output = '<form action="' . get_option('siteurl') . '/wp-pass.php" method="post">	<p>' . __("This post is password protected. To view it please enter your password below:") . '</p>	<p><label for="' . $label . '">' . __("Password:") . ' <input name="post_password" id="' . $label . '" type="password" size="20" /></label> <input type="submit" name="Submit" value="' . esc_attr__("Submit") . '" /></p>	</form>	';	return apply_filters('the_password_form', $output);}/** * Whether currently in a page template. * * This template tag allows you to determine if you are in a page template. * You can optionally provide a template name and then the check will be * specific to that template. * * @since 2.5.0 * @uses $wp_query * * @param string $template The specific template name if specific matching is required. * @return bool False on failure, true if success. */function is_page_template($template = '') {	if (!is_page()) {		return false;	}	global $wp_query;	$page = $wp_query->get_queried_object();	$custom_fields = get_post_custom_values('_wp_page_template',$page->ID);	$page_template = $custom_fields[0];	// We have no argument passed so just see if a page_template has been specified	if ( empty( $template ) ) {		if (!empty( $page_template ) ) {			return true;		}	} elseif ( $template == $page_template) {		return true;	}	return false;}/** * Retrieve formatted date timestamp of a revision (linked to that revisions's page). * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses date_i18n() * * @param int|object $revision Revision ID or revision object. * @param bool $link Optional, default is true. Link to revisions's page? * @return string i18n formatted datetimestamp or localized 'Current Revision'. */function wp_post_revision_title( $revision, $link = true ) {	if ( !$revision = get_post( $revision ) )		return $revision;	if ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )		return false;	/* translators: revision date format, see http://php.net/date */	$datef = _x( 'j F, Y @ G:i', 'revision date format');	/* translators: 1: date */	$autosavef = __( '%1$s [Autosave]' );	/* translators: 1: date */	$currentf  = __( '%1$s [Current Revision]' );	$date = date_i18n( $datef, strtotime( $revision->post_modified ) );	if ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )		$date = "<a href='$link'>$date</a>";	if ( !wp_is_post_revision( $revision ) )		$date = sprintf( $currentf, $date );	elseif ( wp_is_post_autosave( $revision ) )		$date = sprintf( $autosavef, $date );	return $date;}/** * Display list of a post's revisions. * * Can output either a UL with edit links or a TABLE with diff interface, and * restore action links. * * Second argument controls parameters: *   (bool)   parent : include the parent (the "Current Revision") in the list. *   (string) format : 'list' or 'form-table'.  'list' outputs UL, 'form-table' *                     outputs TABLE with UI. *   (int)    right  : what revision is currently being viewed - used in *                     form-table format. *   (int)    left   : what revision is currently being diffed against right - *                     used in form-table format. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revisions() * @uses wp_post_revision_title() * @uses get_edit_post_link() * @uses get_the_author_meta() * * @todo split into two functions (list, form-table) ? * * @param int|object $post_id Post ID or post object. * @param string|array $args See description {@link wp_parse_args()}. * @return null */function wp_list_post_revisions( $post_id = 0, $args = null ) {	if ( !$post = get_post( $post_id ) )		return;	$defaults = array( 'parent' => false, 'right' => false, 'left' => false, 'format' => 'list', 'type' => 'all' );	extract( wp_parse_args( $args, $defaults ), EXTR_SKIP );	switch ( $type ) {		case 'autosave' :			if ( !$autosave = wp_get_post_autosave( $post->ID ) )				return;			$revisions = array( $autosave );			break;		case 'revision' : // just revisions - remove autosave later		case 'all' :		default :			if ( !$revisions = wp_get_post_revisions( $post->ID ) )				return;			break;	}	/* translators: post revision: 1: when, 2: author name */	$titlef = _x( '%1$s by %2$s', 'post revision' );	if ( $parent )		array_unshift( $revisions, $post );	$rows = '';	$class = false;	$can_edit_post = current_user_can( 'edit_post', $post->ID );	foreach ( $revisions as $revision ) {		if ( !current_user_can( 'read_post', $revision->ID ) )			continue;		if ( 'revision' === $type && wp_is_post_autosave( $revision ) )			continue;		$date = wp_post_revision_title( $revision );		$name = get_the_author_meta( 'display_name', $revision->post_author );		if ( 'form-table' == $format ) {			if ( $left )				$left_checked = $left == $revision->ID ? ' checked="checked"' : '';			else				$left_checked = $right_checked ? ' checked="checked"' : ''; // [sic] (the next one)			$right_checked = $right == $revision->ID ? ' checked="checked"' : '';			$class = $class ? '' : " class='alternate'";			if ( $post->ID != $revision->ID && $can_edit_post )				$actions = '<a href="' . wp_nonce_url( add_query_arg( array( 'revision' => $revision->ID, 'action' => 'restore' ) ), "restore-post_$post->ID|$revision->ID" ) . '">' . __( 'Restore' ) . '</a>';			else				$actions = '';			$rows .= "<tr$class>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='left' value='$revision->ID'$left_checked /></th>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='right' value='$revision->ID'$right_checked /></th>\n";			$rows .= "\t<td>$date</td>\n";			$rows .= "\t<td>$name</td>\n";			$rows .= "\t<td class='action-links'>$actions</td>\n";			$rows .= "</tr>\n";		} else {			$title = sprintf( $titlef, $date, $name );			$rows .= "\t<li>$title</li>\n";		}	}	if ( 'form-table' == $format ) : ?><form action="revision.php" method="get"><div class="tablenav">	<div class="alignleft">		<input type="submit" class="button-secondary" value="<?php esc_attr_e( 'Compare Revisions' ); ?>" />		<input type="hidden" name="action" value="diff" />		<input type="hidden" name="post_type" value="<?php echo esc_attr($post->post_type); ?>" />	</div></div><br class="clear" /><table class="widefat post-revisions" cellspacing="0" id="post-revisions">	<col />	<col />	<col style="width: 33%" />	<col style="width: 33%" />	<col style="width: 33%" /><thead><tr>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Old', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'New', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Date Created', 'revisions column name' ); ?></th>	<th scope="col"><?php _e( 'Author' ); ?></th>	<th scope="col" class="action-links"><?php _e( 'Actions' ); ?></th></tr></thead><tbody><?php echo $rows; ?></tbody></table></form><?php	else :		echo "<ul class='post-revisions'>\n";		echo $rows;		echo "</ul>";	endif;}
<?php/** * Edit tag form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( empty($tag_ID) ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'You did not select an item for editing.' ); ?></strong></p></div><?php	return;}if ( 'category' == $taxonomy )	do_action('edit_category_form_pre', $tag );else	do_action('edit_tag_form_pre', $tag);do_action($taxonomy . '_pre_edit_form', $tag, $taxonomy);  ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo $tax->labels->edit_item; ?></h2><div id="ajax-response"></div><form name="edittag" id="edittag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="editedtag" /><input type="hidden" name="tag_ID" value="<?php echo esc_attr($tag->term_id) ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field('update-tag_' . $tag_ID); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _ex('Name', 'Taxonomy Name'); ?></label></th>			<td><input name="name" id="name" type="text" value="<?php if ( isset( $tag->name ) ) echo esc_attr($tag->name); ?>" size="40" aria-required="true" />			<p class="description"><?php _e('The name is how it appears on your site.'); ?></p></td>		</tr><?php if ( !global_terms_enabled() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php if ( isset( $tag->slug ) ) echo esc_attr(apply_filters('editable_slug', $tag->slug)); ?>" size="40" />			<p class="description"><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></td>		</tr><?php } ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label></th>			<td>				<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'name' => 'parent', 'orderby' => 'name', 'taxonomy' => $taxonomy, 'selected' => $tag->parent, 'exclude' => $tag->term_id, 'hierarchical' => true, 'show_option_none' => __('None'))); ?><br />				<?php if ( 'category' == $taxonomy ) : ?>				<span class="description"><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></span>				<?php endif; ?>			</td>		</tr><?php endif; // is_taxonomy_hierarchical() ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _ex('Description', 'Taxonomy Description'); ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo esc_html($tag->description); ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default, however some themes may show it.'); ?></span></td>		</tr>		<?php		if ( 'category' == $taxonomy )			do_action('edit_category_form_fields', $tag);		else			do_action('edit_tag_form_fields', $tag);		do_action($taxonomy . '_edit_form_fields', $tag, $taxonomy);		?>	</table><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form', $tag);else	do_action('edit_tag_form', $tag);do_action($taxonomy . '_edit_form', $tag, $taxonomy);?><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr( __( 'Update' ) ); ?>" /></p></form></div>
