<?php/** * Date and Time Locale object * * @package WordPress * @subpackage i18n *//** * Class that loads the calendar locale. * * @since 2.1.0 */class WP_Locale {	/**	 * Stores the translated strings for the full weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday;	/**	 * Stores the translated strings for the one character weekday names.	 *	 * There is a hack to make sure that Tuesday and Thursday, as well	 * as Sunday and Saturday don't conflict. See init() method for more.	 *	 * @see WP_Locale::init() for how to handle the hack.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_initial;	/**	 * Stores the translated strings for the abbreviated weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_abbrev;	/**	 * Stores the translated strings for the full month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month;	/**	 * Stores the translated strings for the abbreviated month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month_abbrev;	/**	 * Stores the translated strings for 'am' and 'pm'.	 *	 * Also the capalized versions.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $meridiem;	/**	 * The text direction of the locale language.	 *	 * Default is left to right 'ltr'.	 *	 * @since 2.1.0	 * @var string	 * @access private	 */	var $text_direction = 'ltr';	/**	 * Imports the global version to the class property.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $locale_vars = array('text_direction');	/**	 * Sets up the translated strings and object properties.	 *	 * The method creates the translatable strings for various	 * calendar elements. Which allows for specifying locale	 * specific calendar names and text direction.	 *	 * @since 2.1.0	 * @access private	 */	function init() {		// The Weekdays		$this->weekday[0] = /* translators: weekday */ __('Sunday');		$this->weekday[1] = /* translators: weekday */ __('Monday');		$this->weekday[2] = /* translators: weekday */ __('Tuesday');		$this->weekday[3] = /* translators: weekday */ __('Wednesday');		$this->weekday[4] = /* translators: weekday */ __('Thursday');		$this->weekday[5] = /* translators: weekday */ __('Friday');		$this->weekday[6] = /* translators: weekday */ __('Saturday');		// The first letter of each day.  The _%day%_initial suffix is a hack to make		// sure the day initials are unique.		$this->weekday_initial[__('Sunday')]    = /* translators: one-letter abbreviation of the weekday */ __('S_Sunday_initial');		$this->weekday_initial[__('Monday')]    = /* translators: one-letter abbreviation of the weekday */ __('M_Monday_initial');		$this->weekday_initial[__('Tuesday')]   = /* translators: one-letter abbreviation of the weekday */ __('T_Tuesday_initial');		$this->weekday_initial[__('Wednesday')] = /* translators: one-letter abbreviation of the weekday */ __('W_Wednesday_initial');		$this->weekday_initial[__('Thursday')]  = /* translators: one-letter abbreviation of the weekday */ __('T_Thursday_initial');		$this->weekday_initial[__('Friday')]    = /* translators: one-letter abbreviation of the weekday */ __('F_Friday_initial');		$this->weekday_initial[__('Saturday')]  = /* translators: one-letter abbreviation of the weekday */ __('S_Saturday_initial');		foreach ($this->weekday_initial as $weekday_ => $weekday_initial_) {			$this->weekday_initial[$weekday_] = preg_replace('/_.+_initial$/', '', $weekday_initial_);		}		// Abbreviations for each day.		$this->weekday_abbrev[__('Sunday')]    = /* translators: three-letter abbreviation of the weekday */ __('Sun');		$this->weekday_abbrev[__('Monday')]    = /* translators: three-letter abbreviation of the weekday */ __('Mon');		$this->weekday_abbrev[__('Tuesday')]   = /* translators: three-letter abbreviation of the weekday */ __('Tue');		$this->weekday_abbrev[__('Wednesday')] = /* translators: three-letter abbreviation of the weekday */ __('Wed');		$this->weekday_abbrev[__('Thursday')]  = /* translators: three-letter abbreviation of the weekday */ __('Thu');		$this->weekday_abbrev[__('Friday')]    = /* translators: three-letter abbreviation of the weekday */ __('Fri');		$this->weekday_abbrev[__('Saturday')]  = /* translators: three-letter abbreviation of the weekday */ __('Sat');		// The Months		$this->month['01'] = /* translators: month name */ __('January');		$this->month['02'] = /* translators: month name */ __('February');		$this->month['03'] = /* translators: month name */ __('March');		$this->month['04'] = /* translators: month name */ __('April');		$this->month['05'] = /* translators: month name */ __('May');		$this->month['06'] = /* translators: month name */ __('June');		$this->month['07'] = /* translators: month name */ __('July');		$this->month['08'] = /* translators: month name */ __('August');		$this->month['09'] = /* translators: month name */ __('September');		$this->month['10'] = /* translators: month name */ __('October');		$this->month['11'] = /* translators: month name */ __('November');		$this->month['12'] = /* translators: month name */ __('December');		// Abbreviations for each month. Uses the same hack as above to get around the		// 'May' duplication.		$this->month_abbrev[__('January')] = /* translators: three-letter abbreviation of the month */ __('Jan_January_abbreviation');		$this->month_abbrev[__('February')] = /* translators: three-letter abbreviation of the month */ __('Feb_February_abbreviation');		$this->month_abbrev[__('March')] = /* translators: three-letter abbreviation of the month */ __('Mar_March_abbreviation');		$this->month_abbrev[__('April')] = /* translators: three-letter abbreviation of the month */ __('Apr_April_abbreviation');		$this->month_abbrev[__('May')] = /* translators: three-letter abbreviation of the month */ __('May_May_abbreviation');		$this->month_abbrev[__('June')] = /* translators: three-letter abbreviation of the month */ __('Jun_June_abbreviation');		$this->month_abbrev[__('July')] = /* translators: three-letter abbreviation of the month */ __('Jul_July_abbreviation');		$this->month_abbrev[__('August')] = /* translators: three-letter abbreviation of the month */ __('Aug_August_abbreviation');		$this->month_abbrev[__('September')] = /* translators: three-letter abbreviation of the month */ __('Sep_September_abbreviation');		$this->month_abbrev[__('October')] = /* translators: three-letter abbreviation of the month */ __('Oct_October_abbreviation');		$this->month_abbrev[__('November')] = /* translators: three-letter abbreviation of the month */ __('Nov_November_abbreviation');		$this->month_abbrev[__('December')] = /* translators: three-letter abbreviation of the month */ __('Dec_December_abbreviation');		foreach ($this->month_abbrev as $month_ => $month_abbrev_) {			$this->month_abbrev[$month_] = preg_replace('/_.+_abbreviation$/', '', $month_abbrev_);		}		// The Meridiems		$this->meridiem['am'] = __('am');		$this->meridiem['pm'] = __('pm');		$this->meridiem['AM'] = __('AM');		$this->meridiem['PM'] = __('PM');		// Numbers formatting		// See http://php.net/number_format		/* translators: $thousands_sep argument for http://php.net/number_format, default is , */		$trans = __('number_format_thousands_sep');		$this->number_format['thousands_sep'] = ('number_format_thousands_sep' == $trans) ? ',' : $trans;		/* translators: $dec_point argument for http://php.net/number_format, default is . */		$trans = __('number_format_decimal_point');		$this->number_format['decimal_point'] = ('number_format_decimal_point' == $trans) ? '.' : $trans;		// Import global locale vars set during inclusion of $locale.php.		foreach ( (array) $this->locale_vars as $var ) {			if ( isset($GLOBALS[$var]) )				$this->$var = $GLOBALS[$var];		}	}	/**	 * Retrieve the full translated weekday word.	 *	 * Week starts on translated Sunday and can be fetched	 * by using 0 (zero). So the week starts with 0 (zero)	 * and ends on Saturday with is fetched by using 6 (six).	 *	 * @since 2.1.0	 * @access public	 *	 * @param int $weekday_number 0 for Sunday through 6 Saturday	 * @return string Full translated weekday	 */	function get_weekday($weekday_number) {		return $this->weekday[$weekday_number];	}	/**	 * Retrieve the translated weekday initial.	 *	 * The weekday initial is retrieved by the translated	 * full weekday word. When translating the weekday initial	 * pay attention to make sure that the starting letter does	 * not conflict.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name	 * @return string	 */	function get_weekday_initial($weekday_name) {		return $this->weekday_initial[$weekday_name];	}	/**	 * Retrieve the translated weekday abbreviation.	 *	 * The weekday abbreviation is retrieved by the translated	 * full weekday word.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name Full translated weekday word	 * @return string Translated weekday abbreviation	 */	function get_weekday_abbrev($weekday_name) {		return $this->weekday_abbrev[$weekday_name];	}	/**	 * Retrieve the full translated month by month number.	 *	 * The $month_number parameter has to be a string	 * because it must have the '0' in front of any number	 * that is less than 10. Starts from '01' and ends at	 * '12'.	 *	 * You can use an integer instead and it will add the	 * '0' before the numbers less than 10 for you.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $month_number '01' through '12'	 * @return string Translated full month name	 */	function get_month($month_number) {		return $this->month[zeroise($month_number, 2)];	}	/**	 * Retrieve translated version of month abbreviation string.	 *	 * The $month_name parameter is expected to be the translated or	 * translatable version of the month.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $month_name Translated month to get abbreviated version	 * @return string Translated abbreviated month	 */	function get_month_abbrev($month_name) {		return $this->month_abbrev[$month_name];	}	/**	 * Retrieve translated version of meridiem string.	 *	 * The $meridiem parameter is expected to not be translated.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $meridiem Either 'am', 'pm', 'AM', or 'PM'. Not translated version.	 * @return string Translated version	 */	function get_meridiem($meridiem) {		return $this->meridiem[$meridiem];	}	/**	 * Global variables are deprecated. For backwards compatibility only.	 *	 * @deprecated For backwards compatibility only.	 * @access private	 *	 * @since 2.1.0	 */	function register_globals() {		$GLOBALS['weekday']         = $this->weekday;		$GLOBALS['weekday_initial'] = $this->weekday_initial;		$GLOBALS['weekday_abbrev']  = $this->weekday_abbrev;		$GLOBALS['month']           = $this->month;		$GLOBALS['month_abbrev']    = $this->month_abbrev;	}	/**	 * PHP4 style constructor which calls helper methods to set up object variables	 *	 * @uses WP_Locale::init()	 * @uses WP_Locale::register_globals()	 * @since 2.1.0	 *	 * @return WP_Locale	 */	function WP_Locale() {		$this->init();		$this->register_globals();	}	/**	 * Checks if current locale is RTL.	 *	 * @since 3.0.0	 * @return bool Whether locale is RTL.	 */	 function is_rtl() {	 	return 'rtl' == $this->text_direction;	 }}/** * Checks if current locale is RTL. * * @since 3.0.0 * @return bool Whether locale is RTL. */function is_rtl() {	global $wp_locale;	return $wp_locale->is_rtl();}?>
<?php/** * Handle default dashboard widgets options AJAX. * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once( './admin.php' );/** Load WordPress Administration Dashboard API */require( './includes/dashboard.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );send_nosniff_header();switch ( $_GET['jax'] ) {case 'dashboard_incoming_links' :	wp_dashboard_incoming_links_output();	break;case 'dashboard_primary' :	wp_dashboard_rss_output( 'dashboard_primary' );	break;case 'dashboard_secondary' :	wp_dashboard_secondary_output();	break;case 'dashboard_plugins' :	wp_dashboard_plugins_output();	break;case 'dashboard_quick_press' :	wp_dashboard_quick_press_output();	break;}?>
<?php/** * The Header for our theme. * * Displays all of the <head> section and everything up till <div id="main"> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><!DOCTYPE html><html <?php language_attributes(); ?>><head><meta charset="<?php bloginfo( 'charset' ); ?>" /><title><?php	/*	 * Print the <title> tag based on what is being viewed.	 * We filter the output of wp_title() a bit -- see	 * twentyten_filter_wp_title() in functions.php.	 */	wp_title( '|', true, 'right' );	?></title><link rel="profile" href="http://gmpg.org/xfn/11" /><link rel="stylesheet" type="text/css" media="all" href="<?php bloginfo( 'stylesheet_url' ); ?>" /><link rel="pingback" href="<?php bloginfo( 'pingback_url' ); ?>" /><?php	/* We add some JavaScript to pages with the comment form	 * to support sites with threaded comments (when in use).	 */	if ( is_singular() && get_option( 'thread_comments' ) )		wp_enqueue_script( 'comment-reply' );	/* Always have wp_head() just before the closing </head>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to add elements to <head> such	 * as styles, scripts, and meta tags.	 */	wp_head();?></head><body <?php body_class(); ?>><div id="wrapper" class="hfeed">	<div id="header">		<div id="masthead">			<div id="branding" role="banner">				<?php $heading_tag = ( is_home() || is_front_page() ) ? 'h1' : 'div'; ?>				<<?php echo $heading_tag; ?> id="site-title">					<span>						<a href="<?php echo home_url( '/' ); ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home"><?php bloginfo( 'name' ); ?></a>					</span>				</<?php echo $heading_tag; ?>>				<div id="site-description"><?php bloginfo( 'description' ); ?></div>				<?php					// Check if this is a post or page, if it has a thumbnail, and if it's a big one					if ( is_singular() &&							has_post_thumbnail( $post->ID ) &&							( /* $src, $width, $height */ $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'post-thumbnail' ) ) &&							$image[1] >= HEADER_IMAGE_WIDTH ) :						// Houston, we have a new header image!						echo get_the_post_thumbnail( $post->ID, 'post-thumbnail' );					else : ?>						<img src="<?php header_image(); ?>" width="<?php echo HEADER_IMAGE_WIDTH; ?>" height="<?php echo HEADER_IMAGE_HEIGHT; ?>" alt="" />					<?php endif; ?>			</div><!-- #branding -->			<div id="access" role="navigation">			  <?php /*  Allow screen readers / text browsers to skip the navigation menu and get right to the good stuff */ ?>				<div class="skip-link screen-reader-text"><a href="#content" title="<?php esc_attr_e( 'Skip to content', 'twentyten' ); ?>"><?php _e( 'Skip to content', 'twentyten' ); ?></a></div>				<?php /* Our navigation menu.  If one isn't filled out, wp_nav_menu falls back to wp_page_menu.  The menu assiged to the primary position is the one used.  If none is assigned, the menu with the lowest ID is used.  */ ?>				<?php wp_nav_menu( array( 'container_class' => 'menu-header', 'theme_location' => 'primary' ) ); ?>			</div><!-- #access -->		</div><!-- #masthead -->	</div><!-- #header -->	<div id="main">
<?php/** * RSS 1 RDF Feed Template for displaying RSS 1 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rdf') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rdf:RDF	xmlns="http://purl.org/rss/1.0/"	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:admin="http://webns.net/mvcb/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	<?php do_action('rdf_ns'); ?>><channel rdf:about="<?php bloginfo_rss("url") ?>">	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></dc:date>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>	<?php do_action('rdf_header'); ?>	<items>		<rdf:Seq>		<?php while (have_posts()): the_post(); ?>			<rdf:li rdf:resource="<?php the_permalink_rss() ?>"/>		<?php endwhile; ?>		</rdf:Seq>	</items></channel><?php rewind_posts(); while (have_posts()): the_post(); ?><item rdf:about="<?php the_permalink_rss() ?>">	<title><?php the_title_rss() ?></title>	<link><?php the_permalink_rss() ?></link>	 <dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', $post->post_date_gmt, false); ?></dc:date>	<dc:creator><?php the_author() ?></dc:creator>	<?php the_category_rss('rdf') ?><?php if (get_option('rss_use_excerpt')) : ?>	<description><?php the_excerpt_rss() ?></description><?php else : ?>	<description><?php the_excerpt_rss() ?></description>	<content:encoded><![CDATA[<?php the_content_feed('rdf') ?>]]></content:encoded><?php endif; ?>	<?php do_action('rdf_item'); ?></item><?php endwhile;  ?></rdf:RDF>
<?php/** * The template for displaying all pages. * * This is the template that displays all pages by default. * Please note that this is the wordpress construct of pages * and that other 'pages' on your wordpress site will use a * different template. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<?php if ( is_front_page() ) { ?>						<h2 class="entry-title"><?php the_title(); ?></h2>					<?php } else { ?>							<h1 class="entry-title"><?php the_title(); ?></h1>					<?php } ?>									<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * WordPress Image Editor * * @package WordPress * @subpackage Administration */function wp_image_editor($post_id, $msg = false) {	$nonce = wp_create_nonce("image_editor-$post_id");	$meta = wp_get_attachment_metadata($post_id);	$thumb = image_get_intermediate_size($post_id, 'thumbnail');	$sub_sizes = isset($meta['sizes']) && is_array($meta['sizes']);	$note = '';	if ( is_array($meta) && isset($meta['width']) )		$big = max( $meta['width'], $meta['height'] );	else		die( __('Image data does not exist. Please re-upload the image.') );	$sizer = $big > 400 ? 400 / $big : 1;	$backup_sizes = get_post_meta( $post_id, '_wp_attachment_backup_sizes', true );	$can_restore = !empty($backup_sizes) && isset($backup_sizes['full-orig'])		&& $backup_sizes['full-orig']['file'] != basename($meta['file']);	if ( $msg ) {		if ( isset($msg->error) )			$note = "<div class='error'><p>$msg->error</p></div>";		elseif ( isset($msg->msg) )			$note = "<div class='updated'><p>$msg->msg</p></div>";	}	?>	<div class="imgedit-wrap">	<?php echo $note; ?>	<table id="imgedit-panel-<?php echo $post_id; ?>"><tbody>	<tr><td>	<div class="imgedit-menu">		<div onclick="imageEdit.crop(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-crop disabled" title="<?php esc_attr_e( 'Crop' ); ?>"></div><?php	// On some setups GD library does not provide imagerotate() - Ticket #11536	if ( function_exists('imagerotate') ) { ?>		<div class="imgedit-rleft"  onclick="imageEdit.rotate( 90, <?php echo "$post_id, '$nonce'"; ?>, this)" title="<?php esc_attr_e( 'Rotate counter-clockwise' ); ?>"></div>		<div class="imgedit-rright" onclick="imageEdit.rotate(-90, <?php echo "$post_id, '$nonce'"; ?>, this)" title="<?php esc_attr_e( 'Rotate clockwise' ); ?>"></div><?php } else {		$note_gdlib = esc_attr__('Image rotation is not supported by your web host (function imagerotate() is missing)');?>	    <div class="imgedit-rleft disabled"  title="<?php echo $note_gdlib; ?>"></div>	    <div class="imgedit-rright disabled" title="<?php echo $note_gdlib; ?>"></div><?php } ?>		<div onclick="imageEdit.flip(1, <?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-flipv" title="<?php esc_attr_e( 'Flip vertically' ); ?>"></div>		<div onclick="imageEdit.flip(2, <?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-fliph" title="<?php esc_attr_e( 'Flip horizontally' ); ?>"></div>		<div id="image-undo-<?php echo $post_id; ?>" onclick="imageEdit.undo(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-undo disabled" title="<?php esc_attr_e( 'Undo' ); ?>"></div>		<div id="image-redo-<?php echo $post_id; ?>" onclick="imageEdit.redo(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-redo disabled" title="<?php esc_attr_e( 'Redo' ); ?>"></div>		<br class="clear" />	</div>	<input type="hidden" id="imgedit-sizer-<?php echo $post_id; ?>" value="<?php echo $sizer; ?>" />	<input type="hidden" id="imgedit-minthumb-<?php echo $post_id; ?>" value="<?php echo ( get_option('thumbnail_size_w') . ':' . get_option('thumbnail_size_h') ); ?>" />	<input type="hidden" id="imgedit-history-<?php echo $post_id; ?>" value="" />	<input type="hidden" id="imgedit-undone-<?php echo $post_id; ?>" value="0" />	<input type="hidden" id="imgedit-selection-<?php echo $post_id; ?>" value="" />	<input type="hidden" id="imgedit-x-<?php echo $post_id; ?>" value="<?php echo $meta['width']; ?>" />	<input type="hidden" id="imgedit-y-<?php echo $post_id; ?>" value="<?php echo $meta['height']; ?>" />	<div id="imgedit-crop-<?php echo $post_id; ?>" class="imgedit-crop-wrap">	<img id="image-preview-<?php echo $post_id; ?>" onload="imageEdit.imgLoaded('<?php echo $post_id; ?>')" src="<?php echo admin_url('admin-ajax.php'); ?>?action=imgedit-preview&amp;_ajax_nonce=<?php echo $nonce; ?>&amp;postid=<?php echo $post_id; ?>&amp;rand=<?php echo rand(1, 99999); ?>" />	</div>	<div class="imgedit-submit">		<input type="button" onclick="imageEdit.close(<?php echo $post_id; ?>, 1)" class="button" value="<?php esc_attr_e( 'Cancel' ); ?>" />		<input type="button" onclick="imageEdit.save(<?php echo "$post_id, '$nonce'"; ?>)" disabled="disabled" class="button-primary imgedit-submit-btn" value="<?php esc_attr_e( 'Save' ); ?>" />	</div>	</td>	<td class="imgedit-settings">	<div class="imgedit-group">	<div class="imgedit-group-top">		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><strong><?php _e('Scale Image'); ?></strong></a>		<div class="imgedit-help">		<p><?php _e('You can proportionally scale the original image. For best results the scaling should be done before performing any other operations on it like crop, rotate, etc. Note that if you make the image larger it may become fuzzy.'); ?></p>		<p><?php printf( __('Original dimensions %s'), $meta['width'] . '&times;' . $meta['height'] ); ?></p>		<div class="imgedit-submit">		<span class="nowrap"><input type="text" id="imgedit-scale-width-<?php echo $post_id; ?>" onkeyup="imageEdit.scaleChanged(<?php echo $post_id; ?>, 1)" onblur="imageEdit.scaleChanged(<?php echo $post_id; ?>, 1)" style="width:4em;" value="<?php echo $meta['width']; ?>" />&times;<input type="text" id="imgedit-scale-height-<?php echo $post_id; ?>" onkeyup="imageEdit.scaleChanged(<?php echo $post_id; ?>, 0)" onblur="imageEdit.scaleChanged(<?php echo $post_id; ?>, 0)" style="width:4em;" value="<?php echo $meta['height']; ?>" />		<span class="imgedit-scale-warn" id="imgedit-scale-warn-<?php echo $post_id; ?>">!</span></span>		<input type="button" onclick="imageEdit.action(<?php echo "$post_id, '$nonce'"; ?>, 'scale')" class="button-primary" value="<?php esc_attr_e( 'Scale' ); ?>" />		</div>		</div>	</div><?php if ( $can_restore ) { ?>	<div class="imgedit-group-top">		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><strong><?php _e('Restore Original Image'); ?></strong></a>		<div class="imgedit-help">		<p><?php _e('Discard any changes and restore the original image.');		if ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE )			echo ' '.__('Previously edited copies of the image will not be deleted.');		?></p>		<div class="imgedit-submit">		<input type="button" onclick="imageEdit.action(<?php echo "$post_id, '$nonce'"; ?>, 'restore')" class="button-primary" value="<?php esc_attr_e( 'Restore image' ); ?>" <?php echo $can_restore; ?> />		</div>		</div>	</div><?php } ?>	</div>	<div class="imgedit-group">	<div class="imgedit-group-top">		<strong><?php _e('Image Crop'); ?></strong>		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><?php _e('(help)'); ?></a>		<div class="imgedit-help">		<p><?php _e('The image can be cropped by clicking on it and dragging to select the desired part. While dragging the dimensions of the selection are displayed below.'); ?></p>		<strong><?php _e('Keyboard Shortcuts'); ?></strong>		<ul>		<li><?php _e('Arrow: move by 10px'); ?></li>		<li><?php _e('Shift + arrow: move by 1px'); ?></li>		<li><?php _e('Ctrl + arrow: resize by 10px'); ?></li>		<li><?php _e('Ctrl + Shift + arrow: resize by 1px'); ?></li>		<li><?php _e('Shift + drag: lock aspect ratio'); ?></li>		</ul>		<p><strong><?php _e('Crop Aspect Ratio'); ?></strong><br />		<?php _e('You can specify the crop selection aspect ratio then hold down the Shift key while dragging to lock it. The values can be 1:1 (square), 4:3, 16:9, etc. If there is a selection, specifying aspect ratio will set it immediately.'); ?></p>		<p><strong><?php _e('Crop Selection'); ?></strong><br />		<?php _e('Once started, the selection can be adjusted by entering new values (in pixels). Note that these values are scaled to approximately match the original image dimensions. The minimum selection size equals the thumbnail size as set in the Media settings.'); ?></p>		</div>	</div>	<p>		<?php _e('Aspect ratio:'); ?>		<span  class="nowrap">		<input type="text" id="imgedit-crop-width-<?php echo $post_id; ?>" onkeyup="imageEdit.setRatioSelection(<?php echo $post_id; ?>, 0, this)" style="width:3em;" />		:		<input type="text" id="imgedit-crop-height-<?php echo $post_id; ?>" onkeyup="imageEdit.setRatioSelection(<?php echo $post_id; ?>, 1, this)" style="width:3em;" />		</span>	</p>	<p id="imgedit-crop-sel-<?php echo $post_id; ?>">		<?php _e('Selection:'); ?>		<span  class="nowrap">		<input type="text" id="imgedit-sel-width-<?php echo $post_id; ?>" onkeyup="imageEdit.setNumSelection(<?php echo $post_id; ?>)" style="width:4em;" />		:		<input type="text" id="imgedit-sel-height-<?php echo $post_id; ?>" onkeyup="imageEdit.setNumSelection(<?php echo $post_id; ?>)" style="width:4em;" />		</span>	</p>	</div>	<?php if ( $thumb && $sub_sizes ) {		$thumb_img = wp_constrain_dimensions( $thumb['width'], $thumb['height'], 160, 120 );	?>	<div class="imgedit-group imgedit-applyto">	<div class="imgedit-group-top">		<strong><?php _e('Thumbnail Settings'); ?></strong>		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><?php _e('(help)'); ?></a>		<p class="imgedit-help"><?php _e('The thumbnail image can be cropped differently. For example it can be square or contain only a portion of the original image to showcase it better. Here you can select whether to apply changes to all image sizes or make the thumbnail different.'); ?></p>	</div>	<p>		<img src="<?php echo $thumb['url']; ?>" width="<?php echo $thumb_img[0]; ?>" height="<?php echo $thumb_img[1]; ?>" class="imgedit-size-preview" alt="" /><br /><?php _e('Current thumbnail'); ?>	</p>	<p id="imgedit-save-target-<?php echo $post_id; ?>">		<strong><?php _e('Apply changes to:'); ?></strong><br />		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="all" checked="checked" />		<?php _e('All image sizes'); ?></label>		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="thumbnail" />		<?php _e('Thumbnail'); ?></label>		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="nothumb" />		<?php _e('All sizes except thumbnail'); ?></label>	</p>	</div>	<?php } ?>	</td></tr>	</tbody></table>	<div class="imgedit-wait" id="imgedit-wait-<?php echo $post_id; ?>"></div>	<script type="text/javascript">imageEdit.init(<?php echo $post_id; ?>);</script>	<div class="hidden" id="imgedit-leaving-<?php echo $post_id; ?>"><?php _e("There are unsaved changes that will be lost.  'OK' to continue, 'Cancel' to return to the Image Editor."); ?></div>	</div><?php}function load_image_to_edit($post_id, $mime_type, $size = 'full') {	$filepath = get_attached_file($post_id);	if ( $filepath && file_exists($filepath) ) {		if ( 'full' != $size && ( $data = image_get_intermediate_size($post_id, $size) ) )			$filepath = path_join( dirname($filepath), $data['file'] );	} elseif ( WP_Http_Fopen::test() ) {		$filepath = wp_get_attachment_url($post_id);	}	$filepath = apply_filters('load_image_to_edit_path', $filepath, $post_id, $size);	if ( empty($filepath) )		return false;	switch ( $mime_type ) {		case 'image/jpeg':			$image = imagecreatefromjpeg($filepath);			break;		case 'image/png':			$image = imagecreatefrompng($filepath);			break;		case 'image/gif':			$image = imagecreatefromgif($filepath);			break;		default:			$image = false;			break;	}	if ( is_resource($image) ) {		$image = apply_filters('load_image_to_edit', $image, $post_id, $size);		if ( function_exists('imagealphablending') && function_exists('imagesavealpha') ) {			imagealphablending($image, false);			imagesavealpha($image, true);		}	}	return $image;}function wp_stream_image($image, $mime_type, $post_id) {	$image = apply_filters('image_save_pre', $image, $post_id);	switch ( $mime_type ) {		case 'image/jpeg':			header('Content-Type: image/jpeg');			return imagejpeg($image, null, 90);		case 'image/png':			header('Content-Type: image/png');			return imagepng($image);		case 'image/gif':			header('Content-Type: image/gif');			return imagegif($image);		default:			return false;	}}function wp_save_image_file($filename, $image, $mime_type, $post_id) {	$image = apply_filters('image_save_pre', $image, $post_id);	$saved = apply_filters('wp_save_image_file', null, $filename, $image, $mime_type, $post_id);	if ( null !== $saved )		return $saved;	switch ( $mime_type ) {		case 'image/jpeg':			return imagejpeg( $image, $filename, apply_filters( 'jpeg_quality', 90, 'edit_image' ) );		case 'image/png':			return imagepng($image, $filename);		case 'image/gif':			return imagegif($image, $filename);		default:			return false;	}}function _image_get_preview_ratio($w, $h) {	$max = max($w, $h);	return $max > 400 ? (400 / $max) : 1;}function _rotate_image_resource($img, $angle) {	if ( function_exists('imagerotate') ) {		$rotated = imagerotate($img, $angle, 0);		if ( is_resource($rotated) ) {			imagedestroy($img);			$img = $rotated;		}	}	return $img;}function _flip_image_resource($img, $horz, $vert) {	$w = imagesx($img);	$h = imagesy($img);	$dst = wp_imagecreatetruecolor($w, $h);	if ( is_resource($dst) ) {		$sx = $vert ? ($w - 1) : 0;		$sy = $horz ? ($h - 1) : 0;		$sw = $vert ? -$w : $w;		$sh = $horz ? -$h : $h;		if ( imagecopyresampled($dst, $img, 0, 0, $sx, $sy, $w, $h, $sw, $sh) ) {			imagedestroy($img);			$img = $dst;		}	}	return $img;}function _crop_image_resource($img, $x, $y, $w, $h) {	$dst = wp_imagecreatetruecolor($w, $h);	if ( is_resource($dst) ) {		if ( imagecopy($dst, $img, 0, 0, $x, $y, $w, $h) ) {			imagedestroy($img);			$img = $dst;		}	}	return $img;}function image_edit_apply_changes($img, $changes) {	if ( !is_array($changes) )		return $img;	// expand change operations	foreach ( $changes as $key => $obj ) {		if ( isset($obj->r) ) {			$obj->type = 'rotate';			$obj->angle = $obj->r;			unset($obj->r);		} elseif ( isset($obj->f) ) {			$obj->type = 'flip';			$obj->axis = $obj->f;			unset($obj->f);		} elseif ( isset($obj->c) ) {			$obj->type = 'crop';			$obj->sel = $obj->c;			unset($obj->c);		}		$changes[$key] = $obj;	}	// combine operations	if ( count($changes) > 1 ) {		$filtered = array($changes[0]);		for ( $i = 0, $j = 1; $j < count($changes); $j++ ) {			$combined = false;			if ( $filtered[$i]->type == $changes[$j]->type ) {				switch ( $filtered[$i]->type ) {					case 'rotate':						$filtered[$i]->angle += $changes[$j]->angle;						$combined = true;						break;					case 'flip':						$filtered[$i]->axis ^= $changes[$j]->axis;						$combined = true;						break;				}			}			if ( !$combined )				$filtered[++$i] = $changes[$j];		}		$changes = $filtered;		unset($filtered);	}	// image resource before applying the changes	$img = apply_filters('image_edit_before_change', $img, $changes);	foreach ( $changes as $operation ) {		switch ( $operation->type ) {			case 'rotate':				if ( $operation->angle != 0 )					$img = _rotate_image_resource($img, $operation->angle);				break;			case 'flip':				if ( $operation->axis != 0 )					$img = _flip_image_resource($img, ($operation->axis & 1) != 0, ($operation->axis & 2) != 0);				break;			case 'crop':				$sel = $operation->sel;				$scale = 1 / _image_get_preview_ratio( imagesx($img), imagesy($img) ); // discard preview scaling				$img = _crop_image_resource($img, $sel->x * $scale, $sel->y * $scale, $sel->w * $scale, $sel->h * $scale);				break;		}	}	return $img;}function stream_preview_image($post_id) {	$post = get_post($post_id);	@ini_set('memory_limit', '256M');	$img = load_image_to_edit( $post_id, $post->post_mime_type, array(400, 400) );	if ( !is_resource($img) )		return false;	$changes = !empty($_REQUEST['history']) ? json_decode( stripslashes($_REQUEST['history']) ) : null;	if ( $changes )		$img = image_edit_apply_changes($img, $changes);	// scale the image	$w = imagesx($img);	$h = imagesy($img);	$ratio = _image_get_preview_ratio($w, $h);	$w2 = $w * $ratio;	$h2 = $h * $ratio;	$preview = wp_imagecreatetruecolor($w2, $h2);	imagecopyresampled( $preview, $img, 0, 0, 0, 0, $w2, $h2, $w, $h );	wp_stream_image($preview, $post->post_mime_type, $post_id);	imagedestroy($preview);	imagedestroy($img);	return true;}function wp_restore_image($post_id) {	$meta = wp_get_attachment_metadata($post_id);	$file = get_attached_file($post_id);	$backup_sizes = get_post_meta( $post_id, '_wp_attachment_backup_sizes', true );	$restored = false;	$msg = '';	if ( !is_array($backup_sizes) ) {		$msg->error = __('Cannot load image metadata.');		return $msg;	}	$parts = pathinfo($file);	$suffix = time() . rand(100, 999);	$default_sizes = apply_filters( 'intermediate_image_sizes', array('large', 'medium', 'thumbnail') );	if ( isset($backup_sizes['full-orig']) && is_array($backup_sizes['full-orig']) ) {		$data = $backup_sizes['full-orig'];		if ( $parts['basename'] != $data['file'] ) {			if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE ) {				// delete only if it's edited image				if ( preg_match('/-e[0-9]{13}\./', $parts['basename']) ) {					$delpath = apply_filters('wp_delete_file', $file);					@unlink($delpath);				}			} else {				$backup_sizes["full-$suffix"] = array('width' => $meta['width'], 'height' => $meta['height'], 'file' => $parts['basename']);			}		}		$restored_file = path_join($parts['dirname'], $data['file']);		$restored = update_attached_file($post_id, $restored_file);		$meta['file'] = _wp_relative_upload_path( $restored_file );		$meta['width'] = $data['width'];		$meta['height'] = $data['height'];		list ( $uwidth, $uheight ) = wp_constrain_dimensions($meta['width'], $meta['height'], 128, 96);		$meta['hwstring_small'] = "height='$uheight' width='$uwidth'";	}	foreach ( $default_sizes as $default_size ) {		if ( isset($backup_sizes["$default_size-orig"]) ) {			$data = $backup_sizes["$default_size-orig"];			if ( isset($meta['sizes'][$default_size]) && $meta['sizes'][$default_size]['file'] != $data['file'] ) {				if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE ) {					// delete only if it's edited image					if ( preg_match('/-e[0-9]{13}-/', $meta['sizes'][$default_size]['file']) ) {						$delpath = apply_filters( 'wp_delete_file', path_join($parts['dirname'], $meta['sizes'][$default_size]['file']) );						@unlink($delpath);					}				} else {					$backup_sizes["$default_size-{$suffix}"] = $meta['sizes'][$default_size];				}			}			$meta['sizes'][$default_size] = $data;		} else {			unset($meta['sizes'][$default_size]);		}	}	if ( !wp_update_attachment_metadata($post_id, $meta) || !update_post_meta( $post_id, '_wp_attachment_backup_sizes', $backup_sizes) ) {		$msg->error = __('Cannot save image metadata.');		return $msg;	}	if ( !$restored )		$msg->error = __('Image metadata is inconsistent.');	else		$msg->msg = __('Image restored successfully.');	return $msg;}function wp_save_image($post_id) {	$return = '';	$success = $delete = $scaled = $nocrop = false;	$post = get_post($post_id);	@ini_set('memory_limit', '256M');	$img = load_image_to_edit($post_id, $post->post_mime_type);	if ( !is_resource($img) ) {		$return->error = esc_js( __('Unable to create new image.') );		return $return;	}	$fwidth = !empty($_REQUEST['fwidth']) ? intval($_REQUEST['fwidth']) : 0;	$fheight = !empty($_REQUEST['fheight']) ? intval($_REQUEST['fheight']) : 0;	$target = !empty($_REQUEST['target']) ? preg_replace('/[^a-z0-9_-]+/i', '', $_REQUEST['target']) : '';	$scale = !empty($_REQUEST['do']) && 'scale' == $_REQUEST['do'];	if ( $scale && $fwidth > 0 && $fheight > 0 ) {		$sX = imagesx($img);		$sY = imagesy($img);		// check if it has roughly the same w / h ratio		$diff = round($sX / $sY, 2) - round($fwidth / $fheight, 2);		if ( -0.1 < $diff && $diff < 0.1 ) {			// scale the full size image			$dst = wp_imagecreatetruecolor($fwidth, $fheight);			if ( imagecopyresampled( $dst, $img, 0, 0, 0, 0, $fwidth, $fheight, $sX, $sY ) ) {				imagedestroy($img);				$img = $dst;				$scaled = true;			}		}		if ( !$scaled ) {			$return->error = esc_js( __('Error while saving the scaled image. Please reload the page and try again.') );			return $return;		}	} elseif ( !empty($_REQUEST['history']) ) {		$changes = json_decode( stripslashes($_REQUEST['history']) );		if ( $changes )			$img = image_edit_apply_changes($img, $changes);	} else {		$return->error = esc_js( __('Nothing to save, the image has not changed.') );		return $return;	}	$meta = wp_get_attachment_metadata($post_id);	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	if ( !is_array($meta) ) {		$return->error = esc_js( __('Image data does not exist. Please re-upload the image.') );		return $return;	}	if ( !is_array($backup_sizes) )		$backup_sizes = array();	// generate new filename	$path = get_attached_file($post_id);	$path_parts = pathinfo52( $path );	$filename = $path_parts['filename'];	$suffix = time() . rand(100, 999);	if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE &&		isset($backup_sizes['full-orig']) && $backup_sizes['full-orig']['file'] != $path_parts['basename'] ) {		if ( 'thumbnail' == $target )			$new_path = "{$path_parts['dirname']}/{$filename}-temp.{$path_parts['extension']}";		else			$new_path = $path;	} else {		while( true ) {			$filename = preg_replace( '/-e([0-9]+)$/', '', $filename );			$filename .= "-e{$suffix}";			$new_filename = "{$filename}.{$path_parts['extension']}";			$new_path = "{$path_parts['dirname']}/$new_filename";			if ( file_exists($new_path) )				$suffix++;			else				break;		}	}	// save the full-size file, also needed to create sub-sizes	if ( !wp_save_image_file($new_path, $img, $post->post_mime_type, $post_id) ) {		$return->error = esc_js( __('Unable to save the image.') );		return $return;	}	if ( 'nothumb' == $target || 'all' == $target || 'full' == $target || $scaled ) {		$tag = false;		if ( isset($backup_sizes['full-orig']) ) {			if ( ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE ) && $backup_sizes['full-orig']['file'] != $path_parts['basename'] )				$tag = "full-$suffix";		} else {			$tag = 'full-orig';		}		if ( $tag )			$backup_sizes[$tag] = array('width' => $meta['width'], 'height' => $meta['height'], 'file' => $path_parts['basename']);		$success = update_attached_file($post_id, $new_path);		$meta['file'] = _wp_relative_upload_path($new_path);		$meta['width'] = imagesx($img);		$meta['height'] = imagesy($img);		list ( $uwidth, $uheight ) = wp_constrain_dimensions($meta['width'], $meta['height'], 128, 96);		$meta['hwstring_small'] = "height='$uheight' width='$uwidth'";		if ( $success && ('nothumb' == $target || 'all' == $target) ) {			$sizes = apply_filters( 'intermediate_image_sizes', array('large', 'medium', 'thumbnail') );			if ( 'nothumb' == $target )				$sizes = array_diff( $sizes, array('thumbnail') );		}		$return->fw = $meta['width'];		$return->fh = $meta['height'];	} elseif ( 'thumbnail' == $target ) {		$sizes = array( 'thumbnail' );		$success = $delete = $nocrop = true;	}	if ( isset($sizes) ) {		foreach ( $sizes as $size ) {			$tag = false;			if ( isset($meta['sizes'][$size]) ) {				if ( isset($backup_sizes["$size-orig"]) ) {					if ( ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE ) && $backup_sizes["$size-orig"]['file'] != $meta['sizes'][$size]['file'] )						$tag = "$size-$suffix";				} else {					$tag = "$size-orig";				}				if ( $tag )					$backup_sizes[$tag] = $meta['sizes'][$size];			}			$crop = $nocrop ? false : get_option("{$size}_crop");			$resized = image_make_intermediate_size($new_path, get_option("{$size}_size_w"), get_option("{$size}_size_h"), $crop );			if ( $resized )				$meta['sizes'][$size] = $resized;			else				unset($meta['sizes'][$size]);		}	}	if ( $success ) {		wp_update_attachment_metadata($post_id, $meta);		update_post_meta( $post_id, '_wp_attachment_backup_sizes', $backup_sizes);		if ( $target == 'thumbnail' || $target == 'all' || $target == 'full' ) {			$file_url = wp_get_attachment_url($post_id);			if ( $thumb = $meta['sizes']['thumbnail'] )				$return->thumbnail = path_join( dirname($file_url), $thumb['file'] );			else				$return->thumbnail = "$file_url?w=128&h=128";		}	} else {		$delete = true;	}	if ( $delete ) {		$delpath = apply_filters('wp_delete_file', $new_path);		@unlink($delpath);	}	imagedestroy($img);	$return->msg = esc_js( __('Image saved') );	return $return;}
<?php// Silence is golden.?>
<?php/** * Sets up the default filters and actions for Multisite. * * If you need to remove a default hook, this file will give you the priority * for which to use to remove the hook. * * Not all of the Multisite default hooks are found in ms-default-filters.php * * @package WordPress * @subpackage Multisite * @see default-filters.php * @since 3.0.0 */// Usersadd_filter( 'wpmu_validate_user_signup', 'signup_nonce_check' );add_action( 'init', 'maybe_add_existing_user_to_blog' );add_action( 'wpmu_new_user', 'newuser_notify_siteadmin' );add_action( 'wpmu_activate_user', 'add_new_user_to_blog', 10, 3 );add_action( 'sanitize_user', 'strtolower' );// Blogsadd_filter( 'wpmu_validate_blog_signup', 'signup_nonce_check' );add_action( 'wpmu_new_blog', 'wpmu_log_new_registrations', 10, 2 );add_action( 'wpmu_new_blog', 'newblog_notify_siteadmin', 10, 2 );// Register Nonceadd_action( 'signup_hidden_fields', 'signup_nonce_fields' );// Templateadd_action( 'template_redirect', 'maybe_redirect_404' );add_filter( 'allowed_redirect_hosts', 'redirect_this_site' );// Administrationadd_filter( 'term_id_filter', 'global_terms', 10, 2 );add_action( 'publish_post', 'update_posts_count' );add_action( 'delete_post', 'wpmu_update_blogs_date' );add_action( 'private_to_published', 'wpmu_update_blogs_date' );add_action( 'publish_phone', 'wpmu_update_blogs_date' );add_action( 'publish_post', 'wpmu_update_blogs_date' );// Filesadd_filter( 'wp_upload_bits', 'upload_is_file_too_big' );add_filter( 'import_upload_size_limit', 'fix_import_form_size' );add_filter( 'upload_mimes', 'check_upload_mimes' );add_filter( 'upload_size_limit', 'upload_size_limit_filter' );// Mailadd_filter( 'wp_mail_from', 'wordpressmu_wp_mail_from' );add_action( 'phpmailer_init', 'fix_phpmailer_messageid' );// Disable somethings by default for multisiteadd_filter( 'enable_update_services_configuration', '__return_false' );if ( ! defined('POST_BY_EMAIL') || ! POST_BY_EMAIL ) // back compat constant.	add_filter( 'enable_post_by_email_configuration', '__return_false' );if ( ! defined('EDIT_ANY_USER') || ! EDIT_ANY_USER ) // back compat constant.	add_filter( 'enable_edit_any_user_configuration', '__return_false' );// WP_HOME and WP_SITEURL should not have any effect in MSremove_filter( 'option_siteurl', '_config_wp_siteurl' );remove_filter( 'option_home',    '_config_wp_home'    );?>
<?php/** * Redirects to the RSS feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss_url' ), 301 );?>
<?php/** * Simple and uniform HTTP request API. * * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * WordPress HTTP Class for managing HTTP Transports and making HTTP requests. * * This class is called for the functionality of making HTTP requests and replaces Snoopy * functionality. There is no available functionality to add HTTP transport implementations, since * most of the HTTP transports are added and available for use. * * There are no properties, because none are needed and for performance reasons. Some of the * functions are static and while they do have some overhead over functions in PHP4, the purpose is * maintainability. When PHP5 is finally the requirement, it will be easy to add the static keyword * to the code. It is not as easy to convert a function to a method after enough code uses the old * way. * * Debugging includes several actions, which pass different variables for debugging the HTTP API. * * <strong>http_transport_get_debug</strong> - gives working, nonblocking, and blocking transports. * * <strong>http_transport_post_debug</strong> - gives working, nonblocking, and blocking transports. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http {	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor	 *	 * @since 2.7.0	 * @return WP_Http	 */	function WP_Http() {		$this->__construct();	}	/**	 * PHP5 style Constructor - Set up available transport if not available.	 *	 * PHP4 does not have the 'self' keyword and since WordPress supports PHP4, the class needs to	 * be used for the static call. The transport are set up to save time and will only be created	 * once. This class can be created many times without having to go through the step of finding	 * which transports are available.	 *	 * @since 2.7.0	 * @return WP_Http	 */	function __construct() {		WP_Http::_getTransport();		WP_Http::_postTransport();	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches that object to be	 * used later.	 *	 * The order for the GET/HEAD requests are HTTP Extension, cURL, Streams, Fopen, and finally	 * Fsockopen. fsockopen() is used last, because it has the most overhead in its implementation.	 * There isn't any real way around it, since redirects have to be supported, much the same way	 * the other transports also handle redirects.	 *	 * There are currently issues with "localhost" not resolving correctly with DNS. This may cause	 * an error "failed to open stream: A connection attempt failed because the connected party did	 * not properly respond after a period of time, or established connection failed because [the]	 * connected host has failed to respond."	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_getTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fopen::test($args) ) {				$working_transport['fopen'] = new WP_Http_Fopen();				$blocking_transport[] = &$working_transport['fopen'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fopen', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_get_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches	 * that object to be used later. This is for posting content to a URL and	 * is used when there is a body. The plain Fopen Transport can not be used	 * to send content, but the streams transport can. This is a limitation that	 * is addressed here, by just not including that transport.	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_postTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_post_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Send a HTTP request to a URI.	 *	 * The body and headers are part of the arguments. The 'body' argument is for the body and will	 * accept either a string or an array. The 'headers' argument should be an array, but a string	 * is acceptable. If the 'body' argument is an array, then it will automatically be escaped	 * using http_build_query().	 *	 * The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS	 * protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send	 * headers. Other protocols are unsupported and most likely will fail.	 *	 * The defaults are 'method', 'timeout', 'redirection', 'httpversion', 'blocking' and	 * 'user-agent'.	 *	 * Accepted 'method' values are 'GET', 'POST', and 'HEAD', some transports technically allow	 * others, but should not be assumed. The 'timeout' is used to sent how long the connection	 * should stay open before failing when no response. 'redirection' is used to track how many	 * redirects were taken and used to sent the amount for other transports, but not all transports	 * accept setting that value.	 *	 * The 'httpversion' option is used to sent the HTTP version and accepted values are '1.0', and	 * '1.1' and should be a string. Version 1.1 is not supported, because of chunk response. The	 * 'user-agent' option is the user-agent and is used to replace the default user-agent, which is	 * 'WordPress/WP_Version', where WP_Version is the value from $wp_version.	 *	 * 'blocking' is the default, which is used to tell the transport, whether it should halt PHP	 * while it performs the request or continue regardless. Actually, that isn't entirely correct.	 * Blocking mode really just means whether the fread should just pull what it can whenever it	 * gets bytes or if it should wait until it has enough in the buffer to read or finishes reading	 * the entire content. It doesn't actually always mean that PHP will continue going after making	 * the request.	 *	 * @access public	 * @since 2.7.0	 * @todo Refactor this code. The code in this method extends the scope of its original purpose	 *		and should be refactored to allow for cleaner abstraction and reduce duplication of the	 *		code. One suggestion is to create a class specifically for the arguments, however	 *		preliminary refactoring to this affect has affect more than just the scope of the	 *		arguments. Something to ponder at least.	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array containing 'headers', 'body', 'response', 'cookies'	 */	function request( $url, $args = array() ) {		global $wp_version;		$defaults = array(			'method' => 'GET',			'timeout' => apply_filters( 'http_request_timeout', 5),			'redirection' => apply_filters( 'http_request_redirection_count', 5),			'httpversion' => apply_filters( 'http_request_version', '1.0'),			'user-agent' => apply_filters( 'http_headers_useragent', 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )  ),			'blocking' => true,			'headers' => array(),			'cookies' => array(),			'body' => null,			'compress' => false,			'decompress' => true,			'sslverify' => true		);		$r = wp_parse_args( $args, $defaults );		$r = apply_filters( 'http_request_args', $r, $url );		// Allow plugins to short-circuit the request		$pre = apply_filters( 'pre_http_request', false, $r, $url );		if ( false !== $pre )			return $pre;		$arrURL = parse_url($url);		if ( empty( $url ) || empty($url['scheme'] ) )			return new WP_Error('http_request_failed', __('A valid URL was not provided.'));		if ( $this->block_request( $url ) )			return new WP_Error('http_request_failed', __('User has blocked requests through HTTP.'));		// Determine if this is a https call and pass that on to the transport functions		// so that we can blacklist the transports that do not support ssl verification		$r['ssl'] = $arrURL['scheme'] == 'https' || $arrURL['scheme'] == 'ssl';		// Determine if this request is to OUR install of WordPress		$homeURL = parse_url( get_bloginfo('url') );		$r['local'] = $homeURL['host'] == $arrURL['host'] || 'localhost' == $arrURL['host'];		unset($homeURL);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( ! is_array($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		}		if ( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		if ( WP_Http_Encoding::is_available() )			$r['headers']['Accept-Encoding'] = WP_Http_Encoding::accept_encoding();		if ( empty($r['body']) ) {			// Some servers fail when sending content without the content-length header being set.			// Also, to fix another bug, we only send when doing POST and PUT and the content-length			// header isn't already set.			if( ($r['method'] == 'POST' || $r['method'] == 'PUT') && ! isset($r['headers']['Content-Length']) )				$r['headers']['Content-Length'] = 0;			// The method is ambiguous, because we aren't talking about HTTP methods, the "get" in			// this case is simply that we aren't sending any bodies and to get the transports that			// don't support sending bodies along with those which do.			$transports = WP_Http::_getTransport($r);		} else {			if ( is_array( $r['body'] ) || is_object( $r['body'] ) ) {				if ( ! version_compare(phpversion(), '5.1.2', '>=') )					$r['body'] = _http_build_query($r['body'], null, '&');				else					$r['body'] = http_build_query($r['body'], null, '&');				$r['headers']['Content-Type'] = 'application/x-www-form-urlencoded; charset=' . get_option('blog_charset');				$r['headers']['Content-Length'] = strlen($r['body']);			}			if ( ! isset( $r['headers']['Content-Length'] ) && ! isset( $r['headers']['content-length'] ) )				$r['headers']['Content-Length'] = strlen($r['body']);			// The method is ambiguous, because we aren't talking about HTTP methods, the "post" in			// this case is simply that we are sending HTTP body and to get the transports that do			// support sending the body. Not all do, depending on the limitations of the PHP core			// limitations.			$transports = WP_Http::_postTransport($r);		}		do_action( 'http_api_debug', $transports, 'transports_list' );		$response = array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		foreach ( (array) $transports as $transport ) {			$response = $transport->request($url, $r);			do_action( 'http_api_debug', $response, 'response', get_class($transport) );			if ( ! is_wp_error($response) )				return apply_filters( 'http_response', $response, $r, $url );		}		return $response;	}	/**	 * Uses the POST HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function post($url, $args = array()) {		$defaults = array('method' => 'POST');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the GET HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function get($url, $args = array()) {		$defaults = array('method' => 'GET');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the HEAD HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function head($url, $args = array()) {		$defaults = array('method' => 'HEAD');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Parses the responses and splits the parts into headers and body.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string $strResponse The full response string	 * @return array Array with 'headers' and 'body' keys.	 */	function processResponse($strResponse) {		$res = explode("\r\n\r\n", $strResponse, 2);		return array('headers' => isset($res[0]) ? $res[0] : array(), 'body' => isset($res[1]) ? $res[1] : '');	}	/**	 * Transform header string into an array.	 *	 * If an array is given then it is assumed to be raw header data with numeric keys with the	 * headers as the values. No headers must be passed that were already processed.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string|array $headers	 * @return array Processed string headers. If duplicate headers are encountered,	 * 					Then a numbered array is returned as the value of that header-key.	 */	function processHeaders($headers) {		// split headers, one per array element		if ( is_string($headers) ) {			// tolerate line terminator: CRLF = LF (RFC 2616 19.3)			$headers = str_replace("\r\n", "\n", $headers);			// unfold folded header fields. LWS = [CRLF] 1*( SP | HT ) <US-ASCII SP, space (32)>, <US-ASCII HT, horizontal-tab (9)> (RFC 2616 2.2)			$headers = preg_replace('/\n[ \t]/', ' ', $headers);			// create the headers array			$headers = explode("\n", $headers);		}		$response = array('code' => 0, 'message' => '');		// If a redirection has taken place, The headers for each page request may have been passed.		// In this case, determine the final HTTP header and parse from there.		for ( $i = count($headers)-1; $i >= 0; $i-- ) {			if ( !empty($headers[$i]) && false === strpos($headers[$i], ':') ) {				$headers = array_splice($headers, $i);				break;			}		}		$cookies = array();		$newheaders = array();		foreach ( $headers as $tempheader ) {			if ( empty($tempheader) )				continue;			if ( false === strpos($tempheader, ':') ) {				list( , $response['code'], $response['message']) = explode(' ', $tempheader, 3);				continue;			}			list($key, $value) = explode(':', $tempheader, 2);			if ( !empty( $value ) ) {				$key = strtolower( $key );				if ( isset( $newheaders[$key] ) ) {					if ( !is_array($newheaders[$key]) )						$newheaders[$key] = array($newheaders[$key]);					$newheaders[$key][] = trim( $value );				} else {					$newheaders[$key] = trim( $value );				}				if ( 'set-cookie' == strtolower( $key ) )					$cookies[] = new WP_Http_Cookie( $value );			}		}		return array('response' => $response, 'headers' => $newheaders, 'cookies' => $cookies);	}	/**	 * Takes the arguments for a ::request() and checks for the cookie array.	 *	 * If it's found, then it's assumed to contain WP_Http_Cookie objects, which are each parsed	 * into strings and added to the Cookie: header (within the arguments array). Edits the array by	 * reference.	 *	 * @access public	 * @version 2.8.0	 * @static	 *	 * @param array $r Full array of args passed into ::request()	 */	function buildCookieHeader( &$r ) {		if ( ! empty($r['cookies']) ) {			$cookies_header = '';			foreach ( (array) $r['cookies'] as $cookie ) {				$cookies_header .= $cookie->getHeaderValue() . '; ';			}			$cookies_header = substr( $cookies_header, 0, -2 );			$r['headers']['cookie'] = $cookies_header;		}	}	/**	 * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.	 *	 * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support	 * returning footer headers. Shouldn't be too difficult to support it though.	 *	 * @todo Add support for footer chunked headers.	 * @access public	 * @since 2.7.0	 * @static	 *	 * @param string $body Body content	 * @return string Chunked decoded body on success or raw body on failure.	 */	function chunkTransferDecode($body) {		$body = str_replace(array("\r\n", "\r"), "\n", $body);		// The body is not chunked encoding or is malformed.		if ( ! preg_match( '/^[0-9a-f]+(\s|\n)+/mi', trim($body) ) )			return $body;		$parsedBody = '';		//$parsedHeaders = array(); Unsupported		while ( true ) {			$hasChunk = (bool) preg_match( '/^([0-9a-f]+)(\s|\n)+/mi', $body, $match );			if ( $hasChunk ) {				if ( empty( $match[1] ) )					return $body;				$length = hexdec( $match[1] );				$chunkLength = strlen( $match[0] );				$strBody = substr($body, $chunkLength, $length);				$parsedBody .= $strBody;				$body = ltrim(str_replace(array($match[0], $strBody), '', $body), "\n");				if ( "0" == trim($body) )					return $parsedBody; // Ignore footer headers.			} else {				return $body;			}		}	}	/**	 * Block requests through the proxy.	 *	 * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will	 * prevent plugins from working and core functionality, if you don't include api.wordpress.org.	 *	 * You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php	 * file and this will only allow localhost and your blog to make requests. The constant	 * WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the	 * WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow.	 *	 * @since 2.8.0	 * @link http://core.trac.wordpress.org/ticket/8927 Allow preventing external requests.	 *	 * @param string $uri URI of url.	 * @return bool True to block, false to allow.	 */	function block_request($uri) {		// We don't need to block requests, because nothing is blocked.		if ( ! defined( 'WP_HTTP_BLOCK_EXTERNAL' ) || ! WP_HTTP_BLOCK_EXTERNAL )			return false;		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		/* Malformed URL, can not process, but this could mean ssl, so let through anyway.		 *		 * This isn't very security sound. There are instances where a hacker might attempt		 * to bypass the proxy and this check. However, the reason for this behavior is that		 * WordPress does not do any checking currently for non-proxy requests, so it is keeps with		 * the default unsecure nature of the HTTP request.		 */		if ( $check === false )			return false;		$home = parse_url( get_option('siteurl') );		// Don't block requests back to ourselves by default		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return apply_filters('block_local_requests', false);		if ( !defined('WP_ACCESSIBLE_HOSTS') )			return true;		static $accessible_hosts;		if ( null == $accessible_hosts )			$accessible_hosts = preg_split('|,\s*|', WP_ACCESSIBLE_HOSTS);		return !in_array( $check['host'], $accessible_hosts ); //Inverse logic, If its in the array, then we can't access it.	}}/** * HTTP request method uses fsockopen function to retrieve the url. * * This would be the preferred method, but the fsockopen implementation has the most overhead of all * the HTTP transport implementations. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fsockopen {	/**	 * Send a HTTP request to a URI using fsockopen().	 *	 * Does not support non-blocking mode.	 *	 * @see WP_Http::request For default options descriptions.	 *	 * @since 2.7	 * @access public	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$iError = null; // Store error number		$strError = null; // Store error string		$arrURL = parse_url($url);		$fsockopen_host = $arrURL['host'];		$secure_transport = false;		if ( ! isset( $arrURL['port'] ) ) {			if ( ( $arrURL['scheme'] == 'ssl' || $arrURL['scheme'] == 'https' ) && extension_loaded('openssl') ) {				$fsockopen_host = "ssl://$fsockopen_host";				$arrURL['port'] = 443;				$secure_transport = true;			} else {				$arrURL['port'] = 80;			}		}		//fsockopen has issues with 'localhost' with IPv6 with certain versions of PHP, It attempts to connect to ::1,		// which fails when the server is not set up for it. For compatibility, always connect to the IPv4 address.		if ( 'localhost' == strtolower($fsockopen_host) )			$fsockopen_host = '127.0.0.1';		// There are issues with the HTTPS and SSL protocols that cause errors that can be safely		// ignored and should be ignored.		if ( true === $secure_transport )			$error_reporting = error_reporting(0);		$startDelay = time();		$proxy = new WP_HTTP_Proxy();		if ( !WP_DEBUG ) {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = @fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = @fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		} else {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		}		$endDelay = time();		// If the delay is greater than the timeout then fsockopen should't be used, because it will		// cause a long delay.		$elapseDelay = ($endDelay-$startDelay) > $r['timeout'];		if ( true === $elapseDelay )			add_option( 'disable_fsockopen', $endDelay, null, true );		if ( false === $handle )			return new WP_Error('http_request_failed', $iError . ': ' . $strError);		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) //Some proxies require full URL in this field.			$requestPath = $url;		else			$requestPath = $arrURL['path'] . ( isset($arrURL['query']) ? '?' . $arrURL['query'] : '' );		if ( empty($requestPath) )			$requestPath .= '/';		$strHeaders = strtoupper($r['method']) . ' ' . $requestPath . ' HTTP/' . $r['httpversion'] . "\r\n";		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )			$strHeaders .= 'Host: ' . $arrURL['host'] . ':' . $arrURL['port'] . "\r\n";		else			$strHeaders .= 'Host: ' . $arrURL['host'] . "\r\n";		if ( isset($r['user-agent']) )			$strHeaders .= 'User-agent: ' . $r['user-agent'] . "\r\n";		if ( is_array($r['headers']) ) {			foreach ( (array) $r['headers'] as $header => $headerValue )				$strHeaders .= $header . ': ' . $headerValue . "\r\n";		} else {			$strHeaders .= $r['headers'];		}		if ( $proxy->use_authentication() )			$strHeaders .= $proxy->authentication_header() . "\r\n";		$strHeaders .= "\r\n";		if ( ! is_null($r['body']) )			$strHeaders .= $r['body'];		fwrite($handle, $strHeaders);		if ( ! $r['blocking'] ) {			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		fclose($handle);		if ( true === $secure_transport )			error_reporting($error_reporting);		$process = WP_Http::processResponse($strResponse);		$arrHeaders = WP_Http::processHeaders($process['headers']);		// Is the response code within the 400 range?		if ( (int) $arrHeaders['response']['code'] >= 400 && (int) $arrHeaders['response']['code'] < 500 )			return new WP_Error('http_request_failed', $arrHeaders['response']['code'] . ': ' . $arrHeaders['response']['message']);		// If location is found, then assume redirect and redirect to location.		if ( 'HEAD' != $r['method'] && isset($arrHeaders['headers']['location']) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($arrHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		// If the body was chunk encoded, then decode it.		if ( ! empty( $process['body'] ) && isset( $arrHeaders['headers']['transfer-encoding'] ) && 'chunked' == $arrHeaders['headers']['transfer-encoding'] )			$process['body'] = WP_Http::chunkTransferDecode($process['body']);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($arrHeaders['headers']) )			$process['body'] = WP_Http_Encoding::decompress( $process['body'] );		return array('headers' => $arrHeaders['headers'], 'body' => $process['body'], 'response' => $arrHeaders['response'], 'cookies' => $arrHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test( $args = array() ) {		if ( false !== ($option = get_option( 'disable_fsockopen' )) && time()-$option < 43200 ) // 12 hours			return false;		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( ! $is_ssl && function_exists( 'fsockopen' ) )			$use = true;		elseif ( $is_ssl && extension_loaded('openssl') && function_exists( 'fsockopen' ) )			$use = true;		else			$use = false;		return apply_filters('use_fsockopen_transport', $use, $args);	}}/** * HTTP request method uses fopen function to retrieve the url. * * Requires PHP version greater than 4.3.0 for stream support. Does not allow for $context support, * but should still be okay, to write the headers, before getting the response. Also requires that * 'allow_url_fopen' to be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fopen {	/**	 * Send a HTTP request to a URI using fopen().	 *	 * This transport does not support sending of headers and body, therefore should not be used in	 * the instances, where there is a body and headers.	 *	 * Notes: Does not support non-blocking mode. Ignores 'redirection' option.	 *	 * @see WP_Http::retrieve For default options descriptions.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = str_replace($arrURL['scheme'], 'http', $url);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( is_string($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		$initial_user_agent = ini_get('user_agent');		if ( !empty($r['headers']) && is_array($r['headers']) ) {			$user_agent_extra_headers = '';			foreach ( $r['headers'] as $header => $value )				$user_agent_extra_headers .= "\r\n$header: $value";			@ini_set('user_agent', $r['user-agent'] . $user_agent_extra_headers);		} else {			@ini_set('user_agent', $r['user-agent']);		}		if ( !WP_DEBUG )			$handle = @fopen($url, 'r');		else			$handle = fopen($url, 'r');		if (! $handle)			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			fclose($handle);			@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		if ( function_exists('stream_get_meta_data') ) {			$meta = stream_get_meta_data($handle);			$theHeaders = $meta['wrapper_data'];			if ( isset( $meta['wrapper_data']['headers'] ) )				$theHeaders = $meta['wrapper_data']['headers'];		} else {			//$http_response_header is a PHP reserved variable which is set in the current-scope when using the HTTP Wrapper			//see http://php.oregonstate.edu/manual/en/reserved.variables.httpresponseheader.php			$theHeaders = $http_response_header;		}		fclose($handle);		@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added		$processedHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( isset($args['method']) && 'HEAD' == $args['method'] ) //This transport cannot make a HEAD request			return false;		$use = true;		//PHP does not verify SSL certs, We can only make a request via this transports if SSL Verification is turned off.		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl ) {			$is_local = isset($args['local']) && $args['local'];			$ssl_verify = isset($args['sslverify']) && $args['sslverify'];			if ( $is_local && true != apply_filters('https_local_ssl_verify', true) )				$use = true;			elseif ( !$is_local && true != apply_filters('https_ssl_verify', true) )				$use = true;			elseif ( !$ssl_verify )				$use = true;			else				$use = false;		}		return apply_filters('use_fopen_transport', $use, $args);	}}/** * HTTP request method uses Streams to retrieve the url. * * Requires PHP 5.0+ and uses fopen with stream context. Requires that 'allow_url_fopen' PHP setting * to be enabled. * * Second preferred method for getting the URL, for PHP 5. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Streams {	/**	 * Send a HTTP request to a URI using streams with fopen().	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		// Convert Header array to string.		$strHeaders = '';		if ( is_array( $r['headers'] ) )			foreach ( $r['headers'] as $name => $value )				$strHeaders .= "{$name}: $value\r\n";		else if ( is_string( $r['headers'] ) )			$strHeaders = $r['headers'];		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$arrContext = array('http' =>			array(				'method' => strtoupper($r['method']),				'user_agent' => $r['user-agent'],				'max_redirects' => $r['redirection'] + 1, // See #11557				'protocol_version' => (float) $r['httpversion'],				'header' => $strHeaders,				'ignore_errors' => true, // Return non-200 requests.				'timeout' => $r['timeout'],				'ssl' => array(						'verify_peer' => $ssl_verify,						'verify_host' => $ssl_verify				)			)		);		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$arrContext['http']['proxy'] = 'tcp://' . $proxy->host() . ':' . $proxy->port();			$arrContext['http']['request_fulluri'] = true;			// We only support Basic authentication so this will only work if that is what your proxy supports.			if ( $proxy->use_authentication() )				$arrContext['http']['header'] .= $proxy->authentication_header() . "\r\n";		}		if ( 'HEAD' == $r['method'] ) // Disable redirects for HEAD requests			$arrContext['http']['max_redirects'] = 1;		if ( ! empty($r['body'] ) )			$arrContext['http']['content'] = $r['body'];		$context = stream_context_create($arrContext);		if ( !WP_DEBUG )			$handle = @fopen($url, 'r', false, $context);		else			$handle = fopen($url, 'r', false, $context);		if ( ! $handle )			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			stream_set_blocking($handle, 0);			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = stream_get_contents($handle);		$meta = stream_get_meta_data($handle);		fclose($handle);		$processedHeaders = array();		if ( isset( $meta['wrapper_data']['headers'] ) )			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']['headers']);		else			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @access public	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( version_compare(PHP_VERSION, '5.0', '<') )			return false;		//HTTPS via Proxy was added in 5.1.0		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl && version_compare(PHP_VERSION, '5.1.0', '<') ) {			$proxy = new WP_HTTP_Proxy();			/**			 * No URL check, as its not currently passed to the ::test() function			 * In the case where a Proxy is in use, Just bypass this transport for HTTPS.			 */			if ( $proxy->is_enabled() )				return false;		}		return apply_filters('use_streams_transport', true, $args);	}}/** * HTTP request method uses HTTP extension to retrieve the url. * * Requires the HTTP extension to be installed. This would be the preferred transport since it can * handle a lot of the problems that forces the others to use the HTTP version 1.0. Even if PHP 5.2+ * is being used, it doesn't mean that the HTTP extension will be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_ExtHTTP {	/**	 * Send a HTTP request to a URI using HTTP extension.	 *	 * Does not support non-blocking.	 *	 * @access public	 * @since 2.7	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		switch ( $r['method'] ) {			case 'POST':				$r['method'] = HTTP_METH_POST;				break;			case 'HEAD':				$r['method'] = HTTP_METH_HEAD;				break;			case 'PUT':				$r['method'] =  HTTP_METH_PUT;				break;			case 'GET':			default:				$r['method'] = HTTP_METH_GET;		}		$arrURL = parse_url($url);		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$r['timeout'] = (int) ceil( $r['timeout'] );		$options = array(			'timeout' => $r['timeout'],			'connecttimeout' => $r['timeout'],			'redirect' => $r['redirection'],			'useragent' => $r['user-agent'],			'headers' => $r['headers'],			'ssl' => array(				'verifypeer' => $ssl_verify,				'verifyhost' => $ssl_verify			)		);		if ( HTTP_METH_HEAD == $r['method'] )			$options['redirect'] = 0; // Assumption: Docs seem to suggest that this means do not follow. Untested.		// The HTTP extensions offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$options['proxyhost'] = $proxy->host();			$options['proxyport'] = $proxy->port();			$options['proxytype'] = HTTP_PROXY_HTTP;			if ( $proxy->use_authentication() ) {				$options['proxyauth'] = $proxy->authentication();				$options['proxyauthtype'] = HTTP_AUTH_ANY;			}		}		if ( !WP_DEBUG ) //Emits warning level notices for max redirects and timeouts			$strResponse = @http_request($r['method'], $url, $r['body'], $options, $info);		else			$strResponse = http_request($r['method'], $url, $r['body'], $options, $info); //Emits warning level notices for max redirects and timeouts		// Error may still be set, Response may return headers or partial document, and error		// contains a reason the request was aborted, eg, timeout expired or max-redirects reached.		if ( false === $strResponse || ! empty($info['error']) )			return new WP_Error('http_request_failed', $info['response_code'] . ': ' . $info['error']);		if ( ! $r['blocking'] )			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		$headers_body = WP_HTTP::processResponse($strResponse);		$theHeaders = $headers_body['headers'];		$theBody = $headers_body['body'];		unset($headers_body);		$theHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $theBody ) && isset( $theHeaders['headers']['transfer-encoding'] ) && 'chunked' == $theHeaders['headers']['transfer-encoding'] ) {			if ( !WP_DEBUG )				$theBody = @http_chunked_decode($theBody);			else				$theBody = http_chunked_decode($theBody);		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = http_inflate( $theBody );		$theResponse = array();		$theResponse['code'] = $info['response_code'];		$theResponse['message'] = get_status_header_desc($info['response_code']);		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $theResponse, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		return apply_filters('use_http_extension_transport', function_exists('http_request'), $args );	}}/** * HTTP request method uses Curl extension to retrieve the url. * * Requires the Curl extension to be installed. * * @package WordPress * @subpackage HTTP * @since 2.7 */class WP_Http_Curl {	/**	 * Send a HTTP request to a URI using cURL extension.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set.		WP_Http::buildCookieHeader( $r );		$handle = curl_init();		// cURL offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$isPHP5 = version_compare(PHP_VERSION, '5.0.0', '>=');			if ( $isPHP5 ) {				curl_setopt( $handle, CURLOPT_PROXYTYPE, CURLPROXY_HTTP );				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() );				curl_setopt( $handle, CURLOPT_PROXYPORT, $proxy->port() );			} else {				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() .':'. $proxy->port() );			}			if ( $proxy->use_authentication() ) {				if ( $isPHP5 )					curl_setopt( $handle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );				curl_setopt( $handle, CURLOPT_PROXYUSERPWD, $proxy->authentication() );			}		}		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		// CURLOPT_TIMEOUT and CURLOPT_CONNECTTIMEOUT expect integers.  Have to use ceil since		// a value of 0 will allow an ulimited timeout.		$timeout = (int) ceil( $r['timeout'] );		curl_setopt( $handle, CURLOPT_CONNECTTIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_TIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_URL, $url);		curl_setopt( $handle, CURLOPT_RETURNTRANSFER, true );		curl_setopt( $handle, CURLOPT_SSL_VERIFYHOST, $ssl_verify );		curl_setopt( $handle, CURLOPT_SSL_VERIFYPEER, $ssl_verify );		curl_setopt( $handle, CURLOPT_USERAGENT, $r['user-agent'] );		curl_setopt( $handle, CURLOPT_MAXREDIRS, $r['redirection'] );		switch ( $r['method'] ) {			case 'HEAD':				curl_setopt( $handle, CURLOPT_NOBODY, true );				break;			case 'POST':				curl_setopt( $handle, CURLOPT_POST, true );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;			case 'PUT':				curl_setopt( $handle, CURLOPT_CUSTOMREQUEST, 'PUT' );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;		}		if ( true === $r['blocking'] )			curl_setopt( $handle, CURLOPT_HEADER, true );		else			curl_setopt( $handle, CURLOPT_HEADER, false );		// The option doesn't work with safe mode or when open_basedir is set.		// Disable HEAD when making HEAD requests.		if ( !ini_get('safe_mode') && !ini_get('open_basedir') && 'HEAD' != $r['method'] )			curl_setopt( $handle, CURLOPT_FOLLOWLOCATION, true );		if ( !empty( $r['headers'] ) ) {			// cURL expects full header strings in each element			$headers = array();			foreach ( $r['headers'] as $name => $value ) {				$headers[] = "{$name}: $value";			}			curl_setopt( $handle, CURLOPT_HTTPHEADER, $headers );		}		if ( $r['httpversion'] == '1.0' )			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0 );		else			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1 );		// Cookies are not handled by the HTTP API currently. Allow for plugin authors to handle it		// themselves... Although, it is somewhat pointless without some reference.		do_action_ref_array( 'http_api_curl', array(&$handle) );		// We don't need to return the body, so don't. Just execute request and return.		if ( ! $r['blocking'] ) {			curl_exec( $handle );			curl_close( $handle );			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$theResponse = curl_exec( $handle );		if ( !empty($theResponse) ) {			$headerLength = curl_getinfo($handle, CURLINFO_HEADER_SIZE);			$theHeaders = trim( substr($theResponse, 0, $headerLength) );			if ( strlen($theResponse) > $headerLength )				$theBody = substr( $theResponse, $headerLength );			else				$theBody = '';			if ( false !== strrpos($theHeaders, "\r\n\r\n") ) {				$headerParts = explode("\r\n\r\n", $theHeaders);				$theHeaders = $headerParts[ count($headerParts) -1 ];			}			$theHeaders = WP_Http::processHeaders($theHeaders);		} else {			if ( $curl_error = curl_error($handle) )				return new WP_Error('http_request_failed', $curl_error);			if ( in_array( curl_getinfo( $handle, CURLINFO_HTTP_CODE ), array(301, 302) ) )				return new WP_Error('http_request_failed', __('Too many redirects.'));			$theHeaders = array( 'headers' => array(), 'cookies' => array() );			$theBody = '';		}		$response = array();		$response['code'] = curl_getinfo( $handle, CURLINFO_HTTP_CODE );		$response['message'] = get_status_header_desc($response['code']);		curl_close( $handle );		// See #11305 - When running under safe mode, redirection is disabled above. Handle it manually.		if ( !empty($theHeaders['headers']['location']) && (ini_get('safe_mode') || ini_get('open_basedir')) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($theHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = WP_Http_Encoding::decompress( $theBody );		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $response, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( function_exists('curl_init') && function_exists('curl_exec') )			return apply_filters('use_curl_transport', true, $args);		return false;	}}/** * Adds Proxy support to the WordPress HTTP API. * * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to * enable proxy support. There are also a few filters that plugins can hook into for some of the * constants. * * Please note that only BASIC authentication is supported by most transports. * cURL and the PHP HTTP Extension MAY support more methods (such as NTLM authentication) depending on your environment. * * The constants are as follows: * <ol> * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li> * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li> * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li> * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li> * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy. * You do not need to have localhost and the blog host in this list, because they will not be passed * through the proxy. The list should be presented in a comma separated list</li> * </ol> * * An example can be as seen below. * <code> * define('WP_PROXY_HOST', '192.168.84.101'); * define('WP_PROXY_PORT', '8080'); * define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com'); * </code> * * @link http://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress. * @since 2.8 */class WP_HTTP_Proxy {	/**	 * Whether proxy connection should be used.	 *	 * @since 2.8	 * @use WP_PROXY_HOST	 * @use WP_PROXY_PORT	 *	 * @return bool	 */	function is_enabled() {		return defined('WP_PROXY_HOST') && defined('WP_PROXY_PORT');	}	/**	 * Whether authentication should be used.	 *	 * @since 2.8	 * @use WP_PROXY_USERNAME	 * @use WP_PROXY_PASSWORD	 *	 * @return bool	 */	function use_authentication() {		return defined('WP_PROXY_USERNAME') && defined('WP_PROXY_PASSWORD');	}	/**	 * Retrieve the host for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function host() {		if ( defined('WP_PROXY_HOST') )			return WP_PROXY_HOST;		return '';	}	/**	 * Retrieve the port for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function port() {		if ( defined('WP_PROXY_PORT') )			return WP_PROXY_PORT;		return '';	}	/**	 * Retrieve the username for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function username() {		if ( defined('WP_PROXY_USERNAME') )			return WP_PROXY_USERNAME;		return '';	}	/**	 * Retrieve the password for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function password() {		if ( defined('WP_PROXY_PASSWORD') )			return WP_PROXY_PASSWORD;		return '';	}	/**	 * Retrieve authentication string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication() {		return $this->username() . ':' . $this->password();	}	/**	 * Retrieve header string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication_header() {		return 'Proxy-Authorization: Basic ' . base64_encode( $this->authentication() );	}	/**	 * Whether URL should be sent through the proxy server.	 *	 * We want to keep localhost and the blog URL from being sent through the proxy server, because	 * some proxies can not handle this. We also have the constant available for defining other	 * hosts that won't be sent through the proxy.	 *	 * @uses WP_PROXY_BYPASS_HOSTS	 * @since unknown	 *	 * @param string $uri URI to check.	 * @return bool True, to send through the proxy and false if, the proxy should not be used.	 */	function send_through_proxy( $uri ) {		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		// Malformed URL, can not process, but this could mean ssl, so let through anyway.		if ( $check === false )			return true;		$home = parse_url( get_option('siteurl') );		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return false;		if ( !defined('WP_PROXY_BYPASS_HOSTS') )			return true;		static $bypass_hosts;		if ( null == $bypass_hosts )			$bypass_hosts = preg_split('|,\s*|', WP_PROXY_BYPASS_HOSTS);		return !in_array( $check['host'], $bypass_hosts );	}}/** * Internal representation of a single cookie. * * Returned cookies are represented using this class, and when cookies are set, if they are not * already a WP_Http_Cookie() object, then they are turned into one. * * @todo The WordPress convention is to use underscores instead of camelCase for function and method * names. Need to switch to use underscores instead for the methods. * * @package WordPress * @subpackage HTTP * @since 2.8.0 */class WP_Http_Cookie {	/**	 * Cookie name.	 *	 * @since 2.8.0	 * @var string	 */	var $name;	/**	 * Cookie value.	 *	 * @since 2.8.0	 * @var string	 */	var $value;	/**	 * When the cookie expires.	 *	 * @since 2.8.0	 * @var string	 */	var $expires;	/**	 * Cookie URL path.	 *	 * @since 2.8.0	 * @var string	 */	var $path;	/**	 * Cookie Domain.	 *	 * @since 2.8.0	 * @var string	 */	var $domain;	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor.	 *	 * @access public	 * @since 2.8.0	 * @param string|array $data Raw cookie data.	 */	function WP_Http_Cookie( $data ) {		$this->__construct( $data );	}	/**	 * Sets up this cookie object.	 *	 * The parameter $data should be either an associative array containing the indices names below	 * or a header string detailing it.	 *	 * If it's an array, it should include the following elements:	 * <ol>	 * <li>Name</li>	 * <li>Value - should NOT be urlencoded already.</li>	 * <li>Expires - (optional) String or int (UNIX timestamp).</li>	 * <li>Path (optional)</li>	 * <li>Domain (optional)</li>	 * </ol>	 *	 * @access public	 * @since 2.8.0	 *	 * @param string|array $data Raw cookie data.	 */	function __construct( $data ) {		if ( is_string( $data ) ) {			// Assume it's a header string direct from a previous request			$pairs = explode( ';', $data );			// Special handling for first pair; name=value. Also be careful of "=" in value			$name  = trim( substr( $pairs[0], 0, strpos( $pairs[0], '=' ) ) );			$value = substr( $pairs[0], strpos( $pairs[0], '=' ) + 1 );			$this->name  = $name;			$this->value = urldecode( $value );			array_shift( $pairs ); //Removes name=value from items.			// Set everything else as a property			foreach ( $pairs as $pair ) {				$pair = rtrim($pair);				if ( empty($pair) ) //Handles the cookie ending in ; which results in a empty final pair					continue;				list( $key, $val ) = strpos( $pair, '=' ) ? explode( '=', $pair ) : array( $pair, '' );				$key = strtolower( trim( $key ) );				if ( 'expires' == $key )					$val = strtotime( $val );				$this->$key = $val;			}		} else {			if ( !isset( $data['name'] ) )				return false;			// Set properties based directly on parameters			$this->name   = $data['name'];			$this->value  = isset( $data['value'] ) ? $data['value'] : '';			$this->path   = isset( $data['path'] ) ? $data['path'] : '';			$this->domain = isset( $data['domain'] ) ? $data['domain'] : '';			if ( isset( $data['expires'] ) )				$this->expires = is_int( $data['expires'] ) ? $data['expires'] : strtotime( $data['expires'] );			else				$this->expires = null;		}	}	/**	 * Confirms that it's OK to send this cookie to the URL checked against.	 *	 * Decision is based on RFC 2109/2965, so look there for details on validity.	 *	 * @access public	 * @since 2.8.0	 *	 * @param string $url URL you intend to send this cookie to	 * @return boolean TRUE if allowed, FALSE otherwise.	 */	function test( $url ) {		// Expires - if expired then nothing else matters		if ( time() > $this->expires )			return false;		// Get details on the URL we're thinking about sending to		$url = parse_url( $url );		$url['port'] = isset( $url['port'] ) ? $url['port'] : 80;		$url['path'] = isset( $url['path'] ) ? $url['path'] : '/';		// Values to use for comparison against the URL		$path   = isset( $this->path )   ? $this->path   : '/';		$port   = isset( $this->port )   ? $this->port   : 80;		$domain = isset( $this->domain ) ? strtolower( $this->domain ) : strtolower( $url['host'] );		if ( false === stripos( $domain, '.' ) )			$domain .= '.local';		// Host - very basic check that the request URL ends with the domain restriction (minus leading dot)		$domain = substr( $domain, 0, 1 ) == '.' ? substr( $domain, 1 ) : $domain;		if ( substr( $url['host'], -strlen( $domain ) ) != $domain )			return false;		// Port - supports "port-lists" in the format: "80,8000,8080"		if ( !in_array( $url['port'], explode( ',', $port) ) )			return false;		// Path - request path must start with path restriction		if ( substr( $url['path'], 0, strlen( $path ) ) != $path )			return false;		return true;	}	/**	 * Convert cookie name and value back to header string.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string Header encoded cookie name and value.	 */	function getHeaderValue() {		if ( empty( $this->name ) || empty( $this->value ) )			return '';		return $this->name . '=' . urlencode( $this->value );	}	/**	 * Retrieve cookie header for usage in the rest of the WordPress HTTP API.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string	 */	function getFullHeader() {		return 'Cookie: ' . $this->getHeaderValue();	}}/** * Implementation for deflate and gzip transfer encodings. * * Includes RFC 1950, RFC 1951, and RFC 1952. * * @since 2.8 * @package WordPress * @subpackage HTTP */class WP_Http_Encoding {	/**	 * Compress raw string using the deflate format.	 *	 * Supports the RFC 1951 standard.	 *	 * @since 2.8	 *	 * @param string $raw String to compress.	 * @param int $level Optional, default is 9. Compression level, 9 is highest.	 * @param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.	 * @return string|bool False on failure.	 */	function compress( $raw, $level = 9, $supports = null ) {		return gzdeflate( $raw, $level );	}	/**	 * Decompression of deflated string.	 *	 * Will attempt to decompress using the RFC 1950 standard, and if that fails	 * then the RFC 1951 standard deflate will be attempted. Finally, the RFC	 * 1952 standard gzip decode will be attempted. If all fail, then the	 * original compressed string will be returned.	 *	 * @since 2.8	 *	 * @param string $compressed String to decompress.	 * @param int $length The optional length of the compressed data.	 * @return string|bool False on failure.	 */	function decompress( $compressed, $length = null ) {		if ( empty($compressed) )			return $compressed;		if ( false !== ( $decompressed = @gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = WP_Http_Encoding::compatible_gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = @gzuncompress( $compressed ) ) )			return $decompressed;		if ( function_exists('gzdecode') ) {			$decompressed = @gzdecode( $compressed );			if ( false !== $decompressed )				return $decompressed;		}		return $compressed;	}	/**	 * Decompression of deflated string while staying compatible with the majority of servers.	 *	 * Certain Servers will return deflated data with headers which PHP's gziniflate()	 * function cannot handle out of the box. The following function lifted from	 * http://au2.php.net/manual/en/function.gzinflate.php#77336 will attempt to deflate	 * the various return forms used.	 *	 * @since 2.8.1	 * @link http://au2.php.net/manual/en/function.gzinflate.php#77336	 *	 * @param string $gzData String to decompress.	 * @return string|bool False on failure.	 */	function compatible_gzinflate($gzData) {		if ( substr($gzData, 0, 3) == "\x1f\x8b\x08" ) {			$i = 10;			$flg = ord( substr($gzData, 3, 1) );			if ( $flg > 0 ) {				if ( $flg & 4 ) {					list($xlen) = unpack('v', substr($gzData, $i, 2) );					$i = $i + 2 + $xlen;				}				if ( $flg & 8 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 16 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 2 )					$i = $i + 2;			}			return gzinflate( substr($gzData, $i, -8) );		} else {			return false;		}	}	/**	 * What encoding types to accept and their priority values.	 *	 * @since 2.8	 *	 * @return string Types of encoding to accept.	 */	function accept_encoding() {		$type = array();		if ( function_exists( 'gzinflate' ) )			$type[] = 'deflate;q=1.0';		if ( function_exists( 'gzuncompress' ) )			$type[] = 'compress;q=0.5';		if ( function_exists( 'gzdecode' ) )			$type[] = 'gzip;q=0.5';		return implode(', ', $type);	}	/**	 * What enconding the content used when it was compressed to send in the headers.	 *	 * @since 2.8	 *	 * @return string Content-Encoding string to send in the header.	 */	function content_encoding() {		return 'deflate';	}	/**	 * Whether the content be decoded based on the headers.	 *	 * @since 2.8	 *	 * @param array|string $headers All of the available headers.	 * @return bool	 */	function should_decode($headers) {		if ( is_array( $headers ) ) {			if ( array_key_exists('content-encoding', $headers) && ! empty( $headers['content-encoding'] ) )				return true;		} else if ( is_string( $headers ) ) {			return ( stripos($headers, 'content-encoding:') !== false );		}		return false;	}	/**	 * Whether decompression and compression are supported by the PHP version.	 *	 * Each function is tested instead of checking for the zlib extension, to	 * ensure that the functions all exist in the PHP version and aren't	 * disabled.	 *	 * @since 2.8	 *	 * @return bool	 */	function is_available() {		return ( function_exists('gzuncompress') || function_exists('gzdeflate') || function_exists('gzinflate') );	}}
<?php/** * File contains all the administration image manipulation functions. * * @package WordPress * @subpackage Administration *//** * Create a thumbnail from an Image given a maximum side size. * * This function can handle most image file formats which PHP supports. If PHP * does not have the functionality to save in a file of the same format, the * thumbnail will be created as a jpeg. * * @since 1.2.0 * * @param mixed $file Filename of the original image, Or attachment id. * @param int $max_side Maximum length of a single side for the thumbnail. * @param mixed $deprecated Never used. * @return string Thumbnail path on success, Error string on failure. */function wp_create_thumbnail( $file, $max_side, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.2' );	$thumbpath = image_resize( $file, $max_side, $max_side );	return apply_filters( 'wp_create_thumbnail', $thumbpath );}/** * Crop an Image to a given size. * * @since 2.1.0 * * @param string|int $src_file The source file or Attachment ID. * @param int $src_x The start x position to crop from. * @param int $src_y The start y position to crop from. * @param int $src_w The width to crop. * @param int $src_h The height to crop. * @param int $dst_w The destination width. * @param int $dst_h The destination height. * @param int $src_abs Optional. If the source crop points are absolute. * @param string $dst_file Optional. The destination file to write to. * @return string|WP_Error|false New filepath on success, WP_Error or false on failure. */function wp_crop_image( $src_file, $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs = false, $dst_file = false ) {	if ( is_numeric( $src_file ) ) // Handle int as attachment ID		$src_file = get_attached_file( $src_file );	$src = wp_load_image( $src_file );	if ( !is_resource( $src ) )		return new WP_Error( 'error_loading_image', $src, $src_file );	$dst = wp_imagecreatetruecolor( $dst_w, $dst_h );	if ( $src_abs ) {		$src_w -= $src_x;		$src_h -= $src_y;	}	if (function_exists('imageantialias'))		imageantialias( $dst, true );	imagecopyresampled( $dst, $src, 0, 0, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h );	imagedestroy( $src ); // Free up memory	if ( ! $dst_file )		$dst_file = str_replace( basename( $src_file ), 'cropped-' . basename( $src_file ), $src_file );	$dst_file = preg_replace( '/\\.[^\\.]+$/', '.jpg', $dst_file );	if ( imagejpeg( $dst, $dst_file, apply_filters( 'jpeg_quality', 90, 'wp_crop_image' ) ) )		return $dst_file;	else		return false;}/** * Generate post thumbnail attachment meta data. * * @since 2.1.0 * * @param int $attachment_id Attachment Id to process. * @param string $file Filepath of the Attached image. * @return mixed Metadata for attachment. */function wp_generate_attachment_metadata( $attachment_id, $file ) {	$attachment = get_post( $attachment_id );	$metadata = array();	if ( preg_match('!^image/!', get_post_mime_type( $attachment )) && file_is_displayable_image($file) ) {		$imagesize = getimagesize( $file );		$metadata['width'] = $imagesize[0];		$metadata['height'] = $imagesize[1];		list($uwidth, $uheight) = wp_constrain_dimensions($metadata['width'], $metadata['height'], 128, 96);		$metadata['hwstring_small'] = "height='$uheight' width='$uwidth'";		// Make the file path relative to the upload dir		$metadata['file'] = _wp_relative_upload_path($file);		// make thumbnails and other intermediate sizes		global $_wp_additional_image_sizes;		foreach ( get_intermediate_image_sizes() as $s ) {			$sizes[$s] = array( 'width' => '', 'height' => '', 'crop' => FALSE );			if ( isset( $_wp_additional_image_sizes[$s]['width'] ) )				$sizes[$s]['width'] = intval( $_wp_additional_image_sizes[$s]['width'] ); // For theme-added sizes			else				$sizes[$s]['width'] = get_option( "{$s}_size_w" ); // For default sizes set in options			if ( isset( $_wp_additional_image_sizes[$s]['height'] ) )				$sizes[$s]['height'] = intval( $_wp_additional_image_sizes[$s]['height'] ); // For theme-added sizes			else				$sizes[$s]['height'] = get_option( "{$s}_size_h" ); // For default sizes set in options			if ( isset( $_wp_additional_image_sizes[$s]['crop'] ) )				$sizes[$s]['crop'] = intval( $_wp_additional_image_sizes[$s]['crop'] ); // For theme-added sizes			else				$sizes[$s]['crop'] = get_option( "{$s}_crop" ); // For default sizes set in options		}		$sizes = apply_filters( 'intermediate_image_sizes_advanced', $sizes );		foreach ($sizes as $size => $size_data ) {			$resized = image_make_intermediate_size( $file, $size_data['width'], $size_data['height'], $size_data['crop'] );			if ( $resized )				$metadata['sizes'][$size] = $resized;		}		// fetch additional metadata from exif/iptc		$image_meta = wp_read_image_metadata( $file );		if ( $image_meta )			$metadata['image_meta'] = $image_meta;	}	return apply_filters( 'wp_generate_attachment_metadata', $metadata, $attachment_id );}/** * Calculated the new dimentions for a downsampled image. * * @since 2.0.0 * @see wp_constrain_dimensions() * * @param int $width Current width of the image * @param int $height Current height of the image * @return mixed Array(height,width) of shrunk dimensions. */function get_udims( $width, $height) {	return wp_constrain_dimensions( $width, $height, 128, 96 );}/** * Convert a fraction string to a decimal. * * @since 2.5.0 * * @param string $str * @return int|float */function wp_exif_frac2dec($str) {	@list( $n, $d ) = explode( '/', $str );	if ( !empty($d) )		return $n / $d;	return $str;}/** * Convert the exif date format to a unix timestamp. * * @since 2.5.0 * * @param string $str * @return int */function wp_exif_date2ts($str) {	@list( $date, $time ) = explode( ' ', trim($str) );	@list( $y, $m, $d ) = explode( ':', $date );	return strtotime( "{$y}-{$m}-{$d} {$time}" );}/** * Get extended image metadata, exif or iptc as available. * * Retrieves the EXIF metadata aperture, credit, camera, caption, copyright, iso * created_timestamp, focal_length, shutter_speed, and title. * * The IPTC metadata that is retrieved is APP13, credit, byline, created date * and time, caption, copyright, and title. Also includes FNumber, Model, * DateTimeDigitized, FocalLength, ISOSpeedRatings, and ExposureTime. * * @todo Try other exif libraries if available. * @since 2.5.0 * * @param string $file * @return bool|array False on failure. Image metadata array on success. */function wp_read_image_metadata( $file ) {	if ( ! file_exists( $file ) )		return false;	list( , , $sourceImageType ) = getimagesize( $file );	// exif contains a bunch of data we'll probably never need formatted in ways	// that are difficult to use. We'll normalize it and just extract the fields	// that are likely to be useful.  Fractions and numbers are converted to	// floats, dates to unix timestamps, and everything else to strings.	$meta = array(		'aperture' => 0,		'credit' => '',		'camera' => '',		'caption' => '',		'created_timestamp' => 0,		'copyright' => '',		'focal_length' => 0,		'iso' => 0,		'shutter_speed' => 0,		'title' => '',	);	// read iptc first, since it might contain data not available in exif such	// as caption, description etc	if ( is_callable( 'iptcparse' ) ) {		getimagesize( $file, $info );		if ( ! empty( $info['APP13'] ) ) {			$iptc = iptcparse( $info['APP13'] );			// headline, "A brief synopsis of the caption."			if ( ! empty( $iptc['2#105'][0] ) )				$meta['title'] = utf8_encode( trim( $iptc['2#105'][0] ) );			// title, "Many use the Title field to store the filename of the image, though the field may be used in many ways."			elseif ( ! empty( $iptc['2#005'][0] ) )				$meta['title'] = utf8_encode( trim( $iptc['2#005'][0] ) );			if ( ! empty( $iptc['2#120'][0] ) ) { // description / legacy caption				$caption = utf8_encode( trim( $iptc['2#120'][0] ) );				if ( empty( $meta['title'] ) ) {					// Assume the title is stored in 2:120 if it's short.					if ( strlen( $caption ) < 80 )						$meta['title'] = $caption;					else						$meta['caption'] = $caption;				} elseif ( $caption != $meta['title'] ) {					$meta['caption'] = $caption;				}			}			if ( ! empty( $iptc['2#110'][0] ) ) // credit				$meta['credit'] = utf8_encode(trim($iptc['2#110'][0]));			elseif ( ! empty( $iptc['2#080'][0] ) ) // creator / legacy byline				$meta['credit'] = utf8_encode(trim($iptc['2#080'][0]));			if ( ! empty( $iptc['2#055'][0] ) and ! empty( $iptc['2#060'][0] ) ) // created date and time				$meta['created_timestamp'] = strtotime( $iptc['2#055'][0] . ' ' . $iptc['2#060'][0] );			if ( ! empty( $iptc['2#116'][0] ) ) // copyright				$meta['copyright'] = utf8_encode( trim( $iptc['2#116'][0] ) );		 }	}	// fetch additional info from exif if available	if ( is_callable( 'exif_read_data' ) && in_array( $sourceImageType, apply_filters( 'wp_read_image_metadata_types', array( IMAGETYPE_JPEG, IMAGETYPE_TIFF_II, IMAGETYPE_TIFF_MM ) ) ) ) {		$exif = @exif_read_data( $file );		if ( !empty( $exif['Title'] ) )			$meta['title'] = utf8_encode( trim( $exif['Title'] ) );		if ( ! empty( $exif['ImageDescription'] ) ) {			if ( empty( $meta['title'] ) && strlen( $exif['ImageDescription'] ) < 80 ) {				// Assume the title is stored in ImageDescription				$meta['title'] = utf8_encode( trim( $exif['ImageDescription'] ) );				if ( ! empty( $exif['COMPUTED']['UserComment'] ) && trim( $exif['COMPUTED']['UserComment'] ) != $meta['title'] )					$meta['caption'] = utf8_encode( trim( $exif['COMPUTED']['UserComment'] ) );			} elseif ( trim( $exif['ImageDescription'] ) != $meta['title'] ) {				$meta['caption'] = utf8_encode( trim( $exif['ImageDescription'] ) );			}		} elseif ( ! empty( $exif['Comments'] ) && trim( $exif['Comments'] ) != $meta['title'] ) {			$meta['caption'] = utf8_encode( trim( $exif['Comments'] ) );		}		if ( ! empty( $exif['Artist'] ) )			$meta['credit'] = utf8_encode( trim( $exif['Artist'] ) );		elseif ( ! empty($exif['Author'] ) )			$meta['credit'] = utf8_encode( trim( $exif['Author'] ) );		if ( ! empty( $exif['Copyright'] ) )			$meta['copyright'] = utf8_encode( trim( $exif['Copyright'] ) );		if ( ! empty($exif['FNumber'] ) )			$meta['aperture'] = round( wp_exif_frac2dec( $exif['FNumber'] ), 2 );		if ( ! empty($exif['Model'] ) )			$meta['camera'] = utf8_encode( trim( $exif['Model'] ) );		if ( ! empty($exif['DateTimeDigitized'] ) )			$meta['created_timestamp'] = wp_exif_date2ts($exif['DateTimeDigitized'] );		if ( ! empty($exif['FocalLength'] ) )			$meta['focal_length'] = wp_exif_frac2dec( $exif['FocalLength'] );		if ( ! empty($exif['ISOSpeedRatings'] ) )			$meta['iso'] = utf8_encode( trim( $exif['ISOSpeedRatings'] ) );		if ( ! empty($exif['ExposureTime'] ) )			$meta['shutter_speed'] = wp_exif_frac2dec( $exif['ExposureTime'] );	}	return apply_filters( 'wp_read_image_metadata', $meta, $file, $sourceImageType );}/** * Validate that file is an image. * * @since 2.5.0 * * @param string $path File path to test if valid image. * @return bool True if valid image, false if not valid image. */function file_is_valid_image($path) {	$size = @getimagesize($path);	return !empty($size);}/** * Validate that file is suitable for displaying within a web page. * * @since 2.5.0 * @uses apply_filters() Calls 'file_is_displayable_image' on $result and $path. * * @param string $path File path to test. * @return bool True if suitable, false if not suitable. */function file_is_displayable_image($path) {	$info = @getimagesize($path);	if ( empty($info) )		$result = false;	elseif ( !in_array($info[2], array(IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG)) )	// only gif, jpeg and png images can reliably be displayed		$result = false;	else		$result = true;	return apply_filters('file_is_displayable_image', $result, $path);}
<?php/** * WordPress Translation API * * @package WordPress * @subpackage i18n *//** * Gets the current locale. * * If the locale is set, then it will filter the locale in the 'locale' filter * hook and return the value. * * If the locale is not set already, then the WPLANG constant is used if it is * defined. Then it is filtered through the 'locale' filter hook and the value * for the locale global set and the locale is returned. * * The process to get the locale should only be done once but the locale will * always be filtered using the 'locale' hook. * * @since 1.5.0 * @uses apply_filters() Calls 'locale' hook on locale value. * @uses $locale Gets the locale stored in the global. * * @return string The locale of the blog or from the 'locale' hook. */function get_locale() {	global $locale;	if ( isset( $locale ) )		return apply_filters( 'locale', $locale );	// WPLANG is defined in wp-config.	if ( defined( 'WPLANG' ) )		$locale = WPLANG;	// If multisite, check options.	if ( is_multisite() && !defined('WP_INSTALLING') ) {		$ms_locale = get_option('WPLANG');		if ( $ms_locale === false )			$ms_locale = get_site_option('WPLANG');		if ( $ms_locale !== false )			$locale = $ms_locale;	}	if ( empty( $locale ) )		$locale = 'en_US';	return apply_filters( 'locale', $locale );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see __() Don't use translate() directly, use __() * @since 2.2.0 * @uses apply_filters() Calls 'gettext' on domain translated text *		with the untranslated text as second parameter. * * @param string $text Text to translate. * @param string $domain Domain to retrieve the translated text. * @return string Translated text */function translate( $text, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext', $translations->translate( $text ), $text, $domain );}function before_last_bar( $string ) {	$last_bar = strrpos( $string, '|' );	if ( false == $last_bar )		return $string;	else		return substr( $string, 0, $last_bar );}function translate_with_gettext_context( $text, $context, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext_with_context', $translations->translate( $text, $context ), $text, $context, $domain );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @since 2.1.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function __( $text, $domain = 'default' ) {	return translate( $text, $domain );}/** * Retrieves the translation of $text and escapes it for safe use in an attribute. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_attr__( $text, $domain = 'default' ) {	return esc_attr( translate( $text, $domain ) );}/** * Retrieves the translation of $text and escapes it for safe use in HTML output. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_html__( $text, $domain = 'default' ) {	return esc_html( translate( $text, $domain ) );}/** * Displays the returned translated text from translate(). * * @see translate() Echoes returned translate() string * @since 1.2.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function _e( $text, $domain = 'default' ) {	echo translate( $text, $domain );}/** * Displays translated text that has been escaped for safe use in an attribute. * * @see translate() Echoes returned translate() string * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_attr_e( $text, $domain = 'default' ) {	echo esc_attr( translate( $text, $domain ) );}/** * Displays translated text that has been escaped for safe use in HTML output. * * @see translate() Echoes returned translate() string * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_html_e( $text, $domain = 'default' ) {	echo esc_html( translate( $text, $domain ) );}/** * Retrieve translated string with gettext context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * By including the context in the pot file translators can translate the two * string differently. * * @since 2.8.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _x( $single, $context, $domain = 'default' ) {	return translate_with_gettext_context( $single, $context, $domain );}/** * Displays translated string with gettext context * * @see _x * @since 3.0.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _ex( $single, $context, $domain = 'default' ) {	echo _x( $single, $context, $domain );}function esc_attr_x( $single, $context, $domain = 'default' ) {	return esc_attr( translate_with_gettext_context( $single, $context, $domain ) );}function esc_html_x( $single, $context, $domain = 'default' ) {	return esc_html( translate_with_gettext_context( $single, $context, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * If the domain is not set in the $l10n list, then a comparison will be made * and either $plural or $single parameters returned. * * If the domain does exist, then the parameters $single, $plural, and $number * will first be passed to the domain's ngettext method. Then it will be passed * to the 'ngettext' filter hook along with the same parameters. The expected * type will be a string. * * @since 2.8.0 * @uses $l10n Gets list of domain translated string (gettext_reader) objects * @uses apply_filters() Calls 'ngettext' hook on domains text returned, *		along with $single, $plural, and $number parameters. Expected to return string. * * @param string $single The text that will be used if $number is 1 * @param string $plural The text that will be used if $number is not 1 * @param int $number The number to compare against to use either $single or $plural * @param string $domain Optional. The domain identifier the text should be retrieved in * @return string Either $single or $plural translated text */function _n( $single, $plural, $number, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number );	return apply_filters( 'ngettext', $translation, $single, $plural, $number, $domain );}/** * A hybrid of _n() and _x(). It supports contexts and plurals. * * @see _n() * @see _x() * */function _nx($single, $plural, $number, $context, $domain = 'default') {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number, $context );	return apply_filters( 'ngettext_with_context', $translation, $single, $plural, $number, $context, $domain );}/** * Register plural strings in POT file, but don't translate them. * * Used when you want do keep structures with translatable plural strings and * use them later. * * Example: *  $messages = array( *  	'post' => _n_noop('%s post', '%s posts'), *  	'page' => _n_noop('%s pages', '%s pages') *  ); *  ... *  $message = $messages[$type]; *  $usable_text = sprintf(_n($message[0], $message[1], $count), $count); * * @since 2.5 * @param $single Single form to be i18ned * @param $plural Plural form to be i18ned * @return array array($single, $plural) */function _n_noop( $single, $plural ) {	return array( $single, $plural );}/** * Register plural strings with context in POT file, but don't translate them. * * @see _n_noop() */function _nx_noop( $single, $plural, $context ) {	return array( $single, $plural, $context );}/** * Loads a MO file into the domain $domain. * * If the domain already exists, the translations will be merged. If both * sets have the same string, the translation from the original value will be taken. * * On success, the .mo file will be placed in the $l10n global by $domain * and will be a MO object. * * @since 1.5.0 * @uses $l10n Gets list of domain translated string objects * * @param string $domain Unique identifier for retrieving translated strings * @param string $mofile Path to the .mo file * @return bool true on success, false on failure */function load_textdomain( $domain, $mofile ) {	global $l10n;	$plugin_override = apply_filters( 'override_load_textdomain', false, $domain, $mofile );	if ( true == $plugin_override ) {		return true;	}	do_action( 'load_textdomain', $domain, $mofile );	$mofile = apply_filters( 'load_textdomain_mofile', $mofile, $domain );	if ( !is_readable( $mofile ) ) return false;	$mo = new MO();	if ( !$mo->import_from_file( $mofile ) ) return false;	if ( isset( $l10n[$domain] ) )		$mo->merge_with( $l10n[$domain] );	$l10n[$domain] = &$mo;	return true;}/** * Unloads translations for a domain * * @since 3.0.0 * @param string $domain Textdomain to be unloaded * @return bool Whether textdomain was unloaded */function unload_textdomain( $domain ) {	global $l10n;	$plugin_override = apply_filters( 'override_unload_textdomain', false, $domain );	if ( $plugin_override )		return true;	do_action( 'unload_textdomain', $domain );	if ( isset( $l10n[$domain] ) ) {		unset( $l10n[$domain] );		return true;	}	return false;}/** * Loads default translated strings based on locale. * * Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The * translated (.mo) file is named based off of the locale. * * @since 1.5.0 */function load_default_textdomain() {	$locale = get_locale();	load_textdomain( 'default', WP_LANG_DIR . "/$locale.mo" );	if ( is_multisite() || ( defined( 'WP_NETWORK_ADMIN_PAGE' ) && WP_NETWORK_ADMIN_PAGE ) ) {		load_textdomain( 'default', WP_LANG_DIR . "/ms-$locale.mo" );	}}/** * Loads the plugin's translated strings. * * If the path is not given then it will be the root of the plugin directory. * The .mo file should be named based on the domain with a dash, and then the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings * @param string $abs_rel_path Optional. Relative path to ABSPATH of a folder, * 	where the .mo file resides. Deprecated, but still functional until 2.7 * @param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precendence over $abs_rel_path */function load_plugin_textdomain( $domain, $abs_rel_path = false, $plugin_rel_path = false ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	if ( false !== $plugin_rel_path	) {		$path = WP_PLUGIN_DIR . '/' . trim( $plugin_rel_path, '/' );	} else if ( false !== $abs_rel_path ) {		_deprecated_argument( __FUNCTION__, '2.7' );		$path = ABSPATH . trim( $abs_rel_path, '/' );	} else {		$path = WP_PLUGIN_DIR;	}	$mofile = $path . '/'. $domain . '-' . $locale . '.mo';	return load_textdomain( $domain, $mofile );}/** * Load the translated strings for a plugin residing in the mu-plugins dir. * * @since 3.0.0 * * @param string $domain Unique identifier for retrieving translated strings * @param strings $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which * the MO file resides. Defaults is empty string. */function load_muplugin_textdomain( $domain, $mu_plugin_rel_path = '' ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	$path = WPMU_PLUGIN_DIR . '/' . ltrim( $mu_plugin_rel_path, '/' );	load_textdomain( $domain, trailingslashit( $path ) . "$domain-$locale.mo" );}/** * Loads the theme's translated strings. * * If the current locale exists as a .mo file in the theme's root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_template_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Loads the child themes translated strings. * * If the current locale exists as a .mo file in the child themes root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 2.9.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_child_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_stylesheet_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Returns the Translations instance for a domain. If there isn't one, * returns empty Translations instance. * * @param string $domain * @return object A Translation instance */function &get_translations_for_domain( $domain ) {	global $l10n;	if ( !isset( $l10n[$domain] ) ) {		$l10n[$domain] = &new NOOP_Translations;	}	return $l10n[$domain];}/** * Whether there are translations for the domain * * @since 3.0.0 * @param string $domain * @return bool Whether there are translations */function is_textdomain_loaded( $domain ) {	global $l10n;	return isset( $l10n[$domain] );}/** * Translates role name. Since the role names are in the database and * not in the source there are dummy gettext calls to get them into the POT * file and this function properly translates them back. * * The before_last_bar() call is needed, because older installs keep the roles * using the old context format: 'Role name|User role' and just skipping the * content after the last bar is easier than fixing them in the DB. New installs * won't suffer from that problem. */function translate_user_role( $name ) {	return translate_with_gettext_context( before_last_bar($name), 'User role' );}/** * Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR. * * @since 3.0.0 * * @param string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR. * @return array Array of language codes or an empty array if no languages are present.  Language codes are formed by stripping the .mo extension from the language file names. */function get_available_languages( $dir = null ) {	$languages = array();	foreach( (array)glob( ( is_null( $dir) ? WP_LANG_DIR : $dir ) . '/*.mo' ) as $lang_file ) {		$lang_file = basename($lang_file, '.mo');		if ( 0 !== strpos( $lang_file, 'continents-cities' ) && 0 !== strpos( $lang_file, 'ms-' ) )			$languages[] = $lang_file;	}	return $languages;}
<?phpdefine('WP_REPAIRING', true);require_once('../../wp-load.php');header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e('WordPress &rsaquo; Database Repair'); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="../images/wordpress-logo.png" /></h1><?phpif ( !defined('WP_ALLOW_REPAIR') ) {	echo '<p>'.__('To allow use of this page to automatically repair database problems, please add the following line to your wp-config.php file.  Once this line is added to your config, reload this page.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";} elseif ( isset($_GET['repair']) ) {	$problems = array();	check_admin_referer('repair_db');	if ( 2 == $_GET['repair'] )		$optimize = true;	else		$optimize = false;	$okay = true;	$tables = $wpdb->tables();	// Sitecategories may not exist if global terms are disabled.	if ( is_multisite() && ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->sitecategories'" ) )		unset( $tables['sitecategories'] );	$tables = array_merge( $tables, (array) apply_filters( 'tables_to_repair', array() ) ); // Return tables with table prefixes.	// Loop over the tables, checking and repairing as needed.	foreach ( $tables as $table ) {		$check = $wpdb->get_row("CHECK TABLE $table");		if ( 'OK' == $check->Msg_text ) {			echo "<p>The $table table is okay.";		} else {			echo "<p>The $table table is not okay. It is reporting the following error: <code>$check->Msg_text</code>.  WordPress will attempt to repair this table&hellip;";			$repair = $wpdb->get_row("REPAIR TABLE $table");			if ( 'OK' == $check->Msg_text ) {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully repaired the $table table.";			} else {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to repair the $table table. Error: $check->Msg_text<br />";				$problems["$table"] = $check->Msg_text;				$okay = false;			}		}		if ( $okay && $optimize ) {			$check = $wpdb->get_row("ANALYZE TABLE $table");			if ( 'Table is already up to date' == $check->Msg_text )  {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;The $table table is already optimized.";			} else {				$check = $wpdb->get_row("OPTIMIZE TABLE $table");				if ( 'OK' == $check->Msg_text || 'Table is already up to date' == $check->Msg_text )					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully optimized the $table table.";				else					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to optimize the $table table. Error: $check->Msg_text";			}		}		echo '</p>';	}	if ( !empty($problems) ) {		printf('<p>'.__('Some database problems could not be repaired. Please copy-and-paste the following list of errors to the <a href="%s">WordPress support forums</a> to get additional assistance.').'</p>', 'http://wordpress.org/support/forum/3');		$problem_output = array();		foreach ( $problems as $table => $problem )			$problem_output[] = "$table: $problem";		echo '<textarea name="errors" id="errors" rows="20" cols="60">' . format_to_edit(implode("\n", $problem_output)) . '</textarea>';	} else {		echo '<p>'.__('Repairs complete.  Please remove the following line from wp-config.php to prevent this page from being used by unauthorized users.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";	}} else {	if ( isset($_GET['referrer']) && 'is_blog_installed' == $_GET['referrer'] )		_e('One or more database tables is unavailable.  To allow WordPress to attempt to repair these tables, press the "Repair Database" button. Repairing can take awhile, so please be patient.');	else		_e('WordPress can automatically look for some common database problems and repair them.  Repairing can take awhile, so please be patient.')?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=1', 'repair_db') ?>"><?php _e( 'Repair Database' ); ?></a></p>	<?php _e('WordPress can also attempt to optimize the database.  This improves performance in some situations.  Repairing and optimizing the database can take a long time and the database will be locked while optimizing.'); ?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=2', 'repair_db') ?>"><?php _e( 'Repair and Optimize Database' ); ?></a></p><?php}?></body></html>
<?php/** * Deprecated.  Use rss.php instead. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC . '/rss.php' );require_once (ABSPATH . WPINC . '/rss.php');?>
<?php/** * The custom header image script. * * @package WordPress * @subpackage Administration *//** * The custom header image class. * * @since 2.1.0 * @package WordPress * @subpackage Administration */class Custom_Image_Header {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since 2.1.0	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds default headers.	 *	 * @var array	 * @since 3.0.0	 * @access private	 */	var $default_headers = array();	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 2.1.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Image_Header	 */	function Custom_Image_Header($admin_header_callback, $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Header admin page.	 *	 * @since 2.1.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Header'), __('Header'), 'edit_theme_options', 'custom-header', array(&$this, 'admin_page'));		add_action("admin_print_scripts-$page", array(&$this, 'js_includes'));		add_action("admin_print_styles-$page", array(&$this, 'css_includes'));		add_action("admin_head-$page", array(&$this, 'help') );		add_action("admin_head-$page", array(&$this, 'take_action'), 50);		add_action("admin_head-$page", array(&$this, 'js'), 50);		add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Adds contextual help.	 *	 * @since 3.0.0	 */	function help() {		add_contextual_help( $this->page, '<p>' . __( 'You can set a custom image header for your site. Simply upload the image and crop it, and the new header will go live immediately.' ) . '</p>' .		'<p>' . __( 'If you want to discard your custom header and go back to the default included in your theme, click on the buttons to remove the custom image and restore the original header image.' ) . '</p>' .		'<p>' . __( 'Some themes come with additional header images bundled. If you see multiple images displayed, select the one you&#8217;d like and click the Save Changes button.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Header_SubPanel" target="_blank">Documentation on Custom Header</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );	}	/**	 * Get the current step.	 *	 * @since 2.6.0	 *	 * @return int Current step	 */	function step() {		if ( ! isset( $_GET['step'] ) )			return 1;		$step = (int) $_GET['step'];		if ( $step < 1 || 3 < $step )			$step = 1;		return $step;	}	/**	 * Set up the enqueue for the JavaScript files.	 *	 * @since 2.1.0	 */	function js_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_script('farbtastic');		elseif ( 2 == $step )			wp_enqueue_script('imgareaselect');	}	/**	 * Set up the enqueue for the CSS files	 *	 * @since 2.7	 */	function css_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_style('farbtastic');		elseif ( 2 == $step )			wp_enqueue_style('imgareaselect');	}	/**	 * Check if header text is allowed	 *	 * @since 3.0.0	 */	function header_text() {		if ( defined( 'NO_HEADER_TEXT' ) && NO_HEADER_TEXT )			return false;		return true;	}	/**	 * Execute custom header modification.	 *	 * @since 2.6.0	 */	function take_action() {		if ( ! current_user_can('edit_theme_options') )			return;		if ( empty( $_POST ) )			return;		$this->updated = true;		if ( isset( $_POST['resetheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod( 'header_image' );			return;		}		if ( isset( $_POST['resettext'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod('header_textcolor');			return;		}		if ( isset( $_POST['removeheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			set_theme_mod( 'header_image', '' );			return;		}		if ( isset( $_POST['text-color'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$_POST['text-color'] = str_replace( '#', '', $_POST['text-color'] );			if ( 'blank' == $_POST['text-color'] ) {				set_theme_mod( 'header_textcolor', 'blank' );			} else {				$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['text-color']);				if ( strlen($color) == 6 || strlen($color) == 3 )					set_theme_mod('header_textcolor', $color);			}		}		if ( isset($_POST['default-header']) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$this->process_default_headers();			if ( isset($this->default_headers[$_POST['default-header']]) )				set_theme_mod('header_image', esc_url($this->default_headers[$_POST['default-header']]['url']));		}	}	/**	 * Process the default headers	 *	 * @since 3.0.0	 */	function process_default_headers() {		global $_wp_default_headers;		if ( !empty($this->headers) )			return;		if ( !isset($_wp_default_headers) )			return;		$this->default_headers = $_wp_default_headers;		foreach ( array_keys($this->default_headers) as $header ) {			$this->default_headers[$header]['url'] =  sprintf( $this->default_headers[$header]['url'], get_template_directory_uri(), get_stylesheet_directory_uri() );			$this->default_headers[$header]['thumbnail_url'] =  sprintf( $this->default_headers[$header]['thumbnail_url'], get_template_directory_uri(), get_stylesheet_directory_uri() );		}	}	/**	 * Display UI for selecting one of several default headers.	 *	 * @since 3.0.0	 */	function show_default_header_selector() {		echo '<div id="available-headers">';		foreach ( $this->default_headers as $header_key => $header ) {			$header_thumbnail = $header['thumbnail_url'];			$header_url = $header['url'];			$header_desc = $header['description'];			echo '<div class="default-header">';			echo '<label><input name="default-header" type="radio" value="' . esc_attr($header_key) . '" ' . checked($header_url, get_theme_mod( 'header_image' ), false) . ' />';			echo '<img src="' . $header_thumbnail . '" alt="' . esc_attr($header_desc) .'" title="' . esc_attr($header_desc) .'" /></label>';			echo '</div>';		}		echo '<div class="clear"></div></div>';	}	/**	 * Execute Javascript depending on step.	 *	 * @since 2.1.0	 */	function js() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			$this->js_1();		elseif ( 2 == $step )			$this->js_2();	}	/**	 * Display Javascript based on Step 1 and 3.	 *	 * @since 2.6.0	 */	function js_1() { ?><script type="text/javascript">/* <![CDATA[ */	var text_objects = ['#name', '#desc', '#text-color-row'];	var farbtastic;	var default_color = '#<?php echo HEADER_TEXTCOLOR; ?>';	var old_color = null;	function pickColor(color) {		jQuery('#name').css('color', color);		jQuery('#desc').css('color', color);		jQuery('#text-color').val(color);		farbtastic.setColor(color);	}	function toggle_text(s) {		if (jQuery(s).attr('id') == 'showtext' && jQuery('#text-color').val() != 'blank')			return;		if (jQuery(s).attr('id') == 'hidetext' && jQuery('#text-color').val() == 'blank')			return;		if (jQuery('#text-color').val() == 'blank') {			//Show text			if (old_color == '#blank')				old_color = default_color;			jQuery( text_objects.toString() ).show();			jQuery('#text-color').val(old_color);			jQuery('#name').css('color', old_color);			jQuery('#desc').css('color', old_color);			pickColor(old_color);		} else {			//Hide text			jQuery( text_objects.toString() ).hide();			old_color = jQuery('#text-color').val();			jQuery('#text-color').val('blank');		}	}	jQuery(document).ready(function() {		jQuery('#pickcolor').click(function() {			jQuery('#color-picker').show();		});		jQuery('input[name="hidetext"]').click(function() {			toggle_text(this);		});		jQuery('#defaultcolor').click(function() {			pickColor(default_color);			jQuery('#text-color').val(default_color)		});		jQuery('#text-color').keyup(function() {			var _hex = jQuery('#text-color').val();			var hex = _hex;			if ( hex[0] != '#' )				hex = '#' + hex;			hex = hex.replace(/[^#a-fA-F0-9]+/, '');			if ( hex != _hex )				jQuery('#text-color').val(hex);			if ( hex.length == 4 || hex.length == 7 )				pickColor( hex );		});		jQuery(document).mousedown(function(){			jQuery('#color-picker').each( function() {				var display = jQuery(this).css('display');				if (display == 'block')					jQuery(this).fadeOut(2);			});		});		farbtastic = jQuery.farbtastic('#color-picker', function(color) { pickColor(color); });		<?php if ( $color = get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) ) { ?>		pickColor('#<?php echo $color; ?>');		<?php } ?>		<?php if ( 'blank' == get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() ) { ?>		toggle_text();		<?php } ?>		});</script><?php	}	/**	 * Display Javascript based on Step 2.	 *	 * @since 2.6.0	 */	function js_2() { ?><script type="text/javascript">/* <![CDATA[ */	function onEndCrop( coords ) {		jQuery( '#x1' ).val(coords.x);		jQuery( '#y1' ).val(coords.y);		jQuery( '#width' ).val(coords.w);		jQuery( '#height' ).val(coords.h);	}	jQuery(document).ready(function() {		var xinit = <?php echo HEADER_IMAGE_WIDTH; ?>;		var yinit = <?php echo HEADER_IMAGE_HEIGHT; ?>;		var ratio = xinit / yinit;		var ximg = jQuery('img#upload').width();		var yimg = jQuery('img#upload').height();		if ( yimg < yinit || ximg < xinit ) {			if ( ximg / yimg > ratio ) {				yinit = yimg;				xinit = yinit * ratio;			} else {				xinit = ximg;				yinit = xinit / ratio;			}		}		jQuery('img#upload').imgAreaSelect({			handles: true,			keys: true,			aspectRatio: xinit + ':' + yinit,			show: true,			x1: 0,			y1: 0,			x2: xinit,			y2: yinit,			maxHeight: <?php echo HEADER_IMAGE_HEIGHT; ?>,			maxWidth: <?php echo HEADER_IMAGE_WIDTH; ?>,			onInit: function () {				jQuery('#width').val(xinit);				jQuery('#height').val(yinit);			},			onSelectChange: function(img, c) {				jQuery('#x1').val(c.x1);				jQuery('#y1').val(c.y1);				jQuery('#width').val(c.width);				jQuery('#height').val(c.height);			}		});	});/* ]]> */</script><?php	}	/**	 * Display first step of custom header image page.	 *	 * @since 2.1.0	 */	function step_1() {		$this->process_default_headers();?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Custom Header'); ?></h2><?php if ( ! empty( $this->updated ) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Header updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php } ?><h3><?php _e( 'Header Image' ) ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e( 'Preview' ); ?></th><td >	<?php if ( $this->admin_image_div_callback ) {	  call_user_func( $this->admin_image_div_callback );	} else {	?>	<div id="headimg" style="max-width:<?php echo HEADER_IMAGE_WIDTH; ?>px;height:<?php echo HEADER_IMAGE_HEIGHT; ?>px;background-image:url(<?php esc_url ( header_image() ) ?>);">		<?php		if ( 'blank' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() )			$style = ' style="display:none;"';		else			$style = ' style="color:#' . get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) . ';"';		?>		<h1><a id="name"<?php echo $style; ?> onclick="return false;" href="<?php bloginfo('url'); ?>"><?php bloginfo( 'name' ); ?></a></h1>		<div id="desc"<?php echo $style; ?>><?php bloginfo( 'description' ); ?></div>	</div>	<?php } ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'Upload Image' ); ?></th><td>	<p><?php _e( 'You can upload a custom header image to be shown at the top of your site instead of the default one. On the next screen you will be able to crop the image.' ); ?><br />	<?php printf( __( 'Images of exactly <strong>%1$d &times; %2$d pixels</strong> will be used as-is.' ), HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT ); ?></p>	<form enctype="multipart/form-data" id="upload-form" method="post" action="<?php echo esc_attr( add_query_arg( 'step', 2 ) ) ?>">	<p>		<label for="upload"><?php _e( 'Choose an image from your computer:' ); ?></label><br />		<input type="file" id="upload" name="import" />		<input type="hidden" name="action" value="save" />		<?php wp_nonce_field( 'custom-header-upload', '_wpnonce-custom-header-upload' ) ?>		<input type="submit" class="button" value="<?php esc_attr_e( 'Upload' ); ?>" />	</p>	</form></td></tr></tbody></table><form method="post" action="<?php echo esc_attr( add_query_arg( 'step', 1 ) ) ?>"><table class="form-table"><tbody>	<?php if ( ! empty( $this->default_headers ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Default Images' ); ?></th><td>	<p><?php _e( 'If you don&lsquo;t want to upload your own image, you can use one of these cool headers.' ) ?></p>	<?php		$this->show_default_header_selector();	?></td></tr>	<?php endif;	if ( get_header_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Remove Image' ); ?></th><td>	<p><?php _e( 'This will remove the header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="removeheader" value="<?php esc_attr_e( 'Remove Header Image' ); ?>" /></td></tr>	<?php endif;	if ( defined( 'HEADER_IMAGE' ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Reset Image' ); ?></th><td>	<p><?php _e( 'This will restore the original header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resetheader" value="<?php esc_attr_e( 'Restore Original Header Image' ); ?>" /></td></tr>	<?php endif; ?></tbody></table>	<?php if ( $this->header_text() ) : ?><h3><?php _e( 'Header Text' ) ?></h3><table class="form-table"><tbody><tr valign="top" class="hide-if-no-js"><th scope="row"><?php _e( 'Display Text' ); ?></th><td>	<p>	<?php $hidetext = get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ); ?>	<label><input type="radio" value="1" name="hidetext" id="hidetext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) )  ? true : false ); ?> /> <?php _e( 'No' ); ?></label>	<label><input type="radio" value="0" name="hidetext" id="showtext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) ) ? false : true ); ?> /> <?php _e( 'Yes' ); ?></label>	</p></td></tr><tr valign="top" id="text-color-row"><th scope="row"><?php _e( 'Text Color' ); ?></th><td>	<p>		<input type="text" name="text-color" id="text-color" value="#<?php echo esc_attr( get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) ); ?>" />		<span class="description hide-if-js"><?php _e( 'If you want to hide header text, add <strong>#blank</strong> as text color.' );?></span>		<input type="button" class="button hide-if-no-js" value="<?php esc_attr_e( 'Select a Color' ); ?>" id="pickcolor" />	</p>	<div id="color-picker" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></td></tr>	<?php if ( defined('HEADER_TEXTCOLOR') && get_theme_mod('header_textcolor') ) { ?><tr valign="top"><th scope="row"><?php _e('Reset Text Color'); ?></th><td>	<p><?php _e( 'This will restore the original header text. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resettext" value="<?php esc_attr_e( 'Restore Original Header Text' ); ?>" /></td></tr>	<?php } ?></tbody></table>	<?php endif;wp_nonce_field( 'custom-header-options', '_wpnonce-custom-header-options' ); ?><p class="submit"><input type="submit" class="button-primary" name="save-header-options" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php }	/**	 * Display second step of custom header image page.	 *	 * @since 2.1.0	 */	function step_2() {		check_admin_referer('custom-header-upload', '_wpnonce-custom-header-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'],  __( 'Image Upload Error' ) );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(		'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url);		// Save the data		$id = wp_insert_attachment($object, $file);		list($width, $height, $type, $attr) = getimagesize( $file );		if ( $width == HEADER_IMAGE_WIDTH && $height == HEADER_IMAGE_HEIGHT ) {			// Add the meta-data			wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );			set_theme_mod('header_image', esc_url($url));			do_action('wp_create_file_in_uploads', $file, $id); // For replication			return $this->finished();		} elseif ( $width > HEADER_IMAGE_WIDTH ) {			$oitar = $width / HEADER_IMAGE_WIDTH;			$image = wp_crop_image($file, 0, 0, $width, $height, HEADER_IMAGE_WIDTH, $height / $oitar, false, str_replace(basename($file), 'midsize-'.basename($file), $file));			if ( is_wp_error( $image ) )				wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );			$image = apply_filters('wp_create_file_in_uploads', $image, $id); // For replication			$url = str_replace(basename($url), basename($image), $url);			$width = $width / $oitar;			$height = $height / $oitar;		} else {			$oitar = 1;		}		?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Crop Header Image' ); ?></h2><form method="post" action="<?php echo esc_attr(add_query_arg('step', 3)); ?>">	<p class="hide-if-no-js"><?php _e('Choose the part of the image you want to use as your header.'); ?></p>	<p class="hide-if-js"><strong><?php _e( 'You need Javascript to choose a part of the image.'); ?></strong></p>	<div id="crop_image" style="position: relative">		<img src="<?php echo esc_url( $url ); ?>" id="upload" width="<?php echo $width; ?>" height="<?php echo $height; ?>" />	</div>	<p class="submit">	<input type="hidden" name="x1" id="x1" value="0"/>	<input type="hidden" name="y1" id="y1" value="0"/>	<input type="hidden" name="width" id="width" value="<?php echo esc_attr( $width ); ?>"/>	<input type="hidden" name="height" id="height" value="<?php echo esc_attr( $height ); ?>"/>	<input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr( $id ); ?>" />	<input type="hidden" name="oitar" id="oitar" value="<?php echo esc_attr( $oitar ); ?>" />	<?php wp_nonce_field( 'custom-header-crop-image' ) ?>	<input type="submit" class="button-primary" value="<?php esc_attr_e( 'Crop and Publish' ); ?>" />	</p></form></div>		<?php	}	/**	 * Display third step of custom header image page.	 *	 * @since 2.1.0	 */	function step_3() {		check_admin_referer('custom-header-crop-image');		if ( $_POST['oitar'] > 1 ) {			$_POST['x1'] = $_POST['x1'] * $_POST['oitar'];			$_POST['y1'] = $_POST['y1'] * $_POST['oitar'];			$_POST['width'] = $_POST['width'] * $_POST['oitar'];			$_POST['height'] = $_POST['height'] * $_POST['oitar'];		}		$original = get_attached_file( $_POST['attachment_id'] );		$cropped = wp_crop_image($_POST['attachment_id'], $_POST['x1'], $_POST['y1'], $_POST['width'], $_POST['height'], HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT);		if ( is_wp_error( $cropped ) )			wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );		$cropped = apply_filters('wp_create_file_in_uploads', $cropped, $_POST['attachment_id']); // For replication		$parent = get_post($_POST['attachment_id']);		$parent_url = $parent->guid;		$url = str_replace(basename($parent_url), basename($cropped), $parent_url);		// Construct the object array		$object = array(			'ID' => $_POST['attachment_id'],			'post_title' => basename($cropped),			'post_content' => $url,			'post_mime_type' => 'image/jpeg',			'guid' => $url		);		// Update the attachment		wp_insert_attachment($object, $cropped);		wp_update_attachment_metadata( $_POST['attachment_id'], wp_generate_attachment_metadata( $_POST['attachment_id'], $cropped ) );		set_theme_mod('header_image', $url);		// cleanup		$medium = str_replace(basename($original), 'midsize-'.basename($original), $original);		@unlink( apply_filters( 'wp_delete_file', $medium ) );		@unlink( apply_filters( 'wp_delete_file', $original ) );		return $this->finished();	}	/**	 * Display last step of custom header image page.	 *	 * @since 2.1.0	 */	function finished() {		$this->updated = true;		$this->step_1();	}	/**	 * Display the page based on the current step.	 *	 * @since 2.1.0	 */	function admin_page() {		if ( ! current_user_can('edit_theme_options') )			wp_die(__('You do not have permission to customize headers.'));		$step = $this->step();		if ( 1 == $step )			$this->step_1();		elseif ( 2 == $step )			$this->step_2();		elseif ( 3 == $step )			$this->step_3();	}}?>
<?php/** * Handle Trackbacks and Pingbacks sent to WordPress * * @package WordPress */if (empty($wp)) {	require_once('./wp-load.php');	wp( array( 'tb' => '1' ) );}/** * trackback_response() - Respond with error or success XML message * * @param int|bool $error Whether there was an error * @param string $error_message Error message if an error occurred */function trackback_response($error = 0, $error_message = '') {	header('Content-Type: text/xml; charset=' . get_option('blog_charset') );	if ($error) {		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";		echo "<response>\n";		echo "<error>1</error>\n";		echo "<message>$error_message</message>\n";		echo "</response>";		die();	} else {		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";		echo "<response>\n";		echo "<error>0</error>\n";		echo "</response>";	}}// trackback is done by a POST$request_array = 'HTTP_POST_VARS';if ( !isset($_GET['tb_id']) || !$_GET['tb_id'] ) {	$tb_id = explode('/', $_SERVER['REQUEST_URI']);	$tb_id = intval( $tb_id[ count($tb_id) - 1 ] );}$tb_url  = isset($_POST['url'])     ? $_POST['url']     : '';$charset = isset($_POST['charset']) ? $_POST['charset'] : '';// These three are stripslashed here so that they can be properly escaped after mb_convert_encoding()$title     = isset($_POST['title'])     ? stripslashes($_POST['title'])      : '';$excerpt   = isset($_POST['excerpt'])   ? stripslashes($_POST['excerpt'])    : '';$blog_name = isset($_POST['blog_name']) ? stripslashes($_POST['blog_name'])  : '';if ($charset)	$charset = str_replace( array(',', ' '), '', strtoupper( trim($charset) ) );else	$charset = 'ASCII, UTF-8, ISO-8859-1, JIS, EUC-JP, SJIS';// No valid uses for UTF-7if ( false !== strpos($charset, 'UTF-7') )	die;if ( function_exists('mb_convert_encoding') ) { // For international trackbacks	$title     = mb_convert_encoding($title, get_option('blog_charset'), $charset);	$excerpt   = mb_convert_encoding($excerpt, get_option('blog_charset'), $charset);	$blog_name = mb_convert_encoding($blog_name, get_option('blog_charset'), $charset);}// Now that mb_convert_encoding() has been given a swing, we need to escape these three$title     = $wpdb->escape($title);$excerpt   = $wpdb->escape($excerpt);$blog_name = $wpdb->escape($blog_name);if ( is_single() || is_page() )	$tb_id = $posts[0]->ID;if ( !isset($tb_id) || !intval( $tb_id ) )	trackback_response(1, 'I really need an ID for this to work.');if (empty($title) && empty($tb_url) && empty($blog_name)) {	// If it doesn't look like a trackback at all...	wp_redirect(get_permalink($tb_id));	exit;}if ( !empty($tb_url) && !empty($title) ) {	header('Content-Type: text/xml; charset=' . get_option('blog_charset') );	if ( !pings_open($tb_id) )		trackback_response(1, 'Sorry, trackbacks are closed for this item.');	$title =  wp_html_excerpt( $title, 250 ).'...';	$excerpt = wp_html_excerpt( $excerpt, 252 ).'...';	$comment_post_ID = (int) $tb_id;	$comment_author = $blog_name;	$comment_author_email = '';	$comment_author_url = $tb_url;	$comment_content = "<strong>$title</strong>\n\n$excerpt";	$comment_type = 'trackback';	$dupe = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $comment_post_ID, $comment_author_url) );	if ( $dupe )		trackback_response(1, 'We already have a ping from that URL for this post.');	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type');	wp_new_comment($commentdata);	do_action('trackback_post', $wpdb->insert_id);	trackback_response(0);}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><hr /><div id="footer" role="contentinfo"><!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->	<p>		<?php printf(__('%1$s is proudly powered by %2$s'), get_bloginfo('name'),		'<a href="http://wordpress.org/">WordPress</a>'); ?>		<br /><?php printf(__('%1$s and %2$s.'), '<a href="' . get_bloginfo('rss2_url') . '">' . __('Entries (RSS)') . '</a>', '<a href="' . get_bloginfo('comments_rss2_url') . '">' . __('Comments (RSS)') . '</a>'); ?>		<!-- <?php printf(__('%d queries. %s seconds.'), get_num_queries(), timer_stop(0, 3)); ?> -->	</p></div></div><!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ --><?php /* "Just what do you think you're doing Dave?" */ ?>		<?php wp_footer(); ?></body></html>
<?php/** * WordPress FTP Sockets Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing FTP Sockets. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_ftpsockets extends WP_Filesystem_Base {	var $ftp = false;	var $errors = null;	var $options = array();	function WP_Filesystem_ftpsockets($opt = '') {		$this->method = 'ftpsockets';		$this->errors = new WP_Error();		//Check if possible to use ftp functions.		if ( ! @include_once ABSPATH . 'wp-admin/includes/class-ftp.php' )				return false;		$this->ftp = new ftp();		//Set defaults:		if ( empty($opt['port']) )			$this->options['port'] = 21;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('FTP hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( empty ($opt['username']) )			$this->errors->add('empty_username', __('FTP username is required'));		else			$this->options['username'] = $opt['username'];		if ( empty ($opt['password']) )			$this->errors->add('empty_password', __('FTP password is required'));		else			$this->options['password'] = $opt['password'];	}	function connect() {		if ( ! $this->ftp )			return false;		$this->ftp->setTimeout(FS_CONNECT_TIMEOUT);		if ( ! $this->ftp->SetServer($this->options['hostname'], $this->options['port']) ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! $this->ftp->connect() ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! $this->ftp->login($this->options['username'], $this->options['password']) ) {			$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));			return false;		}		$this->ftp->SetType(FTP_AUTOASCII);		$this->ftp->Passive(true);		$this->ftp->setTimeout(FS_TIMEOUT);		return true;	}	function get_contents($file, $type = '', $resumepos = 0) {		if ( ! $this->exists($file) )			return false;		if ( empty($type) )			$type = FTP_AUTOASCII;		$this->ftp->SetType($type);		$temp = wp_tempnam( $file );		if ( ! $temphandle = fopen($temp, 'w+') )			return false;		if ( ! $this->ftp->fget($temphandle, $file) ) {			fclose($temphandle);			unlink($temp);			return ''; //Blank document, File does exist, Its just blank.		}		fseek($temphandle, 0); //Skip back to the start of the file being written to		$contents = '';		while ( ! feof($temphandle) )			$contents .= fread($temphandle, 8192);		fclose($temphandle);		unlink($temp);		return $contents;	}	function get_contents_array($file) {		return explode("\n", $this->get_contents($file) );	}	function put_contents($file, $contents, $mode = false ) {		$temp = wp_tempnam( $file );		if ( ! $temphandle = @fopen($temp, 'w+') ) {			unlink($temp);			return false;		}		fwrite($temphandle, $contents);		fseek($temphandle, 0); //Skip back to the start of the file being written to		$type = $this->is_binary($contents) ? FTP_BINARY : FTP_ASCII;		$this->ftp->SetType($type);		$ret = $this->ftp->fput($file, $temphandle);		fclose($temphandle);		unlink($temp);		$this->chmod($file, $mode);		return $ret;	}	function cwd() {		$cwd = $this->ftp->pwd();		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($file) {		return $this->ftp->chdir($file);	}	function chgrp($file, $group, $recursive = false ) {		return false;	}	function chmod($file, $mode = false, $recursive = false ) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		// chmod any sub-objects if recursive.		if ( $recursive && $this->is_dir($file) ) {			$filelist = $this->dirlist($file);			foreach ( (array)$filelist as $filename => $filemeta )				$this->chmod($file . '/' . $filename, $mode, $recursive);		}		// chmod the file or directory		return $this->ftp->chmod($file, $mode);	}	function chown($file, $owner, $recursive = false ) {		return false;	}	function owner($file) {		$dir = $this->dirlist($file);		return $dir[$file]['owner'];	}	function getchmod($file) {		$dir = $this->dirlist($file);		return $dir[$file]['permsn'];	}	function group($file) {		$dir = $this->dirlist($file);		return $dir[$file]['group'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content )			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false ) {		return $this->ftp->rename($source, $destination);	}	function delete($file, $recursive = false ) {		if ( empty($file) )			return false;		if ( $this->is_file($file) )			return $this->ftp->delete($file);		if ( !$recursive )			return $this->ftp->rmdir($file);		return $this->ftp->mdel($file);	}	function exists($file) {		return $this->ftp->is_exists($file);	}	function is_file($file) {		if ( $this->is_dir($file) )			return false;		if ( $this->exists($file) )			return true;		return false;	}	function is_dir($path) {		$cwd = $this->cwd();		if ( $this->chdir($path) ) {			$this->chdir($cwd);			return true;		}		return false;	}	function is_readable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function is_writable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function atime($file) {		return false;	}	function mtime($file) {		return $this->ftp->mdtm($file);	}	function size($file) {		return $this->ftp->filesize($file);	}	function touch($file, $time = 0, $atime = 0 ) {		return false;	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false ) {		if ( ! $this->ftp->mkdir($path) )			return false;		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false ) {		$this->delete($path, $recursive);	}	function dirlist($path = '.', $include_hidden = true, $recursive = false ) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path) . '/';		} else {			$limit_file = false;		}		$list = $this->ftp->dirlist($path);		if ( empty($list) && !$this->exists($path) )			return false;		$ret = array();		foreach ( $list as $struc ) {			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue;			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file )				continue;			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		return $ret;	}	function __destruct() {		$this->ftp->quit();	}}?>
<?php/** * WordPress Export Administration API * * @package WordPress * @subpackage Administration *//** * Version number for the export format. * * Bump this when something changes that might affect compatibility. * * @since unknown * @var string */define('WXR_VERSION', '1.0');/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $args */function export_wp( $args = array() ) {	global $wpdb, $post_ids, $post, $wp_taxonomies;	if ( ! is_array( $args ) )		$args = array( 'author' => $args );	$defaults = array( 'author' => null, 'taxonomy' => null, 'post_type' => null, 'post_status' => null, 'start_date' => null, 'end_date' => null );	$args = wp_parse_args( $args, $defaults );	extract($args);	do_action('export_wp');	if( strlen( $start_date ) > 4 && strlen( $end_date ) > 4 )		$filename = 'wordpress.' . $start_date . '.' . $end_date . '.xml';	else		$filename = 'wordpress.' . date( 'Y-m-d' ) . '.xml';	header( 'Content-Description: File Transfer' );	header( 'Content-Disposition: attachment; filename=' . $filename );	header( 'Content-Type: text/xml; charset=' . get_option( 'blog_charset' ), true );	if ( $post_type && $post_type != 'all' )		$where = $wpdb->prepare("WHERE post_type = %s ", $post_type);	else		$where = "WHERE post_type != 'revision' ";	if ( $author && $author != 'all' ) {		$author_id = (int) $author;		$where .= $wpdb->prepare( "AND post_author = %d ", $author_id );	}	if ( $start_date && $start_date != 'all' )		$where .= $wpdb->prepare( "AND post_date >= %s ", $start_date );	if ( $end_date && $end_date != 'all' )		$where .= $wpdb->prepare( "AND post_date < %s ", $end_date );	if ( $taxonomy && is_array( $taxonomy ) ) {		foreach ( $taxonomy as $term_id ) {			if ( $term_id != 'all' )				$where .= $wpdb->prepare( "AND ID IN (SELECT object_id FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d) ", $term_id );		}	}	if ( $post_status && $post_status != 'all' )		$where .= $wpdb->prepare( "AND post_status = %s", $status );	// grab a snapshot of post IDs, just in case it changes during the export	$post_ids = $wpdb->get_col( "SELECT ID FROM $wpdb->posts $where ORDER BY post_date_gmt ASC" );	$categories = (array) get_categories( array( 'get' => 'all' ) );	$tags = (array) get_tags( array( 'get' => 'all' ) );	$custom_taxonomies = $wp_taxonomies;	unset( $custom_taxonomies['category'] );	unset( $custom_taxonomies['post_tag'] );	unset( $custom_taxonomies['link_category'] );	$custom_taxonomies = array_keys( $custom_taxonomies );	$terms = (array) get_terms( $custom_taxonomies, array( 'get' => 'all' ) );	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param unknown_type $categories	 */	function wxr_missing_parents( $categories ) {		if ( ! is_array( $categories ) || empty( $categories ) )			return array();		foreach ( $categories as $category ){			$parents[$category->term_id] = $category->parent;		}		$parents = array_unique( array_diff( $parents, array_keys( $parents ) ) );		if ( $zero = array_search( '0', $parents ) )			unset( $parents[$zero] );		return $parents;	}	while ( $parents = wxr_missing_parents( $categories ) ) {		$found_parents = get_categories( array( 'include' => join( ', ', $parents) ) );		if ( is_array( $found_parents ) && count( $found_parents ) )			$categories = array_merge( $categories, $found_parents );		else			break;	}	// Put them in order to be inserted with no child going before its parent	$pass = 0;	$passes = 1000 + count( $categories );	while ( ( $cat = array_shift( $categories ) ) && ++$pass < $passes ) {		if ( $cat->parent == 0 || isset( $cats[$cat->parent] ) )			$cats[$cat->term_id] = $cat;		else			$categories[] = $cat;	}	unset( $categories );	/**	 * Place string in CDATA tag.	 *	 * @since unknown	 *	 * @param string $str String to place in XML CDATA tag.	 */	function wxr_cdata( $str ) {		if ( seems_utf8( $str ) == false )			$str = utf8_encode( $str );		// $str = ent2ncr(esc_html($str));		$str = "<![CDATA[$str" . ( ( substr( $str, -1 ) == ']' ) ? ' ' : '') . "]]>";		return $str;	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @return string Site URL.	 */	function wxr_site_url() {		global $current_site;		// mu: the base url		if ( isset( $current_site->domain ) )			return network_home_url();		// wp: the blog url		else			return get_bloginfo_rss( 'url' );	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $c Category Object	 */	function wxr_cat_name( $c ) {		if ( empty( $c->name ) )			return;		echo '<wp:cat_name>' . wxr_cdata( $c->name ) . '</wp:cat_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $c Category Object	 */	function wxr_category_description( $c ) {		if ( empty( $c->description ) )			return;		echo '<wp:category_description>' . wxr_cdata($c->description) . '</wp:category_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Tag Object	 */	function wxr_tag_name( $t ) {		if ( empty( $t->name ) )			return;		echo '<wp:tag_name>' . wxr_cdata($t->name) . '</wp:tag_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Tag Object	 */	function wxr_tag_description( $t ) {		if ( empty( $t->description ) )			return;		echo '<wp:tag_description>' . wxr_cdata($t->description) . '</wp:tag_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Term Object	 */	function wxr_term_name( $t ) {		if ( empty( $t->name ) )			return;		echo '<wp:term_name>' . wxr_cdata($t->name) . '</wp:term_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Term Object	 */	function wxr_term_description( $t ) {		if ( empty( $t->description ) )			return;		echo '<wp:term_description>' . wxr_cdata($t->description) . '</wp:term_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 */	function wxr_post_taxonomy() {		global $post;		$the_list = '';		$filter = 'rss';		$taxonomies = get_object_taxonomies( 'post' );		$terms = wp_get_post_terms( $post->ID, $taxonomies );		foreach ( (array) $terms as $term ) {			$domain = ( 'post_tag' == $term->taxonomy ) ? 'tag' : $term->taxonomy;			$term_name = sanitize_term_field( 'name', $term->name, $term->term_id, $term->taxonomy, $filter );			// Back compat.			if ( 'category' == $term->taxonomy )				$the_list .= "\n\t\t<category><![CDATA[$term_name]]></category>\n";			elseif ( 'post_tag' == $term->taxonomy )				$the_list .= "\n\t\t<category domain=\"$domain\"><![CDATA[$term_name]]></category>\n";			// forwards compatibility as above			$the_list .= "\n\t\t<category domain=\"$domain\" nicename=\"{$term->slug}\"><![CDATA[$term_name]]></category>\n";		}		echo $the_list;	}	echo '<?xml version="1.0" encoding="' . get_bloginfo('charset') . '"?' . ">\n";	?><!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. --><!-- It contains information about your blog's posts, comments, and categories. --><!-- You may use this file to transfer that content from one site to another. --><!-- This file is not intended to serve as a complete backup of your blog. --><!-- To import this information into a WordPress blog follow these steps. --><!-- 1. Log in to that blog as an administrator. --><!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). --><!-- 3. Choose "WordPress" from the list. --><!-- 4. Upload this file using the form provided on that page. --><!-- 5. You will first be asked to map the authors in this export file to users --><!--    on the blog.  For each author, you may choose to map to an --><!--    existing user on the blog or to create a new user --><!-- 6. WordPress will then import each of the posts, comments, and categories --><!--    contained in this file into your blog --><?php the_generator( 'export' );?><rss version="2.0"	xmlns:excerpt="http://wordpress.org/export/<?php echo WXR_VERSION; ?>/excerpt/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:wp="http://wordpress.org/export/<?php echo WXR_VERSION; ?>/"><channel>	<title><?php bloginfo_rss( 'name' ); ?></title>	<link><?php bloginfo_rss( 'url' ) ?></link>	<description><?php bloginfo_rss( 'description' ) ?></description>	<pubDate><?php echo mysql2date( 'D, d M Y H:i:s +0000', get_lastpostmodified( 'GMT' ), false ); ?></pubDate>	<generator>http://wordpress.org/?v=<?php bloginfo_rss( 'version' ); ?></generator>	<language><?php echo get_option( 'rss_language' ); ?></language>	<wp:wxr_version><?php echo WXR_VERSION; ?></wp:wxr_version>	<wp:base_site_url><?php echo wxr_site_url(); ?></wp:base_site_url>	<wp:base_blog_url><?php bloginfo_rss( 'url' ); ?></wp:base_blog_url>	<?php if ( $cats ) : foreach ( $cats as $c ) : ?>	<wp:category><wp:category_nicename><?php echo $c->slug; ?></wp:category_nicename><wp:category_parent><?php echo $c->parent ? $cats[$c->parent]->name : ''; ?></wp:category_parent><?php wxr_cat_name( $c ); ?><?php wxr_category_description( $c ); ?></wp:category>	<?php endforeach; endif; ?>	<?php if ( $tags ) : foreach ( $tags as $t ) : ?>	<wp:tag><wp:tag_slug><?php echo $t->slug; ?></wp:tag_slug><?php wxr_tag_name( $t ); ?><?php wxr_tag_description( $t ); ?></wp:tag>	<?php endforeach; endif; ?>	<?php if ( $terms ) : foreach ( $terms as $t ) : ?>	<wp:term><wp:term_taxonomy><?php echo $t->taxonomy; ?></wp:term_taxonomy><wp:term_slug><?php echo $t->slug; ?></wp:term_slug><wp:term_parent><?php echo $t->parent ? $custom_taxonomies[$t->parent]->name : ''; ?></wp:term_parent><?php wxr_term_name( $t ); ?><?php wxr_term_description( $t ); ?></wp:term>	<?php endforeach; endif; ?>	<?php do_action( 'rss2_head' ); ?>	<?php if ( $post_ids ) {	global $wp_query;	$wp_query->in_the_loop = true;  // Fake being in the loop.	// fetch 20 posts at a time rather than loading the entire table into memory	while ( $next_posts = array_splice( $post_ids, 0, 20 ) ) {	$where = "WHERE ID IN (" . join( ',', $next_posts ) . ")";	$posts = $wpdb->get_results( "SELECT * FROM $wpdb->posts $where ORDER BY post_date_gmt ASC" );	// Begin Loop	foreach ($posts as $post) {	setup_postdata( $post );	$is_sticky = 0;	if ( is_sticky( $post->ID ) )		$is_sticky = 1;	?>	<item>		<title><?php echo apply_filters( 'the_title_rss', $post->post_title ); ?></title>		<link><?php the_permalink_rss() ?></link>		<pubDate><?php echo mysql2date( 'D, d M Y H:i:s +0000', get_post_time( 'Y-m-d H:i:s', true ), false ); ?></pubDate>		<dc:creator><?php echo wxr_cdata( get_the_author() ); ?></dc:creator>		<?php wxr_post_taxonomy() ?>		<guid isPermaLink="false"><?php esc_url( the_guid() ); ?></guid>		<description></description>		<content:encoded><?php echo wxr_cdata( apply_filters( 'the_content_export', $post->post_content ) ); ?></content:encoded>		<excerpt:encoded><?php echo wxr_cdata( apply_filters( 'the_excerpt_export', $post->post_excerpt ) ); ?></excerpt:encoded>		<wp:post_id><?php echo $post->ID; ?></wp:post_id>		<wp:post_date><?php echo $post->post_date; ?></wp:post_date>		<wp:post_date_gmt><?php echo $post->post_date_gmt; ?></wp:post_date_gmt>		<wp:comment_status><?php echo $post->comment_status; ?></wp:comment_status>		<wp:ping_status><?php echo $post->ping_status; ?></wp:ping_status>		<wp:post_name><?php echo $post->post_name; ?></wp:post_name>		<wp:status><?php echo $post->post_status; ?></wp:status>		<wp:post_parent><?php echo $post->post_parent; ?></wp:post_parent>		<wp:menu_order><?php echo $post->menu_order; ?></wp:menu_order>		<wp:post_type><?php echo $post->post_type; ?></wp:post_type>		<wp:post_password><?php echo $post->post_password; ?></wp:post_password>		<wp:is_sticky><?php echo $is_sticky; ?></wp:is_sticky>		<?php		if ( $post->post_type == 'attachment' ) { ?>		<wp:attachment_url><?php echo wp_get_attachment_url( $post->ID ); ?></wp:attachment_url>		<?php } ?>		<?php		$postmeta = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->postmeta WHERE post_id = %d", $post->ID ) );		if ( $postmeta ) {		?>		<?php foreach( $postmeta as $meta ) { ?>		<wp:postmeta>		<wp:meta_key><?php echo $meta->meta_key; ?></wp:meta_key>		<wp:meta_value><?php echo wxr_cdata( $meta->meta_value ); ?></wp:meta_value>		</wp:postmeta>		<?php } ?>		<?php } ?>		<?php		$comments = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d", $post->ID ) );		if ( $comments ) { foreach ( $comments as $c ) { ?>		<wp:comment>		<wp:comment_id><?php echo $c->comment_ID; ?></wp:comment_id>		<wp:comment_author><?php echo wxr_cdata( $c->comment_author ); ?></wp:comment_author>		<wp:comment_author_email><?php echo $c->comment_author_email; ?></wp:comment_author_email>		<wp:comment_author_url><?php echo esc_url_raw( $c->comment_author_url ); ?></wp:comment_author_url>		<wp:comment_author_IP><?php echo $c->comment_author_IP; ?></wp:comment_author_IP>		<wp:comment_date><?php echo $c->comment_date; ?></wp:comment_date>		<wp:comment_date_gmt><?php echo $c->comment_date_gmt; ?></wp:comment_date_gmt>		<wp:comment_content><?php echo wxr_cdata( $c->comment_content ) ?></wp:comment_content>		<wp:comment_approved><?php echo $c->comment_approved; ?></wp:comment_approved>		<wp:comment_type><?php echo $c->comment_type; ?></wp:comment_type>		<wp:comment_parent><?php echo $c->comment_parent; ?></wp:comment_parent>		<wp:comment_user_id><?php echo $c->user_id; ?></wp:comment_user_id>		</wp:comment>		<?php } } ?>	</item>	<?php	}	}} ?></channel></rss><?php}?>
<?php/** * Manage link category administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for category actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'cat'));switch($action) {case 'addcat':	check_admin_referer('add-link-category');	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	if ( wp_insert_term($_POST['name'], 'link_category', $_POST ) ) {		wp_redirect('edit-link-categories.php?message=1#addcat');	} else {		wp_redirect('edit-link-categories.php?message=4#addcat');	}	exit;break;case 'delete':	$cat_ID = (int) $_GET['cat_ID'];	check_admin_referer('delete-link-category_' .  $cat_ID);	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	$cat_name = get_term_field('name', $cat_ID, 'link_category');	$default_cat_id = get_option('default_link_category');	// Don't delete the default cats.	if ( $cat_ID == $default_cat_id )		wp_die(sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name));	wp_delete_term($cat_ID, 'link_category', array('default' => $default_cat_id));	$location = 'edit-link-categories.php';	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-link-categories.php') )			$location = $referer;	}	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = __('Edit Category');	$parent_file = 'link-manager.php';	$submenu_file = 'edit-link-categories.php';	require_once ('admin-header.php');	$cat_ID = (int) $_GET['cat_ID'];	$category = get_term_to_edit($cat_ID, 'link_category');	include('./edit-link-category-form.php');	include('./admin-footer.php');	exit;break;case 'editedcat':	$cat_ID = (int) $_POST['cat_ID'];	check_admin_referer('update-link-category_' . $cat_ID);	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	$location = 'edit-link-categories.php';	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-link-categories.php') )			$location = $referer;	}	$update =  wp_update_term($cat_ID, 'link_category', $_POST);	if ( $update && !is_wp_error($update) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;}?>
<?php/** * Edit posts rows table for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');?><table class="widefat <?php echo $post_type_object->hierarchical ? 'page' : 'post'; ?> fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers( $current_screen ); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody><?phpif ( $post_type_object->hierarchical )	page_rows($posts, $pagenum, $per_page);else	post_rows();?>	</tbody></table>
<?php/** * Edit links form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( ! empty($link_id) ) {	$heading = sprintf( __( '<a href="%s">Links</a> / Edit Link' ), 'link-manager.php' );	$submit_text = __('Update Link');	$form = '<form name="editlink" id="editlink" method="post" action="link.php">';	$nonce_action = 'update-bookmark_' . $link_id;} else {	$heading = sprintf( __( '<a href="%s">Links</a> / Add New Link' ), 'link-manager.php' );	$submit_text = __('Add Link');	$form = '<form name="addlink" id="addlink" method="post" action="link.php">';	$nonce_action = 'add-bookmark';}require_once('./includes/meta-boxes.php');add_meta_box('linksubmitdiv', __('Save'), 'link_submit_meta_box', 'link', 'side', 'core');add_meta_box('linkcategorydiv', __('Categories'), 'link_categories_meta_box', 'link', 'normal', 'core');add_meta_box('linktargetdiv', __('Target'), 'link_target_meta_box', 'link', 'normal', 'core');add_meta_box('linkxfndiv', __('Link Relationship (XFN)'), 'link_xfn_meta_box', 'link', 'normal', 'core');add_meta_box('linkadvanceddiv', __('Advanced'), 'link_advanced_meta_box', 'link', 'normal', 'core');do_action('add_meta_boxes', 'link', $link);do_action('add_meta_boxes_link', $link);do_action('do_meta_boxes', 'link', 'normal', $link);do_action('do_meta_boxes', 'link', 'advanced', $link);do_action('do_meta_boxes', 'link', 'side', $link);add_contextual_help($current_screen,	'<p>' . __( 'You can add or edit links on this screen by entering information in each of the boxes. Only the link&#8217;s web address and name (the text you want to display on your site as the link) are required fields.' ) . '</p>' .	'<p>' . __( 'The boxes for link name, web address, and description have fixed positions, while the others may be repositioned using drag and drop. You can also hide boxes you don&#8217;t use in the Screen Options tab, or minimize boxes by clicking on the title bar of the box.' ) . '</p>' .	'<p>' . __( 'XFN stands for <a href="http://gmpg.org/xfn/" target="_blank">XHTML Friends Network</a>, which is optional. WordPress allows the generation of XFN attributes to show how you are related to the authors/owners of the site to which you are linking.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Links_Add_New_SubPanel" target="_blank">Documentation on Creating Links</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>');require_once ('admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset( $_GET['added'] ) ) : ?><div id="message" class="updated"><p><?php _e('Link added.'); ?></p></div><?php endif; ?><?phpif ( !empty($form) )	echo $form;if ( !empty($link_added) )	echo $link_added;wp_nonce_field( $nonce_action );wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?><div id="poststuff" class="metabox-holder<?php echo 2 == $screen_layout_columns ? ' has-right-sidebar' : ''; ?>"><div id="side-info-column" class="inner-sidebar"><?phpdo_action('submitlink_box');$side_meta_boxes = do_meta_boxes( 'link', 'side', $link );?></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="link_name"><?php _e('Name') ?></label></h3><div class="inside">	<input type="text" name="link_name" size="30" tabindex="1" value="<?php echo esc_attr($link->link_name); ?>" id="link_name" />    <p><?php _e('Example: Nifty blogging software'); ?></p></div></div><div id="addressdiv" class="stuffbox"><h3><label for="link_url"><?php _e('Web Address') ?></label></h3><div class="inside">	<input type="text" name="link_url" size="30" class="code" tabindex="1" value="<?php echo esc_attr($link->link_url); ?>" id="link_url" />    <p><?php _e('Example: <code>http://wordpress.org/</code> &#8212; don&#8217;t forget the <code>http://</code>'); ?></p></div></div><div id="descriptiondiv" class="stuffbox"><h3><label for="link_description"><?php _e('Description') ?></label></h3><div class="inside">	<input type="text" name="link_description" size="30" tabindex="1" value="<?php echo isset($link->link_description) ? esc_attr($link->link_description) : ''; ?>" id="link_description" />    <p><?php _e('This will be shown when someone hovers over the link in the blogroll, or optionally below the link.'); ?></p></div></div><?phpdo_meta_boxes('link', 'normal', $link);do_meta_boxes('link', 'advanced', $link);if ( $link_id ) : ?><input type="hidden" name="action" value="save" /><input type="hidden" name="link_id" value="<?php echo (int) $link_id; ?>" /><input type="hidden" name="order_by" value="<?php echo esc_attr($order_by); ?>" /><input type="hidden" name="cat_id" value="<?php echo (int) $cat_id ?>" /><?php else: ?><input type="hidden" name="action" value="add" /><?php endif; ?></div></div></div></form></div>
<?php/** * The template for displaying Tag Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Tag Archives: %s', 'twentyten' ), '<span>' . single_tag_title( '', false ) . '</span>' );				?></h1><?php/* Run the loop for the tag archive to output the posts * If you want to overload this in a child theme then include a file * called loop-tag.php and that will be used instead. */ get_template_part( 'loop', 'tag' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 2.0.4                                                          ||   Contact: via sourceforge.net support pages (also www.codeworxtech.com)  ||      Info: http://phpmailer.sourceforge.net                               ||   Support: http://sourceforge.net/projects/phpmailer/                     || ------------------------------------------------------------------------- ||    Author: Andy Prevost (project admininistrator)                         ||    Author: Brent R. Matzelle (original founder)                           || Copyright (c) 2004-2007, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         || ------------------------------------------------------------------------- || We offer a number of paid services (www.codeworxtech.com):                || - Web Hosting on highly optimized fast and secure servers                 || - Technology Consulting                                                   || - Oursourcing (highly qualified programmers and graphic designers)        |'---------------------------------------------------------------------------' *//** * SMTP is rfc 821 compliant and implements all the rfc 821 SMTP * commands except TURN which will always return a not implemented * error. SMTP also provides some utility methods for sending mail * to an SMTP server. * @package PHPMailer * @author Chris Ryan */class SMTP{  /**   *  SMTP server port   *  @var int   */  var $SMTP_PORT = 25;  /**   *  SMTP reply line ending   *  @var string   */  var $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  var $do_debug;       # the level of debug to perform  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  var $do_verp = false;  /**#@+   * @access private   */  var $smtp_conn;      # the socket to the server  var $error;          # error if any on the last call  var $helo_rply;      # the reply the server sent to us for HELO  /**#@-*/  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return void   */  function SMTP() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /*************************************************************   *                    CONNECTION FUNCTIONS                  *   ***********************************************************/  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @return bool   */  function Connect($host,$port=0,$tval=30) {    # set the error val to null so there is no confusion    $this->error = null;    # make sure we are __not__ connected    if($this->connected()) {      # ok we are connected! what should we do?      # for now we will just give an error saying we      # are already connected      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    #connect to the smtp server    $this->smtp_conn = fsockopen($host,    # the host of the server                                 $port,    # the port to use                                 $errno,   # error number if any                                 $errstr,  # error message if any                                 $tval);   # give up after ? secs    # verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": $errstr ($errno)" . $this->CRLF;      }      return false;    }    # sometimes the SMTP server takes a little longer to respond    # so we will give it a longer timeout for the first read    // Windows still does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN")     socket_set_timeout($this->smtp_conn, $tval, 0);    # get any announcement stuff    $announce = $this->get_lines();    # set the timeout  of any socket functions at 1/10 of a second    //if(function_exists("socket_set_timeout"))    //   socket_set_timeout($this->smtp_conn, 0, 100000);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $announce;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @return bool   */  function Authenticate($username, $password) {    // Start authentication    fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "AUTH not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded username    fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "Username not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded password    fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 235) {      $this->error =        array("error" => "Password not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access private   * @return bool   */  function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        # hmm this is an odd situation... the socket is        # valid but we are not connected anymore        if($this->do_debug >= 1) {            echo "SMTP -> NOTICE:" . $this->CRLF .                 "EOF caught while checking if connected";        }        $this->Close();        return false;      }      return true; # everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  function Close() {    $this->error = null; # so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      # close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /***************************************************************   *                        SMTP COMMANDS                       *   *************************************************************/  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being separated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Data($msg_data) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # the server is ready to accept data!    # according to rfc 821 we should not send more than 1000    # including the CRLF    # characters on a single line so we will break the data up    # into lines by \r and/or \n then if needed we will break    # each of those into smaller lines to fit within the limit.    # in addition we will be looking for lines that start with    # a period '.' and append and additional period '.' to that    # line. NOTE: this does not count towards are limit.    # normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    # we need to find a good way to determine is headers are    # in the msg_data or if it is a straight msg body    # currently I am assuming rfc 822 definitions of msg headers    # and if the first field of the first line (':' sperated)    # does not contain a space then it _should_ be a header    # and we can process all lines before a blank "" line as    # headers.    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; # used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      # ok we need to break this line up into several      # smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        # Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;        }        $lines_out[] = substr($line,0,$pos);        $line = substr($line,$pos + 1);        # if we are processing headers we need to        # add a LWSP-char to the front of the new line        # rfc 822 on long msg headers        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      # now send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    # ok all the message data has been sent so lets get this    # over with aleady    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Expand takes the name and asks the server to list all the   * people who are members of the _list_. Expand will return   * back and array of the result or false if an error occurs.   * Each value in the array returned has the format of:   *     [ <full-name> <sp> ] <path>   * The definition of <path> is defined in rfc 821   *   * Implements rfc 821: EXPN <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 550   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string array   */  function Expand($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Expand() without being connected");      return false;    }    fputs($this->smtp_conn,"EXPN " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "EXPN not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # parse the reply and place in our array to return to user    $entries = explode($this->CRLF,$rply);    while(list(,$l) = @each($entries)) {      $list[] = substr($l,4);    }    return $list;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @return bool   */  function Hello($host="") {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    # if a hostname for the HELO was not specified determine    # a suitable one to send    if(empty($host)) {      # we need to determine some sort of appopiate default      # to send to the server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host))    {      if(!$this->SendHello("HELO", $host))          return false;    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @return bool   */  function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER: " . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Gets help information on the keyword specified. If the keyword   * is not specified then returns generic help, ussually contianing   * A list of keywords that help is available on. This function   * returns the results back to the user. It is up to the user to   * handle the returned data. If an error occurs then false is   * returned with $this->error set appropiately.   *   * Implements rfc 821: HELP [ <SP> <string> ] <CRLF>   *   * SMTP CODE SUCCESS: 211,214   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string   */  function Help($keyword="") {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Help() without being connected");      return false;    }    $extra = "";    if(!empty($keyword)) {      $extra = " " . $keyword;    }    fputs($this->smtp_conn,"HELP" . $extra . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 211 && $code != 214) {      $this->error =        array("error" => "HELP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @return bool   */  function Mail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? "XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the command NOOP to the SMTP server.   *   * Implements from rfc 821: NOOP <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 421   * @access public   * @return bool   */  function Noop() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Noop() without being connected");      return false;    }    fputs($this->smtp_conn,"NOOP" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "NOOP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @return bool   */  function Quit($close_on_error=true) {    $this->error = null; # so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    # send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    # get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $byemsg;    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      # use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $e["error"] . ": " .                 $byemsg . $this->CRLF;      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Recipient($to) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  function Reset() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in.   *   * Implements rfc 821: SEND <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function Send($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Send() without being connected");      return false;    }    fputs($this->smtp_conn,"SEND FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SEND not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendAndMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in or mail it to them if they are not.   *   * Implements rfc 821: SOML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendOrMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendOrMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SOML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SOML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      echo "SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF;    }    return false;  }  /**   * Verifies that the name is recognized by the server.   * Returns false if the name could not be verified otherwise   * the response from the server is returned.   *   * Implements rfc 821: VRFY <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,553   * SMTP CODE ERROR  : 500,501,502,421   * @access public   * @return int   */  function Verify($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Verify() without being connected");      return false;    }    fputs($this->smtp_conn,"VRFY " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "VRFY failed on name '$name'",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /*******************************************************************   *                       INTERNAL FUNCTIONS                       *   ******************************************************************/  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  function get_lines() {    $data = "";    while($str = @fgets($this->smtp_conn,515)) {      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data was \"$data\"" .                 $this->CRLF;        echo "SMTP -> get_lines(): \$str is \"$str\"" .                 $this->CRLF;      }      $data .= $str;      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF;      }      # if the 4th character is a space then we are done reading      # so just break the loop      if(substr($str,3,1) == " ") { break; }    }    return $data;  }} ?>
<?php/** * Multisite administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Admin' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Until WordPress 3.0, running multiple sites required using WordPress MU instead of regular WordPress. In version 3.0, these applications have merged. If you are a former MU user, you should be aware of the following changes:') . '</p>' .	'<ul><li>' . __('Site Admin is now Super Admin (we highly encourage you to get yourself a cape!).') . '</li>' .	'<li>' . __('Blogs are now called Sites; Site is now called Network.') . '</li></ul>' .	'<p>' . __('This screen provides the network administrator with links to the screens for Sites and Users to either create a new site or user, or to search existing users and sites. Those screens are also accessible through the left-hand navigation in the Super Admin section.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Super_Admin_Menu" target="_blank">Documentation on Super Admin Menu</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );$c_users = get_user_count();$c_blogs = get_blog_count();$user_text = sprintf( _n( '%s user', '%s users', $c_users ), number_format_i18n( $c_users ) );$blog_text = sprintf( _n( '%s site', '%s sites', $c_blogs ), number_format_i18n( $c_blogs ) );$sentence = sprintf( __( 'You have %1$s and %2$s.' ), $blog_text, $user_text );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub">	<li><a href="ms-sites.php#form-add-site"><?php _e( 'Create a New Site' ); ?></a> |</li>	<li><a href="ms-users.php#form-add-user"><?php _e( 'Create a New User' ); ?></a></li>	</ul>	<br class="clear" />	<p class="youhave"><?php echo $sentence; ?></p>	<?php do_action( 'wpmuadminresult', '' ); ?>	<form name="searchform" action="ms-users.php" method="get">		<p>			<input type="hidden" name="action" value="users" />			<input type="text" name="s" value="" size="17" />			<input class="button" type="submit" name="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" />		</p>	</form>	<form name="searchform" action="ms-sites.php" method="get">		<p>			<input type="hidden" name="action" value="blogs" />			<input type="hidden" name="searchaction" value="name" />			<input type="text" name="s" value="" size="17" />			<input class="button" type="submit" name="blog_name" value="<?php esc_attr_e( 'Search Sites' ); ?>" />		</p>	</form>	<?php do_action( 'mu_rightnow_end' ); ?>	<?php do_action( 'mu_activity_box_end' ); ?></div><?php include( './admin-footer.php' ); ?>
<?php/** * Multisite upgrade administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once('admin.php');if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );require_once( ABSPATH . WPINC . '/http.php' );$title = __( 'Update Network' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Only use this screen once you have updated to a new version of WordPress through Dashboard > Updates. Clicking the Update Network button will step through each site in the network, five at a time, and make sure any database upgrades are applied.') . '</p>' .	'<p>' . __('If a version update to core has not happened, clicking this button won&#8217;t affect anything.') . '</p>' .	'<p>' . __('If this process fails for any reason, users logging in to their sites will force the same update.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Update_SubPanel" target="_blank">Update Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('admin-header.php');if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );echo '<div class="wrap">';screen_icon();echo '<h2>' . __( 'Update Network' ) . '</h2>';$action = isset($_GET['action']) ? $_GET['action'] : 'show';switch ( $action ) {	case "upgrade":		$n = ( isset($_GET['n']) ) ? intval($_GET['n']) : 0;		if ( $n < 5 ) {			global $wp_db_version;			update_site_option( 'wpmu_upgrade_site', $wp_db_version );		}		$blogs = $wpdb->get_results( "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' AND spam = '0' AND deleted = '0' AND archived = '0' ORDER BY registered DESC LIMIT {$n}, 5", ARRAY_A );		if ( empty( $blogs ) ) {			echo '<p>' . __( 'All done!' ) . '</p>';			break;		}		echo "<ul>";		foreach ( (array) $blogs as $details ) {			$siteurl = get_blog_option( $details['blog_id'], 'siteurl' );			echo "<li>$siteurl</li>";			$response = wp_remote_get( trailingslashit( $siteurl ) . "wp-admin/upgrade.php?step=upgrade_db", array( 'timeout' => 120, 'httpversion' => '1.1' ) );			if ( is_wp_error( $response ) )				wp_die( sprintf( __( 'Warning! Problem updating %1$s. Your server may not be able to connect to sites running on it. Error message: <em>%2$s</em>' ), $siteurl, $response->get_error_message() ) );			do_action( 'after_mu_upgrade', $response );			do_action( 'wpmu_upgrade_site', $details[ 'blog_id' ] );		}		echo "</ul>";		?><p><?php _e( 'If your browser doesn&#8217;t start loading the next page automatically, click this link:' ); ?> <a class="button" href="ms-upgrade-network.php?action=upgrade&amp;n=<?php echo ($n + 5) ?>"><?php _e("Next Sites"); ?></a></p>		<script type='text/javascript'>		<!--		function nextpage() {			location.href = "ms-upgrade-network.php?action=upgrade&n=<?php echo ($n + 5) ?>";		}		setTimeout( "nextpage()", 250 );		//-->		</script><?php	break;	case 'show':	default:		?><p><?php _e( 'You can update all the sites on your network through this page. It works by calling the update script of each site automatically. Hit the link below to update.' ); ?></p>		<p><a class="button" href="ms-upgrade-network.php?action=upgrade"><?php _e("Update Network"); ?></a></p><?php		do_action( 'wpmu_upgrade_page' );	break;}?></div><?php include('./admin-footer.php'); ?>
<?php/** * Comment Management Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once('./admin.php');$parent_file = 'edit-comments.php';$submenu_file = 'edit-comments.php';wp_reset_vars( array('action') );if ( isset( $_POST['deletecomment'] ) )	$action = 'deletecomment';if ( 'cdc' == $action )	$action = 'delete';elseif ( 'mac' == $action )	$action = 'approve';if ( isset( $_GET['dt'] ) ) {	if ( 'spam' == $_GET['dt'] )		$action = 'spam';	elseif ( 'trash' == $_GET['dt'] )		$action = 'trash';}/** * Display error message at bottom of comments. * * @param string $msg Error Message. Assumed to contain HTML and be sanitized. */function comment_footer_die( $msg ) {	echo "<div class='wrap'><p>$msg</p></div>";	include('./admin-footer.php');	die;}switch( $action ) {case 'editcomment' :	$title = __('Edit Comment');	add_contextual_help( $current_screen, '<p>' . __( 'You can edit the information left in a comment if needed. This is often useful when you notice that a commenter has made a typographical error.' ) . '</p>' .	'<p>' . __( 'You can also moderate the comment from this screen using the Status box, where you can also change the timestamp of the comment.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Administration_Panels#Comments" target="_blank">Comments Documentation</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank" >Support Forums</a>' ) . '</p>'	);	wp_enqueue_script('comment');	require_once('./admin-header.php');	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment( $comment_id ) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'javascript:history.go(-1)') );	if ( !current_user_can('edit_post', $comment->comment_post_ID) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( 'trash' == $comment->comment_approved )		comment_footer_die( __('This comment is in the Trash. Please move it out of the Trash if you want to edit it.') );	$comment = get_comment_to_edit( $comment_id );	include('./edit-form-comment.php');	break;case 'delete'  :case 'approve' :case 'trash'   :case 'spam'    :	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment_to_edit( $comment_id ) ) {		wp_redirect( admin_url('edit-comments.php?error=1') );		die();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) ) {		wp_redirect( admin_url('edit-comments.php?error=2') );		die();	}	// No need to re-approve/re-trash/re-spam a comment.	if ( $action == str_replace( '1', 'approve', $comment->comment_approved ) ) {		wp_redirect( admin_url( 'edit-comments.php?same=' . $comment_id ) );		die(); 	}	require_once('./admin-header.php');	$formaction    = $action . 'comment';	$nonce_action  = 'approve' == $action ? 'approve-comment_' : 'delete-comment_';	$nonce_action .= $comment_id;?><div class='wrap'><div class="narrow"><?php screen_icon(); ?><h2><?php esc_html_e( 'Moderate Comment' ); ?></h2><?phpswitch ( $action ) {	case 'spam' :		$caution_msg = __('You are about to mark the following comment as spam:');		$button      = __('Spam Comment');		break;	case 'trash' :		$caution_msg = __('You are about to move the following comment to the Trash:');		$button      = __('Trash Comment');		break;	case 'delete' :		$caution_msg = __('You are about to delete the following comment:');		$button      = __('Permanently Delete Comment');		break;	default :		$caution_msg = __('You are about to approve the following comment:');		$button      = __('Approve Comment');		break;}if ( $comment->comment_approved != '0' ) { // if not unapproved	$message = '';	switch ( $comment->comment_approved ) {		case '1' :			$message = __('This comment is currently approved.');			break;		case 'spam' :			$message  = __('This comment is currently marked as spam.');			break;		case 'trash' :			$message  = __('This comment is currently in the Trash.');			break;	}	if ( $message )		echo '<div class="updated"><p>' . $message . '</p></div>';}?><p><strong><?php _e('Caution:'); ?></strong> <?php echo $caution_msg; ?></p><table class="form-table comment-ays"><tr class="alt"><th scope="row"><?php _e('Author'); ?></th><td><?php echo $comment->comment_author; ?></td></tr><?php if ( $comment->comment_author_email ) { ?><tr><th scope="row"><?php _e('E-mail'); ?></th><td><?php echo $comment->comment_author_email; ?></td></tr><?php } ?><?php if ( $comment->comment_author_url ) { ?><tr><th scope="row"><?php _e('URL'); ?></th><td><a href="<?php echo $comment->comment_author_url; ?>"><?php echo $comment->comment_author_url; ?></a></td></tr><?php } ?><tr><th scope="row" valign="top"><?php /* translators: field name in comment form */ _ex('Comment', 'noun'); ?></th><td><?php echo $comment->comment_content; ?></td></tr></table><p><?php _e('Are you sure you want to do this?'); ?></p><form action='comment.php' method='get'><table width="100%"><tr><td><a class="button" href="<?php echo admin_url('edit-comments.php'); ?>"><?php esc_attr_e('No'); ?></a></td><td class="textright"><input type='submit' class="button" value='<?php echo esc_attr($button); ?>' /></td></tr></table><?php wp_nonce_field( $nonce_action ); ?><input type='hidden' name='action' value='<?php echo esc_attr($formaction); ?>' /><input type='hidden' name='p' value='<?php echo esc_attr($comment->comment_post_ID); ?>' /><input type='hidden' name='c' value='<?php echo esc_attr($comment->comment_ID); ?>' /><input type='hidden' name='noredir' value='1' /></form></div></div><?php	break;case 'deletecomment'    :case 'trashcomment'     :case 'untrashcomment'   :case 'spamcomment'      :case 'unspamcomment'    :case 'approvecomment'   :case 'unapprovecomment' :	$comment_id = absint( $_REQUEST['c'] );	if ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		check_admin_referer( 'approve-comment_' . $comment_id );	else		check_admin_referer( 'delete-comment_' . $comment_id );	$noredir = isset($_REQUEST['noredir']);	if ( !$comment = get_comment($comment_id) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'edit-comments.php') );	if ( !current_user_can('edit_post', $comment->comment_post_ID ) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( '' != wp_get_referer() && ! $noredir && false === strpos(wp_get_referer(), 'comment.php') )		$redir = wp_get_referer();	elseif ( '' != wp_get_original_referer() && ! $noredir )		$redir = wp_get_original_referer();	elseif ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		$redir = admin_url('edit-comments.php?p=' . absint( $comment->comment_post_ID ) );	else		$redir = admin_url('edit-comments.php');	$redir = remove_query_arg( array('spammed', 'unspammed', 'trashed', 'untrashed', 'deleted', 'ids', 'approved', 'unapproved'), $redir );	switch ( $action ) {		case 'deletecomment' :			wp_delete_comment( $comment_id );			$redir = add_query_arg( array('deleted' => '1'), $redir );			break;		case 'trashcomment' :			wp_trash_comment($comment_id);			$redir = add_query_arg( array('trashed' => '1', 'ids' => $comment_id), $redir );			break;		case 'untrashcomment' :			wp_untrash_comment($comment_id);			$redir = add_query_arg( array('untrashed' => '1'), $redir );			break;		case 'spamcomment' :			wp_spam_comment($comment_id);			$redir = add_query_arg( array('spammed' => '1', 'ids' => $comment_id), $redir );			break;		case 'unspamcomment' :			wp_unspam_comment($comment_id);			$redir = add_query_arg( array('unspammed' => '1'), $redir );			break;		case 'approvecomment' :			wp_set_comment_status( $comment_id, 'approve' );			$redir = add_query_arg( array( 'approved' => 1 ), $redir );			break;		case 'unapprovecomment' :			wp_set_comment_status( $comment_id, 'hold' );			$redir = add_query_arg( array( 'unapproved' => 1 ), $redir );			break;	}	wp_redirect( $redir );	die;	break;case 'editedcomment' :	$comment_id = absint( $_POST['comment_ID'] );	$comment_post_id = absint( $_POST['comment_post_ID'] );	check_admin_referer( 'update-comment_' . $comment_id );	edit_comment();	$location = ( empty( $_POST['referredby'] ) ? "edit-comments.php?p=$comment_post_id" : $_POST['referredby'] ) . '#comment-' . $comment_id;	$location = apply_filters( 'comment_edit_redirect', $location, $comment_id );	wp_redirect( $location );	exit();	break;default:	wp_die( __('Unknown action.') );	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Navigation Menu functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Returns a navigation menu object. * * @since 3.0.0 * * @uses get_term * @uses get_term_by * * @param string $menu Menu id, slug or name * @return mixed false if $menu param isn't supplied or term does not exist, menu object if successful. */function wp_get_nav_menu_object( $menu ) {	if ( ! $menu )		return false;	$menu_obj = get_term( $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'slug', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'name', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = false;	return $menu_obj;}/** * Check if the given ID is a navigation menu. * * Returns true if it is; false otherwise. * * @since 3.0.0 * * @param int|string $menu The menu to check (id, slug, or name) * @return bool Whether the menu exists. */function is_nav_menu( $menu ) {	if ( ! $menu )		return false;	$menu_obj = wp_get_nav_menu_object( $menu );	if (		$menu_obj &&		! is_wp_error( $menu_obj ) &&		! empty( $menu_obj->taxonomy ) &&		'nav_menu' == $menu_obj->taxonomy	)		return true;	return false;}/** * Register navigation menus for a theme. * * @since 3.0.0 * * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text. */function register_nav_menus( $locations = array() ) {	global $_wp_registered_nav_menus;	add_theme_support( 'menus' );	$_wp_registered_nav_menus = array_merge( (array) $_wp_registered_nav_menus, $locations );}/** * Register a navigation menu for a theme. * * @since 3.0.0 * * @param string $location Menu location identifier, like a slug. * @param string $description Menu location descriptive text. */function register_nav_menu( $location, $description ) {	register_nav_menus( array( $location => $description ) );}/** * Returns an array of all registered navigation menus in a theme * * @since 3.0.0 * @return array */function get_registered_nav_menus() {	global $_wp_registered_nav_menus;	if ( isset( $_wp_registered_nav_menus ) )		return $_wp_registered_nav_menus;	return array();}/** * Returns an array with the registered navigation menu locations and the menu assigned to it * * @since 3.0.0 * @return array */function get_nav_menu_locations() {	return get_theme_mod( 'nav_menu_locations' );}/** * Whether a registered nav menu location has a menu assigned to it. * * @since 3.0.0 * @param string $location Menu location identifier. * @return bool Whether location has a menu. */function has_nav_menu( $location ) {	$locations = get_nav_menu_locations();	return ( ! empty( $locations[ $location ] ) );}/** * Determine whether the given ID is a nav menu item. * * @since 3.0.0 * * @param int $menu_item_id The ID of the potential nav menu item. * @return bool Whether the given ID is that of a nav menu item. */function is_nav_menu_item( $menu_item_id = 0 ) {	return ( ! is_wp_error( $menu_item_id ) && ( 'nav_menu_item' == get_post_type( $menu_item_id ) ) );}/** * Create a Navigation Menu. * * @since 3.0.0 * * @param string $menu_name Menu Name * @return mixed Menu object on success|WP_Error on failure */function wp_create_nav_menu( $menu_name ) {	return wp_update_nav_menu_object( 0, array( 'menu-name' => $menu_name ) );}/** * Delete a Navigation Menu. * * @since 3.0.0 * * @param string $menu name|id|slug * @return mixed Menu object on success|WP_Error on failure */function wp_delete_nav_menu( $menu ) {	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	$menu_objects = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( ! empty( $menu_objects ) ) {		foreach ( $menu_objects as $item ) {			wp_delete_post( $item );		}	}	$result = wp_delete_term( $menu->term_id, 'nav_menu' );	if ( $result && !is_wp_error($result) )		do_action( 'wp_delete_nav_menu', $menu->term_id );	return $result;}/** * Save the properties of a menu or create a new menu with those properties. * * @since 3.0.0 * * @param int $menu_id The ID of the menu or "0" to create a new menu. * @param array $menu_data The array of menu data. * @return int|error object The menu's ID or WP_Error object. */function wp_update_nav_menu_object( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$_menu = wp_get_nav_menu_object( $menu_id );	$args = array(		'description' => ( isset( $menu_data['description'] ) ? $menu_data['description']  : '' ),		'name'        => ( isset( $menu_data['menu-name']   ) ? $menu_data['menu-name']    : '' ),		'parent'      => ( isset( $menu_data['parent']      ) ? (int) $menu_data['parent'] : 0  ),		'slug'        => null,	);	// double-check that we're not going to have one menu take the name of another	$_possible_existing = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );	if (		$_possible_existing &&		! is_wp_error( $_possible_existing ) &&		isset( $_possible_existing->term_id ) &&		$_possible_existing->term_id != $menu_id	)		return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );	// menu doesn't already exist, so create a new menu	if ( ! $_menu || is_wp_error( $_menu ) ) {		$menu_exists = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );		if ( $menu_exists )			return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );		$_menu = wp_insert_term( $menu_data['menu-name'], 'nav_menu', $args );		if ( is_wp_error( $_menu ) )			return $_menu;		do_action( 'wp_create_nav_menu', $_menu['term_id'], $menu_data );		return (int) $_menu['term_id'];	}	if ( ! $_menu || ! isset( $_menu->term_id ) )		return 0;	$menu_id = (int) $_menu->term_id;	$update_response = wp_update_term( $menu_id, 'nav_menu', $args );	if ( is_wp_error( $update_response ) )		return $update_response;	do_action( 'wp_update_nav_menu', $menu_id, $menu_data );	return $menu_id;}/** * Save the properties of a menu item or create a new one. * * @since 3.0.0 * * @param int $menu_id The ID of the menu. Required. If "0", makes the menu item a draft orphan. * @param int $menu_item_db_id The ID of the menu item. If "0", creates a new menu item. * @param array $menu_item_data The menu item's data. * @return int The menu item's database ID or WP_Error object on failure. */function wp_update_nav_menu_item( $menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array() ) {	$menu_id = (int) $menu_id;	$menu_item_db_id = (int) $menu_item_db_id;	// make sure that we don't convert non-nav_menu_item objects into nav_menu_item objects	if ( ! empty( $menu_item_db_id ) && ! is_nav_menu_item( $menu_item_db_id ) )		return new WP_Error('update_nav_menu_item_failed', __('The given object ID is not that of a menu item.'));	$menu = wp_get_nav_menu_object( $menu_id );	if ( ( ! $menu && 0 !== $menu_id ) || is_wp_error( $menu ) )		return $menu;	$menu_items = 0 == $menu_id ? array() : (array) wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );	$count = count( $menu_items );	$defaults = array(		'menu-item-db-id' => $menu_item_db_id,		'menu-item-object-id' => 0,		'menu-item-object' => '',		'menu-item-parent-id' => 0,		'menu-item-position' => 0,		'menu-item-type' => 'custom',		'menu-item-title' => '',		'menu-item-url' => '',		'menu-item-description' => '',		'menu-item-attr-title' => '',		'menu-item-target' => '',		'menu-item-classes' => '',		'menu-item-xfn' => '',		'menu-item-status' => '',	);	$args = wp_parse_args( $menu_item_data, $defaults );	if ( 0 == $menu_id ) {		$args['menu-item-position'] = 1;	} elseif ( 0 == (int) $args['menu-item-position'] ) {		$last_item = array_pop( $menu_items );		$args['menu-item-position'] = ( $last_item && isset( $last_item->menu_order ) ) ? 1 + $last_item->menu_order : $count;	}	$original_parent = 0 < $menu_item_db_id ? get_post_field( 'post_parent', $menu_item_db_id ) : 0;	if ( 'custom' != $args['menu-item-type'] ) {		/* if non-custom menu item, then:			* use original object's URL			* blank default title to sync with original object's		*/		$args['menu-item-url'] = '';		$original_title = '';		if ( 'taxonomy' == $args['menu-item-type'] ) {			$original_parent = get_term_field( 'parent', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );			$original_title = get_term_field( 'name', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );		} elseif ( 'post_type' == $args['menu-item-type'] ) {			$original_object = get_post( $args['menu-item-object-id'] );			$original_parent = (int) $original_object->post_parent;			$original_title = $original_object->post_title;		}		if ( empty( $args['menu-item-title'] ) || $args['menu-item-title'] == $original_title ) {			$args['menu-item-title'] = '';			// hack to get wp to create a post object when too many properties are empty			if ( empty( $args['menu-item-description'] ) )				$args['menu-item-description'] = ' ';		}	}	// Populate the menu item object	$post = array(		'menu_order' => $args['menu-item-position'],		'ping_status' => 0,		'post_content' => $args['menu-item-description'],		'post_excerpt' => $args['menu-item-attr-title'],		'post_parent' => $original_parent,		'post_title' => $args['menu-item-title'],		'post_type' => 'nav_menu_item',	);	if ( 0 != $menu_id )		$post['tax_input'] = array( 'nav_menu' => array( intval( $menu->term_id ) ) );	// New menu item. Default is draft status	if ( 0 == $menu_item_db_id ) {		$post['ID'] = 0;		$post['post_status'] = 'publish' == $args['menu-item-status'] ? 'publish' : 'draft';		$menu_item_db_id = wp_insert_post( $post );	// Update existing menu item. Default is publish status	} else {		$post['ID'] = $menu_item_db_id;		$post['post_status'] = 'draft' == $args['menu-item-status'] ? 'draft' : 'publish';		wp_update_post( $post );	}	if ( 'custom' == $args['menu-item-type'] ) {		$args['menu-item-object-id'] = $menu_item_db_id;		$args['menu-item-object'] = 'custom';	}	if ( ! $menu_item_db_id || is_wp_error( $menu_item_db_id ) )		return $menu_item_db_id;	$menu_item_db_id = (int) $menu_item_db_id;	update_post_meta( $menu_item_db_id, '_menu_item_type', sanitize_key($args['menu-item-type']) );	update_post_meta( $menu_item_db_id, '_menu_item_menu_item_parent', (int) $args['menu-item-parent-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object_id', (int) $args['menu-item-object-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object', sanitize_key($args['menu-item-object']) );	update_post_meta( $menu_item_db_id, '_menu_item_target', sanitize_key($args['menu-item-target']) );	$args['menu-item-classes'] = array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-classes'] ) );	$args['menu-item-xfn'] = implode( ' ', array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-xfn'] ) ) );	update_post_meta( $menu_item_db_id, '_menu_item_classes', $args['menu-item-classes'] );	update_post_meta( $menu_item_db_id, '_menu_item_xfn', $args['menu-item-xfn'] );	update_post_meta( $menu_item_db_id, '_menu_item_url', esc_url_raw($args['menu-item-url']) );	if ( 0 == $menu_id )		update_post_meta( $menu_item_db_id, '_menu_item_orphaned', time() );	else		delete_post_meta( $menu_item_db_id, '_menu_item_orphaned' );	do_action('wp_update_nav_menu_item', $menu_id, $menu_item_db_id, $args );	return $menu_item_db_id;}/** * Returns all navigation menu objects. * * @since 3.0.0 * * @param $args array Array of arguments passed on to get_terms(). * @return array menu objects */function wp_get_nav_menus( $args = array() ) {	$defaults = array( 'hide_empty' => false, 'orderby' => 'none' );	$args = wp_parse_args( $args, $defaults );	return apply_filters( 'wp_get_nav_menus', get_terms( 'nav_menu',  $args), $args );}/** * Sort menu items by the desired key. * * @since 3.0.0 * @access private * * @param object $a The first object to compare * @param object $b The second object to compare * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b. */function _sort_nav_menu_items( $a, $b ) {	global $_menu_item_sort_prop;	if ( empty( $_menu_item_sort_prop ) )		return 0;	if ( ! isset( $a->$_menu_item_sort_prop ) || ! isset( $b->$_menu_item_sort_prop ) )		return 0;	$_a = (int) $a->$_menu_item_sort_prop;	$_b = (int) $b->$_menu_item_sort_prop;	if ( $a->$_menu_item_sort_prop == $b->$_menu_item_sort_prop )		return 0;	elseif ( $_a == $a->$_menu_item_sort_prop && $_b == $b->$_menu_item_sort_prop )		return $_a < $_b ? -1 : 1;	else		return strcmp( $a->$_menu_item_sort_prop, $b->$_menu_item_sort_prop );}/** * Returns all menu items of a navigation menu. * * @since 3.0.0 * * @param string $menu menu name, id, or slug * @param string $args * @return mixed $items array of menu items, else false. */function wp_get_nav_menu_items( $menu, $args = array() ) {	global $_wp_using_ext_object_cache;	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	static $fetched = array();	$items = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( empty( $items ) )		return $items;	$defaults = array( 'order' => 'ASC', 'orderby' => 'menu_order', 'post_type' => 'nav_menu_item',		'post_status' => 'publish', 'output' => ARRAY_A, 'output_key' => 'menu_order', 'nopaging' => true,		'update_post_term_cache' => false );	$args = wp_parse_args( $args, $defaults );	if ( count( $items ) > 1 )		$args['include'] = implode( ',', $items );	else		$args['include'] = $items[0];	$items = get_posts( $args );	if ( is_wp_error( $items ) || ! is_array( $items ) )		return false;	// Get all posts and terms at once to prime the caches	if ( empty( $fetched[$menu->term_id] ) || $_wp_using_ext_object_cache ) {		$fetched[$menu->term_id] = true;		$posts = array();		$terms = array();		foreach ( $items as $item ) {			$object_id = get_post_meta( $item->ID, '_menu_item_object_id', true );			$object    = get_post_meta( $item->ID, '_menu_item_object',    true );			$type      = get_post_meta( $item->ID, '_menu_item_type',      true );			if ( 'post_type' == $type )				$posts[$object][] = $object_id;			elseif ( 'taxonomy' == $type)				$terms[$object][] = $object_id;		}		if ( ! empty( $posts ) ) {			foreach ( array_keys($posts) as $post_type ) {				get_posts( array('post__in' => $posts[$post_type], 'post_type' => $post_type, 'nopaging' => true, 'update_post_term_cache' => false) );			}		}		unset($posts);		if ( ! empty( $terms ) ) {			foreach ( array_keys($terms) as $taxonomy ) {				get_terms($taxonomy, array('include' => $terms[$taxonomy]) );			}		}		unset($terms);	}	$items = array_map( 'wp_setup_nav_menu_item', $items );	if ( ARRAY_A == $args['output'] ) {		$GLOBALS['_menu_item_sort_prop'] = $args['output_key'];		usort($items, '_sort_nav_menu_items');		$i = 1;		foreach( $items as $k => $item ) {			$items[$k]->$args['output_key'] = $i++;		}	}	return apply_filters( 'wp_get_nav_menu_items',  $items, $menu, $args );}/** * Decorates a menu item object with the shared navigation menu item properties. * * Properties: * - db_id: 		The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist). * - object_id:		The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories. * - type:		The family of objects originally represented, such as "post_type" or "taxonomy." * - object:		The type of object originally represented, such as "category," "post", or "attachment." * - type_label:	The singular label used to describe this type of menu item. * - post_parent:	The DB ID of the original object's parent object, if any (0 otherwise). * - menu_item_parent: 	The DB ID of the nav_menu_item that is this item's menu parent, if any.  0 otherwise. * - url:		The URL to which this menu item points. * - title:		The title of this menu item. * - target: 		The target attribute of the link element for this menu item. * - attr_title:	The title attribute of the link element for this menu item. * - classes:		The array of class attribute values for the link element of this menu item. * - xfn:		The XFN relationship expressed in the link of this menu item. * - description:	The description of this menu item. * * @since 3.0.0 * * @param object $menu_item The menu item to modify. * @return object $menu_item The menu item with standard menu item properties. */function wp_setup_nav_menu_item( $menu_item ) {	if ( isset( $menu_item->post_type ) ) {		if ( 'nav_menu_item' == $menu_item->post_type ) {			$menu_item->db_id = (int) $menu_item->ID;			$menu_item->menu_item_parent = empty( $menu_item->menu_item_parent ) ? get_post_meta( $menu_item->ID, '_menu_item_menu_item_parent', true ) : $menu_item->menu_item_parent;			$menu_item->object_id = empty( $menu_item->object_id ) ? get_post_meta( $menu_item->ID, '_menu_item_object_id', true ) : $menu_item->object_id;			$menu_item->object = empty( $menu_item->object ) ? get_post_meta( $menu_item->ID, '_menu_item_object', true ) : $menu_item->object;			$menu_item->type = empty( $menu_item->type ) ? get_post_meta( $menu_item->ID, '_menu_item_type', true ) : $menu_item->type;			if ( 'post_type' == $menu_item->type ) {				$object = get_post_type_object( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$menu_item->url = get_permalink( $menu_item->object_id );				$original_object = get_post( $menu_item->object_id );				$original_title = $original_object->post_title;				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} elseif ( 'taxonomy' == $menu_item->type ) {				$object = get_taxonomy( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$term_url = get_term_link( (int) $menu_item->object_id, $menu_item->object );				$menu_item->url = !is_wp_error( $term_url ) ? $term_url : '';				$original_title = get_term_field( 'name', $menu_item->object_id, $menu_item->object, 'raw' );				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} else {				$menu_item->type_label = __('Custom');				$menu_item->title = $menu_item->post_title;				$menu_item->url = empty( $menu_item->url ) ? get_post_meta( $menu_item->ID, '_menu_item_url', true ) : $menu_item->url;			}			$menu_item->target = empty( $menu_item->target ) ? get_post_meta( $menu_item->ID, '_menu_item_target', true ) : $menu_item->target;			$menu_item->attr_title = empty( $menu_item->attr_title ) ? apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt ) : $menu_item->attr_title;			$menu_item->description = empty( $menu_item->description ) ? apply_filters( 'nav_menu_description', $menu_item->post_content ) : $menu_item->description;			$menu_item->classes = empty( $menu_item->classes ) ? (array) get_post_meta( $menu_item->ID, '_menu_item_classes', true ) : $menu_item->classes;			$menu_item->xfn = empty( $menu_item->xfn ) ? get_post_meta( $menu_item->ID, '_menu_item_xfn', true ) : $menu_item->xfn;		} else {			$menu_item->db_id = 0;			$menu_item->menu_item_parent = 0;			$menu_item->object_id = (int) $menu_item->ID;			$menu_item->type = 'post_type';			$object = get_post_type_object( $menu_item->post_type );			$menu_item->object = $object->name;			$menu_item->type_label = $object->labels->singular_name;			$menu_item->title = $menu_item->post_title;			$menu_item->url = get_permalink( $menu_item->ID );			$menu_item->target = '';			$menu_item->attr_title = apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt );			$menu_item->description = apply_filters( 'nav_menu_description', $menu_item->post_content );			$menu_item->classes = array();			$menu_item->xfn = '';		}	} elseif ( isset( $menu_item->taxonomy ) ) {		$menu_item->ID = $menu_item->term_id;		$menu_item->db_id = 0;		$menu_item->menu_item_parent = 0;		$menu_item->object_id = (int) $menu_item->term_id;		$menu_item->post_parent = (int) $menu_item->parent;		$menu_item->type = 'taxonomy';		$object = get_taxonomy( $menu_item->taxonomy );		$menu_item->object = $object->name;		$menu_item->type_label = $object->labels->singular_name;		$menu_item->title = $menu_item->name;		$menu_item->url = get_term_link( $menu_item, $menu_item->taxonomy );		$menu_item->target = '';		$menu_item->attr_title = '';		$menu_item->description = get_term_field( 'description', $menu_item->term_id, $menu_item->taxonomy );		$menu_item->classes = array();		$menu_item->xfn = '';	}	return apply_filters( 'wp_setup_nav_menu_item', $menu_item );}/** * Get the menu items associated with a particular object. * * @since 3.0.0 * * @param int $object_id The ID of the original object. * @param string $object_type The type of object, such as "taxonomy" or "post_type." * @return array The array of menu item IDs; empty array if none; */function wp_get_associated_nav_menu_items( $object_id = 0, $object_type = 'post_type' ) {	$object_id = (int) $object_id;	$menu_item_ids = array();	$query = new WP_Query;	$menu_items = $query->query(		array(			'meta_key' => '_menu_item_object_id',			'meta_value' => $object_id,			'post_status' => 'any',			'post_type' => 'nav_menu_item',			'showposts' => -1,		)	);	foreach( (array) $menu_items as $menu_item ) {		if ( isset( $menu_item->ID ) && is_nav_menu_item( $menu_item->ID ) ) {			if ( get_post_meta( $menu_item->ID, '_menu_item_type', true ) != $object_type )				continue;			$menu_item_ids[] = (int) $menu_item->ID;		}	}	return array_unique( $menu_item_ids );}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_post_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'post_type' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_tax_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'taxonomy' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Automatically add newly published page objects to menus with that as an option. * * @since 3.0.0 * @access private * * @param string $new_status The new status of the post object. * @param string $old_status The old status of the post object. * @param object $post The post object being transitioned from one status to another. * @return void */function _wp_auto_add_pages_to_menu( $new_status, $old_status, $post ) {	if ( 'publish' != $new_status || 'publish' == $old_status || 'page' != $post->post_type )		return;	if ( ! empty( $post->post_parent ) )		return;	$auto_add = get_option( 'nav_menu_options' );	if ( empty( $auto_add ) || ! is_array( $auto_add ) || ! isset( $auto_add['auto_add'] ) )		return;	$auto_add = $auto_add['auto_add'];	if ( empty( $auto_add ) || ! is_array( $auto_add ) )		return;	$args = array(		'menu-item-object-id' => $post->ID,		'menu-item-object' => $post->post_type,		'menu-item-type' => 'post_type',		'menu-item-status' => 'publish',	);	foreach ( $auto_add as $menu_id ) {		$items = wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );		if ( ! is_array( $items ) )			continue;		foreach ( $items as $item ) {			if ( $post->ID == $item->object_id )				continue 2;		}		wp_update_nav_menu_item( $menu_id, 0, $args );	}}?>
<?php/** * WordPress CRON API * * @package WordPress *//** * Schedules a hook to run only once. * * Schedules a hook which will be executed once by the WordPress actions core at * a time which you specify. The action will fire off when someone visits your * WordPress site, if the schedule time has passed. * * @since 2.1.0 * @link http://codex.wordpress.org/Function_Reference/wp_schedule_single_event * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. */function wp_schedule_single_event( $timestamp, $hook, $args = array()) {	// don't schedule a duplicate if there's already an identical event due in the next 10 minutes	$next = wp_next_scheduled($hook, $args);	if ( $next && $next <= $timestamp + 600 )		return;	$crons = _get_cron_array();	$key = md5(serialize($args));	$crons[$timestamp][$hook][$key] = array( 'schedule' => false, 'args' => $args );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Schedule a periodic event. * * Schedules a hook which will be executed by the WordPress actions core on a * specific interval, specified by you. The action will trigger when someone * visits your WordPress site, if the scheduled time has passed. * * Valid values for the recurrence are hourly, daily and twicedaily.  These can * be extended using the cron_schedules filter in wp_get_schedules(). * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure, null when complete with scheduling event. */function wp_schedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	if ( !isset( $schedules[$recurrence] ) )		return false;	$crons[$timestamp][$hook][$key] = array( 'schedule' => $recurrence, 'args' => $args, 'interval' => $schedules[$recurrence]['interval'] );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Reschedule a recurring event. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure. Null when event is rescheduled. */function wp_reschedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	$interval = 0;	// First we try to get it from the schedule	if ( 0 == $interval )		$interval = $schedules[$recurrence]['interval'];	// Now we try to get it from the saved interval in case the schedule disappears	if ( 0 == $interval )		$interval = $crons[$timestamp][$hook][$key]['interval'];	// Now we assume something is wrong and fail to schedule	if ( 0 == $interval )		return false;	$now = time();    if ( $timestamp >= $now )        $timestamp = $now + $interval;    else        $timestamp = $now + ($interval - (($now - $timestamp) % $interval));	wp_schedule_event( $timestamp, $recurrence, $hook, $args );}/** * Unschedule a previously scheduled cron job. * * The $timestamp and $hook parameters are required, so that the event can be * identified. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Arguments to pass to the hook's callback function. * Although not passed to a callback function, these arguments are used * to uniquely identify the scheduled event, so they should be the same * as those used when originally scheduling the event. */function wp_unschedule_event( $timestamp, $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	unset( $crons[$timestamp][$hook][$key] );	if ( empty($crons[$timestamp][$hook]) )		unset( $crons[$timestamp][$hook] );	if ( empty($crons[$timestamp]) )		unset( $crons[$timestamp] );	_set_cron_array( $crons );}/** * Unschedule all cron jobs attached to a specific hook. * * @since 2.1.0 * * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Optional. Arguments that were to be pass to the hook's callback function. */function wp_clear_scheduled_hook( $hook, $args = array() ) {	// Backward compatibility	// Previously this function took the arguments as discrete vars rather than an array like the rest of the API	if ( !is_array($args) ) {		_deprecated_argument( __FUNCTION__, '3.0.0', __('This argument has changed to an array to match the behavior of the other cron functions.') );		$args = array_slice( func_get_args(), 1 );	}	while ( $timestamp = wp_next_scheduled( $hook, $args ) )		wp_unschedule_event( $timestamp, $hook, $args );}/** * Retrieve the next timestamp for a cron event. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|int The UNIX timestamp of the next time the scheduled event will occur. */function wp_next_scheduled( $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $timestamp;	}	return false;}/** * Send request to run cron through HTTP request that doesn't halt page loading. * * @since 2.1.0 * * @return null Cron could not be spawned, because it is not needed to run. */function spawn_cron( $local_time = 0 ) {	if ( !$local_time )		$local_time = time();	if ( defined('DOING_CRON') || isset($_GET['doing_wp_cron']) )		return;	/*	 * do not even start the cron if local server timer has drifted	 * such as due to power failure, or misconfiguration	 */	$timer_accurate = check_server_timer( $local_time );	if ( !$timer_accurate )		return;	/*	* multiple processes on multiple web servers can run this code concurrently	* try to make this as atomic as possible by setting doing_cron switch	*/	$flag = get_transient('doing_cron');	if ( $flag > $local_time + 10*60 )		$flag = 0;	// don't run if another process is currently running it or more than once every 60 sec.	if ( $flag + 60 > $local_time )		return;	//sanity check	$crons = _get_cron_array();	if ( !is_array($crons) )		return;	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	if ( defined('ALTERNATE_WP_CRON') && ALTERNATE_WP_CRON ) {		if ( !empty($_POST) || defined('DOING_AJAX') )			return;		set_transient( 'doing_cron', $local_time );		ob_start();		wp_redirect( add_query_arg('doing_wp_cron', '', stripslashes($_SERVER['REQUEST_URI'])) );		echo ' ';		// flush any buffers and send the headers		while ( @ob_end_flush() );		flush();		WP_DEBUG ? include_once( ABSPATH . 'wp-cron.php' ) : @include_once( ABSPATH . 'wp-cron.php' );		return;	}	set_transient( 'doing_cron', $local_time );	$cron_url = get_option( 'siteurl' ) . '/wp-cron.php?doing_wp_cron';	wp_remote_post( $cron_url, array('timeout' => 0.01, 'blocking' => false, 'sslverify' => apply_filters('https_local_ssl_verify', true)) );}/** * Run scheduled callbacks or spawn cron for all scheduled events. * * @since 2.1.0 * * @return null When doesn't need to run Cron. */function wp_cron() {	// Prevent infinite loops caused by lack of wp-cron.php	if ( strpos($_SERVER['REQUEST_URI'], '/wp-cron.php') !== false || ( defined('DISABLE_WP_CRON') && DISABLE_WP_CRON ) )		return;	if ( false === $crons = _get_cron_array() )		return;	$local_time = time();	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	$schedules = wp_get_schedules();	foreach ( $crons as $timestamp => $cronhooks ) {		if ( $timestamp > $local_time ) break;		foreach ( (array) $cronhooks as $hook => $args ) {			if ( isset($schedules[$hook]['callback']) && !call_user_func( $schedules[$hook]['callback'] ) )				continue;			spawn_cron( $local_time );			break 2;		}	}}/** * Retrieve supported and filtered Cron recurrences. * * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by * hooking into the 'cron_schedules' filter. The filter accepts an array of * arrays. The outer array has a key that is the name of the schedule or for * example 'weekly'. The value is an array with two keys, one is 'interval' and * the other is 'display'. * * The 'interval' is a number in seconds of when the cron job should run. So for * 'hourly', the time is 3600 or 60*60. For weekly, the value would be * 60*60*24*7 or 604800. The value of 'interval' would then be 604800. * * The 'display' is the description. For the 'weekly' key, the 'display' would * be <code>__('Once Weekly')</code>. * * For your plugin, you will be passed an array. you can easily add your * schedule by doing the following. * <code> * // filter parameter variable name is 'array' *	$array['weekly'] = array( *		'interval' => 604800, *		'display' => __('Once Weekly') *	); * </code> * * @since 2.1.0 * * @return array */function wp_get_schedules() {	$schedules = array(		'hourly' => array( 'interval' => 3600, 'display' => __('Once Hourly') ),		'twicedaily' => array( 'interval' => 43200, 'display' => __('Twice Daily') ),		'daily' => array( 'interval' => 86400, 'display' => __('Once Daily') ),	);	return array_merge( apply_filters( 'cron_schedules', array() ), $schedules );}/** * Retrieve Cron schedule for hook with arguments. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return string|bool False, if no schedule. Schedule on success. */function wp_get_schedule($hook, $args = array()) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $cron[$hook][$key]['schedule'];	}	return false;}//// Private functions///** * Retrieve cron info array option. * * @since 2.1.0 * @access private * * @return array CRON info array. */function _get_cron_array()  {	$cron = get_option('cron');	if ( ! is_array($cron) )		return false;	if ( !isset($cron['version']) )		$cron = _upgrade_cron_array($cron);	unset($cron['version']);	return $cron;}/** * Updates the CRON option with the new CRON array. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. */function _set_cron_array($cron) {	$cron['version'] = 2;	update_option( 'cron', $cron );}/** * Upgrade a Cron info array. * * This function upgrades the Cron info array to version 2. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. * @return array An upgraded Cron info array. */function _upgrade_cron_array($cron) {	if ( isset($cron['version']) && 2 == $cron['version'])		return $cron;	$new_cron = array();	foreach ( (array) $cron as $timestamp => $hooks) {		foreach ( (array) $hooks as $hook => $args ) {			$key = md5(serialize($args['args']));			$new_cron[$timestamp][$hook][$key] = $args;		}	}	$new_cron['version'] = 2;	update_option( 'cron', $new_cron );	return $new_cron;}// stub for checking server timer accuracy, using outside standard time sourcesfunction check_server_timer( $local_time ) {	return true;}
<?php/** * WordPress scripts and styles default loader. * * Most of the functionality that existed here was moved to * {@link http://backpress.automattic.com/ BackPress}. WordPress themes and * plugins will only be concerned about the filters and actions set in this * file. * * Several constants are used to manage the loading, concatenating and compression of scripts and CSS: * define('SCRIPT_DEBUG', true); loads the development (non-minified) versions of all scripts and CSS, and disables compression and concatenation, * define('CONCATENATE_SCRIPTS', false); disables compression and concatenation of scripts and CSS, * define('COMPRESS_SCRIPTS', false); disables compression of scripts, * define('COMPRESS_CSS', false); disables compression of CSS, * define('ENFORCE_GZIP', true); forces gzip for compression (default is deflate). * * The globals $concatenate_scripts, $compress_scripts and $compress_css can be set by plugins * to temporarily override the above settings. Also a compression test is run once and the result is saved * as option 'can_compress_scripts' (0/1). The test will run again if that option is deleted. * * @package WordPress *//** BackPress: WordPress Dependencies Class */require( ABSPATH . WPINC . '/class.wp-dependencies.php' );/** BackPress: WordPress Scripts Class */require( ABSPATH . WPINC . '/class.wp-scripts.php' );/** BackPress: WordPress Scripts Functions */require( ABSPATH . WPINC . '/functions.wp-scripts.php' );/** BackPress: WordPress Styles Class */require( ABSPATH . WPINC . '/class.wp-styles.php' );/** BackPress: WordPress Styles Functions */require( ABSPATH . WPINC . '/functions.wp-styles.php' );/** * Set up WordPress scripts to load by default for Administration Panels. * * Localizes a few of the scripts. * $scripts->add_data( 'script-handle', 'group', 1 ); queues the script for the footer * * @since 2.6.0 * * @param object $scripts WP_Scripts object. */function wp_default_scripts( &$scripts ) {	if ( !$guessurl = site_url() )		$guessurl = wp_guess_url();	$scripts->base_url = $guessurl;	$scripts->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$scripts->default_version = get_bloginfo( 'version' );	$scripts->default_dirs = array('/wp-admin/js/', '/wp-includes/js/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$scripts->add( 'utils', "/wp-admin/js/utils$suffix.js", false, '20090102' );	$scripts->add( 'common', "/wp-admin/js/common$suffix.js", array('jquery', 'hoverIntent', 'utils'), '20100531' );	$scripts->add_data( 'common', 'group', 1 );	$scripts->localize( 'common', 'commonL10n', array(		'warnDelete' => __("You are about to permanently delete the selected items.\n  'Cancel' to stop, 'OK' to delete."),		'l10n_print_after' => 'try{convertEntities(commonL10n);}catch(e){};'	) );	$scripts->add( 'sack', "/wp-includes/js/tw-sack$suffix.js", false, '1.6.1' );	$scripts->add_data( 'sack', 'group', 1 );	$scripts->add( 'quicktags', "/wp-includes/js/quicktags$suffix.js", false, '20090307' );	$scripts->localize( 'quicktags', 'quicktagsL10n', array(		'quickLinks' => __('(Quick Links)'),		'wordLookup' => __('Enter a word to look up:'),		'dictionaryLookup' => esc_attr(__('Dictionary lookup')),		'lookup' => esc_attr(__('lookup')),		'closeAllOpenTags' => esc_attr(__('Close all open tags')),		'closeTags' => esc_attr(__('close tags')),		'enterURL' => __('Enter the URL'),		'enterImageURL' => __('Enter the URL of the image'),		'enterImageDescription' => __('Enter a description of the image'),		'l10n_print_after' => 'try{convertEntities(quicktagsL10n);}catch(e){};'	) );	$scripts->add( 'colorpicker', "/wp-includes/js/colorpicker$suffix.js", array('prototype'), '3517m' );	$scripts->add( 'editor', "/wp-admin/js/editor$suffix.js", false, '20091124' );	$scripts->add( 'prototype', '/wp-includes/js/prototype.js', false, '1.6.1');	$scripts->add( 'wp-ajax-response', "/wp-includes/js/wp-ajax-response$suffix.js", array('jquery'), '20091119' );	$scripts->add_data( 'wp-ajax-response', 'group', 1 );	$scripts->localize( 'wp-ajax-response', 'wpAjax', array(		'noPerm' => __('You do not have permission to do that.'),		'broken' => __('An unidentified error has occurred.'),		'l10n_print_after' => 'try{convertEntities(wpAjax);}catch(e){};'	) );	$scripts->add( 'autosave', "/wp-includes/js/autosave$suffix.js", array('schedule', 'wp-ajax-response'), '20100410' );	$scripts->add_data( 'autosave', 'group', 1 );	$scripts->add( 'wp-lists', "/wp-includes/js/wp-lists$suffix.js", array('wp-ajax-response'), '20091128' );	$scripts->add_data( 'wp-lists', 'group', 1 );	$scripts->add( 'scriptaculous-root', '/wp-includes/js/scriptaculous/wp-scriptaculous.js', array('prototype'), '1.8.3');	$scripts->add( 'scriptaculous-builder', '/wp-includes/js/scriptaculous/builder.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-dragdrop', '/wp-includes/js/scriptaculous/dragdrop.js', array('scriptaculous-builder', 'scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-effects', '/wp-includes/js/scriptaculous/effects.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-slider', '/wp-includes/js/scriptaculous/slider.js', array('scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-sound', '/wp-includes/js/scriptaculous/sound.js', array( 'scriptaculous-root' ), '1.8.3' );	$scripts->add( 'scriptaculous-controls', '/wp-includes/js/scriptaculous/controls.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous', '', array('scriptaculous-dragdrop', 'scriptaculous-slider', 'scriptaculous-controls'), '1.8.3');	// not used in core, replaced by Jcrop.js	$scripts->add( 'cropper', '/wp-includes/js/crop/cropper.js', array('scriptaculous-dragdrop'), '20070118');	$scripts->add( 'jquery', '/wp-includes/js/jquery/jquery.js', false, '1.4.2');	$scripts->add( 'jquery-ui-core', '/wp-includes/js/jquery/ui.core.js', array('jquery'), '1.7.3' );	$scripts->add_data( 'jquery-ui-core', 'group', 1 );	$scripts->add( 'jquery-ui-tabs', '/wp-includes/js/jquery/ui.tabs.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-tabs', 'group', 1 );	$scripts->add( 'jquery-ui-sortable', '/wp-includes/js/jquery/ui.sortable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-sortable', 'group', 1 );	$scripts->add( 'jquery-ui-draggable', '/wp-includes/js/jquery/ui.draggable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-draggable', 'group', 1 );	$scripts->add( 'jquery-ui-droppable', '/wp-includes/js/jquery/ui.droppable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-droppable', 'group', 1 );	$scripts->add( 'jquery-ui-selectable', '/wp-includes/js/jquery/ui.selectable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-selectable', 'group', 1 );	$scripts->add( 'jquery-ui-resizable', '/wp-includes/js/jquery/ui.resizable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-resizable', 'group', 1 );	$scripts->add( 'jquery-ui-dialog', '/wp-includes/js/jquery/ui.dialog.js', array('jquery-ui-resizable', 'jquery-ui-draggable'), '1.7.3' );	$scripts->add_data( 'jquery-ui-dialog', 'group', 1 );	// deprecated, not used in core, most functionality is included in jQuery 1.3	$scripts->add( 'jquery-form', "/wp-includes/js/jquery/jquery.form$suffix.js", array('jquery'), '2.02m');	$scripts->add_data( 'jquery-form', 'group', 1 );	$scripts->add( 'jquery-color', "/wp-includes/js/jquery/jquery.color$suffix.js", array('jquery'), '2.0-4561m');	$scripts->add_data( 'jquery-color', 'group', 1 );	$scripts->add( 'suggest', "/wp-includes/js/jquery/suggest$suffix.js", array('jquery'), '1.1-20090125');	$scripts->add_data( 'suggest', 'group', 1 );	$scripts->add( 'schedule', '/wp-includes/js/jquery/jquery.schedule.js', array('jquery'), '20m');	$scripts->add_data( 'schedule', 'group', 1 );	$scripts->add( 'jquery-hotkeys', "/wp-includes/js/jquery/jquery.hotkeys$suffix.js", array('jquery'), '0.0.2m' );	$scripts->add_data( 'jquery-hotkeys', 'group', 1 );	$scripts->add( 'jquery-table-hotkeys', "/wp-includes/js/jquery/jquery.table-hotkeys$suffix.js", array('jquery', 'jquery-hotkeys'), '20090102' );	$scripts->add_data( 'jquery-table-hotkeys', 'group', 1 );	$scripts->add( 'thickbox', "/wp-includes/js/thickbox/thickbox.js", array('jquery'), '3.1-20100407');	$scripts->add_data( 'thickbox', 'group', 1 );	$scripts->localize( 'thickbox', 'thickboxL10n', array(			'next' => __('Next &gt;'),			'prev' => __('&lt; Prev'),			'image' => __('Image'),			'of' => __('of'),			'close' => __('Close'),			'noiframes' => __('This feature requires inline frames. You have iframes disabled or your browser does not support them.'),			'l10n_print_after' => 'try{convertEntities(thickboxL10n);}catch(e){};'	) );	$scripts->add( 'jcrop', "/wp-includes/js/jcrop/jquery.Jcrop$suffix.js", array('jquery'), '0.9.8');	$scripts->add( 'swfobject', "/wp-includes/js/swfobject.js", false, '2.2');	$scripts->add( 'swfupload', '/wp-includes/js/swfupload/swfupload.js', false, '2201');	$scripts->add( 'swfupload-swfobject', '/wp-includes/js/swfupload/plugins/swfupload.swfobject.js', array('swfupload', 'swfobject'), '2201');	$scripts->add( 'swfupload-queue', '/wp-includes/js/swfupload/plugins/swfupload.queue.js', array('swfupload'), '2201');	$scripts->add( 'swfupload-speed', '/wp-includes/js/swfupload/plugins/swfupload.speed.js', array('swfupload'), '2201');	if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) {		// queue all SWFUpload scripts that are used by default		$scripts->add( 'swfupload-all', false, array('swfupload', 'swfupload-swfobject', 'swfupload-queue'), '2201');	} else {		$scripts->add( 'swfupload-all', '/wp-includes/js/swfupload/swfupload-all.js', array(), '2201');	}	$scripts->add( 'swfupload-handlers', "/wp-includes/js/swfupload/handlers$suffix.js", array('swfupload-all', 'jquery'), '2201-20100523');	$max_upload_size = ( (int) ( $max_up = @ini_get('upload_max_filesize') ) < (int) ( $max_post = @ini_get('post_max_size') ) ) ? $max_up : $max_post;	if ( empty($max_upload_size) )		$max_upload_size = __('not configured');	// these error messages came from the sample swfupload js, they might need changing.	$scripts->localize( 'swfupload-handlers', 'swfuploadL10n', array(			'queue_limit_exceeded' => __('You have attempted to queue too many files.'),			'file_exceeds_size_limit' => __('This file exceeds the maximum upload size for this site.'),			'zero_byte_file' => __('This file is empty. Please try another.'),			'invalid_filetype' => __('This file type is not allowed. Please try another.'),			'default_error' => __('An error occurred in the upload. Please try again later.'),			'missing_upload_url' => __('There was a configuration error. Please contact the server administrator.'),			'upload_limit_exceeded' => __('You may only upload 1 file.'),			'http_error' => __('HTTP error.'),			'upload_failed' => __('Upload failed.'),			'io_error' => __('IO error.'),			'security_error' => __('Security error.'),			'file_cancelled' => __('File canceled.'),			'upload_stopped' => __('Upload stopped.'),			'dismiss' => __('Dismiss'),			'crunching' => __('Crunching&hellip;'),			'deleted' => __('moved to the trash.'),			'l10n_print_after' => 'try{convertEntities(swfuploadL10n);}catch(e){};',			'error_uploading' => __('&#8220;%s&#8221; has failed to upload due to an error')	) );	$scripts->add( 'comment-reply', "/wp-includes/js/comment-reply$suffix.js", false, '20090102');	$scripts->add( 'json2', "/wp-includes/js/json2$suffix.js", false, '20090817');	$scripts->add( 'imgareaselect', "/wp-includes/js/imgareaselect/jquery.imgareaselect$suffix.js", array('jquery'), '0.9.1' );	$scripts->add_data( 'imgareaselect', 'group', 1 );	if ( is_admin() ) {		$scripts->add( 'ajaxcat', "/wp-admin/js/cat$suffix.js", array( 'wp-lists' ), '20090102' );		$scripts->add_data( 'ajaxcat', 'group', 1 );		$scripts->localize( 'ajaxcat', 'catL10n', array(			'add' => esc_attr(__('Add')),			'how' => __('Separate multiple categories with commas.'),			'l10n_print_after' => 'try{convertEntities(catL10n);}catch(e){};'		) );		$scripts->add( 'admin-categories', "/wp-admin/js/categories$suffix.js", array('wp-lists'), '20091201' );		$scripts->add_data( 'admin-categories', 'group', 1 );		$scripts->add( 'admin-tags', "/wp-admin/js/tags$suffix.js", array('jquery', 'wp-ajax-response'), '20100213' );		$scripts->add_data( 'admin-tags', 'group', 1 );		$scripts->localize( 'admin-tags', 'tagsl10n', array(			'noPerm' => __('You do not have permission to do that.'),			'broken' => __('An unidentified error has occurred.'),			'l10n_print_after' => 'try{convertEntities(tagsl10n);}catch(e){};'		));		$scripts->add( 'admin-custom-fields', "/wp-admin/js/custom-fields$suffix.js", array('wp-lists'), '20090106' );		$scripts->add_data( 'admin-custom-fields', 'group', 1 );		$scripts->add( 'password-strength-meter', "/wp-admin/js/password-strength-meter$suffix.js", array('jquery'), '20100331' );		$scripts->add_data( 'password-strength-meter', 'group', 1 );		$scripts->localize( 'password-strength-meter', 'pwsL10n', array(			'empty' => __('Strength indicator'),			'short' => __('Very weak'),			'bad' => __('Weak'),			/* translators: password strength */			'good' => _x('Medium', 'password strength'),			'strong' => __('Strong'),			'mismatch' => __('Mismatch'),			'l10n_print_after' => 'try{convertEntities(pwsL10n);}catch(e){};'		) );		$scripts->add( 'user-profile', "/wp-admin/js/user-profile$suffix.js", array('jquery'), '20100301' );		$scripts->add_data( 'user-profile', 'group', 1 );		$scripts->add( 'admin-comments', "/wp-admin/js/edit-comments$suffix.js", array('wp-lists', 'jquery-ui-resizable', 'quicktags'), '20100418' );		$scripts->add_data( 'admin-comments', 'group', 1 );		$scripts->localize( 'admin-comments', 'adminCommentsL10n', array(			'hotkeys_highlight_first' => isset($_GET['hotkeys_highlight_first']),			'hotkeys_highlight_last' => isset($_GET['hotkeys_highlight_last'])		) );		$scripts->add( 'xfn', "/wp-admin/js/xfn$suffix.js", array('jquery'), '20100403' );		$scripts->add_data( 'xfn', 'group', 1 );		$scripts->add( 'postbox', "/wp-admin/js/postbox$suffix.js", array('jquery-ui-sortable'), '20091012' );		$scripts->add_data( 'postbox', 'group', 1 );		$scripts->add( 'post', "/wp-admin/js/post$suffix.js", array('suggest', 'wp-lists', 'postbox'), '20100526' );		$scripts->add_data( 'post', 'group', 1 );		$scripts->localize( 'post', 'postL10n', array(			'tagsUsed' =>  __('Tags used on this post:'),			'add' => esc_attr(__('Add')),			'addTag' => esc_attr(__('Add new tag')),			'separate' => __('Separate tags with commas'),			'ok' => __('OK'),			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'publishOn' => __('Publish on:'),			'publishOnFuture' =>  __('Schedule for:'),			'publishOnPast' => __('Published on:'),			'showcomm' => __('Show more comments'),			'endcomm' => __('No more comments found.'),			'publish' => __('Publish'),			'schedule' => __('Schedule'),			'updatePost' => __('Update Post'),			'updatePage' => __('Update Page'),			'savePending' => __('Save as Pending'),			'saveDraft' => __('Save Draft'),			'private' => __('Private'),			'public' => __('Public'),			'publicSticky' => __('Public, Sticky'),			'password' => __('Password Protected'),			'privatelyPublished' => __('Privately Published'),			'published' => __('Published'),			'l10n_print_after' => 'try{convertEntities(postL10n);}catch(e){};'		) );		$scripts->add( 'link', "/wp-admin/js/link$suffix.js", array('wp-lists', 'postbox'), '20090526' );		$scripts->add_data( 'link', 'group', 1 );		$scripts->add( 'comment', "/wp-admin/js/comment$suffix.js", array('jquery'), '20091202' );		$scripts->add_data( 'comment', 'group', 1 );		$scripts->localize( 'comment', 'commentL10n', array(			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'submittedOn' => __('Submitted on:'),			'l10n_print_after' => 'try{convertEntities(commentL10n);}catch(e){};'		) );		$scripts->add( 'admin-gallery', "/wp-admin/js/gallery$suffix.js", array( 'jquery-ui-sortable' ), '20090516' );		$scripts->add( 'media-upload', "/wp-admin/js/media-upload$suffix.js", array( 'thickbox' ), '20091023' );		$scripts->add_data( 'media-upload', 'group', 1 );		$scripts->add( 'admin-widgets', "/wp-admin/js/widgets$suffix.js", array( 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable' ), '20090824' );		$scripts->add_data( 'admin-widgets', 'group', 1 );		$scripts->add( 'word-count', "/wp-admin/js/word-count$suffix.js", array( 'jquery' ), '20090422' );		$scripts->add_data( 'word-count', 'group', 1 );		$scripts->localize( 'word-count', 'wordCountL10n', array(			'count' => __('Word count: %d'),			'l10n_print_after' => 'try{convertEntities(wordCountL10n);}catch(e){};'		));		$scripts->add( 'theme-preview', "/wp-admin/js/theme-preview$suffix.js", array( 'thickbox', 'jquery' ), '20100407' );		$scripts->add_data( 'theme-preview', 'group', 1 );		$scripts->add( 'inline-edit-post', "/wp-admin/js/inline-edit-post$suffix.js", array( 'jquery', 'suggest' ), '20091202' );		$scripts->add_data( 'inline-edit-post', 'group', 1 );		$scripts->localize( 'inline-edit-post', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'ntdeltitle' => __('Remove From Bulk Edit'),			'notitle' => __('(no title)'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'inline-edit-tax', "/wp-admin/js/inline-edit-tax$suffix.js", array( 'jquery' ), '20090623' );		$scripts->add_data( 'inline-edit-tax', 'group', 1 );		$scripts->localize( 'inline-edit-tax', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'plugin-install', "/wp-admin/js/plugin-install$suffix.js", array( 'jquery', 'thickbox' ), '20100407' );		$scripts->add_data( 'plugin-install', 'group', 1 );		$scripts->localize( 'plugin-install', 'plugininstallL10n', array(			'plugin_information' => __('Plugin Information:'),			'ays' => __('Are you sure you want to install this plugin?'),			'l10n_print_after' => 'try{convertEntities(plugininstallL10n);}catch(e){};'		) );		$scripts->add( 'farbtastic', '/wp-admin/js/farbtastic.js', array('jquery'), '1.2' );		$scripts->add( 'dashboard', "/wp-admin/js/dashboard$suffix.js", array( 'jquery', 'admin-comments', 'postbox' ), '20100523' );		$scripts->add_data( 'dashboard', 'group', 1 );		$scripts->add( 'hoverIntent', "/wp-includes/js/hoverIntent$suffix.js", array('jquery'), '20090102' );		$scripts->add_data( 'hoverIntent', 'group', 1 );		$scripts->add( 'list-revisions', "/wp-includes/js/wp-list-revisions$suffix.js", null, '20091223' );		$scripts->add( 'media', "/wp-admin/js/media$suffix.js", array( 'jquery-ui-draggable' ), '20100524' );		$scripts->add_data( 'media', 'group', 1 );		$scripts->add( 'image-edit', "/wp-admin/js/image-edit$suffix.js", array('jquery', 'json2', 'imgareaselect'), '20091111' );		$scripts->add_data( 'image-edit', 'group', 1 );		$scripts->add( 'set-post-thumbnail', "/wp-admin/js/set-post-thumbnail$suffix.js", array( 'jquery' ), '20100518' );		$scripts->add_data( 'set-post-thumbnail', 'group', 1 );		$scripts->localize( 'set-post-thumbnail', 'setPostThumbnailL10n', array(			'setThumbnail' => __( 'Use as featured image' ),			'saving' => __( 'Saving...' ),			'error' => __( 'Could not set that as the thumbnail image. Try a different attachment.' ),			'done' => __( 'Done' )		) );		// Navigation Menus		$scripts->add( 'nav-menu', "/wp-admin/js/nav-menu$suffix.js", false, '20100611' );		$scripts->localize( 'nav-menu', 'navMenuL10n', array(			'noResultsFound' => _x('No results found.', 'search results'),			'warnDeleteMenu' => __( "You are about to permanently delete this menu. \n 'Cancel' to stop, 'OK' to delete." ),			'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		) );		$scripts->add( 'custom-background', "/wp-admin/js/custom-background$suffix.js", array('farbtastic'), '20100531' );		$scripts->add_data( 'custom-background', 'group', 1 );	}}/** * Assign default styles to $styles object. * * Nothing is returned, because the $styles parameter is passed by reference. * Meaning that whatever object is passed will be updated without having to * reassign the variable that was passed back to the same value. This saves * memory. * * Adding default styles is not the only task, it also assigns the base_url * property, the default version, and text direction for the object. * * @since 2.6.0 * * @param object $styles */function wp_default_styles( &$styles ) {	// This checks to see if site_url() returns something and if it does not	// then it assigns $guess_url to wp_guess_url(). Strange format, but it works.	if ( ! $guessurl = site_url() )		$guessurl = wp_guess_url();	$styles->base_url = $guessurl;	$styles->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$styles->default_version = get_bloginfo( 'version' );	$styles->text_direction = function_exists( 'is_rtl' ) && is_rtl() ? 'rtl' : 'ltr';	$styles->default_dirs = array('/wp-admin/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$rtl_styles = array( 'wp-admin', 'global', 'colors', 'colors-fresh', 'colors-classic', 'dashboard', 'ie', 'install', 'login', 'media', 'theme-editor', 'upload', 'widgets', 'press-this', 'plugin-install', 'nav-menu', 'farbtastic' );	// Any rtl stylesheets that don't have a .dev version for ltr	$no_suffix = array( 'farbtastic' );	$styles->add( 'wp-admin', "/wp-admin/css/wp-admin$suffix.css", array(), '20100614' );	$styles->add( 'ie', "/wp-admin/css/ie$suffix.css", array(), '20100610' );	$styles->add_data( 'ie', 'conditional', 'lte IE 7' );	// all colors stylesheets need to have the same query strings (cache manifest compat)	$colors_version = '20100610';	// Register "meta" stylesheet for admin colors. All colors-* style sheets should have the same version string.	$styles->add( 'colors', true, array(), $colors_version );	// do not refer to these directly, the right one is queued by the above "meta" colors handle	$styles->add( 'colors-fresh', "/wp-admin/css/colors-fresh$suffix.css", array(), $colors_version );	$styles->add( 'colors-classic', "/wp-admin/css/colors-classic$suffix.css", array(), $colors_version );	$styles->add( 'ms', "/wp-admin/css/ms$suffix.css", array(), '20100528' );	$styles->add( 'global', "/wp-admin/css/global$suffix.css", array(), '20100108' );	$styles->add( 'media', "/wp-admin/css/media$suffix.css", array(), '20100519' );	$styles->add( 'widgets', "/wp-admin/css/widgets$suffix.css", array(), '20100610' );	$styles->add( 'dashboard', "/wp-admin/css/dashboard$suffix.css", array(), '20100424' );	$styles->add( 'install', "/wp-admin/css/install$suffix.css", array(), '20100605' ); // Readme as well	$styles->add( 'theme-editor', "/wp-admin/css/theme-editor$suffix.css", array(), '20100514' );	$styles->add( 'press-this', "/wp-admin/css/press-this$suffix.css", array(), '20100424' );	$styles->add( 'thickbox', '/wp-includes/js/thickbox/thickbox.css', array(), '20090514' );	$styles->add( 'login', "/wp-admin/css/login$suffix.css", array(), '20100601' );	$styles->add( 'plugin-install', "/wp-admin/css/plugin-install$suffix.css", array(), '20100402' );	$styles->add( 'theme-install', "/wp-admin/css/theme-install$suffix.css", array(), '20100523' );	$styles->add( 'farbtastic', '/wp-admin/css/farbtastic.css', array(), '1.2' );	$styles->add( 'jcrop', '/wp-includes/js/jcrop/jquery.Jcrop.css', array(), '0.9.8' );	$styles->add( 'imgareaselect', '/wp-includes/js/imgareaselect/imgareaselect.css', array(), '0.9.1' );	$styles->add( 'nav-menu', "/wp-admin/css/nav-menu$suffix.css", array(), '20100611' );	foreach ( $rtl_styles as $rtl_style ) {		$styles->add_data( $rtl_style, 'rtl', true );		if ( $suffix && ! in_array( $rtl_style, $no_suffix ) )			$styles->add_data( $rtl_style, 'suffix', $suffix );	}}/** * Reorder JavaScript scripts array to place prototype before jQuery. * * @since 2.3.1 * * @param array $js_array JavaScript scripst array * @return array Reordered array, if needed. */function wp_prototype_before_jquery( $js_array ) {	if ( false === $jquery = array_search( 'jquery', $js_array, true ) )		return $js_array;	if ( false === $prototype = array_search( 'prototype', $js_array, true ) )		return $js_array;	if ( $prototype < $jquery )		return $js_array;	unset($js_array[$prototype]);	array_splice( $js_array, $jquery, 0, 'prototype' );	return $js_array;}/** * Load localized data on print rather than initialization. * * These localizations require information that may not be loaded even by init. * * @since 2.5.0 */function wp_just_in_time_script_localization() {	wp_localize_script( 'autosave', 'autosaveL10n', array(		'autosaveInterval' => AUTOSAVE_INTERVAL,		'previewPageText' => __('Preview this Page'),		'previewPostText' => __('Preview this Post'),		'requestFile' => admin_url('admin-ajax.php'),		'savingText' => __('Saving Draft&#8230;'),		'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		'l10n_print_after' => 'try{convertEntities(autosaveL10n);}catch(e){};'	) );}/** * Administration Panel CSS for changing the styles. * * If installing the 'wp-admin/' directory will be replaced with './'. * * The $_wp_admin_css_colors global manages the Administration Panels CSS * stylesheet that is loaded. The option that is set is 'admin_color' and is the * color and key for the array. The value for the color key is an object with * a 'url' parameter that has the URL path to the CSS file. * * The query from $src parameter will be appended to the URL that is given from * the $_wp_admin_css_colors array value URL. * * @since 2.6.0 * @uses $_wp_admin_css_colors * * @param string $src Source URL. * @param string $handle Either 'colors' or 'colors-rtl'. * @return string URL path to CSS stylesheet for Administration Panels. */function wp_style_loader_src( $src, $handle ) {	if ( defined('WP_INSTALLING') )		return preg_replace( '#^wp-admin/#', './', $src );	if ( 'colors' == $handle || 'colors-rtl' == $handle ) {		global $_wp_admin_css_colors;		$color = get_user_option('admin_color');		if ( empty($color) || !isset($_wp_admin_css_colors[$color]) )			$color = 'fresh';		$color = $_wp_admin_css_colors[$color];		$parsed = parse_url( $src );		$url = $color->url;		if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG )			$url = preg_replace('/.css$|.css(?=\?)/', '.dev.css', $url);		if ( isset($parsed['query']) && $parsed['query'] ) {			wp_parse_str( $parsed['query'], $qv );			$url = add_query_arg( $qv, $url );		}		return $url;	}	return $src;}/** * Prints the script queue in the HTML head on admin pages. * * Postpones the scripts that were queued for the footer. * print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 * @see wp_print_scripts() */function print_head_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_head_items();	if ( apply_filters('print_head_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}/** * Prints the scripts that were queued for the footer on admin pages. * * @since 2.8 */function print_footer_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_footer_scripts') )		do_action('wp_print_footer_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // No need to run if not instantiated.	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_footer_items();	if ( apply_filters('print_footer_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}function _print_scripts() {	global $wp_scripts, $compress_scripts;	$zip = $compress_scripts ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	if ( !empty($wp_scripts->concat) ) {		if ( !empty($wp_scripts->print_code) ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $wp_scripts->print_code;			echo "/* ]]> */\n";			echo "</script>\n";		}		$ver = md5("$wp_scripts->concat_version");		$src = $wp_scripts->base_url . "/wp-admin/load-scripts.php?c={$zip}&load=" . trim($wp_scripts->concat, ', ') . "&ver=$ver";		echo "<script type='text/javascript' src='" . esc_attr($src) . "'></script>\n";	}	if ( !empty($wp_scripts->print_html) )		echo $wp_scripts->print_html;}/** * Prints the script queue in the HTML head on the front end. * * Postpones the scripts that were queued for the footer. * wp_print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 */function wp_print_head_scripts() {	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // no need to run if nothing is queued	return print_head_scripts();}/** * Prints the scripts that were queued for the footer on the front end. * * @since 2.8 */function wp_print_footer_scripts() {	return print_footer_scripts();}/** * Wrapper for do_action('wp_enqueue_scripts') * * Allows plugins to queue scripts for the front end using wp_enqueue_script(). * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available. * * @since 2.8 */function wp_enqueue_scripts() {	do_action('wp_enqueue_scripts');}function print_admin_styles() {	global $wp_styles, $concatenate_scripts, $compress_css;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	script_concat_settings();	$wp_styles->do_concat = $concatenate_scripts;	$zip = $compress_css ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	$wp_styles->do_items(false);	if ( apply_filters('print_admin_styles', true) ) {		if ( !empty($wp_styles->concat) ) {			$dir = $wp_styles->text_direction;			$ver = md5("$wp_styles->concat_version{$dir}");			$href = $wp_styles->base_url . "/wp-admin/load-styles.php?c={$zip}&dir={$dir}&load=" . trim($wp_styles->concat, ', ') . "&ver=$ver";			echo "<link rel='stylesheet' href='" . esc_attr($href) . "' type='text/css' media='all' />\n";		}		if ( !empty($wp_styles->print_html) )			echo $wp_styles->print_html;	}	$wp_styles->do_concat = false;	$wp_styles->concat = $wp_styles->concat_version = $wp_styles->print_html = '';	return $wp_styles->done;}function script_concat_settings() {	global $concatenate_scripts, $compress_scripts, $compress_css;	$compressed_output = ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') );	if ( ! isset($concatenate_scripts) ) {		$concatenate_scripts = defined('CONCATENATE_SCRIPTS') ? CONCATENATE_SCRIPTS : true;		if ( ! is_admin() || ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) )			$concatenate_scripts = false;	}	if ( ! isset($compress_scripts) ) {		$compress_scripts = defined('COMPRESS_SCRIPTS') ? COMPRESS_SCRIPTS : true;		if ( $compress_scripts && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_scripts = false;	}	if ( ! isset($compress_css) ) {		$compress_css = defined('COMPRESS_CSS') ? COMPRESS_CSS : true;		if ( $compress_css && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_css = false;	}}add_action( 'wp_default_scripts', 'wp_default_scripts' );add_filter( 'wp_print_scripts', 'wp_just_in_time_script_localization' );add_filter( 'print_scripts_array', 'wp_prototype_before_jquery' );add_action( 'wp_default_styles', 'wp_default_styles' );add_filter( 'style_loader_src', 'wp_style_loader_src', 10, 2 );
<?php/** * WordPress Category API * * @package WordPress *//** * Retrieves all category IDs. * * @since 2.0.0 * @link http://codex.wordpress.org/Function_Reference/get_all_category_ids * * @return object List of all of the category IDs. */function get_all_category_ids() {	if ( ! $cat_ids = wp_cache_get( 'all_category_ids', 'category' ) ) {		$cat_ids = get_terms( 'category', array('fields' => 'ids', 'get' => 'all') );		wp_cache_add( 'all_category_ids', $cat_ids, 'category' );	}	return $cat_ids;}/** * Retrieve list of category objects. * * If you change the type to 'link' in the arguments, then the link categories * will be returned instead. Also all categories will be updated to be backwards * compatible with pre-2.3 plugins and themes. * * @since 2.1.0 * @see get_terms() Type of arguments that can be changed. * @link http://codex.wordpress.org/Function_Reference/get_categories * * @param string|array $args Optional. Change the defaults retrieving categories. * @return array List of categories. */function &get_categories( $args = '' ) {	$defaults = array( 'taxonomy' => 'category' );	$args = wp_parse_args( $args, $defaults );	$taxonomy = apply_filters( 'get_categories_taxonomy', $args['taxonomy'], $args );	// Back compat	if ( isset($args['type']) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$taxonomy = $args['taxonomy'] = 'link_category';	}	$categories = (array) get_terms( $taxonomy, $args );	foreach ( array_keys( $categories ) as $k )		_make_cat_compat( $categories[$k] );	return $categories;}/** * Retrieves category data given a category ID or category object. * * If you pass the $category parameter an object, which is assumed to be the * category row object retrieved the database. It will cache the category data. * * If you pass $category an integer of the category ID, then that category will * be retrieved from the database, if it isn't already cached, and pass it back. * * If you look at get_term(), then both types will be passed through several * filters and finally sanitized based on the $filter parameter value. * * The category will converted to maintain backwards compatibility. * * @since 1.5.1 * @uses get_term() Used to get the category data from the taxonomy. * * @param int|object $category Category ID or Category row object * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional. Default is raw or no WordPress defined filter will applied. * @return mixed Category data in type defined by $output parameter. */function &get_category( $category, $output = OBJECT, $filter = 'raw' ) {	$category = get_term( $category, 'category', $output, $filter );	if ( is_wp_error( $category ) )		return $category;	_make_cat_compat( $category );	return $category;}/** * Retrieve category based on URL containing the category slug. * * Breaks the $category_path parameter up to get the category slug. * * Tries to find the child path and will return it. If it doesn't find a * match, then it will return the first category matching slug, if $full_match, * is set to false. If it does not, then it will return null. * * It is also possible that it will return a WP_Error object on failure. Check * for it when using this function. * * @since 2.1.0 * * @param string $category_path URL containing category slugs. * @param bool $full_match Optional. Whether full path should be matched. * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @return null|object|array Null on failure. Type is based on $output value. */function get_category_by_path( $category_path, $full_match = true, $output = OBJECT ) {	$category_path = rawurlencode( urldecode( $category_path ) );	$category_path = str_replace( '%2F', '/', $category_path );	$category_path = str_replace( '%20', ' ', $category_path );	$category_paths = '/' . trim( $category_path, '/' );	$leaf_path  = sanitize_title( basename( $category_paths ) );	$category_paths = explode( '/', $category_paths );	$full_path = '';	foreach ( (array) $category_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title( $pathdir );	$categories = get_terms( 'category', array('get' => 'all', 'slug' => $leaf_path) );	if ( empty( $categories ) )		return null;	foreach ( $categories as $category ) {		$path = '/' . $leaf_path;		$curcategory = $category;		while ( ( $curcategory->parent != 0 ) && ( $curcategory->parent != $curcategory->term_id ) ) {			$curcategory = get_term( $curcategory->parent, 'category' );			if ( is_wp_error( $curcategory ) )				return $curcategory;			$path = '/' . $curcategory->slug . $path;		}		if ( $path == $full_path )			return get_category( $category->term_id, $output );	}	// If full matching is not required, return the first cat that matches the leaf.	if ( ! $full_match )		return get_category( $categories[0]->term_id, $output );	return null;}/** * Retrieve category object by category slug. * * @since 2.3.0 * * @param string $slug The category slug. * @return object Category data object */function get_category_by_slug( $slug  ) {	$category = get_term_by( 'slug', $slug, 'category' );	if ( $category )		_make_cat_compat( $category );	return $category;}/** * Retrieve the ID of a category from its name. * * @since 1.0.0 * * @param string $cat_name Optional. Default is 'General' and can be any category name. * @return int 0, if failure and ID of category on success. */function get_cat_ID( $cat_name='General' ) {	$cat = get_term_by( 'name', $cat_name, 'category' );	if ( $cat )		return $cat->term_id;	return 0;}/** * Retrieve the name of a category from its ID. * * @since 1.0.0 * * @param int $cat_id Category ID * @return string Category name, or an empty string if category doesn't exist. */function get_cat_name( $cat_id ) {	$cat_id = (int) $cat_id;	$category = &get_category( $cat_id );	if ( ! $category || is_wp_error( $category ) )		return '';	return $category->name;}/** * Check if a category is an ancestor of another category. * * You can use either an id or the category object for both parameters. If you * use an integer the category will be retrieved. * * @since 2.1.0 * * @param int|object $cat1 ID or object to check if this is the parent category. * @param int|object $cat2 The child category. * @return bool Whether $cat2 is child of $cat1 */function cat_is_ancestor_of( $cat1, $cat2 ) {	if ( ! isset($cat1->term_id) )		$cat1 = &get_category( $cat1 );	if ( ! isset($cat2->parent) )		$cat2 = &get_category( $cat2 );	if ( empty($cat1->term_id) || empty($cat2->parent) )		return false;	if ( $cat2->parent == $cat1->term_id )		return true;	return cat_is_ancestor_of( $cat1, get_category( $cat2->parent ) );}/** * Sanitizes category data based on context. * * @since 2.3.0 * @uses sanitize_term() See this function for what context are supported. * * @param object|array $category Category data * @param string $context Optional. Default is 'display'. * @return object|array Same type as $category with sanitized data for safe use. */function sanitize_category( $category, $context = 'display' ) {	return sanitize_term( $category, 'category', $context );}/** * Sanitizes data in single category key field. * * @since 2.3.0 * @uses sanitize_term_field() See function for more details. * * @param string $field Category key to sanitize * @param mixed $value Category value to sanitize * @param int $cat_id Category ID * @param string $context What filter to use, 'raw', 'display', etc. * @return mixed Same type as $value after $value has been sanitized. */function sanitize_category_field( $field, $value, $cat_id, $context ) {	return sanitize_term_field( $field, $value, $cat_id, 'category', $context );}/* Tags *//** * Retrieves all post tags. * * @since 2.3.0 * @see get_terms() For list of arguments to pass. * @uses apply_filters() Calls 'get_tags' hook on array of tags and with $args. * * @param string|array $args Tag arguments to use when retrieving tags. * @return array List of tags. */function &get_tags( $args = '' ) {	$tags = get_terms( 'post_tag', $args );	if ( empty( $tags ) ) {		$return = array();		return $return;	}	$tags = apply_filters( 'get_tags', $tags, $args );	return $tags;}/** * Retrieve post tag by tag ID or tag object. * * If you pass the $tag parameter an object, which is assumed to be the tag row * object retrieved the database. It will cache the tag data. * * If you pass $tag an integer of the tag ID, then that tag will * be retrieved from the database, if it isn't already cached, and pass it back. * * If you look at get_term(), then both types will be passed through several * filters and finally sanitized based on the $filter parameter value. * * @since 2.3.0 * * @param int|object $tag * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional. Default is raw or no WordPress defined filter will applied. * @return object|array Return type based on $output value. */function &get_tag( $tag, $output = OBJECT, $filter = 'raw' ) {	return get_term( $tag, 'post_tag', $output, $filter );}/* Cache *//** * Update the categories cache. * * This function does not appear to be used anymore or does not appear to be * needed. It might be a legacy function left over from when there was a need * for updating the category cache. * * @since 1.5.0 * * @return bool Always return True */function update_category_cache() {	return true;}/** * Remove the category cache data based on ID. * * @since 2.1.0 * @uses clean_term_cache() Clears the cache for the category based on ID * * @param int $id Category ID */function clean_category_cache( $id ) {	clean_term_cache( $id, 'category' );}/** * Update category structure to old pre 2.3 from new taxonomy structure. * * This function was added for the taxonomy support to update the new category * structure with the old category one. This will maintain compatibility with * plugins and themes which depend on the old key or property names. * * The parameter should only be passed a variable and not create the array or * object inline to the parameter. The reason for this is that parameter is * passed by reference and PHP will fail unless it has the variable. * * There is no return value, because everything is updated on the variable you * pass to it. This is one of the features with using pass by reference in PHP. * * @since 2.3.0 * @access private * * @param array|object $category Category Row object or array */function _make_cat_compat( &$category ) {	if ( is_object( $category ) ) {		$category->cat_ID = &$category->term_id;		$category->category_count = &$category->count;		$category->category_description = &$category->description;		$category->cat_name = &$category->name;		$category->category_nicename = &$category->slug;		$category->category_parent = &$category->parent;	} elseif ( is_array( $category ) && isset( $category['term_id'] ) ) {		$category['cat_ID'] = &$category['term_id'];		$category['category_count'] = &$category['count'];		$category['category_description'] = &$category['description'];		$category['cat_name'] = &$category['name'];		$category['category_nicename'] = &$category['slug'];		$category['category_parent'] = &$category['parent'];	}}?>
<?php/** * Displays Administration Menu. * * @package WordPress * @subpackage Administration *//** * The current page. * * @global string $self * @name $self * @var string */$self = preg_replace('|^.*/wp-admin/|i', '', $_SERVER['PHP_SELF']);$self = preg_replace('|^.*/plugins/|i', '', $self);$self = preg_replace('|^.*/mu-plugins/|i', '', $self);global $menu, $submenu, $parent_file; //For when admin-header is included from within a function.$parent_file = apply_filters("parent_file", $parent_file); // For plugins to move submenu tabs around.get_admin_page_parent();/** * Display menu. * * @access private * @since 2.7.0 * * @param array $menu * @param array $submenu * @param bool $submenu_as_parent */function _wp_menu_output( $menu, $submenu, $submenu_as_parent = true ) {	global $self, $parent_file, $submenu_file, $plugin_page, $pagenow, $typenow;	$first = true;	// 0 = name, 1 = capability, 2 = file, 3 = class, 4 = id, 5 = icon src	foreach ( $menu as $key => $item ) {		$admin_is_parent = false;		$class = array();		if ( $first ) {			$class[] = 'wp-first-item';			$first = false;		}		if ( !empty($submenu[$item[2]]) )			$class[] = 'wp-has-submenu';		if ( ( $parent_file && $item[2] == $parent_file ) || ( false === strpos($parent_file, '?') && $self == $item[2] ) ) {			if ( !empty($submenu[$item[2]]) )				$class[] = 'wp-has-current-submenu wp-menu-open';			else				$class[] = 'current';		}		if ( ! empty($item[4]) )			$class[] = $item[4];		$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';		$tabindex = ' tabindex="1"';		$id = ! empty($item[5]) ? ' id="' . preg_replace( '|[^a-zA-Z0-9_:.]|', '-', $item[5] ) . '"' : '';		$img = '';		if ( ! empty($item[6]) ) {			if ( 'div' === $item[6] )				$img = '<br />';			else				$img = '<img src="' . $item[6] . '" alt="" />';		}		$toggle = '<div class="wp-menu-toggle"><br /></div>';		$title = wptexturize($item[0]);		echo "\n\t<li$class$id>";		if ( false !== strpos($class, 'wp-menu-separator') ) {			echo '<a class="separator" href="?unfoldmenu=1"><br /></a>';		} elseif ( $submenu_as_parent && !empty($submenu[$item[2]]) ) {			$submenu[$item[2]] = array_values($submenu[$item[2]]);  // Re-index.			$menu_hook = get_plugin_page_hook($submenu[$item[2]][0][2], $item[2]);			$menu_file = $submenu[$item[2]][0][2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ( ('index.php' != $submenu[$item[2]][0][2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") ) || !empty($menu_hook)) {				$admin_is_parent = true;				echo "<div class='wp-menu-image'><a href='admin.php?page={$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='admin.php?page={$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='{$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			}		} else if ( current_user_can($item[1]) ) {			$menu_hook = get_plugin_page_hook($item[2], 'admin.php');			$menu_file = $item[2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ('index.php' != $item[2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") || !empty($menu_hook) ) {				$admin_is_parent = true;				echo "\n\t<div class='wp-menu-image'><a href='admin.php?page={$item[2]}'>$img</a></div>$toggle<a href='admin.php?page={$item[2]}'$class$tabindex>{$item[0]}</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$item[2]}'>$img</a></div>$toggle<a href='{$item[2]}'$class$tabindex>{$item[0]}</a>";			}		}		if ( !empty($submenu[$item[2]]) ) {			echo "\n\t<div class='wp-submenu'><div class='wp-submenu-head'>{$item[0]}</div><ul>";			$first = true;			foreach ( $submenu[$item[2]] as $sub_key => $sub_item ) {				if ( !current_user_can($sub_item[1]) )					continue;				$class = array();				if ( $first ) {					$class[] = 'wp-first-item';					$first = false;				}				$menu_file = $item[2];				if ( false !== $pos = strpos($menu_file, '?') )					$menu_file = substr($menu_file, 0, $pos);				// Handle current for post_type=post|page|foo pages, which won't match $self.				if ( !empty($typenow) )					$self_type = $self . '?post_type=' . $typenow;				else					$self_type = 'nothing';				if ( isset($submenu_file) ) {					if ( $submenu_file == $sub_item[2] )						$class[] = 'current';				// If plugin_page is set the parent must either match the current page or not physically exist.				// This allows plugin pages with the same hook to exist under different parents.				} else if ( (isset($plugin_page) && $plugin_page == $sub_item[2] && (!file_exists($menu_file) || ($item[2] == $self) || ($item[2] == $self_type))) || (!isset($plugin_page) && $self == $sub_item[2]) ) {					$class[] = 'current';				}				$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';				$menu_hook = get_plugin_page_hook($sub_item[2], $item[2]);				$sub_file = $sub_item[2];				if ( false !== $pos = strpos($sub_file, '?') )					$sub_file = substr($sub_file, 0, $pos);				$title = wptexturize($sub_item[0]);				if ( ( ('index.php' != $sub_item[2]) && file_exists(WP_PLUGIN_DIR . "/$sub_file") ) || ! empty($menu_hook) ) {					// If admin.php is the current page or if the parent exists as a file in the plugins or admin dir					if ( (!$admin_is_parent && file_exists(WP_PLUGIN_DIR . "/$menu_file") && !is_dir(WP_PLUGIN_DIR . "/{$item[2]}")) || file_exists($menu_file) )						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), $item[2] );					else						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), 'admin.php' );					$sub_item_url = esc_url($sub_item_url);					echo "<li$class><a href='$sub_item_url'$class$tabindex>$title</a></li>";				} else {					echo "<li$class><a href='{$sub_item[2]}'$class$tabindex>$title</a></li>";				}			}			echo "</ul></div>";		}		echo "</li>";	}}?><ul id="adminmenu"><?php_wp_menu_output( $menu, $submenu );do_action( 'adminmenu' );?></ul>
<?php/* Continent and city translations for timezone selection. * This file is not included anywhere. It exists solely for use by xgettext. */__('Africa', 'continents-cities');__('Abidjan', 'continents-cities');__('Accra', 'continents-cities');__('Addis Ababa', 'continents-cities');__('Algiers', 'continents-cities');__('Asmara', 'continents-cities');__('Asmera', 'continents-cities');__('Bamako', 'continents-cities');__('Bangui', 'continents-cities');__('Banjul', 'continents-cities');__('Bissau', 'continents-cities');__('Blantyre', 'continents-cities');__('Brazzaville', 'continents-cities');__('Bujumbura', 'continents-cities');__('Cairo', 'continents-cities');__('Casablanca', 'continents-cities');__('Ceuta', 'continents-cities');__('Conakry', 'continents-cities');__('Dakar', 'continents-cities');__('Dar es Salaam', 'continents-cities');__('Djibouti', 'continents-cities');__('Douala', 'continents-cities');__('El Aaiun', 'continents-cities');__('Freetown', 'continents-cities');__('Gaborone', 'continents-cities');__('Harare', 'continents-cities');__('Johannesburg', 'continents-cities');__('Kampala', 'continents-cities');__('Khartoum', 'continents-cities');__('Kigali', 'continents-cities');__('Kinshasa', 'continents-cities');__('Lagos', 'continents-cities');__('Libreville', 'continents-cities');__('Lome', 'continents-cities');__('Luanda', 'continents-cities');__('Lubumbashi', 'continents-cities');__('Lusaka', 'continents-cities');__('Malabo', 'continents-cities');__('Maputo', 'continents-cities');__('Maseru', 'continents-cities');__('Mbabane', 'continents-cities');__('Mogadishu', 'continents-cities');__('Monrovia', 'continents-cities');__('Nairobi', 'continents-cities');__('Ndjamena', 'continents-cities');__('Niamey', 'continents-cities');__('Nouakchott', 'continents-cities');__('Ouagadougou', 'continents-cities');__('Porto-Novo', 'continents-cities');__('Sao Tome', 'continents-cities');__('Timbuktu', 'continents-cities');__('Tripoli', 'continents-cities');__('Tunis', 'continents-cities');__('Windhoek', 'continents-cities');__('America', 'continents-cities');__('Adak', 'continents-cities');__('Anchorage', 'continents-cities');__('Anguilla', 'continents-cities');__('Antigua', 'continents-cities');__('Araguaina', 'continents-cities');__('Argentina', 'continents-cities');__('Buenos Aires', 'continents-cities');__('Catamarca', 'continents-cities');__('ComodRivadavia', 'continents-cities');__('Cordoba', 'continents-cities');__('Jujuy', 'continents-cities');__('La Rioja', 'continents-cities');__('Mendoza', 'continents-cities');__('Rio Gallegos', 'continents-cities');__('San Juan', 'continents-cities');__('San Luis', 'continents-cities');__('Tucuman', 'continents-cities');__('Ushuaia', 'continents-cities');__('Aruba', 'continents-cities');__('Asuncion', 'continents-cities');__('Atikokan', 'continents-cities');__('Atka', 'continents-cities');__('Bahia', 'continents-cities');__('Barbados', 'continents-cities');__('Belem', 'continents-cities');__('Belize', 'continents-cities');__('Blanc-Sablon', 'continents-cities');__('Boa Vista', 'continents-cities');__('Bogota', 'continents-cities');__('Boise', 'continents-cities');__('Cambridge Bay', 'continents-cities');__('Campo Grande', 'continents-cities');__('Cancun', 'continents-cities');__('Caracas', 'continents-cities');__('Cayenne', 'continents-cities');__('Cayman', 'continents-cities');__('Chicago', 'continents-cities');__('Chihuahua', 'continents-cities');__('Coral Harbour', 'continents-cities');__('Costa Rica', 'continents-cities');__('Cuiaba', 'continents-cities');__('Curacao', 'continents-cities');__('Danmarkshavn', 'continents-cities');__('Dawson', 'continents-cities');__('Dawson Creek', 'continents-cities');__('Denver', 'continents-cities');__('Detroit', 'continents-cities');__('Dominica', 'continents-cities');__('Edmonton', 'continents-cities');__('Eirunepe', 'continents-cities');__('El Salvador', 'continents-cities');__('Ensenada', 'continents-cities');__('Fort Wayne', 'continents-cities');__('Fortaleza', 'continents-cities');__('Glace Bay', 'continents-cities');__('Godthab', 'continents-cities');__('Goose Bay', 'continents-cities');__('Grand Turk', 'continents-cities');__('Grenada', 'continents-cities');__('Guadeloupe', 'continents-cities');__('Guatemala', 'continents-cities');__('Guayaquil', 'continents-cities');__('Guyana', 'continents-cities');__('Halifax', 'continents-cities');__('Havana', 'continents-cities');__('Hermosillo', 'continents-cities');__('Indiana', 'continents-cities');__('Indianapolis', 'continents-cities');__('Knox', 'continents-cities');__('Marengo', 'continents-cities');__('Petersburg', 'continents-cities');__('Tell City', 'continents-cities');__('Vevay', 'continents-cities');__('Vincennes', 'continents-cities');__('Winamac', 'continents-cities');__('Inuvik', 'continents-cities');__('Iqaluit', 'continents-cities');__('Jamaica', 'continents-cities');__('Juneau', 'continents-cities');__('Kentucky', 'continents-cities');__('Louisville', 'continents-cities');__('Monticello', 'continents-cities');__('Knox IN', 'continents-cities');__('La Paz', 'continents-cities');__('Lima', 'continents-cities');__('Los Angeles', 'continents-cities');__('Maceio', 'continents-cities');__('Managua', 'continents-cities');__('Manaus', 'continents-cities');__('Marigot', 'continents-cities');__('Martinique', 'continents-cities');__('Mazatlan', 'continents-cities');__('Menominee', 'continents-cities');__('Merida', 'continents-cities');__('Mexico City', 'continents-cities');__('Miquelon', 'continents-cities');__('Moncton', 'continents-cities');__('Monterrey', 'continents-cities');__('Montevideo', 'continents-cities');__('Montreal', 'continents-cities');__('Montserrat', 'continents-cities');__('Nassau', 'continents-cities');__('New York', 'continents-cities');__('Nipigon', 'continents-cities');__('Nome', 'continents-cities');__('Noronha', 'continents-cities');__('North Dakota', 'continents-cities');__('Center', 'continents-cities');__('New Salem', 'continents-cities');__('Panama', 'continents-cities');__('Pangnirtung', 'continents-cities');__('Paramaribo', 'continents-cities');__('Phoenix', 'continents-cities');__('Port-au-Prince', 'continents-cities');__('Port of Spain', 'continents-cities');__('Porto Acre', 'continents-cities');__('Porto Velho', 'continents-cities');__('Puerto Rico', 'continents-cities');__('Rainy River', 'continents-cities');__('Rankin Inlet', 'continents-cities');__('Recife', 'continents-cities');__('Regina', 'continents-cities');__('Resolute', 'continents-cities');__('Rio Branco', 'continents-cities');__('Rosario', 'continents-cities');__('Santiago', 'continents-cities');__('Santo Domingo', 'continents-cities');__('Sao Paulo', 'continents-cities');__('Scoresbysund', 'continents-cities');__('Shiprock', 'continents-cities');__('St Barthelemy', 'continents-cities');__('St Johns', 'continents-cities');__('St Kitts', 'continents-cities');__('St Lucia', 'continents-cities');__('St Thomas', 'continents-cities');__('St Vincent', 'continents-cities');__('Swift Current', 'continents-cities');__('Tegucigalpa', 'continents-cities');__('Thule', 'continents-cities');__('Thunder Bay', 'continents-cities');__('Tijuana', 'continents-cities');__('Toronto', 'continents-cities');__('Tortola', 'continents-cities');__('Vancouver', 'continents-cities');__('Virgin', 'continents-cities');__('Whitehorse', 'continents-cities');__('Winnipeg', 'continents-cities');__('Yakutat', 'continents-cities');__('Yellowknife', 'continents-cities');__('Antarctica', 'continents-cities');__('Casey', 'continents-cities');__('Davis', 'continents-cities');__('DumontDUrville', 'continents-cities');__('Mawson', 'continents-cities');__('McMurdo', 'continents-cities');__('Palmer', 'continents-cities');__('Rothera', 'continents-cities');__('South Pole', 'continents-cities');__('Syowa', 'continents-cities');__('Vostok', 'continents-cities');__('Arctic', 'continents-cities');__('Longyearbyen', 'continents-cities');__('Asia', 'continents-cities');__('Aden', 'continents-cities');__('Almaty', 'continents-cities');__('Amman', 'continents-cities');__('Anadyr', 'continents-cities');__('Aqtau', 'continents-cities');__('Aqtobe', 'continents-cities');__('Ashgabat', 'continents-cities');__('Ashkhabad', 'continents-cities');__('Baghdad', 'continents-cities');__('Bahrain', 'continents-cities');__('Baku', 'continents-cities');__('Bangkok', 'continents-cities');__('Beirut', 'continents-cities');__('Bishkek', 'continents-cities');__('Brunei', 'continents-cities');__('Calcutta', 'continents-cities');__('Choibalsan', 'continents-cities');__('Chongqing', 'continents-cities');__('Chungking', 'continents-cities');__('Colombo', 'continents-cities');__('Dacca', 'continents-cities');__('Damascus', 'continents-cities');__('Dhaka', 'continents-cities');__('Dili', 'continents-cities');__('Dubai', 'continents-cities');__('Dushanbe', 'continents-cities');__('Gaza', 'continents-cities');__('Harbin', 'continents-cities');__('Ho Chi Minh', 'continents-cities');__('Hong Kong', 'continents-cities');__('Hovd', 'continents-cities');__('Irkutsk', 'continents-cities');__('Istanbul', 'continents-cities');__('Jakarta', 'continents-cities');__('Jayapura', 'continents-cities');__('Jerusalem', 'continents-cities');__('Kabul', 'continents-cities');__('Kamchatka', 'continents-cities');__('Karachi', 'continents-cities');__('Kashgar', 'continents-cities');__('Katmandu', 'continents-cities');__('Kolkata', 'continents-cities');__('Krasnoyarsk', 'continents-cities');__('Kuala Lumpur', 'continents-cities');__('Kuching', 'continents-cities');__('Kuwait', 'continents-cities');__('Macao', 'continents-cities');__('Macau', 'continents-cities');__('Magadan', 'continents-cities');__('Makassar', 'continents-cities');__('Manila', 'continents-cities');__('Muscat', 'continents-cities');__('Nicosia', 'continents-cities');__('Novosibirsk', 'continents-cities');__('Omsk', 'continents-cities');__('Oral', 'continents-cities');__('Phnom Penh', 'continents-cities');__('Pontianak', 'continents-cities');__('Pyongyang', 'continents-cities');__('Qatar', 'continents-cities');__('Qyzylorda', 'continents-cities');__('Rangoon', 'continents-cities');__('Riyadh', 'continents-cities');__('Saigon', 'continents-cities');__('Sakhalin', 'continents-cities');__('Samarkand', 'continents-cities');__('Seoul', 'continents-cities');__('Shanghai', 'continents-cities');__('Singapore', 'continents-cities');__('Taipei', 'continents-cities');__('Tashkent', 'continents-cities');__('Tbilisi', 'continents-cities');__('Tehran', 'continents-cities');__('Tel Aviv', 'continents-cities');__('Thimbu', 'continents-cities');__('Thimphu', 'continents-cities');__('Tokyo', 'continents-cities');__('Ujung Pandang', 'continents-cities');__('Ulaanbaatar', 'continents-cities');__('Ulan Bator', 'continents-cities');__('Urumqi', 'continents-cities');__('Vientiane', 'continents-cities');__('Vladivostok', 'continents-cities');__('Yakutsk', 'continents-cities');__('Yekaterinburg', 'continents-cities');__('Yerevan', 'continents-cities');__('Atlantic', 'continents-cities');__('Azores', 'continents-cities');__('Bermuda', 'continents-cities');__('Canary', 'continents-cities');__('Cape Verde', 'continents-cities');__('Faeroe', 'continents-cities');__('Faroe', 'continents-cities');__('Jan Mayen', 'continents-cities');__('Madeira', 'continents-cities');__('Reykjavik', 'continents-cities');__('South Georgia', 'continents-cities');__('St Helena', 'continents-cities');__('Stanley', 'continents-cities');__('Australia', 'continents-cities');__('ACT', 'continents-cities');__('Adelaide', 'continents-cities');__('Brisbane', 'continents-cities');__('Broken Hill', 'continents-cities');__('Canberra', 'continents-cities');__('Currie', 'continents-cities');__('Darwin', 'continents-cities');__('Eucla', 'continents-cities');__('Hobart', 'continents-cities');__('LHI', 'continents-cities');__('Lindeman', 'continents-cities');__('Lord Howe', 'continents-cities');__('Melbourne', 'continents-cities');__('North', 'continents-cities');__('NSW', 'continents-cities');__('Perth', 'continents-cities');__('Queensland', 'continents-cities');__('South', 'continents-cities');__('Sydney', 'continents-cities');__('Tasmania', 'continents-cities');__('Victoria', 'continents-cities');__('West', 'continents-cities');__('Yancowinna', 'continents-cities');__('Etc', 'continents-cities');__('GMT', 'continents-cities');__('GMT+0', 'continents-cities');__('GMT+1', 'continents-cities');__('GMT+10', 'continents-cities');__('GMT+11', 'continents-cities');__('GMT+12', 'continents-cities');__('GMT+2', 'continents-cities');__('GMT+3', 'continents-cities');__('GMT+4', 'continents-cities');__('GMT+5', 'continents-cities');__('GMT+6', 'continents-cities');__('GMT+7', 'continents-cities');__('GMT+8', 'continents-cities');__('GMT+9', 'continents-cities');__('GMT-0', 'continents-cities');__('GMT-1', 'continents-cities');__('GMT-10', 'continents-cities');__('GMT-11', 'continents-cities');__('GMT-12', 'continents-cities');__('GMT-13', 'continents-cities');__('GMT-14', 'continents-cities');__('GMT-2', 'continents-cities');__('GMT-3', 'continents-cities');__('GMT-4', 'continents-cities');__('GMT-5', 'continents-cities');__('GMT-6', 'continents-cities');__('GMT-7', 'continents-cities');__('GMT-8', 'continents-cities');__('GMT-9', 'continents-cities');__('GMT0', 'continents-cities');__('Greenwich', 'continents-cities');__('UCT', 'continents-cities');__('Universal', 'continents-cities');__('UTC', 'continents-cities');__('Zulu', 'continents-cities');__('Europe', 'continents-cities');__('Amsterdam', 'continents-cities');__('Andorra', 'continents-cities');__('Athens', 'continents-cities');__('Belfast', 'continents-cities');__('Belgrade', 'continents-cities');__('Berlin', 'continents-cities');__('Bratislava', 'continents-cities');__('Brussels', 'continents-cities');__('Bucharest', 'continents-cities');__('Budapest', 'continents-cities');__('Chisinau', 'continents-cities');__('Copenhagen', 'continents-cities');__('Dublin', 'continents-cities');__('Gibraltar', 'continents-cities');__('Guernsey', 'continents-cities');__('Helsinki', 'continents-cities');__('Isle of Man', 'continents-cities');__('Jersey', 'continents-cities');__('Kaliningrad', 'continents-cities');__('Kiev', 'continents-cities');__('Lisbon', 'continents-cities');__('Ljubljana', 'continents-cities');__('London', 'continents-cities');__('Luxembourg', 'continents-cities');__('Madrid', 'continents-cities');__('Malta', 'continents-cities');__('Mariehamn', 'continents-cities');__('Minsk', 'continents-cities');__('Monaco', 'continents-cities');__('Moscow', 'continents-cities');__('Oslo', 'continents-cities');__('Paris', 'continents-cities');__('Podgorica', 'continents-cities');__('Prague', 'continents-cities');__('Riga', 'continents-cities');__('Rome', 'continents-cities');__('Samara', 'continents-cities');__('San Marino', 'continents-cities');__('Sarajevo', 'continents-cities');__('Simferopol', 'continents-cities');__('Skopje', 'continents-cities');__('Sofia', 'continents-cities');__('Stockholm', 'continents-cities');__('Tallinn', 'continents-cities');__('Tirane', 'continents-cities');__('Tiraspol', 'continents-cities');__('Uzhgorod', 'continents-cities');__('Vaduz', 'continents-cities');__('Vatican', 'continents-cities');__('Vienna', 'continents-cities');__('Vilnius', 'continents-cities');__('Volgograd', 'continents-cities');__('Warsaw', 'continents-cities');__('Zagreb', 'continents-cities');__('Zaporozhye', 'continents-cities');__('Zurich', 'continents-cities');__('Indian', 'continents-cities');__('Antananarivo', 'continents-cities');__('Chagos', 'continents-cities');__('Christmas', 'continents-cities');__('Cocos', 'continents-cities');__('Comoro', 'continents-cities');__('Kerguelen', 'continents-cities');__('Mahe', 'continents-cities');__('Maldives', 'continents-cities');__('Mauritius', 'continents-cities');__('Mayotte', 'continents-cities');__('Reunion', 'continents-cities');__('Pacific', 'continents-cities');__('Apia', 'continents-cities');__('Auckland', 'continents-cities');__('Chatham', 'continents-cities');__('Easter', 'continents-cities');__('Efate', 'continents-cities');__('Enderbury', 'continents-cities');__('Fakaofo', 'continents-cities');__('Fiji', 'continents-cities');__('Funafuti', 'continents-cities');__('Galapagos', 'continents-cities');__('Gambier', 'continents-cities');__('Guadalcanal', 'continents-cities');__('Guam', 'continents-cities');__('Honolulu', 'continents-cities');__('Johnston', 'continents-cities');__('Kiritimati', 'continents-cities');__('Kosrae', 'continents-cities');__('Kwajalein', 'continents-cities');__('Majuro', 'continents-cities');__('Marquesas', 'continents-cities');__('Midway', 'continents-cities');__('Nauru', 'continents-cities');__('Niue', 'continents-cities');__('Norfolk', 'continents-cities');__('Noumea', 'continents-cities');__('Pago Pago', 'continents-cities');__('Palau', 'continents-cities');__('Pitcairn', 'continents-cities');__('Ponape', 'continents-cities');__('Port Moresby', 'continents-cities');__('Rarotonga', 'continents-cities');__('Saipan', 'continents-cities');__('Samoa', 'continents-cities');__('Tahiti', 'continents-cities');__('Tarawa', 'continents-cities');__('Tongatapu', 'continents-cities');__('Truk', 'continents-cities');__('Wake', 'continents-cities');__('Wallis', 'continents-cities');__('Yap', 'continents-cities');
<?php/** * General settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('General Settings');$parent_file = 'options-general.php';/* translators: date and time format for exact current time, mainly about timezones, see http://php.net/date */$timezone_format = _x('Y-m-d G:i:s', 'timezone date format');/** * Display JavaScript on the page. * * @package WordPress * @subpackage General_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[	jQuery(document).ready(function($){		$("input[name='date_format']").click(function(){			if ( "date_format_custom_radio" != $(this).attr("id") )				$("input[name='date_format_custom']").val( $(this).val() );		});		$("input[name='date_format_custom']").focus(function(){			$("#date_format_custom_radio").attr("checked", "checked");		});		$("input[name='time_format']").click(function(){			if ( "time_format_custom_radio" != $(this).attr("id") )				$("input[name='time_format_custom']").val( $(this).val() );		});		$("input[name='time_format_custom']").focus(function(){			$("#time_format_custom_radio").attr("checked", "checked");		});	});//]]></script><?php}add_filter('admin_head', 'add_js');add_contextual_help($current_screen,	'<p>' . __('The fields on this screen determine some of the basics of your site setup.') . '</p>' .	'<p>' . __('Most themes display the site title at the top of every page, in the title bar of the browser, and as the identifying name for syndicated feeds. The tagline is also displayed by many themes.') . '</p>' .	'<p>' . __('The WordPress URL and the Site URL can be the same (example.com) or different; for example, having the WordPress core files (example.com/wordpress) in a subdirectory instead of the root directory.') . '</p>' .	'<p>' . __('If you want site visitors to be able to register themselves, as opposed to being registered by the site administrator, check the membership box. A default user role can be set for all new users, whether self-registered or registered by the site administrator.') . '</p>' .	'<p>' . __('UTC means Coordinated Universal Time.') . '</p>' .	'<p>' . __('Remember to click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_General_SubPanel" target="_blank">Documentation on General Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('general'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="blogname"><?php _e('Site Title') ?></label></th><td><input name="blogname" type="text" id="blogname" value="<?php form_option('blogname'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="blogdescription"><?php _e('Tagline') ?></label></th><td><input name="blogdescription" type="text" id="blogdescription"  value="<?php form_option('blogdescription'); ?>" class="regular-text" /><span class="description"><?php _e('In a few words, explain what this site is about.') ?></span></td></tr><?php if ( !is_multisite() ) { ?><tr valign="top"><th scope="row"><label for="siteurl"><?php _e('WordPress address (URL)') ?></label></th><td><input name="siteurl" type="text" id="siteurl" value="<?php form_option('siteurl'); ?>"<?php disabled( defined( 'WP_SITEURL' ) ); ?> class="regular-text code<?php if ( defined( 'WP_SITEURL' ) ) echo ' disabled' ?>" /></td></tr><tr valign="top"><th scope="row"><label for="home"><?php _e('Site address (URL)') ?></label></th><td><input name="home" type="text" id="home" value="<?php form_option('home'); ?>"<?php disabled( defined( 'WP_HOME' ) ); ?> class="regular-text code<?php if ( defined( 'WP_HOME' ) ) echo ' disabled' ?>" /><span class="description"><?php _e('Enter the address here if you want your site homepage <a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">to be different from the directory</a> you installed WordPress.'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="admin_email" type="text" id="admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text" /><span class="description"><?php _e('This address is used for admin purposes, like new user notification.') ?></span></td></tr><tr valign="top"><th scope="row"><?php _e('Membership') ?></th><td> <fieldset><legend class="screen-reader-text"><span><?php _e('Membership') ?></span></legend><label for="users_can_register"><input name="users_can_register" type="checkbox" id="users_can_register" value="1" <?php checked('1', get_option('users_can_register')); ?> /><?php _e('Anyone can register') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_role"><?php _e('New User Default Role') ?></label></th><td><select name="default_role" id="default_role"><?php wp_dropdown_roles( get_option('default_role') ); ?></select></td></tr><?php } else { ?><tr valign="top"><th scope="row"><label for="new_admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="new_admin_email" type="text" id="new_admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text code" /><span class="setting-description"><?php _e('This address is used for admin purposes. If you change this we will send you an e-mail at your new address to confirm it. <strong>The new address will not become active until confirmed.</strong>') ?></span><?php$new_admin_email = get_option( 'new_admin_email' );if ( $new_admin_email && $new_admin_email != get_option('admin_email') ) : ?><div class="updated inline"><p><?php printf( __('There is a pending change of the admin e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_admin_email, esc_url( admin_url( 'options.php?dismiss=new_admin_email' ) ) ); ?></p></div><?php endif; ?></td></tr><?php } ?><tr><?phpif ( !wp_timezone_supported() ) : // no magic timezone support here?><th scope="row"><label for="gmt_offset"><?php _e('Timezone') ?> </label></th><td><select name="gmt_offset" id="gmt_offset"><?php$current_offset = get_option('gmt_offset');$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,	0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);foreach ( $offset_range as $offset ) {	if ( 0 < $offset )		$offset_name = '+' . $offset;	elseif ( 0 == $offset )		$offset_name = '';	else		$offset_name = (string) $offset;	$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);	$selected = '';	if ( $current_offset == $offset ) {		$selected = " selected='selected'";		$current_offset_name = $offset_name;	}	echo "<option value=\"" . esc_attr($offset) . "\"$selected>" . sprintf(__('UTC %s'), $offset_name) . '</option>';}?></select><?php _e('hours'); ?><span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n( $time_format, false, 'gmt')); ?></span><?php if ($current_offset) : ?>	<span id="local-time"><?php printf(__('UTC %1$s is <code>%2$s</code>'), $current_offset_name, date_i18n($time_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Unfortunately, you have to manually update this for daylight saving time. The PHP Date/Time library is not supported by your web host.'); ?></span></td><?phpelse: // looks like we can do nice timezone selection!$current_offset = get_option('gmt_offset');$tzstring = get_option('timezone_string');$check_zone_info = true;// Remove old Etc mappings.  Fallback to gmt_offset.if ( false !== strpos($tzstring,'Etc/GMT') )	$tzstring = '';if ( empty($tzstring) ) { // Create a UTC+- zone if no timezone string exists	$check_zone_info = false;	if ( 0 == $current_offset )		$tzstring = 'UTC+0';	elseif ($current_offset < 0)		$tzstring = 'UTC' . $current_offset;	else		$tzstring = 'UTC+' . $current_offset;}?><th scope="row"><label for="timezone_string"><?php _e('Timezone') ?></label></th><td><select id="timezone_string" name="timezone_string"><?php echo wp_timezone_choice($tzstring); ?></select>    <span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n($timezone_format, false, 'gmt')); ?></span><?php if ( get_option('timezone_string') || !empty($current_offset) ) : ?>	<span id="local-time"><?php printf(__('Local time is <code>%1$s</code>'), date_i18n($timezone_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Choose a city in the same timezone as you.'); ?></span><?php if ($check_zone_info && $tzstring) : ?><br /><span>	<?php	// Set TZ so localtime works.	date_default_timezone_set($tzstring);	$now = localtime(time(), true);	if ( $now['tm_isdst'] )		_e('This timezone is currently in daylight saving time.');	else		_e('This timezone is currently in standard time.');	?>	<br />	<?php	if ( function_exists('timezone_transitions_get') ) {		$found = false;		$date_time_zone_selected = new DateTimeZone($tzstring);		$tz_offset = timezone_offset_get($date_time_zone_selected, date_create());		$right_now = time();		foreach ( timezone_transitions_get($date_time_zone_selected) as $tr) {			if ( $tr['ts'] > $right_now ) {			    $found = true;				break;			}		}		if ( $found ) {			echo ' ';			$message = $tr['isdst'] ?				__('Daylight saving time begins on: <code>%s</code>.') :				__('Standard time begins  on: <code>%s</code>.');			// Add the difference between the current offset and the new offset to ts to get the correct transition time from date_i18n().			printf( $message, date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $tr['ts'] + ($tz_offset - $tr['offset']) ) );		} else {			_e('This timezone does not observe daylight saving time.');		}	}	// Set back to UTC.	date_default_timezone_set('UTC');	?>	</span><?php endif; ?></td><?php endif; ?></tr><tr><th scope="row"><?php _e('Date Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Date Format') ?></span></legend><?php	$date_formats = apply_filters( 'date_formats', array(		__('F j, Y'),		'Y/m/d',		'm/d/Y',		'd/m/Y',	) );	$custom = true;	foreach ( $date_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='date_format' value='" . esc_attr($format) . "'";		if ( get_option('date_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="date_format" id="date_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="date_format_custom" value="' . esc_attr( get_option('date_format') ) . '" class="small-text" /> ' . date_i18n( get_option('date_format') ) . "\n";	echo "\t<p>" . __('<a href="http://codex.wordpress.org/Formatting_Date_and_Time">Documentation on date formatting</a>. Click &#8220;Save Changes&#8221; to update sample output.') . "</p>\n";?>	</fieldset></td></tr><tr><th scope="row"><?php _e('Time Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Time Format') ?></span></legend><?php	$time_formats = apply_filters( 'time_formats', array(		__('g:i a'),		'g:i A',		'H:i',	) );	$custom = true;	foreach ( $time_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='time_format' value='" . esc_attr($format) . "'";		if ( get_option('time_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="time_format" id="time_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="time_format_custom" value="' . esc_attr( get_option('time_format') ) . '" class="small-text" /> ' . date_i18n( get_option('time_format') ) . "\n";?>	</fieldset></td></tr><tr><th scope="row"><label for="start_of_week"><?php _e('Week Starts On') ?></label></th><td><select name="start_of_week" id="start_of_week"><?phpfor ($day_index = 0; $day_index <= 6; $day_index++) :	$selected = (get_option('start_of_week') == $day_index) ? 'selected="selected"' : '';	echo "\n\t<option value='" . esc_attr($day_index) . "' $selected>" . $wp_locale->get_weekday($day_index) . '</option>';endfor;?></select></td></tr><?php do_settings_fields('general', 'default'); ?><?php	$languages = get_available_languages();	if ( is_multisite() && !empty( $languages ) ):?>	<tr valign="top">		<th width="33%" scope="row"><?php _e('Site language:') ?></th>		<td>			<select name="WPLANG" id="WPLANG">				<?php mu_dropdown_languages( $languages, get_option('WPLANG') ); ?>			</select>		</td>	</tr><?php	endif;?></table><?php do_settings_sections('general'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * WordPress API for media display. * * @package WordPress *//** * Scale down the default size of an image. * * This is so that the image is a better fit for the editor and theme. * * The $size parameter accepts either an array or a string. The supported string * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at * 128 width and 96 height in pixels. Also supported for the string value is * 'medium' and 'full'. The 'full' isn't actually supported, but any value other * than the supported will result in the content_width size or 500 if that is * not set. * * Finally, there is a filter named, 'editor_max_image_size' that will be called * on the calculated array for width and height, respectively. The second * parameter will be the value that was in the $size parameter. The returned * type for the hook is an array with the width as the first element and the * height as the second element. * * @since 2.5.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $width Width of the image * @param int $height Height of the image * @param string|array $size Size of what the result image should be. * @return array Width and height of what the result image should resize to. */function image_constrain_size_for_editor($width, $height, $size = 'medium') {	global $content_width, $_wp_additional_image_sizes;	if ( is_array($size) ) {		$max_width = $size[0];		$max_height = $size[1];	}	elseif ( $size == 'thumb' || $size == 'thumbnail' ) {		$max_width = intval(get_option('thumbnail_size_w'));		$max_height = intval(get_option('thumbnail_size_h'));		// last chance thumbnail size defaults		if ( !$max_width && !$max_height ) {			$max_width = 128;			$max_height = 96;		}	}	elseif ( $size == 'medium' ) {		$max_width = intval(get_option('medium_size_w'));		$max_height = intval(get_option('medium_size_h'));		// if no width is set, default to the theme content width if available	}	elseif ( $size == 'large' ) {		// we're inserting a large size image into the editor.  if it's a really		// big image we'll scale it down to fit reasonably within the editor		// itself, and within the theme's content width if it's known.  the user		// can resize it in the editor if they wish.		$max_width = intval(get_option('large_size_w'));		$max_height = intval(get_option('large_size_h'));		if ( intval($content_width) > 0 )			$max_width = min( intval($content_width), $max_width );	} elseif ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) && in_array( $size, array_keys( $_wp_additional_image_sizes ) ) ) {		$max_width = intval( $_wp_additional_image_sizes[$size]['width'] );		$max_height = intval( $_wp_additional_image_sizes[$size]['height'] );		if ( intval($content_width) > 0 && is_admin() ) // Only in admin. Assume that theme authors know what they're doing.			$max_width = min( intval($content_width), $max_width );	}	// $size == 'full' has no constraint	else {		$max_width = $width;		$max_height = $height;	}	list( $max_width, $max_height ) = apply_filters( 'editor_max_image_size', array( $max_width, $max_height ), $size );	return wp_constrain_dimensions( $width, $height, $max_width, $max_height );}/** * Retrieve width and height attributes using given width and height values. * * Both attributes are required in the sense that both parameters must have a * value, but are optional in that if you set them to false or null, then they * will not be added to the returned string. * * You can set the value using a string, but it will only take numeric values. * If you wish to put 'px' after the numbers, then it will be stripped out of * the return. * * @since 2.5.0 * * @param int|string $width Optional. Width attribute value. * @param int|string $height Optional. Height attribute value. * @return string HTML attributes for width and, or height. */function image_hwstring($width, $height) {	$out = '';	if ($width)		$out .= 'width="'.intval($width).'" ';	if ($height)		$out .= 'height="'.intval($height).'" ';	return $out;}/** * Scale an image to fit a particular size (such as 'thumb' or 'medium'). * * Array with image url, width, height, and whether is intermediate size, in * that order is returned on success is returned. $is_intermediate is true if * $url is a resized image, false if it is the original. * * The URL might be the original image, or it might be a resized version. This * function won't create a new resized copy, it will just return an already * resized one if it exists. * * A plugin may use the 'image_downsize' filter to hook into and offer image * resizing services for images. The hook must return an array with the same * elements that are returned in the function. The first element being the URL * to the new image that was resized. * * @since 2.5.0 * @uses apply_filters() Calls 'image_downsize' on $id and $size to provide *		resize services. * * @param int $id Attachment ID for image. * @param string $size Optional, default is 'medium'. Size of image, can be 'thumbnail'. * @return bool|array False on failure, array on success. */function image_downsize($id, $size = 'medium') {	if ( !wp_attachment_is_image($id) )		return false;	$img_url = wp_get_attachment_url($id);	$meta = wp_get_attachment_metadata($id);	$width = $height = 0;	$is_intermediate = false;	// plugins can use this to provide resize services	if ( $out = apply_filters('image_downsize', false, $id, $size) )		return $out;	// try for a new style intermediate size	if ( $intermediate = image_get_intermediate_size($id, $size) ) {		$img_url = str_replace(basename($img_url), $intermediate['file'], $img_url);		$width = $intermediate['width'];		$height = $intermediate['height'];		$is_intermediate = true;	}	elseif ( $size == 'thumbnail' ) {		// fall back to the old thumbnail		if ( ($thumb_file = wp_get_attachment_thumb_file($id)) && $info = getimagesize($thumb_file) ) {			$img_url = str_replace(basename($img_url), basename($thumb_file), $img_url);			$width = $info[0];			$height = $info[1];			$is_intermediate = true;		}	}	if ( !$width && !$height && isset($meta['width'], $meta['height']) ) {		// any other type: use the real image		$width = $meta['width'];		$height = $meta['height'];	}	if ( $img_url) {		// we have the actual image size, but might need to further constrain it if content_width is narrower		list( $width, $height ) = image_constrain_size_for_editor( $width, $height, $size );		return array( $img_url, $width, $height, $is_intermediate );	}	return false;}/** * Registers a new image size */function add_image_size( $name, $width = 0, $height = 0, $crop = FALSE ) {	global $_wp_additional_image_sizes;	$_wp_additional_image_sizes[$name] = array( 'width' => absint( $width ), 'height' => absint( $height ), 'crop' => !!$crop );}/** * Registers an image size for the post thumbnail */function set_post_thumbnail_size( $width = 0, $height = 0, $crop = FALSE ) {	add_image_size( 'post-thumbnail', $width, $height, $crop );}/** * An <img src /> tag for an image attachment, scaling it down if requested. * * The filter 'get_image_tag_class' allows for changing the class name for the * image without having to use regular expressions on the HTML content. The * parameters are: what WordPress will use for the class, the Attachment ID, * image align value, and the size the image should be. * * The second filter 'get_image_tag' has the HTML content, which can then be * further manipulated by a plugin to change all attribute values and even HTML * content. * * @since 2.5.0 * * @uses apply_filters() The 'get_image_tag_class' filter is the IMG element *		class attribute. * @uses apply_filters() The 'get_image_tag' filter is the full IMG element with *		all attributes. * * @param int $id Attachment ID. * @param string $alt Image Description for the alt attribute. * @param string $title Image Description for the title attribute. * @param string $align Part of the class name for aligning the image. * @param string $size Optional. Default is 'medium'. * @return string HTML IMG element for given image attachment */function get_image_tag($id, $alt, $title, $align, $size='medium') {	list( $img_src, $width, $height ) = image_downsize($id, $size);	$hwstring = image_hwstring($width, $height);	$class = 'align' . esc_attr($align) .' size-' . esc_attr($size) . ' wp-image-' . $id;	$class = apply_filters('get_image_tag_class', $class, $id, $align, $size);	$html = '<img src="' . esc_attr($img_src) . '" alt="' . esc_attr($alt) . '" title="' . esc_attr($title).'" '.$hwstring.'class="'.$class.'" />';	$html = apply_filters( 'get_image_tag', $html, $id, $alt, $title, $align, $size );	return $html;}/** * Load an image from a string, if PHP supports it. * * @since 2.1.0 * * @param string $file Filename of the image to load. * @return resource The resulting image resource on success, Error string on failure. */function wp_load_image( $file ) {	if ( is_numeric( $file ) )		$file = get_attached_file( $file );	if ( ! file_exists( $file ) )		return sprintf(__('File &#8220;%s&#8221; doesn&#8217;t exist?'), $file);	if ( ! function_exists('imagecreatefromstring') )		return __('The GD image library is not installed.');	// Set artificially high because GD uses uncompressed images in memory	@ini_set('memory_limit', '256M');	$image = imagecreatefromstring( file_get_contents( $file ) );	if ( !is_resource( $image ) )		return sprintf(__('File &#8220;%s&#8221; is not an image.'), $file);	return $image;}/** * Calculates the new dimentions for a downsampled image. * * If either width or height are empty, no constraint is applied on * that dimension. * * @since 2.5.0 * * @param int $current_width Current width of the image. * @param int $current_height Current height of the image. * @param int $max_width Optional. Maximum wanted width. * @param int $max_height Optional. Maximum wanted height. * @return array First item is the width, the second item is the height. */function wp_constrain_dimensions( $current_width, $current_height, $max_width=0, $max_height=0 ) {	if ( !$max_width and !$max_height )		return array( $current_width, $current_height );	$width_ratio = $height_ratio = 1.0;	$did_width = $did_height = false;	if ( $max_width > 0 && $current_width > 0 && $current_width > $max_width ) {		$width_ratio = $max_width / $current_width;		$did_width = true;	}	if ( $max_height > 0 && $current_height > 0 && $current_height > $max_height ) {		$height_ratio = $max_height / $current_height;		$did_height = true;	}	// Calculate the larger/smaller ratios	$smaller_ratio = min( $width_ratio, $height_ratio );	$larger_ratio  = max( $width_ratio, $height_ratio );	if ( intval( $current_width * $larger_ratio ) > $max_width || intval( $current_height * $larger_ratio ) > $max_height ) 		// The larger ratio is too big. It would result in an overflow.		$ratio = $smaller_ratio;	else		// The larger ratio fits, and is likely to be a more "snug" fit.		$ratio = $larger_ratio;	$w = intval( $current_width  * $ratio );	$h = intval( $current_height * $ratio );	// Sometimes, due to rounding, we'll end up with a result like this: 465x700 in a 177x177 box is 117x176... a pixel short	// We also have issues with recursive calls resulting in an ever-changing result. Contraining to the result of a constraint should yield the original result.	// Thus we look for dimensions that are one pixel shy of the max value and bump them up	if ( $did_width && $w == $max_width - 1 )		$w = $max_width; // Round it up	if ( $did_height && $h == $max_height - 1 )		$h = $max_height; // Round it up	return array( $w, $h );}/** * Retrieve calculated resized dimensions for use in imagecopyresampled(). * * Calculate dimensions and coordinates for a resized image that fits within a * specified width and height. If $crop is true, the largest matching central * portion of the image will be cropped out and resized to the required size. * * @since 2.5.0 * * @param int $orig_w Original width. * @param int $orig_h Original height. * @param int $dest_w New width. * @param int $dest_h New height. * @param bool $crop Optional, default is false. Whether to crop image or resize. * @return bool|array False, on failure. Returned array matches parameters for imagecopyresampled() PHP function. */function image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop = false) {	if ($orig_w <= 0 || $orig_h <= 0)		return false;	// at least one of dest_w or dest_h must be specific	if ($dest_w <= 0 && $dest_h <= 0)		return false;	if ( $crop ) {		// crop the largest possible portion of the original image that we can size to $dest_w x $dest_h		$aspect_ratio = $orig_w / $orig_h;		$new_w = min($dest_w, $orig_w);		$new_h = min($dest_h, $orig_h);		if ( !$new_w ) {			$new_w = intval($new_h * $aspect_ratio);		}		if ( !$new_h ) {			$new_h = intval($new_w / $aspect_ratio);		}		$size_ratio = max($new_w / $orig_w, $new_h / $orig_h);		$crop_w = round($new_w / $size_ratio);		$crop_h = round($new_h / $size_ratio);		$s_x = floor( ($orig_w - $crop_w) / 2 );		$s_y = floor( ($orig_h - $crop_h) / 2 );	} else {		// don't crop, just resize using $dest_w x $dest_h as a maximum bounding box		$crop_w = $orig_w;		$crop_h = $orig_h;		$s_x = 0;		$s_y = 0;		list( $new_w, $new_h ) = wp_constrain_dimensions( $orig_w, $orig_h, $dest_w, $dest_h );	}	// if the resulting image would be the same size or larger we don't want to resize it	if ( $new_w >= $orig_w && $new_h >= $orig_h )		return false;	// the return array matches the parameters to imagecopyresampled()	// int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h	return array( 0, 0, (int) $s_x, (int) $s_y, (int) $new_w, (int) $new_h, (int) $crop_w, (int) $crop_h );}/** * Scale down an image to fit a particular size and save a new copy of the image. * * The PNG transparency will be preserved using the function, as well as the * image type. If the file going in is PNG, then the resized image is going to * be PNG. The only supported image types are PNG, GIF, and JPEG. * * Some functionality requires API to exist, so some PHP version may lose out * support. This is not the fault of WordPress (where functionality is * downgraded, not actual defects), but of your PHP version. * * @since 2.5.0 * * @param string $file Image file path. * @param int $max_w Maximum width to resize to. * @param int $max_h Maximum height to resize to. * @param bool $crop Optional. Whether to crop image or resize. * @param string $suffix Optional. File Suffix. * @param string $dest_path Optional. New image file path. * @param int $jpeg_quality Optional, default is 90. Image quality percentage. * @return mixed WP_Error on failure. String with new destination path. */function image_resize( $file, $max_w, $max_h, $crop = false, $suffix = null, $dest_path = null, $jpeg_quality = 90 ) {	$image = wp_load_image( $file );	if ( !is_resource( $image ) )		return new WP_Error( 'error_loading_image', $image, $file );	$size = @getimagesize( $file );	if ( !$size )		return new WP_Error('invalid_image', __('Could not read image size'), $file);	list($orig_w, $orig_h, $orig_type) = $size;	$dims = image_resize_dimensions($orig_w, $orig_h, $max_w, $max_h, $crop);	if ( !$dims )		return new WP_Error( 'error_getting_dimensions', __('Could not calculate resized image dimensions') );	list($dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h) = $dims;	$newimage = wp_imagecreatetruecolor( $dst_w, $dst_h );	imagecopyresampled( $newimage, $image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);	// convert from full colors to index colors, like original PNG.	if ( IMAGETYPE_PNG == $orig_type && function_exists('imageistruecolor') && !imageistruecolor( $image ) )		imagetruecolortopalette( $newimage, false, imagecolorstotal( $image ) );	// we don't need the original in memory anymore	imagedestroy( $image );	// $suffix will be appended to the destination filename, just before the extension	if ( !$suffix )		$suffix = "{$dst_w}x{$dst_h}";	$info = pathinfo($file);	$dir = $info['dirname'];	$ext = $info['extension'];	$name = basename($file, ".{$ext}");	if ( !is_null($dest_path) and $_dest_path = realpath($dest_path) )		$dir = $_dest_path;	$destfilename = "{$dir}/{$name}-{$suffix}.{$ext}";	if ( IMAGETYPE_GIF == $orig_type ) {		if ( !imagegif( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} elseif ( IMAGETYPE_PNG == $orig_type ) {		if ( !imagepng( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} else {		// all other formats are converted to jpg		$destfilename = "{$dir}/{$name}-{$suffix}.jpg";		if ( !imagejpeg( $newimage, $destfilename, apply_filters( 'jpeg_quality', $jpeg_quality, 'image_resize' ) ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	}	imagedestroy( $newimage );	// Set correct file permissions	$stat = stat( dirname( $destfilename ));	$perms = $stat['mode'] & 0000666; //same permissions as parent folder, strip off the executable bits	@ chmod( $destfilename, $perms );	return $destfilename;}/** * Resize an image to make a thumbnail or intermediate size. * * The returned array has the file size, the image width, and image height. The * filter 'image_make_intermediate_size' can be used to hook in and change the * values of the returned array. The only parameter is the resized file path. * * @since 2.5.0 * * @param string $file File path. * @param int $width Image width. * @param int $height Image height. * @param bool $crop Optional, default is false. Whether to crop image to specified height and width or resize. * @return bool|array False, if no image was created. Metadata array on success. */function image_make_intermediate_size($file, $width, $height, $crop=false) {	if ( $width || $height ) {		$resized_file = image_resize($file, $width, $height, $crop);		if ( !is_wp_error($resized_file) && $resized_file && $info = getimagesize($resized_file) ) {			$resized_file = apply_filters('image_make_intermediate_size', $resized_file);			return array(				'file' => basename( $resized_file ),				'width' => $info[0],				'height' => $info[1],			);		}	}	return false;}/** * Retrieve the image's intermediate size (resized) path, width, and height. * * The $size parameter can be an array with the width and height respectively. * If the size matches the 'sizes' metadata array for width and height, then it * will be used. If there is no direct match, then the nearest image size larger * than the specified size will be used. If nothing is found, then the function * will break out and return false. * * The metadata 'sizes' is used for compatible sizes that can be used for the * parameter $size value. * * The url path will be given, when the $size parameter is a string. * * If you are passing an array for the $size, you should consider using * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @since 2.5.0 * @see add_image_size() * * @param int $post_id Attachment ID for image. * @param array|string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @return bool|array False on failure or array of file path, width, and height on success. */function image_get_intermediate_size($post_id, $size='thumbnail') {	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post_id ) ) )		return false;	// get the best one for a specified set of dimensions	if ( is_array($size) && !empty($imagedata['sizes']) ) {		foreach ( $imagedata['sizes'] as $_size => $data ) {			// already cropped to width or height; so use this size			if ( ( $data['width'] == $size[0] && $data['height'] <= $size[1] ) || ( $data['height'] == $size[1] && $data['width'] <= $size[0] ) ) {				$file = $data['file'];				list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );				return compact( 'file', 'width', 'height' );			}			// add to lookup table: area => size			$areas[$data['width'] * $data['height']] = $_size;		}		if ( !$size || !empty($areas) ) {			// find for the smallest image not smaller than the desired size			ksort($areas);			foreach ( $areas as $_size ) {				$data = $imagedata['sizes'][$_size];				if ( $data['width'] >= $size[0] || $data['height'] >= $size[1] ) {					// Skip images with unexpectedly divergent aspect ratios (crops)					// First, we calculate what size the original image would be if constrained to a box the size of the current image in the loop					$maybe_cropped = image_resize_dimensions($imagedata['width'], $imagedata['height'], $data['width'], $data['height'], false );					// If the size doesn't match within one pixel, then it is of a different aspect ratio, so we skip it, unless it's the thumbnail size					if ( 'thumbnail' != $_size && ( !$maybe_cropped || ( $maybe_cropped[4] != $data['width'] && $maybe_cropped[4] + 1 != $data['width'] ) || ( $maybe_cropped[5] != $data['height'] && $maybe_cropped[5] + 1 != $data['height'] ) ) )						continue;					// If we're still here, then we're going to use this size					$file = $data['file'];					list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );					return compact( 'file', 'width', 'height' );				}			}		}	}	if ( is_array($size) || empty($size) || empty($imagedata['sizes'][$size]) )		return false;	$data = $imagedata['sizes'][$size];	// include the full filesystem path of the intermediate file	if ( empty($data['path']) && !empty($data['file']) ) {		$file_url = wp_get_attachment_url($post_id);		$data['path'] = path_join( dirname($imagedata['file']), $data['file'] );		$data['url'] = path_join( dirname($file_url), $data['file'] );	}	return $data;}/** * Get the available image sizes * @since 3.0.0 * @return array Returns a filtered array of image size strings */function get_intermediate_image_sizes() {	global $_wp_additional_image_sizes;	$image_sizes = array('thumbnail', 'medium', 'large'); // Standard sizes	if ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) )		$image_sizes = array_merge( $image_sizes, array_keys( $_wp_additional_image_sizes ) );	return apply_filters( 'intermediate_image_sizes', $image_sizes );}/** * Retrieve an image to represent an attachment. * * A mime icon for files, thumbnail or intermediate size for images. * * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return bool|array Returns an array (url, width, height), or false, if no image is available. */function wp_get_attachment_image_src($attachment_id, $size='thumbnail', $icon = false) {	// get a thumbnail or intermediate image if there is one	if ( $image = image_downsize($attachment_id, $size) )		return $image;	$src = false;	if ( $icon && $src = wp_mime_type_icon($attachment_id) ) {		$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );		$src_file = $icon_dir . '/' . basename($src);		@list($width, $height) = getimagesize($src_file);	}	if ( $src && $width && $height )		return array( $src, $width, $height );	return false;}/** * Get an HTML img element representing an image attachment * * While $size will accept an array, it is better to register a size with * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @see add_image_size() * @uses apply_filters() Calls 'wp_get_attachment_image_attributes' hook on attributes array * @uses wp_get_attachment_image_src() Gets attachment file URL and dimensions * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return string HTML img element or empty string on failure. */function wp_get_attachment_image($attachment_id, $size = 'thumbnail', $icon = false, $attr = '') {	$html = '';	$image = wp_get_attachment_image_src($attachment_id, $size, $icon);	if ( $image ) {		list($src, $width, $height) = $image;		$hwstring = image_hwstring($width, $height);		if ( is_array($size) )			$size = join('x', $size);		$attachment =& get_post($attachment_id);		$default_attr = array(			'src'	=> $src,			'class'	=> "attachment-$size",			'alt'	=> trim(strip_tags( get_post_meta($attachment_id, '_wp_attachment_image_alt', true) )), // Use Alt field first			'title'	=> trim(strip_tags( $attachment->post_title )),		);		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_excerpt )); // If not, Use the Caption		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_title )); // Finally, use the title		$attr = wp_parse_args($attr, $default_attr);		$attr = apply_filters( 'wp_get_attachment_image_attributes', $attr, $attachment );		$attr = array_map( 'esc_attr', $attr );		$html = rtrim("<img $hwstring");		foreach ( $attr as $name => $value ) {			$html .= " $name=" . '"' . $value . '"';		}		$html .= ' />';	}	return $html;}/** * Adds a 'wp-post-image' class to post thumbnail thumbnails * Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to * dynamically add/remove itself so as to only filter post thumbnail thumbnails * * @since 2.9.0 * @param array $attr Attributes including src, class, alt, title * @return array */function _wp_post_thumbnail_class_filter( $attr ) {	$attr['class'] .= ' wp-post-image';	return $attr;}/** * Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_add( $attr ) {	add_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}/** * Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_remove( $attr ) {	remove_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}add_shortcode('wp_caption', 'img_caption_shortcode');add_shortcode('caption', 'img_caption_shortcode');/** * The Caption shortcode. * * Allows a plugin to replace the content that would otherwise be returned. The * filter is 'img_caption_shortcode' and passes an empty string, the attr * parameter and the content parameter values. * * The supported attributes for the shortcode are 'id', 'align', 'width', and * 'caption'. * * @since 2.6.0 * * @param array $attr Attributes attributed to the shortcode. * @param string $content Optional. Shortcode content. * @return string */function img_caption_shortcode($attr, $content = null) {	// Allow plugins/themes to override the default caption template.	$output = apply_filters('img_caption_shortcode', '', $attr, $content);	if ( $output != '' )		return $output;	extract(shortcode_atts(array(		'id'	=> '',		'align'	=> 'alignnone',		'width'	=> '',		'caption' => ''	), $attr));	if ( 1 > (int) $width || empty($caption) )		return $content;	if ( $id ) $id = 'id="' . esc_attr($id) . '" ';	return '<div ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px">'	. do_shortcode( $content ) . '<p class="wp-caption-text">' . $caption . '</p></div>';}add_shortcode('gallery', 'gallery_shortcode');/** * The Gallery shortcode. * * This implements the functionality of the Gallery Shortcode for displaying * WordPress images on a post. * * @since 2.5.0 * * @param array $attr Attributes attributed to the shortcode. * @return string HTML content to display gallery. */function gallery_shortcode($attr) {	global $post, $wp_locale;	static $instance = 0;	$instance++;	// Allow plugins/themes to override the default gallery template.	$output = apply_filters('post_gallery', '', $attr);	if ( $output != '' )		return $output;	// We're trusting author input, so let's at least make sure it looks like a valid orderby statement	if ( isset( $attr['orderby'] ) ) {		$attr['orderby'] = sanitize_sql_orderby( $attr['orderby'] );		if ( !$attr['orderby'] )			unset( $attr['orderby'] );	}	extract(shortcode_atts(array(		'order'      => 'ASC',		'orderby'    => 'menu_order ID',		'id'         => $post->ID,		'itemtag'    => 'dl',		'icontag'    => 'dt',		'captiontag' => 'dd',		'columns'    => 3,		'size'       => 'thumbnail',		'include'    => '',		'exclude'    => ''	), $attr));	$id = intval($id);	if ( 'RAND' == $order )		$orderby = 'none';	if ( !empty($include) ) {		$include = preg_replace( '/[^0-9,]+/', '', $include );		$_attachments = get_posts( array('include' => $include, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );		$attachments = array();		foreach ( $_attachments as $key => $val ) {			$attachments[$val->ID] = $_attachments[$key];		}	} elseif ( !empty($exclude) ) {		$exclude = preg_replace( '/[^0-9,]+/', '', $exclude );		$attachments = get_children( array('post_parent' => $id, 'exclude' => $exclude, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	} else {		$attachments = get_children( array('post_parent' => $id, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	}	if ( empty($attachments) )		return '';	if ( is_feed() ) {		$output = "\n";		foreach ( $attachments as $att_id => $attachment )			$output .= wp_get_attachment_link($att_id, $size, true) . "\n";		return $output;	}	$itemtag = tag_escape($itemtag);	$captiontag = tag_escape($captiontag);	$columns = intval($columns);	$itemwidth = $columns > 0 ? floor(100/$columns) : 100;	$float = is_rtl() ? 'right' : 'left';	$selector = "gallery-{$instance}";	$output = apply_filters('gallery_style', "		<style type='text/css'>			#{$selector} {				margin: auto;			}			#{$selector} .gallery-item {				float: {$float};				margin-top: 10px;				text-align: center;				width: {$itemwidth}%;			}			#{$selector} img {				border: 2px solid #cfcfcf;			}			#{$selector} .gallery-caption {				margin-left: 0;			}		</style>		<!-- see gallery_shortcode() in wp-includes/media.php -->		<div id='$selector' class='gallery galleryid-{$id}'>");	$i = 0;	foreach ( $attachments as $id => $attachment ) {		$link = isset($attr['link']) && 'file' == $attr['link'] ? wp_get_attachment_link($id, $size, false, false) : wp_get_attachment_link($id, $size, true, false);		$output .= "<{$itemtag} class='gallery-item'>";		$output .= "			<{$icontag} class='gallery-icon'>				$link			</{$icontag}>";		if ( $captiontag && trim($attachment->post_excerpt) ) {			$output .= "				<{$captiontag} class='gallery-caption'>				" . wptexturize($attachment->post_excerpt) . "				</{$captiontag}>";		}		$output .= "</{$itemtag}>";		if ( $columns > 0 && ++$i % $columns == 0 )			$output .= '<br style="clear: both" />';	}	$output .= "			<br style='clear: both;' />		</div>\n";	return $output;}/** * Display previous image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function previous_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(true, $size, $text);}/** * Display next image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function next_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(false, $size, $text);}/** * Display next or previous image link that has the same post parent. * * Retrieves the current attachment object from the $post global. * * @since 2.5.0 * * @param bool $prev Optional. Default is true to display previous link, true for next. */function adjacent_image_link($prev = true, $size = 'thumbnail', $text = false) {	global $post;	$post = get_post($post);	$attachments = array_values(get_children( array('post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID') ));	foreach ( $attachments as $k => $attachment )		if ( $attachment->ID == $post->ID )			break;	$k = $prev ? $k - 1 : $k + 1;	if ( isset($attachments[$k]) )		echo wp_get_attachment_link($attachments[$k]->ID, $size, true, false, $text);}/** * Retrieve taxonomies attached to the attachment. * * @since 2.5.0 * * @param int|array|object $attachment Attachment ID, Attachment data array, or Attachment data object. * @return array Empty array on failure. List of taxonomies on success. */function get_attachment_taxonomies($attachment) {	if ( is_int( $attachment ) )		$attachment = get_post($attachment);	else if ( is_array($attachment) )		$attachment = (object) $attachment;	if ( ! is_object($attachment) )		return array();	$filename = basename($attachment->guid);	$objects = array('attachment');	if ( false !== strpos($filename, '.') )		$objects[] = 'attachment:' . substr($filename, strrpos($filename, '.') + 1);	if ( !empty($attachment->post_mime_type) ) {		$objects[] = 'attachment:' . $attachment->post_mime_type;		if ( false !== strpos($attachment->post_mime_type, '/') )			foreach ( explode('/', $attachment->post_mime_type) as $token )				if ( !empty($token) )					$objects[] = "attachment:$token";	}	$taxonomies = array();	foreach ( $objects as $object )		if ( $taxes = get_object_taxonomies($object) )			$taxonomies = array_merge($taxonomies, $taxes);	return array_unique($taxonomies);}/** * Check if the installed version of GD supports particular image type * * @since 2.9.0 * * @param $mime_type string * @return bool */function gd_edit_image_support($mime_type) {	if ( function_exists('imagetypes') ) {		switch( $mime_type ) {			case 'image/jpeg':				return (imagetypes() & IMG_JPG) != 0;			case 'image/png':				return (imagetypes() & IMG_PNG) != 0;			case 'image/gif':				return (imagetypes() & IMG_GIF) != 0;		}	} else {		switch( $mime_type ) {			case 'image/jpeg':				return function_exists('imagecreatefromjpeg');			case 'image/png':				return function_exists('imagecreatefrompng');			case 'image/gif':				return function_exists('imagecreatefromgif');		}	}	return false;}/** * Create new GD image resource with transparency support * * @since 2.9.0 * * @param $width * @param $height * @return image resource */function wp_imagecreatetruecolor($width, $height) {	$img = imagecreatetruecolor($width, $height);	if ( is_resource($img) && function_exists('imagealphablending') && function_exists('imagesavealpha') ) {		imagealphablending($img, false);		imagesavealpha($img, true);	}	return $img;}/** * API for easily embedding rich media such as videos and images into content. * * @package WordPress * @subpackage Embed * @since 2.9.0 */class WP_Embed {	var $handlers = array();	var $post_ID;	var $usecache = true;	var $linkifunknown = true;	/**	 * PHP4 constructor	 */	function WP_Embed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 */	function __construct() {		// Hack to get the [embed] shortcode to run before wpautop()		add_filter( 'the_content', array(&$this, 'run_shortcode'), 8 );		// Shortcode placeholder for strip_shortcodes()		add_shortcode( 'embed', '__return_false' );		// Attempts to embed all URLs in a post		if ( get_option('embed_autourls') )			add_filter( 'the_content', array(&$this, 'autoembed'), 8 );		// After a post is saved, invalidate the oEmbed cache		add_action( 'save_post', array(&$this, 'delete_oembed_caches') );		// After a post is saved, cache oEmbed items via AJAX		add_action( 'edit_form_advanced', array(&$this, 'maybe_run_ajax_cache') );	}	/**	 * Process the [embed] shortcode.	 *	 * Since the [embed] shortcode needs to be run earlier than other shortcodes,	 * this function removes all existing shortcodes, registers the [embed] shortcode,	 * calls {@link do_shortcode()}, and then re-registers the old shortcodes.	 *	 * @uses $shortcode_tags	 * @uses remove_all_shortcodes()	 * @uses add_shortcode()	 * @uses do_shortcode()	 *	 * @param string $content Content to parse	 * @return string Content with shortcode parsed	 */	function run_shortcode( $content ) {		global $shortcode_tags;		// Backup current registered shortcodes and clear them all out		$orig_shortcode_tags = $shortcode_tags;		remove_all_shortcodes();		add_shortcode( 'embed', array(&$this, 'shortcode') );		// Do the shortcode (only the [embed] one is registered)		$content = do_shortcode( $content );		// Put the original shortcodes back		$shortcode_tags = $orig_shortcode_tags;		return $content;	}	/**	 * If a post/page was saved, then output Javascript to make	 * an AJAX request that will call WP_Embed::cache_oembed().	 */	function maybe_run_ajax_cache() {		global $post_ID;		if ( empty($post_ID) || empty($_GET['message']) || 1 != $_GET['message'] )			return;?><script type="text/javascript">/* <![CDATA[ */	jQuery(document).ready(function($){		$.get("<?php echo admin_url( 'admin-ajax.php?action=oembed-cache&post=' . $post_ID ); ?>");	});/* ]]> */</script><?php	}	/**	 * Register an embed handler. Do not use this function directly, use {@link wp_embed_register_handler()} instead.	 * This function should probably also only be used for sites that do not support oEmbed.	 *	 * @param string $id An internal ID/name for the handler. Needs to be unique.	 * @param string $regex The regex that will be used to see if this handler should be used for a URL.	 * @param callback $callback The callback function that will be called if the regex is matched.	 * @param int $priority Optional. Used to specify the order in which the registered handlers will be tested (default: 10). Lower numbers correspond with earlier testing, and handlers with the same priority are tested in the order in which they were added to the action.	 */	function register_handler( $id, $regex, $callback, $priority = 10 ) {		$this->handlers[$priority][$id] = array(			'regex'    => $regex,			'callback' => $callback,		);	}	/**	 * Unregister a previously registered embed handler. Do not use this function directly, use {@link wp_embed_unregister_handler()} instead.	 *	 * @param string $id The handler ID that should be removed.	 * @param int $priority Optional. The priority of the handler to be removed (default: 10).	 */	function unregister_handler( $id, $priority = 10 ) {		if ( isset($this->handlers[$priority][$id]) )			unset($this->handlers[$priority][$id]);	}	/**	 * The {@link do_shortcode()} callback function.	 *	 * Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of the registered embed handlers.	 * If none of the regex matches and it's enabled, then the URL will be given to the {@link WP_oEmbed} class.	 *	 * @uses wp_oembed_get()	 * @uses wp_parse_args()	 * @uses wp_embed_defaults()	 * @uses WP_Embed::maybe_make_link()	 * @uses get_option()	 * @uses current_user_can()	 * @uses wp_cache_get()	 * @uses wp_cache_set()	 * @uses get_post_meta()	 * @uses update_post_meta()	 *	 * @param array $attr Shortcode attributes.	 * @param string $url The URL attempting to be embeded.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function shortcode( $attr, $url = '' ) {		global $post;		if ( empty($url) )			return '';		$rawattr = $attr;		$attr = wp_parse_args( $attr, wp_embed_defaults() );		// Look for known internal handlers		ksort( $this->handlers );		foreach ( $this->handlers as $priority => $handlers ) {			foreach ( $handlers as $id => $handler ) {				if ( preg_match( $handler['regex'], $url, $matches ) && is_callable( $handler['callback'] ) ) {					if ( false !== $return = call_user_func( $handler['callback'], $matches, $attr, $url, $rawattr ) )						return apply_filters( 'embed_handler_html', $return, $url, $attr );				}			}		}		$post_ID = ( !empty($post->ID) ) ? $post->ID : null;		if ( !empty($this->post_ID) ) // Potentially set by WP_Embed::cache_oembed()			$post_ID = $this->post_ID;		// Unknown URL format. Let oEmbed have a go.		if ( $post_ID ) {			// Check for a cached result (stored in the post meta)			$cachekey = '_oembed_' . md5( $url . serialize( $attr ) );			if ( $this->usecache ) {				$cache = get_post_meta( $post_ID, $cachekey, true );				// Failures are cached				if ( '{{unknown}}' === $cache )					return $this->maybe_make_link( $url );				if ( !empty($cache) )					return apply_filters( 'embed_oembed_html', $cache, $url, $attr );			}			// Use oEmbed to get the HTML			$attr['discover'] = ( apply_filters('embed_oembed_discover', false) && author_can( $post_ID, 'unfiltered_html' ) );			$html = wp_oembed_get( $url, $attr );			// Cache the result			$cache = ( $html ) ? $html : '{{unknown}}';			update_post_meta( $post_ID, $cachekey, $cache );			// If there was a result, return it			if ( $html )				return apply_filters( 'embed_oembed_html', $html, $url, $attr );		}		// Still unknown		return $this->maybe_make_link( $url );	}	/**	 * Delete all oEmbed caches.	 *	 * @param int $post_ID Post ID to delete the caches for.	 */	function delete_oembed_caches( $post_ID ) {		$post_metas = get_post_custom_keys( $post_ID );		if ( empty($post_metas) )			return;		foreach( $post_metas as $post_meta_key ) {			if ( '_oembed_' == substr( $post_meta_key, 0, 8 ) )				delete_post_meta( $post_ID, $post_meta_key );		}	}	/**	 * Triggers a caching of all oEmbed results.	 *	 * @param int $post_ID Post ID to do the caching for.	 */	function cache_oembed( $post_ID ) {		$post = get_post( $post_ID );		if ( empty($post->ID) || !in_array( $post->post_type, apply_filters( 'embed_cache_oembed_types', array( 'post', 'page' ) ) ) )			return;		// Trigger a caching		if ( !empty($post->post_content) ) {			$this->post_ID = $post->ID;			$this->usecache = false;			$content = $this->run_shortcode( $post->post_content );			if ( get_option('embed_autourls') )				$this->autoembed( $content );			$this->usecache = true;		}	}	/**	 * Passes any unlinked URLs that are on their own line to {@link WP_Embed::shortcode()} for potential embedding.	 *	 * @uses WP_Embed::autoembed_callback()	 *	 * @param string $content The content to be searched.	 * @return string Potentially modified $content.	 */	function autoembed( $content ) {		return preg_replace_callback( '|^\s*(https?://[^\s"]+)\s*$|im', array(&$this, 'autoembed_callback'), $content );	}	/**	 * Callback function for {@link WP_Embed::autoembed()}.	 *	 * @uses WP_Embed::shortcode()	 *	 * @param array $match A regex match array.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function autoembed_callback( $match ) {		$oldval = $this->linkifunknown;		$this->linkifunknown = false;		$return = $this->shortcode( array(), $match[1] );		$this->linkifunknown = $oldval;		return "\n$return\n";	}	/**	 * Conditionally makes a hyperlink based on an internal class variable.	 *	 * @param string $url URL to potentially be linked.	 * @return string Linked URL or the original URL.	 */	function maybe_make_link( $url ) {		$output = ( $this->linkifunknown ) ? '<a href="' . esc_attr($url) . '">' . esc_html($url) . '</a>' : $url;		return apply_filters( 'embed_maybe_make_link', $output, $url );	}}$wp_embed = new WP_Embed();/** * Register an embed handler. This function should probably only be used for sites that do not support oEmbed. * * @since 2.9.0 * @see WP_Embed::register_handler() */function wp_embed_register_handler( $id, $regex, $callback, $priority = 10 ) {	global $wp_embed;	$wp_embed->register_handler( $id, $regex, $callback, $priority );}/** * Unregister a previously registered embed handler. * * @since 2.9.0 * @see WP_Embed::unregister_handler() */function wp_embed_unregister_handler( $id, $priority = 10 ) {	global $wp_embed;	$wp_embed->unregister_handler( $id, $priority );}/** * Create default array of embed parameters. * * @since 2.9.0 * * @return array Default embed parameters. */function wp_embed_defaults() {	if ( !empty($GLOBALS['content_width']) )		$theme_width = (int) $GLOBALS['content_width'];	$width = get_option('embed_size_w');	if ( empty($width) && !empty($theme_width) )		$width = $theme_width;	if ( empty($width) )		$width = 500;	$height = get_option('embed_size_h');	if ( empty($height) )		$height = 700;	return apply_filters( 'embed_defaults', array(		'width'  => $width,		'height' => $height,	) );}/** * Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height. * * @since 2.9.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $example_width The width of an example embed. * @param int $example_height The height of an example embed. * @param int $max_width The maximum allowed width. * @param int $max_height The maximum allowed height. * @return array The maximum possible width and height based on the example ratio. */function wp_expand_dimensions( $example_width, $example_height, $max_width, $max_height ) {	$example_width  = (int) $example_width;	$example_height = (int) $example_height;	$max_width      = (int) $max_width;	$max_height     = (int) $max_height;	return wp_constrain_dimensions( $example_width * 1000000, $example_height * 1000000, $max_width, $max_height );}/** * Attempts to fetch the embed HTML for a provided URL using oEmbed. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * @uses WP_oEmbed::get_html() * * @param string $url The URL that should be embeded. * @param array $args Addtional arguments and parameters. * @return string The original URL on failure or the embed HTML on success. */function wp_oembed_get( $url, $args = '' ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	return $oembed->get_html( $url, $args );}/** * Adds a URL format and oEmbed provider URL pair. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * * @param string $format The format of URL that this provider can handle. You can use asterisks as wildcards. * @param string $provider The URL to the oEmbed provider. * @param boolean $regex Whether the $format parameter is in a regex format. */function wp_oembed_add_provider( $format, $provider, $regex = false ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	$oembed->providers[$format] = array( $provider, $regex );}
<?php/** * Simple and uniform HTTP request API. * * Will eventually replace and standardize the WordPress HTTP requests made. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * Returns the initialized WP_Http Object * * @since 2.7.0 * @access private * * @return WP_Http HTTP Transport object. */function &_wp_http_get_object() {	static $http;	if ( is_null($http) )		$http = new WP_Http();	return $http;}/** * Retrieve the raw response from the HTTP request. * * The array structure is a little complex. * * <code> * $res = array( 'headers' => array(), 'response' => array('code' => int, 'message' => string) ); * </code> * * All of the headers in $res['headers'] are with the name as the key and the * value as the value. So to get the User-Agent, you would do the following. * * <code> * $user_agent = $res['headers']['user-agent']; * </code> * * The body is the raw response content and can be retrieved from $res['body']. * * This function is called first to make the request and there are other API * functions to abstract out the above convoluted setup. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_request($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->request($url, $args);}/** * Retrieve the raw response from the HTTP request using the GET method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_get($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->get($url, $args);}/** * Retrieve the raw response from the HTTP request using the POST method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_post($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->post($url, $args);}/** * Retrieve the raw response from the HTTP request using the HEAD method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_head($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->head($url, $args);}/** * Retrieve only the headers from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return array The headers of the response. Empty array if incorrect parameter given. */function wp_remote_retrieve_headers(&$response) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return array();	return $response['headers'];}/** * Retrieve a single header by name from the raw response. * * @since 2.7.0 * * @param array $response * @param string $header Header name to retrieve value from. * @return string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist. */function wp_remote_retrieve_header(&$response, $header) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return '';	if ( array_key_exists($header, $response['headers']) )		return $response['headers'][$header];	return '';}/** * Retrieve only the response code from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string the response code. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_code(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['code'];}/** * Retrieve only the response message from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The response message. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_message(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['message'];}/** * Retrieve only the body from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The body of the response. Empty string if no body or incorrect parameter given. */function wp_remote_retrieve_body(&$response) {	if ( is_wp_error($response) || ! isset($response['body']) )		return '';	return $response['body'];}?>
<?php/** * The template for displaying 404 pages (Not Found). * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>	<div id="container">		<div id="content" role="main">			<div id="post-0" class="post error404 not-found">				<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>				<div class="entry-content">					<p><?php _e( 'Apologies, but the page you requested could not be found. Perhaps searching will help.', 'twentyten' ); ?></p>					<?php get_search_form(); ?>				</div><!-- .entry-content -->			</div><!-- #post-0 -->		</div><!-- #content -->	</div><!-- #container -->	<script type="text/javascript">		// focus on search field after it has loaded		document.getElementById('s') && document.getElementById('s').focus();	</script><?php get_footer(); ?>
<?php/** * Template Name: One column, no sidebar * * A custom page template without sidebar. * * The "Template Name:" bit above allows this to be selectable * from a dropdown menu on the edit page screen. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container" class="one-column">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * Media settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Media Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can set maximum sizes for images inserted into your written content; you can also insert an image as Full Size.') . '</p>' .	'<p>' . __('The Embed option allows you embed a video, image, or other media content into your content automatically by typing the URL (of the web page where the file lives) on its own line when you create your content.') . '</p>' .	'<p>' . __('Uploading Options gives you folder and path choices for storing your files in your installation&#8217;s directory.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Media_SubPanel" target="_blank">Documentation on Media Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form action="options.php" method="post"><?php settings_fields('media'); ?><h3><?php _e('Image sizes') ?></h3><p><?php _e('The sizes listed below determine the maximum dimensions in pixels to use when inserting an image into the body of a post.'); ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Thumbnail size') ?></th><td><label for="thumbnail_size_w"><?php _e('Width'); ?></label><input name="thumbnail_size_w" type="text" id="thumbnail_size_w" value="<?php form_option('thumbnail_size_w'); ?>" class="small-text" /><label for="thumbnail_size_h"><?php _e('Height'); ?></label><input name="thumbnail_size_h" type="text" id="thumbnail_size_h" value="<?php form_option('thumbnail_size_h'); ?>" class="small-text" /><br /><input name="thumbnail_crop" type="checkbox" id="thumbnail_crop" value="1" <?php checked('1', get_option('thumbnail_crop')); ?>/><label for="thumbnail_crop"><?php _e('Crop thumbnail to exact dimensions (normally thumbnails are proportional)'); ?></label></td></tr><tr valign="top"><th scope="row"><?php _e('Medium size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Medium size'); ?></span></legend><label for="medium_size_w"><?php _e('Max Width'); ?></label><input name="medium_size_w" type="text" id="medium_size_w" value="<?php form_option('medium_size_w'); ?>" class="small-text" /><label for="medium_size_h"><?php _e('Max Height'); ?></label><input name="medium_size_h" type="text" id="medium_size_h" value="<?php form_option('medium_size_h'); ?>" class="small-text" /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Large size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Large size'); ?></span></legend><label for="large_size_w"><?php _e('Max Width'); ?></label><input name="large_size_w" type="text" id="large_size_w" value="<?php form_option('large_size_w'); ?>" class="small-text" /><label for="large_size_h"><?php _e('Max Height'); ?></label><input name="large_size_h" type="text" id="large_size_h" value="<?php form_option('large_size_h'); ?>" class="small-text" /></fieldset></td></tr><?php do_settings_fields('media', 'default'); ?></table><h3><?php _e('Embeds') ?></h3><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Auto-embeds'); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Attempt to automatically embed all plain text URLs'); ?></span></legend><label for="embed_autourls"><input name="embed_autourls" type="checkbox" id="embed_autourls" value="1" <?php checked( '1', get_option('embed_autourls') ); ?>/> <?php _e('Attempt to automatically embed all plain text URLs'); ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum embed size') ?></th><td><label for="embed_size_w"><?php _e('Width'); ?></label><input name="embed_size_w" type="text" id="embed_size_w" value="<?php form_option('embed_size_w'); ?>" class="small-text" /><label for="embed_size_h"><?php _e('Height'); ?></label><input name="embed_size_h" type="text" id="embed_size_h" value="<?php form_option('embed_size_h'); ?>" class="small-text" /><?php if ( !empty($content_width) ) echo '<br />' . __("If the width value is left blank, embeds will default to the max width of your theme."); ?></td></tr><?php do_settings_fields('media', 'embeds'); ?></table><?php if ( !is_multisite() ) : ?><h3><?php _e('Uploading Files'); ?></h3><table class="form-table"><tr valign="top"><th scope="row"><label for="upload_path"><?php _e('Store uploads in this folder'); ?></label></th><td><input name="upload_path" type="text" id="upload_path" value="<?php echo esc_attr(get_option('upload_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Default is <code>wp-content/uploads</code>'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="upload_url_path"><?php _e('Full URL path to files'); ?></label></th><td><input name="upload_url_path" type="text" id="upload_url_path" value="<?php echo esc_attr( get_option('upload_url_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Configuring this is optional. By default, it should be blank.'); ?></span></td></tr><tr><th scope="row" colspan="2" class="th-full"><label for="uploads_use_yearmonth_folders"><input name="uploads_use_yearmonth_folders" type="checkbox" id="uploads_use_yearmonth_folders" value="1"<?php checked('1', get_option('uploads_use_yearmonth_folders')); ?> /><?php _e('Organize my uploads into month- and year-based folders'); ?></label></th></tr><?php do_settings_fields('media', 'uploads'); ?></table><?php endif; ?><?php do_settings_sections('media'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * The template for displaying the footer. * * Contains the closing of the id=main div and all content * after.  Calls sidebar-footer.php for bottom widgets. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>	</div><!-- #main -->	<div id="footer" role="contentinfo">		<div id="colophon"><?php	/* A sidebar in the footer? Yep. You can can customize	 * your footer with four columns of widgets.	 */	get_sidebar( 'footer' );?>			<div id="site-info">				<a href="<?php echo home_url( '/' ) ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home">					<?php bloginfo( 'name' ); ?>				</a>			</div><!-- #site-info -->			<div id="site-generator">				<?php do_action( 'twentyten_credits' ); ?>				<a href="<?php echo esc_url( __('http://wordpress.org/', 'twentyten') ); ?>"						title="<?php esc_attr_e('Semantic Personal Publishing Platform', 'twentyten'); ?>" rel="generator">					<?php printf( __('Proudly powered by %s.', 'twentyten'), 'WordPress' ); ?>				</a>			</div><!-- #site-generator -->		</div><!-- #colophon -->	</div><!-- #footer --></div><!-- #wrapper --><?php	/* Always have wp_footer() just before the closing </body>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to reference JavaScript files.	 */	wp_footer();?></body></html>
<?php/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );add_action( 'wp_head', 'signuppageheaders' ) ;require( './wp-blog-header.php' );require_once( ABSPATH . WPINC . '/registration.php' );if ( is_array( get_site_option( 'illegal_names' )) && isset( $_GET[ 'new' ] ) && in_array( $_GET[ 'new' ], get_site_option( 'illegal_names' ) ) == true ) {	wp_redirect( network_home_url() );	die();}function do_signup_header() {	do_action("signup_header");}add_action( 'wp_head', 'do_signup_header' );function signuppageheaders() {	echo "<meta name='robots' content='noindex,nofollow' />\n";}if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}if ( !is_main_site() ) {	wp_redirect( network_home_url( 'wp-signup.php' ) );	die();}// Fix for page title$wp_query->is_404 = false;function wpmu_signup_stylesheet() {	?>	<style type="text/css">		.mu_register { width: 90%; margin:0 auto; }		.mu_register form { margin-top: 2em; }		.mu_register .error { font-weight:700; padding:10px; color:#333333; background:#FFEBE8; border:1px solid #CC0000; }		.mu_register input[type="submit"],			.mu_register #blog_title,			.mu_register #user_email,			.mu_register #blogname,			.mu_register #user_name { width:100%; font-size: 24px; margin:5px 0; }		.mu_register .prefix_address,			.mu_register .suffix_address {font-size: 18px;display:inline; }		.mu_register label { font-weight:700; font-size:15px; display:block; margin:10px 0; }		.mu_register label.checkbox { display:inline; }		.mu_register .mu_alert { font-weight:700; padding:10px; color:#333333; background:#ffffe0; border:1px solid #e6db55; }	</style>	<?php}add_action( 'wp_head', 'wpmu_signup_stylesheet' );get_header();do_action( 'before_signup_form' );?><div id="content" class="widecolumn"><div class="mu_register"><?phpfunction show_blog_form($blogname = '', $blog_title = '', $errors = '') {	global $current_site;	// Blog name	if ( !is_subdomain_install() )		echo '<label for="blogname">' . __('Site Name:') . '</label>';	else		echo '<label for="blogname">' . __('Site Domain:') . '</label>';	if ( $errmsg = $errors->get_error_message('blogname') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	if ( !is_subdomain_install() )		echo '<span class="prefix_address">' . $current_site->domain . $current_site->path . '</span><input name="blogname" type="text" id="blogname" value="'. esc_attr($blogname) .'" maxlength="60" /><br />';	else		echo '<input name="blogname" type="text" id="blogname" value="'.esc_attr($blogname).'" maxlength="60" /><span class="suffix_address">.' . ( $site_domain = preg_replace( '|^www\.|', '', $current_site->domain ) ) . '</span><br />';	if ( !is_user_logged_in() ) {		print '(<strong>' . __( 'Your address will be ' );		if ( !is_subdomain_install() )			print $current_site->domain . $current_site->path . __( 'sitename' );		else			print __( 'domain.' ) . $site_domain . $current_site->path;		echo '.</strong>) ' . __( 'Must be at least 4 characters, letters and numbers only. It cannot be changed, so choose carefully!' ) . '</p>';	}	// Blog Title	?>	<label for="blog_title"><?php _e('Site Title:') ?></label>	<?php if ( $errmsg = $errors->get_error_message('blog_title') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	echo '<input name="blog_title" type="text" id="blog_title" value="'.esc_attr($blog_title).'" />';	?>	<div id="privacy">        <p class="privacy-intro">            <label for="blog_public_on"><?php _e('Privacy:') ?></label>            <?php _e('Allow my site to appear in search engines like Google, Technorati, and in public listings around this network.'); ?>            <br style="clear:both" />            <label class="checkbox" for="blog_public_on">                <input type="radio" id="blog_public_on" name="blog_public" value="1" <?php if ( !isset( $_POST['blog_public'] ) || $_POST['blog_public'] == '1' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'Yes' ); ?></strong>            </label>            <label class="checkbox" for="blog_public_off">                <input type="radio" id="blog_public_off" name="blog_public" value="0" <?php if ( isset( $_POST['blog_public'] ) && $_POST['blog_public'] == '0' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'No' ); ?></strong>            </label>        </p>	</div>	<?php	do_action('signup_blogform', $errors);}function validate_blog_form() {	$user = '';	if ( is_user_logged_in() )		$user = wp_get_current_user();	return wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title'], $user);}function show_user_form($user_name = '', $user_email = '', $errors = '') {	// User name	echo '<label for="user_name">' . __('Username:') . '</label>';	if ( $errmsg = $errors->get_error_message('user_name') ) {		echo '<p class="error">'.$errmsg.'</p>';	}	echo '<input name="user_name" type="text" id="user_name" value="'. esc_attr($user_name) .'" maxlength="60" /><br />';	_e( '(Must be at least 4 characters, letters and numbers only.)' );	?>	<label for="user_email"><?php _e( 'Email&nbsp;Address:' ) ?></label>	<?php if ( $errmsg = $errors->get_error_message('user_email') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php } ?>	<input name="user_email" type="text" id="user_email" value="<?php  echo esc_attr($user_email) ?>" maxlength="200" /><br /><?php _e('We send your registration email to this address. (Double-check your email address before continuing.)') ?>	<?php	if ( $errmsg = $errors->get_error_message('generic') ) {		echo '<p class="error">' . $errmsg . '</p>';	}	do_action( 'signup_extra_fields', $errors );}function validate_user_form() {	return wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);}function signup_another_blog($blogname = '', $blog_title = '', $errors = '') {	global $current_user, $current_site;	if ( ! is_wp_error($errors) ) {		$errors = new WP_Error();	}	// allow definition of default variables	$filtered_results = apply_filters('signup_another_blog_init', array('blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	echo '<h2>' . sprintf( __( 'Get <em>another</em> %s site in seconds' ), $current_site->site_name ) . '</h2>';	if ( $errors->get_error_code() ) {		echo '<p>' . __( 'There was a problem, please correct the form below and try again.' ) . '</p>';	}	?>	<p><?php printf( __( 'Welcome back, %s. By filling out the form below, you can <strong>add another site to your account</strong>. There is no limit to the number of sites you can have, so create to your heart&#8217;s content, but write responsibly!' ), $current_user->display_name ) ?></p>	<?php	$blogs = get_blogs_of_user($current_user->ID);	if ( !empty($blogs) ) { ?>			<p><?php _e( 'Sites you are already a member of:' ) ?></p>			<ul>				<?php foreach ( $blogs as $blog ) {					$home_url = get_home_url( $blog->userblog_id );					echo '<li><a href="' . esc_url( $home_url ) . '">' . $home_url . '</a></li>';				} ?>			</ul>	<?php } ?>	<p><?php _e( 'If you&#8217;re not going to use a great site domain, leave it for a new user. Now have at it!' ) ?></p>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="gimmeanotherblog" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e( 'Create Site' ) ?>" /></p>	</form>	<?php}function validate_another_blog_signup() {	global $wpdb, $current_user, $blogname, $blog_title, $errors, $domain, $path;	$current_user = wp_get_current_user();	if ( !is_user_logged_in() )		die();	$result = validate_blog_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_another_blog($blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = apply_filters( 'signup_create_blog_meta', array( 'lang_id' => 1, 'public' => $public ) ); // deprecated	$meta = apply_filters( 'add_signup_meta', $meta );	wpmu_create_blog( $domain, $path, $blog_title, $current_user->id, $meta, $wpdb->siteid );	confirm_another_blog_signup($domain, $path, $blog_title, $current_user->user_login, $current_user->user_email, $meta);	return true;}function confirm_another_blog_signup($domain, $path, $blog_title, $user_name, $user_email = '', $meta = '') {	?>	<h2><?php printf( __( 'The site %s is yours.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p>		<?php printf( __( '<a href="http://%1$s">http://%2$s</a> is your new site.  <a href="%3$s">Log in</a> as &#8220;%4$s&#8221; using your existing password.' ), $domain.$path, $domain.$path, "http://" . $domain.$path . "wp-login.php", $user_name ) ?>	</p>	<?php	do_action( 'signup_finished' );}function signup_user($user_name = '', $user_email = '', $errors = '') {	global $current_site, $active_signup;	if ( !is_wp_error($errors) )		$errors = new WP_Error();	if ( isset( $_POST[ 'signup_for' ] ) )		$signup[ esc_html( $_POST[ 'signup_for' ] ) ] = 'checked="checked"';	else		$signup[ 'blog' ] = 'checked="checked"';	//TODO - This doesn't seem to do anything do we really need it?	$signup['user'] = isset( $signup['user'] ) ? $signup['user'] : '';	// allow definition of default variables	$filtered_results = apply_filters('signup_user_init', array('user_name' => $user_name, 'user_email' => $user_email, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$errors = $filtered_results['errors'];	?>	<h2><?php printf( __( 'Get your own %s account in seconds' ), $current_site->site_name ) ?></h2>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-user-signup" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_user_form($user_name, $user_email, $errors); ?>		<p>		<?php if ( $active_signup == 'blog' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="blog" />		<?php } elseif ( $active_signup == 'user' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="user" />		<?php } else { ?>			<input id="signupblog" type="radio" name="signup_for" value="blog" <?php echo $signup['blog'] ?> />			<label class="checkbox" for="signupblog"><?php _e('Gimme a site!') ?></label>			<br />			<input id="signupuser" type="radio" name="signup_for" value="user" <?php echo $signup['user'] ?> />			<label class="checkbox" for="signupuser"><?php _e('Just a username, please.') ?></label>		<?php } ?>		</p>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Next') ?>" /></p>	</form>	<?php}function validate_user_signup() {	$result = validate_user_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	if ( 'blog' == $_POST['signup_for'] ) {		signup_blog($user_name, $user_email);		return false;	}	wpmu_signup_user($user_name, $user_email, apply_filters( "add_signup_meta", array() ) );	confirm_user_signup($user_name, $user_email);	return true;}function confirm_user_signup($user_name, $user_email) {	?>	<h2><?php printf( __( '%s is your new username' ), $user_name) ?></h2>	<p><?php _e( 'But, before you can start using your new username, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf(__( 'Check your inbox at <strong>%1$s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your username within two days, you will have to sign up again.' ); ?></p>	<?php	do_action( 'signup_finished' );}function signup_blog($user_name = '', $user_email = '', $blogname = '', $blog_title = '', $errors = '') {	if ( !is_wp_error($errors) )		$errors = new WP_Error();	// allow definition of default variables	$filtered_results = apply_filters('signup_blog_init', array('user_name' => $user_name, 'user_email' => $user_email, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	if ( empty($blogname) )		$blogname = $user_name;	?>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-blog-signup" />		<input type="hidden" name="user_name" value="<?php echo esc_attr($user_name) ?>" />		<input type="hidden" name="user_email" value="<?php echo esc_attr($user_email) ?>" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Signup') ?>" /></p>	</form>	<?php}function validate_blog_signup() {	// Re-validate user info.	$result = wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	$result = wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title']);	extract($result);	if ( $errors->get_error_code() ) {		signup_blog($user_name, $user_email, $blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = array ('lang_id' => 1, 'public' => $public);	$meta = apply_filters( "add_signup_meta", $meta );	wpmu_signup_blog($domain, $path, $blog_title, $user_name, $user_email, $meta);	confirm_blog_signup($domain, $path, $blog_title, $user_name, $user_email, $meta);	return true;}function confirm_blog_signup($domain, $path, $blog_title, $user_name = '', $user_email = '', $meta) {	?>	<h2><?php printf( __( 'Congratulations! Your new site, %s, is almost ready.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p><?php _e( 'But, before you can start using your site, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf( __( 'Check your inbox at <strong>%s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your site within two days, you will have to sign up again.' ); ?></p>	<h2><?php _e( 'Still waiting for your email?' ); ?></h2>	<p>		<?php _e( 'If you haven&#8217;t received your email yet, there are a number of things you can do:' ) ?>		<ul id="noemail-tips">			<li><p><strong><?php _e( 'Wait a little longer. Sometimes delivery of email can be delayed by processes outside of our control.' ) ?></strong></p></li>			<li><p><?php _e( 'Check the junk or spam folder of your email client. Sometime emails wind up there by mistake.' ) ?></p></li>			<li><?php printf( __( 'Have you entered your email correctly?  You have entered %s, if it&#8217;s incorrect, you will not receive your email.' ), $user_email ) ?></li>		</ul>	</p>	<?php	do_action( 'signup_finished' );}// Main$active_signup = get_site_option( 'registration' );if ( !$active_signup )	$active_signup = 'all';$active_signup = apply_filters( 'wpmu_active_signup', $active_signup ); // return "all", "none", "blog" or "user"// Make the signup type translatable.$i18n_signup['all'] = _x('all', 'Multisite active signup type');$i18n_signup['none'] = _x('none', 'Multisite active signup type');$i18n_signup['blog'] = _x('blog', 'Multisite active signup type');$i18n_signup['user'] = _x('user', 'Multisite active signup type');if ( is_super_admin() )	echo '<div class="mu_alert">' . sprintf( __( 'Greetings Site Administrator! You are currently allowing &#8220;%s&#8221; registrations. To change or disable registration go to your <a href="%s">Options page</a>.' ), $i18n_signup[$active_signup], esc_url( network_admin_url( 'ms-options.php' ) ) ) . '</div>';$newblogname = isset($_GET['new']) ? strtolower(preg_replace('/^-|-$|[^-a-zA-Z0-9]/', '', $_GET['new'])) : null;$current_user = wp_get_current_user();if ( $active_signup == "none" ) {	_e( 'Registration has been disabled.' );} elseif ( $active_signup == 'blog' && !is_user_logged_in() ) {	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$login_url = site_url( 'wp-login.php?redirect_to=' . urlencode($proto . $_SERVER['HTTP_HOST'] . '/wp-signup.php' ));	echo sprintf( __( 'You must first <a href="%s">log in</a>, and then you can create a new site.' ), $login_url );} else {	$stage = isset( $_POST['stage'] ) ?  $_POST['stage'] : 'default';	switch ( $stage ) {		case 'validate-user-signup' :			if ( $active_signup == 'all' || $_POST[ 'signup_for' ] == 'blog' && $active_signup == 'blog' || $_POST[ 'signup_for' ] == 'user' && $active_signup == 'user' )				validate_user_signup();			else				_e( 'User registration has been disabled.' );		break;		case 'validate-blog-signup':			if ( $active_signup == 'all' || $active_signup == 'blog' )				validate_blog_signup();			else				_e( 'Site registration has been disabled.' );			break;		case 'gimmeanotherblog':			validate_another_blog_signup();			break;		case 'default':		default :			$user_email = isset( $_POST[ 'user_email' ] ) ? $_POST[ 'user_email' ] : '';			do_action( "preprocess_signup_form" ); // populate the form from invites, elsewhere?			if ( is_user_logged_in() && ( $active_signup == 'all' || $active_signup == 'blog' ) )				signup_another_blog($newblogname);			elseif ( is_user_logged_in() == false && ( $active_signup == 'all' || $active_signup == 'user' ) )				signup_user( $newblogname, $user_email );			elseif ( is_user_logged_in() == false && ( $active_signup == 'blog' ) )				_e( 'Sorry, new registrations are not allowed at this time.' );			else				_e( 'You are logged in already. No need to register again!' );			if ( $newblogname ) {				$newblog = get_blogaddress_by_name( $newblogname );				if ( $active_signup == 'blog' || $active_signup == 'all' )					printf( __( '<p><em>The site you were looking for, <strong>%s</strong> does not exist, but you can create it now!</em></p>' ), $newblog );				else					printf( __( '<p><em>The site you were looking for, <strong>%s</strong>, does not exist.</em></p>' ), $newblog );			}			break;	}}?></div></div><?php do_action( 'after_signup_form' ); ?><?php get_footer(); ?>
<?phpfunction mce_put_file( $path, $content ) {	if ( function_exists('file_put_contents') )		return @file_put_contents( $path, $content );	$newfile = false;	$fp = @fopen( $path, 'wb' );	if ($fp) {		$newfile = fwrite( $fp, $content );		fclose($fp);	}	return $newfile;}// escape text only if it needs translatingfunction mce_escape($text) {	global $language;	if ( 'en' == $language ) return $text;	else return esc_js($text);}$lang = 'tinyMCE.addI18n({' . $language . ':{common:{edit_confirm:"' . mce_escape( __('Do you want to use the WYSIWYG mode for this textarea?') ) . '",apply:"' . mce_escape( __('Apply') ) . '",insert:"' . mce_escape( __('Insert') ) . '",update:"' . mce_escape( __('Update') ) . '",cancel:"' . mce_escape( __('Cancel') ) . '",close:"' . mce_escape( __('Close') ) . '",browse:"' . mce_escape( __('Browse') ) . '",class_name:"' . mce_escape( __('Class') ) . '",not_set:"' . mce_escape( __('-- Not set --') ) . '",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",clipboard_no_support:"' . mce_escape( __('Currently not supported by your browser, use keyboard shortcuts instead.') ) . '",popup_blocked:"' . mce_escape( __('Sorry, but we have noticed that your popup-blocker has disabled a window that provides application functionality. You will need to disable popup blocking on this site in order to fully utilize this tool.') ) . '",invalid_data:"' . mce_escape( __('Error: Invalid values entered, these are marked in red.') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '"},contextmenu:{align:"' . mce_escape( /* translators: alignment */ __('Alignment') ) . '",left:"' . mce_escape( /* translators: alignment */ __('Left') ) . '",center:"' . mce_escape( /* translators: alignment */ __('Center') ) . '",right:"' . mce_escape( /* translators: alignment */ __('Right') ) . '",full:"' . mce_escape( /* translators: alignment */ __('Full') ) . '"},insertdatetime:{date_fmt:"' . mce_escape( /* translators: year, month, date */ __('%Y-%m-%d') ) . '",time_fmt:"' . mce_escape( /* translators: hours, minutes, seconds */ __('%H:%M:%S') ) . '",insertdate_desc:"' . mce_escape( __('Insert date') ) . '",inserttime_desc:"' . mce_escape( __('Insert time') ) . '",months_long:"' . mce_escape( __('January').','.__('February').','.__('March').','.__('April').','.__('May').','.__('June').','.__('July').','.__('August').','.__('September').','.__('October').','.__('November').','.__('December') ) . '",months_short:"' . mce_escape( __('Jan_January_abbreviation').','.__('Feb_February_abbreviation').','.__('Mar_March_abbreviation').','.__('Apr_April_abbreviation').','.__('May_May_abbreviation').','.__('Jun_June_abbreviation').','.__('Jul_July_abbreviation').','.__('Aug_August_abbreviation').','.__('Sep_September_abbreviation').','.__('Oct_October_abbreviation').','.__('Nov_November_abbreviation').','.__('Dec_December_abbreviation') ) . '",day_long:"' . mce_escape( __('Sunday').','.__('Monday').','.__('Tuesday').','.__('Wednesday').','.__('Thursday').','.__('Friday').','.__('Saturday') ) . '",day_short:"' . mce_escape( __('Sun').','.__('Mon').','.__('Tue').','.__('Wed').','.__('Thu').','.__('Fri').','.__('Sat') ) . '"},print:{print_desc:"' . mce_escape( __('Print') ) . '"},preview:{preview_desc:"' . mce_escape( __('Preview') ) . '"},directionality:{ltr_desc:"' . mce_escape( __('Direction left to right') ) . '",rtl_desc:"' . mce_escape( __('Direction right to left') ) . '"},layer:{insertlayer_desc:"' . mce_escape( __('Insert new layer') ) . '",forward_desc:"' . mce_escape( __('Move forward') ) . '",backward_desc:"' . mce_escape( __('Move backward') ) . '",absolute_desc:"' . mce_escape( __('Toggle absolute positioning') ) . '",content:"' . mce_escape( __('New layer...') ) . '"},save:{save_desc:"' . mce_escape( __('Save') ) . '",cancel_desc:"' . mce_escape( __('Cancel all changes') ) . '"},nonbreaking:{nonbreaking_desc:"' . mce_escape( __('Insert non-breaking space character') ) . '"},iespell:{iespell_desc:"' . mce_escape( __('Run spell checking') ) . '",download:"' . mce_escape( __('ieSpell not detected. Do you want to install it now?') ) . '"},advhr:{advhr_desc:"' . mce_escape( __('Horizontale rule') ) . '"},emotions:{emotions_desc:"' . mce_escape( __('Emotions') ) . '"},searchreplace:{search_desc:"' . mce_escape( __('Find') ) . '",replace_desc:"' . mce_escape( __('Find/Replace') ) . '"},advimage:{image_desc:"' . mce_escape( __('Insert/edit image') ) . '"},advlink:{link_desc:"' . mce_escape( __('Insert/edit link') ) . '"},xhtmlxtras:{cite_desc:"' . mce_escape( __('Citation') ) . '",abbr_desc:"' . mce_escape( __('Abbreviation') ) . '",acronym_desc:"' . mce_escape( __('Acronym') ) . '",del_desc:"' . mce_escape( __('Deletion') ) . '",ins_desc:"' . mce_escape( __('Insertion') ) . '",attribs_desc:"' . mce_escape( __('Insert/Edit Attributes') ) . '"},style:{desc:"' . mce_escape( __('Edit CSS Style') ) . '"},paste:{paste_text_desc:"' . mce_escape( __('Paste as Plain Text') ) . '",paste_word_desc:"' . mce_escape( __('Paste from Word') ) . '",selectall_desc:"' . mce_escape( __('Select All') ) . '"},paste_dlg:{text_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '",text_linebreaks:"' . mce_escape( __('Keep linebreaks') ) . '",word_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '"},table:{desc:"' . mce_escape( __('Inserts a new table') ) . '",row_before_desc:"' . mce_escape( __('Insert row before') ) . '",row_after_desc:"' . mce_escape( __('Insert row after') ) . '",delete_row_desc:"' . mce_escape( __('Delete row') ) . '",col_before_desc:"' . mce_escape( __('Insert column before') ) . '",col_after_desc:"' . mce_escape( __('Insert column after') ) . '",delete_col_desc:"' . mce_escape( __('Remove column') ) . '",split_cells_desc:"' . mce_escape( __('Split merged table cells') ) . '",merge_cells_desc:"' . mce_escape( __('Merge table cells') ) . '",row_desc:"' . mce_escape( __('Table row properties') ) . '",cell_desc:"' . mce_escape( __('Table cell properties') ) . '",props_desc:"' . mce_escape( __('Table properties') ) . '",paste_row_before_desc:"' . mce_escape( __('Paste table row before') ) . '",paste_row_after_desc:"' . mce_escape( __('Paste table row after') ) . '",cut_row_desc:"' . mce_escape( __('Cut table row') ) . '",copy_row_desc:"' . mce_escape( __('Copy table row') ) . '",del:"' . mce_escape( __('Delete table') ) . '",row:"' . mce_escape( __('Row') ) . '",col:"' . mce_escape( __('Column') ) . '",cell:"' . mce_escape( __('Cell') ) . '"},autosave:{unload_msg:"' . mce_escape( __('The changes you made will be lost if you navigate away from this page.') ) . '"},fullscreen:{desc:"' . mce_escape( __('Toggle fullscreen mode') ) . ' (Alt+Shift+G)"},media:{desc:"' . mce_escape( __('Insert / edit embedded media') ) . '",delta_width:"' . /* translators: Extra width for the media popup in pixels */ mce_escape( _x('0', 'media popup width') ) . '",delta_height:"' . /* translators: Extra height for the media popup in pixels */ mce_escape( _x('0', 'media popup height') ) . '",edit:"' . mce_escape( __('Edit embedded media') ) . '"},fullpage:{desc:"' . mce_escape( __('Document properties') ) . '"},template:{desc:"' . mce_escape( __('Insert predefined template content') ) . '"},visualchars:{desc:"' . mce_escape( __('Visual control characters on/off.') ) . '"},spellchecker:{desc:"' . mce_escape( __('Toggle spellchecker') ) . ' (Alt+Shift+N)",menu:"' . mce_escape( __('Spellchecker settings') ) . '",ignore_word:"' . mce_escape( __('Ignore word') ) . '",ignore_words:"' . mce_escape( __('Ignore all') ) . '",langs:"' . mce_escape( __('Languages') ) . '",wait:"' . mce_escape( __('Please wait...') ) . '",sug:"' . mce_escape( __('Suggestions') ) . '",no_sug:"' . mce_escape( __('No suggestions') ) . '",no_mpell:"' . mce_escape( __('No misspellings found.') ) . '"},pagebreak:{desc:"' . mce_escape( __('Insert Page Break') ) . '"}}});tinyMCE.addI18n("' . $language . '.advanced",{style_select:"' . mce_escape( /* translators: TinyMCE font styles */ _x('Styles', 'TinyMCE font styles') ) . '",font_size:"' . mce_escape( __('Font size') ) . '",fontdefault:"' . mce_escape( __('Font family') ) . '",block:"' . mce_escape( __('Format') ) . '",paragraph:"' . mce_escape( __('Paragraph') ) . '",div:"' . mce_escape( __('Div') ) . '",address:"' . mce_escape( __('Address') ) . '",pre:"' . mce_escape( __('Preformatted') ) . '",h1:"' . mce_escape( __('Heading 1') ) . '",h2:"' . mce_escape( __('Heading 2') ) . '",h3:"' . mce_escape( __('Heading 3') ) . '",h4:"' . mce_escape( __('Heading 4') ) . '",h5:"' . mce_escape( __('Heading 5') ) . '",h6:"' . mce_escape( __('Heading 6') ) . '",blockquote:"' . mce_escape( __('Blockquote') ) . '",code:"' . mce_escape( __('Code') ) . '",samp:"' . mce_escape( __('Code sample') ) . '",dt:"' . mce_escape( __('Definition term ') ) . '",dd:"' . mce_escape( __('Definition description') ) . '",bold_desc:"' . mce_escape( __('Bold') ) . ' (Ctrl / Alt+Shift + B)",italic_desc:"' . mce_escape( __('Italic') ) . ' (Ctrl / Alt+Shift + I)",underline_desc:"' . mce_escape( __('Underline') ) . '",striketrough_desc:"' . mce_escape( __('Strikethrough') ) . ' (Alt+Shift+D)",justifyleft_desc:"' . mce_escape( __('Align Left') ) . ' (Alt+Shift+L)",justifycenter_desc:"' . mce_escape( __('Align Center') ) . ' (Alt+Shift+C)",justifyright_desc:"' . mce_escape( __('Align Right') ) . ' (Alt+Shift+R)",justifyfull_desc:"' . mce_escape( __('Align Full') ) . ' (Alt+Shift+J)",bullist_desc:"' . mce_escape( __('Unordered list') ) . ' (Alt+Shift+U)",numlist_desc:"' . mce_escape( __('Ordered list') ) . ' (Alt+Shift+O)",outdent_desc:"' . mce_escape( __('Outdent') ) . '",indent_desc:"' . mce_escape( __('Indent') ) . '",undo_desc:"' . mce_escape( __('Undo') ) . ' (Ctrl+Z)",redo_desc:"' . mce_escape( __('Redo') ) . ' (Ctrl+Y)",link_desc:"' . mce_escape( __('Insert/edit link') ) . ' (Alt+Shift+A)",link_delta_width:"' . /* translators: Extra width for the link popup in pixels */ mce_escape( _x('0', 'link popup width') ) . '",link_delta_height:"' . /* translators: Extra height for the link popup in pixels */ mce_escape( _x('0', 'link popup height') ) . '",unlink_desc:"' . mce_escape( __('Unlink') ) . ' (Alt+Shift+S)",image_desc:"' . mce_escape( __('Insert/edit image') ) . ' (Alt+Shift+M)",image_delta_width:"' . /* translators: Extra width for the image popup in pixels */ mce_escape( _x('0', 'image popup width') ) . '",image_delta_height:"' . /* translators: Extra height for the image popup in pixels */ mce_escape( _x('0', 'image popup height') ) . '",cleanup_desc:"' . mce_escape( __('Cleanup messy code') ) . '",code_desc:"' . mce_escape( __('Edit HTML Source') ) . '",sub_desc:"' . mce_escape( __('Subscript') ) . '",sup_desc:"' . mce_escape( __('Superscript') ) . '",hr_desc:"' . mce_escape( __('Insert horizontal ruler') ) . '",removeformat_desc:"' . mce_escape( __('Remove formatting') ) . '",forecolor_desc:"' . mce_escape( __('Select text color') ) . '",backcolor_desc:"' . mce_escape( __('Select background color') ) . '",charmap_desc:"' . mce_escape( __('Insert custom character') ) . '",visualaid_desc:"' . mce_escape( __('Toggle guidelines/invisible elements') ) . '",anchor_desc:"' . mce_escape( __('Insert/edit anchor') ) . '",cut_desc:"' . mce_escape( __('Cut') ) . '",copy_desc:"' . mce_escape( __('Copy') ) . '",paste_desc:"' . mce_escape( __('Paste') ) . '",image_props_desc:"' . mce_escape( __('Image properties') ) . '",newdocument_desc:"' . mce_escape( __('New document') ) . '",help_desc:"' . mce_escape( __('Help') ) . '",blockquote_desc:"' . mce_escape( __('Blockquote') ) . ' (Alt+Shift+Q)",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",path:"' . mce_escape( __('Path') ) . '",newdocument:"' . mce_escape( __('Are you sure you want to clear all contents?') ) . '",toolbar_focus:"' . mce_escape( __('Jump to tool buttons - Alt+Q, Jump to editor - Alt-Z, Jump to element path - Alt-X') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '",colorpicker_delta_width:"' . /* translators: Extra width for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup width') ) . '",colorpicker_delta_height:"' . /* translators: Extra height for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup height') ) . '"});tinyMCE.addI18n("' . $language . '.advanced_dlg",{about_title:"' . mce_escape( __('About TinyMCE') ) . '",about_general:"' . mce_escape( __('About') ) . '",about_help:"' . mce_escape( __('Help') ) . '",about_license:"' . mce_escape( __('License') ) . '",about_plugins:"' . mce_escape( __('Plugins') ) . '",about_plugin:"' . mce_escape( __('Plugin') ) . '",about_author:"' . mce_escape( __('Author') ) . '",about_version:"' . mce_escape( __('Version') ) . '",about_loaded:"' . mce_escape( __('Loaded plugins') ) . '",anchor_title:"' . mce_escape( __('Insert/edit anchor') ) . '",anchor_name:"' . mce_escape( __('Anchor name') ) . '",code_title:"' . mce_escape( __('HTML Source Editor') ) . '",code_wordwrap:"' . mce_escape( __('Word wrap') ) . '",colorpicker_title:"' . mce_escape( __('Select a color') ) . '",colorpicker_picker_tab:"' . mce_escape( __('Picker') ) . '",colorpicker_picker_title:"' . mce_escape( __('Color picker') ) . '",colorpicker_palette_tab:"' . mce_escape( __('Palette') ) . '",colorpicker_palette_title:"' . mce_escape( __('Palette colors') ) . '",colorpicker_named_tab:"' . mce_escape( __('Named') ) . '",colorpicker_named_title:"' . mce_escape( __('Named colors') ) . '",colorpicker_color:"' . mce_escape( __('Color:') ) . '",colorpicker_name:"' . mce_escape( __('Name:') ) . '",charmap_title:"' . mce_escape( __('Select custom character') ) . '",image_title:"' . mce_escape( __('Insert/edit image') ) . '",image_src:"' . mce_escape( __('Image URL') ) . '",image_alt:"' . mce_escape( __('Image description') ) . '",image_list:"' . mce_escape( __('Image list') ) . '",image_border:"' . mce_escape( __('Border') ) . '",image_dimensions:"' . mce_escape( __('Dimensions') ) . '",image_vspace:"' . mce_escape( __('Vertical space') ) . '",image_hspace:"' . mce_escape( __('Horizontal space') ) . '",image_align:"' . mce_escape( __('Alignment') ) . '",image_align_baseline:"' . mce_escape( __('Baseline') ) . '",image_align_top:"' . mce_escape( __('Top') ) . '",image_align_middle:"' . mce_escape( __('Middle') ) . '",image_align_bottom:"' . mce_escape( __('Bottom') ) . '",image_align_texttop:"' . mce_escape( __('Text top') ) . '",image_align_textbottom:"' . mce_escape( __('Text bottom') ) . '",image_align_left:"' . mce_escape( __('Left') ) . '",image_align_right:"' . mce_escape( __('Right') ) . '",link_title:"' . mce_escape( __('Insert/edit link') ) . '",link_url:"' . mce_escape( __('Link URL') ) . '",link_target:"' . mce_escape( __('Target') ) . '",link_target_same:"' . mce_escape( __('Open link in the same window') ) . '",link_target_blank:"' . mce_escape( __('Open link in a new window') ) . '",link_titlefield:"' . mce_escape( __('Title') ) . '",link_is_email:"' . mce_escape( __('The URL you entered seems to be an email address, do you want to add the required mailto: prefix?') ) . '",link_is_external:"' . mce_escape( __('The URL you entered seems to external link, do you want to add the required http:// prefix?') ) . '",link_list:"' . mce_escape( __('Link list') ) . '"});tinyMCE.addI18n("' . $language . '.media_dlg",{title:"' . mce_escape( __('Insert / edit embedded media') ) . '",general:"' . mce_escape( __('General') ) . '",advanced:"' . mce_escape( __('Advanced') ) . '",file:"' . mce_escape( __('File/URL') ) . '",list:"' . mce_escape( __('List') ) . '",size:"' . mce_escape( __('Dimensions') ) . '",preview:"' . mce_escape( __('Preview') ) . '",constrain_proportions:"' . mce_escape( __('Constrain proportions') ) . '",type:"' . mce_escape( __('Type') ) . '",id:"' . mce_escape( __('Id') ) . '",name:"' . mce_escape( __('Name') ) . '",class_name:"' . mce_escape( __('Class') ) . '",vspace:"' . mce_escape( __('V-Space') ) . '",hspace:"' . mce_escape( __('H-Space') ) . '",play:"' . mce_escape( __('Auto play') ) . '",loop:"' . mce_escape( __('Loop') ) . '",menu:"' . mce_escape( __('Show menu') ) . '",quality:"' . mce_escape( __('Quality') ) . '",scale:"' . mce_escape( __('Scale') ) . '",align:"' . mce_escape( __('Align') ) . '",salign:"' . mce_escape( __('SAlign') ) . '",wmode:"' . mce_escape( __('WMode') ) . '",bgcolor:"' . mce_escape( __('Background') ) . '",base:"' . mce_escape( __('Base') ) . '",flashvars:"' . mce_escape( __('Flashvars') ) . '",liveconnect:"' . mce_escape( __('SWLiveConnect') ) . '",autohref:"' . mce_escape( __('AutoHREF') ) . '",cache:"' . mce_escape( __('Cache') ) . '",hidden:"' . mce_escape( __('Hidden') ) . '",controller:"' . mce_escape( __('Controller') ) . '",kioskmode:"' . mce_escape( __('Kiosk mode') ) . '",playeveryframe:"' . mce_escape( __('Play every frame') ) . '",targetcache:"' . mce_escape( __('Target cache') ) . '",correction:"' . mce_escape( __('No correction') ) . '",enablejavascript:"' . mce_escape( __('Enable JavaScript') ) . '",starttime:"' . mce_escape( __('Start time') ) . '",endtime:"' . mce_escape( __('End time') ) . '",href:"' . mce_escape( __('href') ) . '",qtsrcchokespeed:"' . mce_escape( __('Choke speed') ) . '",target:"' . mce_escape( __('Target') ) . '",volume:"' . mce_escape( __('Volume') ) . '",autostart:"' . mce_escape( __('Auto start') ) . '",enabled:"' . mce_escape( __('Enabled') ) . '",fullscreen:"' . mce_escape( __('Fullscreen') ) . '",invokeurls:"' . mce_escape( __('Invoke URLs') ) . '",mute:"' . mce_escape( __('Mute') ) . '",stretchtofit:"' . mce_escape( __('Stretch to fit') ) . '",windowlessvideo:"' . mce_escape( __('Windowless video') ) . '",balance:"' . mce_escape( __('Balance') ) . '",baseurl:"' . mce_escape( __('Base URL') ) . '",captioningid:"' . mce_escape( __('Captioning id') ) . '",currentmarker:"' . mce_escape( __('Current marker') ) . '",currentposition:"' . mce_escape( __('Current position') ) . '",defaultframe:"' . mce_escape( __('Default frame') ) . '",playcount:"' . mce_escape( __('Play count') ) . '",rate:"' . mce_escape( __('Rate') ) . '",uimode:"' . mce_escape( __('UI Mode') ) . '",flash_options:"' . mce_escape( __('Flash options') ) . '",qt_options:"' . mce_escape( __('Quicktime options') ) . '",wmp_options:"' . mce_escape( __('Windows media player options') ) . '",rmp_options:"' . mce_escape( __('Real media player options') ) . '",shockwave_options:"' . mce_escape( __('Shockwave options') ) . '",autogotourl:"' . mce_escape( __('Auto goto URL') ) . '",center:"' . mce_escape( __('Center') ) . '",imagestatus:"' . mce_escape( __('Image status') ) . '",maintainaspect:"' . mce_escape( __('Maintain aspect') ) . '",nojava:"' . mce_escape( __('No java') ) . '",prefetch:"' . mce_escape( __('Prefetch') ) . '",shuffle:"' . mce_escape( __('Shuffle') ) . '",console:"' . mce_escape( __('Console') ) . '",numloop:"' . mce_escape( __('Num loops') ) . '",controls:"' . mce_escape( __('Controls') ) . '",scriptcallbacks:"' . mce_escape( __('Script callbacks') ) . '",swstretchstyle:"' . mce_escape( __('Stretch style') ) . '",swstretchhalign:"' . mce_escape( __('Stretch H-Align') ) . '",swstretchvalign:"' . mce_escape( __('Stretch V-Align') ) . '",sound:"' . mce_escape( __('Sound') ) . '",progress:"' . mce_escape( __('Progress') ) . '",qtsrc:"' . mce_escape( __('QT Src') ) . '",qt_stream_warn:"' . mce_escape( __('Streamed rtsp resources should be added to the QT Src field under the advanced tab.') ) . '",align_top:"' . mce_escape( __('Top') ) . '",align_right:"' . mce_escape( __('Right') ) . '",align_bottom:"' . mce_escape( __('Bottom') ) . '",align_left:"' . mce_escape( __('Left') ) . '",align_center:"' . mce_escape( __('Center') ) . '",align_top_left:"' . mce_escape( __('Top left') ) . '",align_top_right:"' . mce_escape( __('Top right') ) . '",align_bottom_left:"' . mce_escape( __('Bottom left') ) . '",align_bottom_right:"' . mce_escape( __('Bottom right') ) . '",flv_options:"' . mce_escape( __('Flash video options') ) . '",flv_scalemode:"' . mce_escape( __('Scale mode') ) . '",flv_buffer:"' . mce_escape( __('Buffer') ) . '",flv_startimage:"' . mce_escape( __('Start image') ) . '",flv_starttime:"' . mce_escape( __('Start time') ) . '",flv_defaultvolume:"' . mce_escape( __('Default volume') ) . '",flv_hiddengui:"' . mce_escape( __('Hidden GUI') ) . '",flv_autostart:"' . mce_escape( __('Auto start') ) . '",flv_loop:"' . mce_escape( __('Loop') ) . '",flv_showscalemodes:"' . mce_escape( __('Show scale modes') ) . '",flv_smoothvideo:"' . mce_escape( __('Smooth video') ) . '",flv_jscallback:"' . mce_escape( __('JS Callback') ) . '"});tinyMCE.addI18n("' . $language . '.wordpress",{wp_adv_desc:"' . mce_escape( __('Show/Hide Kitchen Sink') )  . ' (Alt+Shift+Z)",wp_more_desc:"' . mce_escape( __('Insert More Tag') ) . ' (Alt+Shift+T)",wp_page_desc:"' . mce_escape( __('Insert Page break') ) . ' (Alt+Shift+P)",wp_help_desc:"' . mce_escape( __('Help') ) . ' (Alt+Shift+H)",wp_more_alt:"' . mce_escape( __('More...') ) . '",wp_page_alt:"' . mce_escape( __('Next page...') ) . '",add_media:"' . mce_escape( __('Add Media') ) . '",add_image:"' . mce_escape( __('Add an Image') ) . '",add_video:"' . mce_escape( __('Add Video') ) . '",add_audio:"' . mce_escape( __('Add Audio') ) . '",editgallery:"' . mce_escape( __('Edit Gallery') ) . '",delgallery:"' . mce_escape( __('Delete Gallery') ) . '"});tinyMCE.addI18n("' . $language . '.wpeditimage",{edit_img:"' . mce_escape( __('Edit Image') )  . '",del_img:"' . mce_escape( __('Delete Image') )  . '",adv_settings:"' . mce_escape( __('Advanced Settings') )  . '",none:"' . mce_escape( __('None') )  . '",size:"' . mce_escape( __('Size') ) . '",thumbnail:"' . mce_escape( __('Thumbnail') ) . '",medium:"' . mce_escape( __('Medium') ) . '",full_size:"' . mce_escape( __('Full Size') ) . '",current_link:"' . mce_escape( __('Current Link') ) . '",link_to_img:"' . mce_escape( __('Link to Image') ) . '",link_help:"' . mce_escape( __('Enter a link URL or click above for presets.') ) . '",adv_img_settings:"' . mce_escape( __('Advanced Image Settings') ) . '",source:"' . mce_escape( __('Source') )  . '",width:"' . mce_escape( __('Width') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",adv_link_settings:"' . mce_escape( __('Advanced Link Settings') )  . '",link_rel:"' . mce_escape( __('Link Rel') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",s60:"' . mce_escape( __('60%') ) . '",s70:"' . mce_escape( __('70%') ) . '",s80:"' . mce_escape( __('80%') ) . '",s90:"' . mce_escape( __('90%') ) . '",s100:"' . mce_escape( __('100%') ) . '",s110:"' . mce_escape( __('110%') ) . '",s120:"' . mce_escape( __('120%') ) . '",s130:"' . mce_escape( __('130%') ) . '",img_title:"' . mce_escape( __('Edit Image Title') ) . '",caption:"' . mce_escape( __('Edit Image Caption') ) . '",alt:"' . mce_escape( __('Edit Alternate Text') ) . '"});';
<?php/** * Loads the correct template based on the visitor's url * @package WordPress */if ( defined('WP_USE_THEMES') && WP_USE_THEMES )	do_action('template_redirect');// Process feeds and trackbacks even if not using themes.if ( is_robots() ) :	do_action('do_robots');	return;elseif ( is_feed() ) :	do_feed();	return;elseif ( is_trackback() ) :	include( ABSPATH . 'wp-trackback.php' );	return;endif;if ( defined('WP_USE_THEMES') && WP_USE_THEMES ) :	$template = false;	if     ( is_404()            && $template = get_404_template()            ) :	elseif ( is_search()         && $template = get_search_template()         ) :	elseif ( is_tax()            && $template = get_taxonomy_template()       ) :	elseif ( is_front_page()     && $template = get_front_page_template()     ) :	elseif ( is_home()           && $template = get_home_template()           ) :	elseif ( is_attachment()     && $template = get_attachment_template()     ) :		remove_filter('the_content', 'prepend_attachment');	elseif ( is_single()         && $template = get_single_template()         ) :	elseif ( is_page()           && $template = get_page_template()           ) :	elseif ( is_category()       && $template = get_category_template()       ) :	elseif ( is_tag()            && $template = get_tag_template()            ) :	elseif ( is_author()         && $template = get_author_template()         ) :	elseif ( is_date()           && $template = get_date_template()           ) :	elseif ( is_archive()        && $template = get_archive_template()        ) :	elseif ( is_comments_popup() && $template = get_comments_popup_template() ) :	elseif ( is_paged()          && $template = get_paged_template()          ) :	else :		$template = get_index_template();	endif;	if ( $template = apply_filters( 'template_include', $template ) )		include( $template );	return;endif;?>
<?php/** * WordPress Options Header. * * Resets variables: 'action', 'standalone', and 'option_group_id'. Displays * updated message, if updated variable is part of the URL query. * * @package WordPress * @subpackage Administration */wp_reset_vars(array('action', 'standalone', 'option_group_id'));settings_errors();?>
<?php/** * Includes all of the WordPress Administration API files. * * @package WordPress * @subpackage Administration *//** WordPress Bookmark Administration API */require_once(ABSPATH . 'wp-admin/includes/bookmark.php');/** WordPress Comment Administration API */require_once(ABSPATH . 'wp-admin/includes/comment.php');/** WordPress Administration File API */require_once(ABSPATH . 'wp-admin/includes/file.php');/** WordPress Image Administration API */require_once(ABSPATH . 'wp-admin/includes/image.php');/** WordPress Media Administration API */require_once(ABSPATH . 'wp-admin/includes/media.php');/** WordPress Import Administration API */require_once(ABSPATH . 'wp-admin/includes/import.php');/** WordPress Misc Administration API */require_once(ABSPATH . 'wp-admin/includes/misc.php');/** WordPress Plugin Administration API */require_once(ABSPATH . 'wp-admin/includes/plugin.php');/** WordPress Post Administration API */require_once(ABSPATH . 'wp-admin/includes/post.php');/** WordPress Taxonomy Administration API */require_once(ABSPATH . 'wp-admin/includes/taxonomy.php');/** WordPress Template Administration API */require_once(ABSPATH . 'wp-admin/includes/template.php');/** WordPress Theme Administration API */require_once(ABSPATH . 'wp-admin/includes/theme.php');/** WordPress User Administration API */require_once(ABSPATH . 'wp-admin/includes/user.php');/** WordPress Update Administration API */require_once(ABSPATH . 'wp-admin/includes/update.php');/** WordPress Registration API */require_once(ABSPATH . WPINC . '/registration.php');/** WordPress Deprecated Administration API */require_once(ABSPATH . 'wp-admin/includes/deprecated.php');/** WordPress Multi-Site support API */if ( is_multisite() ) {	require_once(ABSPATH . 'wp-admin/includes/ms.php');	require_once(ABSPATH . 'wp-admin/includes/ms-deprecated.php');}?>
<?php/** * @package TinyMCE * @author Moxiecode * @copyright Copyright  2005-2006, Moxiecode Systems AB, All rights reserved. *//** @ignore */require_once('../../../wp-load.php');header('Content-Type: text/html; charset=' . get_bloginfo('charset'));?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php _e('Rich Editor Help') ?></title><script type="text/javascript" src="tiny_mce_popup.js?ver=3223"></script><?phpwp_admin_css( 'global', true );wp_admin_css( 'wp-admin', true );?><style type="text/css">	#wphead {		font-size: 80%;		border-top: 0;		color: #555;		background-color: #f1f1f1;	}	#wphead h1 {		font-size: 24px;		color: #555;		margin: 0;		padding: 10px;	}	#tabs {		padding: 15px 15px 3px;		background-color: #f1f1f1;		border-bottom: 1px solid #dfdfdf;	}	#tabs li {		display: inline;	}	#tabs a.current {		background-color: #fff;		border-color: #dfdfdf;		border-bottom-color: #fff;		color: #d54e21;	}	#tabs a {		color: #2583AD;		padding: 6px;		border-width: 1px 1px 0;		border-style: solid solid none;		border-color: #f1f1f1;		text-decoration: none;	}	#tabs a:hover {		color: #d54e21;	}	.wrap h2 {		border-bottom-color: #dfdfdf;		color: #555;		margin: 5px 0;		padding: 0;		font-size: 18px;	}	#user_info {		right: 5%;		top: 5px;	}	h3 {		font-size: 1.1em;		margin-top: 10px;		margin-bottom: 0px;	}	#flipper {		margin: 0;		padding: 5px 20px 10px;		background-color: #fff;		border-left: 1px solid #dfdfdf;		border-bottom: 1px solid #dfdfdf;	}	* html {        overflow-x: hidden;        overflow-y: scroll;    }	#flipper div p {		margin-top: 0.4em;		margin-bottom: 0.8em;		text-align: justify;	}	th {		text-align: center;	}	.top th {		text-decoration: underline;	}	.top .key {		text-align: center;		width: 5em;	}	.top .action {		text-align: left;	}	.align {		border-left: 3px double #333;		border-right: 3px double #333;	}	.keys {		margin-bottom: 15px;	}	.keys p {		display: inline-block;		margin: 0px;		padding: 0px;	}	.keys .left { text-align: left; }	.keys .center { text-align: center; }	.keys .right { text-align: right; }	td b {		font-family: "Times New Roman" Times serif;	}	#buttoncontainer {		text-align: center;		margin-bottom: 20px;	}	#buttoncontainer a, #buttoncontainer a:hover {		border-bottom: 0px;	}</style><?php if ( is_rtl() ) : ?><style type="text/css">	#wphead, #tabs {		padding-left: auto;		padding-right: 15px;	}	#flipper {		margin: 5px 0 3px 10px;	}	.keys .left, .top, .action { text-align: right; }	.keys .right { text-align: left; }	td b { font-family: Tahoma, "Times New Roman", Times, serif }</style><?php endif; ?><script type="text/javascript">	function d(id) { return document.getElementById(id); }	function flipTab(n) {		for (i=1;i<=4;i++) {			c = d('content'+i.toString());			t = d('tab'+i.toString());			if ( n == i ) {				c.className = '';				t.className = 'current';			} else {				c.className = 'hidden';				t.className = '';			}		}	}    function init() {        document.getElementById('version').innerHTML = tinymce.majorVersion + "." + tinymce.minorVersion;        document.getElementById('date').innerHTML = tinymce.releaseDate;    }    tinyMCEPopup.onInit.add(init);</script></head><body><div id="wphead"><h1><?php echo get_bloginfo('blogtitle'); ?></h1></div><ul id="tabs">	<li><a id="tab1" href="javascript:flipTab(1)" title="<?php _e('Basics of Rich Editing') ?>" accesskey="1" tabindex="1" class="current"><?php _e('Basics') ?></a></li>	<li><a id="tab2" href="javascript:flipTab(2)" title="<?php _e('Advanced use of the Rich Editor') ?>" accesskey="2" tabindex="2"><?php _e('Advanced') ?></a></li>	<li><a id="tab3" href="javascript:flipTab(3)" title="<?php _e('Hotkeys') ?>" accesskey="3" tabindex="3"><?php _e('Hotkeys') ?></a></li>	<li><a id="tab4" href="javascript:flipTab(4)" title="<?php _e('About the software') ?>" accesskey="4" tabindex="4"><?php _e('About') ?></a></li></ul><div id="flipper" class="wrap"><div id="content1">	<h2><?php _e('Rich Editing Basics') ?></h2>	<p><?php _e('<em>Rich editing</em>, also called WYSIWYG for What You See Is What You Get, means your text is formatted as you type. The rich editor creates HTML code behind the scenes while you concentrate on writing. Font styles, links and images all appear approximately as they will on the internet.') ?></p>	<p><?php _e('WordPress includes a rich HTML editor that works well in all major web browsers used today. However editing HTML is not the same as typing text. Each web page has two major components: the structure, which is the actual HTML code and is produced by the editor as you type, and the display, that is applied to it by the currently selected WordPress theme and is defined in style.css. WordPress is producing valid XHTML 1.0 which means that inserting multiple line breaks (BR tags) after a paragraph would not produce white space on the web page. The BR tags will be removed as invalid by the internal HTML correcting functions.') ?></p>	<p><?php _e('While using the editor, most basic keyboard shortcuts work like in any other text editor. For example: Shift+Enter inserts line break, Ctrl+C = copy, Ctrl+X = cut, Ctrl+Z = undo, Ctrl+Y = redo, Ctrl+A = select all, etc. (on Mac use the Command key instead of Ctrl). See the Hotkeys tab for all available keyboard shortcuts.') ?></p>    <p><?php _e('If you do not like the way the rich editor works, you may turn it off from Your Profile submenu, under Users in the admin menu.') ?></p></div><div id="content2" class="hidden">	<h2><?php _e('Advanced Rich Editing') ?></h2>	<h3><?php _e('Images and Attachments') ?></h3>	<p><?php _e('There is a button in the editor toolbar for inserting images that are already hosted somewhere on the internet. If you have a URL for an image, click this button and enter the URL in the box which appears.') ?></p>	<p><?php _e('If you need to upload an image or another media file from your computer, you can use the Media Library buttons above the editor. The media library will attempt to create a thumbnail-sized copy from each uploaded image. To insert your image into the post, first click on the thumbnail to reveal a menu of options. When you have selected the options you like, click "Send to Editor" and your image or file will appear in the post you are editing. If you are inserting a movie, there are additional options in the "Media" dialog that can be opened from the second toolbar row.') ?></p>	<h3><?php _e('HTML in the Rich Editor') ?></h3>	<p><?php _e('Any HTML entered directly into the rich editor will show up as text when the post is viewed. What you see is what you get. When you want to include HTML elements that cannot be generated with the toolbar buttons, you must enter it by hand in the HTML editor. Examples are tables and &lt;code&gt;. To do this, click the HTML tab and edit the code, then switch back to Visual mode. If the code is valid and understood by the editor, you should see it rendered immediately.') ?></p>	<h3><?php _e('Pasting in the Rich Editor') ?></h3>	<p><?php _e('When pasting content from another web page the results can be inconsistent and depend on your browser and on the web page you are pasting from. The editor tries to correct any invalid HTML code that was pasted, but for best results try using the HTML tab or one of the paste buttons that are on the second row. Alternatively try pasting paragraph by paragraph. In most browsers to select one paragraph at a time, triple-click on it.') ?></p>	<p><?php _e('Pasting content from another application, like Word or Excel, is best done with the Paste from Word button on the second row, or in HTML mode.') ?></p></div><div id="content3" class="hidden">	<h2><?php _e('Writing at Full Speed') ?></h2>    <p><?php _e('Rather than reaching for your mouse to click on the toolbar, use these access keys. Windows and Linux use Ctrl + letter. Macintosh uses Command + letter.') ?></p>	<table class="keys" width="100%" style="border: 0 none;">		<tr class="top"><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th></tr>		<tr><th>c</th><td><?php _e('Copy') ?></td><th>v</th><td><?php _e('Paste') ?></td></tr>		<tr><th>a</th><td><?php _e('Select all') ?></td><th>x</th><td><?php _e('Cut') ?></td></tr>		<tr><th>z</th><td><?php _e('Undo') ?></td><th>y</th><td><?php _e('Redo') ?></td></tr>		<script type="text/javascript">		if ( ! tinymce.isWebKit )			document.write("<tr><th>b</th><td><?php _e('Bold') ?></td><th>i</th><td><?php _e('Italic') ?></td></tr>"+			"<tr><th>u</th><td><?php _e('Underline') ?></td><th>1</th><td><?php _e('Heading 1') ?></td></tr>"+			"<tr><th>2</th><td><?php _e('Heading 2') ?></td><th>3</th><td><?php _e('Heading 3') ?></td></tr>"+			"<tr><th>4</th><td><?php _e('Heading 4') ?></td><th>5</th><td><?php _e('Heading 5') ?></td></tr>"+			"<tr><th>6</th><td><?php _e('Heading 6') ?></td><th>9</th><td><?php _e('Address') ?></td></tr>")		</script>	</table>	<p><?php _e('The following shortcuts use different access keys: Alt + Shift + letter.') ?></p>	<table class="keys" width="100%" style="border: 0 none;">		<tr class="top"><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th></tr>		<script type="text/javascript">		if ( tinymce.isWebKit )			document.write("<tr><th>b</th><td><?php _e('Bold') ?></td><th>i</th><td><?php _e('Italic') ?></td></tr>")		</script>		<tr><th>n</th><td><?php _e('Check Spelling') ?></td><th>l</th><td><?php _e('Align Left') ?></td></tr>		<tr><th>j</th><td><?php _e('Justify Text') ?></td><th>c</th><td><?php _e('Align Center') ?></td></tr>		<tr><th>d</th><td><span style="text-decoration: line-through;"><?php _e('Strikethrough') ?></span></td><th>r</th><td><?php _e('Align Right') ?></td></tr>		<tr><th>u</th><td><strong>&bull;</strong> <?php _e('List') ?></td><th>a</th><td><?php _e('Insert link') ?></td></tr>		<tr><th>o</th><td>1. <?php _e('List') ?></td><th>s</th><td><?php _e('Remove link') ?></td></tr>		<tr><th>q</th><td><?php _e('Quote') ?></td><th>m</th><td><?php _e('Insert Image') ?></td></tr>		<tr><th>g</th><td><?php _e('Full Screen') ?></td><th>t</th><td><?php _e('Insert More Tag') ?></td></tr>		<tr><th>p</th><td><?php _e('Insert Page Break tag') ?></td><th>h</th><td><?php _e('Help') ?></td></tr>		<tr><th>e</th><td colspan="3"><?php _e('Switch to HTML mode') ?></td></tr>	</table></div><div id="content4" class="hidden">	<h2><?php _e('About TinyMCE'); ?></h2>    <p><?php _e('Version:'); ?> <span id="version"></span> (<span id="date"></span>)</p>	<p><?php printf(__('TinyMCE is a platform independent web based Javascript HTML WYSIWYG editor control released as Open Source under %sLGPL</a>	by Moxiecode Systems AB. It has the ability to convert HTML TEXTAREA fields or other HTML elements to editor instances.'), '<a href="'.home_url('/wp-includes/js/tinymce/license.txt').'" target="_blank" title="'.__('GNU Library General Public Licence').'">') ?></p>	<p><?php _e('Copyright &copy; 2003-2007, <a href="http://www.moxiecode.com" target="_blank">Moxiecode Systems AB</a>, All rights reserved.') ?></p>	<p><?php _e('For more information about this software visit the <a href="http://tinymce.moxiecode.com" target="_blank">TinyMCE website</a>.') ?></p>	<div id="buttoncontainer">		<a href="http://www.moxiecode.com" target="_blank"><img src="themes/advanced/img/gotmoxie.png" alt="<?php _e('Got Moxie?') ?>" style="border: none;" /></a>		<a href="http://sourceforge.net/projects/tinymce/" target="_blank"><img src="themes/advanced/img/sflogo.png" alt="<?php _e('Hosted By Sourceforge') ?>" style="border: none;" /></a>		<a href="http://www.freshmeat.net/projects/tinymce" target="_blank"><img src="themes/advanced/img/fm.gif" alt="<?php _e('Also on freshmeat') ?>" style="border: none;" /></a>	</div></div></div><div class="mceActionPanel">	<div style="margin: 8px auto; text-align: center;padding-bottom: 10px;">		<input type="button" id="cancel" name="cancel" value="<?php _e('Close'); ?>" title="<?php _e('Close'); ?>" onclick="tinyMCEPopup.close();" />	</div></div></body></html>
<?php/** * Default Embed Handlers * * @package WordPress * @subpackage Embeds *//** * The Google Video embed handler callback. Google Video does not support oEmbed. * * @see WP_Embed::register_handler() * @see WP_Embed::shortcode() * * @param array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}. * @param array $attr Embed attributes. * @param string $url The original URL that was matched by the regex. * @param array $rawattr The original unmodified attributes. * @return string The embed HTML. */function wp_embed_handler_googlevideo( $matches, $attr, $url, $rawattr ) {	// If the user supplied a fixed width AND height, use it	if ( !empty($rawattr['width']) && !empty($rawattr['height']) ) {		$width  = (int) $rawattr['width'];		$height = (int) $rawattr['height'];	} else {		list( $width, $height ) = wp_expand_dimensions( 425, 344, $attr['width'], $attr['height'] );	}	return apply_filters( 'embed_googlevideo', '<embed type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docid=' . esc_attr($matches[2]) . '&amp;hl=en&amp;fs=true" style="width:' . esc_attr($width) . 'px;height:' . esc_attr($height) . 'px" allowFullScreen="true" allowScriptAccess="always"></embed>', $matches, $attr, $url, $rawattr );}wp_embed_register_handler( 'googlevideo', '#http://video\.google\.([A-Za-z.]{2,5})/videoplay\?docid=([\d-]+)(.*?)#i', 'wp_embed_handler_googlevideo' );?>
<?php/** * WordPress core upgrade functionality. * * @package WordPress * @subpackage Administration * @since 2.7.0 *//** * Stores files to be deleted. * * @since 2.7.0 * @global array $_old_files * @var array * @name $_old_files */global $_old_files;$_old_files = array('wp-admin/bookmarklet.php','wp-admin/css/upload.css','wp-admin/css/upload-rtl.css','wp-admin/css/press-this-ie.css','wp-admin/css/press-this-ie-rtl.css','wp-admin/edit-form.php','wp-admin/link-import.php','wp-admin/images/box-bg-left.gif','wp-admin/images/box-bg-right.gif','wp-admin/images/box-bg.gif','wp-admin/images/box-butt-left.gif','wp-admin/images/box-butt-right.gif','wp-admin/images/box-butt.gif','wp-admin/images/box-head-left.gif','wp-admin/images/box-head-right.gif','wp-admin/images/box-head.gif','wp-admin/images/heading-bg.gif','wp-admin/images/login-bkg-bottom.gif','wp-admin/images/login-bkg-tile.gif','wp-admin/images/notice.gif','wp-admin/images/toggle.gif','wp-admin/images/comment-stalk-classic.gif','wp-admin/images/comment-stalk-fresh.gif','wp-admin/images/comment-stalk-rtl.gif','wp-admin/images/comment-pill.gif','wp-admin/images/del.png','wp-admin/images/media-button-gallery.gif','wp-admin/images/media-buttons.gif','wp-admin/images/tail.gif','wp-admin/images/gear.png','wp-admin/images/tab.png','wp-admin/images/postbox-bg.gif','wp-admin/includes/upload.php','wp-admin/js/dbx-admin-key.js','wp-admin/js/link-cat.js','wp-admin/js/forms.js','wp-admin/js/upload.js','wp-admin/js/set-post-thumbnail-handler.js','wp-admin/js/set-post-thumbnail-handler.dev.js','wp-admin/js/page.js','wp-admin/js/page.dev.js','wp-admin/js/slug.js','wp-admin/js/slug.dev.js','wp-admin/profile-update.php','wp-admin/templates.php','wp-includes/images/audio.png','wp-includes/images/css.png','wp-includes/images/default.png','wp-includes/images/doc.png','wp-includes/images/exe.png','wp-includes/images/html.png','wp-includes/images/js.png','wp-includes/images/pdf.png','wp-includes/images/swf.png','wp-includes/images/tar.png','wp-includes/images/text.png','wp-includes/images/video.png','wp-includes/images/zip.png','wp-includes/js/dbx.js','wp-includes/js/fat.js','wp-includes/js/list-manipulation.js','wp-includes/js/jquery/jquery.dimensions.min.js','wp-includes/js/tinymce/langs/en.js','wp-includes/js/tinymce/plugins/autosave/editor_plugin_src.js','wp-includes/js/tinymce/plugins/autosave/langs','wp-includes/js/tinymce/plugins/directionality/images','wp-includes/js/tinymce/plugins/directionality/langs','wp-includes/js/tinymce/plugins/inlinepopups/css','wp-includes/js/tinymce/plugins/inlinepopups/images','wp-includes/js/tinymce/plugins/inlinepopups/jscripts','wp-includes/js/tinymce/plugins/paste/images','wp-includes/js/tinymce/plugins/paste/jscripts','wp-includes/js/tinymce/plugins/paste/langs','wp-includes/js/tinymce/plugins/spellchecker/classes/HttpClient.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyGoogleSpell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspellShell.class.php','wp-includes/js/tinymce/plugins/spellchecker/css/spellchecker.css','wp-includes/js/tinymce/plugins/spellchecker/images','wp-includes/js/tinymce/plugins/spellchecker/langs','wp-includes/js/tinymce/plugins/spellchecker/tinyspell.php','wp-includes/js/tinymce/plugins/wordpress/images','wp-includes/js/tinymce/plugins/wordpress/langs','wp-includes/js/tinymce/plugins/wordpress/popups.css','wp-includes/js/tinymce/plugins/wordpress/wordpress.css','wp-includes/js/tinymce/plugins/wphelp','wp-includes/js/tinymce/themes/advanced/css','wp-includes/js/tinymce/themes/advanced/images','wp-includes/js/tinymce/themes/advanced/jscripts','wp-includes/js/tinymce/themes/advanced/langs','wp-includes/js/tinymce/tiny_mce_gzip.php','wp-includes/js/wp-ajax.js','wp-admin/admin-db.php','wp-admin/cat.js','wp-admin/categories.js','wp-admin/custom-fields.js','wp-admin/dbx-admin-key.js','wp-admin/edit-comments.js','wp-admin/install-rtl.css','wp-admin/install.css','wp-admin/upgrade-schema.php','wp-admin/upload-functions.php','wp-admin/upload-rtl.css','wp-admin/upload.css','wp-admin/upload.js','wp-admin/users.js','wp-admin/widgets-rtl.css','wp-admin/widgets.css','wp-admin/xfn.js','wp-includes/js/tinymce/license.html','wp-admin/cat-js.php','wp-admin/edit-form-ajax-cat.php','wp-admin/execute-pings.php','wp-admin/import/b2.php','wp-admin/import/btt.php','wp-admin/import/jkw.php','wp-admin/inline-uploading.php','wp-admin/link-categories.php','wp-admin/list-manipulation.js','wp-admin/list-manipulation.php','wp-includes/comment-functions.php','wp-includes/feed-functions.php','wp-includes/functions-compat.php','wp-includes/functions-formatting.php','wp-includes/functions-post.php','wp-includes/js/dbx-key.js','wp-includes/js/tinymce/plugins/autosave/langs/cs.js','wp-includes/js/tinymce/plugins/autosave/langs/sv.js','wp-includes/js/tinymce/themes/advanced/editor_template_src.js','wp-includes/links.php','wp-includes/pluggable-functions.php','wp-includes/template-functions-author.php','wp-includes/template-functions-category.php','wp-includes/template-functions-general.php','wp-includes/template-functions-links.php','wp-includes/template-functions-post.php','wp-includes/wp-l10n.php','wp-admin/import-b2.php','wp-admin/import-blogger.php','wp-admin/import-greymatter.php','wp-admin/import-livejournal.php','wp-admin/import-mt.php','wp-admin/import-rss.php','wp-admin/import-textpattern.php','wp-admin/quicktags.js','wp-images/fade-butt.png','wp-images/get-firefox.png','wp-images/header-shadow.png','wp-images/smilies','wp-images/wp-small.png','wp-images/wpminilogo.png','wp.php','wp-includes/gettext.php','wp-includes/streams.php',// MU'wp-admin/wpmu-admin.php','wp-admin/wpmu-blogs.php','wp-admin/wpmu-edit.php','wp-admin/wpmu-options.php','wp-admin/wpmu-themes.php','wp-admin/wpmu-upgrade-site.php','wp-admin/wpmu-users.php','wp-includes/wpmu-default-filters.php','wp-includes/wpmu-functions.php','wpmu-settings.php','index-install.php','README.txt','htaccess.dist','wp-admin/css/mu-rtl.css','wp-admin/css/mu.css','wp-admin/images/site-admin.png','wp-admin/includes/mu.php','wp-includes/images/wordpress-mu.png',// 3.0'wp-admin/categories.php','wp-admin/edit-category-form.php','wp-admin/edit-page-form.php','wp-admin/edit-pages.php','wp-admin/images/wp-logo.gif','wp-admin/js/wp-gears.dev.js','wp-admin/js/wp-gears.js','wp-admin/options-misc.php','wp-admin/page-new.php','wp-admin/page.php','wp-admin/rtl.css','wp-admin/rtl.dev.css','wp-admin/update-links.php','wp-admin/wp-admin.css','wp-admin/wp-admin.dev.css','wp-includes/js/codepress','wp-includes/js/jquery/autocomplete.dev.js','wp-includes/js/jquery/interface.js','wp-includes/js/jquery/autocomplete.js','wp-includes/js/scriptaculous/prototype.js','wp-includes/js/tinymce/wp-tinymce.js','wp-content/themes/twentyten/searchform.php','wp-admin/import','wp-admin/images/ico-edit.png','wp-admin/images/fav-top.png','wp-admin/images/ico-close.png','wp-admin/images/admin-header-footer.png','wp-admin/images/screen-options-left.gif','wp-admin/images/ico-add.png','wp-admin/images/browse-happy.gif','wp-admin/images/ico-viewpage.png',);/** * Upgrade the core of WordPress. * * This will create a .maintenance file at the base of the WordPress directory * to ensure that people can not access the web site, when the files are being * copied to their locations. * * The files in the {@link $_old_files} list will be removed and the new files * copied from the zip file after the database is upgraded. * * The steps for the upgrader for after the new release is downloaded and * unzipped is: *   1. Test unzipped location for select files to ensure that unzipped worked. *   2. Create the .maintenance file in current WordPress base. *   3. Copy new WordPress directory over old WordPress files. *   4. Upgrade WordPress to new version. *   5. Delete new WordPress directory path. *   6. Delete .maintenance file. *   7. Remove old files. *   8. Delete 'update_core' option. * * There are several areas of failure. For instance if PHP times out before step * 6, then you will not be able to access any portion of your site. Also, since * the upgrade will not continue where it left off, you will not be able to * automatically remove old files and remove the 'update_core' option. This * isn't that bad. * * If the copy of the new WordPress over the old fails, then the worse is that * the new WordPress directory will remain. * * If it is assumed that every file will be copied over, including plugins and * themes, then if you edit the default theme, you should rename it, so that * your changes remain. * * @since 2.7.0 * * @param string $from New release unzipped path. * @param string $to Path to old WordPress installation. * @return WP_Error|null WP_Error on failure, null on success. */function update_core($from, $to) {	global $wp_filesystem, $_old_files, $wpdb;	@set_time_limit( 300 );	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$required_php_version = '4.3';	$required_mysql_version = '4.1.2';	$wp_version = '3.0';	$php_compat     = version_compare( $php_version, $required_php_version, '>=' );	$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );	if ( !$mysql_compat || !$php_compat )		$wp_filesystem->delete($from, true);	if ( !$mysql_compat && !$php_compat )		return new WP_Error( 'php_mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version ) );	elseif ( !$php_compat )		return new WP_Error( 'php_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version ) );	elseif ( !$mysql_compat )		return new WP_Error( 'mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version ) );	// Sanity check the unzipped distribution	apply_filters('update_feedback', __('Verifying the unpacked files&#8230;'));	$distro = '';	$roots = array( '/wordpress', '/wordpress-mu' );	foreach( $roots as $root ) {		if ( $wp_filesystem->exists($from . $root . '/wp-settings.php') && $wp_filesystem->exists($from . $root . '/wp-admin/admin.php') &&			$wp_filesystem->exists($from . $root . '/wp-includes/functions.php') ) {			$distro = $root;			break;		}	}	if ( !$distro ) {		$wp_filesystem->delete($from, true);		return new WP_Error('insane_distro', __('The update could not be unpacked') );	}	apply_filters('update_feedback', __('Installing the latest version&#8230;'));	// Create maintenance file to signal that we are upgrading	$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';	$maintenance_file = $to . '.maintenance';	$wp_filesystem->delete($maintenance_file);	$wp_filesystem->put_contents($maintenance_file, $maintenance_string, FS_CHMOD_FILE);	// Copy new versions of WP files into place.	$result = copy_dir($from . $distro, $to);	if ( is_wp_error($result) ) {		$wp_filesystem->delete($maintenance_file);		$wp_filesystem->delete($from, true);		return $result;	}	// Remove old files	foreach ( $_old_files as $old_file ) {		$old_file = $to . $old_file;		if ( !$wp_filesystem->exists($old_file) )			continue;		$wp_filesystem->delete($old_file, true);	}	// Upgrade DB with separate request	apply_filters('update_feedback', __('Upgrading database&#8230;'));	$db_upgrade_url = admin_url('upgrade.php?step=upgrade_db');	wp_remote_post($db_upgrade_url, array('timeout' => 60));	// Remove working directory	$wp_filesystem->delete($from, true);	// Force refresh of update information	if ( function_exists('delete_site_transient') )		delete_site_transient('update_core');	else		delete_option('update_core');	// Remove maintenance file, we're done.	$wp_filesystem->delete($maintenance_file);}?>
<?php/** * Theme editor administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_themes') )	wp_die('<p>'.__('You do not have sufficient permissions to edit templates for this site.').'</p>');$title = __("Edit Themes");$parent_file = 'themes.php';$help = '<p>' . __('You can use the Theme Editor to edit the individual CSS and PHP files which make up your theme.') . '</p>';$help .= '<p>' . __('Begin by choosing a theme to edit from the dropdown menu and clicking Select. A list then appears of all the template files. Clicking once on any file name causes the file to appear in the large Editor box.') . '</p>';$help .= '<p>' . __('For PHP files, you can use the Documentation dropdown to select from functions recognized in that file. Lookup takes you to a web page with reference material about that particular function.') . '</p>';$help .= '<p>' . __('After typing in your edits, click Update File.') . '</p>';$help .= '<p>' . __('<strong>Advice:</strong> think very carefully about your site crashing if you are live-editing the theme currently in use.') . '</p>';$help .= '<p>' . __('Upgrading to a newer version of the same theme will override changes made here. To avoid this, consider creating a <a href="http://codex.wordpress.org/Child_Themes" target="_blank">child theme</a> instead.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Theme_Development" target="_blank">Documentation on Theme Development</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Editing_Files" target="_blank">Documentation on Editing Files</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Template_Tags" target="_blank">Documentation on Template Tags</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);wp_reset_vars(array('action', 'redirect', 'profile', 'error', 'warning', 'a', 'file', 'theme', 'dir'));wp_admin_css( 'theme-editor' );$themes = get_themes();if (empty($theme)) {	$theme = get_current_theme();} else {	$theme = stripslashes($theme);}if ( ! isset($themes[$theme]) )	wp_die(__('The requested theme does not exist.'));$allowed_files = array_merge($themes[$theme]['Stylesheet Files'], $themes[$theme]['Template Files']);if (empty($file)) {	$file = $allowed_files[0];} else {	$file = stripslashes($file);	if ( 'theme' == $dir ) {		$file = dirname(dirname($themes[$theme]['Template Dir'])) . $file ;	} else if ( 'style' == $dir) {		$file = dirname(dirname($themes[$theme]['Stylesheet Dir'])) . $file ;	}}validate_file_to_edit($file, $allowed_files);$scrollto = isset($_REQUEST['scrollto']) ? (int) $_REQUEST['scrollto'] : 0;$file_show = basename( $file );switch($action) {case 'update':	check_admin_referer('edit-theme_' . $file . $theme);	$newcontent = stripslashes($_POST['newcontent']);	$theme = urlencode($theme);	if (is_writeable($file)) {		//is_writable() not always reliable, check return value. see comments @ http://uk.php.net/is_writable		$f = fopen($file, 'w+');		if ($f !== FALSE) {			fwrite($f, $newcontent);			fclose($f);			$location = "theme-editor.php?file=$file&theme=$theme&a=te&scrollto=$scrollto";		} else {			$location = "theme-editor.php?file=$file&theme=$theme&scrollto=$scrollto";		}	} else {		$location = "theme-editor.php?file=$file&theme=$theme&scrollto=$scrollto";	}	$location = wp_kses_no_null($location);	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	header("Location: $location");	exit();break;default:	require_once('./admin-header.php');	update_recently_edited($file);	if ( !is_file($file) )		$error = 1;	if ( !$error && filesize($file) > 0 ) {		$f = fopen($file, 'r');		$content = fread($f, filesize($file));		if ( '.php' == substr( $file, strrpos( $file, '.' ) ) ) {			$functions = wp_doc_link_parse( $content );			$docs_select = '<select name="docs-list" id="docs-list">';			$docs_select .= '<option value="">' . esc_attr__( 'Function Name...' ) . '</option>';			foreach ( $functions as $function ) {				$docs_select .= '<option value="' . esc_attr( urlencode( $function ) ) . '">' . htmlspecialchars( $function ) . '()</option>';			}			$docs_select .= '</select>';		}		$content = htmlspecialchars( $content );	}	?><?php if (isset($_GET['a'])) : ?> <div id="message" class="updated"><p><?php _e('File edited successfully.') ?></p></div><?php endif;$description = get_file_description($file);$desc_header = ( $description != $file_show ) ? "<strong>$description</strong> (%s)" : "%s";?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div class="fileedit-sub"><div class="alignleft"><big><?php echo sprintf($desc_header, $file_show); ?></big></div><div class="alignright">	<form action="theme-editor.php" method="post">		<strong><label for="theme"><?php _e('Select theme to edit:'); ?> </label></strong>		<select name="theme" id="theme"><?php	foreach ($themes as $a_theme) {	$theme_name = $a_theme['Name'];	if ($theme_name == $theme) $selected = " selected='selected'";	else $selected = '';	$theme_name = esc_attr($theme_name);	echo "\n\t<option value=\"$theme_name\" $selected>$theme_name</option>";}?>		</select>		<input type="submit" name="Submit" value="<?php esc_attr_e('Select') ?>" class="button" />	</form></div><br class="clear" /></div>	<div id="templateside"><?phpif ($allowed_files) :?>	<h3><?php _e('Templates'); ?></h3>	<ul><?php	$template_mapping = array();	$template_dir = $themes[$theme]['Template Dir'];	foreach ( $themes[$theme]['Template Files'] as $template_file ) {		$description = trim( get_file_description($template_file) );		$template_show = basename($template_file);		$filedesc = ( $description != $template_file ) ? "$description<br /><span class='nonessential'>($template_show)</span>" : "$description";		$filedesc = ( $template_file == $file ) ? "<span class='highlight'>$description<br /><span class='nonessential'>($template_show)</span></span>" : $filedesc;		// If we have two files of the same name prefer the one in the Template Directory		// This means that we display the correct files for child themes which overload Templates as well as Styles		if ( array_key_exists($description, $template_mapping ) ) {			if ( false !== strpos( $template_file, $template_dir ) )  {				$template_mapping[ $description ] = array( _get_template_edit_filename($template_file, $template_dir), $filedesc );			}		} else {			$template_mapping[ $description ] = array( _get_template_edit_filename($template_file, $template_dir), $filedesc );		}	}	ksort( $template_mapping );	while ( list( $template_sorted_key, list( $template_file, $filedesc ) ) = each( $template_mapping ) ) :	?>		<li><a href="theme-editor.php?file=<?php echo "$template_file"; ?>&amp;theme=<?php echo urlencode($theme) ?>&amp;dir=theme"><?php echo $filedesc ?></a></li><?php endwhile; ?>	</ul>	<h3><?php /* translators: Theme stylesheets in theme editor */ _ex('Styles', 'Theme stylesheets in theme editor'); ?></h3>	<ul><?php	$template_mapping = array();	$stylesheet_dir = $themes[$theme]['Stylesheet Dir'];	foreach ( $themes[$theme]['Stylesheet Files'] as $style_file ) {		$description = trim( get_file_description($style_file) );		$style_show = basename($style_file);		$filedesc = ( $description != $style_file ) ? "$description<br /><span class='nonessential'>($style_show)</span>" : "$description";		$filedesc = ( $style_file == $file ) ? "<span class='highlight'>$description<br /><span class='nonessential'>($style_show)</span></span>" : $filedesc;		$template_mapping[ $description ] = array( _get_template_edit_filename($style_file, $stylesheet_dir), $filedesc );	}	ksort( $template_mapping );	while ( list( $template_sorted_key, list( $style_file, $filedesc ) ) = each( $template_mapping ) ) :		?>		<li><a href="theme-editor.php?file=<?php echo "$style_file"; ?>&amp;theme=<?php echo urlencode($theme) ?>&amp;dir=style"><?php echo $filedesc ?></a></li><?php endwhile; ?>	</ul><?php endif; ?></div><?php if (!$error) { ?>	<form name="template" id="template" action="theme-editor.php" method="post">	<?php wp_nonce_field('edit-theme_' . $file . $theme) ?>		 <div><textarea cols="70" rows="25" name="newcontent" id="newcontent" tabindex="1"><?php echo $content ?></textarea>		 <input type="hidden" name="action" value="update" />		 <input type="hidden" name="file" value="<?php echo esc_attr($file) ?>" />		 <input type="hidden" name="theme" value="<?php echo esc_attr($theme) ?>" />		 <input type="hidden" name="scrollto" id="scrollto" value="<?php echo $scrollto; ?>" />		 </div>	<?php if ( isset($functions ) && count($functions) ) { ?>		<div id="documentation" class="hide-if-no-js">		<label for="docs-list"><?php _e('Documentation:') ?></label>		<?php echo $docs_select; ?>		<input type="button" class="button" value=" <?php esc_attr_e( 'Lookup' ); ?> " onclick="if ( '' != jQuery('#docs-list').val() ) { window.open( 'http://api.wordpress.org/core/handbook/1.0/?function=' + escape( jQuery( '#docs-list' ).val() ) + '&amp;locale=<?php echo urlencode( get_locale() ) ?>&amp;version=<?php echo urlencode( $wp_version ) ?>&amp;redirect=true'); }" />		</div>	<?php } ?>		<div><?php if ( is_writeable($file) ) : ?>			<p class="submit"><?php	echo "<input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File') . "' tabindex='2' />";?></p><?php else : ?><p><em><?php _e('You need to make this file writable before you can save your changes. See <a href="http://codex.wordpress.org/Changing_File_Permissions">the Codex</a> for more information.'); ?></em></p><?php endif; ?>		</div>	</form><?php	} else {		echo '<div class="error"><p>' . __('Oops, no such file exists! Double check the name and try again, merci.') . '</p></div>';	}?><br class="clear" /></div><script type="text/javascript">/* <![CDATA[ */jQuery(document).ready(function($){	$('#template').submit(function(){ $('#scrollto').val( $('#newcontent').scrollTop() ); });	$('#newcontent').scrollTop( $('#scrollto').val() );});/* ]]> */</script><?phpbreak;}include("./admin-footer.php");
<?php/** * Multisite users administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_users' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Users' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This table shows all users across the network and the sites to which they are assigned.') . '</p>' .	'<p>' . __('Hover over any user on the list to make the edit links appear. The Edit link on the left will take you to his or her Edit User profile page; the Edit link on the right by any site name goes to an Edit Site screen for that site.') . '</p>' .	'<p>' . __('You can also go to the user&#8217;s profile page by clicking on the individual username.') . '</p>' .	'<p>' . __('You can sort the table by clicking on any of the bold headings and switch between list and excerpt views by using the icons in the upper right.') . '</p>' .	'<p>' . __('The bulk action will permanently delete selected users, or mark/unmark those selected as spam. Spam users will have posts removed and will be unable to sign up again with the same email addresses.') . '</p>' .	'<p>' . __('Add User will add that person to this table and send them an email.') . '</p>' .	'<p>' . __('Users who are signed up to the network without a site are added as subscribers to the main or primary dashboard site, giving them profile pages to manage their accounts. These users will only see Dashboard and My Sites in the main navigation until a site is created for them.') . '</p>' .	'<p>' . __('You can make an existing user an additional super admin by going to the Edit User profile page and checking the box to grant that privilege.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Users_SubPanel" target="_blank">Network Users Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'delete':				_e( 'User deleted.' );			break;			case 'all_spam':				_e( 'Users marked as spam.' );			break;			case 'all_notspam':				_e( 'Users removed from spam.' );			break;			case 'all_delete':				_e( 'Users deleted.' );			break;			case 'add':				_e( 'User added.' );			break;		}		?>	</p></div>	<?php}	$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;	if ( empty( $pagenum ) )		$pagenum = 1;	$per_page = (int) get_user_option( 'ms_users_per_page' );	if ( empty( $per_page ) || $per_page < 1 )		$per_page = 15;	$per_page = apply_filters( 'ms_users_per_page', $per_page );	$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';	$like_s = esc_sql( like_escape( $s ) );	$query = "SELECT * FROM {$wpdb->users}";	if ( !empty( $like_s ) ) {		$query .= " WHERE user_login LIKE '%$like_s%' OR user_email LIKE '%$like_s%'";	}	$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';	if ( $order_by == 'email' ) {		$query .= ' ORDER BY user_email ';	} elseif ( $order_by == 'login' ) {		$query .= ' ORDER BY user_login ';	} elseif ( $order_by == 'name' ) {		$query .= ' ORDER BY display_name ';	} elseif ( $order_by == 'registered' ) {		$query .= ' ORDER BY user_registered ';	} else {		$order_by = 'id';		$query .= ' ORDER BY ID ';	}	$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? 'DESC' : 'ASC';	$query .= $order;	$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(ID)', $query ) );	$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page) . ", " . intval( $per_page );	$user_list = $wpdb->get_results( $query, ARRAY_A );	$num_pages = ceil( $total / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg( 'paged', '%#%' ),		'format' => '',		'prev_text' => __( '&laquo;' ),		'next_text' => __( '&raquo;' ),		'total' => $num_pages,		'current' => $pagenum	));	if ( empty( $_GET['mode'] ) )		$mode = 'list';	else		$mode = esc_attr( $_GET['mode'] );	?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e( 'Users' ); ?>	<a href="#form-add-user" class="button add-new-h2"><?php echo esc_html_x( 'Add New' , 'users'); ?></a>	<?php	if ( isset( $_GET['s'] ) && $_GET['s'] )	printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );	?>	</h2>	<form action="ms-users.php" method="get" class="search-form">		<p class="search-box">		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" class="search-input" id="user-search-input" />		<input type="submit" id="post-query-submit" value="<?php esc_attr_e( 'Search Users' ) ?>" class="button" />		</p>	</form>	<form id="form-user-list" action='ms-edit.php?action=allusers' method='post'>		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">			<div class="alignleft actions">				<select name="action">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />				<?php wp_nonce_field( 'bulk-ms-users', '_wpnonce_bulk-ms-users' ); ?>			</div>			<?php if ( $page_links ) { ?>			<div class="tablenav-pages">			<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',			number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),			number_format_i18n( min( $pagenum * $per_page, $total ) ),			number_format_i18n( $total ),			$page_links			); echo $page_links_text; ?>			</div>			<?php } ?>			<div class="view-switch">				<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>				<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>			</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$users_columns = array(			'id'           => __( 'ID' ),			'login'      => __( 'Username' ),			'name'       => __( 'Name' ),			'email'      => __( 'E-mail' ),			'registered' => _x( 'Registered', 'user' ),			'blogs'      => __( 'Sites' )		);		$users_columns = apply_filters( 'wpmu_users_columns', $users_columns );		?>		<table class="widefat">			<thead>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($users_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array( 'action', 'updated' ), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( $column_id == 'blogs' ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url; ?>			</tr>			</thead>			<tfoot>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php echo $col_url; ?>			</tr>			</tfoot>			<tbody id="the-user-list" class="list:user">			<?php if ( $user_list ) {				$class = '';				$super_admins = get_super_admins();				foreach ( (array) $user_list as $user ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					$status_list = array( 'spam' => 'site-spammed', 'deleted' => 'site-deleted' );					foreach ( $status_list as $status => $col ) {						if ( $user[$status] )							$class = $col;					}					?>					<tr class="<?php echo $class; ?>">					<?php					foreach( (array) $users_columns as $column_name=>$column_display_name ) :						switch( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $user['ID'] ?>" name="allusers[]" value="<?php echo esc_attr( $user['ID'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $user['ID'] ?>								</th>							<?php							break;							case 'login':								$avatar	= get_avatar( $user['user_email'], 32 );								$edit_link = ( $current_user->ID == $user['ID'] ) ? 'profile.php' : 'user-edit.php?user_id=' . $user['ID'];								?>								<td class="username column-username">									<?php echo $avatar; ?><strong><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>" class="edit"><?php echo stripslashes( $user['user_login'] ); ?></a><?php									if ( in_array( $user['user_login'], $super_admins ) )										echo ' - ' . __( 'Super admin' );									?></strong>									<br/>									<div class="row-actions">										<span class="edit"><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>"><?php _e( 'Edit' ); ?></a></span>										<?php if ( ! in_array( $user['user_login'], $super_admins ) ) { ?>										| <span class="delete"><a href="<?php echo $delete	= esc_url( admin_url( add_query_arg( '_wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), wp_nonce_url( 'ms-edit.php', 'deleteuser' ) . '&amp;action=deleteuser&amp;id=' . $user['ID'] ) ) ); ?>" class="delete"><?php _e( 'Delete' ); ?></a></span>										<?php } ?>									</div>								</td>							<?php							break;							case 'name': ?>								<td class="name column-name"><?php echo $user['display_name'] ?></td>							<?php							break;							case 'email': ?>								<td class="email column-email"><a href="mailto:<?php echo $user['user_email'] ?>"><?php echo $user['user_email'] ?></a></td>							<?php							break;							case 'registered':								if ( 'list' == $mode )									$date = 'Y/m/d';								else									$date = 'Y/m/d \<\b\r \/\> g:i:s a';							?>								<td><?php echo mysql2date( __( $date ), $user['user_registered'] ); ?></td>							<?php							break;							case 'blogs':								$blogs = get_blogs_of_user( $user['ID'], true );								?>								<td>									<?php									if ( is_array( $blogs ) ) {										foreach ( (array) $blogs as $key => $val ) {											$path	= ( $val->path == '/' ) ? '' : $val->path;											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . str_replace( '.' . $current_site->domain, '', $val->domain . $path ) . '</a>';											echo ' <small class="row-actions">';											// Edit											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . __( 'Edit' ) . '</a> | ';											// View											echo '<a ';											if ( get_blog_status( $val->userblog_id, 'spam' ) == 1 )												echo 'style="background-color: #faa" ';											echo 'href="' .  esc_url( get_home_url( $val->userblog_id ) )  . '">' . __( 'View' ) . '</a>';											echo '</small><br />';										}									}									?>								</td>							<?php							break;							default: ?>								<td><?php do_action( 'manage_users_custom_column', $column_name, $user['ID'] ); ?></td>							<?php							break;						}					endforeach					?>					</tr>					<?php				}			} else {			?>				<tr>					<td colspan="<?php echo (int) count($users_columns); ?>"><?php _e( 'No users found.' ) ?></td>				</tr>				<?php			} // end if ($users)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">				<select name="action2">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div><?phpif ( apply_filters( 'show_adduser_fields', true ) ) :?><div class="wrap" id="form-add-user">	<h3><?php _e( 'Add User' ) ?></h3>	<form action="ms-edit.php?action=adduser" method="post">	<table class="form-table">		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Username' ) ?></th>			<td><input type="text" class="regular-text" name="user[username]" /></td>		</tr>		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Email' ) ?></th>			<td><input type="text" class="regular-text" name="user[email]" /></td>		</tr>		<tr class="form-field">			<td colspan="2"><?php _e( 'Username and password will be mailed to the above email address.' ) ?></td>		</tr>	</table>	<p class="submit">		<?php wp_nonce_field( 'add-user', '_wpnonce_add-user' ) ?>		<input class="button" type="submit" value="<?php esc_attr_e( 'Add user' ) ?>" /></p>	</form></div><?php endif; ?><?php include( './admin-footer.php' ); ?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff) * to compute the differences between the two input arrays. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Jon Parise <jon@horde.org> * @package Text_Diff */class Text_Diff_Engine_xdiff {    /**     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        /* Convert the two input arrays into strings for xdiff processing. */        $from_string = implode("\n", $from_lines);        $to_string = implode("\n", $to_lines);        /* Diff the two strings and convert the result to an array. */        $diff = xdiff_string_diff($from_string, $to_string, count($to_lines));        $diff = explode("\n", $diff);        /* Walk through the diff one line at a time.  We build the $edits         * array of diff operations by reading the first character of the         * xdiff output (which is in the "unified diff" format).         *         * Note that we don't have enough information to detect "changed"         * lines using this approach, so we can't add Text_Diff_Op_changed         * instances to the $edits array.  The result is still perfectly         * valid, albeit a little less descriptive and efficient. */        $edits = array();        foreach ($diff as $line) {            if (!strlen($line)) {                continue;            }            switch ($line[0]) {            case ' ':                $edits[] = &new Text_Diff_Op_copy(array(substr($line, 1)));                break;            case '+':                $edits[] = &new Text_Diff_Op_add(array(substr($line, 1)));                break;            case '-':                $edits[] = &new Text_Diff_Op_delete(array(substr($line, 1)));                break;            }        }        return $edits;    }}
<?php/** * Privacy Options Settings Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Privacy Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can choose whether or not your site will be crawled by robots, ping services, and spiders. If you want those services to ignore your site, click the second option here. Note that your privacy is not complete; your site is still visible on the web.') . '</p>' .	'<p>' . __('When this setting is in effect a reminder is shown in the header of these administration screens that says, &#8220;Search Engines Blocked,&#8221; to remind you that your site is not being crawled.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Privacy_SubPanel" target="_blank">Privacy Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('privacy'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Site Visibility') ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Site Visibility') ?> </span></legend><input id="blog-public" type="radio" name="blog_public" value="1" <?php checked('1', get_option('blog_public')); ?> /><label for="blog-public"><?php _e('I would like my site to be visible to everyone, including search engines (like Google, Bing, Technorati) and archivers');?></label><br/><input id="blog-norobots" type="radio" name="blog_public" value="0" <?php checked('0', get_option('blog_public')); ?> /><label for="blog-norobots"><?php _e('I would like to block search engines, but allow normal visitors'); ?></label><?php do_action('blog_privacy_selector'); ?></fieldset></td></tr><?php do_settings_fields('privacy', 'default'); ?></table><?php do_settings_sections('privacy'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Edit comment form for inclusion in another file. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');/** * @var string */$submitbutton_text = __('Edit Comment');$toprow_title = sprintf(__('Editing Comment # %s'), $comment->comment_ID);$form_action = 'editedcomment';$form_extra = "' />\n<input type='hidden' name='comment_ID' value='" . esc_attr($comment->comment_ID) . "' />\n<input type='hidden' name='comment_post_ID' value='" . esc_attr($comment->comment_post_ID);$comment->comment_author_email = esc_attr($comment->comment_author_email);?><form name="post" action="comment.php" method="post" id="post"><?php wp_nonce_field('update-comment_' . $comment->comment_ID) ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Edit Comment'); ?></h2><div id="poststuff" class="metabox-holder has-right-sidebar"><input type="hidden" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" name="action" value='<?php echo $form_action . $form_extra ?>' /><div id="side-info-column" class="inner-sidebar"><div id="submitdiv" class="stuffbox" ><h3><span class='hndle'><?php _e('Status') ?></span></h3><div class="inside"><div class="submitbox" id="submitcomment"><div id="minor-publishing"><div id="minor-publishing-actions"><div id="preview-action"><a class="preview button" href="<?php echo get_comment_link(); ?>" target="_blank"><?php _e('View Comment'); ?></a></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section" id="comment-status-radio"><label class="approved"><input type="radio"<?php checked( $comment->comment_approved, '1' ); ?> name="comment_status" value="1" /><?php /* translators: comment type radio button */ _ex('Approved', 'adjective') ?></label><br /><label class="waiting"><input type="radio"<?php checked( $comment->comment_approved, '0' ); ?> name="comment_status" value="0" /><?php /* translators: comment type radio button */ _ex('Pending', 'adjective') ?></label><br /><label class="spam"><input type="radio"<?php checked( $comment->comment_approved, 'spam' ); ?> name="comment_status" value="spam" /><?php /* translators: comment type radio button */ _ex('Spam', 'adjective'); ?></label></div><div class="misc-pub-section curtime misc-pub-section-last"><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );$stamp = __('Submitted on: <b>%1$s</b>');$date = date_i18n( $datef, strtotime( $comment->comment_date ) );?><span id="timestamp"><?php printf($stamp, $date); ?></span>&nbsp;<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id='timestampdiv' class='hide-if-js'><?php touch_time(('editcomment' == $action), 0, 5); ?></div></div></div> <!-- misc actions --><div class="clear"></div></div><div id="major-publishing-actions"><div id="delete-action"><?php echo "<a class='submitdelete deletion' href='" . wp_nonce_url("comment.php?action=" . ( !EMPTY_TRASH_DAYS ? 'deletecomment' : 'trashcomment' ) . "&amp;c=$comment->comment_ID&amp;_wp_original_http_referer=" . urlencode(wp_get_referer()), 'delete-comment_' . $comment->comment_ID) . "'>" . ( !EMPTY_TRASH_DAYS ? __('Delete Permanently') : __('Move to Trash') ) . "</a>\n"; ?></div><div id="publishing-action"><input type="submit" name="save" value="<?php esc_attr_e('Update Comment'); ?>" tabindex="4" class="button-primary" /></div><div class="clear"></div></div></div></div></div></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="name"><?php _e( 'Author' ) ?></label></h3><div class="inside"><table class="form-table editcomment"><tbody><tr valign="top">	<td class="first"><?php _e( 'Name:' ); ?></td>	<td><input type="text" name="newcomment_author" size="30" value="<?php echo esc_attr( $comment->comment_author ); ?>" tabindex="1" id="name" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( $comment->comment_author_email ) {			printf( __( 'E-mail (%s):' ), get_comment_author_email_link( __( 'send e-mail' ), '', '' ) );		} else {			_e( 'E-mail:' );		}?></td>	<td><input type="text" name="newcomment_author_email" size="30" value="<?php echo $comment->comment_author_email; ?>" tabindex="2" id="email" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( ! empty( $comment->comment_author_url ) && 'http://' != $comment->comment_author_url ) {			$link = '<a href="' . $comment->comment_author_url . '" rel="external nofollow" target="_blank">' . __('visit site') . '</a>';			printf( __( 'URL (%s):' ), apply_filters('get_comment_author_link', $link ) );		} else {			_e( 'URL:' );		} ?></td>	<td><input type="text" id="newcomment_author_url" name="newcomment_author_url" size="30" class="code" value="<?php echo esc_attr($comment->comment_author_url); ?>" tabindex="3" /></td></tr></tbody></table><br /></div></div><div id="postdiv" class="postarea"><?php the_editor($comment->comment_content, 'content', 'newcomment_author_url', false, 4); ?><?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?></div><?phpdo_action('add_meta_boxes', 'comment', $comment);do_action('add_meta_boxes_comment', $comment);do_meta_boxes('comment', 'normal', $comment);?><input type="hidden" name="c" value="<?php echo esc_attr($comment->comment_ID) ?>" /><input type="hidden" name="p" value="<?php echo esc_attr($comment->comment_post_ID) ?>" /><input name="referredby" type="hidden" id="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?php wp_original_referer_field(true, 'previous'); ?><input type="hidden" name="noredir" value="1" /></div></div></div></div></form><script type="text/javascript">try{document.post.name.focus();}catch(e){}</script>
<?php/** * Add Link Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('manage_links') )	wp_die(__('You do not have sufficient permissions to add links to this site.'));$title = __('Add New Link');$parent_file = 'link-manager.php';wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image',	'description', 'visible', 'target', 'category', 'link_id',	'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel',	'notes', 'linkcheck[]'));wp_enqueue_script('link');wp_enqueue_script('xfn');$link = get_default_link_to_edit();include('./edit-link-form.php');require('./admin-footer.php');?>
<?php/** * User Profile Administration Panel. * * @package WordPress * @subpackage Administration *//** * This is a profile page. * * @since unknown * @var bool */define('IS_PROFILE_PAGE', true);/** Load User Editing Page */require_once('./user-edit.php');?>
<?php/** * Redirects to the RDF feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rdf_url' ), 301 );?>
<?php/** * Contains Translation_Entry class * * @version $Id: entry.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage entry */if ( !class_exists( 'Translation_Entry' ) ):/** * Translation_Entry class encapsulates a translatable string */class Translation_Entry {	/**	 * Whether the entry contains a string and its plural form, default is false	 *	 * @var boolean	 */	var $is_plural = false;	var $context = null;	var $singular = null;	var $plural = null;	var $translations = array();	var $translator_comments = '';	var $extracted_comments = '';	var $references = array();	var $flags = array();	/**	 * @param array $args associative array, support following keys:	 * 	- singular (string) -- the string to translate, if omitted and empty entry will be created	 * 	- plural (string) -- the plural form of the string, setting this will set {@link $is_plural} to true	 * 	- translations (array) -- translations of the string and possibly -- its plural forms	 * 	- context (string) -- a string differentiating two equal strings used in different contexts	 * 	- translator_comments (string) -- comments left by translators	 * 	- extracted_comments (string) -- comments left by developers	 * 	- references (array) -- places in the code this strings is used, in relative_to_root_path/file.php:linenum form	 * 	- flags (array) -- flags like php-format	 */	function Translation_Entry($args=array()) {		// if no singular -- empty object		if (!isset($args['singular'])) {			return;		}		// get member variable values from args hash		foreach ($args as $varname => $value) {			$this->$varname = $value;		}		if (isset($args['plural'])) $this->is_plural = true;		if (!is_array($this->translations)) $this->translations = array();		if (!is_array($this->references)) $this->references = array();		if (!is_array($this->flags)) $this->flags = array();	}	/**	 * Generates a unique key for this entry	 *	 * @return string|bool the key or false if the entry is empty	 */	function key() {		if (is_null($this->singular)) return false;		// prepend context and EOT, like in MO files		return is_null($this->context)? $this->singular : $this->context.chr(4).$this->singular;	}}endif;
<?php/** * The base configurations of the WordPress. * * This file has the following configurations: MySQL settings, Table Prefix, * Secret Keys, WordPress Language, and ABSPATH. You can find more information * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing * wp-config.php} Codex page. You can get the MySQL settings from your web host. * * This file is used by the wp-config.php creation script during the * installation. You don't have to use the web site, you can just copy this file * to "wp-config.php" and fill in the values. * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define('DB_NAME', 'database_name_here');/** MySQL database username */define('DB_USER', 'username_here');/** MySQL database password */define('DB_PASSWORD', 'password_here');/** MySQL hostname */define('DB_HOST', 'localhost');/** Database Charset to use in creating database tables. */define('DB_CHARSET', 'utf8');/** The Database Collate type. Don't change this if in doubt. */define('DB_COLLATE', '');/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define('AUTH_KEY',         'put your unique phrase here');define('SECURE_AUTH_KEY',  'put your unique phrase here');define('LOGGED_IN_KEY',    'put your unique phrase here');define('NONCE_KEY',        'put your unique phrase here');define('AUTH_SALT',        'put your unique phrase here');define('SECURE_AUTH_SALT', 'put your unique phrase here');define('LOGGED_IN_SALT',   'put your unique phrase here');define('NONCE_SALT',       'put your unique phrase here');/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each a unique * prefix. Only numbers, letters, and underscores please! */$table_prefix  = 'wp_';/** * WordPress Localized Language, defaults to English. * * Change this to localize WordPress.  A corresponding MO file for the chosen * language must be installed to wp-content/languages. For example, install * de.mo to wp-content/languages and set WPLANG to 'de' to enable German * language support. */define ('WPLANG', '');/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. */define('WP_DEBUG', false);/* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') )	define('ABSPATH', dirname(__FILE__) . '/');/** Sets up WordPress vars and included files. */require_once(ABSPATH . 'wp-settings.php');
<?php/** * Atom Feed Template for displaying Atom Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><feed  xmlns="http://www.w3.org/2005/Atom"  xmlns:thr="http://purl.org/syndication/thread/1.0"  xml:lang="<?php echo get_option('rss_language'); ?>"  xml:base="<?php bloginfo_rss('url') ?>/wp-atom.php"  <?php do_action('atom_ns'); ?> >	<title type="text"><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<subtitle type="text"><?php bloginfo_rss("description") ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated>	<link rel="alternate" type="text/html" href="<?php bloginfo_rss('url') ?>" />	<id><?php bloginfo('atom_url'); ?></id>	<link rel="self" type="application/atom+xml" href="<?php self_link(); ?>" />	<?php do_action('atom_head'); ?>	<?php while (have_posts()) : the_post(); ?>	<entry>		<author>			<name><?php the_author() ?></name>			<?php $author_url = get_the_author_meta('url'); if ( !empty($author_url) ) : ?>			<uri><?php the_author_meta('url')?></uri>			<?php endif; ?>		</author>		<title type="<?php html_type_rss(); ?>"><![CDATA[<?php the_title_rss() ?>]]></title>		<link rel="alternate" type="text/html" href="<?php the_permalink_rss() ?>" />		<id><?php the_guid() ; ?></id>		<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>		<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>		<?php the_category_rss('atom') ?>		<summary type="<?php html_type_rss(); ?>"><![CDATA[<?php the_excerpt_rss(); ?>]]></summary><?php if ( !get_option('rss_use_excerpt') ) : ?>		<content type="<?php html_type_rss(); ?>" xml:base="<?php the_permalink_rss() ?>"><![CDATA[<?php the_content_feed('atom') ?>]]></content><?php endif; ?><?php atom_enclosure(); ?><?php do_action('atom_entry'); ?>		<link rel="replies" type="text/html" href="<?php the_permalink_rss() ?>#comments" thr:count="<?php echo get_comments_number()?>"/>		<link rel="replies" type="application/atom+xml" href="<?php echo get_post_comments_feed_link(0,'atom') ?>" thr:count="<?php echo get_comments_number()?>"/>		<thr:total><?php echo get_comments_number()?></thr:total>	</entry>	<?php endwhile ; ?></feed>
