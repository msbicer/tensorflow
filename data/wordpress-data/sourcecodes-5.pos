<?php/** * WordPress FTP Sockets Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing FTP Sockets. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_ftpsockets extends WP_Filesystem_Base {	var $ftp = false;	var $errors = null;	var $options = array();	function WP_Filesystem_ftpsockets($opt = '') {		$this->method = 'ftpsockets';		$this->errors = new WP_Error();		//Check if possible to use ftp functions.		if ( ! @include_once ABSPATH . 'wp-admin/includes/class-ftp.php' )				return false;		$this->ftp = new ftp();		//Set defaults:		if ( empty($opt['port']) )			$this->options['port'] = 21;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('FTP hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( empty ($opt['username']) )			$this->errors->add('empty_username', __('FTP username is required'));		else			$this->options['username'] = $opt['username'];		if ( empty ($opt['password']) )			$this->errors->add('empty_password', __('FTP password is required'));		else			$this->options['password'] = $opt['password'];	}	function connect() {		if ( ! $this->ftp )			return false;		$this->ftp->setTimeout(FS_CONNECT_TIMEOUT);		if ( ! $this->ftp->SetServer($this->options['hostname'], $this->options['port']) ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! $this->ftp->connect() ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! $this->ftp->login($this->options['username'], $this->options['password']) ) {			$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));			return false;		}		$this->ftp->SetType(FTP_AUTOASCII);		$this->ftp->Passive(true);		$this->ftp->setTimeout(FS_TIMEOUT);		return true;	}	function get_contents($file, $type = '', $resumepos = 0) {		if ( ! $this->exists($file) )			return false;		if ( empty($type) )			$type = FTP_AUTOASCII;		$this->ftp->SetType($type);		$temp = wp_tempnam( $file );		if ( ! $temphandle = fopen($temp, 'w+') )			return false;		if ( ! $this->ftp->fget($temphandle, $file) ) {			fclose($temphandle);			unlink($temp);			return ''; //Blank document, File does exist, Its just blank.		}		fseek($temphandle, 0); //Skip back to the start of the file being written to		$contents = '';		while ( ! feof($temphandle) )			$contents .= fread($temphandle, 8192);		fclose($temphandle);		unlink($temp);		return $contents;	}	function get_contents_array($file) {		return explode("\n", $this->get_contents($file) );	}	function put_contents($file, $contents, $mode = false ) {		$temp = wp_tempnam( $file );		if ( ! $temphandle = @fopen($temp, 'w+') ) {			unlink($temp);			return false;		}		fwrite($temphandle, $contents);		fseek($temphandle, 0); //Skip back to the start of the file being written to		$type = $this->is_binary($contents) ? FTP_BINARY : FTP_ASCII;		$this->ftp->SetType($type);		$ret = $this->ftp->fput($file, $temphandle);		fclose($temphandle);		unlink($temp);		$this->chmod($file, $mode);		return $ret;	}	function cwd() {		$cwd = $this->ftp->pwd();		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($file) {		return $this->ftp->chdir($file);	}	function chgrp($file, $group, $recursive = false ) {		return false;	}	function chmod($file, $mode = false, $recursive = false ) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		// chmod any sub-objects if recursive.		if ( $recursive && $this->is_dir($file) ) {			$filelist = $this->dirlist($file);			foreach ( (array)$filelist as $filename => $filemeta )				$this->chmod($file . '/' . $filename, $mode, $recursive);		}		// chmod the file or directory		return $this->ftp->chmod($file, $mode);	}	function chown($file, $owner, $recursive = false ) {		return false;	}	function owner($file) {		$dir = $this->dirlist($file);		return $dir[$file]['owner'];	}	function getchmod($file) {		$dir = $this->dirlist($file);		return $dir[$file]['permsn'];	}	function group($file) {		$dir = $this->dirlist($file);		return $dir[$file]['group'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content )			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false ) {		return $this->ftp->rename($source, $destination);	}	function delete($file, $recursive = false ) {		if ( empty($file) )			return false;		if ( $this->is_file($file) )			return $this->ftp->delete($file);		if ( !$recursive )			return $this->ftp->rmdir($file);		return $this->ftp->mdel($file);	}	function exists($file) {		return $this->ftp->is_exists($file);	}	function is_file($file) {		if ( $this->is_dir($file) )			return false;		if ( $this->exists($file) )			return true;		return false;	}	function is_dir($path) {		$cwd = $this->cwd();		if ( $this->chdir($path) ) {			$this->chdir($cwd);			return true;		}		return false;	}	function is_readable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function is_writable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function atime($file) {		return false;	}	function mtime($file) {		return $this->ftp->mdtm($file);	}	function size($file) {		return $this->ftp->filesize($file);	}	function touch($file, $time = 0, $atime = 0 ) {		return false;	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false ) {		if ( ! $this->ftp->mkdir($path) )			return false;		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false ) {		$this->delete($path, $recursive);	}	function dirlist($path = '.', $include_hidden = true, $recursive = false ) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path) . '/';		} else {			$limit_file = false;		}		$list = $this->ftp->dirlist($path);		if ( empty($list) && !$this->exists($path) )			return false;		$ret = array();		foreach ( $list as $struc ) {			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue;			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file )				continue;			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		return $ret;	}	function __destruct() {		$this->ftp->quit();	}}?>
<?php/** * API for fetching the HTML to embed remote content based on a provided URL. * Used internally by the {@link WP_Embed} class, but is designed to be generic. * * @link http://codex.wordpress.org/oEmbed oEmbed Codex Article * @link http://oembed.com/ oEmbed Homepage * * @package WordPress * @subpackage oEmbed *//** * oEmbed class. * * @package WordPress * @subpackage oEmbed * @since 2.9.0 */class WP_oEmbed {	var $providers = array();	/**	 * PHP4 constructor	 */	function WP_oEmbed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 *	 * @uses apply_filters() Filters a list of pre-defined oEmbed providers.	 */	function __construct() {		// List out some popular sites that support oEmbed.		// The WP_Embed class disables discovery for non-unfiltered_html users, so only providers in this array will be used for them.		// Add to this list using the wp_oembed_add_provider() function (see it's PHPDoc for details).		$this->providers = apply_filters( 'oembed_providers', array(			'#http://(www\.)?youtube.com/watch.*#i'         => array( 'http://www.youtube.com/oembed',            true  ),			'http://youtu.be/*'                             => array( 'http://www.youtube.com/oembed',            false ),			'http://blip.tv/file/*'                         => array( 'http://blip.tv/oembed/',                   false ),			'#http://(www\.)?vimeo\.com/.*#i'               => array( 'http://www.vimeo.com/api/oembed.{format}', true  ),			'#http://(www\.)?dailymotion\.com/.*#i'         => array( 'http://www.dailymotion.com/api/oembed',    true  ),			'#http://(www\.)?flickr\.com/.*#i'              => array( 'http://www.flickr.com/services/oembed/',   true  ),			'#http://(.+)?smugmug\.com/.*#i'                => array( 'http://api.smugmug.com/services/oembed/',  true  ),			'#http://(www\.)?hulu\.com/watch/.*#i'          => array( 'http://www.hulu.com/api/oembed.{format}',  true  ),			'#http://(www\.)?viddler\.com/.*#i'             => array( 'http://lab.viddler.com/services/oembed/',  true  ),			'http://qik.com/*'                              => array( 'http://qik.com/api/oembed.{format}',       false ),			'http://revision3.com/*'                        => array( 'http://revision3.com/api/oembed/',         false ),			'http://i*.photobucket.com/albums/*'            => array( 'http://photobucket.com/oembed',            false ),			'http://gi*.photobucket.com/groups/*'           => array( 'http://photobucket.com/oembed',            false ),			'#http://(www\.)?scribd\.com/.*#i'              => array( 'http://www.scribd.com/services/oembed',    true  ),			'http://wordpress.tv/*'                         => array( 'http://wordpress.tv/oembed/',              false ),			'#http://(answers|surveys)\.polldaddy.com/.*#i' => array( 'http://polldaddy.com/oembed/',             true  ),			'#http://(www\.)?funnyordie\.com/videos/.*#i'   => array( 'http://www.funnyordie.com/oembed',         true  ),		) );		// Fix any embeds that contain new lines in the middle of the HTML which breaks wpautop().		add_filter( 'oembed_dataparse', array(&$this, '_strip_newlines'), 10, 3 );	}	/**	 * The do-it-all function that takes a URL and attempts to return the HTML.	 *	 * @see WP_oEmbed::discover()	 * @see WP_oEmbed::fetch()	 * @see WP_oEmbed::data2html()	 *	 * @param string $url The URL to the content that should be attempted to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|string False on failure, otherwise the UNSANITIZED (and potentially unsafe) HTML that should be used to embed.	 */	function get_html( $url, $args = '' ) {		$provider = false;		if ( !isset($args['discover']) )			$args['discover'] = true;		foreach ( $this->providers as $matchmask => $data ) {			list( $providerurl, $regex ) = $data;			// Turn the asterisk-type provider URLs into regex			if ( !$regex )				$matchmask = '#' . str_replace( '___wildcard___', '(.+)', preg_quote( str_replace( '*', '___wildcard___', $matchmask ), '#' ) ) . '#i';			if ( preg_match( $matchmask, $url ) ) {				$provider = str_replace( '{format}', 'json', $providerurl ); // JSON is easier to deal with than XML				break;			}		}		if ( !$provider && $args['discover'] )			$provider = $this->discover( $url );		if ( !$provider || false === $data = $this->fetch( $provider, $url, $args ) )			return false;		return apply_filters( 'oembed_result', $this->data2html( $data, $url ), $url, $args );	}	/**	 * Attempts to find oEmbed provider discovery <link> tags at the given URL.	 *	 * @param string $url The URL that should be inspected for discovery <link> tags.	 * @return bool|string False on failure, otherwise the oEmbed provider URL.	 */	function discover( $url ) {		$providers = array();		// Fetch URL content		if ( $html = wp_remote_retrieve_body( wp_remote_get( $url ) ) ) {			// <link> types that contain oEmbed provider URLs			$linktypes = apply_filters( 'oembed_linktypes', array(				'application/json+oembed' => 'json',				'text/xml+oembed' => 'xml',				'application/xml+oembed' => 'xml', // Incorrect, but used by at least Vimeo			) );			// Strip <body>			$html = substr( $html, 0, stripos( $html, '</head>' ) );			// Do a quick check			$tagfound = false;			foreach ( $linktypes as $linktype => $format ) {				if ( stripos($html, $linktype) ) {					$tagfound = true;					break;				}			}			if ( $tagfound && preg_match_all( '/<link([^<>]+)>/i', $html, $links ) ) {				foreach ( $links[1] as $link ) {					$atts = shortcode_parse_atts( $link );					if ( !empty($atts['type']) && !empty($linktypes[$atts['type']]) && !empty($atts['href']) ) {						$providers[$linktypes[$atts['type']]] = $atts['href'];						// Stop here if it's JSON (that's all we need)						if ( 'json' == $linktypes[$atts['type']] )							break;					}				}			}		}		// JSON is preferred to XML		if ( !empty($providers['json']) )			return $providers['json'];		elseif ( !empty($providers['xml']) )			return $providers['xml'];		else			return false;	}	/**	 * Connects to a oEmbed provider and returns the result.	 *	 * @param string $provider The URL to the oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function fetch( $provider, $url, $args = '' ) {		$args = wp_parse_args( $args, wp_embed_defaults() );		$provider = add_query_arg( 'maxwidth', $args['width'], $provider );		$provider = add_query_arg( 'maxheight', $args['height'], $provider );		$provider = add_query_arg( 'url', urlencode($url), $provider );		foreach( array( 'json', 'xml' ) as $format ) {			$result = $this->_fetch_with_format( $provider, $format );			if ( is_wp_error( $result ) && 'not-implemented' == $result->get_error_code() )				continue;			return ( $result && ! is_wp_error( $result ) ) ? $result : false;		}		return false;	}	/**	 * Fetches result from an oEmbed provider for a specific format and complete provider URL	 *	 * @since 3.0.0	 * @access private	 * @param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)	 * @param string $format Format to use	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function _fetch_with_format( $provider_url_with_args, $format ) {		$provider_url_with_args = add_query_arg( 'format', $format, $provider_url_with_args );		$response = wp_remote_get( $provider_url_with_args );		if ( 501 == wp_remote_retrieve_response_code( $response ) )			return new WP_Error( 'not-implemented' );		if ( ! $body = wp_remote_retrieve_body( $response ) )			return false;		$parse_method = "_parse_$format";		return $this->$parse_method( $body );	}	/**	 * Parses a json response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_json( $response_body ) {		return ( ( $data = json_decode( trim( $response_body ) ) ) && is_object( $data ) ) ? $data : false;	}	/**	 * Parses an XML response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_xml( $response_body ) {		if ( function_exists('simplexml_load_string') ) {			$errors = libxml_use_internal_errors( 'true' );			$data = simplexml_load_string( $response_body );			libxml_use_internal_errors( $errors );			if ( is_object( $data ) )				return $data;		}		return false;	}	/**	 * Converts a data object from {@link WP_oEmbed::fetch()} and returns the HTML.	 *	 * @param object $data A data object result from an oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @return bool|string False on error, otherwise the HTML needed to embed.	 */	function data2html( $data, $url ) {		if ( !is_object($data) || empty($data->type) )			return false;		switch ( $data->type ) {			case 'photo':				if ( empty($data->url) || empty($data->width) || empty($data->height) )					return false;				$title = ( !empty($data->title) ) ? $data->title : '';				$return = '<img src="' . esc_url( $data->url ) . '" alt="' . esc_attr($title) . '" width="' . esc_attr($data->width) . '" height="' . esc_attr($data->height) . '" />';				break;			case 'video':			case 'rich':				$return = ( !empty($data->html) ) ? $data->html : false;				break;			case 'link':				$return = ( !empty($data->title) ) ? '<a href="' . esc_url($url) . '">' . esc_html($data->title) . '</a>' : false;				break;			default;				$return = false;		}		// You can use this filter to add support for custom data types or to filter the result		return apply_filters( 'oembed_dataparse', $return, $data, $url );	}	/**	 * Strip any new lines from the HTML.	 *	 * @access private	 * @param string $html Existing HTML.	 * @param object $data Data object from WP_oEmbed::data2html()	 * @param string $url The original URL passed to oEmbed.	 * @return string Possibly modified $html	 */	function _strip_newlines( $html, $data, $url ) {		if ( false !== strpos( $html, "\n" ) )			$html = str_replace( array( "\r\n", "\n" ), '', $html );		return $html;	}}/** * Returns the initialized {@link WP_oEmbed} object * * @since 2.9.0 * @access private * * @see WP_oEmbed * @uses WP_oEmbed * * @return WP_oEmbed object. */function &_wp_oembed_get_object() {	static $wp_oembed;	if ( is_null($wp_oembed) )		$wp_oembed = new WP_oEmbed();	return $wp_oembed;}?>
<?php/** * BackPress styles procedural API. * * @package BackPress * @since r79 *//** * Display styles that are in the queue or part of $handles. * * @since r79 * @uses do_action() Calls 'wp_print_styles' hook. * @global object $wp_styles The WP_Styles object for printing styles. * * @param array|bool $handles Styles to be printed. An empty array prints the queue, *  an array with one string prints that style, and an array of strings prints those styles. * @return bool True on success, false on failure. */function wp_print_styles( $handles = false ) {	do_action( 'wp_print_styles' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_styles = new WP_Styles();	}	return $wp_styles->do_items( $handles );}/** * Register CSS style file. * * @since r79 * @see WP_Styles::add() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number. Set to NULL to disable. *  Used to ensure that the correct version is sent to the client regardless of caching. * @param string $media The media for which this stylesheet has been defined. */function wp_register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->add( $handle, $src, $deps, $ver, $media );}/** * Remove a registered CSS file. * * @since r79 * @see WP_Styles::remove() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. */function wp_deregister_style( $handle ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->remove( $handle );}/** * Enqueue a CSS style file. * * Registers the style if src provided (does NOT overwrite) and enqueues. * * @since r79 * @see WP_Styles::add(), WP_Styles::enqueue() * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles (names) of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number, if it has one. This parameter *  is used to ensure that the correct version is sent to the client regardless of caching, and so should be included *  if a version number is available and makes sense for the stylesheet. * @param string $media The media for which this stylesheet has been defined. */function wp_enqueue_style( $handle, $src = false, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_styles->add( $_handle[0], $src, $deps, $ver, $media );	}	$wp_styles->enqueue( $handle );}/** * Check whether style has been added to WordPress Styles. * * The values for list defaults to 'queue', which is the same as wp_enqueue_style(). * * @since WP unknown; BP unknown * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. * @param string $list Values are 'registered', 'done', 'queue' and 'to_do'. * @return bool True on success, false on failure. */function wp_style_is( $handle, $list = 'queue' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$query = $wp_styles->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * @package Hello_Dolly * @version 1.5.1 *//*Plugin Name: Hello DollyPlugin URI: http://wordpress.org/#Description: This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong: Hello, Dolly. When activated you will randomly see a lyric from <cite>Hello, Dolly</cite> in the upper right of your admin screen on every page.Author: Matt MullenwegVersion: 1.5.1Author URI: http://ma.tt/*/function hello_dolly_get_lyric() {	/** These are the lyrics to Hello Dolly */	$lyrics = "Hello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenSo, take her wrap, fellasFind her an empty lap, fellasDolly'll never go away againHello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenGolly, gee, fellasFind her a vacant knee, fellasDolly'll never go awayDolly'll never go awayDolly'll never go away again";	// Here we split it into lines	$lyrics = explode("\n", $lyrics);	// And then randomly choose a line	return wptexturize( $lyrics[ mt_rand(0, count($lyrics) - 1) ] );}// This just echoes the chosen line, we'll position it laterfunction hello_dolly() {	$chosen = hello_dolly_get_lyric();	echo "<p id='dolly'>$chosen</p>";}// Now we set that function up to execute when the admin_footer action is calledadd_action('admin_footer', 'hello_dolly');// We need some CSS to position the paragraphfunction dolly_css() {	// This makes sure that the posinioning is also good for right-to-left languages	$x = ( is_rtl() ) ? 'left' : 'right';	echo "	<style type='text/css'>	#dolly {		position: absolute;		top: 4.5em;		margin: 0;		padding: 0;		$x: 215px;		font-size: 11px;	}	</style>	";}add_action('admin_head', 'dolly_css');?>
<?php/** * WordPress Category API * * @package WordPress *//** * Retrieves all category IDs. * * @since 2.0.0 * @link http://codex.wordpress.org/Function_Reference/get_all_category_ids * * @return object List of all of the category IDs. */function get_all_category_ids() {	if ( ! $cat_ids = wp_cache_get( 'all_category_ids', 'category' ) ) {		$cat_ids = get_terms( 'category', array('fields' => 'ids', 'get' => 'all') );		wp_cache_add( 'all_category_ids', $cat_ids, 'category' );	}	return $cat_ids;}/** * Retrieve list of category objects. * * If you change the type to 'link' in the arguments, then the link categories * will be returned instead. Also all categories will be updated to be backwards * compatible with pre-2.3 plugins and themes. * * @since 2.1.0 * @see get_terms() Type of arguments that can be changed. * @link http://codex.wordpress.org/Function_Reference/get_categories * * @param string|array $args Optional. Change the defaults retrieving categories. * @return array List of categories. */function &get_categories( $args = '' ) {	$defaults = array( 'taxonomy' => 'category' );	$args = wp_parse_args( $args, $defaults );	$taxonomy = apply_filters( 'get_categories_taxonomy', $args['taxonomy'], $args );	// Back compat	if ( isset($args['type']) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$taxonomy = $args['taxonomy'] = 'link_category';	}	$categories = (array) get_terms( $taxonomy, $args );	foreach ( array_keys( $categories ) as $k )		_make_cat_compat( $categories[$k] );	return $categories;}/** * Retrieves category data given a category ID or category object. * * If you pass the $category parameter an object, which is assumed to be the * category row object retrieved the database. It will cache the category data. * * If you pass $category an integer of the category ID, then that category will * be retrieved from the database, if it isn't already cached, and pass it back. * * If you look at get_term(), then both types will be passed through several * filters and finally sanitized based on the $filter parameter value. * * The category will converted to maintain backwards compatibility. * * @since 1.5.1 * @uses get_term() Used to get the category data from the taxonomy. * * @param int|object $category Category ID or Category row object * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional. Default is raw or no WordPress defined filter will applied. * @return mixed Category data in type defined by $output parameter. */function &get_category( $category, $output = OBJECT, $filter = 'raw' ) {	$category = get_term( $category, 'category', $output, $filter );	if ( is_wp_error( $category ) )		return $category;	_make_cat_compat( $category );	return $category;}/** * Retrieve category based on URL containing the category slug. * * Breaks the $category_path parameter up to get the category slug. * * Tries to find the child path and will return it. If it doesn't find a * match, then it will return the first category matching slug, if $full_match, * is set to false. If it does not, then it will return null. * * It is also possible that it will return a WP_Error object on failure. Check * for it when using this function. * * @since 2.1.0 * * @param string $category_path URL containing category slugs. * @param bool $full_match Optional. Whether full path should be matched. * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @return null|object|array Null on failure. Type is based on $output value. */function get_category_by_path( $category_path, $full_match = true, $output = OBJECT ) {	$category_path = rawurlencode( urldecode( $category_path ) );	$category_path = str_replace( '%2F', '/', $category_path );	$category_path = str_replace( '%20', ' ', $category_path );	$category_paths = '/' . trim( $category_path, '/' );	$leaf_path  = sanitize_title( basename( $category_paths ) );	$category_paths = explode( '/', $category_paths );	$full_path = '';	foreach ( (array) $category_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title( $pathdir );	$categories = get_terms( 'category', array('get' => 'all', 'slug' => $leaf_path) );	if ( empty( $categories ) )		return null;	foreach ( $categories as $category ) {		$path = '/' . $leaf_path;		$curcategory = $category;		while ( ( $curcategory->parent != 0 ) && ( $curcategory->parent != $curcategory->term_id ) ) {			$curcategory = get_term( $curcategory->parent, 'category' );			if ( is_wp_error( $curcategory ) )				return $curcategory;			$path = '/' . $curcategory->slug . $path;		}		if ( $path == $full_path )			return get_category( $category->term_id, $output );	}	// If full matching is not required, return the first cat that matches the leaf.	if ( ! $full_match )		return get_category( $categories[0]->term_id, $output );	return null;}/** * Retrieve category object by category slug. * * @since 2.3.0 * * @param string $slug The category slug. * @return object Category data object */function get_category_by_slug( $slug  ) {	$category = get_term_by( 'slug', $slug, 'category' );	if ( $category )		_make_cat_compat( $category );	return $category;}/** * Retrieve the ID of a category from its name. * * @since 1.0.0 * * @param string $cat_name Optional. Default is 'General' and can be any category name. * @return int 0, if failure and ID of category on success. */function get_cat_ID( $cat_name='General' ) {	$cat = get_term_by( 'name', $cat_name, 'category' );	if ( $cat )		return $cat->term_id;	return 0;}/** * Retrieve the name of a category from its ID. * * @since 1.0.0 * * @param int $cat_id Category ID * @return string Category name, or an empty string if category doesn't exist. */function get_cat_name( $cat_id ) {	$cat_id = (int) $cat_id;	$category = &get_category( $cat_id );	if ( ! $category || is_wp_error( $category ) )		return '';	return $category->name;}/** * Check if a category is an ancestor of another category. * * You can use either an id or the category object for both parameters. If you * use an integer the category will be retrieved. * * @since 2.1.0 * * @param int|object $cat1 ID or object to check if this is the parent category. * @param int|object $cat2 The child category. * @return bool Whether $cat2 is child of $cat1 */function cat_is_ancestor_of( $cat1, $cat2 ) {	if ( ! isset($cat1->term_id) )		$cat1 = &get_category( $cat1 );	if ( ! isset($cat2->parent) )		$cat2 = &get_category( $cat2 );	if ( empty($cat1->term_id) || empty($cat2->parent) )		return false;	if ( $cat2->parent == $cat1->term_id )		return true;	return cat_is_ancestor_of( $cat1, get_category( $cat2->parent ) );}/** * Sanitizes category data based on context. * * @since 2.3.0 * @uses sanitize_term() See this function for what context are supported. * * @param object|array $category Category data * @param string $context Optional. Default is 'display'. * @return object|array Same type as $category with sanitized data for safe use. */function sanitize_category( $category, $context = 'display' ) {	return sanitize_term( $category, 'category', $context );}/** * Sanitizes data in single category key field. * * @since 2.3.0 * @uses sanitize_term_field() See function for more details. * * @param string $field Category key to sanitize * @param mixed $value Category value to sanitize * @param int $cat_id Category ID * @param string $context What filter to use, 'raw', 'display', etc. * @return mixed Same type as $value after $value has been sanitized. */function sanitize_category_field( $field, $value, $cat_id, $context ) {	return sanitize_term_field( $field, $value, $cat_id, 'category', $context );}/* Tags *//** * Retrieves all post tags. * * @since 2.3.0 * @see get_terms() For list of arguments to pass. * @uses apply_filters() Calls 'get_tags' hook on array of tags and with $args. * * @param string|array $args Tag arguments to use when retrieving tags. * @return array List of tags. */function &get_tags( $args = '' ) {	$tags = get_terms( 'post_tag', $args );	if ( empty( $tags ) ) {		$return = array();		return $return;	}	$tags = apply_filters( 'get_tags', $tags, $args );	return $tags;}/** * Retrieve post tag by tag ID or tag object. * * If you pass the $tag parameter an object, which is assumed to be the tag row * object retrieved the database. It will cache the tag data. * * If you pass $tag an integer of the tag ID, then that tag will * be retrieved from the database, if it isn't already cached, and pass it back. * * If you look at get_term(), then both types will be passed through several * filters and finally sanitized based on the $filter parameter value. * * @since 2.3.0 * * @param int|object $tag * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional. Default is raw or no WordPress defined filter will applied. * @return object|array Return type based on $output value. */function &get_tag( $tag, $output = OBJECT, $filter = 'raw' ) {	return get_term( $tag, 'post_tag', $output, $filter );}/* Cache *//** * Update the categories cache. * * This function does not appear to be used anymore or does not appear to be * needed. It might be a legacy function left over from when there was a need * for updating the category cache. * * @since 1.5.0 * * @return bool Always return True */function update_category_cache() {	return true;}/** * Remove the category cache data based on ID. * * @since 2.1.0 * @uses clean_term_cache() Clears the cache for the category based on ID * * @param int $id Category ID */function clean_category_cache( $id ) {	clean_term_cache( $id, 'category' );}/** * Update category structure to old pre 2.3 from new taxonomy structure. * * This function was added for the taxonomy support to update the new category * structure with the old category one. This will maintain compatibility with * plugins and themes which depend on the old key or property names. * * The parameter should only be passed a variable and not create the array or * object inline to the parameter. The reason for this is that parameter is * passed by reference and PHP will fail unless it has the variable. * * There is no return value, because everything is updated on the variable you * pass to it. This is one of the features with using pass by reference in PHP. * * @since 2.3.0 * @access private * * @param array|object $category Category Row object or array */function _make_cat_compat( &$category ) {	if ( is_object( $category ) ) {		$category->cat_ID = &$category->term_id;		$category->category_count = &$category->count;		$category->category_description = &$category->description;		$category->cat_name = &$category->name;		$category->category_nicename = &$category->slug;		$category->category_parent = &$category->parent;	} elseif ( is_array( $category ) && isset( $category['term_id'] ) ) {		$category['cat_ID'] = &$category['term_id'];		$category['category_count'] = &$category['count'];		$category['category_description'] = &$category['description'];		$category['cat_name'] = &$category['name'];		$category['category_nicename'] = &$category['slug'];		$category['category_parent'] = &$category['parent'];	}}?>
<?php/** * Redirects to the RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss2_url' ), 301 );?>
<?php/** * WordPress CRON API * * @package WordPress *//** * Schedules a hook to run only once. * * Schedules a hook which will be executed once by the WordPress actions core at * a time which you specify. The action will fire off when someone visits your * WordPress site, if the schedule time has passed. * * @since 2.1.0 * @link http://codex.wordpress.org/Function_Reference/wp_schedule_single_event * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. */function wp_schedule_single_event( $timestamp, $hook, $args = array()) {	// don't schedule a duplicate if there's already an identical event due in the next 10 minutes	$next = wp_next_scheduled($hook, $args);	if ( $next && $next <= $timestamp + 600 )		return;	$crons = _get_cron_array();	$key = md5(serialize($args));	$crons[$timestamp][$hook][$key] = array( 'schedule' => false, 'args' => $args );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Schedule a periodic event. * * Schedules a hook which will be executed by the WordPress actions core on a * specific interval, specified by you. The action will trigger when someone * visits your WordPress site, if the scheduled time has passed. * * Valid values for the recurrence are hourly, daily and twicedaily.  These can * be extended using the cron_schedules filter in wp_get_schedules(). * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure, null when complete with scheduling event. */function wp_schedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	if ( !isset( $schedules[$recurrence] ) )		return false;	$crons[$timestamp][$hook][$key] = array( 'schedule' => $recurrence, 'args' => $args, 'interval' => $schedules[$recurrence]['interval'] );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Reschedule a recurring event. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure. Null when event is rescheduled. */function wp_reschedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	$interval = 0;	// First we try to get it from the schedule	if ( 0 == $interval )		$interval = $schedules[$recurrence]['interval'];	// Now we try to get it from the saved interval in case the schedule disappears	if ( 0 == $interval )		$interval = $crons[$timestamp][$hook][$key]['interval'];	// Now we assume something is wrong and fail to schedule	if ( 0 == $interval )		return false;	$now = time();    if ( $timestamp >= $now )        $timestamp = $now + $interval;    else        $timestamp = $now + ($interval - (($now - $timestamp) % $interval));	wp_schedule_event( $timestamp, $recurrence, $hook, $args );}/** * Unschedule a previously scheduled cron job. * * The $timestamp and $hook parameters are required, so that the event can be * identified. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Arguments to pass to the hook's callback function. * Although not passed to a callback function, these arguments are used * to uniquely identify the scheduled event, so they should be the same * as those used when originally scheduling the event. */function wp_unschedule_event( $timestamp, $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	unset( $crons[$timestamp][$hook][$key] );	if ( empty($crons[$timestamp][$hook]) )		unset( $crons[$timestamp][$hook] );	if ( empty($crons[$timestamp]) )		unset( $crons[$timestamp] );	_set_cron_array( $crons );}/** * Unschedule all cron jobs attached to a specific hook. * * @since 2.1.0 * * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Optional. Arguments that were to be pass to the hook's callback function. */function wp_clear_scheduled_hook( $hook, $args = array() ) {	// Backward compatibility	// Previously this function took the arguments as discrete vars rather than an array like the rest of the API	if ( !is_array($args) ) {		_deprecated_argument( __FUNCTION__, '3.0.0', __('This argument has changed to an array to match the behavior of the other cron functions.') );		$args = array_slice( func_get_args(), 1 );	}	while ( $timestamp = wp_next_scheduled( $hook, $args ) )		wp_unschedule_event( $timestamp, $hook, $args );}/** * Retrieve the next timestamp for a cron event. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|int The UNIX timestamp of the next time the scheduled event will occur. */function wp_next_scheduled( $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $timestamp;	}	return false;}/** * Send request to run cron through HTTP request that doesn't halt page loading. * * @since 2.1.0 * * @return null Cron could not be spawned, because it is not needed to run. */function spawn_cron( $local_time = 0 ) {	if ( !$local_time )		$local_time = time();	if ( defined('DOING_CRON') || isset($_GET['doing_wp_cron']) )		return;	/*	 * do not even start the cron if local server timer has drifted	 * such as due to power failure, or misconfiguration	 */	$timer_accurate = check_server_timer( $local_time );	if ( !$timer_accurate )		return;	/*	* multiple processes on multiple web servers can run this code concurrently	* try to make this as atomic as possible by setting doing_cron switch	*/	$flag = get_transient('doing_cron');	if ( $flag > $local_time + 10*60 )		$flag = 0;	// don't run if another process is currently running it or more than once every 60 sec.	if ( $flag + 60 > $local_time )		return;	//sanity check	$crons = _get_cron_array();	if ( !is_array($crons) )		return;	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	if ( defined('ALTERNATE_WP_CRON') && ALTERNATE_WP_CRON ) {		if ( !empty($_POST) || defined('DOING_AJAX') )			return;		set_transient( 'doing_cron', $local_time );		ob_start();		wp_redirect( add_query_arg('doing_wp_cron', '', stripslashes($_SERVER['REQUEST_URI'])) );		echo ' ';		// flush any buffers and send the headers		while ( @ob_end_flush() );		flush();		WP_DEBUG ? include_once( ABSPATH . 'wp-cron.php' ) : @include_once( ABSPATH . 'wp-cron.php' );		return;	}	set_transient( 'doing_cron', $local_time );	$cron_url = get_option( 'siteurl' ) . '/wp-cron.php?doing_wp_cron';	wp_remote_post( $cron_url, array('timeout' => 0.01, 'blocking' => false, 'sslverify' => apply_filters('https_local_ssl_verify', true)) );}/** * Run scheduled callbacks or spawn cron for all scheduled events. * * @since 2.1.0 * * @return null When doesn't need to run Cron. */function wp_cron() {	// Prevent infinite loops caused by lack of wp-cron.php	if ( strpos($_SERVER['REQUEST_URI'], '/wp-cron.php') !== false || ( defined('DISABLE_WP_CRON') && DISABLE_WP_CRON ) )		return;	if ( false === $crons = _get_cron_array() )		return;	$local_time = time();	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	$schedules = wp_get_schedules();	foreach ( $crons as $timestamp => $cronhooks ) {		if ( $timestamp > $local_time ) break;		foreach ( (array) $cronhooks as $hook => $args ) {			if ( isset($schedules[$hook]['callback']) && !call_user_func( $schedules[$hook]['callback'] ) )				continue;			spawn_cron( $local_time );			break 2;		}	}}/** * Retrieve supported and filtered Cron recurrences. * * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by * hooking into the 'cron_schedules' filter. The filter accepts an array of * arrays. The outer array has a key that is the name of the schedule or for * example 'weekly'. The value is an array with two keys, one is 'interval' and * the other is 'display'. * * The 'interval' is a number in seconds of when the cron job should run. So for * 'hourly', the time is 3600 or 60*60. For weekly, the value would be * 60*60*24*7 or 604800. The value of 'interval' would then be 604800. * * The 'display' is the description. For the 'weekly' key, the 'display' would * be <code>__('Once Weekly')</code>. * * For your plugin, you will be passed an array. you can easily add your * schedule by doing the following. * <code> * // filter parameter variable name is 'array' *	$array['weekly'] = array( *		'interval' => 604800, *		'display' => __('Once Weekly') *	); * </code> * * @since 2.1.0 * * @return array */function wp_get_schedules() {	$schedules = array(		'hourly' => array( 'interval' => 3600, 'display' => __('Once Hourly') ),		'twicedaily' => array( 'interval' => 43200, 'display' => __('Twice Daily') ),		'daily' => array( 'interval' => 86400, 'display' => __('Once Daily') ),	);	return array_merge( apply_filters( 'cron_schedules', array() ), $schedules );}/** * Retrieve Cron schedule for hook with arguments. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return string|bool False, if no schedule. Schedule on success. */function wp_get_schedule($hook, $args = array()) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $cron[$hook][$key]['schedule'];	}	return false;}//// Private functions///** * Retrieve cron info array option. * * @since 2.1.0 * @access private * * @return array CRON info array. */function _get_cron_array()  {	$cron = get_option('cron');	if ( ! is_array($cron) )		return false;	if ( !isset($cron['version']) )		$cron = _upgrade_cron_array($cron);	unset($cron['version']);	return $cron;}/** * Updates the CRON option with the new CRON array. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. */function _set_cron_array($cron) {	$cron['version'] = 2;	update_option( 'cron', $cron );}/** * Upgrade a Cron info array. * * This function upgrades the Cron info array to version 2. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. * @return array An upgraded Cron info array. */function _upgrade_cron_array($cron) {	if ( isset($cron['version']) && 2 == $cron['version'])		return $cron;	$new_cron = array();	foreach ( (array) $cron as $timestamp => $hooks) {		foreach ( (array) $hooks as $hook => $args ) {			$key = md5(serialize($args['args']));			$new_cron[$timestamp][$hook][$key] = $args;		}	}	$new_cron['version'] = 2;	update_option( 'cron', $new_cron );	return $new_cron;}// stub for checking server timer accuracy, using outside standard time sourcesfunction check_server_timer( $local_time ) {	return true;}
<?php/** * The template for displaying Author Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know who	 * the author is when we try to get their name,	 * URL, description, avatar, etc.	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>				<h1 class="page-title author"><?php printf( __( 'Author Archives: %s', 'twentyten' ), "<span class='vcard'><a class='url fn n' href='" . get_author_posts_url( get_the_author_meta( 'ID' ) ) . "' title='" . esc_attr( get_the_author() ) . "' rel='me'>" . get_the_author() . "</a></span>" ); ?></h1><?php// If a user has filled out their description, show a bio on their entries.if ( get_the_author_meta( 'description' ) ) : ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( __( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>						</div><!-- #author-description	-->					</div><!-- #entry-author-info --><?php endif; ?><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the author archive page to output the authors posts	 * If you want to overload this in a child theme then include a file	 * called loop-author.php and that will be used instead.	 */	 get_template_part( 'loop', 'author' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * This holds the version number in a separate file so we can bump it without cluttering the SVN *//** * The WordPress version string * * @global string $wp_version */$wp_version = '3.0';/** * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema. * * @global int $wp_db_version */$wp_db_version = 15260;/** * Holds the TinyMCE version * * @global string $tinymce_version */$tinymce_version = '327-1235';/** * Holds the cache manifest version * * @global string $manifest_version */$manifest_version = '20100530';/** * Holds the required PHP version * * @global string $required_php_version */$required_php_version = '4.3';/** * Holds the required MySQL version * * @global string $required_mysql_version */$required_mysql_version = '4.1.2';
<?php/** * WordPress Comment Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * @uses $wpdb * * @param string $comment_author * @param string $comment_date * @return mixed Comment ID on success. */function comment_exists($comment_author, $comment_date) {	global $wpdb;	$comment_author = stripslashes($comment_author);	$comment_date = stripslashes($comment_date);	return $wpdb->get_var( $wpdb->prepare("SELECT comment_post_ID FROM $wpdb->comments			WHERE comment_author = %s AND comment_date = %s", $comment_author, $comment_date) );}/** * {@internal Missing Short Description}} * * @since unknown */function edit_comment() {	$comment_post_ID = (int) $_POST['comment_post_ID'];	if (!current_user_can( 'edit_post', $comment_post_ID ))		wp_die( __('You are not allowed to edit comments on this post, so you cannot edit this comment.' ));	$_POST['comment_author'] = $_POST['newcomment_author'];	$_POST['comment_author_email'] = $_POST['newcomment_author_email'];	$_POST['comment_author_url'] = $_POST['newcomment_author_url'];	$_POST['comment_approved'] = $_POST['comment_status'];	$_POST['comment_content'] = $_POST['content'];	$_POST['comment_ID'] = (int) $_POST['comment_ID'];	foreach ( array ('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $_POST['hidden_' . $timeunit] ) && $_POST['hidden_' . $timeunit] != $_POST[$timeunit] ) {			$_POST['edit_date'] = '1';			break;		}	}	if (!empty ( $_POST['edit_date'] ) ) {		$aa = $_POST['aa'];		$mm = $_POST['mm'];		$jj = $_POST['jj'];		$hh = $_POST['hh'];		$mn = $_POST['mn'];		$ss = $_POST['ss'];		$jj = ($jj > 31 ) ? 31 : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$_POST['comment_date'] = "$aa-$mm-$jj $hh:$mn:$ss";	}	wp_update_comment( $_POST);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_comment_to_edit( $id ) {	if ( !$comment = get_comment($id) )		return false;	$comment->comment_ID = (int) $comment->comment_ID;	$comment->comment_post_ID = (int) $comment->comment_post_ID;	$comment->comment_content = format_to_edit( $comment->comment_content );	$comment->comment_content = apply_filters( 'comment_edit_pre', $comment->comment_content);	$comment->comment_author = format_to_edit( $comment->comment_author );	$comment->comment_author_email = format_to_edit( $comment->comment_author_email );	$comment->comment_author_url = format_to_edit( $comment->comment_author_url );	$comment->comment_author_url = esc_url($comment->comment_author_url);	return $comment;}/** * Get the number of pending comments on a post or posts * * @since unknown * @uses $wpdb * * @param int|array $post_id Either a single Post ID or an array of Post IDs * @return int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs */function get_pending_comments_num( $post_id ) {	global $wpdb;	$single = false;	if ( !is_array($post_id) ) {		$post_id_array = (array) $post_id;		$single = true;	} else {		$post_id_array = $post_id;	}	$post_id_array = array_map('intval', $post_id_array);	$post_id_in = "'" . implode("', '", $post_id_array) . "'";	$pending = $wpdb->get_results( "SELECT comment_post_ID, COUNT(comment_ID) as num_comments FROM $wpdb->comments WHERE comment_post_ID IN ( $post_id_in ) AND comment_approved = '0' GROUP BY comment_post_ID", ARRAY_A );	if ( $single ) {		if ( empty($pending) )			return 0;		else			return absint($pending[0]['num_comments']);	}	$pending_keyed = array();	// Default to zero pending for all posts in request	foreach ( $post_id_array as $id )		$pending_keyed[$id] = 0;	if ( !empty($pending) )		foreach ( $pending as $pend )			$pending_keyed[$pend['comment_post_ID']] = absint($pend['num_comments']);	return $pending_keyed;}/** * Add avatars to relevant places in admin, or try to. * * @since 2.5.0 * @uses $comment * * @param string $name User name. * @return string Avatar with Admin name. */function floated_admin_avatar( $name ) {	global $comment;	$avatar = get_avatar( $comment, 32 );	return "$avatar $name";}function enqueue_comment_hotkeys_js() {	if ( 'true' == get_user_option( 'comment_shortcuts' ) )		wp_enqueue_script( 'jquery-table-hotkeys' );}if ( is_admin() && isset($pagenow) && ('edit-comments.php' == $pagenow || 'edit.php' == $pagenow) ) {	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );}?>
<?php/** * General API for generating and formatting diffs - the differences between * two sequences of strings. * * The original PHP version of this code was written by Geoffrey T. Dairiki * <dairiki@dairiki.org>, and is used/adapted with his permission. * * Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org> * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_Diff {    /**     * Array of changes.     *     * @var array     */    var $_edits;    /**     * Computes diffs between sequences of strings.     *     * @param string $engine     Name of the diffing engine to use.  'auto'     *                           will automatically select the best.     * @param array $params      Parameters to pass to the diffing engine.     *                           Normally an array of two arrays, each     *                           containing the lines from a file.     */    function Text_Diff($engine, $params)    {        // Backward compatibility workaround.        if (!is_string($engine)) {            $params = array($engine, $params);            $engine = 'auto';        }        if ($engine == 'auto') {            $engine = extension_loaded('xdiff') ? 'xdiff' : 'native';        } else {            $engine = basename($engine);        }        // WP #7391        require_once dirname(__FILE__).'/Diff/Engine/' . $engine . '.php';        $class = 'Text_Diff_Engine_' . $engine;        $diff_engine = new $class();        $this->_edits = call_user_func_array(array($diff_engine, 'diff'), $params);    }    /**     * Returns the array of differences.     */    function getDiff()    {        return $this->_edits;    }    /**     * returns the number of new (added) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of new lines     */    function countAddedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_add') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->nfinal();            }        }        return $count;    }    /**     * Returns the number of deleted (removed) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of deleted lines     */    function countDeletedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_delete') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->norig();            }        }        return $count;    }    /**     * Computes a reversed diff.     *     * Example:     * <code>     * $diff = new Text_Diff($lines1, $lines2);     * $rev = $diff->reverse();     * </code>     *     * @return Text_Diff  A Diff object representing the inverse of the     *                    original diff.  Note that we purposely don't return a     *                    reference here, since this essentially is a clone()     *                    method.     */    function reverse()    {        if (version_compare(zend_version(), '2', '>')) {            $rev = clone($this);        } else {            $rev = $this;        }        $rev->_edits = array();        foreach ($this->_edits as $edit) {            $rev->_edits[] = $edit->reverse();        }        return $rev;    }    /**     * Checks for an empty diff.     *     * @return boolean  True if two sequences were identical.     */    function isEmpty()    {        foreach ($this->_edits as $edit) {            if (!is_a($edit, 'Text_Diff_Op_copy')) {                return false;            }        }        return true;    }    /**     * Computes the length of the Longest Common Subsequence (LCS).     *     * This is mostly for diagnostic purposes.     *     * @return integer  The length of the LCS.     */    function lcs()    {        $lcs = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_copy')) {                $lcs += count($edit->orig);            }        }        return $lcs;    }    /**     * Gets the original set of lines.     *     * This reconstructs the $from_lines parameter passed to the constructor.     *     * @return array  The original sequence of strings.     */    function getOriginal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->orig) {                array_splice($lines, count($lines), 0, $edit->orig);            }        }        return $lines;    }    /**     * Gets the final set of lines.     *     * This reconstructs the $to_lines parameter passed to the constructor.     *     * @return array  The sequence of strings.     */    function getFinal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->final) {                array_splice($lines, count($lines), 0, $edit->final);            }        }        return $lines;    }    /**     * Removes trailing newlines from a line of text. This is meant to be used     * with array_walk().     *     * @param string $line  The line to trim.     * @param integer $key  The index of the line in the array. Not used.     */    function trimNewlines(&$line, $key)    {        $line = str_replace(array("\n", "\r"), '', $line);    }    /**     * Determines the location of the system temporary directory.     *     * @static     *     * @access protected     *     * @return string  A directory name which can be used for temp files.     *                 Returns false if one could not be found.     */    function _getTempDir()    {        $tmp_locations = array('/tmp', '/var/tmp', 'c:\WUTemp', 'c:\temp',                               'c:\windows\temp', 'c:\winnt\temp');        /* Try PHP's upload_tmp_dir directive. */        $tmp = ini_get('upload_tmp_dir');        /* Otherwise, try to determine the TMPDIR environment variable. */        if (!strlen($tmp)) {            $tmp = getenv('TMPDIR');        }        /* If we still cannot determine a value, then cycle through a list of         * preset possibilities. */        while (!strlen($tmp) && count($tmp_locations)) {            $tmp_check = array_shift($tmp_locations);            if (@is_dir($tmp_check)) {                $tmp = $tmp_check;            }        }        /* If it is still empty, we have failed, so return false; otherwise         * return the directory determined. */        return strlen($tmp) ? $tmp : false;    }    /**     * Checks a diff for validity.     *     * This is here only for debugging purposes.     */    function _check($from_lines, $to_lines)    {        if (serialize($from_lines) != serialize($this->getOriginal())) {            trigger_error("Reconstructed original doesn't match", E_USER_ERROR);        }        if (serialize($to_lines) != serialize($this->getFinal())) {            trigger_error("Reconstructed final doesn't match", E_USER_ERROR);        }        $rev = $this->reverse();        if (serialize($to_lines) != serialize($rev->getOriginal())) {            trigger_error("Reversed original doesn't match", E_USER_ERROR);        }        if (serialize($from_lines) != serialize($rev->getFinal())) {            trigger_error("Reversed final doesn't match", E_USER_ERROR);        }        $prevtype = null;        foreach ($this->_edits as $edit) {            if ($prevtype == get_class($edit)) {                trigger_error("Edit sequence is non-optimal", E_USER_ERROR);            }            $prevtype = get_class($edit);        }        return true;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_MappedDiff extends Text_Diff {    /**     * Computes a diff between sequences of strings.     *     * This can be used to compute things like case-insensitve diffs, or diffs     * which ignore changes in white-space.     *     * @param array $from_lines         An array of strings.     * @param array $to_lines           An array of strings.     * @param array $mapped_from_lines  This array should have the same size     *                                  number of elements as $from_lines.  The     *                                  elements in $mapped_from_lines and     *                                  $mapped_to_lines are what is actually     *                                  compared when computing the diff.     * @param array $mapped_to_lines    This array should have the same number     *                                  of elements as $to_lines.     */    function Text_MappedDiff($from_lines, $to_lines,                             $mapped_from_lines, $mapped_to_lines)    {        assert(count($from_lines) == count($mapped_from_lines));        assert(count($to_lines) == count($mapped_to_lines));        parent::Text_Diff($mapped_from_lines, $mapped_to_lines);        $xi = $yi = 0;        for ($i = 0; $i < count($this->_edits); $i++) {            $orig = &$this->_edits[$i]->orig;            if (is_array($orig)) {                $orig = array_slice($from_lines, $xi, count($orig));                $xi += count($orig);            }            $final = &$this->_edits[$i]->final;            if (is_array($final)) {                $final = array_slice($to_lines, $yi, count($final));                $yi += count($final);            }        }    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op {    var $orig;    var $final;    function &reverse()    {        trigger_error('Abstract method', E_USER_ERROR);    }    function norig()    {        return $this->orig ? count($this->orig) : 0;    }    function nfinal()    {        return $this->final ? count($this->final) : 0;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_copy extends Text_Diff_Op {    function Text_Diff_Op_copy($orig, $final = false)    {        if (!is_array($final)) {            $final = $orig;        }        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_copy($this->final, $this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_delete extends Text_Diff_Op {    function Text_Diff_Op_delete($lines)    {        $this->orig = $lines;        $this->final = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_add($this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_add extends Text_Diff_Op {    function Text_Diff_Op_add($lines)    {        $this->final = $lines;        $this->orig = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_delete($this->final);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_change extends Text_Diff_Op {    function Text_Diff_Op_change($orig, $final)    {        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_change($this->final, $this->orig);        return $reverse;    }}
<?php/* Continent and city translations for timezone selection. * This file is not included anywhere. It exists solely for use by xgettext. */__('Africa', 'continents-cities');__('Abidjan', 'continents-cities');__('Accra', 'continents-cities');__('Addis Ababa', 'continents-cities');__('Algiers', 'continents-cities');__('Asmara', 'continents-cities');__('Asmera', 'continents-cities');__('Bamako', 'continents-cities');__('Bangui', 'continents-cities');__('Banjul', 'continents-cities');__('Bissau', 'continents-cities');__('Blantyre', 'continents-cities');__('Brazzaville', 'continents-cities');__('Bujumbura', 'continents-cities');__('Cairo', 'continents-cities');__('Casablanca', 'continents-cities');__('Ceuta', 'continents-cities');__('Conakry', 'continents-cities');__('Dakar', 'continents-cities');__('Dar es Salaam', 'continents-cities');__('Djibouti', 'continents-cities');__('Douala', 'continents-cities');__('El Aaiun', 'continents-cities');__('Freetown', 'continents-cities');__('Gaborone', 'continents-cities');__('Harare', 'continents-cities');__('Johannesburg', 'continents-cities');__('Kampala', 'continents-cities');__('Khartoum', 'continents-cities');__('Kigali', 'continents-cities');__('Kinshasa', 'continents-cities');__('Lagos', 'continents-cities');__('Libreville', 'continents-cities');__('Lome', 'continents-cities');__('Luanda', 'continents-cities');__('Lubumbashi', 'continents-cities');__('Lusaka', 'continents-cities');__('Malabo', 'continents-cities');__('Maputo', 'continents-cities');__('Maseru', 'continents-cities');__('Mbabane', 'continents-cities');__('Mogadishu', 'continents-cities');__('Monrovia', 'continents-cities');__('Nairobi', 'continents-cities');__('Ndjamena', 'continents-cities');__('Niamey', 'continents-cities');__('Nouakchott', 'continents-cities');__('Ouagadougou', 'continents-cities');__('Porto-Novo', 'continents-cities');__('Sao Tome', 'continents-cities');__('Timbuktu', 'continents-cities');__('Tripoli', 'continents-cities');__('Tunis', 'continents-cities');__('Windhoek', 'continents-cities');__('America', 'continents-cities');__('Adak', 'continents-cities');__('Anchorage', 'continents-cities');__('Anguilla', 'continents-cities');__('Antigua', 'continents-cities');__('Araguaina', 'continents-cities');__('Argentina', 'continents-cities');__('Buenos Aires', 'continents-cities');__('Catamarca', 'continents-cities');__('ComodRivadavia', 'continents-cities');__('Cordoba', 'continents-cities');__('Jujuy', 'continents-cities');__('La Rioja', 'continents-cities');__('Mendoza', 'continents-cities');__('Rio Gallegos', 'continents-cities');__('San Juan', 'continents-cities');__('San Luis', 'continents-cities');__('Tucuman', 'continents-cities');__('Ushuaia', 'continents-cities');__('Aruba', 'continents-cities');__('Asuncion', 'continents-cities');__('Atikokan', 'continents-cities');__('Atka', 'continents-cities');__('Bahia', 'continents-cities');__('Barbados', 'continents-cities');__('Belem', 'continents-cities');__('Belize', 'continents-cities');__('Blanc-Sablon', 'continents-cities');__('Boa Vista', 'continents-cities');__('Bogota', 'continents-cities');__('Boise', 'continents-cities');__('Cambridge Bay', 'continents-cities');__('Campo Grande', 'continents-cities');__('Cancun', 'continents-cities');__('Caracas', 'continents-cities');__('Cayenne', 'continents-cities');__('Cayman', 'continents-cities');__('Chicago', 'continents-cities');__('Chihuahua', 'continents-cities');__('Coral Harbour', 'continents-cities');__('Costa Rica', 'continents-cities');__('Cuiaba', 'continents-cities');__('Curacao', 'continents-cities');__('Danmarkshavn', 'continents-cities');__('Dawson', 'continents-cities');__('Dawson Creek', 'continents-cities');__('Denver', 'continents-cities');__('Detroit', 'continents-cities');__('Dominica', 'continents-cities');__('Edmonton', 'continents-cities');__('Eirunepe', 'continents-cities');__('El Salvador', 'continents-cities');__('Ensenada', 'continents-cities');__('Fort Wayne', 'continents-cities');__('Fortaleza', 'continents-cities');__('Glace Bay', 'continents-cities');__('Godthab', 'continents-cities');__('Goose Bay', 'continents-cities');__('Grand Turk', 'continents-cities');__('Grenada', 'continents-cities');__('Guadeloupe', 'continents-cities');__('Guatemala', 'continents-cities');__('Guayaquil', 'continents-cities');__('Guyana', 'continents-cities');__('Halifax', 'continents-cities');__('Havana', 'continents-cities');__('Hermosillo', 'continents-cities');__('Indiana', 'continents-cities');__('Indianapolis', 'continents-cities');__('Knox', 'continents-cities');__('Marengo', 'continents-cities');__('Petersburg', 'continents-cities');__('Tell City', 'continents-cities');__('Vevay', 'continents-cities');__('Vincennes', 'continents-cities');__('Winamac', 'continents-cities');__('Inuvik', 'continents-cities');__('Iqaluit', 'continents-cities');__('Jamaica', 'continents-cities');__('Juneau', 'continents-cities');__('Kentucky', 'continents-cities');__('Louisville', 'continents-cities');__('Monticello', 'continents-cities');__('Knox IN', 'continents-cities');__('La Paz', 'continents-cities');__('Lima', 'continents-cities');__('Los Angeles', 'continents-cities');__('Maceio', 'continents-cities');__('Managua', 'continents-cities');__('Manaus', 'continents-cities');__('Marigot', 'continents-cities');__('Martinique', 'continents-cities');__('Mazatlan', 'continents-cities');__('Menominee', 'continents-cities');__('Merida', 'continents-cities');__('Mexico City', 'continents-cities');__('Miquelon', 'continents-cities');__('Moncton', 'continents-cities');__('Monterrey', 'continents-cities');__('Montevideo', 'continents-cities');__('Montreal', 'continents-cities');__('Montserrat', 'continents-cities');__('Nassau', 'continents-cities');__('New York', 'continents-cities');__('Nipigon', 'continents-cities');__('Nome', 'continents-cities');__('Noronha', 'continents-cities');__('North Dakota', 'continents-cities');__('Center', 'continents-cities');__('New Salem', 'continents-cities');__('Panama', 'continents-cities');__('Pangnirtung', 'continents-cities');__('Paramaribo', 'continents-cities');__('Phoenix', 'continents-cities');__('Port-au-Prince', 'continents-cities');__('Port of Spain', 'continents-cities');__('Porto Acre', 'continents-cities');__('Porto Velho', 'continents-cities');__('Puerto Rico', 'continents-cities');__('Rainy River', 'continents-cities');__('Rankin Inlet', 'continents-cities');__('Recife', 'continents-cities');__('Regina', 'continents-cities');__('Resolute', 'continents-cities');__('Rio Branco', 'continents-cities');__('Rosario', 'continents-cities');__('Santiago', 'continents-cities');__('Santo Domingo', 'continents-cities');__('Sao Paulo', 'continents-cities');__('Scoresbysund', 'continents-cities');__('Shiprock', 'continents-cities');__('St Barthelemy', 'continents-cities');__('St Johns', 'continents-cities');__('St Kitts', 'continents-cities');__('St Lucia', 'continents-cities');__('St Thomas', 'continents-cities');__('St Vincent', 'continents-cities');__('Swift Current', 'continents-cities');__('Tegucigalpa', 'continents-cities');__('Thule', 'continents-cities');__('Thunder Bay', 'continents-cities');__('Tijuana', 'continents-cities');__('Toronto', 'continents-cities');__('Tortola', 'continents-cities');__('Vancouver', 'continents-cities');__('Virgin', 'continents-cities');__('Whitehorse', 'continents-cities');__('Winnipeg', 'continents-cities');__('Yakutat', 'continents-cities');__('Yellowknife', 'continents-cities');__('Antarctica', 'continents-cities');__('Casey', 'continents-cities');__('Davis', 'continents-cities');__('DumontDUrville', 'continents-cities');__('Mawson', 'continents-cities');__('McMurdo', 'continents-cities');__('Palmer', 'continents-cities');__('Rothera', 'continents-cities');__('South Pole', 'continents-cities');__('Syowa', 'continents-cities');__('Vostok', 'continents-cities');__('Arctic', 'continents-cities');__('Longyearbyen', 'continents-cities');__('Asia', 'continents-cities');__('Aden', 'continents-cities');__('Almaty', 'continents-cities');__('Amman', 'continents-cities');__('Anadyr', 'continents-cities');__('Aqtau', 'continents-cities');__('Aqtobe', 'continents-cities');__('Ashgabat', 'continents-cities');__('Ashkhabad', 'continents-cities');__('Baghdad', 'continents-cities');__('Bahrain', 'continents-cities');__('Baku', 'continents-cities');__('Bangkok', 'continents-cities');__('Beirut', 'continents-cities');__('Bishkek', 'continents-cities');__('Brunei', 'continents-cities');__('Calcutta', 'continents-cities');__('Choibalsan', 'continents-cities');__('Chongqing', 'continents-cities');__('Chungking', 'continents-cities');__('Colombo', 'continents-cities');__('Dacca', 'continents-cities');__('Damascus', 'continents-cities');__('Dhaka', 'continents-cities');__('Dili', 'continents-cities');__('Dubai', 'continents-cities');__('Dushanbe', 'continents-cities');__('Gaza', 'continents-cities');__('Harbin', 'continents-cities');__('Ho Chi Minh', 'continents-cities');__('Hong Kong', 'continents-cities');__('Hovd', 'continents-cities');__('Irkutsk', 'continents-cities');__('Istanbul', 'continents-cities');__('Jakarta', 'continents-cities');__('Jayapura', 'continents-cities');__('Jerusalem', 'continents-cities');__('Kabul', 'continents-cities');__('Kamchatka', 'continents-cities');__('Karachi', 'continents-cities');__('Kashgar', 'continents-cities');__('Katmandu', 'continents-cities');__('Kolkata', 'continents-cities');__('Krasnoyarsk', 'continents-cities');__('Kuala Lumpur', 'continents-cities');__('Kuching', 'continents-cities');__('Kuwait', 'continents-cities');__('Macao', 'continents-cities');__('Macau', 'continents-cities');__('Magadan', 'continents-cities');__('Makassar', 'continents-cities');__('Manila', 'continents-cities');__('Muscat', 'continents-cities');__('Nicosia', 'continents-cities');__('Novosibirsk', 'continents-cities');__('Omsk', 'continents-cities');__('Oral', 'continents-cities');__('Phnom Penh', 'continents-cities');__('Pontianak', 'continents-cities');__('Pyongyang', 'continents-cities');__('Qatar', 'continents-cities');__('Qyzylorda', 'continents-cities');__('Rangoon', 'continents-cities');__('Riyadh', 'continents-cities');__('Saigon', 'continents-cities');__('Sakhalin', 'continents-cities');__('Samarkand', 'continents-cities');__('Seoul', 'continents-cities');__('Shanghai', 'continents-cities');__('Singapore', 'continents-cities');__('Taipei', 'continents-cities');__('Tashkent', 'continents-cities');__('Tbilisi', 'continents-cities');__('Tehran', 'continents-cities');__('Tel Aviv', 'continents-cities');__('Thimbu', 'continents-cities');__('Thimphu', 'continents-cities');__('Tokyo', 'continents-cities');__('Ujung Pandang', 'continents-cities');__('Ulaanbaatar', 'continents-cities');__('Ulan Bator', 'continents-cities');__('Urumqi', 'continents-cities');__('Vientiane', 'continents-cities');__('Vladivostok', 'continents-cities');__('Yakutsk', 'continents-cities');__('Yekaterinburg', 'continents-cities');__('Yerevan', 'continents-cities');__('Atlantic', 'continents-cities');__('Azores', 'continents-cities');__('Bermuda', 'continents-cities');__('Canary', 'continents-cities');__('Cape Verde', 'continents-cities');__('Faeroe', 'continents-cities');__('Faroe', 'continents-cities');__('Jan Mayen', 'continents-cities');__('Madeira', 'continents-cities');__('Reykjavik', 'continents-cities');__('South Georgia', 'continents-cities');__('St Helena', 'continents-cities');__('Stanley', 'continents-cities');__('Australia', 'continents-cities');__('ACT', 'continents-cities');__('Adelaide', 'continents-cities');__('Brisbane', 'continents-cities');__('Broken Hill', 'continents-cities');__('Canberra', 'continents-cities');__('Currie', 'continents-cities');__('Darwin', 'continents-cities');__('Eucla', 'continents-cities');__('Hobart', 'continents-cities');__('LHI', 'continents-cities');__('Lindeman', 'continents-cities');__('Lord Howe', 'continents-cities');__('Melbourne', 'continents-cities');__('North', 'continents-cities');__('NSW', 'continents-cities');__('Perth', 'continents-cities');__('Queensland', 'continents-cities');__('South', 'continents-cities');__('Sydney', 'continents-cities');__('Tasmania', 'continents-cities');__('Victoria', 'continents-cities');__('West', 'continents-cities');__('Yancowinna', 'continents-cities');__('Etc', 'continents-cities');__('GMT', 'continents-cities');__('GMT+0', 'continents-cities');__('GMT+1', 'continents-cities');__('GMT+10', 'continents-cities');__('GMT+11', 'continents-cities');__('GMT+12', 'continents-cities');__('GMT+2', 'continents-cities');__('GMT+3', 'continents-cities');__('GMT+4', 'continents-cities');__('GMT+5', 'continents-cities');__('GMT+6', 'continents-cities');__('GMT+7', 'continents-cities');__('GMT+8', 'continents-cities');__('GMT+9', 'continents-cities');__('GMT-0', 'continents-cities');__('GMT-1', 'continents-cities');__('GMT-10', 'continents-cities');__('GMT-11', 'continents-cities');__('GMT-12', 'continents-cities');__('GMT-13', 'continents-cities');__('GMT-14', 'continents-cities');__('GMT-2', 'continents-cities');__('GMT-3', 'continents-cities');__('GMT-4', 'continents-cities');__('GMT-5', 'continents-cities');__('GMT-6', 'continents-cities');__('GMT-7', 'continents-cities');__('GMT-8', 'continents-cities');__('GMT-9', 'continents-cities');__('GMT0', 'continents-cities');__('Greenwich', 'continents-cities');__('UCT', 'continents-cities');__('Universal', 'continents-cities');__('UTC', 'continents-cities');__('Zulu', 'continents-cities');__('Europe', 'continents-cities');__('Amsterdam', 'continents-cities');__('Andorra', 'continents-cities');__('Athens', 'continents-cities');__('Belfast', 'continents-cities');__('Belgrade', 'continents-cities');__('Berlin', 'continents-cities');__('Bratislava', 'continents-cities');__('Brussels', 'continents-cities');__('Bucharest', 'continents-cities');__('Budapest', 'continents-cities');__('Chisinau', 'continents-cities');__('Copenhagen', 'continents-cities');__('Dublin', 'continents-cities');__('Gibraltar', 'continents-cities');__('Guernsey', 'continents-cities');__('Helsinki', 'continents-cities');__('Isle of Man', 'continents-cities');__('Jersey', 'continents-cities');__('Kaliningrad', 'continents-cities');__('Kiev', 'continents-cities');__('Lisbon', 'continents-cities');__('Ljubljana', 'continents-cities');__('London', 'continents-cities');__('Luxembourg', 'continents-cities');__('Madrid', 'continents-cities');__('Malta', 'continents-cities');__('Mariehamn', 'continents-cities');__('Minsk', 'continents-cities');__('Monaco', 'continents-cities');__('Moscow', 'continents-cities');__('Oslo', 'continents-cities');__('Paris', 'continents-cities');__('Podgorica', 'continents-cities');__('Prague', 'continents-cities');__('Riga', 'continents-cities');__('Rome', 'continents-cities');__('Samara', 'continents-cities');__('San Marino', 'continents-cities');__('Sarajevo', 'continents-cities');__('Simferopol', 'continents-cities');__('Skopje', 'continents-cities');__('Sofia', 'continents-cities');__('Stockholm', 'continents-cities');__('Tallinn', 'continents-cities');__('Tirane', 'continents-cities');__('Tiraspol', 'continents-cities');__('Uzhgorod', 'continents-cities');__('Vaduz', 'continents-cities');__('Vatican', 'continents-cities');__('Vienna', 'continents-cities');__('Vilnius', 'continents-cities');__('Volgograd', 'continents-cities');__('Warsaw', 'continents-cities');__('Zagreb', 'continents-cities');__('Zaporozhye', 'continents-cities');__('Zurich', 'continents-cities');__('Indian', 'continents-cities');__('Antananarivo', 'continents-cities');__('Chagos', 'continents-cities');__('Christmas', 'continents-cities');__('Cocos', 'continents-cities');__('Comoro', 'continents-cities');__('Kerguelen', 'continents-cities');__('Mahe', 'continents-cities');__('Maldives', 'continents-cities');__('Mauritius', 'continents-cities');__('Mayotte', 'continents-cities');__('Reunion', 'continents-cities');__('Pacific', 'continents-cities');__('Apia', 'continents-cities');__('Auckland', 'continents-cities');__('Chatham', 'continents-cities');__('Easter', 'continents-cities');__('Efate', 'continents-cities');__('Enderbury', 'continents-cities');__('Fakaofo', 'continents-cities');__('Fiji', 'continents-cities');__('Funafuti', 'continents-cities');__('Galapagos', 'continents-cities');__('Gambier', 'continents-cities');__('Guadalcanal', 'continents-cities');__('Guam', 'continents-cities');__('Honolulu', 'continents-cities');__('Johnston', 'continents-cities');__('Kiritimati', 'continents-cities');__('Kosrae', 'continents-cities');__('Kwajalein', 'continents-cities');__('Majuro', 'continents-cities');__('Marquesas', 'continents-cities');__('Midway', 'continents-cities');__('Nauru', 'continents-cities');__('Niue', 'continents-cities');__('Norfolk', 'continents-cities');__('Noumea', 'continents-cities');__('Pago Pago', 'continents-cities');__('Palau', 'continents-cities');__('Pitcairn', 'continents-cities');__('Ponape', 'continents-cities');__('Port Moresby', 'continents-cities');__('Rarotonga', 'continents-cities');__('Saipan', 'continents-cities');__('Samoa', 'continents-cities');__('Tahiti', 'continents-cities');__('Tarawa', 'continents-cities');__('Tongatapu', 'continents-cities');__('Truk', 'continents-cities');__('Wake', 'continents-cities');__('Wallis', 'continents-cities');__('Yap', 'continents-cities');
<?php/** * Parse OPML XML files and store in globals. * * @package WordPress * @subpackage Administration */if ( ! defined('ABSPATH') )	die();global $opml, $map;// columns we wish to find are:  link_url, link_name, link_target, link_description// we need to map XML attribute names to our columns$opml_map = array('URL'         => 'link_url',	'HTMLURL'     => 'link_url',	'TEXT'        => 'link_name',	'TITLE'       => 'link_name',	'TARGET'      => 'link_target',	'DESCRIPTION' => 'link_description',	'XMLURL'      => 'link_rss');$map = $opml_map;/** * XML callback function for the start of a new XML tag. * * @since unknown * @access private * * @uses $updated_timestamp Not used inside function. * @uses $all_links Not used inside function. * @uses $map Stores names of attributes to use. * @global array $names * @global array $urls * @global array $targets * @global array $descriptions * @global array $feeds * * @param mixed $parser XML Parser resource. * @param string $tagName XML element name. * @param array $attrs XML element attributes. */function startElement($parser, $tagName, $attrs) {	global $updated_timestamp, $all_links, $map;	global $names, $urls, $targets, $descriptions, $feeds;	if ($tagName == 'OUTLINE') {		foreach (array_keys($map) as $key) {			if (isset($attrs[$key])) {				$$map[$key] = $attrs[$key];			}		}		//echo("got data: link_url = [$link_url], link_name = [$link_name], link_target = [$link_target], link_description = [$link_description]<br />\n");		// save the data away.		$names[] = $link_name;		$urls[] = $link_url;		$targets[] = $link_target;		$feeds[] = $link_rss;		$descriptions[] = $link_description;	} // end if outline}/** * XML callback function that is called at the end of a XML tag. * * @since unknown * @access private * @package WordPress * @subpackage Dummy * * @param mixed $parser XML Parser resource. * @param string $tagName XML tag name. */function endElement($parser, $tagName) {	// nothing to do.}// Create an XML parser$xml_parser = xml_parser_create();// Set the functions to handle opening and closing tagsxml_set_element_handler($xml_parser, "startElement", "endElement");if (!xml_parse($xml_parser, $opml, true)) {	echo(sprintf(__('XML error: %1$s at line %2$s'),	xml_error_string(xml_get_error_code($xml_parser)),	xml_get_current_line_number($xml_parser)));}// Free up memory used by the XML parserxml_parser_free($xml_parser);?>
<?php/** * Manage media uploaded file. * * There are many filters in here for media. Plugins can extend functionality * by hooking into the filters. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if (!current_user_can('upload_files'))	wp_die(__('You do not have permission to upload files.'));wp_enqueue_script('swfupload-all');wp_enqueue_script('swfupload-handlers');wp_enqueue_script('image-edit');wp_enqueue_script('set-post-thumbnail' );wp_enqueue_style('imgareaselect');@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));// IDs should be integers$ID = isset($ID) ? (int) $ID : 0;$post_id = isset($post_id)? (int) $post_id : 0;// Require an ID for the edit screenif ( isset($action) && $action == 'edit' && !$ID )	wp_die(__("You are not allowed to be here"));if ( isset($_GET['inline']) ) {	$errors = array();	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( isset($_GET['upload-page-form']) ) {		$errors = array_merge($errors, (array) media_upload_form_handler());		$location = 'upload.php';		if ( $errors )			$location .= '?message=3';		wp_redirect( admin_url($location) );	}	$title = __('Upload New Media');	$parent_file = 'upload.php';	add_contextual_help( $current_screen,'<p>' . __('You can upload media files here without creating a post first. This allows you to upload files to use with posts and pages later and/or to get a web link for a particular file that you can share.') . '</p>' .		'<p>' . __('There are two options for uploading files: <em>Select Files</em> will open the Flash-based uploader (multiple file upload allowed), or you can use the <em>Browser Uploader</em>. Clicking <em>Select Files</em> opens a navigation window showing you files in your operating system. Selecting <em>Open</em> after clicking on the file you want activates a progress bar on the uploader screen. Basic image editing is available after upload is complete. Make sure you click<em>Save</em> before leaving this screen.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Media_Add_New_SubPanel" target="_blank">Documentation on Uploading Media Files</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);	require_once('./admin-header.php'); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<form enctype="multipart/form-data" method="post" action="<?php echo admin_url('media-upload.php?inline=&amp;upload-page-form='); ?>" class="media-upload-form type-form validate" id="file-form">	<?php media_upload_form(); ?>	<script type="text/javascript">	jQuery(function($){		var preloaded = $(".media-item.preloaded");		if ( preloaded.length > 0 ) {			preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		}		updateMediaForm();		post_id = 0;		shortform = 1;	});	</script>	<input type="hidden" name="post_id" id="post_id" value="0" />	<?php wp_nonce_field('media-form'); ?>	<div id="media-items" class="hide-if-no-js"> </div>	<p>	<input type="submit" class="button savebutton hide-if-no-js" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" />	</p>	</form>	</div><?php	include('./admin-footer.php');} else {	// upload type: image, video, file, ..?	if ( isset($_GET['type']) )		$type = strval($_GET['type']);	else		$type = apply_filters('media_upload_default_type', 'file');	// tab: gallery, library, or type-specific	if ( isset($_GET['tab']) )		$tab = strval($_GET['tab']);	else		$tab = apply_filters('media_upload_default_tab', 'type');	$body_id = 'media-upload';	// let the action code decide how to handle the request	if ( $tab == 'type' || $tab == 'type_url' )		do_action("media_upload_$type");	else		do_action("media_upload_$tab");}?>
<?php/** * WordPress Administration Importer API. * * @package WordPress * @subpackage Administration *//** * Retrieve list of importers. * * @since 2.0.0 * * @return array */function get_importers() {	global $wp_importers;	if ( is_array($wp_importers) )		uasort($wp_importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));	return $wp_importers;}/** * Register importer for WordPress. * * @since 2.0.0 * * @param string $id Importer tag. Used to uniquely identify importer. * @param string $name Importer name and title. * @param string $description Importer description. * @param callback $callback Callback to run. * @return WP_Error Returns WP_Error when $callback is WP_Error. */function register_importer( $id, $name, $description, $callback ) {	global $wp_importers;	if ( is_wp_error( $callback ) )		return $callback;	$wp_importers[$id] = array ( $name, $description, $callback );}/** * Cleanup importer. * * Removes attachment based on ID. * * @since 2.0.0 * * @param string $id Importer ID. */function wp_import_cleanup( $id ) {	wp_delete_attachment( $id );}/** * Handle importer uploading and add attachment. * * @since 2.0.0 * * @return array */function wp_import_handle_upload() {	if ( !isset($_FILES['import']) ) {		$file['error'] = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return $file;	}	$overrides = array( 'test_form' => false, 'test_type' => false );	$_FILES['import']['name'] .= '.txt';	$file = wp_handle_upload( $_FILES['import'], $overrides );	if ( isset( $file['error'] ) )		return $file;	$url = $file['url'];	$type = $file['type'];	$file = addslashes( $file['file'] );	$filename = basename( $file );	// Construct the object array	$object = array( 'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url	);	// Save the data	$id = wp_insert_attachment( $object, $file );	return array( 'file' => $file, 'id' => $id );}?>
<?phpif ( !class_exists( 'Services_JSON' ) ) :/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: *//** * Converts to and from JSON format. * * JSON (JavaScript Object Notation) is a lightweight data-interchange * format. It is easy for humans to read and write. It is easy for machines * to parse and generate. It is based on a subset of the JavaScript * Programming Language, Standard ECMA-262 3rd Edition - December 1999. * This feature can also be found in  Python. JSON is a text format that is * completely language independent but uses conventions that are familiar * to programmers of the C-family of languages, including C, C++, C#, Java, * JavaScript, Perl, TCL, and many others. These properties make JSON an * ideal data-interchange language. * * This package provides a simple encoder and decoder for JSON notation. It * is intended for use with client-side Javascript applications that make * use of HTTPRequest to perform server communication functions - data can * be encoded into JSON notation for use in a client-side javascript, or * decoded from incoming Javascript requests. JSON format is native to * Javascript, and can be directly eval()'ed with no further parsing * overhead * * All strings should be in ASCII or UTF-8 format! * * LICENSE: Redistribution and use in source and binary forms, with or * without modification, are permitted provided that the following * conditions are met: Redistributions of source code must retain the * above copyright notice, this list of conditions and the following * disclaimer. Redistributions in binary form must reproduce the above * copyright notice, this list of conditions and the following disclaimer * in the documentation and/or other materials provided with the * distribution. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * DAMAGE. * * @category * @package		Services_JSON * @author		Michal Migurski <mike-json@teczno.com> * @author		Matt Knapp <mdknapp[at]gmail[dot]com> * @author		Brett Stimmerman <brettstimmerman[at]gmail[dot]com> * @copyright	2005 Michal Migurski * @version     CVS: $Id: JSON.php 288200 2009-09-09 15:41:29Z alan_k $ * @license		http://www.opensource.org/licenses/bsd-license.php * @link		http://pear.php.net/pepr/pepr-proposal-show.php?id=198 *//** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_SLICE', 1);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_STR',  2);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_ARR',  3);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_OBJ',  4);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_CMT', 5);/** * Behavior switch for Services_JSON::decode() */define('SERVICES_JSON_LOOSE_TYPE', 16);/** * Behavior switch for Services_JSON::decode() */define('SERVICES_JSON_SUPPRESS_ERRORS', 32);/** * Converts to and from JSON format. * * Brief example of use: * * <code> * // create a new instance of Services_JSON * $json = new Services_JSON(); * * // convert a complexe value to JSON notation, and send it to the browser * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4))); * $output = $json->encode($value); * * print($output); * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]] * * // accept incoming POST data, assumed to be in JSON notation * $input = file_get_contents('php://input', 1000000); * $value = $json->decode($input); * </code> */class Services_JSON{ /**	* constructs a new JSON instance	*	* @param int $use object behavior flags; combine with boolean-OR	*	*						possible values:	*						- SERVICES_JSON_LOOSE_TYPE:  loose typing.	*								"{...}" syntax creates associative arrays	*								instead of objects in decode().	*						- SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.	*								Values which can't be encoded (e.g. resources)	*								appear as NULL instead of throwing errors.	*								By default, a deeply-nested resource will	*								bubble up with an error, so all return values	*								from encode() should be checked with isError()	*/	function Services_JSON($use = 0)	{		$this->use = $use;	} /**	* convert a string from one UTF-16 char to one UTF-8 char	*	* Normally should be handled by mb_convert_encoding, but	* provides a slower PHP-only method for installations	* that lack the multibye string extension.	*	* @param	string  $utf16  UTF-16 character	* @return string  UTF-8 character	* @access private	*/	function utf162utf8($utf16)	{		// oh please oh please oh please oh please oh please		if(function_exists('mb_convert_encoding')) {			return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');		}		$bytes = (ord($utf16{0}) << 8) | ord($utf16{1});		switch(true) {			case ((0x7F & $bytes) == $bytes):				// this case should never be reached, because we are in ASCII range				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0x7F & $bytes);			case (0x07FF & $bytes) == $bytes:				// return a 2-byte UTF-8 character				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0xC0 | (($bytes >> 6) & 0x1F))					. chr(0x80 | ($bytes & 0x3F));			case (0xFFFF & $bytes) == $bytes:				// return a 3-byte UTF-8 character				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0xE0 | (($bytes >> 12) & 0x0F))					. chr(0x80 | (($bytes >> 6) & 0x3F))					. chr(0x80 | ($bytes & 0x3F));		}		// ignoring UTF-32 for now, sorry		return '';	} /**	* convert a string from one UTF-8 char to one UTF-16 char	*	* Normally should be handled by mb_convert_encoding, but	* provides a slower PHP-only method for installations	* that lack the multibye string extension.	*	* @param	string  $utf8 UTF-8 character	* @return string  UTF-16 character	* @access private	*/	function utf82utf16($utf8)	{		// oh please oh please oh please oh please oh please		if(function_exists('mb_convert_encoding')) {			return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8');		}		switch(strlen($utf8)) {			case 1:				// this case should never be reached, because we are in ASCII range				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return $utf8;			case 2:				// return a UTF-16 character from a 2-byte UTF-8 char				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0x07 & (ord($utf8{0}) >> 2))					. chr((0xC0 & (ord($utf8{0}) << 6))						| (0x3F & ord($utf8{1})));			case 3:				// return a UTF-16 character from a 3-byte UTF-8 char				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr((0xF0 & (ord($utf8{0}) << 4))						| (0x0F & (ord($utf8{1}) >> 2)))					. chr((0xC0 & (ord($utf8{1}) << 6))						| (0x7F & ord($utf8{2})));		}		// ignoring UTF-32 for now, sorry		return '';	} /**	* encodes an arbitrary variable into JSON format (and sends JSON Header)	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function encode($var)	{		header('Content-type: application/json');		return $this->_encode($var);	}	/**	* encodes an arbitrary variable into JSON format without JSON Header - warning - may allow CSS!!!!)	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function encodeUnsafe($var)	{		return $this->_encode($var);	}	/**	* PRIVATE CODE that does the work of encodes an arbitrary variable into JSON format	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function _encode($var)	{		switch (gettype($var)) {			case 'boolean':				return $var ? 'true' : 'false';			case 'NULL':				return 'null';			case 'integer':				return (int) $var;			case 'double':			case 'float':				return (float) $var;			case 'string':				// STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT				$ascii = '';				$strlen_var = strlen($var);			/*				* Iterate over every character in the string,				* escaping with a slash or encoding to UTF-8 where necessary				*/				for ($c = 0; $c < $strlen_var; ++$c) {					$ord_var_c = ord($var{$c});					switch (true) {						case $ord_var_c == 0x08:							$ascii .= '\b';							break;						case $ord_var_c == 0x09:							$ascii .= '\t';							break;						case $ord_var_c == 0x0A:							$ascii .= '\n';							break;						case $ord_var_c == 0x0C:							$ascii .= '\f';							break;						case $ord_var_c == 0x0D:							$ascii .= '\r';							break;						case $ord_var_c == 0x22:						case $ord_var_c == 0x2F:						case $ord_var_c == 0x5C:							// double quote, slash, slosh							$ascii .= '\\'.$var{$c};							break;						case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):							// characters U-00000000 - U-0000007F (same as ASCII)							$ascii .= $var{$c};							break;						case (($ord_var_c & 0xE0) == 0xC0):							// characters U-00000080 - U-000007FF, mask 110XXXXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							if ($c+1 >= $strlen_var) {								$c += 1;								$ascii .= '?';								break;							}							$char = pack('C*', $ord_var_c, ord($var{$c + 1}));							$c += 1;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xF0) == 0xE0):							if ($c+2 >= $strlen_var) {								$c += 2;								$ascii .= '?';								break;							}							// characters U-00000800 - U-0000FFFF, mask 1110XXXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										@ord($var{$c + 1}),										@ord($var{$c + 2}));							$c += 2;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xF8) == 0xF0):							if ($c+3 >= $strlen_var) {								$c += 3;								$ascii .= '?';								break;							}							// characters U-00010000 - U-001FFFFF, mask 11110XXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}));							$c += 3;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xFC) == 0xF8):							// characters U-00200000 - U-03FFFFFF, mask 111110XX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							if ($c+4 >= $strlen_var) {								$c += 4;								$ascii .= '?';								break;							}							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}),										ord($var{$c + 4}));							$c += 4;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xFE) == 0xFC):						if ($c+5 >= $strlen_var) {								$c += 5;								$ascii .= '?';								break;							}							// characters U-04000000 - U-7FFFFFFF, mask 1111110X							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}),										ord($var{$c + 4}),										ord($var{$c + 5}));							$c += 5;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;					}				}				return  '"'.$ascii.'"';			case 'array':			/*				* As per JSON spec if any array key is not an integer				* we must treat the the whole array as an object. We				* also try to catch a sparsely populated associative				* array with numeric keys here because some JS engines				* will create an array with empty indexes up to				* max_index which can cause memory issues and because				* the keys, which may be relevant, will be remapped				* otherwise.				*				* As per the ECMA and JSON specification an object may				* have any string as a property. Unfortunately due to				* a hole in the ECMA specification if the key is a				* ECMA reserved word or starts with a digit the				* parameter is only accessible using ECMAScript's				* bracket notation.				*/				// treat as a JSON object				if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {					$properties = array_map(array($this, 'name_value'),											array_keys($var),											array_values($var));					foreach($properties as $property) {						if(Services_JSON::isError($property)) {							return $property;						}					}					return '{' . join(',', $properties) . '}';				}				// treat it like a regular array				$elements = array_map(array($this, '_encode'), $var);				foreach($elements as $element) {					if(Services_JSON::isError($element)) {						return $element;					}				}				return '[' . join(',', $elements) . ']';			case 'object':				$vars = get_object_vars($var);				$properties = array_map(array($this, 'name_value'),										array_keys($vars),										array_values($vars));				foreach($properties as $property) {					if(Services_JSON::isError($property)) {						return $property;					}				}				return '{' . join(',', $properties) . '}';			default:				return ($this->use & SERVICES_JSON_SUPPRESS_ERRORS)					? 'null'					: new Services_JSON_Error(gettype($var)." can not be encoded as JSON string");		}	} /**	* array-walking function for use in generating JSON-formatted name-value pairs	*	* @param	string  $name name of key to use	* @param	mixed $value  reference to an array element to be encoded	*	* @return string  JSON-formatted name-value pair, like '"name":value'	* @access private	*/	function name_value($name, $value)	{		$encoded_value = $this->_encode($value);		if(Services_JSON::isError($encoded_value)) {			return $encoded_value;		}		return $this->_encode(strval($name)) . ':' . $encoded_value;	} /**	* reduce a string by removing leading and trailing comments and whitespace	*	* @param	$str	string	string value to strip of comments and whitespace	*	* @return string  string value stripped of comments and whitespace	* @access private	*/	function reduce_string($str)	{		$str = preg_replace(array(				// eliminate single line comments in '// ...' form				'#^\s*//(.+)$#m',				// eliminate multi-line comments in '/* ... */' form, at start of string				'#^\s*/\*(.+)\*/#Us',				// eliminate multi-line comments in '/* ... */' form, at end of string				'#/\*(.+)\*/\s*$#Us'			), '', $str);		// eliminate extraneous space		return trim($str);	} /**	* decodes a JSON string into appropriate variable	*	* @param	string  $str	JSON-formatted string	*	* @return mixed number, boolean, string, array, or object	*				corresponding to given JSON input string.	*				See argument 1 to Services_JSON() above for object-output behavior.	*				Note that decode() always returns strings	*				in ASCII or UTF-8 format!	* @access public	*/	function decode($str)	{		$str = $this->reduce_string($str);		switch (strtolower($str)) {			case 'true':				return true;			case 'false':				return false;			case 'null':				return null;			default:				$m = array();				if (is_numeric($str)) {					// Lookie-loo, it's a number					// This would work on its own, but I'm trying to be					// good about returning integers where appropriate:					// return (float)$str;					// Return float or int, as appropriate					return ((float)$str == (integer)$str)						? (integer)$str						: (float)$str;				} elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) && $m[1] == $m[2]) {					// STRINGS RETURNED IN UTF-8 FORMAT					$delim = substr($str, 0, 1);					$chrs = substr($str, 1, -1);					$utf8 = '';					$strlen_chrs = strlen($chrs);					for ($c = 0; $c < $strlen_chrs; ++$c) {						$substr_chrs_c_2 = substr($chrs, $c, 2);						$ord_chrs_c = ord($chrs{$c});						switch (true) {							case $substr_chrs_c_2 == '\b':								$utf8 .= chr(0x08);								++$c;								break;							case $substr_chrs_c_2 == '\t':								$utf8 .= chr(0x09);								++$c;								break;							case $substr_chrs_c_2 == '\n':								$utf8 .= chr(0x0A);								++$c;								break;							case $substr_chrs_c_2 == '\f':								$utf8 .= chr(0x0C);								++$c;								break;							case $substr_chrs_c_2 == '\r':								$utf8 .= chr(0x0D);								++$c;								break;							case $substr_chrs_c_2 == '\\"':							case $substr_chrs_c_2 == '\\\'':							case $substr_chrs_c_2 == '\\\\':							case $substr_chrs_c_2 == '\\/':								if (($delim == '"' && $substr_chrs_c_2 != '\\\'') ||								($delim == "'" && $substr_chrs_c_2 != '\\"')) {									$utf8 .= $chrs{++$c};								}								break;							case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)):								// single, escaped unicode character								$utf16 = chr(hexdec(substr($chrs, ($c + 2), 2)))									. chr(hexdec(substr($chrs, ($c + 4), 2)));								$utf8 .= $this->utf162utf8($utf16);								$c += 5;								break;							case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F):								$utf8 .= $chrs{$c};								break;							case ($ord_chrs_c & 0xE0) == 0xC0:								// characters U-00000080 - U-000007FF, mask 110XXXXX								//see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 2);								++$c;								break;							case ($ord_chrs_c & 0xF0) == 0xE0:								// characters U-00000800 - U-0000FFFF, mask 1110XXXX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 3);								$c += 2;								break;							case ($ord_chrs_c & 0xF8) == 0xF0:								// characters U-00010000 - U-001FFFFF, mask 11110XXX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 4);								$c += 3;								break;							case ($ord_chrs_c & 0xFC) == 0xF8:								// characters U-00200000 - U-03FFFFFF, mask 111110XX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 5);								$c += 4;								break;							case ($ord_chrs_c & 0xFE) == 0xFC:								// characters U-04000000 - U-7FFFFFFF, mask 1111110X								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 6);								$c += 5;								break;						}					}					return $utf8;				} elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) {					// array, or object notation					if ($str{0} == '[') {						$stk = array(SERVICES_JSON_IN_ARR);						$arr = array();					} else {						if ($this->use & SERVICES_JSON_LOOSE_TYPE) {							$stk = array(SERVICES_JSON_IN_OBJ);							$obj = array();						} else {							$stk = array(SERVICES_JSON_IN_OBJ);							$obj = new stdClass();						}					}					array_push($stk, array('what'  => SERVICES_JSON_SLICE,										'where' => 0,										'delim' => false));					$chrs = substr($str, 1, -1);					$chrs = $this->reduce_string($chrs);					if ($chrs == '') {						if (reset($stk) == SERVICES_JSON_IN_ARR) {							return $arr;						} else {							return $obj;						}					}					//print("\nparsing {$chrs}\n");					$strlen_chrs = strlen($chrs);					for ($c = 0; $c <= $strlen_chrs; ++$c) {						$top = end($stk);						$substr_chrs_c_2 = substr($chrs, $c, 2);						if (($c == $strlen_chrs) || (($chrs{$c} == ',') && ($top['what'] == SERVICES_JSON_SLICE))) {							// found a comma that is not inside a string, array, etc.,							// OR we've reached the end of the character list							$slice = substr($chrs, $top['where'], ($c - $top['where']));							array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => ($c + 1), 'delim' => false));							//print("Found split at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");							if (reset($stk) == SERVICES_JSON_IN_ARR) {								// we are in an array, so just push an element onto the stack								array_push($arr, $this->decode($slice));							} elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {								// we are in an object, so figure								// out the property name and set an								// element in an associative array,								// for now								$parts = array();								if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {									// "name":value pair									$key = $this->decode($parts[1]);									$val = $this->decode($parts[2]);									if ($this->use & SERVICES_JSON_LOOSE_TYPE) {										$obj[$key] = $val;									} else {										$obj->$key = $val;									}								} elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {									// name:value pair, where name is unquoted									$key = $parts[1];									$val = $this->decode($parts[2]);									if ($this->use & SERVICES_JSON_LOOSE_TYPE) {										$obj[$key] = $val;									} else {										$obj->$key = $val;									}								}							}						} elseif ((($chrs{$c} == '"') || ($chrs{$c} == "'")) && ($top['what'] != SERVICES_JSON_IN_STR)) {							// found a quote, and we are not inside a string							array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs{$c}));							//print("Found start of string at {$c}\n");						} elseif (($chrs{$c} == $top['delim']) &&								($top['what'] == SERVICES_JSON_IN_STR) &&								((strlen(substr($chrs, 0, $c)) - strlen(rtrim(substr($chrs, 0, $c), '\\'))) % 2 != 1)) {							// found a quote, we're in a string, and it's not escaped							// we know that it's not escaped becase there is _not_ an							// odd number of backslashes at the end of the string so far							array_pop($stk);							//print("Found end of string at {$c}: ".substr($chrs, $top['where'], (1 + 1 + $c - $top['where']))."\n");						} elseif (($chrs{$c} == '[') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a left-bracket, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false));							//print("Found start of array at {$c}\n");						} elseif (($chrs{$c} == ']') && ($top['what'] == SERVICES_JSON_IN_ARR)) {							// found a right-bracket, and we're in an array							array_pop($stk);							//print("Found end of array at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						} elseif (($chrs{$c} == '{') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a left-brace, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false));							//print("Found start of object at {$c}\n");						} elseif (($chrs{$c} == '}') && ($top['what'] == SERVICES_JSON_IN_OBJ)) {							// found a right-brace, and we're in an object							array_pop($stk);							//print("Found end of object at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						} elseif (($substr_chrs_c_2 == '/*') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a comment start, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false));							$c++;							//print("Found start of comment at {$c}\n");						} elseif (($substr_chrs_c_2 == '*/') && ($top['what'] == SERVICES_JSON_IN_CMT)) {							// found a comment end, and we're in one now							array_pop($stk);							$c++;							for ($i = $top['where']; $i <= $c; ++$i)								$chrs = substr_replace($chrs, ' ', $i, 1);							//print("Found end of comment at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						}					}					if (reset($stk) == SERVICES_JSON_IN_ARR) {						return $arr;					} elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {						return $obj;					}				}		}	}	/**	* @todo Ultimately, this should just call PEAR::isError()	*/	function isError($data, $code = null)	{		if (class_exists('pear')) {			return PEAR::isError($data, $code);		} elseif (is_object($data) && (get_class($data) == 'services_json_error' ||								is_subclass_of($data, 'services_json_error'))) {			return true;		}		return false;	}}if (class_exists('PEAR_Error')) {	class Services_JSON_Error extends PEAR_Error	{		function Services_JSON_Error($message = 'unknown error', $code = null,									$mode = null, $options = null, $userinfo = null)		{			parent::PEAR_Error($message, $code, $mode, $options, $userinfo);		}	}} else {	/**	* @todo Ultimately, this class shall be descended from PEAR_Error	*/	class Services_JSON_Error	{		function Services_JSON_Error($message = 'unknown error', $code = null,									$mode = null, $options = null, $userinfo = null)		{		}	}}endif;?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );// Do not delete these lines	if (!empty($_SERVER['SCRIPT_FILENAME']) && 'comments.php' == basename($_SERVER['SCRIPT_FILENAME']))		die ('Please do not load this page directly. Thanks!');		if ( post_password_required() ) { ?>		<p class="nocomments"><?php _e('This post is password protected. Enter the password to view comments.'); ?></p> 	<?php		return;	}?><!-- You can start editing here. --><?php if ( have_comments() ) : ?>	<h3 id="comments"><?php	printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number() ),									number_format_i18n( get_comments_number() ), '&#8220;' . get_the_title() . '&#8221;' ); ?></h3>	<div class="navigation">		<div class="alignleft"><?php previous_comments_link() ?></div>		<div class="alignright"><?php next_comments_link() ?></div>	</div>	<ol class="commentlist">	<?php wp_list_comments();?>	</ol>	<div class="navigation">		<div class="alignleft"><?php previous_comments_link() ?></div>		<div class="alignright"><?php next_comments_link() ?></div>	</div> <?php else : // this is displayed if there are no comments so far ?>	<?php if ( comments_open() ) : ?>		<!-- If comments are open, but there are no comments. -->	 <?php else : // comments are closed ?>		<!-- If comments are closed. -->		<p class="nocomments"><?php _e('Comments are closed.'); ?></p>	<?php endif; ?><?php endif; ?><?php if ( comments_open() ) : ?><div id="respond"><h3><?php comment_form_title( __('Leave a Reply'), __('Leave a Reply to %s' ) ); ?></h3><div id="cancel-comment-reply"> 	<small><?php cancel_comment_reply_link() ?></small></div> <?php if ( get_option('comment_registration') && !is_user_logged_in() ) : ?><p><?php printf(__('You must be <a href="%s">logged in</a> to post a comment.'), wp_login_url( get_permalink() )); ?></p><?php else : ?><form action="<?php echo get_option('siteurl'); ?>/wp-comments-post.php" method="post" id="commentform"><?php if ( is_user_logged_in() ) : ?><p><?php printf(__('Logged in as <a href="%1$s">%2$s</a>.'), get_option('siteurl') . '/wp-admin/profile.php', $user_identity); ?> <a href="<?php echo wp_logout_url(get_permalink()); ?>" title="<?php _e('Log out of this account'); ?>"><?php _e('Log out &raquo;'); ?></a></p><?php else : ?><p><input type="text" name="author" id="author" value="<?php echo esc_attr($comment_author); ?>" size="22" tabindex="1" <?php if ($req) echo "aria-required='true'"; ?> /><label for="author"><small><?php _e('Name'); ?> <?php if ($req) _e('(required)'); ?></small></label></p><p><input type="text" name="email" id="email" value="<?php echo esc_attr($comment_author_email); ?>" size="22" tabindex="2" <?php if ($req) echo "aria-required='true'"; ?> /><label for="email"><small><?php _e('Mail (will not be published)'); ?> <?php if ($req) _e('(required)'); ?></small></label></p><p><input type="text" name="url" id="url" value="<?php echo  esc_attr($comment_author_url); ?>" size="22" tabindex="3" /><label for="url"><small><?php _e('Website'); ?></small></label></p><?php endif; ?><!--<p><small><?php printf(__('<strong>XHTML:</strong> You can use these tags: <code>%s</code>'), allowed_tags()); ?></small></p>--><p><textarea name="comment" id="comment" cols="58" rows="10" tabindex="4"></textarea></p><p><input name="submit" type="submit" id="submit" tabindex="5" value="<?php _e('Submit Comment'); ?>" /><?php comment_id_fields(); ?> </p><?php do_action('comment_form', $post->ID); ?></form><?php endif; // If registration required and not logged in ?></div><?php endif; // if you delete this the sky will fall on your head ?>
<?phpdefine('WP_REPAIRING', true);require_once('../../wp-load.php');header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e('WordPress &rsaquo; Database Repair'); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="../images/wordpress-logo.png" /></h1><?phpif ( !defined('WP_ALLOW_REPAIR') ) {	echo '<p>'.__('To allow use of this page to automatically repair database problems, please add the following line to your wp-config.php file.  Once this line is added to your config, reload this page.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";} elseif ( isset($_GET['repair']) ) {	$problems = array();	check_admin_referer('repair_db');	if ( 2 == $_GET['repair'] )		$optimize = true;	else		$optimize = false;	$okay = true;	$tables = $wpdb->tables();	// Sitecategories may not exist if global terms are disabled.	if ( is_multisite() && ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->sitecategories'" ) )		unset( $tables['sitecategories'] );	$tables = array_merge( $tables, (array) apply_filters( 'tables_to_repair', array() ) ); // Return tables with table prefixes.	// Loop over the tables, checking and repairing as needed.	foreach ( $tables as $table ) {		$check = $wpdb->get_row("CHECK TABLE $table");		if ( 'OK' == $check->Msg_text ) {			echo "<p>The $table table is okay.";		} else {			echo "<p>The $table table is not okay. It is reporting the following error: <code>$check->Msg_text</code>.  WordPress will attempt to repair this table&hellip;";			$repair = $wpdb->get_row("REPAIR TABLE $table");			if ( 'OK' == $check->Msg_text ) {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully repaired the $table table.";			} else {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to repair the $table table. Error: $check->Msg_text<br />";				$problems["$table"] = $check->Msg_text;				$okay = false;			}		}		if ( $okay && $optimize ) {			$check = $wpdb->get_row("ANALYZE TABLE $table");			if ( 'Table is already up to date' == $check->Msg_text )  {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;The $table table is already optimized.";			} else {				$check = $wpdb->get_row("OPTIMIZE TABLE $table");				if ( 'OK' == $check->Msg_text || 'Table is already up to date' == $check->Msg_text )					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully optimized the $table table.";				else					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to optimize the $table table. Error: $check->Msg_text";			}		}		echo '</p>';	}	if ( !empty($problems) ) {		printf('<p>'.__('Some database problems could not be repaired. Please copy-and-paste the following list of errors to the <a href="%s">WordPress support forums</a> to get additional assistance.').'</p>', 'http://wordpress.org/support/forum/3');		$problem_output = array();		foreach ( $problems as $table => $problem )			$problem_output[] = "$table: $problem";		echo '<textarea name="errors" id="errors" rows="20" cols="60">' . format_to_edit(implode("\n", $problem_output)) . '</textarea>';	} else {		echo '<p>'.__('Repairs complete.  Please remove the following line from wp-config.php to prevent this page from being used by unauthorized users.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";	}} else {	if ( isset($_GET['referrer']) && 'is_blog_installed' == $_GET['referrer'] )		_e('One or more database tables is unavailable.  To allow WordPress to attempt to repair these tables, press the "Repair Database" button. Repairing can take awhile, so please be patient.');	else		_e('WordPress can automatically look for some common database problems and repair them.  Repairing can take awhile, so please be patient.')?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=1', 'repair_db') ?>"><?php _e( 'Repair Database' ); ?></a></p>	<?php _e('WordPress can also attempt to optimize the database.  This improves performance in some situations.  Repairing and optimizing the database can take a long time and the database will be locked while optimizing.'); ?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=2', 'repair_db') ?>"><?php _e( 'Repair and Optimize Database' ); ?></a></p><?php}?></body></html>
<?php/** * Comment Moderation Administration Panel. * * Redirects to edit-comments.php?comment_status=moderated. * * @package WordPress * @subpackage Administration */require_once('../wp-load.php');wp_redirect('edit-comments.php?comment_status=moderated');?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff) * to compute the differences between the two input arrays. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Jon Parise <jon@horde.org> * @package Text_Diff */class Text_Diff_Engine_xdiff {    /**     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        /* Convert the two input arrays into strings for xdiff processing. */        $from_string = implode("\n", $from_lines);        $to_string = implode("\n", $to_lines);        /* Diff the two strings and convert the result to an array. */        $diff = xdiff_string_diff($from_string, $to_string, count($to_lines));        $diff = explode("\n", $diff);        /* Walk through the diff one line at a time.  We build the $edits         * array of diff operations by reading the first character of the         * xdiff output (which is in the "unified diff" format).         *         * Note that we don't have enough information to detect "changed"         * lines using this approach, so we can't add Text_Diff_Op_changed         * instances to the $edits array.  The result is still perfectly         * valid, albeit a little less descriptive and efficient. */        $edits = array();        foreach ($diff as $line) {            if (!strlen($line)) {                continue;            }            switch ($line[0]) {            case ' ':                $edits[] = &new Text_Diff_Op_copy(array(substr($line, 1)));                break;            case '+':                $edits[] = &new Text_Diff_Op_add(array(substr($line, 1)));                break;            case '-':                $edits[] = &new Text_Diff_Op_delete(array(substr($line, 1)));                break;            }        }        return $edits;    }}
<?php/** * Multisite network settings administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_options' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Options' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen sets and changes options for the network as a whole. The first site is the main site in the network and network options are pulled from that original site&#8217;s options.') . '</p>' .	'<p>' . __('Operational settings has fields for the network&#8217;s name and admin email.') . '</p>' .	'<p>' . __('Dashboard Site is an option to give a site to users who do not have a site on the system. Their default role is Subscriber, but that default can be changed. The Admin Notice Feed can provide a notice on all dashboards of the latest post via RSS or Atom, or provide no such notice if left blank.') . '</p>' .	'<p>' . __('Registration settings can disable/enable public signups. If you let others sign up for a site, install spam plugins. Spaces, not commas, should separate names banned as sites for this network.') . '</p>' .	'<p>' . __('New site settings are defaults applied when a new site is created in the network. These include welcome email for when a new site or user account is registered, and what&#8127;s put in the first post, page, comment, comment author, and comment URL.') . '</p>' .	'<p>' . __('Upload settings control the size of the uploaded files and the amount of available upload space for each site. You can change the default value for specific sites when you edit a particular site. Allowed file types are also listed (space separated only).') . '</p>' .	'<p>' . __('Checkboxes for media upload buttons set which are shown in the visual editor. If unchecked, a generic upload button is still visible; other media types can still be uploaded if on the allowed file types list.') . '</p>' .	'<p>' . __('Menu setting enables/disables the plugin menus from appearing for non super admins, so that only super admins, not site admins, have access to activate plugins.') . '</p>' .	'<p>' . __('Super admins can no longer be added on the Options screen. You must now go to the list of existing users on Super Admin > Users and click on Username or the Edit action link below that name. This goes to an Edit User page where you can check a box to grant super admin privileges.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Options_SubPanel" target="_blank">Network Options Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );if (isset($_GET['updated'])) {	?>	<div id="message" class="updated"><p><?php _e( 'Options saved.' ) ?></p></div>	<?php}?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e( 'Network Options' ) ?></h2>	<form method="post" action="ms-edit.php?action=siteoptions">		<?php wp_nonce_field( 'siteoptions' ); ?>		<h3><?php _e( 'Operational Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="site_name"><?php _e( 'Network Name' ) ?></label></th>				<td>					<input name="site_name" type="text" id="site_name" class="regular-text" value="<?php echo esc_attr( $current_site->site_name ) ?>" />					<br />					<?php _e( 'What you would like to call this website.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_email"><?php _e( 'Network Admin Email' ) ?></label></th>				<td>					<input name="admin_email" type="text" id="admin_email" class="regular-text" value="<?php echo esc_attr( get_site_option('admin_email') ) ?>" />					<br />					<?php printf( __( 'Registration and support emails will come from this address. An address such as <code>support@%s</code> is recommended.' ), $current_site->domain ); ?>				</td>			</tr>		</table>		<h3><?php _e( 'Dashboard Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="dashboard_blog"><?php _e( 'Dashboard Site' ) ?></label></th>				<td>					<?php					if ( $dashboard_blog = get_site_option( 'dashboard_blog' ) ) {						$details = get_blog_details( $dashboard_blog );						$blogname = untrailingslashit( sanitize_user( str_replace( '.', '', str_replace( $current_site->domain . $current_site->path, '', $details->domain . $details->path ) ) ) );					} else {						$blogname = '';					}?>					<input name="dashboard_blog_orig" type="hidden" id="dashboard_blog_orig" value="<?php echo esc_attr( $blogname ); ?>" />					<input name="dashboard_blog" type="text" id="dashboard_blog" value="<?php echo esc_attr( $blogname ); ?>" class="regular-text" />					<br />					<?php _e( 'Site path (&#8220;dashboard&#8221;, &#8220;control&#8221;, &#8220;manager&#8221;, etc.) or blog ID.<br />New users are added to this site as the user role defined below if they don&#8217;t have a site. Leave blank for the main site. Users with the Subscriber role on the old site will be moved to the new site if changed. The new site will be created if it does not exist.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="default_user_role"><?php _e( 'Dashboard User Default Role' ) ?></label></th>				<td>					<select name="default_user_role" id="default_user_role"><?php					wp_dropdown_roles( get_site_option( 'default_user_role', 'subscriber' ) );					?>					</select>					<br />					<?php _e( 'The default role for new users on the Dashboard site. &#8220;Subscriber&#8221; or &#8220;Contributor&#8221; roles are recommended.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_notice_feed"><?php _e( 'Admin Notice Feed' ) ?></label></th>				<td><input name="admin_notice_feed" class="large-text" type="text" id="admin_notice_feed" value="<?php echo esc_attr( get_site_option( 'admin_notice_feed' ) ) ?>" size="80" /><br />				<?php _e( 'Display the latest post from this RSS or Atom feed on all site dashboards. Leave blank to disable.' ); ?><br />				<?php if ( get_site_option( 'admin_notice_feed' ) != get_home_url( $current_site->id, 'feed/' ) )					echo __( 'A good one to use would be the feed from your main site: ' ) . esc_url( get_home_url( $current_site->id, 'feed/' ) ) ?></td>			</tr>		</table>		<h3><?php _e( 'Registration Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Allow new registrations' ) ?></th>				<?php				if ( !get_site_option( 'registration' ) )					update_site_option( 'registration', 'none' );				$reg = get_site_option( 'registration' );				?>				<td>					<label><input name="registration" type="radio" id="registration1" value="none"<?php checked( $reg, 'none') ?> /> <?php _e( 'Registration is disabled.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration2" value="user"<?php checked( $reg, 'user') ?> /> <?php _e( 'User accounts may be registered.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration3" value="blog"<?php checked( $reg, 'blog') ?> /> <?php _e( 'Logged in users may register new sites.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration4" value="all"<?php checked( $reg, 'all') ?> /> <?php _e( 'Both sites and user accounts can be registered.' ); ?></label><br />					<p><?php _e( 'Disable or enable registration and who or what can be registered. (Default is disabled.)' ); ?></p>					<?php if ( is_subdomain_install() ) {						echo '<p>' . __( 'If registration is disabled, please set <code>NOBLOGREDIRECT</code> in <code>wp-config.php</code> to a URL you will redirect visitors to if they visit a non-existent site.' ) . '</p>';					} ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Registration notification' ) ?></th>				<?php				if ( !get_site_option( 'registrationnotification' ) )					update_site_option( 'registrationnotification', 'yes' );				?>				<td>					<label><input name="registrationnotification" type="checkbox" id="registrationnotification" value="yes"<?php checked( get_site_option( 'registrationnotification' ), 'yes' ) ?> /> <?php _e( 'Send the network admin an email notification every time someone registers a site or user account.' ) ?></label>				</td>			</tr>			<tr valign="top" id="addnewusers">				<th scope="row"><?php _e( 'Add New Users' ) ?></th>				<td>					<label><input name="add_new_users" type="checkbox" id="add_new_users" value="1"<?php checked( get_site_option( 'add_new_users' ) ) ?> /> <?php _e( 'Allow site administrators to add new users to their site via the "Users->Add New" page.' ); ?></label>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="illegal_names"><?php _e( 'Banned Names' ) ?></label></th>				<td>					<input name="illegal_names" type="text" id="illegal_names" class="large-text" value="<?php echo esc_attr( implode( " ", get_site_option( 'illegal_names' ) ) ); ?>" size="45" />					<br />					<?php _e( 'Users are not allowed to register these sites. Separate names by spaces.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="limited_email_domains"><?php _e( 'Limited Email Registrations' ) ?></label></th>				<td>					<?php $limited_email_domains = get_site_option( 'limited_email_domains' );					$limited_email_domains = str_replace( ' ', "\n", $limited_email_domains ); ?>					<textarea name="limited_email_domains" id="limited_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( $limited_email_domains == '' ? '' : implode( "\n", (array) $limited_email_domains ) ); ?></textarea>					<br />					<?php _e( 'If you want to limit site registrations to certain domains. One domain per line.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="banned_email_domains"><?php _e('Banned Email Domains') ?></label></th>				<td>					<textarea name="banned_email_domains" id="banned_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( get_site_option( 'banned_email_domains' ) == '' ? '' : implode( "\n", (array) get_site_option( 'banned_email_domains' ) ) ); ?></textarea>					<br />					<?php _e( 'If you want to ban domains from site registrations. One domain per line.' ) ?>				</td>			</tr>		</table>		<h3><?php _e('New Site Settings'); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="welcome_email"><?php _e( 'Welcome Email' ) ?></label></th>				<td>					<textarea name="welcome_email" id="welcome_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new site owners.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="welcome_user_email"><?php _e( 'Welcome User Email' ) ?></label></th>				<td>					<textarea name="welcome_user_email" id="welcome_user_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_user_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new users.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_post"><?php _e( 'First Post' ) ?></label></th>				<td>					<textarea name="first_post" id="first_post" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'first_post' ) ) ) ?></textarea>					<br />					<?php _e( 'The first post on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_page"><?php _e( 'First Page' ) ?></label></th>				<td>					<textarea name="first_page" id="first_page" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_page') ) ) ?></textarea>					<br />					<?php _e( 'The first page on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment"><?php _e( 'First Comment' ) ?></label></th>				<td>					<textarea name="first_comment" id="first_comment" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_comment') ) ) ?></textarea>					<br />					<?php _e( 'The first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_author"><?php _e( 'First Comment Author' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_author" id="first_comment_author" value="<?php echo get_site_option('first_comment_author') ?>" />					<br />					<?php _e( 'The author of the first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_url"><?php _e( 'First Comment URL' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_url" id="first_comment_url" value="<?php echo esc_attr( get_site_option( 'first_comment_url' ) ) ?>" />					<br />					<?php _e( 'The URL for the first comment on a new site.' ) ?>				</td>			</tr>		</table>		<h3><?php _e( 'Upload Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Media upload buttons' ) ?></th>				<?php $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ); ?>				<td><label><input type="checkbox" id="mu_media_buttons_image" name="mu_media_buttons[image]" value="1"<?php checked( ! empty( $mu_media_buttons['image'] ) ) ?>/> <?php _e( 'Images' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_video" name="mu_media_buttons[video]" value="1"<?php checked( ! empty( $mu_media_buttons['video'] ) ) ?>/> <?php _e( 'Videos' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_audio" name="mu_media_buttons[audio]" value="1"<?php checked( ! empty( $mu_media_buttons['audio'] ) ) ?>/> <?php _e( 'Music' ); ?></label><br />				<?php _e( 'The media upload buttons to display on the &#8220;Write Post&#8221; page. Make sure you update the allowed upload file types below as well.' ); ?></td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Site upload space' ) ?></th>				<td>				<label><input type="checkbox" id="upload_space_check_disabled" name="upload_space_check_disabled" value="0"<?php checked( get_site_option( 'upload_space_check_disabled' ), 0 ) ?>/> <?php printf( __( 'Limit total size of files uploaded to %s MB' ), '</label><label><input name="blog_upload_space" type="text" id="blog_upload_space" value="' . esc_attr( get_site_option('blog_upload_space', 10) ) . '" size="3" />' ); ?></label><br />				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="upload_filetypes"><?php _e( 'Upload file types' ) ?></label></th>				<td><input name="upload_filetypes" type="text" id="upload_filetypes" class="large-text" value="<?php echo esc_attr( get_site_option('upload_filetypes', 'jpg jpeg png gif') ) ?>" size="45" /></td>			</tr>			<tr valign="top">				<th scope="row"><label for="fileupload_maxk"><?php _e( 'Max upload file size' ) ?></label></th>				<td><?php printf( _x( '%s KB', 'File size in kilobytes' ), '<input name="fileupload_maxk" type="text" id="fileupload_maxk" value="' . esc_attr( get_site_option( 'fileupload_maxk', 300 ) ) . '" size="5" />' ); ?></td>			</tr>		</table><?php		$languages = get_available_languages();		if ( ! empty( $languages ) ) {			$lang = get_site_option( 'WPLANG' );?>		<h3><?php _e( 'Network Wide Settings' ); ?></h3>		<div class="updated inline"><p><strong><?php _e( 'Notice:' ); ?></strong> <?php _e( 'These settings may be overridden by site owners.' ); ?></p></div>		<table class="form-table">			<?php				?>				<tr valign="top">					<th><label for="WPLANG"><?php _e( 'Default Language' ) ?></label></th>					<td>						<select name="WPLANG" id="WPLANG">							<?php mu_dropdown_languages( $languages, get_site_option( 'WPLANG' ) ); ?>						</select>					</td>				</tr>		</table><?php		} // languages?>		<h3><?php _e( 'Menu Settings' ); ?></h3>		<table id="menu" class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Enable administration menus' ); ?></th>				<td>			<?php			$menu_perms = get_site_option( 'menu_items' );			$menu_items = apply_filters( 'mu_menu_items', array( 'plugins' => __( 'Plugins' ) ) );			foreach ( (array) $menu_items as $key => $val ) {				echo "<label><input type='checkbox' name='menu_items[" . $key . "]' value='1'" .  ( isset( $menu_perms[$key] ) ? checked( $menu_perms[$key], '1', false ) : '' ) . " /> " . esc_html( $val ) . "</label><br/>";			}			?>				</td>			</tr>		</table>		<?php do_action( 'wpmu_options' ); // Add more options here ?>		<p class="submit"><input type="submit" class="button-primary" name="Submit" value="<?php esc_attr_e( 'Save Changes' ) ?>" /></p>	</form></div><?php include( './admin-footer.php' ); ?>
<?php/** * Redirects to the RDF feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rdf_url' ), 301 );?>
<?php/** * WordPress Administration Template Footer * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');?><div class="clear"></div></div><!-- wpbody-content --><div class="clear"></div></div><!-- wpbody --><div class="clear"></div></div><!-- wpcontent --></div><!-- wpwrap --><div id="footer"><p id="footer-left" class="alignleft"><?phpdo_action( 'in_admin_footer' );$upgrade = apply_filters( 'update_footer', '' );echo apply_filters( 'admin_footer_text', '<span id="footer-thankyou">' . __('Thank you for creating with <a href="http://wordpress.org/">WordPress</a>.').'</span> | '.__('<a href="http://codex.wordpress.org/">Documentation</a>').' | '.__('<a href="http://wordpress.org/support/forum/4">Feedback</a>') ); ?></p><p id="footer-upgrade" class="alignright"><?php echo $upgrade; ?></p><div class="clear"></div></div><?phpdo_action('admin_footer', '');do_action('admin_print_footer_scripts');do_action("admin_footer-" . $GLOBALS['hook_suffix']);// get_site_option() won't exist when auto upgrading from <= 2.7if ( function_exists('get_site_option') ) {	if ( false === get_site_option('can_compress_scripts') )		compression_test();}?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?phpif ( !defined( 'ABSPATH' ) )	exit;/** @ignore */function dvortr( $str ) {	return strtr(		$str,		'\',.pyfgcrl/=\\aoeuidhtns-;qjkxbmwvz"<>PYFGCRL?+|AOEUIDHTNS_:QJKXBMWVZ[]',		'qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?-='	);}$j = esc_url( site_url( '/wp-includes/js/jquery/jquery.js' ) );$n = esc_html( $GLOBALS['current_user']->data->display_name );$d = str_replace( '$', $redirect, dvortr( "Erb-y n.y ydco dall.b aiacbv Wa ce]-irxajt- dp.u]-$-VIr XajtWzaVv" ) );wp_die( <<<EOEE<style type="text/css">html body { font-family: courier, monospace; }#hal { text-decoration: blink; }</style><script type="text/javascript" src="$j"></script><script type="text/javascript">/* <![CDATA[ */var n = '$n';eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p}('6(4(){2 e=6(\\'#Q\\').v();2 i=\\'\\\\\\',.R/=\\\\\\\\S-;T"<>U?+|V:W[]X{}\\'.u(\\'\\');2 o=\\'Y[]\\\\\\\\Z;\\\\\\'10,./11{}|12:"13<>?-=14+\\'.u(\\'\\');2 5=4(s){r=\\'\\';6.15(s.u(\\'\\'),4(){2 t=16.D();2 c=6.17(t,i);r+=\\'\$\\'==t?n:(-1==c?t:o[c])});j r};2 a=[\\'O.E[18 e.y.19.1a\\',\\'1b 1c. 1d .1e.,1f 1g\\',\\'O.E e.1h 1i 8\\',\\'9\\',\\'0\\'];2 b=[\\'<1j. 1k \$1l\\',\\'1m. 1n 1o 1p\\',\\'1q, 1r. ,1s. 1t\\'];2 w=[];2 h=6(5(\\'#1u\\'));6(5(\\'1v\\')).1w(4(e){7(1x!==e.1y){j}7(x&&x.F){x.F();j G}1z.1A=6(5(\\'#1B\\')).1C(\\'1D\\');j G});2 k=4(){2 l=a.H();7(\\'I\\'==J l){7(m){2 c={};c[5(\\'1E\\')]=5(\\'1F\\');c[5(\\'1G\\')]=5(\\'1H..b\\');6(5(\\'1I 1J\\')).1K(c);p();h.v().1L({1M:1},z,\\'1N\\',4(){h.K()});d(m,L)}j}w=5(l).u(\\'\\');A()};2 A=4(){B=w.H();7(\\'I\\'==J B){7(m){h.M(5(\\'1O 1P\\'));d(k,C)}N{7(a.P){d(p,C);d(k,z)}N{d(4(){p();h.v()},C);d(4(){e.K()},L)}}j}h.M(B.D());d(A,1Q)};2 m=4(){a=b;m=1R;k()};p=4(){2 f=6(\\'p\\').1S(0);2 g=6.1T(f.q).1U();1V(2 g=f.q.P;g>0;g--){7(3==f.q[g-1].1W||\\'1X\\'==f.q[g-1].1Y.1Z()){f.20(f.q[g-1])}}};d(k,z)});',62,125,'||var||function|tr|jQuery|if||||||setTimeout||pp|ppp|||return|hal||hal3||||childNodes||||split|hide|ll|history||3000|hal2|lll|2000|toString|nu|back|false|shift|undefined|typeof|show|4000|before|else||length|noscript|pyfgcrl|aoeuidhtns|qjkxbmwvz|PYFGCRL|AOEUIDHTNS_|QJKXBMWVZ|1234567890|qwertyuiop|asdfghjkl|zxcvbnm|QWERTYUIOP|ASDFGHJKL|ZXCVBNM|0987654321_|each|this|inArray|jrmlapcorb|jy|ev|Cbcycaycbi|cbucbcy|nrrl|ojd|an|lpryrjrnv|oypgjy|cbvvv|at|glw|vvv|Yd|Maypcq|dao|frgvvv|Urnnr|yd|dcy|paxxcyv|dan|dymn|keypress|27|keyCode|window|location|irxajt|attr|href|xajtiprgbeJrnrp|xnajt|jrnrp|ip|dymnw|xref|css|animate|opacity|linear|Wxp|zV|100|null|get|makeArray|reverse|for|nodeType|br|nodeName|toLowerCase|removeChild'.split('|'),0,{}))/* ]]> */</script><span id="noscript">$d</span><blink id="hal">&#x258c;</blink>EOEE,dvortr( 'Eabi.p!' ));
<?php/** * Creates common globals for the rest of WordPress * * Sets $pagenow global which is the current page. Checks * for the browser to set which one is currently being used. * * Detects which user environment WordPress is being used on. * Only attempts to check for Apache and IIS. Two web servers * with known permalink capability. * * @package WordPress */// On which page are we ?if ( is_admin() ) {	// wp-admin pages are checked more carefully	preg_match('#/wp-admin/?(.*?)$#i', $PHP_SELF, $self_matches);	$pagenow = $self_matches[1];	$pagenow = trim($pagenow, '/');	$pagenow = preg_replace('#\?.*?$#', '', $pagenow);	if ( '' === $pagenow || 'index' === $pagenow || 'index.php' === $pagenow ) {		$pagenow = 'index.php';	} else {		preg_match('#(.*?)(/|$)#', $pagenow, $self_matches);		$pagenow = strtolower($self_matches[1]);		if ( '.php' !== substr($pagenow, -4, 4) )			$pagenow .= '.php'; // for Options +Multiviews: /wp-admin/themes/index.php (themes.php is queried)	}} else {	if ( preg_match('#([^/]+\.php)([?/].*?)?$#i', $PHP_SELF, $self_matches) )		$pagenow = strtolower($self_matches[1]);	else		$pagenow = 'index.php';}// Simple browser detection$is_lynx = $is_gecko = $is_winIE = $is_macIE = $is_opera = $is_NS4 = $is_safari = $is_chrome = $is_iphone = false;if ( isset($_SERVER['HTTP_USER_AGENT']) ) {	if ( strpos($_SERVER['HTTP_USER_AGENT'], 'Lynx') !== false ) {		$is_lynx = true;	} elseif ( stripos($_SERVER['HTTP_USER_AGENT'], 'chrome') !== false ) {		$is_chrome = true;	} elseif ( stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false ) {		$is_safari = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Gecko') !== false ) {		$is_gecko = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Win') !== false ) {		$is_winIE = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Mac') !== false ) {		$is_macIE = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Opera') !== false ) {		$is_opera = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Nav') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Mozilla/4.') !== false ) {		$is_NS4 = true;	}}if ( $is_safari && stripos($_SERVER['HTTP_USER_AGENT'], 'mobile') !== false )	$is_iphone = true;$is_IE = ( $is_macIE || $is_winIE );// Server detection/** * Whether the server software is Apache or something else * @global bool $is_apache */$is_apache = (strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'], 'LiteSpeed') !== false);/** * Whether the server software is IIS or something else * @global bool $is_IIS */$is_IIS = (strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS') !== false || strpos($_SERVER['SERVER_SOFTWARE'], 'ExpressionDevServer') !== false);/** * Whether the server software is IIS 7.X * @global bool $is_iis7 */$is_iis7 = (strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS/7.') !== false);?>
<?php/** * WordPress implementation for PHP functions missing from older PHP versions. * * @package PHP * @access private */// Added in PHP 5.0if (!function_exists('http_build_query')) {	function http_build_query($data, $prefix=null, $sep=null) {		return _http_build_query($data, $prefix, $sep);	}}// from php.net (modified by Mark Jaquith to behave like the native PHP5 function)function _http_build_query($data, $prefix=null, $sep=null, $key='', $urlencode=true) {	$ret = array();	foreach ( (array) $data as $k => $v ) {		if ( $urlencode)			$k = urlencode($k);		if ( is_int($k) && $prefix != null )			$k = $prefix.$k;		if ( !empty($key) )			$k = $key . '%5B' . $k . '%5D';		if ( $v === NULL )			continue;		elseif ( $v === FALSE )			$v = '0';		if ( is_array($v) || is_object($v) )			array_push($ret,_http_build_query($v, '', $sep, $k, $urlencode));		elseif ( $urlencode )			array_push($ret, $k.'='.urlencode($v));		else			array_push($ret, $k.'='.$v);	}	if ( NULL === $sep )		$sep = ini_get('arg_separator.output');	return implode($sep, $ret);}if ( !function_exists('_') ) {	function _($string) {		return $string;	}}if (!function_exists('stripos')) {	function stripos($haystack, $needle, $offset = 0) {		return strpos(strtolower($haystack), strtolower($needle), $offset);	}}if ( !function_exists('hash_hmac') ):function hash_hmac($algo, $data, $key, $raw_output = false) {	return _hash_hmac($algo, $data, $key, $raw_output);}endif;function _hash_hmac($algo, $data, $key, $raw_output = false) {	$packs = array('md5' => 'H32', 'sha1' => 'H40');	if ( !isset($packs[$algo]) )		return false;	$pack = $packs[$algo];	if (strlen($key) > 64)		$key = pack($pack, $algo($key));	$key = str_pad($key, 64, chr(0));	$ipad = (substr($key, 0, 64) ^ str_repeat(chr(0x36), 64));	$opad = (substr($key, 0, 64) ^ str_repeat(chr(0x5C), 64));	$hmac = $algo($opad . pack($pack, $algo($ipad . $data)));	if ( $raw_output )		return pack( $pack, $hmac );	return $hmac;}if ( !function_exists('mb_substr') ):	function mb_substr( $str, $start, $length=null, $encoding=null ) {		return _mb_substr($str, $start, $length, $encoding);	}endif;function _mb_substr( $str, $start, $length=null, $encoding=null ) {	// the solution below, works only for utf-8, so in case of a different	// charset, just use built-in substr	$charset = get_option( 'blog_charset' );	if ( !in_array( $charset, array('utf8', 'utf-8', 'UTF8', 'UTF-8') ) ) {		return is_null( $length )? substr( $str, $start ) : substr( $str, $start, $length);	}	// use the regex unicode support to separate the UTF-8 characters into an array	preg_match_all( '/./us', $str, $match );	$chars = is_null( $length )? array_slice( $match[0], $start ) : array_slice( $match[0], $start, $length );	return implode( '', $chars );}if ( !function_exists( 'htmlspecialchars_decode' ) ) {	// Added in PHP 5.1.0	// Error checks from PEAR::PHP_Compat	function htmlspecialchars_decode( $string, $quote_style = ENT_COMPAT )	{		if ( !is_scalar( $string ) ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 1 to be string, ' . gettype( $string ) . ' given', E_USER_WARNING );			return;		}		if ( !is_int( $quote_style ) && $quote_style !== null ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 2 to be integer, ' . gettype( $quote_style ) . ' given', E_USER_WARNING );			return;		}		return wp_specialchars_decode( $string, $quote_style );	}}// For PHP < 5.2.0if ( !function_exists('json_encode') ) {	function json_encode( $string ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		return $wp_json->encodeUnsafe( $string );	}}if ( !function_exists('json_decode') ) {	function json_decode( $string, $assoc_array = false ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		$res = $wp_json->decode( $string );		if ( $assoc_array )			$res = _json_decode_object_helper( $res );		return $res;	}	function _json_decode_object_helper($data) {		if ( is_object($data) )			$data = get_object_vars($data);		return is_array($data) ? array_map(__FUNCTION__, $data) : $data;	}}// pathinfo that fills 'filename' without extension like in PHP 5.2+function pathinfo52($path) {	$parts = pathinfo($path);	if ( !isset($parts['filename']) ) {		$parts['filename'] = substr( $parts['basename'], 0, strrpos($parts['basename'], '.') );		if ( empty($parts['filename']) ) // there's no extension			$parts['filename'] = $parts['basename'];	}	return $parts;}
<?php/** * WordPress scripts and styles default loader. * * Most of the functionality that existed here was moved to * {@link http://backpress.automattic.com/ BackPress}. WordPress themes and * plugins will only be concerned about the filters and actions set in this * file. * * Several constants are used to manage the loading, concatenating and compression of scripts and CSS: * define('SCRIPT_DEBUG', true); loads the development (non-minified) versions of all scripts and CSS, and disables compression and concatenation, * define('CONCATENATE_SCRIPTS', false); disables compression and concatenation of scripts and CSS, * define('COMPRESS_SCRIPTS', false); disables compression of scripts, * define('COMPRESS_CSS', false); disables compression of CSS, * define('ENFORCE_GZIP', true); forces gzip for compression (default is deflate). * * The globals $concatenate_scripts, $compress_scripts and $compress_css can be set by plugins * to temporarily override the above settings. Also a compression test is run once and the result is saved * as option 'can_compress_scripts' (0/1). The test will run again if that option is deleted. * * @package WordPress *//** BackPress: WordPress Dependencies Class */require( ABSPATH . WPINC . '/class.wp-dependencies.php' );/** BackPress: WordPress Scripts Class */require( ABSPATH . WPINC . '/class.wp-scripts.php' );/** BackPress: WordPress Scripts Functions */require( ABSPATH . WPINC . '/functions.wp-scripts.php' );/** BackPress: WordPress Styles Class */require( ABSPATH . WPINC . '/class.wp-styles.php' );/** BackPress: WordPress Styles Functions */require( ABSPATH . WPINC . '/functions.wp-styles.php' );/** * Set up WordPress scripts to load by default for Administration Panels. * * Localizes a few of the scripts. * $scripts->add_data( 'script-handle', 'group', 1 ); queues the script for the footer * * @since 2.6.0 * * @param object $scripts WP_Scripts object. */function wp_default_scripts( &$scripts ) {	if ( !$guessurl = site_url() )		$guessurl = wp_guess_url();	$scripts->base_url = $guessurl;	$scripts->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$scripts->default_version = get_bloginfo( 'version' );	$scripts->default_dirs = array('/wp-admin/js/', '/wp-includes/js/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$scripts->add( 'utils', "/wp-admin/js/utils$suffix.js", false, '20090102' );	$scripts->add( 'common', "/wp-admin/js/common$suffix.js", array('jquery', 'hoverIntent', 'utils'), '20100531' );	$scripts->add_data( 'common', 'group', 1 );	$scripts->localize( 'common', 'commonL10n', array(		'warnDelete' => __("You are about to permanently delete the selected items.\n  'Cancel' to stop, 'OK' to delete."),		'l10n_print_after' => 'try{convertEntities(commonL10n);}catch(e){};'	) );	$scripts->add( 'sack', "/wp-includes/js/tw-sack$suffix.js", false, '1.6.1' );	$scripts->add_data( 'sack', 'group', 1 );	$scripts->add( 'quicktags', "/wp-includes/js/quicktags$suffix.js", false, '20090307' );	$scripts->localize( 'quicktags', 'quicktagsL10n', array(		'quickLinks' => __('(Quick Links)'),		'wordLookup' => __('Enter a word to look up:'),		'dictionaryLookup' => esc_attr(__('Dictionary lookup')),		'lookup' => esc_attr(__('lookup')),		'closeAllOpenTags' => esc_attr(__('Close all open tags')),		'closeTags' => esc_attr(__('close tags')),		'enterURL' => __('Enter the URL'),		'enterImageURL' => __('Enter the URL of the image'),		'enterImageDescription' => __('Enter a description of the image'),		'l10n_print_after' => 'try{convertEntities(quicktagsL10n);}catch(e){};'	) );	$scripts->add( 'colorpicker', "/wp-includes/js/colorpicker$suffix.js", array('prototype'), '3517m' );	$scripts->add( 'editor', "/wp-admin/js/editor$suffix.js", false, '20091124' );	$scripts->add( 'prototype', '/wp-includes/js/prototype.js', false, '1.6.1');	$scripts->add( 'wp-ajax-response', "/wp-includes/js/wp-ajax-response$suffix.js", array('jquery'), '20091119' );	$scripts->add_data( 'wp-ajax-response', 'group', 1 );	$scripts->localize( 'wp-ajax-response', 'wpAjax', array(		'noPerm' => __('You do not have permission to do that.'),		'broken' => __('An unidentified error has occurred.'),		'l10n_print_after' => 'try{convertEntities(wpAjax);}catch(e){};'	) );	$scripts->add( 'autosave', "/wp-includes/js/autosave$suffix.js", array('schedule', 'wp-ajax-response'), '20100410' );	$scripts->add_data( 'autosave', 'group', 1 );	$scripts->add( 'wp-lists', "/wp-includes/js/wp-lists$suffix.js", array('wp-ajax-response'), '20091128' );	$scripts->add_data( 'wp-lists', 'group', 1 );	$scripts->add( 'scriptaculous-root', '/wp-includes/js/scriptaculous/wp-scriptaculous.js', array('prototype'), '1.8.3');	$scripts->add( 'scriptaculous-builder', '/wp-includes/js/scriptaculous/builder.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-dragdrop', '/wp-includes/js/scriptaculous/dragdrop.js', array('scriptaculous-builder', 'scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-effects', '/wp-includes/js/scriptaculous/effects.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-slider', '/wp-includes/js/scriptaculous/slider.js', array('scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-sound', '/wp-includes/js/scriptaculous/sound.js', array( 'scriptaculous-root' ), '1.8.3' );	$scripts->add( 'scriptaculous-controls', '/wp-includes/js/scriptaculous/controls.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous', '', array('scriptaculous-dragdrop', 'scriptaculous-slider', 'scriptaculous-controls'), '1.8.3');	// not used in core, replaced by Jcrop.js	$scripts->add( 'cropper', '/wp-includes/js/crop/cropper.js', array('scriptaculous-dragdrop'), '20070118');	$scripts->add( 'jquery', '/wp-includes/js/jquery/jquery.js', false, '1.4.2');	$scripts->add( 'jquery-ui-core', '/wp-includes/js/jquery/ui.core.js', array('jquery'), '1.7.3' );	$scripts->add_data( 'jquery-ui-core', 'group', 1 );	$scripts->add( 'jquery-ui-tabs', '/wp-includes/js/jquery/ui.tabs.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-tabs', 'group', 1 );	$scripts->add( 'jquery-ui-sortable', '/wp-includes/js/jquery/ui.sortable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-sortable', 'group', 1 );	$scripts->add( 'jquery-ui-draggable', '/wp-includes/js/jquery/ui.draggable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-draggable', 'group', 1 );	$scripts->add( 'jquery-ui-droppable', '/wp-includes/js/jquery/ui.droppable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-droppable', 'group', 1 );	$scripts->add( 'jquery-ui-selectable', '/wp-includes/js/jquery/ui.selectable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-selectable', 'group', 1 );	$scripts->add( 'jquery-ui-resizable', '/wp-includes/js/jquery/ui.resizable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-resizable', 'group', 1 );	$scripts->add( 'jquery-ui-dialog', '/wp-includes/js/jquery/ui.dialog.js', array('jquery-ui-resizable', 'jquery-ui-draggable'), '1.7.3' );	$scripts->add_data( 'jquery-ui-dialog', 'group', 1 );	// deprecated, not used in core, most functionality is included in jQuery 1.3	$scripts->add( 'jquery-form', "/wp-includes/js/jquery/jquery.form$suffix.js", array('jquery'), '2.02m');	$scripts->add_data( 'jquery-form', 'group', 1 );	$scripts->add( 'jquery-color', "/wp-includes/js/jquery/jquery.color$suffix.js", array('jquery'), '2.0-4561m');	$scripts->add_data( 'jquery-color', 'group', 1 );	$scripts->add( 'suggest', "/wp-includes/js/jquery/suggest$suffix.js", array('jquery'), '1.1-20090125');	$scripts->add_data( 'suggest', 'group', 1 );	$scripts->add( 'schedule', '/wp-includes/js/jquery/jquery.schedule.js', array('jquery'), '20m');	$scripts->add_data( 'schedule', 'group', 1 );	$scripts->add( 'jquery-hotkeys', "/wp-includes/js/jquery/jquery.hotkeys$suffix.js", array('jquery'), '0.0.2m' );	$scripts->add_data( 'jquery-hotkeys', 'group', 1 );	$scripts->add( 'jquery-table-hotkeys', "/wp-includes/js/jquery/jquery.table-hotkeys$suffix.js", array('jquery', 'jquery-hotkeys'), '20090102' );	$scripts->add_data( 'jquery-table-hotkeys', 'group', 1 );	$scripts->add( 'thickbox', "/wp-includes/js/thickbox/thickbox.js", array('jquery'), '3.1-20100407');	$scripts->add_data( 'thickbox', 'group', 1 );	$scripts->localize( 'thickbox', 'thickboxL10n', array(			'next' => __('Next &gt;'),			'prev' => __('&lt; Prev'),			'image' => __('Image'),			'of' => __('of'),			'close' => __('Close'),			'noiframes' => __('This feature requires inline frames. You have iframes disabled or your browser does not support them.'),			'l10n_print_after' => 'try{convertEntities(thickboxL10n);}catch(e){};'	) );	$scripts->add( 'jcrop', "/wp-includes/js/jcrop/jquery.Jcrop$suffix.js", array('jquery'), '0.9.8');	$scripts->add( 'swfobject', "/wp-includes/js/swfobject.js", false, '2.2');	$scripts->add( 'swfupload', '/wp-includes/js/swfupload/swfupload.js', false, '2201');	$scripts->add( 'swfupload-swfobject', '/wp-includes/js/swfupload/plugins/swfupload.swfobject.js', array('swfupload', 'swfobject'), '2201');	$scripts->add( 'swfupload-queue', '/wp-includes/js/swfupload/plugins/swfupload.queue.js', array('swfupload'), '2201');	$scripts->add( 'swfupload-speed', '/wp-includes/js/swfupload/plugins/swfupload.speed.js', array('swfupload'), '2201');	if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) {		// queue all SWFUpload scripts that are used by default		$scripts->add( 'swfupload-all', false, array('swfupload', 'swfupload-swfobject', 'swfupload-queue'), '2201');	} else {		$scripts->add( 'swfupload-all', '/wp-includes/js/swfupload/swfupload-all.js', array(), '2201');	}	$scripts->add( 'swfupload-handlers', "/wp-includes/js/swfupload/handlers$suffix.js", array('swfupload-all', 'jquery'), '2201-20100523');	$max_upload_size = ( (int) ( $max_up = @ini_get('upload_max_filesize') ) < (int) ( $max_post = @ini_get('post_max_size') ) ) ? $max_up : $max_post;	if ( empty($max_upload_size) )		$max_upload_size = __('not configured');	// these error messages came from the sample swfupload js, they might need changing.	$scripts->localize( 'swfupload-handlers', 'swfuploadL10n', array(			'queue_limit_exceeded' => __('You have attempted to queue too many files.'),			'file_exceeds_size_limit' => __('This file exceeds the maximum upload size for this site.'),			'zero_byte_file' => __('This file is empty. Please try another.'),			'invalid_filetype' => __('This file type is not allowed. Please try another.'),			'default_error' => __('An error occurred in the upload. Please try again later.'),			'missing_upload_url' => __('There was a configuration error. Please contact the server administrator.'),			'upload_limit_exceeded' => __('You may only upload 1 file.'),			'http_error' => __('HTTP error.'),			'upload_failed' => __('Upload failed.'),			'io_error' => __('IO error.'),			'security_error' => __('Security error.'),			'file_cancelled' => __('File canceled.'),			'upload_stopped' => __('Upload stopped.'),			'dismiss' => __('Dismiss'),			'crunching' => __('Crunching&hellip;'),			'deleted' => __('moved to the trash.'),			'l10n_print_after' => 'try{convertEntities(swfuploadL10n);}catch(e){};',			'error_uploading' => __('&#8220;%s&#8221; has failed to upload due to an error')	) );	$scripts->add( 'comment-reply', "/wp-includes/js/comment-reply$suffix.js", false, '20090102');	$scripts->add( 'json2', "/wp-includes/js/json2$suffix.js", false, '20090817');	$scripts->add( 'imgareaselect', "/wp-includes/js/imgareaselect/jquery.imgareaselect$suffix.js", array('jquery'), '0.9.1' );	$scripts->add_data( 'imgareaselect', 'group', 1 );	if ( is_admin() ) {		$scripts->add( 'ajaxcat', "/wp-admin/js/cat$suffix.js", array( 'wp-lists' ), '20090102' );		$scripts->add_data( 'ajaxcat', 'group', 1 );		$scripts->localize( 'ajaxcat', 'catL10n', array(			'add' => esc_attr(__('Add')),			'how' => __('Separate multiple categories with commas.'),			'l10n_print_after' => 'try{convertEntities(catL10n);}catch(e){};'		) );		$scripts->add( 'admin-categories', "/wp-admin/js/categories$suffix.js", array('wp-lists'), '20091201' );		$scripts->add_data( 'admin-categories', 'group', 1 );		$scripts->add( 'admin-tags', "/wp-admin/js/tags$suffix.js", array('jquery', 'wp-ajax-response'), '20100213' );		$scripts->add_data( 'admin-tags', 'group', 1 );		$scripts->localize( 'admin-tags', 'tagsl10n', array(			'noPerm' => __('You do not have permission to do that.'),			'broken' => __('An unidentified error has occurred.'),			'l10n_print_after' => 'try{convertEntities(tagsl10n);}catch(e){};'		));		$scripts->add( 'admin-custom-fields', "/wp-admin/js/custom-fields$suffix.js", array('wp-lists'), '20090106' );		$scripts->add_data( 'admin-custom-fields', 'group', 1 );		$scripts->add( 'password-strength-meter', "/wp-admin/js/password-strength-meter$suffix.js", array('jquery'), '20100331' );		$scripts->add_data( 'password-strength-meter', 'group', 1 );		$scripts->localize( 'password-strength-meter', 'pwsL10n', array(			'empty' => __('Strength indicator'),			'short' => __('Very weak'),			'bad' => __('Weak'),			/* translators: password strength */			'good' => _x('Medium', 'password strength'),			'strong' => __('Strong'),			'mismatch' => __('Mismatch'),			'l10n_print_after' => 'try{convertEntities(pwsL10n);}catch(e){};'		) );		$scripts->add( 'user-profile', "/wp-admin/js/user-profile$suffix.js", array('jquery'), '20100301' );		$scripts->add_data( 'user-profile', 'group', 1 );		$scripts->add( 'admin-comments', "/wp-admin/js/edit-comments$suffix.js", array('wp-lists', 'jquery-ui-resizable', 'quicktags'), '20100418' );		$scripts->add_data( 'admin-comments', 'group', 1 );		$scripts->localize( 'admin-comments', 'adminCommentsL10n', array(			'hotkeys_highlight_first' => isset($_GET['hotkeys_highlight_first']),			'hotkeys_highlight_last' => isset($_GET['hotkeys_highlight_last'])		) );		$scripts->add( 'xfn', "/wp-admin/js/xfn$suffix.js", array('jquery'), '20100403' );		$scripts->add_data( 'xfn', 'group', 1 );		$scripts->add( 'postbox', "/wp-admin/js/postbox$suffix.js", array('jquery-ui-sortable'), '20091012' );		$scripts->add_data( 'postbox', 'group', 1 );		$scripts->add( 'post', "/wp-admin/js/post$suffix.js", array('suggest', 'wp-lists', 'postbox'), '20100526' );		$scripts->add_data( 'post', 'group', 1 );		$scripts->localize( 'post', 'postL10n', array(			'tagsUsed' =>  __('Tags used on this post:'),			'add' => esc_attr(__('Add')),			'addTag' => esc_attr(__('Add new tag')),			'separate' => __('Separate tags with commas'),			'ok' => __('OK'),			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'publishOn' => __('Publish on:'),			'publishOnFuture' =>  __('Schedule for:'),			'publishOnPast' => __('Published on:'),			'showcomm' => __('Show more comments'),			'endcomm' => __('No more comments found.'),			'publish' => __('Publish'),			'schedule' => __('Schedule'),			'updatePost' => __('Update Post'),			'updatePage' => __('Update Page'),			'savePending' => __('Save as Pending'),			'saveDraft' => __('Save Draft'),			'private' => __('Private'),			'public' => __('Public'),			'publicSticky' => __('Public, Sticky'),			'password' => __('Password Protected'),			'privatelyPublished' => __('Privately Published'),			'published' => __('Published'),			'l10n_print_after' => 'try{convertEntities(postL10n);}catch(e){};'		) );		$scripts->add( 'link', "/wp-admin/js/link$suffix.js", array('wp-lists', 'postbox'), '20090526' );		$scripts->add_data( 'link', 'group', 1 );		$scripts->add( 'comment', "/wp-admin/js/comment$suffix.js", array('jquery'), '20091202' );		$scripts->add_data( 'comment', 'group', 1 );		$scripts->localize( 'comment', 'commentL10n', array(			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'submittedOn' => __('Submitted on:'),			'l10n_print_after' => 'try{convertEntities(commentL10n);}catch(e){};'		) );		$scripts->add( 'admin-gallery', "/wp-admin/js/gallery$suffix.js", array( 'jquery-ui-sortable' ), '20090516' );		$scripts->add( 'media-upload', "/wp-admin/js/media-upload$suffix.js", array( 'thickbox' ), '20091023' );		$scripts->add_data( 'media-upload', 'group', 1 );		$scripts->add( 'admin-widgets', "/wp-admin/js/widgets$suffix.js", array( 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable' ), '20090824' );		$scripts->add_data( 'admin-widgets', 'group', 1 );		$scripts->add( 'word-count', "/wp-admin/js/word-count$suffix.js", array( 'jquery' ), '20090422' );		$scripts->add_data( 'word-count', 'group', 1 );		$scripts->localize( 'word-count', 'wordCountL10n', array(			'count' => __('Word count: %d'),			'l10n_print_after' => 'try{convertEntities(wordCountL10n);}catch(e){};'		));		$scripts->add( 'theme-preview', "/wp-admin/js/theme-preview$suffix.js", array( 'thickbox', 'jquery' ), '20100407' );		$scripts->add_data( 'theme-preview', 'group', 1 );		$scripts->add( 'inline-edit-post', "/wp-admin/js/inline-edit-post$suffix.js", array( 'jquery', 'suggest' ), '20091202' );		$scripts->add_data( 'inline-edit-post', 'group', 1 );		$scripts->localize( 'inline-edit-post', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'ntdeltitle' => __('Remove From Bulk Edit'),			'notitle' => __('(no title)'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'inline-edit-tax', "/wp-admin/js/inline-edit-tax$suffix.js", array( 'jquery' ), '20090623' );		$scripts->add_data( 'inline-edit-tax', 'group', 1 );		$scripts->localize( 'inline-edit-tax', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'plugin-install', "/wp-admin/js/plugin-install$suffix.js", array( 'jquery', 'thickbox' ), '20100407' );		$scripts->add_data( 'plugin-install', 'group', 1 );		$scripts->localize( 'plugin-install', 'plugininstallL10n', array(			'plugin_information' => __('Plugin Information:'),			'ays' => __('Are you sure you want to install this plugin?'),			'l10n_print_after' => 'try{convertEntities(plugininstallL10n);}catch(e){};'		) );		$scripts->add( 'farbtastic', '/wp-admin/js/farbtastic.js', array('jquery'), '1.2' );		$scripts->add( 'dashboard', "/wp-admin/js/dashboard$suffix.js", array( 'jquery', 'admin-comments', 'postbox' ), '20100523' );		$scripts->add_data( 'dashboard', 'group', 1 );		$scripts->add( 'hoverIntent', "/wp-includes/js/hoverIntent$suffix.js", array('jquery'), '20090102' );		$scripts->add_data( 'hoverIntent', 'group', 1 );		$scripts->add( 'list-revisions', "/wp-includes/js/wp-list-revisions$suffix.js", null, '20091223' );		$scripts->add( 'media', "/wp-admin/js/media$suffix.js", array( 'jquery-ui-draggable' ), '20100524' );		$scripts->add_data( 'media', 'group', 1 );		$scripts->add( 'image-edit', "/wp-admin/js/image-edit$suffix.js", array('jquery', 'json2', 'imgareaselect'), '20091111' );		$scripts->add_data( 'image-edit', 'group', 1 );		$scripts->add( 'set-post-thumbnail', "/wp-admin/js/set-post-thumbnail$suffix.js", array( 'jquery' ), '20100518' );		$scripts->add_data( 'set-post-thumbnail', 'group', 1 );		$scripts->localize( 'set-post-thumbnail', 'setPostThumbnailL10n', array(			'setThumbnail' => __( 'Use as featured image' ),			'saving' => __( 'Saving...' ),			'error' => __( 'Could not set that as the thumbnail image. Try a different attachment.' ),			'done' => __( 'Done' )		) );		// Navigation Menus		$scripts->add( 'nav-menu', "/wp-admin/js/nav-menu$suffix.js", false, '20100611' );		$scripts->localize( 'nav-menu', 'navMenuL10n', array(			'noResultsFound' => _x('No results found.', 'search results'),			'warnDeleteMenu' => __( "You are about to permanently delete this menu. \n 'Cancel' to stop, 'OK' to delete." ),			'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		) );		$scripts->add( 'custom-background', "/wp-admin/js/custom-background$suffix.js", array('farbtastic'), '20100531' );		$scripts->add_data( 'custom-background', 'group', 1 );	}}/** * Assign default styles to $styles object. * * Nothing is returned, because the $styles parameter is passed by reference. * Meaning that whatever object is passed will be updated without having to * reassign the variable that was passed back to the same value. This saves * memory. * * Adding default styles is not the only task, it also assigns the base_url * property, the default version, and text direction for the object. * * @since 2.6.0 * * @param object $styles */function wp_default_styles( &$styles ) {	// This checks to see if site_url() returns something and if it does not	// then it assigns $guess_url to wp_guess_url(). Strange format, but it works.	if ( ! $guessurl = site_url() )		$guessurl = wp_guess_url();	$styles->base_url = $guessurl;	$styles->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$styles->default_version = get_bloginfo( 'version' );	$styles->text_direction = function_exists( 'is_rtl' ) && is_rtl() ? 'rtl' : 'ltr';	$styles->default_dirs = array('/wp-admin/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$rtl_styles = array( 'wp-admin', 'global', 'colors', 'colors-fresh', 'colors-classic', 'dashboard', 'ie', 'install', 'login', 'media', 'theme-editor', 'upload', 'widgets', 'press-this', 'plugin-install', 'nav-menu', 'farbtastic' );	// Any rtl stylesheets that don't have a .dev version for ltr	$no_suffix = array( 'farbtastic' );	$styles->add( 'wp-admin', "/wp-admin/css/wp-admin$suffix.css", array(), '20100614' );	$styles->add( 'ie', "/wp-admin/css/ie$suffix.css", array(), '20100610' );	$styles->add_data( 'ie', 'conditional', 'lte IE 7' );	// all colors stylesheets need to have the same query strings (cache manifest compat)	$colors_version = '20100610';	// Register "meta" stylesheet for admin colors. All colors-* style sheets should have the same version string.	$styles->add( 'colors', true, array(), $colors_version );	// do not refer to these directly, the right one is queued by the above "meta" colors handle	$styles->add( 'colors-fresh', "/wp-admin/css/colors-fresh$suffix.css", array(), $colors_version );	$styles->add( 'colors-classic', "/wp-admin/css/colors-classic$suffix.css", array(), $colors_version );	$styles->add( 'ms', "/wp-admin/css/ms$suffix.css", array(), '20100528' );	$styles->add( 'global', "/wp-admin/css/global$suffix.css", array(), '20100108' );	$styles->add( 'media', "/wp-admin/css/media$suffix.css", array(), '20100519' );	$styles->add( 'widgets', "/wp-admin/css/widgets$suffix.css", array(), '20100610' );	$styles->add( 'dashboard', "/wp-admin/css/dashboard$suffix.css", array(), '20100424' );	$styles->add( 'install', "/wp-admin/css/install$suffix.css", array(), '20100605' ); // Readme as well	$styles->add( 'theme-editor', "/wp-admin/css/theme-editor$suffix.css", array(), '20100514' );	$styles->add( 'press-this', "/wp-admin/css/press-this$suffix.css", array(), '20100424' );	$styles->add( 'thickbox', '/wp-includes/js/thickbox/thickbox.css', array(), '20090514' );	$styles->add( 'login', "/wp-admin/css/login$suffix.css", array(), '20100601' );	$styles->add( 'plugin-install', "/wp-admin/css/plugin-install$suffix.css", array(), '20100402' );	$styles->add( 'theme-install', "/wp-admin/css/theme-install$suffix.css", array(), '20100523' );	$styles->add( 'farbtastic', '/wp-admin/css/farbtastic.css', array(), '1.2' );	$styles->add( 'jcrop', '/wp-includes/js/jcrop/jquery.Jcrop.css', array(), '0.9.8' );	$styles->add( 'imgareaselect', '/wp-includes/js/imgareaselect/imgareaselect.css', array(), '0.9.1' );	$styles->add( 'nav-menu', "/wp-admin/css/nav-menu$suffix.css", array(), '20100611' );	foreach ( $rtl_styles as $rtl_style ) {		$styles->add_data( $rtl_style, 'rtl', true );		if ( $suffix && ! in_array( $rtl_style, $no_suffix ) )			$styles->add_data( $rtl_style, 'suffix', $suffix );	}}/** * Reorder JavaScript scripts array to place prototype before jQuery. * * @since 2.3.1 * * @param array $js_array JavaScript scripst array * @return array Reordered array, if needed. */function wp_prototype_before_jquery( $js_array ) {	if ( false === $jquery = array_search( 'jquery', $js_array, true ) )		return $js_array;	if ( false === $prototype = array_search( 'prototype', $js_array, true ) )		return $js_array;	if ( $prototype < $jquery )		return $js_array;	unset($js_array[$prototype]);	array_splice( $js_array, $jquery, 0, 'prototype' );	return $js_array;}/** * Load localized data on print rather than initialization. * * These localizations require information that may not be loaded even by init. * * @since 2.5.0 */function wp_just_in_time_script_localization() {	wp_localize_script( 'autosave', 'autosaveL10n', array(		'autosaveInterval' => AUTOSAVE_INTERVAL,		'previewPageText' => __('Preview this Page'),		'previewPostText' => __('Preview this Post'),		'requestFile' => admin_url('admin-ajax.php'),		'savingText' => __('Saving Draft&#8230;'),		'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		'l10n_print_after' => 'try{convertEntities(autosaveL10n);}catch(e){};'	) );}/** * Administration Panel CSS for changing the styles. * * If installing the 'wp-admin/' directory will be replaced with './'. * * The $_wp_admin_css_colors global manages the Administration Panels CSS * stylesheet that is loaded. The option that is set is 'admin_color' and is the * color and key for the array. The value for the color key is an object with * a 'url' parameter that has the URL path to the CSS file. * * The query from $src parameter will be appended to the URL that is given from * the $_wp_admin_css_colors array value URL. * * @since 2.6.0 * @uses $_wp_admin_css_colors * * @param string $src Source URL. * @param string $handle Either 'colors' or 'colors-rtl'. * @return string URL path to CSS stylesheet for Administration Panels. */function wp_style_loader_src( $src, $handle ) {	if ( defined('WP_INSTALLING') )		return preg_replace( '#^wp-admin/#', './', $src );	if ( 'colors' == $handle || 'colors-rtl' == $handle ) {		global $_wp_admin_css_colors;		$color = get_user_option('admin_color');		if ( empty($color) || !isset($_wp_admin_css_colors[$color]) )			$color = 'fresh';		$color = $_wp_admin_css_colors[$color];		$parsed = parse_url( $src );		$url = $color->url;		if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG )			$url = preg_replace('/.css$|.css(?=\?)/', '.dev.css', $url);		if ( isset($parsed['query']) && $parsed['query'] ) {			wp_parse_str( $parsed['query'], $qv );			$url = add_query_arg( $qv, $url );		}		return $url;	}	return $src;}/** * Prints the script queue in the HTML head on admin pages. * * Postpones the scripts that were queued for the footer. * print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 * @see wp_print_scripts() */function print_head_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_head_items();	if ( apply_filters('print_head_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}/** * Prints the scripts that were queued for the footer on admin pages. * * @since 2.8 */function print_footer_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_footer_scripts') )		do_action('wp_print_footer_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // No need to run if not instantiated.	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_footer_items();	if ( apply_filters('print_footer_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}function _print_scripts() {	global $wp_scripts, $compress_scripts;	$zip = $compress_scripts ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	if ( !empty($wp_scripts->concat) ) {		if ( !empty($wp_scripts->print_code) ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $wp_scripts->print_code;			echo "/* ]]> */\n";			echo "</script>\n";		}		$ver = md5("$wp_scripts->concat_version");		$src = $wp_scripts->base_url . "/wp-admin/load-scripts.php?c={$zip}&load=" . trim($wp_scripts->concat, ', ') . "&ver=$ver";		echo "<script type='text/javascript' src='" . esc_attr($src) . "'></script>\n";	}	if ( !empty($wp_scripts->print_html) )		echo $wp_scripts->print_html;}/** * Prints the script queue in the HTML head on the front end. * * Postpones the scripts that were queued for the footer. * wp_print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 */function wp_print_head_scripts() {	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // no need to run if nothing is queued	return print_head_scripts();}/** * Prints the scripts that were queued for the footer on the front end. * * @since 2.8 */function wp_print_footer_scripts() {	return print_footer_scripts();}/** * Wrapper for do_action('wp_enqueue_scripts') * * Allows plugins to queue scripts for the front end using wp_enqueue_script(). * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available. * * @since 2.8 */function wp_enqueue_scripts() {	do_action('wp_enqueue_scripts');}function print_admin_styles() {	global $wp_styles, $concatenate_scripts, $compress_css;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	script_concat_settings();	$wp_styles->do_concat = $concatenate_scripts;	$zip = $compress_css ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	$wp_styles->do_items(false);	if ( apply_filters('print_admin_styles', true) ) {		if ( !empty($wp_styles->concat) ) {			$dir = $wp_styles->text_direction;			$ver = md5("$wp_styles->concat_version{$dir}");			$href = $wp_styles->base_url . "/wp-admin/load-styles.php?c={$zip}&dir={$dir}&load=" . trim($wp_styles->concat, ', ') . "&ver=$ver";			echo "<link rel='stylesheet' href='" . esc_attr($href) . "' type='text/css' media='all' />\n";		}		if ( !empty($wp_styles->print_html) )			echo $wp_styles->print_html;	}	$wp_styles->do_concat = false;	$wp_styles->concat = $wp_styles->concat_version = $wp_styles->print_html = '';	return $wp_styles->done;}function script_concat_settings() {	global $concatenate_scripts, $compress_scripts, $compress_css;	$compressed_output = ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') );	if ( ! isset($concatenate_scripts) ) {		$concatenate_scripts = defined('CONCATENATE_SCRIPTS') ? CONCATENATE_SCRIPTS : true;		if ( ! is_admin() || ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) )			$concatenate_scripts = false;	}	if ( ! isset($compress_scripts) ) {		$compress_scripts = defined('COMPRESS_SCRIPTS') ? COMPRESS_SCRIPTS : true;		if ( $compress_scripts && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_scripts = false;	}	if ( ! isset($compress_css) ) {		$compress_css = defined('COMPRESS_CSS') ? COMPRESS_CSS : true;		if ( $compress_css && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_css = false;	}}add_action( 'wp_default_scripts', 'wp_default_scripts' );add_filter( 'wp_print_scripts', 'wp_just_in_time_script_localization' );add_filter( 'print_scripts_array', 'wp_prototype_before_jquery' );add_action( 'wp_default_styles', 'wp_default_styles' );add_filter( 'style_loader_src', 'wp_style_loader_src', 10, 2 );
<?php/** * Administration Functions * * This file is deprecated, use 'wp-admin/includes/admin.php' instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/admin.php' );/** WordPress Administration API: Includes all Administration functions. */require_once(ABSPATH . 'wp-admin/includes/admin.php');?>
<?php/** * Update/Install Plugin/Theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');include_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';if ( isset($_GET['action']) ) {	$plugin = isset($_REQUEST['plugin']) ? trim($_REQUEST['plugin']) : '';	$theme = isset($_REQUEST['theme']) ? urldecode($_REQUEST['theme']) : '';	$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';	if ( 'update-selected' == $action ) {		if ( ! current_user_can( 'update_plugins' ) )			wp_die( __( 'You do not have sufficient permissions to update plugins for this site.' ) );		check_admin_referer( 'bulk-update-plugins' );		if ( isset( $_GET['plugins'] ) )			$plugins = explode( ',', stripslashes($_GET['plugins']) );		elseif ( isset( $_POST['checked'] ) )			$plugins = (array) $_POST['checked'];		else			$plugins = array();		$plugins = array_map('urldecode', $plugins);		$url = 'update.php?action=update-selected&amp;plugins=' . urlencode(implode(',', $plugins));		$nonce = 'bulk-update-plugins';		require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );		wp_enqueue_script('jquery');		iframe_header();		$upgrader = new Plugin_Upgrader( new Bulk_Plugin_Upgrader_Skin( compact( 'nonce', 'url' ) ) );		$upgrader->bulk_upgrade( $plugins );		iframe_footer();	} elseif ( 'upgrade-plugin' == $action ) {		if ( ! current_user_can('update_plugins') )			wp_die(__('You do not have sufficient permissions to update plugins for this site.'));		check_admin_referer('upgrade-plugin_' . $plugin);		$title = __('Upgrade Plugin');		$parent_file = 'plugins.php';		$submenu_file = 'plugins.php';		require_once('./admin-header.php');		$nonce = 'upgrade-plugin_' . $plugin;		$url = 'update.php?action=upgrade-plugin&plugin=' . $plugin;		$upgrader = new Plugin_Upgrader( new Plugin_Upgrader_Skin( compact('title', 'nonce', 'url', 'plugin') ) );		$upgrader->upgrade($plugin);		include('./admin-footer.php');	} elseif ('activate-plugin' == $action ) {		if ( ! current_user_can('update_plugins') )			wp_die(__('You do not have sufficient permissions to update plugins for this site.'));		check_admin_referer('activate-plugin_' . $plugin);		if ( ! isset($_GET['failure']) && ! isset($_GET['success']) ) {			wp_redirect( 'update.php?action=activate-plugin&failure=true&plugin=' . $plugin . '&_wpnonce=' . $_GET['_wpnonce'] );			activate_plugin( $plugin, '', ! empty( $_GET['networkwide'] ) );			wp_redirect( 'update.php?action=activate-plugin&success=true&plugin=' . $plugin . '&_wpnonce=' . $_GET['_wpnonce'] );			die();		}		iframe_header( __('Plugin Reactivation'), true );		if ( isset($_GET['success']) )			echo '<p>' . __('Plugin reactivated successfully.') . '</p>';		if ( isset($_GET['failure']) ){			echo '<p>' . __('Plugin failed to reactivate due to a fatal error.') . '</p>';			if ( defined('E_RECOVERABLE_ERROR') )				error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);			else				error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			include(WP_PLUGIN_DIR . '/' . $plugin);		}		iframe_footer();	} elseif ( 'install-plugin' == $action ) {		if ( ! current_user_can('install_plugins') )			wp_die(__('You do not have sufficient permissions to install plugins for this site.'));		include_once ABSPATH . 'wp-admin/includes/plugin-install.php'; //for plugins_api..		check_admin_referer('install-plugin_' . $plugin);		$api = plugins_api('plugin_information', array('slug' => $plugin, 'fields' => array('sections' => false) ) ); //Save on a bit of bandwidth.		if ( is_wp_error($api) )	 		wp_die($api);		$title = __('Plugin Install');		$parent_file = 'plugins.php';		$submenu_file = 'plugin-install.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Plugin: %s'), $api->name . ' ' . $api->version );		$nonce = 'install-plugin_' . $plugin;		$url = 'update.php?action=install-plugin&plugin=' . $plugin;		if ( isset($_GET['from']) )			$url .= '&from=' . urlencode(stripslashes($_GET['from']));		$type = 'web'; //Install plugin type, From Web or an Upload.		$upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact('title', 'url', 'nonce', 'plugin', 'api') ) );		$upgrader->install($api->download_link);		include('./admin-footer.php');	} elseif ( 'upload-plugin' == $action ) {		if ( ! current_user_can('install_plugins') )			wp_die(__('You do not have sufficient permissions to install plugins for this site.'));		check_admin_referer('plugin-upload');		$file_upload = new File_Upload_Upgrader('pluginzip', 'package');		$title = __('Upload Plugin');		$parent_file = 'plugins.php';		$submenu_file = 'plugin-install.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Plugin from uploaded file: %s'), basename( $file_upload->filename ) );		$nonce = 'plugin-upload';		$url = add_query_arg(array('package' => $file_upload->filename ), 'update.php?action=upload-plugin');		$type = 'upload'; //Install plugin type, From Web or an Upload.		$upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact('type', 'title', 'nonce', 'url') ) );		$upgrader->install( $file_upload->package );		include('./admin-footer.php');	} elseif ( 'upgrade-theme' == $action ) {		if ( ! current_user_can('update_themes') )			wp_die(__('You do not have sufficient permissions to update themes for this site.'));		check_admin_referer('upgrade-theme_' . $theme);		add_thickbox();		wp_enqueue_script('theme-preview');		$title = __('Upgrade Theme');		$parent_file = 'themes.php';		$submenu_file = 'themes.php';		require_once('./admin-header.php');		$nonce = 'upgrade-theme_' . $theme;		$url = 'update.php?action=upgrade-theme&theme=' . $theme;		$upgrader = new Theme_Upgrader( new Theme_Upgrader_Skin( compact('title', 'nonce', 'url', 'theme') ) );		$upgrader->upgrade($theme);		include('./admin-footer.php');	} elseif ( 'update-selected-themes' == $action ) {		if ( ! current_user_can( 'update_themes' ) )			wp_die( __( 'You do not have sufficient permissions to update themes for this site.' ) );		check_admin_referer( 'bulk-update-themes' );		if ( isset( $_GET['themes'] ) )			$themes = explode( ',', stripslashes($_GET['themes']) );		elseif ( isset( $_POST['checked'] ) )			$themes = (array) $_POST['checked'];		else			$themes = array();		$themes = array_map('urldecode', $themes);		$url = 'update.php?action=update-selected-themes&amp;themes=' . urlencode(implode(',', $themes));		$nonce = 'bulk-update-themes';		require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );		wp_enqueue_script('jquery');		iframe_header();		$upgrader = new Theme_Upgrader( new Bulk_Theme_Upgrader_Skin( compact( 'nonce', 'url' ) ) );		$upgrader->bulk_upgrade( $themes );		iframe_footer();	} elseif ( 'install-theme' == $action ) {		if ( ! current_user_can('install_themes') )			wp_die(__('You do not have sufficient permissions to install themes for this site.'));		include_once ABSPATH . 'wp-admin/includes/theme-install.php'; //for themes_api..		check_admin_referer('install-theme_' . $theme);		$api = themes_api('theme_information', array('slug' => $theme, 'fields' => array('sections' => false) ) ); //Save on a bit of bandwidth.		if ( is_wp_error($api) )	 		wp_die($api);		add_thickbox();		wp_enqueue_script('theme-preview');		$title = __('Install Themes');		$parent_file = 'themes.php';		$submenu_file = 'themes.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Theme: %s'), $api->name . ' ' . $api->version );		$nonce = 'install-theme_' . $theme;		$url = 'update.php?action=install-theme&theme=' . $theme;		$type = 'web'; //Install theme type, From Web or an Upload.		$upgrader = new Theme_Upgrader( new Theme_Installer_Skin( compact('title', 'url', 'nonce', 'plugin', 'api') ) );		$upgrader->install($api->download_link);		include('./admin-footer.php');	} elseif ( 'upload-theme' == $action ) {		if ( ! current_user_can('install_themes') )			wp_die(__('You do not have sufficient permissions to install themes for this site.'));		check_admin_referer('theme-upload');		$file_upload = new File_Upload_Upgrader('themezip', 'package');		$title = __('Upload Theme');		$parent_file = 'themes.php';		$submenu_file = 'theme-install.php';		add_thickbox();		wp_enqueue_script('theme-preview');		require_once('./admin-header.php');		$title = sprintf( __('Installing Theme from uploaded file: %s'), basename( $file_upload->filename ) );		$nonce = 'theme-upload';		$url = add_query_arg(array('package' => $file_upload->filename), 'update.php?action=upload-theme');		$type = 'upload'; //Install plugin type, From Web or an Upload.		$upgrader = new Theme_Upgrader( new Theme_Installer_Skin( compact('type', 'title', 'nonce', 'url') ) );		$upgrader->install( $file_upload->package );		include('./admin-footer.php');	} else {		do_action('update-custom_' . $action);	}}
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
<?php/** * Loads the WordPress environment and template. * * @package WordPress */if ( !isset($wp_did_header) ) {	$wp_did_header = true;	require_once( dirname(__FILE__) . '/wp-load.php' );	wp();	require_once( ABSPATH . WPINC . '/template-loader.php' );}?>
<?php/** * Creates the password cookie and redirects back to where the * visitor was before. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php');if ( get_magic_quotes_gpc() )	$_POST['post_password'] = stripslashes($_POST['post_password']);// 10 dayssetcookie('wp-postpass_' . COOKIEHASH, $_POST['post_password'], time() + 864000, COOKIEPATH);wp_safe_redirect(wp_get_referer());?>
<?php/** * The template for displaying 404 pages (Not Found). * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>	<div id="container">		<div id="content" role="main">			<div id="post-0" class="post error404 not-found">				<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>				<div class="entry-content">					<p><?php _e( 'Apologies, but the page you requested could not be found. Perhaps searching will help.', 'twentyten' ); ?></p>					<?php get_search_form(); ?>				</div><!-- .entry-content -->			</div><!-- #post-0 -->		</div><!-- #content -->	</div><!-- #container -->	<script type="text/javascript">		// focus on search field after it has loaded		document.getElementById('s') && document.getElementById('s').focus();	</script><?php get_footer(); ?>
<?php/** * MagpieRSS: a simple RSS integration tool * * A compiled file for RSS syndication * * @author Kellan Elliott-McCrea <kellan@protest.net> * @version 0.51 * @license GPL * * @package External * @subpackage MagpieRSS *//** * Deprecated. Use SimplePie (class-simplepie.php) instead. */_deprecated_file( basename( __FILE__ ), '3.0', WPINC . '/class-simplepie.php' );/* * Hook to use another RSS object instead of MagpieRSS */do_action('load_feed_engine');/** RSS feed constant. */define('RSS', 'RSS');define('ATOM', 'Atom');define('MAGPIE_USER_AGENT', 'WordPress/' . $GLOBALS['wp_version']);class MagpieRSS {	var $parser;	var $current_item	= array();	// item currently being parsed	var $items			= array();	// collection of parsed items	var $channel		= array();	// hash of channel fields	var $textinput		= array();	var $image			= array();	var $feed_type;	var $feed_version;	// parser variables	var $stack				= array(); // parser stack	var $inchannel			= false;	var $initem 			= false;	var $incontent			= false; // if in Atom <content mode="xml"> field	var $intextinput		= false;	var $inimage 			= false;	var $current_field		= '';	var $current_namespace	= false;	//var $ERROR = "";	var $_CONTENT_CONSTRUCTS = array('content', 'summary', 'info', 'title', 'tagline', 'copyright');	function MagpieRSS ($source) {		# if PHP xml isn't compiled in, die		#		if ( !function_exists('xml_parser_create') )			trigger_error( "Failed to load PHP's XML Extension. http://www.php.net/manual/en/ref.xml.php" );		$parser = @xml_parser_create();		if ( !is_resource($parser) )			trigger_error( "Failed to create an instance of PHP's XML parser. http://www.php.net/manual/en/ref.xml.php");		$this->parser = $parser;		# pass in parser, and a reference to this object		# set up handlers		#		xml_set_object( $this->parser, $this );		xml_set_element_handler($this->parser,				'feed_start_element', 'feed_end_element' );		xml_set_character_data_handler( $this->parser, 'feed_cdata' );		$status = xml_parse( $this->parser, $source );		if (! $status ) {			$errorcode = xml_get_error_code( $this->parser );			if ( $errorcode != XML_ERROR_NONE ) {				$xml_error = xml_error_string( $errorcode );				$error_line = xml_get_current_line_number($this->parser);				$error_col = xml_get_current_column_number($this->parser);				$errormsg = "$xml_error at line $error_line, column $error_col";				$this->error( $errormsg );			}		}		xml_parser_free( $this->parser );		$this->normalize();	}	function feed_start_element($p, $element, &$attrs) {		$el = $element = strtolower($element);		$attrs = array_change_key_case($attrs, CASE_LOWER);		// check for a namespace, and split if found		$ns	= false;		if ( strpos( $element, ':' ) ) {			list($ns, $el) = split( ':', $element, 2);		}		if ( $ns and $ns != 'rdf' ) {			$this->current_namespace = $ns;		}		# if feed type isn't set, then this is first element of feed		# identify feed from root element		#		if (!isset($this->feed_type) ) {			if ( $el == 'rdf' ) {				$this->feed_type = RSS;				$this->feed_version = '1.0';			}			elseif ( $el == 'rss' ) {				$this->feed_type = RSS;				$this->feed_version = $attrs['version'];			}			elseif ( $el == 'feed' ) {				$this->feed_type = ATOM;				$this->feed_version = $attrs['version'];				$this->inchannel = true;			}			return;		}		if ( $el == 'channel' )		{			$this->inchannel = true;		}		elseif ($el == 'item' or $el == 'entry' )		{			$this->initem = true;			if ( isset($attrs['rdf:about']) ) {				$this->current_item['about'] = $attrs['rdf:about'];			}		}		// if we're in the default namespace of an RSS feed,		//  record textinput or image fields		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'textinput' )		{			$this->intextinput = true;		}		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'image' )		{			$this->inimage = true;		}		# handle atom content constructs		elseif ( $this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			// avoid clashing w/ RSS mod_content			if ($el == 'content' ) {				$el = 'atom_content';			}			$this->incontent = $el;		}		// if inside an Atom content construct (e.g. content or summary) field treat tags as text		elseif ($this->feed_type == ATOM and $this->incontent )		{			// if tags are inlined, then flatten			$attrs_str = join(' ',					array_map(array('MagpieRSS', 'map_attrs'),					array_keys($attrs),					array_values($attrs) ) );			$this->append_content( "<$element $attrs_str>"  );			array_unshift( $this->stack, $el );		}		// Atom support many links per containging element.		// Magpie treats link elements of type rel='alternate'		// as being equivalent to RSS's simple link element.		//		elseif ($this->feed_type == ATOM and $el == 'link' )		{			if ( isset($attrs['rel']) and $attrs['rel'] == 'alternate' )			{				$link_el = 'link';			}			else {				$link_el = 'link_' . $attrs['rel'];			}			$this->append($link_el, $attrs['href']);		}		// set stack[0] to current element		else {			array_unshift($this->stack, $el);		}	}	function feed_cdata ($p, $text) {		if ($this->feed_type == ATOM and $this->incontent)		{			$this->append_content( $text );		}		else {			$current_el = join('_', array_reverse($this->stack));			$this->append($current_el, $text);		}	}	function feed_end_element ($p, $el) {		$el = strtolower($el);		if ( $el == 'item' or $el == 'entry' )		{			$this->items[] = $this->current_item;			$this->current_item = array();			$this->initem = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'textinput' )		{			$this->intextinput = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'image' )		{			$this->inimage = false;		}		elseif ($this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			$this->incontent = false;		}		elseif ($el == 'channel' or $el == 'feed' )		{			$this->inchannel = false;		}		elseif ($this->feed_type == ATOM and $this->incontent  ) {			// balance tags properly			// note:  i don't think this is actually neccessary			if ( $this->stack[0] == $el )			{				$this->append_content("</$el>");			}			else {				$this->append_content("<$el />");			}			array_shift( $this->stack );		}		else {			array_shift( $this->stack );		}		$this->current_namespace = false;	}	function concat (&$str1, $str2="") {		if (!isset($str1) ) {			$str1="";		}		$str1 .= $str2;	}	function append_content($text) {		if ( $this->initem ) {			$this->concat( $this->current_item[ $this->incontent ], $text );		}		elseif ( $this->inchannel ) {			$this->concat( $this->channel[ $this->incontent ], $text );		}	}	// smart append - field and namespace aware	function append($el, $text) {		if (!$el) {			return;		}		if ( $this->current_namespace )		{			if ( $this->initem ) {				$this->concat(					$this->current_item[ $this->current_namespace ][ $el ], $text);			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $this->current_namespace][ $el ], $text );			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $this->current_namespace][ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $this->current_namespace ][ $el ], $text );			}		}		else {			if ( $this->initem ) {				$this->concat(					$this->current_item[ $el ], $text);			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $el ], $text );			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $el ], $text );			}		}	}	function normalize () {		// if atom populate rss fields		if ( $this->is_atom() ) {			$this->channel['descripton'] = $this->channel['tagline'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['summary']) )					$item['description'] = $item['summary'];				if ( isset($item['atom_content']))					$item['content']['encoded'] = $item['atom_content'];				$this->items[$i] = $item;			}		}		elseif ( $this->is_rss() ) {			$this->channel['tagline'] = $this->channel['description'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['description']))					$item['summary'] = $item['description'];				if ( isset($item['content']['encoded'] ) )					$item['atom_content'] = $item['content']['encoded'];				$this->items[$i] = $item;			}		}	}	function is_rss () {		if ( $this->feed_type == RSS ) {			return $this->feed_version;		}		else {			return false;		}	}	function is_atom() {		if ( $this->feed_type == ATOM ) {			return $this->feed_version;		}		else {			return false;		}	}	function map_attrs($k, $v) {		return "$k=\"$v\"";	}	function error( $errormsg, $lvl = E_USER_WARNING ) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		} else {			error_log( $errormsg, 0);		}	}}if ( !function_exists('fetch_rss') ) :/** * Build Magpie object based on RSS from URL. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve feed * @return bool|MagpieRSS false on failure or MagpieRSS object on success. */function fetch_rss ($url) {	// initialize constants	init();	if ( !isset($url) ) {		// error("fetch_rss called without a url");		return false;	}	// if cache is disabled	if ( !MAGPIE_CACHE_ON ) {		// fetch file, and parse it		$resp = _fetch_remote_file( $url );		if ( is_success( $resp->status ) ) {			return _response_to_rss( $resp );		}		else {			// error("Failed to fetch $url and cache is off");			return false;		}	}	// else cache is ON	else {		// Flow		// 1. check cache		// 2. if there is a hit, make sure its fresh		// 3. if cached obj fails freshness check, fetch remote		// 4. if remote fails, return stale object, or error		$cache = new RSSCache( MAGPIE_CACHE_DIR, MAGPIE_CACHE_AGE );		if (MAGPIE_DEBUG and $cache->ERROR) {			debug($cache->ERROR, E_USER_WARNING);		}		$cache_status 	 = 0;		// response of check_cache		$request_headers = array(); // HTTP headers to send with fetch		$rss 			 = 0;		// parsed RSS object		$errormsg		 = 0;		// errors, if any		if (!$cache->ERROR) {			// return cache HIT, MISS, or STALE			$cache_status = $cache->check_cache( $url );		}		// if object cached, and cache is fresh, return cached obj		if ( $cache_status == 'HIT' ) {			$rss = $cache->get( $url );			if ( isset($rss) and $rss ) {				$rss->from_cache = 1;				if ( MAGPIE_DEBUG > 1) {				debug("MagpieRSS: Cache HIT", E_USER_NOTICE);			}				return $rss;			}		}		// else attempt a conditional get		// set up headers		if ( $cache_status == 'STALE' ) {			$rss = $cache->get( $url );			if ( isset($rss->etag) and $rss->last_modified ) {				$request_headers['If-None-Match'] = $rss->etag;				$request_headers['If-Last-Modified'] = $rss->last_modified;			}		}		$resp = _fetch_remote_file( $url, $request_headers );		if (isset($resp) and $resp) {			if ($resp->status == '304' ) {				// we have the most current copy				if ( MAGPIE_DEBUG > 1) {					debug("Got 304 for $url");				}				// reset cache on 304 (at minutillo insistent prodding)				$cache->set($url, $rss);				return $rss;			}			elseif ( is_success( $resp->status ) ) {				$rss = _response_to_rss( $resp );				if ( $rss ) {					if (MAGPIE_DEBUG > 1) {						debug("Fetch successful");					}					// add object to cache					$cache->set( $url, $rss );					return $rss;				}			}			else {				$errormsg = "Failed to fetch $url. ";				if ( $resp->error ) {					# compensate for Snoopy's annoying habbit to tacking					# on '\n'					$http_error = substr($resp->error, 0, -2);					$errormsg .= "(HTTP Error: $http_error)";				}				else {					$errormsg .=  "(HTTP Response: " . $resp->response_code .')';				}			}		}		else {			$errormsg = "Unable to retrieve RSS file for unknown reasons.";		}		// else fetch failed		// attempt to return cached object		if ($rss) {			if ( MAGPIE_DEBUG ) {				debug("Returning STALE object for $url");			}			return $rss;		}		// else we totally failed		// error( $errormsg );		return false;	} // end if ( !MAGPIE_CACHE_ON ) {} // end fetch_rss()endif;/** * Retrieve URL headers and content using WP HTTP Request API. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve * @param array $headers Optional. Headers to send to the URL. * @return Snoopy style response */function _fetch_remote_file($url, $headers = "" ) {	$resp = wp_remote_request($url, array('headers' => $headers, 'timeout' => MAGPIE_FETCH_TIME_OUT));	if ( is_wp_error($resp) ) {		$error = array_shift($resp->errors);		$resp = new stdClass;		$resp->status = 500;		$resp->response_code = 500;		$resp->error = $error[0] . "\n"; //\n = Snoopy compatibility		return $resp;	}	// Snoopy returns headers unprocessed.	// Also note, WP_HTTP lowercases all keys, Snoopy did not.	$return_headers = array();	foreach ( $resp['headers'] as $key => $value ) {		if ( !is_array($value) ) {			$return_headers[] = "$key: $value";		} else {			foreach ( $value as $v )				$return_headers[] = "$key: $v";		}	}	$response = new stdClass;	$response->status = $resp['response']['code'];	$response->response_code = $resp['response']['code'];	$response->headers = $return_headers;	$response->results = $resp['body'];	return $response;}/** * Retrieve * * @since unknown * @package External * @subpackage MagpieRSS * * @param unknown_type $resp * @return unknown */function _response_to_rss ($resp) {	$rss = new MagpieRSS( $resp->results );	// if RSS parsed successfully	if ( $rss && (!isset($rss->ERROR) || !$rss->ERROR) ) {		// find Etag, and Last-Modified		foreach( (array) $resp->headers as $h) {			// 2003-03-02 - Nicola Asuni (www.tecnick.com) - fixed bug "Undefined offset: 1"			if (strpos($h, ": ")) {				list($field, $val) = explode(": ", $h, 2);			}			else {				$field = $h;				$val = "";			}			if ( $field == 'etag' ) {				$rss->etag = $val;			}			if ( $field == 'last-modified' ) {				$rss->last_modified = $val;			}		}		return $rss;	} // else construct error message	else {		$errormsg = "Failed to parse RSS file.";		if ($rss) {			$errormsg .= " (" . $rss->ERROR . ")";		}		// error($errormsg);		return false;	} // end if ($rss and !$rss->error)}/** * Set up constants with default values, unless user overrides. * * @since unknown * @package External * @subpackage MagpieRSS */function init () {	if ( defined('MAGPIE_INITALIZED') ) {		return;	}	else {		define('MAGPIE_INITALIZED', 1);	}	if ( !defined('MAGPIE_CACHE_ON') ) {		define('MAGPIE_CACHE_ON', 1);	}	if ( !defined('MAGPIE_CACHE_DIR') ) {		define('MAGPIE_CACHE_DIR', './cache');	}	if ( !defined('MAGPIE_CACHE_AGE') ) {		define('MAGPIE_CACHE_AGE', 60*60); // one hour	}	if ( !defined('MAGPIE_CACHE_FRESH_ONLY') ) {		define('MAGPIE_CACHE_FRESH_ONLY', 0);	}		if ( !defined('MAGPIE_DEBUG') ) {		define('MAGPIE_DEBUG', 0);	}	if ( !defined('MAGPIE_USER_AGENT') ) {		$ua = 'WordPress/' . $GLOBALS['wp_version'];		if ( MAGPIE_CACHE_ON ) {			$ua = $ua . ')';		}		else {			$ua = $ua . '; No cache)';		}		define('MAGPIE_USER_AGENT', $ua);	}	if ( !defined('MAGPIE_FETCH_TIME_OUT') ) {		define('MAGPIE_FETCH_TIME_OUT', 2);	// 2 second timeout	}	// use gzip encoding to fetch rss files if supported?	if ( !defined('MAGPIE_USE_GZIP') ) {		define('MAGPIE_USE_GZIP', true);	}}function is_info ($sc) {	return $sc >= 100 && $sc < 200;}function is_success ($sc) {	return $sc >= 200 && $sc < 300;}function is_redirect ($sc) {	return $sc >= 300 && $sc < 400;}function is_error ($sc) {	return $sc >= 400 && $sc < 600;}function is_client_error ($sc) {	return $sc >= 400 && $sc < 500;}function is_server_error ($sc) {	return $sc >= 500 && $sc < 600;}class RSSCache {	var $BASE_CACHE;	// where the cache files are stored	var $MAX_AGE	= 43200;  		// when are files stale, default twelve hours	var $ERROR 		= '';			// accumulate error messages	function RSSCache ($base='', $age='') {		$this->BASE_CACHE = WP_CONTENT_DIR . '/cache';		if ( $base ) {			$this->BASE_CACHE = $base;		}		if ( $age ) {			$this->MAX_AGE = $age;		}	}/*=======================================================================*\	Function:	set	Purpose:	add an item to the cache, keyed on url	Input:		url from wich the rss file was fetched	Output:		true on sucess\*=======================================================================*/	function set ($url, $rss) {		$cache_option = 'rss_' . $this->file_name( $url );		set_transient($cache_option, $rss, $this->MAX_AGE);		return $cache_option;	}/*=======================================================================*\	Function:	get	Purpose:	fetch an item from the cache	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function get ($url) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( ! $rss = get_transient( $cache_option ) ) {			$this->debug(				"Cache doesn't contain: $url (cache option: $cache_option)"			);			return 0;		}		return $rss;	}/*=======================================================================*\	Function:	check_cache	Purpose:	check a url for membership in the cache				and whether the object is older then MAX_AGE (ie. STALE)	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function check_cache ( $url ) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( get_transient($cache_option) ) {			// object exists and is current				return 'HIT';		} else {			// object does not exist			return 'MISS';		}	}/*=======================================================================*\	Function:	serialize\*=======================================================================*/	function serialize ( $rss ) {		return serialize( $rss );	}/*=======================================================================*\	Function:	unserialize\*=======================================================================*/	function unserialize ( $data ) {		return unserialize( $data );	}/*=======================================================================*\	Function:	file_name	Purpose:	map url to location in cache	Input:		url from wich the rss file was fetched	Output:		a file name\*=======================================================================*/	function file_name ($url) {		return md5( $url );	}/*=======================================================================*\	Function:	error	Purpose:	register error\*=======================================================================*/	function error ($errormsg, $lvl=E_USER_WARNING) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		$this->ERROR = $errormsg;		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		}		else {			error_log( $errormsg, 0);		}	}			function debug ($debugmsg, $lvl=E_USER_NOTICE) {		if ( MAGPIE_DEBUG ) {			$this->error("MagpieRSS [debug] $debugmsg", $lvl);		}	}}if ( !function_exists('parse_w3cdtf') ) :function parse_w3cdtf ( $date_str ) {	# regex to match wc3dtf	$pat = "/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/";	if ( preg_match( $pat, $date_str, $match ) ) {		list( $year, $month, $day, $hours, $minutes, $seconds) =			array( $match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);		# calc epoch for current date assuming GMT		$epoch = gmmktime( $hours, $minutes, $seconds, $month, $day, $year);		$offset = 0;		if ( $match[11] == 'Z' ) {			# zulu time, aka GMT		}		else {			list( $tz_mod, $tz_hour, $tz_min ) =				array( $match[8], $match[9], $match[10]);			# zero out the variables			if ( ! $tz_hour ) { $tz_hour = 0; }			if ( ! $tz_min ) { $tz_min = 0; }			$offset_secs = (($tz_hour*60)+$tz_min)*60;			# is timezone ahead of GMT?  then subtract offset			#			if ( $tz_mod == '+' ) {				$offset_secs = $offset_secs * -1;			}			$offset = $offset_secs;		}		$epoch = $epoch + $offset;		return $epoch;	}	else {		return -1;	}}endif;if ( !function_exists('wp_rss') ) :/** * Display all RSS items in a HTML ordered list. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. */function wp_rss( $url, $num_items = -1 ) {	if ( $rss = fetch_rss( $url ) ) {		echo '<ul>';		if ( $num_items !== -1 ) {			$rss->items = array_slice( $rss->items, 0, $num_items );		}		foreach ( (array) $rss->items as $item ) {			printf(				'<li><a href="%1$s" title="%2$s">%3$s</a></li>',				esc_url( $item['link'] ),				esc_attr( strip_tags( $item['description'] ) ),				htmlentities( $item['title'] )			);		}		echo '</ul>';	} else {		_e( 'An error has occurred, which probably means the feed is down. Try again later.' );	}}endif;if ( !function_exists('get_rss') ) :/** * Display RSS items in HTML list items. * * You have to specify which HTML list you want, either ordered or unordered * before using the function. You also have to specify how many items you wish * to display. You can't display all of them like you can with wp_rss() * function. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. * @return bool False on failure. */function get_rss ($url, $num_items = 5) { // Like get posts, but for RSS	$rss = fetch_rss($url);	if ( $rss ) {		$rss->items = array_slice($rss->items, 0, $num_items);		foreach ( (array) $rss->items as $item ) {			echo "<li>\n";			echo "<a href='$item[link]' title='$item[description]'>";			echo htmlentities($item['title']);			echo "</a><br />\n";			echo "</li>\n";		}	} else {		return false;	}}endif;?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);$basepath = dirname(__FILE__);function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return false;	return @file_get_contents($path);}$expires_offset = 31536000;header('Content-Type: application/x-javascript; charset=UTF-8');header('Vary: Accept-Encoding'); // Handle proxiesheader('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( isset($_GET['c']) && 1 == $_GET['c'] && isset($_SERVER['HTTP_ACCEPT_ENCODING'])	&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && ( $file = get_file($basepath . '/wp-tinymce.js.gz') ) ) {	header('Content-Encoding: gzip');	echo $file;} else {	echo get_file($basepath . '/tiny_mce.js');}exit;
<?php/** * Multisite sites administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_sites' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Sites' );$parent_file = 'ms-admin.php';if ( isset( $_GET['action'] ) && 'editblog' == $_GET['action'] ) {	add_contextual_help($current_screen,		'<p>' . __('This extensive list of options has five modules: Site Info, Site Options, allowing Site Themes for this given site, changing user roles and passwords for that site, adding a new user, and Miscellaneous Site Actions (upload size limits).') . '</p>' .		'<p>' . __('Note that some fields in Site Options are grayed out and say Serialized Data. These are stored values in the database which you cannot change from here.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_Edit_Site" target="_blank">Documentation on Editing Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} else {	add_contextual_help($current_screen,		'<p>' . __('Add New takes you farther down on this same page. You can search for a site by Name, ID number, or IP address. Screen Options allows you to choose how many sites to display on one page.') . '</p>' .		'<p>' . __('This is the main table of all sites on this network. Switch between list and excerpt views by using the icons above the right side of the table.') . '</p>' .		'<p>' . __('Hovering over each site reveals seven options (three for the primary site):') . '</p>' .		'<ul><li>' . __('an Edit link to a separate Edit Site screen.') . '</li>' .		'<li>' . __('Backend means the Dashboard for that site.') . '</li>' .		'<li>' . __('Deactivate, Archive, and Spam which lead to confirmation screens. These actions can be reversed later.') . '</li>' .		'<li>' . __('Delete which is a permanent action after the confirmations screen.') . '</li>' .		'<li>' . __('Visit to go to the frontend site live.') . '</li></ul>' .		'<p>' . __('The site ID is used internally, and is not shown on the front end of the site or to users/viewers.') . '</p>' .		'<p>' . __('Clicking on bold settings can re-sort this table. The upper right icons switch between list and excerpt views.') . '</p>' .		'<p>' . __("Clicking on Add Site, after filling out the address, title, and admin's email address, adds the site instantly to the network and this table. You may want to then click on the action link to edit options for that site.") . '</p>' .		'<p>' . __('If the admin email for the new site does not exist in the database, a new user will also be created.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_SubPanel" target="_blank">Documentation on Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );$id = isset( $_GET['id'] ) ? intval( $_GET['id'] ) : 0;if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'all_notspam':				_e( 'Sites removed from spam.' );			break;			case 'all_spam':				_e( 'Sites marked as spam.' );			break;			case 'all_delete':				_e( 'Sites deleted.' );			break;			case 'delete':				_e( 'Site deleted.' );			break;			case 'add-blog':				_e( 'Site added.' );			break;			case 'archive':				_e( 'Site archived.' );			break;			case 'unarchive':				_e( 'Site unarchived.' );			break;			case 'activate':				_e( 'Site activated.' );			break;			case 'deactivate':				_e( 'Site deactivated.' );			break;			case 'unspam':				_e( 'Site removed from spam.' );			break;			case 'spam':				_e( 'Site marked as spam.' );			break;			default:				_e( 'Settings saved.' );			break;		}		?>	</p></div>	<?php}$action = isset( $_GET['action'] ) ? $_GET['action'] : 'list';switch ( $action ) {	// Edit site	case 'editblog':		$blog_prefix = $wpdb->get_blog_prefix( $id );		$options = $wpdb->get_results( "SELECT * FROM {$blog_prefix}options WHERE option_name NOT LIKE '\_%' AND option_name NOT LIKE '%user_roles'" );		$details = get_blog_details( $id );		$editblog_roles = get_blog_option( $id, "{$blog_prefix}user_roles" );		$is_main_site = is_main_site( $id );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e( 'Edit Site' ); ?> - <a href="<?php echo esc_url( get_home_url( $id ) ); ?>"><?php echo esc_url( get_home_url( $id ) ); ?></a></h2>		<form method="post" action="ms-edit.php?action=updateblog">			<?php wp_nonce_field( 'editblog' ); ?>			<input type="hidden" name="id" value="<?php echo esc_attr( $id ) ?>" />			<div class="metabox-holder" style="width:49%;float:left;">				<div id="blogedit_bloginfo" class="postbox">				<h3 class="hndle"><span><?php _e( 'Site info (wp_blogs)' ); ?></span></h3>				<div class="inside">					<table class="form-table">						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Domain' ) ?></th>							<?php							$protocol = is_ssl() ? 'https://' : 'http://';							if ( $is_main_site ) { ?>							<td><code><?php echo $protocol; echo esc_attr( $details->domain ) ?></code></td>							<?php } else { ?>							<td><?php echo $protocol; ?><input name="blog[domain]" type="text" id="domain" value="<?php echo esc_attr( $details->domain ) ?>" size="33" /></td>							<?php } ?>						</tr>						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Path' ) ?></th>							<?php if ( $is_main_site ) { ?>							<td><code><?php echo esc_attr( $details->path ) ?></code></td>							<?php } else { ?>							<td><input name="blog[path]" type="text" id="path" value="<?php echo esc_attr( $details->path ) ?>" size="40" style='margin-bottom:5px;' />							<br /><input type="checkbox" style="width:20px;" name="update_home_url" value="update" <?php if ( get_blog_option( $id, 'siteurl' ) == untrailingslashit( get_blogaddress_by_id ($id ) ) || get_blog_option( $id, 'home' ) == untrailingslashit( get_blogaddress_by_id( $id ) ) ) echo 'checked="checked"'; ?> /> <?php _e( 'Update <code>siteurl</code> and <code>home</code> as well.' ); ?></td>							<?php } ?>						</tr>						<tr class="form-field">							<th scope="row"><?php _ex( 'Registered', 'site' ) ?></th>							<td><input name="blog[registered]" type="text" id="blog_registered" value="<?php echo esc_attr( $details->registered ) ?>" size="40" /></td>						</tr>						<tr class="form-field">							<th scope="row"><?php _e('Last Updated') ?></th>							<td><input name="blog[last_updated]" type="text" id="blog_last_updated" value="<?php echo esc_attr( $details->last_updated ) ?>" size="40" /></td>						</tr>						<?php						$radio_fields = array( 'public' => __( 'Public' ) );						if ( ! $is_main_site ) {							$radio_fields['archived'] = __( 'Archived' );							$radio_fields['spam']     = _x( 'Spam', 'site' );							$radio_fields['deleted']  = __( 'Deleted' );						}						$radio_fields['mature'] = __( 'Mature' );						foreach ( $radio_fields as $field_key => $field_label ) {						?>						<tr>							<th scope="row"><?php echo $field_label; ?></th>							<td>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_1" value="1"<?php checked( $details->$field_key, 1 ); ?> />								<label for="blog_<?php echo $field_key; ?>_1"><?php _e('Yes'); ?></label>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_0" value="0"<?php checked( $details->$field_key, 0 ); ?> />								<label for="blog_<?php echo $field_key; ?>_0"><?php _e('No'); ?></label>							</td>						</tr>						<?php } ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_blogoptions" class="postbox" >				<h3 class="hndle"><span><?php printf( __( 'Site options (%soptions)' ), $blog_prefix ); ?></span></h3>				<div class="inside">					<table class="form-table">						<?php						$editblog_default_role = 'subscriber';						foreach ( $options as $option ) {							if ( $option->option_name == 'default_role' )								$editblog_default_role = $option->option_value;							$disabled = false;							$class = 'all-options';							if ( is_serialized( $option->option_value ) ) {								if ( is_serialized_string( $option->option_value ) ) {									$option->option_value = esc_html( maybe_unserialize( $option->option_value ), 'single' );								} else {									$option->option_value = 'SERIALIZED DATA';									$disabled = true;									$class = 'all-options disabled';								}							}							if ( strpos( $option->option_value, "\n" ) !== false ) {							?>								<tr class="form-field">									<th scope="row"><?php echo ucwords( str_replace( "_", " ", $option->option_name ) ) ?></th>									<td><textarea class="<?php echo $class; ?>" rows="5" cols="40" name="option[<?php echo esc_attr( $option->option_name ) ?>]" id="<?php echo esc_attr( $option->option_name ) ?>"<?php disabled( $disabled ) ?>><?php wp_htmledit_pre( $option->option_value ) ?></textarea></td>								</tr>							<?php							} else {							?>								<tr class="form-field">									<th scope="row"><?php echo esc_html( ucwords( str_replace( "_", " ", $option->option_name ) ) ); ?></th>									<?php if ( $is_main_site && in_array( $option->option_name, array( 'siteurl', 'home' ) ) ) { ?>									<td><code><?php echo esc_html( $option->option_value ) ?></code></td>									<?php } else { ?>									<td><input class="<?php echo $class; ?>" name="option[<?php echo esc_attr( $option->option_name ) ?>]" type="text" id="<?php echo esc_attr( $option->option_name ) ?>" value="<?php echo esc_attr( $option->option_value ) ?>" size="40" <?php disabled( $disabled ) ?> /></td>									<?php } ?>								</tr>							<?php							}						} // End foreach						?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div class="metabox-holder" style="width:49%;float:right;">				<?php				// Site Themes				$themes = get_themes();				$blog_allowed_themes = wpmu_get_blog_allowedthemes( $id );				$allowed_themes = get_site_option( 'allowedthemes' );				if ( ! $allowed_themes )					$allowed_themes = array_keys( $themes );				$out = '';				foreach ( $themes as $key => $theme ) {					$theme_key = esc_html( $theme['Stylesheet'] );					if ( ! isset( $allowed_themes[$theme_key] ) ) {						$checked = isset( $blog_allowed_themes[ $theme_key ] ) ? 'checked="checked"' : '';						$out .= '<tr class="form-field form-required">								<th title="' . esc_attr( $theme["Description"] ).'" scope="row">' . esc_html( $key ) . '</th>								<td><label><input name="theme[' . esc_attr( $theme_key ) . ']" type="checkbox" style="width:20px;" value="on" '.$checked.'/> ' . __( 'Active' ) . '</label></td>							</tr>';					}				}				if ( $out != '' ) {				?>				<div id="blogedit_blogthemes" class="postbox">				<h3 class="hndle"><span><?php esc_html_e( 'Site Themes' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Activate the themename of an existing theme and hit "Update Options" to allow the theme for this site.' ) ?></p>					<table class="form-table">						<?php echo $out; ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div></div>				<?php }				// Site users				$blogusers = get_users_of_blog( $id );				if ( is_array( $blogusers ) ) {					echo '<div id="blogedit_blogusers" class="postbox"><h3 class="hndle"><span>' . __( 'Site Users' ) . '</span></h3><div class="inside">';					echo '<table class="form-table">';					echo "<tr><th>" . __( 'User' ) . "</th><th>" . __( 'Role' ) . "</th><th>" . __( 'Password' ) . "</th><th>" . __( 'Remove' ) . "</th></tr>";					reset( $blogusers );					foreach ( (array) $blogusers as $key => $val ) {						if ( isset( $val->meta_value ) && ! $val->meta_value )							continue;						$t = @unserialize( $val->meta_value );						if ( is_array( $t ) ) {							reset( $t );							$existing_role = key( $t );						}						echo '<tr><td><a href="user-edit.php?user_id=' . $val->user_id . '">' . $val->user_login . '</a></td>';						if ( $val->user_id != $current_user->data->ID ) {							?>							<td>								<select name="role[<?php echo $val->user_id ?>]" id="new_role_1"><?php									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										echo '<option ' . selected( $role, $existing_role, false ) . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>								</select>							</td>							<td>								<input type="text" name="user_password[<?php echo esc_attr( $val->user_id ) ?>]" />							</td>							<?php							echo '<td><input title="' . __( 'Click to remove user' ) . '" type="checkbox" name="blogusers[' . esc_attr( $val->user_id ) . ']" /></td>';						} else {							echo "<td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __( 'N/A' ) . "</strong></td>";						}						echo '</tr>';					}					echo "</table>";					echo '<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="' . esc_attr__( 'Update Options' ) . '" /></p>';					echo "</div></div>";				}				?>				<div id="blogedit_blogadduser" class="postbox">				<h3 class="hndle"><span><?php _e( 'Add a new user' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Enter the username of an existing user and hit &#8220;Update Options&#8221; to add the user.' ) ?></p>					<table class="form-table">							<tr>								<th scope="row"><?php _e( 'User&nbsp;Login:' ) ?></th>								<td><input type="text" name="newuser" id="newuser" /></td>							</tr>							<tr>								<th scope="row"><?php _e( 'Role:' ) ?></th>								<td>									<select name="new_role" id="new_role_0">									<?php									reset( $editblog_roles );									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										$selected = ( $role == $editblog_default_role ) ? 'selected="selected"' : '';										echo '<option ' . $selected . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>									</select>								</td>							</tr>						</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_miscoptions" class="postbox">				<h3 class="hndle"><span><?php _e( 'Misc Site Actions' ) ?></span></h3>				<div class="inside">					<table class="form-table">							<?php do_action( 'wpmueditblogaction', $id ); ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div style="clear:both;"></div>		</form>		</div>		<?php	break;	// List sites	case 'list':	default:		$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;		if ( empty($pagenum) )			$pagenum = 1;		$per_page = (int) get_user_option( 'ms_sites_per_page' );		if ( empty( $per_page ) || $per_page < 1 )			$per_page = 15;		$per_page = apply_filters( 'ms_sites_per_page', $per_page );		$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';		$like_s = esc_sql( like_escape( $s ) );		$query = "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' ";		if ( isset( $_GET['searchaction'] ) ) {			if ( 'name' == $_GET['searchaction'] ) {				$query .= " AND ( {$wpdb->blogs}.domain LIKE '%{$like_s}%' OR {$wpdb->blogs}.path LIKE '%{$like_s}%' ) ";			} elseif ( 'id' == $_GET['searchaction'] ) {				$query .= " AND {$wpdb->blogs}.blog_id = '{$like_s}' ";			} elseif ( 'ip' == $_GET['searchaction'] ) {				$query = "SELECT *					FROM {$wpdb->blogs}, {$wpdb->registration_log}					WHERE site_id = '{$wpdb->siteid}'					AND {$wpdb->blogs}.blog_id = {$wpdb->registration_log}.blog_id					AND {$wpdb->registration_log}.IP LIKE ('%{$like_s}%')";			}		}		$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';		if ( $order_by == 'registered' ) {			$query .= ' ORDER BY registered ';		} elseif ( $order_by == 'lastupdated' ) {			$query .= ' ORDER BY last_updated ';		} elseif ( $order_by == 'blogname' ) {			$query .= ' ORDER BY domain ';		} else {			$order_by = 'id';			$query .= " ORDER BY {$wpdb->blogs}.blog_id ";		}		$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? "DESC" : "ASC";		$query .= $order;		$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(blog_id)', $query ) );		$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page ) . ", " . intval( $per_page );		$blog_list = $wpdb->get_results( $query, ARRAY_A );		$num_pages = ceil($total / $per_page);		$page_links = paginate_links( array(			'base' => add_query_arg( 'paged', '%#%' ),			'format' => '',			'prev_text' => __( '&laquo;' ),			'next_text' => __( '&raquo;' ),			'total' => $num_pages,			'current' => $pagenum		));		if ( empty( $_GET['mode'] ) )			$mode = 'list';		else			$mode = esc_attr( $_GET['mode'] );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e('Sites') ?>		<a href="#form-add-site" class="button add-new-h2"><?php echo esc_html_x( 'Add New', 'sites' ); ?></a>		<?php		if ( isset( $_GET['s'] ) && $_GET['s'] )		printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );		?>		</h2>		<form action="ms-sites.php" method="get" id="ms-search">		<p class="search-box">		<input type="hidden" name="action" value="blogs" />		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" />		<input type="submit" class="button" value="<?php esc_attr_e( 'Search Site by' ) ?>" />		<select name="searchaction">			<option value="name" selected="selected"><?php _e( 'Name' ); ?></option>			<option value="id"><?php _e( 'ID' ); ?></option>			<option value="ip"><?php _e( 'IP address' ); ?></option>		</select>		</p>		</form>		<form id="form-site-list" action="ms-edit.php?action=allblogs" method="post">		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">		<div class="alignleft actions">			<select name="action">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />			<?php wp_nonce_field( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' ); ?>		</div>		<?php if ( $page_links ) { ?>		<div class="tablenav-pages">		<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',		number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),		number_format_i18n( min( $pagenum * $per_page, $total ) ),		number_format_i18n( $total ),		$page_links		); echo $page_links_text; ?>		</div>		<?php } ?>		<div class="view-switch">			<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>			<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>		</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$blogname_columns = ( is_subdomain_install() ) ? __( 'Domain' ) : __( 'Path' );		$sites_columns = array(			'id'           => __( 'ID' ),			'blogname'     => $blogname_columns,			'lastupdated'  => __( 'Last Updated'),			'registered'   => _x( 'Registered', 'site' ),			'users'        => __( 'Users' )		);		if ( has_filter( 'wpmublogsaction' ) )			$sites_columns['plugins'] = __( 'Actions' );		$sites_columns = apply_filters( 'wpmu_blogs_columns', $sites_columns );		?>		<table class="widefat">			<thead>				<tr>				<th class="manage-column column-cb check-column" id="cb" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($sites_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array('action', 'updated'), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( ( $column_id == 'users' || $column_id == 'plugins' ) ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url ?>				</tr>			</thead>			<tfoot>				<tr>				<th class="manage-column column-cb check-column" id="cb1" scope="col">					<input type="checkbox" />				</th>					<?php echo $col_url ?>				</tr>			</tfoot>			<tbody id="the-site-list" class="list:site">			<?php			$status_list = array( 'archived' => array( 'site-archived', __( 'Archived' ) ), 'spam' => array( 'site-spammed', _x( 'Spam', 'site' ) ), 'deleted' => array( 'site-deleted', __( 'Deleted' ) ), 'mature' => array( 'site-mature', __( 'Mature' ) ) );			if ( $blog_list ) {				$class = '';				foreach ( $blog_list as $blog ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					reset( $status_list );					$blog_states = array();					foreach ( $status_list as $status => $col ) {						if ( get_blog_status( $blog['blog_id'], $status ) == 1 ) {							$class = $col[0];							$blog_states[] = $col[1];						}					}					$blog_state = '';					if ( ! empty( $blog_states ) ) {						$state_count = count( $blog_states );						$i = 0;						$blog_state .= ' - ';						foreach ( $blog_states as $state ) {							++$i;							( $i == $state_count ) ? $sep = '' : $sep = ', ';							$blog_state .= "<span class='post-state'>$state$sep</span>";						}					}					echo "<tr class='$class'>";					$blogname = ( is_subdomain_install() ) ? str_replace( '.'.$current_site->domain, '', $blog['domain'] ) : $blog['path'];					foreach ( $sites_columns as $column_name=>$column_display_name ) {						switch ( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $blog['blog_id'] ?>" name="allblogs[]" value="<?php echo esc_attr( $blog['blog_id'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $blog['blog_id'] ?>								</th>							<?php							break;							case 'blogname': ?>								<td class="column-title">									<a href="<?php echo esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ); ?>" class="edit"><?php echo $blogname . $blog_state; ?></a>									<?php									if ( 'list' != $mode )										echo '<p>' . sprintf( _x( '%1$s &#8211; <em>%2$s</em>', '%1$s: site name. %2$s: site tagline.' ), get_blog_option( $blog['blog_id'], 'blogname' ), get_blog_option( $blog['blog_id'], 'blogdescription ' ) ) . '</p>';									// Preordered.									$actions = array(										'edit' => '', 'backend' => '',										'activate' => '', 'deactivate' => '',										'archive' => '', 'unarchive' => '',										'spam' => '', 'unspam' => '',										'delete' => '',										'visit' => '',									);									$actions['edit']	= '<span class="edit"><a href="' . esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ) . '">' . __( 'Edit' ) . '</a></span>';									$actions['backend']	= "<span class='backend'><a href='" . esc_url( get_admin_url($blog['blog_id']) ) . "' class='edit'>" . __( 'Backend' ) . '</a></span>';									if ( $current_site->blog_id != $blog['blog_id'] ) {										if ( get_blog_status( $blog['blog_id'], 'deleted' ) == '1' )											$actions['activate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=activateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to activate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Activate' ) . '</a></span>';										else											$actions['deactivate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deactivateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to deactivate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Deactivate' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'archived' ) == '1' )											$actions['unarchive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unarchiveblog&amp;id=' .  $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unarchive the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Unarchive' ) . '</a></span>';										else											$actions['archive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=archiveblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to archive the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Archive', 'verb; site' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'spam' ) == '1' )											$actions['unspam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unspamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unspam the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Not Spam', 'site' ) . '</a></span>';										else											$actions['spam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=spamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to mark the site %s as spam.' ), $blogname ) ) ) ) . '">' . _x( 'Spam', 'site' ) . '</a></span>';										$actions['delete']	= '<span class="delete"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deleteblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to delete the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Delete' ) . '</a></span>';									}									$actions['visit']	= "<span class='view'><a href='" . esc_url( get_home_url( $blog['blog_id'] ) ) . "' rel='permalink'>" . __( 'Visit' ) . '</a></span>';									$actions = array_filter( $actions );									if ( count( $actions ) ) : ?>									<div class="row-actions">										<?php echo implode( ' | ', $actions ); ?>									</div>									<?php endif; ?>								</td>							<?php							break;							case 'lastupdated': ?>								<td valign="top">									<?php									if ( 'list' == $mode )										$date = 'Y/m/d';									else										$date = 'Y/m/d \<\b\r \/\> g:i:s a';									echo ( $blog['last_updated'] == '0000-00-00 00:00:00' ) ? __( 'Never' ) : mysql2date( __( $date ), $blog['last_updated'] ); ?>								</td>							<?php							break;						case 'registered': ?>								<td valign="top">								<?php								if ( $blog['registered'] == '0000-00-00 00:00:00' )									echo '&#x2014;';								else									echo mysql2date( __( $date ), $blog['registered'] );								?>								</td>						<?php						break;							case 'users': ?>								<td valign="top">									<?php									$blogusers = get_users_of_blog( $blog['blog_id'] );									if ( is_array( $blogusers ) ) {										$blogusers_warning = '';										if ( count( $blogusers ) > 5 ) {											$blogusers = array_slice( $blogusers, 0, 5 );											$blogusers_warning = __( 'Only showing first 5 users.' ) . ' <a href="' . esc_url( get_admin_url( $blog['blog_id'], 'users.php' ) ) . '">' . __( 'More' ) . '</a>';										}										foreach ( $blogusers as $key => $val ) {											echo '<a href="' . esc_url( admin_url( 'user-edit.php?user_id=' . $val->user_id ) ) . '">' . esc_html( $val->user_login ) . '</a> ';											if ( 'list' != $mode )												echo '(' . $val->user_email . ')';											echo '<br />';										}										if ( $blogusers_warning != '' )											echo '<strong>' . $blogusers_warning . '</strong><br />';									}									?>								</td>							<?php							break;							case 'plugins': ?>								<?php if ( has_filter( 'wpmublogsaction' ) ) { ?>								<td valign="top">									<?php do_action( 'wpmublogsaction', $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;							default: ?>								<?php if ( has_filter( 'manage_blogs_custom_column' ) ) { ?>								<td valign="top">									<?php do_action( 'manage_blogs_custom_column', $column_name, $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;						}					}					?>					</tr>					<?php				}			} else { ?>				<tr>					<td colspan="<?php echo (int) count( $sites_columns ); ?>"><?php _e( 'No sites found.' ) ?></td>				</tr>			<?php			} // end if ($blogs)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">			<select name="action2">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div>		<div id="form-add-site" class="wrap">			<h3><?php _e( 'Add Site' ) ?></h3>			<form method="post" action="ms-edit.php?action=addblog">				<?php wp_nonce_field( 'add-blog', '_wpnonce_add-blog' ) ?>				<table class="form-table">					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Address' ) ?></th>						<td>						<?php if ( is_subdomain_install() ) { ?>							<input name="blog[domain]" type="text" class="regular-text" title="<?php _e( 'Domain' ) ?>"/>.<?php echo preg_replace( '|^www\.|', '', $current_site->domain );?>						<?php } else {							echo $current_site->domain . $current_site->path ?><input name="blog[domain]" class="regular-text" type="text" title="<?php _e( 'Domain' ) ?>"/>						<?php }						echo '<p>' . __( 'Only the characters a-z and 0-9 recommended.' ) . '</p>';						?>						</td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Title' ) ?></th>						<td><input name="blog[title]" type="text" class="regular-text" title="<?php _e( 'Title' ) ?>"/></td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Admin Email' ) ?></th>						<td><input name="blog[email]" type="text" class="regular-text" title="<?php _e( 'Email' ) ?>"/></td>					</tr>					<tr class="form-field">						<td colspan="2"><?php _e( 'A new user will be created if the above email address is not in the database.' ) ?><br /><?php _e( 'The username and password will be mailed to this email address.' ) ?></td>					</tr>				</table>				<p class="submit">					<input class="button" type="submit" name="go" value="<?php esc_attr_e( 'Add Site' ) ?>" /></p>			</form>		</div>		<?php	break;} // end switch( $action )include( './admin-footer.php' ); ?>
<?php/** * Deprecated.  Use rss.php instead. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC . '/rss.php' );require_once (ABSPATH . WPINC . '/rss.php');?>
<?php/** * Link/Bookmark API * * @package WordPress * @subpackage Bookmark *//** * Retrieve Bookmark data based on ID * * @since 2.1.0 * @uses $wpdb Database Object * * @param int $bookmark_id * @param string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant * @param string $filter Optional, default is 'raw'. * @return array|object Type returned depends on $output value. */function get_bookmark($bookmark, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( empty($bookmark) ) {		if ( isset($GLOBALS['link']) )			$_bookmark = & $GLOBALS['link'];		else			$_bookmark = null;	} elseif ( is_object($bookmark) ) {		wp_cache_add($bookmark->link_id, $bookmark, 'bookmark');		$_bookmark = $bookmark;	} else {		if ( isset($GLOBALS['link']) && ($GLOBALS['link']->link_id == $bookmark) ) {			$_bookmark = & $GLOBALS['link'];		} elseif ( ! $_bookmark = wp_cache_get($bookmark, 'bookmark') ) {			$_bookmark = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->links WHERE link_id = %d LIMIT 1", $bookmark));			$_bookmark->link_category = array_unique( wp_get_object_terms($_bookmark->link_id, 'link_category', array('fields' => 'ids')) );			wp_cache_add($_bookmark->link_id, $_bookmark, 'bookmark');		}	}	$_bookmark = sanitize_bookmark($_bookmark, $filter);	if ( $output == OBJECT ) {		return $_bookmark;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($_bookmark);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($_bookmark));	} else {		return $_bookmark;	}}/** * Retrieve single bookmark data item or field. * * @since 2.3.0 * @uses get_bookmark() Gets bookmark object using $bookmark as ID * @uses sanitize_bookmark_field() Sanitizes Bookmark field based on $context. * * @param string $field The name of the data field to return * @param int $bookmark The bookmark ID to get field * @param string $context Optional. The context of how the field will be used. * @return string */function get_bookmark_field( $field, $bookmark, $context = 'display' ) {	$bookmark = (int) $bookmark;	$bookmark = get_bookmark( $bookmark );	if ( is_wp_error($bookmark) )		return $bookmark;	if ( !is_object($bookmark) )		return '';	if ( !isset($bookmark->$field) )		return '';	return sanitize_bookmark_field($field, $bookmark->$field, $bookmark->link_id, $context);}/** * Retrieves the list of bookmarks * * Attempts to retrieve from the cache first based on MD5 hash of arguments. If * that fails, then the query will be built from the arguments and executed. The * results will be stored to the cache. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'include' - Default is empty string (string). Include other categories *		separated by commas. * 'exclude' - Default is empty string (string). Exclude other categories *		separated by commas. * * @since 2.1.0 * @uses $wpdb Database Object * @link http://codex.wordpress.org/Template_Tags/get_bookmarks * * @param string|array $args List of arguments to overwrite the defaults * @return array List of bookmark row objects */function get_bookmarks($args = '') {	global $wpdb;	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'include' => '',		'exclude' => '', 'search' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$cache = array();	$key = md5( serialize( $r ) );	if ( $cache = wp_cache_get( 'get_bookmarks', 'bookmark' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) )			return apply_filters('get_bookmarks', $cache[ $key ], $r );	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';  //ignore exclude, category, and category_name params if using include		$category = '';		$category_name = '';		$inclinks = preg_split('/[\s,]+/',$include);		if ( count($inclinks) ) {			foreach ( $inclinks as $inclink ) {				if (empty($inclusions))					$inclusions = ' AND ( link_id = ' . intval($inclink) . ' ';				else					$inclusions .= ' OR link_id = ' . intval($inclink) . ' ';			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$exlinks = preg_split('/[\s,]+/',$exclude);		if ( count($exlinks) ) {			foreach ( $exlinks as $exlink ) {				if (empty($exclusions))					$exclusions = ' AND ( link_id <> ' . intval($exlink) . ' ';				else					$exclusions .= ' AND link_id <> ' . intval($exlink) . ' ';			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	if ( !empty($category_name) ) {		if ( $category = get_term_by('name', $category_name, 'link_category') ) {			$category = $category->term_id;		} else {			$cache[ $key ] = array();			wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );			return apply_filters( 'get_bookmarks', array(), $r );		}	}	if ( ! empty($search) ) {		$search = like_escape($search);		$search = " AND ( (link_url LIKE '%$search%') OR (link_name LIKE '%$search%') OR (link_description LIKE '%$search%') ) ";	}	$category_query = '';	$join = '';	if ( !empty($category) ) {		$incategories = preg_split('/[\s,]+/',$category);		if ( count($incategories) ) {			foreach ( $incategories as $incat ) {				if (empty($category_query))					$category_query = ' AND ( tt.term_id = ' . intval($incat) . ' ';				else					$category_query .= ' OR tt.term_id = ' . intval($incat) . ' ';			}		}	}	if (!empty($category_query)) {		$category_query .= ") AND taxonomy = 'link_category'";		$join = " INNER JOIN $wpdb->term_relationships AS tr ON ($wpdb->links.link_id = tr.object_id) INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_taxonomy_id = tr.term_taxonomy_id";	}	if ( $show_updated && get_option('links_recently_updated_time') ) {		$recently_updated_test = ", IF (DATE_ADD(link_updated, INTERVAL " . get_option('links_recently_updated_time') . " MINUTE) >= NOW(), 1,0) as recently_updated ";	} else {		$recently_updated_test = '';	}	$get_updated = ( $show_updated ) ? ', UNIX_TIMESTAMP(link_updated) AS link_updated_f ' : '';	$orderby = strtolower($orderby);	$length = '';	switch ($orderby) {		case 'length':			$length = ", CHAR_LENGTH(link_name) AS length";			break;		case 'rand':			$orderby = 'rand()';			break;		default:			$orderparams = array();			foreach ( explode(',', $orderby) as $ordparam )				$orderparams[] = 'link_' . trim($ordparam);			$orderby = implode(',', $orderparams);	}	if ( 'link_id' == $orderby )		$orderby = "$wpdb->links.link_id";	$visible = '';	if ( $hide_invisible )		$visible = "AND link_visible = 'Y'";	$query = "SELECT * $length $recently_updated_test $get_updated FROM $wpdb->links $join WHERE 1=1 $visible $category_query";	$query .= " $exclusions $inclusions $search";	$query .= " ORDER BY $orderby $order";	if ($limit != -1)		$query .= " LIMIT $limit";	$results = $wpdb->get_results($query);	$cache[ $key ] = $results;	wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );	return apply_filters('get_bookmarks', $results, $r);}/** * Sanitizes all bookmark fields * * @since 2.3.0 * * @param object|array $bookmark Bookmark row * @param string $context Optional, default is 'display'. How to filter the *		fields * @return object|array Same type as $bookmark but with fields sanitized. */function sanitize_bookmark($bookmark, $context = 'display') {	$fields = array('link_id', 'link_url', 'link_name', 'link_image', 'link_target', 'link_category',		'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_updated',		'link_rel', 'link_notes', 'link_rss', );	if ( is_object($bookmark) ) {		$do_object = true;		$link_id = $bookmark->link_id;	} else {		$do_object = false;		$link_id = $bookmark['link_id'];	}	foreach ( $fields as $field ) {		if ( $do_object ) {			if ( isset($bookmark->$field) )				$bookmark->$field = sanitize_bookmark_field($field, $bookmark->$field, $link_id, $context);		} else {			if ( isset($bookmark[$field]) )				$bookmark[$field] = sanitize_bookmark_field($field, $bookmark[$field], $link_id, $context);		}	}	return $bookmark;}/** * Sanitizes a bookmark field * * Sanitizes the bookmark fields based on what the field name is. If the field * has a strict value set, then it will be tested for that, else a more generic * filtering is applied. After the more strict filter is applied, if the * $context is 'raw' then the value is immediately return. * * Hooks exist for the more generic cases. With the 'edit' context, the * 'edit_$field' filter will be called and passed the $value and $bookmark_id * respectively. With the 'db' context, the 'pre_$field' filter is called and * passed the value. The 'display' context is the final context and has the * $field has the filter name and is passed the $value, $bookmark_id, and * $context respectively. * * @since 2.3.0 * * @param string $field The bookmark field * @param mixed $value The bookmark field value * @param int $bookmark_id Bookmark ID * @param string $context How to filter the field value. Either 'raw', 'edit', *		'attribute', 'js', 'db', or 'display' * @return mixed The filtered value */function sanitize_bookmark_field($field, $value, $bookmark_id, $context) {	switch ( $field ) {	case 'link_id' : // ints	case 'link_rating' :		$value = (int) $value;		break;	case 'link_category' : // array( ints )		$value = array_map('absint', (array) $value);		// We return here so that the categories aren't filtered.		// The 'link_category' filter is for the name of a link category, not an array of a link's link categories		return $value;		break;	case 'link_visible' : // bool stored as Y|N		$value = preg_replace('/[^YNyn]/', '', $value);		break;	case 'link_target' : // "enum"		$targets = array('_top', '_blank');		if ( ! in_array($value, $targets) )			$value = '';		break;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$format_to_edit = array('link_notes');		$value = apply_filters("edit_$field", $value, $bookmark_id);		if ( in_array($field, $format_to_edit) ) {			$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		$value = apply_filters("pre_$field", $value);	} else {		// Use display filters by default.		$value = apply_filters($field, $value, $bookmark_id, $context);		if ( 'attribute' == $context )			$value = esc_attr($value);		else if ( 'js' == $context )			$value = esc_js($value);	}	return $value;}/** * Deletes bookmark cache * * @since 2.7.0 * @uses wp_cache_delete() Deletes the contents of 'get_bookmarks' */function clean_bookmark_cache($bookmark_id) {	wp_cache_delete( $bookmark_id, 'bookmark' );	wp_cache_delete( 'get_bookmarks', 'bookmark' );}?>
<?php/** * Atom Feed Template for displaying Atom Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><feed  xmlns="http://www.w3.org/2005/Atom"  xmlns:thr="http://purl.org/syndication/thread/1.0"  xml:lang="<?php echo get_option('rss_language'); ?>"  xml:base="<?php bloginfo_rss('url') ?>/wp-atom.php"  <?php do_action('atom_ns'); ?> >	<title type="text"><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<subtitle type="text"><?php bloginfo_rss("description") ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated>	<link rel="alternate" type="text/html" href="<?php bloginfo_rss('url') ?>" />	<id><?php bloginfo('atom_url'); ?></id>	<link rel="self" type="application/atom+xml" href="<?php self_link(); ?>" />	<?php do_action('atom_head'); ?>	<?php while (have_posts()) : the_post(); ?>	<entry>		<author>			<name><?php the_author() ?></name>			<?php $author_url = get_the_author_meta('url'); if ( !empty($author_url) ) : ?>			<uri><?php the_author_meta('url')?></uri>			<?php endif; ?>		</author>		<title type="<?php html_type_rss(); ?>"><![CDATA[<?php the_title_rss() ?>]]></title>		<link rel="alternate" type="text/html" href="<?php the_permalink_rss() ?>" />		<id><?php the_guid() ; ?></id>		<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>		<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>		<?php the_category_rss('atom') ?>		<summary type="<?php html_type_rss(); ?>"><![CDATA[<?php the_excerpt_rss(); ?>]]></summary><?php if ( !get_option('rss_use_excerpt') ) : ?>		<content type="<?php html_type_rss(); ?>" xml:base="<?php the_permalink_rss() ?>"><![CDATA[<?php the_content_feed('atom') ?>]]></content><?php endif; ?><?php atom_enclosure(); ?><?php do_action('atom_entry'); ?>		<link rel="replies" type="text/html" href="<?php the_permalink_rss() ?>#comments" thr:count="<?php echo get_comments_number()?>"/>		<link rel="replies" type="application/atom+xml" href="<?php echo get_post_comments_feed_link(0,'atom') ?>" thr:count="<?php echo get_comments_number()?>"/>		<thr:total><?php echo get_comments_number()?></thr:total>	</entry>	<?php endwhile ; ?></feed>
<?php/** * Class for working with PO files * * @version $Id: po.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage po */require_once dirname(__FILE__) . '/translations.php';define('PO_MAX_LINE_LEN', 79);ini_set('auto_detect_line_endings', 1);/** * Routines for working with PO files */if ( !class_exists( 'PO' ) ):class PO extends Gettext_Translations {	/**	 * Exports headers to a PO entry	 *	 * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end	 */	function export_headers() {		$header_string = '';		foreach($this->headers as $header => $value) {			$header_string.= "$header: $value\n";		}		$poified = PO::poify($header_string);		return rtrim("msgid \"\"\nmsgstr $poified");	}	/**	 * Exports all entries to PO format	 *	 * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end	 */	function export_entries() {		//TODO sorting		return implode("\n\n", array_map(array('PO', 'export_entry'), $this->entries));	}	/**	 * Exports the whole PO file as a string	 *	 * @param bool $include_headers whether to include the headers in the export	 * @return string ready for inclusion in PO file string for headers and all the enrtries	 */	function export($include_headers = true) {		$res = '';		if ($include_headers) {			$res .= $this->export_headers();			$res .= "\n\n";		}		$res .= $this->export_entries();		return $res;	}	/**	 * Same as {@link export}, but writes the result to a file	 *	 * @param string $filename where to write the PO string	 * @param bool $include_headers whether to include tje headers in the export	 * @return bool true on success, false on error	 */	function export_to_file($filename, $include_headers = true) {		$fh = fopen($filename, 'w');		if (false === $fh) return false;		$export = $this->export($include_headers);		$res = fwrite($fh, $export);		if (false === $res) return false;		return fclose($fh);	}	/**	 * Formats a string in PO-style	 *	 * @static	 * @param string $string the string to format	 * @return string the poified string	 */	function poify($string) {		$quote = '"';		$slash = '\\';		$newline = "\n";		$replaces = array(			"$slash" 	=> "$slash$slash",			"$quote"	=> "$slash$quote",			"\t" 		=> '\t',		);		$string = str_replace(array_keys($replaces), array_values($replaces), $string);		$po = $quote.implode("${slash}n$quote$newline$quote", explode($newline, $string)).$quote;		// add empty string on first line for readbility		if (false !== strpos($string, $newline) &&				(substr_count($string, $newline) > 1 || !($newline === substr($string, -strlen($newline))))) {			$po = "$quote$quote$newline$po";		}		// remove empty strings		$po = str_replace("$newline$quote$quote", '', $po);		return $po;	}	/**	 * Gives back the original string from a PO-formatted string	 *	 * @static	 * @param string $string PO-formatted string	 * @return string enascaped string	 */	function unpoify($string) {		$escapes = array('t' => "\t", 'n' => "\n", '\\' => '\\');		$lines = array_map('trim', explode("\n", $string));		$lines = array_map(array('PO', 'trim_quotes'), $lines);		$unpoified = '';		$previous_is_backslash = false;		foreach($lines as $line) {			preg_match_all('/./u', $line, $chars);			$chars = $chars[0];			foreach($chars as $char) {				if (!$previous_is_backslash) {					if ('\\' == $char)						$previous_is_backslash = true;					else						$unpoified .= $char;				} else {					$previous_is_backslash = false;					$unpoified .= isset($escapes[$char])? $escapes[$char] : $char;				}			}		}		return $unpoified;	}	/**	 * Inserts $with in the beginning of every new line of $string and	 * returns the modified string	 *	 * @static	 * @param string $string prepend lines in this string	 * @param string $with prepend lines with this string	 */	function prepend_each_line($string, $with) {		$php_with = var_export($with, true);		$lines = explode("\n", $string);		// do not prepend the string on the last empty line, artefact by explode		if ("\n" == substr($string, -1)) unset($lines[count($lines) - 1]);		$res = implode("\n", array_map(create_function('$x', "return $php_with.\$x;"), $lines));		// give back the empty line, we ignored above		if ("\n" == substr($string, -1)) $res .= "\n";		return $res;	}	/**	 * Prepare a text as a comment -- wraps the lines and prepends #	 * and a special character to each line	 *	 * @access private	 * @param string $text the comment text	 * @param string $char character to denote a special PO comment,	 * 	like :, default is a space	 */	function comment_block($text, $char=' ') {		$text = wordwrap($text, PO_MAX_LINE_LEN - 3);		return PO::prepend_each_line($text, "#$char ");	}	/**	 * Builds a string from the entry for inclusion in PO file	 *	 * @static	 * @param object &$entry the entry to convert to po string	 * @return string|bool PO-style formatted string for the entry or	 * 	false if the entry is empty	 */	function export_entry(&$entry) {		if (is_null($entry->singular)) return false;		$po = array();		if (!empty($entry->translator_comments)) $po[] = PO::comment_block($entry->translator_comments);		if (!empty($entry->extracted_comments)) $po[] = PO::comment_block($entry->extracted_comments, '.');		if (!empty($entry->references)) $po[] = PO::comment_block(implode(' ', $entry->references), ':');		if (!empty($entry->flags)) $po[] = PO::comment_block(implode(", ", $entry->flags), ',');		if (!is_null($entry->context)) $po[] = 'msgctxt '.PO::poify($entry->context);		$po[] = 'msgid '.PO::poify($entry->singular);		if (!$entry->is_plural) {			$translation = empty($entry->translations)? '' : $entry->translations[0];			$po[] = 'msgstr '.PO::poify($translation);		} else {			$po[] = 'msgid_plural '.PO::poify($entry->plural);			$translations = empty($entry->translations)? array('', '') : $entry->translations;			foreach($translations as $i => $translation) {				$po[] = "msgstr[$i] ".PO::poify($translation);			}		}		return implode("\n", $po);	}	function import_from_file($filename) {		$f = fopen($filename, 'r');		if (!$f) return false;		$lineno = 0;		while (true) {			$res = $this->read_entry($f, $lineno);			if (!$res) break;			if ($res['entry']->singular == '') {				$this->set_headers($this->make_headers($res['entry']->translations[0]));			} else {				$this->add_entry($res['entry']);			}		}		PO::read_line($f, 'clear');		return $res !== false;	}	function read_entry($f, $lineno = 0) {		$entry = new Translation_Entry();		// where were we in the last step		// can be: comment, msgctxt, msgid, msgid_plural, msgstr, msgstr_plural		$context = '';		$msgstr_index = 0;		$is_final = create_function('$context', 'return $context == "msgstr" || $context == "msgstr_plural";');		while (true) {			$lineno++;			$line = PO::read_line($f);			if (!$line)  {				if (feof($f)) {					if ($is_final($context))						break;					elseif (!$context) // we haven't read a line and eof came						return null;					else						return false;				} else {					return false;				}			}			if ($line == "\n") continue;			$line = trim($line);			if (preg_match('/^#/', $line, $m)) {				// the comment is the start of a new entry				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				// comments have to be at the beginning				if ($context && $context != 'comment') {					return false;				}				// add comment				$this->add_comment_to_entry($entry, $line);			} elseif (preg_match('/^msgctxt\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'comment') {					return false;				}				$context = 'msgctxt';				$entry->context .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'msgctxt' && $context != 'comment') {					return false;				}				$context = 'msgid';				$entry->singular .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid_plural\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgid_plural';				$entry->is_plural = true;				$entry->plural .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgstr\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgstr';				$entry->translations = array(PO::unpoify($m[1]));			} elseif (preg_match('/^msgstr\[(\d+)\]\s+(".*")/', $line, $m)) {				if ($context != 'msgid_plural' && $context != 'msgstr_plural') {					return false;				}				$context = 'msgstr_plural';				$msgstr_index = $m[1];				$entry->translations[$m[1]] = PO::unpoify($m[2]);			} elseif (preg_match('/^".*"$/', $line)) {				$unpoified = PO::unpoify($line);				switch ($context) {					case 'msgid':						$entry->singular .= $unpoified; break;					case 'msgctxt':						$entry->context .= $unpoified; break;					case 'msgid_plural':						$entry->plural .= $unpoified; break;					case 'msgstr':						$entry->translations[0] .= $unpoified; break;					case 'msgstr_plural':						$entry->translations[$msgstr_index] .= $unpoified; break;					default:						return false;				}			} else {				return false;			}		}		if (array() == array_filter($entry->translations, create_function('$t', 'return $t || "0" === $t;'))) {			$entry->translations = array();		}		return array('entry' => $entry, 'lineno' => $lineno);	}	function read_line($f, $action = 'read') {		static $last_line = '';		static $use_last_line = false;		if ('clear' == $action) {			$last_line = '';			return true;		}		if ('put-back' == $action) {			$use_last_line = true;			return true;		}		$line = $use_last_line? $last_line : fgets($f);		$last_line = $line;		$use_last_line = false;		return $line;	}	function add_comment_to_entry(&$entry, $po_comment_line) {		$first_two = substr($po_comment_line, 0, 2);		$comment = trim(substr($po_comment_line, 2));		if ('#:' == $first_two) {			$entry->references = array_merge($entry->references, preg_split('/\s+/', $comment));		} elseif ('#.' == $first_two) {			$entry->extracted_comments = trim($entry->extracted_comments . "\n" . $comment);		} elseif ('#,' == $first_two) {			$entry->flags = array_merge($entry->flags, preg_split('/,\s*/', $comment));		} else {			$entry->translator_comments = trim($entry->translator_comments . "\n" . $comment);		}	}	function trim_quotes($s) {		if ( substr($s, 0, 1) == '"') $s = substr($s, 1);		if ( substr($s, -1, 1) == '"') $s = substr($s, 0, -1);		return $s;	}}endif;
<?php/** * The template for displaying all pages. * * This is the template that displays all pages by default. * Please note that this is the wordpress construct of pages * and that other 'pages' on your wordpress site will use a * different template. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<?php if ( is_front_page() ) { ?>						<h2 class="entry-title"><?php the_title(); ?></h2>					<?php } else { ?>							<h1 class="entry-title"><?php the_title(); ?></h1>					<?php } ?>									<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Accepts file uploads from swfupload or other asynchronous upload methods. * * @package WordPress * @subpackage Administration */define('WP_ADMIN', true);if ( defined('ABSPATH') )	require_once(ABSPATH . 'wp-load.php');else	require_once('../wp-load.php');// Flash often fails to send cookies with the POST or upload, so we need to pass it in GET or POST insteadif ( is_ssl() && empty($_COOKIE[SECURE_AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[SECURE_AUTH_COOKIE] = $_REQUEST['auth_cookie'];elseif ( empty($_COOKIE[AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[AUTH_COOKIE] = $_REQUEST['auth_cookie'];if ( empty($_COOKIE[LOGGED_IN_COOKIE]) && !empty($_REQUEST['logged_in_cookie']) )	$_COOKIE[LOGGED_IN_COOKIE] = $_REQUEST['logged_in_cookie'];unset($current_user);require_once('./admin.php');header('Content-Type: text/plain; charset=' . get_option('blog_charset'));if ( !current_user_can('upload_files') )	wp_die(__('You do not have permission to upload files.'));// just fetch the detail form for that attachmentif ( isset($_REQUEST['attachment_id']) && ($id = intval($_REQUEST['attachment_id'])) && $_REQUEST['fetch'] ) {	if ( 2 == $_REQUEST['fetch'] ) {		add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id, array( 'send' => false, 'delete' => true ));	} else {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id);	}	exit;}check_admin_referer('media-form');$id = media_handle_upload('async-upload', $_REQUEST['post_id']);if ( is_wp_error($id) ) {	echo '<div class="error-div">	<a class="dismiss" href="#" onclick="jQuery(this).parents(\'div.media-item\').slideUp(200, function(){jQuery(this).remove();});">' . __('Dismiss') . '</a>	<strong>' . sprintf(__('&#8220;%s&#8221; has failed to upload due to an error'), esc_html($_FILES['async-upload']['name']) ) . '</strong><br />' .	esc_html($id->get_error_message()) . '</div>';	exit;}if ( $_REQUEST['short'] ) {	// short form response - attachment ID only	echo $id;} else {	// long form response - big chunk o html	$type = $_REQUEST['type'];	echo apply_filters("async_upload_{$type}", $id);}?>
<?php/** * The template for displaying the footer. * * Contains the closing of the id=main div and all content * after.  Calls sidebar-footer.php for bottom widgets. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>	</div><!-- #main -->	<div id="footer" role="contentinfo">		<div id="colophon"><?php	/* A sidebar in the footer? Yep. You can can customize	 * your footer with four columns of widgets.	 */	get_sidebar( 'footer' );?>			<div id="site-info">				<a href="<?php echo home_url( '/' ) ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home">					<?php bloginfo( 'name' ); ?>				</a>			</div><!-- #site-info -->			<div id="site-generator">				<?php do_action( 'twentyten_credits' ); ?>				<a href="<?php echo esc_url( __('http://wordpress.org/', 'twentyten') ); ?>"						title="<?php esc_attr_e('Semantic Personal Publishing Platform', 'twentyten'); ?>" rel="generator">					<?php printf( __('Proudly powered by %s.', 'twentyten'), 'WordPress' ); ?>				</a>			</div><!-- #site-generator -->		</div><!-- #colophon -->	</div><!-- #footer --></div><!-- #wrapper --><?php	/* Always have wp_footer() just before the closing </body>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to reference JavaScript files.	 */	wp_footer();?></body></html>
<?php/** * Manage link administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for link actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( ! current_user_can('manage_links') )	wp_die( __('You do not have sufficient permissions to edit the links for this site.') );if ( !empty($_POST['deletebookmarks']) )	$action = 'deletebookmarks';if ( !empty($_POST['move']) )	$action = 'move';if ( !empty($_POST['linkcheck']) )	$linkcheck = $_POST['linkcheck'];$this_file = 'link-manager.php';switch ($action) {	case 'deletebookmarks' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$deleted = 0;		foreach ($linkcheck as $link_id) {			$link_id = (int) $link_id;			if ( wp_delete_link($link_id) )				$deleted++;		}		wp_redirect("$this_file?deleted=$deleted");		exit;		break;	case 'move' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$all_links = join(',', $linkcheck);		// should now have an array of links we can change		//$q = $wpdb->query("update $wpdb->links SET link_category='$category' WHERE link_id IN ($all_links)");		wp_redirect($this_file);		exit;		break;	case 'add' :		check_admin_referer('add-bookmark');		$redir = wp_get_referer();		if ( add_link() )			$redir = add_query_arg( 'added', 'true', $redir );		wp_redirect( $redir );		exit;		break;	case 'save' :		$link_id = (int) $_POST['link_id'];		check_admin_referer('update-bookmark_' . $link_id);		edit_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'delete' :		$link_id = (int) $_GET['link_id'];		check_admin_referer('delete-bookmark_' . $link_id);		wp_delete_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'edit' :		wp_enqueue_script('link');		wp_enqueue_script('xfn');		$parent_file = 'link-manager.php';		$submenu_file = 'link-manager.php';		$title = __('Edit Link');		$link_id = (int) $_GET['link_id'];		if (!$link = get_link_to_edit($link_id))			wp_die(__('Link not found.'));		include ('edit-link-form.php');		include ('admin-footer.php');		break;	default :		break;}?>
<?php/** * WordPress API for creating bbcode like tags or what WordPress calls * "shortcodes." The tag and attribute parsing or regular expression code is * based on the Textpattern tag parser. * * A few examples are below: * * [shortcode /] * [shortcode foo="bar" baz="bing" /] * [shortcode foo="bar"]content[/shortcode] * * Shortcode tags support attributes and enclosed content, but does not entirely * support inline shortcodes in other shortcodes. You will have to call the * shortcode parser in your function to account for that. * * {@internal * Please be aware that the above note was made during the beta of WordPress 2.6 * and in the future may not be accurate. Please update the note when it is no * longer the case.}} * * To apply shortcode tags to content: * * <code> * $out = do_shortcode($content); * </code> * * @link http://codex.wordpress.org/Shortcode_API * * @package WordPress * @subpackage Shortcodes * @since 2.5 *//** * Container for storing shortcode tags and their hook to call for the shortcode * * @since 2.5 * @name $shortcode_tags * @var array * @global array $shortcode_tags */$shortcode_tags = array();/** * Add hook for shortcode tag. * * There can only be one hook for each shortcode. Which means that if another * plugin has a similar shortcode, it will override yours or yours will override * theirs depending on which order the plugins are included and/or ran. * * Simplest example of a shortcode tag using the API: * * <code> * // [footag foo="bar"] * function footag_func($atts) { * 	return "foo = {$atts[foo]}"; * } * add_shortcode('footag', 'footag_func'); * </code> * * Example with nice attribute defaults: * * <code> * // [bartag foo="bar"] * function bartag_func($atts) { * 	extract(shortcode_atts(array( * 		'foo' => 'no foo', * 		'baz' => 'default baz', * 	), $atts)); * * 	return "foo = {$foo}"; * } * add_shortcode('bartag', 'bartag_func'); * </code> * * Example with enclosed content: * * <code> * // [baztag]content[/baztag] * function baztag_func($atts, $content='') { * 	return "content = $content"; * } * add_shortcode('baztag', 'baztag_func'); * </code> * * @since 2.5 * @uses $shortcode_tags * * @param string $tag Shortcode tag to be searched in post content. * @param callable $func Hook to run when shortcode is found. */function add_shortcode($tag, $func) {	global $shortcode_tags;	if ( is_callable($func) )		$shortcode_tags[$tag] = $func;}/** * Removes hook for shortcode. * * @since 2.5 * @uses $shortcode_tags * * @param string $tag shortcode tag to remove hook for. */function remove_shortcode($tag) {	global $shortcode_tags;	unset($shortcode_tags[$tag]);}/** * Clear all shortcodes. * * This function is simple, it clears all of the shortcode tags by replacing the * shortcodes global by a empty array. This is actually a very efficient method * for removing all shortcodes. * * @since 2.5 * @uses $shortcode_tags */function remove_all_shortcodes() {	global $shortcode_tags;	$shortcode_tags = array();}/** * Search content for shortcodes and filter shortcodes through their hooks. * * If there are no shortcode tags defined, then the content will be returned * without any filtering. This might cause issues when plugins are disabled but * the shortcode will still show up in the post or content. * * @since 2.5 * @uses $shortcode_tags * @uses get_shortcode_regex() Gets the search pattern for searching shortcodes. * * @param string $content Content to search for shortcodes * @return string Content with shortcodes filtered out. */function do_shortcode($content) {	global $shortcode_tags;	if (empty($shortcode_tags) || !is_array($shortcode_tags))		return $content;	$pattern = get_shortcode_regex();	return preg_replace_callback('/'.$pattern.'/s', 'do_shortcode_tag', $content);}/** * Retrieve the shortcode regular expression for searching. * * The regular expression combines the shortcode tags in the regular expression * in a regex class. * * The regular expresion contains 6 different sub matches to help with parsing. * * 1/6 - An extra [ or ] to allow for escaping shortcodes with double [[]] * 2 - The shortcode name * 3 - The shortcode argument list * 4 - The self closing / * 5 - The content of a shortcode when it wraps some content. * * @since 2.5 * @uses $shortcode_tags * * @return string The shortcode search regular expression */function get_shortcode_regex() {	global $shortcode_tags;	$tagnames = array_keys($shortcode_tags);	$tagregexp = join( '|', array_map('preg_quote', $tagnames) );	// WARNING! Do not change this regex without changing do_shortcode_tag() and strip_shortcodes()	return '(.?)\[('.$tagregexp.')\b(.*?)(?:(\/))?\](?:(.+?)\[\/\2\])?(.?)';}/** * Regular Expression callable for do_shortcode() for calling shortcode hook. * @see get_shortcode_regex for details of the match array contents. * * @since 2.5 * @access private * @uses $shortcode_tags * * @param array $m Regular expression match array * @return mixed False on failure. */function do_shortcode_tag( $m ) {	global $shortcode_tags;	// allow [[foo]] syntax for escaping a tag	if ( $m[1] == '[' && $m[6] == ']' ) {		return substr($m[0], 1, -1);	}	$tag = $m[2];	$attr = shortcode_parse_atts( $m[3] );	if ( isset( $m[5] ) ) {		// enclosing tag - extra parameter		return $m[1] . call_user_func( $shortcode_tags[$tag], $attr, $m[5], $tag ) . $m[6];	} else {		// self-closing tag		return $m[1] . call_user_func( $shortcode_tags[$tag], $attr, NULL,  $tag ) . $m[6];	}}/** * Retrieve all attributes from the shortcodes tag. * * The attributes list has the attribute name as the key and the value of the * attribute as the value in the key/value pair. This allows for easier * retrieval of the attributes, since all attributes have to be known. * * @since 2.5 * * @param string $text * @return array List of attributes and their value. */function shortcode_parse_atts($text) {	$atts = array();	$pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';	$text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);	if ( preg_match_all($pattern, $text, $match, PREG_SET_ORDER) ) {		foreach ($match as $m) {			if (!empty($m[1]))				$atts[strtolower($m[1])] = stripcslashes($m[2]);			elseif (!empty($m[3]))				$atts[strtolower($m[3])] = stripcslashes($m[4]);			elseif (!empty($m[5]))				$atts[strtolower($m[5])] = stripcslashes($m[6]);			elseif (isset($m[7]) and strlen($m[7]))				$atts[] = stripcslashes($m[7]);			elseif (isset($m[8]))				$atts[] = stripcslashes($m[8]);		}	} else {		$atts = ltrim($text);	}	return $atts;}/** * Combine user attributes with known attributes and fill in defaults when needed. * * The pairs should be considered to be all of the attributes which are * supported by the caller and given as a list. The returned attributes will * only contain the attributes in the $pairs list. * * If the $atts list has unsupported attributes, then they will be ignored and * removed from the final returned list. * * @since 2.5 * * @param array $pairs Entire list of supported attributes and their defaults. * @param array $atts User defined attributes in shortcode tag. * @return array Combined and filtered attribute list. */function shortcode_atts($pairs, $atts) {	$atts = (array)$atts;	$out = array();	foreach($pairs as $name => $default) {		if ( array_key_exists($name, $atts) )			$out[$name] = $atts[$name];		else			$out[$name] = $default;	}	return $out;}/** * Remove all shortcode tags from the given content. * * @since 2.5 * @uses $shortcode_tags * * @param string $content Content to remove shortcode tags. * @return string Content without shortcode tags. */function strip_shortcodes( $content ) {	global $shortcode_tags;	if (empty($shortcode_tags) || !is_array($shortcode_tags))		return $content;	$pattern = get_shortcode_regex();	return preg_replace('/'.$pattern.'/s', '$1$6', $content);}add_filter('the_content', 'do_shortcode', 11); // AFTER wpautop()?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * RSS 1 RDF Feed Template for displaying RSS 1 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rdf') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rdf:RDF	xmlns="http://purl.org/rss/1.0/"	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:admin="http://webns.net/mvcb/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	<?php do_action('rdf_ns'); ?>><channel rdf:about="<?php bloginfo_rss("url") ?>">	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></dc:date>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>	<?php do_action('rdf_header'); ?>	<items>		<rdf:Seq>		<?php while (have_posts()): the_post(); ?>			<rdf:li rdf:resource="<?php the_permalink_rss() ?>"/>		<?php endwhile; ?>		</rdf:Seq>	</items></channel><?php rewind_posts(); while (have_posts()): the_post(); ?><item rdf:about="<?php the_permalink_rss() ?>">	<title><?php the_title_rss() ?></title>	<link><?php the_permalink_rss() ?></link>	 <dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', $post->post_date_gmt, false); ?></dc:date>	<dc:creator><?php the_author() ?></dc:creator>	<?php the_category_rss('rdf') ?><?php if (get_option('rss_use_excerpt')) : ?>	<description><?php the_excerpt_rss() ?></description><?php else : ?>	<description><?php the_excerpt_rss() ?></description>	<content:encoded><![CDATA[<?php the_content_feed('rdf') ?>]]></content:encoded><?php endif; ?>	<?php do_action('rdf_item'); ?></item><?php endwhile;  ?></rdf:RDF>
<?php/** * Widgets administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );/** WordPress Administration Widgets API */require_once(ABSPATH . 'wp-admin/includes/widgets.php');if ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ));wp_admin_css( 'widgets' );$widgets_access = get_user_setting( 'widgets_access' );if ( isset($_GET['widgets-access']) ) {	$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';	set_user_setting( 'widgets_access', $widgets_access );}if ( 'on' == $widgets_access )	add_filter( 'admin_body_class', create_function('', '{return " widgets_access ";}') );else	wp_enqueue_script('admin-widgets');do_action( 'sidebar_admin_setup' );$title = __( 'Widgets' );$parent_file = 'themes.php';$help = '	<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>	<p>' . __('Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>	<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>	<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>	<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>	<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Widgets_SubPanel" target="_blank">Widgets Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// register the inactive_widgets area as sidebarregister_sidebar(array(	'name' => __('Inactive Widgets'),	'id' => 'wp_inactive_widgets',	'description' => '',	'before_widget' => '',	'after_widget' => '',	'before_title' => '',	'after_title' => '',));// These are the widgets grouped by sidebar$sidebars_widgets = wp_get_sidebars_widgets();if ( empty( $sidebars_widgets ) )	$sidebars_widgets = wp_get_widget_defaults();// look for "lost" widgets, this has to run at least on each theme changefunction retrieve_widgets() {	global $wp_registered_widget_updates, $wp_registered_sidebars, $sidebars_widgets, $wp_registered_widgets;	$_sidebars_widgets = array();	$sidebars = array_keys($wp_registered_sidebars);	unset( $sidebars_widgets['array_version'] );	$old = array_keys($sidebars_widgets);	sort($old);	sort($sidebars);	if ( $old == $sidebars )		return;	// Move the known-good ones first	foreach ( $sidebars as $id ) {		if ( array_key_exists( $id, $sidebars_widgets ) ) {			$_sidebars_widgets[$id] = $sidebars_widgets[$id];			unset($sidebars_widgets[$id], $sidebars[$id]);		}	}	// if new theme has less sidebars than the old theme	if ( !empty($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $lost => $val ) {			if ( is_array($val) )				$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );		}	}	// discard invalid, theme-specific widgets from sidebars	$shown_widgets = array();	foreach ( $_sidebars_widgets as $sidebar => $widgets ) {		if ( !is_array($widgets) )			continue;		$_widgets = array();		foreach ( $widgets as $widget ) {			if ( isset($wp_registered_widgets[$widget]) )				$_widgets[] = $widget;		}		$_sidebars_widgets[$sidebar] = $_widgets;		$shown_widgets = array_merge($shown_widgets, $_widgets);	}	$sidebars_widgets = $_sidebars_widgets;	unset($_sidebars_widgets, $_widgets);	// find hidden/lost multi-widget instances	$lost_widgets = array();	foreach ( $wp_registered_widgets as $key => $val ) {		if ( in_array($key, $shown_widgets, true) )			continue;		$number = preg_replace('/.+?-([0-9]+)$/', '$1', $key);		if ( 2 > (int) $number )			continue;		$lost_widgets[] = $key;	}	$sidebars_widgets['wp_inactive_widgets'] = array_merge($lost_widgets, (array) $sidebars_widgets['wp_inactive_widgets']);	wp_set_sidebars_widgets($sidebars_widgets);}retrieve_widgets();if ( count($wp_registered_sidebars) == 1 ) {	// If only "wp_inactive_widgets" is defined the theme has no sidebars, die.	require_once( './admin-header.php' );?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>		<div class="error">			<p><?php _e( 'No Sidebars Defined' ); ?></p>		</div>		<p><?php _e( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href="http://codex.wordpress.org/Widgetizing_Themes">follow these instructions</a>.' ); ?></p>	</div><?php	require_once( './admin-footer.php' );	exit;}// We're saving a widget without jsif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {	$widget_id = $_POST['widget-id'];	check_admin_referer("save-delete-widget-$widget_id");	$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';	if ( $number ) {		foreach ( $_POST as $key => $val ) {			if ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {				$_POST[$key] = array( $number => array_shift($val) );				break;			}		}	}	$sidebar_id = $_POST['sidebar'];	$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;	$id_base = $_POST['id_base'];	$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();	// delete	if ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {		if ( !in_array($widget_id, $sidebar, true) ) {			wp_redirect('widgets.php?error=0');			exit;		}		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name != $id_base || !is_callable($control['callback']) )			continue;		ob_start();			call_user_func_array( $control['callback'], $control['params'] );		ob_end_clean();		break;	}	$sidebars_widgets[$sidebar_id] = $sidebar;	// remove old position	if ( !isset($_POST['delete_widget']) ) {		foreach ( $sidebars_widgets as $key => $sb ) {			if ( is_array($sb) )				$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );		}		array_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );	}	wp_set_sidebars_widgets($sidebars_widgets);	wp_redirect('widgets.php?message=0');	exit;}// Output the widget form without jsif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {	$widget_id = $_GET['editwidget'];	if ( isset($_GET['addnew']) ) {		// Default to the first sidebar		$sidebar = array_shift( $keys = array_keys($wp_registered_sidebars) );		if ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget			// Copy minimal info from an existing instance of this widget to a new instance			foreach ( $wp_registered_widget_controls as $control ) {				if ( $_GET['base'] === $control['id_base'] ) {					$control_callback = $control['callback'];					$multi_number = (int) $_GET['num'];					$control['params'][0]['number'] = -1;					$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;					$wp_registered_widget_controls[$control['id']] = $control;					break;				}			}		}	}	if ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {		$control = $wp_registered_widget_controls[$widget_id];		$control_callback = $control['callback'];	} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {		$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );	}	if ( !isset($name) )		$name = esc_html( strip_tags($control['name']) );	if ( !isset($sidebar) )		$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';	if ( !isset($multi_number) )		$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];	// show the widget form	$width = ' style="width:' . max($control['width'], 350) . 'px"';	$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;	require_once( './admin-header.php' ); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<div class="editwidget"<?php echo $width; ?>>	<h3><?php printf( __( 'Widget %s' ), $name ); ?></h3>	<form action="widgets.php" method="post">	<div class="widget-inside"><?php	if ( is_callable( $control_callback ) )		call_user_func_array( $control_callback, $control['params'] );	else		echo '<p>' . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<p class="describe"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>	<div class="widget-position">	<table class="widefat"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody><?php	foreach ( $wp_registered_sidebars as $sbname => $sbvalue ) {		echo "\t\t<tr><td><label><input type='radio' name='sidebar' value='" . esc_attr($sbname) . "'" . checked( $sbname, $sidebar, false ) . " /> $sbvalue[name]</label></td><td>";		if ( 'wp_inactive_widgets' == $sbname ) {			echo '&nbsp;';		} else {			if ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {				$j = 1;				$sidebars_widgets[$sbname] = array();			} else {				$j = count($sidebars_widgets[$sbname]);				if ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )					$j++;			}			$selected = '';			echo "\t\t<select name='{$sbname}_position'>\n";			echo "\t\t<option value=''>" . __('&mdash; Select &mdash;') . "</option>\n";			for ( $i = 1; $i <= $j; $i++ ) {				if ( in_array($widget_id, $sidebars_widgets[$sbname], true) )					$selected = selected( $i, $key + 1, false );				echo "\t\t<option value='$i'$selected> $i </option>\n";			}			echo "\t\t</select>\n";		}		echo "</td></tr>\n";	} ?>	</tbody></table>	</div>	<div class="widget-control-actions"><?php	if ( isset($_GET['addnew']) ) { ?>	<a href="widgets.php" class="button alignleft"><?php _e('Cancel'); ?></a><?php	} else { ?>	<input type="submit" name="removewidget" class="button alignleft" value="<?php esc_attr_e('Delete'); ?>" /><?php	} ?>	<input type="submit" name="savewidget" class="button-primary alignright" value="<?php esc_attr_e('Save Widget'); ?>" />	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($widget_id); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" /><?php	wp_nonce_field("save-delete-widget-$widget_id"); ?>	<br class="clear" />	</div>	</form>	</div>	</div><?php	require_once( './admin-footer.php' );	exit;}$messages = array(	__('Changes saved.'));$errors = array(	__('Error while saving.'),	__('Error in displaying the widget settings form.'));require_once( './admin-header.php' ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?><div id="message" class="updated"><p><?php echo $messages[$_GET['message']]; ?></p></div><?php } ?><?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?><div id="message" class="error"><p><?php echo $errors[$_GET['error']]; ?></p></div><?php } ?><?php do_action( 'widgets_admin_page' ); ?><div class="widget-liquid-left"><div id="widgets-left">	<div id="available-widgets" class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Available Widgets'); ?> <span id="removing-widget"><?php _e('Deactivate'); ?> <span></span></span></h3></div>		<div class="widget-holder">		<p class="description"><?php _e('Drag widgets from here to a sidebar on the right to activate them. Drag widgets back here to deactivate them and delete their settings.'); ?></p>		<div id="widget-list">		<?php wp_list_widgets(); ?>		</div>		<br class='clear' />		</div>		<br class="clear" />	</div>	<div class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Inactive Widgets'); ?>		<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>		<div class="widget-holder inactive">		<p class="description"><?php _e('Drag widgets here to remove them from the sidebar but keep their settings.'); ?></p>		<?php wp_list_widget_controls('wp_inactive_widgets'); ?>		<br class="clear" />		</div>	</div></div></div><div class="widget-liquid-right"><div id="widgets-right"><?php$i = 0;foreach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {	if ( 'wp_inactive_widgets' == $sidebar )		continue;	$closed = $i ? ' closed' : ''; ?>	<div class="widgets-holder-wrap<?php echo $closed; ?>">	<div class="sidebar-name">	<div class="sidebar-name-arrow"><br /></div>	<h3><?php echo esc_html( $registered_sidebar['name'] ); ?>	<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_dark.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>	<?php wp_list_widget_controls( $sidebar ); // Show the control forms for each of the widgets in this sidebar ?>	</div><?php	$i++;} ?></div></div><form action="" method="post"><?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?></form><br class="clear" /></div><?phpdo_action( 'sidebar_admin_page' );require_once( './admin-footer.php' );
<?php/** * Base WordPress Filesystem. * * @package WordPress * @subpackage Filesystem *//** * Base WordPress Filesystem class for which Filesystem implementations extend * * @since 2.5 */class WP_Filesystem_Base {	/**	 * Whether to display debug data for the connection.	 *	 * @since 2.5	 * @access public	 * @var bool	 */	var $verbose = false;	/**	 * Cached list of local filepaths to maped remote filepaths.	 *	 * @since 2.7	 * @access private	 * @var array	 */	var $cache = array();	/**	 * The Access method of the current connection, Set automatically.	 *	 * @since 2.5	 * @access public	 * @var string	 */	var $method = '';	/**	 * Returns the path on the remote filesystem of ABSPATH	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function abspath() {		$folder = $this->find_folder(ABSPATH);		//Perhaps the FTP folder is rooted at the WordPress install, Check for wp-includes folder in root, Could have some false positives, but rare.		if ( ! $folder && $this->is_dir('/wp-includes') )			$folder = '/';		return $folder;	}	/**	 * Returns the path on the remote filesystem of WP_CONTENT_DIR	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function wp_content_dir() {		return $this->find_folder(WP_CONTENT_DIR);	}	/**	 * Returns the path on the remote filesystem of WP_PLUGIN_DIR	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_plugins_dir() {		return $this->find_folder(WP_PLUGIN_DIR);	}	/**	 * Returns the path on the remote filesystem of the Themes Directory	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_themes_dir() {		return $this->wp_content_dir() . '/themes';	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function find_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function get_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Assumes that on Windows systems, Stripping off the Drive letter is OK	 * Sanitizes \\ to / in windows filepaths.	 *	 * @since 2.7	 * @access public	 *	 * @param string $folder the folder to locate	 * @return string The location of the remote path.	 */	function find_folder($folder) {		if ( strpos($this->method, 'ftp') !== false ) {			$constant_overrides = array( 'FTP_BASE' => ABSPATH, 'FTP_CONTENT_DIR' => WP_CONTENT_DIR, 'FTP_PLUGIN_DIR' => WP_PLUGIN_DIR );			foreach ( $constant_overrides as $constant => $dir )				if ( defined($constant) && $folder === $dir )					return trailingslashit(constant($constant));		} elseif ( 'direct' == $this->method ) {			$folder = str_replace('\\', '/', $folder); //Windows path sanitiation			return trailingslashit($folder);		}		$folder = preg_replace('|^([a-z]{1}):|i', '', $folder); //Strip out windows driveletter if its there.		$folder = str_replace('\\', '/', $folder); //Windows path sanitiation		if ( isset($this->cache[ $folder ] ) )			return $this->cache[ $folder ];		if ( $this->exists($folder) ) { //Folder exists at that absolute path.			$folder = trailingslashit($folder);			$this->cache[ $folder ] = $folder;			return $folder;		}		if ( $return = $this->search_for_folder($folder) )			$this->cache[ $folder ] = $return;		return $return;	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Expects Windows sanitized path	 *	 * @since 2.7	 * @access private	 *	 * @param string $folder the folder to locate	 * @param string $base the folder to start searching from	 * @param bool $loop if the function has recursed, Internal use only	 * @return string The location of the remote path.	 */	function search_for_folder($folder, $base = '.', $loop = false ) {		if ( empty( $base ) || '.' == $base )			$base = trailingslashit($this->cwd());		$folder = untrailingslashit($folder);		$folder_parts = explode('/', $folder);		$last_path = $folder_parts[ count($folder_parts) - 1 ];		$files = $this->dirlist( $base );		foreach ( $folder_parts as $key ) {			if ( $key == $last_path )				continue; //We want this to be caught by the next code block.			//Working from /home/ to /user/ to /wordpress/ see if that file exists within the current folder,			// If its found, change into it and follow through looking for it.			// If it cant find WordPress down that route, it'll continue onto the next folder level, and see if that matches, and so on.			// If it reaches the end, and still cant find it, it'll return false for the entire function.			if ( isset($files[ $key ]) ){				//Lets try that folder:				$newdir = trailingslashit(path_join($base, $key));				if ( $this->verbose )					printf( __('Changing to %s') . '<br/>', $newdir );				if ( $ret = $this->search_for_folder( $folder, $newdir, $loop) )					return $ret;			}		}		//Only check this as a last resort, to prevent locating the incorrect install. All above proceeedures will fail quickly if this is the right branch to take.		if (isset( $files[ $last_path ] ) ) {			if ( $this->verbose )				printf( __('Found %s') . '<br/>',  $base . $last_path );			return trailingslashit($base . $last_path);		}		if ( $loop )			return false; //Prevent tihs function looping again.		//As an extra last resort, Change back to / if the folder wasnt found. This comes into effect when the CWD is /home/user/ but WP is at /var/www/.... mainly dedicated setups.		return $this->search_for_folder($folder, '/', true);	}	/**	 * Returns the *nix style file permissions for a file	 *	 * From the PHP documentation page for fileperms()	 *	 * @link http://docs.php.net/fileperms	 * @since 2.5	 * @access public	 *	 * @param string $file string filename	 * @return int octal representation of permissions	 */	function gethchmod($file){		$perms = $this->getchmod($file);		if (($perms & 0xC000) == 0xC000) // Socket			$info = 's';		elseif (($perms & 0xA000) == 0xA000) // Symbolic Link			$info = 'l';		elseif (($perms & 0x8000) == 0x8000) // Regular			$info = '-';		elseif (($perms & 0x6000) == 0x6000) // Block special			$info = 'b';		elseif (($perms & 0x4000) == 0x4000) // Directory			$info = 'd';		elseif (($perms & 0x2000) == 0x2000) // Character special			$info = 'c';		elseif (($perms & 0x1000) == 0x1000) // FIFO pipe			$info = 'p';		else // Unknown			$info = 'u';		// Owner		$info .= (($perms & 0x0100) ? 'r' : '-');		$info .= (($perms & 0x0080) ? 'w' : '-');		$info .= (($perms & 0x0040) ?					(($perms & 0x0800) ? 's' : 'x' ) :					(($perms & 0x0800) ? 'S' : '-'));		// Group		$info .= (($perms & 0x0020) ? 'r' : '-');		$info .= (($perms & 0x0010) ? 'w' : '-');		$info .= (($perms & 0x0008) ?					(($perms & 0x0400) ? 's' : 'x' ) :					(($perms & 0x0400) ? 'S' : '-'));		// World		$info .= (($perms & 0x0004) ? 'r' : '-');		$info .= (($perms & 0x0002) ? 'w' : '-');		$info .= (($perms & 0x0001) ?					(($perms & 0x0200) ? 't' : 'x' ) :					(($perms & 0x0200) ? 'T' : '-'));		return $info;	}	/**	 * Converts *nix style file permissions to a octal number.	 *	 * Converts '-rw-r--r--' to 0644	 * From "info at rvgate dot nl"'s comment on the PHP documentation for chmod() 	 *	 * @link http://docs.php.net/manual/en/function.chmod.php#49614	 * @since 2.5	 * @access public	 *	 * @param string $mode string *nix style file permission	 * @return int octal representation	 */	function getnumchmodfromh($mode) {		$realmode = '';		$legal =  array('', 'w', 'r', 'x', '-');		$attarray = preg_split('//', $mode);		for ($i=0; $i < count($attarray); $i++)		   if ($key = array_search($attarray[$i], $legal))			   $realmode .= $legal[$key];		$mode = str_pad($realmode, 9, '-');		$trans = array('-'=>'0', 'r'=>'4', 'w'=>'2', 'x'=>'1');		$mode = strtr($mode,$trans);		$newmode = '';		$newmode .= $mode[0] + $mode[1] + $mode[2];		$newmode .= $mode[3] + $mode[4] + $mode[5];		$newmode .= $mode[6] + $mode[7] + $mode[8];		return $newmode;	}	/**	 * Determines if the string provided contains binary characters.	 *	 * @since 2.7	 * @access private	 *	 * @param string $text String to test against	 * @return bool true if string is binary, false otherwise	 */	function is_binary( $text ) {		return (bool) preg_match('|[^\x20-\x7E]|', $text); //chr(32)..chr(127)	}}?>
<?php/** * Portable PHP password hashing framework. * @package phpass * @since 2.5 * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ */## Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in# the public domain.## There's absolutely no warranty.## Please be sure to update the Version line if you edit this file in any way.# It is suggested that you leave the main version number intact, but indicate# your project name (after the slash) and add your own revision information.## Please do not change the "private" password hashing method implemented in# here, thereby making your hashes incompatible.  However, if you must, please# change the hash type identifier (the "$P$") to something different.## Obviously, since this code is in the public domain, the above are not# requirements (there can be none), but merely suggestions.#/** * Portable PHP password hashing framework. * * @package phpass * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ * @since 2.5 */class PasswordHash {	var $itoa64;	var $iteration_count_log2;	var $portable_hashes;	var $random_state;	function PasswordHash($iteration_count_log2, $portable_hashes)	{		$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)			$iteration_count_log2 = 8;		$this->iteration_count_log2 = $iteration_count_log2;		$this->portable_hashes = $portable_hashes;		$this->random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons	}	function get_random_bytes($count)	{		$output = '';		if ( @is_readable('/dev/urandom') &&		    ($fh = @fopen('/dev/urandom', 'rb'))) {			$output = fread($fh, $count);			fclose($fh);		}		if (strlen($output) < $count) {			$output = '';			for ($i = 0; $i < $count; $i += 16) {				$this->random_state =				    md5(microtime() . $this->random_state);				$output .=				    pack('H*', md5($this->random_state));			}			$output = substr($output, 0, $count);		}		return $output;	}	function encode64($input, $count)	{		$output = '';		$i = 0;		do {			$value = ord($input[$i++]);			$output .= $this->itoa64[$value & 0x3f];			if ($i < $count)				$value |= ord($input[$i]) << 8;			$output .= $this->itoa64[($value >> 6) & 0x3f];			if ($i++ >= $count)				break;			if ($i < $count)				$value |= ord($input[$i]) << 16;			$output .= $this->itoa64[($value >> 12) & 0x3f];			if ($i++ >= $count)				break;			$output .= $this->itoa64[($value >> 18) & 0x3f];		} while ($i < $count);		return $output;	}	function gensalt_private($input)	{		$output = '$P$';		$output .= $this->itoa64[min($this->iteration_count_log2 +			((PHP_VERSION >= '5') ? 5 : 3), 30)];		$output .= $this->encode64($input, 6);		return $output;	}	function crypt_private($password, $setting)	{		$output = '*0';		if (substr($setting, 0, 2) == $output)			$output = '*1';		if (substr($setting, 0, 3) != '$P$')			return $output;		$count_log2 = strpos($this->itoa64, $setting[3]);		if ($count_log2 < 7 || $count_log2 > 30)			return $output;		$count = 1 << $count_log2;		$salt = substr($setting, 4, 8);		if (strlen($salt) != 8)			return $output;		# We're kind of forced to use MD5 here since it's the only		# cryptographic primitive available in all versions of PHP		# currently in use.  To implement our own low-level crypto		# in PHP would result in much worse performance and		# consequently in lower iteration counts and hashes that are		# quicker to crack (by non-PHP code).		if (PHP_VERSION >= '5') {			$hash = md5($salt . $password, TRUE);			do {				$hash = md5($hash . $password, TRUE);			} while (--$count);		} else {			$hash = pack('H*', md5($salt . $password));			do {				$hash = pack('H*', md5($hash . $password));			} while (--$count);		}		$output = substr($setting, 0, 12);		$output .= $this->encode64($hash, 16);		return $output;	}	function gensalt_extended($input)	{		$count_log2 = min($this->iteration_count_log2 + 8, 24);		# This should be odd to not reveal weak DES keys, and the		# maximum valid value is (2**24 - 1) which is odd anyway.		$count = (1 << $count_log2) - 1;		$output = '_';		$output .= $this->itoa64[$count & 0x3f];		$output .= $this->itoa64[($count >> 6) & 0x3f];		$output .= $this->itoa64[($count >> 12) & 0x3f];		$output .= $this->itoa64[($count >> 18) & 0x3f];		$output .= $this->encode64($input, 3);		return $output;	}	function gensalt_blowfish($input)	{		# This one needs to use a different order of characters and a		# different encoding scheme from the one in encode64() above.		# We care because the last character in our encoded string will		# only represent 2 bits.  While two known implementations of		# bcrypt will happily accept and correct a salt string which		# has the 4 unused bits set to non-zero, we do not want to take		# chances and we also do not want to waste an additional byte		# of entropy.		$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';		$output = '$2a$';		$output .= chr(ord('0') + $this->iteration_count_log2 / 10);		$output .= chr(ord('0') + $this->iteration_count_log2 % 10);		$output .= '$';		$i = 0;		do {			$c1 = ord($input[$i++]);			$output .= $itoa64[$c1 >> 2];			$c1 = ($c1 & 0x03) << 4;			if ($i >= 16) {				$output .= $itoa64[$c1];				break;			}			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 4;			$output .= $itoa64[$c1];			$c1 = ($c2 & 0x0f) << 2;			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 6;			$output .= $itoa64[$c1];			$output .= $itoa64[$c2 & 0x3f];		} while (1);		return $output;	}	function HashPassword($password)	{		$random = '';		if (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {			$random = $this->get_random_bytes(16);			$hash =			    crypt($password, $this->gensalt_blowfish($random));			if (strlen($hash) == 60)				return $hash;		}		if (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {			if (strlen($random) < 3)				$random = $this->get_random_bytes(3);			$hash =			    crypt($password, $this->gensalt_extended($random));			if (strlen($hash) == 20)				return $hash;		}		if (strlen($random) < 6)			$random = $this->get_random_bytes(6);		$hash =		    $this->crypt_private($password,		    $this->gensalt_private($random));		if (strlen($hash) == 34)			return $hash;		# Returning '*' on error is safe here, but would _not_ be safe		# in a crypt(3)-like function used _both_ for generating new		# hashes and for validating passwords against existing hashes.		return '*';	}	function CheckPassword($password, $stored_hash)	{		$hash = $this->crypt_private($password, $stored_hash);		if ($hash[0] == '*')			$hash = crypt($password, $stored_hash);		return $hash == $stored_hash;	}}?>
<?php/** * RSS2 Feed Template for displaying RSS2 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"	<?php do_action('rss2_ns'); ?>><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<language><?php echo get_option('rss_language'); ?></language>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('rss2_head'); ?>	<?php while( have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<link><?php the_permalink_rss() ?></link>		<comments><?php comments_link_feed(); ?></comments>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false); ?></pubDate>		<dc:creator><?php the_author() ?></dc:creator>		<?php the_category_rss() ?>		<guid isPermaLink="false"><?php the_guid(); ?></guid><?php if (get_option('rss_use_excerpt')) : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description><?php else : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>	<?php if ( strlen( $post->post_content ) > 0 ) : ?>		<content:encoded><![CDATA[<?php the_content_feed('rss2') ?>]]></content:encoded>	<?php else : ?>		<content:encoded><![CDATA[<?php the_excerpt_rss() ?>]]></content:encoded>	<?php endif; ?><?php endif; ?>		<wfw:commentRss><?php echo esc_url( get_post_comments_feed_link(null, 'rss2') ); ?></wfw:commentRss>		<slash:comments><?php echo get_comments_number(); ?></slash:comments><?php rss_enclosure(); ?>	<?php do_action('rss2_item'); ?>	</item>	<?php endwhile; ?></channel></rss>
<?php/** * Contains Translation_Entry class * * @version $Id: entry.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage entry */if ( !class_exists( 'Translation_Entry' ) ):/** * Translation_Entry class encapsulates a translatable string */class Translation_Entry {	/**	 * Whether the entry contains a string and its plural form, default is false	 *	 * @var boolean	 */	var $is_plural = false;	var $context = null;	var $singular = null;	var $plural = null;	var $translations = array();	var $translator_comments = '';	var $extracted_comments = '';	var $references = array();	var $flags = array();	/**	 * @param array $args associative array, support following keys:	 * 	- singular (string) -- the string to translate, if omitted and empty entry will be created	 * 	- plural (string) -- the plural form of the string, setting this will set {@link $is_plural} to true	 * 	- translations (array) -- translations of the string and possibly -- its plural forms	 * 	- context (string) -- a string differentiating two equal strings used in different contexts	 * 	- translator_comments (string) -- comments left by translators	 * 	- extracted_comments (string) -- comments left by developers	 * 	- references (array) -- places in the code this strings is used, in relative_to_root_path/file.php:linenum form	 * 	- flags (array) -- flags like php-format	 */	function Translation_Entry($args=array()) {		// if no singular -- empty object		if (!isset($args['singular'])) {			return;		}		// get member variable values from args hash		foreach ($args as $varname => $value) {			$this->$varname = $value;		}		if (isset($args['plural'])) $this->is_plural = true;		if (!is_array($this->translations)) $this->translations = array();		if (!is_array($this->references)) $this->references = array();		if (!is_array($this->flags)) $this->flags = array();	}	/**	 * Generates a unique key for this entry	 *	 * @return string|bool the key or false if the entry is empty	 */	function key() {		if (is_null($this->singular)) return false;		// prepend context and EOT, like in MO files		return is_null($this->context)? $this->singular : $this->context.chr(4).$this->singular;	}}endif;
<?php/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );add_action( 'wp_head', 'signuppageheaders' ) ;require( './wp-blog-header.php' );require_once( ABSPATH . WPINC . '/registration.php' );if ( is_array( get_site_option( 'illegal_names' )) && isset( $_GET[ 'new' ] ) && in_array( $_GET[ 'new' ], get_site_option( 'illegal_names' ) ) == true ) {	wp_redirect( network_home_url() );	die();}function do_signup_header() {	do_action("signup_header");}add_action( 'wp_head', 'do_signup_header' );function signuppageheaders() {	echo "<meta name='robots' content='noindex,nofollow' />\n";}if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}if ( !is_main_site() ) {	wp_redirect( network_home_url( 'wp-signup.php' ) );	die();}// Fix for page title$wp_query->is_404 = false;function wpmu_signup_stylesheet() {	?>	<style type="text/css">		.mu_register { width: 90%; margin:0 auto; }		.mu_register form { margin-top: 2em; }		.mu_register .error { font-weight:700; padding:10px; color:#333333; background:#FFEBE8; border:1px solid #CC0000; }		.mu_register input[type="submit"],			.mu_register #blog_title,			.mu_register #user_email,			.mu_register #blogname,			.mu_register #user_name { width:100%; font-size: 24px; margin:5px 0; }		.mu_register .prefix_address,			.mu_register .suffix_address {font-size: 18px;display:inline; }		.mu_register label { font-weight:700; font-size:15px; display:block; margin:10px 0; }		.mu_register label.checkbox { display:inline; }		.mu_register .mu_alert { font-weight:700; padding:10px; color:#333333; background:#ffffe0; border:1px solid #e6db55; }	</style>	<?php}add_action( 'wp_head', 'wpmu_signup_stylesheet' );get_header();do_action( 'before_signup_form' );?><div id="content" class="widecolumn"><div class="mu_register"><?phpfunction show_blog_form($blogname = '', $blog_title = '', $errors = '') {	global $current_site;	// Blog name	if ( !is_subdomain_install() )		echo '<label for="blogname">' . __('Site Name:') . '</label>';	else		echo '<label for="blogname">' . __('Site Domain:') . '</label>';	if ( $errmsg = $errors->get_error_message('blogname') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	if ( !is_subdomain_install() )		echo '<span class="prefix_address">' . $current_site->domain . $current_site->path . '</span><input name="blogname" type="text" id="blogname" value="'. esc_attr($blogname) .'" maxlength="60" /><br />';	else		echo '<input name="blogname" type="text" id="blogname" value="'.esc_attr($blogname).'" maxlength="60" /><span class="suffix_address">.' . ( $site_domain = preg_replace( '|^www\.|', '', $current_site->domain ) ) . '</span><br />';	if ( !is_user_logged_in() ) {		print '(<strong>' . __( 'Your address will be ' );		if ( !is_subdomain_install() )			print $current_site->domain . $current_site->path . __( 'sitename' );		else			print __( 'domain.' ) . $site_domain . $current_site->path;		echo '.</strong>) ' . __( 'Must be at least 4 characters, letters and numbers only. It cannot be changed, so choose carefully!' ) . '</p>';	}	// Blog Title	?>	<label for="blog_title"><?php _e('Site Title:') ?></label>	<?php if ( $errmsg = $errors->get_error_message('blog_title') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	echo '<input name="blog_title" type="text" id="blog_title" value="'.esc_attr($blog_title).'" />';	?>	<div id="privacy">        <p class="privacy-intro">            <label for="blog_public_on"><?php _e('Privacy:') ?></label>            <?php _e('Allow my site to appear in search engines like Google, Technorati, and in public listings around this network.'); ?>            <br style="clear:both" />            <label class="checkbox" for="blog_public_on">                <input type="radio" id="blog_public_on" name="blog_public" value="1" <?php if ( !isset( $_POST['blog_public'] ) || $_POST['blog_public'] == '1' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'Yes' ); ?></strong>            </label>            <label class="checkbox" for="blog_public_off">                <input type="radio" id="blog_public_off" name="blog_public" value="0" <?php if ( isset( $_POST['blog_public'] ) && $_POST['blog_public'] == '0' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'No' ); ?></strong>            </label>        </p>	</div>	<?php	do_action('signup_blogform', $errors);}function validate_blog_form() {	$user = '';	if ( is_user_logged_in() )		$user = wp_get_current_user();	return wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title'], $user);}function show_user_form($user_name = '', $user_email = '', $errors = '') {	// User name	echo '<label for="user_name">' . __('Username:') . '</label>';	if ( $errmsg = $errors->get_error_message('user_name') ) {		echo '<p class="error">'.$errmsg.'</p>';	}	echo '<input name="user_name" type="text" id="user_name" value="'. esc_attr($user_name) .'" maxlength="60" /><br />';	_e( '(Must be at least 4 characters, letters and numbers only.)' );	?>	<label for="user_email"><?php _e( 'Email&nbsp;Address:' ) ?></label>	<?php if ( $errmsg = $errors->get_error_message('user_email') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php } ?>	<input name="user_email" type="text" id="user_email" value="<?php  echo esc_attr($user_email) ?>" maxlength="200" /><br /><?php _e('We send your registration email to this address. (Double-check your email address before continuing.)') ?>	<?php	if ( $errmsg = $errors->get_error_message('generic') ) {		echo '<p class="error">' . $errmsg . '</p>';	}	do_action( 'signup_extra_fields', $errors );}function validate_user_form() {	return wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);}function signup_another_blog($blogname = '', $blog_title = '', $errors = '') {	global $current_user, $current_site;	if ( ! is_wp_error($errors) ) {		$errors = new WP_Error();	}	// allow definition of default variables	$filtered_results = apply_filters('signup_another_blog_init', array('blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	echo '<h2>' . sprintf( __( 'Get <em>another</em> %s site in seconds' ), $current_site->site_name ) . '</h2>';	if ( $errors->get_error_code() ) {		echo '<p>' . __( 'There was a problem, please correct the form below and try again.' ) . '</p>';	}	?>	<p><?php printf( __( 'Welcome back, %s. By filling out the form below, you can <strong>add another site to your account</strong>. There is no limit to the number of sites you can have, so create to your heart&#8217;s content, but write responsibly!' ), $current_user->display_name ) ?></p>	<?php	$blogs = get_blogs_of_user($current_user->ID);	if ( !empty($blogs) ) { ?>			<p><?php _e( 'Sites you are already a member of:' ) ?></p>			<ul>				<?php foreach ( $blogs as $blog ) {					$home_url = get_home_url( $blog->userblog_id );					echo '<li><a href="' . esc_url( $home_url ) . '">' . $home_url . '</a></li>';				} ?>			</ul>	<?php } ?>	<p><?php _e( 'If you&#8217;re not going to use a great site domain, leave it for a new user. Now have at it!' ) ?></p>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="gimmeanotherblog" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e( 'Create Site' ) ?>" /></p>	</form>	<?php}function validate_another_blog_signup() {	global $wpdb, $current_user, $blogname, $blog_title, $errors, $domain, $path;	$current_user = wp_get_current_user();	if ( !is_user_logged_in() )		die();	$result = validate_blog_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_another_blog($blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = apply_filters( 'signup_create_blog_meta', array( 'lang_id' => 1, 'public' => $public ) ); // deprecated	$meta = apply_filters( 'add_signup_meta', $meta );	wpmu_create_blog( $domain, $path, $blog_title, $current_user->id, $meta, $wpdb->siteid );	confirm_another_blog_signup($domain, $path, $blog_title, $current_user->user_login, $current_user->user_email, $meta);	return true;}function confirm_another_blog_signup($domain, $path, $blog_title, $user_name, $user_email = '', $meta = '') {	?>	<h2><?php printf( __( 'The site %s is yours.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p>		<?php printf( __( '<a href="http://%1$s">http://%2$s</a> is your new site.  <a href="%3$s">Log in</a> as &#8220;%4$s&#8221; using your existing password.' ), $domain.$path, $domain.$path, "http://" . $domain.$path . "wp-login.php", $user_name ) ?>	</p>	<?php	do_action( 'signup_finished' );}function signup_user($user_name = '', $user_email = '', $errors = '') {	global $current_site, $active_signup;	if ( !is_wp_error($errors) )		$errors = new WP_Error();	if ( isset( $_POST[ 'signup_for' ] ) )		$signup[ esc_html( $_POST[ 'signup_for' ] ) ] = 'checked="checked"';	else		$signup[ 'blog' ] = 'checked="checked"';	//TODO - This doesn't seem to do anything do we really need it?	$signup['user'] = isset( $signup['user'] ) ? $signup['user'] : '';	// allow definition of default variables	$filtered_results = apply_filters('signup_user_init', array('user_name' => $user_name, 'user_email' => $user_email, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$errors = $filtered_results['errors'];	?>	<h2><?php printf( __( 'Get your own %s account in seconds' ), $current_site->site_name ) ?></h2>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-user-signup" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_user_form($user_name, $user_email, $errors); ?>		<p>		<?php if ( $active_signup == 'blog' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="blog" />		<?php } elseif ( $active_signup == 'user' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="user" />		<?php } else { ?>			<input id="signupblog" type="radio" name="signup_for" value="blog" <?php echo $signup['blog'] ?> />			<label class="checkbox" for="signupblog"><?php _e('Gimme a site!') ?></label>			<br />			<input id="signupuser" type="radio" name="signup_for" value="user" <?php echo $signup['user'] ?> />			<label class="checkbox" for="signupuser"><?php _e('Just a username, please.') ?></label>		<?php } ?>		</p>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Next') ?>" /></p>	</form>	<?php}function validate_user_signup() {	$result = validate_user_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	if ( 'blog' == $_POST['signup_for'] ) {		signup_blog($user_name, $user_email);		return false;	}	wpmu_signup_user($user_name, $user_email, apply_filters( "add_signup_meta", array() ) );	confirm_user_signup($user_name, $user_email);	return true;}function confirm_user_signup($user_name, $user_email) {	?>	<h2><?php printf( __( '%s is your new username' ), $user_name) ?></h2>	<p><?php _e( 'But, before you can start using your new username, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf(__( 'Check your inbox at <strong>%1$s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your username within two days, you will have to sign up again.' ); ?></p>	<?php	do_action( 'signup_finished' );}function signup_blog($user_name = '', $user_email = '', $blogname = '', $blog_title = '', $errors = '') {	if ( !is_wp_error($errors) )		$errors = new WP_Error();	// allow definition of default variables	$filtered_results = apply_filters('signup_blog_init', array('user_name' => $user_name, 'user_email' => $user_email, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	if ( empty($blogname) )		$blogname = $user_name;	?>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-blog-signup" />		<input type="hidden" name="user_name" value="<?php echo esc_attr($user_name) ?>" />		<input type="hidden" name="user_email" value="<?php echo esc_attr($user_email) ?>" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Signup') ?>" /></p>	</form>	<?php}function validate_blog_signup() {	// Re-validate user info.	$result = wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	$result = wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title']);	extract($result);	if ( $errors->get_error_code() ) {		signup_blog($user_name, $user_email, $blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = array ('lang_id' => 1, 'public' => $public);	$meta = apply_filters( "add_signup_meta", $meta );	wpmu_signup_blog($domain, $path, $blog_title, $user_name, $user_email, $meta);	confirm_blog_signup($domain, $path, $blog_title, $user_name, $user_email, $meta);	return true;}function confirm_blog_signup($domain, $path, $blog_title, $user_name = '', $user_email = '', $meta) {	?>	<h2><?php printf( __( 'Congratulations! Your new site, %s, is almost ready.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p><?php _e( 'But, before you can start using your site, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf( __( 'Check your inbox at <strong>%s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your site within two days, you will have to sign up again.' ); ?></p>	<h2><?php _e( 'Still waiting for your email?' ); ?></h2>	<p>		<?php _e( 'If you haven&#8217;t received your email yet, there are a number of things you can do:' ) ?>		<ul id="noemail-tips">			<li><p><strong><?php _e( 'Wait a little longer. Sometimes delivery of email can be delayed by processes outside of our control.' ) ?></strong></p></li>			<li><p><?php _e( 'Check the junk or spam folder of your email client. Sometime emails wind up there by mistake.' ) ?></p></li>			<li><?php printf( __( 'Have you entered your email correctly?  You have entered %s, if it&#8217;s incorrect, you will not receive your email.' ), $user_email ) ?></li>		</ul>	</p>	<?php	do_action( 'signup_finished' );}// Main$active_signup = get_site_option( 'registration' );if ( !$active_signup )	$active_signup = 'all';$active_signup = apply_filters( 'wpmu_active_signup', $active_signup ); // return "all", "none", "blog" or "user"// Make the signup type translatable.$i18n_signup['all'] = _x('all', 'Multisite active signup type');$i18n_signup['none'] = _x('none', 'Multisite active signup type');$i18n_signup['blog'] = _x('blog', 'Multisite active signup type');$i18n_signup['user'] = _x('user', 'Multisite active signup type');if ( is_super_admin() )	echo '<div class="mu_alert">' . sprintf( __( 'Greetings Site Administrator! You are currently allowing &#8220;%s&#8221; registrations. To change or disable registration go to your <a href="%s">Options page</a>.' ), $i18n_signup[$active_signup], esc_url( network_admin_url( 'ms-options.php' ) ) ) . '</div>';$newblogname = isset($_GET['new']) ? strtolower(preg_replace('/^-|-$|[^-a-zA-Z0-9]/', '', $_GET['new'])) : null;$current_user = wp_get_current_user();if ( $active_signup == "none" ) {	_e( 'Registration has been disabled.' );} elseif ( $active_signup == 'blog' && !is_user_logged_in() ) {	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$login_url = site_url( 'wp-login.php?redirect_to=' . urlencode($proto . $_SERVER['HTTP_HOST'] . '/wp-signup.php' ));	echo sprintf( __( 'You must first <a href="%s">log in</a>, and then you can create a new site.' ), $login_url );} else {	$stage = isset( $_POST['stage'] ) ?  $_POST['stage'] : 'default';	switch ( $stage ) {		case 'validate-user-signup' :			if ( $active_signup == 'all' || $_POST[ 'signup_for' ] == 'blog' && $active_signup == 'blog' || $_POST[ 'signup_for' ] == 'user' && $active_signup == 'user' )				validate_user_signup();			else				_e( 'User registration has been disabled.' );		break;		case 'validate-blog-signup':			if ( $active_signup == 'all' || $active_signup == 'blog' )				validate_blog_signup();			else				_e( 'Site registration has been disabled.' );			break;		case 'gimmeanotherblog':			validate_another_blog_signup();			break;		case 'default':		default :			$user_email = isset( $_POST[ 'user_email' ] ) ? $_POST[ 'user_email' ] : '';			do_action( "preprocess_signup_form" ); // populate the form from invites, elsewhere?			if ( is_user_logged_in() && ( $active_signup == 'all' || $active_signup == 'blog' ) )				signup_another_blog($newblogname);			elseif ( is_user_logged_in() == false && ( $active_signup == 'all' || $active_signup == 'user' ) )				signup_user( $newblogname, $user_email );			elseif ( is_user_logged_in() == false && ( $active_signup == 'blog' ) )				_e( 'Sorry, new registrations are not allowed at this time.' );			else				_e( 'You are logged in already. No need to register again!' );			if ( $newblogname ) {				$newblog = get_blogaddress_by_name( $newblogname );				if ( $active_signup == 'blog' || $active_signup == 'all' )					printf( __( '<p><em>The site you were looking for, <strong>%s</strong> does not exist, but you can create it now!</em></p>' ), $newblog );				else					printf( __( '<p><em>The site you were looking for, <strong>%s</strong>, does not exist.</em></p>' ), $newblog );			}			break;	}}?></div></div><?php do_action( 'after_signup_form' ); ?><?php get_footer(); ?>
<?php/** * WordPress Cron Implementation for hosts, which do not offer CRON or for which * the user has not set up a CRON job pointing to this file. * * The HTTP request to this file will not slow down the visitor who happens to * visit when the cron job is needed to run. * * @package WordPress */ignore_user_abort(true);if ( !empty($_POST) || defined('DOING_AJAX') || defined('DOING_CRON') )	die();/** * Tell WordPress we are doing the CRON task. * * @var bool */define('DOING_CRON', true);if ( !defined('ABSPATH') ) {	/** Set up WordPress environment */	require_once('./wp-load.php');}if ( false === $crons = _get_cron_array() )	die();$keys = array_keys( $crons );$local_time = time();if ( isset($keys[0]) && $keys[0] > $local_time )	die();foreach ($crons as $timestamp => $cronhooks) {	if ( $timestamp > $local_time )		break;	foreach ($cronhooks as $hook => $keys) {		foreach ($keys as $k => $v) {			$schedule = $v['schedule'];			if ($schedule != false) {				$new_args = array($timestamp, $schedule, $hook, $v['args']);				call_user_func_array('wp_reschedule_event', $new_args);			}			wp_unschedule_event($timestamp, $hook, $v['args']); 			do_action_ref_array($hook, $v['args']);		}	}}die();
<?php/** * Navigation Menu functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Returns a navigation menu object. * * @since 3.0.0 * * @uses get_term * @uses get_term_by * * @param string $menu Menu id, slug or name * @return mixed false if $menu param isn't supplied or term does not exist, menu object if successful. */function wp_get_nav_menu_object( $menu ) {	if ( ! $menu )		return false;	$menu_obj = get_term( $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'slug', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'name', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = false;	return $menu_obj;}/** * Check if the given ID is a navigation menu. * * Returns true if it is; false otherwise. * * @since 3.0.0 * * @param int|string $menu The menu to check (id, slug, or name) * @return bool Whether the menu exists. */function is_nav_menu( $menu ) {	if ( ! $menu )		return false;	$menu_obj = wp_get_nav_menu_object( $menu );	if (		$menu_obj &&		! is_wp_error( $menu_obj ) &&		! empty( $menu_obj->taxonomy ) &&		'nav_menu' == $menu_obj->taxonomy	)		return true;	return false;}/** * Register navigation menus for a theme. * * @since 3.0.0 * * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text. */function register_nav_menus( $locations = array() ) {	global $_wp_registered_nav_menus;	add_theme_support( 'menus' );	$_wp_registered_nav_menus = array_merge( (array) $_wp_registered_nav_menus, $locations );}/** * Register a navigation menu for a theme. * * @since 3.0.0 * * @param string $location Menu location identifier, like a slug. * @param string $description Menu location descriptive text. */function register_nav_menu( $location, $description ) {	register_nav_menus( array( $location => $description ) );}/** * Returns an array of all registered navigation menus in a theme * * @since 3.0.0 * @return array */function get_registered_nav_menus() {	global $_wp_registered_nav_menus;	if ( isset( $_wp_registered_nav_menus ) )		return $_wp_registered_nav_menus;	return array();}/** * Returns an array with the registered navigation menu locations and the menu assigned to it * * @since 3.0.0 * @return array */function get_nav_menu_locations() {	return get_theme_mod( 'nav_menu_locations' );}/** * Whether a registered nav menu location has a menu assigned to it. * * @since 3.0.0 * @param string $location Menu location identifier. * @return bool Whether location has a menu. */function has_nav_menu( $location ) {	$locations = get_nav_menu_locations();	return ( ! empty( $locations[ $location ] ) );}/** * Determine whether the given ID is a nav menu item. * * @since 3.0.0 * * @param int $menu_item_id The ID of the potential nav menu item. * @return bool Whether the given ID is that of a nav menu item. */function is_nav_menu_item( $menu_item_id = 0 ) {	return ( ! is_wp_error( $menu_item_id ) && ( 'nav_menu_item' == get_post_type( $menu_item_id ) ) );}/** * Create a Navigation Menu. * * @since 3.0.0 * * @param string $menu_name Menu Name * @return mixed Menu object on success|WP_Error on failure */function wp_create_nav_menu( $menu_name ) {	return wp_update_nav_menu_object( 0, array( 'menu-name' => $menu_name ) );}/** * Delete a Navigation Menu. * * @since 3.0.0 * * @param string $menu name|id|slug * @return mixed Menu object on success|WP_Error on failure */function wp_delete_nav_menu( $menu ) {	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	$menu_objects = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( ! empty( $menu_objects ) ) {		foreach ( $menu_objects as $item ) {			wp_delete_post( $item );		}	}	$result = wp_delete_term( $menu->term_id, 'nav_menu' );	if ( $result && !is_wp_error($result) )		do_action( 'wp_delete_nav_menu', $menu->term_id );	return $result;}/** * Save the properties of a menu or create a new menu with those properties. * * @since 3.0.0 * * @param int $menu_id The ID of the menu or "0" to create a new menu. * @param array $menu_data The array of menu data. * @return int|error object The menu's ID or WP_Error object. */function wp_update_nav_menu_object( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$_menu = wp_get_nav_menu_object( $menu_id );	$args = array(		'description' => ( isset( $menu_data['description'] ) ? $menu_data['description']  : '' ),		'name'        => ( isset( $menu_data['menu-name']   ) ? $menu_data['menu-name']    : '' ),		'parent'      => ( isset( $menu_data['parent']      ) ? (int) $menu_data['parent'] : 0  ),		'slug'        => null,	);	// double-check that we're not going to have one menu take the name of another	$_possible_existing = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );	if (		$_possible_existing &&		! is_wp_error( $_possible_existing ) &&		isset( $_possible_existing->term_id ) &&		$_possible_existing->term_id != $menu_id	)		return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );	// menu doesn't already exist, so create a new menu	if ( ! $_menu || is_wp_error( $_menu ) ) {		$menu_exists = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );		if ( $menu_exists )			return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );		$_menu = wp_insert_term( $menu_data['menu-name'], 'nav_menu', $args );		if ( is_wp_error( $_menu ) )			return $_menu;		do_action( 'wp_create_nav_menu', $_menu['term_id'], $menu_data );		return (int) $_menu['term_id'];	}	if ( ! $_menu || ! isset( $_menu->term_id ) )		return 0;	$menu_id = (int) $_menu->term_id;	$update_response = wp_update_term( $menu_id, 'nav_menu', $args );	if ( is_wp_error( $update_response ) )		return $update_response;	do_action( 'wp_update_nav_menu', $menu_id, $menu_data );	return $menu_id;}/** * Save the properties of a menu item or create a new one. * * @since 3.0.0 * * @param int $menu_id The ID of the menu. Required. If "0", makes the menu item a draft orphan. * @param int $menu_item_db_id The ID of the menu item. If "0", creates a new menu item. * @param array $menu_item_data The menu item's data. * @return int The menu item's database ID or WP_Error object on failure. */function wp_update_nav_menu_item( $menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array() ) {	$menu_id = (int) $menu_id;	$menu_item_db_id = (int) $menu_item_db_id;	// make sure that we don't convert non-nav_menu_item objects into nav_menu_item objects	if ( ! empty( $menu_item_db_id ) && ! is_nav_menu_item( $menu_item_db_id ) )		return new WP_Error('update_nav_menu_item_failed', __('The given object ID is not that of a menu item.'));	$menu = wp_get_nav_menu_object( $menu_id );	if ( ( ! $menu && 0 !== $menu_id ) || is_wp_error( $menu ) )		return $menu;	$menu_items = 0 == $menu_id ? array() : (array) wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );	$count = count( $menu_items );	$defaults = array(		'menu-item-db-id' => $menu_item_db_id,		'menu-item-object-id' => 0,		'menu-item-object' => '',		'menu-item-parent-id' => 0,		'menu-item-position' => 0,		'menu-item-type' => 'custom',		'menu-item-title' => '',		'menu-item-url' => '',		'menu-item-description' => '',		'menu-item-attr-title' => '',		'menu-item-target' => '',		'menu-item-classes' => '',		'menu-item-xfn' => '',		'menu-item-status' => '',	);	$args = wp_parse_args( $menu_item_data, $defaults );	if ( 0 == $menu_id ) {		$args['menu-item-position'] = 1;	} elseif ( 0 == (int) $args['menu-item-position'] ) {		$last_item = array_pop( $menu_items );		$args['menu-item-position'] = ( $last_item && isset( $last_item->menu_order ) ) ? 1 + $last_item->menu_order : $count;	}	$original_parent = 0 < $menu_item_db_id ? get_post_field( 'post_parent', $menu_item_db_id ) : 0;	if ( 'custom' != $args['menu-item-type'] ) {		/* if non-custom menu item, then:			* use original object's URL			* blank default title to sync with original object's		*/		$args['menu-item-url'] = '';		$original_title = '';		if ( 'taxonomy' == $args['menu-item-type'] ) {			$original_parent = get_term_field( 'parent', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );			$original_title = get_term_field( 'name', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );		} elseif ( 'post_type' == $args['menu-item-type'] ) {			$original_object = get_post( $args['menu-item-object-id'] );			$original_parent = (int) $original_object->post_parent;			$original_title = $original_object->post_title;		}		if ( empty( $args['menu-item-title'] ) || $args['menu-item-title'] == $original_title ) {			$args['menu-item-title'] = '';			// hack to get wp to create a post object when too many properties are empty			if ( empty( $args['menu-item-description'] ) )				$args['menu-item-description'] = ' ';		}	}	// Populate the menu item object	$post = array(		'menu_order' => $args['menu-item-position'],		'ping_status' => 0,		'post_content' => $args['menu-item-description'],		'post_excerpt' => $args['menu-item-attr-title'],		'post_parent' => $original_parent,		'post_title' => $args['menu-item-title'],		'post_type' => 'nav_menu_item',	);	if ( 0 != $menu_id )		$post['tax_input'] = array( 'nav_menu' => array( intval( $menu->term_id ) ) );	// New menu item. Default is draft status	if ( 0 == $menu_item_db_id ) {		$post['ID'] = 0;		$post['post_status'] = 'publish' == $args['menu-item-status'] ? 'publish' : 'draft';		$menu_item_db_id = wp_insert_post( $post );	// Update existing menu item. Default is publish status	} else {		$post['ID'] = $menu_item_db_id;		$post['post_status'] = 'draft' == $args['menu-item-status'] ? 'draft' : 'publish';		wp_update_post( $post );	}	if ( 'custom' == $args['menu-item-type'] ) {		$args['menu-item-object-id'] = $menu_item_db_id;		$args['menu-item-object'] = 'custom';	}	if ( ! $menu_item_db_id || is_wp_error( $menu_item_db_id ) )		return $menu_item_db_id;	$menu_item_db_id = (int) $menu_item_db_id;	update_post_meta( $menu_item_db_id, '_menu_item_type', sanitize_key($args['menu-item-type']) );	update_post_meta( $menu_item_db_id, '_menu_item_menu_item_parent', (int) $args['menu-item-parent-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object_id', (int) $args['menu-item-object-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object', sanitize_key($args['menu-item-object']) );	update_post_meta( $menu_item_db_id, '_menu_item_target', sanitize_key($args['menu-item-target']) );	$args['menu-item-classes'] = array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-classes'] ) );	$args['menu-item-xfn'] = implode( ' ', array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-xfn'] ) ) );	update_post_meta( $menu_item_db_id, '_menu_item_classes', $args['menu-item-classes'] );	update_post_meta( $menu_item_db_id, '_menu_item_xfn', $args['menu-item-xfn'] );	update_post_meta( $menu_item_db_id, '_menu_item_url', esc_url_raw($args['menu-item-url']) );	if ( 0 == $menu_id )		update_post_meta( $menu_item_db_id, '_menu_item_orphaned', time() );	else		delete_post_meta( $menu_item_db_id, '_menu_item_orphaned' );	do_action('wp_update_nav_menu_item', $menu_id, $menu_item_db_id, $args );	return $menu_item_db_id;}/** * Returns all navigation menu objects. * * @since 3.0.0 * * @param $args array Array of arguments passed on to get_terms(). * @return array menu objects */function wp_get_nav_menus( $args = array() ) {	$defaults = array( 'hide_empty' => false, 'orderby' => 'none' );	$args = wp_parse_args( $args, $defaults );	return apply_filters( 'wp_get_nav_menus', get_terms( 'nav_menu',  $args), $args );}/** * Sort menu items by the desired key. * * @since 3.0.0 * @access private * * @param object $a The first object to compare * @param object $b The second object to compare * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b. */function _sort_nav_menu_items( $a, $b ) {	global $_menu_item_sort_prop;	if ( empty( $_menu_item_sort_prop ) )		return 0;	if ( ! isset( $a->$_menu_item_sort_prop ) || ! isset( $b->$_menu_item_sort_prop ) )		return 0;	$_a = (int) $a->$_menu_item_sort_prop;	$_b = (int) $b->$_menu_item_sort_prop;	if ( $a->$_menu_item_sort_prop == $b->$_menu_item_sort_prop )		return 0;	elseif ( $_a == $a->$_menu_item_sort_prop && $_b == $b->$_menu_item_sort_prop )		return $_a < $_b ? -1 : 1;	else		return strcmp( $a->$_menu_item_sort_prop, $b->$_menu_item_sort_prop );}/** * Returns all menu items of a navigation menu. * * @since 3.0.0 * * @param string $menu menu name, id, or slug * @param string $args * @return mixed $items array of menu items, else false. */function wp_get_nav_menu_items( $menu, $args = array() ) {	global $_wp_using_ext_object_cache;	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	static $fetched = array();	$items = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( empty( $items ) )		return $items;	$defaults = array( 'order' => 'ASC', 'orderby' => 'menu_order', 'post_type' => 'nav_menu_item',		'post_status' => 'publish', 'output' => ARRAY_A, 'output_key' => 'menu_order', 'nopaging' => true,		'update_post_term_cache' => false );	$args = wp_parse_args( $args, $defaults );	if ( count( $items ) > 1 )		$args['include'] = implode( ',', $items );	else		$args['include'] = $items[0];	$items = get_posts( $args );	if ( is_wp_error( $items ) || ! is_array( $items ) )		return false;	// Get all posts and terms at once to prime the caches	if ( empty( $fetched[$menu->term_id] ) || $_wp_using_ext_object_cache ) {		$fetched[$menu->term_id] = true;		$posts = array();		$terms = array();		foreach ( $items as $item ) {			$object_id = get_post_meta( $item->ID, '_menu_item_object_id', true );			$object    = get_post_meta( $item->ID, '_menu_item_object',    true );			$type      = get_post_meta( $item->ID, '_menu_item_type',      true );			if ( 'post_type' == $type )				$posts[$object][] = $object_id;			elseif ( 'taxonomy' == $type)				$terms[$object][] = $object_id;		}		if ( ! empty( $posts ) ) {			foreach ( array_keys($posts) as $post_type ) {				get_posts( array('post__in' => $posts[$post_type], 'post_type' => $post_type, 'nopaging' => true, 'update_post_term_cache' => false) );			}		}		unset($posts);		if ( ! empty( $terms ) ) {			foreach ( array_keys($terms) as $taxonomy ) {				get_terms($taxonomy, array('include' => $terms[$taxonomy]) );			}		}		unset($terms);	}	$items = array_map( 'wp_setup_nav_menu_item', $items );	if ( ARRAY_A == $args['output'] ) {		$GLOBALS['_menu_item_sort_prop'] = $args['output_key'];		usort($items, '_sort_nav_menu_items');		$i = 1;		foreach( $items as $k => $item ) {			$items[$k]->$args['output_key'] = $i++;		}	}	return apply_filters( 'wp_get_nav_menu_items',  $items, $menu, $args );}/** * Decorates a menu item object with the shared navigation menu item properties. * * Properties: * - db_id: 		The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist). * - object_id:		The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories. * - type:		The family of objects originally represented, such as "post_type" or "taxonomy." * - object:		The type of object originally represented, such as "category," "post", or "attachment." * - type_label:	The singular label used to describe this type of menu item. * - post_parent:	The DB ID of the original object's parent object, if any (0 otherwise). * - menu_item_parent: 	The DB ID of the nav_menu_item that is this item's menu parent, if any.  0 otherwise. * - url:		The URL to which this menu item points. * - title:		The title of this menu item. * - target: 		The target attribute of the link element for this menu item. * - attr_title:	The title attribute of the link element for this menu item. * - classes:		The array of class attribute values for the link element of this menu item. * - xfn:		The XFN relationship expressed in the link of this menu item. * - description:	The description of this menu item. * * @since 3.0.0 * * @param object $menu_item The menu item to modify. * @return object $menu_item The menu item with standard menu item properties. */function wp_setup_nav_menu_item( $menu_item ) {	if ( isset( $menu_item->post_type ) ) {		if ( 'nav_menu_item' == $menu_item->post_type ) {			$menu_item->db_id = (int) $menu_item->ID;			$menu_item->menu_item_parent = empty( $menu_item->menu_item_parent ) ? get_post_meta( $menu_item->ID, '_menu_item_menu_item_parent', true ) : $menu_item->menu_item_parent;			$menu_item->object_id = empty( $menu_item->object_id ) ? get_post_meta( $menu_item->ID, '_menu_item_object_id', true ) : $menu_item->object_id;			$menu_item->object = empty( $menu_item->object ) ? get_post_meta( $menu_item->ID, '_menu_item_object', true ) : $menu_item->object;			$menu_item->type = empty( $menu_item->type ) ? get_post_meta( $menu_item->ID, '_menu_item_type', true ) : $menu_item->type;			if ( 'post_type' == $menu_item->type ) {				$object = get_post_type_object( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$menu_item->url = get_permalink( $menu_item->object_id );				$original_object = get_post( $menu_item->object_id );				$original_title = $original_object->post_title;				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} elseif ( 'taxonomy' == $menu_item->type ) {				$object = get_taxonomy( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$term_url = get_term_link( (int) $menu_item->object_id, $menu_item->object );				$menu_item->url = !is_wp_error( $term_url ) ? $term_url : '';				$original_title = get_term_field( 'name', $menu_item->object_id, $menu_item->object, 'raw' );				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} else {				$menu_item->type_label = __('Custom');				$menu_item->title = $menu_item->post_title;				$menu_item->url = empty( $menu_item->url ) ? get_post_meta( $menu_item->ID, '_menu_item_url', true ) : $menu_item->url;			}			$menu_item->target = empty( $menu_item->target ) ? get_post_meta( $menu_item->ID, '_menu_item_target', true ) : $menu_item->target;			$menu_item->attr_title = empty( $menu_item->attr_title ) ? apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt ) : $menu_item->attr_title;			$menu_item->description = empty( $menu_item->description ) ? apply_filters( 'nav_menu_description', $menu_item->post_content ) : $menu_item->description;			$menu_item->classes = empty( $menu_item->classes ) ? (array) get_post_meta( $menu_item->ID, '_menu_item_classes', true ) : $menu_item->classes;			$menu_item->xfn = empty( $menu_item->xfn ) ? get_post_meta( $menu_item->ID, '_menu_item_xfn', true ) : $menu_item->xfn;		} else {			$menu_item->db_id = 0;			$menu_item->menu_item_parent = 0;			$menu_item->object_id = (int) $menu_item->ID;			$menu_item->type = 'post_type';			$object = get_post_type_object( $menu_item->post_type );			$menu_item->object = $object->name;			$menu_item->type_label = $object->labels->singular_name;			$menu_item->title = $menu_item->post_title;			$menu_item->url = get_permalink( $menu_item->ID );			$menu_item->target = '';			$menu_item->attr_title = apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt );			$menu_item->description = apply_filters( 'nav_menu_description', $menu_item->post_content );			$menu_item->classes = array();			$menu_item->xfn = '';		}	} elseif ( isset( $menu_item->taxonomy ) ) {		$menu_item->ID = $menu_item->term_id;		$menu_item->db_id = 0;		$menu_item->menu_item_parent = 0;		$menu_item->object_id = (int) $menu_item->term_id;		$menu_item->post_parent = (int) $menu_item->parent;		$menu_item->type = 'taxonomy';		$object = get_taxonomy( $menu_item->taxonomy );		$menu_item->object = $object->name;		$menu_item->type_label = $object->labels->singular_name;		$menu_item->title = $menu_item->name;		$menu_item->url = get_term_link( $menu_item, $menu_item->taxonomy );		$menu_item->target = '';		$menu_item->attr_title = '';		$menu_item->description = get_term_field( 'description', $menu_item->term_id, $menu_item->taxonomy );		$menu_item->classes = array();		$menu_item->xfn = '';	}	return apply_filters( 'wp_setup_nav_menu_item', $menu_item );}/** * Get the menu items associated with a particular object. * * @since 3.0.0 * * @param int $object_id The ID of the original object. * @param string $object_type The type of object, such as "taxonomy" or "post_type." * @return array The array of menu item IDs; empty array if none; */function wp_get_associated_nav_menu_items( $object_id = 0, $object_type = 'post_type' ) {	$object_id = (int) $object_id;	$menu_item_ids = array();	$query = new WP_Query;	$menu_items = $query->query(		array(			'meta_key' => '_menu_item_object_id',			'meta_value' => $object_id,			'post_status' => 'any',			'post_type' => 'nav_menu_item',			'showposts' => -1,		)	);	foreach( (array) $menu_items as $menu_item ) {		if ( isset( $menu_item->ID ) && is_nav_menu_item( $menu_item->ID ) ) {			if ( get_post_meta( $menu_item->ID, '_menu_item_type', true ) != $object_type )				continue;			$menu_item_ids[] = (int) $menu_item->ID;		}	}	return array_unique( $menu_item_ids );}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_post_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'post_type' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_tax_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'taxonomy' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Automatically add newly published page objects to menus with that as an option. * * @since 3.0.0 * @access private * * @param string $new_status The new status of the post object. * @param string $old_status The old status of the post object. * @param object $post The post object being transitioned from one status to another. * @return void */function _wp_auto_add_pages_to_menu( $new_status, $old_status, $post ) {	if ( 'publish' != $new_status || 'publish' == $old_status || 'page' != $post->post_type )		return;	if ( ! empty( $post->post_parent ) )		return;	$auto_add = get_option( 'nav_menu_options' );	if ( empty( $auto_add ) || ! is_array( $auto_add ) || ! isset( $auto_add['auto_add'] ) )		return;	$auto_add = $auto_add['auto_add'];	if ( empty( $auto_add ) || ! is_array( $auto_add ) )		return;	$args = array(		'menu-item-object-id' => $post->ID,		'menu-item-object' => $post->post_type,		'menu-item-type' => 'post_type',		'menu-item-status' => 'publish',	);	foreach ( $auto_add as $menu_id ) {		$items = wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );		if ( ! is_array( $items ) )			continue;		foreach ( $items as $item ) {			if ( $post->ID == $item->object_id )				continue 2;		}		wp_update_nav_menu_item( $menu_id, 0, $args );	}}?>
<?php/** * IXR - The Inutio XML-RPC Library * * @package IXR * @since 1.5 * * @copyright Incutio Ltd 2002-2005 * @version 1.7 (beta) 23rd May 2005 * @author Simon Willison * @link http://scripts.incutio.com/xmlrpc/ Site * @link http://scripts.incutio.com/xmlrpc/manual.php Manual * @license BSD License http://www.opensource.org/licenses/bsd-license.php *//** * IXR_Value * * @package IXR * @since 1.5 */class IXR_Value {    var $data;    var $type;    function IXR_Value ($data, $type = false) {        $this->data = $data;        if (!$type) {            $type = $this->calculateType();        }        $this->type = $type;        if ($type == 'struct') {            /* Turn all the values in the array in to new IXR_Value objects */            foreach ($this->data as $key => $value) {                $this->data[$key] = new IXR_Value($value);            }        }        if ($type == 'array') {            for ($i = 0, $j = count($this->data); $i < $j; $i++) {                $this->data[$i] = new IXR_Value($this->data[$i]);            }        }    }    function calculateType() {        if ($this->data === true || $this->data === false) {            return 'boolean';        }        if (is_integer($this->data)) {            return 'int';        }        if (is_double($this->data)) {            return 'double';        }        // Deal with IXR object types base64 and date        if (is_object($this->data) && is_a($this->data, 'IXR_Date')) {            return 'date';        }        if (is_object($this->data) && is_a($this->data, 'IXR_Base64')) {            return 'base64';        }        // If it is a normal PHP object convert it in to a struct        if (is_object($this->data)) {            $this->data = get_object_vars($this->data);            return 'struct';        }        if (!is_array($this->data)) {            return 'string';        }        /* We have an array - is it an array or a struct ? */        if ($this->isStruct($this->data)) {            return 'struct';        } else {            return 'array';        }    }    function getXml() {        /* Return XML for this value */        switch ($this->type) {            case 'boolean':                return '<boolean>'.(($this->data) ? '1' : '0').'</boolean>';                break;            case 'int':                return '<int>'.$this->data.'</int>';                break;            case 'double':                return '<double>'.$this->data.'</double>';                break;            case 'string':                return '<string>'.htmlspecialchars($this->data).'</string>';                break;            case 'array':                $return = '<array><data>'."\n";                foreach ($this->data as $item) {                    $return .= '  <value>'.$item->getXml()."</value>\n";                }                $return .= '</data></array>';                return $return;                break;            case 'struct':                $return = '<struct>'."\n";                foreach ($this->data as $name => $value) {					$name = htmlspecialchars($name);                    $return .= "  <member><name>$name</name><value>";                    $return .= $value->getXml()."</value></member>\n";                }                $return .= '</struct>';                return $return;                break;            case 'date':            case 'base64':                return $this->data->getXml();                break;        }        return false;    }    function isStruct($array) {        /* Nasty function to check if an array is a struct or not */        $expected = 0;        foreach ($array as $key => $value) {            if ((string)$key != (string)$expected) {                return true;            }            $expected++;        }        return false;    }}/** * IXR_Message * * @package IXR * @since 1.5 */class IXR_Message {    var $message;    var $messageType;  // methodCall / methodResponse / fault    var $faultCode;    var $faultString;    var $methodName;    var $params;    // Current variable stacks    var $_arraystructs = array();   // The stack used to keep track of the current array/struct    var $_arraystructstypes = array(); // Stack keeping track of if things are structs or array    var $_currentStructName = array();  // A stack as well    var $_param;    var $_value;    var $_currentTag;    var $_currentTagContents;    // The XML parser    var $_parser;    function IXR_Message (&$message) {        $this->message = &$message;    }    function parse() {		// first remove the XML declaration		// this method avoids the RAM usage of preg_replace on very large messages		$header = preg_replace( '/<\?xml.*?\?'.'>/', '', substr( $this->message, 0, 100 ), 1 );		$this->message = substr_replace($this->message, $header, 0, 100);        if (trim($this->message) == '') {            return false;		}        $this->_parser = xml_parser_create();        // Set XML parser to take the case of tags in to account        xml_parser_set_option($this->_parser, XML_OPTION_CASE_FOLDING, false);        // Set XML parser callback functions        xml_set_object($this->_parser, $this);        xml_set_element_handler($this->_parser, 'tag_open', 'tag_close');		xml_set_character_data_handler($this->_parser, 'cdata');		$chunk_size = 262144; // 256Kb, parse in chunks to avoid the RAM usage on very large messages		do {			if ( strlen($this->message) <= $chunk_size )				$final=true;			$part = substr( $this->message, 0, $chunk_size );			$this->message = substr( $this->message, $chunk_size );			if ( !xml_parse( $this->_parser, $part, $final ) )				return false;			if ( $final )				break;		} while ( true );		xml_parser_free($this->_parser);        // Grab the error messages, if any        if ($this->messageType == 'fault') {            $this->faultCode = $this->params[0]['faultCode'];            $this->faultString = $this->params[0]['faultString'];		}        return true;    }    function tag_open($parser, $tag, $attr) {        $this->_currentTagContents = '';        $this->currentTag = $tag;        switch($tag) {            case 'methodCall':            case 'methodResponse':            case 'fault':                $this->messageType = $tag;                break;            /* Deal with stacks of arrays and structs */            case 'data':    // data is to all intents and puposes more interesting than array                $this->_arraystructstypes[] = 'array';                $this->_arraystructs[] = array();                break;            case 'struct':                $this->_arraystructstypes[] = 'struct';                $this->_arraystructs[] = array();                break;        }    }    function cdata($parser, $cdata) {        $this->_currentTagContents .= $cdata;    }    function tag_close($parser, $tag) {        $valueFlag = false;        switch($tag) {            case 'int':            case 'i4':                $value = (int) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'double':                $value = (double) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'string':                $value = $this->_currentTagContents;                $valueFlag = true;                break;            case 'dateTime.iso8601':                $value = new IXR_Date(trim($this->_currentTagContents));                // $value = $iso->getTimestamp();                $valueFlag = true;                break;            case 'value':                // "If no type is indicated, the type is string."                if (trim($this->_currentTagContents) != '') {                    $value = (string)$this->_currentTagContents;                    $valueFlag = true;                }                break;            case 'boolean':                $value = (boolean) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'base64':                $value = base64_decode( trim( $this->_currentTagContents ) );                $valueFlag = true;                break;            /* Deal with stacks of arrays and structs */            case 'data':            case 'struct':                $value = array_pop($this->_arraystructs);                array_pop($this->_arraystructstypes);                $valueFlag = true;                break;            case 'member':                array_pop($this->_currentStructName);                break;            case 'name':                $this->_currentStructName[] = trim($this->_currentTagContents);                break;            case 'methodName':                $this->methodName = trim($this->_currentTagContents);                break;        }        if ($valueFlag) {            if (count($this->_arraystructs) > 0) {                // Add value to struct or array                if ($this->_arraystructstypes[count($this->_arraystructstypes)-1] == 'struct') {                    // Add to struct                    $this->_arraystructs[count($this->_arraystructs)-1][$this->_currentStructName[count($this->_currentStructName)-1]] = $value;                } else {                    // Add to array                    $this->_arraystructs[count($this->_arraystructs)-1][] = $value;                }            } else {                // Just add as a paramater                $this->params[] = $value;            }        }        $this->_currentTagContents = '';    }}/** * IXR_Server * * @package IXR * @since 1.5 */class IXR_Server {    var $data;    var $callbacks = array();    var $message;    var $capabilities;    function IXR_Server($callbacks = false, $data = false) {        $this->setCapabilities();        if ($callbacks) {            $this->callbacks = $callbacks;        }        $this->setCallbacks();        $this->serve($data);    }    function serve($data = false) {        if (!$data) {            global $HTTP_RAW_POST_DATA;            if (!$HTTP_RAW_POST_DATA) {               header( 'Content-Type: text/plain' );               die('XML-RPC server accepts POST requests only.');            }            $data = &$HTTP_RAW_POST_DATA;        }        $this->message = new IXR_Message($data);        if (!$this->message->parse()) {            $this->error(-32700, 'parse error. not well formed');        }        if ($this->message->messageType != 'methodCall') {            $this->error(-32600, 'server error. invalid xml-rpc. not conforming to spec. Request must be a methodCall');        }        $result = $this->call($this->message->methodName, $this->message->params);        // Is the result an error?        if (is_a($result, 'IXR_Error')) {            $this->error($result);        }        // Encode the result        $r = new IXR_Value($result);        $resultxml = $r->getXml();        // Create the XML        $xml = <<<EOD<methodResponse>  <params>    <param>      <value>        $resultxml      </value>    </param>  </params></methodResponse>EOD;        // Send it        $this->output($xml);    }    function call($methodname, $args) {        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method '.                $methodname.' does not exist.');        }        $method = $this->callbacks[$methodname];        // Perform the callback and send the response        if (count($args) == 1) {            // If only one paramater just send that instead of the whole array            $args = $args[0];        }        // Are we dealing with a function or a method?        if ( is_string( $method ) && substr($method, 0, 5) == 'this:' ) {            // It's a class method - check it exists            $method = substr($method, 5);            if (!method_exists($this, $method)) {                return new IXR_Error(-32601, 'server error. requested class method "'.                    $method.'" does not exist.');            }            // Call the method            $result = $this->$method($args);        } else {            // It's a function - does it exist?            if (is_array($method)) {                if (!method_exists($method[0], $method[1])) {                    return new IXR_Error(-32601, 'server error. requested object method "'.                        $method[1].'" does not exist.');                }            } else if (!function_exists($method)) {                return new IXR_Error(-32601, 'server error. requested function "'.                    $method.'" does not exist.');            }            // Call the function            $result = call_user_func($method, $args);        }        return $result;    }    function error($error, $message = false) {        // Accepts either an error object or an error code and message        if ($message && !is_object($error)) {            $error = new IXR_Error($error, $message);        }        $this->output($error->getXml());    }    function output($xml) {        $xml = '<?xml version="1.0"?>'."\n".$xml;        $length = strlen($xml);        header('Connection: close');        header('Content-Length: '.$length);        header('Content-Type: text/xml');        header('Date: '.date('r'));        echo $xml;        exit;    }    function hasMethod($method) {        return in_array($method, array_keys($this->callbacks));    }    function setCapabilities() {        // Initialises capabilities array        $this->capabilities = array(            'xmlrpc' => array(                'specUrl' => 'http://www.xmlrpc.com/spec',                'specVersion' => 1            ),            'faults_interop' => array(                'specUrl' => 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',                'specVersion' => 20010516            ),            'system.multicall' => array(                'specUrl' => 'http://www.xmlrpc.com/discuss/msgReader$1208',                'specVersion' => 1            ),        );    }    function getCapabilities($args) {        return $this->capabilities;    }    function setCallbacks() {        $this->callbacks['system.getCapabilities'] = 'this:getCapabilities';        $this->callbacks['system.listMethods'] = 'this:listMethods';        $this->callbacks['system.multicall'] = 'this:multiCall';    }    function listMethods($args) {        // Returns a list of methods - uses array_reverse to ensure user defined        // methods are listed before server defined methods        return array_reverse(array_keys($this->callbacks));    }    function multiCall($methodcalls) {        // See http://www.xmlrpc.com/discuss/msgReader$1208        $return = array();        foreach ($methodcalls as $call) {            $method = $call['methodName'];            $params = $call['params'];            if ($method == 'system.multicall') {                $result = new IXR_Error(-32600, 'Recursive calls to system.multicall are forbidden');            } else {                $result = $this->call($method, $params);            }            if (is_a($result, 'IXR_Error')) {                $return[] = array(                    'faultCode' => $result->code,                    'faultString' => $result->message                );            } else {                $return[] = array($result);            }        }        return $return;    }}/** * IXR_Request * * @package IXR * @since 1.5 */class IXR_Request {    var $method;    var $args;    var $xml;    function IXR_Request($method, $args) {        $this->method = $method;        $this->args = $args;        $this->xml = <<<EOD<?xml version="1.0"?><methodCall><methodName>{$this->method}</methodName><params>EOD;        foreach ($this->args as $arg) {            $this->xml .= '<param><value>';            $v = new IXR_Value($arg);            $this->xml .= $v->getXml();            $this->xml .= "</value></param>\n";        }        $this->xml .= '</params></methodCall>';    }    function getLength() {        return strlen($this->xml);    }    function getXml() {        return $this->xml;    }}/** * IXR_Client * * @package IXR * @since 1.5 */class IXR_Client {    var $server;    var $port;    var $path;    var $useragent;	var $headers;    var $response;    var $message = false;    var $debug = false;    var $timeout;    // Storage place for an error message    var $error = false;    function IXR_Client($server, $path = false, $port = 80, $timeout = false) {        if (!$path) {            // Assume we have been given a URL instead            $bits = parse_url($server);            $this->server = $bits['host'];            $this->port = isset($bits['port']) ? $bits['port'] : 80;            $this->path = isset($bits['path']) ? $bits['path'] : '/';            // Make absolutely sure we have a path            if (!$this->path) {                $this->path = '/';            }        } else {            $this->server = $server;            $this->path = $path;            $this->port = $port;        }        $this->useragent = 'The Incutio XML-RPC PHP Library';        $this->timeout = $timeout;    }    function query() {        $args = func_get_args();        $method = array_shift($args);        $request = new IXR_Request($method, $args);        $length = $request->getLength();        $xml = $request->getXml();        $r = "\r\n";        $request  = "POST {$this->path} HTTP/1.0$r";		$this->headers['Host']			= $this->server;		$this->headers['Content-Type']	= 'text/xml';		$this->headers['User-Agent']	= $this->useragent;		$this->headers['Content-Length']= $length;		foreach( $this->headers as $header => $value ) {			$request .= "{$header}: {$value}{$r}";		}		$request .= $r;        $request .= $xml;        // Now send the request        if ($this->debug) {            echo '<pre class="ixr_request">'.htmlspecialchars($request)."\n</pre>\n\n";        }        if ($this->timeout) {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr, $this->timeout);        } else {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr);        }        if (!$fp) {            $this->error = new IXR_Error(-32300, "transport error - could not open socket: $errno $errstr");            return false;        }        fputs($fp, $request);        $contents = '';        $debug_contents = '';        $gotFirstLine = false;        $gettingHeaders = true;        while (!feof($fp)) {            $line = fgets($fp, 4096);            if (!$gotFirstLine) {                // Check line for '200'                if (strstr($line, '200') === false) {                    $this->error = new IXR_Error(-32301, 'transport error - HTTP status code was not 200');                    return false;                }                $gotFirstLine = true;            }            if (trim($line) == '') {                $gettingHeaders = false;            }            if (!$gettingHeaders) {            	// WP#12559 remove trim so as to not strip newlines from received response.                $contents .= $line;            }            if ($this->debug) {                $debug_contents .= $line;            }        }        if ($this->debug) {            echo '<pre class="ixr_response">'.htmlspecialchars($debug_contents)."\n</pre>\n\n";        }        // Now parse what we've got back        $this->message = new IXR_Message($contents);        if (!$this->message->parse()) {            // XML error            $this->error = new IXR_Error(-32700, 'parse error. not well formed');            return false;        }        // Is the message a fault?        if ($this->message->messageType == 'fault') {            $this->error = new IXR_Error($this->message->faultCode, $this->message->faultString);            return false;        }        // Message must be OK        return true;    }    function getResponse() {        // methodResponses can only have one param - return that        return $this->message->params[0];    }    function isError() {        return (is_object($this->error));    }    function getErrorCode() {        return $this->error->code;    }    function getErrorMessage() {        return $this->error->message;    }}/** * IXR_Error * * @package IXR * @since 1.5 */class IXR_Error {    var $code;    var $message;    function IXR_Error($code, $message) {        $this->code = $code;        // WP adds htmlspecialchars(). See #5666        $this->message = htmlspecialchars($message);    }    function getXml() {        $xml = <<<EOD<methodResponse>  <fault>    <value>      <struct>        <member>          <name>faultCode</name>          <value><int>{$this->code}</int></value>        </member>        <member>          <name>faultString</name>          <value><string>{$this->message}</string></value>        </member>      </struct>    </value>  </fault></methodResponse>EOD;        return $xml;    }}/** * IXR_Date * * @package IXR * @since 1.5 */class IXR_Date {    var $year;    var $month;    var $day;    var $hour;    var $minute;    var $second;    var $timezone;    function IXR_Date($time) {        // $time can be a PHP timestamp or an ISO one        if (is_numeric($time)) {            $this->parseTimestamp($time);        } else {            $this->parseIso($time);        }    }    function parseTimestamp($timestamp) {        $this->year = date('Y', $timestamp);        $this->month = date('m', $timestamp);        $this->day = date('d', $timestamp);        $this->hour = date('H', $timestamp);        $this->minute = date('i', $timestamp);        $this->second = date('s', $timestamp);        // WP adds timezone. See #2036        $this->timezone = '';    }    function parseIso($iso) {        $this->year = substr($iso, 0, 4);        $this->month = substr($iso, 4, 2);        $this->day = substr($iso, 6, 2);        $this->hour = substr($iso, 9, 2);        $this->minute = substr($iso, 12, 2);        $this->second = substr($iso, 15, 2);        // WP adds timezone. See #2036        $this->timezone = substr($iso, 17);    }    function getIso() {    	// WP adds timezone. See #2036        return $this->year.$this->month.$this->day.'T'.$this->hour.':'.$this->minute.':'.$this->second.$this->timezone;    }    function getXml() {        return '<dateTime.iso8601>'.$this->getIso().'</dateTime.iso8601>';    }    function getTimestamp() {        return mktime($this->hour, $this->minute, $this->second, $this->month, $this->day, $this->year);    }}/** * IXR_Base64 * * @package IXR * @since 1.5 */class IXR_Base64 {    var $data;    function IXR_Base64($data) {        $this->data = $data;    }    function getXml() {        return '<base64>'.base64_encode($this->data).'</base64>';    }}/** * IXR_IntrospectionServer * * @package IXR * @since 1.5 */class IXR_IntrospectionServer extends IXR_Server {    var $signatures;    var $help;    function IXR_IntrospectionServer() {        $this->setCallbacks();        $this->setCapabilities();        $this->capabilities['introspection'] = array(            'specUrl' => 'http://xmlrpc.usefulinc.com/doc/reserved.html',            'specVersion' => 1        );        $this->addCallback(            'system.methodSignature',            'this:methodSignature',            array('array', 'string'),            'Returns an array describing the return type and required parameters of a method'        );        $this->addCallback(            'system.getCapabilities',            'this:getCapabilities',            array('struct'),            'Returns a struct describing the XML-RPC specifications supported by this server'        );        $this->addCallback(            'system.listMethods',            'this:listMethods',            array('array'),            'Returns an array of available methods on this server'        );        $this->addCallback(            'system.methodHelp',            'this:methodHelp',            array('string', 'string'),            'Returns a documentation string for the specified method'        );    }    function addCallback($method, $callback, $args, $help) {        $this->callbacks[$method] = $callback;        $this->signatures[$method] = $args;        $this->help[$method] = $help;    }    function call($methodname, $args) {        // Make sure it's in an array        if ($args && !is_array($args)) {            $args = array($args);        }        // Over-rides default call method, adds signature check        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method "'.$this->message->methodName.'" not specified.');        }        $method = $this->callbacks[$methodname];        $signature = $this->signatures[$methodname];        $returnType = array_shift($signature);        // Check the number of arguments        if (count($args) != count($signature)) {            return new IXR_Error(-32602, 'server error. wrong number of method parameters');        }        // Check the argument types        $ok = true;        $argsbackup = $args;        for ($i = 0, $j = count($args); $i < $j; $i++) {            $arg = array_shift($args);            $type = array_shift($signature);            switch ($type) {                case 'int':                case 'i4':                    if (is_array($arg) || !is_int($arg)) {                        $ok = false;                    }                    break;                case 'base64':                case 'string':                    if (!is_string($arg)) {                        $ok = false;                    }                    break;                case 'boolean':                    if ($arg !== false && $arg !== true) {                        $ok = false;                    }                    break;                case 'float':                case 'double':                    if (!is_float($arg)) {                        $ok = false;                    }                    break;                case 'date':                case 'dateTime.iso8601':                    if (!is_a($arg, 'IXR_Date')) {                        $ok = false;                    }                    break;            }            if (!$ok) {                return new IXR_Error(-32602, 'server error. invalid method parameters');            }        }        // It passed the test - run the "real" method call        return parent::call($methodname, $argsbackup);    }    function methodSignature($method) {        if (!$this->hasMethod($method)) {            return new IXR_Error(-32601, 'server error. requested method "'.$method.'" not specified.');        }        // We should be returning an array of types        $types = $this->signatures[$method];        $return = array();        foreach ($types as $type) {            switch ($type) {                case 'string':                    $return[] = 'string';                    break;                case 'int':                case 'i4':                    $return[] = 42;                    break;                case 'double':                    $return[] = 3.1415;                    break;                case 'dateTime.iso8601':                    $return[] = new IXR_Date(time());                    break;                case 'boolean':                    $return[] = true;                    break;                case 'base64':                    $return[] = new IXR_Base64('base64');                    break;                case 'array':                    $return[] = array('array');                    break;                case 'struct':                    $return[] = array('struct' => 'struct');                    break;            }        }        return $return;    }    function methodHelp($method) {        return $this->help[$method];    }}/** * IXR_ClientMulticall * * @package IXR * @since 1.5 */class IXR_ClientMulticall extends IXR_Client {    var $calls = array();    function IXR_ClientMulticall($server, $path = false, $port = 80) {        parent::IXR_Client($server, $path, $port);        $this->useragent = 'The Incutio XML-RPC PHP Library (multicall client)';    }    function addCall() {        $args = func_get_args();        $methodName = array_shift($args);        $struct = array(            'methodName' => $methodName,            'params' => $args        );        $this->calls[] = $struct;    }    function query() {        // Prepare multicall, then call the parent::query() method        return parent::query('system.multicall', $this->calls);    }}?>
<?php/** * WordPress core upgrade functionality. * * @package WordPress * @subpackage Administration * @since 2.7.0 *//** * Stores files to be deleted. * * @since 2.7.0 * @global array $_old_files * @var array * @name $_old_files */global $_old_files;$_old_files = array('wp-admin/bookmarklet.php','wp-admin/css/upload.css','wp-admin/css/upload-rtl.css','wp-admin/css/press-this-ie.css','wp-admin/css/press-this-ie-rtl.css','wp-admin/edit-form.php','wp-admin/link-import.php','wp-admin/images/box-bg-left.gif','wp-admin/images/box-bg-right.gif','wp-admin/images/box-bg.gif','wp-admin/images/box-butt-left.gif','wp-admin/images/box-butt-right.gif','wp-admin/images/box-butt.gif','wp-admin/images/box-head-left.gif','wp-admin/images/box-head-right.gif','wp-admin/images/box-head.gif','wp-admin/images/heading-bg.gif','wp-admin/images/login-bkg-bottom.gif','wp-admin/images/login-bkg-tile.gif','wp-admin/images/notice.gif','wp-admin/images/toggle.gif','wp-admin/images/comment-stalk-classic.gif','wp-admin/images/comment-stalk-fresh.gif','wp-admin/images/comment-stalk-rtl.gif','wp-admin/images/comment-pill.gif','wp-admin/images/del.png','wp-admin/images/media-button-gallery.gif','wp-admin/images/media-buttons.gif','wp-admin/images/tail.gif','wp-admin/images/gear.png','wp-admin/images/tab.png','wp-admin/images/postbox-bg.gif','wp-admin/includes/upload.php','wp-admin/js/dbx-admin-key.js','wp-admin/js/link-cat.js','wp-admin/js/forms.js','wp-admin/js/upload.js','wp-admin/js/set-post-thumbnail-handler.js','wp-admin/js/set-post-thumbnail-handler.dev.js','wp-admin/js/page.js','wp-admin/js/page.dev.js','wp-admin/js/slug.js','wp-admin/js/slug.dev.js','wp-admin/profile-update.php','wp-admin/templates.php','wp-includes/images/audio.png','wp-includes/images/css.png','wp-includes/images/default.png','wp-includes/images/doc.png','wp-includes/images/exe.png','wp-includes/images/html.png','wp-includes/images/js.png','wp-includes/images/pdf.png','wp-includes/images/swf.png','wp-includes/images/tar.png','wp-includes/images/text.png','wp-includes/images/video.png','wp-includes/images/zip.png','wp-includes/js/dbx.js','wp-includes/js/fat.js','wp-includes/js/list-manipulation.js','wp-includes/js/jquery/jquery.dimensions.min.js','wp-includes/js/tinymce/langs/en.js','wp-includes/js/tinymce/plugins/autosave/editor_plugin_src.js','wp-includes/js/tinymce/plugins/autosave/langs','wp-includes/js/tinymce/plugins/directionality/images','wp-includes/js/tinymce/plugins/directionality/langs','wp-includes/js/tinymce/plugins/inlinepopups/css','wp-includes/js/tinymce/plugins/inlinepopups/images','wp-includes/js/tinymce/plugins/inlinepopups/jscripts','wp-includes/js/tinymce/plugins/paste/images','wp-includes/js/tinymce/plugins/paste/jscripts','wp-includes/js/tinymce/plugins/paste/langs','wp-includes/js/tinymce/plugins/spellchecker/classes/HttpClient.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyGoogleSpell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspellShell.class.php','wp-includes/js/tinymce/plugins/spellchecker/css/spellchecker.css','wp-includes/js/tinymce/plugins/spellchecker/images','wp-includes/js/tinymce/plugins/spellchecker/langs','wp-includes/js/tinymce/plugins/spellchecker/tinyspell.php','wp-includes/js/tinymce/plugins/wordpress/images','wp-includes/js/tinymce/plugins/wordpress/langs','wp-includes/js/tinymce/plugins/wordpress/popups.css','wp-includes/js/tinymce/plugins/wordpress/wordpress.css','wp-includes/js/tinymce/plugins/wphelp','wp-includes/js/tinymce/themes/advanced/css','wp-includes/js/tinymce/themes/advanced/images','wp-includes/js/tinymce/themes/advanced/jscripts','wp-includes/js/tinymce/themes/advanced/langs','wp-includes/js/tinymce/tiny_mce_gzip.php','wp-includes/js/wp-ajax.js','wp-admin/admin-db.php','wp-admin/cat.js','wp-admin/categories.js','wp-admin/custom-fields.js','wp-admin/dbx-admin-key.js','wp-admin/edit-comments.js','wp-admin/install-rtl.css','wp-admin/install.css','wp-admin/upgrade-schema.php','wp-admin/upload-functions.php','wp-admin/upload-rtl.css','wp-admin/upload.css','wp-admin/upload.js','wp-admin/users.js','wp-admin/widgets-rtl.css','wp-admin/widgets.css','wp-admin/xfn.js','wp-includes/js/tinymce/license.html','wp-admin/cat-js.php','wp-admin/edit-form-ajax-cat.php','wp-admin/execute-pings.php','wp-admin/import/b2.php','wp-admin/import/btt.php','wp-admin/import/jkw.php','wp-admin/inline-uploading.php','wp-admin/link-categories.php','wp-admin/list-manipulation.js','wp-admin/list-manipulation.php','wp-includes/comment-functions.php','wp-includes/feed-functions.php','wp-includes/functions-compat.php','wp-includes/functions-formatting.php','wp-includes/functions-post.php','wp-includes/js/dbx-key.js','wp-includes/js/tinymce/plugins/autosave/langs/cs.js','wp-includes/js/tinymce/plugins/autosave/langs/sv.js','wp-includes/js/tinymce/themes/advanced/editor_template_src.js','wp-includes/links.php','wp-includes/pluggable-functions.php','wp-includes/template-functions-author.php','wp-includes/template-functions-category.php','wp-includes/template-functions-general.php','wp-includes/template-functions-links.php','wp-includes/template-functions-post.php','wp-includes/wp-l10n.php','wp-admin/import-b2.php','wp-admin/import-blogger.php','wp-admin/import-greymatter.php','wp-admin/import-livejournal.php','wp-admin/import-mt.php','wp-admin/import-rss.php','wp-admin/import-textpattern.php','wp-admin/quicktags.js','wp-images/fade-butt.png','wp-images/get-firefox.png','wp-images/header-shadow.png','wp-images/smilies','wp-images/wp-small.png','wp-images/wpminilogo.png','wp.php','wp-includes/gettext.php','wp-includes/streams.php',// MU'wp-admin/wpmu-admin.php','wp-admin/wpmu-blogs.php','wp-admin/wpmu-edit.php','wp-admin/wpmu-options.php','wp-admin/wpmu-themes.php','wp-admin/wpmu-upgrade-site.php','wp-admin/wpmu-users.php','wp-includes/wpmu-default-filters.php','wp-includes/wpmu-functions.php','wpmu-settings.php','index-install.php','README.txt','htaccess.dist','wp-admin/css/mu-rtl.css','wp-admin/css/mu.css','wp-admin/images/site-admin.png','wp-admin/includes/mu.php','wp-includes/images/wordpress-mu.png',// 3.0'wp-admin/categories.php','wp-admin/edit-category-form.php','wp-admin/edit-page-form.php','wp-admin/edit-pages.php','wp-admin/images/wp-logo.gif','wp-admin/js/wp-gears.dev.js','wp-admin/js/wp-gears.js','wp-admin/options-misc.php','wp-admin/page-new.php','wp-admin/page.php','wp-admin/rtl.css','wp-admin/rtl.dev.css','wp-admin/update-links.php','wp-admin/wp-admin.css','wp-admin/wp-admin.dev.css','wp-includes/js/codepress','wp-includes/js/jquery/autocomplete.dev.js','wp-includes/js/jquery/interface.js','wp-includes/js/jquery/autocomplete.js','wp-includes/js/scriptaculous/prototype.js','wp-includes/js/tinymce/wp-tinymce.js','wp-content/themes/twentyten/searchform.php','wp-admin/import','wp-admin/images/ico-edit.png','wp-admin/images/fav-top.png','wp-admin/images/ico-close.png','wp-admin/images/admin-header-footer.png','wp-admin/images/screen-options-left.gif','wp-admin/images/ico-add.png','wp-admin/images/browse-happy.gif','wp-admin/images/ico-viewpage.png',);/** * Upgrade the core of WordPress. * * This will create a .maintenance file at the base of the WordPress directory * to ensure that people can not access the web site, when the files are being * copied to their locations. * * The files in the {@link $_old_files} list will be removed and the new files * copied from the zip file after the database is upgraded. * * The steps for the upgrader for after the new release is downloaded and * unzipped is: *   1. Test unzipped location for select files to ensure that unzipped worked. *   2. Create the .maintenance file in current WordPress base. *   3. Copy new WordPress directory over old WordPress files. *   4. Upgrade WordPress to new version. *   5. Delete new WordPress directory path. *   6. Delete .maintenance file. *   7. Remove old files. *   8. Delete 'update_core' option. * * There are several areas of failure. For instance if PHP times out before step * 6, then you will not be able to access any portion of your site. Also, since * the upgrade will not continue where it left off, you will not be able to * automatically remove old files and remove the 'update_core' option. This * isn't that bad. * * If the copy of the new WordPress over the old fails, then the worse is that * the new WordPress directory will remain. * * If it is assumed that every file will be copied over, including plugins and * themes, then if you edit the default theme, you should rename it, so that * your changes remain. * * @since 2.7.0 * * @param string $from New release unzipped path. * @param string $to Path to old WordPress installation. * @return WP_Error|null WP_Error on failure, null on success. */function update_core($from, $to) {	global $wp_filesystem, $_old_files, $wpdb;	@set_time_limit( 300 );	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$required_php_version = '4.3';	$required_mysql_version = '4.1.2';	$wp_version = '3.0';	$php_compat     = version_compare( $php_version, $required_php_version, '>=' );	$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );	if ( !$mysql_compat || !$php_compat )		$wp_filesystem->delete($from, true);	if ( !$mysql_compat && !$php_compat )		return new WP_Error( 'php_mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version ) );	elseif ( !$php_compat )		return new WP_Error( 'php_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version ) );	elseif ( !$mysql_compat )		return new WP_Error( 'mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version ) );	// Sanity check the unzipped distribution	apply_filters('update_feedback', __('Verifying the unpacked files&#8230;'));	$distro = '';	$roots = array( '/wordpress', '/wordpress-mu' );	foreach( $roots as $root ) {		if ( $wp_filesystem->exists($from . $root . '/wp-settings.php') && $wp_filesystem->exists($from . $root . '/wp-admin/admin.php') &&			$wp_filesystem->exists($from . $root . '/wp-includes/functions.php') ) {			$distro = $root;			break;		}	}	if ( !$distro ) {		$wp_filesystem->delete($from, true);		return new WP_Error('insane_distro', __('The update could not be unpacked') );	}	apply_filters('update_feedback', __('Installing the latest version&#8230;'));	// Create maintenance file to signal that we are upgrading	$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';	$maintenance_file = $to . '.maintenance';	$wp_filesystem->delete($maintenance_file);	$wp_filesystem->put_contents($maintenance_file, $maintenance_string, FS_CHMOD_FILE);	// Copy new versions of WP files into place.	$result = copy_dir($from . $distro, $to);	if ( is_wp_error($result) ) {		$wp_filesystem->delete($maintenance_file);		$wp_filesystem->delete($from, true);		return $result;	}	// Remove old files	foreach ( $_old_files as $old_file ) {		$old_file = $to . $old_file;		if ( !$wp_filesystem->exists($old_file) )			continue;		$wp_filesystem->delete($old_file, true);	}	// Upgrade DB with separate request	apply_filters('update_feedback', __('Upgrading database&#8230;'));	$db_upgrade_url = admin_url('upgrade.php?step=upgrade_db');	wp_remote_post($db_upgrade_url, array('timeout' => 60));	// Remove working directory	$wp_filesystem->delete($from, true);	// Force refresh of update information	if ( function_exists('delete_site_transient') )		delete_site_transient('update_core');	else		delete_option('update_core');	// Remove maintenance file, we're done.	$wp_filesystem->delete($maintenance_file);}?>
<?php/** * Deprecated. Use registration.php. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC .  '/registration.php' );require_once(ABSPATH . WPINC .  '/registration.php');?>
<?php/** * Gets the email message from the user's mailbox to add as * a WordPress post. Mailbox connection information must be * configured under Settings > Writing * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require(dirname(__FILE__) . '/wp-load.php');if ( ! apply_filters( 'enable_post_by_email_configuration', true ) )	wp_die( __( 'This action has been disabled by the administrator.' ) );/** Allow a plugin to do a complete takeover of Post by Email **/do_action('wp-mail.php');/** Get the POP3 class with which to access the mailbox. */require_once( ABSPATH . WPINC . '/class-pop3.php' );/** Only check at this interval for new messages. */if ( !defined('WP_MAIL_INTERVAL') )	define('WP_MAIL_INTERVAL', 300); // 5 minutes$last_checked = get_transient('mailserver_last_checked');if ( $last_checked )	wp_die(__('Slow down cowboy, no need to check for new mails so often!'));set_transient('mailserver_last_checked', true, WP_MAIL_INTERVAL);$time_difference = get_option('gmt_offset') * 3600;$phone_delim = '::';$pop3 = new POP3();if ( !$pop3->connect( get_option('mailserver_url'), get_option('mailserver_port') ) || !$pop3->user( get_option('mailserver_login') ) )	wp_die( esc_html( $pop3->ERROR ) );$count = $pop3->pass( get_option('mailserver_pass') );if( false === $count )	wp_die( esc_html( $pop3->ERROR ) );if( 0 === $count ) {	$pop3->quit();	wp_die( __('There doesn&#8217;t seem to be any new mail.') );}for ( $i = 1; $i <= $count; $i++ ) {	$message = $pop3->get($i);	$bodysignal = false;	$boundary = '';	$charset = '';	$content = '';	$content_type = '';	$content_transfer_encoding = '';	$post_author = 1;	$author_found = false;	$dmonths = array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');	foreach ($message as $line) {		// body signal		if ( strlen($line) < 3 )			$bodysignal = true;		if ( $bodysignal ) {			$content .= $line;		} else {			if ( preg_match('/Content-Type: /i', $line) ) {				$content_type = trim($line);				$content_type = substr($content_type, 14, strlen($content_type) - 14);				$content_type = explode(';', $content_type);				if ( ! empty( $content_type[1] ) ) {					$charset = explode('=', $content_type[1]);					$charset = ( ! empty( $charset[1] ) ) ? trim($charset[1]) : '';				}				$content_type = $content_type[0];			}			if ( preg_match('/Content-Transfer-Encoding: /i', $line) ) {				$content_transfer_encoding = trim($line);				$content_transfer_encoding = substr($content_transfer_encoding, 27, strlen($content_transfer_encoding) - 27);				$content_transfer_encoding = explode(';', $content_transfer_encoding);				$content_transfer_encoding = $content_transfer_encoding[0];			}			if ( ( $content_type == 'multipart/alternative' ) && ( false !== strpos($line, 'boundary="') ) && ( '' == $boundary ) ) {				$boundary = trim($line);				$boundary = explode('"', $boundary);				$boundary = $boundary[1];			}			if (preg_match('/Subject: /i', $line)) {				$subject = trim($line);				$subject = substr($subject, 9, strlen($subject) - 9);				// Captures any text in the subject before $phone_delim as the subject				if ( function_exists('iconv_mime_decode') ) {					$subject = iconv_mime_decode($subject, 2, get_option('blog_charset'));				} else {					$subject = wp_iso_descrambler($subject);				}				$subject = explode($phone_delim, $subject);				$subject = $subject[0];			}			// Set the author using the email address (From or Reply-To, the last used)			// otherwise use the site admin			if ( preg_match('/(From|Reply-To): /', $line) )  {				if ( preg_match('|[a-z0-9_.-]+@[a-z0-9_.-]+(?!.*<)|i', $line, $matches) )					$author = $matches[0];				else					$author = trim($line);				$author = sanitize_email($author);				if ( is_email($author) ) {					echo '<p>' . sprintf(__('Author is %s'), $author) . '</p>';					$userdata = get_user_by_email($author);					if ( empty($userdata) ) {						$author_found = false;					} else {						$post_author = $userdata->ID;						$author_found = true;					}				} else {					$author_found = false;				}			}			if (preg_match('/Date: /i', $line)) { // of the form '20 Mar 2002 20:32:37'				$ddate = trim($line);				$ddate = str_replace('Date: ', '', $ddate);				if (strpos($ddate, ',')) {					$ddate = trim(substr($ddate, strpos($ddate, ',') + 1, strlen($ddate)));				}				$date_arr = explode(' ', $ddate);				$date_time = explode(':', $date_arr[3]);				$ddate_H = $date_time[0];				$ddate_i = $date_time[1];				$ddate_s = $date_time[2];				$ddate_m = $date_arr[1];				$ddate_d = $date_arr[0];				$ddate_Y = $date_arr[2];				for ( $j = 0; $j < 12; $j++ ) {					if ( $ddate_m == $dmonths[$j] ) {						$ddate_m = $j+1;					}				}				$time_zn = intval($date_arr[4]) * 36;				$ddate_U = gmmktime($ddate_H, $ddate_i, $ddate_s, $ddate_m, $ddate_d, $ddate_Y);				$ddate_U = $ddate_U - $time_zn;				$post_date = gmdate('Y-m-d H:i:s', $ddate_U + $time_difference);				$post_date_gmt = gmdate('Y-m-d H:i:s', $ddate_U);			}		}	}	// Set $post_status based on $author_found and on author's publish_posts capability	if ( $author_found ) {		$user = new WP_User($post_author);		$post_status = ( $user->has_cap('publish_posts') ) ? 'publish' : 'pending';	} else {		// Author not found in DB, set status to pending.  Author already set to admin.		$post_status = 'pending';	}	$subject = trim($subject);	if ( $content_type == 'multipart/alternative' ) {		$content = explode('--'.$boundary, $content);		$content = $content[2];		// match case-insensitive content-transfer-encoding		if ( preg_match( '/Content-Transfer-Encoding: quoted-printable/i', $content, $delim) ) {			$content = explode($delim[0], $content);			$content = $content[1];		}		$content = strip_tags($content, '<img><p><br><i><b><u><em><strong><strike><font><span><div>');	}	$content = trim($content);	//Give Post-By-Email extending plugins full access to the content	//Either the raw content or the content of the last quoted-printable section	$content = apply_filters('wp_mail_original_content', $content);	if ( false !== stripos($content_transfer_encoding, "quoted-printable") ) {		$content = quoted_printable_decode($content);	}	if ( function_exists('iconv') && ! empty( $charset ) ) {		$content = iconv($charset, get_option('blog_charset'), $content);	}	// Captures any text in the body after $phone_delim as the body	$content = explode($phone_delim, $content);	$content = empty( $content[1] ) ? $content[0] : $content[1];	$content = trim($content);	$post_content = apply_filters('phone_content', $content);	$post_title = xmlrpc_getposttitle($content);	if ($post_title == '') $post_title = $subject;	$post_category = array(get_option('default_email_category'));	$post_data = compact('post_content','post_title','post_date','post_date_gmt','post_author','post_category', 'post_status');	$post_data = add_magic_quotes($post_data);	$post_ID = wp_insert_post($post_data);	if ( is_wp_error( $post_ID ) )		echo "\n" . $post_ID->get_error_message();	// We couldn't post, for whatever reason. Better move forward to the next email.	if ( empty( $post_ID ) )		continue;	do_action('publish_phone', $post_ID);	echo "\n<p>" . sprintf(__('<strong>Author:</strong> %s'), esc_html($post_author)) . '</p>';	echo "\n<p>" . sprintf(__('<strong>Posted title:</strong> %s'), esc_html($post_title)) . '</p>';	if(!$pop3->delete($i)) {		echo '<p>' . sprintf(__('Oops: %s'), esc_html($pop3->ERROR)) . '</p>';		$pop3->reset();		exit;	} else {		echo '<p>' . sprintf(__('Mission complete.  Message <strong>%s</strong> deleted.'), $i) . '</p>';	}}$pop3->quit();?>
<?php/** * Displays Administration Menu. * * @package WordPress * @subpackage Administration *//** * The current page. * * @global string $self * @name $self * @var string */$self = preg_replace('|^.*/wp-admin/|i', '', $_SERVER['PHP_SELF']);$self = preg_replace('|^.*/plugins/|i', '', $self);$self = preg_replace('|^.*/mu-plugins/|i', '', $self);global $menu, $submenu, $parent_file; //For when admin-header is included from within a function.$parent_file = apply_filters("parent_file", $parent_file); // For plugins to move submenu tabs around.get_admin_page_parent();/** * Display menu. * * @access private * @since 2.7.0 * * @param array $menu * @param array $submenu * @param bool $submenu_as_parent */function _wp_menu_output( $menu, $submenu, $submenu_as_parent = true ) {	global $self, $parent_file, $submenu_file, $plugin_page, $pagenow, $typenow;	$first = true;	// 0 = name, 1 = capability, 2 = file, 3 = class, 4 = id, 5 = icon src	foreach ( $menu as $key => $item ) {		$admin_is_parent = false;		$class = array();		if ( $first ) {			$class[] = 'wp-first-item';			$first = false;		}		if ( !empty($submenu[$item[2]]) )			$class[] = 'wp-has-submenu';		if ( ( $parent_file && $item[2] == $parent_file ) || ( false === strpos($parent_file, '?') && $self == $item[2] ) ) {			if ( !empty($submenu[$item[2]]) )				$class[] = 'wp-has-current-submenu wp-menu-open';			else				$class[] = 'current';		}		if ( ! empty($item[4]) )			$class[] = $item[4];		$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';		$tabindex = ' tabindex="1"';		$id = ! empty($item[5]) ? ' id="' . preg_replace( '|[^a-zA-Z0-9_:.]|', '-', $item[5] ) . '"' : '';		$img = '';		if ( ! empty($item[6]) ) {			if ( 'div' === $item[6] )				$img = '<br />';			else				$img = '<img src="' . $item[6] . '" alt="" />';		}		$toggle = '<div class="wp-menu-toggle"><br /></div>';		$title = wptexturize($item[0]);		echo "\n\t<li$class$id>";		if ( false !== strpos($class, 'wp-menu-separator') ) {			echo '<a class="separator" href="?unfoldmenu=1"><br /></a>';		} elseif ( $submenu_as_parent && !empty($submenu[$item[2]]) ) {			$submenu[$item[2]] = array_values($submenu[$item[2]]);  // Re-index.			$menu_hook = get_plugin_page_hook($submenu[$item[2]][0][2], $item[2]);			$menu_file = $submenu[$item[2]][0][2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ( ('index.php' != $submenu[$item[2]][0][2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") ) || !empty($menu_hook)) {				$admin_is_parent = true;				echo "<div class='wp-menu-image'><a href='admin.php?page={$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='admin.php?page={$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='{$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			}		} else if ( current_user_can($item[1]) ) {			$menu_hook = get_plugin_page_hook($item[2], 'admin.php');			$menu_file = $item[2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ('index.php' != $item[2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") || !empty($menu_hook) ) {				$admin_is_parent = true;				echo "\n\t<div class='wp-menu-image'><a href='admin.php?page={$item[2]}'>$img</a></div>$toggle<a href='admin.php?page={$item[2]}'$class$tabindex>{$item[0]}</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$item[2]}'>$img</a></div>$toggle<a href='{$item[2]}'$class$tabindex>{$item[0]}</a>";			}		}		if ( !empty($submenu[$item[2]]) ) {			echo "\n\t<div class='wp-submenu'><div class='wp-submenu-head'>{$item[0]}</div><ul>";			$first = true;			foreach ( $submenu[$item[2]] as $sub_key => $sub_item ) {				if ( !current_user_can($sub_item[1]) )					continue;				$class = array();				if ( $first ) {					$class[] = 'wp-first-item';					$first = false;				}				$menu_file = $item[2];				if ( false !== $pos = strpos($menu_file, '?') )					$menu_file = substr($menu_file, 0, $pos);				// Handle current for post_type=post|page|foo pages, which won't match $self.				if ( !empty($typenow) )					$self_type = $self . '?post_type=' . $typenow;				else					$self_type = 'nothing';				if ( isset($submenu_file) ) {					if ( $submenu_file == $sub_item[2] )						$class[] = 'current';				// If plugin_page is set the parent must either match the current page or not physically exist.				// This allows plugin pages with the same hook to exist under different parents.				} else if ( (isset($plugin_page) && $plugin_page == $sub_item[2] && (!file_exists($menu_file) || ($item[2] == $self) || ($item[2] == $self_type))) || (!isset($plugin_page) && $self == $sub_item[2]) ) {					$class[] = 'current';				}				$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';				$menu_hook = get_plugin_page_hook($sub_item[2], $item[2]);				$sub_file = $sub_item[2];				if ( false !== $pos = strpos($sub_file, '?') )					$sub_file = substr($sub_file, 0, $pos);				$title = wptexturize($sub_item[0]);				if ( ( ('index.php' != $sub_item[2]) && file_exists(WP_PLUGIN_DIR . "/$sub_file") ) || ! empty($menu_hook) ) {					// If admin.php is the current page or if the parent exists as a file in the plugins or admin dir					if ( (!$admin_is_parent && file_exists(WP_PLUGIN_DIR . "/$menu_file") && !is_dir(WP_PLUGIN_DIR . "/{$item[2]}")) || file_exists($menu_file) )						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), $item[2] );					else						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), 'admin.php' );					$sub_item_url = esc_url($sub_item_url);					echo "<li$class><a href='$sub_item_url'$class$tabindex>$title</a></li>";				} else {					echo "<li$class><a href='{$sub_item[2]}'$class$tabindex>$title</a></li>";				}			}			echo "</ul></div>";		}		echo "</li>";	}}?><ul id="adminmenu"><?php_wp_menu_output( $menu, $submenu );do_action( 'adminmenu' );?></ul>
<?php/** * Deprecated multisite admin functions from past WordPress versions and WordPress MU. * You shouldn't use these functions and look for the alternatives instead. The functions * will be removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//** * @deprecated 3.0.0 */function wpmu_menu() {	_deprecated_function(__FUNCTION__, '3.0' );	// deprecated. See #11763}/**  * Determines if the available space defined by the admin has been exceeded by the user.  *  * @deprecated 3.0.0  * @see is_upload_space_available() */function wpmu_checkAvailableSpace() {	_deprecated_function(__FUNCTION__, '3.0', 'is_upload_space_available()' );	if ( !is_upload_space_available() )		wp_die( __('Sorry, you must delete files before you can upload any more.') );}/** * @deprecated 3.0.0 */function mu_options( $options ) {	_deprecated_function(__FUNCTION__, '3.0' );	return $options;}/** * @deprecated 3.0.0 * @see activate_plugin() */function activate_sitewide_plugin() {	_deprecated_function(__FUNCTION__, '3.0', 'activate_plugin()' );	return false;}/** * @deprecated 3.0.0 * @see deactivate_sitewide_plugin() */function deactivate_sitewide_plugin( $plugin = false ) {	_deprecated_function(__FUNCTION__, '3.0', 'deactivate_plugin()' );	return;}/** * @deprecated 3.0.0 * @see is_network_only_plugin() */function is_wpmu_sitewide_plugin( $file ) {	_deprecated_function(__FUNCTION__, '3.0', 'is_network_only_plugin()' );	return is_network_only_plugin( $file );}?>
<?php// Silence is golden.?>
<?php/** * The template for displaying Comments. * * The area of the page that contains both current comments * and the comment form.  The actual display of comments is * handled by a callback to twentyten_comment which is * located in the functions.php file. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>			<div id="comments"><?php if ( post_password_required() ) : ?>				<p class="nopassword"><?php _e( 'This post is password protected. Enter the password to view any comments.', 'twentyten' ); ?></p>			</div><!-- #comments --><?php		/* Stop the rest of comments.php from being processed,		 * but don't kill the script entirely -- we still have		 * to fully load the template.		 */		return;	endif;?><?php	// You can start editing here -- including this comment!?><?php if ( have_comments() ) : ?>			<h3 id="comments-title"><?php			printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number(), 'twentyten' ),			number_format_i18n( get_comments_number() ), '<em>' . get_the_title() . '</em>' );			?></h3><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div> <!-- .navigation --><?php endif; // check for comment navigation ?>			<ol class="commentlist">				<?php					/* Loop through and list the comments. Tell wp_list_comments()					 * to use twentyten_comment() to format the comments.					 * If you want to overload this in a child theme then you can					 * define twentyten_comment() and that will be used instead.					 * See twentyten_comment() in twentyten/functions.php for more.					 */					wp_list_comments( array( 'callback' => 'twentyten_comment' ) );				?>			</ol><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div><!-- .navigation --><?php endif; // check for comment navigation ?><?php else : // or, if we don't have comments:	/* If there are no comments and comments are closed,	 * let's leave a little note, shall we?	 */	if ( ! comments_open() ) :?>	<p class="nocomments"><?php _e( 'Comments are closed.', 'twentyten' ); ?></p><?php endif; // end ! comments_open() ?><?php endif; // end have_comments() ?><?php comment_form(); ?></div><!-- #comments -->
<?php/** * HTML/XHTML filter that only allows some elements and attributes * * Added wp_ prefix to avoid conflicts with existing kses users * * @version 0.2.2 * @copyright (C) 2002, 2003, 2005 * @author Ulf Harnhammar <metaur@users.sourceforge.net> * * @package External * @subpackage KSES * * @internal * *** CONTACT INFORMATION *** * E-mail:      metaur at users dot sourceforge dot net * Web page:    http://sourceforge.net/projects/kses * Paper mail:  Ulf Harnhammar *              Ymergatan 17 C *              753 25  Uppsala *              SWEDEN * * [kses strips evil scripts!] *//** * You can override this in a plugin. * * @since 1.2.0 */if ( ! defined( 'CUSTOM_TAGS' ) )	define( 'CUSTOM_TAGS', false );if ( ! CUSTOM_TAGS ) {	/**	 * Kses global for default allowable HTML tags.	 *	 * Can be override by using CUSTOM_TAGS constant.	 *	 * @global array $allowedposttags	 * @since 2.0.0	 */	$allowedposttags = array(		'address' => array(),		'a' => array(			'class' => array (),			'href' => array (),			'id' => array (),			'title' => array (),			'rel' => array (),			'rev' => array (),			'name' => array (),			'target' => array()),		'abbr' => array(			'class' => array (),			'title' => array ()),		'acronym' => array(			'title' => array ()),		'article' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'aside' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'b' => array(),		'big' => array(),		'blockquote' => array(			'id' => array (),			'cite' => array (),			'class' => array(),			'lang' => array(),			'xml:lang' => array()),		'br' => array (			'class' => array ()),		'button' => array(			'disabled' => array (),			'name' => array (),			'type' => array (),			'value' => array ()),		'caption' => array(			'align' => array (),			'class' => array ()),		'cite' => array (			'class' => array(),			'dir' => array(),			'lang' => array(),			'title' => array ()),		'code' => array (			'style' => array()),		'col' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'span' => array (),			'dir' => array(),			'style' => array (),			'valign' => array (),			'width' => array ()),		'del' => array(			'datetime' => array ()),		'dd' => array(),		'details' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'open' => array (),			'style' => array (),			'xml:lang' => array(),		),		'div' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'dl' => array(),		'dt' => array(),		'em' => array(),		'fieldset' => array(),		'figure' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'figcaption' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'font' => array(			'color' => array (),			'face' => array (),			'size' => array ()),		'footer' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'form' => array(			'action' => array (),			'accept' => array (),			'accept-charset' => array (),			'enctype' => array (),			'method' => array (),			'name' => array (),			'target' => array ()),		'h1' => array(			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h2' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h3' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h4' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h5' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h6' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'header' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hgroup' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hr' => array (			'align' => array (),			'class' => array (),			'noshade' => array (),			'size' => array (),			'width' => array ()),		'i' => array(),		'img' => array(			'alt' => array (),			'align' => array (),			'border' => array (),			'class' => array (),			'height' => array (),			'hspace' => array (),			'longdesc' => array (),			'vspace' => array (),			'src' => array (),			'style' => array (),			'width' => array ()),		'ins' => array(			'datetime' => array (),			'cite' => array ()),		'kbd' => array(),		'label' => array(			'for' => array ()),		'legend' => array(			'align' => array ()),		'li' => array (			'align' => array (),			'class' => array ()),		'menu' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'nav' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'p' => array(			'class' => array (),			'align' => array (),			'dir' => array(),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'pre' => array(			'style' => array(),			'width' => array ()),		'q' => array(			'cite' => array ()),		's' => array(),		'span' => array (			'class' => array (),			'dir' => array (),			'align' => array (),			'lang' => array (),			'style' => array (),			'title' => array (),			'xml:lang' => array()),		'section' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'strike' => array(),		'strong' => array(),		'sub' => array(),		'summary' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'sup' => array(),		'table' => array(			'align' => array (),			'bgcolor' => array (),			'border' => array (),			'cellpadding' => array (),			'cellspacing' => array (),			'class' => array (),			'dir' => array(),			'id' => array(),			'rules' => array (),			'style' => array (),			'summary' => array (),			'width' => array ()),		'tbody' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'valign' => array ()),		'td' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'dir' => array(),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'style' => array (),			'valign' => array (),			'width' => array ()),		'textarea' => array(			'cols' => array (),			'rows' => array (),			'disabled' => array (),			'name' => array (),			'readonly' => array ()),		'tfoot' => array(			'align' => array (),			'char' => array (),			'class' => array (),			'charoff' => array (),			'valign' => array ()),		'th' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'valign' => array (),			'width' => array ()),		'thead' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'valign' => array ()),		'title' => array(),		'tr' => array(			'align' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'style' => array (),			'valign' => array ()),		'tt' => array(),		'u' => array(),		'ul' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'ol' => array (			'class' => array (),			'start' => array (),			'style' => array (),			'type' => array ()),		'var' => array ());	/**	 * Kses allowed HTML elements.	 *	 * @global array $allowedtags	 * @since 1.0.0	 */	$allowedtags = array(		'a' => array(			'href' => array (),			'title' => array ()),		'abbr' => array(			'title' => array ()),		'acronym' => array(			'title' => array ()),		'b' => array(),		'blockquote' => array(			'cite' => array ()),		//	'br' => array(),		'cite' => array (),		'code' => array(),		'del' => array(			'datetime' => array ()),		//	'dd' => array(),		//	'dl' => array(),		//	'dt' => array(),		'em' => array (), 'i' => array (),		//	'ins' => array('datetime' => array(), 'cite' => array()),		//	'li' => array(),		//	'ol' => array(),		//	'p' => array(),		'q' => array(			'cite' => array ()),		'strike' => array(),		'strong' => array(),		//	'sub' => array(),		//	'sup' => array(),		//	'u' => array(),		//	'ul' => array(),	);	$allowedentitynames = array(		'nbsp',    'iexcl',  'cent',    'pound',  'curren', 'yen',		'brvbar',  'sect',   'uml',     'copy',   'ordf',   'laquo',		'not',     'shy',    'reg',     'macr',   'deg',    'plusmn',		'acute',   'micro',  'para',    'middot', 'cedil',  'ordm',		'raquo',   'iquest', 'Agrave',  'Aacute', 'Acirc',  'Atilde',		'Auml',    'Aring',  'AElig',   'Ccedil', 'Egrave', 'Eacute',		'Ecirc',   'Euml',   'Igrave',  'Iacute', 'Icirc',  'Iuml',		'ETH',     'Ntilde', 'Ograve',  'Oacute', 'Ocirc',  'Otilde',		'Ouml',    'times',  'Oslash',  'Ugrave', 'Uacute', 'Ucirc',		'Uuml',    'Yacute', 'THORN',   'szlig',  'agrave', 'aacute',		'acirc',   'atilde', 'auml',    'aring',  'aelig',  'ccedil',		'egrave',  'eacute', 'ecirc',   'euml',   'igrave', 'iacute',		'icirc',   'iuml',   'eth',     'ntilde', 'ograve', 'oacute',		'ocirc',   'otilde', 'ouml',    'divide', 'oslash', 'ugrave',		'uacute',  'ucirc',  'uuml',    'yacute', 'thorn',  'yuml',		'quot',    'amp',    'lt',      'gt',     'apos',   'OElig',		'oelig',   'Scaron', 'scaron',  'Yuml',   'circ',   'tilde',		'ensp',    'emsp',   'thinsp',  'zwnj',   'zwj',    'lrm',		'rlm',     'ndash',  'mdash',   'lsquo',  'rsquo',  'sbquo',		'ldquo',   'rdquo',  'bdquo',   'dagger', 'Dagger', 'permil',		'lsaquo',  'rsaquo', 'euro',    'fnof',   'Alpha',  'Beta',		'Gamma',   'Delta',  'Epsilon', 'Zeta',   'Eta',    'Theta',		'Iota',    'Kappa',  'Lambda',  'Mu',     'Nu',     'Xi',		'Omicron', 'Pi',     'Rho',     'Sigma',  'Tau',    'Upsilon',		'Phi',     'Chi',    'Psi',     'Omega',  'alpha',  'beta',		'gamma',   'delta',  'epsilon', 'zeta',   'eta',    'theta',		'iota',    'kappa',  'lambda',  'mu',     'nu',     'xi',		'omicron', 'pi',     'rho',     'sigmaf', 'sigma',  'tau',		'upsilon', 'phi',    'chi',     'psi',    'omega',  'thetasym',		'upsih',   'piv',    'bull',    'hellip', 'prime',  'Prime',		'oline',   'frasl',  'weierp',  'image',  'real',   'trade',		'alefsym', 'larr',   'uarr',    'rarr',   'darr',   'harr',		'crarr',   'lArr',   'uArr',    'rArr',   'dArr',   'hArr',		'forall',  'part',   'exist',   'empty',  'nabla',  'isin',		'notin',   'ni',     'prod',    'sum',    'minus',  'lowast',		'radic',   'prop',   'infin',   'ang',    'and',    'or',		'cap',     'cup',    'int',     'sim',    'cong',   'asymp',		'ne',      'equiv',  'le',      'ge',     'sub',    'sup',		'nsub',    'sube',   'supe',    'oplus',  'otimes', 'perp',		'sdot',    'lceil',  'rceil',   'lfloor', 'rfloor', 'lang',		'rang',    'loz',    'spades',  'clubs',  'hearts', 'diams',	);}/** * Filters content and keeps only allowable HTML elements. * * This function makes sure that only the allowed HTML element names, attribute * names and attribute values plus only sane HTML entities will occur in * $string. You have to remove any slashes from PHP's magic quotes before you * call this function. * * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news', * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This * covers all common link protocols, except for 'javascript' which should not * be allowed for untrusted users. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Optional. Allowed protocol in links. * @return string Filtered content with only allowed HTML elements */function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {	$allowed_protocols = wp_parse_args( $allowed_protocols, apply_filters('kses_allowed_protocols', array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn') ));	$string = wp_kses_no_null($string);	$string = wp_kses_js_entities($string);	$string = wp_kses_normalize_entities($string);	$allowed_html_fixed = wp_kses_array_lc($allowed_html);	$string = wp_kses_hook($string, $allowed_html_fixed, $allowed_protocols); // WP changed the order of these funcs and added args to wp_kses_hook	return wp_kses_split($string, $allowed_html_fixed, $allowed_protocols);}/** * You add any kses hooks here. * * There is currently only one kses WordPress hook and it is called here. All * parameters are passed to the hooks and expected to recieve a string. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Allowed protocol in links * @return string Filtered content through 'pre_kses' hook */function wp_kses_hook($string, $allowed_html, $allowed_protocols) {	$string = apply_filters('pre_kses', $string, $allowed_html, $allowed_protocols);	return $string;}/** * This function returns kses' version number. * * @since 1.0.0 * * @return string KSES Version Number */function wp_kses_version() {	return '0.2.2';}/** * Searches for HTML tags, no matter how malformed. * * It also matches stray ">" characters. * * @since 1.0.0 * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Content with fixed HTML tags */function wp_kses_split($string, $allowed_html, $allowed_protocols) {	global $pass_allowed_html, $pass_allowed_protocols;	$pass_allowed_html = $allowed_html;	$pass_allowed_protocols = $allowed_protocols;	return preg_replace_callback('%((<!--.*?(-->|$))|(<[^>]*(>|$)|>))%',		create_function('$match', 'global $pass_allowed_html, $pass_allowed_protocols; return wp_kses_split2($match[1], $pass_allowed_html, $pass_allowed_protocols);'), $string);}/** * Callback for wp_kses_split for fixing malformed HTML tags. * * This function does a lot of work. It rejects some very malformed things like * <:::>. It returns an empty string, if the element isn't allowed (look ma, no * strip_tags()!). Otherwise it splits the tag into an element and an attribute * list. * * After the tag is split into an element and an attribute list, it is run * through another filter which will remove illegal attributes and once that is * completed, will be returned. * * @access private * @since 1.0.0 * @uses wp_kses_attr() * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Fixed HTML element */function wp_kses_split2($string, $allowed_html, $allowed_protocols) {	$string = wp_kses_stripslashes($string);	if (substr($string, 0, 1) != '<')		return '&gt;';	# It matched a ">" character	if (preg_match('%^<!--(.*?)(-->)?$%', $string, $matches)) {		$string = str_replace(array('<!--', '-->'), '', $matches[1]);		while ( $string != $newstring = wp_kses($string, $allowed_html, $allowed_protocols) )			$string = $newstring;		if ( $string == '' )			return '';		// prevent multiple dashes in comments		$string = preg_replace('/--+/', '-', $string);		// prevent three dashes closing a comment		$string = preg_replace('/-$/', '', $string);		return "<!--{$string}-->";	}	# Allow HTML comments	if (!preg_match('%^<\s*(/\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))		return '';	# It's seriously malformed	$slash = trim($matches[1]);	$elem = $matches[2];	$attrlist = $matches[3];	if (!@isset($allowed_html[strtolower($elem)]))		return '';	# They are using a not allowed HTML element	if ($slash != '')		return "<$slash$elem>";	# No attributes are allowed for closing elements	return wp_kses_attr("$slash$elem", $attrlist, $allowed_html, $allowed_protocols);}/** * Removes all attributes, if none are allowed for this element. * * If some are allowed it calls wp_kses_hair() to split them further, and then * it builds up new HTML code from the data that kses_hair() returns. It also * removes "<" and ">" characters, if there are any left. One more thing it does * is to check if the tag has a closing XHTML slash, and if it does, it puts one * in the returned code as well. * * @since 1.0.0 * * @param string $element HTML element/tag * @param string $attr HTML attributes from HTML element to closing HTML element tag * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Sanitized HTML element */function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {	# Is there a closing XHTML slash at the end of the attributes?	$xhtml_slash = '';	if (preg_match('%\s*/\s*$%', $attr))		$xhtml_slash = ' /';	# Are any attributes allowed at all for this element?	if (@ count($allowed_html[strtolower($element)]) == 0)		return "<$element$xhtml_slash>";	# Split it	$attrarr = wp_kses_hair($attr, $allowed_protocols);	# Go through $attrarr, and save the allowed attributes for this element	# in $attr2	$attr2 = '';	foreach ($attrarr as $arreach) {		if (!@ isset ($allowed_html[strtolower($element)][strtolower($arreach['name'])]))			continue; # the attribute is not allowed		$current = $allowed_html[strtolower($element)][strtolower($arreach['name'])];		if ($current == '')			continue; # the attribute is not allowed		if (!is_array($current))			$attr2 .= ' '.$arreach['whole'];		# there are no checks		else {			# there are some checks			$ok = true;			foreach ($current as $currkey => $currval)				if (!wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval)) {					$ok = false;					break;				}			if ( $arreach['name'] == 'style' ) {				$orig_value = $arreach['value'];				$value = safecss_filter_attr($orig_value);				if ( empty($value) )					continue;				$arreach['value'] = $value;				$arreach['whole'] = str_replace($orig_value, $value, $arreach['whole']);			}			if ($ok)				$attr2 .= ' '.$arreach['whole']; # it passed them		} # if !is_array($current)	} # foreach	# Remove any "<" or ">" characters	$attr2 = preg_replace('/[<>]/', '', $attr2);	return "<$element$attr2$xhtml_slash>";}/** * Builds an attribute list from string containing attributes. * * This function does a lot of work. It parses an attribute list into an array * with attribute data, and tries to do the right thing even if it gets weird * input. It will add quotes around attribute values that don't have any quotes * or apostrophes around them, to make it easier to produce HTML code that will * conform to W3C's HTML specification. It will also remove bad URL protocols * from attribute values.  It also reduces duplicate attributes by using the * attribute defined first (foo='bar' foo='baz' will result in foo='bar'). * * @since 1.0.0 * * @param string $attr Attribute list from HTML element to closing HTML element tag * @param array $allowed_protocols Allowed protocols to keep * @return array List of attributes after parsing */function wp_kses_hair($attr, $allowed_protocols) {	$attrarr = array ();	$mode = 0;	$attrname = '';	$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');	# Loop through the whole attribute list	while (strlen($attr) != 0) {		$working = 0; # Was the last operation successful?		switch ($mode) {			case 0 : # attribute name, href for instance				if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {					$attrname = $match[1];					$working = $mode = 1;					$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);				}				break;			case 1 : # equals sign or valueless ("selected")				if (preg_match('/^\s*=\s*/', $attr)) # equals sign					{					$working = 1;					$mode = 2;					$attr = preg_replace('/^\s*=\s*/', '', $attr);					break;				}				if (preg_match('/^\s+/', $attr)) # valueless					{					$working = 1;					$mode = 0;					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');					}					$attr = preg_replace('/^\s+/', '', $attr);				}				break;			case 2 : # attribute value, a URL after href= for instance				if (preg_match('%^"([^"]*)"(\s+|/?$)%', $attr, $match))					# "value"					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);					break;				}				if (preg_match("%^'([^']*)'(\s+|/?$)%", $attr, $match))					# 'value'					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname='$thisval'", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);					break;				}				if (preg_match("%^([^\s\"']+)(\s+|/?$)%", $attr, $match))					# value					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					# We add quotes to conform to W3C's HTML spec.					$working = 1;					$mode = 0;					$attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);				}				break;		} # switch		if ($working == 0) # not well formed, remove and try again		{			$attr = wp_kses_html_error($attr);			$mode = 0;		}	} # while	if ($mode == 1 && FALSE === array_key_exists($attrname, $attrarr))		# special case, for when the attribute list ends with a valueless		# attribute like "selected"		$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');	return $attrarr;}/** * Performs different checks for attribute values. * * The currently implemented checks are "maxlen", "minlen", "maxval", "minval" * and "valueless" with even more checks to come soon. * * @since 1.0.0 * * @param string $value Attribute value * @param string $vless Whether the value is valueless. Use 'y' or 'n' * @param string $checkname What $checkvalue is checking for. * @param mixed $checkvalue What constraint the value should pass * @return bool Whether check passes */function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {	$ok = true;	switch (strtolower($checkname)) {		case 'maxlen' :			# The maxlen check makes sure that the attribute value has a length not			# greater than the given value. This can be used to avoid Buffer Overflows			# in WWW clients and various Internet servers.			if (strlen($value) > $checkvalue)				$ok = false;			break;		case 'minlen' :			# The minlen check makes sure that the attribute value has a length not			# smaller than the given value.			if (strlen($value) < $checkvalue)				$ok = false;			break;		case 'maxval' :			# The maxval check does two things: it checks that the attribute value is			# an integer from 0 and up, without an excessive amount of zeroes or			# whitespace (to avoid Buffer Overflows). It also checks that the attribute			# value is not greater than the given value.			# This check can be used to avoid Denial of Service attacks.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value > $checkvalue)				$ok = false;			break;		case 'minval' :			# The minval check checks that the attribute value is a positive integer,			# and that it is not smaller than the given value.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value < $checkvalue)				$ok = false;			break;		case 'valueless' :			# The valueless check checks if the attribute has a value			# (like <a href="blah">) or not (<option selected>). If the given value			# is a "y" or a "Y", the attribute must not have a value.			# If the given value is an "n" or an "N", the attribute must have one.			if (strtolower($checkvalue) != $vless)				$ok = false;			break;	} # switch	return $ok;}/** * Sanitize string from bad protocols. * * This function removes all non-allowed protocols from the beginning of * $string. It ignores whitespace and the case of the letters, and it does * understand HTML entities. It does its work in a while loop, so it won't be * fooled by a string like "javascript:javascript:alert(57)". * * @since 1.0.0 * * @param string $string Content to filter bad protocols from * @param array $allowed_protocols Allowed protocols to keep * @return string Filtered content */function wp_kses_bad_protocol($string, $allowed_protocols) {	$string = wp_kses_no_null($string);	$string2 = $string.'a';	while ($string != $string2) {		$string2 = $string;		$string = wp_kses_bad_protocol_once($string, $allowed_protocols);	} # while	return $string;}/** * Removes any NULL characters in $string. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_no_null($string) {	$string = preg_replace('/\0+/', '', $string);	$string = preg_replace('/(\\\\0)+/', '', $string);	return $string;}/** * Strips slashes from in front of quotes. * * This function changes the character sequence  \"  to just  ". It leaves all * other slashes alone. It's really weird, but the quoting from * preg_replace(//e) seems to require this. * * @since 1.0.0 * * @param string $string String to strip slashes * @return string Fixed strings with quoted slashes */function wp_kses_stripslashes($string) {	return preg_replace('%\\\\"%', '"', $string);}/** * Goes through an array and changes the keys to all lower case. * * @since 1.0.0 * * @param array $inarray Unfiltered array * @return array Fixed array with all lowercase keys */function wp_kses_array_lc($inarray) {	$outarray = array ();	foreach ( (array) $inarray as $inkey => $inval) {		$outkey = strtolower($inkey);		$outarray[$outkey] = array ();		foreach ( (array) $inval as $inkey2 => $inval2) {			$outkey2 = strtolower($inkey2);			$outarray[$outkey][$outkey2] = $inval2;		} # foreach $inval	} # foreach $inarray	return $outarray;}/** * Removes the HTML JavaScript entities found in early versions of Netscape 4. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_js_entities($string) {	return preg_replace('%&\s*\{[^}]*(\}\s*;?|$)%', '', $string);}/** * Handles parsing errors in wp_kses_hair(). * * The general plan is to remove everything to and including some whitespace, * but it deals with quotes and apostrophes as well. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_html_error($string) {	return preg_replace('/^("[^"]*("|$)|\'[^\']*(\'|$)|\S)*\s*/', '', $string);}/** * Sanitizes content from bad protocols and other characters. * * This function searches for URL protocols at the beginning of $string, while * handling whitespace and HTML entities. * * @since 1.0.0 * * @param string $string Content to check for bad protocols * @param string $allowed_protocols Allowed protocols * @return string Sanitized content */function wp_kses_bad_protocol_once($string, $allowed_protocols) {	global $_kses_allowed_protocols;	$_kses_allowed_protocols = $allowed_protocols;	$string2 = preg_split('/:|&#58;|&#x3a;/i', $string, 2);	if ( isset($string2[1]) && !preg_match('%/\?%', $string2[0]) )		$string = wp_kses_bad_protocol_once2($string2[0]) . trim($string2[1]);	else		$string = preg_replace_callback('/^((&[^;]*;|[\sA-Za-z0-9])*)'.'(:|&#58;|&#[Xx]3[Aa];)\s*/', 'wp_kses_bad_protocol_once2', $string);	return $string;}/** * Callback for wp_kses_bad_protocol_once() regular expression. * * This function processes URL protocols, checks to see if they're in the * white-list or not, and returns different data depending on the answer. * * @access private * @since 1.0.0 * * @param mixed $matches string or preg_replace_callback() matches array to check for bad protocols * @return string Sanitized content */function wp_kses_bad_protocol_once2($matches) {	global $_kses_allowed_protocols;	if ( is_array($matches) ) {		if ( empty($matches[1]) )			return '';		$string = $matches[1];	} else {		$string = $matches;	}	$string2 = wp_kses_decode_entities($string);	$string2 = preg_replace('/\s/', '', $string2);	$string2 = wp_kses_no_null($string2);	$string2 = strtolower($string2);	$allowed = false;	foreach ( (array) $_kses_allowed_protocols as $one_protocol)		if (strtolower($one_protocol) == $string2) {			$allowed = true;			break;		}	if ($allowed)		return "$string2:";	else		return '';}/** * Converts and fixes HTML entities. * * This function normalizes HTML entities. It will convert "AT&T" to the correct * "AT&amp;T", "&#00058;" to "&#58;", "&#XYZZY;" to "&amp;#XYZZY;" and so on. * * @since 1.0.0 * * @param string $string Content to normalize entities * @return string Content with normalized entities */function wp_kses_normalize_entities($string) {	# Disarm all entities by converting & to &amp;	$string = str_replace('&', '&amp;', $string);	# Change back the allowed entities in our entity whitelist	$string = preg_replace_callback('/&amp;([A-Za-z]{2,8});/', 'wp_kses_named_entities', $string);	$string = preg_replace_callback('/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string);	$string = preg_replace_callback('/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string);	return $string;}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function only accepts valid named entity references, which are finite, * case-sensitive, and highly scrutinized by HTML and XML validators. * * @since 3.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_named_entities($matches) {	global $allowedentitynames;	if ( empty($matches[1]) )		return '';	$i = $matches[1];	return ( ( ! in_array($i, $allowedentitynames) ) ? "&amp;$i;" : "&$i;" );}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function helps wp_kses_normalize_entities() to only accept 16 bit values * and nothing more for &#number; entities. * * @access private * @since 1.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities2($matches) {	if ( empty($matches[1]) )		return '';	$i = $matches[1];	if (valid_unicode($i)) {		$i = str_pad(ltrim($i,'0'), 3, '0', STR_PAD_LEFT);		$i = "&#$i;";	} else {		$i = "&amp;#$i;";	}	return $i;}/** * Callback for wp_kses_normalize_entities() for regular expression. * * This function helps wp_kses_normalize_entities() to only accept valid Unicode * numeric entities in hex form. * * @access private * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities3($matches) {	if ( empty($matches[1]) )		return '';	$hexchars = $matches[1];	return ( ( ! valid_unicode(hexdec($hexchars)) ) ? "&amp;#x$hexchars;" : '&#x'.ltrim($hexchars,'0').';' );}/** * Helper function to determine if a Unicode value is valid. * * @param int $i Unicode value * @return bool true if the value was a valid Unicode number */function valid_unicode($i) {	return ( $i == 0x9 || $i == 0xa || $i == 0xd ||			($i >= 0x20 && $i <= 0xd7ff) ||			($i >= 0xe000 && $i <= 0xfffd) ||			($i >= 0x10000 && $i <= 0x10ffff) );}/** * Convert all entities to their character counterparts. * * This function decodes numeric HTML entities (&#65; and &#x41;). It doesn't do * anything with other entities like &auml;, but we don't need them in the URL * protocol whitelisting system anyway. * * @since 1.0.0 * * @param string $string Content to change entities * @return string Content after decoded entities */function wp_kses_decode_entities($string) {	$string = preg_replace_callback('/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string);	$string = preg_replace_callback('/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string);	return $string;}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr( $match ) {	return chr( $match[1] );}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr_hexdec( $match ) {	return chr( hexdec( $match[1] ) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 1.0.0 * @uses $allowedtags * * @param string $data Content to filter, expected to be escaped with slashes * @return string Filtered content */function wp_filter_kses($data) {	global $allowedtags;	return addslashes( wp_kses(stripslashes( $data ), $allowedtags) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 2.9.0 * @uses $allowedtags * * @param string $data Content to filter, expected to not be escaped * @return string Filtered content */function wp_kses_data($data) {	global $allowedtags;	return wp_kses( $data , $allowedtags );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.0.0 * @uses $allowedposttags * * @param string $data Post content to filter, expected to be escaped with slashes * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_filter_post_kses($data) {	global $allowedposttags;	return addslashes ( wp_kses(stripslashes( $data ), $allowedposttags) );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.9.0 * @uses $allowedposttags * * @param string $data Post content to filter * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_kses_post($data) {	global $allowedposttags;	return wp_kses( $data , $allowedposttags );}/** * Strips all of the HTML in the content. * * @since 2.1.0 * * @param string $data Content to strip all HTML from * @return string Filtered content without any HTML */function wp_filter_nohtml_kses($data) {	return addslashes ( wp_kses(stripslashes( $data ), array()) );}/** * Adds all Kses input form content filters. * * All hooks have default priority. The wp_filter_kses() function is added to * the 'pre_comment_content' and 'title_save_pre' hooks. * * The wp_filter_post_kses() function is added to the 'content_save_pre', * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks. * * @since 2.0.0 * @uses add_filter() See description for what functions are added to what hooks. */function kses_init_filters() {	// Normal filtering.	add_filter('pre_comment_content', 'wp_filter_kses');	add_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	add_filter('content_save_pre', 'wp_filter_post_kses');	add_filter('excerpt_save_pre', 'wp_filter_post_kses');	add_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Removes all Kses input form content filters. * * A quick procedural method to removing all of the filters that kses uses for * content in WordPress Loop. * * Does not remove the kses_init() function from 'init' hook (priority is * default). Also does not remove kses_init() function from 'set_current_user' * hook (priority is also default). * * @since 2.0.6 */function kses_remove_filters() {	// Normal filtering.	remove_filter('pre_comment_content', 'wp_filter_kses');	remove_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	remove_filter('content_save_pre', 'wp_filter_post_kses');	remove_filter('excerpt_save_pre', 'wp_filter_post_kses');	remove_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Sets up most of the Kses filters for input form content. * * If you remove the kses_init() function from 'init' hook and * 'set_current_user' (priority is default), then none of the Kses filter hooks * will be added. * * First removes all of the Kses filters in case the current user does not need * to have Kses filter the content. If the user does not have unfiltered html * capability, then Kses filters are added. * * @uses kses_remove_filters() Removes the Kses filters * @uses kses_init_filters() Adds the Kses filters back if the user *		does not have unfiltered HTML capability. * @since 2.0.0 */function kses_init() {	kses_remove_filters();	if (current_user_can('unfiltered_html') == false)		kses_init_filters();}add_action('init', 'kses_init');add_action('set_current_user', 'kses_init');/** * Inline CSS filter * * @since 2.8.1 */function safecss_filter_attr( $css, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented	$css = wp_kses_no_null($css);	$css = str_replace(array("\n","\r","\t"), '', $css);	if ( preg_match( '%[\\(&]|/\*%', $css ) ) // remove any inline css containing \ ( & or comments		return '';	$css_array = split( ';', trim( $css ) );	$allowed_attr = apply_filters( 'safe_style_css', array( 'text-align', 'margin', 'color', 'float',	'border', 'background', 'background-color', 'border-bottom', 'border-bottom-color',	'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-left',	'border-left-color', 'border-left-style', 'border-left-width', 'border-right', 'border-right-color',	'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top',	'border-top-color', 'border-top-style', 'border-top-width', 'border-width', 'caption-side',	'clear', 'cursor', 'direction', 'font', 'font-family', 'font-size', 'font-style',	'font-variant', 'font-weight', 'height', 'letter-spacing', 'line-height', 'margin-bottom',	'margin-left', 'margin-right', 'margin-top', 'overflow', 'padding', 'padding-bottom',	'padding-left', 'padding-right', 'padding-top', 'text-decoration', 'text-indent', 'vertical-align',	'width' ) );	if ( empty($allowed_attr) )		return $css;	$css = '';	foreach ( $css_array as $css_item ) {		if ( $css_item == '' )			continue;		$css_item = trim( $css_item );		$found = false;		if ( strpos( $css_item, ':' ) === false ) {			$found = true;		} else {			$parts = split( ':', $css_item );			if ( in_array( trim( $parts[0] ), $allowed_attr ) )				$found = true;		}		if ( $found ) {			if( $css != '' )				$css .= ';';			$css .= $css_item;		}	}	return $css;}
<?php/** * BackPress Styles enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress Styles enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r74 */class WP_Styles extends WP_Dependencies {	var $base_url;	var $content_url;	var $default_version;	var $text_direction = 'ltr';	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_styles', array(&$this) );	}	function do_item( $handle ) {		if ( !parent::do_item($handle) )			return false;		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		if ( $this->do_concat ) {			if ( $this->in_default_dir($this->registered[$handle]->src) && !isset($this->registered[$handle]->extra['conditional']) && !isset($this->registered[$handle]->extra['alt']) ) {				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			}		}		if ( isset($this->registered[$handle]->args) )			$media = esc_attr( $this->registered[$handle]->args );		else			$media = 'all';		$href = $this->_css_href( $this->registered[$handle]->src, $ver, $handle );		$rel = isset($this->registered[$handle]->extra['alt']) && $this->registered[$handle]->extra['alt'] ? 'alternate stylesheet' : 'stylesheet';		$title = isset($this->registered[$handle]->extra['title']) ? "title='" . esc_attr( $this->registered[$handle]->extra['title'] ) . "'" : '';		$end_cond = $tag = '';		if ( isset($this->registered[$handle]->extra['conditional']) && $this->registered[$handle]->extra['conditional'] ) {			$tag .= "<!--[if {$this->registered[$handle]->extra['conditional']}]>\n";			$end_cond = "<![endif]-->\n";		}		$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-css' $title href='$href' type='text/css' media='$media' />\n", $handle );		if ( 'rtl' === $this->text_direction && isset($this->registered[$handle]->extra['rtl']) && $this->registered[$handle]->extra['rtl'] ) {			if ( is_bool( $this->registered[$handle]->extra['rtl'] ) ) {				$suffix = isset( $this->registered[$handle]->extra['suffix'] ) ? $this->registered[$handle]->extra['suffix'] : '';				$rtl_href = str_replace( "{$suffix}.css", "-rtl{$suffix}.css", $this->_css_href( $this->registered[$handle]->src , $ver, "$handle-rtl" ));			} else {				$rtl_href = $this->_css_href( $this->registered[$handle]->extra['rtl'], $ver, "$handle-rtl" );			}			$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-rtl-css' $title href='$rtl_href' type='text/css' media='$media' />\n", $handle );		}		$tag .= $end_cond;		if ( $this->do_concat )			$this->print_html .= $tag;		else			echo $tag;		// Could do something with $this->registered[$handle]->extra here to print out extra CSS rules//		echo "<style type='text/css'>\n";//		echo "/* <![CDATA[ */\n";//		echo "/* ]]> */\n";//		echo "</style>\n";		return true;	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_styles_array', $this->to_do );		return $r;	}	function _css_href( $src, $ver, $handle ) {		if ( !is_bool($src) && !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = apply_filters( 'style_loader_src', $src, $handle );		return esc_url( $src );	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}}
<?php/** * General settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('General Settings');$parent_file = 'options-general.php';/* translators: date and time format for exact current time, mainly about timezones, see http://php.net/date */$timezone_format = _x('Y-m-d G:i:s', 'timezone date format');/** * Display JavaScript on the page. * * @package WordPress * @subpackage General_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[	jQuery(document).ready(function($){		$("input[name='date_format']").click(function(){			if ( "date_format_custom_radio" != $(this).attr("id") )				$("input[name='date_format_custom']").val( $(this).val() );		});		$("input[name='date_format_custom']").focus(function(){			$("#date_format_custom_radio").attr("checked", "checked");		});		$("input[name='time_format']").click(function(){			if ( "time_format_custom_radio" != $(this).attr("id") )				$("input[name='time_format_custom']").val( $(this).val() );		});		$("input[name='time_format_custom']").focus(function(){			$("#time_format_custom_radio").attr("checked", "checked");		});	});//]]></script><?php}add_filter('admin_head', 'add_js');add_contextual_help($current_screen,	'<p>' . __('The fields on this screen determine some of the basics of your site setup.') . '</p>' .	'<p>' . __('Most themes display the site title at the top of every page, in the title bar of the browser, and as the identifying name for syndicated feeds. The tagline is also displayed by many themes.') . '</p>' .	'<p>' . __('The WordPress URL and the Site URL can be the same (example.com) or different; for example, having the WordPress core files (example.com/wordpress) in a subdirectory instead of the root directory.') . '</p>' .	'<p>' . __('If you want site visitors to be able to register themselves, as opposed to being registered by the site administrator, check the membership box. A default user role can be set for all new users, whether self-registered or registered by the site administrator.') . '</p>' .	'<p>' . __('UTC means Coordinated Universal Time.') . '</p>' .	'<p>' . __('Remember to click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_General_SubPanel" target="_blank">Documentation on General Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('general'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="blogname"><?php _e('Site Title') ?></label></th><td><input name="blogname" type="text" id="blogname" value="<?php form_option('blogname'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="blogdescription"><?php _e('Tagline') ?></label></th><td><input name="blogdescription" type="text" id="blogdescription"  value="<?php form_option('blogdescription'); ?>" class="regular-text" /><span class="description"><?php _e('In a few words, explain what this site is about.') ?></span></td></tr><?php if ( !is_multisite() ) { ?><tr valign="top"><th scope="row"><label for="siteurl"><?php _e('WordPress address (URL)') ?></label></th><td><input name="siteurl" type="text" id="siteurl" value="<?php form_option('siteurl'); ?>"<?php disabled( defined( 'WP_SITEURL' ) ); ?> class="regular-text code<?php if ( defined( 'WP_SITEURL' ) ) echo ' disabled' ?>" /></td></tr><tr valign="top"><th scope="row"><label for="home"><?php _e('Site address (URL)') ?></label></th><td><input name="home" type="text" id="home" value="<?php form_option('home'); ?>"<?php disabled( defined( 'WP_HOME' ) ); ?> class="regular-text code<?php if ( defined( 'WP_HOME' ) ) echo ' disabled' ?>" /><span class="description"><?php _e('Enter the address here if you want your site homepage <a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">to be different from the directory</a> you installed WordPress.'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="admin_email" type="text" id="admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text" /><span class="description"><?php _e('This address is used for admin purposes, like new user notification.') ?></span></td></tr><tr valign="top"><th scope="row"><?php _e('Membership') ?></th><td> <fieldset><legend class="screen-reader-text"><span><?php _e('Membership') ?></span></legend><label for="users_can_register"><input name="users_can_register" type="checkbox" id="users_can_register" value="1" <?php checked('1', get_option('users_can_register')); ?> /><?php _e('Anyone can register') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_role"><?php _e('New User Default Role') ?></label></th><td><select name="default_role" id="default_role"><?php wp_dropdown_roles( get_option('default_role') ); ?></select></td></tr><?php } else { ?><tr valign="top"><th scope="row"><label for="new_admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="new_admin_email" type="text" id="new_admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text code" /><span class="setting-description"><?php _e('This address is used for admin purposes. If you change this we will send you an e-mail at your new address to confirm it. <strong>The new address will not become active until confirmed.</strong>') ?></span><?php$new_admin_email = get_option( 'new_admin_email' );if ( $new_admin_email && $new_admin_email != get_option('admin_email') ) : ?><div class="updated inline"><p><?php printf( __('There is a pending change of the admin e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_admin_email, esc_url( admin_url( 'options.php?dismiss=new_admin_email' ) ) ); ?></p></div><?php endif; ?></td></tr><?php } ?><tr><?phpif ( !wp_timezone_supported() ) : // no magic timezone support here?><th scope="row"><label for="gmt_offset"><?php _e('Timezone') ?> </label></th><td><select name="gmt_offset" id="gmt_offset"><?php$current_offset = get_option('gmt_offset');$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,	0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);foreach ( $offset_range as $offset ) {	if ( 0 < $offset )		$offset_name = '+' . $offset;	elseif ( 0 == $offset )		$offset_name = '';	else		$offset_name = (string) $offset;	$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);	$selected = '';	if ( $current_offset == $offset ) {		$selected = " selected='selected'";		$current_offset_name = $offset_name;	}	echo "<option value=\"" . esc_attr($offset) . "\"$selected>" . sprintf(__('UTC %s'), $offset_name) . '</option>';}?></select><?php _e('hours'); ?><span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n( $time_format, false, 'gmt')); ?></span><?php if ($current_offset) : ?>	<span id="local-time"><?php printf(__('UTC %1$s is <code>%2$s</code>'), $current_offset_name, date_i18n($time_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Unfortunately, you have to manually update this for daylight saving time. The PHP Date/Time library is not supported by your web host.'); ?></span></td><?phpelse: // looks like we can do nice timezone selection!$current_offset = get_option('gmt_offset');$tzstring = get_option('timezone_string');$check_zone_info = true;// Remove old Etc mappings.  Fallback to gmt_offset.if ( false !== strpos($tzstring,'Etc/GMT') )	$tzstring = '';if ( empty($tzstring) ) { // Create a UTC+- zone if no timezone string exists	$check_zone_info = false;	if ( 0 == $current_offset )		$tzstring = 'UTC+0';	elseif ($current_offset < 0)		$tzstring = 'UTC' . $current_offset;	else		$tzstring = 'UTC+' . $current_offset;}?><th scope="row"><label for="timezone_string"><?php _e('Timezone') ?></label></th><td><select id="timezone_string" name="timezone_string"><?php echo wp_timezone_choice($tzstring); ?></select>    <span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n($timezone_format, false, 'gmt')); ?></span><?php if ( get_option('timezone_string') || !empty($current_offset) ) : ?>	<span id="local-time"><?php printf(__('Local time is <code>%1$s</code>'), date_i18n($timezone_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Choose a city in the same timezone as you.'); ?></span><?php if ($check_zone_info && $tzstring) : ?><br /><span>	<?php	// Set TZ so localtime works.	date_default_timezone_set($tzstring);	$now = localtime(time(), true);	if ( $now['tm_isdst'] )		_e('This timezone is currently in daylight saving time.');	else		_e('This timezone is currently in standard time.');	?>	<br />	<?php	if ( function_exists('timezone_transitions_get') ) {		$found = false;		$date_time_zone_selected = new DateTimeZone($tzstring);		$tz_offset = timezone_offset_get($date_time_zone_selected, date_create());		$right_now = time();		foreach ( timezone_transitions_get($date_time_zone_selected) as $tr) {			if ( $tr['ts'] > $right_now ) {			    $found = true;				break;			}		}		if ( $found ) {			echo ' ';			$message = $tr['isdst'] ?				__('Daylight saving time begins on: <code>%s</code>.') :				__('Standard time begins  on: <code>%s</code>.');			// Add the difference between the current offset and the new offset to ts to get the correct transition time from date_i18n().			printf( $message, date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $tr['ts'] + ($tz_offset - $tr['offset']) ) );		} else {			_e('This timezone does not observe daylight saving time.');		}	}	// Set back to UTC.	date_default_timezone_set('UTC');	?>	</span><?php endif; ?></td><?php endif; ?></tr><tr><th scope="row"><?php _e('Date Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Date Format') ?></span></legend><?php	$date_formats = apply_filters( 'date_formats', array(		__('F j, Y'),		'Y/m/d',		'm/d/Y',		'd/m/Y',	) );	$custom = true;	foreach ( $date_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='date_format' value='" . esc_attr($format) . "'";		if ( get_option('date_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="date_format" id="date_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="date_format_custom" value="' . esc_attr( get_option('date_format') ) . '" class="small-text" /> ' . date_i18n( get_option('date_format') ) . "\n";	echo "\t<p>" . __('<a href="http://codex.wordpress.org/Formatting_Date_and_Time">Documentation on date formatting</a>. Click &#8220;Save Changes&#8221; to update sample output.') . "</p>\n";?>	</fieldset></td></tr><tr><th scope="row"><?php _e('Time Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Time Format') ?></span></legend><?php	$time_formats = apply_filters( 'time_formats', array(		__('g:i a'),		'g:i A',		'H:i',	) );	$custom = true;	foreach ( $time_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='time_format' value='" . esc_attr($format) . "'";		if ( get_option('time_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="time_format" id="time_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="time_format_custom" value="' . esc_attr( get_option('time_format') ) . '" class="small-text" /> ' . date_i18n( get_option('time_format') ) . "\n";?>	</fieldset></td></tr><tr><th scope="row"><label for="start_of_week"><?php _e('Week Starts On') ?></label></th><td><select name="start_of_week" id="start_of_week"><?phpfor ($day_index = 0; $day_index <= 6; $day_index++) :	$selected = (get_option('start_of_week') == $day_index) ? 'selected="selected"' : '';	echo "\n\t<option value='" . esc_attr($day_index) . "' $selected>" . $wp_locale->get_weekday($day_index) . '</option>';endfor;?></select></td></tr><?php do_settings_fields('general', 'default'); ?><?php	$languages = get_available_languages();	if ( is_multisite() && !empty( $languages ) ):?>	<tr valign="top">		<th width="33%" scope="row"><?php _e('Site language:') ?></th>		<td>			<select name="WPLANG" id="WPLANG">				<?php mu_dropdown_languages( $languages, get_option('WPLANG') ); ?>			</select>		</td>	</tr><?php	endif;?></table><?php do_settings_sections('general'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Atom Feed Template for displaying Atom Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="' . get_option('blog_charset') . '" ?' . '>';?><feed	xmlns="http://www.w3.org/2005/Atom"	xml:lang="<?php echo get_option('rss_language'); ?>"	xmlns:thr="http://purl.org/syndication/thread/1.0"	<?php do_action('atom_ns'); do_action('atom_comments_ns'); ?>>	<title type="text"><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %1$s searching on %2$s')), get_bloginfo_rss( 'name' ), get_search_query() );		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<subtitle type="text"><?php bloginfo_rss('description'); ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastcommentmodified('GMT'), false); ?></updated><?php if ( is_singular() ) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php comments_link_feed(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_post_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_post_comments_feed_link('', 'atom'); ?></id><?php } elseif(is_search()) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php echo home_url() . '?s=' . get_search_query(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_search_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_search_comments_feed_link('', 'atom'); ?></id><?php } else { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php bloginfo_rss('url'); ?>" />	<link rel="self" type="application/atom+xml" href="<?php bloginfo_rss('comments_atom_url'); ?>" />	<id><?php bloginfo_rss('comments_atom_url'); ?></id><?php } ?><?php do_action('comments_atom_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<entry>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link rel="alternate" href="<?php comment_link(); ?>" type="<?php bloginfo_rss('html_type'); ?>" />		<author>			<name><?php comment_author_rss(); ?></name>			<?php if (get_comment_author_url()) echo '<uri>' . get_comment_author_url() . '</uri>'; ?>		</author>		<id><?php comment_guid(); ?></id>		<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></updated>		<published><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></published><?php if ( post_password_required($comment_post) ) : ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php echo get_the_password_form(); ?>]]></content><?php else : // post pass ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php comment_text(); ?>]]></content><?php endif; // post pass	// Return comment threading information (http://www.ietf.org/rfc/rfc4685.txt)	if ( $comment->comment_parent == 0 ) : // This comment is top level ?>		<thr:in-reply-to ref="<?php the_guid(); ?>" href="<?php the_permalink_rss() ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php else : // This comment is in reply to another comment	$parent_comment = get_comment($comment->comment_parent);	// The rel attribute below and the id tag above should be GUIDs, but WP doesn't create them for comments (unlike posts). Either way, its more important that they both use the same system?>		<thr:in-reply-to ref="<?php comment_guid($parent_comment) ?>" href="<?php echo get_comment_link($parent_comment) ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php endif;	do_action('comment_atom_entry', $comment->comment_ID, $comment_post->ID);?>	</entry><?php endwhile; endif; ?></feed>
<?php/** * Reading settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __( 'Reading Settings' );$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen contains the settings that affect the display of your content.') . '</p>' .	'<p>' . sprintf(__('You can choose what&#8217;s displayed on the front page of your site. It can be posts in reverse chronological order (classic blog), or a fixed/static page. To set a static home page, you first need to create two <a href="%s">Pages</a>. One will become the front page, and the other will be where your posts are displayed.'), 'post-new.php?post_type=page') . '</p>' .	'<p>' . __('You can also control the display of your content in RSS feeds, including the maximum numbers of posts to display, whether to show full text or a summary, and the character set encoding.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Reading_SubPanel" target="_blank">Reading Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form1" method="post" action="options.php"><?php settings_fields( 'reading' ); ?><?php if ( ! get_pages() ) : ?><input name="show_on_front" type="hidden" value="posts" /><table class="form-table"><?php else :	if ( 'page' == get_option( 'show_on_front' ) && ! get_option( 'page_on_front' ) && ! get_option( 'page_for_posts' ) )		update_option( 'show_on_front', 'posts' );?><table class="form-table"><tr valign="top"><th scope="row"><?php _e( 'Front page displays' ); ?></th><td id="front-static-pages"><fieldset><legend class="screen-reader-text"><span><?php _e( 'Front page displays' ); ?></span></legend>	<p><label>		<input name="show_on_front" type="radio" value="posts" class="tog" <?php checked( 'posts', get_option( 'show_on_front' ) ); ?> />		<?php _e( 'Your latest posts' ); ?>	</label>	</p>	<p><label>		<input name="show_on_front" type="radio" value="page" class="tog" <?php checked( 'page', get_option( 'show_on_front' ) ); ?> />		<?php printf( __( 'A <a href="%s">static page</a> (select below)' ), 'edit.php?post_type=page' ); ?>	</label>	</p><ul>	<li><label for="page_on_front"><?php printf( __( 'Front page: %s' ), wp_dropdown_pages( array( 'name' => 'page_on_front', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_on_front' ) ) ) ); ?></label></li>	<li><label for="page_for_posts"><?php printf( __( 'Posts page: %s' ), wp_dropdown_pages( array( 'name' => 'page_for_posts', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_for_posts' ) ) ) ); ?></label></li></ul><?php if ( 'page' == get_option( 'show_on_front' ) && get_option( 'page_for_posts' ) == get_option( 'page_on_front' ) ) : ?><div id="front-page-warning" class="error inline"><p><?php _e( '<strong>Warning:</strong> these pages should not be the same!' ); ?></p></div><?php endif; ?></fieldset></td></tr><?php endif; ?><tr valign="top"><th scope="row"><label for="posts_per_page"><?php _e( 'Blog pages show at most' ); ?></label></th><td><input name="posts_per_page" type="text" id="posts_per_page" value="<?php form_option( 'posts_per_page' ); ?>" class="small-text" /> <?php _e( 'posts' ); ?></td></tr><tr valign="top"><th scope="row"><label for="posts_per_rss"><?php _e( 'Syndication feeds show the most recent' ); ?></label></th><td><input name="posts_per_rss" type="text" id="posts_per_rss" value="<?php form_option( 'posts_per_rss' ); ?>" class="small-text" /> <?php _e( 'items' ); ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'For each article in a feed, show' ); ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'For each article in a feed, show' ); ?> </span></legend><p><label><input name="rss_use_excerpt"  type="radio" value="0" <?php checked( 0, get_option( 'rss_use_excerpt' ) ); ?>	/> <?php _e( 'Full text' ); ?></label><br /><label><input name="rss_use_excerpt" type="radio" value="1" <?php checked( 1, get_option( 'rss_use_excerpt' ) ); ?> /> <?php _e( 'Summary' ); ?></label></p></fieldset></td></tr><tr valign="top"><th scope="row"><label for="blog_charset"><?php _e( 'Encoding for pages and feeds' ); ?></label></th><td><input name="blog_charset" type="text" id="blog_charset" value="<?php form_option( 'blog_charset' ); ?>" class="regular-text" /><span class="description"><?php _e( 'The <a href="http://codex.wordpress.org/Glossary#Character_set">character encoding</a> of your site (UTF-8 is recommended, if you are adventurous there are some <a href="http://en.wikipedia.org/wiki/Character_set">other encodings</a>)' ); ?></span></td></tr><?php do_settings_fields( 'reading', 'default' ); ?></table><?php do_settings_sections( 'reading' ); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php include( './admin-footer.php' ); ?>
<?php/** * A class to render Diffs in different formats. * * This class renders the diff in classic diff format. It is intended that * this class be customized via inheritance, to obtain fancier outputs. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff */class Text_Diff_Renderer {    /**     * Number of leading context "lines" to preserve.     *     * This should be left at zero for this class, but subclasses may want to     * set this to other values.     */    var $_leading_context_lines = 0;    /**     * Number of trailing context "lines" to preserve.     *     * This should be left at zero for this class, but subclasses may want to     * set this to other values.     */    var $_trailing_context_lines = 0;    /**     * Constructor.     */    function Text_Diff_Renderer($params = array())    {        foreach ($params as $param => $value) {            $v = '_' . $param;            if (isset($this->$v)) {                $this->$v = $value;            }        }    }    /**     * Get any renderer parameters.     *     * @return array  All parameters of this renderer object.     */    function getParams()    {        $params = array();        foreach (get_object_vars($this) as $k => $v) {            if ($k[0] == '_') {                $params[substr($k, 1)] = $v;            }        }        return $params;    }    /**     * Renders a diff.     *     * @param Text_Diff $diff  A Text_Diff object.     *     * @return string  The formatted output.     */    function render($diff)    {        $xi = $yi = 1;        $block = false;        $context = array();        $nlead = $this->_leading_context_lines;        $ntrail = $this->_trailing_context_lines;        $output = $this->_startDiff();        $diffs = $diff->getDiff();        foreach ($diffs as $i => $edit) {            /* If these are unchanged (copied) lines, and we want to keep             * leading or trailing context lines, extract them from the copy             * block. */            if (is_a($edit, 'Text_Diff_Op_copy')) {                /* Do we have any diff blocks yet? */                if (is_array($block)) {                    /* How many lines to keep as context from the copy                     * block. */                    $keep = $i == count($diffs) - 1 ? $ntrail : $nlead + $ntrail;                    if (count($edit->orig) <= $keep) {                        /* We have less lines in the block than we want for                         * context => keep the whole block. */                        $block[] = $edit;                    } else {                        if ($ntrail) {                            /* Create a new block with as many lines as we need                             * for the trailing context. */                            $context = array_slice($edit->orig, 0, $ntrail);                            $block[] = &new Text_Diff_Op_copy($context);                        }                        /* @todo */                        $output .= $this->_block($x0, $ntrail + $xi - $x0,                                                 $y0, $ntrail + $yi - $y0,                                                 $block);                        $block = false;                    }                }                /* Keep the copy block as the context for the next block. */                $context = $edit->orig;            } else {                /* Don't we have any diff blocks yet? */                if (!is_array($block)) {                    /* Extract context lines from the preceding copy block. */                    $context = array_slice($context, count($context) - $nlead);                    $x0 = $xi - count($context);                    $y0 = $yi - count($context);                    $block = array();                    if ($context) {                        $block[] = &new Text_Diff_Op_copy($context);                    }                }                $block[] = $edit;            }            if ($edit->orig) {                $xi += count($edit->orig);            }            if ($edit->final) {                $yi += count($edit->final);            }        }        if (is_array($block)) {            $output .= $this->_block($x0, $xi - $x0,                                     $y0, $yi - $y0,                                     $block);        }        return $output . $this->_endDiff();    }    function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)    {        $output = $this->_startBlock($this->_blockHeader($xbeg, $xlen, $ybeg, $ylen));        foreach ($edits as $edit) {            switch (strtolower(get_class($edit))) {            case 'text_diff_op_copy':                $output .= $this->_context($edit->orig);                break;            case 'text_diff_op_add':                $output .= $this->_added($edit->final);                break;            case 'text_diff_op_delete':                $output .= $this->_deleted($edit->orig);                break;            case 'text_diff_op_change':                $output .= $this->_changed($edit->orig, $edit->final);                break;            }        }        return $output . $this->_endBlock();    }    function _startDiff()    {        return '';    }    function _endDiff()    {        return '';    }    function _blockHeader($xbeg, $xlen, $ybeg, $ylen)    {        if ($xlen > 1) {            $xbeg .= ',' . ($xbeg + $xlen - 1);        }        if ($ylen > 1) {            $ybeg .= ',' . ($ybeg + $ylen - 1);        }        // this matches the GNU Diff behaviour        if ($xlen && !$ylen) {            $ybeg--;        } elseif (!$xlen) {            $xbeg--;        }        return $xbeg . ($xlen ? ($ylen ? 'c' : 'd') : 'a') . $ybeg;    }    function _startBlock($header)    {        return $header . "\n";    }    function _endBlock()    {        return '';    }    function _lines($lines, $prefix = ' ')    {        return $prefix . implode("\n$prefix", $lines) . "\n";    }    function _context($lines)    {        return $this->_lines($lines, '  ');    }    function _added($lines)    {        return $this->_lines($lines, '> ');    }    function _deleted($lines)    {        return $this->_lines($lines, '< ');    }    function _changed($orig, $final)    {        return $this->_deleted($orig) . "---\n" . $this->_added($final);    }}
