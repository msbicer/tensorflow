<?php/** * Comment template functions * * These functions are meant to live inside of the WordPress loop. * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current comment. * * If the comment has an empty comment_author field, then 'Anonymous' person is * assumed. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author' hook on the comment author * * @param int $comment_ID The ID of the comment for which to retrieve the author. Optional. * @return string The comment author */function get_comment_author( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( empty($comment->comment_author) ) {		if (!empty($comment->user_id)){			$user=get_userdata($comment->user_id);			$author=$user->user_login;		} else {			$author = __('Anonymous');		}	} else {		$author = $comment->comment_author;	}	return apply_filters('get_comment_author', $author);}/** * Displays the author of the current comment. * * @since 0.71 * @uses apply_filters() Calls 'comment_author' on comment author before displaying * * @param int $comment_ID The ID of the comment for which to print the author. Optional. */function comment_author( $comment_ID = 0 ) {	$author = apply_filters('comment_author', get_comment_author( $comment_ID ) );	echo $author;}/** * Retrieve the email of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_email' hook on the comment author email * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the author's email.  Optional. * @return string The current comment author's email */function get_comment_author_email( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_email', $comment->comment_author_email);}/** * Display the email of the author of the current global $comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'author_email' hook on the author email * * @param int $comment_ID The ID of the comment for which to print the author's email. Optional. */function comment_author_email( $comment_ID = 0 ) {	echo apply_filters('author_email', get_comment_author_email( $comment_ID ) );}/** * Display the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @uses get_comment_author_email_link() For generating the link * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_email_link($linktext='', $before='', $after='') {	if ( $link = get_comment_author_email_link( $linktext, $before, $after ) )		echo $link;}/** * Return the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 2.7 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function get_comment_author_email_link($linktext='', $before='', $after='') {	global $comment;	$email = apply_filters('comment_email', $comment->comment_author_email);	if ((!empty($email)) && ($email != '@')) {	$display = ($linktext != '') ? $linktext : $email;		$return  = $before;		$return .= "<a href='mailto:$email'>$display</a>";	 	$return .= $after;		return $return;	} else {		return '';	}}/** * Retrieve the html link to the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_link' hook on the complete link HTML or author * * @param int $comment_ID The ID of the comment for which to get the author's link.  Optional. * @return string Comment Author name or HTML link for author's URL */function get_comment_author_link( $comment_ID = 0 ) {	/** @todo Only call these functions when they are needed. Include in if... else blocks */	$url    = get_comment_author_url( $comment_ID );	$author = get_comment_author( $comment_ID );	if ( empty( $url ) || 'http://' == $url )		$return = $author;	else		$return = "<a href='$url' rel='external nofollow' class='url'>$author</a>";	return apply_filters('get_comment_author_link', $return);}/** * Display the html link to the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_link() Echoes result * * @param int The ID of the comment for which to print the author's link. Optional. */function comment_author_link( $comment_ID = 0 ) {	echo get_comment_author_link( $comment_ID );}/** * Retrieve the IP address of the author of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() * * @param int $comment_ID The ID of the comment for which to get the author's IP address. Optional. * @return string The comment author's IP address. */function get_comment_author_IP( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_IP', $comment->comment_author_IP);}/** * Display the IP address of the author of the current comment. * * @since 0.71 * @see get_comment_author_IP() Echoes Result * * @param int $comment_ID The ID of the comment for which to print the author's IP address.  Optional. */function comment_author_IP( $comment_ID = 0 ) {	echo get_comment_author_IP( $comment_ID );}/** * Retrieve the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_url' hook on the comment author's URL * * @param int $comment_ID The ID of the comment for which to get the author's URL.  Optional. * @return string */function get_comment_author_url( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$url = ('http://' == $comment->comment_author_url) ? '' : $comment->comment_author_url;	$url = esc_url( $url, array('http', 'https') );	return apply_filters('get_comment_author_url', $url);}/** * Display the url of the author of the current comment. * * @since 0.71 * @uses apply_filters() * @uses get_comment_author_url() Retrieves the comment author's URL * * @param int $comment_ID The ID of the comment for which to print the author's URL. Optional. */function comment_author_url( $comment_ID = 0 ) {	echo apply_filters('comment_url', get_comment_author_url( $comment_ID ));}/** * Retrieves the HTML link of the url of the author of the current comment. * * $linktext parameter is only used if the URL does not exist for the comment * author. If the URL does exist then the URL will be used and the $linktext * will be ignored. * * Encapsulate the HTML link between the $before and $after. So it will appear * in the order of $before, link, and finally $after. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_url_link' on the complete HTML before returning. * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. * @return string The HTML link between the $before and $after parameters */function get_comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	$url = get_comment_author_url();	$display = ($linktext != '') ? $linktext : $url;	$display = str_replace( 'http://www.', '', $display );	$display = str_replace( 'http://', '', $display );	if ( '/' == substr($display, -1) )		$display = substr($display, 0, -1);	$return = "$before<a href='$url' rel='external'>$display</a>$after";	return apply_filters('get_comment_author_url_link', $return);}/** * Displays the HTML link of the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_url_link() Echoes result * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	echo get_comment_author_url_link( $linktext, $before, $after );}/** * Generates semantic classes for each comment element * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @param bool $echo Whether comment_class should echo or return */function comment_class( $class = '', $comment_id = null, $post_id = null, $echo = true ) {	// Separates classes with a single space, collates classes for comment DIV	$class = 'class="' . join( ' ', get_comment_class( $class, $comment_id, $post_id ) ) . '"';	if ( $echo)		echo $class;	else		return $class;}/** * Returns the classes for the comment div as an array * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @return array Array of classes */function get_comment_class( $class = '', $comment_id = null, $post_id = null ) {	global $comment_alt, $comment_depth, $comment_thread_alt;	$comment = get_comment($comment_id);	$classes = array();	// Get the comment type (comment, trackback),	$classes[] = ( empty( $comment->comment_type ) ) ? 'comment' : $comment->comment_type;	// If the comment author has an id (registered), then print the log in name	if ( $comment->user_id > 0 && $user = get_userdata($comment->user_id) ) {		// For all registered users, 'byuser'		$classes[] = 'byuser';		$classes[] = 'comment-author-' . sanitize_html_class($user->user_nicename, $comment->user_id);		// For comment authors who are the author of the post		if ( $post = get_post($post_id) ) {			if ( $comment->user_id === $post->post_author )				$classes[] = 'bypostauthor';		}	}	if ( empty($comment_alt) )		$comment_alt = 0;	if ( empty($comment_depth) )		$comment_depth = 1;	if ( empty($comment_thread_alt) )		$comment_thread_alt = 0;	if ( $comment_alt % 2 ) {		$classes[] = 'odd';		$classes[] = 'alt';	} else {		$classes[] = 'even';	}	$comment_alt++;	// Alt for top-level comments	if ( 1 == $comment_depth ) {		if ( $comment_thread_alt % 2 ) {			$classes[] = 'thread-odd';			$classes[] = 'thread-alt';		} else {			$classes[] = 'thread-even';		}		$comment_thread_alt++;	}	$classes[] = "depth-$comment_depth";	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('comment_class', $classes, $class, $comment_id, $post_id);}/** * Retrieve the comment date of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_date' hook with the formated date and the $d parameter respectively * @uses $comment * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to get the date. Optional. * @return string The comment's date */function get_comment_date( $d = '', $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $d )		$date = mysql2date(get_option('date_format'), $comment->comment_date);	else		$date = mysql2date($d, $comment->comment_date);	return apply_filters('get_comment_date', $date, $d);}/** * Display the comment date of the current comment. * * @since 0.71 * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to print the date.  Optional. */function comment_date( $d = '', $comment_ID = 0 ) {	echo get_comment_date( $d, $comment_ID );}/** * Retrieve the excerpt of the current comment. * * Will cut each word and only output the first 20 words with '...' at the end. * If the word count is less than 20, then no truncating is done and no '...' * will appear. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls 'get_comment_excerpt' on truncated comment * * @param int $comment_ID The ID of the comment for which to get the excerpt. Optional. * @return string The maybe truncated comment with 20 words or less */function get_comment_excerpt( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$comment_text = strip_tags($comment->comment_content);	$blah = explode(' ', $comment_text);	if (count($blah) > 20) {		$k = 20;		$use_dotdotdot = 1;	} else {		$k = count($blah);		$use_dotdotdot = 0;	}	$excerpt = '';	for ($i=0; $i<$k; $i++) {		$excerpt .= $blah[$i] . ' ';	}	$excerpt .= ($use_dotdotdot) ? '...' : '';	return apply_filters('get_comment_excerpt', $excerpt);}/** * Display the excerpt of the current comment. * * @since 1.2.0 * @uses apply_filters() Calls 'comment_excerpt' hook before displaying excerpt * * @param int $comment_ID The ID of the comment for which to print the excerpt. Optional. */function comment_excerpt( $comment_ID = 0 ) {	echo apply_filters('comment_excerpt', get_comment_excerpt($comment_ID) );}/** * Retrieve the comment id of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_ID' hook for the comment ID * * @return int The comment ID */function get_comment_ID() {	global $comment;	return apply_filters('get_comment_ID', $comment->comment_ID);}/** * Displays the comment id of the current comment. * * @since 0.71 * @see get_comment_ID() Echoes Result */function comment_ID() {	echo get_comment_ID();}/** * Retrieve the link to a given comment. * * @since 1.5.0 * @uses $comment * * @param object|string|int $comment Comment to retrieve. * @param array $args Optional args. * @return string The permalink to the given comment. */function get_comment_link( $comment = null, $args = array() ) {	global $wp_rewrite, $in_comment_loop;	$comment = get_comment($comment);	// Backwards compat	if ( !is_array($args) ) {		$page = $args;		$args = array();		$args['page'] = $page;	}	$defaults = array( 'type' => 'all', 'page' => '', 'per_page' => '', 'max_depth' => '' );	$args = wp_parse_args( $args, $defaults );	if ( '' === $args['per_page'] && get_option('page_comments') )		$args['per_page'] = get_option('comments_per_page');	if ( empty($args['per_page']) ) {		$args['per_page'] = 0;		$args['page'] = 0;	}	if ( $args['per_page'] ) {		if ( '' == $args['page'] )			$args['page'] = ( !empty($in_comment_loop) ) ? get_query_var('cpage') : get_page_of_comment( $comment->comment_ID, $args );		if ( $wp_rewrite->using_permalinks() )			$link = user_trailingslashit( trailingslashit( get_permalink( $comment->comment_post_ID ) ) . 'comment-page-' . $args['page'], 'comment' );		else			$link = add_query_arg( 'cpage', $args['page'], get_permalink( $comment->comment_post_ID ) );	} else {		$link = get_permalink( $comment->comment_post_ID );	}	return apply_filters( 'get_comment_link', $link . '#comment-' . $comment->comment_ID, $comment, $args );}/** * Retrieves the link to the current post comments. * * @since 1.5.0 * * @param int $post_id Optional post id * @return string The link to the comments */function get_comments_link($post_id = 0) {	return get_permalink($post_id) . '#comments';}/** * Displays the link to the current post comments. * * @since 0.71 * * @param string $deprecated Not Used * @param bool $deprecated_2 Not Used */function comments_link( $deprecated = '', $deprecated_2 = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.72' );	if ( !empty( $deprecated_2 ) )		_deprecated_argument( __FUNCTION__, '1.3' );	echo get_comments_link();}/** * Retrieve the amount of comments a post has. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comments_number' hook on the number of comments * * @param int $post_id The Post ID * @return int The number of comments a post has */function get_comments_number( $post_id = 0 ) {	global $id;	$post_id = (int) $post_id;	if ( !$post_id )		$post_id = (int) $id;	$post = get_post($post_id);	if ( ! isset($post->comment_count) )		$count = 0;	else		$count = $post->comment_count;	return apply_filters('get_comments_number', $count, $post_id);}/** * Display the language string for the number of comments the current post has. * * @since 0.71 * @uses $id * @uses apply_filters() Calls the 'comments_number' hook on the output and number of comments respectively. * * @param string $zero Text for no comments * @param string $one Text for one comment * @param string $more Text for more than one comment * @param string $deprecated Not used. */function comments_number( $zero = false, $one = false, $more = false, $deprecated = '' ) {	global $id;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	$number = get_comments_number($id);	if ( $number > 1 )		$output = str_replace('%', number_format_i18n($number), ( false === $more ) ? __('% Comments') : $more);	elseif ( $number == 0 )		$output = ( false === $zero ) ? __('No Comments') : $zero;	else // must be one		$output = ( false === $one ) ? __('1 Comment') : $one;	echo apply_filters('comments_number', $output, $number);}/** * Retrieve the text of the current comment. * * @since 1.5.0 * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the text. Optional. * @return string The comment content */function get_comment_text( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_text', $comment->comment_content);}/** * Displays the text of the current comment. * * @since 0.71 * @uses apply_filters() Passes the comment content through the 'comment_text' hook before display * @uses get_comment_text() Gets the comment content * * @param int $comment_ID The ID of the comment for which to print the text. Optional. */function comment_text( $comment_ID = 0 ) {	echo apply_filters('comment_text', get_comment_text() );}/** * Retrieve the comment time of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filter() Calls 'get_comment_time' hook with the formatted time, the $d parameter, and $gmt parameter passed. * * @param string $d Optional. The format of the time (defaults to user's config) * @param bool $gmt Whether to use the GMT date * @param bool $translate Whether to translate the time (for use in feeds) * @return string The formatted time */function get_comment_time( $d = '', $gmt = false, $translate = true ) {	global $comment;	$comment_date = $gmt ? $comment->comment_date_gmt : $comment->comment_date;	if ( '' == $d )		$date = mysql2date(get_option('time_format'), $comment_date, $translate);	else		$date = mysql2date($d, $comment_date, $translate);	return apply_filters('get_comment_time', $date, $d, $gmt, $translate);}/** * Display the comment time of the current comment. * * @since 0.71 * * @param string $d Optional. The format of the time (defaults to user's config) */function comment_time( $d = '' ) {	echo get_comment_time($d);}/** * Retrieve the comment type of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_type' hook on the comment type * * @param int $comment_ID The ID of the comment for which to get the type. Optional. * @return string The comment type */function get_comment_type( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $comment->comment_type )		$comment->comment_type = 'comment';	return apply_filters('get_comment_type', $comment->comment_type);}/** * Display the comment type of the current comment. * * @since 0.71 * * @param string $commenttxt The string to display for comment type * @param string $trackbacktxt The string to display for trackback type * @param string $pingbacktxt The string to display for pingback type */function comment_type($commenttxt = false, $trackbacktxt = false, $pingbacktxt = false) {    if ( false === $commenttxt ) $commenttxt = _x( 'Comment', 'noun' );    if ( false === $trackbacktxt ) $trackbacktxt = __( 'Trackback' );    if ( false === $pingbacktxt ) $pingbacktxt = __( 'Pingback' );	$type = get_comment_type();	switch( $type ) {		case 'trackback' :			echo $trackbacktxt;			break;		case 'pingback' :			echo $pingbacktxt;			break;		default :			echo $commenttxt;	}}/** * Retrieve The current post's trackback URL. * * There is a check to see if permalink's have been enabled and if so, will * retrieve the pretty path. If permalinks weren't enabled, the ID of the * current post is used and appended to the correct page to go to. * * @since 1.5.0 * @uses apply_filters() Calls 'trackback_url' on the resulting trackback URL * @uses $id * * @return string The trackback URL after being filtered */function get_trackback_url() {	global $id;	if ( '' != get_option('permalink_structure') ) {		$tb_url = trailingslashit(get_permalink()) . user_trailingslashit('trackback', 'single_trackback');	} else {		$tb_url = get_option('siteurl') . '/wp-trackback.php?p=' . $id;	}	return apply_filters('trackback_url', $tb_url);}/** * Displays the current post's trackback URL. * * @since 0.71 * @uses get_trackback_url() Gets the trackback url for the current post * * @param bool $deprecated_echo Remove backwards compat in 2.5 * @return void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead. */function trackback_url( $deprecated_echo = true ) {	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '2.5', __('Use <code>get_trackback_url()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_trackback_url();	else		return get_trackback_url();}/** * Whether the current post is open for comments. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if the comments are open */function comments_open( $post_id=NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->comment_status );	return apply_filters( 'comments_open', $open, $post_id );}/** * Whether the current post is open for pings. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if pings are accepted */function pings_open( $post_id = NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->ping_status );	return apply_filters( 'pings_open', $open, $post_id );}/** * Displays form token for unfiltered comments. * * Will only display nonce token if the current user has permissions for * unfiltered html. Won't display the token for other users. * * The function was backported to 2.0.10 and was added to versions 2.1.3 and * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0. * * Backported to 2.0.10. * * @since 2.1.3 * @uses $post Gets the ID of the current post for the token */function wp_comment_form_unfiltered_html_nonce() {	global $post;	$post_id = 0;	if ( !empty($post) )		$post_id = $post->ID;	if ( current_user_can('unfiltered_html') )		wp_nonce_field('unfiltered-html-comment_' . $post_id, '_wp_unfiltered_html_comment', false);}/** * Loads the comment template specified in $file. * * Will not display the comments template if not on single post or page, or if * the post does not have comments. * * Uses the WordPress database object to query for the comments. The comments * are passed through the 'comments_array' filter hook with the list of comments * and the post ID respectively. * * The $file path is passed through a filter hook called, 'comments_template' * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path * first and if it fails it will require the default comment themplate from the * default theme. If either does not exist, then the WordPress process will be * halted. It is advised for that reason, that the default theme is not deleted. * * @since 1.5.0 * @global array $comment List of comment objects for the current post * @uses $wpdb * @uses $id * @uses $post * @uses $withcomments Will not try to get the comments if the post has none. * * @param string $file Optional, default '/comments.php'. The file to load * @param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false. * @return null Returns null if no comments appear */function comments_template( $file = '/comments.php', $separate_comments = false ) {	global $wp_query, $withcomments, $post, $wpdb, $id, $comment, $user_login, $user_ID, $user_identity, $overridden_cpage;	if ( !(is_single() || is_page() || $withcomments) || empty($post) )		return;	if ( empty($file) )		$file = '/comments.php';	$req = get_option('require_name_email');	/**	 * Comment author information fetched from the comment cookies.	 *	 * @uses wp_get_current_commenter()	 */	$commenter = wp_get_current_commenter();	/**	 * The name of the current comment author escaped for use in attributes.	 */	$comment_author = $commenter['comment_author']; // Escaped by sanitize_comment_cookies()	/**	 * The email address of the current comment author escaped for use in attributes.	 */	$comment_author_email = $commenter['comment_author_email'];  // Escaped by sanitize_comment_cookies()	/**	 * The url of the current comment author escaped for use in attributes.	 */	$comment_author_url = esc_url($commenter['comment_author_url']);	/** @todo Use API instead of SELECTs. */	if ( $user_ID) {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND (comment_approved = '1' OR ( user_id = %d AND comment_approved = '0' ) )  ORDER BY comment_date_gmt", $post->ID, $user_ID));	} else if ( empty($comment_author) ) {		$comments = get_comments( array('post_id' => $post->ID, 'status' => 'approve', 'order' => 'ASC') );	} else {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND ( comment_approved = '1' OR ( comment_author = %s AND comment_author_email = %s AND comment_approved = '0' ) ) ORDER BY comment_date_gmt", $post->ID, wp_specialchars_decode($comment_author,ENT_QUOTES), $comment_author_email));	}	// keep $comments for legacy's sake	$wp_query->comments = apply_filters( 'comments_array', $comments, $post->ID );	$comments = &$wp_query->comments;	$wp_query->comment_count = count($wp_query->comments);	update_comment_cache($wp_query->comments);	if ( $separate_comments ) {		$wp_query->comments_by_type = &separate_comments($comments);		$comments_by_type = &$wp_query->comments_by_type;	}	$overridden_cpage = FALSE;	if ( '' == get_query_var('cpage') && get_option('page_comments') ) {		set_query_var( 'cpage', 'newest' == get_option('default_comments_page') ? get_comment_pages_count() : 1 );		$overridden_cpage = TRUE;	}	if ( !defined('COMMENTS_TEMPLATE') || !COMMENTS_TEMPLATE)		define('COMMENTS_TEMPLATE', true);	$include = apply_filters('comments_template', STYLESHEETPATH . $file );	if ( file_exists( $include ) )		require( $include );	elseif ( file_exists( TEMPLATEPATH . $file ) )		require( TEMPLATEPATH .  $file );	else // Backward compat code will be removed in a future release		require( WPINC . '/theme-compat/comments.php');}/** * Displays the JS popup script to show a comment. * * If the $file parameter is empty, then the home page is assumed. The defaults * for the window are 400px by 400px. * * For the comment link popup to work, this function has to be called or the * normal comment link will be assumed. * * @since 0.71 * @global string $wpcommentspopupfile The URL to use for the popup window * @global int $wpcommentsjavascript Whether to use JavaScript. Set when function is called * * @param int $width Optional. The width of the popup window * @param int $height Optional. The height of the popup window * @param string $file Optional. Sets the location of the popup window */function comments_popup_script($width=400, $height=400, $file='') {	global $wpcommentspopupfile, $wpcommentsjavascript;	if (empty ($file)) {		$wpcommentspopupfile = '';  // Use the index.	} else {		$wpcommentspopupfile = $file;	}	$wpcommentsjavascript = 1;	$javascript = "<script type='text/javascript'>\nfunction wpopen (macagna) {\n    window.open(macagna, '_blank', 'width=$width,height=$height,scrollbars=yes,status=yes');\n}\n</script>\n";	echo $javascript;}/** * Displays the link to the comments popup window for the current post ID. * * Is not meant to be displayed on single posts and pages. Should be used on the * lists of posts * * @since 0.71 * @uses $id * @uses $wpcommentspopupfile * @uses $wpcommentsjavascript * @uses $post * * @param string $zero The string to display when no comments * @param string $one The string to display when only one comment is available * @param string $more The string to display when there are more than one comment * @param string $css_class The CSS class to use for comments * @param string $none The string to display when comments have been turned off * @return null Returns null on single posts and pages. */function comments_popup_link( $zero = false, $one = false, $more = false, $css_class = '', $none = false ) {	global $id, $wpcommentspopupfile, $wpcommentsjavascript;    if ( false === $zero ) $zero = __( 'No Comments' );    if ( false === $one ) $one = __( '1 Comment' );    if ( false === $more ) $more = __( '% Comments' );    if ( false === $none ) $none = __( 'Comments Off' );	$number = get_comments_number( $id );	if ( 0 == $number && !comments_open() && !pings_open() ) {		echo '<span' . ((!empty($css_class)) ? ' class="' . esc_attr( $css_class ) . '"' : '') . '>' . $none . '</span>';		return;	}	if ( post_password_required() ) {		echo __('Enter your password to view comments.');		return;	}	echo '<a href="';	if ( $wpcommentsjavascript ) {		if ( empty( $wpcommentspopupfile ) )			$home = home_url();		else			$home = get_option('siteurl');		echo $home . '/' . $wpcommentspopupfile . '?comments_popup=' . $id;		echo '" onclick="wpopen(this.href); return false"';	} else { // if comments_popup_script() is not in the template, display simple comment link		if ( 0 == $number )			echo get_permalink() . '#respond';		else			comments_link();		echo '"';	}	if ( !empty( $css_class ) ) {		echo ' class="'.$css_class.'" ';	}	$title = the_title_attribute( array('echo' => 0 ) );	echo apply_filters( 'comments_popup_link_attributes', '' );	echo ' title="' . esc_attr( sprintf( __('Comment on %s'), $title ) ) . '">';	comments_number( $zero, $one, $more );	echo '</a>';}/** * Retrieve HTML content for reply to comment link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_comment_reply_link($args = array(), $comment = null, $post = null) {	global $user_ID;	$defaults = array('add_below' => 'comment', 'respond_id' => 'respond', 'reply_text' => __('Reply'),		'login_text' => __('Log in to Reply'), 'depth' => 0, 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	if ( 0 == $args['depth'] || $args['max_depth'] <= $args['depth'] )		return;	extract($args, EXTR_SKIP);	$comment = get_comment($comment);	if ( empty($post) )		$post = $comment->comment_post_ID;	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	$link = '';	if ( get_option('comment_registration') && !$user_ID )		$link = '<a rel="nofollow" class="comment-reply-login" href="' . esc_url( wp_login_url( get_permalink() ) ) . '">' . $login_text . '</a>';	else		$link = "<a rel='nofollow' class='comment-reply-link' href='" . esc_url( add_query_arg( 'replytocom', $comment->comment_ID ) ) . "#" . $respond_id . "' onclick='return addComment.moveForm(\"$add_below-$comment->comment_ID\", \"$comment->comment_ID\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	return apply_filters('comment_reply_link', $before . $link . $after, $args, $comment, $post);}/** * Displays the HTML content for reply to comment link. * * @since 2.7.0 * @see get_comment_reply_link() Echoes result * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function comment_reply_link($args = array(), $comment = null, $post = null) {	echo get_comment_reply_link($args, $comment, $post);}/** * Retrieve HTML content for reply to post link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on.  Defaults to current post. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_post_reply_link($args = array(), $post = null) {	global $user_ID;	$defaults = array('add_below' => 'post', 'respond_id' => 'respond', 'reply_text' => __('Leave a Comment'),		'login_text' => __('Log in to leave a Comment'), 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	if ( get_option('comment_registration') && !$user_ID ) {		$link = '<a rel="nofollow" href="' . wp_login_url( get_permalink() ) . '">' . $login_text . '</a>';	} else {		$link = "<a rel='nofollow' class='comment-reply-link' href='" . get_permalink($post->ID) . "#$respond_id' onclick='return addComment.moveForm(\"$add_below-$post->ID\", \"0\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	}	return apply_filters('post_comments_link', $before . $link . $after, $post);}/** * Displays the HTML content for reply to post link. * @since 2.7.0 * @see get_post_reply_link() * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function post_reply_link($args = array(), $post = null) {	echo get_post_reply_link($args, $post);}/** * Retrieve HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function get_cancel_comment_reply_link($text = '') {	if ( empty($text) )		$text = __('Click here to cancel reply.');	$style = isset($_GET['replytocom']) ? '' : ' style="display:none;"';	$link = esc_html( remove_query_arg('replytocom') ) . '#respond';	return apply_filters('cancel_comment_reply_link', '<a rel="nofollow" id="cancel-comment-reply-link" href="' . $link . '"' . $style . '>' . $text . '</a>', $link, $text);}/** * Display HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function cancel_comment_reply_link($text = '') {	echo get_cancel_comment_reply_link($text);}/** * Retrieve hidden input HTML for replying to comments. * * @since 3.0.0 * * @return string Hidden input HTML for replying to comments */function get_comment_id_fields() {	global $id;	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	$result  = "<input type='hidden' name='comment_post_ID' value='$id' id='comment_post_ID' />\n";	$result .= "<input type='hidden' name='comment_parent' id='comment_parent' value='$replytoid' />\n";	return apply_filters('comment_id_fields', $result, $id, $replytoid);}/** * Output hidden input HTML for replying to comments. * * @since 2.7.0 * @see get_comment_id_fields() Echoes result */function comment_id_fields() {	echo get_comment_id_fields();}/** * Display text based on comment reply status. Only affects users with Javascript disabled. * * @since 2.7.0 * * @param string $noreplytext Optional. Text to display when not replying to a comment. * @param string $replytext Optional. Text to display when replying to a comment. Accepts "%s" for the author of the comment being replied to. * @param string $linktoparent Optional. Boolean to control making the author's name a link to their comment. */function comment_form_title( $noreplytext = false, $replytext = false, $linktoparent = TRUE ) {	global $comment;	if ( false === $noreplytext ) $noreplytext = __( 'Leave a Reply' );	if ( false === $replytext ) $replytext = __( 'Leave a Reply to %s' );	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	if ( 0 == $replytoid )		echo $noreplytext;	else {		$comment = get_comment($replytoid);		$author = ( $linktoparent ) ? '<a href="#comment-' . get_comment_ID() . '">' . get_comment_author() . '</a>' : get_comment_author();		printf( $replytext, $author );	}}/** * HTML comment list class. * * @package WordPress * @uses Walker * @since unknown */class Walker_Comment extends Walker {	/**	 * @see Walker::$tree_type	 * @since unknown	 * @var string	 */	var $tree_type = 'comment';	/**	 * @see Walker::$db_fields	 * @since unknown	 * @var array	 */	var $db_fields = array ('parent' => 'comment_parent', 'id' => 'comment_ID');	/**	 * @see Walker::start_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Uses 'style' argument for type of HTML list.	 */	function start_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "<ol class='children'>\n";				break;			default:			case 'ul':				echo "<ul class='children'>\n";				break;		}	}	/**	 * @see Walker::end_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Will only append content if style argument value is 'ol' or 'ul'.	 */	function end_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "</ol>\n";				break;			default:			case 'ul':				echo "</ul>\n";				break;		}	}	/**	 * This function is designed to enhance Walker::display_element() to	 * display children of higher nesting levels than selected inline on	 * the highest depth level displayed. This prevents them being orphaned	 * at the end of the comment list.	 *	 * Example: max_depth = 2, with 5 levels of nested content.	 * 1	 *  1.1	 *    1.1.1	 *    1.1.1.1	 *    1.1.1.1.1	 *    1.1.2	 *    1.1.2.1	 * 2	 *  2.2	 *	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		$id = $element->$id_field;		parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );		// If we're at the max depth, and the current element still has children, loop over those and display them at this level		// This is to prevent them being orphaned to the end of the list.		if ( $max_depth <= $depth + 1 && isset( $children_elements[$id]) ) {			foreach ( $children_elements[ $id ] as $child )				$this->display_element( $child, $children_elements, $max_depth, $depth, $args, $output );			unset( $children_elements[ $id ] );		}	}	/**	 * @see Walker::start_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment Comment data object.	 * @param int $depth Depth of comment in reference to parents.	 * @param array $args	 */	function start_el(&$output, $comment, $depth, $args) {		$depth++;		$GLOBALS['comment_depth'] = $depth;		if ( !empty($args['callback']) ) {			call_user_func($args['callback'], $comment, $args, $depth);			return;		}		$GLOBALS['comment'] = $comment;		extract($args, EXTR_SKIP);		if ( 'div' == $args['style'] ) {			$tag = 'div';			$add_below = 'comment';		} else {			$tag = 'li';			$add_below = 'div-comment';		}?>		<<?php echo $tag ?> <?php comment_class(empty( $args['has_children'] ) ? '' : 'parent') ?> id="comment-<?php comment_ID() ?>">		<?php if ( 'div' != $args['style'] ) : ?>		<div id="div-comment-<?php comment_ID() ?>" class="comment-body">		<?php endif; ?>		<div class="comment-author vcard">		<?php if ($args['avatar_size'] != 0) echo get_avatar( $comment, $args['avatar_size'] ); ?>		<?php printf(__('<cite class="fn">%s</cite> <span class="says">says:</span>'), get_comment_author_link()) ?>		</div><?php if ($comment->comment_approved == '0') : ?>		<em><?php _e('Your comment is awaiting moderation.') ?></em>		<br /><?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo htmlspecialchars( get_comment_link( $comment->comment_ID ) ) ?>">			<?php				/* translators: 1: date, 2: time */				printf( __('%1$s at %2$s'), get_comment_date(),  get_comment_time()) ?></a><?php edit_comment_link(__('(Edit)'),'&nbsp;&nbsp;','' );			?>		</div>		<?php comment_text() ?>		<div class="reply">		<?php comment_reply_link(array_merge( $args, array('add_below' => $add_below, 'depth' => $depth, 'max_depth' => $args['max_depth']))) ?>		</div>		<?php if ( 'div' != $args['style'] ) : ?>		</div>		<?php endif; ?><?php	}	/**	 * @see Walker::end_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment	 * @param int $depth Depth of comment.	 * @param array $args	 */	function end_el(&$output, $comment, $depth, $args) {		if ( !empty($args['end-callback']) ) {			call_user_func($args['end-callback'], $comment, $args, $depth);			return;		}		if ( 'div' == $args['style'] )			echo "</div>\n";		else			echo "</li>\n";	}}/** * List comments * * Used in the comments.php template to list comments for a particular post * * @since 2.7.0 * @uses Walker_Comment * * @param string|array $args Formatting options * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments */function wp_list_comments($args = array(), $comments = null ) {	global $wp_query, $comment_alt, $comment_depth, $comment_thread_alt, $overridden_cpage, $in_comment_loop;	$in_comment_loop = true;	$comment_alt = $comment_thread_alt = 0;	$comment_depth = 1;	$defaults = array('walker' => null, 'max_depth' => '', 'style' => 'ul', 'callback' => null, 'end-callback' => null, 'type' => 'all',		'page' => '', 'per_page' => '', 'avatar_size' => 32, 'reverse_top_level' => null, 'reverse_children' => '');	$r = wp_parse_args( $args, $defaults );	// Figure out what comments we'll be looping through ($_comments)	if ( null !== $comments ) {		$comments = (array) $comments;		if ( empty($comments) )			return;		if ( 'all' != $r['type'] ) {			$comments_by_type = &separate_comments($comments);			if ( empty($comments_by_type[$r['type']]) )				return;			$_comments = $comments_by_type[$r['type']];		} else {			$_comments = $comments;		}	} else {		if ( empty($wp_query->comments) )			return;		if ( 'all' != $r['type'] ) {			if ( empty($wp_query->comments_by_type) )				$wp_query->comments_by_type = &separate_comments($wp_query->comments);			if ( empty($wp_query->comments_by_type[$r['type']]) )				return;			$_comments = $wp_query->comments_by_type[$r['type']];		} else {			$_comments = $wp_query->comments;		}	}	if ( '' === $r['per_page'] && get_option('page_comments') )		$r['per_page'] = get_query_var('comments_per_page');	if ( empty($r['per_page']) ) {		$r['per_page'] = 0;		$r['page'] = 0;	}	if ( '' === $r['max_depth'] ) {		if ( get_option('thread_comments') )			$r['max_depth'] = get_option('thread_comments_depth');		else			$r['max_depth'] = -1;	}	if ( '' === $r['page'] ) {		if ( empty($overridden_cpage) ) {			$r['page'] = get_query_var('cpage');		} else {			$threaded = ( -1 != $r['max_depth'] );			$r['page'] = ( 'newest' == get_option('default_comments_page') ) ? get_comment_pages_count($_comments, $r['per_page'], $threaded) : 1;			set_query_var( 'cpage', $r['page'] );		}	}	// Validation check	$r['page'] = intval($r['page']);	if ( 0 == $r['page'] && 0 != $r['per_page'] )		$r['page'] = 1;	if ( null === $r['reverse_top_level'] )		$r['reverse_top_level'] = ( 'desc' == get_option('comment_order') );	extract( $r, EXTR_SKIP );	if ( empty($walker) )		$walker = new Walker_Comment;	$walker->paged_walk($_comments, $max_depth, $page, $per_page, $r);	$wp_query->max_num_comment_pages = $walker->max_pages;	$in_comment_loop = false;}/** * Outputs a complete commenting form for use within a template. * Most strings and form fields may be controlled through the $args array passed * into the function, while you may also choose to use the comment_form_default_fields * filter to modify the array of default fields if you'd just like to add a new * one or remove a single field. All fields are also individually passed through * a filter of the form comment_form_field_$name where $name is the key used * in the array of fields. * * @since 3.0.0 * @param array $args Options for strings, fields etc in the form * @param mixed $post_id Post ID to generate the form for, uses the current post if null * @return void */function comment_form( $args = array(), $post_id = null ) {	global $user_identity, $id;	if ( null === $post_id )		$post_id = $id;	else		$id = $post_id;	$commenter = wp_get_current_commenter();	$req = get_option( 'require_name_email' );	$aria_req = ( $req ? " aria-required='true'" : '' );	$fields =  array(		'author' => '<p class="comment-form-author">' . '<label for="author">' . __( 'Name' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="author" name="author" type="text" value="' . esc_attr( $commenter['comment_author'] ) . '" size="30"' . $aria_req . ' /></p>',		'email'  => '<p class="comment-form-email"><label for="email">' . __( 'Email' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="email" name="email" type="text" value="' . esc_attr(  $commenter['comment_author_email'] ) . '" size="30"' . $aria_req . ' /></p>',		'url'    => '<p class="comment-form-url"><label for="url">' . __( 'Website' ) . '</label>' .		            '<input id="url" name="url" type="text" value="' . esc_attr( $commenter['comment_author_url'] ) . '" size="30" /></p>',	);	$required_text = sprintf( ' ' . __('Required fields are marked %s'), '<span class="required">*</span>' );	$defaults = array(		'fields'               => apply_filters( 'comment_form_default_fields', $fields ),		'comment_field'        => '<p class="comment-form-comment"><label for="comment">' . _x( 'Comment', 'noun' ) . '</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>',		'must_log_in'          => '<p class="must-log-in">' .  sprintf( __( 'You must be <a href="%s">logged in</a> to post a comment.' ), wp_login_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'logged_in_as'         => '<p class="logged-in-as">' . sprintf( __( 'Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out?</a>' ), admin_url( 'profile.php' ), $user_identity, wp_logout_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'comment_notes_before' => '<p class="comment-notes">' . __( 'Your email address will not be published.' ) . ( $req ? $required_text : '' ) . '</p>',		'comment_notes_after'  => '<p class="form-allowed-tags">' . sprintf( __( 'You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: %s' ), ' <code>' . allowed_tags() . '</code>' ) . '</p>',		'id_form'              => 'commentform',		'id_submit'            => 'submit',		'title_reply'          => __( 'Leave a Reply' ),		'title_reply_to'       => __( 'Leave a Reply to %s' ),		'cancel_reply_link'    => __( 'Cancel reply' ),		'label_submit'         => __( 'Post Comment' ),	);	$args = wp_parse_args( $args, apply_filters( 'comment_form_defaults', $defaults ) );	?>		<?php if ( comments_open() ) : ?>			<?php do_action( 'comment_form_before' ); ?>			<div id="respond">				<h3 id="reply-title"><?php comment_form_title( $args['title_reply'], $args['title_reply_to'] ); ?> <small><?php cancel_comment_reply_link( $args['cancel_reply_link'] ); ?></small></h3>				<?php if ( get_option( 'comment_registration' ) && !is_user_logged_in() ) : ?>					<?php echo $args['must_log_in']; ?>					<?php do_action( 'comment_form_must_log_in_after' ); ?>				<?php else : ?>					<form action="<?php echo site_url( '/wp-comments-post.php' ); ?>" method="post" id="<?php echo esc_attr( $args['id_form'] ); ?>">						<?php do_action( 'comment_form_top' ); ?>						<?php if ( is_user_logged_in() ) : ?>							<?php echo apply_filters( 'comment_form_logged_in', $args['logged_in_as'], $commenter, $user_identity ); ?>							<?php do_action( 'comment_form_logged_in_after', $commenter, $user_identity ); ?>						<?php else : ?>							<?php echo $args['comment_notes_before']; ?>							<?php							do_action( 'comment_form_before_fields' );							foreach ( (array) $args['fields'] as $name => $field ) {								echo apply_filters( "comment_form_field_{$name}", $field ) . "\n";							}							do_action( 'comment_form_after_fields' );							?>						<?php endif; ?>						<?php echo apply_filters( 'comment_form_field_comment', $args['comment_field'] ); ?>						<?php echo $args['comment_notes_after']; ?>						<p class="form-submit">							<input name="submit" type="submit" id="<?php echo esc_attr( $args['id_submit'] ); ?>" value="<?php echo esc_attr( $args['label_submit'] ); ?>" />							<?php comment_id_fields(); ?>						</p>						<?php do_action( 'comment_form', $post_id ); ?>					</form>				<?php endif; ?>			</div><!-- #respond -->			<?php do_action( 'comment_form_after' ); ?>		<?php else : ?>			<?php do_action( 'comment_form_comments_closed' ); ?>		<?php endif; ?>	<?php}?>
<?php/** * Retrieves and creates the wp-config.php file. * * The permissions for the base directory must allow for writing files in order * for the wp-config.php to be created using this page. * * @package WordPress * @subpackage Administration *//** * We are installing. * * @package WordPress */define('WP_INSTALLING', true);/** * We are blissfully unaware of anything. */define('WP_SETUP_CONFIG', true);/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/**#@+ * These three defines are required to allow us to use require_wp_db() to load * the database class while being wp-content/db.php aware. * @ignore */define('ABSPATH', dirname(dirname(__FILE__)).'/');define('WPINC', 'wp-includes');define('WP_CONTENT_DIR', ABSPATH . 'wp-content');define('WP_DEBUG', false);/**#@-*/require_once(ABSPATH . WPINC . '/load.php');require_once(ABSPATH . WPINC . '/compat.php');require_once(ABSPATH . WPINC . '/functions.php');require_once(ABSPATH . WPINC . '/classes.php');require_once(ABSPATH . WPINC . '/version.php');if (!file_exists(ABSPATH . 'wp-config-sample.php'))	wp_die('Sorry, I need a wp-config-sample.php file to work from. Please re-upload this file from your WordPress installation.');$configFile = file(ABSPATH . 'wp-config-sample.php');// Check if wp-config.php has been createdif (file_exists(ABSPATH . 'wp-config.php'))	wp_die("<p>The file 'wp-config.php' already exists. If you need to reset any of the configuration items in this file, please delete it first. You may try <a href='install.php'>installing now</a>.</p>");// Check if wp-config.php exists above the root directory but is not part of another installif (file_exists(ABSPATH . '../wp-config.php') && ! file_exists(ABSPATH . '../wp-settings.php'))	wp_die("<p>The file 'wp-config.php' already exists one level above your WordPress installation. If you need to reset any of the configuration items in this file, please delete it first. You may try <a href='install.php'>installing now</a>.</p>");if ( version_compare( $required_php_version, phpversion(), '>' ) )	wp_die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress requires at least %2$s.'/*/WP_I18N_OLD_PHP*/, phpversion(), $required_php_version ) );if ( !extension_loaded('mysql') && !file_exists(ABSPATH . 'wp-content/db.php') )	wp_die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );if (isset($_GET['step']))	$step = $_GET['step'];else	$step = 0;/** * Display setup wp-config.php file header. * * @ignore * @since 2.3.0 * @package WordPress * @subpackage Installer_WP_Config */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>WordPress &rsaquo; Setup Configuration File</title><link rel="stylesheet" href="css/install.css" type="text/css" /></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php}//end function display_header();switch($step) {	case 0:		display_header();?><p>Welcome to WordPress. Before getting started, we need some information on the database. You will need to know the following items before proceeding.</p><ol>	<li>Database name</li>	<li>Database username</li>	<li>Database password</li>	<li>Database host</li>	<li>Table prefix (if you want to run more than one WordPress in a single database) </li></ol><p><strong>If for any reason this automatic file creation doesn't work, don't worry. All this does is fill in the database information to a configuration file. You may also simply open <code>wp-config-sample.php</code> in a text editor, fill in your information, and save it as <code>wp-config.php</code>. </strong></p><p>In all likelihood, these items were supplied to you by your Web Host. If you do not have this information, then you will need to contact them before you can continue. If you&#8217;re all ready&hellip;</p><p class="step"><a href="setup-config.php?step=1<?php if ( isset( $_GET['noapi'] ) ) echo '&amp;noapi'; ?>" class="button">Let&#8217;s go!</a></p><?php	break;	case 1:		display_header();	?><form method="post" action="setup-config.php?step=2">	<p>Below you should enter your database connection details. If you're not sure about these, contact your host. </p>	<table class="form-table">		<tr>			<th scope="row"><label for="dbname">Database Name</label></th>			<td><input name="dbname" id="dbname" type="text" size="25" value="wordpress" /></td>			<td>The name of the database you want to run WP in. </td>		</tr>		<tr>			<th scope="row"><label for="uname">User Name</label></th>			<td><input name="uname" id="uname" type="text" size="25" value="username" /></td>			<td>Your MySQL username</td>		</tr>		<tr>			<th scope="row"><label for="pwd">Password</label></th>			<td><input name="pwd" id="pwd" type="text" size="25" value="password" /></td>			<td>...and MySQL password.</td>		</tr>		<tr>			<th scope="row"><label for="dbhost">Database Host</label></th>			<td><input name="dbhost" id="dbhost" type="text" size="25" value="localhost" /></td>			<td>You should be able to get this info from your web host, if <code>localhost</code> does not work.</td>		</tr>		<tr>			<th scope="row"><label for="prefix">Table Prefix</label></th>			<td><input name="prefix" id="prefix" type="text" id="prefix" value="wp_" size="25" /></td>			<td>If you want to run multiple WordPress installations in a single database, change this.</td>		</tr>	</table>	<?php if ( isset( $_GET['noapi'] ) ) { ?><input name="noapi" type="hidden" value="true" /><?php } ?>	<p class="step"><input name="submit" type="submit" value="Submit" class="button" /></p></form><?php	break;	case 2:	$dbname  = trim($_POST['dbname']);	$uname   = trim($_POST['uname']);	$passwrd = trim($_POST['pwd']);	$dbhost  = trim($_POST['dbhost']);	$prefix  = trim($_POST['prefix']);	if ( empty($prefix) )		$prefix = 'wp_';	// Validate $prefix: it can only contain letters, numbers and underscores	if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: "Table Prefix" can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );	// Test the db connection.	/**#@+	 * @ignore	 */	define('DB_NAME', $dbname);	define('DB_USER', $uname);	define('DB_PASSWORD', $passwrd);	define('DB_HOST', $dbhost);	/**#@-*/	// We'll fail here if the values are no good.	require_wp_db();	if ( !empty($wpdb->error) )		wp_die($wpdb->error->get_error_message());	// Fetch or generate keys and salts.	$no_api = isset( $_POST['noapi'] );	require_once( ABSPATH . WPINC . '/plugin.php' );	require_once( ABSPATH . WPINC . '/l10n.php' );	require_once( ABSPATH . WPINC . '/pomo/translations.php' );	if ( ! $no_api ) {		require_once( ABSPATH . WPINC . '/class-http.php' );		require_once( ABSPATH . WPINC . '/http.php' );		wp_fix_server_vars();		/**#@+		 * @ignore		 */		function get_bloginfo() {			return ( ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . str_replace( $_SERVER['PHP_SELF'], '/wp-admin/setup-config.php', '' ) );		}		/**#@-*/		$secret_keys = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );	}	if ( $no_api || is_wp_error( $secret_keys ) ) {		$secret_keys = array();		require_once( ABSPATH . WPINC . '/pluggable.php' );		for ( $i = 0; $i < 8; $i++ ) {			$secret_keys[] = wp_generate_password( 64, true, true );		}	} else {		$secret_keys = explode( "\n", wp_remote_retrieve_body( $secret_keys ) );		foreach ( $secret_keys as $k => $v ) {			$secret_keys[$k] = substr( $v, 28, 64 );		}	}	$key = 0;	foreach ($configFile as $line_num => $line) {		switch (substr($line,0,16)) {			case "define('DB_NAME'":				$configFile[$line_num] = str_replace("database_name_here", $dbname, $line);				break;			case "define('DB_USER'":				$configFile[$line_num] = str_replace("'username_here'", "'$uname'", $line);				break;			case "define('DB_PASSW":				$configFile[$line_num] = str_replace("'password_here'", "'$passwrd'", $line);				break;			case "define('DB_HOST'":				$configFile[$line_num] = str_replace("localhost", $dbhost, $line);				break;			case '$table_prefix  =':				$configFile[$line_num] = str_replace('wp_', $prefix, $line);				break;			case "define('AUTH_KEY":			case "define('SECURE_A":			case "define('LOGGED_I":			case "define('NONCE_KE":			case "define('AUTH_SAL":			case "define('SECURE_A":			case "define('LOGGED_I":			case "define('NONCE_SA":				$configFile[$line_num] = str_replace('put your unique phrase here', $secret_keys[$key++], $line );				break;		}	}	if ( ! is_writable(ABSPATH) ) :		display_header();?><p>Sorry, but I can't write the <code>wp-config.php</code> file.</p><p>You can create the <code>wp-config.php</code> manually and paste the following text into it.</p><textarea cols="98" rows="15" class="code"><?php		foreach( $configFile as $line ) {			echo htmlentities($line, ENT_COMPAT, 'UTF-8');		}?></textarea><p>After you've done that, click "Run the install."</p><p class="step"><a href="install.php" class="button">Run the install</a></p><?php	else :		$handle = fopen(ABSPATH . 'wp-config.php', 'w');		foreach( $configFile as $line ) {			fwrite($handle, $line);		}		fclose($handle);		chmod(ABSPATH . 'wp-config.php', 0666);		display_header();?><p>All right sparky! You've made it through this part of the installation. WordPress can now communicate with your database. If you are ready, time now to&hellip;</p><p class="step"><a href="install.php" class="button">Run the install</a></p><?php	endif;	break;}?></body></html>
<?php/** * Theme, template, and stylesheet functions. * * @package WordPress * @subpackage Template *//** * Whether a child theme is in use. * * @since 3.0.0 * * @return bool true if a child theme is in use, false otherwise. **/function is_child_theme() {	return ( TEMPLATEPATH !== STYLESHEETPATH );}/** * Retrieve name of the current stylesheet. * * The theme name that the administrator has currently set the front end theme * as. * * For all extensive purposes, the template name and the stylesheet name are * going to be the same for most cases. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet' filter on stylesheet name. * * @return string Stylesheet name. */function get_stylesheet() {	return apply_filters('stylesheet', get_option('stylesheet'));}/** * Retrieve stylesheet directory path for current theme. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet_directory' filter on stylesheet directory and theme name. * * @return string Path to current theme directory. */function get_stylesheet_directory() {	$stylesheet = get_stylesheet();	$theme_root = get_theme_root( $stylesheet );	$stylesheet_dir = "$theme_root/$stylesheet";	return apply_filters( 'stylesheet_directory', $stylesheet_dir, $stylesheet, $theme_root );}/** * Retrieve stylesheet directory URI. * * @since 1.5.0 * * @return string */function get_stylesheet_directory_uri() {	$stylesheet = get_stylesheet();	$theme_root_uri = get_theme_root_uri( $stylesheet );	$stylesheet_dir_uri = "$theme_root_uri/$stylesheet";	return apply_filters( 'stylesheet_directory_uri', $stylesheet_dir_uri, $stylesheet, $theme_root_uri );}/** * Retrieve URI of current theme stylesheet. * * The stylesheet file name is 'style.css' which is appended to {@link * get_stylesheet_directory_uri() stylesheet directory URI} path. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI. * * @return string */function get_stylesheet_uri() {	$stylesheet_dir_uri = get_stylesheet_directory_uri();	$stylesheet_uri = $stylesheet_dir_uri . "/style.css";	return apply_filters('stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri);}/** * Retrieve localized stylesheet URI. * * The stylesheet directory for the localized stylesheet files are located, by * default, in the base theme directory. The name of the locale file will be the * locale followed by '.css'. If that does not exist, then the text direction * stylesheet will be checked for existence, for example 'ltr.css'. * * The theme may change the location of the stylesheet directory by either using * the 'stylesheet_directory_uri' filter or the 'locale_stylesheet_uri' filter. * If you want to change the location of the stylesheet files for the entire * WordPress workflow, then change the former. If you just have the locale in a * separate folder, then change the latter. * * @since 2.1.0 * @uses apply_filters() Calls 'locale_stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI. * * @return string */function get_locale_stylesheet_uri() {	global $wp_locale;	$stylesheet_dir_uri = get_stylesheet_directory_uri();	$dir = get_stylesheet_directory();	$locale = get_locale();	if ( file_exists("$dir/$locale.css") )		$stylesheet_uri = "$stylesheet_dir_uri/$locale.css";	elseif ( !empty($wp_locale->text_direction) && file_exists("$dir/{$wp_locale->text_direction}.css") )		$stylesheet_uri = "$stylesheet_dir_uri/{$wp_locale->text_direction}.css";	else		$stylesheet_uri = '';	return apply_filters('locale_stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri);}/** * Retrieve name of the current theme. * * @since 1.5.0 * @uses apply_filters() Calls 'template' filter on template option. * * @return string Template name. */function get_template() {	return apply_filters('template', get_option('template'));}/** * Retrieve current theme directory. * * @since 1.5.0 * @uses apply_filters() Calls 'template_directory' filter on template directory path and template name. * * @return string Template directory path. */function get_template_directory() {	$template = get_template();	$theme_root = get_theme_root( $template );	$template_dir = "$theme_root/$template";	return apply_filters( 'template_directory', $template_dir, $template, $theme_root );}/** * Retrieve theme directory URI. * * @since 1.5.0 * @uses apply_filters() Calls 'template_directory_uri' filter on template directory URI path and template name. * * @return string Template directory URI. */function get_template_directory_uri() {	$template = get_template();	$theme_root_uri = get_theme_root_uri( $template );	$template_dir_uri = "$theme_root_uri/$template";	return apply_filters( 'template_directory_uri', $template_dir_uri, $template, $theme_root_uri );}/** * Retrieve theme data from parsed theme file. * * The description will have the tags filtered with the following HTML elements * whitelisted. The <b>'a'</b> element with the <em>href</em> and <em>title</em> * attributes. The <b>abbr</b> element with the <em>title</em> attribute. The * <b>acronym<b> element with the <em>title</em> attribute allowed. The * <b>code</b>, <b>em</b>, and <b>strong</b> elements also allowed. * * The style.css file must contain theme name, theme URI, and description. The * data can also contain author URI, author, template (parent template), * version, status, and finally tags. Some of these are not used by WordPress * administration panels, but are used by theme directory web sites which list * the theme. * * @since 1.5.0 * * @param string $theme_file Theme file path. * @return array Theme data. */function get_theme_data( $theme_file ) {	$default_headers = array(		'Name' => 'Theme Name',		'URI' => 'Theme URI',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'Version' => 'Version',		'Template' => 'Template',		'Status' => 'Status',		'Tags' => 'Tags'		);	$themes_allowed_tags = array(		'a' => array(			'href' => array(),'title' => array()			),		'abbr' => array(			'title' => array()			),		'acronym' => array(			'title' => array()			),		'code' => array(),		'em' => array(),		'strong' => array()	);	$theme_data = get_file_data( $theme_file, $default_headers, 'theme' );	$theme_data['Name'] = $theme_data['Title'] = wp_kses( $theme_data['Name'], $themes_allowed_tags );	$theme_data['URI'] = esc_url( $theme_data['URI'] );	$theme_data['Description'] = wptexturize( wp_kses( $theme_data['Description'], $themes_allowed_tags ) );	$theme_data['AuthorURI'] = esc_url( $theme_data['AuthorURI'] );	$theme_data['Template'] = wp_kses( $theme_data['Template'], $themes_allowed_tags );	$theme_data['Version'] = wp_kses( $theme_data['Version'], $themes_allowed_tags );	if ( $theme_data['Status'] == '' )		$theme_data['Status'] = 'publish';	else		$theme_data['Status'] = wp_kses( $theme_data['Status'], $themes_allowed_tags );	if ( $theme_data['Tags'] == '' )		$theme_data['Tags'] = array();	else		$theme_data['Tags'] = array_map( 'trim', explode( ',', wp_kses( $theme_data['Tags'], array() ) ) );	if ( $theme_data['Author'] == '' ) {		$theme_data['Author'] = $theme_data['AuthorName'] = __('Anonymous');	} else {		$theme_data['AuthorName'] = wp_kses( $theme_data['Author'], $themes_allowed_tags );		if ( empty( $theme_data['AuthorURI'] ) ) {			$theme_data['Author'] = $theme_data['AuthorName'];		} else {			$theme_data['Author'] = sprintf( '<a href="%1$s" title="%2$s">%3$s</a>', $theme_data['AuthorURI'], __( 'Visit author homepage' ), $theme_data['AuthorName'] );		}	}	return $theme_data;}/** * Retrieve list of themes with theme data in theme directory. * * The theme is broken, if it doesn't have a parent theme and is missing either * style.css and, or index.php. If the theme has a parent theme then it is * broken, if it is missing style.css; index.php is optional. The broken theme * list is saved in the {@link $wp_broken_themes} global, which is displayed on * the theme list in the administration panels. * * @since 1.5.0 * @global array $wp_broken_themes Stores the broken themes. * @global array $wp_themes Stores the working themes. * * @return array Theme list with theme data. */function get_themes() {	global $wp_themes, $wp_broken_themes;	if ( isset($wp_themes) )		return $wp_themes;	/* Register the default root as a theme directory */	register_theme_directory( get_theme_root() );	if ( !$theme_files = search_theme_directories() )		return false;	asort( $theme_files );	$wp_themes = array();	foreach ( (array) $theme_files as $theme_file ) {		$theme_root = $theme_file['theme_root'];		$theme_file = $theme_file['theme_file'];		if ( !is_readable("$theme_root/$theme_file") ) {			$wp_broken_themes[$theme_file] = array('Name' => $theme_file, 'Title' => $theme_file, 'Description' => __('File not readable.'));			continue;		}		$theme_data = get_theme_data("$theme_root/$theme_file");		$name        = $theme_data['Name'];		$title       = $theme_data['Title'];		$description = wptexturize($theme_data['Description']);		$version     = $theme_data['Version'];		$author      = $theme_data['Author'];		$template    = $theme_data['Template'];		$stylesheet  = dirname($theme_file);		$screenshot = false;		foreach ( array('png', 'gif', 'jpg', 'jpeg') as $ext ) {			if (file_exists("$theme_root/$stylesheet/screenshot.$ext")) {				$screenshot = "screenshot.$ext";				break;			}		}		if ( empty($name) ) {			$name = dirname($theme_file);			$title = $name;		}		$parent_template = $template;		if ( empty($template) ) {			if ( file_exists("$theme_root/$stylesheet/index.php") )				$template = $stylesheet;			else				continue;		}		$template = trim( $template );		if ( !file_exists("$theme_root/$template/index.php") ) {			$parent_dir = dirname(dirname($theme_file));			if ( file_exists("$theme_root/$parent_dir/$template/index.php") ) {				$template = "$parent_dir/$template";				$template_directory = "$theme_root/$template";			} else {				/**				 * The parent theme doesn't exist in the current theme's folder or sub folder				 * so lets use the theme root for the parent template.				 */				if ( isset($theme_files[$template]) && file_exists( $theme_files[$template]['theme_root'] . "/$template/index.php" ) ) {					$template_directory = $theme_files[$template]['theme_root'] . "/$template";				} else {					if ( empty( $parent_template) )						$wp_broken_themes[$name] = array('Name' => $name, 'Title' => $title, 'Description' => __('Template is missing.'), 'error' => 'no_template');					else						$wp_broken_themes[$name] = array('Name' => $name, 'Title' => $title, 'Description' => sprintf( __('The parent theme is missing. Please install the "%s" parent theme.'),  $parent_template ), 'error' => 'no_parent', 'parent' => $parent_template );					continue;				}			}		} else {			$template_directory = trim( $theme_root . '/' . $template );		}		$stylesheet_files = array();		$template_files = array();		$stylesheet_dir = @ dir("$theme_root/$stylesheet");		if ( $stylesheet_dir ) {			while ( ($file = $stylesheet_dir->read()) !== false ) {				if ( !preg_match('|^\.+$|', $file) ) {					if ( preg_match('|\.css$|', $file) )						$stylesheet_files[] = "$theme_root/$stylesheet/$file";					elseif ( preg_match('|\.php$|', $file) )						$template_files[] = "$theme_root/$stylesheet/$file";				}			}			@ $stylesheet_dir->close();		}		$template_dir = @ dir("$template_directory");		if ( $template_dir ) {			while ( ($file = $template_dir->read()) !== false ) {				if ( preg_match('|^\.+$|', $file) )					continue;				if ( preg_match('|\.php$|', $file) ) {					$template_files[] = "$template_directory/$file";				} elseif ( is_dir("$template_directory/$file") ) {					$template_subdir = @ dir("$template_directory/$file");					if ( !$template_subdir )						continue;					while ( ($subfile = $template_subdir->read()) !== false ) {						if ( preg_match('|^\.+$|', $subfile) )							continue;						if ( preg_match('|\.php$|', $subfile) )							$template_files[] = "$template_directory/$file/$subfile";					}					@ $template_subdir->close();				}			}			@ $template_dir->close();		}		//Make unique and remove duplicates when stylesheet and template are the same i.e. most themes		$template_files = array_unique($template_files);		$stylesheet_files = array_unique($stylesheet_files);		$template_dir = dirname($template_files[0]);		$stylesheet_dir = dirname($stylesheet_files[0]);		if ( empty($template_dir) )			$template_dir = '/';		if ( empty($stylesheet_dir) )			$stylesheet_dir = '/';		// Check for theme name collision.  This occurs if a theme is copied to		// a new theme directory and the theme header is not updated.  Whichever		// theme is first keeps the name.  Subsequent themes get a suffix applied.		// The Default and Classic themes always trump their pretenders.		if ( isset($wp_themes[$name]) ) {			if ( ('WordPress Default' == $name || 'WordPress Classic' == $name) &&					 ('default' == $stylesheet || 'classic' == $stylesheet) ) {				// If another theme has claimed to be one of our default themes, move				// them aside.				$suffix = $wp_themes[$name]['Stylesheet'];				$new_name = "$name/$suffix";				$wp_themes[$new_name] = $wp_themes[$name];				$wp_themes[$new_name]['Name'] = $new_name;			} else {				$name = "$name/$stylesheet";			}		}		$theme_roots[$stylesheet] = str_replace( WP_CONTENT_DIR, '', $theme_root );		$wp_themes[$name] = array(			'Name' => $name,			'Title' => $title,			'Description' => $description,			'Author' => $author,			'Author Name' => $theme_data['AuthorName'],			'Author URI' => $theme_data['AuthorURI'],			'Version' => $version,			'Template' => $template,			'Stylesheet' => $stylesheet,			'Template Files' => $template_files,			'Stylesheet Files' => $stylesheet_files,			'Template Dir' => $template_dir,			'Stylesheet Dir' => $stylesheet_dir,			'Status' => $theme_data['Status'],			'Screenshot' => $screenshot,			'Tags' => $theme_data['Tags'],			'Theme Root' => $theme_root,			'Theme Root URI' => str_replace( WP_CONTENT_DIR, content_url(), $theme_root ),		);	}	unset($theme_files);	/* Store theme roots in the DB */	if ( get_site_transient( 'theme_roots' ) != $theme_roots )		set_site_transient( 'theme_roots', $theme_roots, 7200 ); // cache for two hours	unset($theme_roots);	/* Resolve theme dependencies. */	$theme_names = array_keys( $wp_themes );	foreach ( (array) $theme_names as $theme_name ) {		$wp_themes[$theme_name]['Parent Theme'] = '';		if ( $wp_themes[$theme_name]['Stylesheet'] != $wp_themes[$theme_name]['Template'] ) {			foreach ( (array) $theme_names as $parent_theme_name ) {				if ( ($wp_themes[$parent_theme_name]['Stylesheet'] == $wp_themes[$parent_theme_name]['Template']) && ($wp_themes[$parent_theme_name]['Template'] == $wp_themes[$theme_name]['Template']) ) {					$wp_themes[$theme_name]['Parent Theme'] = $wp_themes[$parent_theme_name]['Name'];					break;				}			}		}	}	return $wp_themes;}/** * Retrieve theme roots. * * @since 2.9.0 * * @return array Theme roots */function get_theme_roots() {	$theme_roots = get_site_transient( 'theme_roots' );	if ( false === $theme_roots ) {		get_themes();		$theme_roots = get_site_transient( 'theme_roots' ); // this is set in get_theme()	}	return $theme_roots;}/** * Retrieve theme data. * * @since 1.5.0 * * @param string $theme Theme name. * @return array|null Null, if theme name does not exist. Theme data, if exists. */function get_theme($theme) {	$themes = get_themes();	if ( array_key_exists($theme, $themes) )		return $themes[$theme];	return null;}/** * Retrieve current theme display name. * * If the 'current_theme' option has already been set, then it will be returned * instead. If it is not set, then each theme will be iterated over until both * the current stylesheet and current template name. * * @since 1.5.0 * * @return string */function get_current_theme() {	if ( $theme = get_option('current_theme') )		return $theme;	$themes = get_themes();	$theme_names = array_keys($themes);	$current_template = get_option('template');	$current_stylesheet = get_option('stylesheet');	$current_theme = 'WordPress Default';	if ( $themes ) {		foreach ( (array) $theme_names as $theme_name ) {			if ( $themes[$theme_name]['Stylesheet'] == $current_stylesheet &&					$themes[$theme_name]['Template'] == $current_template ) {				$current_theme = $themes[$theme_name]['Name'];				break;			}		}	}	update_option('current_theme', $current_theme);	return $current_theme;}/** * Register a directory that contains themes. * * @since 2.9.0 * * @param string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR * @return bool */function register_theme_directory( $directory) {	global $wp_theme_directories;	/* If this folder does not exist, return and do not register */	if ( !file_exists( $directory ) )			/* Try prepending as the theme directory could be relative to the content directory */		$registered_directory = WP_CONTENT_DIR . '/' . $directory;	else		$registered_directory = $directory;	/* If this folder does not exist, return and do not register */	if ( !file_exists( $registered_directory ) )		return false;	$wp_theme_directories[] = $registered_directory;	return true;}/** * Search all registered theme directories for complete and valid themes. * * @since 2.9.0 * * @return array Valid themes found */function search_theme_directories() {	global $wp_theme_directories, $wp_broken_themes;	if ( empty( $wp_theme_directories ) )		return false;	$theme_files = array();	$wp_broken_themes = array();	/* Loop the registered theme directories and extract all themes */	foreach ( (array) $wp_theme_directories as $theme_root ) {		$theme_loc = $theme_root;		/* We don't want to replace all forward slashes, see Trac #4541 */		if ( '/' != WP_CONTENT_DIR )			$theme_loc = str_replace(WP_CONTENT_DIR, '', $theme_root);		/* Files in the root of the current theme directory and one subdir down */		$themes_dir = @ opendir($theme_root);		if ( !$themes_dir )			return false;		while ( ($theme_dir = readdir($themes_dir)) !== false ) {			if ( is_dir($theme_root . '/' . $theme_dir) && is_readable($theme_root . '/' . $theme_dir) ) {				if ( $theme_dir{0} == '.' || $theme_dir == 'CVS' )					continue;				$stylish_dir = @opendir($theme_root . '/' . $theme_dir);				$found_stylesheet = false;				while ( ($theme_file = readdir($stylish_dir)) !== false ) {					if ( $theme_file == 'style.css' ) {						$theme_files[$theme_dir] = array( 'theme_file' => $theme_dir . '/' . $theme_file, 'theme_root' => $theme_root );						$found_stylesheet = true;						break;					}				}				@closedir($stylish_dir);				if ( !$found_stylesheet ) { // look for themes in that dir					$subdir = "$theme_root/$theme_dir";					$subdir_name = $theme_dir;					$theme_subdirs = @opendir( $subdir );					$found_subdir_themes = false;					while ( ($theme_subdir = readdir($theme_subdirs)) !== false ) {						if ( is_dir( $subdir . '/' . $theme_subdir) && is_readable($subdir . '/' . $theme_subdir) ) {							if ( $theme_subdir{0} == '.' || $theme_subdir == 'CVS' )								continue;							$stylish_dir = @opendir($subdir . '/' . $theme_subdir);							$found_stylesheet = false;							while ( ($theme_file = readdir($stylish_dir)) !== false ) {								if ( $theme_file == 'style.css' ) {									$theme_files["$theme_dir/$theme_subdir"] = array( 'theme_file' => $subdir_name . '/' . $theme_subdir . '/' . $theme_file, 'theme_root' => $theme_root );									$found_stylesheet = true;									$found_subdir_themes = true;									break;								}							}							@closedir($stylish_dir);						}					}					@closedir($theme_subdirs);					if ( !$found_subdir_themes )						$wp_broken_themes[$theme_dir] = array('Name' => $theme_dir, 'Title' => $theme_dir, 'Description' => __('Stylesheet is missing.'));				}			}		}		@closedir( $themes_dir );	}	return $theme_files;}/** * Retrieve path to themes directory. * * Does not have trailing slash. * * @since 1.5.0 * @param $stylesheet_or_template The stylesheet or template name of the theme * @uses apply_filters() Calls 'theme_root' filter on path. * * @return string Theme path. */function get_theme_root( $stylesheet_or_template = false ) {	if ($stylesheet_or_template) {		$theme_roots = get_theme_roots();		if ( ! empty( $theme_roots[$stylesheet_or_template] ) )			$theme_root = WP_CONTENT_DIR . $theme_roots[$stylesheet_or_template];		else			$theme_root = WP_CONTENT_DIR . '/themes';	} else {		$theme_root = WP_CONTENT_DIR . '/themes';	}	return apply_filters( 'theme_root', $theme_root );}/** * Retrieve URI for themes directory. * * Does not have trailing slash. * * @since 1.5.0 * @param $stylesheet_or_template The stylesheet or template name of the theme * * @return string Themes URI. */function get_theme_root_uri( $stylesheet_or_template = false ) {	$theme_roots = get_theme_roots();	if ( isset( $theme_roots[$stylesheet_or_template] ) && $theme_roots[$stylesheet_or_template] )		$theme_root_uri = content_url( $theme_roots[$stylesheet_or_template] );	else		$theme_root_uri = content_url( 'themes' );	return apply_filters( 'theme_root_uri', $theme_root_uri, get_option('siteurl'), $stylesheet_or_template );}/** * Retrieve path to file without the use of extension. * * Used to quickly retrieve the path of file without including the file * extension. It will also check the parent template, if the file exists, with * the use of {@link locate_template()}. Allows for more generic file location * without the use of the other get_*_template() functions. * * Can be used with include() or require() to retrieve path. * <code> * if( '' != get_query_template( '404' ) ) *     include( get_query_template( '404' ) ); * </code> * or the same can be accomplished with * <code> * if( '' != get_404_template() ) *     include( get_404_template() ); * </code> * * @since 1.5.0 * * @param string $type Filename without extension. * @return string Full path to file. */function get_query_template($type) {	$type = preg_replace( '|[^a-z0-9-]+|', '', $type );	return apply_filters("{$type}_template", locate_template(array("{$type}.php")));}/** * Retrieve path of index template in current or parent template. * * @since 3.0.0 * * @return string */function get_index_template() {	return get_query_template('index');}/** * Retrieve path of 404 template in current or parent template. * * @since 1.5.0 * * @return string */function get_404_template() {	return get_query_template('404');}/** * Retrieve path of archive template in current or parent template. * * @since 1.5.0 * * @return string */function get_archive_template() {	return get_query_template('archive');}/** * Retrieve path of author template in current or parent template. * * @since 1.5.0 * * @return string */function get_author_template() {	$author_id = absint( get_query_var( 'author' ) );	$author = get_user_by( 'id', $author_id );	$author = $author->user_nicename;	$templates = array();	if ( $author )		$templates[] = "author-{$author}.php";	if ( $author_id )		$templates[] = "author-{$author_id}.php";	$templates[] = 'author.php';	$template = locate_template( $templates );	return apply_filters( 'author_template', $template );}/** * Retrieve path of category template in current or parent template. * * Works by first retrieving the current slug for example 'category-default.php' and then * trying category ID, for example 'category-1.php' and will finally fallback to category.php * template, if those files don't exist. * * @since 1.5.0 * @uses apply_filters() Calls 'category_template' on file path of category template. * * @return string */function get_category_template() {	$cat_ID = absint( get_query_var('cat') );	$category = get_category( $cat_ID );	$templates = array();	if ( !is_wp_error($category) )		$templates[] = "category-{$category->slug}.php";	$templates[] = "category-$cat_ID.php";	$templates[] = "category.php";	$template = locate_template($templates);	return apply_filters('category_template', $template);}/** * Retrieve path of tag template in current or parent template. * * Works by first retrieving the current tag name, for example 'tag-wordpress.php' and then * trying tag ID, for example 'tag-1.php' and will finally fallback to tag.php * template, if those files don't exist. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_template' on file path of tag template. * * @return string */function get_tag_template() {	$tag_id = absint( get_query_var('tag_id') );	$tag_name = get_query_var('tag');	$templates = array();	if ( $tag_name )		$templates[] = "tag-$tag_name.php";	if ( $tag_id )		$templates[] = "tag-$tag_id.php";	$templates[] = "tag.php";	$template = locate_template($templates);	return apply_filters('tag_template', $template);}/** * Retrieve path of taxonomy template in current or parent template. * * Retrieves the taxonomy and term, if term is available. The template is * prepended with 'taxonomy-' and followed by both the taxonomy string and * the taxonomy string followed by a dash and then followed by the term. * * The taxonomy and term template is checked and used first, if it exists. * Second, just the taxonomy template is checked, and then finally, taxonomy.php * template is used. If none of the files exist, then it will fall back on to * index.php. * * @since unknown (2.6.0 most likely) * @uses apply_filters() Calls 'taxonomy_template' filter on found path. * * @return string */function get_taxonomy_template() {	$taxonomy = get_query_var('taxonomy');	$term = get_query_var('term');	$templates = array();	if ( $taxonomy && $term )		$templates[] = "taxonomy-$taxonomy-$term.php";	if ( $taxonomy )		$templates[] = "taxonomy-$taxonomy.php";	$templates[] = "taxonomy.php";	$template = locate_template($templates);	return apply_filters('taxonomy_template', $template);}/** * Retrieve path of date template in current or parent template. * * @since 1.5.0 * * @return string */function get_date_template() {	return get_query_template('date');}/** * Retrieve path of home template in current or parent template. * * This is the template used for the page containing the blog posts * * Attempts to locate 'home.php' first before falling back to 'index.php'. * * @since 1.5.0 * @uses apply_filters() Calls 'home_template' on file path of home template. * * @return string */function get_home_template() {	$template = locate_template(array('home.php', 'index.php'));	return apply_filters('home_template', $template);}/** * Retrieve path of front-page template in current or parent template. * * Looks for 'front-page.php'. * * @since 3.0.0 * @uses apply_filters() Calls 'front_page_template' on file path of template. * * @return string */function get_front_page_template() {	return apply_filters( 'front_page_template', locate_template( array('front-page.php') ) );}/** * Retrieve path of page template in current or parent template. * * Will first look for the specifically assigned page template * The will search for 'page-{slug}.php' followed by 'page-id.php' * and finally 'page.php' * * @since 1.5.0 * * @return string */function get_page_template() {	global $wp_query;	$id = (int) $wp_query->get_queried_object_id();	$template = get_post_meta($id, '_wp_page_template', true);	$pagename = get_query_var('pagename');	if ( !$pagename && $id > 0 ) {		// If a static page is set as the front page, $pagename will not be set. Retrieve it from the queried object		$post = $wp_query->get_queried_object();		$pagename = $post->post_name;	}	if ( 'default' == $template )		$template = '';	$templates = array();	if ( !empty($template) && !validate_file($template) )		$templates[] = $template;	if ( $pagename )		$templates[] = "page-$pagename.php";	if ( $id )		$templates[] = "page-$id.php";	$templates[] = "page.php";	return apply_filters('page_template', locate_template($templates));}/** * Retrieve path of paged template in current or parent template. * * @since 1.5.0 * * @return string */function get_paged_template() {	return get_query_template('paged');}/** * Retrieve path of search template in current or parent template. * * @since 1.5.0 * * @return string */function get_search_template() {	return get_query_template('search');}/** * Retrieve path of single template in current or parent template. * * @since 1.5.0 * * @return string */function get_single_template() {	global $wp_query;	$object = $wp_query->get_queried_object();	$templates = array('single-' . $object->post_type . '.php', 'single.php');	return apply_filters('single_template', locate_template($templates));}/** * Retrieve path of attachment template in current or parent template. * * The attachment path first checks if the first part of the mime type exists. * The second check is for the second part of the mime type. The last check is * for both types separated by an underscore. If neither are found then the file * 'attachment.php' is checked and returned. * * Some examples for the 'text/plain' mime type are 'text.php', 'plain.php', and * finally 'text_plain.php'. * * @since 2.0.0 * * @return string */function get_attachment_template() {	global $posts;	$type = explode('/', $posts[0]->post_mime_type);	if ( $template = get_query_template($type[0]) )		return $template;	elseif ( $template = get_query_template($type[1]) )		return $template;	elseif ( $template = get_query_template("$type[0]_$type[1]") )		return $template;	else		return get_query_template('attachment');}/** * Retrieve path of comment popup template in current or parent template. * * Checks for comment popup template in current template, if it exists or in the * parent template. * * @since 1.5.0 * @uses apply_filters() Calls 'comments_popup_template' filter on path. * * @return string */function get_comments_popup_template() {	$template = locate_template(array("comments-popup.php"));	// Backward compat code will be removed in a future release	if ('' == $template)		$template = WPINC . '/theme-compat/comments-popup.php';	return apply_filters('comments_popup_template', $template);}/** * Retrieve the name of the highest priority template file that exists. * * Searches in the STYLESHEETPATH before TEMPLATEPATH so that themes which * inherit from a parent theme can just overload one file. * * @since 2.7.0 * * @param array $template_names Array of template files to search for in priority order. * @param bool $load If true the template file will be loaded if it is found. * @param bool $require_once Whether to require_once or require. Default true. Has no effect if $load is false. * @return string The template filename if one is located. */function locate_template($template_names, $load = false, $require_once = true ) {	if ( !is_array($template_names) )		return '';	$located = '';	foreach ( $template_names as $template_name ) {		if ( !$template_name )			continue;		if ( file_exists(STYLESHEETPATH . '/' . $template_name)) {			$located = STYLESHEETPATH . '/' . $template_name;			break;		} else if ( file_exists(TEMPLATEPATH . '/' . $template_name) ) {			$located = TEMPLATEPATH . '/' . $template_name;			break;		}	}	if ( $load && '' != $located )		load_template( $located, $require_once );	return $located;}/** * Require the template file with WordPress environment. * * The globals are set up for the template file to ensure that the WordPress * environment is available from within the function. The query variables are * also available. * * @since 1.5.0 * * @param string $_template_file Path to template file. * @param bool $require_once Whether to require_once or require. Default true. */function load_template( $_template_file, $require_once = true ) {	global $posts, $post, $wp_did_header, $wp_did_template_redirect, $wp_query, $wp_rewrite, $wpdb, $wp_version, $wp, $id, $comment, $user_ID;	if ( is_array( $wp_query->query_vars ) )		extract( $wp_query->query_vars, EXTR_SKIP );	if ( $require_once )		require_once( $_template_file );	else		require( $_template_file );}/** * Display localized stylesheet link element. * * @since 2.1.0 */function locale_stylesheet() {	$stylesheet = get_locale_stylesheet_uri();	if ( empty($stylesheet) )		return;	echo '<link rel="stylesheet" href="' . $stylesheet . '" type="text/css" media="screen" />';}/** * Start preview theme output buffer. * * Will only preform task if the user has permissions and template and preview * query variables exist. * * @since 2.6.0 */function preview_theme() {	if ( ! (isset($_GET['template']) && isset($_GET['preview'])) )		return;	if ( !current_user_can( 'switch_themes' ) )		return;	$_GET['template'] = preg_replace('|[^a-z0-9_./-]|i', '', $_GET['template']);	if ( validate_file($_GET['template']) )		return;	add_filter( 'template', '_preview_theme_template_filter' );	if ( isset($_GET['stylesheet']) ) {		$_GET['stylesheet'] = preg_replace('|[^a-z0-9_./-]|i', '', $_GET['stylesheet']);		if ( validate_file($_GET['stylesheet']) )			return;		add_filter( 'stylesheet', '_preview_theme_stylesheet_filter' );	}	// Prevent theme mods to current theme being used on theme being previewed	add_filter( 'pre_option_mods_' . get_current_theme(), '__return_empty_array' );	ob_start( 'preview_theme_ob_filter' );}add_action('setup_theme', 'preview_theme');/** * Private function to modify the current template when previewing a theme * * @since 2.9.0 * @access private * * @return string */function _preview_theme_template_filter() {	return isset($_GET['template']) ? $_GET['template'] : '';}/** * Private function to modify the current stylesheet when previewing a theme * * @since 2.9.0 * @access private * * @return string */function _preview_theme_stylesheet_filter() {	return isset($_GET['stylesheet']) ? $_GET['stylesheet'] : '';}/** * Callback function for ob_start() to capture all links in the theme. * * @since 2.6.0 * @access private * * @param string $content * @return string */function preview_theme_ob_filter( $content ) {	return preg_replace_callback( "|(<a.*?href=([\"']))(.*?)([\"'].*?>)|", 'preview_theme_ob_filter_callback', $content );}/** * Manipulates preview theme links in order to control and maintain location. * * Callback function for preg_replace_callback() to accept and filter matches. * * @since 2.6.0 * @access private * * @param array $matches * @return string */function preview_theme_ob_filter_callback( $matches ) {	if ( strpos($matches[4], 'onclick') !== false )		$matches[4] = preg_replace('#onclick=([\'"]).*?(?<!\\\)\\1#i', '', $matches[4]); //Strip out any onclicks from rest of <a>. (?<!\\\) means to ignore the '" if its escaped by \  to prevent breaking mid-attribute.	if (		( false !== strpos($matches[3], '/wp-admin/') )	||		( false !== strpos( $matches[3], '://' ) && 0 !== strpos( $matches[3], home_url() ) )	||		( false !== strpos($matches[3], '/feed/') )	||		( false !== strpos($matches[3], '/trackback/') )	)		return $matches[1] . "#$matches[2] onclick=$matches[2]return false;" . $matches[4];	$link = add_query_arg( array('preview' => 1, 'template' => $_GET['template'], 'stylesheet' => @$_GET['stylesheet'] ), $matches[3] );	if ( 0 === strpos($link, 'preview=1') )		$link = "?$link";	return $matches[1] . esc_attr( $link ) . $matches[4];}/** * Switches current theme to new template and stylesheet names. * * @since unknown * @uses do_action() Calls 'switch_theme' action on updated theme display name. * * @param string $template Template name * @param string $stylesheet Stylesheet name. */function switch_theme($template, $stylesheet) {	update_option('template', $template);	update_option('stylesheet', $stylesheet);	delete_option('current_theme');	$theme = get_current_theme();	do_action('switch_theme', $theme);}/** * Checks that current theme files 'index.php' and 'style.css' exists. * * Does not check the default theme, which is the fallback and should always exist. * Will switch theme to the fallback theme if current theme does not validate. * You can use the 'validate_current_theme' filter to return FALSE to * disable this functionality. * * @since 1.5.0 * @see WP_DEFAULT_THEME * * @return bool */function validate_current_theme() {	// Don't validate during an install/upgrade.	if ( defined('WP_INSTALLING') || !apply_filters( 'validate_current_theme', true ) )		return true;	if ( get_template() != WP_DEFAULT_THEME && !file_exists(get_template_directory() . '/index.php') ) {		switch_theme( WP_DEFAULT_THEME, WP_DEFAULT_THEME );		return false;	}	if ( get_stylesheet() != WP_DEFAULT_THEME && !file_exists(get_template_directory() . '/style.css') ) {		switch_theme( WP_DEFAULT_THEME, WP_DEFAULT_THEME );		return false;	}	return true;}/** * Retrieve theme modification value for the current theme. * * If the modification name does not exist, then the $default will be passed * through {@link http://php.net/sprintf sprintf()} PHP function with the first * string the template directory URI and the second string the stylesheet * directory URI. * * @since 2.1.0 * @uses apply_filters() Calls 'theme_mod_$name' filter on the value. * * @param string $name Theme modification name. * @param bool|string $default * @return string */function get_theme_mod($name, $default = false) {	$theme = get_current_theme();	$mods = get_option( "mods_$theme" );	if ( isset($mods[$name]) )		return apply_filters( "theme_mod_$name", $mods[$name] );	return apply_filters( "theme_mod_$name", sprintf($default, get_template_directory_uri(), get_stylesheet_directory_uri()) );}/** * Update theme modification value for the current theme. * * @since 2.1.0 * * @param string $name Theme modification name. * @param string $value theme modification value. */function set_theme_mod($name, $value) {	$theme = get_current_theme();	$mods = get_option("mods_$theme");	$mods[$name] = $value;	update_option("mods_$theme", $mods);	wp_cache_delete("mods_$theme", 'options');}/** * Remove theme modification name from current theme list. * * If removing the name also removes all elements, then the entire option will * be removed. * * @since 2.1.0 * * @param string $name Theme modification name. * @return null */function remove_theme_mod( $name ) {	$theme = get_current_theme();	$mods = get_option("mods_$theme");	if ( !isset($mods[$name]) )		return;	unset($mods[$name]);	if ( empty($mods) )		return remove_theme_mods();	update_option("mods_$theme", $mods);	wp_cache_delete("mods_$theme", 'options');}/** * Remove theme modifications option for current theme. * * @since 2.1.0 */function remove_theme_mods() {	$theme = get_current_theme();	delete_option("mods_$theme");}/** * Retrieve text color for custom header. * * @since 2.1.0 * @uses HEADER_TEXTCOLOR * * @return string */function get_header_textcolor() {	$default = defined('HEADER_TEXTCOLOR') ? HEADER_TEXTCOLOR : '';	return get_theme_mod('header_textcolor', $default);}/** * Display text color for custom header. * * @since 2.1.0 */function header_textcolor() {	echo get_header_textcolor();}/** * Retrieve header image for custom header. * * @since 2.1.0 * @uses HEADER_IMAGE * * @return string */function get_header_image() {	$default = defined('HEADER_IMAGE') ? HEADER_IMAGE : '';	return get_theme_mod('header_image', $default);}/** * Display header image path. * * @since 2.1.0 */function header_image() {	echo get_header_image();}/** * Add callbacks for image header display. * * The parameter $header_callback callback will be required to display the * content for the 'wp_head' action. The parameter $admin_header_callback * callback will be added to Custom_Image_Header class and that will be added * to the 'admin_menu' action. * * @since 2.1.0 * @uses Custom_Image_Header Sets up for $admin_header_callback for administration panel display. * * @param callback $header_callback Call on 'wp_head' action. * @param callback $admin_header_callback Call on custom header administration screen. * @param callback $admin_image_div_callback Output a custom header image div on the custom header administration screen. Optional. */function add_custom_image_header($header_callback, $admin_header_callback, $admin_image_div_callback = '') {	if ( ! empty($header_callback) )		add_action('wp_head', $header_callback);	add_theme_support( 'custom-header' );	if ( ! is_admin() )		return;	require_once(ABSPATH . 'wp-admin/custom-header.php');	$GLOBALS['custom_image_header'] =& new Custom_Image_Header($admin_header_callback, $admin_image_div_callback);	add_action('admin_menu', array(&$GLOBALS['custom_image_header'], 'init'));}/** * Register a selection of default headers to be displayed by the custom header admin UI. * * @since 3.0.0 * * @param array $headers Array of headers keyed by a string id. The ids point to arrays containing 'url', 'thumbnail_url', and 'description' keys. */function register_default_headers( $headers ) {	global $_wp_default_headers;	$_wp_default_headers = array_merge( (array) $_wp_default_headers, (array) $headers );}/** * Unregister default headers. * * This function must be called after register_default_headers() has already added the * header you want to remove. * * @see register_default_headers() * @since 3.0.0 * * @param string|array The header string id (key of array) to remove, or an array thereof. * @return True on success, false on failure. */function unregister_default_headers( $header ) {	global $_wp_default_headers;	if ( is_array( $header ) ) {		array_map( 'unregister_default_headers', $header );	} elseif ( isset( $_wp_default_headers[ $header ] ) ) {		unset( $_wp_default_headers[ $header ] );		return true;	} else {		return false;	}}/** * Retrieve background image for custom background. * * @since 3.0.0 * * @return string */function get_background_image() {	$default = defined('BACKGROUND_IMAGE') ? BACKGROUND_IMAGE : '';	return get_theme_mod('background_image', $default);}/** * Display background image path. * * @since 3.0.0 */function background_image() {	echo get_background_image();}/** * Retrieve value for custom background color. * * @since 3.0.0 * @uses BACKGROUND_COLOR * * @return string */function get_background_color() {	$default = defined('BACKGROUND_COLOR') ? BACKGROUND_COLOR : '';	return get_theme_mod('background_color', $default);}/** * Display background color value. * * @since 3.0.0 */function background_color() {	echo get_background_color();}/** * Add callbacks for background image display. * * The parameter $header_callback callback will be required to display the * content for the 'wp_head' action. The parameter $admin_header_callback * callback will be added to Custom_Background class and that will be added * to the 'admin_menu' action. * * @since 3.0.0 * @uses Custom_Background Sets up for $admin_header_callback for administration panel display. * * @param callback $header_callback Call on 'wp_head' action. * @param callback $admin_header_callback Call on custom background administration screen. * @param callback $admin_image_div_callback Output a custom background image div on the custom background administration screen. Optional. */function add_custom_background($header_callback = '', $admin_header_callback = '', $admin_image_div_callback = '') {	if ( isset($GLOBALS['custom_background']) )		return;	if ( empty($header_callback) )		$header_callback = '_custom_background_cb';	add_action('wp_head', $header_callback);	add_theme_support( 'custom-background' );	if ( ! is_admin() )		return;	require_once(ABSPATH . 'wp-admin/custom-background.php');	$GLOBALS['custom_background'] =& new Custom_Background($admin_header_callback, $admin_image_div_callback);	add_action('admin_menu', array(&$GLOBALS['custom_background'], 'init'));}/** * Default custom background callback. * * @since 3.0.0 * @see add_custom_background() * @access protected */function _custom_background_cb() {	$background = get_background_image();	$color = get_background_color();	if ( ! $background && ! $color )		return;	$style = $color ? "background-color: #$color;" : '';	if ( $background ) {		$image = " background-image: url('$background');";		$repeat = get_theme_mod( 'background_repeat', 'repeat' );		if ( ! in_array( $repeat, array( 'no-repeat', 'repeat-x', 'repeat-y', 'repeat' ) ) )			$repeat = 'repeat';		$repeat = " background-repeat: $repeat;";		$position = get_theme_mod( 'background_position_x', 'left' );		if ( ! in_array( $position, array( 'center', 'right', 'left' ) ) )			$position = 'left';		$position = " background-position: top $position;";		$attachment = get_theme_mod( 'background_attachment', 'scroll' );		if ( ! in_array( $attachment, array( 'fixed', 'scroll' ) ) )			$attachment = 'scroll';		$attachment = " background-attachment: $attachment;";		$style .= $image . $repeat . $position . $attachment;	}?><style type="text/css">body { <?php echo trim( $style ); ?> }</style><?php}/** * Add callback for custom TinyMCE editor stylesheets. * * The parameter $stylesheet is the name of the stylesheet, relative to * the theme root. It also accepts an array of stylesheets. * It is optional and defaults to 'editor-style.css'. * * @since 3.0.0 * * @param mixed $stylesheet Optional. Stylesheet name or array thereof, relative to theme root. * 	Defaults to 'editor-style.css' */function add_editor_style( $stylesheet = 'editor-style.css' ) {	add_theme_support( 'editor-style' );	if ( ! is_admin() )		return;	global $editor_styles;	$editor_styles = (array) $editor_styles;	$stylesheet    = (array) $stylesheet;	if ( is_rtl() ) {		$rtl_stylesheet = str_replace('.css', '-rtl.css', $stylesheet[0]);		$stylesheet[] = $rtl_stylesheet;	}	$editor_styles = array_merge( $editor_styles, $stylesheet );}/** * Allows a theme to register its support of a certain feature * * Must be called in the theme's functions.php file to work. * If attached to a hook, it must be after_setup_theme. * The init hook may be too late for some features. * * @since 2.9.0 * @param string $feature the feature being added */function add_theme_support( $feature ) {	global $_wp_theme_features;	if ( func_num_args() == 1 )		$_wp_theme_features[$feature] = true;	else		$_wp_theme_features[$feature] = array_slice( func_get_args(), 1 );}/** * Allows a theme to de-register its support of a certain feature * * Should be called in the theme's functions.php file. Generally would * be used for child themes to override support from the parent theme. * * @since 3.0.0 * @see add_theme_support() * @param string $feature the feature being added * @return bool Whether feature was removed. */function remove_theme_support( $feature ) {	// Blacklist: for internal registrations not used directly by themes.	if ( in_array( $feature, array( 'custom-background', 'custom-header', 'editor-style', 'widgets' ) ) )		return false;	global $_wp_theme_features;	if ( ! isset( $_wp_theme_features[$feature] ) )		return false;	unset( $_wp_theme_features[$feature] );	return true;}/** * Checks a theme's support for a given feature * * @since 2.9.0 * @param string $feature the feature being checked * @return boolean */function current_theme_supports( $feature ) {	global $_wp_theme_features;	if ( !isset( $_wp_theme_features[$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 1 )		return true;	$args = array_slice( func_get_args(), 1 );	// @todo Allow pluggable arg checking	switch ( $feature ) {		case 'post-thumbnails':			// post-thumbnails can be registered for only certain content/post types by passing			// an array of types to add_theme_support().  If no array was passed, then			// any type is accepted			if ( true === $_wp_theme_features[$feature] )  // Registered for all types				return true;			$content_type = $args[0];			if ( in_array($content_type, $_wp_theme_features[$feature][0]) )				return true;			else				return false;			break;	}	return true;}/** * Checks a theme's support for a given feature before loading the functions which implement it. * * @since 2.9.0 * @param string $feature the feature being checked * @param string $include the file containing the functions that implement the feature */function require_if_theme_supports( $feature, $include) {	if ( current_theme_supports( $feature ) )		require ( $include );}/** * Checks an attachment being deleted to see if it's a header or background image. * * If true it removes the theme modification which would be pointing at the deleted * attachment * * @access private * @since 3.0.0 * @param int $id the attachment id */function _delete_attachment_theme_mod( $id ) {	$attachment_image = wp_get_attachment_url( $id );	$header_image = get_header_image();	$background_image = get_background_image();	if ( $header_image && $header_image == $attachment_image )		remove_theme_mod( 'header_image' );	if ( $background_image && $background_image == $attachment_image )		remove_theme_mod( 'background_image' );}add_action( 'delete_attachment', '_delete_attachment_theme_mod' );?>
<?php/** * WordPress Administration for Navigation Menus * Interface functions * * @version 2.0.0 * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once( 'admin.php' );// Load all the nav menu interface functionsrequire_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );if ( ! current_theme_supports( 'menus' ) && ! current_theme_supports( 'widgets' ) )	wp_die( __( 'Your theme does not support navigation menus or widgets.' ) );// Permissions Checkif ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );// Nav Menu CSSwp_admin_css( 'nav-menu' );// jQuerywp_enqueue_script( 'jquery' );wp_enqueue_script( 'jquery-ui-draggable' );wp_enqueue_script( 'jquery-ui-droppable' );wp_enqueue_script( 'jquery-ui-sortable' );// Nav Menu functionswp_enqueue_script( 'nav-menu' );// Metaboxeswp_enqueue_script( 'common' );wp_enqueue_script( 'wp-lists' );wp_enqueue_script( 'postbox' );// Container for any messages displayed to the user$messages = array();// Container that stores the name of the active menu$nav_menu_selected_title = '';// The menu id of the current menu being edited$nav_menu_selected_id = isset( $_REQUEST['menu'] ) ? (int) $_REQUEST['menu'] : 0;// Allowed actions: add, update, delete$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'edit';switch ( $action ) {	case 'add-menu-item':		check_admin_referer( 'add-menu_item', 'menu-settings-column-nonce' );		if ( isset( $_REQUEST['nav-menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_REQUEST['menu-locations'] ) );		elseif ( isset( $_REQUEST['menu-item'] ) )			wp_save_nav_menu_items( $nav_menu_selected_id, $_REQUEST['menu-item'] );		break;	case 'move-down-menu-item' :		// moving down a menu item is the same as moving up the next in order		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// get next in order				if (					isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1] )				) {					$next_item_id = $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1];					$next_item_data = (array) wp_setup_nav_menu_item( get_post( $next_item_id ) );					// if not siblings of same parent, bubble menu item up but keep order					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						(							empty( $next_item_data['menu_item_parent'] ) ||							$next_item_data['menu_item_parent'] != $menu_item_data['menu_item_parent']						)					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						}					// make menu item a child of its next sibling					} else {						$next_item_data['menu_order'] = $next_item_data['menu_order'] - 1;						$menu_item_data['menu_order'] = $menu_item_data['menu_order'] + 1;						$menu_item_data['menu_item_parent'] = $next_item_data['ID'];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);						wp_update_post($next_item_data);					}				// the item is last but still has a parent, so bubble up				} elseif (					! empty( $menu_item_data['menu_item_parent'] ) &&					in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids )				) {					$menu_item_data['menu_item_parent'] = (int) get_post_meta( $menu_item_data['menu_item_parent'], '_menu_item_menu_item_parent', true);					update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );				}			}		}		break;	case 'move-up-menu-item' :		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// if this menu item is not first				if ( ! empty( $dbids_to_orders[$menu_item_id] ) && ! empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ) {					// if this menu item is a child of the previous					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) &&						isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) &&						( $menu_item_data['menu_item_parent'] == $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] )					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							// if there is something before the parent and parent a child of it, make menu item a child also of it							if (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] ) &&								! empty( $parent_data['menu_item_parent'] )							) {								$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							// else if there is something before parent and parent not a child of it, make menu item a child of that something's parent							} elseif (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] )							) {								$_possible_parent_id = (int) get_post_meta( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1], '_menu_item_menu_item_parent', true);								if ( in_array( $_possible_parent_id, array_keys( $dbids_to_orders ) ) )									$menu_item_data['menu_item_parent'] = $_possible_parent_id;								else									$menu_item_data['menu_item_parent'] = 0;							// else there isn't something before the parent							} else {								$menu_item_data['menu_item_parent'] = 0;							}							// set former parent's [menu_order] to that of menu-item's							$parent_data['menu_order'] = $parent_data['menu_order'] + 1;							// set menu-item's [menu_order] to that of former parent							$menu_item_data['menu_order'] = $menu_item_data['menu_order'] - 1;							// save changes							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );							wp_update_post($menu_item_data);							wp_update_post($parent_data);						}					// else this menu item is not a child of the previous					} elseif (						empty( $menu_item_data['menu_order'] ) ||						empty( $menu_item_data['menu_item_parent'] ) ||						! in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) ||						empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ||						$orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] != $menu_item_data['menu_item_parent']					) {						// just make it a child of the previous; keep the order						$menu_item_data['menu_item_parent'] = (int) $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);					}				}			}		}		break;	case 'delete-menu-item':		$menu_item_id = (int) $_REQUEST['menu-item'];		check_admin_referer( 'delete-menu_item_' . $menu_item_id );		if ( is_nav_menu_item( $menu_item_id ) && wp_delete_post( $menu_item_id, true ) )			$messages[] = '<div id="message" class="updated"><p>' . __('The menu item has been successfully deleted.') . '</p></div>';		break;	case 'delete':		check_admin_referer( 'delete-nav_menu-' . $nav_menu_selected_id );		if ( is_nav_menu( $nav_menu_selected_id ) ) {			$deleted_nav_menu = wp_get_nav_menu_object( $nav_menu_selected_id );			$delete_nav_menu = wp_delete_nav_menu( $nav_menu_selected_id );			if ( is_wp_error($delete_nav_menu) ) {				$messages[] = '<div id="message" class="error"><p>' . $delete_nav_menu->get_error_message() . '</p></div>';			} else {				// Remove this menu from any locations.				$locations = get_theme_mod( 'nav_menu_locations' );				foreach ( (array) $locations as $location => $menu_id ) {					if ( $menu_id == $nav_menu_selected_id )						$locations[ $location ] = 0;				}				set_theme_mod( 'nav_menu_locations', $locations );				$messages[] = '<div id="message" class="updated"><p>' . __('The menu has been successfully deleted.') . '</p></div>';				// Select the next available menu				$nav_menu_selected_id = 0;				$_nav_menus = wp_get_nav_menus( array('orderby' => 'name') );				foreach( $_nav_menus as $index => $_nav_menu ) {					if ( strcmp( $_nav_menu->name, $deleted_nav_menu->name ) >= 0					 || $index == count( $_nav_menus ) - 1 ) {						$nav_menu_selected_id = $_nav_menu->term_id;						break;					}				}			}			unset( $delete_nav_menu, $deleted_nav_menu, $_nav_menus );		} else {			// Reset the selected menu			$nav_menu_selected_id = 0;			unset( $_REQUEST['menu'] );		}		break;	case 'update':		check_admin_referer( 'update-nav_menu', 'update-nav-menu-nonce' );		// Update menu theme locations		if ( isset( $_POST['menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );		// Add Menu		if ( 0 == $nav_menu_selected_id ) {			$new_menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( $new_menu_title ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( 0, array('menu-name' => $new_menu_title) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					if ( ( $_menu_locations = get_registered_nav_menus() ) && 1 == count( wp_get_nav_menus() ) )						set_theme_mod( 'nav_menu_locations', array( key( $_menu_locations ) => $_nav_menu_selected_id ) );					unset( $_menu_locations );					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_id = $_nav_menu_selected_id;					$nav_menu_selected_title = $_menu_object->name;					$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been successfully created.'), $nav_menu_selected_title ) . '</p></div>';				}			} else {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';			}		// update existing menu		} else {			$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );			$menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( ! $menu_title ) {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';				$menu_title = $_menu_object->name;			}			if ( ! is_wp_error( $_menu_object ) ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( $nav_menu_selected_id, array( 'menu-name' => $menu_title ) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$_menu_object = $_nav_menu_selected_id;					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_title = $_menu_object->name;				}			}			// Update menu items			if ( ! is_wp_error( $_menu_object ) ) {				$unsorted_menu_items = wp_get_nav_menu_items( $nav_menu_selected_id, array('orderby' => 'ID', 'output' => ARRAY_A, 'output_key' => 'ID', 'post_status' => 'draft,publish') );				$menu_items = array();				// Index menu items by db ID				foreach( $unsorted_menu_items as $_item )					$menu_items[$_item->db_id] = $_item;				$post_fields = array( 'menu-item-db-id', 'menu-item-object-id', 'menu-item-object', 'menu-item-parent-id', 'menu-item-position', 'menu-item-type', 'menu-item-title', 'menu-item-url', 'menu-item-description', 'menu-item-attr-title', 'menu-item-target', 'menu-item-classes', 'menu-item-xfn' );				wp_defer_term_counting(true);				// Loop through all the menu items' POST variables				if ( ! empty( $_POST['menu-item-db-id'] ) ) {					foreach( (array) $_POST['menu-item-db-id'] as $_key => $k ) {						// Menu item title can't be blank						if ( empty( $_POST['menu-item-title'][$_key] ) )							continue;						$args = array();						foreach ( $post_fields as $field )							$args[$field] = isset( $_POST[$field][$_key] ) ? $_POST[$field][$_key] : '';						$menu_item_db_id = wp_update_nav_menu_item( $nav_menu_selected_id, ( $_POST['menu-item-db-id'][$_key] != $_key ? 0 : $_key ), $args );						if ( is_wp_error( $menu_item_db_id ) )							$messages[] = '<div id="message" class="error"><p>' . $menu_item_db_id->get_error_message() . '</p></div>';						elseif ( isset( $menu_items[$menu_item_db_id] ) )							unset( $menu_items[$menu_item_db_id] );					}				}				// Remove menu items from the menu that weren't in $_POST				if ( ! empty( $menu_items ) ) {					foreach ( array_keys( $menu_items ) as $menu_item_id ) {						if ( is_nav_menu_item( $menu_item_id ) ) {							wp_delete_post( $menu_item_id );						}					}				}				// Store 'auto-add' pages.				$auto_add = ! empty( $_POST['auto-add-pages'] );				$nav_menu_option = (array) get_option( 'nav_menu_options' );				if ( ! isset( $nav_menu_option['auto_add'] ) )					$nav_menu_option['auto_add'] = array();				if ( $auto_add ) {					if ( ! in_array( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) )						$nav_menu_option['auto_add'][] = $nav_menu_selected_id;				} else {					if ( false !== ( $key = array_search( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) ) )						unset( $nav_menu_option['auto_add'][$key] );				}				// Remove nonexistent/deleted menus				$nav_menu_option['auto_add'] = array_intersect( $nav_menu_option['auto_add'], wp_get_nav_menus( array( 'fields' => 'ids' ) ) );				update_option( 'nav_menu_options', $nav_menu_option );				wp_defer_term_counting(false);				do_action( 'wp_update_nav_menu', $nav_menu_selected_id );				$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been updated.'), $nav_menu_selected_title ) . '</p></div>';				unset( $menu_items, $unsorted_menu_items );			}		}		break;}// Get all nav menus$nav_menus = wp_get_nav_menus( array('orderby' => 'name') );// Get recently edited nav menu$recently_edited = (int) get_user_option( 'nav_menu_recently_edited' );// If there was no recently edited menu, and $nav_menu_selected_id is a nav menu, update recently edited menu.if ( !$recently_edited && is_nav_menu( $nav_menu_selected_id ) ) {	$recently_edited = $nav_menu_selected_id;// Else if $nav_menu_selected_id is not a menu and not requesting that we create a new menu, but $recently_edited is a menu, grab that one.} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && is_nav_menu( $recently_edited ) ) {	$nav_menu_selected_id = $recently_edited;// Else try to grab the first menu from the menus list} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && ! empty($nav_menus) ) {	$nav_menu_selected_id = $nav_menus[0]->term_id;}// Update the user's settingif ( $nav_menu_selected_id != $recently_edited && is_nav_menu( $nav_menu_selected_id ) )	update_user_meta( $current_user->ID, 'nav_menu_recently_edited', $nav_menu_selected_id );// If there's a menu, get its name.if ( ! $nav_menu_selected_title && is_nav_menu( $nav_menu_selected_id ) ) {	$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );	$nav_menu_selected_title = ! is_wp_error( $_menu_object ) ? $_menu_object->name : '';}// Generate truncated menu namesforeach( (array) $nav_menus as $key => $_nav_menu ) {	$_nav_menu->truncated_name = trim( wp_html_excerpt( $_nav_menu->name, 40 ) );	if ( $_nav_menu->truncated_name != $_nav_menu->name )		$_nav_menu->truncated_name .= '&hellip;';	$nav_menus[$key]->truncated_name = $_nav_menu->truncated_name;}// Ensure the user will be able to scroll horizontally// by adding a class for the max menu depth.global $_wp_nav_menu_max_depth;$_wp_nav_menu_max_depth = 0;// Calling wp_get_nav_menu_to_edit generates $_wp_nav_menu_max_depthif ( is_nav_menu( $nav_menu_selected_id ) )	$edit_markup = wp_get_nav_menu_to_edit( $nav_menu_selected_id  );function wp_nav_menu_max_depth() {	global $_wp_nav_menu_max_depth;	return "menu-max-depth-$_wp_nav_menu_max_depth";}add_action('admin_body_class','wp_nav_menu_max_depth');wp_nav_menu_setup();wp_initial_nav_menu_meta_boxes();if ( ! current_theme_supports( 'menus' ) && ! wp_get_nav_menus() )	echo '<div id="message" class="updated"><p>' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p></div>';$help =  '<p>' . __('This feature is new in version 3.0; to use a custom menu in place of your theme&#8217;s default menus, support for this feature must be registered in the theme&#8217;s functions.php file. If your theme does not support the custom menus feature yet (the new default theme, Twenty Ten, does), you can learn about adding support yourself by following the below link.') . '</p>';$help .= '<p>' . __('You can create custom menus for your site. These menus may contain links to pages, categories, custom links or other content types (use the Screen Options tab to decide which ones to show on the screen). You can specify a different navigation label for a menu item as well as other attributes. You can create multiple menus. If your theme includes more than one menu, you can choose which custom menu to associate with each. You can also use custom menus in conjunction with the Custom Menus widget.') . '</p>';$help .= '<p>' . __('To create a new custom menu, click on the + tab, give the menu a name, and click Create Menu. Next, add menu items from the appropriate boxes. You&#8217;ll be able to edit the information for each menu item, and can drag and drop to put them in order. You can also drag a menu item a little to the right to make it a submenu, to create menus with hierarchy. You&#8217;ll see when the position of the drop target shifts over to create the nested placement. Don&#8217;t forget to click Save when you&#8217;re finished.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Menus_SubPanel" target="_blank">Menus Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// Get the admin headerrequire_once( 'admin-header.php' );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e('Menus'); ?></h2>	<?php	foreach( $messages as $message ) :		echo $message . "\n";	endforeach;	?>	<div id="nav-menus-frame">	<div id="menu-settings-column" class="metabox-holder<?php if ( !$nav_menu_selected_id ) { echo ' metabox-holder-disabled'; } ?>">		<form id="nav-menu-meta" action="<?php echo admin_url( 'nav-menus.php' ); ?>" class="nav-menu-meta" method="post" enctype="multipart/form-data">			<input type="hidden" name="menu" id="nav-menu-meta-object-id" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />			<input type="hidden" name="action" value="add-menu-item" />			<?php wp_nonce_field( 'add-menu_item', 'menu-settings-column-nonce' ); ?>			<?php do_meta_boxes( 'nav-menus', 'side', null ); ?>		</form>	</div><!-- /#menu-settings-column -->	<div id="menu-management-liquid">		<div id="menu-management">			<div id="select-nav-menu-container" class="hide-if-js">				<form id="select-nav-menu" action="">					<strong><label for="select-nav-menu"><?php esc_html_e( 'Select Menu:' ); ?></label></strong>					<select class="select-nav-menu" name="menu">						<?php foreach( (array) $nav_menus as $_nav_menu ) : ?>							<option value="<?php echo esc_attr($_nav_menu->term_id) ?>" <?php selected($nav_menu_selected_id, $_nav_menu->term_id); ?>>								<?php echo esc_html( $_nav_menu->truncated_name ); ?>							</option>						<?php endforeach; ?>						<option value="0"><?php esc_html_e('Add New Menu'); ?></option>					</select>					<input type="hidden" name="action" value="edit" />					<input class="button-secondary" name="select_menu" type="submit" value="<?php esc_attr_e('Select'); ?>" />				</form>			</div>			<div class="nav-tabs-wrapper">			<div class="nav-tabs">				<?php				foreach( (array) $nav_menus as $_nav_menu ) :					if ( $nav_menu_selected_id == $_nav_menu->term_id ) : ?><span class="nav-tab nav-tab-active">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</span><?php else : ?><a href="<?php							echo esc_url(add_query_arg(								array(									'action' => 'edit',									'menu' => $_nav_menu->term_id,								),								admin_url( 'nav-menus.php' )							));						?>" class="nav-tab hide-if-no-js">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</a><?php endif;				endforeach;				if ( 0 == $nav_menu_selected_id ) : ?><span class="nav-tab menu-add-new nav-tab-active">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</span><?php else : ?><a href="<?php					echo esc_url(add_query_arg(						array(							'action' => 'edit',							'menu' => 0,						),						admin_url( 'nav-menus.php' )					));				?>" class="nav-tab menu-add-new">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</a><?php endif; ?>			</div>			</div>			<div class="menu-edit">				<form id="update-nav-menu" action="<?php echo admin_url( 'nav-menus.php' ); ?>" method="post" enctype="multipart/form-data">					<div id="nav-menu-header">						<div id="submitpost" class="submitbox">							<div class="major-publishing-actions">								<label class="menu-name-label howto open-label" for="menu-name">									<span><?php _e('Menu Name'); ?></span>									<input name="menu-name" id="menu-name" type="text" class="menu-name regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Enter menu name here'); ?>" value="<?php echo esc_attr( $nav_menu_selected_title  ); ?>" />								</label>								<?php if ( !empty( $nav_menu_selected_id ) ) :									if ( ! isset( $auto_add ) ) {										$auto_add = get_option( 'nav_menu_options' );										if ( ! isset( $auto_add['auto_add'] ) )											$auto_add = false;										elseif ( false !== array_search( $nav_menu_selected_id, $auto_add['auto_add'] ) )											$auto_add = true;										else											$auto_add = false;									}								?>								<div class="auto-add-pages">									<label class="howto"><input type="checkbox"<?php checked( $auto_add ); ?> name="auto-add-pages" value="1" /> <?php printf( __('Automatically add new top-level pages' ), esc_url( admin_url( 'edit.php?post_type=page' ) ) ); ?></label>								</div>								<?php endif; ?>								<br class="clear" />								<div class="publishing-action">									<input class="button-primary menu-save" name="save_menu" type="submit" value="<?php empty($nav_menu_selected_id) ? esc_attr_e('Create Menu') : esc_attr_e('Save Menu'); ?>" />								</div><!-- END .publishing-action -->								<?php if ( ! empty( $nav_menu_selected_id ) ) : ?>								<div class="delete-action">									<a class="submitdelete deletion menu-delete" href="<?php echo esc_url( wp_nonce_url( admin_url('nav-menus.php?action=delete&amp;menu=' . $nav_menu_selected_id), 'delete-nav_menu-' . $nav_menu_selected_id ) ); ?>"><?php _e('Delete Menu'); ?></a>								</div><!-- END .delete-action -->								<?php endif; ?>							</div><!-- END .major-publishing-actions -->						</div><!-- END #submitpost .submitbox -->						<?php						wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );						wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );						wp_nonce_field( 'update-nav_menu', 'update-nav-menu-nonce' );						?>						<input type="hidden" name="action" value="update" />						<input type="hidden" name="menu" id="menu" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />					</div><!-- END #nav-menu-header -->					<div id="post-body">						<div id="post-body-content">							<?php							if ( isset( $edit_markup ) ) {								if ( ! is_wp_error( $edit_markup ) )									echo $edit_markup;							} else if ( empty( $nav_menu_selected_id ) ) {								echo '<div class="post-body-plain">';								echo '<p>' . __('To create a custom menu, give it a name above and click Create Menu. Then choose items like pages, categories or custom links from the left column to add to this menu.') . '</p>';								echo '<p>' . __('After you have added your items, drag and drop to put them in the order you want. You can also click each item to reveal additional configuration options.') . '</p>';								echo '<p>' . __('When you have finished building your custom menu, make sure you click the Save Menu button.') . '</p>';								echo '</div>';							}							?>						</div><!-- /#post-body-content -->					</div><!-- /#post-body -->				</form><!-- /#update-nav-menu -->			</div><!-- /.menu-edit -->		</div><!-- /#menu-management -->	</div><!-- /#menu-management-liquid -->	</div><!-- /#nav-menus-frame --></div><!-- /.wrap--><?php include( 'admin-footer.php' ); ?>
<?php/** * Canonical API to handle WordPress Redirecting * * Based on "Permalink Redirect" from Scott Yang and "Enforce www. Preference" * by Mark Jaquith * * @package WordPress * @since 2.3.0 *//** * Redirects incoming links to the proper URL based on the site url. * * Search engines consider www.somedomain.com and somedomain.com to be two * different URLs when they both go to the same location. This SEO enhancement * prevents penality for duplicate content by redirecting all incoming links to * one or the other. * * Prevents redirection for feeds, trackbacks, searches, comment popup, and * admin URLs. Does not redirect on IIS, page/post previews, and on form data. * * Will also attempt to find the correct link when a user enters a URL that does * not exist based on exact WordPress query. Will instead try to parse the URL * or query in an attempt to figure the correct page to go to. * * @since 2.3.0 * @uses $wp_rewrite * @uses $is_IIS * * @param string $requested_url Optional. The URL that was requested, used to *		figure if redirect is needed. * @param bool $do_redirect Optional. Redirect to the new URL. * @return null|false|string Null, if redirect not needed. False, if redirect *		not needed or the string of the URL */function redirect_canonical($requested_url=null, $do_redirect=true) {	global $wp_rewrite, $is_IIS, $wp_query, $wpdb;	if ( is_trackback() || is_search() || is_comments_popup() || is_admin() || $is_IIS || ( isset($_POST) && count($_POST) ) || is_preview() || is_robots() )		return;	if ( !$requested_url ) {		// build the URL in the address bar		$requested_url  = is_ssl() ? 'https://' : 'http://';		$requested_url .= $_SERVER['HTTP_HOST'];		$requested_url .= $_SERVER['REQUEST_URI'];	}	$original = @parse_url($requested_url);	if ( false === $original )		return;	// Some PHP setups turn requests for / into /index.php in REQUEST_URI	// See: http://trac.wordpress.org/ticket/5017	// See: http://trac.wordpress.org/ticket/7173	// Disabled, for now:	// $original['path'] = preg_replace('|/index\.php$|', '/', $original['path']);	$redirect = $original;	$redirect_url = false;	// Notice fixing	if ( !isset($redirect['path']) )		$redirect['path'] = '';	if ( !isset($redirect['query']) )		$redirect['query'] = '';	if ( is_singular() && 1 > $wp_query->post_count && ($id = get_query_var('p')) ) {		$vars = $wpdb->get_results( $wpdb->prepare("SELECT post_type, post_parent FROM $wpdb->posts WHERE ID = %d", $id) );		if ( isset($vars[0]) && $vars = $vars[0] ) {			if ( 'revision' == $vars->post_type && $vars->post_parent > 0 )				$id = $vars->post_parent;			if ( $redirect_url = get_permalink($id) )				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);		}	}	// These tests give us a WP-generated permalink	if ( is_404() ) {		// Redirect ?page_id, ?p=, ?attachment_id= to their respective url's		$id = max( get_query_var('p'), get_query_var('page_id'), get_query_var('attachment_id') );		if ( $id && $redirect_post = get_post($id) ) {			$post_type_obj = get_post_type_object($redirect_post->post_type);			if ( $post_type_obj->public ) {				$redirect_url = get_permalink($redirect_post);				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);			}		}		if ( ! $redirect_url )			$redirect_url = redirect_guess_404_permalink();	} elseif ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() ) {		// rewriting of old ?p=X, ?m=2004, ?m=200401, ?m=20040101		if ( is_attachment() && !empty($_GET['attachment_id']) && ! $redirect_url ) {			if ( $redirect_url = get_attachment_link(get_query_var('attachment_id')) )				$redirect['query'] = remove_query_arg('attachment_id', $redirect['query']);		} elseif ( is_single() && !empty($_GET['p']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('p')) )				$redirect['query'] = remove_query_arg(array('p', 'post_type'), $redirect['query']);			if ( get_query_var( 'page' ) ) {				$redirect_url = trailingslashit( $redirect_url ) . user_trailingslashit( get_query_var( 'page' ), 'single_paged' );				$redirect['query'] = remove_query_arg( 'page', $redirect['query'] );			}		} elseif ( is_single() && !empty($_GET['name'])  && ! $redirect_url ) {			if ( $redirect_url = get_permalink( $wp_query->get_queried_object_id() ) )				$redirect['query'] = remove_query_arg('name', $redirect['query']);		} elseif ( is_page() && !empty($_GET['page_id']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('page_id')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( is_page() && !is_feed() && isset($wp_query->queried_object) && 'page' == get_option('show_on_front') && $wp_query->queried_object->ID == get_option('page_on_front')  && ! $redirect_url ) {			$redirect_url = home_url('/');		} elseif ( is_home() && !empty($_GET['page_id']) && 'page' == get_option('show_on_front') && get_query_var('page_id') == get_option('page_for_posts')  && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_option('page_for_posts')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( !empty($_GET['m']) && ( is_year() || is_month() || is_day() ) ) {			$m = get_query_var('m');			switch ( strlen($m) ) {				case 4: // Yearly					$redirect_url = get_year_link($m);					break;				case 6: // Monthly					$redirect_url = get_month_link( substr($m, 0, 4), substr($m, 4, 2) );					break;				case 8: // Daily					$redirect_url = get_day_link(substr($m, 0, 4), substr($m, 4, 2), substr($m, 6, 2));					break;			}			if ( $redirect_url )				$redirect['query'] = remove_query_arg('m', $redirect['query']);		// now moving on to non ?m=X year/month/day links		} elseif ( is_day() && get_query_var('year') && get_query_var('monthnum') && !empty($_GET['day']) ) {			if ( $redirect_url = get_day_link(get_query_var('year'), get_query_var('monthnum'), get_query_var('day')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum', 'day'), $redirect['query']);		} elseif ( is_month() && get_query_var('year') && !empty($_GET['monthnum']) ) {			if ( $redirect_url = get_month_link(get_query_var('year'), get_query_var('monthnum')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum'), $redirect['query']);		} elseif ( is_year() && !empty($_GET['year']) ) {			if ( $redirect_url = get_year_link(get_query_var('year')) )				$redirect['query'] = remove_query_arg('year', $redirect['query']);		} elseif ( is_author() && !empty($_GET['author']) && preg_match( '|^[0-9]+$|', $_GET['author'] ) ) {			$author = get_userdata(get_query_var('author'));			if ( false !== $author && $redirect_url = get_author_posts_url($author->ID, $author->user_nicename) )				$redirect['query'] = remove_query_arg('author', $redirect['query']);		} elseif ( is_category() || is_tag() || is_tax() ) { // Terms (Tags/categories)			$term_count = 0;			foreach ( array('category__in', 'category__not_in', 'category__and', 'post__in', 'post__not_in',			'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and') as $key )				$term_count += count($wp_query->query_vars[$key]);			$obj = $wp_query->get_queried_object();			if ( $term_count <= 1 && !empty($obj->term_id) && ( $tax_url = get_term_link((int)$obj->term_id, $obj->taxonomy) ) && !is_wp_error($tax_url) ) {				if ( is_category() ) {					$redirect['query'] = remove_query_arg( array( 'category_name', 'category', 'cat'), $redirect['query']);				} elseif ( is_tag() ) {					$redirect['query'] = remove_query_arg( array( 'tag', 'tag_id'), $redirect['query']);				} elseif ( is_tax() ) { // Custom taxonomies will have a custom query var, remove those too:					$tax = get_taxonomy( $obj->taxonomy );					if ( false !== $tax->query_var)						$redirect['query'] = remove_query_arg($tax->query_var, $redirect['query']);					else						$redirect['query'] = remove_query_arg( array( 'term', 'taxonomy'), $redirect['query']);				}				$tax_url = parse_url($tax_url);				if ( ! empty($tax_url['query']) ) { // Custom taxonomies may only be accessable via ?taxonomy=..&term=..					parse_str($tax_url['query'], $query_vars);					$redirect['query'] = add_query_arg($query_vars, $redirect['query']);				} else { // Taxonomy is accessable via a "pretty-URL"					$redirect['path'] = $tax_url['path'];				}			}		} elseif ( is_single() && strpos($wp_rewrite->permalink_structure, '%category%') !== false ) {			$category = get_term_by('slug', get_query_var('category_name'), 'category');			$post_terms = wp_get_object_terms($wp_query->get_queried_object_id(), 'category', array('fields' => 'tt_ids'));			if ( (!$category || is_wp_error($category)) || ( !is_wp_error($post_terms) && !empty($post_terms) && !in_array($category->term_taxonomy_id, $post_terms) ) )				$redirect_url = get_permalink($wp_query->get_queried_object_id());		}		// paging and feeds		if ( get_query_var('paged') || is_feed() || get_query_var('cpage') ) {			if ( !$redirect_url )				$redirect_url = $requested_url;			$paged_redirect = @parse_url($redirect_url);			while ( preg_match( '#/page/?[0-9]+?(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/(comments/?)?(feed|rss|rdf|atom|rss2)(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/comment-page-[0-9]+(/+)?$#', $paged_redirect['path'] ) ) {				// Strip off paging and feed				$paged_redirect['path'] = preg_replace('#/page/?[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing paging				$paged_redirect['path'] = preg_replace('#/(comments/?)?(feed|rss2?|rdf|atom)(/+|$)#', '/', $paged_redirect['path']); // strip off feed endings				$paged_redirect['path'] = preg_replace('#/comment-page-[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing comment paging			}			$addl_path = '';			if ( is_feed() ) {				$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';				if ( get_query_var( 'withcomments' ) )					$addl_path .= 'comments/';				$addl_path .= user_trailingslashit( 'feed/' . ( ( get_default_feed() ==  get_query_var('feed') || 'feed' == get_query_var('feed') ) ? '' : get_query_var('feed') ), 'feed' );				$redirect['query'] = remove_query_arg( 'feed', $redirect['query'] );			}			if ( get_query_var('paged') > 0 ) {				$paged = get_query_var('paged');				$redirect['query'] = remove_query_arg( 'paged', $redirect['query'] );				if ( !is_feed() ) {					if ( $paged > 1 && !is_single() ) {						$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit("page/$paged", 'paged');					} elseif ( !is_single() ) {						$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';					}				} elseif ( $paged > 1 ) {					$redirect['query'] = add_query_arg( 'paged', $paged, $redirect['query'] );				}			}			if ( get_option('page_comments') && ( ( 'newest' == get_option('default_comments_page') && get_query_var('cpage') > 0 ) || ( 'newest' != get_option('default_comments_page') && get_query_var('cpage') > 1 ) ) ) {				$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit( 'comment-page-' . get_query_var('cpage'), 'commentpaged' );				$redirect['query'] = remove_query_arg( 'cpage', $redirect['query'] );			}			$paged_redirect['path'] = user_trailingslashit( preg_replace('|/index.php/?$|', '/', $paged_redirect['path']) ); // strip off trailing /index.php/			if ( !empty( $addl_path ) && $wp_rewrite->using_index_permalinks() && strpos($paged_redirect['path'], '/index.php/') === false )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . 'index.php/';			if ( !empty( $addl_path ) )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . $addl_path;			$redirect_url = $paged_redirect['scheme'] . '://' . $paged_redirect['host'] . $paged_redirect['path'];			$redirect['path'] = $paged_redirect['path'];		}	}	// tack on any additional query vars	$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	if ( $redirect_url && !empty($redirect['query']) ) {		if ( strpos($redirect_url, '?') !== false )			$redirect_url .= '&';		else			$redirect_url .= '?';		$redirect_url .= $redirect['query'];	}	if ( $redirect_url )		$redirect = @parse_url($redirect_url);	// www.example.com vs example.com	$user_home = @parse_url(home_url());	if ( !empty($user_home['host']) )		$redirect['host'] = $user_home['host'];	if ( empty($user_home['path']) )		$user_home['path'] = '/';	// Handle ports	if ( !empty($user_home['port']) )		$redirect['port'] = $user_home['port'];	else		unset($redirect['port']);	// trailing /index.php	$redirect['path'] = preg_replace('|/index.php/*?$|', '/', $redirect['path']);	// Remove trailing spaces from the path	$redirect['path'] = preg_replace( '#(%20| )+$#', '', $redirect['path'] );	if ( !empty( $redirect['query'] ) ) {		// Remove trailing spaces from certain terminating query string args		$redirect['query'] = preg_replace( '#((p|page_id|cat|tag)=[^&]*?)(%20| )+$#', '$1', $redirect['query'] );		// Clean up empty query strings		$redirect['query'] = trim(preg_replace( '#(^|&)(p|page_id|cat|tag)=?(&|$)#', '&', $redirect['query']), '&');		// Remove redundant leading ampersands		$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	}	// strip /index.php/ when we're not using PATHINFO permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$redirect['path'] = str_replace('/index.php/', '/', $redirect['path']);	// trailing slashes	if ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() && !is_404() && (!is_front_page() || ( is_front_page() && (get_query_var('paged') > 1) ) ) ) {		$user_ts_type = '';		if ( get_query_var('paged') > 0 ) {			$user_ts_type = 'paged';		} else {			foreach ( array('single', 'category', 'page', 'day', 'month', 'year', 'home') as $type ) {				$func = 'is_' . $type;				if ( call_user_func($func) ) {					$user_ts_type = $type;					break;				}			}		}		$redirect['path'] = user_trailingslashit($redirect['path'], $user_ts_type);	} elseif ( is_front_page() ) {		$redirect['path'] = trailingslashit($redirect['path']);	}	// Strip multiple slashes out of the URL	if ( strpos($redirect['path'], '//') > -1 )		$redirect['path'] = preg_replace('|/+|', '/', $redirect['path']);	// Always trailing slash the Front Page URL	if ( trailingslashit( $redirect['path'] ) == trailingslashit( $user_home['path'] ) )		$redirect['path'] = trailingslashit($redirect['path']);	// Ignore differences in host capitalization, as this can lead to infinite redirects	// Only redirect no-www <=> yes-www	if ( strtolower($original['host']) == strtolower($redirect['host']) ||		( strtolower($original['host']) != 'www.' . strtolower($redirect['host']) && 'www.' . strtolower($original['host']) != strtolower($redirect['host']) ) )		$redirect['host'] = $original['host'];	$compare_original = array($original['host'], $original['path']);	if ( !empty( $original['port'] ) )		$compare_original[] = $original['port'];	if ( !empty( $original['query'] ) )		$compare_original[] = $original['query'];	$compare_redirect = array($redirect['host'], $redirect['path']);	if ( !empty( $redirect['port'] ) )		$compare_redirect[] = $redirect['port'];	if ( !empty( $redirect['query'] ) )		$compare_redirect[] = $redirect['query'];	if ( $compare_original !== $compare_redirect ) {		$redirect_url = $redirect['scheme'] . '://' . $redirect['host'];		if ( !empty($redirect['port']) )			$redirect_url .= ':' . $redirect['port'];		$redirect_url .= $redirect['path'];		if ( !empty($redirect['query']) )			$redirect_url .= '?' . $redirect['query'];	}	if ( !$redirect_url || $redirect_url == $requested_url )		return false;	// Note that you can use the "redirect_canonical" filter to cancel a canonical redirect for whatever reason by returning FALSE	$redirect_url = apply_filters('redirect_canonical', $redirect_url, $requested_url);	if ( !$redirect_url || $redirect_url == $requested_url ) // yes, again -- in case the filter aborted the request		return false;	if ( $do_redirect ) {		// protect against chained redirects		if ( !redirect_canonical($redirect_url, false) ) {			wp_redirect($redirect_url, 301);			exit();		} else {			// Debug			// die("1: $redirect_url<br />2: " . redirect_canonical( $redirect_url, false ) );			return false;		}	} else {		return $redirect_url;	}}/** * Attempts to guess correct post based on query vars. * * @since 2.3.0 * @uses $wpdb * * @return bool|string Returns False, if it can't find post, returns correct *		location on success. */function redirect_guess_404_permalink() {	global $wpdb;	if ( !get_query_var('name') )		return false;	$where = $wpdb->prepare("post_name LIKE %s", get_query_var('name') . '%');	// if any of post_type, year, monthnum, or day are set, use them to refine the query	if ( get_query_var('post_type') )		$where .= $wpdb->prepare(" AND post_type = %s", get_query_var('post_type'));	if ( get_query_var('year') )		$where .= $wpdb->prepare(" AND YEAR(post_date) = %d", get_query_var('year'));	if ( get_query_var('monthnum') )		$where .= $wpdb->prepare(" AND MONTH(post_date) = %d", get_query_var('monthnum'));	if ( get_query_var('day') )		$where .= $wpdb->prepare(" AND DAYOFMONTH(post_date) = %d", get_query_var('day'));	$post_id = $wpdb->get_var("SELECT ID FROM $wpdb->posts WHERE $where AND post_status = 'publish'");	if ( !$post_id )		return false;	return get_permalink($post_id);}add_action('template_redirect', 'redirect_canonical');?>
<?php/** * Media Library administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script( 'wp-ajax-response' );wp_enqueue_script( 'jquery-ui-draggable' );if ( !current_user_can('upload_files') )	wp_die(__('You do not have permission to upload files.'));if ( isset($_GET['find_detached']) ) {	check_admin_referer('bulk-media');	if ( !current_user_can('edit_posts') )		wp_die( __('You are not allowed to scan for lost attachments.') );	$lost = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'attachment' AND post_parent > '0' and post_parent NOT IN ( SELECT ID FROM $wpdb->posts WHERE post_type NOT IN ('attachment', '" . join("', '", get_post_types( array( 'public' => false ) ) ) . "') )");	$_GET['detached'] = 1;} elseif ( isset($_GET['found_post_id']) && isset($_GET['media']) ) {	check_admin_referer('bulk-media');	if ( ! ( $parent_id = (int) $_GET['found_post_id'] ) )		return;	$parent = &get_post($parent_id);	if ( !current_user_can('edit_post', $parent_id) )		wp_die( __('You are not allowed to edit this post.') );	$attach = array();	foreach( (array) $_GET['media'] as $att_id ) {		$att_id = (int) $att_id;		if ( !current_user_can('edit_post', $att_id) )			continue;		$attach[] = $att_id;		clean_attachment_cache($att_id);	}	if ( ! empty($attach) ) {		$attach = implode(',', $attach);		$attached = $wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_parent = %d WHERE post_type = 'attachment' AND ID IN ($attach)", $parent_id) );	}	if ( isset($attached) ) {		$location = 'upload.php';		if ( $referer = wp_get_referer() ) {			if ( false !== strpos($referer, 'upload.php') )				$location = $referer;		}		$location = add_query_arg( array( 'attached' => $attached ) , $location );		wp_redirect($location);		exit;	}} elseif ( isset($_GET['doaction']) || isset($_GET['doaction2']) || isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {	check_admin_referer('bulk-media');	if ( isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {		$post_ids = $wpdb->get_col( "SELECT ID FROM $wpdb->posts WHERE post_type='attachment' AND post_status = 'trash'" );		$doaction = 'delete';	} elseif ( ( $_GET['action'] != -1 || $_GET['action2'] != -1 ) && ( isset($_GET['media']) || isset($_GET['ids']) ) ) {		$post_ids = isset($_GET['media']) ? $_GET['media'] : explode(',', $_GET['ids']);		$doaction = ($_GET['action'] != -1) ? $_GET['action'] : $_GET['action2'];	} else {		wp_redirect($_SERVER['HTTP_REFERER']);	}	$location = 'upload.php';	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'upload.php') )			$location = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'message', 'ids', 'posted'), $referer );	}	switch ( $doaction ) {		case 'trash':			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can('delete_post', $post_id) )					wp_die( __('You are not allowed to move this post to the trash.') );				if ( !wp_trash_post($post_id) )					wp_die( __('Error in moving to trash...') );			}			$location = add_query_arg( array( 'trashed' => count($post_ids), 'ids' => join(',', $post_ids) ), $location );			break;		case 'untrash':			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can('delete_post', $post_id) )					wp_die( __('You are not allowed to move this post out of the trash.') );				if ( !wp_untrash_post($post_id) )					wp_die( __('Error in restoring from trash...') );			}			$location = add_query_arg('untrashed', count($post_ids), $location);			break;		case 'delete':			foreach( (array) $post_ids as $post_id_del ) {				if ( !current_user_can('delete_post', $post_id_del) )					wp_die( __('You are not allowed to delete this post.') );				if ( !wp_delete_attachment($post_id_del) )					wp_die( __('Error in deleting...') );			}			$location = add_query_arg('deleted', count($post_ids), $location);			break;	}	wp_redirect($location);	exit;} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}$title = __('Media Library');$parent_file = 'upload.php';if ( ! isset( $_GET['paged'] ) || $_GET['paged'] < 1 )	$_GET['paged'] = 1;if ( isset($_GET['detached']) ) {	$media_per_page = (int) get_user_option( 'upload_per_page' );	if ( empty($media_per_page) || $media_per_page < 1 )		$media_per_page = 20;	$media_per_page = apply_filters( 'upload_per_page', $media_per_page );	if ( !empty($lost) ) {		$start = ( (int) $_GET['paged'] - 1 ) * $media_per_page;		$page_links_total = ceil(count($lost) / $media_per_page);		$lost = implode(',', $lost);		$orphans = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->posts WHERE post_type = 'attachment' AND ID IN (%s) LIMIT %d, %d", $lost, $start, $media_per_page ) );	} else {		$start = ( (int) $_GET['paged'] - 1 ) * $media_per_page;		$orphans = $wpdb->get_results( $wpdb->prepare( "SELECT SQL_CALC_FOUND_ROWS * FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent < 1 LIMIT %d, %d", $start, $media_per_page ) );		$total_orphans = $wpdb->get_var( "SELECT FOUND_ROWS()" );		$page_links_total = ceil( $total_orphans / $media_per_page );		$wp_query->found_posts = $total_orphans;		$wp_query->query_vars['posts_per_page'] = $media_per_page;	}	$post_mime_types = get_post_mime_types();	$avail_post_mime_types = get_available_post_mime_types('attachment');	if ( isset($_GET['post_mime_type']) && !array_intersect( (array) $_GET['post_mime_type'], array_keys($post_mime_types) ) )		unset($_GET['post_mime_type']);} else {	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}$is_trash = ( isset($_GET['status']) && $_GET['status'] == 'trash' );wp_enqueue_script('media');add_contextual_help( $current_screen,	'<p>' . __('All the files you&#8217;ve uploaded are listed in the Media Library, with the most recent uploads listed first. You can use the <em>Screen Options</em> tab to customize the display of this screen.') . '</p>' .	'<p>' . __('You can narrow the list by file type/status using the text link filters at the top of the screen. You also can refine the list by date using the dropdown menu above the media table.') . '</p>' .	'<p>' . __('Hovering over a row reveals action links: <em>Edit</em>, <em>Delete Permanently</em>, and <em>View</em>. Clicking <em>Edit</em> or on the media file&#8217;s name displays a simple screen to edit that individual file&#8217;s metadata. Clicking <em>Delete Permanently</em> will delete the file from the media library (as well as from any posts to which it is currently attached). <em>View</em> will take you to the display page for that file.') . '</p>' .	'<p>' . __('If a media file has not been attached to any post, you will see that in the <em>Attached To</em> column, and can click on <em>Attach File</em> to launch a small popup that will allow you to search for a post and attach the file.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Media_Library_SubPanel" target="_blank">Media Library Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?> <a href="media-new.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'file'); ?></a> <?phpif ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', get_search_query() ); ?></h2><?php$message = '';if ( isset($_GET['posted']) && (int) $_GET['posted'] ) {	$message = __('Media attachment updated.');	$_SERVER['REQUEST_URI'] = remove_query_arg(array('posted'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['attached']) && (int) $_GET['attached'] ) {	$attached = (int) $_GET['attached'];	$message = sprintf( _n('Reattached %d attachment.', 'Reattached %d attachments.', $attached), $attached );	$_SERVER['REQUEST_URI'] = remove_query_arg(array('attached'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['deleted']) && (int) $_GET['deleted'] ) {	$message = sprintf( _n( 'Media attachment permanently deleted.', '%d media attachments permanently deleted.', $_GET['deleted'] ), number_format_i18n( $_GET['deleted'] ) );	$_SERVER['REQUEST_URI'] = remove_query_arg(array('deleted'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['trashed']) && (int) $_GET['trashed'] ) {	$message = sprintf( _n( 'Media attachment moved to the trash.', '%d media attachments moved to the trash.', $_GET['trashed'] ), number_format_i18n( $_GET['trashed'] ) );	$message .= ' <a href="' . esc_url( wp_nonce_url( 'upload.php?doaction=undo&action=untrash&ids='.(isset($_GET['ids']) ? $_GET['ids'] : ''), "bulk-media" ) ) . '">' . __('Undo') . '</a>';	$_SERVER['REQUEST_URI'] = remove_query_arg(array('trashed'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['untrashed']) && (int) $_GET['untrashed'] ) {	$message = sprintf( _n( 'Media attachment restored from the trash.', '%d media attachments restored from the trash.', $_GET['untrashed'] ), number_format_i18n( $_GET['untrashed'] ) );	$_SERVER['REQUEST_URI'] = remove_query_arg(array('untrashed'), $_SERVER['REQUEST_URI']);}$messages[1] = __('Media attachment updated.');$messages[2] = __('Media permanently deleted.');$messages[3] = __('Error saving media attachment.');$messages[4] = __('Media moved to the trash.') . ' <a href="' . esc_url( wp_nonce_url( 'upload.php?doaction=undo&action=untrash&ids='.(isset($_GET['ids']) ? $_GET['ids'] : ''), "bulk-media" ) ) . '">' . __('Undo') . '</a>';$messages[5] = __('Media restored from the trash.');if ( isset($_GET['message']) && (int) $_GET['message'] ) {	$message = $messages[$_GET['message']];	$_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);}if ( !empty($message) ) { ?><div id="message" class="updated"><p><?php echo $message; ?></p></div><?php } ?><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$_total_posts = array_sum($_num_posts) - $_num_posts['trash'];if ( !isset( $total_orphans ) )		$total_orphans = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent < 1" );$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $type => $reals )	foreach ( $reals as $real )		$num_posts[$type] = ( isset( $num_posts[$type] ) ) ? $num_posts[$type] + $_num_posts[$real] : $_num_posts[$real];$class = ( empty($_GET['post_mime_type']) && !isset($_GET['detached']) && !isset($_GET['status']) ) ? ' class="current"' : '';$type_links[] = "<li><a href='upload.php'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $_total_posts, 'uploaded files' ), number_format_i18n( $_total_posts ) ) . '</a>';foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( !empty($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	if ( !empty( $num_posts[$mime_type] ) )		$type_links[] = "<li><a href='upload.php?post_mime_type=$mime_type'$class>" . sprintf( _n( $label[2][0], $label[2][1], $num_posts[$mime_type] ), number_format_i18n( $num_posts[$mime_type] )) . '</a>';}$type_links[] = '<li><a href="upload.php?detached=1"' . ( isset($_GET['detached']) ? ' class="current"' : '' ) . '>' . sprintf( _nx( 'Unattached <span class="count">(%s)</span>', 'Unattached <span class="count">(%s)</span>', $total_orphans, 'detached files' ), number_format_i18n( $total_orphans ) ) . '</a>';if ( !empty($_num_posts['trash']) )	$type_links[] = '<li><a href="upload.php?status=trash"' . ( (isset($_GET['status']) && $_GET['status'] == 'trash' ) ? ' class="current"' : '') . '>' . sprintf( _nx( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>', $_num_posts['trash'], 'uploaded files' ), number_format_i18n( $_num_posts['trash'] ) ) . '</a>';echo implode( " |</li>\n", $type_links) . '</li>';unset($type_links);?></ul><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e( 'Search Media' ); ?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p></form><form id="posts-filter" action="" method="get"><?php wp_nonce_field('bulk-media'); ?><?php if ( have_posts() || isset( $orphans ) ) { ?><div class="tablenav"><?phpif ( ! isset($page_links_total) )	$page_links_total =  $wp_query->max_num_pages;$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => $page_links_total,	'current' => $_GET['paged']));if ( $page_links ) : ?><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( ( $_GET['paged'] - 1 ) * $wp_query->query_vars['posts_per_page'] + 1 ),	number_format_i18n( min( $_GET['paged'] * $wp_query->query_vars['posts_per_page'], $wp_query->found_posts ) ),	number_format_i18n( $wp_query->found_posts ),	$page_links); echo $page_links_text; ?></div><?php endif; ?><div class="alignleft actions"><?php if ( ! isset( $orphans ) || ! empty( $orphans ) ) { ?><select name="action" class="select-action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } if ( isset($orphans) ) { ?><option value="attach"><?php _e('Attach to a post'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?phpif ( !is_singular() && !isset($_GET['detached']) && !$is_trash ) {	$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";	$arc_result = $wpdb->get_results( $arc_query );	$month_count = count($arc_result);	if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) : ?><select name='m'><option value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr("$arc_row->yyear$arc_row->mmonth") . "'>";	echo $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear";	echo "</option>\n";}?></select><?php endif; // month_count ?><?php do_action('restrict_manage_posts'); ?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php } // ! is_singular ?><?php} // ! empty( $orphans )if ( isset($_GET['detached']) ) { ?>	<input type="submit" id="find_detached" name="find_detached" value="<?php esc_attr_e('Scan for lost attachments'); ?>" class="button-secondary" /><?php } elseif ( isset($_GET['status']) && $_GET['status'] == 'trash' && current_user_can('edit_others_posts') ) { ?>	<input type="submit" id="delete_all" name="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><br class="clear" /></div><?php } // have_posts() || !empty( $orphans ) ?><div class="clear"></div><?php if ( ! empty( $orphans ) ) { ?><table class="widefat" cellspacing="0"><thead><tr>	<th scope="col" class="check-column"><input type="checkbox" /></th>	<th scope="col"></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Media', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Author', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Date Added', 'media column name'); ?></th></tr></thead><tfoot><tr>	<th scope="col" class="check-column"><input type="checkbox" /></th>	<th scope="col"></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Media', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Author', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Date Added', 'media column name'); ?></th></tr></tfoot><tbody id="the-list" class="list:post"><?php		foreach ( $orphans as $post ) {			$class = 'alternate' == $class ? '' : 'alternate';			$att_title = esc_html( _draft_or_post_title($post->ID) );?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo $class; ?>' valign="top">		<th scope="row" class="check-column"><?php if ( current_user_can('edit_post', $post->ID) ) { ?><input type="checkbox" name="media[]" value="<?php echo esc_attr($post->ID); ?>" /><?php } ?></th>		<td class="media-icon"><?php		if ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) { ?>			<a href="media.php?action=edit&amp;attachment_id=<?php echo $post->ID; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $thumb; ?></a><?php	} ?></td>		<td class="media column-media"><strong><a href="<?php echo get_edit_post_link( $post->ID ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $att_title; ?></a></strong><br />		<?php		if ( preg_match( '/^.*?\.(\w+)$/', get_attached_file( $post->ID ), $matches ) )			echo esc_html( strtoupper( $matches[1] ) );		else			echo strtoupper( str_replace( 'image/', '', get_post_mime_type() ) );		?>		<div class="row-actions">		<?php		$actions = array();		if ( current_user_can('edit_post', $post->ID) )			$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '">' . __('Edit') . '</a>';		if ( current_user_can('delete_post', $post->ID) )			if ( EMPTY_TRASH_DAYS && MEDIA_TRASH ) {				$actions['trash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=trash&amp;post=$post->ID", 'trash-attachment_' . $post->ID) . "'>" . __('Trash') . "</a>";			} else {				$delete_ays = !MEDIA_TRASH ? " onclick='return showNotice.warn();'" : '';				$actions['delete'] = "<a class='submitdelete'$delete_ays href='" . wp_nonce_url("post.php?action=delete&amp;post=$post->ID", 'delete-attachment_' . $post->ID) . "'>" . __('Delete Permanently') . "</a>";			}		$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		if ( current_user_can('edit_post', $post->ID) )			$actions['attach'] = '<a href="#the-list" onclick="findPosts.open(\'media[]\',\''.$post->ID.'\');return false;" class="hide-if-no-js">'.__('Attach').'</a>';		$actions = apply_filters( 'media_row_actions', $actions, $post );		$action_count = count($actions);		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		} ?>		</div></td>		<td class="author column-author"><?php $author = get_userdata($post->post_author); echo $author->display_name; ?></td><?php	if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $post->post_date;			$time = get_post_time( 'G', true );			if ( ( abs($t_diff = time() - $time) ) < 86400 ) {				if ( $t_diff < 0 )					$h_time = sprintf( __('%s from now'), human_time_diff( $time ) );				else					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			} else {				$h_time = mysql2date(__('Y/m/d'), $m_time);			}		} ?>		<td class="date column-date"><?php echo $h_time ?></td>	</tr><?php	} ?></tbody></table><?php} else {	include( './edit-attachment-rows.php' );} ?><div id="ajax-response"></div><div class="tablenav"><?phpif ( have_posts() || ! empty( $orphans ) ) {if ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2" class="select-action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ($is_trash) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } if (isset($orphans)) { ?><option value="attach"><?php _e('Attach to a post'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /><?php if ( isset($_GET['status']) && $_GET['status'] == 'trash' && current_user_can('edit_others_posts') ) { ?>	<input type="submit" id="delete_all2" name="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><?php } ?><br class="clear" /></div><?php find_posts_div(); ?></form><br class="clear" /></div><?phpinclude('./admin-footer.php');
<?php/** * Main WordPress Formatting API. * * Handles many functions for formatting output. * * @package WordPress **//** * Replaces common plain text characters into formatted entities * * As an example, * <code> * 'cause today's effort makes it worth tomorrow's "holiday"... * </code> * Becomes: * <code> * &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221;&#8230; * </code> * Code within certain html blocks are skipped. * * @since 0.71 * @uses $wp_cockneyreplace Array of formatted entities for certain common phrases * * @param string $text The text to be formatted * @return string The string replaced with html entities */function wptexturize($text) {	global $wp_cockneyreplace;	static $static_setup = false, $opening_quote, $closing_quote, $default_no_texturize_tags, $default_no_texturize_shortcodes, $static_characters, $static_replacements, $dynamic_characters, $dynamic_replacements;	$output = '';	$curl = '';	$textarr = preg_split('/(<.*>|\[.*\])/Us', $text, -1, PREG_SPLIT_DELIM_CAPTURE);	$stop = count($textarr);	// No need to set up these variables more than once	if (!$static_setup) {		/* translators: opening curly quote */		$opening_quote = _x('&#8220;', 'opening curly quote');		/* translators: closing curly quote */		$closing_quote = _x('&#8221;', 'closing curly quote');		$default_no_texturize_tags = array('pre', 'code', 'kbd', 'style', 'script', 'tt');		$default_no_texturize_shortcodes = array('code');		// if a plugin has provided an autocorrect array, use it		if ( isset($wp_cockneyreplace) ) {			$cockney = array_keys($wp_cockneyreplace);			$cockneyreplace = array_values($wp_cockneyreplace);		} else {			$cockney = array("'tain't","'twere","'twas","'tis","'twill","'til","'bout","'nuff","'round","'cause");			$cockneyreplace = array("&#8217;tain&#8217;t","&#8217;twere","&#8217;twas","&#8217;tis","&#8217;twill","&#8217;til","&#8217;bout","&#8217;nuff","&#8217;round","&#8217;cause");		}		$static_characters = array_merge(array('---', ' -- ', '--', ' - ', 'xn&#8211;', '...', '``', '\'\'', ' (tm)'), $cockney);		$static_replacements = array_merge(array('&#8212;', ' &#8212; ', '&#8211;', ' &#8211; ', 'xn--', '&#8230;', $opening_quote, $closing_quote, ' &#8482;'), $cockneyreplace);		$dynamic_characters = array('/\'(\d\d(?:&#8217;|\')?s)/', '/\'(\d+)/', '/(\s|\A|[([{<]|")\'/', '/(\d+)"/', '/(\d+)\'/', '/(\S)\'([^\'\s])/', '/(\s|\A|[([{<])"(?!\s)/', '/"(\s|\S|\Z)/', '/\'([\s.]|\Z)/', '/\b(\d+)x(\d+)\b/');		$dynamic_replacements = array('&#8217;$1','&#8217;$1', '$1&#8216;', '$1&#8243;', '$1&#8242;', '$1&#8217;$2', '$1' . $opening_quote . '$2', $closing_quote . '$1', '&#8217;$1', '$1&#215;$2');		$static_setup = true;	}	// Transform into regexp sub-expression used in _wptexturize_pushpop_element	// Must do this everytime in case plugins use these filters in a context sensitive manner	$no_texturize_tags = '(' . implode('|', apply_filters('no_texturize_tags', $default_no_texturize_tags) ) . ')';	$no_texturize_shortcodes = '(' . implode('|', apply_filters('no_texturize_shortcodes', $default_no_texturize_shortcodes) ) . ')';	$no_texturize_tags_stack = array();	$no_texturize_shortcodes_stack = array();	for ( $i = 0; $i < $stop; $i++ ) {		$curl = $textarr[$i];		if ( !empty($curl) && '<' != $curl{0} && '[' != $curl{0}				&& empty($no_texturize_shortcodes_stack) && empty($no_texturize_tags_stack)) {			// This is not a tag, nor is the texturization disabled			// static strings			$curl = str_replace($static_characters, $static_replacements, $curl);			// regular expressions			$curl = preg_replace($dynamic_characters, $dynamic_replacements, $curl);		} elseif (!empty($curl)) {			/*			 * Only call _wptexturize_pushpop_element if first char is correct			 * tag opening			 */			if ('<' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_tags_stack, $no_texturize_tags, '<', '>');			elseif ('[' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes, '[', ']');		}		$curl = preg_replace('/&([^#])(?![a-zA-Z1-4]{1,8};)/', '&#038;$1', $curl);		$output .= $curl;	}	return $output;}/** * Search for disabled element tags. Push element to stack on tag open and pop * on tag close. Assumes first character of $text is tag opening. * * @access private * @since 2.9.0 * * @param string $text Text to check. First character is assumed to be $opening * @param array $stack Array used as stack of opened tag elements * @param string $disabled_elements Tags to match against formatted as regexp sub-expression * @param string $opening Tag opening character, assumed to be 1 character long * @param string $opening Tag closing  character * @return object */function _wptexturize_pushpop_element($text, &$stack, $disabled_elements, $opening = '<', $closing = '>') {	// Check if it is a closing tag -- otherwise assume opening tag	if (strncmp($opening . '/', $text, 2)) {		// Opening? Check $text+1 against disabled elements		if (preg_match('/^' . $disabled_elements . '\b/', substr($text, 1), $matches)) {			/*			 * This disables texturize until we find a closing tag of our type			 * (e.g. <pre>) even if there was invalid nesting before that			 *			 * Example: in the case <pre>sadsadasd</code>"baba"</pre>			 *          "baba" won't be texturize			 */			array_push($stack, $matches[1]);		}	} else {		// Closing? Check $text+2 against disabled elements		$c = preg_quote($closing, '/');		if (preg_match('/^' . $disabled_elements . $c . '/', substr($text, 2), $matches)) {			$last = array_pop($stack);			// Make sure it matches the opening tag			if ($last != $matches[1])				array_push($stack, $last);		}	}}/** * Accepts matches array from preg_replace_callback in wpautop() or a string. * * Ensures that the contents of a <<pre>>...<</pre>> HTML block are not * converted into paragraphs or line-breaks. * * @since 1.2.0 * * @param array|string $matches The array or string * @return string The pre block without paragraph/line-break conversion. */function clean_pre($matches) {	if ( is_array($matches) )		$text = $matches[1] . $matches[2] . "</pre>";	else		$text = $matches;	$text = str_replace('<br />', '', $text);	$text = str_replace('<p>', "\n", $text);	$text = str_replace('</p>', '', $text);	return $text;}/** * Replaces double line-breaks with paragraph elements. * * A group of regex replaces used to identify text formatted with newlines and * replace double line-breaks with HTML paragraph tags. The remaining * line-breaks after conversion become <<br />> tags, unless $br is set to '0' * or 'false'. * * @since 0.71 * * @param string $pee The text which has to be formatted. * @param int|bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true. * @return string Text which has been converted into correct paragraph tags. */function wpautop($pee, $br = 1) {	if ( trim($pee) === '' )		return '';	$pee = $pee . "\n"; // just to make things a little easier, pad the end	$pee = preg_replace('|<br />\s*<br />|', "\n\n", $pee);	// Space things out a little	$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|select|option|form|map|area|blockquote|address|math|style|input|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';	$pee = preg_replace('!(<' . $allblocks . '[^>]*>)!', "\n$1", $pee);	$pee = preg_replace('!(</' . $allblocks . '>)!', "$1\n\n", $pee);	$pee = str_replace(array("\r\n", "\r"), "\n", $pee); // cross-platform newlines	if ( strpos($pee, '<object') !== false ) {		$pee = preg_replace('|\s*<param([^>]*)>\s*|', "<param$1>", $pee); // no pee inside object/embed		$pee = preg_replace('|\s*</embed>\s*|', '</embed>', $pee);	}	$pee = preg_replace("/\n\n+/", "\n\n", $pee); // take care of duplicates	// make paragraphs, including one at the end	$pees = preg_split('/\n\s*\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);	$pee = '';	foreach ( $pees as $tinkle )		$pee .= '<p>' . trim($tinkle, "\n") . "</p>\n";	$pee = preg_replace('|<p>\s*</p>|', '', $pee); // under certain strange conditions it could create a P of entirely whitespace	$pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', "<p>$1</p></$2>", $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee); // don't pee all over a tag	$pee = preg_replace("|<p>(<li.+?)</p>|", "$1", $pee); // problem with nested lists	$pee = preg_replace('|<p><blockquote([^>]*)>|i', "<blockquote$1><p>", $pee);	$pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)!', "$1", $pee);	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee);	if ($br) {		$pee = preg_replace_callback('/<(script|style).*?<\/\\1>/s', create_function('$matches', 'return str_replace("\n", "<WPPreserveNewline />", $matches[0]);'), $pee);		$pee = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $pee); // optionally make line breaks		$pee = str_replace('<WPPreserveNewline />', "\n", $pee);	}	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*<br />!', "$1", $pee);	$pee = preg_replace('!<br />(\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);	if (strpos($pee, '<pre') !== false)		$pee = preg_replace_callback('!(<pre[^>]*>)(.*?)</pre>!is', 'clean_pre', $pee );	$pee = preg_replace( "|\n</p>$|", '</p>', $pee );	return $pee;}/** * Don't auto-p wrap shortcodes that stand alone * * Ensures that shortcodes are not wrapped in <<p>>...<</p>>. * * @since 2.9.0 * * @param string $pee The content. * @return string The filtered content. */function shortcode_unautop($pee) {	global $shortcode_tags;	if ( !empty($shortcode_tags) && is_array($shortcode_tags) ) {		$tagnames = array_keys($shortcode_tags);		$tagregexp = join( '|', array_map('preg_quote', $tagnames) );		$pee = preg_replace('/<p>\\s*?(\\[(' . $tagregexp . ')\\b.*?\\/?\\](?:.+?\\[\\/\\2\\])?)\\s*<\\/p>/s', '$1', $pee);	}	return $pee;}/** * Checks to see if a string is utf8 encoded. * * NOTE: This function checks for 5-Byte sequences, UTF8 *       has Bytes Sequences with a maximum length of 4. * * @author bmorel at ssi dot fr (modified) * @since 1.2.1 * * @param string $str The string to be checked * @return bool True if $str fits a UTF-8 model, false otherwise. */function seems_utf8($str) {	$length = strlen($str);	for ($i=0; $i < $length; $i++) {		$c = ord($str[$i]);		if ($c < 0x80) $n = 0; # 0bbbbbbb		elseif (($c & 0xE0) == 0xC0) $n=1; # 110bbbbb		elseif (($c & 0xF0) == 0xE0) $n=2; # 1110bbbb		elseif (($c & 0xF8) == 0xF0) $n=3; # 11110bbb		elseif (($c & 0xFC) == 0xF8) $n=4; # 111110bb		elseif (($c & 0xFE) == 0xFC) $n=5; # 1111110b		else return false; # Does not match any model		for ($j=0; $j<$n; $j++) { # n bytes matching 10bbbbbb follow ?			if ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))				return false;		}	}	return true;}/** * Converts a number of special characters into their HTML entities. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to encode " to * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded. * * @since 1.2.2 * * @param string $string The text which is to be encoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @param string $charset Optional. The character encoding of the string. Default is false. * @param boolean $double_encode Optional. Whether to encode existing html entities. Default is false. * @return string The encoded text with HTML entities. */function _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no specialchars - saves some processing	if ( !preg_match( '/[&<>"\']/', $string ) ) {		return $string;	}	// Account for the previous behaviour of the function when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()	if ( !$charset ) {		static $_charset;		if ( !isset( $_charset ) ) {			$alloptions = wp_load_alloptions();			$_charset = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';		}		$charset = $_charset;	}	if ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {		$charset = 'UTF-8';	}	$_quote_style = $quote_style;	if ( $quote_style === 'double' ) {		$quote_style = ENT_COMPAT;		$_quote_style = ENT_COMPAT;	} elseif ( $quote_style === 'single' ) {		$quote_style = ENT_NOQUOTES;	}	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = wp_specialchars_decode( $string, $_quote_style );		/* Critical */		// The previous line decodes &amp;phrase; into &phrase;  We must guarantee that &phrase; is valid before proceeding.		$string = wp_kses_normalize_entities($string);		// Now proceed with custom double-encoding silliness		$string = preg_replace( '/&(#?x?[0-9a-z]+);/i', '|wp_entity|$1|/wp_entity|', $string );	}	$string = @htmlspecialchars( $string, $quote_style, $charset );	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = str_replace( array( '|wp_entity|', '|/wp_entity|' ), array( '&', ';' ), $string );	}	// Backwards compatibility	if ( 'single' === $_quote_style ) {		$string = str_replace( "'", '&#039;', $string );	}	return $string;}/** * Converts a number of HTML entities into their special characters. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to decode " entities, * or ENT_QUOTES to do both " and '. Default is ENT_NOQUOTES where no quotes are decoded. * * @since 2.8 * * @param string $string The text which is to be decoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @return string The decoded text without HTML entities. */function wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no entities - saves a lot of processing	if ( strpos( $string, '&' ) === false ) {		return $string;	}	// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// More complete than get_html_translation_table( HTML_SPECIALCHARS )	$single = array( '&#039;'  => '\'', '&#x27;' => '\'' );	$single_preg = array( '/&#0*39;/'  => '&#039;', '/&#x0*27;/i' => '&#x27;' );	$double = array( '&quot;' => '"', '&#034;'  => '"', '&#x22;' => '"' );	$double_preg = array( '/&#0*34;/'  => '&#034;', '/&#x0*22;/i' => '&#x22;' );	$others = array( '&lt;'   => '<', '&#060;'  => '<', '&gt;'   => '>', '&#062;'  => '>', '&amp;'  => '&', '&#038;'  => '&', '&#x26;' => '&' );	$others_preg = array( '/&#0*60;/'  => '&#060;', '/&#0*62;/'  => '&#062;', '/&#0*38;/'  => '&#038;', '/&#x0*26;/i' => '&#x26;' );	if ( $quote_style === ENT_QUOTES ) {		$translation = array_merge( $single, $double, $others );		$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );	} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {		$translation = array_merge( $double, $others );		$translation_preg = array_merge( $double_preg, $others_preg );	} elseif ( $quote_style === 'single' ) {		$translation = array_merge( $single, $others );		$translation_preg = array_merge( $single_preg, $others_preg );	} elseif ( $quote_style === ENT_NOQUOTES ) {		$translation = $others;		$translation_preg = $others_preg;	}	// Remove zero padding on numeric entities	$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );	// Replace characters according to translation table	return strtr( $string, $translation );}/** * Checks for invalid UTF8 in a string. * * @since 2.8 * * @param string $string The text which is to be checked. * @param boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false. * @return string The checked text. */function wp_check_invalid_utf8( $string, $strip = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Store the site charset as a static to avoid multiple calls to get_option()	static $is_utf8;	if ( !isset( $is_utf8 ) ) {		$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );	}	if ( !$is_utf8 ) {		return $string;	}	// Check for support for utf8 in the installed PCRE library once and store the result in a static	static $utf8_pcre;	if ( !isset( $utf8_pcre ) ) {		$utf8_pcre = @preg_match( '/^./u', 'a' );	}	// We can't demand utf8 in the PCRE installation, so just return the string in those cases	if ( !$utf8_pcre ) {		return $string;	}	// preg_match fails when it encounters invalid UTF8 in $string	if ( 1 === @preg_match( '/^./us', $string ) ) {		return $string;	}	// Attempt to strip the bad chars if requested (not recommended)	if ( $strip && function_exists( 'iconv' ) ) {		return iconv( 'utf-8', 'utf-8', $string );	}	return '';}/** * Encode the Unicode values to be used in the URI. * * @since 1.5.0 * * @param string $utf8_string * @param int $length Max length of the string * @return string String with Unicode encoded for URI. */function utf8_uri_encode( $utf8_string, $length = 0 ) {	$unicode = '';	$values = array();	$num_octets = 1;	$unicode_length = 0;	$string_length = strlen( $utf8_string );	for ($i = 0; $i < $string_length; $i++ ) {		$value = ord( $utf8_string[ $i ] );		if ( $value < 128 ) {			if ( $length && ( $unicode_length >= $length ) )				break;			$unicode .= chr($value);			$unicode_length++;		} else {			if ( count( $values ) == 0 ) $num_octets = ( $value < 224 ) ? 2 : 3;			$values[] = $value;			if ( $length && ( $unicode_length + ($num_octets * 3) ) > $length )				break;			if ( count( $values ) == $num_octets ) {				if ($num_octets == 3) {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]) . '%' . dechex($values[2]);					$unicode_length += 9;				} else {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]);					$unicode_length += 6;				}				$values = array();				$num_octets = 1;			}		}	}	return $unicode;}/** * Converts all accent characters to ASCII characters. * * If there are no accent characters, then the string given is just returned. * * @since 1.2.1 * * @param string $string Text that might have accent characters * @return string Filtered string with replaced "nice" characters. */function remove_accents($string) {	if ( !preg_match('/[\x80-\xff]/', $string) )		return $string;	if (seems_utf8($string)) {		$chars = array(		// Decompositions for Latin-1 Supplement		chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',		chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',		chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',		chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',		chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',		chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',		chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',		chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',		chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',		chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',		chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',		chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',		chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',		chr(195).chr(159) => 's', chr(195).chr(160) => 'a',		chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',		chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',		chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',		chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',		chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',		chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',		chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',		chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',		chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',		chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',		chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',		chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',		chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',		chr(195).chr(191) => 'y',		// Decompositions for Latin Extended-A		chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',		chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',		chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',		chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',		chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',		chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',		chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',		chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',		chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',		chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',		chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',		chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',		chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',		chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',		chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',		chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',		chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',		chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',		chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',		chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',		chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',		chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',		chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',		chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',		chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',		chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',		chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',		chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',		chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',		chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',		chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',		chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',		chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',		chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',		chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',		chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',		chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',		chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',		chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',		chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',		chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',		chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',		chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',		chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',		chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',		chr(197).chr(154) => 'S',chr(197).chr(155) => 's',		chr(197).chr(156) => 'S',chr(197).chr(157) => 's',		chr(197).chr(158) => 'S',chr(197).chr(159) => 's',		chr(197).chr(160) => 'S', chr(197).chr(161) => 's',		chr(197).chr(162) => 'T', chr(197).chr(163) => 't',		chr(197).chr(164) => 'T', chr(197).chr(165) => 't',		chr(197).chr(166) => 'T', chr(197).chr(167) => 't',		chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',		chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',		chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',		chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',		chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',		chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',		chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',		chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',		chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',		chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',		chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',		chr(197).chr(190) => 'z', chr(197).chr(191) => 's',		// Euro Sign		chr(226).chr(130).chr(172) => 'E',		// GBP (Pound) Sign		chr(194).chr(163) => '');		$string = strtr($string, $chars);	} else {		// Assume ISO-8859-1 if not UTF-8		$chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)			.chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)			.chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)			.chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)			.chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)			.chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)			.chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)			.chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)			.chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)			.chr(252).chr(253).chr(255);		$chars['out'] = "EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy";		$string = strtr($string, $chars['in'], $chars['out']);		$double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));		$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');		$string = str_replace($double_chars['in'], $double_chars['out'], $string);	}	return $string;}/** * Sanitizes a filename replacing whitespace with dashes * * Removes special characters that are illegal in filenames on certain * operating systems and special characters requiring special escaping * to manipulate at the command line. Replaces spaces and consecutive * dashes with a single dash. Trim period, dash and underscore from beginning * and end of filename. * * @since 2.1.0 * * @param string $filename The filename to be sanitized * @return string The sanitized filename */function sanitize_file_name( $filename ) {	$filename_raw = $filename;	$special_chars = array("?", "[", "]", "/", "\\", "=", "<", ">", ":", ";", ",", "'", "\"", "&", "$", "#", "*", "(", ")", "|", "~", "`", "!", "{", "}", chr(0));	$special_chars = apply_filters('sanitize_file_name_chars', $special_chars, $filename_raw);	$filename = str_replace($special_chars, '', $filename);	$filename = preg_replace('/[\s-]+/', '-', $filename);	$filename = trim($filename, '.-_');	// Split the filename into a base and extension[s]	$parts = explode('.', $filename);	// Return if only one extension	if ( count($parts) <= 2 )		return apply_filters('sanitize_file_name', $filename, $filename_raw);	// Process multiple extensions	$filename = array_shift($parts);	$extension = array_pop($parts);	$mimes = get_allowed_mime_types();	// Loop over any intermediate extensions.  Munge them with a trailing underscore if they are a 2 - 5 character	// long alpha string not in the extension whitelist.	foreach ( (array) $parts as $part) {		$filename .= '.' . $part;		if ( preg_match("/^[a-zA-Z]{2,5}\d?$/", $part) ) {			$allowed = false;			foreach ( $mimes as $ext_preg => $mime_match ) {				$ext_preg = '!(^' . $ext_preg . ')$!i';				if ( preg_match( $ext_preg, $part ) ) {					$allowed = true;					break;				}			}			if ( !$allowed )				$filename .= '_';		}	}	$filename .= '.' . $extension;	return apply_filters('sanitize_file_name', $filename, $filename_raw);}/** * Sanitize username stripping out unsafe characters. * * If $strict is true, only alphanumeric characters (as well as _, space, ., -, * @) are returned. * Removes tags, octets, entities, and if strict is enabled, will remove all * non-ASCII characters. After sanitizing, it passes the username, raw username * (the username in the parameter), and the strict parameter as parameters for * the filter. * * @since 2.0.0 * @uses apply_filters() Calls 'sanitize_user' hook on username, raw username, *		and $strict parameter. * * @param string $username The username to be sanitized. * @param bool $strict If set limits $username to specific characters. Default false. * @return string The sanitized username, after passing through filters. */function sanitize_user( $username, $strict = false ) {	$raw_username = $username;	$username = wp_strip_all_tags( $username );	$username = remove_accents( $username );	// Kill octets	$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );	$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities	// If strict, reduce to ASCII for max portability.	if ( $strict )		$username = preg_replace( '|[^a-z0-9 _.\-@]|i', '', $username );	// Consolidate contiguous whitespace	$username = preg_replace( '|\s+|', ' ', $username );	return apply_filters( 'sanitize_user', $username, $raw_username, $strict );}/** * Sanitize a string key. * * Keys are used as internal identifiers. They should be lowercase ASCII.  Dashes and underscores are allowed. * * @since 3.0.0 * * @param string $key String key * @return string Sanitized key */function sanitize_key( $key ) {	$raw_key = $key;	$key = wp_strip_all_tags($key);	// Kill octets	$key = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $key);	$key = preg_replace('/&.+?;/', '', $key); // Kill entities	$key = preg_replace('|[^a-z0-9 _.\-@]|i', '', $key);	// Consolidate contiguous whitespace	$key = preg_replace('|\s+|', ' ', $key);	return apply_filters('sanitize_key', $key, $raw_key);}/** * Sanitizes title or use fallback title. * * Specifically, HTML and PHP tags are stripped. Further actions can be added * via the plugin API. If $title is empty and $fallback_title is set, the latter * will be used. * * @since 1.0.0 * * @param string $title The string to be sanitized. * @param string $fallback_title Optional. A title to use if $title is empty. * @return string The sanitized string. */function sanitize_title($title, $fallback_title = '') {	$raw_title = $title;	$title = strip_tags($title);	$title = apply_filters('sanitize_title', $title, $raw_title);	if ( '' === $title || false === $title )		$title = $fallback_title;	return $title;}/** * Sanitizes title, replacing whitespace with dashes. * * Limits the output to alphanumeric characters, underscore (_) and dash (-). * Whitespace becomes a dash. * * @since 1.2.0 * * @param string $title The title to be sanitized. * @return string The sanitized title. */function sanitize_title_with_dashes($title) {	$title = strip_tags($title);	// Preserve escaped octets.	$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);	// Remove percent signs that are not part of an octet.	$title = str_replace('%', '', $title);	// Restore octets.	$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);	$title = remove_accents($title);	if (seems_utf8($title)) {		if (function_exists('mb_strtolower')) {			$title = mb_strtolower($title, 'UTF-8');		}		$title = utf8_uri_encode($title, 200);	}	$title = strtolower($title);	$title = preg_replace('/&.+?;/', '', $title); // kill entities	$title = str_replace('.', '-', $title);	$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);	$title = preg_replace('/\s+/', '-', $title);	$title = preg_replace('|-+|', '-', $title);	$title = trim($title, '-');	return $title;}/** * Ensures a string is a valid SQL order by clause. * * Accepts one or more columns, with or without ASC/DESC, and also accepts * RAND(). * * @since 2.5.1 * * @param string $orderby Order by string to be checked. * @return string|false Returns the order by clause if it is a match, false otherwise. */function sanitize_sql_orderby( $orderby ){	preg_match('/^\s*([a-z0-9_]+(\s+(ASC|DESC))?(\s*,\s*|\s*$))+|^\s*RAND\(\s*\)\s*$/i', $orderby, $obmatches);	if ( !$obmatches )		return false;	return $orderby;}/** * Santizes a html classname to ensure it only contains valid characters * * Strips the string down to A-Z,a-z,0-9,'-' if this results in an empty * string then it will return the alternative value supplied. * * @todo Expand to support the full range of CDATA that a class attribute can contain. * * @since 2.8.0 * * @param string $class The classname to be sanitized * @param string $fallback Optional. The value to return if the sanitization end's up as an empty string. * 	Defaults to an empty string. * @return string The sanitized value */function sanitize_html_class( $class, $fallback = '' ) {	//Strip out any % encoded octets	$sanitized = preg_replace('|%[a-fA-F0-9][a-fA-F0-9]|', '', $class);	//Limit to A-Z,a-z,0-9,'-'	$sanitized = preg_replace('/[^A-Za-z0-9-]/', '', $sanitized);	if ( '' == $sanitized )		$sanitized = $fallback;	return apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );}/** * Converts a number of characters from a string. * * Metadata tags <<title>> and <<category>> are removed, <<br>> and <<hr>> are * converted into correct XHTML and Unicode characters are converted to the * valid range. * * @since 0.71 * * @param string $content String of characters to be converted. * @param string $deprecated Not used. * @return string Converted string. */function convert_chars($content, $deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.71' );	// Translation of invalid Unicode references range to valid range	$wp_htmltranswinuni = array(	'&#128;' => '&#8364;', // the Euro sign	'&#129;' => '',	'&#130;' => '&#8218;', // these are Windows CP1252 specific characters	'&#131;' => '&#402;',  // they would look weird on non-Windows browsers	'&#132;' => '&#8222;',	'&#133;' => '&#8230;',	'&#134;' => '&#8224;',	'&#135;' => '&#8225;',	'&#136;' => '&#710;',	'&#137;' => '&#8240;',	'&#138;' => '&#352;',	'&#139;' => '&#8249;',	'&#140;' => '&#338;',	'&#141;' => '',	'&#142;' => '&#382;',	'&#143;' => '',	'&#144;' => '',	'&#145;' => '&#8216;',	'&#146;' => '&#8217;',	'&#147;' => '&#8220;',	'&#148;' => '&#8221;',	'&#149;' => '&#8226;',	'&#150;' => '&#8211;',	'&#151;' => '&#8212;',	'&#152;' => '&#732;',	'&#153;' => '&#8482;',	'&#154;' => '&#353;',	'&#155;' => '&#8250;',	'&#156;' => '&#339;',	'&#157;' => '',	'&#158;' => '',	'&#159;' => '&#376;'	);	// Remove metadata tags	$content = preg_replace('/<title>(.+?)<\/title>/','',$content);	$content = preg_replace('/<category>(.+?)<\/category>/','',$content);	// Converts lone & characters into &#38; (a.k.a. &amp;)	$content = preg_replace('/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content);	// Fix Word pasting	$content = strtr($content, $wp_htmltranswinuni);	// Just a little XHTML help	$content = str_replace('<br>', '<br />', $content);	$content = str_replace('<hr>', '<hr />', $content);	return $content;}/** * Will only balance the tags if forced to and the option is set to balance tags. * * The option 'use_balanceTags' is used for whether the tags will be balanced. * Both the $force parameter and 'use_balanceTags' option will have to be true * before the tags will be balanced. * * @since 0.71 * * @param string $text Text to be balanced * @param bool $force Forces balancing, ignoring the value of the option. Default false. * @return string Balanced text */function balanceTags( $text, $force = false ) {	if ( !$force && get_option('use_balanceTags') == 0 )		return $text;	return force_balance_tags( $text );}/** * Balances tags of string using a modified stack. * * @since 2.0.4 * * @author Leonard Lin <leonard@acm.org> * @license GPL v2.0 * @copyright November 4, 2001 * @version 1.1 * @todo Make better - change loop condition to $text in 1.2 * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004 *		1.1  Fixed handling of append/stack pop order of end text *			 Added Cleaning Hooks *		1.0  First Version * * @param string $text Text to be balanced. * @return string Balanced text. */function force_balance_tags( $text ) {	$tagstack = array();	$stacksize = 0;	$tagqueue = '';	$newtext = '';	$single_tags = array('br', 'hr', 'img', 'input'); // Known single-entity/self-closing tags	$nestable_tags = array('blockquote', 'div', 'span'); // Tags that can be immediately nested within themselves	// WP bug fix for comments - in case you REALLY meant to type '< !--'	$text = str_replace('< !--', '<    !--', $text);	// WP bug fix for LOVE <3 (and other situations with '<' before a number)	$text = preg_replace('#<([0-9]{1})#', '&lt;$1', $text);	while ( preg_match("/<(\/?[\w:]*)\s*([^>]*)>/", $text, $regex) ) {		$newtext .= $tagqueue;		$i = strpos($text, $regex[0]);		$l = strlen($regex[0]);		// clear the shifter		$tagqueue = '';		// Pop or Push		if ( isset($regex[1][0]) && '/' == $regex[1][0] ) { // End Tag			$tag = strtolower(substr($regex[1],1));			// if too many closing tags			if( $stacksize <= 0 ) {				$tag = '';				// or close to be safe $tag = '/' . $tag;			}			// if stacktop value = tag close value then pop			else if ( $tagstack[$stacksize - 1] == $tag ) { // found closing tag				$tag = '</' . $tag . '>'; // Close Tag				// Pop				array_pop( $tagstack );				$stacksize--;			} else { // closing tag not at top, search for it				for ( $j = $stacksize-1; $j >= 0; $j-- ) {					if ( $tagstack[$j] == $tag ) {					// add tag to tagqueue						for ( $k = $stacksize-1; $k >= $j; $k--) {							$tagqueue .= '</' . array_pop( $tagstack ) . '>';							$stacksize--;						}						break;					}				}				$tag = '';			}		} else { // Begin Tag			$tag = strtolower($regex[1]);			// Tag Cleaning			// If self-closing or '', don't do anything.			if ( substr($regex[2],-1) == '/' || $tag == '' ) {				// do nothing			}			// ElseIf it's a known single-entity tag but it doesn't close itself, do so			elseif ( in_array($tag, $single_tags) ) {				$regex[2] .= '/';			} else {	// Push the tag onto the stack				// If the top of the stack is the same as the tag we want to push, close previous tag				if ( $stacksize > 0 && !in_array($tag, $nestable_tags) && $tagstack[$stacksize - 1] == $tag ) {					$tagqueue = '</' . array_pop ($tagstack) . '>';					$stacksize--;				}				$stacksize = array_push ($tagstack, $tag);			}			// Attributes			$attributes = $regex[2];			if( !empty($attributes) )				$attributes = ' '.$attributes;			$tag = '<' . $tag . $attributes . '>';			//If already queuing a close tag, then put this tag on, too			if ( !empty($tagqueue) ) {				$tagqueue .= $tag;				$tag = '';			}		}		$newtext .= substr($text, 0, $i) . $tag;		$text = substr($text, $i + $l);	}	// Clear Tag Queue	$newtext .= $tagqueue;	// Add Remaining text	$newtext .= $text;	// Empty Stack	while( $x = array_pop($tagstack) )		$newtext .= '</' . $x . '>'; // Add remaining tags to close	// WP fix for the bug with HTML comments	$newtext = str_replace("< !--","<!--",$newtext);	$newtext = str_replace("<    !--","< !--",$newtext);	return $newtext;}/** * Acts on text which is about to be edited. * * Unless $richedit is set, it is simply a holder for the 'format_to_edit' * filter. If $richedit is set true htmlspecialchars() will be run on the * content, converting special characters to HTMl entities. * * @since 0.71 * * @param string $content The text about to be edited. * @param bool $richedit Whether the $content should pass through htmlspecialchars(). Default false. * @return string The text after the filter (and possibly htmlspecialchars()) has been run. */function format_to_edit($content, $richedit = false) {	$content = apply_filters('format_to_edit', $content);	if (! $richedit )		$content = htmlspecialchars($content);	return $content;}/** * Holder for the 'format_to_post' filter. * * @since 0.71 * * @param string $content The text to pass through the filter. * @return string Text returned from the 'format_to_post' filter. */function format_to_post($content) {	$content = apply_filters('format_to_post', $content);	return $content;}/** * Add leading zeros when necessary. * * If you set the threshold to '4' and the number is '10', then you will get * back '0010'. If you set the number to '4' and the number is '5000', then you * will get back '5000'. * * Uses sprintf to append the amount of zeros based on the $threshold parameter * and the size of the number. If the number is large enough, then no zeros will * be appended. * * @since 0.71 * * @param mixed $number Number to append zeros to if not greater than threshold. * @param int $threshold Digit places number needs to be to not have zeros added. * @return string Adds leading zeros to number if needed. */function zeroise($number, $threshold) {	return sprintf('%0'.$threshold.'s', $number);}/** * Adds backslashes before letters and before a number at the start of a string. * * @since 0.71 * * @param string $string Value to which backslashes will be added. * @return string String with backslashes inserted. */function backslashit($string) {	$string = preg_replace('/^([0-9])/', '\\\\\\\\\1', $string);	$string = preg_replace('/([a-z])/i', '\\\\\1', $string);	return $string;}/** * Appends a trailing slash. * * Will remove trailing slash if it exists already before adding a trailing * slash. This prevents double slashing a string or path. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 1.2.0 * @uses untrailingslashit() Unslashes string if it was slashed already. * * @param string $string What to add the trailing slash to. * @return string String with trailing slash added. */function trailingslashit($string) {	return untrailingslashit($string) . '/';}/** * Removes trailing slash if it exists. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 2.2.0 * * @param string $string What to remove the trailing slash from. * @return string String without the trailing slash. */function untrailingslashit($string) {	return rtrim($string, '/');}/** * Adds slashes to escape strings. * * Slashes will first be removed if magic_quotes_gpc is set, see {@link * http://www.php.net/magic_quotes} for more details. * * @since 0.71 * * @param string $gpc The string returned from HTTP request data. * @return string Returns a string escaped with slashes. */function addslashes_gpc($gpc) {	if ( get_magic_quotes_gpc() )		$gpc = stripslashes($gpc);	return esc_sql($gpc);}/** * Navigates through an array and removes slashes from the values. * * If an array is passed, the array_map() function causes a callback to pass the * value back to the function. The slashes from this value will removed. * * @since 2.0.0 * * @param array|string $value The array or string to be striped. * @return array|string Stripped array (or string in the callback). */function stripslashes_deep($value) {	if ( is_array($value) ) {		$value = array_map('stripslashes_deep', $value);	} elseif ( is_object($value) ) {		$vars = get_object_vars( $value );		foreach ($vars as $key=>$data) {			$value->{$key} = stripslashes_deep( $data );		}	} else {		$value = stripslashes($value);	}	return $value;}/** * Navigates through an array and encodes the values to be used in a URL. * * Uses a callback to pass the value of the array back to the function as a * string. * * @since 2.2.0 * * @param array|string $value The array or string to be encoded. * @return array|string $value The encoded array (or string from the callback). */function urlencode_deep($value) {	$value = is_array($value) ? array_map('urlencode_deep', $value) : urlencode($value);	return $value;}/** * Converts email addresses characters to HTML entities to block spam bots. * * @since 0.71 * * @param string $emailaddy Email address. * @param int $mailto Optional. Range from 0 to 1. Used for encoding. * @return string Converted email address. */function antispambot($emailaddy, $mailto=0) {	$emailNOSPAMaddy = '';	srand ((float) microtime() * 1000000);	for ($i = 0; $i < strlen($emailaddy); $i = $i + 1) {		$j = floor(rand(0, 1+$mailto));		if ($j==0) {			$emailNOSPAMaddy .= '&#'.ord(substr($emailaddy,$i,1)).';';		} elseif ($j==1) {			$emailNOSPAMaddy .= substr($emailaddy,$i,1);		} elseif ($j==2) {			$emailNOSPAMaddy .= '%'.zeroise(dechex(ord(substr($emailaddy, $i, 1))), 2);		}	}	$emailNOSPAMaddy = str_replace('@','&#64;',$emailNOSPAMaddy);	return $emailNOSPAMaddy;}/** * Callback to convert URI match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URI address. */function _make_url_clickable_cb($matches) {	$url = $matches[2];	$url = esc_url($url);	if ( empty($url) )		return $matches[0];	return $matches[1] . "<a href=\"$url\" rel=\"nofollow\">$url</a>";}/** * Callback to convert URL match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URL address. */function _make_web_ftp_clickable_cb($matches) {	$ret = '';	$dest = $matches[2];	$dest = 'http://' . $dest;	$dest = esc_url($dest);	if ( empty($dest) )		return $matches[0];	// removed trailing [.,;:)] from URL	if ( in_array( substr($dest, -1), array('.', ',', ';', ':', ')') ) === true ) {		$ret = substr($dest, -1);		$dest = substr($dest, 0, strlen($dest)-1);	}	return $matches[1] . "<a href=\"$dest\" rel=\"nofollow\">$dest</a>$ret";}/** * Callback to convert email address match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with email address. */function _make_email_clickable_cb($matches) {	$email = $matches[2] . '@' . $matches[3];	return $matches[1] . "<a href=\"mailto:$email\">$email</a>";}/** * Convert plaintext URI to HTML links. * * Converts URI, www and ftp, and email addresses. Finishes by fixing links * within links. * * @since 0.71 * * @param string $ret Content to convert URIs. * @return string Content with converted URIs. */function make_clickable($ret) {	$ret = ' ' . $ret;	// in testing, using arrays here was found to be faster	$ret = preg_replace_callback('#(?<=[\s>])(\()?([\w]+?://(?:[\w\\x80-\\xff\#$%&~/=?@\[\](+-]|[.,;:](?![\s<]|(\))?([\s]|$))|(?(1)\)(?![\s<.,;:]|$)|\)))+)#is', '_make_url_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])((www|ftp)\.[\w\\x80-\\xff\#$%&~/.\-;:=,?@\[\]+]+)#is', '_make_web_ftp_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret);	// this one is not in an array because we need it to run last, for cleanup of accidental links within links	$ret = preg_replace("#(<a( [^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i", "$1$3</a>", $ret);	$ret = trim($ret);	return $ret;}/** * Adds rel nofollow string to all HTML A elements in content. * * @since 1.5.0 * * @param string $text Content that may contain HTML A elements. * @return string Converted content. */function wp_rel_nofollow( $text ) {	// This is a pre save filter, so text is already escaped.	$text = stripslashes($text);	$text = preg_replace_callback('|<a (.+?)>|i', 'wp_rel_nofollow_callback', $text);	$text = esc_sql($text);	return $text;}/** * Callback to used to add rel=nofollow string to HTML A element. * * Will remove already existing rel="nofollow" and rel='nofollow' from the * string to prevent from invalidating (X)HTML. * * @since 2.3.0 * * @param array $matches Single Match * @return string HTML A Element with rel nofollow. */function wp_rel_nofollow_callback( $matches ) {	$text = $matches[1];	$text = str_replace(array(' rel="nofollow"', " rel='nofollow'"), '', $text);	return "<a $text rel=\"nofollow\">";}/** * Convert one smiley code to the icon graphic file equivalent. * * Looks up one smiley code in the $wpsmiliestrans global array and returns an * <img> string for that smiley. * * @global array $wpsmiliestrans * @since 2.8.0 * * @param string $smiley Smiley code to convert to image. * @return string Image string for smiley. */function translate_smiley($smiley) {	global $wpsmiliestrans;	if (count($smiley) == 0) {		return '';	}	$siteurl = get_option( 'siteurl' );	$smiley = trim(reset($smiley));	$img = $wpsmiliestrans[$smiley];	$smiley_masked = esc_attr($smiley);	$srcurl = apply_filters('smilies_src', "$siteurl/wp-includes/images/smilies/$img", $img, $siteurl);	return " <img src='$srcurl' alt='$smiley_masked' class='wp-smiley' /> ";}/** * Convert text equivalent of smilies to images. * * Will only convert smilies if the option 'use_smilies' is true and the global * used in the function isn't empty. * * @since 0.71 * @uses $wp_smiliessearch * * @param string $text Content to convert smilies from text. * @return string Converted content with text smilies replaced with images. */function convert_smilies($text) {	global $wp_smiliessearch;	$output = '';	if ( get_option('use_smilies') && !empty($wp_smiliessearch) ) {		// HTML loop taken from texturize function, could possible be consolidated		$textarr = preg_split("/(<.*>)/U", $text, -1, PREG_SPLIT_DELIM_CAPTURE); // capture the tags as well as in between		$stop = count($textarr);// loop stuff		for ($i = 0; $i < $stop; $i++) {			$content = $textarr[$i];			if ((strlen($content) > 0) && ('<' != $content{0})) { // If it's not a tag				$content = preg_replace_callback($wp_smiliessearch, 'translate_smiley', $content);			}			$output .= $content;		}	} else {		// return default text.		$output = $text;	}	return $output;}/** * Verifies that an email is valid. * * Does not grok i18n domains. Not RFC compliant. * * @since 0.71 * * @param string $email Email address to verify. * @param boolean $deprecated. Deprecated. * @return string|bool Either false or the valid email address. */function is_email( $email, $deprecated = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'is_email', false, $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'is_email', false, $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	if ( !preg_match( '/^[a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]+$/', $local ) ) {		return apply_filters( 'is_email', false, $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	if ( preg_match( '/\.{2,}/', $domain ) ) {		return apply_filters( 'is_email', false, $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	if ( trim( $domain, " \t\n\r\0\x0B." ) !== $domain ) {		return apply_filters( 'is_email', false, $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'is_email', false, $email, 'domain_no_periods' );	}	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens and whitespace		if ( trim( $sub, " \t\n\r\0\x0B-" ) !== $sub ) {			return apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );		}		// Test for invalid characters		if ( !preg_match('/^[a-z0-9-]+$/i', $sub ) ) {			return apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );		}	}	// Congratulations your email made it!	return apply_filters( 'is_email', $email, $email, null );}/** * Convert to ASCII from email subjects. * * @since 1.2.0 * @usedby wp_mail() handles charsets in email subjects * * @param string $string Subject line * @return string Converted string to ASCII */function wp_iso_descrambler($string) {	/* this may only work with iso-8859-1, I'm afraid */	if (!preg_match('#\=\?(.+)\?Q\?(.+)\?\=#i', $string, $matches)) {		return $string;	} else {		$subject = str_replace('_', ' ', $matches[2]);		$subject = preg_replace_callback('#\=([0-9a-f]{2})#i', create_function('$match', 'return chr(hexdec(strtolower($match[1])));'), $subject);		return $subject;	}}/** * Returns a date in the GMT equivalent. * * Requires and returns a date in the Y-m-d H:i:s format. Simply subtracts the * value of the 'gmt_offset' option. Return format can be overridden using the * $format parameter. If PHP5 is supported, the function uses the DateTime and * DateTimeZone objects to respect time zone differences in DST. * * @since 1.2.0 * * @uses get_option() to retrieve the the value of 'gmt_offset'. * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string GMT version of the date provided. */function get_gmt_from_date($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$tz = get_option('timezone_string');	if( class_exists('DateTime') && $tz ) {		//PHP5		date_default_timezone_set( $tz );		$datetime = new DateTime( $string );		$datetime->setTimezone( new DateTimeZone('UTC') );		$offset = $datetime->getOffset();		$datetime->modify( '+' . $offset / 3600 . ' hours');		$string_gmt = gmdate($format, $datetime->format('U'));		date_default_timezone_set('UTC');	}	else {		//PHP4		$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);		$string_gmt = gmdate($format, $string_time - get_option('gmt_offset') * 3600);	}	return $string_gmt;}/** * Converts a GMT date into the correct format for the blog. * * Requires and returns in the Y-m-d H:i:s format. Simply adds the value of * gmt_offset.Return format can be overridden using the $format parameter * * @since 1.2.0 * * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string Formatted date relative to the GMT offset. */function get_date_from_gmt($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);	$string_localtime = gmdate($format, $string_time + get_option('gmt_offset')*3600);	return $string_localtime;}/** * Computes an offset in seconds from an iso8601 timezone. * * @since 1.5.0 * * @param string $timezone Either 'Z' for 0 offset or 'hhmm'. * @return int|float The offset in seconds. */function iso8601_timezone_to_offset($timezone) {	// $timezone is either 'Z' or '[+|-]hhmm'	if ($timezone == 'Z') {		$offset = 0;	} else {		$sign    = (substr($timezone, 0, 1) == '+') ? 1 : -1;		$hours   = intval(substr($timezone, 1, 2));		$minutes = intval(substr($timezone, 3, 4)) / 60;		$offset  = $sign * 3600 * ($hours + $minutes);	}	return $offset;}/** * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]. * * @since 1.5.0 * * @param string $date_string Date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}. * @param string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'. * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s. */function iso8601_to_datetime($date_string, $timezone = 'user') {	$timezone = strtolower($timezone);	if ($timezone == 'gmt') {		preg_match('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', $date_string, $date_bits);		if (!empty($date_bits[7])) { // we have a timezone, so let's compute an offset			$offset = iso8601_timezone_to_offset($date_bits[7]);		} else { // we don't have a timezone, so we assume user local timezone (not server's!)			$offset = 3600 * get_option('gmt_offset');		}		$timestamp = gmmktime($date_bits[4], $date_bits[5], $date_bits[6], $date_bits[2], $date_bits[3], $date_bits[1]);		$timestamp -= $offset;		return gmdate('Y-m-d H:i:s', $timestamp);	} else if ($timezone == 'user') {		return preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $date_string);	}}/** * Adds a element attributes to open links in new windows. * * Comment text in popup windows should be filtered through this. Right now it's * a moderately dumb function, ideally it would detect whether a target or rel * attribute was already there and adjust its actions accordingly. * * @since 0.71 * * @param string $text Content to replace links to open in a new window. * @return string Content that has filtered links. */function popuplinks($text) {	$text = preg_replace('/<a (.+?)>/i', "<a $1 target='_blank' rel='external'>", $text);	return $text;}/** * Strips out all characters that are not allowable in an email. * * @since 1.5.0 * * @param string $email Email address to filter. * @return string Filtered email address. */function sanitize_email( $email ) {	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'sanitize_email', '', $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'sanitize_email', '', $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	$local = preg_replace( '/[^a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]/', '', $local );	if ( '' === $local ) {		return apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	$domain = preg_replace( '/\.{2,}/', '', $domain );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	$domain = trim( $domain, " \t\n\r\0\x0B." );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );	}	// Create an array that will contain valid subs	$new_subs = array();	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens		$sub = trim( $sub, " \t\n\r\0\x0B-" );		// Test for invalid characters		$sub = preg_replace( '/^[^a-z0-9-]+$/i', '', $sub );		// If there's anything left, add it to the valid subs		if ( '' !== $sub ) {			$new_subs[] = $sub;		}	}	// If there aren't 2 or more valid subs	if ( 2 > count( $new_subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );	}	// Join valid subs into the new domain	$domain = join( '.', $new_subs );	// Put the email back together	$email = $local . '@' . $domain;	// Congratulations your email made it!	return apply_filters( 'sanitize_email', $email, $email, null );}/** * Determines the difference between two timestamps. * * The difference is returned in a human readable format such as "1 hour", * "5 mins", "2 days". * * @since 1.5.0 * * @param int $from Unix timestamp from which the difference begins. * @param int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set. * @return string Human readable time difference. */function human_time_diff( $from, $to = '' ) {	if ( empty($to) )		$to = time();	$diff = (int) abs($to - $from);	if ($diff <= 3600) {		$mins = round($diff / 60);		if ($mins <= 1) {			$mins = 1;		}		/* translators: min=minute */		$since = sprintf(_n('%s min', '%s mins', $mins), $mins);	} else if (($diff <= 86400) && ($diff > 3600)) {		$hours = round($diff / 3600);		if ($hours <= 1) {			$hours = 1;		}		$since = sprintf(_n('%s hour', '%s hours', $hours), $hours);	} elseif ($diff >= 86400) {		$days = round($diff / 86400);		if ($days <= 1) {			$days = 1;		}		$since = sprintf(_n('%s day', '%s days', $days), $days);	}	return $since;}/** * Generates an excerpt from the content, if needed. * * The excerpt word amount will be 55 words and if the amount is greater than * that, then the string ' [...]' will be appended to the excerpt. If the string * is less than 55 words, then the content will be returned as is. * * The 55 word limit can be modified by plugins/themes using the excerpt_length filter * The ' [...]' string can be modified by plugins/themes using the excerpt_more filter * * @since 1.5.0 * * @param string $text The excerpt. If set to empty an excerpt is generated. * @return string The excerpt. */function wp_trim_excerpt($text) {	$raw_excerpt = $text;	if ( '' == $text ) {		$text = get_the_content('');		$text = strip_shortcodes( $text );		$text = apply_filters('the_content', $text);		$text = str_replace(']]>', ']]&gt;', $text);		$text = strip_tags($text);		$excerpt_length = apply_filters('excerpt_length', 55);		$excerpt_more = apply_filters('excerpt_more', ' ' . '[...]');		$words = preg_split("/[\n\r\t ]+/", $text, $excerpt_length + 1, PREG_SPLIT_NO_EMPTY);		if ( count($words) > $excerpt_length ) {			array_pop($words);			$text = implode(' ', $words);			$text = $text . $excerpt_more;		} else {			$text = implode(' ', $words);		}	}	return apply_filters('wp_trim_excerpt', $text, $raw_excerpt);}/** * Converts named entities into numbered entities. * * @since 1.5.1 * * @param string $text The text within which entities will be converted. * @return string Text with converted entities. */function ent2ncr($text) {	$to_ncr = array(		'&quot;' => '&#34;',		'&amp;' => '&#38;',		'&frasl;' => '&#47;',		'&lt;' => '&#60;',		'&gt;' => '&#62;',		'|' => '&#124;',		'&nbsp;' => '&#160;',		'&iexcl;' => '&#161;',		'&cent;' => '&#162;',		'&pound;' => '&#163;',		'&curren;' => '&#164;',		'&yen;' => '&#165;',		'&brvbar;' => '&#166;',		'&brkbar;' => '&#166;',		'&sect;' => '&#167;',		'&uml;' => '&#168;',		'&die;' => '&#168;',		'&copy;' => '&#169;',		'&ordf;' => '&#170;',		'&laquo;' => '&#171;',		'&not;' => '&#172;',		'&shy;' => '&#173;',		'&reg;' => '&#174;',		'&macr;' => '&#175;',		'&hibar;' => '&#175;',		'&deg;' => '&#176;',		'&plusmn;' => '&#177;',		'&sup2;' => '&#178;',		'&sup3;' => '&#179;',		'&acute;' => '&#180;',		'&micro;' => '&#181;',		'&para;' => '&#182;',		'&middot;' => '&#183;',		'&cedil;' => '&#184;',		'&sup1;' => '&#185;',		'&ordm;' => '&#186;',		'&raquo;' => '&#187;',		'&frac14;' => '&#188;',		'&frac12;' => '&#189;',		'&frac34;' => '&#190;',		'&iquest;' => '&#191;',		'&Agrave;' => '&#192;',		'&Aacute;' => '&#193;',		'&Acirc;' => '&#194;',		'&Atilde;' => '&#195;',		'&Auml;' => '&#196;',		'&Aring;' => '&#197;',		'&AElig;' => '&#198;',		'&Ccedil;' => '&#199;',		'&Egrave;' => '&#200;',		'&Eacute;' => '&#201;',		'&Ecirc;' => '&#202;',		'&Euml;' => '&#203;',		'&Igrave;' => '&#204;',		'&Iacute;' => '&#205;',		'&Icirc;' => '&#206;',		'&Iuml;' => '&#207;',		'&ETH;' => '&#208;',		'&Ntilde;' => '&#209;',		'&Ograve;' => '&#210;',		'&Oacute;' => '&#211;',		'&Ocirc;' => '&#212;',		'&Otilde;' => '&#213;',		'&Ouml;' => '&#214;',		'&times;' => '&#215;',		'&Oslash;' => '&#216;',		'&Ugrave;' => '&#217;',		'&Uacute;' => '&#218;',		'&Ucirc;' => '&#219;',		'&Uuml;' => '&#220;',		'&Yacute;' => '&#221;',		'&THORN;' => '&#222;',		'&szlig;' => '&#223;',		'&agrave;' => '&#224;',		'&aacute;' => '&#225;',		'&acirc;' => '&#226;',		'&atilde;' => '&#227;',		'&auml;' => '&#228;',		'&aring;' => '&#229;',		'&aelig;' => '&#230;',		'&ccedil;' => '&#231;',		'&egrave;' => '&#232;',		'&eacute;' => '&#233;',		'&ecirc;' => '&#234;',		'&euml;' => '&#235;',		'&igrave;' => '&#236;',		'&iacute;' => '&#237;',		'&icirc;' => '&#238;',		'&iuml;' => '&#239;',		'&eth;' => '&#240;',		'&ntilde;' => '&#241;',		'&ograve;' => '&#242;',		'&oacute;' => '&#243;',		'&ocirc;' => '&#244;',		'&otilde;' => '&#245;',		'&ouml;' => '&#246;',		'&divide;' => '&#247;',		'&oslash;' => '&#248;',		'&ugrave;' => '&#249;',		'&uacute;' => '&#250;',		'&ucirc;' => '&#251;',		'&uuml;' => '&#252;',		'&yacute;' => '&#253;',		'&thorn;' => '&#254;',		'&yuml;' => '&#255;',		'&OElig;' => '&#338;',		'&oelig;' => '&#339;',		'&Scaron;' => '&#352;',		'&scaron;' => '&#353;',		'&Yuml;' => '&#376;',		'&fnof;' => '&#402;',		'&circ;' => '&#710;',		'&tilde;' => '&#732;',		'&Alpha;' => '&#913;',		'&Beta;' => '&#914;',		'&Gamma;' => '&#915;',		'&Delta;' => '&#916;',		'&Epsilon;' => '&#917;',		'&Zeta;' => '&#918;',		'&Eta;' => '&#919;',		'&Theta;' => '&#920;',		'&Iota;' => '&#921;',		'&Kappa;' => '&#922;',		'&Lambda;' => '&#923;',		'&Mu;' => '&#924;',		'&Nu;' => '&#925;',		'&Xi;' => '&#926;',		'&Omicron;' => '&#927;',		'&Pi;' => '&#928;',		'&Rho;' => '&#929;',		'&Sigma;' => '&#931;',		'&Tau;' => '&#932;',		'&Upsilon;' => '&#933;',		'&Phi;' => '&#934;',		'&Chi;' => '&#935;',		'&Psi;' => '&#936;',		'&Omega;' => '&#937;',		'&alpha;' => '&#945;',		'&beta;' => '&#946;',		'&gamma;' => '&#947;',		'&delta;' => '&#948;',		'&epsilon;' => '&#949;',		'&zeta;' => '&#950;',		'&eta;' => '&#951;',		'&theta;' => '&#952;',		'&iota;' => '&#953;',		'&kappa;' => '&#954;',		'&lambda;' => '&#955;',		'&mu;' => '&#956;',		'&nu;' => '&#957;',		'&xi;' => '&#958;',		'&omicron;' => '&#959;',		'&pi;' => '&#960;',		'&rho;' => '&#961;',		'&sigmaf;' => '&#962;',		'&sigma;' => '&#963;',		'&tau;' => '&#964;',		'&upsilon;' => '&#965;',		'&phi;' => '&#966;',		'&chi;' => '&#967;',		'&psi;' => '&#968;',		'&omega;' => '&#969;',		'&thetasym;' => '&#977;',		'&upsih;' => '&#978;',		'&piv;' => '&#982;',		'&ensp;' => '&#8194;',		'&emsp;' => '&#8195;',		'&thinsp;' => '&#8201;',		'&zwnj;' => '&#8204;',		'&zwj;' => '&#8205;',		'&lrm;' => '&#8206;',		'&rlm;' => '&#8207;',		'&ndash;' => '&#8211;',		'&mdash;' => '&#8212;',		'&lsquo;' => '&#8216;',		'&rsquo;' => '&#8217;',		'&sbquo;' => '&#8218;',		'&ldquo;' => '&#8220;',		'&rdquo;' => '&#8221;',		'&bdquo;' => '&#8222;',		'&dagger;' => '&#8224;',		'&Dagger;' => '&#8225;',		'&bull;' => '&#8226;',		'&hellip;' => '&#8230;',		'&permil;' => '&#8240;',		'&prime;' => '&#8242;',		'&Prime;' => '&#8243;',		'&lsaquo;' => '&#8249;',		'&rsaquo;' => '&#8250;',		'&oline;' => '&#8254;',		'&frasl;' => '&#8260;',		'&euro;' => '&#8364;',		'&image;' => '&#8465;',		'&weierp;' => '&#8472;',		'&real;' => '&#8476;',		'&trade;' => '&#8482;',		'&alefsym;' => '&#8501;',		'&crarr;' => '&#8629;',		'&lArr;' => '&#8656;',		'&uArr;' => '&#8657;',		'&rArr;' => '&#8658;',		'&dArr;' => '&#8659;',		'&hArr;' => '&#8660;',		'&forall;' => '&#8704;',		'&part;' => '&#8706;',		'&exist;' => '&#8707;',		'&empty;' => '&#8709;',		'&nabla;' => '&#8711;',		'&isin;' => '&#8712;',		'&notin;' => '&#8713;',		'&ni;' => '&#8715;',		'&prod;' => '&#8719;',		'&sum;' => '&#8721;',		'&minus;' => '&#8722;',		'&lowast;' => '&#8727;',		'&radic;' => '&#8730;',		'&prop;' => '&#8733;',		'&infin;' => '&#8734;',		'&ang;' => '&#8736;',		'&and;' => '&#8743;',		'&or;' => '&#8744;',		'&cap;' => '&#8745;',		'&cup;' => '&#8746;',		'&int;' => '&#8747;',		'&there4;' => '&#8756;',		'&sim;' => '&#8764;',		'&cong;' => '&#8773;',		'&asymp;' => '&#8776;',		'&ne;' => '&#8800;',		'&equiv;' => '&#8801;',		'&le;' => '&#8804;',		'&ge;' => '&#8805;',		'&sub;' => '&#8834;',		'&sup;' => '&#8835;',		'&nsub;' => '&#8836;',		'&sube;' => '&#8838;',		'&supe;' => '&#8839;',		'&oplus;' => '&#8853;',		'&otimes;' => '&#8855;',		'&perp;' => '&#8869;',		'&sdot;' => '&#8901;',		'&lceil;' => '&#8968;',		'&rceil;' => '&#8969;',		'&lfloor;' => '&#8970;',		'&rfloor;' => '&#8971;',		'&lang;' => '&#9001;',		'&rang;' => '&#9002;',		'&larr;' => '&#8592;',		'&uarr;' => '&#8593;',		'&rarr;' => '&#8594;',		'&darr;' => '&#8595;',		'&harr;' => '&#8596;',		'&loz;' => '&#9674;',		'&spades;' => '&#9824;',		'&clubs;' => '&#9827;',		'&hearts;' => '&#9829;',		'&diams;' => '&#9830;'	);	return str_replace( array_keys($to_ncr), array_values($to_ncr), $text );}/** * Formats text for the rich text editor. * * The filter 'richedit_pre' is applied here. If $text is empty the filter will * be applied to an empty string. * * @since 2.0.0 * * @param string $text The text to be formatted. * @return string The formatted text after filter is applied. */function wp_richedit_pre($text) {	// Filtering a blank results in an annoying <br />\n	if ( empty($text) ) return apply_filters('richedit_pre', '');	$output = convert_chars($text);	$output = wpautop($output);	$output = htmlspecialchars($output, ENT_NOQUOTES);	return apply_filters('richedit_pre', $output);}/** * Formats text for the HTML editor. * * Unless $output is empty it will pass through htmlspecialchars before the * 'htmledit_pre' filter is applied. * * @since 2.5.0 * * @param string $output The text to be formatted. * @return string Formatted text after filter applied. */function wp_htmledit_pre($output) {	if ( !empty($output) )		$output = htmlspecialchars($output, ENT_NOQUOTES); // convert only < > &	return apply_filters('htmledit_pre', $output);}/** * Perform a deep string replace operation to ensure the values in $search are no longer present * * Repeats the replacement operation until it no longer replaces anything so as to remove "nested" values * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that * str_replace would return * * @since 2.8.1 * @access private * * @param string|array $search * @param string $subject * @return string The processed string */function _deep_replace( $search, $subject ) {	$found = true;	$subject = (string) $subject;	while ( $found ) {		$found = false;		foreach ( (array) $search as $val ) {			while ( strpos( $subject, $val ) !== false ) {				$found = true;				$subject = str_replace( $val, '', $subject );			}		}	}	return $subject;}/** * Escapes data for use in a MySQL query * * This is just a handy shortcut for $wpdb->escape(), for completeness' sake * * @since 2.8.0 * @param string $sql Unescaped SQL data * @return string The cleaned $sql */function esc_sql( $sql ) {	global $wpdb;	return $wpdb->escape( $sql );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 2.8.0 * @uses wp_kses_bad_protocol() To only permit protocols in the URL set *		via $protocols or the common ones set in the function. * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. *		Defaults to 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet' if not set. * @param string $_context Private. Use esc_url_raw() for database usage. * @return string The cleaned $url after the 'clean_url' filter is applied. */function esc_url( $url, $protocols = null, $_context = 'display' ) {	$original_url = $url;	if ( '' == $url )		return $url;	$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);	$strip = array('%0d', '%0a', '%0D', '%0A');	$url = _deep_replace($strip, $url);	$url = str_replace(';//', '://', $url);	/* If the URL doesn't appear to contain a scheme, we	 * presume it needs http:// appended (unless a relative	 * link starting with / or a php file).	 */	if ( strpos($url, ':') === false &&		substr( $url, 0, 1 ) != '/' && substr( $url, 0, 1 ) != '#' && !preg_match('/^[a-z0-9-]+?\.php/i', $url) )		$url = 'http://' . $url;	// Replace ampersands and single quotes only when displaying.	if ( 'display' == $_context ) {		$url = preg_replace('/&([^#])(?![a-z]{2,8};)/', '&#038;$1', $url);		$url = str_replace( "'", '&#039;', $url );	}	if ( !is_array($protocols) )		$protocols = array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn');	if ( wp_kses_bad_protocol( $url, $protocols ) != $url )		return '';	return apply_filters('clean_url', $url, $original_url, $_context);}/** * Performs esc_url() for database usage. * * @since 2.8.0 * @uses esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function esc_url_raw( $url, $protocols = null ) {	return esc_url( $url, $protocols, 'db' );}/** * Convert entities, while preserving already-encoded entities. * * @link http://www.php.net/htmlentities Borrowed from the PHP Manual user notes. * * @since 1.2.2 * * @param string $myHTML The text to be converted. * @return string Converted text. */function htmlentities2($myHTML) {	$translation_table = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );	$translation_table[chr(38)] = '&';	return preg_replace( "/&(?![A-Za-z]{0,4}\w{2,3};|#[0-9]{2,3};)/", "&amp;", strtr($myHTML, $translation_table) );}/** * Escape single quotes, htmlspecialchar " < > &, and fix line endings. * * Escapes text strings for echoing in JS. It is intended to be used for inline JS * (in a tag attribute, for example onclick="..."). Note that the strings have to * be in single quotes. The filter 'js_escape' is also applied here. * * @since 2.8.0 * * @param string $text The text to be escaped. * @return string Escaped text. */function esc_js( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );	$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', "'", stripslashes( $safe_text ) );	$safe_text = str_replace( "\r", '', $safe_text );	$safe_text = str_replace( "\n", '\\n', addslashes( $safe_text ) );	return apply_filters( 'js_escape', $safe_text, $text );}/** * Escaping for HTML blocks. * * @since 2.8.0 * * @param string $text * @return string */function esc_html( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'esc_html', $safe_text, $text );}/** * Escaping for HTML attributes. * * @since 2.8.0 * * @param string $text * @return string */function esc_attr( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'attribute_escape', $safe_text, $text );}/** * Escape a HTML tag name. * * @since 2.5.0 * * @param string $tag_name * @return string */function tag_escape($tag_name) {	$safe_tag = strtolower( preg_replace('/[^a-zA-Z_:]/', '', $tag_name) );	return apply_filters('tag_escape', $safe_tag, $tag_name);}/** * Escapes text for SQL LIKE special characters % and _. * * @since 2.5.0 * * @param string $text The text to be escaped. * @return string text, safe for inclusion in LIKE query. */function like_escape($text) {	return str_replace(array("%", "_"), array("\\%", "\\_"), $text);}/** * Convert full URL paths to absolute paths. * * Removes the http or https protocols and the domain. Keeps the path '/' at the * beginning, so it isn't a true relative link, but from the web root base. * * @since 2.1.0 * * @param string $link Full URL path. * @return string Absolute path. */function wp_make_link_relative( $link ) {	return preg_replace( '|https?://[^/]+(/.*)|i', '$1', $link );}/** * Sanitises various option values based on the nature of the option. * * This is basically a switch statement which will pass $value through a number * of functions depending on the $option. * * @since 2.0.5 * * @param string $option The name of the option. * @param string $value The unsanitised value. * @return string Sanitized value. */function sanitize_option($option, $value) {	switch ( $option ) {		case 'admin_email':			$value = sanitize_email($value);			if ( !is_email($value) ) {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('admin_email', 'invalid_admin_email', __('The email address entered did not appear to be a valid email address. Please enter a valid email address.'));			}			break;		case 'thumbnail_size_w':		case 'thumbnail_size_h':		case 'medium_size_w':		case 'medium_size_h':		case 'large_size_w':		case 'large_size_h':		case 'embed_size_h':		case 'default_post_edit_rows':		case 'mailserver_port':		case 'comment_max_links':		case 'page_on_front':		case 'page_for_posts':		case 'rss_excerpt_length':		case 'default_category':		case 'default_email_category':		case 'default_link_category':		case 'close_comments_days_old':		case 'comments_per_page':		case 'thread_comments_depth':		case 'users_can_register':		case 'start_of_week':			$value = absint( $value );			break;		case 'embed_size_w':			if ( '' !== $value )				$value = absint( $value );			break;		case 'posts_per_page':		case 'posts_per_rss':			$value = (int) $value;			if ( empty($value) )				$value = 1;			if ( $value < -1 )				$value = abs($value);			break;		case 'default_ping_status':		case 'default_comment_status':			// Options that if not there have 0 value but need to be something like "closed"			if ( $value == '0' || $value == '')				$value = 'closed';			break;		case 'blogdescription':		case 'blogname':			$value = addslashes($value);			$value = wp_filter_post_kses( $value ); // calls stripslashes then addslashes			$value = stripslashes($value);			$value = esc_html( $value );			break;		case 'blog_charset':			$value = preg_replace('/[^a-zA-Z0-9_-]/', '', $value); // strips slashes			break;		case 'date_format':		case 'time_format':		case 'mailserver_url':		case 'mailserver_login':		case 'mailserver_pass':		case 'ping_sites':		case 'upload_path':			$value = strip_tags($value);			$value = addslashes($value);			$value = wp_filter_kses($value); // calls stripslashes then addslashes			$value = stripslashes($value);			break;		case 'gmt_offset':			$value = preg_replace('/[^0-9:.-]/', '', $value); // strips slashes			break;		case 'siteurl':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('siteurl', 'invalid_siteurl', __('The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		case 'home':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('home', 'invalid_home', __('The Site address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		default :			$value = apply_filters("sanitize_option_{$option}", $value, $option);			break;	}	return $value;}/** * Parses a string into variables to be stored in an array. * * Uses {@link http://www.php.net/parse_str parse_str()} and stripslashes if * {@link http://www.php.net/magic_quotes magic_quotes_gpc} is on. * * @since 2.2.1 * @uses apply_filters() for the 'wp_parse_str' filter. * * @param string $string The string to be parsed. * @param array $array Variables will be stored in this array. */function wp_parse_str( $string, &$array ) {	parse_str( $string, $array );	if ( get_magic_quotes_gpc() )		$array = stripslashes_deep( $array );	$array = apply_filters( 'wp_parse_str', $array );}/** * Convert lone less than signs. * * KSES already converts lone greater than signs. * * @uses wp_pre_kses_less_than_callback in the callback function. * @since 2.3.0 * * @param string $text Text to be converted. * @return string Converted text. */function wp_pre_kses_less_than( $text ) {	return preg_replace_callback('%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text);}/** * Callback function used by preg_replace. * * @uses esc_html to format the $matches text. * @since 2.3.0 * * @param array $matches Populated by matches to preg_replace. * @return string The text returned after esc_html if needed. */function wp_pre_kses_less_than_callback( $matches ) {	if ( false === strpos($matches[0], '>') )		return esc_html($matches[0]);	return $matches[0];}/** * WordPress implementation of PHP sprintf() with filters. * * @since 2.5.0 * @link http://www.php.net/sprintf * * @param string $pattern The string which formatted args are inserted. * @param mixed $args,... Arguments to be formatted into the $pattern string. * @return string The formatted string. */function wp_sprintf( $pattern ) {	$args = func_get_args( );	$len = strlen($pattern);	$start = 0;	$result = '';	$arg_index = 0;	while ( $len > $start ) {		// Last character: append and break		if ( strlen($pattern) - 1 == $start ) {			$result .= substr($pattern, -1);			break;		}		// Literal %: append and continue		if ( substr($pattern, $start, 2) == '%%' ) {			$start += 2;			$result .= '%';			continue;		}		// Get fragment before next %		$end = strpos($pattern, '%', $start + 1);		if ( false === $end )			$end = $len;		$fragment = substr($pattern, $start, $end - $start);		// Fragment has a specifier		if ( $pattern{$start} == '%' ) {			// Find numbered arguments or take the next one in order			if ( preg_match('/^%(\d+)\$/', $fragment, $matches) ) {				$arg = isset($args[$matches[1]]) ? $args[$matches[1]] : '';				$fragment = str_replace("%{$matches[1]}$", '%', $fragment);			} else {				++$arg_index;				$arg = isset($args[$arg_index]) ? $args[$arg_index] : '';			}			// Apply filters OR sprintf			$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );			if ( $_fragment != $fragment )				$fragment = $_fragment;			else				$fragment = sprintf($fragment, strval($arg) );		}		// Append to result and move to next fragment		$result .= $fragment;		$start = $end;	}	return $result;}/** * Localize list items before the rest of the content. * * The '%l' must be at the first characters can then contain the rest of the * content. The list items will have ', ', ', and', and ' and ' added depending * on the amount of list items in the $args parameter. * * @since 2.5.0 * * @param string $pattern Content containing '%l' at the beginning. * @param array $args List items to prepend to the content and replace '%l'. * @return string Localized list items and rest of the content. */function wp_sprintf_l($pattern, $args) {	// Not a match	if ( substr($pattern, 0, 2) != '%l' )		return $pattern;	// Nothing to work with	if ( empty($args) )		return '';	// Translate and filter the delimiter set (avoid ampersands and entities here)	$l = apply_filters('wp_sprintf_l', array(		/* translators: used between list items, there is a space after the coma */		'between'          => __(', '),		/* translators: used between list items, there is a space after the and */		'between_last_two' => __(', and '),		/* translators: used between only two list items, there is a space after the and */		'between_only_two' => __(' and '),		));	$args = (array) $args;	$result = array_shift($args);	if ( count($args) == 1 )		$result .= $l['between_only_two'] . array_shift($args);	// Loop when more than two args	$i = count($args);	while ( $i ) {		$arg = array_shift($args);		$i--;		if ( 0 == $i )			$result .= $l['between_last_two'] . $arg;		else			$result .= $l['between'] . $arg;	}	return $result . substr($pattern, 2);}/** * Safely extracts not more than the first $count characters from html string. * * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT* * be counted as one character. For example &amp; will be counted as 4, &lt; as * 3, etc. * * @since 2.5.0 * * @param integer $str String to get the excerpt from. * @param integer $count Maximum number of characters to take. * @return string The excerpt. */function wp_html_excerpt( $str, $count ) {	$str = wp_strip_all_tags( $str, true );	$str = mb_substr( $str, 0, $count );	// remove part of an entity at the end	$str = preg_replace( '/&[^;\s]{0,6}$/', '', $str );	return $str;}/** * Add a Base url to relative links in passed content. * * By default it supports the 'src' and 'href' attributes. However this can be * changed via the 3rd param. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $base The base URL to prefix to links. * @param array $attrs The attributes which should be processed. * @return string The processed content. */function links_add_base_url( $content, $base, $attrs = array('src', 'href') ) {	$attrs = implode('|', (array)$attrs);	return preg_replace_callback("!($attrs)=(['\"])(.+?)\\2!i",			create_function('$m', 'return _links_add_base($m, "' . $base . '");'),			$content);}/** * Callback to add a base url to relative links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $base The base URL to prefix to links. * @return string The processed link. */function _links_add_base($m, $base) {	//1 = attribute name  2 = quotation mark  3 = URL	return $m[1] . '=' . $m[2] .		(strpos($m[3], 'http://') === false ?			path_join($base, $m[3]) :			$m[3])		. $m[2];}/** * Adds a Target attribute to all links in passed content. * * This function by default only applies to <a> tags, however this can be * modified by the 3rd param. * * <b>NOTE:</b> Any current target attributed will be striped and replaced. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $target The Target to add to the links. * @param array $tags An array of tags to apply to. * @return string The processed content. */function links_add_target( $content, $target = '_blank', $tags = array('a') ) {	$tags = implode('|', (array)$tags);	return preg_replace_callback("!<($tags)(.+?)>!i",			create_function('$m', 'return _links_add_target($m, "' . $target . '");'),			$content);}/** * Callback to add a target attribute to all links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $target The Target to add to the links. * @return string The processed link. */function _links_add_target( $m, $target ) {	$tag = $m[1];	$link = preg_replace('|(target=[\'"](.*?)[\'"])|i', '', $m[2]);	return '<' . $tag . $link . ' target="' . $target . '">';}// normalize EOL characters and strip duplicate whitespacefunction normalize_whitespace( $str ) {	$str  = trim($str);	$str  = str_replace("\r", "\n", $str);	$str  = preg_replace( array( '/\n+/', '/[ \t]+/' ), array( "\n", ' ' ), $str );	return $str;}/** * Properly strip all HTML tags including script and style * * @since 2.9.0 * * @param string $string String containing HTML tags * @param bool $remove_breaks optional Whether to remove left over line breaks and white space chars * @return string The processed string. */function wp_strip_all_tags($string, $remove_breaks = false) {	$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\1>@si', '', $string );	$string = strip_tags($string);	if ( $remove_breaks )		$string = preg_replace('/[\r\n\t ]+/', ' ', $string);	return trim($string);}/** * Sanitize a string from user input or from the db * * check for invalid UTF-8, * Convert single < characters to entity, * strip all tags, * remove line breaks, tabs and extra white space, * strip octets. * * @since 2.9.0 * * @param string $str * @return string */function sanitize_text_field($str) {	$filtered = wp_check_invalid_utf8( $str );	if ( strpos($filtered, '<') !== false ) {		$filtered = wp_pre_kses_less_than( $filtered );		// This will strip extra whitespace for us.		$filtered = wp_strip_all_tags( $filtered, true );	} else {		$filtered = trim( preg_replace('/[\r\n\t ]+/', ' ', $filtered) );	}	$match = array();	$found = false;	while ( preg_match('/%[a-f0-9]{2}/i', $filtered, $match) ) {		$filtered = str_replace($match[0], '', $filtered);		$found = true;	}	if ( $found ) {		// Strip out the whitespace that may now exist after removing the octets.		$filtered = trim( preg_replace('/ +/', ' ', $filtered) );	}	return apply_filters('sanitize_text_field', $filtered, $str);}/** * Forever eliminate "Wordpress" from the planet (or at least the little bit we can influence). * * Violating our coding standards for a good function name. * * @since 3.0.0 */function capital_P_dangit( $text ) {       return str_replace( 'Wordpress', 'WordPress', $text );}?>
<?php/** * Edit plugin editor administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_plugins') )	wp_die( __('You do not have sufficient permissions to edit plugins for this site.') );$title = __("Edit Plugins");$parent_file = 'plugins.php';wp_reset_vars(array('action', 'redirect', 'profile', 'error', 'warning', 'a', 'file', 'plugin'));wp_admin_css( 'theme-editor' );$plugins = get_plugins();if ( empty($plugins) )	wp_die( __('There are no plugins installed on this site.') );if ( isset($_REQUEST['file']) )	$plugin = stripslashes($_REQUEST['file']);if ( empty($plugin) ) {	$plugin = array_keys($plugins);	$plugin = $plugin[0];}$plugin_files = get_plugin_files($plugin);if ( empty($file) )	$file = $plugin_files[0];else	$file = stripslashes($file);$file = validate_file_to_edit($file, $plugin_files);$real_file = WP_PLUGIN_DIR . '/' . $file;$scrollto = isset($_REQUEST['scrollto']) ? (int) $_REQUEST['scrollto'] : 0;switch ( $action ) {case 'update':	check_admin_referer('edit-plugin_' . $file);	$newcontent = stripslashes($_POST['newcontent']);	if ( is_writeable($real_file) ) {		$f = fopen($real_file, 'w+');		fwrite($f, $newcontent);		fclose($f);		$network_wide = is_plugin_active_for_network( $file );		// Deactivate so we can test it.		if ( is_plugin_active($file) || isset($_POST['phperror']) ) {			if ( is_plugin_active($file) )				deactivate_plugins($file, true);			update_option('recently_activated', array($file => time()) + (array)get_option('recently_activated'));			wp_redirect(add_query_arg('_wpnonce', wp_create_nonce('edit-plugin-test_' . $file), "plugin-editor.php?file=$file&liveupdate=1&scrollto=$scrollto&networkwide=" . $network_wide));			exit;		}		wp_redirect("plugin-editor.php?file=$file&a=te&scrollto=$scrollto");	} else {		wp_redirect("plugin-editor.php?file=$file&scrollto=$scrollto");	}	exit;break;default:	if ( isset($_GET['liveupdate']) ) {		check_admin_referer('edit-plugin-test_' . $file);		$error = validate_plugin($file);		if ( is_wp_error($error) )			wp_die( $error );		if ( ! is_plugin_active($file) )			activate_plugin($file, "plugin-editor.php?file=$file&phperror=1", ! empty( $_GET['networkwide'] ) ); // we'll override this later if the plugin can be included without fatal error		wp_redirect("plugin-editor.php?file=$file&a=te&scrollto=$scrollto");		exit;	}	// List of allowable extensions	$editable_extensions = array('php', 'txt', 'text', 'js', 'css', 'html', 'htm', 'xml', 'inc', 'include');	$editable_extensions = (array) apply_filters('editable_extensions', $editable_extensions);	if ( ! is_file($real_file) ) {		wp_die(sprintf('<p>%s</p>', __('No such file exists! Double check the name and try again.')));	} else {		// Get the extension of the file		if ( preg_match('/\.([^.]+)$/', $real_file, $matches) ) {			$ext = strtolower($matches[1]);			// If extension is not in the acceptable list, skip it			if ( !in_array( $ext, $editable_extensions) )				wp_die(sprintf('<p>%s</p>', __('Files of this type are not editable.')));		}	}	add_contextual_help($current_screen,		'<p>' . __('You can use the editor to make changes to any of your plugins&#8217; individual PHP files. Be aware that if you make changes, plugins updates will overwrite your customizations.') . '</p>' .		'<p>' . __('Choose a plugin to edit from the menu in the upper right and click the Select button. Click once on any file name to load it in the editor, and make your changes. Don&#8217;t forget to save your changes (Update File) when you&#8217;re finished.') . '</p>' .		'<p>' . __('The Documentation menu below the editor lists the PHP functions recognized in the plugin file. Clicking Lookup takes you to a web page about that particular function.') . '</p>' .		'<p>' . __('If you want to make changes but don&#8217;t want them to be overwritten when the plugin is updated, you may be ready to think about writing your own plugin. For information on how to edit a plugin or start from scratch, check out the links below.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Editor_SubPanel" target="_blank">Documentation on Editing Plugins</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);	require_once('./admin-header.php');	update_recently_edited(WP_PLUGIN_DIR . '/' . $file);	$content = file_get_contents( $real_file );	if ( '.php' == substr( $real_file, strrpos( $real_file, '.' ) ) ) {		$functions = wp_doc_link_parse( $content );		if ( !empty($functions) ) {			$docs_select = '<select name="docs-list" id="docs-list">';			$docs_select .= '<option value="">' . __( 'Function Name&hellip;' ) . '</option>';			foreach ( $functions as $function) {				$docs_select .= '<option value="' . esc_attr( $function ) . '">' . esc_html( $function ) . '()</option>';			}			$docs_select .= '</select>';		}	}	$content = htmlspecialchars( $content );	?><?php if (isset($_GET['a'])) : ?> <div id="message" class="updated"><p><?php _e('File edited successfully.') ?></p></div><?php elseif (isset($_GET['phperror'])) : ?> <div id="message" class="updated"><p><?php _e('This plugin has been deactivated because your changes resulted in a <strong>fatal error</strong>.') ?></p>	<?php		if ( wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $file) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php bloginfo('wpurl'); ?>/wp-admin/plugins.php?action=error_scrape&amp;plugin=<?php echo esc_attr($file); ?>&amp;_wpnonce=<?php echo esc_attr($_GET['_error_nonce']); ?>"></iframe>	<?php } ?></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div class="fileedit-sub"><div class="alignleft"><big><?php	if ( is_plugin_active($plugin) ) {		if ( is_writeable($real_file) )			echo sprintf(__('Editing <strong>%s</strong> (active)'), $file);		else			echo sprintf(__('Browsing <strong>%s</strong> (active)'), $file);	} else {		if ( is_writeable($real_file) )			echo sprintf(__('Editing <strong>%s</strong> (inactive)'), $file);		else			echo sprintf(__('Browsing <strong>%s</strong> (inactive)'), $file);	}	?></big></div><div class="alignright">	<form action="plugin-editor.php" method="post">		<strong><label for="plugin"><?php _e('Select plugin to edit:'); ?> </label></strong>		<select name="plugin" id="plugin"><?php	foreach ( $plugins as $plugin_key => $a_plugin ) {		$plugin_name = $a_plugin['Name'];		if ( $plugin_key == $plugin )			$selected = " selected='selected'";		else			$selected = '';		$plugin_name = esc_attr($plugin_name);		$plugin_key = esc_attr($plugin_key);		echo "\n\t<option value=\"$plugin_key\" $selected>$plugin_name</option>";	}?>		</select>		<input type="submit" name="Submit" value="<?php esc_attr_e('Select') ?>" class="button" />	</form></div><br class="clear" /></div><div id="templateside">	<h3><?php _e('Plugin Files'); ?></h3>	<ul><?phpforeach ( $plugin_files as $plugin_file ) :	// Get the extension of the file	if ( preg_match('/\.([^.]+)$/', $plugin_file, $matches) ) {		$ext = strtolower($matches[1]);		// If extension is not in the acceptable list, skip it		if ( !in_array( $ext, $editable_extensions ) )			continue;	} else {		// No extension found		continue;	}?>		<li<?php echo $file == $plugin_file ? ' class="highlight"' : ''; ?>><a href="plugin-editor.php?file=<?php echo $plugin_file; ?>&amp;plugin=<?php echo $plugin; ?>"><?php echo $plugin_file ?></a></li><?php endforeach; ?>	</ul></div><form name="template" id="template" action="plugin-editor.php" method="post">	<?php wp_nonce_field('edit-plugin_' . $file) ?>		<div><textarea cols="70" rows="25" name="newcontent" id="newcontent" tabindex="1"><?php echo $content ?></textarea>		<input type="hidden" name="action" value="update" />		<input type="hidden" name="file" value="<?php echo esc_attr($file) ?>" />		<input type="hidden" name="plugin" value="<?php echo esc_attr($plugin) ?>" />		<input type="hidden" name="scrollto" id="scrollto" value="<?php echo $scrollto; ?>" />		</div>		<?php if ( !empty( $docs_select ) ) : ?>		<div id="documentation" class="hide-if-no-js"><label for="docs-list"><?php _e('Documentation:') ?></label> <?php echo $docs_select ?> <input type="button" class="button" value="<?php esc_attr_e( 'Lookup' ) ?> " onclick="if ( '' != jQuery('#docs-list').val() ) { window.open( 'http://api.wordpress.org/core/handbook/1.0/?function=' + escape( jQuery( '#docs-list' ).val() ) + '&amp;locale=<?php echo urlencode( get_locale() ) ?>&amp;version=<?php echo urlencode( $wp_version ) ?>&amp;redirect=true'); }" /></div>		<?php endif; ?><?php if ( is_writeable($real_file) ) : ?>	<?php if ( in_array( $file, (array) get_option( 'active_plugins', array() ) ) ) { ?>		<p><?php _e('<strong>Warning:</strong> Making changes to active plugins is not recommended.  If your changes cause a fatal error, the plugin will be automatically deactivated.'); ?></p>	<?php } ?>	<p class="submit">	<?php		if ( isset($_GET['phperror']) )			echo "<input type='hidden' name='phperror' value='1' /><input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File and Attempt to Reactivate') . "' tabindex='2' />";		else			echo "<input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File') . "' tabindex='2' />";	?>	</p><?php else : ?>	<p><em><?php _e('You need to make this file writable before you can save your changes. See <a href="http://codex.wordpress.org/Changing_File_Permissions">the Codex</a> for more information.'); ?></em></p><?php endif; ?></form><br class="clear" /></div><script type="text/javascript">/* <![CDATA[ */jQuery(document).ready(function($){	$('#template').submit(function(){ $('#scrollto').val( $('#newcontent').scrollTop() ); });	$('#newcontent').scrollTop( $('#scrollto').val() );});/* ]]> */</script><?php	break;}include("./admin-footer.php");
<?php/** * Taxonomy API * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 *///// Taxonomy Registration///** * Creates the initial taxonomies when 'init' action is fired. */function create_initial_taxonomies() {	register_taxonomy( 'category', 'post', array(		'hierarchical' => true,	 	'update_count_callback' => '_update_post_term_count',		'query_var' => false,		'rewrite' => false,		'public' => true,		'show_ui' => true,		'_builtin' => true,	) ) ;	register_taxonomy( 'post_tag', 'post', array(	 	'hierarchical' => false,		'update_count_callback' => '_update_post_term_count',		'query_var' => false,		'rewrite' => false,		'public' => true,		'show_ui' => true,		'_builtin' => true,	) );	register_taxonomy( 'nav_menu', 'nav_menu_item', array(		'hierarchical' => false,		'labels' => array(			'name' => __( 'Navigation Menus' ),			'singular_name' => __( 'Navigation Menu' ),		),		'query_var' => false,		'rewrite' => false,		'show_ui' => false,		'_builtin' => true,		'show_in_nav_menus' => false,	) ) ;	register_taxonomy( 'link_category', 'link', array(		'hierarchical' => false,		'labels' => array(			'name' => __( 'Categories' ),			'singular_name' => __( 'Category' ),			'update_item' => __( 'Update Category' ),		),		'query_var' => false,		'rewrite' => false,		'public' => false,		'show_ui' => false,		'_builtin' => true,	) ) ;}add_action( 'init', 'create_initial_taxonomies', 0 ); // highest priority/** * Get a list of registered taxonomy objects. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * @uses $wp_taxonomies * @see register_taxonomy * * @param array $args An array of key => value arguments to match against the taxonomy objects. * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of taxonomy names or objects */function get_taxonomies( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_taxonomies;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_taxonomies, $args, $operator, $field);}/** * Return all of the taxonomy names that are of $object_type. * * It appears that this function can be used to find all of the names inside of * $wp_taxonomies global variable. * * <code><?php $taxonomies = get_object_taxonomies('post'); ?></code> Should * result in <code>Array('category', 'post_tag')</code> * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wp_taxonomies * * @param array|string|object $object Name of the type of taxonomy object, or an object (row from posts) * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default. * @return array The names of all taxonomy of $object_type. */function get_object_taxonomies($object, $output = 'names') {	global $wp_taxonomies;	if ( is_object($object) ) {		if ( $object->post_type == 'attachment' )			return get_attachment_taxonomies($object);		$object = $object->post_type;	}	$object = (array) $object;	$taxonomies = array();	foreach ( (array) $wp_taxonomies as $tax_name => $tax_obj ) {		if ( array_intersect($object, (array) $tax_obj->object_type) ) {			if ( 'names' == $output )				$taxonomies[] = $tax_name;			else				$taxonomies[ $tax_name ] = $tax_obj;		}	}	return $taxonomies;}/** * Retrieves the taxonomy object of $taxonomy. * * The get_taxonomy function will first check that the parameter string given * is a taxonomy object and if it is, it will return it. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wp_taxonomies * @uses taxonomy_exists() Checks whether taxonomy exists * * @param string $taxonomy Name of taxonomy object to return * @return object|bool The Taxonomy Object or false if $taxonomy doesn't exist */function get_taxonomy( $taxonomy ) {	global $wp_taxonomies;	if ( ! taxonomy_exists( $taxonomy ) )		return false;	return $wp_taxonomies[$taxonomy];}/** * Checks that the taxonomy name exists. * * Formerly is_taxonomy(), introduced in 2.3.0. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * * @uses $wp_taxonomies * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy exists. */function taxonomy_exists( $taxonomy ) {	global $wp_taxonomies;	return isset( $wp_taxonomies[$taxonomy] );}/** * Whether the taxonomy object is hierarchical. * * Checks to make sure that the taxonomy is an object first. Then Gets the * object, and finally returns the hierarchical value in the object. * * A false return value might also mean that the taxonomy does not exist. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses taxonomy_exists() Checks whether taxonomy exists * @uses get_taxonomy() Used to get the taxonomy object * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy is hierarchical */function is_taxonomy_hierarchical($taxonomy) {	if ( ! taxonomy_exists($taxonomy) )		return false;	$taxonomy = get_taxonomy($taxonomy);	return $taxonomy->hierarchical;}/** * Create or modify a taxonomy object. Do not use before init. * * A simple function for creating or modifying a taxonomy object based on the * parameters given. The function will accept an array (third optional * parameter), along with strings for the taxonomy name and another string for * the object type. * * Nothing is returned, so expect error maybe or use taxonomy_exists() to check * whether taxonomy exists. * * Optional $args contents: * * label - Name of the taxonomy shown in the menu. Usually plural. If not set, labels['name'] will be used. * * hierarchical - has some defined purpose at other parts of the API and is a * boolean value. * * update_count_callback - works much like a hook, in that it will be called * when the count is updated. * * rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize * permastruct; default will use $taxonomy as slug. * * query_var - false to prevent queries, or string to customize query var * (?$query_var=$term); default will use $taxonomy as query var. * * public - If the taxonomy should be publically queryable; //@TODO not implemented. * defaults to true. * * show_ui - If the WordPress UI admin tags UI should apply to this taxonomy; * defaults to public. * * show_in_nav_menus - true makes this taxonomy available for selection in navigation menus. * Defaults to public. * * show_tagcloud - false to prevent the taxonomy being listed in the Tag Cloud Widget; * defaults to show_ui which defalts to public. * * labels - An array of labels for this taxonomy. You can see accepted values in {@link get_taxonomy_labels()}. By default tag labels are used for non-hierarchical types and category labels for hierarchical ones. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wp_taxonomies Inserts new taxonomy object into the list * @uses $wp_rewrite Adds rewrite tags and permastructs * @uses $wp Adds query vars * * @param string $taxonomy Name of taxonomy object * @param array|string $object_type Name of the object type for the taxonomy object. * @param array|string $args See above description for the two keys values. */function register_taxonomy( $taxonomy, $object_type, $args = array() ) {	global $wp_taxonomies, $wp_rewrite, $wp;	if ( ! is_array($wp_taxonomies) )		$wp_taxonomies = array();	$defaults = array(	'hierarchical' => false,						'update_count_callback' => '',						'rewrite' => true,						'query_var' => $taxonomy,						'public' => true,						'show_ui' => null,						'show_tagcloud' => null,						'_builtin' => false,						'labels' => array(),						'capabilities' => array(),						'show_in_nav_menus' => null,					);	$args = wp_parse_args($args, $defaults);	if ( false !== $args['query_var'] && !empty($wp) ) {		if ( true === $args['query_var'] )			$args['query_var'] = $taxonomy;		$args['query_var'] = sanitize_title_with_dashes($args['query_var']);		$wp->add_query_var($args['query_var']);	}	if ( false !== $args['rewrite'] && '' != get_option('permalink_structure') ) {		$args['rewrite'] = wp_parse_args($args['rewrite'], array(			'slug' => sanitize_title_with_dashes($taxonomy),			'with_front' => true,		));		$wp_rewrite->add_rewrite_tag("%$taxonomy%", '([^/]+)', $args['query_var'] ? "{$args['query_var']}=" : "taxonomy=$taxonomy&term=");		$wp_rewrite->add_permastruct($taxonomy, "{$args['rewrite']['slug']}/%$taxonomy%", $args['rewrite']['with_front']);	}	if ( is_null($args['show_ui']) )		$args['show_ui'] = $args['public'];	// Whether to show this type in nav-menus.php. Defaults to the setting for public.	if ( null === $args['show_in_nav_menus'] )		$args['show_in_nav_menus'] = $args['public'];	if ( is_null($args['show_tagcloud']) )		$args['show_tagcloud'] = $args['show_ui'];	$default_caps = array(		'manage_terms' => 'manage_categories',		'edit_terms'   => 'manage_categories',		'delete_terms' => 'manage_categories',		'assign_terms' => 'edit_posts',	);	$args['cap'] = (object) array_merge( $default_caps, $args['capabilities'] );	unset( $args['capabilities'] );	$args['name'] = $taxonomy;	$args['object_type'] = (array) $object_type;	$args['labels'] = get_taxonomy_labels( (object) $args );	$args['label'] = $args['labels']->name;	$wp_taxonomies[$taxonomy] = (object) $args;	// register callback handling for metabox 	add_filter('wp_ajax_add-'.$taxonomy, '_wp_ajax_add_hierarchical_term');}/** * Builds an object with all taxonomy labels out of a taxonomy object * * Accepted keys of the label array in the taxonomy object: * - name - general name for the taxonomy, usually plural. The same as and overriden by $tax->label. Default is Post Tags/Categories * - singular_name - name for one object of this taxonomy. Default is Post Tag/Category * - search_items - Default is Search Tags/Search Categories * - popular_items - This string isn't used on hierarchical taxonomies. Default is Popular Tags * - all_items - Default is All Tags/All Categories * - parent_item - This string isn't used on non-hierarchical taxonomies. In hierarchical ones the default is Parent Category * - parent_item_colon - The same as <code>parent_item</code>, but with colon <code>:</code> in the end * - edit_item - Default is Edit Tag/Edit Category * - update_item - Default is Update Tag/Update Category * - add_new_item - Default is Add New Tag/Add New Category * - new_item_name - Default is New Tag Name/New Category Name * - separate_items_with_commas - This string isn't used on hierarchical taxonomies. Default is "Separate tags with commas," used in the meta box. * - add_or_remove_items - This string isn't used on hierarchical taxonomies. Default is "Add or remove tags," used in the meta box when JavaScript is disabled. * - choose_from_most_used - This string isn't used on hierarchical taxonomies. Default is "Choose from the most used tags," used in the meta box. * * Above, the first default value is for non-hierarchical taxonomies (like tags) and the second one is for hierarchical taxonomies (like categories.) * * @since 3.0.0 * @param object $tax Taxonomy object * @return object object with all the labels as member variables */function get_taxonomy_labels( $tax ) {	if ( isset( $tax->helps ) && empty( $tax->labels['separate_items_with_commas'] ) )		$tax->labels['separate_items_with_commas'] = $tax->helps;	$nohier_vs_hier_defaults = array(		'name' => array( _x( 'Post Tags', 'taxonomy general name' ), _x( 'Categories', 'taxonomy general name' ) ),		'singular_name' => array( _x( 'Post Tag', 'taxonomy singular name' ), _x( 'Category', 'taxonomy singular name' ) ),		'search_items' => array( __( 'Search Tags' ), __( 'Search Categories' ) ),		'popular_items' => array( __( 'Popular Tags' ), null ),		'all_items' => array( __( 'All Tags' ), __( 'All Categories' ) ),		'parent_item' => array( null, __( 'Parent Category' ) ),		'parent_item_colon' => array( null, __( 'Parent Category:' ) ),		'edit_item' => array( __( 'Edit Tag' ), __( 'Edit Category' ) ),		'update_item' => array( __( 'Update Tag' ), __( 'Update Category' ) ),		'add_new_item' => array( __( 'Add New Tag' ), __( 'Add New Category' ) ),		'new_item_name' => array( __( 'New Tag Name' ), __( 'New Category Name' ) ),		'separate_items_with_commas' => array( __( 'Separate tags with commas' ), null ),		'add_or_remove_items' => array( __( 'Add or remove tags' ), null ),		'choose_from_most_used' => array( __( 'Choose from the most used tags' ), null ),	);	return _get_custom_object_labels( $tax, $nohier_vs_hier_defaults );}/** * Add an already registered taxonomy to an object type. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * @uses $wp_taxonomies Modifies taxonomy object * * @param string $taxonomy Name of taxonomy object * @param array|string $object_type Name of the object type * @return bool True if successful, false if not */function register_taxonomy_for_object_type( $taxonomy, $object_type) {	global $wp_taxonomies;	if ( !isset($wp_taxonomies[$taxonomy]) )		return false;	if ( ! get_post_type_object($object_type) )		return false;	$wp_taxonomies[$taxonomy]->object_type[] = $object_type;	return true;}//// Term API///** * Retrieve object_ids of valid taxonomy and term. * * The strings of $taxonomies must exist before this function will continue. On * failure of finding a valid taxonomy, it will return an WP_Error class, kind * of like Exceptions in PHP 5, except you can't catch them. Even so, you can * still test for the WP_Error class and get the error message. * * The $terms aren't checked the same as $taxonomies, but still need to exist * for $object_ids to be returned. * * It is possible to change the order that object_ids is returned by either * using PHP sort family functions or using the database by using $args with * either ASC or DESC array. The value should be in the key named 'order'. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses wp_parse_args() Creates an array from string $args. * * @param int|array $term_ids Term id or array of term ids of terms that will be used * @param string|array $taxonomies String of taxonomy name or Array of string values of taxonomy names * @param array|string $args Change the order of the object_ids, either ASC or DESC * @return WP_Error|array If the taxonomy does not exist, then WP_Error will be returned. On success *	the array can be empty meaning that there are no $object_ids found or it will return the $object_ids found. */function get_objects_in_term( $term_ids, $taxonomies, $args = array() ) {	global $wpdb;	if ( ! is_array( $term_ids ) )		$term_ids = array( $term_ids );	if ( ! is_array( $taxonomies ) )		$taxonomies = array( $taxonomies );	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists( $taxonomy ) )			return new WP_Error( 'invalid_taxonomy', __( 'Invalid Taxonomy' ) );	}	$defaults = array( 'order' => 'ASC' );	$args = wp_parse_args( $args, $defaults );	extract( $args, EXTR_SKIP );	$order = ( 'desc' == strtolower( $order ) ) ? 'DESC' : 'ASC';	$term_ids = array_map('intval', $term_ids );	$taxonomies = "'" . implode( "', '", $taxonomies ) . "'";	$term_ids = "'" . implode( "', '", $term_ids ) . "'";	$object_ids = $wpdb->get_col("SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy IN ($taxonomies) AND tt.term_id IN ($term_ids) ORDER BY tr.object_id $order");	if ( ! $object_ids )		return array();	return $object_ids;}/** * Get all Term data from database by Term ID. * * The usage of the get_term function is to apply filters to a term object. It * is possible to get a term object from the database before applying the * filters. * * $term ID must be part of $taxonomy, to get from the database. Failure, might * be able to be captured by the hooks. Failure would be the same value as $wpdb * returns for the get_row method. * * There are two hooks, one is specifically for each term, named 'get_term', and * the second is for the taxonomy name, 'term_$taxonomy'. Both hooks gets the * term object, and the taxonomy name as parameters. Both hooks are expected to * return a Term object. * * 'get_term' hook - Takes two parameters the term Object and the taxonomy name. * Must return term object. Used in get_term() as a catch-all filter for every * $term. * * 'get_$taxonomy' hook - Takes two parameters the term Object and the taxonomy * name. Must return term object. $taxonomy will be the taxonomy name, so for * example, if 'category', it would be 'get_category' as the filter name. Useful * for custom taxonomies or plugging into default taxonomies. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses sanitize_term() Cleanses the term based on $filter context before returning. * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param. * * @param int|object $term If integer, will get from database. If object will apply filters and return $term. * @param string $taxonomy Taxonomy name that $term is part of. * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional, default is raw or no WordPress defined filter will applied. * @return mixed|null|WP_Error Term Row from database. Will return null if $term is empty. If taxonomy does not * exist then WP_Error will be returned. */function &get_term($term, $taxonomy, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($term) ) {		$error = new WP_Error('invalid_term', __('Empty Term'));		return $error;	}	if ( ! taxonomy_exists($taxonomy) ) {		$error = new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));		return $error;	}	if ( is_object($term) && empty($term->filter) ) {		wp_cache_add($term->term_id, $term, $taxonomy);		$_term = $term;	} else {		if ( is_object($term) )			$term = $term->term_id;		$term = (int) $term;		if ( ! $_term = wp_cache_get($term, $taxonomy) ) {			$_term = $wpdb->get_row( $wpdb->prepare( "SELECT t.*, tt.* FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = %s AND t.term_id = %s LIMIT 1", $taxonomy, $term) );			if ( ! $_term )				return $null;			wp_cache_add($term, $_term, $taxonomy);		}	}	$_term = apply_filters('get_term', $_term, $taxonomy);	$_term = apply_filters("get_$taxonomy", $_term, $taxonomy);	$_term = sanitize_term($_term, $taxonomy, $filter);	if ( $output == OBJECT ) {		return $_term;	} elseif ( $output == ARRAY_A ) {		$__term = get_object_vars($_term);		return $__term;	} elseif ( $output == ARRAY_N ) {		$__term = array_values(get_object_vars($_term));		return $__term;	} else {		return $_term;	}}/** * Get all Term data from database by Term field and data. * * Warning: $value is not escaped for 'name' $field. You must do it yourself, if * required. * * The default $field is 'id', therefore it is possible to also use null for * field, but not recommended that you do so. * * If $value does not exist, the return value will be false. If $taxonomy exists * and $field and $value combinations exist, the Term will be returned. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses sanitize_term() Cleanses the term based on $filter context before returning. * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param. * * @param string $field Either 'slug', 'name', or 'id' * @param string|int $value Search for this term value * @param string $taxonomy Taxonomy Name * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional, default is raw or no WordPress defined filter will applied. * @return mixed Term Row from database. Will return false if $taxonomy does not exist or $term was not found. */function get_term_by($field, $value, $taxonomy, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return false;	if ( 'slug' == $field ) {		$field = 't.slug';		$value = sanitize_title($value);		if ( empty($value) )			return false;	} else if ( 'name' == $field ) {		// Assume already escaped		$value = stripslashes($value);		$field = 't.name';	} else {		return get_term( (int) $value, $taxonomy, $output, $filter);	}	$term = $wpdb->get_row( $wpdb->prepare( "SELECT t.*, tt.* FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = %s AND $field = %s LIMIT 1", $taxonomy, $value) );	if ( !$term )		return false;	wp_cache_add($term->term_id, $term, $taxonomy);	$term = apply_filters('get_term', $term, $taxonomy);	$term = apply_filters("get_$taxonomy", $term, $taxonomy);	$term = sanitize_term($term, $taxonomy, $filter);	if ( $output == OBJECT ) {		return $term;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($term);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($term));	} else {		return $term;	}}/** * Merge all term children into a single array of their IDs. * * This recursive function will merge all of the children of $term into the same * array of term IDs. Only useful for taxonomies which are hierarchical. * * Will return an empty array if $term does not exist in $taxonomy. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses _get_term_hierarchy() * @uses get_term_children() Used to get the children of both $taxonomy and the parent $term * * @param string $term ID of Term to get children * @param string $taxonomy Taxonomy Name * @return array|WP_Error List of Term Objects. WP_Error returned if $taxonomy does not exist */function get_term_children( $term_id, $taxonomy ) {	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	$term_id = intval( $term_id );	$terms = _get_term_hierarchy($taxonomy);	if ( ! isset($terms[$term_id]) )		return array();	$children = $terms[$term_id];	foreach ( (array) $terms[$term_id] as $child ) {		if ( isset($terms[$child]) )			$children = array_merge($children, get_term_children($child, $taxonomy));	}	return $children;}/** * Get sanitized Term field. * * Does checks for $term, based on the $taxonomy. The function is for contextual * reasons and for simplicity of usage. See sanitize_term_field() for more * information. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term_field() Passes the return value in sanitize_term_field on success. * * @param string $field Term field to fetch * @param int $term Term ID * @param string $taxonomy Taxonomy Name * @param string $context Optional, default is display. Look at sanitize_term_field() for available options. * @return mixed Will return an empty string if $term is not an object or if $field is not set in $term. */function get_term_field( $field, $term, $taxonomy, $context = 'display' ) {	$term = (int) $term;	$term = get_term( $term, $taxonomy );	if ( is_wp_error($term) )		return $term;	if ( !is_object($term) )		return '';	if ( !isset($term->$field) )		return '';	return sanitize_term_field($field, $term->$field, $term->term_id, $taxonomy, $context);}/** * Sanitizes Term for editing. * * Return value is sanitize_term() and usage is for sanitizing the term for * editing. Function is for contextual and simplicity. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term() Passes the return value on success * * @param int|object $id Term ID or Object * @param string $taxonomy Taxonomy Name * @return mixed|null|WP_Error Will return empty string if $term is not an object. */function get_term_to_edit( $id, $taxonomy ) {	$term = get_term( $id, $taxonomy );	if ( is_wp_error($term) )		return $term;	if ( !is_object($term) )		return '';	return sanitize_term($term, $taxonomy, 'edit');}/** * Retrieve the terms in a given taxonomy or list of taxonomies. * * You can fully inject any customizations to the query before it is sent, as * well as control the output with a filter. * * The 'get_terms' filter will be called when the cache has the term and will * pass the found term along with the array of $taxonomies and array of $args. * This filter is also called before the array of terms is passed and will pass * the array of terms, along with the $taxonomies and $args. * * The 'list_terms_exclusions' filter passes the compiled exclusions along with * the $args. * * The 'get_terms_orderby' filter passes the ORDER BY clause for the query * along with the $args array. * * The 'get_terms_fields' filter passes the fields for the SELECT query * along with the $args array. * * The list of arguments that $args can contain, which will overwrite the defaults: * * orderby - Default is 'name'. Can be name, count, term_group, slug or nothing * (will use term_id), Passing a custom value other than these will cause it to * order based on the custom value. * * order - Default is ASC. Can use DESC. * * hide_empty - Default is true. Will not return empty terms, which means * terms whose count is 0 according to the given taxonomy. * * exclude - Default is an empty array.  An array, comma- or space-delimited string * of term ids to exclude from the return array.  If 'include' is non-empty, * 'exclude' is ignored. * * exclude_tree - Default is an empty array.  An array, comma- or space-delimited * string of term ids to exclude from the return array, along with all of their * descendant terms according to the primary taxonomy.  If 'include' is non-empty, * 'exclude_tree' is ignored. * * include - Default is an empty array.  An array, comma- or space-delimited string * of term ids to include in the return array. * * number - The maximum number of terms to return.  Default is to return them all. * * offset - The number by which to offset the terms query. * * fields - Default is 'all', which returns an array of term objects. * If 'fields' is 'ids' or 'names', returns an array of * integers or strings, respectively. * * slug - Returns terms whose "slug" matches this value. Default is empty string. * * hierarchical - Whether to include terms that have non-empty descendants * (even if 'hide_empty' is set to true). * * search - Returned terms' names will contain the value of 'search', * case-insensitive.  Default is an empty string. * * name__like - Returned terms' names will begin with the value of 'name__like', * case-insensitive. Default is empty string. * * The argument 'pad_counts', if set to true will include the quantity of a term's * children in the quantity of each term's "count" object variable. * * The 'get' argument, if set to 'all' instead of its default empty string, * returns terms regardless of ancestry or whether the terms are empty. * * The 'child_of' argument, when used, should be set to the integer of a term ID.  Its default * is 0.  If set to a non-zero value, all returned terms will be descendants * of that term according to the given taxonomy.  Hence 'child_of' is set to 0 * if more than one taxonomy is passed in $taxonomies, because multiple taxonomies * make term ancestry ambiguous. * * The 'parent' argument, when used, should be set to the integer of a term ID.  Its default is * the empty string '', which has a different meaning from the integer 0. * If set to an integer value, all returned terms will have as an immediate * ancestor the term whose ID is specified by that integer according to the given taxonomy. * The 'parent' argument is different from 'child_of' in that a term X is considered a 'parent' * of term Y only if term X is the father of term Y, not its grandfather or great-grandfather, etc. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses wp_parse_args() Merges the defaults with those defined by $args and allows for strings. * * @param string|array Taxonomy name or list of Taxonomy names * @param string|array $args The values of what to search for when returning terms * @return array|WP_Error List of Term Objects and their children. Will return WP_Error, if any of $taxonomies do not exist. */function &get_terms($taxonomies, $args = '') {	global $wpdb;	$empty_array = array();	$single_taxonomy = false;	if ( !is_array($taxonomies) ) {		$single_taxonomy = true;		$taxonomies = array($taxonomies);	}	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists($taxonomy) ) {			$error = & new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));			return $error;		}	}	$in_taxonomies = "'" . implode("', '", $taxonomies) . "'";	$defaults = array('orderby' => 'name', 'order' => 'ASC',		'hide_empty' => true, 'exclude' => array(), 'exclude_tree' => array(), 'include' => array(),		'number' => '', 'fields' => 'all', 'slug' => '', 'parent' => '',		'hierarchical' => true, 'child_of' => 0, 'get' => '', 'name__like' => '',		'pad_counts' => false, 'offset' => '', 'search' => '');	$args = wp_parse_args( $args, $defaults );	$args['number'] = absint( $args['number'] );	$args['offset'] = absint( $args['offset'] );	if ( !$single_taxonomy || !is_taxonomy_hierarchical($taxonomies[0]) ||		'' !== $args['parent'] ) {		$args['child_of'] = 0;		$args['hierarchical'] = false;		$args['pad_counts'] = false;	}	if ( 'all' == $args['get'] ) {		$args['child_of'] = 0;		$args['hide_empty'] = 0;		$args['hierarchical'] = false;		$args['pad_counts'] = false;	}	extract($args, EXTR_SKIP);	if ( $child_of ) {		$hierarchy = _get_term_hierarchy($taxonomies[0]);		if ( !isset($hierarchy[$child_of]) )			return $empty_array;	}	if ( $parent ) {		$hierarchy = _get_term_hierarchy($taxonomies[0]);		if ( !isset($hierarchy[$parent]) )			return $empty_array;	}	// $args can be whatever, only use the args defined in defaults to compute the key	$filter_key = ( has_filter('list_terms_exclusions') ) ? serialize($GLOBALS['wp_filter']['list_terms_exclusions']) : '';	$key = md5( serialize( compact(array_keys($defaults)) ) . serialize( $taxonomies ) . $filter_key );	$last_changed = wp_cache_get('last_changed', 'terms');	if ( !$last_changed ) {		$last_changed = time();		wp_cache_set('last_changed', $last_changed, 'terms');	}	$cache_key = "get_terms:$key:$last_changed";	$cache = wp_cache_get( $cache_key, 'terms' );	if ( false !== $cache ) {		$cache = apply_filters('get_terms', $cache, $taxonomies, $args);		return $cache;	}	$_orderby = strtolower($orderby);	if ( 'count' == $_orderby )		$orderby = 'tt.count';	else if ( 'name' == $_orderby )		$orderby = 't.name';	else if ( 'slug' == $_orderby )		$orderby = 't.slug';	else if ( 'term_group' == $_orderby )		$orderby = 't.term_group';	else if ( 'none' == $_orderby )		$orderby = '';	elseif ( empty($_orderby) || 'id' == $_orderby )		$orderby = 't.term_id';	$orderby = apply_filters( 'get_terms_orderby', $orderby, $args );	if ( !empty($orderby) )		$orderby = "ORDER BY $orderby";	else		$order = '';	$where = '';	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';		$exclude_tree = '';		$interms = wp_parse_id_list($include);		foreach ( $interms as $interm ) {			if ( empty($inclusions) )				$inclusions = ' AND ( t.term_id = ' . intval($interm) . ' ';			else				$inclusions .= ' OR t.term_id = ' . intval($interm) . ' ';		}	}	if ( !empty($inclusions) )		$inclusions .= ')';	$where .= $inclusions;	$exclusions = '';	if ( !empty( $exclude_tree ) ) {		$excluded_trunks = wp_parse_id_list($exclude_tree);		foreach ( $excluded_trunks as $extrunk ) {			$excluded_children = (array) get_terms($taxonomies[0], array('child_of' => intval($extrunk), 'fields' => 'ids'));			$excluded_children[] = $extrunk;			foreach( $excluded_children as $exterm ) {				if ( empty($exclusions) )					$exclusions = ' AND ( t.term_id <> ' . intval($exterm) . ' ';				else					$exclusions .= ' AND t.term_id <> ' . intval($exterm) . ' ';			}		}	}	if ( !empty($exclude) ) {		$exterms = wp_parse_id_list($exclude);		foreach ( $exterms as $exterm ) {			if ( empty($exclusions) )				$exclusions = ' AND ( t.term_id <> ' . intval($exterm) . ' ';			else				$exclusions .= ' AND t.term_id <> ' . intval($exterm) . ' ';		}	}	if ( !empty($exclusions) )		$exclusions .= ')';	$exclusions = apply_filters('list_terms_exclusions', $exclusions, $args );	$where .= $exclusions;	if ( !empty($slug) ) {		$slug = sanitize_title($slug);		$where .= " AND t.slug = '$slug'";	}	if ( !empty($name__like) )		$where .= " AND t.name LIKE '{$name__like}%'";	if ( '' !== $parent ) {		$parent = (int) $parent;		$where .= " AND tt.parent = '$parent'";	}	if ( $hide_empty && !$hierarchical )		$where .= ' AND tt.count > 0';	// don't limit the query results when we have to descend the family tree	if ( ! empty($number) && ! $hierarchical && empty( $child_of ) && '' === $parent ) {		if ( $offset )			$limit = 'LIMIT ' . $offset . ',' . $number;		else			$limit = 'LIMIT ' . $number;	} else {		$limit = '';	}	if ( !empty($search) ) {		$search = like_escape($search);		$where .= " AND (t.name LIKE '%$search%')";	}	$selects = array();	switch ( $fields ) { 		case 'all': 			$selects = array('t.*', 'tt.*'); 			break; 		case 'ids':		case 'id=>parent': 			$selects = array('t.term_id', 'tt.parent', 'tt.count'); 			break; 		case 'names': 			$selects = array('t.term_id', 'tt.parent', 'tt.count', 't.name'); 			break; 		case 'count':			$orderby = '';			$order = ''; 			$selects = array('COUNT(*)'); 	}    $select_this = implode(', ', apply_filters( 'get_terms_fields', $selects, $args ));	$query = "SELECT $select_this FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy IN ($in_taxonomies) $where $orderby $order $limit";	if ( 'count' == $fields ) {		$term_count = $wpdb->get_var($query);		return $term_count;	}	$terms = $wpdb->get_results($query);	if ( 'all' == $fields ) {		update_term_cache($terms);	}	if ( empty($terms) ) {		wp_cache_add( $cache_key, array(), 'terms' );		$terms = apply_filters('get_terms', array(), $taxonomies, $args);		return $terms;	}	if ( $child_of ) {		$children = _get_term_hierarchy($taxonomies[0]);		if ( ! empty($children) )			$terms = & _get_term_children($child_of, $terms, $taxonomies[0]);	}	// Update term counts to include children.	if ( $pad_counts && 'all' == $fields )		_pad_term_counts($terms, $taxonomies[0]);	// Make sure we show empty categories that have children.	if ( $hierarchical && $hide_empty && is_array($terms) ) {		foreach ( $terms as $k => $term ) {			if ( ! $term->count ) {				$children = _get_term_children($term->term_id, $terms, $taxonomies[0]);				if ( is_array($children) )					foreach ( $children as $child )						if ( $child->count )							continue 2;				// It really is empty				unset($terms[$k]);			}		}	}	reset ( $terms );	$_terms = array();	if ( 'id=>parent' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[$term->term_id] = $term->parent;		$terms = $_terms;	} elseif ( 'ids' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[] = $term->term_id;		$terms = $_terms;	} elseif ( 'names' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[] = $term->name;		$terms = $_terms;	}	if ( 0 < $number && intval(@count($terms)) > $number ) {		$terms = array_slice($terms, $offset, $number);	}	wp_cache_add( $cache_key, $terms, 'terms' );	$terms = apply_filters('get_terms', $terms, $taxonomies, $args);	return $terms;}/** * Check if Term exists. * * Returns the index of a defined term, or 0 (false) if the term doesn't exist. * * Formerly is_term(), introduced in 2.3.0. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * * @uses $wpdb * * @param int|string $term The term to check * @param string $taxonomy The taxonomy name to use * @param int $parent ID of parent term under which to confine the exists search. * @return mixed Get the term id or Term Object, if exists. */function term_exists($term, $taxonomy = '', $parent = 0) {	global $wpdb;	$select = "SELECT term_id FROM $wpdb->terms as t WHERE ";	$tax_select = "SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE ";	if ( is_int($term) ) {		if ( 0 == $term )			return 0;		$where = 't.term_id = %d';		if ( !empty($taxonomy) )			return $wpdb->get_row( $wpdb->prepare( $tax_select . $where . " AND tt.taxonomy = %s", $term, $taxonomy ), ARRAY_A );		else			return $wpdb->get_var( $wpdb->prepare( $select . $where, $term ) );	}	$term = trim( stripslashes( $term ) );	if ( '' === $slug = sanitize_title($term) )		return 0;	$where = 't.slug = %s';	$else_where = 't.name = %s';	$where_fields = array($slug);	$else_where_fields = array($term);	if ( !empty($taxonomy) ) {		$parent = (int) $parent;		if ( $parent > 0 ) {			$where_fields[] = $parent;			$else_where_fields[] = $parent;			$where .= ' AND tt.parent = %d';			$else_where .= ' AND tt.parent = %d';		}		$where_fields[] = $taxonomy;		$else_where_fields[] = $taxonomy;		if ( $result = $wpdb->get_row( $wpdb->prepare("SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE $where AND tt.taxonomy = %s", $where_fields), ARRAY_A) )			return $result;		return $wpdb->get_row( $wpdb->prepare("SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE $else_where AND tt.taxonomy = %s", $else_where_fields), ARRAY_A);	}	if ( $result = $wpdb->get_var( $wpdb->prepare("SELECT term_id FROM $wpdb->terms as t WHERE $where", $where_fields) ) )		return $result;	return $wpdb->get_var( $wpdb->prepare("SELECT term_id FROM $wpdb->terms as t WHERE $else_where", $else_where_fields) );}/** * Sanitize Term all fields. * * Relys on sanitize_term_field() to sanitize the term. The difference is that * this function will sanitize <strong>all</strong> fields. The context is based * on sanitize_term_field(). * * The $term is expected to be either an array or an object. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term_field Used to sanitize all fields in a term * * @param array|object $term The term to check * @param string $taxonomy The taxonomy name to use * @param string $context Default is 'display'. * @return array|object Term with all fields sanitized */function sanitize_term($term, $taxonomy, $context = 'display') {	if ( 'raw' == $context )		return $term;	$fields = array('term_id', 'name', 'description', 'slug', 'count', 'parent', 'term_group');	$do_object = false;	if ( is_object($term) )		$do_object = true;	$term_id = $do_object ? $term->term_id : (isset($term['term_id']) ? $term['term_id'] : 0);	foreach ( (array) $fields as $field ) {		if ( $do_object ) {			if ( isset($term->$field) )				$term->$field = sanitize_term_field($field, $term->$field, $term_id, $taxonomy, $context);		} else {			if ( isset($term[$field]) )				$term[$field] = sanitize_term_field($field, $term[$field], $term_id, $taxonomy, $context);		}	}	if ( $do_object )		$term->filter = $context;	else		$term['filter'] = $context;	return $term;}/** * Cleanse the field value in the term based on the context. * * Passing a term field value through the function should be assumed to have * cleansed the value for whatever context the term field is going to be used. * * If no context or an unsupported context is given, then default filters will * be applied. * * There are enough filters for each context to support a custom filtering * without creating your own filter function. Simply create a function that * hooks into the filter you need. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * * @param string $field Term field to sanitize * @param string $value Search for this term value * @param int $term_id Term ID * @param string $taxonomy Taxonomy Name * @param string $context Either edit, db, display, attribute, or js. * @return mixed sanitized field */function sanitize_term_field($field, $value, $term_id, $taxonomy, $context) {	if ( 'parent' == $field  || 'term_id' == $field || 'count' == $field || 'term_group' == $field ) {		$value = (int) $value;		if ( $value < 0 )			$value = 0;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$value = apply_filters("edit_term_$field", $value, $term_id, $taxonomy);		$value = apply_filters("edit_${taxonomy}_$field", $value, $term_id);		if ( 'description' == $field )			$value = format_to_edit($value);		else			$value = esc_attr($value);	} else if ( 'db' == $context ) {		$value = apply_filters("pre_term_$field", $value, $taxonomy);		$value = apply_filters("pre_${taxonomy}_$field", $value);		// Back compat filters		if ( 'slug' == $field )			$value = apply_filters('pre_category_nicename', $value);	} else if ( 'rss' == $context ) {		$value = apply_filters("term_${field}_rss", $value, $taxonomy);		$value = apply_filters("${taxonomy}_${field}_rss", $value);	} else {		// Use display filters by default.		$value = apply_filters("term_$field", $value, $term_id, $taxonomy, $context);		$value = apply_filters("${taxonomy}_$field", $value, $term_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Count how many terms are in Taxonomy. * * Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' => true). * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses get_terms() * @uses wp_parse_args() Turns strings into arrays and merges defaults into an array. * * @param string $taxonomy Taxonomy name * @param array|string $args Overwrite defaults. See get_terms() * @return int How many terms are in $taxonomy */function wp_count_terms( $taxonomy, $args = array() ) {	$defaults = array('hide_empty' => false);	$args = wp_parse_args($args, $defaults);	// backwards compatibility	if ( isset($args['ignore_empty']) ) {		$args['hide_empty'] = $args['ignore_empty'];		unset($args['ignore_empty']);	}	$args['fields'] = 'count';	return get_terms($taxonomy, $args);}/** * Will unlink the term from the taxonomy. * * Will remove the term's relationship to the taxonomy, not the term or taxonomy * itself. The term and taxonomy will still exist. Will require the term's * object ID to perform the operation. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int $object_id The term Object Id that refers to the term * @param string|array $taxonomy List of Taxonomy Names or single Taxonomy name. */function wp_delete_object_term_relationships( $object_id, $taxonomies ) {	global $wpdb;	$object_id = (int) $object_id;	if ( !is_array($taxonomies) )		$taxonomies = array($taxonomies);	foreach ( (array) $taxonomies as $taxonomy ) {		$tt_ids = wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids'));		$in_tt_ids = "'" . implode("', '", $tt_ids) . "'";		do_action( 'delete_term_relationships', $object_id, $tt_ids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id IN ($in_tt_ids)", $object_id) );		do_action( 'deleted_term_relationships', $object_id, $tt_ids );		wp_update_term_count($tt_ids, $taxonomy);	}}/** * Removes a term from the database. * * If the term is a parent of other terms, then the children will be updated to * that term's parent. * * The $args 'default' will only override the terms found, if there is only one * term found. Any other and the found terms are used. * * The $args 'force_default' will force the term supplied as default to be * assigned even if the object was not going to be termless * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses do_action() Calls both 'delete_term' and 'delete_$taxonomy' action *	hooks, passing term object, term id. 'delete_term' gets an additional *	parameter with the $taxonomy parameter. * * @param int $term Term ID * @param string $taxonomy Taxonomy Name * @param array|string $args Optional. Change 'default' term id and override found term ids. * @return bool|WP_Error Returns false if not term; true if completes delete action. */function wp_delete_term( $term, $taxonomy, $args = array() ) {	global $wpdb;	$term = (int) $term;	if ( ! $ids = term_exists($term, $taxonomy) )		return false;	if ( is_wp_error( $ids ) )		return $ids;	$tt_id = $ids['term_taxonomy_id'];	$defaults = array();	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	if ( isset($default) ) {		$default = (int) $default;		if ( ! term_exists($default, $taxonomy) )			unset($default);	}	// Update children to point to new parent	if ( is_taxonomy_hierarchical($taxonomy) ) {		$term_obj = get_term($term, $taxonomy);		if ( is_wp_error( $term_obj ) )			return $term_obj;		$parent = $term_obj->parent;		$edit_tt_ids = $wpdb->get_col( "SELECT `term_taxonomy_id` FROM $wpdb->term_taxonomy WHERE `parent` = " . (int)$term_obj->term_id );		do_action( 'edit_term_taxonomies', $edit_tt_ids );		$wpdb->update( $wpdb->term_taxonomy, compact( 'parent' ), array( 'parent' => $term_obj->term_id) + compact( 'taxonomy' ) );		do_action( 'edited_term_taxonomies', $edit_tt_ids );	}	$objects = $wpdb->get_col( $wpdb->prepare( "SELECT object_id FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $tt_id ) );	foreach ( (array) $objects as $object ) {		$terms = wp_get_object_terms($object, $taxonomy, array('fields' => 'ids', 'orderby' => 'none'));		if ( 1 == count($terms) && isset($default) ) {			$terms = array($default);		} else {			$terms = array_diff($terms, array($term));			if (isset($default) && isset($force_default) && $force_default)				$terms = array_merge($terms, array($default));		}		$terms = array_map('intval', $terms);		wp_set_object_terms($object, $terms, $taxonomy);	}	do_action( 'delete_term_taxonomy', $tt_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->term_taxonomy WHERE term_taxonomy_id = %d", $tt_id ) );	do_action( 'deleted_term_taxonomy', $tt_id );	// Delete the term if no taxonomies use it.	if ( !$wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_taxonomy WHERE term_id = %d", $term) ) )		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->terms WHERE term_id = %d", $term) );	clean_term_cache($term, $taxonomy);	do_action('delete_term', $term, $tt_id, $taxonomy);	do_action("delete_$taxonomy", $term, $tt_id);	return true;}/** * Retrieves the terms associated with the given object(s), in the supplied taxonomies. * * The following information has to do the $args parameter and for what can be * contained in the string or array of that parameter, if it exists. * * The first argument is called, 'orderby' and has the default value of 'name'. * The other value that is supported is 'count'. * * The second argument is called, 'order' and has the default value of 'ASC'. * The only other value that will be acceptable is 'DESC'. * * The final argument supported is called, 'fields' and has the default value of * 'all'. There are multiple other options that can be used instead. Supported * values are as follows: 'all', 'ids', 'names', and finally * 'all_with_object_id'. * * The fields argument also decides what will be returned. If 'all' or * 'all_with_object_id' is choosen or the default kept intact, then all matching * terms objects will be returned. If either 'ids' or 'names' is used, then an * array of all matching term ids or term names will be returned respectively. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $object_id The id of the object(s) to retrieve. * @param string|array $taxonomies The taxonomies to retrieve terms from. * @param array|string $args Change what is returned * @return array|WP_Error The requested term data or empty array if no terms found. WP_Error if $taxonomy does not exist. */function wp_get_object_terms($object_ids, $taxonomies, $args = array()) {	global $wpdb;	if ( !is_array($taxonomies) )		$taxonomies = array($taxonomies);	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists($taxonomy) )			return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	}	if ( !is_array($object_ids) )		$object_ids = array($object_ids);	$object_ids = array_map('intval', $object_ids);	$defaults = array('orderby' => 'name', 'order' => 'ASC', 'fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$terms = array();	if ( count($taxonomies) > 1 ) {		foreach ( $taxonomies as $index => $taxonomy ) {			$t = get_taxonomy($taxonomy);			if ( isset($t->args) && is_array($t->args) && $args != array_merge($args, $t->args) ) {				unset($taxonomies[$index]);				$terms = array_merge($terms, wp_get_object_terms($object_ids, $taxonomy, array_merge($args, $t->args)));			}		}	} else {		$t = get_taxonomy($taxonomies[0]);		if ( isset($t->args) && is_array($t->args) )			$args = array_merge($args, $t->args);	}	extract($args, EXTR_SKIP);	if ( 'count' == $orderby )		$orderby = 'tt.count';	else if ( 'name' == $orderby )		$orderby = 't.name';	else if ( 'slug' == $orderby )		$orderby = 't.slug';	else if ( 'term_group' == $orderby )		$orderby = 't.term_group';	else if ( 'term_order' == $orderby )		$orderby = 'tr.term_order';	else if ( 'none' == $orderby ) {		$orderby = '';		$order = '';	} else {		$orderby = 't.term_id';	}	// tt_ids queries can only be none or tr.term_taxonomy_id	if ( ('tt_ids' == $fields) && !empty($orderby) )		$orderby = 'tr.term_taxonomy_id';	if ( !empty($orderby) )		$orderby = "ORDER BY $orderby";	$taxonomies = "'" . implode("', '", $taxonomies) . "'";	$object_ids = implode(', ', $object_ids);	$select_this = '';	if ( 'all' == $fields )		$select_this = 't.*, tt.*';	else if ( 'ids' == $fields )		$select_this = 't.term_id';	else if ( 'names' == $fields )		$select_this = 't.name';	else if ( 'all_with_object_id' == $fields )		$select_this = 't.*, tt.*, tr.object_id';	$query = "SELECT $select_this FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON tt.term_id = t.term_id INNER JOIN $wpdb->term_relationships AS tr ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy IN ($taxonomies) AND tr.object_id IN ($object_ids) $orderby $order";	if ( 'all' == $fields || 'all_with_object_id' == $fields ) {		$terms = array_merge($terms, $wpdb->get_results($query));		update_term_cache($terms);	} else if ( 'ids' == $fields || 'names' == $fields ) {		$terms = array_merge($terms, $wpdb->get_col($query));	} else if ( 'tt_ids' == $fields ) {		$terms = $wpdb->get_col("SELECT tr.term_taxonomy_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tr.object_id IN ($object_ids) AND tt.taxonomy IN ($taxonomies) $orderby $order");	}	if ( ! $terms )		$terms = array();	return apply_filters('wp_get_object_terms', $terms, $object_ids, $taxonomies, $args);}/** * Adds a new term to the database. Optionally marks it as an alias of an existing term. * * Error handling is assigned for the nonexistance of the $taxonomy and $term * parameters before inserting. If both the term id and taxonomy exist * previously, then an array will be returned that contains the term id and the * contents of what is returned. The keys of the array are 'term_id' and * 'term_taxonomy_id' containing numeric values. * * It is assumed that the term does not yet exist or the above will apply. The * term will be first added to the term table and then related to the taxonomy * if everything is well. If everything is correct, then several actions will be * run prior to a filter and then several actions will be run after the filter * is run. * * The arguments decide how the term is handled based on the $args parameter. * The following is a list of the available overrides and the defaults. * * 'alias_of'. There is no default, but if added, expected is the slug that the * term will be an alias of. Expected to be a string. * * 'description'. There is no default. If exists, will be added to the database * along with the term. Expected to be a string. * * 'parent'. Expected to be numeric and default is 0 (zero). Will assign value * of 'parent' to the term. * * 'slug'. Expected to be a string. There is no default. * * If 'slug' argument exists then the slug will be checked to see if it is not * a valid term. If that check succeeds (it is not a valid term), then it is * added and the term id is given. If it fails, then a check is made to whether * the taxonomy is hierarchical and the parent argument is not empty. If the * second check succeeds, the term will be inserted and the term id will be * given. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @uses apply_filters() Calls 'pre_insert_term' hook with term and taxonomy as parameters. * @uses do_action() Calls 'create_term' hook with the term id and taxonomy id as parameters. * @uses do_action() Calls 'create_$taxonomy' hook with term id and taxonomy id as parameters. * @uses apply_filters() Calls 'term_id_filter' hook with term id and taxonomy id as parameters. * @uses do_action() Calls 'created_term' hook with the term id and taxonomy id as parameters. * @uses do_action() Calls 'created_$taxonomy' hook with term id and taxonomy id as parameters. * * @param string $term The term to add or update. * @param string $taxonomy The taxonomy to which to add the term * @param array|string $args Change the values of the inserted term * @return array|WP_Error The Term ID and Term Taxonomy ID */function wp_insert_term( $term, $taxonomy, $args = array() ) {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid taxonomy'));	$term = apply_filters( 'pre_insert_term', $term, $taxonomy );		if ( is_wp_error( $term ) )			return $term;	if ( is_int($term) && 0 == $term )		return new WP_Error('invalid_term_id', __('Invalid term ID'));	if ( '' == trim($term) )		return new WP_Error('empty_term_name', __('A name is required for this term'));	$defaults = array( 'alias_of' => '', 'description' => '', 'parent' => 0, 'slug' => '');	$args = wp_parse_args($args, $defaults);	$args['name'] = $term;	$args['taxonomy'] = $taxonomy;	$args = sanitize_term($args, $taxonomy, 'db');	extract($args, EXTR_SKIP);	// expected_slashed ($name)	$name = stripslashes($name);	$description = stripslashes($description);	if ( empty($slug) )		$slug = sanitize_title($name);	$term_group = 0;	if ( $alias_of ) {		$alias = $wpdb->get_row( $wpdb->prepare( "SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $alias_of) );		if ( $alias->term_group ) {			// The alias we want is already in a group, so let's use that one.			$term_group = $alias->term_group;		} else {			// The alias isn't in a group, so let's create a new one and firstly add the alias term to it.			$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms") + 1;			do_action( 'edit_terms', $alias->term_id );			$wpdb->update($wpdb->terms, compact('term_group'), array('term_id' => $alias->term_id) );			do_action( 'edited_terms', $alias->term_id );		}	}	if ( $term_id = term_exists($slug) ) {		$existing_term = $wpdb->get_row( $wpdb->prepare( "SELECT name FROM $wpdb->terms WHERE term_id = %d", $term_id), ARRAY_A );		// We've got an existing term in the same taxonomy, which matches the name of the new term:		if ( is_taxonomy_hierarchical($taxonomy) && $existing_term['name'] == $name && term_exists( (int) $term_id, $taxonomy ) ) {			// Hierarchical, and it matches an existing term, Do not allow same "name" in the same level.			$siblings = get_terms($taxonomy, array('fields' => 'names', 'get' => 'all', 'parent' => (int)$parent) );			if ( in_array($name, $siblings) ) {				return new WP_Error('term_exists', __('A term with the name provided already exists with this parent.'));			} else {				$slug = wp_unique_term_slug($slug, (object) $args);				if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )					return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);				$term_id = (int) $wpdb->insert_id;			}		} elseif ( $existing_term['name'] != $name ) {			// We've got an existing term, with a different name, Create the new term.			$slug = wp_unique_term_slug($slug, (object) $args);			if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )				return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);			$term_id = (int) $wpdb->insert_id;		} elseif ( term_exists( (int) $term_id, $taxonomy ) )  {			// Same name, same slug.			return new WP_Error('term_exists', __('A term with the name provided already exists.'));		}	} else {		// This term does not exist at all in the database, Create it.		$slug = wp_unique_term_slug($slug, (object) $args);		if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )			return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);		$term_id = (int) $wpdb->insert_id;	}	// Seems unreachable, However, Is used in the case that a term name is provided, which sanitizes to an empty string.	if ( empty($slug) ) {		$slug = sanitize_title($slug, $term_id);		do_action( 'edit_terms', $term_id );		$wpdb->update( $wpdb->terms, compact( 'slug' ), compact( 'term_id' ) );		do_action( 'edited_terms', $term_id );	}	$tt_id = $wpdb->get_var( $wpdb->prepare( "SELECT tt.term_taxonomy_id FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = %s AND t.term_id = %d", $taxonomy, $term_id ) );	if ( !empty($tt_id) )		return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);	$wpdb->insert( $wpdb->term_taxonomy, compact( 'term_id', 'taxonomy', 'description', 'parent') + array( 'count' => 0 ) );	$tt_id = (int) $wpdb->insert_id;	do_action("create_term", $term_id, $tt_id, $taxonomy);	do_action("create_$taxonomy", $term_id, $tt_id);	$term_id = apply_filters('term_id_filter', $term_id, $tt_id);	clean_term_cache($term_id, $taxonomy);	do_action("created_term", $term_id, $tt_id, $taxonomy);	do_action("created_$taxonomy", $term_id, $tt_id);	return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);}/** * Create Term and Taxonomy Relationships. * * Relates an object (post, link etc) to a term and taxonomy type. Creates the * term and taxonomy relationship if it doesn't already exist. Creates a term if * it doesn't exist (using the slug). * * A relationship means that the term is grouped in or belongs to the taxonomy. * A term has no meaning until it is given context by defining which taxonomy it * exists under. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int $object_id The object to relate to. * @param array|int|string $term The slug or id of the term, will replace all existing * related terms in this taxonomy. * @param array|string $taxonomy The context in which to relate the term to the object. * @param bool $append If false will delete difference of terms. * @return array|WP_Error Affected Term IDs */function wp_set_object_terms($object_id, $terms, $taxonomy, $append = false) {	global $wpdb;	$object_id = (int) $object_id;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	if ( !is_array($terms) )		$terms = array($terms);	if ( ! $append )		$old_tt_ids =  wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids', 'orderby' => 'none'));	else		$old_tt_ids = array();	$tt_ids = array();	$term_ids = array();	foreach ( (array) $terms as $term) {		if ( !strlen(trim($term)) )			continue;		if ( !$term_info = term_exists($term, $taxonomy) ) {			// Skip if a non-existent term ID is passed.			if ( is_int($term) )				continue;			$term_info = wp_insert_term($term, $taxonomy);		}		if ( is_wp_error($term_info) )			return $term_info;		$term_ids[] = $term_info['term_id'];		$tt_id = $term_info['term_taxonomy_id'];		$tt_ids[] = $tt_id;		if ( $wpdb->get_var( $wpdb->prepare( "SELECT term_taxonomy_id FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id = %d", $object_id, $tt_id ) ) )			continue;		do_action( 'add_term_relationship', $object_id, $tt_id );		$wpdb->insert( $wpdb->term_relationships, array( 'object_id' => $object_id, 'term_taxonomy_id' => $tt_id ) );		do_action( 'added_term_relationship', $object_id, $tt_id );	}	wp_update_term_count($tt_ids, $taxonomy);	if ( ! $append ) {		$delete_terms = array_diff($old_tt_ids, $tt_ids);		if ( $delete_terms ) {			$in_delete_terms = "'" . implode("', '", $delete_terms) . "'";			do_action( 'delete_term_relationships', $object_id, $delete_terms );			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id IN ($in_delete_terms)", $object_id) );			do_action( 'deleted_term_relationships', $object_id, $delete_terms );			wp_update_term_count($delete_terms, $taxonomy);		}	}	$t = get_taxonomy($taxonomy);	if ( ! $append && isset($t->sort) && $t->sort ) {		$values = array();		$term_order = 0;		$final_tt_ids = wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids'));		foreach ( $tt_ids as $tt_id )			if ( in_array($tt_id, $final_tt_ids) )				$values[] = $wpdb->prepare( "(%d, %d, %d)", $object_id, $tt_id, ++$term_order);		if ( $values )			$wpdb->query("INSERT INTO $wpdb->term_relationships (object_id, term_taxonomy_id, term_order) VALUES " . join(',', $values) . " ON DUPLICATE KEY UPDATE term_order = VALUES(term_order)");	}	do_action('set_object_terms', $object_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids);	return $tt_ids;}/** * Will make slug unique, if it isn't already. * * The $slug has to be unique global to every taxonomy, meaning that one * taxonomy term can't have a matching slug with another taxonomy term. Each * slug has to be globally unique for every taxonomy. * * The way this works is that if the taxonomy that the term belongs to is * hierarchical and has a parent, it will append that parent to the $slug. * * If that still doesn't return an unique slug, then it try to append a number * until it finds a number that is truely unique. * * The only purpose for $term is for appending a parent, if one exists. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param string $slug The string that will be tried for a unique slug * @param object $term The term object that the $slug will belong too * @return string Will return a true unique slug. */function wp_unique_term_slug($slug, $term) {	global $wpdb;	if ( ! term_exists( $slug ) )		return $slug;	// If the taxonomy supports hierarchy and the term has a parent, make the slug unique	// by incorporating parent slugs.	if ( is_taxonomy_hierarchical($term->taxonomy) && !empty($term->parent) ) {		$the_parent = $term->parent;		while ( ! empty($the_parent) ) {			$parent_term = get_term($the_parent, $term->taxonomy);			if ( is_wp_error($parent_term) || empty($parent_term) )				break;			$slug .= '-' . $parent_term->slug;			if ( ! term_exists( $slug ) )				return $slug;			if ( empty($parent_term->parent) )				break;			$the_parent = $parent_term->parent;		}	}	// If we didn't get a unique slug, try appending a number to make it unique.	if ( !empty($args['term_id']) )		$query = $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s AND term_id != %d", $slug, $args['term_id'] );	else		$query = $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s", $slug );	if ( $wpdb->get_var( $query ) ) {		$num = 2;		do {			$alt_slug = $slug . "-$num";			$num++;			$slug_check = $wpdb->get_var( $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s", $alt_slug ) );		} while ( $slug_check );		$slug = $alt_slug;	}	return $slug;}/** * Update term based on arguments provided. * * The $args will indiscriminately override all values with the same field name. * Care must be taken to not override important information need to update or * update will fail (or perhaps create a new term, neither would be acceptable). * * Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not * defined in $args already. * * 'alias_of' will create a term group, if it doesn't already exist, and update * it for the $term. * * If the 'slug' argument in $args is missing, then the 'name' in $args will be * used. It should also be noted that if you set 'slug' and it isn't unique then * a WP_Error will be passed back. If you don't pass any slug, then a unique one * will be created for you. * * For what can be overrode in $args, check the term scheme can contain and stay * away from the term keys. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses do_action() Will call both 'edit_term' and 'edit_$taxonomy' twice. * @uses apply_filters() Will call the 'term_id_filter' filter and pass the term *	id and taxonomy id. * * @param int $term_id The ID of the term * @param string $taxonomy The context in which to relate the term to the object. * @param array|string $args Overwrite term field values * @return array|WP_Error Returns Term ID and Taxonomy Term ID */function wp_update_term( $term_id, $taxonomy, $args = array() ) {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid taxonomy'));	$term_id = (int) $term_id;	// First, get all of the original args	$term = get_term ($term_id, $taxonomy, ARRAY_A);	if ( is_wp_error( $term ) )		return $term;	// Escape data pulled from DB.	$term = add_magic_quotes($term);	// Merge old and new args with new args overwriting old ones.	$args = array_merge($term, $args);	$defaults = array( 'alias_of' => '', 'description' => '', 'parent' => 0, 'slug' => '');	$args = wp_parse_args($args, $defaults);	$args = sanitize_term($args, $taxonomy, 'db');	extract($args, EXTR_SKIP);	// expected_slashed ($name)	$name = stripslashes($name);	$description = stripslashes($description);	if ( '' == trim($name) )		return new WP_Error('empty_term_name', __('A name is required for this term'));	$empty_slug = false;	if ( empty($slug) ) {		$empty_slug = true;		$slug = sanitize_title($name);	}	if ( $alias_of ) {		$alias = $wpdb->get_row( $wpdb->prepare( "SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $alias_of) );		if ( $alias->term_group ) {			// The alias we want is already in a group, so let's use that one.			$term_group = $alias->term_group;		} else {			// The alias isn't in a group, so let's create a new one and firstly add the alias term to it.			$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms") + 1;			do_action( 'edit_terms', $alias->term_id );			$wpdb->update( $wpdb->terms, compact('term_group'), array( 'term_id' => $alias->term_id ) );			do_action( 'edited_terms', $alias->term_id );		}	}	// Check for duplicate slug	$id = $wpdb->get_var( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE slug = %s", $slug ) );	if ( $id && ($id != $term_id) ) {		// If an empty slug was passed or the parent changed, reset the slug to something unique.		// Otherwise, bail.		if ( $empty_slug || ( $parent != $term['parent']) )			$slug = wp_unique_term_slug($slug, (object) $args);		else			return new WP_Error('duplicate_term_slug', sprintf(__('The slug &#8220;%s&#8221; is already in use by another term'), $slug));	}	do_action( 'edit_terms', $term_id );	$wpdb->update($wpdb->terms, compact( 'name', 'slug', 'term_group' ), compact( 'term_id' ) );	if ( empty($slug) ) {		$slug = sanitize_title($name, $term_id);		$wpdb->update( $wpdb->terms, compact( 'slug' ), compact( 'term_id' ) );	}	do_action( 'edited_terms', $term_id );	$tt_id = $wpdb->get_var( $wpdb->prepare( "SELECT tt.term_taxonomy_id FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = %s AND t.term_id = %d", $taxonomy, $term_id) );	do_action( 'edit_term_taxonomy', $tt_id, $taxonomy );	$wpdb->update( $wpdb->term_taxonomy, compact( 'term_id', 'taxonomy', 'description', 'parent' ), array( 'term_taxonomy_id' => $tt_id ) );	do_action( 'edited_term_taxonomy', $tt_id, $taxonomy );	do_action("edit_term", $term_id, $tt_id, $taxonomy);	do_action("edit_$taxonomy", $term_id, $tt_id);	$term_id = apply_filters('term_id_filter', $term_id, $tt_id);	clean_term_cache($term_id, $taxonomy);	do_action("edited_term", $term_id, $tt_id, $taxonomy);	do_action("edited_$taxonomy", $term_id, $tt_id);	return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);}/** * Enable or disable term counting. * * @since 2.5.0 * * @param bool $defer Optional. Enable if true, disable if false. * @return bool Whether term counting is enabled or disabled. */function wp_defer_term_counting($defer=null) {	static $_defer = false;	if ( is_bool($defer) ) {		$_defer = $defer;		// flush any deferred counts		if ( !$defer )			wp_update_term_count( null, null, true );	}	return $_defer;}/** * Updates the amount of terms in taxonomy. * * If there is a taxonomy callback applyed, then it will be called for updating * the count. * * The default action is to count what the amount of terms have the relationship * of term ID. Once that is done, then update the database. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $terms The term_taxonomy_id of the terms * @param string $taxonomy The context of the term. * @return bool If no terms will return false, and if successful will return true. */function wp_update_term_count( $terms, $taxonomy, $do_deferred=false ) {	static $_deferred = array();	if ( $do_deferred ) {		foreach ( (array) array_keys($_deferred) as $tax ) {			wp_update_term_count_now( $_deferred[$tax], $tax );			unset( $_deferred[$tax] );		}	}	if ( empty($terms) )		return false;	if ( !is_array($terms) )		$terms = array($terms);	if ( wp_defer_term_counting() ) {		if ( !isset($_deferred[$taxonomy]) )			$_deferred[$taxonomy] = array();		$_deferred[$taxonomy] = array_unique( array_merge($_deferred[$taxonomy], $terms) );		return true;	}	return wp_update_term_count_now( $terms, $taxonomy );}/** * Perform term count update immediately. * * @since 2.5.0 * * @param array $terms The term_taxonomy_id of terms to update. * @param string $taxonomy The context of the term. * @return bool Always true when complete. */function wp_update_term_count_now( $terms, $taxonomy ) {	global $wpdb;	$terms = array_map('intval', $terms);	$taxonomy = get_taxonomy($taxonomy);	if ( !empty($taxonomy->update_count_callback) ) {		call_user_func($taxonomy->update_count_callback, $terms, $taxonomy);	} else {		// Default count updater		foreach ( (array) $terms as $term) {			$count = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $term) );			do_action( 'edit_term_taxonomy', $term, $taxonomy );			$wpdb->update( $wpdb->term_taxonomy, compact( 'count' ), array( 'term_taxonomy_id' => $term ) );			do_action( 'edited_term_taxonomy', $term, $taxonomy );		}	}	clean_term_cache($terms, '', false);	return true;}//// Cache///** * Removes the taxonomy relationship to terms from the cache. * * Will remove the entire taxonomy relationship containing term $object_id. The * term IDs have to exist within the taxonomy $object_type for the deletion to * take place. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @see get_object_taxonomies() for more on $object_type * @uses do_action() Will call action hook named, 'clean_object_term_cache' after completion. *	Passes, function params in same order. * * @param int|array $object_ids Single or list of term object ID(s) * @param array|string $object_type The taxonomy object type */function clean_object_term_cache($object_ids, $object_type) {	if ( !is_array($object_ids) )		$object_ids = array($object_ids);	foreach ( $object_ids as $id )		foreach ( get_object_taxonomies($object_type) as $taxonomy )			wp_cache_delete($id, "{$taxonomy}_relationships");	do_action('clean_object_term_cache', $object_ids, $object_type);}/** * Will remove all of the term ids from the cache. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $ids Single or list of Term IDs * @param string $taxonomy Can be empty and will assume tt_ids, else will use for context. * @param bool $clean_taxonomy Whether to clean taxonomy wide caches (true), or just individual term object caches (false). Default is true. */function clean_term_cache($ids, $taxonomy = '', $clean_taxonomy = true) {	global $wpdb;	static $cleaned = array();	if ( !is_array($ids) )		$ids = array($ids);	$taxonomies = array();	// If no taxonomy, assume tt_ids.	if ( empty($taxonomy) ) {		$tt_ids = array_map('intval', $ids);		$tt_ids = implode(', ', $tt_ids);		$terms = $wpdb->get_results("SELECT term_id, taxonomy FROM $wpdb->term_taxonomy WHERE term_taxonomy_id IN ($tt_ids)");		$ids = array();		foreach ( (array) $terms as $term ) {			$taxonomies[] = $term->taxonomy;			$ids[] = $term->term_id;			wp_cache_delete($term->term_id, $term->taxonomy);		}		$taxonomies = array_unique($taxonomies);	} else {		$taxonomies = array($taxonomy);		foreach ( $taxonomies as $taxonomy ) {			foreach ( $ids as $id ) {				wp_cache_delete($id, $taxonomy);			}		}	}	foreach ( $taxonomies as $taxonomy ) {		if ( isset($cleaned[$taxonomy]) )			continue;		$cleaned[$taxonomy] = true;		if ( $clean_taxonomy ) {			wp_cache_delete('all_ids', $taxonomy);			wp_cache_delete('get', $taxonomy);			delete_option("{$taxonomy}_children");			// Regenerate {$taxonomy}_children			_get_term_hierarchy($taxonomy);		}		do_action('clean_term_cache', $ids, $taxonomy);	}	wp_cache_set('last_changed', time(), 'terms');}/** * Retrieves the taxonomy relationship to the term object id. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses wp_cache_get() Retrieves taxonomy relationship from cache * * @param int|array $id Term object ID * @param string $taxonomy Taxonomy Name * @return bool|array Empty array if $terms found, but not $taxonomy. False if nothing is in cache for $taxonomy and $id. */function &get_object_term_cache($id, $taxonomy) {	$cache = wp_cache_get($id, "{$taxonomy}_relationships");	return $cache;}/** * Updates the cache for Term ID(s). * * Will only update the cache for terms not already cached. * * The $object_ids expects that the ids be separated by commas, if it is a * string. * * It should be noted that update_object_term_cache() is very time extensive. It * is advised that the function is not called very often or at least not for a * lot of terms that exist in a lot of taxonomies. The amount of time increases * for each term and it also increases for each taxonomy the term belongs to. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses wp_get_object_terms() Used to get terms from the database to update * * @param string|array $object_ids Single or list of term object ID(s) * @param array|string $object_type The taxonomy object type * @return null|bool Null value is given with empty $object_ids. False if */function update_object_term_cache($object_ids, $object_type) {	if ( empty($object_ids) )		return;	if ( !is_array($object_ids) )		$object_ids = explode(',', $object_ids);	$object_ids = array_map('intval', $object_ids);	$taxonomies = get_object_taxonomies($object_type);	$ids = array();	foreach ( (array) $object_ids as $id ) {		foreach ( $taxonomies as $taxonomy ) {			if ( false === wp_cache_get($id, "{$taxonomy}_relationships") ) {				$ids[] = $id;				break;			}		}	}	if ( empty( $ids ) )		return false;	$terms = wp_get_object_terms($ids, $taxonomies, array('fields' => 'all_with_object_id'));	$object_terms = array();	foreach ( (array) $terms as $term )		$object_terms[$term->object_id][$term->taxonomy][$term->term_id] = $term;	foreach ( $ids as $id ) {		foreach ( $taxonomies  as $taxonomy ) {			if ( ! isset($object_terms[$id][$taxonomy]) ) {				if ( !isset($object_terms[$id]) )					$object_terms[$id] = array();				$object_terms[$id][$taxonomy] = array();			}		}	}	foreach ( $object_terms as $id => $value ) {		foreach ( $value as $taxonomy => $terms ) {			wp_cache_set($id, $terms, "{$taxonomy}_relationships");		}	}}/** * Updates Terms to Taxonomy in cache. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @param array $terms List of Term objects to change * @param string $taxonomy Optional. Update Term to this taxonomy in cache */function update_term_cache($terms, $taxonomy = '') {	foreach ( (array) $terms as $term ) {		$term_taxonomy = $taxonomy;		if ( empty($term_taxonomy) )			$term_taxonomy = $term->taxonomy;		wp_cache_add($term->term_id, $term, $term_taxonomy);	}}//// Private///** * Retrieves children of taxonomy as Term IDs. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * * @uses update_option() Stores all of the children in "$taxonomy_children" *	 option. That is the name of the taxonomy, immediately followed by '_children'. * * @param string $taxonomy Taxonomy Name * @return array Empty if $taxonomy isn't hierarchical or returns children as Term IDs. */function _get_term_hierarchy($taxonomy) {	if ( !is_taxonomy_hierarchical($taxonomy) )		return array();	$children = get_option("{$taxonomy}_children");	if ( is_array($children) )		return $children;	$children = array();	$terms = get_terms($taxonomy, array('get' => 'all', 'orderby' => 'id', 'fields' => 'id=>parent'));	foreach ( $terms as $term_id => $parent ) {		if ( $parent > 0 )			$children[$parent][] = $term_id;	}	update_option("{$taxonomy}_children", $children);	return $children;}/** * Get the subset of $terms that are descendants of $term_id. * * If $terms is an array of objects, then _get_term_children returns an array of objects. * If $terms is an array of IDs, then _get_term_children returns an array of IDs. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * * @param int $term_id The ancestor term: all returned terms should be descendants of $term_id. * @param array $terms The set of terms---either an array of term objects or term IDs---from which those that are descendants of $term_id will be chosen. * @param string $taxonomy The taxonomy which determines the hierarchy of the terms. * @return array The subset of $terms that are descendants of $term_id. */function &_get_term_children($term_id, $terms, $taxonomy) {	$empty_array = array();	if ( empty($terms) )		return $empty_array;	$term_list = array();	$has_children = _get_term_hierarchy($taxonomy);	if  ( ( 0 != $term_id ) && ! isset($has_children[$term_id]) )		return $empty_array;	foreach ( (array) $terms as $term ) {		$use_id = false;		if ( !is_object($term) ) {			$term = get_term($term, $taxonomy);			if ( is_wp_error( $term ) )				return $term;			$use_id = true;		}		if ( $term->term_id == $term_id )			continue;		if ( $term->parent == $term_id ) {			if ( $use_id )				$term_list[] = $term->term_id;			else				$term_list[] = $term;			if ( !isset($has_children[$term->term_id]) )				continue;			if ( $children = _get_term_children($term->term_id, $terms, $taxonomy) )				$term_list = array_merge($term_list, $children);		}	}	return $term_list;}/** * Add count of children to parent count. * * Recalculates term counts by including items from child terms. Assumes all * relevant children are already in the $terms argument. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * @uses $wpdb * * @param array $terms List of Term IDs * @param string $taxonomy Term Context * @return null Will break from function if conditions are not met. */function _pad_term_counts(&$terms, $taxonomy) {	global $wpdb;	// This function only works for hierarchical taxonomies like post categories.	if ( !is_taxonomy_hierarchical( $taxonomy ) )		return;	$term_hier = _get_term_hierarchy($taxonomy);	if ( empty($term_hier) )		return;	$term_items = array();	foreach ( (array) $terms as $key => $term ) {		$terms_by_id[$term->term_id] = & $terms[$key];		$term_ids[$term->term_taxonomy_id] = $term->term_id;	}	// Get the object and term ids and stick them in a lookup table	$tax_obj = get_taxonomy($taxonomy);	$object_types = esc_sql($tax_obj->object_type);	$results = $wpdb->get_results("SELECT object_id, term_taxonomy_id FROM $wpdb->term_relationships INNER JOIN $wpdb->posts ON object_id = ID WHERE term_taxonomy_id IN (" . implode(',', array_keys($term_ids)) . ") AND post_type IN ('" . implode("', '", $object_types) . "') AND post_status = 'publish'");	foreach ( $results as $row ) {		$id = $term_ids[$row->term_taxonomy_id];		$term_items[$id][$row->object_id] = isset($term_items[$id][$row->object_id]) ? ++$term_items[$id][$row->object_id] : 1;	}	// Touch every ancestor's lookup row for each post in each term	foreach ( $term_ids as $term_id ) {		$child = $term_id;		while ( $parent = $terms_by_id[$child]->parent ) {			if ( !empty($term_items[$term_id]) )				foreach ( $term_items[$term_id] as $item_id => $touches ) {					$term_items[$parent][$item_id] = isset($term_items[$parent][$item_id]) ? ++$term_items[$parent][$item_id]: 1;				}			$child = $parent;		}	}	// Transfer the touched cells	foreach ( (array) $term_items as $id => $items )		if ( isset($terms_by_id[$id]) )			$terms_by_id[$id]->count = count($items);}//// Default callbacks///** * Will update term count based on object types of the current taxonomy. * * Private function for the default callback for post_tag and category * taxonomies. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * @uses $wpdb * * @param array $terms List of Term taxonomy IDs * @param object $taxonomy Current taxonomy object of terms */function _update_post_term_count( $terms, $taxonomy ) {	global $wpdb;	$object_types = is_array($taxonomy->object_type) ? $taxonomy->object_type : array($taxonomy->object_type);	$object_types = esc_sql($object_types);	foreach ( (array) $terms as $term ) {		$count = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_relationships, $wpdb->posts WHERE $wpdb->posts.ID = $wpdb->term_relationships.object_id AND post_status = 'publish' AND post_type IN ('" . implode("', '", $object_types) . "') AND term_taxonomy_id = %d", $term ) );		do_action( 'edit_term_taxonomy', $term, $taxonomy );		$wpdb->update( $wpdb->term_taxonomy, compact( 'count' ), array( 'term_taxonomy_id' => $term ) );		do_action( 'edited_term_taxonomy', $term, $taxonomy );	}}/** * Generates a permalink for a taxonomy term archive. * * @since 2.5.0 * * @param object|int|string $term * @param string $taxonomy * @return string HTML link to taxonomy term archive */function get_term_link( $term, $taxonomy ) {	global $wp_rewrite;	if ( !is_object($term) ) {		if ( is_int($term) ) {			$term = &get_term($term, $taxonomy);		} else {			$term = &get_term_by('slug', $term, $taxonomy);		}	}	if ( !is_object($term) )		$term = new WP_Error('invalid_term', __('Empty Term'));	if ( is_wp_error( $term ) )		return $term;	// use legacy functions for core taxonomies until they are fully plugged in	if ( $taxonomy == 'category' )		return get_category_link((int) $term->term_id);	if ( $taxonomy == 'post_tag' )		return get_tag_link((int) $term->term_id);	$termlink = $wp_rewrite->get_extra_permastruct($taxonomy);	$slug = $term->slug;	if ( empty($termlink) ) {		$t = get_taxonomy($taxonomy);		if ( $t->query_var )			$termlink = "?$t->query_var=$slug";		else			$termlink = "?taxonomy=$taxonomy&term=$slug";		$termlink = home_url($termlink);	} else {		$termlink = str_replace("%$taxonomy%", $slug, $termlink);		$termlink = home_url( user_trailingslashit($termlink, 'category') );	}	return apply_filters('term_link', $termlink, $term, $taxonomy);}/** * Display the taxonomies of a post with available options. * * This function can be used within the loop to display the taxonomies for a * post without specifying the Post ID. You can also use it outside the Loop to * display the taxonomies for a specific post. * * The available defaults are: * 'post' : default is 0. The post ID to get taxonomies of. * 'before' : default is empty string. Display before taxonomies list. * 'sep' : default is empty string. Separate every taxonomy with value in this. * 'after' : default is empty string. Display this after the taxonomies list. * * @since 2.5.0 * @uses get_the_taxonomies() * * @param array $args Override the defaults. */function the_taxonomies($args = array()) {	$defaults = array(		'post' => 0,		'before' => '',		'sep' => ' ',		'after' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	echo $before . join($sep, get_the_taxonomies($post)) . $after;}/** * Retrieve all taxonomies associated with a post. * * This function can be used within the loop. It will also return an array of * the taxonomies with links to the taxonomy and name. * * @since 2.5.0 * * @param int $post Optional. Post ID or will use Global Post ID (in loop). * @return array */function get_the_taxonomies($post = 0) {	if ( is_int($post) )		$post =& get_post($post);	elseif ( !is_object($post) )		$post =& $GLOBALS['post'];	$taxonomies = array();	if ( !$post )		return $taxonomies;	$template = apply_filters('taxonomy_template', '%s: %l.');	foreach ( get_object_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		if ( empty($t['template']) )			$t['template'] = $template;		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$links = array();		foreach ( $terms as $term )			$links[] = "<a href='" . esc_attr(get_term_link($term, $taxonomy)) . "'>$term->name</a>";		if ( $links )			$taxonomies[$taxonomy] = wp_sprintf($t['template'], $t['label'], $links, $terms);	}	return $taxonomies;}/** * Retrieve all taxonomies of a post with just the names. * * @since 2.5.0 * @uses get_object_taxonomies() * * @param int $post Optional. Post ID * @return array */function get_post_taxonomies($post = 0) {	$post =& get_post($post);	return get_object_taxonomies($post);}/** * Determine if the given object is associated with any of the given terms. * * The given terms are checked against the object's terms' term_ids, names and slugs. * Terms given as integers will only be checked against the object's terms' term_ids. * If no terms are given, determines if object is associated with any terms in the given taxonomy. * * @since 2.7.0 * @uses get_object_term_cache() * @uses wp_get_object_terms() * * @param int $object_id.  ID of the object (post ID, link ID, ...) * @param string $taxonomy.  Single taxonomy name * @param int|string|array $terms Optional.  Term term_id, name, slug or array of said * @return bool|WP_Error. WP_Error on input error. */function is_object_in_term( $object_id, $taxonomy, $terms = null ) {	if ( !$object_id = (int) $object_id )		return new WP_Error( 'invalid_object', __( 'Invalid object ID' ) );	$object_terms = get_object_term_cache( $object_id, $taxonomy );	if ( empty( $object_terms ) )		 $object_terms = wp_get_object_terms( $object_id, $taxonomy );	if ( is_wp_error( $object_terms ) )		return $object_terms;	if ( empty( $object_terms ) )		return false;	if ( empty( $terms ) )		return ( !empty( $object_terms ) );	$terms = (array) $terms;	if ( $ints = array_filter( $terms, 'is_int' ) )		$strs = array_diff( $terms, $ints );	else		$strs =& $terms;	foreach ( $object_terms as $object_term ) {		if ( $ints && in_array( $object_term->term_id, $ints ) ) return true; // If int, check against term_id		if ( $strs ) {			if ( in_array( $object_term->term_id, $strs ) ) return true;			if ( in_array( $object_term->name, $strs ) )    return true;			if ( in_array( $object_term->slug, $strs ) )    return true;		}	}	return false;}/** * Determine if the given object type is associated with the given taxonomy. * * @since 3.0.0 * @uses get_object_taxonomies() * * @param string $object_type Object type string * @param string $taxonomy.  Single taxonomy name * @return bool True if object is associated with the taxonomy, otherwise false. */function is_object_in_taxonomy($object_type, $taxonomy) {	$taxonomies = get_object_taxonomies($object_type);	if ( empty($taxonomies) )		return false;	if ( in_array($taxonomy, $taxonomies) )		return true;	return false;}
<?php/** * Multisite administration functions. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Determine if uploaded file exceeds space quota. * * @since 3.0.0 * * @param array $file $_FILES array for a given file. * @return array $_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise. */function check_upload_size( $file ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return $file;	if ( $file['error'] != '0' ) // there's already an error		return $file;	if ( defined( 'WP_IMPORTING' ) )		return $file;	$space_allowed = 1048576 * get_space_allowed();	$space_used = get_dirsize( BLOGUPLOADDIR );	$space_left = $space_allowed - $space_used;	$file_size = filesize( $file['tmp_name'] );	if ( $space_left < $file_size )		$file['error'] = sprintf( __( 'Not enough space to upload. %1$s KB needed.' ), number_format( ($file_size - $space_left) /1024 ) );	if ( $file_size > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		$file['error'] = sprintf(__('This file is too big. Files must be less than %1$s KB in size.'), get_site_option( 'fileupload_maxk', 1500 ) );	if ( upload_is_user_over_quota( false ) ) {		$file['error'] = __( 'You have used your space quota. Please delete files before uploading.' );	}	if ( $file['error'] != '0' && !isset($_POST['html-upload']) )		wp_die( $file['error'] . ' <a href="javascript:history.go(-1)">' . __( 'Back' ) . '</a>' );	return $file;}add_filter( 'wp_handle_upload_prefilter', 'check_upload_size' );/** * Delete a blog * * @since 3.0.0 * * @param int $blog_id Blog ID * @param bool $drop True if blog's table should be dropped.  Default is false. * @return void */function wpmu_delete_blog( $blog_id, $drop = false ) {	global $wpdb;	$switch = false;	if ( $blog_id != $wpdb->blogid ) {		$switch = true;		switch_to_blog( $blog_id );	}	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	do_action( 'delete_blog', $blog_id, $drop );	$users = get_users_of_blog( $blog_id );	// Remove users from this blog.	if ( ! empty( $users ) ) {		foreach ( $users as $user ) {			remove_user_from_blog( $user->user_id, $blog_id) ;		}	}	update_blog_status( $blog_id, 'deleted', 1 );	if ( $drop ) {		if ( substr( $blog_prefix, -1 ) == '_' )			$blog_prefix =  substr( $blog_prefix, 0, -1 ) . '\_';		$drop_tables = $wpdb->get_results( "SHOW TABLES LIKE '{$blog_prefix}%'", ARRAY_A );		$drop_tables = apply_filters( 'wpmu_drop_tables', $drop_tables );		reset( $drop_tables );		foreach ( (array) $drop_tables as $drop_table) {			$wpdb->query( "DROP TABLE IF EXISTS ". current( $drop_table ) ."" );		}		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->blogs WHERE blog_id = %d", $blog_id ) );		$dir = apply_filters( 'wpmu_delete_blog_upload_dir', WP_CONTENT_DIR . "/blogs.dir/{$blog_id}/files/", $blog_id );		$dir = rtrim( $dir, DIRECTORY_SEPARATOR );		$top_dir = $dir;		$stack = array($dir);		$index = 0;		while ( $index < count( $stack ) ) {			# Get indexed directory from stack			$dir = $stack[$index];			$dh = @opendir( $dir );			if ( $dh ) {				while ( ( $file = @readdir( $dh ) ) !== false ) {					if ( $file == '.' || $file == '..' )						continue;					if ( @is_dir( $dir . DIRECTORY_SEPARATOR . $file ) )						$stack[] = $dir . DIRECTORY_SEPARATOR . $file;					else if ( @is_file( $dir . DIRECTORY_SEPARATOR . $file ) )						@unlink( $dir . DIRECTORY_SEPARATOR . $file );				}			}			$index++;		}		$stack = array_reverse( $stack );  // Last added dirs are deepest		foreach( (array) $stack as $dir ) {			if ( $dir != $top_dir)			@rmdir( $dir );		}	}	$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE meta_key = '{$blog_prefix}autosave_draft_ids'" );	$blogs = get_site_option( 'blog_list' );	if ( is_array( $blogs ) ) {		foreach ( $blogs as $n => $blog ) {			if ( $blog['blog_id'] == $blog_id )				unset( $blogs[$n] );		}		update_site_option( 'blog_list', $blogs );	}	if ( $switch === true )		restore_current_blog();}// @todo Merge with wp_delete_user() ?function wpmu_delete_user( $id ) {	global $wpdb;	$id = (int) $id;	do_action( 'wpmu_delete_user', $id );	$blogs = get_blogs_of_user( $id );	if ( ! empty( $blogs ) ) {		foreach ( $blogs as $blog ) {			switch_to_blog( $blog->userblog_id );			remove_user_from_blog( $id, $blog->userblog_id );			$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id ) );			foreach ( (array) $post_ids as $post_id ) {				wp_delete_post( $post_id );			}			// Clean links			$link_ids = $wpdb->get_col( $wpdb->prepare( "SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id ) );			if ( $link_ids ) {				foreach ( $link_ids as $link_id )					wp_delete_link( $link_id );			}			restore_current_blog();		}	}	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->users WHERE ID = %d", $id ) );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id ) );	clean_user_cache( $id );	// allow for commit transaction	do_action( 'deleted_user', $id );	return true;}function confirm_delete_users( $users ) {	global $current_user;	if ( !is_array( $users ) )		return false;    screen_icon();    ?>	<h2><?php esc_html_e( 'Users' ); ?></h2>	<p><?php _e( 'Transfer or delete posts and links before deleting users.' ); ?></p>	<form action="ms-edit.php?action=dodelete" method="post">	<input type="hidden" name="dodelete" />    <?php	wp_nonce_field( 'ms-users-delete' );	$site_admins = get_super_admins();	$admin_out = "<option value='$current_user->ID'>$current_user->user_login</option>";	foreach ( ( $allusers = (array) $_POST['allusers'] ) as $key => $val ) {		if ( $val != '' && $val != '0' ) {			$delete_user = new WP_User( $val );			if ( in_array( $delete_user->user_login, $site_admins ) )				wp_die( sprintf( __( 'Warning! User cannot be deleted. The user %s is a network admnistrator.' ), $delete_user->user_login ) );			echo "<input type='hidden' name='user[]' value='{$val}'/>\n";			$blogs = get_blogs_of_user( $val, true );			if ( !empty( $blogs ) ) {				?>				<br /><fieldset><p><legend><?php printf( __( "What should be done with posts and links owned by <em>%s</em>?" ), $delete_user->user_login ); ?></legend></p>				<?php				foreach ( (array) $blogs as $key => $details ) {					$blog_users = get_users_of_blog( $details->userblog_id );					if ( is_array( $blog_users ) && !empty( $blog_users ) ) {						$user_site = "<a href='" . esc_url( get_home_url( $details->userblog_id ) ) . "'>{$details->blogname}</a>";						$user_dropdown = "<select name='blog[$val][{$key}]'>";						$user_list = '';						foreach ( $blog_users as $user ) {							if ( $user->user_id != $val && !in_array( $user->user_id, $allusers ) )								$user_list .= "<option value='{$user->user_id}'>{$user->user_login}</option>";						}						if ( '' == $user_list )							$user_list = $admin_out;						$user_dropdown .= $user_list;						$user_dropdown .= "</select>\n";						?>						<ul style="list-style:none;">							<li><?php printf( __( 'Site: %s' ), $user_site ); ?></li>							<li><label><input type="radio" id="delete_option0" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="delete" checked="checked" />							<?php _e( 'Delete all posts and links.' ); ?></label></li>							<li><label><input type="radio" id="delete_option1" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="reassign" />							<?php echo __( 'Attribute all posts and links to:' ) . '</label>' . $user_dropdown; ?></li>						</ul>						<?php					}				}				echo "</fieldset>";			}		}	}	?>	<p class="submit"><input type="submit" class="button-secondary delete" value="<?php esc_attr_e( 'Confirm Deletion' ); ?>" /></p>	</form>    <?php	return true;}function wpmu_get_blog_allowedthemes( $blog_id = 0 ) {	$themes = get_themes();	if ( $blog_id != 0 )		switch_to_blog( $blog_id );	$blog_allowed_themes = get_option( 'allowedthemes' );	if ( !is_array( $blog_allowed_themes ) || empty( $blog_allowed_themes ) ) { // convert old allowed_themes to new allowedthemes		$blog_allowed_themes = get_option( 'allowed_themes' );		if ( is_array( $blog_allowed_themes ) ) {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $blog_allowed_themes[$key] ) == true ) {					$blog_allowedthemes[$theme_key] = 1;				}			}			$blog_allowed_themes = $blog_allowedthemes;			add_option( 'allowedthemes', $blog_allowed_themes );			delete_option( 'allowed_themes' );		}	}	if ( $blog_id != 0 )		restore_current_blog();	return $blog_allowed_themes;}function update_option_new_admin_email( $old_value, $value ) {	$email = get_option( 'admin_email' );	if ( $value == get_option( 'admin_email' ) || !is_email( $value ) )		return;	$hash = md5( $value. time() .mt_rand() );	$new_admin_email = array(		'hash' => $hash,		'newemail' => $value	);	update_option( 'adminhash', $new_admin_email );	$content = apply_filters( 'new_admin_email_content', __( "Dear user,You recently requested to have the administration email address onyour site changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL### "), $new_admin_email );	$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'options.php?adminhash='.$hash ) ), $content );	$content = str_replace( '###EMAIL###', $value, $content );	$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );	$content = str_replace( '###SITEURL###', network_home_url(), $content );	wp_mail( $value, sprintf( __( '[%s] New Admin Email Address' ), get_option( 'blogname' ) ), $content );}add_action( 'update_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );add_action( 'add_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );function send_confirmation_on_profile_email() {	global $errors, $wpdb, $current_user;	if ( ! is_object($errors) )		$errors = new WP_Error();	if ( $current_user->id != $_POST['user_id'] )		return false;	if ( $current_user->user_email != $_POST['email'] ) {		if ( !is_email( $_POST['email'] ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address isn't correct." ), array( 'form-field' => 'email' ) );			return;		}		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_email FROM {$wpdb->users} WHERE user_email=%s", $_POST['email'] ) ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address is already used." ), array( 'form-field' => 'email' ) );			delete_option( $current_user->ID . '_new_email' );			return;		}		$hash = md5( $_POST['email'] . time() . mt_rand() );		$new_user_email = array(				'hash' => $hash,				'newemail' => $_POST['email']				);		update_option( $current_user->ID . '_new_email', $new_user_email );		$content = apply_filters( 'new_user_email_content', __( "Dear user,You recently requested to have the email address on your account changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL###" ), $new_user_email );		$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'profile.php?newuseremail='.$hash ) ), $content );		$content = str_replace( '###EMAIL###', $_POST['email'], $content);		$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );		$content = str_replace( '###SITEURL###', network_home_url(), $content );		wp_mail( $_POST['email'], sprintf( __( '[%s] New Email Address' ), get_option( 'blogname' ) ), $content );		$_POST['email'] = $current_user->user_email;	}}add_action( 'personal_options_update', 'send_confirmation_on_profile_email' );function new_user_email_admin_notice() {	global $current_user;	if ( strpos( $_SERVER['PHP_SELF'], 'profile.php' ) && isset( $_GET['updated'] ) && $email = get_option( $current_user->ID . '_new_email' ) )		echo "<div class='update-nag'>" . sprintf( __( "Your email address has not been updated yet. Please check your inbox at %s for a confirmation email." ), $email['newemail'] ) . "</div>";}add_action( 'admin_notices', 'new_user_email_admin_notice' );function get_site_allowed_themes() {	$themes = get_themes();	$allowed_themes = get_site_option( 'allowedthemes' );	if ( !is_array( $allowed_themes ) || empty( $allowed_themes ) ) {		$allowed_themes = get_site_option( 'allowed_themes' ); // convert old allowed_themes format		if ( !is_array( $allowed_themes ) ) {			$allowed_themes = array();		} else {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $allowed_themes[ $key ] ) == true ) {					$allowedthemes[ $theme_key ] = 1;				}			}			$allowed_themes = $allowedthemes;		}	}	return $allowed_themes;}/** * Determines if there is any upload space left in the current blog's quota. * * @since 3.0.0 * @return bool True if space is available, false otherwise. */function is_upload_space_available() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	if ( !( $space_allowed = get_upload_space_available() ) )		return false;	return true;}/* * @since 3.0.0 * * @return int of upload size limit in bytes */function upload_size_limit_filter( $size ) {	$fileupload_maxk = 1024 * get_site_option( 'fileupload_maxk', 1500 );	return min( $size, $fileupload_maxk, get_upload_space_available() );}/** * Determines if there is any upload space left in the current blog's quota. * * @return int of upload space available in bytes */function get_upload_space_available() {	$space_allowed = get_space_allowed() * 1024 * 1024;	if ( get_site_option( 'upload_space_check_disabled' ) )		return $space_allowed;	$dir_name = trailingslashit( BLOGUPLOADDIR );	if ( !( is_dir( $dir_name) && is_readable( $dir_name ) ) )		return $space_allowed;  	$dir = dir( $dir_name );   	$size = 0;	while ( $file = $dir->read() ) {		if ( $file != '.' && $file != '..' ) {			if ( is_dir( $dir_name . $file) ) {				$size += get_dirsize( $dir_name . $file );			} else {				$size += filesize( $dir_name . $file );			}		}	}	$dir->close();	if ( ( $space_allowed - $size ) <= 0 )		return 0;	return $space_allowed - $size;}/** * Returns the upload quota for the current blog. * * @return int Quota */function get_space_allowed() {	$space_allowed = get_option( 'blog_upload_space' );	if ( $space_allowed == false )		$space_allowed = get_site_option( 'blog_upload_space' );	if ( empty( $space_allowed ) || !is_numeric( $space_allowed ) )		$space_allowed = 50;	return $space_allowed;}function display_space_usage() {	$space = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	$percentused = ( $used / $space ) * 100;	if ( $space > 1000 ) {		$space = number_format( $space / 1024 );		/* translators: Gigabytes */		$space .= __( 'GB' );	} else {		/* translators: Megabytes */		$space .= __( 'MB' );	}	?>	<strong><?php printf( __( 'Used: %1s%% of %2s' ), number_format( $percentused ), $space ); ?></strong>	<?php}// Display File upload quota on dashboardfunction dashboard_quota() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$quota = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	if ( $used > $quota )		$percentused = '100';	else		$percentused = ( $used / $quota ) * 100;	$used_color = ( $percentused < 70 ) ? ( ( $percentused >= 40 ) ? 'waiting' : 'approved' ) : 'spam';	$used = round( $used, 2 );	$percentused = number_format( $percentused );	?>	<p class="sub musub"><?php _e( 'Storage Space' ); ?></p>	<div class="table table_content musubtable">	<table>		<tr class="first">			<td class="first b b-posts"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB</a>' ), esc_url( admin_url( 'upload.php' ) ), $quota ); ?></td>			<td class="t posts"><?php _e( 'Space Allowed' ); ?></td>		</tr>	</table>	</div>	<div class="table table_discussion musubtable">	<table>		<tr class="first">			<td class="b b-comments"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB (%3$s%%)</a>' ), esc_url( admin_url( 'upload.php' ) ), $used, $percentused ); ?></td>			<td class="last t comments <?php echo $used_color;?>"><?php _e( 'Space Used' );?></td>		</tr>	</table>	</div>	<br class="clear" />	<?php}if ( current_user_can( 'edit_posts' ) )	add_action( 'activity_box_end', 'dashboard_quota' );// Edit blog upload space setting on Edit Blog pagefunction upload_space_setting( $id ) {	$quota = get_blog_option( $id, 'blog_upload_space' );	if ( !$quota )		$quota = '';	?>	<tr>		<th><?php _e( 'Site Upload Space Quota '); ?></th>		<td><input type="text" size="3" name="option[blog_upload_space]" value="<?php echo $quota; ?>" /> <?php _e( 'MB (Leave blank for network default)' ); ?></td>	</tr>	<?php}add_action( 'wpmueditblogaction', 'upload_space_setting' );function update_user_status( $id, $pref, $value, $refresh = 1 ) {	global $wpdb;	$wpdb->update( $wpdb->users, array( $pref => $value ), array( 'ID' => $id ) );	if ( $refresh == 1 )		refresh_user_details( $id );	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( 'make_spam_user', $id );		else			do_action( 'make_ham_user', $id );	}	return $value;}function refresh_user_details( $id ) {	$id = (int) $id;	if ( !$user = get_userdata( $id ) )		return false;	clean_user_cache( $id );	return $id;}function format_code_lang( $code = '' ) {	$code = strtolower( substr( $code, 0, 2 ) );	$lang_codes = array(		'aa' => 'Afar', 'ab' => 'Abkhazian', 'af' => 'Afrikaans', 'ak' => 'Akan', 'sq' => 'Albanian', 'am' => 'Amharic', 'ar' => 'Arabic', 'an' => 'Aragonese', 'hy' => 'Armenian', 'as' => 'Assamese', 'av' => 'Avaric', 'ae' => 'Avestan', 'ay' => 'Aymara', 'az' => 'Azerbaijani', 'ba' => 'Bashkir', 'bm' => 'Bambara', 'eu' => 'Basque', 'be' => 'Belarusian', 'bn' => 'Bengali',		'bh' => 'Bihari', 'bi' => 'Bislama', 'bs' => 'Bosnian', 'br' => 'Breton', 'bg' => 'Bulgarian', 'my' => 'Burmese', 'ca' => 'Catalan; Valencian', 'ch' => 'Chamorro', 'ce' => 'Chechen', 'zh' => 'Chinese', 'cu' => 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic', 'cv' => 'Chuvash', 'kw' => 'Cornish', 'co' => 'Corsican', 'cr' => 'Cree',		'cs' => 'Czech', 'da' => 'Danish', 'dv' => 'Divehi; Dhivehi; Maldivian', 'nl' => 'Dutch; Flemish', 'dz' => 'Dzongkha', 'en' => 'English', 'eo' => 'Esperanto', 'et' => 'Estonian', 'ee' => 'Ewe', 'fo' => 'Faroese', 'fj' => 'Fijjian', 'fi' => 'Finnish', 'fr' => 'French', 'fy' => 'Western Frisian', 'ff' => 'Fulah', 'ka' => 'Georgian', 'de' => 'German', 'gd' => 'Gaelic; Scottish Gaelic',		'ga' => 'Irish', 'gl' => 'Galician', 'gv' => 'Manx', 'el' => 'Greek, Modern', 'gn' => 'Guarani', 'gu' => 'Gujarati', 'ht' => 'Haitian; Haitian Creole', 'ha' => 'Hausa', 'he' => 'Hebrew', 'hz' => 'Herero', 'hi' => 'Hindi', 'ho' => 'Hiri Motu', 'hu' => 'Hungarian', 'ig' => 'Igbo', 'is' => 'Icelandic', 'io' => 'Ido', 'ii' => 'Sichuan Yi', 'iu' => 'Inuktitut', 'ie' => 'Interlingue',		'ia' => 'Interlingua (International Auxiliary Language Association)', 'id' => 'Indonesian', 'ik' => 'Inupiaq', 'it' => 'Italian', 'jv' => 'Javanese', 'ja' => 'Japanese', 'kl' => 'Kalaallisut; Greenlandic', 'kn' => 'Kannada', 'ks' => 'Kashmiri', 'kr' => 'Kanuri', 'kk' => 'Kazakh', 'km' => 'Central Khmer', 'ki' => 'Kikuyu; Gikuyu', 'rw' => 'Kinyarwanda', 'ky' => 'Kirghiz; Kyrgyz',		'kv' => 'Komi', 'kg' => 'Kongo', 'ko' => 'Korean', 'kj' => 'Kuanyama; Kwanyama', 'ku' => 'Kurdish', 'lo' => 'Lao', 'la' => 'Latin', 'lv' => 'Latvian', 'li' => 'Limburgan; Limburger; Limburgish', 'ln' => 'Lingala', 'lt' => 'Lithuanian', 'lb' => 'Luxembourgish; Letzeburgesch', 'lu' => 'Luba-Katanga', 'lg' => 'Ganda', 'mk' => 'Macedonian', 'mh' => 'Marshallese', 'ml' => 'Malayalam',		'mi' => 'Maori', 'mr' => 'Marathi', 'ms' => 'Malay', 'mg' => 'Malagasy', 'mt' => 'Maltese', 'mo' => 'Moldavian', 'mn' => 'Mongolian', 'na' => 'Nauru', 'nv' => 'Navajo; Navaho', 'nr' => 'Ndebele, South; South Ndebele', 'nd' => 'Ndebele, North; North Ndebele', 'ng' => 'Ndonga', 'ne' => 'Nepali', 'nn' => 'Norwegian Nynorsk; Nynorsk, Norwegian', 'nb' => 'Bokml, Norwegian, Norwegian Bokml',		'no' => 'Norwegian', 'ny' => 'Chichewa; Chewa; Nyanja', 'oc' => 'Occitan, Provenal', 'oj' => 'Ojibwa', 'or' => 'Oriya', 'om' => 'Oromo', 'os' => 'Ossetian; Ossetic', 'pa' => 'Panjabi; Punjabi', 'fa' => 'Persian', 'pi' => 'Pali', 'pl' => 'Polish', 'pt' => 'Portuguese', 'ps' => 'Pushto', 'qu' => 'Quechua', 'rm' => 'Romansh', 'ro' => 'Romanian', 'rn' => 'Rundi', 'ru' => 'Russian',		'sg' => 'Sango', 'sa' => 'Sanskrit', 'sr' => 'Serbian', 'hr' => 'Croatian', 'si' => 'Sinhala; Sinhalese', 'sk' => 'Slovak', 'sl' => 'Slovenian', 'se' => 'Northern Sami', 'sm' => 'Samoan', 'sn' => 'Shona', 'sd' => 'Sindhi', 'so' => 'Somali', 'st' => 'Sotho, Southern', 'es' => 'Spanish; Castilian', 'sc' => 'Sardinian', 'ss' => 'Swati', 'su' => 'Sundanese', 'sw' => 'Swahili',		'sv' => 'Swedish', 'ty' => 'Tahitian', 'ta' => 'Tamil', 'tt' => 'Tatar', 'te' => 'Telugu', 'tg' => 'Tajik', 'tl' => 'Tagalog', 'th' => 'Thai', 'bo' => 'Tibetan', 'ti' => 'Tigrinya', 'to' => 'Tonga (Tonga Islands)', 'tn' => 'Tswana', 'ts' => 'Tsonga', 'tk' => 'Turkmen', 'tr' => 'Turkish', 'tw' => 'Twi', 'ug' => 'Uighur; Uyghur', 'uk' => 'Ukrainian', 'ur' => 'Urdu', 'uz' => 'Uzbek',		've' => 'Venda', 'vi' => 'Vietnamese', 'vo' => 'Volapk', 'cy' => 'Welsh','wa' => 'Walloon','wo' => 'Wolof', 'xh' => 'Xhosa', 'yi' => 'Yiddish', 'yo' => 'Yoruba', 'za' => 'Zhuang; Chuang', 'zu' => 'Zulu' );	$lang_codes = apply_filters( 'lang_codes', $lang_codes, $code );	return strtr( $code, $lang_codes );}function sync_category_tag_slugs( $term, $taxonomy ) {	if ( global_terms_enabled() && ( $taxonomy == 'category' || $taxonomy == 'post_tag' ) ) {		if ( is_object( $term ) ) {			$term->slug = sanitize_title( $term->name );		} else {			$term['slug'] = sanitize_title( $term['name'] );		}	}	return $term;}add_filter( 'get_term', 'sync_category_tag_slugs', 10, 2 );function redirect_user_to_blog() {	global $current_user;	$c = 0;	if ( isset( $_GET['c'] ) )		$c = (int) $_GET['c'];	if ( $c >= 5 ) {		wp_die( __( "You don&#8217;t have permission to view this site. Please contact the system administrator." ) );	}	$c ++;	$blog = get_active_blog_for_user( $current_user->ID );	$dashboard_blog = get_dashboard_blog();	if ( is_object( $blog ) ) {		wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) ); // redirect and count to 5, "just in case"		exit;	}	/*	   If the user is a member of only 1 blog and the user's primary_blog isn't set to that blog,	   then update the primary_blog record to match the user's blog	 */	$blogs = get_blogs_of_user( $current_user->ID );	if ( !empty( $blogs ) ) {		foreach( $blogs as $blogid => $blog ) {			if ( $blogid != $dashboard_blog->blog_id && get_user_meta( $current_user->ID , 'primary_blog', true ) == $dashboard_blog->blog_id ) {				update_user_meta( $current_user->ID, 'primary_blog', $blogid );				continue;			}		}		$blog = get_blog_details( get_user_meta( $current_user->ID, 'primary_blog', true ) );			wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) );		exit;	}	wp_die( __( 'You do not have sufficient permissions to access this page.' ) );}add_action( 'admin_page_access_denied', 'redirect_user_to_blog', 99 );function check_import_new_users( $permission ) {	if ( !is_super_admin() )		return false;	return true;}add_filter( 'import_allow_create_users', 'check_import_new_users' );// See "import_allow_fetch_attachments" and "import_attachment_size_limit" filters too.function mu_dropdown_languages( $lang_files = array(), $current = '' ) {	$flag = false;	$output = array();	foreach ( (array) $lang_files as $val ) {		$code_lang = basename( $val, '.mo' );		if ( $code_lang == 'en_US' ) { // American English			$flag = true;			$ae = __( 'American English' );			$output[$ae] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $ae . '</option>';		} elseif ( $code_lang == 'en_GB' ) { // British English			$flag = true;			$be = __( 'British English' );			$output[$be] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $be . '</option>';		} else {			$translated = format_code_lang( $code_lang );			$output[$translated] =  '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . esc_html ( $translated ) . '</option>';		}	}	if ( $flag === false ) // WordPress english		$output[] = '<option value=""' . selected( $current, '' ) . '>' . __( 'English' ) . "</option>";	// Order by name	uksort( $output, 'strnatcasecmp' );	$output = apply_filters( 'mu_dropdown_languages', $output, $lang_files, $current );	echo implode( "\n\t", $output );}/* Warn the admin if SECRET SALT information is missing from wp-config.php */function secret_salt_warning() {	if ( !is_super_admin() )		return;	$secret_keys = array( 'AUTH_KEY', 'SECURE_AUTH_KEY', 'LOGGED_IN_KEY', 'NONCE_KEY', 'AUTH_SALT', 'SECURE_AUTH_SALT', 'LOGGED_IN_SALT', 'NONCE_SALT' );	$out = '';	foreach( $secret_keys as $key ) {		if ( ! defined( $key ) )			$out .= "define( '$key', '" . esc_html( wp_generate_password( 64, true, true ) ) . "' );<br />";	}	if ( $out != '' ) {		$msg  = __( 'Warning! WordPress encrypts user cookies, but you must add the following lines to <strong>wp-config.php</strong> for it to be more secure.' );		$msg .= '<br/>' . __( "Before the line <code>/* That's all, stop editing! Happy blogging. */</code> please add this code:" );		$msg .= "<br/><br/><code>$out</code>";		echo "<div class='update-nag'>$msg</div>";	}}add_action( 'admin_notices', 'secret_salt_warning' );function admin_notice_feed() {	global $current_user, $current_screen;	if ( $current_screen->id != 'dashboard' )		return;	if ( !empty( $_GET['feed_dismiss'] ) ) {		update_user_option( $current_user->id, 'admin_feed_dismiss', $_GET['feed_dismiss'], true );		return;	}	$url = get_site_option( 'admin_notice_feed' );	if ( empty( $url ) )		return;	$rss = fetch_feed( $url );	if ( ! is_wp_error( $rss ) && $item = $rss->get_item() ) {		$title = $item->get_title();		if ( md5( $title ) == get_user_option( 'admin_feed_dismiss' ) )			return;		$msg = "<h3>" . esc_html( $title ) . "</h3>\n";		$content = $item->get_description();		$content = $content ? wp_html_excerpt( $content, 200 ) . ' &hellip; ' : '';		$link = esc_url( strip_tags( $item->get_link() ) );		$msg .= "<p>" . $content . "<a href='$link'>" . __( 'Read More' ) . "</a> <a href='index.php?feed_dismiss=" . md5( $title ) . "'>" . __( 'Dismiss' ) . "</a></p>";		echo "<div class='updated'>$msg</div>";	} elseif ( is_super_admin() ) {		printf( '<div class="update-nag">' . __( 'Your feed at %s is empty.' ) . '</div>', esc_html( $url ) );	}}add_action( 'admin_notices', 'admin_notice_feed' );function site_admin_notice() {	global $current_user, $wp_db_version;	if ( !is_super_admin() )		return false;	if ( get_site_option( 'wpmu_upgrade_site' ) != $wp_db_version )		echo "<div class='update-nag'>" . sprintf( __( 'Thank you for Updating! Please visit the <a href="%s">Update Network</a> page to update all your sites.' ), esc_url( admin_url( 'ms-upgrade-network.php' ) ) ) . "</div>";}add_action( 'admin_notices', 'site_admin_notice' );function avoid_blog_page_permalink_collision( $data, $postarr ) {	if ( is_subdomain_install() )		return $data;	if ( $data['post_type'] != 'page' )		return $data;	if ( !isset( $data['post_name'] ) || $data['post_name'] == '' )		return $data;	if ( !is_main_site() )		return $data;	$post_name = $data['post_name'];	$c = 0;	while( $c < 10 && get_id_from_blogname( $post_name ) ) {		$post_name .= mt_rand( 1, 10 );		$c ++;	}	if ( $post_name != $data['post_name'] ) {		$data['post_name'] = $post_name;	}	return $data;}add_filter( 'wp_insert_post_data', 'avoid_blog_page_permalink_collision', 10, 2 );function choose_primary_blog() {	global $current_user;	?>	<table class="form-table">	<tr>	<?php /* translators: My sites label */ ?>		<th scope="row"><?php _e( 'Primary Site' ); ?></th>		<td>		<?php		$all_blogs = get_blogs_of_user( $current_user->ID );		$primary_blog = get_user_meta( $current_user->ID, 'primary_blog', true );		if ( count( $all_blogs ) > 1 ) {			$found = false;			?>			<select name="primary_blog">				<?php foreach( (array) $all_blogs as $blog ) {					if ( $primary_blog == $blog->userblog_id )						$found = true;					?><option value="<?php echo $blog->userblog_id ?>"<?php selected( $primary_blog,  $blog->userblog_id ); ?>><?php echo esc_url( get_home_url( $blog->userblog_id ) ) ?></option><?php				} ?>			</select>			<?php			if ( !$found ) {				$blog = array_shift( $all_blogs );				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );			}		} elseif ( count( $all_blogs ) == 1 ) {			$blog = array_shift( $all_blogs );			echo $blog->domain;			if ( $primary_blog != $blog->userblog_id ) // Set the primary blog again if it's out of sync with blog list.				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );		} else {			echo "N/A";		}		?>		</td>	</tr>	<?php if ( in_array( get_site_option( 'registration' ), array( 'all', 'blog' ) ) ) : ?>		<tr>			<th scope="row" colspan="2" class="th-full">				<a href="<?php echo apply_filters( 'wp_signup_location', network_home_url( 'wp-signup.php' ) ); ?>"><?php _e( 'Create a New Site' ); ?></a>			</th>		</tr>	<?php endif; ?>	</table>	<?php}function show_post_thumbnail_warning() {	if ( ! is_super_admin() )		return;	$mu_media_buttons = get_site_option( 'mu_media_buttons', array() );	if ( empty($mu_media_buttons['image']) && current_theme_supports( 'post-thumbnails' ) ) {		echo "<div class='update-nag'>" . sprintf( __( "Warning! The current theme supports Featured Images. You must enable image uploads on <a href='%s'>the options page</a> for it to work." ), esc_url( admin_url( 'ms-options.php' ) ) ) . "</div>";	}}add_action( 'admin_notices', 'show_post_thumbnail_warning' );function ms_deprecated_blogs_file() {	if ( ! is_super_admin() )		return;	if ( ! file_exists( WP_CONTENT_DIR . '/blogs.php' ) )		return;	echo '<div class="update-nag">' . sprintf( __( 'The <code>%1$s</code> file is deprecated. Please remove it and update your server rewrite rules to use <code>%2$s</code> instead.' ), 'wp-content/blogs.php', 'wp-includes/ms-files.php' ) . '</div>';}add_action( 'admin_notices', 'ms_deprecated_blogs_file' );/** * Outputs the notice message for multisite regarding activation of plugin page. * * @since 3.0.0 * @return none */function _admin_notice_multisite_activate_plugins_page() {	$message = sprintf( __( 'The plugins page is not visible to normal users. It must be activated first. %s' ), '<a href="' . esc_url( admin_url( 'ms-options.php#menu' ) ) . '">' . __( 'Activate' ) . '</a>' );	echo "<div class='error'><p>$message</p></div>";}/** * Grants super admin privileges. * * @since 3.0.0 * @param $user_id */function grant_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'grant_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( ! in_array( $user->user_login, $super_admins ) ) {		$super_admins[] = $user->user_login;		update_site_option( 'site_admins' , $super_admins );		do_action( 'granted_super_admin', $user_id );		return true;	}	return false;}/** * Revokes super admin privileges. * * @since 3.0.0 * @param $user_id */function revoke_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'revoke_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( $user->user_email != get_site_option( 'admin_email' ) ) {		if ( false !== ( $key = array_search( $user->user_login, $super_admins ) ) ) {			unset( $super_admins[$key] );			update_site_option( 'site_admins', $super_admins );			do_action( 'revoked_super_admin', $user_id );			return true;		}	}	return false;}?>
<?php/** * WordPress User Page * * Handles authentication, registering, resetting passwords, forgot password, * and other user handling. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php' );// Redirect to https login if forced to use SSLif ( force_ssl_admin() && !is_ssl() ) {	if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {		wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));		exit();	} else {		wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);		exit();	}}/** * Outputs the header for the login page. * * @uses do_action() Calls the 'login_head' for outputting HTML in the Log In *		header. * @uses apply_filters() Calls 'login_headerurl' for the top login link. * @uses apply_filters() Calls 'login_headertitle' for the top login title. * @uses apply_filters() Calls 'login_message' on the message to display in the *		header. * @uses $error The error global, which is checked for displaying errors. * * @param string $title Optional. WordPress Log In Page title to display in *		<title/> element. * @param string $message Optional. Message to display in header. * @param WP_Error $wp_error Optional. WordPress Error Object */function login_header($title = 'Log In', $message = '', $wp_error = '') {	global $error, $is_iphone, $interim_login, $current_site;	// Don't index any of these forms	add_filter( 'pre_option_blog_public', '__return_zero' );	add_action( 'login_head', 'noindex' );	if ( empty($wp_error) )		$wp_error = new WP_Error();	// Shake it!	$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );	$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );	if ( $shake_error_codes && $wp_error->get_error_code() && in_array( $wp_error->get_error_code(), $shake_error_codes ) )		add_action( 'login_head', 'wp_shake_js', 12 );	?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<title><?php bloginfo('name'); ?> &rsaquo; <?php echo $title; ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><?php	wp_admin_css( 'login', true );	wp_admin_css( 'colors-fresh', true );	if ( $is_iphone ) { ?>	<meta name="viewport" content="width=320; initial-scale=0.9; maximum-scale=1.0; user-scalable=0;" />	<style type="text/css" media="screen">	form { margin-left: 0px; }	#login { margin-top: 20px; }	</style><?php	} elseif ( isset($interim_login) && $interim_login ) { ?>	<style type="text/css" media="all">	.login #login { margin: 20px auto; }	</style><?php	}	do_action('login_head'); ?></head><body class="login"><?php   if ( !is_multisite() ) { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', 'http://wordpress.org/'); ?>" title="<?php echo apply_filters('login_headertitle', __('Powered by WordPress')); ?>"><?php bloginfo('name'); ?></a></h1><?php   } else { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', network_home_url() ); ?>" title="<?php echo apply_filters('login_headertitle', $current_site->site_name ); ?>"><span class="hide"><?php bloginfo('name'); ?></span></a></h1><?php   }	$message = apply_filters('login_message', $message);	if ( !empty( $message ) ) echo $message . "\n";	// Incase a plugin uses $error rather than the $errors object	if ( !empty( $error ) ) {		$wp_error->add('error', $error);		unset($error);	}	if ( $wp_error->get_error_code() ) {		$errors = '';		$messages = '';		foreach ( $wp_error->get_error_codes() as $code ) {			$severity = $wp_error->get_error_data($code);			foreach ( $wp_error->get_error_messages($code) as $error ) {				if ( 'message' == $severity )					$messages .= '	' . $error . "<br />\n";				else					$errors .= '	' . $error . "<br />\n";			}		}		if ( !empty($errors) )			echo '<div id="login_error">' . apply_filters('login_errors', $errors) . "</div>\n";		if ( !empty($messages) )			echo '<p class="message">' . apply_filters('login_messages', $messages) . "</p>\n";	}} // End of login_header()function wp_shake_js() {	global $is_iphone;	if ( $is_iphone )		return;?><script type="text/javascript">addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function s(id,pos){g(id).left=pos+'px';}function g(id){return document.getElementById(id).style;}function shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}addLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});</script><?php}/** * Handles sending password retrieval email to user. * * @uses $wpdb WordPress Database object * * @return bool|WP_Error True: when finish. WP_Error on error */function retrieve_password() {	global $wpdb, $current_site;	$errors = new WP_Error();	if ( empty( $_POST['user_login'] ) && empty( $_POST['user_email'] ) )		$errors->add('empty_username', __('<strong>ERROR</strong>: Enter a username or e-mail address.'));	if ( strpos($_POST['user_login'], '@') ) {		$user_data = get_user_by_email(trim($_POST['user_login']));		if ( empty($user_data) )			$errors->add('invalid_email', __('<strong>ERROR</strong>: There is no user registered with that email address.'));	} else {		$login = trim($_POST['user_login']);		$user_data = get_userdatabylogin($login);	}	do_action('lostpassword_post');	if ( $errors->get_error_code() )		return $errors;	if ( !$user_data ) {		$errors->add('invalidcombo', __('<strong>ERROR</strong>: Invalid username or e-mail.'));		return $errors;	}	// redefining user_login ensures we return the right case in the email	$user_login = $user_data->user_login;	$user_email = $user_data->user_email;	do_action('retreive_password', $user_login);  // Misspelled and deprecated	do_action('retrieve_password', $user_login);	$allow = apply_filters('allow_password_reset', true, $user_data->ID);	if ( ! $allow )		return new WP_Error('no_password_reset', __('Password reset is not allowed for this user'));	else if ( is_wp_error($allow) )		return $allow;	$key = $wpdb->get_var($wpdb->prepare("SELECT user_activation_key FROM $wpdb->users WHERE user_login = %s", $user_login));	if ( empty($key) ) {		// Generate something random for a key...		$key = wp_generate_password(20, false);		do_action('retrieve_password_key', $user_login, $key);		// Now insert the new md5 key into the db		$wpdb->update($wpdb->users, array('user_activation_key' => $key), array('user_login' => $user_login));	}	$message = __('Someone has asked to reset the password for the following site and username.') . "\r\n\r\n";	$message .= network_site_url() . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= __('To reset your password visit the following address, otherwise just ignore this email and nothing will happen.') . "\r\n\r\n";	$message .= network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_login), 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Password Reset'), $blogname );	$title = apply_filters('retrieve_password_title', $title);	$message = apply_filters('retrieve_password_message', $message, $key);	if ( $message && !wp_mail($user_email, $title, $message) )		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	return true;}/** * Handles resetting the user's password. * * @uses $wpdb WordPress Database object * * @param string $key Hash to validate sending user's password * @return bool|WP_Error */function reset_password($key, $login) {	global $wpdb;	$key = preg_replace('/[^a-z0-9]/i', '', $key);	if ( empty( $key ) || !is_string( $key ) )		return new WP_Error('invalid_key', __('Invalid key'));	if ( empty($login) || !is_string($login) )		return new WP_Error('invalid_key', __('Invalid key'));	$user = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->users WHERE user_activation_key = %s AND user_login = %s", $key, $login));	if ( empty( $user ) )		return new WP_Error('invalid_key', __('Invalid key'));	// Generate something random for a password...	$new_pass = wp_generate_password();	do_action('password_reset', $user, $new_pass);	wp_set_password($new_pass, $user->ID);	update_user_option($user->ID, 'default_password_nag', true, true); //Set up the Password change nag.	$message  = sprintf(__('Username: %s'), $user->user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $new_pass) . "\r\n";	$message .= site_url('wp-login.php', 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Your new password'), $blogname );	$title = apply_filters('password_reset_title', $title);	$message = apply_filters('password_reset_message', $message, $new_pass);	if ( $message && !wp_mail($user->user_email, $title, $message) )  		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	wp_password_change_notification($user);	return true;}/** * Handles registering a new user. * * @param string $user_login User's username for logging in * @param string $user_email User's email address to send password and add * @return int|WP_Error Either user's ID or error on failure. */function register_new_user( $user_login, $user_email ) {	$errors = new WP_Error();	$sanitized_user_login = sanitize_user( $user_login );	$user_email = apply_filters( 'user_registration_email', $user_email );	// Check the username	if ( $sanitized_user_login == '' ) {		$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Please enter a username.' ) );	} elseif ( ! validate_username( $user_login ) ) {		$errors->add( 'invalid_username', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ) );		$sanitized_user_login = '';	} elseif ( username_exists( $sanitized_user_login ) ) {		$errors->add( 'username_exists', __( '<strong>ERROR</strong>: This username is already registered, please choose another one.' ) );	}	// Check the e-mail address	if ( $user_email == '' ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please type your e-mail address.' ) );	} elseif ( ! is_email( $user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The email address isn&#8217;t correct.' ) );		$user_email = '';	} elseif ( email_exists( $user_email ) ) {		$errors->add( 'email_exists', __( '<strong>ERROR</strong>: This email is already registered, please choose another one.' ) );	}	do_action( 'register_post', $sanitized_user_login, $user_email, $errors );	$errors = apply_filters( 'registration_errors', $errors, $sanitized_user_login, $user_email );	if ( $errors->get_error_code() )		return $errors;	$user_pass = wp_generate_password();	$user_id = wp_create_user( $sanitized_user_login, $user_pass, $user_email );	if ( ! $user_id ) {		$errors->add( 'registerfail', sprintf( __( '<strong>ERROR</strong>: Couldn&#8217;t register you... please contact the <a href="mailto:%s">webmaster</a> !' ), get_option( 'admin_email' ) ) );		return $errors;	}	update_user_option( $user_id, 'default_password_nag', true, true ); //Set up the Password change nag.	wp_new_user_notification( $user_id, $user_pass );	return $user_id;}//// Main//$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : 'login';$errors = new WP_Error();if ( isset($_GET['key']) )	$action = 'resetpass';// validate action so as to default to the login screenif ( !in_array($action, array('logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login'), true) && false === has_filter('login_form_' . $action) )	$action = 'login';nocache_headers();header('Content-Type: '.get_bloginfo('html_type').'; charset='.get_bloginfo('charset'));if ( defined('RELOCATE') ) { // Move flag is set	if ( isset( $_SERVER['PATH_INFO'] ) && ($_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF']) )		$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );	$schema = is_ssl() ? 'https://' : 'http://';	if ( dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) != get_option('siteurl') )		update_option('siteurl', dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) );}//Set a cookie now to see if they are supported by the browser.setcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN);if ( SITECOOKIEPATH != COOKIEPATH )	setcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN);// allow plugins to override the default actions, and to add extra actions if they wantdo_action('login_form_' . $action);$http_post = ('POST' == $_SERVER['REQUEST_METHOD']);switch ($action) {case 'logout' :	check_admin_referer('log-out');	wp_logout();	$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?loggedout=true';	wp_safe_redirect( $redirect_to );	exit();break;case 'lostpassword' :case 'retrievepassword' :	if ( $http_post ) {		$errors = retrieve_password();		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';			wp_safe_redirect( $redirect_to );			exit();		}	}	if ( isset($_GET['error']) && 'invalidkey' == $_GET['error'] ) $errors->add('invalidkey', __('Sorry, that key does not appear to be valid.'));	$redirect_to = apply_filters( 'lostpassword_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	do_action('lost_password');	login_header(__('Lost Password'), '<p class="message">' . __('Please enter your username or e-mail address. You will receive a new password via e-mail.') . '</p>', $errors);	$user_login = isset($_POST['user_login']) ? stripslashes($_POST['user_login']) : '';?><form name="lostpasswordform" id="lostpasswordform" action="<?php echo site_url('wp-login.php?action=lostpassword', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username or E-mail:') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p><?php do_action('lostpassword_form'); ?>	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Get New Password'); ?>" tabindex="100" /></p></form><p id="nav"><?php if (get_option('users_can_register')) : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'resetpass' :case 'rp' :	$errors = reset_password($_GET['key'], $_GET['login']);	if ( ! is_wp_error($errors) ) {		wp_redirect('wp-login.php?checkemail=newpass');		exit();	}	wp_redirect('wp-login.php?action=lostpassword&error=invalidkey');	exit();break;case 'register' :	if ( is_multisite() ) {		// Multisite uses wp-signup.php		wp_redirect( apply_filters( 'wp_signup_location', get_bloginfo('wpurl') . '/wp-signup.php' ) );		exit;	}	if ( !get_option('users_can_register') ) {		wp_redirect('wp-login.php?registration=disabled');		exit();	}	$user_login = '';	$user_email = '';	if ( $http_post ) {		require_once( ABSPATH . WPINC . '/registration.php');		$user_login = $_POST['user_login'];		$user_email = $_POST['user_email'];		$errors = register_new_user($user_login, $user_email);		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';			wp_safe_redirect( $redirect_to );			exit();		}	}	$redirect_to = apply_filters( 'registration_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	login_header(__('Registration Form'), '<p class="message register">' . __('Register For This Site') . '</p>', $errors);?><form name="registerform" id="registerform" action="<?php echo site_url('wp-login.php?action=register', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr(stripslashes($user_login)); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('E-mail') ?><br />		<input type="text" name="user_email" id="user_email" class="input" value="<?php echo esc_attr(stripslashes($user_email)); ?>" size="25" tabindex="20" /></label>	</p><?php do_action('register_form'); ?>	<p id="reg_passmail"><?php _e('A password will be e-mailed to you.') ?></p>	<br class="clear" />	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Register'); ?>" tabindex="100" /></p></form><p id="nav"><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'login' :default:	$secure_cookie = '';	$interim_login = isset($_REQUEST['interim-login']);	// If the user wants ssl but the session is not ssl, force a secure cookie.	if ( !empty($_POST['log']) && !force_ssl_admin() ) {		$user_name = sanitize_user($_POST['log']);		if ( $user = get_userdatabylogin($user_name) ) {			if ( get_user_option('use_ssl', $user->ID) ) {				$secure_cookie = true;				force_ssl_admin(true);			}		}	}	if ( isset( $_REQUEST['redirect_to'] ) ) {		$redirect_to = $_REQUEST['redirect_to'];		// Redirect to https if user wants ssl		if ( $secure_cookie && false !== strpos($redirect_to, 'wp-admin') )			$redirect_to = preg_replace('|^http://|', 'https://', $redirect_to);	} else {		$redirect_to = admin_url();	}	$reauth = empty($_REQUEST['reauth']) ? false : true;	// If the user was redirected to a secure login form from a non-secure admin page, and secure login is required but secure admin is not, then don't use a secure	// cookie and redirect back to the referring non-secure admin page.  This allows logins to always be POSTed over SSL while allowing the user to choose visiting	// the admin via http or https.	if ( !$secure_cookie && is_ssl() && force_ssl_login() && !force_ssl_admin() && ( 0 !== strpos($redirect_to, 'https') ) && ( 0 === strpos($redirect_to, 'http') ) )		$secure_cookie = false;	$user = wp_signon('', $secure_cookie);	$redirect_to = apply_filters('login_redirect', $redirect_to, isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '', $user);	if ( !is_wp_error($user) && !$reauth ) {		if ( $interim_login ) {			$message = '<p class="message">' . __('You have logged in successfully.') . '</p>';			login_header( '', $message ); ?>			<script type="text/javascript">setTimeout( function(){window.close()}, 8000);</script>			<p class="alignright">			<input type="button" class="button-primary" value="<?php esc_attr_e('Close'); ?>" onclick="window.close()" /></p>			</div></body></html><?php		exit;		}		// If the user can't edit posts, send them to their profile.		if ( !$user->has_cap('edit_posts') && ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) )			$redirect_to = admin_url('profile.php');		wp_safe_redirect($redirect_to);		exit();	}	$errors = $user;	// Clear errors if loggedout is set.	if ( !empty($_GET['loggedout']) || $reauth )		$errors = new WP_Error();	// If cookies are disabled we can't log in even with a valid user+pass	if ( isset($_POST['testcookie']) && empty($_COOKIE[TEST_COOKIE]) )		$errors->add('test_cookie', __("<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href='http://www.google.com/cookies.html'>enable cookies</a> to use WordPress."));	// Some parts of this script use the main login form to display a message	if		( isset($_GET['loggedout']) && TRUE == $_GET['loggedout'] )		$errors->add('loggedout', __('You are now logged out.'), 'message');	elseif	( isset($_GET['registration']) && 'disabled' == $_GET['registration'] )		$errors->add('registerdisabled', __('User registration is currently not allowed.'));	elseif	( isset($_GET['checkemail']) && 'confirm' == $_GET['checkemail'] )		$errors->add('confirm', __('Check your e-mail for the confirmation link.'), 'message');	elseif	( isset($_GET['checkemail']) && 'newpass' == $_GET['checkemail'] )		$errors->add('newpass', __('Check your e-mail for your new password.'), 'message');	elseif	( isset($_GET['checkemail']) && 'registered' == $_GET['checkemail'] )		$errors->add('registered', __('Registration complete. Please check your e-mail.'), 'message');	elseif	( $interim_login )		$errors->add('expired', __('Your session has expired. Please log-in again.'), 'message');	// Clear any stale cookies.	if ( $reauth )		wp_clear_auth_cookie();	login_header(__('Log In'), '', $errors);	if ( isset($_POST['log']) )		$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr(stripslashes($_POST['log'])) : '';	$rememberme = ! empty( $_POST['rememberme'] );?><form name="loginform" id="loginform" action="<?php echo site_url('wp-login.php', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="log" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('Password') ?><br />		<input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="20" /></label>	</p><?php do_action('login_form'); ?>	<p class="forgetmenot"><label><input name="rememberme" type="checkbox" id="rememberme" value="forever" tabindex="90"<?php checked( $rememberme ); ?> /> <?php esc_attr_e('Remember Me'); ?></label></p>	<p class="submit">		<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Log In'); ?>" tabindex="100" /><?php	if ( $interim_login ) { ?>		<input type="hidden" name="interim-login" value="1" /><?php	} else { ?>		<input type="hidden" name="redirect_to" value="<?php echo esc_attr($redirect_to); ?>" /><?php 	} ?>		<input type="hidden" name="testcookie" value="1" />	</p></form><?php if ( !$interim_login ) { ?><p id="nav"><?php if ( isset($_GET['checkemail']) && in_array( $_GET['checkemail'], array('confirm', 'newpass') ) ) : ?><?php elseif ( get_option('users_can_register') ) : ?><a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><?php } else { ?></div><?php } ?><script type="text/javascript">function wp_attempt_focus(){setTimeout( function(){ try{<?php if ( $user_login || $interim_login ) { ?>d = document.getElementById('user_pass');<?php } else { ?>d = document.getElementById('user_login');<?php } ?>d.value = '';d.focus();} catch(e){}}, 200);}<?php if ( !$error ) { ?>wp_attempt_focus();<?php } ?>if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;} // end action switch?>
<?php/** * Multi-site WordPress API * * @package WordPress * @subpackage Multisite * @since 3.0.0 */function get_sitestats() {	global $wpdb;	$stats['blogs'] = get_blog_count();	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( "SELECT COUNT(ID) FROM $wpdb->users" );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	} else {		$count = get_site_option( 'user_count' );	}	$stats['users'] = $count;	return $stats;}function get_admin_users_for_domain( $sitedomain = '', $path = '' ) {	global $wpdb;	if ( ! $sitedomain )		$site_id = $wpdb->siteid;	else		$site_id = $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE domain = %s AND path = %s", $sitedomain, $path ) );	if ( $site_id )		return $wpdb->get_results( $wpdb->prepare( "SELECT u.ID, u.user_login, u.user_pass FROM $wpdb->users AS u, $wpdb->sitemeta AS sm WHERE sm.meta_key = 'admin_user_id' AND u.ID = sm.meta_value AND sm.site_id = %d", $site_id ), ARRAY_A );	return false;}function get_blogs_of_user( $id, $all = false ) {	global $wpdb;	$cache_suffix = $all ? '_all' : '_short';	$return = wp_cache_get( 'blogs_of_user_' . $id . $cache_suffix, 'users' );	if ( $return )		return apply_filters( 'get_blogs_of_user', $return, $id, $all );	$user = get_userdata( (int) $id );	if ( !$user )		return false;	$blogs = $match = array();	$prefix_length = strlen($wpdb->base_prefix);	foreach ( (array) $user as $key => $value ) {		if ( $prefix_length && substr($key, 0, $prefix_length) != $wpdb->base_prefix )			continue;		if ( substr($key, -12, 12) != 'capabilities' )			continue;		if ( preg_match( '/^' . $wpdb->base_prefix . '((\d+)_)?capabilities$/', $key, $match ) ) {			if ( count( $match ) > 2 )				$blog_id = $match[ 2 ];			else				$blog_id = 1;			$blog = get_blog_details( $blog_id );			if ( $blog && isset( $blog->domain ) && ( $all == true || $all == false && ( $blog->archived == 0 && $blog->spam == 0 && $blog->deleted == 0 ) ) ) {				$blogs[ $blog_id ]->userblog_id	= $blog_id;				$blogs[ $blog_id ]->blogname		= $blog->blogname;				$blogs[ $blog_id ]->domain		= $blog->domain;				$blogs[ $blog_id ]->path			= $blog->path;				$blogs[ $blog_id ]->site_id		= $blog->site_id;				$blogs[ $blog_id ]->siteurl		= $blog->siteurl;			}		}	}	wp_cache_add( 'blogs_of_user_' . $id . $cache_suffix, $blogs, 'users', 5 );	return apply_filters( 'get_blogs_of_user', $blogs, $id, $all );}function get_active_blog_for_user( $user_id ) { // get an active blog for user - either primary blog or from blogs list	global $wpdb;	$blogs = get_blogs_of_user( $user_id );	if ( empty( $blogs ) ) {		$details = get_dashboard_blog();		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );		update_user_meta( $user_id, 'primary_blog', $details->blog_id );		wp_cache_delete( $user_id, 'users' );		return $details;	}	$primary_blog = get_user_meta( $user_id, 'primary_blog', true );	$details = get_dashboard_blog();	if ( $primary_blog ) {		$blogs = get_blogs_of_user( $user_id );		if ( isset( $blogs[ $primary_blog ] ) == false ) {			add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );			update_user_meta( $user_id, 'primary_blog', $details->blog_id );			wp_cache_delete( $user_id, 'users' );		} else {			$details = get_blog_details( $primary_blog );		}	} else {		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog		update_user_meta( $user_id, 'primary_blog', $details->blog_id );	}	if ( ( is_object( $details ) == false ) || ( is_object( $details ) && $details->archived == 1 || $details->spam == 1 || $details->deleted == 1 ) ) {		$blogs = get_blogs_of_user( $user_id, true ); // if a user's primary blog is shut down, check their other blogs.		$ret = false;		if ( is_array( $blogs ) && count( $blogs ) > 0 ) {			foreach ( (array) $blogs as $blog_id => $blog ) {				if ( $blog->site_id != $wpdb->siteid )					continue;				$details = get_blog_details( $blog_id );				if ( is_object( $details ) && $details->archived == 0 && $details->spam == 0 && $details->deleted == 0 ) {					$ret = $blog;					$changed = false;					if ( get_user_meta( $user_id , 'primary_blog', true ) != $blog_id ) {						update_user_meta( $user_id, 'primary_blog', $blog_id );						$changed = true;					}					if ( !get_user_meta($user_id , 'source_domain', true) ) {						update_user_meta( $user_id, 'source_domain', $blog->domain );						$changed = true;					}					if ( $changed )						wp_cache_delete( $user_id, 'users' );					break;				}			}		} else {			// Should never get here			$dashboard_blog = get_dashboard_blog();			add_user_to_blog( $dashboard_blog->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog			update_user_meta( $user_id, 'primary_blog', $dashboard_blog->blog_id );			return $dashboard_blog;		}		return $ret;	} else {		return $details;	}}function is_user_member_of_blog( $user_id, $blog_id = 0 ) {	$user_id = (int) $user_id;	$blog_id = (int) $blog_id;	if ( $blog_id == 0 ) {		global $wpdb;		$blog_id = $wpdb->blogid;	}	$blogs = get_blogs_of_user( $user_id );	if ( is_array( $blogs ) )		return array_key_exists( $blog_id, $blogs );	else		return false;}function get_user_count() {	global $wpdb;	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(ID) as c FROM $wpdb->users WHERE spam = '0' AND deleted = '0'") );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	}	$count = get_site_option( 'user_count' );	return $count;}function get_blog_count( $id = 0 ) {	global $wpdb;	if ( $id == 0 )		$id = $wpdb->siteid;	$count_ts = get_site_option( 'blog_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(blog_id) as c FROM $wpdb->blogs WHERE site_id = %d AND spam = '0' AND deleted = '0' and archived = '0'", $id) );		update_site_option( 'blog_count', $count );		update_site_option( 'blog_count_ts', time() );	}	$count = get_site_option( 'blog_count' );	return $count;}function get_blog_post( $blog_id, $post_id ) {	global $wpdb;	$key = $blog_id . '-' . $post_id;	$post = wp_cache_get( $key, 'global-posts' );	if ( $post == false ) {		$post = $wpdb->get_row( $wpdb->prepare( 'SELECT * FROM ' . $wpdb->get_blog_prefix( $blog_id ) . 'posts WHERE ID = %d', $post_id ) );		wp_cache_add( $key, $post, 'global-posts' );	}	return $post;}function add_user_to_blog( $blog_id, $user_id, $role ) {	switch_to_blog($blog_id);	$user = new WP_User($user_id);	if ( empty($user) || !$user->ID )		return new WP_Error('user_does_not_exist', __('That user does not exist.'));	if ( !get_user_meta($user_id, 'primary_blog', true) ) {		update_user_meta($user_id, 'primary_blog', $blog_id);		$details = get_blog_details($blog_id);		update_user_meta($user_id, 'source_domain', $details->domain);	}	$user->set_role($role);	do_action('add_user_to_blog', $user_id, $role, $blog_id);	wp_cache_delete( $user_id, 'users' );	restore_current_blog();	return true;}function remove_user_from_blog($user_id, $blog_id = '', $reassign = '') {	global $wpdb;	switch_to_blog($blog_id);	$user_id = (int) $user_id;	do_action('remove_user_from_blog', $user_id, $blog_id);	// If being removed from the primary blog, set a new primary if the user is assigned	// to multiple blogs.	$primary_blog = get_user_meta($user_id, 'primary_blog', true);	if ( $primary_blog == $blog_id ) {		$new_id = '';		$new_domain = '';		$blogs = get_blogs_of_user($user_id);		foreach ( (array) $blogs as $blog ) {			if ( $blog->userblog_id == $blog_id )				continue;			$new_id = $blog->userblog_id;			$new_domain = $blog->domain;			break;		}		update_user_meta($user_id, 'primary_blog', $new_id);		update_user_meta($user_id, 'source_domain', $new_domain);	}	// wp_revoke_user($user_id);	$user = new WP_User($user_id);	$user->remove_all_caps();	$blogs = get_blogs_of_user($user_id);	if ( count($blogs) == 0 ) {		update_user_meta($user_id, 'primary_blog', '');		update_user_meta($user_id, 'source_domain', '');	}	if ( $reassign != '' ) {		$reassign = (int) $reassign;		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_author = %d WHERE post_author = %d", $reassign, $user_id) );		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->links SET link_owner = %d WHERE link_owner = %d", $reassign, $user_id) );	}	restore_current_blog();}function create_empty_blog( $domain, $path, $weblog_title, $site_id = 1 ) {	$domain			= addslashes( $domain );	$weblog_title	= addslashes( $weblog_title );	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return __( 'Error: Site URL already taken.' );	// Need to backup wpdb table names, and create a new wp_blogs entry for new blog.	// Need to get blog_id from wp_blogs, and create new table names.	// Must restore table names at the end of function.	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return __( 'Error: problem creating site entry.' );	switch_to_blog($blog_id);	install_blog($blog_id);	restore_current_blog();	return $blog_id;}function get_blog_permalink( $_blog_id, $post_id ) {	$key = "{$_blog_id}-{$post_id}-blog_permalink";	$link = wp_cache_get( $key, 'site-options' );	if ( $link == false ) {		switch_to_blog( $_blog_id );		$link = get_permalink( $post_id );		restore_current_blog();		wp_cache_add( $key, $link, 'site-options', 360 );	}	return $link;}function get_blog_id_from_url( $domain, $path = '/' ) {	global $wpdb;	$domain = strtolower( $wpdb->escape( $domain ) );	$path = strtolower( $wpdb->escape( $path ) );	$id = wp_cache_get( md5( $domain . $path ), 'blog-id-cache' );	if ( $id == -1 ) { // blog does not exist		return 0;	} elseif ( $id ) {		return (int)$id;	}	$id = $wpdb->get_var( "SELECT blog_id FROM $wpdb->blogs WHERE domain = '$domain' and path = '$path' /* get_blog_id_from_url */" );	if ( !$id ) {		wp_cache_set( md5( $domain . $path ), -1, 'blog-id-cache' );		return false;	}	wp_cache_set( md5( $domain . $path ), $id, 'blog-id-cache' );	return $id;}// wpmu admin functionsfunction wpmu_admin_do_redirect( $url = '' ) {	$ref = '';	if ( isset( $_GET['ref'] ) )		$ref = $_GET['ref'];	if ( isset( $_POST['ref'] ) )		$ref = $_POST['ref'];	if ( $ref ) {		$ref = wpmu_admin_redirect_add_updated_param( $ref );		wp_redirect( $ref );		exit();	}	if ( empty( $_SERVER['HTTP_REFERER'] ) == false ) {		wp_redirect( $_SERVER['HTTP_REFERER'] );		exit();	}	$url = wpmu_admin_redirect_add_updated_param( $url );	if ( isset( $_GET['redirect'] ) ) {		if ( substr( $_GET['redirect'], 0, 2 ) == 's_' )			$url .= '&action=blogs&s='. esc_html( substr( $_GET['redirect'], 2 ) );	} elseif ( isset( $_POST['redirect'] ) ) {		$url = wpmu_admin_redirect_add_updated_param( $_POST['redirect'] );	}	wp_redirect( $url );	exit();}function wpmu_admin_redirect_add_updated_param( $url = '' ) {	if ( strpos( $url, 'updated=true' ) === false ) {		if ( strpos( $url, '?' ) === false )			return $url . '?updated=true';		else			return $url . '&updated=true';	}	return $url;}function is_blog_user( $blog_id = 0 ) {	global $current_user, $wpdb;	if ( !$blog_id )		$blog_id = $wpdb->blogid;	$cap_key = $wpdb->base_prefix . $blog_id . '_capabilities';	if ( is_array($current_user->$cap_key) && in_array(1, $current_user->$cap_key) )		return true;	return false;}function is_email_address_unsafe( $user_email ) {	$banned_names = get_site_option( 'banned_email_domains' );	if ($banned_names && !is_array( $banned_names ))		$banned_names = explode( "\n", $banned_names);	if ( is_array( $banned_names ) && empty( $banned_names ) == false ) {		$email_domain = strtolower( substr( $user_email, 1 + strpos( $user_email, '@' ) ) );		foreach ( (array) $banned_names as $banned_domain ) {			if ( $banned_domain == '' )				continue;			if (				strstr( $email_domain, $banned_domain ) ||				(					strstr( $banned_domain, '/' ) &&					preg_match( $banned_domain, $email_domain )				)			)			return true;		}	}	return false;}function wpmu_validate_user_signup($user_name, $user_email) {	global $wpdb;	$errors = new WP_Error();	$orig_username = $user_name;	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$maybe = array();	preg_match( '/[a-z0-9]+/', $user_name, $maybe );	if ( $user_name != $orig_username || $user_name != $maybe[0] ) {		$errors->add( 'user_name', __( "Only the lowercase letters a-z and numbers allowed" ) );		$user_name = $orig_username;	}	$user_email = sanitize_email( $user_email );	if ( empty( $user_name ) )	   	$errors->add('user_name', __('Please enter a username'));	$illegal_names = get_site_option( 'illegal_names' );	if ( is_array( $illegal_names ) == false ) {		$illegal_names = array(  'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	if ( in_array( $user_name, $illegal_names ) == true )		$errors->add('user_name',  __('That username is not allowed'));	if ( is_email_address_unsafe( $user_email ) )		$errors->add('user_email',  __('You cannot use that email address to signup. We are having problems with them blocking some of our email. Please use another email provider.'));	if ( strlen( $user_name ) < 4 )		$errors->add('user_name',  __('Username must be at least 4 characters'));	if ( strpos( ' ' . $user_name, '_' ) != false )		$errors->add( 'user_name', __( 'Sorry, usernames may not contain the character &#8220;_&#8221;!' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $user_name, $match );	if ( $match[0] == $user_name )		$errors->add('user_name', __('Sorry, usernames must have letters too!'));	if ( !is_email( $user_email ) )		$errors->add('user_email', __('Please enter a correct email address'));	$limited_email_domains = get_site_option( 'limited_email_domains' );	if ( is_array( $limited_email_domains ) && empty( $limited_email_domains ) == false ) {		$emaildomain = substr( $user_email, 1 + strpos( $user_email, '@' ) );		if ( in_array( $emaildomain, $limited_email_domains ) == false )			$errors->add('user_email', __('Sorry, that email address is not allowed!'));	}	// Check if the username has been used already.	if ( username_exists($user_name) )		$errors->add('user_name', __('Sorry, that username already exists!'));	// Check if the email address has been used already.	if ( email_exists($user_email) )		$errors->add('user_email', __('Sorry, that email address is already used!'));	// Has someone already signed up for this username?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_login = %s", $user_name) );	if ( $signup != null ) {		$registered_at =  mysql2date('U', $signup->registered);		$now = current_time( 'timestamp', true );		$diff = $now - $registered_at;		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_login = %s", $user_name) );		else			$errors->add('user_name', __('That username is currently reserved but may be available in a couple of days.'));		if ( $signup->active == 0 && $signup->user_email == $user_email )			$errors->add('user_email_used', __('username and email used'));	}	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_email = %s", $user_email) );	if ( $signup != null ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_email = %s", $user_email) );		else			$errors->add('user_email', __('That email address has already been used. Please check your inbox for an activation email. It will become available in a couple of days if you do nothing.'));	}	$result = array('user_name' => $user_name, 'orig_username' => $orig_username, 'user_email' => $user_email, 'errors' => $errors);	return apply_filters('wpmu_validate_user_signup', $result);}function wpmu_validate_blog_signup($blogname, $blog_title, $user = '') {	global $wpdb, $domain, $base, $current_site;	$blog_title = strip_tags( $blog_title );	$blog_title = substr( $blog_title, 0, 50 );	$errors = new WP_Error();	$illegal_names = get_site_option( 'illegal_names' );	if ( $illegal_names == false ) {		$illegal_names = array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	// On sub dir installs, Some names are so illegal, only a filter can spring them from jail	if (! is_subdomain_install() )		$illegal_names = array_merge($illegal_names, apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) ) );	if ( empty( $blogname ) )		$errors->add('blogname', __('Please enter a site name'));	$maybe = array();	preg_match( '/[a-z0-9]+/', $blogname, $maybe );	if ( $blogname != $maybe[0] )		$errors->add('blogname', __('Only lowercase letters and numbers allowed'));	if ( in_array( $blogname, $illegal_names ) == true )		$errors->add('blogname',  __('That name is not allowed'));	if ( strlen( $blogname ) < 4 && !is_super_admin() )		$errors->add('blogname',  __('Site name must be at least 4 characters'));	if ( strpos( ' ' . $blogname, '_' ) != false )		$errors->add( 'blogname', __( 'Sorry, site names may not contain the character &#8220;_&#8221;!' ) );	// do not allow users to create a blog that conflicts with a page on the main blog.	if ( !is_subdomain_install() && $wpdb->get_var( $wpdb->prepare( "SELECT post_name FROM " . $wpdb->get_blog_prefix( $current_site->blog_id ) . "posts WHERE post_type = 'page' AND post_name = %s", $blogname ) ) )		$errors->add( 'blogname', __( 'Sorry, you may not use that site name.' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $blogname, $match );	if ( $match[0] == $blogname )		$errors->add('blogname', __('Sorry, site names must have letters too!'));	$blogname = apply_filters( 'newblogname', $blogname );	$blog_title = stripslashes(  $blog_title );	if ( empty( $blog_title ) )		$errors->add('blog_title', __('Please enter a site title'));	// Check if the domain/path has been used already.	if ( is_subdomain_install() ) {		$mydomain = $blogname . '.' . preg_replace( '|^www\.|', '', $domain );		$path = $base;	} else {		$mydomain = "$domain";		$path = $base.$blogname.'/';	}	if ( domain_exists($mydomain, $path) )		$errors->add('blogname', __('Sorry, that site already exists!'));	if ( username_exists( $blogname ) ) {		if ( is_object( $user ) == false || ( is_object($user) && ( $user->user_login != $blogname ) ) )			$errors->add( 'blogname', __( 'Sorry, that site is reserved!' ) );	}	// Has someone already signed up for this domain?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) ); // TODO: Check email too?	if ( ! empty($signup) ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) );		else			$errors->add('blogname', __('That site is currently reserved but may be available in a couple days.'));	}	$result = array('domain' => $mydomain, 'path' => $path, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors);	return apply_filters('wpmu_validate_blog_signup', $result);}// Record signup information for future activation. wpmu_validate_signup() should be run// on the inputs before calling wpmu_signup().function wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta = '') {	global $wpdb;	$key = substr( md5( time() . rand() . $domain ), 0, 16 );	$meta = serialize($meta);	$domain = $wpdb->escape($domain);	$path = $wpdb->escape($path);	$title = $wpdb->escape($title);	$wpdb->insert( $wpdb->signups, array(		'domain' => $domain,		'path' => $path,		'title' => $title,		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta);}function wpmu_signup_user($user, $user_email, $meta = '') {	global $wpdb;	// Format data	$user = preg_replace( '/\s+/', '', sanitize_user( $user, true ) );	$user_email = sanitize_email( $user_email );	$key = substr( md5( time() . rand() . $user_email ), 0, 16 );	$meta = serialize($meta);	$wpdb->insert( $wpdb->signups, array(		'domain' => '',		'path' => '',		'title' => '',		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_user_notification($user, $user_email, $key, $meta);}// Notify user of signup success.function wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_signup_blog_notification', $domain, $path, $title, $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	if ( !is_subdomain_install() || $current_site->id != 1 )		$activate_url = network_site_url("wp-activate.php?key=$key");	else		$activate_url = "http://{$domain}{$path}wp-activate.php?key=$key"; // @todo use *_url() API	$activate_url = esc_url($activate_url);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_blog_notification_email', __( "To activate your blog, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\nAfter you activate, you can visit your site here:\n\n%s" ) ), $activate_url, esc_url( "http://{$domain}{$path}" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( apply_filters( 'wpmu_signup_blog_notification_subject', __( '[%1s] Activate %2s' ) ), $from_name, esc_url( 'http://' . $domain . $path ) );	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_signup_user_notification($user, $user_email, $key, $meta = '') {	if ( !apply_filters('wpmu_signup_user_notification', $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_user_notification_email', __( "To activate your user, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\n" ) ), site_url( "wp-activate.php?key=$key" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( __( apply_filters( 'wpmu_signup_user_notification_subject', '[%1s] Activate %2s' ) ), $from_name, $user);	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_activate_signup($key) {	global $wpdb, $current_site;	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE activation_key = %s", $key) );	if ( empty($signup) )		return new WP_Error('invalid_key', __('Invalid activation key.'));	if ( $signup->active )		return new WP_Error('already_active', __('The site is already active.'), $signup);	$meta = unserialize($signup->meta);	$user_login = $wpdb->escape($signup->user_login);	$user_email = $wpdb->escape($signup->user_email);	$password = wp_generate_password();	$user_id = username_exists($user_login);	if ( ! $user_id )		$user_id = wpmu_create_user($user_login, $password, $user_email);	else		$user_already_exists = true;	if ( ! $user_id )		return new WP_Error('create_user', __('Could not create user'), $signup);	$now = current_time('mysql', true);	if ( empty($signup->domain) ) {		$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );		if ( isset( $user_already_exists ) )			return new WP_Error( 'user_already_exists', __( 'That username is already activated.' ), $signup);		wpmu_welcome_user_notification($user_id, $password, $meta);		$user_site = get_site_option( 'dashboard_blog', $current_site->blog_id );		if ( $user_site == false )			add_user_to_blog( '1', $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( $user_site, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		add_new_user_to_blog( $user_id, $user_email, $meta );		do_action('wpmu_activate_user', $user_id, $password, $meta);		return array('user_id' => $user_id, 'password' => $password, 'meta' => $meta);	}	$blog_id = wpmu_create_blog( $signup->domain, $signup->path, $signup->title, $user_id, $meta, $wpdb->siteid );	// TODO: What to do if we create a user but cannot create a blog?	if ( is_wp_error($blog_id) ) {		// If blog is taken, that means a previous attempt to activate this blog failed in between creating the blog and		// setting the activation flag.  Let's just set the active flag and instruct the user to reset their password.		if ( 'blog_taken' == $blog_id->get_error_code() ) {			$blog_id->add_data( $signup );			$wpdb->update( $wpdb->signups, array( 'active' => 1, 'activated' => $now ), array( 'activation_key' => $key ) );		}		return $blog_id;	}	$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );	wpmu_welcome_notification($blog_id, $user_id, $password, $signup->title, $meta);	do_action('wpmu_activate_blog', $blog_id, $user_id, $password, $signup->title, $meta);	return array('blog_id' => $blog_id, 'user_id' => $user_id, 'password' => $password, 'title' => $signup->title, 'meta' => $meta);}function wpmu_create_user( $user_name, $password, $email) {	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$user_id = wp_create_user( $user_name, $password, $email );	if ( is_wp_error($user_id) )		return false;	// Newly created users have no roles or caps until they are added to a blog.	delete_user_option( $user_id, 'capabilities' );	delete_user_option( $user_id, 'user_level' );	do_action( 'wpmu_new_user', $user_id );	return $user_id;}function wpmu_create_blog($domain, $path, $title, $user_id, $meta = '', $site_id = 1) {	$domain = preg_replace( '/\s+/', '', sanitize_user( $domain, true ) );	if ( is_subdomain_install() )		$domain = str_replace( '@', '', $domain );	$title = strip_tags( $title );	$user_id = (int) $user_id;	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return new WP_Error('blog_taken', __('Site already exists.'));	if ( !defined('WP_INSTALLING') )		define( 'WP_INSTALLING', true );	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return new WP_Error('insert_blog', __('Could not create site.'));	switch_to_blog($blog_id);	install_blog($blog_id, $title);	wp_install_defaults($user_id);	add_user_to_blog($blog_id, $user_id, 'administrator');	if ( is_array($meta) ) foreach ($meta as $key => $value) {		if ( $key == 'public' || $key == 'archived' || $key == 'mature' || $key == 'spam' || $key == 'deleted' || $key == 'lang_id' )			update_blog_status( $blog_id, $key, $value );		else			update_option( $key, $value );	}	add_option( 'WPLANG', get_site_option( 'WPLANG' ) );	update_option( 'blog_public', (int)$meta['public'] );	if ( !is_super_admin() && get_user_meta( $user_id, 'primary_blog', true ) == get_site_option( 'dashboard_blog', 1 ) )		update_user_meta( $user_id, 'primary_blog', $blog_id );	restore_current_blog();	do_action( 'wpmu_new_blog', $blog_id, $user_id, $domain, $path, $site_id, $meta );	return $blog_id;}function newblog_notify_siteadmin( $blog_id, $deprecated = '' ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$options_site_url = esc_url(network_admin_url('ms-options.php'));	switch_to_blog( $blog_id );	$blogname = get_option( 'blogname' );	$siteurl = site_url();	restore_current_blog();	$msg = sprintf( __( 'New Site: %1sURL: %2sRemote IP: %3sDisable these notifications: %4s' ), $blogname, $siteurl, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newblog_notify_siteadmin', $msg );	wp_mail( $email, sprintf( __( 'New Site Registration: %s' ), $siteurl ), $msg );	return true;}function newuser_notify_siteadmin( $user_id ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$user = new WP_User($user_id);	$options_site_url = esc_url(network_admin_url('ms-options.php'));	$msg = sprintf(__('New User: %1sRemote IP: %2sDisable these notifications: %3s'), $user->user_login, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newuser_notify_siteadmin', $msg );	wp_mail( $email, sprintf(__('New User Registration: %s'), $user->user_login), $msg );	return true;}function domain_exists($domain, $path, $site_id = 1) {	global $wpdb;	return $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s AND site_id = %d", $domain, $path, $site_id) );}function insert_blog($domain, $path, $site_id) {	global $wpdb;	$path = trailingslashit($path);	$site_id = (int) $site_id;	$result = $wpdb->insert( $wpdb->blogs, array('site_id' => $site_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time('mysql')) );	if ( ! $result )		return false;	refresh_blog_details($wpdb->insert_id);	return $wpdb->insert_id;}// Install an empty blog.  wpdb should already be switched.function install_blog($blog_id, $blog_title = '') {	global $wpdb, $table_prefix, $wp_roles;	$wpdb->suppress_errors();	// Cast for security	$blog_id = (int) $blog_id;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	if ( $wpdb->get_results("SELECT ID FROM $wpdb->posts") )		die(__('<h1>Already Installed</h1><p>You appear to have already installed WordPress. To reinstall please clear your old database tables first.</p>') . '</body></html>');	$wpdb->suppress_errors(false);	$url = get_blogaddress_by_id($blog_id);	// Set everything up	make_db_current_silent();	populate_options();	populate_roles();	$wp_roles->_init();	// fix url.	update_option('siteurl', $url);	update_option('home', $url);	update_option('fileupload_url', $url . "files" );	update_option('upload_path', "wp-content/blogs.dir/" . $blog_id . "/files");	update_option('blogname', stripslashes( $blog_title ) );	update_option('admin_email', '');	$wpdb->update( $wpdb->options, array('option_value' => ''), array('option_name' => 'admin_email') );	// remove all perms	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'user_level') );	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'capabilities') );	$wpdb->suppress_errors( false );}// Deprecated, use wp_install_defaults()// should be switched already as $blog_id is ignored.function install_blog_defaults($blog_id, $user_id) {	global $wpdb;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	$wpdb->suppress_errors();	wp_install_defaults($user_id);	$wpdb->suppress_errors( false );}function wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_notification', $blog_id, $user_id, $password, $title, $meta) )		return false;	$welcome_email = stripslashes( get_site_option( 'welcome_email' ) );	if ( $welcome_email == false )		$welcome_email = stripslashes( __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' ) );	$url = get_blogaddress_by_id($blog_id);	$user = new WP_User($user_id);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'BLOG_TITLE', $title, $welcome_email );	$welcome_email = str_replace( 'BLOG_URL', $url, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = apply_filters( 'update_welcome_email', $welcome_email, $blog_id, $user_id, $password, $title, $meta);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_subject', sprintf(__('New %1$s Site: %2$s'), $current_site->site_name, stripslashes( $title ) ) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function wpmu_welcome_user_notification($user_id, $password, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_user_notification', $user_id, $password, $meta) )		return false;	$welcome_email = get_site_option( 'welcome_user_email' );	$user = new WP_User($user_id);	$welcome_email = apply_filters( 'update_welcome_user_email', $welcome_email, $user_id, $password, $meta);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = str_replace( 'LOGINLINK', wp_login_url(), $welcome_email );	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_user_subject', sprintf(__('New %1$s User: %2$s'), $current_site->site_name, $user->user_login) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function get_current_site() {	global $current_site;	return $current_site;}function get_user_id_from_string( $string ) {	$user_id = 0;	if ( is_email( $string ) ) {		$user = get_user_by('email', $string);		if ( $user )			$user_id = $user->ID;	} elseif ( is_numeric( $string ) ) {		$user_id = $string;	} else {		$user = get_user_by('login', $string);		if ( $user )			$user_id = $user->ID;	}	return $user_id;}function get_most_recent_post_of_user( $user_id ) {	global $wpdb;	$user_blogs = get_blogs_of_user( (int) $user_id );	$most_recent_post = array();	// Walk through each blog and get the most recent post	// published by $user_id	foreach ( (array) $user_blogs as $blog ) {		$recent_post = $wpdb->get_row( $wpdb->prepare("SELECT ID, post_date_gmt FROM {$wpdb->base_prefix}{$blog->userblog_id}_posts WHERE post_author = %d AND post_type = 'post' AND post_status = 'publish' ORDER BY post_date_gmt DESC LIMIT 1", $user_id ), ARRAY_A);		// Make sure we found a post		if ( isset($recent_post['ID']) ) {			$post_gmt_ts = strtotime($recent_post['post_date_gmt']);			// If this is the first post checked or if this post is			// newer than the current recent post, make it the new			// most recent post.			if ( !isset($most_recent_post['post_gmt_ts']) || ( $post_gmt_ts > $most_recent_post['post_gmt_ts'] ) ) {				$most_recent_post = array(					'blog_id'		=> $blog->userblog_id,					'post_id'		=> $recent_post['ID'],					'post_date_gmt'	=> $recent_post['post_date_gmt'],					'post_gmt_ts'	=> $post_gmt_ts				);			}		}	}	return $most_recent_post;}/* Misc functions */function get_dirsize( $directory ) {	$dirsize = get_transient( 'dirsize_cache' );	if ( is_array( $dirsize ) && isset( $dirsize[ $directory ][ 'size' ] ) )		return $dirsize[ $directory ][ 'size' ];	if ( false == is_array( $dirsize ) )		$dirsize = array();	$dirsize[ $directory ][ 'size' ] = recurse_dirsize( $directory );	set_transient( 'dirsize_cache', $dirsize, 3600 );	return $dirsize[ $directory ][ 'size' ];}function recurse_dirsize( $directory ) {	$size = 0;	if ( substr( $directory, -1 ) == '/' )		$directory = substr($directory,0,-1);	if ( !file_exists($directory) || !is_dir( $directory ) || !is_readable( $directory ) )		return false;	if ($handle = opendir($directory)) {		while(($file = readdir($handle)) !== false) {			$path = $directory.'/'.$file;			if ($file != '.' && $file != '..') {				if (is_file($path)) {					$size += filesize($path);				} elseif (is_dir($path)) {					$handlesize = recurse_dirsize($path);					if ($handlesize > 0)						$size += $handlesize;				}			}		}		closedir($handle);	}	return $size;}function upload_is_user_over_quota( $echo = true ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$spaceAllowed = get_space_allowed();	if ( empty( $spaceAllowed ) || !is_numeric( $spaceAllowed ) )		$spaceAllowed = 10;	// Default space allowed is 10 MB	$dirName = BLOGUPLOADDIR;	$size = get_dirsize($dirName) / 1024 / 1024;	if ( ($spaceAllowed-$size) < 0 ) {		if ( $echo )			_e( 'Sorry, you have used your space allocation. Please delete some files to upload more files.' ); // No space left		return true;	} else {		return false;	}}function check_upload_mimes( $mimes ) {	$site_exts = explode( ' ', get_site_option( 'upload_filetypes' ) );	foreach ( $site_exts as $ext ) {		foreach ( $mimes as $ext_pattern => $mime ) {			if ( $ext != '' && strpos( $ext_pattern, $ext ) !== false )				$site_mimes[$ext_pattern] = $mime;		}	}	return $site_mimes;}function update_posts_count( $deprecated = '' ) {	global $wpdb;	update_option( 'post_count', (int) $wpdb->get_var( "SELECT COUNT(ID) FROM {$wpdb->posts} WHERE post_status = 'publish' and post_type = 'post'" ) );}function wpmu_log_new_registrations( $blog_id, $user_id ) {	global $wpdb;	$user = new WP_User( (int) $user_id );	$wpdb->insert( $wpdb->registration_log, array('email' => $user->user_email, 'IP' => preg_replace( '/[^0-9., ]/', '',$_SERVER['REMOTE_ADDR'] ), 'blog_id' => $blog_id, 'date_registered' => current_time('mysql')) );}function fix_import_form_size( $size ) {	if ( upload_is_user_over_quota( false ) == true )		return 0;	$spaceAllowed = 1024 * 1024 * get_space_allowed();	$dirName = BLOGUPLOADDIR;	$dirsize = get_dirsize($dirName) ;	if ( $size > $spaceAllowed - $dirsize )		return $spaceAllowed - $dirsize; // remaining space	else		return $size; // default}/** * Maintains a canonical list of terms by syncing terms created for each blog with the global terms table. * * @since 3.0.0 * * @see term_id_filter * * @param int $term_id An ID for a term on the current blog. * @return int An ID from the global terms table mapped from $term_id. */function global_terms( $term_id, $deprecated = '' ) {	global $wpdb;	static $global_terms_recurse = null;	if ( !global_terms_enabled() )		return $term_id;	// prevent a race condition	$recurse_start = false;	if ( $global_terms_recurse === null ) {		$recurse_start = true;		$global_terms_recurse = 1;	} elseif ( 10 < $global_terms_recurse++ ) {		return $term_id;	}	$term_id = intval( $term_id );	$c = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->terms WHERE term_id = %d", $term_id ) );	$global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE category_nicename = %s", $c->slug ) );	if ( $global_id == null ) {		$used_global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE cat_ID = %d", $c->term_id ) );		if ( null == $used_global_id ) {			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $term_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;			if ( empty( $global_id ) )				return $term_id;		} else {			$max_global_id = $wpdb->get_var( "SELECT MAX(cat_ID) FROM $wpdb->sitecategories" );			$max_local_id = $wpdb->get_var( "SELECT MAX(term_id) FROM $wpdb->terms" );			$new_global_id = max( $max_global_id, $max_local_id ) + mt_rand( 100, 400 );			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $new_global_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;		}	} elseif ( $global_id != $term_id ) {		$local_id = $wpdb->get_row( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE term_id = %d", $global_id ) );		if ( null != $local_id )			$local_id = global_terms( $local_id );			if ( 10 < $global_terms_recurse )				$global_id = $term_id;	}	if ( $global_id != $term_id ) {		if ( get_option( 'default_category' ) == $term_id )			update_option( 'default_category', $global_id );		$wpdb->update( $wpdb->terms, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('parent' => $global_id), array('parent' => $term_id) );		clean_term_cache($term_id);	}	if( $recurse_start )		$global_terms_recurse = null;	return $global_id;}function redirect_this_site( $deprecated = '' ) {	global $current_site;	return array( $current_site->domain );}function upload_is_file_too_big( $upload ) {	if ( is_array( $upload ) == false || defined( 'WP_IMPORTING' ) )		return $upload;	if ( strlen( $upload['bits'] )  > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		return sprintf( __( 'This file is too big. Files must be less than %d KB in size.' ) . '<br />', get_site_option( 'fileupload_maxk', 1500 ));	return $upload;}function wordpressmu_wp_mail_from( $email ) {	if ( strpos( $email, 'wordpress@' ) !== false )		$email = get_option( 'admin_email' );	return $email;}function signup_nonce_fields() {	$id = mt_rand();	echo "<input type='hidden' name='signup_form_id' value='{$id}' />";	wp_nonce_field('signup_form_' . $id, '_signup_form', false);}function signup_nonce_check( $result ) {	if ( !strpos( $_SERVER[ 'PHP_SELF' ], 'wp-signup.php' ) )		return $result;	if ( wp_create_nonce('signup_form_' . $_POST[ 'signup_form_id' ]) != $_POST['_signup_form'] )		wp_die( __('Please try again!') );	return $result;}function maybe_redirect_404() {	global $current_site;	if ( is_main_site() && is_404() && defined( 'NOBLOGREDIRECT' ) && ( $destination = apply_filters( 'blog_redirect_404', NOBLOGREDIRECT ) ) ) {		if ( $destination == '%siteurl%' )			$destination = network_home_url();		wp_redirect( $destination );		exit();	}}function maybe_add_existing_user_to_blog() {	if ( false === strpos( $_SERVER[ 'REQUEST_URI' ], '/newbloguser/' ) )		return false;	$parts = explode( '/', $_SERVER[ 'REQUEST_URI' ] );	$key = array_pop( $parts );	if ( $key == '' )		$key = array_pop( $parts );	$details = get_option( 'new_user_' . $key );	if ( !empty( $details ) )		delete_option( 'new_user_' . $key );	if ( empty( $details ) || is_wp_error( add_existing_user_to_blog( $details ) ) )		wp_die( sprintf(__('An error occurred adding you to this site. Back to the <a href="%s">homepage</a>.'), site_url() ) );	wp_die( sprintf(__('You have been added to this site. Please visit the <a href="%s">homepage</a> or <a href="%s">login</a> using your username and password.'), site_url(), admin_url() ), __('Success') );}function add_existing_user_to_blog( $details = false ) {	if ( is_array( $details ) ) {		$result = add_user_to_blog( '', $details[ 'user_id' ], $details[ 'role' ] );		do_action( 'added_existing_user', $details[ 'user_id' ], $result );	}	return $result;}function add_new_user_to_blog( $user_id, $email, $meta ) {	global $current_site;	if ( $meta[ 'add_to_blog' ] ) {		$blog_id = $meta[ 'add_to_blog' ];		$role = $meta[ 'new_role' ];		remove_user_from_blog($user_id, $current_site->blogid); // remove user from main blog.		add_user_to_blog( $blog_id, $user_id, $role );		update_user_meta( $user_id, 'primary_blog', $blog_id );	}}function fix_phpmailer_messageid( $phpmailer ) {	global $current_site;	$phpmailer->Hostname = $current_site->domain;}function is_user_spammy( $username = 0 ) {	if ( $username == 0 ) {		global $current_user;		$user_id = $current_user->ID;	} else {		$user_id = get_user_id_from_string( $username );	}	$u = new WP_User( $user_id );	if ( $u->spam == 1 )		return true;	return false;}function update_blog_public( $old_value, $value ) {	global $wpdb;	do_action('update_blog_public');	update_blog_status( $wpdb->blogid, 'public', (int) $value );}add_action('update_option_blog_public', 'update_blog_public', 10, 2);/* Redirect all hits to "dashboard" blog to wp-admin/ Dashboard. */function redirect_mu_dashboard() {	global $current_site, $current_blog;	$dashboard_blog = get_dashboard_blog();	if ( $current_blog->blog_id == $dashboard_blog->blog_id && $dashboard_blog->blog_id != $current_site->blog_id ) {		$protocol = ( is_ssl() ? 'https://' : 'http://' );		wp_redirect( $protocol . $dashboard_blog->domain . trailingslashit( $dashboard_blog->path ) . 'wp-admin/' );		die();	}}add_action( 'template_redirect', 'redirect_mu_dashboard' );function get_dashboard_blog() {	if ( $blog = get_site_option( 'dashboard_blog' ) )		return get_blog_details( $blog );	return get_blog_details( $GLOBALS['current_site']->blog_id );}function is_user_option_local( $key, $user_id = 0, $blog_id = 0 ) {	global $current_user, $wpdb;	if ( $user_id == 0 )		$user_id = $current_user->ID;	if ( $blog_id == 0 )		$blog_id = $wpdb->blogid;	$local_key = $wpdb->base_prefix . $blog_id . '_' . $key;	if ( isset( $current_user->$local_key ) )		return true;	return false;}function users_can_register_signup_filter() {	$registration = get_site_option('registration');	if ( $registration == 'all' || $registration == 'user' )		return true;	return false;}add_filter('option_users_can_register', 'users_can_register_signup_filter');function welcome_user_msg_filter( $text ) {	if ( !$text ) {		return __( 'Dear User,Your new account is set up.You can log in with the following information:Username: USERNAMEPassword: PASSWORDLOGINLINKThanks!--The Team @ SITE_NAME' );	}	return $text;}add_filter( 'site_option_welcome_user_email', 'welcome_user_msg_filter' );/** * Whether to force SSL on content. * * @since 2.8.5 * * @param string|bool $force * @return bool True if forced, false if not forced. */function force_ssl_content( $force = '' ) {	static $forced_content;	if ( '' != $force ) {		$old_forced = $forced_content;		$forced_content = $force;		return $old_forced;	}	return $forced_content;}/** * Formats an String URL to use HTTPS if HTTP is found. * Useful as a filter. * * @since 2.8.5 **/function filter_SSL( $url ) {	if ( !is_string( $url ) )		return get_bloginfo( 'url' ); //return home blog url with proper scheme	$arrURL = parse_url( $url );	if ( force_ssl_content() && is_ssl() ) {		if ( 'http' === $arrURL['scheme'] && 'https' !== $arrURL['scheme'] )			$url = str_replace( $arrURL['scheme'], 'https', $url );	}	return $url;}?>
<?php/** * Edit Comments Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_posts') )	wp_die(__('Cheatin&#8217; uh?'));wp_enqueue_script('admin-comments');enqueue_comment_hotkeys_js();$post_id = isset($_REQUEST['p']) ? (int) $_REQUEST['p'] : 0;if ( isset($_REQUEST['doaction']) ||  isset($_REQUEST['doaction2']) || isset($_REQUEST['delete_all']) || isset($_REQUEST['delete_all2']) ) {	check_admin_referer('bulk-comments');	if ( (isset($_REQUEST['delete_all']) || isset($_REQUEST['delete_all2'])) && !empty($_REQUEST['pagegen_timestamp']) ) {		$comment_status = $wpdb->escape($_REQUEST['comment_status']);		$delete_time = $wpdb->escape($_REQUEST['pagegen_timestamp']);		$comment_ids = $wpdb->get_col( "SELECT comment_ID FROM $wpdb->comments WHERE comment_approved = '$comment_status' AND '$delete_time' > comment_date_gmt" );		$doaction = 'delete';	} elseif ( ($_REQUEST['action'] != -1 || $_REQUEST['action2'] != -1) && isset($_REQUEST['delete_comments']) ) {		$comment_ids = $_REQUEST['delete_comments'];		$doaction = ($_REQUEST['action'] != -1) ? $_REQUEST['action'] : $_REQUEST['action2'];	} elseif ( $_REQUEST['doaction'] == 'undo' && isset($_REQUEST['ids']) ) {		$comment_ids = array_map( 'absint', explode(',', $_REQUEST['ids']) );		$doaction = $_REQUEST['action'];	} else {		wp_redirect( wp_get_referer() );	}	$approved = $unapproved = $spammed = $unspammed = $trashed = $untrashed = $deleted = 0;	$redirect_to = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'spammed', 'unspammed', 'approved', 'unapproved', 'ids'), wp_get_referer() );	foreach ($comment_ids as $comment_id) { // Check the permissions on each		$_post_id = (int) $wpdb->get_var( $wpdb->prepare( "SELECT comment_post_ID FROM $wpdb->comments WHERE comment_ID = %d", $comment_id) );		if ( !current_user_can('edit_post', $_post_id) )			continue;		switch( $doaction ) {			case 'approve' :				wp_set_comment_status($comment_id, 'approve');				$approved++;				break;			case 'unapprove' :				wp_set_comment_status($comment_id, 'hold');				$unapproved++;				break;			case 'spam' :				wp_spam_comment($comment_id);				$spammed++;				break;			case 'unspam' :				wp_unspam_comment($comment_id);				$unspammed++;				break;			case 'trash' :				wp_trash_comment($comment_id);				$trashed++;				break;			case 'untrash' :				wp_untrash_comment($comment_id);				$untrashed++;				break;			case 'delete' :				wp_delete_comment($comment_id);				$deleted++;				break;		}	}	if ( $approved )		$redirect_to = add_query_arg( 'approved', $approved, $redirect_to );	if ( $unapproved )		$redirect_to = add_query_arg( 'unapproved', $unapproved, $redirect_to );	if ( $spammed )		$redirect_to = add_query_arg( 'spammed', $spammed, $redirect_to );	if ( $unspammed )		$redirect_to = add_query_arg( 'unspammed', $unspammed, $redirect_to );	if ( $trashed )		$redirect_to = add_query_arg( 'trashed', $trashed, $redirect_to );	if ( $untrashed )		$redirect_to = add_query_arg( 'untrashed', $untrashed, $redirect_to );	if ( $deleted )		$redirect_to = add_query_arg( 'deleted', $deleted, $redirect_to );	if ( $trashed || $spammed )		$redirect_to = add_query_arg( 'ids', join(',', $comment_ids), $redirect_to );	wp_redirect( $redirect_to );	exit;} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}if ( $post_id )	$title = sprintf(__('Comments on &#8220;%s&#8221;'), wp_html_excerpt(_draft_or_post_title($post_id), 50));else	$title = __('Comments');add_contextual_help( $current_screen, '<p>' . __('You can manage comments made on your site similar to the way you manage Posts and other content. This screen is customizable in the same ways as other management screens, and you can act on comments using the on-hover action links or the Bulk Actions.') . '</p>' .	'<p>' . __('A yellow row means the comment is waiting for you to moderate it.') . '</p>' .	'<p>' . __('In the Author column, in addition to the author&#8217;s name, email address, and blog URL, the commenter&#8217;s IP address is shown. Clicking on this link will show you all the comments made from this IP address.') . '</p>' .	'<p>' . __('In the Comment column, above each comment it says &#8220;Submitted on,&#8221; followed by the date and time the comment was left on your site. Clicking on the date/time link will take you to that comment on your live site.') . '</p>' .	'<p>' . __('In the In Response To column, there are three elements. The text is the name of the post that inspired the comment, and links to the post editor for that entry. The &#8220;#&#8221; permalink symbol below leads to that post on your live site. The small bubble with the number in it shows how many comments that post has received. If the bubble is gray, you have moderated all comments for that post. If it is blue, there are pending comments. Clicking the bubble will filter the comments screen to show only comments on that post.') . '</p>' .	'<p>' . __('Many people take advantage of keyboard shortcuts to moderate their comments more quickly. Use the link below to learn more.') . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Administration_Panels#Comments" target="_blank">Comments Documentation</a>' ) . '</p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Comment_Spam" target="_blank">Comment Spam Documentation</a>') . '</p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Keyboard_Shortcuts" target="_blank">Keyboard Shortcuts Documentation</a>') . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');$mode = ( empty($_GET['mode']) ) ? 'detail' : esc_attr($_GET['mode']);$comment_status = isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all';if ( !in_array($comment_status, array('all', 'moderated', 'approved', 'spam', 'trash')) )	$comment_status = 'all';$comment_type = !empty($_GET['comment_type']) ? esc_attr($_GET['comment_type']) : '';$search_dirty = ( isset($_GET['s']) ) ? $_GET['s'] : '';$search = esc_attr( $search_dirty ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . sprintf( __( 'Search results for &#8220;%s&#8221;' ), wp_html_excerpt( esc_html( stripslashes( $_GET['s'] ) ), 50 ) ) . '</span>' ); ?></h2><?phpif ( isset( $_GET['error'] ) ) {	$error = (int) $_GET['error'];	$error_msg = '';	switch ( $error ) {		case 1 :			$error_msg = __( 'Oops, no comment with this ID.' );			break;		case 2 :			$error_msg = __( 'You are not allowed to edit comments on this post.' );			break;	}	if ( $error_msg )		echo '<div id="moderated" class="error"><p>' . $error_msg . '</p></div>';}if ( isset($_GET['approved']) || isset($_GET['deleted']) || isset($_GET['trashed']) || isset($_GET['untrashed']) || isset($_GET['spammed']) || isset($_GET['unspammed']) || isset($_GET['same']) ) {	$approved  = isset( $_GET['approved']  ) ? (int) $_GET['approved']  : 0;	$deleted   = isset( $_GET['deleted']   ) ? (int) $_GET['deleted']   : 0;	$trashed   = isset( $_GET['trashed']   ) ? (int) $_GET['trashed']   : 0;	$untrashed = isset( $_GET['untrashed'] ) ? (int) $_GET['untrashed'] : 0;	$spammed   = isset( $_GET['spammed']   ) ? (int) $_GET['spammed']   : 0;	$unspammed = isset( $_GET['unspammed'] ) ? (int) $_GET['unspammed'] : 0;	$same      = isset( $_GET['same'] )      ? (int) $_GET['same']      : 0;	if ( $approved > 0 || $deleted > 0 || $trashed > 0 || $untrashed > 0 || $spammed > 0 || $unspammed > 0 || $same > 0 ) {		if ( $approved > 0 )			$messages[] = sprintf( _n( '%s comment approved', '%s comments approved', $approved ), $approved );		if ( $spammed > 0 ) {			$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;			$messages[] = sprintf( _n( '%s comment marked as spam.', '%s comments marked as spam.', $spammed ), $spammed ) . ' <a href="' . esc_url( wp_nonce_url( "edit-comments.php?doaction=undo&action=unspam&ids=$ids", "bulk-comments" ) ) . '">' . __('Undo') . '</a><br />';		}		if ( $unspammed > 0 )			$messages[] = sprintf( _n( '%s comment restored from the spam', '%s comments restored from the spam', $unspammed ), $unspammed );		if ( $trashed > 0 ) {			$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;			$messages[] = sprintf( _n( '%s comment moved to the Trash.', '%s comments moved to the Trash.', $trashed ), $trashed ) . ' <a href="' . esc_url( wp_nonce_url( "edit-comments.php?doaction=undo&action=untrash&ids=$ids", "bulk-comments" ) ) . '">' . __('Undo') . '</a><br />';		}		if ( $untrashed > 0 )			$messages[] = sprintf( _n( '%s comment restored from the Trash', '%s comments restored from the Trash', $untrashed ), $untrashed );		if ( $deleted > 0 )			$messages[] = sprintf( _n( '%s comment permanently deleted', '%s comments permanently deleted', $deleted ), $deleted );		if ( $same > 0 && $comment = get_comment( $same ) ) {			switch ( $comment->comment_approved ) {				case '1' :					$messages[] = __('This comment is already approved.') . ' <a href="' . esc_url( admin_url( "comment.php?action=editcomment&c=$same" ) ) . '">' . __( 'Edit comment' ) . '</a>';					break;				case 'trash' :					$messages[] = __( 'This comment is already in the Trash.' ) . ' <a href="' . esc_url( admin_url( 'edit-comments.php?comment_status=trash' ) ) . '"> ' . __( 'View Trash' ) . '</a>';					break;				case 'spam' :					$messages[] = __( 'This comment is already marked as spam.' ) . ' <a href="' . esc_url( admin_url( "comment.php?action=editcomment&c=$same" ) ) . '">' . __( 'Edit comment' ) . '</a>';					break;			}		}		echo '<div id="moderated" class="updated"><p>' . implode( "<br/>\n", $messages ) . '</p></div>';	}}?><form id="comments-form" action="" method="get"><ul class="subsubsub"><?php$status_links = array();$num_comments = ( $post_id ) ? wp_count_comments( $post_id ) : wp_count_comments();//, number_format_i18n($num_comments->moderated) ), "<span class='comment-count'>" . number_format_i18n($num_comments->moderated) . "</span>"),//, number_format_i18n($num_comments->spam) ), "<span class='spam-comment-count'>" . number_format_i18n($num_comments->spam) . "</span>")$stati = array(		'all' => _nx_noop('All', 'All', 'comments'), // singular not used		'moderated' => _n_noop('Pending <span class="count">(<span class="pending-count">%s</span>)</span>', 'Pending <span class="count">(<span class="pending-count">%s</span>)</span>'),		'approved' => _n_noop('Approved', 'Approved'), // singular not used		'spam' => _n_noop('Spam <span class="count">(<span class="spam-count">%s</span>)</span>', 'Spam <span class="count">(<span class="spam-count">%s</span>)</span>'),		'trash' => _n_noop('Trash <span class="count">(<span class="trash-count">%s</span>)</span>', 'Trash <span class="count">(<span class="trash-count">%s</span>)</span>')	);if ( !EMPTY_TRASH_DAYS )	unset($stati['trash']);$link = 'edit-comments.php';if ( !empty($comment_type) && 'all' != $comment_type )	$link = add_query_arg( 'comment_type', $comment_type, $link );foreach ( $stati as $status => $label ) {	$class = ( $status == $comment_status ) ? ' class="current"' : '';	if ( !isset( $num_comments->$status ) )		$num_comments->$status = 10;	$link = add_query_arg( 'comment_status', $status, $link );	if ( $post_id )		$link = add_query_arg( 'p', absint( $post_id ), $link );	/*	// I toyed with this, but decided against it. Leaving it in here in case anyone thinks it is a good idea. ~ Mark	if ( !empty( $_GET['s'] ) )		$link = add_query_arg( 's', esc_attr( stripslashes( $_GET['s'] ) ), $link );	*/	$status_links[] = "<li class='$status'><a href='$link'$class>" . sprintf(		_n( $label[0], $label[1], $num_comments->$status ),		number_format_i18n( $num_comments->$status )	) . '</a>';}$status_links = apply_filters( 'comment_status_links', $status_links );echo implode( " |</li>\n", $status_links) . '</li>';unset($status_links);?></ul><p class="search-box">	<label class="screen-reader-text" for="comment-search-input"><?php _e( 'Search Comments' ); ?>:</label>	<input type="text" id="comment-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Comments' ); ?>" class="button" /></p><?php$comments_per_page = (int) get_user_option( 'edit_comments_per_page' );if ( empty( $comments_per_page ) || $comments_per_page < 1 )	$comments_per_page = 20;$comments_per_page = apply_filters( 'comments_per_page', $comments_per_page, $comment_status );if ( isset( $_GET['apage'] ) )	$page = abs( (int) $_GET['apage'] );else	$page = 1;$start = $offset = ( $page - 1 ) * $comments_per_page;list($_comments, $total) = _wp_get_comment_list( $comment_status, $search_dirty, $start, $comments_per_page + 8, $post_id, $comment_type ); // Grab a few extra$_comment_post_ids = array();foreach ( $_comments as $_c ) {	$_comment_post_ids[] = $_c->comment_post_ID;}$_comment_pending_count = get_pending_comments_num($_comment_post_ids);$comments = array_slice($_comments, 0, $comments_per_page);$extra_comments = array_slice($_comments, $comments_per_page);$page_links = paginate_links( array(	'base' => add_query_arg( 'apage', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($total / $comments_per_page),	'current' => $page));?><input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" /><?php if ( $post_id ) : ?><input type="hidden" name="p" value="<?php echo esc_attr( intval( $post_id ) ); ?>" /><?php endif; ?><input type="hidden" name="comment_status" value="<?php echo esc_attr($comment_status); ?>" /><input type="hidden" name="pagegen_timestamp" value="<?php echo esc_attr(current_time('mysql', 1)); ?>" /><div class="tablenav"><?php if ( $page_links ) : ?><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $comments_per_page, $total ) ),	'<span class="total-type-count">' . number_format_i18n( $total ) . '</span>',	$page_links); echo $page_links_text; ?></div><input type="hidden" name="_total" value="<?php echo esc_attr($total); ?>" /><input type="hidden" name="_per_page" value="<?php echo esc_attr($comments_per_page); ?>" /><input type="hidden" name="_page" value="<?php echo esc_attr($page); ?>" /><?php endif; ?><?php if ( $comments ) : ?><div class="alignleft actions"><select name="action"><option value="-1" selected="selected"><?php _e('Bulk Actions') ?></option><?php if ( 'all' == $comment_status || 'approved' == $comment_status ): ?><option value="unapprove"><?php _e('Unapprove'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'moderated' == $comment_status || 'spam' == $comment_status ): ?><option value="approve"><?php _e('Approve'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'approved' == $comment_status || 'moderated' == $comment_status ): ?><option value="spam"><?php _ex('Mark as Spam', 'comment'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status ): ?><option value="untrash"><?php _e('Restore'); ?></option><?php elseif ( 'spam' == $comment_status ): ?><option value="unspam"><?php _ex('Not Spam', 'comment'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status || 'spam' == $comment_status || !EMPTY_TRASH_DAYS ): ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php else: ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php endif; ?></select><input type="submit" name="doaction" id="doaction" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary apply" /><?php wp_nonce_field('bulk-comments'); ?><?php endif; ?><select name="comment_type">	<option value="all"><?php _e('Show all comment types'); ?></option><?php	$comment_types = apply_filters( 'admin_comment_types_dropdown', array(		'comment' => __('Comments'),		'pings' => __('Pings'),	) );	foreach ( $comment_types as $type => $label ) {		echo "	<option value='" . esc_attr($type) . "'";		selected( $comment_type, $type );		echo ">$label</option>\n";	}?></select><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php if ( isset($_GET['apage']) ) { ?>	<input type="hidden" name="apage" value="<?php echo esc_attr( absint( $_GET['apage'] ) ); ?>" /><?php }if ( ( 'spam' == $comment_status || 'trash' == $comment_status) && current_user_can ('moderate_comments') ) {	wp_nonce_field('bulk-destroy', '_destroy_nonce');    if ( 'spam' == $comment_status && current_user_can('moderate_comments') ) { ?>		<input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Spam'); ?>" class="button-secondary apply" /><?php } elseif ( 'trash' == $comment_status && current_user_can('moderate_comments') ) { ?>		<input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php }} ?><?php do_action('manage_comments_nav', $comment_status); ?></div><br class="clear" /></div><div class="clear"></div><?php if ( $comments ) { ?><table class="widefat comments fixed" cellspacing="0"><thead>	<tr><?php print_column_headers('edit-comments'); ?>	</tr></thead><tfoot>	<tr><?php print_column_headers('edit-comments', false); ?>	</tr></tfoot><tbody id="the-comment-list" class="list:comment"><?php	foreach ($comments as $comment)		_wp_comment_row( $comment->comment_ID, $mode, $comment_status );?></tbody><tbody id="the-extra-comment-list" class="list:comment" style="display: none;"><?php	foreach ($extra_comments as $comment)		_wp_comment_row( $comment->comment_ID, $mode, $comment_status );?></tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2"><option value="-1" selected="selected"><?php _e('Bulk Actions') ?></option><?php if ( 'all' == $comment_status || 'approved' == $comment_status ): ?><option value="unapprove"><?php _e('Unapprove'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'moderated' == $comment_status || 'spam' == $comment_status ): ?><option value="approve"><?php _e('Approve'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'approved' == $comment_status || 'moderated' == $comment_status ): ?><option value="spam"><?php _ex('Mark as Spam', 'comment'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status ): ?><option value="untrash"><?php _e('Restore'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status || 'spam' == $comment_status || !EMPTY_TRASH_DAYS ): ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php elseif ( 'spam' == $comment_status ): ?><option value="unspam"><?php _ex('Not Spam', 'comment'); ?></option><?php else: ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php endif; ?></select><input type="submit" name="doaction2" id="doaction2" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary apply" /><?php if ( 'spam' == $comment_status && current_user_can('moderate_comments') ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Spam'); ?>" class="button-secondary apply" /><?php } elseif ( 'trash' == $comment_status && current_user_can('moderate_comments') ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?><?php do_action('manage_comments_nav', $comment_status); ?></div><br class="clear" /></div></form><form id="get-extra-comments" method="post" action="" class="add:the-extra-comment-list:" style="display: none;">	<input type="hidden" name="s" value="<?php echo esc_attr($search); ?>" />	<input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" />	<input type="hidden" name="comment_status" value="<?php echo esc_attr($comment_status); ?>" />	<input type="hidden" name="page" value="<?php echo esc_attr($page); ?>" />	<input type="hidden" name="per_page" value="<?php echo esc_attr($comments_per_page); ?>" />	<input type="hidden" name="p" value="<?php echo esc_attr( $post_id ); ?>" />	<input type="hidden" name="comment_type" value="<?php echo esc_attr( $comment_type ); ?>" />	<?php wp_nonce_field( 'add-comment', '_ajax_nonce', false ); ?></form><div id="ajax-response"></div><?php } elseif ( 'moderated' == $comment_status ) { ?><p><?php _e('No comments awaiting moderation&hellip; yet.') ?></p></div></form><?php } else { ?><p><?php _e('No comments found.') ?></p></div></form><?php } ?></div><?phpwp_comment_reply('-1', true, 'detail');wp_comment_trashnotice();include('./admin-footer.php'); ?>
<?php/** * Network installation administration panel. * * A multi-step process allowing the user to enable a network of WordPress sites. * * @since 3.0.0 * * @package WordPress * @subpackage Administration */define( 'WP_NETWORK_ADMIN_PAGE', true );/** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! is_super_admin() )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );if ( is_multisite() && ! defined( 'MULTISITE' ) )	wp_die( __( 'The Network creation panel is not for WordPress MU networks.' ) );// We need to create references to ms global tables to enable Network.foreach ( $wpdb->tables( 'ms_global' ) as $table => $prefixed_table )	$wpdb->$table = $prefixed_table;/** * Check for an existing network. * * @since 3.0.0 * @return Whether a network exists. */function network_domain_check() {	global $wpdb;	if ( $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) )		return $wpdb->get_var( "SELECT domain FROM $wpdb->site ORDER BY id ASC LIMIT 1" );	return false;}/** * Allow subdomain install * * @since 3.0.0 * @return bool Whether subdomain install is allowed */function allow_subdomain_install() {	$domain = preg_replace( '|https?://([^/]+)|', '$1', get_option( 'siteurl' ) );	if( false !== strpos( $domain, '/' ) || 'localhost' == $domain || preg_match( '|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|', $domain ) )		return false;	return true;}/** * Allow subdirectory install * * @since 3.0.0 * @return bool Whether subdirectory install is allowed */function allow_subdirectory_install() {	global $wpdb;	if ( apply_filters( 'allow_subdirectory_install', false ) )		return true;	if ( defined( 'ALLOW_SUBDIRECTORY_INSTALL' ) && ALLOW_SUBDIRECTORY_INSTALL )		return true;	$post = $wpdb->get_row( "SELECT ID FROM $wpdb->posts WHERE post_date < DATE_SUB(NOW(), INTERVAL 1 MONTH) AND post_status = 'publish'" );	if ( empty( $post ) )		return true;	return false;}/** * Get base domain of network. * * @since 3.0.0 * @return string Base domain. */function get_clean_basedomain() {	if ( $existing_domain = network_domain_check() )		return $existing_domain;	$domain = preg_replace( '|https?://|', '', get_option( 'siteurl' ) );	if ( $slash = strpos( $domain, '/' ) )		$domain = substr( $domain, 0, $slash );	return $domain;}if ( ! network_domain_check() && ( ! defined( 'WP_ALLOW_MULTISITE' ) || ! WP_ALLOW_MULTISITE ) )	wp_die( __( 'You must define the <code>WP_ALLOW_MULTISITE</code> constant as true in your wp-config.php file to allow creation of a Network.' ) );$title = __( 'Create a Network of WordPress Sites' );$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen allows you to configure a network as having subdomains (<code>site1.example.com</code>) or subdirectories (<code>example.com/site1</code>). Subdomains require wildcard subdomains to be enabled in Apache and DNS records, if your host allows it.') . '</p>' .	'<p>' . __('Choose subdomains or subdirectories; this can only be switched afterwards by reconfiguring your install. Fill out the network details, and click install. If this does not work, you may have to add a wildcard DNS record (for subdomains) or change to another setting in Permalinks (for subdirectories).') . '</p>' .	'<p>' . __('The next screen for Network will give you individually-generated lines of code to add to your wp-config.php and .htaccess files. Make sure the settings of your FTP client make files starting with a dot visible, so that you can find .htaccess; you may have to create this file if it really is not there. Make backup copies of those two files.') . '</p>' .	'<p>' . __('Add a <code>blogs.dir</code> directory under <code>/wp-content</code> and add the designated lines of code to wp-config.php (just before <code>/*...stop editing...*/</code>) and <code>.htaccess</code> (replacing the existing WordPress rules).') . '</p>' .	'<p>' . __('Refreshing your browser will take you to a screen with an archive of those added lines of code. A set of six links under Super Admin will appear at the top of the main left navigation menu. The multisite network is now enabled.') . '</p>' .	'<p>' . __('The choice of subdirectory sites is disabled if this setup is more than a month old because of permalink problems with &#8220;/blog/&#8221; from the main site. This disabling will be addressed soon in a future version.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Create_A_Network" target="_blank">General Network Creation Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Network_SubPanel" target="_blank">Tools > Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php/** * Prints step 1 for Network installation process. * * @todo Realistically, step 1 should be a welcome screen explaining what a Network is and such. Navigating to Tools > Network * 	should not be a sudden "Welcome to a new install process! Fill this out and click here." See also contextual help todo. * * @since 3.0.0 */function network_step1( $errors = false ) {	global $is_apache;	if ( get_option( 'siteurl' ) != get_option( 'home' ) ) {		echo '<div class="error"><p><strong>' . __('Error:') . '</strong> ' . sprintf( __( 'Your <strong>WordPress address</strong> must match your <strong>Site address</strong> before creating a Network. See <a href="%s">General Settings</a>.' ), esc_url( admin_url( 'options-general.php' ) ) ) . '</p></div>';		echo '</div>';		include ('./admin-footer.php' );		die();	}	$active_plugins = get_option( 'active_plugins' );	if ( ! empty( $active_plugins ) ) {		echo '<div class="updated"><p><strong>' . __('Warning:') . '</strong> ' . sprintf( __( 'Please <a href="%s">deactivate your plugins</a> before enabling the Network feature.' ), admin_url( 'plugins.php?plugin_status=active' ) ) . '</p></div><p>' . __( 'Once the network is created, you may reactivate your plugins.' ) . '</p>';		echo '</div>';		include( './admin-footer.php' );		die();	}	$hostname = get_clean_basedomain();	$has_ports = strstr( $hostname, ':' );	if ( ( false !== $has_ports && ! in_array( $has_ports, array( ':80', ':443' ) ) ) ) {		echo '<div class="error"><p><strong>' . __( 'Error:') . '</strong> ' . __( 'You cannot install a network of sites with your server address.' ) . '</p></div>';		echo '<p>' . sprintf( __( 'You cannot use port numbers such as <code>%s</code>.' ), $has_ports ) . '</p>';		echo '<a href="' . esc_url( admin_url() ) . '">' . __( 'Return to Dashboard' ) . '</a>';		echo '</div>';		include( './admin-footer.php' );		die();	}	echo '<form method="post" action="">';	wp_nonce_field( 'install-network-1' );	$error_codes = array();	if ( is_wp_error( $errors ) ) {		echo '<div class="error"><p><strong>' . __( 'ERROR: The network could not be created.' ) . '</strong></p>';		foreach ( $errors->get_error_messages() as $error )			echo "<p>$error</p>";		echo '</div>';		$error_codes = $errors->get_error_codes();	}	if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )		echo '<div class="error"><p><strong>' . __('Warning!') . '</strong> ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</p></div>';	$site_name = ( ! empty( $_POST['sitename'] ) && ! in_array( 'empty_sitename', $error_codes ) ) ? $_POST['sitename'] : sprintf( _x('%s Sites', 'Default network name' ), get_option( 'blogname' ) );	$admin_email = ( ! empty( $_POST['email'] ) && ! in_array( 'invalid_email', $error_codes ) ) ? $_POST['email'] : get_option( 'admin_email' );	?>	<p><?php _e( 'Welcome to the Network installation process!' ); ?></p>	<p><?php _e( 'Fill in the information below and you&#8217;ll be on your way to creating a network of WordPress sites. We will create configuration files in the next step.' ); ?></p>	<?php	if ( isset( $_POST['subdomain_install'] ) ) {		$subdomain_install = (bool) $_POST['subdomain_install'];	} elseif ( apache_mod_loaded('mod_rewrite') ) { // assume nothing		$subdomain_install = true;	} elseif ( !allow_subdirectory_install() ) {		$subdomain_install = true;	} else {		$subdomain_install = false;		if ( $got_mod_rewrite = got_mod_rewrite() ) // dangerous assumptions			echo '<div class="updated inline"><p><strong>' . __( 'Note:' ) . '</strong> ' . __( 'Please make sure the Apache <code>mod_rewrite</code> module is installed as it will be used at the end of this installation.' ) . '</p>';		elseif ( $is_apache )			echo '<div class="error inline"><p><strong>' . __( 'Warning!' ) . '</strong> ' . __( 'It looks like the Apache <code>mod_rewrite</code> module is not installed.' ) . '</p>';		if ( $got_mod_rewrite || $is_apache ) // Protect against mod_rewrite mimicry (but ! Apache)			echo '<p>' . __( 'If <code>mod_rewrite</code> is disabled, ask your administrator to enable that module, or look at the <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html">Apache documentation</a> or <a href="http://www.google.com/search?q=apache+mod_rewrite">elsewhere</a> for help setting it up.' ) . '</p></div>';	}	if ( allow_subdomain_install() && allow_subdirectory_install() ) : ?>		<h3><?php esc_html_e( 'Addresses of Sites in your Network' ); ?></h3>		<p><?php _e( 'Please choose whether you would like sites in your WordPress network to use sub-domains or sub-directories. <strong>You cannot change this later.</strong>' ); ?></p>		<p><?php _e( 'You will need a wildcard DNS record if you are going to use the virtual host (sub-domain) functionality.' ); ?></p>		<?php // @todo: Link to an MS readme? ?>		<table class="form-table">			<tr>				<th><label><input type='radio' name='subdomain_install' value='1'<?php checked( $subdomain_install ); ?> /> <?php _e( 'Sub-domains' ); ?></label></th>				<td><?php printf( _x( 'like <code>site1.%1$s</code> and <code>site2.%1$s</code>', 'subdomain examples' ), $hostname ); ?></td>			</tr>			<tr>				<th><label><input type='radio' name='subdomain_install' value='0'<?php checked( ! $subdomain_install ); ?> /> <?php _e( 'Sub-directories' ); ?></label></th>				<td><?php printf( _x( 'like <code>%1$s/site1</code> and <code>%1$s/site2</code>', 'subdirectory examples' ), $hostname ); ?></td>			</tr>		</table><?php	endif;		$is_www = ( 0 === strpos( $hostname, 'www.' ) );		if ( $is_www ) :		?>		<h3><?php esc_html_e( 'Server Address' ); ?></h3>		<p><?php printf( __( 'We recommend you change your siteurl to <code>%1$s</code> before enabling the network feature. It will still be possible to visit your site using the <code>www</code> prefix with an address like <code>%2$s</code> but any links will not have the <code>www</code> prefix.' ), substr( $hostname, 4 ), $hostname ); ?></h3>		<table class="form-table">			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		</table>		<?php endif; ?>		<h3><?php esc_html_e( 'Network Details' ); ?></h3>		<table class="form-table">		<?php if ( 'localhost' == $hostname ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because you are using <code>localhost</code>, the sites in your WordPress network must use sub-directories. Consider using <code>localhost.localdomain</code> if you wish to use sub-domains.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdomain_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because your install is in a directory, the sites in your WordPress network must use sub-directories.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdirectory_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-domain Install' ); ?></th>				<td><?php _e( 'Because your install is not new, the sites in your WordPress network must use sub-domains.' );					echo ' <strong>' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php endif; ?>		<?php if ( ! $is_www ) : ?>			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		<?php endif; ?>			<tr>				<th scope='row'><?php esc_html_e( 'Network Title' ); ?></th>				<td>					<input name='sitename' type='text' size='45' value='<?php echo esc_attr( $site_name ); ?>' />					<br /><?php _e( 'What would you like to call your network?' ); ?>				</td>			</tr>			<tr>				<th scope='row'><?php esc_html_e( 'Admin E-mail Address' ); ?></th>				<td>					<input name='email' type='text' size='45' value='<?php echo esc_attr( $admin_email ); ?>' />					<br /><?php _e( 'Your email address.' ); ?>				</td>			</tr>		</table>		<p class='submit'><input class="button-primary" name='submit' type='submit' value='<?php esc_attr_e( 'Install' ); ?>' /></p>	</form>		<?php}/** * Prints step 2 for Network installation process. * * @since 3.0.0 */function network_step2( $errors = false ) {	global $base, $wpdb;	$hostname = get_clean_basedomain();	// Wildcard DNS message.	if ( is_wp_error( $errors ) )		echo '<div class="error">' . $errors->get_error_message() . '</div>';	if ( $_POST ) {		$subdomain_install = allow_subdomain_install() ? ( allow_subdirectory_install() ? ! empty( $_POST['subdomain_install'] ) : true ) : false;	} else {		if ( is_multisite() ) {			$subdomain_install = is_subdomain_install();?>	<div class="updated"><p><strong><?php _e( 'Notice: The Network feature is already enabled.' ); ?></strong> <?php _e( 'The original configuration steps are shown here for reference.' ); ?></p></div><?php	} else {			$subdomain_install = (bool) $wpdb->get_var( "SELECT meta_value FROM $wpdb->sitemeta WHERE site_id = 1 AND meta_key = 'subdomain_install'" );?>	<div class="error"><p><strong><?php _e('Warning:'); ?></strong> <?php _e( 'An existing WordPress network was detected.' ); ?></p></div>	<p><?php _e( 'Please complete the configuration steps. To create a new network, you will need to empty or remove the network database tables.' ); ?></p><?php		}	}	if ( $_POST || ! is_multisite() ) {?>		<h3><?php esc_html_e( 'Enabling the Network' ); ?></h3>		<p><?php _e( 'Complete the following steps to enable the features for creating a network of sites.' ); ?></p>		<div class="updated inline"><p><?php			if ( iis7_supports_permalinks() )				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> file.' );			else				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> and <code>.htaccess</code> files.' );		?></p></div><?php	}?>		<ol>			<li><p><?php				printf( __( 'Create a <code>blogs.dir</code> directory in <code>%s</code>. This directory is used to stored uploaded media for your additional sites and must be writeable by the web server.' ), WP_CONTENT_DIR );				if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )					echo ' <strong>' . __('Warning:') . ' ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</strong';			?></p></li>			<li><p><?php printf( __( 'Add the following to your <code>wp-config.php</code> file in <code>%s</code> <strong>above</strong> the line reading <code>/* That&#8217;s all, stop editing! Happy blogging. */</code>:' ), ABSPATH ); ?></p>				<textarea class="code" readonly="readonly" cols="100" rows="7">define( 'MULTISITE', true );define( 'SUBDOMAIN_INSTALL', <?php echo $subdomain_install ? 'true' : 'false'; ?> );$base = '<?php echo $base; ?>';define( 'DOMAIN_CURRENT_SITE', '<?php echo $hostname; ?>' );define( 'PATH_CURRENT_SITE', '<?php echo $base; ?>' );define( 'SITE_ID_CURRENT_SITE', 1 );define( 'BLOG_ID_CURRENT_SITE', 1 );</textarea><?php	$keys_salts = array( 'AUTH_KEY' => '', 'SECURE_AUTH_KEY' => '', 'LOGGED_IN_KEY' => '', 'NONCE_KEY' => '', 'AUTH_SALT' => '', 'SECURE_AUTH_SALT' => '', 'LOGGED_IN_SALT' => '', 'NONCE_SALT' => '' );	foreach ( $keys_salts as $c => $v ) {		if ( defined( $c ) )			unset( $keys_salts[ $c ] );	}	if ( ! empty( $keys_salts ) ) {		$from_api = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );		if ( is_wp_error( $from_api ) ) {			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = wp_generate_password( 64, true, true );			}		} else {			$from_api = explode( "\n", wp_remote_retrieve_body( $from_api ) );			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = substr( array_shift( $from_api ), 28, 64 );			}		}		$num_keys_salts = count( $keys_salts );?>	<p><?php		echo _n( 'This unique authentication key is also missing from your <code>wp-config.php</code> file.', 'These unique authentication keys are also missing from your <code>wp-config.php</code> file.', $num_keys_salts ); ?> <?php _e( 'To make your installation more secure, you should also add:' ) ?></p>	<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $num_keys_salts; ?>"><?php	foreach ( $keys_salts as $c => $v ) {		echo "\ndefine( '$c', '$v' );";	}?></textarea><?php	}?></li><?php	if ( iis7_supports_permalinks() ) :			if ( $subdomain_install ) {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			} else {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />                    <action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 5" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 6" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 7" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			}	?>		<li><p><?php printf( __( 'Add the following to your <code>web.config</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="20">		<?php echo wp_htmledit_pre( $web_config_file ); ?>		</textarea></li>		</ol>	<?php else : // end iis7_supports_permalinks(). construct an htaccess file instead:		$htaccess_file = 'RewriteEngine OnRewriteBase ' . $base . 'RewriteRule ^index\.php$ - [L]# uploaded filesRewriteRule ^' . ( $subdomain_install ? '' : '([_0-9a-zA-Z-]+/)?' ) . 'files/(.+) wp-includes/ms-files.php?file=$' . ( $subdomain_install ? 1 : 2 ) . ' [L]' . "\n";		if ( ! $subdomain_install )			$htaccess_file .= "\n# add a trailing slash to /wp-admin\n" . 'RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]' . "\n";		$htaccess_file .= "\n" . 'RewriteCond %{REQUEST_FILENAME} -f [OR]RewriteCond %{REQUEST_FILENAME} -dRewriteRule ^ - [L]';		// @todo custom content dir.		if ( ! $subdomain_install )			$htaccess_file .= "\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]";		$htaccess_file .= "\nRewriteRule . index.php [L]";		?>		<li><p><?php printf( __( 'Add the following to your <code>.htaccess</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $subdomain_install ? 11 : 16; ?>"><?php echo wp_htmledit_pre( $htaccess_file ); ?></textarea></li>		</ol>	<?php endif; // end IIS/Apache code branches.	if ( !is_multisite() ) { ?>		<p><?php printf( __( 'Once you complete these steps, your network is enabled and configured. You will have to log in again.') ); ?> <a href="<?php echo esc_url( site_url( 'wp-login.php' ) ); ?>"><?php _e( 'Log In' ); ?></a></p><?php	}}$base = trailingslashit( stripslashes( dirname( dirname( $_SERVER['SCRIPT_NAME'] ) ) ) );if ( $_POST ) {	check_admin_referer( 'install-network-1' );	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	// create network tables	install_network();	$hostname = get_clean_basedomain();	$subdomain_install = !allow_subdomain_install() ? false : (bool) $_POST['subdomain_install'];	if ( ! network_domain_check() ) {		$result = populate_network( 1, get_clean_basedomain(), sanitize_email( $_POST['email'] ), stripslashes( $_POST['sitename'] ), $base, $subdomain_install );		if ( is_wp_error( $result ) ) {			if ( 1 == count( $result->get_error_codes() ) && 'no_wildcard_dns' == $result->get_error_code() )				network_step2( $result );			else				network_step1( $result );		} else {			network_step2();		}	} else {		network_step2();	}} elseif ( is_multisite() || network_domain_check() ) {	network_step2();} else {	network_step1();}?></div><?php include( './admin-footer.php' ); ?>
<?php/** * These functions are needed to load WordPress. * * @package WordPress *//** * Turn register globals off. * * @access private * @since 2.1.0 * @return null Will return null if register_globals PHP directive was disabled */function wp_unregister_GLOBALS() {	if ( !ini_get( 'register_globals' ) )		return;	if ( isset( $_REQUEST['GLOBALS'] ) )		die( /*WP_I18N_GLOBALS_OVERWRITE*/'GLOBALS overwrite attempt detected'/*/WP_I18N_GLOBALS_OVERWRITE*/ );	// Variables that shouldn't be unset	$no_unset = array( 'GLOBALS', '_GET', '_POST', '_COOKIE', '_REQUEST', '_SERVER', '_ENV', '_FILES', 'table_prefix' );	$input = array_merge( $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_FILES, isset( $_SESSION ) && is_array( $_SESSION ) ? $_SESSION : array() );	foreach ( $input as $k => $v )		if ( !in_array( $k, $no_unset ) && isset( $GLOBALS[$k] ) ) {			$GLOBALS[$k] = null;			unset( $GLOBALS[$k] );		}}/** * Fix $_SERVER variables for various setups. * * @access private * @since 3.0.0 */function wp_fix_server_vars() {	global $PHP_SELF;	$default_server_values = array(		'SERVER_SOFTWARE' => '',		'REQUEST_URI' => '',	);	$_SERVER = array_merge( $default_server_values, $_SERVER );	// Fix for IIS when running with PHP ISAPI	if ( empty( $_SERVER['REQUEST_URI'] ) || ( php_sapi_name() != 'cgi-fcgi' && preg_match( '/^Microsoft-IIS\//', $_SERVER['SERVER_SOFTWARE'] ) ) ) {		// IIS Mod-Rewrite		if ( isset( $_SERVER['HTTP_X_ORIGINAL_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_ORIGINAL_URL'];		}		// IIS Isapi_Rewrite		else if ( isset( $_SERVER['HTTP_X_REWRITE_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL'];		} else {			// Use ORIG_PATH_INFO if there is no PATH_INFO			if ( !isset( $_SERVER['PATH_INFO'] ) && isset( $_SERVER['ORIG_PATH_INFO'] ) )				$_SERVER['PATH_INFO'] = $_SERVER['ORIG_PATH_INFO'];			// Some IIS + PHP configurations puts the script-name in the path-info (No need to append it twice)			if ( isset( $_SERVER['PATH_INFO'] ) ) {				if ( $_SERVER['PATH_INFO'] == $_SERVER['SCRIPT_NAME'] )					$_SERVER['REQUEST_URI'] = $_SERVER['PATH_INFO'];				else					$_SERVER['REQUEST_URI'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];			}			// Append the query string if it exists and isn't null			if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {				$_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];			}		}	}	// Fix for PHP as CGI hosts that set SCRIPT_FILENAME to something ending in php.cgi for all requests	if ( isset( $_SERVER['SCRIPT_FILENAME'] ) && ( strpos( $_SERVER['SCRIPT_FILENAME'], 'php.cgi' ) == strlen( $_SERVER['SCRIPT_FILENAME'] ) - 7 ) )		$_SERVER['SCRIPT_FILENAME'] = $_SERVER['PATH_TRANSLATED'];	// Fix for Dreamhost and other PHP as CGI hosts	if ( strpos( $_SERVER['SCRIPT_NAME'], 'php.cgi' ) !== false )		unset( $_SERVER['PATH_INFO'] );	// Fix empty PHP_SELF	$PHP_SELF = $_SERVER['PHP_SELF'];	if ( empty( $PHP_SELF ) )		$_SERVER['PHP_SELF'] = $PHP_SELF = preg_replace( '/(\?.*)?$/', '', $_SERVER["REQUEST_URI"] );}/** * Check for the required PHP version, and the MySQL extension or a database drop-in. * * Dies if requirements are not met. * * @access private * @since 3.0.0 */function wp_check_php_mysql_versions() {	// we can probably extend this function to check if wp_die() exists then use translated strings, and then use it in install.php etc.	global $required_php_version, $wp_version;	$php_version = phpversion();	if ( version_compare( $required_php_version, $php_version, '>' ) )		die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress %2$s requires at least %3$s.'/*/WP_I18N_OLD_PHP*/, $php_version, $wp_version, $required_php_version ) );	if ( !extension_loaded( 'mysql' ) && !file_exists( WP_CONTENT_DIR . '/db.php' ) )		die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );}/** * Don't load all of WordPress when handling a favicon.ico request. * Instead, send the headers for a zero-length favicon and bail. * * @since 3.0.0 */function wp_favicon_request() {	if ( '/favicon.ico' == $_SERVER['REQUEST_URI'] ) {		header('Content-Type: image/vnd.microsoft.icon');		header('Content-Length: 0');		exit;	}}/** * Dies with a maintenance message when conditions are met. * * Checks for a file in the WordPress root directory named ".maintenance". * This file will contain the variable $upgrading, set to the time the file * was created. If the file was created less than 10 minutes ago, WordPress * enters maintenance mode and displays a message. * * The default message can be replaced by using a drop-in (maintenance.php in * the wp-content directory). * * @access private * @since 3.0.0 */function wp_maintenance() {	if ( !file_exists( ABSPATH . '.maintenance' ) || defined( 'WP_INSTALLING' ) )		return;	global $upgrading;	include( ABSPATH . '.maintenance' );	// If the $upgrading timestamp is older than 10 minutes, don't die.	if ( ( time() - $upgrading ) >= 600 )		return;	if ( file_exists( WP_CONTENT_DIR . '/maintenance.php' ) ) {		require_once( WP_CONTENT_DIR . '/maintenance.php' );		die();	}	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	header( "$protocol 503 Service Unavailable", true, 503 );	header( 'Content-Type: text/html; charset=utf-8' );	header( 'Retry-After: 600' );?>	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">	<html xmlns="http://www.w3.org/1999/xhtml">	<head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />		<title><?php echo /*WP_I18N_MAINTENANCE*/'Maintenance'/*/WP_I18N_MAINTENANCE*/; ?></title>	</head>	<body>		<h1><?php echo /*WP_I18N_MAINT_MSG*/'Briefly unavailable for scheduled maintenance. Check back in a minute.'/*/WP_I18N_MAINT_MSG*/; ?></h1>	</body>	</html><?php	die();}/** * PHP 4 standard microtime start capture. * * @access private * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when function is called. * @return bool Always returns true. */function timer_start() {	global $timestart;	$mtime = explode( ' ', microtime() );	$timestart = $mtime[1] + $mtime[0];	return true;}/** * Return and/or display the time from the page start to when function is called. * * You can get the results and print them by doing: * <code> * $nTimePageTookToExecute = timer_stop(); * echo $nTimePageTookToExecute; * </code> * * Or instead, you can do: * <code> * timer_stop(1); * </code> * which will do what the above does. If you need the result, you can assign it to a variable, but * most cases, you only need to echo it. * * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when timer_start() is called * @global int $timeend  Seconds and Microseconds added together from when function is called * * @param int $display Use '0' or null to not echo anything and 1 to echo the total time * @param int $precision The amount of digits from the right of the decimal to display. Default is 3. * @return float The "second.microsecond" finished time calculation */function timer_stop( $display = 0, $precision = 3 ) { // if called like timer_stop(1), will echo $timetotal	global $timestart, $timeend;	$mtime = microtime();	$mtime = explode( ' ', $mtime );	$timeend = $mtime[1] + $mtime[0];	$timetotal = $timeend - $timestart;	$r = ( function_exists( 'number_format_i18n' ) ) ? number_format_i18n( $timetotal, $precision ) : number_format( $timetotal, $precision );	if ( $display )		echo $r;	return $r;}/** * Sets PHP error handling and handles WordPress debug mode. * * Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be * defined in wp-config.php. Example: <code> define( 'WP_DEBUG', true ); </code> * * WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true. * WP_DEBUG defaults to false. * * When WP_DEBUG is true, all PHP notices are reported. WordPress will also display * notices, including one when a deprecated WordPress function, function argument, * or file is used. Deprecated code may be removed from a later version. * * It is strongly recommended that plugin and theme developers use WP_DEBUG in their * development environments. * * When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed. * WP_DEBUG_DISPLAY defaults to true. Defining it as false prevents WordPress from * changing the global configuration setting. (Defining WP_DEBUG_DISPLAY as false * will never force errors to be hidden.) * * When WP_DEBUG_LOG is true, errors will be logged to wp-content/debug.log. * WP_DEBUG_LOG defaults to false. * * @access private * @since 3.0.0 */function wp_debug_mode() {	if ( WP_DEBUG ) {		if ( defined( 'E_DEPRECATED' ) )			error_reporting( E_ALL & ~E_DEPRECATED & ~E_STRICT );		else			error_reporting( E_ALL );		if ( WP_DEBUG_DISPLAY )			ini_set( 'display_errors', 1 );		if ( WP_DEBUG_LOG ) {			ini_set( 'log_errors', 1 );			ini_set( 'error_log', WP_CONTENT_DIR . '/debug.log' );		}	} else {		if ( defined( 'E_RECOVERABLE_ERROR' ) )			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );		else			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING );	}}/** * Sets the location of the language directory. * * To set directory manually, define <code>WP_LANG_DIR</code> in wp-config.php. * * First looks for language folder in WP_CONTENT_DIR and uses that folder if it * exists. Or it uses the "languages" folder in WPINC. * * The WP_LANG_DIR constant was introduced in 2.1.0. * * @access private * @since 3.0.0 */function wp_set_lang_dir() {	if ( !defined( 'WP_LANG_DIR' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/languages' ) && @is_dir( WP_CONTENT_DIR . '/languages' ) ) {			define( 'WP_LANG_DIR', WP_CONTENT_DIR . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old static relative path maintained for limited backwards compatibility - won't work in some cases				define( 'LANGDIR', 'wp-content/languages' );			}		} else {			define( 'WP_LANG_DIR', ABSPATH . WPINC . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old relative path maintained for backwards compatibility				define( 'LANGDIR', WPINC . '/languages' );			}		}	}}/** * Sets the database table prefix and the format specifiers for database table columns. * * Columns not listed here default to %s. * * @see wpdb::$field_types Since 2.8.0 * @see wpdb::prepare() * @see wpdb::insert() * @see wpdb::update() * @see wpdb::set_prefix() * * @access private * @since 3.0.0 */function wp_set_wpdb_vars() {	global $wpdb, $table_prefix;	if ( !empty( $wpdb->error ) )		dead_db();	$wpdb->field_types = array( 'post_author' => '%d', 'post_parent' => '%d', 'menu_order' => '%d', 'term_id' => '%d', 'term_group' => '%d', 'term_taxonomy_id' => '%d',		'parent' => '%d', 'count' => '%d','object_id' => '%d', 'term_order' => '%d', 'ID' => '%d', 'commment_ID' => '%d', 'comment_post_ID' => '%d', 'comment_parent' => '%d',		'user_id' => '%d', 'link_id' => '%d', 'link_owner' => '%d', 'link_rating' => '%d', 'option_id' => '%d', 'blog_id' => '%d', 'meta_id' => '%d', 'post_id' => '%d',		'user_status' => '%d', 'umeta_id' => '%d', 'comment_karma' => '%d', 'comment_count' => '%d',		// multisite:		'active' => '%d', 'cat_id' => '%d', 'deleted' => '%d', 'lang_id' => '%d', 'mature' => '%d', 'public' => '%d', 'site_id' => '%d', 'spam' => '%d',	);	$prefix = $wpdb->set_prefix( $table_prefix );	if ( is_wp_error( $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: <code>$table_prefix</code> in <code>wp-config.php</code> can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );}/** * Starts the WordPress object cache. * * If an object-cache.php file exists in the wp-content directory, * it uses that drop-in as an external object cache. * * @access private * @since 3.0.0 */function wp_start_object_cache() {	global $_wp_using_ext_object_cache;	$first_init = false; 	if ( ! function_exists( 'wp_cache_init' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {			require_once ( WP_CONTENT_DIR . '/object-cache.php' );			$_wp_using_ext_object_cache = true;		} else {			require_once ( ABSPATH . WPINC . '/cache.php' );			$_wp_using_ext_object_cache = false;		}		$first_init = true;	} else if ( !$_wp_using_ext_object_cache && file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {		// Sometimes advanced-cache.php can load object-cache.php before it is loaded here.		// This breaks the function_exists check above and can result in $_wp_using_ext_object_cache		// being set incorrectly.  Double check if an external cache exists.		$_wp_using_ext_object_cache = true;	}	// If cache supports reset, reset instead of init if already initialized.	// Reset signals to the cache that global IDs have changed and it may need to update keys	// and cleanup caches.	if ( !$first_init && function_exists('wp_cache_reset') )		wp_cache_reset();	else		wp_cache_init();	if ( function_exists( 'wp_cache_add_global_groups' ) ) {		wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-transient', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'global-posts' ) );		wp_cache_add_non_persistent_groups( array( 'comment', 'counts', 'plugins' ) );	}}/** * Redirects to the installer if WordPress is not installed. * * Dies with an error message when multisite is enabled. * * @access private * @since 3.0.0 */function wp_not_installed() {	if ( is_multisite() ) {		if ( ! is_blog_installed() && ! defined( 'WP_INSTALLING' ) )			wp_die( __( 'The site you have requested is not installed properly. Please contact the system administrator.' ) );	} elseif ( ! is_blog_installed() && false === strpos( $_SERVER['PHP_SELF'], 'install.php' ) && !defined( 'WP_INSTALLING' ) ) {		if ( defined( 'WP_SITEURL' ) )			$link = WP_SITEURL . '/wp-admin/install.php';		elseif ( false !== strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) )			$link = preg_replace( '|/wp-admin/?.*?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		else			$link = preg_replace( '|/[^/]+?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		require( ABSPATH . WPINC . '/kses.php' );		require( ABSPATH . WPINC . '/pluggable.php' );		require( ABSPATH . WPINC . '/formatting.php' );		wp_redirect( $link );		die();	}}/** * Returns array of must-use plugin files to be included in global scope. * * The default directory is wp-content/mu-plugins. To change the default directory * manually, define <code>WPMU_PLUGIN_DIR</code> and <code>WPMU_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_mu_plugins() {	$mu_plugins = array();	if ( !is_dir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	if ( ! $dh = opendir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	while ( ( $plugin = readdir( $dh ) ) !== false ) {		if ( substr( $plugin, -4 ) == '.php' )			$mu_plugins[] = WPMU_PLUGIN_DIR . '/' . $plugin;	}	closedir( $dh );	sort( $mu_plugins );	return $mu_plugins;}/** * Returns array of plugin files to be included in global scope. * * The default directory is wp-content/plugins. To change the default directory * manually, define <code>WP_PLUGIN_DIR</code> and <code>WP_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_active_and_valid_plugins() {	$plugins = array();	$active_plugins = (array) get_option( 'active_plugins', array() );	// Get active network plugins	if ( is_multisite() ) {		$active_sitewide_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		if ( !empty($active_sitewide_plugins) ) {			$active_plugins = array_merge( $active_plugins, array_keys( $active_sitewide_plugins ) );			sort( $active_plugins );		}	}	// Check for hacks file if the option is enabled	if ( get_option( 'hack_file' ) && file_exists( ABSPATH . 'my-hacks.php' ) ) {		_deprecated_file( 'my-hacks.php', '1.5' );		array_unshift( $plugins, ABSPATH . 'my-hacks.php' );	}	if ( empty( $active_plugins ) || defined( 'WP_INSTALLING' ) )		return $plugins;	foreach ( $active_plugins as $plugin ) {		if ( ! validate_file( $plugin ) // $plugin must validate as file			&& '.php' == substr( $plugin, -4 ) // $plugin must end with '.php'			&& file_exists( WP_PLUGIN_DIR . '/' . $plugin ) // $plugin must exist			)		$plugins[] = WP_PLUGIN_DIR . '/' . $plugin;	}	return $plugins;}/** * Sets internal encoding using mb_internal_encoding(). * * In most cases the default internal encoding is latin1, which is of no use, * since we want to use the mb_ functions for utf-8 strings. * * @access private * @since 3.0.0 */function wp_set_internal_encoding() {	if ( function_exists( 'mb_internal_encoding' ) ) {		if ( !@mb_internal_encoding( get_option( 'blog_charset' ) ) )			mb_internal_encoding( 'UTF-8' );	}}/** * Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER. * * Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE, * or $_ENV are needed, use those superglobals directly. * * @access private * @since 3.0.0 */function wp_magic_quotes() {	// If already slashed, strip.	if ( get_magic_quotes_gpc() ) {		$_GET    = stripslashes_deep( $_GET    );		$_POST   = stripslashes_deep( $_POST   );		$_COOKIE = stripslashes_deep( $_COOKIE );	}	// Escape with wpdb.	$_GET    = add_magic_quotes( $_GET    );	$_POST   = add_magic_quotes( $_POST   );	$_COOKIE = add_magic_quotes( $_COOKIE );	$_SERVER = add_magic_quotes( $_SERVER );	// Force REQUEST to be GET + POST.	$_REQUEST = array_merge( $_GET, $_POST );}/** * Runs just before PHP shuts down execution. * * @access private * @since 1.2.0 */function shutdown_action_hook() {	do_action( 'shutdown' );	wp_cache_close();}/** * Copy an object. * * Returns a cloned copy of an object. * * @since 2.7.0 * * @param object $object The object to clone * @return object The cloned object */function wp_clone( $object ) {	static $can_clone;	if ( !isset( $can_clone ) )		$can_clone = version_compare( phpversion(), '5.0', '>=' );	return $can_clone ? clone( $object ) : $object;}/** * Whether the current request is in WordPress admin Panel * * Does not inform on whether the user is an admin! Use capability checks to * tell if the user should be accessing a section or not. * * @since 1.5.1 * * @return bool True if inside WordPress administration pages. */function is_admin() {	if ( defined( 'WP_ADMIN' ) )		return WP_ADMIN;	return false;}/** * Whether Multisite support is enabled * * @since 3.0.0 * * @return bool True if multisite is enabled, false otherwise. */function is_multisite() {	if ( defined( 'MULTISITE' ) )		return MULTISITE;	if ( defined( 'VHOST' ) || defined( 'SUNRISE' ) )		return true;	return false;}?>
<?php/** * Template WordPress Administration API. * * A Big Mess. Also some neat functions that are nicely written. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since 2.7 * * Outputs the HTML for the hidden table rows used in Categories, Link Categories and Tags quick edit. * * @param string $type "edit-tags", "categoried" or "edit-link-categories" * @param string $taxonomy The taxonomy of the row. * @return */function inline_edit_term_row($type, $taxonomy) {	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		return;	$columns = get_column_headers($type);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($type) ) );	$col_count = count($columns) - count($hidden);	?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<tr id="inline-edit" class="inline-edit-row" style="display: none"><td colspan="<?php echo $col_count; ?>">		<fieldset><div class="inline-edit-col">			<h4><?php _e( 'Quick Edit' ); ?></h4>			<label>				<span class="title"><?php _e( 'Name' ); ?></span>				<span class="input-text-wrap"><input type="text" name="name" class="ptitle" value="" /></span>			</label><?php if ( !is_multisite() ) { ?>			<label>				<span class="title"><?php _e( 'Slug' ); ?></span>				<span class="input-text-wrap"><input type="text" name="slug" class="ptitle" value="" /></span>			</label><?php } ?>		</div></fieldset><?php	$core_columns = array( 'cb' => true, 'description' => true, 'name' => true, 'slug' => true, 'posts' => true );	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( 'quick_edit_custom_box', $column_name, $type, $taxonomy );	}?>	<p class="inline-edit-save submit">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="cancel button-secondary alignleft"><?php _e('Cancel'); ?></a>		<?php $update_text = $tax->labels->update_item; ?>		<a accesskey="s" href="#inline-edit" title="<?php echo esc_attr( $update_text ); ?>" class="save button-primary alignright"><?php echo $update_text; ?></a>		<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<span class="error" style="display:none;"></span>		<?php wp_nonce_field( 'taxinlineeditnonce', '_inline_edit', false ); ?>		<input type="hidden" name="taxonomy" value="<?php echo esc_attr( $tax->name ); ?>" />		<br class="clear" />	</p>	</td></tr>	</tbody></table></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $category * @param unknown_type $name_override * @return unknown */function link_cat_row( $category, $name_override = false ) {	static $row_class = '';	if ( !$category = get_term( $category, 'link_category', OBJECT, 'display' ) )		return false;	if ( is_wp_error( $category ) )		return $category;	$default_cat_id = (int) get_option( 'default_link_category' );	$name = ( $name_override ? $name_override : $category->name );	$edit_link = "link-category.php?action=edit&amp;cat_ID=$category->term_id";	if ( current_user_can( 'manage_categories' ) ) {		$edit = "<a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $category->name)) . "'>$name</a><br />";		$actions = array();		$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		if ( $default_cat_id != $category->term_id )			$actions['delete'] = "<a class='delete:the-list:link-cat-$category->term_id submitdelete' href='" . wp_nonce_url("link-category.php?action=delete&amp;cat_ID=$category->term_id", 'delete-link-category_' . $category->term_id) . "'>" . __('Delete') . "</a>";		$actions = apply_filters('link_cat_row_actions', $actions, $category);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';	} else {		$edit = $name;	}	$row_class = 'alternate' == $row_class ? '' : 'alternate';	$qe_data = get_term_to_edit($category->term_id, 'link_category');	$category->count = number_format_i18n( $category->count );	$count = ( $category->count > 0 ) ? "<a href='link-manager.php?cat_id=$category->term_id'>$category->count</a>" : $category->count;	$output = "<tr id='link-cat-$category->term_id' class='iedit $row_class'>";	$columns = get_column_headers('edit-link-categories');	$hidden = get_hidden_columns('edit-link-categories');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$output .= "<th scope='row' class='check-column'>";				if ( absint( get_option( 'default_link_category' ) ) != $category->term_id ) {					$output .= "<input type='checkbox' name='delete[]' value='$category->term_id' />";				} else {					$output .= "&nbsp;";				}				$output .= "</th>";				break;			case 'name':				$output .= "<td $attributes>$edit";				$output .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';				$output .= '<div class="name">' . $qe_data->name . '</div>';				$output .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';				$output .= '<div class="cat_parent">' . $qe_data->parent . '</div></div></td>';				break;			case 'description':				$output .= "<td $attributes>$category->description</td>";				break;			case 'slug':				$output .= "<td $attributes>" . apply_filters('editable_slug', $category->slug) . "</td>";				break;			case 'links':				$attributes = 'class="links column-links num"' . $style;				$output .= "<td $attributes>$count</td>";				break;			default:				$output .= "<td $attributes>";				$output .= apply_filters('manage_link_categories_custom_column', '', $column_name, $category->term_id);				$output .= "</td>";		}	}	$output .= '</tr>';	return $output;}//// Category Checklists///** * {@internal Missing Short Description}} * * @since unknown */class Walker_Category_Checklist extends Walker {	var $tree_type = 'category';	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id'); //TODO: decouple this	function start_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	function end_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	function start_el(&$output, $category, $depth, $args) {		extract($args);		if ( empty($taxonomy) )			$taxonomy = 'category';		if ( $taxonomy == 'category' )			$name = 'post_category';		else			$name = 'tax_input['.$taxonomy.']';		$class = in_array( $category->term_id, $popular_cats ) ? ' class="popular-category"' : '';		$output .= "\n<li id='{$taxonomy}-{$category->term_id}'$class>" . '<label class="selectit"><input value="' . $category->term_id . '" type="checkbox" name="'.$name.'[]" id="in-'.$taxonomy.'-' . $category->term_id . '"' . checked( in_array( $category->term_id, $selected_cats ), true, false ) . disabled( empty( $args['disabled'] ), false, false ) . ' /> ' . esc_html( apply_filters('the_category', $category->name )) . '</label>';	}	function end_el(&$output, $category, $depth, $args) {		$output .= "</li>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @param unknown_type $descendants_and_self * @param unknown_type $selected_cats * @param unknown_type $popular_cats */function wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {	wp_terms_checklist($post_id,	 	array(			'taxonomy' => 'category',			'descendants_and_self' => $descendants_and_self,			'selected_cats' => $selected_cats,			'popular_cats' => $popular_cats,			'walker' => $walker,			'checked_ontop' => $checked_ontop  ));}/** * Taxonomy independent version of wp_category_checklist * * @param int $post_id * @param array $args */function wp_terms_checklist($post_id = 0, $args = array()) { 	$defaults = array(		'descendants_and_self' => 0,		'selected_cats' => false,		'popular_cats' => false,		'walker' => null,		'taxonomy' => 'category',		'checked_ontop' => true	);	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	if ( empty($walker) || !is_a($walker, 'Walker') )		$walker = new Walker_Category_Checklist;	$descendants_and_self = (int) $descendants_and_self;	$args = array('taxonomy' => $taxonomy);	$tax = get_taxonomy($taxonomy);	$args['disabled'] = !current_user_can($tax->cap->assign_terms);	if ( is_array( $selected_cats ) )		$args['selected_cats'] = $selected_cats;	elseif ( $post_id )		$args['selected_cats'] = wp_get_object_terms($post_id, $taxonomy, array_merge($args, array('fields' => 'ids')));	else		$args['selected_cats'] = array();	if ( is_array( $popular_cats ) )		$args['popular_cats'] = $popular_cats;	else		$args['popular_cats'] = get_terms( $taxonomy, array( 'fields' => 'ids', 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );	if ( $descendants_and_self ) {		$categories = (array) get_terms($taxonomy, array( 'child_of' => $descendants_and_self, 'hierarchical' => 0, 'hide_empty' => 0 ) );		$self = get_term( $descendants_and_self, $taxonomy );		array_unshift( $categories, $self );	} else {		$categories = (array) get_terms($taxonomy, array('get' => 'all'));	}	if ( $checked_ontop ) {		// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)		$checked_categories = array();		$keys = array_keys( $categories );		foreach( $keys as $k ) {			if ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {				$checked_categories[] = $categories[$k];				unset( $categories[$k] );			}		}		// Put checked cats on top		echo call_user_func_array(array(&$walker, 'walk'), array($checked_categories, 0, $args));	}	// Then the rest of them	echo call_user_func_array(array(&$walker, 'walk'), array($categories, 0, $args));}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $taxonomy * @param unknown_type $default * @param unknown_type $number * @param unknown_type $echo * @return unknown */function wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {	global $post_ID;	if ( $post_ID )		$checked_terms = wp_get_object_terms($post_ID, $taxonomy, array('fields'=>'ids'));	else		$checked_terms = array();	$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can($tax->cap->assign_terms) )		$disabled = 'disabled="disabled"';	else		$disabled = '';	$popular_ids = array();	foreach ( (array) $terms as $term ) {		$popular_ids[] = $term->term_id;		if ( !$echo ) // hack for AJAX use			continue;		$id = "popular-$taxonomy-$term->term_id";		$checked = in_array( $term->term_id, $checked_terms ) ? 'checked="checked"' : '';		?>		<li id="<?php echo $id; ?>" class="popular-category">			<label class="selectit">			<input id="in-<?php echo $id; ?>" type="checkbox" <?php echo $checked; ?> value="<?php echo (int) $term->term_id; ?>" <?php echo $disabled ?>/>				<?php echo esc_html( apply_filters( 'the_category', $term->name ) ); ?>			</label>		</li>		<?php	}	return $popular_ids;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id */function wp_link_category_checklist( $link_id = 0 ) {	$default = 1;	if ( $link_id ) {		$checked_categories = wp_get_link_cats( $link_id );		// No selected categories, strange		if ( ! count( $checked_categories ) )			$checked_categories[] = $default;	} else {		$checked_categories[] = $default;	}	$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );	if ( empty( $categories ) )		return;	foreach ( $categories as $category ) {		$cat_id = $category->term_id;		$name = esc_html( apply_filters( 'the_category', $category->name ) );		$checked = in_array( $cat_id, $checked_categories ) ? ' checked="checked"' : '';		echo '<li id="link-category-', $cat_id, '"><label for="in-link-category-', $cat_id, '" class="selectit"><input value="', $cat_id, '" type="checkbox" name="link_category[]" id="in-link-category-', $cat_id, '"', $checked, '/> ', $name, "</label></li>";	}}// Tag stuff// Returns a single tag row (see tag_rows below)// Note: this is also used in admin-ajax.php!/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag * @param unknown_type $class * @return unknown */function _tag_row( $tag, $level, $taxonomy = 'post_tag' ) {		global $post_type, $current_screen;		static $row_class = '';		$row_class = ($row_class == '' ? ' class="alternate"' : '');		$count = number_format_i18n( $tag->count );		$tax = get_taxonomy($taxonomy);		if ( 'post_tag' == $taxonomy ) {			$tagsel = 'tag';		} elseif ( 'category' == $taxonomy ) {			$tagsel = 'category_name';		} elseif ( ! empty($tax->query_var) ) {			$tagsel = $tax->query_var;		} else {			$tagsel = $taxonomy;		}		$pad = str_repeat( '&#8212; ', max(0, $level) );		$name = apply_filters( 'term_name', $pad . ' ' . $tag->name, $tag );		$qe_data = get_term($tag->term_id, $taxonomy, object, 'edit');		$edit_link = "edit-tags.php?action=edit&amp;taxonomy=$taxonomy&amp;post_type=$post_type&amp;tag_ID=$tag->term_id";		$out = '';		$out .= '<tr id="tag-' . $tag->term_id . '"' . $row_class . '>';		$columns = get_column_headers($current_screen);		$hidden = get_hidden_columns($current_screen);		$default_term = get_option('default_' . $taxonomy);		foreach ( $columns as $column_name => $column_display_name ) {			$class = "class=\"$column_name column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch ($column_name) {				case 'cb':					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$out .= '<th scope="row" class="check-column"> <input type="checkbox" name="delete_tags[]" value="' . $tag->term_id . '" /></th>';					else						$out .= '<th scope="row" class="check-column">&nbsp;</th>';					break;				case 'name':					$out .= '<td ' . $attributes . '><strong><a class="row-title" href="' . $edit_link . '" title="' . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $name)) . '">' . $name . '</a></strong><br />';					$actions = array();					if ( current_user_can($tax->cap->edit_terms) ) {						$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';						$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';					}					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$actions['delete'] = "<a class='delete-tag' href='" . wp_nonce_url("edit-tags.php?action=delete&amp;taxonomy=$taxonomy&amp;tag_ID=$tag->term_id", 'delete-tag_' . $tag->term_id) . "'>" . __('Delete') . "</a>";					$actions = apply_filters('tag_row_actions', $actions, $tag);					$actions = apply_filters("${taxonomy}_row_actions", $actions, $tag);					$action_count = count($actions);					$i = 0;					$out .= '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						$out .= "<span class='$action'>$link$sep</span>";					}					$out .= '</div>';					$out .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';					$out .= '<div class="name">' . $qe_data->name . '</div>';					$out .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';					$out .= '<div class="parent">' . $qe_data->parent . '</div></div></td>';					break;				case 'description':					$out .= "<td $attributes>$tag->description</td>";					break;				case 'slug':					$out .= "<td $attributes>" . apply_filters('editable_slug', $tag->slug) . "</td>";					break;				case 'posts':					$attributes = 'class="posts column-posts num"' . $style;					$out .= "<td $attributes><a href='edit.php?$tagsel=$tag->slug&amp;post_type=$post_type'>$count</a></td>";					break;				default:					$out .= "<td $attributes>";					$out .= apply_filters("manage_${taxonomy}_custom_column", '', $column_name, $tag->term_id);					$out .= "</td>";			}		}		$out .= "</tr>\n";		return $out;}// Outputs appropriate rows for the Nth page of the Tag Management screen,// assuming M tags displayed at a time on the page// Returns the number of tags displayed/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $pagesize * @param unknown_type $searchterms * @return unknown */function tag_rows( $page = 1, $pagesize = 20, $searchterms = '', $taxonomy = 'post_tag' ) {	// Get a page worth of tags	$start = ($page - 1) * $pagesize;	$args = array('offset' => $start, 'number' => $pagesize, 'hide_empty' => 0);	if ( !empty( $searchterms ) )		$args['search'] = $searchterms;	// convert it to table rows	$out = '';	$count = 0;	if ( is_taxonomy_hierarchical($taxonomy) ) {		// We'll need the full set of terms then.		$args['number'] = $args['offset'] = 0;		$terms = get_terms( $taxonomy, $args );		if ( !empty( $searchterms ) ) // Ignore children on searches.			$children = array();		else			$children = _get_term_hierarchy($taxonomy);		// Some funky recursion to get the job done(Paging & parents mainly) is contained within, Skip it for non-hierarchical taxonomies for performance sake		$out .= _term_rows($taxonomy, $terms, $children, $page, $pagesize, $count);	} else {		$terms = get_terms( $taxonomy, $args );		foreach( $terms as $term )			$out .= _tag_row( $term, 0, $taxonomy );		$count = $pagesize; // Only displaying a single page.	}	echo $out;	return $count;}function _term_rows( $taxonomy, $terms, &$children, $page = 1, $per_page = 20, &$count, $parent = 0, $level = 0 ) {	$start = ($page - 1) * $per_page;	$end = $start + $per_page;	$output = '';	foreach ( $terms as $key => $term ) {		if ( $count >= $end )			break;		if ( $term->parent != $parent && empty($_GET['s']) )			continue;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $term->parent > 0 && empty($_GET['s']) ) {			$my_parents = $parent_ids = array();			$p = $term->parent;			while ( $p ) {				$my_parent = get_term( $p, $taxonomy );				$my_parents[] = $my_parent;				$p = $my_parent->parent;				if ( in_array($p, $parent_ids) ) // Prevent parent loops.					break;				$parent_ids[] = $p;			}			unset($parent_ids);			$num_parents = count($my_parents);			while ( $my_parent = array_pop($my_parents) ) {				$output .=  "\t" . _tag_row( $my_parent, $level - $num_parents, $taxonomy );				$num_parents--;			}		}		if ( $count >= $start )			$output .= "\t" . _tag_row( $term, $level, $taxonomy );		++$count;		unset($terms[$key]);		if ( isset($children[$term->term_id]) && empty($_GET['s']) )			$output .= _term_rows( $taxonomy, $terms, $children, $page, $per_page, $count, $term->term_id, $level + 1 );	}	return $output;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_posts_columns( $screen = '') {	if ( empty($screen) )		$post_type = 'post';	else		$post_type = $screen->post_type;	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	/* translators: manage posts column name */	$posts_columns['title'] = _x('Title', 'column name');	$posts_columns['author'] = __('Author');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'category') )		$posts_columns['categories'] = __('Categories');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'post_tag') )		$posts_columns['tags'] = __('Tags');	$post_status = !empty($_REQUEST['post_status']) ? $_REQUEST['post_status'] : 'all';	if ( !in_array( $post_status, array('pending', 'draft', 'future') ) && ( empty($post_type) || post_type_supports($post_type, 'comments') ) )		$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	$posts_columns['date'] = __('Date');	if ( 'page' == $post_type )		$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );	else		$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );	$posts_columns = apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );	return $posts_columns;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_media_columns() {	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	$posts_columns['icon'] = '';	/* translators: column name */	$posts_columns['media'] = _x('File', 'column name');	$posts_columns['author'] = __('Author');	//$posts_columns['tags'] = _x('Tags', 'column name');	/* translators: column name */	$posts_columns['parent'] = _x('Attached to', 'column name');	$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	//$posts_columns['comments'] = __('Comments');	/* translators: column name */	$posts_columns['date'] = _x('Date', 'column name');	$posts_columns = apply_filters('manage_media_columns', $posts_columns);	return $posts_columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_pages_columns() {	return wp_manage_posts_columns();}/** * Get the column headers for a screen * * @since unknown * * @param string|object $screen The screen you want the headers for * @return array Containing the headers in the format id => UI String */function get_column_headers($screen) {	global $_wp_column_headers;	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	if ( is_string($screen) )		$screen = convert_to_screen($screen);	// Store in static to avoid running filters on each call	if ( isset($_wp_column_headers[$screen->id]) )		return $_wp_column_headers[$screen->id];	switch ($screen->base) {		case 'edit':			 $_wp_column_headers[$screen->id] = wp_manage_posts_columns( $screen );			 break;		case 'edit-comments':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'author' => __('Author'),				/* translators: column name */				'comment' => _x('Comment', 'column name'),				//'date' => __('Submitted'),				'response' => __('In Response To')			);			break;		case 'link-manager':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'url' => __('URL'),				'categories' => __('Categories'),				'rel' => __('Relationship'),				'visible' => __('Visible'),				'rating' => __('Rating')			);			break;		case 'upload':			$_wp_column_headers[$screen->id] = wp_manage_media_columns();			break;		case 'categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'edit-link-categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'links' => __('Links')			);			break;		case 'edit-tags':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'users':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'username' => __('Username'),				'name' => __('Name'),				'email' => __('E-mail'),				'role' => __('Role'),				'posts' => __('Posts')			);			break;		default :			$_wp_column_headers[$screen->id] = array();	}	$_wp_column_headers[$screen->id] = apply_filters('manage_' . $screen->id . '_columns', $_wp_column_headers[$screen->id]);	return $_wp_column_headers[$screen->id];}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen * @param unknown_type $id */function print_column_headers( $screen, $id = true ) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = get_column_headers( $screen );	$hidden = get_hidden_columns($screen);	$styles = array();	foreach ( $columns as $column_key => $column_display_name ) {		$class = ' class="manage-column';		$class .= " column-$column_key";		if ( 'cb' == $column_key )			$class .= ' check-column';		elseif ( in_array($column_key, array('posts', 'comments', 'links')) )			$class .= ' num';		$class .= '"';		$style = '';		if ( in_array($column_key, $hidden) )			$style = 'display:none;';		if ( isset($styles[$screen->id]) && isset($styles[$screen->id][$column_key]) )			$style .= ' ' . $styles[$screen>id][$column_key];		$style = ' style="' . $style . '"';?>	<th scope="col" <?php echo $id ? "id=\"$column_key\"" : ""; echo $class; echo $style; ?>><?php echo $column_display_name; ?></th><?php }}/** * Register column headers for a particular screen.  The header names will be listed in the Screen Options. * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param array $columns An array of columns with column IDs as the keys and translated column names as the values * @see get_column_headers(), print_column_headers(), get_hidden_columns() */function register_column_headers($screen, $columns) {	global $_wp_column_headers;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	$_wp_column_headers[$screen->id] = $columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function get_hidden_columns($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	return (array) get_user_option( 'manage' . $screen->id. 'columnshidden' );}/** * {@internal Missing Short Description}} * * Outputs the quick edit and bulk edit table rows for posts and pages * * @since 2.7 * * @param string $screen */function inline_edit_row( $screen ) {	global $current_user, $mode;	if ( is_string($screen) ) {		$screen = array('id' => 'edit-' . $screen, 'base' => 'edit', 'post_type' => $screen );		$screen = (object) $screen;	}	$post = get_default_post_to_edit( $screen->post_type );	$post_type_object = get_post_type_object( $screen->post_type );	$taxonomy_names = get_object_taxonomies( $screen->post_type );	$hierarchical_taxonomies = array();	$flat_taxonomies = array();	foreach ( $taxonomy_names as $taxonomy_name ) {		$taxonomy = get_taxonomy( $taxonomy_name);		if ( !$taxonomy->show_ui )			continue;		if ( $taxonomy->hierarchical )			$hierarchical_taxonomies[] = $taxonomy;		else			$flat_taxonomies[] = $taxonomy;	}	$columns = wp_manage_posts_columns($screen);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($screen) ) );	$col_count = count($columns) - count($hidden);	$m = ( isset($mode) && 'excerpt' == $mode ) ? 'excerpt' : 'list';	$can_publish = current_user_can($post_type_object->cap->publish_posts);	$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<?php	$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';	$bulk = 0;	while ( $bulk < 2 ) { ?>	<tr id="<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>" class="inline-edit-row inline-edit-row-<?php echo "$hclass inline-edit-$screen->post_type ";		echo $bulk ? "bulk-edit-row bulk-edit-row-$hclass bulk-edit-$screen->post_type" : "quick-edit-row quick-edit-row-$hclass inline-edit-$screen->post_type";	?>" style="display: none"><td colspan="<?php echo $col_count; ?>">	<fieldset class="inline-edit-col-left"><div class="inline-edit-col">		<h4><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></h4><?phpif ( post_type_supports( $screen->post_type, 'title' ) ) :	if ( $bulk ) : ?>		<div id="bulk-title-div">			<div id="bulk-titles"></div>		</div><?php else : // $bulk ?>		<label>			<span class="title"><?php _e( 'Title' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_title" class="ptitle" value="" /></span>		</label>		<label>			<span class="title"><?php _e( 'Slug' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_name" value="" /></span>		</label><?php endif; // $bulkendif; // post_type_supports title ?><?php if ( !$bulk ) : ?>		<label><span class="title"><?php _e( 'Date' ); ?></span></label>		<div class="inline-edit-date">			<?php touch_time(1, 1, 4, 1); ?>		</div>		<br class="clear" /><?php endif; // $bulk	if ( post_type_supports( $screen->post_type, 'author' ) ) :		$authors = get_editable_user_ids( $current_user->id, true, $screen->post_type ); // TODO: ROLE SYSTEM		$authors_dropdown = '';		if ( $authors && count( $authors ) > 1 ) :			$users_opt = array('include' => $authors, 'name' => 'post_author', 'class'=> 'authors', 'multi' => 1, 'echo' => 0);			if ( $bulk )				$users_opt['show_option_none'] = __('&mdash; No Change &mdash;');			$authors_dropdown  = '<label>';			$authors_dropdown .= '<span class="title">' . __( 'Author' ) . '</span>';			$authors_dropdown .= wp_dropdown_users( $users_opt );			$authors_dropdown .= '</label>';		endif; // authors?><?php if ( !$bulk ) echo $authors_dropdown;endif; // post_type_supports authorif ( !$bulk ) :?>		<div class="inline-edit-group">			<label class="alignleft">				<span class="title"><?php _e( 'Password' ); ?></span>				<span class="input-text-wrap"><input type="text" name="post_password" class="inline-edit-password-input" value="" /></span>			</label>			<em style="margin:5px 10px 0 0" class="alignleft">				<?php				/* translators: Between password field and private checkbox on post quick edit interface */				echo __( '&ndash;OR&ndash;' );				?>			</em>			<label class="alignleft inline-edit-private">				<input type="checkbox" name="keep_private" value="private" />				<span class="checkbox-title"><?php echo __('Private'); ?></span>			</label>		</div><?php endif; ?>	</div></fieldset><?php if ( count($hierarchical_taxonomies) && !$bulk ) : ?>	<fieldset class="inline-edit-col-center inline-edit-categories"><div class="inline-edit-col"><?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>		<span class="title inline-edit-categories-label"><?php echo esc_html($taxonomy->labels->name) ?>			<span class="catshow"><?php _e('[more]'); ?></span>			<span class="cathide" style="display:none;"><?php _e('[less]'); ?></span>		</span>		<input type="hidden" name="<?php echo ( $taxonomy->name == 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr($taxonomy->name) . '][]'; ?>" value="0" />		<ul class="cat-checklist <?php echo esc_attr($taxonomy->name)?>-checklist">			<?php wp_terms_checklist(null, array('taxonomy' => $taxonomy->name)) ?>		</ul><?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>	</div></fieldset><?php endif; // count($hierarchical_taxonomies) && !$bulk ?>	<fieldset class="inline-edit-col-right"><div class="inline-edit-col"><?php	if ( post_type_supports( $screen->post_type, 'author' ) && $bulk )		echo $authors_dropdown;?><?php if ( $post_type_object->hierarchical ) : ?>		<label>			<span class="title"><?php _e( 'Parent' ); ?></span><?php	$dropdown_args = array('post_type' => $post_type_object->name, 'selected' => $post->post_parent, 'name' => 'post_parent', 'show_option_none' => __('Main Page (no parent)'), 'option_none_value' => 0, 'sort_column'=> 'menu_order, post_title');	if ( $bulk )		$dropdown_args['show_option_no_change'] =  __('&mdash; No Change &mdash;');	$dropdown_args = apply_filters('quick_edit_dropdown_pages_args', $dropdown_args);	wp_dropdown_pages($dropdown_args);?>		</label><?php if ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :		if ( !$bulk ) : ?>		<label>			<span class="title"><?php _e( 'Order' ); ?></span>			<span class="input-text-wrap"><input type="text" name="menu_order" class="inline-edit-menu-order-input" value="<?php echo $post->menu_order ?>" /></span>		</label><?php	endif; // !$bulk ?>		<label>			<span class="title"><?php _e( 'Template' ); ?></span>			<select name="page_template"><?php	if ( $bulk ) : ?>				<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php	endif; // $bulk ?>				<option value="default"><?php _e( 'Default Template' ); ?></option>				<?php page_template_dropdown() ?>			</select>		</label><?php	endif; // post_type_supports page-attributesendif; // $post_type_object->hierarchical ?><?php if ( count($flat_taxonomies) && !$bulk ) : ?><?php foreach ( $flat_taxonomies as $taxonomy ) : ?>		<label class="inline-edit-tags">			<span class="title"><?php echo esc_html($taxonomy->labels->name) ?></span>			<textarea cols="22" rows="1" name="tax_input[<?php echo esc_attr($taxonomy->name)?>]" class="tax_input_<?php echo esc_attr($taxonomy->name)?>"></textarea>		</label><?php endforeach; //$flat_taxonomies as $taxonomy ?><?php endif; // count($flat_taxonomies) && !$bulk  ?><?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :	if ( $bulk ) : ?>		<div class="inline-edit-group">	<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>		<label class="alignleft">			<span class="title"><?php _e( 'Comments' ); ?></span>			<select name="comment_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>		<label class="alignright">			<span class="title"><?php _e( 'Pings' ); ?></span>			<select name="ping_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; ?>		</div><?php else : // $bulk ?>		<div class="inline-edit-group">		<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="comment_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Comments' ); ?></span>			</label>		<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="ping_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Pings' ); ?></span>			</label>		<?php endif; ?>		</div><?php endif; // $bulkendif; // post_type_supports comments or pings ?>		<div class="inline-edit-group">			<label class="inline-edit-status alignleft">				<span class="title"><?php _e( 'Status' ); ?></span>				<select name="_status"><?php if ( $bulk ) : ?>					<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php endif; // $bulk ?>				<?php if ( $can_publish ) : // Contributors only get "Unpublished" and "Pending Review" ?>					<option value="publish"><?php _e( 'Published' ); ?></option>					<option value="future"><?php _e( 'Scheduled' ); ?></option><?php if ( $bulk ) : ?>					<option value="private"><?php _e('Private') ?></option><?php endif; // $bulk ?>				<?php endif; ?>					<option value="pending"><?php _e( 'Pending Review' ); ?></option>					<option value="draft"><?php _e( 'Draft' ); ?></option>				</select>			</label><?php if ( 'post' == $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?><?php	if ( $bulk ) : ?>			<label class="alignright">				<span class="title"><?php _e( 'Sticky' ); ?></span>				<select name="sticky">					<option value="-1"><?php _e( '&mdash; No Change &mdash;' ); ?></option>					<option value="sticky"><?php _e( 'Sticky' ); ?></option>					<option value="unsticky"><?php _e( 'Not Sticky' ); ?></option>				</select>			</label><?php	else : // $bulk ?>			<label class="alignleft">				<input type="checkbox" name="sticky" value="sticky" />				<span class="checkbox-title"><?php _e( 'Make this post sticky' ); ?></span>			</label><?php	endif; // $bulk ?><?php endif; // !$is_page && $can_publish && current_user_can( 'edit_others_cap' ) ?>		</div>	</div></fieldset><?php	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( $bulk ? 'bulk_edit_custom_box' : 'quick_edit_custom_box', $column_name, $screen->post_type );	}?>	<p class="submit inline-edit-save">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="button-secondary cancel alignleft"><?php _e('Cancel'); ?></a>		<?php if ( ! $bulk ) {			wp_nonce_field( 'inlineeditnonce', '_inline_edit', false );			$update_text = __( 'Update' );			?>			<a accesskey="s" href="#inline-edit" title="<?php _e('Update'); ?>" class="button-primary save alignright"><?php echo esc_attr( $update_text ); ?></a>			<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<?php } else {			$update_text = __( 'Update' );		?>			<input accesskey="s" class="button-primary alignright" type="submit" name="bulk_edit" value="<?php echo esc_attr( $update_text ); ?>" />		<?php } ?>		<input type="hidden" name="post_view" value="<?php echo esc_attr($m); ?>" />		<input type="hidden" name="screen" value="<?php echo esc_attr($screen->id); ?>" />		<br class="clear" />	</p>	</td></tr><?php	$bulk++;	} ?>	</tbody></table></form><?php}// adds hidden fields with the data for use in the inline editor for posts and pages/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post */function get_inline_data($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( ! current_user_can($post_type_object->cap->edit_post, $post->ID) )		return;	$title = esc_attr( get_the_title( $post->ID ) );	echo '<div class="hidden" id="inline_' . $post->ID . '">	<div class="post_title">' . $title . '</div>	<div class="post_name">' . apply_filters('editable_slug', $post->post_name) . '</div>	<div class="post_author">' . $post->post_author . '</div>	<div class="comment_status">' . $post->comment_status . '</div>	<div class="ping_status">' . $post->ping_status . '</div>	<div class="_status">' . $post->post_status . '</div>	<div class="jj">' . mysql2date( 'd', $post->post_date, false ) . '</div>	<div class="mm">' . mysql2date( 'm', $post->post_date, false ) . '</div>	<div class="aa">' . mysql2date( 'Y', $post->post_date, false ) . '</div>	<div class="hh">' . mysql2date( 'H', $post->post_date, false ) . '</div>	<div class="mn">' . mysql2date( 'i', $post->post_date, false ) . '</div>	<div class="ss">' . mysql2date( 's', $post->post_date, false ) . '</div>	<div class="post_password">' . esc_html( $post->post_password ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="post_parent">' . $post->post_parent . '</div>';	if ( $post->post_type == 'page' )		echo '<div class="page_template">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="menu_order">' . $post->menu_order . '</div>';	$taxonomy_names = get_object_taxonomies( $post->post_type );	foreach ( $taxonomy_names as $taxonomy_name) {		$taxonomy = get_taxonomy( $taxonomy_name );		if ( $taxonomy->hierarchical && $taxonomy->show_ui )				echo '<div class="post_category" id="'.$taxonomy_name.'_'.$post->ID.'">' . implode( ',', wp_get_object_terms( $post->ID, $taxonomy_name, array('fields'=>'ids')) ) . '</div>';		elseif ( $taxonomy->show_ui )			echo '<div class="tags_input" id="'.$taxonomy_name.'_'.$post->ID.'">' . esc_html( str_replace( ',', ', ', get_terms_to_edit($post->ID, $taxonomy_name) ) ) . '</div>';	}	if ( !$post_type_object->hierarchical )		echo '<div class="sticky">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';	echo '</div>';}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $posts */function post_rows( $posts = array() ) {	global $wp_query, $post, $mode;	add_filter('the_title','esc_html');	// Create array of post IDs.	$post_ids = array();	if ( empty($posts) )		$posts = &$wp_query->posts;	foreach ( $posts as $a_post )		$post_ids[] = $a_post->ID;	$comment_pending_count = get_pending_comments_num($post_ids);	foreach ( $posts as $post ) {		if ( empty($comment_pending_count[$post->ID]) )			$comment_pending_count[$post->ID] = 0;		_post_row($post, $comment_pending_count[$post->ID], $mode);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $a_post * @param unknown_type $pending_comments * @param unknown_type $mode */function _post_row($a_post, $pending_comments, $mode) {	global $post, $current_user, $current_screen;	static $rowclass;	$global_post = $post;	$post = $a_post;	setup_postdata($post);	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );	$edit_link = get_edit_post_link( $post->ID );	$title = _draft_or_post_title();	$post_type_object = get_post_type_object($post->post_type);?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo trim( $rowclass . ' author-' . $post_owner . ' status-' . $post->post_status ); ?> iedit' valign="top"><?php	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns( $current_screen );	foreach ( $posts_columns as $column_name=>$column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {		case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $post->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;		case 'date':			if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {				$t_time = $h_time = __('Unpublished');				$time_diff = 0;			} else {				$t_time = get_the_time(__('Y/m/d g:i:s A'));				$m_time = $post->post_date;				$time = get_post_time('G', true, $post);				$time_diff = time() - $time;				if ( $time_diff > 0 && $time_diff < 24*60*60 )					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );				else					$h_time = mysql2date(__('Y/m/d'), $m_time);			}			echo '<td ' . $attributes . '>';			if ( 'excerpt' == $mode )				echo apply_filters('post_date_column_time', $t_time, $post, $column_name, $mode);			else				echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $post, $column_name, $mode) . '</abbr>';			echo '<br />';			if ( 'publish' == $post->post_status ) {				_e('Published');			} elseif ( 'future' == $post->post_status ) {				if ( $time_diff > 0 )					echo '<strong class="attention">' . __('Missed schedule') . '</strong>';				else					_e('Scheduled');			} else {				_e('Last Modified');			}			echo '</td>';		break;		case 'title':			$attributes = 'class="post-title column-title"' . $style;		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $title ?></a><?php } else { echo $title; }; _post_states($post); ?></strong>		<?php			if ( 'excerpt' == $mode )				the_excerpt();			$actions = array();			if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && 'trash' != $post->post_status ) {				$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '" title="' . esc_attr(__('Edit this item')) . '">' . __('Edit') . '</a>';				$actions['inline hide-if-no-js'] = '<a href="#" class="editinline" title="' . esc_attr(__('Edit this item inline')) . '">' . __('Quick&nbsp;Edit') . '</a>';			}			if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) {				if ( 'trash' == $post->post_status )					$actions['untrash'] = "<a title='" . esc_attr(__('Restore this item from the Trash')) . "' href='" . wp_nonce_url( admin_url( sprintf($post_type_object->_edit_link . '&amp;action=untrash', $post->ID) ), 'untrash-' . $post->post_type . '_' . $post->ID ) . "'>" . __('Restore') . "</a>";				elseif ( EMPTY_TRASH_DAYS )					$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this item to the Trash')) . "' href='" . get_delete_post_link($post->ID) . "'>" . __('Trash') . "</a>";				if ( 'trash' == $post->post_status || !EMPTY_TRASH_DAYS )					$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this item permanently')) . "' href='" . get_delete_post_link($post->ID, '', true) . "'>" . __('Delete Permanently') . "</a>";			}			if ( in_array($post->post_status, array('pending', 'draft')) ) {				if ( current_user_can($post_type_object->cap->edit_post, $post->ID) )					$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($post->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';			} elseif ( 'trash' != $post->post_status ) {				$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';			}			$actions = apply_filters('post_row_actions', $actions, $post);			$action_count = count($actions);			$i = 0;			echo '<div class="row-actions">';			foreach ( $actions as $action => $link ) {				++$i;				( $i == $action_count ) ? $sep = '' : $sep = ' | ';				echo "<span class='$action'>$link$sep</span>";			}			echo '</div>';			get_inline_data($post);		?>		</td>		<?php		break;		case 'categories':		?>		<td <?php echo $attributes ?>><?php			$categories = get_the_category();			if ( !empty( $categories ) ) {				$out = array();				foreach ( $categories as $c )					$out[] = "<a href='edit.php?category_name=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'category', 'display')) . "</a>";					echo join( ', ', $out );			} else {				_e('Uncategorized');			}		?></td>		<?php		break;		case 'tags':		?>		<td <?php echo $attributes ?>><?php			$tags = get_the_tags($post->ID);			if ( !empty( $tags ) ) {				$out = array();				foreach ( $tags as $c )					$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";				echo join( ', ', $out );			} else {				_e('No Tags');			}		?></td>		<?php		break;		case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php			$pending_phrase = sprintf( __('%s pending'), number_format( $pending_comments ) );			if ( $pending_comments )				echo '<strong>';				comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');				if ( $pending_comments )				echo '</strong>';		?>		</div></td>		<?php		break;		case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post->post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;		case 'control_view':		?>		<td><a href="<?php the_permalink(); ?>" rel="permalink" class="view"><?php _e('View'); ?></a></td>		<?php		break;		case 'control_edit':		?>		<td><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) ) { echo "<a href='$edit_link' class='edit'>" . __('Edit') . "</a>"; } ?></td>		<?php		break;		case 'control_delete':		?>		<td><?php if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) { echo "<a href='" . wp_nonce_url("post.php?action=delete&amp;post=$id", 'delete-post_' . $post->ID) . "' class='delete'>" . __('Delete') . "</a>"; } ?></td>		<?php		break;		default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_posts_custom_column', $column_name, $post->ID); ?></td>		<?php		break;	}}?>	</tr><?php	$post = $global_post;}/* * display one row if the page doesn't have any children * otherwise, display the row and its children in subsequent rows *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $level */function display_page_row( $page, $level = 0 ) {	global $post, $current_screen;	static $rowclass;	$post = $page;	setup_postdata($page);	if ( 0 == $level && (int)$page->post_parent > 0 ) {		//sent level 0 by accident, by default, or because we don't know the actual level		$find_main_page = (int)$page->post_parent;		while ( $find_main_page > 0 ) {			$parent = get_page($find_main_page);			if ( is_null($parent) )				break;			$level++;			$find_main_page = (int)$parent->post_parent;			if ( !isset($parent_name) )				$parent_name = $parent->post_title;		}	}	$page->post_title = esc_html( $page->post_title );	$pad = str_repeat( '&#8212; ', $level );	$id = (int) $page->ID;	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns(  $current_screen );	$title = _draft_or_post_title();	$post_type = $page->post_type;	$post_type_object = get_post_type_object($post_type);?><tr id="page-<?php echo $id; ?>" class="<?php echo $rowclass; ?> iedit"><?phpforeach ( $posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch ($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $page->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $page->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');			$time_diff = 0;		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $page->post_date;			$time = get_post_time('G', true);			$time_diff = time() - $time;			if ( $time_diff > 0 && $time_diff < 24*60*60 )				$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			else				$h_time = mysql2date(__('Y/m/d'), $m_time);		}		echo '<td ' . $attributes . '>';		echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $page, $column_name, '') . '</abbr>';		echo '<br />';		if ( 'publish' == $page->post_status ) {			_e('Published');		} elseif ( 'future' == $page->post_status ) {			if ( $time_diff > 0 )				echo '<strong class="attention">' . __('Missed schedule') . '</strong>';			else				_e('Scheduled');		} else {			_e('Last Modified');		}		echo '</td>';		break;	case 'title':		$attributes = 'class="post-title page-title column-title"' . $style;		$edit_link = get_edit_post_link( $page->ID );		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $pad; echo $title ?></a><?php } else { echo $pad; echo $title; }; _post_states($page); echo isset($parent_name) ? ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html($parent_name) : ''; ?></strong>		<?php		$actions = array();		if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) {			$actions['edit'] = '<a href="' . $edit_link . '" title="' . esc_attr(__('Edit this page')) . '">' . __('Edit') . '</a>';			$actions['inline'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		}		if ( current_user_can($post_type_object->cap->delete_post, $page->ID) ) {			if ( $post->post_status == 'trash' )				$actions['untrash'] = "<a title='" . esc_attr(__('Remove this page from the Trash')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=untrash&amp;post=$page->ID", 'untrash-' . $post->post_type . '_' . $page->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS )				$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this page to the Trash')) . "' href='" . get_delete_post_link($page->ID) . "'>" . __('Trash') . "</a>";			if ( $post->post_status == 'trash' || !EMPTY_TRASH_DAYS )				$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this page permanently')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=delete&amp;post=$page->ID", 'delete-' . $post->post_type . '_' . $page->ID) . "'>" . __('Delete Permanently') . "</a>";		}		if ( in_array($post->post_status, array('pending', 'draft')) ) {			if ( current_user_can($post_type_object->cap->edit_post, $page->ID) )				$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($page->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';		} elseif ( $post->post_status != 'trash' ) {			$actions['view'] = '<a href="' . get_permalink($page->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters('page_row_actions', $actions, $page);		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		get_inline_data($post);		echo '</td>';		break;	case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $page->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_pages_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?></tr><?php}/* * displays pages in hierarchical order with paging support *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $pages * @param unknown_type $pagenum * @param unknown_type $per_page * @return unknown */function page_rows($pages, $pagenum = 1, $per_page = 20) {	global $wpdb;	$level = 0;	if ( ! $pages ) {		$pages = get_pages( array('sort_column' => 'menu_order') );		if ( ! $pages )			return false;	}	/*	 * arrange pages into two parts: top level pages and children_pages	 * children_pages is two dimensional array, eg.	 * children_pages[10][] contains all sub-pages whose parent is 10.	 * It only takes O(N) to arrange this and it takes O(1) for subsequent lookup operations	 * If searching, ignore hierarchy and treat everything as top level	 */	if ( empty($_GET['s']) ) {		$top_level_pages = array();		$children_pages = array();		foreach ( $pages as $page ) {			// catch and repair bad pages			if ( $page->post_parent == $page->ID ) {				$page->post_parent = 0;				$wpdb->update($wpdb->posts, array('post_parent' => 0), array('ID' => $page->ID));				clean_page_cache( $page->ID );			}			if ( 0 == $page->post_parent )				$top_level_pages[] = $page;			else				$children_pages[ $page->post_parent ][] = $page;		}		$pages = &$top_level_pages;	}	$count = 0;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $pages as $page ) {		if ( $count >= $end )			break;		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		if ( isset($children_pages) )			_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	// if it is the last pagenum and there are orphaned pages, display them with paging as well	if ( isset($children_pages) && $count < $end ){		foreach( $children_pages as $orphans ){			foreach ( $orphans as $op ) {				if ( $count >= $end )					break;				if ( $count >= $start )					echo "\t" . display_page_row( $op, 0 );				$count++;			}		}	}}/** * Given a top level page ID, display the nested hierarchy of sub-pages * together with paging support * * @since unknown * * @param unknown_type $children_pages * @param unknown_type $count * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $pagenum * @param unknown_type $per_page */function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page ) {	if ( ! isset( $children_pages[$parent] ) )		return;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $children_pages[$parent] as $page ) {		if ( $count >= $end )			break;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $page->post_parent > 0 ) {			$my_parents = array();			$my_parent = $page->post_parent;			while ( $my_parent) {				$my_parent = get_post($my_parent);				$my_parents[] = $my_parent;				if ( !$my_parent->post_parent )					break;				$my_parent = $my_parent->post_parent;			}			$num_parents = count($my_parents);			while( $my_parent = array_pop($my_parents) ) {				echo "\t" . display_page_row( $my_parent, $level - $num_parents );				$num_parents--;			}		}		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	unset( $children_pages[$parent] ); //required in order to keep track of orphans}/** * Generate HTML for a single row on the users.php admin panel. * * @since 2.1.0 * * @param object $user_object * @param string $style Optional. Attributes added to the TR element.  Must be sanitized. * @param string $role Key for the $wp_roles array. * @param int $numposts Optional. Post count to display for this user.  Defaults to zero, as in, a new user has made zero posts. * @return string */function user_row( $user_object, $style = '', $role = '', $numposts = 0 ) {	global $wp_roles;	$current_user = wp_get_current_user();	if ( !( is_object( $user_object) && is_a( $user_object, 'WP_User' ) ) )		$user_object = new WP_User( (int) $user_object );	$user_object = sanitize_user_object($user_object, 'display');	$email = $user_object->user_email;	$url = $user_object->user_url;	$short_url = str_replace( 'http://', '', $url );	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	$checkbox = '';	// Check if the user for this row is editable	if ( current_user_can( 'list_users' ) ) {		// Set up the user editing link		// TODO: make profile/user-edit determination a separate function		if ($current_user->ID == $user_object->ID) {			$edit_link = 'profile.php';		} else {			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( esc_url( stripslashes( $_SERVER['REQUEST_URI'] ) ) ), "user-edit.php?user_id=$user_object->ID" ) );		}		$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";		// Set up the hover actions for this user		$actions = array();		if ( current_user_can('edit_user',  $user_object->ID) ) {			$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";			$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		} else {			$edit = "<strong>$user_object->user_login</strong><br />";		}		if ( !is_multisite() && $current_user->ID != $user_object->ID && current_user_can('delete_user', $user_object->ID) )			$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=delete&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Delete') . "</a>";		if ( is_multisite() && $current_user->ID != $user_object->ID && current_user_can('remove_user', $user_object->ID) )			$actions['remove'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=remove&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Remove') . "</a>";		$actions = apply_filters('user_row_actions', $actions, $user_object);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';		// Set up the checkbox (because the user is editable, otherwise its empty)		$checkbox = "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />";	} else {		$edit = '<strong>' . $user_object->user_login . '</strong>';	}	$role_name = isset($wp_roles->role_names[$role]) ? translate_user_role($wp_roles->role_names[$role] ) : __('None');	$r = "<tr id='user-$user_object->ID'$style>";	$columns = get_column_headers('users');	$hidden = get_hidden_columns('users');	$avatar = get_avatar( $user_object->ID, 32 );	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$r .= "<th scope='row' class='check-column'>$checkbox</th>";				break;			case 'username':				$r .= "<td $attributes>$avatar $edit</td>";				break;			case 'name':				$r .= "<td $attributes>$user_object->first_name $user_object->last_name</td>";				break;			case 'email':				$r .= "<td $attributes><a href='mailto:$email' title='" . sprintf( __('E-mail: %s' ), $email ) . "'>$email</a></td>";				break;			case 'role':				$r .= "<td $attributes>$role_name</td>";				break;			case 'posts':				$attributes = 'class="posts column-posts num"' . $style;				$r .= "<td $attributes>";				if ( $numposts > 0 ) {					$r .= "<a href='edit.php?author=$user_object->ID' title='" . __( 'View posts by this author' ) . "' class='edit'>";					$r .= $numposts;					$r .= '</a>';				} else {					$r .= 0;				}				$r .= "</td>";				break;			default:				$r .= "<td $attributes>";				$r .= apply_filters('manage_users_custom_column', '', $column_name, $user_object->ID);				$r .= "</td>";		}	}	$r .= '</tr>';	return $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param string $status Comment status (approved, spam, trash, etc) * @param string $s Term to search for * @param int $start Offset to start at for pagination * @param int $num Maximum number of comments to return * @param int $post Post ID or 0 to return all comments * @param string $type Comment type (comment, trackback, pingback, etc) * @return array [0] contains the comments and [1] contains the total number of comments that match (ignoring $start and $num) */function _wp_get_comment_list( $status = '', $s = false, $start, $num, $post = 0, $type = '' ) {	global $wpdb;	$start = abs( (int) $start );	$num = (int) $num;	$post = (int) $post;	$count = wp_count_comments();	$index = '';	if ( 'moderated' == $status ) {		$approved = "c.comment_approved = '0'";		$total = $count->moderated;	} elseif ( 'approved' == $status ) {		$approved = "c.comment_approved = '1'";		$total = $count->approved;	} elseif ( 'spam' == $status ) {		$approved = "c.comment_approved = 'spam'";		$total = $count->spam;	} elseif ( 'trash' == $status ) {		$approved = "c.comment_approved = 'trash'";		$total = $count->trash;	} else {		$approved = "( c.comment_approved = '0' OR c.comment_approved = '1' )";		$total = $count->moderated + $count->approved;		$index = 'USE INDEX (c.comment_date_gmt)';	}	if ( $post ) {		$total = '';		$post = " AND c.comment_post_ID = '$post'";	} else {		$post = '';	}	$orderby = "ORDER BY c.comment_date_gmt DESC LIMIT $start, $num";	if ( 'comment' == $type )		$typesql = "AND c.comment_type = ''";	elseif ( 'pings' == $type )		$typesql = "AND ( c.comment_type = 'pingback' OR c.comment_type = 'trackback' )";	elseif ( 'all' == $type )		$typesql = '';	elseif ( !empty($type) )		$typesql = $wpdb->prepare("AND c.comment_type = %s", $type);	else		$typesql = '';	if ( !empty($type) )		$total = '';	$query = "FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ";	if ( $s ) {		$total = '';		$s = $wpdb->escape($s);		$query .= "AND			(c.comment_author LIKE '%$s%' OR			c.comment_author_email LIKE '%$s%' OR			c.comment_author_url LIKE ('%$s%') OR			c.comment_author_IP LIKE ('%$s%') OR			c.comment_content LIKE ('%$s%') ) AND			$approved			$typesql";	} else {		$query .= "AND $approved $post $typesql";	}	$comments = $wpdb->get_results("SELECT * $query $orderby");	if ( '' === $total )		$total = $wpdb->get_var("SELECT COUNT(c.comment_ID) $query");	update_comment_cache($comments);	return array($comments, $total);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $comment_id * @param unknown_type $mode * @param unknown_type $comment_status * @param unknown_type $checkbox */function _wp_comment_row( $comment_id, $mode, $comment_status, $checkbox = true, $from_ajax = false ) {	global $comment, $post, $_comment_pending_count;	$comment = get_comment( $comment_id );	$post = get_post($comment->comment_post_ID);	$the_comment_status = wp_get_comment_status($comment->comment_ID);	$post_type_object = get_post_type_object($post->post_type);	$user_can = current_user_can($post_type_object->cap->edit_post, $post->ID);	$comment_url = esc_url(get_comment_link($comment->comment_ID));	$author_url = get_comment_author_url();	if ( 'http://' == $author_url )		$author_url = '';	$author_url_display = preg_replace('|http://(www\.)?|i', '', $author_url);	if ( strlen($author_url_display) > 50 )		$author_url_display = substr($author_url_display, 0, 49) . '...';	$ptime = date('G', strtotime( $comment->comment_date ) );	if ( ( abs(time() - $ptime) ) < 86400 )		$ptime = sprintf( __('%s ago'), human_time_diff( $ptime ) );	else		$ptime = mysql2date(__('Y/m/d \a\t g:i A'), $comment->comment_date );	if ( $user_can ) {		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$unspam_url = esc_url( "comment.php?action=unspamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$untrash_url = esc_url( "comment.php?action=untrashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );	}	echo "<tr id='comment-$comment->comment_ID' class='$the_comment_status'>";	$columns = get_column_headers('edit-comments');	$hidden = get_hidden_columns('edit-comments');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				if ( !$checkbox ) break;				echo '<th scope="row" class="check-column">';				if ( $user_can ) echo "<input type='checkbox' name='delete_comments[]' value='$comment->comment_ID' />";				echo '</th>';				break;			case 'comment':				echo "<td $attributes>";				echo '<div id="submitted-on">';				/* translators: 2: comment date, 3: comment time */				printf( __( '<a href="%1$s">%2$s at %3$s</a>' ), $comment_url,					/* translators: comment date format. See http://php.net/date */ get_comment_date( __('Y/m/d') ),					/* translators: comment time format. See http://php.net/date */ get_comment_date( get_option( 'time_format' ) ) );				if ( $comment->comment_parent ) {					$parent = get_comment( $comment->comment_parent );					$parent_link = esc_url( get_comment_link( $comment->comment_parent ) );					$name = apply_filters( 'get_comment_author', $parent->comment_author ); // there's no API function for this					printf( ' | '.__( 'In reply to <a href="%1$s">%2$s</a>.' ), $parent_link, $name );				}				echo '</div>';				comment_text();				if ( $user_can ) { ?>				<div id="inline-<?php echo $comment->comment_ID; ?>" class="hidden">				<textarea class="comment" rows="1" cols="1"><?php echo htmlspecialchars( apply_filters('comment_edit_pre', $comment->comment_content), ENT_QUOTES ); ?></textarea>				<div class="author-email"><?php echo esc_attr( $comment->comment_author_email ); ?></div>				<div class="author"><?php echo esc_attr( $comment->comment_author ); ?></div>				<div class="author-url"><?php echo esc_attr( $comment->comment_author_url ); ?></div>				<div class="comment_status"><?php echo $comment->comment_approved; ?></div>				</div>				<?php				}				if ( $user_can ) {					// preorder it: Approve | Reply | Quick Edit | Edit | Spam | Trash					$actions = array(						'approve' => '', 'unapprove' => '',						'reply' => '',						'quickedit' => '',						'edit' => '',						'spam' => '', 'unspam' => '',						'trash' => '', 'untrash' => '', 'delete' => ''					);					if ( $comment_status && 'all' != $comment_status ) { // not looking at all comments						if ( 'approved' == $the_comment_status )							$actions['unapprove'] = "<a href='$unapprove_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=unapproved vim-u vim-destructive' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';						else if ( 'unapproved' == $the_comment_status )							$actions['approve'] = "<a href='$approve_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=approved vim-a vim-destructive' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';					} else {						$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';						$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';					}					if ( 'spam' != $the_comment_status && 'trash' != $the_comment_status ) {						$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . esc_attr__( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */ _x( 'Spam', 'verb' ) . '</a>';					} elseif ( 'spam' == $the_comment_status ) {						$actions['unspam'] = "<a href='$unspam_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:unspam=1 vim-z vim-destructive'>" . _x( 'Not Spam', 'comment' ) . '</a>';					} elseif ( 'trash' == $the_comment_status ) {						$actions['untrash'] = "<a href='$untrash_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:untrash=1 vim-z vim-destructive'>" . __( 'Restore' ) . '</a>';					}					if ( 'spam' == $the_comment_status || 'trash' == $the_comment_status || !EMPTY_TRASH_DAYS ) {						$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::delete=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';					} else {						$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . esc_attr__( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';					}					if ( 'trash' != $the_comment_status ) {						$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . esc_attr__('Edit comment') . "'>". __('Edit') . '</a>';						$actions['quickedit'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\',\'edit\');return false;" class="vim-q" title="'.esc_attr__('Quick Edit').'" href="#">' . __('Quick&nbsp;Edit') . '</a>';						if ( 'spam' != $the_comment_status )							$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\');return false;" class="vim-r" title="'.esc_attr__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';					}					$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';						// Reply and quickedit need a hide-if-no-js span when not added with ajax						if ( ('reply' == $action || 'quickedit' == $action) && ! $from_ajax )							$action .= ' hide-if-no-js';						elseif ( ($action == 'untrash' && $the_comment_status == 'trash') || ($action == 'unspam' && $the_comment_status == 'spam') ) {							if ('1' == get_comment_meta($comment_id, '_wp_trash_meta_status', true))								$action .= ' approve';							else								$action .= ' unapprove';						}						echo "<span class='$action'>$sep$link</span>";					}					echo '</div>';				}				echo '</td>';				break;			case 'author':				echo "<td $attributes><strong>"; comment_author(); echo '</strong><br />';				if ( !empty($author_url) )					echo "<a title='$author_url' href='$author_url'>$author_url_display</a><br />";				if ( $user_can ) {					if ( !empty($comment->comment_author_email) ) {						comment_author_email_link();						echo '<br />';					}					echo '<a href="edit-comments.php?s=';					comment_author_IP();					echo '&amp;mode=detail';					if ( 'spam' == $comment_status )						echo '&amp;comment_status=spam';					echo '">';					comment_author_IP();					echo '</a>';				} //current_user_can				echo '</td>';				break;			case 'date':				echo "<td $attributes>" . get_comment_date(__('Y/m/d \a\t g:ia')) . '</td>';				break;			case 'response':				if ( 'single' !== $mode ) {					if ( isset( $_comment_pending_count[$post->ID] ) ) {						$pending_comments = $_comment_pending_count[$post->ID];					} else {						$_comment_pending_count_temp = get_pending_comments_num( array( $post->ID ) );						$pending_comments = $_comment_pending_count[$post->ID] = $_comment_pending_count_temp[$post->ID];					}					if ( $user_can ) {						$post_link = "<a href='" . get_edit_post_link($post->ID) . "'>";						$post_link .= get_the_title($post->ID) . '</a>';					} else {						$post_link = get_the_title($post->ID);					}					echo "<td $attributes>\n";					echo '<div class="response-links"><span class="post-com-count-wrapper">';					echo $post_link . '<br />';					$pending_phrase = esc_attr(sprintf( __('%s pending'), number_format( $pending_comments ) ));					if ( $pending_comments )						echo '<strong>';					comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');					if ( $pending_comments )						echo '</strong>';					echo '</span> ';					echo "<a href='" . get_permalink( $post->ID ) . "'>#</a>";					echo '</div>';					if ( 'attachment' == $post->post_type && ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) )						echo $thumb;					echo '</td>';				}				break;			default:				echo "<td $attributes>\n";				do_action( 'manage_comments_custom_column', $column_name, $comment->comment_ID );				echo "</td>\n";				break;		}	}	echo "</tr>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $position * @param unknown_type $checkbox * @param unknown_type $mode */function wp_comment_reply($position = '1', $checkbox = false, $mode = 'single', $table_row = true) {	global $current_user;	// allow plugin to replace the popup content	$content = apply_filters( 'wp_comment_reply', '', array('position' => $position, 'checkbox' => $checkbox, 'mode' => $mode) );	if ( ! empty($content) ) {		echo $content;		return;	}	$columns = get_column_headers('edit-comments');	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns('edit-comments') ) );	$col_count = count($columns) - count($hidden);?><form method="get" action=""><?php if ( $table_row ) : ?><table style="display:none;"><tbody id="com-reply"><tr id="replyrow" style="display:none;"><td colspan="<?php echo $col_count; ?>"><?php else : ?><div id="com-reply" style="display:none;"><div id="replyrow" style="display:none;"><?php endif; ?>	<div id="replyhead" style="display:none;"><?php _e('Reply to Comment'); ?></div>	<div id="edithead" style="display:none;">		<div class="inside">		<label for="author"><?php _e('Name') ?></label>		<input type="text" name="newcomment_author" size="50" value="" tabindex="101" id="author" />		</div>		<div class="inside">		<label for="author-email"><?php _e('E-mail') ?></label>		<input type="text" name="newcomment_author_email" size="50" value="" tabindex="102" id="author-email" />		</div>		<div class="inside">		<label for="author-url"><?php _e('URL') ?></label>		<input type="text" id="author-url" name="newcomment_author_url" size="103" value="" tabindex="103" />		</div>		<div style="clear:both;"></div>	</div>	<div id="replycontainer"><textarea rows="8" cols="40" name="replycontent" tabindex="104" id="replycontent"></textarea></div>	<p id="replysubmit" class="submit">	<a href="#comments-form" class="cancel button-secondary alignleft" tabindex="106"><?php _e('Cancel'); ?></a>	<a href="#comments-form" class="save button-primary alignright" tabindex="104">	<span id="savebtn" style="display:none;"><?php _e('Update Comment'); ?></span>	<span id="replybtn" style="display:none;"><?php _e('Submit Reply'); ?></span></a>	<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />	<span class="error" style="display:none;"></span>	<br class="clear" />	</p>	<input type="hidden" name="user_ID" id="user_ID" value="<?php echo $current_user->ID; ?>" />	<input type="hidden" name="action" id="action" value="" />	<input type="hidden" name="comment_ID" id="comment_ID" value="" />	<input type="hidden" name="comment_post_ID" id="comment_post_ID" value="" />	<input type="hidden" name="status" id="status" value="" />	<input type="hidden" name="position" id="position" value="<?php echo $position; ?>" />	<input type="hidden" name="checkbox" id="checkbox" value="<?php echo $checkbox ? 1 : 0; ?>" />	<input type="hidden" name="mode" id="mode" value="<?php echo esc_attr($mode); ?>" />	<?php wp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false ); ?>	<?php wp_comment_form_unfiltered_html_nonce(); ?><?php if ( $table_row ) : ?></td></tr></tbody></table><?php else : ?></div></div><?php endif; ?></form><?php}/** * Output 'undo move to trash' text for comments * * @since 2.9.0 */function wp_comment_trashnotice() {?><div class="hidden" id="trash-undo-holder">	<div class="trash-undo-inside"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class="undo untrash"><a href="#"><?php _e('Undo'); ?></a></span></div></div><div class="hidden" id="spam-undo-holder">	<div class="spam-undo-inside"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class="undo unspam"><a href="#"><?php _e('Undo'); ?></a></span></div></div><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta */function list_meta( $meta ) {	// Exit if no meta	if ( ! $meta ) {		echo '<table id="list-table" style="display: none;">	<thead>	<tr>		<th class="left">' . __( 'Name' ) . '</th>		<th>' . __( 'Value' ) . '</th>	</tr>	</thead>	<tbody id="the-list" class="list:meta">	<tr><td></td></tr>	</tbody></table>'; //TBODY needed for list-manipulation JS		return;	}	$count = 0;?><table id="list-table">	<thead>	<tr>		<th class="left"><?php _e( 'Name' ) ?></th>		<th><?php _e( 'Value' ) ?></th>	</tr>	</thead>	<tbody id='the-list' class='list:meta'><?php	foreach ( $meta as $entry )		echo _list_meta_row( $entry, $count );?>	</tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $entry * @param unknown_type $count * @return unknown */function _list_meta_row( $entry, &$count ) {	static $update_nonce = false;	if ( !$update_nonce )		$update_nonce = wp_create_nonce( 'add-meta' );	$r = '';	++ $count;	if ( $count % 2 )		$style = 'alternate';	else		$style = '';	if ('_' == $entry['meta_key'] { 0 } )		$style .= ' hidden';	if ( is_serialized( $entry['meta_value'] ) ) {		if ( is_serialized_string( $entry['meta_value'] ) ) {			// this is a serialized string, so we should display it			$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );		} else {			// this is a serialized array/object so we should NOT display it			--$count;			return;		}	}	$entry['meta_key'] = esc_attr($entry['meta_key']);	$entry['meta_value'] = htmlspecialchars($entry['meta_value']); // using a <textarea />	$entry['meta_id'] = (int) $entry['meta_id'];	$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );	$r .= "\n\t<tr id='meta-{$entry['meta_id']}' class='$style'>";	$r .= "\n\t\t<td class='left'><label class='screen-reader-text' for='meta[{$entry['meta_id']}][key]'>" . __( 'Key' ) . "</label><input name='meta[{$entry['meta_id']}][key]' id='meta[{$entry['meta_id']}][key]' tabindex='6' type='text' size='20' value='{$entry['meta_key']}' />";	$r .= "\n\t\t<div class='submit'><input name='deletemeta[{$entry['meta_id']}]' type='submit' ";	$r .= "class='delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce deletemeta' tabindex='6' value='". esc_attr__( 'Delete' ) ."' />";	$r .= "\n\t\t<input name='updatemeta' type='submit' tabindex='6' value='". esc_attr__( 'Update' ) ."' class='add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce updatemeta' /></div>";	$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );	$r .= "</td>";	$r .= "\n\t\t<td><label class='screen-reader-text' for='meta[{$entry['meta_id']}][value]'>" . __( 'Value' ) . "</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta[{$entry['meta_id']}][value]' tabindex='6' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\n\t</tr>";	return $r;}/** * {@internal Missing Short Description}} * * @since unknown */function meta_form() {	global $wpdb;	$limit = (int) apply_filters( 'postmeta_form_limit', 30 );	$keys = $wpdb->get_col( "		SELECT meta_key		FROM $wpdb->postmeta		GROUP BY meta_key		HAVING meta_key NOT LIKE '\_%'		ORDER BY meta_key		LIMIT $limit" );	if ( $keys )		natcasesort($keys);?><p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p><table id="newmeta"><thead><tr><th class="left"><label for="metakeyselect"><?php _e( 'Name' ) ?></label></th><th><label for="metavalue"><?php _e( 'Value' ) ?></label></th></tr></thead><tbody><tr><td id="newmetaleft" class="left"><?php if ( $keys ) { ?><select id="metakeyselect" name="metakeyselect" tabindex="7"><option value="#NONE#"><?php _e( '&mdash; Select &mdash;' ); ?></option><?php	foreach ( $keys as $key ) {		echo "\n<option value='" . esc_attr($key) . "'>" . esc_html($key) . "</option>";	}?></select><input class="hide-if-js" type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><a href="#postcustomstuff" class="hide-if-no-js" onclick="jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;"><span id="enternew"><?php _e('Enter new'); ?></span><span id="cancelnew" class="hidden"><?php _e('Cancel'); ?></span></a><?php } else { ?><input type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><?php } ?></td><td><textarea id="metavalue" name="metavalue" rows="2" cols="25" tabindex="8"></textarea></td></tr><tr><td colspan="2" class="submit"><input type="submit" id="addmetasub" name="addmeta" class="add:the-list:newmeta" tabindex="9" value="<?php esc_attr_e( 'Add Custom Field' ) ?>" /><?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?></td></tr></tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $edit * @param unknown_type $for_post * @param unknown_type $tab_index * @param unknown_type $multi */function touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {	global $wp_locale, $post, $comment;	if ( $for_post )		$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	// echo '<label for="timestamp" style="display: block;"><input type="checkbox" class="checkbox" name="edit_date" value="1" id="timestamp"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';	$time_adj = current_time('timestamp');	$post_date = ($for_post) ? $post->post_date : $comment->comment_date;	$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );	$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );	$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );	$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );	$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );	$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );	$cur_jj = gmdate( 'd', $time_adj );	$cur_mm = gmdate( 'm', $time_adj );	$cur_aa = gmdate( 'Y', $time_adj );	$cur_hh = gmdate( 'H', $time_adj );	$cur_mn = gmdate( 'i', $time_adj );	$month = "<select " . ( $multi ? '' : 'id="mm" ' ) . "name=\"mm\"$tab_index_attribute>\n";	for ( $i = 1; $i < 13; $i = $i +1 ) {		$month .= "\t\t\t" . '<option value="' . zeroise($i, 2) . '"';		if ( $i == $mm )			$month .= ' selected="selected"';		$month .= '>' . $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) ) . "</option>\n";	}	$month .= '</select>';	$day = '<input type="text" ' . ( $multi ? '' : 'id="jj" ' ) . 'name="jj" value="' . $jj . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$year = '<input type="text" ' . ( $multi ? '' : 'id="aa" ' ) . 'name="aa" value="' . $aa . '" size="4" maxlength="4"' . $tab_index_attribute . ' autocomplete="off" />';	$hour = '<input type="text" ' . ( $multi ? '' : 'id="hh" ' ) . 'name="hh" value="' . $hh . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$minute = '<input type="text" ' . ( $multi ? '' : 'id="mn" ' ) . 'name="mn" value="' . $mn . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	echo '<div class="timestamp-wrap">';	/* translators: 1: month input, 2: day input, 3: year input, 4: hour input, 5: minute input */	printf(__('%1$s%2$s, %3$s @ %4$s : %5$s'), $month, $day, $year, $hour, $minute);	echo '</div><input type="hidden" id="ss" name="ss" value="' . $ss . '" />';	if ( $multi ) return;	echo "\n\n";	foreach ( array('mm', 'jj', 'aa', 'hh', 'mn') as $timeunit ) {		echo '<input type="hidden" id="hidden_' . $timeunit . '" name="hidden_' . $timeunit . '" value="' . $$timeunit . '" />' . "\n";		$cur_timeunit = 'cur_' . $timeunit;		echo '<input type="hidden" id="'. $cur_timeunit . '" name="'. $cur_timeunit . '" value="' . $$cur_timeunit . '" />' . "\n";	}?><p><a href="#edit_timestamp" class="save-timestamp hide-if-no-js button"><?php _e('OK'); ?></a><a href="#edit_timestamp" class="cancel-timestamp hide-if-no-js"><?php _e('Cancel'); ?></a></p><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default */function page_template_dropdown( $default = '' ) {	$templates = get_page_templates();	ksort( $templates );	foreach (array_keys( $templates ) as $template )		: if ( $default == $templates[$template] )			$selected = " selected='selected'";		else			$selected = '';	echo "\n\t<option value='".$templates[$template]."' $selected>$template</option>";	endforeach;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $level * @return unknown */function parent_dropdown( $default = 0, $parent = 0, $level = 0 ) {	global $wpdb, $post_ID;	$items = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order", $parent) );	if ( $items ) {		foreach ( $items as $item ) {			// A page cannot be its own parent.			if (!empty ( $post_ID ) ) {				if ( $item->ID == $post_ID ) {					continue;				}			}			$pad = str_repeat( '&nbsp;', $level * 3 );			if ( $item->ID == $default)				$current = ' selected="selected"';			else				$current = '';			echo "\n\t<option class='level-$level' value='$item->ID'$current>$pad " . esc_html($item->post_title) . "</option>";			parent_dropdown( $default, $item->ID, $level +1 );		}	} else {		return false;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function the_attachment_links( $id = false ) {	$id = (int) $id;	$post = & get_post( $id );	if ( $post->post_type != 'attachment' )		return false;	$icon = wp_get_attachment_image( $post->ID, 'thumbnail', true );	$attachment_data = wp_get_attachment_metadata( $id );	$thumb = isset( $attachment_data['thumb'] );?><form id="the-attachment-links"><table>	<col />	<col class="widefat" />	<tr>		<th scope="row"><?php _e( 'URL' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><?php echo wp_get_attachment_url(); ?></textarea></td>	</tr><?php if ( $icon ) : ?>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to file' ) : _e( 'Image linked to file' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>"><?php echo $icon ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to page' ) : _e( 'Image linked to page' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID; ?>"><?php echo $icon ?></a></textarea></td>	</tr><?php else : ?>	<tr>		<th scope="row"><?php _e( 'Link to file' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>" class="attachmentlink"><?php echo basename( wp_get_attachment_url() ); ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php _e( 'Link to page' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID ?>"><?php the_title(); ?></a></textarea></td>	</tr><?php endif; ?></table></form><?php}/** * Print out <option> html elements for role selectors based on $wp_roles * * @package WordPress * @subpackage Administration * @since 2.1 * * @uses $wp_roles * @param string $default slug for the role that should be already selected */function wp_dropdown_roles( $selected = false ) {	$p = '';	$r = '';	$editable_roles = get_editable_roles();	foreach ( $editable_roles as $role => $details ) {		$name = translate_user_role($details['name'] );		if ( $selected == $role ) // Make default first in list			$p = "\n\t<option selected='selected' value='" . esc_attr($role) . "'>$name</option>";		else			$r .= "\n\t<option value='" . esc_attr($role) . "'>$name</option>";	}	echo $p . $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $size * @return unknown */function wp_convert_hr_to_bytes( $size ) {	$size = strtolower($size);	$bytes = (int) $size;	if ( strpos($size, 'k') !== false )		$bytes = intval($size) * 1024;	elseif ( strpos($size, 'm') !== false )		$bytes = intval($size) * 1024 * 1024;	elseif ( strpos($size, 'g') !== false )		$bytes = intval($size) * 1024 * 1024 * 1024;	return $bytes;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $bytes * @return unknown */function wp_convert_bytes_to_hr( $bytes ) {	$units = array( 0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB' );	$log = log( $bytes, 1024 );	$power = (int) $log;	$size = pow(1024, $log - $power);	return $size . $units[$power];}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_max_upload_size() {	$u_bytes = wp_convert_hr_to_bytes( ini_get( 'upload_max_filesize' ) );	$p_bytes = wp_convert_hr_to_bytes( ini_get( 'post_max_size' ) );	$bytes = apply_filters( 'upload_size_limit', min($u_bytes, $p_bytes), $u_bytes, $p_bytes );	return $bytes;}/** * Outputs the form used by the importers to accept the data to be imported * * @since 2.0 * * @param string $action The action attribute for the form. */function wp_import_upload_form( $action ) {	$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );	$size = wp_convert_bytes_to_hr( $bytes );	$upload_dir = wp_upload_dir();	if ( ! empty( $upload_dir['error'] ) ) :		?><div class="error"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>		<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php	else :?><form enctype="multipart/form-data" id="import-upload-form" method="post" action="<?php echo esc_attr(wp_nonce_url($action, 'import-upload')); ?>"><p><label for="upload"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)<input type="file" id="upload" name="import" size="25" /><input type="hidden" name="action" value="save" /><input type="hidden" name="max_file_size" value="<?php echo $bytes; ?>" /></p><p class="submit"><input type="submit" class="button" value="<?php esc_attr_e( 'Upload file and import' ); ?>" /></p></form><?php	endif;}/** * Add a meta box to an edit form. * * @since 2.5.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $title Title of the meta box. * @param string $callback Function that fills the box with the desired content. The function should echo its output. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). * @param string $priority The priority within the context where the boxes should show ('high', 'low'). */function add_meta_box($id, $title, $callback, $page, $context = 'advanced', $priority = 'default', $callback_args=null) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {	foreach ( array('high', 'core', 'default', 'low') as $a_priority ) {		if ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )			continue;		// If a core box was previously added or removed by a plugin, don't add.		if ( 'core' == $priority ) {			// If core box previously deleted, don't add			if ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )				return;			// If box was added with default priority, give it core priority to maintain sort order			if ( 'default' == $a_priority ) {				$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];				unset($wp_meta_boxes[$page][$a_context]['default'][$id]);			}			return;		}		// If no priority given and id already present, use existing priority		if ( empty($priority) ) {			$priority = $a_priority;		// else if we're adding to the sorted priortiy, we don't know the title or callback. Glab them from the previously added context/priority.		} elseif ( 'sorted' == $priority ) {			$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];			$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];			$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];		}		// An id can be in only one priority and one context		if ( $priority != $a_priority || $context != $a_context )			unset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);	}	}	if ( empty($priority) )		$priority = 'low';	if ( !isset($wp_meta_boxes[$page][$context][$priority]) )		$wp_meta_boxes[$page][$context][$priority] = array();	$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);}/** * Meta-Box template function * * @since 2.5.0 * * @param string $page page identifier, also known as screen identifier * @param string $context box context * @param mixed $object gets passed to the box callback function as first parameter * @return int number of meta_boxes */function do_meta_boxes($page, $context, $object) {	global $wp_meta_boxes;	static $already_sorted = false;	$hidden = get_hidden_meta_boxes($page);	printf('<div id="%s-sortables" class="meta-box-sortables">', htmlspecialchars($context));	$i = 0;	do {		// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose		if ( !$already_sorted && $sorted = get_user_option( "meta-box-order_$page" ) ) {			foreach ( $sorted as $box_context => $ids )				foreach ( explode(',', $ids) as $id )					if ( $id )						add_meta_box( $id, null, null, $page, $box_context, 'sorted' );		}		$already_sorted = true;		if ( !isset($wp_meta_boxes) || !isset($wp_meta_boxes[$page]) || !isset($wp_meta_boxes[$page][$context]) )			break;		foreach ( array('high', 'sorted', 'core', 'default', 'low') as $priority ) {			if ( isset($wp_meta_boxes[$page][$context][$priority]) ) {				foreach ( (array) $wp_meta_boxes[$page][$context][$priority] as $box ) {					if ( false == $box || ! $box['title'] )						continue;					$i++;					$style = '';					$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';					echo '<div id="' . $box['id'] . '" class="postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '" ' . '>' . "\n";					echo '<div class="handlediv" title="' . __('Click to toggle') . '"><br /></div>';					echo "<h3 class='hndle'><span>{$box['title']}</span></h3>\n";					echo '<div class="inside">' . "\n";					call_user_func($box['callback'], $object, $box);					echo "</div>\n";					echo "</div>\n";				}			}		}	} while(0);	echo "</div>";	return $i;}/** * Remove a meta box from an edit form. * * @since 2.6.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). */function remove_meta_box($id, $page, $context) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array('high', 'core', 'default', 'low') as $priority )		$wp_meta_boxes[$page][$context][$priority][$id] = false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function meta_box_prefs($screen) {	global $wp_meta_boxes;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( empty($wp_meta_boxes[$screen->id]) )		return;	$hidden = get_hidden_meta_boxes($screen);	foreach ( array_keys($wp_meta_boxes[$screen->id]) as $context ) {		foreach ( array_keys($wp_meta_boxes[$screen->id][$context]) as $priority ) {			foreach ( $wp_meta_boxes[$screen->id][$context][$priority] as $box ) {				if ( false == $box || ! $box['title'] )					continue;				// Submit box cannot be hidden				if ( 'submitdiv' == $box['id'] || 'linksubmitdiv' == $box['id'] )					continue;				$box_id = $box['id'];				echo '<label for="' . $box_id . '-hide">';				echo '<input class="hide-postbox-tog" name="' . $box_id . '-hide" type="checkbox" id="' . $box_id . '-hide" value="' . $box_id . '"' . (! in_array($box_id, $hidden) ? ' checked="checked"' : '') . ' />';				echo "{$box['title']}</label>\n";			}		}	}}/** * Get Hidden Meta Boxes * * @since 2.7 * * @param string|object $screen Screen identifier * @return array Hidden Meta Boxes */function get_hidden_meta_boxes( $screen ) {	if ( is_string( $screen ) )		$screen = convert_to_screen( $screen );	$hidden = get_user_option( "metaboxhidden_{$screen->id}" );	// Hide slug boxes by default	if ( !is_array( $hidden ) )		$hidden = array('slugdiv');	return $hidden;}/** * Add a new section to a settings page. * * Part of the Settings API. Use this to define new settings sections for an admin page. * Show settings sections in your admin page callback function with do_settings_sections(). * Add settings fields to your section with add_settings_field() * * The $callback argument should be the name of a function that echoes out any * content you want to show at the top of the settings section before the actual * fields. It can output nothing if you want. * * @since 2.7.0 * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * * @param string $id Slug-name to identify the section. Used in the 'id' attribute of tags. * @param string $title Formatted title of the section. Shown as the heading for the section. * @param string $callback Function that echos out any content at the top of the section (between heading and fields). * @param string $page The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page(); */function add_settings_section($id, $title, $callback, $page) {	global $wp_settings_sections;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_sections) )		$wp_settings_sections = array();	if ( !isset($wp_settings_sections[$page]) )		$wp_settings_sections[$page] = array();	if ( !isset($wp_settings_sections[$page][$id]) )		$wp_settings_sections[$page][$id] = array();	$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);}/** * Add a new field to a section of a settings page * * Part of the Settings API. Use this to define a settings field that will show * as part of a settings section inside a settings page. The fields are shown using * do_settings_fields() in do_settings-sections() * * The $callback argument should be the name of a function that echoes out the * html input tags for this setting field. Use get_option() to retrive existing * values to show. * * @since 2.7.0 * * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * * @param string $id Slug-name to identify the field. Used in the 'id' attribute of tags. * @param string $title Formatted title of the field. Shown as the label for the field during output. * @param string $callback Function that fills the field with the desired form inputs. The function should echo its output. * @param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...). * @param string $section The slug-name of the section of the settingss page in which to show the box (default, ...). * @param array $args Additional arguments */function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {	global $wp_settings_fields;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_fields) )		$wp_settings_fields = array();	if ( !isset($wp_settings_fields[$page]) )		$wp_settings_fields[$page] = array();	if ( !isset($wp_settings_fields[$page][$section]) )		$wp_settings_fields[$page][$section] = array();	$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);}/** * Prints out all settings sections added to a particular settings page * * Part of the Settings API. Use this in a settings page callback function * to output all the sections and fields that were added to that $page with * add_settings_section() and add_settings_field() * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * @since unknown * * @param string $page The slug name of the page whos settings sections you want to output */function do_settings_sections($page) {	global $wp_settings_sections, $wp_settings_fields;	if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )		return;	foreach ( (array) $wp_settings_sections[$page] as $section ) {		echo "<h3>{$section['title']}</h3>\n";		call_user_func($section['callback'], $section);		if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )			continue;		echo '<table class="form-table">';		do_settings_fields($page, $section['id']);		echo '</table>';	}}/** * Print out the settings fields for a particular settings section * * Part of the Settings API. Use this in a settings page to output * a specific section. Should normally be called by do_settings_sections() * rather than directly. * * @global $wp_settings_fields Storage array of settings fields and their pages/sections * * @since unknown * * @param string $page Slug title of the admin page who's settings fields you want to show. * @param section $section Slug title of the settings section who's fields you want to show. */function do_settings_fields($page, $section) {	global $wp_settings_fields;	if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section]) )		return;	foreach ( (array) $wp_settings_fields[$page][$section] as $field ) {		echo '<tr valign="top">';		if ( !empty($field['args']['label_for']) )			echo '<th scope="row"><label for="' . $field['args']['label_for'] . '">' . $field['title'] . '</label></th>';		else			echo '<th scope="row">' . $field['title'] . '</th>';		echo '<td>';		call_user_func($field['callback'], $field['args']);		echo '</td>';		echo '</tr>';	}}/** * Register a settings error to be displayed to the user * * Part of the Settings API. Use this to show messages to users about settings validation * problems, missing settings or anything else. * * Settings errors should be added inside the $sanitize_callback function defined in * register_setting() for a given setting to give feedback about the submission. * * By default messages will show immediately after the submission that generated the error. * Additional calls to settings_errors() can be used to show errors even when the settings * page is first accessed. * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Slug title of the setting to which this error applies * @param string $code Slug-name to identify the error. Used as part of 'id' attribute in HTML output. * @param string $message The formatted message text to display to the user (will be shown inside styled <div> and <p>) * @param string $type The type of message it is, controls HTML class. Use 'error' or 'updated'. */function add_settings_error( $setting, $code, $message, $type = 'error' ) {	global $wp_settings_errors;	if ( !isset($wp_settings_errors) )		$wp_settings_errors = array();	$new_error = array(		'setting' => $setting,		'code' => $code,		'message' => $message,		'type' => $type	);	$wp_settings_errors[] = $new_error;}/** * Fetch settings errors registered by add_settings_error() * * Checks the $wp_settings_errors array for any errors declared during the current * pageload and returns them. * * If changes were just submitted ($_GET['updated']) and settings errors were saved * to the 'settings_errors' transient then those errors will be returned instead. This * is used to pass errors back across pageloads. * * Use the $sanitize argument to manually re-sanitize the option before returning errors. * This is useful if you have errors or notices you want to show even when the user * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook) * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @return array Array of settings errors */function get_settings_errors( $setting = '', $sanitize = FALSE ) {	global $wp_settings_errors;	// If $sanitize is true, manually re-run the sanitizisation for this option	// This allows the $sanitize_callback from register_setting() to run, adding	// any settings errors you want to show by default.	if ( $sanitize )		sanitize_option( $setting, get_option($setting));	// If settings were passed back from options.php then use them	// Ignore transients if $sanitize is true, we dont' want the old values anyway	if ( isset($_GET['updated']) && $_GET['updated'] && get_transient('settings_errors') ) {		$settings_errors = get_transient('settings_errors');		delete_transient('settings_errors');	// Otherwise check global in case validation has been run on this pageload	} elseif ( count( $wp_settings_errors ) ) {		$settings_errors = $wp_settings_errors;	} else {		return;	}	// Filter the results to those of a specific setting if one was set	if ( $setting ) {		foreach ( (array) $settings_errors as $key => $details )			if ( $setting != $details['setting'] )				unset( $settings_errors[$key] );	}	return $settings_errors;}/** * Display settings errors registered by add_settings_error() * * Part of the Settings API. Outputs a <div> for each error retrieved by get_settings_errors(). * * This is called automatically after a settings page based on the Settings API is submitted. * Errors should be added during the validation callback function for a setting defined in register_setting() * * The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization * on its current value. * * The $hide_on_update option will cause errors to only show when the settings page is first loaded. * if the user has already saved new values it will be hidden to avoid repeating messages already * shown in the default error reporting after submission. This is useful to show general errors like missing * settings when the user arrives at the settings page. * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted. * @return <type> */function settings_errors ( $setting = '', $sanitize = FALSE, $hide_on_update = FALSE ) {	if ($hide_on_update AND $_GET['updated']) return;	$settings_errors = get_settings_errors( $setting, $sanitize );	if ( !is_array($settings_errors) ) return;	$output = '';	foreach ( $settings_errors as $key => $details ) {		$css_id = 'setting-error-' . $details['code'];		$css_class = $details['type'] . ' settings-error';		$output .= "<div id='$css_id' class='$css_class'> \n";		$output .= "<p><strong>{$details['message']}</strong></p>";		$output .= "</div> \n";	}	echo $output;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page */function manage_columns_prefs( $page ) {	$columns = get_column_headers( $page );	$hidden  = get_hidden_columns( $page );	$special = array('_title', 'cb', 'comment', 'media', 'name', 'title', 'username');	foreach ( $columns as $column => $title ) {		// Can't hide these or they are special		if ( in_array( $column, $special ) )			continue;		if ( empty( $title ) )			continue;		if ( 'comments' == $column )			$title = __( 'Comments' );		$id = "$column-hide";		echo '<label for="' . $id . '">';		echo '<input class="hide-column-tog" name="' . $id . '" type="checkbox" id="' . $id . '" value="' . $column . '"' . (! in_array($column, $hidden) ? ' checked="checked"' : '') . ' />';		echo "$title</label>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $found_action */function find_posts_div($found_action = '') {?>	<div id="find-posts" class="find-box" style="display:none;">		<div id="find-posts-head" class="find-box-head"><?php _e('Find Posts or Pages'); ?></div>		<div class="find-box-inside">			<div class="find-box-search">				<?php if ( $found_action ) { ?>					<input type="hidden" name="found_action" value="<?php echo esc_attr($found_action); ?>" />				<?php } ?>				<input type="hidden" name="affected" id="affected" value="" />				<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>				<label class="screen-reader-text" for="find-posts-input"><?php _e( 'Search' ); ?></label>				<input type="text" id="find-posts-input" name="ps" value="" />				<input type="button" onclick="findPosts.send();" value="<?php esc_attr_e( 'Search' ); ?>" class="button" /><br />				<?php				$post_types = get_post_types( array('public' => true), 'objects' );				foreach ( $post_types as $post ) {					if ( 'attachment' == $post->name )						continue;				?>				<input type="radio" name="find-posts-what" id="find-posts-<?php echo esc_attr($post->name); ?>" value="<?php echo esc_attr($post->name); ?>" <?php checked($post->name,  'post'); ?> />				<label for="find-posts-<?php echo esc_attr($post->name); ?>"><?php echo $post->label; ?></label>				<?php				} ?>			</div>			<div id="find-posts-response"></div>		</div>		<div class="find-box-buttons">			<input type="button" class="button alignleft" onclick="findPosts.close();" value="<?php esc_attr_e('Close'); ?>" />			<input id="find-posts-submit" type="submit" class="button-primary alignright" value="<?php esc_attr_e('Select'); ?>" />		</div>	</div><?php}/** * Display the post password. * * The password is passed through {@link esc_attr()} to ensure that it * is safe for placing in an html attribute. * * @uses attr * @since 2.7.0 */function the_post_password() {	global $post;	if ( isset( $post->post_password ) ) echo esc_attr( $post->post_password );}/** * {@internal Missing Short Description}} * * @since unknown */function favorite_actions( $screen = null ) {	$default_action = false;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( isset($screen->post_type) ) {		$post_type_object = get_post_type_object($screen->post_type);		if ( 'add' != $screen->action )			$default_action = array('post-new.php?post_type=' . $post_type_object->name => array($post_type_object->labels->new_item, $post_type_object->cap->edit_posts));		else			$default_action = array('edit.php?post_type=' . $post_type_object->name => array($post_type_object->labels->name, $post_type_object->cap->edit_posts));	}	if ( !$default_action ) {		switch ( $screen->id ) {			case 'upload':				$default_action = array('media-new.php' => array(__('New Media'), 'upload_files'));				break;			case 'media':				$default_action = array('upload.php' => array(__('Edit Media'), 'upload_files'));				break;			case 'link-manager':			case 'link':				if ( 'add' != $screen->action )					$default_action = array('link-add.php' => array(__('New Link'), 'manage_links'));				else					$default_action = array('link-manager.php' => array(__('Edit Links'), 'manage_links'));				break;			case 'users':				$default_action = array('user-new.php' => array(__('New User'), 'create_users'));				break;			case 'user':				$default_action = array('users.php' => array(__('Edit Users'), 'edit_users'));				break;			case 'plugins':				$default_action = array('plugin-install.php' => array(__('Install Plugins'), 'install_plugins'));				break;			case 'plugin-install':				$default_action = array('plugins.php' => array(__('Manage Plugins'), 'activate_plugins'));				break;			case 'themes':				$default_action = array('theme-install.php' => array(__('Install Themes'), 'install_themes'));				break;			case 'theme-install':				$default_action = array('themes.php' => array(__('Manage Themes'), 'switch_themes'));				break;			default:				$default_action = array('post-new.php' => array(__('New Post'), 'edit_posts'));				break;		}	}	$actions = array(		'post-new.php' => array(__('New Post'), 'edit_posts'),		'edit.php?post_status=draft' => array(__('Drafts'), 'edit_posts'),		'post-new.php?post_type=page' => array(__('New Page'), 'edit_pages'),		'media-new.php' => array(__('Upload'), 'upload_files'),		'edit-comments.php' => array(__('Comments'), 'moderate_comments')		);	$default_key = array_keys($default_action);	$default_key = $default_key[0];	if ( isset($actions[$default_key]) )		unset($actions[$default_key]);	$actions = array_merge($default_action, $actions);	$actions = apply_filters('favorite_actions', $actions);	$allowed_actions = array();	foreach ( $actions as $action => $data ) {		if ( current_user_can($data[1]) )			$allowed_actions[$action] = $data[0];	}	if ( empty($allowed_actions) )		return;	$first = array_keys($allowed_actions);	$first = $first[0];	echo '<div id="favorite-actions">';	echo '<div id="favorite-first"><a href="' . $first . '">' . $allowed_actions[$first] . '</a></div><div id="favorite-toggle"><br /></div>';	echo '<div id="favorite-inside">';	array_shift($allowed_actions);	foreach ( $allowed_actions as $action => $label) {		echo "<div class='favorite-action'><a href='$action'>";		echo $label;		echo "</a></div>\n";	}	echo "</div></div>\n";}/** * Get the post title. * * The post title is fetched and if it is blank then a default string is * returned. * * @since 2.7.0 * @param int $id The post id. If not supplied the global $post is used. * */function _draft_or_post_title($post_id = 0) {	$title = get_the_title($post_id);	if ( empty($title) )		$title = __('(no title)');	return $title;}/** * Display the search query. * * A simple wrapper to display the "s" parameter in a GET URI. This function * should only be used when {@link the_search_query()} cannot. * * @uses attr * @since 2.7.0 * */function _admin_search_query() {	echo isset($_GET['s']) ? esc_attr( stripslashes( $_GET['s'] ) ) : '';}/** * Generic Iframe header for use with Thickbox * * @since 2.7.0 * @param string $title Title of the Iframe page. * @param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued). * */function iframe_header( $title = '', $limit_styles = false ) {global $hook_suffix;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );if ( ! $limit_styles )	wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}//]]></script><?phpdo_action('admin_print_styles');do_action('admin_print_scripts');do_action('admin_head');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>  class="no-js <?php echo $admin_body_class; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><?php}/** * Generic Iframe footer for use with Thickbox * * @since 2.7.0 * */function iframe_footer() {	//We're going to hide any footer output on iframe pages, but run the hooks anyway since they output Javascript or other needed content. ?>	<div class="hidden"><?php	do_action('admin_footer', '');	do_action('admin_print_footer_scripts'); ?>	</div><script type="text/javascript">if(typeof wpOnload=="function")wpOnload();</script></body></html><?php}function _post_states($post) {	$post_states = array();	if ( isset($_GET['post_status']) )		$post_status = $_GET['post_status'];	else		$post_status = '';	if ( !empty($post->post_password) )		$post_states[] = __('Password protected');	if ( 'private' == $post->post_status && 'private' != $post_status )		$post_states[] = __('Private');	if ( 'draft' == $post->post_status && 'draft' != $post_status )		$post_states[] = __('Draft');	if ( 'pending' == $post->post_status && 'pending' != $post_status )		/* translators: post state */		$post_states[] = _x('Pending', 'post state');	if ( is_sticky($post->ID) )		$post_states[] = __('Sticky');	$post_states = apply_filters( 'display_post_states', $post_states );	if ( ! empty($post_states) ) {		$state_count = count($post_states);		$i = 0;		echo ' - ';		foreach ( $post_states as $state ) {			++$i;			( $i == $state_count ) ? $sep = '' : $sep = ', ';			echo "<span class='post-state'>$state$sep</span>";		}	}}/** * Convert a screen string to a screen object * * @since 3.0.0 * * @param string $screen The name of the screen * @return object An object containing the safe screen name and id */function convert_to_screen( $screen ) {	$screen = str_replace( array('.php', '-new', '-add' ), '', $screen);	$screen = (string) apply_filters( 'screen_meta_screen', $screen );	$screen = (object) array('id' => $screen, 'base' => $screen);	return $screen;}function screen_meta($screen) {	global $wp_meta_boxes, $_wp_contextual_help, $title;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$column_screens = get_column_headers($screen);	$meta_screens = array('index' => 'dashboard');	if ( isset($meta_screens[$screen->id]) ) {		$screen->id = $meta_screens[$screen->id];		$screen->base = $screen->id;	}	$show_screen = false;	if ( !empty($wp_meta_boxes[$screen->id]) || !empty($column_screens) )		$show_screen = true;	$screen_options = screen_options($screen);	if ( $screen_options )		$show_screen = true;	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$settings = apply_filters('screen_settings', '', $screen);	switch ( $screen->id ) {		case 'widgets':			$settings = '<p><a id="access-on" href="widgets.php?widgets-access=on">' . __('Enable accessibility mode') . '</a><a id="access-off" href="widgets.php?widgets-access=off">' . __('Disable accessibility mode') . "</a></p>\n";			$show_screen = true;			break;	}	if( ! empty( $settings ) )		$show_screen = true;?><div id="screen-meta"><?php if ( $show_screen ) : ?><div id="screen-options-wrap" class="hidden">	<form id="adv-settings" action="" method="post">	<?php if ( isset($wp_meta_boxes[$screen->id]) ) : ?>		<h5><?php _ex('Show on screen', 'Metaboxes') ?></h5>		<div class="metabox-prefs">			<?php meta_box_prefs($screen); ?>			<br class="clear" />		</div>		<?php endif;		if ( ! empty($column_screens) ) : ?>		<h5><?php echo ( isset( $column_screens['_title'] ) ?  $column_screens['_title'] :  _x('Show on screen', 'Columns') ) ?></h5>		<div class="metabox-prefs">			<?php manage_columns_prefs($screen); ?>			<br class="clear" />		</div>	<?php endif;	echo screen_layout($screen);	if ( !empty( $screen_options ) ) {		?>		<h5><?php _ex('Show on screen', 'Screen Options') ?></h5>		<?php	}	echo $screen_options;	echo $settings; ?><div><?php wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false ); ?></div></form></div><?php endif; // $show_screen	$_wp_contextual_help = apply_filters('contextual_help_list', $_wp_contextual_help, $screen);	?>	<div id="contextual-help-wrap" class="hidden">	<?php	$contextual_help = '';	if ( isset($_wp_contextual_help[$screen->id]) ) {		$contextual_help .= '<div class="metabox-prefs">' . $_wp_contextual_help[$screen->id] . "</div>\n";	} else {		$contextual_help .= '<div class="metabox-prefs">';		$default_help = __('<a href="http://codex.wordpress.org/" target="_blank">Documentation</a>');		$default_help .= '<br />';		$default_help .= __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>');		$contextual_help .= apply_filters('default_contextual_help', $default_help);		$contextual_help .= "</div>\n";	}	echo apply_filters('contextual_help', $contextual_help, $screen->id, $screen);	?>	</div><div id="screen-meta-links"><div id="contextual-help-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#contextual-help" id="contextual-help-link" class="show-settings"><?php _e('Help') ?></a></div><?php if ( $show_screen ) { ?><div id="screen-options-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#screen-options" id="show-settings-link" class="show-settings"><?php _e('Screen Options') ?></a></div><?php } ?></div></div><?php}/** * Add contextual help text for a page * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param string $help Arbitrary help text */function add_contextual_help($screen, $help) {	global $_wp_contextual_help;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$_wp_contextual_help[$screen->id] = $help;}function drag_drop_help() {	return '	<p>' .	__('Most of the modules on this screen can be moved. If you hover your mouse over the title bar of a module you&rsquo;ll notice the 4 arrow cursor appears to let you know it is movable. Click on it, hold down the mouse button and start dragging the module to a new location. As you drag the module, notice the dotted gray box that also moves. This box indicates where the module will be placed when you release the mouse button.') . '</p>	<p>' . __('The same modules can be expanded and collapsed by clicking once on their title bar and also completely hidden from the Screen Options tab.') . '</p>';}function plugins_search_help() {	return '	<p><strong>' . __('Search help') . '</strong></p>' .	'<p>' . __('You may search based on 3 criteria:') . '<br />' .	__('<strong>Term:</strong> Searches theme names and descriptions for the specified term.') . '<br />' .	__('<strong>Tag:</strong> Searches for themes tagged as such.') . '<br />' .	__('<strong>Author:</strong> Searches for themes created by the Author, or which the Author contributed to.') . '</p>';}function screen_layout($screen) {	global $screen_layout_columns;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = array('dashboard' => 4, 'link' => 2);	// Add custom post types	foreach ( get_post_types( array('show_ui' => true) ) as $post_type )		$columns[$post_type] = 2;	$columns = apply_filters('screen_layout_columns', $columns, $screen->id, $screen);	if ( !isset($columns[$screen->id]) ) {		$screen_layout_columns = 0;		return ''; 	}	$screen_layout_columns = get_user_option("screen_layout_$screen->id");	$num = $columns[$screen->id];	if ( ! $screen_layout_columns )			$screen_layout_columns = 2;	$i = 1;	$return = '<h5>' . __('Screen Layout') . "</h5>\n<div class='columns-prefs'>" . __('Number of Columns:') . "\n";	while ( $i <= $num ) {		$return .= "<label><input type='radio' name='screen_columns' value='$i'" . ( ($screen_layout_columns == $i) ? " checked='checked'" : "" ) . " /> $i</label>\n";		++$i;	}	$return .= "</div>\n";	return $return;}function screen_options($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	switch ( $screen->base ) {		case 'edit':		case 'edit-pages':			$post_type = 'post';			if ( isset($_GET['post_type']) && in_array( $_GET['post_type'], get_post_types( array('public' => true ) ) ) )				$post_type = $_GET['post_type'];			$post_type_object = get_post_type_object($post_type);			$per_page_label = $post_type_object->labels->name;			break;		case 'ms-sites':			$per_page_label = _x( 'Sites', 'sites per page (screen options)' );			break;		case 'ms-users':			$per_page_label = _x( 'Users', 'users per page (screen options)' );			break;		case 'edit-comments':			$per_page_label = _x( 'Comments', 'comments per page (screen options)' );			break;		case 'upload':			$per_page_label = _x( 'Media items', 'items per page (screen options)' );			break;		case 'edit-tags':			global $tax;			$per_page_label = $tax->labels->name;			break;		case 'plugins':			$per_page_label = _x( 'Plugins', 'plugins per page (screen options)' );			break;		default:			return '';	}	$option = str_replace( '-', '_', "{$screen->id}_per_page" );	if ( 'edit_tags_per_page' == $option ) {		if ( 'category' == $tax->name )			$option = 'categories_per_page';		elseif ( 'post_tag' != $tax->name )			$option = 'edit_' . $tax->name . '_per_page';	}	$per_page = (int) get_user_option( $option );	if ( empty( $per_page ) || $per_page < 1 ) {		if ( 'plugins' == $screen->id )			$per_page = 999;		else			$per_page = 20;	}	if ( 'edit_comments_per_page' == $option )		$per_page = apply_filters( 'comments_per_page', $per_page, isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all' );	elseif ( 'categories_per_page' == $option )		$per_page = apply_filters( 'edit_categories_per_page', $per_page );	else		$per_page = apply_filters( $option, $per_page );	$return = "<div class='screen-options'>\n";	if ( !empty($per_page_label) )		$return .= "<input type='text' class='screen-per-page' name='wp_screen_options[value]' id='$option' maxlength='3' value='$per_page' /> <label for='$option'>$per_page_label</label>\n";	$return .= "<input type='submit' class='button' value='" . esc_attr__('Apply') . "' />";	$return .= "<input type='hidden' name='wp_screen_options[option]' value='" . esc_attr($option) . "' />";	$return .= "</div>\n";	return $return;}function screen_icon($screen = '') {	global $current_screen;	if ( empty($screen) )		$screen = $current_screen;	elseif ( is_string($screen) )		$name = $screen;	if ( empty($name) ) {		if ( !empty($screen->parent_base) )			$name = $screen->parent_base;		else			$name = $screen->base;		if ( 'edit' == $name && isset($screen->post_type) && 'page' == $screen->post_type )			$name = 'edit-pages';	}?>	<div id="icon-<?php echo $name; ?>" class="icon32"><br /></div><?php}/** * Test support for compressing JavaScript from PHP * * Outputs JavaScript that tests if compression from PHP works as expected * and sets an option with the result. Has no effect when the current user * is not an administrator. To run the test again the option 'can_compress_scripts' * has to be deleted. * * @since 2.8.0 */function compression_test() {?>	<script type="text/javascript">	/* <![CDATA[ */	var testCompression = {		get : function(test) {			var x;			if ( window.XMLHttpRequest ) {				x = new XMLHttpRequest();			} else {				try{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}			}			if (x) {				x.onreadystatechange = function() {					var r, h;					if ( x.readyState == 4 ) {						r = x.responseText.substr(0, 18);						h = x.getResponseHeader('Content-Encoding');						testCompression.check(r, h, test);					}				}				x.open('GET', 'admin-ajax.php?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);				x.send('');			}		},		check : function(r, h, test) {			if ( ! r && ! test )				this.get(1);			if ( 1 == test ) {				if ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )					this.get('no');				else					this.get(2);				return;			}			if ( 2 == test ) {				if ( '"wpCompressionTest' == r )					this.get('yes');				else					this.get('no');			}		}	};	testCompression.check();	/* ]]> */	</script><?php}/** * Set the current screen object * * @since 3.0.0 * * @uses $current_screen * * @param string $id Screen id, optional. */function set_current_screen( $id =  '' ) {	global $current_screen, $hook_suffix, $typenow, $taxnow;	$action = '';	if ( empty($id) ) {		$current_screen = $hook_suffix;		$current_screen = str_replace('.php', '', $current_screen);		if ( preg_match('/-add|-new$/', $current_screen) )			$action = 'add';		$current_screen = str_replace('-new', '', $current_screen);		$current_screen = str_replace('-add', '', $current_screen);		$current_screen = array('id' => $current_screen, 'base' => $current_screen);	} else {		$id = sanitize_key($id);		if ( false !== strpos($id, '-') ) {			list( $id, $typenow ) = explode('-', $id, 2);			if ( taxonomy_exists( $typenow ) ) {				$id = 'edit-tags';				$taxnow = $typenow;				$typenow = '';			}		}		$current_screen = array('id' => $id, 'base' => $id);	}	$current_screen = (object) $current_screen;	$current_screen->action = $action;	// Map index to dashboard	if ( 'index' == $current_screen->base )		$current_screen->base = 'dashboard';	if ( 'index' == $current_screen->id )		$current_screen->id = 'dashboard';	if ( 'edit' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id .= '-' . $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'post' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id = $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'edit-tags' == $current_screen->id ) {		if ( empty($taxnow) )			$taxnow = 'post_tag';		$current_screen->id = 'edit-' . $taxnow;		$current_screen->taxonomy = $taxnow;	}	$current_screen = apply_filters('current_screen', $current_screen);}?>
<?php/** * Post functions and post utility function. * * @package WordPress * @subpackage Post * @since 1.5.0 *///// Post Type Registration///** * Creates the initial post types when 'init' action is fired. */function create_initial_post_types() {	register_post_type( 'post', array(		'public'  => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'page', array(		'public' => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'page',		'hierarchical' => true,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'attachment', array(		'labels' => array(			'name' => __( 'Media' ),		),		'public' => true,		'show_ui' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'media.php?attachment_id=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'can_export' => false,		'show_in_nav_menus' => false,	) );	register_post_type( 'revision', array(		'labels' => array(			'name' => __( 'Revisions' ),			'singular_name' => __( 'Revision' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_type( 'nav_menu_item', array(		'labels' => array(			'name' => __( 'Navigation Menu Items' ),			'singular_name' => __( 'Navigation Menu Item' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_status( 'publish', array(		'label'       => _x( 'Published', 'post' ),		'public'      => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Published <span class="count">(%s)</span>', 'Published <span class="count">(%s)</span>' ),	) );	register_post_status( 'future', array(		'label'       => _x( 'Scheduled', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop('Scheduled <span class="count">(%s)</span>', 'Scheduled <span class="count">(%s)</span>' ),	) );	register_post_status( 'draft', array(		'label'       => _x( 'Draft', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Draft <span class="count">(%s)</span>', 'Drafts <span class="count">(%s)</span>' ),	) );	register_post_status( 'pending', array(		'label'       => _x( 'Pending', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Pending <span class="count">(%s)</span>', 'Pending <span class="count">(%s)</span>' ),	) );	register_post_status( 'private', array(		'label'       => _x( 'Private', 'post' ),		'private'     => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Private <span class="count">(%s)</span>', 'Private <span class="count">(%s)</span>' ),	) );	register_post_status( 'trash', array(		'label'       => _x( 'Trash', 'post' ),		'internal'    => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>' ),		'show_in_admin_status_list' => true,	) );	register_post_status( 'auto-draft', array(		'label'    => 'auto-draft',		'internal' => true,		'_builtin' => true, /* internal use only. */	) );	register_post_status( 'inherit', array(		'label'    => 'inherit',		'internal' => true,		'_builtin' => true, /* internal use only. */		'exclude_from_search' => false,	) );}add_action( 'init', 'create_initial_post_types', 0 ); // highest priority/** * Retrieve attached file path based on attachment ID. * * You can optionally send it through the 'get_attached_file' filter, but by * default it will just return the file path unfiltered. * * The function works by getting the single post meta name, named * '_wp_attached_file' and returning it. This is a convenience function to * prevent looking up the meta name and provide a mechanism for sending the * attached filename through a filter. * * @since 2.0.0 * @uses apply_filters() Calls 'get_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID. * @param bool $unfiltered Whether to apply filters. * @return string The file path to the attached file. */function get_attached_file( $attachment_id, $unfiltered = false ) {	$file = get_post_meta( $attachment_id, '_wp_attached_file', true );	// If the file is relative, prepend upload dir	if ( 0 !== strpos($file, '/') && !preg_match('|^.:\\\|', $file) && ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) )		$file = $uploads['basedir'] . "/$file";	if ( $unfiltered )		return $file;	return apply_filters( 'get_attached_file', $file, $attachment_id );}/** * Update attachment file path based on attachment ID. * * Used to update the file path of the attachment, which uses post meta name * '_wp_attached_file' to store the path of the attachment. * * @since 2.1.0 * @uses apply_filters() Calls 'update_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID * @param string $file File path for the attachment * @return bool False on failure, true on success. */function update_attached_file( $attachment_id, $file ) {	if ( !get_post( $attachment_id ) )		return false;	$file = apply_filters( 'update_attached_file', $file, $attachment_id );	$file = _wp_relative_upload_path($file);	return update_post_meta( $attachment_id, '_wp_attached_file', $file );}/** * Return relative path to an uploaded file. * * The path is relative to the current upload dir. * * @since 2.9.0 * @uses apply_filters() Calls '_wp_relative_upload_path' on file path. * * @param string $path Full path to the file * @return string relative path on success, unchanged path on failure. */function _wp_relative_upload_path( $path ) {	$new_path = $path;	if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) {		if ( 0 === strpos($new_path, $uploads['basedir']) ) {				$new_path = str_replace($uploads['basedir'], '', $new_path);				$new_path = ltrim($new_path, '/');		}	}	return apply_filters( '_wp_relative_upload_path', $new_path, $path );}/** * Retrieve all children of the post parent ID. * * Normally, without any enhancements, the children would apply to pages. In the * context of the inner workings of WordPress, pages, posts, and attachments * share the same table, so therefore the functionality could apply to any one * of them. It is then noted that while this function does not work on posts, it * does not mean that it won't work on posts. It is recommended that you know * what context you wish to retrieve the children of. * * Attachments may also be made the child of a post, so if that is an accurate * statement (which needs to be verified), it would then be possible to get * all of the attachments for a post. Attachments have since changed since * version 2.5, so this is most likely unaccurate, but serves generally as an * example of what is possible. * * The arguments listed as defaults are for this function and also of the * {@link get_posts()} function. The arguments are combined with the * get_children defaults and are then passed to the {@link get_posts()} * function, which accepts additional arguments. You can replace the defaults in * this function, listed below and the additional arguments listed in the * {@link get_posts()} function. * * The 'post_parent' is the most important argument and important attention * needs to be paid to the $args parameter. If you pass either an object or an * integer (number), then just the 'post_parent' is grabbed and everything else * is lost. If you don't specify any arguments, then it is assumed that you are * in The Loop and the post parent will be grabbed for from the current post. * * The 'post_parent' argument is the ID to get the children. The 'numberposts' * is the amount of posts to retrieve that has a default of '-1', which is * used to get all of the posts. Giving a number higher than 0 will only * retrieve that amount of posts. * * The 'post_type' and 'post_status' arguments can be used to choose what * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress * post types are 'post', 'pages', and 'attachments'. The 'post_status' * argument will accept any post status within the write administration panels. * * @see get_posts() Has additional arguments that can be replaced. * @internal Claims made in the long description might be inaccurate. * * @since 2.0.0 * * @param mixed $args Optional. User defined arguments for replacing the defaults. * @param string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N. * @return array|bool False on failure and the type will be determined by $output parameter. */function &get_children($args = '', $output = OBJECT) {	$kids = array();	if ( empty( $args ) ) {		if ( isset( $GLOBALS['post'] ) ) {			$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );		} else {			return $kids;		}	} elseif ( is_object( $args ) ) {		$args = array('post_parent' => (int) $args->post_parent );	} elseif ( is_numeric( $args ) ) {		$args = array('post_parent' => (int) $args);	}	$defaults = array(		'numberposts' => -1, 'post_type' => 'any',		'post_status' => 'any', 'post_parent' => 0,	);	$r = wp_parse_args( $args, $defaults );	$children = get_posts( $r );	if ( !$children )		return $kids;	update_post_cache($children);	foreach ( $children as $key => $child )		$kids[$child->ID] =& $children[$key];	if ( $output == OBJECT ) {		return $kids;	} elseif ( $output == ARRAY_A ) {		foreach ( (array) $kids as $kid )			$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);		return $weeuns;	} elseif ( $output == ARRAY_N ) {		foreach ( (array) $kids as $kid )			$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));		return $babes;	} else {		return $kids;	}}/** * Get extended entry info (<!--more-->). * * There should not be any space after the second dash and before the word * 'more'. There can be text or space(s) after the word 'more', but won't be * referenced. * * The returned array has 'main' and 'extended' keys. Main has the text before * the <code><!--more--></code>. The 'extended' key has the content after the * <code><!--more--></code> comment. * * @since 1.0.0 * * @param string $post Post content. * @return array Post before ('main') and after ('extended'). */function get_extended($post) {	//Match the new style more links	if ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {		list($main, $extended) = explode($matches[0], $post, 2);	} else {		$main = $post;		$extended = '';	}	// Strip leading and trailing whitespace	$main = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $main);	$extended = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $extended);	return array('main' => $main, 'extended' => $extended);}/** * Retrieves post data given a post ID or post object. * * See {@link sanitize_post()} for optional $filter values. Also, the parameter * $post, must be given as a variable, since it is passed by reference. * * @since 1.5.1 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post * * @param int|object $post Post ID or post object. * @param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional, default is raw. * @return mixed Post data */function &get_post(&$post, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($post) ) {		if ( isset($GLOBALS['post']) )			$_post = & $GLOBALS['post'];		else			return $null;	} elseif ( is_object($post) && empty($post->filter) ) {		_get_post_ancestors($post);		$_post = sanitize_post($post, 'raw');		wp_cache_add($post->ID, $_post, 'posts');	} else {		if ( is_object($post) )			$post_id = $post->ID;		else			$post_id = $post;		$post_id = (int) $post_id;		if ( ! $_post = wp_cache_get($post_id, 'posts') ) {			$_post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d LIMIT 1", $post_id));			if ( ! $_post )				return $null;			_get_post_ancestors($_post);			$_post = sanitize_post($_post, 'raw');			wp_cache_add($_post->ID, $_post, 'posts');		}	}	if ($filter != 'raw')		$_post = sanitize_post($_post, $filter);	if ( $output == OBJECT ) {		return $_post;	} elseif ( $output == ARRAY_A ) {		$__post = get_object_vars($_post);		return $__post;	} elseif ( $output == ARRAY_N ) {		$__post = array_values(get_object_vars($_post));		return $__post;	} else {		return $_post;	}}/** * Retrieve ancestors of a post. * * @since 2.5.0 * * @param int|object $post Post ID or post object * @return array Ancestor IDs or empty array if none are found. */function get_post_ancestors($post) {	$post = get_post($post);	if ( !empty($post->ancestors) )		return $post->ancestors;	return array();}/** * Retrieve data from a post field based on Post ID. * * Examples of the post field will be, 'post_type', 'post_status', 'content', * etc and based off of the post object property or key names. * * The context values are based off of the taxonomy filter functions and * supported values are found within those functions. * * @since 2.3.0 * @uses sanitize_post_field() See for possible $context values. * * @param string $field Post field name * @param id $post Post ID * @param string $context Optional. How to filter the field. Default is display. * @return WP_Error|string Value in post field or WP_Error on failure */function get_post_field( $field, $post, $context = 'display' ) {	$post = (int) $post;	$post = get_post( $post );	if ( is_wp_error($post) )		return $post;	if ( !is_object($post) )		return '';	if ( !isset($post->$field) )		return '';	return sanitize_post_field($field, $post->$field, $post->ID, $context);}/** * Retrieve the mime type of an attachment based on the ID. * * This function can be used with any post type, but it makes more sense with * attachments. * * @since 2.0.0 * * @param int $ID Optional. Post ID. * @return bool|string False on failure or returns the mime type */function get_post_mime_type($ID = '') {	$post = & get_post($ID);	if ( is_object($post) )		return $post->post_mime_type;	return false;}/** * Retrieve the post status based on the Post ID. * * If the post ID is of an attachment, then the parent post status will be given * instead. * * @since 2.0.0 * * @param int $ID Post ID * @return string|bool Post status or false on failure. */function get_post_status($ID = '') {	$post = get_post($ID);	if ( !is_object($post) )		return false;	// Unattached attachments are assumed to be published.	if ( ('attachment' == $post->post_type) && ('inherit' == $post->post_status) && ( 0 == $post->post_parent) )		return 'publish';	if ( ('attachment' == $post->post_type) && $post->post_parent && ($post->ID != $post->post_parent) )		return get_post_status($post->post_parent);	return $post->post_status;}/** * Retrieve all of the WordPress supported post statuses. * * Posts have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of post statuses. */function get_post_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'pending'		=> __('Pending Review'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Retrieve all of the WordPress support page statuses. * * Pages have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of page statuses. */function get_page_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post status based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post status name. * * * Optional $args contents: * * label - A descriptive name for the post status marked for translation. Defaults to $post_status. * public - Whether posts of this status should be shown in the admin UI. Defaults to true. * exclude_from_search - Whether to exclude posts with this post status from search results. Defaults to true. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses Inserts new post status object into the list * * @param string $post_status Name of the post status. * @param array|string $args See above description. */function register_post_status($post_status, $args = array()) {	global $wp_post_statuses;	if (!is_array($wp_post_statuses))		$wp_post_statuses = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array('label' => false, 'label_count' => false, 'exclude_from_search' => null, '_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'hierarchical' => false, 'public' => null, 'internal' => null, 'protected' => null, 'private' => null, 'show_in_admin_all' => null, 'publicly_queryable' => null, 'show_in_admin_status_list' => null, 'show_in_admin_all_list' => null, 'single_view_cap' => null);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_status = sanitize_user($post_status, true);	$args->name = $post_status;	if ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )		$args->internal = true;	if ( null === $args->public  )		$args->public = false;	if ( null === $args->private  )		$args->private = false;	if ( null === $args->protected  )		$args->protected = false;	if ( null === $args->internal  )		$args->internal = false;	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	if ( null === $args->exclude_from_search )		$args->exclude_from_search = $args->internal;	if ( null === $args->show_in_admin_all_list )		$args->show_in_admin_all_list = !$args->internal;	if ( null === $args->show_in_admin_status_list )			$args->show_in_admin_status_list = !$args->internal;	if ( null === $args->single_view_cap )		$args->single_view_cap = $args->public ? '' : 'edit';	if ( false === $args->label )		$args->label = $post_status;	if ( false === $args->label_count )		$args->label_count = array( $args->label, $args->label );	$wp_post_statuses[$post_status] = $args;	return $args;}/** * Retrieve a post status object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_statuses * * @param string $post_type The name of a registered post status * @return object A post status object */function get_post_status_object( $post_status ) {	global $wp_post_statuses;	if ( empty($wp_post_statuses[$post_status]) )		return null;	return $wp_post_statuses[$post_status];}/** * Get a list of all registered post status objects. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_status_object * * @param array|string $args An array of key => value arguments to match against the post status objects. * @param string $output The type of output to return, either post status 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_statuses;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_statuses, $args, $operator, $field);}/** * Whether the post type is hierarchical. * * A false return value might also mean that the post type does not exist. * * @since 3.0.0 * @see get_post_type_object * * @param string $post Post type name * @return bool Whether post type is hierarchical. */function is_post_type_hierarchical( $post_type ) {	if ( ! post_type_exists( $post_type ) )		return false;	$post_type = get_post_type_object( $post_type );	return $post_type->hierarchical;}/** * Checks if a post type is registered. * * @since 3.0.0 * @uses get_post_type_object() * * @param string Post type name * @return bool Whether post type is registered. */function post_type_exists( $post_type ) {	return (bool) get_post_type_object( $post_type );}/** * Retrieve the post type of the current post or of a given post. * * @since 2.1.0 * * @uses $post The Loop current post global * * @param mixed $the_post Optional. Post object or post ID. * @return bool|string post type or false on failure. */function get_post_type( $the_post = false ) {	global $post;	if ( false === $the_post )		$the_post = $post;	elseif ( is_numeric($the_post) )		$the_post = get_post($the_post);	if ( is_object($the_post) )		return $the_post->post_type;	return false;}/** * Retrieve a post type object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_types * @see register_post_type * @see get_post_types * * @param string $post_type The name of a registered post type * @return object A post type object */function get_post_type_object( $post_type ) {	global $wp_post_types;	if ( empty($wp_post_types[$post_type]) )		return null;	return $wp_post_types[$post_type];}/** * Get a list of all registered post type objects. * * @package WordPress * @subpackage Post * @since 2.9.0 * @uses $wp_post_types * @see register_post_type * * @param array|string $args An array of key => value arguments to match against the post type objects. * @param string $output The type of output to return, either post type 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_types;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_types, $args, $operator, $field);}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post type based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post type name. * * * Optional $args contents: * * - label - Name of the post type shown in the menu. Usually plural. If not set, labels['name'] will be used. * - description - A short descriptive summary of what the post type is. Defaults to blank. * - public - Whether posts of this type should be shown in the admin UI. Defaults to false. * - exclude_from_search - Whether to exclude posts with this post type from search results. Defaults to true if the type is not public, false if the type is public. * - publicly_queryable - Whether post_type queries can be performed from the front page.  Defaults to whatever public is set as. * - show_ui - Whether to generate a default UI for managing this post type. Defaults to true if the type is public, false if the type is not public. * - menu_position - The position in the menu order the post type should appear. Defaults to the bottom. * - menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon. * - capability_type - The post type to use for checking read, edit, and delete capabilities. Defaults to "post". * - capabilities - Array of capabilities for this post type. You can see accepted values in {@link get_post_type_capabilities()}. By default the capability_type is used to construct capabilities. * - hierarchical - Whether the post type is hierarchical. Defaults to false. * - supports - An alias for calling add_post_type_support() directly. See add_post_type_support() for Documentation. Defaults to none. * - register_meta_box_cb - Provide a callback function that will be called when setting up the meta boxes for the edit form.  Do remove_meta_box() and add_meta_box() calls in the callback. * - taxonomies - An array of taxonomy identifiers that will be registered for the post type.  Default is no taxonomies. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). * - labels - An array of labels for this post type. You can see accepted values in {@link get_post_type_labels()}. By default post labels are used for non-hierarchical types and page labels for hierarchical ones. * - permalink_epmask - The default rewrite endpoint bitmasks. * - rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize permastruct; default will use $post_type as slug. * - query_var - false to prevent queries, or string to value of the query var to use for this post type * - can_export - true allows this post type to be exported. * - show_in_nav_menus - true makes this post type available for selection in navigation menus. * - _builtin - true if this post type is a native or "built-in" post_type.  THIS IS FOR INTERNAL USE ONLY! * - _edit_link - URL segement to use for edit link of this post type.  Set to 'post.php?post=%d'.  THIS IS FOR INTERNAL USE ONLY! * * @since 2.9.0 * @uses $wp_post_types Inserts new post type object into the list * * @param string $post_type Name of the post type. * @param array|string $args See above description. * @return object the registered post type object */function register_post_type($post_type, $args = array()) {	global $wp_post_types, $wp_rewrite, $wp;	if ( !is_array($wp_post_types) )		$wp_post_types = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array(		'labels' => array(), 'description' => '', 'publicly_queryable' => null, 'exclude_from_search' => null,		'_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'capabilities' => array(), 'hierarchical' => false,		'public' => false, 'rewrite' => true, 'query_var' => true, 'supports' => array(), 'register_meta_box_cb' => null,		'taxonomies' => array(), 'show_ui' => null, 'menu_position' => null, 'menu_icon' => null,		'permalink_epmask' => EP_PERMALINK, 'can_export' => true, 'show_in_nav_menus' => null	);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_type = sanitize_user($post_type, true);	$args->name = $post_type;	// If not set, default to the setting for public.	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	// If not set, default to the setting for public.	if ( null === $args->show_ui )		$args->show_ui = $args->public;	// Whether to show this type in nav-menus.php.  Defaults to the setting for public.	if ( null === $args->show_in_nav_menus )		$args->show_in_nav_menus = $args->public;	// If not set, default to true if not public, false if public.	if ( null === $args->exclude_from_search )		$args->exclude_from_search = !$args->public;	if ( empty($args->capability_type) )		$args->capability_type = 'post';	$args->cap = get_post_type_capabilities( $args );	unset($args->capabilities);	if ( ! empty($args->supports) ) {		add_post_type_support($post_type, $args->supports);		unset($args->supports);	} else {		// Add default features		add_post_type_support($post_type, array('title', 'editor'));	}	if ( false !== $args->query_var && !empty($wp) ) {		if ( true === $args->query_var )			$args->query_var = $post_type;		$args->query_var = sanitize_title_with_dashes($args->query_var);		$wp->add_query_var($args->query_var);	}	if ( false !== $args->rewrite && '' != get_option('permalink_structure') ) {		if ( !is_array($args->rewrite) )			$args->rewrite = array();		if ( !isset($args->rewrite['slug']) )			$args->rewrite['slug'] = $post_type;		if ( !isset($args->rewrite['with_front']) )			$args->rewrite['with_front'] = true;		if ( $args->hierarchical )			$wp_rewrite->add_rewrite_tag("%$post_type%", '(.+?)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		else			$wp_rewrite->add_rewrite_tag("%$post_type%", '([^/]+)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		$wp_rewrite->add_permastruct($post_type, "{$args->rewrite['slug']}/%$post_type%", $args->rewrite['with_front'], $args->permalink_epmask);	}	if ( $args->register_meta_box_cb )		add_action('add_meta_boxes_' . $post_type, $args->register_meta_box_cb, 10, 1);	$args->labels = get_post_type_labels( $args );	$args->label = $args->labels->name;	$wp_post_types[$post_type] = $args;	add_action( 'future_' . $post_type, '_future_post_hook', 5, 2 );	foreach ( $args->taxonomies as $taxonomy ) {		register_taxonomy_for_object_type( $taxonomy, $post_type );	}	return $args;}/** * Builds an object with all post type capabilities out of a post type object * * Accepted keys of the capabilities array in the post type object: * - edit_post - The meta capability that controls editing a particular object of this post type. Defaults to "edit_ . $capability_type" (edit_post). * - edit_posts - The capability that controls editing objects of this post type as a class. Defaults to "edit_ . $capability_type . s" (edit_posts). * - edit_others_posts - The capability that controls editing objects of this post type that are owned by other users. Defaults to "edit_others_ . $capability_type . s" (edit_others_posts). * - publish_posts - The capability that controls publishing objects of this post type. Defaults to "publish_ . $capability_type . s" (publish_posts). * - read_post - The meta capability that controls reading a particular object of this post type. Defaults to "read_ . $capability_type" (read_post). * - read_private_posts - The capability that controls reading private posts. Defaults to "read_private . $capability_type . s" (read_private_posts). * - delete_post - The meta capability that controls deleting a particular object of this post type. Defaults to "delete_ . $capability_type" (delete_post). * * @since 3.0.0 * @param object $args * @return object object with all the capabilities as member variables */function get_post_type_capabilities( $args ) {	$defaults = array(		'edit_post'          => 'edit_'         . $args->capability_type,		'edit_posts'         => 'edit_'         . $args->capability_type . 's',		'edit_others_posts'  => 'edit_others_'  . $args->capability_type . 's',		'publish_posts'      => 'publish_'      . $args->capability_type . 's',		'read_post'          => 'read_'         . $args->capability_type,		'read_private_posts' => 'read_private_' . $args->capability_type . 's',		'delete_post'        => 'delete_'       . $args->capability_type,	);	$labels = array_merge( $defaults, $args->capabilities );	return (object) $labels;}/** * Builds an object with all post type labels out of a post type object * * Accepted keys of the label array in the post type object: * - name - general name for the post type, usually plural. The same and overriden by $post_type_object->label. Default is Posts/Pages * - singular_name - name for one object of this post type. Default is Post/Page * - add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a {@link http://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context} matching your post type. Example: <code>_x('Add New', 'product');</code> * - add_new_item - Default is Add New Post/Add New Page * - edit_item - Default is Edit Post/Edit Page * - new_item - Default is New Post/New Page * - view_item - Default is View Post/View Page * - search_items - Default is Search Posts/Search Pages * - not_found - Default is No posts found/No pages found * - not_found_in_trash - Default is No posts found in Trash/No pages found in Trash * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page: * * Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages.) * * @since 3.0.0 * @param object $post_type_object * @return object object with all the labels as member variables */function get_post_type_labels( $post_type_object ) {	$nohier_vs_hier_defaults = array(		'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),		'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),		'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),		'add_new_item' => array( __('Add New Post'), __('Add New Page') ),		'edit_item' => array( __('Edit Post'), __('Edit Page') ),		'new_item' => array( __('New Post'), __('New Page') ),		'view_item' => array( __('View Post'), __('View Page') ),		'search_items' => array( __('Search Posts'), __('Search Pages') ),		'not_found' => array( __('No posts found'), __('No pages found') ),		'not_found_in_trash' => array( __('No posts found in Trash'), __('No pages found in Trash') ),		'parent_item_colon' => array( null, __('Parent Page:') )	);	return _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );}/** * Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object * * @access private */function _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {	if ( isset( $object->label ) && empty( $object->labels['name'] ) )		$object->labels['name'] = $object->label;	if ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )		$object->labels['singular_name'] = $object->labels['name'];	$defaults = array_map( create_function( '$x', $object->hierarchical? 'return $x[1];' : 'return $x[0];' ), $nohier_vs_hier_defaults );	$labels = array_merge( $defaults, $object->labels );	return (object)$labels;}/** * Register support of certain features for a post type. * * All features are directly associated with a functional area of the edit screen, such as the * editor or a meta box: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', * 'excerpt', 'page-attributes', 'thumbnail', and 'custom-fields'. * * Additionally, the 'revisions' feature dictates whether the post type will store revisions, * and the 'comments' feature dicates whether the comments count will show on the edit screen. * * @since 3.0.0 * @param string $post_type The post type for which to add the feature * @param string|array $feature the feature being added, can be an array of feature strings or a single string */function add_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	$features = (array) $feature;	foreach ($features as $feature) {		if ( func_num_args() == 2 )			$_wp_post_type_features[$post_type][$feature] = true;		else			$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );	}}/** * Remove support for a feature from a post type. * * @since 3.0.0 * @param string $post_type The post type for which to remove the feature * @param string $feature The feature being removed */function remove_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset($_wp_post_type_features[$post_type]) )		return;	if ( isset($_wp_post_type_features[$post_type][$feature]) )		unset($_wp_post_type_features[$post_type][$feature]);}/** * Checks a post type's support for a given feature * * @since 3.0.0 * @param string $post_type The post type being checked * @param string $feature the feature being checked * @return boolean */function post_type_supports( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset( $_wp_post_type_features[$post_type][$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 2 )		return true;	// @todo Allow pluggable arg checking	//$args = array_slice( func_get_args(), 2 );	return true;}/** * Updates the post type for the post ID. * * The page or post cache will be cleaned for the post ID. * * @since 2.5.0 * * @uses $wpdb * * @param int $post_id Post ID to change post type. Not actually optional. * @param string $post_type Optional, default is post. Supported values are 'post' or 'page' to *  name a few. * @return int Amount of rows changed. Should be 1 for success and 0 for failure. */function set_post_type( $post_id = 0, $post_type = 'post' ) {	global $wpdb;	$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');	$return = $wpdb->update($wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );	if ( 'page' == $post_type )		clean_page_cache($post_id);	else		clean_post_cache($post_id);	return $return;}/** * Retrieve list of latest posts or posts matching criteria. * * The defaults are as follows: *     'numberposts' - Default is 5. Total number of posts to retrieve. *     'offset' - Default is 0. See {@link WP_Query::query()} for more. *     'category' - What category to pull the posts from. *     'orderby' - Default is 'post_date'. How to order the posts. *     'order' - Default is 'DESC'. The order to retrieve the posts. *     'include' - See {@link WP_Query::query()} for more. *     'exclude' - See {@link WP_Query::query()} for more. *     'meta_key' - See {@link WP_Query::query()} for more. *     'meta_value' - See {@link WP_Query::query()} for more. *     'post_type' - Default is 'post'. Can be 'page', or 'attachment' to name a few. *     'post_parent' - The parent of the post or post type. *     'post_status' - Default is 'published'. Post status to retrieve. * * @since 1.2.0 * @uses $wpdb * @uses WP_Query::query() See for more default arguments and information. * @link http://codex.wordpress.org/Template_Tags/get_posts * * @param array $args Optional. Overrides defaults. * @return array List of posts. */function get_posts($args = null) {	$defaults = array(		'numberposts' => 5, 'offset' => 0,		'category' => 0, 'orderby' => 'post_date',		'order' => 'DESC', 'include' => array(),		'exclude' => array(), 'meta_key' => '',		'meta_value' =>'', 'post_type' => 'post',		'suppress_filters' => true	);	$r = wp_parse_args( $args, $defaults );	if ( empty( $r['post_status'] ) )		$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';	if ( ! empty($r['numberposts']) )		$r['posts_per_page'] = $r['numberposts'];	if ( ! empty($r['category']) )		$r['cat'] = $r['category'];	if ( ! empty($r['include']) ) {		$incposts = wp_parse_id_list( $r['include'] );		$r['posts_per_page'] = count($incposts);  // only the number of posts included		$r['post__in'] = $incposts;	} elseif ( ! empty($r['exclude']) )		$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );	$r['caller_get_posts'] = true;	$get_posts = new WP_Query;	return $get_posts->query($r);}//// Post meta functions///** * Add meta data field to a post. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/add_post_meta * * @param int $post_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_post_meta($post_id, $meta_key, $meta_value, $unique = false) {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return add_metadata('post', $post_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a post. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/delete_post_meta * * @param int $post_id post ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_post_meta($post_id, $meta_key, $meta_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return delete_metadata('post', $post_id, $meta_key, $meta_value);}/** * Retrieve post meta field for a post. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post_meta * * @param int $post_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_post_meta($post_id, $key, $single = false) {	return get_metadata('post', $post_id, $key, $single);}/** * Update post meta field based on post ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and post ID. * * If the meta field for the post does not exist, it will be added. * * @since 1.5 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/update_post_meta * * @param int $post_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return update_metadata('post', $post_id, $meta_key, $meta_value, $prev_value);}/** * Delete everything from post meta matching meta key. * * @since 2.3.0 * @uses $wpdb * * @param string $post_meta_key Key to search for when deleting. * @return bool Whether the post meta key was deleted from the database */function delete_post_meta_by_key($post_meta_key) {	if ( !$post_meta_key )		return false;	global $wpdb;	$post_ids = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key));	if ( $post_ids ) {		$postmetaids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key ) );		$in = implode( ',', array_fill(1, count($postmetaids), '%d'));		do_action( 'delete_postmeta', $postmetaids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN($in)", $postmetaids ));		do_action( 'deleted_postmeta', $postmetaids );		foreach ( $post_ids as $post_id )			wp_cache_delete($post_id, 'post_meta');		return true;	}	return false;}/** * Retrieve post meta fields, based on post ID. * * The post meta fields are retrieved from the cache, so the function is * optimized to be called more than once. It also applies to the functions, that * use this function. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom * * @uses $id Current Loop Post ID * * @param int $post_id post ID * @return array */function get_post_custom($post_id = 0) {	global $id;	if ( !$post_id )		$post_id = (int) $id;	$post_id = (int) $post_id;	if ( ! wp_cache_get($post_id, 'post_meta') )		update_postmeta_cache($post_id);	return wp_cache_get($post_id, 'post_meta');}/** * Retrieve meta field names for a post. * * If there are no meta fields, then nothing (null) will be returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_keys * * @param int $post_id post ID * @return array|null Either array of the keys, or null if keys could not be retrieved. */function get_post_custom_keys( $post_id = 0 ) {	$custom = get_post_custom( $post_id );	if ( !is_array($custom) )		return;	if ( $keys = array_keys($custom) )		return $keys;}/** * Retrieve values for a custom post field. * * The parameters must not be considered optional. All of the post meta fields * will be retrieved and only the meta field key values returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_values * * @param string $key Meta field key. * @param int $post_id Post ID * @return array Meta field values. */function get_post_custom_values( $key = '', $post_id = 0 ) {	if ( !$key )		return null;	$custom = get_post_custom($post_id);	return isset($custom[$key]) ? $custom[$key] : null;}/** * Check if post is sticky. * * Sticky posts should remain at the top of The Loop. If the post ID is not * given, then The Loop ID for the current post will be used. * * @since 2.7.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post is sticky. */function is_sticky($post_id = null) {	global $id;	$post_id = absint($post_id);	if ( !$post_id )		$post_id = absint($id);	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return false;	if ( in_array($post_id, $stickies) )		return true;	return false;}/** * Sanitize every post field. * * If the context is 'raw', then the post object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_post_field() Used to sanitize the fields. * * @param object|array $post The Post Object or Array * @param string $context Optional, default is 'display'. How to sanitize post fields. * @return object|array The now sanitized Post Object or Array (will be the same type as $post) */function sanitize_post($post, $context = 'display') {	if ( is_object($post) ) {		// Check if post already filtered for this context		if ( isset($post->filter) && $context == $post->filter )			return $post;		if ( !isset($post->ID) )			$post->ID = 0;		foreach ( array_keys(get_object_vars($post)) as $field )			$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);		$post->filter = $context;	} else {		// Check if post already filtered for this context		if ( isset($post['filter']) && $context == $post['filter'] )			return $post;		if ( !isset($post['ID']) )			$post['ID'] = 0;		foreach ( array_keys($post) as $field )			$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);		$post['filter'] = $context;	}	return $post;}/** * Sanitize post field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $post_id if $context == 'edit' and field name prefix == 'post_'. * * @uses apply_filters() Calls 'edit_post_$field' passing $value and $post_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'post_'. * * @uses apply_filters() Calls '$field' passing $value, $post_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls 'post_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'post_'. * * @param string $field The Post Object field name. * @param mixed $value The Post Object value. * @param int $post_id Post ID. * @param string $context How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_post_field($field, $value, $post_id, $context) {	$int_fields = array('ID', 'post_parent', 'menu_order');	if ( in_array($field, $int_fields) )		$value = (int) $value;	// Fields which contain arrays of ints.	$array_int_fields = array( 'ancestors' );	if ( in_array($field, $array_int_fields) ) {		$value = array_map( 'absint', $value);		return $value;	}	if ( 'raw' == $context )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'post_') ) {		$prefixed = true;		$field_no_prefix = str_replace('post_', '', $field);	}	if ( 'edit' == $context ) {		$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $post_id);			// Old school			$value = apply_filters("${field_no_prefix}_edit_pre", $value, $post_id);		} else {			$value = apply_filters("edit_post_$field", $value, $post_id);		}		if ( in_array($field, $format_to_edit) ) {			if ( 'post_content' == $field )				$value = format_to_edit($value, user_can_richedit());			else				$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);			$value = apply_filters("${field_no_prefix}_save_pre", $value);		} else {			$value = apply_filters("pre_post_$field", $value);			$value = apply_filters("${field}_pre", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $post_id, $context);		else			$value = apply_filters("post_$field", $value, $post_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Make a post sticky. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function stick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		$stickies = array($post_id);	if ( ! in_array($post_id, $stickies) )		$stickies[] = $post_id;	update_option('sticky_posts', $stickies);}/** * Unstick a post. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function unstick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return;	if ( ! in_array($post_id, $stickies) )		return;	$offset = array_search($post_id, $stickies);	if ( false === $offset )		return;	array_splice($stickies, $offset, 1);	update_option('sticky_posts', $stickies);}/** * Count number of posts of a post type and is user has permissions to view. * * This function provides an efficient method of finding the amount of post's * type a blog has. Another method is to count the amount of items in * get_posts(), but that method has a lot of overhead with doing so. Therefore, * when developing for 2.5+, use this function instead. * * The $perm parameter checks for 'readable' value and if the user can read * private posts, it will display that for the user that is signed in. * * @since 2.5.0 * @link http://codex.wordpress.org/Template_Tags/wp_count_posts * * @param string $type Optional. Post type to retrieve count * @param string $perm Optional. 'readable' or empty. * @return object Number of posts for each status */function wp_count_posts( $type = 'post', $perm = '' ) {	global $wpdb;	$user = wp_get_current_user();	$cache_key = $type;	$query = "SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s";	if ( 'readable' == $perm && is_user_logged_in() ) {		$post_type_object = get_post_type_object($type);		if ( !current_user_can( $post_type_object->cap->read_private_posts ) ) {			$cache_key .= '_' . $perm . '_' . $user->ID;			$query .= " AND (post_status != 'private' OR ( post_author = '$user->ID' AND post_status = 'private' ))";		}	}	$query .= ' GROUP BY post_status';	$count = wp_cache_get($cache_key, 'counts');	if ( false !== $count )		return $count;	$count = $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );	$stats = array();	foreach ( get_post_stati() as $state )		$stats[$state] = 0;	foreach ( (array) $count as $row )		$stats[$row['post_status']] = $row['num_posts'];	$stats = (object) $stats;	wp_cache_set($cache_key, $stats, 'counts');	return $stats;}/** * Count number of attachments for the mime type(s). * * If you set the optional mime_type parameter, then an array will still be * returned, but will only have the item you are looking for. It does not give * you the number of attachments that are children of a post. You can get that * by counting the number of children that post has. * * @since 2.5.0 * * @param string|array $mime_type Optional. Array or comma-separated list of MIME patterns. * @return array Number of posts for each mime type. */function wp_count_attachments( $mime_type = '' ) {	global $wpdb;	$and = wp_post_mime_type_where( $mime_type );	$count = $wpdb->get_results( "SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type", ARRAY_A );	$stats = array( );	foreach( (array) $count as $row ) {		$stats[$row['post_mime_type']] = $row['num_posts'];	}	$stats['trash'] = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and");	return (object) $stats;}/** * Check a MIME-Type against a list. * * If the wildcard_mime_types parameter is a string, it must be comma separated * list. If the real_mime_types is a string, it is also comma separated to * create the list. * * @since 2.5.0 * * @param string|array $wildcard_mime_types e.g. audio/mpeg or image (same as image/*) or *  flash (same as *flash*). * @param string|array $real_mime_types post_mime_type values * @return array array(wildcard=>array(real types)) */function wp_match_mime_types($wildcard_mime_types, $real_mime_types) {	$matches = array();	if ( is_string($wildcard_mime_types) )		$wildcard_mime_types = array_map('trim', explode(',', $wildcard_mime_types));	if ( is_string($real_mime_types) )		$real_mime_types = array_map('trim', explode(',', $real_mime_types));	$wild = '[-._a-z0-9]*';	foreach ( (array) $wildcard_mime_types as $type ) {		$type = str_replace('*', $wild, $type);		$patternses[1][$type] = "^$type$";		if ( false === strpos($type, '/') ) {			$patternses[2][$type] = "^$type/";			$patternses[3][$type] = $type;		}	}	asort($patternses);	foreach ( $patternses as $patterns )		foreach ( $patterns as $type => $pattern )			foreach ( (array) $real_mime_types as $real )				if ( preg_match("#$pattern#", $real) && ( empty($matches[$type]) || false === array_search($real, $matches[$type]) ) )					$matches[$type][] = $real;	return $matches;}/** * Convert MIME types into SQL. * * @since 2.5.0 * * @param string|array $mime_types List of mime types or comma separated string of mime types. * @param string $table_alias Optional. Specify a table alias, if needed. * @return string The SQL AND clause for mime searching. */function wp_post_mime_type_where($post_mime_types, $table_alias = '') {	$where = '';	$wildcards = array('', '%', '%/%');	if ( is_string($post_mime_types) )		$post_mime_types = array_map('trim', explode(',', $post_mime_types));	foreach ( (array) $post_mime_types as $mime_type ) {		$mime_type = preg_replace('/\s/', '', $mime_type);		$slashpos = strpos($mime_type, '/');		if ( false !== $slashpos ) {			$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));			$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));			if ( empty($mime_subgroup) )				$mime_subgroup = '*';			else				$mime_subgroup = str_replace('/', '', $mime_subgroup);			$mime_pattern = "$mime_group/$mime_subgroup";		} else {			$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);			if ( false === strpos($mime_pattern, '*') )				$mime_pattern .= '/*';		}		$mime_pattern = preg_replace('/\*+/', '%', $mime_pattern);		if ( in_array( $mime_type, $wildcards ) )			return '';		if ( false !== strpos($mime_pattern, '%') )			$wheres[] = empty($table_alias) ? "post_mime_type LIKE '$mime_pattern'" : "$table_alias.post_mime_type LIKE '$mime_pattern'";		else			$wheres[] = empty($table_alias) ? "post_mime_type = '$mime_pattern'" : "$table_alias.post_mime_type = '$mime_pattern'";	}	if ( !empty($wheres) )		$where = ' AND (' . join(' OR ', $wheres) . ') ';	return $where;}/** * Trashes or deletes a post or page. * * When the post and page is permanently deleted, everything that is tied to it is deleted also. * This includes comments, post meta fields, and terms associated with the post. * * The post or page is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * @since 1.0.0 * @uses do_action() on 'delete_post' before deletion unless post type is 'attachment'. * @uses do_action() on 'deleted_post' after deletion unless post type is 'attachment'. * @uses wp_delete_attachment() if post type is 'attachment'. * @uses wp_trash_post() if item should be trashed. * * @param int $postid Post ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure */function wp_delete_post( $postid = 0, $force_delete = false ) {	global $wpdb, $wp_rewrite;	if ( !$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $postid)) )		return $post;	if ( !$force_delete && ( $post->post_type == 'post' || $post->post_type == 'page') && get_post_status( $postid ) != 'trash' && EMPTY_TRASH_DAYS )			return wp_trash_post($postid);	if ( $post->post_type == 'attachment' )		return wp_delete_attachment( $postid, $force_delete );	do_action('delete_post', $postid);	delete_post_meta($postid,'_wp_trash_meta_status');	delete_post_meta($postid,'_wp_trash_meta_time');	wp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));	$parent_data = array( 'post_parent' => $post->post_parent );	$parent_where = array( 'post_parent' => $postid );	if ( 'page' == $post->post_type) {	 	// if the page is defined in option page_on_front or post_for_posts,		// adjust the corresponding options		if ( get_option('page_on_front') == $postid ) {			update_option('show_on_front', 'posts');			delete_option('page_on_front');		}		if ( get_option('page_for_posts') == $postid ) {			delete_option('page_for_posts');		}		// Point children of this page to its parent, also clean the cache of affected children		$children_query = $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type='page'", $postid);		$children = $wpdb->get_results($children_query);		$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'page' ) );	} else {		unstick_post($postid);	}	// Do raw query.  wp_get_post_revisions() is filtered	$revision_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'", $postid ) );	// Use wp_delete_post (via wp_delete_post_revision) again.  Ensures any meta/misplaced data gets cleaned up.	foreach ( $revision_ids as $revision_id )		wp_delete_post_revision( $revision_id );	// Point all attachments to this post up one level	$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $postid ));	if ( ! empty($comment_ids) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $postid ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $postid );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $postid ));	do_action( 'deleted_post', $postid );	if ( 'page' == $post->post_type ) {		clean_page_cache($postid);		foreach ( (array) $children as $child )			clean_page_cache($child->ID);		$wp_rewrite->flush_rules(false);	} else {		clean_post_cache($postid);	}	wp_clear_scheduled_hook('publish_future_post', array( $postid ) );	do_action('deleted_post', $postid);	return $post;}/** * Moves a post or page to the Trash * * If trash is disabled, the post or page is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_post' before trashing * @uses do_action() on 'trashed_post' after trashing * @uses wp_delete_post() if trash is disabled * * @param int $postid Post ID. * @return mixed False on failure */function wp_trash_post($post_id = 0) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_post($post_id, true);	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] == 'trash' )		return false;	do_action('trash_post', $post_id);	add_post_meta($post_id,'_wp_trash_meta_status', $post['post_status']);	add_post_meta($post_id,'_wp_trash_meta_time', time());	$post['post_status'] = 'trash';	wp_insert_post($post);	wp_trash_post_comments($post_id);	do_action('trashed_post', $post_id);	return $post;}/** * Restores a post or page from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_post' before undeletion * @uses do_action() on 'untrashed_post' after undeletion * * @param int $postid Post ID. * @return mixed False on failure */function wp_untrash_post($post_id = 0) {	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] != 'trash' )		return false;	do_action('untrash_post', $post_id);	$post_status = get_post_meta($post_id, '_wp_trash_meta_status', true);	$post['post_status'] = $post_status;	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	wp_insert_post($post);	wp_untrash_post_comments($post_id);	do_action('untrashed_post', $post_id);	return $post;}/** * Moves comments for a post to the trash * * @since 2.9.0 * @uses do_action() on 'trash_post_comments' before trashing * @uses do_action() on 'trashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_trash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	do_action('trash_post_comments', $post_id);	$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id) );	if ( empty($comments) )		return;	// Cache current status for each comment	$statuses = array();	foreach ( $comments as $comment )		$statuses[$comment->comment_ID] = $comment->comment_approved;	add_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);	// Set status for all comments to post-trashed	$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));	clean_comment_cache( array_keys($statuses) );	do_action('trashed_post_comments', $post_id, $statuses);	return $result;}/** * Restore comments for a post from the trash * * @since 2.9.0 * @uses do_action() on 'untrash_post_comments' before trashing * @uses do_action() on 'untrashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_untrash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);	if ( empty($statuses) )		return true;	do_action('untrash_post_comments', $post_id);	// Restore each comment to its original status	$group_by_status = array();	foreach ( $statuses as $comment_id => $comment_status )		$group_by_status[$comment_status][] = $comment_id;	foreach ( $group_by_status as $status => $comments ) {		// Sanity check. This shouldn't happen.		if ( 'post-trashed' == $status )			$status = '0';		$comments_in = implode( "', '", $comments );		$wpdb->query( "UPDATE $wpdb->comments SET comment_approved = '$status' WHERE comment_ID IN ('" . $comments_in . "')" );	}	clean_comment_cache( array_keys($statuses) );	delete_post_meta($post_id, '_wp_trash_meta_comments_status');	do_action('untrashed_post_comments', $post_id);}/** * Retrieve the list of categories for a post. * * Compatibility layer for themes and plugins. Also an easy layer of abstraction * away from the complexity of the taxonomy layer. * * @since 2.1.0 * * @uses wp_get_object_terms() Retrieves the categories. Args details can be found here. * * @param int $post_id Optional. The Post ID. * @param array $args Optional. Overwrite the defaults. * @return array */function wp_get_post_categories( $post_id = 0, $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'ids');	$args = wp_parse_args( $args, $defaults );	$cats = wp_get_object_terms($post_id, 'category', $args);	return $cats;}/** * Retrieve the tags for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_tags( $post_id = 0, $args = array() ) {	return wp_get_post_terms( $post_id, 'post_tag', $args);}/** * Retrieve the terms for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.8.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag. * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$tags = wp_get_object_terms($post_id, $taxonomy, $args);	return $tags;}/** * Retrieve number of recent posts. * * @since 1.0.0 * @uses $wpdb * * @param int $num Optional, default is 10. Number of posts to get. * @return array List of posts. */function wp_get_recent_posts($num = 10) {	global $wpdb;	// Set the limit clause, if we got a limit	$num = (int) $num;	if ( $num ) {		$limit = "LIMIT $num";	}	$sql = "SELECT * FROM $wpdb->posts WHERE post_type = 'post' AND post_status IN ( 'draft', 'publish', 'future', 'pending', 'private' ) ORDER BY post_date DESC $limit";	$result = $wpdb->get_results($sql, ARRAY_A);	return $result ? $result : array();}/** * Retrieve a single post, based on post ID. * * Has categories in 'post_category' property or key. Has tags in 'tags_input' * property or key. * * @since 1.0.0 * * @param int $postid Post ID. * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A. * @return object|array Post object or array holding post contents and information */function wp_get_single_post($postid = 0, $mode = OBJECT) {	$postid = (int) $postid;	$post = get_post($postid, $mode);	// Set categories and tags	if ( $mode == OBJECT ) {		$post->post_category = array();		if ( is_object_in_taxonomy($post->post_type, 'category') )			$post->post_category = wp_get_post_categories($postid);		$post->tags_input = array();		if ( is_object_in_taxonomy($post->post_type, 'post_tag') )			$post->tags_input = wp_get_post_tags($postid, array('fields' => 'names'));	} else {		$post['post_category'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'category') )			$post['post_category'] = wp_get_post_categories($postid);		$post['tags_input'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'post_tag') )			$post['tags_input'] = wp_get_post_tags($postid, array('fields' => 'names'));	}	return $post;}/** * Insert a post. * * If the $postarr parameter has 'ID' set to a value, then post will be updated. * * You can set the post date manually, but setting the values for 'post_date' * and 'post_date_gmt' keys. You can close the comments or open the comments by * setting the value for 'comment_status' key. * * The defaults for the parameter $postarr are: *     'post_status'   - Default is 'draft'. *     'post_type'     - Default is 'post'. *     'post_author'   - Default is current user ID ($user_ID). The ID of the user who added the post. *     'ping_status'   - Default is the value in 'default_ping_status' option. *                       Whether the attachment can accept pings. *     'post_parent'   - Default is 0. Set this for the post it belongs to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Post content filtered. *     'post_excerpt'  - Post excerpt. * * @since 1.0.0 * @link http://core.trac.wordpress.org/ticket/9084 Bug report on 'wp_insert_post_data' filter. * @uses $wpdb * @uses $wp_rewrite * @uses $user_ID * * @uses do_action() Calls 'pre_post_update' on post ID if this is an update. * @uses do_action() Calls 'edit_post' action on post ID and post data if this is an update. * @uses do_action() Calls 'save_post' and 'wp_insert_post' on post id and post data just before *                   returning. * * @uses apply_filters() Calls 'wp_insert_post_data' passing $data, $postarr prior to database *                       update or insert. * @uses wp_transition_post_status() * * @param array $postarr Optional. Overrides defaults. * @param bool $wp_error Optional. Allow return of WP_Error on failure. * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success. */function wp_insert_post($postarr = array(), $wp_error = false) {	global $wpdb, $wp_rewrite, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0,		'post_content' => '', 'post_title' => '');	$postarr = wp_parse_args($postarr, $defaults);	$postarr = sanitize_post($postarr, 'db');	// export array as variables	extract($postarr, EXTR_SKIP);	// Are we updating or creating?	$update = false;	if ( !empty($ID) ) {		$update = true;		$previous_status = get_post_field('post_status', $ID);	} else {		$previous_status = 'new';	}	if ( ('' == $post_content) && ('' == $post_title) && ('' == $post_excerpt) && ('attachment' != $post_type) ) {		if ( $wp_error )			return new WP_Error('empty_content', __('Content, title, and excerpt are empty.'));		else			return 0;	}	if ( empty($post_type) )		$post_type = 'post';	if ( empty($post_status) )		$post_status = 'draft';	if ( !empty($post_category) )		$post_category = array_filter($post_category); // Filter out empty terms	// Make sure we set a valid category.	if ( empty($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	if ( empty($post_author) )		$post_author = $user_ID;	$post_ID = 0;	// Get the post ID and GUID	if ( $update ) {		$post_ID = (int) $ID;		$guid = get_post_field( 'guid', $post_ID );		$post_before = get_post($post_ID);	}	// Don't allow contributors to set to set the post slug for pending review posts	if ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) )		$post_name = '';	// Create a valid post name.  Drafts and pending posts are allowed to have an empty	// post name.	if ( empty($post_name) ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_name = sanitize_title($post_title);		else			$post_name = '';	} else {		$post_name = sanitize_title($post_name);	}	// If the post date is empty (due to having been new or a draft) and status is not 'draft' or 'pending', set date to now	if ( empty($post_date) || '0000-00-00 00:00:00' == $post_date )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) || '0000-00-00 00:00:00' == $post_date_gmt ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_date_gmt = get_gmt_from_date($post_date);		else			$post_date_gmt = '0000-00-00 00:00:00';	}	if ( $update || '0000-00-00 00:00:00' == $post_date ) {		$post_modified     = current_time( 'mysql' );		$post_modified_gmt = current_time( 'mysql', 1 );	} else {		$post_modified     = $post_date;		$post_modified_gmt = $post_date_gmt;	}	if ( 'publish' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) )			$post_status = 'future';	} elseif( 'future' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) )			$post_status = 'publish';	}	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( ! isset($pinged) )		$pinged = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( !empty($post_ID) ) {		if ( $post_parent == $post_ID ) {			// Post can't be its own parent			$post_parent = 0;		} elseif ( !empty($post_parent) ) {			$parent_post = get_post($post_parent);			// Check for circular dependency			if ( isset( $parent_post->post_parent ) && $parent_post->post_parent == $post_ID )				$post_parent = 0;		}	}	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) || 'private' == $post_status )		$post_password = '';	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'guid' ) );	$data = apply_filters('wp_insert_post_data', $data, $postarr);	$data = stripslashes_deep( $data );	$where = array( 'ID' => $post_ID );	if ( $update ) {		do_action( 'pre_post_update', $post_ID );		if ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {			if ( $wp_error )				return new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);			else				return 0;		}	} else {		if ( isset($post_mime_type) )			$data['post_mime_type'] = stripslashes( $post_mime_type ); // This isn't in the update		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		if ( false === $wpdb->insert( $wpdb->posts, $data ) ) {			if ( $wp_error )				return new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);			else				return 0;		}		$post_ID = (int) $wpdb->insert_id;		// use the newly generated $post_ID		$where = array( 'ID' => $post_ID );	}	if ( empty($data['post_name']) && !in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {		$data['post_name'] = sanitize_title($data['post_title'], $post_ID);		$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );	}	if ( is_object_in_taxonomy($post_type, 'category') )		wp_set_post_categories( $post_ID, $post_category );	if ( isset( $tags_input ) && is_object_in_taxonomy($post_type, 'post_tag') )		wp_set_post_tags( $post_ID, $tags_input );	// new-style support for all custom taxonomies	if ( !empty($tax_input) ) {		foreach ( $tax_input as $taxonomy => $tags ) {			$taxonomy_obj = get_taxonomy($taxonomy);			if ( is_array($tags) ) // array = hierarchical, string = non-hierarchical.				$tags = array_filter($tags);			if ( current_user_can($taxonomy_obj->cap->assign_terms) )				wp_set_post_terms( $post_ID, $tags, $taxonomy );		}	}	$current_guid = get_post_field( 'guid', $post_ID );	if ( 'page' == $data['post_type'] )		clean_page_cache($post_ID);	else		clean_post_cache($post_ID);	// Set GUID	if ( !$update && '' == $current_guid )		$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );	$post = get_post($post_ID);	if ( !empty($page_template) && 'page' == $data['post_type'] ) {		$post->page_template = $page_template;		$page_templates = get_page_templates();		if ( 'default' != $page_template && !in_array($page_template, $page_templates) ) {			if ( $wp_error )				return new WP_Error('invalid_page_template', __('The page template is invalid.'));			else				return 0;		}		update_post_meta($post_ID, '_wp_page_template',  $page_template);	}	wp_transition_post_status($data['post_status'], $previous_status, $post);	if ( $update ) {		do_action('edit_post', $post_ID, $post);		$post_after = get_post($post_ID);		do_action( 'post_updated', $post_ID, $post_after, $post_before);	}	do_action('save_post', $post_ID, $post);	do_action('wp_insert_post', $post_ID, $post);	return $post_ID;}/** * Update a post with new post data. * * The date does not have to be set for drafts. You can set the date and it will * not be overridden. * * @since 1.0.0 * * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not. * @return int 0 on failure, Post ID on success. */function wp_update_post($postarr = array()) {	if ( is_object($postarr) ) {		// non-escaped post was passed		$postarr = get_object_vars($postarr);		$postarr = add_magic_quotes($postarr);	}	// First, get all of the original fields	$post = wp_get_single_post($postarr['ID'], ARRAY_A);	// Escape data pulled from DB.	$post = add_magic_quotes($post);	// Passed post category list overwrites existing category list if not empty.	if ( isset($postarr['post_category']) && is_array($postarr['post_category'])			 && 0 != count($postarr['post_category']) )		$post_cats = $postarr['post_category'];	else		$post_cats = $post['post_category'];	// Drafts shouldn't be assigned a date unless explicitly done so by the user	if ( in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&			 ('0000-00-00 00:00:00' == $post['post_date_gmt']) )		$clear_date = true;	else		$clear_date = false;	// Merge old and new fields with new fields overwriting old ones.	$postarr = array_merge($post, $postarr);	$postarr['post_category'] = $post_cats;	if ( $clear_date ) {		$postarr['post_date'] = current_time('mysql');		$postarr['post_date_gmt'] = '';	}	if ($postarr['post_type'] == 'attachment')		return wp_insert_attachment($postarr);	return wp_insert_post($postarr);}/** * Publish a post by transitioning the post status. * * @since 2.1.0 * @uses $wpdb * @uses do_action() Calls 'edit_post', 'save_post', and 'wp_insert_post' on post_id and post data. * * @param int $post_id Post ID. * @return null */function wp_publish_post($post_id) {	global $wpdb;	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'publish' == $post->post_status )		return;	$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post_id ) );	$old_status = $post->post_status;	$post->post_status = 'publish';	wp_transition_post_status('publish', $old_status, $post);	// Update counts for the post's terms.	foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {		$tt_ids = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'tt_ids'));		wp_update_term_count($tt_ids, $taxonomy);	}	do_action('edit_post', $post_id, $post);	do_action('save_post', $post_id, $post);	do_action('wp_insert_post', $post_id, $post);}/** * Publish future post and make sure post ID has future post status. * * Invoked by cron 'publish_future_post' event. This safeguard prevents cron * from publishing drafts, etc. * * @since 2.5.0 * * @param int $post_id Post ID. * @return null Nothing is returned. Which can mean that no action is required or post was published. */function check_and_publish_future_post($post_id) {	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'future' != $post->post_status )		return;	$time = strtotime( $post->post_date_gmt . ' GMT' );	if ( $time > time() ) { // Uh oh, someone jumped the gun!		wp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system		wp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );		return;	}	return wp_publish_post($post_id);}/** * Computes a unique slug for the post, when given the desired slug and some post details. * * @global wpdb $wpdb * @global WP_Rewrite $wp_rewrite * @param string $slug the desired slug (post_name) * @param integer $post_ID * @param string $post_status no uniqueness checks are made if the post is still draft or pending * @param string $post_type * @param integer $post_parent * @return string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix) */function wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {	if ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )		return $slug;	global $wpdb, $wp_rewrite;	$feeds = $wp_rewrite->feeds;	if ( ! is_array( $feeds ) )		$feeds = array();	$hierarchical_post_types = apply_filters( 'hierarchical_post_types', array( 'page' ) );	if ( 'attachment' == $post_type ) {		// Attachment slugs must be unique across all types.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr ($slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare($check_sql, $alt_post_name, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} elseif ( in_array( $post_type, $hierarchical_post_types ) ) {		// Page slugs must be unique within their own trees. Pages are in a separate		// namespace than posts so page slugs are allowed to overlap post slugs.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( '" . implode( "', '", esc_sql( $hierarchical_post_types ) ) . "' ) AND ID != %d AND post_parent = %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID, $post_parent ) );		if ( $post_name_check || in_array( $slug, $feeds ) || preg_match( '@^(page)?\d+$@', $slug ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID, $post_parent ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} else {		// Post slugs must be unique across all posts.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	}	return $slug;}/** * Adds tags to a post. * * @uses wp_set_post_tags() Same first two parameters, but the last parameter is always set to true. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @param int $post_id Post ID * @param string $tags The tags to set for the post, separated by commas. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_add_post_tags($post_id = 0, $tags = '') {	return wp_set_post_tags($post_id, $tags, true);}/** * Set the tags for a post. * * @since 2.3.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {	return wp_set_post_terms( $post_id, $tags, 'post_tag', $append);}/** * Set the terms for a post. * * @since 2.8.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( empty($tags) )		$tags = array();	$tags = is_array($tags) ? $tags : explode( ',', trim($tags, " \n\t\r\0\x0B,") );	// Hierarchical taxonomies must always pass IDs rather than names so that children with the same	// names but different parents aren't confused.	if ( is_taxonomy_hierarchical( $taxonomy ) ) {		$tags = array_map( 'intval', $tags );		$tags = array_unique( $tags );	}	wp_set_object_terms($post_id, $tags, $taxonomy, $append);}/** * Set categories for a post. * * If the post categories parameter is not set, then the default category is * going used. * * @since 2.1.0 * * @param int $post_ID Post ID. * @param array $post_categories Optional. List of categories. * @return bool|mixed */function wp_set_post_categories($post_ID = 0, $post_categories = array()) {	$post_ID = (int) $post_ID;	$post_type = get_post_type( $post_ID );	$post_status = get_post_status( $post_ID );	// If $post_categories isn't already an array, make it one:	if ( !is_array($post_categories) || empty($post_categories) ) {		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_categories = array( get_option('default_category') );		else			$post_categories = array();	} else if ( 1 == count($post_categories) && '' == reset($post_categories) ) {		return true;	}	if ( !empty($post_categories) ) {		$post_categories = array_map('intval', $post_categories);		$post_categories = array_unique($post_categories);	}	return wp_set_object_terms($post_ID, $post_categories, 'category');}/** * Transition the post status of a post. * * Calls hooks to transition post status. * * The first is 'transition_post_status' with new status, old status, and post data. * * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the * post data. * * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status * parameter and POSTTYPE is post_type post data. * * @since 2.3.0 * @link http://codex.wordpress.org/Post_Status_Transitions * * @uses do_action() Calls 'transition_post_status' on $new_status, $old_status and *  $post if there is a status change. * @uses do_action() Calls '${old_status}_to_$new_status' on $post if there is a status change. * @uses do_action() Calls '${new_status}_$post->post_type' on post ID and $post. * * @param string $new_status Transition to this post status. * @param string $old_status Previous post status. * @param object $post Post data. */function wp_transition_post_status($new_status, $old_status, $post) {	do_action('transition_post_status', $new_status, $old_status, $post);	do_action("${old_status}_to_$new_status", $post);	do_action("${new_status}_$post->post_type", $post->ID, $post);}//// Trackback and ping functions///** * Add a URL to those already pung. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @param string $uri Ping URI. * @return int How many rows were updated. */function add_ping($post_id, $uri) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung[] = $uri;	$new = implode("\n", $pung);	$new = apply_filters('add_ping', $new);	// expected_slashed ($new)	$new = stripslashes($new);	return $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post_id ) );}/** * Retrieve enclosures already enclosed for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array List of enclosures */function get_enclosed($post_id) {	$custom_fields = get_post_custom( $post_id );	$pung = array();	if ( !is_array( $custom_fields ) )		return $pung;	foreach ( $custom_fields as $key => $val ) {		if ( 'enclosure' != $key || !is_array( $val ) )			continue;		foreach( $val as $enc ) {			$enclosure = split( "\n", $enc );			$pung[] = trim( $enclosure[ 0 ] );		}	}	$pung = apply_filters('get_enclosed', $pung);	return $pung;}/** * Retrieve URLs already pinged for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array */function get_pung($post_id) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung = apply_filters('get_pung', $pung);	return $pung;}/** * Retrieve URLs that need to be pinged. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID * @return array */function get_to_ping($post_id) {	global $wpdb;	$to_ping = $wpdb->get_var( $wpdb->prepare( "SELECT to_ping FROM $wpdb->posts WHERE ID = %d", $post_id ));	$to_ping = trim($to_ping);	$to_ping = preg_split('/\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);	$to_ping = apply_filters('get_to_ping',  $to_ping);	return $to_ping;}/** * Do trackbacks for a list of URLs. * * @since 1.0.0 * * @param string $tb_list Comma separated list of URLs * @param int $post_id Post ID */function trackback_url_list($tb_list, $post_id) {	if ( ! empty( $tb_list ) ) {		// get post data		$postdata = wp_get_single_post($post_id, ARRAY_A);		// import postdata as variables		extract($postdata, EXTR_SKIP);		// form an excerpt		$excerpt = strip_tags($post_excerpt ? $post_excerpt : $post_content);		if (strlen($excerpt) > 255) {			$excerpt = substr($excerpt,0,252) . '...';		}		$trackback_urls = explode(',', $tb_list);		foreach( (array) $trackback_urls as $tb_url) {			$tb_url = trim($tb_url);			trackback($tb_url, stripslashes($post_title), $excerpt, $post_id);		}	}}//// Page functions///** * Get a list of page IDs. * * @since 2.0.0 * @uses $wpdb * * @return array List of page IDs. */function get_all_page_ids() {	global $wpdb;	if ( ! $page_ids = wp_cache_get('all_page_ids', 'posts') ) {		$page_ids = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'page'");		wp_cache_add('all_page_ids', $page_ids, 'posts');	}	return $page_ids;}/** * Retrieves page data given a page ID or page object. * * @since 1.5.1 * * @param mixed $page Page object or page ID. Passed by reference. * @param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter How the return value should be filtered. * @return mixed Page data. */function &get_page(&$page, $output = OBJECT, $filter = 'raw') {	$p = get_post($page, $output, $filter);	return $p;}/** * Retrieves a page given its path. * * @since 2.1.0 * @uses $wpdb * * @param string $page_path Page path * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed Null when complete. */function get_page_by_path($page_path, $output = OBJECT, $post_type = 'page') {	global $wpdb;	$page_path = rawurlencode(urldecode($page_path));	$page_path = str_replace('%2F', '/', $page_path);	$page_path = str_replace('%20', ' ', $page_path);	$page_paths = '/' . trim($page_path, '/');	$leaf_path  = sanitize_title(basename($page_paths));	$page_paths = explode('/', $page_paths);	$full_path = '';	foreach ( (array) $page_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);	$pages = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_name = %s AND (post_type = %s OR post_type = 'attachment')", $leaf_path, $post_type ));	if ( empty($pages) )		return null;	foreach ( $pages as $page ) {		$path = '/' . $leaf_path;		$curpage = $page;		while ( $curpage->post_parent != 0 ) {			$curpage = $wpdb->get_row( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE ID = %d and post_type = %s", $curpage->post_parent, $post_type ));			$path = '/' . $curpage->post_name . $path;		}		if ( $path == $full_path )			return get_page($page->ID, $output, $post_type);	}	return null;}/** * Retrieve a page given its title. * * @since 2.1.0 * @uses $wpdb * * @param string $page_title Page title * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed */function get_page_by_title($page_title, $output = OBJECT, $post_type = 'page' ) {	global $wpdb;	$page = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_title = %s AND post_type= %s", $page_title, $post_type ) );	if ( $page )		return get_page($page, $output);	return null;}/** * Retrieve child pages from list of pages matching page ID. * * Matches against the pages parameter against the page ID. Also matches all * children for the same to retrieve all children of a page. Does not make any * SQL queries to get the children. * * @since 1.5.1 * * @param int $page_id Page ID. * @param array $pages List of pages' objects. * @return array */function &get_page_children($page_id, $pages) {	$page_list = array();	foreach ( (array) $pages as $page ) {		if ( $page->post_parent == $page_id ) {			$page_list[] = $page;			if ( $children = get_page_children($page->ID, $pages) )				$page_list = array_merge($page_list, $children);		}	}	return $page_list;}/** * Order the pages with children under parents in a flat list. * * It uses auxiliary structure to hold parent-children relationships and * runs in O(N) complexity * * @since 2.0.0 * * @param array $posts Posts array. * @param int $parent Parent page ID. * @return array A list arranged by hierarchy. Children immediately follow their parents. */function &get_page_hierarchy( &$pages, $page_id = 0 ) {	if ( empty( $pages ) ) {		$result = array();		return $result;	}	$children = array();	foreach ( (array) $pages as $p ) {		$parent_id = intval( $p->post_parent );		$children[ $parent_id ][] = $p;	 }	 $result = array();	 _page_traverse_name( $page_id, $children, $result );	return $result;}/** * function to traverse and return all the nested children post names of a root page. * $children contains parent-chilren relations * */function _page_traverse_name( $page_id, &$children, &$result ){	if ( isset( $children[ $page_id ] ) ){		foreach( (array)$children[ $page_id ] as $child ) {			$result[ $child->ID ] = $child->post_name;			_page_traverse_name( $child->ID, $children, $result );		}	}}/** * Builds URI for a page. * * Sub pages will be in the "directory" under the parent page post name. * * @since 1.5.0 * * @param mixed $page Page object or page ID. * @return string Page URI. */function get_page_uri($page) {	if ( ! is_object($page) )		$page = get_page($page);	$uri = $page->post_name;	// A page cannot be it's own parent.	if ( $page->post_parent == $page->ID )		return $uri;	while ($page->post_parent != 0) {		$page = get_page($page->post_parent);		$uri = $page->post_name . "/" . $uri;	}	return $uri;}/** * Retrieve a list of pages. * * The defaults that can be overridden are the following: 'child_of', * 'sort_order', 'sort_column', 'post_title', 'hierarchical', 'exclude', * 'include', 'meta_key', 'meta_value','authors', 'number', and 'offset'. * * @since 1.5.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options that overrides defaults. * @return array List of pages matching defaults or $args */function &get_pages($args = '') {	global $wpdb;	$defaults = array(		'child_of' => 0, 'sort_order' => 'ASC',		'sort_column' => 'post_title', 'hierarchical' => 1,		'exclude' => array(), 'include' => array(),		'meta_key' => '', 'meta_value' => '',		'authors' => '', 'parent' => -1, 'exclude_tree' => '',		'number' => '', 'offset' => 0,		'post_type' => 'page', 'post_status' => 'publish',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$number = (int) $number;	$offset = (int) $offset;	// Make sure the post type is hierarchical	$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );	if ( !in_array( $post_type, $hierarchical_post_types ) )		return false;	// Make sure we have a valid post status	if ( !in_array($post_status, get_post_stati()) )		return false;	$cache = array();	$key = md5( serialize( compact(array_keys($defaults)) ) );	if ( $cache = wp_cache_get( 'get_pages', 'posts' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			$pages = apply_filters('get_pages', $cache[ $key ], $r );			return $pages;		}	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include		$parent = -1;		$exclude = '';		$meta_key = '';		$meta_value = '';		$hierarchical = false;		$incpages = wp_parse_id_list( $include );		if ( ! empty( $incpages ) ) {			foreach ( $incpages as $incpage ) {				if (empty($inclusions))					$inclusions = $wpdb->prepare(' AND ( ID = %d ', $incpage);				else					$inclusions .= $wpdb->prepare(' OR ID = %d ', $incpage);			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$expages = wp_parse_id_list( $exclude );		if ( ! empty( $expages ) ) {			foreach ( $expages as $expage ) {				if (empty($exclusions))					$exclusions = $wpdb->prepare(' AND ( ID <> %d ', $expage);				else					$exclusions .= $wpdb->prepare(' AND ID <> %d ', $expage);			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	$author_query = '';	if (!empty($authors)) {		$post_authors = preg_split('/[\s,]+/',$authors);		if ( ! empty( $post_authors ) ) {			foreach ( $post_authors as $post_author ) {				//Do we have an author id or an author login?				if ( 0 == intval($post_author) ) {					$post_author = get_userdatabylogin($post_author);					if ( empty($post_author) )						continue;					if ( empty($post_author->ID) )						continue;					$post_author = $post_author->ID;				}				if ( '' == $author_query )					$author_query = $wpdb->prepare(' post_author = %d ', $post_author);				else					$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);			}			if ( '' != $author_query )				$author_query = " AND ($author_query)";		}	}	$join = '';	$where = "$exclusions $inclusions ";	if ( ! empty( $meta_key ) || ! empty( $meta_value ) ) {		$join = " LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )";		// meta_key and meta_value might be slashed		$meta_key = stripslashes($meta_key);		$meta_value = stripslashes($meta_value);		if ( ! empty( $meta_key ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s", $meta_key);		if ( ! empty( $meta_value ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_value = %s", $meta_value);	}	if ( $parent >= 0 )		$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);	$where_post_type = $wpdb->prepare( "post_type = '%s' AND post_status = '%s'", $post_type, $post_status );	$query = "SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where ";	$query .= $author_query;	$query .= " ORDER BY " . $sort_column . " " . $sort_order ;	if ( !empty($number) )		$query .= ' LIMIT ' . $offset . ',' . $number;	$pages = $wpdb->get_results($query);	if ( empty($pages) ) {		$pages = apply_filters('get_pages', array(), $r);		return $pages;	}	// Sanitize before caching so it'll only get done once	$num_pages = count($pages);	for ($i = 0; $i < $num_pages; $i++) {		$pages[$i] = sanitize_post($pages[$i], 'raw');	}	// Update cache.	update_page_cache($pages);	if ( $child_of || $hierarchical )		$pages = & get_page_children($child_of, $pages);	if ( !empty($exclude_tree) ) {		$exclude = (int) $exclude_tree;		$children = get_page_children($exclude, $pages);		$excludes = array();		foreach ( $children as $child )			$excludes[] = $child->ID;		$excludes[] = $exclude;		$num_pages = count($pages);		for ( $i = 0; $i < $num_pages; $i++ ) {			if ( in_array($pages[$i]->ID, $excludes) )				unset($pages[$i]);		}	}	$cache[ $key ] = $pages;	wp_cache_set( 'get_pages', $cache, 'posts' );	$pages = apply_filters('get_pages', $pages, $r);	return $pages;}//// Attachment functions///** * Check if the attachment URI is local one and is really an attachment. * * @since 2.0.0 * * @param string $url URL to check * @return bool True on success, false on failure. */function is_local_attachment($url) {	if (strpos($url, home_url()) === false)		return false;	if (strpos($url, home_url('/?attachment_id=')) !== false)		return true;	if ( $id = url_to_postid($url) ) {		$post = & get_post($id);		if ( 'attachment' == $post->post_type )			return true;	}	return false;}/** * Insert an attachment. * * If you set the 'ID' in the $object parameter, it will mean that you are * updating and attempt to update the attachment. You can also set the * attachment name or title by setting the key 'post_name' or 'post_title'. * * You can set the dates for the attachment manually by setting the 'post_date' * and 'post_date_gmt' keys' values. * * By default, the comments will use the default settings for whether the * comments are allowed. You can close them manually or keep them open by * setting the value for the 'comment_status' key. * * The $object parameter can have the following: *     'post_status'   - Default is 'draft'. Can not be overridden, set the same as parent post. *     'post_type'     - Default is 'post', will be set to attachment. Can not override. *     'post_author'   - Default is current user ID. The ID of the user, who added the attachment. *     'ping_status'   - Default is the value in default ping status option. Whether the attachment *                       can accept pings. *     'post_parent'   - Default is 0. Can use $parent parameter or set this for the post it belongs *                       to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Attachment post content filtered. *     'post_excerpt'  - Attachment excerpt. * * @since 2.0.0 * @uses $wpdb * @uses $user_ID * @uses do_action() Calls 'edit_attachment' on $post_ID if this is an update. * @uses do_action() Calls 'add_attachment' on $post_ID if this is not an update. * * @param string|array $object Arguments to override defaults. * @param string $file Optional filename. * @param int $post_parent Parent post ID. * @return int Attachment ID. */function wp_insert_attachment($object, $file = false, $parent = 0) {	global $wpdb, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0);	$object = wp_parse_args($object, $defaults);	if ( !empty($parent) )		$object['post_parent'] = $parent;	$object = sanitize_post($object, 'db');	// export array as variables	extract($object, EXTR_SKIP);	if ( empty($post_author) )		$post_author = $user_ID;	$post_type = 'attachment';	$post_status = 'inherit';	// Make sure we set a valid category.	if ( !isset($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	// Are we updating or creating?	if ( !empty($ID) ) {		$update = true;		$post_ID = (int) $ID;	} else {		$update = false;		$post_ID = 0;	}	// Create a valid post name.	if ( empty($post_name) )		$post_name = sanitize_title($post_title);	else		$post_name = sanitize_title($post_name);	// expected_slashed ($post_name)	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	if ( empty($post_date) )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) )		$post_date_gmt = current_time('mysql', 1);	if ( empty($post_modified) )		$post_modified = $post_date;	if ( empty($post_modified_gmt) )		$post_modified_gmt = $post_date_gmt;	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) )		$post_password = '';	if ( ! isset($pinged) )		$pinged = '';	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' ) );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->posts, $data, array( 'ID' => $post_ID ) );	} else {		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		$wpdb->insert( $wpdb->posts, $data );		$post_ID = (int) $wpdb->insert_id;	}	if ( empty($post_name) ) {		$post_name = sanitize_title($post_title, $post_ID);		$wpdb->update( $wpdb->posts, compact("post_name"), array( 'ID' => $post_ID ) );	}	wp_set_post_categories($post_ID, $post_category);	if ( $file )		update_attached_file( $post_ID, $file );	clean_post_cache($post_ID);	if ( isset($post_parent) && $post_parent < 0 )		add_post_meta($post_ID, '_wp_attachment_temp_parent', $post_parent, true);	if ( $update) {		do_action('edit_attachment', $post_ID);	} else {		do_action('add_attachment', $post_ID);	}	return $post_ID;}/** * Trashes or deletes an attachment. * * When an attachment is permanently deleted, the file will also be removed. * Deletion removes all post meta fields, taxonomy, comments, etc. associated * with the attachment (except the main post). * * The attachment is moved to the trash instead of permanently deleted unless trash * for media is disabled, item is already in the trash, or $force_delete is true. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_attachment' hook on Attachment ID. * * @param int $postid Attachment ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure. Post data on success. */function wp_delete_attachment( $post_id, $force_delete = false ) {	global $wpdb;	if ( !$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) ) )		return $post;	if ( 'attachment' != $post->post_type )		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' != $post->post_status )		return wp_trash_post( $post_id );	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	$meta = wp_get_attachment_metadata( $post_id );	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	$file = get_attached_file( $post_id );	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	do_action('delete_attachment', $post_id);	wp_delete_object_term_relationships($post_id, array('category', 'post_tag'));	wp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->postmeta WHERE meta_key = '_thumbnail_id' AND meta_value = %d", $post_id ));	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id ));	if ( ! empty( $comment_ids ) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $post_id ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $post_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $post_id ));	do_action( 'deleted_post', $post_id );	$uploadpath = wp_upload_dir();	if ( ! empty($meta['thumb']) ) {		// Don't delete the thumb if another attachment uses it		if (! $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d", '%' . $meta['thumb'] . '%', $post_id)) ) {			$thumbfile = str_replace(basename($file), $meta['thumb'], $file);			$thumbfile = apply_filters('wp_delete_file', $thumbfile);			@ unlink( path_join($uploadpath['basedir'], $thumbfile) );		}	}	// remove intermediate and backup images if there are any	foreach ( get_intermediate_image_sizes() as $size ) {		if ( $intermediate = image_get_intermediate_size($post_id, $size) ) {			$intermediate_file = apply_filters('wp_delete_file', $intermediate['path']);			@ unlink( path_join($uploadpath['basedir'], $intermediate_file) );		}	}	if ( is_array($backup_sizes) ) {		foreach ( $backup_sizes as $size ) {			$del_file = path_join( dirname($meta['file']), $size['file'] );			$del_file = apply_filters('wp_delete_file', $del_file);            @ unlink( path_join($uploadpath['basedir'], $del_file) );		}	}	$file = apply_filters('wp_delete_file', $file);	if ( ! empty($file) )		@ unlink($file);	clean_post_cache($post_id);	return $post;}/** * Retrieve attachment meta field for attachment ID. * * @since 2.1.0 * * @param int $post_id Attachment ID * @param bool $unfiltered Optional, default is false. If true, filters are not run. * @return string|bool Attachment meta field. False on failure. */function wp_get_attachment_metadata( $post_id = 0, $unfiltered = false ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );	if ( $unfiltered )		return $data;	return apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );}/** * Update metadata for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @param array $data Attachment data. * @return int */function wp_update_attachment_metadata( $post_id, $data ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID );	return update_post_meta( $post->ID, '_wp_attachment_metadata', $data);}/** * Retrieve the URL for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return string */function wp_get_attachment_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$url = '';	if ( $file = get_post_meta( $post->ID, '_wp_attached_file', true) ) { //Get attached file		if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) { //Get upload directory			if ( 0 === strpos($file, $uploads['basedir']) ) //Check that the upload base exists in the file location				$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file); //replace file location with url location            elseif ( false !== strpos($file, 'wp-content/uploads') )                $url = $uploads['baseurl'] . substr( $file, strpos($file, 'wp-content/uploads') + 18 );            else                $url = $uploads['baseurl'] . "/$file"; //Its a newly uploaded file, therefor $file is relative to the basedir.		}	}	if ( empty($url) ) //If any of the above options failed, Fallback on the GUID as used pre-2.7, not recomended to rely upon this.		$url = get_the_guid( $post->ID );	if ( 'attachment' != $post->post_type || empty($url) )		return false;	return apply_filters( 'wp_get_attachment_url', $url, $post->ID );}/** * Retrieve thumbnail for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return mixed False on failure. Thumbnail file path on success. */function wp_get_attachment_thumb_file( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )		return false;	$file = get_attached_file( $post->ID );	if ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) )		return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );	return false;}/** * Retrieve URL for an attachment thumbnail. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return string|bool False on failure. Thumbnail URL on success. */function wp_get_attachment_thumb_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$url = wp_get_attachment_url( $post->ID ) )		return false;	$sized = image_downsize( $post_id, 'thumbnail' );	if ( $sized )		return $sized[0];	if ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )		return false;	$url = str_replace(basename($url), basename($thumb), $url);	return apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );}/** * Check if the attachment is an image. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return bool */function wp_attachment_is_image( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$file = get_attached_file( $post->ID ) )		return false;	$ext = preg_match('/\.([^.]+)$/', $file, $matches) ? strtolower($matches[1]) : false;	$image_exts = array('jpg', 'jpeg', 'gif', 'png');	if ( 'image/' == substr($post->post_mime_type, 0, 6) || $ext && 'import' == $post->post_mime_type && in_array($ext, $image_exts) )		return true;	return false;}/** * Retrieve the icon for a MIME type. * * @since 2.1.0 * * @param string $mime MIME type * @return string|bool */function wp_mime_type_icon( $mime = 0 ) {	if ( !is_numeric($mime) )		$icon = wp_cache_get("mime_type_icon_$mime");	if ( empty($icon) ) {		$post_id = 0;		$post_mimes = array();		if ( is_numeric($mime) ) {			$mime = (int) $mime;			if ( $post =& get_post( $mime ) ) {				$post_id = (int) $post->ID;				$ext = preg_replace('/^.+?\.([^.]+)$/', '$1', $post->guid);				if ( !empty($ext) ) {					$post_mimes[] = $ext;					if ( $ext_type = wp_ext2type( $ext ) )						$post_mimes[] = $ext_type;				}				$mime = $post->post_mime_type;			} else {				$mime = 0;			}		} else {			$post_mimes[] = $mime;		}		$icon_files = wp_cache_get('icon_files');		if ( !is_array($icon_files) ) {			$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );			$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url('images/crystal') );			$dirs = apply_filters( 'icon_dirs', array($icon_dir => $icon_dir_uri) );			$icon_files = array();			while ( $dirs ) {				$dir = array_shift($keys = array_keys($dirs));				$uri = array_shift($dirs);				if ( $dh = opendir($dir) ) {					while ( false !== $file = readdir($dh) ) {						$file = basename($file);						if ( substr($file, 0, 1) == '.' )							continue;						if ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {							if ( is_dir("$dir/$file") )								$dirs["$dir/$file"] = "$uri/$file";							continue;						}						$icon_files["$dir/$file"] = "$uri/$file";					}					closedir($dh);				}			}			wp_cache_set('icon_files', $icon_files, 600);		}		// Icon basename - extension = MIME wildcard		foreach ( $icon_files as $file => $uri )			$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];		if ( ! empty($mime) ) {			$post_mimes[] = substr($mime, 0, strpos($mime, '/'));			$post_mimes[] = substr($mime, strpos($mime, '/') + 1);			$post_mimes[] = str_replace('/', '_', $mime);		}		$matches = wp_match_mime_types(array_keys($types), $post_mimes);		$matches['default'] = array('default');		foreach ( $matches as $match => $wilds ) {			if ( isset($types[$wilds[0]])) {				$icon = $types[$wilds[0]];				if ( !is_numeric($mime) )					wp_cache_set("mime_type_icon_$mime", $icon);				break;			}		}	}	return apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id ); // Last arg is 0 if function pass mime type.}/** * Checked for changed slugs for published posts and save old slug. * * The function is used along with form POST data. It checks for the wp-old-slug * POST field. Will only be concerned with published posts and the slug actually * changing. * * If the slug was changed and not already part of the old slugs then it will be * added to the post meta field ('_wp_old_slug') for storing old slugs for that * post. * * The most logically usage of this function is redirecting changed posts, so * that those that linked to an changed post will be redirected to the new post. * * @since 2.1.0 * * @param int $post_id Post ID. * @return int Same as $post_id */function wp_check_for_changed_slugs($post_id, $post, $post_before) {	// dont bother if it hasnt changed	if ( $post->post_name == $post_before->post_name )		return;	// we're only concerned with published posts	if ( $post->post_status != 'publish' || $post->post_type != 'post' )		return;	$old_slugs = (array) get_post_meta($post_id, '_wp_old_slug');	// if we haven't added this old slug before, add it now	if ( !in_array($post_before->post_name, $old_slugs) )		add_post_meta($post_id, '_wp_old_slug', $post_before->post_name);	// if the new slug was used previously, delete it from the list	if ( in_array($post->post_name, $old_slugs) )		delete_post_meta($post_id, '_wp_old_slug', $post->post_name);}/** * Retrieve the private post SQL based on capability. * * This function provides a standardized way to appropriately select on the * post_status of posts/pages. The function will return a piece of SQL code that * can be added to a WHERE clause; this SQL is constructed to allow all * published posts, and all private posts to which the user has access. * * It also allows plugins that define their own post type to control the cap by * using the hook 'pub_priv_sql_capability'. The plugin is expected to return * the capability the user must have to read the private post type. * * @since 2.2.0 * * @uses $user_ID * @uses apply_filters() Call 'pub_priv_sql_capability' filter for plugins with different post types. * * @param string $post_type currently only supports 'post' or 'page'. * @return string SQL code that can be added to a where clause. */function get_private_posts_cap_sql($post_type) {	return get_posts_by_author_sql($post_type, FALSE);}/** * Retrieve the post SQL based on capability, author, and type. * * See above for full description. * * @since 3.0.0 * @param string $post_type currently only supports 'post' or 'page'. * @param bool $full Optional.  Returns a full WHERE statement instead of just an 'andalso' term. * @param int $post_author Optional.  Query posts having a single author ID. * @return string SQL WHERE code that can be added to a query. */function get_posts_by_author_sql($post_type, $full = TRUE, $post_author = NULL) {	global $user_ID, $wpdb;	// Private posts	if ($post_type == 'post') {		$cap = 'read_private_posts';	// Private pages	} elseif ($post_type == 'page') {		$cap = 'read_private_pages';	// Dunno what it is, maybe plugins have their own post type?	} else {		$cap = '';		$cap = apply_filters('pub_priv_sql_capability', $cap);		if (empty($cap)) {			// We don't know what it is, filters don't change anything,			// so set the SQL up to return nothing.			return ' 1 = 0 ';		}	}	if ($full) {		if (is_null($post_author)) {			$sql = $wpdb->prepare('WHERE post_type = %s AND ', $post_type);		} else {			$sql = $wpdb->prepare('WHERE post_author = %d AND post_type = %s AND ', $post_author, $post_type);		}	} else {		$sql = '';	}	$sql .= "(post_status = 'publish'";	if (current_user_can($cap)) {		// Does the user have the capability to view private posts? Guess so.		$sql .= " OR post_status = 'private'";	} elseif (is_user_logged_in()) {		// Users can view their own private posts.		$id = (int) $user_ID;		if (is_null($post_author) || !$full) {			$sql .= " OR post_status = 'private' AND post_author = $id";		} elseif ($id == (int)$post_author) {			$sql .= " OR post_status = 'private'";		} // else none	} // else none	$sql .= ')';	return $sql;}/** * Retrieve the date that the last post was published. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is the date when the last post was posted. The * 'gmt' is when the last post was posted in GMT formatted date. * * @since 0.71 * * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostdate' filter * * @global mixed $cache_lastpostdate Stores the last post date * @global mixed $pagenow The current page being viewed * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date of the last post. */function get_lastpostdate($timezone = 'server') {	global $cache_lastpostdate, $wpdb, $blog_id;	$add_seconds_server = date('Z');	if ( !isset($cache_lastpostdate[$blog_id][$timezone]) ) {		switch(strtolower($timezone)) {			case 'gmt':				$lastpostdate = $wpdb->get_var("SELECT post_date_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'blog':				$lastpostdate = $wpdb->get_var("SELECT post_date FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'server':				$lastpostdate = $wpdb->get_var("SELECT DATE_ADD(post_date_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;		}		$cache_lastpostdate[$blog_id][$timezone] = $lastpostdate;	} else {		$lastpostdate = $cache_lastpostdate[$blog_id][$timezone];	}	return apply_filters( 'get_lastpostdate', $lastpostdate, $timezone );}/** * Retrieve last post modified date depending on timezone. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is just when the last post was modified. The * 'gmt' is when the last post was modified in GMT time. * * @since 1.2.0 * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostmodified' filter * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date the post was last modified. */function get_lastpostmodified($timezone = 'server') {	global $wpdb;	$add_seconds_server = date('Z');	$timezone = strtolower( $timezone );	$lastpostmodified = wp_cache_get( "lastpostmodified:$timezone", 'timeinfo' );	if ( $lastpostmodified )		return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );	switch ( strtolower($timezone) ) {		case 'gmt':			$lastpostmodified = $wpdb->get_var("SELECT post_modified_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'blog':			$lastpostmodified = $wpdb->get_var("SELECT post_modified FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'server':			$lastpostmodified = $wpdb->get_var("SELECT DATE_ADD(post_modified_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;	}	$lastpostdate = get_lastpostdate($timezone);	if ( $lastpostdate > $lastpostmodified )		$lastpostmodified = $lastpostdate;	if ( $lastpostmodified )		wp_cache_set( "lastpostmodified:$timezone", $lastpostmodified, 'timeinfo' );	return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );}/** * Updates posts in cache. * * @usedby update_page_cache() Aliased by this function. * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $posts Array of post objects */function update_post_cache(&$posts) {	if ( !$posts )		return;	foreach ( $posts as $post )		wp_cache_add($post->ID, $post, 'posts');}/** * Will clean the post in the cache. * * Cleaning means delete from the cache of the post. Will call to clean the term * object cache associated with the post ID. * * clean_post_cache() will call itself recursively for each child post. * * This function not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Calls 'clean_post_cache' on $id before adding children (if any). * * @param int $id The Post ID in the cache to clean */function clean_post_cache($id) {	global $_wp_suspend_cache_invalidation, $wpdb;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	clean_object_term_cache($id, 'post');	wp_cache_delete( 'wp_get_archives', 'general' );	do_action('clean_post_cache', $id);	if ( $children = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d", $id) ) ) {		foreach( $children as $cid )			clean_post_cache( $cid );	}	if ( is_multisite() )		wp_cache_delete( $wpdb->blogid . '-' . $id, 'global-posts' );}/** * Alias of update_post_cache(). * * @see update_post_cache() Posts and pages are the same, alias is intentional * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $pages list of page objects */function update_page_cache(&$pages) {	update_post_cache($pages);}/** * Will clean the page in the cache. * * Clean (read: delete) page from cache that matches $id. Will also clean cache * associated with 'all_page_ids' and 'get_pages'. * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Will call the 'clean_page_cache' hook action. * * @param int $id Page ID to clean */function clean_page_cache($id) {	clean_post_cache($id);	wp_cache_delete( 'all_page_ids', 'posts' );	wp_cache_delete( 'get_pages', 'posts' );	do_action('clean_page_cache', $id);}/** * Call major cache updating functions for list of Post objects. * * @package WordPress * @subpackage Cache * @since 1.5.0 * * @uses $wpdb * @uses update_post_cache() * @uses update_object_term_cache() * @uses update_postmeta_cache() * * @param array $posts Array of Post objects * @param string $post_type The post type of the posts in $posts. Default is 'post'. * @param bool $update_term_cache Whether to update the term cache. Default is true. * @param bool $update_meta_cache Whether to update the meta cache. Default is true. */function update_post_caches(&$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true) {	// No point in doing all this work if we didn't match any posts.	if ( !$posts )		return;	update_post_cache($posts);	$post_ids = array();	foreach ( $posts as $post )		$post_ids[] = $post->ID;	if ( empty($post_type) )		$post_type = 'post';	if ( !is_array($post_type) && 'any' != $post_type && $update_term_cache )		update_object_term_cache($post_ids, $post_type);	if ( $update_meta_cache )		update_postmeta_cache($post_ids);}/** * Updates metadata cache for list of post IDs. * * Performs SQL query to retrieve the metadata for the post IDs and updates the * metadata cache for the posts. Therefore, the functions, which call this * function, do not need to perform SQL queries on their own. * * @package WordPress * @subpackage Cache * @since 2.1.0 * * @uses $wpdb * * @param array $post_ids List of post IDs. * @return bool|array Returns false if there is nothing to update or an array of metadata. */function update_postmeta_cache($post_ids) {	return update_meta_cache('post', $post_ids);}/** * Will clean the attachment in the cache. * * Cleaning means delete from the cache. Optionaly will clean the term * object cache associated with the attachment ID. * * This function will not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 3.0.0 * * @uses do_action() Calls 'clean_attachment_cache' on $id. * * @param int $id The attachment ID in the cache to clean * @param bool $clean_terms optional. Whether to clean terms cache */function clean_attachment_cache($id, $clean_terms = false) {	global $_wp_suspend_cache_invalidation;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	if ( $clean_terms )		clean_object_term_cache($id, 'attachment');	do_action('clean_attachment_cache', $id);}//// Hooks///** * Hook for managing future post transitions to published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses do_action() Calls 'private_to_published' on post ID if this is a 'private_to_published' call. * @uses wp_clear_scheduled_hook() with 'publish_future_post' and post ID. * * @param string $new_status New post status * @param string $old_status Previous post status * @param object $post Object type containing the post information */function _transition_post_status($new_status, $old_status, $post) {	global $wpdb;	if ( $old_status != 'publish' && $new_status == 'publish' ) {		// Reset GUID if transitioning to publish and it is empty		if ( '' == get_the_guid($post->ID) )			$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );		do_action('private_to_published', $post->ID);  // Deprecated, use private_to_publish	}	// If published posts changed clear the lastpostmodified cache	if ( 'publish' == $new_status || 'publish' == $old_status) {		wp_cache_delete( 'lastpostmodified:server', 'timeinfo' );		wp_cache_delete( 'lastpostmodified:gmt',    'timeinfo' );		wp_cache_delete( 'lastpostmodified:blog',   'timeinfo' );	}	// Always clears the hook in case the post status bounced from future to draft.	wp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );}/** * Hook used to schedule publication for a post marked for the future. * * The $post properties used and must exist are 'ID' and 'post_date_gmt'. * * @since 2.3.0 * @access private * * @param int $deprecated Not used. Can be set to null. Never implemented. *   Not marked as deprecated with _deprecated_argument() as it conflicts with *   wp_transition_post_status() and the default filter for _future_post_hook(). * @param object $post Object type containing the post information */function _future_post_hook( $deprecated = '', $post ) {	wp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );	wp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );}/** * Hook to schedule pings and enclosures when a post is published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses XMLRPC_REQUEST and APP_REQUEST constants. * @uses do_action() Calls 'xmlprc_publish_post' on post ID if XMLRPC_REQUEST is defined. * @uses do_action() Calls 'app_publish_post' on post ID if APP_REQUEST is defined. * * @param int $post_id The ID in the database table of the post being published */function _publish_post_hook($post_id) {	global $wpdb;	if ( defined('XMLRPC_REQUEST') )		do_action('xmlrpc_publish_post', $post_id);	if ( defined('APP_REQUEST') )		do_action('app_publish_post', $post_id);	if ( defined('WP_IMPORTING') )		return;	$data = array( 'post_id' => $post_id, 'meta_value' => '1' );	if ( get_option('default_pingback_flag') ) {		$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_pingme' ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_pingme', 1 );	}	$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_encloseme' ) );	do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_encloseme', 1 );	wp_schedule_single_event(time(), 'do_pings');}/** * Hook used to prevent page/post cache and rewrite rules from staying dirty. * * Does two things. If the post is a page and has a template then it will * update/add that template to the meta. For both pages and posts, it will clean * the post cache to make sure that the cache updates to the changes done * recently. For pages, the rewrite rules of WordPress are flushed to allow for * any changes. * * The $post parameter, only uses 'post_type' property and 'page_template' * property. * * @since 2.3.0 * @access private * @uses $wp_rewrite Flushes Rewrite Rules. * * @param int $post_id The ID in the database table for the $post * @param object $post Object type containing the post information */function _save_post_hook($post_id, $post) {	if ( $post->post_type == 'page' ) {		clean_page_cache($post_id);		// Avoid flushing rules for every post during import.		if ( !defined('WP_IMPORTING') ) {			global $wp_rewrite;			$wp_rewrite->flush_rules(false);		}	} else {		clean_post_cache($post_id);	}}/** * Retrieve post ancestors and append to post ancestors property. * * Will only retrieve ancestors once, if property is already set, then nothing * will be done. If there is not a parent post, or post ID and post parent ID * are the same then nothing will be done. * * The parameter is passed by reference, so nothing needs to be returned. The * property will be updated and can be referenced after the function is * complete. The post parent will be an ancestor and the parent of the post * parent will be an ancestor. There will only be two ancestors at the most. * * @since unknown * @access private * @uses $wpdb * * @param object $_post Post data. * @return null When nothing needs to be done. */function _get_post_ancestors(&$_post) {	global $wpdb;	if ( isset($_post->ancestors) )		return;	$_post->ancestors = array();	if ( empty($_post->post_parent) || $_post->ID == $_post->post_parent )		return;	$id = $_post->ancestors[] = $_post->post_parent;	while ( $ancestor = $wpdb->get_var( $wpdb->prepare("SELECT `post_parent` FROM $wpdb->posts WHERE ID = %d LIMIT 1", $id) ) ) {		if ( $id == $ancestor )			break;		$id = $_post->ancestors[] = $ancestor;	}}/** * Determines which fields of posts are to be saved in revisions. * * Does two things. If passed a post *array*, it will return a post array ready * to be insterted into the posts table as a post revision. Otherwise, returns * an array whose keys are the post fields to be saved for post revisions. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * @access private * @uses apply_filters() Calls '_wp_post_revision_fields' on 'title', 'content' and 'excerpt' fields. * * @param array $post Optional a post array to be processed for insertion as a post revision. * @param bool $autosave optional Is the revision an autosave? * @return array Post array ready to be inserted as a post revision or array of fields that can be versioned. */function _wp_post_revision_fields( $post = null, $autosave = false ) {	static $fields = false;	if ( !$fields ) {		// Allow these to be versioned		$fields = array(			'post_title' => __( 'Title' ),			'post_content' => __( 'Content' ),			'post_excerpt' => __( 'Excerpt' ),		);		// Runs only once		$fields = apply_filters( '_wp_post_revision_fields', $fields );		// WP uses these internally either in versioning or elsewhere - they cannot be versioned		foreach ( array( 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', 'post_author' ) as $protect )			unset( $fields[$protect] );	}	if ( !is_array($post) )		return $fields;	$return = array();	foreach ( array_intersect( array_keys( $post ), array_keys( $fields ) ) as $field )		$return[$field] = $post[$field];	$return['post_parent']   = $post['ID'];	$return['post_status']   = 'inherit';	$return['post_type']     = 'revision';	$return['post_name']     = $autosave ? "$post[ID]-autosave" : "$post[ID]-revision";	$return['post_date']     = isset($post['post_modified']) ? $post['post_modified'] : '';	$return['post_date_gmt'] = isset($post['post_modified_gmt']) ? $post['post_modified_gmt'] : '';	return $return;}/** * Saves an already existing post as a post revision. * * Typically used immediately prior to post updates. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_put_post_revision() * * @param int $post_id The ID of the post to save as a revision. * @return mixed Null or 0 if error, new revision ID, if success. */function wp_save_post_revision( $post_id ) {	// We do autosaves manually with wp_create_post_autosave()	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )		return;	// WP_POST_REVISIONS = 0, false	if ( ! WP_POST_REVISIONS )		return;	if ( !$post = get_post( $post_id, ARRAY_A ) )		return;	if ( !post_type_supports($post['post_type'], 'revisions') )		return;	$return = _wp_put_post_revision( $post );	// WP_POST_REVISIONS = true (default), -1	if ( !is_numeric( WP_POST_REVISIONS ) || WP_POST_REVISIONS < 0 )		return $return;	// all revisions and (possibly) one autosave	$revisions = wp_get_post_revisions( $post_id, array( 'order' => 'ASC' ) );	// WP_POST_REVISIONS = (int) (# of autosaves to save)	$delete = count($revisions) - WP_POST_REVISIONS;	if ( $delete < 1 )		return $return;	$revisions = array_slice( $revisions, 0, $delete );	for ( $i = 0; isset($revisions[$i]); $i++ ) {		if ( false !== strpos( $revisions[$i]->post_name, 'autosave' ) )			continue;		wp_delete_post_revision( $revisions[$i]->ID );	}	return $return;}/** * Retrieve the autosaved data of the specified post. * * Returns a post object containing the information that was autosaved for the * specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int $post_id The post ID. * @return object|bool The autosaved data or false on failure or when no autosave exists. */function wp_get_post_autosave( $post_id ) {	if ( !$post = get_post( $post_id ) )		return false;	$q = array(		'name' => "{$post->ID}-autosave",		'post_parent' => $post->ID,		'post_type' => 'revision',		'post_status' => 'inherit'	);	// Use WP_Query so that the result gets cached	$autosave_query = new WP_Query;	add_action( 'parse_query', '_wp_get_post_autosave_hack' );	$autosave = $autosave_query->query( $q );	remove_action( 'parse_query', '_wp_get_post_autosave_hack' );	if ( $autosave && is_array($autosave) && is_object($autosave[0]) )		return $autosave[0];	return false;}/** * Internally used to hack WP_Query into submission. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param object $query WP_Query object */function _wp_get_post_autosave_hack( $query ) {	$query->is_single = false;}/** * Determines if the specified post is a revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of revision's parent otherwise. */function wp_is_post_revision( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	return (int) $post->post_parent;}/** * Determines if the specified post is an autosave. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of autosave's parent otherwise */function wp_is_post_autosave( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	if ( "{$post->post_parent}-autosave" !== $post->post_name )		return false;	return (int) $post->post_parent;}/** * Inserts post data into the posts table as a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_insert_post() * * @param int|object|array $post Post ID, post object OR post array. * @param bool $autosave Optional. Is the revision an autosave? * @return mixed Null or 0 if error, new revision ID if success. */function _wp_put_post_revision( $post = null, $autosave = false ) {	if ( is_object($post) )		$post = get_object_vars( $post );	elseif ( !is_array($post) )		$post = get_post($post, ARRAY_A);	if ( !$post || empty($post['ID']) )		return;	if ( isset($post['post_type']) && 'revision' == $post['post_type'] )		return new WP_Error( 'post_type', __( 'Cannot create a revision of a revision' ) );	$post = _wp_post_revision_fields( $post, $autosave );	$post = add_magic_quotes($post); //since data is from db	$revision_id = wp_insert_post( $post );	if ( is_wp_error($revision_id) )		return $revision_id;	if ( $revision_id )		do_action( '_wp_put_post_revision', $revision_id );	return $revision_id;}/** * Gets a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_post() * * @param int|object $post Post ID or post object * @param string $output Optional. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional sanitation filter.  @see sanitize_post() * @return mixed Null if error or post object if success */function &wp_get_post_revision(&$post, $output = OBJECT, $filter = 'raw') {	$null = null;	if ( !$revision = get_post( $post, OBJECT, $filter ) )		return $revision;	if ( 'revision' !== $revision->post_type )		return $null;	if ( $output == OBJECT ) {		return $revision;	} elseif ( $output == ARRAY_A ) {		$_revision = get_object_vars($revision);		return $_revision;	} elseif ( $output == ARRAY_N ) {		$_revision = array_values(get_object_vars($revision));		return $_revision;	}	return $revision;}/** * Restores a post to the specified revision. * * Can restore a past revision using all fields of the post revision, or only selected fields. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_update_post() * @uses do_action() Calls 'wp_restore_post_revision' on post ID and revision ID if wp_update_post() *  is successful. * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from. Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_restore_post_revision( $revision_id, $fields = null ) {	if ( !$revision = wp_get_post_revision( $revision_id, ARRAY_A ) )		return $revision;	if ( !is_array( $fields ) )		$fields = array_keys( _wp_post_revision_fields() );	$update = array();	foreach( array_intersect( array_keys( $revision ), $fields ) as $field )		$update[$field] = $revision[$field];	if ( !$update )		return false;	$update['ID'] = $revision['post_parent'];	$update = add_magic_quotes( $update ); //since data is from db	$post_id = wp_update_post( $update );	if ( is_wp_error( $post_id ) )		return $post_id;	if ( $post_id )		do_action( 'wp_restore_post_revision', $post_id, $revision['ID'] );	return $post_id;}/** * Deletes a revision. * * Deletes the row from the posts table corresponding to the specified revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_delete_post() * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from.  Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_delete_post_revision( $revision_id ) {	if ( !$revision = wp_get_post_revision( $revision_id ) )		return $revision;	$delete = wp_delete_post( $revision->ID );	if ( is_wp_error( $delete ) )		return $delete;	if ( $delete )		do_action( 'wp_delete_post_revision', $revision->ID, $revision );	return $delete;}/** * Returns all revisions of specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_children() * * @param int|object $post_id Post ID or post object * @return array empty if no revisions */function wp_get_post_revisions( $post_id = 0, $args = null ) {	if ( ! WP_POST_REVISIONS )		return array();	if ( ( !$post = get_post( $post_id ) ) || empty( $post->ID ) )		return array();	$defaults = array( 'order' => 'DESC', 'orderby' => 'date' );	$args = wp_parse_args( $args, $defaults );	$args = array_merge( $args, array( 'post_parent' => $post->ID, 'post_type' => 'revision', 'post_status' => 'inherit' ) );	if ( !$revisions = get_children( $args ) )		return array();	return $revisions;}function _set_preview($post) {	if ( ! is_object($post) )		return $post;	$preview = wp_get_post_autosave($post->ID);	if ( ! is_object($preview) )		return $post;	$preview = sanitize_post($preview);	$post->post_content = $preview->post_content;	$post->post_title = $preview->post_title;	$post->post_excerpt = $preview->post_excerpt;	return $post;}function _show_post_preview() {	if ( isset($_GET['preview_id']) && isset($_GET['preview_nonce']) ) {		$id = (int) $_GET['preview_id'];		if ( false == wp_verify_nonce( $_GET['preview_nonce'], 'post_preview_' . $id ) )			wp_die( __('You do not have permission to preview drafts.') );		add_filter('the_preview', '_set_preview');	}}
<?php/** * WordPress Post Template Functions. * * Gets content for the current post in the loop. * * @package WordPress * @subpackage Template *//** * Display the ID of the current item in the WordPress Loop. * * @since 0.71 * @uses $id */function the_ID() {	global $id;	echo $id;}/** * Retrieve the ID of the current item in the WordPress Loop. * * @since 2.1.0 * @uses $id * * @return unknown */function get_the_ID() {	global $id;	return $id;}/** * Display or retrieve the current post title with optional content. * * @since 0.71 * * @param string $before Optional. Content to prepend to the title. * @param string $after Optional. Content to append to the title. * @param bool $echo Optional, default to true.Whether to display or return. * @return null|string Null on no title. String if $echo parameter is false. */function the_title($before = '', $after = '', $echo = true) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$title = $before . $title . $after;	if ( $echo )		echo $title;	else		return $title;}/** * Sanitize the current title when retrieving or displaying. * * Works like {@link the_title()}, except the parameters can be in a string or * an array. See the function for what can be override in the $args parameter. * * The title before it is displayed will have the tags stripped and {@link * esc_attr()} before it is passed to the user or displayed. The default * as with {@link the_title()}, is to display the title. * * @since 2.3.0 * * @param string|array $args Optional. Override the defaults. * @return string|null Null on failure or display. String when echo is false. */function the_title_attribute( $args = '' ) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$defaults = array('before' => '', 'after' =>  '', 'echo' => true);	$r = wp_parse_args($args, $defaults);	extract( $r, EXTR_SKIP );	$title = $before . $title . $after;	$title = esc_attr(strip_tags($title));	if ( $echo )		echo $title;	else		return $title;}/** * Retrieve post title. * * If the post is protected and the visitor is not an admin, then "Protected" * will be displayed before the post title. If the post is private, then * "Private" will be located before the post title. * * @since 0.71 * * @param int $id Optional. Post ID. * @return string */function get_the_title( $id = 0 ) {	$post = &get_post($id);	$title = isset($post->post_title) ? $post->post_title : '';	$id = isset($post->ID) ? $post->ID : (int) $id;	if ( !is_admin() ) {		if ( !empty($post->post_password) ) {			$protected_title_format = apply_filters('protected_title_format', __('Protected: %s'));			$title = sprintf($protected_title_format, $title);		} else if ( isset($post->post_status) && 'private' == $post->post_status ) {			$private_title_format = apply_filters('private_title_format', __('Private: %s'));			$title = sprintf($private_title_format, $title);		}	}	return apply_filters( 'the_title', $title, $id );}/** * Display the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * Url is escaped to make it xml safe * * @since 1.5.0 * * @param int $id Optional. Post ID. */function the_guid( $id = 0 ) {	echo esc_url( get_the_guid( $id ) );}/** * Retrieve the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @return string */function get_the_guid( $id = 0 ) {	$post = &get_post($id);	return apply_filters('get_the_guid', $post->guid);}/** * Display the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. */function the_content($more_link_text = null, $stripteaser = 0) {	$content = get_the_content($more_link_text, $stripteaser);	$content = apply_filters('the_content', $content);	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Retrieve the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. * @return string */function get_the_content($more_link_text = null, $stripteaser = 0) {	global $id, $post, $more, $page, $pages, $multipage, $preview;	if ( null === $more_link_text )		$more_link_text = __( '(more...)' );	$output = '';	$hasTeaser = false;	// If post password required and it doesn't match the cookie.	if ( post_password_required($post) ) {		$output = get_the_password_form();		return $output;	}	if ( $page > count($pages) ) // if the requested page doesn't exist		$page = count($pages); // give them the highest numbered page that DOES exist	$content = $pages[$page-1];	if ( preg_match('/<!--more(.*?)?-->/', $content, $matches) ) {		$content = explode($matches[0], $content, 2);		if ( !empty($matches[1]) && !empty($more_link_text) )			$more_link_text = strip_tags(wp_kses_no_null(trim($matches[1])));		$hasTeaser = true;	} else {		$content = array($content);	}	if ( (false !== strpos($post->post_content, '<!--noteaser-->') && ((!$multipage) || ($page==1))) )		$stripteaser = 1;	$teaser = $content[0];	if ( ($more) && ($stripteaser) && ($hasTeaser) )		$teaser = '';	$output .= $teaser;	if ( count($content) > 1 ) {		if ( $more ) {			$output .= '<span id="more-' . $id . '"></span>' . $content[1];		} else {			if ( ! empty($more_link_text) )				$output .= apply_filters( 'the_content_more_link', ' <a href="' . get_permalink() . "#more-$id\" class=\"more-link\">$more_link_text</a>", $more_link_text );			$output = force_balance_tags($output);		}	}	if ( $preview ) // preview fix for javascript bug with foreign languages		$output =	preg_replace_callback('/\%u([0-9A-F]{4})/', create_function('$match', 'return "&#" . base_convert($match[1], 16, 10) . ";";'), $output);	return $output;}/** * Display the post excerpt. * * @since 0.71 * @uses apply_filters() Calls 'the_excerpt' hook on post excerpt. */function the_excerpt() {	echo apply_filters('the_excerpt', get_the_excerpt());}/** * Retrieve the post excerpt. * * @since 0.71 * * @param mixed $deprecated Not used. * @return string */function get_the_excerpt( $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	global $post;	$output = $post->post_excerpt;	if ( post_password_required($post) ) {		$output = __('There is no excerpt because this is a protected post.');		return $output;	}	return apply_filters('get_the_excerpt', $output);}/** * Whether post has excerpt. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @return bool */function has_excerpt( $id = 0 ) {	$post = &get_post( $id );	return ( !empty( $post->post_excerpt ) );}/** * Display the classes for the post div. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. */function post_class( $class = '', $post_id = null ) {	// Separates classes with a single space, collates classes for post DIV	echo 'class="' . join( ' ', get_post_class( $class, $post_id ) ) . '"';}/** * Retrieve the classes for the post div as an array. * * The class names are add are many. If the post is a sticky, then the 'sticky' * class name. The class 'hentry' is always added to each post. For each * category, the class will be added with 'category-' with category slug is * added. The tags are the same way as the categories with 'tag-' before the tag * slug. All classes are passed through the filter, 'post_class' with the list * of classes, followed by $class parameter value, with the post ID as the last * parameter. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. * @return array Array of classes. */function get_post_class( $class = '', $post_id = null ) {	$post = get_post($post_id);	$classes = array();	if ( empty($post) )		return $classes;	$classes[] = 'post-' . $post->ID;	$classes[] = $post->post_type;	$classes[] = 'type-' . $post->post_type;	// sticky for Sticky Posts	if ( is_sticky($post->ID) && is_home() && !is_paged() )		$classes[] = 'sticky';	// hentry for hAtom compliace	$classes[] = 'hentry';	// Categories	foreach ( (array) get_the_category($post->ID) as $cat ) {		if ( empty($cat->slug ) )			continue;		$classes[] = 'category-' . sanitize_html_class($cat->slug, $cat->cat_ID);	}	// Tags	foreach ( (array) get_the_tags($post->ID) as $tag ) {		if ( empty($tag->slug ) )			continue;		$classes[] = 'tag-' . sanitize_html_class($tag->slug, $tag->term_id);	}	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('post_class', $classes, $class, $post->ID);}/** * Display the classes for the body element. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. */function body_class( $class = '' ) {	// Separates classes with a single space, collates classes for body element	echo 'class="' . join( ' ', get_body_class( $class ) ) . '"';}/** * Retrieve the classes for the body element as an array. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. * @return array Array of classes. */function get_body_class( $class = '' ) {	global $wp_query, $wpdb;	$classes = array();	if ( is_rtl() )		$classes[] = 'rtl';	if ( is_front_page() )		$classes[] = 'home';	if ( is_home() )		$classes[] = 'blog';	if ( is_archive() )		$classes[] = 'archive';	if ( is_date() )		$classes[] = 'date';	if ( is_search() )		$classes[] = 'search';	if ( is_paged() )		$classes[] = 'paged';	if ( is_attachment() )		$classes[] = 'attachment';	if ( is_404() )		$classes[] = 'error404';	if ( is_single() ) {		$post_id = $wp_query->get_queried_object_id();		$post = $wp_query->get_queried_object();		$classes[] = 'single';		$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);		$classes[] = 'postid-' . $post_id;		if ( is_attachment() ) {			$mime_type = get_post_mime_type($post_id);			$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );			$classes[] = 'attachmentid-' . $post_id;			$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );		}	} elseif ( is_archive() ) {		if ( is_author() ) {			$author = $wp_query->get_queried_object();			$classes[] = 'author';			$classes[] = 'author-' . sanitize_html_class( $author->user_nicename , $author->ID );		} elseif ( is_category() ) {			$cat = $wp_query->get_queried_object();			$classes[] = 'category';			$classes[] = 'category-' . sanitize_html_class( $cat->slug, $cat->cat_ID );		} elseif ( is_tag() ) {			$tags = $wp_query->get_queried_object();			$classes[] = 'tag';			$classes[] = 'tag-' . sanitize_html_class( $tags->slug, $tags->term_id );		}	} elseif ( is_page() ) {		$classes[] = 'page';		$page_id = $wp_query->get_queried_object_id();		$post = get_page($page_id);		$classes[] = 'page-id-' . $page_id;		if ( $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' AND post_status = 'publish' LIMIT 1", $page_id) ) )			$classes[] = 'page-parent';		if ( $post->post_parent ) {			$classes[] = 'page-child';			$classes[] = 'parent-pageid-' . $post->post_parent;		}		if ( is_page_template() ) {			$classes[] = 'page-template';			$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', get_post_meta( $page_id, '_wp_page_template', true ) ), '' );		}	} elseif ( is_search() ) {		if ( !empty( $wp_query->posts ) )			$classes[] = 'search-results';		else			$classes[] = 'search-no-results';	}	if ( is_user_logged_in() )		$classes[] = 'logged-in';	$page = $wp_query->get( 'page' );	if ( !$page || $page < 2)		$page = $wp_query->get( 'paged' );	if ( $page && $page > 1 ) {		$classes[] = 'paged-' . $page;		if ( is_single() )			$classes[] = 'single-paged-' . $page;		elseif ( is_page() )			$classes[] = 'page-paged-' . $page;		elseif ( is_category() )			$classes[] = 'category-paged-' . $page;		elseif ( is_tag() )			$classes[] = 'tag-paged-' . $page;		elseif ( is_date() )			$classes[] = 'date-paged-' . $page;		elseif ( is_author() )			$classes[] = 'author-paged-' . $page;		elseif ( is_search() )			$classes[] = 'search-paged-' . $page;	}	if ( !empty( $class ) ) {		if ( !is_array( $class ) )			$class = preg_split( '#\s+#', $class );		$classes = array_merge( $classes, $class );	}	$classes = array_map( 'esc_attr', $classes );	return apply_filters( 'body_class', $classes, $class );}/** * Whether post requires password and correct password has been provided. * * @since 2.7.0 * * @param int|object $post An optional post.  Global $post used if not provided. * @return bool false if a password is not required or the correct password cookie is present, true otherwise. */function post_password_required( $post = null ) {	$post = get_post($post);	if ( empty($post->post_password) )		return false;	if ( !isset($_COOKIE['wp-postpass_' . COOKIEHASH]) )		return true;	if ( $_COOKIE['wp-postpass_' . COOKIEHASH] != $post->post_password )		return true;	return false;}/** * Display "sticky" CSS class, if a post is sticky. * * @since 2.7.0 * * @param int $post_id An optional post ID. */function sticky_class( $post_id = null ) {	if ( !is_sticky($post_id) )		return;	echo " sticky";}/** * Page Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of pages. * * Displays page links for paginated posts (i.e. includes the <!--nextpage-->. * Quicktag one or more times). This tag must be within The Loop. * * The defaults for overwriting are: * 'next_or_number' - Default is 'number' (string). Indicates whether page *      numbers should be used. Valid values are number and next. * 'nextpagelink' - Default is 'Next Page' (string). Text for link to next page. *      of the bookmark. * 'previouspagelink' - Default is 'Previous Page' (string). Text for link to *      previous page, if available. * 'pagelink' - Default is '%' (String).Format string for page numbers. The % in *      the parameter string will be replaced with the page number, so Page % *      generates "Page 1", "Page 2", etc. Defaults to %, just the page number. * 'before' - Default is '<p> Pages:' (string). The html or text to prepend to *      each bookmarks. * 'after' - Default is '</p>' (string). The html or text to append to each *      bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *      Pages link inside the <a> tag. Also prepended to the current item, which *      is not linked. * 'link_after' - Default is '' (string). The html or text to append to each *      Pages link inside the <a> tag. Also appended to the current item, which *      is not linked. * * @since 1.2.0 * @access private * * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML. */function wp_link_pages($args = '') {	$defaults = array(		'before' => '<p>' . __('Pages:'), 'after' => '</p>',		'link_before' => '', 'link_after' => '',		'next_or_number' => 'number', 'nextpagelink' => __('Next page'),		'previouspagelink' => __('Previous page'), 'pagelink' => '%',		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	$r = apply_filters( 'wp_link_pages_args', $r );	extract( $r, EXTR_SKIP );	global $post, $page, $numpages, $multipage, $more, $pagenow;	$output = '';	if ( $multipage ) {		if ( 'number' == $next_or_number ) {			$output .= $before;			for ( $i = 1; $i < ($numpages+1); $i = $i + 1 ) {				$j = str_replace('%',$i,$pagelink);				$output .= ' ';				if ( ($i != $page) || ((!$more) && ($page==1)) ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}				}				$output .= $link_before;				$output .= $j;				$output .= $link_after;				if ( ($i != $page) || ((!$more) && ($page==1)) )					$output .= '</a>';			}			$output .= $after;		} else {			if ( $more ) {				$output .= $before;				$i = $page - 1;				if ( $i && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $previouspagelink . $link_after . '</a>';				}				$i = $page + 1;				if ( $i <= $numpages && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $nextpagelink . $link_after . '</a>';				}				$output .= $after;			}		}	}	if ( $echo )		echo $output;	return $output;}//// Post-meta: Custom per-post fields.///** * Retrieve post custom meta data field. * * @since 1.5.0 * * @param string $key Meta data key name. * @return bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist. */function post_custom( $key = '' ) {	$custom = get_post_custom();	if ( !isset( $custom[$key] ) )		return false;	elseif ( 1 == count($custom[$key]) )		return $custom[$key][0];	else		return $custom[$key];}/** * Display list of post custom fields. * * @internal This will probably change at some point... * @since 1.2.0 * @uses apply_filters() Calls 'the_meta_key' on list item HTML content, with key and value as separate parameters. */function the_meta() {	if ( $keys = get_post_custom_keys() ) {		echo "<ul class='post-meta'>\n";		foreach ( (array) $keys as $key ) {			$keyt = trim($key);			if ( '_' == $keyt{0} )				continue;			$values = array_map('trim', get_post_custom_values($key));			$value = implode($values,', ');			echo apply_filters('the_meta_key', "<li><span class='post-meta-key'>$key:</span> $value</li>\n", $key, $value);		}		echo "</ul>\n";	}}//// Pages///** * Retrieve or display list of pages as a dropdown (select list). * * @since 2.1.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_dropdown_pages($args = '') {	$defaults = array(		'depth' => 0, 'child_of' => 0,		'selected' => 0, 'echo' => 1,		'name' => 'page_id', 'id' => '',		'show_option_none' => '', 'show_option_no_change' => '',		'option_none_value' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$pages = get_pages($r);	$output = '';	$name = esc_attr($name);	// Back-compat with old system where both id and name were based on $name argument	if ( empty($id) )		$id = $name;	if ( ! empty($pages) ) {		$output = "<select name=\"$name\" id=\"$id\">\n";		if ( $show_option_no_change )			$output .= "\t<option value=\"-1\">$show_option_no_change</option>";		if ( $show_option_none )			$output .= "\t<option value=\"" . esc_attr($option_none_value) . "\">$show_option_none</option>\n";		$output .= walk_page_dropdown_tree($pages, $depth, $r);		$output .= "</select>\n";	}	$output = apply_filters('wp_dropdown_pages', $output);	if ( $echo )		echo $output;	return $output;}/** * Retrieve or display list of pages in list (li) format. * * @since 1.5.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_list_pages($args = '') {	$defaults = array(		'depth' => 0, 'show_date' => '',		'date_format' => get_option('date_format'),		'child_of' => 0, 'exclude' => '',		'title_li' => __('Pages'), 'echo' => 1,		'authors' => '', 'sort_column' => 'menu_order, post_title',		'link_before' => '', 'link_after' => '', 'walker' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	$current_page = 0;	// sanitize, mostly to keep spaces out	$r['exclude'] = preg_replace('/[^0-9,]/', '', $r['exclude']);	// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)	$exclude_array = ( $r['exclude'] ) ? explode(',', $r['exclude']) : array();	$r['exclude'] = implode( ',', apply_filters('wp_list_pages_excludes', $exclude_array) );	// Query pages.	$r['hierarchical'] = 0;	$pages = get_pages($r);	if ( !empty($pages) ) {		if ( $r['title_li'] )			$output .= '<li class="pagenav">' . $r['title_li'] . '<ul>';		global $wp_query;		if ( is_page() || is_attachment() || $wp_query->is_posts_page )			$current_page = $wp_query->get_queried_object_id();		$output .= walk_page_tree($pages, $r['depth'], $current_page, $r);		if ( $r['title_li'] )			$output .= '</ul></li>';	}	$output = apply_filters('wp_list_pages', $output, $r);	if ( $r['echo'] )		echo $output;	else		return $output;}/** * Display or retrieve list of pages with optional home link. * * The arguments are listed below and part of the arguments are for {@link * wp_list_pages()} function. Check that function for more info on those * arguments. * * <ul> * <li><strong>sort_column</strong> - How to sort the list of pages. Defaults * to page title. Use column for posts table.</li> * <li><strong>menu_class</strong> - Class to use for the div ID which contains * the page list. Defaults to 'menu'.</li> * <li><strong>echo</strong> - Whether to echo list or return it. Defaults to * echo.</li> * <li><strong>link_before</strong> - Text before show_home argument text.</li> * <li><strong>link_after</strong> - Text after show_home argument text.</li> * <li><strong>show_home</strong> - If you set this argument, then it will * display the link to the home page. The show_home argument really just needs * to be set to the value of the text of the link.</li> * </ul> * * @since 2.7.0 * * @param array|string $args */function wp_page_menu( $args = array() ) {	$defaults = array('sort_column' => 'menu_order, post_title', 'menu_class' => 'menu', 'echo' => true, 'link_before' => '', 'link_after' => '');	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_page_menu_args', $args );	$menu = '';	$list_args = $args;	// Show Home in the menu	if ( ! empty($args['show_home']) ) {		if ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )			$text = __('Home');		else			$text = $args['show_home'];		$class = '';		if ( is_front_page() && !is_paged() )			$class = 'class="current_page_item"';		$menu .= '<li ' . $class . '><a href="' . home_url( '/' ) . '" title="' . esc_attr($text) . '">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';		// If the front page is a page, add it to the exclude list		if (get_option('show_on_front') == 'page') {			if ( !empty( $list_args['exclude'] ) ) {				$list_args['exclude'] .= ',';			} else {				$list_args['exclude'] = '';			}			$list_args['exclude'] .= get_option('page_on_front');		}	}	$list_args['echo'] = false;	$list_args['title_li'] = '';	$menu .= str_replace( array( "\r", "\n", "\t" ), '', wp_list_pages($list_args) );	if ( $menu )		$menu = '<ul>' . $menu . '</ul>';	$menu = '<div class="' . esc_attr($args['menu_class']) . '">' . $menu . "</div>\n";	$menu = apply_filters( 'wp_page_menu', $menu, $args );	if ( $args['echo'] )		echo $menu;	else		return $menu;}//// Page helpers///** * Retrieve HTML list content for page list. * * @uses Walker_Page to create HTML list content. * @since 2.1.0 * @see Walker_Page::walk() for parameters and return description. */function walk_page_tree($pages, $depth, $current_page, $r) {	if ( empty($r['walker']) )		$walker = new Walker_Page;	else		$walker = $r['walker'];	$args = array($pages, $depth, $r, $current_page);	return call_user_func_array(array(&$walker, 'walk'), $args);}/** * Retrieve HTML dropdown (select) content for page list. * * @uses Walker_PageDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_PageDropdown::walk() for parameters and return description. */function walk_page_dropdown_tree() {	$args = func_get_args();	if ( empty($args[2]['walker']) ) // the user's options are the third parameter		$walker = new Walker_PageDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array(&$walker, 'walk'), $args);}//// Attachments///** * Display an attachment page link using an image or icon. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size. * @param bool $deprecated Deprecated. Not used. * @param bool $permalink Optional, default is false. Whether to include permalink. */function the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.5' );	if ( $fullsize )		echo wp_get_attachment_link($id, 'full', $permalink);	else		echo wp_get_attachment_link($id, 'thumbnail', $permalink);}/** * Retrieve an attachment page link using an image or icon, if possible. * * @since 2.5.0 * @uses apply_filters() Calls 'wp_get_attachment_link' filter on HTML content with same parameters as function. * * @param int $id Optional. Post ID. * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @param bool $permalink Optional, default is false. Whether to add permalink to image. * @param bool $icon Optional, default is false. Whether to include icon. * @param string $text Optional, default is false. If string, then will be link text. * @return string HTML content. */function wp_get_attachment_link($id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false) {	$id = intval($id);	$_post = & get_post( $id );	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	if ( $text ) {		$link_text = esc_attr($text);	} elseif ( ( is_int($size) && $size != 0 ) or ( is_string($size) && $size != 'none' ) or $size != false ) {		$link_text = wp_get_attachment_image($id, $size, $icon);	} else {		$link_text = '';	}	if( trim($link_text) == '' )		$link_text = $_post->post_title;	return apply_filters( 'wp_get_attachment_link', "<a href='$url' title='$post_title'>$link_text</a>", $id, $size, $permalink, $icon, $text );}/** * Wrap attachment in <<p>> element before content. * * @since 2.0.0 * @uses apply_filters() Calls 'prepend_attachment' hook on HTML content. * * @param string $content * @return string */function prepend_attachment($content) {	global $post;	if ( empty($post->post_type) || $post->post_type != 'attachment' )		return $content;	$p = '<p class="attachment">';	// show the medium sized image representation of the attachment if available, and link to the raw file	$p .= wp_get_attachment_link(0, 'medium', false);	$p .= '</p>';	$p = apply_filters('prepend_attachment', $p);	return "$p\n$content";}//// Misc///** * Retrieve protected post password form content. * * @since 1.0.0 * @uses apply_filters() Calls 'the_password_form' filter on output. * * @return string HTML content for password form for password protected post. */function get_the_password_form() {	global $post;	$label = 'pwbox-'.(empty($post->ID) ? rand() : $post->ID);	$output = '<form action="' . get_option('siteurl') . '/wp-pass.php" method="post">	<p>' . __("This post is password protected. To view it please enter your password below:") . '</p>	<p><label for="' . $label . '">' . __("Password:") . ' <input name="post_password" id="' . $label . '" type="password" size="20" /></label> <input type="submit" name="Submit" value="' . esc_attr__("Submit") . '" /></p>	</form>	';	return apply_filters('the_password_form', $output);}/** * Whether currently in a page template. * * This template tag allows you to determine if you are in a page template. * You can optionally provide a template name and then the check will be * specific to that template. * * @since 2.5.0 * @uses $wp_query * * @param string $template The specific template name if specific matching is required. * @return bool False on failure, true if success. */function is_page_template($template = '') {	if (!is_page()) {		return false;	}	global $wp_query;	$page = $wp_query->get_queried_object();	$custom_fields = get_post_custom_values('_wp_page_template',$page->ID);	$page_template = $custom_fields[0];	// We have no argument passed so just see if a page_template has been specified	if ( empty( $template ) ) {		if (!empty( $page_template ) ) {			return true;		}	} elseif ( $template == $page_template) {		return true;	}	return false;}/** * Retrieve formatted date timestamp of a revision (linked to that revisions's page). * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses date_i18n() * * @param int|object $revision Revision ID or revision object. * @param bool $link Optional, default is true. Link to revisions's page? * @return string i18n formatted datetimestamp or localized 'Current Revision'. */function wp_post_revision_title( $revision, $link = true ) {	if ( !$revision = get_post( $revision ) )		return $revision;	if ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )		return false;	/* translators: revision date format, see http://php.net/date */	$datef = _x( 'j F, Y @ G:i', 'revision date format');	/* translators: 1: date */	$autosavef = __( '%1$s [Autosave]' );	/* translators: 1: date */	$currentf  = __( '%1$s [Current Revision]' );	$date = date_i18n( $datef, strtotime( $revision->post_modified ) );	if ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )		$date = "<a href='$link'>$date</a>";	if ( !wp_is_post_revision( $revision ) )		$date = sprintf( $currentf, $date );	elseif ( wp_is_post_autosave( $revision ) )		$date = sprintf( $autosavef, $date );	return $date;}/** * Display list of a post's revisions. * * Can output either a UL with edit links or a TABLE with diff interface, and * restore action links. * * Second argument controls parameters: *   (bool)   parent : include the parent (the "Current Revision") in the list. *   (string) format : 'list' or 'form-table'.  'list' outputs UL, 'form-table' *                     outputs TABLE with UI. *   (int)    right  : what revision is currently being viewed - used in *                     form-table format. *   (int)    left   : what revision is currently being diffed against right - *                     used in form-table format. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revisions() * @uses wp_post_revision_title() * @uses get_edit_post_link() * @uses get_the_author_meta() * * @todo split into two functions (list, form-table) ? * * @param int|object $post_id Post ID or post object. * @param string|array $args See description {@link wp_parse_args()}. * @return null */function wp_list_post_revisions( $post_id = 0, $args = null ) {	if ( !$post = get_post( $post_id ) )		return;	$defaults = array( 'parent' => false, 'right' => false, 'left' => false, 'format' => 'list', 'type' => 'all' );	extract( wp_parse_args( $args, $defaults ), EXTR_SKIP );	switch ( $type ) {		case 'autosave' :			if ( !$autosave = wp_get_post_autosave( $post->ID ) )				return;			$revisions = array( $autosave );			break;		case 'revision' : // just revisions - remove autosave later		case 'all' :		default :			if ( !$revisions = wp_get_post_revisions( $post->ID ) )				return;			break;	}	/* translators: post revision: 1: when, 2: author name */	$titlef = _x( '%1$s by %2$s', 'post revision' );	if ( $parent )		array_unshift( $revisions, $post );	$rows = '';	$class = false;	$can_edit_post = current_user_can( 'edit_post', $post->ID );	foreach ( $revisions as $revision ) {		if ( !current_user_can( 'read_post', $revision->ID ) )			continue;		if ( 'revision' === $type && wp_is_post_autosave( $revision ) )			continue;		$date = wp_post_revision_title( $revision );		$name = get_the_author_meta( 'display_name', $revision->post_author );		if ( 'form-table' == $format ) {			if ( $left )				$left_checked = $left == $revision->ID ? ' checked="checked"' : '';			else				$left_checked = $right_checked ? ' checked="checked"' : ''; // [sic] (the next one)			$right_checked = $right == $revision->ID ? ' checked="checked"' : '';			$class = $class ? '' : " class='alternate'";			if ( $post->ID != $revision->ID && $can_edit_post )				$actions = '<a href="' . wp_nonce_url( add_query_arg( array( 'revision' => $revision->ID, 'action' => 'restore' ) ), "restore-post_$post->ID|$revision->ID" ) . '">' . __( 'Restore' ) . '</a>';			else				$actions = '';			$rows .= "<tr$class>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='left' value='$revision->ID'$left_checked /></th>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='right' value='$revision->ID'$right_checked /></th>\n";			$rows .= "\t<td>$date</td>\n";			$rows .= "\t<td>$name</td>\n";			$rows .= "\t<td class='action-links'>$actions</td>\n";			$rows .= "</tr>\n";		} else {			$title = sprintf( $titlef, $date, $name );			$rows .= "\t<li>$title</li>\n";		}	}	if ( 'form-table' == $format ) : ?><form action="revision.php" method="get"><div class="tablenav">	<div class="alignleft">		<input type="submit" class="button-secondary" value="<?php esc_attr_e( 'Compare Revisions' ); ?>" />		<input type="hidden" name="action" value="diff" />		<input type="hidden" name="post_type" value="<?php echo esc_attr($post->post_type); ?>" />	</div></div><br class="clear" /><table class="widefat post-revisions" cellspacing="0" id="post-revisions">	<col />	<col />	<col style="width: 33%" />	<col style="width: 33%" />	<col style="width: 33%" /><thead><tr>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Old', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'New', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Date Created', 'revisions column name' ); ?></th>	<th scope="col"><?php _e( 'Author' ); ?></th>	<th scope="col" class="action-links"><?php _e( 'Actions' ); ?></th></tr></thead><tbody><?php echo $rows; ?></tbody></table></form><?php	else :		echo "<ul class='post-revisions'>\n";		echo $rows;		echo "</ul>";	endif;}
<?php/** * Edit post administration panel. * * Manage Post actions: post, edit, delete, etc. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'edit.php';$submenu_file = 'edit.php';wp_reset_vars(array('action', 'safe_mode', 'withcomments', 'posts', 'content', 'edited_post_title', 'comment_error', 'profile', 'trackback_url', 'excerpt', 'showcomments', 'commentstart', 'commentend', 'commentorder'));if ( isset($_GET['post']) )	$post_id = (int) $_GET['post'];elseif ( isset($_POST['post_ID']) )	$post_id = (int) $_POST['post_ID'];else	$post_id = 0;$post_ID = $post_id;$post = null;$post_type_object = null;$post_type = null;if ( $post_id ) {	$post = get_post($post_id);	if ( $post ) {		$post_type_object = get_post_type_object($post->post_type);		if ( $post_type_object ) {			$post_type = $post->post_type;			$current_screen->post_type = $post->post_type;			$current_screen->id = $current_screen->post_type;		}	}} elseif ( isset($_POST['post_type']) ) {	$post_type_object = get_post_type_object($_POST['post_type']);	if ( $post_type_object ) {		$post_type = $post_type_object->name;		$current_screen->post_type = $post_type;		$current_screen->id = $current_screen->post_type;	}}/** * Redirect to previous page. * * @param int $post_id Optional. Post ID. */function redirect_post($post_id = '') {	if ( !empty($_POST['mode']) && 'sidebar' == $_POST['mode'] ) {		if ( isset($_POST['saveasdraft']) )			$location = 'sidebar.php?a=c';		elseif ( isset($_POST['publish']) )			$location = 'sidebar.php?a=b';	} elseif ( isset($_POST['save']) || isset($_POST['publish']) ) {		$status = get_post_status( $post_id );		if ( isset( $_POST['publish'] ) ) {			switch ( $status ) {				case 'pending':					$message = 8;					break;				case 'future':					$message = 9;					break;				default:					$message = 6;			}		} else {				$message = 'draft' == $status ? 10 : 1;		}		$location = add_query_arg( 'message', $message, get_edit_post_link( $post_id, 'url' ) );	} elseif ( isset($_POST['addmeta']) && $_POST['addmeta'] ) {		$location = add_query_arg( 'message', 2, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( isset($_POST['deletemeta']) && $_POST['deletemeta'] ) {		$location = add_query_arg( 'message', 3, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( 'post-quickpress-save-cont' == $_POST['action'] ) {		$location = "post.php?action=edit&post=$post_id&message=7";	} else {		$location = add_query_arg( 'message', 4, get_edit_post_link( $post_id, 'url' ) );	}	wp_redirect( apply_filters( 'redirect_post_location', $location, $post_id ) );}if ( isset( $_POST['deletepost'] ) )	$action = 'delete';elseif ( isset($_POST['wp-preview']) && 'dopreview' == $_POST['wp-preview'] )	$action = 'preview';$sendback = wp_get_referer();if ( strpos($sendback, 'post.php') !== false || strpos($sendback, 'post-new.php') !== false ) {	$sendback = admin_url('edit.php');	$sendback .= ( !empty( $post_type ) ) ? '?post_type=' . $post_type : '';} else {	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), $sendback );}switch($action) {case 'postajaxpost':case 'post':case 'post-quickpress-publish':case 'post-quickpress-save':	check_admin_referer('add-' . $post_type);	if ( 'post-quickpress-publish' == $action )		$_POST['publish'] = 'publish'; // tell write_post() to publish	if ( 'post-quickpress-publish' == $action || 'post-quickpress-save' == $action ) {		$_POST['comment_status'] = get_option('default_comment_status');		$_POST['ping_status'] = get_option('default_ping_status');	}	if ( !empty( $_POST['quickpress_post_ID'] ) ) {		$_POST['post_ID'] = (int) $_POST['quickpress_post_ID'];		$post_id = edit_post();	} else {		$post_id = 'postajaxpost' == $action ? edit_post() : write_post();	}	if ( 0 === strpos( $action, 'post-quickpress' ) ) {		$_POST['post_ID'] = $post_id;		// output the quickpress dashboard widget		require_once(ABSPATH . 'wp-admin/includes/dashboard.php');		wp_dashboard_quick_press_output();		exit;	}	redirect_post($post_id);	exit();	break;case 'edit':	$editing = true;	if ( empty( $post_id ) ) {		wp_redirect("post.php");		exit();	}	$p = $post_id;	if ( empty($post->ID) )		wp_die( __('You attempted to edit an item that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( !current_user_can($post_type_object->cap->edit_post, $post_id) )		wp_die( __('You are not allowed to edit this item.') );	if ( 'trash' == $post->post_status )		wp_die( __('You can&#8217;t edit this item because it is in the Trash. Please restore it and try again.') );	if ( null == $post_type_object )		wp_die( __('Unknown post type.') );	$post_type = $post->post_type;	if ( 'post' == $post_type ) {		$parent_file = "edit.php";		$submenu_file = "edit.php";	} else {		$parent_file = "edit.php?post_type=$post_type";		$submenu_file = "edit.php?post_type=$post_type";	}	if ( $last = wp_check_post_lock( $post->ID ) ) {		add_action('admin_notices', '_admin_notice_post_locked' );	} else {		wp_set_post_lock( $post->ID );		wp_enqueue_script('autosave');	}	$title = $post_type_object->labels->edit_item;	$post = get_post_to_edit($post_id);	if ( post_type_supports($post_type, 'comments') ) {		wp_enqueue_script('admin-comments');		enqueue_comment_hotkeys_js();	}	include('./edit-form-advanced.php');	break;case 'editattachment':	check_admin_referer('update-attachment_' . $post_id);	// Don't let these be changed	unset($_POST['guid']);	$_POST['post_type'] = 'attachment';	// Update the thumbnail filename	$newmeta = wp_get_attachment_metadata( $post_id, true );	$newmeta['thumb'] = $_POST['thumb'];	wp_update_attachment_metadata( $post_id, $newmeta );case 'editpost':	check_admin_referer('update-' . $post_type . '_' . $post_id);	$post_id = edit_post();	redirect_post($post_id); // Send user on their way while we keep working	exit();	break;case 'trash':	check_admin_referer('trash-' . $post_type . '_' . $post_id);	$post = & get_post($post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item to the Trash.') );	if ( ! wp_trash_post($post_id) )		wp_die( __('Error in moving to Trash.') );	wp_redirect( add_query_arg( array('trashed' => 1, 'ids' => $post_id), $sendback ) );	exit();	break;case 'untrash':	check_admin_referer('untrash-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item out of the Trash.') );	if ( ! wp_untrash_post($post_id) )		wp_die( __('Error in restoring from Trash.') );	wp_redirect( add_query_arg('untrashed', 1, $sendback) );	exit();	break;case 'delete':	check_admin_referer('delete-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to delete this item.') );	$force = !EMPTY_TRASH_DAYS;	if ( $post->post_type == 'attachment' ) {		$force = ( $force || !MEDIA_TRASH );		if ( ! wp_delete_attachment($post_id, $force) )			wp_die( __('Error in deleting.') );	} else {		if ( !wp_delete_post($post_id, $force) )			wp_die( __('Error in deleting.') );	}	wp_redirect( add_query_arg('deleted', 1, $sendback) );	exit();	break;case 'preview':	check_admin_referer( 'autosave', 'autosavenonce' );	$url = post_preview();	wp_redirect($url);	exit();	break;default:		wp_redirect('edit.php');	exit();	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Edit user administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'redirect', 'profile', 'user_id', 'wp_http_referer'));$user_id = (int) $user_id;$current_user = wp_get_current_user();if ( ! defined( 'IS_PROFILE_PAGE' ) )	define( 'IS_PROFILE_PAGE', ( $user_id == $current_user->ID ) );if ( ! $user_id && IS_PROFILE_PAGE )	$user_id = $current_user->ID;elseif ( ! $user_id && ! IS_PROFILE_PAGE )	wp_die(__( 'Invalid user ID.' ) );elseif ( ! get_userdata( $user_id ) )	wp_die( __('Invalid user ID.') );wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');$title = IS_PROFILE_PAGE ? __('Profile') : __('Edit User');if ( current_user_can('edit_users') && !IS_PROFILE_PAGE )	$submenu_file = 'users.php';else	$submenu_file = 'profile.php';$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('Your profile contains information about you (your &#8220;account&#8221;) as well as some personal options related to using WordPress.') . '</p>' .    '<p>' . __('You can change your password, turn on keyboard shortcuts, change the color scheme of your WordPress administration screens, and turn off the WYSIWYG (Visual) editor, among other things.') . '</p>' .    '<p>' . __('Your username cannot be changed, but you can use other fields to enter your real name or a nickname, and change which name to display on your posts.') . '</p>' .    '<p>' . __('Required fields are indicated; the rest are optional. Profile information will only be displayed if your theme is set up to do so.') . '</p>' .    '<p>' . __('Remember to click the Update Profile button when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Your_Profile_SubPanel" target="_blank">Documentation on User Profiles</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$wp_http_referer = remove_query_arg(array('update', 'delete_count'), stripslashes($wp_http_referer));$all_post_caps = array('posts', 'pages');$user_can_edit = false;foreach ( $all_post_caps as $post_cap )	$user_can_edit |= current_user_can("edit_$post_cap");/** * Optional SSL preference that can be turned on by hooking to the 'personal_options' action. * * @since 2.7.0 * * @param object $user User data object */function use_ssl_preference($user) {?>	<tr>		<th scope="row"><?php _e('Use https')?></th>		<td><label for="use_ssl"><input name="use_ssl" type="checkbox" id="use_ssl" value="1" <?php checked('1', $user->use_ssl); ?> /> <?php _e('Always use https when visiting the admin'); ?></label></td>	</tr><?php}// Only allow super admins on multisite to edit every user.if ( is_multisite() && ! current_user_can( 'manage_network_users' ) && $user_id != $current_user->ID && ! apply_filters( 'enable_edit_any_user_configuration', true ) )	wp_die( __( 'You do not have permission to edit this user.' ) );// Execute confirmed email change. See send_confirmation_on_profile_email().if ( is_multisite() && IS_PROFILE_PAGE && isset( $_GET[ 'newuseremail' ] ) && $current_user->ID ) {	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email[ 'hash' ] == $_GET[ 'newuseremail' ] ) {		$user->ID = $current_user->ID;		$user->user_email = esc_html( trim( $new_email[ 'newemail' ] ) );		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $current_user->user_login ) ) )			$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $user->user_email, $current_user->user_login ) );		wp_update_user( get_object_vars( $user ) );		delete_option( $current_user->ID . '_new_email' );		wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );		die();	}} elseif ( is_multisite() && IS_PROFILE_PAGE && !empty( $_GET['dismiss'] ) && $current_user->ID . '_new_email' == $_GET['dismiss'] ) {	delete_option( $current_user->ID . '_new_email' );	wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );	die();}switch ($action) {case 'switchposts':check_admin_referer();/* TODO: Switch all posts from one user to another user */break;case 'update':check_admin_referer('update-user_' . $user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));if ( IS_PROFILE_PAGE )	do_action('personal_options_update', $user_id);else	do_action('edit_user_profile_update', $user_id);if ( !is_multisite() ) {	$errors = edit_user($user_id);} else {	$user = get_userdata( $user_id );	// Update the email address in signups, if present.	if ( $user->user_login && isset( $_POST[ 'email' ] ) && is_email( $_POST[ 'email' ] ) && $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $user->user_login ) ) )		$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $_POST[ 'email' ], $user_login ) );	// WPMU must delete the user from the current blog if WP added him after editing.	$delete_role = false;	$blog_prefix = $wpdb->get_blog_prefix();	if ( $user_id != $current_user->ID ) {		$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$user_id}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );		if ( null == $cap && $_POST[ 'role' ] == '' ) {			$_POST[ 'role' ] = 'contributor';			$delete_role = true;		}	}	if ( !isset( $errors ) || ( isset( $errors ) && is_object( $errors ) && false == $errors->get_error_codes() ) )		$errors = edit_user($user_id);	if ( $delete_role ) // stops users being added to current blog when they are edited		delete_user_meta( $user_id, $blog_prefix . 'capabilities' );	if ( is_multisite() && !IS_PROFILE_PAGE && current_user_can( 'manage_network_options' ) && !isset($super_admins) && empty( $_POST['super_admin'] ) == is_super_admin( $user_id ) )		empty( $_POST['super_admin'] ) ? revoke_super_admin( $user_id ) : grant_super_admin( $user_id );}if ( !is_wp_error( $errors ) ) {	$redirect = (IS_PROFILE_PAGE ? "profile.php?" : "user-edit.php?user_id=$user_id&"). "updated=true";	$redirect = add_query_arg('wp_http_referer', urlencode($wp_http_referer), $redirect);	wp_redirect($redirect);	exit;}default:$profileuser = get_user_to_edit($user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));include ('admin-header.php');?><?php if ( !IS_PROFILE_PAGE && is_super_admin( $profileuser->ID ) && current_user_can( 'manage_network_options' ) ) { ?>	<div class="updated"><p><strong><?php _e('Important:'); ?></strong> <?php _e('This user has super admin privileges.'); ?></p></div><?php } ?><?php if ( isset($_GET['updated']) ) : ?><div id="message" class="updated">	<p><strong><?php _e('User updated.') ?></strong></p>	<?php if ( $wp_http_referer && !IS_PROFILE_PAGE ) : ?>	<p><a href="users.php"><?php _e('&larr; Back to Authors and Users'); ?></a></p>	<?php endif; ?></div><?php endif; ?><?php if ( isset( $errors ) && is_wp_error( $errors ) ) : ?><div class="error"><p><?php echo implode( "</p>\n<p>", $errors->get_error_messages() ); ?></p></div><?php endif; ?><div class="wrap" id="profile-page"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="your-profile" action="<?php echo esc_url( admin_url( IS_PROFILE_PAGE ? 'profile.php' : 'user-edit.php' ) ); ?>" method="post"<?php do_action('user_edit_form_tag'); ?>><?php wp_nonce_field('update-user_' . $user_id) ?><?php if ( $wp_http_referer ) : ?>	<input type="hidden" name="wp_http_referer" value="<?php echo esc_url($wp_http_referer); ?>" /><?php endif; ?><p><input type="hidden" name="from" value="profile" /><input type="hidden" name="checkuser_id" value="<?php echo $user_ID ?>" /></p><h3><?php _e('Personal Options'); ?></h3><table class="form-table"><?php if ( rich_edit_exists() && !( IS_PROFILE_PAGE && !$user_can_edit ) ) : // don't bother showing the option if the editor has been removed ?>	<tr>		<th scope="row"><?php _e('Visual Editor')?></th>		<td><label for="rich_editing"><input name="rich_editing" type="checkbox" id="rich_editing" value="false" <?php checked('false', $profileuser->rich_editing); ?> /> <?php _e('Disable the visual editor when writing'); ?></label></td>	</tr><?php endif; ?><?php if ( count($_wp_admin_css_colors) > 1 && has_action('admin_color_scheme_picker') ) : ?><tr><th scope="row"><?php _e('Admin Color Scheme')?></th><td><?php do_action( 'admin_color_scheme_picker' ); ?></td></tr><?phpendif; // $_wp_admin_css_colorsif ( !( IS_PROFILE_PAGE && !$user_can_edit ) ) : ?><tr><th scope="row"><?php _e( 'Keyboard Shortcuts' ); ?></th><td><label for="comment_shortcuts"><input type="checkbox" name="comment_shortcuts" id="comment_shortcuts" value="true" <?php if ( !empty($profileuser->comment_shortcuts) ) checked('true', $profileuser->comment_shortcuts); ?> /> <?php _e('Enable keyboard shortcuts for comment moderation.'); ?></label> <?php _e('<a href="http://codex.wordpress.org/Keyboard_Shortcuts">More information</a>'); ?></td></tr><?phpendif;do_action('personal_options', $profileuser);?></table><?php	if ( IS_PROFILE_PAGE )		do_action('profile_personal_options', $profileuser);?><h3><?php _e('Name') ?></h3><table class="form-table">	<tr>		<th><label for="user_login"><?php _e('Username'); ?></label></th>		<td><input type="text" name="user_login" id="user_login" value="<?php echo esc_attr($profileuser->user_login); ?>" disabled="disabled" class="regular-text" /> <span class="description"><?php _e('Usernames cannot be changed.'); ?></span></td>	</tr><?php if ( !IS_PROFILE_PAGE ): ?><tr><th><label for="role"><?php _e('Role:') ?></label></th><td><select name="role" id="role"><?php// Get the highest/primary role for this user// TODO: create a function that does this: wp_get_user_role()$user_roles = $profileuser->roles;$user_role = array_shift($user_roles);// print the full list of roles with the primary one selected.wp_dropdown_roles($user_role);// print the 'no role' option. Make it selected if the user has no role yet.if ( $user_role )	echo '<option value="">' . __('&mdash; No role for this site &mdash;') . '</option>';else	echo '<option value="" selected="selected">' . __('&mdash; No role for this site &mdash;') . '</option>';?></select><?php if ( is_multisite() && current_user_can( 'manage_network_options' ) && !isset($super_admins) ) { ?><p><label><input type="checkbox" id="super_admin" name="super_admin"<?php checked( is_super_admin( $profileuser->ID ) ); ?> /> <?php _e( 'Grant this user super admin privileges for the Network.'); ?></label></p><?php } ?></td></tr><?php endif; //!IS_PROFILE_PAGE ?><tr>	<th><label for="first_name"><?php _e('First Name') ?></label></th>	<td><input type="text" name="first_name" id="first_name" value="<?php echo esc_attr($profileuser->first_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="last_name"><?php _e('Last Name') ?></label></th>	<td><input type="text" name="last_name" id="last_name" value="<?php echo esc_attr($profileuser->last_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="nickname"><?php _e('Nickname'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="nickname" id="nickname" value="<?php echo esc_attr($profileuser->nickname) ?>" class="regular-text" /></td></tr><tr>	<th><label for="display_name"><?php _e('Display name publicly as') ?></label></th>	<td>		<select name="display_name" id="display_name">		<?php			$public_display = array();			$public_display['display_username']  = $profileuser->user_login;			$public_display['display_nickname']  = $profileuser->nickname;			if ( !empty($profileuser->first_name) )				$public_display['display_firstname'] = $profileuser->first_name;			if ( !empty($profileuser->last_name) )				$public_display['display_lastname'] = $profileuser->last_name;			if ( !empty($profileuser->first_name) && !empty($profileuser->last_name) ) {				$public_display['display_firstlast'] = $profileuser->first_name . ' ' . $profileuser->last_name;				$public_display['display_lastfirst'] = $profileuser->last_name . ' ' . $profileuser->first_name;			}			if ( !in_array( $profileuser->display_name, $public_display ) ) // Only add this if it isn't duplicated elsewhere				$public_display = array( 'display_displayname' => $profileuser->display_name ) + $public_display;			$public_display = array_map( 'trim', $public_display );			$public_display = array_unique( $public_display );			foreach ( $public_display as $id => $item ) {		?>			<option id="<?php echo $id; ?>" value="<?php echo esc_attr($item); ?>"<?php selected( $profileuser->display_name, $item ); ?>><?php echo $item; ?></option>		<?php			}		?>		</select>	</td></tr></table><h3><?php _e('Contact Info') ?></h3><table class="form-table"><tr>	<th><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="email" id="email" value="<?php echo esc_attr($profileuser->user_email) ?>" class="regular-text" />	<?php	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email && $new_email != $current_user->user_email ) : ?>	<div class="updated inline">	<p><?php printf( __('There is a pending change of your e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_email['newemail'], esc_url( admin_url( 'profile.php?dismiss=' . $current_user->ID . '_new_email' ) ) ); ?></p>	</div>	<?php endif; ?>	</td></tr><tr>	<th><label for="url"><?php _e('Website') ?></label></th>	<td><input type="text" name="url" id="url" value="<?php echo esc_attr($profileuser->user_url) ?>" class="regular-text code" /></td></tr><?php	foreach (_wp_get_user_contactmethods() as $name => $desc) {?><tr>	<th><label for="<?php echo $name; ?>"><?php echo apply_filters('user_'.$name.'_label', $desc); ?></label></th>	<td><input type="text" name="<?php echo $name; ?>" id="<?php echo $name; ?>" value="<?php echo esc_attr($profileuser->$name) ?>" class="regular-text" /></td></tr><?php	}?></table><h3><?php IS_PROFILE_PAGE ? _e('About Yourself') : _e('About the user'); ?></h3><table class="form-table"><tr>	<th><label for="description"><?php _e('Biographical Info'); ?></label></th>	<td><textarea name="description" id="description" rows="5" cols="30"><?php echo esc_html($profileuser->description); ?></textarea><br />	<span class="description"><?php _e('Share a little biographical information to fill out your profile. This may be shown publicly.'); ?></span></td></tr><?php$show_password_fields = apply_filters('show_password_fields', true, $profileuser);if ( $show_password_fields ) :?><tr id="password">	<th><label for="pass1"><?php _e('New Password'); ?></label></th>	<td><input type="password" name="pass1" id="pass1" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("If you would like to change the password type a new one. Otherwise leave this blank."); ?></span><br />		<input type="password" name="pass2" id="pass2" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("Type your new password again."); ?></span><br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>	</td></tr><?php endif; ?></table><?php	if ( IS_PROFILE_PAGE )		do_action( 'show_user_profile', $profileuser );	else		do_action( 'edit_user_profile', $profileuser );?><?php if ( count($profileuser->caps) > count($profileuser->roles) && apply_filters('additional_capabilities_display', true, $profileuser) ) { ?><br class="clear" />	<table width="99%" style="border: none;" cellspacing="2" cellpadding="3" class="editform">		<tr>			<th scope="row"><?php _e('Additional Capabilities') ?></th>			<td><?php			$output = '';			foreach ( $profileuser->caps as $cap => $value ) {				if ( !$wp_roles->is_role($cap) ) {					if ( $output != '' )						$output .= ', ';					$output .= $value ? $cap : "Denied: {$cap}";				}			}			echo $output;			?></td>		</tr>	</table><?php } ?><p class="submit">	<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="<?php echo esc_attr($user_id); ?>" />	<input type="submit" class="button-primary" value="<?php IS_PROFILE_PAGE ? esc_attr_e('Update Profile') : esc_attr_e('Update User') ?>" name="submit" /></p></form></div><?phpbreak;}?><script type="text/javascript" charset="utf-8">	if (window.location.hash == '#password') {		document.getElementById('pass1').focus();	}</script><?phpinclude('./admin-footer.php');?>
<?php/** * WordPress Query API * * The query API attempts to get which part of WordPress to the user is on. It * also provides functionality to getting URL query information. * * @link http://codex.wordpress.org/The_Loop More information on The Loop. * * @package WordPress * @subpackage Query *//** * Retrieve variable in the WP_Query class. * * @see WP_Query::get() * @since 1.5.0 * @uses $wp_query * * @param string $var The variable key to retrieve. * @return mixed */function get_query_var($var) {	global $wp_query;	return $wp_query->get($var);}/** * Set query variable. * * @see WP_Query::set() * @since 2.2.0 * @uses $wp_query * * @param string $var Query variable key. * @param mixed $value * @return null */function set_query_var($var, $value) {	global $wp_query;	return $wp_query->set($var, $value);}/** * Set up The Loop with query parameters. * * This will override the current WordPress Loop and shouldn't be used more than * once. This must not be used within the WordPress Loop. * * @since 1.5.0 * @uses $wp_query * * @param string $query * @return array List of posts */function &query_posts($query) {	unset($GLOBALS['wp_query']);	$GLOBALS['wp_query'] =& new WP_Query();	return $GLOBALS['wp_query']->query($query);}/** * Destroy the previous query and set up a new query. * * This should be used after {@link query_posts()} and before another {@link * query_posts()}. This will remove obscure bugs that occur when the previous * wp_query object is not destroyed properly before another is set up. * * @since 2.3.0 * @uses $wp_query */function wp_reset_query() {	unset($GLOBALS['wp_query']);	$GLOBALS['wp_query'] =& $GLOBALS['wp_the_query'];	wp_reset_postdata();}/** * After looping through a separate query, this function restores * the $post global to the current post in the main query * * @since 3.0.0 * @uses $wp_query */function wp_reset_postdata() {	global $wp_query;	if ( !empty($wp_query->post) ) {		$GLOBALS['post'] = $wp_query->post;		setup_postdata($wp_query->post);	}}/* * Query type checks. *//** * Is query requesting an archive page. * * @since 1.5.0 * @uses $wp_query * * @return bool True if page is archive. */function is_archive() {	global $wp_query;	return $wp_query->is_archive;}/** * Is query requesting an attachment page. * * @since 2.0.0 * @uses $wp_query * * @return bool True if page is attachment. */function is_attachment() {	global $wp_query;	return $wp_query->is_attachment;}/** * Is query requesting an author page. * * If the $author parameter is specified then the check will be expanded to * include whether the queried author matches the one given in the parameter. * You can match against integers and against strings. * * If matching against an integer, the ID should be used of the author for the * test. If the $author is an ID and matches the author page user ID, then * 'true' will be returned. * * If matching against strings, then the test will be matched against both the * nickname and user nicename and will return true on success. * * @since 1.5.0 * @uses $wp_query * * @param string|int $author Optional. Is current page this author. * @return bool True if page is author or $author (if set). */function is_author($author = '') {	global $wp_query;	if ( !$wp_query->is_author )		return false;	if ( empty($author) )		return true;	$author_obj = $wp_query->get_queried_object();	$author = (array) $author;	if ( in_array( $author_obj->ID, $author ) )		return true;	elseif ( in_array( $author_obj->nickname, $author ) )		return true;	elseif ( in_array( $author_obj->user_nicename, $author ) )		return true;	return false;}/** * Whether current page query contains a category name or given category name. * * The category list can contain category IDs, names, or category slugs. If any * of them are part of the query, then it will return true. * * @since 1.5.0 * @uses $wp_query * * @param string|array $category Optional. * @return bool */function is_category($category = '') {	global $wp_query;	if ( !$wp_query->is_category )		return false;	if ( empty($category) )		return true;	$cat_obj = $wp_query->get_queried_object();	$category = (array) $category;	if ( in_array( $cat_obj->term_id, $category ) )		return true;	elseif ( in_array( $cat_obj->name, $category ) )		return true;	elseif ( in_array( $cat_obj->slug, $category ) )		return true;	return false;}/** * Whether the current page query has the given tag slug or contains tag. * * @since 2.3.0 * @uses $wp_query * * @param string|array $slug Optional. Single tag or list of tags to check for. * @return bool */function is_tag( $slug = '' ) {	global $wp_query;	if ( !$wp_query->is_tag )		return false;	if ( empty( $slug ) )		return true;	$tag_obj = $wp_query->get_queried_object();	$slug = (array) $slug;	if ( in_array( $tag_obj->slug, $slug ) )		return true;	return false;}/** * Whether the current query is for the given taxonomy and/or term. * * If no taxonomy argument is set, returns true if any taxonomy is queried. * If the taxonomy argument is passed but no term argument, returns true *    if the taxonomy or taxonomies in the argument are being queried. * If both taxonomy and term arguments are passed, returns true *    if the current query is for a term contained in the terms argument *    which has a taxonomy contained in the taxonomy argument. * * @since 2.5.0 * @uses $wp_query * * @param string|array $taxonomy Optional. Taxonomy slug or slugs to check in current query. * @param int|array|string $term. Optional. A single or array of, The term's ID, Name or Slug * @return bool */function is_tax( $taxonomy = '', $term = '' ) {	global $wp_query, $wp_taxonomies;	$queried_object = $wp_query->get_queried_object();	$tax_array = array_intersect(array_keys($wp_taxonomies), (array) $taxonomy);	$term_array = (array) $term;	if ( !$wp_query->is_tax )		return false;	if ( empty( $taxonomy ) )		return true;	if ( empty( $term ) ) // Only a Taxonomy provided		return isset($queried_object->taxonomy) && count( $tax_array ) && in_array($queried_object->taxonomy, $tax_array);	return isset($queried_object->term_id) &&			count(array_intersect(				array($queried_object->term_id, $queried_object->name, $queried_object->slug),				$term_array			));}/** * Whether the current URL is within the comments popup window. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_comments_popup() {	global $wp_query;	return $wp_query->is_comments_popup;}/** * Whether current URL is based on a date. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_date() {	global $wp_query;	return $wp_query->is_date;}/** * Whether current blog URL contains a day. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_day() {	global $wp_query;	return $wp_query->is_day;}/** * Whether current page query is feed URL. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_feed() {	global $wp_query;	return $wp_query->is_feed;}/** * Whether current page query is comment feed URL. * * @since 3.0.0 * @uses $wp_query * * @return bool */function is_comment_feed() {	global $wp_query;	return $wp_query->is_comment_feed;}/** * Whether current page query is the front of the site. * * @since 2.5.0 * @uses is_home() * @uses get_option() * * @return bool True, if front of site. */function is_front_page() {	// most likely case	if ( 'posts' == get_option('show_on_front') && is_home() )		return true;	elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') && is_page(get_option('page_on_front')) )		return true;	else		return false;}/** * Whether current page view is the blog homepage. * * This is the page which is showing the time based blog content of your site * so if you set a static page for the front page of your site then this will * only be true on the page which you set as the "Posts page" in Reading Settings. * * @since 1.5.0 * @uses $wp_query * * @return bool True if blog view homepage. */function is_home() {	global $wp_query;	return $wp_query->is_home;}/** * Whether current page query contains a month. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_month() {	global $wp_query;	return $wp_query->is_month;}/** * Whether query is page or contains given page(s). * * Calls the function without any parameters will only test whether the current * query is of the page type. Either a list or a single item can be tested * against for whether the query is a page and also is the value or one of the * values in the page parameter. * * The parameter can contain the page ID, page title, or page name. The * parameter can also be an array of those three values. * * @since 1.5.0 * @uses $wp_query * * @param mixed $page Either page or list of pages to test against. * @return bool */function is_page($page = '') {	global $wp_query;	if ( !$wp_query->is_page )		return false;	if ( empty($page) )		return true;	$page_obj = $wp_query->get_queried_object();	$page = (array) $page;	if ( in_array( $page_obj->ID, $page ) )		return true;	elseif ( in_array( $page_obj->post_title, $page ) )		return true;	else if ( in_array( $page_obj->post_name, $page ) )		return true;	return false;}/** * Whether query contains multiple pages for the results. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_paged() {	global $wp_query;	return $wp_query->is_paged;}/** * Whether the current page was created by a plugin. * * The plugin can set this by using the global $plugin_page and setting it to * true. * * @since 1.5.0 * @global bool $plugin_page Used by plugins to tell the query that current is a plugin page. * * @return bool */function is_plugin_page() {	global $plugin_page;	if ( isset($plugin_page) )		return true;	return false;}/** * Whether the current query is preview of post or page. * * @since 2.0.0 * @uses $wp_query * * @return bool */function is_preview() {	global $wp_query;	return $wp_query->is_preview;}/** * Whether the current query post is robots. * * @since 2.1.0 * @uses $wp_query * * @return bool */function is_robots() {	global $wp_query;	return $wp_query->is_robots;}/** * Whether current query is the result of a user search. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_search() {	global $wp_query;	return $wp_query->is_search;}/** * Whether the current page query is single page. * * The parameter can contain the post ID, post title, or post name. The * parameter can also be an array of those three values. * * This applies to other post types, attachments, pages, posts. Just means that * the current query has only a single object. * * @since 1.5.0 * @uses $wp_query * * @param mixed $post Either post or list of posts to test against. * @return bool */function is_single($post = '') {	global $wp_query;	if ( !$wp_query->is_single )		return false;	if ( empty($post) )		return true;	$post_obj = $wp_query->get_queried_object();	$post = (array) $post;	if ( in_array( $post_obj->ID, $post ) )		return true;	elseif ( in_array( $post_obj->post_title, $post ) )		return true;	elseif ( in_array( $post_obj->post_name, $post ) )		return true;	return false;}/** * Whether is single post, is a page, or is an attachment. * * @since 1.5.0 * @uses $wp_query * * @param string|array $post_types Optional. Post type or types to check in current query. * @return bool */function is_singular($post_types = '') {	global $wp_query;	if ( empty($post_types) || !$wp_query->is_singular )		return $wp_query->is_singular;	$post_obj = $wp_query->get_queried_object();	return in_array($post_obj->post_type, (array) $post_types);}/** * Whether the query contains a time. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_time() {	global $wp_query;	return $wp_query->is_time;}/** * Whether the query is a trackback. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_trackback() {	global $wp_query;	return $wp_query->is_trackback;}/** * Whether the query contains a year. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_year() {	global $wp_query;	return $wp_query->is_year;}/** * Whether current page query is a 404 and no results for WordPress query. * * @since 1.5.0 * @uses $wp_query * * @return bool True, if nothing is found matching WordPress Query. */function is_404() {	global $wp_query;	return $wp_query->is_404;}/* * The Loop.  Post loop control. *//** * Whether current WordPress query has results to loop over. * * @see WP_Query::have_posts() * @since 1.5.0 * @uses $wp_query * * @return bool */function have_posts() {	global $wp_query;	return $wp_query->have_posts();}/** * Whether the caller is in the Loop. * * @since 2.0.0 * @uses $wp_query * * @return bool True if caller is within loop, false if loop hasn't started or ended. */function in_the_loop() {	global $wp_query;	return $wp_query->in_the_loop;}/** * Rewind the loop posts. * * @see WP_Query::rewind_posts() * @since 1.5.0 * @uses $wp_query * * @return null */function rewind_posts() {	global $wp_query;	return $wp_query->rewind_posts();}/** * Iterate the post index in the loop. * * @see WP_Query::the_post() * @since 1.5.0 * @uses $wp_query */function the_post() {	global $wp_query;	$wp_query->the_post();}/* * Comments loop. *//** * Whether there are comments to loop over. * * @see WP_Query::have_comments() * @since 2.2.0 * @uses $wp_query * * @return bool */function have_comments() {	global $wp_query;	return $wp_query->have_comments();}/** * Iterate comment index in the comment loop. * * @see WP_Query::the_comment() * @since 2.2.0 * @uses $wp_query * * @return object */function the_comment() {	global $wp_query;	return $wp_query->the_comment();}/* * WP_Query *//** * The WordPress Query class. * * @link http://codex.wordpress.org/Function_Reference/WP_Query Codex page. * * @since 1.5.0 */class WP_Query {	/**	 * Query string	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $query;	/**	 * Query search variables set by the user.	 *	 * @since 1.5.0	 * @access public	 * @var array	 */	var $query_vars = array();	/**	 * Holds the data for a single object that is queried.	 *	 * Holds the contents of a post, page, category, attachment.	 *	 * @since 1.5.0	 * @access public	 * @var object|array	 */	var $queried_object;	/**	 * The ID of the queried object.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $queried_object_id;	/**	 * Get post database query.	 *	 * @since 2.0.1	 * @access public	 * @var string	 */	var $request;	/**	 * List of posts.	 *	 * @since 1.5.0	 * @access public	 * @var array	 */	var $posts;	/**	 * The amount of posts for the current query.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $post_count = 0;	/**	 * Index of the current item in the loop.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $current_post = -1;	/**	 * Whether the loop has started and the caller is in the loop.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $in_the_loop = false;	/**	 * The current post ID.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $post;	/**	 * The list of comments for current post.	 *	 * @since 2.2.0	 * @access public	 * @var array	 */	var $comments;	/**	 * The amount of comments for the posts.	 *	 * @since 2.2.0	 * @access public	 * @var int	 */	var $comment_count = 0;	/**	 * The index of the comment in the comment loop.	 *	 * @since 2.2.0	 * @access public	 * @var int	 */	var $current_comment = -1;	/**	 * Current comment ID.	 *	 * @since 2.2.0	 * @access public	 * @var int	 */	var $comment;	/**	 * Amount of posts if limit clause was not used.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $found_posts = 0;	/**	 * The amount of pages.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $max_num_pages = 0;	/**	 * The amount of comment pages.	 *	 * @since 2.7.0	 * @access public	 * @var int	 */	var $max_num_comment_pages = 0;	/**	 * Set if query is single post.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_single = false;	/**	 * Set if query is preview of blog.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $is_preview = false;	/**	 * Set if query returns a page.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_page = false;	/**	 * Set if query is an archive list.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_archive = false;	/**	 * Set if query is part of a date.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_date = false;	/**	 * Set if query contains a year.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_year = false;	/**	 * Set if query contains a month.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_month = false;	/**	 * Set if query contains a day.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_day = false;	/**	 * Set if query contains time.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_time = false;	/**	 * Set if query contains an author.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_author = false;	/**	 * Set if query contains category.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_category = false;	/**	 * Set if query contains tag.	 *	 * @since 2.3.0	 * @access public	 * @var bool	 */	var $is_tag = false;	/**	 * Set if query contains taxonomy.	 *	 * @since 2.5.0	 * @access public	 * @var bool	 */	var $is_tax = false;	/**	 * Set if query was part of a search result.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_search = false;	/**	 * Set if query is feed display.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_feed = false;	/**	 * Set if query is comment feed display.	 *	 * @since 2.2.0	 * @access public	 * @var bool	 */	var $is_comment_feed = false;	/**	 * Set if query is trackback.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_trackback = false;	/**	 * Set if query is blog homepage.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_home = false;	/**	 * Set if query couldn't found anything.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_404 = false;	/**	 * Set if query is within comments popup window.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_comments_popup = false;	/**	 * Set if query is part of administration page.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_admin = false;	/**	 * Set if query is an attachment.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $is_attachment = false;	/**	 * Set if is single, is a page, or is an attachment.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $is_singular = false;	/**	 * Set if query is for robots.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $is_robots = false;	/**	 * Set if query contains posts.	 *	 * Basically, the homepage if the option isn't set for the static homepage.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $is_posts_page = false;	/**	 * Resets query flags to false.	 *	 * The query flags are what page info WordPress was able to figure out.	 *	 * @since 2.0.0	 * @access private	 */	function init_query_flags() {		$this->is_single = false;		$this->is_page = false;		$this->is_archive = false;		$this->is_date = false;		$this->is_year = false;		$this->is_month = false;		$this->is_day = false;		$this->is_time = false;		$this->is_author = false;		$this->is_category = false;		$this->is_tag = false;		$this->is_tax = false;		$this->is_search = false;		$this->is_feed = false;		$this->is_comment_feed = false;		$this->is_trackback = false;		$this->is_home = false;		$this->is_404 = false;		$this->is_paged = false;		$this->is_admin = false;		$this->is_attachment = false;		$this->is_singular = false;		$this->is_robots = false;		$this->is_posts_page = false;	}	/**	 * Initiates object properties and sets default values.	 *	 * @since 1.5.0	 * @access public	 */	function init() {		unset($this->posts);		unset($this->query);		$this->query_vars = array();		unset($this->queried_object);		unset($this->queried_object_id);		$this->post_count = 0;		$this->current_post = -1;		$this->in_the_loop = false;		$this->init_query_flags();	}	/**	 * Reparse the query vars.	 *	 * @since 1.5.0	 * @access public	 */	function parse_query_vars() {		$this->parse_query('');	}	/**	 * Fills in the query variables, which do not exist within the parameter.	 *	 * @since 2.1.0	 * @access public	 *	 * @param array $array Defined query variables.	 * @return array Complete query variables with undefined ones filled in empty.	 */	function fill_query_vars($array) {		$keys = array(			'error'			, 'm'			, 'p'			, 'post_parent'			, 'subpost'			, 'subpost_id'			, 'attachment'			, 'attachment_id'			, 'name'			, 'static'			, 'pagename'			, 'page_id'			, 'second'			, 'minute'			, 'hour'			, 'day'			, 'monthnum'			, 'year'			, 'w'			, 'category_name'			, 'tag'			, 'cat'			, 'tag_id'			, 'author_name'			, 'feed'			, 'tb'			, 'paged'			, 'comments_popup'			, 'meta_key'			, 'meta_value'			, 'preview'			, 's'			, 'sentence'		);		foreach ( $keys as $key ) {			if ( !isset($array[$key]))				$array[$key] = '';		}		$array_keys = array('category__in', 'category__not_in', 'category__and', 'post__in', 'post__not_in',			'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and');		foreach ( $array_keys as $key ) {			if ( !isset($array[$key]))				$array[$key] = array();		}		return $array;	}	/**	 * Parse a query string and set query type booleans.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string|array $query	 */	function parse_query($query) {		if ( !empty($query) || !isset($this->query) ) {			$this->init();			if ( is_array($query) )				$this->query_vars = $query;			else				parse_str($query, $this->query_vars);			$this->query = $query;		}		$this->query_vars = $this->fill_query_vars($this->query_vars);		$qv = &$this->query_vars;		if ( ! empty($qv['robots']) )			$this->is_robots = true;		$qv['p'] =  absint($qv['p']);		$qv['page_id'] =  absint($qv['page_id']);		$qv['year'] = absint($qv['year']);		$qv['monthnum'] = absint($qv['monthnum']);		$qv['day'] = absint($qv['day']);		$qv['w'] = absint($qv['w']);		$qv['m'] = absint($qv['m']);		$qv['paged'] = absint($qv['paged']);		$qv['cat'] = preg_replace( '|[^0-9,-]|', '', $qv['cat'] ); // comma separated list of positive or negative integers		$qv['pagename'] = trim( $qv['pagename'] );		$qv['name'] = trim( $qv['name'] );		if ( '' !== $qv['hour'] ) $qv['hour'] = absint($qv['hour']);		if ( '' !== $qv['minute'] ) $qv['minute'] = absint($qv['minute']);		if ( '' !== $qv['second'] ) $qv['second'] = absint($qv['second']);		// Compat.  Map subpost to attachment.		if ( '' != $qv['subpost'] )			$qv['attachment'] = $qv['subpost'];		if ( '' != $qv['subpost_id'] )			$qv['attachment_id'] = $qv['subpost_id'];		$qv['attachment_id'] = absint($qv['attachment_id']);		if ( ('' != $qv['attachment']) || !empty($qv['attachment_id']) ) {			$this->is_single = true;			$this->is_attachment = true;		} elseif ( '' != $qv['name'] ) {			$this->is_single = true;		} elseif ( $qv['p'] ) {			$this->is_single = true;		} elseif ( ('' !== $qv['hour']) && ('' !== $qv['minute']) &&('' !== $qv['second']) && ('' != $qv['year']) && ('' != $qv['monthnum']) && ('' != $qv['day']) ) {			// If year, month, day, hour, minute, and second are set, a single			// post is being queried.			$this->is_single = true;		} elseif ( '' != $qv['static'] || '' != $qv['pagename'] || !empty($qv['page_id']) ) {			$this->is_page = true;			$this->is_single = false;		} elseif ( !empty($qv['s']) ) {			$this->is_search = true;		} else {		// Look for archive queries.  Dates, categories, authors.			if ( '' !== $qv['second'] ) {				$this->is_time = true;				$this->is_date = true;			}			if ( '' !== $qv['minute'] ) {				$this->is_time = true;				$this->is_date = true;			}			if ( '' !== $qv['hour'] ) {				$this->is_time = true;				$this->is_date = true;			}			if ( $qv['day'] ) {				if ( ! $this->is_date ) {					$this->is_day = true;					$this->is_date = true;				}			}			if ( $qv['monthnum'] ) {				if ( ! $this->is_date ) {					$this->is_month = true;					$this->is_date = true;				}			}			if ( $qv['year'] ) {				if ( ! $this->is_date ) {					$this->is_year = true;					$this->is_date = true;				}			}			if ( $qv['m'] ) {				$this->is_date = true;				if ( strlen($qv['m']) > 9 ) {					$this->is_time = true;				} else if ( strlen($qv['m']) > 7 ) {					$this->is_day = true;				} else if ( strlen($qv['m']) > 5 ) {					$this->is_month = true;				} else {					$this->is_year = true;				}			}			if ( '' != $qv['w'] ) {				$this->is_date = true;			}			if ( empty($qv['cat']) || ($qv['cat'] == '0') ) {				$this->is_category = false;			} else {				if ( strpos($qv['cat'], '-') !== false ) {					$this->is_category = false;				} else {					$this->is_category = true;				}			}			if ( '' != $qv['category_name'] ) {				$this->is_category = true;			}			if ( !is_array($qv['category__in']) || empty($qv['category__in']) ) {				$qv['category__in'] = array();			} else {				$qv['category__in'] = array_map('absint', $qv['category__in']);				$this->is_category = true;			}			if ( !is_array($qv['category__not_in']) || empty($qv['category__not_in']) ) {				$qv['category__not_in'] = array();			} else {				$qv['category__not_in'] = array_map('absint', $qv['category__not_in']);			}			if ( !is_array($qv['category__and']) || empty($qv['category__and']) ) {				$qv['category__and'] = array();			} else {				$qv['category__and'] = array_map('absint', $qv['category__and']);				$this->is_category = true;			}			if (  '' != $qv['tag'] )				$this->is_tag = true;			$qv['tag_id'] = absint($qv['tag_id']);			if (  !empty($qv['tag_id']) )				$this->is_tag = true;			if ( !is_array($qv['tag__in']) || empty($qv['tag__in']) ) {				$qv['tag__in'] = array();			} else {				$qv['tag__in'] = array_map('absint', $qv['tag__in']);				$this->is_tag = true;			}			if ( !is_array($qv['tag__not_in']) || empty($qv['tag__not_in']) ) {				$qv['tag__not_in'] = array();			} else {				$qv['tag__not_in'] = array_map('absint', $qv['tag__not_in']);			}			if ( !is_array($qv['tag__and']) || empty($qv['tag__and']) ) {				$qv['tag__and'] = array();			} else {				$qv['tag__and'] = array_map('absint', $qv['tag__and']);				$this->is_category = true;			}			if ( !is_array($qv['tag_slug__in']) || empty($qv['tag_slug__in']) ) {				$qv['tag_slug__in'] = array();			} else {				$qv['tag_slug__in'] = array_map('sanitize_title', $qv['tag_slug__in']);				$this->is_tag = true;			}			if ( !is_array($qv['tag_slug__and']) || empty($qv['tag_slug__and']) ) {				$qv['tag_slug__and'] = array();			} else {				$qv['tag_slug__and'] = array_map('sanitize_title', $qv['tag_slug__and']);				$this->is_tag = true;			}			if ( empty($qv['taxonomy']) || empty($qv['term']) ) {				$this->is_tax = false;				foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t ) {					if ( $t->query_var && isset($qv[$t->query_var]) && '' != $qv[$t->query_var] ) {						$qv['taxonomy'] = $taxonomy;						$qv['term'] = $qv[$t->query_var];						$this->is_tax = true;						break;					}				}			} else {				$this->is_tax = true;			}			if ( empty($qv['author']) || ($qv['author'] == '0') ) {				$this->is_author = false;			} else {				$this->is_author = true;			}			if ( '' != $qv['author_name'] ) {				$this->is_author = true;			}			if ( ($this->is_date || $this->is_author || $this->is_category || $this->is_tag || $this->is_tax) )				$this->is_archive = true;		}		if ( '' != $qv['feed'] )			$this->is_feed = true;		if ( '' != $qv['tb'] )			$this->is_trackback = true;		if ( '' != $qv['paged'] && ( intval($qv['paged']) > 1 ) )			$this->is_paged = true;		if ( '' != $qv['comments_popup'] )			$this->is_comments_popup = true;		// if we're previewing inside the write screen		if ( '' != $qv['preview'] )			$this->is_preview = true;		if ( is_admin() )			$this->is_admin = true;		if ( false !== strpos($qv['feed'], 'comments-') ) {			$qv['feed'] = str_replace('comments-', '', $qv['feed']);			$qv['withcomments'] = 1;		}		$this->is_singular = $this->is_single || $this->is_page || $this->is_attachment;		if ( $this->is_feed && ( !empty($qv['withcomments']) || ( empty($qv['withoutcomments']) && $this->is_singular ) ) )			$this->is_comment_feed = true;		if ( !( $this->is_singular || $this->is_archive || $this->is_search || $this->is_feed || $this->is_trackback || $this->is_404 || $this->is_admin || $this->is_comments_popup || $this->is_robots ) )			$this->is_home = true;		// Correct is_* for page_on_front and page_for_posts		if ( $this->is_home && 'page' == get_option('show_on_front') && get_option('page_on_front') ) {			$_query = wp_parse_args($query);			if ( empty($_query) || !array_diff( array_keys($_query), array('preview', 'page', 'paged', 'cpage') ) ) {				$this->is_page = true;				$this->is_home = false;				$qv['page_id'] = get_option('page_on_front');				// Correct <!--nextpage--> for page_on_front				if ( !empty($qv['paged']) ) {					$qv['page'] = $qv['paged'];					unset($qv['paged']);				}			}		}		if ( '' != $qv['pagename'] ) {			$this->queried_object =& get_page_by_path($qv['pagename']);			if ( !empty($this->queried_object) )				$this->queried_object_id = (int) $this->queried_object->ID;			else				unset($this->queried_object);			if  ( 'page' == get_option('show_on_front') && isset($this->queried_object_id) && $this->queried_object_id == get_option('page_for_posts') ) {				$this->is_page = false;				$this->is_home = true;				$this->is_posts_page = true;			}		}		if ( $qv['page_id'] ) {			if  ( 'page' == get_option('show_on_front') && $qv['page_id'] == get_option('page_for_posts') ) {				$this->is_page = false;				$this->is_home = true;				$this->is_posts_page = true;			}		}		if ( !empty($qv['post_type']) ) {			if ( is_array($qv['post_type']) )				$qv['post_type'] = array_map('sanitize_user', $qv['post_type'], array(true));			else				$qv['post_type'] = sanitize_user($qv['post_type'], true);		}		if ( !empty($qv['post_status']) )			$qv['post_status'] = preg_replace('|[^a-z0-9_,-]|', '', $qv['post_status']);		if ( $this->is_posts_page && ( ! isset($qv['withcomments']) || ! $qv['withcomments'] ) )			$this->is_comment_feed = false;		$this->is_singular = $this->is_single || $this->is_page || $this->is_attachment;		// Done correcting is_* for page_on_front and page_for_posts		if ( '404' == $qv['error'] )			$this->set_404();		if ( !empty($query) )			do_action_ref_array('parse_query', array(&$this));	}	/**	 * Sets the 404 property and saves whether query is feed.	 *	 * @since 2.0.0	 * @access public	 */	function set_404() {		$is_feed = $this->is_feed;		$this->init_query_flags();		$this->is_404 = true;		$this->is_feed = $is_feed;	}	/**	 * Retrieve query variable.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query_var Query variable key.	 * @return mixed	 */	function get($query_var) {		if ( isset($this->query_vars[$query_var]) )			return $this->query_vars[$query_var];		return '';	}	/**	 * Set query variable.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query_var Query variable key.	 * @param mixed $value Query variable value.	 */	function set($query_var, $value) {		$this->query_vars[$query_var] = $value;	}	/**	 * Retrieve the posts based on query variables.	 *	 * There are a few filters and actions that can be used to modify the post	 * database query.	 *	 * @since 1.5.0	 * @access public	 * @uses do_action_ref_array() Calls 'pre_get_posts' hook before retrieving posts.	 *	 * @return array List of posts.	 */	function &get_posts() {		global $wpdb, $user_ID, $_wp_using_ext_object_cache;		do_action_ref_array('pre_get_posts', array(&$this));		// Shorthand.		$q = &$this->query_vars;		$q = $this->fill_query_vars($q);		// First let's clear some variables		$distinct = '';		$whichcat = '';		$whichauthor = '';		$whichmimetype = '';		$where = '';		$limits = '';		$join = '';		$search = '';		$groupby = '';		$fields = "$wpdb->posts.*";		$post_status_join = false;		$page = 1;		if ( !isset($q['caller_get_posts']) )			$q['caller_get_posts'] = false;		if ( !isset($q['suppress_filters']) )			$q['suppress_filters'] = false;		if ( !isset($q['cache_results']) ) {			if ( $_wp_using_ext_object_cache )				$q['cache_results'] = false;			else				$q['cache_results'] = true;		}		if ( !isset($q['update_post_term_cache']) )			$q['update_post_term_cache'] = true;		if ( !isset($q['update_post_meta_cache']) )			$q['update_post_meta_cache'] = true;		if ( !isset($q['post_type']) ) {			if ( $this->is_search )				$q['post_type'] = 'any';			else				$q['post_type'] = '';		}		$post_type = $q['post_type'];		if ( !isset($q['posts_per_page']) || $q['posts_per_page'] == 0 )			$q['posts_per_page'] = get_option('posts_per_page');		if ( isset($q['showposts']) && $q['showposts'] ) {			$q['showposts'] = (int) $q['showposts'];			$q['posts_per_page'] = $q['showposts'];		}		if ( (isset($q['posts_per_archive_page']) && $q['posts_per_archive_page'] != 0) && ($this->is_archive || $this->is_search) )			$q['posts_per_page'] = $q['posts_per_archive_page'];		if ( !isset($q['nopaging']) ) {			if ( $q['posts_per_page'] == -1 ) {				$q['nopaging'] = true;			} else {				$q['nopaging'] = false;			}		}		if ( $this->is_feed ) {			$q['posts_per_page'] = get_option('posts_per_rss');			$q['nopaging'] = false;		}		$q['posts_per_page'] = (int) $q['posts_per_page'];		if ( $q['posts_per_page'] < -1 )			$q['posts_per_page'] = abs($q['posts_per_page']);		else if ( $q['posts_per_page'] == 0 )			$q['posts_per_page'] = 1;		if ( !isset($q['comments_per_page']) || $q['comments_per_page'] == 0 )			$q['comments_per_page'] = get_option('comments_per_page');		if ( $this->is_home && (empty($this->query) || $q['preview'] == 'true') && ( 'page' == get_option('show_on_front') ) && get_option('page_on_front') ) {			$this->is_page = true;			$this->is_home = false;			$q['page_id'] = get_option('page_on_front');		}		if ( isset($q['page']) ) {			$q['page'] = trim($q['page'], '/');			$q['page'] = absint($q['page']);		}		// If true, forcibly turns off SQL_CALC_FOUND_ROWS even when limits are present.		if ( isset($q['no_found_rows']) )			$q['no_found_rows'] = (bool) $q['no_found_rows'];		else			$q['no_found_rows'] = false;		// If a month is specified in the querystring, load that month		if ( $q['m'] ) {			$q['m'] = '' . preg_replace('|[^0-9]|', '', $q['m']);			$where .= " AND YEAR($wpdb->posts.post_date)=" . substr($q['m'], 0, 4);			if ( strlen($q['m']) > 5 )				$where .= " AND MONTH($wpdb->posts.post_date)=" . substr($q['m'], 4, 2);			if ( strlen($q['m']) > 7 )				$where .= " AND DAYOFMONTH($wpdb->posts.post_date)=" . substr($q['m'], 6, 2);			if ( strlen($q['m']) > 9 )				$where .= " AND HOUR($wpdb->posts.post_date)=" . substr($q['m'], 8, 2);			if ( strlen($q['m']) > 11 )				$where .= " AND MINUTE($wpdb->posts.post_date)=" . substr($q['m'], 10, 2);			if ( strlen($q['m']) > 13 )				$where .= " AND SECOND($wpdb->posts.post_date)=" . substr($q['m'], 12, 2);		}		if ( '' !== $q['hour'] )			$where .= " AND HOUR($wpdb->posts.post_date)='" . $q['hour'] . "'";		if ( '' !== $q['minute'] )			$where .= " AND MINUTE($wpdb->posts.post_date)='" . $q['minute'] . "'";		if ( '' !== $q['second'] )			$where .= " AND SECOND($wpdb->posts.post_date)='" . $q['second'] . "'";		if ( $q['year'] )			$where .= " AND YEAR($wpdb->posts.post_date)='" . $q['year'] . "'";		if ( $q['monthnum'] )			$where .= " AND MONTH($wpdb->posts.post_date)='" . $q['monthnum'] . "'";		if ( $q['day'] )			$where .= " AND DAYOFMONTH($wpdb->posts.post_date)='" . $q['day'] . "'";		// If we've got a post_type AND its not "any" post_type.		if ( !empty($q['post_type']) && 'any' != $q['post_type'] ) {			foreach ( (array)$q['post_type'] as $_post_type ) {				$ptype_obj = get_post_type_object($_post_type);				if ( !$ptype_obj || !$ptype_obj->query_var || empty($q[ $ptype_obj->query_var ]) )					continue;				if ( ! $ptype_obj->hierarchical || strpos($q[ $ptype_obj->query_var ], '/') === false ) {					// Non-hierarchical post_types & parent-level-hierarchical post_types can directly use 'name'					$q['name'] = $q[ $ptype_obj->query_var ];				} else {					// Hierarchical post_types will operate through the					$q['pagename'] = $q[ $ptype_obj->query_var ];					$q['name'] = '';				}				// Only one request for a slug is possible, this is why name & pagename are overwritten above.				break;			} //end foreach			unset($ptype_obj);		}		if ( '' != $q['name'] ) {			$q['name'] = sanitize_title($q['name']);			$where .= " AND $wpdb->posts.post_name = '" . $q['name'] . "'";		} elseif ( '' != $q['pagename'] ) {			if ( isset($this->queried_object_id) ) {				$reqpage = $this->queried_object_id;			} else {				if ( 'page' != $q['post_type'] ) {					foreach ( (array)$q['post_type'] as $_post_type ) {						$ptype_obj = get_post_type_object($_post_type);						if ( !$ptype_obj || !$ptype_obj->hierarchical )							continue;						$reqpage = get_page_by_path($q['pagename'], OBJECT, $_post_type);						if ( $reqpage )							break;					}					unset($ptype_obj);				} else {					$reqpage = get_page_by_path($q['pagename']);				}				if ( !empty($reqpage) )					$reqpage = $reqpage->ID;				else					$reqpage = 0;			}			$page_for_posts = get_option('page_for_posts');			if  ( ('page' != get_option('show_on_front') ) || empty($page_for_posts) || ( $reqpage != $page_for_posts ) ) {				$q['pagename'] = str_replace('%2F', '/', urlencode(urldecode($q['pagename'])));				$page_paths = '/' . trim($q['pagename'], '/');				$q['pagename'] = sanitize_title(basename($page_paths));				$q['name'] = $q['pagename'];				$where .= " AND ($wpdb->posts.ID = '$reqpage')";				$reqpage_obj = get_page($reqpage);				if ( is_object($reqpage_obj) && 'attachment' == $reqpage_obj->post_type ) {					$this->is_attachment = true;					$post_type = $q['post_type'] = 'attachment';					$this->is_page = true;					$q['attachment_id'] = $reqpage;				}			}		} elseif ( '' != $q['attachment'] ) {			$q['attachment'] = str_replace('%2F', '/', urlencode(urldecode($q['attachment'])));			$attach_paths = '/' . trim($q['attachment'], '/');			$q['attachment'] = sanitize_title(basename($attach_paths));			$q['name'] = $q['attachment'];			$where .= " AND $wpdb->posts.post_name = '" . $q['attachment'] . "'";		}		if ( $q['w'] )			$where .= ' AND ' . _wp_mysql_week( "`$wpdb->posts`.`post_date`" ) . " = '" . $q['w'] . "'";		if ( intval($q['comments_popup']) )			$q['p'] = absint($q['comments_popup']);		// If an attachment is requested by number, let it supercede any post number.		if ( $q['attachment_id'] )			$q['p'] = absint($q['attachment_id']);		// If a post number is specified, load that post		if ( $q['p'] ) {			$where .= " AND {$wpdb->posts}.ID = " . $q['p'];		} elseif ( $q['post__in'] ) {			$post__in = implode(',', array_map( 'absint', $q['post__in'] ));			$where .= " AND {$wpdb->posts}.ID IN ($post__in)";		} elseif ( $q['post__not_in'] ) {			$post__not_in = implode(',',  array_map( 'absint', $q['post__not_in'] ));			$where .= " AND {$wpdb->posts}.ID NOT IN ($post__not_in)";		}		if ( is_numeric($q['post_parent']) )			$where .= $wpdb->prepare( " AND $wpdb->posts.post_parent = %d ", $q['post_parent'] );		if ( $q['page_id'] ) {			if  ( ('page' != get_option('show_on_front') ) || ( $q['page_id'] != get_option('page_for_posts') ) ) {				$q['p'] = $q['page_id'];				$where = " AND {$wpdb->posts}.ID = " . $q['page_id'];			}		}		// If a search pattern is specified, load the posts that match		if ( !empty($q['s']) ) {			// added slashes screw with quote grouping when done early, so done later			$q['s'] = stripslashes($q['s']);			if ( !empty($q['sentence']) ) {				$q['search_terms'] = array($q['s']);			} else {				preg_match_all('/".*?("|$)|((?<=[\\s",+])|^)[^\\s",+]+/', $q['s'], $matches);				$q['search_terms'] = array_map('_search_terms_tidy', $matches[0]);			}			$n = !empty($q['exact']) ? '' : '%';			$searchand = '';			foreach( (array) $q['search_terms'] as $term ) {				$term = addslashes_gpc($term);				$search .= "{$searchand}(($wpdb->posts.post_title LIKE '{$n}{$term}{$n}') OR ($wpdb->posts.post_content LIKE '{$n}{$term}{$n}'))";				$searchand = ' AND ';			}			$term = esc_sql($q['s']);			if ( empty($q['sentence']) && count($q['search_terms']) > 1 && $q['search_terms'][0] != $q['s'] )				$search .= " OR ($wpdb->posts.post_title LIKE '{$n}{$term}{$n}') OR ($wpdb->posts.post_content LIKE '{$n}{$term}{$n}')";			if ( !empty($search) ) {				$search = " AND ({$search}) ";				if ( !is_user_logged_in() )					$search .= " AND ($wpdb->posts.post_password = '') ";			}		}		// Allow plugins to contextually add/remove/modify the search section of the database query		$search = apply_filters_ref_array('posts_search', array( $search, &$this ) );		// Category stuff		if ( empty($q['cat']) || ($q['cat'] == '0') ||				// Bypass cat checks if fetching specific posts				$this->is_singular ) {			$whichcat = '';		} else {			$q['cat'] = ''.urldecode($q['cat']).'';			$q['cat'] = addslashes_gpc($q['cat']);			$cat_array = preg_split('/[,\s]+/', $q['cat']);			$q['cat'] = '';			$req_cats = array();			foreach ( (array) $cat_array as $cat ) {				$cat = intval($cat);				$req_cats[] = $cat;				$in = ($cat > 0);				$cat = abs($cat);				if ( $in ) {					$q['category__in'][] = $cat;					$q['category__in'] = array_merge($q['category__in'], get_term_children($cat, 'category'));				} else {					$q['category__not_in'][] = $cat;					$q['category__not_in'] = array_merge($q['category__not_in'], get_term_children($cat, 'category'));				}			}			$q['cat'] = implode(',', $req_cats);		}		if ( !empty($q['category__in']) ) {			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) ";			$whichcat .= " AND $wpdb->term_taxonomy.taxonomy = 'category' ";			$include_cats = "'" . implode("', '", $q['category__in']) . "'";			$whichcat .= " AND $wpdb->term_taxonomy.term_id IN ($include_cats) ";		}		if ( !empty($q['category__not_in']) ) {			$cat_string = "'" . implode("', '", $q['category__not_in']) . "'";			$whichcat .= " AND $wpdb->posts.ID NOT IN ( SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy = 'category' AND tt.term_id IN ($cat_string) )";		}		// Category stuff for nice URLs		if ( '' != $q['category_name'] && !$this->is_singular ) {			$q['category_name'] = implode('/', array_map('sanitize_title', explode('/', $q['category_name'])));			$reqcat = get_category_by_path($q['category_name']);			$q['category_name'] = str_replace('%2F', '/', urlencode(urldecode($q['category_name'])));			$cat_paths = '/' . trim($q['category_name'], '/');			$q['category_name'] = sanitize_title(basename($cat_paths));			$cat_paths = '/' . trim(urldecode($q['category_name']), '/');			$q['category_name'] = sanitize_title(basename($cat_paths));			$cat_paths = explode('/', $cat_paths);			$cat_path = '';			foreach ( (array) $cat_paths as $pathdir )				$cat_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);			//if we don't match the entire hierarchy fallback on just matching the nicename			if ( empty($reqcat) )				$reqcat = get_category_by_path($q['category_name'], false);			if ( !empty($reqcat) )				$reqcat = $reqcat->term_id;			else				$reqcat = 0;			$q['cat'] = $reqcat;			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) ";			$whichcat = " AND $wpdb->term_taxonomy.taxonomy = 'category' ";			$in_cats = array($q['cat']);			$in_cats = array_merge($in_cats, get_term_children($q['cat'], 'category'));			$in_cats = "'" . implode("', '", $in_cats) . "'";			$whichcat .= "AND $wpdb->term_taxonomy.term_id IN ($in_cats)";			$groupby = "{$wpdb->posts}.ID";		}		// Tags		if ( '' != $q['tag'] ) {			if ( strpos($q['tag'], ',') !== false ) {				$tags = preg_split('/[,\s]+/', $q['tag']);				foreach ( (array) $tags as $tag ) {					$tag = sanitize_term_field('slug', $tag, 0, 'post_tag', 'db');					$q['tag_slug__in'][] = $tag;				}			} else if ( preg_match('/[+\s]+/', $q['tag']) || !empty($q['cat']) ) {				$tags = preg_split('/[+\s]+/', $q['tag']);				foreach ( (array) $tags as $tag ) {					$tag = sanitize_term_field('slug', $tag, 0, 'post_tag', 'db');					$q['tag_slug__and'][] = $tag;				}			} else {				$q['tag'] = sanitize_term_field('slug', $q['tag'], 0, 'post_tag', 'db');				$q['tag_slug__in'][] = $q['tag'];			}		}		if ( !empty($q['category__in']) || !empty($q['meta_key']) || !empty($q['tag__in']) || !empty($q['tag_slug__in']) ) {			$groupby = "{$wpdb->posts}.ID";		}		if ( !empty($q['tag__in']) && empty($q['cat']) ) {			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) ";			$whichcat .= " AND $wpdb->term_taxonomy.taxonomy = 'post_tag' ";			$include_tags = "'" . implode("', '", $q['tag__in']) . "'";			$whichcat .= " AND $wpdb->term_taxonomy.term_id IN ($include_tags) ";			$reqtag = term_exists( $q['tag__in'][0], 'post_tag' );			if ( !empty($reqtag) )				$q['tag_id'] = $reqtag['term_id'];		}		if ( !empty($q['tag_slug__in']) && empty($q['cat']) ) {			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) INNER JOIN $wpdb->terms ON ($wpdb->term_taxonomy.term_id = $wpdb->terms.term_id) ";			$whichcat .= " AND $wpdb->term_taxonomy.taxonomy = 'post_tag' ";			$include_tags = "'" . implode("', '", $q['tag_slug__in']) . "'";			$whichcat .= " AND $wpdb->terms.slug IN ($include_tags) ";			$reqtag = get_term_by( 'slug', $q['tag_slug__in'][0], 'post_tag' );			if ( !empty($reqtag) )				$q['tag_id'] = $reqtag->term_id;		}		if ( !empty($q['tag__not_in']) ) {			$tag_string = "'" . implode("', '", $q['tag__not_in']) . "'";			$whichcat .= " AND $wpdb->posts.ID NOT IN ( SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy = 'post_tag' AND tt.term_id IN ($tag_string) )";		}		// Tag and slug intersections.		$intersections = array('category__and' => 'category', 'tag__and' => 'post_tag', 'tag_slug__and' => 'post_tag', 'tag__in' => 'post_tag', 'tag_slug__in' => 'post_tag');		$tagin = array('tag__in', 'tag_slug__in'); // These are used to make some exceptions below		foreach ( $intersections as $item => $taxonomy ) {			if ( empty($q[$item]) ) continue;			if ( in_array($item, $tagin) && empty($q['cat']) ) continue; // We should already have what we need if categories aren't being used			if ( $item != 'category__and' ) {				$reqtag = term_exists( $q[$item][0], 'post_tag' );				if ( !empty($reqtag) )					$q['tag_id'] = $reqtag['term_id'];			}			if ( in_array( $item, array('tag_slug__and', 'tag_slug__in' ) ) )				$taxonomy_field = 'slug';			else				$taxonomy_field = 'term_id';			$q[$item] = array_unique($q[$item]);			$tsql = "SELECT p.ID FROM $wpdb->posts p INNER JOIN $wpdb->term_relationships tr ON (p.ID = tr.object_id) INNER JOIN $wpdb->term_taxonomy tt ON (tr.term_taxonomy_id = tt.term_taxonomy_id) INNER JOIN $wpdb->terms t ON (tt.term_id = t.term_id)";			$tsql .= " WHERE tt.taxonomy = '$taxonomy' AND t.$taxonomy_field IN ('" . implode("', '", $q[$item]) . "')";			if ( !in_array($item, $tagin) ) { // This next line is only helpful if we are doing an and relationship				$tsql .= " GROUP BY p.ID HAVING count(p.ID) = " . count($q[$item]);			}			$post_ids = $wpdb->get_col($tsql);			if ( count($post_ids) )				$whichcat .= " AND $wpdb->posts.ID IN (" . implode(', ', $post_ids) . ") ";			else {				$whichcat = " AND 0 = 1";				break;			}		}		// Taxonomies		if ( $this->is_tax ) {			if ( '' != $q['taxonomy'] ) {				$taxonomy = $q['taxonomy'];				$tt[$taxonomy] = $q['term'];			} else {				foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t ) {					if ( $t->query_var && '' != $q[$t->query_var] ) {						$tt[$taxonomy] = $q[$t->query_var];						break;					}				}			}			$terms = get_terms($taxonomy, array('slug' => $tt[$taxonomy], 'hide_empty' => !is_taxonomy_hierarchical($taxonomy)));			if ( is_wp_error($terms) || empty($terms) ) {				$whichcat = " AND 0 ";			} else {				foreach ( $terms as $term ) {					$term_ids[] = $term->term_id;					if ( is_taxonomy_hierarchical($taxonomy) ) {						$children = get_term_children($term->term_id, $taxonomy);						$term_ids = array_merge($term_ids, $children);					}				}				$post_ids = get_objects_in_term($term_ids, $taxonomy);				if ( !is_wp_error($post_ids) && !empty($post_ids) ) {					$whichcat .= " AND $wpdb->posts.ID IN (" . implode(', ', $post_ids) . ") ";					if ( empty($post_type) ) {						$post_type = 'any';						$post_status_join = true;					} elseif ( in_array('attachment', (array)$post_type) ) {						$post_status_join = true;					}				} else {					$whichcat = " AND 0 ";				}			}		}		// Author/user stuff		if ( empty($q['author']) || ($q['author'] == '0') ) {			$whichauthor = '';		} else {			$q['author'] = (string)urldecode($q['author']);			$q['author'] = addslashes_gpc($q['author']);			if ( strpos($q['author'], '-') !== false ) {				$eq = '!=';				$andor = 'AND';				$q['author'] = explode('-', $q['author']);				$q['author'] = (string)absint($q['author'][1]);			} else {				$eq = '=';				$andor = 'OR';			}			$author_array = preg_split('/[,\s]+/', $q['author']);			$_author_array = array();			foreach ( $author_array as $key => $_author )				$_author_array[] = "$wpdb->posts.post_author " . $eq . ' ' . absint($_author);			$whichauthor .= ' AND (' . implode(" $andor ", $_author_array) . ')';			unset($author_array, $_author_array);		}		// Author stuff for nice URLs		if ( '' != $q['author_name'] ) {			if ( strpos($q['author_name'], '/') !== false ) {				$q['author_name'] = explode('/', $q['author_name']);				if ( $q['author_name'][ count($q['author_name'])-1 ] ) {					$q['author_name'] = $q['author_name'][count($q['author_name'])-1]; // no trailing slash				} else {					$q['author_name'] = $q['author_name'][count($q['author_name'])-2]; // there was a trailling slash				}			}			$q['author_name'] = sanitize_title($q['author_name']);			$q['author'] = get_user_by('slug', $q['author_name']);			if ( $q['author'] )				$q['author'] = $q['author']->ID;			$whichauthor .= " AND ($wpdb->posts.post_author = " . absint($q['author']) . ')';		}		// MIME-Type stuff for attachment browsing		if ( isset($q['post_mime_type']) && '' != $q['post_mime_type'] ) {			$table_alias = $post_status_join ? $wpdb->posts : '';			$whichmimetype = wp_post_mime_type_where($q['post_mime_type'], $table_alias);		}		$where .= $search . $whichcat . $whichauthor . $whichmimetype;		if ( empty($q['order']) || ((strtoupper($q['order']) != 'ASC') && (strtoupper($q['order']) != 'DESC')) )			$q['order'] = 'DESC';		// Order by		if ( empty($q['orderby']) ) {			$q['orderby'] = "$wpdb->posts.post_date " . $q['order'];		} elseif ( 'none' == $q['orderby'] ) {			$q['orderby'] = '';		} else {			// Used to filter values			$allowed_keys = array('author', 'date', 'title', 'modified', 'menu_order', 'parent', 'ID', 'rand', 'comment_count');			if ( !empty($q['meta_key']) ) {				$allowed_keys[] = $q['meta_key'];				$allowed_keys[] = 'meta_value';				$allowed_keys[] = 'meta_value_num';			}			$q['orderby'] = urldecode($q['orderby']);			$q['orderby'] = addslashes_gpc($q['orderby']);			$orderby_array = explode(' ', $q['orderby']);			$q['orderby'] = '';			foreach ( $orderby_array as $i => $orderby ) {				// Only allow certain values for safety				if ( ! in_array($orderby, $allowed_keys) )					continue;				switch ( $orderby ) {					case 'menu_order':						break;					case 'ID':						$orderby = "$wpdb->posts.ID";						break;					case 'rand':						$orderby = 'RAND()';						break;					case $q['meta_key']:					case 'meta_value':						$orderby = "$wpdb->postmeta.meta_value";						break;					case 'meta_value_num':						$orderby = "$wpdb->postmeta.meta_value+0";						break;					case 'comment_count':						$orderby = "$wpdb->posts.comment_count";						break;					default:						$orderby = "$wpdb->posts.post_" . $orderby;				}				$q['orderby'] .= (($i == 0) ? '' : ',') . $orderby;			}			// append ASC or DESC at the end			if ( !empty($q['orderby']))				$q['orderby'] .= " {$q['order']}";			if ( empty($q['orderby']) )				$q['orderby'] = "$wpdb->posts.post_date ".$q['order'];		}		if ( is_array($post_type) ) {			$post_type_cap = 'multiple_post_type';		} else {			$post_type_object = get_post_type_object ( $post_type );			if ( !empty($post_type_object) )				$post_type_cap = $post_type_object->capability_type;			else				$post_type_cap = $post_type;		}		$exclude_post_types = '';		$in_search_post_types = get_post_types( array('exclude_from_search' => false) );		if ( ! empty( $in_search_post_types ) )			$exclude_post_types .= $wpdb->prepare(" AND $wpdb->posts.post_type IN ('" . join("', '", $in_search_post_types ) . "')");		if ( 'any' == $post_type ) {			$where .= $exclude_post_types;		} elseif ( !empty( $post_type ) && is_array( $post_type ) ) {			$where .= " AND $wpdb->posts.post_type IN ('" . join("', '", $post_type) . "')";		} elseif ( ! empty( $post_type ) ) {			$where .= " AND $wpdb->posts.post_type = '$post_type'";			$post_type_object = get_post_type_object ( $post_type );		} elseif ( $this->is_attachment ) {			$where .= " AND $wpdb->posts.post_type = 'attachment'";			$post_type_object = get_post_type_object ( 'attachment' );		} elseif ( $this->is_page ) {			$where .= " AND $wpdb->posts.post_type = 'page'";			$post_type_object = get_post_type_object ( 'page' );		} else {			$where .= " AND $wpdb->posts.post_type = 'post'";			$post_type_object = get_post_type_object ( 'post' );		}		if ( !empty($post_type_object) ) {			$post_type_cap = $post_type_object->capability_type;			$edit_cap = $post_type_object->cap->edit_post;			$read_cap = $post_type_object->cap->read_post;			$edit_others_cap = $post_type_object->cap->edit_others_posts;			$read_private_cap = $post_type_object->cap->read_private_posts;		} else {			$edit_cap = 'edit_' . $post_type_cap;			$read_cap = 'read_' . $post_type_cap;			$edit_others_cap = 'edit_others_' . $post_type_cap . 's';			$read_private_cap = 'read_private_' . $post_type_cap . 's';		}		if ( isset($q['post_status']) && '' != $q['post_status'] ) {			$statuswheres = array();			$q_status = explode(',', $q['post_status']);			$r_status = array();			$p_status = array();			$e_status = array();			if ( $q['post_status'] == 'any' ) {				foreach ( get_post_stati( array('exclude_from_search' => true) ) as $status )					$e_status[] = "$wpdb->posts.post_status <> '$status'";			} else {				foreach ( get_post_stati() as $status ) {					if ( in_array( $status, $q_status ) ) {						if ( 'private' == $status )							$p_status[] = "$wpdb->posts.post_status = '$status'";						else							$r_status[] = "$wpdb->posts.post_status = '$status'";					}				}			}			if ( empty($q['perm'] ) || 'readable' != $q['perm'] ) {				$r_status = array_merge($r_status, $p_status);				unset($p_status);			}			if ( !empty($e_status) ) {				$statuswheres[] = "(" . join( ' AND ', $e_status ) . ")";			}			if ( !empty($r_status) ) {				if ( !empty($q['perm'] ) && 'editable' == $q['perm'] && !current_user_can($edit_others_cap) )					$statuswheres[] = "($wpdb->posts.post_author = $user_ID " .  "AND (" . join( ' OR ', $r_status ) . "))";				else					$statuswheres[] = "(" . join( ' OR ', $r_status ) . ")";			}			if ( !empty($p_status) ) {				if ( !empty($q['perm'] ) && 'readable' == $q['perm'] && !current_user_can($read_private_cap) )					$statuswheres[] = "($wpdb->posts.post_author = $user_ID " .  "AND (" . join( ' OR ', $p_status ) . "))";				else					$statuswheres[] = "(" . join( ' OR ', $p_status ) . ")";			}			if ( $post_status_join ) {				$join .= " LEFT JOIN $wpdb->posts AS p2 ON ($wpdb->posts.post_parent = p2.ID) ";				foreach ( $statuswheres as $index => $statuswhere )					$statuswheres[$index] = "($statuswhere OR ($wpdb->posts.post_status = 'inherit' AND " . str_replace($wpdb->posts, 'p2', $statuswhere) . "))";			}			foreach ( $statuswheres as $statuswhere )				$where .= " AND $statuswhere";		} elseif ( !$this->is_singular ) {			$where .= " AND ($wpdb->posts.post_status = 'publish'";			// Add public states.			$public_states = get_post_stati( array('public' => true) );			foreach ( (array) $public_states as $state ) {				if ( 'publish' == $state ) // Publish is hard-coded above.					continue;				$where .= " OR $wpdb->posts.post_status = '$state'";			}			if ( is_admin() ) {				// Add protected states that should show in the admin all list.				$admin_all_states = get_post_stati( array('protected' => true, 'show_in_admin_all_list' => true) );				foreach ( (array) $admin_all_states as $state )					$where .= " OR $wpdb->posts.post_status = '$state'";			}			if ( is_user_logged_in() ) {				// Add private states that are limited to viewing by the author of a post or someone who has caps to read private states.				$private_states = get_post_stati( array('private' => true) );				foreach ( (array) $private_states as $state )					$where .= current_user_can( $read_private_cap ) ? " OR $wpdb->posts.post_status = '$state'" : " OR $wpdb->posts.post_author = $user_ID AND $wpdb->posts.post_status = '$state'";			}			$where .= ')';		}		// postmeta queries		if ( ! empty($q['meta_key']) || ! empty($q['meta_value']) )			$join .= " JOIN $wpdb->postmeta ON ($wpdb->posts.ID = $wpdb->postmeta.post_id) ";		if ( ! empty($q['meta_key']) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s ", $q['meta_key']);		if ( ! empty($q['meta_value']) ) {			if ( empty($q['meta_compare']) || ! in_array($q['meta_compare'], array('=', '!=', '>', '>=', '<', '<=')) )				$q['meta_compare'] = '=';			$where .= $wpdb->prepare("AND $wpdb->postmeta.meta_value {$q['meta_compare']} %s ", $q['meta_value']);		}		// Apply filters on where and join prior to paging so that any		// manipulations to them are reflected in the paging by day queries.		if ( !$q['suppress_filters'] ) {			$where = apply_filters_ref_array('posts_where', array( $where, &$this ) );			$join = apply_filters_ref_array('posts_join', array( $join, &$this ) );		}		// Paging		if ( empty($q['nopaging']) && !$this->is_singular ) {			$page = absint($q['paged']);			if ( empty($page) )				$page = 1;			if ( empty($q['offset']) ) {				$pgstrt = '';				$pgstrt = ($page - 1) * $q['posts_per_page'] . ', ';				$limits = 'LIMIT ' . $pgstrt . $q['posts_per_page'];			} else { // we're ignoring $page and using 'offset'				$q['offset'] = absint($q['offset']);				$pgstrt = $q['offset'] . ', ';				$limits = 'LIMIT ' . $pgstrt . $q['posts_per_page'];			}		}		// Comments feeds		if ( $this->is_comment_feed && ( $this->is_archive || $this->is_search || !$this->is_singular ) ) {			if ( $this->is_archive || $this->is_search ) {				$cjoin = "JOIN $wpdb->posts ON ($wpdb->comments.comment_post_ID = $wpdb->posts.ID) $join ";				$cwhere = "WHERE comment_approved = '1' $where";				$cgroupby = "$wpdb->comments.comment_id";			} else { // Other non singular e.g. front				$cjoin = "JOIN $wpdb->posts ON ( $wpdb->comments.comment_post_ID = $wpdb->posts.ID )";				$cwhere = "WHERE post_status = 'publish' AND comment_approved = '1'";				$cgroupby = '';			}			if ( !$q['suppress_filters'] ) {				$cjoin = apply_filters_ref_array('comment_feed_join', array( $cjoin, &$this ) );				$cwhere = apply_filters_ref_array('comment_feed_where', array( $cwhere, &$this ) );				$cgroupby = apply_filters_ref_array('comment_feed_groupby', array( $cgroupby, &$this ) );				$corderby = apply_filters_ref_array('comment_feed_orderby', array( 'comment_date_gmt DESC', &$this ) );				$climits = apply_filters_ref_array('comment_feed_limits', array( 'LIMIT ' . get_option('posts_per_rss'), &$this ) );			}			$cgroupby = ( ! empty( $cgroupby ) ) ? 'GROUP BY ' . $cgroupby : '';			$corderby = ( ! empty( $corderby ) ) ? 'ORDER BY ' . $corderby : '';			$this->comments = (array) $wpdb->get_results("SELECT $distinct $wpdb->comments.* FROM $wpdb->comments $cjoin $cwhere $cgroupby $corderby $climits");			$this->comment_count = count($this->comments);			$post_ids = array();			foreach ( $this->comments as $comment )				$post_ids[] = (int) $comment->comment_post_ID;			$post_ids = join(',', $post_ids);			$join = '';			if ( $post_ids )				$where = "AND $wpdb->posts.ID IN ($post_ids) ";			else				$where = "AND 0";		}		$orderby = $q['orderby'];		// Apply post-paging filters on where and join.  Only plugins that		// manipulate paging queries should use these hooks.		if ( !$q['suppress_filters'] ) {			$where		= apply_filters_ref_array( 'posts_where_paged',	array( $where, &$this ) );			$groupby	= apply_filters_ref_array( 'posts_groupby',		array( $groupby, &$this ) );			$join		= apply_filters_ref_array( 'posts_join_paged',	array( $join, &$this ) );			$orderby	= apply_filters_ref_array( 'posts_orderby',		array( $orderby, &$this ) );			$distinct	= apply_filters_ref_array( 'posts_distinct',	array( $distinct, &$this ) );			$limits		= apply_filters_ref_array( 'post_limits',		array( $limits, &$this ) );			$fields		= apply_filters_ref_array( 'posts_fields',		array( $fields, &$this ) );		}		// Announce current selection parameters.  For use by caching plugins.		do_action( 'posts_selection', $where . $groupby . $orderby . $limits . $join );		// Filter again for the benefit of caching plugins.  Regular plugins should use the hooks above.		if ( !$q['suppress_filters'] ) {			$where		= apply_filters_ref_array( 'posts_where_request',	array( $where, &$this ) );			$groupby	= apply_filters_ref_array( 'posts_groupby_request',		array( $groupby, &$this ) );			$join		= apply_filters_ref_array( 'posts_join_request',	array( $join, &$this ) );			$orderby	= apply_filters_ref_array( 'posts_orderby_request',		array( $orderby, &$this ) );			$distinct	= apply_filters_ref_array( 'posts_distinct_request',	array( $distinct, &$this ) );			$fields		= apply_filters_ref_array( 'posts_fields_request',		array( $fields, &$this ) );			$limits		= apply_filters_ref_array( 'post_limits_request',		array( $limits, &$this ) );		}		if ( ! empty($groupby) )			$groupby = 'GROUP BY ' . $groupby;		if ( !empty( $orderby ) )			$orderby = 'ORDER BY ' . $orderby;		$found_rows = '';		if ( !$q['no_found_rows'] && !empty($limits) )			$found_rows = 'SQL_CALC_FOUND_ROWS';		$this->request = " SELECT $found_rows $distinct $fields FROM $wpdb->posts $join WHERE 1=1 $where $groupby $orderby $limits";		if ( !$q['suppress_filters'] )			$this->request = apply_filters_ref_array('posts_request', array( $this->request, &$this ) );		$this->posts = $wpdb->get_results($this->request);		// Raw results filter.  Prior to status checks.		if ( !$q['suppress_filters'] )			$this->posts = apply_filters_ref_array('posts_results', array( $this->posts, &$this ) );		if ( !empty($this->posts) && $this->is_comment_feed && $this->is_singular ) {			$cjoin = apply_filters_ref_array('comment_feed_join', array( '', &$this ) );			$cwhere = apply_filters_ref_array('comment_feed_where', array( "WHERE comment_post_ID = '{$this->posts[0]->ID}' AND comment_approved = '1'", &$this ) );			$cgroupby = apply_filters_ref_array('comment_feed_groupby', array( '', &$this ) );			$cgroupby = ( ! empty( $cgroupby ) ) ? 'GROUP BY ' . $cgroupby : '';			$corderby = apply_filters_ref_array('comment_feed_orderby', array( 'comment_date_gmt DESC', &$this ) );			$corderby = ( ! empty( $corderby ) ) ? 'ORDER BY ' . $corderby : '';			$climits = apply_filters_ref_array('comment_feed_limits', array( 'LIMIT ' . get_option('posts_per_rss'), &$this ) );			$comments_request = "SELECT $wpdb->comments.* FROM $wpdb->comments $cjoin $cwhere $cgroupby $corderby $climits";			$this->comments = $wpdb->get_results($comments_request);			$this->comment_count = count($this->comments);		}		if ( !$q['no_found_rows'] && !empty($limits) ) {			$found_posts_query = apply_filters_ref_array( 'found_posts_query', array( 'SELECT FOUND_ROWS()', &$this ) );			$this->found_posts = $wpdb->get_var( $found_posts_query );			$this->found_posts = apply_filters_ref_array( 'found_posts', array( $this->found_posts, &$this ) );			$this->max_num_pages = ceil($this->found_posts / $q['posts_per_page']);		}		// Check post status to determine if post should be displayed.		if ( !empty($this->posts) && ($this->is_single || $this->is_page) ) {			$status = get_post_status($this->posts[0]);			$post_status_obj = get_post_status_object($status);			//$type = get_post_type($this->posts[0]);			if ( !$post_status_obj->public ) {				if ( ! is_user_logged_in() ) {					// User must be logged in to view unpublished posts.					$this->posts = array();				} else {					if  ( $post_status_obj->protected ) {						// User must have edit permissions on the draft to preview.						if ( ! current_user_can($edit_cap, $this->posts[0]->ID) ) {							$this->posts = array();						} else {							$this->is_preview = true;							if ( 'future' != $status )								$this->posts[0]->post_date = current_time('mysql');						}					} elseif ( $post_status_obj->private ) {						if ( ! current_user_can($read_cap, $this->posts[0]->ID) )							$this->posts = array();					} else {						$this->posts = array();					}				}			}			if ( $this->is_preview && current_user_can( $edit_cap, $this->posts[0]->ID ) )				$this->posts[0] = apply_filters_ref_array('the_preview', array( $this->posts[0], &$this ));		}		// Put sticky posts at the top of the posts array		$sticky_posts = get_option('sticky_posts');		if ( $this->is_home && $page <= 1 && is_array($sticky_posts) && !empty($sticky_posts) && !$q['caller_get_posts'] ) {			$num_posts = count($this->posts);			$sticky_offset = 0;			// Loop over posts and relocate stickies to the front.			for ( $i = 0; $i < $num_posts; $i++ ) {				if ( in_array($this->posts[$i]->ID, $sticky_posts) ) {					$sticky_post = $this->posts[$i];					// Remove sticky from current position					array_splice($this->posts, $i, 1);					// Move to front, after other stickies					array_splice($this->posts, $sticky_offset, 0, array($sticky_post));					// Increment the sticky offset.  The next sticky will be placed at this offset.					$sticky_offset++;					// Remove post from sticky posts array					$offset = array_search($sticky_post->ID, $sticky_posts);					unset( $sticky_posts[$offset] );				}			}			// If any posts have been excluded specifically, Ignore those that are sticky.			if ( !empty($sticky_posts) && !empty($q['post__not_in']) )				$sticky_posts = array_diff($sticky_posts, $q['post__not_in']);			// Fetch sticky posts that weren't in the query results			if ( !empty($sticky_posts) ) {				$stickies__in = implode(',', array_map( 'absint', $sticky_posts ));				// honor post type(s) if not set to any				$stickies_where = '';				if ( 'any' != $post_type && '' != $post_type ) {					if ( is_array( $post_type ) ) {						$post_types = join( "', '", $post_type );					} else {						$post_types = $post_type;					}					$stickies_where = "AND $wpdb->posts.post_type IN ('" . $post_types . "')";				}				$stickies = $wpdb->get_results( "SELECT * FROM $wpdb->posts WHERE $wpdb->posts.ID IN ($stickies__in) $stickies_where" );				foreach ( $stickies as $sticky_post ) {					// Ignore sticky posts the current user cannot read or are not published.					if ( 'publish' != $sticky_post->post_status )						continue;					array_splice($this->posts, $sticky_offset, 0, array($sticky_post));					$sticky_offset++;				}			}		}		if ( !$q['suppress_filters'] )			$this->posts = apply_filters_ref_array('the_posts', array( $this->posts, &$this ) );		$this->post_count = count($this->posts);		// Sanitize before caching so it'll only get done once		for ( $i = 0; $i < $this->post_count; $i++ ) {			$this->posts[$i] = sanitize_post($this->posts[$i], 'raw');		}		if ( $q['cache_results'] )			update_post_caches($this->posts, $post_type, $q['update_post_term_cache'], $q['update_post_meta_cache']);		if ( $this->post_count > 0 ) {			$this->post = $this->posts[0];		}		return $this->posts;	}	/**	 * Set up the next post and iterate current post index.	 *	 * @since 1.5.0	 * @access public	 *	 * @return object Next post.	 */	function next_post() {		$this->current_post++;		$this->post = $this->posts[$this->current_post];		return $this->post;	}	/**	 * Sets up the current post.	 *	 * Retrieves the next post, sets up the post, sets the 'in the loop'	 * property to true.	 *	 * @since 1.5.0	 * @access public	 * @uses $post	 * @uses do_action_ref_array() Calls 'loop_start' if loop has just started	 */	function the_post() {		global $post;		$this->in_the_loop = true;		if ( $this->current_post == -1 ) // loop has just started			do_action_ref_array('loop_start', array(&$this));		$post = $this->next_post();		setup_postdata($post);	}	/**	 * Whether there are more posts available in the loop.	 *	 * Calls action 'loop_end', when the loop is complete.	 *	 * @since 1.5.0	 * @access public	 * @uses do_action_ref_array() Calls 'loop_end' if loop is ended	 *	 * @return bool True if posts are available, false if end of loop.	 */	function have_posts() {		if ( $this->current_post + 1 < $this->post_count ) {			return true;		} elseif ( $this->current_post + 1 == $this->post_count && $this->post_count > 0 ) {			do_action_ref_array('loop_end', array(&$this));			// Do some cleaning up after the loop			$this->rewind_posts();		}		$this->in_the_loop = false;		return false;	}	/**	 * Rewind the posts and reset post index.	 *	 * @since 1.5.0	 * @access public	 */	function rewind_posts() {		$this->current_post = -1;		if ( $this->post_count > 0 ) {			$this->post = $this->posts[0];		}	}	/**	 * Iterate current comment index and return comment object.	 *	 * @since 2.2.0	 * @access public	 *	 * @return object Comment object.	 */	function next_comment() {		$this->current_comment++;		$this->comment = $this->comments[$this->current_comment];		return $this->comment;	}	/**	 * Sets up the current comment.	 *	 * @since 2.2.0	 * @access public	 * @global object $comment Current comment.	 * @uses do_action() Calls 'comment_loop_start' hook when first comment is processed.	 */	function the_comment() {		global $comment;		$comment = $this->next_comment();		if ( $this->current_comment == 0 ) {			do_action('comment_loop_start');		}	}	/**	 * Whether there are more comments available.	 *	 * Automatically rewinds comments when finished.	 *	 * @since 2.2.0	 * @access public	 *	 * @return bool True, if more comments. False, if no more posts.	 */	function have_comments() {		if ( $this->current_comment + 1 < $this->comment_count ) {			return true;		} elseif ( $this->current_comment + 1 == $this->comment_count ) {			$this->rewind_comments();		}		return false;	}	/**	 * Rewind the comments, resets the comment index and comment to first.	 *	 * @since 2.2.0	 * @access public	 */	function rewind_comments() {		$this->current_comment = -1;		if ( $this->comment_count > 0 ) {			$this->comment = $this->comments[0];		}	}	/**	 * Sets up the WordPress query by parsing query string.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query URL query string.	 * @return array List of posts.	 */	function &query($query) {		$this->parse_query($query);		return $this->get_posts();	}	/**	 * Retrieve queried object.	 *	 * If queried object is not set, then the queried object will be set from	 * the category, tag, taxonomy, posts page, single post, page, or author	 * query variable. After it is set up, it will be returned.	 *	 * @since 1.5.0	 * @access public	 *	 * @return object	 */	function get_queried_object() {		if ( isset($this->queried_object) )			return $this->queried_object;		$this->queried_object = NULL;		$this->queried_object_id = 0;		if ( $this->is_category ) {			$cat = $this->get('cat');			$category = &get_category($cat);			if ( is_wp_error( $category ) )				return NULL;			$this->queried_object = &$category;			$this->queried_object_id = (int) $cat;		} elseif ( $this->is_tag ) {			$tag_id = $this->get('tag_id');			$tag = &get_term($tag_id, 'post_tag');			if ( is_wp_error( $tag ) )				return NULL;			$this->queried_object = &$tag;			$this->queried_object_id = (int) $tag_id;		} elseif ( $this->is_tax ) {			$tax = $this->get('taxonomy');			$slug = $this->get('term');			$term = &get_terms($tax, array( 'slug' => $slug, 'hide_empty' => false ) );			if ( is_wp_error($term) || empty($term) )				return NULL;			$term = $term[0];			$this->queried_object = $term;			$this->queried_object_id = $term->term_id;		} elseif ( $this->is_posts_page ) {			$this->queried_object = & get_page(get_option('page_for_posts'));			$this->queried_object_id = (int) $this->queried_object->ID;		} elseif ( $this->is_single && !is_null($this->post) ) {			$this->queried_object = $this->post;			$this->queried_object_id = (int) $this->post->ID;		} elseif ( $this->is_page && !is_null($this->post) ) {			$this->queried_object = $this->post;			$this->queried_object_id = (int) $this->post->ID;		} elseif ( $this->is_author ) {			$author_id = (int) $this->get('author');			$author = get_userdata($author_id);			$this->queried_object = $author;			$this->queried_object_id = $author_id;		}		return $this->queried_object;	}	/**	 * Retrieve ID of the current queried object.	 *	 * @since 1.5.0	 * @access public	 *	 * @return int	 */	function get_queried_object_id() {		$this->get_queried_object();		if ( isset($this->queried_object_id) ) {			return $this->queried_object_id;		}		return 0;	}	/**	 * PHP4 type constructor.	 *	 * Sets up the WordPress query, if parameter is not empty.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query URL query string.	 * @return WP_Query	 */	function WP_Query($query = '') {		if ( ! empty($query) ) {			$this->query($query);		}	}}/** * Redirect old slugs to the correct permalink. * * Attempts to find the current slug from the past slugs. * * @since 2.1.0 * @uses $wp_query * @uses $wpdb * * @return null If no link is found, null is returned. */function wp_old_slug_redirect() {	global $wp_query;	if ( is_404() && '' != $wp_query->query_vars['name'] ) :		global $wpdb;		$query = "SELECT post_id FROM $wpdb->postmeta, $wpdb->posts WHERE ID = post_id AND meta_key = '_wp_old_slug' AND meta_value='" . $wp_query->query_vars['name'] . "'";		// if year, monthnum, or day have been specified, make our query more precise		// just in case there are multiple identical _wp_old_slug values		if ( '' != $wp_query->query_vars['year'] )			$query .= " AND YEAR(post_date) = '{$wp_query->query_vars['year']}'";		if ( '' != $wp_query->query_vars['monthnum'] )			$query .= " AND MONTH(post_date) = '{$wp_query->query_vars['monthnum']}'";		if ( '' != $wp_query->query_vars['day'] )			$query .= " AND DAYOFMONTH(post_date) = '{$wp_query->query_vars['day']}'";		$id = (int) $wpdb->get_var($query);		if ( !$id )			return;		$link = get_permalink($id);		if ( !$link )			return;		wp_redirect($link, '301'); // Permanent redirect		exit;	endif;}/** * Set up global post data. * * @since 1.5.0 * * @param object $post Post data. * @uses do_action_ref_array() Calls 'the_post' * @return bool True when finished. */function setup_postdata($post) {	global $id, $authordata, $day, $currentmonth, $page, $pages, $multipage, $more, $numpages;	$id = (int) $post->ID;	$authordata = get_userdata($post->post_author);	$day = mysql2date('d.m.y', $post->post_date, false);	$currentmonth = mysql2date('m', $post->post_date, false);	$numpages = 1;	$page = get_query_var('page');	if ( !$page )		$page = 1;	if ( is_single() || is_page() || is_feed() )		$more = 1;	$content = $post->post_content;	if ( strpos( $content, '<!--nextpage-->' ) ) {		if ( $page > 1 )			$more = 1;		$multipage = 1;		$content = str_replace("\n<!--nextpage-->\n", '<!--nextpage-->', $content);		$content = str_replace("\n<!--nextpage-->", '<!--nextpage-->', $content);		$content = str_replace("<!--nextpage-->\n", '<!--nextpage-->', $content);		$pages = explode('<!--nextpage-->', $content);		$numpages = count($pages);	} else {		$pages = array( $post->post_content );		$multipage = 0;	}	do_action_ref_array('the_post', array(&$post));	return true;}?>
<?php/** * Edit Posts Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );$_GET['post_type'] = $post_type;$post_type_object = get_post_type_object($post_type);if ( !current_user_can($post_type_object->cap->edit_posts) )	wp_die(__('Cheatin&#8217; uh?'));// Back-compat for viewing comments of an entryif ( $_redirect = intval( max( @$_GET['p'], @$_GET['attachment_id'], @$_GET['page_id'] ) ) ) {	wp_redirect( admin_url('edit-comments.php?p=' . $_redirect ) );	exit;} else {	unset( $_redirect );}if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit.php?post_type=$post_type";	$post_new_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'edit.php';	$post_new_file = 'post-new.php';}$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$per_page = 'edit_' . $post_type . '_per_page';$per_page = (int) get_user_option( $per_page );if ( empty( $per_page ) || $per_page < 1 )	$per_page = 20;// @todo filter based on type$per_page = apply_filters( 'edit_posts_per_page', $per_page );// Handle bulk actionsif ( isset($_GET['doaction']) || isset($_GET['doaction2']) || isset($_GET['delete_all']) || isset($_GET['delete_all2']) || isset($_GET['bulk_edit']) ) {	check_admin_referer('bulk-posts');	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), wp_get_referer() );	if ( strpos($sendback, 'post.php') !== false )		$sendback = admin_url($post_new_file);	if ( isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {		$post_status = preg_replace('/[^a-z0-9_-]+/i', '', $_GET['post_status']);		$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_type=%s AND post_status = %s", $post_type, $post_status ) );		$doaction = 'delete';	} elseif ( ( $_GET['action'] != -1 || $_GET['action2'] != -1 ) && ( isset($_GET['post']) || isset($_GET['ids']) ) ) {		$post_ids = isset($_GET['post']) ? array_map( 'intval', (array) $_GET['post'] ) : explode(',', $_GET['ids']);		$doaction = ($_GET['action'] != -1) ? $_GET['action'] : $_GET['action2'];	} else {		wp_redirect( admin_url("edit.php?post_type=$post_type") );	}	switch ( $doaction ) {		case 'trash':			$trashed = 0;			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to move this item to the Trash.') );				if ( !wp_trash_post($post_id) )					wp_die( __('Error in moving to Trash.') );				$trashed++;			}			$sendback = add_query_arg( array('trashed' => $trashed, 'ids' => join(',', $post_ids)), $sendback );			break;		case 'untrash':			$untrashed = 0;			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to restore this item from the Trash.') );				if ( !wp_untrash_post($post_id) )					wp_die( __('Error in restoring from Trash.') );				$untrashed++;			}			$sendback = add_query_arg('untrashed', $untrashed, $sendback);			break;		case 'delete':			$deleted = 0;			foreach( (array) $post_ids as $post_id ) {				$post_del = & get_post($post_id);				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to delete this item.') );				if ( $post_del->post_type == 'attachment' ) {					if ( ! wp_delete_attachment($post_id) )						wp_die( __('Error in deleting...') );				} else {					if ( !wp_delete_post($post_id) )						wp_die( __('Error in deleting...') );				}				$deleted++;			}			$sendback = add_query_arg('deleted', $deleted, $sendback);			break;		case 'edit':			$done = bulk_edit_posts($_GET);			if ( is_array($done) ) {				$done['updated'] = count( $done['updated'] );				$done['skipped'] = count( $done['skipped'] );				$done['locked'] = count( $done['locked'] );				$sendback = add_query_arg( $done, $sendback );			}			break;	}	if ( isset($_GET['action']) )		$sendback = remove_query_arg( array('action', 'action2', 'tags_input', 'post_author', 'comment_status', 'ping_status', '_status',  'post', 'bulk_edit', 'post_view'), $sendback );	wp_redirect($sendback);	exit();} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('inline-edit-post');$user_posts = false;if ( !current_user_can($post_type_object->cap->edit_others_posts) ) {	$user_posts_count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(1) FROM $wpdb->posts WHERE post_type = '%s' AND post_status NOT IN ('trash', 'auto-draft') AND post_author = %d", $post_type, $current_user->ID) );	$user_posts = true;	if ( $user_posts_count && empty($_GET['post_status']) && empty($_GET['all_posts']) && empty($_GET['author']) )		$_GET['author'] = $current_user->ID;}$avail_post_stati = wp_edit_posts_query();if ( $post_type_object->hierarchical )	$num_pages = ceil($wp_query->post_count / $per_page);else	$num_pages = $wp_query->max_num_pages;$title = $post_type_object->labels->name;if ( 'post' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('You can customize the display of this screen in a number of ways:') . '</p>' .	'<ul>' .	'<li>' . __('You can hide/display columns based on your needs and decide how many posts to list per screen using the Screen Options tab.') . '</li>' .	'<li>' . __('You can filter the list of posts by post status using the text links in the upper left to show All, Published, Draft, or Trashed posts. The default view is to show all posts.') . '</li>' .	'<li>' . __('You can view posts in a simple title list or with an excerpt. Choose the view you prefer by clicking on the icons at the top of the list on the right.') . '</li>' .	'<li>' . __('You can refine the list to show only posts in a specific category or from a specific month by using the dropdown menus above the posts list. Click the Filter button after making your selection. You also can refine the list by clicking on the post author, category or tag in the posts list.') . '</li>' .	'</ul>' .	'<p>' . __('Hovering over a row in the posts list will display action links that allow you to manage your post. You can perform the following actions:') . '</p>' .	'<ul>' .	'<li>' . __('Edit takes you to the editing screen for that post. You can also reach that screen by clicking on the post title.') . '</li>' .	'<li>' . __('Quick Edit provides inline access to the metadata of your post, allowing you to update post details without leaving this screen.') . '</li>' .	'<li>' . __('Trash removes your post from this list and places it in the trash, from which you can permanently delete it.') . '</li>' .	'<li>' . __('Preview will show you what your draft post will look like if you publish it. View will take you to your live site to view the post. Which link is available depends on your post&#8217;s status.') . '</li>' .	'</ul>' .	'<p>' . __('You can also edit multiple posts at once. Select the posts you want to edit using the checkboxes, select Edit from the Bulk Actions menu and click Apply. You will be able to change the metadata (categories, author, etc.) for all selected posts at once. To remove a post from the grouping, just click the x next to its name in the Bulk Edit area that appears.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Posts_Edit_SubPanel" target="_blank">Edit Posts Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} elseif ( 'page' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('Pages are similar to to Posts in that they have a title, body text, and associated metadata, but they are different in that they are not part of the chronological blog stream, kind of like permanent posts. Pages are not categorized or tagged, but can have a hierarchy. You can nest Pages under other Pages by making one the &#8220;Parent&#8221; of the other, creating a group of Pages.') . '</p>' .	'<p>' . __('Managing Pages is very similar to managing Posts, and the screens can be customized in the same way.') . '</p>' .	'<p>' . __('You can also perform the same types of actions, including narrowing the list by using the filters, acting on a Page using the action links that appear when you hover over a row, or using the Bulk Actions menu to edit the metadata for multiple Pages at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Pages_Edit_SubPanel" target="_blank">Page Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}require_once('./admin-header.php');if ( empty($_GET['mode']) )	$mode = 'list';else	$mode = esc_attr($_GET['mode']); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $post_type_object->labels->name ); ?> <a href="<?php echo $post_new_file ?>" class="button add-new-h2"><?php echo esc_html($post_type_object->labels->add_new); ?></a> <?phpif ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', get_search_query() ); ?></h2><?phpif ( isset($_GET['posted']) && $_GET['posted'] ) : $_GET['posted'] = (int) $_GET['posted']; ?><div id="message" class="updated"><p><strong><?php _e('This has been saved.'); ?></strong> <a href="<?php echo get_permalink( $_GET['posted'] ); ?>"><?php _e('View Post'); ?></a> | <a href="<?php echo get_edit_post_link( $_GET['posted'] ); ?>"><?php _e('Edit Post'); ?></a></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('posted'), $_SERVER['REQUEST_URI']);endif; ?><?php if ( isset($_GET['locked']) || isset($_GET['skipped']) || isset($_GET['updated']) || isset($_GET['deleted']) || isset($_GET['trashed']) || isset($_GET['untrashed']) ) { ?><div id="message" class="updated"><p><?php if ( isset($_GET['updated']) && (int) $_GET['updated'] ) {	printf( _n( '%s post updated.', '%s posts updated.', $_GET['updated'] ), number_format_i18n( $_GET['updated'] ) );	unset($_GET['updated']);}if ( isset($_GET['skipped']) && (int) $_GET['skipped'] )	unset($_GET['skipped']);if ( isset($_GET['locked']) && (int) $_GET['locked'] ) {	printf( _n( '%s item not updated, somebody is editing it.', '%s items not updated, somebody is editing them.', $_GET['locked'] ), number_format_i18n( $_GET['locked'] ) );	unset($_GET['locked']);}if ( isset($_GET['deleted']) && (int) $_GET['deleted'] ) {	printf( _n( 'Item permanently deleted.', '%s items permanently deleted.', $_GET['deleted'] ), number_format_i18n( $_GET['deleted'] ) );	unset($_GET['deleted']);}if ( isset($_GET['trashed']) && (int) $_GET['trashed'] ) {	printf( _n( 'Item moved to the trash.', '%s items moved to the trash.', $_GET['trashed'] ), number_format_i18n( $_GET['trashed'] ) );	$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;	echo ' <a href="' . esc_url( wp_nonce_url( "edit.php?post_type=$post_type&doaction=undo&action=untrash&ids=$ids", "bulk-posts" ) ) . '">' . __('Undo') . '</a><br />';	unset($_GET['trashed']);}if ( isset($_GET['untrashed']) && (int) $_GET['untrashed'] ) {	printf( _n( 'Item restored from the Trash.', '%s items restored from the Trash.', $_GET['untrashed'] ), number_format_i18n( $_GET['untrashed'] ) );	unset($_GET['undeleted']);}$_SERVER['REQUEST_URI'] = remove_query_arg( array('locked', 'skipped', 'updated', 'deleted', 'trashed', 'untrashed'), $_SERVER['REQUEST_URI'] );?></p></div><?php } ?><form id="posts-filter" action="<?php echo admin_url('edit.php'); ?>" method="get"><ul class="subsubsub"><?phpif ( empty($locked_post_status) ) :$status_links = array();$num_posts = wp_count_posts( $post_type, 'readable' );$class = '';$allposts = '';if ( $user_posts ) {	if ( isset( $_GET['author'] ) && ( $_GET['author'] == $current_user->ID ) )		$class = ' class="current"';	$status_links[] = "<li><a href='edit.php?post_type=$post_type&author=$current_user->ID'$class>" . sprintf( _nx( 'Mine <span class="count">(%s)</span>', 'Mine <span class="count">(%s)</span>', $user_posts_count, 'posts' ), number_format_i18n( $user_posts_count ) ) . '</a>';	$allposts = '&all_posts=1';}$total_posts = array_sum( (array) $num_posts );// Subtract post types that are not included in the admin all list.foreach ( get_post_stati( array('show_in_admin_all_list' => false) ) as $state )	$total_posts -= $num_posts->$state;$class = empty($class) && empty($_GET['post_status']) ? ' class="current"' : '';$status_links[] = "<li><a href='edit.php?post_type=$post_type{$allposts}'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_posts, 'posts' ), number_format_i18n( $total_posts ) ) . '</a>';foreach ( get_post_stati(array('show_in_admin_status_list' => true), 'objects') as $status ) {	$class = '';	$status_name = $status->name;	if ( !in_array( $status_name, $avail_post_stati ) )		continue;	if ( empty( $num_posts->$status_name ) )		continue;	if ( isset($_GET['post_status']) && $status_name == $_GET['post_status'] )		$class = ' class="current"';	$status_links[] = "<li><a href='edit.php?post_status=$status_name&amp;post_type=$post_type'$class>" . sprintf( _n( $status->label_count[0], $status->label_count[1], $num_posts->$status_name ), number_format_i18n( $num_posts->$status_name ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );endif;?></ul><p class="search-box">	<label class="screen-reader-text" for="post-search-input"><?php echo $post_type_object->labels->search_items; ?>:</label>	<input type="text" id="post-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $post_type_object->labels->search_items  ); ?>" class="button" /></p><input type="hidden" name="post_status" class="post_status_page" value="<?php echo !empty($_GET['post_status']) ? esc_attr($_GET['post_status']) : 'all'; ?>" /><input type="hidden" name="post_type" class="post_type_page" value="<?php echo $post_type; ?>" /><input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" /><?php if ( have_posts() ) { ?><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => $num_pages,	'current' => $pagenum));$is_trash = isset($_GET['post_status']) && $_GET['post_status'] == 'trash';?><div class="alignleft actions"><select name="action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } else { ?><option value="edit"><?php _e('Edit'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-posts'); ?><?php // view filtersif ( !is_singular() ) {$arc_query = $wpdb->prepare("SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = %s ORDER BY post_date DESC", $post_type);$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) {$m = isset($_GET['m']) ? (int)$_GET['m'] : 0;?><select name='m'><option<?php selected( $m, 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( $arc_row->yyear . $arc_row->mmonth == $m )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr("$arc_row->yyear$arc_row->mmonth") . "'>";	echo $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear";	echo "</option>\n";}?></select><?php } ?><?phpif ( is_object_in_taxonomy($post_type, 'category') ) {	$dropdown_options = array('show_option_all' => __('View all categories'), 'hide_empty' => 0, 'hierarchical' => 1,		'show_count' => 0, 'orderby' => 'name', 'selected' => $cat);	wp_dropdown_categories($dropdown_options);}do_action('restrict_manage_posts');?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php }if ( $is_trash && current_user_can($post_type_object->cap->edit_others_posts) ) { ?><input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><?php if ( $page_links ) { ?><div class="tablenav-pages"><?php	$count_posts = $post_type_object->hierarchical ? $wp_query->post_count : $wp_query->found_posts;	$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',						number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),						number_format_i18n( min( $pagenum * $per_page, $count_posts ) ),						number_format_i18n( $count_posts ),						$page_links						);	echo $page_links_text;	?></div><?php}if ( !$post_type_object->hierarchical ) {?><div class="view-switch">	<a href="<?php echo esc_url(add_query_arg('mode', 'list', $_SERVER['REQUEST_URI'])) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e('List View') ?>" alt="<?php _e('List View') ?>" /></a>	<a href="<?php echo esc_url(add_query_arg('mode', 'excerpt', $_SERVER['REQUEST_URI'])) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e('Excerpt View') ?>" alt="<?php _e('Excerpt View') ?>" /></a></div><?php } ?><div class="clear"></div></div><div class="clear"></div><?php include( './edit-post-rows.php' ); ?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } else { ?><option value="edit"><?php _e('Edit'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /><?php if ( $is_trash && current_user_can($post_type_object->cap->edit_others_posts) ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?><br class="clear" /></div><br class="clear" /></div><?php } else { // have_posts() ?><div class="clear"></div><p><?phpif ( isset($_GET['post_status']) && 'trash' == $_GET['post_status'] )	echo $post_type_object->labels->not_found_in_trash;else	echo $post_type_object->labels->not_found;?></p><?php } ?></form><?php inline_edit_row( $current_screen ); ?><div id="ajax-response"></div><br class="clear" /></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Administration Update API * * @package WordPress * @subpackage Administration */// The admin side of our 1.1 update system/** * Selects the first update version from the update_core option * * @return object the response from the API */function get_preferred_from_update_core() {	$updates = get_core_updates();	if ( !is_array( $updates ) )		return false;	if ( empty( $updates ) )		return (object)array('response' => 'latest');	return $updates[0];}/** * Get available core updates * * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too, * 	set $options['available'] to false to skip not-dimissed updates. * @return array Array of the update objects */function get_core_updates( $options = array() ) {	$options = array_merge( array('available' => true, 'dismissed' => false ), $options );	$dismissed = get_site_option( 'dismissed_update_core' );	if ( !is_array( $dismissed ) ) $dismissed = array();	$from_api = get_site_transient( 'update_core' );	if ( empty($from_api) )		return false;	if ( !isset( $from_api->updates ) || !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	if ( !is_array( $updates ) ) return false;	$result = array();	foreach($updates as $update) {		if ( array_key_exists( $update->current.'|'.$update->locale, $dismissed ) ) {			if ( $options['dismissed'] ) {				$update->dismissed = true;				$result[]= $update;			}		} else {			if ( $options['available'] ) {				$update->dismissed = false;				$result[]= $update;			}		}	}	return $result;}function dismiss_core_update( $update ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$dismissed[ $update->current.'|'.$update->locale ] = true;	return update_site_option( 'dismissed_update_core', $dismissed );}function undismiss_core_update( $version, $locale ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$key = $version.'|'.$locale;	if ( !isset( $dismissed[$key] ) ) return false;	unset( $dismissed[$key] );	return update_site_option( 'dismissed_update_core', $dismissed );}function find_core_update( $version, $locale ) {	$from_api = get_site_transient( 'update_core' );	if ( !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	foreach($updates as $update) {		if ( $update->current == $version && $update->locale == $locale )			return $update;	}	return false;}function core_update_footer( $msg = '' ) {	if ( is_multisite() && !current_user_can('update_core') )		return false;	if ( !current_user_can('update_core') )		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->current ) )		$cur->current = '';	if ( ! isset( $cur->url ) )		$cur->url = '';	if ( ! isset( $cur->response ) )		$cur->response = '';	switch ( $cur->response ) {	case 'development' :		return sprintf( __( 'You are using a development version (%1$s). Cool! Please <a href="%2$s">stay updated</a>.' ), $GLOBALS['wp_version'], 'update-core.php');	break;	case 'upgrade' :		return sprintf( '<strong>'.__( '<a href="%1$s">Get Version %2$s</a>' ).'</strong>', 'update-core.php', $cur->current);	break;	case 'latest' :	default :		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	break;	}}add_filter( 'update_footer', 'core_update_footer' );function update_nag() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	global $pagenow;	if ( 'update-core.php' == $pagenow )		return;	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->response ) || $cur->response != 'upgrade' )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! <a href="%2$s">Please update now</a>.'), $cur->current, 'update-core.php' );	else		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! Please notify the site administrator.'), $cur->current );	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'update_nag', 3 );// Called directly from dashboardfunction update_right_now_message() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	$cur = get_preferred_from_update_core();	$msg = sprintf( __('You are using <span class="b">WordPress %s</span>.'), $GLOBALS['wp_version'] );	if ( isset( $cur->response ) && $cur->response == 'upgrade' && current_user_can('update_core') )		$msg .= " <a href='update-core.php' class='button'>" . sprintf( __('Update to %s'), $cur->current ? $cur->current : __( 'Latest' ) ) . '</a>';	echo "<span id='wp-version-message'>$msg</span>";}function get_plugin_updates() {	$all_plugins = get_plugins();	$upgrade_plugins = array();	$current = get_site_transient( 'update_plugins' );	foreach ( (array)$all_plugins as $plugin_file => $plugin_data) {		if ( isset( $current->response[ $plugin_file ] ) ) {			$upgrade_plugins[ $plugin_file ] = (object) $plugin_data;			$upgrade_plugins[ $plugin_file ]->update = $current->response[ $plugin_file ];		}	}	return $upgrade_plugins;}function wp_plugin_update_rows() {	if ( !current_user_can('update_plugins' ) )		return;	$plugins = get_site_transient( 'update_plugins' );	if ( isset($plugins->response) && is_array($plugins->response) ) {		$plugins = array_keys( $plugins->response );		foreach( $plugins as $plugin_file ) {			add_action( "after_plugin_row_$plugin_file", 'wp_plugin_update_row', 10, 2 );		}	}}add_action( 'admin_init', 'wp_plugin_update_rows' );function wp_plugin_update_row( $file, $plugin_data ) {	$current = get_site_transient( 'update_plugins' );	if ( !isset( $current->response[ $file ] ) )		return false;	$r = $current->response[ $file ];	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	$plugin_name = wp_kses( $plugin_data['Name'], $plugins_allowedtags );	$details_url = admin_url('plugin-install.php?tab=plugin-information&plugin=' . $r->slug . '&TB_iframe=true&width=600&height=800');	echo '<tr class="plugin-update-tr"><td colspan="3" class="plugin-update"><div class="update-message">';	if ( ! current_user_can('update_plugins') )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else if ( empty($r->package) )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> <em>automatic upgrade unavailable for this plugin</em>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> or <a href="%5$s">upgrade automatically</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version, wp_nonce_url('update.php?action=upgrade-plugin&plugin=' . $file, 'upgrade-plugin_' . $file) );	do_action( "in_plugin_update_message-$file", $plugin_data, $r );	echo '</div></td></tr>';}function wp_update_plugin($plugin, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Plugin_Upgrader();	return $upgrader->upgrade($plugin);}function get_theme_updates() {	$themes = get_themes();	$current = get_site_transient('update_themes');	$update_themes = array();	foreach ( $themes as $theme ) {		$theme = (object) $theme;		if ( isset($current->response[ $theme->Stylesheet ]) ) {			$update_themes[$theme->Stylesheet] = $theme;			$update_themes[$theme->Stylesheet]->update = $current->response[ $theme->Stylesheet ];		}	}	return $update_themes;}function wp_update_theme($theme, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Theme_Upgrader();	return $upgrader->upgrade($theme);}function wp_update_core($current, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Core_Upgrader();	return $upgrader->upgrade($current);}function maintenance_nag() {	global $upgrading;	if ( ! isset( $upgrading ) )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('An automated WordPress update has failed to complete - <a href="%s">please attempt the update again now</a>.'), 'update-core.php' );	else		$msg = __('An automated WordPress update has failed to complete! Please notify the site administrator.');	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'maintenance_nag' );?>
<?php/** * WordPress Roles and Capabilities. * * @package WordPress * @subpackage User *//** * WordPress User Roles. * * The role option is simple, the structure is organized by role name that store * the name in value of the 'name' key. The capabilities are stored as an array * in the value of the 'capability' key. * * <code> * array ( *		'rolename' => array ( *			'name' => 'rolename', *			'capabilities' => array() *		) * ) * </code> * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Roles {	/**	 * List of roles and capabilities.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles;	/**	 * List of the role objects.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_objects = array();	/**	 * List of role names.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_names = array();	/**	 * Option name for storing role list.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $role_key;	/**	 * Whether to use the database for retrieval and storage.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $use_db = true;	/**	 * PHP4 Constructor - Call {@link WP_Roles::_init()} method.	 *	 * @since 2.0.0	 * @access public	 *	 * @return WP_Roles	 */	function WP_Roles() {		$this->_init();	}	/**	 * Set up the object properties.	 *	 * The role key is set to the current prefix for the $wpdb object with	 * 'user_roles' appended. If the $wp_user_roles global is set, then it will	 * be used and the role option will not be updated or used.	 *	 * @since 2.1.0	 * @access protected	 * @uses $wpdb Used to get the database prefix.	 * @global array $wp_user_roles Used to set the 'roles' property value.	 */	function _init () {		global $wpdb, $wp_user_roles;		$this->role_key = $wpdb->prefix . 'user_roles';		if ( ! empty( $wp_user_roles ) ) {			$this->roles = $wp_user_roles;			$this->use_db = false;		} else {			$this->roles = get_option( $this->role_key );		}		if ( empty( $this->roles ) )			return;		$this->role_objects = array();		$this->role_names =  array();		foreach ( (array) $this->roles as $role => $data ) {			$this->role_objects[$role] = new WP_Role( $role, $this->roles[$role]['capabilities'] );			$this->role_names[$role] = $this->roles[$role]['name'];		}	}	/**	 * Add role name with capabilities to list.	 *	 * Updates the list of roles, if the role doesn't already exist.	 *	 * The capabilities are defined in the following format `array( 'read' => true );`	 * To explicitly deny a role a capability you set the value for that capability to false.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $display_name Role display name.	 * @param array $capabilities List of role capabilities in the above format.	 * @return null|WP_Role WP_Role object if role is added, null if already exists.	 */	function add_role( $role, $display_name, $capabilities = array() ) {		if ( isset( $this->roles[$role] ) )			return;		$this->roles[$role] = array(			'name' => $display_name,			'capabilities' => $capabilities			);		if ( $this->use_db )			update_option( $this->role_key, $this->roles );		$this->role_objects[$role] = new WP_Role( $role, $capabilities );		$this->role_names[$role] = $display_name;		return $this->role_objects[$role];	}	/**	 * Remove role by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( ! isset( $this->role_objects[$role] ) )			return;		unset( $this->role_objects[$role] );		unset( $this->role_names[$role] );		unset( $this->roles[$role] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Add capability to role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 * @param bool $grant Optional, default is true. Whether role is capable of performing capability.	 */	function add_cap( $role, $cap, $grant = true ) {		$this->roles[$role]['capabilities'][$cap] = $grant;		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Remove capability from role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 */	function remove_cap( $role, $cap ) {		unset( $this->roles[$role]['capabilities'][$cap] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Retrieve role object by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @return object|null Null, if role does not exist. WP_Role object, if found.	 */	function &get_role( $role ) {		if ( isset( $this->role_objects[$role] ) )			return $this->role_objects[$role];		else			return null;	}	/**	 * Retrieve list of role names.	 *	 * @since 2.0.0	 * @access public	 *	 * @return array List of role names.	 */	function get_names() {		return $this->role_names;	}	/**	 * Whether role name is currently in the list of available roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name to look up.	 * @return bool	 */	function is_role( $role )	{		return isset( $this->role_names[$role] );	}}/** * WordPress Role class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Role {	/**	 * Role name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $name;	/**	 * List of capabilities the role contains.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $capabilities;	/**	 * PHP4 Constructor - Set up object properties.	 *	 * The list of capabilities, must have the key as the name of the capability	 * and the value a boolean of whether it is granted to the role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param array $capabilities List of capabilities.	 * @return WP_Role	 */	function WP_Role( $role, $capabilities ) {		$this->name = $role;		$this->capabilities = $capabilities;	}	/**	 * Assign role a capability.	 *	 * @see WP_Roles::add_cap() Method uses implementation for role.	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether role has capability privilege.	 */	function add_cap( $cap, $grant = true ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$this->capabilities[$cap] = $grant;		$wp_roles->add_cap( $this->name, $cap, $grant );	}	/**	 * Remove capability from role.	 *	 * This is a container for {@link WP_Roles::remove_cap()} to remove the	 * capability from the role. That is to say, that {@link	 * WP_Roles::remove_cap()} implements the functionality, but it also makes	 * sense to use this class, because you don't need to enter the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		unset( $this->capabilities[$cap] );		$wp_roles->remove_cap( $this->name, $cap );	}	/**	 * Whether role has capability.	 *	 * The capabilities is passed through the 'role_has_cap' filter. The first	 * parameter for the hook is the list of capabilities the class has	 * assigned. The second parameter is the capability name to look for. The	 * third and final parameter for the hook is the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @return bool True, if user has capability. False, if doesn't have capability.	 */	function has_cap( $cap ) {		$capabilities = apply_filters( 'role_has_cap', $this->capabilities, $cap, $this->name );		if ( !empty( $capabilities[$cap] ) )			return $capabilities[$cap];		else			return false;	}}/** * WordPress User class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_User {	/**	 * User data container.	 *	 * This will be set as properties of the object.	 *	 * @since 2.0.0	 * @access private	 * @var array	 */	var $data;	/**	 * The user's ID.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $ID = 0;	/**	 * The deprecated user's ID.	 *	 * @since 2.0.0	 * @access public	 * @deprecated Use WP_User::$ID	 * @see WP_User::$ID	 * @var int	 */	var $id = 0;	/**	 * The individual capabilities the user has been given.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $caps = array();	/**	 * User metadata option name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $cap_key;	/**	 * The roles the user is part of.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles = array();	/**	 * All capabilities the user has, including individual and role based.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $allcaps = array();	/**	 * First name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $first_name = '';	/**	 * Last name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $last_name = '';	/**	 * The filter context applied to user data fields.	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $filter = null;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * Retrieves the userdata and then assigns all of the data keys to direct	 * properties of the object. Calls {@link WP_User::_init_caps()} after	 * setting up the object's user data properties.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int|string $id User's ID or username	 * @param int $name Optional. User's username	 * @return WP_User	 */	function WP_User( $id, $name = '' ) {		if ( empty( $id ) && empty( $name ) )			return;		if ( ! is_numeric( $id ) ) {			$name = $id;			$id = 0;		}		if ( ! empty( $id ) )			$this->data = get_userdata( $id );		else			$this->data = get_userdatabylogin( $name );		if ( empty( $this->data->ID ) )			return;		foreach ( get_object_vars( $this->data ) as $key => $value ) {			$this->{$key} = $value;		}		$this->id = $this->ID;		$this->_init_caps();	}	/**	 * Set up capability object properties.	 *	 * Will set the value for the 'cap_key' property to current database table	 * prefix, followed by 'capabilities'. Will then check to see if the	 * property matching the 'cap_key' exists and is an array. If so, it will be	 * used.	 *	 * @since 2.1.0	 *	 * @param string $cap_key Optional capability key	 * @access protected	 */	function _init_caps( $cap_key = '' ) {		global $wpdb;		if ( empty($cap_key) )			$this->cap_key = $wpdb->prefix . 'capabilities';		else			$this->cap_key = $cap_key;		$this->caps = &$this->{$this->cap_key};		if ( ! is_array( $this->caps ) )			$this->caps = array();		$this->get_role_caps();	}	/**	 * Retrieve all of the role capabilities and merge with individual capabilities.	 *	 * All of the capabilities of the roles the user belongs to are merged with	 * the users individual roles. This also means that the user can be denied	 * specific roles that their role might have, but the specific user isn't	 * granted permission to.	 *	 * @since 2.0.0	 * @uses $wp_roles	 * @access public	 */	function get_role_caps() {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		//Filter out caps that are not role names and assign to $this->roles		if ( is_array( $this->caps ) )			$this->roles = array_filter( array_keys( $this->caps ), array( &$wp_roles, 'is_role' ) );		//Build $allcaps from role caps, overlay user's $caps		$this->allcaps = array();		foreach ( (array) $this->roles as $role ) {			$the_role =& $wp_roles->get_role( $role );			$this->allcaps = array_merge( (array) $this->allcaps, (array) $the_role->capabilities );		}		$this->allcaps = array_merge( (array) $this->allcaps, (array) $this->caps );	}	/**	 * Add role to user.	 *	 * Updates the user's meta data option with capabilities and roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function add_role( $role ) {		$this->caps[$role] = true;		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Remove role from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( !in_array($role, $this->roles) )			return;		unset( $this->caps[$role] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Set the role of the user.	 *	 * This will remove the previous roles of the user and assign the user the	 * new one. You can set the role to an empty string and it will remove all	 * of the roles from the user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function set_role( $role ) {		foreach ( (array) $this->roles as $oldrole )			unset( $this->caps[$oldrole] );		if ( !empty( $role ) ) {			$this->caps[$role] = true;			$this->roles = array( $role => true );		} else {			$this->roles = false;		}		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();		do_action( 'set_user_role', $this->ID, $role );	}	/**	 * Choose the maximum level the user has.	 *	 * Will compare the level from the $item parameter against the $max	 * parameter. If the item is incorrect, then just the $max parameter value	 * will be returned.	 *	 * Used to get the max level based on the capabilities the user has. This	 * is also based on roles, so if the user is assigned the Administrator role	 * then the capability 'level_10' will exist and the user will get that	 * value.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $max Max level of user.	 * @param string $item Level capability name.	 * @return int Max Level.	 */	function level_reduction( $max, $item ) {		if ( preg_match( '/^level_(10|[0-9])$/i', $item, $matches ) ) {			$level = intval( $matches[1] );			return max( $max, $level );		} else {			return $max;		}	}	/**	 * Update the maximum user level for the user.	 *	 * Updates the 'user_level' user metadata (includes prefix that is the	 * database table prefix) with the maximum user level. Gets the value from	 * the all of the capabilities that the user has.	 *	 * @since 2.0.0	 * @access public	 */	function update_user_level_from_caps() {		global $wpdb;		$this->user_level = array_reduce( array_keys( $this->allcaps ), array( &$this, 'level_reduction' ), 0 );		update_user_meta( $this->ID, $wpdb->prefix . 'user_level', $this->user_level );	}	/**	 * Add capability and grant or deny access to capability.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether to grant capability to user.	 */	function add_cap( $cap, $grant = true ) {		$this->caps[$cap] = $grant;		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove capability from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		if ( empty( $this->caps[$cap] ) )			return;		unset( $this->caps[$cap] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove all of the capabilities of the user.	 *	 * @since 2.1.0	 * @access public	 */	function remove_all_caps() {		global $wpdb;		$this->caps = array();		delete_user_meta( $this->ID, $this->cap_key );		delete_user_meta( $this->ID, $wpdb->prefix . 'user_level' );		$this->get_role_caps();	}	/**	 * Whether user has capability or role name.	 *	 * This is useful for looking up whether the user has a specific role	 * assigned to the user. The second optional parameter can also be used to	 * check for capabilities against a specfic post.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string|int $cap Capability or role name to search.	 * @param int $post_id Optional. Post ID to check capability against specific post.	 * @return bool True, if user has capability; false, if user does not have capability.	 */	function has_cap( $cap ) {		if ( is_numeric( $cap ) ) {			_deprecated_argument( __FUNCTION__, '2.0', __('Usage of user levels by plugins and themes is deprecated. Use roles and capabilities instead.') );			$cap = $this->translate_level_to_cap( $cap );		}		$args = array_slice( func_get_args(), 1 );		$args = array_merge( array( $cap, $this->ID ), $args );		$caps = call_user_func_array( 'map_meta_cap', $args );		// Multisite super admin has all caps by definition, Unless specifically denied.		if ( is_multisite() && is_super_admin() ) {			if ( in_array('do_not_allow', $caps) )				return false;			return true;		}		// Must have ALL requested caps		$capabilities = apply_filters( 'user_has_cap', $this->allcaps, $caps, $args );		foreach ( (array) $caps as $cap ) {			//echo "Checking cap $cap<br />";			if ( empty( $capabilities[$cap] ) || !$capabilities[$cap] )				return false;		}		return true;	}	/**	 * Convert numeric level to level capability name.	 *	 * Prepends 'level_' to level number.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $level Level number, 1 to 10.	 * @return string	 */	function translate_level_to_cap( $level ) {		return 'level_' . $level;	}	/**	 * Set the blog to operate on. Defaults to the current blog.	 *	 * @since 3.0.0	 *	 * @param int $blog_id Optional Blog ID, defaults to current blog.	 */	function for_blog( $blog_id = '' ) {		global $wpdb;		if ( ! empty( $blog_id ) )			$cap_key = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';		else			$cap_key = '';		$this->_init_caps( $cap_key );	}}/** * Map meta capabilities to primitive capabilities. * * This does not actually compare whether the user ID has the actual capability, * just what the capability or capabilities are. Meta capability list value can * be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post', * 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'. * * @since 2.0.0 * * @param string $cap Capability name. * @param int $user_id User ID. * @return array Actual capabilities for meta capability. */function map_meta_cap( $cap, $user_id ) {	$args = array_slice( func_get_args(), 2 );	$caps = array();	switch ( $cap ) {	case 'remove_user':		$caps[] = 'remove_users';		break;	case 'delete_user':		$caps[] = 'delete_users';		break;	case 'promote_user':		$caps[] = 'promote_users';		break;	case 'edit_user':		// Allow user to edit itself		if ( isset( $args[0] ) && $user_id == $args[0] )			break;		// Fall through	case 'edit_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = 'edit_users'; // Explicit due to primitive fall through		break;	case 'delete_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->delete_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( '' != $post->post_author ) {			$post_author_data = get_userdata( $post->post_author );		} else {			//No author set yet so default to current user for cap checks			$post_author_data = $author_data;		}		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'delete_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_posts';			} else {				// If the post is draft...				$caps[] = 'delete_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'delete_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'delete_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'delete_private_posts';		}		break;	case 'delete_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ('' != $page->post_author) {			$page_author_data = get_userdata( $page->post_author );		} else {			//No author set yet so default to current user for cap checks			$page_author_data = $author_data;		}		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( $page->post_status == 'publish' ) {				$caps[] = 'delete_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_pages';			} else {				// If the page is draft...				$caps[] = 'delete_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'delete_others_pages';			// The page is published, extra cap required.			if ( $page->post_status == 'publish' )				$caps[] = 'delete_published_pages';			elseif ( $page->post_status == 'private' )				$caps[] = 'delete_private_pages';		}		break;		// edit_post breaks down to edit_posts, edit_published_posts, or		// edit_others_posts	case 'edit_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->edit_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		$post_author_data = get_userdata( $post->post_author );		//echo "current user id : $user_id, post author id: " . $post_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'edit_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_posts';			} else {				// If the post is draft...				$caps[] = 'edit_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'edit_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'edit_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'edit_private_posts';		}		break;	case 'edit_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( 'publish' == $page->post_status ) {				$caps[] = 'edit_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_pages';			} else {				// If the page is draft...				$caps[] = 'edit_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'edit_others_pages';			// The page is published, extra cap required.			if ( 'publish' == $page->post_status )				$caps[] = 'edit_published_pages';			elseif ( 'private' == $page->post_status )				$caps[] = 'edit_private_pages';		}		break;	case 'read_post':		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->read_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( 'private' != $post->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$post_author_data = get_userdata( $post->post_author );		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_posts';		break;	case 'read_page':		$page = get_page( $args[0] );		if ( 'private' != $page->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$page_author_data = get_userdata( $page->post_author );		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_pages';		break;	case 'unfiltered_upload':		if ( defined('ALLOW_UNFILTERED_UPLOADS') && ALLOW_UNFILTERED_UPLOADS && ( !is_multisite() || is_super_admin() )  )			$caps[] = $cap;		else			$caps[] = 'do_not_allow';		break;	case 'edit_files':	case 'edit_plugins':	case 'edit_themes':		if ( defined('DISALLOW_FILE_EDIT') && DISALLOW_FILE_EDIT ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_EDIT.	case 'update_plugins':	case 'delete_plugins':	case 'install_plugins':	case 'update_themes':	case 'delete_themes':	case 'install_themes':	case 'update_core':		// Disallow anything that creates, deletes, or edits core, plugin, or theme files.		// Files in uploads are excepted.		if ( defined('DISALLOW_FILE_MODS') && DISALLOW_FILE_MODS ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_MODS.	case 'unfiltered_html':		// Disallow unfiltered_html for all users, even admins and super admins.		if ( defined('DISALLOW_UNFILTERED_HTML') && DISALLOW_UNFILTERED_HTML ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_UNFILTERED_HTML	case 'delete_user':	case 'delete_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	case 'create_users':		if ( is_multisite() && !get_site_option( 'add_new_users' ) )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	default:		// If no meta caps match, return the original cap.		$caps[] = $cap;	}	return apply_filters('map_meta_cap', $caps, $cap, $user_id, $args);}/** * Whether current user has capability or role. * * @since 2.0.0 * * @param string $capability Capability or role name. * @return bool */function current_user_can( $capability ) {	$current_user = wp_get_current_user();	if ( empty( $current_user ) )		return false;	$args = array_slice( func_get_args(), 1 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$current_user, 'has_cap' ), $args );}/** * Whether current user has a capability or role for a given blog. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param string $capability Capability or role name. * @return bool */function current_user_can_for_blog( $blog_id, $capability ) {	$current_user = wp_get_current_user();    if ( is_multisite() && is_super_admin() )		return true;	if ( empty( $current_user ) )		return false;	// Create new object to avoid stomping the global current_user.	$user = new WP_User( $current_user->id) ;	// Set the blog id.  @todo add blog id arg to WP_User constructor?	$user->for_blog( $blog_id );	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$user, 'has_cap' ), $args );}/** * Whether author of supplied post has capability or role. * * @since 2.9.0 * * @param int|object $post Post ID or post object. * @param string $capability Capability or role name. * @return bool */function author_can( $post, $capability ) {	if ( !$post = get_post($post) )		return false;	$author = new WP_User( $post->post_author );	if ( empty( $author ) )		return false;	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$author, 'has_cap' ), $args );}/** * Retrieve role object. * * @see WP_Roles::get_role() Uses method to retrieve role object. * @since 2.0.0 * * @param string $role Role name. * @return object */function get_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->get_role( $role );}/** * Add role, if it does not exist. * * @see WP_Roles::add_role() Uses method to add role. * @since 2.0.0 * * @param string $role Role name. * @param string $display_name Display name for role. * @param array $capabilities List of capabilities. * @return null|WP_Role WP_Role object if role is added, null if already exists. */function add_role( $role, $display_name, $capabilities = array() ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->add_role( $role, $display_name, $capabilities );}/** * Remove role, if it exists. * * @see WP_Roles::remove_role() Uses method to remove role. * @since 2.0.0 * * @param string $role Role name. * @return null */function remove_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->remove_role( $role );}/** * Retrieve a list of super admins. * * @since 3.0.0 * * @uses $super_admins Super admins global variable, if set. * * @return array List of super admin logins */function get_super_admins() {	global $super_admins;	if ( isset($super_admins) )		return $super_admins;	else		return get_site_option( 'site_admins', array('admin') );}/** * Determine if user is a site admin. * * @since 3.0.0 * * @param int $user_id (Optional) The ID of a user. Defaults to the current user. * @return bool True if the user is a site admin. */function is_super_admin( $user_id = false ) {	if ( ! $user_id ) {		$current_user = wp_get_current_user();		$user_id = ! empty($current_user) ? $current_user->id : 0;	}	if ( ! $user_id )		return false;	$user = new WP_User($user_id);	if ( is_multisite() ) {		$super_admins = get_super_admins();		if ( is_array( $super_admins ) && in_array( $user->user_login, $super_admins ) )			return true;	} else {		if ( $user->has_cap('delete_users') )			return true;	}	return false;}?>
<?php/** * Metadata API * * Functions for retrieving and manipulating metadata of various WordPress object types.  Metadata * for an object is a represented by a simple key-value pair.  Objects may contain multiple * metadata entries that share the same key and differ only in their value. * * @package WordPress * @subpackage Meta * @since 2.9.0 *//** * Add metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'added_{$meta_type}_meta' with meta_id of added metadata entry, * 		object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param bool $unique Optional, default is false.  Whether the specified metadata key should be * 		unique for the object.  If true, and the object already has a value for the specified * 		metadata key, no change will be made * @return bool True on successful update, false on failure. */function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( $unique && $wpdb->get_var( $wpdb->prepare(		"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d",		$meta_key, $object_id ) ) )		return false;	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$wpdb->insert( $table, array(		$column => $object_id,		'meta_key' => $meta_key,		'meta_value' => $meta_value	) );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "added_{$meta_type}_meta", $wpdb->insert_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Update metadata for the specified object.  If no value already exists for the specified object * ID and metadata key, the metadata will be added. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'update_{$meta_type}_meta' before updating metadata with meta_id of * 		metadata entry to update, object ID, meta key, and meta value * @uses do_action() Calls 'updated_{$meta_type}_meta' after updating metadata with meta_id of * 		updated metadata entry, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param string $prev_value Optional.  If specified, only update existing metadata entries with * 		the specified value.  Otherwise, update all entries. * @return bool True on successful update, false on failure. */function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( ! $meta_id = $wpdb->get_var( $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d", $meta_key, $object_id ) ) )		return add_metadata($meta_type, $object_id, $meta_key, $meta_value);	// Compare existing value to new value if no prev value given and the key exists only once.	if ( empty($prev_value) ) {		$old_value = get_metadata($meta_type, $object_id, $meta_key);		if ( count($old_value) == 1 ) {			if ( $old_value[0] == $meta_value )				return false;		}	}	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$data  = compact( 'meta_value' );	$where = array( $column => $object_id, 'meta_key' => $meta_key );	if ( !empty( $prev_value ) ) {		$prev_value = maybe_serialize($prev_value);		$where['meta_value'] = $prev_value;	}	do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	$wpdb->update( $table, $data, $where );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Delete metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'deleted_{$meta_type}_meta' after deleting with meta_id of * 		deleted metadata entries, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Optional. Metadata value.  If specified, only delete metadata entries * 		with this value.  Otherwise, delete all entries with the specified meta_key. * @param bool $delete_all Optional, default is false.  If true, delete matching metadata entries * 		for all objects, ignoring the specified object_id.  Otherwise, only delete matching * 		metadata entries for the specified object_id. * @return bool True on successful delete, false on failure. */function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( (!$object_id = absint($object_id)) && !$delete_all )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$type_column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$query = $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s", $meta_key );	if ( !$delete_all )		$query .= $wpdb->prepare(" AND $type_column = %d", $object_id );	if ( $meta_value )		$query .= $wpdb->prepare(" AND meta_value = %s", $meta_value );	$meta_ids = $wpdb->get_col( $query );	if ( !count( $meta_ids ) )		return false;	$query = "DELETE FROM $table WHERE $id_column IN( " . implode( ',', $meta_ids ) . " )";	$count = $wpdb->query($query);	if ( !$count )		return false;	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "deleted_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $meta_value );	return true;}/** * Retrieve metadata for the specified object. * * @since 2.9.0 * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Optional.  Metadata key.  If not specified, retrieve all metadata for * 		the specified object. * @param bool $single Optional, default is false.  If true, return only the first value of the * 		specified meta_key.  This parameter has no effect if meta_key is not specified. * @return string|array Single metadata value, or array of values */function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {	if ( !$meta_type )		return false;	if ( !$object_id = absint($object_id) )		return false;	$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	if ( !$meta_cache ) {		update_meta_cache($meta_type, $object_id);		$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	}	if ( ! $meta_key )		return $meta_cache;	if ( isset($meta_cache[$meta_key]) ) {		if ( $single )			return maybe_unserialize( $meta_cache[$meta_key][0] );		else			return array_map('maybe_unserialize', $meta_cache[$meta_key]);	}	if ($single)		return '';	else		return array();}/** * Update the metadata cache for the specified objects. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int|array $object_ids array or comma delimited list of object IDs to update cache for * @return mixed Metadata cache for the specified objects, or false on failure. */function update_meta_cache($meta_type, $object_ids) {	if ( empty( $meta_type ) || empty( $object_ids ) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	$column = esc_sql($meta_type . '_id');	global $wpdb;	if ( !is_array($object_ids) ) {		$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);		$object_ids = explode(',', $object_ids);	}	$object_ids = array_map('intval', $object_ids);	$cache_key = $meta_type . '_meta';	$ids = array();	foreach ( $object_ids as $id ) {		if ( false === wp_cache_get($id, $cache_key) )			$ids[] = $id;	}	if ( empty( $ids ) )		return false;	// Get meta info	$id_list = join(',', $ids);	$cache = array();	$meta_list = $wpdb->get_results( $wpdb->prepare("SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list)",		$meta_type), ARRAY_A );	if ( !empty($meta_list) ) {		foreach ( $meta_list as $metarow) {			$mpid = intval($metarow[$column]);			$mkey = $metarow['meta_key'];			$mval = $metarow['meta_value'];			// Force subkeys to be array type:			if ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )				$cache[$mpid] = array();			if ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )				$cache[$mpid][$mkey] = array();			// Add a value to the current pid/key:			$cache[$mpid][$mkey][] = $mval;		}	}	foreach ( $ids as $id ) {		if ( ! isset($cache[$id]) )			$cache[$id] = array();	}	foreach ( array_keys($cache) as $object)		wp_cache_set($object, $cache[$object], $cache_key);	return $cache;}/** * Retrieve the name of the metadata table for the specified object type. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object to get metadata table for (e.g., comment, post, or user) * @return mixed Metadata table name, or false if no metadata table exists */function _get_meta_table($type) {	global $wpdb;	$table_name = $type . 'meta';	if ( empty($wpdb->$table_name) )		return false;	return $wpdb->$table_name;}?>
<?php/** * WordPress Plugin Install Administration API * * @package WordPress * @subpackage Administration *//** * Retrieve plugin installer pages from WordPress Plugins API. * * It is possible for a plugin to override the Plugin API result with three * filters. Assume this is for plugins, which can extend on the Plugin Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'plugins_api_args', is for the args and gives the action as * the second parameter. The hook for 'plugins_api_args' must ensure that an * object is returned. * * The second filter, 'plugins_api', is the result that would be returned. * * @since 2.7.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Plugin Info API. * @return object plugins_api response object on success, WP_Error on failure. */function plugins_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	// Allows a plugin to override the WordPress.org API entirely.	// Use the filter 'plugins_api_result' to mearly add results.	// Please ensure that a object is returned from the following filters.	$args = apply_filters('plugins_api_args', $args, $action);	$res = apply_filters('plugins_api', false, $action, $args);	if ( false === $res ) {		$request = wp_remote_post('http://api.wordpress.org/plugins/info/1.0/', array( 'timeout' => 15, 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('plugins_api_failed', __('An Unexpected HTTP Error occurred during the API request.'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( false === $res )				$res = new WP_Error('plugins_api_failed', __('An unknown error occurred.'), $request['body']);		}	} elseif ( !is_wp_error($res) ) {		$res->external = true;	}	return apply_filters('plugins_api_result', $res, $action, $args);}/** * Retrieve popular WordPress plugin tags. * * @since 2.7.0 * * @param array $args * @return array */function install_popular_tags( $args = array() ) {	if ( ! ($cache = wp_cache_get('popular_tags', 'api')) && ! ($cache = get_option('wporg_popular_tags')) )		add_option('wporg_popular_tags', array(), '', 'no'); ///No autoload.	if ( $cache && $cache->timeout + 3 * 60 * 60 > time() )		return $cache->cached;	$tags = plugins_api('hot_tags', $args);	if ( is_wp_error($tags) )		return $tags;	$cache = (object) array('timeout' => time(), 'cached' => $tags);	update_option('wporg_popular_tags', $cache);	wp_cache_set('popular_tags', $cache, 'api');	return $tags;}add_action('install_plugins_search', 'install_search', 10, 1);/** * Display search results and display as tag cloud. * * @since 2.7.0 * * @param string $page */function install_search($page) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$args['tag'] = sanitize_title_with_dashes($term);			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_plugins_table_header', 'install_search_form');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);	return;}add_action('install_plugins_dashboard', 'install_dashboard');function install_dashboard() {	?>	<p><?php _e('Plugins extend and expand the functionality of WordPress. You may automatically install plugins from the <a href="http://wordpress.org/extend/plugins/">WordPress Plugin Directory</a> or upload a plugin in .zip format via this page.') ?></p>	<h4><?php _e('Search') ?></h4>	<p class="install-help"><?php _e('Search for plugins by keyword, author, or tag.') ?></p>	<?php install_search_form(); ?>	<h4><?php _e('Popular tags') ?></h4>	<p class="install-help"><?php _e('You may also browse based on the most popular tags in the Plugin Directory:') ?></p>	<?php	$api_tags = install_popular_tags();	echo '<p class="popular-tags">';	if ( is_wp_error($api_tags) ) {		echo $api_tags->get_error_message();	} else {		//Set up the tags in a way which can be interprated by wp_generate_tag_cloud()		$tags = array();		foreach ( (array)$api_tags as $tag )			$tags[ $tag['name'] ] = (object) array(									'link' => esc_url( admin_url('plugin-install.php?tab=search&type=tag&s=' . urlencode($tag['name'])) ),									'name' => $tag['name'],									'id' => sanitize_title_with_dashes($tag['name']),									'count' => $tag['count'] );		echo wp_generate_tag_cloud($tags, array( 'single_text' => __('%d plugin'), 'multiple_text' => __('%d plugins') ) );	}	echo '</p><br class="clear" />';}/** * Display search form for searching plugins. * * @since 2.7.0 */function install_search_form(){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><form id="search-plugins" method="post" action="<?php echo admin_url('plugin-install.php?tab=search'); ?>">		<select name="type" id="typeselector">			<option value="term"<?php selected('term', $type) ?>><?php _e('Term'); ?></option>			<option value="author"<?php selected('author', $type) ?>><?php _e('Author'); ?></option>			<option value="tag"<?php selected('tag', $type) ?>><?php _ex('Tag', 'Plugin Installer'); ?></option>		</select>		<input type="text" name="s" value="<?php echo esc_attr($term) ?>" />		<label class="screen-reader-text" for="plugin-search-input"><?php _e('Search Plugins'); ?></label>		<input type="submit" id="plugin-search-input" name="search" value="<?php esc_attr_e('Search Plugins'); ?>" class="button" />	</form><?php}add_action('install_plugins_featured', 'install_featured', 10, 1);/** * Display featured plugins. * * @since 2.7.0 * * @param string $page */function install_featured($page = 1) {	$args = array('browse' => 'featured', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_popular', 'install_popular', 10, 1);/** * Display popular plugins. * * @since 2.7.0 * * @param string $page */function install_popular($page = 1) {	$args = array('browse' => 'popular', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_upload', 'install_plugins_upload', 10, 1);/** * Upload from zip * @since 2.8.0 * * @param string $page */function install_plugins_upload( $page = 1 ) {?>	<h4><?php _e('Install a plugin in .zip format') ?></h4>	<p class="install-help"><?php _e('If you have a plugin in a .zip format, you may install it by uploading it here.') ?></p>	<form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-plugin') ?>">		<?php wp_nonce_field( 'plugin-upload') ?>		<label class="screen-reader-text" for="pluginzip"><?php _e('Plugin zip file'); ?></label>		<input type="file" id="pluginzip" name="pluginzip" />		<input type="submit" class="button" value="<?php esc_attr_e('Install Now') ?>" />	</form><?php}add_action('install_plugins_new', 'install_new', 10, 1);/** * Display new plugins. * * @since 2.7.0 * * @param string $page */function install_new($page = 1) {	$args = array('browse' => 'new', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_updated', 'install_updated', 10, 1);/** * Display recently updated plugins. * * @since 2.7.0 * * @param string $page */function install_updated($page = 1) {	$args = array('browse' => 'updated', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}/** * Display plugin content based on plugin list. * * @since 2.7.0 * * @param array $plugins List of plugins. * @param string $page * @param int $totalpages Number of pages. */function display_plugins_table($plugins, $page = 1, $totalpages = 1){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array(), 'target' => array()),								'abbr' => array('title' => array()),'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(),'strong' => array(),								'ul' => array(), 'ol' => array(), 'li' => array(), 'p' => array(), 'br' => array());?>	<div class="tablenav">		<div class="alignleft actions">		<?php do_action('install_plugins_table_header'); ?>		</div>		<?php			$url = esc_url($_SERVER['REQUEST_URI']);			if ( ! empty($term) )				$url = add_query_arg('s', $term, $url);			if ( ! empty($type) )				$url = add_query_arg('type', $type, $url);			$page_links = paginate_links( array(				'base' => add_query_arg('paged', '%#%', $url),				'format' => '',				'prev_text' => __('&laquo;'),				'next_text' => __('&raquo;'),				'total' => $totalpages,				'current' => $page			));			if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>";?>		<br class="clear" />	</div>	<table class="widefat" id="install-plugins" cellspacing="0">		<thead>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</thead>		<tfoot>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</tfoot>		<tbody class="plugins">		<?php			if ( empty($plugins) )				echo '<tr><td colspan="5">', __('No plugins match your request.'), '</td></tr>';			foreach ( (array) $plugins as $plugin ){				if ( is_object($plugin) )					$plugin = (array) $plugin;				$title = wp_kses($plugin['name'], $plugins_allowedtags);				//Limit description to 400char, and remove any HTML.				$description = strip_tags($plugin['description']);				if ( strlen($description) > 400 )					$description = mb_substr($description, 0, 400) . '&#8230;';				//remove any trailing entities				$description = preg_replace('/&[^;\s]{0,6}$/', '', $description);				//strip leading/trailing & multiple consecutive lines				$description = trim($description);				$description = preg_replace("|(\r?\n)+|", "\n", $description);				//\n => <br>				$description = nl2br($description);				$version = wp_kses($plugin['version'], $plugins_allowedtags);				$name = strip_tags($title . ' ' . $version);				$author = $plugin['author'];				if ( ! empty($plugin['author']) )					$author = ' <cite>' . sprintf( __('By %s'), $author ) . '.</cite>';				$author = wp_kses($author, $plugins_allowedtags);				$action_links = array();				$action_links[] = '<a href="' . admin_url('plugin-install.php?tab=plugin-information&amp;plugin=' . $plugin['slug'] .									'&amp;TB_iframe=true&amp;width=600&amp;height=550') . '" class="thickbox" title="' .									esc_attr( sprintf( __( 'More information about %s' ), $name ) ) . '">' . __('Details') . '</a>';				if ( current_user_can('install_plugins') || current_user_can('update_plugins') ) {					$status = install_plugin_install_status($plugin);					switch ( $status['status'] ) {						case 'install':							if ( $status['url'] )								$action_links[] = '<a class="install-now" href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Install %s' ), $name ) ) . '">' . __('Install Now') . '</a>';							break;						case 'update_available':							if ( $status['url'] )								$action_links[] = '<a href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Update to version %s' ), $status['version'] ) ) . '">' . sprintf( __('Update Now'), $status['version'] ) . '</a>';							break;						case 'latest_installed':						case 'newer_installed':							$action_links[] = '<span title="' . esc_attr__( 'This plugin is already installed and is up to date' ) . ' ">' . __('Installed') . '</span>';							break;					}				}				$action_links = apply_filters( 'plugin_install_action_links', $action_links, $plugin );			?>			<tr>				<td class="name"><strong><?php echo $title; ?></strong>					<div class="action-links"><?php if ( !empty($action_links) ) echo implode(' | ', $action_links); ?></div>				</td>				<td class="vers"><?php echo $version; ?></td>				<td class="vers">					<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $plugin['num_ratings']), number_format_i18n($plugin['num_ratings'])) ?>">						<div class="star star-rating" style="width: <?php echo esc_attr($plugin['rating']) ?>px"></div>						<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>						<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>						<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>						<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>						<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>					</div>				</td>				<td class="desc"><?php echo $description, $author; ?></td>			</tr>			<?php			}			?>		</tbody>	</table>	<div class="tablenav">		<?php if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?>		<br class="clear" />	</div><?php}add_action('install_plugins_pre_plugin-information', 'install_plugin_information');/** * Determine the status we can perform on a plugin. * * @since 3.0.0 */function install_plugin_install_status($api, $loop = false) {	// this function is called recursivly, $loop prevents futhur loops.	if ( is_array($api) )		$api = (object) $api;	//Default to a "new" plugin	$status = 'install';	$url = false;	//Check to see if this plugin is known to be installed, and has an update awaiting it.	$update_plugins = get_site_transient('update_plugins');	if ( is_object( $update_plugins ) ) {		foreach ( (array)$update_plugins->response as $file => $plugin ) {			if ( $plugin->slug === $api->slug ) {				$status = 'update_available';				$update_file = $file;				$version = $plugin->new_version;				if ( current_user_can('update_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=upgrade-plugin&plugin=' . $update_file), 'upgrade-plugin_' . $update_file);				break;			}		}	}	if ( 'install' == $status ) {		if ( is_dir( WP_PLUGIN_DIR  . '/' . $api->slug ) ) {			$installed_plugin = get_plugins('/' . $api->slug);			if ( empty($installed_plugin) ) {				if ( current_user_can('install_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);			} else {				$key = array_shift( $key = array_keys($installed_plugin) ); //Use the first plugin regardless of the name, Could have issues for multiple-plugins in one directory if they share different version numbers				if ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '=') ){					$status = 'latest_installed';				} elseif ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '<') ) {					$status = 'newer_installed';					$version = $installed_plugin[ $key ]['Version'];				} else {					//If the above update check failed, Then that probably means that the update checker has out-of-date information, force a refresh					if ( ! $loop ) {						delete_site_transient('update_plugins');						wp_update_plugins();						return install_plugin_install_status($api, true);					}				}			}		} else {			// "install" & no directory with that slug			if ( current_user_can('install_plugins') )				$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);		}	}	if ( isset($_GET['from']) )		$url .= '&amp;from=' . urlencode(stripslashes($_GET['from']));	return compact('status', 'url', 'version');}/** * Display plugin information in dialog box form. * * @since 2.7.0 */function install_plugin_information() {	global $tab;	$api = plugins_api('plugin_information', array('slug' => stripslashes( $_REQUEST['plugin'] ) ));	if ( is_wp_error($api) )		wp_die($api);	$plugins_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),								'abbr' => array('title' => array()), 'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),								'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),								'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),								'img' => array('src' => array(), 'class' => array(), 'alt' => array()));	//Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $plugins_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key )		$api->$key = wp_kses($api->$key, $plugins_allowedtags);	$section = isset($_REQUEST['section']) ? stripslashes( $_REQUEST['section'] ) : 'description'; //Default to the Description tab, Do not translate, API returns English.	if ( empty($section) || ! isset($api->sections[ $section ]) )		$section = array_shift( $section_titles = array_keys((array)$api->sections) );	iframe_header( __('Plugin Install') );	echo "<div id='$tab-header'>\n";	echo "<ul id='sidemenu'>\n";	foreach ( (array)$api->sections as $section_name => $content ) {		$title = $section_name;		$title = ucwords(str_replace('_', ' ', $title));		$class = ( $section_name == $section ) ? ' class="current"' : '';		$href = add_query_arg( array('tab' => $tab, 'section' => $section_name) );		$href = esc_url($href);		$san_title = esc_attr(sanitize_title_with_dashes($title));		echo "\t<li><a name='$san_title' target='' href='$href'$class>$title</a></li>\n";	}	echo "</ul>\n";	echo "</div>\n";	?>	<div class="alignright fyi">		<?php if ( ! empty($api->download_link) && ( current_user_can('install_plugins') || current_user_can('update_plugins') ) ) : ?>		<p class="action-button">		<?php		$status = install_plugin_install_status($api);		switch ( $status['status'] ) {			case 'install':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Now') . '</a>';				break;			case 'update_available':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Update Now') .'</a>';				break;			case 'newer_installed':				echo '<a>' . sprintf(__('Newer Version (%s) Installed'), $status['version']) . '</a>';				break;			case 'latest_installed':				echo '<a>' . __('Latest Version Installed') . '</a>';				break;		}		?>		</p>		<?php endif; ?>		<h2 class="mainheader"><?php /* translators: For Your Information */ _e('FYI') ?></h2>		<ul><?php if ( ! empty($api->version) ) : ?>			<li><strong><?php _e('Version:') ?></strong> <?php echo $api->version ?></li><?php endif; if ( ! empty($api->author) ) : ?>			<li><strong><?php _e('Author:') ?></strong> <?php echo links_add_target($api->author, '_blank') ?></li><?php endif; if ( ! empty($api->last_updated) ) : ?>			<li><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $api->last_updated ?>"><?php							printf( __('%s ago'), human_time_diff(strtotime($api->last_updated)) ) ?></span></li><?php endif; if ( ! empty($api->requires) ) : ?>			<li><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $api->requires) ?></li><?php endif; if ( ! empty($api->tested) ) : ?>			<li><strong><?php _e('Compatible up to:') ?></strong> <?php echo $api->tested ?></li><?php endif; if ( ! empty($api->downloaded) ) : ?>			<li><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $api->downloaded), number_format_i18n($api->downloaded)) ?></li><?php endif; if ( ! empty($api->slug) && empty($api->external) ) : ?>			<li><a target="_blank" href="http://wordpress.org/extend/plugins/<?php echo $api->slug ?>/"><?php _e('WordPress.org Plugin Page &#187;') ?></a></li><?php endif; if ( ! empty($api->homepage) ) : ?>			<li><a target="_blank" href="<?php echo $api->homepage ?>"><?php _e('Plugin Homepage  &#187;') ?></a></li><?php endif; ?>		</ul>		<?php if ( ! empty($api->rating) ) : ?>		<h2><?php _e('Average Rating') ?></h2>		<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?>">			<div class="star star-rating" style="width: <?php echo esc_attr($api->rating) ?>px"></div>			<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>			<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>			<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>			<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>			<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>		</div>		<small><?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?></small>		<?php endif; ?>	</div>	<div id="section-holder" class="wrap">	<?php		if ( !empty($api->tested) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->tested)), $api->tested, '>') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';		else if ( !empty($api->requires) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->requires)), $api->requires, '<') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been marked as compatible</strong> with your version of WordPress.') . '</p></div>';		foreach ( (array)$api->sections as $section_name => $content ) {			$title = $section_name;			$title[0] = strtoupper($title[0]);			$title = str_replace('_', ' ', $title);			$content = links_add_base_url($content, 'http://wordpress.org/extend/plugins/' . $api->slug . '/');			$content = links_add_target($content, '_blank');			$san_title = esc_attr(sanitize_title_with_dashes($title));			$display = ( $section_name == $section ) ? 'block' : 'none';			echo "\t<div id='section-{$san_title}' class='section' style='display: {$display};'>\n";			echo "\t\t<h2 class='long-header'>$title</h2>";			echo $content;			echo "\t</div>\n";		}	echo "</div>\n";	iframe_footer();	exit;}
<?php/** * WordPress Administration Bootstrap * * @package WordPress * @subpackage Administration *//** * In WordPress Administration Panels * * @since unknown */if ( !defined('WP_ADMIN') )	define('WP_ADMIN', TRUE);if ( isset($_GET['import']) && !defined('WP_LOAD_IMPORTERS') )	define('WP_LOAD_IMPORTERS', true);require_once(dirname(dirname(__FILE__)) . '/wp-load.php');if ( get_option('db_upgraded') ) {	$wp_rewrite->flush_rules();	update_option( 'db_upgraded',  false );	/**	 * Runs on the next page load after successful upgrade	 *	 * @since 2.8	 */	do_action('after_db_upgrade');} elseif ( get_option('db_version') != $wp_db_version ) {	if ( !is_multisite() ) {		wp_redirect(admin_url('upgrade.php?_wp_http_referer=' . urlencode(stripslashes($_SERVER['REQUEST_URI']))));		exit;	} elseif ( apply_filters( 'do_mu_upgrade', true ) ) {		/**		 * On really small MU installs run the upgrader every time,		 * else run it less often to reduce load.		 *		 * @since 2.8.4b		 */		$c = get_blog_count();		if ( $c <= 50 || ( $c > 50 && mt_rand( 0, (int)( $c / 50 ) ) == 1 ) ) {			require_once( ABSPATH . WPINC . '/http.php' );			$response = wp_remote_get( admin_url( 'upgrade.php?step=1' ), array( 'timeout' => 120, 'httpversion' => '1.1' ) );			do_action( 'after_mu_upgrade', $response );			unset($response);		}		unset($c);	}}require_once(ABSPATH . 'wp-admin/includes/admin.php');auth_redirect();nocache_headers();update_category_cache();// Schedule trash collectionif ( !wp_next_scheduled('wp_scheduled_delete') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'daily', 'wp_scheduled_delete');set_screen_options();$date_format = get_option('date_format');$time_format = get_option('time_format');wp_reset_vars(array('profile', 'redirect', 'redirect_url', 'a', 'text', 'trackback', 'pingback'));wp_enqueue_script( 'common' );wp_enqueue_script( 'jquery-color' );$editing = false;if ( isset($_GET['page']) ) {	$plugin_page = stripslashes($_GET['page']);	$plugin_page = plugin_basename($plugin_page);}if ( isset($_GET['post_type']) )	$typenow = sanitize_key($_GET['post_type']);else	$typenow = '';if ( isset($_GET['taxonomy']) )	$taxnow = sanitize_key($_GET['taxonomy']);else	$taxnow = '';require(ABSPATH . 'wp-admin/menu.php');if ( current_user_can( 'manage_options' ) )	@ini_set( 'memory_limit', apply_filters( 'admin_memory_limit', '256M' ) );do_action('admin_init');if ( isset($plugin_page) ) {	if ( !empty($typenow) )		$the_parent = $pagenow . '?post_type=' . $typenow;	else		$the_parent = $pagenow;	if ( ! $page_hook = get_plugin_page_hook($plugin_page, $the_parent) ) {		$page_hook = get_plugin_page_hook($plugin_page, $plugin_page);		// backwards compatibility for plugins using add_management_page		if ( empty( $page_hook ) && 'edit.php' == $pagenow && '' != get_plugin_page_hook($plugin_page, 'tools.php') ) {			// There could be plugin specific params on the URL, so we need the whole query string			if ( !empty($_SERVER[ 'QUERY_STRING' ]) )				$query_string = $_SERVER[ 'QUERY_STRING' ];			else				$query_string = 'page=' . $plugin_page;			wp_redirect( 'tools.php?' . $query_string );			exit;		}	}	unset($the_parent);}$hook_suffix = '';if ( isset($page_hook) )	$hook_suffix = $page_hook;else if ( isset($plugin_page) )	$hook_suffix = $plugin_page;else if ( isset($pagenow) )	$hook_suffix = $pagenow;set_current_screen();// Handle plugin admin pages.if ( isset($plugin_page) ) {	if ( $page_hook ) {		do_action('load-' . $page_hook);		if (! isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		do_action($page_hook);	} else {		if ( validate_file($plugin_page) )			wp_die(__('Invalid plugin page'));		if ( !( file_exists(WP_PLUGIN_DIR . "/$plugin_page") && is_file(WP_PLUGIN_DIR . "/$plugin_page") ) && !( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") && is_file(WPMU_PLUGIN_DIR . "/$plugin_page") ) )			wp_die(sprintf(__('Cannot load %s.'), htmlentities($plugin_page)));		do_action('load-' . $plugin_page);		if ( !isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		if ( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") )			include(WPMU_PLUGIN_DIR . "/$plugin_page");		else			include(ABSPATH . PLUGINDIR . "/$plugin_page");	}	include(ABSPATH . 'wp-admin/admin-footer.php');	exit();} else if (isset($_GET['import'])) {	$importer = $_GET['import'];	if ( ! current_user_can('import') )		wp_die(__('You are not allowed to import.'));	if ( validate_file($importer) )		wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );	// Allow plugins to define importers as well	if ( !isset($wp_importers) || !isset($wp_importers[$importer]) || ! is_callable($wp_importers[$importer][2])) {		if (! file_exists(ABSPATH . "wp-admin/import/$importer.php"))			wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );		include(ABSPATH . "wp-admin/import/$importer.php");	}	$parent_file = 'tools.php';	$submenu_file = 'import.php';	$title = __('Import');	if (! isset($_GET['noheader']))		require_once(ABSPATH . 'wp-admin/admin-header.php');	require_once(ABSPATH . 'wp-admin/includes/upgrade.php');	define('WP_IMPORTING', true);	if ( is_multisite() )		kses_init_filters();  // Always filter imported data with kses.	call_user_func($wp_importers[$importer][2]);	include(ABSPATH . 'wp-admin/admin-footer.php');	// Make sure rules are flushed	global $wp_rewrite;	$wp_rewrite->flush_rules(false);	exit();} else {	do_action("load-$pagenow");}if ( !empty($_REQUEST['action']) )	do_action('admin_action_' . $_REQUEST['action']);?>
<?php/** * Install plugin administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_plugins') )	wp_die(__('You do not have sufficient permissions to install plugins on this site.'));include(ABSPATH . 'wp-admin/includes/plugin-install.php');$title = __('Install Plugins');$parent_file = 'plugins.php';wp_reset_vars( array('tab', 'paged') );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Plugin Installer');$tabs['popular']  = _x('Popular','Plugin Installer');$tabs['new']      = _x('Newest','Plugin Installer');$tabs['updated']  = _x('Recently Updated','Plugin Installer');$nonmenu_tabs = array('plugin-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_plugins_tabs', $tabs );$nonmenu_tabs = apply_filters('install_plugins_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;wp_enqueue_style( 'plugin-install' );wp_enqueue_script( 'plugin-install' );if ( 'plugin-information' != $tab )	add_thickbox();$body_id = $tab;do_action('install_plugins_pre_' . $tab); //Used to override the general interface, Eg, install or plugin information.add_contextual_help($current_screen,	'<p>' . sprintf(__('Plugins hook into WordPress to extend its functionality with custom features. Plugins are developed independently from WordPress core by thousands of developers all over the world. All plugins in the official <a href="%s" target="_blank">WordPress.org Plugin Directory</a> are compatible with the WordPress GPL v2 license. You can find new plugins to install by searching or browsing the Directory right here in your own Plugins section.'), 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('If you know what you&#8217;re looking for, Search is your best bet. The Search screen has options to search the WordPress.org Plugin Directory for a particular Term, Author, or Tag. You can also search the directory by selecting a popular tags. Tags in larger type mean more plugins have been labeled with that tag.') . '</p>' .	'<p>' . __('If you just want to get an idea of what&#8217;s available, you can browse Featured, Popular, Newest, and Recently Updated plugins by using the links in the upper left of the screen. These sections rotate regularly.') . '</p>' .	'<p>' . __('If you want to install a plugin that you&#8217;ve downloaded elsewhere, click Upload in the upper left. You will be prompted to upload the .zip package, and once uploaded, you can activate the new plugin.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Add_New_SubPanel" target="_blank">Documentation on Installing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('plugin-install.php?tab=' . $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_plugins_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Taxonomy Administration API. * * @package WordPress * @subpackage Administration *///// Category///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @return unknown */function category_exists($cat_name, $parent = 0) {	$id = term_exists($cat_name, 'category', $parent);	if ( is_array($id) )		$id = $id['term_id'];	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_category_to_edit( $id ) {	$category = get_category( $id, OBJECT, 'edit' );	return $category;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @param unknown_type $parent * @return unknown */function wp_create_category( $cat_name, $parent = 0 ) {	if ( $id = category_exists($cat_name, $parent) )		return $id;	return wp_insert_category( array('cat_name' => $cat_name, 'category_parent' => $parent) );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $categories * @param unknown_type $post_id * @return unknown */function wp_create_categories($categories, $post_id = '') {	$cat_ids = array ();	foreach ($categories as $category) {		if ($id = category_exists($category))			$cat_ids[] = $id;		else			if ($id = wp_create_category($category))				$cat_ids[] = $id;	}	if ( $post_id )		wp_set_post_categories($post_id, $cat_ids);	return $cat_ids;}/** * Deletes one existing category. * * @since 2.0.0 * * @param int $cat_ID * @return mixed Returns true if completes delete action; false if term doesnt exist; Zero on attempted deletion of default Category; WP_Error object is also a possibility. */function wp_delete_category($cat_ID) {	$cat_ID = (int) $cat_ID;	$default = get_option('default_category');	// Don't delete the default cat	if ( $cat_ID == $default )		return 0;	return wp_delete_term($cat_ID, 'category', array('default' => $default));}/** * Updates an existing Category or creates a new Category. * * @since 2.0.0 * * @param mixed $catarr See defaults below. Set 'cat_ID' to a non-zero value to update an existing category. The 'taxonomy' key was added in 3.0.0. * @param bool $wp_error Optional, since 2.5.0. Set this to true if the caller handles WP_Error return values. * @return int|object The ID number of the new or updated Category on success.  Zero or a WP_Error on failure, depending on param $wp_error. */function wp_insert_category($catarr, $wp_error = false) {	$cat_defaults = array('cat_ID' => 0, 'taxonomy' => 'category', 'cat_name' => '', 'category_description' => '', 'category_nicename' => '', 'category_parent' => '');	$catarr = wp_parse_args($catarr, $cat_defaults);	extract($catarr, EXTR_SKIP);	if ( trim( $cat_name ) == '' ) {		if ( ! $wp_error )			return 0;		else			return new WP_Error( 'cat_name', __('You did not enter a category name.') );	}	$cat_ID = (int) $cat_ID;	// Are we updating or creating?	if ( !empty ($cat_ID) )		$update = true;	else		$update = false;	$name = $cat_name;	$description = $category_description;	$slug = $category_nicename;	$parent = $category_parent;	$parent = (int) $parent;	if ( $parent < 0 )		$parent = 0;	if ( empty($parent) || !category_exists( $parent ) || ($cat_ID && cat_is_ancestor_of($cat_ID, $parent) ) )		$parent = 0;	$args = compact('name', 'slug', 'parent', 'description');	if ( $update )		$cat_ID = wp_update_term($cat_ID, $taxonomy, $args);	else		$cat_ID = wp_insert_term($cat_name, $taxonomy, $args);	if ( is_wp_error($cat_ID) ) {		if ( $wp_error )			return $cat_ID;		else			return 0;	}	return $cat_ID['term_id'];}/** * Aliases wp_insert_category() with minimal args. * * If you want to update only some fields of an existing category, call this * function with only the new values set inside $catarr. * * @since 2.0.0 * * @param array $catarr The 'cat_ID' value is required.  All other keys are optional. * @return int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure. */function wp_update_category($catarr) {	$cat_ID = (int) $catarr['cat_ID'];	if ( isset($catarr['category_parent']) && ($cat_ID == $catarr['category_parent']) )		return false;	// First, get all of the original fields	$category = get_category($cat_ID, ARRAY_A);	// Escape data pulled from DB.	$category = add_magic_quotes($category);	// Merge old and new fields with new fields overwriting old ones.	$catarr = array_merge($category, $catarr);	return wp_insert_category($catarr);}//// Tags///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_tags_to_edit( $post_id, $taxonomy = 'post_tag' ) {	return get_terms_to_edit( $post_id, $taxonomy);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_terms_to_edit( $post_id, $taxonomy = 'post_tag' ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	$tags = wp_get_post_terms($post_id, $taxonomy, array());	if ( !$tags )		return false;	if ( is_wp_error($tags) )		return $tags;	foreach ( $tags as $tag )		$tag_names[] = $tag->name;	$tags_to_edit = join( ',', $tag_names );	$tags_to_edit = esc_attr( $tags_to_edit );	$tags_to_edit = apply_filters( 'terms_to_edit', $tags_to_edit, $taxonomy );	return $tags_to_edit;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function tag_exists($tag_name) {	return term_exists($tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_tag($tag_name) {	return wp_create_term( $tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_term($tag_name, $taxonomy = 'post_tag') {	if ( $id = term_exists($tag_name, $taxonomy) )		return $id;	return wp_insert_term($tag_name, $taxonomy);}
<?php/** * Update Core administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('update_plugins') )	wp_die(__('You do not have sufficient permissions to update plugins for this site.'));function list_core_update( $update ) {	global $wp_local_package, $wpdb;	$version_string = ('en_US' == $update->locale && 'en_US' == get_locale() ) ?			$update->current : sprintf("%s&ndash;<strong>%s</strong>", $update->current, $update->locale);	$current = false;	if ( !isset($update->response) || 'latest' == $update->response )		$current = true;	$submit = __('Update Automatically');	$form_action = 'update-core.php?action=do-core-upgrade';	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$show_buttons = true;	if ( 'development' == $update->response ) {		$message = __('You are using a development version of WordPress.  You can update to the latest nightly build automatically or download the nightly build and install it manually:');		$download = __('Download nightly build');	} else {		if ( $current ) {			$message = sprintf(__('You have the latest version of WordPress. You do not need to update. However, if you want to re-install version %s, you can do so automatically or download the package and re-install manually:'), $version_string);			$submit = __('Re-install Automatically');			$form_action = 'update-core.php?action=do-core-reinstall';		} else {			$php_compat     = version_compare( $php_version, $update->php_version, '>=' );			$mysql_compat   = version_compare( $mysql_version, $update->mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );			if ( !$mysql_compat && !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $update->current, $update->php_version, $update->mysql_version, $php_version, $mysql_version );			elseif ( !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $update->current, $update->php_version, $php_version );			elseif ( !$mysql_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $update->current, $update->mysql_version, $mysql_version );			else				$message = 	sprintf(__('You can update to <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> automatically or download the package and install it manually:'), $version_string);			if ( !$mysql_compat || !$php_compat )				$show_buttons = false;		}		$download = sprintf(__('Download %s'), $version_string);	}	echo '<p>';	echo $message;	echo '</p>';	echo '<form method="post" action="' . $form_action . '" name="upgrade" class="upgrade">';	wp_nonce_field('upgrade-core');	echo '<p>';	echo '<input name="version" value="'. esc_attr($update->current) .'" type="hidden"/>';	echo '<input name="locale" value="'. esc_attr($update->locale) .'" type="hidden"/>';	if ( $show_buttons ) {		echo '<input id="upgrade" class="button" type="submit" value="' . esc_attr($submit) . '" name="upgrade" />&nbsp;';		echo '<a href="' . esc_url($update->package) . '" class="button">' . $download . '</a>&nbsp;';	}	if ( 'en_US' != $update->locale )		if ( !isset( $update->dismissed ) || !$update->dismissed )			echo '<input id="dismiss" class="button" type="submit" value="' . esc_attr__('Hide this update') . '" name="dismiss" />';		else			echo '<input id="undismiss" class="button" type="submit" value="' . esc_attr__('Bring back this update') . '" name="undismiss" />';	echo '</p>';	if ( 'en_US' != $update->locale && ( !isset($wp_local_package) || $wp_local_package != $update->locale ) )	    echo '<p class="hint">'.__('This localized version contains both the translation and various other localization fixes. You can skip upgrading if you want to keep your current translation.').'</p>';	else if ( 'en_US' == $update->locale && get_locale() != 'en_US' ) {	    echo '<p class="hint">'.sprintf( __('You are about to install WordPress %s <strong>in English.</strong> There is a chance this upgrade will break your translation. You may prefer to wait for the localized version to be released.'), $update->current ).'</p>';	}	echo '</form>';}function dismissed_updates() {	$dismissed = get_core_updates( array( 'dismissed' => true, 'available' => false ) );	if ( $dismissed ) {		$show_text = esc_js(__('Show hidden updates'));		$hide_text = esc_js(__('Hide hidden updates'));	?>	<script type="text/javascript">		jQuery(function($) {			$('dismissed-updates').show();			$('#show-dismissed').toggle(function(){$(this).text('<?php echo $hide_text; ?>');}, function() {$(this).text('<?php echo $show_text; ?>')});			$('#show-dismissed').click(function() { $('#dismissed-updates').toggle('slow');});		});	</script>	<?php		echo '<p class="hide-if-no-js"><a id="show-dismissed" href="#">'.__('Show hidden updates').'</a></p>';		echo '<ul id="dismissed-updates" class="core-updates dismissed">';		foreach( (array) $dismissed as $update) {			echo '<li>';			list_core_update( $update );			echo '</li>';		}		echo '</ul>';	}}/** * Display upgrade WordPress for downloading latest or upgrading automatically form. * * @since 2.7 * * @return null */function core_upgrade_preamble() {	global $upgrade_error;	$updates = get_core_updates();?>	<div class="wrap">	<?php screen_icon('tools'); ?>	<h2><?php _e('WordPress Updates'); ?></h2><?php	if ( $upgrade_error ) {		echo '<div class="error"><p>';		_e('Please select one or more plugins to upgrade.');		echo '</p></div>';	}	if ( !isset($updates[0]->response) || 'latest' == $updates[0]->response ) {		echo '<h3>';		_e('You have the latest version of WordPress.');		echo '</h3>';	} else {		echo '<div class="updated"><p>';		_e('<strong>Important:</strong> before updating, please <a href="http://codex.wordpress.org/WordPress_Backups">backup your database and files</a>. For help with updates, visit the <a href="http://codex.wordpress.org/Updating_WordPress">Updating WordPress</a> Codex page.');		echo '</p></div>';		echo '<h3 class="response">';		_e( 'An updated version of WordPress is available.' );		echo '</h3>';	}	echo '<ul class="core-updates">';	$alternate = true;	foreach( (array) $updates as $update ) {		$class = $alternate? ' class="alternate"' : '';		$alternate = !$alternate;		echo "<li $class>";		list_core_update( $update );		echo '</li>';	}	echo '</ul>';	echo '<p>' . __( 'While your site is being updated, it will be in maintenance mode. As soon as your updates are complete, your site will return to normal.' ) . '</p>';	dismissed_updates();	list_plugin_updates();	list_theme_updates();	do_action('core_upgrade_preamble');	echo '</div>';}function list_plugin_updates() {	global $wp_version;	$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);	require_once(ABSPATH . 'wp-admin/includes/plugin-install.php');	$plugins = get_plugin_updates();	if ( empty( $plugins ) ) {		echo '<h3>' . __( 'Plugins' ) . '</h3>';		echo '<p>' . __( 'Your plugins are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-plugin-upgrade';	$core_updates = get_core_updates();	if ( !isset($core_updates[0]->response) || 'latest' == $core_updates[0]->response || 'development' == $core_updates[0]->response || version_compare( $core_updates[0]->current, $cur_wp_version, '=') )		$core_update_version = false;	else		$core_update_version = $core_updates[0]->current;	?><h3><?php _e( 'Plugins' ); ?></h3><p><?php _e( 'The following plugins have new versions available. Check the ones you want to update and then click &#8220;Update Plugins&#8221;.' ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-plugins" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-plugins" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $plugins as $plugin_file => $plugin_data) {		$info = plugins_api('plugin_information', array('slug' => $plugin_data->update->slug ));		// Get plugin compat for running version of WordPress.		if ( isset($info->tested) && version_compare($info->tested, $cur_wp_version, '>=') ) {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: 100%% (according to its author)'), $cur_wp_version);		} elseif ( isset($info->compatibility[$cur_wp_version][$plugin_data->update->new_version]) ) {			$compat = $info->compatibility[$cur_wp_version][$plugin_data->update->new_version];			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $cur_wp_version, $compat[0], $compat[2], $compat[1]);		} else {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $cur_wp_version);		}		// Get plugin compat for updated version of WordPress.		if ( $core_update_version ) {			if ( isset($info->compatibility[$core_update_version][$plugin_data->update->new_version]) ) {				$update_compat = $info->compatibility[$core_update_version][$plugin_data->update->new_version];				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $core_update_version, $update_compat[0], $update_compat[2], $update_compat[1]);			} else {				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $core_update_version);			}		}		// Get the upgrade notice for the new plugin version.		if ( isset($plugin_data->update->upgrade_notice) ) {			$upgrade_notice = '<br />' . strip_tags($plugin_data->update->upgrade_notice);		} else {			$upgrade_notice = '';		}		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' /></th>		<td class='plugin-title'><strong>{$plugin_data->Name}</strong>" . sprintf(__('You have version %1$s installed. Update to %2$s.'), $plugin_data->Version, $plugin_data->update->new_version) . $compat . $upgrade_notice . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-plugins-2" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p></form><?php}function list_theme_updates() {	$themes = get_theme_updates();	if ( empty( $themes ) ) {		echo '<h3>' . __( 'Themes' ) . '</h3>';		echo '<p>' . __( 'Your themes are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-theme-upgrade';?><h3><?php _e( 'Themes' ); ?></h3><p><?php _e( 'The following themes have new versions available. Check the ones you want to update and then click &#8220;Update Themes&#8221;.' ); ?></p><p><?php printf( __('<strong>Please Note:</strong> Any customizations you have made to the Themes files will be lost. Please consider using <a href="%s">child themes</a> for modifications.'), _x('http://codex.wordpress.org/Child_Themes', 'Link used in suggestion to use child themes in GUU') ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-themes" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-themes" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-themes-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $themes as $stylesheet => $theme_data) {		$screenshot = $theme_data->{'Theme Root URI'} . '/' . $stylesheet . '/' . $theme_data->Screenshot;		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($stylesheet) . "' /></th>		<td class='plugin-title'><img src='$screenshot' width='64' height='64' style='float:left; padding: 5px' /><strong>{$theme_data->Name}</strong>" .  sprintf(__('You have version %1$s installed. Update to %2$s.'), $theme_data->Version, $theme_data->update['new_version']) . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-themes-2" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p></form><?php}/** * Upgrade WordPress core display. * * @since 2.7 * * @return null */function do_core_upgrade( $reinstall = false ) {	global $wp_filesystem;	if ( $reinstall )		$url = 'update-core.php?action=do-core-reinstall';	else		$url = 'update-core.php?action=do-core-upgrade';	$url = wp_nonce_url($url, 'upgrade-core');	if ( false === ($credentials = request_filesystem_credentials($url, '', false, ABSPATH)) )		return;	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	if ( ! WP_Filesystem($credentials, ABSPATH) ) {		request_filesystem_credentials($url, '', true, ABSPATH); //Failed to connect, Error and request again		return;	}?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e('Update WordPress'); ?></h2><?php	if ( $wp_filesystem->errors->get_error_code() ) {		foreach ( $wp_filesystem->errors->get_error_messages() as $message )			show_message($message);		echo '</div>';		return;	}	if ( $reinstall )		$update->response = 'reinstall';	$result = wp_update_core($update, 'show_message');	if ( is_wp_error($result) ) {		show_message($result);		if ('up_to_date' != $result->get_error_code() )			show_message( __('Installation Failed') );	} else {		show_message( __('WordPress updated successfully') );		show_message( '<strong>' . __('Actions:') . '</strong> <a href="' . esc_url( admin_url() ) . '">' . __('Go to Dashboard') . '</a>' );	}	echo '</div>';}function do_dismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	dismiss_core_update( $update );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function do_undismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	undismiss_core_update( $version, $locale );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function no_update_actions($actions) {	return '';}$action = isset($_GET['action']) ? $_GET['action'] : 'upgrade-core';$upgrade_error = false;if ( 'do-plugin-upgrade' == $action && !isset($_GET['plugins']) && !isset($_POST['checked']) ) {	$upgrade_error = true;	$action = 'upgrade-core';}$title = __('WordPress Updates');$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen lets you update to the latest version of WordPress as well as update your themes and plugins from the WordPress.org repository. When updates are available, the number of available updates will appear in a bubble on the left hand menu as a notification. It is very important to keep your WordPress installation up to date for security reasons, so when you see a number appear, make sure you take the time to update, which is an easy process.') . '</p>' .	'<p>' . __('Updating your WordPress installation is a simple one-click procedure; just click on the Update button when it says a new version is available.') . '</p>' .	'<p>' . __('To upgrade themes or plugins from this screen, use the checkboxes to make your selection and click on the appropriate Update button. Check the box at the top of the Themes or Plugins section to select all and update them all at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_Updates_SubPanel" target="_blank">Documentation on Updating WordPress</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( 'upgrade-core' == $action ) {	wp_version_check();	require_once('./admin-header.php');	core_upgrade_preamble();} elseif ( 'do-core-upgrade' == $action || 'do-core-reinstall' == $action ) {	check_admin_referer('upgrade-core');	// do the (un)dismiss actions before headers,	// so that they can redirect	if ( isset( $_POST['dismiss'] ) )		do_dismiss_core_update();	elseif ( isset( $_POST['undismiss'] ) )		do_undismiss_core_update();	require_once('./admin-header.php');	if ( 'do-core-reinstall' == $action )		$reinstall = true;	else		$reinstall = false;	if ( isset( $_POST['upgrade'] ) )		do_core_upgrade($reinstall);} elseif ( 'do-plugin-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['plugins'] ) ) {		$plugins = explode( ',', $_GET['plugins'] );	} elseif ( isset( $_POST['checked'] ) ) {		$plugins = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected&plugins=' . urlencode(implode(',', $plugins));	$url = wp_nonce_url($url, 'bulk-update-plugins');	$title = __('Update Plugins');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('plugins');	echo '<h2>' . esc_html__('Update Plugins') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';} elseif ( 'do-theme-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['themes'] ) ) {		$themes = explode( ',', $_GET['themes'] );	} elseif ( isset( $_POST['checked'] ) ) {		$themes = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected-themes&themes=' . urlencode(implode(',', $themes));	$url = wp_nonce_url($url, 'bulk-update-themes');	$title = __('Update Themes');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('themes');	echo '<h2>' . esc_html__('Update Themes') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';}include('./admin-footer.php');
<?php/** * Import WordPress Administration Panel * * @package WordPress * @subpackage Administration */define('WP_LOAD_IMPORTERS', true);/** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('import') )	wp_die(__('You do not have sufficient permissions to import content in this site.'));$title = __('Import');add_contextual_help($current_screen,	'<p>' . __('This screen lists links to plugins to import data from blogging/content management platforms. Choose the platform you want to import from, and click Install Now when you are prompted in the popup window. If your platform is not listed, click the link to search the plugin directory for other importer plugins to see if there is one for your platform.') . '</p>' .	'<p>' . __('In previous versions of WordPress, all the importers were built-in, but they have been turned into plugins as of version 3.0 since most people only use them once or infrequently.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Import_SubPanel" target="_blank">Import Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$popular_importers = array();if ( current_user_can('install_plugins') )	$popular_importers = array(		'blogger' => array( __('Blogger'), __('Install the Blogger importer to import posts, comments, and users from a Blogger blog.'), 'install' ),		'wpcat2tag' => array(__('Categories and Tags Converter'), __('Install the category/tag converter to convert existing categories to tags or tags to categories, selectively.'), 'install', 'wp-cat2tag' ),		'livejournal' => array( __( 'LiveJournal' ), __( 'Install the LiveJournal importer to import posts from LiveJournal using their API.' ), 'install' ),		'movabletype' => array( __('Movable Type and TypePad'), __('Install the Movable Type importer to import posts and comments from a Movable Type or TypePad blog.'), 'install', 'mt' ),		'opml' => array( __('Blogroll'), __('Install the blogroll importer to import links in OPML format.'), 'install' ),		'rss' => array( __('RSS'), __('Install the RSS importer to import posts from an RSS feed.'), 'install' ),		'wordpress' => array( 'WordPress', __('Install the WordPress importer to import posts, pages, comments, custom fields, categories, and tags from a WordPress export file.'), 'install' )	);if ( ! empty( $_GET['invalid'] ) && !empty($popular_importers[$_GET['invalid']][3]) ) {	wp_redirect("import.php?import=" . $popular_importers[$_GET['invalid']][3]);	exit;}add_thickbox();require_once ('admin-header.php');$parent_file = 'tools.php';?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( ! empty( $_GET['invalid'] ) ) : ?>	<div class="error"><p><strong><?php _e('ERROR:')?></strong> <?php printf( __('The <strong>%s</strong> importer is invalid or is not installed.'), esc_html( $_GET['invalid'] ) ); ?></p></div><?php endif; ?><p><?php _e('If you have posts or comments in another system, WordPress can import those into this site. To get started, choose a system to import from below:'); ?></p><?php// Load all importers so that they can register.$import_loc = 'wp-admin/import';$import_root = ABSPATH.$import_loc;$imports_dir = @ opendir($import_root);if ($imports_dir) {	while (($file = readdir($imports_dir)) !== false) {		if ($file{0} == '.') {			continue;		} elseif (substr($file, -4) == '.php') {			require_once($import_root . '/' . $file);		}	}}@closedir($imports_dir);$importers = get_importers();// If a popular importer is not registered, create a dummy registration that links to the plugin installer.foreach ( $popular_importers as $pop_importer => $pop_data ) {	if ( isset($importers[$pop_importer] ) )		continue;	if ( isset( $pop_data[3] ) && isset( $importers[ $pop_data[3] ] ) )		continue;	$importers[$pop_importer] = $popular_importers[$pop_importer];}if (empty ($importers)) {	echo '<p>'.__('No importers are available.').'</p>'; // TODO: make more helpful} else {	uasort($importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));?><table class="widefat" cellspacing="0"><?php	$style = '';	foreach ($importers as $id => $data) {		$style = ('class="alternate"' == $style || 'class="alternate active"' == $style) ? '' : 'alternate';		$action = '';		if ( 'install' == $data[2] ) {			$plugin_slug = $id . '-importer';			if ( file_exists( WP_PLUGIN_DIR . '/' . $plugin_slug ) ) {				// Looks like Importer is installed, But not active				$plugins = get_plugins( '/' . $plugin_slug );				if ( !empty($plugins) ) {					$keys = array_keys($plugins);					$plugin_file = $plugin_slug . '/' . $keys[0];					$action = '<a href="' . esc_url(wp_nonce_url(admin_url('plugins.php?action=activate&plugin=' . $plugin_file . '&from=import'), 'activate-plugin_' . $plugin_file)) .											'"title="' . esc_attr__('Activate importer') . '"">' . $data[0] . '</a>';				}			}			if ( empty($action) )				$action = '<a href="' . esc_url(admin_url('plugin-install.php?tab=plugin-information&plugin=' . $plugin_slug .										'&from=import&TB_iframe=true&width=600&height=550')) . '" class="thickbox" title="' .										esc_attr__('Install importer') . '">' . $data[0] . '</a>';		} else {			$action = "<a href='" . esc_url("admin.php?import=$id") . "' title='" . esc_attr( wptexturize(strip_tags($data[1])) ) ."'>{$data[0]}</a>";		}		if ($style != '')			$style = 'class="'.$style.'"';		echo "			<tr $style>				<td class='import-system row-title'>$action</td>				<td class='desc'>{$data[1]}</td>			</tr>";	}?></table><?php}if ( current_user_can('install_plugins') )	echo '<p>' . sprintf('If the importer you need is not listed, <a href="%s">search the plugins directory</a> to see if an importer is available.', esc_url(admin_url('plugin-install.php?tab=search&type=tag&s=importer')) ) . '</p>';?></div><?phpinclude ('admin-footer.php');?>
<?php/** * Main WordPress API * * @package WordPress *//** * Converts MySQL DATETIME field to user specified date format. * * If $dateformatstring has 'G' value, then gmmktime() function will be used to * make the time. If $dateformatstring is set to 'U', then mktime() function * will be used to make the time. * * The $translate will only be used, if it is set to true and it is by default * and if the $wp_locale object has the month and weekday set. * * @since 0.71 * * @param string $dateformatstring Either 'G', 'U', or php date format. * @param string $mysqlstring Time from mysql DATETIME field. * @param bool $translate Optional. Default is true. Will switch format to locale. * @return string Date formated by $dateformatstring or locale (if available). */function mysql2date( $dateformatstring, $mysqlstring, $translate = true ) {	$m = $mysqlstring;	if ( empty( $m ) )		return false;	if ( 'G' == $dateformatstring ) {		return strtotime( $m . ' +0000' );	}	$i = strtotime( $m );	if ( 'U' == $dateformatstring )		return $i;	if ( $translate)	    return date_i18n( $dateformatstring, $i );	else	    return date( $dateformatstring, $i );}/** * Retrieve the current time based on specified type. * * The 'mysql' type will return the time in the format for MySQL DATETIME field. * The 'timestamp' type will return the current timestamp. * * If $gmt is set to either '1' or 'true', then both types will use GMT time. * if $gmt is false, the output is adjusted with the GMT offset in the WordPress option. * * @since 1.0.0 * * @param string $type Either 'mysql' or 'timestamp'. * @param int|bool $gmt Optional. Whether to use GMT timezone. Default is false. * @return int|string String if $type is 'gmt', int if $type is 'timestamp'. */function current_time( $type, $gmt = 0 ) {	switch ( $type ) {		case 'mysql':			return ( $gmt ) ? gmdate( 'Y-m-d H:i:s' ) : gmdate( 'Y-m-d H:i:s', ( time() + ( get_option( 'gmt_offset' ) * 3600 ) ) );			break;		case 'timestamp':			return ( $gmt ) ? time() : time() + ( get_option( 'gmt_offset' ) * 3600 );			break;	}}/** * Retrieve the date in localized format, based on timestamp. * * If the locale specifies the locale month and weekday, then the locale will * take over the format for the date. If it isn't, then the date format string * will be used instead. * * @since 0.71 * * @param string $dateformatstring Format to display the date. * @param int $unixtimestamp Optional. Unix timestamp. * @param bool $gmt Optional, default is false. Whether to convert to GMT for time. * @return string The date, translated if locale specifies it. */function date_i18n( $dateformatstring, $unixtimestamp = false, $gmt = false ) {	global $wp_locale;	$i = $unixtimestamp;	// Sanity check for PHP 5.1.0-	if ( false === $i || intval($i) < 0 ) {		if ( ! $gmt )			$i = current_time( 'timestamp' );		else			$i = time();		// we should not let date() interfere with our		// specially computed timestamp		$gmt = true;	}	// store original value for language with untypical grammars	// see http://core.trac.wordpress.org/ticket/9396	$req_format = $dateformatstring;	$datefunc = $gmt? 'gmdate' : 'date';	if ( ( !empty( $wp_locale->month ) ) && ( !empty( $wp_locale->weekday ) ) ) {		$datemonth = $wp_locale->get_month( $datefunc( 'm', $i ) );		$datemonth_abbrev = $wp_locale->get_month_abbrev( $datemonth );		$dateweekday = $wp_locale->get_weekday( $datefunc( 'w', $i ) );		$dateweekday_abbrev = $wp_locale->get_weekday_abbrev( $dateweekday );		$datemeridiem = $wp_locale->get_meridiem( $datefunc( 'a', $i ) );		$datemeridiem_capital = $wp_locale->get_meridiem( $datefunc( 'A', $i ) );		$dateformatstring = ' '.$dateformatstring;		$dateformatstring = preg_replace( "/([^\\\])D/", "\\1" . backslashit( $dateweekday_abbrev ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])F/", "\\1" . backslashit( $datemonth ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])l/", "\\1" . backslashit( $dateweekday ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])M/", "\\1" . backslashit( $datemonth_abbrev ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])a/", "\\1" . backslashit( $datemeridiem ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])A/", "\\1" . backslashit( $datemeridiem_capital ), $dateformatstring );		$dateformatstring = substr( $dateformatstring, 1, strlen( $dateformatstring ) -1 );	}	$j = @$datefunc( $dateformatstring, $i );	// allow plugins to redo this entirely for languages with untypical grammars	$j = apply_filters('date_i18n', $j, $req_format, $i, $gmt);	return $j;}/** * Convert integer number to format based on the locale. * * @since 2.3.0 * * @param int $number The number to convert based on locale. * @param int $decimals Precision of the number of decimal places. * @return string Converted number in string format. */function number_format_i18n( $number, $decimals = 0 ) {	global $wp_locale;	$formatted = number_format( $number, absint( $decimals ), $wp_locale->number_format['decimal_point'], $wp_locale->number_format['thousands_sep'] );	return apply_filters( 'number_format_i18n', $formatted );}/** * Convert number of bytes largest unit bytes will fit into. * * It is easier to read 1kB than 1024 bytes and 1MB than 1048576 bytes. Converts * number of bytes to human readable number by taking the number of that unit * that the bytes will go into it. Supports TB value. * * Please note that integers in PHP are limited to 32 bits, unless they are on * 64 bit architecture, then they have 64 bit size. If you need to place the * larger size then what PHP integer type will hold, then use a string. It will * be converted to a double, which should always have 64 bit length. * * Technically the correct unit names for powers of 1024 are KiB, MiB etc. * @link http://en.wikipedia.org/wiki/Byte * * @since 2.3.0 * * @param int|string $bytes Number of bytes. Note max integer size for integers. * @param int $decimals Precision of number of decimal places. Deprecated. * @return bool|string False on failure. Number string on success. */function size_format( $bytes, $decimals = 0 ) {	$quant = array(		// ========================= Origin ====		'TB' => 1099511627776,  // pow( 1024, 4)		'GB' => 1073741824,     // pow( 1024, 3)		'MB' => 1048576,        // pow( 1024, 2)		'kB' => 1024,           // pow( 1024, 1)		'B ' => 1,              // pow( 1024, 0)	);	foreach ( $quant as $unit => $mag )		if ( doubleval($bytes) >= $mag )			return number_format_i18n( $bytes / $mag, $decimals ) . ' ' . $unit;	return false;}/** * Get the week start and end from the datetime or date string from mysql. * * @since 0.71 * * @param string $mysqlstring Date or datetime field type from mysql. * @param int $start_of_week Optional. Start of the week as an integer. * @return array Keys are 'start' and 'end'. */function get_weekstartend( $mysqlstring, $start_of_week = '' ) {	$my = substr( $mysqlstring, 0, 4 ); // Mysql string Year	$mm = substr( $mysqlstring, 8, 2 ); // Mysql string Month	$md = substr( $mysqlstring, 5, 2 ); // Mysql string day	$day = mktime( 0, 0, 0, $md, $mm, $my ); // The timestamp for mysqlstring day.	$weekday = date( 'w', $day ); // The day of the week from the timestamp	if ( !is_numeric($start_of_week) )		$start_of_week = get_option( 'start_of_week' );	if ( $weekday < $start_of_week )		$weekday += 7;	$start = $day - 86400 * ( $weekday - $start_of_week ); // The most recent week start day on or before $day	$end = $start + 604799; // $start + 7 days - 1 second	return compact( 'start', 'end' );}/** * Unserialize value only if it was serialized. * * @since 2.0.0 * * @param string $original Maybe unserialized original, if is needed. * @return mixed Unserialized data can be any type. */function maybe_unserialize( $original ) {	if ( is_serialized( $original ) ) // don't attempt to unserialize data that wasn't serialized going in		return @unserialize( $original );	return $original;}/** * Check value to find if it was serialized. * * If $data is not an string, then returned value will always be false. * Serialized data is always a string. * * @since 2.0.5 * * @param mixed $data Value to check to see if was serialized. * @return bool False if not serialized and true if it was. */function is_serialized( $data ) {	// if it isn't a string, it isn't serialized	if ( !is_string( $data ) )		return false;	$data = trim( $data );	if ( 'N;' == $data )		return true;	if ( !preg_match( '/^([adObis]):/', $data, $badions ) )		return false;	switch ( $badions[1] ) {		case 'a' :		case 'O' :		case 's' :			if ( preg_match( "/^{$badions[1]}:[0-9]+:.*[;}]\$/s", $data ) )				return true;			break;		case 'b' :		case 'i' :		case 'd' :			if ( preg_match( "/^{$badions[1]}:[0-9.E-]+;\$/", $data ) )				return true;			break;	}	return false;}/** * Check whether serialized data is of string type. * * @since 2.0.5 * * @param mixed $data Serialized data * @return bool False if not a serialized string, true if it is. */function is_serialized_string( $data ) {	// if it isn't a string, it isn't a serialized string	if ( !is_string( $data ) )		return false;	$data = trim( $data );	if ( preg_match( '/^s:[0-9]+:.*;$/s', $data ) ) // this should fetch all serialized strings		return true;	return false;}/** * Retrieve option value based on name of option. * * If the option does not exist or does not have a value, then the return value * will be false. This is useful to check whether you need to install an option * and is commonly used during installation of plugin options and to test * whether upgrading is required. * * If the option was serialized then it will be unserialized when it is returned. * * @since 1.5.0 * @package WordPress * @subpackage Option * @uses apply_filters() Calls 'pre_option_$option' before checking the option. * 	Any value other than false will "short-circuit" the retrieval of the option *	and return the returned value. You should not try to override special options, * 	but you will not be prevented from doing so. * @uses apply_filters() Calls 'option_$option', after checking the option, with * 	the option value. * * @param string $option Name of option to retrieve. Expected to not be SQL-escaped. * @return mixed Value set for the option. */function get_option( $option, $default = false ) {	global $wpdb;	// Allow plugins to short-circuit options.	$pre = apply_filters( 'pre_option_' . $option, false );	if ( false !== $pre )		return $pre;	$option = trim($option);	if ( empty($option) )		return false;	if ( defined( 'WP_SETUP_CONFIG' ) )		return false;	if ( ! defined( 'WP_INSTALLING' ) ) {		// prevent non-existent options from triggering multiple queries		$notoptions = wp_cache_get( 'notoptions', 'options' );		if ( isset( $notoptions[$option] ) )			return $default;		$alloptions = wp_load_alloptions();		if ( isset( $alloptions[$option] ) ) {			$value = $alloptions[$option];		} else {			$value = wp_cache_get( $option, 'options' );			if ( false === $value ) {				$row = $wpdb->get_row( $wpdb->prepare( "SELECT option_value FROM $wpdb->options WHERE option_name = %s LIMIT 1", $option ) );				// Has to be get_row instead of get_var because of funkiness with 0, false, null values				if ( is_object( $row ) ) {					$value = $row->option_value;					wp_cache_add( $option, $value, 'options' );				} else { // option does not exist, so we must cache its non-existence					$notoptions[$option] = true;					wp_cache_set( 'notoptions', $notoptions, 'options' );					return $default;				}			}		}	} else {		$suppress = $wpdb->suppress_errors();		$row = $wpdb->get_row( $wpdb->prepare( "SELECT option_value FROM $wpdb->options WHERE option_name = %s LIMIT 1", $option ) );		$wpdb->suppress_errors( $suppress );		if ( is_object( $row ) )			$value = $row->option_value;		else			return $default;	}	// If home is not set use siteurl.	if ( 'home' == $option && '' == $value )		return get_option( 'siteurl' );	if ( in_array( $option, array('siteurl', 'home', 'category_base', 'tag_base') ) )		$value = untrailingslashit( $value );	return apply_filters( 'option_' . $option, maybe_unserialize( $value ) );}/** * Protect WordPress special option from being modified. * * Will die if $option is in protected list. Protected options are 'alloptions' * and 'notoptions' options. * * @since 2.2.0 * @package WordPress * @subpackage Option * * @param string $option Option name. */function wp_protect_special_option( $option ) {	$protected = array( 'alloptions', 'notoptions' );	if ( in_array( $option, $protected ) )		wp_die( sprintf( __( '%s is a protected WP option and may not be modified' ), esc_html( $option ) ) );}/** * Print option value after sanitizing for forms. * * @uses attr Sanitizes value. * @since 1.5.0 * @package WordPress * @subpackage Option * * @param string $option Option name. */function form_option( $option ) {	echo esc_attr( get_option( $option ) );}/** * Loads and caches all autoloaded options, if available or all options. * * @since 2.2.0 * @package WordPress * @subpackage Option * * @return array List of all options. */function wp_load_alloptions() {	global $wpdb;	if ( !defined( 'WP_INSTALLING' ) || !is_multisite() )		$alloptions = wp_cache_get( 'alloptions', 'options' );	else		$alloptions = false;	if ( !$alloptions ) {		$suppress = $wpdb->suppress_errors();		if ( !$alloptions_db = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options WHERE autoload = 'yes'" ) )			$alloptions_db = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options" );		$wpdb->suppress_errors($suppress);		$alloptions = array();		foreach ( (array) $alloptions_db as $o )			$alloptions[$o->option_name] = $o->option_value;			if ( !defined( 'WP_INSTALLING' ) || !is_multisite() )				wp_cache_add( 'alloptions', $alloptions, 'options' );	}	return $alloptions;}/** * Loads and caches certain often requested site options if is_multisite() and a peristent cache is not being used. * * @since 3.0.0 * @package WordPress * @subpackage Option * * @param int $site_id Optional site ID for which to query the options. Defaults to the current site. */function wp_load_core_site_options( $site_id = null ) {	global $wpdb, $_wp_using_ext_object_cache;	if ( !is_multisite() || $_wp_using_ext_object_cache || defined( 'WP_INSTALLING' ) )		return;	if ( empty($site_id) )		$site_id = $wpdb->siteid;	$core_options = array('site_name', 'siteurl', 'active_sitewide_plugins', '_site_transient_timeout_theme_roots', '_site_transient_theme_roots', 'site_admins', 'dashboard_blog', 'can_compress_scripts', 'global_terms_enabled' );	$core_options_in = "'" . implode("', '", $core_options) . "'";	$options = $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value FROM $wpdb->sitemeta WHERE meta_key IN ($core_options_in) AND site_id = %d", $site_id) );	foreach ( $options as $option ) {		$key = $option->meta_key;		$cache_key = "{$site_id}:$key";		$option->meta_value = maybe_unserialize( $option->meta_value );		wp_cache_set( $cache_key, $option->meta_value, 'site-options' );	}}/** * Update the value of an option that was already added. * * You do not need to serialize values. If the value needs to be serialized, then * it will be serialized before it is inserted into the database. Remember, * resources can not be serialized or added as an option. * * If the option does not exist, then the option will be added with the option * value, but you will not be able to set whether it is autoloaded. If you want * to set whether an option is autoloaded, then you need to use the add_option(). * * @since 1.0.0 * @package WordPress * @subpackage Option * * @uses apply_filters() Calls 'pre_update_option_$option' hook to allow overwriting the * 	option value to be stored. * @uses do_action() Calls 'update_option' hook before updating the option. * @uses do_action() Calls 'update_option_$option' and 'updated_option' hooks on success. * * @param string $option Option name. Expected to not be SQL-escaped. * @param mixed $newvalue Option value. Expected to not be SQL-escaped. * @return bool False if value was not updated and true if value was updated. */function update_option( $option, $newvalue ) {	global $wpdb;	$option = trim($option);	if ( empty($option) )		return false;	wp_protect_special_option( $option );	if ( is_object($newvalue) )		$newvalue = wp_clone($newvalue);	$newvalue = sanitize_option( $option, $newvalue );	$oldvalue = get_option( $option );	$newvalue = apply_filters( 'pre_update_option_' . $option, $newvalue, $oldvalue );	// If the new and old values are the same, no need to update.	if ( $newvalue === $oldvalue )		return false;	if ( false === $oldvalue )		return add_option( $option, $newvalue );	$notoptions = wp_cache_get( 'notoptions', 'options' );	if ( is_array( $notoptions ) && isset( $notoptions[$option] ) ) {		unset( $notoptions[$option] );		wp_cache_set( 'notoptions', $notoptions, 'options' );	}	$_newvalue = $newvalue;	$newvalue = maybe_serialize( $newvalue );	do_action( 'update_option', $option, $oldvalue, $_newvalue );	if ( ! defined( 'WP_INSTALLING' ) ) {		$alloptions = wp_load_alloptions();		if ( isset( $alloptions[$option] ) ) {			$alloptions[$option] = $_newvalue;			wp_cache_set( 'alloptions', $alloptions, 'options' );		} else {			wp_cache_set( $option, $_newvalue, 'options' );		}	}	$result = $wpdb->update( $wpdb->options, array( 'option_value' => $newvalue ), array( 'option_name' => $option ) );	if ( $result ) {		do_action( "update_option_{$option}", $oldvalue, $_newvalue );		do_action( 'updated_option', $option, $oldvalue, $_newvalue );		return true;	}	return false;}/** * Add a new option. * * You do not need to serialize values. If the value needs to be serialized, then * it will be serialized before it is inserted into the database. Remember, * resources can not be serialized or added as an option. * * You can create options without values and then add values later. Does not * check whether the option has already been added, but does check that you * aren't adding a protected WordPress option. Care should be taken to not name * options the same as the ones which are protected and to not add options * that were already added. * * @package WordPress * @subpackage Option * @since 1.0.0 * @link http://alex.vort-x.net/blog/ Thanks Alex Stapleton * * @uses do_action() Calls 'add_option' hook before adding the option. * @uses do_action() Calls 'add_option_$option' and 'added_option' hooks on success. * * @param string $option Name of option to add. Expected to not be SQL-escaped. * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped. * @param mixed $deprecated Optional. Description. Not used anymore. * @param bool $autoload Optional. Default is enabled. Whether to load the option when WordPress starts up. * @return null returns when finished. */function add_option( $option, $value = '', $deprecated = '', $autoload = 'yes' ) {	global $wpdb;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	$option = trim($option);	if ( empty($option) )		return false;	wp_protect_special_option( $option );	if ( is_object($value) )		$value = wp_clone($value);	$value = sanitize_option( $option, $value );	// Make sure the option doesn't already exist. We can check the 'notoptions' cache before we ask for a db query	$notoptions = wp_cache_get( 'notoptions', 'options' );	if ( !is_array( $notoptions ) || !isset( $notoptions[$option] ) )		if ( false !== get_option( $option ) )			return;	$_value = $value;	$value = maybe_serialize( $value );	$autoload = ( 'no' === $autoload ) ? 'no' : 'yes';	do_action( 'add_option', $option, $_value );	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( 'yes' == $autoload ) {			$alloptions = wp_load_alloptions();			$alloptions[$option] = $value;			wp_cache_set( 'alloptions', $alloptions, 'options' );		} else {			wp_cache_set( $option, $value, 'options' );		}	}	// This option exists now	$notoptions = wp_cache_get( 'notoptions', 'options' ); // yes, again... we need it to be fresh	if ( is_array( $notoptions ) && isset( $notoptions[$option] ) ) {		unset( $notoptions[$option] );		wp_cache_set( 'notoptions', $notoptions, 'options' );	}	$result = $wpdb->query( $wpdb->prepare( "INSERT INTO `$wpdb->options` (`option_name`, `option_value`, `autoload`) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE `option_name` = VALUES(`option_name`), `option_value` = VALUES(`option_value`), `autoload` = VALUES(`autoload`)", $option, $value, $autoload ) );	if ( $result ) {		do_action( "add_option_{$option}", $option, $_value );		do_action( 'added_option', $option, $_value );		return true;	}	return false;}/** * Removes option by name. Prevents removal of protected WordPress options. * * @package WordPress * @subpackage Option * @since 1.2.0 * * @uses do_action() Calls 'delete_option' hook before option is deleted. * @uses do_action() Calls 'deleted_option' and 'delete_option_$option' hooks on success. * * @param string $option Name of option to remove. Expected to not be SQL-escaped. * @return bool True, if option is successfully deleted. False on failure. */function delete_option( $option ) {	global $wpdb;	wp_protect_special_option( $option );	// Get the ID, if no ID then return	$row = $wpdb->get_row( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", $option ) );	if ( is_null( $row ) )		return false;	do_action( 'delete_option', $option );	$result = $wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->options WHERE option_name = %s", $option) );	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( 'yes' == $row->autoload ) {			$alloptions = wp_load_alloptions();			if ( is_array( $alloptions ) && isset( $alloptions[$option] ) ) {				unset( $alloptions[$option] );				wp_cache_set( 'alloptions', $alloptions, 'options' );			}		} else {			wp_cache_delete( $option, 'options' );		}	}	if ( $result ) {		do_action( "delete_option_$option", $option );		do_action( 'deleted_option', $option );		return true;	}	return false;}/** * Delete a transient * * @since 2.8.0 * @package WordPress * @subpackage Transient * * @uses do_action() Calls 'delete_transient_$transient' hook before transient is deleted. * @uses do_action() Calls 'deleted_transient' hook on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @return bool true if successful, false otherwise */function delete_transient( $transient ) {	global $_wp_using_ext_object_cache;    do_action( 'delete_transient_' . $transient, $transient );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_delete( $transient, 'transient' );	} else {		$option_timeout = '_transient_timeout_' . $transient;		$option = '_transient_' . $transient;		$result = delete_option( $option );		if ( $result )			delete_option( $option_timeout );	}	if ( $result )		do_action( 'deleted_transient', $transient );	return $result;}/** * Get the value of a transient * * If the transient does not exist or does not have a value, then the return value * will be false. * * @uses apply_filters() Calls 'pre_transient_$transient' hook before checking the transient. * 	Any value other than false will "short-circuit" the retrieval of the transient *	and return the returned value. * @uses apply_filters() Calls 'transient_$option' hook, after checking the transient, with * 	the transient value. * * @since 2.8.0 * @package WordPress * @subpackage Transient * * @param string $transient Transient name. Expected to not be SQL-escaped * @return mixed Value of transient */function get_transient( $transient ) {	global $_wp_using_ext_object_cache;	$pre = apply_filters( 'pre_transient_' . $transient, false );	if ( false !== $pre )		return $pre;	if ( $_wp_using_ext_object_cache ) {		$value = wp_cache_get( $transient, 'transient' );	} else {		$transient_option = '_transient_' . $transient;		if ( ! defined( 'WP_INSTALLING' ) ) {			// If option is not in alloptions, it is not autoloaded and thus has a timeout			$alloptions = wp_load_alloptions();			if ( !isset( $alloptions[$transient_option] ) ) {				$transient_timeout = '_transient_timeout_' . $transient;				if ( get_option( $transient_timeout ) < time() ) {					delete_option( $transient_option  );					delete_option( $transient_timeout );					return false;				}			}		}		$value = get_option( $transient_option );	}	return apply_filters( 'transient_' . $transient, $value );}/** * Set/update the value of a transient * * You do not need to serialize values. If the value needs to be serialized, then * it will be serialized before it is set. * * @since 2.8.0 * @package WordPress * @subpackage Transient * * @uses apply_filters() Calls 'pre_set_transient_$transient' hook to allow overwriting the * 	transient value to be stored. * @uses do_action() Calls 'set_transient_$transient' and 'setted_transient' hooks on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @param mixed $value Transient value. Expected to not be SQL-escaped. * @param int $expiration Time until expiration in seconds, default 0 * @return bool False if value was not set and true if value was set. */function set_transient( $transient, $value, $expiration = 0 ) {	global $_wp_using_ext_object_cache;    $value = apply_filters( 'pre_set_transient_' . $transient, $value );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_set( $transient, $value, 'transient', $expiration );	} else {		$transient_timeout = '_transient_timeout_' . $transient;		$transient = '_transient_' . $transient;		if ( false === get_option( $transient ) ) {			$autoload = 'yes';			if ( $expiration ) {				$autoload = 'no';				add_option( $transient_timeout, time() + $expiration, '', 'no' );			}			$result = add_option( $transient, $value, '', $autoload );		} else {			if ( $expiration )				update_option( $transient_timeout, time() + $expiration );			$result = update_option( $transient, $value );		}	}	if ( $result ) {		do_action( 'set_transient_' . $transient );		do_action( 'setted_transient', $transient );	}	return $result;}/** * Saves and restores user interface settings stored in a cookie. * * Checks if the current user-settings cookie is updated and stores it. When no * cookie exists (different browser used), adds the last saved cookie restoring * the settings. * * @package WordPress * @subpackage Option * @since 2.7.0 */function wp_user_settings() {	if ( ! is_admin() )		return;	if ( defined('DOING_AJAX') )		return;	if ( ! $user = wp_get_current_user() )		return;	$settings = get_user_option( 'user-settings', $user->ID );	if ( isset( $_COOKIE['wp-settings-' . $user->ID] ) ) {		$cookie = preg_replace( '/[^A-Za-z0-9=&_]/', '', $_COOKIE['wp-settings-' . $user->ID] );		if ( ! empty( $cookie ) && strpos( $cookie, '=' ) ) {			if ( $cookie == $settings )				return;			$last_time = (int) get_user_option( 'user-settings-time', $user->ID );			$saved = isset( $_COOKIE['wp-settings-time-' . $user->ID]) ? preg_replace( '/[^0-9]/', '', $_COOKIE['wp-settings-time-' . $user->ID] ) : 0;			if ( $saved > $last_time ) {				update_user_option( $user->ID, 'user-settings', $cookie, false );				update_user_option( $user->ID, 'user-settings-time', time() - 5, false );				return;			}		}	}	setcookie( 'wp-settings-' . $user->ID, $settings, time() + 31536000, SITECOOKIEPATH );	setcookie( 'wp-settings-time-' . $user->ID, time(), time() + 31536000, SITECOOKIEPATH );	$_COOKIE['wp-settings-' . $user->ID] = $settings;}/** * Retrieve user interface setting value based on setting name. * * @package WordPress * @subpackage Option * @since 2.7.0 * * @param string $name The name of the setting. * @param string $default Optional default value to return when $name is not set. * @return mixed the last saved user setting or the default value/false if it doesn't exist. */function get_user_setting( $name, $default = false ) {	$all = get_all_user_settings();	return isset($all[$name]) ? $all[$name] : $default;}/** * Add or update user interface setting. * * Both $name and $value can contain only ASCII letters, numbers and underscores. * This function has to be used before any output has started as it calls setcookie(). * * @package WordPress * @subpackage Option * @since 2.8.0 * * @param string $name The name of the setting. * @param string $value The value for the setting. * @return bool true if set successfully/false if not. */function set_user_setting( $name, $value ) {	if ( headers_sent() )		return false;	$all = get_all_user_settings();	$name = preg_replace( '/[^A-Za-z0-9_]+/', '', $name );	if ( empty($name) )		return false;	$all[$name] = $value;	return wp_set_all_user_settings($all);}/** * Delete user interface settings. * * Deleting settings would reset them to the defaults. * This function has to be used before any output has started as it calls setcookie(). * * @package WordPress * @subpackage Option * @since 2.7.0 * * @param mixed $names The name or array of names of the setting to be deleted. * @return bool true if deleted successfully/false if not. */function delete_user_setting( $names ) {	if ( headers_sent() )		return false;	$all = get_all_user_settings();	$names = (array) $names;	foreach ( $names as $name ) {		if ( isset($all[$name]) ) {			unset($all[$name]);			$deleted = true;		}	}	if ( isset($deleted) )		return wp_set_all_user_settings($all);	return false;}/** * Retrieve all user interface settings. * * @package WordPress * @subpackage Option * @since 2.7.0 * * @return array the last saved user settings or empty array. */function get_all_user_settings() {	global $_updated_user_settings;	if ( ! $user = wp_get_current_user() )		return array();	if ( isset($_updated_user_settings) && is_array($_updated_user_settings) )		return $_updated_user_settings;	$all = array();	if ( isset($_COOKIE['wp-settings-' . $user->ID]) ) {		$cookie = preg_replace( '/[^A-Za-z0-9=&_]/', '', $_COOKIE['wp-settings-' . $user->ID] );		if ( $cookie && strpos($cookie, '=') ) // the '=' cannot be 1st char			parse_str($cookie, $all);	} else {		$option = get_user_option('user-settings', $user->ID);		if ( $option && is_string($option) )			parse_str( $option, $all );	}	return $all;}/** * Private. Set all user interface settings. * * @package WordPress * @subpackage Option * @since 2.8.0 * * @param unknown $all * @return bool */function wp_set_all_user_settings($all) {	global $_updated_user_settings;	if ( ! $user = wp_get_current_user() )		return false;	$_updated_user_settings = $all;	$settings = '';	foreach ( $all as $k => $v ) {		$v = preg_replace( '/[^A-Za-z0-9_]+/', '', $v );		$settings .= $k . '=' . $v . '&';	}	$settings = rtrim($settings, '&');	update_user_option( $user->ID, 'user-settings', $settings, false );	update_user_option( $user->ID, 'user-settings-time', time(), false );	return true;}/** * Delete the user settings of the current user. * * @package WordPress * @subpackage Option * @since 2.7.0 */function delete_all_user_settings() {	if ( ! $user = wp_get_current_user() )		return;	update_user_option( $user->ID, 'user-settings', '', false );	setcookie('wp-settings-' . $user->ID, ' ', time() - 31536000, SITECOOKIEPATH);}/** * Serialize data, if needed. * * @since 2.0.5 * * @param mixed $data Data that might be serialized. * @return mixed A scalar data */function maybe_serialize( $data ) {	if ( is_array( $data ) || is_object( $data ) )		return serialize( $data );	if ( is_serialized( $data ) )		return serialize( $data );	return $data;}/** * Retrieve post title from XMLRPC XML. * * If the title element is not part of the XML, then the default post title from * the $post_default_title will be used instead. * * @package WordPress * @subpackage XMLRPC * @since 0.71 * * @global string $post_default_title Default XMLRPC post title. * * @param string $content XMLRPC XML Request content * @return string Post title */function xmlrpc_getposttitle( $content ) {	global $post_default_title;	if ( preg_match( '/<title>(.+?)<\/title>/is', $content, $matchtitle ) ) {		$post_title = $matchtitle[1];	} else {		$post_title = $post_default_title;	}	return $post_title;}/** * Retrieve the post category or categories from XMLRPC XML. * * If the category element is not found, then the default post category will be * used. The return type then would be what $post_default_category. If the * category is found, then it will always be an array. * * @package WordPress * @subpackage XMLRPC * @since 0.71 * * @global string $post_default_category Default XMLRPC post category. * * @param string $content XMLRPC XML Request content * @return string|array List of categories or category name. */function xmlrpc_getpostcategory( $content ) {	global $post_default_category;	if ( preg_match( '/<category>(.+?)<\/category>/is', $content, $matchcat ) ) {		$post_category = trim( $matchcat[1], ',' );		$post_category = explode( ',', $post_category );	} else {		$post_category = $post_default_category;	}	return $post_category;}/** * XMLRPC XML content without title and category elements. * * @package WordPress * @subpackage XMLRPC * @since 0.71 * * @param string $content XMLRPC XML Request content * @return string XMLRPC XML Request content without title and category elements. */function xmlrpc_removepostdata( $content ) {	$content = preg_replace( '/<title>(.+?)<\/title>/si', '', $content );	$content = preg_replace( '/<category>(.+?)<\/category>/si', '', $content );	$content = trim( $content );	return $content;}/** * Open the file handle for debugging. * * This function is used for XMLRPC feature, but it is general purpose enough * to be used in anywhere. * * @see fopen() for mode options. * @package WordPress * @subpackage Debug * @since 0.71 * @uses $debug Used for whether debugging is enabled. * * @param string $filename File path to debug file. * @param string $mode Same as fopen() mode parameter. * @return bool|resource File handle. False on failure. */function debug_fopen( $filename, $mode ) {	global $debug;	if ( 1 == $debug ) {		$fp = fopen( $filename, $mode );		return $fp;	} else {		return false;	}}/** * Write contents to the file used for debugging. * * Technically, this can be used to write to any file handle when the global * $debug is set to 1 or true. * * @package WordPress * @subpackage Debug * @since 0.71 * @uses $debug Used for whether debugging is enabled. * * @param resource $fp File handle for debugging file. * @param string $string Content to write to debug file. */function debug_fwrite( $fp, $string ) {	global $debug;	if ( 1 == $debug )		fwrite( $fp, $string );}/** * Close the debugging file handle. * * Technically, this can be used to close any file handle when the global $debug * is set to 1 or true. * * @package WordPress * @subpackage Debug * @since 0.71 * @uses $debug Used for whether debugging is enabled. * * @param resource $fp Debug File handle. */function debug_fclose( $fp ) {	global $debug;	if ( 1 == $debug )		fclose( $fp );}/** * Check content for video and audio links to add as enclosures. * * Will not add enclosures that have already been added and will * remove enclosures that are no longer in the post. This is called as * pingbacks and trackbacks. * * @package WordPress * @since 1.5.0 * * @uses $wpdb * * @param string $content Post Content * @param int $post_ID Post ID */function do_enclose( $content, $post_ID ) {	global $wpdb;	include_once( ABSPATH . WPINC . '/class-IXR.php' );	$log = debug_fopen( ABSPATH . 'enclosures.log', 'a' );	$post_links = array();	debug_fwrite( $log, 'BEGIN ' . date( 'YmdHis', time() ) . "\n" );	$pung = get_enclosed( $post_ID );	$ltrs = '\w';	$gunk = '/#~:.?+=&%@!\-';	$punc = '.:?\-';	$any = $ltrs . $gunk . $punc;	preg_match_all( "{\b http : [$any] +? (?= [$punc] * [^$any] | $)}x", $content, $post_links_temp );	debug_fwrite( $log, 'Post contents:' );	debug_fwrite( $log, $content . "\n" );	foreach ( $pung as $link_test ) {		if ( !in_array( $link_test, $post_links_temp[0] ) ) { // link no longer in post			$mid = $wpdb->get_col( $wpdb->prepare("SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE (%s)", $post_ID, $link_test . '%') );			do_action( 'delete_postmeta', $mid );			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN(%s)", implode( ',', $mid ) ) );			do_action( 'deleted_postmeta', $mid );		}	}	foreach ( (array) $post_links_temp[0] as $link_test ) {		if ( !in_array( $link_test, $pung ) ) { // If we haven't pung it already			$test = @parse_url( $link_test );			if ( false === $test )				continue;			if ( isset( $test['query'] ) )				$post_links[] = $link_test;			elseif ( $test['path'] != '/' && $test['path'] != '' )				$post_links[] = $link_test;		}	}	foreach ( (array) $post_links as $url ) {		if ( $url != '' && !$wpdb->get_var( $wpdb->prepare( "SELECT post_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE (%s)", $post_ID, $url . '%' ) ) ) {			if ( $headers = wp_get_http_headers( $url) ) {				$len = (int) $headers['content-length'];				$type = $headers['content-type'];				$allowed_types = array( 'video', 'audio' );				// Check to see if we can figure out the mime type from				// the extension				$url_parts = @parse_url( $url );				if ( false !== $url_parts ) {					$extension = pathinfo( $url_parts['path'], PATHINFO_EXTENSION );					if ( !empty( $extension ) ) {						foreach ( get_allowed_mime_types( ) as $exts => $mime ) {							if ( preg_match( '!^(' . $exts . ')$!i', $extension ) ) {								$type = $mime;								break;							}						}					}				}				if ( in_array( substr( $type, 0, strpos( $type, "/" ) ), $allowed_types ) ) {					$meta_value = "$url\n$len\n$type\n";					$wpdb->insert($wpdb->postmeta, array('post_id' => $post_ID, 'meta_key' => 'enclosure', 'meta_value' => $meta_value) );					do_action( 'added_postmeta', $wpdb->insert_id, $post_ID, 'enclosure', $meta_value );				}			}		}	}}/** * Perform a HTTP HEAD or GET request. * * If $file_path is a writable filename, this will do a GET request and write * the file to that path. * * @since 2.5.0 * * @param string $url URL to fetch. * @param string|bool $file_path Optional. File path to write request to. * @param int $red (private) The number of Redirects followed, Upon 5 being hit, returns false. * @return bool|string False on failure and string of headers if HEAD request. */function wp_get_http( $url, $file_path = false, $red = 1 ) {	@set_time_limit( 60 );	if ( $red > 5 )		return false;	$options = array();	$options['redirection'] = 5;	if ( false == $file_path )		$options['method'] = 'HEAD';	else		$options['method'] = 'GET';	$response = wp_remote_request($url, $options);	if ( is_wp_error( $response ) )		return false;	$headers = wp_remote_retrieve_headers( $response );	$headers['response'] = $response['response']['code'];	// WP_HTTP no longer follows redirects for HEAD requests.	if ( 'HEAD' == $options['method'] && in_array($headers['response'], array(301, 302)) && isset( $headers['location'] ) ) {		return wp_get_http( $headers['location'], $file_path, ++$red );	}	if ( false == $file_path )		return $headers;	// GET request - write it to the supplied filename	$out_fp = fopen($file_path, 'w');	if ( !$out_fp )		return $headers;	fwrite( $out_fp,  $response['body']);	fclose($out_fp);	clearstatcache();	return $headers;}/** * Retrieve HTTP Headers from URL. * * @since 1.5.1 * * @param string $url * @param bool $deprecated Not Used. * @return bool|string False on failure, headers on success. */function wp_get_http_headers( $url, $deprecated = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.7' );	$response = wp_remote_head( $url );	if ( is_wp_error( $response ) )		return false;	return wp_remote_retrieve_headers( $response );}/** * Whether today is a new day. * * @since 0.71 * @uses $day Today * @uses $previousday Previous day * * @return int 1 when new day, 0 if not a new day. */function is_new_day() {	global $day, $previousday;	if ( $day != $previousday )		return 1;	else		return 0;}/** * Build URL query based on an associative and, or indexed array. * * This is a convenient function for easily building url queries. It sets the * separator to '&' and uses _http_build_query() function. * * @see _http_build_query() Used to build the query * @link http://us2.php.net/manual/en/function.http-build-query.php more on what *		http_build_query() does. * * @since 2.3.0 * * @param array $data URL-encode key/value pairs. * @return string URL encoded string */function build_query( $data ) {	return _http_build_query( $data, null, '&', '', false );}/** * Retrieve a modified URL query string. * * You can rebuild the URL and append a new query variable to the URL query by * using this function. You can also retrieve the full URL with query data. * * Adding a single key & value or an associative array. Setting a key value to * emptystring removes the key. Omitting oldquery_or_uri uses the $_SERVER * value. * * @since 1.5.0 * * @param mixed $param1 Either newkey or an associative_array * @param mixed $param2 Either newvalue or oldquery or uri * @param mixed $param3 Optional. Old query or uri * @return string New URL query string. */function add_query_arg() {	$ret = '';	if ( is_array( func_get_arg(0) ) ) {		if ( @func_num_args() < 2 || false === @func_get_arg( 1 ) )			$uri = $_SERVER['REQUEST_URI'];		else			$uri = @func_get_arg( 1 );	} else {		if ( @func_num_args() < 3 || false === @func_get_arg( 2 ) )			$uri = $_SERVER['REQUEST_URI'];		else			$uri = @func_get_arg( 2 );	}	if ( $frag = strstr( $uri, '#' ) )		$uri = substr( $uri, 0, -strlen( $frag ) );	else		$frag = '';	if ( preg_match( '|^https?://|i', $uri, $matches ) ) {		$protocol = $matches[0];		$uri = substr( $uri, strlen( $protocol ) );	} else {		$protocol = '';	}	if ( strpos( $uri, '?' ) !== false ) {		$parts = explode( '?', $uri, 2 );		if ( 1 == count( $parts ) ) {			$base = '?';			$query = $parts[0];		} else {			$base = $parts[0] . '?';			$query = $parts[1];		}	} elseif ( !empty( $protocol ) || strpos( $uri, '=' ) === false ) {		$base = $uri . '?';		$query = '';	} else {		$base = '';		$query = $uri;	}	wp_parse_str( $query, $qs );	$qs = urlencode_deep( $qs ); // this re-URL-encodes things that were already in the query string	if ( is_array( func_get_arg( 0 ) ) ) {		$kayvees = func_get_arg( 0 );		$qs = array_merge( $qs, $kayvees );	} else {		$qs[func_get_arg( 0 )] = func_get_arg( 1 );	}	foreach ( (array) $qs as $k => $v ) {		if ( $v === false )			unset( $qs[$k] );	}	$ret = build_query( $qs );	$ret = trim( $ret, '?' );	$ret = preg_replace( '#=(&|$)#', '$1', $ret );	$ret = $protocol . $base . $ret . $frag;	$ret = rtrim( $ret, '?' );	return $ret;}/** * Removes an item or list from the query string. * * @since 1.5.0 * * @param string|array $key Query key or keys to remove. * @param bool $query When false uses the $_SERVER value. * @return string New URL query string. */function remove_query_arg( $key, $query=false ) {	if ( is_array( $key ) ) { // removing multiple keys		foreach ( $key as $k )			$query = add_query_arg( $k, false, $query );		return $query;	}	return add_query_arg( $key, false, $query );}/** * Walks the array while sanitizing the contents. * * @since 0.71 * * @param array $array Array to used to walk while sanitizing contents. * @return array Sanitized $array. */function add_magic_quotes( $array ) {	foreach ( (array) $array as $k => $v ) {		if ( is_array( $v ) ) {			$array[$k] = add_magic_quotes( $v );		} else {			$array[$k] = addslashes( $v );		}	}	return $array;}/** * HTTP request for URI to retrieve content. * * @since 1.5.1 * @uses wp_remote_get() * * @param string $uri URI/URL of web page to retrieve. * @return bool|string HTTP content. False on failure. */function wp_remote_fopen( $uri ) {	$parsed_url = @parse_url( $uri );	if ( !$parsed_url || !is_array( $parsed_url ) )		return false;	$options = array();	$options['timeout'] = 10;	$response = wp_remote_get( $uri, $options );	if ( is_wp_error( $response ) )		return false;	return $response['body'];}/** * Set up the WordPress query. * * @since 2.0.0 * * @param string $query_vars Default WP_Query arguments. */function wp( $query_vars = '' ) {	global $wp, $wp_query, $wp_the_query;	$wp->main( $query_vars );	if ( !isset($wp_the_query) )		$wp_the_query = $wp_query;}/** * Retrieve the description for the HTTP status. * * @since 2.3.0 * * @param int $code HTTP status code. * @return string Empty string if not found, or description if found. */function get_status_header_desc( $code ) {	global $wp_header_to_desc;	$code = absint( $code );	if ( !isset( $wp_header_to_desc ) ) {		$wp_header_to_desc = array(			100 => 'Continue',			101 => 'Switching Protocols',			102 => 'Processing',			200 => 'OK',			201 => 'Created',			202 => 'Accepted',			203 => 'Non-Authoritative Information',			204 => 'No Content',			205 => 'Reset Content',			206 => 'Partial Content',			207 => 'Multi-Status',			226 => 'IM Used',			300 => 'Multiple Choices',			301 => 'Moved Permanently',			302 => 'Found',			303 => 'See Other',			304 => 'Not Modified',			305 => 'Use Proxy',			306 => 'Reserved',			307 => 'Temporary Redirect',			400 => 'Bad Request',			401 => 'Unauthorized',			402 => 'Payment Required',			403 => 'Forbidden',			404 => 'Not Found',			405 => 'Method Not Allowed',			406 => 'Not Acceptable',			407 => 'Proxy Authentication Required',			408 => 'Request Timeout',			409 => 'Conflict',			410 => 'Gone',			411 => 'Length Required',			412 => 'Precondition Failed',			413 => 'Request Entity Too Large',			414 => 'Request-URI Too Long',			415 => 'Unsupported Media Type',			416 => 'Requested Range Not Satisfiable',			417 => 'Expectation Failed',			422 => 'Unprocessable Entity',			423 => 'Locked',			424 => 'Failed Dependency',			426 => 'Upgrade Required',			500 => 'Internal Server Error',			501 => 'Not Implemented',			502 => 'Bad Gateway',			503 => 'Service Unavailable',			504 => 'Gateway Timeout',			505 => 'HTTP Version Not Supported',			506 => 'Variant Also Negotiates',			507 => 'Insufficient Storage',			510 => 'Not Extended'		);	}	if ( isset( $wp_header_to_desc[$code] ) )		return $wp_header_to_desc[$code];	else		return '';}/** * Set HTTP status header. * * @since 2.0.0 * @uses apply_filters() Calls 'status_header' on status header string, HTTP *		HTTP code, HTTP code description, and protocol string as separate *		parameters. * * @param int $header HTTP status code * @return unknown */function status_header( $header ) {	$text = get_status_header_desc( $header );	if ( empty( $text ) )		return false;	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	$status_header = "$protocol $header $text";	if ( function_exists( 'apply_filters' ) )		$status_header = apply_filters( 'status_header', $status_header, $header, $text, $protocol );	return @header( $status_header, true, $header );}/** * Gets the header information to prevent caching. * * The several different headers cover the different ways cache prevention is handled * by different browsers * * @since 2.8 * * @uses apply_filters() * @return array The associative array of header names and field values. */function wp_get_nocache_headers() {	$headers = array(		'Expires' => 'Wed, 11 Jan 1984 05:00:00 GMT',		'Last-Modified' => gmdate( 'D, d M Y H:i:s' ) . ' GMT',		'Cache-Control' => 'no-cache, must-revalidate, max-age=0',		'Pragma' => 'no-cache',	);	if ( function_exists('apply_filters') ) {		$headers = apply_filters('nocache_headers', $headers);	}	return $headers;}/** * Sets the headers to prevent caching for the different browsers. * * Different browsers support different nocache headers, so several headers must * be sent so that all of them get the point that no caching should occur. * * @since 2.0.0 * @uses wp_get_nocache_headers() */function nocache_headers() {	$headers = wp_get_nocache_headers();	foreach( (array) $headers as $name => $field_value )		@header("{$name}: {$field_value}");}/** * Set the headers for caching for 10 days with JavaScript content type. * * @since 2.1.0 */function cache_javascript_headers() {	$expiresOffset = 864000; // 10 days	header( "Content-Type: text/javascript; charset=" . get_bloginfo( 'charset' ) );	header( "Vary: Accept-Encoding" ); // Handle proxies	header( "Expires: " . gmdate( "D, d M Y H:i:s", time() + $expiresOffset ) . " GMT" );}/** * Retrieve the number of database queries during the WordPress execution. * * @since 2.0.0 * * @return int Number of database queries */function get_num_queries() {	global $wpdb;	return $wpdb->num_queries;}/** * Whether input is yes or no. Must be 'y' to be true. * * @since 1.0.0 * * @param string $yn Character string containing either 'y' or 'n' * @return bool True if yes, false on anything else */function bool_from_yn( $yn ) {	return ( strtolower( $yn ) == 'y' );}/** * Loads the feed template from the use of an action hook. * * If the feed action does not have a hook, then the function will die with a * message telling the visitor that the feed is not valid. * * It is better to only have one hook for each feed. * * @since 2.1.0 * @uses $wp_query Used to tell if the use a comment feed. * @uses do_action() Calls 'do_feed_$feed' hook, if a hook exists for the feed. */function do_feed() {	global $wp_query;	$feed = get_query_var( 'feed' );	// Remove the pad, if present.	$feed = preg_replace( '/^_+/', '', $feed );	if ( $feed == '' || $feed == 'feed' )		$feed = get_default_feed();	$hook = 'do_feed_' . $feed;	if ( !has_action($hook) ) {		$message = sprintf( __( 'ERROR: %s is not a valid feed template.' ), esc_html($feed));		wp_die( $message, '', array( 'response' => 404 ) );	}	do_action( $hook, $wp_query->is_comment_feed );}/** * Load the RDF RSS 0.91 Feed template. * * @since 2.1.0 */function do_feed_rdf() {	load_template( ABSPATH . WPINC . '/feed-rdf.php' );}/** * Load the RSS 1.0 Feed Template * * @since 2.1.0 */function do_feed_rss() {	load_template( ABSPATH . WPINC . '/feed-rss.php' );}/** * Load either the RSS2 comment feed or the RSS2 posts feed. * * @since 2.1.0 * * @param bool $for_comments True for the comment feed, false for normal feed. */function do_feed_rss2( $for_comments ) {	if ( $for_comments )		load_template( ABSPATH . WPINC . '/feed-rss2-comments.php' );	else		load_template( ABSPATH . WPINC . '/feed-rss2.php' );}/** * Load either Atom comment feed or Atom posts feed. * * @since 2.1.0 * * @param bool $for_comments True for the comment feed, false for normal feed. */function do_feed_atom( $for_comments ) {	if ($for_comments)		load_template( ABSPATH . WPINC . '/feed-atom-comments.php');	else		load_template( ABSPATH . WPINC . '/feed-atom.php' );}/** * Display the robot.txt file content. * * The echo content should be with usage of the permalinks or for creating the * robot.txt file. * * @since 2.1.0 * @uses do_action() Calls 'do_robotstxt' hook for displaying robot.txt rules. */function do_robots() {	header( 'Content-Type: text/plain; charset=utf-8' );	do_action( 'do_robotstxt' );	$output = '';	$public = get_option( 'blog_public' );	if ( '0' ==  $public ) {		$output .= "User-agent: *\n";		$output .= "Disallow: /\n";	} else {		$output .= "User-agent: *\n";		$output .= "Disallow:\n";	}	echo apply_filters('robots_txt', $output, $public);}/** * Test whether blog is already installed. * * The cache will be checked first. If you have a cache plugin, which saves the * cache values, then this will work. If you use the default WordPress cache, * and the database goes away, then you might have problems. * * Checks for the option siteurl for whether WordPress is installed. * * @since 2.1.0 * @uses $wpdb * * @return bool Whether blog is already installed. */function is_blog_installed() {	global $wpdb;	// Check cache first. If options table goes away and we have true cached, oh well.	if ( wp_cache_get( 'is_blog_installed' ) )		return true;	$suppress = $wpdb->suppress_errors();	if ( ! defined( 'WP_INSTALLING' ) ) {		$alloptions = wp_load_alloptions();	}	// If siteurl is not set to autoload, check it specifically	if ( !isset( $alloptions['siteurl'] ) )		$installed = $wpdb->get_var( "SELECT option_value FROM $wpdb->options WHERE option_name = 'siteurl'" );	else		$installed = $alloptions['siteurl'];	$wpdb->suppress_errors( $suppress );	$installed = !empty( $installed );	wp_cache_set( 'is_blog_installed', $installed );	if ( $installed )		return true;	$suppress = $wpdb->suppress_errors();	$tables = $wpdb->get_col('SHOW TABLES');	$wpdb->suppress_errors( $suppress );	$wp_tables = $wpdb->tables();	// Loop over the WP tables.  If none exist, then scratch install is allowed.	// If one or more exist, suggest table repair since we got here because the options	// table could not be accessed.	foreach ( $wp_tables as $table ) {		// If one of the WP tables exist, then we are in an insane state.		if ( in_array( $table, $tables ) ) {			// The existence of custom user tables shouldn't suggest an insane state or prevent a clean install.			if ( defined( 'CUSTOM_USER_TABLE' ) && CUSTOM_USER_TABLE == $table )				continue;			if ( defined( 'CUSTOM_USER_META_TABLE' ) && CUSTOM_USER_META_TABLE == $table )				continue;			// If visiting repair.php, return true and let it take over.			if ( defined('WP_REPAIRING') )				return true;			// Die with a DB error.			$wpdb->error = sprintf( /*WP_I18N_NO_TABLES*/'One or more database tables are unavailable.  The database may need to be <a href="%s">repaired</a>.'/*/WP_I18N_NO_TABLES*/, 'maint/repair.php?referrer=is_blog_installed' );			dead_db();		}	}	wp_cache_set( 'is_blog_installed', false );	return false;}/** * Retrieve URL with nonce added to URL query. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $actionurl URL to add nonce action * @param string $action Optional. Nonce action name * @return string URL with nonce action added. */function wp_nonce_url( $actionurl, $action = -1 ) {	$actionurl = str_replace( '&amp;', '&', $actionurl );	return esc_html( add_query_arg( '_wpnonce', wp_create_nonce( $action ), $actionurl ) );}/** * Retrieve or display nonce hidden field for forms. * * The nonce field is used to validate that the contents of the form came from * the location on the current site and not somewhere else. The nonce does not * offer absolute protection, but should protect against most cases. It is very * important to use nonce field in forms. * * If you set $echo to true and set $referer to true, then you will need to * retrieve the {@link wp_referer_field() wp referer field}. If you have the * $referer set to true and are echoing the nonce field, it will also echo the * referer field. * * The $action and $name are optional, but if you want to have better security, * it is strongly suggested to set those two parameters. It is easier to just * call the function without any parameters, because validation of the nonce * doesn't require any parameters, but since crackers know what the default is * it won't be difficult for them to find a way around your nonce and cause * damage. * * The input name will be whatever $name value you gave. The input value will be * the nonce creation value. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $action Optional. Action name. * @param string $name Optional. Nonce name. * @param bool $referer Optional, default true. Whether to set the referer field for validation. * @param bool $echo Optional, default true. Whether to display or return hidden form field. * @return string Nonce field. */function wp_nonce_field( $action = -1, $name = "_wpnonce", $referer = true , $echo = true ) {	$name = esc_attr( $name );	$nonce_field = '<input type="hidden" id="' . $name . '" name="' . $name . '" value="' . wp_create_nonce( $action ) . '" />';	if ( $echo )		echo $nonce_field;	if ( $referer )		wp_referer_field( $echo );	return $nonce_field;}/** * Retrieve or display referer hidden field for forms. * * The referer link is the current Request URI from the server super global. The * input name is '_wp_http_referer', in case you wanted to check manually. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param bool $echo Whether to echo or return the referer field. * @return string Referer field. */function wp_referer_field( $echo = true ) {	$ref = esc_attr( $_SERVER['REQUEST_URI'] );	$referer_field = '<input type="hidden" name="_wp_http_referer" value="'. $ref . '" />';	if ( $echo )		echo $referer_field;	return $referer_field;}/** * Retrieve or display original referer hidden field for forms. * * The input name is '_wp_original_http_referer' and will be either the same * value of {@link wp_referer_field()}, if that was posted already or it will * be the current page, if it doesn't exist. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param bool $echo Whether to echo the original http referer * @param string $jump_back_to Optional, default is 'current'. Can be 'previous' or page you want to jump back to. * @return string Original referer field. */function wp_original_referer_field( $echo = true, $jump_back_to = 'current' ) {	$jump_back_to = ( 'previous' == $jump_back_to ) ? wp_get_referer() : $_SERVER['REQUEST_URI'];	$ref = ( wp_get_original_referer() ) ? wp_get_original_referer() : $jump_back_to;	$orig_referer_field = '<input type="hidden" name="_wp_original_http_referer" value="' . esc_attr( stripslashes( $ref ) ) . '" />';	if ( $echo )		echo $orig_referer_field;	return $orig_referer_field;}/** * Retrieve referer from '_wp_http_referer', HTTP referer, or current page respectively. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @return string|bool False on failure. Referer URL on success. */function wp_get_referer() {	$ref = '';	if ( ! empty( $_REQUEST['_wp_http_referer'] ) )		$ref = $_REQUEST['_wp_http_referer'];	else if ( ! empty( $_SERVER['HTTP_REFERER'] ) )		$ref = $_SERVER['HTTP_REFERER'];	if ( $ref !== $_SERVER['REQUEST_URI'] )		return $ref;	return false;}/** * Retrieve original referer that was posted, if it exists. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @return string|bool False if no original referer or original referer if set. */function wp_get_original_referer() {	if ( !empty( $_REQUEST['_wp_original_http_referer'] ) )		return $_REQUEST['_wp_original_http_referer'];	return false;}/** * Recursive directory creation based on full path. * * Will attempt to set permissions on folders. * * @since 2.0.1 * * @param string $target Full path to attempt to create. * @return bool Whether the path was created. True if path already exists. */function wp_mkdir_p( $target ) {	// from php.net/mkdir user contributed notes	$target = str_replace( '//', '/', $target );	// safe mode fails with a trailing slash under certain PHP versions.	$target = rtrim($target, '/'); // Use rtrim() instead of untrailingslashit to avoid formatting.php dependency.	if ( empty($target) )		$target = '/';	if ( file_exists( $target ) )		return @is_dir( $target );	// Attempting to create the directory may clutter up our display.	if ( @mkdir( $target ) ) {		$stat = @stat( dirname( $target ) );		$dir_perms = $stat['mode'] & 0007777;  // Get the permission bits.		@chmod( $target, $dir_perms );		return true;	} elseif ( is_dir( dirname( $target ) ) ) {			return false;	}	// If the above failed, attempt to create the parent node, then try again.	if ( ( $target != '/' ) && ( wp_mkdir_p( dirname( $target ) ) ) )		return wp_mkdir_p( $target );	return false;}/** * Test if a give filesystem path is absolute ('/foo/bar', 'c:\windows'). * * @since 2.5.0 * * @param string $path File path * @return bool True if path is absolute, false is not absolute. */function path_is_absolute( $path ) {	// this is definitive if true but fails if $path does not exist or contains a symbolic link	if ( realpath($path) == $path )		return true;	if ( strlen($path) == 0 || $path{0} == '.' )		return false;	// windows allows absolute paths like this	if ( preg_match('#^[a-zA-Z]:\\\\#', $path) )		return true;	// a path starting with / or \ is absolute; anything else is relative	return (bool) preg_match('#^[/\\\\]#', $path);}/** * Join two filesystem paths together (e.g. 'give me $path relative to $base'). * * If the $path is absolute, then it the full path is returned. * * @since 2.5.0 * * @param string $base * @param string $path * @return string The path with the base or absolute path. */function path_join( $base, $path ) {	if ( path_is_absolute($path) )		return $path;	return rtrim($base, '/') . '/' . ltrim($path, '/');}/** * Get an array containing the current upload directory's path and url. * * Checks the 'upload_path' option, which should be from the web root folder, * and if it isn't empty it will be used. If it is empty, then the path will be * 'WP_CONTENT_DIR/uploads'. If the 'UPLOADS' constant is defined, then it will * override the 'upload_path' option and 'WP_CONTENT_DIR/uploads' path. * * The upload URL path is set either by the 'upload_url_path' option or by using * the 'WP_CONTENT_URL' constant and appending '/uploads' to the path. * * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in * the administration settings panel), then the time will be used. The format * will be year first and then month. * * If the path couldn't be created, then an error will be returned with the key * 'error' containing the error message. The error suggests that the parent * directory is not writable by the server. * * On success, the returned array will have many indices: * 'path' - base directory and sub directory or full path to upload directory. * 'url' - base url and sub directory or absolute URL to upload directory. * 'subdir' - sub directory if uploads use year/month folders option is on. * 'basedir' - path without subdir. * 'baseurl' - URL path without subdir. * 'error' - set to false. * * @since 2.0.0 * @uses apply_filters() Calls 'upload_dir' on returned array. * * @param string $time Optional. Time formatted in 'yyyy/mm'. * @return array See above for description. */function wp_upload_dir( $time = null ) {	global $switched;	$siteurl = get_option( 'siteurl' );	$upload_path = get_option( 'upload_path' );	$upload_path = trim($upload_path);	$main_override = defined( 'MULTISITE' ) && is_main_site();	if ( empty($upload_path) ) {		$dir = WP_CONTENT_DIR . '/uploads';	} else {		$dir = $upload_path;		if ( 'wp-content/uploads' == $upload_path ) {			$dir = WP_CONTENT_DIR . '/uploads';		} elseif ( 0 !== strpos($dir, ABSPATH) ) {			// $dir is absolute, $upload_path is (maybe) relative to ABSPATH			$dir = path_join( ABSPATH, $dir );		}	}	if ( !$url = get_option( 'upload_url_path' ) ) {		if ( empty($upload_path) || ( 'wp-content/uploads' == $upload_path ) || ( $upload_path == $dir ) )			$url = WP_CONTENT_URL . '/uploads';		else			$url = trailingslashit( $siteurl ) . $upload_path;	}	if ( defined('UPLOADS') && !$main_override && ( !isset( $switched ) || $switched === false ) ) {		$dir = ABSPATH . UPLOADS;		$url = trailingslashit( $siteurl ) . UPLOADS;	}	if ( is_multisite() && !$main_override && ( !isset( $switched ) || $switched === false ) ) {		if ( defined( 'BLOGUPLOADDIR' ) )			$dir = untrailingslashit(BLOGUPLOADDIR);		$url = str_replace( UPLOADS, 'files', $url );	}	$bdir = $dir;	$burl = $url;	$subdir = '';	if ( get_option( 'uploads_use_yearmonth_folders' ) ) {		// Generate the yearly and monthly dirs		if ( !$time )			$time = current_time( 'mysql' );		$y = substr( $time, 0, 4 );		$m = substr( $time, 5, 2 );		$subdir = "/$y/$m";	}	$dir .= $subdir;	$url .= $subdir;	$uploads = apply_filters( 'upload_dir', array( 'path' => $dir, 'url' => $url, 'subdir' => $subdir, 'basedir' => $bdir, 'baseurl' => $burl, 'error' => false ) );	// Make sure we have an uploads dir	if ( ! wp_mkdir_p( $uploads['path'] ) ) {		$message = sprintf( __( 'Unable to create directory %s. Is its parent directory writable by the server?' ), $uploads['path'] );		return array( 'error' => $message );	}	return $uploads;}/** * Get a filename that is sanitized and unique for the given directory. * * If the filename is not unique, then a number will be added to the filename * before the extension, and will continue adding numbers until the filename is * unique. * * The callback must accept two parameters, the first one is the directory and * the second is the filename. The callback must be a function. * * @since 2.5 * * @param string $dir * @param string $filename * @param string $unique_filename_callback Function name, must be a function. * @return string New filename, if given wasn't unique. */function wp_unique_filename( $dir, $filename, $unique_filename_callback = null ) {	// sanitize the file name before we begin processing	$filename = sanitize_file_name($filename);	// separate the filename into a name and extension	$info = pathinfo($filename);	$ext = !empty($info['extension']) ? '.' . $info['extension'] : '';	$name = basename($filename, $ext);	// edge case: if file is named '.ext', treat as an empty name	if ( $name === $ext )		$name = '';	// Increment the file number until we have a unique file to save in $dir. Use $override['unique_filename_callback'] if supplied.	if ( $unique_filename_callback && is_callable( $unique_filename_callback ) ) {		$filename = $unique_filename_callback( $dir, $name );	} else {		$number = '';		// change '.ext' to lower case		if ( $ext && strtolower($ext) != $ext ) {			$ext2 = strtolower($ext);			$filename2 = preg_replace( '|' . preg_quote($ext) . '$|', $ext2, $filename );			// check for both lower and upper case extension or image sub-sizes may be overwritten			while ( file_exists($dir . "/$filename") || file_exists($dir . "/$filename2") ) {				$new_number = $number + 1;				$filename = str_replace( "$number$ext", "$new_number$ext", $filename );				$filename2 = str_replace( "$number$ext2", "$new_number$ext2", $filename2 );				$number = $new_number;			}			return $filename2;		}		while ( file_exists( $dir . "/$filename" ) ) {			if ( '' == "$number$ext" )				$filename = $filename . ++$number . $ext;			else				$filename = str_replace( "$number$ext", ++$number . $ext, $filename );		}	}	return $filename;}/** * Create a file in the upload folder with given content. * * If there is an error, then the key 'error' will exist with the error message. * If success, then the key 'file' will have the unique file path, the 'url' key * will have the link to the new file. and the 'error' key will be set to false. * * This function will not move an uploaded file to the upload folder. It will * create a new file with the content in $bits parameter. If you move the upload * file, read the content of the uploaded file, and then you can give the * filename and content to this function, which will add it to the upload * folder. * * The permissions will be set on the new file automatically by this function. * * @since 2.0.0 * * @param string $name * @param null $deprecated Never used. Set to null. * @param mixed $bits File content * @param string $time Optional. Time formatted in 'yyyy/mm'. * @return array */function wp_upload_bits( $name, $deprecated, $bits, $time = null ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.0' );	if ( empty( $name ) )		return array( 'error' => __( 'Empty filename' ) );	$wp_filetype = wp_check_filetype( $name );	if ( !$wp_filetype['ext'] )		return array( 'error' => __( 'Invalid file type' ) );	$upload = wp_upload_dir( $time );	if ( $upload['error'] !== false )		return $upload;	$upload_bits_error = apply_filters( 'wp_upload_bits', array( 'name' => $name, 'bits' => $bits, 'time' => $time ) );	if ( !is_array( $upload_bits_error ) ) {		$upload[ 'error' ] = $upload_bits_error;		return $upload;	}	$filename = wp_unique_filename( $upload['path'], $name );	$new_file = $upload['path'] . "/$filename";	if ( ! wp_mkdir_p( dirname( $new_file ) ) ) {		$message = sprintf( __( 'Unable to create directory %s. Is its parent directory writable by the server?' ), dirname( $new_file ) );		return array( 'error' => $message );	}	$ifp = @ fopen( $new_file, 'wb' );	if ( ! $ifp )		return array( 'error' => sprintf( __( 'Could not write file %s' ), $new_file ) );	@fwrite( $ifp, $bits );	fclose( $ifp );	clearstatcache();	// Set correct file permissions	$stat = @ stat( dirname( $new_file ) );	$perms = $stat['mode'] & 0007777;	$perms = $perms & 0000666;	@ chmod( $new_file, $perms );	clearstatcache();	// Compute the URL	$url = $upload['url'] . "/$filename";	return array( 'file' => $new_file, 'url' => $url, 'error' => false );}/** * Retrieve the file type based on the extension name. * * @package WordPress * @since 2.5.0 * @uses apply_filters() Calls 'ext2type' hook on default supported types. * * @param string $ext The extension to search. * @return string|null The file type, example: audio, video, document, spreadsheet, etc. Null if not found. */function wp_ext2type( $ext ) {	$ext2type = apply_filters( 'ext2type', array(		'audio'       => array( 'aac', 'ac3',  'aif',  'aiff', 'm3a',  'm4a',   'm4b', 'mka', 'mp1', 'mp2',  'mp3', 'ogg', 'oga', 'ram', 'wav', 'wma' ),		'video'       => array( 'asf', 'avi',  'divx', 'dv',   'flv',  'm4v',   'mkv', 'mov', 'mp4', 'mpeg', 'mpg', 'mpv', 'ogm', 'ogv', 'qt',  'rm', 'vob', 'wmv' ),		'document'    => array( 'doc', 'docx', 'docm', 'dotm', 'odt',  'pages', 'pdf', 'rtf', 'wp',  'wpd' ),		'spreadsheet' => array( 'numbers',     'ods',  'xls',  'xlsx', 'xlsb',  'xlsm' ),		'interactive' => array( 'key', 'ppt',  'pptx', 'pptm', 'odp',  'swf' ),		'text'        => array( 'asc', 'csv',  'tsv',  'txt' ),		'archive'     => array( 'bz2', 'cab',  'dmg',  'gz',   'rar',  'sea',   'sit', 'sqx', 'tar', 'tgz',  'zip' ),		'code'        => array( 'css', 'htm',  'html', 'php',  'js' ),	));	foreach ( $ext2type as $type => $exts )		if ( in_array( $ext, $exts ) )			return $type;}/** * Retrieve the file type from the file name. * * You can optionally define the mime array, if needed. * * @since 2.0.4 * * @param string $filename File name or path. * @param array $mimes Optional. Key is the file extension with value as the mime type. * @return array Values with extension first and mime type. */function wp_check_filetype( $filename, $mimes = null ) {	if ( empty($mimes) )		$mimes = get_allowed_mime_types();	$type = false;	$ext = false;	foreach ( $mimes as $ext_preg => $mime_match ) {		$ext_preg = '!\.(' . $ext_preg . ')$!i';		if ( preg_match( $ext_preg, $filename, $ext_matches ) ) {			$type = $mime_match;			$ext = $ext_matches[1];			break;		}	}	return compact( 'ext', 'type' );}/** * Attempt to determine the real file type of a file. * If unable to, the file name extension will be used to determine type. * * If it's determined that the extension does not match the file's real type, * then the "proper_filename" value will be set with a proper filename and extension. * * Currently this function only supports validating images known to getimagesize(). * * @since 3.0.0 * * @param string $file Full path to the image. * @param string $filename The filename of the image (may differ from $file due to $file being in a tmp directory) * @param array $mimes Optional. Key is the file extension with value as the mime type. * @return array Values for the extension, MIME, and either a corrected filename or false if original $filename is valid */function wp_check_filetype_and_ext( $file, $filename, $mimes = null ) {	$proper_filename = false;	// Do basic extension validation and MIME mapping	$wp_filetype = wp_check_filetype( $filename, $mimes );	extract( $wp_filetype );	// We can't do any further validation without a file to work with	if ( ! file_exists( $file ) )		return compact( 'ext', 'type', 'proper_filename' );	// We're able to validate images using GD	if ( $type && 0 === strpos( $type, 'image/' ) && function_exists('getimagesize') ) {		// Attempt to figure out what type of image it actually is		$imgstats = @getimagesize( $file );		// If getimagesize() knows what kind of image it really is and if the real MIME doesn't match the claimed MIME		if ( !empty($imgstats['mime']) && $imgstats['mime'] != $type ) {			// This is a simplified array of MIMEs that getimagesize() can detect and their extensions			// You shouldn't need to use this filter, but it's here just in case			$mime_to_ext = apply_filters( 'getimagesize_mimes_to_exts', array(				'image/jpeg' => 'jpg',				'image/png'  => 'png',				'image/gif'  => 'gif',				'image/bmp'  => 'bmp',				'image/tiff' => 'tif',			) );			// Replace whatever is after the last period in the filename with the correct extension			if ( ! empty( $mime_to_ext[ $imgstats['mime'] ] ) ) {				$filename_parts = explode( '.', $filename );				array_pop( $filename_parts );				$filename_parts[] = $mime_to_ext[ $imgstats['mime'] ];				$new_filename = implode( '.', $filename_parts );				if ( $new_filename != $filename )					$proper_filename = $new_filename; // Mark that it changed				// Redefine the extension / MIME				$wp_filetype = wp_check_filetype( $new_filename, $mimes );				extract( $wp_filetype );			}		}	}	// Let plugins try and validate other types of files	// Should return an array in the style of array( 'ext' => $ext, 'type' => $type, 'proper_filename' => $proper_filename )	return apply_filters( 'wp_check_filetype_and_ext', compact( 'ext', 'type', 'proper_filename' ), $file, $filename, $mimes );}/** * Retrieve list of allowed mime types and file extensions. * * @since 2.8.6 * * @return array Array of mime types keyed by the file extension regex corresponding to those types. */function get_allowed_mime_types() {	static $mimes = false;	if ( !$mimes ) {		// Accepted MIME types are set here as PCRE unless provided.		$mimes = apply_filters( 'upload_mimes', array(		'jpg|jpeg|jpe' => 'image/jpeg',		'gif' => 'image/gif',		'png' => 'image/png',		'bmp' => 'image/bmp',		'tif|tiff' => 'image/tiff',		'ico' => 'image/x-icon',		'asf|asx|wax|wmv|wmx' => 'video/asf',		'avi' => 'video/avi',		'divx' => 'video/divx',		'flv' => 'video/x-flv',		'mov|qt' => 'video/quicktime',		'mpeg|mpg|mpe' => 'video/mpeg',		'txt|asc|c|cc|h' => 'text/plain',		'csv' => 'text/csv',		'tsv' => 'text/tab-separated-values',		'rtx' => 'text/richtext',		'css' => 'text/css',		'htm|html' => 'text/html',		'mp3|m4a|m4b' => 'audio/mpeg',		'mp4|m4v' => 'video/mp4',		'ra|ram' => 'audio/x-realaudio',		'wav' => 'audio/wav',		'ogg|oga' => 'audio/ogg',		'ogv' => 'video/ogg',		'mid|midi' => 'audio/midi',		'wma' => 'audio/wma',		'mka' => 'audio/x-matroska',		'mkv' => 'video/x-matroska',		'rtf' => 'application/rtf',		'js' => 'application/javascript',		'pdf' => 'application/pdf',		'doc|docx' => 'application/msword',		'pot|pps|ppt|pptx|ppam|pptm|sldm|ppsm|potm' => 'application/vnd.ms-powerpoint',		'wri' => 'application/vnd.ms-write',		'xla|xls|xlsx|xlt|xlw|xlam|xlsb|xlsm|xltm' => 'application/vnd.ms-excel',		'mdb' => 'application/vnd.ms-access',		'mpp' => 'application/vnd.ms-project',		'docm|dotm' => 'application/vnd.ms-word',		'pptx|sldx|ppsx|potx' => 'application/vnd.openxmlformats-officedocument.presentationml',		'xlsx|xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml',		'docx|dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml',		'onetoc|onetoc2|onetmp|onepkg' => 'application/onenote',		'swf' => 'application/x-shockwave-flash',		'class' => 'application/java',		'tar' => 'application/x-tar',		'zip' => 'application/zip',		'gz|gzip' => 'application/x-gzip',		'exe' => 'application/x-msdownload',		// openoffice formats		'odt' => 'application/vnd.oasis.opendocument.text',		'odp' => 'application/vnd.oasis.opendocument.presentation',		'ods' => 'application/vnd.oasis.opendocument.spreadsheet',		'odg' => 'application/vnd.oasis.opendocument.graphics',		'odc' => 'application/vnd.oasis.opendocument.chart',		'odb' => 'application/vnd.oasis.opendocument.database',		'odf' => 'application/vnd.oasis.opendocument.formula',		// wordperfect formats		'wp|wpd' => 'application/wordperfect',		) );	}	return $mimes;}/** * Retrieve nonce action "Are you sure" message. * * The action is split by verb and noun. The action format is as follows: * verb-action_extra. The verb is before the first dash and has the format of * letters and no spaces and numbers. The noun is after the dash and before the * underscore, if an underscore exists. The noun is also only letters. * * The filter will be called for any action, which is not defined by WordPress. * You may use the filter for your plugin to explain nonce actions to the user, * when they get the "Are you sure?" message. The filter is in the format of * 'explain_nonce_$verb-$noun' with the $verb replaced by the found verb and the * $noun replaced by the found noun. The two parameters that are given to the * hook are the localized "Are you sure you want to do this?" message with the * extra text (the text after the underscore). * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $action Nonce action. * @return string Are you sure message. */function wp_explain_nonce( $action ) {	if ( $action !== -1 && preg_match( '/([a-z]+)-([a-z]+)(_(.+))?/', $action, $matches ) ) {		$verb = $matches[1];		$noun = $matches[2];		$trans = array();		$trans['update']['attachment'] = array( __( 'Your attempt to edit this attachment: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['add']['category']      = array( __( 'Your attempt to add this category has failed.' ), false );		$trans['delete']['category']   = array( __( 'Your attempt to delete this category: &#8220;%s&#8221; has failed.' ), 'get_cat_name' );		$trans['update']['category']   = array( __( 'Your attempt to edit this category: &#8220;%s&#8221; has failed.' ), 'get_cat_name' );		$trans['delete']['comment']    = array( __( 'Your attempt to delete this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['unapprove']['comment'] = array( __( 'Your attempt to unapprove this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['approve']['comment']   = array( __( 'Your attempt to approve this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['update']['comment']    = array( __( 'Your attempt to edit this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['bulk']['comments']     = array( __( 'Your attempt to bulk modify comments has failed.' ), false );		$trans['moderate']['comments'] = array( __( 'Your attempt to moderate comments has failed.' ), false );		$trans['add']['bookmark']      = array( __( 'Your attempt to add this link has failed.' ), false );		$trans['delete']['bookmark']   = array( __( 'Your attempt to delete this link: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['update']['bookmark']   = array( __( 'Your attempt to edit this link: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['bulk']['bookmarks']    = array( __( 'Your attempt to bulk modify links has failed.' ), false );		$trans['add']['page']          = array( __( 'Your attempt to add this page has failed.' ), false );		$trans['delete']['page']       = array( __( 'Your attempt to delete this page: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['update']['page']       = array( __( 'Your attempt to edit this page: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['edit']['plugin']       = array( __( 'Your attempt to edit this plugin file: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['activate']['plugin']   = array( __( 'Your attempt to activate this plugin: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['deactivate']['plugin'] = array( __( 'Your attempt to deactivate this plugin: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['upgrade']['plugin']    = array( __( 'Your attempt to upgrade this plugin: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['add']['post']          = array( __( 'Your attempt to add this post has failed.' ), false );		$trans['delete']['post']       = array( __( 'Your attempt to delete this post: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['update']['post']       = array( __( 'Your attempt to edit this post: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['add']['user']          = array( __( 'Your attempt to add this user has failed.' ), false );		$trans['delete']['users']      = array( __( 'Your attempt to delete users has failed.' ), false );		$trans['bulk']['users']        = array( __( 'Your attempt to bulk modify users has failed.' ), false );		$trans['update']['user']       = array( __( 'Your attempt to edit this user: &#8220;%s&#8221; has failed.' ), 'get_the_author_meta', 'display_name' );		$trans['update']['profile']    = array( __( 'Your attempt to modify the profile for: &#8220;%s&#8221; has failed.' ), 'get_the_author_meta', 'display_name' );		$trans['update']['options']    = array( __( 'Your attempt to edit your settings has failed.' ), false );		$trans['update']['permalink']  = array( __( 'Your attempt to change your permalink structure to: %s has failed.' ), 'use_id' );		$trans['edit']['file']         = array( __( 'Your attempt to edit this file: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['edit']['theme']        = array( __( 'Your attempt to edit this theme file: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['switch']['theme']      = array( __( 'Your attempt to switch to this theme: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['log']['out']           = array( sprintf( __( 'You are attempting to log out of %s' ), get_bloginfo( 'sitename' ) ), false );		if ( isset( $trans[$verb][$noun] ) ) {			if ( !empty( $trans[$verb][$noun][1] ) ) {				$lookup = $trans[$verb][$noun][1];				if ( isset($trans[$verb][$noun][2]) )					$lookup_value = $trans[$verb][$noun][2];				$object = $matches[4];				if ( 'use_id' != $lookup ) {					if ( isset( $lookup_value ) )						$object = call_user_func( $lookup, $lookup_value, $object );					else						$object = call_user_func( $lookup, $object );				}				return sprintf( $trans[$verb][$noun][0], esc_html($object) );			} else {				return $trans[$verb][$noun][0];			}		}		return apply_filters( 'explain_nonce_' . $verb . '-' . $noun, __( 'Are you sure you want to do this?' ), isset($matches[4]) ? $matches[4] : '' );	} else {		return apply_filters( 'explain_nonce_' . $action, __( 'Are you sure you want to do this?' ) );	}}/** * Display "Are You Sure" message to confirm the action being taken. * * If the action has the nonce explain message, then it will be displayed along * with the "Are you sure?" message. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $action The nonce action. */function wp_nonce_ays( $action ) {	$title = __( 'WordPress Failure Notice' );	$html = esc_html( wp_explain_nonce( $action ) );	if ( 'log-out' == $action )		$html .= "</p><p>" . sprintf( __( "Do you really want to <a href='%s'>log out</a>?"), wp_logout_url() );	elseif ( wp_get_referer() )		$html .= "</p><p><a href='" . esc_url( remove_query_arg( 'updated', wp_get_referer() ) ) . "'>" . __( 'Please try again.' ) . "</a>";	wp_die( $html, $title, array('response' => 403) );}/** * Kill WordPress execution and display HTML message with error message. * * This function complements the die() PHP function. The difference is that * HTML will be displayed to the user. It is recommended to use this function * only, when the execution should not continue any further. It is not * recommended to call this function very often and try to handle as many errors * as possible siliently. * * @since 2.0.4 * * @param string $message Error message. * @param string $title Error title. * @param string|array $args Optional arguements to control behaviour. */function wp_die( $message, $title = '', $args = array() ) {	if ( function_exists( 'apply_filters' ) ) {		$function = apply_filters( 'wp_die_handler', '_default_wp_die_handler');	}else {		$function = '_default_wp_die_handler';	}	call_user_func( $function, $message, $title, $args );}/** * Kill WordPress execution and display HTML message with error message. * * This is the default handler for wp_die if you want a custom one for your * site then you can overload using the wp_die_handler filter in wp_die * * @since 3.0.0 * @access private * * @param string $message Error message. * @param string $title Error title. * @param string|array $args Optional arguements to control behaviour. */function _default_wp_die_handler( $message, $title = '', $args = array() ) {	$defaults = array( 'response' => 500 );	$r = wp_parse_args($args, $defaults);	$have_gettext = function_exists('__');	if ( function_exists( 'is_wp_error' ) && is_wp_error( $message ) ) {		if ( empty( $title ) ) {			$error_data = $message->get_error_data();			if ( is_array( $error_data ) && isset( $error_data['title'] ) )				$title = $error_data['title'];		}		$errors = $message->get_error_messages();		switch ( count( $errors ) ) :		case 0 :			$message = '';			break;		case 1 :			$message = "<p>{$errors[0]}</p>";			break;		default :			$message = "<ul>\n\t\t<li>" . join( "</li>\n\t\t<li>", $errors ) . "</li>\n\t</ul>";			break;		endswitch;	} elseif ( is_string( $message ) ) {		$message = "<p>$message</p>";	}	if ( isset( $r['back_link'] ) && $r['back_link'] ) {		$back_text = $have_gettext? __('&laquo; Back') : '&laquo; Back';		$message .= "\n<p><a href='javascript:history.back()'>$back_text</p>";	}	if ( defined( 'WP_SITEURL' ) && '' != WP_SITEURL )		$admin_dir = WP_SITEURL . '/wp-admin/';	elseif ( function_exists( 'get_bloginfo' ) && '' != get_bloginfo( 'wpurl' ) )		$admin_dir = get_bloginfo( 'wpurl' ) . '/wp-admin/';	elseif ( strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) !== false )		$admin_dir = '';	else		$admin_dir = 'wp-admin/';	if ( !function_exists( 'did_action' ) || !did_action( 'admin_head' ) ) :	if ( !headers_sent() ) {		status_header( $r['response'] );		nocache_headers();		header( 'Content-Type: text/html; charset=utf-8' );	}	if ( empty($title) )		$title = $have_gettext ? __('WordPress &rsaquo; Error') : 'WordPress &rsaquo; Error';	$text_direction = 'ltr';	if ( isset($r['text_direction']) && 'rtl' == $r['text_direction'] )		$text_direction = 'rtl';	elseif ( function_exists( 'is_rtl' ) && is_rtl() )		$text_direction = 'rtl';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><!-- Ticket #11289, IE bug fix: always pad the error page with enough characters such that it is greater than 512 bytes, even after gzip compression abcdefghijklmnopqrstuvwxyz1234567890aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz11223344556677889900abacbcbdcdcededfefegfgfhghgihihjijikjkjlklkmlmlnmnmononpopoqpqprqrqsrsrtstsubcbcdcdedefefgfabcadefbghicjkldmnoepqrfstugvwxhyz1i234j567k890laabmbccnddeoeffpgghqhiirjjksklltmmnunoovppqwqrrxsstytuuzvvw0wxx1yyz2z113223434455666777889890091abc2def3ghi4jkl5mno6pqr7stu8vwx9yz11aab2bcc3dd4ee5ff6gg7hh8ii9j0jk1kl2lmm3nnoo4p5pq6qrr7ss8tt9uuvv0wwx1x2yyzz13aba4cbcb5dcdc6dedfef8egf9gfh0ghg1ihi2hji3jik4jkj5lkl6kml7mln8mnm9ono --><html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php echo $title ?></title>	<link rel="stylesheet" href="<?php echo $admin_dir; ?>css/install.css" type="text/css" /><?phpif ( 'rtl' == $text_direction ) : ?>	<link rel="stylesheet" href="<?php echo $admin_dir; ?>css/install-rtl.css" type="text/css" /><?php endif; ?></head><body id="error-page"><?php endif; ?>	<?php echo $message; ?></body></html><?php	die();}/** * Retrieve the WordPress home page URL. * * If the constant named 'WP_HOME' exists, then it willl be used and returned by * the function. This can be used to counter the redirection on your local * development environment. * * @access private * @package WordPress * @since 2.2.0 * * @param string $url URL for the home location * @return string Homepage location. */function _config_wp_home( $url = '' ) {	if ( defined( 'WP_HOME' ) )		return WP_HOME;	return $url;}/** * Retrieve the WordPress site URL. * * If the constant named 'WP_SITEURL' is defined, then the value in that * constant will always be returned. This can be used for debugging a site on * your localhost while not having to change the database to your URL. * * @access private * @package WordPress * @since 2.2.0 * * @param string $url URL to set the WordPress site location. * @return string The WordPress Site URL */function _config_wp_siteurl( $url = '' ) {	if ( defined( 'WP_SITEURL' ) )		return WP_SITEURL;	return $url;}/** * Set the localized direction for MCE plugin. * * Will only set the direction to 'rtl', if the WordPress locale has the text * direction set to 'rtl'. * * Fills in the 'directionality', 'plugins', and 'theme_advanced_button1' array * keys. These keys are then returned in the $input array. * * @access private * @package WordPress * @subpackage MCE * @since 2.1.0 * * @param array $input MCE plugin array. * @return array Direction set for 'rtl', if needed by locale. */function _mce_set_direction( $input ) {	if ( is_rtl() ) {		$input['directionality'] = 'rtl';		$input['plugins'] .= ',directionality';		$input['theme_advanced_buttons1'] .= ',ltr';	}	return $input;}/** * Convert smiley code to the icon graphic file equivalent. * * You can turn off smilies, by going to the write setting screen and unchecking * the box, or by setting 'use_smilies' option to false or removing the option. * * Plugins may override the default smiley list by setting the $wpsmiliestrans * to an array, with the key the code the blogger types in and the value the * image file. * * The $wp_smiliessearch global is for the regular expression and is set each * time the function is called. * * The full list of smilies can be found in the function and won't be listed in * the description. Probably should create a Codex page for it, so that it is * available. * * @global array $wpsmiliestrans * @global array $wp_smiliessearch * @since 2.2.0 */function smilies_init() {	global $wpsmiliestrans, $wp_smiliessearch;	// don't bother setting up smilies if they are disabled	if ( !get_option( 'use_smilies' ) )		return;	if ( !isset( $wpsmiliestrans ) ) {		$wpsmiliestrans = array(		':mrgreen:' => 'icon_mrgreen.gif',		':neutral:' => 'icon_neutral.gif',		':twisted:' => 'icon_twisted.gif',		  ':arrow:' => 'icon_arrow.gif',		  ':shock:' => 'icon_eek.gif',		  ':smile:' => 'icon_smile.gif',		    ':???:' => 'icon_confused.gif',		   ':cool:' => 'icon_cool.gif',		   ':evil:' => 'icon_evil.gif',		   ':grin:' => 'icon_biggrin.gif',		   ':idea:' => 'icon_idea.gif',		   ':oops:' => 'icon_redface.gif',		   ':razz:' => 'icon_razz.gif',		   ':roll:' => 'icon_rolleyes.gif',		   ':wink:' => 'icon_wink.gif',		    ':cry:' => 'icon_cry.gif',		    ':eek:' => 'icon_surprised.gif',		    ':lol:' => 'icon_lol.gif',		    ':mad:' => 'icon_mad.gif',		    ':sad:' => 'icon_sad.gif',		      '8-)' => 'icon_cool.gif',		      '8-O' => 'icon_eek.gif',		      ':-(' => 'icon_sad.gif',		      ':-)' => 'icon_smile.gif',		      ':-?' => 'icon_confused.gif',		      ':-D' => 'icon_biggrin.gif',		      ':-P' => 'icon_razz.gif',		      ':-o' => 'icon_surprised.gif',		      ':-x' => 'icon_mad.gif',		      ':-|' => 'icon_neutral.gif',		      ';-)' => 'icon_wink.gif',		       '8)' => 'icon_cool.gif',		       '8O' => 'icon_eek.gif',		       ':(' => 'icon_sad.gif',		       ':)' => 'icon_smile.gif',		       ':?' => 'icon_confused.gif',		       ':D' => 'icon_biggrin.gif',		       ':P' => 'icon_razz.gif',		       ':o' => 'icon_surprised.gif',		       ':x' => 'icon_mad.gif',		       ':|' => 'icon_neutral.gif',		       ';)' => 'icon_wink.gif',		      ':!:' => 'icon_exclaim.gif',		      ':?:' => 'icon_question.gif',		);	}	if (count($wpsmiliestrans) == 0) {		return;	}	/*	 * NOTE: we sort the smilies in reverse key order. This is to make sure	 * we match the longest possible smilie (:???: vs :?) as the regular	 * expression used below is first-match	 */	krsort($wpsmiliestrans);	$wp_smiliessearch = '/(?:\s|^)';	$subchar = '';	foreach ( (array) $wpsmiliestrans as $smiley => $img ) {		$firstchar = substr($smiley, 0, 1);		$rest = substr($smiley, 1);		// new subpattern?		if ($firstchar != $subchar) {			if ($subchar != '') {				$wp_smiliessearch .= ')|(?:\s|^)';			}			$subchar = $firstchar;			$wp_smiliessearch .= preg_quote($firstchar, '/') . '(?:';		} else {			$wp_smiliessearch .= '|';		}		$wp_smiliessearch .= preg_quote($rest, '/');	}	$wp_smiliessearch .= ')(?:\s|$)/m';}/** * Merge user defined arguments into defaults array. * * This function is used throughout WordPress to allow for both string or array * to be merged into another array. * * @since 2.2.0 * * @param string|array $args Value to merge with $defaults * @param array $defaults Array that serves as the defaults. * @return array Merged user defined values with defaults. */function wp_parse_args( $args, $defaults = '' ) {	if ( is_object( $args ) )		$r = get_object_vars( $args );	elseif ( is_array( $args ) )		$r =& $args;	else		wp_parse_str( $args, $r );	if ( is_array( $defaults ) )		return array_merge( $defaults, $r );	return $r;}/** * Clean up an array, comma- or space-separated list of IDs * * @since 3.0.0 * * @param array|string $list * @return array Sanitized array of IDs */function wp_parse_id_list( $list ) {	if ( !is_array($list) )		$list = preg_split('/[\s,]+/', $list);	return array_unique(array_map('absint', $list));}/** * Filters a list of objects, based on a set of key => value arguments * * @since 3.0.0 * * @param array $list An array of objects to filter * @param array $args An array of key => value arguments to match against each object * @param string $operator The logical operation to perform. 'or' means only one element *	from the array needs to match; 'and' means all elements must match. The default is 'and'. * @param bool|string $field A field from the object to place instead of the entire object * @return array A list of objects or object fields */function wp_filter_object_list( $list, $args = array(), $operator = 'and', $field = false ) {	if ( !is_array($list) )		return array();	if ( empty($args) )		$args = array();	if ( empty($args) && !$field )		return $list;	// nothing to do	$count = count($args);	$filtered = array();	foreach ( $list as $key => $obj ) {		$matched = count(array_intersect_assoc(get_object_vars($obj), $args));		if ( ('and' == $operator && $matched == $count) || ('or' == $operator && $matched <= $count) ) {			if ( $field )				$filtered[] = $obj->$field;			else				$filtered[$key] = $obj;		}	}	return $filtered;}/** * Determines if default embed handlers should be loaded. * * Checks to make sure that the embeds library hasn't already been loaded. If * it hasn't, then it will load the embeds library. * * @since 2.9.0 */function wp_maybe_load_embeds() {	if ( ! apply_filters('load_default_embeds', true) )		return;	require_once( ABSPATH . WPINC . '/default-embeds.php' );}/** * Determines if Widgets library should be loaded. * * Checks to make sure that the widgets library hasn't already been loaded. If * it hasn't, then it will load the widgets library and run an action hook. * * @since 2.2.0 * @uses add_action() Calls '_admin_menu' hook with 'wp_widgets_add_menu' value. */function wp_maybe_load_widgets() {	if ( ! apply_filters('load_default_widgets', true) )		return;	require_once( ABSPATH . WPINC . '/default-widgets.php' );	add_action( '_admin_menu', 'wp_widgets_add_menu' );}/** * Append the Widgets menu to the themes main menu. * * @since 2.2.0 * @uses $submenu The administration submenu list. */function wp_widgets_add_menu() {	global $submenu;	$submenu['themes.php'][7] = array( __( 'Widgets' ), 'edit_theme_options', 'widgets.php' );	ksort( $submenu['themes.php'], SORT_NUMERIC );}/** * Flush all output buffers for PHP 5.2. * * Make sure all output buffers are flushed before our singletons our destroyed. * * @since 2.2.0 */function wp_ob_end_flush_all() {	$levels = ob_get_level();	for ($i=0; $i<$levels; $i++)		ob_end_flush();}/** * Load the correct database class file. * * This function is used to load the database class file either at runtime or by * wp-admin/setup-config.php We must globalise $wpdb to ensure that it is * defined globally by the inline code in wp-db.php. * * @since 2.5.0 * @global $wpdb WordPress Database Object */function require_wp_db() {	global $wpdb;	if ( file_exists( WP_CONTENT_DIR . '/db.php' ) )		require_once( WP_CONTENT_DIR . '/db.php' );	else		require_once( ABSPATH . WPINC . '/wp-db.php' );}/** * Load custom DB error or display WordPress DB error. * * If a file exists in the wp-content directory named db-error.php, then it will * be loaded instead of displaying the WordPress DB error. If it is not found, * then the WordPress DB error will be displayed instead. * * The WordPress DB error sets the HTTP status header to 500 to try to prevent * search engines from caching the message. Custom DB messages should do the * same. * * This function was backported to the the WordPress 2.3.2, but originally was * added in WordPress 2.5.0. * * @since 2.3.2 * @uses $wpdb */function dead_db() {	global $wpdb;	// Load custom DB error template, if present.	if ( file_exists( WP_CONTENT_DIR . '/db-error.php' ) ) {		require_once( WP_CONTENT_DIR . '/db-error.php' );		die();	}	// If installing or in the admin, provide the verbose message.	if ( defined('WP_INSTALLING') || defined('WP_ADMIN') )		wp_die($wpdb->error);	// Otherwise, be terse.	status_header( 500 );	nocache_headers();	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title>Database Error</title></head><body>	<h1>Error establishing a database connection</h1></body></html><?php	die();}/** * Converts value to nonnegative integer. * * @since 2.5.0 * * @param mixed $maybeint Data you wish to have convered to an nonnegative integer * @return int An nonnegative integer */function absint( $maybeint ) {	return abs( intval( $maybeint ) );}/** * Determines if the blog can be accessed over SSL. * * Determines if blog can be accessed over SSL by using cURL to access the site * using the https in the siteurl. Requires cURL extension to work correctly. * * @since 2.5.0 * * @param string $url * @return bool Whether SSL access is available */function url_is_accessable_via_ssl($url){	if (in_array('curl', get_loaded_extensions())) {		$ssl = preg_replace( '/^http:\/\//', 'https://',  $url );		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $ssl);		curl_setopt($ch, CURLOPT_FAILONERROR, true);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);		curl_exec($ch);		$status = curl_getinfo($ch, CURLINFO_HTTP_CODE);		curl_close ($ch);		if ($status == 200 || $status == 401) {			return true;		}	}	return false;}/** * Secure URL, if available or the given URL. * * @since 2.5.0 * * @param string $url Complete URL path with transport. * @return string Secure or regular URL path. */function atom_service_url_filter($url){	if ( url_is_accessable_via_ssl($url) )		return preg_replace( '/^http:\/\//', 'https://',  $url );	else		return $url;}/** * Marks a function as deprecated and informs when it has been used. * * There is a hook deprecated_function_run that will be called that can be used * to get the backtrace up to what file and function called the deprecated * function. * * The current behavior is to trigger an user error if WP_DEBUG is true. * * This function is to be used in every function in depreceated.php * * @package WordPress * @subpackage Debug * @since 2.5.0 * @access private * * @uses do_action() Calls 'deprecated_function_run' and passes the function name, what to use instead, *   and the version the function was deprecated in. * @uses apply_filters() Calls 'deprecated_function_trigger_error' and expects boolean value of true to do *   trigger or false to not trigger error. * * @param string $function The function that was called * @param string $version The version of WordPress that deprecated the function * @param string $replacement Optional. The function that should have been called */function _deprecated_function( $function, $version, $replacement=null ) {	do_action( 'deprecated_function_run', $function, $replacement, $version );	// Allow plugin to filter the output error trigger	if ( WP_DEBUG && apply_filters( 'deprecated_function_trigger_error', true ) ) {		if ( ! is_null($replacement) )			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $function, $version, $replacement ) );		else			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );	}}/** * Marks a file as deprecated and informs when it has been used. * * There is a hook deprecated_file_included that will be called that can be used * to get the backtrace up to what file and function included the deprecated * file. * * The current behavior is to trigger an user error if WP_DEBUG is true. * * This function is to be used in every file that is depreceated * * @package WordPress * @subpackage Debug * @since 2.5.0 * @access private * * @uses do_action() Calls 'deprecated_file_included' and passes the file name, what to use instead, *   the version in which the file was deprecated, and any message regarding the change. * @uses apply_filters() Calls 'deprecated_file_trigger_error' and expects boolean value of true to do *   trigger or false to not trigger error. * * @param string $file The file that was included * @param string $version The version of WordPress that deprecated the file * @param string $replacement Optional. The file that should have been included based on ABSPATH * @param string $message Optional. A message regarding the change */function _deprecated_file( $file, $version, $replacement = null, $message = '' ) {	do_action( 'deprecated_file_included', $file, $replacement, $version, $message );	// Allow plugin to filter the output error trigger	if ( WP_DEBUG && apply_filters( 'deprecated_file_trigger_error', true ) ) {		$message = empty( $message ) ? '' : ' ' . $message;		if ( ! is_null( $replacement ) )			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $file, $version, $replacement ) . $message );		else			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $file, $version ) . $message );	}}/** * Marks a function argument as deprecated and informs when it has been used. * * This function is to be used whenever a deprecated function argument is used. * Before this function is called, the argument must be checked for whether it was * used by comparing it to its default value or evaluating whether it is empty. * For example: * <code> * if ( !empty($deprecated) ) * 	_deprecated_argument( __FUNCTION__, '3.0' ); * </code> * * There is a hook deprecated_argument_run that will be called that can be used * to get the backtrace up to what file and function used the deprecated * argument. * * The current behavior is to trigger an user error if WP_DEBUG is true. * * @package WordPress * @subpackage Debug * @since 3.0.0 * @access private * * @uses do_action() Calls 'deprecated_argument_run' and passes the function name, a message on the change, *   and the version in which the argument was deprecated. * @uses apply_filters() Calls 'deprecated_argument_trigger_error' and expects boolean value of true to do *   trigger or false to not trigger error. * * @param string $function The function that was called * @param string $version The version of WordPress that deprecated the argument used * @param string $message Optional. A message regarding the change. */function _deprecated_argument( $function, $version, $message = null ) {	do_action( 'deprecated_argument_run', $function, $message, $version );	// Allow plugin to filter the output error trigger	if ( WP_DEBUG && apply_filters( 'deprecated_argument_trigger_error', true ) ) {		if ( ! is_null( $message ) )			trigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s'), $function, $version, $message ) );		else			trigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );	}}/** * Is the server running earlier than 1.5.0 version of lighttpd * * @since 2.5.0 * * @return bool Whether the server is running lighttpd < 1.5.0 */function is_lighttpd_before_150() {	$server_parts = explode( '/', isset( $_SERVER['SERVER_SOFTWARE'] )? $_SERVER['SERVER_SOFTWARE'] : '' );	$server_parts[1] = isset( $server_parts[1] )? $server_parts[1] : '';	return  'lighttpd' == $server_parts[0] && -1 == version_compare( $server_parts[1], '1.5.0' );}/** * Does the specified module exist in the apache config? * * @since 2.5.0 * * @param string $mod e.g. mod_rewrite * @param bool $default The default return value if the module is not found * @return bool */function apache_mod_loaded($mod, $default = false) {	global $is_apache;	if ( !$is_apache )		return false;	if ( function_exists('apache_get_modules') ) {		$mods = apache_get_modules();		if ( in_array($mod, $mods) )			return true;	} elseif ( function_exists('phpinfo') ) {			ob_start();			phpinfo(8);			$phpinfo = ob_get_clean();			if ( false !== strpos($phpinfo, $mod) )				return true;	}	return $default;}/** * File validates against allowed set of defined rules. * * A return value of '1' means that the $file contains either '..' or './'. A * return value of '2' means that the $file contains ':' after the first * character. A return value of '3' means that the file is not in the allowed * files list. * * @since 1.2.0 * * @param string $file File path. * @param array $allowed_files List of allowed files. * @return int 0 means nothing is wrong, greater than 0 means something was wrong. */function validate_file( $file, $allowed_files = '' ) {	if ( false !== strpos( $file, '..' ))		return 1;	if ( false !== strpos( $file, './' ))		return 1;	if (!empty ( $allowed_files ) && (!in_array( $file, $allowed_files ) ) )		return 3;	if (':' == substr( $file, 1, 1 ))		return 2;	return 0;}/** * Determine if SSL is used. * * @since 2.6.0 * * @return bool True if SSL, false if not used. */function is_ssl() {	if ( isset($_SERVER['HTTPS']) ) {		if ( 'on' == strtolower($_SERVER['HTTPS']) )			return true;		if ( '1' == $_SERVER['HTTPS'] )			return true;	} elseif ( isset($_SERVER['SERVER_PORT']) && ( '443' == $_SERVER['SERVER_PORT'] ) ) {		return true;	}	return false;}/** * Whether SSL login should be forced. * * @since 2.6.0 * * @param string|bool $force Optional. * @return bool True if forced, false if not forced. */function force_ssl_login( $force = null ) {	static $forced = false;	if ( !is_null( $force ) ) {		$old_forced = $forced;		$forced = $force;		return $old_forced;	}	return $forced;}/** * Whether to force SSL used for the Administration Panels. * * @since 2.6.0 * * @param string|bool $force * @return bool True if forced, false if not forced. */function force_ssl_admin( $force = null ) {	static $forced = false;	if ( !is_null( $force ) ) {		$old_forced = $forced;		$forced = $force;		return $old_forced;	}	return $forced;}/** * Guess the URL for the site. * * Will remove wp-admin links to retrieve only return URLs not in the wp-admin * directory. * * @since 2.6.0 * * @return string */function wp_guess_url() {	if ( defined('WP_SITEURL') && '' != WP_SITEURL ) {		$url = WP_SITEURL;	} else {		$schema = is_ssl() ? 'https://' : 'http://';		$url = preg_replace('|/wp-admin/.*|i', '', $schema . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);	}	return $url;}/** * Suspend cache invalidation. * * Turns cache invalidation on and off.  Useful during imports where you don't wont to do invalidations * every time a post is inserted.  Callers must be sure that what they are doing won't lead to an inconsistent * cache when invalidation is suspended. * * @since 2.7.0 * * @param bool $suspend Whether to suspend or enable cache invalidation * @return bool The current suspend setting */function wp_suspend_cache_invalidation($suspend = true) {	global $_wp_suspend_cache_invalidation;	$current_suspend = $_wp_suspend_cache_invalidation;	$_wp_suspend_cache_invalidation = $suspend;	return $current_suspend;}/** * Retrieve site option value based on name of option. * * @see get_option() * @package WordPress * @subpackage Option * @since 2.8.0 * * @uses apply_filters() Calls 'pre_site_option_$option' before checking the option. * 	Any value other than false will "short-circuit" the retrieval of the option *	and return the returned value. * @uses apply_filters() Calls 'site_option_$option', after checking the  option, with * 	the option value. * * @param string $option Name of option to retrieve. Expected to not be SQL-escaped. * @param mixed $default Optional value to return if option doesn't exist. Default false. * @param bool $use_cache Whether to use cache. Multisite only. Default true. * @return mixed Value set for the option. */function get_site_option( $option, $default = false, $use_cache = true ) {	global $wpdb;	// Allow plugins to short-circuit site options. 	$pre = apply_filters( 'pre_site_option_' . $option, false ); 	if ( false !== $pre ) 		return $pre;	if ( !is_multisite() ) {		$value = get_option($option, $default);	} else {		$cache_key = "{$wpdb->siteid}:$option";		if ( $use_cache )			$value = wp_cache_get($cache_key, 'site-options');		if ( !isset($value) || (false === $value) ) {			$row = $wpdb->get_row( $wpdb->prepare("SELECT meta_value FROM $wpdb->sitemeta WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) );			// Has to be get_row instead of get_var because of funkiness with 0, false, null values			if ( is_object( $row ) )				$value = $row->meta_value;			else				$value = $default;			$value = maybe_unserialize( $value );			wp_cache_set( $cache_key, $value, 'site-options' );		}	} 	return apply_filters( 'site_option_' . $option, $value );}/** * Add a new site option. * * @see add_option() * @package WordPress * @subpackage Option * @since 2.8.0 * * @uses apply_filters() Calls 'pre_add_site_option_$option' hook to allow overwriting the * 	option value to be stored. * @uses do_action() Calls 'add_site_option_$option' and 'add_site_option' hooks on success. * * @param string $option Name of option to add. Expected to not be SQL-escaped. * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped. * @return bool False if option was not added and true if option was added. */function add_site_option( $option, $value ) {	global $wpdb;	$value = apply_filters( 'pre_add_site_option_' . $option, $value );	if ( !is_multisite() ) {		$result = add_option( $option, $value );	} else {		$cache_key = "{$wpdb->siteid}:$option";		if ( $wpdb->get_row( $wpdb->prepare( "SELECT meta_value FROM $wpdb->sitemeta WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) ) )			return update_site_option( $option, $value );		$value = sanitize_option( $option, $value );		wp_cache_set( $cache_key, $value, 'site-options' );		$_value = $value;		$value = maybe_serialize($value);		$result = $wpdb->insert( $wpdb->sitemeta, array('site_id' => $wpdb->siteid, 'meta_key' => $option, 'meta_value' => $value ) );		$value = $_value;	}	do_action( "add_site_option_{$option}", $option, $value );	do_action( "add_site_option", $option, $value );	return $result;}/** * Removes site option by name. * * @see delete_option() * @package WordPress * @subpackage Option * @since 2.8.0 * * @uses do_action() Calls 'pre_delete_site_option_$option' hook before option is deleted. * @uses do_action() Calls 'delete_site_option' and 'delete_site_option_$option' * 	hooks on success. * * @param string $option Name of option to remove. Expected to not be SQL-escaped. * @return bool True, if succeed. False, if failure. */function delete_site_option( $option ) {	global $wpdb;	// ms_protect_special_option( $option ); @todo	do_action( 'pre_delete_site_option_' . $option );	if ( !is_multisite() ) {		$result = delete_option( $option );	} else {		$row = $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM {$wpdb->sitemeta} WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) );		if ( is_null( $row ) || !$row->meta_id )			return false;		$cache_key = "{$wpdb->siteid}:$option";		wp_cache_delete( $cache_key, 'site-options' );		$result = $wpdb->query( $wpdb->prepare( "DELETE FROM {$wpdb->sitemeta} WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) );	}	if ( $result ) {		do_action( "delete_site_option_{$option}", $option );		do_action( "delete_site_option", $option );		return true;	}	return false;}/** * Update the value of a site option that was already added. * * @see update_option() * @since 2.8.0 * @package WordPress * @subpackage Option * * @uses apply_filters() Calls 'pre_update_site_option_$option' hook to allow overwriting the * 	option value to be stored. * @uses do_action() Calls 'update_site_option_$option' and 'update_site_option' hooks on success. * * @param string $option Name of option. Expected to not be SQL-escaped. * @param mixed $value Option value. Expected to not be SQL-escaped. * @return bool False if value was not updated and true if value was updated. */function update_site_option( $option, $value ) {	global $wpdb;	$oldvalue = get_site_option( $option );	$value = apply_filters( 'pre_update_site_option_' . $option, $value, $oldvalue );	if ( $value === $oldvalue )		return false;	if ( !is_multisite() ) {		$result = update_option( $option, $value );	} else {		$cache_key = "{$wpdb->siteid}:$option";		if ( $value && !$wpdb->get_row( $wpdb->prepare( "SELECT meta_value FROM $wpdb->sitemeta WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) ) )			return add_site_option( $option, $value );		$value = sanitize_option( $option, $value );		wp_cache_set( $cache_key, $value, 'site-options' );		$_value = $value;		$value = maybe_serialize( $value );		$result = $wpdb->update( $wpdb->sitemeta, array( 'meta_value' => $value ), array( 'site_id' => $wpdb->siteid, 'meta_key' => $option ) );		$value = $_value;	}	if ( $result ) {		do_action( "update_site_option_{$option}", $option, $value );		do_action( "update_site_option", $option, $value );		return true;	}	return false;}/** * Delete a site transient * * @since 2.9.0 * @package WordPress * @subpackage Transient * * @uses do_action() Calls 'delete_site_transient_$transient' hook before transient is deleted. * @uses do_action() Calls 'deleted_site_transient' hook on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @return bool True if successful, false otherwise */function delete_site_transient( $transient ) {	global $_wp_using_ext_object_cache;	do_action( 'delete_site_transient_' . $transient, $transient );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_delete( $transient, 'site-transient' );	} else {		$option_timeout = '_site_transient_timeout_' . $transient;		$option = '_site_transient_' . $transient;		$result = delete_site_option( $option );		if ( $result )			delete_site_option( $option_timeout );	}	if ( $result )		do_action( 'deleted_site_transient', $transient );	return $result;}/** * Get the value of a site transient * * If the transient does not exist or does not have a value, then the return value * will be false. * * @see get_transient() * @since 2.9.0 * @package WordPress * @subpackage Transient * * @uses apply_filters() Calls 'pre_site_transient_$transient' hook before checking the transient. * 	Any value other than false will "short-circuit" the retrieval of the transient *	and return the returned value. * @uses apply_filters() Calls 'site_transient_$option' hook, after checking the transient, with * 	the transient value. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @return mixed Value of transient */function get_site_transient( $transient ) {	global $_wp_using_ext_object_cache;	$pre = apply_filters( 'pre_site_transient_' . $transient, false );	if ( false !== $pre )		return $pre;	if ( $_wp_using_ext_object_cache ) {		$value = wp_cache_get( $transient, 'site-transient' );	} else {		// Core transients that do not have a timeout. Listed here so querying timeouts can be avoided.		$no_timeout = array('update_core', 'update_plugins', 'update_themes');		$transient_option = '_site_transient_' . $transient;		if ( ! in_array( $transient, $no_timeout ) ) {			$transient_timeout = '_site_transient_timeout_' . $transient;			$timeout = get_site_option( $transient_timeout );			if ( false !== $timeout && $timeout < time() ) {				delete_site_option( $transient_option  );				delete_site_option( $transient_timeout );				return false;			}		}		$value = get_site_option( $transient_option );	}	return apply_filters( 'site_transient_' . $transient, $value );}/** * Set/update the value of a site transient * * You do not need to serialize values, if the value needs to be serialize, then * it will be serialized before it is set. * * @see set_transient() * @since 2.9.0 * @package WordPress * @subpackage Transient * * @uses apply_filters() Calls 'pre_set_site_transient_$transient' hook to allow overwriting the * 	transient value to be stored. * @uses do_action() Calls 'set_site_transient_$transient' and 'setted_site_transient' hooks on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @param mixed $value Transient value. Expected to not be SQL-escaped. * @param int $expiration Time until expiration in seconds, default 0 * @return bool False if value was not set and true if value was set. */function set_site_transient( $transient, $value, $expiration = 0 ) {	global $_wp_using_ext_object_cache;    $value = apply_filters( 'pre_set_site_transient_' . $transient, $value );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_set( $transient, $value, 'site-transient', $expiration );	} else {		$transient_timeout = '_site_transient_timeout_' . $transient;		$transient = '_site_transient_' . $transient;		if ( false === get_site_option( $transient ) ) {			if ( $expiration )				add_site_option( $transient_timeout, time() + $expiration );			$result = add_site_option( $transient, $value );		} else {			if ( $expiration )				update_site_option( $transient_timeout, time() + $expiration );			$result = update_site_option( $transient, $value );		}	}	if ( $result ) {		do_action( 'set_site_transient_' . $transient );		do_action( 'setted_site_transient', $transient );	}	return $result;}/** * is main site * * * @since 3.0.0 * @package WordPress * * @param int $blog_id optional blog id to test (default current blog) * @return bool True if not multisite or $blog_id is main site */function is_main_site( $blog_id = '' ) {	global $current_site, $current_blog;	if ( !is_multisite() )		return true;	if ( !$blog_id )		$blog_id = $current_blog->blog_id;	return $blog_id == $current_site->blog_id;}/** * Whether global terms are enabled. * * * @since 3.0.0 * @package WordPress * * @return bool True if multisite and global terms enabled */function global_terms_enabled() {	if ( ! is_multisite() )		return false;	static $global_terms = null;	if ( is_null( $global_terms ) ) {		$filter = apply_filters( 'global_terms_enabled', null );		if ( ! is_null( $filter ) )			$global_terms = (bool) $filter;		else			$global_terms = (bool) get_site_option( 'global_terms_enabled', false );	}	return $global_terms;}/** * gmt_offset modification for smart timezone handling * * Overrides the gmt_offset option if we have a timezone_string available * * @since 2.8.0 * * @return float|bool */function wp_timezone_override_offset() {	if ( !wp_timezone_supported() ) {		return false;	}	if ( !$timezone_string = get_option( 'timezone_string' ) ) {		return false;	}	$timezone_object = timezone_open( $timezone_string );	$datetime_object = date_create();	if ( false === $timezone_object || false === $datetime_object ) {		return false;	}	return round( timezone_offset_get( $timezone_object, $datetime_object ) / 3600, 2 );}/** * Check for PHP timezone support * * @since 2.9.0 * * @return bool */function wp_timezone_supported() {	$support = false;	if (		function_exists( 'date_create' ) &&		function_exists( 'date_default_timezone_set' ) &&		function_exists( 'timezone_identifiers_list' ) &&		function_exists( 'timezone_open' ) &&		function_exists( 'timezone_offset_get' )	) {		$support = true;	}	return apply_filters( 'timezone_support', $support );}/** * {@internal Missing Short Description}} * * @since 2.9.0 * * @param unknown_type $a * @param unknown_type $b * @return int */function _wp_timezone_choice_usort_callback( $a, $b ) {	// Don't use translated versions of Etc	if ( 'Etc' === $a['continent'] && 'Etc' === $b['continent'] ) {		// Make the order of these more like the old dropdown		if ( 'GMT+' === substr( $a['city'], 0, 4 ) && 'GMT+' === substr( $b['city'], 0, 4 ) ) {			return -1 * ( strnatcasecmp( $a['city'], $b['city'] ) );		}		if ( 'UTC' === $a['city'] ) {			if ( 'GMT+' === substr( $b['city'], 0, 4 ) ) {				return 1;			}			return -1;		}		if ( 'UTC' === $b['city'] ) {			if ( 'GMT+' === substr( $a['city'], 0, 4 ) ) {				return -1;			}			return 1;		}		return strnatcasecmp( $a['city'], $b['city'] );	}	if ( $a['t_continent'] == $b['t_continent'] ) {		if ( $a['t_city'] == $b['t_city'] ) {			return strnatcasecmp( $a['t_subcity'], $b['t_subcity'] );		}		return strnatcasecmp( $a['t_city'], $b['t_city'] );	} else {		// Force Etc to the bottom of the list		if ( 'Etc' === $a['continent'] ) {			return 1;		}		if ( 'Etc' === $b['continent'] ) {			return -1;		}		return strnatcasecmp( $a['t_continent'], $b['t_continent'] );	}}/** * Gives a nicely formatted list of timezone strings // temporary! Not in final * * @since 2.9.0 * * @param string $selected_zone Selected Zone * @return string */function wp_timezone_choice( $selected_zone ) {	static $mo_loaded = false;	$continents = array( 'Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	// Load translations for continents and cities	if ( !$mo_loaded ) {		$locale = get_locale();		$mofile = WP_LANG_DIR . '/continents-cities-' . $locale . '.mo';		load_textdomain( 'continents-cities', $mofile );		$mo_loaded = true;	}	$zonen = array();	foreach ( timezone_identifiers_list() as $zone ) {		$zone = explode( '/', $zone );		if ( !in_array( $zone[0], $continents ) ) {			continue;		}		// This determines what gets set and translated - we don't translate Etc/* strings here, they are done later		$exists = array(			0 => ( isset( $zone[0] ) && $zone[0] ),			1 => ( isset( $zone[1] ) && $zone[1] ),			2 => ( isset( $zone[2] ) && $zone[2] ),		);		$exists[3] = ( $exists[0] && 'Etc' !== $zone[0] );		$exists[4] = ( $exists[1] && $exists[3] );		$exists[5] = ( $exists[2] && $exists[3] );		$zonen[] = array(			'continent'   => ( $exists[0] ? $zone[0] : '' ),			'city'        => ( $exists[1] ? $zone[1] : '' ),			'subcity'     => ( $exists[2] ? $zone[2] : '' ),			't_continent' => ( $exists[3] ? translate( str_replace( '_', ' ', $zone[0] ), 'continents-cities' ) : '' ),			't_city'      => ( $exists[4] ? translate( str_replace( '_', ' ', $zone[1] ), 'continents-cities' ) : '' ),			't_subcity'   => ( $exists[5] ? translate( str_replace( '_', ' ', $zone[2] ), 'continents-cities' ) : '' )		);	}	usort( $zonen, '_wp_timezone_choice_usort_callback' );	$structure = array();	if ( empty( $selected_zone ) ) {		$structure[] = '<option selected="selected" value="">' . __( 'Select a city' ) . '</option>';	}	foreach ( $zonen as $key => $zone ) {		// Build value in an array to join later		$value = array( $zone['continent'] );		if ( empty( $zone['city'] ) ) {			// It's at the continent level (generally won't happen)			$display = $zone['t_continent'];		} else {			// It's inside a continent group			// Continent optgroup			if ( !isset( $zonen[$key - 1] ) || $zonen[$key - 1]['continent'] !== $zone['continent'] ) {				$label = $zone['t_continent'];				$structure[] = '<optgroup label="'. esc_attr( $label ) .'">';			}			// Add the city to the value			$value[] = $zone['city'];			$display = $zone['t_city'];			if ( !empty( $zone['subcity'] ) ) {				// Add the subcity to the value				$value[] = $zone['subcity'];				$display .= ' - ' . $zone['t_subcity'];			}		}		// Build the value		$value = join( '/', $value );		$selected = '';		if ( $value === $selected_zone ) {			$selected = 'selected="selected" ';		}		$structure[] = '<option ' . $selected . 'value="' . esc_attr( $value ) . '">' . esc_html( $display ) . "</option>";		// Close continent optgroup		if ( !empty( $zone['city'] ) && ( !isset($zonen[$key + 1]) || (isset( $zonen[$key + 1] ) && $zonen[$key + 1]['continent'] !== $zone['continent']) ) ) {			$structure[] = '</optgroup>';		}	}	// Do UTC	$structure[] = '<optgroup label="'. esc_attr__( 'UTC' ) .'">';	$selected = '';	if ( 'UTC' === $selected_zone )		$selected = 'selected="selected" ';	$structure[] = '<option ' . $selected . 'value="' . esc_attr( 'UTC' ) . '">' . __('UTC') . '</option>';	$structure[] = '</optgroup>';	// Do manual UTC offsets	$structure[] = '<optgroup label="'. esc_attr__( 'Manual Offsets' ) .'">';	$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,		0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);	foreach ( $offset_range as $offset ) {		if ( 0 <= $offset )			$offset_name = '+' . $offset;		else			$offset_name = (string) $offset;		$offset_value = $offset_name;		$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);		$offset_name = 'UTC' . $offset_name;		$offset_value = 'UTC' . $offset_value;		$selected = '';		if ( $offset_value === $selected_zone )			$selected = 'selected="selected" ';		$structure[] = '<option ' . $selected . 'value="' . esc_attr( $offset_value ) . '">' . esc_html( $offset_name ) . "</option>";	}	$structure[] = '</optgroup>';	return join( "\n", $structure );}/** * Strip close comment and close php tags from file headers used by WP * See http://core.trac.wordpress.org/ticket/8497 * * @since 2.8.0 * * @param string $str * @return string */function _cleanup_header_comment($str) {	return trim(preg_replace("/\s*(?:\*\/|\?>).*/", '', $str));}/** * Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS. * * @since 2.9.0 */function wp_scheduled_delete() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	$posts_to_delete = $wpdb->get_results($wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < '%d'", $delete_timestamp), ARRAY_A);	foreach ( (array) $posts_to_delete as $post ) {		$post_id = (int) $post['post_id'];		if ( !$post_id )			continue;		$del_post = get_post($post_id);		if ( !$del_post || 'trash' != $del_post->post_status ) {			delete_post_meta($post_id, '_wp_trash_meta_status');			delete_post_meta($post_id, '_wp_trash_meta_time');		} else {			wp_delete_post($post_id);		}	}	$comments_to_delete = $wpdb->get_results($wpdb->prepare("SELECT comment_id FROM $wpdb->commentmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < '%d'", $delete_timestamp), ARRAY_A);	foreach ( (array) $comments_to_delete as $comment ) {		$comment_id = (int) $comment['comment_id'];		if ( !$comment_id )			continue;		$del_comment = get_comment($comment_id);		if ( !$del_comment || 'trash' != $del_comment->comment_approved ) {			delete_comment_meta($comment_id, '_wp_trash_meta_time');			delete_comment_meta($comment_id, '_wp_trash_meta_status');		} else {			wp_delete_comment($comment_id);		}	}}/** * Parse the file contents to retrieve its metadata. * * Searches for metadata for a file, such as a plugin or theme.  Each piece of * metadata must be on its own line. For a field spanning multple lines, it * must not have any newlines or only parts of it will be displayed. * * Some users have issues with opening large files and manipulating the contents * for want is usually the first 1kiB or 2kiB. This function stops pulling in * the file contents when it has all of the required data. * * The first 8kiB of the file will be pulled in and if the file data is not * within that first 8kiB, then the author should correct their plugin file * and move the data headers to the top. * * The file is assumed to have permissions to allow for scripts to read * the file. This is not checked however and the file is only opened for * reading. * * @since 2.9.0 * * @param string $file Path to the file * @param bool $markup If the returned data should have HTML markup applied * @param string $context If specified adds filter hook "extra_<$context>_headers" */function get_file_data( $file, $default_headers, $context = '' ) {	// We don't need to write to the file, so just open for reading.	$fp = fopen( $file, 'r' );	// Pull only the first 8kiB of the file in.	$file_data = fread( $fp, 8192 );	// PHP will close file handle, but we are good citizens.	fclose( $fp );	if ( $context != '' ) {		$extra_headers = apply_filters( "extra_$context".'_headers', array() );		$extra_headers = array_flip( $extra_headers );		foreach( $extra_headers as $key=>$value ) {			$extra_headers[$key] = $key;		}		$all_headers = array_merge($extra_headers, $default_headers);	} else {		$all_headers = $default_headers;	}	foreach ( $all_headers as $field => $regex ) {		preg_match( '/' . preg_quote( $regex, '/' ) . ':(.*)$/mi', $file_data, ${$field});		if ( !empty( ${$field} ) )			${$field} = _cleanup_header_comment( ${$field}[1] );		else			${$field} = '';	}	$file_data = compact( array_keys( $all_headers ) );	return $file_data;}/* * Used internally to tidy up the search terms * * @access private * @since 2.9.0 * * @param string $t * @return string */function _search_terms_tidy($t) {	return trim($t, "\"'\n\r ");}/** * Returns true * * Useful for returning true to filters easily * * @since 3.0.0 * @see __return_false() * @return bool true */function __return_true() {	return true;}/** * Returns false * * Useful for returning false to filters easily * * @since 3.0.0 * @see __return_true() * @return bool false */function __return_false() {	return false;}/** * Returns 0 * * Useful for returning 0 to filters easily * * @since 3.0.0 * @see __return_zero() * @return int 0 */function __return_zero() {	return 0;}/** * Returns an empty array * * Useful for returning an empty array to filters easily * * @since 3.0.0 * @see __return_zero() * @return array Empty array */function __return_empty_array() {	return array();}/** * Send a HTTP header to disable content type sniffing in browsers which support it. * * @link http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx * @link http://src.chromium.org/viewvc/chrome?view=rev&revision=6985 * * @since 3.0.0 * @return none */function send_nosniff_header() {	@header( 'X-Content-Type-Options: nosniff' );}/** * Returns a MySQL expression for selecting the week number based on the start_of_week option. * * @internal * @since 3.0.0 * @param string $column * @return string */function _wp_mysql_week( $column ) {	switch ( $start_of_week = (int) get_option( 'start_of_week' ) ) {	default :	case 0 :		return "WEEK( $column, 0 )";	case 1 :		return "WEEK( $column, 1 )";	case 2 :	case 3 :	case 4 :	case 5 :	case 6 :		return "WEEK( DATE_SUB( $column, INTERVAL $start_of_week DAY ), 0 )";	}}?>
<?php/** * Link Management Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');// Handle bulk deletesif ( isset($_GET['action']) && isset($_GET['linkcheck']) ) {	check_admin_referer('bulk-bookmarks');	$doaction = $_GET['action'] ? $_GET['action'] : $_GET['action2'];	if ( ! current_user_can('manage_links') )		wp_die( __('You do not have sufficient permissions to edit the links for this site.') );	if ( 'delete' == $doaction ) {		$bulklinks = (array) $_GET['linkcheck'];		foreach ( $bulklinks as $link_id ) {			$link_id = (int) $link_id;			wp_delete_link($link_id);		}		wp_safe_redirect( wp_get_referer() );		exit;	}} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( empty($cat_id) )	$cat_id = 'all';if ( empty($order_by) )	$order_by = 'order_name';$title = __('Links');$this_file = $parent_file = 'link-manager.php';add_contextual_help( $current_screen,	'<p>' . sprintf(__('You can add links here to be displayed on your site, usually using <a href="%s">Widgets</a>. By default, links to several sites in the WordPress community are included as examples.'), 'widgets.php') . '</p>' .    '<p>' . __('Links may be separated into categories; these are different than the categories used on your posts.') . '</p>' .    '<p>' . __('You can customize the display of this screen using the Screen Options tab and/or the dropdown filters above the links table.') . '</p>' .    '<p>' . __('If you delete a link, it will be removed permanently, as Links do not have a Trash function yet.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Links_Edit_SubPanel" target="_blank">Link Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include_once ('./admin-header.php');if ( ! current_user_can('manage_links') )	wp_die(__("You do not have sufficient permissions to edit the links for this site."));switch ($order_by) {	case 'order_id' :		$sqlorderby = 'id';		break;	case 'order_url' :		$sqlorderby = 'url';		break;	case 'order_desc' :		$sqlorderby = 'description';		break;	case 'order_owner' :		$sqlorderby = 'owner';		break;	case 'order_rating' :		$sqlorderby = 'rating';		break;	case 'order_name' :	default :		$sqlorderby = 'name';		break;} ?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?> <a href="link-add.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'link'); ?></a> <?phpif ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?phpif ( isset($_GET['deleted']) ) {	echo '<div id="message" class="updated"><p>';	$deleted = (int) $_GET['deleted'];	printf(_n('%s link deleted.', '%s links deleted', $deleted), $deleted);	echo '</p></div>';	$_SERVER['REQUEST_URI'] = remove_query_arg(array('deleted'), $_SERVER['REQUEST_URI']);}?><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="link-search-input"><?php _e( 'Search Links' ); ?>:</label>	<input type="text" id="link-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Links' ); ?>" class="button" /></p></form><br class="clear" /><form id="posts-filter" action="" method="get"><div class="tablenav"><?phpif ( 'all' == $cat_id )	$cat_id = '';$args = array( 'category' => $cat_id, 'hide_invisible' => 0, 'orderby' => $sqlorderby, 'hide_empty' => 0 );if ( ! empty( $_GET['s'] ) )	$args['search'] = $_GET['s'];$links = get_bookmarks( $args );if ( $links ) {?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php$categories = get_terms('link_category', array("hide_empty" => 1));$select_cat = "<select name=\"cat_id\">\n";$select_cat .= '<option value="all"'  . (($cat_id == 'all') ? " selected='selected'" : '') . '>' . __('View all Categories') . "</option>\n";foreach ((array) $categories as $cat)	$select_cat .= '<option value="' . esc_attr($cat->term_id) . '"' . (($cat->term_id == $cat_id) ? " selected='selected'" : '') . '>' . sanitize_term_field('name', $cat->name, $cat->term_id, 'link_category', 'display') . "</option>\n";$select_cat .= "</select>\n";$select_order = "<select name=\"order_by\">\n";$select_order .= '<option value="order_id"' . (($order_by == 'order_id') ? " selected='selected'" : '') . '>' .  __('Order by Link ID') . "</option>\n";$select_order .= '<option value="order_name"' . (($order_by == 'order_name') ? " selected='selected'" : '') . '>' .  __('Order by Name') . "</option>\n";$select_order .= '<option value="order_url"' . (($order_by == 'order_url') ? " selected='selected'" : '') . '>' .  __('Order by Address') . "</option>\n";$select_order .= '<option value="order_rating"' . (($order_by == 'order_rating') ? " selected='selected'" : '') . '>' .  __('Order by Rating') . "</option>\n";$select_order .= "</select>\n";echo $select_cat;echo $select_order;?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /></div><br class="clear" /></div><div class="clear"></div><?php	$link_columns = get_column_headers('link-manager');	$hidden = get_hidden_columns('link-manager');?><?php wp_nonce_field('bulk-bookmarks') ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('link-manager'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('link-manager', false); ?>	</tr>	</tfoot>	<tbody><?php	$alt = 0;	foreach ($links as $link) {		$link = sanitize_bookmark($link);		$link->link_name = esc_attr($link->link_name);		$link->link_category = wp_get_link_cats($link->link_id);		$short_url = str_replace('http://', '', $link->link_url);		$short_url = preg_replace('/^www\./i', '', $short_url);		if ('/' == substr($short_url, -1))			$short_url = substr($short_url, 0, -1);		if (strlen($short_url) > 35)			$short_url = substr($short_url, 0, 32).'...';		$visible = ($link->link_visible == 'Y') ? __('Yes') : __('No');		$rating  = $link->link_rating;		$style = ($alt % 2) ? '' : ' class="alternate"';		++ $alt;		$edit_link = get_edit_bookmark_link();		?><tr id="link-<?php echo $link->link_id; ?>" valign="middle" <?php echo $style; ?>><?php		foreach($link_columns as $column_name=>$column_display_name) {			$class = "class=\"column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch($column_name) {				case 'cb':					echo '<th scope="row" class="check-column"><input type="checkbox" name="linkcheck[]" value="'. esc_attr($link->link_id) .'" /></th>';					break;				case 'name':					echo "<td $attributes><strong><a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $link->link_name)) . "'>$link->link_name</a></strong><br />";					$actions = array();					$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';					$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("link.php?action=delete&amp;link_id=$link->link_id", 'delete-bookmark_' . $link->link_id) . "' onclick=\"if ( confirm('" . esc_js(sprintf( __("You are about to delete this link '%s'\n  'Cancel' to stop, 'OK' to delete."), $link->link_name )) . "') ) { return true;}return false;\">" . __('Delete') . "</a>";					$action_count = count($actions);					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $linkaction ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						echo "<span class='$action'>$linkaction$sep</span>";					}					echo '</div>';					echo '</td>';					break;				case 'url':					echo "<td $attributes><a href='$link->link_url' title='".sprintf(__('Visit %s'), $link->link_name)."'>$short_url</a></td>";					break;				case 'categories':					?><td <?php echo $attributes ?>><?php					$cat_names = array();					foreach ($link->link_category as $category) {						$cat = get_term($category, 'link_category', OBJECT, 'display');						if ( is_wp_error( $cat ) )							echo $cat->get_error_message();						$cat_name = $cat->name;						if ( $cat_id != $category )							$cat_name = "<a href='link-manager.php?cat_id=$category'>$cat_name</a>";						$cat_names[] = $cat_name;					}					echo implode(', ', $cat_names);					?></td><?php					break;				case 'rel':					?><td <?php echo $attributes ?>><?php echo empty($link->link_rel) ? '<br />' : $link->link_rel; ?></td><?php					break;				case 'visible':					?><td <?php echo $attributes ?>><?php echo $visible; ?></td><?php					break;				case 'rating': 					?><td <?php echo $attributes ?>><?php echo $rating; ?></td><?php					break;				default:					?>					<td <?php echo $attributes ?>><?php do_action('manage_link_custom_column', $column_name, $link->link_id); ?></td>					<?php					break;			}		}		echo "\n    </tr>\n";	}?>	</tbody></table><div class="tablenav"><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><?php } else { ?><p><?php _e( 'No links found.' ) ?></p><?php } ?><br class="clear" /></div></form><div id="ajax-response"></div></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Feed API * * Many of the functions used in here belong in The Loop, or The Loop for the * Feeds. * * @package WordPress * @subpackage Feed *//** * RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.5.1 * @uses apply_filters() Calls 'get_bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. * @return string */function get_bloginfo_rss($show = '') {	$info = strip_tags(get_bloginfo($show));	return apply_filters('get_bloginfo_rss', convert_chars($info), $show);}/** * Display RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. */function bloginfo_rss($show = '') {	echo apply_filters('bloginfo_rss', get_bloginfo_rss($show), $show);}/** * Retrieve the default feed. * * The default feed is 'rss2', unless a plugin changes it through the * 'default_feed' filter. * * @package WordPress * @subpackage Feed * @since 2.5 * @uses apply_filters() Calls 'default_feed' hook on the default feed string. * * @return string Default feed, or for example 'rss2', 'atom', etc. */function get_default_feed() {	return apply_filters('default_feed', 'rss2');}/** * Retrieve the blog title for the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'get_wp_title_rss' hook on title. * @uses wp_title() See function for $sep parameter usage. * * @param string $sep Optional.How to separate the title. See wp_title() for more info. * @return string Error message on failure or blog title on success. */function get_wp_title_rss($sep = '&#187;') {	$title = wp_title($sep, false);	if ( is_wp_error( $title ) )		return $title->get_error_message();	$title = apply_filters('get_wp_title_rss', $title);	return $title;}/** * Display the blog title for display of the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'wp_title_rss' on the blog title. * @see wp_title() $sep parameter usage. * * @param string $sep Optional. */function wp_title_rss($sep = '&#187;') {	echo apply_filters('wp_title_rss', get_wp_title_rss($sep));}/** * Retrieve the current post title for the feed. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'the_title_rss' on the post title. * * @return string Current post title. */function get_the_title_rss() {	$title = get_the_title();	$title = apply_filters('the_title_rss', $title);	return $title;}/** * Display the post title in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses get_the_title_rss() Used to retrieve current post title. */function the_title_rss() {	echo get_the_title_rss();}/** * Retrieve the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function get_the_content_feed($feed_type = null) {	if ( !$feed_type )		$feed_type = get_default_feed();	$content = apply_filters('the_content', get_the_content());	$content = str_replace(']]>', ']]&gt;', $content);	return apply_filters('the_content_feed', $content, $feed_type);}/** * Display the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function the_content_feed($feed_type = null) {	echo get_the_content_feed();}/** * Display the post excerpt for the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_excerpt_rss' hook on the excerpt. */function the_excerpt_rss() {	$output = get_the_excerpt();	echo apply_filters('the_excerpt_rss', $output);}/** * Display the permalink to the post for use in feeds. * * @package WordPress * @subpackage Feed * @since 2.3.0 * @uses apply_filters() Call 'the_permalink_rss' on the post permalink */function the_permalink_rss() {	echo esc_url( apply_filters('the_permalink_rss', get_permalink() ));}/** * Outputs the link to the comments for the current post in an xml safe way * * @since 3.0.0 * @return none */function comments_link_feed() {	echo esc_url( get_comments_link() );}/** * Display the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. */function comment_guid($comment_id = null) {	echo esc_url( get_comment_guid($comment_id) );}/** * Retrieve the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. * @return bool|string false on failure or guid for comment on success. */function get_comment_guid($comment_id = null) {	$comment = get_comment($comment_id);	if ( !is_object($comment) )		return false;	return get_the_guid($comment->comment_post_ID) . '#comment-' . $comment->comment_ID;}/** * Display the link to the comments. * * @since 1.5.0 */function comment_link() {	echo esc_url( get_comment_link() );}/** * Retrieve the current comment author for use in the feeds. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'comment_author_rss' hook on comment author. * @uses get_comment_author() * * @return string Comment Author */function get_comment_author_rss() {	return apply_filters('comment_author_rss', get_comment_author() );}/** * Display the current comment author in the feed. * * @package WordPress * @subpackage Feed * @since 1.0.0 */function comment_author_rss() {	echo get_comment_author_rss();}/** * Display the current comment content for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.0.0 * @uses apply_filters() Calls 'comment_text_rss' filter on comment content. * @uses get_comment_text() */function comment_text_rss() {	$comment_text = get_comment_text();	$comment_text = apply_filters('comment_text_rss', $comment_text);	echo $comment_text;}/** * Retrieve all of the post categories, formatted for use in feeds. * * All of the categories for the current post in the feed loop, will be * retrieved and have feed markup added, so that they can easily be added to the * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds. * * @package WordPress * @subpackage Feed * @since 2.1.0 * @uses apply_filters() * * @param string $type Optional, default is the type returned by get_default_feed(). * @return string All of the post categories for displaying in the feed. */function get_the_category_rss($type = null) {	if ( empty($type) )		$type = get_default_feed();	$categories = get_the_category();	$tags = get_the_tags();	$the_list = '';	$cat_names = array();	$filter = 'rss';	if ( 'atom' == $type )		$filter = 'raw';	if ( !empty($categories) ) foreach ( (array) $categories as $category ) {		$cat_names[] = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);	}	if ( !empty($tags) ) foreach ( (array) $tags as $tag ) {		$cat_names[] = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);	}	$cat_names = array_unique($cat_names);	foreach ( $cat_names as $cat_name ) {		if ( 'rdf' == $type )			$the_list .= "\t\t<dc:subject><![CDATA[$cat_name]]></dc:subject>\n";		elseif ( 'atom' == $type )			$the_list .= sprintf( '<category scheme="%1$s" term="%2$s" />', esc_attr( apply_filters( 'get_bloginfo_rss', get_bloginfo( 'url' ) ) ), esc_attr( $cat_name ) );		else			$the_list .= "\t\t<category><![CDATA[" . @html_entity_decode( $cat_name, ENT_COMPAT, get_option('blog_charset') ) . "]]></category>\n";	}	return apply_filters('the_category_rss', $the_list, $type);}/** * Display the post categories in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @see get_the_category_rss() For better explanation. * * @param string $type Optional, default is the type returned by get_default_feed(). */function the_category_rss($type = null) {	echo get_the_category_rss($type);}/** * Display the HTML type based on the blog setting. * * The two possible values are either 'xhtml' or 'html'. * * @package WordPress * @subpackage Feed * @since 2.2.0 */function html_type_rss() {	$type = get_bloginfo('html_type');	if (strpos($type, 'xhtml') !== false)		$type = 'xhtml';	else		$type = 'html';	echo $type;}/** * Display the rss enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of enclosure HTML tag(s) with a URI and other * attributes. * * @package WordPress * @subpackage Template * @since 1.5.0 * @uses apply_filters() Calls 'rss_enclosure' hook on rss enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function rss_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = explode("\n", $enc);				//only get the the first element eg, audio/mpeg from 'audio/mpeg mpga mp2 mp3'				$t = preg_split('/[ \t]/', trim($enclosure[2]) );				$type = $t[0];				echo apply_filters('rss_enclosure', '<enclosure url="' . trim(htmlspecialchars($enclosure[0])) . '" length="' . trim($enclosure[1]) . '" type="' . $type . '" />' . "\n");			}		}	}}/** * Display the atom enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of link HTML tag(s) with a URI and other attributes. * * @package WordPress * @subpackage Template * @since 2.2.0 * @uses apply_filters() Calls 'atom_enclosure' hook on atom enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function atom_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val ) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = split("\n", $enc);				echo apply_filters('atom_enclosure', '<link href="' . trim(htmlspecialchars($enclosure[0])) . '" rel="enclosure" length="' . trim($enclosure[1]) . '" type="' . trim($enclosure[2]) . '" />' . "\n");			}		}	}}/** * Determine the type of a string of data with the data formatted. * * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1. * * In the case of WordPress, text is defined as containing no markup, * xhtml is defined as "well formed", and html as tag soup (i.e., the rest). * * Container div tags are added to xhtml values, per section 3.1.1.3. * * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1 * * @package WordPress * @subpackage Feed * @since 2.5 * * @param string $data Input string * @return array array(type, value) */function prep_atom_text_construct($data) {	if (strpos($data, '<') === false && strpos($data, '&') === false) {		return array('text', $data);	}	$parser = xml_parser_create();	xml_parse($parser, '<div>' . $data . '</div>', true);	$code = xml_get_error_code($parser);	xml_parser_free($parser);	if (!$code) {		if (strpos($data, '<') === false) {			return array('text', $data);		} else {			$data = "<div xmlns='http://www.w3.org/1999/xhtml'>$data</div>";			return array('xhtml', $data);		}	}	if (strpos($data, ']]>') == false) {		return array('html', "<![CDATA[$data]]>");	} else {		return array('html', htmlspecialchars($data));	}}/** * Display the link for the currently displayed feed in a XSS safe way. * * Generate a correct link for the atom:self element. * * @package WordPress * @subpackage Feed * @since 2.5 */function self_link() {	$host = @parse_url(home_url());	$host = $host['host'];	echo esc_url(		'http'		. ( (isset($_SERVER['https']) && $_SERVER['https'] == 'on') ? 's' : '' ) . '://'		. $host		. stripslashes($_SERVER['REQUEST_URI'])		);}/** * Return the content type for specified feed type. * * @package WordPress * @subpackage Feed * @since 2.8.0 */function feed_content_type( $type = '' ) {	if ( empty($type) )		$type = get_default_feed();	$types = array(		'rss'  => 'application/rss+xml',		'rss2' => 'application/rss+xml',		'rss-http'  => 'text/xml',		'atom' => 'application/atom+xml',		'rdf'  => 'application/rdf+xml'	);	$content_type = ( !empty($types[$type]) ) ? $types[$type] : 'application/octet-stream';	return apply_filters( 'feed_content_type', $content_type, $type );}/** * Build SimplePie object based on RSS or Atom feed from URL. * * @since 2.8 * * @param string $url URL to retrieve feed * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success */function fetch_feed($url) {	require_once (ABSPATH . WPINC . '/class-feed.php');	$feed = new SimplePie();	$feed->set_feed_url($url);	$feed->set_cache_class('WP_Feed_Cache');	$feed->set_file_class('WP_SimplePie_File');	$feed->set_cache_duration(apply_filters('wp_feed_cache_transient_lifetime', 43200, $url));	do_action_ref_array( 'wp_feed_options', array( &$feed, $url ) );	$feed->init();	$feed->handle_content_type();	if ( $feed->error() )		return new WP_Error('simplepie-error', $feed->error());	return $feed;}
<?php/** * A File upgrader class for WordPress. * * This set of classes are designed to be used to upgrade/install a local set of files on the filesystem via the Filesystem Abstraction classes. * * @link http://trac.wordpress.org/ticket/7875 consolidate plugin/theme/core upgrade/install functions * * @package WordPress * @subpackage Upgrader * @since 2.8.0 *//** * WordPress Upgrader class for Upgrading/Installing a local set of files via the Filesystem Abstraction classes from a Zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader {	var $strings = array();	var $skin = null;	var $result = array();	function WP_Upgrader($skin = null) {		return $this->__construct($skin);	}	function __construct($skin = null) {		if ( null == $skin )			$this->skin = new WP_Upgrader_Skin();		else			$this->skin = $skin;	}	function init() {		$this->skin->set_upgrader($this);		$this->generic_strings();	}	function generic_strings() {		$this->strings['bad_request'] = __('Invalid Data provided.');		$this->strings['fs_unavailable'] = __('Could not access filesystem.');		$this->strings['fs_error'] = __('Filesystem error.');		$this->strings['fs_no_root_dir'] = __('Unable to locate WordPress Root directory.');		$this->strings['fs_no_content_dir'] = __('Unable to locate WordPress Content directory (wp-content).');		$this->strings['fs_no_plugins_dir'] = __('Unable to locate WordPress Plugin directory.');		$this->strings['fs_no_themes_dir'] = __('Unable to locate WordPress Theme directory.');		/* translators: %s: directory name */		$this->strings['fs_no_folder'] = __('Unable to locate needed folder (%s).');		$this->strings['download_failed'] = __('Download failed.');		$this->strings['installing_package'] = __('Installing the latest version&#8230;');		$this->strings['folder_exists'] = __('Destination folder already exists.');		$this->strings['mkdir_failed'] = __('Could not create directory.');		$this->strings['bad_package'] = __('Incompatible Archive.');		$this->strings['maintenance_start'] = __('Enabling Maintenance mode&#8230;');		$this->strings['maintenance_end'] = __('Disabling Maintenance mode&#8230;');	}	function fs_connect( $directories = array() ) {		global $wp_filesystem;		if ( false === ($credentials = $this->skin->request_filesystem_credentials()) )			return false;		if ( ! WP_Filesystem($credentials) ) {			$error = true;			if ( is_object($wp_filesystem) && $wp_filesystem->errors->get_error_code() )				$error = $wp_filesystem->errors;			$this->skin->request_filesystem_credentials($error); //Failed to connect, Error and request again			return false;		}		if ( ! is_object($wp_filesystem) )			return new WP_Error('fs_unavailable', $this->strings['fs_unavailable'] );		if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )			return new WP_Error('fs_error', $this->strings['fs_error'], $wp_filesystem->errors);		foreach ( (array)$directories as $dir ) {			switch ( $dir ) {				case ABSPATH:					if ( ! $wp_filesystem->abspath() )						return new WP_Error('fs_no_root_dir', $this->strings['fs_no_root_dir']);					break;				case WP_CONTENT_DIR:					if ( ! $wp_filesystem->wp_content_dir() )						return new WP_Error('fs_no_content_dir', $this->strings['fs_no_content_dir']);					break;				case WP_PLUGIN_DIR:					if ( ! $wp_filesystem->wp_plugins_dir() )						return new WP_Error('fs_no_plugins_dir', $this->strings['fs_no_plugins_dir']);					break;				case WP_CONTENT_DIR . '/themes':					if ( ! $wp_filesystem->find_folder(WP_CONTENT_DIR . '/themes') )						return new WP_Error('fs_no_themes_dir', $this->strings['fs_no_themes_dir']);					break;				default:					if ( ! $wp_filesystem->find_folder($dir) )						return new WP_Error('fs_no_folder', sprintf($this->strings['fs_no_folder'], $dir));					break;			}		}		return true;	} //end fs_connect();	function download_package($package) {		if ( ! preg_match('!^(http|https|ftp)://!i', $package) && file_exists($package) ) //Local file or remote?			return $package; //must be a local file..		if ( empty($package) )			return new WP_Error('no_package', $this->strings['no_package']);		$this->skin->feedback('downloading_package', $package);		$download_file = download_url($package);		if ( is_wp_error($download_file) )			return new WP_Error('download_failed', $this->strings['download_failed'], $download_file->get_error_message());		return $download_file;	}	function unpack_package($package, $delete_package = true) {		global $wp_filesystem;		$this->skin->feedback('unpack_package');		$upgrade_folder = $wp_filesystem->wp_content_dir() . 'upgrade/';		//Clean up contents of upgrade directory beforehand.		$upgrade_files = $wp_filesystem->dirlist($upgrade_folder);		if ( !empty($upgrade_files) ) {			foreach ( $upgrade_files as $file )				$wp_filesystem->delete($upgrade_folder . $file['name'], true);		}		//We need a working directory		$working_dir = $upgrade_folder . basename($package, '.zip');		// Clean up working directory		if ( $wp_filesystem->is_dir($working_dir) )			$wp_filesystem->delete($working_dir, true);		// Unzip package to working directory		$result = unzip_file($package, $working_dir); //TODO optimizations, Copy when Move/Rename would suffice?		// Once extracted, delete the package if required.		if ( $delete_package )			unlink($package);		if ( is_wp_error($result) ) {			$wp_filesystem->delete($working_dir, true);			return $result;		}		return $working_dir;	}	function install_package($args = array()) {		global $wp_filesystem;		$defaults = array( 'source' => '', 'destination' => '', //Please always pass these						'clear_destination' => false, 'clear_working' => false,						'hook_extra' => array());		$args = wp_parse_args($args, $defaults);		extract($args);		@set_time_limit( 300 );		if ( empty($source) || empty($destination) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$this->skin->feedback('installing_package');		$res = apply_filters('upgrader_pre_install', true, $hook_extra);		if ( is_wp_error($res) )			return $res;		//Retain the Original source and destinations		$remote_source = $source;		$local_destination = $destination;		$source_files = array_keys( $wp_filesystem->dirlist($remote_source) );		$remote_destination = $wp_filesystem->find_folder($local_destination);		//Locate which directory to copy to the new folder, This is based on the actual folder holding the files.		if ( 1 == count($source_files) && $wp_filesystem->is_dir( trailingslashit($source) . $source_files[0] . '/') ) //Only one folder? Then we want its contents.			$source = trailingslashit($source) . trailingslashit($source_files[0]);		elseif ( count($source_files) == 0 )			return new WP_Error('bad_package', $this->strings['bad_package']); //There are no files?		//else //Its only a single file, The upgrader will use the foldername of this file as the destination folder. foldername is based on zip filename.		//Hook ability to change the source file location..		$source = apply_filters('upgrader_source_selection', $source, $remote_source, $this);		if ( is_wp_error($source) )			return $source;		//Has the source location changed? If so, we need a new source_files list.		if ( $source !== $remote_source )			$source_files = array_keys( $wp_filesystem->dirlist($source) );		//Protection against deleting files in any important base directories.		if ( in_array( $destination, array(ABSPATH, WP_CONTENT_DIR, WP_PLUGIN_DIR, WP_CONTENT_DIR . '/themes') ) ) {			$remote_destination = trailingslashit($remote_destination) . trailingslashit(basename($source));			$destination = trailingslashit($destination) . trailingslashit(basename($source));		}		if ( $wp_filesystem->exists($remote_destination) ) {			if ( $clear_destination ) {				//We're going to clear the destination if theres something there				$this->skin->feedback('remove_old');				$removed = $wp_filesystem->delete($remote_destination, true);				$removed = apply_filters('upgrader_clear_destination', $removed, $local_destination, $remote_destination, $hook_extra);				if ( is_wp_error($removed) )					return $removed;				else if ( ! $removed )					return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);			} else {				//If we're not clearing the destination folder and something exists there allready, Bail.				//But first check to see if there are actually any files in the folder.				$_files = $wp_filesystem->dirlist($remote_destination);				if ( ! empty($_files) ) {					$wp_filesystem->delete($remote_source, true); //Clear out the source files.					return new WP_Error('folder_exists', $this->strings['folder_exists'], $remote_destination );				}			}		}		//Create destination if needed		if ( !$wp_filesystem->exists($remote_destination) )			if ( !$wp_filesystem->mkdir($remote_destination, FS_CHMOD_DIR) )				return new WP_Error('mkdir_failed', $this->strings['mkdir_failed'], $remote_destination);		// Copy new version of item into place.		$result = copy_dir($source, $remote_destination);		if ( is_wp_error($result) ) {			if ( $clear_working )				$wp_filesystem->delete($remote_source, true);			return $result;		}		//Clear the Working folder?		if ( $clear_working )			$wp_filesystem->delete($remote_source, true);		$destination_name = basename( str_replace($local_destination, '', $destination) );		if ( '.' == $destination_name )			$destination_name = '';		$this->result = compact('local_source', 'source', 'source_name', 'source_files', 'destination', 'destination_name', 'local_destination', 'remote_destination', 'clear_destination', 'delete_source_dir');		$res = apply_filters('upgrader_post_install', true, $hook_extra, $this->result);		if ( is_wp_error($res) ) {			$this->result = $res;			return $res;		}		//Bombard the calling function will all the info which we've just used.		return $this->result;	}	function run($options) {		$defaults = array( 	'package' => '', //Please always pass this.							'destination' => '', //And this							'clear_destination' => false,							'clear_working' => true,							'is_multi' => false,							'hook_extra' => array() //Pass any extra $hook_extra args here, this will be passed to any hooked filters.						);		$options = wp_parse_args($options, $defaults);		extract($options);		//Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, $destination) );		if ( ! $res ) //Mainly for non-connected filesystem.			return false;		if ( is_wp_error($res) ) {			$this->skin->error($res);			return $res;		}		if ( !$is_multi ) // call $this->header separately if running multiple times			$this->skin->header();		$this->skin->before();		//Download the package (Note, This just returns the filename of the file if the package is a local file)		$download = $this->download_package( $package );		if ( is_wp_error($download) ) {			$this->skin->error($download);			$this->skin->after();			return $download;		}		//Unzip's the file into a temporary directory		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) ) {			$this->skin->error($working_dir);			$this->skin->after();			return $working_dir;		}		//With the given options, this installs it to the destination directory.		$result = $this->install_package( array(											'source' => $working_dir,											'destination' => $destination,											'clear_destination' => $clear_destination,											'clear_working' => $clear_working,											'hook_extra' => $hook_extra										) );		$this->skin->set_result($result);		if ( is_wp_error($result) ) {			$this->skin->error($result);			$this->skin->feedback('process_failed');		} else {			//Install Suceeded			$this->skin->feedback('process_success');		}		$this->skin->after();		if ( !$is_multi )			$this->skin->footer();		return $result;	}	function maintenance_mode($enable = false) {		global $wp_filesystem;		$file = $wp_filesystem->abspath() . '.maintenance';		if ( $enable ) {			$this->skin->feedback('maintenance_start');			// Create maintenance file to signal that we are upgrading			$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';			$wp_filesystem->delete($file);			$wp_filesystem->put_contents($file, $maintenance_string, FS_CHMOD_FILE);		} else if ( !$enable && $wp_filesystem->exists($file) ) {			$this->skin->feedback('maintenance_end');			$wp_filesystem->delete($file);		}	}}/** * Plugin Upgrader class for WordPress Plugins, It is designed to upgrade/install plugins from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader extends WP_Upgrader {	var $result;	var $bulk = false;	var $show_before = '';	function upgrade_strings() {		$this->strings['up_to_date'] = __('The plugin is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['deactivate_plugin'] = __('Deactivating the plugin&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the plugin&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old plugin.');		$this->strings['process_failed'] = __('Plugin upgrade failed.');		$this->strings['process_success'] = __('Plugin upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the plugin&#8230;');		$this->strings['process_failed'] = __('Plugin install failed.');		$this->strings['process_success'] = __('Plugin installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$this->run(array(					'package' => $package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => false, //Do not overwrite files.					'clear_working' => true,					'hook_extra' => array()					));		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function upgrade($plugin) {		$this->init();		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		if ( !isset( $current->response[ $plugin ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		// Get the URL to the zip file		$r = $current->response[ $plugin ];		add_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		//'source_selection' => array(&$this, 'source_selection'), //theres a track ticket to move up the directory for zip's which are made a bit differently, useful for non-.org plugins.		$this->run(array(					'package' => $r->package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => true,					'clear_working' => true,					'hook_extra' => array(								'plugin' => $plugin					)				));		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'));		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function bulk_upgrade($plugins) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, WP_PLUGIN_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($plugins);		$this->update_current = 0;		foreach ( $plugins as $plugin ) {			$this->update_current++;			$this->skin->plugin_info = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin, false, true);			if ( !isset( $current->response[ $plugin ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$plugin] = false;				continue;			}			// Get the URL to the zip file			$r = $current->response[ $plugin ];			$this->skin->plugin_active = is_plugin_active($plugin);			$result = $this->run(array(						'package' => $r->package,						'destination' => WP_PLUGIN_DIR,						'clear_destination' => true,						'clear_working' => true,						'is_multi' => true,						'hook_extra' => array(									'plugin' => $plugin						)					));			$results[$plugin] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		// Force refresh of plugin update information		delete_site_transient('update_plugins');		return $results;	}	//return plugin info.	function plugin_info() {		if ( ! is_array($this->result) )			return false;		if ( empty($this->result['destination_name']) )			return false;		$plugin = get_plugins('/' . $this->result['destination_name']); //Ensure to pass with leading slash		if ( empty($plugin) )			return false;		$pluginfiles = array_keys($plugin); //Assume the requested plugin is the first in the list		return $this->result['destination_name'] . '/' . $pluginfiles[0];	}	//Hooked to pre_install	function deactivate_plugin_before_upgrade($return, $plugin) {		if ( is_wp_error($return) ) //Bypass.			return $return;		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		if ( is_plugin_active($plugin) ) {			$this->skin->feedback('deactivate_plugin');			//Deactivate the plugin silently, Prevent deactivation hooks from running.			deactivate_plugins($plugin, true);		}	}	//Hooked to upgrade_clear_destination	function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin) {		global $wp_filesystem;		if ( is_wp_error($removed) )			return $removed; //Pass errors through.		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$plugins_dir = $wp_filesystem->wp_plugins_dir();		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin) );		if ( ! $wp_filesystem->exists($this_plugin_dir) ) //If its already vanished.			return $removed;		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin);		if ( ! $deleted )			return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);		return $removed;	}}/** * Theme Upgrader class for WordPress Themes, It is designed to upgrade/install themes from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader extends WP_Upgrader {	var $result;	function upgrade_strings() {		$this->strings['up_to_date'] = __('The theme is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the theme&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old theme.');		$this->strings['process_failed'] = __('Theme upgrade failed.');		$this->strings['process_success'] = __('Theme upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the theme&#8230;');		$this->strings['process_failed'] = __('Theme install failed.');		$this->strings['process_success'] = __('Theme installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$options = array(						'package' => $package,						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => false, //Do not overwrite files.						'clear_working' => true						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		if ( empty($result['destination_name']) )			return false;		else			return $result['destination_name'];	}	function upgrade($theme) {		$this->init();		$this->upgrade_strings();		// Is an update available?		$current = get_site_transient( 'update_themes' );		if ( !isset( $current->response[ $theme ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		$r = $current->response[ $theme ];		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$options = array(						'package' => $r['package'],						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => true,						'clear_working' => true,						'hook_extra' => array(											'theme' => $theme											)						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		return true;	}	function bulk_upgrade($themes) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_themes' );		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($themes);		$this->update_current = 0;		foreach ( $themes as $theme ) {			$this->update_current++;			if ( !isset( $current->response[ $theme ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$theme] = false;				continue;			}			$this->skin->theme_info = $this->theme_info($theme);			// Get the URL to the zip file			$r = $current->response[ $theme ];			$options = array(							'package' => $r['package'],							'destination' => WP_CONTENT_DIR . '/themes',							'clear_destination' => true,							'clear_working' => true,							'hook_extra' => array(												'theme' => $theme												)							);			$result = $this->run($options);			$results[$theme] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		remove_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		// Force refresh of theme update information		delete_site_transient('update_themes');		return $results;	}	function current_before($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Change to maintainence mode now.		if ( ! $this->bulk )			$this->maintenance_mode(true);		return $return;	}	function current_after($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Ensure stylesheet name hasnt changed after the upgrade:		if ( $theme == get_stylesheet() && $theme != $this->result['destination_name'] ) {			$theme_info = $this->theme_info();			$stylesheet = $this->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			switch_theme($template, $stylesheet, true);		}		//Time to remove maintainence mode		if ( ! $this->bulk )			$this->maintenance_mode(false);		return $return;	}	function delete_old_theme($removed, $local_destination, $remote_destination, $theme) {		global $wp_filesystem;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( is_wp_error($removed) || empty($theme) )			return $removed; //Pass errors through.		$themes_dir = $wp_filesystem->wp_themes_dir();		if ( $wp_filesystem->exists( trailingslashit($themes_dir) . $theme ) )			if ( ! $wp_filesystem->delete( trailingslashit($themes_dir) . $theme, true ) )				return false;		return true;	}	function theme_info($theme = null) {		if ( empty($theme) ) {			if ( !empty($this->result['destination_name']) )				$theme = $this->result['destination_name'];			else				return false;		}		return get_theme_data(WP_CONTENT_DIR . '/themes/' . $theme . '/style.css');	}}/** * Core Upgrader class for WordPress. It allows for WordPress to upgrade itself in combiantion with the wp-admin/includes/update-core.php file * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Core_Upgrader extends WP_Upgrader {	function upgrade_strings() {		$this->strings['up_to_date'] = __('WordPress is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['copy_failed'] = __('Could not copy files.');	}	function upgrade($current) {		global $wp_filesystem;		$this->init();		$this->upgrade_strings();		if ( !empty($feedback) )			add_filter('update_feedback', $feedback);		// Is an update available?		if ( !isset( $current->response ) || $current->response == 'latest' )			return new WP_Error('up_to_date', $this->strings['up_to_date']);		$res = $this->fs_connect( array(ABSPATH, WP_CONTENT_DIR) );		if ( is_wp_error($res) )			return $res;		$wp_dir = trailingslashit($wp_filesystem->abspath());		$download = $this->download_package( $current->package );		if ( is_wp_error($download) )			return $download;		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) )			return $working_dir;		// Copy update-core.php from the new version into place.		if ( !$wp_filesystem->copy($working_dir . '/wordpress/wp-admin/includes/update-core.php', $wp_dir . 'wp-admin/includes/update-core.php', true) ) {			$wp_filesystem->delete($working_dir, true);			return new WP_Error('copy_failed', $this->strings['copy_failed']);		}		$wp_filesystem->chmod($wp_dir . 'wp-admin/includes/update-core.php', FS_CHMOD_FILE);		require(ABSPATH . 'wp-admin/includes/update-core.php');		return update_core($working_dir, $wp_dir);	}}/** * Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader_Skin {	var $upgrader;	var $done_header = false;	var $result = false;	function WP_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '', 'title' => '', 'context' => false );		$this->options = wp_parse_args($args, $defaults);	}	function set_upgrader(&$upgrader) {		if ( is_object($upgrader) )			$this->upgrader =& $upgrader;		$this->add_strings();	}	function add_strings() {	}	function set_result($result) {		$this->result = $result;	}	function request_filesystem_credentials($error = false) {		$url = $this->options['url'];		$context = $this->options['context'];		if ( !empty($this->options['nonce']) )			$url = wp_nonce_url($url, $this->options['nonce']);		return request_filesystem_credentials($url, '', $error, $context); //Possible to bring inline, Leaving as is for now.	}	function header() {		if ( $this->done_header )			return;		$this->done_header = true;		echo '<div class="wrap">';		echo screen_icon();		echo '<h2>' . $this->options['title'] . '</h2>';	}	function footer() {		echo '</div>';	}	function error($errors) {		if ( ! $this->done_header )			$this->header();		if ( is_string($errors) ) {			$this->feedback($errors);		} elseif ( is_wp_error($errors) && $errors->get_error_code() ) {			foreach ( $errors->get_error_messages() as $message ) {				if ( $errors->get_error_data() )					$this->feedback($message . ' ' . $errors->get_error_data() );				else					$this->feedback($message);			}		}	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		show_message($string);	}	function before() {}	function after() {}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader_Skin extends WP_Upgrader_Skin {	var $plugin = '';	var $plugin_active = false;	var $plugin_network_active = false;	function Plugin_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => __('Upgrade Plugin') );		$args = wp_parse_args($args, $defaults);		$this->plugin = $args['plugin'];		$this->plugin_active = is_plugin_active( $this->plugin );		$this->plugin_network_active = is_plugin_active_for_network( $this->plugin );		parent::__construct($args);	}	function after() {		$this->plugin = $this->upgrader->plugin_info();		if ( !empty($this->plugin) && !is_wp_error($this->result) && $this->plugin_active ){			show_message(__('Reactivating the plugin&#8230;'));			echo '<iframe style="border:0;overflow:hidden" width="100%" height="170px" src="' . wp_nonce_url('update.php?action=activate-plugin&networkwide=' . $this->plugin_network_active . '&plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) .'"></iframe>';		}		$update_actions =  array(			'activate_plugin' => '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>',			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>'		);		if ( $this->plugin_active )			unset( $update_actions['activate_plugin'] );		if ( ! $this->result || is_wp_error($this->result) )			unset( $update_actions['activate_plugin'] );		$update_actions = apply_filters('update_plugin_complete_actions', $update_actions, $this->plugin);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}	function before() {		if ( $this->upgrader->show_before ) {			echo $this->upgrader->show_before;			$this->upgrader->show_before = '';		}	}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @package WordPress * @subpackage Upgrader * @since 3.0.0 */class Bulk_Upgrader_Skin extends WP_Upgrader_Skin {	var $in_loop = false;	var $error = false;	function Bulk_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '' );		$args = wp_parse_args($args, $defaults);		parent::__construct($args);	}	function add_strings() {		$this->upgrader->strings['skin_upgrade_start'] = __('The update process is starting. This process may take awhile on some hosts, so please be patient.');		$this->upgrader->strings['skin_update_failed_error'] = __('An error occured while updating %1$s: <strong>%2$s</strong>.');		$this->upgrader->strings['skin_update_failed'] = __('The update of %1$s failed.');		$this->upgrader->strings['skin_update_successful'] = __('%1$s updated successfully.').' <a onclick="%2$s" href="#" class="hide-if-no-js"><span>'.__('Show Details').'</span><span class="hidden">'.__('Hide Details').'</span>.</a>';		$this->upgrader->strings['skin_upgrade_end'] = __('All updates have been completed.');	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		if ( $this->in_loop )			echo "$string<br />\n";		else			echo "<p>$string</p>\n";	}	function header() {		// Nothing, This will be displayed within a iframe.	}	function footer() {		// Nothing, This will be displayed within a iframe.	}	function error($error) {		if ( is_string($error) && isset( $this->upgrader->strings[$error] ) )			$this->error = $this->upgrader->strings[$error];		if ( is_wp_error($error) ) {			foreach ( $error->get_error_messages() as $emessage ) {				if ( $error->get_error_data() )					$messages[] = $emessage . ' ' . $error->get_error_data();				else					$messages[] = $emessage;			}			$this->error = implode(', ', $messages);		}		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';	}	function bulk_header() {		$this->feedback('skin_upgrade_start');	}	function bulk_footer() {		$this->feedback('skin_upgrade_end');	}	function before($title = '') {		$this->in_loop = true;		printf( '<h4>' . $this->upgrader->strings['skin_before_update_header'] . ' <img alt="" src="' . admin_url( 'images/wpspin_light.gif' ) . '" class="hidden waiting-' . $this->upgrader->update_current . '" style="vertical-align:middle;"></h4>',  $title, $this->upgrader->update_current, $this->upgrader->update_count);		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		echo '<div class="update-messages hide-if-js" id="progress-' . esc_attr($this->upgrader->update_current) . '"><p>';		$this->flush_output();	}	function after($title = '') {		echo '</p></div>';		if ( $this->error || ! $this->result ) {			if ( $this->error )				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed_error'], $title, $this->error) . '</p></div>';			else				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed'], $title) . '</p></div>';			echo '<script type="text/javascript">jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		}		if ( !empty($this->result) && !is_wp_error($this->result) ) {			echo '<div class="updated"><p>' . sprintf($this->upgrader->strings['skin_update_successful'], $title, 'jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').toggle();jQuery(\'span\', this).toggle(); return false;') . '</p></div>';			echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';		}		$this->reset();		$this->flush_output();	}	function reset() {		$this->in_loop = false;		$this->error = false;	}	function flush_output() {		wp_ob_end_flush_all();		flush();	}}class Bulk_Plugin_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $plugin_info = array(); // Plugin_Upgrader::bulk() will fill this in.	function Plugin_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Plugin %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->plugin_info['Title']);	}	function after() {		parent::after($this->plugin_info['Title']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_plugins_complete_actions', $update_actions, $this->plugin_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}class Bulk_Theme_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $theme_info = array(); // Theme_Upgrader::bulk() will fill this in.	function Theme_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Theme %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->theme_info['Name']);	}	function after() {		parent::after($this->theme_info['Name']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'themes_page' => '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Goto themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_theme_complete_actions', $update_actions, $this->theme_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Plugin Installer Skin for WordPress Plugin Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Plugin_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) )			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the plugin <strong>%s %s</strong>.'), $this->api->name, $this->api->version);	}	function after() {		$plugin_file = $this->upgrader->plugin_info();		$install_actions = array();		$from = isset($_GET['from']) ? stripslashes($_GET['from']) : 'plugins';		if ( 'import' == $from )			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;from=import&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin &amp; Run Importer') . '</a>';		else			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>';		if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )			$install_actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" target="_parent">' . __('Network Activate') . '</a>';		if ( 'import' == $from )			$install_actions['importers_page'] = '<a href="' . admin_url('import.php') . '" title="' . esc_attr__('Return to Importers') . '" target="_parent">' . __('Return to Importers') . '</a>';		else if ( $this->type == 'web' )			$install_actions['plugins_page'] = '<a href="' . admin_url('plugin-install.php') . '" title="' . esc_attr__('Return to Plugin Installer') . '" target="_parent">' . __('Return to Plugin Installer') . '</a>';		else			$install_actions['plugins_page'] = '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Return to Plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) ) {			unset( $install_actions['activate_plugin'] );			unset( $install_actions['network_activate'] );		}		$install_actions = apply_filters('install_plugin_complete_actions', $install_actions, $this->api, $plugin_file);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Installer Skin for the WordPress Theme Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Theme_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'theme' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) ) {			/* translators: 1: theme name, 2: version */			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the theme <strong>%1$s %2$s</strong>.'), $this->api->name, $this->api->version);		}	}	function after() {		if ( empty($this->upgrader->result['destination_name']) )			return;		$theme_info = $this->upgrader->theme_info();		if ( empty($theme_info) )			return;		$name = $theme_info['Name'];		$stylesheet = $this->upgrader->result['destination_name'];		$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;		$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );		$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);		$install_actions = array(			'preview' => '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>',			'activate' => '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>'							);		if ( $this->type == 'web' )			$install_actions['themes_page'] = '<a href="' . admin_url('theme-install.php') . '" title="' . esc_attr__('Return to Theme Installer') . '" target="_parent">' . __('Return to Theme Installer') . '</a>';		else			$install_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) )			unset( $install_actions['activate'], $install_actions['preview'] );		$install_actions = apply_filters('install_theme_complete_actions', $install_actions, $this->api, $stylesheet, $theme_info);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Upgrader Skin for WordPress Theme Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader_Skin extends WP_Upgrader_Skin {	var $theme = '';	function Theme_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'theme' => '', 'nonce' => '', 'title' => __('Upgrade Theme') );		$args = wp_parse_args($args, $defaults);		$this->theme = $args['theme'];		parent::__construct($args);	}	function after() {		$update_actions = array();		if ( !empty($this->upgrader->result['destination_name']) &&			($theme_info = $this->upgrader->theme_info()) &&			!empty($theme_info) ) {			$name = $theme_info['Name'];			$stylesheet = $this->upgrader->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );			$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);			$update_actions['preview'] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>';			$update_actions['activate'] = '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>';			if ( ( ! $this->result || is_wp_error($this->result) ) || $stylesheet == get_stylesheet() )				unset($update_actions['preview'], $update_actions['activate']);		}		$update_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Return to Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		$update_actions = apply_filters('update_theme_complete_actions', $update_actions, $this->theme);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Upgrade Skin helper for File uploads. This class handles the upload process and passes it as if its a local file to the Upgrade/Installer functions. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class File_Upload_Upgrader {	var $package;	var $filename;	function File_Upload_Upgrader($form, $urlholder) {		return $this->__construct($form, $urlholder);	}	function __construct($form, $urlholder) {		if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )			wp_die($uploads['error']);		if ( empty($_FILES[$form]['name']) && empty($_GET[$urlholder]) )			wp_die(__('Please select a file'));		if ( !empty($_FILES) )			$this->filename = $_FILES[$form]['name'];		else if ( isset($_GET[$urlholder]) )			$this->filename = $_GET[$urlholder];		//Handle a newly uploaded file, Else assume its already been uploaded		if ( !empty($_FILES) ) {			$this->filename = wp_unique_filename( $uploads['basedir'], $this->filename );			$this->package = $uploads['basedir'] . '/' . $this->filename;			// Move the file to the uploads dir			if ( false === @ move_uploaded_file( $_FILES[$form]['tmp_name'], $this->package) )				wp_die( sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path']));		} else {			$this->package = $uploads['basedir'] . '/' . $this->filename;		}	}}
<?php/** * Deprecated functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be * removed in a later version. * * @package WordPress * @subpackage Deprecated *//* * Deprecated functions come here to die. *//** * Entire Post data. * * @since 0.71 * @deprecated 1.5.1 * @deprecated Use get_post() * @see get_post() * * @param int $postid * @return array */function get_postdata($postid) {	_deprecated_function( __FUNCTION__, '1.5.1', 'get_post()' );	$post = &get_post($postid);	$postdata = array (		'ID' => $post->ID,		'Author_ID' => $post->post_author,		'Date' => $post->post_date,		'Content' => $post->post_content,		'Excerpt' => $post->post_excerpt,		'Title' => $post->post_title,		'Category' => $post->post_category,		'post_status' => $post->post_status,		'comment_status' => $post->comment_status,		'ping_status' => $post->ping_status,		'post_password' => $post->post_password,		'to_ping' => $post->to_ping,		'pinged' => $post->pinged,		'post_type' => $post->post_type,		'post_name' => $post->post_name	);	return $postdata;}/** * Sets up the WordPress Loop. * * @since 1.0.1 * @deprecated 1.5 * @deprecated Use The Loop - {@link http://codex.wordpress.org/The_Loop Use new WordPress Loop} */function start_wp() {	global $wp_query, $post;	_deprecated_function( __FUNCTION__, '1.5', __('new WordPress Loop') );	// Since the old style loop is being used, advance the query iterator here.	$wp_query->next_post();	setup_postdata($post);}/** * Return or Print Category ID. * * @since 0.71 * @deprecated 0.71 * @deprecated use get_the_category() * @see get_the_category() * * @param bool $echo * @return null|int */function the_category_ID($echo = true) {	_deprecated_function( __FUNCTION__, '0.71', 'get_the_category()' );	// Grab the first cat in the list.	$categories = get_the_category();	$cat = $categories[0]->term_id;	if ( $echo )		echo $cat;	return $cat;}/** * Print category with optional text before and after. * * @since 0.71 * @deprecated 0.71 * @deprecated use get_the_category_by_ID() * @see get_the_category_by_ID() * * @param string $before * @param string $after */function the_category_head($before='', $after='') {	global $currentcat, $previouscat;	_deprecated_function( __FUNCTION__, '0.71', 'get_the_category_by_ID()' );	// Grab the first cat in the list.	$categories = get_the_category();	$currentcat = $categories[0]->category_id;	if ( $currentcat != $previouscat ) {		echo $before;		echo get_the_category_by_ID($currentcat);		echo $after;		$previouscat = $currentcat;	}}/** * Prints link to the previous post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use previous_post_link() * @see previous_post_link() * * @param string $format * @param string $previous * @param string $title * @param string $in_same_cat * @param int $limitprev * @param string $excluded_categories */function previous_post($format='%', $previous='previous post: ', $title='yes', $in_same_cat='no', $limitprev=1, $excluded_categories='') {	_deprecated_function( __FUNCTION__, '2.0', 'previous_post_link()' );	if ( empty($in_same_cat) || 'no' == $in_same_cat )		$in_same_cat = false;	else		$in_same_cat = true;	$post = get_previous_post($in_same_cat, $excluded_categories);	if ( !$post )		return;	$string = '<a href="'.get_permalink($post->ID).'">'.$previous;	if ( 'yes' == $title )		$string .= apply_filters('the_title', $post->post_title, $post);	$string .= '</a>';	$format = str_replace('%', $string, $format);	echo $format;}/** * Prints link to the next post. * * @since 0.71 * @deprecated 2.0 * @deprecated Use next_post_link() * @see next_post_link() * * @param string $format * @param string $previous * @param string $title * @param string $in_same_cat * @param int $limitprev * @param string $excluded_categories */function next_post($format='%', $next='next post: ', $title='yes', $in_same_cat='no', $limitnext=1, $excluded_categories='') {	_deprecated_function( __FUNCTION__, '2.0', 'next_post_link()' );	if ( empty($in_same_cat) || 'no' == $in_same_cat )		$in_same_cat = false;	else		$in_same_cat = true;	$post = get_next_post($in_same_cat, $excluded_categories);	if ( !$post	)		return;	$string = '<a href="'.get_permalink($post->ID).'">'.$next;	if ( 'yes' == $title )		$string .= apply_filters('the_title', $post->post_title, $nextpost);	$string .= '</a>';	$format = str_replace('%', $string, $format);	echo $format;}/** * Whether user can create a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_create_post($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return ($author_data->user_level > 1);}/** * Whether user can create a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_create_draft($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return ($author_data->user_level >= 1);}/** * Whether user can edit a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool */function user_can_edit_post($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	$post = get_post($post_id);	$post_author_data = get_userdata($post->post_author);	if ( (($user_id == $post_author_data->ID) && !($post->post_status == 'publish' && $author_data->user_level < 2))			 || ($author_data->user_level > $post_author_data->user_level)			 || ($author_data->user_level >= 10) ) {		return true;	} else {		return false;	}}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool */function user_can_delete_post($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit, one can delete	return user_can_edit_post($user_id, $post_id, $blog_id);}/** * Whether user can set new posts' dates. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_set_post_date($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return (($author_data->user_level > 4) && user_can_create_post($user_id, $blog_id, $category_id));}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can edit $post_id's date */function user_can_edit_post_date($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return (($author_data->user_level > 4) && user_can_edit_post($user_id, $post_id, $blog_id));}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can edit $post_id's comments */function user_can_edit_post_comments($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit a post, one can edit comments made on it	return user_can_edit_post($user_id, $post_id, $blog_id);}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can delete $post_id's comments */function user_can_delete_post_comments($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit comments, one can delete comments	return user_can_edit_post_comments($user_id, $post_id, $blog_id);}/** * Can user can edit other user. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $other_user * @return bool */function user_can_edit_user($user_id, $other_user) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$user  = get_userdata($user_id);	$other = get_userdata($other_user);	if ( $user->user_level > $other->user_level || $user->user_level > 8 || $user->ID == $other->ID )		return true;	else		return false;}/** * Gets the links associated with category $cat_name. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name Optional. The category name to use. If no match is found uses all. * @param string $before Optional. The html to output before the link. * @param string $after Optional. The html to output after the link. * @param string $between Optional. The html to output between the link/image and it's description. Not used if no image or $show_images is true. * @param bool $show_images Optional. Whether to show images (if defined). * @param string $orderby Optional. The order to output the links. E.g. 'id', 'name', 'url', 'description' or 'rating'. Or maybe owner. *		If you start the name with an underscore the order will be reversed. You can also specify 'rand' as the order which will return links in a *		random order. * @param bool $show_description Optional. Whether to show the description if show_images=false/not defined. * @param bool $show_rating Optional. Show rating stars/chars. * @param int $limit		Optional. Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Optional. Whether to show last updated timestamp */function get_linksbyname($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = true, $orderby = 'id',						 $show_description = true, $show_rating = false,						 $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$cat_id = -1;	$cat = get_term_by('name', $cat_name, 'link_category');	if ( $cat )		$cat_id = $cat->term_id;	get_links($cat_id, $before, $after, $between, $show_images, $orderby, $show_description, $show_rating, $limit, $show_updated);}/** * Gets the links associated with the named category. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $category The category to use. * @param string $args * @return bool|null */function wp_get_linksbyname($category, $args = '') {	_deprecated_function(__FUNCTION__, '0.0', 'wp_list_bookmarks()');	$defaults = array(		'after' => '<br />',		'before' => '',		'categorize' => 0,		'category_after' => '',		'category_before' => '',		'category_name' => $category,		'show_description' => 1,		'title_li' => '',	);	$r = wp_parse_args( $args, $defaults );	return wp_list_bookmarks($r);}/** * Gets an array of link objects associated with category $cat_name. * * <code> *	$links = get_linkobjectsbyname('fred'); *	foreach ($links as $link) { * 		echo '<li>'.$link->link_name.'</li>'; *	} * </code> * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name The category name to use. If no match is found uses all. * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', 'description', or 'rating'. *		Or maybe owner. If you start the name with an underscore the order will be reversed. You can also *		specify 'rand' as the order which will return links in a random order. * @param int $limit Limit to X entries. If not specified, all entries are shown. * @return unknown */function get_linkobjectsbyname($cat_name = "noname" , $orderby = 'name', $limit = -1) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$cat_id = -1;	$cat = get_term_by('name', $cat_name, 'link_category');	if ( $cat )		$cat_id = $cat->term_id;	return get_linkobjects($cat_id, $orderby, $limit);}/** * Gets an array of link objects associated with category n. * * Usage: * <code> *	$links = get_linkobjects(1); *	if ($links) { *		foreach ($links as $link) { *			echo '<li>'.$link->link_name.'<br />'.$link->link_description.'</li>'; *		} *	} * </code> * * Fields are: * <ol> *	<li>link_id</li> *	<li>link_url</li> *	<li>link_name</li> *	<li>link_image</li> *	<li>link_target</li> *	<li>link_category</li> *	<li>link_description</li> *	<li>link_visible</li> *	<li>link_owner</li> *	<li>link_rating</li> *	<li>link_updated</li> *	<li>link_rel</li> *	<li>link_notes</li> * </ol> * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param int $limit Limit to X entries. If not specified, all entries are shown. * @return unknown */function get_linkobjects($category = 0, $orderby = 'name', $limit = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$links = get_bookmarks( array( 'category' => $category, 'orderby' => $orderby, 'limit' => $limit ) ) ;	$links_array = array();	foreach ($links as $link)		$links_array[] = $link;	return $links_array;}/** * Gets the links associated with category 'cat_name' and display rating stars/chars. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name The category name to use. If no match is found uses all * @param string $before The html to output before the link * @param string $after The html to output after the link * @param string $between The html to output between the link/image and it's description. Not used if no image or show_images is true * @param bool $show_images Whether to show images (if defined). * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param bool $show_description Whether to show the description if show_images=false/not defined * @param int $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Whether to show last updated timestamp */function get_linksbyname_withrating($cat_name = "noname", $before = '', $after = '<br />', $between = " ",									$show_images = true, $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	get_linksbyname($cat_name, $before, $after, $between, $show_images, $orderby, $show_description, true, $limit, $show_updated);}/** * Gets the links associated with category n and display rating stars/chars. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $before The html to output before the link * @param string $after The html to output after the link * @param string $between The html to output between the link/image and it's description. Not used if no image or show_images == true * @param bool $show_images Whether to show images (if defined). * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param bool $show_description Whether to show the description if show_images=false/not defined. * @param string $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Whether to show last updated timestamp */function get_links_withrating($category = -1, $before = '', $after = '<br />', $between = " ", $show_images = true,							  $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	get_links($category, $before, $after, $between, $show_images, $orderby, $show_description, true, $limit, $show_updated);}/** * Gets the auto_toggle setting. * * @since 0.71 * @deprecated 2.1 * @deprecated No alternative function available * * @param int $id The category to get. If no category supplied uses 0 * @return int Only returns 0. */function get_autotoggle($id = 0) {	_deprecated_function( __FUNCTION__, '2.1' );	return 0;}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_list_categories() * @see wp_list_categories() * * @param int $optionall * @param string $all * @param string $sort_column * @param string $sort_order * @param string $file * @param bool $list * @param int $optiondates * @param int $optioncount * @param int $hide_empty * @param int $use_desc_for_title * @param bool $children * @param int $child_of * @param int $categories * @param int $recurse * @param string $feed * @param string $feed_image * @param string $exclude * @param bool $hierarchical * @return unknown */function list_cats($optionall = 1, $all = 'All', $sort_column = 'ID', $sort_order = 'asc', $file = '', $list = true, $optiondates = 0,				   $optioncount = 0, $hide_empty = 1, $use_desc_for_title = 1, $children=false, $child_of=0, $categories=0,				   $recurse=0, $feed = '', $feed_image = '', $exclude = '', $hierarchical=false) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_categories()' );	$query = compact('optionall', 'all', 'sort_column', 'sort_order', 'file', 'list', 'optiondates', 'optioncount', 'hide_empty', 'use_desc_for_title', 'children',		'child_of', 'categories', 'recurse', 'feed', 'feed_image', 'exclude', 'hierarchical');	return wp_list_cats($query);}/** * @since 1.2 * @deprecated 2.1 * @deprecated Use wp_list_categories() * @see wp_list_categories() * * @param string|array $args * @return unknown */function wp_list_cats($args = '') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_categories()' );	$r = wp_parse_args( $args );	// Map to new names.	if ( isset($r['optionall']) && isset($r['all']))		$r['show_option_all'] = $r['all'];	if ( isset($r['sort_column']) )		$r['orderby'] = $r['sort_column'];	if ( isset($r['sort_order']) )		$r['order'] = $r['sort_order'];	if ( isset($r['optiondates']) )		$r['show_last_update'] = $r['optiondates'];	if ( isset($r['optioncount']) )		$r['show_count'] = $r['optioncount'];	if ( isset($r['list']) )		$r['style'] = $r['list'] ? 'list' : 'break';	$r['title_li'] = '';	return wp_list_categories($r);}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_dropdown_categories() * @see wp_dropdown_categories() * * @param int $optionall * @param string $all * @param string $orderby * @param string $order * @param int $show_last_update * @param int $show_count * @param int $hide_empty * @param bool $optionnone * @param int $selected * @param int $exclude * @return unknown */function dropdown_cats($optionall = 1, $all = 'All', $orderby = 'ID', $order = 'asc',		$show_last_update = 0, $show_count = 0, $hide_empty = 1, $optionnone = false,		$selected = 0, $exclude = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_dropdown_categories()' );	$show_option_all = '';	if ( $optionall )		$show_option_all = $all;	$show_option_none = '';	if ( $optionnone )		$show_option_none = __('None');	$vars = compact('show_option_all', 'show_option_none', 'orderby', 'order',					'show_last_update', 'show_count', 'hide_empty', 'selected', 'exclude');	$query = add_query_arg($vars, '');	return wp_dropdown_categories($query);}/** * @since 1.2 * @deprecated 2.1 * @deprecated Use wp_list_authors() * @see wp_list_authors() * * @param bool $optioncount * @param bool $exclude_admin * @param bool $show_fullname * @param bool $hide_empty * @param string $feed * @param string $feed_image * @return unknown */function list_authors($optioncount = false, $exclude_admin = true, $show_fullname = false, $hide_empty = true, $feed = '', $feed_image = '') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_authors()' );	$args = compact('optioncount', 'exclude_admin', 'show_fullname', 'hide_empty', 'feed', 'feed_image');	return wp_list_authors($args);}/** * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_get_post_categories() * @see wp_get_post_categories() * * @param int $blogid Not Used * @param int $post_ID * @return unknown */function wp_get_post_cats($blogid = '1', $post_ID = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_get_post_categories()' );	return wp_get_post_categories($post_ID);}/** * Sets the categories that the post id belongs to. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_set_post_categories() * @see wp_set_post_categories() * * @param int $blogid Not used * @param int $post_ID * @param array $post_categories * @return unknown */function wp_set_post_cats($blogid = '1', $post_ID = 0, $post_categories = array()) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_set_post_categories()' );	return wp_set_post_categories($post_ID, $post_categories);}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_get_archives() * @see wp_get_archives() * * @param string $type * @param string $limit * @param string $format * @param string $before * @param string $after * @param bool $show_post_count * @return unknown */function get_archives($type='', $limit='', $format='html', $before = '', $after = '', $show_post_count = false) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_get_archives()' );	$args = compact('type', 'limit', 'format', 'before', 'after', 'show_post_count');	return wp_get_archives($args);}/** * Returns or Prints link to the author's posts. * * @since 1.2 * @deprecated 2.1 * @deprecated Use get_author_posts_url() * @see get_author_posts_url() * * @param bool $echo Optional. * @param int $author_id Required. * @param string $author_nicename Optional. * @return string|null */function get_author_link($echo = false, $author_id, $author_nicename = '') {	_deprecated_function( __FUNCTION__, '2.1', 'get_author_posts_url()' );	$link = get_author_posts_url($author_id, $author_nicename);	if ( $echo )		echo $link;	return $link;}/** * Print list of pages based on arguments. * * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_link_pages() * @see wp_link_pages() * * @param string $before * @param string $after * @param string $next_or_number * @param string $nextpagelink * @param string $previouspagelink * @param string $pagelink * @param string $more_file * @return string */function link_pages($before='<br />', $after='<br />', $next_or_number='number', $nextpagelink='next page', $previouspagelink='previous page',					$pagelink='%', $more_file='') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_link_pages()' );	$args = compact('before', 'after', 'next_or_number', 'nextpagelink', 'previouspagelink', 'pagelink', 'more_file');	return wp_link_pages($args);}/** * Get value based on option. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_option() * @see get_option() * * @param string $option * @return string */function get_settings($option) {	_deprecated_function( __FUNCTION__, '2.1', 'get_option()' );	return get_option($option);}/** * Print the permalink of the current post in the loop. * * @since 0.71 * @deprecated 1.2 * @deprecated Use the_permalink() * @see the_permalink() */function permalink_link() {	_deprecated_function( __FUNCTION__, '1.2', 'the_permalink()' );	the_permalink();}/** * Print the permalink to the RSS feed. * * @since 0.71 * @deprecated 2.3 * @deprecated Use the_permalink_rss() * @see the_permalink_rss() * * @param string $file */function permalink_single_rss($deprecated = '') {	_deprecated_function( __FUNCTION__, '0.0', 'the_permalink_rss()' );	the_permalink_rss();}/** * Gets the links associated with category. * * @see get_links() for argument information that can be used in $args * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $args a query string * @return null|string */function wp_get_links($args = '') {	_deprecated_function( __FUNCTION__, '0.0', 'wp_list_bookmarks()' );	if ( strpos( $args, '=' ) === false ) {		$cat_id = $args;		$args = add_query_arg( 'category', $cat_id, $args );	}	$defaults = array(		'after' => '<br />',		'before' => '',		'between' => ' ',		'categorize' => 0,		'category' => '',		'echo' => true,		'limit' => -1,		'orderby' => 'name',		'show_description' => true,		'show_images' => true,		'show_rating' => false,		'show_updated' => true,		'title_li' => '',	);	$r = wp_parse_args( $args, $defaults );	return wp_list_bookmarks($r);}/** * Gets the links associated with category by id. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $before the html to output before the link * @param string $after the html to output after the link * @param string $between the html to output between the link/image and its description. *		Not used if no image or show_images == true * @param bool $show_images whether to show images (if defined). * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the order *		which will return links in a random order. * @param bool $show_description whether to show the description if show_images=false/not defined. * @param bool $show_rating show rating stars/chars * @param int $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated whether to show last updated timestamp * @param bool $echo whether to echo the results, or return them instead * @return null|string */function get_links($category = -1, $before = '', $after = '<br />', $between = ' ', $show_images = true, $orderby = 'name',			$show_description = true, $show_rating = false, $limit = -1, $show_updated = 1, $echo = true) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$order = 'ASC';	if ( substr($orderby, 0, 1) == '_' ) {		$order = 'DESC';		$orderby = substr($orderby, 1);	}	if ( $category == -1 ) //get_bookmarks uses '' to signify all categories		$category = '';	$results = get_bookmarks(array('category' => $category, 'orderby' => $orderby, 'order' => $order, 'show_updated' => $show_updated, 'limit' => $limit));	if ( !$results )		return;	$output = '';	foreach ( (array) $results as $row ) {		if ( !isset($row->recently_updated) )			$row->recently_updated = false;		$output .= $before;		if ( $show_updated && $row->recently_updated )			$output .= get_option('links_recently_updated_prepend');		$the_link = '#';		if ( !empty($row->link_url) )			$the_link = esc_url($row->link_url);		$rel = $row->link_rel;		if ( '' != $rel )			$rel = ' rel="' . $rel . '"';		$desc = esc_attr(sanitize_bookmark_field('link_description', $row->link_description, $row->link_id, 'display'));		$name = esc_attr(sanitize_bookmark_field('link_name', $row->link_name, $row->link_id, 'display'));		$title = $desc;		if ( $show_updated )			if (substr($row->link_updated_f, 0, 2) != '00')				$title .= ' ('.__('Last updated') . ' ' . date(get_option('links_updated_date_format'), $row->link_updated_f + (get_option('gmt_offset') * 3600)) . ')';		if ( '' != $title )			$title = ' title="' . $title . '"';		$alt = ' alt="' . $name . '"';		$target = $row->link_target;		if ( '' != $target )			$target = ' target="' . $target . '"';		$output .= '<a href="' . $the_link . '"' . $rel . $title . $target. '>';		if ( $row->link_image != null && $show_images ) {			if ( strpos($row->link_image, 'http') !== false )				$output .= "<img src=\"$row->link_image\" $alt $title />";			else // If it's a relative path				$output .= "<img src=\"" . get_option('siteurl') . "$row->link_image\" $alt $title />";		} else {			$output .= $name;		}		$output .= '</a>';		if ( $show_updated && $row->recently_updated )			$output .= get_option('links_recently_updated_append');		if ( $show_description && '' != $desc )			$output .= $between . $desc;		if ($show_rating) {			$output .= $between . get_linkrating($row);		}		$output .= "$after\n";	} // end while	if ( !$echo )		return $output;	echo $output;}/** * Output entire list of links by category. * * Output a list of all links, listed by category, using the settings in * $wpdb->linkcategories and output it as a nested HTML unordered list. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $order Sort link categories by 'name' or 'id' */function get_links_list($order = 'name') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_bookmarks()' );	$order = strtolower($order);	// Handle link category sorting	$direction = 'ASC';	if ( '_' == substr($order,0,1) ) {		$direction = 'DESC';		$order = substr($order,1);	}	if ( !isset($direction) )		$direction = '';	$cats = get_categories(array('type' => 'link', 'orderby' => $order, 'order' => $direction, 'hierarchical' => 0));	// Display each category	if ( $cats ) {		foreach ( (array) $cats as $cat ) {			// Handle each category.			// Display the category name			echo '  <li id="linkcat-' . $cat->term_id . '" class="linkcat"><h2>' . apply_filters('link_category', $cat->name ) . "</h2>\n\t<ul>\n";			// Call get_links() with all the appropriate params			get_links($cat->term_id, '<li>', "</li>", "\n", true, 'name', false);			// Close the last category			echo "\n\t</ul>\n</li>\n";		}	}}/** * Show the link to the links popup and the number of links. * * @since 0.71 * @deprecated 2.1 * @deprecated {@internal Use function instead is unknown}} * * @param string $text the text of the link * @param int $width the width of the popup window * @param int $height the height of the popup window * @param string $file the page to open in the popup window * @param bool $count the number of links in the db */function links_popup_script($text = 'Links', $width=400, $height=400, $file='links.all.php', $count = true) {	_deprecated_function( __FUNCTION__, '2.1' );	if ( $count )		$counts = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->links");	$javascript = "<a href=\"#\" onclick=\"javascript:window.open('$file?popup=1', '_blank', 'width=$width,height=$height,scrollbars=yes,status=no'); return false\">";	$javascript .= $text;	if ( $count )		$javascript .= " ($counts)";	$javascript .= "</a>\n\n";		echo $javascript;}/** * @since 1.0.1 * @deprecated 2.1 * @deprecated Use sanitize_bookmark_field() * @see sanitize_bookmark_field() * * @param object $link * @return unknown */function get_linkrating($link) {	_deprecated_function( __FUNCTION__, '2.1', 'sanitize_bookmark_field()' );	return sanitize_bookmark_field('link_rating', $link->link_rating, $link->link_id, 'display');}/** * Gets the name of category by id. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_category() * @see get_category() * * @param int $id The category to get. If no category supplied uses 0 * @return string */function get_linkcatname($id = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_category()' );	$id = (int) $id;	if ( empty($id) )		return '';	$cats = wp_get_link_cats($id);	if ( empty($cats) || ! is_array($cats) )		return '';	$cat_id = (int) $cats[0]; // Take the first cat.	$cat = get_category($cat_id);	return $cat->name;}/** * Print RSS comment feed link. * * @since 1.0.1 * @deprecated 2.5 * @deprecated Use post_comments_feed_link() * @see post_comments_feed_link() * * @param string $link_text */function comments_rss_link($link_text = 'Comments RSS') {	_deprecated_function( __FUNCTION__, '2.5', 'post_comments_feed_link()' );	post_comments_feed_link($link_text);}/** * Print/Return link to category RSS2 feed. * * @since 1.2 * @deprecated 2.5 * @deprecated Use get_category_feed_link() * @see get_category_feed_link() * * @param bool $echo * @param int $cat_ID * @return string|null */function get_category_rss_link($echo = false, $cat_ID = 1) {	_deprecated_function( __FUNCTION__, '2.5', 'get_category_feed_link()' );	$link = get_category_feed_link($cat_ID, 'rss2');	if ( $echo )		echo $link;	return $link;}/** * Print/Return link to author RSS feed. * * @since 1.2 * @deprecated 2.5 * @deprecated Use get_author_feed_link() * @see get_author_feed_link() * * @param bool $echo * @param int $author_id * @return string|null */function get_author_rss_link($echo = false, $author_id = 1) {	_deprecated_function( __FUNCTION__, '2.5', 'get_author_feed_link()' );	$link = get_author_feed_link($author_id);	if ( $echo )		echo $link;	return $link;}/** * Return link to the post RSS feed. * * @since 1.5 * @deprecated 2.2 * @deprecated Use get_post_comments_feed_link() * @see get_post_comments_feed_link() * * @return string */function comments_rss() {	_deprecated_function( __FUNCTION__, '2.2', 'get_post_comments_feed_link()' );	return get_post_comments_feed_link();}/** * An alias of wp_create_user(). * * @since 2.0 * @deprecated 2.0 * @deprecated Use wp_create_user() * @see wp_create_user() * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function create_user($username, $password, $email) {	_deprecated_function( __FUNCTION__, '2.0', 'wp_create_user()' );	return wp_create_user($username, $password, $email);}/** * Unused function. * * @deprecated 2.5*/function gzip_compression() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}/** * Retrieve an array of comment data about comment $comment_ID. * * @since 0.71 * @deprecated 2.7 * @deprecated Use get_comment() * @see get_comment() * * @param int $comment_ID The ID of the comment * @param int $no_cache Whether to use the cache (cast to bool) * @param bool $include_unapproved Whether to include unapproved comments * @return array The comment data */function get_commentdata( $comment_ID, $no_cache = 0, $include_unapproved = false ) {	_deprecated_function( __FUNCTION__, '2.7', 'get_comment()' );	return get_comment($comment_ID, ARRAY_A);}/** * Retrieve the category name by the category ID. * * @since 0.71 * @deprecated 2.8 * @deprecated Use get_cat_name() * @see get_cat_name() * * @param int $cat_ID Category ID * @return string category name */function get_catname( $cat_ID ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_cat_name()' );	return get_cat_name( $cat_ID );}/** * Retrieve category children list separated before and after the term IDs. * * @since 1.2.0 * @deprecated 2.8 * @deprecated Use get_term_children() * @see get_term_children() * * @param int $id Category ID to retrieve children. * @param string $before Optional. Prepend before category term ID. * @param string $after Optional, default is empty string. Append after category term ID. * @param array $visited Optional. Category Term IDs that have already been added. * @return string */function get_category_children( $id, $before = '/', $after = '', $visited = array() ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_term_children()' );	if ( 0 == $id )		return '';	$chain = '';	/** TODO: consult hierarchy */	$cat_ids = get_all_category_ids();	foreach ( (array) $cat_ids as $cat_id ) {		if ( $cat_id == $id )			continue;		$category = get_category( $cat_id );		if ( is_wp_error( $category ) )			return $category;		if ( $category->parent == $id && !in_array( $category->term_id, $visited ) ) {			$visited[] = $category->term_id;			$chain .= $before.$category->term_id.$after;			$chain .= get_category_children( $category->term_id, $before, $after );		}	}	return $chain;}/** * Retrieve the description of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('description') * @see get_the_author_meta() * * @return string The author's description. */function get_the_author_description() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'description\')' );	return get_the_author_meta('description');}/** * Display the description of the author of the current post. * * @since 1.0.0 * @deprecated 2.8 * @deprecated Use the_author_meta('description') * @see the_author_meta() */function the_author_description() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'description\')' );	the_author_meta('description');}/** * Retrieve the login name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('login') * @see get_the_author_meta() * * @return string The author's login name (username). */function get_the_author_login() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'login\')' );	return get_the_author_meta('login');}/** * Display the login name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('login') * @see the_author_meta() */function the_author_login() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'login\')' );	the_author_meta('login');}/** * Retrieve the first name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('first_name') * @see get_the_author_meta() * * @return string The author's first name. */function get_the_author_firstname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'first_name\')' );	return get_the_author_meta('first_name');}/** * Display the first name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('first_name') * @see the_author_meta() */function the_author_firstname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'first_name\')' );	the_author_meta('first_name');}/** * Retrieve the last name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('last_name') * @see get_the_author_meta() * * @return string The author's last name. */function get_the_author_lastname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'last_name\')' );	return get_the_author_meta('last_name');}/** * Display the last name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('last_name') * @see the_author_meta() */function the_author_lastname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'last_name\')' );	the_author_meta('last_name');}/** * Retrieve the nickname of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('nickname') * @see get_the_author_meta() * * @return string The author's nickname. */function get_the_author_nickname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'nickname\')' );	return get_the_author_meta('nickname');}/** * Display the nickname of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('nickname') * @see the_author_meta() */function the_author_nickname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'nickname\')' );	the_author_meta('nickname');}/** * Retrieve the email of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('email') * @see get_the_author_meta() * * @return string The author's username. */function get_the_author_email() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'email\')' );	return get_the_author_meta('email');}/** * Display the email of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('email') * @see the_author_meta() */function the_author_email() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'email\')' );	the_author_meta('email');}/** * Retrieve the ICQ number of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('icq') * @see get_the_author_meta() * * @return string The author's ICQ number. */function get_the_author_icq() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'icq\')' );	return get_the_author_meta('icq');}/** * Display the ICQ number of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('icq') * @see the_author_meta() */function the_author_icq() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'icq\')' );	the_author_meta('icq');}/** * Retrieve the Yahoo! IM name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('yim') * @see get_the_author_meta() * * @return string The author's Yahoo! IM name. */function get_the_author_yim() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'yim\')' );	return get_the_author_meta('yim');}/** * Display the Yahoo! IM name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('yim') * @see the_author_meta() */function the_author_yim() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'yim\')' );	the_author_meta('yim');}/** * Retrieve the MSN address of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('msn') * @see get_the_author_meta() * * @return string The author's MSN address. */function get_the_author_msn() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'msn\')' );	return get_the_author_meta('msn');}/** * Display the MSN address of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('msn') * @see the_author_meta() */function the_author_msn() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'msn\')' );	the_author_meta('msn');}/** * Retrieve the AIM address of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('aim') * @see get_the_author_meta() * * @return string The author's AIM address. */function get_the_author_aim() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'aim\')' );	return get_the_author_meta('aim');}/** * Display the AIM address of the author of the current post. * * @since 0.71 * @see the_author_meta() * @deprecated 2.8 * @deprecated Use the_author_meta('aim') */function the_author_aim() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'aim\')' );	the_author_meta('aim');}/** * Retrieve the specified author's preferred display name. * * @since 1.0.0 * @deprecated 2.8 * @deprecated Use get_the_author_meta('display_name') * @see get_the_author_meta() * * @param int $auth_id The ID of the author. * @return string The author's display name. */function get_author_name( $auth_id = false ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'display_name\')' );	return get_the_author_meta('display_name', $auth_id);}/** * Retrieve the URL to the home page of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('url') * @see get_the_author_meta() * * @return string The URL to the author's page. */function get_the_author_url() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'url\')' );	return get_the_author_meta('url');}/** * Display the URL to the home page of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('url') * @see the_author_meta() */function the_author_url() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'url\')' );	the_author_meta('url');}/** * Retrieve the ID of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('ID') * @see get_the_author_meta() * * @return int The author's ID. */function get_the_author_ID() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'ID\')' );	return get_the_author_meta('ID');}/** * Display the ID of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('ID') * @see the_author_meta()*/function the_author_ID() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'ID\')' );	the_author_meta('ID');}/** * Display the post content for the feed. * * For encoding the html or the $encode_html parameter, there are three possible * values. '0' will make urls footnotes and use make_url_footnote(). '1' will * encode special characters and automatically display all of the content. The * value of '2' will strip all HTML tags from the content. * * Also note that you cannot set the amount of words and not set the html * encoding. If that is the case, then the html encoding will default to 2, * which will strip all HTML tags. * * To restrict the amount of words of the content, you can use the cut * parameter. If the content is less than the amount, then there won't be any * dots added to the end. If there is content left over, then dots will be added * and the rest of the content will be removed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_content_rss' on the content before processing. * @see get_the_content() For the $more_link_text, $stripteaser, and $more_file *		parameters. * * @deprecated 2.9.0 * @deprecated Use the_content_feed() * @see the_content_feed() * * @param string $more_link_text Optional. Text to display when more content is available but not displayed. * @param int|bool $stripteaser Optional. Default is 0. * @param string $more_file Optional. * @param int $cut Optional. Amount of words to keep for the content. * @param int $encode_html Optional. How to encode the content. */function the_content_rss($more_link_text='(more...)', $stripteaser=0, $more_file='', $cut = 0, $encode_html = 0) {	_deprecated_function( __FUNCTION__, '2.9', 'the_content_feed' );	$content = get_the_content($more_link_text, $stripteaser, $more_file);	$content = apply_filters('the_content_rss', $content);	if ( $cut && !$encode_html )		$encode_html = 2;	if ( 1== $encode_html ) {		$content = esc_html($content);		$cut = 0;	} elseif ( 0 == $encode_html ) {		$content = make_url_footnote($content);	} elseif ( 2 == $encode_html ) {		$content = strip_tags($content);	}	if ( $cut ) {		$blah = explode(' ', $content);		if ( count($blah) > $cut ) {			$k = $cut;			$use_dotdotdot = 1;		} else {			$k = count($blah);			$use_dotdotdot = 0;		}		/** @todo Check performance, might be faster to use array slice instead. */		for ( $i=0; $i<$k; $i++ )			$excerpt .= $blah[$i].' ';		$excerpt .= ($use_dotdotdot) ? '...' : '';		$content = $excerpt;	}	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Strip HTML and put links at the bottom of stripped content. * * Searches for all of the links, strips them out of the content, and places * them at the bottom of the content with numbers. * * @since 0.71 * @deprecated 2.9.0 * * @param string $content Content to get links * @return string HTML stripped out of content with links at the bottom. */function make_url_footnote( $content ) {	_deprecated_function( __FUNCTION__, '2.9', '' );	preg_match_all( '/<a(.+?)href=\"(.+?)\"(.*?)>(.+?)<\/a>/', $content, $matches );	$links_summary = "\n";	for ( $i=0; $i<count($matches[0]); $i++ ) {		$link_match = $matches[0][$i];		$link_number = '['.($i+1).']';		$link_url = $matches[2][$i];		$link_text = $matches[4][$i];		$content = str_replace( $link_match, $link_text . ' ' . $link_number, $content );		$link_url = ( ( strtolower( substr( $link_url, 0, 7 ) ) != 'http://' ) && ( strtolower( substr( $link_url, 0, 8 ) ) != 'https://' ) ) ? get_option( 'home' ) . $link_url : $link_url;		$links_summary .= "\n" . $link_number . ' ' . $link_url;	}	$content  = strip_tags( $content );	$content .= $links_summary;	return $content;}/** * Retrieve translated string with vertical bar context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * In order to use the separate contexts, the _c() function is used and the * translatable string uses a pipe ('|') which has the context the string is in. * * When the translated string is returned, it is everything before the pipe, not * including the pipe character. If there is no pipe in the translated text then * everything is returned. * * @since 2.2.0 * @deprecated 2.9.0 * @deprecated Use _x() * @see _x() * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _c( $text, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_x()' );	return before_last_bar( translate( $text, $domain ) );}/** * Translates $text like translate(), but assumes that the text * contains a context after its last vertical bar. * * @since 2.5 * @uses translate() * @deprecated 3.0.0 * @deprecated Use _x() * @see _x() * * @param string $text Text to translate * @param string $domain Domain to retrieve the translated text * @return string Translated text */function translate_with_context( $text, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_x()' );	return before_last_bar( translate( $text, $domain ) );}/** * A version of _n(), which supports contexts. * Strips everything from the translation after the last bar. * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use _nx() * @see _nx() * @see _n() For parameters. * @see _c() For parameters. _c() is deprecated. * */function _nc( $single, $plural, $number, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_nx()' );	return before_last_bar( _n( $single, $plural, $number, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * @since 1.2.0 * @deprecated 2.8.0 * @deprecated Use _n() * @see _n() */function __ngettext() {	_deprecated_function( __FUNCTION__, '2.8', '_n()' );	$args = func_get_args();	return call_user_func_array('_n', $args);}/** * Register plural strings in POT file, but don't translate them. * * @since 2.5 * @deprecated 2.8.0 * @deprecated Use _n_noop() * @see _n_noop() */function __ngettext_noop() {	_deprecated_function( __FUNCTION__, '2.8', '_n_noop()' );	$args = func_get_args();	return call_user_func_array('_n_noop', $args);}/** * Retrieve all autoload options, or all options if no autoloaded ones exist. * * @since 1.0.0 * @deprecated 3.0.0 * @deprecated Use wp_load_alloptions()) * @see wp_load_alloptions() * * @return array List of all options. */function get_alloptions() {	_deprecated_function( __FUNCTION__, '3.0', 'wp_load_alloptions()' );	return wp_load_alloptions();}/** * Retrieve HTML content of attachment image with link. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_link() * @see wp_get_attachment_link() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size image. * @param array $max_dims Optional. Max image dimensions. * @param bool $permalink Optional, default is false. Whether to include permalink to image. * @return string */function get_the_attachment_link($id = 0, $fullsize = false, $max_dims = false, $permalink = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_link()' );	$id = (int) $id;	$_post = & get_post($id);	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	$innerHTML = get_attachment_innerHTML($_post->ID, $fullsize, $max_dims);	return "<a href='$url' title='$post_title'>$innerHTML</a>";}/** * Retrieve icon URL and Path. * * @since 2.1.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image_src() * @see wp_get_attachment_image_src() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full image. * @return array Icon URL and full path to file, respectively. */function get_attachment_icon_src( $id = 0, $fullsize = false ) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image_src()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	$file = get_attached_file( $post->ID );	if ( !$fullsize && $src = wp_get_attachment_thumb_url( $post->ID ) ) {		// We have a thumbnail desired, specified and existing		$src_file = basename($src);		$class = 'attachmentthumb';	} elseif ( wp_attachment_is_image( $post->ID ) ) {		// We have an image without a thumbnail		$src = wp_get_attachment_url( $post->ID );		$src_file = & $file;		$class = 'attachmentimage';	} elseif ( $src = wp_mime_type_icon( $post->ID ) ) {		// No thumb, no image. We'll look for a mime-related icon instead.		$icon_dir = apply_filters( 'icon_dir', get_template_directory() . '/images' );		$src_file = $icon_dir . '/' . basename($src);	}	if ( !isset($src) || !$src )		return false;	return array($src, $src_file);}/** * Retrieve HTML content of icon attachment image element. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image() * @see wp_get_attachment_image() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full size image. * @param array $max_dims Optional. Dimensions of image. * @return string HTML content. */function get_attachment_icon( $id = 0, $fullsize = false, $max_dims = false ) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	if ( !$src = get_attachment_icon_src( $post->ID, $fullsize ) )		return false;	list($src, $src_file) = $src;	// Do we need to constrain the image?	if ( ($max_dims = apply_filters('attachment_max_dims', $max_dims)) && file_exists($src_file) ) {		$imagesize = getimagesize($src_file);		if (($imagesize[0] > $max_dims[0]) || $imagesize[1] > $max_dims[1] ) {			$actual_aspect = $imagesize[0] / $imagesize[1];			$desired_aspect = $max_dims[0] / $max_dims[1];			if ( $actual_aspect >= $desired_aspect ) {				$height = $actual_aspect * $max_dims[0];				$constraint = "width='{$max_dims[0]}' ";				$post->iconsize = array($max_dims[0], $height);			} else {				$width = $max_dims[1] / $actual_aspect;				$constraint = "height='{$max_dims[1]}' ";				$post->iconsize = array($width, $max_dims[1]);			}		} else {			$post->iconsize = array($imagesize[0], $imagesize[1]);			$constraint = '';		}	} else {		$constraint = '';	}	$post_title = esc_attr($post->post_title);	$icon = "<img src='$src' title='$post_title' alt='$post_title' $constraint/>";	return apply_filters( 'attachment_icon', $icon, $post->ID );}/** * Retrieve HTML content of image element. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image() * @see wp_get_attachment_image() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full size image. * @param array $max_dims Optional. Dimensions of image. * @return string */function get_attachment_innerHTML($id = 0, $fullsize = false, $max_dims = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	if ( $innerHTML = get_attachment_icon($post->ID, $fullsize, $max_dims))		return $innerHTML;	$innerHTML = esc_attr($post->post_title);	return apply_filters('attachment_innerHTML', $innerHTML, $post->ID);}/* * Retrieve bookmark data based on ID. * * @since 2.0.0 * @deprecated 2.1.0 * @deprecated Use get_bookmark() * @see get_bookmark() * * @param int $bookmark_id ID of link * @param string $output OBJECT, ARRAY_N, or ARRAY_A * @return object|array */function get_link($bookmark_id, $output = OBJECT, $filter = 'raw') {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmark()' );	return get_bookmark($bookmark_id, $output, $filter);}/** * Performs esc_url() for database or redirect usage. * * @since 2.3.1 * @deprecated 2.8.0 * @deprecated Use esc_url_raw() * @see esc_url_raw() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function sanitize_url( $url, $protocols = null ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_url_raw()' );	return esc_url_raw( $url, $protocols );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 1.2.0 * @deprecated 3.0.0 * @deprecated Use esc_url() * @see Alias for esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. * @param string $context Optional. How the URL will be used. Default is 'display'. * @return string The cleaned $url after the 'clean_url' filter is applied. */function clean_url( $url, $protocols = null, $context = 'display' ) {	if ( $context == 'db' )		_deprecated_function( 'clean_url( $context = \'db\' )', '3.0', 'esc_url_raw()' );	else		_deprecated_function( __FUNCTION__, '3.0', 'esc_url()' );	return esc_url( $url, $protocols, $context );}/** * Escape single quotes, specialchar double quotes, and fix line endings. * * The filter 'js_escape' is also applied by esc_js() * * @since 2.0.4 * @deprecated 2.8.0 * @deprecated Use esc_js() * @see esc_js() * * @param string $text The text to be escaped. * @return string Escaped text. */function js_escape( $text ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_js()' );	return esc_js( $text );}/** * Escaping for HTML blocks. * * @deprecated 2.8.0 * @deprecated Use esc_html() * @see esc_html() */function wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_html()' );	if ( func_num_args() > 1 ) { // Maintain backwards compat for people passing additional args		$args = func_get_args();		return call_user_func_array( '_wp_specialchars', $args );	} else {		return esc_html( $string );	}}/** * Escaping for HTML attributes. * * @since 2.0.6 * @deprecated 2.8.0 * @deprecated Use esc_attr() * @see esc_attr() * * @param string $text * @return string */function attribute_escape( $text ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_attr()' );	return esc_attr( $text );}/** * Register widget for sidebar with backwards compatibility. * * Allows $name to be an array that accepts either three elements to grab the * first element and the third for the name or just uses the first element of * the array for the name. * * Passes to {@link wp_register_sidebar_widget()} after argument list and * backwards compatibility is complete. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_register_sidebar_widget() * @see wp_register_sidebar_widget() * * @param string|int $name Widget ID. * @param callback $output_callback Run when widget is called. * @param string $classname Classname widget option. * @param mixed $params,... Widget parameters. */function register_sidebar_widget($name, $output_callback, $classname = '') {	_deprecated_function( __FUNCTION__, '2.8', 'wp_register_sidebar_widget()' );	// Compat	if ( is_array($name) ) {		if ( count($name) == 3 )			$name = sprintf($name[0], $name[2]);		else			$name = $name[0];	}	$id = sanitize_title($name);	$options = array();	if ( !empty($classname) && is_string($classname) )		$options['classname'] = $classname;	$params = array_slice(func_get_args(), 2);	$args = array($id, $name, $output_callback, $options);	if ( !empty($params) )		$args = array_merge($args, $params);	call_user_func_array('wp_register_sidebar_widget', $args);}/** * Alias of {@link wp_unregister_sidebar_widget()}. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_unregister_sidebar_widget() * @see wp_unregister_sidebar_widget() * * @param int|string $id Widget ID. */function unregister_sidebar_widget($id) {	_deprecated_function( __FUNCTION__, '2.8', 'wp_unregister_sidebar_widget()' );	return wp_unregister_sidebar_widget($id);}/** * Registers widget control callback for customizing options. * * Allows $name to be an array that accepts either three elements to grab the * first element and the third for the name or just uses the first element of * the array for the name. * * Passes to {@link wp_register_widget_control()} after the argument list has * been compiled. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_register_widget_control() * @see wp_register_widget_control() * * @param int|string $name Sidebar ID. * @param callback $control_callback Widget control callback to display and process form. * @param int $width Widget width. * @param int $height Widget height. */function register_widget_control($name, $control_callback, $width = '', $height = '') {	_deprecated_function( __FUNCTION__, '2.8', 'wp_register_widget_control()' );	// Compat	if ( is_array($name) ) {		if ( count($name) == 3 )			$name = sprintf($name[0], $name[2]);		else			$name = $name[0];	}	$id = sanitize_title($name);	$options = array();	if ( !empty($width) )		$options['width'] = $width;	if ( !empty($height) )		$options['height'] = $height;	$params = array_slice(func_get_args(), 4);	$args = array($id, $name, $control_callback, $options);	if ( !empty($params) )		$args = array_merge($args, $params);	call_user_func_array('wp_register_widget_control', $args);}/** * Alias of {@link wp_unregister_widget_control()}. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_unregister_widget_control() * @see wp_unregister_widget_control() * * @param int|string $id Widget ID. */function unregister_widget_control($id) {	_deprecated_function( __FUNCTION__, '2.8', 'wp_unregister_widget_control()' );	return wp_unregister_widget_control($id);}/** * Remove user meta data. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use delete_user_meta() * @see delete_user_meta() * * @param int $user_id User ID. * @param string $meta_key Metadata key. * @param mixed $meta_value Metadata value. * @return bool True deletion completed and false if user_id is not a number. */function delete_usermeta( $user_id, $meta_key, $meta_value = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'delete_user_meta()' );	global $wpdb;	if ( !is_numeric( $user_id ) )		return false;	$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);	if ( is_array($meta_value) || is_object($meta_value) )		$meta_value = serialize($meta_value);	$meta_value = trim( $meta_value );	$cur = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	if ( $cur && $cur->umeta_id )		do_action( 'delete_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	if ( ! empty($meta_value) )		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s AND meta_value = %s", $user_id, $meta_key, $meta_value) );	else		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	wp_cache_delete($user_id, 'users');	if ( $cur && $cur->umeta_id )		do_action( 'deleted_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	return true;}/** * Retrieve user metadata. * * If $user_id is not a number, then the function will fail over with a 'false' * boolean return value. Other returned values depend on whether there is only * one item to be returned, which be that single item type. If there is more * than one metadata value, then it will be list of metadata values. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use get_user_meta() * @see get_user_meta() * * @param int $user_id User ID * @param string $meta_key Optional. Metadata key. * @return mixed */function get_usermeta( $user_id, $meta_key = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_user_meta()' );	global $wpdb;	$user_id = (int) $user_id;	if ( !$user_id )		return false;	if ( !empty($meta_key) ) {		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);		$user = wp_cache_get($user_id, 'users');		// Check the cached user object		if ( false !== $user && isset($user->$meta_key) )			$metas = array($user->$meta_key);		else			$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	} else {		$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d", $user_id) );	}	if ( empty($metas) ) {		if ( empty($meta_key) )			return array();		else			return '';	}	$metas = array_map('maybe_unserialize', $metas);	if ( count($metas) == 1 )		return $metas[0];	else		return $metas;}/** * Update metadata of user. * * There is no need to serialize values, they will be serialized if it is * needed. The metadata key can only be a string with underscores. All else will * be removed. * * Will remove the metadata, if the meta value is empty. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use update_user_meta() * @see update_user_meta() * * @param int $user_id User ID * @param string $meta_key Metadata key. * @param mixed $meta_value Metadata value. * @return bool True on successful update, false on failure. */function update_usermeta( $user_id, $meta_key, $meta_value ) {	_deprecated_function( __FUNCTION__, '3.0', 'update_user_meta()' );	global $wpdb;	if ( !is_numeric( $user_id ) )		return false;	$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);	/** @todo Might need fix because usermeta data is assumed to be already escaped */	if ( is_string($meta_value) )		$meta_value = stripslashes($meta_value);	$meta_value = maybe_serialize($meta_value);	if (empty($meta_value)) {		return delete_usermeta($user_id, $meta_key);	}	$cur = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	if ( $cur )		do_action( 'update_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	if ( !$cur )		$wpdb->insert($wpdb->usermeta, compact('user_id', 'meta_key', 'meta_value') );	else if ( $cur->meta_value != $meta_value )		$wpdb->update($wpdb->usermeta, compact('meta_value'), compact('user_id', 'meta_key') );	else		return false;	wp_cache_delete($user_id, 'users');	if ( !$cur )		do_action( 'added_usermeta', $wpdb->insert_id, $user_id, $meta_key, $meta_value );	else		do_action( 'updated_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	return true;}/** * Enable/disable automatic general feed link outputting. * * @since 2.8.0 * @deprecated 3.0.0 * @deprecated Use add_theme_support( 'automatic-feed-links' ) * * @param boolean $add Optional, default is true. Add or remove links. Defaults to true. */function automatic_feed_links( $add = true ) {	_deprecated_function( __FUNCTION__, '3.0', "add_theme_support( 'automatic-feed-links' )" );	if ( $add )		add_theme_support( 'automatic-feed-links' );	else		remove_action( 'wp_head', 'feed_links_extra', 3 ); // Just do this yourself in 3.0+}/** * Retrieve user data based on field. * * @since 1.5.0 * @deprecated 3.0.0 * @deprecated Use get_the_author_meta() * @see get_the_author_meta() */function get_profile( $field, $user = false ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_the_author_meta()' );	if ( $user ) {		$user = get_user_by( 'login', $user );		$user = $user->ID;	}	return get_the_author_meta( $field, $user );}/** * Number of posts user has written. * * @since 0.71 * @deprecated 3.0.0 * @deprecated Use count_user_posts() * @see count_user_posts() */function get_usernumposts( $userid ) {	_deprecated_function( __FUNCTION__, '3.0', 'count_user_posts()' );	return count_user_posts( $userid );}/** * Callback used to change %uXXXX to &#YYY; syntax * * @since 2.8.0 * @access private * @deprecated 3.0.0 * * @param array $matches Single Match * @return string An HTML entity */function funky_javascript_callback($matches) {	return "&#".base_convert($matches[1],16,10).";";}/** * Fixes javascript bugs in browsers. * * Converts unicode characters to HTML numbered entities. * * @since 1.5.0 * @uses $is_macIE * @uses $is_winIE * @deprecated 3.0.0 * * @param string $text Text to be made safe. * @return string Fixed text. */function funky_javascript_fix($text) {	_deprecated_function( __FUNCTION__, '3.0' );	// Fixes for browsers' javascript bugs	global $is_macIE, $is_winIE;	if ( $is_winIE || $is_macIE )		$text =  preg_replace_callback("/\%u([0-9A-F]{4,4})/",					"funky_javascript_callback",					$text);	return $text;}/** * Generates and displays the RDF for the trackback information of current post. * * @since 0.71 * @deprecated 3.0.0 * * @param int $deprecated Not used (Was $timezone = 0) */function trackback_rdf($deprecated = '') {	_deprecated_function( __FUNCTION__, '3.0' );	return '';}/** * Checks that the taxonomy name exists. * * @since 2.3.0 * @deprecated 3.0.0 * @deprecated Use taxonomy_exists() * @see taxonomy_exists() * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy exists. */function is_taxonomy( $taxonomy ) {	_deprecated_function( __FUNCTION__, '3.0', 'taxonomy_exists()' );	return taxonomy_exists( $taxonomy );}/** * Check if Term exists. * * @since 2.3.0 * @deprecated 3.0.0 * @deprecated Use term_exists() * @see term_exists() * * @param int|string $term The term to check * @param string $taxonomy The taxonomy name to use * @param int $parent ID of parent term under which to confine the exists search. * @return mixed Get the term id or Term Object, if exists. */function is_term( $term, $taxonomy = '', $parent = 0 ) {	_deprecated_function( __FUNCTION__, '3.0', 'term_exists()' );	return term_exists( $term, $taxonomy, $parent );}
<?php/** * WordPress Theme Install Administration API * * @package WordPress * @subpackage Administration */$themes_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),	'abbr' => array('title' => array()), 'acronym' => array('title' => array()),	'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),	'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),	'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),	'img' => array('src' => array(), 'class' => array(), 'alt' => array()));$theme_field_defaults = array( 'description' => true, 'sections' => false, 'tested' => true, 'requires' => true,	'rating' => true, 'downloaded' => true, 'downloadlink' => true, 'last_updated' => true, 'homepage' => true,	'tags' => true, 'num_ratings' => true);/** * Retrieve theme installer pages from WordPress Themes API. * * It is possible for a theme to override the Themes API result with three * filters. Assume this is for themes, which can extend on the Theme Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'themes_api_args', is for the args and gives the action as * the second parameter. The hook for 'themes_api_args' must ensure that an * object is returned. * * The second filter, 'themes_api', is the result that would be returned. * * @since 2.8.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Theme Info API. * @return mixed */function themes_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	$args = apply_filters('themes_api_args', $args, $action); //NOTE: Ensure that an object is returned via this filter.	$res = apply_filters('themes_api', false, $action, $args); //NOTE: Allows a theme to completely override the builtin WordPress.org API.	if ( ! $res ) {		$request = wp_remote_post('http://api.wordpress.org/themes/info/1.0/', array( 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('themes_api_failed', __('An Unexpected HTTP Error occured during the API request.</p> <p><a href="?" onclick="document.location.reload(); return false;">Try again</a>'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( ! $res )			$res = new WP_Error('themes_api_failed', __('An unknown error occured'), $request['body']);		}	}	//var_dump(array($args, $res));	return apply_filters('themes_api_result', $res, $action, $args);}/** * Retrieve list of WordPress theme features (aka theme tags) * * @since 2.8.0 * * @return array */function install_themes_feature_list( ) {	if ( !$cache = get_transient( 'wporg_theme_feature_list' ) )		set_transient( 'wporg_theme_feature_list', array( ),  10800);	if ( $cache  )		return $cache;	$feature_list = themes_api( 'feature_list', array( ) );	if ( is_wp_error( $feature_list ) )		return $features;	set_transient( 'wporg_theme_feature_list', $feature_list, 10800 );	return $feature_list;}add_action('install_themes_search', 'install_theme_search', 10, 1);/** * Display theme search results * * @since 2.8.0 * * @param string $page */function install_theme_search($page) {	global $theme_field_defaults;	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$terms = explode(',', $term);			$terms = array_map('trim', $terms);			$terms = array_map('sanitize_title_with_dashes', $terms);			$args['tag'] = $terms;			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$args['fields'] = $theme_field_defaults;	if ( !empty( $_POST['features'] ) ) {		$terms = $_POST['features'];		$terms = array_map( 'trim', $terms );		$terms = array_map( 'sanitize_title_with_dashes', $terms );		$args['tag'] = $terms;		$_REQUEST['s'] = implode( ',', $terms );		$_REQUEST['type'] = 'tag';	}	$api = themes_api('query_themes', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_themes_table_header', 'install_theme_search_form');	display_themes($api->themes, $api->info['page'], $api->info['pages']);}/** * Display search form for searching themes. * * @since 2.8.0 */function install_theme_search_form() {	$type = isset( $_REQUEST['type'] ) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset( $_REQUEST['s'] ) ? stripslashes( $_REQUEST['s'] ) : '';	?><p class="install-help"><?php _e('Search for themes by keyword, author, or tag.') ?></p><form id="search-themes" method="post" action="<?php echo admin_url( 'theme-install.php?tab=search' ); ?>">	<select	name="type" id="typeselector">	<option value="term" <?php selected('term', $type) ?>><?php _e('Term'); ?></option>	<option value="author" <?php selected('author', $type) ?>><?php _e('Author'); ?></option>	<option value="tag" <?php selected('tag', $type) ?>><?php _ex('Tag', 'Theme Installer'); ?></option>	</select>	<input type="text" name="s" size="30" value="<?php echo esc_attr($term) ?>" />	<input type="submit" name="search" value="<?php esc_attr_e('Search'); ?>" class="button" /></form><?php}add_action('install_themes_dashboard', 'install_themes_dashboard');/** * Display tags filter for themes. * * @since 2.8.0 */function install_themes_dashboard() {	install_theme_search_form();?><h4><?php _e('Feature Filter') ?></h4><form method="post" action="<?php echo admin_url( 'theme-install.php?tab=search' ); ?>"><p class="install-help"><?php _e('Find a theme based on specific features') ?></p>	<?php	$feature_list = install_themes_feature_list( );	echo '<div class="feature-filter">';	$trans = array ('Colors' => __('Colors'), 'black' => __('Black'), 'blue' => __('Blue'), 'brown' => __('Brown'),		'green' => __('Green'), 'orange' => __('Orange'), 'pink' => __('Pink'), 'purple' => __('Purple'), 'red' => __('Red'),		'silver' => __('Silver'), 'tan' => __('Tan'), 'white' => __('White'), 'yellow' => __('Yellow'), 'dark' => __('Dark'),		'light' => __('Light'), 'Columns' => __('Columns'), 'one-column' => __('One Column'), 'two-columns' => __('Two Columns'),		'three-columns' => __('Three Columns'), 'four-columns' => __('Four Columns'), 'left-sidebar' => __('Left Sidebar'),		'right-sidebar' => __('Right Sidebar'), 'Width' => __('Width'), 'fixed-width' => __('Fixed Width'), 'flexible-width' => __('Flexible Width'),		'Features' => __('Features'), 'custom-colors' => __('Custom Colors'), 'custom-header' => __('Custom Header'), 'theme-options' => __('Theme Options'),		'threaded-comments' => __('Threaded Comments'), 'sticky-post' => __('Sticky Post'), 'microformats' => __('Microformats'),		'Subject' => __('Subject'), 'holiday' => __('Holiday'), 'photoblogging' => __('Photoblogging'), 'seasonal' => __('Seasonal'),	);	foreach ( (array) $feature_list as $feature_name => $features ) {		if ( isset($trans[$feature_name]) )			 $feature_name = $trans[$feature_name];		$feature_name = esc_html( $feature_name );		echo '<div class="feature-name">' . $feature_name . '</div>';		echo '<ol style="float: left; width: 725px;" class="feature-group">';		foreach ( $features as $feature ) {			$feature_name = $feature;			if ( isset($trans[$feature]) )				$feature_name = $trans[$feature];			$feature_name = esc_html( $feature_name );			$feature = esc_attr($feature);?><li>	<input type="checkbox" name="features[<?php echo $feature; ?>]" id="feature-id-<?php echo $feature; ?>" value="<?php echo $feature; ?>" />	<label for="feature-id-<?php echo $feature; ?>"><?php echo $feature_name; ?></label></li><?php	} ?></ol><br class="clear" /><?php	} ?></div><br class="clear" /><p><input type="submit" name="search" value="<?php esc_attr_e('Find Themes'); ?>" class="button" /></p></form><?php}add_action('install_themes_featured', 'install_themes_featured', 10, 1);/** * Display featured themes. * * @since 2.8.0 * * @param string $page */function install_themes_featured($page = 1) {	global $theme_field_defaults;	$args = array('browse' => 'featured', 'page' => $page, 'fields' => $theme_field_defaults);	$api = themes_api('query_themes', $args);	if ( is_wp_error($api) )		wp_die($api);	display_themes($api->themes, $api->info['page'], $api->info['pages']);}add_action('install_themes_new', 'install_themes_new', 10, 1);/** * Display new themes/ * * @since 2.8.0 * * @param string $page */function install_themes_new($page = 1) {	global $theme_field_defaults;	$args = array('browse' => 'new', 'page' => $page, 'fields' => $theme_field_defaults);	$api = themes_api('query_themes', $args);	if ( is_wp_error($api) )		wp_die($api);	display_themes($api->themes, $api->info['page'], $api->info['pages']);}add_action('install_themes_updated', 'install_themes_updated', 10, 1);/** * Display recently updated themes. * * @since 2.8.0 * * @param string $page */function install_themes_updated($page = 1) {	global $theme_field_defaults;	$args = array('browse' => 'updated', 'page' => $page, 'fields' => $theme_field_defaults);	$api = themes_api('query_themes', $args);	display_themes($api->themes, $api->info['page'], $api->info['pages']);}add_action('install_themes_upload', 'install_themes_upload', 10, 1);function install_themes_upload($page = 1) {?><h4><?php _e('Install a theme in .zip format') ?></h4><p class="install-help"><?php _e('If you have a theme in a .zip format, you may install it by uploading it here.') ?></p><form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-theme') ?>">	<?php wp_nonce_field( 'theme-upload') ?>	<input type="file" name="themezip" />	<input type="submit"	class="button" value="<?php esc_attr_e('Install Now') ?>" /></form>	<?php}function display_theme($theme, $actions = null, $show_details = true) {	global $themes_allowedtags;	if ( empty($theme) )		return;	$name = wp_kses($theme->name, $themes_allowedtags);	$desc = wp_kses($theme->description, $themes_allowedtags);	//if ( strlen($desc) > 30 )	//	$desc =  substr($desc, 0, 15) . '<span class="dots">...</span><span>' . substr($desc, -15) . '</span>';	$preview_link = $theme->preview_url . '?TB_iframe=true&amp;width=600&amp;height=400';	if ( !is_array($actions) ) {		$actions = array();		$actions[] = '<a href="' . admin_url('theme-install.php?tab=theme-information&amp;theme=' . $theme->slug .										'&amp;TB_iframe=true&amp;tbWidth=500&amp;tbHeight=385') . '" class="thickbox thickbox-preview onclick" title="' . esc_attr(sprintf(__('Install &#8220;%s&#8221;'), $name)) . '">' . __('Install') . '</a>';		$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview onclick previewlink" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>';		$actions = apply_filters('theme_install_action_links', $actions, $theme);	}	$actions = implode ( ' | ', $actions );	?><a class='thickbox thickbox-preview screenshot'	href='<?php echo esc_url($preview_link); ?>'	title='<?php echo esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)); ?>'><img src='<?php echo esc_url($theme->screenshot_url); ?>' width='150' /></a><h3><?php echo $name ?></h3><span class='action-links'><?php echo $actions ?></span><p><?php echo $desc ?></p><?php if ( $show_details ) { ?><a href="#theme_detail" class="theme-detail hide-if-no-js" tabindex='4'><?php _e('Details') ?></a><div class="themedetaildiv hide-if-js"><p><strong><?php _e('Version:') ?></strong> <?php echo wp_kses($theme->version, $themes_allowedtags) ?></p><p><strong><?php _e('Author:') ?></strong> <?php echo wp_kses($theme->author, $themes_allowedtags) ?></p><?php if ( ! empty($theme->last_updated) ) : ?><p><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $theme->last_updated ?>"><?php printf( __('%s ago'), human_time_diff(strtotime($theme->last_updated)) ) ?></span></p><?php endif; if ( ! empty($theme->requires) ) : ?><p><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $theme->requires) ?></p><?php endif; if ( ! empty($theme->tested) ) : ?><p><strong><?php _e('Compatible up to:') ?></strong> <?php echo $theme->tested ?></p><?php endif; if ( !empty($theme->downloaded) ) : ?><p><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $theme->downloaded), number_format_i18n($theme->downloaded)) ?></p><?php endif; ?><div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $theme->num_ratings), number_format_i18n($theme->num_ratings)) ?>">	<div class="star star-rating" style="width: <?php echo esc_attr($theme->rating) ?>px"></div>	<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>	<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>	<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>	<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>	<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div></div></div><?php }	/*	 object(stdClass)[59]	 public 'name' => string 'Magazine Basic' (length=14)	 public 'slug' => string 'magazine-basic' (length=14)	 public 'version' => string '1.1' (length=3)	 public 'author' => string 'tinkerpriest' (length=12)	 public 'preview_url' => string 'http://wp-themes.com/?magazine-basic' (length=36)	 public 'screenshot_url' => string 'http://wp-themes.com/wp-content/themes/magazine-basic/screenshot.png' (length=68)	 public 'rating' => float 80	 public 'num_ratings' => int 1	 public 'homepage' => string 'http://wordpress.org/extend/themes/magazine-basic' (length=49)	 public 'description' => string 'A basic magazine style layout with a fully customizable layout through a backend interface. Designed by <a href="http://bavotasan.com">c.bavota</a> of <a href="http://tinkerpriestmedia.com">Tinker Priest Media</a>.' (length=214)	 public 'download_link' => string 'http://wordpress.org/extend/themes/download/magazine-basic.1.1.zip' (length=66)	 */}/** * Display theme content based on theme list. * * @since 2.8.0 * * @param array $themes List of themes. * @param string $page * @param int $totalpages Number of pages. */function display_themes($themes, $page = 1, $totalpages = 1) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><div class="tablenav"><div class="alignleft actions"><?php do_action('install_themes_table_header'); ?></div>	<?php	$url = esc_url($_SERVER['REQUEST_URI']);	if ( ! empty($term) )		$url = add_query_arg('s', $term, $url);	if ( ! empty($type) )		$url = add_query_arg('type', $type, $url);	$page_links = paginate_links( array(			'base' => add_query_arg('paged', '%#%', $url),			'format' => '',			'prev_text' => __('&laquo;'),			'next_text' => __('&raquo;'),			'total' => $totalpages,			'current' => $page	));	if ( $page_links )		echo "\t\t<div class='tablenav-pages'>$page_links</div>";	?></div><br class="clear" /><?php	if ( empty($themes) ) {		_e('No themes found');		return;	}?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php	$rows = ceil(count($themes) / 3);	$table = array();	$theme_keys = array_keys($themes);	for ( $row = 1; $row <= $rows; $row++ )		for ( $col = 1; $col <= 3; $col++ )			$table[$row][$col] = array_shift($theme_keys);	foreach ( $table as $row => $cols ) {	?>	<tr>	<?php	foreach ( $cols as $col => $theme_index ) {		$class = array('available-theme');		if ( $row == 1 ) $class[] = 'top';		if ( $col == 1 ) $class[] = 'left';		if ( $row == $rows ) $class[] = 'bottom';		if ( $col == 3 ) $class[] = 'right';		?>		<td class="<?php echo join(' ', $class); ?>"><?php			if ( isset($themes[$theme_index]) )				display_theme($themes[$theme_index]);		?></td>		<?php } // end foreach $cols ?>	</tr>	<?php } // end foreach $table ?></table><div class="tablenav"><?php if ( $page_links )echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?> <br	class="clear" /></div><?php}add_action('install_themes_pre_theme-information', 'install_theme_information');/** * Display theme information in dialog box form. * * @since 2.8.0 */function install_theme_information() {	//TODO: This function needs a LOT of UI work :)	global $tab, $themes_allowedtags;	$api = themes_api('theme_information', array('slug' => stripslashes( $_REQUEST['theme'] ) ));	if ( is_wp_error($api) )		wp_die($api);	// Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $themes_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key ) {		if ( isset($api->$key) )			$api->$key = wp_kses($api->$key, $themes_allowedtags);	}	iframe_header( __('Theme Install') );	if ( empty($api->download_link) ) {		echo '<div id="message" class="error"><p>' . __('<strong>Error:</strong> This theme is currently not available. Please try again later.') . '</p></div>';		iframe_footer();		exit;	}	if ( !empty($api->tested) && version_compare($GLOBALS['wp_version'], $api->tested, '>') )		echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This theme has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';	else if ( !empty($api->requires) && version_compare($GLOBALS['wp_version'], $api->requires, '<') )		echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This theme has not been marked as <strong>compatible</strong> with your version of WordPress.') . '</p></div>';	// Default to a "new" theme	$type = 'install';	// Check to see if this theme is known to be installed, and has an update awaiting it.	$update_themes = get_site_transient('update_themes');	if ( is_object($update_themes) && isset($update_themes->response) ) {		foreach ( (array)$update_themes->response as $theme_slug => $theme_info ) {			if ( $theme_slug === $api->slug ) {				$type = 'update_available';				$update_file = $theme_slug;				break;			}		}	}	$themes = get_themes();	foreach ( $themes as $this_theme ) {		if ( is_array($this_theme) && $this_theme['Stylesheet'] == $api->slug ) {			if ( $this_theme['Version'] == $api->version ) {				$type = 'latest_installed';			} elseif ( $this_theme['Version'] > $api->version ) {				$type = 'newer_installed';				$newer_version = $this_theme['Version'];			}			break;		}	}?><div class='available-theme'><img src='<?php echo esc_url($api->screenshot_url) ?>' width='300' class="theme-preview-img" /><h3><?php echo $api->name; ?></h3><p><?php printf(__('by %s'), $api->author); ?></p><p><?php printf(__('Version: %s'), $api->version); ?></p><?php$buttons = '<a class="button" id="cancel" href="#" onclick="tb_close();return false;">' . __('Cancel') . '</a> ';switch ( $type ) {default:case 'install':	if ( current_user_can('install_themes') ) :	$buttons .= '<a class="button-primary" id="install" href="' . wp_nonce_url(admin_url('update.php?action=install-theme&theme=' . $api->slug), 'install-theme_' . $api->slug) . '" target="_parent">' . __('Install Now') . '</a>';	endif;	break;case 'update_available':	if ( current_user_can('update_themes') ) :	$buttons .= '<a class="button-primary" id="install"	href="' . wp_nonce_url(admin_url('update.php?action=upgrade-theme&theme=' . $update_file), 'upgrade-theme_' . $update_file) . '" target="_parent">' . __('Install Update Now') . '</a>';	endif;	break;case 'newer_installed':	if ( current_user_can('install_themes') || current_user_can('update_themes') ) :	?><p><?php printf(__('Newer version (%s) is installed.'), $newer_version); ?></p><?php	endif;	break;case 'latest_installed':	if ( current_user_can('install_themes') || current_user_can('update_themes') ) :	?><p><?php _e('This version is already installed.'); ?></p><?php	endif;	break;} ?><br class="clear" /></div><p class="action-button"><?php echo $buttons; ?><br class="clear" /></p><?php	iframe_footer();	exit;}
<?php/** * WordPress Plugin Administration API * * @package WordPress * @subpackage Administration *//** * Parse the plugin contents to retrieve plugin's metadata. * * The metadata of the plugin's data searches for the following in the plugin's * header. All plugin data must be on its own line. For plugin description, it * must not have any newlines or only parts of the description will be displayed * and the same goes for the plugin data. The below is formatted for printing. * * <code> * /* * Plugin Name: Name of Plugin * Plugin URI: Link to plugin information * Description: Plugin Description * Author: Plugin author's name * Author URI: Link to the author's web site * Version: Must be set in the plugin for WordPress 2.3+ * Text Domain: Optional. Unique identifier, should be same as the one used in *		plugin_text_domain() * Domain Path: Optional. Only useful if the translations are located in a *		folder above the plugin's base path. For example, if .mo files are *		located in the locale folder then Domain Path will be "/locale/" and *		must have the first slash. Defaults to the base folder the plugin is *		located in. * Network: Optional. Specify "Network: true" to require that a plugin is activated *		across all sites in an installation. This will prevent a plugin from being *		activated on a single site when Multisite is enabled. *  * / # Remove the space to close comment * </code> * * Plugin data returned array contains the following: *		'Name' - Name of the plugin, must be unique. *		'Title' - Title of the plugin and the link to the plugin's web site. *		'Description' - Description of what the plugin does and/or notes *		from the author. *		'Author' - The author's name *		'AuthorURI' - The authors web site address. *		'Version' - The plugin version number. *		'PluginURI' - Plugin web site address. *		'TextDomain' - Plugin's text domain for localization. *		'DomainPath' - Plugin's relative directory path to .mo files. *		'Network' - Boolean. Whether the plugin can only be activated network wide. * * Some users have issues with opening large files and manipulating the contents * for want is usually the first 1kiB or 2kiB. This function stops pulling in * the plugin contents when it has all of the required plugin data. * * The first 8kiB of the file will be pulled in and if the plugin data is not * within that first 8kiB, then the plugin author should correct their plugin * and move the plugin data headers to the top. * * The plugin file is assumed to have permissions to allow for scripts to read * the file. This is not checked however and the file is only opened for * reading. * * @link http://trac.wordpress.org/ticket/5651 Previous Optimizations. * @link http://trac.wordpress.org/ticket/7372 Further and better Optimizations. * @since 1.5.0 * * @param string $plugin_file Path to the plugin file * @param bool $markup If the returned data should have HTML markup applied * @param bool $translate If the returned data should be translated * @return array See above for description. */function get_plugin_data( $plugin_file, $markup = true, $translate = true ) {	$default_headers = array(		'Name' => 'Plugin Name',		'PluginURI' => 'Plugin URI',		'Version' => 'Version',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'TextDomain' => 'Text Domain',		'DomainPath' => 'Domain Path',		'Network' => 'Network',		// Site Wide Only is deprecated in favor of Network.		'_sitewide' => 'Site Wide Only',	);	$plugin_data = get_file_data( $plugin_file, $default_headers, 'plugin' );	// Site Wide Only is the old header for Network	if ( empty( $plugin_data['Network'] ) && ! empty( $plugin_data['_sitewide'] ) ) {		_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The <code>%1$s</code> plugin header is deprecated. Use <code>%2$s</code> instead.' ), 'Site Wide Only: true', 'Network: true' ) );		$plugin_data['Network'] = $plugin_data['_sitewide'];	}	$plugin_data['Network'] = ( 'true' == strtolower( $plugin_data['Network'] ) );	unset( $plugin_data['_sitewide'] );	//For backward compatibility by default Title is the same as Name.	$plugin_data['Title'] = $plugin_data['Name'];	if ( $markup || $translate )		$plugin_data = _get_plugin_data_markup_translate( $plugin_file, $plugin_data, $markup, $translate );	return $plugin_data;}function _get_plugin_data_markup_translate($plugin_file, $plugin_data, $markup = true, $translate = true) {	//Translate fields30	if ( $translate && ! empty($plugin_data['TextDomain']) ) {		if ( ! empty( $plugin_data['DomainPath'] ) )			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file). $plugin_data['DomainPath']);		else			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file));		foreach ( array('Name', 'PluginURI', 'Description', 'Author', 'AuthorURI', 'Version') as $field )			$plugin_data[ $field ] = translate($plugin_data[ $field ], $plugin_data['TextDomain']);	}	//Apply Markup	if ( $markup ) {		if ( ! empty($plugin_data['PluginURI']) && ! empty($plugin_data['Name']) )			$plugin_data['Title'] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin homepage' ) . '">' . $plugin_data['Name'] . '</a>';		else			$plugin_data['Title'] = $plugin_data['Name'];		if ( ! empty($plugin_data['AuthorURI']) && ! empty($plugin_data['Author']) )			$plugin_data['Author'] = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';		$plugin_data['Description'] = wptexturize( $plugin_data['Description'] );		if ( ! empty($plugin_data['Author']) )			$plugin_data['Description'] .= ' <cite>' . sprintf( __('By %s'), $plugin_data['Author'] ) . '.</cite>';	}	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	// Sanitize all displayed data	$plugin_data['Title']       = wp_kses($plugin_data['Title'], $plugins_allowedtags);	$plugin_data['Version']     = wp_kses($plugin_data['Version'], $plugins_allowedtags);	$plugin_data['Description'] = wp_kses($plugin_data['Description'], $plugins_allowedtags);	$plugin_data['Author']      = wp_kses($plugin_data['Author'], $plugins_allowedtags);	return $plugin_data;}/** * Get a list of a plugin's files. * * @since 2.8.0 * * @param string $plugin Plugin ID * @return array List of files relative to the plugin root. */function get_plugin_files($plugin) {	$plugin_file = WP_PLUGIN_DIR . '/' . $plugin;	$dir = dirname($plugin_file);	$plugin_files = array($plugin);	if ( is_dir($dir) && $dir != WP_PLUGIN_DIR ) {		$plugins_dir = @ opendir( $dir );		if ( $plugins_dir ) {			while (($file = readdir( $plugins_dir ) ) !== false ) {				if ( substr($file, 0, 1) == '.' )					continue;				if ( is_dir( $dir . '/' . $file ) ) {					$plugins_subdir = @ opendir( $dir . '/' . $file );					if ( $plugins_subdir ) {						while (($subfile = readdir( $plugins_subdir ) ) !== false ) {							if ( substr($subfile, 0, 1) == '.' )								continue;							$plugin_files[] = plugin_basename("$dir/$file/$subfile");						}						@closedir( $plugins_subdir );					}				} else {					if ( plugin_basename("$dir/$file") != $plugin )						$plugin_files[] = plugin_basename("$dir/$file");				}			}			@closedir( $plugins_dir );		}	}	return $plugin_files;}/** * Check the plugins directory and retrieve all plugin files with plugin data. * * WordPress only supports plugin files in the base plugins directory * (wp-content/plugins) and in one directory above the plugins directory * (wp-content/plugins/my-plugin). The file it looks for has the plugin data and * must be found in those two locations. It is recommended that do keep your * plugin files in directories. * * The file with the plugin data is the file that will be included and therefore * needs to have the main execution for the plugin. This does not mean * everything must be contained in the file and it is recommended that the file * be split for maintainability. Keep everything in one file for extreme * optimization purposes. * * @since unknown * * @param string $plugin_folder Optional. Relative path to single plugin folder. * @return array Key is the plugin file path and the value is an array of the plugin data. */function get_plugins($plugin_folder = '') {	if ( ! $cache_plugins = wp_cache_get('plugins', 'plugins') )		$cache_plugins = array();	if ( isset($cache_plugins[ $plugin_folder ]) )		return $cache_plugins[ $plugin_folder ];	$wp_plugins = array ();	$plugin_root = WP_PLUGIN_DIR;	if ( !empty($plugin_folder) )		$plugin_root .= $plugin_folder;	// Files in wp-content/plugins directory	$plugins_dir = @ opendir( $plugin_root);	$plugin_files = array();	if ( $plugins_dir ) {		while (($file = readdir( $plugins_dir ) ) !== false ) {			if ( substr($file, 0, 1) == '.' )				continue;			if ( is_dir( $plugin_root.'/'.$file ) ) {				$plugins_subdir = @ opendir( $plugin_root.'/'.$file );				if ( $plugins_subdir ) {					while (($subfile = readdir( $plugins_subdir ) ) !== false ) {						if ( substr($subfile, 0, 1) == '.' )							continue;						if ( substr($subfile, -4) == '.php' )							$plugin_files[] = "$file/$subfile";					}				}			} else {				if ( substr($file, -4) == '.php' )					$plugin_files[] = $file;			}		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	@closedir( $plugins_subdir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( "$plugin_root/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( "$plugin_root/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			continue;		$wp_plugins[plugin_basename( $plugin_file )] = $plugin_data;	}	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	$cache_plugins[ $plugin_folder ] = $wp_plugins;	wp_cache_set('plugins', $cache_plugins, 'plugins');	return $wp_plugins;}/** * Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data. * * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins). * * @since 3.0.0 * @return array Key is the mu-plugin file path and the value is an array of the mu-plugin data. */function get_mu_plugins() {	$wp_plugins = array();	// Files in wp-content/mu-plugins directory	$plugin_files = array();	if ( ! is_dir( WPMU_PLUGIN_DIR ) )		return $wp_plugins;	if ( $plugins_dir = @ opendir( WPMU_PLUGIN_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( substr( $file, -4 ) == '.php' )				$plugin_files[] = $file;		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WPMU_PLUGIN_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WPMU_PLUGIN_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$wp_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $wp_plugins['index.php'] ) && filesize( WPMU_PLUGIN_DIR . '/index.php') <= 30 ) // silence is golden		unset( $wp_plugins['index.php'] );	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	return $wp_plugins;}/** * Check the wp-content directory and retrieve all drop-ins with any plugin data. * * @since 3.0.0 * @return array Key is the file path and the value is an array of the plugin data. */function get_dropins() {	$dropins = array();	$plugin_files = array();	$_dropins = _get_dropins();	// These exist in the wp-content directory	if ( $plugins_dir = @ opendir( WP_CONTENT_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( isset( $_dropins[ $file ] ) )				$plugin_files[] = $file;		}	} else {		return $dropins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $dropins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WP_CONTENT_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WP_CONTENT_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$dropins[ $plugin_file ] = $plugin_data;	}	uksort( $dropins, create_function( '$a, $b', 'return strnatcasecmp( $a, $b );' ));	return $dropins;}/** * Returns drop-ins that WordPress uses. * * Includes Multisite drop-ins only when is_multisite() * * @since 3.0.0 * @return array Key is file name. The value is an array, with the first value the *	purpose of the drop-in and the second value the name of the constant that must be *	true for the drop-in to be used, or true if no constant is required. */function _get_dropins() {	$dropins = array(		'advanced-cache.php' => array( __( 'Advanced caching plugin.'       ), 'WP_CACHE' ), // WP_CACHE		'db.php'             => array( __( 'Custom database class.'         ), true ), // auto on load		'db-error.php'       => array( __( 'Custom database error message.' ), true ), // auto on error		'install.php'        => array( __( 'Custom install script.'         ), true ), // auto on install		'maintenance.php'    => array( __( 'Custom maintenance message.'    ), true ), // auto on maintenance		'object-cache.php'   => array( __( 'External object cache.'         ), true ), // auto on load	);	if ( is_multisite() ) {		$dropins['sunrise.php'       ] = array( __( 'Executed before Multisite is loaded.' ), 'SUNRISE' ); // SUNRISE		$dropins['blog-deleted.php'  ] = array( __( 'Custom site deleted message.'   ), true ); // auto on deleted blog		$dropins['blog-inactive.php' ] = array( __( 'Custom site inactive message.'  ), true ); // auto on inactive blog		$dropins['blog-suspended.php'] = array( __( 'Custom site suspended message.' ), true ); // auto on archived or spammed blog	}	return $dropins;}/** * Check whether the plugin is active by checking the active_plugins list. * * @since 2.5.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if in the active plugins list. False, not in the list. */function is_plugin_active( $plugin ) {	return in_array( $plugin, (array) get_option( 'active_plugins', array() ) ) || is_plugin_active_for_network( $plugin );}/** * Check whether the plugin is active for the entire network. * * @since 3.0.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if active for the network, otherwise false. */function is_plugin_active_for_network( $plugin ) {	if ( !is_multisite() )		return false;	$plugins = get_site_option( 'active_sitewide_plugins');	if ( isset($plugins[$plugin]) )		return true;	return false;}/** * Checks for "Network: true" in the plugin header to see if this should * be activated only as a network wide plugin. The plugin would also work * when Multisite is not enabled. * * Checks for "Site Wide Only: true" for backwards compatibility. * * @since 3.0.0 * * @param $file Plugin to check * $return bool True if plugin is network only, false otherwise. */function is_network_only_plugin( $plugin ) {	$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );	if ( $plugin_data )		return $plugin_data['Network'];	return false;}/** * Attempts activation of plugin in a "sandbox" and redirects on success. * * A plugin that is already activated will not attempt to be activated again. * * The way it works is by setting the redirection to the error before trying to * include the plugin file. If the plugin fails, then the redirection will not * be overwritten with the success message. Also, the options will not be * updated and the activation hook will not be called on plugin error. * * It should be noted that in no way the below code will actually prevent errors * within the file. The code should not be used elsewhere to replicate the * "sandbox", which uses redirection to work. * {@source 13 1} * * If any errors are found or text is outputted, then it will be captured to * ensure that the success redirection will update the error redirection. * * @since unknown * * @param string $plugin Plugin path to main plugin file with plugin data. * @param string $redirect Optional. URL to redirect to. * @param bool $network_wide Whether to enable the plugin for all sites in the network or just the current site.  Multisite only. Default is false. * @return WP_Error|null WP_Error on invalid file or null on success. */function activate_plugin( $plugin, $redirect = '', $network_wide = false) {	$plugin  = plugin_basename( trim( $plugin ) );	if ( is_multisite() && ( $network_wide || is_network_only_plugin($plugin) ) ) {		$network_wide = true;		$current = get_site_option( 'active_sitewide_plugins', array() );	} else {		$current = get_option( 'active_plugins', array() );	}	$valid = validate_plugin($plugin);	if ( is_wp_error($valid) )		return $valid;	if ( !in_array($plugin, $current) ) {		if ( !empty($redirect) )			wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect)); // we'll override this later if the plugin can be included without fatal error		ob_start();		include(WP_PLUGIN_DIR . '/' . $plugin);		do_action( 'activate_plugin', trim( $plugin) );		if ( $network_wide ) {			$current[$plugin] = time();			update_site_option( 'active_sitewide_plugins', $current );		} else {			$current[] = $plugin;			sort($current);			update_option('active_plugins', $current);		}		do_action( 'activate_' . trim( $plugin ) );		do_action( 'activated_plugin', trim( $plugin) );		if ( ob_get_length() > 0 ) {			$output = ob_get_clean();			return new WP_Error('unexpected_output', __('The plugin generated unexpected output.'), $output);		}		ob_end_clean();	}	return null;}/** * Deactivate a single plugin or multiple plugins. * * The deactivation hook is disabled by the plugin upgrader by using the $silent * parameter. * * @since unknown * * @param string|array $plugins Single plugin or list of plugins to deactivate. * @param bool $silent Optional, default is false. Prevent calling deactivate hook. */function deactivate_plugins( $plugins, $silent = false ) {	$network_current = get_site_option( 'active_sitewide_plugins', array() );	$current = get_option( 'active_plugins', array() );	$do_blog = $do_network = false;	foreach ( (array) $plugins as $plugin ) {		$plugin = plugin_basename($plugin);		if ( ! is_plugin_active($plugin) )			continue;		if ( ! $silent )			do_action( 'deactivate_plugin', trim( $plugin ) );		if ( is_plugin_active_for_network($plugin) ) {			// Deactivate network wide			$do_network = true;			unset( $network_current[ $plugin ] );		} else {			// Deactivate for this blog only			$key = array_search( $plugin, (array) $current );			if ( false !== $key ) {				$do_blog = true;				array_splice( $current, $key, 1 );			}		}		//Used by Plugin updater to internally deactivate plugin, however, not to notify plugins of the fact to prevent plugin output.		if ( ! $silent ) {			do_action( 'deactivate_' . trim( $plugin ) );			do_action( 'deactivated_plugin', trim( $plugin ) );		}	}	if ( $do_blog )		update_option('active_plugins', $current);	if ( $do_network )		update_site_option( 'active_sitewide_plugins', $network_current );}/** * Activate multiple plugins. * * When WP_Error is returned, it does not mean that one of the plugins had * errors. It means that one or more of the plugins file path was invalid. * * The execution will be halted as soon as one of the plugins has an error. * * @since unknown * * @param string|array $plugins * @param string $redirect Redirect to page after successful activation. * @param bool $network_wide Whether to enable the plugin for all sites in the network. * @return bool|WP_Error True when finished or WP_Error if there were errors during a plugin activation. */function activate_plugins($plugins, $redirect = '', $network_wide) {	if ( !is_array($plugins) )		$plugins = array($plugins);	$errors = array();	foreach ( (array) $plugins as $plugin ) {		if ( !empty($redirect) )			$redirect = add_query_arg('plugin', $plugin, $redirect);		$result = activate_plugin($plugin, $redirect, $network_wide);		if ( is_wp_error($result) )			$errors[$plugin] = $result;	}	if ( !empty($errors) )		return new WP_Error('plugins_invalid', __('One of the plugins is invalid.'), $errors);	return true;}/** * Remove directory and files of a plugin for a single or list of plugin(s). * * If the plugins parameter list is empty, false will be returned. True when * completed. * * @since unknown * * @param array $plugins List of plugin * @param string $redirect Redirect to page when complete. * @return mixed */function delete_plugins($plugins, $redirect = '' ) {	global $wp_filesystem;	if ( empty($plugins) )		return false;	$checked = array();	foreach( $plugins as $plugin )		$checked[] = 'checked[]=' . $plugin;	ob_start();	$url = wp_nonce_url('plugins.php?action=delete-selected&verify-delete=1&' . implode('&', $checked), 'bulk-manage-plugins');	if ( false === ($credentials = request_filesystem_credentials($url)) ) {		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! WP_Filesystem($credentials) ) {		request_filesystem_credentials($url, '', true); //Failed to connect, Error and request again		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return new WP_Error('fs_error', __('Filesystem error.'), $wp_filesystem->errors);	//Get the base plugin folder	$plugins_dir = $wp_filesystem->wp_plugins_dir();	if ( empty($plugins_dir) )		return new WP_Error('fs_no_plugins_dir', __('Unable to locate WordPress Plugin directory.'));	$plugins_dir = trailingslashit( $plugins_dir );	$errors = array();	foreach( $plugins as $plugin_file ) {		// Run Uninstall hook		if ( is_uninstallable_plugin( $plugin_file ) )			uninstall_plugin($plugin_file);		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin_file) );		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin_file, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin_file);		if ( ! $deleted )			$errors[] = $plugin_file;	}	if ( ! empty($errors) )		return new WP_Error('could_not_remove_plugin', sprintf(__('Could not fully remove the plugin(s) %s.'), implode(', ', $errors)) );	// Force refresh of plugin update information	if ( $current = get_site_transient('update_plugins') ) {		unset( $current->response[ $plugin_file ] );		set_site_transient('update_plugins', $current);	}	return true;}/** * Validate active plugins * * Validate all active plugins, deactivates invalid and * returns an array of deactivated ones. * * @since unknown * @return array invalid plugins, plugin as key, error as value */function validate_active_plugins() {	$plugins = get_option( 'active_plugins', array() );	// validate vartype: array	if ( ! is_array( $plugins ) ) {		update_option( 'active_plugins', array() );		$plugins = array();	}	if ( is_multisite() && is_super_admin() ) {		$network_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		$plugins = array_merge( $plugins, array_keys( $network_plugins ) );	}	if ( empty( $plugins ) )		return;	$invalid = array();	// invalid plugins get deactivated	foreach ( $plugins as $plugin ) {		$result = validate_plugin( $plugin );		if ( is_wp_error( $result ) ) {			$invalid[$plugin] = $result;			deactivate_plugins( $plugin, true );		}	}	return $invalid;}/** * Validate the plugin path. * * Checks that the file exists and {@link validate_file() is valid file}. * * @since unknown * * @param string $plugin Plugin Path * @return WP_Error|int 0 on success, WP_Error on failure. */function validate_plugin($plugin) {	if ( validate_file($plugin) )		return new WP_Error('plugin_invalid', __('Invalid plugin path.'));	if ( ! file_exists(WP_PLUGIN_DIR . '/' . $plugin) )		return new WP_Error('plugin_not_found', __('Plugin file does not exist.'));	$installed_plugins = get_plugins();	if ( ! isset($installed_plugins[$plugin]) )		return new WP_Error('no_plugin_header', __('The plugin does not have a valid header.'));	return 0;}/** * Whether the plugin can be uninstalled. * * @since 2.7.0 * * @param string $plugin Plugin path to check. * @return bool Whether plugin can be uninstalled. */function is_uninstallable_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( isset( $uninstallable_plugins[$file] ) || file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) )		return true;	return false;}/** * Uninstall a single plugin. * * Calls the uninstall hook, if it is available. * * @since 2.7.0 * * @param string $plugin Relative plugin path from Plugin Directory. */function uninstall_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) ) {		if ( isset( $uninstallable_plugins[$file] ) ) {			unset($uninstallable_plugins[$file]);			update_option('uninstall_plugins', $uninstallable_plugins);		}		unset($uninstallable_plugins);		define('WP_UNINSTALL_PLUGIN', $file);		include WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php';		return true;	}	if ( isset( $uninstallable_plugins[$file] ) ) {		$callable = $uninstallable_plugins[$file];		unset($uninstallable_plugins[$file]);		update_option('uninstall_plugins', $uninstallable_plugins);		unset($uninstallable_plugins);		include WP_PLUGIN_DIR . '/' . $file;		add_action( 'uninstall_' . $file, $callable );		do_action( 'uninstall_' . $file );	}}//// Menu///** * Add a top level menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu * @param int $position The position in the menu order this one should appear */function add_menu_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = NULL ) {	global $menu, $admin_page_hooks, $_registered_pages, $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$admin_page_hooks[$menu_slug] = sanitize_title( $menu_title );	$hookname = get_plugin_page_hookname( $menu_slug, '' );	if ( !empty( $function ) && !empty( $hookname ) && current_user_can( $capability ) )		add_action( $hookname, $function );	if ( empty($icon_url) )		$icon_url = esc_url( admin_url( 'images/generic.png' ) );	elseif ( is_ssl() && 0 === strpos($icon_url, 'http://') )		$icon_url = 'https://' . substr($icon_url, 7);	$new_menu = array( $menu_title, $capability, $menu_slug, $page_title, 'menu-top ' . $hookname, $hookname, $icon_url );	if ( null === $position  )		$menu[] = $new_menu;	else		$menu[$position] = $new_menu;	$_registered_pages[$hookname] = true;	// No parent as top level	$_parent_pages[$menu_slug] = false;	return $hookname;}/** * Add a top level menu page in the 'objects' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_object_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_object_menu;	$_wp_last_object_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_object_menu);}/** * Add a top level menu page in the 'utility' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_utility_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_utility_menu;	$_wp_last_utility_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_utility_menu);}/** * Add a sub menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $parent_slug The slug name for the parent menu (or the file name of a standard WordPress admin page) * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_submenu_page( $parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	global $submenu;	global $menu;	global $_wp_real_parent_file;	global $_wp_submenu_nopriv;	global $_registered_pages;	global $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$parent_slug = plugin_basename( $parent_slug);	if ( isset( $_wp_real_parent_file[$parent_slug] ) )		$parent_slug = $_wp_real_parent_file[$parent_slug];	if ( !current_user_can( $capability ) ) {		$_wp_submenu_nopriv[$parent_slug][$menu_slug] = true;		return false;	}	// If the parent doesn't already have a submenu, add a link to the parent	// as the first item in the submenu.  If the submenu file is the same as the	// parent file someone is trying to link back to the parent manually.  In	// this case, don't automatically add a link back to avoid duplication.	if (!isset( $submenu[$parent_slug] ) && $menu_slug != $parent_slug  ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $parent_slug && current_user_can( $parent_menu[1] ) )				$submenu[$parent_slug][] = $parent_menu;		}	}	$submenu[$parent_slug][] = array ( $menu_title, $capability, $menu_slug, $page_title );	$hookname = get_plugin_page_hookname( $menu_slug, $parent_slug);	if (!empty ( $function ) && !empty ( $hookname ))		add_action( $hookname, $function );	$_registered_pages[$hookname] = true;	// backwards-compatibility for plugins using add_management page.  See wp-admin/admin.php for redirect from edit.php to tools.php	if ( 'tools.php' == $parent_slug )		$_registered_pages[get_plugin_page_hookname( $menu_slug, 'edit.php')] = true;	// No parent as top level	$_parent_pages[$menu_slug] = $parent_slug;	return $hookname;}/** * Add sub menu page to the tools main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_management_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'tools.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the options main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_options_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'options-general.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the themes main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_theme_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'themes.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the plugins main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_plugins_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'plugins.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Users/Profile main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_users_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	if ( current_user_can('edit_users') )		$parent = 'users.php';	else		$parent = 'profile.php';	return add_submenu_page( $parent, $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Dashboard main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_dashboard_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'index.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the posts main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_posts_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the media main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_media_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'upload.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the links main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_links_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'link-manager.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the pages main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_pages_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php?post_type=page', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the comments main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_comments_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit-comments.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Get the url to access a particular menu page based on the slug it was registered with. * * If the slug hasn't been registered properly no url will be returned * * @since 3.0 * * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param bool $echo Whether or not to echo the url - default is true * @return string the url */function menu_page_url($menu_slug, $echo = true) {	global $_parent_pages;	if ( isset( $_parent_pages[$menu_slug] ) ) {		if ( $_parent_pages[$menu_slug] ) {			$url = admin_url( add_query_arg( 'page', $menu_slug, $_parent_pages[$menu_slug] ) );		} else {			$url = admin_url('admin.php?page=' . $menu_slug);		}	} else {		$url = '';	}	$url = esc_url($url);	if ( $echo )		echo $url;	return $url;}//// Pluggable Menu Support -- Private//function get_admin_page_parent( $parent = '' ) {	global $parent_file;	global $menu;	global $submenu;	global $pagenow;	global $typenow;	global $plugin_page;	global $_wp_real_parent_file;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	if ( !empty ( $parent ) && 'admin.php' != $parent ) {		if ( isset( $_wp_real_parent_file[$parent] ) )			$parent = $_wp_real_parent_file[$parent];		return $parent;	}	/*	if ( !empty ( $parent_file ) ) {		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	*/	if ( $pagenow == 'admin.php' && isset( $plugin_page ) ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $plugin_page ) {				$parent_file = $plugin_page;				if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];				return $parent_file;			}		}		if ( isset( $_wp_menu_nopriv[$plugin_page] ) ) {			$parent_file = $plugin_page;			if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];			return $parent_file;		}	}	if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) ) {		$parent_file = $pagenow;		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	foreach (array_keys( (array)$submenu ) as $parent) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $_wp_real_parent_file[$parent] ) )				$parent = $_wp_real_parent_file[$parent];			if ( !empty($typenow) && ($submenu_array[2] == "$pagenow?post_type=$typenow") ) {				$parent_file = $parent;				return $parent;			} elseif ( $submenu_array[2] == $pagenow && empty($typenow) && ( empty($parent_file) || false === strpos($parent_file, '?') ) ) {				$parent_file = $parent;				return $parent;			} else				if ( isset( $plugin_page ) && ($plugin_page == $submenu_array[2] ) ) {					$parent_file = $parent;					return $parent;				}		}	}	if ( empty($parent_file) )		$parent_file = '';	return '';}function get_admin_page_title() {	global $title;	global $menu;	global $submenu;	global $pagenow;	global $plugin_page;	global $typenow;	if ( ! empty ( $title ) )		return $title;	$hook = get_plugin_page_hook( $plugin_page, $pagenow );	$parent = $parent1 = get_admin_page_parent();	if ( empty ( $parent) ) {		foreach ( (array)$menu as $menu_array ) {			if ( isset( $menu_array[3] ) ) {				if ( $menu_array[2] == $pagenow ) {					$title = $menu_array[3];					return $menu_array[3];				} else					if ( isset( $plugin_page ) && ($plugin_page == $menu_array[2] ) && ($hook == $menu_array[3] ) ) {						$title = $menu_array[3];						return $menu_array[3];					}			} else {				$title = $menu_array[0];				return $title;			}		}	} else {		foreach ( array_keys( $submenu ) as $parent ) {			foreach ( $submenu[$parent] as $submenu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $submenu_array[2] ) &&					(						( $parent == $pagenow ) ||						( $parent == $plugin_page ) ||						( $plugin_page == $hook ) ||						( $pagenow == 'admin.php' && $parent1 != $submenu_array[2] ) ||						( !empty($typenow) && $parent == $pagenow . '?post_type=' . $typenow)					)					) {						$title = $submenu_array[3];						return $submenu_array[3];					}				if ( $submenu_array[2] != $pagenow || isset( $_GET['page'] ) ) // not the current page					continue;				if ( isset( $submenu_array[3] ) ) {					$title = $submenu_array[3];					return $submenu_array[3];				} else {					$title = $submenu_array[0];					return $title;				}			}		}		if ( empty ( $title ) ) {			foreach ( $menu as $menu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $menu_array[2] ) &&					( $pagenow == 'admin.php' ) &&					( $parent1 == $menu_array[2] ) )					{						$title = $menu_array[3];						return $menu_array[3];					}			}		}	}	return $title;}function get_plugin_page_hook( $plugin_page, $parent_page ) {	$hook = get_plugin_page_hookname( $plugin_page, $parent_page );	if ( has_action($hook) )		return $hook;	else		return null;}function get_plugin_page_hookname( $plugin_page, $parent_page ) {	global $admin_page_hooks;	$parent = get_admin_page_parent( $parent_page );	$page_type = 'admin';	if ( empty ( $parent_page ) || 'admin.php' == $parent_page || isset( $admin_page_hooks[$plugin_page] ) ) {		if ( isset( $admin_page_hooks[$plugin_page] ) )			$page_type = 'toplevel';		else			if ( isset( $admin_page_hooks[$parent] ))				$page_type = $admin_page_hooks[$parent];	} else if ( isset( $admin_page_hooks[$parent] ) ) {		$page_type = $admin_page_hooks[$parent];	}	$plugin_name = preg_replace( '!\.php!', '', $plugin_page );	return $page_type . '_page_' . $plugin_name;}function user_can_access_admin_page() {	global $pagenow;	global $menu;	global $submenu;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	global $plugin_page;	global $_registered_pages;	$parent = get_admin_page_parent();	if ( !isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$parent][$pagenow] ) )		return false;	if ( isset( $plugin_page ) ) {		if ( isset( $_wp_submenu_nopriv[$parent][$plugin_page] ) )			return false;		$hookname = get_plugin_page_hookname($plugin_page, $parent);		if ( !isset($_registered_pages[$hookname]) )			return false;	}	if ( empty( $parent) ) {		if ( isset( $_wp_menu_nopriv[$pagenow] ) )			return false;		if ( isset( $_wp_submenu_nopriv[$pagenow][$pagenow] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_menu_nopriv[$plugin_page] ) )			return false;		foreach (array_keys( $_wp_submenu_nopriv ) as $key ) {			if ( isset( $_wp_submenu_nopriv[$key][$pagenow] ) )				return false;			if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$key][$plugin_page] ) )			return false;		}		return true;	}	if ( isset( $plugin_page ) && ( $plugin_page == $parent ) && isset( $_wp_menu_nopriv[$plugin_page] ) )		return false;	if ( isset( $submenu[$parent] ) ) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $plugin_page ) && ( $submenu_array[2] == $plugin_page ) ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			} else if ( $submenu_array[2] == $pagenow ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			}		}	}	foreach ( $menu as $menu_array ) {		if ( $menu_array[2] == $parent) {			if ( current_user_can( $menu_array[1] ))				return true;			else				return false;		}	}	return true;}/* Whitelist functions *//** * Register a setting and its sanitization callback * * @since 2.7.0 * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function register_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$new_whitelist_options[ $option_group ][] = $option_name;	if ( $sanitize_callback != '' )		add_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function unregister_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$pos = array_search( $option_name, (array) $new_whitelist_options );	if ( $pos !== false )		unset( $new_whitelist_options[ $option_group ][ $pos ] );	if ( $sanitize_callback != '' )		remove_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $options * @return unknown */function option_update_filter( $options ) {	global $new_whitelist_options;	if ( is_array( $new_whitelist_options ) )		$options = add_option_whitelist( $new_whitelist_options, $options );	return $options;}add_filter( 'whitelist_options', 'option_update_filter' );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $new_options * @param unknown_type $options * @return unknown */function add_option_whitelist( $new_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $new_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( !isset($whitelist_options[ $page ]) || !is_array($whitelist_options[ $page ]) ) {				$whitelist_options[ $page ] = array();				$whitelist_options[ $page ][] = $key;			} else {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos === false )					$whitelist_options[ $page ][] = $key;			}		}	}	return $whitelist_options;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $del_options * @param unknown_type $options * @return unknown */function remove_option_whitelist( $del_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $del_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( isset($whitelist_options[ $page ]) && is_array($whitelist_options[ $page ]) ) {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos !== false )					unset( $whitelist_options[ $page ][ $pos ] );			}		}	}	return $whitelist_options;}/** * Output nonce, action, and option_page fields for a settings page. * * @since 2.7.0 * * @param string $option_group A settings group name.  This should match the group name used in register_setting(). */function settings_fields($option_group) {	echo "<input type='hidden' name='option_page' value='" . esc_attr($option_group) . "' />";	echo '<input type="hidden" name="action" value="update" />';	wp_nonce_field("$option_group-options");}?>
<?php/** * Writing settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Writing Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can submit content in several different ways; this screen holds the settings for all of them. The top section controls the editor within these administration screens, while the rest control external publishing methods. For more information on any of these methods, use the documentation links below.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Writing_SubPanel" target="_blank">Writing Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('writing'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="default_post_edit_rows"> <?php _e('Size of the post box') ?></label></th><td><input name="default_post_edit_rows" type="text" id="default_post_edit_rows" value="<?php form_option('default_post_edit_rows'); ?>" class="small-text" /><?php _e('lines') ?></td></tr><tr valign="top"><th scope="row"><?php _e('Formatting') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Formatting') ?></span></legend><label for="use_smilies"><input name="use_smilies" type="checkbox" id="use_smilies" value="1" <?php checked('1', get_option('use_smilies')); ?> /><?php _e('Convert emoticons like <code>:-)</code> and <code>:-P</code> to graphics on display') ?></label><br /><label for="use_balanceTags"><input name="use_balanceTags" type="checkbox" id="use_balanceTags" value="1" <?php checked('1', get_option('use_balanceTags')); ?> /> <?php _e('WordPress should correct invalidly nested XHTML automatically') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_category"><?php _e('Default Post Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_category', 'orderby' => 'name', 'selected' => get_option('default_category'), 'hierarchical' => true));?></td></tr><tr valign="top"><th scope="row"><label for="default_link_category"><?php _e('Default Link Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_link_category', 'orderby' => 'name', 'selected' => get_option('default_link_category'), 'hierarchical' => true, 'taxonomy' => 'link_category'));?></td></tr><?php do_settings_fields('writing', 'default'); ?></table><h3 class="title"><?php _e('Press This') ?></h3><p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p><p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p><p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p><p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p><?php if ( apply_filters( 'enable_post_by_email_configuration', true ) ) { ?><h3><?php _e('Post via e-mail') ?></h3><p><?php printf(__('To post to WordPress by e-mail you must set up a secret e-mail account with POP3 access. Any mail received at this address will be posted, so it&#8217;s a good idea to keep this address very secret. Here are three random strings you could use: <kbd>%s</kbd>, <kbd>%s</kbd>, <kbd>%s</kbd>.'), wp_generate_password(8, false), wp_generate_password(8, false), wp_generate_password(8, false)) ?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="mailserver_url"><?php _e('Mail Server') ?></label></th><td><input name="mailserver_url" type="text" id="mailserver_url" value="<?php form_option('mailserver_url'); ?>" class="regular-text code" /><label for="mailserver_port"><?php _e('Port') ?></label><input name="mailserver_port" type="text" id="mailserver_port" value="<?php form_option('mailserver_port'); ?>" class="small-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_login"><?php _e('Login Name') ?></label></th><td><input name="mailserver_login" type="text" id="mailserver_login" value="<?php form_option('mailserver_login'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_pass"><?php _e('Password') ?></label></th><td><input name="mailserver_pass" type="text" id="mailserver_pass" value="<?php form_option('mailserver_pass'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="default_email_category"><?php _e('Default Mail Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_email_category', 'orderby' => 'name', 'selected' => get_option('default_email_category'), 'hierarchical' => true));?></td></tr><?php do_settings_fields('writing', 'post_via_email'); ?></table><?php } ?><h3><?php _e('Remote Publishing') ?></h3><p><?php printf(__('To post to WordPress from a desktop blogging client or remote website that uses the Atom Publishing Protocol or one of the XML-RPC publishing interfaces you must enable them below.')) ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Atom Publishing Protocol') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Atom Publishing Protocol') ?></span></legend><label for="enable_app"><input name="enable_app" type="checkbox" id="enable_app" value="1" <?php checked('1', get_option('enable_app')); ?> /><?php _e('Enable the Atom Publishing Protocol.') ?></label><br /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('XML-RPC') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('XML-RPC') ?></span></legend><label for="enable_xmlrpc"><input name="enable_xmlrpc" type="checkbox" id="enable_xmlrpc" value="1" <?php checked('1', get_option('enable_xmlrpc')); ?> /><?php _e('Enable the WordPress, Movable Type, MetaWeblog and Blogger XML-RPC publishing protocols.') ?></label><br /></fieldset></td></tr><?php do_settings_fields('writing', 'remote_publishing'); ?></table><?php if ( apply_filters( 'enable_update_services_configuration', true ) ) { ?><h3><?php _e('Update Services') ?></h3><?php if ( get_option('blog_public') ) : ?><p><label for="ping_sites"><?php _e('When you publish a new post, WordPress automatically notifies the following site update services. For more about this, see <a href="http://codex.wordpress.org/Update_Services">Update Services</a> on the Codex. Separate multiple service <abbr title="Universal Resource Locator">URL</abbr>s with line breaks.') ?></label></p><textarea name="ping_sites" id="ping_sites" class="large-text code" rows="3"><?php form_option('ping_sites'); ?></textarea><?php else : ?>	<p><?php printf(__('WordPress is not notifying any <a href="http://codex.wordpress.org/Update_Services">Update Services</a> because of your site&#8217;s <a href="%s">privacy settings</a>.'), 'options-privacy.php'); ?></p><?php endif; ?><?php } // multisite ?><?php do_settings_sections('writing'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * WordPress Widgets Administration API * * @package WordPress * @subpackage Administration *//** * Display list of the available widgets, either all or matching search. * * The search parameter are search terms separated by spaces. * * @since unknown * * @param string $show Optional, default is all. What to display, can be 'all', 'unused', or 'used'. * @param string $_search Optional. Search for widgets. Should be unsanitized. */function wp_list_widgets() {	global $wp_registered_widgets, $sidebars_widgets, $wp_registered_widget_controls;	$sort = $wp_registered_widgets;	usort( $sort, create_function( '$a, $b', 'return strnatcasecmp( $a["name"], $b["name"] );' ) );	$done = array();	foreach ( $sort as $widget ) {		if ( in_array( $widget['callback'], $done, true ) ) // We already showed this multi-widget			continue;		$sidebar = is_active_widget( $widget['callback'], $widget['id'], false, false );		$done[] = $widget['callback'];		if ( ! isset( $widget['params'][0] ) )			$widget['params'][0] = array();		$args = array( 'widget_id' => $widget['id'], 'widget_name' => $widget['name'], '_display' => 'template' );		if ( isset($wp_registered_widget_controls[$widget['id']]['id_base']) && isset($widget['params'][0]['number']) ) {			$id_base = $wp_registered_widget_controls[$widget['id']]['id_base'];			$args['_temp_id'] = "$id_base-__i__";			$args['_multi_num'] = next_widget_id_number($id_base);			$args['_add'] = 'multi';		} else {			$args['_add'] = 'single';			if ( $sidebar )				$args['_hide'] = '1';		}		$args = wp_list_widget_controls_dynamic_sidebar( array( 0 => $args, 1 => $widget['params'][0] ) );		call_user_func_array( 'wp_widget_control', $args );	}}/** * Show the widgets and their settings for a sidebar. * Used in the the admin widget config screen. * * @since unknown * * @param string $sidebar id slug of the sidebar */function wp_list_widget_controls( $sidebar ) {	add_filter( 'dynamic_sidebar_params', 'wp_list_widget_controls_dynamic_sidebar' );	echo "<div id='$sidebar' class='widgets-sortables'>\n";	$description = wp_sidebar_description( $sidebar );	if ( !empty( $description ) ) {		echo "<div class='sidebar-description'>\n";		echo "\t<p class='description'>$description</p>";		echo "</div>\n";	}	dynamic_sidebar( $sidebar );	echo "</div>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param array $params * @return array */function wp_list_widget_controls_dynamic_sidebar( $params ) {	global $wp_registered_widgets;	static $i = 0;	$i++;	$widget_id = $params[0]['widget_id'];	$id = isset($params[0]['_temp_id']) ? $params[0]['_temp_id'] : $widget_id;	$hidden = isset($params[0]['_hide']) ? ' style="display:none;"' : '';	$params[0]['before_widget'] = "<div id='widget-${i}_$id' class='widget'$hidden>";	$params[0]['after_widget'] = "</div>";	$params[0]['before_title'] = "%BEG_OF_TITLE%"; // deprecated	$params[0]['after_title'] = "%END_OF_TITLE%"; // deprecated	if ( is_callable( $wp_registered_widgets[$widget_id]['callback'] ) ) {		$wp_registered_widgets[$widget_id]['_callback'] = $wp_registered_widgets[$widget_id]['callback'];		$wp_registered_widgets[$widget_id]['callback'] = 'wp_widget_control';	}	return $params;}function next_widget_id_number($id_base) {	global $wp_registered_widgets;	$number = 1;	foreach ( $wp_registered_widgets as $widget_id => $widget ) {		if ( preg_match( '/' . $id_base . '-([0-9]+)$/', $widget_id, $matches ) )			$number = max($number, $matches[1]);	}	$number++;	return $number;}/** * Meta widget used to display the control form for a widget. * * Called from dynamic_sidebar(). * * @since unknown * * @param array $sidebar_args * @return array */function wp_widget_control( $sidebar_args ) {	global $wp_registered_widgets, $wp_registered_widget_controls, $sidebars_widgets;	$widget_id = $sidebar_args['widget_id'];	$sidebar_id = isset($sidebar_args['id']) ? $sidebar_args['id'] : false;	$key = $sidebar_id ? array_search( $widget_id, $sidebars_widgets[$sidebar_id] ) : '-1'; // position of widget in sidebar	$control = isset($wp_registered_widget_controls[$widget_id]) ? $wp_registered_widget_controls[$widget_id] : array();	$widget = $wp_registered_widgets[$widget_id];	$id_format = $widget['id'];	$widget_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $widget_id;	$multi_number = isset($sidebar_args['_multi_num']) ? $sidebar_args['_multi_num'] : '';	$add_new = isset($sidebar_args['_add']) ? $sidebar_args['_add'] : '';	$query_arg = array( 'editwidget' => $widget['id'] );	if ( $add_new ) {		$query_arg['addnew'] = 1;		if ( $multi_number ) {			$query_arg['num'] = $multi_number;			$query_arg['base'] = $id_base;		}	} else {		$query_arg['sidebar'] = $sidebar_id;		$query_arg['key'] = $key;	}	// We aren't showing a widget control, we're outputing a template for a mult-widget control	if ( isset($sidebar_args['_display']) && 'template' == $sidebar_args['_display'] && $widget_number ) {		// number == -1 implies a template where id numbers are replaced by a generic '__i__'		$control['params'][0]['number'] = -1;		// with id_base widget id's are constructed like {$id_base}-{$id_number}		if ( isset($control['id_base']) )			$id_format = $control['id_base'] . '-__i__';	}	$wp_registered_widgets[$widget_id]['callback'] = $wp_registered_widgets[$widget_id]['_callback'];	unset($wp_registered_widgets[$widget_id]['_callback']);	$widget_title = esc_html( strip_tags( $sidebar_args['widget_name'] ) );	$has_form = 'noform';	echo $sidebar_args['before_widget']; ?>	<div class="widget-top">	<div class="widget-title-action">		<a class="widget-action hide-if-no-js" href="#available-widgets"></a>		<a class="widget-control-edit hide-if-js" href="<?php echo esc_url( add_query_arg( $query_arg ) ); ?>"><span class="edit"><?php _e('Edit'); ?></span><span class="add"><?php _e('Add'); ?></span></a>	</div>	<div class="widget-title"><h4><?php echo $widget_title ?><span class="in-widget-title"></span></h4></div>	</div>	<div class="widget-inside">	<form action="" method="post">	<div class="widget-content"><?php	if ( isset($control['callback']) )		$has_form = call_user_func_array( $control['callback'], $control['params'] );	else		echo "\t\t<p>" . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($id_format); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="widget-width" class="widget-width" value="<?php if (isset( $control['width'] )) echo esc_attr($control['width']); ?>" />	<input type="hidden" name="widget-height" class="widget-height" value="<?php if (isset( $control['height'] )) echo esc_attr($control['height']); ?>" />	<input type="hidden" name="widget_number" class="widget_number" value="<?php echo esc_attr($widget_number); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" />	<input type="hidden" name="add_new" class="add_new" value="<?php echo esc_attr($add_new); ?>" />	<div class="widget-control-actions">		<div class="alignleft">		<a class="widget-control-remove" href="#remove"><?php _e('Delete'); ?></a> |		<a class="widget-control-close" href="#close"><?php _e('Close'); ?></a>		</div>		<div class="alignright<?php if ( 'noform' === $has_form ) echo ' widget-control-noform'; ?>">		<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback " title="" alt="" />		<input type="submit" name="savewidget" class="button-primary widget-control-save" value="<?php esc_attr_e('Save'); ?>" />		</div>		<br class="clear" />	</div>	</form>	</div>	<div class="widget-description"><?php echo ( $widget_description = wp_widget_description($widget_id) ) ? "$widget_description\n" : "$widget_title\n"; ?>	</div><?php	echo $sidebar_args['after_widget'];	return $sidebar_args;}
<?php/** * WordPress AJAX Process Execution. * * @package WordPress * @subpackage Administration *//** * Executing AJAX process. * * @since unknown */define('DOING_AJAX', true);define('WP_ADMIN', true);require_once('../wp-load.php');if ( ! isset( $_REQUEST['action'] ) )	die('-1');require_once('./includes/admin.php');@header('Content-Type: text/html; charset=' . get_option('blog_charset'));send_nosniff_header();do_action('admin_init');if ( ! is_user_logged_in() ) {	if ( isset( $_POST['action'] ) && $_POST['action'] == 'autosave' ) {		$id = isset($_POST['post_ID'])? (int) $_POST['post_ID'] : 0;		if ( ! $id )			die('-1');		$message = sprintf( __('<strong>ALERT: You are logged out!</strong> Could not save draft. <a href="%s" target="_blank">Please log in again.</a>'), wp_login_url() );		$x = new WP_Ajax_Response( array(			'what' => 'autosave',			'id' => $id,			'data' => $message		) );		$x->send();	}	if ( !empty( $_REQUEST['action'] ) )		do_action( 'wp_ajax_nopriv_' . $_REQUEST['action'] );	die('-1');}if ( isset( $_GET['action'] ) ) :switch ( $action = $_GET['action'] ) :case 'ajax-tag-search' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$s = $_GET['q']; // is this slashed already?	if ( isset($_GET['tax']) )		$taxonomy = sanitize_title($_GET['tax']);	else		die('0');	if ( false !== strpos( $s, ',' ) ) {		$s = explode( ',', $s );		$s = $s[count( $s ) - 1];	}	$s = trim( $s );	if ( strlen( $s ) < 2 )		die; // require 2 chars for matching	$results = $wpdb->get_col( "SELECT t.name FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = '$taxonomy' AND t.name LIKE ('%" . $s . "%')" );	echo join( $results, "\n" );	die;	break;case 'wp-compression-test' :	if ( !current_user_can( 'manage_options' ) )		die('-1');	if ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {		update_site_option('can_compress_scripts', 0);		die('0');	}	if ( isset($_GET['test']) ) {		header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );		header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );		header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );		header( 'Pragma: no-cache' );		header('Content-Type: application/x-javascript; charset=UTF-8');		$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );		$test_str = '"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh."';		 if ( 1 == $_GET['test'] ) {		 	echo $test_str;		 	die;		 } elseif ( 2 == $_GET['test'] ) {			if ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )				die('-1');			if ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {				header('Content-Encoding: deflate');				$out = gzdeflate( $test_str, 1 );			} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {				header('Content-Encoding: gzip');				$out = gzencode( $test_str, 1 );			} else {				die('-1');			}			echo $out;			die;		} elseif ( 'no' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 0);		} elseif ( 'yes' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 1);		}	}	die('0');	break;case 'imgedit-preview' :	$post_id = intval($_GET['postid']);	if ( empty($post_id) || !current_user_can('edit_post', $post_id) )		die('-1');	check_ajax_referer( "image_editor-$post_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	if ( ! stream_preview_image($post_id) )		die('-1');	die();	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'oembed-cache' :	$return = ( $wp_embed->cache_oembed( $_GET['post'] ) ) ? '1' : '0';	die( $return );	break;default :	do_action( 'wp_ajax_' . $_GET['action'] );	die('0');	break;endswitch;endif;/** * Sends back current comment total and new page links if they need to be updated. * * Contrary to normal success AJAX response ("1"), die with time() on success. * * @since 2.7 * * @param int $comment_id * @return die */function _wp_ajax_delete_comment_response( $comment_id ) {	$total = (int) @$_POST['_total'];	$per_page = (int) @$_POST['_per_page'];	$page = (int) @$_POST['_page'];	$url = esc_url_raw( @$_POST['_url'] );	// JS didn't send us everything we need to know. Just die with success message	if ( !$total || !$per_page || !$page || !$url )		die( (string) time() );	if ( --$total < 0 ) // Take the total from POST and decrement it (since we just deleted one)		$total = 0;	if ( 0 != $total % $per_page && 1 != mt_rand( 1, $per_page ) ) // Only do the expensive stuff on a page-break, and about 1 other time per page		die( (string) time() );	$post_id = 0;	$status = 'total_comments'; // What type of comment count are we looking for?	$parsed = parse_url( $url );	if ( isset( $parsed['query'] ) ) {		parse_str( $parsed['query'], $query_vars );		if ( !empty( $query_vars['comment_status'] ) )			$status = $query_vars['comment_status'];		if ( !empty( $query_vars['p'] ) )			$post_id = (int) $query_vars['p'];	}	$comment_count = wp_count_comments($post_id);	$time = time(); // The time since the last comment count	if ( isset( $comment_count->$status ) ) // We're looking for a known type of comment count		$total = $comment_count->$status;	// else use the decremented value from above	$page_links = paginate_links( array(		'base' => add_query_arg( 'apage', '%#%', $url ),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => ceil($total / $per_page),		'current' => $page	) );	$x = new WP_Ajax_Response( array(		'what' => 'comment',		'id' => $comment_id, // here for completeness - not used		'supplemental' => array(			'pageLinks' => $page_links,			'total' => $total,			'time' => $time		)	) );	$x->send();}function _wp_ajax_add_hierarchical_term() {	$action = $_POST['action'];	$taxonomy = get_taxonomy(substr($action, 4));	check_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );	if ( !current_user_can( $taxonomy->cap->edit_terms ) )		die('-1');	$names = explode(',', $_POST['new'.$taxonomy->name]);	$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;	if ( 0 > $parent )		$parent = 0;	if ( $taxonomy->name == 'category' )		$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();	else		$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();	$checked_categories = array_map( 'absint', (array) $post_category );	$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$category_nicename = sanitize_title($cat_name);		if ( '' === $category_nicename )			continue;		if ( !($cat_id = term_exists($cat_name, $taxonomy->name, $parent)) ) {			$new_term = wp_insert_term($cat_name, $taxonomy->name, array('parent' => $parent));			$cat_id = $new_term['term_id'];		}		$checked_categories[] = $cat_id;		if ( $parent ) // Do these all at once in a second			continue;		$category = get_term( $cat_id, $taxonomy->name );		ob_start();			wp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $cat_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	if ( $parent ) { // Foncy - replace the parent and all its children		$parent = get_term( $parent, $taxonomy->name );		$term_id = $parent->term_id;		while ( $parent->parent ) { // get the top parent			$parent = &get_term( $parent->parent, $taxonomy->name );			if ( is_wp_error( $parent ) )				break;			$term_id = $parent->term_id;		}		ob_start();			wp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $term_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	ob_start();		wp_dropdown_categories( array(			'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',			'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'		) );	$sup = ob_get_contents();	ob_end_clean();	$add['supplemental'] = array( 'newcat_parent' => $sup );	$x = new WP_Ajax_Response( $add );	$x->send();}$id = isset($_POST['id'])? (int) $_POST['id'] : 0;switch ( $action = $_POST['action'] ) :case 'delete-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) )		die( (string) time() );	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) )		die('-1');	check_ajax_referer( "delete-comment_$id" );	$status = wp_get_comment_status( $comment->comment_ID );	if ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {		if ( 'trash' == $status )			die( (string) time() );		$r = wp_trash_comment( $comment->comment_ID );	} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {		if ( 'trash' != $status )			die( (string) time() );		$r = wp_untrash_comment( $comment->comment_ID );	} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {		if ( 'spam' == $status )			die( (string) time() );		$r = wp_spam_comment( $comment->comment_ID );	} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {		if ( 'spam' != $status )			die( (string) time() );		$r = wp_unspam_comment( $comment->comment_ID );	} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {		$r = wp_delete_comment( $comment->comment_ID );	} else {		die('-1');	}	if ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts		_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'delete-tag' :	$tag_id = (int) $_POST['tag_ID'];	check_ajax_referer( "delete-tag_$tag_id" );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	if ( !current_user_can( $tax->cap->delete_terms ) )		die('-1');	$tag = get_term( $tag_id, $taxonomy );	if ( !$tag || is_wp_error( $tag ) )		die('1');	if ( wp_delete_term($tag_id, $taxonomy))		die('1');	else		die('0');	break;case 'delete-link-cat' :	check_ajax_referer( "delete-link-category_$id" );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$cat = get_term( $id, 'link_category' );	if ( !$cat || is_wp_error( $cat ) )		die('1');	$cat_name = get_term_field('name', $id, 'link_category');	$default = get_option('default_link_category');	// Don't delete the default cats.	if ( $id == $default ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => new WP_Error( 'default-link-cat', sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name) )		) );		$x->send();	}	$r = wp_delete_term($id, 'link_category', array('default' => $default));	if ( !$r )		die('0');	if ( is_wp_error($r) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => $r		) );		$x->send();	}	die('1');	break;case 'delete-link' :	check_ajax_referer( "delete-bookmark_$id" );	if ( !current_user_can( 'manage_links' ) )		die('-1');	$link = get_bookmark( $id );	if ( !$link || is_wp_error( $link ) )		die('1');	if ( wp_delete_link( $id ) )		die('1');	else		die('0');	break;case 'delete-meta' :	check_ajax_referer( "delete-meta_$id" );	if ( !$meta = get_post_meta_by_id( $id ) )		die('1');	if ( !current_user_can( 'edit_post', $meta->post_id ) )		die('-1');	if ( delete_meta( $meta->meta_id ) )		die('1');	die('0');	break;case 'delete-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'trash-post' :case 'untrash-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( 'trash-post' == $action )		$done = wp_trash_post( $id );	else		$done = wp_untrash_post( $id );	if ( $done )		die('1');	die('0');	break;case 'delete-page' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_page', $id ) )		die('-1');	if ( !get_page( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'dim-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))		) );		$x->send();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) && !current_user_can( 'moderate_comments' ) )		die('-1');	$current = wp_get_comment_status( $comment->comment_ID );	if ( $_POST['new'] == $current )		die( (string) time() );	check_ajax_referer( "approve-comment_$id" );	if ( in_array( $current, array( 'unapproved', 'spam' ) ) )		$result = wp_set_comment_status( $comment->comment_ID, 'approve', true );	else		$result = wp_set_comment_status( $comment->comment_ID, 'hold', true );	if ( is_wp_error($result) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => $result		) );		$x->send();	}	// Decide if we need to send back '1' or a more complicated response including page links and comment counts	_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'add-link-category' : // On the Fly	check_ajax_referer( $action );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$names = explode(',', $_POST['newcat']);	$x = new WP_Ajax_Response();	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$slug = sanitize_title($cat_name);		if ( '' === $slug )			continue;		if ( !$cat_id = term_exists( $cat_name, 'link_category' ) ) {			$cat_id = wp_insert_term( $cat_name, 'link_category' );		}		$cat_id = $cat_id['term_id'];		$cat_name = esc_html(stripslashes($cat_name));		$x->add( array(			'what' => 'link-category',			'id' => $cat_id,			'data' => "<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='" . esc_attr($cat_id) . "' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>",			'position' => -1		) );	}	$x->send();	break;case 'add-link-cat' : // From Blogroll -> Categories	check_ajax_referer( 'add-link-category' );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	if ( '' === trim($_POST['name']) ) {		$x = new WP_Ajax_Response( array(			'what' => 'link-cat',			'id' => new WP_Error( 'name', __('You did not enter a category name.') )		) );		$x->send();	}	$r = wp_insert_term($_POST['name'], 'link_category', $_POST );	if ( is_wp_error( $r ) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $r		) );		$x->send();	}	extract($r, EXTR_SKIP);	if ( !$link_cat = link_cat_row( $term_id ) )		die('0');	$x = new WP_Ajax_Response( array(		'what' => 'link-cat',		'id' => $term_id,		'position' => -1,		'data' => $link_cat	) );	$x->send();	break;case 'add-tag' : // From Manage->Tags	check_ajax_referer( 'add-tag' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	$x = new WP_Ajax_Response();	if ( !current_user_can( $tax->cap->edit_terms ) )		die('-1');	$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );	if ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {		$message = __('An error has occured. Please reload the page and try again.');		if ( is_wp_error($tag) && $tag->get_error_message() )			$message = $tag->get_error_message();		$x->add( array(			'what' => 'taxonomy',			'data' => new WP_Error('error', $message )		) );		$x->send();	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	$level = 0;	$tag_full_name = false;	$tag_full_name = $tag->name;	if ( is_taxonomy_hierarchical($taxonomy) ) {		$_tag = $tag;		while ( $_tag->parent  ) {			$_tag = get_term( $_tag->parent, $taxonomy );			$tag_full_name = $_tag->name . ' &#8212; ' . $tag_full_name;			$level++;		}		$noparents = _tag_row( $tag, $level, $taxonomy );	}	$tag->name = $tag_full_name;	$parents = _tag_row( $tag, 0, $taxonomy);	$x->add( array(		'what' => 'taxonomy',		'supplemental' => compact('parents', 'noparents')		) );	$x->add( array(		'what' => 'term',		'position' => $level,		'supplemental' => get_term( $tag->term_id, $taxonomy, ARRAY_A ) //Refetch as $tag has been contaminated by the full name.		) );	$x->send();	break;case 'get-tagcloud' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	if ( isset($_POST['tax']) )		$taxonomy = sanitize_title($_POST['tax']);	else		die('0');	$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );	if ( empty( $tags ) ) {		$tax = get_taxonomy( $taxonomy );		die( isset( $tax->no_tagcloud ) ? $tax->no_tagcloud : __('No tags found!') );	}	if ( is_wp_error($tags) )		die($tags->get_error_message());	foreach ( $tags as $key => $tag ) {		$tags[ $key ]->link = '#';		$tags[ $key ]->id = $tag->term_id;	}	// We need raw tag names here, so don't filter the output	$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );	if ( empty($return) )		die('0');	echo $return;	exit;	break;case 'add-comment' :	check_ajax_referer( $action );	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$search = isset($_POST['s']) ? $_POST['s'] : false;	$status = isset($_POST['comment_status']) ? $_POST['comment_status'] : 'all';	$per_page = isset($_POST['per_page']) ?  (int) $_POST['per_page'] + 8 : 28;	$start = isset($_POST['page']) ? ( intval($_POST['page']) * $per_page ) -1 : $per_page - 1;	if ( 1 > $start )		$start = 27;	$mode = isset($_POST['mode']) ? $_POST['mode'] : 'detail';	$p = isset($_POST['p']) ? $_POST['p'] : 0;	$comment_type = isset($_POST['comment_type']) ? $_POST['comment_type'] : '';	list($comments, $total) = _wp_get_comment_list( $status, $search, $start, 1, $p, $comment_type );	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );	if ( !$comments )		die('1');	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, $mode, $status, true, true );			$comment_list_item = ob_get_contents();		ob_end_clean();		$x->add( array(			'what' => 'comment',			'id' => $comment->comment_ID,			'data' => $comment_list_item		) );	}	$x->send();	break;case 'get-comments' :	check_ajax_referer( $action );	$post_ID = (int) $_POST['post_ID'];	if ( !current_user_can( 'edit_post', $post_ID ) )		die('-1');	$start = isset($_POST['start']) ? intval($_POST['start']) : 0;	$num = isset($_POST['num']) ? intval($_POST['num']) : 10;	list($comments, $total) = _wp_get_comment_list( false, false, $start, $num, $post_ID );	if ( !$comments )		die('1');	$comment_list_item = '';	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, 'single', false, false );			$comment_list_item .= ob_get_contents();		ob_end_clean();	}	$x->add( array(		'what' => 'comments',		'data' => $comment_list_item	) );	$x->send();	break;case 'replyto-comment' :	check_ajax_referer( $action, '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( !current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	$status = $wpdb->get_var( $wpdb->prepare("SELECT post_status FROM $wpdb->posts WHERE ID = %d", $comment_post_ID) );	if ( empty($status) )		die('1');	elseif ( in_array($status, array('draft', 'pending', 'trash') ) )		die( __('Error: you are replying to a comment on a draft post.') );	$user = wp_get_current_user();	if ( $user->ID ) {		$comment_author       = $wpdb->escape($user->display_name);		$comment_author_email = $wpdb->escape($user->user_email);		$comment_author_url   = $wpdb->escape($user->user_url);		$comment_content      = trim($_POST['content']);		if ( current_user_can('unfiltered_html') ) {			if ( wp_create_nonce('unfiltered-html-comment_' . $comment_post_ID) != $_POST['_wp_unfiltered_html_comment'] ) {				kses_remove_filters(); // start with a clean slate				kses_init_filters(); // set up the filters			}		}	} else {		die( __('Sorry, you must be logged in to reply to a comment.') );	}	if ( '' == $comment_content )		die( __('Error: please type a comment.') );	$comment_parent = absint($_POST['comment_ID']);	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');	$comment_id = wp_new_comment( $commentdata );	$comment = get_comment($comment_id);	if ( ! $comment ) die('1');	$modes = array( 'single', 'detail', 'dashboard' );	$mode = isset($_POST['mode']) && in_array( $_POST['mode'], $modes ) ? $_POST['mode'] : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		if ( 'dashboard' == $mode ) {			require_once( ABSPATH . 'wp-admin/includes/dashboard.php' );			_wp_dashboard_recent_comments_row( $comment, false );		} else {			_wp_comment_row( $comment->comment_ID, $mode, false, $checkbox );		}		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'edit-comment' :	check_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( ! current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	if ( '' == $_POST['content'] )		die( __('Error: please type a comment.') );	$comment_id = (int) $_POST['comment_ID'];	$_POST['comment_status'] = $_POST['status'];	edit_comment();	$mode = ( isset($_POST['mode']) && 'single' == $_POST['mode'] ) ? 'single' : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	$comments_listing = isset($_POST['comments_listing']) ? $_POST['comments_listing'] : '';	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		_wp_comment_row( $comment_id, $mode, $comments_listing, $checkbox );		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'edit_comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'add-menu-item' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	$item_ids = wp_save_nav_menu_items( 0, $_POST['menu-item'] );	if ( is_wp_error( $item_ids ) )		die('-1');	foreach ( (array) $item_ids as $menu_item_id ) {		$menu_obj = get_post( $menu_item_id );		if ( ! empty( $menu_obj->ID ) ) {			$menu_obj = wp_setup_nav_menu_item( $menu_obj );			$menu_obj->label = $menu_obj->title; // don't show "(pending)" in ajax-added items			$menu_items[] = $menu_obj;		}	}	if ( ! empty( $menu_items ) ) {		$args = array(			'after' => '',			'before' => '',			'link_after' => '',			'link_before' => '',			'walker' => new Walker_Nav_Menu_Edit,		);		echo walk_nav_menu_tree( $menu_items, 0, (object) $args );	}	break;case 'add-meta' :	check_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );	$c = 0;	$pid = (int) $_POST['post_id'];	$post = get_post( $pid );	if ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {		if ( !current_user_can( 'edit_post', $pid ) )			die('-1');		if ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )			die('1');		if ( $post->post_status == 'auto-draft' ) {			$save_POST = $_POST; // Backup $_POST			$_POST = array(); // Make it empty for edit_post()			$_POST['action'] = 'draft'; // Warning fix			$_POST['post_ID'] = $pid;			$_POST['post_type'] = $post->post_type;			$_POST['post_status'] = 'draft';			$now = current_time('timestamp', 1);			$_POST['post_title'] = sprintf('Draft created on %s at %s', date(get_option('date_format'), $now), date(get_option('time_format'), $now));			if ( $pid = edit_post() ) {				if ( is_wp_error( $pid ) ) {					$x = new WP_Ajax_Response( array(						'what' => 'meta',						'data' => $pid					) );					$x->send();				}				$_POST = $save_POST; // Now we can restore original $_POST again				if ( !$mid = add_meta( $pid ) )					die(__('Please provide a custom field value.'));			} else {				die('0');			}		} else if ( !$mid = add_meta( $pid ) ) {			die(__('Please provide a custom field value.'));		}		$meta = get_post_meta_by_id( $mid );		$pid = (int) $meta->post_id;		$meta = get_object_vars( $meta );		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid,			'data' => _list_meta_row( $meta, $c ),			'position' => 1,			'supplemental' => array('postid' => $pid)		) );	} else { // Update?		$mid = (int) array_pop(array_keys($_POST['meta']));		$key = $_POST['meta'][$mid]['key'];		$value = $_POST['meta'][$mid]['value'];		if ( '' == trim($key) )			die(__('Please provide a custom field name.'));		if ( '' == trim($value) )			die(__('Please provide a custom field value.'));		if ( !$meta = get_post_meta_by_id( $mid ) )			die('0'); // if meta doesn't exist		if ( !current_user_can( 'edit_post', $meta->post_id ) )			die('-1');		if ( $meta->meta_value != stripslashes($value) || $meta->meta_key != stripslashes($key) ) {			if ( !$u = update_meta( $mid, $key, $value ) )				die('0'); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).		}		$key = stripslashes($key);		$value = stripslashes($value);		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid, 'old_id' => $mid,			'data' => _list_meta_row( array(				'meta_key' => $key,				'meta_value' => $value,				'meta_id' => $mid			), $c ),			'position' => 0,			'supplemental' => array('postid' => $meta->post_id)		) );	}	$x->send();	break;case 'add-user' :	check_ajax_referer( $action );	if ( !current_user_can('create_users') )		die('-1');	require_once(ABSPATH . WPINC . '/registration.php');	if ( !$user_id = add_user() )		die('0');	elseif ( is_wp_error( $user_id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'user',			'id' => $user_id		) );		$x->send();	}	$user_object = new WP_User( $user_id );	$x = new WP_Ajax_Response( array(		'what' => 'user',		'id' => $user_id,		'data' => user_row( $user_object, '', $user_object->roles[0] ),		'supplemental' => array(			'show-link' => sprintf(__( 'User <a href="#%s">%s</a> added' ), "user-$user_id", $user_object->user_login),			'role' => $user_object->roles[0]		)	) );	$x->send();	break;case 'autosave' : // The name of this action is hardcoded in edit_post()	define( 'DOING_AUTOSAVE', true );	$nonce_age = check_ajax_referer( 'autosave', 'autosavenonce' );	global $current_user;	$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$do_autosave = (bool) $_POST['autosave'];	$do_lock = true;	$data = '';	/* translators: draft saved date format, see http://php.net/date */	$draft_saved_date_format = __('g:i:s a');	/* translators: %s: date and time */	$message = sprintf( __('Draft saved at %s.'), date_i18n( $draft_saved_date_format ) );	$supplemental = array();	if ( isset($login_grace_period) )		$supplemental['session_expired'] = add_query_arg( 'interim-login', 1, wp_login_url() );	$id = $revision_id = 0;	$post_ID = (int) $_POST['post_ID'];	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'auto-draft' == $post->post_status )		$_POST['post_status'] = 'draft';	if ( $last = wp_check_post_lock( $post->ID ) ) {		$do_autosave = $do_lock = false;		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		$data = new WP_Error( 'locked', sprintf(			$_POST['post_type'] == 'page' ? __( 'Autosave disabled: %s is currently editing this page.' ) : __( 'Autosave disabled: %s is currently editing this post.' ),			esc_html( $last_user_name )		) );		$supplemental['disable_autosave'] = 'disable';	}	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			die(__('You are not allowed to edit this post.'));	}	if ( $do_autosave ) {		// Drafts and auto-drafts are just overwritten by autosave		if ( 'auto-draft' == $post->post_status || 'draft' == $post->post_status ) {			$id = edit_post();		} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.			$revision_id = wp_create_post_autosave( $post->ID );			if ( is_wp_error($revision_id) )				$id = $revision_id;			else				$id = $post->ID;		}		$data = $message;	} else {		if ( isset( $_POST['auto_draft'] ) && '1' == $_POST['auto_draft'] )			$id = 0; // This tells us it didn't actually save		else			$id = $post->ID;	}	if ( $do_lock && ( isset( $_POST['auto_draft'] ) && ( $_POST['auto_draft'] != '1' ) ) && $id && is_numeric($id) )		wp_set_post_lock( $id );	if ( $nonce_age == 2 ) {		$supplemental['replace-autosavenonce'] = wp_create_nonce('autosave');		$supplemental['replace-getpermalinknonce'] = wp_create_nonce('getpermalink');		$supplemental['replace-samplepermalinknonce'] = wp_create_nonce('samplepermalink');		$supplemental['replace-closedpostboxesnonce'] = wp_create_nonce('closedpostboxes');		if ( $id ) {			if ( $_POST['post_type'] == 'post' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-post_' . $id);			elseif ( $_POST['post_type'] == 'page' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-page_' . $id);		}	}	$x = new WP_Ajax_Response( array(		'what' => 'autosave',		'id' => $id,		'data' => $id ? $data : '',		'supplemental' => $supplemental	) );	$x->send();	break;case 'closed-postboxes' :	check_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );	$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();	$closed = array_filter($closed);	$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();	$hidden = array_filter($hidden);	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($closed) )		update_user_option($user->ID, "closedpostboxes_$page", $closed, true);	if ( is_array($hidden) ) {		$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown		update_user_option($user->ID, "metaboxhidden_$page", $hidden, true);	}	die('1');	break;case 'hidden-columns' :	check_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );	$hidden = isset( $_POST['hidden'] ) ? $_POST['hidden'] : '';	$hidden = explode( ',', $_POST['hidden'] );	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($hidden) )		update_user_option($user->ID, "manage{$page}columnshidden", $hidden, true);	die('1');	break;case 'menu-get-metabox' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	if ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {		$type = 'posttype';		$callback = 'wp_nav_menu_item_post_type_meta_box';		$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {		$type = 'taxonomy';		$callback = 'wp_nav_menu_item_taxonomy_meta_box';		$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );	}	if ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {		$item = apply_filters( 'nav_menu_meta_box_object', $items[ $_POST['item-object'] ] );		ob_start();		call_user_func_array($callback, array(			null,			array(				'id' => 'add-' . $item->name,				'title' => $item->labels->name,				'callback' => $callback,				'args' => $item,			)		));		$markup = ob_get_clean();		echo json_encode(array(			'replace-id' => $type . '-' . $item->name,			'markup' => $markup,		));	}	exit;	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'menu-locations-save':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	if ( ! isset( $_POST['menu-locations'] ) )		die('0');	set_theme_mod( 'nav_menu_locations', $_POST['menu-locations'] );	die('1');	break;case 'meta-box-order':	check_ajax_referer( 'meta-box-order' );	$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;	$page_columns = isset( $_POST['page_columns'] ) ? (int) $_POST['page_columns'] : 0;	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( $order )		update_user_option($user->ID, "meta-box-order_$page", $order, true);	if ( $page_columns )		update_user_option($user->ID, "screen_layout_$page", $page_columns, true);	die('1');	break;case 'get-permalink':	check_ajax_referer( 'getpermalink', 'getpermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	die(add_query_arg(array('preview' => 'true'), get_permalink($post_id)));break;case 'sample-permalink':	check_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	$title = isset($_POST['new_title'])? $_POST['new_title'] : '';	$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;	die(get_sample_permalink_html($post_id, $title, $slug));break;case 'inline-save':	check_ajax_referer( 'inlineeditnonce', '_inline_edit' );	if ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )		exit;	if ( 'page' == $_POST['post_type'] ) {		if ( ! current_user_can( 'edit_page', $post_ID ) )			die( __('You are not allowed to edit this page.') );	} else {		if ( ! current_user_can( 'edit_post', $post_ID ) )			die( __('You are not allowed to edit this post.') );	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	if ( $last = wp_check_post_lock( $post_ID ) ) {		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		printf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),	esc_html( $last_user_name ) );		exit;	}	$data = &$_POST;	$post = get_post( $post_ID, ARRAY_A );	$post = add_magic_quotes($post); //since it is from db	$data['content'] = $post['post_content'];	$data['excerpt'] = $post['post_excerpt'];	// rename	$data['user_ID'] = $GLOBALS['user_ID'];	if ( isset($data['post_parent']) )		$data['parent_id'] = $data['post_parent'];	// status	if ( isset($data['keep_private']) && 'private' == $data['keep_private'] )		$data['post_status'] = 'private';	else		$data['post_status'] = $data['_status'];	if ( empty($data['comment_status']) )		$data['comment_status'] = 'closed';	if ( empty($data['ping_status']) )		$data['ping_status'] = 'closed';	// update the post	edit_post();	$post = array();	if ( 'page' == $_POST['post_type'] ) {		$post[] = get_post($_POST['post_ID']);		page_rows($post);	} elseif ( 'post' == $_POST['post_type'] || in_array($_POST['post_type'], get_post_types( array('public' => true) ) ) ) {		$mode = $_POST['post_view'];		$post[] = get_post($_POST['post_ID']);		post_rows($post);	}	exit;	break;case 'inline-save-tax':	check_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : false;	if ( ! $taxonomy )		die( __('Cheatin&#8217; uh?') );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		die( __('Cheatin&#8217; uh?') );	if ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )		die(-1);	switch ($_POST['tax_type']) {		case 'link-cat' :			$updated = wp_update_term($id, 'link_category', $_POST);			if ( $updated && !is_wp_error($updated) )				echo link_cat_row($updated['term_id']);			else				die( __('Category not updated.') );			break;		case 'tag' :			$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';			$tag = get_term( $id, $taxonomy );			$_POST['description'] = $tag->description;			$updated = wp_update_term($id, $taxonomy, $_POST);			if ( $updated && !is_wp_error($updated) ) {				$tag = get_term( $updated['term_id'], $taxonomy );				if ( !$tag || is_wp_error( $tag ) ) {					if ( is_wp_error($tag) && $tag->get_error_message() )						die( $tag->get_error_message() );					die( __('Item not updated.') );				}				set_current_screen( 'edit-' . $taxonomy );				echo _tag_row($tag, 0, $taxonomy);			} else {				if ( is_wp_error($updated) && $updated->get_error_message() )					die( $updated->get_error_message() );				die( __('Item not updated.') );			}			break;	}	exit;	break;case 'find_posts':	check_ajax_referer( 'find-posts' );	if ( empty($_POST['ps']) )		exit;	if ( !empty($_POST['post_type']) && in_array( $_POST['post_type'], get_post_types() ) )		$what = $_POST['post_type'];	else		$what = 'post';	$s = stripslashes($_POST['ps']);	preg_match_all('/".*?("|$)|((?<=[\\s",+])|^)[^\\s",+]+/', $s, $matches);	$search_terms = array_map('_search_terms_tidy', $matches[0]);	$searchand = $search = '';	foreach ( (array) $search_terms as $term ) {		$term = addslashes_gpc($term);		$search .= "{$searchand}(($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%'))";		$searchand = ' AND ';	}	$term = $wpdb->escape($s);	if ( count($search_terms) > 1 && $search_terms[0] != $s )		$search .= " OR ($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%')";	$posts = $wpdb->get_results( "SELECT ID, post_title, post_status, post_date FROM $wpdb->posts WHERE post_type = '$what' AND post_status IN ('draft', 'publish') AND ($search) ORDER BY post_date_gmt DESC LIMIT 50" );	if ( ! $posts ) {		$posttype = get_post_type_object($what);		exit($posttype->labels->not_found);	}	$html = '<table class="widefat" cellspacing="0"><thead><tr><th class="found-radio"><br /></th><th>'.__('Title').'</th><th>'.__('Date').'</th><th>'.__('Status').'</th></tr></thead><tbody>';	foreach ( $posts as $post ) {		switch ( $post->post_status ) {			case 'publish' :			case 'private' :				$stat = __('Published');				break;			case 'future' :				$stat = __('Scheduled');				break;			case 'pending' :				$stat = __('Pending Review');				break;			case 'draft' :				$stat = __('Draft');				break;		}		if ( '0000-00-00 00:00:00' == $post->post_date ) {			$time = '';		} else {			/* translators: date format in table columns, see http://php.net/date */			$time = mysql2date(__('Y/m/d'), $post->post_date);		}		$html .= '<tr class="found-posts"><td class="found-radio"><input type="radio" id="found-'.$post->ID.'" name="found_post_id" value="' . esc_attr($post->ID) . '"></td>';		$html .= '<td><label for="found-'.$post->ID.'">'.esc_html( $post->post_title ).'</label></td><td>'.esc_html( $time ).'</td><td>'.esc_html( $stat ).'</td></tr>'."\n\n";	}	$html .= '</tbody></table>';	$x = new WP_Ajax_Response();	$x->add( array(		'what' => $what,		'data' => $html	));	$x->send();	break;case 'lj-importer' :	check_ajax_referer( 'lj-api-import' );	if ( !current_user_can( 'publish_posts' ) )		die('-1');	if ( empty( $_POST['step'] ) )		die( '-1' );	define('WP_IMPORTING', true);	include( ABSPATH . 'wp-admin/import/livejournal.php' );	$result = $lj_api_import->{ 'step' . ( (int) $_POST['step'] ) }();	if ( is_wp_error( $result ) )		echo $result->get_error_message();	die;	break;case 'widgets-order' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	// save widgets order for all sidebars	if ( is_array($_POST['sidebars']) ) {		$sidebars = array();		foreach ( $_POST['sidebars'] as $key => $val ) {			$sb = array();			if ( !empty($val) ) {				$val = explode(',', $val);				foreach ( $val as $k => $v ) {					if ( strpos($v, 'widget-') === false )						continue;					$sb[$k] = substr($v, strpos($v, '_') + 1);				}			}			$sidebars[$key] = $sb;		}		wp_set_sidebars_widgets($sidebars);		die('1');	}	die('-1');	break;case 'save-widget' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	do_action('load-widgets.php');	do_action('widgets.php');	do_action('sidebar_admin_setup');	$id_base = $_POST['id_base'];	$widget_id = $_POST['widget-id'];	$sidebar_id = $_POST['sidebar'];	$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;	$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;	$error = '<p>' . __('An error has occured. Please reload the page and try again.') . '</p>';	$sidebars = wp_get_sidebars_widgets();	$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();	// delete	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		if ( !isset($wp_registered_widgets[$widget_id]) )			die($error);		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {		if ( !$multi_number )			die($error);		$_POST['widget-' . $id_base] = array( $multi_number => array_shift($settings) );		$widget_id = $id_base . '-' . $multi_number;		$sidebar[] = $widget_id;	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name == $id_base ) {			if ( !is_callable( $control['callback'] ) )				continue;			ob_start();				call_user_func_array( $control['callback'], $control['params'] );			ob_end_clean();			break;		}	}	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		$sidebars[$sidebar_id] = $sidebar;		wp_set_sidebars_widgets($sidebars);		echo "deleted:$widget_id";		die();	}	if ( !empty($_POST['add_new']) )		die();	if ( $form = $wp_registered_widget_controls[$widget_id] )		call_user_func_array( $form['callback'], $form['params'] );	die();	break;case 'image-editor':	$attachment_id = intval($_POST['postid']);	if ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )		die('-1');	check_ajax_referer( "image_editor-$attachment_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	$msg = false;	switch ( $_POST['do'] ) {		case 'save' :			$msg = wp_save_image($attachment_id);			$msg = json_encode($msg);			die($msg);			break;		case 'scale' :			$msg = wp_save_image($attachment_id);			break;		case 'restore' :			$msg = wp_restore_image($attachment_id);			break;	}	wp_image_editor($attachment_id, $msg);	die();	break;case 'set-post-thumbnail':	$post_ID = intval( $_POST['post_id'] );	if ( !current_user_can( 'edit_post', $post_ID ) )		die( '-1' );	$thumbnail_id = intval( $_POST['thumbnail_id'] );	check_ajax_referer( "set_post_thumbnail-$post_ID" );	if ( $thumbnail_id == '-1' ) {		delete_post_meta( $post_ID, '_thumbnail_id' );		die( _wp_post_thumbnail_html() );	}	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'thumbnail' );		if ( !empty( $thumbnail_html ) ) {			update_post_meta( $post_ID, '_thumbnail_id', $thumbnail_id );			die( _wp_post_thumbnail_html( $thumbnail_id ) );		}	}	die( '0' );	break;default :	do_action( 'wp_ajax_' . $_POST['action'] );	die('0');	break;endswitch;?>
<?php/** * Edit Tags Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars( array('action', 'tag', 'taxonomy', 'post_type') );if ( empty($taxonomy) )	$taxonomy = 'post_tag';if ( !taxonomy_exists($taxonomy) )	wp_die(__('Invalid taxonomy'));$tax = get_taxonomy($taxonomy);$title = $tax->labels->name;if ( empty($post_type) || !in_array( $post_type, get_post_types( array('public' => true) ) ) )	$post_type = 'post';if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit-tags.php?taxonomy=$taxonomy&amp;post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = "edit-tags.php?taxonomy=$taxonomy";}if ( isset( $_GET['action'] ) && isset($_GET['delete_tags']) && ( 'delete' == $_GET['action'] || 'delete' == $_GET['action2'] ) )	$action = 'bulk-delete';switch($action) {case 'add-tag':	check_admin_referer('add-tag');	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 1, $location);	else		$location = add_query_arg('message', 4, $location);	wp_redirect($location);	exit;break;case 'delete':	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( !isset( $_GET['tag_ID'] ) ) {		wp_redirect($location);		exit;	}	$tag_ID = (int) $_GET['tag_ID'];	check_admin_referer('delete-tag_' .  $tag_ID);	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	wp_delete_term( $tag_ID, $taxonomy);	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'bulk-delete':	check_admin_referer('bulk-tags');	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$tags = (array) $_GET['delete_tags'];	foreach( $tags as $tag_ID ) {		wp_delete_term( $tag_ID, $taxonomy);	}	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	$location = add_query_arg('message', 6, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = $tax->labels->edit_item;	require_once ('admin-header.php');	$tag_ID = (int) $_GET['tag_ID'];	$tag = get_term($tag_ID, $taxonomy, OBJECT, 'edit');	include('./edit-tag-form.php');break;case 'editedtag':	$tag_ID = (int) $_POST['tag_ID'];	check_admin_referer('update-tag_' . $tag_ID);	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_update_term($tag_ID, $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;default:if ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('admin-tags');if ( current_user_can($tax->cap->edit_terms) )	wp_enqueue_script('inline-edit-tax');if ( 'category' == $taxonomy || 'post_tag' == $taxonomy ) {	if ( 'category' == $taxonomy )		$help = '<p>' . sprintf(__('You can use categories to define sections of your site and group related posts. The default category is &#8220;Uncategorized&#8221; until you change it in your <a href="%s">writing settings</a>.'), 'options-writing.php') . '</p>';	else		$help = '<p>' . __('You can assign keywords to your posts using Post Tags. Unlike categories, tags have no hierarchy, meaning there&#8217;s no relationship from one tag to another.') . '</p>';	$help .='<p>' . __('What&#8217;s the difference between categories and tags? Normally, tags are ad-hoc keywords that identify important information in your post (names, subjects, etc) that may or may not recur in other posts, while categories are pre-determined sections. If you think of your site like a book, the categories are like the Table of Contents and the tags are like the terms in the index.') . '</p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('When adding a new category on this screen, you&#8217;ll fill in the following fields:') . '</p>';	else		$help .= '<p>' . __('When adding a new tag on this screen, you&#8217;ll fill in the following fields:') . '</p>';	$help .= '<ul>' .		'<li>' . __('<strong>Name</strong> - The name is how it appears on your site.') . '</li>';	if ( ! global_terms_enabled() )		$help .= '<li>' . __('<strong>Slug</strong> - The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.') . '</li>';	if ( 'category' == $taxonomy )		$help .= '<li>' . __('<strong>Parent</strong> - Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional. To create a subcategory, just choose another category from the Parent dropdown.') . '</li>';	$help .= '<li>' . __('<strong>Description</strong> - The description is not prominent by default; however, some themes may display it.') . '</li>' .		'</ul>' .		'<p>' . __('You can change the display of this screen using the Screen Options tab to set how many items are displayed per screen and to display/hide columns in the table.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Manage_Categories_SubPanel" target="_blank">Categories Documentation</a>') . '</p>';	else		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Post_Tags_SubPanel" target="_blank">Tags Documentation</a>') . '</p>';	$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';	add_contextual_help($current_screen, $help);	unset($help);}require_once ('admin-header.php');$messages[1] = __('Item added.');$messages[2] = __('Item deleted.');$messages[3] = __('Item updated.');$messages[4] = __('Item not added.');$messages[5] = __('Item not updated.');$messages[6] = __('Items deleted.');?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?php if ( isset($_GET['message']) && ( $msg = (int) $_GET['message'] ) ) : ?><div id="message" class="updated"><p><?php echo $messages[$msg]; ?></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);endif; ?><div id="ajax-response"></div><form class="search-form" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><p class="search-box">	<label class="screen-reader-text" for="tag-search-input"><?php echo $tax->labels->search_items; ?>:</label>	<input type="text" id="tag-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $tax->labels->search_items );  ?>" class="button" /></p></form><br class="clear" /><div id="col-container"><div id="col-right"><div class="col-wrap"><form id="posts-filter" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><div class="tablenav"><?php$pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$tags_per_page = (int) get_user_option( 'edit_' .  $taxonomy . '_per_page' );if ( empty($tags_per_page) || $tags_per_page < 1 )	$tags_per_page = 20;if ( 'post_tag' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_tags_per_page', $tags_per_page );	$tags_per_page = apply_filters( 'tagsperpage', $tags_per_page ); // Old filter} elseif ( 'category' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_categories_per_page', $tags_per_page ); // Old filter} else {	$tags_per_page = apply_filters( 'edit_' . $taxonomy . '_per_page', $tags_per_page );}$searchterms = !empty($_GET['s']) ? trim(stripslashes($_GET['s'])) : '';$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil(wp_count_terms($taxonomy, array('search' => $searchterms)) / $tags_per_page),	'current' => $pagenum));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-tags'); ?></div><br class="clear" /></div><div class="clear"></div><table class="widefat tag fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers($current_screen); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:tag"><?php tag_rows( $pagenum, $tags_per_page, $searchterms, $taxonomy ); ?>	</tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><br class="clear" /></form><?php if ( 'category' == $taxonomy ) : ?><div class="form-wrap"><p><?php printf(__('<strong>Note:</strong><br />Deleting a category does not delete the posts in that category. Instead, posts that were only assigned to the deleted category are set to the category <strong>%s</strong>.'), apply_filters('the_category', get_cat_name(get_option('default_category')))) ?></p><?php if ( current_user_can( 'import' ) ) : ?><p><?php printf(__('Categories can be selectively converted to tags using the <a href="%s">category to tag converter</a>.'), 'import.php') ?></p><?php endif; ?></div><?php elseif ( 'post_tag' == $taxonomy && current_user_can( 'import' ) ) : ?><div class="form-wrap"><p><?php printf(__('Tags can be selectively converted to categories using the <a href="%s">tag to category converter</a>'), 'import.php') ;?>.</p></div><?php endif;do_action('after-' . $taxonomy . '-table', $taxonomy);?></div></div><!-- /col-right --><div id="col-left"><div class="col-wrap"><?phpif ( !is_taxonomy_hierarchical($taxonomy) ) {	if ( current_user_can( $tax->cap->edit_terms ) )		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false, 'link' => 'edit' ) );	else		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false ) );	if ( $tag_cloud ) :	?><div class="tagcloud"><h3><?php echo $tax->labels->popular_items; ?></h3><?php echo $tag_cloud; unset( $tag_cloud ); ?></div><?phpendif;}if ( current_user_can($tax->cap->edit_terms) ) {	if ( 'category' == $taxonomy )		do_action('add_category_form_pre', (object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_pre_add_form	else		do_action('add_tag_form_pre', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categories	do_action($taxonomy . '_pre_add_form', $taxonomy);?><div class="form-wrap"><h3><?php echo $tax->labels->add_new_item; ?></h3><form id="addtag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="add-tag" /><input type="hidden" name="screen" value="<?php echo esc_attr($current_screen->id); ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><?php wp_nonce_field('add-tag'); ?><div class="form-field form-required">	<label for="tag-name"><?php _ex('Name', 'Taxonomy Name'); ?></label>	<input name="tag-name" id="tag-name" type="text" value="" size="40" aria-required="true" />	<p><?php _e('The name is how it appears on your site.'); ?></p></div><?php if ( ! global_terms_enabled() ) : ?><div class="form-field">	<label for="tag-slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label>	<input name="slug" id="tag-slug" type="text" value="" size="40" />	<p><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></div><?php endif; // is_multisite() ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?><div class="form-field">	<label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label>	<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'taxonomy' => $taxonomy, 'name' => 'parent', 'orderby' => 'name', 'hierarchical' => true, 'show_option_none' => __('None'))); ?>	<?php if ( 'category' == $taxonomy ) : // @todo: Generic text for hierarchical taxonomies ?>		<p><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></p>	<?php endif; ?></div><?php endif; // is_taxonomy_hierarchical() ?><div class="form-field">	<label for="tag-description"><?php _ex('Description', 'Taxonomy Description'); ?></label>	<textarea name="description" id="tag-description" rows="5" cols="40"></textarea>	<p><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></p></div><?phpif ( ! is_taxonomy_hierarchical($taxonomy) )	do_action('add_tag_form_fields', $taxonomy);do_action($taxonomy . '_add_form_fields', $taxonomy);?><p class="submit"><input type="submit" class="button" name="submit" id="submit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" /></p><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form',	(object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_add_formelse	do_action('add_tag_form', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categoriesdo_action($taxonomy . '_add_form', $taxonomy);?></form></div><?php } ?></div></div><!-- /col-left --></div><!-- /col-container --></div><!-- /wrap --><?php inline_edit_term_row('edit-tags', $taxonomy); ?><?phpbreak;}include('./admin-footer.php');?>
<?php/** * Install theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_themes') )	wp_die(__('You do not have sufficient permissions to install themes on this site.'));include(ABSPATH . 'wp-admin/includes/theme-install.php');$title = __('Install Themes');$parent_file = 'themes.php';$submenu_file = 'themes.php';wp_reset_vars( array('tab', 'paged') );wp_enqueue_style( 'theme-install' );wp_enqueue_script( 'theme-install' );add_thickbox();wp_enqueue_script( 'theme-preview' );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Theme Installer');//$tabs['popular']  = _x('Popular','Theme Installer');$tabs['new']      = _x('Newest','Theme Installer');$tabs['updated']  = _x('Recently Updated','Theme Installer');$nonmenu_tabs = array('theme-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_themes_tabs', $tabs );$nonmenu_tabs = apply_filters('install_themes_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;$body_id = $tab;do_action('install_themes_pre_' . $tab); //Used to override the general interface, Eg, install or theme information.$help = '<p>' . sprintf(__('You can find additional themes for your site by using the Theme Browser/Installer on this screen, which will display themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. These themes are designed and developed by third parties, are available free of charge, and are licensed under the GNU General Public License, version 2, just like WordPress.'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p>' . __('You can Search for themes by keyword, author, or tag, or can get more specific and search by criteria listed in the feature filter. Alternately, you can browse the themes that are Featured, Newest, or Recently Updated. When you find a theme you like, you can preview it or install it.') . '</p>';$help .= '<p>' . __('You can Upload a theme manually if you have already downloaded its ZIP archive onto your computer (make sure it is from a trusted and original source). You can also do it the old-fashioned way and copy a downloaded theme&#8217;s folder via FTP into your <code>/wp-content/themes</code> directory.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes#Adding_New_Themes" target="_blank">Documentation on Adding New Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab"><?php echo esc_html_x('Manage Themes', 'theme'); ?></a><a href="theme-install.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('theme-install.php?tab='. $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_themes_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * Plugins administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( is_multisite() ) {	$menu_perms = get_site_option( 'menu_items', array() );	if ( empty($menu_perms['plugins']) && ! is_super_admin() )		wp_die( __( 'Cheatin&#8217; uh?' ) );	else if ( $menu_perms['plugins'] != 1 && is_super_admin() )		add_action( 'admin_notices', '_admin_notice_multisite_activate_plugins_page' );}if ( ! current_user_can( 'activate_plugins' ) )	wp_die( __( 'You do not have sufficient permissions to manage plugins for this site.' ) );if ( isset($_POST['clear-recent-list']) )	$action = 'clear-recent-list';elseif ( !empty($_REQUEST['action']) )	$action = $_REQUEST['action'];elseif ( !empty($_REQUEST['action2']) )	$action = $_REQUEST['action2'];else	$action = false;$plugin = isset($_REQUEST['plugin']) ? $_REQUEST['plugin'] : '';$default_status = get_user_option('plugins_last_view');if ( empty($default_status) )	$default_status = 'all';$status = isset($_REQUEST['plugin_status']) ? $_REQUEST['plugin_status'] : $default_status;if ( !in_array($status, array('all', 'active', 'inactive', 'recent', 'upgrade', 'network', 'mustuse', 'dropins', 'search')) )	$status = 'all';if ( $status != $default_status && 'search' != $status )	update_user_meta($current_user->ID, 'plugins_last_view', $status);$page = isset($_REQUEST['paged']) ? $_REQUEST['paged'] : 1;//Clean up request URI from temporary args for screen options/paging uri's to work as expected.$_SERVER['REQUEST_URI'] = remove_query_arg(array('error', 'deleted', 'activate', 'activate-multi', 'deactivate', 'deactivate-multi', '_error_nonce'), $_SERVER['REQUEST_URI']);if ( !empty($action) ) {	$network_wide = false;	if ( ( isset( $_GET['networkwide'] ) || 'network-activate-selected' == $action ) && is_multisite() && current_user_can( 'manage_network_plugins' ) )		$network_wide = true;	switch ( $action ) {		case 'activate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('activate-plugin_' . $plugin);			$result = activate_plugin($plugin, 'plugins.php?error=true&plugin=' . $plugin, $network_wide);			if ( is_wp_error( $result ) ) {				if ( 'unexpected_output' == $result->get_error_code() ) {					$redirect = 'plugins.php?error=true&charsout=' . strlen($result->get_error_data()) . '&plugin=' . $plugin;					wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect));					exit;				} else {					wp_die($result);				}			}			$recent = (array)get_option('recently_activated');			if ( isset($recent[ $plugin ]) ) {				unset($recent[ $plugin ]);				update_option('recently_activated', $recent);			}			if ( isset($_GET['from']) && 'import' == $_GET['from'] ) {				wp_redirect("import.php?import=" . str_replace('-importer', '', dirname($plugin)) ); // overrides the ?error=true one above and redirects to the Imports page, striping the -importer suffix			} else {				wp_redirect("plugins.php?activate=true&plugin_status=$status&paged=$page"); // overrides the ?error=true one above			}			exit;			break;		case 'activate-selected':		case 'network-activate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); // Only activate plugins which are not already active.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			activate_plugins($plugins, 'plugins.php?error=true', $network_wide);			$recent = (array)get_option('recently_activated');			foreach ( $plugins as $plugin => $time)				if ( isset($recent[ $plugin ]) )					unset($recent[ $plugin ]);			update_option('recently_activated', $recent);			wp_redirect("plugins.php?activate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'update-selected' :			check_admin_referer( 'bulk-manage-plugins' );			if ( isset( $_GET['plugins'] ) )				$plugins = explode( ',', $_GET['plugins'] );			elseif ( isset( $_POST['checked'] ) )				$plugins = (array) $_POST['checked'];			else				$plugins = array();			$title = __( 'Upgrade Plugins' );			$parent_file = 'plugins.php';			require_once( './admin-header.php' );			echo '<div class="wrap">';			screen_icon();			echo '<h2>' . esc_html( $title ) . '</h2>';			$url = 'update.php?action=update-selected&amp;plugins=' . urlencode( join(',', $plugins) );			$url = wp_nonce_url($url, 'bulk-update-plugins');			echo "<iframe src='$url' style='width: 100%; height:100%; min-height:850px;'></iframe>";			echo '</div>';			require_once( './admin-footer.php' );			exit;			break;		case 'error_scrape':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('plugin-activation-error_' . $plugin);			$valid = validate_plugin($plugin);			if ( is_wp_error($valid) )				wp_die($valid);			if ( ! WP_DEBUG ) {				if ( defined('E_RECOVERABLE_ERROR') )					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);				else					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			}			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			// Go back to "sandbox" scope so we get the same errors as before			function plugin_sandbox_scrape( $plugin ) {				include( WP_PLUGIN_DIR . '/' . $plugin );			}			plugin_sandbox_scrape( $plugin );			do_action('activate_' . $plugin);			exit;			break;		case 'deactivate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('deactivate-plugin_' . $plugin);			deactivate_plugins($plugin);			update_option('recently_activated', array($plugin => time()) + (array)get_option('recently_activated'));			if (headers_sent())				echo "<meta http-equiv='refresh' content='" . esc_attr( "0;url=plugins.php?deactivate=true&plugin_status=$status&paged=$page" ) . "' />";			else				wp_redirect("plugins.php?deactivate=true&plugin_status=$status&paged=$page");			exit;			break;		case 'deactivate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, 'is_plugin_active'); //Do not deactivate plugins which are already deactivated.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			deactivate_plugins($plugins);			$deactivated = array();			foreach ( $plugins as $plugin )				$deactivated[ $plugin ] = time();			update_option('recently_activated', $deactivated + (array)get_option('recently_activated'));			wp_redirect("plugins.php?deactivate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'delete-selected':			if ( ! current_user_can('delete_plugins') )				wp_die(__('You do not have sufficient permissions to delete plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			//$_POST = from the plugin form; $_GET = from the FTP details screen.			$plugins = isset( $_REQUEST['checked'] ) ? (array) $_REQUEST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); //Do not allow to delete Activated plugins.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			include(ABSPATH . 'wp-admin/update.php');			$parent_file = 'plugins.php';			if ( ! isset($_REQUEST['verify-delete']) ) {				wp_enqueue_script('jquery');				require_once('./admin-header.php');				?>			<div class="wrap">				<?php					$files_to_delete = $plugin_info = array();					foreach ( (array) $plugins as $plugin ) {						if ( '.' == dirname($plugin) ) {							$files_to_delete[] = WP_PLUGIN_DIR . '/' . $plugin;							if( $data = get_plugin_data(WP_PLUGIN_DIR . '/' . $plugin) ) {								$plugin_info[ $plugin ] = $data;								$plugin_info[ $plugin ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );							}						} else {							// Locate all the files in that folder							$files = list_files( WP_PLUGIN_DIR . '/' . dirname($plugin) );							if ( $files ) {								$files_to_delete = array_merge($files_to_delete, $files);							}							// Get plugins list from that folder							if ( $folder_plugins = get_plugins( '/' . dirname($plugin)) ) {								foreach( $folder_plugins as $plugin_file => $data ) {									$plugin_info[ $plugin_file ] = $data;									$plugin_info[ $plugin_file ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );								}							}						}					}					screen_icon();					$plugins_to_delete = count( $plugin_info );					echo '<h2>' . _n( 'Delete Plugin', 'Delete Plugins', $plugins_to_delete ) . '</h2>';				?>				<p><?php echo _n( 'You are about to remove the following plugin:', 'You are about to remove the following plugins:', $plugins_to_delete ); ?></p>					<ul class="ul-disc">						<?php						$data_to_delete = false;						foreach ( $plugin_info as $plugin ) {							if ( $plugin['is_uninstallable'] ) {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __( '<strong>%1$s</strong> by <em>%2$s</em> (will also <strong>delete its data</strong>)' ), $plugin['Name'], $plugin['Author'] ), '</li>';								$data_to_delete = true;							} else {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __('<strong>%1$s</strong> by <em>%2$s</em>' ), $plugin['Name'], $plugin['Author'] ), '</li>';							}						}						?>					</ul>				<p><?php				if ( $data_to_delete )					_e('Are you sure you wish to delete these files and data?');				else					_e('Are you sure you wish to delete these files?');				?></p>				<form method="post" action="<?php echo esc_url($_SERVER['REQUEST_URI']); ?>" style="display:inline;">					<input type="hidden" name="verify-delete" value="1" />					<input type="hidden" name="action" value="delete-selected" />					<?php						foreach ( (array)$plugins as $plugin )							echo '<input type="hidden" name="checked[]" value="' . esc_attr($plugin) . '" />';					?>					<?php wp_nonce_field('bulk-manage-plugins') ?>					<input type="submit" name="submit" value="<?php $data_to_delete ? esc_attr_e('Yes, Delete these files and data') : esc_attr_e('Yes, Delete these files') ?>" class="button" />				</form>				<form method="post" action="<?php echo esc_url(wp_get_referer()); ?>" style="display:inline;">					<input type="submit" name="submit" value="<?php esc_attr_e('No, Return me to the plugin list') ?>" class="button" />				</form>				<p><a href="#" onclick="jQuery('#files-list').toggle(); return false;"><?php _e('Click to view entire list of files which will be deleted'); ?></a></p>				<div id="files-list" style="display:none;">					<ul class="code">					<?php						foreach ( (array)$files_to_delete as $file )							echo '<li>' . str_replace(WP_PLUGIN_DIR, '', $file) . '</li>';					?>					</ul>				</div>			</div>				<?php				require_once('./admin-footer.php');				exit;			} //Endif verify-delete			$delete_result = delete_plugins($plugins);			set_transient('plugins_delete_result_'.$user_ID, $delete_result); //Store the result in a cache rather than a URL param due to object type & length			wp_redirect("plugins.php?deleted=true&plugin_status=$status&paged=$page");			exit;			break;		case 'clear-recent-list':			update_option('recently_activated', array());			break;	}}wp_enqueue_script('plugin-install');add_thickbox();add_contextual_help($current_screen,	'<p>' . __('Plugins extend and expand the functionality of WordPress. Once a plugin is installed, you may activate it or deactivate it here.') . '</p>' .	'<p>' . sprintf(__('You can find additional plugins for your site by using the <a href="%1$s">Plugin Browser/Installer</a> functionality or by browsing the <a href="%2$s" target="_blank">WordPress Plugin Directory</a> directly and installing new plugins manually. To manually install a plugin you generally just need to upload the plugin file into your <code>/wp-content/plugins</code> directory. Once a plugin has been installed, you can activate it here.'), 'plugin-install.php', 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('Most of the time, plugins play nicely with the core of WordPress and with other plugins. Sometimes, though, a plugin&#8217;s code will get in the way of another plugin, causing compatibility issues. If your site starts doing strange things, this may be the problem. Try deactivating all your plugins and re-activating them in various combinations until you isolate which one(s) caused the issue.') . '</p>' .	'<p>' . sprintf( __('If something goes wrong with a plugin and you can&#8217;t use WordPress, delete or rename that file in the <code>%s</code> directory and it will be automatically deactivated.'), WP_PLUGIN_DIR) . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Managing_Plugins#Plugin_Management" target="_blank">Documentation on Managing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$title = __('Plugins');require_once('./admin-header.php');$invalid = validate_active_plugins();if ( !empty($invalid) )	foreach ( $invalid as $plugin_file => $error )		echo '<div id="message" class="error"><p>' . sprintf(__('The plugin <code>%s</code> has been <strong>deactivated</strong> due to an error: %s'), esc_html($plugin_file), $error->get_error_message()) . '</p></div>';?><?php if ( isset($_GET['error']) ) :	if ( isset($_GET['charsout']) )		$errmsg = sprintf(__('The plugin generated %d characters of <strong>unexpected output</strong> during activation.  If you notice &#8220;headers already sent&#8221; messages, problems with syndication feeds or other issues, try deactivating or removing this plugin.'), $_GET['charsout']);	else		$errmsg = __('Plugin could not be activated because it triggered a <strong>fatal error</strong>.');	?>	<div id="message" class="updated"><p><?php echo $errmsg; ?></p>	<?php		if ( !isset($_GET['charsout']) && wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $plugin) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php echo admin_url('plugins.php?action=error_scrape&amp;plugin=' . esc_attr($plugin) . '&amp;_wpnonce=' . esc_attr($_GET['_error_nonce'])); ?>"></iframe>	<?php		}	?>	</div><?php elseif ( isset($_GET['deleted']) ) :		$delete_result = get_transient('plugins_delete_result_'.$user_ID);		delete_transient('plugins_delete_result'); //Delete it once we're done.		if ( is_wp_error($delete_result) ) : ?>		<div id="message" class="updated"><p><?php printf( __('Plugin could not be deleted due to an error: %s'), $delete_result->get_error_message() ); ?></p></div>		<?php else : ?>		<div id="message" class="updated"><p><?php _e('The selected plugins have been <strong>deleted</strong>.'); ?></p></div>		<?php endif; ?><?php elseif ( isset($_GET['activate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>activated</strong>.') ?></p></div><?php elseif (isset($_GET['activate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>activated</strong>.'); ?></p></div><?php elseif ( isset($_GET['deactivate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>deactivated</strong>.') ?></p></div><?php elseif (isset($_GET['deactivate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>deactivated</strong>.'); ?></p></div><?php elseif ( 'update-selected' == $action ) : ?>	<div id="message" class="updated"><p><?php _e('No out of date plugins were selected.'); ?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can('install_plugins') ) { ?> <a href="plugin-install.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'plugin'); ?></a><?php } ?></h2><?php$all_plugins = apply_filters( 'all_plugins', get_plugins() );$search_plugins = array();$active_plugins = array();$inactive_plugins = array();$recent_plugins = array();$recently_activated = get_option('recently_activated', array());$upgrade_plugins = array();$network_plugins = array();$mustuse_plugins = $dropins_plugins = array();if ( ! is_multisite() || current_user_can('manage_network_plugins') ) {	if ( apply_filters( 'show_advanced_plugins', true, 'mustuse' ) )		$mustuse_plugins = get_mu_plugins();	if ( apply_filters( 'show_advanced_plugins', true, 'dropins' ) )		$dropins_plugins = get_dropins();}set_transient( 'plugin_slugs', array_keys($all_plugins), 86400 );// Clean out any plugins which were deactivated over a week ago.foreach ( $recently_activated as $key => $time )	if ( $time + (7*24*60*60) < time() ) //1 week		unset($recently_activated[ $key ]);if ( $recently_activated != get_option('recently_activated') ) //If array changed, update it.	update_option('recently_activated', $recently_activated);$current = get_site_transient( 'update_plugins' );foreach ( array( 'all_plugins', 'mustuse_plugins', 'dropins_plugins' ) as $plugin_array_name) {	foreach ( (array) $$plugin_array_name as $plugin_file => $plugin_data ) {		// Translate, Apply Markup, Sanitize HTML		$plugin_data = _get_plugin_data_markup_translate($plugin_file, $plugin_data, false, true);		${$plugin_array_name}[ $plugin_file ] = $plugin_data;	}}unset( $plugin_array_name );foreach ( (array) $all_plugins as $plugin_file => $plugin_data) {	// Filter into individual sections	if ( is_multisite() && is_network_only_plugin( $plugin_file ) && !current_user_can( 'manage_network_plugins' ) ) {		unset( $all_plugins[ $plugin_file ] );		continue;	} elseif ( is_plugin_active_for_network($plugin_file) ) {		$network_plugins[ $plugin_file ] = $plugin_data;	} elseif ( is_plugin_active($plugin_file) ) {		$active_plugins[ $plugin_file ] = $plugin_data;	} else {		if ( isset( $recently_activated[ $plugin_file ] ) ) // Was the plugin recently activated?			$recent_plugins[ $plugin_file ] = $plugin_data;		$inactive_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $current->response[ $plugin_file ] ) )		$upgrade_plugins[ $plugin_file ] = $plugin_data;}if ( !current_user_can('update_plugins') )	$upgrade_plugins = array();$total_all_plugins = count($all_plugins);$total_inactive_plugins = count($inactive_plugins);$total_active_plugins = count($active_plugins);$total_recent_plugins = count($recent_plugins);$total_upgrade_plugins = count($upgrade_plugins);$total_network_plugins = count($network_plugins);$total_mustuse_plugins = count($mustuse_plugins);$total_dropins_plugins = count($dropins_plugins);// Searching.if ( !empty($_GET['s']) ) {	function _search_plugins_filter_callback($plugin) {		static $term;		if ( is_null($term) )			$term = stripslashes($_GET['s']);		if ( 	stripos($plugin['Name'], $term) !== false ||				stripos($plugin['Description'], $term) !== false ||				stripos($plugin['Author'], $term) !== false ||				stripos($plugin['PluginURI'], $term) !== false ||				stripos($plugin['AuthorURI'], $term) !== false ||				stripos($plugin['Version'], $term) !== false )			return true;		else			return false;	}	$status = 'search';	$search_plugins = array_filter($all_plugins, '_search_plugins_filter_callback');	$total_search_plugins = count($search_plugins);}$plugin_array_name = "${status}_plugins";if ( empty($$plugin_array_name) && !in_array($status, array('all', 'search')) ) {	$status = 'all';	$plugin_array_name = "${status}_plugins";}$plugins = &$$plugin_array_name;// Paging.$total_this_page = "total_{$status}_plugins";$total_this_page = $$total_this_page;$plugins_per_page = (int) get_user_option( 'plugins_per_page' );if ( empty( $plugins_per_page ) || $plugins_per_page < 1 )	$plugins_per_page = 999;$plugins_per_page = apply_filters( 'plugins_per_page', $plugins_per_page );$start = ($page - 1) * $plugins_per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($total_this_page / $plugins_per_page),	'current' => $page));$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $plugins_per_page, $total_this_page ) ),	'<span class="total-type-count">' . number_format_i18n( $total_this_page ) . '</span>',	$page_links);/** * @ignore * * @param array $plugins * @param string $context */function print_plugins_table($plugins, $context = '') {	global $page;	$checkbox = ! in_array( $context, array( 'mustuse', 'dropins' ) ) ? '<input type="checkbox" />' : '';?><table class="widefat" cellspacing="0" id="<?php echo $context ?>-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	if ( empty($plugins) ) {		echo '<tr>			<td colspan="3">' . __('No plugins to show') . '</td>		</tr>';	}	foreach ( (array)$plugins as $plugin_file => $plugin_data) {		// preorder		$actions = array(			'network_deactivate' => '', 'deactivate' => '',			'network_only' => '', 'activate' => '',			'network_activate' => '',			'edit' => '',			'delete' => '',		);		if ( 'mustuse' == $context ) {			$is_active = true;		} elseif ( 'dropins' == $context ) {			$dropins = _get_dropins();			$plugin_name = $plugin_file;			if ( $plugin_file != $plugin_data['Name'] )				$plugin_name .= '<br/>' . $plugin_data['Name'];			if ( true === ( $dropins[ $plugin_file ][1] ) ) { // Doesn't require a constant				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} elseif ( constant( $dropins[ $plugin_file ][1] ) ) { // Constant is true				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} else {				$is_active = false;				$description = '<strong>' . $dropins[ $plugin_file ][0] . ' <span class="attention">' . __('Inactive:') . '</span></strong> ' . sprintf( __( 'Requires <code>%s</code> in <code>wp-config.php</code>.' ), "define('" . $dropins[ $plugin_file ][1] . "', true);" ) . '</p>';			}			$description .= '<p>' . $plugin_data['Description'] . '</p>';		} else {			$is_active_for_network = is_plugin_active_for_network($plugin_file);			$is_active = $is_active_for_network || is_plugin_active( $plugin_file );			if ( $is_active_for_network && !is_super_admin() )				continue;			if ( $is_active ) {				if ( $is_active_for_network ) {					if ( is_super_admin() )						$actions['network_deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Network Deactivate') . '</a>';				} else {					$actions['deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Deactivate') . '</a>';				}			} else {				if ( is_multisite() && is_network_only_plugin( $plugin_file ) )					$actions['network_only'] = '<span title="' . __('This plugin can only be activated for all sites in a network') . '">' . __('Network Only') . '</span>';				else					$actions['activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin') . '" class="edit">' . __('Activate') . '</a>';				if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )					$actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" class="edit">' . __('Network Activate') . '</a>';				if ( current_user_can('delete_plugins') )					$actions['delete'] = '<a href="' . wp_nonce_url('plugins.php?action=delete-selected&amp;checked[]=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'bulk-manage-plugins') . '" title="' . __('Delete this plugin') . '" class="delete">' . __('Delete') . '</a>';			} // end if $is_active			if ( current_user_can('edit_plugins') && is_writable(WP_PLUGIN_DIR . '/' . $plugin_file) )				$actions['edit'] = '<a href="plugin-editor.php?file=' . $plugin_file . '" title="' . __('Open this file in the Plugin Editor') . '" class="edit">' . __('Edit') . '</a>';		} // end if $context		$actions = apply_filters( 'plugin_action_links', array_filter( $actions ), $plugin_file, $plugin_data, $context );		$actions = apply_filters( "plugin_action_links_$plugin_file", $actions, $plugin_file, $plugin_data, $context );		$class = $is_active ? 'active' : 'inactive';		$checkbox = in_array( $context, array( 'mustuse', 'dropins' ) ) ? '' : "<input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' />";		if ( 'dropins' != $context ) {			$description = '<p>' . $plugin_data['Description'] . '</p>';			$plugin_name = $plugin_data['Name'];		}		echo "	<tr class='$class'>		<th scope='row' class='check-column'>$checkbox</th>		<td class='plugin-title'><strong>$plugin_name</strong></td>		<td class='desc'>$description</td>	</tr>	<tr class='$class second'>		<td></td>		<td class='plugin-title'>";		echo '<div class="row-actions-visible">';		foreach ( $actions as $action => $link ) {			$sep = end($actions) == $link ? '' : ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo "</div></td>		<td class='desc'>";		$plugin_meta = array();		if ( !empty($plugin_data['Version']) )			$plugin_meta[] = sprintf(__('Version %s'), $plugin_data['Version']);		if ( !empty($plugin_data['Author']) ) {			$author = $plugin_data['Author'];			if ( !empty($plugin_data['AuthorURI']) )				$author = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';			$plugin_meta[] = sprintf( __('By %s'), $author );		}		if ( ! empty($plugin_data['PluginURI']) )			$plugin_meta[] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin site' ) . '">' . __('Visit plugin site') . '</a>';		$plugin_meta = apply_filters('plugin_row_meta', $plugin_meta, $plugin_file, $plugin_data, $context);		echo implode(' | ', $plugin_meta);		echo "</td>	</tr>\n";		do_action( 'after_plugin_row', $plugin_file, $plugin_data, $context );		do_action( "after_plugin_row_$plugin_file", $plugin_file, $plugin_data, $context );	}?>	</tbody></table><?php} //End print_plugins_table()/** * @ignore * * @param string $context */function print_plugin_actions($context, $field_name = 'action' ) {	if ( in_array( $context, array( 'mustuse', 'dropins' ) ) )		return;?>	<div class="alignleft actions">		<select name="<?php echo $field_name; ?>">			<option value="" selected="selected"><?php _e('Bulk Actions'); ?></option>	<?php if ( 'active' != $context ) : ?>			<option value="activate-selected"><?php _e('Activate'); ?></option>	<?php endif; ?>	<?php if ( is_multisite() && 'network' != $context ) : ?>			<option value="network-activate-selected"><?php _e('Network Activate'); ?></option>	<?php endif; ?>	<?php if ( 'inactive' != $context && 'recent' != $context ) : ?>			<option value="deactivate-selected"><?php _e('Deactivate'); ?></option>	<?php endif; ?>	<?php if ( current_user_can( 'update_plugins' ) ) : ?>			<option value="update-selected"><?php _e( 'Upgrade' ); ?></option>	<?php endif; ?>	<?php if ( current_user_can('delete_plugins') && ( 'active' != $context ) ) : ?>			<option value="delete-selected"><?php _e('Delete'); ?></option>	<?php endif; ?>		</select>		<input type="submit" name="doaction_active" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary action" />	<?php if ( 'recent' == $context ) : ?>		<input type="submit" name="clear-recent-list" value="<?php esc_attr_e('Clear List') ?>" class="button-secondary" />	<?php endif; ?>	</div><?php}?><form method="get" action=""><p class="search-box">	<label class="screen-reader-text" for="plugin-search-input"><?php _e( 'Search Plugins' ); ?>:</label>	<input type="text" id="plugin-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Installed Plugins' ); ?>" class="button" /></p></form><?php do_action( 'pre_current_active_plugins', $all_plugins ) ?><form method="post" action="<?php echo admin_url('plugins.php') ?>"><?php wp_nonce_field('bulk-manage-plugins') ?><input type="hidden" name="plugin_status" value="<?php echo esc_attr($status) ?>" /><input type="hidden" name="paged" value="<?php echo esc_attr($page) ?>" /><ul class="subsubsub"><?php$status_links = array();$class = ( 'all' == $status ) ? ' class="current"' : '';$status_links[] = "<li><a href='plugins.php?plugin_status=all' $class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_all_plugins, 'plugins' ), number_format_i18n( $total_all_plugins ) ) . '</a>';if ( ! empty($active_plugins) ) {	$class = ( 'active' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=active' $class>" . sprintf( _n( 'Active <span class="count">(%s)</span>', 'Active <span class="count">(%s)</span>', $total_active_plugins ), number_format_i18n( $total_active_plugins ) ) . '</a>';}if ( ! empty($recent_plugins) ) {	$class = ( 'recent' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=recent' $class>" . sprintf( _n( 'Recently Active <span class="count">(%s)</span>', 'Recently Active <span class="count">(%s)</span>', $total_recent_plugins ), number_format_i18n( $total_recent_plugins ) ) . '</a>';}if ( ! empty($inactive_plugins) ) {	$class = ( 'inactive' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=inactive' $class>" . sprintf( _n( 'Inactive <span class="count">(%s)</span>', 'Inactive <span class="count">(%s)</span>', $total_inactive_plugins ), number_format_i18n( $total_inactive_plugins ) ) . '</a>';}if ( ! empty($network_plugins) ) {	$class = ( 'network' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=network' $class>" . sprintf( _n( 'Network <span class="count">(%s)</span>', 'Network <span class="count">(%s)</span>', $total_network_plugins ), number_format_i18n( $total_network_plugins ) ) . '</a>';}if ( ! empty($mustuse_plugins) ) {	$class = ( 'mustuse' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=mustuse' $class>" . sprintf( _n( 'Must-Use <span class="count">(%s)</span>', 'Must-Use <span class="count">(%s)</span>', $total_mustuse_plugins ), number_format_i18n( $total_mustuse_plugins ) ) . '</a>';}if ( ! empty($dropins_plugins) ) {	$class = ( 'dropins' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=dropins' $class>" . sprintf( _n( 'Drop-ins <span class="count">(%s)</span>', 'Drop-ins <span class="count">(%s)</span>', $total_dropins_plugins ), number_format_i18n( $total_dropins_plugins ) ) . '</a>';}if ( ! empty($upgrade_plugins) ) {	$class = ( 'upgrade' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=upgrade' $class>" . sprintf( _n( 'Upgrade Available <span class="count">(%s)</span>', 'Upgrade Available <span class="count">(%s)</span>', $total_upgrade_plugins ), number_format_i18n( $total_upgrade_plugins ) ) . '</a>';}if ( ! empty($search_plugins) ) {	$class = ( 'search' == $status ) ? ' class="current"' : '';	$term = isset($_REQUEST['s']) ? urlencode(stripslashes($_REQUEST['s'])) : '';	$status_links[] = "<li><a href='plugins.php?s=$term' $class>" . sprintf( _n( 'Search Results <span class="count">(%s)</span>', 'Search Results <span class="count">(%s)</span>', $total_search_plugins ), number_format_i18n( $total_search_plugins ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );?></ul><?phpif ( 'mustuse' == $status )	echo '<div class="clear"><p>' . __( 'Files in the <code>/wp-content/mu-plugins</code> directory are executed automatically.' ) . '</p>';elseif ( 'dropins' == $status )	echo '<div class="clear"><p>' . __( 'Drop-ins are advanced plugins in the <code>/wp-content</code> directory that replace WordPress functionality when present.' ) . '</p>';if ( !empty( $plugins ) && ( ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) ) :?><div class="tablenav"><?phpif ( $page_links )	echo '<div class="tablenav-pages">', $page_links_text, '</div>';print_plugin_actions($status);?></div><div class="clear"></div><?phpendif;if ( $total_this_page > $plugins_per_page )	$plugins = array_slice($plugins, $start, $plugins_per_page);print_plugins_table($plugins, $status);if ( !empty( $plugins ) && ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) {?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";print_plugin_actions($status, "action2");?></div><?php } elseif ( ! empty( $all_plugins ) ) { ?><p><?php __( 'No plugins found.' ); ?></p><?php } ?></form><?php if ( empty($all_plugins) ) : ?><br class="clear" /><p><?php _e('You do not appear to have any plugins available at this time.') ?></p><?php endif; ?></div><?phpinclude('./admin-footer.php');?>
<?php/** * New User Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('create_users') )	wp_die(__('Cheatin&#8217; uh?'));if ( is_multisite() && !get_site_option( 'add_new_users' ) )	wp_die( __('Page disabled by the administrator') );/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( is_multisite() ) {	function admin_created_user_email( $text ) {		return sprintf( __( "Hi,You've been invited to join '%s' at%s as a %s.If you do not want to join this site please ignorethis email. This invitation will expire in a few days.Please click the following link to activate your user account:%%s" ), get_bloginfo('name'), site_url(), esc_html( $_REQUEST[ 'role' ] ) );	}	add_filter( 'wpmu_signup_user_notification_email', 'admin_created_user_email' );	function admin_created_user_subject( $text ) {		return "[" . get_bloginfo('name') . "] Your site invite";	}}if ( isset($_REQUEST['action']) && 'adduser' == $_REQUEST['action'] ) {	check_admin_referer('add-user');	if ( !is_multisite() ) {		$user_id = add_user();		if ( is_wp_error( $user_id ) ) {			$add_user_errors = $user_id;		} else {			if ( current_user_can('edit_users') ) {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				$redirect = 'users.php?usersearch='. urlencode($new_user_login) . '&update=add' . '#user-' . $user_id;			} else {				$redirect = add_query_arg( 'update', 'add', 'user-new.php' );			}			wp_redirect( $redirect );			die();		}	} else {		$user_login = preg_replace( "/\s+/", '', sanitize_user( $_REQUEST[ 'user_login' ], true ) );		$user_details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$wpdb->users} WHERE user_login = %s AND user_email = %s", $user_login, $_REQUEST[ 'email' ] ) );		if ( $user_details ) {			// Adding an existing user to this blog			$new_user_email = esc_html(trim($_REQUEST['email']));			$redirect = 'user-new.php';			$username = $user_details->user_login;			$user_id = $user_details->ID;			if ( ( $username != null && !is_super_admin( $user_id ) ) && ( array_key_exists($blog_id, get_blogs_of_user($user_id)) ) ) {				$redirect = add_query_arg( array('update' => 'addexisting'), 'user-new.php' );			} else {				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_existing_user_to_blog( array( 'user_id' => $user_id, 'role' => $_REQUEST[ 'role' ] ) );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$newuser_key = substr( md5( $user_id ), 0, 5 );					add_option( 'new_user_' . $newuser_key, array( 'user_id' => $user_id, 'email' => $user_details->user_email, 'role' => $_REQUEST[ 'role' ] ) );					$message = __("Hi,\n\nYou have been invited to join '%s' at\n%s as a %s.\nPlease click the following link to confirm the invite:\n%s\n");					wp_mail( $new_user_email, sprintf( __( '[%s] Joining confirmation' ), get_option( 'blogname' ) ),  sprintf($message, get_option('blogname'), site_url(), $_REQUEST[ 'role' ], site_url("/newbloguser/$newuser_key/")));					$redirect = add_query_arg( array('update' => 'add'), 'user-new.php' );				}			}			wp_redirect( $redirect );			die();		} else {			// Adding a new user to this blog			$user_details = wpmu_validate_user_signup( $_REQUEST[ 'user_login' ], $_REQUEST[ 'email' ] );			unset( $user_details[ 'errors' ]->errors[ 'user_email_used' ] );			if ( is_wp_error( $user_details[ 'errors' ] ) && !empty( $user_details[ 'errors' ]->errors ) ) {				$add_user_errors = $user_details[ 'errors' ];			} else {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_filter( 'wpmu_signup_user_notification', '__return_false' ); // Disable confirmation email				}				wpmu_signup_user( $new_user_login, $_REQUEST[ 'email' ], array( 'add_to_blog' => $wpdb->blogid, 'new_role' => $_REQUEST[ 'role' ] ) );				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					$key = $wpdb->get_var( $wpdb->prepare( "SELECT activation_key FROM {$wpdb->signups} WHERE user_login = %s AND user_email = %s", $new_user_login, $_REQUEST[ 'email' ] ) );					wpmu_activate_signup( $key );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$redirect = add_query_arg( array('update' => 'newuserconfimation'), 'user-new.php' );				}				wp_redirect( $redirect );				die();			}		}	}}$title = __('Add New User');$parent_file = 'users.php';add_contextual_help($current_screen,    '<p>' . __('To add a new user to your site, fill in the form on this screen. If you&#8217;re not sure which role to assign, you can use the link below to review the different roles and their capabilities. Here is a basic overview of roles:') . '</p>' .    '<ul>' .        '<li>' . __('Administrators have access to all the administration features.') . '</li>' .        '<li>' . __('Editors can publish posts, manage posts as well as manage other people&#8217;s posts, etc.')  . '</li>' .        '<li>' . __('Authors can publish and manage their own posts.') . '</li>' .        '<li>' . __('Contributors can write and manage their posts but not publish posts or upload media files.') . '</li>' .        '<li>' . __('Subscribers can read comments/comment/receive newsletters, etc.') . '</li>' .    '</ul>' .    '<p>' . __('You must assign a password to the new user, but don&#8217;t worry; when they log in for the first time they will be prompted to change it. The username, however, cannot be changed.') . '</p>' .    '<p>' . __('New users will receive an email letting them know they&#8217;ve been added as a user for your site. By default, this email will also contain their password. Uncheck the box if you do not the password to be included in the welcome email.') . '</p>' .    '<p>' . __('Remember to click the Add User button at the bottom of this screen when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Add_New_SubPanel" target="_blank">Documentation on Adding New Users</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script('wp-ajax-response');wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');require_once ('admin-header.php');if ( isset($_GET['update']) ) {	$messages = array();	if ( is_multisite() ) {		switch ( $_GET['update'] ) {			case "newuserconfimation":				$messages[] = __('Invitation email sent to new user. A confirmation link must be clicked before their account is created.');				break;			case "add":				$messages[] = __('Invitation email sent to user. A confirmation link must be clicked for them to be added to your site.');				break;			case "addnoconfirmation":				$messages[] = __('User has been added to your site.');				break;			case "addexisting":				$messages[] = __('That user is already a member of this site.');				break;		}	} else {		if ( 'add' == $_GET['update'] )			$messages[] = __('User added.');	}}?><div class="wrap"><?php screen_icon(); ?><h2 id="add-new-user"><?php _e('Add New User') ?></h2><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty( $messages ) ) {	foreach ( $messages as $msg )		echo '<div id="message" class="updated"><p>' . $msg . '</p></div>';} ?><?php if ( isset($add_user_errors) && is_wp_error( $add_user_errors ) ) : ?>	<div class="error">		<?php			foreach ( $add_user_errors->get_error_messages() as $message )				echo "<p>$message</p>";		?>	</div><?php endif; ?><div id="ajax-response"></div><?phpif ( !is_multisite() ) {	if ( get_option('users_can_register') )		echo '<p>' . sprintf(__('Users can <a href="%1$s">register themselves</a> or you can manually create users here.'), site_url('wp-register.php')) . '</p>';	else		echo '<p>' . sprintf(__('Users cannot currently <a href="%1$s">register themselves</a>, but you can manually create users here.'), admin_url('options-general.php#users_can_register')) . '</p>';} else {	echo '<p>' . __( 'You can add new users to your site in two ways:' ) . '<ol><li> ' . __( 'Enter the username and email address of an existing user on this site.' ) . '</li><li> ' . __( 'Enter the username and the email address of a person who is not already a member of this site. Choose the username carefully, it cannot be changed.' ) . '</li></ol></p>';	echo '<p>' . __( 'That person will be sent an email asking them to click a link confirming the invite. New users will then be sent an email with a randomly generated password and a login link.' ) . '</p>';}?><form action="#add-new-user" method="post" name="adduser" id="adduser" class="add:users: validate"<?php do_action('user_new_form_tag');?>><?php wp_nonce_field('add-user') ?><?php//Load up the passed data, else set to a default.foreach ( array('user_login' => 'login', 'first_name' => 'firstname', 'last_name' => 'lastname',				'email' => 'email', 'url' => 'uri', 'role' => 'role') as $post_field => $var ) {	$var = "new_user_$var";	if ( ! isset($$var) )		$$var = isset($_POST[$post_field]) ? stripslashes($_POST[$post_field]) : '';}$new_user_send_password = !$_POST || isset($_POST['send_password']);?><table class="form-table">	<tr class="form-field form-required">		<th scope="row"><label for="user_login"><?php _e('Username'); ?> <span class="description"><?php _e('(required)'); ?></span></label>		<input name="action" type="hidden" id="action" value="adduser" /></th>		<td><input name="user_login" type="text" id="user_login" value="<?php echo esc_attr($new_user_login); ?>" aria-required="true" /></td>	</tr>	<tr class="form-field form-required">		<th scope="row"><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>		<td><input name="email" type="text" id="email" value="<?php echo esc_attr($new_user_email); ?>" /></td>	</tr><?php if ( !is_multisite() ) { ?>	<tr class="form-field">		<th scope="row"><label for="first_name"><?php _e('First Name') ?> </label></th>		<td><input name="first_name" type="text" id="first_name" value="<?php echo esc_attr($new_user_firstname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="last_name"><?php _e('Last Name') ?> </label></th>		<td><input name="last_name" type="text" id="last_name" value="<?php echo esc_attr($new_user_lastname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="url"><?php _e('Website') ?></label></th>		<td><input name="url" type="text" id="url" class="code" value="<?php echo esc_attr($new_user_uri); ?>" /></td>	</tr><?php if ( apply_filters('show_password_fields', true) ) : ?>	<tr class="form-field form-required">		<th scope="row"><label for="pass1"><?php _e('Password'); ?> <span class="description"><?php /* translators: password input field */_e('(twice, required)'); ?></span></label></th>		<td><input name="pass1" type="password" id="pass1" autocomplete="off" />		<br />		<input name="pass2" type="password" id="pass2" autocomplete="off" />		<br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>		</td>	</tr>	<tr>		<th scope="row"><label for="send_password"><?php _e('Send Password?') ?></label></th>		<td><label for="send_password"><input type="checkbox" name="send_password" id="send_password" <?php checked($new_user_send_password, true); ?> /> <?php _e('Send this password to the new user by email.'); ?></label></td>	</tr><?php endif; ?><?php } // !is_multisite ?>	<tr class="form-field">		<th scope="row"><label for="role"><?php _e('Role'); ?></label></th>		<td><select name="role" id="role">			<?php			if ( !$new_user_role )				$new_user_role = !empty($current_role) ? $current_role : get_option('default_role');			wp_dropdown_roles($new_user_role);			?>			</select>		</td>	</tr>	<?php if ( is_multisite() && is_super_admin() ) { ?>	<tr>		<th scope="row"><label for="noconfirmation"><?php _e('Skip Confirmation Email') ?></label></th>		<td><label for="noconfirmation"><input type="checkbox" name="noconfirmation" id="noconfirmation" value="1" /> <?php _e( 'Site administrators can add a user without sending the confirmation email.' ); ?></label></td>	</tr>	<?php } ?></table><p class="submit">	<input name="adduser" type="submit" id="addusersub" class="button-primary" value="<?php esc_attr_e('Add User') ?>" /></p></form></div><?phpinclude('./admin-footer.php');?>
<?php/** * WordPress Rewrite API * * @package WordPress * @subpackage Rewrite *//** * Add a straight rewrite rule. * * @see WP_Rewrite::add_rule() for long description. * @since 2.1.0 * * @param string $regex Regular Expression to match request against. * @param string $redirect Page to redirect to. * @param string $after Optional, default is 'bottom'. Where to add rule, can also be 'top'. */function add_rewrite_rule($regex, $redirect, $after = 'bottom') {	global $wp_rewrite;	$wp_rewrite->add_rule($regex, $redirect, $after);}/** * Add a new tag (like %postname%). * * Warning: you must call this on init or earlier, otherwise the query var * addition stuff won't work. * * @since 2.1.0 * * @param string $tagname * @param string $regex */function add_rewrite_tag($tagname, $regex) {	//validation	if ( strlen($tagname) < 3 || $tagname{0} != '%' || $tagname{strlen($tagname)-1} != '%' )		return;	$qv = trim($tagname, '%');	global $wp_rewrite, $wp;	$wp->add_query_var($qv);	$wp_rewrite->add_rewrite_tag($tagname, $regex, $qv . '=');}/** * Add permalink structure. * * @see WP_Rewrite::add_permastruct() * @since 3.0.0 * * @param string $name Name for permalink structure. * @param string $struct Permalink structure. * @param bool $with_front Prepend front base to permalink structure. */function add_permastruct( $name, $struct, $with_front = true, $ep_mask = EP_NONE ) {	global $wp_rewrite;	return $wp_rewrite->add_permastruct( $name, $struct, $with_front, $ep_mask );}/** * Add a new feed type like /atom1/. * * @since 2.1.0 * * @param string $feedname * @param callback $function Callback to run on feed display. * @return string Feed action name. */function add_feed($feedname, $function) {	global $wp_rewrite;	if ( ! in_array($feedname, $wp_rewrite->feeds) ) //override the file if it is		$wp_rewrite->feeds[] = $feedname;	$hook = 'do_feed_' . $feedname;	// Remove default function hook	remove_action($hook, $hook, 10, 1);	add_action($hook, $function, 10, 1);	return $hook;}/** * Remove rewrite rules and then recreate rewrite rules. * * @see WP_Rewrite::flush_rules() * @since 3.0.0 * * @param bool $hard Whether to update .htaccess (hard flush) or just update * 	rewrite_rules transient (soft flush). Default is true (hard). */function flush_rewrite_rules( $hard = true ) {	global $wp_rewrite;	$wp_rewrite->flush_rules( $hard );}//pseudo-places/** * Endpoint Mask for default, which is nothing. * * @since 2.1.0 */define('EP_NONE', 0);/** * Endpoint Mask for Permalink. * * @since 2.1.0 */define('EP_PERMALINK', 1);/** * Endpoint Mask for Attachment. * * @since 2.1.0 */define('EP_ATTACHMENT', 2);/** * Endpoint Mask for date. * * @since 2.1.0 */define('EP_DATE', 4);/** * Endpoint Mask for year * * @since 2.1.0 */define('EP_YEAR', 8);/** * Endpoint Mask for month. * * @since 2.1.0 */define('EP_MONTH', 16);/** * Endpoint Mask for day. * * @since 2.1.0 */define('EP_DAY', 32);/** * Endpoint Mask for root. * * @since 2.1.0 */define('EP_ROOT', 64);/** * Endpoint Mask for comments. * * @since 2.1.0 */define('EP_COMMENTS', 128);/** * Endpoint Mask for searches. * * @since 2.1.0 */define('EP_SEARCH', 256);/** * Endpoint Mask for categories. * * @since 2.1.0 */define('EP_CATEGORIES', 512);/** * Endpoint Mask for tags. * * @since 2.3.0 */define('EP_TAGS', 1024);/** * Endpoint Mask for authors. * * @since 2.1.0 */define('EP_AUTHORS', 2048);/** * Endpoint Mask for pages. * * @since 2.1.0 */define('EP_PAGES', 4096);/** * Endpoint Mask for everything. * * @since 2.1.0 */define('EP_ALL', 8191);/** * Add an endpoint, like /trackback/. * * The endpoints are added to the end of the request. So a request matching * "/2008/10/14/my_post/myep/", the endpoint will be "/myep/". * * Be sure to flush the rewrite rules (wp_rewrite->flush()) when your plugin gets * activated (register_activation_hook()) and deactivated (register_deactivation_hook()) * * @since 2.1.0 * @see WP_Rewrite::add_endpoint() Parameters and more description. * @uses $wp_rewrite * * @param unknown_type $name * @param unknown_type $places */function add_rewrite_endpoint($name, $places) {	global $wp_rewrite;	$wp_rewrite->add_endpoint($name, $places);}/** * Filter the URL base for taxonomies. * * To remove any manually prepended /index.php/. * * @access private * @since 2.6.0 * * @param string $base The taxonomy base that we're going to filter * @return string */function _wp_filter_taxonomy_base( $base ) {	if ( !empty( $base ) ) {		$base = preg_replace( '|^/index\.php/|', '', $base );		$base = trim( $base, '/' );	}	return $base;}/** * Examine a url and try to determine the post ID it represents. * * Checks are supposedly from the hosted site blog. * * @since 1.0.0 * * @param string $url Permalink to check. * @return int Post ID, or 0 on failure. */function url_to_postid($url) {	global $wp_rewrite;	$url = apply_filters('url_to_postid', $url);	// First, check to see if there is a 'p=N' or 'page_id=N' to match against	if ( preg_match('#[?&](p|page_id|attachment_id)=(\d+)#', $url, $values) )	{		$id = absint($values[2]);		if ( $id )			return $id;	}	// Check to see if we are using rewrite rules	$rewrite = $wp_rewrite->wp_rewrite_rules();	// Not using rewrite rules, and 'p=N' and 'page_id=N' methods failed, so we're out of options	if ( empty($rewrite) )		return 0;	// $url cleanup by Mark Jaquith	// This fixes things like #anchors, ?query=strings, missing 'www.',	// added 'www.', or added 'index.php/' that will mess up our WP_Query	// and return a false negative	// Get rid of the #anchor	$url_split = explode('#', $url);	$url = $url_split[0];	// Get rid of URL ?query=string	$url_split = explode('?', $url);	$url = $url_split[0];	// Add 'www.' if it is absent and should be there	if ( false !== strpos(home_url(), '://www.') && false === strpos($url, '://www.') )		$url = str_replace('://', '://www.', $url);	// Strip 'www.' if it is present and shouldn't be	if ( false === strpos(home_url(), '://www.') )		$url = str_replace('://www.', '://', $url);	// Strip 'index.php/' if we're not using path info permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$url = str_replace('index.php/', '', $url);	if ( false !== strpos($url, home_url()) ) {		// Chop off http://domain.com		$url = str_replace(home_url(), '', $url);	} else {		// Chop off /path/to/blog		$home_path = parse_url(home_url());		$home_path = $home_path['path'];		$url = str_replace($home_path, '', $url);	}	// Trim leading and lagging slashes	$url = trim($url, '/');	$request = $url;	// Done with cleanup	// Look for matches.	$request_match = $request;	foreach ( (array)$rewrite as $match => $query) {		// If the requesting file is the anchor of the match, prepend it		// to the path info.		if ( !empty($url) && ($url != $request) && (strpos($match, $url) === 0) )			$request_match = $url . '/' . $request;		if ( preg_match("!^$match!", $request_match, $matches) ) {			// Got a match.			// Trim the query of everything up to the '?'.			$query = preg_replace("!^.+\?!", '', $query);			// Substitute the substring matches into the query.			$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));			// Filter out non-public query vars			global $wp;			parse_str($query, $query_vars);			$query = array();			foreach ( (array) $query_vars as $key => $value ) {				if ( in_array($key, $wp->public_query_vars) )					$query[$key] = $value;			}			// Do the query			$query = new WP_Query($query);			if ( $query->is_single || $query->is_page )				return $query->post->ID;			else				return 0;		}	}	return 0;}/** * WordPress Rewrite Component. * * The WordPress Rewrite class writes the rewrite module rules to the .htaccess * file. It also handles parsing the request to get the correct setup for the * WordPress Query class. * * The Rewrite along with WP class function as a front controller for WordPress. * You can add rules to trigger your page view and processing using this * component. The full functionality of a front controller does not exist, * meaning you can't define how the template files load based on the rewrite * rules. * * @since 1.5.0 */class WP_Rewrite {	/**	 * Default permalink structure for WordPress.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $permalink_structure;	/**	 * Whether to add trailing slashes.	 *	 * @since 2.2.0	 * @access private	 * @var bool	 */	var $use_trailing_slashes;	/**	 * Customized or default category permalink base ( example.com/xx/tagname ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $category_base;	/**	 * Customized or default tag permalink base ( example.com/xx/tagname ).	 *	 * @since 2.3.0	 * @access private	 * @var string	 */	var $tag_base;	/**	 * Permalink request structure for categories.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $category_structure;	/**	 * Permalink request structure for tags.	 *	 * @since 2.3.0	 * @access private	 * @var string	 */	var $tag_structure;	/**	 * Permalink author request base ( example.com/author/authorname ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $author_base = 'author';	/**	 * Permalink request structure for author pages.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $author_structure;	/**	 * Permalink request structure for dates.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $date_structure;	/**	 * Permalink request structure for pages.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $page_structure;	/**	 * Search permalink base ( example.com/search/query ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $search_base = 'search';	/**	 * Permalink request structure for searches.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $search_structure;	/**	 * Comments permalink base.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $comments_base = 'comments';	/**	 * Feed permalink base.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $feed_base = 'feed';	/**	 * Comments feed request structure permalink.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $comments_feed_structure;	/**	 * Feed request structure permalink.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $feed_structure;	/**	 * Front URL path.	 *	 * The difference between the root property is that WordPress might be	 * located at example/WordPress/index.php, if permalinks are turned off. The	 * WordPress/index.php will be the front portion. If permalinks are turned	 * on, this will most likely be empty or not set.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $front;	/**	 * Root URL path to WordPress (without domain).	 *	 * The difference between front property is that WordPress might be located	 * at example.com/WordPress/. The root is the 'WordPress/' portion.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $root = '';	/**	 * Permalink to the home page.	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $index = 'index.php';	/**	 * Request match string.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $matches = '';	/**	 * Rewrite rules to match against the request to find the redirect or query.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rules;	/**	 * Additional rules added external to the rewrite class.	 *	 * Those not generated by the class, see add_rewrite_rule().	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $extra_rules = array(); //	/**	 * Additional rules that belong at the beginning to match first.	 *	 * Those not generated by the class, see add_rewrite_rule().	 *	 * @since 2.3.0	 * @access private	 * @var array	 */	var $extra_rules_top = array(); //	/**	 * Rules that don't redirect to WP's index.php.	 *	 * These rules are written to the mod_rewrite portion of the .htaccess.	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $non_wp_rules = array(); //	/**	 * Extra permalink structures.	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $extra_permastructs = array();	/**	 * Endpoints permalinks	 *	 * @since unknown	 * @access private	 * @var array	 */	var $endpoints;	/**	 * Whether to write every mod_rewrite rule for WordPress.	 *	 * This is off by default, turning it on might print a lot of rewrite rules	 * to the .htaccess file.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $use_verbose_rules = false;	/**	 * Whether to write every mod_rewrite rule for WordPress pages.	 *	 * @since 2.5.0	 * @access public	 * @var bool	 */	var $use_verbose_page_rules = true;	/**	 * Permalink structure search for preg_replace.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rewritecode =		array(					'%year%',					'%monthnum%',					'%day%',					'%hour%',					'%minute%',					'%second%',					'%postname%',					'%post_id%',					'%category%',					'%tag%',					'%author%',					'%pagename%',					'%search%'					);	/**	 * Preg_replace values for the search, see {@link WP_Rewrite::$rewritecode}.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rewritereplace =		array(					'([0-9]{4})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([^/]+)',					'([0-9]+)',					'(.+?)',					'(.+?)',					'([^/]+)',					'([^/]+?)',					'(.+)'					);	/**	 * Search for the query to look for replacing.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queryreplace =		array (					'year=',					'monthnum=',					'day=',					'hour=',					'minute=',					'second=',					'name=',					'p=',					'category_name=',					'tag=',					'author_name=',					'pagename=',					's='					);	/**	 * Supported default feeds.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $feeds = array ( 'feed', 'rdf', 'rss', 'rss2', 'atom' );	/**	 * Whether permalinks are being used.	 *	 * This can be either rewrite module or permalink in the HTTP query string.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool True, if permalinks are enabled.	 */	function using_permalinks() {		return ! empty($this->permalink_structure);	}	/**	 * Whether permalinks are being used and rewrite module is not enabled.	 *	 * Means that permalink links are enabled and index.php is in the URL.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool	 */	function using_index_permalinks() {		if ( empty($this->permalink_structure) )			return false;		// If the index is not in the permalink, we're using mod_rewrite.		if ( preg_match('#^/*' . $this->index . '#', $this->permalink_structure) )			return true;		return false;	}	/**	 * Whether permalinks are being used and rewrite module is enabled.	 *	 * Using permalinks and index.php is not in the URL.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool	 */	function using_mod_rewrite_permalinks() {		if ( $this->using_permalinks() && ! $this->using_index_permalinks() )			return true;		else			return false;	}	/**	 * Index for matches for usage in preg_*() functions.	 *	 * The format of the string is, with empty matches property value, '$NUM'.	 * The 'NUM' will be replaced with the value in the $number parameter. With	 * the matches property not empty, the value of the returned string will	 * contain that value of the matches property. The format then will be	 * '$MATCHES[NUM]', with MATCHES as the value in the property and NUM the	 * value of the $number parameter.	 *	 * @since 1.5.0	 * @access public	 *	 * @param int $number Index number.	 * @return string	 */	function preg_index($number) {		$match_prefix = '$';		$match_suffix = '';		if ( ! empty($this->matches) ) {			$match_prefix = '$' . $this->matches . '[';			$match_suffix = ']';		}		return "$match_prefix$number$match_suffix";	}	/**	 * Retrieve all page and attachments for pages URIs.	 *	 * The attachments are for those that have pages as parents and will be	 * retrieved.	 *	 * @since 2.5.0	 * @access public	 *	 * @return array Array of page URIs as first element and attachment URIs as second element.	 */	function page_uri_index() {		global $wpdb;		//get pages in order of hierarchy, i.e. children after parents		$posts = get_page_hierarchy($wpdb->get_results("SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_type = 'page'"));		// If we have no pages get out quick		if ( !$posts )			return array( array(), array() );		//now reverse it, because we need parents after children for rewrite rules to work properly		$posts = array_reverse($posts, true);		$page_uris = array();		$page_attachment_uris = array();		foreach ( $posts as $id => $post ) {			// URL => page name			$uri = get_page_uri($id);			$attachments = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_type = 'attachment' AND post_parent = %d", $id ));			if ( !empty($attachments) ) {				foreach ( $attachments as $attachment ) {					$attach_uri = get_page_uri($attachment->ID);					$page_attachment_uris[$attach_uri] = $attachment->ID;				}			}			$page_uris[$uri] = $id;		}		return array( $page_uris, $page_attachment_uris );	}	/**	 * Retrieve all of the rewrite rules for pages.	 *	 * If the 'use_verbose_page_rules' property is false, then there will only	 * be a single rewrite rule for pages for those matching '%pagename%'. With	 * the property set to true, the attachments and the pages will be added for	 * each individual attachment URI and page URI, respectively.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array	 */	function page_rewrite_rules() {		$rewrite_rules = array();		$page_structure = $this->get_page_permastruct();		if ( ! $this->use_verbose_page_rules ) {			$this->add_rewrite_tag('%pagename%', "(.+?)", 'pagename=');			$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			return $rewrite_rules;		}		$page_uris = $this->page_uri_index();		$uris = $page_uris[0];		$attachment_uris = $page_uris[1];		if ( is_array( $attachment_uris ) ) {			foreach ( $attachment_uris as $uri => $pagename ) {				$this->add_rewrite_tag('%pagename%', "($uri)", 'attachment=');				$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			}		}		if ( is_array( $uris ) ) {			foreach ( $uris as $uri => $pagename ) {				$this->add_rewrite_tag('%pagename%', "($uri)", 'pagename=');				$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			}		}		return $rewrite_rules;	}	/**	 * Retrieve date permalink structure, with year, month, and day.	 *	 * The permalink structure for the date, if not set already depends on the	 * permalink structure. It can be one of three formats. The first is year,	 * month, day; the second is day, month, year; and the last format is month,	 * day, year. These are matched against the permalink structure for which	 * one is used. If none matches, then the default will be used, which is	 * year, month, day.	 *	 * Prevents post ID and date permalinks from overlapping. In the case of	 * post_id, the date permalink will be prepended with front permalink with	 * 'date/' before the actual permalink to form the complete date permalink	 * structure.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on no permalink structure. Date permalink structure.	 */	function get_date_permastruct() {		if ( isset($this->date_structure) )			return $this->date_structure;		if ( empty($this->permalink_structure) ) {			$this->date_structure = '';			return false;		}		// The date permalink must have year, month, and day separated by slashes.		$endians = array('%year%/%monthnum%/%day%', '%day%/%monthnum%/%year%', '%monthnum%/%day%/%year%');		$this->date_structure = '';		$date_endian = '';		foreach ( $endians as $endian ) {			if ( false !== strpos($this->permalink_structure, $endian) ) {				$date_endian= $endian;				break;			}		}		if ( empty($date_endian) )			$date_endian = '%year%/%monthnum%/%day%';		// Do not allow the date tags and %post_id% to overlap in the permalink		// structure. If they do, move the date tags to $front/date/.		$front = $this->front;		preg_match_all('/%.+?%/', $this->permalink_structure, $tokens);		$tok_index = 1;		foreach ( (array) $tokens[0] as $token) {			if ( '%post_id%' == $token && ($tok_index <= 3) ) {				$front = $front . 'date/';				break;			}			$tok_index++;		}		$this->date_structure = $front . $date_endian;		return $this->date_structure;	}	/**	 * Retrieve the year permalink structure without month and day.	 *	 * Gets the date permalink structure and strips out the month and day	 * permalink structures.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year structure on success.	 */	function get_year_permastruct() {		$structure = $this->get_date_permastruct($this->permalink_structure);		if ( empty($structure) )			return false;		$structure = str_replace('%monthnum%', '', $structure);		$structure = str_replace('%day%', '', $structure);		$structure = preg_replace('#/+#', '/', $structure);		return $structure;	}	/**	 * Retrieve the month permalink structure without day and with year.	 *	 * Gets the date permalink structure and strips out the day permalink	 * structures. Keeps the year permalink structure.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year/Month structure on success.	 */	function get_month_permastruct() {		$structure = $this->get_date_permastruct($this->permalink_structure);		if ( empty($structure) )			return false;		$structure = str_replace('%day%', '', $structure);		$structure = preg_replace('#/+#', '/', $structure);		return $structure;	}	/**	 * Retrieve the day permalink structure with month and year.	 *	 * Keeps date permalink structure with all year, month, and day.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year/Month/Day structure on success.	 */	function get_day_permastruct() {		return $this->get_date_permastruct($this->permalink_structure);	}	/**	 * Retrieve the permalink structure for categories.	 *	 * If the category_base property has no value, then the category structure	 * will have the front property value, followed by 'category', and finally	 * '%category%'. If it does, then the root property will be used, along with	 * the category_base property value.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Category permalink structure.	 */	function get_category_permastruct() {		if ( isset($this->category_structure) )			return $this->category_structure;		if ( empty($this->permalink_structure) ) {			$this->category_structure = '';			return false;		}		if ( empty($this->category_base) )			$this->category_structure = trailingslashit( $this->front . 'category' );		else			$this->category_structure = trailingslashit( '/' . $this->root . $this->category_base );		$this->category_structure .= '%category%';		return $this->category_structure;	}	/**	 * Retrieve the permalink structure for tags.	 *	 * If the tag_base property has no value, then the tag structure will have	 * the front property value, followed by 'tag', and finally '%tag%'. If it	 * does, then the root property will be used, along with the tag_base	 * property value.	 *	 * @since 2.3.0	 * @access public	 *	 * @return bool|string False on failure. Tag permalink structure.	 */	function get_tag_permastruct() {		if ( isset($this->tag_structure) )			return $this->tag_structure;		if ( empty($this->permalink_structure) ) {			$this->tag_structure = '';			return false;		}		if ( empty($this->tag_base) )			$this->tag_structure = trailingslashit( $this->front . 'tag' );		else			$this->tag_structure = trailingslashit( '/' . $this->root . $this->tag_base );		$this->tag_structure .= '%tag%';		return $this->tag_structure;	}	/**	 * Retrieve extra permalink structure by name.	 *	 * @since unknown	 * @access public	 *	 * @param string $name Permalink structure name.	 * @return string|bool False if not found. Permalink structure string.	 */	function get_extra_permastruct($name) {		if ( empty($this->permalink_structure) )			return false;		if ( isset($this->extra_permastructs[$name]) )			return $this->extra_permastructs[$name][0];		return false;	}	/**	 * Retrieve the author permalink structure.	 *	 * The permalink structure is front property, author base, and finally	 * '/%author%'. Will set the author_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_author_permastruct() {		if ( isset($this->author_structure) )			return $this->author_structure;		if ( empty($this->permalink_structure) ) {			$this->author_structure = '';			return false;		}		$this->author_structure = $this->front . $this->author_base . '/%author%';		return $this->author_structure;	}	/**	 * Retrieve the search permalink structure.	 *	 * The permalink structure is root property, search base, and finally	 * '/%search%'. Will set the search_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_search_permastruct() {		if ( isset($this->search_structure) )			return $this->search_structure;		if ( empty($this->permalink_structure) ) {			$this->search_structure = '';			return false;		}		$this->search_structure = $this->root . $this->search_base . '/%search%';		return $this->search_structure;	}	/**	 * Retrieve the page permalink structure.	 *	 * The permalink structure is root property, and '%pagename%'. Will set the	 * page_structure property and then return it without attempting to set the	 * value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_page_permastruct() {		if ( isset($this->page_structure) )			return $this->page_structure;		if (empty($this->permalink_structure)) {			$this->page_structure = '';			return false;		}		$this->page_structure = $this->root . '%pagename%';		return $this->page_structure;	}	/**	 * Retrieve the feed permalink structure.	 *	 * The permalink structure is root property, feed base, and finally	 * '/%feed%'. Will set the feed_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_feed_permastruct() {		if ( isset($this->feed_structure) )			return $this->feed_structure;		if ( empty($this->permalink_structure) ) {			$this->feed_structure = '';			return false;		}		$this->feed_structure = $this->root . $this->feed_base . '/%feed%';		return $this->feed_structure;	}	/**	 * Retrieve the comment feed permalink structure.	 *	 * The permalink structure is root property, comment base property, feed	 * base and finally '/%feed%'. Will set the comment_feed_structure property	 * and then return it without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_comment_feed_permastruct() {		if ( isset($this->comment_feed_structure) )			return $this->comment_feed_structure;		if (empty($this->permalink_structure)) {			$this->comment_feed_structure = '';			return false;		}		$this->comment_feed_structure = $this->root . $this->comments_base . '/' . $this->feed_base . '/%feed%';		return $this->comment_feed_structure;	}	/**	 * Append or update tag, pattern, and query for replacement.	 *	 * If the tag already exists, replace the existing pattern and query for	 * that tag, otherwise add the new tag, pattern, and query to the end of the	 * arrays.	 *	 * @internal What is the purpose of this function again? Need to finish long	 *           description.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $tag Append tag to rewritecode property array.	 * @param string $pattern Append pattern to rewritereplace property array.	 * @param string $query Append query to queryreplace property array.	 */	function add_rewrite_tag($tag, $pattern, $query) {		$position = array_search($tag, $this->rewritecode);		if ( false !== $position && null !== $position ) {			$this->rewritereplace[$position] = $pattern;			$this->queryreplace[$position] = $query;		} else {			$this->rewritecode[] = $tag;			$this->rewritereplace[] = $pattern;			$this->queryreplace[] = $query;		}	}	/**	 * Generate the rules from permalink structure.	 *	 * The main WP_Rewrite function for building the rewrite rule list. The	 * contents of the function is a mix of black magic and regular expressions,	 * so best just ignore the contents and move to the parameters.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure The permalink structure.	 * @param int $ep_mask Optional, default is EP_NONE. Endpoint constant, see EP_* constants.	 * @param bool $paged Optional, default is true. Whether permalink request is paged.	 * @param bool $feed Optional, default is true. Whether for feed.	 * @param bool $forcomments Optional, default is false. Whether for comments.	 * @param bool $walk_dirs Optional, default is true. Whether to create list of directories to walk over.	 * @param bool $endpoints Optional, default is true. Whether endpoints are enabled.	 * @return array Rewrite rule list.	 */	function generate_rewrite_rules($permalink_structure, $ep_mask = EP_NONE, $paged = true, $feed = true, $forcomments = false, $walk_dirs = true, $endpoints = true) {		//build a regex to match the feed section of URLs, something like (feed|atom|rss|rss2)/?		$feedregex2 = '';		foreach ( (array) $this->feeds as $feed_name)			$feedregex2 .= $feed_name . '|';		$feedregex2 = '(' . trim($feedregex2, '|') .  ')/?$';		//$feedregex is identical but with /feed/ added on as well, so URLs like <permalink>/feed/atom		//and <permalink>/atom are both possible		$feedregex = $this->feed_base  . '/' . $feedregex2;		//build a regex to match the trackback and page/xx parts of URLs		$trackbackregex = 'trackback/?$';		$pageregex = 'page/?([0-9]{1,})/?$';		$commentregex = 'comment-page-([0-9]{1,})/?$';		//build up an array of endpoint regexes to append => queries to append		if ( $endpoints ) {			$ep_query_append = array ();			foreach ( (array) $this->endpoints as $endpoint) {				//match everything after the endpoint name, but allow for nothing to appear there				$epmatch = $endpoint[1] . '(/(.*))?/?$';				//this will be appended on to the rest of the query for each dir				$epquery = '&' . $endpoint[1] . '=';				$ep_query_append[$epmatch] = array ( $endpoint[0], $epquery );			}		}		//get everything up to the first rewrite tag		$front = substr($permalink_structure, 0, strpos($permalink_structure, '%'));		//build an array of the tags (note that said array ends up being in $tokens[0])		preg_match_all('/%.+?%/', $permalink_structure, $tokens);		$num_tokens = count($tokens[0]);		$index = $this->index; //probably 'index.php'		$feedindex = $index;		$trackbackindex = $index;		//build a list from the rewritecode and queryreplace arrays, that will look something like		//tagname=$matches[i] where i is the current $i		for ( $i = 0; $i < $num_tokens; ++$i ) {			if ( 0 < $i )				$queries[$i] = $queries[$i - 1] . '&';			else				$queries[$i] = '';			$query_token = str_replace($this->rewritecode, $this->queryreplace, $tokens[0][$i]) . $this->preg_index($i+1);			$queries[$i] .= $query_token;		}		//get the structure, minus any cruft (stuff that isn't tags) at the front		$structure = $permalink_structure;		if ( $front != '/' )			$structure = str_replace($front, '', $structure);		//create a list of dirs to walk over, making rewrite rules for each level		//so for example, a $structure of /%year%/%month%/%postname% would create		//rewrite rules for /%year%/, /%year%/%month%/ and /%year%/%month%/%postname%		$structure = trim($structure, '/');		$dirs = $walk_dirs ? explode('/', $structure) : array( $structure );		$num_dirs = count($dirs);		//strip slashes from the front of $front		$front = preg_replace('|^/+|', '', $front);		//the main workhorse loop		$post_rewrite = array();		$struct = $front;		for ( $j = 0; $j < $num_dirs; ++$j ) {			//get the struct for this dir, and trim slashes off the front			$struct .= $dirs[$j] . '/'; //accumulate. see comment near explode('/', $structure) above			$struct = ltrim($struct, '/');			//replace tags with regexes			$match = str_replace($this->rewritecode, $this->rewritereplace, $struct);			//make a list of tags, and store how many there are in $num_toks			$num_toks = preg_match_all('/%.+?%/', $struct, $toks);			//get the 'tagname=$matches[i]'			$query = ( isset($queries) && is_array($queries) ) ? $queries[$num_toks - 1] : '';			//set up $ep_mask_specific which is used to match more specific URL types			switch ( $dirs[$j] ) {				case '%year%':					$ep_mask_specific = EP_YEAR;					break;				case '%monthnum%':					$ep_mask_specific = EP_MONTH;					break;				case '%day%':					$ep_mask_specific = EP_DAY;					break;				default:					$ep_mask_specific = EP_NONE;			}			//create query for /page/xx			$pagematch = $match . $pageregex;			$pagequery = $index . '?' . $query . '&paged=' . $this->preg_index($num_toks + 1);			//create query for /comment-page-xx			$commentmatch = $match . $commentregex;			$commentquery = $index . '?' . $query . '&cpage=' . $this->preg_index($num_toks + 1);			if ( get_option('page_on_front') ) {				//create query for Root /comment-page-xx				$rootcommentmatch = $match . $commentregex;				$rootcommentquery = $index . '?' . $query . '&page_id=' . get_option('page_on_front') . '&cpage=' . $this->preg_index($num_toks + 1);			}			//create query for /feed/(feed|atom|rss|rss2|rdf)			$feedmatch = $match . $feedregex;			$feedquery = $feedindex . '?' . $query . '&feed=' . $this->preg_index($num_toks + 1);			//create query for /(feed|atom|rss|rss2|rdf) (see comment near creation of $feedregex)			$feedmatch2 = $match . $feedregex2;			$feedquery2 = $feedindex . '?' . $query . '&feed=' . $this->preg_index($num_toks + 1);			//if asked to, turn the feed queries into comment feed ones			if ( $forcomments ) {				$feedquery .= '&withcomments=1';				$feedquery2 .= '&withcomments=1';			}			//start creating the array of rewrites for this dir			$rewrite = array();			if ( $feed ) //...adding on /feed/ regexes => queries				$rewrite = array($feedmatch => $feedquery, $feedmatch2 => $feedquery2);			if ( $paged ) //...and /page/xx ones				$rewrite = array_merge($rewrite, array($pagematch => $pagequery));			//only on pages with comments add ../comment-page-xx/			if ( EP_PAGES & $ep_mask || EP_PERMALINK & $ep_mask )				$rewrite = array_merge($rewrite, array($commentmatch => $commentquery));			else if ( EP_ROOT & $ep_mask && get_option('page_on_front') )				$rewrite = array_merge($rewrite, array($rootcommentmatch => $rootcommentquery));			//do endpoints			if ( $endpoints ) {				foreach ( (array) $ep_query_append as $regex => $ep) {					//add the endpoints on if the mask fits					if ( $ep[0] & $ep_mask || $ep[0] & $ep_mask_specific )						$rewrite[$match . $regex] = $index . '?' . $query . $ep[1] . $this->preg_index($num_toks + 2);				}			}			//if we've got some tags in this dir			if ( $num_toks ) {				$post = false;				$page = false;				//check to see if this dir is permalink-level: i.e. the structure specifies an				//individual post. Do this by checking it contains at least one of 1) post name,				//2) post ID, 3) page name, 4) timestamp (year, month, day, hour, second and				//minute all present). Set these flags now as we need them for the endpoints.				if ( strpos($struct, '%postname%') !== false						|| strpos($struct, '%post_id%') !== false						|| strpos($struct, '%pagename%') !== false						|| (strpos($struct, '%year%') !== false && strpos($struct, '%monthnum%') !== false && strpos($struct, '%day%') !== false && strpos($struct, '%hour%') !== false && strpos($struct, '%minute%') !== false && strpos($struct, '%second%') !== false)						) {					$post = true;					if ( strpos($struct, '%pagename%') !== false )						$page = true;				}				if ( ! $post ) {					// For custom post types, we need to add on endpoints as well.					foreach ( get_post_types( array('_builtin' => false ) ) as $ptype ) {						if ( strpos($struct, "%$ptype%") !== false ) {							$post = true;							$page = is_post_type_hierarchical( $ptype ); // This is for page style attachment url's							break;						}					}				}				//if we're creating rules for a permalink, do all the endpoints like attachments etc				if ( $post ) {					//create query and regex for trackback					$trackbackmatch = $match . $trackbackregex;					$trackbackquery = $trackbackindex . '?' . $query . '&tb=1';					//trim slashes from the end of the regex for this dir					$match = rtrim($match, '/');					//get rid of brackets					$submatchbase = str_replace( array('(', ')'), '', $match);					//add a rule for at attachments, which take the form of <permalink>/some-text					$sub1 = $submatchbase . '/([^/]+)/';					$sub1tb = $sub1 . $trackbackregex; //add trackback regex <permalink>/trackback/...					$sub1feed = $sub1 . $feedregex; //and <permalink>/feed/(atom|...)					$sub1feed2 = $sub1 . $feedregex2; //and <permalink>/(feed|atom...)					$sub1comment = $sub1 . $commentregex; //and <permalink>/comment-page-xx					//add an ? as we don't have to match that last slash, and finally a $ so we					//match to the end of the URL					//add another rule to match attachments in the explicit form:					//<permalink>/attachment/some-text					$sub2 = $submatchbase . '/attachment/([^/]+)/';					$sub2tb = $sub2 . $trackbackregex; //and add trackbacks <permalink>/attachment/trackback					$sub2feed = $sub2 . $feedregex;    //feeds, <permalink>/attachment/feed/(atom|...)					$sub2feed2 = $sub2 . $feedregex2;  //and feeds again on to this <permalink>/attachment/(feed|atom...)					$sub2comment = $sub2 . $commentregex; //and <permalink>/comment-page-xx					//create queries for these extra tag-ons we've just dealt with					$subquery = $index . '?attachment=' . $this->preg_index(1);					$subtbquery = $subquery . '&tb=1';					$subfeedquery = $subquery . '&feed=' . $this->preg_index(2);					$subcommentquery = $subquery . '&cpage=' . $this->preg_index(2);					//do endpoints for attachments					if ( !empty($endpoints) ) {						foreach ( (array) $ep_query_append as $regex => $ep ) {							if ( $ep[0] & EP_ATTACHMENT ) {								$rewrite[$sub1 . $regex] = $subquery . $ep[1] . $this->preg_index(2);								$rewrite[$sub2 . $regex] = $subquery . $ep[1] . $this->preg_index(2);							}						}					}					//now we've finished with endpoints, finish off the $sub1 and $sub2 matches					$sub1 .= '?$';					$sub2 .= '?$';					//allow URLs like <permalink>/2 for <permalink>/page/2					$match = $match . '(/[0-9]+)?/?$';					$query = $index . '?' . $query . '&page=' . $this->preg_index($num_toks + 1);				} else { //not matching a permalink so this is a lot simpler					//close the match and finalise the query					$match .= '?$';					$query = $index . '?' . $query;				}				//create the final array for this dir by joining the $rewrite array (which currently				//only contains rules/queries for trackback, pages etc) to the main regex/query for				//this dir				$rewrite = array_merge($rewrite, array($match => $query));				//if we're matching a permalink, add those extras (attachments etc) on				if ( $post ) {					//add trackback					$rewrite = array_merge(array($trackbackmatch => $trackbackquery), $rewrite);					//add regexes/queries for attachments, attachment trackbacks and so on					if ( ! $page ) //require <permalink>/attachment/stuff form for pages because of confusion with subpages						$rewrite = array_merge($rewrite, array($sub1 => $subquery, $sub1tb => $subtbquery, $sub1feed => $subfeedquery, $sub1feed2 => $subfeedquery, $sub1comment => $subcommentquery));					$rewrite = array_merge(array($sub2 => $subquery, $sub2tb => $subtbquery, $sub2feed => $subfeedquery, $sub2feed2 => $subfeedquery, $sub2comment => $subcommentquery), $rewrite);				}			} //if($num_toks)			//add the rules for this dir to the accumulating $post_rewrite			$post_rewrite = array_merge($rewrite, $post_rewrite);		} //foreach ($dir)		return $post_rewrite; //the finished rules. phew!	}	/**	 * Generate Rewrite rules with permalink structure and walking directory only.	 *	 * Shorten version of {@link WP_Rewrite::generate_rewrite_rules()} that	 * allows for shorter list of parameters. See the method for longer	 * description of what generating rewrite rules does.	 *	 * @uses WP_Rewrite::generate_rewrite_rules() See for long description and rest of parameters.	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure The permalink structure to generate rules.	 * @param bool $walk_dirs Optional, default is false. Whether to create list of directories to walk over.	 * @return array	 */	function generate_rewrite_rule($permalink_structure, $walk_dirs = false) {		return $this->generate_rewrite_rules($permalink_structure, EP_NONE, false, false, false, $walk_dirs);	}	/**	 * Construct rewrite matches and queries from permalink structure.	 *	 * Runs the action 'generate_rewrite_rules' with the parameter that is an	 * reference to the current WP_Rewrite instance to further manipulate the	 * permalink structures and rewrite rules. Runs the 'rewrite_rules_array'	 * filter on the full rewrite rule array.	 *	 * There are two ways to manipulate the rewrite rules, one by hooking into	 * the 'generate_rewrite_rules' action and gaining full control of the	 * object or just manipulating the rewrite rule array before it is passed	 * from the function.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array An associate array of matches and queries.	 */	function rewrite_rules() {		$rewrite = array();		if ( empty($this->permalink_structure) )			return $rewrite;		// robots.txt -only if installed at the root		$home_path = parse_url( home_url() );		$robots_rewrite = ( empty( $home_path['path'] ) || '/' == $home_path['path'] ) ? array( 'robots\.txt$' => $this->index . '?robots=1' ) : array();		// Default Feed rules - These are require to allow for the direct access files to work with permalink structure starting with %category%		$default_feeds = array(	'.*wp-atom.php$'	=>	$this->index . '?feed=atom',								'.*wp-rdf.php$'		=>	$this->index . '?feed=rdf',								'.*wp-rss.php$'		=>	$this->index . '?feed=rss',								'.*wp-rss2.php$'	=>	$this->index . '?feed=rss2',								'.*wp-feed.php$'	=>	$this->index . '?feed=feed',								'.*wp-commentsrss2.php$'	=>	$this->index . '?feed=rss2&withcomments=1');		// Registration rules		$registration_pages = array();		if ( is_multisite() && is_main_site() ) {			$registration_pages['.*wp-signup.php$'] = $this->index . '?signup=true';			$registration_pages['.*wp-activate.php$'] = $this->index . '?activate=true';		}		// Post		$post_rewrite = $this->generate_rewrite_rules($this->permalink_structure, EP_PERMALINK);		$post_rewrite = apply_filters('post_rewrite_rules', $post_rewrite);		// Date		$date_rewrite = $this->generate_rewrite_rules($this->get_date_permastruct(), EP_DATE);		$date_rewrite = apply_filters('date_rewrite_rules', $date_rewrite);		// Root		$root_rewrite = $this->generate_rewrite_rules($this->root . '/', EP_ROOT);		$root_rewrite = apply_filters('root_rewrite_rules', $root_rewrite);		// Comments		$comments_rewrite = $this->generate_rewrite_rules($this->root . $this->comments_base, EP_COMMENTS, true, true, true, false);		$comments_rewrite = apply_filters('comments_rewrite_rules', $comments_rewrite);		// Search		$search_structure = $this->get_search_permastruct();		$search_rewrite = $this->generate_rewrite_rules($search_structure, EP_SEARCH);		$search_rewrite = apply_filters('search_rewrite_rules', $search_rewrite);		// Categories		$category_rewrite = $this->generate_rewrite_rules($this->get_category_permastruct(), EP_CATEGORIES);		$category_rewrite = apply_filters('category_rewrite_rules', $category_rewrite);		// Tags		$tag_rewrite = $this->generate_rewrite_rules($this->get_tag_permastruct(), EP_TAGS);		$tag_rewrite = apply_filters('tag_rewrite_rules', $tag_rewrite);		// Authors		$author_rewrite = $this->generate_rewrite_rules($this->get_author_permastruct(), EP_AUTHORS);		$author_rewrite = apply_filters('author_rewrite_rules', $author_rewrite);		// Pages		$page_rewrite = $this->page_rewrite_rules();		$page_rewrite = apply_filters('page_rewrite_rules', $page_rewrite);		// Extra permastructs		foreach ( $this->extra_permastructs as $permastruct ) {			if ( is_array($permastruct) )				$this->extra_rules_top = array_merge($this->extra_rules_top, $this->generate_rewrite_rules($permastruct[0], $permastruct[1]));			else				$this->extra_rules_top = array_merge($this->extra_rules_top, $this->generate_rewrite_rules($permastruct, EP_NONE));		}		// Put them together.		if ( $this->use_verbose_page_rules )			$this->rules = array_merge($this->extra_rules_top, $robots_rewrite, $default_feeds, $registration_pages, $page_rewrite, $root_rewrite, $comments_rewrite, $search_rewrite, $category_rewrite, $tag_rewrite, $author_rewrite, $date_rewrite, $post_rewrite, $this->extra_rules);		else			$this->rules = array_merge($this->extra_rules_top, $robots_rewrite, $default_feeds, $registration_pages, $root_rewrite, $comments_rewrite, $search_rewrite, $category_rewrite, $tag_rewrite, $author_rewrite, $date_rewrite, $post_rewrite, $page_rewrite, $this->extra_rules);		do_action_ref_array('generate_rewrite_rules', array(&$this));		$this->rules = apply_filters('rewrite_rules_array', $this->rules);		return $this->rules;	}	/**	 * Retrieve the rewrite rules.	 *	 * The difference between this method and {@link	 * WP_Rewrite::rewrite_rules()} is that this method stores the rewrite rules	 * in the 'rewrite_rules' option and retrieves it. This prevents having to	 * process all of the permalinks to get the rewrite rules in the form of	 * caching.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array Rewrite rules.	 */	function wp_rewrite_rules() {		$this->rules = get_option('rewrite_rules');		if ( empty($this->rules) ) {			$this->matches = 'matches';			$this->rewrite_rules();			update_option('rewrite_rules', $this->rules);		}		return $this->rules;	}	/**	 * Retrieve mod_rewrite formatted rewrite rules to write to .htaccess.	 *	 * Does not actually write to the .htaccess file, but creates the rules for	 * the process that will.	 *	 * Will add  the non_wp_rules property rules to the .htaccess file before	 * the WordPress rewrite rules one.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string	 */	function mod_rewrite_rules() {		if ( ! $this->using_permalinks() )			return '';		$site_root = parse_url(get_option('siteurl'));		if ( isset( $site_root['path'] ) )			$site_root = trailingslashit($site_root['path']);		$home_root = parse_url(home_url());		if ( isset( $home_root['path'] ) )			$home_root = trailingslashit($home_root['path']);		else			$home_root = '/';		$rules = "<IfModule mod_rewrite.c>\n";		$rules .= "RewriteEngine On\n";		$rules .= "RewriteBase $home_root\n";		$rules .= "RewriteRule ^index\.php$ - [L]\n"; // Prevent -f checks on index.php.		//add in the rules that don't redirect to WP's index.php (and thus shouldn't be handled by WP at all)		foreach ( (array) $this->non_wp_rules as $match => $query) {			// Apache 1.3 does not support the reluctant (non-greedy) modifier.			$match = str_replace('.+?', '.+', $match);			// If the match is unanchored and greedy, prepend rewrite conditions			// to avoid infinite redirects and eclipsing of real files.			//if ($match == '(.+)/?$' || $match == '([^/]+)/?$' ) {				//nada.			//}			$rules .= 'RewriteRule ^' . $match . ' ' . $home_root . $query . " [QSA,L]\n";		}		if ( $this->use_verbose_rules ) {			$this->matches = '';			$rewrite = $this->rewrite_rules();			$num_rules = count($rewrite);			$rules .= "RewriteCond %{REQUEST_FILENAME} -f [OR]\n" .				"RewriteCond %{REQUEST_FILENAME} -d\n" .				"RewriteRule ^.*$ - [S=$num_rules]\n";			foreach ( (array) $rewrite as $match => $query) {				// Apache 1.3 does not support the reluctant (non-greedy) modifier.				$match = str_replace('.+?', '.+', $match);				// If the match is unanchored and greedy, prepend rewrite conditions				// to avoid infinite redirects and eclipsing of real files.				//if ($match == '(.+)/?$' || $match == '([^/]+)/?$' ) {					//nada.				//}				if ( strpos($query, $this->index) !== false )					$rules .= 'RewriteRule ^' . $match . ' ' . $home_root . $query . " [QSA,L]\n";				else					$rules .= 'RewriteRule ^' . $match . ' ' . $site_root . $query . " [QSA,L]\n";			}		} else {			$rules .= "RewriteCond %{REQUEST_FILENAME} !-f\n" .				"RewriteCond %{REQUEST_FILENAME} !-d\n" .				"RewriteRule . {$home_root}{$this->index} [L]\n";		}		$rules .= "</IfModule>\n";		$rules = apply_filters('mod_rewrite_rules', $rules);		$rules = apply_filters('rewrite_rules', $rules);  // Deprecated		return $rules;	}	/**	 * Retrieve IIS7 URL Rewrite formatted rewrite rules to write to web.config file.	 *	 * Does not actually write to the web.config file, but creates the rules for	 * the process that will.	 *	 * @since 2.8.0	 * @access public	 *	 * @return string	 */	function iis7_url_rewrite_rules( $add_parent_tags = false ) {		if ( ! $this->using_permalinks() )			return '';		$rules = '';		if ( $add_parent_tags ) {			$rules .= '<configuration>	<system.webServer>		<rewrite>			<rules>';		}		if ( !is_multisite() ) {			$rules .= '				<rule name="wordpress" patternSyntax="Wildcard">					<match url="*" />						<conditions>							<add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />							<add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />						</conditions>					<action type="Rewrite" url="index.php" />				</rule>';		} else {			if (is_subdomain_install()) {				$rules .= '				<rule name="wordpress - Rule 1" stopProcessing="true">					<match url="^index\.php$" ignoreCase="false" />					<action type="None" />				</rule>				<rule name="wordpress - Rule 2" stopProcessing="true">					<match url="^files/(.+)" ignoreCase="false" />					<action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />				</rule>				<rule name="wordpress - Rule 3" stopProcessing="true">					<match url="^" ignoreCase="false" />					<conditions logicalGrouping="MatchAny">						<add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />						<add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />					</conditions>					<action type="None" />				</rule>				<rule name="wordpress - Rule 4" stopProcessing="true">					<match url="." ignoreCase="false" />					<action type="Rewrite" url="index.php" />				</rule>';			} else {				$rules .= '				<rule name="wordpress - Rule 1" stopProcessing="true">					<match url="^index\.php$" ignoreCase="false" />					<action type="None" />				</rule>				<rule name="wordpress - Rule 2" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />					<action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />				</rule>				<rule name="wordpress - Rule 3" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />					<action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />				</rule>				<rule name="wordpress - Rule 4" stopProcessing="true">					<match url="^" ignoreCase="false" />					<conditions logicalGrouping="MatchAny">						<add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />						<add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />					</conditions>					<action type="None" />				</rule>				<rule name="wordpress - Rule 5" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />					<action type="Rewrite" url="{R:2}" />				</rule>				<rule name="wordpress - Rule 6" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />					<action type="Rewrite" url="{R:2}" />				</rule>				<rule name="wordpress - Rule 7" stopProcessing="true">					<match url="." ignoreCase="false" />					<action type="Rewrite" url="index.php" />				</rule>';			}		}		if ( $add_parent_tags ) {			$rules .= '			</rules>		</rewrite>	</system.webServer></configuration>';		}		$rules = apply_filters('iis7_url_rewrite_rules', $rules);		return $rules;	}	/**	 * Add a straight rewrite rule.	 *	 * Any value in the $after parameter that isn't 'bottom' will be placed at	 * the top of the rules.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $regex Regular expression to match against request.	 * @param string $redirect URL regex redirects to when regex matches request.	 * @param string $after Optional, default is bottom. Location to place rule.	 */	function add_rule($regex, $redirect, $after = 'bottom') {		//get everything up to the first ?		$index = (strpos($redirect, '?') == false ? strlen($redirect) : strpos($redirect, '?'));		$front = substr($redirect, 0, $index);		if ( $front != $this->index ) { //it doesn't redirect to WP's index.php			$this->add_external_rule($regex, $redirect);		} else {			if ( 'bottom' == $after)				$this->extra_rules = array_merge($this->extra_rules, array($regex => $redirect));			else				$this->extra_rules_top = array_merge($this->extra_rules_top, array($regex => $redirect));			//$this->extra_rules[$regex] = $redirect;		}	}	/**	 * Add a rule that doesn't redirect to index.php.	 *	 * Can redirect to any place.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $regex Regular expression to match against request.	 * @param string $redirect URL regex redirects to when regex matches request.	 */	function add_external_rule($regex, $redirect) {		$this->non_wp_rules[$regex] = $redirect;	}	/**	 * Add an endpoint, like /trackback/.	 *	 * To be inserted after certain URL types (specified in $places).	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $name Name of endpoint.	 * @param array $places URL types that endpoint can be used.	 */	function add_endpoint($name, $places) {		global $wp;		$this->endpoints[] = array ( $places, $name );		$wp->add_query_var($name);	}	/**	 * Add permalink structure.	 *	 * These are added along with the extra rewrite rules that are merged to the	 * top.	 *	 * @since unknown	 * @access public	 *	 * @param string $name Name for permalink structure.	 * @param string $struct Permalink structure.	 * @param bool $with_front Prepend front base to permalink structure.	 */	function add_permastruct($name, $struct, $with_front = true, $ep_mask = EP_NONE) {		if ( $with_front )			$struct = $this->front . $struct;		$this->extra_permastructs[$name] = array($struct, $ep_mask);	}	/**	 * Remove rewrite rules and then recreate rewrite rules.	 *	 * Calls {@link WP_Rewrite::wp_rewrite_rules()} after removing the	 * 'rewrite_rules' option. If the function named 'save_mod_rewrite_rules'	 * exists, it will be called.	 *	 * @since 2.0.1	 * @access public	 * @param $hard bool Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).	 */	function flush_rules($hard = true) {		delete_option('rewrite_rules');		$this->wp_rewrite_rules();		if ( $hard && function_exists('save_mod_rewrite_rules') )			save_mod_rewrite_rules();		if ( $hard && function_exists('iis7_save_url_rewrite_rules') )			iis7_save_url_rewrite_rules();	}	/**	 * Sets up the object's properties.	 *	 * The 'use_verbose_page_rules' object property will be set to true if the	 * permalink structure begins with one of the following: '%postname%', '%category%',	 * '%tag%', or '%author%'.	 *	 * @since 1.5.0	 * @access public	 */	function init() {		$this->extra_rules = $this->non_wp_rules = $this->endpoints = array();		$this->permalink_structure = get_option('permalink_structure');		$this->front = substr($this->permalink_structure, 0, strpos($this->permalink_structure, '%'));		$this->root = '';		if ( $this->using_index_permalinks() )			$this->root = $this->index . '/';		$this->category_base = get_option( 'category_base' );		$this->tag_base = get_option( 'tag_base' );		unset($this->category_structure);		unset($this->author_structure);		unset($this->date_structure);		unset($this->page_structure);		unset($this->search_structure);		unset($this->feed_structure);		unset($this->comment_feed_structure);		$this->use_trailing_slashes = ( '/' == substr($this->permalink_structure, -1, 1) );		// Enable generic rules for pages if permalink structure doesn't begin with a wildcard.		if ( preg_match("/^[^%]*%(?:postname|category|tag|author)%/", $this->permalink_structure) )			 $this->use_verbose_page_rules = true;		else			$this->use_verbose_page_rules = false;	}	/**	 * Set the main permalink structure for the blog.	 *	 * Will update the 'permalink_structure' option, if there is a difference	 * between the current permalink structure and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * Fires the 'permalink_structure_changed' action once the init call has	 * processed passing the old and new values	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure Permalink structure.	 */	function set_permalink_structure($permalink_structure) {		if ( $permalink_structure != $this->permalink_structure ) {			update_option('permalink_structure', $permalink_structure);			$this->init();			do_action('permalink_structure_changed', $this->permalink_structure, $permalink_structure);		}	}	/**	 * Set the category base for the category permalink.	 *	 * Will update the 'category_base' option, if there is a difference between	 * the current category base and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $category_base Category permalink structure base.	 */	function set_category_base($category_base) {		if ( $category_base != $this->category_base ) {			update_option('category_base', $category_base);			$this->init();		}	}	/**	 * Set the tag base for the tag permalink.	 *	 * Will update the 'tag_base' option, if there is a difference between the	 * current tag base and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * @since 2.3.0	 * @access public	 *	 * @param string $tag_base Tag permalink structure base.	 */	function set_tag_base( $tag_base ) {		if ( $tag_base != $this->tag_base ) {			update_option( 'tag_base', $tag_base );			$this->init();		}	}	/**	 * PHP4 Constructor - Calls init(), which runs setup.	 *	 * @since 1.5.0	 * @access public	 *	 * @return WP_Rewrite	 */	function WP_Rewrite() {		$this->init();	}}?>
<?php/** * Upgrade WordPress Page. * * @package WordPress * @subpackage Administration *//** * We are upgrading WordPress. * * @since unknown * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require( '../wp-load.php' );timer_start();require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );delete_site_transient('update_core');if ( isset( $_GET['step'] ) )	$step = $_GET['step'];else	$step = 0;// Do it.  No output.if ( 'upgrade_db' === $step ) {	wp_upgrade();	die( '0' );}$step = (int) $step;$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo( 'html_type' ); ?>; charset=<?php echo get_option( 'blog_charset' ); ?>" />	<title><?php _e( 'WordPress &rsaquo; Upgrade' ); ?></title>	<?php	wp_admin_css( 'install', true );	wp_admin_css( 'ie', true );	?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php if ( get_option( 'db_version' ) == $wp_db_version || !is_blog_installed() ) : ?><h2><?php _e( 'No Upgrade Required' ); ?></h2><p><?php _e( 'Your WordPress database is already up-to-date!' ); ?></p><p class="step"><a class="button" href="<?php echo get_option( 'home' ); ?>/"><?php _e( 'Continue' ); ?></a></p><?php elseif ( !$php_compat || !$mysql_compat ) :	if ( !$mysql_compat && !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );	elseif ( !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );	elseif ( !$mysql_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );?><?php else :switch ( $step ) :	case 0:		$goback = stripslashes( wp_get_referer() );		$goback = esc_url_raw( $goback );		$goback = urlencode( $goback );?><h2><?php _e( 'Database Upgrade Required' ); ?></h2><p><?php _e( 'WordPress has been updated! Before we send you on your way, we have to upgrade your database to the newest version.' ); ?></p><p><?php _e( 'The upgrade process may take a little while, so please be patient.' ); ?></p><p class="step"><a class="button" href="upgrade.php?step=1&amp;backto=<?php echo $goback; ?>"><?php _e( 'Upgrade WordPress Database' ); ?></a></p><?php		break;	case 1:		wp_upgrade();			$backto = !empty($_GET['backto']) ? stripslashes( urldecode( $_GET['backto'] ) ) :  __get_option( 'home' ) . '/';			$backto = esc_url_raw( $backto );			$backto = wp_validate_redirect($backto, __get_option( 'home' ) . '/');?><h2><?php _e( 'Upgrade Complete' ); ?></h2>	<p><?php _e( 'Your WordPress database has been successfully upgraded!' ); ?></p>	<p class="step"><a class="button" href="<?php echo $backto; ?>"><?php _e( 'Continue' ); ?></a></p><!--<pre><?php printf( __( '%s queries' ), $wpdb->num_queries ); ?><?php printf( __( '%s seconds' ), timer_stop( 0 ) ); ?></pre>--><?php		break;endswitch;endif;?></body></html>
<?php/** * WordPress User API * * @package WordPress *//** * Authenticate user with remember capability. * * The credentials is an array that has 'user_login', 'user_password', and * 'remember' indices. If the credentials is not given, then the log in form * will be assumed and used if set. * * The various authentication cookies will be set by this function and will be * set for a longer period depending on if the 'remember' credential is set to * true. * * @since 2.5.0 * * @param array $credentials Optional. User info in order to sign on. * @param bool $secure_cookie Optional. Whether to use secure cookie. * @return object Either WP_Error on failure, or WP_User on success. */function wp_signon( $credentials = '', $secure_cookie = '' ) {	if ( empty($credentials) ) {		if ( ! empty($_POST['log']) )			$credentials['user_login'] = $_POST['log'];		if ( ! empty($_POST['pwd']) )			$credentials['user_password'] = $_POST['pwd'];		if ( ! empty($_POST['rememberme']) )			$credentials['remember'] = $_POST['rememberme'];	}	if ( !empty($credentials['remember']) )		$credentials['remember'] = true;	else		$credentials['remember'] = false;	// TODO do we deprecate the wp_authentication action?	do_action_ref_array('wp_authenticate', array(&$credentials['user_login'], &$credentials['user_password']));	if ( '' === $secure_cookie )		$secure_cookie = is_ssl();	global $auth_secure_cookie; // XXX ugly hack to pass this to wp_authenticate_cookie	$auth_secure_cookie = $secure_cookie;	add_filter('authenticate', 'wp_authenticate_cookie', 30, 3);	$user = wp_authenticate($credentials['user_login'], $credentials['user_password']);	if ( is_wp_error($user) ) {		if ( $user->get_error_codes() == array('empty_username', 'empty_password') ) {			$user = new WP_Error('', '');		}		return $user;	}	wp_set_auth_cookie($user->ID, $credentials['remember'], $secure_cookie);	do_action('wp_login', $credentials['user_login']);	return $user;}/** * Authenticate the user using the username and password. */add_filter('authenticate', 'wp_authenticate_username_password', 20, 3);function wp_authenticate_username_password($user, $username, $password) {	if ( is_a($user, 'WP_User') ) { return $user; }	if ( empty($username) || empty($password) ) {		$error = new WP_Error();		if ( empty($username) )			$error->add('empty_username', __('<strong>ERROR</strong>: The username field is empty.'));		if ( empty($password) )			$error->add('empty_password', __('<strong>ERROR</strong>: The password field is empty.'));		return $error;	}	$userdata = get_user_by('login', $username);	if ( !$userdata )		return new WP_Error('invalid_username', sprintf(__('<strong>ERROR</strong>: Invalid username. <a href="%s" title="Password Lost and Found">Lost your password</a>?'), site_url('wp-login.php?action=lostpassword', 'login')));	if ( is_multisite() ) {		// Is user marked as spam?		if ( 1 == $userdata->spam)			return new WP_Error('invalid_username', __('<strong>ERROR</strong>: Your account has been marked as a spammer.'));		// Is a user's blog marked as spam?		if ( !is_super_admin( $userdata->ID ) && isset($userdata->primary_blog) ) {			$details = get_blog_details( $userdata->primary_blog );			if ( is_object( $details ) && $details->spam == 1 )				return new WP_Error('blog_suspended', __('Site Suspended.'));		}	}	$userdata = apply_filters('wp_authenticate_user', $userdata, $password);	if ( is_wp_error($userdata) )		return $userdata;	if ( !wp_check_password($password, $userdata->user_pass, $userdata->ID) )		return new WP_Error('incorrect_password', sprintf(__('<strong>ERROR</strong>: Incorrect password. <a href="%s" title="Password Lost and Found">Lost your password</a>?'), site_url('wp-login.php?action=lostpassword', 'login')));	$user =  new WP_User($userdata->ID);	return $user;}/** * Authenticate the user using the WordPress auth cookie. */function wp_authenticate_cookie($user, $username, $password) {	if ( is_a($user, 'WP_User') ) { return $user; }	if ( empty($username) && empty($password) ) {		$user_id = wp_validate_auth_cookie();		if ( $user_id )			return new WP_User($user_id);		global $auth_secure_cookie;		if ( $auth_secure_cookie )			$auth_cookie = SECURE_AUTH_COOKIE;		else			$auth_cookie = AUTH_COOKIE;		if ( !empty($_COOKIE[$auth_cookie]) )			return new WP_Error('expired_session', __('Please log in again.'));		// If the cookie is not set, be silent.	}	return $user;}/** * Number of posts user has written. * * @since 3.0.0 * @uses $wpdb WordPress database object for queries. * * @param int $userid User ID. * @return int Amount of posts user has written. */function count_user_posts($userid) {	global $wpdb;	$where = get_posts_by_author_sql('post', TRUE, $userid);	$count = $wpdb->get_var( "SELECT COUNT(*) FROM $wpdb->posts $where" );	return apply_filters('get_usernumposts', $count, $userid);}/** * Number of posts written by a list of users. * * @since 3.0.0 * @param array $userid User ID number list. * @return array Amount of posts each user has written. */function count_many_users_posts($users) {	global $wpdb;	$count = array();	if ( ! is_array($users) || empty( $users ) )		return $count;	$userlist = implode( ',', $users );	$where = get_posts_by_author_sql( 'post' );	$result = $wpdb->get_results( "SELECT post_author, COUNT(*) FROM $wpdb->posts $where AND post_author IN ($userlist) GROUP BY post_author", ARRAY_N );	foreach ( $result as $row ) {		$count[ $row[0] ] = $row[1];	}	foreach ( $users as $id ) {		if ( ! isset( $count[ $id ] ) )			$count[ $id ] = 0;	}	return $count;}/** * Check that the user login name and password is correct. * * @since 0.71 * @todo xmlrpc only. Maybe move to xmlrpc.php. * * @param string $user_login User name. * @param string $user_pass User password. * @return bool False if does not authenticate, true if username and password authenticates. */function user_pass_ok($user_login, $user_pass) {	$user = wp_authenticate($user_login, $user_pass);	if ( is_wp_error($user) )		return false;	return true;}//// User option functions///** * Get the current user's ID * * @since MU * * @uses wp_get_current_user * * @return int The current user's ID */function get_current_user_id() {	$user = wp_get_current_user();	return ( isset( $user->ID ) ? (int) $user->ID : 0 );}/** * Retrieve user option that can be either per Site or per Network. * * If the user ID is not given, then the current user will be used instead. If * the user ID is given, then the user data will be retrieved. The filter for * the result, will also pass the original option name and finally the user data * object as the third parameter. * * The option will first check for the per site name and then the per Network name. * * @since 2.0.0 * @uses $wpdb WordPress database object for queries. * @uses apply_filters() Calls 'get_user_option_$option' hook with result, *		option parameter, and user data object. * * @param string $option User option name. * @param int $user Optional. User ID. * @param bool $deprecated Use get_option() to check for an option in the options table. * @return mixed */function get_user_option( $option, $user = 0, $deprecated = '' ) {	global $wpdb;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	if ( empty($user) ) {		$user = wp_get_current_user();		$user = $user->ID;	}	$user = get_userdata($user);	// Keys used as object vars cannot have dashes.	$key = str_replace('-', '', $option);	if ( isset( $user->{$wpdb->prefix . $key} ) ) // Blog specific		$result = $user->{$wpdb->prefix . $key};	elseif ( isset( $user->{$key} ) ) // User specific and cross-blog		$result = $user->{$key};	else		$result = false;	return apply_filters("get_user_option_{$option}", $result, $option, $user);}/** * Update user option with global blog capability. * * User options are just like user metadata except that they have support for * global blog options. If the 'global' parameter is false, which it is by default * it will prepend the WordPress table prefix to the option name. * * Deletes the user option if $newvalue is empty. * * @since 2.0.0 * @uses $wpdb WordPress database object for queries * * @param int $user_id User ID * @param string $option_name User option name. * @param mixed $newvalue User option value. * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific). * @return unknown */function update_user_option( $user_id, $option_name, $newvalue, $global = false ) {	global $wpdb;	if ( !$global )		$option_name = $wpdb->prefix . $option_name;	// For backward compatibility. See differences between update_user_meta() and deprecated update_usermeta().	// http://core.trac.wordpress.org/ticket/13088	if ( is_null( $newvalue ) || is_scalar( $newvalue ) && empty( $newvalue ) )		return delete_user_meta( $user_id, $option_name );	return update_user_meta( $user_id, $option_name, $newvalue );}/** * Delete user option with global blog capability. * * User options are just like user metadata except that they have support for * global blog options. If the 'global' parameter is false, which it is by default * it will prepend the WordPress table prefix to the option name. * * @since 3.0.0 * @uses $wpdb WordPress database object for queries * * @param int $user_id User ID * @param string $option_name User option name. * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific). * @return unknown */function delete_user_option( $user_id, $option_name, $global = false ) {	global $wpdb;	if ( !$global )		$option_name = $wpdb->prefix . $option_name;	return delete_user_meta( $user_id, $option_name );}/** * Get users for the blog. * * For setups that use the multi-blog feature. Can be used outside of the * multi-blog feature. * * @since 2.2.0 * @uses $wpdb WordPress database object for queries * @uses $blog_id The Blog id of the blog for those that use more than one blog * * @param int $id Blog ID. * @return array List of users that are part of that Blog ID */function get_users_of_blog( $id = '' ) {	global $wpdb, $blog_id;	if ( empty($id) )		$id = (int) $blog_id;	$blog_prefix = $wpdb->get_blog_prefix($id);	$users = $wpdb->get_results( "SELECT user_id, user_id AS ID, user_login, display_name, user_email, meta_value FROM $wpdb->users, $wpdb->usermeta WHERE {$wpdb->users}.ID = {$wpdb->usermeta}.user_id AND meta_key = '{$blog_prefix}capabilities' ORDER BY {$wpdb->usermeta}.user_id" );	return $users;}/** * Add meta data field to a user. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 3.0.0 * @uses add_metadata() * @link http://codex.wordpress.org/Function_Reference/add_user_meta * * @param int $user_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_user_meta($user_id, $meta_key, $meta_value, $unique = false) {	return add_metadata('user', $user_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a user. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 3.0.0 * @uses delete_metadata() * @link http://codex.wordpress.org/Function_Reference/delete_user_meta * * @param int $user_id user ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_user_meta($user_id, $meta_key, $meta_value = '') {	return delete_metadata('user', $user_id, $meta_key, $meta_value);}/** * Retrieve user meta field for a user. * * @since 3.0.0 * @uses get_metadata() * @link http://codex.wordpress.org/Function_Reference/get_user_meta * * @param int $user_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_user_meta($user_id, $key, $single = false) {	return get_metadata('user', $user_id, $key, $single);}/** * Update user meta field based on user ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and user ID. * * If the meta field for the user does not exist, it will be added. * * @since 3.0.0 * @uses update_metadata * @link http://codex.wordpress.org/Function_Reference/update_user_meta * * @param int $user_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_user_meta($user_id, $meta_key, $meta_value, $prev_value = '') {	return update_metadata('user', $user_id, $meta_key, $meta_value, $prev_value);}/** * Count number of users who have each of the user roles. * * Assumes there are neither duplicated nor orphaned capabilities meta_values. * Assumes role names are unique phrases.  Same assumption made by WP_User_Search::prepare_query() * Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users. * Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257. * * @since 3.0.0 * @param string $strategy 'time' or 'memory' * @return array Includes a grand total and an array of counts indexed by role strings. */function count_users($strategy = 'time') {	global $wpdb, $blog_id, $wp_roles;	// Initialize	$id = (int) $blog_id;	$blog_prefix = $wpdb->get_blog_prefix($id);	$result = array();	if ( 'time' == $strategy ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$avail_roles = $wp_roles->get_names();		// Build a CPU-intensive query that will return concise information.		$select_count = array();		foreach ( $avail_roles as $this_role => $name ) {			$select_count[] = "COUNT(NULLIF(`meta_value` LIKE '%" . like_escape($this_role) . "%', FALSE))";		}		$select_count = implode(', ', $select_count);		// Add the meta_value index to the selection list, then run the query.		$row = $wpdb->get_row( "SELECT $select_count, COUNT(*) FROM $wpdb->usermeta WHERE meta_key = '{$blog_prefix}capabilities'", ARRAY_N );		// Run the previous loop again to associate results with role names.		$col = 0;		$role_counts = array();		foreach ( $avail_roles as $this_role => $name ) {			$count = (int) $row[$col++];			if ($count > 0) {				$role_counts[$this_role] = $count;			}		}		// Get the meta_value index from the end of the result set.		$total_users = (int) $row[$col];		$result['total_users'] = $total_users;		$result['avail_roles'] =& $role_counts;	} else {		$avail_roles = array();		$users_of_blog = $wpdb->get_col( "SELECT meta_value FROM $wpdb->usermeta WHERE meta_key = '{$blog_prefix}capabilities'" );		foreach ( $users_of_blog as $caps_meta ) {			$b_roles = unserialize($caps_meta);			if ( is_array($b_roles) ) {				foreach ( $b_roles as $b_role => $val ) {					if ( isset($avail_roles[$b_role]) ) {						$avail_roles[$b_role]++;					} else {						$avail_roles[$b_role] = 1;					}				}			}		}		$result['total_users'] = count( $users_of_blog );		$result['avail_roles'] =& $avail_roles;	}	return $result;}//// Private helper functions///** * Set up global user vars. * * Used by wp_set_current_user() for back compat. Might be deprecated in the future. * * @since 2.0.4 * @global string $userdata User description. * @global string $user_login The user username for logging in * @global int $user_level The level of the user * @global int $user_ID The ID of the user * @global string $user_email The email address of the user * @global string $user_url The url in the user's profile * @global string $user_pass_md5 MD5 of the user's password * @global string $user_identity The display name of the user * * @param int $for_user_id Optional. User ID to set up global data. */function setup_userdata($for_user_id = '') {	global $user_login, $userdata, $user_level, $user_ID, $user_email, $user_url, $user_pass_md5, $user_identity;	if ( '' == $for_user_id )		$user = wp_get_current_user();	else		$user = new WP_User($for_user_id);	$userdata   = $user->data;	$user_ID    = (int) $user->ID;	$user_level = (int) isset($user->user_level) ? $user->user_level : 0;	if ( 0 == $user->ID ) {		$user_login = $user_email = $user_url = $user_pass_md5 = $user_identity = '';		return;	}	$user_login	= $user->user_login;	$user_email	= $user->user_email;	$user_url	= $user->user_url;	$user_pass_md5	= md5($user->user_pass);	$user_identity	= $user->display_name;}/** * Create dropdown HTML content of users. * * The content can either be displayed, which it is by default or retrieved by * setting the 'echo' argument. The 'include' and 'exclude' arguments do not * need to be used; all users will be displayed in that case. Only one can be * used, either 'include' or 'exclude', but not both. * * The available arguments are as follows: * <ol> * <li>show_option_all - Text to show all and whether HTML option exists.</li> * <li>show_option_none - Text for show none and whether HTML option exists. *     </li> * <li>orderby - SQL order by clause for what order the users appear. Default is * 'display_name'.</li> * <li>order - Default is 'ASC'. Can also be 'DESC'.</li> * <li>include - User IDs to include.</li> * <li>exclude - User IDs to exclude.</li> * <li>multi - Default is 'false'. Whether to skip the ID attribute on the 'select' element. A 'true' value is overridden when id argument is set.</li> * <li>show - Default is 'display_name'. User table column to display. If the selected item is empty then the user_login will be displayed in parentesis</li> * <li>echo - Default is '1'. Whether to display or retrieve content.</li> * <li>selected - Which User ID is selected.</li> * <li>name - Default is 'user'. Name attribute of select element.</li> * <li>id - Default is the value of the 'name' parameter. ID attribute of select element.</li> * <li>class - Class attribute of select element.</li> * <li>blog_id - ID of blog (Multisite only). Defaults to ID of current blog.</li> * </ol> * * @since 2.3.0 * @uses $wpdb WordPress database object for queries * * @param string|array $args Optional. Override defaults. * @return string|null Null on display. String of HTML content on retrieve. */function wp_dropdown_users( $args = '' ) {	global $wpdb;	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'display_name', 'order' => 'ASC',		'include' => '', 'exclude' => '', 'multi' => 0,		'show' => 'display_name', 'echo' => 1,		'selected' => 0, 'name' => 'user', 'class' => '', 'blog_id' => $GLOBALS['blog_id'],		'id' => '',	);	$defaults['selected'] = is_author() ? get_query_var( 'author' ) : 0;	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	$query = "SELECT {$wpdb->users}.* FROM $wpdb->users, $wpdb->usermeta WHERE {$wpdb->users}.ID = {$wpdb->usermeta}.user_id AND meta_key = '{$blog_prefix}capabilities'";	$query_where = array();	if ( is_array($include) )		$include = join(',', $include);	$include = preg_replace('/[^0-9,]/', '', $include); // (int)	if ( $include )		$query_where[] = "ID IN ($include)";	if ( is_array($exclude) )		$exclude = join(',', $exclude);	$exclude = preg_replace('/[^0-9,]/', '', $exclude); // (int)	if ( $exclude )		$query_where[] = "ID NOT IN ($exclude)";	if ( $query_where )		$query .= " AND " . join(' AND', $query_where);	$query .= " ORDER BY $orderby $order";	$users = $wpdb->get_results( $query );	$output = '';	if ( !empty($users) ) {		$name = esc_attr( $name );		if ( $multi && ! $id )			$id = '';		else			$id = $id ? " id='" . esc_attr( $id ) . "'" : " id='$name'";		$output = "<select name='{$name}'{$id} class='$class'>\n";		if ( $show_option_all )			$output .= "\t<option value='0'>$show_option_all</option>\n";		if ( $show_option_none ) {			$_selected = selected( -1, $selected, false );			$output .= "\t<option value='-1'$_selected>$show_option_none</option>\n";		}		foreach ( (array) $users as $user ) {			$user->ID = (int) $user->ID;			$_selected = selected( $user->ID, $selected, false );			$display = !empty($user->$show) ? $user->$show : '('. $user->user_login . ')';			$output .= "\t<option value='$user->ID'$_selected>" . esc_html($display) . "</option>\n";		}		$output .= "</select>";	}	$output = apply_filters('wp_dropdown_users', $output);	if ( $echo )		echo $output;	return $output;}/** * Add user meta data as properties to given user object. * * The finished user data is cached, but the cache is not used to fill in the * user data for the given object. Once the function has been used, the cache * should be used to retrieve user data. The intention is if the current data * had been cached already, there would be no need to call this function. * * @access private * @since 2.5.0 * @uses $wpdb WordPress database object for queries * * @param object $user The user data object. */function _fill_user( &$user ) {	$metavalues = get_user_metavalues(array($user->ID));	_fill_single_user($user, $metavalues[$user->ID]);}/** * Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users * * @since 3.0.0 * @param array $ids User ID numbers list. * @return array of arrays. The array is indexed by user_id, containing $metavalues object arrays. */function get_user_metavalues($ids) {	global $wpdb;	$clean = array_map('intval', $ids);	if ( 0 == count($clean) )		return $objects;	$list = implode(',', $clean);	$show = $wpdb->hide_errors();	$metavalues = $wpdb->get_results("SELECT user_id, meta_key, meta_value FROM $wpdb->usermeta WHERE user_id IN ($list)");	$wpdb->show_errors($show);	$objects = array();	foreach($clean as $id) {		$objects[$id] = array();	}	foreach($metavalues as $meta_object) {		$objects[$meta_object->user_id][] = $meta_object;	}	return $objects;}/** * Unserialize user metadata, fill $user object, then cache everything. * * @since 3.0.0 * @param object $user The User object. * @param array $metavalues An array of objects provided by get_user_metavalues() */function _fill_single_user( &$user, &$metavalues ) {	global $wpdb;	foreach ( $metavalues as $meta ) {		$value = maybe_unserialize($meta->meta_value);		// Keys used as object vars cannot have dashes.		$key = str_replace('-', '', $meta->meta_key);		$user->{$key} = $value;	}	$level = $wpdb->prefix . 'user_level';	if ( isset( $user->{$level} ) )		$user->user_level = $user->{$level};	// For backwards compat.	if ( isset($user->first_name) )		$user->user_firstname = $user->first_name;	if ( isset($user->last_name) )		$user->user_lastname = $user->last_name;	if ( isset($user->description) )		$user->user_description = $user->description;	update_user_caches($user);}/** * Take an array of user objects, fill them with metas, and cache them. * * @since 3.0.0 * @param array $users User objects */function _fill_many_users( &$users ) {	$ids = array();	foreach($users as $user_object) {		$ids[] = $user_object->ID;	}    $metas = get_user_metavalues($ids);	foreach($users as $user_object) {		if (isset($metas[$user_object->ID])) {	        _fill_single_user($user_object, $metas[$user_object->ID]);		}	}}/** * Sanitize every user field. * * If the context is 'raw', then the user object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_user_field() Used to sanitize the fields. * * @param object|array $user The User Object or Array * @param string $context Optional, default is 'display'. How to sanitize user fields. * @return object|array The now sanitized User Object or Array (will be the same type as $user) */function sanitize_user_object($user, $context = 'display') {	if ( is_object($user) ) {		if ( !isset($user->ID) )			$user->ID = 0;		if ( isset($user->data) )			$vars = get_object_vars( $user->data );		else			$vars = get_object_vars($user);		foreach ( array_keys($vars) as $field ) {			if ( is_string($user->$field) || is_numeric($user->$field) )				$user->$field = sanitize_user_field($field, $user->$field, $user->ID, $context);		}		$user->filter = $context;	} else {		if ( !isset($user['ID']) )			$user['ID'] = 0;		foreach ( array_keys($user) as $field )			$user[$field] = sanitize_user_field($field, $user[$field], $user['ID'], $context);		$user['filter'] = $context;	}	return $user;}/** * Sanitize user field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $user_id if $context == 'edit' and field name prefix == 'user_'. * * @uses apply_filters() Calls 'edit_user_$field' passing $value and $user_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'user_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'user_'. * * @uses apply_filters() Calls '$field' passing $value, $user_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'user_'. * @uses apply_filters() Calls 'user_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'user_'. * * @param string $field The user Object field name. * @param mixed $value The user Object value. * @param int $user_id user ID. * @param string $context How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_user_field($field, $value, $user_id, $context) {	$int_fields = array('ID');	if ( in_array($field, $int_fields) )		$value = (int) $value;	if ( 'raw' == $context )		return $value;	if ( !is_string($value) && !is_numeric($value) )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'user_') ) {		$prefixed = true;		$field_no_prefix = str_replace('user_', '', $field);	}	if ( 'edit' == $context ) {		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $user_id);		} else {			$value = apply_filters("edit_user_$field", $value, $user_id);		}		if ( 'description' == $field )			$value = esc_html($value);		else			$value = esc_attr($value);	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);		} else {			$value = apply_filters("pre_user_$field", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $user_id, $context);		else			$value = apply_filters("user_$field", $value, $user_id, $context);	}	if ( 'user_url' == $field )		$value = esc_url($value);	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Update all user caches * * @since 3.0.0 * * @param object $user User object to be cached */function update_user_caches(&$user) {	wp_cache_add($user->ID, $user, 'users');	wp_cache_add($user->user_login, $user->ID, 'userlogins');	wp_cache_add($user->user_email, $user->ID, 'useremail');	wp_cache_add($user->user_nicename, $user->ID, 'userslugs');}/** * Clean all user caches * * @since 3.0.0 * * @param int $id User ID */function clean_user_cache($id) {	$user = new WP_User($id);	wp_cache_delete($id, 'users');	wp_cache_delete($user->user_login, 'userlogins');	wp_cache_delete($user->user_email, 'useremail');	wp_cache_delete($user->user_nicename, 'userslugs');}?>
<?php/** * The loop that displays posts. * * The loop displays the posts and the post content.  See * http://codex.wordpress.org/The_Loop to understand it and * http://codex.wordpress.org/Template_Tags to understand * the tags used in it. * * This can be overridden in child themes with loop.php or * loop-template.php, where 'template' is the loop context * requested by a template. For example, loop-index.php would * be used if it exists and we ask for the loop with: * <code>get_template_part( 'loop', 'index' );</code> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if ( $wp_query->max_num_pages > 1 ) : ?>	<div id="nav-above" class="navigation">		<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>		<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>	</div><!-- #nav-above --><?php endif; ?><?php /* If there are no posts to display, such as an empty archive page */ ?><?php if ( ! have_posts() ) : ?>	<div id="post-0" class="post error404 not-found">		<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>		<div class="entry-content">			<p><?php _e( 'Apologies, but no results were found for the requested archive. Perhaps searching will help find a related post.', 'twentyten' ); ?></p>			<?php get_search_form(); ?>		</div><!-- .entry-content -->	</div><!-- #post-0 --><?php endif; ?><?php	/* Start the Loop.	 *	 * In Twenty Ten we use the same loop in multiple contexts.	 * It is broken into three main parts: when we're displaying	 * posts that are in the gallery category, when we're displaying	 * posts in the asides category, and finally all other posts.	 *	 * Additionally, we sometimes check for whether we are on an	 * archive page, a search page, etc., allowing for small differences	 * in the loop on each template without actually duplicating	 * the rest of the loop that is shared.	 *	 * Without further ado, the loop:	 */ ?><?php while ( have_posts() ) : the_post(); ?><?php /* How to display posts in the Gallery category. */ ?>	<?php if ( in_category( _x('gallery', 'gallery category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->			<div class="entry-content"><?php if ( post_password_required() ) : ?>				<?php the_content(); ?><?php else : ?>				<div class="gallery-thumb"><?php	$images = get_children( array( 'post_parent' => $post->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image', 'orderby' => 'menu_order', 'order' => 'ASC', 'numberposts' => 999 ) );	$total_images = count( $images );	$image = array_shift( $images );	$image_img_tag = wp_get_attachment_image( $image->ID, 'thumbnail' );?>					<a class="size-thumbnail" href="<?php the_permalink(); ?>"><?php echo $image_img_tag; ?></a>				</div><!-- .gallery-thumb -->				<p><em><?php printf( __( 'This gallery contains <a %1$s>%2$s photos</a>.', 'twentyten' ),						'href="' . get_permalink() . '" title="' . sprintf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ) . '" rel="bookmark"',						$total_images					); ?></em></p>				<?php the_excerpt(); ?><?php endif; ?>			</div><!-- .entry-content -->			<div class="entry-utility">				<a href="<?php echo get_term_link( _x('gallery', 'gallery category slug', 'twentyten'), 'category' ); ?>" title="<?php esc_attr_e( 'View posts in the Gallery category', 'twentyten' ); ?>"><?php _e( 'More Galleries', 'twentyten' ); ?></a>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display posts in the asides category */ ?>	<?php elseif ( in_category( _x('asides', 'asides category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>		<?php if ( is_archive() || is_search() ) : // Display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->		<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>			</div><!-- .entry-content -->		<?php endif; ?>			<div class="entry-utility">				<?php twentyten_posted_on(); ?>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display all other posts. */ ?>	<?php else : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->	<?php if ( is_archive() || is_search() ) : // Only display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->	<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>				<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>			</div><!-- .entry-content -->	<?php endif; ?>			<div class="entry-utility">				<?php if ( count( get_the_category() ) ) : ?>					<span class="cat-links">						<?php printf( __( '<span class="%1$s">Posted in</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-cat-links', get_the_category_list( ', ' ) ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<?php					$tags_list = get_the_tag_list( '', ', ' );					if ( $tags_list ):				?>					<span class="tag-links">						<?php printf( __( '<span class="%1$s">Tagged</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-tag-links', $tags_list ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## -->		<?php comments_template( '', true ); ?>	<?php endif; // This was the if statement that broke the loop into three parts based on categories. ?><?php endwhile; // End the loop. Whew. ?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if (  $wp_query->max_num_pages > 1 ) : ?>				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>					<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>				</div><!-- #nav-below --><?php endif; ?>
<?php/** * Users administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( !current_user_can('list_users') )	wp_die(__('Cheatin&#8217; uh?'));$title = __('Users');$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('This screen lists all the existing users for your site. Each user has one of five defined roles as set by the site admin: Site Administrator, Editor, Author, Contributor, or Subscriber. Users with roles other than Administrator will see fewer options when they are logged in, based on their role.') . '</p>' .    '<p>' . __('You can customize the display of information on this screen as you can on other screens, by using the Screen Options tab and the on-screen filters.') . '</p>' .    '<p>' . __('To add a new user for your site, click the Add New button at the top of the screen or Add New in the Users menu section.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Authors_and_Users_SubPanel" target="_blank">Documentation on Authors and Users</a>') . '</p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Roles_and_Capabilities" target="_blank">Roles and Capabilities Descriptions</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$update = $doaction = '';if ( isset($_REQUEST['action']) )	$doaction = $_REQUEST['action'] ? $_REQUEST['action'] : $_REQUEST['action2'];if ( empty($doaction) ) {	if ( isset($_GET['changeit']) && !empty($_GET['new_role']) )		$doaction = 'promote';}if ( empty($_REQUEST) ) {	$referer = '<input type="hidden" name="wp_http_referer" value="'. esc_attr(stripslashes($_SERVER['REQUEST_URI'])) . '" />';} elseif ( isset($_REQUEST['wp_http_referer']) ) {	$redirect = remove_query_arg(array('wp_http_referer', 'updated', 'delete_count'), stripslashes($_REQUEST['wp_http_referer']));	$referer = '<input type="hidden" name="wp_http_referer" value="' . esc_attr($redirect) . '" />';} else {	$redirect = 'users.php';	$referer = '';}switch ($doaction) {/* Bulk Dropdown menu Role changes */case 'promote':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	$editable_roles = get_editable_roles();	if ( empty( $editable_roles[$_REQUEST['new_role']] ) )		wp_die(__('You can&#8217;t give users that role.'));	$userids = $_REQUEST['users'];	$update = 'promote';	foreach ( $userids as $id ) {		$id = (int) $id;		if ( ! current_user_can('promote_user', $id) )			wp_die(__('You can&#8217;t edit that user.'));		// The new role of the current user must also have promote_users caps		if ( $id == $current_user->ID && !$wp_roles->role_objects[$_REQUEST['new_role']]->has_cap('promote_users') ) {			$update = 'err_admin_role';			continue;		}		// If the user doesn't already belong to the blog, bail.		if ( is_multisite() && !is_user_member_of_blog( $id ) )			wp_die(__('Cheatin&#8217; uh?'));		$user = new WP_User($id);		$user->set_role($_REQUEST['new_role']);	}	wp_redirect(add_query_arg('update', $update, $redirect));	exit();break;case 'dodelete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('delete-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		wp_die(__('You can&#8217;t delete users.'));	$userids = $_REQUEST['users'];	$update = 'del';	$delete_count = 0;	foreach ( (array) $userids as $id) {		$id = (int) $id;		if ( ! current_user_can( 'delete_user', $id ) )			wp_die(__( 'You can&#8217;t delete that user.' ) );		if ( $id == $current_user->ID ) {			$update = 'err_admin_del';			continue;		}		switch ( $_REQUEST['delete_option'] ) {		case 'delete':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id);			break;		case 'reassign':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id, $_REQUEST['reassign_user']);			break;		}		++$delete_count;	}	$redirect = add_query_arg( array('delete_count' => $delete_count, 'update' => $update), $redirect);	wp_redirect($redirect);	exit();break;case 'delete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		$errors = new WP_Error( 'edit_users', __( 'You can&#8217;t delete users.' ) );	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('delete-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Delete Users'); ?></h2><p><?php _e('You have specified these users for deletion:'); ?></p><ul><?php	$go_delete = false;	foreach ( (array) $userids as $id ) {		$id = (int) $id;		$user = new WP_User($id);		if ( $id == $current_user->ID ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be deleted.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"" . esc_attr($id) . "\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_delete = true;		}	}	// @todo Delete is always for !is_multisite(). Use API.	if ( !is_multisite() ) {		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users ORDER BY user_login");	} else {		// WPMU only searches users of current blog		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users, $wpdb->usermeta WHERE $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '".$wpdb->prefix."capabilities' ORDER BY user_login");	}	$user_dropdown = '<select name="reassign_user">';	foreach ( (array) $all_logins as $login )		if ( $login->ID == $current_user->ID || !in_array($login->ID, $userids) )			$user_dropdown .= "<option value=\"" . esc_attr($login->ID) . "\">{$login->user_login}</option>";	$user_dropdown .= '</select>';	?>	</ul><?php if ( $go_delete ) : ?>	<fieldset><p><legend><?php _e('What should be done with posts and links owned by this user?'); ?></legend></p>	<ul style="list-style:none;">		<li><label><input type="radio" id="delete_option0" name="delete_option" value="delete" checked="checked" />		<?php _e('Delete all posts and links.'); ?></label></li>		<li><input type="radio" id="delete_option1" name="delete_option" value="reassign" />		<?php echo '<label for="delete_option1">'.__('Attribute all posts and links to:')."</label> $user_dropdown"; ?></li>	</ul></fieldset>	<input type="hidden" name="action" value="dodelete" />	<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Deletion'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for deletion.'); ?></p><?php endif; ?></div></form><?phpbreak;case 'doremove':	check_admin_referer('remove-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit;	}	if ( !current_user_can('remove_users')  )		die(__('You can&#8217;t remove users.'));	$userids = $_REQUEST['users'];	$update = 'remove'; 	foreach ( $userids as $id ) {		$id = (int) $id;		if ( $id == $current_user->id && !is_super_admin() ) {			$update = 'err_admin_remove';			continue;		}		if ( !current_user_can('remove_user', $id) ) {			$update = 'err_admin_remove';			continue;		}		remove_user_from_blog($id, $blog_id);	}	$redirect = add_query_arg( array('update' => $update), $redirect);	wp_redirect($redirect);	exit;break;case 'remove':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( !current_user_can('remove_users') )		$error = new WP_Error('edit_users', __('You can&#8217;t remove users.'));	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('remove-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Remove Users from Site'); ?></h2><p><?php _e('You have specified these users for removal:'); ?></p><ul><?php	$go_remove = false; 	foreach ( $userids as $id ) {		$id = (int) $id; 		$user = new WP_User($id);		if ( $id == $current_user->id && !is_super_admin() ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be removed.</strong>'), $id, $user->user_login) . "</li>\n";		} elseif ( !current_user_can('remove_user', $id) ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>You don\'t have permission to remove this user.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"{$id}\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_remove = true;		} 	} 	?><?php if ( $go_remove ) : ?>		<input type="hidden" name="action" value="doremove" />		<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Removal'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for removal.'); ?></p><?php endif; ?></div></form><?phpbreak;default:	if ( !empty($_GET['_wp_http_referer']) ) {		wp_redirect(remove_query_arg(array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI'])));		exit;	}	include('./admin-header.php');	$usersearch = isset($_GET['usersearch']) ? $_GET['usersearch'] : null;	$userspage = isset($_GET['userspage']) ? $_GET['userspage'] : null;	$role = isset($_GET['role']) ? $_GET['role'] : null;	// Query the user IDs for this page	$wp_user_search = new WP_User_Search($usersearch, $userspage, $role);	// Query the post counts for this page	$post_counts = count_many_users_posts($wp_user_search->get_results());	// Query the users for this page	cache_users($wp_user_search->get_results());	$messages = array();	if ( isset($_GET['update']) ) :		switch($_GET['update']) {		case 'del':		case 'del_many':			$delete_count = isset($_GET['delete_count']) ? (int) $_GET['delete_count'] : 0;			$messages[] = '<div id="message" class="updated"><p>' . sprintf(_n('%s user deleted', '%s users deleted', $delete_count), $delete_count) . '</p></div>';			break;		case 'add':			$messages[] = '<div id="message" class="updated"><p>' . __('New user created.') . '</p></div>';			break;		case 'promote':			$messages[] = '<div id="message" class="updated"><p>' . __('Changed roles.') . '</p></div>';			break;		case 'err_admin_role':			$messages[] = '<div id="message" class="error"><p>' . __('The current user&#8217;s role must have user editing capabilities.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other user roles have been changed.') . '</p></div>';			break;		case 'err_admin_del':			$messages[] = '<div id="message" class="error"><p>' . __('You can&#8217;t delete the current user.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other users have been deleted.') . '</p></div>';			break;		case 'remove':			$messages[] = '<div id="message" class="updated fade"><p>' . __('User removed from this site.') . '</p></div>';			break;		case 'err_admin_remove':			$messages[] = '<div id="message" class="error"><p>' . __("You can't remove the current user.") . '</p></div>';			$messages[] = '<div id="message" class="updated fade"><p>' . __('Other users have been removed.') . '</p></div>';			break;		}	endif; ?><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty($messages) ) {	foreach ( $messages as $msg )		echo $msg;} ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can( 'create_users' ) ) { ?>  <a href="user-new.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'user'); ?></a><?php }if ( isset($_GET['usersearch']) && $_GET['usersearch'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( $_GET['usersearch'] ) ); ?></h2><div class="filter"><form id="list-filter" action="" method="get"><ul class="subsubsub"><?php$users_of_blog = count_users();$total_users = $users_of_blog['total_users'];$avail_roles =& $users_of_blog['avail_roles'];unset($users_of_blog);$current_role = false;$class = empty($role) ? ' class="current"' : '';$role_links = array();$role_links[] = "<li><a href='users.php'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';foreach ( $wp_roles->get_names() as $this_role => $name ) {	if ( !isset($avail_roles[$this_role]) )		continue;	$class = '';	if ( $this_role == $role ) {		$current_role = $role;		$class = ' class="current"';	}	$name = translate_user_role( $name );	/* translators: User role name with count */	$name = sprintf( __('%1$s <span class="count">(%2$s)</span>'), $name, $avail_roles[$this_role] );	$role_links[] = "<li><a href='users.php?role=$this_role'$class>$name</a>";}echo implode( " |</li>\n", $role_links) . '</li>';unset($role_links);?></ul></form></div><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="user-search-input"><?php _e( 'Search Users' ); ?>:</label>	<input type="text" id="user-search-input" name="usersearch" value="<?php echo esc_attr($wp_user_search->search_term); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" class="button" /></p></form><form id="posts-filter" action="" method="get"><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><label class="screen-reader-text" for="new_role"><?php _e('Change role to&hellip;') ?></label><select name="new_role" id="new_role"><option value=''><?php _e('Change role to&hellip;') ?></option><?php wp_dropdown_roles(); ?></select><input type="submit" value="<?php esc_attr_e('Change'); ?>" name="changeit" class="button-secondary" /><?php wp_nonce_field('bulk-users'); ?></div><br class="clear" /></div>	<?php if ( is_wp_error( $wp_user_search->search_errors ) ) : ?>		<div class="error">			<ul>			<?php				foreach ( $wp_user_search->search_errors->get_error_messages() as $message )					echo "<li>$message</li>";			?>			</ul>		</div>	<?php endif; ?><?php if ( $wp_user_search->get_results() ) : ?>	<?php if ( $wp_user_search->is_search() ) : ?>		<p><a href="users.php"><?php _e('&larr; Back to All Users'); ?></a></p>	<?php endif; ?><table class="widefat fixed" cellspacing="0"><thead><tr class="thead"><?php print_column_headers('users') ?></tr></thead><tfoot><tr class="thead"><?php print_column_headers('users', false) ?></tr></tfoot><tbody id="users" class="list:user user-list"><?php$style = '';foreach ( $wp_user_search->get_results() as $userid ) {	$user_object = new WP_User($userid);	$roles = $user_object->roles;	$role = array_shift($roles);	if ( is_multisite() && empty( $role ) )		continue;	$style = ( ' class="alternate"' == $style ) ? '' : ' class="alternate"';	echo "\n\t", user_row( $user_object, $style, $role, $post_counts[ $userid ] );}?></tbody></table><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><?php endif; ?></form></div><?phpif ( is_multisite() ) {	foreach ( array('user_login' => 'user_login', 'first_name' => 'user_firstname', 'last_name' => 'user_lastname', 'email' => 'user_email', 'url' => 'user_uri', 'role' => 'user_role') as $formpost => $var ) {		$var = 'new_' . $var;		$$var = isset($_REQUEST[$formpost]) ? esc_attr(stripslashes($_REQUEST[$formpost])) : '';	}	unset($name);}?><br class="clear" /><?phpbreak;} // end of the $doaction switchinclude('./admin-footer.php');?>
<?php/** * Themes administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('switch_themes') && !current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );if ( current_user_can('switch_themes') && isset($_GET['action']) ) {	if ( 'activate' == $_GET['action'] ) {		check_admin_referer('switch-theme_' . $_GET['template']);		switch_theme($_GET['template'], $_GET['stylesheet']);		wp_redirect('themes.php?activated=true');		exit;	} else if ( 'delete' == $_GET['action'] ) {		check_admin_referer('delete-theme_' . $_GET['template']);		if ( !current_user_can('delete_themes') )			wp_die( __( 'Cheatin&#8217; uh?' ) );		delete_theme($_GET['template']);		wp_redirect('themes.php?deleted=true');		exit;	}}$title = __('Manage Themes');$parent_file = 'themes.php';if ( current_user_can( 'switch_themes' ) ) :$help = '<p>' . __('Aside from the default theme included with your WordPress installation, themes are designed and developed by third parties.') . '</p>';$help .= '<p>' . __('You can see your active theme at the top of the screen. Below are the other themes you have installed that are not currently in use. You can see what your site would look like with one of these themes by clicking the Preview link. To change themes, click the Activate link.') . '</p>';if ( current_user_can('install_themes') )	$help .= '<p>' . sprintf(__('If you would like to see more themes to choose from, click on the &#8220;Install Themes&#8221; tab and you will be able to browse or search for additional themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. Themes in the WordPress.org Theme Directory are designed and developed by third parties, and are licensed under the GNU General Public License, version 2, just like WordPress. Oh, and they&#8217;re free!'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);add_thickbox();wp_enqueue_script( 'theme-preview' );endif;require_once('./admin-header.php');if ( is_multisite() && current_user_can('edit_themes') ) {	?><div id="message0" class="updated"><p><?php printf( __('Administrator: new themes must be activated in the <a href="%s">Network Themes</a> screen before they appear here.'), admin_url( 'ms-themes.php') ); ?></p></div><?php}?><?php if ( ! validate_current_theme() ) : ?><div id="message1" class="updated"><p><?php _e('The active theme is broken.  Reverting to the default theme.'); ?></p></div><?php elseif ( isset($_GET['activated']) ) :		if ( isset($wp_registered_sidebars) && count( (array) $wp_registered_sidebars ) && current_user_can('edit_theme_options') ) { ?><div id="message2" class="updated"><p><?php printf( __('New theme activated. This theme supports widgets, please visit the <a href="%s">widgets settings</a> screen to configure them.'), admin_url( 'widgets.php' ) ); ?></p></div><?php		} else { ?><div id="message2" class="updated"><p><?php printf( __( 'New theme activated. <a href="%s">Visit site</a>' ), home_url( '/' ) ); ?></p></div><?php		}	elseif ( isset($_GET['deleted']) ) : ?><div id="message3" class="updated"><p><?php _e('Theme deleted.') ?></p></div><?php endif; ?><?php$themes = get_allowed_themes();$ct = current_theme_info();unset($themes[$ct->name]);uksort( $themes, "strnatcasecmp" );$theme_total = count( $themes );$per_page = 15;if ( isset( $_GET['pagenum'] ) )	$page = absint( $_GET['pagenum'] );if ( empty($page) )	$page = 1;$start = $offset = ( $page - 1 ) * $per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ) . '#themenav',	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($theme_total / $per_page),	'current' => $page));$themes = array_slice( $themes, $start, $per_page );?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a><?php if ( current_user_can('install_themes') ) { ?><a href="theme-install.php" class="nav-tab"><?php echo esc_html_x('Install Themes', 'theme'); ?></a><?php } ?></h2><h3><?php _e('Current Theme'); ?></h3><div id="current-theme"><?php if ( $ct->screenshot ) : ?><img src="<?php echo $ct->theme_root_uri . '/' . $ct->stylesheet . '/' . $ct->screenshot; ?>" alt="<?php _e('Current theme preview'); ?>" /><?php endif; ?><h4><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $ct->title, $ct->version, $ct->author) ; ?></h4><p class="theme-description"><?php echo $ct->description; ?></p><?php if ( current_user_can('edit_themes') && $ct->parent_theme ) { ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ), $ct->title, $ct->parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ) ); ?></p><?php } ?><?php if ( $ct->tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $ct->tags); ?></p><?php endif; ?><?php theme_update_available($ct); ?></div><div class="clear"></div><?phpif ( ! current_user_can( 'switch_themes' ) ) {	echo '</div>';	require( './admin-footer.php' );	exit;}?><h3><?php _e('Available Themes'); ?></h3><div class="clear"></div><?php if ( $theme_total ) { ?><?php if ( $page_links ) : ?><div class="tablenav"><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $per_page, $theme_total ) ),	number_format_i18n( $theme_total ),	$page_links); echo $page_links_text; ?></div></div><?php endif; ?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php$style = '';$theme_names = array_keys($themes);natcasesort($theme_names);$table = array();$rows = ceil(count($theme_names) / 3);for ( $row = 1; $row <= $rows; $row++ )	for ( $col = 1; $col <= 3; $col++ )		$table[$row][$col] = array_shift($theme_names);foreach ( $table as $row => $cols ) {?><tr><?phpforeach ( $cols as $col => $theme_name ) {	$class = array('available-theme');	if ( $row == 1 ) $class[] = 'top';	if ( $col == 1 ) $class[] = 'left';	if ( $row == $rows ) $class[] = 'bottom';	if ( $col == 3 ) $class[] = 'right';?>	<td class="<?php echo join(' ', $class); ?>"><?php if ( !empty($theme_name) ) :	$template = $themes[$theme_name]['Template'];	$stylesheet = $themes[$theme_name]['Stylesheet'];	$title = $themes[$theme_name]['Title'];	$version = $themes[$theme_name]['Version'];	$description = $themes[$theme_name]['Description'];	$author = $themes[$theme_name]['Author'];	$screenshot = $themes[$theme_name]['Screenshot'];	$stylesheet_dir = $themes[$theme_name]['Stylesheet Dir'];	$template_dir = $themes[$theme_name]['Template Dir'];	$parent_theme = $themes[$theme_name]['Parent Theme'];	$theme_root = $themes[$theme_name]['Theme Root'];	$theme_root_uri = $themes[$theme_name]['Theme Root URI'];	$preview_link = esc_url(get_option('home') . '/');	if ( is_ssl() )		$preview_link = str_replace( 'http://', 'https://', $preview_link );	$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), $preview_link ) );	$preview_text = esc_attr( sprintf( __('Preview of &#8220;%s&#8221;'), $title ) );	$tags = $themes[$theme_name]['Tags'];	$thickbox_class = 'thickbox thickbox-preview';	$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=".urlencode($template)."&amp;stylesheet=".urlencode($stylesheet), 'switch-theme_' . $template);	$activate_text = esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $title ) );	$actions = array();	$actions[] = '<a href="' . $activate_link .  '" class="activatelink" title="' . $activate_text . '">' . __('Activate') . '</a>';	$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $theme_name)) . '">' . __('Preview') . '</a>';	if ( current_user_can('delete_themes') )		$actions[] = '<a class="submitdelete deletion" href="' . wp_nonce_url("themes.php?action=delete&amp;template=$stylesheet", 'delete-theme_' . $stylesheet) . '" onclick="' . "return confirm('" . esc_js(sprintf( __("You are about to delete this theme '%s'\n  'Cancel' to stop, 'OK' to delete."), $theme_name )) . "');" . '">' . __('Delete') . '</a>';	$actions = apply_filters('theme_action_links', $actions, $themes[$theme_name]);	$actions = implode ( ' | ', $actions );?>		<a href="<?php echo $preview_link; ?>" class="<?php echo $thickbox_class; ?> screenshot"><?php if ( $screenshot ) : ?>			<img src="<?php echo $theme_root_uri . '/' . $stylesheet . '/' . $screenshot; ?>" alt="" /><?php endif; ?>		</a><h3><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $title, $version, $author) ; ?></h3><p class="description"><?php echo $description; ?></p><span class='action-links'><?php echo $actions ?></span>	<?php if ( current_user_can('edit_themes') && $parent_theme ) {	/* translators: 1: theme title, 2:  template dir, 3: stylesheet_dir, 4: theme title, 5: parent_theme */ ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ), $title, $parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ) ); ?></p><?php } ?><?php if ( $tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $tags); ?></p><?php endif; ?>		<?php theme_update_available( $themes[$theme_name] ); ?><?php endif; // end if not empty theme_name ?>	</td><?php } // end foreach $cols ?></tr><?php } // end foreach $table ?></table><?php } else { ?><p><?php	if ( current_user_can('install_themes') )		printf(__('You only have one theme installed right now. Live a little! You can choose from over 1,000 free themes in the WordPress.org Theme Directory at any time: just click on the <em><a href="%s">Install Themes</a></em> tab above.'), 'theme-install.php');	else		printf(__('Only the current theme is available to you. Contact the %s administrator for information about accessing additional themes.'), get_site_option('site_name'));	?></p><?php } // end if $theme_total?><br class="clear" /><?php if ( $page_links ) : ?><div class="tablenav"><?php echo "<div class='tablenav-pages'>$page_links_text</div>"; ?><br class="clear" /></div><?php endif; ?><br class="clear" /><?php// List broken themes, if any.$broken_themes = get_broken_themes();if ( current_user_can('edit_themes') && count( $broken_themes ) ) {?><h2><?php _e('Broken Themes'); ?> <?php if ( is_multisite() ) _e( '(Site admin only)' ); ?></h2><p><?php _e('The following themes are installed but incomplete. Themes must have a stylesheet and a template.'); ?></p><table id="broken-themes">	<tr>		<th><?php _e('Name'); ?></th>		<th><?php _e('Description'); ?></th>	</tr><?php	$theme = '';	$theme_names = array_keys($broken_themes);	natcasesort($theme_names);	foreach ($theme_names as $theme_name) {		$title = $broken_themes[$theme_name]['Title'];		$description = $broken_themes[$theme_name]['Description'];		$theme = ('class="alternate"' == $theme) ? '' : 'class="alternate"';		echo "		<tr $theme>			 <td>$title</td>			 <td>$description</td>		</tr>";	}?></table><?php}?></div><?php require('./admin-footer.php'); ?>
<?php/** * WordPress Post Administration API. * * @package WordPress * @subpackage Administration *//** * Rename $_POST data from form names to DB post columns. * * Manipulates $_POST directly. * * @package WordPress * @since 2.6.0 * * @param bool $update Are we updating a pre-existing post? * @param post_data array Array of post data. Defaults to the contents of $_POST. * @return object|bool WP_Error on failure, true on success. */function _wp_translate_postdata( $update = false, $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	if ( $update )		$post_data['ID'] = (int) $post_data['post_ID'];	$post_data['post_content'] = isset($post_data['content']) ? $post_data['content'] : '';	$post_data['post_excerpt'] = isset($post_data['excerpt']) ? $post_data['excerpt'] : '';	$post_data['post_parent'] = isset($post_data['parent_id'])? $post_data['parent_id'] : '';	if ( isset($post_data['trackback_url']) )		$post_data['to_ping'] = $post_data['trackback_url'];	if ( !isset($post_data['user_ID']) )		$post_data['user_ID'] = $GLOBALS['user_ID'];	if (!empty ( $post_data['post_author_override'] ) ) {		$post_data['post_author'] = (int) $post_data['post_author_override'];	} else {		if (!empty ( $post_data['post_author'] ) ) {			$post_data['post_author'] = (int) $post_data['post_author'];		} else {			$post_data['post_author'] = (int) $post_data['user_ID'];		}	}	$ptype = get_post_type_object( $post_data['post_type'] );	if ( isset($post_data['user_ID']) && ($post_data['post_author'] != $post_data['user_ID']) ) {		if ( !current_user_can( $ptype->cap->edit_others_posts ) ) {			if ( 'page' == $post_data['post_type'] ) {				return new WP_Error( 'edit_others_pages', $update ?					__( 'You are not allowed to edit pages as this user.' ) :					__( 'You are not allowed to create pages as this user.' )				);			} else {				return new WP_Error( 'edit_others_posts', $update ?					__( 'You are not allowed to edit posts as this user.' ) :					__( 'You are not allowed to post as this user.' )				);			}		}	}	// What to do based on which button they pressed	if ( isset($post_data['saveasdraft']) && '' != $post_data['saveasdraft'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['saveasprivate']) && '' != $post_data['saveasprivate'] )		$post_data['post_status'] = 'private';	if ( isset($post_data['publish']) && ( '' != $post_data['publish'] ) && ( !isset($post_data['post_status']) || $post_data['post_status'] != 'private' ) )		$post_data['post_status'] = 'publish';	if ( isset($post_data['advanced']) && '' != $post_data['advanced'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['pending']) && '' != $post_data['pending'] )		$post_data['post_status'] = 'pending';	if ( isset( $post_data['ID'] ) )		$post_id = $post_data['ID'];	else		$post_id = false;	$previous_status = $post_id ? get_post_field( 'post_status', $post_id ) : false;	// Posts 'submitted for approval' present are submitted to $_POST the same as if they were being published.	// Change status from 'publish' to 'pending' if user lacks permissions to publish or to resave published posts.	if ( isset($post_data['post_status']) && ('publish' == $post_data['post_status'] && !current_user_can( $ptype->cap->publish_posts )) )		if ( $previous_status != 'publish' || !current_user_can( 'edit_post', $post_id ) )			$post_data['post_status'] = 'pending';	if ( ! isset($post_data['post_status']) )		$post_data['post_status'] = $previous_status;	if (!isset( $post_data['comment_status'] ))		$post_data['comment_status'] = 'closed';	if (!isset( $post_data['ping_status'] ))		$post_data['ping_status'] = 'closed';	foreach ( array('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $post_data['hidden_' . $timeunit] ) && $post_data['hidden_' . $timeunit] != $post_data[$timeunit] ) {			$post_data['edit_date'] = '1';			break;		}	}	if ( !empty( $post_data['edit_date'] ) ) {		$aa = $post_data['aa'];		$mm = $post_data['mm'];		$jj = $post_data['jj'];		$hh = $post_data['hh'];		$mn = $post_data['mn'];		$ss = $post_data['ss'];		$aa = ($aa <= 0 ) ? date('Y') : $aa;		$mm = ($mm <= 0 ) ? date('n') : $mm;		$jj = ($jj > 31 ) ? 31 : $jj;		$jj = ($jj <= 0 ) ? date('j') : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$post_data['post_date'] = sprintf( "%04d-%02d-%02d %02d:%02d:%02d", $aa, $mm, $jj, $hh, $mn, $ss );		$post_data['post_date_gmt'] = get_gmt_from_date( $post_data['post_date'] );	}	return $post_data;}/** * Update an existing post with values provided in $_POST. * * @since unknown * * @param array $post_data Optional. * @return int Post ID. */function edit_post( $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	$post_ID = (int) $post_data['post_ID'];	$ptype = get_post_type_object($post_data['post_type']);	if ( !current_user_can( $ptype->cap->edit_post, $post_ID ) ) {		if ( 'page' == $post_data['post_type'] )			wp_die( __('You are not allowed to edit this page.' ));		else			wp_die( __('You are not allowed to edit this post.' ));	}	// Autosave shouldn't save too soon after a real save	if ( 'autosave' == $post_data['action'] ) {		$post =& get_post( $post_ID );		$now = time();		$then = strtotime($post->post_date_gmt . ' +0000');		$delta = AUTOSAVE_INTERVAL / 2;		if ( ($now - $then) < $delta )			return $post_ID;	}	$post_data = _wp_translate_postdata( true, $post_data );	if ( 'autosave' != $post_data['action']  && 'auto-draft' == $post_data['post_status'] )		$post_data['post_status'] = 'draft';	if ( is_wp_error($post_data) )		wp_die( $post_data->get_error_message() );	if ( isset($post_data['visibility']) ) {		switch ( $post_data['visibility'] ) {			case 'public' :				$post_data['post_password'] = '';				break;			case 'password' :				unset( $post_data['sticky'] );				break;			case 'private' :				$post_data['post_status'] = 'private';				$post_data['post_password'] = '';				unset( $post_data['sticky'] );				break;		}	}	// Meta Stuff	if ( isset($post_data['meta']) && $post_data['meta'] ) {		foreach ( $post_data['meta'] as $key => $value )			update_meta( $key, $value['key'], $value['value'] );	}	if ( isset($post_data['deletemeta']) && $post_data['deletemeta'] ) {		foreach ( $post_data['deletemeta'] as $key => $value )			delete_meta( $key );	}	add_meta( $post_ID );	update_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	wp_update_post( $post_data );	// Reunite any orphaned attachments with their parent	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	if ( current_user_can( 'edit_others_posts' ) ) {		if ( !empty($post_data['sticky']) )			stick_post($post_ID);		else			unstick_post($post_ID);	}	return $post_ID;}/** * Process the post data for the bulk editing of posts. * * Updates all bulk edited posts/pages, adding (but not removing) tags and * categories. Skips pages when they would be their own parent or child. * * @since 2.7.0 * * @param array $post_data Optional, the array of post data to process if not provided will use $_POST superglobal. * @return array */function bulk_edit_posts( $post_data = null ) {	global $wpdb;	if ( empty($post_data) )		$post_data = &$_POST;	if ( isset($post_data['post_type']) )		$ptype = get_post_type_object($post_data['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			wp_die( __('You are not allowed to edit pages.'));		else			wp_die( __('You are not allowed to edit posts.'));	}	if ( -1 == $post_data['_status'] ) {		$post_data['post_status'] = null;		unset($post_data['post_status']);	} else {		$post_data['post_status'] = $post_data['_status'];	}	unset($post_data['_status']);	$post_IDs = array_map( 'intval', (array) $post_data['post'] );	$reset = array( 'post_author', 'post_status', 'post_password', 'post_parent', 'page_template', 'comment_status', 'ping_status', 'keep_private', 'tax_input', 'post_category', 'sticky' );	foreach ( $reset as $field ) {		if ( isset($post_data[$field]) && ( '' == $post_data[$field] || -1 == $post_data[$field] ) )			unset($post_data[$field]);	}	if ( isset($post_data['post_category']) ) {		if ( is_array($post_data['post_category']) && ! empty($post_data['post_category']) )			$new_cats = array_map( 'absint', $post_data['post_category'] );		else			unset($post_data['post_category']);	}	$tax_input = array();	if ( isset($post_data['tax_input'])) {		foreach ( $post_data['tax_input'] as $tax_name => $terms ) {			if ( empty($terms) )				continue;			if ( is_taxonomy_hierarchical( $tax_name ) )				$tax_input[$tax_name] = array_map( 'absint', $terms );			else {				$tax_input[$tax_name] = preg_replace( '/\s*,\s*/', ',', rtrim( trim($terms), ' ,' ) );				$tax_input[$tax_name] = explode(',', $tax_input[$tax_name]);			}		}	}	if ( isset($post_data['post_parent']) && ($parent = (int) $post_data['post_parent']) ) {		$pages = $wpdb->get_results("SELECT ID, post_parent FROM $wpdb->posts WHERE post_type = 'page'");		$children = array();		for ( $i = 0; $i < 50 && $parent > 0; $i++ ) {			$children[] = $parent;			foreach ( $pages as $page ) {				if ( $page->ID == $parent ) {					$parent = $page->post_parent;					break;				}			}		}	}	$updated = $skipped = $locked = array();	foreach ( $post_IDs as $post_ID ) {		$post_type_object = get_post_type_object( get_post_type( $post_ID ) );		if ( !isset( $post_type_object ) || ( isset($children) && in_array($post_ID, $children) ) || !current_user_can( $post_type_object->cap->edit_post, $post_ID ) ) {			$skipped[] = $post_ID;			continue;		}		if ( wp_check_post_lock( $post_ID ) ) {			$locked[] = $post_ID;			continue;		}		$tax_names = get_object_taxonomies( get_post($post_ID) );		foreach ( $tax_names as $tax_name ) {			$taxonomy_obj = get_taxonomy($tax_name);			if (  isset( $tax_input[$tax_name]) && current_user_can( $taxonomy_obj->cap->assign_terms ) )				$new_terms = $tax_input[$tax_name];			else				$new_terms = array();			if ( $taxonomy_obj->hierarchical )				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'ids') );			else				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'names') );			$post_data['tax_input'][$tax_name] = array_merge( $current_terms, $new_terms );		}		if ( isset($new_cats) && in_array( 'category', $tax_names ) ) {			$cats = (array) wp_get_post_categories($post_ID);			$post_data['post_category'] = array_unique( array_merge($cats, $new_cats) );			unset( $post_data['tax_input']['category'] );		}		$post_data['ID'] = $post_ID;		$updated[] = wp_update_post( $post_data );		if ( isset( $post_data['sticky'] ) && current_user_can( 'edit_others_posts' ) ) {			if ( 'sticky' == $post_data['sticky'] )				stick_post( $post_ID );			else				unstick_post( $post_ID );		}	}	return array( 'updated' => $updated, 'skipped' => $skipped, 'locked' => $locked );}/** * Default post information to use when populating the "Write Post" form. * * @since unknown * *@param string A post type string, defaults to 'post'. * @return object stdClass object containing all the default post data as attributes */function get_default_post_to_edit( $post_type = 'post', $create_in_db = false ) {	global $wpdb;	$post_title = '';	if ( !empty( $_REQUEST['post_title'] ) )		$post_title = esc_html( stripslashes( $_REQUEST['post_title'] ));	$post_content = '';	if ( !empty( $_REQUEST['content'] ) )		$post_content = esc_html( stripslashes( $_REQUEST['content'] ));	$post_excerpt = '';	if ( !empty( $_REQUEST['excerpt'] ) )		$post_excerpt = esc_html( stripslashes( $_REQUEST['excerpt'] ));	if ( $create_in_db ) {		// Cleanup old auto-drafts more than 7 days old		$old_posts = $wpdb->get_col( "SELECT ID FROM $wpdb->posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) > post_date" );		foreach ( (array) $old_posts as $delete )			wp_delete_post( $delete, true ); // Force delete		$post = get_post( wp_insert_post( array( 'post_title' => __( 'Auto Draft' ), 'post_type' => $post_type, 'post_status' => 'auto-draft' ) ) );	} else {		$post->ID = 0;		$post->post_author = '';		$post->post_date = '';		$post->post_date_gmt = '';		$post->post_password = '';		$post->post_type = $post_type;		$post->post_status = 'draft';		$post->to_ping = '';		$post->pinged = '';		$post->comment_status = get_option( 'default_comment_status' );		$post->ping_status = get_option( 'default_ping_status' );		$post->post_pingback = get_option( 'default_pingback_flag' );		$post->post_category = get_option( 'default_category' );		$post->page_template = 'default';		$post->post_parent = 0;		$post->menu_order = 0;	}	$post->post_content = apply_filters( 'default_content', $post_content, $post );	$post->post_title   = apply_filters( 'default_title',   $post_title, $post   );	$post->post_excerpt = apply_filters( 'default_excerpt', $post_excerpt, $post );	$post->post_name = '';	return $post;}/** * Get the default page information to use. * * @since 2.5.0 * * @return object stdClass object containing all the default post data as attributes */function get_default_page_to_edit() {	$page = get_default_post_to_edit();	$page->post_type = 'page';	return $page;}/** * Get an existing post and format it for editing. * * @since unknown * * @param unknown_type $id * @return unknown */function get_post_to_edit( $id ) {	$post = get_post( $id, OBJECT, 'edit' );	if ( $post->post_type == 'page' )		$post->page_template = get_post_meta( $id, '_wp_page_template', true );	return $post;}/** * Determine if a post exists based on title, content, and date * * @since unknown * * @param string $title Post title * @param string $content Optional post content * @param string $date Optional post date * @return int Post ID if post exists, 0 otherwise. */function post_exists($title, $content = '', $date = '') {	global $wpdb;	$post_title = stripslashes( sanitize_post_field( 'post_title', $title, 0, 'db' ) );	$post_content = stripslashes( sanitize_post_field( 'post_content', $content, 0, 'db' ) );	$post_date = stripslashes( sanitize_post_field( 'post_date', $date, 0, 'db' ) );	$query = "SELECT ID FROM $wpdb->posts WHERE 1=1";	$args = array();	if ( !empty ( $date ) ) {		$query .= ' AND post_date = %s';		$args[] = $post_date;	}	if ( !empty ( $title ) ) {		$query .= ' AND post_title = %s';		$args[] = $post_title;	}	if ( !empty ( $content ) ) {		$query .= 'AND post_content = %s';		$args[] = $post_content;	}	if ( !empty ( $args ) )		return $wpdb->get_var( $wpdb->prepare($query, $args) );	return 0;}/** * Creates a new post from the "Write Post" form using $_POST information. * * @since unknown * * @return unknown */function wp_write_post() {	global $user_ID;	if ( isset($_POST['post_type']) )		$ptype = get_post_type_object($_POST['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			return new WP_Error( 'edit_pages', __( 'You are not allowed to create pages on this site.' ) );		else			return new WP_Error( 'edit_posts', __( 'You are not allowed to create posts or drafts on this site.' ) );	}	// Check for autosave collisions	// Does this need to be updated? ~ Mark	$temp_id = false;	if ( isset($_POST['temp_ID']) ) {		$temp_id = (int) $_POST['temp_ID'];		if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )			$draft_ids = array();		foreach ( $draft_ids as $temp => $real )			if ( time() + $temp > 86400 ) // 1 day: $temp is equal to -1 * time( then )				unset($draft_ids[$temp]);		if ( isset($draft_ids[$temp_id]) ) { // Edit, don't write			$_POST['post_ID'] = $draft_ids[$temp_id];			unset($_POST['temp_ID']);			update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );			return edit_post();		}	}	$translated = _wp_translate_postdata( false );	if ( is_wp_error($translated) )		return $translated;	if ( isset($_POST['visibility']) ) {		switch ( $_POST['visibility'] ) {			case 'public' :				$_POST['post_password'] = '';				break;			case 'password' :				unset( $_POST['sticky'] );				break;			case 'private' :				$_POST['post_status'] = 'private';				$_POST['post_password'] = '';				unset( $_POST['sticky'] );				break;		}	}	// Create the post.	$post_ID = wp_insert_post( $_POST );	if ( is_wp_error( $post_ID ) )		return $post_ID;	if ( empty($post_ID) )		return 0;	add_meta( $post_ID );	add_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	// Reunite any orphaned attachments with their parent	// Does this need to be udpated? ~ Mark	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	if ( $temp_id && $temp_id != $draft_temp_id )		_relocate_children( $temp_id, $post_ID );	// Update autosave collision detection	if ( $temp_id ) {		$draft_ids[$temp_id] = $post_ID;		update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );	}	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	return $post_ID;}/** * Calls wp_write_post() and handles the errors. * * @since unknown * * @return unknown */function write_post() {	$result = wp_write_post();	if ( is_wp_error( $result ) )		wp_die( $result->get_error_message() );	else		return $result;}//// Post Meta///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_ID * @return unknown */function add_meta( $post_ID ) {	global $wpdb;	$post_ID = (int) $post_ID;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$metakeyselect = isset($_POST['metakeyselect']) ? stripslashes( trim( $_POST['metakeyselect'] ) ) : '';	$metakeyinput = isset($_POST['metakeyinput']) ? stripslashes( trim( $_POST['metakeyinput'] ) ) : '';	$metavalue = isset($_POST['metavalue']) ? maybe_serialize( stripslashes_deep( $_POST['metavalue'] ) ) : '';	if ( is_string($metavalue) )		$metavalue = trim( $metavalue );	if ( ('0' === $metavalue || !empty ( $metavalue ) ) && ((('#NONE#' != $metakeyselect) && !empty ( $metakeyselect) ) || !empty ( $metakeyinput) ) ) {		// We have a key/value pair. If both the select and the		// input for the key have data, the input takes precedence: 		if ('#NONE#' != $metakeyselect)			$metakey = $metakeyselect;		if ( $metakeyinput)			$metakey = $metakeyinput; // default		if ( in_array($metakey, $protected) )			return false;		wp_cache_delete($post_ID, 'post_meta');		$wpdb->insert( $wpdb->postmeta, array( 'post_id' => $post_ID, 'meta_key' => $metakey, 'meta_value' => $metavalue ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_ID, $metakey, $metavalue );		return $wpdb->insert_id;	}	return false;} // add_meta/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function delete_meta( $mid ) {	global $wpdb;	$mid = (int) $mid;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'delete_postmeta', $mid );	wp_cache_delete($post_id, 'post_meta');	$rval = $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'deleted_postmeta', $mid );	return $rval;}/** * Get a list of previously defined keys. * * @since unknown * * @return unknown */function get_meta_keys() {	global $wpdb;	$keys = $wpdb->get_col( "			SELECT meta_key			FROM $wpdb->postmeta			GROUP BY meta_key			ORDER BY meta_key" );	return $keys;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function get_post_meta_by_id( $mid ) {	global $wpdb;	$mid = (int) $mid;	$meta = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	if ( is_serialized_string( $meta->meta_value ) )		$meta->meta_value = maybe_unserialize( $meta->meta_value );	return $meta;}/** * {@internal Missing Short Description}} * * Some postmeta stuff. * * @since unknown * * @param unknown_type $postid * @return unknown */function has_meta( $postid ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value, meta_id, post_id			FROM $wpdb->postmeta WHERE post_id = %d			ORDER BY meta_key,meta_id", $postid), ARRAY_A );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta_id * @param unknown_type $meta_key Expect Slashed * @param unknown_type $meta_value Expect Slashed * @return unknown */function update_meta( $meta_id, $meta_key, $meta_value ) {	global $wpdb;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$meta_key = stripslashes($meta_key);	if ( in_array($meta_key, $protected) )		return false;	if ( '' === trim( $meta_value ) )		return false;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $meta_id) );	$meta_value = maybe_serialize( stripslashes_deep( $meta_value ) );	$meta_id = (int) $meta_id;	$data  = compact( 'meta_key', 'meta_value' );	$where = compact( 'meta_id' );	do_action( 'update_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	$rval = $wpdb->update( $wpdb->postmeta, $data, $where );	wp_cache_delete($post_id, 'post_meta');	do_action( 'updated_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	return $rval;}//// Private///** * Replace hrefs of attachment anchors with up-to-date permalinks. * * @since unknown * @access private * * @param unknown_type $post_ID * @return unknown */function _fix_attachment_links( $post_ID ) {	global $_fix_attachment_link_id;	$post = & get_post( $post_ID, ARRAY_A );	$search = "#<a[^>]+rel=('|\")[^'\"]*attachment[^>]*>#ie";	// See if we have any rel="attachment" links	if ( 0 == preg_match_all( $search, $post['post_content'], $anchor_matches, PREG_PATTERN_ORDER ) )		return;	$i = 0;	$search = "#[\s]+rel=(\"|')(.*?)wp-att-(\d+)\\1#i";	foreach ( $anchor_matches[0] as $anchor ) {		if ( 0 == preg_match( $search, $anchor, $id_matches ) )			continue;		$id = (int) $id_matches[3];		// While we have the attachment ID, let's adopt any orphans.		$attachment = & get_post( $id, ARRAY_A );		if ( ! empty( $attachment) && ! is_object( get_post( $attachment['post_parent'] ) ) ) {			$attachment['post_parent'] = $post_ID;			// Escape data pulled from DB.			$attachment = add_magic_quotes( $attachment );			wp_update_post( $attachment );		}		$post_search[$i] = $anchor;		 $_fix_attachment_link_id = $id;		$post_replace[$i] = preg_replace_callback( "#href=(\"|')[^'\"]*\\1#", '_fix_attachment_links_replace_cb', $anchor );		++$i;	}	$post['post_content'] = str_replace( $post_search, $post_replace, $post['post_content'] );	// Escape data pulled from DB.	$post = add_magic_quotes( $post);	return wp_update_post( $post);}function _fix_attachment_links_replace_cb($match) {        global $_fix_attachment_link_id;        return stripslashes( 'href='.$match[1] ).get_attachment_link( $_fix_attachment_link_id ).stripslashes( $match[1] );}/** * Move child posts to a new parent. * * @since unknown * @access private * * @param unknown_type $old_ID * @param unknown_type $new_ID * @return unknown */function _relocate_children( $old_ID, $new_ID ) {	global $wpdb;	$old_ID = (int) $old_ID;	$new_ID = (int) $new_ID;	$children = $wpdb->get_col( $wpdb->prepare("		SELECT post_id		FROM $wpdb->postmeta		WHERE meta_key = '_wp_attachment_temp_parent'		AND meta_value = %d", $old_ID) );	foreach ( $children as $child_id ) {		$wpdb->update($wpdb->posts, array('post_parent' => $new_ID), array('ID' => $child_id) );		delete_post_meta($child_id, '_wp_attachment_temp_parent');	}}/** * Get all the possible statuses for a post_type * * @since 2.5.0 * * @param string $type The post_type you want the statuses for * @return array As array of all the statuses for the supplied post type */function get_available_post_statuses($type = 'post') {	$stati = wp_count_posts($type);	return array_keys(get_object_vars($stati));}/** * Run the wp query to fetch the posts for listing on the edit posts page * * @since 2.5.0 * * @param array|bool $q Array of query variables to use to build the query or false to use $_GET superglobal. * @return array */function wp_edit_posts_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m'] = isset($q['m']) ? (int) $q['m'] : 0;	$q['cat'] = isset($q['cat']) ? (int) $q['cat'] : 0;	$post_stati  = get_post_stati();	if ( isset($q['post_type']) && in_array( $q['post_type'], get_post_types() ) )		$post_type = $q['post_type'];	else		$post_type = 'post';	$avail_post_stati = get_available_post_statuses($post_type);	if ( isset($q['post_status']) && in_array( $q['post_status'], $post_stati ) ) {		$post_status = $q['post_status'];		$perm = 'readable';	}	if ( isset($q['post_status']) && 'pending' === $q['post_status'] ) {		$order = 'ASC';		$orderby = 'modified';	} elseif ( isset($q['post_status']) && 'draft' === $q['post_status'] ) {		$order = 'DESC';		$orderby = 'modified';	} else {		$order = 'DESC';		$orderby = 'date';	}	$per_page = 'edit_' . $post_type . '_per_page';	$posts_per_page = (int) get_user_option( $per_page );	if ( empty( $posts_per_page ) || $posts_per_page < 1 )		$posts_per_page = 15;	$posts_per_page = apply_filters( $per_page, $posts_per_page );	$query = compact('post_type', 'post_status', 'perm', 'order', 'orderby', 'posts_per_page');	// Hierarchical types require special args.	if ( is_post_type_hierarchical( $post_type ) ) {		$query['orderby'] = 'menu_order title';		$query['order'] = 'asc';		$query['posts_per_page'] = -1;		$query['posts_per_archive_page'] = -1;	}	wp( $query );	return $avail_post_stati;}/** * Get default post mime types * * @since 2.9.0 * * @return array */function get_post_mime_types() {	$post_mime_types = array(	//	array( adj, noun )		'image' => array(__('Images'), __('Manage Images'), _n_noop('Image <span class="count">(%s)</span>', 'Images <span class="count">(%s)</span>')),		'audio' => array(__('Audio'), __('Manage Audio'), _n_noop('Audio <span class="count">(%s)</span>', 'Audio <span class="count">(%s)</span>')),		'video' => array(__('Video'), __('Manage Video'), _n_noop('Video <span class="count">(%s)</span>', 'Video <span class="count">(%s)</span>')),	);	return apply_filters('post_mime_types', $post_mime_types);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @return unknown */function get_available_post_mime_types($type = 'attachment') {	global $wpdb;	$types = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_mime_type FROM $wpdb->posts WHERE post_type = %s", $type));	return $types;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $q * @return unknown */function wp_edit_attachments_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m']   = isset( $q['m'] ) ? (int) $q['m'] : 0;	$q['cat'] = isset( $q['cat'] ) ? (int) $q['cat'] : 0;	$q['post_type'] = 'attachment';	$q['post_status'] = isset( $q['status'] ) && 'trash' == $q['status'] ? 'trash' : 'inherit';	$media_per_page = (int) get_user_option( 'upload_per_page' );	if ( empty( $media_per_page ) || $media_per_page < 1 )		$media_per_page = 20;	$q['posts_per_page'] = apply_filters( 'upload_per_page', $media_per_page );	$post_mime_types = get_post_mime_types();	$avail_post_mime_types = get_available_post_mime_types('attachment');	if ( isset($q['post_mime_type']) && !array_intersect( (array) $q['post_mime_type'], array_keys($post_mime_types) ) )		unset($q['post_mime_type']);	wp($q);	return array($post_mime_types, $avail_post_mime_types);}/** * {@internal Missing Short Description}} * * @uses get_user_option() * @since unknown * * @param unknown_type $id * @param unknown_type $page * @return unknown */function postbox_classes( $id, $page ) {	if ( isset( $_GET['edit'] ) && $_GET['edit'] == $id )		return '';	if ( $closed = get_user_option('closedpostboxes_'.$page ) ) {		if ( !is_array( $closed ) ) {			return '';		}		return in_array( $id, $closed )? 'closed' : '';	} else {		return '';	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param int|object $id    Post ID or post object. * @param string $title (optional) Title * @param string $name (optional) Name * @return array With two entries of type string */function get_sample_permalink($id, $title = null, $name = null) {	$post = &get_post($id);	if ( !$post->ID )		return array('', '');	$ptype = get_post_type_object($post->post_type);	$original_status = $post->post_status;	$original_date = $post->post_date;	$original_name = $post->post_name;	// Hack: get_permalink would return ugly permalink for	// drafts, so we will fake, that our post is published	if ( in_array($post->post_status, array('draft', 'pending')) ) {		$post->post_status = 'publish';		$post->post_name = sanitize_title($post->post_name ? $post->post_name : $post->post_title, $post->ID);	}	// If the user wants to set a new name -- override the current one	// Note: if empty name is supplied -- use the title instead, see #6072	if ( !is_null($name) )		$post->post_name = sanitize_title($name ? $name : $title, $post->ID);	$post->post_name = wp_unique_post_slug($post->post_name, $post->ID, $post->post_status, $post->post_type, $post->post_parent);	$post->filter = 'sample';	$permalink = get_permalink($post, true);	// Replace custom post_type Token with generic pagename token for ease of use.	$permalink = str_replace("%$post->post_type%", '%pagename%', $permalink);	// Handle page hierarchy	if ( $ptype->hierarchical ) {		$uri = get_page_uri($post);		$uri = untrailingslashit($uri);		$uri = strrev( stristr( strrev( $uri ), '/' ) );		$uri = untrailingslashit($uri);		if ( !empty($uri) )			$uri .= '/';		$permalink = str_replace('%pagename%', "${uri}%pagename%", $permalink);	}	$permalink = array($permalink, apply_filters('editable_slug', $post->post_name));	$post->post_status = $original_status;	$post->post_date = $original_date;	$post->post_name = $original_name;	unset($post->filter);	return $permalink;}/** * sample permalink html * * intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. * * @since unknown * * @param int|object $id Post ID or post object. * @param string $new_title (optional) New title * @param string $new_slug (optional) New slug * @return string intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. */function get_sample_permalink_html( $id, $new_title = null, $new_slug = null ) {	global $wpdb;	$post = &get_post($id);	list($permalink, $post_name) = get_sample_permalink($post->ID, $new_title, $new_slug);	if ( 'publish' == $post->post_status ) {		$ptype = get_post_type_object($post->post_type);		$view_post = $ptype->labels->view_item;		$title = __('Click to edit this part of the permalink');	} else {		$title = __('Temporary permalink. Click to edit this part.');	}	if ( false === strpos($permalink, '%postname%') && false === strpos($permalink, '%pagename%') ) {		$return = '<strong>' . __('Permalink:') . "</strong>\n" . '<span id="sample-permalink">' . $permalink . "</span>\n";		if ( current_user_can( 'manage_options' ) && !( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') ) )			$return .= '<span id="change-permalinks"><a href="options-permalink.php" class="button" target="_blank">' . __('Change Permalinks') . "</a></span>\n";		if ( isset($view_post) )			$return .= "<span id='view-post-btn'><a href='$permalink' class='button' target='_blank'>$view_post</a></span>\n";		$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);		return $return;	}	if ( function_exists('mb_strlen') ) {		if ( mb_strlen($post_name) > 30 ) {			$post_name_abridged = mb_substr($post_name, 0, 14). '&hellip;' . mb_substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	} else {		if ( strlen($post_name) > 30 ) {			$post_name_abridged = substr($post_name, 0, 14). '&hellip;' . substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	}	$post_name_html = '<span id="editable-post-name" title="' . $title . '">' . $post_name_abridged . '</span>';	$display_link = str_replace(array('%pagename%','%postname%'), $post_name_html, $permalink);	$view_link = str_replace(array('%pagename%','%postname%'), $post_name, $permalink);	$return =  '<strong>' . __('Permalink:') . "</strong>\n";	$return .= '<span id="sample-permalink">' . $display_link . "</span>\n";	$return .= '&lrm;'; // Fix bi-directional text display defect in RTL languages.	$return .= '<span id="edit-slug-buttons"><a href="#post_name" class="edit-slug button hide-if-no-js" onclick="editPermalink(' . $id . '); return false;">' . __('Edit') . "</a></span>\n";	$return .= '<span id="editable-post-name-full">' . $post_name . "</span>\n";	if ( isset($view_post) )		$return .= "<span id='view-post-btn'><a href='$view_link' class='button' target='_blank'>$view_post</a></span>\n";	$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);	return $return;}/** * Output HTML for the post thumbnail meta-box. * * @since 2.9.0 * * @param int $thumbnail_id ID of the attachment used for thumbnail * @return string html */function _wp_post_thumbnail_html( $thumbnail_id = NULL ) {	global $content_width, $_wp_additional_image_sizes, $post_ID;	$set_thumbnail_link = '<p class="hide-if-no-js"><a title="' . esc_attr__( 'Set featured image' ) . '" href="' . esc_url( get_upload_iframe_src('image') ) . '" id="set-post-thumbnail" class="thickbox">%s</a></p>';	$content = sprintf($set_thumbnail_link, esc_html__( 'Set featured image' ));	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$old_content_width = $content_width;		$content_width = 266;		if ( !isset( $_wp_additional_image_sizes['post-thumbnail'] ) )			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, array( $content_width, $content_width ) );		else			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'post-thumbnail' );		if ( !empty( $thumbnail_html ) ) {			$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$post_ID" );			$content = sprintf($set_thumbnail_link, $thumbnail_html);			$content .= '<p class="hide-if-no-js"><a href="#" id="remove-post-thumbnail" onclick="WPRemoveThumbnail(\'' . $ajax_nonce . '\');return false;">' . esc_html__( 'Remove featured image' ) . '</a></p>';		}		$content_width = $old_content_width;	}	return apply_filters( 'admin_post_thumbnail_html', $content );}/** * Check to see if the post is currently being edited by another user. * * @since 2.5.0 * * @param int $post_id ID of the post to check for editing * @return bool|int False: not locked or locked by current user. Int: user ID of user with lock. */function wp_check_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	$lock = get_post_meta( $post->ID, '_edit_lock', true );	$last = get_post_meta( $post->ID, '_edit_last', true );	$time_window = apply_filters( 'wp_check_post_lock_window', AUTOSAVE_INTERVAL * 2 );	if ( $lock && $lock > time() - $time_window && $last != $current_user->ID )		return $last;	return false;}/** * Mark the post as currently being edited by the current user * * @since 2.5.0 * * @param int $post_id ID of the post to being edited * @return bool Returns false if the post doesn't exist of there is no current user */function wp_set_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	if ( !$current_user || !$current_user->ID )		return false;	$now = time();	update_post_meta( $post->ID, '_edit_lock', $now );}/** * Outputs the notice message to say that someone else is editing this post at the moment. * * @since 2.8.5 * @return none */function _admin_notice_post_locked() {	global $post;	$last_user = get_userdata( get_post_meta( $post->ID, '_edit_last', true ) );	$last_user_name = $last_user ? $last_user->display_name : __('Somebody');	switch ($post->post_type) {		case 'post':			$message = __( 'Warning: %s is currently editing this post' );			break;		case 'page':			$message = __( 'Warning: %s is currently editing this page' );			break;		default:			$message = __( 'Warning: %s is currently editing this.' );	}	$message = sprintf( $message, esc_html( $last_user_name ) );	echo "<div class='error'><p>$message</p></div>";}/** * Creates autosave data for the specified post from $_POST data. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_translate_postdata() * @uses _wp_post_revision_fields() * * @return unknown */function wp_create_post_autosave( $post_id ) {	$translated = _wp_translate_postdata( true );	if ( is_wp_error( $translated ) )		return $translated;	// Only store one autosave.  If there is already an autosave, overwrite it.	if ( $old_autosave = wp_get_post_autosave( $post_id ) ) {		$new_autosave = _wp_post_revision_fields( $_POST, true );		$new_autosave['ID'] = $old_autosave->ID;		$current_user = wp_get_current_user();		$new_autosave['post_author'] = $current_user->ID;		return wp_update_post( $new_autosave );	}	// _wp_put_post_revision() expects unescaped.	$_POST = stripslashes_deep($_POST);	// Otherwise create the new autosave as a special post revision	return _wp_put_post_revision( $_POST, true );}/** * Save draft or manually autosave for showing preview. * * @package WordPress * @since 2.7.0 * * @uses wp_write_post() * @uses edit_post() * @uses get_post() * @uses current_user_can() * @uses wp_create_post_autosave() * * @return str URL to redirect to show the preview */function post_preview() {	$post_ID = (int) $_POST['post_ID'];	$status = get_post_status( $post_ID );	if ( 'auto-draft' == $status )		wp_die( __('Preview not available. Please save as a draft first.') );	if ( isset($_POST['catslist']) )		$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( isset($_POST['tags_input']) )		$_POST['tags_input'] = explode(",", $_POST['tags_input']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			wp_die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			wp_die(__('You are not allowed to edit this post.'));	}	if ( 'draft' == $post->post_status ) {		$id = edit_post();	} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.		$id = wp_create_post_autosave( $post->ID );		if ( ! is_wp_error($id) )			$id = $post->ID;	}	if ( is_wp_error($id) )		wp_die( $id->get_error_message() );	if ( $_POST['post_status'] == 'draft'  ) {		$url = add_query_arg( 'preview', 'true', get_permalink($id) );	} else {		$nonce = wp_create_nonce('post_preview_' . $id);		$url = add_query_arg( array( 'preview' => 'true', 'preview_id' => $id, 'preview_nonce' => $nonce ), get_permalink($id) );	}	return $url;}/** * Adds the TinyMCE editor used on the Write and Edit screens. * * @package WordPress * @since 2.7.0 * * TinyMCE is loaded separately from other Javascript by using wp-tinymce.php. It outputs concatenated * and optionaly pre-compressed version of the core and all default plugins. Additional plugins are loaded * directly by TinyMCE using non-blocking method. Custom plugins can be refreshed by adding a query string * to the URL when queueing them with the mce_external_plugins filter. * * @param bool $teeny optional Output a trimmed down version used in Press This. * @param mixed $settings optional An array that can add to or overwrite the default TinyMCE settings. */function wp_tiny_mce( $teeny = false, $settings = false ) {	global $concatenate_scripts, $compress_scripts, $tinymce_version, $editor_styles;	if ( ! user_can_richedit() )		return;	$baseurl = includes_url('js/tinymce');	$mce_locale = ( '' == get_locale() ) ? 'en' : strtolower( substr(get_locale(), 0, 2) ); // only ISO 639-1	/*	The following filter allows localization scripts to change the languages displayed in the spellchecker's drop-down menu.	By default it uses Google's spellchecker API, but can be configured to use PSpell/ASpell if installed on the server.	The + sign marks the default language. More information:	http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker	*/	$mce_spellchecker_languages = apply_filters('mce_spellchecker_languages', '+English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr,German=de,Italian=it,Polish=pl,Portuguese=pt,Spanish=es,Swedish=sv');	if ( $teeny ) {		$plugins = apply_filters( 'teeny_mce_plugins', array('safari', 'inlinepopups', 'media', 'fullscreen', 'wordpress') );		$ext_plugins = '';	} else {		$plugins = array( 'safari', 'inlinepopups', 'spellchecker', 'paste', 'wordpress', 'media', 'fullscreen', 'wpeditimage', 'wpgallery', 'tabfocus' );		/*		The following filter takes an associative array of external plugins for TinyMCE in the form 'plugin_name' => 'url'.		It adds the plugin's name to TinyMCE's plugins init and the call to PluginManager to load the plugin.		The url should be absolute and should include the js file name to be loaded. Example:		array( 'myplugin' => 'http://my-site.com/wp-content/plugins/myfolder/mce_plugin.js' )		If the plugin uses a button, it should be added with one of the "$mce_buttons" filters.		*/		$mce_external_plugins = apply_filters('mce_external_plugins', array());		$ext_plugins = '';		if ( ! empty($mce_external_plugins) ) {			/*			The following filter loads external language files for TinyMCE plugins.			It takes an associative array 'plugin_name' => 'path', where path is the			include path to the file. The language file should follow the same format as			/tinymce/langs/wp-langs.php and should define a variable $strings that			holds all translated strings.			When this filter is not used, the function will try to load {mce_locale}.js.			If that is not found, en.js will be tried next.			*/			$mce_external_languages = apply_filters('mce_external_languages', array());			$loaded_langs = array();			$strings = '';			if ( ! empty($mce_external_languages) ) {				foreach ( $mce_external_languages as $name => $path ) {					if ( @is_file($path) && @is_readable($path) ) {						include_once($path);						$ext_plugins .= $strings . "\n";						$loaded_langs[] = $name;					}				}			}			foreach ( $mce_external_plugins as $name => $url ) {				if ( is_ssl() ) $url = str_replace('http://', 'https://', $url);				$plugins[] = '-' . $name;				$plugurl = dirname($url);				$strings = $str1 = $str2 = '';				if ( ! in_array($name, $loaded_langs) ) {					$path = str_replace( WP_PLUGIN_URL, '', $plugurl );					$path = WP_PLUGIN_DIR . $path . '/langs/';					if ( function_exists('realpath') )						$path = trailingslashit( realpath($path) );					if ( @is_file($path . $mce_locale . '.js') )						$strings .= @file_get_contents($path . $mce_locale . '.js') . "\n";					if ( @is_file($path . $mce_locale . '_dlg.js') )						$strings .= @file_get_contents($path . $mce_locale . '_dlg.js') . "\n";					if ( 'en' != $mce_locale && empty($strings) ) {						if ( @is_file($path . 'en.js') ) {							$str1 = @file_get_contents($path . 'en.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str1, 1 ) . "\n";						}						if ( @is_file($path . 'en_dlg.js') ) {							$str2 = @file_get_contents($path . 'en_dlg.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str2, 1 ) . "\n";						}					}					if ( ! empty($strings) )						$ext_plugins .= "\n" . $strings . "\n";				}				$ext_plugins .= 'tinyMCEPreInit.load_ext("' . $plugurl . '", "' . $mce_locale . '");' . "\n";				$ext_plugins .= 'tinymce.PluginManager.load("' . $name . '", "' . $url . '");' . "\n";			}		}	}	$plugins = implode($plugins, ',');	if ( $teeny ) {		$mce_buttons = apply_filters( 'teeny_mce_buttons', array('bold, italic, underline, blockquote, separator, strikethrough, bullist, numlist,justifyleft, justifycenter, justifyright, undo, redo, link, unlink, fullscreen') );		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = $mce_buttons_3 = $mce_buttons_4 = '';	} else {		$mce_buttons = apply_filters('mce_buttons', array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'link', 'unlink', 'wp_more', '|', 'spellchecker', 'fullscreen', 'wp_adv' ));		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = array('formatselect', 'underline', 'justifyfull', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'media', 'charmap', '|', 'outdent', 'indent', '|', 'undo', 'redo', 'wp_help' );		if ( is_multisite() )			unset( $mce_buttons_2[ array_search( 'media', $mce_buttons_2 ) ] );		$mce_buttons_2 = apply_filters('mce_buttons_2', $mce_buttons_2);		$mce_buttons_2 = implode($mce_buttons_2, ',');		$mce_buttons_3 = apply_filters('mce_buttons_3', array());		$mce_buttons_3 = implode($mce_buttons_3, ',');		$mce_buttons_4 = apply_filters('mce_buttons_4', array());		$mce_buttons_4 = implode($mce_buttons_4, ',');	}	$no_captions = (bool) apply_filters( 'disable_captions', '' );	// TinyMCE init settings	$initArray = array (		'mode' => 'specific_textareas',		'editor_selector' => 'theEditor',		'width' => '100%',		'theme' => 'advanced',		'skin' => 'wp_theme',		'theme_advanced_buttons1' => $mce_buttons,		'theme_advanced_buttons2' => $mce_buttons_2,		'theme_advanced_buttons3' => $mce_buttons_3,		'theme_advanced_buttons4' => $mce_buttons_4,		'language' => $mce_locale,		'spellchecker_languages' => $mce_spellchecker_languages,		'theme_advanced_toolbar_location' => 'top',		'theme_advanced_toolbar_align' => 'left',		'theme_advanced_statusbar_location' => 'bottom',		'theme_advanced_resizing' => true,		'theme_advanced_resize_horizontal' => false,		'dialog_type' => 'modal',		'relative_urls' => false,		'remove_script_host' => false,		'convert_urls' => false,		'apply_source_formatting' => false,		'remove_linebreaks' => true,		'gecko_spellcheck' => true,		'entities' => '38,amp,60,lt,62,gt',		'accessibility_focus' => true,		'tabfocus_elements' => 'major-publishing-actions',		'media_strict' => false,		'paste_remove_styles' => true,		'paste_remove_spans' => true,		'paste_strip_class_attributes' => 'all',		'wpeditimage_disable_captions' => $no_captions,		'plugins' => $plugins	);	if ( ! empty( $editor_styles ) && is_array( $editor_styles ) ) {		$mce_css = array();		$style_uri = get_stylesheet_directory_uri();		if ( TEMPLATEPATH == STYLESHEETPATH ) {			foreach ( $editor_styles as $file )				$mce_css[] = "$style_uri/$file";		} else {			$style_dir    = get_stylesheet_directory();			$template_uri = get_template_directory_uri();			$template_dir = get_template_directory();			foreach ( $editor_styles as $file ) {				if ( file_exists( "$style_dir/$file" ) )					$mce_css[] = "$style_uri/$file";				if ( file_exists( "$template_dir/$file" ) )					$mce_css[] = "$template_uri/$file";			}		}		$mce_css = implode( ',', $mce_css );	} else {		$mce_css = '';	}	$mce_css = trim( apply_filters( 'mce_css', $mce_css ), ' ,' );	if ( ! empty($mce_css) )		$initArray['content_css'] = $mce_css;	if ( is_array($settings) )		$initArray = array_merge($initArray, $settings);	// For people who really REALLY know what they're doing with TinyMCE	// You can modify initArray to add, remove, change elements of the config before tinyMCE.init	// Setting "valid_elements", "invalid_elements" and "extended_valid_elements" can be done through "tiny_mce_before_init".	// Best is to use the default cleanup by not specifying valid_elements, as TinyMCE contains full set of XHTML 1.0.	if ( $teeny ) {		$initArray = apply_filters('teeny_mce_before_init', $initArray);	} else {		$initArray = apply_filters('tiny_mce_before_init', $initArray);	}	if ( empty($initArray['theme_advanced_buttons3']) && !empty($initArray['theme_advanced_buttons4']) ) {		$initArray['theme_advanced_buttons3'] = $initArray['theme_advanced_buttons4'];		$initArray['theme_advanced_buttons4'] = '';	}	if ( ! isset($concatenate_scripts) )		script_concat_settings();	$language = $initArray['language'];	$compressed = $compress_scripts && $concatenate_scripts && isset($_SERVER['HTTP_ACCEPT_ENCODING'])		&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip');	/**	 * Deprecated	 *	 * The tiny_mce_version filter is not needed since external plugins are loaded directly by TinyMCE.	 * These plugins can be refreshed by appending query string to the URL passed to mce_external_plugins filter.	 * If the plugin has a popup dialog, a query string can be added to the button action that opens it (in the plugin's code).	 */	$version = apply_filters('tiny_mce_version', '');	$version = 'ver=' . $tinymce_version . $version;	if ( 'en' != $language )		include_once(ABSPATH . WPINC . '/js/tinymce/langs/wp-langs.php');	$mce_options = '';	foreach ( $initArray as $k => $v )	    $mce_options .= $k . ':"' . $v . '", ';	$mce_options = rtrim( trim($mce_options), '\n\r,' ); ?><script type="text/javascript">/* <![CDATA[ */tinyMCEPreInit = {	base : "<?php echo $baseurl; ?>",	suffix : "",	query : "<?php echo $version; ?>",	mceInit : {<?php echo $mce_options; ?>},	load_ext : function(url,lang){var sl=tinymce.ScriptLoader;sl.markDone(url+'/langs/'+lang+'.js');sl.markDone(url+'/langs/'+lang+'_dlg.js');}};/* ]]> */</script><?php	if ( $compressed )		echo "<script type='text/javascript' src='$baseurl/wp-tinymce.php?c=1&amp;$version'></script>\n";	else		echo "<script type='text/javascript' src='$baseurl/tiny_mce.js?$version'></script>\n";	if ( 'en' != $language && isset($lang) )		echo "<script type='text/javascript'>\n$lang\n</script>\n";	else		echo "<script type='text/javascript' src='$baseurl/langs/wp-langs-en.js?$version'></script>\n";?><script type="text/javascript">/* <![CDATA[ */<?php if ( $ext_plugins ) echo "$ext_plugins\n"; ?><?php if ( $compressed ) { ?>tinyMCEPreInit.go();<?php } else { ?>(function(){var t=tinyMCEPreInit,sl=tinymce.ScriptLoader,ln=t.mceInit.language,th=t.mceInit.theme,pl=t.mceInit.plugins;sl.markDone(t.base+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'_dlg.js');tinymce.each(pl.split(','),function(n){if(n&&n.charAt(0)!='-'){sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'.js');sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'_dlg.js');}});})();<?php } ?>tinyMCE.init(tinyMCEPreInit.mceInit);/* ]]> */</script><?php}
<?php/** * General template tags that can go anywhere in a template. * * @package WordPress * @subpackage Template *//** * Load header template. * * Includes the header template for a theme or if a name is specified then a * specialised header will be included. * * For the parameter, if the file is called "header-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_header' action. * * @param string $name The name of the specialised header. */function get_header( $name = null ) {	do_action( 'get_header', $name );	$templates = array();	if ( isset($name) )		$templates[] = "header-{$name}.php";	$templates[] = "header.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/header.php');}/** * Load footer template. * * Includes the footer template for a theme or if a name is specified then a * specialised footer will be included. * * For the parameter, if the file is called "footer-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_footer' action. * * @param string $name The name of the specialised footer. */function get_footer( $name = null ) {	do_action( 'get_footer', $name );	$templates = array();	if ( isset($name) )		$templates[] = "footer-{$name}.php";	$templates[] = "footer.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/footer.php');}/** * Load sidebar template. * * Includes the sidebar template for a theme or if a name is specified then a * specialised sidebar will be included. * * For the parameter, if the file is called "sidebar-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_sidebar' action. * * @param string $name The name of the specialised sidebar. */function get_sidebar( $name = null ) {	do_action( 'get_sidebar', $name );	$templates = array();	if ( isset($name) )		$templates[] = "sidebar-{$name}.php";	$templates[] = "sidebar.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/sidebar.php');}/** * Load a template part into a template * * Makes it easy for a theme to reuse sections of code in a easy to overload way * for child themes. * * Includes the named template part for a theme or if a name is specified then a * specialised part will be included. If the theme contains no {slug}.php file * then no template will be included. * * The template is included using require, not require_once, so you may include the * same template part multiple times. * * For the parameter, if the file is called "{slug}-special.php" then specify * "special". * * @uses locate_template() * @since 3.0.0 * @uses do_action() Calls 'get_template_part{$slug}' action. * * @param string $slug The slug name for the generic template. * @param string $name The name of the specialised template. */function get_template_part( $slug, $name = null ) {	do_action( "get_template_part_{$slug}", $slug, $name );	$templates = array();	if ( isset($name) )		$templates[] = "{$slug}-{$name}.php";	$templates[] = "{$slug}.php";	locate_template($templates, true, false);}/** * Display search form. * * Will first attempt to locate the searchform.php file in either the child or * the parent, then load it. If it doesn't exist, then the default search form * will be displayed. The default search form is HTML, which will be displayed. * There is a filter applied to the search form HTML in order to edit or replace * it. The filter is 'get_search_form'. * * This function is primarily used by themes which want to hardcode the search * form into the sidebar and also by the search widget in WordPress. * * There is also an action that is called whenever the function is run called, * 'get_search_form'. This can be useful for outputting JavaScript that the * search relies on or various formatting that applies to the beginning of the * search. To give a few examples of what it can be used for. * * @since 2.7.0 * @param boolean $echo Default to echo and not return the form. */function get_search_form($echo = true) {	do_action( 'get_search_form' );	$search_form_template = locate_template(array('searchform.php'));	if ( '' != $search_form_template ) {		require($search_form_template);		return;	}	$form = '<form role="search" method="get" id="searchform" action="' . home_url( '/' ) . '" >	<div><label class="screen-reader-text" for="s">' . __('Search for:') . '</label>	<input type="text" value="' . get_search_query() . '" name="s" id="s" />	<input type="submit" id="searchsubmit" value="'. esc_attr__('Search') .'" />	</div>	</form>';	if ( $echo )		echo apply_filters('get_search_form', $form);	else		return apply_filters('get_search_form', $form);}/** * Display the Log In/Out link. * * Displays a link, which allows users to navigate to the Log In page to log in * or log out depending on whether they are currently logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'loginout' hook on HTML link content. * * @param string $redirect Optional path to redirect to on login/logout. * @param boolean $echo Default to echo and not return the link. */function wp_loginout($redirect = '', $echo = true) {	if ( ! is_user_logged_in() )		$link = '<a href="' . esc_url( wp_login_url($redirect) ) . '">' . __('Log in') . '</a>';	else		$link = '<a href="' . esc_url( wp_logout_url($redirect) ) . '">' . __('Log out') . '</a>';	if ( $echo )		echo apply_filters('loginout', $link);	else		return apply_filters('loginout', $link);}/** * Returns the Log Out URL. * * Returns the URL that allows the user to log out of the site * * @since 2.7 * @uses wp_nonce_url() To protect against CSRF * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'logout_url' hook on final logout url * * @param string $redirect Path to redirect to on logout. */function wp_logout_url($redirect = '') {	$args = array( 'action' => 'logout' );	if ( !empty($redirect) ) {		$args['redirect_to'] = urlencode( $redirect );	}	$logout_url = add_query_arg($args, site_url('wp-login.php', 'login'));	$logout_url = wp_nonce_url( $logout_url, 'log-out' );	return apply_filters('logout_url', $logout_url, $redirect);}/** * Returns the Log In URL. * * Returns the URL that allows the user to log in to the site * * @since 2.7 * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'login_url' hook on final login url * * @param string $redirect Path to redirect to on login. * @param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false. * @return string A log in url */function wp_login_url($redirect = '', $force_reauth = false) {	$login_url = site_url('wp-login.php', 'login');	if ( !empty($redirect) )		$login_url = add_query_arg('redirect_to', urlencode($redirect), $login_url);	if ( $force_reauth )		$login_url = add_query_arg('reauth', '1', $login_url);	return apply_filters('login_url', $login_url, $redirect);}/** * Provides a simple login form for use anywhere within WordPress. By default, it echoes * the HTML immediately. Pass array('echo'=>false) to return the string instead. * * @since 3.0.0 * @param array $args Configuration options to modify the form output * @return Void, or string containing the form */function wp_login_form( $args = array() ) {	$defaults = array( 'echo' => true,						'redirect' => site_url( $_SERVER['REQUEST_URI'] ), // Default redirect is back to the current page	 					'form_id' => 'loginform',						'label_username' => __( 'Username' ),						'label_password' => __( 'Password' ),						'label_remember' => __( 'Remember Me' ),						'label_log_in' => __( 'Log In' ),						'id_username' => 'user_login',						'id_password' => 'user_pass',						'id_remember' => 'rememberme',						'id_submit' => 'wp-submit',						'remember' => true,						'value_username' => '',						'value_remember' => false, // Set this to true to default the "Remember me" checkbox to checked					);	$args = wp_parse_args( $args, apply_filters( 'login_form_defaults', $defaults ) );	$form = '		<form name="' . $args['form_id'] . '" id="' . $args['form_id'] . '" action="' . site_url( 'wp-login.php', 'login' ) . '" method="post">			' . apply_filters( 'login_form_top', '' ) . '			<p class="login-username">				<label for="' . esc_attr( $args['id_username'] ) . '">' . esc_html( $args['label_username'] ) . '</label>				<input type="text" name="log" id="' . esc_attr( $args['id_username'] ) . '" class="input" value="' . esc_attr( $args['value_username'] ) . '" size="20" tabindex="10" />			</p>			<p class="login-password">				<label for="' . esc_attr( $args['id_password'] ) . '">' . esc_html( $args['label_password'] ) . '</label>				<input type="password" name="pwd" id="' . esc_attr( $args['id_password'] ) . '" class="input" value="" size="20" tabindex="20" />			</p>			' . apply_filters( 'login_form_middle', '' ) . '			' . ( $args['remember'] ? '<p class="login-remember"><label><input name="rememberme" type="checkbox" id="' . esc_attr( $args['id_remember'] ) . '" value="forever" tabindex="90"' . ( $args['value_remember'] ? ' checked="checked"' : '' ) . ' /> ' . esc_html( $args['label_remember'] ) . '</label></p>' : '' ) . '			<p class="login-submit">				<input type="submit" name="wp-submit" id="' . esc_attr( $args['id_submit'] ) . '" class="button-primary" value="' . esc_attr( $args['label_log_in'] ) . '" tabindex="100" />				<input type="hidden" name="redirect_to" value="' . esc_attr( $args['redirect'] ) . '" />			</p>			' . apply_filters( 'login_form_bottom', '' ) . '		</form>';	if ( $args['echo'] )		echo $form;	else		return $form;}/** * Returns the Lost Password URL. * * Returns the URL that allows the user to retrieve the lost password * * @since 2.8.0 * @uses site_url() To generate the lost password URL * @uses apply_filters() calls 'lostpassword_url' hook on the lostpassword url * * @param string $redirect Path to redirect to on login. */function wp_lostpassword_url($redirect = '') {	$args = array( 'action' => 'lostpassword' );	if ( !empty($redirect) ) {		$args['redirect_to'] = $redirect;	}	$lostpassword_url = add_query_arg($args, site_url('wp-login.php', 'login'));	return apply_filters('lostpassword_url', $lostpassword_url, $redirect);}/** * Display the Registration or Admin link. * * Display a link which allows the user to navigate to the registration page if * not logged in and registration is enabled or to the dashboard if logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'register' hook on register / admin link content. * * @param string $before Text to output before the link (defaults to <li>). * @param string $after Text to output after the link (defaults to </li>). * @param boolean $echo Default to echo and not return the link. */function wp_register( $before = '<li>', $after = '</li>', $echo = true ) {	if ( ! is_user_logged_in() ) {		if ( get_option('users_can_register') )			$link = $before . '<a href="' . site_url('wp-login.php?action=register', 'login') . '">' . __('Register') . '</a>' . $after;		else			$link = '';	} else {		$link = $before . '<a href="' . admin_url() . '">' . __('Site Admin') . '</a>' . $after;	}	if ( $echo )		echo apply_filters('register', $link);	else		return apply_filters('register', $link);}/** * Theme container function for the 'wp_meta' action. * * The 'wp_meta' action can have several purposes, depending on how you use it, * but one purpose might have been to allow for theme switching. * * @since 1.5.0 * @link http://trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action. * @uses do_action() Calls 'wp_meta' hook. */function wp_meta() {	do_action('wp_meta');}/** * Display information about the blog. * * @see get_bloginfo() For possible values for the parameter. * @since 0.71 * * @param string $show What to display. */function bloginfo( $show='' ) {	echo get_bloginfo( $show, 'display' );}/** * Retrieve information about the blog. * * Some show parameter values are deprecated and will be removed in future * versions. These options will trigger the _deprecated_argument() function. * The deprecated blog info options are listed in the function contents. * * The possible values for the 'show' parameter are listed below. * <ol> * <li><strong>url<strong> - Blog URI to homepage.</li> * <li><strong>wpurl</strong> - Blog URI path to WordPress.</li> * <li><strong>description</strong> - Secondary title</li> * </ol> * * The feed URL options can be retrieved from 'rdf_url' (RSS 0.91), * 'rss_url' (RSS 1.0), 'rss2_url' (RSS 2.0), or 'atom_url' (Atom feed). The * comment feeds can be retrieved from the 'comments_atom_url' (Atom comment * feed) or 'comments_rss2_url' (RSS 2.0 comment feed). * * @since 0.71 * * @param string $show Blog info to retrieve. * @param string $filter How to filter what is retrieved. * @return string Mostly string values, might be empty. */function get_bloginfo( $show = '', $filter = 'raw' ) {	switch( $show ) {		case 'home' : // DEPRECATED		case 'siteurl' : // DEPRECATED			_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> option instead.' ), 'url'  ) );		case 'url' :			$output = home_url();			break;		case 'wpurl' :			$output = site_url();			break;		case 'description':			$output = get_option('blogdescription');			break;		case 'rdf_url':			$output = get_feed_link('rdf');			break;		case 'rss_url':			$output = get_feed_link('rss');			break;		case 'rss2_url':			$output = get_feed_link('rss2');			break;		case 'atom_url':			$output = get_feed_link('atom');			break;		case 'comments_atom_url':			$output = get_feed_link('comments_atom');			break;		case 'comments_rss2_url':			$output = get_feed_link('comments_rss2');			break;		case 'pingback_url':			$output = get_option('siteurl') .'/xmlrpc.php';			break;		case 'stylesheet_url':			$output = get_stylesheet_uri();			break;		case 'stylesheet_directory':			$output = get_stylesheet_directory_uri();			break;		case 'template_directory':		case 'template_url':			$output = get_template_directory_uri();			break;		case 'admin_email':			$output = get_option('admin_email');			break;		case 'charset':			$output = get_option('blog_charset');			if ('' == $output) $output = 'UTF-8';			break;		case 'html_type' :			$output = get_option('html_type');			break;		case 'version':			global $wp_version;			$output = $wp_version;			break;		case 'language':			$output = get_locale();			$output = str_replace('_', '-', $output);			break;		case 'text_direction':			//_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> function instead.' ), 'is_rtl()'  ) );			if ( function_exists( 'is_rtl' ) ) {				$output = is_rtl() ? 'rtl' : 'ltr';			} else {				$output = 'ltr';			}			break;		case 'name':		default:			$output = get_option('blogname');			break;	}	$url = true;	if (strpos($show, 'url') === false &&		strpos($show, 'directory') === false &&		strpos($show, 'home') === false)		$url = false;	if ( 'display' == $filter ) {		if ( $url )			$output = apply_filters('bloginfo_url', $output, $show);		else			$output = apply_filters('bloginfo', $output, $show);	}	return $output;}/** * Display or retrieve page title for all areas of blog. * * By default, the page title will display the separator before the page title, * so that the blog title will be before the page title. This is not good for * title display, since the blog title shows up on most tabs and not what is * important, which is the page that the user is looking at. * * There are also SEO benefits to having the blog title after or to the 'right' * or the page title. However, it is mostly common sense to have the blog title * to the right with most browsers supporting tabs. You can achieve this by * using the seplocation parameter and setting the value to 'right'. This change * was introduced around 2.5.0, in case backwards compatibility of themes is * important. * * @since 1.0.0 * * @param string $sep Optional, default is '&raquo;'. How to separate the various items within the page title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @param string $seplocation Optional. Direction to display title, 'right'. * @return string|null String on retrieve, null when displaying. */function wp_title($sep = '&raquo;', $display = true, $seplocation = '') {	global $wpdb, $wp_locale, $wp_query;	$cat = get_query_var('cat');	$tag = get_query_var('tag_id');	$category_name = get_query_var('category_name');	$author = get_query_var('author');	$author_name = get_query_var('author_name');	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	$day = get_query_var('day');	$search = get_query_var('s');	$title = '';	$t_sep = '%WP_TITILE_SEP%'; // Temporary separator, for accurate flipping, if necessary	// If there's a category	if ( !empty($cat) ) {			// category exclusion			if ( !stristr($cat,'-') )				$title = apply_filters('single_cat_title', get_the_category_by_ID($cat));	} elseif ( !empty($category_name) ) {		if ( stristr($category_name,'/') ) {				$category_name = explode('/',$category_name);				if ( $category_name[count($category_name)-1] )					$category_name = $category_name[count($category_name)-1]; // no trailing slash				else					$category_name = $category_name[count($category_name)-2]; // there was a trailling slash		}		$cat = get_term_by('slug', $category_name, 'category', OBJECT, 'display');		if ( $cat )			$title = apply_filters('single_cat_title', $cat->name);	}	if ( !empty($tag) ) {		$tag = get_term($tag, 'post_tag', OBJECT, 'display');		if ( is_wp_error( $tag ) )			return $tag;		if ( ! empty($tag->name) )			$title = apply_filters('single_tag_title', $tag->name);	}	// If there's an author	if ( !empty($author) ) {		$title = get_userdata($author);		$title = $title->display_name;	}	if ( !empty($author_name) ) {		// We do a direct query here because we don't cache by nicename.		$title = $wpdb->get_var($wpdb->prepare("SELECT display_name FROM $wpdb->users WHERE user_nicename = %s", $author_name));	}	// If there's a month	if ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));		$my_day = intval(substr($m, 6, 2));		$title = $my_year . ($my_month ? $t_sep . $my_month : "") . ($my_day ? $t_sep . $my_day : "");	}	if ( !empty($year) ) {		$title = $year;		if ( !empty($monthnum) )			$title .= $t_sep . $wp_locale->get_month($monthnum);		if ( !empty($day) )			$title .= $t_sep . zeroise($day, 2);	}	// If there is a post	if ( is_single() || ( is_home() && !is_front_page() ) || ( is_page() && !is_front_page() ) ) {		$post = $wp_query->get_queried_object();		$title = apply_filters( 'single_post_title', $post->post_title );	}	// If there's a taxonomy	if ( is_tax() ) {		$taxonomy = get_query_var( 'taxonomy' );		$tax = get_taxonomy( $taxonomy );		$term = $wp_query->get_queried_object();		$term = $term->name;		$title = $tax->labels->name . $t_sep . $term;	}	//If it's a search	if ( is_search() ) {		/* translators: 1: separator, 2: search phrase */		$title = sprintf(__('Search Results %1$s %2$s'), $t_sep, strip_tags($search));	}	if ( is_404() ) {		$title = __('Page not found');	}	$prefix = '';	if ( !empty($title) )		$prefix = " $sep "; 	// Determines position of the separator and direction of the breadcrumb	if ( 'right' == $seplocation ) { // sep on right, so reverse the order		$title_array = explode( $t_sep, $title );		$title_array = array_reverse( $title_array );		$title = implode( " $sep ", $title_array ) . $prefix;	} else {		$title_array = explode( $t_sep, $title );		$title = $prefix . implode( " $sep ", $title_array );	}	$title = apply_filters('wp_title', $title, $sep, $seplocation);	// Send it out	if ( $display )		echo $title;	else		return $title;}/** * Display or retrieve page title for post. * * This is optimized for single.php template file for displaying the post title. * Only useful for posts, does not support pages for example. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * @uses $wpdb * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_post_title($prefix = '', $display = true) {	global $wp_query, $post;	if ( ! $post )		$_post = $wp_query->get_queried_object();	else		$_post = $post;	if ( !isset($_post->post_title) )		return;	$title = apply_filters('single_post_title', $_post->post_title, $_post);	if ( $display )		echo $prefix . $title;	else		return $title;}/** * Display or retrieve page title for category archive. * * This is useful for category template file or files, because it is optimized * for category page title and with less overhead than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_cat_title($prefix = '', $display = true ) {	global $wp_query;	if ( is_tag() )		return single_tag_title($prefix, $display);	if ( !is_category() )		return;	$cat = $wp_query->get_queried_object();	$my_cat_name = apply_filters('single_cat_title', $cat->name);	if ( !empty($my_cat_name) ) {		if ( $display )			echo $prefix . $my_cat_name;		else			return $my_cat_name;	}}/** * Display or retrieve page title for tag post archive. * * Useful for tag template files for displaying the tag page title. It has less * overhead than {@link wp_title()}, because of its limited implementation. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 2.3.0 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_tag_title($prefix = '', $display = true ) {	global $wp_query;	if ( !is_tag() )		return;	$tag = $wp_query->get_queried_object();	if ( ! $tag )		return;	$my_tag_name = apply_filters('single_tag_title', $tag->name);	if ( !empty($my_tag_name) ) {		if ( $display )			echo $prefix . $my_tag_name;		else			return $my_tag_name;	}}/** * Display or retrieve page title for post archive based on date. * * Useful for when the template only needs to display the month and year, if * either are available. Optimized for just this purpose, so if it is all that * is needed, should be better than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_month_title($prefix = '', $display = true ) {	global $wp_locale;	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	if ( !empty($monthnum) && !empty($year) ) {		$my_year = $year;		$my_month = $wp_locale->get_month($monthnum);	} elseif ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));	}	if ( empty($my_month) )		return false;	$result = $prefix . $my_month . $prefix . $my_year;	if ( !$display )		return $result;	echo $result;}/** * Retrieve archive link content based on predefined or custom code. * * The format can be one of four styles. The 'link' for head element, 'option' * for use in the select element, 'html' for use in list (either ol or ul HTML * elements). Custom content is also supported using the before and after * parameters. * * The 'link' format uses the link HTML element with the <em>archives</em> * relationship. The before and after parameters are not used. The text * parameter is used to describe the link. * * The 'option' format uses the option HTML element for use in select element. * The value is the url parameter and the before and after parameters are used * between the text description. * * The 'html' format, which is the default, uses the li HTML element for use in * the list HTML elements. The before parameter is before the link and the after * parameter is after the closing link. * * The custom format uses the before parameter before the link ('a' HTML * element) and the after parameter after the closing link tag. If the above * three values for the format are not used, then custom format is assumed. * * @since 1.0.0 * * @param string $url URL to archive. * @param string $text Archive text description. * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom. * @param string $before Optional. * @param string $after Optional. * @return string HTML link content for archive. */function get_archives_link($url, $text, $format = 'html', $before = '', $after = '') {	$text = wptexturize($text);	$title_text = esc_attr($text);	$url = esc_url($url);	if ('link' == $format)		$link_html = "\t<link rel='archives' title='$title_text' href='$url' />\n";	elseif ('option' == $format)		$link_html = "\t<option value='$url'>$before $text $after</option>\n";	elseif ('html' == $format)		$link_html = "\t<li>$before<a href='$url' title='$title_text'>$text</a>$after</li>\n";	else // custom		$link_html = "\t$before<a href='$url' title='$title_text'>$text</a>$after\n";	$link_html = apply_filters( "get_archives_link", $link_html );	return $link_html;}/** * Display archive links based on type and format. * * The 'type' argument offers a few choices and by default will display monthly * archive links. The other options for values are 'daily', 'weekly', 'monthly', * 'yearly', 'postbypost' or 'alpha'. Both 'postbypost' and 'alpha' display the * same archive link list, the difference between the two is that 'alpha' * will order by post title and 'postbypost' will order by post date. * * The date archives will logically display dates with links to the archive post * page. The 'postbypost' and 'alpha' values for 'type' argument will display * the post titles. * * The 'limit' argument will only display a limited amount of links, specified * by the 'limit' integer value. By default, there is no limit. The * 'show_post_count' argument will show how many posts are within the archive. * By default, the 'show_post_count' argument is set to false. * * For the 'format', 'before', and 'after' arguments, see {@link * get_archives_link()}. The values of these arguments have to do with that * function. * * @since 1.2.0 * * @param string|array $args Optional. Override defaults. */function wp_get_archives($args = '') {	global $wpdb, $wp_locale;	$defaults = array(		'type' => 'monthly', 'limit' => '',		'format' => 'html', 'before' => '',		'after' => '', 'show_post_count' => false,		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	if ( '' == $type )		$type = 'monthly';	if ( '' != $limit ) {		$limit = absint($limit);		$limit = ' LIMIT '.$limit;	}	// this is what will separate dates on weekly archive links	$archive_week_separator = '&#8211;';	// over-ride general date format ? 0 = no: use the date format set in Options, 1 = yes: over-ride	$archive_date_format_over_ride = 0;	// options for daily archive (only if you over-ride the general date format)	$archive_day_date_format = 'Y/m/d';	// options for weekly archive (only if you over-ride the general date format)	$archive_week_start_date_format = 'Y/m/d';	$archive_week_end_date_format	= 'Y/m/d';	if ( !$archive_date_format_over_ride ) {		$archive_day_date_format = get_option('date_format');		$archive_week_start_date_format = get_option('date_format');		$archive_week_end_date_format = get_option('date_format');	}	//filters	$where = apply_filters('getarchives_where', "WHERE post_type = 'post' AND post_status = 'publish'", $r );	$join = apply_filters('getarchives_join', "", $r);	$output = '';	if ( 'monthly' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url = get_month_link( $arcresult->year, $arcresult->month );				/* translators: 1: month name, 2: 4-digit year */				$text = sprintf(__('%1$s %2$d'), $wp_locale->get_month($arcresult->month), $arcresult->year);				if ( $show_post_count )					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ('yearly' == $type) {		$query = "SELECT YEAR(post_date) AS `year`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ($arcresults) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult) {				$url = get_year_link($arcresult->year);				$text = sprintf('%d', $arcresult->year);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'daily' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, DAYOFMONTH(post_date) AS `dayofmonth`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date), DAYOFMONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url	= get_day_link($arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$date = sprintf('%1$d-%2$02d-%3$02d 00:00:00', $arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$text = mysql2date($archive_day_date_format, $date);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'weekly' == $type ) {		$week = _wp_mysql_week( '`post_date`' );		$query = "SELECT DISTINCT $week AS `week`, YEAR( `post_date` ) AS `yr`, DATE_FORMAT( `post_date`, '%Y-%m-%d' ) AS `yyyymmdd`, count( `ID` ) AS `posts` FROM `$wpdb->posts` $join $where GROUP BY $week, YEAR( `post_date` ) ORDER BY `post_date` DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		$arc_w_last = '';		$afterafter = $after;		if ( $arcresults ) {				foreach ( (array) $arcresults as $arcresult ) {					if ( $arcresult->week != $arc_w_last ) {						$arc_year = $arcresult->yr;						$arc_w_last = $arcresult->week;						$arc_week = get_weekstartend($arcresult->yyyymmdd, get_option('start_of_week'));						$arc_week_start = date_i18n($archive_week_start_date_format, $arc_week['start']);						$arc_week_end = date_i18n($archive_week_end_date_format, $arc_week['end']);						$url  = sprintf('%1$s/%2$s%3$sm%4$s%5$s%6$sw%7$s%8$d', home_url(), '', '?', '=', $arc_year, '&amp;', '=', $arcresult->week);						$text = $arc_week_start . $archive_week_separator . $arc_week_end;						if ($show_post_count)							$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;						$output .= get_archives_link($url, $text, $format, $before, $after);					}				}		}	} elseif ( ( 'postbypost' == $type ) || ('alpha' == $type) ) {		$orderby = ('alpha' == $type) ? "post_title ASC " : "post_date DESC ";		$query = "SELECT * FROM $wpdb->posts $join $where ORDER BY $orderby $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			foreach ( (array) $arcresults as $arcresult ) {				if ( $arcresult->post_date != '0000-00-00 00:00:00' ) {					$url  = get_permalink($arcresult);					$arc_title = $arcresult->post_title;					if ( $arc_title )						$text = strip_tags(apply_filters('the_title', $arc_title));					else						$text = $arcresult->ID;					$output .= get_archives_link($url, $text, $format, $before, $after);				}			}		}	}	if ( $echo )		echo $output;	else		return $output;}/** * Get number of days since the start of the week. * * @since 1.5.0 * @usedby get_calendar() * * @param int $num Number of day. * @return int Days since the start of the week. */function calendar_week_mod($num) {	$base = 7;	return ($num - $base*floor($num/$base));}/** * Display calendar with days that have posts as links. * * The calendar is cached, which will be retrieved, if it exists. If there are * no posts for the month, then it will not be displayed. * * @since 1.0.0 * * @param bool $initial Optional, default is true. Use initial calendar names. * @param bool $echo Optional, default is true. Set to false for return. */function get_calendar($initial = true, $echo = true) {	global $wpdb, $m, $monthnum, $year, $wp_locale, $posts;	$cache = array();	$key = md5( $m . $monthnum . $year );	if ( $cache = wp_cache_get( 'get_calendar', 'calendar' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			if ( $echo ) {				echo apply_filters( 'get_calendar',  $cache[$key] );				return;			} else {				return apply_filters( 'get_calendar',  $cache[$key] );			}		}	}	if ( !is_array($cache) )		$cache = array();	// Quick check. If we have no posts at all, abort!	if ( !$posts ) {		$gotsome = $wpdb->get_var("SELECT 1 as test FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'publish' LIMIT 1");		if ( !$gotsome ) {			$cache[ $key ] = '';			wp_cache_set( 'get_calendar', $cache, 'calendar' );			return;		}	}	if ( isset($_GET['w']) )		$w = ''.intval($_GET['w']);	// week_begins = 0 stands for Sunday	$week_begins = intval(get_option('start_of_week'));	// Let's figure out when we are	if ( !empty($monthnum) && !empty($year) ) {		$thismonth = ''.zeroise(intval($monthnum), 2);		$thisyear = ''.intval($year);	} elseif ( !empty($w) ) {		// We need to get the month from MySQL		$thisyear = ''.intval(substr($m, 0, 4));		$d = (($w - 1) * 7) + 6; //it seems MySQL's weeks disagree with PHP's		$thismonth = $wpdb->get_var("SELECT DATE_FORMAT((DATE_ADD('${thisyear}0101', INTERVAL $d DAY) ), '%m')");	} elseif ( !empty($m) ) {		$thisyear = ''.intval(substr($m, 0, 4));		if ( strlen($m) < 6 )				$thismonth = '01';		else				$thismonth = ''.zeroise(intval(substr($m, 4, 2)), 2);	} else {		$thisyear = gmdate('Y', current_time('timestamp'));		$thismonth = gmdate('m', current_time('timestamp'));	}	$unixmonth = mktime(0, 0 , 0, $thismonth, 1, $thisyear);	// Get the next and previous month and year with at least one post	$previous = $wpdb->get_row("SELECT DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date < '$thisyear-$thismonth-01'		AND post_type = 'post' AND post_status = 'publish'			ORDER BY post_date DESC			LIMIT 1");	$next = $wpdb->get_row("SELECT	DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date >	'$thisyear-$thismonth-01'		AND MONTH( post_date ) != MONTH( '$thisyear-$thismonth-01' )		AND post_type = 'post' AND post_status = 'publish'			ORDER	BY post_date ASC			LIMIT 1");	/* translators: Calendar caption: 1: month name, 2: 4-digit year */	$calendar_caption = _x('%1$s %2$s', 'calendar caption');	$calendar_output = '<table id="wp-calendar" summary="' . esc_attr__('Calendar') . '">	<caption>' . sprintf($calendar_caption, $wp_locale->get_month($thismonth), date('Y', $unixmonth)) . '</caption>	<thead>	<tr>';	$myweek = array();	for ( $wdcount=0; $wdcount<=6; $wdcount++ ) {		$myweek[] = $wp_locale->get_weekday(($wdcount+$week_begins)%7);	}	foreach ( $myweek as $wd ) {		$day_name = (true == $initial) ? $wp_locale->get_weekday_initial($wd) : $wp_locale->get_weekday_abbrev($wd);		$wd = esc_attr($wd);		$calendar_output .= "\n\t\t<th scope=\"col\" title=\"$wd\">$day_name</th>";	}	$calendar_output .= '	</tr>	</thead>	<tfoot>	<tr>';	if ( $previous ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev"><a href="' . get_month_link($previous->year, $previous->month) . '" title="' . sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($previous->month), date('Y', mktime(0, 0 , 0, $previous->month, 1, $previous->year))) . '">&laquo; ' . $wp_locale->get_month_abbrev($wp_locale->get_month($previous->month)) . '</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev" class="pad">&nbsp;</td>';	}	$calendar_output .= "\n\t\t".'<td class="pad">&nbsp;</td>';	if ( $next ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next"><a href="' . get_month_link($next->year, $next->month) . '" title="' . esc_attr( sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($next->month), date('Y', mktime(0, 0 , 0, $next->month, 1, $next->year))) ) . '">' . $wp_locale->get_month_abbrev($wp_locale->get_month($next->month)) . ' &raquo;</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next" class="pad">&nbsp;</td>';	}	$calendar_output .= '	</tr>	</tfoot>	<tbody>	<tr>';	// Get days with posts	$dayswithposts = $wpdb->get_results("SELECT DISTINCT DAYOFMONTH(post_date)		FROM $wpdb->posts WHERE MONTH(post_date) = '$thismonth'		AND YEAR(post_date) = '$thisyear'		AND post_type = 'post' AND post_status = 'publish'		AND post_date < '" . current_time('mysql') . '\'', ARRAY_N);	if ( $dayswithposts ) {		foreach ( (array) $dayswithposts as $daywith ) {			$daywithpost[] = $daywith[0];		}	} else {		$daywithpost = array();	}	if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'camino') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false)		$ak_title_separator = "\n";	else		$ak_title_separator = ', ';	$ak_titles_for_day = array();	$ak_post_titles = $wpdb->get_results("SELECT ID, post_title, DAYOFMONTH(post_date) as dom "		."FROM $wpdb->posts "		."WHERE YEAR(post_date) = '$thisyear' "		."AND MONTH(post_date) = '$thismonth' "		."AND post_date < '".current_time('mysql')."' "		."AND post_type = 'post' AND post_status = 'publish'"	);	if ( $ak_post_titles ) {		foreach ( (array) $ak_post_titles as $ak_post_title ) {				$post_title = esc_attr( apply_filters( 'the_title', $ak_post_title->post_title, $ak_post_title->ID ) );				if ( empty($ak_titles_for_day['day_'.$ak_post_title->dom]) )					$ak_titles_for_day['day_'.$ak_post_title->dom] = '';				if ( empty($ak_titles_for_day["$ak_post_title->dom"]) ) // first one					$ak_titles_for_day["$ak_post_title->dom"] = $post_title;				else					$ak_titles_for_day["$ak_post_title->dom"] .= $ak_title_separator . $post_title;		}	}	// See how much we should pad in the beginning	$pad = calendar_week_mod(date('w', $unixmonth)-$week_begins);	if ( 0 != $pad )		$calendar_output .= "\n\t\t".'<td colspan="'. esc_attr($pad) .'" class="pad">&nbsp;</td>';	$daysinmonth = intval(date('t', $unixmonth));	for ( $day = 1; $day <= $daysinmonth; ++$day ) {		if ( isset($newrow) && $newrow )			$calendar_output .= "\n\t</tr>\n\t<tr>\n\t\t";		$newrow = false;		if ( $day == gmdate('j', current_time('timestamp')) && $thismonth == gmdate('m', current_time('timestamp')) && $thisyear == gmdate('Y', current_time('timestamp')) )			$calendar_output .= '<td id="today">';		else			$calendar_output .= '<td>';		if ( in_array($day, $daywithpost) ) // any posts today?				$calendar_output .= '<a href="' . get_day_link($thisyear, $thismonth, $day) . "\" title=\"" . esc_attr($ak_titles_for_day[$day]) . "\">$day</a>";		else			$calendar_output .= $day;		$calendar_output .= '</td>';		if ( 6 == calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins) )			$newrow = true;	}	$pad = 7 - calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins);	if ( $pad != 0 && $pad != 7 )		$calendar_output .= "\n\t\t".'<td class="pad" colspan="'. esc_attr($pad) .'">&nbsp;</td>';	$calendar_output .= "\n\t</tr>\n\t</tbody>\n\t</table>";	$cache[ $key ] = $calendar_output;	wp_cache_set( 'get_calendar', $cache, 'calendar' );	if ( $echo )		echo apply_filters( 'get_calendar',  $calendar_output );	else		return apply_filters( 'get_calendar',  $calendar_output );}/** * Purge the cached results of get_calendar. * * @see get_calendar * @since 2.1.0 */function delete_get_calendar_cache() {	wp_cache_delete( 'get_calendar', 'calendar' );}add_action( 'save_post', 'delete_get_calendar_cache' );add_action( 'delete_post', 'delete_get_calendar_cache' );add_action( 'update_option_start_of_week', 'delete_get_calendar_cache' );add_action( 'update_option_gmt_offset', 'delete_get_calendar_cache' );/** * Display all of the allowed tags in HTML format with attributes. * * This is useful for displaying in the comment area, which elements and * attributes are supported. As well as any plugins which want to display it. * * @since 1.0.1 * @uses $allowedtags * * @return string HTML allowed tags entity encoded. */function allowed_tags() {	global $allowedtags;	$allowed = '';	foreach ( (array) $allowedtags as $tag => $attributes ) {		$allowed .= '<'.$tag;		if ( 0 < count($attributes) ) {			foreach ( $attributes as $attribute => $limits ) {				$allowed .= ' '.$attribute.'=""';			}		}		$allowed .= '> ';	}	return htmlentities($allowed);}/***** Date/Time tags *****//** * Outputs the date in iso8601 format for xml files. * * @since 1.0.0 */function the_date_xml() {	global $post;	echo mysql2date('Y-m-d', $post->post_date, false);}/** * Display or Retrieve the date the current $post was written (once per date) * * Will only output the date if the current post's date is different from the * previous one output. * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the * function is called several times for each post. * * HTML output can be filtered with 'the_date'. * Date string output can be filtered with 'get_the_date'. * * @since 0.71 * @uses get_the_date() * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_date( $d = '', $before = '', $after = '', $echo = true ) {	global $day, $previousday;	$the_date = '';	if ( $day != $previousday ) {		$the_date .= $before;		$the_date .= get_the_date( $d );		$the_date .= $after;		$previousday = $day;		$the_date = apply_filters('the_date', $the_date, $d, $before, $after);		if ( $echo )			echo $the_date;		else			return $the_date;	}	return null;}/** * Retrieve the date the current $post was written. * * Unlike the_date() this function will always return the date. * Modify output with 'get_the_date' filter. * * @since 3.0.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @return string|null Null if displaying, string if retrieving. */function get_the_date( $d = '' ) {	global $post;	$the_date = '';	if ( '' == $d )		$the_date .= mysql2date(get_option('date_format'), $post->post_date);	else		$the_date .= mysql2date($d, $post->post_date);	return apply_filters('get_the_date', $the_date, $d);}/** * Display the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_modified_date($d = '', $before='', $after='', $echo = true) {	$the_modified_date = $before . get_the_modified_date($d) . $after;	$the_modified_date = apply_filters('the_modified_date', $the_modified_date, $d, $before, $after);	if ( $echo )		echo $the_modified_date;	else		return $the_modified_date;}/** * Retrieve the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format. Defaults to the "date_format" option * @return string */function get_the_modified_date($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('date_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_date', $the_time, $d);}/** * Display the time at which the post was written. * * @since 0.71 * * @param string $d Either 'G', 'U', or php date format. */function the_time( $d = '' ) {	echo apply_filters('the_time', get_the_time( $d ), $d);}/** * Retrieve the time at which the post was written. * * @since 1.5.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @param int|object $post Optional post ID or object. Default is global $post object. * @return string */function get_the_time( $d = '', $post = null ) {	$post = get_post($post);	if ( '' == $d )		$the_time = get_post_time(get_option('time_format'), false, $post, true);	else		$the_time = get_post_time($d, false, $post, true);	return apply_filters('get_the_time', $the_time, $d, $post);}/** * Retrieve the time at which the post was written. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional post ID or object. Default is global $post object. * @param bool $translate Whether to translate the time string * @return string */function get_post_time( $d = 'U', $gmt = false, $post = null, $translate = false ) { // returns timestamp	$post = get_post($post);	if ( $gmt )		$time = $post->post_date_gmt;	else		$time = $post->post_date;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_time', $time, $d, $gmt);}/** * Display the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. */function the_modified_time($d = '') {	echo apply_filters('the_modified_time', get_the_modified_time($d), $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @return string */function get_the_modified_time($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('time_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_time', $the_time, $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional, default is 'U'. Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional, default is global post object. A post_id or post object * @param bool $translate Optional, default is false. Whether to translate the result * @return string Returns timestamp */function get_post_modified_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {	$post = get_post($post);	if ( $gmt )		$time = $post->post_modified_gmt;	else		$time = $post->post_modified;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_modified_time', $time, $d, $gmt);}/** * Display the weekday on which the post was written. * * @since 0.71 * @uses $wp_locale * @uses $post */function the_weekday() {	global $wp_locale, $post;	$the_weekday = $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));	$the_weekday = apply_filters('the_weekday', $the_weekday);	echo $the_weekday;}/** * Display the weekday on which the post was written. * * Will only output the weekday if the current post's weekday is different from * the previous one output. * * @since 0.71 * * @param string $before Optional Output before the date. * @param string $after Optional Output after the date.  */function the_weekday_date($before='',$after='') {	global $wp_locale, $post, $day, $previousweekday;	$the_weekday_date = '';	if ( $day != $previousweekday ) {		$the_weekday_date .= $before;		$the_weekday_date .= $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));		$the_weekday_date .= $after;		$previousweekday = $day;	}	$the_weekday_date = apply_filters('the_weekday_date', $the_weekday_date, $before, $after);	echo $the_weekday_date;}/** * Fire the wp_head action * * @since 1.2.0 * @uses do_action() Calls 'wp_head' hook. */function wp_head() {	do_action('wp_head');}/** * Fire the wp_footer action * * @since 1.5.1 * @uses do_action() Calls 'wp_footer' hook. */function wp_footer() {	do_action('wp_footer');}/** * Display the links to the general feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links( $args = array() ) {	if ( !current_theme_supports('automatic-feed-links') )		return;	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'	=> _x('&raquo;', 'feed link'),		/* translators: 1: blog title, 2: separator (raquo) */		'feedtitle'	=> __('%1$s %2$s Feed'),		/* translators: %s: blog title, 2: separator (raquo) */		'comstitle'	=> __('%1$s %2$s Comments Feed'),	);	$args = wp_parse_args( $args, $defaults );	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['feedtitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link() . "\" />\n";	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['comstitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link( 'comments_' . get_default_feed() ) . "\" />\n";}/** * Display the links to the extra feeds such as category feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links_extra( $args = array() ) {	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'   => _x('&raquo;', 'feed link'),		/* translators: 1: blog name, 2: separator(raquo), 3: post title */		'singletitle' => __('%1$s %2$s %3$s Comments Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: category name */		'cattitle'    => __('%1$s %2$s %3$s Category Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: tag name */		'tagtitle'    => __('%1$s %2$s %3$s Tag Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: author name  */		'authortitle' => __('%1$s %2$s Posts by %3$s Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: search phrase */		'searchtitle' => __('%1$s %2$s Search Results for &#8220;%3$s&#8221; Feed'),	);	$args = wp_parse_args( $args, $defaults );	if ( is_single() || is_page() ) {		$post = &get_post( $id = 0 );		if ( comments_open() || pings_open() || $post->comment_count > 0 ) {			$title = esc_attr(sprintf( $args['singletitle'], get_bloginfo('name'), $args['separator'], esc_html( get_the_title() ) ));			$href = get_post_comments_feed_link( $post->ID );		}	} elseif ( is_category() ) {		$cat_id = intval( get_query_var('cat') );		$title = esc_attr(sprintf( $args['cattitle'], get_bloginfo('name'), $args['separator'], get_cat_name( $cat_id ) ));		$href = get_category_feed_link( $cat_id );	} elseif ( is_tag() ) {		$tag_id = intval( get_query_var('tag_id') );		$tag = get_tag( $tag_id );		$title = esc_attr(sprintf( $args['tagtitle'], get_bloginfo('name'), $args['separator'], $tag->name ));		$href = get_tag_feed_link( $tag_id );	} elseif ( is_author() ) {		$author_id = intval( get_query_var('author') );		$title = esc_attr(sprintf( $args['authortitle'], get_bloginfo('name'), $args['separator'], get_the_author_meta( 'display_name', $author_id ) ));		$href = get_author_feed_link( $author_id );	} elseif ( is_search() ) {		$title = esc_attr(sprintf( $args['searchtitle'], get_bloginfo('name'), $args['separator'], get_search_query( false ) ));		$href = get_search_feed_link();	}	if ( isset($title) && isset($href) )		echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . $title . '" href="' . $href . '" />' . "\n";}/** * Display the link to the Really Simple Discovery service endpoint. * * @link http://archipelago.phrasewise.com/rsd * @since 2.0.0 */function rsd_link() {	echo '<link rel="EditURI" type="application/rsd+xml" title="RSD" href="' . get_bloginfo('wpurl') . "/xmlrpc.php?rsd\" />\n";}/** * Display the link to the Windows Live Writer manifest file. * * @link http://msdn.microsoft.com/en-us/library/bb463265.aspx * @since 2.3.1 */function wlwmanifest_link() {	echo '<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="'		. get_bloginfo('wpurl') . '/wp-includes/wlwmanifest.xml" /> ' . "\n";}/** * Display a noindex meta tag if required by the blog configuration. * * If a blog is marked as not being public then the noindex meta tag will be * output to tell web robots not to index the page content. * * @since 2.1.0 */function noindex() {	// If the blog is not public, tell robots to go away.	if ( '0' == get_option('blog_public') )		echo "<meta name='robots' content='noindex,nofollow' />\n";}/** * Determine if TinyMCE is available. * * Checks to see if the user has deleted the tinymce files to slim down there WordPress install. * * @since 2.1.0 * * @return bool Whether TinyMCE exists. */function rich_edit_exists() {	global $wp_rich_edit_exists;	if ( !isset($wp_rich_edit_exists) )		$wp_rich_edit_exists = file_exists(ABSPATH . WPINC . '/js/tinymce/tiny_mce.js');	return $wp_rich_edit_exists;}/** * Whether the user should have a WYSIWIG editor. * * Checks that the user requires a WYSIWIG editor and that the editor is * supported in the users browser. * * @since 2.0.0 * * @return bool */function user_can_richedit() {	global $wp_rich_edit, $pagenow;	if ( !isset( $wp_rich_edit) ) {		if ( get_user_option( 'rich_editing' ) == 'true' &&			( ( preg_match( '!AppleWebKit/(\d+)!', $_SERVER['HTTP_USER_AGENT'], $match ) && intval($match[1]) >= 420 ) ||				!preg_match( '!opera[ /][2-8]|konqueror|safari!i', $_SERVER['HTTP_USER_AGENT'] ) )				&& 'comment.php' != $pagenow ) {			$wp_rich_edit = true;		} else {			$wp_rich_edit = false;		}	}	return apply_filters('user_can_richedit', $wp_rich_edit);}/** * Find out which editor should be displayed by default. * * Works out which of the two editors to display as the current editor for a * user. * * @since 2.5.0 * * @return string Either 'tinymce', or 'html', or 'test' */function wp_default_editor() {	$r = user_can_richedit() ? 'tinymce' : 'html'; // defaults	if ( $user = wp_get_current_user() ) { // look for cookie		$ed = get_user_setting('editor', 'tinymce');		$r = ( in_array($ed, array('tinymce', 'html', 'test') ) ) ? $ed : $r;	}	return apply_filters( 'wp_default_editor', $r ); // filter}/** * Display visual editor forms: TinyMCE, or HTML, or both. * * The amount of rows the text area will have for the content has to be between * 3 and 100 or will default at 12. There is only one option used for all users, * named 'default_post_edit_rows'. * * If the user can not use the rich editor (TinyMCE), then the switch button * will not be displayed. * * @since 2.1.0 * * @param string $content Textarea content. * @param string $id Optional, default is 'content'. HTML ID attribute value. * @param string $prev_id Optional, default is 'title'. HTML ID name for switching back and forth between visual editors. * @param bool $media_buttons Optional, default is true. Whether to display media buttons. * @param int $tab_index Optional, default is 2. Tabindex for textarea element. */function the_editor($content, $id = 'content', $prev_id = 'title', $media_buttons = true, $tab_index = 2) {	$rows = get_option('default_post_edit_rows');	if (($rows < 3) || ($rows > 100))		$rows = 12;	if ( !current_user_can( 'upload_files' ) )		$media_buttons = false;	$richedit =  user_can_richedit();	$class = '';	if ( $richedit || $media_buttons ) { ?>	<div id="editor-toolbar"><?php	if ( $richedit ) {		$wp_default_editor = wp_default_editor(); ?>		<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('<?php echo $id; ?>')" /></div><?php	if ( 'html' == $wp_default_editor ) {			add_filter('the_editor_content', 'wp_htmledit_pre'); ?>			<a id="edButtonHTML" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	} else {			$class = " class='theEditor'";			add_filter('the_editor_content', 'wp_richedit_pre'); ?>			<a id="edButtonHTML" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	}	}	if ( $media_buttons ) { ?>		<div id="media-buttons" class="hide-if-no-js"><?php	do_action( 'media_buttons' ); ?>		</div><?php	} ?>	</div><?php	}?>	<div id="quicktags"><?php	wp_print_scripts( 'quicktags' ); ?>	<script type="text/javascript">edToolbar()</script>	</div><?php	$the_editor = apply_filters('the_editor', "<div id='editorcontainer'><textarea rows='$rows'$class cols='40' name='$id' tabindex='$tab_index' id='$id'>%s</textarea></div>\n");	$the_editor_content = apply_filters('the_editor_content', $content);	printf($the_editor, $the_editor_content);?>	<script type="text/javascript">	edCanvas = document.getElementById('<?php echo $id; ?>');	</script><?php}/** * Retrieve the contents of the search WordPress query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @since 2.3.0 * @uses esc_attr() * * @param bool $escaped Whether the result is escaped. Default true. * 	Only use when you are later escaping it. Do not use unescaped. * @return string */function get_search_query( $escaped = true ) {	$query = apply_filters( 'get_search_query', get_query_var( 's' ) );	if ( $escaped )		$query = esc_attr( $query );	return $query;}/** * Display the contents of the search query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @uses esc_attr() * @since 2.1.0 */function the_search_query() {	echo esc_attr( apply_filters( 'the_search_query', get_search_query( false ) ) );}/** * Display the language attributes for the html tag. * * Builds up a set of html attributes containing the text direction and language * information for the page. * * @since 2.1.0 * * @param string $doctype The type of html document (xhtml|html). */function language_attributes($doctype = 'html') {	$attributes = array();	$output = '';	if ( function_exists( 'is_rtl' ) )		$attributes[] = 'dir="' . ( is_rtl() ? 'rtl' : 'ltr' ) . '"';	if ( $lang = get_bloginfo('language') ) {		if ( get_option('html_type') == 'text/html' || $doctype == 'html' )			$attributes[] = "lang=\"$lang\"";		if ( get_option('html_type') != 'text/html' || $doctype == 'xhtml' )			$attributes[] = "xml:lang=\"$lang\"";	}	$output = implode(' ', $attributes);	$output = apply_filters('language_attributes', $output);	echo $output;}/** * Retrieve paginated link for archive post pages. * * Technically, the function can be used to create paginated link list for any * area. The 'base' argument is used to reference the url, which will be used to * create the paginated links. The 'format' argument is then used for replacing * the page number. It is however, most likely and by default, to be used on the * archive post pages. * * The 'type' argument controls format of the returned value. The default is * 'plain', which is just a string with the links separated by a newline * character. The other possible values are either 'array' or 'list'. The * 'array' value will return an array of the paginated link list to offer full * control of display. The 'list' value will place all of the paginated links in * an unordered HTML list. * * The 'total' argument is the total amount of pages and is an integer. The * 'current' argument is the current page number and is also an integer. * * An example of the 'base' argument is "http://example.com/all_posts.php%_%" * and the '%_%' is required. The '%_%' will be replaced by the contents of in * the 'format' argument. An example for the 'format' argument is "?page=%#%" * and the '%#%' is also required. The '%#%' will be replaced with the page * number. * * You can include the previous and next links in the list by setting the * 'prev_next' argument to true, which it is by default. You can set the * previous text, by using the 'prev_text' argument. You can set the next text * by setting the 'next_text' argument. * * If the 'show_all' argument is set to true, then it will show all of the pages * instead of a short list of the pages near the current page. By default, the * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size' * arguments. The 'end_size' argument is how many numbers on either the start * and the end list edges, by default is 1. The 'mid_size' argument is how many * numbers to either side of current page, but not including current page. * * It is possible to add query vars to the link by using the 'add_args' argument * and see {@link add_query_arg()} for more information. * * @since 2.1.0 * * @param string|array $args Optional. Override defaults. * @return array|string String of page links or array of page links. */function paginate_links( $args = '' ) {	$defaults = array(		'base' => '%_%', // http://example.com/all_posts.php%_% : %_% is replaced by format (below)		'format' => '?page=%#%', // ?page=%#% : %#% is replaced by the page number		'total' => 1,		'current' => 0,		'show_all' => false,		'prev_next' => true,		'prev_text' => __('&laquo; Previous'),		'next_text' => __('Next &raquo;'),		'end_size' => 1,		'mid_size' => 2,		'type' => 'plain',		'add_args' => false, // array of query args to add		'add_fragment' => ''	);	$args = wp_parse_args( $args, $defaults );	extract($args, EXTR_SKIP);	// Who knows what else people pass in $args	$total = (int) $total;	if ( $total < 2 )		return;	$current  = (int) $current;	$end_size = 0  < (int) $end_size ? (int) $end_size : 1; // Out of bounds?  Make it the default.	$mid_size = 0 <= (int) $mid_size ? (int) $mid_size : 2;	$add_args = is_array($add_args) ? $add_args : false;	$r = '';	$page_links = array();	$n = 0;	$dots = false;	if ( $prev_next && $current && 1 < $current ) :		$link = str_replace('%_%', 2 == $current ? '' : $format, $base);		$link = str_replace('%#%', $current - 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='prev page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$prev_text</a>";	endif;	for ( $n = 1; $n <= $total; $n++ ) :		$n_display = number_format_i18n($n);		if ( $n == $current ) :			$page_links[] = "<span class='page-numbers current'>$n_display</span>";			$dots = true;		else :			if ( $show_all || ( $n <= $end_size || ( $current && $n >= $current - $mid_size && $n <= $current + $mid_size ) || $n > $total - $end_size ) ) :				$link = str_replace('%_%', 1 == $n ? '' : $format, $base);				$link = str_replace('%#%', $n, $link);				if ( $add_args )					$link = add_query_arg( $add_args, $link );				$link .= $add_fragment;				$page_links[] = "<a class='page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$n_display</a>";				$dots = true;			elseif ( $dots && !$show_all ) :				$page_links[] = "<span class='page-numbers dots'>...</span>";				$dots = false;			endif;		endif;	endfor;	if ( $prev_next && $current && ( $current < $total || -1 == $total ) ) :		$link = str_replace('%_%', $format, $base);		$link = str_replace('%#%', $current + 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='next page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$next_text</a>";	endif;	switch ( $type ) :		case 'array' :			return $page_links;			break;		case 'list' :			$r .= "<ul class='page-numbers'>\n\t<li>";			$r .= join("</li>\n\t<li>", $page_links);			$r .= "</li>\n</ul>\n";			break;		default :			$r = join("\n", $page_links);			break;	endswitch;	return $r;}/** * Registers an admin colour scheme css file. * * Allows a plugin to register a new admin colour scheme. For example: * <code> * wp_admin_css_color('classic', __('Classic'), admin_url("css/colors-classic.css"), * array('#07273E', '#14568A', '#D54E21', '#2683AE')); * </code> * * @since 2.5.0 * * @param string $key The unique key for this theme. * @param string $name The name of the theme. * @param string $url The url of the css file containing the colour scheme. * @param array @colors Optional An array of CSS color definitions which are used to give the user a feel for the theme. */function wp_admin_css_color($key, $name, $url, $colors = array()) {	global $_wp_admin_css_colors;	if ( !isset($_wp_admin_css_colors) )		$_wp_admin_css_colors = array();	$_wp_admin_css_colors[$key] = (object) array('name' => $name, 'url' => $url, 'colors' => $colors);}/** * Registers the default Admin color schemes * * @since 3.0.0 */function register_admin_color_schemes() {	wp_admin_css_color('classic', __('Blue'), admin_url("css/colors-classic.css"), array('#073447', '#21759B', '#EAF3FA', '#BBD8E7'));	wp_admin_css_color('fresh', __('Gray'), admin_url("css/colors-fresh.css"), array('#464646', '#6D6D6D', '#F1F1F1', '#DFDFDF'));}/** * Display the URL of a WordPress admin CSS file. * * @see WP_Styles::_css_href and its style_loader_src filter. * * @since 2.3.0 * * @param string $file file relative to wp-admin/ without its ".css" extension. */function wp_admin_css_uri( $file = 'wp-admin' ) {	if ( defined('WP_INSTALLING') ) {		$_file = "./$file.css";	} else {		$_file = admin_url("$file.css");	}	$_file = add_query_arg( 'version', get_bloginfo( 'version' ),  $_file );	return apply_filters( 'wp_admin_css_uri', $_file, $file );}/** * Enqueues or directly prints a stylesheet link to the specified CSS file. * * "Intelligently" decides to enqueue or to print the CSS file. If the * 'wp_print_styles' action has *not* yet been called, the CSS file will be * enqueued. If the wp_print_styles action *has* been called, the CSS link will * be printed. Printing may be forced by passing TRUE as the $force_echo * (second) parameter. * * For backward compatibility with WordPress 2.3 calling method: If the $file * (first) parameter does not correspond to a registered CSS file, we assume * $file is a file relative to wp-admin/ without its ".css" extension. A * stylesheet link to that generated URL is printed. * * @package WordPress * @since 2.3.0 * @uses $wp_styles WordPress Styles Object * * @param string $file Style handle name or file name (without ".css" extension) relative to wp-admin/ * @param bool $force_echo Optional.  Force the stylesheet link to be printed rather than enqueued. */function wp_admin_css( $file = 'wp-admin', $force_echo = false ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	// For backward compatibility	$handle = 0 === strpos( $file, 'css/' ) ? substr( $file, 4 ) : $file;	if ( $wp_styles->query( $handle ) ) {		if ( $force_echo || did_action( 'wp_print_styles' ) ) // we already printed the style queue.  Print this one immediately			wp_print_styles( $handle );		else // Add to style queue			wp_enqueue_style( $handle );		return;	}	echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( $file ) ) . "' type='text/css' />\n", $file );	if ( is_rtl() )		echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( "$file-rtl" ) ) . "' type='text/css' />\n", "$file-rtl" );}/** * Enqueues the default ThickBox js and css. * * If any of the settings need to be changed, this can be done with another js * file similar to media-upload.js and theme-preview.js. That file should * require array('thickbox') to ensure it is loaded after. * * @since 2.5.0 */function add_thickbox() {	wp_enqueue_script( 'thickbox' );	wp_enqueue_style( 'thickbox' );}/** * Display the XHTML generator that is generated on the wp_head hook. * * @since 2.5.0 */function wp_generator() {	the_generator( apply_filters( 'wp_generator_type', 'xhtml' ) );}/** * Display the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators overall the the_generator filter. * * @since 2.5.0 * @uses apply_filters() Calls 'the_generator' hook. * * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export). */function the_generator( $type ) {	echo apply_filters('the_generator', get_the_generator($type), $type) . "\n";}/** * Creates the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators on an individual basis using the * 'get_the_generator_{$type}' filter. * * @since 2.5.0 * @uses apply_filters() Calls 'get_the_generator_$type' hook. * * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export). * @return string The HTML content for the generator. */function get_the_generator( $type = '' ) {	if ( empty( $type ) ) {		$current_filter = current_filter();		if ( empty( $current_filter ) )			return;		switch ( $current_filter ) {			case 'rss2_head' :			case 'commentsrss2_head' :				$type = 'rss2';				break;			case 'rss_head' :			case 'opml_head' :				$type = 'comment';				break;			case 'rdf_header' :				$type = 'rdf';				break;			case 'atom_head' :			case 'comments_atom_head' :			case 'app_head' :				$type = 'atom';				break;		}	}	switch ( $type ) {		case 'html':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '">';			break;		case 'xhtml':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '" />';			break;		case 'atom':			$gen = '<generator uri="http://wordpress.org/" version="' . get_bloginfo_rss( 'version' ) . '">WordPress</generator>';			break;		case 'rss2':			$gen = '<generator>http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '</generator>';			break;		case 'rdf':			$gen = '<admin:generatorAgent rdf:resource="http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '" />';			break;		case 'comment':			$gen = '<!-- generator="WordPress/' . get_bloginfo( 'version' ) . '" -->';			break;		case 'export':			$gen = '<!-- generator="WordPress/' . get_bloginfo_rss('version') . '" created="'. date('Y-m-d H:i') . '"-->';			break;	}	return apply_filters( "get_the_generator_{$type}", $gen, $type );}/** * Outputs the html checked attribute. * * Compares the first two arguments and if identical marks as checked * * @since 1.0 * * @param mixed $checked One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function checked( $checked, $current = true, $echo = true ) {	return __checked_selected_helper( $checked, $current, $echo, 'checked' );}/** * Outputs the html selected attribute. * * Compares the first two arguments and if identical marks as selected * * @since 1.0 * * @param mixed selected One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function selected( $selected, $current = true, $echo = true ) {	return __checked_selected_helper( $selected, $current, $echo, 'selected' );}/** * Outputs the html disabled attribute. * * Compares the first two arguments and if identical marks as disabled * * @since 3.0.0 * * @param mixed $disabled One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function disabled( $disabled, $current = true, $echo = true ) {	return __checked_selected_helper( $disabled, $current, $echo, 'disabled' );}/** * Private helper function for checked, selected, and disabled. * * Compares the first two arguments and if identical marks as $type * * @since 2.8 * @access private * * @param any $helper One of the values to compare * @param any $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @param string $type The type of checked|selected|disabled we are doing * @return string html attribute or empty string */function __checked_selected_helper( $helper, $current, $echo, $type ) {	if ( (string) $helper === (string) $current )		$result = " $type='$type'";	else		$result = '';	if ( $echo )		echo $result;	return $result;}?>
<?php/** * Options Management Administration Panel. * * If accessed directly in a browser this page shows a list of all saved options * along with editable fields for their values. Serialized data is not supported * and there is no way to remove options via this page. It is not linked to from * anywhere else in the admin. * * This file is also the target of the forms in core and custom options pages * that use the Settings API. In this case it saves the new option values * and returns the user to their page of origin. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Settings');$this_file = 'options.php';$parent_file = 'options-general.php';wp_reset_vars(array('action', 'option_page'));if ( empty($option_page) ) // This is for back compat and will eventually be removed.	$option_page = 'options';if ( !current_user_can('manage_options') )	wp_die(__('Cheatin&#8217; uh?'));// Handle admin email change requestsif ( is_multisite() ) {	if ( ! empty($_GET[ 'adminhash' ] ) ) {		$new_admin_details = get_option( 'adminhash' );		$redirect = 'options-general.php?updated=false';		if ( is_array( $new_admin_details ) && $new_admin_details[ 'hash' ] == $_GET[ 'adminhash' ] && !empty($new_admin_details[ 'newemail' ]) ) {			update_option( 'admin_email', $new_admin_details[ 'newemail' ] );			delete_option( 'adminhash' );			delete_option( 'new_admin_email' );			$redirect = 'options-general.php?updated=true';		}		wp_redirect( admin_url( $redirect ) );		exit;	} elseif ( ! empty( $_GET['dismiss'] ) && 'new_admin_email' == $_GET['dismiss'] ) {		delete_option( 'adminhash' );		delete_option( 'new_admin_email' );		wp_redirect( admin_url( 'options-general.php?updated=true' ) );		exit;	}}if ( is_multisite() && !is_super_admin() && 'update' != $action )	wp_die(__('Cheatin&#8217; uh?'));$whitelist_options = array(	'general' => array( 'blogname', 'blogdescription', 'gmt_offset', 'date_format', 'time_format', 'start_of_week', 'timezone_string' ),	'discussion' => array( 'default_pingback_flag', 'default_ping_status', 'default_comment_status', 'comments_notify', 'moderation_notify', 'comment_moderation', 'require_name_email', 'comment_whitelist', 'comment_max_links', 'moderation_keys', 'blacklist_keys', 'show_avatars', 'avatar_rating', 'avatar_default', 'close_comments_for_old_posts', 'close_comments_days_old', 'thread_comments', 'thread_comments_depth', 'page_comments', 'comments_per_page', 'default_comments_page', 'comment_order', 'comment_registration' ),	'media' => array( 'thumbnail_size_w', 'thumbnail_size_h', 'thumbnail_crop', 'medium_size_w', 'medium_size_h', 'large_size_w', 'large_size_h', 'image_default_size', 'image_default_align', 'image_default_link_type', 'embed_autourls', 'embed_size_w', 'embed_size_h' ),	'privacy' => array( 'blog_public' ),	'reading' => array( 'posts_per_page', 'posts_per_rss', 'rss_use_excerpt', 'blog_charset', 'show_on_front', 'page_on_front', 'page_for_posts' ),	'writing' => array( 'default_post_edit_rows', 'use_smilies', 'default_category', 'default_email_category', 'use_balanceTags', 'default_link_category', 'enable_app', 'enable_xmlrpc' ),	'options' => array( '' ) );$mail_options = array('mailserver_url', 'mailserver_port', 'mailserver_login', 'mailserver_pass');$uploads_options = array('uploads_use_yearmonth_folders', 'upload_path', 'upload_url_path');if ( !is_multisite() ) {	if ( !defined( 'WP_SITEURL' ) )		$whitelist_options['general'][] = 'siteurl';	if ( !defined( 'WP_HOME' ) )		$whitelist_options['general'][] = 'home';	$whitelist_options['general'][] = 'admin_email';	$whitelist_options['general'][] = 'users_can_register';	$whitelist_options['general'][] = 'default_role';	$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options['writing'][] = 'ping_sites';	$whitelist_options['media'] = array_merge($whitelist_options['media'], $uploads_options);} else {	$whitelist_options['general'][] = 'new_admin_email';	$whitelist_options['general'][] = 'WPLANG';	$whitelist_options['general'][] = 'language';	if ( apply_filters( 'enable_post_by_email_configuration', true ) )		$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options[ 'misc' ] = array();}$whitelist_options = apply_filters( 'whitelist_options', $whitelist_options );/* * If $_GET['action'] == 'update' we are saving settings sent from a settings page */if ( 'update' == $action ) {	if ( 'options' == $option_page && !isset( $_POST['option_page'] ) ) { // This is for back compat and will eventually be removed.		$unregistered = true;		check_admin_referer( 'update-options' );	} else {		$unregistered = false;		check_admin_referer( $option_page . '-options' );	}	if ( !isset( $whitelist_options[ $option_page ] ) )		wp_die( __( 'Error: options page not found.' ) );	if ( 'options' == $option_page ) {		if ( is_multisite() && ! is_super_admin() )			wp_die( __( 'You do not have sufficient permissions to modify unregistered settings for this site.' ) );		$options = explode( ',', stripslashes( $_POST[ 'page_options' ] ) );	} else {		$options = $whitelist_options[ $option_page ];	}	// Handle custom date/time formats	if ( 'general' == $option_page ) {		if ( !empty($_POST['date_format']) && isset($_POST['date_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['date_format'] ) )			$_POST['date_format'] = $_POST['date_format_custom'];		if ( !empty($_POST['time_format']) && isset($_POST['time_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['time_format'] ) )			$_POST['time_format'] = $_POST['time_format_custom'];		// Map UTC+- timezones to gmt_offsets and set timezone_string to empty.		if ( !empty($_POST['timezone_string']) && preg_match('/^UTC[+-]/', $_POST['timezone_string']) ) {			$_POST['gmt_offset'] = $_POST['timezone_string'];			$_POST['gmt_offset'] = preg_replace('/UTC\+?/', '', $_POST['gmt_offset']);			$_POST['timezone_string'] = '';		}	}	if ( $options ) {		foreach ( $options as $option ) {			if ( $unregistered )				_deprecated_argument( 'options.php', '2.7', sprintf( __( 'The <code>%1$s</code> setting is unregistered. Unregistered settings are deprecated. See http://codex.wordpress.org/Settings_API' ), $option, $option_page ) );			$option = trim($option);			$value = null;			if ( isset($_POST[$option]) )				$value = $_POST[$option];			if ( !is_array($value) )				$value = trim($value);			$value = stripslashes_deep($value);			update_option($option, $value);		}	}	/**	 *  Handle settings errors and return to options page	 */	// If no settings errors were registered add a general 'updated' message.	if ( !count( get_settings_errors() ) )		add_settings_error('general', 'settings_updated', __('Settings saved.'), 'updated');	set_transient('settings_errors', get_settings_errors(), 30);	/**	 * Redirect back to the settings page that was submitted	 */	$goback = add_query_arg( 'updated', 'true',  wp_get_referer() );	wp_redirect( $goback );	exit;}include('./admin-header.php'); ?><div class="wrap"><?php screen_icon(); ?>  <h2><?php esc_html_e('All Settings'); ?></h2>  <form name="form" action="options.php" method="post" id="all-options">  <?php wp_nonce_field('options-options') ?>  <input type="hidden" name="action" value="update" />  <input type='hidden' name='option_page' value='options' />  <table class="form-table"><?php$options = $wpdb->get_results( "SELECT * FROM $wpdb->options ORDER BY option_name" );foreach ( (array) $options as $option ) :	$disabled = false;	if ( $option->option_name == '' )		continue;	if ( is_serialized( $option->option_value ) ) {		if ( is_serialized_string( $option->option_value ) ) {			// this is a serialized string, so we should display it			$value = maybe_unserialize( $option->option_value );			$options_to_update[] = $option->option_name;			$class = 'all-options';		} else {			$value = 'SERIALIZED DATA';			$disabled = true;			$class = 'all-options disabled';		}	} else {		$value = $option->option_value;		$options_to_update[] = $option->option_name;		$class = 'all-options';	}	$name = esc_attr( $option->option_name );	echo "<tr>	<th scope='row'><label for='$name'>" . esc_html( $option->option_name ) . "</label></th><td>";	if ( strpos( $value, "\n" ) !== false )		echo "<textarea class='$class' name='$name' id='$name' cols='30' rows='5'>" . wp_htmledit_pre( $value ) . "</textarea>";	else		echo "<input class='regular-text $class' type='text' name='$name' id='$name' value='" . esc_attr( $value ) . "'" . disabled( $disabled, true, false ) . " />";	echo "</td></tr>";endforeach;?>  </table><p class="submit"><input type="hidden" name="page_options" value="<?php echo esc_attr( implode( ',', $options_to_update ) ); ?>" /><input type="submit" name="Update" value="<?php esc_attr_e( 'Save Changes' ); ?>" class="button-primary" /></p>  </form></div><?phpinclude('./admin-footer.php');?>
<?php/** * Holds Most of the WordPress classes. * * Some of the other classes are contained in other files. For example, the * WordPress cache is in cache.php and the WordPress roles API is in * capabilities.php. The third party libraries are contained in their own * separate files. * * @package WordPress *//** * WordPress environment setup class. * * @package WordPress * @since 2.0.0 */class WP {	/**	 * Public query variables.	 *	 * Long list of public query variables.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'debug', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'comments_popup', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type');	/**	 * Private query variables.	 *	 * Long list of private query variables.	 *	 * @since 2.0.0	 * @var array	 */	var $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page');	/**	 * Extra query variables set by the user.	 *	 * @since 2.1.0	 * @var array	 */	var $extra_query_vars = array();	/**	 * Query variables for setting up the WordPress Query Loop.	 *	 * @since 2.0.0	 * @var array	 */	var $query_vars;	/**	 * String parsed to set the query variables.	 *	 * @since 2.0.0	 * @var string	 */	var $query_string;	/**	 * Permalink or requested URI.	 *	 * @since 2.0.0	 * @var string	 */	var $request;	/**	 * Rewrite rule the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_rule;	/**	 * Rewrite query the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_query;	/**	 * Whether already did the permalink.	 *	 * @since 2.0.0	 * @var bool	 */	var $did_permalink = false;	/**	 * Add name to list of public query variables.	 *	 * @since 2.1.0	 *	 * @param string $qv Query variable name.	 */	function add_query_var($qv) {		if ( !in_array($qv, $this->public_query_vars) )			$this->public_query_vars[] = $qv;	}	/**	 * Set the value of a query variable.	 *	 * @since 2.3.0	 *	 * @param string $key Query variable name.	 * @param mixed $value Query variable value.	 */	function set_query_var($key, $value) {		$this->query_vars[$key] = $value;	}	/**	 * Parse request to find correct WordPress query.	 *	 * Sets up the query variables based on the request. There are also many	 * filters and actions that can be used to further manipulate the result.	 *	 * @since 2.0.0	 *	 * @param array|string $extra_query_vars Set the extra query variables.	 */	function parse_request($extra_query_vars = '') {		global $wp_rewrite;		$this->query_vars = array();		$taxonomy_query_vars = array();		$post_type_query_vars = array();		if ( is_array($extra_query_vars) )			$this->extra_query_vars = & $extra_query_vars;		else if (! empty($extra_query_vars))			parse_str($extra_query_vars, $this->extra_query_vars);		// Process PATH_INFO, REQUEST_URI, and 404 for permalinks.		// Fetch the rewrite rules.		$rewrite = $wp_rewrite->wp_rewrite_rules();		if ( ! empty($rewrite) ) {			// If we match a rewrite rule, this will be cleared.			$error = '404';			$this->did_permalink = true;			if ( isset($_SERVER['PATH_INFO']) )				$pathinfo = $_SERVER['PATH_INFO'];			else				$pathinfo = '';			$pathinfo_array = explode('?', $pathinfo);			$pathinfo = str_replace("%", "%25", $pathinfo_array[0]);			$req_uri = $_SERVER['REQUEST_URI'];			$req_uri_array = explode('?', $req_uri);			$req_uri = $req_uri_array[0];			$self = $_SERVER['PHP_SELF'];			$home_path = parse_url(home_url());			if ( isset($home_path['path']) )				$home_path = $home_path['path'];			else				$home_path = '';			$home_path = trim($home_path, '/');			// Trim path info from the end and the leading home path from the			// front.  For path info requests, this leaves us with the requesting			// filename, if any.  For 404 requests, this leaves us with the			// requested permalink.			$req_uri = str_replace($pathinfo, '', rawurldecode($req_uri));			$req_uri = trim($req_uri, '/');			$req_uri = preg_replace("|^$home_path|", '', $req_uri);			$req_uri = trim($req_uri, '/');			$pathinfo = trim($pathinfo, '/');			$pathinfo = preg_replace("|^$home_path|", '', $pathinfo);			$pathinfo = trim($pathinfo, '/');			$self = trim($self, '/');			$self = preg_replace("|^$home_path|", '', $self);			$self = trim($self, '/');			// The requested permalink is in $pathinfo for path info requests and			//  $req_uri for other requests.			if ( ! empty($pathinfo) && !preg_match('|^.*' . $wp_rewrite->index . '$|', $pathinfo) ) {				$request = $pathinfo;			} else {				// If the request uri is the index, blank it out so that we don't try to match it against a rule.				if ( $req_uri == $wp_rewrite->index )					$req_uri = '';				$request = $req_uri;			}			$this->request = $request;			// Look for matches.			$request_match = $request;			foreach ( (array) $rewrite as $match => $query) {				// Don't try to match against AtomPub calls				if ( $req_uri == 'wp-app.php' )					break;				// If the requesting file is the anchor of the match, prepend it				// to the path info.				if ( (! empty($req_uri)) && (strpos($match, $req_uri) === 0) && ($req_uri != $request) )					$request_match = $req_uri . '/' . $request;				if ( preg_match("#^$match#", $request_match, $matches) ||					preg_match("#^$match#", urldecode($request_match), $matches) ) {					// Got a match.					$this->matched_rule = $match;					// Trim the query of everything up to the '?'.					$query = preg_replace("!^.+\?!", '', $query);					// Substitute the substring matches into the query.					$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));					$this->matched_query = $query;					// Parse the query.					parse_str($query, $perma_query_vars);					// If we're processing a 404 request, clear the error var					// since we found something.					if ( isset($_GET['error']) )						unset($_GET['error']);					if ( isset($error) )						unset($error);					break;				}			}			// If req_uri is empty or if it is a request for ourself, unset error.			if ( empty($request) || $req_uri == $self || strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false ) {				if ( isset($_GET['error']) )					unset($_GET['error']);				if ( isset($error) )					unset($error);				if ( isset($perma_query_vars) && strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )					unset($perma_query_vars);				$this->did_permalink = false;			}		}		$this->public_query_vars = apply_filters('query_vars', $this->public_query_vars);		foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t )			if ( $t->query_var )				$taxonomy_query_vars[$t->query_var] = $taxonomy;		foreach ( $GLOBALS['wp_post_types'] as $post_type => $t )			if ( $t->query_var )				$post_type_query_vars[$t->query_var] = $post_type;		for ( $i = 0; $i < count($this->public_query_vars); $i += 1 ) {			$wpvar = $this->public_query_vars[$i];			if ( isset($this->extra_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $this->extra_query_vars[$wpvar];			elseif ( isset($GLOBALS[$wpvar]) )				$this->query_vars[$wpvar] = $GLOBALS[$wpvar];			elseif ( !empty($_POST[$wpvar]) )				$this->query_vars[$wpvar] = $_POST[$wpvar];			elseif ( !empty($_GET[$wpvar]) )				$this->query_vars[$wpvar] = $_GET[$wpvar];			elseif ( !empty($perma_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $perma_query_vars[$wpvar];			if ( !empty( $this->query_vars[$wpvar] ) ) {				$this->query_vars[$wpvar] = (string) $this->query_vars[$wpvar];				if ( isset( $taxonomy_query_vars[$wpvar] ) ) {					$this->query_vars['taxonomy'] = $taxonomy_query_vars[$wpvar];					$this->query_vars['term'] = $this->query_vars[$wpvar];				} elseif ( isset($post_type_query_vars[$wpvar] ) ) {					$this->query_vars['post_type'] = $post_type_query_vars[$wpvar];					$this->query_vars['name'] = $this->query_vars[$wpvar];				}			}		}		// Limit publicly queried post_types to those that are publicly_queryable		if ( isset( $this->query_vars['post_type']) ) {			$queryable_post_types =  get_post_types( array('publicly_queryable' => true) );			if ( ! in_array( $this->query_vars['post_type'], $queryable_post_types ) )				unset( $this->query_vars['post_type'] );		}		foreach ( (array) $this->private_query_vars as $var) {			if ( isset($this->extra_query_vars[$var]) )				$this->query_vars[$var] = $this->extra_query_vars[$var];			elseif ( isset($GLOBALS[$var]) && '' != $GLOBALS[$var] )				$this->query_vars[$var] = $GLOBALS[$var];		}		if ( isset($error) )			$this->query_vars['error'] = $error;		$this->query_vars = apply_filters('request', $this->query_vars);		do_action_ref_array('parse_request', array(&$this));	}	/**	 * Send additional HTTP headers for caching, content type, etc.	 *	 * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing	 * a feed, it will also send last-modified, etag, and 304 status if needed.	 *	 * @since 2.0.0	 */	function send_headers() {		$headers = array('X-Pingback' => get_bloginfo('pingback_url'));		$status = null;		$exit_required = false;		if ( is_user_logged_in() )			$headers = array_merge($headers, wp_get_nocache_headers());		if ( !empty($this->query_vars['error']) && '404' == $this->query_vars['error'] ) {			$status = 404;			if ( !is_user_logged_in() )				$headers = array_merge($headers, wp_get_nocache_headers());			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else if ( empty($this->query_vars['feed']) ) {			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else {			// We're showing a feed, so WP is indeed the only thing that last changed			if ( !empty($this->query_vars['withcomments'])				|| ( empty($this->query_vars['withoutcomments'])					&& ( !empty($this->query_vars['p'])						|| !empty($this->query_vars['name'])						|| !empty($this->query_vars['page_id'])						|| !empty($this->query_vars['pagename'])						|| !empty($this->query_vars['attachment'])						|| !empty($this->query_vars['attachment_id'])					)				)			)				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastcommentmodified('GMT'), 0).' GMT';			else				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';			$wp_etag = '"' . md5($wp_last_modified) . '"';			$headers['Last-Modified'] = $wp_last_modified;			$headers['ETag'] = $wp_etag;			// Support for Conditional GET			if (isset($_SERVER['HTTP_IF_NONE_MATCH']))				$client_etag = stripslashes(stripslashes($_SERVER['HTTP_IF_NONE_MATCH']));			else $client_etag = false;			$client_last_modified = empty($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? '' : trim($_SERVER['HTTP_IF_MODIFIED_SINCE']);			// If string is empty, return 0. If not, attempt to parse into a timestamp			$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;			// Make a timestamp for our most recent modification...			$wp_modified_timestamp = strtotime($wp_last_modified);			if ( ($client_last_modified && $client_etag) ?					 (($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :					 (($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {				$status = 304;				$exit_required = true;			}		}		$headers = apply_filters('wp_headers', $headers, $this);		if ( ! empty( $status ) )			status_header( $status );		foreach( (array) $headers as $name => $field_value )			@header("{$name}: {$field_value}");		if ($exit_required)			exit();		do_action_ref_array('send_headers', array(&$this));	}	/**	 * Sets the query string property based off of the query variable property.	 *	 * The 'query_string' filter is deprecated, but still works. Plugins should	 * use the 'request' filter instead.	 *	 * @since 2.0.0	 */	function build_query_string() {		$this->query_string = '';		foreach ( (array) array_keys($this->query_vars) as $wpvar) {			if ( '' != $this->query_vars[$wpvar] ) {				$this->query_string .= (strlen($this->query_string) < 1) ? '' : '&';				if ( !is_scalar($this->query_vars[$wpvar]) ) // Discard non-scalars.					continue;				$this->query_string .= $wpvar . '=' . rawurlencode($this->query_vars[$wpvar]);			}		}		// query_string filter deprecated.  Use request filter instead.		if ( has_filter('query_string') ) {  // Don't bother filtering and parsing if no plugins are hooked in.			$this->query_string = apply_filters('query_string', $this->query_string);			parse_str($this->query_string, $this->query_vars);		}	}	/**	 * Set up the WordPress Globals.	 *	 * The query_vars property will be extracted to the GLOBALS. So care should	 * be taken when naming global variables that might interfere with the	 * WordPress environment.	 *	 * @global string $query_string Query string for the loop.	 * @global int $more Only set, if single page or post.	 * @global int $single If single page or post. Only set, if single page or post.	 *	 * @since 2.0.0	 */	function register_globals() {		global $wp_query;		// Extract updated query vars back into global namespace.		foreach ( (array) $wp_query->query_vars as $key => $value) {			$GLOBALS[$key] = $value;		}		$GLOBALS['query_string'] = $this->query_string;		$GLOBALS['posts'] = & $wp_query->posts;		$GLOBALS['post'] = $wp_query->post;		$GLOBALS['request'] = $wp_query->request;		if ( is_single() || is_page() ) {			$GLOBALS['more'] = 1;			$GLOBALS['single'] = 1;		}	}	/**	 * Set up the current user.	 *	 * @since 2.0.0	 */	function init() {		wp_get_current_user();	}	/**	 * Set up the Loop based on the query variables.	 *	 * @uses WP::$query_vars	 * @since 2.0.0	 */	function query_posts() {		global $wp_the_query;		$this->build_query_string();		$wp_the_query->query($this->query_vars); 	} 	/** 	 * Set the Headers for 404, if nothing is found for requested URL.	 *	 * Issue a 404 if a request doesn't match any posts and doesn't match	 * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already	 * issued, and if the request was not a search or the homepage.	 *	 * Otherwise, issue a 200.	 *	 * @since 2.0.0 	 */	function handle_404() {		global $wp_query;		if ( ( 0 == count( $wp_query->posts ) ) && !is_404() && !is_robots() && !is_search() && !is_home() ) {			// Don't 404 for these queries if they matched an object.			if ( ( is_tag() || is_category() || is_tax() || is_author() ) && $wp_query->get_queried_object() && !is_paged() ) {				if ( !is_404() )					status_header( 200 );				return;			}			$wp_query->set_404();			status_header( 404 );			nocache_headers();		} elseif ( !is_404() ) {			status_header( 200 );		}	}	/**	 * Sets up all of the variables required by the WordPress environment.	 *	 * The action 'wp' has one parameter that references the WP object. It	 * allows for accessing the properties and methods to further manipulate the	 * object.	 *	 * @since 2.0.0	 *	 * @param string|array $query_args Passed to {@link parse_request()}	 */	function main($query_args = '') {		$this->init();		$this->parse_request($query_args);		$this->send_headers();		$this->query_posts();		$this->handle_404();		$this->register_globals();		do_action_ref_array('wp', array(&$this));	}	/**	 * PHP4 Constructor - Does nothing.	 *	 * Call main() method when ready to run setup.	 *	 * @since 2.0.0	 *	 * @return WP	 */	function WP() {		// Empty.	}}/** * WordPress Error class. * * Container for checking for WordPress errors and error messages. Return * WP_Error and use {@link is_wp_error()} to check if this class is returned. * Many core WordPress functions pass this class in the event of an error and * if not handled properly will result in code errors. * * @package WordPress * @since 2.1.0 */class WP_Error {	/**	 * Stores the list of errors.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $errors = array();	/**	 * Stores the list of data for error codes.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $error_data = array();	/**	 * PHP4 Constructor - Sets up error message.	 *	 * If code parameter is empty then nothing will be done. It is possible to	 * add multiple messages to the same code, but with other methods in the	 * class.	 *	 * All parameters are optional, but if the code parameter is set, then the	 * data parameter is optional.	 *	 * @since 2.1.0	 *	 * @param string|int $code Error code	 * @param string $message Error message	 * @param mixed $data Optional. Error data.	 * @return WP_Error	 */	function WP_Error($code = '', $message = '', $data = '') {		if ( empty($code) )			return;		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Retrieve all error codes.	 *	 * @since 2.1.0	 * @access public	 *	 * @return array List of error codes, if avaiable.	 */	function get_error_codes() {		if ( empty($this->errors) )			return array();		return array_keys($this->errors);	}	/**	 * Retrieve first error code available.	 *	 * @since 2.1.0	 * @access public	 *	 * @return string|int Empty string, if no error codes.	 */	function get_error_code() {		$codes = $this->get_error_codes();		if ( empty($codes) )			return '';		return $codes[0];	}	/**	 * Retrieve all error messages or error messages matching code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Retrieve messages matching code, if exists.	 * @return array Error strings on success, or empty array on failure (if using codee parameter).	 */	function get_error_messages($code = '') {		// Return all messages if no code specified.		if ( empty($code) ) {			$all_messages = array();			foreach ( (array) $this->errors as $code => $messages )				$all_messages = array_merge($all_messages, $messages);			return $all_messages;		}		if ( isset($this->errors[$code]) )			return $this->errors[$code];		else			return array();	}	/**	 * Get single error message.	 *	 * This will get the first message available for the code. If no code is	 * given then the first code available will be used.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code to retrieve message.	 * @return string	 */	function get_error_message($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$messages = $this->get_error_messages($code);		if ( empty($messages) )			return '';		return $messages[0];	}	/**	 * Retrieve error data for error code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code.	 * @return mixed Null, if no errors.	 */	function get_error_data($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		if ( isset($this->error_data[$code]) )			return $this->error_data[$code];		return null;	}	/**	 * Append more error messages to list of error messages.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $code Error code.	 * @param string $message Error message.	 * @param mixed $data Optional. Error data.	 */	function add($code, $message, $data = '') {		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Add data for error code.	 *	 * The error code can only contain one error data.	 *	 * @since 2.1.0	 *	 * @param mixed $data Error data.	 * @param string|int $code Error code.	 */	function add_data($data, $code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$this->error_data[$code] = $data;	}}/** * Check whether variable is a WordPress Error. * * Looks at the object and if a WP_Error class. Does not check to see if the * parent is also WP_Error, so can't inherit WP_Error and still use this * function. * * @since 2.1.0 * * @param mixed $thing Check if unknown variable is WordPress Error object. * @return bool True, if WP_Error. False, if not WP_Error. */function is_wp_error($thing) {	if ( is_object($thing) && is_a($thing, 'WP_Error') )		return true;	return false;}/** * A class for displaying various tree-like structures. * * Extend the Walker class to use it, see examples at the below. Child classes * do not need to implement all of the abstract methods in the class. The child * only needs to implement the methods that are needed. Also, the methods are * not strictly abstract in that the parameter definition needs to be followed. * The child classes can have additional parameters. * * @package WordPress * @since 2.1.0 * @abstract */class Walker {	/**	 * What the class handles.	 *	 * @since 2.1.0	 * @var string	 * @access public	 */	var $tree_type;	/**	 * DB fields to use.	 *	 * @since 2.1.0	 * @var array	 * @access protected	 */	var $db_fields;	/**	 * Max number of pages walked by the paged walker	 *	 * @since 2.7.0	 * @var int	 * @access protected	 */	var $max_pages = 1;	/**	 * Starts the list before the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method is called at the start of the output list.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_lvl(&$output) {}	/**	 * Ends the list of after the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method finishes the list at the end of output of the elements.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_lvl(&$output)   {}	/**	 * Start the element output.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. Includes	 * the element output also.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_el(&$output)  {}	/**	 * Ends the element output, if needed.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_el(&$output)    {}	/**	 * Traverse elements to create list from elements.	 *	 * Display one element if the element doesn't have any children otherwise,	 * display the element and its children. Will only traverse up to the max	 * depth and no ignore elements under that depth. It is possible to set the	 * max depth to include all depths, see walk() method.	 *	 * This method shouldn't be called directly, use the walk() method instead.	 *	 * @since 2.5.0	 *	 * @param object $element Data object	 * @param array $children_elements List of elements to continue traversing.	 * @param int $max_depth Max depth to traverse.	 * @param int $depth Depth of current element.	 * @param array $args	 * @param string $output Passed by reference. Used to append additional content.	 * @return null Null on failure with no changes to parameters.	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		//display this element		if ( is_array( $args[0] ) )			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'start_el'), $cb_args);		$id = $element->$id_field;		// descend only when the depth is right and there are childrens for this element		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {			foreach( $children_elements[ $id ] as $child ){				if ( !isset($newlevel) ) {					$newlevel = true;					//start the child delimiter					$cb_args = array_merge( array(&$output, $depth), $args);					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);				}				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );			}			unset( $children_elements[ $id ] );		}		if ( isset($newlevel) && $newlevel ){			//end the child delimiter			$cb_args = array_merge( array(&$output, $depth), $args);			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);		}		//end this element		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'end_el'), $cb_args);	}	/**	 * Display array of elements hierarchically.	 *	 * It is a generic function which does not assume any existing order of	 * elements. max_depth = -1 means flatly display every element. max_depth =	 * 0 means display all levels. max_depth > 0  specifies the number of	 * display levels.	 *	 * @since 2.1.0	 *	 * @param array $elements	 * @param int $max_depth	 * @return string	 */	function walk( $elements, $max_depth) {		$args = array_slice(func_get_args(), 2);		$output = '';		if ($max_depth < -1) //invalid parameter			return $output;		if (empty($elements)) //nothing to walk			return $output;		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		// flat display		if ( -1 == $max_depth ) {			$empty_array = array();			foreach ( $elements as $e )				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			return $output;		}		/*		 * need to display in hierarchical order		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		/*		 * when none of the elements is top level		 * assume the first one must be root of the sub elements		 */		if ( empty($top_level_elements) ) {			$first = array_slice( $elements, 0, 1 );			$root = $first[0];			$top_level_elements = array();			$children_elements  = array();			foreach ( $elements as $e) {				if ( $root->$parent_field == $e->$parent_field )					$top_level_elements[] = $e;				else					$children_elements[ $e->$parent_field ][] = $e;			}		}		foreach ( $top_level_elements as $e )			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		/*		 * if we are displaying all levels, and remaining children_elements is not empty,		 * then we got orphans, which should be displayed regardless		 */		if ( ( $max_depth == 0 ) && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		 }		 return $output;	}	/** 	 * paged_walk() - produce a page of nested elements 	 * 	 * Given an array of hierarchical elements, the maximum depth, a specific page number, 	 * and number of elements per page, this function first determines all top level root elements 	 * belonging to that page, then lists them and all of their children in hierarchical order. 	 * 	 * @package WordPress 	 * @since 2.7 	 * @param $max_depth = 0  means display all levels; $max_depth > 0  specifies the number of display levels. 	 * @param $page_num the specific page number, beginning with 1. 	 * @return XHTML of the specified page of elements 	 */	function paged_walk( $elements, $max_depth, $page_num, $per_page ) {		/* sanity check */		if ( empty($elements) || $max_depth < -1 )			return '';		$args = array_slice( func_get_args(), 4 );		$output = '';		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		$count = -1;		if ( -1 == $max_depth )			$total_top = count( $elements );		if ( $page_num < 1 || $per_page < 0  ) {			// No paging			$paging = false;			$start = 0;			if ( -1 == $max_depth )				$end = $total_top;			$this->max_pages = 1;		} else {			$paging = true;			$start = ( (int)$page_num - 1 ) * (int)$per_page;			$end   = $start + $per_page;			if ( -1 == $max_depth )				$this->max_pages = ceil($total_top / $per_page);		}		// flat display		if ( -1 == $max_depth ) {			if ( !empty($args[0]['reverse_top_level']) ) {				$elements = array_reverse( $elements );				$oldstart = $start;				$start = $total_top - $end;				$end = $total_top - $oldstart;			}			$empty_array = array();			foreach ( $elements as $e ) {				$count++;				if ( $count < $start )					continue;				if ( $count >= $end )					break;				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			}			return $output;		}		/*		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		$total_top = count( $top_level_elements );		if ( $paging )			$this->max_pages = ceil($total_top / $per_page);		else			$end = $total_top;		if ( !empty($args[0]['reverse_top_level']) ) {			$top_level_elements = array_reverse( $top_level_elements );			$oldstart = $start;			$start = $total_top - $end;			$end = $total_top - $oldstart;		}		if ( !empty($args[0]['reverse_children']) ) {			foreach ( $children_elements as $parent => $children )				$children_elements[$parent] = array_reverse( $children );		}		foreach ( $top_level_elements as $e ) {			$count++;			//for the last page, need to unset earlier children in order to keep track of orphans			if ( $end >= $total_top && $count < $start )					$this->unset_children( $e, $children_elements );			if ( $count < $start )				continue;			if ( $count >= $end )				break;			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		}		if ( $end >= $total_top && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		}		return $output;	}	function get_number_of_root_elements( $elements ){		$num = 0;		$parent_field = $this->db_fields['parent'];		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$num++;		}		return $num;	}	// unset all the children for a given top level element	function unset_children( $e, &$children_elements ){		if ( !$e || !$children_elements )			return;		$id_field = $this->db_fields['id'];		$id = $e->$id_field;		if ( !empty($children_elements[$id]) && is_array($children_elements[$id]) )			foreach ( (array) $children_elements[$id] as $child )				$this->unset_children( $child, $children_elements );		if ( isset($children_elements[$id]) )			unset( $children_elements[$id] );	}}/** * Create HTML list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Page extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page. Used for padding.	 * @param int $current_page Page ID.	 * @param array $args	 */	function start_el(&$output, $page, $depth, $args, $current_page) {		if ( $depth )			$indent = str_repeat("\t", $depth);		else			$indent = '';		extract($args, EXTR_SKIP);		$css_class = array('page_item', 'page-item-'.$page->ID);		if ( !empty($current_page) ) {			$_current_page = get_page( $current_page );			if ( isset($_current_page->ancestors) && in_array($page->ID, (array) $_current_page->ancestors) )				$css_class[] = 'current_page_ancestor';			if ( $page->ID == $current_page )				$css_class[] = 'current_page_item';			elseif ( $_current_page && $page->ID == $_current_page->post_parent )				$css_class[] = 'current_page_parent';		} elseif ( $page->ID == get_option('page_for_posts') ) {			$css_class[] = 'current_page_parent';		}		$css_class = implode(' ', apply_filters('page_css_class', $css_class, $page));		$output .= $indent . '<li class="' . $css_class . '"><a href="' . get_page_link($page->ID) . '" title="' . esc_attr( wp_strip_all_tags( apply_filters( 'the_title', $page->post_title, $page->ID ) ) ) . '">' . $link_before . apply_filters( 'the_title', $page->post_title, $page->ID ) . $link_after . '</a>';		if ( !empty($show_date) ) {			if ( 'modified' == $show_date )				$time = $page->post_modified;			else				$time = $page->post_date;			$output .= " " . mysql2date($date_format, $time);		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $page, $depth) {		$output .= "</li>\n";	}}/** * Create HTML dropdown list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_PageDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page in reference to parent pages. Used for padding.	 * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.	 */	function start_el(&$output, $page, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$output .= "\t<option class=\"level-$depth\" value=\"$page->ID\"";		if ( $page->ID == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$title = esc_html($page->post_title);		$output .= "$pad$title";		$output .= "</option>\n";	}}/** * Create HTML list of categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Category extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function start_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function end_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category in reference to parents.	 * @param array $args	 */	function start_el(&$output, $category, $depth, $args) {		extract($args);		$cat_name = esc_attr( $category->name);		$cat_name = apply_filters( 'list_cats', $cat_name, $category );		$link = '<a href="' . get_term_link( $category, $category->taxonomy ) . '" ';		if ( $use_desc_for_title == 0 || empty($category->description) )			$link .= 'title="' . sprintf(__( 'View all posts filed under %s' ), $cat_name) . '"';		else			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';		$link .= '>';		$link .= $cat_name . '</a>';		if ( (! empty($feed_image)) || (! empty($feed)) ) {			$link .= ' ';			if ( empty($feed_image) )				$link .= '(';			$link .= '<a href="' . get_term_feed_link( $category->term_id, $category->taxonomy, $feed_type ) . '"';			if ( empty($feed) )				$alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s' ), $cat_name ) . '"';			else {				$title = ' title="' . $feed . '"';				$alt = ' alt="' . $feed . '"';				$name = $feed;				$link .= $title;			}			$link .= '>';			if ( empty($feed_image) )				$link .= $name;			else				$link .= "<img src='$feed_image'$alt$title" . ' />';			$link .= '</a>';			if ( empty($feed_image) )				$link .= ')';		}		if ( isset($show_count) && $show_count )			$link .= ' (' . intval($category->count) . ')';		if ( isset($show_date) && $show_date ) {			$link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);		}		if ( isset($current_category) && $current_category )			$_current_category = get_category( $current_category );		if ( 'list' == $args['style'] ) {			$output .= "\t<li";			$class = 'cat-item cat-item-'.$category->term_id;			if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )				$class .=  ' current-cat';			elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )				$class .=  ' current-cat-parent';			$output .=  ' class="'.$class.'"';			$output .= ">$link\n";		} else {			$output .= "\t$link<br />\n";		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Not used.	 * @param int $depth Depth of category. Not used.	 * @param array $args Only uses 'list' for whether should append to output.	 */	function end_el(&$output, $page, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$output .= "</li>\n";	}}/** * Create HTML dropdown list of Categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_CategoryDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category. Used for padding.	 * @param array $args Uses 'selected', 'show_count', and 'show_last_update' keys, if they exist.	 */	function start_el(&$output, $category, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$cat_name = apply_filters('list_cats', $category->name, $category);		$output .= "\t<option class=\"level-$depth\" value=\"".$category->term_id."\"";		if ( $category->term_id == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$output .= $pad.$cat_name;		if ( $args['show_count'] )			$output .= '&nbsp;&nbsp;('. $category->count .')';		if ( $args['show_last_update'] ) {			$format = 'Y-m-d';			$output .= '&nbsp;&nbsp;' . gmdate($format, $category->last_update_timestamp);		}		$output .= "</option>\n";	}}/** * Send XML response back to AJAX request. * * @package WordPress * @since 2.1.0 */class WP_Ajax_Response {	/**	 * Store XML responses to send.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $responses = array();	/**	 * PHP4 Constructor - Passes args to {@link WP_Ajax_Response::add()}.	 *	 * @since 2.1.0	 * @see WP_Ajax_Response::add()	 *	 * @param string|array $args Optional. Will be passed to add() method.	 * @return WP_Ajax_Response	 */	function WP_Ajax_Response( $args = '' ) {		if ( !empty($args) )			$this->add($args);	}	/**	 * Append to XML response based on given arguments.	 *	 * The arguments that can be passed in the $args parameter are below. It is	 * also possible to pass a WP_Error object in either the 'id' or 'data'	 * argument. The parameter isn't actually optional, content should be given	 * in order to send the correct response.	 *	 * 'what' argument is a string that is the XMLRPC response type.	 * 'action' argument is a boolean or string that acts like a nonce.	 * 'id' argument can be WP_Error or an integer.	 * 'old_id' argument is false by default or an integer of the previous ID.	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,	 * html ID = after, -html ID = before.	 * 'data' argument is a string with the content or message.	 * 'supplemental' argument is an array of strings that will be children of	 * the supplemental element.	 *	 * @since 2.1.0	 *	 * @param string|array $args Override defaults.	 * @return string XML response.	 */	function add( $args = '' ) {		$defaults = array(			'what' => 'object', 'action' => false,			'id' => '0', 'old_id' => false,			'position' => 1,			'data' => '', 'supplemental' => array()		);		$r = wp_parse_args( $args, $defaults );		extract( $r, EXTR_SKIP );		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );		if ( is_wp_error($id) ) {			$data = $id;			$id = 0;		}		$response = '';		if ( is_wp_error($data) ) {			foreach ( (array) $data->get_error_codes() as $code ) {				$response .= "<wp_error code='$code'><![CDATA[" . $data->get_error_message($code) . "]]></wp_error>";				if ( !$error_data = $data->get_error_data($code) )					continue;				$class = '';				if ( is_object($error_data) ) {					$class = ' class="' . get_class($error_data) . '"';					$error_data = get_object_vars($error_data);				}				$response .= "<wp_error_data code='$code'$class>";				if ( is_scalar($error_data) ) {					$response .= "<![CDATA[$error_data]]>";				} elseif ( is_array($error_data) ) {					foreach ( $error_data as $k => $v )						$response .= "<$k><![CDATA[$v]]></$k>";				}				$response .= "</wp_error_data>";			}		} else {			$response = "<response_data><![CDATA[$data]]></response_data>";		}		$s = '';		if ( is_array($supplemental) ) {			foreach ( $supplemental as $k => $v )				$s .= "<$k><![CDATA[$v]]></$k>";			$s = "<supplemental>$s</supplemental>";		}		if ( false === $action )			$action = $_POST['action'];		$x = '';		$x .= "<response action='{$action}_$id'>"; // The action attribute in the xml output is formatted like a nonce action		$x .=	"<$what id='$id' " . ( false === $old_id ? '' : "old_id='$old_id' " ) . "position='$position'>";		$x .=		$response;		$x .=		$s;		$x .=	"</$what>";		$x .= "</response>";		$this->responses[] = $x;		return $x;	}	/**	 * Display XML formatted responses.	 *	 * Sets the content type header to text/xml.	 *	 * @since 2.1.0	 */	function send() {		header('Content-Type: text/xml');		echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";		foreach ( (array) $this->responses as $response )			echo $response;		echo '</wp_ajax>';		die();	}}/** * Helper class to remove the need to use eval to replace $matches[] in query strings. * * @since 2.9.0 */class WP_MatchesMapRegex {	/**	 * store for matches	 *	 * @access private	 * @var array	 */	var $_matches;	/**	 * store for mapping result	 *	 * @access public	 * @var string	 */	var $output;	/**	 * subject to perform mapping on (query string containing $matches[] references	 *	 * @access private	 * @var string	 */	var $_subject;	/**	 * regexp pattern to match $matches[] references	 *	 * @var string	 */	var $_pattern = '(\$matches\[[1-9]+[0-9]*\])'; // magic number	/**	 * constructor	 *	 * @param string $subject subject if regex	 * @param array  $matches data to use in map	 * @return self	 */	function WP_MatchesMapRegex($subject, $matches) {		$this->_subject = $subject;		$this->_matches = $matches;		$this->output = $this->_map();	}	/**	 * Substitute substring matches in subject.	 *	 * static helper function to ease use	 *	 * @access public	 * @param string $subject subject	 * @param array  $matches data used for subsitution	 * @return string	 */	function apply($subject, $matches) {		$oSelf =& new WP_MatchesMapRegex($subject, $matches);		return $oSelf->output;	}	/**	 * do the actual mapping	 *	 * @access private	 * @return string	 */	function _map() {		$callback = array(&$this, 'callback');		return preg_replace_callback($this->_pattern, $callback, $this->_subject);	}	/**	 * preg_replace_callback hook	 *	 * @access public	 * @param  array $matches preg_replace regexp matches	 * @return string	 */	function callback($matches) {		$index = intval(substr($matches[0], 9, -1));		return ( isset( $this->_matches[$index] ) ? urlencode($this->_matches[$index]) : '' );	}}?>
<?php/** * WordPress Dashboard Widget Administration Panel API * * @package WordPress * @subpackage Administration *//** * Registers dashboard widgets. * * handles POST data, sets up filters. * * @since unknown */function wp_dashboard_setup() {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_dashboard_control_callbacks;	$wp_dashboard_control_callbacks = array();	$update = false;	$widget_options = get_option( 'dashboard_widget_options' );	if ( !$widget_options || !is_array($widget_options) )		$widget_options = array();	/* Register Widgets and Controls */	// Right Now	wp_add_dashboard_widget( 'dashboard_right_now', __( 'Right Now' ), 'wp_dashboard_right_now' );	// Recent Comments Widget	if ( !isset( $widget_options['dashboard_recent_comments'] ) || !isset( $widget_options['dashboard_recent_comments']['items'] ) ) {		$update = true;		$widget_options['dashboard_recent_comments'] = array(			'items' => 5,		);	}	$recent_comments_title = __( 'Recent Comments' );	wp_add_dashboard_widget( 'dashboard_recent_comments', $recent_comments_title, 'wp_dashboard_recent_comments', 'wp_dashboard_recent_comments_control' );	// Incoming Links Widget	if ( !isset( $widget_options['dashboard_incoming_links'] ) || !isset( $widget_options['dashboard_incoming_links']['home'] ) || $widget_options['dashboard_incoming_links']['home'] != get_option('home') ) {		$update = true;		$num_items = isset($widget_options['dashboard_incoming_links']['items']) ? $widget_options['dashboard_incoming_links']['items'] : 10;		$widget_options['dashboard_incoming_links'] = array(			'home' => get_option('home'),			'link' => apply_filters( 'dashboard_incoming_links_link', 'http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'url' => isset($widget_options['dashboard_incoming_links']['url']) ? apply_filters( 'dashboard_incoming_links_feed', $widget_options['dashboard_incoming_links']['url'] ) : apply_filters( 'dashboard_incoming_links_feed', 'http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=' . $num_items . '&output=rss&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'items' => $num_items,			'show_date' => isset($widget_options['dashboard_incoming_links']['show_date']) ? $widget_options['dashboard_incoming_links']['show_date'] : false		);	}	wp_add_dashboard_widget( 'dashboard_incoming_links', __( 'Incoming Links' ), 'wp_dashboard_incoming_links', 'wp_dashboard_incoming_links_control' );	// WP Plugins Widget	if ( current_user_can( 'install_plugins' ) )		wp_add_dashboard_widget( 'dashboard_plugins', __( 'Plugins' ), 'wp_dashboard_plugins' );	// QuickPress Widget	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_quick_press', __( 'QuickPress' ), 'wp_dashboard_quick_press' );	// Recent Drafts	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_recent_drafts', __('Recent Drafts'), 'wp_dashboard_recent_drafts' );	// Primary feed (Dev Blog) Widget	if ( !isset( $widget_options['dashboard_primary'] ) ) {		$update = true;		$widget_options['dashboard_primary'] = array(			'link' => apply_filters( 'dashboard_primary_link',  __( 'http://wordpress.org/development/' ) ),			'url' => apply_filters( 'dashboard_primary_feed',  __( 'http://wordpress.org/development/feed/' ) ),			'title' => apply_filters( 'dashboard_primary_title', __( 'WordPress Blog' ) ),			'items' => 2,			'show_summary' => 1,			'show_author' => 0,			'show_date' => 1,		);	}	wp_add_dashboard_widget( 'dashboard_primary', $widget_options['dashboard_primary']['title'], 'wp_dashboard_primary', 'wp_dashboard_primary_control' );	// Secondary Feed (Planet) Widget	if ( !isset( $widget_options['dashboard_secondary'] ) ) {		$update = true;		$widget_options['dashboard_secondary'] = array(			'link' => apply_filters( 'dashboard_secondary_link',  __( 'http://planet.wordpress.org/' ) ),			'url' => apply_filters( 'dashboard_secondary_feed',  __( 'http://planet.wordpress.org/feed/' ) ),			'title' => apply_filters( 'dashboard_secondary_title', __( 'Other WordPress News' ) ),			'items' => 5,			'show_summary' => 0,			'show_author' => 0,			'show_date' => 0,		);	}	wp_add_dashboard_widget( 'dashboard_secondary', $widget_options['dashboard_secondary']['title'], 'wp_dashboard_secondary', 'wp_dashboard_secondary_control' );	// Hook to register new widgets	do_action( 'wp_dashboard_setup' );	// Filter widget order	$dashboard_widgets = apply_filters( 'wp_dashboard_widgets', array() );	foreach ( $dashboard_widgets as $widget_id ) {		$name = empty( $wp_registered_widgets[$widget_id]['all_link'] ) ? $wp_registered_widgets[$widget_id]['name'] : $wp_registered_widgets[$widget_id]['name'] . " <a href='{$wp_registered_widgets[$widget_id]['all_link']}' class='edit-box open-box'>" . __('View all') . '</a>';		wp_add_dashboard_widget( $widget_id, $name, $wp_registered_widgets[$widget_id]['callback'], $wp_registered_widget_controls[$widget_id]['callback'] );	}	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget_id']) ) {		ob_start(); // hack - but the same hack wp-admin/widgets.php uses		wp_dashboard_trigger_widget_control( $_POST['widget_id'] );		ob_end_clean();		wp_redirect( remove_query_arg( 'edit' ) );		exit;	}	if ( $update )		update_option( 'dashboard_widget_options', $widget_options );	do_action('do_meta_boxes', 'dashboard', 'normal', '');	do_action('do_meta_boxes', 'dashboard', 'side', '');}function wp_add_dashboard_widget( $widget_id, $widget_name, $callback, $control_callback = null ) {	global $wp_dashboard_control_callbacks;	if ( $control_callback && current_user_can( 'edit_dashboard' ) && is_callable( $control_callback ) ) {		$wp_dashboard_control_callbacks[$widget_id] = $control_callback;		if ( isset( $_GET['edit'] ) && $widget_id == $_GET['edit'] ) {			list($url) = explode( '#', add_query_arg( 'edit', false ), 2 );			$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( $url ) . '">' . __( 'Cancel' ) . '</a></span>';			add_meta_box( $widget_id, $widget_name, '_wp_dashboard_control_callback', 'dashboard', 'normal', 'core' );			return;		}		list($url) = explode( '#', add_query_arg( 'edit', $widget_id ), 2 );		$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( "$url#$widget_id" ) . '" class="edit-box open-box">' . __( 'Configure' ) . '</a></span>';	}	$side_widgets = array('dashboard_quick_press', 'dashboard_recent_drafts', 'dashboard_primary', 'dashboard_secondary');	$location = 'normal';	if ( in_array($widget_id, $side_widgets) )		$location = 'side';	add_meta_box( $widget_id, $widget_name , $callback, 'dashboard', $location, 'core' );}function _wp_dashboard_control_callback( $dashboard, $meta_box ) {	echo '<form action="" method="post" class="dashboard-widget-control-form">';	wp_dashboard_trigger_widget_control( $meta_box['id'] );	echo '<p class="submit"><input type="hidden" name="widget_id" value="' . esc_attr($meta_box['id']) . '" /><input type="submit" value="' . esc_attr__( 'Submit' ) . '" /></p>';	echo '</form>';}/** * Displays the dashboard. * * @since unknown */function wp_dashboard() {	global $screen_layout_columns;	$hide2 = $hide3 = $hide4 = '';	switch ( $screen_layout_columns ) {		case 4:			$width = 'width:24.5%;';			break;		case 3:			$width = 'width:32.67%;';			$hide4 = 'display:none;';			break;		case 2:			$width = 'width:49%;';			$hide3 = $hide4 = 'display:none;';			break;		default:			$width = 'width:98%;';			$hide2 = $hide3 = $hide4 = 'display:none;';	}?><div id="dashboard-widgets" class="metabox-holder"><?php	echo "\t<div class='postbox-container' style='$width'>\n";	do_meta_boxes( 'dashboard', 'normal', '' );	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";	do_meta_boxes( 'dashboard', 'side', '' );	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";	do_meta_boxes( 'dashboard', 'column3', '' );	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";	do_meta_boxes( 'dashboard', 'column4', '' );?></div></div><form style="display:none" method="get" action="">	<p><?php	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );?>	</p></form><?php}/* Dashboard Widgets */function wp_dashboard_right_now() {	global $wp_registered_sidebars;	$num_posts = wp_count_posts( 'post' );	$num_pages = wp_count_posts( 'page' );	$num_cats  = wp_count_terms('category');	$num_tags = wp_count_terms('post_tag');	$num_comm = wp_count_comments( );	echo "\n\t".'<div class="table table_content">';	echo "\n\t".'<p class="sub">' . __('Content') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Posts	$num = number_format_i18n( $num_posts->publish );	$text = _n( 'Post', 'Posts', intval($num_posts->publish) );	if ( current_user_can( 'edit_posts' ) ) {		$num = "<a href='edit.php'>$num</a>";		$text = "<a href='edit.php'>$text</a>";	}	echo '<td class="first b b-posts">' . $num . '</td>';	echo '<td class="t posts">' . $text . '</td>';	echo '</tr><tr>';	/* TODO: Show status breakdown on hover	if ( $can_edit_pages && !empty($num_pages->publish) ) { // how many pages is not exposed in feeds.  Don't show if !current_user_can		$post_type_texts[] = '<a href="edit-pages.php">'.sprintf( _n( '%s page', '%s pages', $num_pages->publish ), number_format_i18n( $num_pages->publish ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->draft) ) {		$post_type_texts[] = '<a href="edit.php?post_status=draft">'.sprintf( _n( '%s draft', '%s drafts', $num_posts->draft ), number_format_i18n( $num_posts->draft ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->future) ) {		$post_type_texts[] = '<a href="edit.php?post_status=future">'.sprintf( _n( '%s scheduled post', '%s scheduled posts', $num_posts->future ), number_format_i18n( $num_posts->future ) ).'</a>';	}	if ( current_user_can('publish_posts') && !empty($num_posts->pending) ) {		$pending_text = sprintf( _n( 'There is <a href="%1$s">%2$s post</a> pending your review.', 'There are <a href="%1$s">%2$s posts</a> pending your review.', $num_posts->pending ), 'edit.php?post_status=pending', number_format_i18n( $num_posts->pending ) );	} else {		$pending_text = '';	}	*/	// Pages	$num = number_format_i18n( $num_pages->publish );	$text = _n( 'Page', 'Pages', $num_pages->publish );	if ( current_user_can( 'edit_pages' ) ) {		$num = "<a href='edit.php?post_type=page'>$num</a>";		$text = "<a href='edit.php?post_type=page'>$text</a>";	}	echo '<td class="first b b_pages">' . $num . '</td>';	echo '<td class="t pages">' . $text . '</td>';	echo '</tr><tr>';	// Categories	$num = number_format_i18n( $num_cats );	$text = _n( 'Category', 'Categories', $num_cats );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php?taxonomy=category'>$num</a>";		$text = "<a href='edit-tags.php?taxonomy=category'>$text</a>";	}	echo '<td class="first b b-cats">' . $num . '</td>';	echo '<td class="t cats">' . $text . '</td>';	echo '</tr><tr>';	// Tags	$num = number_format_i18n( $num_tags );	$text = _n( 'Tag', 'Tags', $num_tags );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php'>$num</a>";		$text = "<a href='edit-tags.php'>$text</a>";	}	echo '<td class="first b b-tags">' . $num . '</td>';	echo '<td class="t tags">' . $text . '</td>';	echo "</tr>";	do_action('right_now_content_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="table table_discussion">';	echo "\n\t".'<p class="sub">' . __('Discussion') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Total Comments	$num = '<span class="total-count">' . number_format_i18n($num_comm->total_comments) . '</span>';	$text = _n( 'Comment', 'Comments', $num_comm->total_comments );	if ( current_user_can( 'moderate_comments' ) ) {		$num = '<a href="edit-comments.php">' . $num . '</a>';		$text = '<a href="edit-comments.php">' . $text . '</a>';	}	echo '<td class="b b-comments">' . $num . '</td>';	echo '<td class="last t comments">' . $text . '</td>';	echo '</tr><tr>';	// Approved Comments	$num = '<span class="approved-count">' . number_format_i18n($num_comm->approved) . '</span>';	$text = _nx( 'Approved', 'Approved', $num_comm->approved, 'Right Now' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=approved'>$num</a>";		$text = "<a class='approved' href='edit-comments.php?comment_status=approved'>$text</a>";	}	echo '<td class="b b_approved">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Pending Comments	$num = '<span class="pending-count">' . number_format_i18n($num_comm->moderated) . '</span>';	$text = _n( 'Pending', 'Pending', $num_comm->moderated );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=moderated'>$num</a>";		$text = "<a class='waiting' href='edit-comments.php?comment_status=moderated'>$text</a>";	}	echo '<td class="b b-waiting">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Spam Comments	$num = number_format_i18n($num_comm->spam);	$text = _nx( 'Spam', 'Spam', $num_comm->spam, 'comment' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=spam'><span class='spam-count'>$num</span></a>";		$text = "<a class='spam' href='edit-comments.php?comment_status=spam'>$text</a>";	}	echo '<td class="b b-spam">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>";	do_action('right_now_table_end');	do_action('right_now_discussion_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="versions">';	$ct = current_theme_info();	echo "\n\t<p>";	if ( !empty($wp_registered_sidebars) ) {		$sidebars_widgets = wp_get_sidebars_widgets();		$num_widgets = 0;		foreach ( (array) $sidebars_widgets as $k => $v ) {			if ( 'wp_inactive_widgets' == $k )				continue;			if ( is_array($v) )				$num_widgets = $num_widgets + count($v);		}		$num = number_format_i18n( $num_widgets );		$switch_themes = $ct->title;		if ( current_user_can( 'switch_themes') ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			$switch_themes = '<a href="themes.php">' . $switch_themes . '</a>';		}		if ( current_user_can( 'edit_theme_options' ) ) {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widget</a></span>', 'Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widgets</a></span>', $num_widgets), $switch_themes, $num);		} else {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b">%2$s Widget</span>', 'Theme <span class="b">%1$s</span> with <span class="b">%2$s Widgets</span>', $num_widgets), $switch_themes, $num);		}	} else {		if ( current_user_can( 'switch_themes' ) ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			printf( __('Theme <span class="b"><a href="themes.php">%1$s</a></span>'), $ct->title );		} else {			printf( __('Theme <span class="b">%1$s</span>'), $ct->title );		}	}	echo '</p>';	update_right_now_message();	echo "\n\t".'<br class="clear" /></div>';	do_action( 'rightnow_end' );	do_action( 'activity_box_end' );}function wp_dashboard_quick_press_output() {	global $post_ID;	$drafts = false;	if ( 'post' === strtolower( $_SERVER['REQUEST_METHOD'] ) && isset( $_POST['action'] ) && 0 === strpos( $_POST['action'], 'post-quickpress' ) && (int) $_POST['post_ID'] ) {		$view = get_permalink( $_POST['post_ID'] );		$edit = esc_url( get_edit_post_link( $_POST['post_ID'] ) );		if ( 'post-quickpress-publish' == $_POST['action'] ) {			if ( current_user_can('publish_posts') )				printf( '<div class="updated"><p>' . __( 'Post published. <a href="%s">View post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( $view ), $edit );			else				printf( '<div class="updated"><p>' . __( 'Post submitted. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );		} else {			printf( '<div class="updated"><p>' . __( 'Draft saved. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );			$drafts_query = new WP_Query( array(				'post_type' => 'post',				'post_status' => 'draft',				'author' => $GLOBALS['current_user']->ID,				'posts_per_page' => 1,				'orderby' => 'modified',				'order' => 'DESC'			) );			if ( $drafts_query->posts )				$drafts =& $drafts_query->posts;		}		printf('<p class="textright">' . __('You can also try %s, easy blogging from anywhere on the Web.') . '</p>', '<a href="' . esc_url( admin_url( 'tools.php' ) ) . '">' . __('Press This') . '</a>' );		$_REQUEST = array(); // hack for get_default_post_to_edit()	}	/* Check if a new auto-draft (= no new post_ID) is needed or if the old can be used */	$last_post_id = (int) get_user_option( 'dashboard_quick_press_last_post_id' ); // Get the last post_ID	if ( $last_post_id ) {		$post = get_post( $last_post_id );		if ( empty( $post ) || $post->post_status != 'auto-draft' ) { // auto-draft doesn't exists anymore			$post = get_default_post_to_edit('post', true);			update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID		} else {			$post->post_title = ''; // Remove the auto draft title		}	} else {		$post = get_default_post_to_edit('post', true);		update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID	}	$post_ID = (int) $post->ID;?>	<form name="post" action="<?php echo esc_url( admin_url( 'post.php' ) ); ?>" method="post" id="quick-press">		<h4 id="quick-post-title"><label for="title"><?php _e('Title') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="post_title" id="title" tabindex="1" autocomplete="off" value="<?php echo esc_attr( $post->post_title ); ?>" />		</div>		<?php if ( current_user_can( 'upload_files' ) ) : ?>		<div id="media-buttons" class="hide-if-no-js">			<?php do_action( 'media_buttons' ); ?>		</div>		<?php endif; ?>		<h4 id="content-label"><label for="content"><?php _e('Content') ?></label></h4>		<div class="textarea-wrap">			<textarea name="content" id="content" class="mceEditor" rows="3" cols="15" tabindex="2"><?php echo $post->post_content; ?></textarea>		</div>		<script type="text/javascript">edCanvas = document.getElementById('content');edInsertContent = null;</script>		<h4><label for="tags-input"><?php _e('Tags') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="tags_input" id="tags-input" tabindex="3" value="<?php echo get_tags_to_edit( $post->ID ); ?>" />		</div>		<p class="submit">			<input type="hidden" name="action" id="quickpost-action" value="post-quickpress-save" />			<input type="hidden" name="quickpress_post_ID" value="<?php echo $post_ID; ?>" />			<input type="hidden" name="post_type" value="post" />			<?php wp_nonce_field('add-post'); ?>			<input type="submit" name="save" id="save-post" class="button" tabindex="4" value="<?php esc_attr_e('Save Draft'); ?>" />			<input type="reset" value="<?php esc_attr_e( 'Reset' ); ?>" class="button" />			<span id="publishing-action">				<input type="submit" name="publish" id="publish" accesskey="p" tabindex="5" class="button-primary" value="<?php current_user_can('publish_posts') ? esc_attr_e('Publish') : esc_attr_e('Submit for Review'); ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" />			</span>			<br class="clear" />		</p>	</form><?php	if ( $drafts )		wp_dashboard_recent_drafts( $drafts );}function wp_dashboard_quick_press() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_recent_drafts( $drafts = false ) {	if ( !$drafts ) {		$drafts_query = new WP_Query( array(			'post_type' => 'post',			'post_status' => 'draft',			'author' => $GLOBALS['current_user']->ID,			'posts_per_page' => 5,			'orderby' => 'modified',			'order' => 'DESC'		) );		$drafts =& $drafts_query->posts;	}	if ( $drafts && is_array( $drafts ) ) {		$list = array();		foreach ( $drafts as $draft ) {			$url = get_edit_post_link( $draft->ID );			$title = _draft_or_post_title( $draft->ID );			$item = "<h4><a href='$url' title='" . sprintf( __( 'Edit &#8220;%s&#8221;' ), esc_attr( $title ) ) . "'>" . esc_html($title) . "</a> <abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'>" . get_the_time( get_option( 'date_format' ), $draft ) . '</abbr></h4>';			if ( $the_content = preg_split( '#\s#', strip_tags( $draft->post_content ), 11, PREG_SPLIT_NO_EMPTY ) )				$item .= '<p>' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 < count( $the_content ) ? '&hellip;' : '' ) . '</p>';			$list[] = $item;		}?>	<ul>		<li><?php echo join( "</li>\n<li>", $list ); ?></li>	</ul>	<p class="textright"><a href="edit.php?post_status=draft" class="button"><?php _e('View all'); ?></a></p><?php	} else {		_e('There are no drafts at the moment');	}}/** * Display recent comments dashboard widget content. * * @since unknown */function wp_dashboard_recent_comments() {	global $wpdb;	if ( current_user_can('edit_posts') )		$allowed_states = array('0', '1');	else		$allowed_states = array('1');	// Select all comment types and filter out spam later for better query performance.	$comments = array();	$start = 0;	$widgets = get_option( 'dashboard_widget_options' );	if ( isset( $widgets['dashboard_recent_comments'] ) && isset( $widgets['dashboard_recent_comments']['items'] ) )		$total_items = (int) $widgets['dashboard_recent_comments']['items'];	else		$total_items = 5;	while ( count( $comments ) < 5 && $possible = $wpdb->get_results( "SELECT * FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {		foreach ( $possible as $comment ) {			if ( count( $comments ) >= $total_items )				break;			if ( in_array( $comment->comment_approved, $allowed_states ) && current_user_can( 'read_post', $comment->comment_post_ID ) )				$comments[] = $comment;		}		$start = $start + 50;	}	if ( $comments ) :?>		<div id="the-comment-list" class="list:comment"><?php		foreach ( $comments as $comment )			_wp_dashboard_recent_comments_row( $comment );?>		</div><?php		if ( current_user_can('edit_posts') ) { ?>			<p class="textright"><a href="edit-comments.php" class="button"><?php _e('View all'); ?></a></p><?php	}		wp_comment_reply( -1, false, 'dashboard', false );		wp_comment_trashnotice();	else :?>	<p><?php _e( 'No comments yet.' ); ?></p><?php	endif; // $comments;}function _wp_dashboard_recent_comments_row( &$comment, $show_date = true ) {	$GLOBALS['comment'] =& $comment;	$comment_post_url = get_edit_post_link( $comment->comment_post_ID );	$comment_post_title = strip_tags(get_the_title( $comment->comment_post_ID ));	$comment_post_link = "<a href='$comment_post_url'>$comment_post_title</a>";	$comment_link = '<a class="comment-link" href="' . esc_url(get_comment_link()) . '">#</a>';	$actions_string = '';	if ( current_user_can('edit_post', $comment->comment_post_ID) ) {		// preorder it: Approve | Reply | Edit | Spam | Trash		$actions = array(			'approve' => '', 'unapprove' => '',			'reply' => '',			'edit' => '',			'spam' => '',			'trash' => '', 'delete' => ''		);		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';		$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';		$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . __('Edit comment') . "'>". __('Edit') . '</a>';		$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$comment->comment_post_ID.'\');return false;" class="vim-r hide-if-no-js" title="'.__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';		$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '</a>';		if ( !EMPTY_TRASH_DAYS )			$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';		else			$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . __( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';		$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';			// Reply and quickedit need a hide-if-no-js span			if ( 'reply' == $action || 'quickedit' == $action )				$action .= ' hide-if-no-js';			$actions_string .= "<span class='$action'>$sep$link</span>";		}	}?>		<div id="comment-<?php echo $comment->comment_ID; ?>" <?php comment_class( array( 'comment-item', wp_get_comment_status($comment->comment_ID) ) ); ?>>			<?php if ( !$comment->comment_type || 'comment' == $comment->comment_type ) : ?>			<?php echo get_avatar( $comment, 50 ); ?>			<div class="dashboard-comment-wrap">			<h4 class="comment-meta">				<?php printf( /* translators: 1: comment author, 2: post link, 3: notification if the comment is pending */__( 'From %1$s on %2$s%3$s' ),					'<cite class="comment-author">' . get_comment_author_link() . '</cite>', $comment_post_link.' '.$comment_link, ' <span class="approve">' . __( '[Pending]' ) . '</span>' ); ?>			</h4>			<?php			else :				switch ( $comment->comment_type ) :				case 'pingback' :					$type = __( 'Pingback' );					break;				case 'trackback' :					$type = __( 'Trackback' );					break;				default :					$type = ucwords( $comment->comment_type );				endswitch;				$type = esc_html( $type );			?>			<div class="dashboard-comment-wrap">			<?php /* translators: %1$s is type of comment, %2$s is link to the post */ ?>			<h4 class="comment-meta"><?php printf( _x( '%1$s on %2$s', 'dashboard' ), "<strong>$type</strong>", $comment_post_link." ".$comment_link ); ?></h4>			<p class="comment-author"><?php comment_author_link(); ?></p>			<?php endif; // comment_type ?>			<blockquote><p><?php comment_excerpt(); ?></p></blockquote>			<p class="row-actions"><?php echo $actions_string; ?></p>			</div>		</div><?php}/** * The recent comments dashboard widget control. * * @since 3.0.0 */function wp_dashboard_recent_comments_control() {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options['dashboard_recent_comments']) )		$widget_options['dashboard_recent_comments'] = array();	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-recent-comments']) ) {		$number = (int) stripslashes($_POST['widget-recent-comments']['items']);		if ( $number < 1 || $number > 30 )			$number = 5;		$widget_options['dashboard_recent_comments']['items'] = $number;		update_option( 'dashboard_widget_options', $widget_options );	}	$number = isset( $widget_options['dashboard_recent_comments']['items'] ) ? (int) $widget_options['dashboard_recent_comments']['items'] : '';	echo '<p><label for="comments-number">' . __('Number of comments to show:') . '</label>';	echo '<input id="comments-number" name="widget-recent-comments[items]" type="text" value="' . $number . '" size="3" /> <small>' . __( '(at most 30)' ) . '</small></p>';}function wp_dashboard_incoming_links() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display incoming links dashboard widget content. * * @since unknown */function wp_dashboard_incoming_links_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_incoming_links'], EXTR_SKIP );	$rss = fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p>';		}		return;	}	if ( !$rss->get_item_quantity() ) {		echo '<p>' . __('This dashboard widget queries <a href="http://blogsearch.google.com/">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.') . "</p>\n";		$rss->__destruct();		unset($rss);		return;	}	echo "<ul>\n";	if ( !isset($items) )		$items = 10;	foreach ( $rss->get_items(0, $items) as $item ) {		$publisher = '';		$site_link = '';		$link = '';		$content = '';		$date = '';		$link = esc_url( strip_tags( $item->get_link() ) );		$author = $item->get_author();		if ( $author ) {			$site_link = esc_url( strip_tags( $author->get_link() ) );			if ( !$publisher = esc_html( strip_tags( $author->get_name() ) ) )				$publisher = __( 'Somebody' );		} else {		  $publisher = __( 'Somebody' );		}		if ( $site_link )			$publisher = "<a href='$site_link'>$publisher</a>";		else			$publisher = "<strong>$publisher</strong>";		$content = $item->get_content();		$content = wp_html_excerpt($content, 50) . ' ...';		if ( $link )			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here <a href="%2$s">saying</a>, "%3$s"' );		else			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here saying, "%3$s"' );		if ( $show_date ) {			if ( $show_author || $show_summary )				/* translators: incoming links feed, %4$s is the date */				$text .= ' ' . __( 'on %4$s' );			$date = esc_html( strip_tags( $item->get_date() ) );			$date = strtotime( $date );			$date = gmdate( get_option( 'date_format' ), $date );		}		echo "\t<li>" . sprintf( $text, $publisher, $link, $content, $date ) . "</li>\n";	}	echo "</ul>\n";	$rss->__destruct();	unset($rss);}function wp_dashboard_incoming_links_control() {	wp_dashboard_rss_control( 'dashboard_incoming_links', array( 'title' => false, 'show_summary' => false, 'show_author' => false ) );}function wp_dashboard_primary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_primary_control() {	wp_dashboard_rss_control( 'dashboard_primary' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param int $widget_id */function wp_dashboard_rss_output( $widget_id ) {	$widgets = get_option( 'dashboard_widget_options' );	echo '<div class="rss-widget">';	wp_widget_rss_output( $widgets[$widget_id] );	echo "</div>";}function wp_dashboard_secondary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_secondary_control() {	wp_dashboard_rss_control( 'dashboard_secondary' );}/** * Display secondary dashboard RSS widget feed. * * @since unknown * * @return unknown */function wp_dashboard_secondary_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_secondary'], EXTR_SKIP );	$rss = @fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<div class="rss-widget"><p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p></div>';		}	} elseif ( !$rss->get_item_quantity() ) {		$rss->__destruct();		unset($rss);		return false;	} else {		echo '<div class="rss-widget">';		wp_widget_rss_output( $rss, $widgets['dashboard_secondary'] );		echo '</div>';		$rss->__destruct();		unset($rss);	}}function wp_dashboard_plugins() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display plugins most popular, newest plugins, and recently updated widget text. * * @since unknown */function wp_dashboard_plugins_output() {	$popular = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/popular/' );	$new     = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/new/' );	$updated = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/updated/' );	if ( false === $plugin_slugs = get_transient( 'plugin_slugs' ) ) {		$plugin_slugs = array_keys( get_plugins() );		set_transient( 'plugin_slugs', $plugin_slugs, 86400 );	}	foreach ( array( 'popular' => __('Most Popular'), 'new' => __('Newest Plugins'), 'updated' => __('Recently Updated') ) as $feed => $label ) {		if ( is_wp_error($$feed) || !$$feed->get_item_quantity() )			continue;		$items = $$feed->get_items(0, 5);		// Pick a random, non-installed plugin		while ( true ) {			// Abort this foreach loop iteration if there's no plugins left of this type			if ( 0 == count($items) )				continue 2;			$item_key = array_rand($items);			$item = $items[$item_key];			list($link, $frag) = explode( '#', $item->get_link() );			$link = esc_url($link);			if ( preg_match( '|/([^/]+?)/?$|', $link, $matches ) )				$slug = $matches[1];			else {				unset( $items[$item_key] );				continue;			}			// Is this random plugin's slug already installed? If so, try again.			reset( $plugin_slugs );			foreach ( $plugin_slugs as $plugin_slug ) {				if ( $slug == substr( $plugin_slug, 0, strlen( $slug ) ) ) {					unset( $items[$item_key] );					continue 2;				}			}			// If we get to this point, then the random plugin isn't installed and we can stop the while().			break;		}		// Eliminate some common badly formed plugin descriptions		while ( ( null !== $item_key = array_rand($items) ) && false !== strpos( $items[$item_key]->get_description(), 'Plugin Name:' ) )			unset($items[$item_key]);		if ( !isset($items[$item_key]) )			continue;		// current bbPress feed item titles are: user on "topic title"		if ( preg_match( '/&quot;(.*)&quot;/s', $item->get_title(), $matches ) )			$title = $matches[1];		else // but let's make it forward compatible if things change			$title = $item->get_title();		$title = esc_html( $title );		$description = esc_html( strip_tags(@html_entity_decode($item->get_description(), ENT_QUOTES, get_option('blog_charset'))) );		$ilink = wp_nonce_url('plugin-install.php?tab=plugin-information&plugin=' . $slug, 'install-plugin_' . $slug) .							'&amp;TB_iframe=true&amp;width=600&amp;height=800';		echo "<h4>$label</h4>\n";		echo "<h5><a href='$link'>$title</a></h5>&nbsp;<span>(<a href='$ilink' class='thickbox' title='$title'>" . __( 'Install' ) . "</a>)</span>\n";		echo "<p>$description</p>\n";		$$feed->__destruct();		unset($$feed);	}}/** * Checks to see if all of the feed url in $check_urls are cached. * * If $check_urls is empty, look for the rss feed url found in the dashboard * widget optios of $widget_id. If cached, call $callback, a function that * echoes out output for this widget. If not cache, echo a "Loading..." stub * which is later replaced by AJAX call (see top of /wp-admin/index.php) * * @since unknown * * @param int $widget_id * @param callback $callback * @param array $check_urls RSS feeds * @return bool False on failure. True on success. */function wp_dashboard_cached_rss_widget( $widget_id, $callback, $check_urls = array() ) {	$loading = '<p class="widget-loading">' . __( 'Loading&#8230;' ) . '</p>';	if ( empty($check_urls) ) {		$widgets = get_option( 'dashboard_widget_options' );		if ( empty($widgets[$widget_id]['url']) ) {			echo $loading;			return false;		}		$check_urls = array( $widgets[$widget_id]['url'] );	}	include_once ABSPATH . WPINC . '/class-feed.php';	foreach ( $check_urls as $check_url ) {		$cache = new WP_Feed_Cache_Transient('', md5($check_url), '');		if ( ! $cache->load() ) {			echo $loading;			return false;		}	}	if ( $callback && is_callable( $callback ) ) {		$args = array_slice( func_get_args(), 2 );		array_unshift( $args, $widget_id );		call_user_func_array( $callback, $args );	}	return true;}/* Dashboard Widgets Controls */// Calls widget_control callback/** * Calls widget control callback. * * @since unknown * * @param int $widget_control_id Registered Widget ID. */function wp_dashboard_trigger_widget_control( $widget_control_id = false ) {	global $wp_dashboard_control_callbacks;	if ( is_scalar($widget_control_id) && $widget_control_id && isset($wp_dashboard_control_callbacks[$widget_control_id]) && is_callable($wp_dashboard_control_callbacks[$widget_control_id]) ) {		call_user_func( $wp_dashboard_control_callbacks[$widget_control_id], '', array( 'id' => $widget_control_id, 'callback' => $wp_dashboard_control_callbacks[$widget_control_id] ) );	}}/** * The RSS dashboard widget control. * * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data * from RSS-type widgets. * * @since unknown * * @param string widget_id * @param array form_inputs */function wp_dashboard_rss_control( $widget_id, $form_inputs = array() ) {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options[$widget_id]) )		$widget_options[$widget_id] = array();	$number = 1; // Hack to use wp_widget_rss_form()	$widget_options[$widget_id]['number'] = $number;	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-rss'][$number]) ) {		$_POST['widget-rss'][$number] = stripslashes_deep( $_POST['widget-rss'][$number] );		$widget_options[$widget_id] = wp_widget_rss_process( $_POST['widget-rss'][$number] );		// title is optional.  If black, fill it if possible		if ( !$widget_options[$widget_id]['title'] && isset($_POST['widget-rss'][$number]['title']) ) {			$rss = fetch_feed($widget_options[$widget_id]['url']);			if ( is_wp_error($rss) ) {				$widget_options[$widget_id]['title'] = htmlentities(__('Unknown Feed'));			} else {				$widget_options[$widget_id]['title'] = htmlentities(strip_tags($rss->get_title()));				$rss->__destruct();				unset($rss);			}		}		update_option( 'dashboard_widget_options', $widget_options );	}	wp_widget_rss_form( $widget_options[$widget_id], $form_inputs );}/** * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS). */function wp_dashboard_empty() {}?>
<?php/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Edit extends Walker_Nav_Menu  {	/**	 * @see Walker_Nav_Menu::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function start_lvl(&$output) {}	/**	 * @see Walker_Nav_Menu::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function end_lvl(&$output) {	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_wp_nav_menu_max_depth;		$_wp_nav_menu_max_depth = $depth > $_wp_nav_menu_max_depth ? $depth : $_wp_nav_menu_max_depth;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		ob_start();		$item_id = esc_attr( $item->ID );		$removed_args = array(			'action',			'customlink-tab',			'edit-menu-item',			'menu-item',			'page-tab',			'_wpnonce',		);		$original_title = '';		if ( 'taxonomy' == $item->type ) {			$original_title = get_term_field( 'name', $item->object_id, $item->object, 'raw' );		} elseif ( 'post_type' == $item->type ) {			$original_object = get_post( $item->object_id );			$original_title = $original_object->post_title;		}		$classes = array(			'menu-item menu-item-depth-' . $depth,			'menu-item-' . esc_attr( $item->object ),			'menu-item-edit-' . ( ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? 'active' : 'inactive'),		);		$title = $item->title;		if ( isset( $item->post_status ) && 'draft' == $item->post_status ) {			$classes[] = 'pending';			/* translators: %s: title of menu item in draft status */			$title = sprintf( __('%s (Pending)'), $item->title );		}		$title = empty( $item->label ) ? $title : $item->label;		?>		<li id="menu-item-<?php echo $item_id; ?>" class="<?php echo implode(' ', $classes ); ?>">			<dl class="menu-item-bar">				<dt class="menu-item-handle">					<span class="item-title"><?php echo esc_html( $title ); ?></span>					<span class="item-controls">						<span class="item-type"><?php echo esc_html( $item->type_label ); ?></span>						<span class="item-order">							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-up-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-up"><abbr title="<?php esc_attr_e('Move up'); ?>">&#8593;</abbr></a>							|							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-down-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-down"><abbr title="<?php esc_attr_e('Move down'); ?>">&#8595;</abbr></a>						</span>						<a class="item-edit" id="edit-<?php echo $item_id; ?>" title="<?php _e('Edit Menu Item'); ?>" href="<?php							echo ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? admin_url( 'nav-menus.php' ) : add_query_arg( 'edit-menu-item', $item_id, remove_query_arg( $removed_args, admin_url( 'nav-menus.php#menu-item-settings-' . $item_id ) ) );						?>"><?php _e( 'Edit Menu Item' ); ?></a>					</span>				</dt>			</dl>			<div class="menu-item-settings" id="menu-item-settings-<?php echo $item_id; ?>">				<?php if( 'custom' == $item->type ) : ?>					<p class="field-url description description-wide">						<label for="edit-menu-item-url-<?php echo $item_id; ?>">							<?php _e( 'URL' ); ?><br />							<input type="text" id="edit-menu-item-url-<?php echo $item_id; ?>" class="widefat code edit-menu-item-url" name="menu-item-url[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->url ); ?>" />						</label>					</p>				<?php endif; ?>				<p class="description description-thin">					<label for="edit-menu-item-title-<?php echo $item_id; ?>">						<?php _e( 'Navigation Label' ); ?><br />						<input type="text" id="edit-menu-item-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-title" name="menu-item-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->title ); ?>" />					</label>				</p>				<p class="description description-thin">					<label for="edit-menu-item-attr-title-<?php echo $item_id; ?>">						<?php _e( 'Title Attribute' ); ?><br />						<input type="text" id="edit-menu-item-attr-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-attr-title" name="menu-item-attr-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->post_excerpt ); ?>" />					</label>				</p>				<p class="field-link-target description description-thin">					<label for="edit-menu-item-target-<?php echo $item_id; ?>">						<?php _e( 'Link Target' ); ?><br />						<select id="edit-menu-item-target-<?php echo $item_id; ?>" class="widefat edit-menu-item-target" name="menu-item-target[<?php echo $item_id; ?>]">							<option value="" <?php selected( $item->target, ''); ?>><?php _e('Same window or tab'); ?></option>							<option value="_blank" <?php selected( $item->target, '_blank'); ?>><?php _e('New window or tab'); ?></option>						</select>					</label>				</p>				<p class="field-css-classes description description-thin">					<label for="edit-menu-item-classes-<?php echo $item_id; ?>">						<?php _e( 'CSS Classes (optional)' ); ?><br />						<input type="text" id="edit-menu-item-classes-<?php echo $item_id; ?>" class="widefat code edit-menu-item-classes" name="menu-item-classes[<?php echo $item_id; ?>]" value="<?php echo esc_attr( implode(' ', $item->classes ) ); ?>" />					</label>				</p>				<p class="field-xfn description description-thin">					<label for="edit-menu-item-xfn-<?php echo $item_id; ?>">						<?php _e( 'Link Relationship (XFN)' ); ?><br />						<input type="text" id="edit-menu-item-xfn-<?php echo $item_id; ?>" class="widefat code edit-menu-item-xfn" name="menu-item-xfn[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->xfn ); ?>" />					</label>				</p>				<p class="field-description description description-wide">					<label for="edit-menu-item-description-<?php echo $item_id; ?>">						<?php _e( 'Description' ); ?><br />						<textarea id="edit-menu-item-description-<?php echo $item_id; ?>" class="widefat edit-menu-item-description" rows="3" cols="20" name="menu-item-description[<?php echo $item_id; ?>]"><?php echo esc_html( $item->description ); ?></textarea>						<span class="description"><?php _e('The description will be displayed in the menu if the current theme supports it.'); ?></span>					</label>				</p>				<div class="menu-item-actions description-wide submitbox">					<?php if( 'custom' != $item->type ) : ?>						<p class="link-to-original">							<?php printf( __('Original: %s'), '<a href="' . esc_attr( $item->url ) . '">' . esc_html( $original_title ) . '</a>' ); ?>						</p>					<?php endif; ?>					<a class="item-delete submitdelete deletion" id="delete-<?php echo $item_id; ?>" href="<?php					echo wp_nonce_url(						add_query_arg(							array(								'action' => 'delete-menu-item',								'menu-item' => $item_id,							),							remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )						),						'delete-menu_item_' . $item_id					); ?>"><?php _e('Remove'); ?></a> <span class="meta-sep"> | </span> <a class="item-cancel submitcancel" id="cancel-<?php echo $item_id; ?>" href="<?php	echo add_query_arg( array('edit-menu-item' => $item_id, 'cancel' => time()), remove_query_arg( $removed_args, admin_url( 'nav-menus.php' ) ) );						?>#menu-item-settings-<?php echo $item_id; ?>"><?php _e('Cancel'); ?></a>				</div>				<input class="menu-item-data-db-id" type="hidden" name="menu-item-db-id[<?php echo $item_id; ?>]" value="<?php echo $item_id; ?>" />				<input class="menu-item-data-object-id" type="hidden" name="menu-item-object-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object_id ); ?>" />				<input class="menu-item-data-object" type="hidden" name="menu-item-object[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object ); ?>" />				<input class="menu-item-data-parent-id" type="hidden" name="menu-item-parent-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_item_parent ); ?>" />				<input class="menu-item-data-position" type="hidden" name="menu-item-position[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_order ); ?>" />				<input class="menu-item-data-type" type="hidden" name="menu-item-type[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->type ); ?>" />			</div><!-- .menu-item-settings-->			<ul class="menu-item-transport"></ul>		<?php		$output .= ob_get_clean();	}}/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Checklist extends Walker_Nav_Menu  {	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_nav_menu_placeholder;		$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;		$possible_object_id = isset( $item->post_type ) && 'nav_menu_item' == $item->post_type ? $item->object_id : $_nav_menu_placeholder;		$possible_db_id = ( ! empty( $item->ID ) ) && ( 0 < $possible_object_id ) ? (int) $item->ID : 0;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$output .= $indent . '<li>';		$output .= '<label class="menu-item-title">';		$output .= '<input type="checkbox" class="menu-item-checkbox';		if ( ! empty( $item->_add_to_top ) ) {			$output .= ' add-to-top';		}		$output .= '" name="menu-item[' . $possible_object_id . '][menu-item-object-id]" value="'. esc_attr( $item->object_id ) .'" /> ';		$output .= empty( $item->label ) ? esc_html( $item->title ) : esc_html( $item->label );		$output .= '</label>';		// Menu item hidden fields		$output .= '<input type="hidden" class="menu-item-db-id" name="menu-item[' . $possible_object_id . '][menu-item-db-id]" value="' . $possible_db_id . '" />';		$output .= '<input type="hidden" class="menu-item-object" name="menu-item[' . $possible_object_id . '][menu-item-object]" value="'. esc_attr( $item->object ) .'" />';		$output .= '<input type="hidden" class="menu-item-parent-id" name="menu-item[' . $possible_object_id . '][menu-item-parent-id]" value="'. esc_attr( $item->menu_item_parent ) .'" />';		$output .= '<input type="hidden" class="menu-item-type" name="menu-item[' . $possible_object_id . '][menu-item-type]" value="'. esc_attr( $item->type ) .'" />';		$output .= '<input type="hidden" class="menu-item-title" name="menu-item[' . $possible_object_id . '][menu-item-title]" value="'. esc_attr( $item->title ) .'" />';		$output .= '<input type="hidden" class="menu-item-url" name="menu-item[' . $possible_object_id . '][menu-item-url]" value="'. esc_attr( $item->url ) .'" />';		$output .= '<input type="hidden" class="menu-item-target" name="menu-item[' . $possible_object_id . '][menu-item-target]" value="'. esc_attr( $item->target ) .'" />';		$output .= '<input type="hidden" class="menu-item-attr_title" name="menu-item[' . $possible_object_id . '][menu-item-attr_title]" value="'. esc_attr( $item->attr_title ) .'" />';		$output .= '<input type="hidden" class="menu-item-description" name="menu-item[' . $possible_object_id . '][menu-item-description]" value="'. esc_attr( $item->description ) .'" />';		$output .= '<input type="hidden" class="menu-item-classes" name="menu-item[' . $possible_object_id . '][menu-item-classes]" value="'. esc_attr( implode( ' ', $item->classes ) ) .'" />';		$output .= '<input type="hidden" class="menu-item-xfn" name="menu-item[' . $possible_object_id . '][menu-item-xfn]" value="'. esc_attr( $item->xfn ) .'" />';	}}/** * Prints the appropriate response to a menu quick search. * * @since 3.0.0 * * @param array $request The unsanitized request values. */function _wp_ajax_menu_quick_search( $request = array() ) {	$args = array();	$type = isset( $request['type'] ) ? $request['type'] : '';	$object_type = isset( $request['object_type'] ) ? $request['object_type'] : '';	$query = isset( $request['q'] ) ? $request['q'] : '';	$response_format = isset( $request['response-format'] ) && in_array( $request['response-format'], array( 'json', 'markup' ) ) ? $request['response-format'] : 'json';	if ( 'markup' == $response_format ) {		$args['walker'] = new Walker_Nav_Menu_Checklist;	}	if ( 'get-post-item' == $type ) {		if ( post_type_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( $object_id ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_post( $object_id );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => get_the_title( $object_id ),							'post_type' => get_post_type( $object_id ),						)					);					echo "\n";				}			}		} elseif ( taxonomy_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_term( $object_id, $object_type ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_term( $object_id, $object_type );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => $post_obj->name,							'post_type' => $object_type,						)					);					echo "\n";				}			}		}	} elseif ( preg_match('/quick-search-(posttype|taxonomy)-([a-zA-Z_-]*\b)/', $type, $matches) ) {		if ( 'posttype' == $matches[1] && get_post_type_object( $matches[2] ) ) {			query_posts(array(				'posts_per_page' => 10,				'post_type' => $matches[2],				's' => $query,			));			if ( ! have_posts() )				return;			while ( have_posts() ) {				the_post();				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( get_the_ID() ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => get_the_ID(),							'post_title' => get_the_title(),							'post_type' => get_post_type(),						)					);					echo "\n";				}			}		} elseif ( 'taxonomy' == $matches[1] ) {			$terms = get_terms( $matches[2], array(				'name__like' => $query,				'number' => 10,			));			if ( empty( $terms ) || is_wp_error( $terms ) )				return;			foreach( (array) $terms as $term ) {				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( $term ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => $term->term_id,							'post_title' => $term->name,							'post_type' => $matches[2],						)					);					echo "\n";				}			}		}	}}/** * Register nav menu metaboxes and advanced menu items * * @since 3.0.0 **/function wp_nav_menu_setup() {	// Register meta boxes	if ( wp_get_nav_menus() )		add_meta_box( 'nav-menu-theme-locations', __( 'Theme Locations' ), 'wp_nav_menu_locations_meta_box' , 'nav-menus', 'side', 'default' );	add_meta_box( 'add-custom-links', __('Custom Links'), 'wp_nav_menu_item_link_meta_box', 'nav-menus', 'side', 'default' );	wp_nav_menu_post_type_meta_boxes();	wp_nav_menu_taxonomy_meta_boxes();	// Register advanced menu items (columns)	add_filter( 'manage_nav-menus_columns', 'wp_nav_menu_manage_columns');	// If first time editing, disable advanced items by default.	if( false === get_user_option( 'managenav-menuscolumnshidden' ) ) {		$user = wp_get_current_user();		update_user_option($user->ID, 'managenav-menuscolumnshidden',			array( 0 => 'link-target', 1 => 'css-classes', 2 => 'xfn', 3 => 'description', ),			true);	}}/** * Limit the amount of meta boxes to just links, pages and cats for first time users. * * @since 3.0.0 **/function wp_initial_nav_menu_meta_boxes() {	global $wp_meta_boxes;	if ( get_user_option( 'metaboxhidden_nav-menus' ) !== false || ! is_array($wp_meta_boxes) )		return;	$initial_meta_boxes = array( 'nav-menu-theme-locations', 'add-custom-links', 'add-page', 'add-category' );	$hidden_meta_boxes = array();	foreach ( array_keys($wp_meta_boxes['nav-menus']) as $context ) {		foreach ( array_keys($wp_meta_boxes['nav-menus'][$context]) as $priority ) {			foreach ( $wp_meta_boxes['nav-menus'][$context][$priority] as $box ) {				if ( in_array( $box['id'], $initial_meta_boxes ) ) {					unset( $box['id'] );				} else {					$hidden_meta_boxes[] = $box['id'];				}			}		}	}	$user = wp_get_current_user();	update_user_option( $user->ID, 'metaboxhidden_nav-menus', $hidden_meta_boxes, true );}/** * Creates metaboxes for any post type menu item. * * @since 3.0.0 */function wp_nav_menu_post_type_meta_boxes() {	$post_types = get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	if ( ! $post_types )		return;	foreach ( $post_types as $post_type ) {		$post_type = apply_filters( 'nav_menu_meta_box_object', $post_type );		if ( $post_type ) {			$id = $post_type->name;			add_meta_box( "add-{$id}", $post_type->labels->name, 'wp_nav_menu_item_post_type_meta_box', 'nav-menus', 'side', 'default', $post_type );		}	}}/** * Creates metaboxes for any taxonomy menu item. * * @since 3.0.0 */function wp_nav_menu_taxonomy_meta_boxes() {	$taxonomies = get_taxonomies( array( 'show_in_nav_menus' => true ), 'object' );	if ( !$taxonomies )		return;	foreach ( $taxonomies as $tax ) {		$tax = apply_filters( 'nav_menu_meta_box_object', $tax );		if ( $tax ) {			$id = $tax->name;			add_meta_box( "add-{$id}", $tax->labels->name, 'wp_nav_menu_item_taxonomy_meta_box', 'nav-menus', 'side', 'default', $tax );		}	}}/** * Displays a metabox for the nav menu theme locations. * * @since 3.0.0 */function wp_nav_menu_locations_meta_box() {	global $nav_menu_selected_id;	if ( ! current_theme_supports( 'menus' ) ) {		// We must only support widgets. Leave a message and bail.		echo '<p class="howto">' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p>';		return;	}	$locations = get_registered_nav_menus();	$menus = wp_get_nav_menus();	$menu_locations = get_nav_menu_locations();	$num_locations = count( array_keys($locations) );	echo '<p class="howto">' . sprintf( _n('Your theme supports %s menu. Select which menu you would like to use.', 'Your theme supports %s menus. Select which menu appears in each location.', $num_locations ), number_format_i18n($num_locations) ) . '</p>';	foreach ( $locations as $location => $description ) {		?>		<p>			<label class="howto" for="locations-<?php echo $location; ?>">				<span><?php echo $description; ?></span>				<select name="menu-locations[<?php echo $location; ?>]" id="locations-<?php echo $location; ?>">					<option value="0"></option>					<?php foreach ( $menus as $menu ) : ?>					<option<?php selected( isset( $menu_locations[ $location ] ) && $menu_locations[ $location ] == $menu->term_id ); ?>						value="<?php echo $menu->term_id; ?>"><?php						$truncated_name = wp_html_excerpt( $menu->name, 40 );						echo $truncated_name == $menu->name ? $menu->name : trim( $truncated_name ) . '&hellip;';					?></option>					<?php endforeach; ?>				</select>			</label>		</p>	<?php	}	?>	<p class="button-controls">		<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-primary" name="nav-menu-locations" value="<?php esc_attr_e( 'Save' ); ?>" />	</p>	<?php}/** * Displays a metabox for the custom links menu item. * * @since 3.0.0 */function wp_nav_menu_item_link_meta_box() {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$_nav_menu_placeholder = 0 > $_nav_menu_placeholder ? $_nav_menu_placeholder - 1 : -1;	$current_tab = 'create';	if ( isset( $_REQUEST['customlink-tab'] ) && in_array( $_REQUEST['customlink-tab'], array('create', 'all') ) ) {		$current_tab = $_REQUEST['customlink-tab'];	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div class="customlinkdiv" id="customlinkdiv">			<input type="hidden" value="custom" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-type]" />			<p id="menu-item-url-wrap">				<label class="howto" for="custom-menu-item-url">					<span><?php _e('URL'); ?></span>					<input id="custom-menu-item-url" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-url]" type="text" class="code menu-item-textbox" value="http://" />				</label>			</p>			<p id="menu-item-name-wrap">				<label class="howto" for="custom-menu-item-name">					<span><?php _e('Label'); ?></span>					<input id="custom-menu-item-name" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-title]" type="text" class="regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Menu Item'); ?>" />				</label>			</p>		<p class="button-controls">			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-custom-menu-item" id="submit-customlinkdiv" />			</span>		</p>	</div><!-- /.customlinkdiv -->	<?php}/** * Displays a metabox for a post type menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $post_type The post type object. */function wp_nav_menu_item_post_type_meta_box( $object, $post_type ) {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$post_type_name = $post_type['args']->name;	// paginate browsing for large numbers of post objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$post_type_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'title',		'posts_per_page' => $per_page,		'post_type' => $post_type_name,		'suppress_filters' => true,		'update_post_term_cache' => false,		'update_post_meta_cache' => false	);	if ( isset( $post_type['args']->_default_query ) )		$args = array_merge($args, (array) $post_type['args']->_default_query );	// @todo transient caching of these results with proper invalidation on updating of a post of this type	$get_posts = new WP_Query;	$posts = $get_posts->query( $args );	if ( ! $get_posts->post_count ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$post_type_object = get_post_type_object($post_type_name);	$num_pages = $get_posts->max_num_pages;	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$post_type_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'post_type',				'item-object' => $post_type_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	if ( !$posts )		$error = '<li id="error">'. $post_type['args']->labels->not_found .'</li>';	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-recent';	if ( isset( $_REQUEST[$post_type_name . '-tab'] ) && in_array( $_REQUEST[$post_type_name . '-tab'], array('all', 'search') ) ) {		$current_tab = $_REQUEST[$post_type_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="posttype-<?php echo $post_type_name; ?>" class="posttypediv">		<ul id="posttype-<?php echo $post_type_name; ?>-tabs" class="posttype-tabs add-menu-item-tabs">			<li <?php echo ( 'most-recent' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'most-recent', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent"><?php _e('Most Recent'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#<?php echo $post_type_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-search"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent" class="tabs-panel <?php			echo ( 'most-recent' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $post_type_name; ?>checklist-most-recent" class="categorychecklist form-no-clear">				<?php				$recent_args = array_merge( $args, array( 'orderby' => 'post_date', 'order' => 'DESC', 'showposts' => 15 ) );				$most_recent = $get_posts->query( $recent_args );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $most_recent), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-posttype-<?php echo $post_type_name; ?>-search">			<?php			if ( isset( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-posttype-' . $post_type_name] );				$search_results = get_posts( array( 's' => $searched, 'post_type' => $post_type_name, 'fields' => 'all', 'order' => 'DESC', ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-posttype-<?php echo $post_type_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $post_type_name; ?>-search-checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<div id="<?php echo $post_type_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $post_type_name; ?>checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				// if we're dealing with pages, let's put a checkbox for the front page at the top of the list				if ( 'page' == $post_type_name ) {					$front_page = 'page' == get_option('show_on_front') ? (int) get_option( 'page_on_front' ) : 0;					if ( ! empty( $front_page ) ) {						$front_page_obj = get_post( $front_page );						$front_page_obj->_add_to_top = true;						$front_page_obj->label = sprintf( _x('Home: %s', 'nav menu front page title'), $front_page_obj->post_title );						array_unshift( $posts, $front_page_obj );					} else {						$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;						array_unshift( $posts, (object) array(							'_add_to_top' => true,							'ID' => 0,							'object_id' => $_nav_menu_placeholder,							'post_content' => '',							'post_excerpt' => '',							'post_title' => _x('Home', 'nav menu home label'),							'post_type' => 'nav_menu_item',							'type' => 'custom',							'url' => home_url('/'),						) );					}				}				$checkbox_items = walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $posts), 0, (object) $args );				if ( 'all' == $current_tab && ! empty( $_REQUEST['selectall'] ) ) {					$checkbox_items = preg_replace('/(type=(.)checkbox(\2))/', '$1 checked=$2checked$2', $checkbox_items);				}				echo $checkbox_items;				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$post_type_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#posttype-<?php echo $post_type_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-post-type-menu-item" id="submit-posttype-<?php echo $post_type_name; ?>" />			</span>		</p>	</div><!-- /.posttypediv -->	<?php}/** * Displays a metabox for a taxonomy menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $taxonomy The taxonomy object. */function wp_nav_menu_item_taxonomy_meta_box( $object, $taxonomy ) {	global $nav_menu_selected_id;	$taxonomy_name = $taxonomy['args']->name;	// paginate browsing for large numbers of objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$taxonomy_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'child_of' => 0,		'exclude' => '',		'hide_empty' => false,		'hierarchical' => 1,		'include' => '',		'include_last_update_time' => false,		'number' => $per_page,		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'name',		'pad_counts' => false,	);	$terms = get_terms( $taxonomy_name, $args );	if ( ! $terms || is_wp_error($terms) ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$num_pages = ceil( wp_count_terms( $taxonomy_name , array_merge( $args, array('number' => '', 'offset' => '') ) ) / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$taxonomy_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'taxonomy',				'item-object' => $taxonomy_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-used';	if ( isset( $_REQUEST[$taxonomy_name . '-tab'] ) && in_array( $_REQUEST[$taxonomy_name . '-tab'], array('all', 'most-used', 'search') ) ) {		$current_tab = $_REQUEST[$taxonomy_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="taxonomy-<?php echo $taxonomy_name; ?>" class="taxonomydiv">		<ul id="taxonomy-<?php echo $taxonomy_name; ?>-tabs" class="taxonomy-tabs add-menu-item-tabs">			<li <?php echo ( 'most-used' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'most-used', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-pop"><?php _e('Most Used'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-pop" class="tabs-panel <?php			echo ( 'most-used' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $taxonomy_name; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php				$popular_terms = get_terms( $taxonomy_name, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $popular_terms), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $taxonomy_name; ?>checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $terms), 0, (object) $args );				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>">			<?php			if ( isset( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] );				$search_results = get_terms( $taxonomy_name, array( 'name__like' => $searched, 'fields' => 'all', 'orderby' => 'count', 'order' => 'DESC', 'hierarchical' => false ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-taxonomy-<?php echo $taxonomy_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $taxonomy_name; ?>-search-checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$taxonomy_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#taxonomy-<?php echo $taxonomy_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-taxonomy-menu-item" id="submit-taxonomy-<?php echo $taxonomy_name; ?>" />			</span>		</p>	</div><!-- /.taxonomydiv -->	<?php}/** * Save posted nav menu item data. * * @since 3.0.0 * * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item. * @param array $menu_data The unsanitized posted menu item data. * @return array The database IDs of the items saved */function wp_save_nav_menu_items( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$items_saved = array();	if ( 0 == $menu_id || is_nav_menu( $menu_id ) ) {		// Loop through all the menu items' POST values		foreach( (array) $menu_data as $_possible_db_id => $_item_object_data ) {			if (				empty( $_item_object_data['menu-item-object-id'] ) && // checkbox is not checked				(					! isset( $_item_object_data['menu-item-type'] ) || // and item type either isn't set					in_array( $_item_object_data['menu-item-url'], array( 'http://', '' ) ) || // or URL is the default					! ( 'custom' == $_item_object_data['menu-item-type'] && ! isset( $_item_object_data['menu-item-db-id'] ) ) ||  // or it's not a custom menu item (but not the custom home page)					! empty( $_item_object_data['menu-item-db-id'] ) // or it *is* a custom menu item that already exists				)			) {				continue; // then this potential menu item is not getting added to this menu			}			// if this possible menu item doesn't actually have a menu database ID yet			if (				empty( $_item_object_data['menu-item-db-id'] ) ||				( 0 > $_possible_db_id ) ||				$_possible_db_id != $_item_object_data['menu-item-db-id']			) {				$_actual_db_id = 0;			} else {				$_actual_db_id = (int) $_item_object_data['menu-item-db-id'];			}			$args = array(				'menu-item-db-id' => ( isset( $_item_object_data['menu-item-db-id'] ) ? $_item_object_data['menu-item-db-id'] : '' ),				'menu-item-object-id' => ( isset( $_item_object_data['menu-item-object-id'] ) ? $_item_object_data['menu-item-object-id'] : '' ),				'menu-item-object' => ( isset( $_item_object_data['menu-item-object'] ) ? $_item_object_data['menu-item-object'] : '' ),				'menu-item-parent-id' => ( isset( $_item_object_data['menu-item-parent-id'] ) ? $_item_object_data['menu-item-parent-id'] : '' ),				'menu-item-position' => ( isset( $_item_object_data['menu-item-position'] ) ? $_item_object_data['menu-item-position'] : '' ),				'menu-item-type' => ( isset( $_item_object_data['menu-item-type'] ) ? $_item_object_data['menu-item-type'] : '' ),				'menu-item-title' => ( isset( $_item_object_data['menu-item-title'] ) ? $_item_object_data['menu-item-title'] : '' ),				'menu-item-url' => ( isset( $_item_object_data['menu-item-url'] ) ? $_item_object_data['menu-item-url'] : '' ),				'menu-item-description' => ( isset( $_item_object_data['menu-item-description'] ) ? $_item_object_data['menu-item-description'] : '' ),				'menu-item-attr-title' => ( isset( $_item_object_data['menu-item-attr-title'] ) ? $_item_object_data['menu-item-attr-title'] : '' ),				'menu-item-target' => ( isset( $_item_object_data['menu-item-target'] ) ? $_item_object_data['menu-item-target'] : '' ),				'menu-item-classes' => ( isset( $_item_object_data['menu-item-classes'] ) ? $_item_object_data['menu-item-classes'] : '' ),				'menu-item-xfn' => ( isset( $_item_object_data['menu-item-xfn'] ) ? $_item_object_data['menu-item-xfn'] : '' ),			);			$items_saved[] = wp_update_nav_menu_item( $menu_id, $_actual_db_id, $args );		}	}	return $items_saved;}/** * Adds custom arguments to some of the meta box object types. * * @since 3.0.0 * * @access private * * @param object $object The post type or taxonomy meta-object. * @return object The post type of taxonomy object. */function _wp_nav_menu_meta_box_object( $object = null ) {	if ( isset( $object->name ) ) {		if ( 'page' == $object->name ) {			$object->_default_query = array(				'orderby' => 'menu_order title',				'post_status' => 'publish',			);		// posts should show only published items		} elseif ( 'post' == $object->name ) {			$object->_default_query = array(				'post_status' => 'publish',			);		// cats should be in reverse chronological order		} elseif ( 'category' == $object->name ) {			$object->_default_query = array(				'orderby' => 'id',				'order' => 'DESC',			);		// custom post types should show only published items		} else {			$object->_default_query = array(				'post_status' => 'publish',			);		}	}	return $object;}/** * Returns the menu formatted to edit. * * @since 3.0.0 * * @param string $menu_id The ID of the menu to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_get_nav_menu_to_edit( $menu_id = 0 ) {	$menu = wp_get_nav_menu_object( $menu_id );	// If the menu exists, get its items.	if ( is_nav_menu( $menu ) ) {		$menu_items = wp_get_nav_menu_items( $menu->term_id, array('post_status' => 'any') );		$result = '<div id="menu-instructions" class="post-body-plain';		$result .= ( ! empty($menu_items) ) ? ' menu-instructions-inactive">' : '">';		$result .= '<p>' . __('Select menu items (pages, categories, links) from the boxes at left to begin building your custom menu.') . '</p>';		$result .= '</div>';		if( empty($menu_items) )			return $result . ' <ul class="menu" id="menu-to-edit"> </ul>';		$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $menu_id );		if ( class_exists( $walker_class_name ) )			$walker = new $walker_class_name;		else			return new WP_Error( 'menu_walker_not_exist', sprintf( __('The Walker class named <strong>%s</strong> does not exist.'), $walker_class_name ) );		$some_pending_menu_items = false;		foreach( (array) $menu_items as $menu_item ) {			if ( isset( $menu_item->post_status ) && 'draft' == $menu_item->post_status )				$some_pending_menu_items = true;		}		if ( $some_pending_menu_items )			$result .= '<div class="updated inline"><p>' . __('Click Save Menu to make pending menu items public.') . '</p></div>';		$result .= '<ul class="menu" id="menu-to-edit"> ';		$result .= walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $menu_items), 0, (object) array('walker' => $walker ) );		$result .= ' </ul> ';		return $result;	} elseif ( is_wp_error( $menu ) ) {		return $menu;	}}/** * Returns the columns for the nav menus page. * * @since 3.0.0 * * @param string $menu_item_id The ID of the menu item to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_nav_menu_manage_columns() {	return array(		'_title' => __('Show advanced menu properties'),		'cb' => '<input type="checkbox" />',		'link-target' => __('Link Target'),		'css-classes' => __('CSS Classes'),		'xfn' => __('Link Relationship (XFN)'),		'description' => __('Description'),	);}/** * Deletes orphaned draft menu items * * @access private * @since 3.0.0 * */function _wp_delete_orphaned_draft_menu_items() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	// delete orphaned draft menu items	$menu_items_to_delete = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts AS p LEFT JOIN $wpdb->postmeta AS m ON p.ID = m.post_id WHERE post_type = 'nav_menu_item' AND post_status = 'draft' AND meta_key = '_menu_item_orphaned' AND meta_value < '%d'", $delete_timestamp ) );	foreach( (array) $menu_items_to_delete as $menu_item_id )		wp_delete_post( $menu_item_id, true );}add_action('admin_head-nav-menus.php', '_wp_delete_orphaned_draft_menu_items');?>
<?php/** * Deprecated admin functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed * in a later version. * * @package WordPress * @subpackage Deprecated *//* * Deprecated functions come here to die. *//** * @since 2.1 * @deprecated 2.1 * @deprecated Use wp_tiny_mce(). * @see wp_tiny_mce() */function tinymce_include() {	_deprecated_function( __FUNCTION__, '2.1', 'wp_tiny_mce()' );	wp_tiny_mce();}/** * Unused Admin function. * * @since 2.0 * @deprecated 2.5 * */function documentation_link() {	_deprecated_function( __FUNCTION__, '2.5', '' );	return;}/** * Calculates the new dimentions for a downsampled image. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use wp_constrain_dimensions() * * @param int $width Current width of the image * @param int $height Current height of the image * @param int $wmax Maximum wanted width * @param int $hmax Maximum wanted height * @return mixed Array(height,width) of shrunk dimensions. */function wp_shrink_dimensions( $width, $height, $wmax = 128, $hmax = 96 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_constrain_dimensions()' );	return wp_constrain_dimensions( $width, $height, $wmax, $hmax );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated unknown * @deprecated Use wp_category_checklist() * @see wp_category_checklist() * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $popular_ids */function dropdown_categories( $default = 0, $parent = 0, $popular_ids = array() ) {	_deprecated_function( __FUNCTION__, '0.0', 'wp_category_checklist()' );	global $post_ID;	wp_category_checklist( $post_ID );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated unknown * @deprecated Use wp_link_category_checklist() * @see wp_link_category_checklist() * * @param unknown_type $default */function dropdown_link_categories( $default = 0 ) {	_deprecated_function( __FUNCTION__, '0.0', 'wp_link_category_checklist()' );	global $link_id;	wp_link_category_checklist( $link_id );}/** * {@internal Missing Short Description}} * * @since unknown * @deprecated 3.0.0 * @deprecated Use wp_dropdown_categories() * @see wp_dropdown_categories() * * @param unknown_type $currentcat * @param unknown_type $currentparent * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $categories * @return unknown */function wp_dropdown_cats( $currentcat = 0, $currentparent = 0, $parent = 0, $level = 0, $categories = 0 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_dropdown_categories()' );	if (!$categories )		$categories = get_categories( array('hide_empty' => 0) );	if ( $categories ) {		foreach ( $categories as $category ) {			if ( $currentcat != $category->term_id && $parent == $category->parent) {				$pad = str_repeat( '&#8211; ', $level );				$category->name = esc_html( $category->name );				echo "\n\t<option value='$category->term_id'";				if ( $currentparent == $category->term_id )					echo " selected='selected'";				echo ">$pad$category->name</option>";				wp_dropdown_cats( $currentcat, $currentparent, $category->term_id, $level +1, $categories );			}		}	} else {		return false;	}}/** * Register a setting and its sanitization callback * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use register_setting() * @see register_setting() * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function add_option_update_handler( $option_group, $option_name, $sanitize_callback = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'register_setting()' );	return register_setting( $option_group, $option_name, $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use unregister_setting() * @see unregister_setting() * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function remove_option_update_handler( $option_group, $option_name, $sanitize_callback = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'unregister_setting()' );	return unregister_setting( $option_group, $option_name, $sanitize_callback );}/** * Determines the language to use for CodePress syntax highlighting. * * @since 2.8.0 * @deprecated 3.0.0 * * @param string $filename**/function codepress_get_lang( $filename ) {	_deprecated_function( __FUNCTION__, '3.0' );	return;}/** * Adds Javascript required to make CodePress work on the theme/plugin editors. * * @since 2.8.0 * @deprecated 3.0.0**/function codepress_footer_js() {	_deprecated_function( __FUNCTION__, '3.0' );	return;}/** * Determine whether to use CodePress. * * @since 2.8 * @deprecated 3.0.0**/function use_codepress() {	_deprecated_function( __FUNCTION__, '3.0' );	return;}?>
