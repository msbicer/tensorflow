<?php/** * Metadata API * * Functions for retrieving and manipulating metadata of various WordPress object types.  Metadata * for an object is a represented by a simple key-value pair.  Objects may contain multiple * metadata entries that share the same key and differ only in their value. * * @package WordPress * @subpackage Meta * @since 2.9.0 *//** * Add metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'added_{$meta_type}_meta' with meta_id of added metadata entry, * 		object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param bool $unique Optional, default is false.  Whether the specified metadata key should be * 		unique for the object.  If true, and the object already has a value for the specified * 		metadata key, no change will be made * @return bool True on successful update, false on failure. */function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( $unique && $wpdb->get_var( $wpdb->prepare(		"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d",		$meta_key, $object_id ) ) )		return false;	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$wpdb->insert( $table, array(		$column => $object_id,		'meta_key' => $meta_key,		'meta_value' => $meta_value	) );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "added_{$meta_type}_meta", $wpdb->insert_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Update metadata for the specified object.  If no value already exists for the specified object * ID and metadata key, the metadata will be added. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'update_{$meta_type}_meta' before updating metadata with meta_id of * 		metadata entry to update, object ID, meta key, and meta value * @uses do_action() Calls 'updated_{$meta_type}_meta' after updating metadata with meta_id of * 		updated metadata entry, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param string $prev_value Optional.  If specified, only update existing metadata entries with * 		the specified value.  Otherwise, update all entries. * @return bool True on successful update, false on failure. */function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( ! $meta_id = $wpdb->get_var( $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d", $meta_key, $object_id ) ) )		return add_metadata($meta_type, $object_id, $meta_key, $meta_value);	// Compare existing value to new value if no prev value given and the key exists only once.	if ( empty($prev_value) ) {		$old_value = get_metadata($meta_type, $object_id, $meta_key);		if ( count($old_value) == 1 ) {			if ( $old_value[0] == $meta_value )				return false;		}	}	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$data  = compact( 'meta_value' );	$where = array( $column => $object_id, 'meta_key' => $meta_key );	if ( !empty( $prev_value ) ) {		$prev_value = maybe_serialize($prev_value);		$where['meta_value'] = $prev_value;	}	do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	$wpdb->update( $table, $data, $where );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Delete metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'deleted_{$meta_type}_meta' after deleting with meta_id of * 		deleted metadata entries, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Optional. Metadata value.  If specified, only delete metadata entries * 		with this value.  Otherwise, delete all entries with the specified meta_key. * @param bool $delete_all Optional, default is false.  If true, delete matching metadata entries * 		for all objects, ignoring the specified object_id.  Otherwise, only delete matching * 		metadata entries for the specified object_id. * @return bool True on successful delete, false on failure. */function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( (!$object_id = absint($object_id)) && !$delete_all )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$type_column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$query = $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s", $meta_key );	if ( !$delete_all )		$query .= $wpdb->prepare(" AND $type_column = %d", $object_id );	if ( $meta_value )		$query .= $wpdb->prepare(" AND meta_value = %s", $meta_value );	$meta_ids = $wpdb->get_col( $query );	if ( !count( $meta_ids ) )		return false;	$query = "DELETE FROM $table WHERE $id_column IN( " . implode( ',', $meta_ids ) . " )";	$count = $wpdb->query($query);	if ( !$count )		return false;	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "deleted_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $meta_value );	return true;}/** * Retrieve metadata for the specified object. * * @since 2.9.0 * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Optional.  Metadata key.  If not specified, retrieve all metadata for * 		the specified object. * @param bool $single Optional, default is false.  If true, return only the first value of the * 		specified meta_key.  This parameter has no effect if meta_key is not specified. * @return string|array Single metadata value, or array of values */function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {	if ( !$meta_type )		return false;	if ( !$object_id = absint($object_id) )		return false;	$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	if ( !$meta_cache ) {		update_meta_cache($meta_type, $object_id);		$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	}	if ( ! $meta_key )		return $meta_cache;	if ( isset($meta_cache[$meta_key]) ) {		if ( $single )			return maybe_unserialize( $meta_cache[$meta_key][0] );		else			return array_map('maybe_unserialize', $meta_cache[$meta_key]);	}	if ($single)		return '';	else		return array();}/** * Update the metadata cache for the specified objects. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int|array $object_ids array or comma delimited list of object IDs to update cache for * @return mixed Metadata cache for the specified objects, or false on failure. */function update_meta_cache($meta_type, $object_ids) {	if ( empty( $meta_type ) || empty( $object_ids ) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	$column = esc_sql($meta_type . '_id');	global $wpdb;	if ( !is_array($object_ids) ) {		$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);		$object_ids = explode(',', $object_ids);	}	$object_ids = array_map('intval', $object_ids);	$cache_key = $meta_type . '_meta';	$ids = array();	foreach ( $object_ids as $id ) {		if ( false === wp_cache_get($id, $cache_key) )			$ids[] = $id;	}	if ( empty( $ids ) )		return false;	// Get meta info	$id_list = join(',', $ids);	$cache = array();	$meta_list = $wpdb->get_results( $wpdb->prepare("SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list)",		$meta_type), ARRAY_A );	if ( !empty($meta_list) ) {		foreach ( $meta_list as $metarow) {			$mpid = intval($metarow[$column]);			$mkey = $metarow['meta_key'];			$mval = $metarow['meta_value'];			// Force subkeys to be array type:			if ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )				$cache[$mpid] = array();			if ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )				$cache[$mpid][$mkey] = array();			// Add a value to the current pid/key:			$cache[$mpid][$mkey][] = $mval;		}	}	foreach ( $ids as $id ) {		if ( ! isset($cache[$id]) )			$cache[$id] = array();	}	foreach ( array_keys($cache) as $object)		wp_cache_set($object, $cache[$object], $cache_key);	return $cache;}/** * Retrieve the name of the metadata table for the specified object type. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object to get metadata table for (e.g., comment, post, or user) * @return mixed Metadata table name, or false if no metadata table exists */function _get_meta_table($type) {	global $wpdb;	$table_name = $type . 'meta';	if ( empty($wpdb->$table_name) )		return false;	return $wpdb->$table_name;}?>
<?php/** * WordPress Post Administration API. * * @package WordPress * @subpackage Administration *//** * Rename $_POST data from form names to DB post columns. * * Manipulates $_POST directly. * * @package WordPress * @since 2.6.0 * * @param bool $update Are we updating a pre-existing post? * @param post_data array Array of post data. Defaults to the contents of $_POST. * @return object|bool WP_Error on failure, true on success. */function _wp_translate_postdata( $update = false, $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	if ( $update )		$post_data['ID'] = (int) $post_data['post_ID'];	$post_data['post_content'] = isset($post_data['content']) ? $post_data['content'] : '';	$post_data['post_excerpt'] = isset($post_data['excerpt']) ? $post_data['excerpt'] : '';	$post_data['post_parent'] = isset($post_data['parent_id'])? $post_data['parent_id'] : '';	if ( isset($post_data['trackback_url']) )		$post_data['to_ping'] = $post_data['trackback_url'];	if ( !isset($post_data['user_ID']) )		$post_data['user_ID'] = $GLOBALS['user_ID'];	if (!empty ( $post_data['post_author_override'] ) ) {		$post_data['post_author'] = (int) $post_data['post_author_override'];	} else {		if (!empty ( $post_data['post_author'] ) ) {			$post_data['post_author'] = (int) $post_data['post_author'];		} else {			$post_data['post_author'] = (int) $post_data['user_ID'];		}	}	$ptype = get_post_type_object( $post_data['post_type'] );	if ( isset($post_data['user_ID']) && ($post_data['post_author'] != $post_data['user_ID']) ) {		if ( !current_user_can( $ptype->cap->edit_others_posts ) ) {			if ( 'page' == $post_data['post_type'] ) {				return new WP_Error( 'edit_others_pages', $update ?					__( 'You are not allowed to edit pages as this user.' ) :					__( 'You are not allowed to create pages as this user.' )				);			} else {				return new WP_Error( 'edit_others_posts', $update ?					__( 'You are not allowed to edit posts as this user.' ) :					__( 'You are not allowed to post as this user.' )				);			}		}	}	// What to do based on which button they pressed	if ( isset($post_data['saveasdraft']) && '' != $post_data['saveasdraft'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['saveasprivate']) && '' != $post_data['saveasprivate'] )		$post_data['post_status'] = 'private';	if ( isset($post_data['publish']) && ( '' != $post_data['publish'] ) && ( !isset($post_data['post_status']) || $post_data['post_status'] != 'private' ) )		$post_data['post_status'] = 'publish';	if ( isset($post_data['advanced']) && '' != $post_data['advanced'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['pending']) && '' != $post_data['pending'] )		$post_data['post_status'] = 'pending';	if ( isset( $post_data['ID'] ) )		$post_id = $post_data['ID'];	else		$post_id = false;	$previous_status = $post_id ? get_post_field( 'post_status', $post_id ) : false;	// Posts 'submitted for approval' present are submitted to $_POST the same as if they were being published.	// Change status from 'publish' to 'pending' if user lacks permissions to publish or to resave published posts.	if ( isset($post_data['post_status']) && ('publish' == $post_data['post_status'] && !current_user_can( $ptype->cap->publish_posts )) )		if ( $previous_status != 'publish' || !current_user_can( 'edit_post', $post_id ) )			$post_data['post_status'] = 'pending';	if ( ! isset($post_data['post_status']) )		$post_data['post_status'] = $previous_status;	if (!isset( $post_data['comment_status'] ))		$post_data['comment_status'] = 'closed';	if (!isset( $post_data['ping_status'] ))		$post_data['ping_status'] = 'closed';	foreach ( array('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $post_data['hidden_' . $timeunit] ) && $post_data['hidden_' . $timeunit] != $post_data[$timeunit] ) {			$post_data['edit_date'] = '1';			break;		}	}	if ( !empty( $post_data['edit_date'] ) ) {		$aa = $post_data['aa'];		$mm = $post_data['mm'];		$jj = $post_data['jj'];		$hh = $post_data['hh'];		$mn = $post_data['mn'];		$ss = $post_data['ss'];		$aa = ($aa <= 0 ) ? date('Y') : $aa;		$mm = ($mm <= 0 ) ? date('n') : $mm;		$jj = ($jj > 31 ) ? 31 : $jj;		$jj = ($jj <= 0 ) ? date('j') : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$post_data['post_date'] = sprintf( "%04d-%02d-%02d %02d:%02d:%02d", $aa, $mm, $jj, $hh, $mn, $ss );		$post_data['post_date_gmt'] = get_gmt_from_date( $post_data['post_date'] );	}	return $post_data;}/** * Update an existing post with values provided in $_POST. * * @since unknown * * @param array $post_data Optional. * @return int Post ID. */function edit_post( $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	$post_ID = (int) $post_data['post_ID'];	$ptype = get_post_type_object($post_data['post_type']);	if ( !current_user_can( $ptype->cap->edit_post, $post_ID ) ) {		if ( 'page' == $post_data['post_type'] )			wp_die( __('You are not allowed to edit this page.' ));		else			wp_die( __('You are not allowed to edit this post.' ));	}	// Autosave shouldn't save too soon after a real save	if ( 'autosave' == $post_data['action'] ) {		$post =& get_post( $post_ID );		$now = time();		$then = strtotime($post->post_date_gmt . ' +0000');		$delta = AUTOSAVE_INTERVAL / 2;		if ( ($now - $then) < $delta )			return $post_ID;	}	$post_data = _wp_translate_postdata( true, $post_data );	if ( 'autosave' != $post_data['action']  && 'auto-draft' == $post_data['post_status'] )		$post_data['post_status'] = 'draft';	if ( is_wp_error($post_data) )		wp_die( $post_data->get_error_message() );	if ( isset($post_data['visibility']) ) {		switch ( $post_data['visibility'] ) {			case 'public' :				$post_data['post_password'] = '';				break;			case 'password' :				unset( $post_data['sticky'] );				break;			case 'private' :				$post_data['post_status'] = 'private';				$post_data['post_password'] = '';				unset( $post_data['sticky'] );				break;		}	}	// Meta Stuff	if ( isset($post_data['meta']) && $post_data['meta'] ) {		foreach ( $post_data['meta'] as $key => $value )			update_meta( $key, $value['key'], $value['value'] );	}	if ( isset($post_data['deletemeta']) && $post_data['deletemeta'] ) {		foreach ( $post_data['deletemeta'] as $key => $value )			delete_meta( $key );	}	add_meta( $post_ID );	update_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	wp_update_post( $post_data );	// Reunite any orphaned attachments with their parent	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	if ( current_user_can( 'edit_others_posts' ) ) {		if ( !empty($post_data['sticky']) )			stick_post($post_ID);		else			unstick_post($post_ID);	}	return $post_ID;}/** * Process the post data for the bulk editing of posts. * * Updates all bulk edited posts/pages, adding (but not removing) tags and * categories. Skips pages when they would be their own parent or child. * * @since 2.7.0 * * @param array $post_data Optional, the array of post data to process if not provided will use $_POST superglobal. * @return array */function bulk_edit_posts( $post_data = null ) {	global $wpdb;	if ( empty($post_data) )		$post_data = &$_POST;	if ( isset($post_data['post_type']) )		$ptype = get_post_type_object($post_data['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			wp_die( __('You are not allowed to edit pages.'));		else			wp_die( __('You are not allowed to edit posts.'));	}	if ( -1 == $post_data['_status'] ) {		$post_data['post_status'] = null;		unset($post_data['post_status']);	} else {		$post_data['post_status'] = $post_data['_status'];	}	unset($post_data['_status']);	$post_IDs = array_map( 'intval', (array) $post_data['post'] );	$reset = array( 'post_author', 'post_status', 'post_password', 'post_parent', 'page_template', 'comment_status', 'ping_status', 'keep_private', 'tax_input', 'post_category', 'sticky' );	foreach ( $reset as $field ) {		if ( isset($post_data[$field]) && ( '' == $post_data[$field] || -1 == $post_data[$field] ) )			unset($post_data[$field]);	}	if ( isset($post_data['post_category']) ) {		if ( is_array($post_data['post_category']) && ! empty($post_data['post_category']) )			$new_cats = array_map( 'absint', $post_data['post_category'] );		else			unset($post_data['post_category']);	}	$tax_input = array();	if ( isset($post_data['tax_input'])) {		foreach ( $post_data['tax_input'] as $tax_name => $terms ) {			if ( empty($terms) )				continue;			if ( is_taxonomy_hierarchical( $tax_name ) )				$tax_input[$tax_name] = array_map( 'absint', $terms );			else {				$tax_input[$tax_name] = preg_replace( '/\s*,\s*/', ',', rtrim( trim($terms), ' ,' ) );				$tax_input[$tax_name] = explode(',', $tax_input[$tax_name]);			}		}	}	if ( isset($post_data['post_parent']) && ($parent = (int) $post_data['post_parent']) ) {		$pages = $wpdb->get_results("SELECT ID, post_parent FROM $wpdb->posts WHERE post_type = 'page'");		$children = array();		for ( $i = 0; $i < 50 && $parent > 0; $i++ ) {			$children[] = $parent;			foreach ( $pages as $page ) {				if ( $page->ID == $parent ) {					$parent = $page->post_parent;					break;				}			}		}	}	$updated = $skipped = $locked = array();	foreach ( $post_IDs as $post_ID ) {		$post_type_object = get_post_type_object( get_post_type( $post_ID ) );		if ( !isset( $post_type_object ) || ( isset($children) && in_array($post_ID, $children) ) || !current_user_can( $post_type_object->cap->edit_post, $post_ID ) ) {			$skipped[] = $post_ID;			continue;		}		if ( wp_check_post_lock( $post_ID ) ) {			$locked[] = $post_ID;			continue;		}		$tax_names = get_object_taxonomies( get_post($post_ID) );		foreach ( $tax_names as $tax_name ) {			$taxonomy_obj = get_taxonomy($tax_name);			if (  isset( $tax_input[$tax_name]) && current_user_can( $taxonomy_obj->cap->assign_terms ) )				$new_terms = $tax_input[$tax_name];			else				$new_terms = array();			if ( $taxonomy_obj->hierarchical )				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'ids') );			else				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'names') );			$post_data['tax_input'][$tax_name] = array_merge( $current_terms, $new_terms );		}		if ( isset($new_cats) && in_array( 'category', $tax_names ) ) {			$cats = (array) wp_get_post_categories($post_ID);			$post_data['post_category'] = array_unique( array_merge($cats, $new_cats) );			unset( $post_data['tax_input']['category'] );		}		$post_data['ID'] = $post_ID;		$updated[] = wp_update_post( $post_data );		if ( isset( $post_data['sticky'] ) && current_user_can( 'edit_others_posts' ) ) {			if ( 'sticky' == $post_data['sticky'] )				stick_post( $post_ID );			else				unstick_post( $post_ID );		}	}	return array( 'updated' => $updated, 'skipped' => $skipped, 'locked' => $locked );}/** * Default post information to use when populating the "Write Post" form. * * @since unknown * *@param string A post type string, defaults to 'post'. * @return object stdClass object containing all the default post data as attributes */function get_default_post_to_edit( $post_type = 'post', $create_in_db = false ) {	global $wpdb;	$post_title = '';	if ( !empty( $_REQUEST['post_title'] ) )		$post_title = esc_html( stripslashes( $_REQUEST['post_title'] ));	$post_content = '';	if ( !empty( $_REQUEST['content'] ) )		$post_content = esc_html( stripslashes( $_REQUEST['content'] ));	$post_excerpt = '';	if ( !empty( $_REQUEST['excerpt'] ) )		$post_excerpt = esc_html( stripslashes( $_REQUEST['excerpt'] ));	if ( $create_in_db ) {		// Cleanup old auto-drafts more than 7 days old		$old_posts = $wpdb->get_col( "SELECT ID FROM $wpdb->posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) > post_date" );		foreach ( (array) $old_posts as $delete )			wp_delete_post( $delete, true ); // Force delete		$post = get_post( wp_insert_post( array( 'post_title' => __( 'Auto Draft' ), 'post_type' => $post_type, 'post_status' => 'auto-draft' ) ) );	} else {		$post->ID = 0;		$post->post_author = '';		$post->post_date = '';		$post->post_date_gmt = '';		$post->post_password = '';		$post->post_type = $post_type;		$post->post_status = 'draft';		$post->to_ping = '';		$post->pinged = '';		$post->comment_status = get_option( 'default_comment_status' );		$post->ping_status = get_option( 'default_ping_status' );		$post->post_pingback = get_option( 'default_pingback_flag' );		$post->post_category = get_option( 'default_category' );		$post->page_template = 'default';		$post->post_parent = 0;		$post->menu_order = 0;	}	$post->post_content = apply_filters( 'default_content', $post_content, $post );	$post->post_title   = apply_filters( 'default_title',   $post_title, $post   );	$post->post_excerpt = apply_filters( 'default_excerpt', $post_excerpt, $post );	$post->post_name = '';	return $post;}/** * Get the default page information to use. * * @since 2.5.0 * * @return object stdClass object containing all the default post data as attributes */function get_default_page_to_edit() {	$page = get_default_post_to_edit();	$page->post_type = 'page';	return $page;}/** * Get an existing post and format it for editing. * * @since unknown * * @param unknown_type $id * @return unknown */function get_post_to_edit( $id ) {	$post = get_post( $id, OBJECT, 'edit' );	if ( $post->post_type == 'page' )		$post->page_template = get_post_meta( $id, '_wp_page_template', true );	return $post;}/** * Determine if a post exists based on title, content, and date * * @since unknown * * @param string $title Post title * @param string $content Optional post content * @param string $date Optional post date * @return int Post ID if post exists, 0 otherwise. */function post_exists($title, $content = '', $date = '') {	global $wpdb;	$post_title = stripslashes( sanitize_post_field( 'post_title', $title, 0, 'db' ) );	$post_content = stripslashes( sanitize_post_field( 'post_content', $content, 0, 'db' ) );	$post_date = stripslashes( sanitize_post_field( 'post_date', $date, 0, 'db' ) );	$query = "SELECT ID FROM $wpdb->posts WHERE 1=1";	$args = array();	if ( !empty ( $date ) ) {		$query .= ' AND post_date = %s';		$args[] = $post_date;	}	if ( !empty ( $title ) ) {		$query .= ' AND post_title = %s';		$args[] = $post_title;	}	if ( !empty ( $content ) ) {		$query .= 'AND post_content = %s';		$args[] = $post_content;	}	if ( !empty ( $args ) )		return $wpdb->get_var( $wpdb->prepare($query, $args) );	return 0;}/** * Creates a new post from the "Write Post" form using $_POST information. * * @since unknown * * @return unknown */function wp_write_post() {	global $user_ID;	if ( isset($_POST['post_type']) )		$ptype = get_post_type_object($_POST['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			return new WP_Error( 'edit_pages', __( 'You are not allowed to create pages on this site.' ) );		else			return new WP_Error( 'edit_posts', __( 'You are not allowed to create posts or drafts on this site.' ) );	}	// Check for autosave collisions	// Does this need to be updated? ~ Mark	$temp_id = false;	if ( isset($_POST['temp_ID']) ) {		$temp_id = (int) $_POST['temp_ID'];		if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )			$draft_ids = array();		foreach ( $draft_ids as $temp => $real )			if ( time() + $temp > 86400 ) // 1 day: $temp is equal to -1 * time( then )				unset($draft_ids[$temp]);		if ( isset($draft_ids[$temp_id]) ) { // Edit, don't write			$_POST['post_ID'] = $draft_ids[$temp_id];			unset($_POST['temp_ID']);			update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );			return edit_post();		}	}	$translated = _wp_translate_postdata( false );	if ( is_wp_error($translated) )		return $translated;	if ( isset($_POST['visibility']) ) {		switch ( $_POST['visibility'] ) {			case 'public' :				$_POST['post_password'] = '';				break;			case 'password' :				unset( $_POST['sticky'] );				break;			case 'private' :				$_POST['post_status'] = 'private';				$_POST['post_password'] = '';				unset( $_POST['sticky'] );				break;		}	}	// Create the post.	$post_ID = wp_insert_post( $_POST );	if ( is_wp_error( $post_ID ) )		return $post_ID;	if ( empty($post_ID) )		return 0;	add_meta( $post_ID );	add_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	// Reunite any orphaned attachments with their parent	// Does this need to be udpated? ~ Mark	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	if ( $temp_id && $temp_id != $draft_temp_id )		_relocate_children( $temp_id, $post_ID );	// Update autosave collision detection	if ( $temp_id ) {		$draft_ids[$temp_id] = $post_ID;		update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );	}	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	return $post_ID;}/** * Calls wp_write_post() and handles the errors. * * @since unknown * * @return unknown */function write_post() {	$result = wp_write_post();	if ( is_wp_error( $result ) )		wp_die( $result->get_error_message() );	else		return $result;}//// Post Meta///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_ID * @return unknown */function add_meta( $post_ID ) {	global $wpdb;	$post_ID = (int) $post_ID;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$metakeyselect = isset($_POST['metakeyselect']) ? stripslashes( trim( $_POST['metakeyselect'] ) ) : '';	$metakeyinput = isset($_POST['metakeyinput']) ? stripslashes( trim( $_POST['metakeyinput'] ) ) : '';	$metavalue = isset($_POST['metavalue']) ? maybe_serialize( stripslashes_deep( $_POST['metavalue'] ) ) : '';	if ( is_string($metavalue) )		$metavalue = trim( $metavalue );	if ( ('0' === $metavalue || !empty ( $metavalue ) ) && ((('#NONE#' != $metakeyselect) && !empty ( $metakeyselect) ) || !empty ( $metakeyinput) ) ) {		// We have a key/value pair. If both the select and the		// input for the key have data, the input takes precedence: 		if ('#NONE#' != $metakeyselect)			$metakey = $metakeyselect;		if ( $metakeyinput)			$metakey = $metakeyinput; // default		if ( in_array($metakey, $protected) )			return false;		wp_cache_delete($post_ID, 'post_meta');		$wpdb->insert( $wpdb->postmeta, array( 'post_id' => $post_ID, 'meta_key' => $metakey, 'meta_value' => $metavalue ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_ID, $metakey, $metavalue );		return $wpdb->insert_id;	}	return false;} // add_meta/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function delete_meta( $mid ) {	global $wpdb;	$mid = (int) $mid;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'delete_postmeta', $mid );	wp_cache_delete($post_id, 'post_meta');	$rval = $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'deleted_postmeta', $mid );	return $rval;}/** * Get a list of previously defined keys. * * @since unknown * * @return unknown */function get_meta_keys() {	global $wpdb;	$keys = $wpdb->get_col( "			SELECT meta_key			FROM $wpdb->postmeta			GROUP BY meta_key			ORDER BY meta_key" );	return $keys;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function get_post_meta_by_id( $mid ) {	global $wpdb;	$mid = (int) $mid;	$meta = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	if ( is_serialized_string( $meta->meta_value ) )		$meta->meta_value = maybe_unserialize( $meta->meta_value );	return $meta;}/** * {@internal Missing Short Description}} * * Some postmeta stuff. * * @since unknown * * @param unknown_type $postid * @return unknown */function has_meta( $postid ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value, meta_id, post_id			FROM $wpdb->postmeta WHERE post_id = %d			ORDER BY meta_key,meta_id", $postid), ARRAY_A );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta_id * @param unknown_type $meta_key Expect Slashed * @param unknown_type $meta_value Expect Slashed * @return unknown */function update_meta( $meta_id, $meta_key, $meta_value ) {	global $wpdb;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$meta_key = stripslashes($meta_key);	if ( in_array($meta_key, $protected) )		return false;	if ( '' === trim( $meta_value ) )		return false;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $meta_id) );	$meta_value = maybe_serialize( stripslashes_deep( $meta_value ) );	$meta_id = (int) $meta_id;	$data  = compact( 'meta_key', 'meta_value' );	$where = compact( 'meta_id' );	do_action( 'update_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	$rval = $wpdb->update( $wpdb->postmeta, $data, $where );	wp_cache_delete($post_id, 'post_meta');	do_action( 'updated_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	return $rval;}//// Private///** * Replace hrefs of attachment anchors with up-to-date permalinks. * * @since unknown * @access private * * @param unknown_type $post_ID * @return unknown */function _fix_attachment_links( $post_ID ) {	global $_fix_attachment_link_id;	$post = & get_post( $post_ID, ARRAY_A );	$search = "#<a[^>]+rel=('|\")[^'\"]*attachment[^>]*>#ie";	// See if we have any rel="attachment" links	if ( 0 == preg_match_all( $search, $post['post_content'], $anchor_matches, PREG_PATTERN_ORDER ) )		return;	$i = 0;	$search = "#[\s]+rel=(\"|')(.*?)wp-att-(\d+)\\1#i";	foreach ( $anchor_matches[0] as $anchor ) {		if ( 0 == preg_match( $search, $anchor, $id_matches ) )			continue;		$id = (int) $id_matches[3];		// While we have the attachment ID, let's adopt any orphans.		$attachment = & get_post( $id, ARRAY_A );		if ( ! empty( $attachment) && ! is_object( get_post( $attachment['post_parent'] ) ) ) {			$attachment['post_parent'] = $post_ID;			// Escape data pulled from DB.			$attachment = add_magic_quotes( $attachment );			wp_update_post( $attachment );		}		$post_search[$i] = $anchor;		 $_fix_attachment_link_id = $id;		$post_replace[$i] = preg_replace_callback( "#href=(\"|')[^'\"]*\\1#", '_fix_attachment_links_replace_cb', $anchor );		++$i;	}	$post['post_content'] = str_replace( $post_search, $post_replace, $post['post_content'] );	// Escape data pulled from DB.	$post = add_magic_quotes( $post);	return wp_update_post( $post);}function _fix_attachment_links_replace_cb($match) {        global $_fix_attachment_link_id;        return stripslashes( 'href='.$match[1] ).get_attachment_link( $_fix_attachment_link_id ).stripslashes( $match[1] );}/** * Move child posts to a new parent. * * @since unknown * @access private * * @param unknown_type $old_ID * @param unknown_type $new_ID * @return unknown */function _relocate_children( $old_ID, $new_ID ) {	global $wpdb;	$old_ID = (int) $old_ID;	$new_ID = (int) $new_ID;	$children = $wpdb->get_col( $wpdb->prepare("		SELECT post_id		FROM $wpdb->postmeta		WHERE meta_key = '_wp_attachment_temp_parent'		AND meta_value = %d", $old_ID) );	foreach ( $children as $child_id ) {		$wpdb->update($wpdb->posts, array('post_parent' => $new_ID), array('ID' => $child_id) );		delete_post_meta($child_id, '_wp_attachment_temp_parent');	}}/** * Get all the possible statuses for a post_type * * @since 2.5.0 * * @param string $type The post_type you want the statuses for * @return array As array of all the statuses for the supplied post type */function get_available_post_statuses($type = 'post') {	$stati = wp_count_posts($type);	return array_keys(get_object_vars($stati));}/** * Run the wp query to fetch the posts for listing on the edit posts page * * @since 2.5.0 * * @param array|bool $q Array of query variables to use to build the query or false to use $_GET superglobal. * @return array */function wp_edit_posts_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m'] = isset($q['m']) ? (int) $q['m'] : 0;	$q['cat'] = isset($q['cat']) ? (int) $q['cat'] : 0;	$post_stati  = get_post_stati();	if ( isset($q['post_type']) && in_array( $q['post_type'], get_post_types() ) )		$post_type = $q['post_type'];	else		$post_type = 'post';	$avail_post_stati = get_available_post_statuses($post_type);	if ( isset($q['post_status']) && in_array( $q['post_status'], $post_stati ) ) {		$post_status = $q['post_status'];		$perm = 'readable';	}	if ( isset($q['post_status']) && 'pending' === $q['post_status'] ) {		$order = 'ASC';		$orderby = 'modified';	} elseif ( isset($q['post_status']) && 'draft' === $q['post_status'] ) {		$order = 'DESC';		$orderby = 'modified';	} else {		$order = 'DESC';		$orderby = 'date';	}	$per_page = 'edit_' . $post_type . '_per_page';	$posts_per_page = (int) get_user_option( $per_page );	if ( empty( $posts_per_page ) || $posts_per_page < 1 )		$posts_per_page = 15;	$posts_per_page = apply_filters( $per_page, $posts_per_page );	$query = compact('post_type', 'post_status', 'perm', 'order', 'orderby', 'posts_per_page');	// Hierarchical types require special args.	if ( is_post_type_hierarchical( $post_type ) ) {		$query['orderby'] = 'menu_order title';		$query['order'] = 'asc';		$query['posts_per_page'] = -1;		$query['posts_per_archive_page'] = -1;	}	wp( $query );	return $avail_post_stati;}/** * Get default post mime types * * @since 2.9.0 * * @return array */function get_post_mime_types() {	$post_mime_types = array(	//	array( adj, noun )		'image' => array(__('Images'), __('Manage Images'), _n_noop('Image <span class="count">(%s)</span>', 'Images <span class="count">(%s)</span>')),		'audio' => array(__('Audio'), __('Manage Audio'), _n_noop('Audio <span class="count">(%s)</span>', 'Audio <span class="count">(%s)</span>')),		'video' => array(__('Video'), __('Manage Video'), _n_noop('Video <span class="count">(%s)</span>', 'Video <span class="count">(%s)</span>')),	);	return apply_filters('post_mime_types', $post_mime_types);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @return unknown */function get_available_post_mime_types($type = 'attachment') {	global $wpdb;	$types = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_mime_type FROM $wpdb->posts WHERE post_type = %s", $type));	return $types;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $q * @return unknown */function wp_edit_attachments_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m']   = isset( $q['m'] ) ? (int) $q['m'] : 0;	$q['cat'] = isset( $q['cat'] ) ? (int) $q['cat'] : 0;	$q['post_type'] = 'attachment';	$q['post_status'] = isset( $q['status'] ) && 'trash' == $q['status'] ? 'trash' : 'inherit';	$media_per_page = (int) get_user_option( 'upload_per_page' );	if ( empty( $media_per_page ) || $media_per_page < 1 )		$media_per_page = 20;	$q['posts_per_page'] = apply_filters( 'upload_per_page', $media_per_page );	$post_mime_types = get_post_mime_types();	$avail_post_mime_types = get_available_post_mime_types('attachment');	if ( isset($q['post_mime_type']) && !array_intersect( (array) $q['post_mime_type'], array_keys($post_mime_types) ) )		unset($q['post_mime_type']);	wp($q);	return array($post_mime_types, $avail_post_mime_types);}/** * {@internal Missing Short Description}} * * @uses get_user_option() * @since unknown * * @param unknown_type $id * @param unknown_type $page * @return unknown */function postbox_classes( $id, $page ) {	if ( isset( $_GET['edit'] ) && $_GET['edit'] == $id )		return '';	if ( $closed = get_user_option('closedpostboxes_'.$page ) ) {		if ( !is_array( $closed ) ) {			return '';		}		return in_array( $id, $closed )? 'closed' : '';	} else {		return '';	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param int|object $id    Post ID or post object. * @param string $title (optional) Title * @param string $name (optional) Name * @return array With two entries of type string */function get_sample_permalink($id, $title = null, $name = null) {	$post = &get_post($id);	if ( !$post->ID )		return array('', '');	$ptype = get_post_type_object($post->post_type);	$original_status = $post->post_status;	$original_date = $post->post_date;	$original_name = $post->post_name;	// Hack: get_permalink would return ugly permalink for	// drafts, so we will fake, that our post is published	if ( in_array($post->post_status, array('draft', 'pending')) ) {		$post->post_status = 'publish';		$post->post_name = sanitize_title($post->post_name ? $post->post_name : $post->post_title, $post->ID);	}	// If the user wants to set a new name -- override the current one	// Note: if empty name is supplied -- use the title instead, see #6072	if ( !is_null($name) )		$post->post_name = sanitize_title($name ? $name : $title, $post->ID);	$post->post_name = wp_unique_post_slug($post->post_name, $post->ID, $post->post_status, $post->post_type, $post->post_parent);	$post->filter = 'sample';	$permalink = get_permalink($post, true);	// Replace custom post_type Token with generic pagename token for ease of use.	$permalink = str_replace("%$post->post_type%", '%pagename%', $permalink);	// Handle page hierarchy	if ( $ptype->hierarchical ) {		$uri = get_page_uri($post);		$uri = untrailingslashit($uri);		$uri = strrev( stristr( strrev( $uri ), '/' ) );		$uri = untrailingslashit($uri);		if ( !empty($uri) )			$uri .= '/';		$permalink = str_replace('%pagename%', "${uri}%pagename%", $permalink);	}	$permalink = array($permalink, apply_filters('editable_slug', $post->post_name));	$post->post_status = $original_status;	$post->post_date = $original_date;	$post->post_name = $original_name;	unset($post->filter);	return $permalink;}/** * sample permalink html * * intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. * * @since unknown * * @param int|object $id Post ID or post object. * @param string $new_title (optional) New title * @param string $new_slug (optional) New slug * @return string intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. */function get_sample_permalink_html( $id, $new_title = null, $new_slug = null ) {	global $wpdb;	$post = &get_post($id);	list($permalink, $post_name) = get_sample_permalink($post->ID, $new_title, $new_slug);	if ( 'publish' == $post->post_status ) {		$ptype = get_post_type_object($post->post_type);		$view_post = $ptype->labels->view_item;		$title = __('Click to edit this part of the permalink');	} else {		$title = __('Temporary permalink. Click to edit this part.');	}	if ( false === strpos($permalink, '%postname%') && false === strpos($permalink, '%pagename%') ) {		$return = '<strong>' . __('Permalink:') . "</strong>\n" . '<span id="sample-permalink">' . $permalink . "</span>\n";		if ( current_user_can( 'manage_options' ) && !( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') ) )			$return .= '<span id="change-permalinks"><a href="options-permalink.php" class="button" target="_blank">' . __('Change Permalinks') . "</a></span>\n";		if ( isset($view_post) )			$return .= "<span id='view-post-btn'><a href='$permalink' class='button' target='_blank'>$view_post</a></span>\n";		$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);		return $return;	}	if ( function_exists('mb_strlen') ) {		if ( mb_strlen($post_name) > 30 ) {			$post_name_abridged = mb_substr($post_name, 0, 14). '&hellip;' . mb_substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	} else {		if ( strlen($post_name) > 30 ) {			$post_name_abridged = substr($post_name, 0, 14). '&hellip;' . substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	}	$post_name_html = '<span id="editable-post-name" title="' . $title . '">' . $post_name_abridged . '</span>';	$display_link = str_replace(array('%pagename%','%postname%'), $post_name_html, $permalink);	$view_link = str_replace(array('%pagename%','%postname%'), $post_name, $permalink);	$return =  '<strong>' . __('Permalink:') . "</strong>\n";	$return .= '<span id="sample-permalink">' . $display_link . "</span>\n";	$return .= '&lrm;'; // Fix bi-directional text display defect in RTL languages.	$return .= '<span id="edit-slug-buttons"><a href="#post_name" class="edit-slug button hide-if-no-js" onclick="editPermalink(' . $id . '); return false;">' . __('Edit') . "</a></span>\n";	$return .= '<span id="editable-post-name-full">' . $post_name . "</span>\n";	if ( isset($view_post) )		$return .= "<span id='view-post-btn'><a href='$view_link' class='button' target='_blank'>$view_post</a></span>\n";	$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);	return $return;}/** * Output HTML for the post thumbnail meta-box. * * @since 2.9.0 * * @param int $thumbnail_id ID of the attachment used for thumbnail * @return string html */function _wp_post_thumbnail_html( $thumbnail_id = NULL ) {	global $content_width, $_wp_additional_image_sizes, $post_ID;	$set_thumbnail_link = '<p class="hide-if-no-js"><a title="' . esc_attr__( 'Set featured image' ) . '" href="' . esc_url( get_upload_iframe_src('image') ) . '" id="set-post-thumbnail" class="thickbox">%s</a></p>';	$content = sprintf($set_thumbnail_link, esc_html__( 'Set featured image' ));	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$old_content_width = $content_width;		$content_width = 266;		if ( !isset( $_wp_additional_image_sizes['post-thumbnail'] ) )			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, array( $content_width, $content_width ) );		else			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'post-thumbnail' );		if ( !empty( $thumbnail_html ) ) {			$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$post_ID" );			$content = sprintf($set_thumbnail_link, $thumbnail_html);			$content .= '<p class="hide-if-no-js"><a href="#" id="remove-post-thumbnail" onclick="WPRemoveThumbnail(\'' . $ajax_nonce . '\');return false;">' . esc_html__( 'Remove featured image' ) . '</a></p>';		}		$content_width = $old_content_width;	}	return apply_filters( 'admin_post_thumbnail_html', $content );}/** * Check to see if the post is currently being edited by another user. * * @since 2.5.0 * * @param int $post_id ID of the post to check for editing * @return bool|int False: not locked or locked by current user. Int: user ID of user with lock. */function wp_check_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	$lock = get_post_meta( $post->ID, '_edit_lock', true );	$last = get_post_meta( $post->ID, '_edit_last', true );	$time_window = apply_filters( 'wp_check_post_lock_window', AUTOSAVE_INTERVAL * 2 );	if ( $lock && $lock > time() - $time_window && $last != $current_user->ID )		return $last;	return false;}/** * Mark the post as currently being edited by the current user * * @since 2.5.0 * * @param int $post_id ID of the post to being edited * @return bool Returns false if the post doesn't exist of there is no current user */function wp_set_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	if ( !$current_user || !$current_user->ID )		return false;	$now = time();	update_post_meta( $post->ID, '_edit_lock', $now );}/** * Outputs the notice message to say that someone else is editing this post at the moment. * * @since 2.8.5 * @return none */function _admin_notice_post_locked() {	global $post;	$last_user = get_userdata( get_post_meta( $post->ID, '_edit_last', true ) );	$last_user_name = $last_user ? $last_user->display_name : __('Somebody');	switch ($post->post_type) {		case 'post':			$message = __( 'Warning: %s is currently editing this post' );			break;		case 'page':			$message = __( 'Warning: %s is currently editing this page' );			break;		default:			$message = __( 'Warning: %s is currently editing this.' );	}	$message = sprintf( $message, esc_html( $last_user_name ) );	echo "<div class='error'><p>$message</p></div>";}/** * Creates autosave data for the specified post from $_POST data. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_translate_postdata() * @uses _wp_post_revision_fields() * * @return unknown */function wp_create_post_autosave( $post_id ) {	$translated = _wp_translate_postdata( true );	if ( is_wp_error( $translated ) )		return $translated;	// Only store one autosave.  If there is already an autosave, overwrite it.	if ( $old_autosave = wp_get_post_autosave( $post_id ) ) {		$new_autosave = _wp_post_revision_fields( $_POST, true );		$new_autosave['ID'] = $old_autosave->ID;		$current_user = wp_get_current_user();		$new_autosave['post_author'] = $current_user->ID;		return wp_update_post( $new_autosave );	}	// _wp_put_post_revision() expects unescaped.	$_POST = stripslashes_deep($_POST);	// Otherwise create the new autosave as a special post revision	return _wp_put_post_revision( $_POST, true );}/** * Save draft or manually autosave for showing preview. * * @package WordPress * @since 2.7.0 * * @uses wp_write_post() * @uses edit_post() * @uses get_post() * @uses current_user_can() * @uses wp_create_post_autosave() * * @return str URL to redirect to show the preview */function post_preview() {	$post_ID = (int) $_POST['post_ID'];	$status = get_post_status( $post_ID );	if ( 'auto-draft' == $status )		wp_die( __('Preview not available. Please save as a draft first.') );	if ( isset($_POST['catslist']) )		$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( isset($_POST['tags_input']) )		$_POST['tags_input'] = explode(",", $_POST['tags_input']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			wp_die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			wp_die(__('You are not allowed to edit this post.'));	}	if ( 'draft' == $post->post_status ) {		$id = edit_post();	} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.		$id = wp_create_post_autosave( $post->ID );		if ( ! is_wp_error($id) )			$id = $post->ID;	}	if ( is_wp_error($id) )		wp_die( $id->get_error_message() );	if ( $_POST['post_status'] == 'draft'  ) {		$url = add_query_arg( 'preview', 'true', get_permalink($id) );	} else {		$nonce = wp_create_nonce('post_preview_' . $id);		$url = add_query_arg( array( 'preview' => 'true', 'preview_id' => $id, 'preview_nonce' => $nonce ), get_permalink($id) );	}	return $url;}/** * Adds the TinyMCE editor used on the Write and Edit screens. * * @package WordPress * @since 2.7.0 * * TinyMCE is loaded separately from other Javascript by using wp-tinymce.php. It outputs concatenated * and optionaly pre-compressed version of the core and all default plugins. Additional plugins are loaded * directly by TinyMCE using non-blocking method. Custom plugins can be refreshed by adding a query string * to the URL when queueing them with the mce_external_plugins filter. * * @param bool $teeny optional Output a trimmed down version used in Press This. * @param mixed $settings optional An array that can add to or overwrite the default TinyMCE settings. */function wp_tiny_mce( $teeny = false, $settings = false ) {	global $concatenate_scripts, $compress_scripts, $tinymce_version, $editor_styles;	if ( ! user_can_richedit() )		return;	$baseurl = includes_url('js/tinymce');	$mce_locale = ( '' == get_locale() ) ? 'en' : strtolower( substr(get_locale(), 0, 2) ); // only ISO 639-1	/*	The following filter allows localization scripts to change the languages displayed in the spellchecker's drop-down menu.	By default it uses Google's spellchecker API, but can be configured to use PSpell/ASpell if installed on the server.	The + sign marks the default language. More information:	http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker	*/	$mce_spellchecker_languages = apply_filters('mce_spellchecker_languages', '+English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr,German=de,Italian=it,Polish=pl,Portuguese=pt,Spanish=es,Swedish=sv');	if ( $teeny ) {		$plugins = apply_filters( 'teeny_mce_plugins', array('safari', 'inlinepopups', 'media', 'fullscreen', 'wordpress') );		$ext_plugins = '';	} else {		$plugins = array( 'safari', 'inlinepopups', 'spellchecker', 'paste', 'wordpress', 'media', 'fullscreen', 'wpeditimage', 'wpgallery', 'tabfocus' );		/*		The following filter takes an associative array of external plugins for TinyMCE in the form 'plugin_name' => 'url'.		It adds the plugin's name to TinyMCE's plugins init and the call to PluginManager to load the plugin.		The url should be absolute and should include the js file name to be loaded. Example:		array( 'myplugin' => 'http://my-site.com/wp-content/plugins/myfolder/mce_plugin.js' )		If the plugin uses a button, it should be added with one of the "$mce_buttons" filters.		*/		$mce_external_plugins = apply_filters('mce_external_plugins', array());		$ext_plugins = '';		if ( ! empty($mce_external_plugins) ) {			/*			The following filter loads external language files for TinyMCE plugins.			It takes an associative array 'plugin_name' => 'path', where path is the			include path to the file. The language file should follow the same format as			/tinymce/langs/wp-langs.php and should define a variable $strings that			holds all translated strings.			When this filter is not used, the function will try to load {mce_locale}.js.			If that is not found, en.js will be tried next.			*/			$mce_external_languages = apply_filters('mce_external_languages', array());			$loaded_langs = array();			$strings = '';			if ( ! empty($mce_external_languages) ) {				foreach ( $mce_external_languages as $name => $path ) {					if ( @is_file($path) && @is_readable($path) ) {						include_once($path);						$ext_plugins .= $strings . "\n";						$loaded_langs[] = $name;					}				}			}			foreach ( $mce_external_plugins as $name => $url ) {				if ( is_ssl() ) $url = str_replace('http://', 'https://', $url);				$plugins[] = '-' . $name;				$plugurl = dirname($url);				$strings = $str1 = $str2 = '';				if ( ! in_array($name, $loaded_langs) ) {					$path = str_replace( WP_PLUGIN_URL, '', $plugurl );					$path = WP_PLUGIN_DIR . $path . '/langs/';					if ( function_exists('realpath') )						$path = trailingslashit( realpath($path) );					if ( @is_file($path . $mce_locale . '.js') )						$strings .= @file_get_contents($path . $mce_locale . '.js') . "\n";					if ( @is_file($path . $mce_locale . '_dlg.js') )						$strings .= @file_get_contents($path . $mce_locale . '_dlg.js') . "\n";					if ( 'en' != $mce_locale && empty($strings) ) {						if ( @is_file($path . 'en.js') ) {							$str1 = @file_get_contents($path . 'en.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str1, 1 ) . "\n";						}						if ( @is_file($path . 'en_dlg.js') ) {							$str2 = @file_get_contents($path . 'en_dlg.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str2, 1 ) . "\n";						}					}					if ( ! empty($strings) )						$ext_plugins .= "\n" . $strings . "\n";				}				$ext_plugins .= 'tinyMCEPreInit.load_ext("' . $plugurl . '", "' . $mce_locale . '");' . "\n";				$ext_plugins .= 'tinymce.PluginManager.load("' . $name . '", "' . $url . '");' . "\n";			}		}	}	$plugins = implode($plugins, ',');	if ( $teeny ) {		$mce_buttons = apply_filters( 'teeny_mce_buttons', array('bold, italic, underline, blockquote, separator, strikethrough, bullist, numlist,justifyleft, justifycenter, justifyright, undo, redo, link, unlink, fullscreen') );		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = $mce_buttons_3 = $mce_buttons_4 = '';	} else {		$mce_buttons = apply_filters('mce_buttons', array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'link', 'unlink', 'wp_more', '|', 'spellchecker', 'fullscreen', 'wp_adv' ));		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = array('formatselect', 'underline', 'justifyfull', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'media', 'charmap', '|', 'outdent', 'indent', '|', 'undo', 'redo', 'wp_help' );		if ( is_multisite() )			unset( $mce_buttons_2[ array_search( 'media', $mce_buttons_2 ) ] );		$mce_buttons_2 = apply_filters('mce_buttons_2', $mce_buttons_2);		$mce_buttons_2 = implode($mce_buttons_2, ',');		$mce_buttons_3 = apply_filters('mce_buttons_3', array());		$mce_buttons_3 = implode($mce_buttons_3, ',');		$mce_buttons_4 = apply_filters('mce_buttons_4', array());		$mce_buttons_4 = implode($mce_buttons_4, ',');	}	$no_captions = (bool) apply_filters( 'disable_captions', '' );	// TinyMCE init settings	$initArray = array (		'mode' => 'specific_textareas',		'editor_selector' => 'theEditor',		'width' => '100%',		'theme' => 'advanced',		'skin' => 'wp_theme',		'theme_advanced_buttons1' => $mce_buttons,		'theme_advanced_buttons2' => $mce_buttons_2,		'theme_advanced_buttons3' => $mce_buttons_3,		'theme_advanced_buttons4' => $mce_buttons_4,		'language' => $mce_locale,		'spellchecker_languages' => $mce_spellchecker_languages,		'theme_advanced_toolbar_location' => 'top',		'theme_advanced_toolbar_align' => 'left',		'theme_advanced_statusbar_location' => 'bottom',		'theme_advanced_resizing' => true,		'theme_advanced_resize_horizontal' => false,		'dialog_type' => 'modal',		'relative_urls' => false,		'remove_script_host' => false,		'convert_urls' => false,		'apply_source_formatting' => false,		'remove_linebreaks' => true,		'gecko_spellcheck' => true,		'entities' => '38,amp,60,lt,62,gt',		'accessibility_focus' => true,		'tabfocus_elements' => 'major-publishing-actions',		'media_strict' => false,		'paste_remove_styles' => true,		'paste_remove_spans' => true,		'paste_strip_class_attributes' => 'all',		'wpeditimage_disable_captions' => $no_captions,		'plugins' => $plugins	);	if ( ! empty( $editor_styles ) && is_array( $editor_styles ) ) {		$mce_css = array();		$style_uri = get_stylesheet_directory_uri();		if ( TEMPLATEPATH == STYLESHEETPATH ) {			foreach ( $editor_styles as $file )				$mce_css[] = "$style_uri/$file";		} else {			$style_dir    = get_stylesheet_directory();			$template_uri = get_template_directory_uri();			$template_dir = get_template_directory();			foreach ( $editor_styles as $file ) {				if ( file_exists( "$style_dir/$file" ) )					$mce_css[] = "$style_uri/$file";				if ( file_exists( "$template_dir/$file" ) )					$mce_css[] = "$template_uri/$file";			}		}		$mce_css = implode( ',', $mce_css );	} else {		$mce_css = '';	}	$mce_css = trim( apply_filters( 'mce_css', $mce_css ), ' ,' );	if ( ! empty($mce_css) )		$initArray['content_css'] = $mce_css;	if ( is_array($settings) )		$initArray = array_merge($initArray, $settings);	// For people who really REALLY know what they're doing with TinyMCE	// You can modify initArray to add, remove, change elements of the config before tinyMCE.init	// Setting "valid_elements", "invalid_elements" and "extended_valid_elements" can be done through "tiny_mce_before_init".	// Best is to use the default cleanup by not specifying valid_elements, as TinyMCE contains full set of XHTML 1.0.	if ( $teeny ) {		$initArray = apply_filters('teeny_mce_before_init', $initArray);	} else {		$initArray = apply_filters('tiny_mce_before_init', $initArray);	}	if ( empty($initArray['theme_advanced_buttons3']) && !empty($initArray['theme_advanced_buttons4']) ) {		$initArray['theme_advanced_buttons3'] = $initArray['theme_advanced_buttons4'];		$initArray['theme_advanced_buttons4'] = '';	}	if ( ! isset($concatenate_scripts) )		script_concat_settings();	$language = $initArray['language'];	$compressed = $compress_scripts && $concatenate_scripts && isset($_SERVER['HTTP_ACCEPT_ENCODING'])		&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip');	/**	 * Deprecated	 *	 * The tiny_mce_version filter is not needed since external plugins are loaded directly by TinyMCE.	 * These plugins can be refreshed by appending query string to the URL passed to mce_external_plugins filter.	 * If the plugin has a popup dialog, a query string can be added to the button action that opens it (in the plugin's code).	 */	$version = apply_filters('tiny_mce_version', '');	$version = 'ver=' . $tinymce_version . $version;	if ( 'en' != $language )		include_once(ABSPATH . WPINC . '/js/tinymce/langs/wp-langs.php');	$mce_options = '';	foreach ( $initArray as $k => $v )	    $mce_options .= $k . ':"' . $v . '", ';	$mce_options = rtrim( trim($mce_options), '\n\r,' ); ?><script type="text/javascript">/* <![CDATA[ */tinyMCEPreInit = {	base : "<?php echo $baseurl; ?>",	suffix : "",	query : "<?php echo $version; ?>",	mceInit : {<?php echo $mce_options; ?>},	load_ext : function(url,lang){var sl=tinymce.ScriptLoader;sl.markDone(url+'/langs/'+lang+'.js');sl.markDone(url+'/langs/'+lang+'_dlg.js');}};/* ]]> */</script><?php	if ( $compressed )		echo "<script type='text/javascript' src='$baseurl/wp-tinymce.php?c=1&amp;$version'></script>\n";	else		echo "<script type='text/javascript' src='$baseurl/tiny_mce.js?$version'></script>\n";	if ( 'en' != $language && isset($lang) )		echo "<script type='text/javascript'>\n$lang\n</script>\n";	else		echo "<script type='text/javascript' src='$baseurl/langs/wp-langs-en.js?$version'></script>\n";?><script type="text/javascript">/* <![CDATA[ */<?php if ( $ext_plugins ) echo "$ext_plugins\n"; ?><?php if ( $compressed ) { ?>tinyMCEPreInit.go();<?php } else { ?>(function(){var t=tinyMCEPreInit,sl=tinymce.ScriptLoader,ln=t.mceInit.language,th=t.mceInit.theme,pl=t.mceInit.plugins;sl.markDone(t.base+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'_dlg.js');tinymce.each(pl.split(','),function(n){if(n&&n.charAt(0)!='-'){sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'.js');sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'_dlg.js');}});})();<?php } ?>tinyMCE.init(tinyMCEPreInit.mceInit);/* ]]> */</script><?php}
<?php/** * Misc WordPress Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function got_mod_rewrite() {	$got_rewrite = apache_mod_loaded('mod_rewrite', true);	return apply_filters('got_rewrite', $got_rewrite);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $filename * @param unknown_type $marker * @return array An array of strings from a file (.htaccess ) from between BEGIN and END markers. */function extract_from_markers( $filename, $marker ) {	$result = array ();	if (!file_exists( $filename ) ) {		return $result;	}	if ( $markerdata = explode( "\n", implode( '', file( $filename ) ) ));	{		$state = false;		foreach ( $markerdata as $markerline ) {			if (strpos($markerline, '# END ' . $marker) !== false)				$state = false;			if ( $state )				$result[] = $markerline;			if (strpos($markerline, '# BEGIN ' . $marker) !== false)				$state = true;		}	}	return $result;}/** * {@internal Missing Short Description}} * * Inserts an array of strings into a file (.htaccess ), placing it between * BEGIN and END markers. Replaces existing marked info. Retains surrounding * data. Creates file if none exists. * * @since unknown * * @param unknown_type $filename * @param unknown_type $marker * @param unknown_type $insertion * @return bool True on write success, false on failure. */function insert_with_markers( $filename, $marker, $insertion ) {	if (!file_exists( $filename ) || is_writeable( $filename ) ) {		if (!file_exists( $filename ) ) {			$markerdata = '';		} else {			$markerdata = explode( "\n", implode( '', file( $filename ) ) );		}		if ( !$f = @fopen( $filename, 'w' ) )			return false;		$foundit = false;		if ( $markerdata ) {			$state = true;			foreach ( $markerdata as $n => $markerline ) {				if (strpos($markerline, '# BEGIN ' . $marker) !== false)					$state = false;				if ( $state ) {					if ( $n + 1 < count( $markerdata ) )						fwrite( $f, "{$markerline}\n" );					else						fwrite( $f, "{$markerline}" );				}				if (strpos($markerline, '# END ' . $marker) !== false) {					fwrite( $f, "# BEGIN {$marker}\n" );					if ( is_array( $insertion ))						foreach ( $insertion as $insertline )							fwrite( $f, "{$insertline}\n" );					fwrite( $f, "# END {$marker}\n" );					$state = true;					$foundit = true;				}			}		}		if (!$foundit) {			fwrite( $f, "\n# BEGIN {$marker}\n" );			foreach ( $insertion as $insertline )				fwrite( $f, "{$insertline}\n" );			fwrite( $f, "# END {$marker}\n" );		}		fclose( $f );		return true;	} else {		return false;	}}/** * Updates the htaccess file with the current rules if it is writable. * * Always writes to the file if it exists and is writable to ensure that we * blank out old rules. * * @since unknown */function save_mod_rewrite_rules() {	if ( is_multisite() )		return;	global $wp_rewrite;	$home_path = get_home_path();	$htaccess_file = $home_path.'.htaccess';	// If the file doesn't already exist check for write access to the directory and whether we have some rules.	// else check for write access to the file.	if ((!file_exists($htaccess_file) && is_writable($home_path) && $wp_rewrite->using_mod_rewrite_permalinks()) || is_writable($htaccess_file)) {		if ( got_mod_rewrite() ) {			$rules = explode( "\n", $wp_rewrite->mod_rewrite_rules() );			return insert_with_markers( $htaccess_file, 'WordPress', $rules );		}	}	return false;}/** * Updates the IIS web.config file with the current rules if it is writable. * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file. * * @since 2.8.0 * * @return bool True if web.config was updated successfully */function iis7_save_url_rewrite_rules(){	global $wp_rewrite;	$home_path = get_home_path();	$web_config_file = $home_path . 'web.config';	// Using win_is_writable() instead of is_writable() because of a bug in Windows PHP	if ( ( ! file_exists($web_config_file) && win_is_writable($home_path) && $wp_rewrite->using_mod_rewrite_permalinks() ) || win_is_writable($web_config_file) ) {		if ( iis7_supports_permalinks() ) {			$rule = $wp_rewrite->iis7_url_rewrite_rules(false, '', '');			if ( ! empty($rule) ) {				return iis7_add_rewrite_rule($web_config_file, $rule);			} else {				return iis7_delete_rewrite_rule($web_config_file);			}		}	}	return false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file */function update_recently_edited( $file ) {	$oldfiles = (array ) get_option( 'recently_edited' );	if ( $oldfiles ) {		$oldfiles = array_reverse( $oldfiles );		$oldfiles[] = $file;		$oldfiles = array_reverse( $oldfiles );		$oldfiles = array_unique( $oldfiles );		if ( 5 < count( $oldfiles ))			array_pop( $oldfiles );	} else {		$oldfiles[] = $file;	}	update_option( 'recently_edited', $oldfiles );}/** * If siteurl or home changed, flush rewrite rules. * * @since unknown * * @param unknown_type $old_value * @param unknown_type $value */function update_home_siteurl( $old_value, $value ) {	global $wp_rewrite;	if ( defined( "WP_INSTALLING" ) )		return;	// If home changed, write rewrite rules to new location.	$wp_rewrite->flush_rules();}add_action( 'update_option_home', 'update_home_siteurl', 10, 2 );add_action( 'update_option_siteurl', 'update_home_siteurl', 10, 2 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $url * @return unknown */function url_shorten( $url ) {	$short_url = str_replace( 'http://', '', stripslashes( $url ));	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	return $short_url;}/** * Resets global variables based on $_GET and $_POST * * This function resets global variables based on the names passed * in the $vars array to the value of $_POST[$var] or $_GET[$var] or '' * if neither is defined. * * @since unknown * * @param array $vars An array of globals to reset. */function wp_reset_vars( $vars ) {	for ( $i=0; $i<count( $vars ); $i += 1 ) {		$var = $vars[$i];		global $$var;		if ( empty( $_POST[$var] ) ) {			if ( empty( $_GET[$var] ) )				$$var = '';			else				$$var = $_GET[$var];		} else {			$$var = $_POST[$var];		}	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $message */function show_message($message) {	if ( is_wp_error($message) ){		if ( $message->get_error_data() )			$message = $message->get_error_message() . ': ' . $message->get_error_data();		else			$message = $message->get_error_message();	}	echo "<p>$message</p>\n";	wp_ob_end_flush_all();	flush();}function wp_doc_link_parse( $content ) {	if ( !is_string( $content ) || empty( $content ) )		return array();	if ( !function_exists('token_get_all') )		return array();	$tokens = token_get_all( $content );	$functions = array();	$ignore_functions = array();	for ( $t = 0, $count = count( $tokens ); $t < $count; $t++ ) {		if ( !is_array( $tokens[$t] ) ) continue;		if ( T_STRING == $tokens[$t][0] && ( '(' == $tokens[ $t + 1 ] || '(' == $tokens[ $t + 2 ] ) ) {			// If it's a function or class defined locally, there's not going to be any docs available			if ( ( isset( $tokens[ $t - 2 ][1] ) && in_array( $tokens[ $t - 2 ][1], array( 'function', 'class' ) ) ) || ( isset( $tokens[ $t - 2 ][0] ) && T_OBJECT_OPERATOR == $tokens[ $t - 1 ][0] ) ) {				$ignore_functions[] = $tokens[$t][1];			}			// Add this to our stack of unique references			$functions[] = $tokens[$t][1];		}	}	$functions = array_unique( $functions );	sort( $functions );	$ignore_functions = apply_filters( 'documentation_ignore_functions', $ignore_functions );	$ignore_functions = array_unique( $ignore_functions );	$out = array();	foreach ( $functions as $function ) {		if ( in_array( $function, $ignore_functions ) )			continue;		$out[] = $function;	}	return $out;}/** * Saves option for number of rows when listing posts, pages, comments, etc. * * @since 2.8**/function set_screen_options() {	if ( isset($_POST['wp_screen_options']) && is_array($_POST['wp_screen_options']) ) {		check_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );		if ( !$user = wp_get_current_user() )			return;		$option = $_POST['wp_screen_options']['option'];		$value = $_POST['wp_screen_options']['value'];		if ( !preg_match( '/^[a-z_-]+$/', $option ) )			return;		$option = str_replace('-', '_', $option);		$map_option = $option;		$type = str_replace('edit_', '', $map_option);		$type = str_replace('_per_page', '', $type);		if ( in_array($type, get_post_types()) )			$map_option = 'edit_per_page';		if ( in_array( $type, get_taxonomies()) )			$map_option = 'edit_tags_per_page';		switch ( $map_option ) {			case 'edit_per_page':			case 'ms_sites_per_page':			case 'ms_users_per_page':			case 'edit_comments_per_page':			case 'upload_per_page':			case 'edit_tags_per_page':			case 'plugins_per_page':				$value = (int) $value;				if ( $value < 1 || $value > 999 )					return;				break;			default:				$value = apply_filters('set-screen-option', false, $option, $value);				if ( false === $value )					return;				break;		}		update_user_meta($user->ID, $option, $value);		wp_redirect( remove_query_arg( array('pagenum', 'apage', 'paged'), wp_get_referer() ) );		exit;	}}function wp_menu_unfold() {	if ( isset($_GET['unfoldmenu']) ) {		delete_user_setting('mfold');		wp_redirect( remove_query_arg( 'unfoldmenu', stripslashes($_SERVER['REQUEST_URI']) ) );	 	exit;	}}/** * Check if IIS 7 supports pretty permalinks * * @since 2.8.0 * * @return bool */function iis7_supports_permalinks() {	global $is_iis7;	$supports_permalinks = false;	if ( $is_iis7 ) {		/* First we check if the DOMDocument class exists. If it does not exist,		 * which is the case for PHP 4.X, then we cannot easily update the xml configuration file,		 * hence we just bail out and tell user that pretty permalinks cannot be used.		 * This is not a big issue because PHP 4.X is going to be depricated and for IIS it		 * is recommended to use PHP 5.X NTS.		 * Next we check if the URL Rewrite Module 1.1 is loaded and enabled for the web site. When		 * URL Rewrite 1.1 is loaded it always sets a server variable called 'IIS_UrlRewriteModule'.		 * Lastly we make sure that PHP is running via FastCGI. This is important because if it runs		 * via ISAPI then pretty permalinks will not work.		 */		$supports_permalinks = class_exists('DOMDocument') && isset($_SERVER['IIS_UrlRewriteModule']) && ( php_sapi_name() == 'cgi-fcgi' );	}	return apply_filters('iis7_supports_permalinks', $supports_permalinks);}/** * Check if rewrite rule for WordPress already exists in the IIS 7 configuration file * * @since 2.8.0 * * @return bool * @param string $filename The file path to the configuration file */function iis7_rewrite_rule_exists($filename) {	if ( ! file_exists($filename) )		return false;	if ( ! class_exists('DOMDocument') )		return false;	$doc = new DOMDocument();	if ( $doc->load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	$rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $rules->length == 0 )		return false;	else		return true;}/** * Delete WordPress rewrite rule from web.config file if it exists there * * @since 2.8.0 * * @param string $filename Name of the configuration file * @return bool */function iis7_delete_rewrite_rule($filename) {	// If configuration file does not exist then rules also do not exist so there is nothing to delete	if ( ! file_exists($filename) )		return true;	if ( ! class_exists('DOMDocument') )		return false;	$doc = new DOMDocument();	$doc->preserveWhiteSpace = false;	if ( $doc -> load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	$rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $rules->length > 0 ) {		$child = $rules->item(0);		$parent = $child->parentNode;		$parent->removeChild($child);		$doc->formatOutput = true;		saveDomDocument($doc, $filename);	}	return true;}/** * Add WordPress rewrite rule to the IIS 7 configuration file. * * @since 2.8.0 * * @param string $filename The file path to the configuration file * @param string $rewrite_rule The XML fragment with URL Rewrite rule * @return bool */function iis7_add_rewrite_rule($filename, $rewrite_rule) {	if ( ! class_exists('DOMDocument') )		return false;	// If configuration file does not exist then we create one.	if ( ! file_exists($filename) ) {		$fp = fopen( $filename, 'w');		fwrite($fp, '<configuration/>');		fclose($fp);	}	$doc = new DOMDocument();	$doc->preserveWhiteSpace = false;	if ( $doc->load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	// First check if the rule already exists as in that case there is no need to re-add it	$wordpress_rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $wordpress_rules->length > 0 )		return true;	// Check the XPath to the rewrite rule and create XML nodes if they do not exist	$xmlnodes = $xpath->query('/configuration/system.webServer/rewrite/rules');	if ( $xmlnodes->length > 0 ) {		$rules_node = $xmlnodes->item(0);	} else {		$rules_node = $doc->createElement('rules');		$xmlnodes = $xpath->query('/configuration/system.webServer/rewrite');		if ( $xmlnodes->length > 0 ) {			$rewrite_node = $xmlnodes->item(0);			$rewrite_node->appendChild($rules_node);		} else {			$rewrite_node = $doc->createElement('rewrite');			$rewrite_node->appendChild($rules_node);			$xmlnodes = $xpath->query('/configuration/system.webServer');			if ( $xmlnodes->length > 0 ) {				$system_webServer_node = $xmlnodes->item(0);				$system_webServer_node->appendChild($rewrite_node);			} else {				$system_webServer_node = $doc->createElement('system.webServer');				$system_webServer_node->appendChild($rewrite_node);				$xmlnodes = $xpath->query('/configuration');				if ( $xmlnodes->length > 0 ) {					$config_node = $xmlnodes->item(0);					$config_node->appendChild($system_webServer_node);				} else {					$config_node = $doc->createElement('configuration');					$doc->appendChild($config_node);					$config_node->appendChild($system_webServer_node);				}			}		}	}	$rule_fragment = $doc->createDocumentFragment();	$rule_fragment->appendXML($rewrite_rule);	$rules_node->appendChild($rule_fragment);	$doc->encoding = "UTF-8";	$doc->formatOutput = true;	saveDomDocument($doc, $filename);	return true;}/** * Saves the XML document into a file * * @since 2.8.0 * * @param DOMDocument $doc * @param string $filename */function saveDomDocument($doc, $filename) {	$config = $doc->saveXML();	$config = preg_replace("/([^\r])\n/", "$1\r\n", $config);	$fp = fopen($filename, 'w');	fwrite($fp, $config);	fclose($fp);}/** * Workaround for Windows bug in is_writable() function * * @since 2.8.0 * * @param object $path * @return bool */function win_is_writable($path) {	/* will work in despite of Windows ACLs bug	 * NOTE: use a trailing slash for folders!!!	 * see http://bugs.php.net/bug.php?id=27609	 * see http://bugs.php.net/bug.php?id=30931	 */    if ( $path{strlen($path)-1} == '/' ) // recursively return a temporary file path        return win_is_writable($path . uniqid(mt_rand()) . '.tmp');    else if ( is_dir($path) )        return win_is_writable($path . '/' . uniqid(mt_rand()) . '.tmp');    // check tmp file for read/write capabilities    $rm = file_exists($path);    $f = @fopen($path, 'a');    if ($f===false)        return false;    fclose($f);    if ( ! $rm )        unlink($path);    return true;}/** * Display the default admin color scheme picker (Used in user-edit.php) * * @since 3.0.0 */function admin_color_scheme_picker() {	global $_wp_admin_css_colors, $user_id; ?><fieldset><legend class="screen-reader-text"><span><?php _e('Admin Color Scheme')?></span></legend><?php$current_color = get_user_option('admin_color', $user_id);if ( empty($current_color) )	$current_color = 'fresh';foreach ( $_wp_admin_css_colors as $color => $color_info ): ?><div class="color-option"><input name="admin_color" id="admin_color_<?php echo $color; ?>" type="radio" value="<?php echo esc_attr($color) ?>" class="tog" <?php checked($color, $current_color); ?> />	<table class="color-palette">	<tr>	<?php foreach ( $color_info->colors as $html_color ): ?>	<td style="background-color: <?php echo $html_color ?>" title="<?php echo $color ?>">&nbsp;</td>	<?php endforeach; ?>	</tr>	</table>	<label for="admin_color_<?php echo $color; ?>"><?php echo $color_info->name ?></label></div>	<?php endforeach; ?></fieldset><?php}?>
<?php/** * WordPress User Page * * Handles authentication, registering, resetting passwords, forgot password, * and other user handling. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php' );// Redirect to https login if forced to use SSLif ( force_ssl_admin() && !is_ssl() ) {	if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {		wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));		exit();	} else {		wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);		exit();	}}/** * Outputs the header for the login page. * * @uses do_action() Calls the 'login_head' for outputting HTML in the Log In *		header. * @uses apply_filters() Calls 'login_headerurl' for the top login link. * @uses apply_filters() Calls 'login_headertitle' for the top login title. * @uses apply_filters() Calls 'login_message' on the message to display in the *		header. * @uses $error The error global, which is checked for displaying errors. * * @param string $title Optional. WordPress Log In Page title to display in *		<title/> element. * @param string $message Optional. Message to display in header. * @param WP_Error $wp_error Optional. WordPress Error Object */function login_header($title = 'Log In', $message = '', $wp_error = '') {	global $error, $is_iphone, $interim_login, $current_site;	// Don't index any of these forms	add_filter( 'pre_option_blog_public', '__return_zero' );	add_action( 'login_head', 'noindex' );	if ( empty($wp_error) )		$wp_error = new WP_Error();	// Shake it!	$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );	$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );	if ( $shake_error_codes && $wp_error->get_error_code() && in_array( $wp_error->get_error_code(), $shake_error_codes ) )		add_action( 'login_head', 'wp_shake_js', 12 );	?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<title><?php bloginfo('name'); ?> &rsaquo; <?php echo $title; ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><?php	wp_admin_css( 'login', true );	wp_admin_css( 'colors-fresh', true );	if ( $is_iphone ) { ?>	<meta name="viewport" content="width=320; initial-scale=0.9; maximum-scale=1.0; user-scalable=0;" />	<style type="text/css" media="screen">	form { margin-left: 0px; }	#login { margin-top: 20px; }	</style><?php	} elseif ( isset($interim_login) && $interim_login ) { ?>	<style type="text/css" media="all">	.login #login { margin: 20px auto; }	</style><?php	}	do_action('login_head'); ?></head><body class="login"><?php   if ( !is_multisite() ) { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', 'http://wordpress.org/'); ?>" title="<?php echo apply_filters('login_headertitle', __('Powered by WordPress')); ?>"><?php bloginfo('name'); ?></a></h1><?php   } else { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', network_home_url() ); ?>" title="<?php echo apply_filters('login_headertitle', $current_site->site_name ); ?>"><span class="hide"><?php bloginfo('name'); ?></span></a></h1><?php   }	$message = apply_filters('login_message', $message);	if ( !empty( $message ) ) echo $message . "\n";	// Incase a plugin uses $error rather than the $errors object	if ( !empty( $error ) ) {		$wp_error->add('error', $error);		unset($error);	}	if ( $wp_error->get_error_code() ) {		$errors = '';		$messages = '';		foreach ( $wp_error->get_error_codes() as $code ) {			$severity = $wp_error->get_error_data($code);			foreach ( $wp_error->get_error_messages($code) as $error ) {				if ( 'message' == $severity )					$messages .= '	' . $error . "<br />\n";				else					$errors .= '	' . $error . "<br />\n";			}		}		if ( !empty($errors) )			echo '<div id="login_error">' . apply_filters('login_errors', $errors) . "</div>\n";		if ( !empty($messages) )			echo '<p class="message">' . apply_filters('login_messages', $messages) . "</p>\n";	}} // End of login_header()function wp_shake_js() {	global $is_iphone;	if ( $is_iphone )		return;?><script type="text/javascript">addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function s(id,pos){g(id).left=pos+'px';}function g(id){return document.getElementById(id).style;}function shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}addLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});</script><?php}/** * Handles sending password retrieval email to user. * * @uses $wpdb WordPress Database object * * @return bool|WP_Error True: when finish. WP_Error on error */function retrieve_password() {	global $wpdb, $current_site;	$errors = new WP_Error();	if ( empty( $_POST['user_login'] ) && empty( $_POST['user_email'] ) )		$errors->add('empty_username', __('<strong>ERROR</strong>: Enter a username or e-mail address.'));	if ( strpos($_POST['user_login'], '@') ) {		$user_data = get_user_by_email(trim($_POST['user_login']));		if ( empty($user_data) )			$errors->add('invalid_email', __('<strong>ERROR</strong>: There is no user registered with that email address.'));	} else {		$login = trim($_POST['user_login']);		$user_data = get_userdatabylogin($login);	}	do_action('lostpassword_post');	if ( $errors->get_error_code() )		return $errors;	if ( !$user_data ) {		$errors->add('invalidcombo', __('<strong>ERROR</strong>: Invalid username or e-mail.'));		return $errors;	}	// redefining user_login ensures we return the right case in the email	$user_login = $user_data->user_login;	$user_email = $user_data->user_email;	do_action('retreive_password', $user_login);  // Misspelled and deprecated	do_action('retrieve_password', $user_login);	$allow = apply_filters('allow_password_reset', true, $user_data->ID);	if ( ! $allow )		return new WP_Error('no_password_reset', __('Password reset is not allowed for this user'));	else if ( is_wp_error($allow) )		return $allow;	$key = $wpdb->get_var($wpdb->prepare("SELECT user_activation_key FROM $wpdb->users WHERE user_login = %s", $user_login));	if ( empty($key) ) {		// Generate something random for a key...		$key = wp_generate_password(20, false);		do_action('retrieve_password_key', $user_login, $key);		// Now insert the new md5 key into the db		$wpdb->update($wpdb->users, array('user_activation_key' => $key), array('user_login' => $user_login));	}	$message = __('Someone has asked to reset the password for the following site and username.') . "\r\n\r\n";	$message .= network_site_url() . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= __('To reset your password visit the following address, otherwise just ignore this email and nothing will happen.') . "\r\n\r\n";	$message .= network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_login), 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Password Reset'), $blogname );	$title = apply_filters('retrieve_password_title', $title);	$message = apply_filters('retrieve_password_message', $message, $key);	if ( $message && !wp_mail($user_email, $title, $message) )		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	return true;}/** * Handles resetting the user's password. * * @uses $wpdb WordPress Database object * * @param string $key Hash to validate sending user's password * @return bool|WP_Error */function reset_password($key, $login) {	global $wpdb;	$key = preg_replace('/[^a-z0-9]/i', '', $key);	if ( empty( $key ) || !is_string( $key ) )		return new WP_Error('invalid_key', __('Invalid key'));	if ( empty($login) || !is_string($login) )		return new WP_Error('invalid_key', __('Invalid key'));	$user = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->users WHERE user_activation_key = %s AND user_login = %s", $key, $login));	if ( empty( $user ) )		return new WP_Error('invalid_key', __('Invalid key'));	// Generate something random for a password...	$new_pass = wp_generate_password();	do_action('password_reset', $user, $new_pass);	wp_set_password($new_pass, $user->ID);	update_user_option($user->ID, 'default_password_nag', true, true); //Set up the Password change nag.	$message  = sprintf(__('Username: %s'), $user->user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $new_pass) . "\r\n";	$message .= site_url('wp-login.php', 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Your new password'), $blogname );	$title = apply_filters('password_reset_title', $title);	$message = apply_filters('password_reset_message', $message, $new_pass);	if ( $message && !wp_mail($user->user_email, $title, $message) )  		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	wp_password_change_notification($user);	return true;}/** * Handles registering a new user. * * @param string $user_login User's username for logging in * @param string $user_email User's email address to send password and add * @return int|WP_Error Either user's ID or error on failure. */function register_new_user( $user_login, $user_email ) {	$errors = new WP_Error();	$sanitized_user_login = sanitize_user( $user_login );	$user_email = apply_filters( 'user_registration_email', $user_email );	// Check the username	if ( $sanitized_user_login == '' ) {		$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Please enter a username.' ) );	} elseif ( ! validate_username( $user_login ) ) {		$errors->add( 'invalid_username', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ) );		$sanitized_user_login = '';	} elseif ( username_exists( $sanitized_user_login ) ) {		$errors->add( 'username_exists', __( '<strong>ERROR</strong>: This username is already registered, please choose another one.' ) );	}	// Check the e-mail address	if ( $user_email == '' ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please type your e-mail address.' ) );	} elseif ( ! is_email( $user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The email address isn&#8217;t correct.' ) );		$user_email = '';	} elseif ( email_exists( $user_email ) ) {		$errors->add( 'email_exists', __( '<strong>ERROR</strong>: This email is already registered, please choose another one.' ) );	}	do_action( 'register_post', $sanitized_user_login, $user_email, $errors );	$errors = apply_filters( 'registration_errors', $errors, $sanitized_user_login, $user_email );	if ( $errors->get_error_code() )		return $errors;	$user_pass = wp_generate_password();	$user_id = wp_create_user( $sanitized_user_login, $user_pass, $user_email );	if ( ! $user_id ) {		$errors->add( 'registerfail', sprintf( __( '<strong>ERROR</strong>: Couldn&#8217;t register you... please contact the <a href="mailto:%s">webmaster</a> !' ), get_option( 'admin_email' ) ) );		return $errors;	}	update_user_option( $user_id, 'default_password_nag', true, true ); //Set up the Password change nag.	wp_new_user_notification( $user_id, $user_pass );	return $user_id;}//// Main//$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : 'login';$errors = new WP_Error();if ( isset($_GET['key']) )	$action = 'resetpass';// validate action so as to default to the login screenif ( !in_array($action, array('logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login'), true) && false === has_filter('login_form_' . $action) )	$action = 'login';nocache_headers();header('Content-Type: '.get_bloginfo('html_type').'; charset='.get_bloginfo('charset'));if ( defined('RELOCATE') ) { // Move flag is set	if ( isset( $_SERVER['PATH_INFO'] ) && ($_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF']) )		$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );	$schema = is_ssl() ? 'https://' : 'http://';	if ( dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) != get_option('siteurl') )		update_option('siteurl', dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) );}//Set a cookie now to see if they are supported by the browser.setcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN);if ( SITECOOKIEPATH != COOKIEPATH )	setcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN);// allow plugins to override the default actions, and to add extra actions if they wantdo_action('login_form_' . $action);$http_post = ('POST' == $_SERVER['REQUEST_METHOD']);switch ($action) {case 'logout' :	check_admin_referer('log-out');	wp_logout();	$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?loggedout=true';	wp_safe_redirect( $redirect_to );	exit();break;case 'lostpassword' :case 'retrievepassword' :	if ( $http_post ) {		$errors = retrieve_password();		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';			wp_safe_redirect( $redirect_to );			exit();		}	}	if ( isset($_GET['error']) && 'invalidkey' == $_GET['error'] ) $errors->add('invalidkey', __('Sorry, that key does not appear to be valid.'));	$redirect_to = apply_filters( 'lostpassword_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	do_action('lost_password');	login_header(__('Lost Password'), '<p class="message">' . __('Please enter your username or e-mail address. You will receive a new password via e-mail.') . '</p>', $errors);	$user_login = isset($_POST['user_login']) ? stripslashes($_POST['user_login']) : '';?><form name="lostpasswordform" id="lostpasswordform" action="<?php echo site_url('wp-login.php?action=lostpassword', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username or E-mail:') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p><?php do_action('lostpassword_form'); ?>	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Get New Password'); ?>" tabindex="100" /></p></form><p id="nav"><?php if (get_option('users_can_register')) : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'resetpass' :case 'rp' :	$errors = reset_password($_GET['key'], $_GET['login']);	if ( ! is_wp_error($errors) ) {		wp_redirect('wp-login.php?checkemail=newpass');		exit();	}	wp_redirect('wp-login.php?action=lostpassword&error=invalidkey');	exit();break;case 'register' :	if ( is_multisite() ) {		// Multisite uses wp-signup.php		wp_redirect( apply_filters( 'wp_signup_location', get_bloginfo('wpurl') . '/wp-signup.php' ) );		exit;	}	if ( !get_option('users_can_register') ) {		wp_redirect('wp-login.php?registration=disabled');		exit();	}	$user_login = '';	$user_email = '';	if ( $http_post ) {		require_once( ABSPATH . WPINC . '/registration.php');		$user_login = $_POST['user_login'];		$user_email = $_POST['user_email'];		$errors = register_new_user($user_login, $user_email);		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';			wp_safe_redirect( $redirect_to );			exit();		}	}	$redirect_to = apply_filters( 'registration_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	login_header(__('Registration Form'), '<p class="message register">' . __('Register For This Site') . '</p>', $errors);?><form name="registerform" id="registerform" action="<?php echo site_url('wp-login.php?action=register', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr(stripslashes($user_login)); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('E-mail') ?><br />		<input type="text" name="user_email" id="user_email" class="input" value="<?php echo esc_attr(stripslashes($user_email)); ?>" size="25" tabindex="20" /></label>	</p><?php do_action('register_form'); ?>	<p id="reg_passmail"><?php _e('A password will be e-mailed to you.') ?></p>	<br class="clear" />	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Register'); ?>" tabindex="100" /></p></form><p id="nav"><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'login' :default:	$secure_cookie = '';	$interim_login = isset($_REQUEST['interim-login']);	// If the user wants ssl but the session is not ssl, force a secure cookie.	if ( !empty($_POST['log']) && !force_ssl_admin() ) {		$user_name = sanitize_user($_POST['log']);		if ( $user = get_userdatabylogin($user_name) ) {			if ( get_user_option('use_ssl', $user->ID) ) {				$secure_cookie = true;				force_ssl_admin(true);			}		}	}	if ( isset( $_REQUEST['redirect_to'] ) ) {		$redirect_to = $_REQUEST['redirect_to'];		// Redirect to https if user wants ssl		if ( $secure_cookie && false !== strpos($redirect_to, 'wp-admin') )			$redirect_to = preg_replace('|^http://|', 'https://', $redirect_to);	} else {		$redirect_to = admin_url();	}	$reauth = empty($_REQUEST['reauth']) ? false : true;	// If the user was redirected to a secure login form from a non-secure admin page, and secure login is required but secure admin is not, then don't use a secure	// cookie and redirect back to the referring non-secure admin page.  This allows logins to always be POSTed over SSL while allowing the user to choose visiting	// the admin via http or https.	if ( !$secure_cookie && is_ssl() && force_ssl_login() && !force_ssl_admin() && ( 0 !== strpos($redirect_to, 'https') ) && ( 0 === strpos($redirect_to, 'http') ) )		$secure_cookie = false;	$user = wp_signon('', $secure_cookie);	$redirect_to = apply_filters('login_redirect', $redirect_to, isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '', $user);	if ( !is_wp_error($user) && !$reauth ) {		if ( $interim_login ) {			$message = '<p class="message">' . __('You have logged in successfully.') . '</p>';			login_header( '', $message ); ?>			<script type="text/javascript">setTimeout( function(){window.close()}, 8000);</script>			<p class="alignright">			<input type="button" class="button-primary" value="<?php esc_attr_e('Close'); ?>" onclick="window.close()" /></p>			</div></body></html><?php		exit;		}		// If the user can't edit posts, send them to their profile.		if ( !$user->has_cap('edit_posts') && ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) )			$redirect_to = admin_url('profile.php');		wp_safe_redirect($redirect_to);		exit();	}	$errors = $user;	// Clear errors if loggedout is set.	if ( !empty($_GET['loggedout']) || $reauth )		$errors = new WP_Error();	// If cookies are disabled we can't log in even with a valid user+pass	if ( isset($_POST['testcookie']) && empty($_COOKIE[TEST_COOKIE]) )		$errors->add('test_cookie', __("<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href='http://www.google.com/cookies.html'>enable cookies</a> to use WordPress."));	// Some parts of this script use the main login form to display a message	if		( isset($_GET['loggedout']) && TRUE == $_GET['loggedout'] )		$errors->add('loggedout', __('You are now logged out.'), 'message');	elseif	( isset($_GET['registration']) && 'disabled' == $_GET['registration'] )		$errors->add('registerdisabled', __('User registration is currently not allowed.'));	elseif	( isset($_GET['checkemail']) && 'confirm' == $_GET['checkemail'] )		$errors->add('confirm', __('Check your e-mail for the confirmation link.'), 'message');	elseif	( isset($_GET['checkemail']) && 'newpass' == $_GET['checkemail'] )		$errors->add('newpass', __('Check your e-mail for your new password.'), 'message');	elseif	( isset($_GET['checkemail']) && 'registered' == $_GET['checkemail'] )		$errors->add('registered', __('Registration complete. Please check your e-mail.'), 'message');	elseif	( $interim_login )		$errors->add('expired', __('Your session has expired. Please log-in again.'), 'message');	// Clear any stale cookies.	if ( $reauth )		wp_clear_auth_cookie();	login_header(__('Log In'), '', $errors);	if ( isset($_POST['log']) )		$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr(stripslashes($_POST['log'])) : '';	$rememberme = ! empty( $_POST['rememberme'] );?><form name="loginform" id="loginform" action="<?php echo site_url('wp-login.php', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="log" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('Password') ?><br />		<input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="20" /></label>	</p><?php do_action('login_form'); ?>	<p class="forgetmenot"><label><input name="rememberme" type="checkbox" id="rememberme" value="forever" tabindex="90"<?php checked( $rememberme ); ?> /> <?php esc_attr_e('Remember Me'); ?></label></p>	<p class="submit">		<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Log In'); ?>" tabindex="100" /><?php	if ( $interim_login ) { ?>		<input type="hidden" name="interim-login" value="1" /><?php	} else { ?>		<input type="hidden" name="redirect_to" value="<?php echo esc_attr($redirect_to); ?>" /><?php 	} ?>		<input type="hidden" name="testcookie" value="1" />	</p></form><?php if ( !$interim_login ) { ?><p id="nav"><?php if ( isset($_GET['checkemail']) && in_array( $_GET['checkemail'], array('confirm', 'newpass') ) ) : ?><?php elseif ( get_option('users_can_register') ) : ?><a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><?php } else { ?></div><?php } ?><script type="text/javascript">function wp_attempt_focus(){setTimeout( function(){ try{<?php if ( $user_login || $interim_login ) { ?>d = document.getElementById('user_pass');<?php } else { ?>d = document.getElementById('user_login');<?php } ?>d.value = '';d.focus();} catch(e){}}, 200);}<?php if ( !$error ) { ?>wp_attempt_focus();<?php } ?>if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;} // end action switch?>
<?php/** * Sets up the default filters and actions for most * of the WordPress hooks. * * If you need to remove a default hook, this file will * give you the priority for which to use to remove the * hook. * * Not all of the default hooks are found in default-filters.php * * @package WordPress */// Strip, trim, kses, special chars for string savesforeach ( array( 'pre_term_name', 'pre_comment_author_name', 'pre_link_name', 'pre_link_target', 'pre_link_rel', 'pre_user_display_name', 'pre_user_first_name', 'pre_user_last_name', 'pre_user_nickname' ) as $filter ) {	add_filter( $filter, 'sanitize_text_field'  );	add_filter( $filter, 'wp_filter_kses'       );	add_filter( $filter, '_wp_specialchars', 30 );}// Strip, kses, special chars for string displayforeach ( array( 'term_name', 'comment_author_name', 'link_name', 'link_target', 'link_rel', 'user_display_name', 'user_first_name', 'user_last_name', 'user_nickname' ) as $filter ) {	add_filter( $filter, 'sanitize_text_field'  );	add_filter( $filter, 'wp_kses_data'       );	add_filter( $filter, '_wp_specialchars', 30 );}// Kses only for textarea savesforeach ( array( 'pre_term_description', 'pre_link_description', 'pre_link_notes', 'pre_user_description' ) as $filter ) {	add_filter( $filter, 'wp_filter_kses' );}// Kses only for textarea saves displaysforeach ( array( 'term_description', 'link_description', 'link_notes', 'user_description' ) as $filter ) {	add_filter( $filter, 'wp_kses_data' );}// Email savesforeach ( array( 'pre_comment_author_email', 'pre_user_email' ) as $filter ) {	add_filter( $filter, 'trim'           );	add_filter( $filter, 'sanitize_email' );	add_filter( $filter, 'wp_filter_kses' );}// Email displayforeach ( array( 'comment_author_email', 'user_email' ) as $filter ) {	add_filter( $filter, 'sanitize_email' );	add_filter( $filter, 'wp_kses_data' );}// Save URLforeach ( array( 'pre_comment_author_url', 'pre_user_url', 'pre_link_url', 'pre_link_image',	'pre_link_rss' ) as $filter ) {	add_filter( $filter, 'wp_strip_all_tags' );	add_filter( $filter, 'esc_url_raw'       );	add_filter( $filter, 'wp_filter_kses'    );}// Display URLforeach ( array( 'user_url', 'link_url', 'link_image', 'link_rss', 'comment_url' ) as $filter ) {	add_filter( $filter, 'wp_strip_all_tags' );	add_filter( $filter, 'esc_url'           );	add_filter( $filter, 'wp_kses_data'    );}// Slugsforeach ( array( 'pre_term_slug' ) as $filter ) {	add_filter( $filter, 'sanitize_title' );}// Keysforeach ( array( 'pre_post_type' ) as $filter ) {	add_filter( $filter, 'sanitize_user' );}// Places to balance tags on inputforeach ( array( 'content_save_pre', 'excerpt_save_pre', 'comment_save_pre', 'pre_comment_content' ) as $filter ) {	add_filter( $filter, 'balanceTags', 50 );}// Format strings for display.foreach ( array( 'comment_author', 'term_name', 'link_name', 'link_description', 'link_notes', 'bloginfo', 'wp_title', 'widget_title' ) as $filter ) {	add_filter( $filter, 'wptexturize'   );	add_filter( $filter, 'convert_chars' );	add_filter( $filter, 'esc_html'      );}// Format WordPressforeach ( array( 'the_content', 'the_title', 'comment_text' ) as $filter )	add_filter( $filter, 'capital_P_dangit' );// Format titlesforeach ( array( 'single_post_title', 'single_cat_title', 'single_tag_title', 'single_month_title', 'nav_menu_attr_title', 'nav_menu_description' ) as $filter ) {	add_filter( $filter, 'wptexturize' );	add_filter( $filter, 'strip_tags'  );}// Format text area for display.foreach ( array( 'term_description' ) as $filter ) {	add_filter( $filter, 'wptexturize'      );	add_filter( $filter, 'convert_chars'    );	add_filter( $filter, 'wpautop'          );	add_filter( $filter, 'shortcode_unautop');}// Format for RSSforeach ( array( 'term_name_rss' ) as $filter ) {	add_filter( $filter, 'convert_chars' );}// Display filtersadd_filter( 'the_title', 'wptexturize'   );add_filter( 'the_title', 'convert_chars' );add_filter( 'the_title', 'trim'          );add_filter( 'the_content', 'wptexturize'        );add_filter( 'the_content', 'convert_smilies'    );add_filter( 'the_content', 'convert_chars'      );add_filter( 'the_content', 'wpautop'            );add_filter( 'the_content', 'shortcode_unautop'  );add_filter( 'the_content', 'prepend_attachment' );add_filter( 'the_excerpt',     'wptexturize'      );add_filter( 'the_excerpt',     'convert_smilies'  );add_filter( 'the_excerpt',     'convert_chars'    );add_filter( 'the_excerpt',     'wpautop'          );add_filter( 'the_excerpt',     'shortcode_unautop');add_filter( 'get_the_excerpt', 'wp_trim_excerpt'  );add_filter( 'comment_text', 'wptexturize'            );add_filter( 'comment_text', 'convert_chars'          );add_filter( 'comment_text', 'make_clickable',      9 );add_filter( 'comment_text', 'force_balance_tags', 25 );add_filter( 'comment_text', 'convert_smilies',    20 );add_filter( 'comment_text', 'wpautop',            30 );add_filter( 'comment_excerpt', 'convert_chars' );add_filter( 'list_cats',         'wptexturize' );add_filter( 'single_post_title', 'wptexturize' );add_filter( 'wp_sprintf', 'wp_sprintf_l', 10, 2 );// RSS filtersadd_filter( 'the_title_rss',      'strip_tags'      );add_filter( 'the_title_rss',      'ent2ncr',      8 );add_filter( 'the_title_rss',      'esc_html'        );add_filter( 'the_content_rss',    'ent2ncr',      8 );add_filter( 'the_excerpt_rss',    'convert_chars'   );add_filter( 'the_excerpt_rss',    'ent2ncr',      8 );add_filter( 'comment_author_rss', 'ent2ncr',      8 );add_filter( 'comment_text_rss',   'ent2ncr',      8 );add_filter( 'comment_text_rss',   'esc_html'        );add_filter( 'bloginfo_rss',       'ent2ncr',      8 );add_filter( 'the_author',         'ent2ncr',      8 );// Misc filtersadd_filter( 'option_ping_sites',    'privacy_ping_filter'                 );add_filter( 'option_blog_charset',  '_wp_specialchars'                    ); // IMPORTANT: This must not be wp_specialchars() or esc_html() or it'll cause an infinite loopadd_filter( 'option_home',          '_config_wp_home'                     );add_filter( 'option_siteurl',       '_config_wp_siteurl'                  );add_filter( 'tiny_mce_before_init', '_mce_set_direction'                  );add_filter( 'pre_kses',             'wp_pre_kses_less_than'               );add_filter( 'sanitize_title',       'sanitize_title_with_dashes'          );add_action( 'check_comment_flood',  'check_comment_flood_db',       10, 3 );add_filter( 'comment_flood_filter', 'wp_throttle_comment_flood',    10, 3 );add_filter( 'pre_comment_content',  'wp_rel_nofollow',              15    );add_filter( 'comment_email',        'antispambot'                         );add_filter( 'option_tag_base',      '_wp_filter_taxonomy_base'            );add_filter( 'option_category_base', '_wp_filter_taxonomy_base'            );add_filter( 'the_posts',            '_close_comments_for_old_posts'       );add_filter( 'comments_open',        '_close_comments_for_old_post', 10, 2 );add_filter( 'pings_open',           '_close_comments_for_old_post', 10, 2 );add_filter( 'editable_slug',        'urldecode'                           );add_filter( 'nav_menu_meta_box_object', '_wp_nav_menu_meta_box_object'    );// Atom SSL supportadd_filter( 'atom_service_url','atom_service_url_filter' );// Actionsadd_action( 'wp_head',             'wp_enqueue_scripts',            1     );add_action( 'wp_head',             'feed_links',                    2     );add_action( 'wp_head',             'feed_links_extra',              3     );add_action( 'wp_head',             'rsd_link'                             );add_action( 'wp_head',             'wlwmanifest_link'                     );add_action( 'wp_head',             'index_rel_link'                       );add_action( 'wp_head',             'parent_post_rel_link',          10, 0 );add_action( 'wp_head',             'start_post_rel_link',           10, 0 );add_action( 'wp_head',             'adjacent_posts_rel_link_wp_head', 10, 0 );add_action( 'wp_head',             'locale_stylesheet'                    );add_action( 'publish_future_post', 'check_and_publish_future_post', 10, 1 );add_action( 'wp_head',             'noindex',                       1     );add_action( 'wp_head',             'wp_print_styles',               8     );add_action( 'wp_head',             'wp_print_head_scripts',         9     );add_action( 'wp_head',             'wp_generator'                         );add_action( 'wp_head',             'rel_canonical'                        );add_action( 'wp_footer',           'wp_print_footer_scripts'              );add_action( 'wp_head',             'wp_shortlink_wp_head',          10, 0 );add_action( 'template_redirect',   'wp_shortlink_header',           11, 0 );// Feed Generator Tagsforeach ( array( 'rss2_head', 'commentsrss2_head', 'rss_head', 'rdf_header', 'atom_head', 'comments_atom_head', 'opml_head', 'app_head' ) as $action ) {	add_action( $action, 'the_generator' );}// WP Cronif ( !defined( 'DOING_CRON' ) )	add_action( 'sanitize_comment_cookies', 'wp_cron' );// 2 Actions 2 Furiousadd_action( 'do_feed_rdf',                'do_feed_rdf',             10, 1 );add_action( 'do_feed_rss',                'do_feed_rss',             10, 1 );add_action( 'do_feed_rss2',               'do_feed_rss2',            10, 1 );add_action( 'do_feed_atom',               'do_feed_atom',            10, 1 );add_action( 'do_pings',                   'do_all_pings',            10, 1 );add_action( 'do_robots',                  'do_robots'                      );add_action( 'sanitize_comment_cookies',   'sanitize_comment_cookies'       );add_action( 'admin_print_scripts',        'print_head_scripts',      20    );add_action( 'admin_print_footer_scripts', 'print_footer_scripts',    20    );add_action( 'admin_print_styles',         'print_admin_styles',      20    );add_action( 'init',                       'smilies_init',             5    );add_action( 'plugins_loaded',             'wp_maybe_load_widgets',    0    );add_action( 'plugins_loaded',             'wp_maybe_load_embeds',     0    );add_action( 'shutdown',                   'wp_ob_end_flush_all',      1    );add_action( 'pre_post_update',            'wp_save_post_revision'          );add_action( 'publish_post',               '_publish_post_hook',       5, 1 );add_action( 'save_post',                  '_save_post_hook',          5, 2 );add_action( 'transition_post_status',     '_transition_post_status',  5, 3 );add_action( 'comment_form', 'wp_comment_form_unfiltered_html_nonce'        );add_action( 'wp_scheduled_delete',        'wp_scheduled_delete'            );// Navigation menu actionsadd_action( 'delete_post',                '_wp_delete_post_menu_item'      );add_action( 'delete_term',                '_wp_delete_tax_menu_item'       );add_action( 'transition_post_status', '_wp_auto_add_pages_to_menu',  10, 3 );// Post Thumbnail CSS class filteringadd_action( 'begin_fetch_post_thumbnail_html', '_wp_post_thumbnail_class_filter_add'    );add_action( 'end_fetch_post_thumbnail_html',   '_wp_post_thumbnail_class_filter_remove' );// Redirect Old Slugsadd_action( 'template_redirect', 'wp_old_slug_redirect'              );add_action( 'post_updated',      'wp_check_for_changed_slugs', 12, 3 );// Nonce check for Post Previewsadd_action( 'init', '_show_post_preview' );// Timezoneadd_filter( 'pre_option_gmt_offset','wp_timezone_override_offset' );// Admin Color Schemesadd_action( 'admin_init', 'register_admin_color_schemes', 1);add_action( 'admin_color_scheme_picker', 'admin_color_scheme_picker' );?>
<?php/** * TwentyTen functions and definitions * * Sets up the theme and provides some helper functions. Some helper functions * are used in the theme as custom template tags. Others are attached to action and * filter hooks in WordPress to change core functionality. * * The first function, twentyten_setup(), sets up the theme by registering support * for various features in WordPress, such as post thumbnails, navigation menus, and the like. * * When using a child theme (see http://codex.wordpress.org/Theme_Development and * http://codex.wordpress.org/Child_Themes), you can override certain functions * (those wrapped in a function_exists() call) by defining them first in your child theme's * functions.php file. The child theme's functions.php file is included before the parent * theme's file, so the child theme functions would be used. * * Functions that are not pluggable (not wrapped in function_exists()) are instead attached * to a filter or action hook. The hook can be removed by using remove_action() or * remove_filter() and you can attach your own function to the hook. * * We can remove the parent theme's hook only after it is attached, which means we need to * wait until setting up the child theme: * * <code> * add_action( 'after_setup_theme', 'my_child_theme_setup' ); * function my_child_theme_setup() { *     // We are providing our own filter for excerpt_length (or using the unfiltered value) *     remove_filter( 'excerpt_length', 'twentyten_excerpt_length' ); *     ... * } * </code> * * For more information on hooks, actions, and filters, see http://codex.wordpress.org/Plugin_API. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 *//** * Set the content width based on the theme's design and stylesheet. * * Used to set the width of images and content. Should be equal to the width the theme * is designed for, generally via the style.css stylesheet. */if ( ! isset( $content_width ) )	$content_width = 640;/** Tell WordPress to run twentyten_setup() when the 'after_setup_theme' hook is run. */add_action( 'after_setup_theme', 'twentyten_setup' );if ( ! function_exists( 'twentyten_setup' ) ):/** * Sets up theme defaults and registers support for various WordPress features. * * Note that this function is hooked into the after_setup_theme hook, which runs * before the init hook. The init hook is too late for some features, such as indicating * support post thumbnails. * * To override twentyten_setup() in a child theme, add your own twentyten_setup to your child theme's * functions.php file. * * @uses add_theme_support() To add support for post thumbnails and automatic feed links. * @uses register_nav_menus() To add support for navigation menus. * @uses add_custom_background() To add support for a custom background. * @uses add_editor_style() To style the visual editor. * @uses load_theme_textdomain() For translation/localization support. * @uses add_custom_image_header() To add support for a custom header. * @uses register_default_headers() To register the default custom header images provided with the theme. * @uses set_post_thumbnail_size() To set a custom post thumbnail size. * * @since Twenty Ten 1.0 */function twentyten_setup() {	// This theme styles the visual editor with editor-style.css to match the theme style.	add_editor_style();	// This theme uses post thumbnails	add_theme_support( 'post-thumbnails' );	// Add default posts and comments RSS feed links to head	add_theme_support( 'automatic-feed-links' );	// Make theme available for translation	// Translations can be filed in the /languages/ directory	load_theme_textdomain( 'twentyten', TEMPLATEPATH . '/languages' );	$locale = get_locale();	$locale_file = TEMPLATEPATH . "/languages/$locale.php";	if ( is_readable( $locale_file ) )		require_once( $locale_file );	// This theme uses wp_nav_menu() in one location.	register_nav_menus( array(		'primary' => __( 'Primary Navigation', 'twentyten' ),	) );	// This theme allows users to set a custom background	add_custom_background();	// Your changeable header business starts here	define( 'HEADER_TEXTCOLOR', '' );	// No CSS, just IMG call. The %s is a placeholder for the theme template directory URI.	define( 'HEADER_IMAGE', '%s/images/headers/path.jpg' );	// The height and width of your custom header. You can hook into the theme's own filters to change these values.	// Add a filter to twentyten_header_image_width and twentyten_header_image_height to change these values.	define( 'HEADER_IMAGE_WIDTH', apply_filters( 'twentyten_header_image_width', 940 ) );	define( 'HEADER_IMAGE_HEIGHT', apply_filters( 'twentyten_header_image_height', 198 ) );	// We'll be using post thumbnails for custom header images on posts and pages.	// We want them to be 940 pixels wide by 198 pixels tall.	// Larger images will be auto-cropped to fit, smaller ones will be ignored. See header.php.	set_post_thumbnail_size( HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT, true );	// Don't support text inside the header image.	define( 'NO_HEADER_TEXT', true );	// Add a way for the custom header to be styled in the admin panel that controls	// custom headers. See twentyten_admin_header_style(), below.	add_custom_image_header( '', 'twentyten_admin_header_style' );	// ... and thus ends the changeable header business.	// Default custom headers packaged with the theme. %s is a placeholder for the theme template directory URI.	register_default_headers( array(		'berries' => array(			'url' => '%s/images/headers/berries.jpg',			'thumbnail_url' => '%s/images/headers/berries-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Berries', 'twentyten' )		),		'cherryblossom' => array(			'url' => '%s/images/headers/cherryblossoms.jpg',			'thumbnail_url' => '%s/images/headers/cherryblossoms-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Cherry Blossoms', 'twentyten' )		),		'concave' => array(			'url' => '%s/images/headers/concave.jpg',			'thumbnail_url' => '%s/images/headers/concave-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Concave', 'twentyten' )		),		'fern' => array(			'url' => '%s/images/headers/fern.jpg',			'thumbnail_url' => '%s/images/headers/fern-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Fern', 'twentyten' )		),		'forestfloor' => array(			'url' => '%s/images/headers/forestfloor.jpg',			'thumbnail_url' => '%s/images/headers/forestfloor-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Forest Floor', 'twentyten' )		),		'inkwell' => array(			'url' => '%s/images/headers/inkwell.jpg',			'thumbnail_url' => '%s/images/headers/inkwell-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Inkwell', 'twentyten' )		),		'path' => array(			'url' => '%s/images/headers/path.jpg',			'thumbnail_url' => '%s/images/headers/path-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Path', 'twentyten' )		),		'sunset' => array(			'url' => '%s/images/headers/sunset.jpg',			'thumbnail_url' => '%s/images/headers/sunset-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Sunset', 'twentyten' )		)	) );}endif;if ( ! function_exists( 'twentyten_admin_header_style' ) ) :/** * Styles the header image displayed on the Appearance > Header admin panel. * * Referenced via add_custom_image_header() in twentyten_setup(). * * @since Twenty Ten 1.0 */function twentyten_admin_header_style() {?><style type="text/css">/* Shows the same border as on front end */#headimg {	border-bottom: 1px solid #000;	border-top: 4px solid #000;}/* If NO_HEADER_TEXT is false, you would style the text with these selectors:	#headimg #name { }	#headimg #desc { }*/</style><?php}endif;/** * Makes some changes to the <title> tag, by filtering the output of wp_title(). * * If we have a site description and we're viewing the home page or a blog posts * page (when using a static front page), then we will add the site description. * * If we're viewing a search result, then we're going to recreate the title entirely. * We're going to add page numbers to all titles as well, to the middle of a search * result title and the end of all other titles. * * The site title also gets added to all titles. * * @since Twenty Ten 1.0 * * @param string $title Title generated by wp_title() * @param string $separator The separator passed to wp_title(). Twenty Ten uses a * 	vertical bar, "|", as a separator in header.php. * @return string The new title, ready for the <title> tag. */function twentyten_filter_wp_title( $title, $separator ) {	// Don't affect wp_title() calls in feeds.	if ( is_feed() )		return $title;	// The $paged global variable contains the page number of a listing of posts.	// The $page global variable contains the page number of a single post that is paged.	// We'll display whichever one applies, if we're not looking at the first page.	global $paged, $page;	if ( is_search() ) {		// If we're a search, let's start over:		$title = sprintf( __( 'Search results for %s', 'twentyten' ), '"' . get_search_query() . '"' );		// Add a page number if we're on page 2 or more:		if ( $paged >= 2 )			$title .= " $separator " . sprintf( __( 'Page %s', 'twentyten' ), $paged );		// Add the site name to the end:		$title .= " $separator " . get_bloginfo( 'name', 'display' );		// We're done. Let's send the new title back to wp_title():		return $title;	}	// Otherwise, let's start by adding the site name to the end:	$title .= get_bloginfo( 'name', 'display' );	// If we have a site description and we're on the home/front page, add the description:	$site_description = get_bloginfo( 'description', 'display' );	if ( $site_description && ( is_home() || is_front_page() ) )		$title .= " $separator " . $site_description;	// Add a page number if necessary:	if ( $paged >= 2 || $page >= 2 )		$title .= " $separator " . sprintf( __( 'Page %s', 'twentyten' ), max( $paged, $page ) );	// Return the new title to wp_title():	return $title;}add_filter( 'wp_title', 'twentyten_filter_wp_title', 10, 2 );/** * Get our wp_nav_menu() fallback, wp_page_menu(), to show a home link. * * To override this in a child theme, remove the filter and optionally add * your own function tied to the wp_page_menu_args filter hook. * * @since Twenty Ten 1.0 */function twentyten_page_menu_args( $args ) {	$args['show_home'] = true;	return $args;}add_filter( 'wp_page_menu_args', 'twentyten_page_menu_args' );/** * Sets the post excerpt length to 40 characters. * * To override this length in a child theme, remove the filter and add your own * function tied to the excerpt_length filter hook. * * @since Twenty Ten 1.0 * @return int */function twentyten_excerpt_length( $length ) {	return 40;}add_filter( 'excerpt_length', 'twentyten_excerpt_length' );/** * Returns a "Continue Reading" link for excerpts * * @since Twenty Ten 1.0 * @return string "Continue Reading" link */function twentyten_continue_reading_link() {	return ' <a href="'. get_permalink() . '">' . __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) . '</a>';}/** * Replaces "[...]" (appended to automatically generated excerpts) with an ellipsis and twentyten_continue_reading_link(). * * To override this in a child theme, remove the filter and add your own * function tied to the excerpt_more filter hook. * * @since Twenty Ten 1.0 * @return string An ellipsis */function twentyten_auto_excerpt_more( $more ) {	return ' &hellip;' . twentyten_continue_reading_link();}add_filter( 'excerpt_more', 'twentyten_auto_excerpt_more' );/** * Adds a pretty "Continue Reading" link to custom post excerpts. * * To override this link in a child theme, remove the filter and add your own * function tied to the get_the_excerpt filter hook. * * @since Twenty Ten 1.0 * @return string Excerpt with a pretty "Continue Reading" link */function twentyten_custom_excerpt_more( $output ) {	if ( has_excerpt() && ! is_attachment() ) {		$output .= twentyten_continue_reading_link();	}	return $output;}add_filter( 'get_the_excerpt', 'twentyten_custom_excerpt_more' );/** * Remove inline styles printed when the gallery shortcode is used. * * Galleries are styled by the theme in Twenty Ten's style.css. * * @since Twenty Ten 1.0 * @return string The gallery style filter, with the styles themselves removed. */function twentyten_remove_gallery_css( $css ) {	return preg_replace( "#<style type='text/css'>(.*?)</style>#s", '', $css );}add_filter( 'gallery_style', 'twentyten_remove_gallery_css' );if ( ! function_exists( 'twentyten_comment' ) ) :/** * Template for comments and pingbacks. * * To override this walker in a child theme without modifying the comments template * simply create your own twentyten_comment(), and that function will be used instead. * * Used as a callback by wp_list_comments() for displaying the comments. * * @since Twenty Ten 1.0 */function twentyten_comment( $comment, $args, $depth ) {	$GLOBALS['comment'] = $comment;	switch ( $comment->comment_type ) :		case '' :	?>	<li <?php comment_class(); ?> id="li-comment-<?php comment_ID(); ?>">		<div id="comment-<?php comment_ID(); ?>">		<div class="comment-author vcard">			<?php echo get_avatar( $comment, 40 ); ?>			<?php printf( __( '%s <span class="says">says:</span>', 'twentyten' ), sprintf( '<cite class="fn">%s</cite>', get_comment_author_link() ) ); ?>		</div><!-- .comment-author .vcard -->		<?php if ( $comment->comment_approved == '0' ) : ?>			<em><?php _e( 'Your comment is awaiting moderation.', 'twentyten' ); ?></em>			<br />		<?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo esc_url( get_comment_link( $comment->comment_ID ) ); ?>">			<?php				/* translators: 1: date, 2: time */				printf( __( '%1$s at %2$s', 'twentyten' ), get_comment_date(),  get_comment_time() ); ?></a><?php edit_comment_link( __( '(Edit)', 'twentyten' ), ' ' );			?>		</div><!-- .comment-meta .commentmetadata -->		<div class="comment-body"><?php comment_text(); ?></div>		<div class="reply">			<?php comment_reply_link( array_merge( $args, array( 'depth' => $depth, 'max_depth' => $args['max_depth'] ) ) ); ?>		</div><!-- .reply -->	</div><!-- #comment-##  -->	<?php			break;		case 'pingback'  :		case 'trackback' :	?>	<li class="post pingback">		<p><?php _e( 'Pingback:', 'twentyten' ); ?> <?php comment_author_link(); ?><?php edit_comment_link( __('(Edit)', 'twentyten'), ' ' ); ?></p>	<?php			break;	endswitch;}endif;/** * Register widgetized areas, including two sidebars and four widget-ready columns in the footer. * * To override twentyten_widgets_init() in a child theme, remove the action hook and add your own * function tied to the init hook. * * @since Twenty Ten 1.0 * @uses register_sidebar */function twentyten_widgets_init() {	// Area 1, located at the top of the sidebar.	register_sidebar( array(		'name' => __( 'Primary Widget Area', 'twentyten' ),		'id' => 'primary-widget-area',		'description' => __( 'The primary widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 2, located below the Primary Widget Area in the sidebar. Empty by default.	register_sidebar( array(		'name' => __( 'Secondary Widget Area', 'twentyten' ),		'id' => 'secondary-widget-area',		'description' => __( 'The secondary widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 3, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'First Footer Widget Area', 'twentyten' ),		'id' => 'first-footer-widget-area',		'description' => __( 'The first footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 4, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Second Footer Widget Area', 'twentyten' ),		'id' => 'second-footer-widget-area',		'description' => __( 'The second footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 5, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Third Footer Widget Area', 'twentyten' ),		'id' => 'third-footer-widget-area',		'description' => __( 'The third footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 6, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Fourth Footer Widget Area', 'twentyten' ),		'id' => 'fourth-footer-widget-area',		'description' => __( 'The fourth footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );}/** Register sidebars by running twentyten_widgets_init() on the widgets_init hook. */add_action( 'widgets_init', 'twentyten_widgets_init' );/** * Removes the default styles that are packaged with the Recent Comments widget. * * To override this in a child theme, remove the filter and optionally add your own * function tied to the widgets_init action hook. * * @since Twenty Ten 1.0 */function twentyten_remove_recent_comments_style() {	global $wp_widget_factory;	remove_action( 'wp_head', array( $wp_widget_factory->widgets['WP_Widget_Recent_Comments'], 'recent_comments_style' ) );}add_action( 'widgets_init', 'twentyten_remove_recent_comments_style' );if ( ! function_exists( 'twentyten_posted_on' ) ) :/** * Prints HTML with meta information for the current postdate/time and author. * * @since Twenty Ten 1.0 */function twentyten_posted_on() {	printf( __( '<span class="%1$s">Posted on</span> %2$s <span class="meta-sep">by</span> %3$s', 'twentyten' ),		'meta-prep meta-prep-author',		sprintf( '<a href="%1$s" title="%2$s" rel="bookmark"><span class="entry-date">%3$s</span></a>',			get_permalink(),			esc_attr( get_the_time() ),			get_the_date()		),		sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',			get_author_posts_url( get_the_author_meta( 'ID' ) ),			sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),			get_the_author()		)	);}endif;if ( ! function_exists( 'twentyten_posted_in' ) ) :/** * Prints HTML with meta information for the current post (category, tags and permalink). * * @since Twenty Ten 1.0 */function twentyten_posted_in() {	// Retrieves tag list of current post, separated by commas.	$tag_list = get_the_tag_list( '', ', ' );	if ( $tag_list ) {		$posted_in = __( 'This entry was posted in %1$s and tagged %2$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	} elseif ( is_object_in_taxonomy( get_post_type(), 'category' ) ) {		$posted_in = __( 'This entry was posted in %1$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	} else {		$posted_in = __( 'Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	}	// Prints the string, replacing the placeholders.	printf(		$posted_in,		get_the_category_list( ', ' ),		$tag_list,		get_permalink(),		the_title_attribute( 'echo=0' )	);}endif;
<?php/** * These functions are needed to load WordPress. * * @package WordPress *//** * Turn register globals off. * * @access private * @since 2.1.0 * @return null Will return null if register_globals PHP directive was disabled */function wp_unregister_GLOBALS() {	if ( !ini_get( 'register_globals' ) )		return;	if ( isset( $_REQUEST['GLOBALS'] ) )		die( /*WP_I18N_GLOBALS_OVERWRITE*/'GLOBALS overwrite attempt detected'/*/WP_I18N_GLOBALS_OVERWRITE*/ );	// Variables that shouldn't be unset	$no_unset = array( 'GLOBALS', '_GET', '_POST', '_COOKIE', '_REQUEST', '_SERVER', '_ENV', '_FILES', 'table_prefix' );	$input = array_merge( $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_FILES, isset( $_SESSION ) && is_array( $_SESSION ) ? $_SESSION : array() );	foreach ( $input as $k => $v )		if ( !in_array( $k, $no_unset ) && isset( $GLOBALS[$k] ) ) {			$GLOBALS[$k] = null;			unset( $GLOBALS[$k] );		}}/** * Fix $_SERVER variables for various setups. * * @access private * @since 3.0.0 */function wp_fix_server_vars() {	global $PHP_SELF;	$default_server_values = array(		'SERVER_SOFTWARE' => '',		'REQUEST_URI' => '',	);	$_SERVER = array_merge( $default_server_values, $_SERVER );	// Fix for IIS when running with PHP ISAPI	if ( empty( $_SERVER['REQUEST_URI'] ) || ( php_sapi_name() != 'cgi-fcgi' && preg_match( '/^Microsoft-IIS\//', $_SERVER['SERVER_SOFTWARE'] ) ) ) {		// IIS Mod-Rewrite		if ( isset( $_SERVER['HTTP_X_ORIGINAL_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_ORIGINAL_URL'];		}		// IIS Isapi_Rewrite		else if ( isset( $_SERVER['HTTP_X_REWRITE_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL'];		} else {			// Use ORIG_PATH_INFO if there is no PATH_INFO			if ( !isset( $_SERVER['PATH_INFO'] ) && isset( $_SERVER['ORIG_PATH_INFO'] ) )				$_SERVER['PATH_INFO'] = $_SERVER['ORIG_PATH_INFO'];			// Some IIS + PHP configurations puts the script-name in the path-info (No need to append it twice)			if ( isset( $_SERVER['PATH_INFO'] ) ) {				if ( $_SERVER['PATH_INFO'] == $_SERVER['SCRIPT_NAME'] )					$_SERVER['REQUEST_URI'] = $_SERVER['PATH_INFO'];				else					$_SERVER['REQUEST_URI'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];			}			// Append the query string if it exists and isn't null			if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {				$_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];			}		}	}	// Fix for PHP as CGI hosts that set SCRIPT_FILENAME to something ending in php.cgi for all requests	if ( isset( $_SERVER['SCRIPT_FILENAME'] ) && ( strpos( $_SERVER['SCRIPT_FILENAME'], 'php.cgi' ) == strlen( $_SERVER['SCRIPT_FILENAME'] ) - 7 ) )		$_SERVER['SCRIPT_FILENAME'] = $_SERVER['PATH_TRANSLATED'];	// Fix for Dreamhost and other PHP as CGI hosts	if ( strpos( $_SERVER['SCRIPT_NAME'], 'php.cgi' ) !== false )		unset( $_SERVER['PATH_INFO'] );	// Fix empty PHP_SELF	$PHP_SELF = $_SERVER['PHP_SELF'];	if ( empty( $PHP_SELF ) )		$_SERVER['PHP_SELF'] = $PHP_SELF = preg_replace( '/(\?.*)?$/', '', $_SERVER["REQUEST_URI"] );}/** * Check for the required PHP version, and the MySQL extension or a database drop-in. * * Dies if requirements are not met. * * @access private * @since 3.0.0 */function wp_check_php_mysql_versions() {	// we can probably extend this function to check if wp_die() exists then use translated strings, and then use it in install.php etc.	global $required_php_version, $wp_version;	$php_version = phpversion();	if ( version_compare( $required_php_version, $php_version, '>' ) )		die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress %2$s requires at least %3$s.'/*/WP_I18N_OLD_PHP*/, $php_version, $wp_version, $required_php_version ) );	if ( !extension_loaded( 'mysql' ) && !file_exists( WP_CONTENT_DIR . '/db.php' ) )		die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );}/** * Don't load all of WordPress when handling a favicon.ico request. * Instead, send the headers for a zero-length favicon and bail. * * @since 3.0.0 */function wp_favicon_request() {	if ( '/favicon.ico' == $_SERVER['REQUEST_URI'] ) {		header('Content-Type: image/vnd.microsoft.icon');		header('Content-Length: 0');		exit;	}}/** * Dies with a maintenance message when conditions are met. * * Checks for a file in the WordPress root directory named ".maintenance". * This file will contain the variable $upgrading, set to the time the file * was created. If the file was created less than 10 minutes ago, WordPress * enters maintenance mode and displays a message. * * The default message can be replaced by using a drop-in (maintenance.php in * the wp-content directory). * * @access private * @since 3.0.0 */function wp_maintenance() {	if ( !file_exists( ABSPATH . '.maintenance' ) || defined( 'WP_INSTALLING' ) )		return;	global $upgrading;	include( ABSPATH . '.maintenance' );	// If the $upgrading timestamp is older than 10 minutes, don't die.	if ( ( time() - $upgrading ) >= 600 )		return;	if ( file_exists( WP_CONTENT_DIR . '/maintenance.php' ) ) {		require_once( WP_CONTENT_DIR . '/maintenance.php' );		die();	}	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	header( "$protocol 503 Service Unavailable", true, 503 );	header( 'Content-Type: text/html; charset=utf-8' );	header( 'Retry-After: 600' );?>	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">	<html xmlns="http://www.w3.org/1999/xhtml">	<head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />		<title><?php echo /*WP_I18N_MAINTENANCE*/'Maintenance'/*/WP_I18N_MAINTENANCE*/; ?></title>	</head>	<body>		<h1><?php echo /*WP_I18N_MAINT_MSG*/'Briefly unavailable for scheduled maintenance. Check back in a minute.'/*/WP_I18N_MAINT_MSG*/; ?></h1>	</body>	</html><?php	die();}/** * PHP 4 standard microtime start capture. * * @access private * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when function is called. * @return bool Always returns true. */function timer_start() {	global $timestart;	$mtime = explode( ' ', microtime() );	$timestart = $mtime[1] + $mtime[0];	return true;}/** * Return and/or display the time from the page start to when function is called. * * You can get the results and print them by doing: * <code> * $nTimePageTookToExecute = timer_stop(); * echo $nTimePageTookToExecute; * </code> * * Or instead, you can do: * <code> * timer_stop(1); * </code> * which will do what the above does. If you need the result, you can assign it to a variable, but * most cases, you only need to echo it. * * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when timer_start() is called * @global int $timeend  Seconds and Microseconds added together from when function is called * * @param int $display Use '0' or null to not echo anything and 1 to echo the total time * @param int $precision The amount of digits from the right of the decimal to display. Default is 3. * @return float The "second.microsecond" finished time calculation */function timer_stop( $display = 0, $precision = 3 ) { // if called like timer_stop(1), will echo $timetotal	global $timestart, $timeend;	$mtime = microtime();	$mtime = explode( ' ', $mtime );	$timeend = $mtime[1] + $mtime[0];	$timetotal = $timeend - $timestart;	$r = ( function_exists( 'number_format_i18n' ) ) ? number_format_i18n( $timetotal, $precision ) : number_format( $timetotal, $precision );	if ( $display )		echo $r;	return $r;}/** * Sets PHP error handling and handles WordPress debug mode. * * Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be * defined in wp-config.php. Example: <code> define( 'WP_DEBUG', true ); </code> * * WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true. * WP_DEBUG defaults to false. * * When WP_DEBUG is true, all PHP notices are reported. WordPress will also display * notices, including one when a deprecated WordPress function, function argument, * or file is used. Deprecated code may be removed from a later version. * * It is strongly recommended that plugin and theme developers use WP_DEBUG in their * development environments. * * When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed. * WP_DEBUG_DISPLAY defaults to true. Defining it as false prevents WordPress from * changing the global configuration setting. (Defining WP_DEBUG_DISPLAY as false * will never force errors to be hidden.) * * When WP_DEBUG_LOG is true, errors will be logged to wp-content/debug.log. * WP_DEBUG_LOG defaults to false. * * @access private * @since 3.0.0 */function wp_debug_mode() {	if ( WP_DEBUG ) {		if ( defined( 'E_DEPRECATED' ) )			error_reporting( E_ALL & ~E_DEPRECATED & ~E_STRICT );		else			error_reporting( E_ALL );		if ( WP_DEBUG_DISPLAY )			ini_set( 'display_errors', 1 );		if ( WP_DEBUG_LOG ) {			ini_set( 'log_errors', 1 );			ini_set( 'error_log', WP_CONTENT_DIR . '/debug.log' );		}	} else {		if ( defined( 'E_RECOVERABLE_ERROR' ) )			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );		else			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING );	}}/** * Sets the location of the language directory. * * To set directory manually, define <code>WP_LANG_DIR</code> in wp-config.php. * * First looks for language folder in WP_CONTENT_DIR and uses that folder if it * exists. Or it uses the "languages" folder in WPINC. * * The WP_LANG_DIR constant was introduced in 2.1.0. * * @access private * @since 3.0.0 */function wp_set_lang_dir() {	if ( !defined( 'WP_LANG_DIR' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/languages' ) && @is_dir( WP_CONTENT_DIR . '/languages' ) ) {			define( 'WP_LANG_DIR', WP_CONTENT_DIR . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old static relative path maintained for limited backwards compatibility - won't work in some cases				define( 'LANGDIR', 'wp-content/languages' );			}		} else {			define( 'WP_LANG_DIR', ABSPATH . WPINC . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old relative path maintained for backwards compatibility				define( 'LANGDIR', WPINC . '/languages' );			}		}	}}/** * Sets the database table prefix and the format specifiers for database table columns. * * Columns not listed here default to %s. * * @see wpdb::$field_types Since 2.8.0 * @see wpdb::prepare() * @see wpdb::insert() * @see wpdb::update() * @see wpdb::set_prefix() * * @access private * @since 3.0.0 */function wp_set_wpdb_vars() {	global $wpdb, $table_prefix;	if ( !empty( $wpdb->error ) )		dead_db();	$wpdb->field_types = array( 'post_author' => '%d', 'post_parent' => '%d', 'menu_order' => '%d', 'term_id' => '%d', 'term_group' => '%d', 'term_taxonomy_id' => '%d',		'parent' => '%d', 'count' => '%d','object_id' => '%d', 'term_order' => '%d', 'ID' => '%d', 'commment_ID' => '%d', 'comment_post_ID' => '%d', 'comment_parent' => '%d',		'user_id' => '%d', 'link_id' => '%d', 'link_owner' => '%d', 'link_rating' => '%d', 'option_id' => '%d', 'blog_id' => '%d', 'meta_id' => '%d', 'post_id' => '%d',		'user_status' => '%d', 'umeta_id' => '%d', 'comment_karma' => '%d', 'comment_count' => '%d',		// multisite:		'active' => '%d', 'cat_id' => '%d', 'deleted' => '%d', 'lang_id' => '%d', 'mature' => '%d', 'public' => '%d', 'site_id' => '%d', 'spam' => '%d',	);	$prefix = $wpdb->set_prefix( $table_prefix );	if ( is_wp_error( $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: <code>$table_prefix</code> in <code>wp-config.php</code> can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );}/** * Starts the WordPress object cache. * * If an object-cache.php file exists in the wp-content directory, * it uses that drop-in as an external object cache. * * @access private * @since 3.0.0 */function wp_start_object_cache() {	global $_wp_using_ext_object_cache;	$first_init = false; 	if ( ! function_exists( 'wp_cache_init' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {			require_once ( WP_CONTENT_DIR . '/object-cache.php' );			$_wp_using_ext_object_cache = true;		} else {			require_once ( ABSPATH . WPINC . '/cache.php' );			$_wp_using_ext_object_cache = false;		}		$first_init = true;	} else if ( !$_wp_using_ext_object_cache && file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {		// Sometimes advanced-cache.php can load object-cache.php before it is loaded here.		// This breaks the function_exists check above and can result in $_wp_using_ext_object_cache		// being set incorrectly.  Double check if an external cache exists.		$_wp_using_ext_object_cache = true;	}	// If cache supports reset, reset instead of init if already initialized.	// Reset signals to the cache that global IDs have changed and it may need to update keys	// and cleanup caches.	if ( !$first_init && function_exists('wp_cache_reset') )		wp_cache_reset();	else		wp_cache_init();	if ( function_exists( 'wp_cache_add_global_groups' ) ) {		wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-transient', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'global-posts' ) );		wp_cache_add_non_persistent_groups( array( 'comment', 'counts', 'plugins' ) );	}}/** * Redirects to the installer if WordPress is not installed. * * Dies with an error message when multisite is enabled. * * @access private * @since 3.0.0 */function wp_not_installed() {	if ( is_multisite() ) {		if ( ! is_blog_installed() && ! defined( 'WP_INSTALLING' ) )			wp_die( __( 'The site you have requested is not installed properly. Please contact the system administrator.' ) );	} elseif ( ! is_blog_installed() && false === strpos( $_SERVER['PHP_SELF'], 'install.php' ) && !defined( 'WP_INSTALLING' ) ) {		if ( defined( 'WP_SITEURL' ) )			$link = WP_SITEURL . '/wp-admin/install.php';		elseif ( false !== strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) )			$link = preg_replace( '|/wp-admin/?.*?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		else			$link = preg_replace( '|/[^/]+?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		require( ABSPATH . WPINC . '/kses.php' );		require( ABSPATH . WPINC . '/pluggable.php' );		require( ABSPATH . WPINC . '/formatting.php' );		wp_redirect( $link );		die();	}}/** * Returns array of must-use plugin files to be included in global scope. * * The default directory is wp-content/mu-plugins. To change the default directory * manually, define <code>WPMU_PLUGIN_DIR</code> and <code>WPMU_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_mu_plugins() {	$mu_plugins = array();	if ( !is_dir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	if ( ! $dh = opendir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	while ( ( $plugin = readdir( $dh ) ) !== false ) {		if ( substr( $plugin, -4 ) == '.php' )			$mu_plugins[] = WPMU_PLUGIN_DIR . '/' . $plugin;	}	closedir( $dh );	sort( $mu_plugins );	return $mu_plugins;}/** * Returns array of plugin files to be included in global scope. * * The default directory is wp-content/plugins. To change the default directory * manually, define <code>WP_PLUGIN_DIR</code> and <code>WP_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_active_and_valid_plugins() {	$plugins = array();	$active_plugins = (array) get_option( 'active_plugins', array() );	// Get active network plugins	if ( is_multisite() ) {		$active_sitewide_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		if ( !empty($active_sitewide_plugins) ) {			$active_plugins = array_merge( $active_plugins, array_keys( $active_sitewide_plugins ) );			sort( $active_plugins );		}	}	// Check for hacks file if the option is enabled	if ( get_option( 'hack_file' ) && file_exists( ABSPATH . 'my-hacks.php' ) ) {		_deprecated_file( 'my-hacks.php', '1.5' );		array_unshift( $plugins, ABSPATH . 'my-hacks.php' );	}	if ( empty( $active_plugins ) || defined( 'WP_INSTALLING' ) )		return $plugins;	foreach ( $active_plugins as $plugin ) {		if ( ! validate_file( $plugin ) // $plugin must validate as file			&& '.php' == substr( $plugin, -4 ) // $plugin must end with '.php'			&& file_exists( WP_PLUGIN_DIR . '/' . $plugin ) // $plugin must exist			)		$plugins[] = WP_PLUGIN_DIR . '/' . $plugin;	}	return $plugins;}/** * Sets internal encoding using mb_internal_encoding(). * * In most cases the default internal encoding is latin1, which is of no use, * since we want to use the mb_ functions for utf-8 strings. * * @access private * @since 3.0.0 */function wp_set_internal_encoding() {	if ( function_exists( 'mb_internal_encoding' ) ) {		if ( !@mb_internal_encoding( get_option( 'blog_charset' ) ) )			mb_internal_encoding( 'UTF-8' );	}}/** * Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER. * * Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE, * or $_ENV are needed, use those superglobals directly. * * @access private * @since 3.0.0 */function wp_magic_quotes() {	// If already slashed, strip.	if ( get_magic_quotes_gpc() ) {		$_GET    = stripslashes_deep( $_GET    );		$_POST   = stripslashes_deep( $_POST   );		$_COOKIE = stripslashes_deep( $_COOKIE );	}	// Escape with wpdb.	$_GET    = add_magic_quotes( $_GET    );	$_POST   = add_magic_quotes( $_POST   );	$_COOKIE = add_magic_quotes( $_COOKIE );	$_SERVER = add_magic_quotes( $_SERVER );	// Force REQUEST to be GET + POST.	$_REQUEST = array_merge( $_GET, $_POST );}/** * Runs just before PHP shuts down execution. * * @access private * @since 1.2.0 */function shutdown_action_hook() {	do_action( 'shutdown' );	wp_cache_close();}/** * Copy an object. * * Returns a cloned copy of an object. * * @since 2.7.0 * * @param object $object The object to clone * @return object The cloned object */function wp_clone( $object ) {	static $can_clone;	if ( !isset( $can_clone ) )		$can_clone = version_compare( phpversion(), '5.0', '>=' );	return $can_clone ? clone( $object ) : $object;}/** * Whether the current request is in WordPress admin Panel * * Does not inform on whether the user is an admin! Use capability checks to * tell if the user should be accessing a section or not. * * @since 1.5.1 * * @return bool True if inside WordPress administration pages. */function is_admin() {	if ( defined( 'WP_ADMIN' ) )		return WP_ADMIN;	return false;}/** * Whether Multisite support is enabled * * @since 3.0.0 * * @return bool True if multisite is enabled, false otherwise. */function is_multisite() {	if ( defined( 'MULTISITE' ) )		return MULTISITE;	if ( defined( 'VHOST' ) || defined( 'SUNRISE' ) )		return true;	return false;}?>
<?php/** * Multi-site WordPress API * * @package WordPress * @subpackage Multisite * @since 3.0.0 */function get_sitestats() {	global $wpdb;	$stats['blogs'] = get_blog_count();	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( "SELECT COUNT(ID) FROM $wpdb->users" );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	} else {		$count = get_site_option( 'user_count' );	}	$stats['users'] = $count;	return $stats;}function get_admin_users_for_domain( $sitedomain = '', $path = '' ) {	global $wpdb;	if ( ! $sitedomain )		$site_id = $wpdb->siteid;	else		$site_id = $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE domain = %s AND path = %s", $sitedomain, $path ) );	if ( $site_id )		return $wpdb->get_results( $wpdb->prepare( "SELECT u.ID, u.user_login, u.user_pass FROM $wpdb->users AS u, $wpdb->sitemeta AS sm WHERE sm.meta_key = 'admin_user_id' AND u.ID = sm.meta_value AND sm.site_id = %d", $site_id ), ARRAY_A );	return false;}function get_blogs_of_user( $id, $all = false ) {	global $wpdb;	$cache_suffix = $all ? '_all' : '_short';	$return = wp_cache_get( 'blogs_of_user_' . $id . $cache_suffix, 'users' );	if ( $return )		return apply_filters( 'get_blogs_of_user', $return, $id, $all );	$user = get_userdata( (int) $id );	if ( !$user )		return false;	$blogs = $match = array();	$prefix_length = strlen($wpdb->base_prefix);	foreach ( (array) $user as $key => $value ) {		if ( $prefix_length && substr($key, 0, $prefix_length) != $wpdb->base_prefix )			continue;		if ( substr($key, -12, 12) != 'capabilities' )			continue;		if ( preg_match( '/^' . $wpdb->base_prefix . '((\d+)_)?capabilities$/', $key, $match ) ) {			if ( count( $match ) > 2 )				$blog_id = $match[ 2 ];			else				$blog_id = 1;			$blog = get_blog_details( $blog_id );			if ( $blog && isset( $blog->domain ) && ( $all == true || $all == false && ( $blog->archived == 0 && $blog->spam == 0 && $blog->deleted == 0 ) ) ) {				$blogs[ $blog_id ]->userblog_id	= $blog_id;				$blogs[ $blog_id ]->blogname		= $blog->blogname;				$blogs[ $blog_id ]->domain		= $blog->domain;				$blogs[ $blog_id ]->path			= $blog->path;				$blogs[ $blog_id ]->site_id		= $blog->site_id;				$blogs[ $blog_id ]->siteurl		= $blog->siteurl;			}		}	}	wp_cache_add( 'blogs_of_user_' . $id . $cache_suffix, $blogs, 'users', 5 );	return apply_filters( 'get_blogs_of_user', $blogs, $id, $all );}function get_active_blog_for_user( $user_id ) { // get an active blog for user - either primary blog or from blogs list	global $wpdb;	$blogs = get_blogs_of_user( $user_id );	if ( empty( $blogs ) ) {		$details = get_dashboard_blog();		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );		update_user_meta( $user_id, 'primary_blog', $details->blog_id );		wp_cache_delete( $user_id, 'users' );		return $details;	}	$primary_blog = get_user_meta( $user_id, 'primary_blog', true );	$details = get_dashboard_blog();	if ( $primary_blog ) {		$blogs = get_blogs_of_user( $user_id );		if ( isset( $blogs[ $primary_blog ] ) == false ) {			add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );			update_user_meta( $user_id, 'primary_blog', $details->blog_id );			wp_cache_delete( $user_id, 'users' );		} else {			$details = get_blog_details( $primary_blog );		}	} else {		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog		update_user_meta( $user_id, 'primary_blog', $details->blog_id );	}	if ( ( is_object( $details ) == false ) || ( is_object( $details ) && $details->archived == 1 || $details->spam == 1 || $details->deleted == 1 ) ) {		$blogs = get_blogs_of_user( $user_id, true ); // if a user's primary blog is shut down, check their other blogs.		$ret = false;		if ( is_array( $blogs ) && count( $blogs ) > 0 ) {			foreach ( (array) $blogs as $blog_id => $blog ) {				if ( $blog->site_id != $wpdb->siteid )					continue;				$details = get_blog_details( $blog_id );				if ( is_object( $details ) && $details->archived == 0 && $details->spam == 0 && $details->deleted == 0 ) {					$ret = $blog;					$changed = false;					if ( get_user_meta( $user_id , 'primary_blog', true ) != $blog_id ) {						update_user_meta( $user_id, 'primary_blog', $blog_id );						$changed = true;					}					if ( !get_user_meta($user_id , 'source_domain', true) ) {						update_user_meta( $user_id, 'source_domain', $blog->domain );						$changed = true;					}					if ( $changed )						wp_cache_delete( $user_id, 'users' );					break;				}			}		} else {			// Should never get here			$dashboard_blog = get_dashboard_blog();			add_user_to_blog( $dashboard_blog->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog			update_user_meta( $user_id, 'primary_blog', $dashboard_blog->blog_id );			return $dashboard_blog;		}		return $ret;	} else {		return $details;	}}function is_user_member_of_blog( $user_id, $blog_id = 0 ) {	$user_id = (int) $user_id;	$blog_id = (int) $blog_id;	if ( $blog_id == 0 ) {		global $wpdb;		$blog_id = $wpdb->blogid;	}	$blogs = get_blogs_of_user( $user_id );	if ( is_array( $blogs ) )		return array_key_exists( $blog_id, $blogs );	else		return false;}function get_user_count() {	global $wpdb;	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(ID) as c FROM $wpdb->users WHERE spam = '0' AND deleted = '0'") );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	}	$count = get_site_option( 'user_count' );	return $count;}function get_blog_count( $id = 0 ) {	global $wpdb;	if ( $id == 0 )		$id = $wpdb->siteid;	$count_ts = get_site_option( 'blog_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(blog_id) as c FROM $wpdb->blogs WHERE site_id = %d AND spam = '0' AND deleted = '0' and archived = '0'", $id) );		update_site_option( 'blog_count', $count );		update_site_option( 'blog_count_ts', time() );	}	$count = get_site_option( 'blog_count' );	return $count;}function get_blog_post( $blog_id, $post_id ) {	global $wpdb;	$key = $blog_id . '-' . $post_id;	$post = wp_cache_get( $key, 'global-posts' );	if ( $post == false ) {		$post = $wpdb->get_row( $wpdb->prepare( 'SELECT * FROM ' . $wpdb->get_blog_prefix( $blog_id ) . 'posts WHERE ID = %d', $post_id ) );		wp_cache_add( $key, $post, 'global-posts' );	}	return $post;}function add_user_to_blog( $blog_id, $user_id, $role ) {	switch_to_blog($blog_id);	$user = new WP_User($user_id);	if ( empty($user) || !$user->ID )		return new WP_Error('user_does_not_exist', __('That user does not exist.'));	if ( !get_user_meta($user_id, 'primary_blog', true) ) {		update_user_meta($user_id, 'primary_blog', $blog_id);		$details = get_blog_details($blog_id);		update_user_meta($user_id, 'source_domain', $details->domain);	}	$user->set_role($role);	do_action('add_user_to_blog', $user_id, $role, $blog_id);	wp_cache_delete( $user_id, 'users' );	restore_current_blog();	return true;}function remove_user_from_blog($user_id, $blog_id = '', $reassign = '') {	global $wpdb;	switch_to_blog($blog_id);	$user_id = (int) $user_id;	do_action('remove_user_from_blog', $user_id, $blog_id);	// If being removed from the primary blog, set a new primary if the user is assigned	// to multiple blogs.	$primary_blog = get_user_meta($user_id, 'primary_blog', true);	if ( $primary_blog == $blog_id ) {		$new_id = '';		$new_domain = '';		$blogs = get_blogs_of_user($user_id);		foreach ( (array) $blogs as $blog ) {			if ( $blog->userblog_id == $blog_id )				continue;			$new_id = $blog->userblog_id;			$new_domain = $blog->domain;			break;		}		update_user_meta($user_id, 'primary_blog', $new_id);		update_user_meta($user_id, 'source_domain', $new_domain);	}	// wp_revoke_user($user_id);	$user = new WP_User($user_id);	$user->remove_all_caps();	$blogs = get_blogs_of_user($user_id);	if ( count($blogs) == 0 ) {		update_user_meta($user_id, 'primary_blog', '');		update_user_meta($user_id, 'source_domain', '');	}	if ( $reassign != '' ) {		$reassign = (int) $reassign;		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_author = %d WHERE post_author = %d", $reassign, $user_id) );		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->links SET link_owner = %d WHERE link_owner = %d", $reassign, $user_id) );	}	restore_current_blog();}function create_empty_blog( $domain, $path, $weblog_title, $site_id = 1 ) {	$domain			= addslashes( $domain );	$weblog_title	= addslashes( $weblog_title );	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return __( 'Error: Site URL already taken.' );	// Need to backup wpdb table names, and create a new wp_blogs entry for new blog.	// Need to get blog_id from wp_blogs, and create new table names.	// Must restore table names at the end of function.	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return __( 'Error: problem creating site entry.' );	switch_to_blog($blog_id);	install_blog($blog_id);	restore_current_blog();	return $blog_id;}function get_blog_permalink( $_blog_id, $post_id ) {	$key = "{$_blog_id}-{$post_id}-blog_permalink";	$link = wp_cache_get( $key, 'site-options' );	if ( $link == false ) {		switch_to_blog( $_blog_id );		$link = get_permalink( $post_id );		restore_current_blog();		wp_cache_add( $key, $link, 'site-options', 360 );	}	return $link;}function get_blog_id_from_url( $domain, $path = '/' ) {	global $wpdb;	$domain = strtolower( $wpdb->escape( $domain ) );	$path = strtolower( $wpdb->escape( $path ) );	$id = wp_cache_get( md5( $domain . $path ), 'blog-id-cache' );	if ( $id == -1 ) { // blog does not exist		return 0;	} elseif ( $id ) {		return (int)$id;	}	$id = $wpdb->get_var( "SELECT blog_id FROM $wpdb->blogs WHERE domain = '$domain' and path = '$path' /* get_blog_id_from_url */" );	if ( !$id ) {		wp_cache_set( md5( $domain . $path ), -1, 'blog-id-cache' );		return false;	}	wp_cache_set( md5( $domain . $path ), $id, 'blog-id-cache' );	return $id;}// wpmu admin functionsfunction wpmu_admin_do_redirect( $url = '' ) {	$ref = '';	if ( isset( $_GET['ref'] ) )		$ref = $_GET['ref'];	if ( isset( $_POST['ref'] ) )		$ref = $_POST['ref'];	if ( $ref ) {		$ref = wpmu_admin_redirect_add_updated_param( $ref );		wp_redirect( $ref );		exit();	}	if ( empty( $_SERVER['HTTP_REFERER'] ) == false ) {		wp_redirect( $_SERVER['HTTP_REFERER'] );		exit();	}	$url = wpmu_admin_redirect_add_updated_param( $url );	if ( isset( $_GET['redirect'] ) ) {		if ( substr( $_GET['redirect'], 0, 2 ) == 's_' )			$url .= '&action=blogs&s='. esc_html( substr( $_GET['redirect'], 2 ) );	} elseif ( isset( $_POST['redirect'] ) ) {		$url = wpmu_admin_redirect_add_updated_param( $_POST['redirect'] );	}	wp_redirect( $url );	exit();}function wpmu_admin_redirect_add_updated_param( $url = '' ) {	if ( strpos( $url, 'updated=true' ) === false ) {		if ( strpos( $url, '?' ) === false )			return $url . '?updated=true';		else			return $url . '&updated=true';	}	return $url;}function is_blog_user( $blog_id = 0 ) {	global $current_user, $wpdb;	if ( !$blog_id )		$blog_id = $wpdb->blogid;	$cap_key = $wpdb->base_prefix . $blog_id . '_capabilities';	if ( is_array($current_user->$cap_key) && in_array(1, $current_user->$cap_key) )		return true;	return false;}function is_email_address_unsafe( $user_email ) {	$banned_names = get_site_option( 'banned_email_domains' );	if ($banned_names && !is_array( $banned_names ))		$banned_names = explode( "\n", $banned_names);	if ( is_array( $banned_names ) && empty( $banned_names ) == false ) {		$email_domain = strtolower( substr( $user_email, 1 + strpos( $user_email, '@' ) ) );		foreach ( (array) $banned_names as $banned_domain ) {			if ( $banned_domain == '' )				continue;			if (				strstr( $email_domain, $banned_domain ) ||				(					strstr( $banned_domain, '/' ) &&					preg_match( $banned_domain, $email_domain )				)			)			return true;		}	}	return false;}function wpmu_validate_user_signup($user_name, $user_email) {	global $wpdb;	$errors = new WP_Error();	$orig_username = $user_name;	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$maybe = array();	preg_match( '/[a-z0-9]+/', $user_name, $maybe );	if ( $user_name != $orig_username || $user_name != $maybe[0] ) {		$errors->add( 'user_name', __( "Only the lowercase letters a-z and numbers allowed" ) );		$user_name = $orig_username;	}	$user_email = sanitize_email( $user_email );	if ( empty( $user_name ) )	   	$errors->add('user_name', __('Please enter a username'));	$illegal_names = get_site_option( 'illegal_names' );	if ( is_array( $illegal_names ) == false ) {		$illegal_names = array(  'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	if ( in_array( $user_name, $illegal_names ) == true )		$errors->add('user_name',  __('That username is not allowed'));	if ( is_email_address_unsafe( $user_email ) )		$errors->add('user_email',  __('You cannot use that email address to signup. We are having problems with them blocking some of our email. Please use another email provider.'));	if ( strlen( $user_name ) < 4 )		$errors->add('user_name',  __('Username must be at least 4 characters'));	if ( strpos( ' ' . $user_name, '_' ) != false )		$errors->add( 'user_name', __( 'Sorry, usernames may not contain the character &#8220;_&#8221;!' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $user_name, $match );	if ( $match[0] == $user_name )		$errors->add('user_name', __('Sorry, usernames must have letters too!'));	if ( !is_email( $user_email ) )		$errors->add('user_email', __('Please enter a correct email address'));	$limited_email_domains = get_site_option( 'limited_email_domains' );	if ( is_array( $limited_email_domains ) && empty( $limited_email_domains ) == false ) {		$emaildomain = substr( $user_email, 1 + strpos( $user_email, '@' ) );		if ( in_array( $emaildomain, $limited_email_domains ) == false )			$errors->add('user_email', __('Sorry, that email address is not allowed!'));	}	// Check if the username has been used already.	if ( username_exists($user_name) )		$errors->add('user_name', __('Sorry, that username already exists!'));	// Check if the email address has been used already.	if ( email_exists($user_email) )		$errors->add('user_email', __('Sorry, that email address is already used!'));	// Has someone already signed up for this username?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_login = %s", $user_name) );	if ( $signup != null ) {		$registered_at =  mysql2date('U', $signup->registered);		$now = current_time( 'timestamp', true );		$diff = $now - $registered_at;		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_login = %s", $user_name) );		else			$errors->add('user_name', __('That username is currently reserved but may be available in a couple of days.'));		if ( $signup->active == 0 && $signup->user_email == $user_email )			$errors->add('user_email_used', __('username and email used'));	}	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_email = %s", $user_email) );	if ( $signup != null ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_email = %s", $user_email) );		else			$errors->add('user_email', __('That email address has already been used. Please check your inbox for an activation email. It will become available in a couple of days if you do nothing.'));	}	$result = array('user_name' => $user_name, 'orig_username' => $orig_username, 'user_email' => $user_email, 'errors' => $errors);	return apply_filters('wpmu_validate_user_signup', $result);}function wpmu_validate_blog_signup($blogname, $blog_title, $user = '') {	global $wpdb, $domain, $base, $current_site;	$blog_title = strip_tags( $blog_title );	$blog_title = substr( $blog_title, 0, 50 );	$errors = new WP_Error();	$illegal_names = get_site_option( 'illegal_names' );	if ( $illegal_names == false ) {		$illegal_names = array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	// On sub dir installs, Some names are so illegal, only a filter can spring them from jail	if (! is_subdomain_install() )		$illegal_names = array_merge($illegal_names, apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) ) );	if ( empty( $blogname ) )		$errors->add('blogname', __('Please enter a site name'));	$maybe = array();	preg_match( '/[a-z0-9]+/', $blogname, $maybe );	if ( $blogname != $maybe[0] )		$errors->add('blogname', __('Only lowercase letters and numbers allowed'));	if ( in_array( $blogname, $illegal_names ) == true )		$errors->add('blogname',  __('That name is not allowed'));	if ( strlen( $blogname ) < 4 && !is_super_admin() )		$errors->add('blogname',  __('Site name must be at least 4 characters'));	if ( strpos( ' ' . $blogname, '_' ) != false )		$errors->add( 'blogname', __( 'Sorry, site names may not contain the character &#8220;_&#8221;!' ) );	// do not allow users to create a blog that conflicts with a page on the main blog.	if ( !is_subdomain_install() && $wpdb->get_var( $wpdb->prepare( "SELECT post_name FROM " . $wpdb->get_blog_prefix( $current_site->blog_id ) . "posts WHERE post_type = 'page' AND post_name = %s", $blogname ) ) )		$errors->add( 'blogname', __( 'Sorry, you may not use that site name.' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $blogname, $match );	if ( $match[0] == $blogname )		$errors->add('blogname', __('Sorry, site names must have letters too!'));	$blogname = apply_filters( 'newblogname', $blogname );	$blog_title = stripslashes(  $blog_title );	if ( empty( $blog_title ) )		$errors->add('blog_title', __('Please enter a site title'));	// Check if the domain/path has been used already.	if ( is_subdomain_install() ) {		$mydomain = $blogname . '.' . preg_replace( '|^www\.|', '', $domain );		$path = $base;	} else {		$mydomain = "$domain";		$path = $base.$blogname.'/';	}	if ( domain_exists($mydomain, $path) )		$errors->add('blogname', __('Sorry, that site already exists!'));	if ( username_exists( $blogname ) ) {		if ( is_object( $user ) == false || ( is_object($user) && ( $user->user_login != $blogname ) ) )			$errors->add( 'blogname', __( 'Sorry, that site is reserved!' ) );	}	// Has someone already signed up for this domain?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) ); // TODO: Check email too?	if ( ! empty($signup) ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) );		else			$errors->add('blogname', __('That site is currently reserved but may be available in a couple days.'));	}	$result = array('domain' => $mydomain, 'path' => $path, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors);	return apply_filters('wpmu_validate_blog_signup', $result);}// Record signup information for future activation. wpmu_validate_signup() should be run// on the inputs before calling wpmu_signup().function wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta = '') {	global $wpdb;	$key = substr( md5( time() . rand() . $domain ), 0, 16 );	$meta = serialize($meta);	$domain = $wpdb->escape($domain);	$path = $wpdb->escape($path);	$title = $wpdb->escape($title);	$wpdb->insert( $wpdb->signups, array(		'domain' => $domain,		'path' => $path,		'title' => $title,		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta);}function wpmu_signup_user($user, $user_email, $meta = '') {	global $wpdb;	// Format data	$user = preg_replace( '/\s+/', '', sanitize_user( $user, true ) );	$user_email = sanitize_email( $user_email );	$key = substr( md5( time() . rand() . $user_email ), 0, 16 );	$meta = serialize($meta);	$wpdb->insert( $wpdb->signups, array(		'domain' => '',		'path' => '',		'title' => '',		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_user_notification($user, $user_email, $key, $meta);}// Notify user of signup success.function wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_signup_blog_notification', $domain, $path, $title, $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	if ( !is_subdomain_install() || $current_site->id != 1 )		$activate_url = network_site_url("wp-activate.php?key=$key");	else		$activate_url = "http://{$domain}{$path}wp-activate.php?key=$key"; // @todo use *_url() API	$activate_url = esc_url($activate_url);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_blog_notification_email', __( "To activate your blog, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\nAfter you activate, you can visit your site here:\n\n%s" ) ), $activate_url, esc_url( "http://{$domain}{$path}" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( apply_filters( 'wpmu_signup_blog_notification_subject', __( '[%1s] Activate %2s' ) ), $from_name, esc_url( 'http://' . $domain . $path ) );	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_signup_user_notification($user, $user_email, $key, $meta = '') {	if ( !apply_filters('wpmu_signup_user_notification', $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_user_notification_email', __( "To activate your user, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\n" ) ), site_url( "wp-activate.php?key=$key" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( __( apply_filters( 'wpmu_signup_user_notification_subject', '[%1s] Activate %2s' ) ), $from_name, $user);	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_activate_signup($key) {	global $wpdb, $current_site;	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE activation_key = %s", $key) );	if ( empty($signup) )		return new WP_Error('invalid_key', __('Invalid activation key.'));	if ( $signup->active )		return new WP_Error('already_active', __('The site is already active.'), $signup);	$meta = unserialize($signup->meta);	$user_login = $wpdb->escape($signup->user_login);	$user_email = $wpdb->escape($signup->user_email);	$password = wp_generate_password();	$user_id = username_exists($user_login);	if ( ! $user_id )		$user_id = wpmu_create_user($user_login, $password, $user_email);	else		$user_already_exists = true;	if ( ! $user_id )		return new WP_Error('create_user', __('Could not create user'), $signup);	$now = current_time('mysql', true);	if ( empty($signup->domain) ) {		$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );		if ( isset( $user_already_exists ) )			return new WP_Error( 'user_already_exists', __( 'That username is already activated.' ), $signup);		wpmu_welcome_user_notification($user_id, $password, $meta);		$user_site = get_site_option( 'dashboard_blog', $current_site->blog_id );		if ( $user_site == false )			add_user_to_blog( '1', $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( $user_site, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		add_new_user_to_blog( $user_id, $user_email, $meta );		do_action('wpmu_activate_user', $user_id, $password, $meta);		return array('user_id' => $user_id, 'password' => $password, 'meta' => $meta);	}	$blog_id = wpmu_create_blog( $signup->domain, $signup->path, $signup->title, $user_id, $meta, $wpdb->siteid );	// TODO: What to do if we create a user but cannot create a blog?	if ( is_wp_error($blog_id) ) {		// If blog is taken, that means a previous attempt to activate this blog failed in between creating the blog and		// setting the activation flag.  Let's just set the active flag and instruct the user to reset their password.		if ( 'blog_taken' == $blog_id->get_error_code() ) {			$blog_id->add_data( $signup );			$wpdb->update( $wpdb->signups, array( 'active' => 1, 'activated' => $now ), array( 'activation_key' => $key ) );		}		return $blog_id;	}	$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );	wpmu_welcome_notification($blog_id, $user_id, $password, $signup->title, $meta);	do_action('wpmu_activate_blog', $blog_id, $user_id, $password, $signup->title, $meta);	return array('blog_id' => $blog_id, 'user_id' => $user_id, 'password' => $password, 'title' => $signup->title, 'meta' => $meta);}function wpmu_create_user( $user_name, $password, $email) {	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$user_id = wp_create_user( $user_name, $password, $email );	if ( is_wp_error($user_id) )		return false;	// Newly created users have no roles or caps until they are added to a blog.	delete_user_option( $user_id, 'capabilities' );	delete_user_option( $user_id, 'user_level' );	do_action( 'wpmu_new_user', $user_id );	return $user_id;}function wpmu_create_blog($domain, $path, $title, $user_id, $meta = '', $site_id = 1) {	$domain = preg_replace( '/\s+/', '', sanitize_user( $domain, true ) );	if ( is_subdomain_install() )		$domain = str_replace( '@', '', $domain );	$title = strip_tags( $title );	$user_id = (int) $user_id;	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return new WP_Error('blog_taken', __('Site already exists.'));	if ( !defined('WP_INSTALLING') )		define( 'WP_INSTALLING', true );	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return new WP_Error('insert_blog', __('Could not create site.'));	switch_to_blog($blog_id);	install_blog($blog_id, $title);	wp_install_defaults($user_id);	add_user_to_blog($blog_id, $user_id, 'administrator');	if ( is_array($meta) ) foreach ($meta as $key => $value) {		if ( $key == 'public' || $key == 'archived' || $key == 'mature' || $key == 'spam' || $key == 'deleted' || $key == 'lang_id' )			update_blog_status( $blog_id, $key, $value );		else			update_option( $key, $value );	}	add_option( 'WPLANG', get_site_option( 'WPLANG' ) );	update_option( 'blog_public', (int)$meta['public'] );	if ( !is_super_admin() && get_user_meta( $user_id, 'primary_blog', true ) == get_site_option( 'dashboard_blog', 1 ) )		update_user_meta( $user_id, 'primary_blog', $blog_id );	restore_current_blog();	do_action( 'wpmu_new_blog', $blog_id, $user_id, $domain, $path, $site_id, $meta );	return $blog_id;}function newblog_notify_siteadmin( $blog_id, $deprecated = '' ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$options_site_url = esc_url(network_admin_url('ms-options.php'));	switch_to_blog( $blog_id );	$blogname = get_option( 'blogname' );	$siteurl = site_url();	restore_current_blog();	$msg = sprintf( __( 'New Site: %1sURL: %2sRemote IP: %3sDisable these notifications: %4s' ), $blogname, $siteurl, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newblog_notify_siteadmin', $msg );	wp_mail( $email, sprintf( __( 'New Site Registration: %s' ), $siteurl ), $msg );	return true;}function newuser_notify_siteadmin( $user_id ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$user = new WP_User($user_id);	$options_site_url = esc_url(network_admin_url('ms-options.php'));	$msg = sprintf(__('New User: %1sRemote IP: %2sDisable these notifications: %3s'), $user->user_login, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newuser_notify_siteadmin', $msg );	wp_mail( $email, sprintf(__('New User Registration: %s'), $user->user_login), $msg );	return true;}function domain_exists($domain, $path, $site_id = 1) {	global $wpdb;	return $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s AND site_id = %d", $domain, $path, $site_id) );}function insert_blog($domain, $path, $site_id) {	global $wpdb;	$path = trailingslashit($path);	$site_id = (int) $site_id;	$result = $wpdb->insert( $wpdb->blogs, array('site_id' => $site_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time('mysql')) );	if ( ! $result )		return false;	refresh_blog_details($wpdb->insert_id);	return $wpdb->insert_id;}// Install an empty blog.  wpdb should already be switched.function install_blog($blog_id, $blog_title = '') {	global $wpdb, $table_prefix, $wp_roles;	$wpdb->suppress_errors();	// Cast for security	$blog_id = (int) $blog_id;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	if ( $wpdb->get_results("SELECT ID FROM $wpdb->posts") )		die(__('<h1>Already Installed</h1><p>You appear to have already installed WordPress. To reinstall please clear your old database tables first.</p>') . '</body></html>');	$wpdb->suppress_errors(false);	$url = get_blogaddress_by_id($blog_id);	// Set everything up	make_db_current_silent();	populate_options();	populate_roles();	$wp_roles->_init();	// fix url.	update_option('siteurl', $url);	update_option('home', $url);	update_option('fileupload_url', $url . "files" );	update_option('upload_path', "wp-content/blogs.dir/" . $blog_id . "/files");	update_option('blogname', stripslashes( $blog_title ) );	update_option('admin_email', '');	$wpdb->update( $wpdb->options, array('option_value' => ''), array('option_name' => 'admin_email') );	// remove all perms	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'user_level') );	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'capabilities') );	$wpdb->suppress_errors( false );}// Deprecated, use wp_install_defaults()// should be switched already as $blog_id is ignored.function install_blog_defaults($blog_id, $user_id) {	global $wpdb;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	$wpdb->suppress_errors();	wp_install_defaults($user_id);	$wpdb->suppress_errors( false );}function wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_notification', $blog_id, $user_id, $password, $title, $meta) )		return false;	$welcome_email = stripslashes( get_site_option( 'welcome_email' ) );	if ( $welcome_email == false )		$welcome_email = stripslashes( __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' ) );	$url = get_blogaddress_by_id($blog_id);	$user = new WP_User($user_id);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'BLOG_TITLE', $title, $welcome_email );	$welcome_email = str_replace( 'BLOG_URL', $url, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = apply_filters( 'update_welcome_email', $welcome_email, $blog_id, $user_id, $password, $title, $meta);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_subject', sprintf(__('New %1$s Site: %2$s'), $current_site->site_name, stripslashes( $title ) ) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function wpmu_welcome_user_notification($user_id, $password, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_user_notification', $user_id, $password, $meta) )		return false;	$welcome_email = get_site_option( 'welcome_user_email' );	$user = new WP_User($user_id);	$welcome_email = apply_filters( 'update_welcome_user_email', $welcome_email, $user_id, $password, $meta);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = str_replace( 'LOGINLINK', wp_login_url(), $welcome_email );	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_user_subject', sprintf(__('New %1$s User: %2$s'), $current_site->site_name, $user->user_login) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function get_current_site() {	global $current_site;	return $current_site;}function get_user_id_from_string( $string ) {	$user_id = 0;	if ( is_email( $string ) ) {		$user = get_user_by('email', $string);		if ( $user )			$user_id = $user->ID;	} elseif ( is_numeric( $string ) ) {		$user_id = $string;	} else {		$user = get_user_by('login', $string);		if ( $user )			$user_id = $user->ID;	}	return $user_id;}function get_most_recent_post_of_user( $user_id ) {	global $wpdb;	$user_blogs = get_blogs_of_user( (int) $user_id );	$most_recent_post = array();	// Walk through each blog and get the most recent post	// published by $user_id	foreach ( (array) $user_blogs as $blog ) {		$recent_post = $wpdb->get_row( $wpdb->prepare("SELECT ID, post_date_gmt FROM {$wpdb->base_prefix}{$blog->userblog_id}_posts WHERE post_author = %d AND post_type = 'post' AND post_status = 'publish' ORDER BY post_date_gmt DESC LIMIT 1", $user_id ), ARRAY_A);		// Make sure we found a post		if ( isset($recent_post['ID']) ) {			$post_gmt_ts = strtotime($recent_post['post_date_gmt']);			// If this is the first post checked or if this post is			// newer than the current recent post, make it the new			// most recent post.			if ( !isset($most_recent_post['post_gmt_ts']) || ( $post_gmt_ts > $most_recent_post['post_gmt_ts'] ) ) {				$most_recent_post = array(					'blog_id'		=> $blog->userblog_id,					'post_id'		=> $recent_post['ID'],					'post_date_gmt'	=> $recent_post['post_date_gmt'],					'post_gmt_ts'	=> $post_gmt_ts				);			}		}	}	return $most_recent_post;}/* Misc functions */function get_dirsize( $directory ) {	$dirsize = get_transient( 'dirsize_cache' );	if ( is_array( $dirsize ) && isset( $dirsize[ $directory ][ 'size' ] ) )		return $dirsize[ $directory ][ 'size' ];	if ( false == is_array( $dirsize ) )		$dirsize = array();	$dirsize[ $directory ][ 'size' ] = recurse_dirsize( $directory );	set_transient( 'dirsize_cache', $dirsize, 3600 );	return $dirsize[ $directory ][ 'size' ];}function recurse_dirsize( $directory ) {	$size = 0;	if ( substr( $directory, -1 ) == '/' )		$directory = substr($directory,0,-1);	if ( !file_exists($directory) || !is_dir( $directory ) || !is_readable( $directory ) )		return false;	if ($handle = opendir($directory)) {		while(($file = readdir($handle)) !== false) {			$path = $directory.'/'.$file;			if ($file != '.' && $file != '..') {				if (is_file($path)) {					$size += filesize($path);				} elseif (is_dir($path)) {					$handlesize = recurse_dirsize($path);					if ($handlesize > 0)						$size += $handlesize;				}			}		}		closedir($handle);	}	return $size;}function upload_is_user_over_quota( $echo = true ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$spaceAllowed = get_space_allowed();	if ( empty( $spaceAllowed ) || !is_numeric( $spaceAllowed ) )		$spaceAllowed = 10;	// Default space allowed is 10 MB	$dirName = BLOGUPLOADDIR;	$size = get_dirsize($dirName) / 1024 / 1024;	if ( ($spaceAllowed-$size) < 0 ) {		if ( $echo )			_e( 'Sorry, you have used your space allocation. Please delete some files to upload more files.' ); // No space left		return true;	} else {		return false;	}}function check_upload_mimes( $mimes ) {	$site_exts = explode( ' ', get_site_option( 'upload_filetypes' ) );	foreach ( $site_exts as $ext ) {		foreach ( $mimes as $ext_pattern => $mime ) {			if ( $ext != '' && strpos( $ext_pattern, $ext ) !== false )				$site_mimes[$ext_pattern] = $mime;		}	}	return $site_mimes;}function update_posts_count( $deprecated = '' ) {	global $wpdb;	update_option( 'post_count', (int) $wpdb->get_var( "SELECT COUNT(ID) FROM {$wpdb->posts} WHERE post_status = 'publish' and post_type = 'post'" ) );}function wpmu_log_new_registrations( $blog_id, $user_id ) {	global $wpdb;	$user = new WP_User( (int) $user_id );	$wpdb->insert( $wpdb->registration_log, array('email' => $user->user_email, 'IP' => preg_replace( '/[^0-9., ]/', '',$_SERVER['REMOTE_ADDR'] ), 'blog_id' => $blog_id, 'date_registered' => current_time('mysql')) );}function fix_import_form_size( $size ) {	if ( upload_is_user_over_quota( false ) == true )		return 0;	$spaceAllowed = 1024 * 1024 * get_space_allowed();	$dirName = BLOGUPLOADDIR;	$dirsize = get_dirsize($dirName) ;	if ( $size > $spaceAllowed - $dirsize )		return $spaceAllowed - $dirsize; // remaining space	else		return $size; // default}/** * Maintains a canonical list of terms by syncing terms created for each blog with the global terms table. * * @since 3.0.0 * * @see term_id_filter * * @param int $term_id An ID for a term on the current blog. * @return int An ID from the global terms table mapped from $term_id. */function global_terms( $term_id, $deprecated = '' ) {	global $wpdb;	static $global_terms_recurse = null;	if ( !global_terms_enabled() )		return $term_id;	// prevent a race condition	$recurse_start = false;	if ( $global_terms_recurse === null ) {		$recurse_start = true;		$global_terms_recurse = 1;	} elseif ( 10 < $global_terms_recurse++ ) {		return $term_id;	}	$term_id = intval( $term_id );	$c = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->terms WHERE term_id = %d", $term_id ) );	$global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE category_nicename = %s", $c->slug ) );	if ( $global_id == null ) {		$used_global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE cat_ID = %d", $c->term_id ) );		if ( null == $used_global_id ) {			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $term_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;			if ( empty( $global_id ) )				return $term_id;		} else {			$max_global_id = $wpdb->get_var( "SELECT MAX(cat_ID) FROM $wpdb->sitecategories" );			$max_local_id = $wpdb->get_var( "SELECT MAX(term_id) FROM $wpdb->terms" );			$new_global_id = max( $max_global_id, $max_local_id ) + mt_rand( 100, 400 );			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $new_global_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;		}	} elseif ( $global_id != $term_id ) {		$local_id = $wpdb->get_row( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE term_id = %d", $global_id ) );		if ( null != $local_id )			$local_id = global_terms( $local_id );			if ( 10 < $global_terms_recurse )				$global_id = $term_id;	}	if ( $global_id != $term_id ) {		if ( get_option( 'default_category' ) == $term_id )			update_option( 'default_category', $global_id );		$wpdb->update( $wpdb->terms, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('parent' => $global_id), array('parent' => $term_id) );		clean_term_cache($term_id);	}	if( $recurse_start )		$global_terms_recurse = null;	return $global_id;}function redirect_this_site( $deprecated = '' ) {	global $current_site;	return array( $current_site->domain );}function upload_is_file_too_big( $upload ) {	if ( is_array( $upload ) == false || defined( 'WP_IMPORTING' ) )		return $upload;	if ( strlen( $upload['bits'] )  > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		return sprintf( __( 'This file is too big. Files must be less than %d KB in size.' ) . '<br />', get_site_option( 'fileupload_maxk', 1500 ));	return $upload;}function wordpressmu_wp_mail_from( $email ) {	if ( strpos( $email, 'wordpress@' ) !== false )		$email = get_option( 'admin_email' );	return $email;}function signup_nonce_fields() {	$id = mt_rand();	echo "<input type='hidden' name='signup_form_id' value='{$id}' />";	wp_nonce_field('signup_form_' . $id, '_signup_form', false);}function signup_nonce_check( $result ) {	if ( !strpos( $_SERVER[ 'PHP_SELF' ], 'wp-signup.php' ) )		return $result;	if ( wp_create_nonce('signup_form_' . $_POST[ 'signup_form_id' ]) != $_POST['_signup_form'] )		wp_die( __('Please try again!') );	return $result;}function maybe_redirect_404() {	global $current_site;	if ( is_main_site() && is_404() && defined( 'NOBLOGREDIRECT' ) && ( $destination = apply_filters( 'blog_redirect_404', NOBLOGREDIRECT ) ) ) {		if ( $destination == '%siteurl%' )			$destination = network_home_url();		wp_redirect( $destination );		exit();	}}function maybe_add_existing_user_to_blog() {	if ( false === strpos( $_SERVER[ 'REQUEST_URI' ], '/newbloguser/' ) )		return false;	$parts = explode( '/', $_SERVER[ 'REQUEST_URI' ] );	$key = array_pop( $parts );	if ( $key == '' )		$key = array_pop( $parts );	$details = get_option( 'new_user_' . $key );	if ( !empty( $details ) )		delete_option( 'new_user_' . $key );	if ( empty( $details ) || is_wp_error( add_existing_user_to_blog( $details ) ) )		wp_die( sprintf(__('An error occurred adding you to this site. Back to the <a href="%s">homepage</a>.'), site_url() ) );	wp_die( sprintf(__('You have been added to this site. Please visit the <a href="%s">homepage</a> or <a href="%s">login</a> using your username and password.'), site_url(), admin_url() ), __('Success') );}function add_existing_user_to_blog( $details = false ) {	if ( is_array( $details ) ) {		$result = add_user_to_blog( '', $details[ 'user_id' ], $details[ 'role' ] );		do_action( 'added_existing_user', $details[ 'user_id' ], $result );	}	return $result;}function add_new_user_to_blog( $user_id, $email, $meta ) {	global $current_site;	if ( $meta[ 'add_to_blog' ] ) {		$blog_id = $meta[ 'add_to_blog' ];		$role = $meta[ 'new_role' ];		remove_user_from_blog($user_id, $current_site->blogid); // remove user from main blog.		add_user_to_blog( $blog_id, $user_id, $role );		update_user_meta( $user_id, 'primary_blog', $blog_id );	}}function fix_phpmailer_messageid( $phpmailer ) {	global $current_site;	$phpmailer->Hostname = $current_site->domain;}function is_user_spammy( $username = 0 ) {	if ( $username == 0 ) {		global $current_user;		$user_id = $current_user->ID;	} else {		$user_id = get_user_id_from_string( $username );	}	$u = new WP_User( $user_id );	if ( $u->spam == 1 )		return true;	return false;}function update_blog_public( $old_value, $value ) {	global $wpdb;	do_action('update_blog_public');	update_blog_status( $wpdb->blogid, 'public', (int) $value );}add_action('update_option_blog_public', 'update_blog_public', 10, 2);/* Redirect all hits to "dashboard" blog to wp-admin/ Dashboard. */function redirect_mu_dashboard() {	global $current_site, $current_blog;	$dashboard_blog = get_dashboard_blog();	if ( $current_blog->blog_id == $dashboard_blog->blog_id && $dashboard_blog->blog_id != $current_site->blog_id ) {		$protocol = ( is_ssl() ? 'https://' : 'http://' );		wp_redirect( $protocol . $dashboard_blog->domain . trailingslashit( $dashboard_blog->path ) . 'wp-admin/' );		die();	}}add_action( 'template_redirect', 'redirect_mu_dashboard' );function get_dashboard_blog() {	if ( $blog = get_site_option( 'dashboard_blog' ) )		return get_blog_details( $blog );	return get_blog_details( $GLOBALS['current_site']->blog_id );}function is_user_option_local( $key, $user_id = 0, $blog_id = 0 ) {	global $current_user, $wpdb;	if ( $user_id == 0 )		$user_id = $current_user->ID;	if ( $blog_id == 0 )		$blog_id = $wpdb->blogid;	$local_key = $wpdb->base_prefix . $blog_id . '_' . $key;	if ( isset( $current_user->$local_key ) )		return true;	return false;}function users_can_register_signup_filter() {	$registration = get_site_option('registration');	if ( $registration == 'all' || $registration == 'user' )		return true;	return false;}add_filter('option_users_can_register', 'users_can_register_signup_filter');function welcome_user_msg_filter( $text ) {	if ( !$text ) {		return __( 'Dear User,Your new account is set up.You can log in with the following information:Username: USERNAMEPassword: PASSWORDLOGINLINKThanks!--The Team @ SITE_NAME' );	}	return $text;}add_filter( 'site_option_welcome_user_email', 'welcome_user_msg_filter' );/** * Whether to force SSL on content. * * @since 2.8.5 * * @param string|bool $force * @return bool True if forced, false if not forced. */function force_ssl_content( $force = '' ) {	static $forced_content;	if ( '' != $force ) {		$old_forced = $forced_content;		$forced_content = $force;		return $old_forced;	}	return $forced_content;}/** * Formats an String URL to use HTTPS if HTTP is found. * Useful as a filter. * * @since 2.8.5 **/function filter_SSL( $url ) {	if ( !is_string( $url ) )		return get_bloginfo( 'url' ); //return home blog url with proper scheme	$arrURL = parse_url( $url );	if ( force_ssl_content() && is_ssl() ) {		if ( 'http' === $arrURL['scheme'] && 'https' !== $arrURL['scheme'] )			$url = str_replace( $arrURL['scheme'], 'https', $url );	}	return $url;}?>
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r16 *//** * BackPress Scripts enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r16 */class WP_Scripts extends WP_Dependencies {	var $base_url; // Full URL with trailing slash	var $content_url;	var $default_version;	var $in_footer = array();	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $print_code = '';	var $ext_handles = '';	var $ext_version = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_scripts', array(&$this) );	}	/**	 * Prints scripts	 *	 * Prints the scripts passed to it or the print queue.  Also prints all necessary dependencies.	 *	 * @param mixed handles (optional) Scripts to be printed.  (void) prints queue, (string) prints that script, (array of strings) prints those scripts.	 * @param int group (optional) If scripts were queued in groups prints this group number.	 * @return array Scripts that have been printed	 */	function print_scripts( $handles = false, $group = false ) {		return $this->do_items( $handles, $group );	}	function print_scripts_l10n( $handle, $echo = true ) {		if ( empty($this->registered[$handle]->extra['l10n']) || empty($this->registered[$handle]->extra['l10n'][0]) || !is_array($this->registered[$handle]->extra['l10n'][1]) )			return false;		$object_name = $this->registered[$handle]->extra['l10n'][0];		$data = "var $object_name = {\n";		$eol = '';		foreach ( $this->registered[$handle]->extra['l10n'][1] as $var => $val ) {			if ( 'l10n_print_after' == $var ) {				$after = $val;				continue;			}			$data .= "$eol\t$var: \"" . esc_js( $val ) . '"';			$eol = ",\n";		}		$data .= "\n};\n";		$data .= isset($after) ? "$after\n" : '';		if ( $echo ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $data;			echo "/* ]]> */\n";			echo "</script>\n";			return true;		} else {			return $data;		}	}	function do_item( $handle, $group = false ) {		if ( !parent::do_item($handle) )			return false;		if ( 0 === $group && $this->groups[$handle] > 0 ) {			$this->in_footer[] = $handle;			return false;		}		if ( false === $group && in_array($handle, $this->in_footer, true) )			$this->in_footer = array_diff( $this->in_footer, (array) $handle );		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		$src = $this->registered[$handle]->src;		if ( $this->do_concat ) {			$srce = apply_filters( 'script_loader_src', $src, $handle );			if ( $this->in_default_dir($srce) ) {				$this->print_code .= $this->print_scripts_l10n( $handle, false );				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			} else {				$this->ext_handles .= "$handle,";				$this->ext_version .= "$handle$ver";			}		}		$this->print_scripts_l10n( $handle );		if ( !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = esc_url(apply_filters( 'script_loader_src', $src, $handle ));		if ( $this->do_concat )			$this->print_html .= "<script type='text/javascript' src='$src'></script>\n";		else			echo "<script type='text/javascript' src='$src'></script>\n";		return true;	}	/**	 * Localizes a script	 *	 * Localizes only if script has already been added	 *	 * @param string handle Script name	 * @param string object_name Name of JS object to hold l10n info	 * @param array l10n Array of JS var name => localized string	 * @return bool Successful localization	 */	function localize( $handle, $object_name, $l10n ) {		if ( !$object_name || !$l10n )			return false;		return $this->add_data( $handle, 'l10n', array( $object_name, $l10n ) );	}	function set_group( $handle, $recursion, $group = false ) {		$grp = isset($this->registered[$handle]->extra['group']) ? (int) $this->registered[$handle]->extra['group'] : 0;		if ( false !== $group && $grp > $group )			$grp = $group;		return parent::set_group( $handle, $recursion, $grp );	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_scripts_array', $this->to_do );		return $r;	}	function do_head_items() {		$this->do_items(false, 0);		return $this->done;	}	function do_footer_items() {		if ( !empty($this->in_footer) ) {			foreach( $this->in_footer as $key => $handle ) {				if ( !in_array($handle, $this->done, true) && isset($this->registered[$handle]) ) {					$this->do_item($handle);					$this->done[] = $handle;					unset( $this->in_footer[$key] );				}			}		}		return $this->done;	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}	function reset() {		$this->do_concat = false;		$this->print_code = '';		$this->concat = '';		$this->concat_version = '';		$this->print_html = '';		$this->ext_version = '';		$this->ext_handles = '';	}}
<?php/** * Edit post administration panel. * * Manage Post actions: post, edit, delete, etc. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'edit.php';$submenu_file = 'edit.php';wp_reset_vars(array('action', 'safe_mode', 'withcomments', 'posts', 'content', 'edited_post_title', 'comment_error', 'profile', 'trackback_url', 'excerpt', 'showcomments', 'commentstart', 'commentend', 'commentorder'));if ( isset($_GET['post']) )	$post_id = (int) $_GET['post'];elseif ( isset($_POST['post_ID']) )	$post_id = (int) $_POST['post_ID'];else	$post_id = 0;$post_ID = $post_id;$post = null;$post_type_object = null;$post_type = null;if ( $post_id ) {	$post = get_post($post_id);	if ( $post ) {		$post_type_object = get_post_type_object($post->post_type);		if ( $post_type_object ) {			$post_type = $post->post_type;			$current_screen->post_type = $post->post_type;			$current_screen->id = $current_screen->post_type;		}	}} elseif ( isset($_POST['post_type']) ) {	$post_type_object = get_post_type_object($_POST['post_type']);	if ( $post_type_object ) {		$post_type = $post_type_object->name;		$current_screen->post_type = $post_type;		$current_screen->id = $current_screen->post_type;	}}/** * Redirect to previous page. * * @param int $post_id Optional. Post ID. */function redirect_post($post_id = '') {	if ( !empty($_POST['mode']) && 'sidebar' == $_POST['mode'] ) {		if ( isset($_POST['saveasdraft']) )			$location = 'sidebar.php?a=c';		elseif ( isset($_POST['publish']) )			$location = 'sidebar.php?a=b';	} elseif ( isset($_POST['save']) || isset($_POST['publish']) ) {		$status = get_post_status( $post_id );		if ( isset( $_POST['publish'] ) ) {			switch ( $status ) {				case 'pending':					$message = 8;					break;				case 'future':					$message = 9;					break;				default:					$message = 6;			}		} else {				$message = 'draft' == $status ? 10 : 1;		}		$location = add_query_arg( 'message', $message, get_edit_post_link( $post_id, 'url' ) );	} elseif ( isset($_POST['addmeta']) && $_POST['addmeta'] ) {		$location = add_query_arg( 'message', 2, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( isset($_POST['deletemeta']) && $_POST['deletemeta'] ) {		$location = add_query_arg( 'message', 3, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( 'post-quickpress-save-cont' == $_POST['action'] ) {		$location = "post.php?action=edit&post=$post_id&message=7";	} else {		$location = add_query_arg( 'message', 4, get_edit_post_link( $post_id, 'url' ) );	}	wp_redirect( apply_filters( 'redirect_post_location', $location, $post_id ) );}if ( isset( $_POST['deletepost'] ) )	$action = 'delete';elseif ( isset($_POST['wp-preview']) && 'dopreview' == $_POST['wp-preview'] )	$action = 'preview';$sendback = wp_get_referer();if ( strpos($sendback, 'post.php') !== false || strpos($sendback, 'post-new.php') !== false ) {	$sendback = admin_url('edit.php');	$sendback .= ( !empty( $post_type ) ) ? '?post_type=' . $post_type : '';} else {	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), $sendback );}switch($action) {case 'postajaxpost':case 'post':case 'post-quickpress-publish':case 'post-quickpress-save':	check_admin_referer('add-' . $post_type);	if ( 'post-quickpress-publish' == $action )		$_POST['publish'] = 'publish'; // tell write_post() to publish	if ( 'post-quickpress-publish' == $action || 'post-quickpress-save' == $action ) {		$_POST['comment_status'] = get_option('default_comment_status');		$_POST['ping_status'] = get_option('default_ping_status');	}	if ( !empty( $_POST['quickpress_post_ID'] ) ) {		$_POST['post_ID'] = (int) $_POST['quickpress_post_ID'];		$post_id = edit_post();	} else {		$post_id = 'postajaxpost' == $action ? edit_post() : write_post();	}	if ( 0 === strpos( $action, 'post-quickpress' ) ) {		$_POST['post_ID'] = $post_id;		// output the quickpress dashboard widget		require_once(ABSPATH . 'wp-admin/includes/dashboard.php');		wp_dashboard_quick_press_output();		exit;	}	redirect_post($post_id);	exit();	break;case 'edit':	$editing = true;	if ( empty( $post_id ) ) {		wp_redirect("post.php");		exit();	}	$p = $post_id;	if ( empty($post->ID) )		wp_die( __('You attempted to edit an item that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( !current_user_can($post_type_object->cap->edit_post, $post_id) )		wp_die( __('You are not allowed to edit this item.') );	if ( 'trash' == $post->post_status )		wp_die( __('You can&#8217;t edit this item because it is in the Trash. Please restore it and try again.') );	if ( null == $post_type_object )		wp_die( __('Unknown post type.') );	$post_type = $post->post_type;	if ( 'post' == $post_type ) {		$parent_file = "edit.php";		$submenu_file = "edit.php";	} else {		$parent_file = "edit.php?post_type=$post_type";		$submenu_file = "edit.php?post_type=$post_type";	}	if ( $last = wp_check_post_lock( $post->ID ) ) {		add_action('admin_notices', '_admin_notice_post_locked' );	} else {		wp_set_post_lock( $post->ID );		wp_enqueue_script('autosave');	}	$title = $post_type_object->labels->edit_item;	$post = get_post_to_edit($post_id);	if ( post_type_supports($post_type, 'comments') ) {		wp_enqueue_script('admin-comments');		enqueue_comment_hotkeys_js();	}	include('./edit-form-advanced.php');	break;case 'editattachment':	check_admin_referer('update-attachment_' . $post_id);	// Don't let these be changed	unset($_POST['guid']);	$_POST['post_type'] = 'attachment';	// Update the thumbnail filename	$newmeta = wp_get_attachment_metadata( $post_id, true );	$newmeta['thumb'] = $_POST['thumb'];	wp_update_attachment_metadata( $post_id, $newmeta );case 'editpost':	check_admin_referer('update-' . $post_type . '_' . $post_id);	$post_id = edit_post();	redirect_post($post_id); // Send user on their way while we keep working	exit();	break;case 'trash':	check_admin_referer('trash-' . $post_type . '_' . $post_id);	$post = & get_post($post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item to the Trash.') );	if ( ! wp_trash_post($post_id) )		wp_die( __('Error in moving to Trash.') );	wp_redirect( add_query_arg( array('trashed' => 1, 'ids' => $post_id), $sendback ) );	exit();	break;case 'untrash':	check_admin_referer('untrash-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item out of the Trash.') );	if ( ! wp_untrash_post($post_id) )		wp_die( __('Error in restoring from Trash.') );	wp_redirect( add_query_arg('untrashed', 1, $sendback) );	exit();	break;case 'delete':	check_admin_referer('delete-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to delete this item.') );	$force = !EMPTY_TRASH_DAYS;	if ( $post->post_type == 'attachment' ) {		$force = ( $force || !MEDIA_TRASH );		if ( ! wp_delete_attachment($post_id, $force) )			wp_die( __('Error in deleting.') );	} else {		if ( !wp_delete_post($post_id, $force) )			wp_die( __('Error in deleting.') );	}	wp_redirect( add_query_arg('deleted', 1, $sendback) );	exit();	break;case 'preview':	check_admin_referer( 'autosave', 'autosavenonce' );	$url = post_preview();	wp_redirect($url);	exit();	break;default:		wp_redirect('edit.php');	exit();	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Update Core administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('update_plugins') )	wp_die(__('You do not have sufficient permissions to update plugins for this site.'));function list_core_update( $update ) {	global $wp_local_package, $wpdb;	$version_string = ('en_US' == $update->locale && 'en_US' == get_locale() ) ?			$update->current : sprintf("%s&ndash;<strong>%s</strong>", $update->current, $update->locale);	$current = false;	if ( !isset($update->response) || 'latest' == $update->response )		$current = true;	$submit = __('Update Automatically');	$form_action = 'update-core.php?action=do-core-upgrade';	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$show_buttons = true;	if ( 'development' == $update->response ) {		$message = __('You are using a development version of WordPress.  You can update to the latest nightly build automatically or download the nightly build and install it manually:');		$download = __('Download nightly build');	} else {		if ( $current ) {			$message = sprintf(__('You have the latest version of WordPress. You do not need to update. However, if you want to re-install version %s, you can do so automatically or download the package and re-install manually:'), $version_string);			$submit = __('Re-install Automatically');			$form_action = 'update-core.php?action=do-core-reinstall';		} else {			$php_compat     = version_compare( $php_version, $update->php_version, '>=' );			$mysql_compat   = version_compare( $mysql_version, $update->mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );			if ( !$mysql_compat && !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $update->current, $update->php_version, $update->mysql_version, $php_version, $mysql_version );			elseif ( !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $update->current, $update->php_version, $php_version );			elseif ( !$mysql_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $update->current, $update->mysql_version, $mysql_version );			else				$message = 	sprintf(__('You can update to <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> automatically or download the package and install it manually:'), $version_string);			if ( !$mysql_compat || !$php_compat )				$show_buttons = false;		}		$download = sprintf(__('Download %s'), $version_string);	}	echo '<p>';	echo $message;	echo '</p>';	echo '<form method="post" action="' . $form_action . '" name="upgrade" class="upgrade">';	wp_nonce_field('upgrade-core');	echo '<p>';	echo '<input name="version" value="'. esc_attr($update->current) .'" type="hidden"/>';	echo '<input name="locale" value="'. esc_attr($update->locale) .'" type="hidden"/>';	if ( $show_buttons ) {		echo '<input id="upgrade" class="button" type="submit" value="' . esc_attr($submit) . '" name="upgrade" />&nbsp;';		echo '<a href="' . esc_url($update->package) . '" class="button">' . $download . '</a>&nbsp;';	}	if ( 'en_US' != $update->locale )		if ( !isset( $update->dismissed ) || !$update->dismissed )			echo '<input id="dismiss" class="button" type="submit" value="' . esc_attr__('Hide this update') . '" name="dismiss" />';		else			echo '<input id="undismiss" class="button" type="submit" value="' . esc_attr__('Bring back this update') . '" name="undismiss" />';	echo '</p>';	if ( 'en_US' != $update->locale && ( !isset($wp_local_package) || $wp_local_package != $update->locale ) )	    echo '<p class="hint">'.__('This localized version contains both the translation and various other localization fixes. You can skip upgrading if you want to keep your current translation.').'</p>';	else if ( 'en_US' == $update->locale && get_locale() != 'en_US' ) {	    echo '<p class="hint">'.sprintf( __('You are about to install WordPress %s <strong>in English.</strong> There is a chance this upgrade will break your translation. You may prefer to wait for the localized version to be released.'), $update->current ).'</p>';	}	echo '</form>';}function dismissed_updates() {	$dismissed = get_core_updates( array( 'dismissed' => true, 'available' => false ) );	if ( $dismissed ) {		$show_text = esc_js(__('Show hidden updates'));		$hide_text = esc_js(__('Hide hidden updates'));	?>	<script type="text/javascript">		jQuery(function($) {			$('dismissed-updates').show();			$('#show-dismissed').toggle(function(){$(this).text('<?php echo $hide_text; ?>');}, function() {$(this).text('<?php echo $show_text; ?>')});			$('#show-dismissed').click(function() { $('#dismissed-updates').toggle('slow');});		});	</script>	<?php		echo '<p class="hide-if-no-js"><a id="show-dismissed" href="#">'.__('Show hidden updates').'</a></p>';		echo '<ul id="dismissed-updates" class="core-updates dismissed">';		foreach( (array) $dismissed as $update) {			echo '<li>';			list_core_update( $update );			echo '</li>';		}		echo '</ul>';	}}/** * Display upgrade WordPress for downloading latest or upgrading automatically form. * * @since 2.7 * * @return null */function core_upgrade_preamble() {	global $upgrade_error;	$updates = get_core_updates();?>	<div class="wrap">	<?php screen_icon('tools'); ?>	<h2><?php _e('WordPress Updates'); ?></h2><?php	if ( $upgrade_error ) {		echo '<div class="error"><p>';		_e('Please select one or more plugins to upgrade.');		echo '</p></div>';	}	if ( !isset($updates[0]->response) || 'latest' == $updates[0]->response ) {		echo '<h3>';		_e('You have the latest version of WordPress.');		echo '</h3>';	} else {		echo '<div class="updated"><p>';		_e('<strong>Important:</strong> before updating, please <a href="http://codex.wordpress.org/WordPress_Backups">backup your database and files</a>. For help with updates, visit the <a href="http://codex.wordpress.org/Updating_WordPress">Updating WordPress</a> Codex page.');		echo '</p></div>';		echo '<h3 class="response">';		_e( 'An updated version of WordPress is available.' );		echo '</h3>';	}	echo '<ul class="core-updates">';	$alternate = true;	foreach( (array) $updates as $update ) {		$class = $alternate? ' class="alternate"' : '';		$alternate = !$alternate;		echo "<li $class>";		list_core_update( $update );		echo '</li>';	}	echo '</ul>';	echo '<p>' . __( 'While your site is being updated, it will be in maintenance mode. As soon as your updates are complete, your site will return to normal.' ) . '</p>';	dismissed_updates();	list_plugin_updates();	list_theme_updates();	do_action('core_upgrade_preamble');	echo '</div>';}function list_plugin_updates() {	global $wp_version;	$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);	require_once(ABSPATH . 'wp-admin/includes/plugin-install.php');	$plugins = get_plugin_updates();	if ( empty( $plugins ) ) {		echo '<h3>' . __( 'Plugins' ) . '</h3>';		echo '<p>' . __( 'Your plugins are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-plugin-upgrade';	$core_updates = get_core_updates();	if ( !isset($core_updates[0]->response) || 'latest' == $core_updates[0]->response || 'development' == $core_updates[0]->response || version_compare( $core_updates[0]->current, $cur_wp_version, '=') )		$core_update_version = false;	else		$core_update_version = $core_updates[0]->current;	?><h3><?php _e( 'Plugins' ); ?></h3><p><?php _e( 'The following plugins have new versions available. Check the ones you want to update and then click &#8220;Update Plugins&#8221;.' ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-plugins" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-plugins" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $plugins as $plugin_file => $plugin_data) {		$info = plugins_api('plugin_information', array('slug' => $plugin_data->update->slug ));		// Get plugin compat for running version of WordPress.		if ( isset($info->tested) && version_compare($info->tested, $cur_wp_version, '>=') ) {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: 100%% (according to its author)'), $cur_wp_version);		} elseif ( isset($info->compatibility[$cur_wp_version][$plugin_data->update->new_version]) ) {			$compat = $info->compatibility[$cur_wp_version][$plugin_data->update->new_version];			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $cur_wp_version, $compat[0], $compat[2], $compat[1]);		} else {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $cur_wp_version);		}		// Get plugin compat for updated version of WordPress.		if ( $core_update_version ) {			if ( isset($info->compatibility[$core_update_version][$plugin_data->update->new_version]) ) {				$update_compat = $info->compatibility[$core_update_version][$plugin_data->update->new_version];				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $core_update_version, $update_compat[0], $update_compat[2], $update_compat[1]);			} else {				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $core_update_version);			}		}		// Get the upgrade notice for the new plugin version.		if ( isset($plugin_data->update->upgrade_notice) ) {			$upgrade_notice = '<br />' . strip_tags($plugin_data->update->upgrade_notice);		} else {			$upgrade_notice = '';		}		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' /></th>		<td class='plugin-title'><strong>{$plugin_data->Name}</strong>" . sprintf(__('You have version %1$s installed. Update to %2$s.'), $plugin_data->Version, $plugin_data->update->new_version) . $compat . $upgrade_notice . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-plugins-2" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p></form><?php}function list_theme_updates() {	$themes = get_theme_updates();	if ( empty( $themes ) ) {		echo '<h3>' . __( 'Themes' ) . '</h3>';		echo '<p>' . __( 'Your themes are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-theme-upgrade';?><h3><?php _e( 'Themes' ); ?></h3><p><?php _e( 'The following themes have new versions available. Check the ones you want to update and then click &#8220;Update Themes&#8221;.' ); ?></p><p><?php printf( __('<strong>Please Note:</strong> Any customizations you have made to the Themes files will be lost. Please consider using <a href="%s">child themes</a> for modifications.'), _x('http://codex.wordpress.org/Child_Themes', 'Link used in suggestion to use child themes in GUU') ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-themes" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-themes" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-themes-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $themes as $stylesheet => $theme_data) {		$screenshot = $theme_data->{'Theme Root URI'} . '/' . $stylesheet . '/' . $theme_data->Screenshot;		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($stylesheet) . "' /></th>		<td class='plugin-title'><img src='$screenshot' width='64' height='64' style='float:left; padding: 5px' /><strong>{$theme_data->Name}</strong>" .  sprintf(__('You have version %1$s installed. Update to %2$s.'), $theme_data->Version, $theme_data->update['new_version']) . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-themes-2" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p></form><?php}/** * Upgrade WordPress core display. * * @since 2.7 * * @return null */function do_core_upgrade( $reinstall = false ) {	global $wp_filesystem;	if ( $reinstall )		$url = 'update-core.php?action=do-core-reinstall';	else		$url = 'update-core.php?action=do-core-upgrade';	$url = wp_nonce_url($url, 'upgrade-core');	if ( false === ($credentials = request_filesystem_credentials($url, '', false, ABSPATH)) )		return;	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	if ( ! WP_Filesystem($credentials, ABSPATH) ) {		request_filesystem_credentials($url, '', true, ABSPATH); //Failed to connect, Error and request again		return;	}?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e('Update WordPress'); ?></h2><?php	if ( $wp_filesystem->errors->get_error_code() ) {		foreach ( $wp_filesystem->errors->get_error_messages() as $message )			show_message($message);		echo '</div>';		return;	}	if ( $reinstall )		$update->response = 'reinstall';	$result = wp_update_core($update, 'show_message');	if ( is_wp_error($result) ) {		show_message($result);		if ('up_to_date' != $result->get_error_code() )			show_message( __('Installation Failed') );	} else {		show_message( __('WordPress updated successfully') );		show_message( '<strong>' . __('Actions:') . '</strong> <a href="' . esc_url( admin_url() ) . '">' . __('Go to Dashboard') . '</a>' );	}	echo '</div>';}function do_dismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	dismiss_core_update( $update );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function do_undismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	undismiss_core_update( $version, $locale );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function no_update_actions($actions) {	return '';}$action = isset($_GET['action']) ? $_GET['action'] : 'upgrade-core';$upgrade_error = false;if ( 'do-plugin-upgrade' == $action && !isset($_GET['plugins']) && !isset($_POST['checked']) ) {	$upgrade_error = true;	$action = 'upgrade-core';}$title = __('WordPress Updates');$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen lets you update to the latest version of WordPress as well as update your themes and plugins from the WordPress.org repository. When updates are available, the number of available updates will appear in a bubble on the left hand menu as a notification. It is very important to keep your WordPress installation up to date for security reasons, so when you see a number appear, make sure you take the time to update, which is an easy process.') . '</p>' .	'<p>' . __('Updating your WordPress installation is a simple one-click procedure; just click on the Update button when it says a new version is available.') . '</p>' .	'<p>' . __('To upgrade themes or plugins from this screen, use the checkboxes to make your selection and click on the appropriate Update button. Check the box at the top of the Themes or Plugins section to select all and update them all at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_Updates_SubPanel" target="_blank">Documentation on Updating WordPress</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( 'upgrade-core' == $action ) {	wp_version_check();	require_once('./admin-header.php');	core_upgrade_preamble();} elseif ( 'do-core-upgrade' == $action || 'do-core-reinstall' == $action ) {	check_admin_referer('upgrade-core');	// do the (un)dismiss actions before headers,	// so that they can redirect	if ( isset( $_POST['dismiss'] ) )		do_dismiss_core_update();	elseif ( isset( $_POST['undismiss'] ) )		do_undismiss_core_update();	require_once('./admin-header.php');	if ( 'do-core-reinstall' == $action )		$reinstall = true;	else		$reinstall = false;	if ( isset( $_POST['upgrade'] ) )		do_core_upgrade($reinstall);} elseif ( 'do-plugin-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['plugins'] ) ) {		$plugins = explode( ',', $_GET['plugins'] );	} elseif ( isset( $_POST['checked'] ) ) {		$plugins = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected&plugins=' . urlencode(implode(',', $plugins));	$url = wp_nonce_url($url, 'bulk-update-plugins');	$title = __('Update Plugins');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('plugins');	echo '<h2>' . esc_html__('Update Plugins') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';} elseif ( 'do-theme-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['themes'] ) ) {		$themes = explode( ',', $_GET['themes'] );	} elseif ( isset( $_POST['checked'] ) ) {		$themes = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected-themes&themes=' . urlencode(implode(',', $themes));	$url = wp_nonce_url($url, 'bulk-update-themes');	$title = __('Update Themes');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('themes');	echo '<h2>' . esc_html__('Update Themes') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';}include('./admin-footer.php');
<?php/** * Edit Tags Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars( array('action', 'tag', 'taxonomy', 'post_type') );if ( empty($taxonomy) )	$taxonomy = 'post_tag';if ( !taxonomy_exists($taxonomy) )	wp_die(__('Invalid taxonomy'));$tax = get_taxonomy($taxonomy);$title = $tax->labels->name;if ( empty($post_type) || !in_array( $post_type, get_post_types( array('public' => true) ) ) )	$post_type = 'post';if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit-tags.php?taxonomy=$taxonomy&amp;post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = "edit-tags.php?taxonomy=$taxonomy";}if ( isset( $_GET['action'] ) && isset($_GET['delete_tags']) && ( 'delete' == $_GET['action'] || 'delete' == $_GET['action2'] ) )	$action = 'bulk-delete';switch($action) {case 'add-tag':	check_admin_referer('add-tag');	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 1, $location);	else		$location = add_query_arg('message', 4, $location);	wp_redirect($location);	exit;break;case 'delete':	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( !isset( $_GET['tag_ID'] ) ) {		wp_redirect($location);		exit;	}	$tag_ID = (int) $_GET['tag_ID'];	check_admin_referer('delete-tag_' .  $tag_ID);	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	wp_delete_term( $tag_ID, $taxonomy);	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'bulk-delete':	check_admin_referer('bulk-tags');	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$tags = (array) $_GET['delete_tags'];	foreach( $tags as $tag_ID ) {		wp_delete_term( $tag_ID, $taxonomy);	}	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	$location = add_query_arg('message', 6, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = $tax->labels->edit_item;	require_once ('admin-header.php');	$tag_ID = (int) $_GET['tag_ID'];	$tag = get_term($tag_ID, $taxonomy, OBJECT, 'edit');	include('./edit-tag-form.php');break;case 'editedtag':	$tag_ID = (int) $_POST['tag_ID'];	check_admin_referer('update-tag_' . $tag_ID);	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_update_term($tag_ID, $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;default:if ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('admin-tags');if ( current_user_can($tax->cap->edit_terms) )	wp_enqueue_script('inline-edit-tax');if ( 'category' == $taxonomy || 'post_tag' == $taxonomy ) {	if ( 'category' == $taxonomy )		$help = '<p>' . sprintf(__('You can use categories to define sections of your site and group related posts. The default category is &#8220;Uncategorized&#8221; until you change it in your <a href="%s">writing settings</a>.'), 'options-writing.php') . '</p>';	else		$help = '<p>' . __('You can assign keywords to your posts using Post Tags. Unlike categories, tags have no hierarchy, meaning there&#8217;s no relationship from one tag to another.') . '</p>';	$help .='<p>' . __('What&#8217;s the difference between categories and tags? Normally, tags are ad-hoc keywords that identify important information in your post (names, subjects, etc) that may or may not recur in other posts, while categories are pre-determined sections. If you think of your site like a book, the categories are like the Table of Contents and the tags are like the terms in the index.') . '</p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('When adding a new category on this screen, you&#8217;ll fill in the following fields:') . '</p>';	else		$help .= '<p>' . __('When adding a new tag on this screen, you&#8217;ll fill in the following fields:') . '</p>';	$help .= '<ul>' .		'<li>' . __('<strong>Name</strong> - The name is how it appears on your site.') . '</li>';	if ( ! global_terms_enabled() )		$help .= '<li>' . __('<strong>Slug</strong> - The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.') . '</li>';	if ( 'category' == $taxonomy )		$help .= '<li>' . __('<strong>Parent</strong> - Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional. To create a subcategory, just choose another category from the Parent dropdown.') . '</li>';	$help .= '<li>' . __('<strong>Description</strong> - The description is not prominent by default; however, some themes may display it.') . '</li>' .		'</ul>' .		'<p>' . __('You can change the display of this screen using the Screen Options tab to set how many items are displayed per screen and to display/hide columns in the table.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Manage_Categories_SubPanel" target="_blank">Categories Documentation</a>') . '</p>';	else		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Post_Tags_SubPanel" target="_blank">Tags Documentation</a>') . '</p>';	$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';	add_contextual_help($current_screen, $help);	unset($help);}require_once ('admin-header.php');$messages[1] = __('Item added.');$messages[2] = __('Item deleted.');$messages[3] = __('Item updated.');$messages[4] = __('Item not added.');$messages[5] = __('Item not updated.');$messages[6] = __('Items deleted.');?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?php if ( isset($_GET['message']) && ( $msg = (int) $_GET['message'] ) ) : ?><div id="message" class="updated"><p><?php echo $messages[$msg]; ?></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);endif; ?><div id="ajax-response"></div><form class="search-form" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><p class="search-box">	<label class="screen-reader-text" for="tag-search-input"><?php echo $tax->labels->search_items; ?>:</label>	<input type="text" id="tag-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $tax->labels->search_items );  ?>" class="button" /></p></form><br class="clear" /><div id="col-container"><div id="col-right"><div class="col-wrap"><form id="posts-filter" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><div class="tablenav"><?php$pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$tags_per_page = (int) get_user_option( 'edit_' .  $taxonomy . '_per_page' );if ( empty($tags_per_page) || $tags_per_page < 1 )	$tags_per_page = 20;if ( 'post_tag' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_tags_per_page', $tags_per_page );	$tags_per_page = apply_filters( 'tagsperpage', $tags_per_page ); // Old filter} elseif ( 'category' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_categories_per_page', $tags_per_page ); // Old filter} else {	$tags_per_page = apply_filters( 'edit_' . $taxonomy . '_per_page', $tags_per_page );}$searchterms = !empty($_GET['s']) ? trim(stripslashes($_GET['s'])) : '';$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil(wp_count_terms($taxonomy, array('search' => $searchterms)) / $tags_per_page),	'current' => $pagenum));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-tags'); ?></div><br class="clear" /></div><div class="clear"></div><table class="widefat tag fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers($current_screen); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:tag"><?php tag_rows( $pagenum, $tags_per_page, $searchterms, $taxonomy ); ?>	</tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><br class="clear" /></form><?php if ( 'category' == $taxonomy ) : ?><div class="form-wrap"><p><?php printf(__('<strong>Note:</strong><br />Deleting a category does not delete the posts in that category. Instead, posts that were only assigned to the deleted category are set to the category <strong>%s</strong>.'), apply_filters('the_category', get_cat_name(get_option('default_category')))) ?></p><?php if ( current_user_can( 'import' ) ) : ?><p><?php printf(__('Categories can be selectively converted to tags using the <a href="%s">category to tag converter</a>.'), 'import.php') ?></p><?php endif; ?></div><?php elseif ( 'post_tag' == $taxonomy && current_user_can( 'import' ) ) : ?><div class="form-wrap"><p><?php printf(__('Tags can be selectively converted to categories using the <a href="%s">tag to category converter</a>'), 'import.php') ;?>.</p></div><?php endif;do_action('after-' . $taxonomy . '-table', $taxonomy);?></div></div><!-- /col-right --><div id="col-left"><div class="col-wrap"><?phpif ( !is_taxonomy_hierarchical($taxonomy) ) {	if ( current_user_can( $tax->cap->edit_terms ) )		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false, 'link' => 'edit' ) );	else		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false ) );	if ( $tag_cloud ) :	?><div class="tagcloud"><h3><?php echo $tax->labels->popular_items; ?></h3><?php echo $tag_cloud; unset( $tag_cloud ); ?></div><?phpendif;}if ( current_user_can($tax->cap->edit_terms) ) {	if ( 'category' == $taxonomy )		do_action('add_category_form_pre', (object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_pre_add_form	else		do_action('add_tag_form_pre', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categories	do_action($taxonomy . '_pre_add_form', $taxonomy);?><div class="form-wrap"><h3><?php echo $tax->labels->add_new_item; ?></h3><form id="addtag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="add-tag" /><input type="hidden" name="screen" value="<?php echo esc_attr($current_screen->id); ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><?php wp_nonce_field('add-tag'); ?><div class="form-field form-required">	<label for="tag-name"><?php _ex('Name', 'Taxonomy Name'); ?></label>	<input name="tag-name" id="tag-name" type="text" value="" size="40" aria-required="true" />	<p><?php _e('The name is how it appears on your site.'); ?></p></div><?php if ( ! global_terms_enabled() ) : ?><div class="form-field">	<label for="tag-slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label>	<input name="slug" id="tag-slug" type="text" value="" size="40" />	<p><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></div><?php endif; // is_multisite() ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?><div class="form-field">	<label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label>	<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'taxonomy' => $taxonomy, 'name' => 'parent', 'orderby' => 'name', 'hierarchical' => true, 'show_option_none' => __('None'))); ?>	<?php if ( 'category' == $taxonomy ) : // @todo: Generic text for hierarchical taxonomies ?>		<p><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></p>	<?php endif; ?></div><?php endif; // is_taxonomy_hierarchical() ?><div class="form-field">	<label for="tag-description"><?php _ex('Description', 'Taxonomy Description'); ?></label>	<textarea name="description" id="tag-description" rows="5" cols="40"></textarea>	<p><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></p></div><?phpif ( ! is_taxonomy_hierarchical($taxonomy) )	do_action('add_tag_form_fields', $taxonomy);do_action($taxonomy . '_add_form_fields', $taxonomy);?><p class="submit"><input type="submit" class="button" name="submit" id="submit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" /></p><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form',	(object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_add_formelse	do_action('add_tag_form', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categoriesdo_action($taxonomy . '_add_form', $taxonomy);?></form></div><?php } ?></div></div><!-- /col-left --></div><!-- /col-container --></div><!-- /wrap --><?php inline_edit_term_row('edit-tags', $taxonomy); ?><?phpbreak;}include('./admin-footer.php');?>
<?php/** * Post functions and post utility function. * * @package WordPress * @subpackage Post * @since 1.5.0 *///// Post Type Registration///** * Creates the initial post types when 'init' action is fired. */function create_initial_post_types() {	register_post_type( 'post', array(		'public'  => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'page', array(		'public' => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'page',		'hierarchical' => true,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'attachment', array(		'labels' => array(			'name' => __( 'Media' ),		),		'public' => true,		'show_ui' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'media.php?attachment_id=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'can_export' => false,		'show_in_nav_menus' => false,	) );	register_post_type( 'revision', array(		'labels' => array(			'name' => __( 'Revisions' ),			'singular_name' => __( 'Revision' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_type( 'nav_menu_item', array(		'labels' => array(			'name' => __( 'Navigation Menu Items' ),			'singular_name' => __( 'Navigation Menu Item' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_status( 'publish', array(		'label'       => _x( 'Published', 'post' ),		'public'      => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Published <span class="count">(%s)</span>', 'Published <span class="count">(%s)</span>' ),	) );	register_post_status( 'future', array(		'label'       => _x( 'Scheduled', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop('Scheduled <span class="count">(%s)</span>', 'Scheduled <span class="count">(%s)</span>' ),	) );	register_post_status( 'draft', array(		'label'       => _x( 'Draft', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Draft <span class="count">(%s)</span>', 'Drafts <span class="count">(%s)</span>' ),	) );	register_post_status( 'pending', array(		'label'       => _x( 'Pending', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Pending <span class="count">(%s)</span>', 'Pending <span class="count">(%s)</span>' ),	) );	register_post_status( 'private', array(		'label'       => _x( 'Private', 'post' ),		'private'     => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Private <span class="count">(%s)</span>', 'Private <span class="count">(%s)</span>' ),	) );	register_post_status( 'trash', array(		'label'       => _x( 'Trash', 'post' ),		'internal'    => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>' ),		'show_in_admin_status_list' => true,	) );	register_post_status( 'auto-draft', array(		'label'    => 'auto-draft',		'internal' => true,		'_builtin' => true, /* internal use only. */	) );	register_post_status( 'inherit', array(		'label'    => 'inherit',		'internal' => true,		'_builtin' => true, /* internal use only. */		'exclude_from_search' => false,	) );}add_action( 'init', 'create_initial_post_types', 0 ); // highest priority/** * Retrieve attached file path based on attachment ID. * * You can optionally send it through the 'get_attached_file' filter, but by * default it will just return the file path unfiltered. * * The function works by getting the single post meta name, named * '_wp_attached_file' and returning it. This is a convenience function to * prevent looking up the meta name and provide a mechanism for sending the * attached filename through a filter. * * @since 2.0.0 * @uses apply_filters() Calls 'get_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID. * @param bool $unfiltered Whether to apply filters. * @return string The file path to the attached file. */function get_attached_file( $attachment_id, $unfiltered = false ) {	$file = get_post_meta( $attachment_id, '_wp_attached_file', true );	// If the file is relative, prepend upload dir	if ( 0 !== strpos($file, '/') && !preg_match('|^.:\\\|', $file) && ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) )		$file = $uploads['basedir'] . "/$file";	if ( $unfiltered )		return $file;	return apply_filters( 'get_attached_file', $file, $attachment_id );}/** * Update attachment file path based on attachment ID. * * Used to update the file path of the attachment, which uses post meta name * '_wp_attached_file' to store the path of the attachment. * * @since 2.1.0 * @uses apply_filters() Calls 'update_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID * @param string $file File path for the attachment * @return bool False on failure, true on success. */function update_attached_file( $attachment_id, $file ) {	if ( !get_post( $attachment_id ) )		return false;	$file = apply_filters( 'update_attached_file', $file, $attachment_id );	$file = _wp_relative_upload_path($file);	return update_post_meta( $attachment_id, '_wp_attached_file', $file );}/** * Return relative path to an uploaded file. * * The path is relative to the current upload dir. * * @since 2.9.0 * @uses apply_filters() Calls '_wp_relative_upload_path' on file path. * * @param string $path Full path to the file * @return string relative path on success, unchanged path on failure. */function _wp_relative_upload_path( $path ) {	$new_path = $path;	if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) {		if ( 0 === strpos($new_path, $uploads['basedir']) ) {				$new_path = str_replace($uploads['basedir'], '', $new_path);				$new_path = ltrim($new_path, '/');		}	}	return apply_filters( '_wp_relative_upload_path', $new_path, $path );}/** * Retrieve all children of the post parent ID. * * Normally, without any enhancements, the children would apply to pages. In the * context of the inner workings of WordPress, pages, posts, and attachments * share the same table, so therefore the functionality could apply to any one * of them. It is then noted that while this function does not work on posts, it * does not mean that it won't work on posts. It is recommended that you know * what context you wish to retrieve the children of. * * Attachments may also be made the child of a post, so if that is an accurate * statement (which needs to be verified), it would then be possible to get * all of the attachments for a post. Attachments have since changed since * version 2.5, so this is most likely unaccurate, but serves generally as an * example of what is possible. * * The arguments listed as defaults are for this function and also of the * {@link get_posts()} function. The arguments are combined with the * get_children defaults and are then passed to the {@link get_posts()} * function, which accepts additional arguments. You can replace the defaults in * this function, listed below and the additional arguments listed in the * {@link get_posts()} function. * * The 'post_parent' is the most important argument and important attention * needs to be paid to the $args parameter. If you pass either an object or an * integer (number), then just the 'post_parent' is grabbed and everything else * is lost. If you don't specify any arguments, then it is assumed that you are * in The Loop and the post parent will be grabbed for from the current post. * * The 'post_parent' argument is the ID to get the children. The 'numberposts' * is the amount of posts to retrieve that has a default of '-1', which is * used to get all of the posts. Giving a number higher than 0 will only * retrieve that amount of posts. * * The 'post_type' and 'post_status' arguments can be used to choose what * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress * post types are 'post', 'pages', and 'attachments'. The 'post_status' * argument will accept any post status within the write administration panels. * * @see get_posts() Has additional arguments that can be replaced. * @internal Claims made in the long description might be inaccurate. * * @since 2.0.0 * * @param mixed $args Optional. User defined arguments for replacing the defaults. * @param string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N. * @return array|bool False on failure and the type will be determined by $output parameter. */function &get_children($args = '', $output = OBJECT) {	$kids = array();	if ( empty( $args ) ) {		if ( isset( $GLOBALS['post'] ) ) {			$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );		} else {			return $kids;		}	} elseif ( is_object( $args ) ) {		$args = array('post_parent' => (int) $args->post_parent );	} elseif ( is_numeric( $args ) ) {		$args = array('post_parent' => (int) $args);	}	$defaults = array(		'numberposts' => -1, 'post_type' => 'any',		'post_status' => 'any', 'post_parent' => 0,	);	$r = wp_parse_args( $args, $defaults );	$children = get_posts( $r );	if ( !$children )		return $kids;	update_post_cache($children);	foreach ( $children as $key => $child )		$kids[$child->ID] =& $children[$key];	if ( $output == OBJECT ) {		return $kids;	} elseif ( $output == ARRAY_A ) {		foreach ( (array) $kids as $kid )			$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);		return $weeuns;	} elseif ( $output == ARRAY_N ) {		foreach ( (array) $kids as $kid )			$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));		return $babes;	} else {		return $kids;	}}/** * Get extended entry info (<!--more-->). * * There should not be any space after the second dash and before the word * 'more'. There can be text or space(s) after the word 'more', but won't be * referenced. * * The returned array has 'main' and 'extended' keys. Main has the text before * the <code><!--more--></code>. The 'extended' key has the content after the * <code><!--more--></code> comment. * * @since 1.0.0 * * @param string $post Post content. * @return array Post before ('main') and after ('extended'). */function get_extended($post) {	//Match the new style more links	if ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {		list($main, $extended) = explode($matches[0], $post, 2);	} else {		$main = $post;		$extended = '';	}	// Strip leading and trailing whitespace	$main = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $main);	$extended = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $extended);	return array('main' => $main, 'extended' => $extended);}/** * Retrieves post data given a post ID or post object. * * See {@link sanitize_post()} for optional $filter values. Also, the parameter * $post, must be given as a variable, since it is passed by reference. * * @since 1.5.1 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post * * @param int|object $post Post ID or post object. * @param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional, default is raw. * @return mixed Post data */function &get_post(&$post, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($post) ) {		if ( isset($GLOBALS['post']) )			$_post = & $GLOBALS['post'];		else			return $null;	} elseif ( is_object($post) && empty($post->filter) ) {		_get_post_ancestors($post);		$_post = sanitize_post($post, 'raw');		wp_cache_add($post->ID, $_post, 'posts');	} else {		if ( is_object($post) )			$post_id = $post->ID;		else			$post_id = $post;		$post_id = (int) $post_id;		if ( ! $_post = wp_cache_get($post_id, 'posts') ) {			$_post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d LIMIT 1", $post_id));			if ( ! $_post )				return $null;			_get_post_ancestors($_post);			$_post = sanitize_post($_post, 'raw');			wp_cache_add($_post->ID, $_post, 'posts');		}	}	if ($filter != 'raw')		$_post = sanitize_post($_post, $filter);	if ( $output == OBJECT ) {		return $_post;	} elseif ( $output == ARRAY_A ) {		$__post = get_object_vars($_post);		return $__post;	} elseif ( $output == ARRAY_N ) {		$__post = array_values(get_object_vars($_post));		return $__post;	} else {		return $_post;	}}/** * Retrieve ancestors of a post. * * @since 2.5.0 * * @param int|object $post Post ID or post object * @return array Ancestor IDs or empty array if none are found. */function get_post_ancestors($post) {	$post = get_post($post);	if ( !empty($post->ancestors) )		return $post->ancestors;	return array();}/** * Retrieve data from a post field based on Post ID. * * Examples of the post field will be, 'post_type', 'post_status', 'content', * etc and based off of the post object property or key names. * * The context values are based off of the taxonomy filter functions and * supported values are found within those functions. * * @since 2.3.0 * @uses sanitize_post_field() See for possible $context values. * * @param string $field Post field name * @param id $post Post ID * @param string $context Optional. How to filter the field. Default is display. * @return WP_Error|string Value in post field or WP_Error on failure */function get_post_field( $field, $post, $context = 'display' ) {	$post = (int) $post;	$post = get_post( $post );	if ( is_wp_error($post) )		return $post;	if ( !is_object($post) )		return '';	if ( !isset($post->$field) )		return '';	return sanitize_post_field($field, $post->$field, $post->ID, $context);}/** * Retrieve the mime type of an attachment based on the ID. * * This function can be used with any post type, but it makes more sense with * attachments. * * @since 2.0.0 * * @param int $ID Optional. Post ID. * @return bool|string False on failure or returns the mime type */function get_post_mime_type($ID = '') {	$post = & get_post($ID);	if ( is_object($post) )		return $post->post_mime_type;	return false;}/** * Retrieve the post status based on the Post ID. * * If the post ID is of an attachment, then the parent post status will be given * instead. * * @since 2.0.0 * * @param int $ID Post ID * @return string|bool Post status or false on failure. */function get_post_status($ID = '') {	$post = get_post($ID);	if ( !is_object($post) )		return false;	// Unattached attachments are assumed to be published.	if ( ('attachment' == $post->post_type) && ('inherit' == $post->post_status) && ( 0 == $post->post_parent) )		return 'publish';	if ( ('attachment' == $post->post_type) && $post->post_parent && ($post->ID != $post->post_parent) )		return get_post_status($post->post_parent);	return $post->post_status;}/** * Retrieve all of the WordPress supported post statuses. * * Posts have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of post statuses. */function get_post_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'pending'		=> __('Pending Review'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Retrieve all of the WordPress support page statuses. * * Pages have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of page statuses. */function get_page_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post status based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post status name. * * * Optional $args contents: * * label - A descriptive name for the post status marked for translation. Defaults to $post_status. * public - Whether posts of this status should be shown in the admin UI. Defaults to true. * exclude_from_search - Whether to exclude posts with this post status from search results. Defaults to true. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses Inserts new post status object into the list * * @param string $post_status Name of the post status. * @param array|string $args See above description. */function register_post_status($post_status, $args = array()) {	global $wp_post_statuses;	if (!is_array($wp_post_statuses))		$wp_post_statuses = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array('label' => false, 'label_count' => false, 'exclude_from_search' => null, '_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'hierarchical' => false, 'public' => null, 'internal' => null, 'protected' => null, 'private' => null, 'show_in_admin_all' => null, 'publicly_queryable' => null, 'show_in_admin_status_list' => null, 'show_in_admin_all_list' => null, 'single_view_cap' => null);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_status = sanitize_user($post_status, true);	$args->name = $post_status;	if ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )		$args->internal = true;	if ( null === $args->public  )		$args->public = false;	if ( null === $args->private  )		$args->private = false;	if ( null === $args->protected  )		$args->protected = false;	if ( null === $args->internal  )		$args->internal = false;	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	if ( null === $args->exclude_from_search )		$args->exclude_from_search = $args->internal;	if ( null === $args->show_in_admin_all_list )		$args->show_in_admin_all_list = !$args->internal;	if ( null === $args->show_in_admin_status_list )			$args->show_in_admin_status_list = !$args->internal;	if ( null === $args->single_view_cap )		$args->single_view_cap = $args->public ? '' : 'edit';	if ( false === $args->label )		$args->label = $post_status;	if ( false === $args->label_count )		$args->label_count = array( $args->label, $args->label );	$wp_post_statuses[$post_status] = $args;	return $args;}/** * Retrieve a post status object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_statuses * * @param string $post_type The name of a registered post status * @return object A post status object */function get_post_status_object( $post_status ) {	global $wp_post_statuses;	if ( empty($wp_post_statuses[$post_status]) )		return null;	return $wp_post_statuses[$post_status];}/** * Get a list of all registered post status objects. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_status_object * * @param array|string $args An array of key => value arguments to match against the post status objects. * @param string $output The type of output to return, either post status 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_statuses;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_statuses, $args, $operator, $field);}/** * Whether the post type is hierarchical. * * A false return value might also mean that the post type does not exist. * * @since 3.0.0 * @see get_post_type_object * * @param string $post Post type name * @return bool Whether post type is hierarchical. */function is_post_type_hierarchical( $post_type ) {	if ( ! post_type_exists( $post_type ) )		return false;	$post_type = get_post_type_object( $post_type );	return $post_type->hierarchical;}/** * Checks if a post type is registered. * * @since 3.0.0 * @uses get_post_type_object() * * @param string Post type name * @return bool Whether post type is registered. */function post_type_exists( $post_type ) {	return (bool) get_post_type_object( $post_type );}/** * Retrieve the post type of the current post or of a given post. * * @since 2.1.0 * * @uses $post The Loop current post global * * @param mixed $the_post Optional. Post object or post ID. * @return bool|string post type or false on failure. */function get_post_type( $the_post = false ) {	global $post;	if ( false === $the_post )		$the_post = $post;	elseif ( is_numeric($the_post) )		$the_post = get_post($the_post);	if ( is_object($the_post) )		return $the_post->post_type;	return false;}/** * Retrieve a post type object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_types * @see register_post_type * @see get_post_types * * @param string $post_type The name of a registered post type * @return object A post type object */function get_post_type_object( $post_type ) {	global $wp_post_types;	if ( empty($wp_post_types[$post_type]) )		return null;	return $wp_post_types[$post_type];}/** * Get a list of all registered post type objects. * * @package WordPress * @subpackage Post * @since 2.9.0 * @uses $wp_post_types * @see register_post_type * * @param array|string $args An array of key => value arguments to match against the post type objects. * @param string $output The type of output to return, either post type 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_types;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_types, $args, $operator, $field);}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post type based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post type name. * * * Optional $args contents: * * - label - Name of the post type shown in the menu. Usually plural. If not set, labels['name'] will be used. * - description - A short descriptive summary of what the post type is. Defaults to blank. * - public - Whether posts of this type should be shown in the admin UI. Defaults to false. * - exclude_from_search - Whether to exclude posts with this post type from search results. Defaults to true if the type is not public, false if the type is public. * - publicly_queryable - Whether post_type queries can be performed from the front page.  Defaults to whatever public is set as. * - show_ui - Whether to generate a default UI for managing this post type. Defaults to true if the type is public, false if the type is not public. * - menu_position - The position in the menu order the post type should appear. Defaults to the bottom. * - menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon. * - capability_type - The post type to use for checking read, edit, and delete capabilities. Defaults to "post". * - capabilities - Array of capabilities for this post type. You can see accepted values in {@link get_post_type_capabilities()}. By default the capability_type is used to construct capabilities. * - hierarchical - Whether the post type is hierarchical. Defaults to false. * - supports - An alias for calling add_post_type_support() directly. See add_post_type_support() for Documentation. Defaults to none. * - register_meta_box_cb - Provide a callback function that will be called when setting up the meta boxes for the edit form.  Do remove_meta_box() and add_meta_box() calls in the callback. * - taxonomies - An array of taxonomy identifiers that will be registered for the post type.  Default is no taxonomies. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). * - labels - An array of labels for this post type. You can see accepted values in {@link get_post_type_labels()}. By default post labels are used for non-hierarchical types and page labels for hierarchical ones. * - permalink_epmask - The default rewrite endpoint bitmasks. * - rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize permastruct; default will use $post_type as slug. * - query_var - false to prevent queries, or string to value of the query var to use for this post type * - can_export - true allows this post type to be exported. * - show_in_nav_menus - true makes this post type available for selection in navigation menus. * - _builtin - true if this post type is a native or "built-in" post_type.  THIS IS FOR INTERNAL USE ONLY! * - _edit_link - URL segement to use for edit link of this post type.  Set to 'post.php?post=%d'.  THIS IS FOR INTERNAL USE ONLY! * * @since 2.9.0 * @uses $wp_post_types Inserts new post type object into the list * * @param string $post_type Name of the post type. * @param array|string $args See above description. * @return object the registered post type object */function register_post_type($post_type, $args = array()) {	global $wp_post_types, $wp_rewrite, $wp;	if ( !is_array($wp_post_types) )		$wp_post_types = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array(		'labels' => array(), 'description' => '', 'publicly_queryable' => null, 'exclude_from_search' => null,		'_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'capabilities' => array(), 'hierarchical' => false,		'public' => false, 'rewrite' => true, 'query_var' => true, 'supports' => array(), 'register_meta_box_cb' => null,		'taxonomies' => array(), 'show_ui' => null, 'menu_position' => null, 'menu_icon' => null,		'permalink_epmask' => EP_PERMALINK, 'can_export' => true, 'show_in_nav_menus' => null	);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_type = sanitize_user($post_type, true);	$args->name = $post_type;	// If not set, default to the setting for public.	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	// If not set, default to the setting for public.	if ( null === $args->show_ui )		$args->show_ui = $args->public;	// Whether to show this type in nav-menus.php.  Defaults to the setting for public.	if ( null === $args->show_in_nav_menus )		$args->show_in_nav_menus = $args->public;	// If not set, default to true if not public, false if public.	if ( null === $args->exclude_from_search )		$args->exclude_from_search = !$args->public;	if ( empty($args->capability_type) )		$args->capability_type = 'post';	$args->cap = get_post_type_capabilities( $args );	unset($args->capabilities);	if ( ! empty($args->supports) ) {		add_post_type_support($post_type, $args->supports);		unset($args->supports);	} else {		// Add default features		add_post_type_support($post_type, array('title', 'editor'));	}	if ( false !== $args->query_var && !empty($wp) ) {		if ( true === $args->query_var )			$args->query_var = $post_type;		$args->query_var = sanitize_title_with_dashes($args->query_var);		$wp->add_query_var($args->query_var);	}	if ( false !== $args->rewrite && '' != get_option('permalink_structure') ) {		if ( !is_array($args->rewrite) )			$args->rewrite = array();		if ( !isset($args->rewrite['slug']) )			$args->rewrite['slug'] = $post_type;		if ( !isset($args->rewrite['with_front']) )			$args->rewrite['with_front'] = true;		if ( $args->hierarchical )			$wp_rewrite->add_rewrite_tag("%$post_type%", '(.+?)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		else			$wp_rewrite->add_rewrite_tag("%$post_type%", '([^/]+)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		$wp_rewrite->add_permastruct($post_type, "{$args->rewrite['slug']}/%$post_type%", $args->rewrite['with_front'], $args->permalink_epmask);	}	if ( $args->register_meta_box_cb )		add_action('add_meta_boxes_' . $post_type, $args->register_meta_box_cb, 10, 1);	$args->labels = get_post_type_labels( $args );	$args->label = $args->labels->name;	$wp_post_types[$post_type] = $args;	add_action( 'future_' . $post_type, '_future_post_hook', 5, 2 );	foreach ( $args->taxonomies as $taxonomy ) {		register_taxonomy_for_object_type( $taxonomy, $post_type );	}	return $args;}/** * Builds an object with all post type capabilities out of a post type object * * Accepted keys of the capabilities array in the post type object: * - edit_post - The meta capability that controls editing a particular object of this post type. Defaults to "edit_ . $capability_type" (edit_post). * - edit_posts - The capability that controls editing objects of this post type as a class. Defaults to "edit_ . $capability_type . s" (edit_posts). * - edit_others_posts - The capability that controls editing objects of this post type that are owned by other users. Defaults to "edit_others_ . $capability_type . s" (edit_others_posts). * - publish_posts - The capability that controls publishing objects of this post type. Defaults to "publish_ . $capability_type . s" (publish_posts). * - read_post - The meta capability that controls reading a particular object of this post type. Defaults to "read_ . $capability_type" (read_post). * - read_private_posts - The capability that controls reading private posts. Defaults to "read_private . $capability_type . s" (read_private_posts). * - delete_post - The meta capability that controls deleting a particular object of this post type. Defaults to "delete_ . $capability_type" (delete_post). * * @since 3.0.0 * @param object $args * @return object object with all the capabilities as member variables */function get_post_type_capabilities( $args ) {	$defaults = array(		'edit_post'          => 'edit_'         . $args->capability_type,		'edit_posts'         => 'edit_'         . $args->capability_type . 's',		'edit_others_posts'  => 'edit_others_'  . $args->capability_type . 's',		'publish_posts'      => 'publish_'      . $args->capability_type . 's',		'read_post'          => 'read_'         . $args->capability_type,		'read_private_posts' => 'read_private_' . $args->capability_type . 's',		'delete_post'        => 'delete_'       . $args->capability_type,	);	$labels = array_merge( $defaults, $args->capabilities );	return (object) $labels;}/** * Builds an object with all post type labels out of a post type object * * Accepted keys of the label array in the post type object: * - name - general name for the post type, usually plural. The same and overriden by $post_type_object->label. Default is Posts/Pages * - singular_name - name for one object of this post type. Default is Post/Page * - add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a {@link http://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context} matching your post type. Example: <code>_x('Add New', 'product');</code> * - add_new_item - Default is Add New Post/Add New Page * - edit_item - Default is Edit Post/Edit Page * - new_item - Default is New Post/New Page * - view_item - Default is View Post/View Page * - search_items - Default is Search Posts/Search Pages * - not_found - Default is No posts found/No pages found * - not_found_in_trash - Default is No posts found in Trash/No pages found in Trash * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page: * * Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages.) * * @since 3.0.0 * @param object $post_type_object * @return object object with all the labels as member variables */function get_post_type_labels( $post_type_object ) {	$nohier_vs_hier_defaults = array(		'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),		'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),		'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),		'add_new_item' => array( __('Add New Post'), __('Add New Page') ),		'edit_item' => array( __('Edit Post'), __('Edit Page') ),		'new_item' => array( __('New Post'), __('New Page') ),		'view_item' => array( __('View Post'), __('View Page') ),		'search_items' => array( __('Search Posts'), __('Search Pages') ),		'not_found' => array( __('No posts found'), __('No pages found') ),		'not_found_in_trash' => array( __('No posts found in Trash'), __('No pages found in Trash') ),		'parent_item_colon' => array( null, __('Parent Page:') )	);	return _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );}/** * Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object * * @access private */function _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {	if ( isset( $object->label ) && empty( $object->labels['name'] ) )		$object->labels['name'] = $object->label;	if ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )		$object->labels['singular_name'] = $object->labels['name'];	$defaults = array_map( create_function( '$x', $object->hierarchical? 'return $x[1];' : 'return $x[0];' ), $nohier_vs_hier_defaults );	$labels = array_merge( $defaults, $object->labels );	return (object)$labels;}/** * Register support of certain features for a post type. * * All features are directly associated with a functional area of the edit screen, such as the * editor or a meta box: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', * 'excerpt', 'page-attributes', 'thumbnail', and 'custom-fields'. * * Additionally, the 'revisions' feature dictates whether the post type will store revisions, * and the 'comments' feature dicates whether the comments count will show on the edit screen. * * @since 3.0.0 * @param string $post_type The post type for which to add the feature * @param string|array $feature the feature being added, can be an array of feature strings or a single string */function add_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	$features = (array) $feature;	foreach ($features as $feature) {		if ( func_num_args() == 2 )			$_wp_post_type_features[$post_type][$feature] = true;		else			$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );	}}/** * Remove support for a feature from a post type. * * @since 3.0.0 * @param string $post_type The post type for which to remove the feature * @param string $feature The feature being removed */function remove_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset($_wp_post_type_features[$post_type]) )		return;	if ( isset($_wp_post_type_features[$post_type][$feature]) )		unset($_wp_post_type_features[$post_type][$feature]);}/** * Checks a post type's support for a given feature * * @since 3.0.0 * @param string $post_type The post type being checked * @param string $feature the feature being checked * @return boolean */function post_type_supports( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset( $_wp_post_type_features[$post_type][$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 2 )		return true;	// @todo Allow pluggable arg checking	//$args = array_slice( func_get_args(), 2 );	return true;}/** * Updates the post type for the post ID. * * The page or post cache will be cleaned for the post ID. * * @since 2.5.0 * * @uses $wpdb * * @param int $post_id Post ID to change post type. Not actually optional. * @param string $post_type Optional, default is post. Supported values are 'post' or 'page' to *  name a few. * @return int Amount of rows changed. Should be 1 for success and 0 for failure. */function set_post_type( $post_id = 0, $post_type = 'post' ) {	global $wpdb;	$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');	$return = $wpdb->update($wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );	if ( 'page' == $post_type )		clean_page_cache($post_id);	else		clean_post_cache($post_id);	return $return;}/** * Retrieve list of latest posts or posts matching criteria. * * The defaults are as follows: *     'numberposts' - Default is 5. Total number of posts to retrieve. *     'offset' - Default is 0. See {@link WP_Query::query()} for more. *     'category' - What category to pull the posts from. *     'orderby' - Default is 'post_date'. How to order the posts. *     'order' - Default is 'DESC'. The order to retrieve the posts. *     'include' - See {@link WP_Query::query()} for more. *     'exclude' - See {@link WP_Query::query()} for more. *     'meta_key' - See {@link WP_Query::query()} for more. *     'meta_value' - See {@link WP_Query::query()} for more. *     'post_type' - Default is 'post'. Can be 'page', or 'attachment' to name a few. *     'post_parent' - The parent of the post or post type. *     'post_status' - Default is 'published'. Post status to retrieve. * * @since 1.2.0 * @uses $wpdb * @uses WP_Query::query() See for more default arguments and information. * @link http://codex.wordpress.org/Template_Tags/get_posts * * @param array $args Optional. Overrides defaults. * @return array List of posts. */function get_posts($args = null) {	$defaults = array(		'numberposts' => 5, 'offset' => 0,		'category' => 0, 'orderby' => 'post_date',		'order' => 'DESC', 'include' => array(),		'exclude' => array(), 'meta_key' => '',		'meta_value' =>'', 'post_type' => 'post',		'suppress_filters' => true	);	$r = wp_parse_args( $args, $defaults );	if ( empty( $r['post_status'] ) )		$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';	if ( ! empty($r['numberposts']) )		$r['posts_per_page'] = $r['numberposts'];	if ( ! empty($r['category']) )		$r['cat'] = $r['category'];	if ( ! empty($r['include']) ) {		$incposts = wp_parse_id_list( $r['include'] );		$r['posts_per_page'] = count($incposts);  // only the number of posts included		$r['post__in'] = $incposts;	} elseif ( ! empty($r['exclude']) )		$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );	$r['caller_get_posts'] = true;	$get_posts = new WP_Query;	return $get_posts->query($r);}//// Post meta functions///** * Add meta data field to a post. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/add_post_meta * * @param int $post_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_post_meta($post_id, $meta_key, $meta_value, $unique = false) {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return add_metadata('post', $post_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a post. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/delete_post_meta * * @param int $post_id post ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_post_meta($post_id, $meta_key, $meta_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return delete_metadata('post', $post_id, $meta_key, $meta_value);}/** * Retrieve post meta field for a post. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post_meta * * @param int $post_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_post_meta($post_id, $key, $single = false) {	return get_metadata('post', $post_id, $key, $single);}/** * Update post meta field based on post ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and post ID. * * If the meta field for the post does not exist, it will be added. * * @since 1.5 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/update_post_meta * * @param int $post_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return update_metadata('post', $post_id, $meta_key, $meta_value, $prev_value);}/** * Delete everything from post meta matching meta key. * * @since 2.3.0 * @uses $wpdb * * @param string $post_meta_key Key to search for when deleting. * @return bool Whether the post meta key was deleted from the database */function delete_post_meta_by_key($post_meta_key) {	if ( !$post_meta_key )		return false;	global $wpdb;	$post_ids = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key));	if ( $post_ids ) {		$postmetaids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key ) );		$in = implode( ',', array_fill(1, count($postmetaids), '%d'));		do_action( 'delete_postmeta', $postmetaids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN($in)", $postmetaids ));		do_action( 'deleted_postmeta', $postmetaids );		foreach ( $post_ids as $post_id )			wp_cache_delete($post_id, 'post_meta');		return true;	}	return false;}/** * Retrieve post meta fields, based on post ID. * * The post meta fields are retrieved from the cache, so the function is * optimized to be called more than once. It also applies to the functions, that * use this function. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom * * @uses $id Current Loop Post ID * * @param int $post_id post ID * @return array */function get_post_custom($post_id = 0) {	global $id;	if ( !$post_id )		$post_id = (int) $id;	$post_id = (int) $post_id;	if ( ! wp_cache_get($post_id, 'post_meta') )		update_postmeta_cache($post_id);	return wp_cache_get($post_id, 'post_meta');}/** * Retrieve meta field names for a post. * * If there are no meta fields, then nothing (null) will be returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_keys * * @param int $post_id post ID * @return array|null Either array of the keys, or null if keys could not be retrieved. */function get_post_custom_keys( $post_id = 0 ) {	$custom = get_post_custom( $post_id );	if ( !is_array($custom) )		return;	if ( $keys = array_keys($custom) )		return $keys;}/** * Retrieve values for a custom post field. * * The parameters must not be considered optional. All of the post meta fields * will be retrieved and only the meta field key values returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_values * * @param string $key Meta field key. * @param int $post_id Post ID * @return array Meta field values. */function get_post_custom_values( $key = '', $post_id = 0 ) {	if ( !$key )		return null;	$custom = get_post_custom($post_id);	return isset($custom[$key]) ? $custom[$key] : null;}/** * Check if post is sticky. * * Sticky posts should remain at the top of The Loop. If the post ID is not * given, then The Loop ID for the current post will be used. * * @since 2.7.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post is sticky. */function is_sticky($post_id = null) {	global $id;	$post_id = absint($post_id);	if ( !$post_id )		$post_id = absint($id);	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return false;	if ( in_array($post_id, $stickies) )		return true;	return false;}/** * Sanitize every post field. * * If the context is 'raw', then the post object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_post_field() Used to sanitize the fields. * * @param object|array $post The Post Object or Array * @param string $context Optional, default is 'display'. How to sanitize post fields. * @return object|array The now sanitized Post Object or Array (will be the same type as $post) */function sanitize_post($post, $context = 'display') {	if ( is_object($post) ) {		// Check if post already filtered for this context		if ( isset($post->filter) && $context == $post->filter )			return $post;		if ( !isset($post->ID) )			$post->ID = 0;		foreach ( array_keys(get_object_vars($post)) as $field )			$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);		$post->filter = $context;	} else {		// Check if post already filtered for this context		if ( isset($post['filter']) && $context == $post['filter'] )			return $post;		if ( !isset($post['ID']) )			$post['ID'] = 0;		foreach ( array_keys($post) as $field )			$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);		$post['filter'] = $context;	}	return $post;}/** * Sanitize post field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $post_id if $context == 'edit' and field name prefix == 'post_'. * * @uses apply_filters() Calls 'edit_post_$field' passing $value and $post_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'post_'. * * @uses apply_filters() Calls '$field' passing $value, $post_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls 'post_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'post_'. * * @param string $field The Post Object field name. * @param mixed $value The Post Object value. * @param int $post_id Post ID. * @param string $context How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_post_field($field, $value, $post_id, $context) {	$int_fields = array('ID', 'post_parent', 'menu_order');	if ( in_array($field, $int_fields) )		$value = (int) $value;	// Fields which contain arrays of ints.	$array_int_fields = array( 'ancestors' );	if ( in_array($field, $array_int_fields) ) {		$value = array_map( 'absint', $value);		return $value;	}	if ( 'raw' == $context )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'post_') ) {		$prefixed = true;		$field_no_prefix = str_replace('post_', '', $field);	}	if ( 'edit' == $context ) {		$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $post_id);			// Old school			$value = apply_filters("${field_no_prefix}_edit_pre", $value, $post_id);		} else {			$value = apply_filters("edit_post_$field", $value, $post_id);		}		if ( in_array($field, $format_to_edit) ) {			if ( 'post_content' == $field )				$value = format_to_edit($value, user_can_richedit());			else				$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);			$value = apply_filters("${field_no_prefix}_save_pre", $value);		} else {			$value = apply_filters("pre_post_$field", $value);			$value = apply_filters("${field}_pre", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $post_id, $context);		else			$value = apply_filters("post_$field", $value, $post_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Make a post sticky. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function stick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		$stickies = array($post_id);	if ( ! in_array($post_id, $stickies) )		$stickies[] = $post_id;	update_option('sticky_posts', $stickies);}/** * Unstick a post. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function unstick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return;	if ( ! in_array($post_id, $stickies) )		return;	$offset = array_search($post_id, $stickies);	if ( false === $offset )		return;	array_splice($stickies, $offset, 1);	update_option('sticky_posts', $stickies);}/** * Count number of posts of a post type and is user has permissions to view. * * This function provides an efficient method of finding the amount of post's * type a blog has. Another method is to count the amount of items in * get_posts(), but that method has a lot of overhead with doing so. Therefore, * when developing for 2.5+, use this function instead. * * The $perm parameter checks for 'readable' value and if the user can read * private posts, it will display that for the user that is signed in. * * @since 2.5.0 * @link http://codex.wordpress.org/Template_Tags/wp_count_posts * * @param string $type Optional. Post type to retrieve count * @param string $perm Optional. 'readable' or empty. * @return object Number of posts for each status */function wp_count_posts( $type = 'post', $perm = '' ) {	global $wpdb;	$user = wp_get_current_user();	$cache_key = $type;	$query = "SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s";	if ( 'readable' == $perm && is_user_logged_in() ) {		$post_type_object = get_post_type_object($type);		if ( !current_user_can( $post_type_object->cap->read_private_posts ) ) {			$cache_key .= '_' . $perm . '_' . $user->ID;			$query .= " AND (post_status != 'private' OR ( post_author = '$user->ID' AND post_status = 'private' ))";		}	}	$query .= ' GROUP BY post_status';	$count = wp_cache_get($cache_key, 'counts');	if ( false !== $count )		return $count;	$count = $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );	$stats = array();	foreach ( get_post_stati() as $state )		$stats[$state] = 0;	foreach ( (array) $count as $row )		$stats[$row['post_status']] = $row['num_posts'];	$stats = (object) $stats;	wp_cache_set($cache_key, $stats, 'counts');	return $stats;}/** * Count number of attachments for the mime type(s). * * If you set the optional mime_type parameter, then an array will still be * returned, but will only have the item you are looking for. It does not give * you the number of attachments that are children of a post. You can get that * by counting the number of children that post has. * * @since 2.5.0 * * @param string|array $mime_type Optional. Array or comma-separated list of MIME patterns. * @return array Number of posts for each mime type. */function wp_count_attachments( $mime_type = '' ) {	global $wpdb;	$and = wp_post_mime_type_where( $mime_type );	$count = $wpdb->get_results( "SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type", ARRAY_A );	$stats = array( );	foreach( (array) $count as $row ) {		$stats[$row['post_mime_type']] = $row['num_posts'];	}	$stats['trash'] = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and");	return (object) $stats;}/** * Check a MIME-Type against a list. * * If the wildcard_mime_types parameter is a string, it must be comma separated * list. If the real_mime_types is a string, it is also comma separated to * create the list. * * @since 2.5.0 * * @param string|array $wildcard_mime_types e.g. audio/mpeg or image (same as image/*) or *  flash (same as *flash*). * @param string|array $real_mime_types post_mime_type values * @return array array(wildcard=>array(real types)) */function wp_match_mime_types($wildcard_mime_types, $real_mime_types) {	$matches = array();	if ( is_string($wildcard_mime_types) )		$wildcard_mime_types = array_map('trim', explode(',', $wildcard_mime_types));	if ( is_string($real_mime_types) )		$real_mime_types = array_map('trim', explode(',', $real_mime_types));	$wild = '[-._a-z0-9]*';	foreach ( (array) $wildcard_mime_types as $type ) {		$type = str_replace('*', $wild, $type);		$patternses[1][$type] = "^$type$";		if ( false === strpos($type, '/') ) {			$patternses[2][$type] = "^$type/";			$patternses[3][$type] = $type;		}	}	asort($patternses);	foreach ( $patternses as $patterns )		foreach ( $patterns as $type => $pattern )			foreach ( (array) $real_mime_types as $real )				if ( preg_match("#$pattern#", $real) && ( empty($matches[$type]) || false === array_search($real, $matches[$type]) ) )					$matches[$type][] = $real;	return $matches;}/** * Convert MIME types into SQL. * * @since 2.5.0 * * @param string|array $mime_types List of mime types or comma separated string of mime types. * @param string $table_alias Optional. Specify a table alias, if needed. * @return string The SQL AND clause for mime searching. */function wp_post_mime_type_where($post_mime_types, $table_alias = '') {	$where = '';	$wildcards = array('', '%', '%/%');	if ( is_string($post_mime_types) )		$post_mime_types = array_map('trim', explode(',', $post_mime_types));	foreach ( (array) $post_mime_types as $mime_type ) {		$mime_type = preg_replace('/\s/', '', $mime_type);		$slashpos = strpos($mime_type, '/');		if ( false !== $slashpos ) {			$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));			$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));			if ( empty($mime_subgroup) )				$mime_subgroup = '*';			else				$mime_subgroup = str_replace('/', '', $mime_subgroup);			$mime_pattern = "$mime_group/$mime_subgroup";		} else {			$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);			if ( false === strpos($mime_pattern, '*') )				$mime_pattern .= '/*';		}		$mime_pattern = preg_replace('/\*+/', '%', $mime_pattern);		if ( in_array( $mime_type, $wildcards ) )			return '';		if ( false !== strpos($mime_pattern, '%') )			$wheres[] = empty($table_alias) ? "post_mime_type LIKE '$mime_pattern'" : "$table_alias.post_mime_type LIKE '$mime_pattern'";		else			$wheres[] = empty($table_alias) ? "post_mime_type = '$mime_pattern'" : "$table_alias.post_mime_type = '$mime_pattern'";	}	if ( !empty($wheres) )		$where = ' AND (' . join(' OR ', $wheres) . ') ';	return $where;}/** * Trashes or deletes a post or page. * * When the post and page is permanently deleted, everything that is tied to it is deleted also. * This includes comments, post meta fields, and terms associated with the post. * * The post or page is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * @since 1.0.0 * @uses do_action() on 'delete_post' before deletion unless post type is 'attachment'. * @uses do_action() on 'deleted_post' after deletion unless post type is 'attachment'. * @uses wp_delete_attachment() if post type is 'attachment'. * @uses wp_trash_post() if item should be trashed. * * @param int $postid Post ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure */function wp_delete_post( $postid = 0, $force_delete = false ) {	global $wpdb, $wp_rewrite;	if ( !$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $postid)) )		return $post;	if ( !$force_delete && ( $post->post_type == 'post' || $post->post_type == 'page') && get_post_status( $postid ) != 'trash' && EMPTY_TRASH_DAYS )			return wp_trash_post($postid);	if ( $post->post_type == 'attachment' )		return wp_delete_attachment( $postid, $force_delete );	do_action('delete_post', $postid);	delete_post_meta($postid,'_wp_trash_meta_status');	delete_post_meta($postid,'_wp_trash_meta_time');	wp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));	$parent_data = array( 'post_parent' => $post->post_parent );	$parent_where = array( 'post_parent' => $postid );	if ( 'page' == $post->post_type) {	 	// if the page is defined in option page_on_front or post_for_posts,		// adjust the corresponding options		if ( get_option('page_on_front') == $postid ) {			update_option('show_on_front', 'posts');			delete_option('page_on_front');		}		if ( get_option('page_for_posts') == $postid ) {			delete_option('page_for_posts');		}		// Point children of this page to its parent, also clean the cache of affected children		$children_query = $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type='page'", $postid);		$children = $wpdb->get_results($children_query);		$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'page' ) );	} else {		unstick_post($postid);	}	// Do raw query.  wp_get_post_revisions() is filtered	$revision_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'", $postid ) );	// Use wp_delete_post (via wp_delete_post_revision) again.  Ensures any meta/misplaced data gets cleaned up.	foreach ( $revision_ids as $revision_id )		wp_delete_post_revision( $revision_id );	// Point all attachments to this post up one level	$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $postid ));	if ( ! empty($comment_ids) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $postid ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $postid );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $postid ));	do_action( 'deleted_post', $postid );	if ( 'page' == $post->post_type ) {		clean_page_cache($postid);		foreach ( (array) $children as $child )			clean_page_cache($child->ID);		$wp_rewrite->flush_rules(false);	} else {		clean_post_cache($postid);	}	wp_clear_scheduled_hook('publish_future_post', array( $postid ) );	do_action('deleted_post', $postid);	return $post;}/** * Moves a post or page to the Trash * * If trash is disabled, the post or page is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_post' before trashing * @uses do_action() on 'trashed_post' after trashing * @uses wp_delete_post() if trash is disabled * * @param int $postid Post ID. * @return mixed False on failure */function wp_trash_post($post_id = 0) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_post($post_id, true);	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] == 'trash' )		return false;	do_action('trash_post', $post_id);	add_post_meta($post_id,'_wp_trash_meta_status', $post['post_status']);	add_post_meta($post_id,'_wp_trash_meta_time', time());	$post['post_status'] = 'trash';	wp_insert_post($post);	wp_trash_post_comments($post_id);	do_action('trashed_post', $post_id);	return $post;}/** * Restores a post or page from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_post' before undeletion * @uses do_action() on 'untrashed_post' after undeletion * * @param int $postid Post ID. * @return mixed False on failure */function wp_untrash_post($post_id = 0) {	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] != 'trash' )		return false;	do_action('untrash_post', $post_id);	$post_status = get_post_meta($post_id, '_wp_trash_meta_status', true);	$post['post_status'] = $post_status;	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	wp_insert_post($post);	wp_untrash_post_comments($post_id);	do_action('untrashed_post', $post_id);	return $post;}/** * Moves comments for a post to the trash * * @since 2.9.0 * @uses do_action() on 'trash_post_comments' before trashing * @uses do_action() on 'trashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_trash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	do_action('trash_post_comments', $post_id);	$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id) );	if ( empty($comments) )		return;	// Cache current status for each comment	$statuses = array();	foreach ( $comments as $comment )		$statuses[$comment->comment_ID] = $comment->comment_approved;	add_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);	// Set status for all comments to post-trashed	$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));	clean_comment_cache( array_keys($statuses) );	do_action('trashed_post_comments', $post_id, $statuses);	return $result;}/** * Restore comments for a post from the trash * * @since 2.9.0 * @uses do_action() on 'untrash_post_comments' before trashing * @uses do_action() on 'untrashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_untrash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);	if ( empty($statuses) )		return true;	do_action('untrash_post_comments', $post_id);	// Restore each comment to its original status	$group_by_status = array();	foreach ( $statuses as $comment_id => $comment_status )		$group_by_status[$comment_status][] = $comment_id;	foreach ( $group_by_status as $status => $comments ) {		// Sanity check. This shouldn't happen.		if ( 'post-trashed' == $status )			$status = '0';		$comments_in = implode( "', '", $comments );		$wpdb->query( "UPDATE $wpdb->comments SET comment_approved = '$status' WHERE comment_ID IN ('" . $comments_in . "')" );	}	clean_comment_cache( array_keys($statuses) );	delete_post_meta($post_id, '_wp_trash_meta_comments_status');	do_action('untrashed_post_comments', $post_id);}/** * Retrieve the list of categories for a post. * * Compatibility layer for themes and plugins. Also an easy layer of abstraction * away from the complexity of the taxonomy layer. * * @since 2.1.0 * * @uses wp_get_object_terms() Retrieves the categories. Args details can be found here. * * @param int $post_id Optional. The Post ID. * @param array $args Optional. Overwrite the defaults. * @return array */function wp_get_post_categories( $post_id = 0, $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'ids');	$args = wp_parse_args( $args, $defaults );	$cats = wp_get_object_terms($post_id, 'category', $args);	return $cats;}/** * Retrieve the tags for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_tags( $post_id = 0, $args = array() ) {	return wp_get_post_terms( $post_id, 'post_tag', $args);}/** * Retrieve the terms for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.8.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag. * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$tags = wp_get_object_terms($post_id, $taxonomy, $args);	return $tags;}/** * Retrieve number of recent posts. * * @since 1.0.0 * @uses $wpdb * * @param int $num Optional, default is 10. Number of posts to get. * @return array List of posts. */function wp_get_recent_posts($num = 10) {	global $wpdb;	// Set the limit clause, if we got a limit	$num = (int) $num;	if ( $num ) {		$limit = "LIMIT $num";	}	$sql = "SELECT * FROM $wpdb->posts WHERE post_type = 'post' AND post_status IN ( 'draft', 'publish', 'future', 'pending', 'private' ) ORDER BY post_date DESC $limit";	$result = $wpdb->get_results($sql, ARRAY_A);	return $result ? $result : array();}/** * Retrieve a single post, based on post ID. * * Has categories in 'post_category' property or key. Has tags in 'tags_input' * property or key. * * @since 1.0.0 * * @param int $postid Post ID. * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A. * @return object|array Post object or array holding post contents and information */function wp_get_single_post($postid = 0, $mode = OBJECT) {	$postid = (int) $postid;	$post = get_post($postid, $mode);	// Set categories and tags	if ( $mode == OBJECT ) {		$post->post_category = array();		if ( is_object_in_taxonomy($post->post_type, 'category') )			$post->post_category = wp_get_post_categories($postid);		$post->tags_input = array();		if ( is_object_in_taxonomy($post->post_type, 'post_tag') )			$post->tags_input = wp_get_post_tags($postid, array('fields' => 'names'));	} else {		$post['post_category'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'category') )			$post['post_category'] = wp_get_post_categories($postid);		$post['tags_input'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'post_tag') )			$post['tags_input'] = wp_get_post_tags($postid, array('fields' => 'names'));	}	return $post;}/** * Insert a post. * * If the $postarr parameter has 'ID' set to a value, then post will be updated. * * You can set the post date manually, but setting the values for 'post_date' * and 'post_date_gmt' keys. You can close the comments or open the comments by * setting the value for 'comment_status' key. * * The defaults for the parameter $postarr are: *     'post_status'   - Default is 'draft'. *     'post_type'     - Default is 'post'. *     'post_author'   - Default is current user ID ($user_ID). The ID of the user who added the post. *     'ping_status'   - Default is the value in 'default_ping_status' option. *                       Whether the attachment can accept pings. *     'post_parent'   - Default is 0. Set this for the post it belongs to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Post content filtered. *     'post_excerpt'  - Post excerpt. * * @since 1.0.0 * @link http://core.trac.wordpress.org/ticket/9084 Bug report on 'wp_insert_post_data' filter. * @uses $wpdb * @uses $wp_rewrite * @uses $user_ID * * @uses do_action() Calls 'pre_post_update' on post ID if this is an update. * @uses do_action() Calls 'edit_post' action on post ID and post data if this is an update. * @uses do_action() Calls 'save_post' and 'wp_insert_post' on post id and post data just before *                   returning. * * @uses apply_filters() Calls 'wp_insert_post_data' passing $data, $postarr prior to database *                       update or insert. * @uses wp_transition_post_status() * * @param array $postarr Optional. Overrides defaults. * @param bool $wp_error Optional. Allow return of WP_Error on failure. * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success. */function wp_insert_post($postarr = array(), $wp_error = false) {	global $wpdb, $wp_rewrite, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0,		'post_content' => '', 'post_title' => '');	$postarr = wp_parse_args($postarr, $defaults);	$postarr = sanitize_post($postarr, 'db');	// export array as variables	extract($postarr, EXTR_SKIP);	// Are we updating or creating?	$update = false;	if ( !empty($ID) ) {		$update = true;		$previous_status = get_post_field('post_status', $ID);	} else {		$previous_status = 'new';	}	if ( ('' == $post_content) && ('' == $post_title) && ('' == $post_excerpt) && ('attachment' != $post_type) ) {		if ( $wp_error )			return new WP_Error('empty_content', __('Content, title, and excerpt are empty.'));		else			return 0;	}	if ( empty($post_type) )		$post_type = 'post';	if ( empty($post_status) )		$post_status = 'draft';	if ( !empty($post_category) )		$post_category = array_filter($post_category); // Filter out empty terms	// Make sure we set a valid category.	if ( empty($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	if ( empty($post_author) )		$post_author = $user_ID;	$post_ID = 0;	// Get the post ID and GUID	if ( $update ) {		$post_ID = (int) $ID;		$guid = get_post_field( 'guid', $post_ID );		$post_before = get_post($post_ID);	}	// Don't allow contributors to set to set the post slug for pending review posts	if ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) )		$post_name = '';	// Create a valid post name.  Drafts and pending posts are allowed to have an empty	// post name.	if ( empty($post_name) ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_name = sanitize_title($post_title);		else			$post_name = '';	} else {		$post_name = sanitize_title($post_name);	}	// If the post date is empty (due to having been new or a draft) and status is not 'draft' or 'pending', set date to now	if ( empty($post_date) || '0000-00-00 00:00:00' == $post_date )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) || '0000-00-00 00:00:00' == $post_date_gmt ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_date_gmt = get_gmt_from_date($post_date);		else			$post_date_gmt = '0000-00-00 00:00:00';	}	if ( $update || '0000-00-00 00:00:00' == $post_date ) {		$post_modified     = current_time( 'mysql' );		$post_modified_gmt = current_time( 'mysql', 1 );	} else {		$post_modified     = $post_date;		$post_modified_gmt = $post_date_gmt;	}	if ( 'publish' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) )			$post_status = 'future';	} elseif( 'future' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) )			$post_status = 'publish';	}	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( ! isset($pinged) )		$pinged = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( !empty($post_ID) ) {		if ( $post_parent == $post_ID ) {			// Post can't be its own parent			$post_parent = 0;		} elseif ( !empty($post_parent) ) {			$parent_post = get_post($post_parent);			// Check for circular dependency			if ( isset( $parent_post->post_parent ) && $parent_post->post_parent == $post_ID )				$post_parent = 0;		}	}	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) || 'private' == $post_status )		$post_password = '';	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'guid' ) );	$data = apply_filters('wp_insert_post_data', $data, $postarr);	$data = stripslashes_deep( $data );	$where = array( 'ID' => $post_ID );	if ( $update ) {		do_action( 'pre_post_update', $post_ID );		if ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {			if ( $wp_error )				return new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);			else				return 0;		}	} else {		if ( isset($post_mime_type) )			$data['post_mime_type'] = stripslashes( $post_mime_type ); // This isn't in the update		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		if ( false === $wpdb->insert( $wpdb->posts, $data ) ) {			if ( $wp_error )				return new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);			else				return 0;		}		$post_ID = (int) $wpdb->insert_id;		// use the newly generated $post_ID		$where = array( 'ID' => $post_ID );	}	if ( empty($data['post_name']) && !in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {		$data['post_name'] = sanitize_title($data['post_title'], $post_ID);		$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );	}	if ( is_object_in_taxonomy($post_type, 'category') )		wp_set_post_categories( $post_ID, $post_category );	if ( isset( $tags_input ) && is_object_in_taxonomy($post_type, 'post_tag') )		wp_set_post_tags( $post_ID, $tags_input );	// new-style support for all custom taxonomies	if ( !empty($tax_input) ) {		foreach ( $tax_input as $taxonomy => $tags ) {			$taxonomy_obj = get_taxonomy($taxonomy);			if ( is_array($tags) ) // array = hierarchical, string = non-hierarchical.				$tags = array_filter($tags);			if ( current_user_can($taxonomy_obj->cap->assign_terms) )				wp_set_post_terms( $post_ID, $tags, $taxonomy );		}	}	$current_guid = get_post_field( 'guid', $post_ID );	if ( 'page' == $data['post_type'] )		clean_page_cache($post_ID);	else		clean_post_cache($post_ID);	// Set GUID	if ( !$update && '' == $current_guid )		$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );	$post = get_post($post_ID);	if ( !empty($page_template) && 'page' == $data['post_type'] ) {		$post->page_template = $page_template;		$page_templates = get_page_templates();		if ( 'default' != $page_template && !in_array($page_template, $page_templates) ) {			if ( $wp_error )				return new WP_Error('invalid_page_template', __('The page template is invalid.'));			else				return 0;		}		update_post_meta($post_ID, '_wp_page_template',  $page_template);	}	wp_transition_post_status($data['post_status'], $previous_status, $post);	if ( $update ) {		do_action('edit_post', $post_ID, $post);		$post_after = get_post($post_ID);		do_action( 'post_updated', $post_ID, $post_after, $post_before);	}	do_action('save_post', $post_ID, $post);	do_action('wp_insert_post', $post_ID, $post);	return $post_ID;}/** * Update a post with new post data. * * The date does not have to be set for drafts. You can set the date and it will * not be overridden. * * @since 1.0.0 * * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not. * @return int 0 on failure, Post ID on success. */function wp_update_post($postarr = array()) {	if ( is_object($postarr) ) {		// non-escaped post was passed		$postarr = get_object_vars($postarr);		$postarr = add_magic_quotes($postarr);	}	// First, get all of the original fields	$post = wp_get_single_post($postarr['ID'], ARRAY_A);	// Escape data pulled from DB.	$post = add_magic_quotes($post);	// Passed post category list overwrites existing category list if not empty.	if ( isset($postarr['post_category']) && is_array($postarr['post_category'])			 && 0 != count($postarr['post_category']) )		$post_cats = $postarr['post_category'];	else		$post_cats = $post['post_category'];	// Drafts shouldn't be assigned a date unless explicitly done so by the user	if ( in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&			 ('0000-00-00 00:00:00' == $post['post_date_gmt']) )		$clear_date = true;	else		$clear_date = false;	// Merge old and new fields with new fields overwriting old ones.	$postarr = array_merge($post, $postarr);	$postarr['post_category'] = $post_cats;	if ( $clear_date ) {		$postarr['post_date'] = current_time('mysql');		$postarr['post_date_gmt'] = '';	}	if ($postarr['post_type'] == 'attachment')		return wp_insert_attachment($postarr);	return wp_insert_post($postarr);}/** * Publish a post by transitioning the post status. * * @since 2.1.0 * @uses $wpdb * @uses do_action() Calls 'edit_post', 'save_post', and 'wp_insert_post' on post_id and post data. * * @param int $post_id Post ID. * @return null */function wp_publish_post($post_id) {	global $wpdb;	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'publish' == $post->post_status )		return;	$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post_id ) );	$old_status = $post->post_status;	$post->post_status = 'publish';	wp_transition_post_status('publish', $old_status, $post);	// Update counts for the post's terms.	foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {		$tt_ids = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'tt_ids'));		wp_update_term_count($tt_ids, $taxonomy);	}	do_action('edit_post', $post_id, $post);	do_action('save_post', $post_id, $post);	do_action('wp_insert_post', $post_id, $post);}/** * Publish future post and make sure post ID has future post status. * * Invoked by cron 'publish_future_post' event. This safeguard prevents cron * from publishing drafts, etc. * * @since 2.5.0 * * @param int $post_id Post ID. * @return null Nothing is returned. Which can mean that no action is required or post was published. */function check_and_publish_future_post($post_id) {	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'future' != $post->post_status )		return;	$time = strtotime( $post->post_date_gmt . ' GMT' );	if ( $time > time() ) { // Uh oh, someone jumped the gun!		wp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system		wp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );		return;	}	return wp_publish_post($post_id);}/** * Computes a unique slug for the post, when given the desired slug and some post details. * * @global wpdb $wpdb * @global WP_Rewrite $wp_rewrite * @param string $slug the desired slug (post_name) * @param integer $post_ID * @param string $post_status no uniqueness checks are made if the post is still draft or pending * @param string $post_type * @param integer $post_parent * @return string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix) */function wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {	if ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )		return $slug;	global $wpdb, $wp_rewrite;	$feeds = $wp_rewrite->feeds;	if ( ! is_array( $feeds ) )		$feeds = array();	$hierarchical_post_types = apply_filters( 'hierarchical_post_types', array( 'page' ) );	if ( 'attachment' == $post_type ) {		// Attachment slugs must be unique across all types.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr ($slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare($check_sql, $alt_post_name, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} elseif ( in_array( $post_type, $hierarchical_post_types ) ) {		// Page slugs must be unique within their own trees. Pages are in a separate		// namespace than posts so page slugs are allowed to overlap post slugs.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( '" . implode( "', '", esc_sql( $hierarchical_post_types ) ) . "' ) AND ID != %d AND post_parent = %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID, $post_parent ) );		if ( $post_name_check || in_array( $slug, $feeds ) || preg_match( '@^(page)?\d+$@', $slug ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID, $post_parent ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} else {		// Post slugs must be unique across all posts.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	}	return $slug;}/** * Adds tags to a post. * * @uses wp_set_post_tags() Same first two parameters, but the last parameter is always set to true. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @param int $post_id Post ID * @param string $tags The tags to set for the post, separated by commas. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_add_post_tags($post_id = 0, $tags = '') {	return wp_set_post_tags($post_id, $tags, true);}/** * Set the tags for a post. * * @since 2.3.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {	return wp_set_post_terms( $post_id, $tags, 'post_tag', $append);}/** * Set the terms for a post. * * @since 2.8.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( empty($tags) )		$tags = array();	$tags = is_array($tags) ? $tags : explode( ',', trim($tags, " \n\t\r\0\x0B,") );	// Hierarchical taxonomies must always pass IDs rather than names so that children with the same	// names but different parents aren't confused.	if ( is_taxonomy_hierarchical( $taxonomy ) ) {		$tags = array_map( 'intval', $tags );		$tags = array_unique( $tags );	}	wp_set_object_terms($post_id, $tags, $taxonomy, $append);}/** * Set categories for a post. * * If the post categories parameter is not set, then the default category is * going used. * * @since 2.1.0 * * @param int $post_ID Post ID. * @param array $post_categories Optional. List of categories. * @return bool|mixed */function wp_set_post_categories($post_ID = 0, $post_categories = array()) {	$post_ID = (int) $post_ID;	$post_type = get_post_type( $post_ID );	$post_status = get_post_status( $post_ID );	// If $post_categories isn't already an array, make it one:	if ( !is_array($post_categories) || empty($post_categories) ) {		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_categories = array( get_option('default_category') );		else			$post_categories = array();	} else if ( 1 == count($post_categories) && '' == reset($post_categories) ) {		return true;	}	if ( !empty($post_categories) ) {		$post_categories = array_map('intval', $post_categories);		$post_categories = array_unique($post_categories);	}	return wp_set_object_terms($post_ID, $post_categories, 'category');}/** * Transition the post status of a post. * * Calls hooks to transition post status. * * The first is 'transition_post_status' with new status, old status, and post data. * * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the * post data. * * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status * parameter and POSTTYPE is post_type post data. * * @since 2.3.0 * @link http://codex.wordpress.org/Post_Status_Transitions * * @uses do_action() Calls 'transition_post_status' on $new_status, $old_status and *  $post if there is a status change. * @uses do_action() Calls '${old_status}_to_$new_status' on $post if there is a status change. * @uses do_action() Calls '${new_status}_$post->post_type' on post ID and $post. * * @param string $new_status Transition to this post status. * @param string $old_status Previous post status. * @param object $post Post data. */function wp_transition_post_status($new_status, $old_status, $post) {	do_action('transition_post_status', $new_status, $old_status, $post);	do_action("${old_status}_to_$new_status", $post);	do_action("${new_status}_$post->post_type", $post->ID, $post);}//// Trackback and ping functions///** * Add a URL to those already pung. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @param string $uri Ping URI. * @return int How many rows were updated. */function add_ping($post_id, $uri) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung[] = $uri;	$new = implode("\n", $pung);	$new = apply_filters('add_ping', $new);	// expected_slashed ($new)	$new = stripslashes($new);	return $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post_id ) );}/** * Retrieve enclosures already enclosed for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array List of enclosures */function get_enclosed($post_id) {	$custom_fields = get_post_custom( $post_id );	$pung = array();	if ( !is_array( $custom_fields ) )		return $pung;	foreach ( $custom_fields as $key => $val ) {		if ( 'enclosure' != $key || !is_array( $val ) )			continue;		foreach( $val as $enc ) {			$enclosure = split( "\n", $enc );			$pung[] = trim( $enclosure[ 0 ] );		}	}	$pung = apply_filters('get_enclosed', $pung);	return $pung;}/** * Retrieve URLs already pinged for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array */function get_pung($post_id) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung = apply_filters('get_pung', $pung);	return $pung;}/** * Retrieve URLs that need to be pinged. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID * @return array */function get_to_ping($post_id) {	global $wpdb;	$to_ping = $wpdb->get_var( $wpdb->prepare( "SELECT to_ping FROM $wpdb->posts WHERE ID = %d", $post_id ));	$to_ping = trim($to_ping);	$to_ping = preg_split('/\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);	$to_ping = apply_filters('get_to_ping',  $to_ping);	return $to_ping;}/** * Do trackbacks for a list of URLs. * * @since 1.0.0 * * @param string $tb_list Comma separated list of URLs * @param int $post_id Post ID */function trackback_url_list($tb_list, $post_id) {	if ( ! empty( $tb_list ) ) {		// get post data		$postdata = wp_get_single_post($post_id, ARRAY_A);		// import postdata as variables		extract($postdata, EXTR_SKIP);		// form an excerpt		$excerpt = strip_tags($post_excerpt ? $post_excerpt : $post_content);		if (strlen($excerpt) > 255) {			$excerpt = substr($excerpt,0,252) . '...';		}		$trackback_urls = explode(',', $tb_list);		foreach( (array) $trackback_urls as $tb_url) {			$tb_url = trim($tb_url);			trackback($tb_url, stripslashes($post_title), $excerpt, $post_id);		}	}}//// Page functions///** * Get a list of page IDs. * * @since 2.0.0 * @uses $wpdb * * @return array List of page IDs. */function get_all_page_ids() {	global $wpdb;	if ( ! $page_ids = wp_cache_get('all_page_ids', 'posts') ) {		$page_ids = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'page'");		wp_cache_add('all_page_ids', $page_ids, 'posts');	}	return $page_ids;}/** * Retrieves page data given a page ID or page object. * * @since 1.5.1 * * @param mixed $page Page object or page ID. Passed by reference. * @param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter How the return value should be filtered. * @return mixed Page data. */function &get_page(&$page, $output = OBJECT, $filter = 'raw') {	$p = get_post($page, $output, $filter);	return $p;}/** * Retrieves a page given its path. * * @since 2.1.0 * @uses $wpdb * * @param string $page_path Page path * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed Null when complete. */function get_page_by_path($page_path, $output = OBJECT, $post_type = 'page') {	global $wpdb;	$page_path = rawurlencode(urldecode($page_path));	$page_path = str_replace('%2F', '/', $page_path);	$page_path = str_replace('%20', ' ', $page_path);	$page_paths = '/' . trim($page_path, '/');	$leaf_path  = sanitize_title(basename($page_paths));	$page_paths = explode('/', $page_paths);	$full_path = '';	foreach ( (array) $page_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);	$pages = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_name = %s AND (post_type = %s OR post_type = 'attachment')", $leaf_path, $post_type ));	if ( empty($pages) )		return null;	foreach ( $pages as $page ) {		$path = '/' . $leaf_path;		$curpage = $page;		while ( $curpage->post_parent != 0 ) {			$curpage = $wpdb->get_row( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE ID = %d and post_type = %s", $curpage->post_parent, $post_type ));			$path = '/' . $curpage->post_name . $path;		}		if ( $path == $full_path )			return get_page($page->ID, $output, $post_type);	}	return null;}/** * Retrieve a page given its title. * * @since 2.1.0 * @uses $wpdb * * @param string $page_title Page title * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed */function get_page_by_title($page_title, $output = OBJECT, $post_type = 'page' ) {	global $wpdb;	$page = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_title = %s AND post_type= %s", $page_title, $post_type ) );	if ( $page )		return get_page($page, $output);	return null;}/** * Retrieve child pages from list of pages matching page ID. * * Matches against the pages parameter against the page ID. Also matches all * children for the same to retrieve all children of a page. Does not make any * SQL queries to get the children. * * @since 1.5.1 * * @param int $page_id Page ID. * @param array $pages List of pages' objects. * @return array */function &get_page_children($page_id, $pages) {	$page_list = array();	foreach ( (array) $pages as $page ) {		if ( $page->post_parent == $page_id ) {			$page_list[] = $page;			if ( $children = get_page_children($page->ID, $pages) )				$page_list = array_merge($page_list, $children);		}	}	return $page_list;}/** * Order the pages with children under parents in a flat list. * * It uses auxiliary structure to hold parent-children relationships and * runs in O(N) complexity * * @since 2.0.0 * * @param array $posts Posts array. * @param int $parent Parent page ID. * @return array A list arranged by hierarchy. Children immediately follow their parents. */function &get_page_hierarchy( &$pages, $page_id = 0 ) {	if ( empty( $pages ) ) {		$result = array();		return $result;	}	$children = array();	foreach ( (array) $pages as $p ) {		$parent_id = intval( $p->post_parent );		$children[ $parent_id ][] = $p;	 }	 $result = array();	 _page_traverse_name( $page_id, $children, $result );	return $result;}/** * function to traverse and return all the nested children post names of a root page. * $children contains parent-chilren relations * */function _page_traverse_name( $page_id, &$children, &$result ){	if ( isset( $children[ $page_id ] ) ){		foreach( (array)$children[ $page_id ] as $child ) {			$result[ $child->ID ] = $child->post_name;			_page_traverse_name( $child->ID, $children, $result );		}	}}/** * Builds URI for a page. * * Sub pages will be in the "directory" under the parent page post name. * * @since 1.5.0 * * @param mixed $page Page object or page ID. * @return string Page URI. */function get_page_uri($page) {	if ( ! is_object($page) )		$page = get_page($page);	$uri = $page->post_name;	// A page cannot be it's own parent.	if ( $page->post_parent == $page->ID )		return $uri;	while ($page->post_parent != 0) {		$page = get_page($page->post_parent);		$uri = $page->post_name . "/" . $uri;	}	return $uri;}/** * Retrieve a list of pages. * * The defaults that can be overridden are the following: 'child_of', * 'sort_order', 'sort_column', 'post_title', 'hierarchical', 'exclude', * 'include', 'meta_key', 'meta_value','authors', 'number', and 'offset'. * * @since 1.5.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options that overrides defaults. * @return array List of pages matching defaults or $args */function &get_pages($args = '') {	global $wpdb;	$defaults = array(		'child_of' => 0, 'sort_order' => 'ASC',		'sort_column' => 'post_title', 'hierarchical' => 1,		'exclude' => array(), 'include' => array(),		'meta_key' => '', 'meta_value' => '',		'authors' => '', 'parent' => -1, 'exclude_tree' => '',		'number' => '', 'offset' => 0,		'post_type' => 'page', 'post_status' => 'publish',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$number = (int) $number;	$offset = (int) $offset;	// Make sure the post type is hierarchical	$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );	if ( !in_array( $post_type, $hierarchical_post_types ) )		return false;	// Make sure we have a valid post status	if ( !in_array($post_status, get_post_stati()) )		return false;	$cache = array();	$key = md5( serialize( compact(array_keys($defaults)) ) );	if ( $cache = wp_cache_get( 'get_pages', 'posts' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			$pages = apply_filters('get_pages', $cache[ $key ], $r );			return $pages;		}	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include		$parent = -1;		$exclude = '';		$meta_key = '';		$meta_value = '';		$hierarchical = false;		$incpages = wp_parse_id_list( $include );		if ( ! empty( $incpages ) ) {			foreach ( $incpages as $incpage ) {				if (empty($inclusions))					$inclusions = $wpdb->prepare(' AND ( ID = %d ', $incpage);				else					$inclusions .= $wpdb->prepare(' OR ID = %d ', $incpage);			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$expages = wp_parse_id_list( $exclude );		if ( ! empty( $expages ) ) {			foreach ( $expages as $expage ) {				if (empty($exclusions))					$exclusions = $wpdb->prepare(' AND ( ID <> %d ', $expage);				else					$exclusions .= $wpdb->prepare(' AND ID <> %d ', $expage);			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	$author_query = '';	if (!empty($authors)) {		$post_authors = preg_split('/[\s,]+/',$authors);		if ( ! empty( $post_authors ) ) {			foreach ( $post_authors as $post_author ) {				//Do we have an author id or an author login?				if ( 0 == intval($post_author) ) {					$post_author = get_userdatabylogin($post_author);					if ( empty($post_author) )						continue;					if ( empty($post_author->ID) )						continue;					$post_author = $post_author->ID;				}				if ( '' == $author_query )					$author_query = $wpdb->prepare(' post_author = %d ', $post_author);				else					$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);			}			if ( '' != $author_query )				$author_query = " AND ($author_query)";		}	}	$join = '';	$where = "$exclusions $inclusions ";	if ( ! empty( $meta_key ) || ! empty( $meta_value ) ) {		$join = " LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )";		// meta_key and meta_value might be slashed		$meta_key = stripslashes($meta_key);		$meta_value = stripslashes($meta_value);		if ( ! empty( $meta_key ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s", $meta_key);		if ( ! empty( $meta_value ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_value = %s", $meta_value);	}	if ( $parent >= 0 )		$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);	$where_post_type = $wpdb->prepare( "post_type = '%s' AND post_status = '%s'", $post_type, $post_status );	$query = "SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where ";	$query .= $author_query;	$query .= " ORDER BY " . $sort_column . " " . $sort_order ;	if ( !empty($number) )		$query .= ' LIMIT ' . $offset . ',' . $number;	$pages = $wpdb->get_results($query);	if ( empty($pages) ) {		$pages = apply_filters('get_pages', array(), $r);		return $pages;	}	// Sanitize before caching so it'll only get done once	$num_pages = count($pages);	for ($i = 0; $i < $num_pages; $i++) {		$pages[$i] = sanitize_post($pages[$i], 'raw');	}	// Update cache.	update_page_cache($pages);	if ( $child_of || $hierarchical )		$pages = & get_page_children($child_of, $pages);	if ( !empty($exclude_tree) ) {		$exclude = (int) $exclude_tree;		$children = get_page_children($exclude, $pages);		$excludes = array();		foreach ( $children as $child )			$excludes[] = $child->ID;		$excludes[] = $exclude;		$num_pages = count($pages);		for ( $i = 0; $i < $num_pages; $i++ ) {			if ( in_array($pages[$i]->ID, $excludes) )				unset($pages[$i]);		}	}	$cache[ $key ] = $pages;	wp_cache_set( 'get_pages', $cache, 'posts' );	$pages = apply_filters('get_pages', $pages, $r);	return $pages;}//// Attachment functions///** * Check if the attachment URI is local one and is really an attachment. * * @since 2.0.0 * * @param string $url URL to check * @return bool True on success, false on failure. */function is_local_attachment($url) {	if (strpos($url, home_url()) === false)		return false;	if (strpos($url, home_url('/?attachment_id=')) !== false)		return true;	if ( $id = url_to_postid($url) ) {		$post = & get_post($id);		if ( 'attachment' == $post->post_type )			return true;	}	return false;}/** * Insert an attachment. * * If you set the 'ID' in the $object parameter, it will mean that you are * updating and attempt to update the attachment. You can also set the * attachment name or title by setting the key 'post_name' or 'post_title'. * * You can set the dates for the attachment manually by setting the 'post_date' * and 'post_date_gmt' keys' values. * * By default, the comments will use the default settings for whether the * comments are allowed. You can close them manually or keep them open by * setting the value for the 'comment_status' key. * * The $object parameter can have the following: *     'post_status'   - Default is 'draft'. Can not be overridden, set the same as parent post. *     'post_type'     - Default is 'post', will be set to attachment. Can not override. *     'post_author'   - Default is current user ID. The ID of the user, who added the attachment. *     'ping_status'   - Default is the value in default ping status option. Whether the attachment *                       can accept pings. *     'post_parent'   - Default is 0. Can use $parent parameter or set this for the post it belongs *                       to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Attachment post content filtered. *     'post_excerpt'  - Attachment excerpt. * * @since 2.0.0 * @uses $wpdb * @uses $user_ID * @uses do_action() Calls 'edit_attachment' on $post_ID if this is an update. * @uses do_action() Calls 'add_attachment' on $post_ID if this is not an update. * * @param string|array $object Arguments to override defaults. * @param string $file Optional filename. * @param int $post_parent Parent post ID. * @return int Attachment ID. */function wp_insert_attachment($object, $file = false, $parent = 0) {	global $wpdb, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0);	$object = wp_parse_args($object, $defaults);	if ( !empty($parent) )		$object['post_parent'] = $parent;	$object = sanitize_post($object, 'db');	// export array as variables	extract($object, EXTR_SKIP);	if ( empty($post_author) )		$post_author = $user_ID;	$post_type = 'attachment';	$post_status = 'inherit';	// Make sure we set a valid category.	if ( !isset($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	// Are we updating or creating?	if ( !empty($ID) ) {		$update = true;		$post_ID = (int) $ID;	} else {		$update = false;		$post_ID = 0;	}	// Create a valid post name.	if ( empty($post_name) )		$post_name = sanitize_title($post_title);	else		$post_name = sanitize_title($post_name);	// expected_slashed ($post_name)	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	if ( empty($post_date) )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) )		$post_date_gmt = current_time('mysql', 1);	if ( empty($post_modified) )		$post_modified = $post_date;	if ( empty($post_modified_gmt) )		$post_modified_gmt = $post_date_gmt;	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) )		$post_password = '';	if ( ! isset($pinged) )		$pinged = '';	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' ) );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->posts, $data, array( 'ID' => $post_ID ) );	} else {		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		$wpdb->insert( $wpdb->posts, $data );		$post_ID = (int) $wpdb->insert_id;	}	if ( empty($post_name) ) {		$post_name = sanitize_title($post_title, $post_ID);		$wpdb->update( $wpdb->posts, compact("post_name"), array( 'ID' => $post_ID ) );	}	wp_set_post_categories($post_ID, $post_category);	if ( $file )		update_attached_file( $post_ID, $file );	clean_post_cache($post_ID);	if ( isset($post_parent) && $post_parent < 0 )		add_post_meta($post_ID, '_wp_attachment_temp_parent', $post_parent, true);	if ( $update) {		do_action('edit_attachment', $post_ID);	} else {		do_action('add_attachment', $post_ID);	}	return $post_ID;}/** * Trashes or deletes an attachment. * * When an attachment is permanently deleted, the file will also be removed. * Deletion removes all post meta fields, taxonomy, comments, etc. associated * with the attachment (except the main post). * * The attachment is moved to the trash instead of permanently deleted unless trash * for media is disabled, item is already in the trash, or $force_delete is true. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_attachment' hook on Attachment ID. * * @param int $postid Attachment ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure. Post data on success. */function wp_delete_attachment( $post_id, $force_delete = false ) {	global $wpdb;	if ( !$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) ) )		return $post;	if ( 'attachment' != $post->post_type )		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' != $post->post_status )		return wp_trash_post( $post_id );	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	$meta = wp_get_attachment_metadata( $post_id );	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	$file = get_attached_file( $post_id );	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	do_action('delete_attachment', $post_id);	wp_delete_object_term_relationships($post_id, array('category', 'post_tag'));	wp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->postmeta WHERE meta_key = '_thumbnail_id' AND meta_value = %d", $post_id ));	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id ));	if ( ! empty( $comment_ids ) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $post_id ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $post_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $post_id ));	do_action( 'deleted_post', $post_id );	$uploadpath = wp_upload_dir();	if ( ! empty($meta['thumb']) ) {		// Don't delete the thumb if another attachment uses it		if (! $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d", '%' . $meta['thumb'] . '%', $post_id)) ) {			$thumbfile = str_replace(basename($file), $meta['thumb'], $file);			$thumbfile = apply_filters('wp_delete_file', $thumbfile);			@ unlink( path_join($uploadpath['basedir'], $thumbfile) );		}	}	// remove intermediate and backup images if there are any	foreach ( get_intermediate_image_sizes() as $size ) {		if ( $intermediate = image_get_intermediate_size($post_id, $size) ) {			$intermediate_file = apply_filters('wp_delete_file', $intermediate['path']);			@ unlink( path_join($uploadpath['basedir'], $intermediate_file) );		}	}	if ( is_array($backup_sizes) ) {		foreach ( $backup_sizes as $size ) {			$del_file = path_join( dirname($meta['file']), $size['file'] );			$del_file = apply_filters('wp_delete_file', $del_file);            @ unlink( path_join($uploadpath['basedir'], $del_file) );		}	}	$file = apply_filters('wp_delete_file', $file);	if ( ! empty($file) )		@ unlink($file);	clean_post_cache($post_id);	return $post;}/** * Retrieve attachment meta field for attachment ID. * * @since 2.1.0 * * @param int $post_id Attachment ID * @param bool $unfiltered Optional, default is false. If true, filters are not run. * @return string|bool Attachment meta field. False on failure. */function wp_get_attachment_metadata( $post_id = 0, $unfiltered = false ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );	if ( $unfiltered )		return $data;	return apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );}/** * Update metadata for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @param array $data Attachment data. * @return int */function wp_update_attachment_metadata( $post_id, $data ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID );	return update_post_meta( $post->ID, '_wp_attachment_metadata', $data);}/** * Retrieve the URL for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return string */function wp_get_attachment_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$url = '';	if ( $file = get_post_meta( $post->ID, '_wp_attached_file', true) ) { //Get attached file		if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) { //Get upload directory			if ( 0 === strpos($file, $uploads['basedir']) ) //Check that the upload base exists in the file location				$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file); //replace file location with url location            elseif ( false !== strpos($file, 'wp-content/uploads') )                $url = $uploads['baseurl'] . substr( $file, strpos($file, 'wp-content/uploads') + 18 );            else                $url = $uploads['baseurl'] . "/$file"; //Its a newly uploaded file, therefor $file is relative to the basedir.		}	}	if ( empty($url) ) //If any of the above options failed, Fallback on the GUID as used pre-2.7, not recomended to rely upon this.		$url = get_the_guid( $post->ID );	if ( 'attachment' != $post->post_type || empty($url) )		return false;	return apply_filters( 'wp_get_attachment_url', $url, $post->ID );}/** * Retrieve thumbnail for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return mixed False on failure. Thumbnail file path on success. */function wp_get_attachment_thumb_file( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )		return false;	$file = get_attached_file( $post->ID );	if ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) )		return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );	return false;}/** * Retrieve URL for an attachment thumbnail. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return string|bool False on failure. Thumbnail URL on success. */function wp_get_attachment_thumb_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$url = wp_get_attachment_url( $post->ID ) )		return false;	$sized = image_downsize( $post_id, 'thumbnail' );	if ( $sized )		return $sized[0];	if ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )		return false;	$url = str_replace(basename($url), basename($thumb), $url);	return apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );}/** * Check if the attachment is an image. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return bool */function wp_attachment_is_image( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$file = get_attached_file( $post->ID ) )		return false;	$ext = preg_match('/\.([^.]+)$/', $file, $matches) ? strtolower($matches[1]) : false;	$image_exts = array('jpg', 'jpeg', 'gif', 'png');	if ( 'image/' == substr($post->post_mime_type, 0, 6) || $ext && 'import' == $post->post_mime_type && in_array($ext, $image_exts) )		return true;	return false;}/** * Retrieve the icon for a MIME type. * * @since 2.1.0 * * @param string $mime MIME type * @return string|bool */function wp_mime_type_icon( $mime = 0 ) {	if ( !is_numeric($mime) )		$icon = wp_cache_get("mime_type_icon_$mime");	if ( empty($icon) ) {		$post_id = 0;		$post_mimes = array();		if ( is_numeric($mime) ) {			$mime = (int) $mime;			if ( $post =& get_post( $mime ) ) {				$post_id = (int) $post->ID;				$ext = preg_replace('/^.+?\.([^.]+)$/', '$1', $post->guid);				if ( !empty($ext) ) {					$post_mimes[] = $ext;					if ( $ext_type = wp_ext2type( $ext ) )						$post_mimes[] = $ext_type;				}				$mime = $post->post_mime_type;			} else {				$mime = 0;			}		} else {			$post_mimes[] = $mime;		}		$icon_files = wp_cache_get('icon_files');		if ( !is_array($icon_files) ) {			$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );			$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url('images/crystal') );			$dirs = apply_filters( 'icon_dirs', array($icon_dir => $icon_dir_uri) );			$icon_files = array();			while ( $dirs ) {				$dir = array_shift($keys = array_keys($dirs));				$uri = array_shift($dirs);				if ( $dh = opendir($dir) ) {					while ( false !== $file = readdir($dh) ) {						$file = basename($file);						if ( substr($file, 0, 1) == '.' )							continue;						if ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {							if ( is_dir("$dir/$file") )								$dirs["$dir/$file"] = "$uri/$file";							continue;						}						$icon_files["$dir/$file"] = "$uri/$file";					}					closedir($dh);				}			}			wp_cache_set('icon_files', $icon_files, 600);		}		// Icon basename - extension = MIME wildcard		foreach ( $icon_files as $file => $uri )			$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];		if ( ! empty($mime) ) {			$post_mimes[] = substr($mime, 0, strpos($mime, '/'));			$post_mimes[] = substr($mime, strpos($mime, '/') + 1);			$post_mimes[] = str_replace('/', '_', $mime);		}		$matches = wp_match_mime_types(array_keys($types), $post_mimes);		$matches['default'] = array('default');		foreach ( $matches as $match => $wilds ) {			if ( isset($types[$wilds[0]])) {				$icon = $types[$wilds[0]];				if ( !is_numeric($mime) )					wp_cache_set("mime_type_icon_$mime", $icon);				break;			}		}	}	return apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id ); // Last arg is 0 if function pass mime type.}/** * Checked for changed slugs for published posts and save old slug. * * The function is used along with form POST data. It checks for the wp-old-slug * POST field. Will only be concerned with published posts and the slug actually * changing. * * If the slug was changed and not already part of the old slugs then it will be * added to the post meta field ('_wp_old_slug') for storing old slugs for that * post. * * The most logically usage of this function is redirecting changed posts, so * that those that linked to an changed post will be redirected to the new post. * * @since 2.1.0 * * @param int $post_id Post ID. * @return int Same as $post_id */function wp_check_for_changed_slugs($post_id, $post, $post_before) {	// dont bother if it hasnt changed	if ( $post->post_name == $post_before->post_name )		return;	// we're only concerned with published posts	if ( $post->post_status != 'publish' || $post->post_type != 'post' )		return;	$old_slugs = (array) get_post_meta($post_id, '_wp_old_slug');	// if we haven't added this old slug before, add it now	if ( !in_array($post_before->post_name, $old_slugs) )		add_post_meta($post_id, '_wp_old_slug', $post_before->post_name);	// if the new slug was used previously, delete it from the list	if ( in_array($post->post_name, $old_slugs) )		delete_post_meta($post_id, '_wp_old_slug', $post->post_name);}/** * Retrieve the private post SQL based on capability. * * This function provides a standardized way to appropriately select on the * post_status of posts/pages. The function will return a piece of SQL code that * can be added to a WHERE clause; this SQL is constructed to allow all * published posts, and all private posts to which the user has access. * * It also allows plugins that define their own post type to control the cap by * using the hook 'pub_priv_sql_capability'. The plugin is expected to return * the capability the user must have to read the private post type. * * @since 2.2.0 * * @uses $user_ID * @uses apply_filters() Call 'pub_priv_sql_capability' filter for plugins with different post types. * * @param string $post_type currently only supports 'post' or 'page'. * @return string SQL code that can be added to a where clause. */function get_private_posts_cap_sql($post_type) {	return get_posts_by_author_sql($post_type, FALSE);}/** * Retrieve the post SQL based on capability, author, and type. * * See above for full description. * * @since 3.0.0 * @param string $post_type currently only supports 'post' or 'page'. * @param bool $full Optional.  Returns a full WHERE statement instead of just an 'andalso' term. * @param int $post_author Optional.  Query posts having a single author ID. * @return string SQL WHERE code that can be added to a query. */function get_posts_by_author_sql($post_type, $full = TRUE, $post_author = NULL) {	global $user_ID, $wpdb;	// Private posts	if ($post_type == 'post') {		$cap = 'read_private_posts';	// Private pages	} elseif ($post_type == 'page') {		$cap = 'read_private_pages';	// Dunno what it is, maybe plugins have their own post type?	} else {		$cap = '';		$cap = apply_filters('pub_priv_sql_capability', $cap);		if (empty($cap)) {			// We don't know what it is, filters don't change anything,			// so set the SQL up to return nothing.			return ' 1 = 0 ';		}	}	if ($full) {		if (is_null($post_author)) {			$sql = $wpdb->prepare('WHERE post_type = %s AND ', $post_type);		} else {			$sql = $wpdb->prepare('WHERE post_author = %d AND post_type = %s AND ', $post_author, $post_type);		}	} else {		$sql = '';	}	$sql .= "(post_status = 'publish'";	if (current_user_can($cap)) {		// Does the user have the capability to view private posts? Guess so.		$sql .= " OR post_status = 'private'";	} elseif (is_user_logged_in()) {		// Users can view their own private posts.		$id = (int) $user_ID;		if (is_null($post_author) || !$full) {			$sql .= " OR post_status = 'private' AND post_author = $id";		} elseif ($id == (int)$post_author) {			$sql .= " OR post_status = 'private'";		} // else none	} // else none	$sql .= ')';	return $sql;}/** * Retrieve the date that the last post was published. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is the date when the last post was posted. The * 'gmt' is when the last post was posted in GMT formatted date. * * @since 0.71 * * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostdate' filter * * @global mixed $cache_lastpostdate Stores the last post date * @global mixed $pagenow The current page being viewed * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date of the last post. */function get_lastpostdate($timezone = 'server') {	global $cache_lastpostdate, $wpdb, $blog_id;	$add_seconds_server = date('Z');	if ( !isset($cache_lastpostdate[$blog_id][$timezone]) ) {		switch(strtolower($timezone)) {			case 'gmt':				$lastpostdate = $wpdb->get_var("SELECT post_date_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'blog':				$lastpostdate = $wpdb->get_var("SELECT post_date FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'server':				$lastpostdate = $wpdb->get_var("SELECT DATE_ADD(post_date_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;		}		$cache_lastpostdate[$blog_id][$timezone] = $lastpostdate;	} else {		$lastpostdate = $cache_lastpostdate[$blog_id][$timezone];	}	return apply_filters( 'get_lastpostdate', $lastpostdate, $timezone );}/** * Retrieve last post modified date depending on timezone. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is just when the last post was modified. The * 'gmt' is when the last post was modified in GMT time. * * @since 1.2.0 * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostmodified' filter * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date the post was last modified. */function get_lastpostmodified($timezone = 'server') {	global $wpdb;	$add_seconds_server = date('Z');	$timezone = strtolower( $timezone );	$lastpostmodified = wp_cache_get( "lastpostmodified:$timezone", 'timeinfo' );	if ( $lastpostmodified )		return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );	switch ( strtolower($timezone) ) {		case 'gmt':			$lastpostmodified = $wpdb->get_var("SELECT post_modified_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'blog':			$lastpostmodified = $wpdb->get_var("SELECT post_modified FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'server':			$lastpostmodified = $wpdb->get_var("SELECT DATE_ADD(post_modified_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;	}	$lastpostdate = get_lastpostdate($timezone);	if ( $lastpostdate > $lastpostmodified )		$lastpostmodified = $lastpostdate;	if ( $lastpostmodified )		wp_cache_set( "lastpostmodified:$timezone", $lastpostmodified, 'timeinfo' );	return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );}/** * Updates posts in cache. * * @usedby update_page_cache() Aliased by this function. * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $posts Array of post objects */function update_post_cache(&$posts) {	if ( !$posts )		return;	foreach ( $posts as $post )		wp_cache_add($post->ID, $post, 'posts');}/** * Will clean the post in the cache. * * Cleaning means delete from the cache of the post. Will call to clean the term * object cache associated with the post ID. * * clean_post_cache() will call itself recursively for each child post. * * This function not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Calls 'clean_post_cache' on $id before adding children (if any). * * @param int $id The Post ID in the cache to clean */function clean_post_cache($id) {	global $_wp_suspend_cache_invalidation, $wpdb;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	clean_object_term_cache($id, 'post');	wp_cache_delete( 'wp_get_archives', 'general' );	do_action('clean_post_cache', $id);	if ( $children = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d", $id) ) ) {		foreach( $children as $cid )			clean_post_cache( $cid );	}	if ( is_multisite() )		wp_cache_delete( $wpdb->blogid . '-' . $id, 'global-posts' );}/** * Alias of update_post_cache(). * * @see update_post_cache() Posts and pages are the same, alias is intentional * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $pages list of page objects */function update_page_cache(&$pages) {	update_post_cache($pages);}/** * Will clean the page in the cache. * * Clean (read: delete) page from cache that matches $id. Will also clean cache * associated with 'all_page_ids' and 'get_pages'. * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Will call the 'clean_page_cache' hook action. * * @param int $id Page ID to clean */function clean_page_cache($id) {	clean_post_cache($id);	wp_cache_delete( 'all_page_ids', 'posts' );	wp_cache_delete( 'get_pages', 'posts' );	do_action('clean_page_cache', $id);}/** * Call major cache updating functions for list of Post objects. * * @package WordPress * @subpackage Cache * @since 1.5.0 * * @uses $wpdb * @uses update_post_cache() * @uses update_object_term_cache() * @uses update_postmeta_cache() * * @param array $posts Array of Post objects * @param string $post_type The post type of the posts in $posts. Default is 'post'. * @param bool $update_term_cache Whether to update the term cache. Default is true. * @param bool $update_meta_cache Whether to update the meta cache. Default is true. */function update_post_caches(&$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true) {	// No point in doing all this work if we didn't match any posts.	if ( !$posts )		return;	update_post_cache($posts);	$post_ids = array();	foreach ( $posts as $post )		$post_ids[] = $post->ID;	if ( empty($post_type) )		$post_type = 'post';	if ( !is_array($post_type) && 'any' != $post_type && $update_term_cache )		update_object_term_cache($post_ids, $post_type);	if ( $update_meta_cache )		update_postmeta_cache($post_ids);}/** * Updates metadata cache for list of post IDs. * * Performs SQL query to retrieve the metadata for the post IDs and updates the * metadata cache for the posts. Therefore, the functions, which call this * function, do not need to perform SQL queries on their own. * * @package WordPress * @subpackage Cache * @since 2.1.0 * * @uses $wpdb * * @param array $post_ids List of post IDs. * @return bool|array Returns false if there is nothing to update or an array of metadata. */function update_postmeta_cache($post_ids) {	return update_meta_cache('post', $post_ids);}/** * Will clean the attachment in the cache. * * Cleaning means delete from the cache. Optionaly will clean the term * object cache associated with the attachment ID. * * This function will not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 3.0.0 * * @uses do_action() Calls 'clean_attachment_cache' on $id. * * @param int $id The attachment ID in the cache to clean * @param bool $clean_terms optional. Whether to clean terms cache */function clean_attachment_cache($id, $clean_terms = false) {	global $_wp_suspend_cache_invalidation;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	if ( $clean_terms )		clean_object_term_cache($id, 'attachment');	do_action('clean_attachment_cache', $id);}//// Hooks///** * Hook for managing future post transitions to published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses do_action() Calls 'private_to_published' on post ID if this is a 'private_to_published' call. * @uses wp_clear_scheduled_hook() with 'publish_future_post' and post ID. * * @param string $new_status New post status * @param string $old_status Previous post status * @param object $post Object type containing the post information */function _transition_post_status($new_status, $old_status, $post) {	global $wpdb;	if ( $old_status != 'publish' && $new_status == 'publish' ) {		// Reset GUID if transitioning to publish and it is empty		if ( '' == get_the_guid($post->ID) )			$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );		do_action('private_to_published', $post->ID);  // Deprecated, use private_to_publish	}	// If published posts changed clear the lastpostmodified cache	if ( 'publish' == $new_status || 'publish' == $old_status) {		wp_cache_delete( 'lastpostmodified:server', 'timeinfo' );		wp_cache_delete( 'lastpostmodified:gmt',    'timeinfo' );		wp_cache_delete( 'lastpostmodified:blog',   'timeinfo' );	}	// Always clears the hook in case the post status bounced from future to draft.	wp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );}/** * Hook used to schedule publication for a post marked for the future. * * The $post properties used and must exist are 'ID' and 'post_date_gmt'. * * @since 2.3.0 * @access private * * @param int $deprecated Not used. Can be set to null. Never implemented. *   Not marked as deprecated with _deprecated_argument() as it conflicts with *   wp_transition_post_status() and the default filter for _future_post_hook(). * @param object $post Object type containing the post information */function _future_post_hook( $deprecated = '', $post ) {	wp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );	wp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );}/** * Hook to schedule pings and enclosures when a post is published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses XMLRPC_REQUEST and APP_REQUEST constants. * @uses do_action() Calls 'xmlprc_publish_post' on post ID if XMLRPC_REQUEST is defined. * @uses do_action() Calls 'app_publish_post' on post ID if APP_REQUEST is defined. * * @param int $post_id The ID in the database table of the post being published */function _publish_post_hook($post_id) {	global $wpdb;	if ( defined('XMLRPC_REQUEST') )		do_action('xmlrpc_publish_post', $post_id);	if ( defined('APP_REQUEST') )		do_action('app_publish_post', $post_id);	if ( defined('WP_IMPORTING') )		return;	$data = array( 'post_id' => $post_id, 'meta_value' => '1' );	if ( get_option('default_pingback_flag') ) {		$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_pingme' ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_pingme', 1 );	}	$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_encloseme' ) );	do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_encloseme', 1 );	wp_schedule_single_event(time(), 'do_pings');}/** * Hook used to prevent page/post cache and rewrite rules from staying dirty. * * Does two things. If the post is a page and has a template then it will * update/add that template to the meta. For both pages and posts, it will clean * the post cache to make sure that the cache updates to the changes done * recently. For pages, the rewrite rules of WordPress are flushed to allow for * any changes. * * The $post parameter, only uses 'post_type' property and 'page_template' * property. * * @since 2.3.0 * @access private * @uses $wp_rewrite Flushes Rewrite Rules. * * @param int $post_id The ID in the database table for the $post * @param object $post Object type containing the post information */function _save_post_hook($post_id, $post) {	if ( $post->post_type == 'page' ) {		clean_page_cache($post_id);		// Avoid flushing rules for every post during import.		if ( !defined('WP_IMPORTING') ) {			global $wp_rewrite;			$wp_rewrite->flush_rules(false);		}	} else {		clean_post_cache($post_id);	}}/** * Retrieve post ancestors and append to post ancestors property. * * Will only retrieve ancestors once, if property is already set, then nothing * will be done. If there is not a parent post, or post ID and post parent ID * are the same then nothing will be done. * * The parameter is passed by reference, so nothing needs to be returned. The * property will be updated and can be referenced after the function is * complete. The post parent will be an ancestor and the parent of the post * parent will be an ancestor. There will only be two ancestors at the most. * * @since unknown * @access private * @uses $wpdb * * @param object $_post Post data. * @return null When nothing needs to be done. */function _get_post_ancestors(&$_post) {	global $wpdb;	if ( isset($_post->ancestors) )		return;	$_post->ancestors = array();	if ( empty($_post->post_parent) || $_post->ID == $_post->post_parent )		return;	$id = $_post->ancestors[] = $_post->post_parent;	while ( $ancestor = $wpdb->get_var( $wpdb->prepare("SELECT `post_parent` FROM $wpdb->posts WHERE ID = %d LIMIT 1", $id) ) ) {		if ( $id == $ancestor )			break;		$id = $_post->ancestors[] = $ancestor;	}}/** * Determines which fields of posts are to be saved in revisions. * * Does two things. If passed a post *array*, it will return a post array ready * to be insterted into the posts table as a post revision. Otherwise, returns * an array whose keys are the post fields to be saved for post revisions. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * @access private * @uses apply_filters() Calls '_wp_post_revision_fields' on 'title', 'content' and 'excerpt' fields. * * @param array $post Optional a post array to be processed for insertion as a post revision. * @param bool $autosave optional Is the revision an autosave? * @return array Post array ready to be inserted as a post revision or array of fields that can be versioned. */function _wp_post_revision_fields( $post = null, $autosave = false ) {	static $fields = false;	if ( !$fields ) {		// Allow these to be versioned		$fields = array(			'post_title' => __( 'Title' ),			'post_content' => __( 'Content' ),			'post_excerpt' => __( 'Excerpt' ),		);		// Runs only once		$fields = apply_filters( '_wp_post_revision_fields', $fields );		// WP uses these internally either in versioning or elsewhere - they cannot be versioned		foreach ( array( 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', 'post_author' ) as $protect )			unset( $fields[$protect] );	}	if ( !is_array($post) )		return $fields;	$return = array();	foreach ( array_intersect( array_keys( $post ), array_keys( $fields ) ) as $field )		$return[$field] = $post[$field];	$return['post_parent']   = $post['ID'];	$return['post_status']   = 'inherit';	$return['post_type']     = 'revision';	$return['post_name']     = $autosave ? "$post[ID]-autosave" : "$post[ID]-revision";	$return['post_date']     = isset($post['post_modified']) ? $post['post_modified'] : '';	$return['post_date_gmt'] = isset($post['post_modified_gmt']) ? $post['post_modified_gmt'] : '';	return $return;}/** * Saves an already existing post as a post revision. * * Typically used immediately prior to post updates. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_put_post_revision() * * @param int $post_id The ID of the post to save as a revision. * @return mixed Null or 0 if error, new revision ID, if success. */function wp_save_post_revision( $post_id ) {	// We do autosaves manually with wp_create_post_autosave()	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )		return;	// WP_POST_REVISIONS = 0, false	if ( ! WP_POST_REVISIONS )		return;	if ( !$post = get_post( $post_id, ARRAY_A ) )		return;	if ( !post_type_supports($post['post_type'], 'revisions') )		return;	$return = _wp_put_post_revision( $post );	// WP_POST_REVISIONS = true (default), -1	if ( !is_numeric( WP_POST_REVISIONS ) || WP_POST_REVISIONS < 0 )		return $return;	// all revisions and (possibly) one autosave	$revisions = wp_get_post_revisions( $post_id, array( 'order' => 'ASC' ) );	// WP_POST_REVISIONS = (int) (# of autosaves to save)	$delete = count($revisions) - WP_POST_REVISIONS;	if ( $delete < 1 )		return $return;	$revisions = array_slice( $revisions, 0, $delete );	for ( $i = 0; isset($revisions[$i]); $i++ ) {		if ( false !== strpos( $revisions[$i]->post_name, 'autosave' ) )			continue;		wp_delete_post_revision( $revisions[$i]->ID );	}	return $return;}/** * Retrieve the autosaved data of the specified post. * * Returns a post object containing the information that was autosaved for the * specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int $post_id The post ID. * @return object|bool The autosaved data or false on failure or when no autosave exists. */function wp_get_post_autosave( $post_id ) {	if ( !$post = get_post( $post_id ) )		return false;	$q = array(		'name' => "{$post->ID}-autosave",		'post_parent' => $post->ID,		'post_type' => 'revision',		'post_status' => 'inherit'	);	// Use WP_Query so that the result gets cached	$autosave_query = new WP_Query;	add_action( 'parse_query', '_wp_get_post_autosave_hack' );	$autosave = $autosave_query->query( $q );	remove_action( 'parse_query', '_wp_get_post_autosave_hack' );	if ( $autosave && is_array($autosave) && is_object($autosave[0]) )		return $autosave[0];	return false;}/** * Internally used to hack WP_Query into submission. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param object $query WP_Query object */function _wp_get_post_autosave_hack( $query ) {	$query->is_single = false;}/** * Determines if the specified post is a revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of revision's parent otherwise. */function wp_is_post_revision( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	return (int) $post->post_parent;}/** * Determines if the specified post is an autosave. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of autosave's parent otherwise */function wp_is_post_autosave( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	if ( "{$post->post_parent}-autosave" !== $post->post_name )		return false;	return (int) $post->post_parent;}/** * Inserts post data into the posts table as a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_insert_post() * * @param int|object|array $post Post ID, post object OR post array. * @param bool $autosave Optional. Is the revision an autosave? * @return mixed Null or 0 if error, new revision ID if success. */function _wp_put_post_revision( $post = null, $autosave = false ) {	if ( is_object($post) )		$post = get_object_vars( $post );	elseif ( !is_array($post) )		$post = get_post($post, ARRAY_A);	if ( !$post || empty($post['ID']) )		return;	if ( isset($post['post_type']) && 'revision' == $post['post_type'] )		return new WP_Error( 'post_type', __( 'Cannot create a revision of a revision' ) );	$post = _wp_post_revision_fields( $post, $autosave );	$post = add_magic_quotes($post); //since data is from db	$revision_id = wp_insert_post( $post );	if ( is_wp_error($revision_id) )		return $revision_id;	if ( $revision_id )		do_action( '_wp_put_post_revision', $revision_id );	return $revision_id;}/** * Gets a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_post() * * @param int|object $post Post ID or post object * @param string $output Optional. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional sanitation filter.  @see sanitize_post() * @return mixed Null if error or post object if success */function &wp_get_post_revision(&$post, $output = OBJECT, $filter = 'raw') {	$null = null;	if ( !$revision = get_post( $post, OBJECT, $filter ) )		return $revision;	if ( 'revision' !== $revision->post_type )		return $null;	if ( $output == OBJECT ) {		return $revision;	} elseif ( $output == ARRAY_A ) {		$_revision = get_object_vars($revision);		return $_revision;	} elseif ( $output == ARRAY_N ) {		$_revision = array_values(get_object_vars($revision));		return $_revision;	}	return $revision;}/** * Restores a post to the specified revision. * * Can restore a past revision using all fields of the post revision, or only selected fields. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_update_post() * @uses do_action() Calls 'wp_restore_post_revision' on post ID and revision ID if wp_update_post() *  is successful. * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from. Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_restore_post_revision( $revision_id, $fields = null ) {	if ( !$revision = wp_get_post_revision( $revision_id, ARRAY_A ) )		return $revision;	if ( !is_array( $fields ) )		$fields = array_keys( _wp_post_revision_fields() );	$update = array();	foreach( array_intersect( array_keys( $revision ), $fields ) as $field )		$update[$field] = $revision[$field];	if ( !$update )		return false;	$update['ID'] = $revision['post_parent'];	$update = add_magic_quotes( $update ); //since data is from db	$post_id = wp_update_post( $update );	if ( is_wp_error( $post_id ) )		return $post_id;	if ( $post_id )		do_action( 'wp_restore_post_revision', $post_id, $revision['ID'] );	return $post_id;}/** * Deletes a revision. * * Deletes the row from the posts table corresponding to the specified revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_delete_post() * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from.  Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_delete_post_revision( $revision_id ) {	if ( !$revision = wp_get_post_revision( $revision_id ) )		return $revision;	$delete = wp_delete_post( $revision->ID );	if ( is_wp_error( $delete ) )		return $delete;	if ( $delete )		do_action( 'wp_delete_post_revision', $revision->ID, $revision );	return $delete;}/** * Returns all revisions of specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_children() * * @param int|object $post_id Post ID or post object * @return array empty if no revisions */function wp_get_post_revisions( $post_id = 0, $args = null ) {	if ( ! WP_POST_REVISIONS )		return array();	if ( ( !$post = get_post( $post_id ) ) || empty( $post->ID ) )		return array();	$defaults = array( 'order' => 'DESC', 'orderby' => 'date' );	$args = wp_parse_args( $args, $defaults );	$args = array_merge( $args, array( 'post_parent' => $post->ID, 'post_type' => 'revision', 'post_status' => 'inherit' ) );	if ( !$revisions = get_children( $args ) )		return array();	return $revisions;}function _set_preview($post) {	if ( ! is_object($post) )		return $post;	$preview = wp_get_post_autosave($post->ID);	if ( ! is_object($preview) )		return $post;	$preview = sanitize_post($preview);	$post->post_content = $preview->post_content;	$post->post_title = $preview->post_title;	$post->post_excerpt = $preview->post_excerpt;	return $post;}function _show_post_preview() {	if ( isset($_GET['preview_id']) && isset($_GET['preview_nonce']) ) {		$id = (int) $_GET['preview_id'];		if ( false == wp_verify_nonce( $_GET['preview_nonce'], 'post_preview_' . $id ) )			wp_die( __('You do not have permission to preview drafts.') );		add_filter('the_preview', '_set_preview');	}}
<?php/** * Default Widgets * * @package WordPress * @subpackage Widgets *//** * Pages widget class * * @since 2.8.0 */class WP_Widget_Pages extends WP_Widget {	function WP_Widget_Pages() {		$widget_ops = array('classname' => 'widget_pages', 'description' => __( 'Your site&#8217;s WordPress Pages') );		$this->WP_Widget('pages', __('Pages'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Pages' ) : $instance['title'], $instance, $this->id_base);		$sortby = empty( $instance['sortby'] ) ? 'menu_order' : $instance['sortby'];		$exclude = empty( $instance['exclude'] ) ? '' : $instance['exclude'];		if ( $sortby == 'menu_order' )			$sortby = 'menu_order, post_title';		$out = wp_list_pages( apply_filters('widget_pages_args', array('title_li' => '', 'echo' => 0, 'sort_column' => $sortby, 'exclude' => $exclude) ) );		if ( !empty( $out ) ) {			echo $before_widget;			if ( $title)				echo $before_title . $title . $after_title;		?>		<ul>			<?php echo $out; ?>		</ul>		<?php			echo $after_widget;		}	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( in_array( $new_instance['sortby'], array( 'post_title', 'menu_order', 'ID' ) ) ) {			$instance['sortby'] = $new_instance['sortby'];		} else {			$instance['sortby'] = 'menu_order';		}		$instance['exclude'] = strip_tags( $new_instance['exclude'] );		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'sortby' => 'post_title', 'title' => '', 'exclude' => '') );		$title = esc_attr( $instance['title'] );		$exclude = esc_attr( $instance['exclude'] );	?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p>			<label for="<?php echo $this->get_field_id('sortby'); ?>"><?php _e( 'Sort by:' ); ?></label>			<select name="<?php echo $this->get_field_name('sortby'); ?>" id="<?php echo $this->get_field_id('sortby'); ?>" class="widefat">				<option value="post_title"<?php selected( $instance['sortby'], 'post_title' ); ?>><?php _e('Page title'); ?></option>				<option value="menu_order"<?php selected( $instance['sortby'], 'menu_order' ); ?>><?php _e('Page order'); ?></option>				<option value="ID"<?php selected( $instance['sortby'], 'ID' ); ?>><?php _e( 'Page ID' ); ?></option>			</select>		</p>		<p>			<label for="<?php echo $this->get_field_id('exclude'); ?>"><?php _e( 'Exclude:' ); ?></label> <input type="text" value="<?php echo $exclude; ?>" name="<?php echo $this->get_field_name('exclude'); ?>" id="<?php echo $this->get_field_id('exclude'); ?>" class="widefat" />			<br />			<small><?php _e( 'Page IDs, separated by commas.' ); ?></small>		</p><?php	}}/** * Links widget class * * @since 2.8.0 */class WP_Widget_Links extends WP_Widget {	function WP_Widget_Links() {		$widget_ops = array('description' => __( "Your blogroll" ) );		$this->WP_Widget('links', __('Links'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args, EXTR_SKIP);		$show_description = isset($instance['description']) ? $instance['description'] : false;		$show_name = isset($instance['name']) ? $instance['name'] : false;		$show_rating = isset($instance['rating']) ? $instance['rating'] : false;		$show_images = isset($instance['images']) ? $instance['images'] : true;		$category = isset($instance['category']) ? $instance['category'] : false;		if ( is_admin() && !$category ) {			// Display All Links widget as such in the widgets screen			echo $before_widget . $before_title. __('All Links') . $after_title . $after_widget;			return;		}		$before_widget = preg_replace('/id="[^"]*"/','id="%id"', $before_widget);		wp_list_bookmarks(apply_filters('widget_links_args', array(			'title_before' => $before_title, 'title_after' => $after_title,			'category_before' => $before_widget, 'category_after' => $after_widget,			'show_images' => $show_images, 'show_description' => $show_description,			'show_name' => $show_name, 'show_rating' => $show_rating,			'category' => $category, 'class' => 'linkcat widget'		)));	}	function update( $new_instance, $old_instance ) {		$new_instance = (array) $new_instance;		$instance = array( 'images' => 0, 'name' => 0, 'description' => 0, 'rating' => 0);		foreach ( $instance as $field => $val ) {			if ( isset($new_instance[$field]) )				$instance[$field] = 1;		}		$instance['category'] = intval($new_instance['category']);		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'images' => true, 'name' => true, 'description' => false, 'rating' => false, 'category' => false ) );		$link_cats = get_terms( 'link_category');?>		<p>		<label for="<?php echo $this->get_field_id('category'); ?>" class="screen-reader-text"><?php _e('Select Link Category'); ?></label>		<select class="widefat" id="<?php echo $this->get_field_id('category'); ?>" name="<?php echo $this->get_field_name('category'); ?>">		<option value=""><?php _e('All Links'); ?></option>		<?php		foreach ( $link_cats as $link_cat ) {			echo '<option value="' . intval($link_cat->term_id) . '"'				. ( $link_cat->term_id == $instance['category'] ? ' selected="selected"' : '' )				. '>' . $link_cat->name . "</option>\n";		}		?>		</select></p>		<p>		<input class="checkbox" type="checkbox" <?php checked($instance['images'], true) ?> id="<?php echo $this->get_field_id('images'); ?>" name="<?php echo $this->get_field_name('images'); ?>" />		<label for="<?php echo $this->get_field_id('images'); ?>"><?php _e('Show Link Image'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['name'], true) ?> id="<?php echo $this->get_field_id('name'); ?>" name="<?php echo $this->get_field_name('name'); ?>" />		<label for="<?php echo $this->get_field_id('name'); ?>"><?php _e('Show Link Name'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['description'], true) ?> id="<?php echo $this->get_field_id('description'); ?>" name="<?php echo $this->get_field_name('description'); ?>" />		<label for="<?php echo $this->get_field_id('description'); ?>"><?php _e('Show Link Description'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['rating'], true) ?> id="<?php echo $this->get_field_id('rating'); ?>" name="<?php echo $this->get_field_name('rating'); ?>" />		<label for="<?php echo $this->get_field_id('rating'); ?>"><?php _e('Show Link Rating'); ?></label>		</p><?php	}}/** * Search widget class * * @since 2.8.0 */class WP_Widget_Search extends WP_Widget {	function WP_Widget_Search() {		$widget_ops = array('classname' => 'widget_search', 'description' => __( "A search form for your site") );		$this->WP_Widget('search', __('Search'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		// Use current theme search form if it exists		get_search_form();		echo $after_widget;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = $instance['title'];?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></label></p><?php	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args((array) $new_instance, array( 'title' => ''));		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}}/** * Archives widget class * * @since 2.8.0 */class WP_Widget_Archives extends WP_Widget {	function WP_Widget_Archives() {		$widget_ops = array('classname' => 'widget_archive', 'description' => __( 'A monthly archive of your site&#8217;s posts') );		$this->WP_Widget('archives', __('Archives'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$c = $instance['count'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		$title = apply_filters('widget_title', empty($instance['title']) ? __('Archives') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		if ( $d ) {?>		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'> <option value=""><?php echo esc_attr(__('Select Month')); ?></option> <?php wp_get_archives(apply_filters('widget_archives_dropdown_args', array('type' => 'monthly', 'format' => 'option', 'show_post_count' => $c))); ?> </select><?php		} else {?>		<ul>		<?php wp_get_archives(apply_filters('widget_archives_args', array('type' => 'monthly', 'show_post_count' => $c))); ?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args( (array) $new_instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = $new_instance['count'] ? 1 : 0;		$instance['dropdown'] = $new_instance['dropdown'] ? 1 : 0;		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$title = strip_tags($instance['title']);		$count = $instance['count'] ? 'checked="checked"' : '';		$dropdown = $instance['dropdown'] ? 'checked="checked"' : '';?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<p>			<input class="checkbox" type="checkbox" <?php echo $count; ?> id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>" /> <label for="<?php echo $this->get_field_id('count'); ?>"><?php _e('Show post counts'); ?></label>			<br />			<input class="checkbox" type="checkbox" <?php echo $dropdown; ?> id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>" /> <label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e('Display as a drop down'); ?></label>		</p><?php	}}/** * Meta widget class * * Displays log in/out, RSS feed links, etc. * * @since 2.8.0 */class WP_Widget_Meta extends WP_Widget {	function WP_Widget_Meta() {		$widget_ops = array('classname' => 'widget_meta', 'description' => __( "Log in/out, admin, feed and WordPress links") );		$this->WP_Widget('meta', __('Meta'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Meta') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;?>			<ul>			<?php wp_register(); ?>			<li><?php wp_loginout(); ?></li>			<li><a href="<?php bloginfo('rss2_url'); ?>" title="<?php echo esc_attr(__('Syndicate this site using RSS 2.0')); ?>"><?php _e('Entries <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="<?php bloginfo('comments_rss2_url'); ?>" title="<?php echo esc_attr(__('The latest comments to all posts in RSS')); ?>"><?php _e('Comments <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="http://wordpress.org/" title="<?php echo esc_attr(__('Powered by WordPress, state-of-the-art semantic personal publishing platform.')); ?>">WordPress.org</a></li>			<?php wp_meta(); ?>			</ul><?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>			<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Calendar widget class * * @since 2.8.0 */class WP_Widget_Calendar extends WP_Widget {	function WP_Widget_Calendar() {		$widget_ops = array('classname' => 'widget_calendar', 'description' => __( 'A calendar of your site&#8217;s posts') );		$this->WP_Widget('calendar', __('Calendar'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? '&nbsp;' : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div id="calendar_wrap">';		get_calendar();		echo '</div>';		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Text widget class * * @since 2.8.0 */class WP_Widget_Text extends WP_Widget {	function WP_Widget_Text() {		$widget_ops = array('classname' => 'widget_text', 'description' => __('Arbitrary text or HTML'));		$control_ops = array('width' => 400, 'height' => 350);		$this->WP_Widget('text', __('Text'), $widget_ops, $control_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters( 'widget_title', empty($instance['title']) ? '' : $instance['title'], $instance, $this->id_base);		$text = apply_filters( 'widget_text', $instance['text'], $instance );		echo $before_widget;		if ( !empty( $title ) ) { echo $before_title . $title . $after_title; } ?>			<div class="textwidget"><?php echo $instance['filter'] ? wpautop($text) : $text; ?></div>		<?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( current_user_can('unfiltered_html') )			$instance['text'] =  $new_instance['text'];		else			$instance['text'] = stripslashes( wp_filter_post_kses( addslashes($new_instance['text']) ) ); // wp_filter_post_kses() expects slashed		$instance['filter'] = isset($new_instance['filter']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'text' => '' ) );		$title = strip_tags($instance['title']);		$text = format_to_edit($instance['text']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<textarea class="widefat" rows="16" cols="20" id="<?php echo $this->get_field_id('text'); ?>" name="<?php echo $this->get_field_name('text'); ?>"><?php echo $text; ?></textarea>		<p><input id="<?php echo $this->get_field_id('filter'); ?>" name="<?php echo $this->get_field_name('filter'); ?>" type="checkbox" <?php checked(isset($instance['filter']) ? $instance['filter'] : 0); ?> />&nbsp;<label for="<?php echo $this->get_field_id('filter'); ?>"><?php _e('Automatically add paragraphs'); ?></label></p><?php	}}/** * Categories widget class * * @since 2.8.0 */class WP_Widget_Categories extends WP_Widget {	function WP_Widget_Categories() {		$widget_ops = array( 'classname' => 'widget_categories', 'description' => __( "A list or dropdown of categories" ) );		$this->WP_Widget('categories', __('Categories'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Categories' ) : $instance['title'], $instance, $this->id_base);		$c = $instance['count'] ? '1' : '0';		$h = $instance['hierarchical'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		$cat_args = array('orderby' => 'name', 'show_count' => $c, 'hierarchical' => $h);		if ( $d ) {			$cat_args['show_option_none'] = __('Select Category');			wp_dropdown_categories(apply_filters('widget_categories_dropdown_args', $cat_args));?><script type='text/javascript'>/* <![CDATA[ */	var dropdown = document.getElementById("cat");	function onCatChange() {		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {			location.href = "<?php echo home_url(); ?>/?cat="+dropdown.options[dropdown.selectedIndex].value;		}	}	dropdown.onchange = onCatChange;/* ]]> */</script><?php		} else {?>		<ul><?php		$cat_args['title_li'] = '';		wp_list_categories(apply_filters('widget_categories_args', $cat_args));?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = !empty($new_instance['count']) ? 1 : 0;		$instance['hierarchical'] = !empty($new_instance['hierarchical']) ? 1 : 0;		$instance['dropdown'] = !empty($new_instance['dropdown']) ? 1 : 0;		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = esc_attr( $instance['title'] );		$count = isset($instance['count']) ? (bool) $instance['count'] :false;		$hierarchical = isset( $instance['hierarchical'] ) ? (bool) $instance['hierarchical'] : false;		$dropdown = isset( $instance['dropdown'] ) ? (bool) $instance['dropdown'] : false;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:' ); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>"<?php checked( $dropdown ); ?> />		<label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e( 'Show as dropdown' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>"<?php checked( $count ); ?> />		<label for="<?php echo $this->get_field_id('count'); ?>"><?php _e( 'Show post counts' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('hierarchical'); ?>" name="<?php echo $this->get_field_name('hierarchical'); ?>"<?php checked( $hierarchical ); ?> />		<label for="<?php echo $this->get_field_id('hierarchical'); ?>"><?php _e( 'Show hierarchy' ); ?></label></p><?php	}}/** * Recent_Posts widget class * * @since 2.8.0 */class WP_Widget_Recent_Posts extends WP_Widget {	function WP_Widget_Recent_Posts() {		$widget_ops = array('classname' => 'widget_recent_entries', 'description' => __( "The most recent posts on your site") );		$this->WP_Widget('recent-posts', __('Recent Posts'), $widget_ops);		$this->alt_option_name = 'widget_recent_entries';		add_action( 'save_post', array(&$this, 'flush_widget_cache') );		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );	}	function widget($args, $instance) {		$cache = wp_cache_get('widget_recent_posts', 'widget');		if ( !is_array($cache) )			$cache = array();		if ( isset($cache[$args['widget_id']]) ) {			echo $cache[$args['widget_id']];			return;		}		ob_start();		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Posts') : $instance['title'], $instance, $this->id_base);		if ( !$number = (int) $instance['number'] )			$number = 10;		else if ( $number < 1 )			$number = 1;		else if ( $number > 15 )			$number = 15;		$r = new WP_Query(array('showposts' => $number, 'nopaging' => 0, 'post_status' => 'publish', 'caller_get_posts' => 1));		if ($r->have_posts()) :?>		<?php echo $before_widget; ?>		<?php if ( $title ) echo $before_title . $title . $after_title; ?>		<ul>		<?php  while ($r->have_posts()) : $r->the_post(); ?>		<li><a href="<?php the_permalink() ?>" title="<?php echo esc_attr(get_the_title() ? get_the_title() : get_the_ID()); ?>"><?php if ( get_the_title() ) the_title(); else the_ID(); ?></a></li>		<?php endwhile; ?>		</ul>		<?php echo $after_widget; ?><?php		// Reset the global $the_post as this query will have stomped on it		wp_reset_postdata();		endif;		$cache[$args['widget_id']] = ob_get_flush();		wp_cache_set('widget_recent_posts', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_entries']) )			delete_option('widget_recent_entries');		return $instance;	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_posts', 'widget');	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		if ( !isset($instance['number']) || !$number = (int) $instance['number'] )			$number = 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of posts to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * Recent_Comments widget class * * @since 2.8.0 */class WP_Widget_Recent_Comments extends WP_Widget {	function WP_Widget_Recent_Comments() {		$widget_ops = array('classname' => 'widget_recent_comments', 'description' => __( 'The most recent comments' ) );		$this->WP_Widget('recent-comments', __('Recent Comments'), $widget_ops);		$this->alt_option_name = 'widget_recent_comments';		if ( is_active_widget(false, false, $this->id_base) )			add_action( 'wp_head', array(&$this, 'recent_comments_style') );		add_action( 'comment_post', array(&$this, 'flush_widget_cache') );		add_action( 'transition_comment_status', array(&$this, 'flush_widget_cache') );	}	function recent_comments_style() { ?>	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style><?php	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_comments', 'widget');	}	function widget( $args, $instance ) {		global $comments, $comment;		$cache = wp_cache_get('widget_recent_comments', 'widget');		if ( ! is_array( $cache ) )			$cache = array();		if ( isset( $cache[$args['widget_id']] ) ) {			echo $cache[$args['widget_id']];			return;		} 		extract($args, EXTR_SKIP); 		$output = ''; 		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Comments') : $instance['title']);		if ( ! $number = (int) $instance['number'] ) 			$number = 5; 		else if ( $number < 1 ) 			$number = 1;		$comments = get_comments( array( 'number' => $number, 'status' => 'approve' ) );		$output .= $before_widget;		if ( $title )			$output .= $before_title . $title . $after_title;		$output .= '<ul id="recentcomments">';		if ( $comments ) {			foreach ( (array) $comments as $comment) {				$output .=  '<li class="recentcomments">' . /* translators: comments widget: 1: comment author, 2: post link */ sprintf(_x('%1$s on %2$s', 'widgets'), get_comment_author_link(), '<a href="' . esc_url( get_comment_link($comment->comment_ID) ) . '">' . get_the_title($comment->comment_post_ID) . '</a>') . '</li>';			} 		}		$output .= '</ul>';		$output .= $after_widget;		echo $output;		$cache[$args['widget_id']] = $output;		wp_cache_set('widget_recent_comments', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_comments']) )			delete_option('widget_recent_comments');		return $instance;	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		$number = isset($instance['number']) ? absint($instance['number']) : 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of comments to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * RSS widget class * * @since 2.8.0 */class WP_Widget_RSS extends WP_Widget {	function WP_Widget_RSS() {		$widget_ops = array( 'description' => __('Entries from any RSS or Atom feed') );		$control_ops = array( 'width' => 400, 'height' => 200 );		$this->WP_Widget( 'rss', __('RSS'), $widget_ops, $control_ops );	}	function widget($args, $instance) {		if ( isset($instance['error']) && $instance['error'] )			return;		extract($args, EXTR_SKIP);		$url = $instance['url'];		while ( stristr($url, 'http') != $url )			$url = substr($url, 1);		if ( empty($url) )			return;		$rss = fetch_feed($url);		$title = $instance['title'];		$desc = '';		$link = '';		if ( ! is_wp_error($rss) ) {			$desc = esc_attr(strip_tags(@html_entity_decode($rss->get_description(), ENT_QUOTES, get_option('blog_charset'))));			if ( empty($title) )				$title = esc_html(strip_tags($rss->get_title()));			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);		}		if ( empty($title) )			$title = empty($desc) ? __('Unknown Feed') : $desc;		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		$url = esc_url(strip_tags($url));		$icon = includes_url('images/rss.png');		if ( $title )			$title = "<a class='rsswidget' href='$url' title='" . esc_attr__( 'Syndicate this content' ) ."'><img style='border:0' width='14' height='14' src='$icon' alt='RSS' /></a> <a class='rsswidget' href='$link' title='$desc'>$title</a>";		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		wp_widget_rss_output( $rss, $instance );		echo $after_widget;		if ( ! is_wp_error($rss) )			$rss->__destruct();		unset($rss);	}	function update($new_instance, $old_instance) {		$testurl = ( isset($new_instance['url']) && ($new_instance['url'] != $old_instance['url']) );		return wp_widget_rss_process( $new_instance, $testurl );	}	function form($instance) {		if ( empty($instance) )			$instance = array( 'title' => '', 'url' => '', 'items' => 10, 'error' => false, 'show_summary' => 0, 'show_author' => 0, 'show_date' => 0 );		$instance['number'] = $this->number;		wp_widget_rss_form( $instance );	}}/** * Display the RSS entries in a list. * * @since 2.5.0 * * @param string|array|object $rss RSS url. * @param array $args Widget arguments. */function wp_widget_rss_output( $rss, $args = array() ) {	if ( is_string( $rss ) ) {		$rss = fetch_feed($rss);	} elseif ( is_array($rss) && isset($rss['url']) ) {		$args = $rss;		$rss = fetch_feed($rss['url']);	} elseif ( !is_object($rss) ) {		return;	}	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') )			echo '<p>' . sprintf( __('<strong>RSS Error</strong>: %s'), $rss->get_error_message() ) . '</p>';		return;	}	$default_args = array( 'show_author' => 0, 'show_date' => 0, 'show_summary' => 0 );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$items = (int) $items;	if ( $items < 1 || 20 < $items )		$items = 10;	$show_summary  = (int) $show_summary;	$show_author   = (int) $show_author;	$show_date     = (int) $show_date;	if ( !$rss->get_item_quantity() ) {		echo '<ul><li>' . __( 'An error has occurred; the feed is probably down. Try again later.' ) . '</li></ul>';		$rss->__destruct();		unset($rss);		return;	}	echo '<ul>';	foreach ( $rss->get_items(0, $items) as $item ) {		$link = $item->get_link();		while ( stristr($link, 'http') != $link )			$link = substr($link, 1);		$link = esc_url(strip_tags($link));		$title = esc_attr(strip_tags($item->get_title()));		if ( empty($title) )			$title = __('Untitled');		$desc = str_replace( array("\n", "\r"), ' ', esc_attr( strip_tags( @html_entity_decode( $item->get_description(), ENT_QUOTES, get_option('blog_charset') ) ) ) );		$desc = wp_html_excerpt( $desc, 360 );		// Append ellipsis. Change existing [...] to [&hellip;].		if ( '[...]' == substr( $desc, -5 ) )			$desc = substr( $desc, 0, -5 ) . '[&hellip;]';		elseif ( '[&hellip;]' != substr( $desc, -10 ) )			$desc .= ' [&hellip;]';		$desc = esc_html( $desc );		if ( $show_summary ) {			$summary = "<div class='rssSummary'>$desc</div>";		} else {			$summary = '';		}		$date = '';		if ( $show_date ) {			$date = $item->get_date();			if ( $date ) {				if ( $date_stamp = strtotime( $date ) )					$date = ' <span class="rss-date">' . date_i18n( get_option( 'date_format' ), $date_stamp ) . '</span>';				else					$date = '';			}		}		$author = '';		if ( $show_author ) {			$author = $item->get_author();			if ( is_object($author) ) {				$author = $author->get_name();				$author = ' <cite>' . esc_html( strip_tags( $author ) ) . '</cite>';			}		}		if ( $link == '' ) {			echo "<li>$title{$date}{$summary}{$author}</li>";		} else {			echo "<li><a class='rsswidget' href='$link' title='$desc'>$title</a>{$date}{$summary}{$author}</li>";		}	}	echo '</ul>';	$rss->__destruct();	unset($rss);}/** * Display RSS widget options form. * * The options for what fields are displayed for the RSS form are all booleans * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author', * 'show_date'. * * @since 2.5.0 * * @param array|string $args Values for input fields. * @param array $inputs Override default display options. */function wp_widget_rss_form( $args, $inputs = null ) {	$default_inputs = array( 'url' => true, 'title' => true, 'items' => true, 'show_summary' => true, 'show_author' => true, 'show_date' => true );	$inputs = wp_parse_args( $inputs, $default_inputs );	extract( $args );	extract( $inputs, EXTR_SKIP);	$number = esc_attr( $number );	$title  = esc_attr( $title );	$url    = esc_url( $url );	$items  = (int) $items;	if ( $items < 1 || 20 < $items )		$items  = 10;	$show_summary   = (int) $show_summary;	$show_author    = (int) $show_author;	$show_date      = (int) $show_date;	if ( !empty($error) )		echo '<p class="widget-error"><strong>' . sprintf( __('RSS Error: %s'), $error) . '</strong></p>';	if ( $inputs['url'] ) :?>	<p><label for="rss-url-<?php echo $number; ?>"><?php _e('Enter the RSS feed URL here:'); ?></label>	<input class="widefat" id="rss-url-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][url]" type="text" value="<?php echo $url; ?>" /></p><?php endif; if ( $inputs['title'] ) : ?>	<p><label for="rss-title-<?php echo $number; ?>"><?php _e('Give the feed a title (optional):'); ?></label>	<input class="widefat" id="rss-title-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][title]" type="text" value="<?php echo $title; ?>" /></p><?php endif; if ( $inputs['items'] ) : ?>	<p><label for="rss-items-<?php echo $number; ?>"><?php _e('How many items would you like to display?'); ?></label>	<select id="rss-items-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][items]"><?php		for ( $i = 1; $i <= 20; ++$i )			echo "<option value='$i' " . ( $items == $i ? "selected='selected'" : '' ) . ">$i</option>";?>	</select></p><?php endif; if ( $inputs['show_summary'] ) : ?>	<p><input id="rss-show-summary-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_summary]" type="checkbox" value="1" <?php if ( $show_summary ) echo 'checked="checked"'; ?>/>	<label for="rss-show-summary-<?php echo $number; ?>"><?php _e('Display item content?'); ?></label></p><?php endif; if ( $inputs['show_author'] ) : ?>	<p><input id="rss-show-author-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_author]" type="checkbox" value="1" <?php if ( $show_author ) echo 'checked="checked"'; ?>/>	<label for="rss-show-author-<?php echo $number; ?>"><?php _e('Display item author if available?'); ?></label></p><?php endif; if ( $inputs['show_date'] ) : ?>	<p><input id="rss-show-date-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_date]" type="checkbox" value="1" <?php if ( $show_date ) echo 'checked="checked"'; ?>/>	<label for="rss-show-date-<?php echo $number; ?>"><?php _e('Display item date?'); ?></label></p><?php	endif;	foreach ( array_keys($default_inputs) as $input ) :		if ( 'hidden' === $inputs[$input] ) :			$id = str_replace( '_', '-', $input );?>	<input type="hidden" id="rss-<?php echo $id; ?>-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][<?php echo $input; ?>]" value="<?php echo $$input; ?>" /><?php		endif;	endforeach;}/** * Process RSS feed widget data and optionally retrieve feed items. * * The feed widget can not have more than 20 items or it will reset back to the * default, which is 10. * * The resulting array has the feed title, feed url, feed link (from channel), * feed items, error (if any), and whether to show summary, author, and date. * All respectively in the order of the array elements. * * @since 2.5.0 * * @param array $widget_rss RSS widget feed data. Expects unescaped data. * @param bool $check_feed Optional, default is true. Whether to check feed for errors. * @return array */function wp_widget_rss_process( $widget_rss, $check_feed = true ) {	$items = (int) $widget_rss['items'];	if ( $items < 1 || 20 < $items )		$items = 10;	$url           = esc_url_raw(strip_tags( $widget_rss['url'] ));	$title         = trim(strip_tags( $widget_rss['title'] ));	$show_summary  = isset($widget_rss['show_summary']) ? (int) $widget_rss['show_summary'] : 0;	$show_author   = isset($widget_rss['show_author']) ? (int) $widget_rss['show_author'] :0;	$show_date     = isset($widget_rss['show_date']) ? (int) $widget_rss['show_date'] : 0;	if ( $check_feed ) {		$rss = fetch_feed($url);		$error = false;		$link = '';		if ( is_wp_error($rss) ) {			$error = $rss->get_error_message();		} else {			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);			$rss->__destruct();			unset($rss);		}	}	return compact( 'title', 'url', 'link', 'items', 'error', 'show_summary', 'show_author', 'show_date' );}/** * Tag cloud widget class * * @since 2.8.0 */class WP_Widget_Tag_Cloud extends WP_Widget {	function WP_Widget_Tag_Cloud() {		$widget_ops = array( 'description' => __( "Your most used tags in cloud format") );		$this->WP_Widget('tag_cloud', __('Tag Cloud'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$current_taxonomy = $this->_get_current_taxonomy($instance);		if ( !empty($instance['title']) ) {			$title = $instance['title'];		} else {			if ( 'post_tag' == $current_taxonomy ) {				$title = __('Tags');			} else {				$tax = get_taxonomy($current_taxonomy);				$title = $tax->labels->name;			}		}		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div>';		wp_tag_cloud( apply_filters('widget_tag_cloud_args', array('taxonomy' => $current_taxonomy) ) );		echo "</div>\n";		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags(stripslashes($new_instance['title']));		$instance['taxonomy'] = stripslashes($new_instance['taxonomy']);		return $instance;	}	function form( $instance ) {		$current_taxonomy = $this->_get_current_taxonomy($instance);?>	<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>	<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php if (isset ( $instance['title'])) {echo esc_attr( $instance['title'] );} ?>" /></p>	<p><label for="<?php echo $this->get_field_id('taxonomy'); ?>"><?php _e('Taxonomy:') ?></label>	<select class="widefat" id="<?php echo $this->get_field_id('taxonomy'); ?>" name="<?php echo $this->get_field_name('taxonomy'); ?>">	<?php foreach ( get_object_taxonomies('post') as $taxonomy ) :				$tax = get_taxonomy($taxonomy);				if ( !$tax->show_tagcloud || empty($tax->labels->name) )					continue;	?>		<option value="<?php echo esc_attr($taxonomy) ?>" <?php selected($taxonomy, $current_taxonomy) ?>><?php echo $tax->labels->name; ?></option>	<?php endforeach; ?>	</select></p><?php	}	function _get_current_taxonomy($instance) {		if ( !empty($instance['taxonomy']) && taxonomy_exists($instance['taxonomy']) )			return $instance['taxonomy'];		return 'post_tag';	}}/** * Navigation Menu widget class * * @since 3.0.0 */ class WP_Nav_Menu_Widget extends WP_Widget {	function WP_Nav_Menu_Widget() {		$widget_ops = array( 'description' => __('Use this widget to add one of your custom menus as a widget.') );		parent::WP_Widget( 'nav_menu', __('Custom Menu'), $widget_ops );	}	function widget($args, $instance) {		// Get menu		$nav_menu = wp_get_nav_menu_object( $instance['nav_menu'] );		if ( !$nav_menu )			return;		echo $args['before_widget'];		if ( !empty($instance['title']) )			echo $args['before_title'] . $instance['title'] . $args['after_title'];		wp_nav_menu( array( 'fallback_cb' => '', 'menu' => $nav_menu ) );		echo $args['after_widget'];	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags( stripslashes($new_instance['title']) );		$instance['nav_menu'] = (int) $new_instance['nav_menu'];		return $instance;	}	function form( $instance ) {		$title = isset( $instance['title'] ) ? $instance['title'] : '';		$nav_menu = isset( $instance['nav_menu'] ) ? $instance['nav_menu'] : '';		// Get menus		$menus = get_terms( 'nav_menu', array( 'hide_empty' => false ) );		// If no menus exists, direct the user to go and create some.		if ( !$menus ) {			echo '<p>'. sprintf( __('No menus have been created yet. <a href="%s">Create some</a>.'), admin_url('nav-menus.php') ) .'</p>';			return;		}		?>		<p>			<label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>			<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>" />		</p>		<p>			<label for="<?php echo $this->get_field_id('nav_menu'); ?>"><?php _e('Select Menu:'); ?></label>			<select id="<?php echo $this->get_field_id('nav_menu'); ?>" name="<?php echo $this->get_field_name('nav_menu'); ?>">		<?php			foreach ( $menus as $menu ) {				$selected = $nav_menu == $menu->term_id ? ' selected="selected"' : '';				echo '<option'. $selected .' value="'. $menu->term_id .'">'. $menu->name .'</option>';			}		?>			</select>		</p>		<?php	}}/** * Register all of the default WordPress widgets on startup. * * Calls 'widgets_init' action after all of the WordPress widgets have been * registered. * * @since 2.2.0 */function wp_widgets_init() {	if ( !is_blog_installed() )		return;	register_widget('WP_Widget_Pages');	register_widget('WP_Widget_Calendar');	register_widget('WP_Widget_Archives');	register_widget('WP_Widget_Links');	register_widget('WP_Widget_Meta');	register_widget('WP_Widget_Search');	register_widget('WP_Widget_Text');	register_widget('WP_Widget_Categories');	register_widget('WP_Widget_Recent_Posts');	register_widget('WP_Widget_Recent_Comments');	register_widget('WP_Widget_RSS');	register_widget('WP_Widget_Tag_Cloud');	register_widget('WP_Nav_Menu_Widget');	do_action('widgets_init');}add_action('init', 'wp_widgets_init', 1);
<?php/** * Install plugin administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_plugins') )	wp_die(__('You do not have sufficient permissions to install plugins on this site.'));include(ABSPATH . 'wp-admin/includes/plugin-install.php');$title = __('Install Plugins');$parent_file = 'plugins.php';wp_reset_vars( array('tab', 'paged') );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Plugin Installer');$tabs['popular']  = _x('Popular','Plugin Installer');$tabs['new']      = _x('Newest','Plugin Installer');$tabs['updated']  = _x('Recently Updated','Plugin Installer');$nonmenu_tabs = array('plugin-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_plugins_tabs', $tabs );$nonmenu_tabs = apply_filters('install_plugins_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;wp_enqueue_style( 'plugin-install' );wp_enqueue_script( 'plugin-install' );if ( 'plugin-information' != $tab )	add_thickbox();$body_id = $tab;do_action('install_plugins_pre_' . $tab); //Used to override the general interface, Eg, install or plugin information.add_contextual_help($current_screen,	'<p>' . sprintf(__('Plugins hook into WordPress to extend its functionality with custom features. Plugins are developed independently from WordPress core by thousands of developers all over the world. All plugins in the official <a href="%s" target="_blank">WordPress.org Plugin Directory</a> are compatible with the WordPress GPL v2 license. You can find new plugins to install by searching or browsing the Directory right here in your own Plugins section.'), 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('If you know what you&#8217;re looking for, Search is your best bet. The Search screen has options to search the WordPress.org Plugin Directory for a particular Term, Author, or Tag. You can also search the directory by selecting a popular tags. Tags in larger type mean more plugins have been labeled with that tag.') . '</p>' .	'<p>' . __('If you just want to get an idea of what&#8217;s available, you can browse Featured, Popular, Newest, and Recently Updated plugins by using the links in the upper left of the screen. These sections rotate regularly.') . '</p>' .	'<p>' . __('If you want to install a plugin that you&#8217;ve downloaded elsewhere, click Upload in the upper left. You will be prompted to upload the .zip package, and once uploaded, you can activate the new plugin.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Add_New_SubPanel" target="_blank">Documentation on Installing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('plugin-install.php?tab=' . $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_plugins_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Administration for Navigation Menus * Interface functions * * @version 2.0.0 * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once( 'admin.php' );// Load all the nav menu interface functionsrequire_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );if ( ! current_theme_supports( 'menus' ) && ! current_theme_supports( 'widgets' ) )	wp_die( __( 'Your theme does not support navigation menus or widgets.' ) );// Permissions Checkif ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );// Nav Menu CSSwp_admin_css( 'nav-menu' );// jQuerywp_enqueue_script( 'jquery' );wp_enqueue_script( 'jquery-ui-draggable' );wp_enqueue_script( 'jquery-ui-droppable' );wp_enqueue_script( 'jquery-ui-sortable' );// Nav Menu functionswp_enqueue_script( 'nav-menu' );// Metaboxeswp_enqueue_script( 'common' );wp_enqueue_script( 'wp-lists' );wp_enqueue_script( 'postbox' );// Container for any messages displayed to the user$messages = array();// Container that stores the name of the active menu$nav_menu_selected_title = '';// The menu id of the current menu being edited$nav_menu_selected_id = isset( $_REQUEST['menu'] ) ? (int) $_REQUEST['menu'] : 0;// Allowed actions: add, update, delete$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'edit';switch ( $action ) {	case 'add-menu-item':		check_admin_referer( 'add-menu_item', 'menu-settings-column-nonce' );		if ( isset( $_REQUEST['nav-menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_REQUEST['menu-locations'] ) );		elseif ( isset( $_REQUEST['menu-item'] ) )			wp_save_nav_menu_items( $nav_menu_selected_id, $_REQUEST['menu-item'] );		break;	case 'move-down-menu-item' :		// moving down a menu item is the same as moving up the next in order		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// get next in order				if (					isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1] )				) {					$next_item_id = $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1];					$next_item_data = (array) wp_setup_nav_menu_item( get_post( $next_item_id ) );					// if not siblings of same parent, bubble menu item up but keep order					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						(							empty( $next_item_data['menu_item_parent'] ) ||							$next_item_data['menu_item_parent'] != $menu_item_data['menu_item_parent']						)					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						}					// make menu item a child of its next sibling					} else {						$next_item_data['menu_order'] = $next_item_data['menu_order'] - 1;						$menu_item_data['menu_order'] = $menu_item_data['menu_order'] + 1;						$menu_item_data['menu_item_parent'] = $next_item_data['ID'];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);						wp_update_post($next_item_data);					}				// the item is last but still has a parent, so bubble up				} elseif (					! empty( $menu_item_data['menu_item_parent'] ) &&					in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids )				) {					$menu_item_data['menu_item_parent'] = (int) get_post_meta( $menu_item_data['menu_item_parent'], '_menu_item_menu_item_parent', true);					update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );				}			}		}		break;	case 'move-up-menu-item' :		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// if this menu item is not first				if ( ! empty( $dbids_to_orders[$menu_item_id] ) && ! empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ) {					// if this menu item is a child of the previous					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) &&						isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) &&						( $menu_item_data['menu_item_parent'] == $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] )					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							// if there is something before the parent and parent a child of it, make menu item a child also of it							if (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] ) &&								! empty( $parent_data['menu_item_parent'] )							) {								$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							// else if there is something before parent and parent not a child of it, make menu item a child of that something's parent							} elseif (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] )							) {								$_possible_parent_id = (int) get_post_meta( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1], '_menu_item_menu_item_parent', true);								if ( in_array( $_possible_parent_id, array_keys( $dbids_to_orders ) ) )									$menu_item_data['menu_item_parent'] = $_possible_parent_id;								else									$menu_item_data['menu_item_parent'] = 0;							// else there isn't something before the parent							} else {								$menu_item_data['menu_item_parent'] = 0;							}							// set former parent's [menu_order] to that of menu-item's							$parent_data['menu_order'] = $parent_data['menu_order'] + 1;							// set menu-item's [menu_order] to that of former parent							$menu_item_data['menu_order'] = $menu_item_data['menu_order'] - 1;							// save changes							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );							wp_update_post($menu_item_data);							wp_update_post($parent_data);						}					// else this menu item is not a child of the previous					} elseif (						empty( $menu_item_data['menu_order'] ) ||						empty( $menu_item_data['menu_item_parent'] ) ||						! in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) ||						empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ||						$orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] != $menu_item_data['menu_item_parent']					) {						// just make it a child of the previous; keep the order						$menu_item_data['menu_item_parent'] = (int) $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);					}				}			}		}		break;	case 'delete-menu-item':		$menu_item_id = (int) $_REQUEST['menu-item'];		check_admin_referer( 'delete-menu_item_' . $menu_item_id );		if ( is_nav_menu_item( $menu_item_id ) && wp_delete_post( $menu_item_id, true ) )			$messages[] = '<div id="message" class="updated"><p>' . __('The menu item has been successfully deleted.') . '</p></div>';		break;	case 'delete':		check_admin_referer( 'delete-nav_menu-' . $nav_menu_selected_id );		if ( is_nav_menu( $nav_menu_selected_id ) ) {			$deleted_nav_menu = wp_get_nav_menu_object( $nav_menu_selected_id );			$delete_nav_menu = wp_delete_nav_menu( $nav_menu_selected_id );			if ( is_wp_error($delete_nav_menu) ) {				$messages[] = '<div id="message" class="error"><p>' . $delete_nav_menu->get_error_message() . '</p></div>';			} else {				// Remove this menu from any locations.				$locations = get_theme_mod( 'nav_menu_locations' );				foreach ( (array) $locations as $location => $menu_id ) {					if ( $menu_id == $nav_menu_selected_id )						$locations[ $location ] = 0;				}				set_theme_mod( 'nav_menu_locations', $locations );				$messages[] = '<div id="message" class="updated"><p>' . __('The menu has been successfully deleted.') . '</p></div>';				// Select the next available menu				$nav_menu_selected_id = 0;				$_nav_menus = wp_get_nav_menus( array('orderby' => 'name') );				foreach( $_nav_menus as $index => $_nav_menu ) {					if ( strcmp( $_nav_menu->name, $deleted_nav_menu->name ) >= 0					 || $index == count( $_nav_menus ) - 1 ) {						$nav_menu_selected_id = $_nav_menu->term_id;						break;					}				}			}			unset( $delete_nav_menu, $deleted_nav_menu, $_nav_menus );		} else {			// Reset the selected menu			$nav_menu_selected_id = 0;			unset( $_REQUEST['menu'] );		}		break;	case 'update':		check_admin_referer( 'update-nav_menu', 'update-nav-menu-nonce' );		// Update menu theme locations		if ( isset( $_POST['menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );		// Add Menu		if ( 0 == $nav_menu_selected_id ) {			$new_menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( $new_menu_title ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( 0, array('menu-name' => $new_menu_title) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					if ( ( $_menu_locations = get_registered_nav_menus() ) && 1 == count( wp_get_nav_menus() ) )						set_theme_mod( 'nav_menu_locations', array( key( $_menu_locations ) => $_nav_menu_selected_id ) );					unset( $_menu_locations );					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_id = $_nav_menu_selected_id;					$nav_menu_selected_title = $_menu_object->name;					$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been successfully created.'), $nav_menu_selected_title ) . '</p></div>';				}			} else {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';			}		// update existing menu		} else {			$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );			$menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( ! $menu_title ) {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';				$menu_title = $_menu_object->name;			}			if ( ! is_wp_error( $_menu_object ) ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( $nav_menu_selected_id, array( 'menu-name' => $menu_title ) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$_menu_object = $_nav_menu_selected_id;					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_title = $_menu_object->name;				}			}			// Update menu items			if ( ! is_wp_error( $_menu_object ) ) {				$unsorted_menu_items = wp_get_nav_menu_items( $nav_menu_selected_id, array('orderby' => 'ID', 'output' => ARRAY_A, 'output_key' => 'ID', 'post_status' => 'draft,publish') );				$menu_items = array();				// Index menu items by db ID				foreach( $unsorted_menu_items as $_item )					$menu_items[$_item->db_id] = $_item;				$post_fields = array( 'menu-item-db-id', 'menu-item-object-id', 'menu-item-object', 'menu-item-parent-id', 'menu-item-position', 'menu-item-type', 'menu-item-title', 'menu-item-url', 'menu-item-description', 'menu-item-attr-title', 'menu-item-target', 'menu-item-classes', 'menu-item-xfn' );				wp_defer_term_counting(true);				// Loop through all the menu items' POST variables				if ( ! empty( $_POST['menu-item-db-id'] ) ) {					foreach( (array) $_POST['menu-item-db-id'] as $_key => $k ) {						// Menu item title can't be blank						if ( empty( $_POST['menu-item-title'][$_key] ) )							continue;						$args = array();						foreach ( $post_fields as $field )							$args[$field] = isset( $_POST[$field][$_key] ) ? $_POST[$field][$_key] : '';						$menu_item_db_id = wp_update_nav_menu_item( $nav_menu_selected_id, ( $_POST['menu-item-db-id'][$_key] != $_key ? 0 : $_key ), $args );						if ( is_wp_error( $menu_item_db_id ) )							$messages[] = '<div id="message" class="error"><p>' . $menu_item_db_id->get_error_message() . '</p></div>';						elseif ( isset( $menu_items[$menu_item_db_id] ) )							unset( $menu_items[$menu_item_db_id] );					}				}				// Remove menu items from the menu that weren't in $_POST				if ( ! empty( $menu_items ) ) {					foreach ( array_keys( $menu_items ) as $menu_item_id ) {						if ( is_nav_menu_item( $menu_item_id ) ) {							wp_delete_post( $menu_item_id );						}					}				}				// Store 'auto-add' pages.				$auto_add = ! empty( $_POST['auto-add-pages'] );				$nav_menu_option = (array) get_option( 'nav_menu_options' );				if ( ! isset( $nav_menu_option['auto_add'] ) )					$nav_menu_option['auto_add'] = array();				if ( $auto_add ) {					if ( ! in_array( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) )						$nav_menu_option['auto_add'][] = $nav_menu_selected_id;				} else {					if ( false !== ( $key = array_search( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) ) )						unset( $nav_menu_option['auto_add'][$key] );				}				// Remove nonexistent/deleted menus				$nav_menu_option['auto_add'] = array_intersect( $nav_menu_option['auto_add'], wp_get_nav_menus( array( 'fields' => 'ids' ) ) );				update_option( 'nav_menu_options', $nav_menu_option );				wp_defer_term_counting(false);				do_action( 'wp_update_nav_menu', $nav_menu_selected_id );				$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been updated.'), $nav_menu_selected_title ) . '</p></div>';				unset( $menu_items, $unsorted_menu_items );			}		}		break;}// Get all nav menus$nav_menus = wp_get_nav_menus( array('orderby' => 'name') );// Get recently edited nav menu$recently_edited = (int) get_user_option( 'nav_menu_recently_edited' );// If there was no recently edited menu, and $nav_menu_selected_id is a nav menu, update recently edited menu.if ( !$recently_edited && is_nav_menu( $nav_menu_selected_id ) ) {	$recently_edited = $nav_menu_selected_id;// Else if $nav_menu_selected_id is not a menu and not requesting that we create a new menu, but $recently_edited is a menu, grab that one.} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && is_nav_menu( $recently_edited ) ) {	$nav_menu_selected_id = $recently_edited;// Else try to grab the first menu from the menus list} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && ! empty($nav_menus) ) {	$nav_menu_selected_id = $nav_menus[0]->term_id;}// Update the user's settingif ( $nav_menu_selected_id != $recently_edited && is_nav_menu( $nav_menu_selected_id ) )	update_user_meta( $current_user->ID, 'nav_menu_recently_edited', $nav_menu_selected_id );// If there's a menu, get its name.if ( ! $nav_menu_selected_title && is_nav_menu( $nav_menu_selected_id ) ) {	$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );	$nav_menu_selected_title = ! is_wp_error( $_menu_object ) ? $_menu_object->name : '';}// Generate truncated menu namesforeach( (array) $nav_menus as $key => $_nav_menu ) {	$_nav_menu->truncated_name = trim( wp_html_excerpt( $_nav_menu->name, 40 ) );	if ( $_nav_menu->truncated_name != $_nav_menu->name )		$_nav_menu->truncated_name .= '&hellip;';	$nav_menus[$key]->truncated_name = $_nav_menu->truncated_name;}// Ensure the user will be able to scroll horizontally// by adding a class for the max menu depth.global $_wp_nav_menu_max_depth;$_wp_nav_menu_max_depth = 0;// Calling wp_get_nav_menu_to_edit generates $_wp_nav_menu_max_depthif ( is_nav_menu( $nav_menu_selected_id ) )	$edit_markup = wp_get_nav_menu_to_edit( $nav_menu_selected_id  );function wp_nav_menu_max_depth() {	global $_wp_nav_menu_max_depth;	return "menu-max-depth-$_wp_nav_menu_max_depth";}add_action('admin_body_class','wp_nav_menu_max_depth');wp_nav_menu_setup();wp_initial_nav_menu_meta_boxes();if ( ! current_theme_supports( 'menus' ) && ! wp_get_nav_menus() )	echo '<div id="message" class="updated"><p>' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p></div>';$help =  '<p>' . __('This feature is new in version 3.0; to use a custom menu in place of your theme&#8217;s default menus, support for this feature must be registered in the theme&#8217;s functions.php file. If your theme does not support the custom menus feature yet (the new default theme, Twenty Ten, does), you can learn about adding support yourself by following the below link.') . '</p>';$help .= '<p>' . __('You can create custom menus for your site. These menus may contain links to pages, categories, custom links or other content types (use the Screen Options tab to decide which ones to show on the screen). You can specify a different navigation label for a menu item as well as other attributes. You can create multiple menus. If your theme includes more than one menu, you can choose which custom menu to associate with each. You can also use custom menus in conjunction with the Custom Menus widget.') . '</p>';$help .= '<p>' . __('To create a new custom menu, click on the + tab, give the menu a name, and click Create Menu. Next, add menu items from the appropriate boxes. You&#8217;ll be able to edit the information for each menu item, and can drag and drop to put them in order. You can also drag a menu item a little to the right to make it a submenu, to create menus with hierarchy. You&#8217;ll see when the position of the drop target shifts over to create the nested placement. Don&#8217;t forget to click Save when you&#8217;re finished.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Menus_SubPanel" target="_blank">Menus Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// Get the admin headerrequire_once( 'admin-header.php' );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e('Menus'); ?></h2>	<?php	foreach( $messages as $message ) :		echo $message . "\n";	endforeach;	?>	<div id="nav-menus-frame">	<div id="menu-settings-column" class="metabox-holder<?php if ( !$nav_menu_selected_id ) { echo ' metabox-holder-disabled'; } ?>">		<form id="nav-menu-meta" action="<?php echo admin_url( 'nav-menus.php' ); ?>" class="nav-menu-meta" method="post" enctype="multipart/form-data">			<input type="hidden" name="menu" id="nav-menu-meta-object-id" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />			<input type="hidden" name="action" value="add-menu-item" />			<?php wp_nonce_field( 'add-menu_item', 'menu-settings-column-nonce' ); ?>			<?php do_meta_boxes( 'nav-menus', 'side', null ); ?>		</form>	</div><!-- /#menu-settings-column -->	<div id="menu-management-liquid">		<div id="menu-management">			<div id="select-nav-menu-container" class="hide-if-js">				<form id="select-nav-menu" action="">					<strong><label for="select-nav-menu"><?php esc_html_e( 'Select Menu:' ); ?></label></strong>					<select class="select-nav-menu" name="menu">						<?php foreach( (array) $nav_menus as $_nav_menu ) : ?>							<option value="<?php echo esc_attr($_nav_menu->term_id) ?>" <?php selected($nav_menu_selected_id, $_nav_menu->term_id); ?>>								<?php echo esc_html( $_nav_menu->truncated_name ); ?>							</option>						<?php endforeach; ?>						<option value="0"><?php esc_html_e('Add New Menu'); ?></option>					</select>					<input type="hidden" name="action" value="edit" />					<input class="button-secondary" name="select_menu" type="submit" value="<?php esc_attr_e('Select'); ?>" />				</form>			</div>			<div class="nav-tabs-wrapper">			<div class="nav-tabs">				<?php				foreach( (array) $nav_menus as $_nav_menu ) :					if ( $nav_menu_selected_id == $_nav_menu->term_id ) : ?><span class="nav-tab nav-tab-active">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</span><?php else : ?><a href="<?php							echo esc_url(add_query_arg(								array(									'action' => 'edit',									'menu' => $_nav_menu->term_id,								),								admin_url( 'nav-menus.php' )							));						?>" class="nav-tab hide-if-no-js">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</a><?php endif;				endforeach;				if ( 0 == $nav_menu_selected_id ) : ?><span class="nav-tab menu-add-new nav-tab-active">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</span><?php else : ?><a href="<?php					echo esc_url(add_query_arg(						array(							'action' => 'edit',							'menu' => 0,						),						admin_url( 'nav-menus.php' )					));				?>" class="nav-tab menu-add-new">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</a><?php endif; ?>			</div>			</div>			<div class="menu-edit">				<form id="update-nav-menu" action="<?php echo admin_url( 'nav-menus.php' ); ?>" method="post" enctype="multipart/form-data">					<div id="nav-menu-header">						<div id="submitpost" class="submitbox">							<div class="major-publishing-actions">								<label class="menu-name-label howto open-label" for="menu-name">									<span><?php _e('Menu Name'); ?></span>									<input name="menu-name" id="menu-name" type="text" class="menu-name regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Enter menu name here'); ?>" value="<?php echo esc_attr( $nav_menu_selected_title  ); ?>" />								</label>								<?php if ( !empty( $nav_menu_selected_id ) ) :									if ( ! isset( $auto_add ) ) {										$auto_add = get_option( 'nav_menu_options' );										if ( ! isset( $auto_add['auto_add'] ) )											$auto_add = false;										elseif ( false !== array_search( $nav_menu_selected_id, $auto_add['auto_add'] ) )											$auto_add = true;										else											$auto_add = false;									}								?>								<div class="auto-add-pages">									<label class="howto"><input type="checkbox"<?php checked( $auto_add ); ?> name="auto-add-pages" value="1" /> <?php printf( __('Automatically add new top-level pages' ), esc_url( admin_url( 'edit.php?post_type=page' ) ) ); ?></label>								</div>								<?php endif; ?>								<br class="clear" />								<div class="publishing-action">									<input class="button-primary menu-save" name="save_menu" type="submit" value="<?php empty($nav_menu_selected_id) ? esc_attr_e('Create Menu') : esc_attr_e('Save Menu'); ?>" />								</div><!-- END .publishing-action -->								<?php if ( ! empty( $nav_menu_selected_id ) ) : ?>								<div class="delete-action">									<a class="submitdelete deletion menu-delete" href="<?php echo esc_url( wp_nonce_url( admin_url('nav-menus.php?action=delete&amp;menu=' . $nav_menu_selected_id), 'delete-nav_menu-' . $nav_menu_selected_id ) ); ?>"><?php _e('Delete Menu'); ?></a>								</div><!-- END .delete-action -->								<?php endif; ?>							</div><!-- END .major-publishing-actions -->						</div><!-- END #submitpost .submitbox -->						<?php						wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );						wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );						wp_nonce_field( 'update-nav_menu', 'update-nav-menu-nonce' );						?>						<input type="hidden" name="action" value="update" />						<input type="hidden" name="menu" id="menu" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />					</div><!-- END #nav-menu-header -->					<div id="post-body">						<div id="post-body-content">							<?php							if ( isset( $edit_markup ) ) {								if ( ! is_wp_error( $edit_markup ) )									echo $edit_markup;							} else if ( empty( $nav_menu_selected_id ) ) {								echo '<div class="post-body-plain">';								echo '<p>' . __('To create a custom menu, give it a name above and click Create Menu. Then choose items like pages, categories or custom links from the left column to add to this menu.') . '</p>';								echo '<p>' . __('After you have added your items, drag and drop to put them in the order you want. You can also click each item to reveal additional configuration options.') . '</p>';								echo '<p>' . __('When you have finished building your custom menu, make sure you click the Save Menu button.') . '</p>';								echo '</div>';							}							?>						</div><!-- /#post-body-content -->					</div><!-- /#post-body -->				</form><!-- /#update-nav-menu -->			</div><!-- /.menu-edit -->		</div><!-- /#menu-management -->	</div><!-- /#menu-management-liquid -->	</div><!-- /#nav-menus-frame --></div><!-- /.wrap--><?php include( 'admin-footer.php' ); ?>
<?php/** * WordPress user administration API. * * @package WordPress * @subpackage Administration *//** * Creates a new user from the "Users" form using $_POST information. * * It seems that the first half is for backwards compatibility, but only * has the ability to alter the user's role. WordPress core seems to * use this function only in the second way, running edit_user() with * no id so as to create a new user. * * @since 2.0 * * @param int $user_id Optional. User ID. * @return null|WP_Error|int Null when adding user, WP_Error or User ID integer when no parameters. */function add_user() {	if ( func_num_args() ) { // The hackiest hack that ever did hack		global $current_user, $wp_roles;		$user_id = (int) func_get_arg( 0 );		if ( isset( $_POST['role'] ) ) {			$new_role = sanitize_text_field( $_POST['role'] );			// Don't let anyone with 'edit_users' (admins) edit their own role to something without it.			if ( $user_id != $current_user->id || $wp_roles->role_objects[$new_role]->has_cap( 'edit_users' ) ) {				// If the new role isn't editable by the logged-in user die with error				$editable_roles = get_editable_roles();				if ( empty( $editable_roles[$new_role] ) )					wp_die(__('You can&#8217;t give users that role.'));				$user = new WP_User( $user_id );				$user->set_role( $new_role );			}		}	} else {		add_action( 'user_register', 'add_user' ); // See above		return edit_user();	}}/** * Edit user settings based on contents of $_POST * * Used on user-edit.php and profile.php to manage and process user options, passwords etc. * * @since 2.0 * * @param int $user_id Optional. User ID. * @return int user id of the updated user */function edit_user( $user_id = 0 ) {	global $current_user, $wp_roles, $wpdb;	if ( $user_id != 0 ) {		$update = true;		$user->ID = (int) $user_id;		$userdata = get_userdata( $user_id );		$user->user_login = $wpdb->escape( $userdata->user_login );	} else {		$update = false;		$user = '';	}	if ( !$update && isset( $_POST['user_login'] ) )		$user->user_login = sanitize_user($_POST['user_login'], true);	$pass1 = $pass2 = '';	if ( isset( $_POST['pass1'] ))		$pass1 = $_POST['pass1'];	if ( isset( $_POST['pass2'] ))		$pass2 = $_POST['pass2'];	if ( isset( $_POST['role'] ) && current_user_can( 'edit_users' ) ) {		$new_role = sanitize_text_field( $_POST['role'] );		$potential_role = isset($wp_roles->role_objects[$new_role]) ? $wp_roles->role_objects[$new_role] : false;		// Don't let anyone with 'edit_users' (admins) edit their own role to something without it.		// Multisite super admins can freely edit their blog roles -- they possess all caps.		if ( ( is_multisite() && current_user_can( 'manage_sites' ) ) || $user_id != $current_user->id || ($potential_role && $potential_role->has_cap( 'edit_users' ) ) )			$user->role = $new_role;		// If the new role isn't editable by the logged-in user die with error		$editable_roles = get_editable_roles();		if ( ! empty( $new_role ) && empty( $editable_roles[$new_role] ) )			wp_die(__('You can&#8217;t give users that role.'));	}	if ( isset( $_POST['email'] ))		$user->user_email = sanitize_text_field( $_POST['email'] );	if ( isset( $_POST['url'] ) ) {		if ( empty ( $_POST['url'] ) || $_POST['url'] == 'http://' ) {			$user->user_url = '';		} else {			$user->user_url = esc_url_raw( $_POST['url'] );			$user->user_url = preg_match('/^(https?|ftps?|mailto|news|irc|gopher|nntp|feed|telnet):/is', $user->user_url) ? $user->user_url : 'http://'.$user->user_url;		}	}	if ( isset( $_POST['first_name'] ) )		$user->first_name = sanitize_text_field( $_POST['first_name'] );	if ( isset( $_POST['last_name'] ) )		$user->last_name = sanitize_text_field( $_POST['last_name'] );	if ( isset( $_POST['nickname'] ) )		$user->nickname = sanitize_text_field( $_POST['nickname'] );	if ( isset( $_POST['display_name'] ) )		$user->display_name = sanitize_text_field( $_POST['display_name'] );	if ( isset( $_POST['description'] ) )		$user->description = trim( $_POST['description'] );	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( isset( $_POST[$method] ))			$user->$method = sanitize_text_field( $_POST[$method] );	}	if ( $update ) {		$user->rich_editing = isset( $_POST['rich_editing'] ) && 'false' == $_POST['rich_editing'] ? 'false' : 'true';		$user->admin_color = isset( $_POST['admin_color'] ) ? sanitize_text_field( $_POST['admin_color'] ) : 'fresh';	}	$user->comment_shortcuts = isset( $_POST['comment_shortcuts'] ) && 'true' == $_POST['comment_shortcuts'] ? 'true' : '';	$user->use_ssl = 0;	if ( !empty($_POST['use_ssl']) )		$user->use_ssl = 1;	$errors = new WP_Error();	/* checking that username has been typed */	if ( $user->user_login == '' )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: Please enter a username.' ));	/* checking the password has been typed twice */	do_action_ref_array( 'check_passwords', array ( $user->user_login, & $pass1, & $pass2 ));	if ( $update ) {		if ( empty($pass1) && !empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: You entered your new password only once.' ), array( 'form-field' => 'pass1' ) );		elseif ( !empty($pass1) && empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: You entered your new password only once.' ), array( 'form-field' => 'pass2' ) );	} else {		if ( empty($pass1) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter your password.' ), array( 'form-field' => 'pass1' ) );		elseif ( empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter your password twice.' ), array( 'form-field' => 'pass2' ) );	}	/* Check for "\" in password */	if ( false !== strpos( stripslashes($pass1), "\\" ) )		$errors->add( 'pass', __( '<strong>ERROR</strong>: Passwords may not contain the character "\\".' ), array( 'form-field' => 'pass1' ) );	/* checking the password has been typed twice the same */	if ( $pass1 != $pass2 )		$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter the same password in the two password fields.' ), array( 'form-field' => 'pass1' ) );	if ( !empty( $pass1 ) )		$user->user_pass = $pass1;	if ( !$update && isset( $_POST['user_login'] ) && !validate_username( $_POST['user_login'] ) )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ));	if ( !$update && username_exists( $user->user_login ) )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: This username is already registered. Please choose another one.' ));	/* checking e-mail address */	if ( empty( $user->user_email ) ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please enter an e-mail address.' ), array( 'form-field' => 'email' ) );	} elseif ( !is_email( $user->user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The e-mail address isn&#8217;t correct.' ), array( 'form-field' => 'email' ) );	} elseif ( ( $owner_id = email_exists($user->user_email) ) && $owner_id != $user->ID ) {		$errors->add( 'email_exists', __('<strong>ERROR</strong>: This email is already registered, please choose another one.'), array( 'form-field' => 'email' ) );	}	// Allow plugins to return their own errors.	do_action_ref_array('user_profile_update_errors', array ( &$errors, $update, &$user ) );	if ( $errors->get_error_codes() )		return $errors;	if ( $update ) {		$user_id = wp_update_user( get_object_vars( $user ) );	} else {		$user_id = wp_insert_user( get_object_vars( $user ) );		wp_new_user_notification( $user_id, isset($_POST['send_password']) ? $pass1 : '' );	}	return $user_id;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return array List of user IDs. */function get_author_user_ids() {	global $wpdb;	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	return $wpdb->get_col( $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value != '0'", $level_key) );}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. * @return array|bool List of editable authors. False if no editable users. */function get_editable_authors( $user_id ) {	global $wpdb;	$editable = get_editable_user_ids( $user_id );	if ( !$editable ) {		return false;	} else {		$editable = join(',', $editable);		$authors = $wpdb->get_results( "SELECT * FROM $wpdb->users WHERE ID IN ($editable) ORDER BY display_name" );	}	return apply_filters('get_editable_authors', $authors);}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. * @param bool $exclude_zeros Optional, default is true. Whether to exclude zeros. * @return unknown */function get_editable_user_ids( $user_id, $exclude_zeros = true, $post_type = 'post' ) {	global $wpdb;	$user = new WP_User( $user_id );	$post_type_obj = get_post_type_object($post_type);	if ( ! $user->has_cap($post_type_obj->cap->edit_others_posts) ) {		if ( $user->has_cap($post_type_obj->cap->edit_posts) || ! $exclude_zeros )			return array($user->id);		else			return array();	}	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	$query = $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s", $level_key);	if ( $exclude_zeros )		$query .= " AND meta_value != '0'";	return $wpdb->get_col( $query );}/** * Fetch a filtered list of user roles that the current user is * allowed to edit. * * Simple function who's main purpose is to allow filtering of the * list of roles in the $wp_roles object so that plugins can remove * innappropriate ones depending on the situation or user making edits. * Specifically because without filtering anyone with the edit_users * capability can edit others to be administrators, even if they are * only editors or authors. This filter allows admins to delegate * user management. * * @since 2.8 * * @return unknown */function get_editable_roles() {	global $wp_roles;	$all_roles = $wp_roles->roles;	$editable_roles = apply_filters('editable_roles', $all_roles);	return $editable_roles;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return unknown */function get_nonauthor_user_ids() {	global $wpdb;	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	return $wpdb->get_col( $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value = '0'", $level_key) );}/** * Retrieve editable posts from other users. * * @since unknown * * @param int $user_id User ID to not retrieve posts from. * @param string $type Optional, defaults to 'any'. Post type to retrieve, can be 'draft' or 'pending'. * @return array List of posts from others. */function get_others_unpublished_posts($user_id, $type='any') {	global $wpdb;	$editable = get_editable_user_ids( $user_id );	if ( in_array($type, array('draft', 'pending')) )		$type_sql = " post_status = '$type' ";	else		$type_sql = " ( post_status = 'draft' OR post_status = 'pending' ) ";	$dir = ( 'pending' == $type ) ? 'ASC' : 'DESC';	if ( !$editable ) {		$other_unpubs = '';	} else {		$editable = join(',', $editable);		$other_unpubs = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_title, post_author FROM $wpdb->posts WHERE post_type = 'post' AND $type_sql AND post_author IN ($editable) AND post_author != %d ORDER BY post_modified $dir", $user_id) );	}	return apply_filters('get_others_drafts', $other_unpubs);}/** * Retrieve drafts from other users. * * @since unknown * * @param int $user_id User ID. * @return array List of drafts from other users. */function get_others_drafts($user_id) {	return get_others_unpublished_posts($user_id, 'draft');}/** * Retrieve pending review posts from other users. * * @since unknown * * @param int $user_id User ID. * @return array List of posts with pending review post type from other users. */function get_others_pending($user_id) {	return get_others_unpublished_posts($user_id, 'pending');}/** * Retrieve user data and filter it. * * @since unknown * * @param int $user_id User ID. * @return object WP_User object with user data. */function get_user_to_edit( $user_id ) {	$user = new WP_User( $user_id );	$user_contactmethods = _wp_get_user_contactmethods();	foreach ($user_contactmethods as $method => $name) {		if ( empty( $user->{$method} ) )			$user->{$method} = '';	}	if ( empty($user->description) )		$user->description = '';	$user = sanitize_user_object($user, 'edit');	return $user;}/** * Retrieve the user's drafts. * * @since unknown * * @param int $user_id User ID. * @return array */function get_users_drafts( $user_id ) {	global $wpdb;	$query = $wpdb->prepare("SELECT ID, post_title FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'draft' AND post_author = %d ORDER BY post_modified DESC", $user_id);	$query = apply_filters('get_users_drafts', $query);	return $wpdb->get_results( $query );}/** * Remove user and optionally reassign posts and links to another user. * * If the $reassign parameter is not assigned to an User ID, then all posts will * be deleted of that user. The action 'delete_user' that is passed the User ID * being deleted will be run after the posts are either reassigned or deleted. * The user meta will also be deleted that are for that User ID. * * @since unknown * * @param int $id User ID. * @param int $reassign Optional. Reassign posts and links to new User ID. * @return bool True when finished. */function wp_delete_user( $id, $reassign = 'novalue' ) {	global $wpdb;	$id = (int) $id;	// allow for transaction statement	do_action('delete_user', $id);	if ( 'novalue' === $reassign || null === $reassign ) {		$post_ids = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id) );		if ( $post_ids ) {			foreach ( $post_ids as $post_id )				wp_delete_post($post_id);		}		// Clean links		$link_ids = $wpdb->get_col( $wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id) );		if ( $link_ids ) {			foreach ( $link_ids as $link_id )				wp_delete_link($link_id);		}	} else {		$reassign = (int) $reassign;		$wpdb->update( $wpdb->posts, array('post_author' => $reassign), array('post_author' => $id) );		$wpdb->update( $wpdb->links, array('link_owner' => $reassign), array('link_owner' => $id) );	}	clean_user_cache($id);	// FINALLY, delete user	if ( !is_multisite() ) {		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id) );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->users WHERE ID = %d", $id) );	} else {		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels		$wpdb->query("DELETE FROM $wpdb->usermeta WHERE user_id = $id AND meta_key = '{$level_key}'");	}	// allow for commit transaction	do_action('deleted_user', $id);	return true;}/** * Remove all capabilities from user. * * @since unknown * * @param int $id User ID. */function wp_revoke_user($id) {	$id = (int) $id;	$user = new WP_User($id);	$user->remove_all_caps();}if ( !class_exists('WP_User_Search') ) :/** * WordPress User Search class. * * @since unknown */class WP_User_Search {	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $results;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $search_term;	/**	 * Page number.	 *	 * @since unknown	 * @access private	 * @var int	 */	var $page;	/**	 * Role name that users have.	 *	 * @since unknown	 * @access private	 * @var string	 */	var $role;	/**	 * Raw page number.	 *	 * @since unknown	 * @access private	 * @var int|bool	 */	var $raw_page;	/**	 * Amount of users to display per page.	 *	 * @since unknown	 * @access public	 * @var int	 */	var $users_per_page = 50;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $first_user;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var int	 */	var $last_user;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var string	 */	var $query_limit;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_orderby;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_from;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_where;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var int	 */	var $total_users_for_query = 0;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var bool	 */	var $too_many_total_users = false;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $search_errors;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $paging_text;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * @since unknown	 *	 * @param string $search_term Search terms string.	 * @param int $page Optional. Page ID.	 * @param string $role Role name.	 * @return WP_User_Search	 */	function WP_User_Search ($search_term = '', $page = '', $role = '') {		$this->search_term = $search_term;		$this->raw_page = ( '' == $page ) ? false : (int) $page;		$this->page = (int) ( '' == $page ) ? 1 : $page;		$this->role = $role;		$this->prepare_query();		$this->query();		$this->prepare_vars_for_template_usage();		$this->do_paging();	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function prepare_query() {		global $wpdb;		$this->first_user = ($this->page - 1) * $this->users_per_page;		$this->query_limit = $wpdb->prepare(" LIMIT %d, %d", $this->first_user, $this->users_per_page);		$this->query_orderby = ' ORDER BY user_login';		$search_sql = '';		if ( $this->search_term ) {			$searches = array();			$search_sql = 'AND (';			foreach ( array('user_login', 'user_nicename', 'user_email', 'user_url', 'display_name') as $col )				$searches[] = $col . " LIKE '%$this->search_term%'";			$search_sql .= implode(' OR ', $searches);			$search_sql .= ')';		}		$this->query_from = " FROM $wpdb->users";		$this->query_where = " WHERE 1=1 $search_sql";		if ( $this->role ) {			$this->query_from .= " INNER JOIN $wpdb->usermeta ON $wpdb->users.ID = $wpdb->usermeta.user_id";			$this->query_where .= $wpdb->prepare(" AND $wpdb->usermeta.meta_key = '{$wpdb->prefix}capabilities' AND $wpdb->usermeta.meta_value LIKE %s", '%' . $this->role . '%');		} elseif ( is_multisite() ) {			$level_key = $wpdb->prefix . 'capabilities'; // wpmu site admins don't have user_levels			$this->query_from .= ", $wpdb->usermeta";			$this->query_where .= " AND $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '{$level_key}'";		}		do_action_ref_array( 'pre_user_search', array( &$this ) );	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function query() {		global $wpdb;		$this->results = $wpdb->get_col("SELECT DISTINCT($wpdb->users.ID)" . $this->query_from . $this->query_where . $this->query_orderby . $this->query_limit);		if ( $this->results )			$this->total_users_for_query = $wpdb->get_var("SELECT COUNT(DISTINCT($wpdb->users.ID))" . $this->query_from . $this->query_where); // no limit		else			$this->search_errors = new WP_Error('no_matching_users_found', __('No matching users were found!'));	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function prepare_vars_for_template_usage() {		$this->search_term = stripslashes($this->search_term); // done with DB, from now on we want slashes gone	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function do_paging() {		if ( $this->total_users_for_query > $this->users_per_page ) { // have to page the results			$args = array();			if( ! empty($this->search_term) )				$args['usersearch'] = urlencode($this->search_term);			if( ! empty($this->role) )				$args['role'] = urlencode($this->role);			$this->paging_text = paginate_links( array(				'total' => ceil($this->total_users_for_query / $this->users_per_page),				'current' => $this->page,				'base' => 'users.php?%_%',				'format' => 'userspage=%#%',				'add_args' => $args			) );			if ( $this->paging_text ) {				$this->paging_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',					number_format_i18n( ( $this->page - 1 ) * $this->users_per_page + 1 ),					number_format_i18n( min( $this->page * $this->users_per_page, $this->total_users_for_query ) ),					number_format_i18n( $this->total_users_for_query ),					$this->paging_text				);			}		}	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 *	 * @return unknown	 */	function get_results() {		return (array) $this->results;	}	/**	 * Displaying paging text.	 *	 * @see do_paging() Builds paging text.	 *	 * @since unknown	 * @access public	 */	function page_links() {		echo $this->paging_text;	}	/**	 * Whether paging is enabled.	 *	 * @see do_paging() Builds paging text.	 *	 * @since unknown	 * @access public	 *	 * @return bool	 */	function results_are_paged() {		if ( $this->paging_text )			return true;		return false;	}	/**	 * Whether there are search terms.	 *	 * @since unknown	 * @access public	 *	 * @return bool	 */	function is_search() {		if ( $this->search_term )			return true;		return false;	}}endif;add_action('admin_init', 'default_password_nag_handler');function default_password_nag_handler($errors = false) {	global $user_ID;	if ( ! get_user_option('default_password_nag') ) //Short circuit it.		return;	//get_user_setting = JS saved UI setting. else no-js-falback code.	if ( 'hide' == get_user_setting('default_password_nag') || isset($_GET['default_password_nag']) && '0' == $_GET['default_password_nag'] ) {		delete_user_setting('default_password_nag');		update_user_option($user_ID, 'default_password_nag', false, true);	}}add_action('profile_update', 'default_password_nag_edit_user', 10, 2);function default_password_nag_edit_user($user_ID, $old_data) {	if ( ! get_user_option('default_password_nag', $user_ID) ) //Short circuit it.		return;	$new_data = get_userdata($user_ID);	if ( $new_data->user_pass != $old_data->user_pass ) { //Remove the nag if the password has been changed.		delete_user_setting('default_password_nag', $user_ID);		update_user_option($user_ID, 'default_password_nag', false, true);	}}add_action('admin_notices', 'default_password_nag');function default_password_nag() {	if ( ! get_user_option('default_password_nag') ) //Short circuit it.		return;	echo '<div class="error default-password-nag">';	echo '<p>';	echo '<strong>' . __('Notice:') . '</strong> ';	_e('You&rsquo;re using the auto-generated password for your account. Would you like to change it to something you&rsquo;ll remember easier?');	echo '</p><p>';	printf( '<a href="%s">' . __('Yes, take me to my profile page') . '</a> | ', admin_url('profile.php') . '#password' );	printf( '<a href="%s" id="default-password-nag-no">' . __('No thanks, do not remind me again') . '</a>', '?default_password_nag=0' );	echo '</p></div>';}?>
<?php/** * Main WordPress Formatting API. * * Handles many functions for formatting output. * * @package WordPress **//** * Replaces common plain text characters into formatted entities * * As an example, * <code> * 'cause today's effort makes it worth tomorrow's "holiday"... * </code> * Becomes: * <code> * &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221;&#8230; * </code> * Code within certain html blocks are skipped. * * @since 0.71 * @uses $wp_cockneyreplace Array of formatted entities for certain common phrases * * @param string $text The text to be formatted * @return string The string replaced with html entities */function wptexturize($text) {	global $wp_cockneyreplace;	static $static_setup = false, $opening_quote, $closing_quote, $default_no_texturize_tags, $default_no_texturize_shortcodes, $static_characters, $static_replacements, $dynamic_characters, $dynamic_replacements;	$output = '';	$curl = '';	$textarr = preg_split('/(<.*>|\[.*\])/Us', $text, -1, PREG_SPLIT_DELIM_CAPTURE);	$stop = count($textarr);	// No need to set up these variables more than once	if (!$static_setup) {		/* translators: opening curly quote */		$opening_quote = _x('&#8220;', 'opening curly quote');		/* translators: closing curly quote */		$closing_quote = _x('&#8221;', 'closing curly quote');		$default_no_texturize_tags = array('pre', 'code', 'kbd', 'style', 'script', 'tt');		$default_no_texturize_shortcodes = array('code');		// if a plugin has provided an autocorrect array, use it		if ( isset($wp_cockneyreplace) ) {			$cockney = array_keys($wp_cockneyreplace);			$cockneyreplace = array_values($wp_cockneyreplace);		} else {			$cockney = array("'tain't","'twere","'twas","'tis","'twill","'til","'bout","'nuff","'round","'cause");			$cockneyreplace = array("&#8217;tain&#8217;t","&#8217;twere","&#8217;twas","&#8217;tis","&#8217;twill","&#8217;til","&#8217;bout","&#8217;nuff","&#8217;round","&#8217;cause");		}		$static_characters = array_merge(array('---', ' -- ', '--', ' - ', 'xn&#8211;', '...', '``', '\'\'', ' (tm)'), $cockney);		$static_replacements = array_merge(array('&#8212;', ' &#8212; ', '&#8211;', ' &#8211; ', 'xn--', '&#8230;', $opening_quote, $closing_quote, ' &#8482;'), $cockneyreplace);		$dynamic_characters = array('/\'(\d\d(?:&#8217;|\')?s)/', '/\'(\d+)/', '/(\s|\A|[([{<]|")\'/', '/(\d+)"/', '/(\d+)\'/', '/(\S)\'([^\'\s])/', '/(\s|\A|[([{<])"(?!\s)/', '/"(\s|\S|\Z)/', '/\'([\s.]|\Z)/', '/\b(\d+)x(\d+)\b/');		$dynamic_replacements = array('&#8217;$1','&#8217;$1', '$1&#8216;', '$1&#8243;', '$1&#8242;', '$1&#8217;$2', '$1' . $opening_quote . '$2', $closing_quote . '$1', '&#8217;$1', '$1&#215;$2');		$static_setup = true;	}	// Transform into regexp sub-expression used in _wptexturize_pushpop_element	// Must do this everytime in case plugins use these filters in a context sensitive manner	$no_texturize_tags = '(' . implode('|', apply_filters('no_texturize_tags', $default_no_texturize_tags) ) . ')';	$no_texturize_shortcodes = '(' . implode('|', apply_filters('no_texturize_shortcodes', $default_no_texturize_shortcodes) ) . ')';	$no_texturize_tags_stack = array();	$no_texturize_shortcodes_stack = array();	for ( $i = 0; $i < $stop; $i++ ) {		$curl = $textarr[$i];		if ( !empty($curl) && '<' != $curl{0} && '[' != $curl{0}				&& empty($no_texturize_shortcodes_stack) && empty($no_texturize_tags_stack)) {			// This is not a tag, nor is the texturization disabled			// static strings			$curl = str_replace($static_characters, $static_replacements, $curl);			// regular expressions			$curl = preg_replace($dynamic_characters, $dynamic_replacements, $curl);		} elseif (!empty($curl)) {			/*			 * Only call _wptexturize_pushpop_element if first char is correct			 * tag opening			 */			if ('<' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_tags_stack, $no_texturize_tags, '<', '>');			elseif ('[' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes, '[', ']');		}		$curl = preg_replace('/&([^#])(?![a-zA-Z1-4]{1,8};)/', '&#038;$1', $curl);		$output .= $curl;	}	return $output;}/** * Search for disabled element tags. Push element to stack on tag open and pop * on tag close. Assumes first character of $text is tag opening. * * @access private * @since 2.9.0 * * @param string $text Text to check. First character is assumed to be $opening * @param array $stack Array used as stack of opened tag elements * @param string $disabled_elements Tags to match against formatted as regexp sub-expression * @param string $opening Tag opening character, assumed to be 1 character long * @param string $opening Tag closing  character * @return object */function _wptexturize_pushpop_element($text, &$stack, $disabled_elements, $opening = '<', $closing = '>') {	// Check if it is a closing tag -- otherwise assume opening tag	if (strncmp($opening . '/', $text, 2)) {		// Opening? Check $text+1 against disabled elements		if (preg_match('/^' . $disabled_elements . '\b/', substr($text, 1), $matches)) {			/*			 * This disables texturize until we find a closing tag of our type			 * (e.g. <pre>) even if there was invalid nesting before that			 *			 * Example: in the case <pre>sadsadasd</code>"baba"</pre>			 *          "baba" won't be texturize			 */			array_push($stack, $matches[1]);		}	} else {		// Closing? Check $text+2 against disabled elements		$c = preg_quote($closing, '/');		if (preg_match('/^' . $disabled_elements . $c . '/', substr($text, 2), $matches)) {			$last = array_pop($stack);			// Make sure it matches the opening tag			if ($last != $matches[1])				array_push($stack, $last);		}	}}/** * Accepts matches array from preg_replace_callback in wpautop() or a string. * * Ensures that the contents of a <<pre>>...<</pre>> HTML block are not * converted into paragraphs or line-breaks. * * @since 1.2.0 * * @param array|string $matches The array or string * @return string The pre block without paragraph/line-break conversion. */function clean_pre($matches) {	if ( is_array($matches) )		$text = $matches[1] . $matches[2] . "</pre>";	else		$text = $matches;	$text = str_replace('<br />', '', $text);	$text = str_replace('<p>', "\n", $text);	$text = str_replace('</p>', '', $text);	return $text;}/** * Replaces double line-breaks with paragraph elements. * * A group of regex replaces used to identify text formatted with newlines and * replace double line-breaks with HTML paragraph tags. The remaining * line-breaks after conversion become <<br />> tags, unless $br is set to '0' * or 'false'. * * @since 0.71 * * @param string $pee The text which has to be formatted. * @param int|bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true. * @return string Text which has been converted into correct paragraph tags. */function wpautop($pee, $br = 1) {	if ( trim($pee) === '' )		return '';	$pee = $pee . "\n"; // just to make things a little easier, pad the end	$pee = preg_replace('|<br />\s*<br />|', "\n\n", $pee);	// Space things out a little	$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|select|option|form|map|area|blockquote|address|math|style|input|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';	$pee = preg_replace('!(<' . $allblocks . '[^>]*>)!', "\n$1", $pee);	$pee = preg_replace('!(</' . $allblocks . '>)!', "$1\n\n", $pee);	$pee = str_replace(array("\r\n", "\r"), "\n", $pee); // cross-platform newlines	if ( strpos($pee, '<object') !== false ) {		$pee = preg_replace('|\s*<param([^>]*)>\s*|', "<param$1>", $pee); // no pee inside object/embed		$pee = preg_replace('|\s*</embed>\s*|', '</embed>', $pee);	}	$pee = preg_replace("/\n\n+/", "\n\n", $pee); // take care of duplicates	// make paragraphs, including one at the end	$pees = preg_split('/\n\s*\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);	$pee = '';	foreach ( $pees as $tinkle )		$pee .= '<p>' . trim($tinkle, "\n") . "</p>\n";	$pee = preg_replace('|<p>\s*</p>|', '', $pee); // under certain strange conditions it could create a P of entirely whitespace	$pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', "<p>$1</p></$2>", $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee); // don't pee all over a tag	$pee = preg_replace("|<p>(<li.+?)</p>|", "$1", $pee); // problem with nested lists	$pee = preg_replace('|<p><blockquote([^>]*)>|i', "<blockquote$1><p>", $pee);	$pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)!', "$1", $pee);	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee);	if ($br) {		$pee = preg_replace_callback('/<(script|style).*?<\/\\1>/s', create_function('$matches', 'return str_replace("\n", "<WPPreserveNewline />", $matches[0]);'), $pee);		$pee = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $pee); // optionally make line breaks		$pee = str_replace('<WPPreserveNewline />', "\n", $pee);	}	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*<br />!', "$1", $pee);	$pee = preg_replace('!<br />(\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);	if (strpos($pee, '<pre') !== false)		$pee = preg_replace_callback('!(<pre[^>]*>)(.*?)</pre>!is', 'clean_pre', $pee );	$pee = preg_replace( "|\n</p>$|", '</p>', $pee );	return $pee;}/** * Don't auto-p wrap shortcodes that stand alone * * Ensures that shortcodes are not wrapped in <<p>>...<</p>>. * * @since 2.9.0 * * @param string $pee The content. * @return string The filtered content. */function shortcode_unautop($pee) {	global $shortcode_tags;	if ( !empty($shortcode_tags) && is_array($shortcode_tags) ) {		$tagnames = array_keys($shortcode_tags);		$tagregexp = join( '|', array_map('preg_quote', $tagnames) );		$pee = preg_replace('/<p>\\s*?(\\[(' . $tagregexp . ')\\b.*?\\/?\\](?:.+?\\[\\/\\2\\])?)\\s*<\\/p>/s', '$1', $pee);	}	return $pee;}/** * Checks to see if a string is utf8 encoded. * * NOTE: This function checks for 5-Byte sequences, UTF8 *       has Bytes Sequences with a maximum length of 4. * * @author bmorel at ssi dot fr (modified) * @since 1.2.1 * * @param string $str The string to be checked * @return bool True if $str fits a UTF-8 model, false otherwise. */function seems_utf8($str) {	$length = strlen($str);	for ($i=0; $i < $length; $i++) {		$c = ord($str[$i]);		if ($c < 0x80) $n = 0; # 0bbbbbbb		elseif (($c & 0xE0) == 0xC0) $n=1; # 110bbbbb		elseif (($c & 0xF0) == 0xE0) $n=2; # 1110bbbb		elseif (($c & 0xF8) == 0xF0) $n=3; # 11110bbb		elseif (($c & 0xFC) == 0xF8) $n=4; # 111110bb		elseif (($c & 0xFE) == 0xFC) $n=5; # 1111110b		else return false; # Does not match any model		for ($j=0; $j<$n; $j++) { # n bytes matching 10bbbbbb follow ?			if ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))				return false;		}	}	return true;}/** * Converts a number of special characters into their HTML entities. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to encode " to * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded. * * @since 1.2.2 * * @param string $string The text which is to be encoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @param string $charset Optional. The character encoding of the string. Default is false. * @param boolean $double_encode Optional. Whether to encode existing html entities. Default is false. * @return string The encoded text with HTML entities. */function _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no specialchars - saves some processing	if ( !preg_match( '/[&<>"\']/', $string ) ) {		return $string;	}	// Account for the previous behaviour of the function when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()	if ( !$charset ) {		static $_charset;		if ( !isset( $_charset ) ) {			$alloptions = wp_load_alloptions();			$_charset = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';		}		$charset = $_charset;	}	if ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {		$charset = 'UTF-8';	}	$_quote_style = $quote_style;	if ( $quote_style === 'double' ) {		$quote_style = ENT_COMPAT;		$_quote_style = ENT_COMPAT;	} elseif ( $quote_style === 'single' ) {		$quote_style = ENT_NOQUOTES;	}	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = wp_specialchars_decode( $string, $_quote_style );		/* Critical */		// The previous line decodes &amp;phrase; into &phrase;  We must guarantee that &phrase; is valid before proceeding.		$string = wp_kses_normalize_entities($string);		// Now proceed with custom double-encoding silliness		$string = preg_replace( '/&(#?x?[0-9a-z]+);/i', '|wp_entity|$1|/wp_entity|', $string );	}	$string = @htmlspecialchars( $string, $quote_style, $charset );	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = str_replace( array( '|wp_entity|', '|/wp_entity|' ), array( '&', ';' ), $string );	}	// Backwards compatibility	if ( 'single' === $_quote_style ) {		$string = str_replace( "'", '&#039;', $string );	}	return $string;}/** * Converts a number of HTML entities into their special characters. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to decode " entities, * or ENT_QUOTES to do both " and '. Default is ENT_NOQUOTES where no quotes are decoded. * * @since 2.8 * * @param string $string The text which is to be decoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @return string The decoded text without HTML entities. */function wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no entities - saves a lot of processing	if ( strpos( $string, '&' ) === false ) {		return $string;	}	// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// More complete than get_html_translation_table( HTML_SPECIALCHARS )	$single = array( '&#039;'  => '\'', '&#x27;' => '\'' );	$single_preg = array( '/&#0*39;/'  => '&#039;', '/&#x0*27;/i' => '&#x27;' );	$double = array( '&quot;' => '"', '&#034;'  => '"', '&#x22;' => '"' );	$double_preg = array( '/&#0*34;/'  => '&#034;', '/&#x0*22;/i' => '&#x22;' );	$others = array( '&lt;'   => '<', '&#060;'  => '<', '&gt;'   => '>', '&#062;'  => '>', '&amp;'  => '&', '&#038;'  => '&', '&#x26;' => '&' );	$others_preg = array( '/&#0*60;/'  => '&#060;', '/&#0*62;/'  => '&#062;', '/&#0*38;/'  => '&#038;', '/&#x0*26;/i' => '&#x26;' );	if ( $quote_style === ENT_QUOTES ) {		$translation = array_merge( $single, $double, $others );		$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );	} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {		$translation = array_merge( $double, $others );		$translation_preg = array_merge( $double_preg, $others_preg );	} elseif ( $quote_style === 'single' ) {		$translation = array_merge( $single, $others );		$translation_preg = array_merge( $single_preg, $others_preg );	} elseif ( $quote_style === ENT_NOQUOTES ) {		$translation = $others;		$translation_preg = $others_preg;	}	// Remove zero padding on numeric entities	$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );	// Replace characters according to translation table	return strtr( $string, $translation );}/** * Checks for invalid UTF8 in a string. * * @since 2.8 * * @param string $string The text which is to be checked. * @param boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false. * @return string The checked text. */function wp_check_invalid_utf8( $string, $strip = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Store the site charset as a static to avoid multiple calls to get_option()	static $is_utf8;	if ( !isset( $is_utf8 ) ) {		$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );	}	if ( !$is_utf8 ) {		return $string;	}	// Check for support for utf8 in the installed PCRE library once and store the result in a static	static $utf8_pcre;	if ( !isset( $utf8_pcre ) ) {		$utf8_pcre = @preg_match( '/^./u', 'a' );	}	// We can't demand utf8 in the PCRE installation, so just return the string in those cases	if ( !$utf8_pcre ) {		return $string;	}	// preg_match fails when it encounters invalid UTF8 in $string	if ( 1 === @preg_match( '/^./us', $string ) ) {		return $string;	}	// Attempt to strip the bad chars if requested (not recommended)	if ( $strip && function_exists( 'iconv' ) ) {		return iconv( 'utf-8', 'utf-8', $string );	}	return '';}/** * Encode the Unicode values to be used in the URI. * * @since 1.5.0 * * @param string $utf8_string * @param int $length Max length of the string * @return string String with Unicode encoded for URI. */function utf8_uri_encode( $utf8_string, $length = 0 ) {	$unicode = '';	$values = array();	$num_octets = 1;	$unicode_length = 0;	$string_length = strlen( $utf8_string );	for ($i = 0; $i < $string_length; $i++ ) {		$value = ord( $utf8_string[ $i ] );		if ( $value < 128 ) {			if ( $length && ( $unicode_length >= $length ) )				break;			$unicode .= chr($value);			$unicode_length++;		} else {			if ( count( $values ) == 0 ) $num_octets = ( $value < 224 ) ? 2 : 3;			$values[] = $value;			if ( $length && ( $unicode_length + ($num_octets * 3) ) > $length )				break;			if ( count( $values ) == $num_octets ) {				if ($num_octets == 3) {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]) . '%' . dechex($values[2]);					$unicode_length += 9;				} else {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]);					$unicode_length += 6;				}				$values = array();				$num_octets = 1;			}		}	}	return $unicode;}/** * Converts all accent characters to ASCII characters. * * If there are no accent characters, then the string given is just returned. * * @since 1.2.1 * * @param string $string Text that might have accent characters * @return string Filtered string with replaced "nice" characters. */function remove_accents($string) {	if ( !preg_match('/[\x80-\xff]/', $string) )		return $string;	if (seems_utf8($string)) {		$chars = array(		// Decompositions for Latin-1 Supplement		chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',		chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',		chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',		chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',		chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',		chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',		chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',		chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',		chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',		chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',		chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',		chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',		chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',		chr(195).chr(159) => 's', chr(195).chr(160) => 'a',		chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',		chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',		chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',		chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',		chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',		chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',		chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',		chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',		chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',		chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',		chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',		chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',		chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',		chr(195).chr(191) => 'y',		// Decompositions for Latin Extended-A		chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',		chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',		chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',		chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',		chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',		chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',		chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',		chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',		chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',		chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',		chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',		chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',		chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',		chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',		chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',		chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',		chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',		chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',		chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',		chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',		chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',		chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',		chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',		chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',		chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',		chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',		chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',		chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',		chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',		chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',		chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',		chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',		chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',		chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',		chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',		chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',		chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',		chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',		chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',		chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',		chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',		chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',		chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',		chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',		chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',		chr(197).chr(154) => 'S',chr(197).chr(155) => 's',		chr(197).chr(156) => 'S',chr(197).chr(157) => 's',		chr(197).chr(158) => 'S',chr(197).chr(159) => 's',		chr(197).chr(160) => 'S', chr(197).chr(161) => 's',		chr(197).chr(162) => 'T', chr(197).chr(163) => 't',		chr(197).chr(164) => 'T', chr(197).chr(165) => 't',		chr(197).chr(166) => 'T', chr(197).chr(167) => 't',		chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',		chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',		chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',		chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',		chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',		chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',		chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',		chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',		chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',		chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',		chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',		chr(197).chr(190) => 'z', chr(197).chr(191) => 's',		// Euro Sign		chr(226).chr(130).chr(172) => 'E',		// GBP (Pound) Sign		chr(194).chr(163) => '');		$string = strtr($string, $chars);	} else {		// Assume ISO-8859-1 if not UTF-8		$chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)			.chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)			.chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)			.chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)			.chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)			.chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)			.chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)			.chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)			.chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)			.chr(252).chr(253).chr(255);		$chars['out'] = "EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy";		$string = strtr($string, $chars['in'], $chars['out']);		$double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));		$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');		$string = str_replace($double_chars['in'], $double_chars['out'], $string);	}	return $string;}/** * Sanitizes a filename replacing whitespace with dashes * * Removes special characters that are illegal in filenames on certain * operating systems and special characters requiring special escaping * to manipulate at the command line. Replaces spaces and consecutive * dashes with a single dash. Trim period, dash and underscore from beginning * and end of filename. * * @since 2.1.0 * * @param string $filename The filename to be sanitized * @return string The sanitized filename */function sanitize_file_name( $filename ) {	$filename_raw = $filename;	$special_chars = array("?", "[", "]", "/", "\\", "=", "<", ">", ":", ";", ",", "'", "\"", "&", "$", "#", "*", "(", ")", "|", "~", "`", "!", "{", "}", chr(0));	$special_chars = apply_filters('sanitize_file_name_chars', $special_chars, $filename_raw);	$filename = str_replace($special_chars, '', $filename);	$filename = preg_replace('/[\s-]+/', '-', $filename);	$filename = trim($filename, '.-_');	// Split the filename into a base and extension[s]	$parts = explode('.', $filename);	// Return if only one extension	if ( count($parts) <= 2 )		return apply_filters('sanitize_file_name', $filename, $filename_raw);	// Process multiple extensions	$filename = array_shift($parts);	$extension = array_pop($parts);	$mimes = get_allowed_mime_types();	// Loop over any intermediate extensions.  Munge them with a trailing underscore if they are a 2 - 5 character	// long alpha string not in the extension whitelist.	foreach ( (array) $parts as $part) {		$filename .= '.' . $part;		if ( preg_match("/^[a-zA-Z]{2,5}\d?$/", $part) ) {			$allowed = false;			foreach ( $mimes as $ext_preg => $mime_match ) {				$ext_preg = '!(^' . $ext_preg . ')$!i';				if ( preg_match( $ext_preg, $part ) ) {					$allowed = true;					break;				}			}			if ( !$allowed )				$filename .= '_';		}	}	$filename .= '.' . $extension;	return apply_filters('sanitize_file_name', $filename, $filename_raw);}/** * Sanitize username stripping out unsafe characters. * * If $strict is true, only alphanumeric characters (as well as _, space, ., -, * @) are returned. * Removes tags, octets, entities, and if strict is enabled, will remove all * non-ASCII characters. After sanitizing, it passes the username, raw username * (the username in the parameter), and the strict parameter as parameters for * the filter. * * @since 2.0.0 * @uses apply_filters() Calls 'sanitize_user' hook on username, raw username, *		and $strict parameter. * * @param string $username The username to be sanitized. * @param bool $strict If set limits $username to specific characters. Default false. * @return string The sanitized username, after passing through filters. */function sanitize_user( $username, $strict = false ) {	$raw_username = $username;	$username = wp_strip_all_tags( $username );	$username = remove_accents( $username );	// Kill octets	$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );	$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities	// If strict, reduce to ASCII for max portability.	if ( $strict )		$username = preg_replace( '|[^a-z0-9 _.\-@]|i', '', $username );	// Consolidate contiguous whitespace	$username = preg_replace( '|\s+|', ' ', $username );	return apply_filters( 'sanitize_user', $username, $raw_username, $strict );}/** * Sanitize a string key. * * Keys are used as internal identifiers. They should be lowercase ASCII.  Dashes and underscores are allowed. * * @since 3.0.0 * * @param string $key String key * @return string Sanitized key */function sanitize_key( $key ) {	$raw_key = $key;	$key = wp_strip_all_tags($key);	// Kill octets	$key = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $key);	$key = preg_replace('/&.+?;/', '', $key); // Kill entities	$key = preg_replace('|[^a-z0-9 _.\-@]|i', '', $key);	// Consolidate contiguous whitespace	$key = preg_replace('|\s+|', ' ', $key);	return apply_filters('sanitize_key', $key, $raw_key);}/** * Sanitizes title or use fallback title. * * Specifically, HTML and PHP tags are stripped. Further actions can be added * via the plugin API. If $title is empty and $fallback_title is set, the latter * will be used. * * @since 1.0.0 * * @param string $title The string to be sanitized. * @param string $fallback_title Optional. A title to use if $title is empty. * @return string The sanitized string. */function sanitize_title($title, $fallback_title = '') {	$raw_title = $title;	$title = strip_tags($title);	$title = apply_filters('sanitize_title', $title, $raw_title);	if ( '' === $title || false === $title )		$title = $fallback_title;	return $title;}/** * Sanitizes title, replacing whitespace with dashes. * * Limits the output to alphanumeric characters, underscore (_) and dash (-). * Whitespace becomes a dash. * * @since 1.2.0 * * @param string $title The title to be sanitized. * @return string The sanitized title. */function sanitize_title_with_dashes($title) {	$title = strip_tags($title);	// Preserve escaped octets.	$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);	// Remove percent signs that are not part of an octet.	$title = str_replace('%', '', $title);	// Restore octets.	$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);	$title = remove_accents($title);	if (seems_utf8($title)) {		if (function_exists('mb_strtolower')) {			$title = mb_strtolower($title, 'UTF-8');		}		$title = utf8_uri_encode($title, 200);	}	$title = strtolower($title);	$title = preg_replace('/&.+?;/', '', $title); // kill entities	$title = str_replace('.', '-', $title);	$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);	$title = preg_replace('/\s+/', '-', $title);	$title = preg_replace('|-+|', '-', $title);	$title = trim($title, '-');	return $title;}/** * Ensures a string is a valid SQL order by clause. * * Accepts one or more columns, with or without ASC/DESC, and also accepts * RAND(). * * @since 2.5.1 * * @param string $orderby Order by string to be checked. * @return string|false Returns the order by clause if it is a match, false otherwise. */function sanitize_sql_orderby( $orderby ){	preg_match('/^\s*([a-z0-9_]+(\s+(ASC|DESC))?(\s*,\s*|\s*$))+|^\s*RAND\(\s*\)\s*$/i', $orderby, $obmatches);	if ( !$obmatches )		return false;	return $orderby;}/** * Santizes a html classname to ensure it only contains valid characters * * Strips the string down to A-Z,a-z,0-9,'-' if this results in an empty * string then it will return the alternative value supplied. * * @todo Expand to support the full range of CDATA that a class attribute can contain. * * @since 2.8.0 * * @param string $class The classname to be sanitized * @param string $fallback Optional. The value to return if the sanitization end's up as an empty string. * 	Defaults to an empty string. * @return string The sanitized value */function sanitize_html_class( $class, $fallback = '' ) {	//Strip out any % encoded octets	$sanitized = preg_replace('|%[a-fA-F0-9][a-fA-F0-9]|', '', $class);	//Limit to A-Z,a-z,0-9,'-'	$sanitized = preg_replace('/[^A-Za-z0-9-]/', '', $sanitized);	if ( '' == $sanitized )		$sanitized = $fallback;	return apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );}/** * Converts a number of characters from a string. * * Metadata tags <<title>> and <<category>> are removed, <<br>> and <<hr>> are * converted into correct XHTML and Unicode characters are converted to the * valid range. * * @since 0.71 * * @param string $content String of characters to be converted. * @param string $deprecated Not used. * @return string Converted string. */function convert_chars($content, $deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.71' );	// Translation of invalid Unicode references range to valid range	$wp_htmltranswinuni = array(	'&#128;' => '&#8364;', // the Euro sign	'&#129;' => '',	'&#130;' => '&#8218;', // these are Windows CP1252 specific characters	'&#131;' => '&#402;',  // they would look weird on non-Windows browsers	'&#132;' => '&#8222;',	'&#133;' => '&#8230;',	'&#134;' => '&#8224;',	'&#135;' => '&#8225;',	'&#136;' => '&#710;',	'&#137;' => '&#8240;',	'&#138;' => '&#352;',	'&#139;' => '&#8249;',	'&#140;' => '&#338;',	'&#141;' => '',	'&#142;' => '&#382;',	'&#143;' => '',	'&#144;' => '',	'&#145;' => '&#8216;',	'&#146;' => '&#8217;',	'&#147;' => '&#8220;',	'&#148;' => '&#8221;',	'&#149;' => '&#8226;',	'&#150;' => '&#8211;',	'&#151;' => '&#8212;',	'&#152;' => '&#732;',	'&#153;' => '&#8482;',	'&#154;' => '&#353;',	'&#155;' => '&#8250;',	'&#156;' => '&#339;',	'&#157;' => '',	'&#158;' => '',	'&#159;' => '&#376;'	);	// Remove metadata tags	$content = preg_replace('/<title>(.+?)<\/title>/','',$content);	$content = preg_replace('/<category>(.+?)<\/category>/','',$content);	// Converts lone & characters into &#38; (a.k.a. &amp;)	$content = preg_replace('/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content);	// Fix Word pasting	$content = strtr($content, $wp_htmltranswinuni);	// Just a little XHTML help	$content = str_replace('<br>', '<br />', $content);	$content = str_replace('<hr>', '<hr />', $content);	return $content;}/** * Will only balance the tags if forced to and the option is set to balance tags. * * The option 'use_balanceTags' is used for whether the tags will be balanced. * Both the $force parameter and 'use_balanceTags' option will have to be true * before the tags will be balanced. * * @since 0.71 * * @param string $text Text to be balanced * @param bool $force Forces balancing, ignoring the value of the option. Default false. * @return string Balanced text */function balanceTags( $text, $force = false ) {	if ( !$force && get_option('use_balanceTags') == 0 )		return $text;	return force_balance_tags( $text );}/** * Balances tags of string using a modified stack. * * @since 2.0.4 * * @author Leonard Lin <leonard@acm.org> * @license GPL v2.0 * @copyright November 4, 2001 * @version 1.1 * @todo Make better - change loop condition to $text in 1.2 * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004 *		1.1  Fixed handling of append/stack pop order of end text *			 Added Cleaning Hooks *		1.0  First Version * * @param string $text Text to be balanced. * @return string Balanced text. */function force_balance_tags( $text ) {	$tagstack = array();	$stacksize = 0;	$tagqueue = '';	$newtext = '';	$single_tags = array('br', 'hr', 'img', 'input'); // Known single-entity/self-closing tags	$nestable_tags = array('blockquote', 'div', 'span'); // Tags that can be immediately nested within themselves	// WP bug fix for comments - in case you REALLY meant to type '< !--'	$text = str_replace('< !--', '<    !--', $text);	// WP bug fix for LOVE <3 (and other situations with '<' before a number)	$text = preg_replace('#<([0-9]{1})#', '&lt;$1', $text);	while ( preg_match("/<(\/?[\w:]*)\s*([^>]*)>/", $text, $regex) ) {		$newtext .= $tagqueue;		$i = strpos($text, $regex[0]);		$l = strlen($regex[0]);		// clear the shifter		$tagqueue = '';		// Pop or Push		if ( isset($regex[1][0]) && '/' == $regex[1][0] ) { // End Tag			$tag = strtolower(substr($regex[1],1));			// if too many closing tags			if( $stacksize <= 0 ) {				$tag = '';				// or close to be safe $tag = '/' . $tag;			}			// if stacktop value = tag close value then pop			else if ( $tagstack[$stacksize - 1] == $tag ) { // found closing tag				$tag = '</' . $tag . '>'; // Close Tag				// Pop				array_pop( $tagstack );				$stacksize--;			} else { // closing tag not at top, search for it				for ( $j = $stacksize-1; $j >= 0; $j-- ) {					if ( $tagstack[$j] == $tag ) {					// add tag to tagqueue						for ( $k = $stacksize-1; $k >= $j; $k--) {							$tagqueue .= '</' . array_pop( $tagstack ) . '>';							$stacksize--;						}						break;					}				}				$tag = '';			}		} else { // Begin Tag			$tag = strtolower($regex[1]);			// Tag Cleaning			// If self-closing or '', don't do anything.			if ( substr($regex[2],-1) == '/' || $tag == '' ) {				// do nothing			}			// ElseIf it's a known single-entity tag but it doesn't close itself, do so			elseif ( in_array($tag, $single_tags) ) {				$regex[2] .= '/';			} else {	// Push the tag onto the stack				// If the top of the stack is the same as the tag we want to push, close previous tag				if ( $stacksize > 0 && !in_array($tag, $nestable_tags) && $tagstack[$stacksize - 1] == $tag ) {					$tagqueue = '</' . array_pop ($tagstack) . '>';					$stacksize--;				}				$stacksize = array_push ($tagstack, $tag);			}			// Attributes			$attributes = $regex[2];			if( !empty($attributes) )				$attributes = ' '.$attributes;			$tag = '<' . $tag . $attributes . '>';			//If already queuing a close tag, then put this tag on, too			if ( !empty($tagqueue) ) {				$tagqueue .= $tag;				$tag = '';			}		}		$newtext .= substr($text, 0, $i) . $tag;		$text = substr($text, $i + $l);	}	// Clear Tag Queue	$newtext .= $tagqueue;	// Add Remaining text	$newtext .= $text;	// Empty Stack	while( $x = array_pop($tagstack) )		$newtext .= '</' . $x . '>'; // Add remaining tags to close	// WP fix for the bug with HTML comments	$newtext = str_replace("< !--","<!--",$newtext);	$newtext = str_replace("<    !--","< !--",$newtext);	return $newtext;}/** * Acts on text which is about to be edited. * * Unless $richedit is set, it is simply a holder for the 'format_to_edit' * filter. If $richedit is set true htmlspecialchars() will be run on the * content, converting special characters to HTMl entities. * * @since 0.71 * * @param string $content The text about to be edited. * @param bool $richedit Whether the $content should pass through htmlspecialchars(). Default false. * @return string The text after the filter (and possibly htmlspecialchars()) has been run. */function format_to_edit($content, $richedit = false) {	$content = apply_filters('format_to_edit', $content);	if (! $richedit )		$content = htmlspecialchars($content);	return $content;}/** * Holder for the 'format_to_post' filter. * * @since 0.71 * * @param string $content The text to pass through the filter. * @return string Text returned from the 'format_to_post' filter. */function format_to_post($content) {	$content = apply_filters('format_to_post', $content);	return $content;}/** * Add leading zeros when necessary. * * If you set the threshold to '4' and the number is '10', then you will get * back '0010'. If you set the number to '4' and the number is '5000', then you * will get back '5000'. * * Uses sprintf to append the amount of zeros based on the $threshold parameter * and the size of the number. If the number is large enough, then no zeros will * be appended. * * @since 0.71 * * @param mixed $number Number to append zeros to if not greater than threshold. * @param int $threshold Digit places number needs to be to not have zeros added. * @return string Adds leading zeros to number if needed. */function zeroise($number, $threshold) {	return sprintf('%0'.$threshold.'s', $number);}/** * Adds backslashes before letters and before a number at the start of a string. * * @since 0.71 * * @param string $string Value to which backslashes will be added. * @return string String with backslashes inserted. */function backslashit($string) {	$string = preg_replace('/^([0-9])/', '\\\\\\\\\1', $string);	$string = preg_replace('/([a-z])/i', '\\\\\1', $string);	return $string;}/** * Appends a trailing slash. * * Will remove trailing slash if it exists already before adding a trailing * slash. This prevents double slashing a string or path. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 1.2.0 * @uses untrailingslashit() Unslashes string if it was slashed already. * * @param string $string What to add the trailing slash to. * @return string String with trailing slash added. */function trailingslashit($string) {	return untrailingslashit($string) . '/';}/** * Removes trailing slash if it exists. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 2.2.0 * * @param string $string What to remove the trailing slash from. * @return string String without the trailing slash. */function untrailingslashit($string) {	return rtrim($string, '/');}/** * Adds slashes to escape strings. * * Slashes will first be removed if magic_quotes_gpc is set, see {@link * http://www.php.net/magic_quotes} for more details. * * @since 0.71 * * @param string $gpc The string returned from HTTP request data. * @return string Returns a string escaped with slashes. */function addslashes_gpc($gpc) {	if ( get_magic_quotes_gpc() )		$gpc = stripslashes($gpc);	return esc_sql($gpc);}/** * Navigates through an array and removes slashes from the values. * * If an array is passed, the array_map() function causes a callback to pass the * value back to the function. The slashes from this value will removed. * * @since 2.0.0 * * @param array|string $value The array or string to be striped. * @return array|string Stripped array (or string in the callback). */function stripslashes_deep($value) {	if ( is_array($value) ) {		$value = array_map('stripslashes_deep', $value);	} elseif ( is_object($value) ) {		$vars = get_object_vars( $value );		foreach ($vars as $key=>$data) {			$value->{$key} = stripslashes_deep( $data );		}	} else {		$value = stripslashes($value);	}	return $value;}/** * Navigates through an array and encodes the values to be used in a URL. * * Uses a callback to pass the value of the array back to the function as a * string. * * @since 2.2.0 * * @param array|string $value The array or string to be encoded. * @return array|string $value The encoded array (or string from the callback). */function urlencode_deep($value) {	$value = is_array($value) ? array_map('urlencode_deep', $value) : urlencode($value);	return $value;}/** * Converts email addresses characters to HTML entities to block spam bots. * * @since 0.71 * * @param string $emailaddy Email address. * @param int $mailto Optional. Range from 0 to 1. Used for encoding. * @return string Converted email address. */function antispambot($emailaddy, $mailto=0) {	$emailNOSPAMaddy = '';	srand ((float) microtime() * 1000000);	for ($i = 0; $i < strlen($emailaddy); $i = $i + 1) {		$j = floor(rand(0, 1+$mailto));		if ($j==0) {			$emailNOSPAMaddy .= '&#'.ord(substr($emailaddy,$i,1)).';';		} elseif ($j==1) {			$emailNOSPAMaddy .= substr($emailaddy,$i,1);		} elseif ($j==2) {			$emailNOSPAMaddy .= '%'.zeroise(dechex(ord(substr($emailaddy, $i, 1))), 2);		}	}	$emailNOSPAMaddy = str_replace('@','&#64;',$emailNOSPAMaddy);	return $emailNOSPAMaddy;}/** * Callback to convert URI match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URI address. */function _make_url_clickable_cb($matches) {	$url = $matches[2];	$url = esc_url($url);	if ( empty($url) )		return $matches[0];	return $matches[1] . "<a href=\"$url\" rel=\"nofollow\">$url</a>";}/** * Callback to convert URL match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URL address. */function _make_web_ftp_clickable_cb($matches) {	$ret = '';	$dest = $matches[2];	$dest = 'http://' . $dest;	$dest = esc_url($dest);	if ( empty($dest) )		return $matches[0];	// removed trailing [.,;:)] from URL	if ( in_array( substr($dest, -1), array('.', ',', ';', ':', ')') ) === true ) {		$ret = substr($dest, -1);		$dest = substr($dest, 0, strlen($dest)-1);	}	return $matches[1] . "<a href=\"$dest\" rel=\"nofollow\">$dest</a>$ret";}/** * Callback to convert email address match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with email address. */function _make_email_clickable_cb($matches) {	$email = $matches[2] . '@' . $matches[3];	return $matches[1] . "<a href=\"mailto:$email\">$email</a>";}/** * Convert plaintext URI to HTML links. * * Converts URI, www and ftp, and email addresses. Finishes by fixing links * within links. * * @since 0.71 * * @param string $ret Content to convert URIs. * @return string Content with converted URIs. */function make_clickable($ret) {	$ret = ' ' . $ret;	// in testing, using arrays here was found to be faster	$ret = preg_replace_callback('#(?<=[\s>])(\()?([\w]+?://(?:[\w\\x80-\\xff\#$%&~/=?@\[\](+-]|[.,;:](?![\s<]|(\))?([\s]|$))|(?(1)\)(?![\s<.,;:]|$)|\)))+)#is', '_make_url_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])((www|ftp)\.[\w\\x80-\\xff\#$%&~/.\-;:=,?@\[\]+]+)#is', '_make_web_ftp_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret);	// this one is not in an array because we need it to run last, for cleanup of accidental links within links	$ret = preg_replace("#(<a( [^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i", "$1$3</a>", $ret);	$ret = trim($ret);	return $ret;}/** * Adds rel nofollow string to all HTML A elements in content. * * @since 1.5.0 * * @param string $text Content that may contain HTML A elements. * @return string Converted content. */function wp_rel_nofollow( $text ) {	// This is a pre save filter, so text is already escaped.	$text = stripslashes($text);	$text = preg_replace_callback('|<a (.+?)>|i', 'wp_rel_nofollow_callback', $text);	$text = esc_sql($text);	return $text;}/** * Callback to used to add rel=nofollow string to HTML A element. * * Will remove already existing rel="nofollow" and rel='nofollow' from the * string to prevent from invalidating (X)HTML. * * @since 2.3.0 * * @param array $matches Single Match * @return string HTML A Element with rel nofollow. */function wp_rel_nofollow_callback( $matches ) {	$text = $matches[1];	$text = str_replace(array(' rel="nofollow"', " rel='nofollow'"), '', $text);	return "<a $text rel=\"nofollow\">";}/** * Convert one smiley code to the icon graphic file equivalent. * * Looks up one smiley code in the $wpsmiliestrans global array and returns an * <img> string for that smiley. * * @global array $wpsmiliestrans * @since 2.8.0 * * @param string $smiley Smiley code to convert to image. * @return string Image string for smiley. */function translate_smiley($smiley) {	global $wpsmiliestrans;	if (count($smiley) == 0) {		return '';	}	$siteurl = get_option( 'siteurl' );	$smiley = trim(reset($smiley));	$img = $wpsmiliestrans[$smiley];	$smiley_masked = esc_attr($smiley);	$srcurl = apply_filters('smilies_src', "$siteurl/wp-includes/images/smilies/$img", $img, $siteurl);	return " <img src='$srcurl' alt='$smiley_masked' class='wp-smiley' /> ";}/** * Convert text equivalent of smilies to images. * * Will only convert smilies if the option 'use_smilies' is true and the global * used in the function isn't empty. * * @since 0.71 * @uses $wp_smiliessearch * * @param string $text Content to convert smilies from text. * @return string Converted content with text smilies replaced with images. */function convert_smilies($text) {	global $wp_smiliessearch;	$output = '';	if ( get_option('use_smilies') && !empty($wp_smiliessearch) ) {		// HTML loop taken from texturize function, could possible be consolidated		$textarr = preg_split("/(<.*>)/U", $text, -1, PREG_SPLIT_DELIM_CAPTURE); // capture the tags as well as in between		$stop = count($textarr);// loop stuff		for ($i = 0; $i < $stop; $i++) {			$content = $textarr[$i];			if ((strlen($content) > 0) && ('<' != $content{0})) { // If it's not a tag				$content = preg_replace_callback($wp_smiliessearch, 'translate_smiley', $content);			}			$output .= $content;		}	} else {		// return default text.		$output = $text;	}	return $output;}/** * Verifies that an email is valid. * * Does not grok i18n domains. Not RFC compliant. * * @since 0.71 * * @param string $email Email address to verify. * @param boolean $deprecated. Deprecated. * @return string|bool Either false or the valid email address. */function is_email( $email, $deprecated = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'is_email', false, $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'is_email', false, $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	if ( !preg_match( '/^[a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]+$/', $local ) ) {		return apply_filters( 'is_email', false, $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	if ( preg_match( '/\.{2,}/', $domain ) ) {		return apply_filters( 'is_email', false, $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	if ( trim( $domain, " \t\n\r\0\x0B." ) !== $domain ) {		return apply_filters( 'is_email', false, $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'is_email', false, $email, 'domain_no_periods' );	}	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens and whitespace		if ( trim( $sub, " \t\n\r\0\x0B-" ) !== $sub ) {			return apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );		}		// Test for invalid characters		if ( !preg_match('/^[a-z0-9-]+$/i', $sub ) ) {			return apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );		}	}	// Congratulations your email made it!	return apply_filters( 'is_email', $email, $email, null );}/** * Convert to ASCII from email subjects. * * @since 1.2.0 * @usedby wp_mail() handles charsets in email subjects * * @param string $string Subject line * @return string Converted string to ASCII */function wp_iso_descrambler($string) {	/* this may only work with iso-8859-1, I'm afraid */	if (!preg_match('#\=\?(.+)\?Q\?(.+)\?\=#i', $string, $matches)) {		return $string;	} else {		$subject = str_replace('_', ' ', $matches[2]);		$subject = preg_replace_callback('#\=([0-9a-f]{2})#i', create_function('$match', 'return chr(hexdec(strtolower($match[1])));'), $subject);		return $subject;	}}/** * Returns a date in the GMT equivalent. * * Requires and returns a date in the Y-m-d H:i:s format. Simply subtracts the * value of the 'gmt_offset' option. Return format can be overridden using the * $format parameter. If PHP5 is supported, the function uses the DateTime and * DateTimeZone objects to respect time zone differences in DST. * * @since 1.2.0 * * @uses get_option() to retrieve the the value of 'gmt_offset'. * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string GMT version of the date provided. */function get_gmt_from_date($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$tz = get_option('timezone_string');	if( class_exists('DateTime') && $tz ) {		//PHP5		date_default_timezone_set( $tz );		$datetime = new DateTime( $string );		$datetime->setTimezone( new DateTimeZone('UTC') );		$offset = $datetime->getOffset();		$datetime->modify( '+' . $offset / 3600 . ' hours');		$string_gmt = gmdate($format, $datetime->format('U'));		date_default_timezone_set('UTC');	}	else {		//PHP4		$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);		$string_gmt = gmdate($format, $string_time - get_option('gmt_offset') * 3600);	}	return $string_gmt;}/** * Converts a GMT date into the correct format for the blog. * * Requires and returns in the Y-m-d H:i:s format. Simply adds the value of * gmt_offset.Return format can be overridden using the $format parameter * * @since 1.2.0 * * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string Formatted date relative to the GMT offset. */function get_date_from_gmt($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);	$string_localtime = gmdate($format, $string_time + get_option('gmt_offset')*3600);	return $string_localtime;}/** * Computes an offset in seconds from an iso8601 timezone. * * @since 1.5.0 * * @param string $timezone Either 'Z' for 0 offset or 'hhmm'. * @return int|float The offset in seconds. */function iso8601_timezone_to_offset($timezone) {	// $timezone is either 'Z' or '[+|-]hhmm'	if ($timezone == 'Z') {		$offset = 0;	} else {		$sign    = (substr($timezone, 0, 1) == '+') ? 1 : -1;		$hours   = intval(substr($timezone, 1, 2));		$minutes = intval(substr($timezone, 3, 4)) / 60;		$offset  = $sign * 3600 * ($hours + $minutes);	}	return $offset;}/** * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]. * * @since 1.5.0 * * @param string $date_string Date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}. * @param string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'. * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s. */function iso8601_to_datetime($date_string, $timezone = 'user') {	$timezone = strtolower($timezone);	if ($timezone == 'gmt') {		preg_match('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', $date_string, $date_bits);		if (!empty($date_bits[7])) { // we have a timezone, so let's compute an offset			$offset = iso8601_timezone_to_offset($date_bits[7]);		} else { // we don't have a timezone, so we assume user local timezone (not server's!)			$offset = 3600 * get_option('gmt_offset');		}		$timestamp = gmmktime($date_bits[4], $date_bits[5], $date_bits[6], $date_bits[2], $date_bits[3], $date_bits[1]);		$timestamp -= $offset;		return gmdate('Y-m-d H:i:s', $timestamp);	} else if ($timezone == 'user') {		return preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $date_string);	}}/** * Adds a element attributes to open links in new windows. * * Comment text in popup windows should be filtered through this. Right now it's * a moderately dumb function, ideally it would detect whether a target or rel * attribute was already there and adjust its actions accordingly. * * @since 0.71 * * @param string $text Content to replace links to open in a new window. * @return string Content that has filtered links. */function popuplinks($text) {	$text = preg_replace('/<a (.+?)>/i', "<a $1 target='_blank' rel='external'>", $text);	return $text;}/** * Strips out all characters that are not allowable in an email. * * @since 1.5.0 * * @param string $email Email address to filter. * @return string Filtered email address. */function sanitize_email( $email ) {	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'sanitize_email', '', $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'sanitize_email', '', $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	$local = preg_replace( '/[^a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]/', '', $local );	if ( '' === $local ) {		return apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	$domain = preg_replace( '/\.{2,}/', '', $domain );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	$domain = trim( $domain, " \t\n\r\0\x0B." );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );	}	// Create an array that will contain valid subs	$new_subs = array();	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens		$sub = trim( $sub, " \t\n\r\0\x0B-" );		// Test for invalid characters		$sub = preg_replace( '/^[^a-z0-9-]+$/i', '', $sub );		// If there's anything left, add it to the valid subs		if ( '' !== $sub ) {			$new_subs[] = $sub;		}	}	// If there aren't 2 or more valid subs	if ( 2 > count( $new_subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );	}	// Join valid subs into the new domain	$domain = join( '.', $new_subs );	// Put the email back together	$email = $local . '@' . $domain;	// Congratulations your email made it!	return apply_filters( 'sanitize_email', $email, $email, null );}/** * Determines the difference between two timestamps. * * The difference is returned in a human readable format such as "1 hour", * "5 mins", "2 days". * * @since 1.5.0 * * @param int $from Unix timestamp from which the difference begins. * @param int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set. * @return string Human readable time difference. */function human_time_diff( $from, $to = '' ) {	if ( empty($to) )		$to = time();	$diff = (int) abs($to - $from);	if ($diff <= 3600) {		$mins = round($diff / 60);		if ($mins <= 1) {			$mins = 1;		}		/* translators: min=minute */		$since = sprintf(_n('%s min', '%s mins', $mins), $mins);	} else if (($diff <= 86400) && ($diff > 3600)) {		$hours = round($diff / 3600);		if ($hours <= 1) {			$hours = 1;		}		$since = sprintf(_n('%s hour', '%s hours', $hours), $hours);	} elseif ($diff >= 86400) {		$days = round($diff / 86400);		if ($days <= 1) {			$days = 1;		}		$since = sprintf(_n('%s day', '%s days', $days), $days);	}	return $since;}/** * Generates an excerpt from the content, if needed. * * The excerpt word amount will be 55 words and if the amount is greater than * that, then the string ' [...]' will be appended to the excerpt. If the string * is less than 55 words, then the content will be returned as is. * * The 55 word limit can be modified by plugins/themes using the excerpt_length filter * The ' [...]' string can be modified by plugins/themes using the excerpt_more filter * * @since 1.5.0 * * @param string $text The excerpt. If set to empty an excerpt is generated. * @return string The excerpt. */function wp_trim_excerpt($text) {	$raw_excerpt = $text;	if ( '' == $text ) {		$text = get_the_content('');		$text = strip_shortcodes( $text );		$text = apply_filters('the_content', $text);		$text = str_replace(']]>', ']]&gt;', $text);		$text = strip_tags($text);		$excerpt_length = apply_filters('excerpt_length', 55);		$excerpt_more = apply_filters('excerpt_more', ' ' . '[...]');		$words = preg_split("/[\n\r\t ]+/", $text, $excerpt_length + 1, PREG_SPLIT_NO_EMPTY);		if ( count($words) > $excerpt_length ) {			array_pop($words);			$text = implode(' ', $words);			$text = $text . $excerpt_more;		} else {			$text = implode(' ', $words);		}	}	return apply_filters('wp_trim_excerpt', $text, $raw_excerpt);}/** * Converts named entities into numbered entities. * * @since 1.5.1 * * @param string $text The text within which entities will be converted. * @return string Text with converted entities. */function ent2ncr($text) {	$to_ncr = array(		'&quot;' => '&#34;',		'&amp;' => '&#38;',		'&frasl;' => '&#47;',		'&lt;' => '&#60;',		'&gt;' => '&#62;',		'|' => '&#124;',		'&nbsp;' => '&#160;',		'&iexcl;' => '&#161;',		'&cent;' => '&#162;',		'&pound;' => '&#163;',		'&curren;' => '&#164;',		'&yen;' => '&#165;',		'&brvbar;' => '&#166;',		'&brkbar;' => '&#166;',		'&sect;' => '&#167;',		'&uml;' => '&#168;',		'&die;' => '&#168;',		'&copy;' => '&#169;',		'&ordf;' => '&#170;',		'&laquo;' => '&#171;',		'&not;' => '&#172;',		'&shy;' => '&#173;',		'&reg;' => '&#174;',		'&macr;' => '&#175;',		'&hibar;' => '&#175;',		'&deg;' => '&#176;',		'&plusmn;' => '&#177;',		'&sup2;' => '&#178;',		'&sup3;' => '&#179;',		'&acute;' => '&#180;',		'&micro;' => '&#181;',		'&para;' => '&#182;',		'&middot;' => '&#183;',		'&cedil;' => '&#184;',		'&sup1;' => '&#185;',		'&ordm;' => '&#186;',		'&raquo;' => '&#187;',		'&frac14;' => '&#188;',		'&frac12;' => '&#189;',		'&frac34;' => '&#190;',		'&iquest;' => '&#191;',		'&Agrave;' => '&#192;',		'&Aacute;' => '&#193;',		'&Acirc;' => '&#194;',		'&Atilde;' => '&#195;',		'&Auml;' => '&#196;',		'&Aring;' => '&#197;',		'&AElig;' => '&#198;',		'&Ccedil;' => '&#199;',		'&Egrave;' => '&#200;',		'&Eacute;' => '&#201;',		'&Ecirc;' => '&#202;',		'&Euml;' => '&#203;',		'&Igrave;' => '&#204;',		'&Iacute;' => '&#205;',		'&Icirc;' => '&#206;',		'&Iuml;' => '&#207;',		'&ETH;' => '&#208;',		'&Ntilde;' => '&#209;',		'&Ograve;' => '&#210;',		'&Oacute;' => '&#211;',		'&Ocirc;' => '&#212;',		'&Otilde;' => '&#213;',		'&Ouml;' => '&#214;',		'&times;' => '&#215;',		'&Oslash;' => '&#216;',		'&Ugrave;' => '&#217;',		'&Uacute;' => '&#218;',		'&Ucirc;' => '&#219;',		'&Uuml;' => '&#220;',		'&Yacute;' => '&#221;',		'&THORN;' => '&#222;',		'&szlig;' => '&#223;',		'&agrave;' => '&#224;',		'&aacute;' => '&#225;',		'&acirc;' => '&#226;',		'&atilde;' => '&#227;',		'&auml;' => '&#228;',		'&aring;' => '&#229;',		'&aelig;' => '&#230;',		'&ccedil;' => '&#231;',		'&egrave;' => '&#232;',		'&eacute;' => '&#233;',		'&ecirc;' => '&#234;',		'&euml;' => '&#235;',		'&igrave;' => '&#236;',		'&iacute;' => '&#237;',		'&icirc;' => '&#238;',		'&iuml;' => '&#239;',		'&eth;' => '&#240;',		'&ntilde;' => '&#241;',		'&ograve;' => '&#242;',		'&oacute;' => '&#243;',		'&ocirc;' => '&#244;',		'&otilde;' => '&#245;',		'&ouml;' => '&#246;',		'&divide;' => '&#247;',		'&oslash;' => '&#248;',		'&ugrave;' => '&#249;',		'&uacute;' => '&#250;',		'&ucirc;' => '&#251;',		'&uuml;' => '&#252;',		'&yacute;' => '&#253;',		'&thorn;' => '&#254;',		'&yuml;' => '&#255;',		'&OElig;' => '&#338;',		'&oelig;' => '&#339;',		'&Scaron;' => '&#352;',		'&scaron;' => '&#353;',		'&Yuml;' => '&#376;',		'&fnof;' => '&#402;',		'&circ;' => '&#710;',		'&tilde;' => '&#732;',		'&Alpha;' => '&#913;',		'&Beta;' => '&#914;',		'&Gamma;' => '&#915;',		'&Delta;' => '&#916;',		'&Epsilon;' => '&#917;',		'&Zeta;' => '&#918;',		'&Eta;' => '&#919;',		'&Theta;' => '&#920;',		'&Iota;' => '&#921;',		'&Kappa;' => '&#922;',		'&Lambda;' => '&#923;',		'&Mu;' => '&#924;',		'&Nu;' => '&#925;',		'&Xi;' => '&#926;',		'&Omicron;' => '&#927;',		'&Pi;' => '&#928;',		'&Rho;' => '&#929;',		'&Sigma;' => '&#931;',		'&Tau;' => '&#932;',		'&Upsilon;' => '&#933;',		'&Phi;' => '&#934;',		'&Chi;' => '&#935;',		'&Psi;' => '&#936;',		'&Omega;' => '&#937;',		'&alpha;' => '&#945;',		'&beta;' => '&#946;',		'&gamma;' => '&#947;',		'&delta;' => '&#948;',		'&epsilon;' => '&#949;',		'&zeta;' => '&#950;',		'&eta;' => '&#951;',		'&theta;' => '&#952;',		'&iota;' => '&#953;',		'&kappa;' => '&#954;',		'&lambda;' => '&#955;',		'&mu;' => '&#956;',		'&nu;' => '&#957;',		'&xi;' => '&#958;',		'&omicron;' => '&#959;',		'&pi;' => '&#960;',		'&rho;' => '&#961;',		'&sigmaf;' => '&#962;',		'&sigma;' => '&#963;',		'&tau;' => '&#964;',		'&upsilon;' => '&#965;',		'&phi;' => '&#966;',		'&chi;' => '&#967;',		'&psi;' => '&#968;',		'&omega;' => '&#969;',		'&thetasym;' => '&#977;',		'&upsih;' => '&#978;',		'&piv;' => '&#982;',		'&ensp;' => '&#8194;',		'&emsp;' => '&#8195;',		'&thinsp;' => '&#8201;',		'&zwnj;' => '&#8204;',		'&zwj;' => '&#8205;',		'&lrm;' => '&#8206;',		'&rlm;' => '&#8207;',		'&ndash;' => '&#8211;',		'&mdash;' => '&#8212;',		'&lsquo;' => '&#8216;',		'&rsquo;' => '&#8217;',		'&sbquo;' => '&#8218;',		'&ldquo;' => '&#8220;',		'&rdquo;' => '&#8221;',		'&bdquo;' => '&#8222;',		'&dagger;' => '&#8224;',		'&Dagger;' => '&#8225;',		'&bull;' => '&#8226;',		'&hellip;' => '&#8230;',		'&permil;' => '&#8240;',		'&prime;' => '&#8242;',		'&Prime;' => '&#8243;',		'&lsaquo;' => '&#8249;',		'&rsaquo;' => '&#8250;',		'&oline;' => '&#8254;',		'&frasl;' => '&#8260;',		'&euro;' => '&#8364;',		'&image;' => '&#8465;',		'&weierp;' => '&#8472;',		'&real;' => '&#8476;',		'&trade;' => '&#8482;',		'&alefsym;' => '&#8501;',		'&crarr;' => '&#8629;',		'&lArr;' => '&#8656;',		'&uArr;' => '&#8657;',		'&rArr;' => '&#8658;',		'&dArr;' => '&#8659;',		'&hArr;' => '&#8660;',		'&forall;' => '&#8704;',		'&part;' => '&#8706;',		'&exist;' => '&#8707;',		'&empty;' => '&#8709;',		'&nabla;' => '&#8711;',		'&isin;' => '&#8712;',		'&notin;' => '&#8713;',		'&ni;' => '&#8715;',		'&prod;' => '&#8719;',		'&sum;' => '&#8721;',		'&minus;' => '&#8722;',		'&lowast;' => '&#8727;',		'&radic;' => '&#8730;',		'&prop;' => '&#8733;',		'&infin;' => '&#8734;',		'&ang;' => '&#8736;',		'&and;' => '&#8743;',		'&or;' => '&#8744;',		'&cap;' => '&#8745;',		'&cup;' => '&#8746;',		'&int;' => '&#8747;',		'&there4;' => '&#8756;',		'&sim;' => '&#8764;',		'&cong;' => '&#8773;',		'&asymp;' => '&#8776;',		'&ne;' => '&#8800;',		'&equiv;' => '&#8801;',		'&le;' => '&#8804;',		'&ge;' => '&#8805;',		'&sub;' => '&#8834;',		'&sup;' => '&#8835;',		'&nsub;' => '&#8836;',		'&sube;' => '&#8838;',		'&supe;' => '&#8839;',		'&oplus;' => '&#8853;',		'&otimes;' => '&#8855;',		'&perp;' => '&#8869;',		'&sdot;' => '&#8901;',		'&lceil;' => '&#8968;',		'&rceil;' => '&#8969;',		'&lfloor;' => '&#8970;',		'&rfloor;' => '&#8971;',		'&lang;' => '&#9001;',		'&rang;' => '&#9002;',		'&larr;' => '&#8592;',		'&uarr;' => '&#8593;',		'&rarr;' => '&#8594;',		'&darr;' => '&#8595;',		'&harr;' => '&#8596;',		'&loz;' => '&#9674;',		'&spades;' => '&#9824;',		'&clubs;' => '&#9827;',		'&hearts;' => '&#9829;',		'&diams;' => '&#9830;'	);	return str_replace( array_keys($to_ncr), array_values($to_ncr), $text );}/** * Formats text for the rich text editor. * * The filter 'richedit_pre' is applied here. If $text is empty the filter will * be applied to an empty string. * * @since 2.0.0 * * @param string $text The text to be formatted. * @return string The formatted text after filter is applied. */function wp_richedit_pre($text) {	// Filtering a blank results in an annoying <br />\n	if ( empty($text) ) return apply_filters('richedit_pre', '');	$output = convert_chars($text);	$output = wpautop($output);	$output = htmlspecialchars($output, ENT_NOQUOTES);	return apply_filters('richedit_pre', $output);}/** * Formats text for the HTML editor. * * Unless $output is empty it will pass through htmlspecialchars before the * 'htmledit_pre' filter is applied. * * @since 2.5.0 * * @param string $output The text to be formatted. * @return string Formatted text after filter applied. */function wp_htmledit_pre($output) {	if ( !empty($output) )		$output = htmlspecialchars($output, ENT_NOQUOTES); // convert only < > &	return apply_filters('htmledit_pre', $output);}/** * Perform a deep string replace operation to ensure the values in $search are no longer present * * Repeats the replacement operation until it no longer replaces anything so as to remove "nested" values * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that * str_replace would return * * @since 2.8.1 * @access private * * @param string|array $search * @param string $subject * @return string The processed string */function _deep_replace( $search, $subject ) {	$found = true;	$subject = (string) $subject;	while ( $found ) {		$found = false;		foreach ( (array) $search as $val ) {			while ( strpos( $subject, $val ) !== false ) {				$found = true;				$subject = str_replace( $val, '', $subject );			}		}	}	return $subject;}/** * Escapes data for use in a MySQL query * * This is just a handy shortcut for $wpdb->escape(), for completeness' sake * * @since 2.8.0 * @param string $sql Unescaped SQL data * @return string The cleaned $sql */function esc_sql( $sql ) {	global $wpdb;	return $wpdb->escape( $sql );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 2.8.0 * @uses wp_kses_bad_protocol() To only permit protocols in the URL set *		via $protocols or the common ones set in the function. * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. *		Defaults to 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet' if not set. * @param string $_context Private. Use esc_url_raw() for database usage. * @return string The cleaned $url after the 'clean_url' filter is applied. */function esc_url( $url, $protocols = null, $_context = 'display' ) {	$original_url = $url;	if ( '' == $url )		return $url;	$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);	$strip = array('%0d', '%0a', '%0D', '%0A');	$url = _deep_replace($strip, $url);	$url = str_replace(';//', '://', $url);	/* If the URL doesn't appear to contain a scheme, we	 * presume it needs http:// appended (unless a relative	 * link starting with / or a php file).	 */	if ( strpos($url, ':') === false &&		substr( $url, 0, 1 ) != '/' && substr( $url, 0, 1 ) != '#' && !preg_match('/^[a-z0-9-]+?\.php/i', $url) )		$url = 'http://' . $url;	// Replace ampersands and single quotes only when displaying.	if ( 'display' == $_context ) {		$url = preg_replace('/&([^#])(?![a-z]{2,8};)/', '&#038;$1', $url);		$url = str_replace( "'", '&#039;', $url );	}	if ( !is_array($protocols) )		$protocols = array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn');	if ( wp_kses_bad_protocol( $url, $protocols ) != $url )		return '';	return apply_filters('clean_url', $url, $original_url, $_context);}/** * Performs esc_url() for database usage. * * @since 2.8.0 * @uses esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function esc_url_raw( $url, $protocols = null ) {	return esc_url( $url, $protocols, 'db' );}/** * Convert entities, while preserving already-encoded entities. * * @link http://www.php.net/htmlentities Borrowed from the PHP Manual user notes. * * @since 1.2.2 * * @param string $myHTML The text to be converted. * @return string Converted text. */function htmlentities2($myHTML) {	$translation_table = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );	$translation_table[chr(38)] = '&';	return preg_replace( "/&(?![A-Za-z]{0,4}\w{2,3};|#[0-9]{2,3};)/", "&amp;", strtr($myHTML, $translation_table) );}/** * Escape single quotes, htmlspecialchar " < > &, and fix line endings. * * Escapes text strings for echoing in JS. It is intended to be used for inline JS * (in a tag attribute, for example onclick="..."). Note that the strings have to * be in single quotes. The filter 'js_escape' is also applied here. * * @since 2.8.0 * * @param string $text The text to be escaped. * @return string Escaped text. */function esc_js( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );	$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', "'", stripslashes( $safe_text ) );	$safe_text = str_replace( "\r", '', $safe_text );	$safe_text = str_replace( "\n", '\\n', addslashes( $safe_text ) );	return apply_filters( 'js_escape', $safe_text, $text );}/** * Escaping for HTML blocks. * * @since 2.8.0 * * @param string $text * @return string */function esc_html( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'esc_html', $safe_text, $text );}/** * Escaping for HTML attributes. * * @since 2.8.0 * * @param string $text * @return string */function esc_attr( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'attribute_escape', $safe_text, $text );}/** * Escape a HTML tag name. * * @since 2.5.0 * * @param string $tag_name * @return string */function tag_escape($tag_name) {	$safe_tag = strtolower( preg_replace('/[^a-zA-Z_:]/', '', $tag_name) );	return apply_filters('tag_escape', $safe_tag, $tag_name);}/** * Escapes text for SQL LIKE special characters % and _. * * @since 2.5.0 * * @param string $text The text to be escaped. * @return string text, safe for inclusion in LIKE query. */function like_escape($text) {	return str_replace(array("%", "_"), array("\\%", "\\_"), $text);}/** * Convert full URL paths to absolute paths. * * Removes the http or https protocols and the domain. Keeps the path '/' at the * beginning, so it isn't a true relative link, but from the web root base. * * @since 2.1.0 * * @param string $link Full URL path. * @return string Absolute path. */function wp_make_link_relative( $link ) {	return preg_replace( '|https?://[^/]+(/.*)|i', '$1', $link );}/** * Sanitises various option values based on the nature of the option. * * This is basically a switch statement which will pass $value through a number * of functions depending on the $option. * * @since 2.0.5 * * @param string $option The name of the option. * @param string $value The unsanitised value. * @return string Sanitized value. */function sanitize_option($option, $value) {	switch ( $option ) {		case 'admin_email':			$value = sanitize_email($value);			if ( !is_email($value) ) {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('admin_email', 'invalid_admin_email', __('The email address entered did not appear to be a valid email address. Please enter a valid email address.'));			}			break;		case 'thumbnail_size_w':		case 'thumbnail_size_h':		case 'medium_size_w':		case 'medium_size_h':		case 'large_size_w':		case 'large_size_h':		case 'embed_size_h':		case 'default_post_edit_rows':		case 'mailserver_port':		case 'comment_max_links':		case 'page_on_front':		case 'page_for_posts':		case 'rss_excerpt_length':		case 'default_category':		case 'default_email_category':		case 'default_link_category':		case 'close_comments_days_old':		case 'comments_per_page':		case 'thread_comments_depth':		case 'users_can_register':		case 'start_of_week':			$value = absint( $value );			break;		case 'embed_size_w':			if ( '' !== $value )				$value = absint( $value );			break;		case 'posts_per_page':		case 'posts_per_rss':			$value = (int) $value;			if ( empty($value) )				$value = 1;			if ( $value < -1 )				$value = abs($value);			break;		case 'default_ping_status':		case 'default_comment_status':			// Options that if not there have 0 value but need to be something like "closed"			if ( $value == '0' || $value == '')				$value = 'closed';			break;		case 'blogdescription':		case 'blogname':			$value = addslashes($value);			$value = wp_filter_post_kses( $value ); // calls stripslashes then addslashes			$value = stripslashes($value);			$value = esc_html( $value );			break;		case 'blog_charset':			$value = preg_replace('/[^a-zA-Z0-9_-]/', '', $value); // strips slashes			break;		case 'date_format':		case 'time_format':		case 'mailserver_url':		case 'mailserver_login':		case 'mailserver_pass':		case 'ping_sites':		case 'upload_path':			$value = strip_tags($value);			$value = addslashes($value);			$value = wp_filter_kses($value); // calls stripslashes then addslashes			$value = stripslashes($value);			break;		case 'gmt_offset':			$value = preg_replace('/[^0-9:.-]/', '', $value); // strips slashes			break;		case 'siteurl':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('siteurl', 'invalid_siteurl', __('The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		case 'home':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('home', 'invalid_home', __('The Site address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		default :			$value = apply_filters("sanitize_option_{$option}", $value, $option);			break;	}	return $value;}/** * Parses a string into variables to be stored in an array. * * Uses {@link http://www.php.net/parse_str parse_str()} and stripslashes if * {@link http://www.php.net/magic_quotes magic_quotes_gpc} is on. * * @since 2.2.1 * @uses apply_filters() for the 'wp_parse_str' filter. * * @param string $string The string to be parsed. * @param array $array Variables will be stored in this array. */function wp_parse_str( $string, &$array ) {	parse_str( $string, $array );	if ( get_magic_quotes_gpc() )		$array = stripslashes_deep( $array );	$array = apply_filters( 'wp_parse_str', $array );}/** * Convert lone less than signs. * * KSES already converts lone greater than signs. * * @uses wp_pre_kses_less_than_callback in the callback function. * @since 2.3.0 * * @param string $text Text to be converted. * @return string Converted text. */function wp_pre_kses_less_than( $text ) {	return preg_replace_callback('%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text);}/** * Callback function used by preg_replace. * * @uses esc_html to format the $matches text. * @since 2.3.0 * * @param array $matches Populated by matches to preg_replace. * @return string The text returned after esc_html if needed. */function wp_pre_kses_less_than_callback( $matches ) {	if ( false === strpos($matches[0], '>') )		return esc_html($matches[0]);	return $matches[0];}/** * WordPress implementation of PHP sprintf() with filters. * * @since 2.5.0 * @link http://www.php.net/sprintf * * @param string $pattern The string which formatted args are inserted. * @param mixed $args,... Arguments to be formatted into the $pattern string. * @return string The formatted string. */function wp_sprintf( $pattern ) {	$args = func_get_args( );	$len = strlen($pattern);	$start = 0;	$result = '';	$arg_index = 0;	while ( $len > $start ) {		// Last character: append and break		if ( strlen($pattern) - 1 == $start ) {			$result .= substr($pattern, -1);			break;		}		// Literal %: append and continue		if ( substr($pattern, $start, 2) == '%%' ) {			$start += 2;			$result .= '%';			continue;		}		// Get fragment before next %		$end = strpos($pattern, '%', $start + 1);		if ( false === $end )			$end = $len;		$fragment = substr($pattern, $start, $end - $start);		// Fragment has a specifier		if ( $pattern{$start} == '%' ) {			// Find numbered arguments or take the next one in order			if ( preg_match('/^%(\d+)\$/', $fragment, $matches) ) {				$arg = isset($args[$matches[1]]) ? $args[$matches[1]] : '';				$fragment = str_replace("%{$matches[1]}$", '%', $fragment);			} else {				++$arg_index;				$arg = isset($args[$arg_index]) ? $args[$arg_index] : '';			}			// Apply filters OR sprintf			$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );			if ( $_fragment != $fragment )				$fragment = $_fragment;			else				$fragment = sprintf($fragment, strval($arg) );		}		// Append to result and move to next fragment		$result .= $fragment;		$start = $end;	}	return $result;}/** * Localize list items before the rest of the content. * * The '%l' must be at the first characters can then contain the rest of the * content. The list items will have ', ', ', and', and ' and ' added depending * on the amount of list items in the $args parameter. * * @since 2.5.0 * * @param string $pattern Content containing '%l' at the beginning. * @param array $args List items to prepend to the content and replace '%l'. * @return string Localized list items and rest of the content. */function wp_sprintf_l($pattern, $args) {	// Not a match	if ( substr($pattern, 0, 2) != '%l' )		return $pattern;	// Nothing to work with	if ( empty($args) )		return '';	// Translate and filter the delimiter set (avoid ampersands and entities here)	$l = apply_filters('wp_sprintf_l', array(		/* translators: used between list items, there is a space after the coma */		'between'          => __(', '),		/* translators: used between list items, there is a space after the and */		'between_last_two' => __(', and '),		/* translators: used between only two list items, there is a space after the and */		'between_only_two' => __(' and '),		));	$args = (array) $args;	$result = array_shift($args);	if ( count($args) == 1 )		$result .= $l['between_only_two'] . array_shift($args);	// Loop when more than two args	$i = count($args);	while ( $i ) {		$arg = array_shift($args);		$i--;		if ( 0 == $i )			$result .= $l['between_last_two'] . $arg;		else			$result .= $l['between'] . $arg;	}	return $result . substr($pattern, 2);}/** * Safely extracts not more than the first $count characters from html string. * * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT* * be counted as one character. For example &amp; will be counted as 4, &lt; as * 3, etc. * * @since 2.5.0 * * @param integer $str String to get the excerpt from. * @param integer $count Maximum number of characters to take. * @return string The excerpt. */function wp_html_excerpt( $str, $count ) {	$str = wp_strip_all_tags( $str, true );	$str = mb_substr( $str, 0, $count );	// remove part of an entity at the end	$str = preg_replace( '/&[^;\s]{0,6}$/', '', $str );	return $str;}/** * Add a Base url to relative links in passed content. * * By default it supports the 'src' and 'href' attributes. However this can be * changed via the 3rd param. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $base The base URL to prefix to links. * @param array $attrs The attributes which should be processed. * @return string The processed content. */function links_add_base_url( $content, $base, $attrs = array('src', 'href') ) {	$attrs = implode('|', (array)$attrs);	return preg_replace_callback("!($attrs)=(['\"])(.+?)\\2!i",			create_function('$m', 'return _links_add_base($m, "' . $base . '");'),			$content);}/** * Callback to add a base url to relative links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $base The base URL to prefix to links. * @return string The processed link. */function _links_add_base($m, $base) {	//1 = attribute name  2 = quotation mark  3 = URL	return $m[1] . '=' . $m[2] .		(strpos($m[3], 'http://') === false ?			path_join($base, $m[3]) :			$m[3])		. $m[2];}/** * Adds a Target attribute to all links in passed content. * * This function by default only applies to <a> tags, however this can be * modified by the 3rd param. * * <b>NOTE:</b> Any current target attributed will be striped and replaced. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $target The Target to add to the links. * @param array $tags An array of tags to apply to. * @return string The processed content. */function links_add_target( $content, $target = '_blank', $tags = array('a') ) {	$tags = implode('|', (array)$tags);	return preg_replace_callback("!<($tags)(.+?)>!i",			create_function('$m', 'return _links_add_target($m, "' . $target . '");'),			$content);}/** * Callback to add a target attribute to all links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $target The Target to add to the links. * @return string The processed link. */function _links_add_target( $m, $target ) {	$tag = $m[1];	$link = preg_replace('|(target=[\'"](.*?)[\'"])|i', '', $m[2]);	return '<' . $tag . $link . ' target="' . $target . '">';}// normalize EOL characters and strip duplicate whitespacefunction normalize_whitespace( $str ) {	$str  = trim($str);	$str  = str_replace("\r", "\n", $str);	$str  = preg_replace( array( '/\n+/', '/[ \t]+/' ), array( "\n", ' ' ), $str );	return $str;}/** * Properly strip all HTML tags including script and style * * @since 2.9.0 * * @param string $string String containing HTML tags * @param bool $remove_breaks optional Whether to remove left over line breaks and white space chars * @return string The processed string. */function wp_strip_all_tags($string, $remove_breaks = false) {	$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\1>@si', '', $string );	$string = strip_tags($string);	if ( $remove_breaks )		$string = preg_replace('/[\r\n\t ]+/', ' ', $string);	return trim($string);}/** * Sanitize a string from user input or from the db * * check for invalid UTF-8, * Convert single < characters to entity, * strip all tags, * remove line breaks, tabs and extra white space, * strip octets. * * @since 2.9.0 * * @param string $str * @return string */function sanitize_text_field($str) {	$filtered = wp_check_invalid_utf8( $str );	if ( strpos($filtered, '<') !== false ) {		$filtered = wp_pre_kses_less_than( $filtered );		// This will strip extra whitespace for us.		$filtered = wp_strip_all_tags( $filtered, true );	} else {		$filtered = trim( preg_replace('/[\r\n\t ]+/', ' ', $filtered) );	}	$match = array();	$found = false;	while ( preg_match('/%[a-f0-9]{2}/i', $filtered, $match) ) {		$filtered = str_replace($match[0], '', $filtered);		$found = true;	}	if ( $found ) {		// Strip out the whitespace that may now exist after removing the octets.		$filtered = trim( preg_replace('/ +/', ' ', $filtered) );	}	return apply_filters('sanitize_text_field', $filtered, $str);}/** * Forever eliminate "Wordpress" from the planet (or at least the little bit we can influence). * * Violating our coding standards for a good function name. * * @since 3.0.0 */function capital_P_dangit( $text ) {       return str_replace( 'Wordpress', 'WordPress', $text );}?>
<?php/** * Themes administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('switch_themes') && !current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );if ( current_user_can('switch_themes') && isset($_GET['action']) ) {	if ( 'activate' == $_GET['action'] ) {		check_admin_referer('switch-theme_' . $_GET['template']);		switch_theme($_GET['template'], $_GET['stylesheet']);		wp_redirect('themes.php?activated=true');		exit;	} else if ( 'delete' == $_GET['action'] ) {		check_admin_referer('delete-theme_' . $_GET['template']);		if ( !current_user_can('delete_themes') )			wp_die( __( 'Cheatin&#8217; uh?' ) );		delete_theme($_GET['template']);		wp_redirect('themes.php?deleted=true');		exit;	}}$title = __('Manage Themes');$parent_file = 'themes.php';if ( current_user_can( 'switch_themes' ) ) :$help = '<p>' . __('Aside from the default theme included with your WordPress installation, themes are designed and developed by third parties.') . '</p>';$help .= '<p>' . __('You can see your active theme at the top of the screen. Below are the other themes you have installed that are not currently in use. You can see what your site would look like with one of these themes by clicking the Preview link. To change themes, click the Activate link.') . '</p>';if ( current_user_can('install_themes') )	$help .= '<p>' . sprintf(__('If you would like to see more themes to choose from, click on the &#8220;Install Themes&#8221; tab and you will be able to browse or search for additional themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. Themes in the WordPress.org Theme Directory are designed and developed by third parties, and are licensed under the GNU General Public License, version 2, just like WordPress. Oh, and they&#8217;re free!'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);add_thickbox();wp_enqueue_script( 'theme-preview' );endif;require_once('./admin-header.php');if ( is_multisite() && current_user_can('edit_themes') ) {	?><div id="message0" class="updated"><p><?php printf( __('Administrator: new themes must be activated in the <a href="%s">Network Themes</a> screen before they appear here.'), admin_url( 'ms-themes.php') ); ?></p></div><?php}?><?php if ( ! validate_current_theme() ) : ?><div id="message1" class="updated"><p><?php _e('The active theme is broken.  Reverting to the default theme.'); ?></p></div><?php elseif ( isset($_GET['activated']) ) :		if ( isset($wp_registered_sidebars) && count( (array) $wp_registered_sidebars ) && current_user_can('edit_theme_options') ) { ?><div id="message2" class="updated"><p><?php printf( __('New theme activated. This theme supports widgets, please visit the <a href="%s">widgets settings</a> screen to configure them.'), admin_url( 'widgets.php' ) ); ?></p></div><?php		} else { ?><div id="message2" class="updated"><p><?php printf( __( 'New theme activated. <a href="%s">Visit site</a>' ), home_url( '/' ) ); ?></p></div><?php		}	elseif ( isset($_GET['deleted']) ) : ?><div id="message3" class="updated"><p><?php _e('Theme deleted.') ?></p></div><?php endif; ?><?php$themes = get_allowed_themes();$ct = current_theme_info();unset($themes[$ct->name]);uksort( $themes, "strnatcasecmp" );$theme_total = count( $themes );$per_page = 15;if ( isset( $_GET['pagenum'] ) )	$page = absint( $_GET['pagenum'] );if ( empty($page) )	$page = 1;$start = $offset = ( $page - 1 ) * $per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ) . '#themenav',	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($theme_total / $per_page),	'current' => $page));$themes = array_slice( $themes, $start, $per_page );?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a><?php if ( current_user_can('install_themes') ) { ?><a href="theme-install.php" class="nav-tab"><?php echo esc_html_x('Install Themes', 'theme'); ?></a><?php } ?></h2><h3><?php _e('Current Theme'); ?></h3><div id="current-theme"><?php if ( $ct->screenshot ) : ?><img src="<?php echo $ct->theme_root_uri . '/' . $ct->stylesheet . '/' . $ct->screenshot; ?>" alt="<?php _e('Current theme preview'); ?>" /><?php endif; ?><h4><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $ct->title, $ct->version, $ct->author) ; ?></h4><p class="theme-description"><?php echo $ct->description; ?></p><?php if ( current_user_can('edit_themes') && $ct->parent_theme ) { ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ), $ct->title, $ct->parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ) ); ?></p><?php } ?><?php if ( $ct->tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $ct->tags); ?></p><?php endif; ?><?php theme_update_available($ct); ?></div><div class="clear"></div><?phpif ( ! current_user_can( 'switch_themes' ) ) {	echo '</div>';	require( './admin-footer.php' );	exit;}?><h3><?php _e('Available Themes'); ?></h3><div class="clear"></div><?php if ( $theme_total ) { ?><?php if ( $page_links ) : ?><div class="tablenav"><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $per_page, $theme_total ) ),	number_format_i18n( $theme_total ),	$page_links); echo $page_links_text; ?></div></div><?php endif; ?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php$style = '';$theme_names = array_keys($themes);natcasesort($theme_names);$table = array();$rows = ceil(count($theme_names) / 3);for ( $row = 1; $row <= $rows; $row++ )	for ( $col = 1; $col <= 3; $col++ )		$table[$row][$col] = array_shift($theme_names);foreach ( $table as $row => $cols ) {?><tr><?phpforeach ( $cols as $col => $theme_name ) {	$class = array('available-theme');	if ( $row == 1 ) $class[] = 'top';	if ( $col == 1 ) $class[] = 'left';	if ( $row == $rows ) $class[] = 'bottom';	if ( $col == 3 ) $class[] = 'right';?>	<td class="<?php echo join(' ', $class); ?>"><?php if ( !empty($theme_name) ) :	$template = $themes[$theme_name]['Template'];	$stylesheet = $themes[$theme_name]['Stylesheet'];	$title = $themes[$theme_name]['Title'];	$version = $themes[$theme_name]['Version'];	$description = $themes[$theme_name]['Description'];	$author = $themes[$theme_name]['Author'];	$screenshot = $themes[$theme_name]['Screenshot'];	$stylesheet_dir = $themes[$theme_name]['Stylesheet Dir'];	$template_dir = $themes[$theme_name]['Template Dir'];	$parent_theme = $themes[$theme_name]['Parent Theme'];	$theme_root = $themes[$theme_name]['Theme Root'];	$theme_root_uri = $themes[$theme_name]['Theme Root URI'];	$preview_link = esc_url(get_option('home') . '/');	if ( is_ssl() )		$preview_link = str_replace( 'http://', 'https://', $preview_link );	$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), $preview_link ) );	$preview_text = esc_attr( sprintf( __('Preview of &#8220;%s&#8221;'), $title ) );	$tags = $themes[$theme_name]['Tags'];	$thickbox_class = 'thickbox thickbox-preview';	$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=".urlencode($template)."&amp;stylesheet=".urlencode($stylesheet), 'switch-theme_' . $template);	$activate_text = esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $title ) );	$actions = array();	$actions[] = '<a href="' . $activate_link .  '" class="activatelink" title="' . $activate_text . '">' . __('Activate') . '</a>';	$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $theme_name)) . '">' . __('Preview') . '</a>';	if ( current_user_can('delete_themes') )		$actions[] = '<a class="submitdelete deletion" href="' . wp_nonce_url("themes.php?action=delete&amp;template=$stylesheet", 'delete-theme_' . $stylesheet) . '" onclick="' . "return confirm('" . esc_js(sprintf( __("You are about to delete this theme '%s'\n  'Cancel' to stop, 'OK' to delete."), $theme_name )) . "');" . '">' . __('Delete') . '</a>';	$actions = apply_filters('theme_action_links', $actions, $themes[$theme_name]);	$actions = implode ( ' | ', $actions );?>		<a href="<?php echo $preview_link; ?>" class="<?php echo $thickbox_class; ?> screenshot"><?php if ( $screenshot ) : ?>			<img src="<?php echo $theme_root_uri . '/' . $stylesheet . '/' . $screenshot; ?>" alt="" /><?php endif; ?>		</a><h3><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $title, $version, $author) ; ?></h3><p class="description"><?php echo $description; ?></p><span class='action-links'><?php echo $actions ?></span>	<?php if ( current_user_can('edit_themes') && $parent_theme ) {	/* translators: 1: theme title, 2:  template dir, 3: stylesheet_dir, 4: theme title, 5: parent_theme */ ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ), $title, $parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ) ); ?></p><?php } ?><?php if ( $tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $tags); ?></p><?php endif; ?>		<?php theme_update_available( $themes[$theme_name] ); ?><?php endif; // end if not empty theme_name ?>	</td><?php } // end foreach $cols ?></tr><?php } // end foreach $table ?></table><?php } else { ?><p><?php	if ( current_user_can('install_themes') )		printf(__('You only have one theme installed right now. Live a little! You can choose from over 1,000 free themes in the WordPress.org Theme Directory at any time: just click on the <em><a href="%s">Install Themes</a></em> tab above.'), 'theme-install.php');	else		printf(__('Only the current theme is available to you. Contact the %s administrator for information about accessing additional themes.'), get_site_option('site_name'));	?></p><?php } // end if $theme_total?><br class="clear" /><?php if ( $page_links ) : ?><div class="tablenav"><?php echo "<div class='tablenav-pages'>$page_links_text</div>"; ?><br class="clear" /></div><?php endif; ?><br class="clear" /><?php// List broken themes, if any.$broken_themes = get_broken_themes();if ( current_user_can('edit_themes') && count( $broken_themes ) ) {?><h2><?php _e('Broken Themes'); ?> <?php if ( is_multisite() ) _e( '(Site admin only)' ); ?></h2><p><?php _e('The following themes are installed but incomplete. Themes must have a stylesheet and a template.'); ?></p><table id="broken-themes">	<tr>		<th><?php _e('Name'); ?></th>		<th><?php _e('Description'); ?></th>	</tr><?php	$theme = '';	$theme_names = array_keys($broken_themes);	natcasesort($theme_names);	foreach ($theme_names as $theme_name) {		$title = $broken_themes[$theme_name]['Title'];		$description = $broken_themes[$theme_name]['Description'];		$theme = ('class="alternate"' == $theme) ? '' : 'class="alternate"';		echo "		<tr $theme>			 <td>$title</td>			 <td>$description</td>		</tr>";	}?></table><?php}?></div><?php require('./admin-footer.php'); ?>
<?phpdefine( "WP_INSTALLING", true );/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );require( './wp-blog-header.php' );if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}require_once( ABSPATH . WPINC . '/registration.php');if ( is_object( $wp_object_cache ) )	$wp_object_cache->cache_enabled = false;do_action("activate_header");function do_activate_header() {	do_action("activate_wp_head");}add_action( 'wp_head', 'do_activate_header' );function wpmu_activate_stylesheet() {	?>	<style type="text/css">		form { margin-top: 2em; }		#submit, #key { width: 90%; font-size: 24px; }		#language { margin-top: .5em; }		.error { background: #f66; }		span.h3 { padding:0 8px; font-size:1.3em; font-family:'Trebuchet MS','Lucida Grande',Verdana,Arial,Sans-Serif; font-weight:700; color:#333333; }	</style>	<?php}add_action( 'wp_head', 'wpmu_activate_stylesheet' );get_header();?><div id="content" class="widecolumn">	<?php if ( empty($_GET['key']) && empty($_POST['key']) ) { ?>		<h2><?php _e('Activation Key Required') ?></h2>		<form name="activateform" id="activateform" method="post" action="<?php echo network_site_url('wp-activate.php'); ?>">			<p>			    <label for="key"><?php _e('Activation Key:') ?></label>			    <br /><input type="text" name="key" id="key" value="" size="50" />			</p>			<p class="submit">			    <input id="submit" type="submit" name="Submit" class="submit" value="<?php esc_attr_e('Activate') ?>" />			</p>		</form>	<?php } else {		$key = !empty($_GET['key']) ? $_GET['key'] : $_POST['key'];		$result = wpmu_activate_signup($key);		if ( is_wp_error($result) ) {			if ( 'already_active' == $result->get_error_code() || 'blog_taken' == $result->get_error_code() ) {			    $signup = $result->get_error_data();				?>				<h2><?php _e('Your account is now active!'); ?></h2>				<?php				echo '<p class="lead-in">';				if ( $signup->domain . $signup->path == '' ) {					printf( __('Your account has been activated. You may now <a href="%1$s">login</a> to the site using your chosen username of &#8220;%2$s&#8221;.  Please check your email inbox at %3$s for your password and login instructions. If you do not receive an email, please check your junk or spam folder. If you still do not receive an email within an hour, you can <a href="%4$s">reset your password</a>.'), network_site_url( 'wp-login.php', 'login' ), $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword', 'login' ) );				} else {					printf( __('Your site at <a href="%1$s">%2$s</a> is active. You may now log in to your site using your chosen username of &#8220;%3$s&#8221;.  Please check your email inbox at %4$s for your password and login instructions.  If you do not receive an email, please check your junk or spam folder.  If you still do not receive an email within an hour, you can <a href="%5$s">reset your password</a>.'), 'http://' . $signup->domain, $signup->domain, $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword' ) );				}				echo '</p>';			} else {				?>				<h2><?php _e('An error occurred during the activation'); ?></h2>				<?php			    echo '<p>'.$result->get_error_message().'</p>';			}		} else {			extract($result);			$url = get_blogaddress_by_id( (int) $blog_id);			$user = new WP_User( (int) $user_id);			?>			<h2><?php _e('Your account is now active!'); ?></h2>			<div id="signup-welcome">				<p><span class="h3"><?php _e('Username:'); ?></span> <?php echo $user->user_login ?></p>				<p><span class="h3"><?php _e('Password:'); ?></span> <?php echo $password; ?></p>			</div>			<?php if ( $url != network_home_url('', 'http') ) : ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">View your site</a> or <a href="%2$s">Login</a>'), $url, $url . 'wp-login.php' ); ?></p>			<?php else: ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">Login</a> or go back to the <a href="%2$s">homepage</a>.' ), network_site_url('wp-login.php', 'login'), network_home_url() ); ?></p>			<?php endif;		}	}	?></div><script type="text/javascript">	var key_input = document.getElementById('key');	key_input && key_input.focus();</script><?php get_footer(); ?>
<?php/** * WordPress Post Template Functions. * * Gets content for the current post in the loop. * * @package WordPress * @subpackage Template *//** * Display the ID of the current item in the WordPress Loop. * * @since 0.71 * @uses $id */function the_ID() {	global $id;	echo $id;}/** * Retrieve the ID of the current item in the WordPress Loop. * * @since 2.1.0 * @uses $id * * @return unknown */function get_the_ID() {	global $id;	return $id;}/** * Display or retrieve the current post title with optional content. * * @since 0.71 * * @param string $before Optional. Content to prepend to the title. * @param string $after Optional. Content to append to the title. * @param bool $echo Optional, default to true.Whether to display or return. * @return null|string Null on no title. String if $echo parameter is false. */function the_title($before = '', $after = '', $echo = true) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$title = $before . $title . $after;	if ( $echo )		echo $title;	else		return $title;}/** * Sanitize the current title when retrieving or displaying. * * Works like {@link the_title()}, except the parameters can be in a string or * an array. See the function for what can be override in the $args parameter. * * The title before it is displayed will have the tags stripped and {@link * esc_attr()} before it is passed to the user or displayed. The default * as with {@link the_title()}, is to display the title. * * @since 2.3.0 * * @param string|array $args Optional. Override the defaults. * @return string|null Null on failure or display. String when echo is false. */function the_title_attribute( $args = '' ) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$defaults = array('before' => '', 'after' =>  '', 'echo' => true);	$r = wp_parse_args($args, $defaults);	extract( $r, EXTR_SKIP );	$title = $before . $title . $after;	$title = esc_attr(strip_tags($title));	if ( $echo )		echo $title;	else		return $title;}/** * Retrieve post title. * * If the post is protected and the visitor is not an admin, then "Protected" * will be displayed before the post title. If the post is private, then * "Private" will be located before the post title. * * @since 0.71 * * @param int $id Optional. Post ID. * @return string */function get_the_title( $id = 0 ) {	$post = &get_post($id);	$title = isset($post->post_title) ? $post->post_title : '';	$id = isset($post->ID) ? $post->ID : (int) $id;	if ( !is_admin() ) {		if ( !empty($post->post_password) ) {			$protected_title_format = apply_filters('protected_title_format', __('Protected: %s'));			$title = sprintf($protected_title_format, $title);		} else if ( isset($post->post_status) && 'private' == $post->post_status ) {			$private_title_format = apply_filters('private_title_format', __('Private: %s'));			$title = sprintf($private_title_format, $title);		}	}	return apply_filters( 'the_title', $title, $id );}/** * Display the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * Url is escaped to make it xml safe * * @since 1.5.0 * * @param int $id Optional. Post ID. */function the_guid( $id = 0 ) {	echo esc_url( get_the_guid( $id ) );}/** * Retrieve the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @return string */function get_the_guid( $id = 0 ) {	$post = &get_post($id);	return apply_filters('get_the_guid', $post->guid);}/** * Display the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. */function the_content($more_link_text = null, $stripteaser = 0) {	$content = get_the_content($more_link_text, $stripteaser);	$content = apply_filters('the_content', $content);	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Retrieve the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. * @return string */function get_the_content($more_link_text = null, $stripteaser = 0) {	global $id, $post, $more, $page, $pages, $multipage, $preview;	if ( null === $more_link_text )		$more_link_text = __( '(more...)' );	$output = '';	$hasTeaser = false;	// If post password required and it doesn't match the cookie.	if ( post_password_required($post) ) {		$output = get_the_password_form();		return $output;	}	if ( $page > count($pages) ) // if the requested page doesn't exist		$page = count($pages); // give them the highest numbered page that DOES exist	$content = $pages[$page-1];	if ( preg_match('/<!--more(.*?)?-->/', $content, $matches) ) {		$content = explode($matches[0], $content, 2);		if ( !empty($matches[1]) && !empty($more_link_text) )			$more_link_text = strip_tags(wp_kses_no_null(trim($matches[1])));		$hasTeaser = true;	} else {		$content = array($content);	}	if ( (false !== strpos($post->post_content, '<!--noteaser-->') && ((!$multipage) || ($page==1))) )		$stripteaser = 1;	$teaser = $content[0];	if ( ($more) && ($stripteaser) && ($hasTeaser) )		$teaser = '';	$output .= $teaser;	if ( count($content) > 1 ) {		if ( $more ) {			$output .= '<span id="more-' . $id . '"></span>' . $content[1];		} else {			if ( ! empty($more_link_text) )				$output .= apply_filters( 'the_content_more_link', ' <a href="' . get_permalink() . "#more-$id\" class=\"more-link\">$more_link_text</a>", $more_link_text );			$output = force_balance_tags($output);		}	}	if ( $preview ) // preview fix for javascript bug with foreign languages		$output =	preg_replace_callback('/\%u([0-9A-F]{4})/', create_function('$match', 'return "&#" . base_convert($match[1], 16, 10) . ";";'), $output);	return $output;}/** * Display the post excerpt. * * @since 0.71 * @uses apply_filters() Calls 'the_excerpt' hook on post excerpt. */function the_excerpt() {	echo apply_filters('the_excerpt', get_the_excerpt());}/** * Retrieve the post excerpt. * * @since 0.71 * * @param mixed $deprecated Not used. * @return string */function get_the_excerpt( $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	global $post;	$output = $post->post_excerpt;	if ( post_password_required($post) ) {		$output = __('There is no excerpt because this is a protected post.');		return $output;	}	return apply_filters('get_the_excerpt', $output);}/** * Whether post has excerpt. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @return bool */function has_excerpt( $id = 0 ) {	$post = &get_post( $id );	return ( !empty( $post->post_excerpt ) );}/** * Display the classes for the post div. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. */function post_class( $class = '', $post_id = null ) {	// Separates classes with a single space, collates classes for post DIV	echo 'class="' . join( ' ', get_post_class( $class, $post_id ) ) . '"';}/** * Retrieve the classes for the post div as an array. * * The class names are add are many. If the post is a sticky, then the 'sticky' * class name. The class 'hentry' is always added to each post. For each * category, the class will be added with 'category-' with category slug is * added. The tags are the same way as the categories with 'tag-' before the tag * slug. All classes are passed through the filter, 'post_class' with the list * of classes, followed by $class parameter value, with the post ID as the last * parameter. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. * @return array Array of classes. */function get_post_class( $class = '', $post_id = null ) {	$post = get_post($post_id);	$classes = array();	if ( empty($post) )		return $classes;	$classes[] = 'post-' . $post->ID;	$classes[] = $post->post_type;	$classes[] = 'type-' . $post->post_type;	// sticky for Sticky Posts	if ( is_sticky($post->ID) && is_home() && !is_paged() )		$classes[] = 'sticky';	// hentry for hAtom compliace	$classes[] = 'hentry';	// Categories	foreach ( (array) get_the_category($post->ID) as $cat ) {		if ( empty($cat->slug ) )			continue;		$classes[] = 'category-' . sanitize_html_class($cat->slug, $cat->cat_ID);	}	// Tags	foreach ( (array) get_the_tags($post->ID) as $tag ) {		if ( empty($tag->slug ) )			continue;		$classes[] = 'tag-' . sanitize_html_class($tag->slug, $tag->term_id);	}	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('post_class', $classes, $class, $post->ID);}/** * Display the classes for the body element. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. */function body_class( $class = '' ) {	// Separates classes with a single space, collates classes for body element	echo 'class="' . join( ' ', get_body_class( $class ) ) . '"';}/** * Retrieve the classes for the body element as an array. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. * @return array Array of classes. */function get_body_class( $class = '' ) {	global $wp_query, $wpdb;	$classes = array();	if ( is_rtl() )		$classes[] = 'rtl';	if ( is_front_page() )		$classes[] = 'home';	if ( is_home() )		$classes[] = 'blog';	if ( is_archive() )		$classes[] = 'archive';	if ( is_date() )		$classes[] = 'date';	if ( is_search() )		$classes[] = 'search';	if ( is_paged() )		$classes[] = 'paged';	if ( is_attachment() )		$classes[] = 'attachment';	if ( is_404() )		$classes[] = 'error404';	if ( is_single() ) {		$post_id = $wp_query->get_queried_object_id();		$post = $wp_query->get_queried_object();		$classes[] = 'single';		$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);		$classes[] = 'postid-' . $post_id;		if ( is_attachment() ) {			$mime_type = get_post_mime_type($post_id);			$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );			$classes[] = 'attachmentid-' . $post_id;			$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );		}	} elseif ( is_archive() ) {		if ( is_author() ) {			$author = $wp_query->get_queried_object();			$classes[] = 'author';			$classes[] = 'author-' . sanitize_html_class( $author->user_nicename , $author->ID );		} elseif ( is_category() ) {			$cat = $wp_query->get_queried_object();			$classes[] = 'category';			$classes[] = 'category-' . sanitize_html_class( $cat->slug, $cat->cat_ID );		} elseif ( is_tag() ) {			$tags = $wp_query->get_queried_object();			$classes[] = 'tag';			$classes[] = 'tag-' . sanitize_html_class( $tags->slug, $tags->term_id );		}	} elseif ( is_page() ) {		$classes[] = 'page';		$page_id = $wp_query->get_queried_object_id();		$post = get_page($page_id);		$classes[] = 'page-id-' . $page_id;		if ( $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' AND post_status = 'publish' LIMIT 1", $page_id) ) )			$classes[] = 'page-parent';		if ( $post->post_parent ) {			$classes[] = 'page-child';			$classes[] = 'parent-pageid-' . $post->post_parent;		}		if ( is_page_template() ) {			$classes[] = 'page-template';			$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', get_post_meta( $page_id, '_wp_page_template', true ) ), '' );		}	} elseif ( is_search() ) {		if ( !empty( $wp_query->posts ) )			$classes[] = 'search-results';		else			$classes[] = 'search-no-results';	}	if ( is_user_logged_in() )		$classes[] = 'logged-in';	$page = $wp_query->get( 'page' );	if ( !$page || $page < 2)		$page = $wp_query->get( 'paged' );	if ( $page && $page > 1 ) {		$classes[] = 'paged-' . $page;		if ( is_single() )			$classes[] = 'single-paged-' . $page;		elseif ( is_page() )			$classes[] = 'page-paged-' . $page;		elseif ( is_category() )			$classes[] = 'category-paged-' . $page;		elseif ( is_tag() )			$classes[] = 'tag-paged-' . $page;		elseif ( is_date() )			$classes[] = 'date-paged-' . $page;		elseif ( is_author() )			$classes[] = 'author-paged-' . $page;		elseif ( is_search() )			$classes[] = 'search-paged-' . $page;	}	if ( !empty( $class ) ) {		if ( !is_array( $class ) )			$class = preg_split( '#\s+#', $class );		$classes = array_merge( $classes, $class );	}	$classes = array_map( 'esc_attr', $classes );	return apply_filters( 'body_class', $classes, $class );}/** * Whether post requires password and correct password has been provided. * * @since 2.7.0 * * @param int|object $post An optional post.  Global $post used if not provided. * @return bool false if a password is not required or the correct password cookie is present, true otherwise. */function post_password_required( $post = null ) {	$post = get_post($post);	if ( empty($post->post_password) )		return false;	if ( !isset($_COOKIE['wp-postpass_' . COOKIEHASH]) )		return true;	if ( $_COOKIE['wp-postpass_' . COOKIEHASH] != $post->post_password )		return true;	return false;}/** * Display "sticky" CSS class, if a post is sticky. * * @since 2.7.0 * * @param int $post_id An optional post ID. */function sticky_class( $post_id = null ) {	if ( !is_sticky($post_id) )		return;	echo " sticky";}/** * Page Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of pages. * * Displays page links for paginated posts (i.e. includes the <!--nextpage-->. * Quicktag one or more times). This tag must be within The Loop. * * The defaults for overwriting are: * 'next_or_number' - Default is 'number' (string). Indicates whether page *      numbers should be used. Valid values are number and next. * 'nextpagelink' - Default is 'Next Page' (string). Text for link to next page. *      of the bookmark. * 'previouspagelink' - Default is 'Previous Page' (string). Text for link to *      previous page, if available. * 'pagelink' - Default is '%' (String).Format string for page numbers. The % in *      the parameter string will be replaced with the page number, so Page % *      generates "Page 1", "Page 2", etc. Defaults to %, just the page number. * 'before' - Default is '<p> Pages:' (string). The html or text to prepend to *      each bookmarks. * 'after' - Default is '</p>' (string). The html or text to append to each *      bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *      Pages link inside the <a> tag. Also prepended to the current item, which *      is not linked. * 'link_after' - Default is '' (string). The html or text to append to each *      Pages link inside the <a> tag. Also appended to the current item, which *      is not linked. * * @since 1.2.0 * @access private * * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML. */function wp_link_pages($args = '') {	$defaults = array(		'before' => '<p>' . __('Pages:'), 'after' => '</p>',		'link_before' => '', 'link_after' => '',		'next_or_number' => 'number', 'nextpagelink' => __('Next page'),		'previouspagelink' => __('Previous page'), 'pagelink' => '%',		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	$r = apply_filters( 'wp_link_pages_args', $r );	extract( $r, EXTR_SKIP );	global $post, $page, $numpages, $multipage, $more, $pagenow;	$output = '';	if ( $multipage ) {		if ( 'number' == $next_or_number ) {			$output .= $before;			for ( $i = 1; $i < ($numpages+1); $i = $i + 1 ) {				$j = str_replace('%',$i,$pagelink);				$output .= ' ';				if ( ($i != $page) || ((!$more) && ($page==1)) ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}				}				$output .= $link_before;				$output .= $j;				$output .= $link_after;				if ( ($i != $page) || ((!$more) && ($page==1)) )					$output .= '</a>';			}			$output .= $after;		} else {			if ( $more ) {				$output .= $before;				$i = $page - 1;				if ( $i && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $previouspagelink . $link_after . '</a>';				}				$i = $page + 1;				if ( $i <= $numpages && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $nextpagelink . $link_after . '</a>';				}				$output .= $after;			}		}	}	if ( $echo )		echo $output;	return $output;}//// Post-meta: Custom per-post fields.///** * Retrieve post custom meta data field. * * @since 1.5.0 * * @param string $key Meta data key name. * @return bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist. */function post_custom( $key = '' ) {	$custom = get_post_custom();	if ( !isset( $custom[$key] ) )		return false;	elseif ( 1 == count($custom[$key]) )		return $custom[$key][0];	else		return $custom[$key];}/** * Display list of post custom fields. * * @internal This will probably change at some point... * @since 1.2.0 * @uses apply_filters() Calls 'the_meta_key' on list item HTML content, with key and value as separate parameters. */function the_meta() {	if ( $keys = get_post_custom_keys() ) {		echo "<ul class='post-meta'>\n";		foreach ( (array) $keys as $key ) {			$keyt = trim($key);			if ( '_' == $keyt{0} )				continue;			$values = array_map('trim', get_post_custom_values($key));			$value = implode($values,', ');			echo apply_filters('the_meta_key', "<li><span class='post-meta-key'>$key:</span> $value</li>\n", $key, $value);		}		echo "</ul>\n";	}}//// Pages///** * Retrieve or display list of pages as a dropdown (select list). * * @since 2.1.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_dropdown_pages($args = '') {	$defaults = array(		'depth' => 0, 'child_of' => 0,		'selected' => 0, 'echo' => 1,		'name' => 'page_id', 'id' => '',		'show_option_none' => '', 'show_option_no_change' => '',		'option_none_value' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$pages = get_pages($r);	$output = '';	$name = esc_attr($name);	// Back-compat with old system where both id and name were based on $name argument	if ( empty($id) )		$id = $name;	if ( ! empty($pages) ) {		$output = "<select name=\"$name\" id=\"$id\">\n";		if ( $show_option_no_change )			$output .= "\t<option value=\"-1\">$show_option_no_change</option>";		if ( $show_option_none )			$output .= "\t<option value=\"" . esc_attr($option_none_value) . "\">$show_option_none</option>\n";		$output .= walk_page_dropdown_tree($pages, $depth, $r);		$output .= "</select>\n";	}	$output = apply_filters('wp_dropdown_pages', $output);	if ( $echo )		echo $output;	return $output;}/** * Retrieve or display list of pages in list (li) format. * * @since 1.5.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_list_pages($args = '') {	$defaults = array(		'depth' => 0, 'show_date' => '',		'date_format' => get_option('date_format'),		'child_of' => 0, 'exclude' => '',		'title_li' => __('Pages'), 'echo' => 1,		'authors' => '', 'sort_column' => 'menu_order, post_title',		'link_before' => '', 'link_after' => '', 'walker' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	$current_page = 0;	// sanitize, mostly to keep spaces out	$r['exclude'] = preg_replace('/[^0-9,]/', '', $r['exclude']);	// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)	$exclude_array = ( $r['exclude'] ) ? explode(',', $r['exclude']) : array();	$r['exclude'] = implode( ',', apply_filters('wp_list_pages_excludes', $exclude_array) );	// Query pages.	$r['hierarchical'] = 0;	$pages = get_pages($r);	if ( !empty($pages) ) {		if ( $r['title_li'] )			$output .= '<li class="pagenav">' . $r['title_li'] . '<ul>';		global $wp_query;		if ( is_page() || is_attachment() || $wp_query->is_posts_page )			$current_page = $wp_query->get_queried_object_id();		$output .= walk_page_tree($pages, $r['depth'], $current_page, $r);		if ( $r['title_li'] )			$output .= '</ul></li>';	}	$output = apply_filters('wp_list_pages', $output, $r);	if ( $r['echo'] )		echo $output;	else		return $output;}/** * Display or retrieve list of pages with optional home link. * * The arguments are listed below and part of the arguments are for {@link * wp_list_pages()} function. Check that function for more info on those * arguments. * * <ul> * <li><strong>sort_column</strong> - How to sort the list of pages. Defaults * to page title. Use column for posts table.</li> * <li><strong>menu_class</strong> - Class to use for the div ID which contains * the page list. Defaults to 'menu'.</li> * <li><strong>echo</strong> - Whether to echo list or return it. Defaults to * echo.</li> * <li><strong>link_before</strong> - Text before show_home argument text.</li> * <li><strong>link_after</strong> - Text after show_home argument text.</li> * <li><strong>show_home</strong> - If you set this argument, then it will * display the link to the home page. The show_home argument really just needs * to be set to the value of the text of the link.</li> * </ul> * * @since 2.7.0 * * @param array|string $args */function wp_page_menu( $args = array() ) {	$defaults = array('sort_column' => 'menu_order, post_title', 'menu_class' => 'menu', 'echo' => true, 'link_before' => '', 'link_after' => '');	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_page_menu_args', $args );	$menu = '';	$list_args = $args;	// Show Home in the menu	if ( ! empty($args['show_home']) ) {		if ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )			$text = __('Home');		else			$text = $args['show_home'];		$class = '';		if ( is_front_page() && !is_paged() )			$class = 'class="current_page_item"';		$menu .= '<li ' . $class . '><a href="' . home_url( '/' ) . '" title="' . esc_attr($text) . '">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';		// If the front page is a page, add it to the exclude list		if (get_option('show_on_front') == 'page') {			if ( !empty( $list_args['exclude'] ) ) {				$list_args['exclude'] .= ',';			} else {				$list_args['exclude'] = '';			}			$list_args['exclude'] .= get_option('page_on_front');		}	}	$list_args['echo'] = false;	$list_args['title_li'] = '';	$menu .= str_replace( array( "\r", "\n", "\t" ), '', wp_list_pages($list_args) );	if ( $menu )		$menu = '<ul>' . $menu . '</ul>';	$menu = '<div class="' . esc_attr($args['menu_class']) . '">' . $menu . "</div>\n";	$menu = apply_filters( 'wp_page_menu', $menu, $args );	if ( $args['echo'] )		echo $menu;	else		return $menu;}//// Page helpers///** * Retrieve HTML list content for page list. * * @uses Walker_Page to create HTML list content. * @since 2.1.0 * @see Walker_Page::walk() for parameters and return description. */function walk_page_tree($pages, $depth, $current_page, $r) {	if ( empty($r['walker']) )		$walker = new Walker_Page;	else		$walker = $r['walker'];	$args = array($pages, $depth, $r, $current_page);	return call_user_func_array(array(&$walker, 'walk'), $args);}/** * Retrieve HTML dropdown (select) content for page list. * * @uses Walker_PageDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_PageDropdown::walk() for parameters and return description. */function walk_page_dropdown_tree() {	$args = func_get_args();	if ( empty($args[2]['walker']) ) // the user's options are the third parameter		$walker = new Walker_PageDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array(&$walker, 'walk'), $args);}//// Attachments///** * Display an attachment page link using an image or icon. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size. * @param bool $deprecated Deprecated. Not used. * @param bool $permalink Optional, default is false. Whether to include permalink. */function the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.5' );	if ( $fullsize )		echo wp_get_attachment_link($id, 'full', $permalink);	else		echo wp_get_attachment_link($id, 'thumbnail', $permalink);}/** * Retrieve an attachment page link using an image or icon, if possible. * * @since 2.5.0 * @uses apply_filters() Calls 'wp_get_attachment_link' filter on HTML content with same parameters as function. * * @param int $id Optional. Post ID. * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @param bool $permalink Optional, default is false. Whether to add permalink to image. * @param bool $icon Optional, default is false. Whether to include icon. * @param string $text Optional, default is false. If string, then will be link text. * @return string HTML content. */function wp_get_attachment_link($id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false) {	$id = intval($id);	$_post = & get_post( $id );	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	if ( $text ) {		$link_text = esc_attr($text);	} elseif ( ( is_int($size) && $size != 0 ) or ( is_string($size) && $size != 'none' ) or $size != false ) {		$link_text = wp_get_attachment_image($id, $size, $icon);	} else {		$link_text = '';	}	if( trim($link_text) == '' )		$link_text = $_post->post_title;	return apply_filters( 'wp_get_attachment_link', "<a href='$url' title='$post_title'>$link_text</a>", $id, $size, $permalink, $icon, $text );}/** * Wrap attachment in <<p>> element before content. * * @since 2.0.0 * @uses apply_filters() Calls 'prepend_attachment' hook on HTML content. * * @param string $content * @return string */function prepend_attachment($content) {	global $post;	if ( empty($post->post_type) || $post->post_type != 'attachment' )		return $content;	$p = '<p class="attachment">';	// show the medium sized image representation of the attachment if available, and link to the raw file	$p .= wp_get_attachment_link(0, 'medium', false);	$p .= '</p>';	$p = apply_filters('prepend_attachment', $p);	return "$p\n$content";}//// Misc///** * Retrieve protected post password form content. * * @since 1.0.0 * @uses apply_filters() Calls 'the_password_form' filter on output. * * @return string HTML content for password form for password protected post. */function get_the_password_form() {	global $post;	$label = 'pwbox-'.(empty($post->ID) ? rand() : $post->ID);	$output = '<form action="' . get_option('siteurl') . '/wp-pass.php" method="post">	<p>' . __("This post is password protected. To view it please enter your password below:") . '</p>	<p><label for="' . $label . '">' . __("Password:") . ' <input name="post_password" id="' . $label . '" type="password" size="20" /></label> <input type="submit" name="Submit" value="' . esc_attr__("Submit") . '" /></p>	</form>	';	return apply_filters('the_password_form', $output);}/** * Whether currently in a page template. * * This template tag allows you to determine if you are in a page template. * You can optionally provide a template name and then the check will be * specific to that template. * * @since 2.5.0 * @uses $wp_query * * @param string $template The specific template name if specific matching is required. * @return bool False on failure, true if success. */function is_page_template($template = '') {	if (!is_page()) {		return false;	}	global $wp_query;	$page = $wp_query->get_queried_object();	$custom_fields = get_post_custom_values('_wp_page_template',$page->ID);	$page_template = $custom_fields[0];	// We have no argument passed so just see if a page_template has been specified	if ( empty( $template ) ) {		if (!empty( $page_template ) ) {			return true;		}	} elseif ( $template == $page_template) {		return true;	}	return false;}/** * Retrieve formatted date timestamp of a revision (linked to that revisions's page). * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses date_i18n() * * @param int|object $revision Revision ID or revision object. * @param bool $link Optional, default is true. Link to revisions's page? * @return string i18n formatted datetimestamp or localized 'Current Revision'. */function wp_post_revision_title( $revision, $link = true ) {	if ( !$revision = get_post( $revision ) )		return $revision;	if ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )		return false;	/* translators: revision date format, see http://php.net/date */	$datef = _x( 'j F, Y @ G:i', 'revision date format');	/* translators: 1: date */	$autosavef = __( '%1$s [Autosave]' );	/* translators: 1: date */	$currentf  = __( '%1$s [Current Revision]' );	$date = date_i18n( $datef, strtotime( $revision->post_modified ) );	if ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )		$date = "<a href='$link'>$date</a>";	if ( !wp_is_post_revision( $revision ) )		$date = sprintf( $currentf, $date );	elseif ( wp_is_post_autosave( $revision ) )		$date = sprintf( $autosavef, $date );	return $date;}/** * Display list of a post's revisions. * * Can output either a UL with edit links or a TABLE with diff interface, and * restore action links. * * Second argument controls parameters: *   (bool)   parent : include the parent (the "Current Revision") in the list. *   (string) format : 'list' or 'form-table'.  'list' outputs UL, 'form-table' *                     outputs TABLE with UI. *   (int)    right  : what revision is currently being viewed - used in *                     form-table format. *   (int)    left   : what revision is currently being diffed against right - *                     used in form-table format. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revisions() * @uses wp_post_revision_title() * @uses get_edit_post_link() * @uses get_the_author_meta() * * @todo split into two functions (list, form-table) ? * * @param int|object $post_id Post ID or post object. * @param string|array $args See description {@link wp_parse_args()}. * @return null */function wp_list_post_revisions( $post_id = 0, $args = null ) {	if ( !$post = get_post( $post_id ) )		return;	$defaults = array( 'parent' => false, 'right' => false, 'left' => false, 'format' => 'list', 'type' => 'all' );	extract( wp_parse_args( $args, $defaults ), EXTR_SKIP );	switch ( $type ) {		case 'autosave' :			if ( !$autosave = wp_get_post_autosave( $post->ID ) )				return;			$revisions = array( $autosave );			break;		case 'revision' : // just revisions - remove autosave later		case 'all' :		default :			if ( !$revisions = wp_get_post_revisions( $post->ID ) )				return;			break;	}	/* translators: post revision: 1: when, 2: author name */	$titlef = _x( '%1$s by %2$s', 'post revision' );	if ( $parent )		array_unshift( $revisions, $post );	$rows = '';	$class = false;	$can_edit_post = current_user_can( 'edit_post', $post->ID );	foreach ( $revisions as $revision ) {		if ( !current_user_can( 'read_post', $revision->ID ) )			continue;		if ( 'revision' === $type && wp_is_post_autosave( $revision ) )			continue;		$date = wp_post_revision_title( $revision );		$name = get_the_author_meta( 'display_name', $revision->post_author );		if ( 'form-table' == $format ) {			if ( $left )				$left_checked = $left == $revision->ID ? ' checked="checked"' : '';			else				$left_checked = $right_checked ? ' checked="checked"' : ''; // [sic] (the next one)			$right_checked = $right == $revision->ID ? ' checked="checked"' : '';			$class = $class ? '' : " class='alternate'";			if ( $post->ID != $revision->ID && $can_edit_post )				$actions = '<a href="' . wp_nonce_url( add_query_arg( array( 'revision' => $revision->ID, 'action' => 'restore' ) ), "restore-post_$post->ID|$revision->ID" ) . '">' . __( 'Restore' ) . '</a>';			else				$actions = '';			$rows .= "<tr$class>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='left' value='$revision->ID'$left_checked /></th>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='right' value='$revision->ID'$right_checked /></th>\n";			$rows .= "\t<td>$date</td>\n";			$rows .= "\t<td>$name</td>\n";			$rows .= "\t<td class='action-links'>$actions</td>\n";			$rows .= "</tr>\n";		} else {			$title = sprintf( $titlef, $date, $name );			$rows .= "\t<li>$title</li>\n";		}	}	if ( 'form-table' == $format ) : ?><form action="revision.php" method="get"><div class="tablenav">	<div class="alignleft">		<input type="submit" class="button-secondary" value="<?php esc_attr_e( 'Compare Revisions' ); ?>" />		<input type="hidden" name="action" value="diff" />		<input type="hidden" name="post_type" value="<?php echo esc_attr($post->post_type); ?>" />	</div></div><br class="clear" /><table class="widefat post-revisions" cellspacing="0" id="post-revisions">	<col />	<col />	<col style="width: 33%" />	<col style="width: 33%" />	<col style="width: 33%" /><thead><tr>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Old', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'New', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Date Created', 'revisions column name' ); ?></th>	<th scope="col"><?php _e( 'Author' ); ?></th>	<th scope="col" class="action-links"><?php _e( 'Actions' ); ?></th></tr></thead><tbody><?php echo $rows; ?></tbody></table></form><?php	else :		echo "<ul class='post-revisions'>\n";		echo $rows;		echo "</ul>";	endif;}
<?php/** * WordPress Dashboard Widget Administration Panel API * * @package WordPress * @subpackage Administration *//** * Registers dashboard widgets. * * handles POST data, sets up filters. * * @since unknown */function wp_dashboard_setup() {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_dashboard_control_callbacks;	$wp_dashboard_control_callbacks = array();	$update = false;	$widget_options = get_option( 'dashboard_widget_options' );	if ( !$widget_options || !is_array($widget_options) )		$widget_options = array();	/* Register Widgets and Controls */	// Right Now	wp_add_dashboard_widget( 'dashboard_right_now', __( 'Right Now' ), 'wp_dashboard_right_now' );	// Recent Comments Widget	if ( !isset( $widget_options['dashboard_recent_comments'] ) || !isset( $widget_options['dashboard_recent_comments']['items'] ) ) {		$update = true;		$widget_options['dashboard_recent_comments'] = array(			'items' => 5,		);	}	$recent_comments_title = __( 'Recent Comments' );	wp_add_dashboard_widget( 'dashboard_recent_comments', $recent_comments_title, 'wp_dashboard_recent_comments', 'wp_dashboard_recent_comments_control' );	// Incoming Links Widget	if ( !isset( $widget_options['dashboard_incoming_links'] ) || !isset( $widget_options['dashboard_incoming_links']['home'] ) || $widget_options['dashboard_incoming_links']['home'] != get_option('home') ) {		$update = true;		$num_items = isset($widget_options['dashboard_incoming_links']['items']) ? $widget_options['dashboard_incoming_links']['items'] : 10;		$widget_options['dashboard_incoming_links'] = array(			'home' => get_option('home'),			'link' => apply_filters( 'dashboard_incoming_links_link', 'http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'url' => isset($widget_options['dashboard_incoming_links']['url']) ? apply_filters( 'dashboard_incoming_links_feed', $widget_options['dashboard_incoming_links']['url'] ) : apply_filters( 'dashboard_incoming_links_feed', 'http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=' . $num_items . '&output=rss&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'items' => $num_items,			'show_date' => isset($widget_options['dashboard_incoming_links']['show_date']) ? $widget_options['dashboard_incoming_links']['show_date'] : false		);	}	wp_add_dashboard_widget( 'dashboard_incoming_links', __( 'Incoming Links' ), 'wp_dashboard_incoming_links', 'wp_dashboard_incoming_links_control' );	// WP Plugins Widget	if ( current_user_can( 'install_plugins' ) )		wp_add_dashboard_widget( 'dashboard_plugins', __( 'Plugins' ), 'wp_dashboard_plugins' );	// QuickPress Widget	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_quick_press', __( 'QuickPress' ), 'wp_dashboard_quick_press' );	// Recent Drafts	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_recent_drafts', __('Recent Drafts'), 'wp_dashboard_recent_drafts' );	// Primary feed (Dev Blog) Widget	if ( !isset( $widget_options['dashboard_primary'] ) ) {		$update = true;		$widget_options['dashboard_primary'] = array(			'link' => apply_filters( 'dashboard_primary_link',  __( 'http://wordpress.org/development/' ) ),			'url' => apply_filters( 'dashboard_primary_feed',  __( 'http://wordpress.org/development/feed/' ) ),			'title' => apply_filters( 'dashboard_primary_title', __( 'WordPress Blog' ) ),			'items' => 2,			'show_summary' => 1,			'show_author' => 0,			'show_date' => 1,		);	}	wp_add_dashboard_widget( 'dashboard_primary', $widget_options['dashboard_primary']['title'], 'wp_dashboard_primary', 'wp_dashboard_primary_control' );	// Secondary Feed (Planet) Widget	if ( !isset( $widget_options['dashboard_secondary'] ) ) {		$update = true;		$widget_options['dashboard_secondary'] = array(			'link' => apply_filters( 'dashboard_secondary_link',  __( 'http://planet.wordpress.org/' ) ),			'url' => apply_filters( 'dashboard_secondary_feed',  __( 'http://planet.wordpress.org/feed/' ) ),			'title' => apply_filters( 'dashboard_secondary_title', __( 'Other WordPress News' ) ),			'items' => 5,			'show_summary' => 0,			'show_author' => 0,			'show_date' => 0,		);	}	wp_add_dashboard_widget( 'dashboard_secondary', $widget_options['dashboard_secondary']['title'], 'wp_dashboard_secondary', 'wp_dashboard_secondary_control' );	// Hook to register new widgets	do_action( 'wp_dashboard_setup' );	// Filter widget order	$dashboard_widgets = apply_filters( 'wp_dashboard_widgets', array() );	foreach ( $dashboard_widgets as $widget_id ) {		$name = empty( $wp_registered_widgets[$widget_id]['all_link'] ) ? $wp_registered_widgets[$widget_id]['name'] : $wp_registered_widgets[$widget_id]['name'] . " <a href='{$wp_registered_widgets[$widget_id]['all_link']}' class='edit-box open-box'>" . __('View all') . '</a>';		wp_add_dashboard_widget( $widget_id, $name, $wp_registered_widgets[$widget_id]['callback'], $wp_registered_widget_controls[$widget_id]['callback'] );	}	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget_id']) ) {		ob_start(); // hack - but the same hack wp-admin/widgets.php uses		wp_dashboard_trigger_widget_control( $_POST['widget_id'] );		ob_end_clean();		wp_redirect( remove_query_arg( 'edit' ) );		exit;	}	if ( $update )		update_option( 'dashboard_widget_options', $widget_options );	do_action('do_meta_boxes', 'dashboard', 'normal', '');	do_action('do_meta_boxes', 'dashboard', 'side', '');}function wp_add_dashboard_widget( $widget_id, $widget_name, $callback, $control_callback = null ) {	global $wp_dashboard_control_callbacks;	if ( $control_callback && current_user_can( 'edit_dashboard' ) && is_callable( $control_callback ) ) {		$wp_dashboard_control_callbacks[$widget_id] = $control_callback;		if ( isset( $_GET['edit'] ) && $widget_id == $_GET['edit'] ) {			list($url) = explode( '#', add_query_arg( 'edit', false ), 2 );			$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( $url ) . '">' . __( 'Cancel' ) . '</a></span>';			add_meta_box( $widget_id, $widget_name, '_wp_dashboard_control_callback', 'dashboard', 'normal', 'core' );			return;		}		list($url) = explode( '#', add_query_arg( 'edit', $widget_id ), 2 );		$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( "$url#$widget_id" ) . '" class="edit-box open-box">' . __( 'Configure' ) . '</a></span>';	}	$side_widgets = array('dashboard_quick_press', 'dashboard_recent_drafts', 'dashboard_primary', 'dashboard_secondary');	$location = 'normal';	if ( in_array($widget_id, $side_widgets) )		$location = 'side';	add_meta_box( $widget_id, $widget_name , $callback, 'dashboard', $location, 'core' );}function _wp_dashboard_control_callback( $dashboard, $meta_box ) {	echo '<form action="" method="post" class="dashboard-widget-control-form">';	wp_dashboard_trigger_widget_control( $meta_box['id'] );	echo '<p class="submit"><input type="hidden" name="widget_id" value="' . esc_attr($meta_box['id']) . '" /><input type="submit" value="' . esc_attr__( 'Submit' ) . '" /></p>';	echo '</form>';}/** * Displays the dashboard. * * @since unknown */function wp_dashboard() {	global $screen_layout_columns;	$hide2 = $hide3 = $hide4 = '';	switch ( $screen_layout_columns ) {		case 4:			$width = 'width:24.5%;';			break;		case 3:			$width = 'width:32.67%;';			$hide4 = 'display:none;';			break;		case 2:			$width = 'width:49%;';			$hide3 = $hide4 = 'display:none;';			break;		default:			$width = 'width:98%;';			$hide2 = $hide3 = $hide4 = 'display:none;';	}?><div id="dashboard-widgets" class="metabox-holder"><?php	echo "\t<div class='postbox-container' style='$width'>\n";	do_meta_boxes( 'dashboard', 'normal', '' );	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";	do_meta_boxes( 'dashboard', 'side', '' );	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";	do_meta_boxes( 'dashboard', 'column3', '' );	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";	do_meta_boxes( 'dashboard', 'column4', '' );?></div></div><form style="display:none" method="get" action="">	<p><?php	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );?>	</p></form><?php}/* Dashboard Widgets */function wp_dashboard_right_now() {	global $wp_registered_sidebars;	$num_posts = wp_count_posts( 'post' );	$num_pages = wp_count_posts( 'page' );	$num_cats  = wp_count_terms('category');	$num_tags = wp_count_terms('post_tag');	$num_comm = wp_count_comments( );	echo "\n\t".'<div class="table table_content">';	echo "\n\t".'<p class="sub">' . __('Content') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Posts	$num = number_format_i18n( $num_posts->publish );	$text = _n( 'Post', 'Posts', intval($num_posts->publish) );	if ( current_user_can( 'edit_posts' ) ) {		$num = "<a href='edit.php'>$num</a>";		$text = "<a href='edit.php'>$text</a>";	}	echo '<td class="first b b-posts">' . $num . '</td>';	echo '<td class="t posts">' . $text . '</td>';	echo '</tr><tr>';	/* TODO: Show status breakdown on hover	if ( $can_edit_pages && !empty($num_pages->publish) ) { // how many pages is not exposed in feeds.  Don't show if !current_user_can		$post_type_texts[] = '<a href="edit-pages.php">'.sprintf( _n( '%s page', '%s pages', $num_pages->publish ), number_format_i18n( $num_pages->publish ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->draft) ) {		$post_type_texts[] = '<a href="edit.php?post_status=draft">'.sprintf( _n( '%s draft', '%s drafts', $num_posts->draft ), number_format_i18n( $num_posts->draft ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->future) ) {		$post_type_texts[] = '<a href="edit.php?post_status=future">'.sprintf( _n( '%s scheduled post', '%s scheduled posts', $num_posts->future ), number_format_i18n( $num_posts->future ) ).'</a>';	}	if ( current_user_can('publish_posts') && !empty($num_posts->pending) ) {		$pending_text = sprintf( _n( 'There is <a href="%1$s">%2$s post</a> pending your review.', 'There are <a href="%1$s">%2$s posts</a> pending your review.', $num_posts->pending ), 'edit.php?post_status=pending', number_format_i18n( $num_posts->pending ) );	} else {		$pending_text = '';	}	*/	// Pages	$num = number_format_i18n( $num_pages->publish );	$text = _n( 'Page', 'Pages', $num_pages->publish );	if ( current_user_can( 'edit_pages' ) ) {		$num = "<a href='edit.php?post_type=page'>$num</a>";		$text = "<a href='edit.php?post_type=page'>$text</a>";	}	echo '<td class="first b b_pages">' . $num . '</td>';	echo '<td class="t pages">' . $text . '</td>';	echo '</tr><tr>';	// Categories	$num = number_format_i18n( $num_cats );	$text = _n( 'Category', 'Categories', $num_cats );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php?taxonomy=category'>$num</a>";		$text = "<a href='edit-tags.php?taxonomy=category'>$text</a>";	}	echo '<td class="first b b-cats">' . $num . '</td>';	echo '<td class="t cats">' . $text . '</td>';	echo '</tr><tr>';	// Tags	$num = number_format_i18n( $num_tags );	$text = _n( 'Tag', 'Tags', $num_tags );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php'>$num</a>";		$text = "<a href='edit-tags.php'>$text</a>";	}	echo '<td class="first b b-tags">' . $num . '</td>';	echo '<td class="t tags">' . $text . '</td>';	echo "</tr>";	do_action('right_now_content_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="table table_discussion">';	echo "\n\t".'<p class="sub">' . __('Discussion') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Total Comments	$num = '<span class="total-count">' . number_format_i18n($num_comm->total_comments) . '</span>';	$text = _n( 'Comment', 'Comments', $num_comm->total_comments );	if ( current_user_can( 'moderate_comments' ) ) {		$num = '<a href="edit-comments.php">' . $num . '</a>';		$text = '<a href="edit-comments.php">' . $text . '</a>';	}	echo '<td class="b b-comments">' . $num . '</td>';	echo '<td class="last t comments">' . $text . '</td>';	echo '</tr><tr>';	// Approved Comments	$num = '<span class="approved-count">' . number_format_i18n($num_comm->approved) . '</span>';	$text = _nx( 'Approved', 'Approved', $num_comm->approved, 'Right Now' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=approved'>$num</a>";		$text = "<a class='approved' href='edit-comments.php?comment_status=approved'>$text</a>";	}	echo '<td class="b b_approved">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Pending Comments	$num = '<span class="pending-count">' . number_format_i18n($num_comm->moderated) . '</span>';	$text = _n( 'Pending', 'Pending', $num_comm->moderated );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=moderated'>$num</a>";		$text = "<a class='waiting' href='edit-comments.php?comment_status=moderated'>$text</a>";	}	echo '<td class="b b-waiting">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Spam Comments	$num = number_format_i18n($num_comm->spam);	$text = _nx( 'Spam', 'Spam', $num_comm->spam, 'comment' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=spam'><span class='spam-count'>$num</span></a>";		$text = "<a class='spam' href='edit-comments.php?comment_status=spam'>$text</a>";	}	echo '<td class="b b-spam">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>";	do_action('right_now_table_end');	do_action('right_now_discussion_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="versions">';	$ct = current_theme_info();	echo "\n\t<p>";	if ( !empty($wp_registered_sidebars) ) {		$sidebars_widgets = wp_get_sidebars_widgets();		$num_widgets = 0;		foreach ( (array) $sidebars_widgets as $k => $v ) {			if ( 'wp_inactive_widgets' == $k )				continue;			if ( is_array($v) )				$num_widgets = $num_widgets + count($v);		}		$num = number_format_i18n( $num_widgets );		$switch_themes = $ct->title;		if ( current_user_can( 'switch_themes') ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			$switch_themes = '<a href="themes.php">' . $switch_themes . '</a>';		}		if ( current_user_can( 'edit_theme_options' ) ) {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widget</a></span>', 'Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widgets</a></span>', $num_widgets), $switch_themes, $num);		} else {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b">%2$s Widget</span>', 'Theme <span class="b">%1$s</span> with <span class="b">%2$s Widgets</span>', $num_widgets), $switch_themes, $num);		}	} else {		if ( current_user_can( 'switch_themes' ) ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			printf( __('Theme <span class="b"><a href="themes.php">%1$s</a></span>'), $ct->title );		} else {			printf( __('Theme <span class="b">%1$s</span>'), $ct->title );		}	}	echo '</p>';	update_right_now_message();	echo "\n\t".'<br class="clear" /></div>';	do_action( 'rightnow_end' );	do_action( 'activity_box_end' );}function wp_dashboard_quick_press_output() {	global $post_ID;	$drafts = false;	if ( 'post' === strtolower( $_SERVER['REQUEST_METHOD'] ) && isset( $_POST['action'] ) && 0 === strpos( $_POST['action'], 'post-quickpress' ) && (int) $_POST['post_ID'] ) {		$view = get_permalink( $_POST['post_ID'] );		$edit = esc_url( get_edit_post_link( $_POST['post_ID'] ) );		if ( 'post-quickpress-publish' == $_POST['action'] ) {			if ( current_user_can('publish_posts') )				printf( '<div class="updated"><p>' . __( 'Post published. <a href="%s">View post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( $view ), $edit );			else				printf( '<div class="updated"><p>' . __( 'Post submitted. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );		} else {			printf( '<div class="updated"><p>' . __( 'Draft saved. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );			$drafts_query = new WP_Query( array(				'post_type' => 'post',				'post_status' => 'draft',				'author' => $GLOBALS['current_user']->ID,				'posts_per_page' => 1,				'orderby' => 'modified',				'order' => 'DESC'			) );			if ( $drafts_query->posts )				$drafts =& $drafts_query->posts;		}		printf('<p class="textright">' . __('You can also try %s, easy blogging from anywhere on the Web.') . '</p>', '<a href="' . esc_url( admin_url( 'tools.php' ) ) . '">' . __('Press This') . '</a>' );		$_REQUEST = array(); // hack for get_default_post_to_edit()	}	/* Check if a new auto-draft (= no new post_ID) is needed or if the old can be used */	$last_post_id = (int) get_user_option( 'dashboard_quick_press_last_post_id' ); // Get the last post_ID	if ( $last_post_id ) {		$post = get_post( $last_post_id );		if ( empty( $post ) || $post->post_status != 'auto-draft' ) { // auto-draft doesn't exists anymore			$post = get_default_post_to_edit('post', true);			update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID		} else {			$post->post_title = ''; // Remove the auto draft title		}	} else {		$post = get_default_post_to_edit('post', true);		update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID	}	$post_ID = (int) $post->ID;?>	<form name="post" action="<?php echo esc_url( admin_url( 'post.php' ) ); ?>" method="post" id="quick-press">		<h4 id="quick-post-title"><label for="title"><?php _e('Title') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="post_title" id="title" tabindex="1" autocomplete="off" value="<?php echo esc_attr( $post->post_title ); ?>" />		</div>		<?php if ( current_user_can( 'upload_files' ) ) : ?>		<div id="media-buttons" class="hide-if-no-js">			<?php do_action( 'media_buttons' ); ?>		</div>		<?php endif; ?>		<h4 id="content-label"><label for="content"><?php _e('Content') ?></label></h4>		<div class="textarea-wrap">			<textarea name="content" id="content" class="mceEditor" rows="3" cols="15" tabindex="2"><?php echo $post->post_content; ?></textarea>		</div>		<script type="text/javascript">edCanvas = document.getElementById('content');edInsertContent = null;</script>		<h4><label for="tags-input"><?php _e('Tags') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="tags_input" id="tags-input" tabindex="3" value="<?php echo get_tags_to_edit( $post->ID ); ?>" />		</div>		<p class="submit">			<input type="hidden" name="action" id="quickpost-action" value="post-quickpress-save" />			<input type="hidden" name="quickpress_post_ID" value="<?php echo $post_ID; ?>" />			<input type="hidden" name="post_type" value="post" />			<?php wp_nonce_field('add-post'); ?>			<input type="submit" name="save" id="save-post" class="button" tabindex="4" value="<?php esc_attr_e('Save Draft'); ?>" />			<input type="reset" value="<?php esc_attr_e( 'Reset' ); ?>" class="button" />			<span id="publishing-action">				<input type="submit" name="publish" id="publish" accesskey="p" tabindex="5" class="button-primary" value="<?php current_user_can('publish_posts') ? esc_attr_e('Publish') : esc_attr_e('Submit for Review'); ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" />			</span>			<br class="clear" />		</p>	</form><?php	if ( $drafts )		wp_dashboard_recent_drafts( $drafts );}function wp_dashboard_quick_press() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_recent_drafts( $drafts = false ) {	if ( !$drafts ) {		$drafts_query = new WP_Query( array(			'post_type' => 'post',			'post_status' => 'draft',			'author' => $GLOBALS['current_user']->ID,			'posts_per_page' => 5,			'orderby' => 'modified',			'order' => 'DESC'		) );		$drafts =& $drafts_query->posts;	}	if ( $drafts && is_array( $drafts ) ) {		$list = array();		foreach ( $drafts as $draft ) {			$url = get_edit_post_link( $draft->ID );			$title = _draft_or_post_title( $draft->ID );			$item = "<h4><a href='$url' title='" . sprintf( __( 'Edit &#8220;%s&#8221;' ), esc_attr( $title ) ) . "'>" . esc_html($title) . "</a> <abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'>" . get_the_time( get_option( 'date_format' ), $draft ) . '</abbr></h4>';			if ( $the_content = preg_split( '#\s#', strip_tags( $draft->post_content ), 11, PREG_SPLIT_NO_EMPTY ) )				$item .= '<p>' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 < count( $the_content ) ? '&hellip;' : '' ) . '</p>';			$list[] = $item;		}?>	<ul>		<li><?php echo join( "</li>\n<li>", $list ); ?></li>	</ul>	<p class="textright"><a href="edit.php?post_status=draft" class="button"><?php _e('View all'); ?></a></p><?php	} else {		_e('There are no drafts at the moment');	}}/** * Display recent comments dashboard widget content. * * @since unknown */function wp_dashboard_recent_comments() {	global $wpdb;	if ( current_user_can('edit_posts') )		$allowed_states = array('0', '1');	else		$allowed_states = array('1');	// Select all comment types and filter out spam later for better query performance.	$comments = array();	$start = 0;	$widgets = get_option( 'dashboard_widget_options' );	if ( isset( $widgets['dashboard_recent_comments'] ) && isset( $widgets['dashboard_recent_comments']['items'] ) )		$total_items = (int) $widgets['dashboard_recent_comments']['items'];	else		$total_items = 5;	while ( count( $comments ) < 5 && $possible = $wpdb->get_results( "SELECT * FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {		foreach ( $possible as $comment ) {			if ( count( $comments ) >= $total_items )				break;			if ( in_array( $comment->comment_approved, $allowed_states ) && current_user_can( 'read_post', $comment->comment_post_ID ) )				$comments[] = $comment;		}		$start = $start + 50;	}	if ( $comments ) :?>		<div id="the-comment-list" class="list:comment"><?php		foreach ( $comments as $comment )			_wp_dashboard_recent_comments_row( $comment );?>		</div><?php		if ( current_user_can('edit_posts') ) { ?>			<p class="textright"><a href="edit-comments.php" class="button"><?php _e('View all'); ?></a></p><?php	}		wp_comment_reply( -1, false, 'dashboard', false );		wp_comment_trashnotice();	else :?>	<p><?php _e( 'No comments yet.' ); ?></p><?php	endif; // $comments;}function _wp_dashboard_recent_comments_row( &$comment, $show_date = true ) {	$GLOBALS['comment'] =& $comment;	$comment_post_url = get_edit_post_link( $comment->comment_post_ID );	$comment_post_title = strip_tags(get_the_title( $comment->comment_post_ID ));	$comment_post_link = "<a href='$comment_post_url'>$comment_post_title</a>";	$comment_link = '<a class="comment-link" href="' . esc_url(get_comment_link()) . '">#</a>';	$actions_string = '';	if ( current_user_can('edit_post', $comment->comment_post_ID) ) {		// preorder it: Approve | Reply | Edit | Spam | Trash		$actions = array(			'approve' => '', 'unapprove' => '',			'reply' => '',			'edit' => '',			'spam' => '',			'trash' => '', 'delete' => ''		);		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';		$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';		$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . __('Edit comment') . "'>". __('Edit') . '</a>';		$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$comment->comment_post_ID.'\');return false;" class="vim-r hide-if-no-js" title="'.__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';		$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '</a>';		if ( !EMPTY_TRASH_DAYS )			$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';		else			$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . __( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';		$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';			// Reply and quickedit need a hide-if-no-js span			if ( 'reply' == $action || 'quickedit' == $action )				$action .= ' hide-if-no-js';			$actions_string .= "<span class='$action'>$sep$link</span>";		}	}?>		<div id="comment-<?php echo $comment->comment_ID; ?>" <?php comment_class( array( 'comment-item', wp_get_comment_status($comment->comment_ID) ) ); ?>>			<?php if ( !$comment->comment_type || 'comment' == $comment->comment_type ) : ?>			<?php echo get_avatar( $comment, 50 ); ?>			<div class="dashboard-comment-wrap">			<h4 class="comment-meta">				<?php printf( /* translators: 1: comment author, 2: post link, 3: notification if the comment is pending */__( 'From %1$s on %2$s%3$s' ),					'<cite class="comment-author">' . get_comment_author_link() . '</cite>', $comment_post_link.' '.$comment_link, ' <span class="approve">' . __( '[Pending]' ) . '</span>' ); ?>			</h4>			<?php			else :				switch ( $comment->comment_type ) :				case 'pingback' :					$type = __( 'Pingback' );					break;				case 'trackback' :					$type = __( 'Trackback' );					break;				default :					$type = ucwords( $comment->comment_type );				endswitch;				$type = esc_html( $type );			?>			<div class="dashboard-comment-wrap">			<?php /* translators: %1$s is type of comment, %2$s is link to the post */ ?>			<h4 class="comment-meta"><?php printf( _x( '%1$s on %2$s', 'dashboard' ), "<strong>$type</strong>", $comment_post_link." ".$comment_link ); ?></h4>			<p class="comment-author"><?php comment_author_link(); ?></p>			<?php endif; // comment_type ?>			<blockquote><p><?php comment_excerpt(); ?></p></blockquote>			<p class="row-actions"><?php echo $actions_string; ?></p>			</div>		</div><?php}/** * The recent comments dashboard widget control. * * @since 3.0.0 */function wp_dashboard_recent_comments_control() {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options['dashboard_recent_comments']) )		$widget_options['dashboard_recent_comments'] = array();	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-recent-comments']) ) {		$number = (int) stripslashes($_POST['widget-recent-comments']['items']);		if ( $number < 1 || $number > 30 )			$number = 5;		$widget_options['dashboard_recent_comments']['items'] = $number;		update_option( 'dashboard_widget_options', $widget_options );	}	$number = isset( $widget_options['dashboard_recent_comments']['items'] ) ? (int) $widget_options['dashboard_recent_comments']['items'] : '';	echo '<p><label for="comments-number">' . __('Number of comments to show:') . '</label>';	echo '<input id="comments-number" name="widget-recent-comments[items]" type="text" value="' . $number . '" size="3" /> <small>' . __( '(at most 30)' ) . '</small></p>';}function wp_dashboard_incoming_links() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display incoming links dashboard widget content. * * @since unknown */function wp_dashboard_incoming_links_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_incoming_links'], EXTR_SKIP );	$rss = fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p>';		}		return;	}	if ( !$rss->get_item_quantity() ) {		echo '<p>' . __('This dashboard widget queries <a href="http://blogsearch.google.com/">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.') . "</p>\n";		$rss->__destruct();		unset($rss);		return;	}	echo "<ul>\n";	if ( !isset($items) )		$items = 10;	foreach ( $rss->get_items(0, $items) as $item ) {		$publisher = '';		$site_link = '';		$link = '';		$content = '';		$date = '';		$link = esc_url( strip_tags( $item->get_link() ) );		$author = $item->get_author();		if ( $author ) {			$site_link = esc_url( strip_tags( $author->get_link() ) );			if ( !$publisher = esc_html( strip_tags( $author->get_name() ) ) )				$publisher = __( 'Somebody' );		} else {		  $publisher = __( 'Somebody' );		}		if ( $site_link )			$publisher = "<a href='$site_link'>$publisher</a>";		else			$publisher = "<strong>$publisher</strong>";		$content = $item->get_content();		$content = wp_html_excerpt($content, 50) . ' ...';		if ( $link )			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here <a href="%2$s">saying</a>, "%3$s"' );		else			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here saying, "%3$s"' );		if ( $show_date ) {			if ( $show_author || $show_summary )				/* translators: incoming links feed, %4$s is the date */				$text .= ' ' . __( 'on %4$s' );			$date = esc_html( strip_tags( $item->get_date() ) );			$date = strtotime( $date );			$date = gmdate( get_option( 'date_format' ), $date );		}		echo "\t<li>" . sprintf( $text, $publisher, $link, $content, $date ) . "</li>\n";	}	echo "</ul>\n";	$rss->__destruct();	unset($rss);}function wp_dashboard_incoming_links_control() {	wp_dashboard_rss_control( 'dashboard_incoming_links', array( 'title' => false, 'show_summary' => false, 'show_author' => false ) );}function wp_dashboard_primary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_primary_control() {	wp_dashboard_rss_control( 'dashboard_primary' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param int $widget_id */function wp_dashboard_rss_output( $widget_id ) {	$widgets = get_option( 'dashboard_widget_options' );	echo '<div class="rss-widget">';	wp_widget_rss_output( $widgets[$widget_id] );	echo "</div>";}function wp_dashboard_secondary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_secondary_control() {	wp_dashboard_rss_control( 'dashboard_secondary' );}/** * Display secondary dashboard RSS widget feed. * * @since unknown * * @return unknown */function wp_dashboard_secondary_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_secondary'], EXTR_SKIP );	$rss = @fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<div class="rss-widget"><p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p></div>';		}	} elseif ( !$rss->get_item_quantity() ) {		$rss->__destruct();		unset($rss);		return false;	} else {		echo '<div class="rss-widget">';		wp_widget_rss_output( $rss, $widgets['dashboard_secondary'] );		echo '</div>';		$rss->__destruct();		unset($rss);	}}function wp_dashboard_plugins() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display plugins most popular, newest plugins, and recently updated widget text. * * @since unknown */function wp_dashboard_plugins_output() {	$popular = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/popular/' );	$new     = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/new/' );	$updated = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/updated/' );	if ( false === $plugin_slugs = get_transient( 'plugin_slugs' ) ) {		$plugin_slugs = array_keys( get_plugins() );		set_transient( 'plugin_slugs', $plugin_slugs, 86400 );	}	foreach ( array( 'popular' => __('Most Popular'), 'new' => __('Newest Plugins'), 'updated' => __('Recently Updated') ) as $feed => $label ) {		if ( is_wp_error($$feed) || !$$feed->get_item_quantity() )			continue;		$items = $$feed->get_items(0, 5);		// Pick a random, non-installed plugin		while ( true ) {			// Abort this foreach loop iteration if there's no plugins left of this type			if ( 0 == count($items) )				continue 2;			$item_key = array_rand($items);			$item = $items[$item_key];			list($link, $frag) = explode( '#', $item->get_link() );			$link = esc_url($link);			if ( preg_match( '|/([^/]+?)/?$|', $link, $matches ) )				$slug = $matches[1];			else {				unset( $items[$item_key] );				continue;			}			// Is this random plugin's slug already installed? If so, try again.			reset( $plugin_slugs );			foreach ( $plugin_slugs as $plugin_slug ) {				if ( $slug == substr( $plugin_slug, 0, strlen( $slug ) ) ) {					unset( $items[$item_key] );					continue 2;				}			}			// If we get to this point, then the random plugin isn't installed and we can stop the while().			break;		}		// Eliminate some common badly formed plugin descriptions		while ( ( null !== $item_key = array_rand($items) ) && false !== strpos( $items[$item_key]->get_description(), 'Plugin Name:' ) )			unset($items[$item_key]);		if ( !isset($items[$item_key]) )			continue;		// current bbPress feed item titles are: user on "topic title"		if ( preg_match( '/&quot;(.*)&quot;/s', $item->get_title(), $matches ) )			$title = $matches[1];		else // but let's make it forward compatible if things change			$title = $item->get_title();		$title = esc_html( $title );		$description = esc_html( strip_tags(@html_entity_decode($item->get_description(), ENT_QUOTES, get_option('blog_charset'))) );		$ilink = wp_nonce_url('plugin-install.php?tab=plugin-information&plugin=' . $slug, 'install-plugin_' . $slug) .							'&amp;TB_iframe=true&amp;width=600&amp;height=800';		echo "<h4>$label</h4>\n";		echo "<h5><a href='$link'>$title</a></h5>&nbsp;<span>(<a href='$ilink' class='thickbox' title='$title'>" . __( 'Install' ) . "</a>)</span>\n";		echo "<p>$description</p>\n";		$$feed->__destruct();		unset($$feed);	}}/** * Checks to see if all of the feed url in $check_urls are cached. * * If $check_urls is empty, look for the rss feed url found in the dashboard * widget optios of $widget_id. If cached, call $callback, a function that * echoes out output for this widget. If not cache, echo a "Loading..." stub * which is later replaced by AJAX call (see top of /wp-admin/index.php) * * @since unknown * * @param int $widget_id * @param callback $callback * @param array $check_urls RSS feeds * @return bool False on failure. True on success. */function wp_dashboard_cached_rss_widget( $widget_id, $callback, $check_urls = array() ) {	$loading = '<p class="widget-loading">' . __( 'Loading&#8230;' ) . '</p>';	if ( empty($check_urls) ) {		$widgets = get_option( 'dashboard_widget_options' );		if ( empty($widgets[$widget_id]['url']) ) {			echo $loading;			return false;		}		$check_urls = array( $widgets[$widget_id]['url'] );	}	include_once ABSPATH . WPINC . '/class-feed.php';	foreach ( $check_urls as $check_url ) {		$cache = new WP_Feed_Cache_Transient('', md5($check_url), '');		if ( ! $cache->load() ) {			echo $loading;			return false;		}	}	if ( $callback && is_callable( $callback ) ) {		$args = array_slice( func_get_args(), 2 );		array_unshift( $args, $widget_id );		call_user_func_array( $callback, $args );	}	return true;}/* Dashboard Widgets Controls */// Calls widget_control callback/** * Calls widget control callback. * * @since unknown * * @param int $widget_control_id Registered Widget ID. */function wp_dashboard_trigger_widget_control( $widget_control_id = false ) {	global $wp_dashboard_control_callbacks;	if ( is_scalar($widget_control_id) && $widget_control_id && isset($wp_dashboard_control_callbacks[$widget_control_id]) && is_callable($wp_dashboard_control_callbacks[$widget_control_id]) ) {		call_user_func( $wp_dashboard_control_callbacks[$widget_control_id], '', array( 'id' => $widget_control_id, 'callback' => $wp_dashboard_control_callbacks[$widget_control_id] ) );	}}/** * The RSS dashboard widget control. * * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data * from RSS-type widgets. * * @since unknown * * @param string widget_id * @param array form_inputs */function wp_dashboard_rss_control( $widget_id, $form_inputs = array() ) {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options[$widget_id]) )		$widget_options[$widget_id] = array();	$number = 1; // Hack to use wp_widget_rss_form()	$widget_options[$widget_id]['number'] = $number;	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-rss'][$number]) ) {		$_POST['widget-rss'][$number] = stripslashes_deep( $_POST['widget-rss'][$number] );		$widget_options[$widget_id] = wp_widget_rss_process( $_POST['widget-rss'][$number] );		// title is optional.  If black, fill it if possible		if ( !$widget_options[$widget_id]['title'] && isset($_POST['widget-rss'][$number]['title']) ) {			$rss = fetch_feed($widget_options[$widget_id]['url']);			if ( is_wp_error($rss) ) {				$widget_options[$widget_id]['title'] = htmlentities(__('Unknown Feed'));			} else {				$widget_options[$widget_id]['title'] = htmlentities(strip_tags($rss->get_title()));				$rss->__destruct();				unset($rss);			}		}		update_option( 'dashboard_widget_options', $widget_options );	}	wp_widget_rss_form( $widget_options[$widget_id], $form_inputs );}/** * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS). */function wp_dashboard_empty() {}?>
<?php/** * WordPress Query API * * The query API attempts to get which part of WordPress to the user is on. It * also provides functionality to getting URL query information. * * @link http://codex.wordpress.org/The_Loop More information on The Loop. * * @package WordPress * @subpackage Query *//** * Retrieve variable in the WP_Query class. * * @see WP_Query::get() * @since 1.5.0 * @uses $wp_query * * @param string $var The variable key to retrieve. * @return mixed */function get_query_var($var) {	global $wp_query;	return $wp_query->get($var);}/** * Set query variable. * * @see WP_Query::set() * @since 2.2.0 * @uses $wp_query * * @param string $var Query variable key. * @param mixed $value * @return null */function set_query_var($var, $value) {	global $wp_query;	return $wp_query->set($var, $value);}/** * Set up The Loop with query parameters. * * This will override the current WordPress Loop and shouldn't be used more than * once. This must not be used within the WordPress Loop. * * @since 1.5.0 * @uses $wp_query * * @param string $query * @return array List of posts */function &query_posts($query) {	unset($GLOBALS['wp_query']);	$GLOBALS['wp_query'] =& new WP_Query();	return $GLOBALS['wp_query']->query($query);}/** * Destroy the previous query and set up a new query. * * This should be used after {@link query_posts()} and before another {@link * query_posts()}. This will remove obscure bugs that occur when the previous * wp_query object is not destroyed properly before another is set up. * * @since 2.3.0 * @uses $wp_query */function wp_reset_query() {	unset($GLOBALS['wp_query']);	$GLOBALS['wp_query'] =& $GLOBALS['wp_the_query'];	wp_reset_postdata();}/** * After looping through a separate query, this function restores * the $post global to the current post in the main query * * @since 3.0.0 * @uses $wp_query */function wp_reset_postdata() {	global $wp_query;	if ( !empty($wp_query->post) ) {		$GLOBALS['post'] = $wp_query->post;		setup_postdata($wp_query->post);	}}/* * Query type checks. *//** * Is query requesting an archive page. * * @since 1.5.0 * @uses $wp_query * * @return bool True if page is archive. */function is_archive() {	global $wp_query;	return $wp_query->is_archive;}/** * Is query requesting an attachment page. * * @since 2.0.0 * @uses $wp_query * * @return bool True if page is attachment. */function is_attachment() {	global $wp_query;	return $wp_query->is_attachment;}/** * Is query requesting an author page. * * If the $author parameter is specified then the check will be expanded to * include whether the queried author matches the one given in the parameter. * You can match against integers and against strings. * * If matching against an integer, the ID should be used of the author for the * test. If the $author is an ID and matches the author page user ID, then * 'true' will be returned. * * If matching against strings, then the test will be matched against both the * nickname and user nicename and will return true on success. * * @since 1.5.0 * @uses $wp_query * * @param string|int $author Optional. Is current page this author. * @return bool True if page is author or $author (if set). */function is_author($author = '') {	global $wp_query;	if ( !$wp_query->is_author )		return false;	if ( empty($author) )		return true;	$author_obj = $wp_query->get_queried_object();	$author = (array) $author;	if ( in_array( $author_obj->ID, $author ) )		return true;	elseif ( in_array( $author_obj->nickname, $author ) )		return true;	elseif ( in_array( $author_obj->user_nicename, $author ) )		return true;	return false;}/** * Whether current page query contains a category name or given category name. * * The category list can contain category IDs, names, or category slugs. If any * of them are part of the query, then it will return true. * * @since 1.5.0 * @uses $wp_query * * @param string|array $category Optional. * @return bool */function is_category($category = '') {	global $wp_query;	if ( !$wp_query->is_category )		return false;	if ( empty($category) )		return true;	$cat_obj = $wp_query->get_queried_object();	$category = (array) $category;	if ( in_array( $cat_obj->term_id, $category ) )		return true;	elseif ( in_array( $cat_obj->name, $category ) )		return true;	elseif ( in_array( $cat_obj->slug, $category ) )		return true;	return false;}/** * Whether the current page query has the given tag slug or contains tag. * * @since 2.3.0 * @uses $wp_query * * @param string|array $slug Optional. Single tag or list of tags to check for. * @return bool */function is_tag( $slug = '' ) {	global $wp_query;	if ( !$wp_query->is_tag )		return false;	if ( empty( $slug ) )		return true;	$tag_obj = $wp_query->get_queried_object();	$slug = (array) $slug;	if ( in_array( $tag_obj->slug, $slug ) )		return true;	return false;}/** * Whether the current query is for the given taxonomy and/or term. * * If no taxonomy argument is set, returns true if any taxonomy is queried. * If the taxonomy argument is passed but no term argument, returns true *    if the taxonomy or taxonomies in the argument are being queried. * If both taxonomy and term arguments are passed, returns true *    if the current query is for a term contained in the terms argument *    which has a taxonomy contained in the taxonomy argument. * * @since 2.5.0 * @uses $wp_query * * @param string|array $taxonomy Optional. Taxonomy slug or slugs to check in current query. * @param int|array|string $term. Optional. A single or array of, The term's ID, Name or Slug * @return bool */function is_tax( $taxonomy = '', $term = '' ) {	global $wp_query, $wp_taxonomies;	$queried_object = $wp_query->get_queried_object();	$tax_array = array_intersect(array_keys($wp_taxonomies), (array) $taxonomy);	$term_array = (array) $term;	if ( !$wp_query->is_tax )		return false;	if ( empty( $taxonomy ) )		return true;	if ( empty( $term ) ) // Only a Taxonomy provided		return isset($queried_object->taxonomy) && count( $tax_array ) && in_array($queried_object->taxonomy, $tax_array);	return isset($queried_object->term_id) &&			count(array_intersect(				array($queried_object->term_id, $queried_object->name, $queried_object->slug),				$term_array			));}/** * Whether the current URL is within the comments popup window. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_comments_popup() {	global $wp_query;	return $wp_query->is_comments_popup;}/** * Whether current URL is based on a date. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_date() {	global $wp_query;	return $wp_query->is_date;}/** * Whether current blog URL contains a day. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_day() {	global $wp_query;	return $wp_query->is_day;}/** * Whether current page query is feed URL. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_feed() {	global $wp_query;	return $wp_query->is_feed;}/** * Whether current page query is comment feed URL. * * @since 3.0.0 * @uses $wp_query * * @return bool */function is_comment_feed() {	global $wp_query;	return $wp_query->is_comment_feed;}/** * Whether current page query is the front of the site. * * @since 2.5.0 * @uses is_home() * @uses get_option() * * @return bool True, if front of site. */function is_front_page() {	// most likely case	if ( 'posts' == get_option('show_on_front') && is_home() )		return true;	elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') && is_page(get_option('page_on_front')) )		return true;	else		return false;}/** * Whether current page view is the blog homepage. * * This is the page which is showing the time based blog content of your site * so if you set a static page for the front page of your site then this will * only be true on the page which you set as the "Posts page" in Reading Settings. * * @since 1.5.0 * @uses $wp_query * * @return bool True if blog view homepage. */function is_home() {	global $wp_query;	return $wp_query->is_home;}/** * Whether current page query contains a month. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_month() {	global $wp_query;	return $wp_query->is_month;}/** * Whether query is page or contains given page(s). * * Calls the function without any parameters will only test whether the current * query is of the page type. Either a list or a single item can be tested * against for whether the query is a page and also is the value or one of the * values in the page parameter. * * The parameter can contain the page ID, page title, or page name. The * parameter can also be an array of those three values. * * @since 1.5.0 * @uses $wp_query * * @param mixed $page Either page or list of pages to test against. * @return bool */function is_page($page = '') {	global $wp_query;	if ( !$wp_query->is_page )		return false;	if ( empty($page) )		return true;	$page_obj = $wp_query->get_queried_object();	$page = (array) $page;	if ( in_array( $page_obj->ID, $page ) )		return true;	elseif ( in_array( $page_obj->post_title, $page ) )		return true;	else if ( in_array( $page_obj->post_name, $page ) )		return true;	return false;}/** * Whether query contains multiple pages for the results. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_paged() {	global $wp_query;	return $wp_query->is_paged;}/** * Whether the current page was created by a plugin. * * The plugin can set this by using the global $plugin_page and setting it to * true. * * @since 1.5.0 * @global bool $plugin_page Used by plugins to tell the query that current is a plugin page. * * @return bool */function is_plugin_page() {	global $plugin_page;	if ( isset($plugin_page) )		return true;	return false;}/** * Whether the current query is preview of post or page. * * @since 2.0.0 * @uses $wp_query * * @return bool */function is_preview() {	global $wp_query;	return $wp_query->is_preview;}/** * Whether the current query post is robots. * * @since 2.1.0 * @uses $wp_query * * @return bool */function is_robots() {	global $wp_query;	return $wp_query->is_robots;}/** * Whether current query is the result of a user search. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_search() {	global $wp_query;	return $wp_query->is_search;}/** * Whether the current page query is single page. * * The parameter can contain the post ID, post title, or post name. The * parameter can also be an array of those three values. * * This applies to other post types, attachments, pages, posts. Just means that * the current query has only a single object. * * @since 1.5.0 * @uses $wp_query * * @param mixed $post Either post or list of posts to test against. * @return bool */function is_single($post = '') {	global $wp_query;	if ( !$wp_query->is_single )		return false;	if ( empty($post) )		return true;	$post_obj = $wp_query->get_queried_object();	$post = (array) $post;	if ( in_array( $post_obj->ID, $post ) )		return true;	elseif ( in_array( $post_obj->post_title, $post ) )		return true;	elseif ( in_array( $post_obj->post_name, $post ) )		return true;	return false;}/** * Whether is single post, is a page, or is an attachment. * * @since 1.5.0 * @uses $wp_query * * @param string|array $post_types Optional. Post type or types to check in current query. * @return bool */function is_singular($post_types = '') {	global $wp_query;	if ( empty($post_types) || !$wp_query->is_singular )		return $wp_query->is_singular;	$post_obj = $wp_query->get_queried_object();	return in_array($post_obj->post_type, (array) $post_types);}/** * Whether the query contains a time. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_time() {	global $wp_query;	return $wp_query->is_time;}/** * Whether the query is a trackback. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_trackback() {	global $wp_query;	return $wp_query->is_trackback;}/** * Whether the query contains a year. * * @since 1.5.0 * @uses $wp_query * * @return bool */function is_year() {	global $wp_query;	return $wp_query->is_year;}/** * Whether current page query is a 404 and no results for WordPress query. * * @since 1.5.0 * @uses $wp_query * * @return bool True, if nothing is found matching WordPress Query. */function is_404() {	global $wp_query;	return $wp_query->is_404;}/* * The Loop.  Post loop control. *//** * Whether current WordPress query has results to loop over. * * @see WP_Query::have_posts() * @since 1.5.0 * @uses $wp_query * * @return bool */function have_posts() {	global $wp_query;	return $wp_query->have_posts();}/** * Whether the caller is in the Loop. * * @since 2.0.0 * @uses $wp_query * * @return bool True if caller is within loop, false if loop hasn't started or ended. */function in_the_loop() {	global $wp_query;	return $wp_query->in_the_loop;}/** * Rewind the loop posts. * * @see WP_Query::rewind_posts() * @since 1.5.0 * @uses $wp_query * * @return null */function rewind_posts() {	global $wp_query;	return $wp_query->rewind_posts();}/** * Iterate the post index in the loop. * * @see WP_Query::the_post() * @since 1.5.0 * @uses $wp_query */function the_post() {	global $wp_query;	$wp_query->the_post();}/* * Comments loop. *//** * Whether there are comments to loop over. * * @see WP_Query::have_comments() * @since 2.2.0 * @uses $wp_query * * @return bool */function have_comments() {	global $wp_query;	return $wp_query->have_comments();}/** * Iterate comment index in the comment loop. * * @see WP_Query::the_comment() * @since 2.2.0 * @uses $wp_query * * @return object */function the_comment() {	global $wp_query;	return $wp_query->the_comment();}/* * WP_Query *//** * The WordPress Query class. * * @link http://codex.wordpress.org/Function_Reference/WP_Query Codex page. * * @since 1.5.0 */class WP_Query {	/**	 * Query string	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $query;	/**	 * Query search variables set by the user.	 *	 * @since 1.5.0	 * @access public	 * @var array	 */	var $query_vars = array();	/**	 * Holds the data for a single object that is queried.	 *	 * Holds the contents of a post, page, category, attachment.	 *	 * @since 1.5.0	 * @access public	 * @var object|array	 */	var $queried_object;	/**	 * The ID of the queried object.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $queried_object_id;	/**	 * Get post database query.	 *	 * @since 2.0.1	 * @access public	 * @var string	 */	var $request;	/**	 * List of posts.	 *	 * @since 1.5.0	 * @access public	 * @var array	 */	var $posts;	/**	 * The amount of posts for the current query.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $post_count = 0;	/**	 * Index of the current item in the loop.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $current_post = -1;	/**	 * Whether the loop has started and the caller is in the loop.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $in_the_loop = false;	/**	 * The current post ID.	 *	 * @since 1.5.0	 * @access public	 * @var int	 */	var $post;	/**	 * The list of comments for current post.	 *	 * @since 2.2.0	 * @access public	 * @var array	 */	var $comments;	/**	 * The amount of comments for the posts.	 *	 * @since 2.2.0	 * @access public	 * @var int	 */	var $comment_count = 0;	/**	 * The index of the comment in the comment loop.	 *	 * @since 2.2.0	 * @access public	 * @var int	 */	var $current_comment = -1;	/**	 * Current comment ID.	 *	 * @since 2.2.0	 * @access public	 * @var int	 */	var $comment;	/**	 * Amount of posts if limit clause was not used.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $found_posts = 0;	/**	 * The amount of pages.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $max_num_pages = 0;	/**	 * The amount of comment pages.	 *	 * @since 2.7.0	 * @access public	 * @var int	 */	var $max_num_comment_pages = 0;	/**	 * Set if query is single post.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_single = false;	/**	 * Set if query is preview of blog.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $is_preview = false;	/**	 * Set if query returns a page.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_page = false;	/**	 * Set if query is an archive list.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_archive = false;	/**	 * Set if query is part of a date.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_date = false;	/**	 * Set if query contains a year.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_year = false;	/**	 * Set if query contains a month.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_month = false;	/**	 * Set if query contains a day.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_day = false;	/**	 * Set if query contains time.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_time = false;	/**	 * Set if query contains an author.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_author = false;	/**	 * Set if query contains category.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_category = false;	/**	 * Set if query contains tag.	 *	 * @since 2.3.0	 * @access public	 * @var bool	 */	var $is_tag = false;	/**	 * Set if query contains taxonomy.	 *	 * @since 2.5.0	 * @access public	 * @var bool	 */	var $is_tax = false;	/**	 * Set if query was part of a search result.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_search = false;	/**	 * Set if query is feed display.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_feed = false;	/**	 * Set if query is comment feed display.	 *	 * @since 2.2.0	 * @access public	 * @var bool	 */	var $is_comment_feed = false;	/**	 * Set if query is trackback.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_trackback = false;	/**	 * Set if query is blog homepage.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_home = false;	/**	 * Set if query couldn't found anything.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_404 = false;	/**	 * Set if query is within comments popup window.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_comments_popup = false;	/**	 * Set if query is part of administration page.	 *	 * @since 1.5.0	 * @access public	 * @var bool	 */	var $is_admin = false;	/**	 * Set if query is an attachment.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $is_attachment = false;	/**	 * Set if is single, is a page, or is an attachment.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $is_singular = false;	/**	 * Set if query is for robots.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $is_robots = false;	/**	 * Set if query contains posts.	 *	 * Basically, the homepage if the option isn't set for the static homepage.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $is_posts_page = false;	/**	 * Resets query flags to false.	 *	 * The query flags are what page info WordPress was able to figure out.	 *	 * @since 2.0.0	 * @access private	 */	function init_query_flags() {		$this->is_single = false;		$this->is_page = false;		$this->is_archive = false;		$this->is_date = false;		$this->is_year = false;		$this->is_month = false;		$this->is_day = false;		$this->is_time = false;		$this->is_author = false;		$this->is_category = false;		$this->is_tag = false;		$this->is_tax = false;		$this->is_search = false;		$this->is_feed = false;		$this->is_comment_feed = false;		$this->is_trackback = false;		$this->is_home = false;		$this->is_404 = false;		$this->is_paged = false;		$this->is_admin = false;		$this->is_attachment = false;		$this->is_singular = false;		$this->is_robots = false;		$this->is_posts_page = false;	}	/**	 * Initiates object properties and sets default values.	 *	 * @since 1.5.0	 * @access public	 */	function init() {		unset($this->posts);		unset($this->query);		$this->query_vars = array();		unset($this->queried_object);		unset($this->queried_object_id);		$this->post_count = 0;		$this->current_post = -1;		$this->in_the_loop = false;		$this->init_query_flags();	}	/**	 * Reparse the query vars.	 *	 * @since 1.5.0	 * @access public	 */	function parse_query_vars() {		$this->parse_query('');	}	/**	 * Fills in the query variables, which do not exist within the parameter.	 *	 * @since 2.1.0	 * @access public	 *	 * @param array $array Defined query variables.	 * @return array Complete query variables with undefined ones filled in empty.	 */	function fill_query_vars($array) {		$keys = array(			'error'			, 'm'			, 'p'			, 'post_parent'			, 'subpost'			, 'subpost_id'			, 'attachment'			, 'attachment_id'			, 'name'			, 'static'			, 'pagename'			, 'page_id'			, 'second'			, 'minute'			, 'hour'			, 'day'			, 'monthnum'			, 'year'			, 'w'			, 'category_name'			, 'tag'			, 'cat'			, 'tag_id'			, 'author_name'			, 'feed'			, 'tb'			, 'paged'			, 'comments_popup'			, 'meta_key'			, 'meta_value'			, 'preview'			, 's'			, 'sentence'		);		foreach ( $keys as $key ) {			if ( !isset($array[$key]))				$array[$key] = '';		}		$array_keys = array('category__in', 'category__not_in', 'category__and', 'post__in', 'post__not_in',			'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and');		foreach ( $array_keys as $key ) {			if ( !isset($array[$key]))				$array[$key] = array();		}		return $array;	}	/**	 * Parse a query string and set query type booleans.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string|array $query	 */	function parse_query($query) {		if ( !empty($query) || !isset($this->query) ) {			$this->init();			if ( is_array($query) )				$this->query_vars = $query;			else				parse_str($query, $this->query_vars);			$this->query = $query;		}		$this->query_vars = $this->fill_query_vars($this->query_vars);		$qv = &$this->query_vars;		if ( ! empty($qv['robots']) )			$this->is_robots = true;		$qv['p'] =  absint($qv['p']);		$qv['page_id'] =  absint($qv['page_id']);		$qv['year'] = absint($qv['year']);		$qv['monthnum'] = absint($qv['monthnum']);		$qv['day'] = absint($qv['day']);		$qv['w'] = absint($qv['w']);		$qv['m'] = absint($qv['m']);		$qv['paged'] = absint($qv['paged']);		$qv['cat'] = preg_replace( '|[^0-9,-]|', '', $qv['cat'] ); // comma separated list of positive or negative integers		$qv['pagename'] = trim( $qv['pagename'] );		$qv['name'] = trim( $qv['name'] );		if ( '' !== $qv['hour'] ) $qv['hour'] = absint($qv['hour']);		if ( '' !== $qv['minute'] ) $qv['minute'] = absint($qv['minute']);		if ( '' !== $qv['second'] ) $qv['second'] = absint($qv['second']);		// Compat.  Map subpost to attachment.		if ( '' != $qv['subpost'] )			$qv['attachment'] = $qv['subpost'];		if ( '' != $qv['subpost_id'] )			$qv['attachment_id'] = $qv['subpost_id'];		$qv['attachment_id'] = absint($qv['attachment_id']);		if ( ('' != $qv['attachment']) || !empty($qv['attachment_id']) ) {			$this->is_single = true;			$this->is_attachment = true;		} elseif ( '' != $qv['name'] ) {			$this->is_single = true;		} elseif ( $qv['p'] ) {			$this->is_single = true;		} elseif ( ('' !== $qv['hour']) && ('' !== $qv['minute']) &&('' !== $qv['second']) && ('' != $qv['year']) && ('' != $qv['monthnum']) && ('' != $qv['day']) ) {			// If year, month, day, hour, minute, and second are set, a single			// post is being queried.			$this->is_single = true;		} elseif ( '' != $qv['static'] || '' != $qv['pagename'] || !empty($qv['page_id']) ) {			$this->is_page = true;			$this->is_single = false;		} elseif ( !empty($qv['s']) ) {			$this->is_search = true;		} else {		// Look for archive queries.  Dates, categories, authors.			if ( '' !== $qv['second'] ) {				$this->is_time = true;				$this->is_date = true;			}			if ( '' !== $qv['minute'] ) {				$this->is_time = true;				$this->is_date = true;			}			if ( '' !== $qv['hour'] ) {				$this->is_time = true;				$this->is_date = true;			}			if ( $qv['day'] ) {				if ( ! $this->is_date ) {					$this->is_day = true;					$this->is_date = true;				}			}			if ( $qv['monthnum'] ) {				if ( ! $this->is_date ) {					$this->is_month = true;					$this->is_date = true;				}			}			if ( $qv['year'] ) {				if ( ! $this->is_date ) {					$this->is_year = true;					$this->is_date = true;				}			}			if ( $qv['m'] ) {				$this->is_date = true;				if ( strlen($qv['m']) > 9 ) {					$this->is_time = true;				} else if ( strlen($qv['m']) > 7 ) {					$this->is_day = true;				} else if ( strlen($qv['m']) > 5 ) {					$this->is_month = true;				} else {					$this->is_year = true;				}			}			if ( '' != $qv['w'] ) {				$this->is_date = true;			}			if ( empty($qv['cat']) || ($qv['cat'] == '0') ) {				$this->is_category = false;			} else {				if ( strpos($qv['cat'], '-') !== false ) {					$this->is_category = false;				} else {					$this->is_category = true;				}			}			if ( '' != $qv['category_name'] ) {				$this->is_category = true;			}			if ( !is_array($qv['category__in']) || empty($qv['category__in']) ) {				$qv['category__in'] = array();			} else {				$qv['category__in'] = array_map('absint', $qv['category__in']);				$this->is_category = true;			}			if ( !is_array($qv['category__not_in']) || empty($qv['category__not_in']) ) {				$qv['category__not_in'] = array();			} else {				$qv['category__not_in'] = array_map('absint', $qv['category__not_in']);			}			if ( !is_array($qv['category__and']) || empty($qv['category__and']) ) {				$qv['category__and'] = array();			} else {				$qv['category__and'] = array_map('absint', $qv['category__and']);				$this->is_category = true;			}			if (  '' != $qv['tag'] )				$this->is_tag = true;			$qv['tag_id'] = absint($qv['tag_id']);			if (  !empty($qv['tag_id']) )				$this->is_tag = true;			if ( !is_array($qv['tag__in']) || empty($qv['tag__in']) ) {				$qv['tag__in'] = array();			} else {				$qv['tag__in'] = array_map('absint', $qv['tag__in']);				$this->is_tag = true;			}			if ( !is_array($qv['tag__not_in']) || empty($qv['tag__not_in']) ) {				$qv['tag__not_in'] = array();			} else {				$qv['tag__not_in'] = array_map('absint', $qv['tag__not_in']);			}			if ( !is_array($qv['tag__and']) || empty($qv['tag__and']) ) {				$qv['tag__and'] = array();			} else {				$qv['tag__and'] = array_map('absint', $qv['tag__and']);				$this->is_category = true;			}			if ( !is_array($qv['tag_slug__in']) || empty($qv['tag_slug__in']) ) {				$qv['tag_slug__in'] = array();			} else {				$qv['tag_slug__in'] = array_map('sanitize_title', $qv['tag_slug__in']);				$this->is_tag = true;			}			if ( !is_array($qv['tag_slug__and']) || empty($qv['tag_slug__and']) ) {				$qv['tag_slug__and'] = array();			} else {				$qv['tag_slug__and'] = array_map('sanitize_title', $qv['tag_slug__and']);				$this->is_tag = true;			}			if ( empty($qv['taxonomy']) || empty($qv['term']) ) {				$this->is_tax = false;				foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t ) {					if ( $t->query_var && isset($qv[$t->query_var]) && '' != $qv[$t->query_var] ) {						$qv['taxonomy'] = $taxonomy;						$qv['term'] = $qv[$t->query_var];						$this->is_tax = true;						break;					}				}			} else {				$this->is_tax = true;			}			if ( empty($qv['author']) || ($qv['author'] == '0') ) {				$this->is_author = false;			} else {				$this->is_author = true;			}			if ( '' != $qv['author_name'] ) {				$this->is_author = true;			}			if ( ($this->is_date || $this->is_author || $this->is_category || $this->is_tag || $this->is_tax) )				$this->is_archive = true;		}		if ( '' != $qv['feed'] )			$this->is_feed = true;		if ( '' != $qv['tb'] )			$this->is_trackback = true;		if ( '' != $qv['paged'] && ( intval($qv['paged']) > 1 ) )			$this->is_paged = true;		if ( '' != $qv['comments_popup'] )			$this->is_comments_popup = true;		// if we're previewing inside the write screen		if ( '' != $qv['preview'] )			$this->is_preview = true;		if ( is_admin() )			$this->is_admin = true;		if ( false !== strpos($qv['feed'], 'comments-') ) {			$qv['feed'] = str_replace('comments-', '', $qv['feed']);			$qv['withcomments'] = 1;		}		$this->is_singular = $this->is_single || $this->is_page || $this->is_attachment;		if ( $this->is_feed && ( !empty($qv['withcomments']) || ( empty($qv['withoutcomments']) && $this->is_singular ) ) )			$this->is_comment_feed = true;		if ( !( $this->is_singular || $this->is_archive || $this->is_search || $this->is_feed || $this->is_trackback || $this->is_404 || $this->is_admin || $this->is_comments_popup || $this->is_robots ) )			$this->is_home = true;		// Correct is_* for page_on_front and page_for_posts		if ( $this->is_home && 'page' == get_option('show_on_front') && get_option('page_on_front') ) {			$_query = wp_parse_args($query);			if ( empty($_query) || !array_diff( array_keys($_query), array('preview', 'page', 'paged', 'cpage') ) ) {				$this->is_page = true;				$this->is_home = false;				$qv['page_id'] = get_option('page_on_front');				// Correct <!--nextpage--> for page_on_front				if ( !empty($qv['paged']) ) {					$qv['page'] = $qv['paged'];					unset($qv['paged']);				}			}		}		if ( '' != $qv['pagename'] ) {			$this->queried_object =& get_page_by_path($qv['pagename']);			if ( !empty($this->queried_object) )				$this->queried_object_id = (int) $this->queried_object->ID;			else				unset($this->queried_object);			if  ( 'page' == get_option('show_on_front') && isset($this->queried_object_id) && $this->queried_object_id == get_option('page_for_posts') ) {				$this->is_page = false;				$this->is_home = true;				$this->is_posts_page = true;			}		}		if ( $qv['page_id'] ) {			if  ( 'page' == get_option('show_on_front') && $qv['page_id'] == get_option('page_for_posts') ) {				$this->is_page = false;				$this->is_home = true;				$this->is_posts_page = true;			}		}		if ( !empty($qv['post_type']) ) {			if ( is_array($qv['post_type']) )				$qv['post_type'] = array_map('sanitize_user', $qv['post_type'], array(true));			else				$qv['post_type'] = sanitize_user($qv['post_type'], true);		}		if ( !empty($qv['post_status']) )			$qv['post_status'] = preg_replace('|[^a-z0-9_,-]|', '', $qv['post_status']);		if ( $this->is_posts_page && ( ! isset($qv['withcomments']) || ! $qv['withcomments'] ) )			$this->is_comment_feed = false;		$this->is_singular = $this->is_single || $this->is_page || $this->is_attachment;		// Done correcting is_* for page_on_front and page_for_posts		if ( '404' == $qv['error'] )			$this->set_404();		if ( !empty($query) )			do_action_ref_array('parse_query', array(&$this));	}	/**	 * Sets the 404 property and saves whether query is feed.	 *	 * @since 2.0.0	 * @access public	 */	function set_404() {		$is_feed = $this->is_feed;		$this->init_query_flags();		$this->is_404 = true;		$this->is_feed = $is_feed;	}	/**	 * Retrieve query variable.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query_var Query variable key.	 * @return mixed	 */	function get($query_var) {		if ( isset($this->query_vars[$query_var]) )			return $this->query_vars[$query_var];		return '';	}	/**	 * Set query variable.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query_var Query variable key.	 * @param mixed $value Query variable value.	 */	function set($query_var, $value) {		$this->query_vars[$query_var] = $value;	}	/**	 * Retrieve the posts based on query variables.	 *	 * There are a few filters and actions that can be used to modify the post	 * database query.	 *	 * @since 1.5.0	 * @access public	 * @uses do_action_ref_array() Calls 'pre_get_posts' hook before retrieving posts.	 *	 * @return array List of posts.	 */	function &get_posts() {		global $wpdb, $user_ID, $_wp_using_ext_object_cache;		do_action_ref_array('pre_get_posts', array(&$this));		// Shorthand.		$q = &$this->query_vars;		$q = $this->fill_query_vars($q);		// First let's clear some variables		$distinct = '';		$whichcat = '';		$whichauthor = '';		$whichmimetype = '';		$where = '';		$limits = '';		$join = '';		$search = '';		$groupby = '';		$fields = "$wpdb->posts.*";		$post_status_join = false;		$page = 1;		if ( !isset($q['caller_get_posts']) )			$q['caller_get_posts'] = false;		if ( !isset($q['suppress_filters']) )			$q['suppress_filters'] = false;		if ( !isset($q['cache_results']) ) {			if ( $_wp_using_ext_object_cache )				$q['cache_results'] = false;			else				$q['cache_results'] = true;		}		if ( !isset($q['update_post_term_cache']) )			$q['update_post_term_cache'] = true;		if ( !isset($q['update_post_meta_cache']) )			$q['update_post_meta_cache'] = true;		if ( !isset($q['post_type']) ) {			if ( $this->is_search )				$q['post_type'] = 'any';			else				$q['post_type'] = '';		}		$post_type = $q['post_type'];		if ( !isset($q['posts_per_page']) || $q['posts_per_page'] == 0 )			$q['posts_per_page'] = get_option('posts_per_page');		if ( isset($q['showposts']) && $q['showposts'] ) {			$q['showposts'] = (int) $q['showposts'];			$q['posts_per_page'] = $q['showposts'];		}		if ( (isset($q['posts_per_archive_page']) && $q['posts_per_archive_page'] != 0) && ($this->is_archive || $this->is_search) )			$q['posts_per_page'] = $q['posts_per_archive_page'];		if ( !isset($q['nopaging']) ) {			if ( $q['posts_per_page'] == -1 ) {				$q['nopaging'] = true;			} else {				$q['nopaging'] = false;			}		}		if ( $this->is_feed ) {			$q['posts_per_page'] = get_option('posts_per_rss');			$q['nopaging'] = false;		}		$q['posts_per_page'] = (int) $q['posts_per_page'];		if ( $q['posts_per_page'] < -1 )			$q['posts_per_page'] = abs($q['posts_per_page']);		else if ( $q['posts_per_page'] == 0 )			$q['posts_per_page'] = 1;		if ( !isset($q['comments_per_page']) || $q['comments_per_page'] == 0 )			$q['comments_per_page'] = get_option('comments_per_page');		if ( $this->is_home && (empty($this->query) || $q['preview'] == 'true') && ( 'page' == get_option('show_on_front') ) && get_option('page_on_front') ) {			$this->is_page = true;			$this->is_home = false;			$q['page_id'] = get_option('page_on_front');		}		if ( isset($q['page']) ) {			$q['page'] = trim($q['page'], '/');			$q['page'] = absint($q['page']);		}		// If true, forcibly turns off SQL_CALC_FOUND_ROWS even when limits are present.		if ( isset($q['no_found_rows']) )			$q['no_found_rows'] = (bool) $q['no_found_rows'];		else			$q['no_found_rows'] = false;		// If a month is specified in the querystring, load that month		if ( $q['m'] ) {			$q['m'] = '' . preg_replace('|[^0-9]|', '', $q['m']);			$where .= " AND YEAR($wpdb->posts.post_date)=" . substr($q['m'], 0, 4);			if ( strlen($q['m']) > 5 )				$where .= " AND MONTH($wpdb->posts.post_date)=" . substr($q['m'], 4, 2);			if ( strlen($q['m']) > 7 )				$where .= " AND DAYOFMONTH($wpdb->posts.post_date)=" . substr($q['m'], 6, 2);			if ( strlen($q['m']) > 9 )				$where .= " AND HOUR($wpdb->posts.post_date)=" . substr($q['m'], 8, 2);			if ( strlen($q['m']) > 11 )				$where .= " AND MINUTE($wpdb->posts.post_date)=" . substr($q['m'], 10, 2);			if ( strlen($q['m']) > 13 )				$where .= " AND SECOND($wpdb->posts.post_date)=" . substr($q['m'], 12, 2);		}		if ( '' !== $q['hour'] )			$where .= " AND HOUR($wpdb->posts.post_date)='" . $q['hour'] . "'";		if ( '' !== $q['minute'] )			$where .= " AND MINUTE($wpdb->posts.post_date)='" . $q['minute'] . "'";		if ( '' !== $q['second'] )			$where .= " AND SECOND($wpdb->posts.post_date)='" . $q['second'] . "'";		if ( $q['year'] )			$where .= " AND YEAR($wpdb->posts.post_date)='" . $q['year'] . "'";		if ( $q['monthnum'] )			$where .= " AND MONTH($wpdb->posts.post_date)='" . $q['monthnum'] . "'";		if ( $q['day'] )			$where .= " AND DAYOFMONTH($wpdb->posts.post_date)='" . $q['day'] . "'";		// If we've got a post_type AND its not "any" post_type.		if ( !empty($q['post_type']) && 'any' != $q['post_type'] ) {			foreach ( (array)$q['post_type'] as $_post_type ) {				$ptype_obj = get_post_type_object($_post_type);				if ( !$ptype_obj || !$ptype_obj->query_var || empty($q[ $ptype_obj->query_var ]) )					continue;				if ( ! $ptype_obj->hierarchical || strpos($q[ $ptype_obj->query_var ], '/') === false ) {					// Non-hierarchical post_types & parent-level-hierarchical post_types can directly use 'name'					$q['name'] = $q[ $ptype_obj->query_var ];				} else {					// Hierarchical post_types will operate through the					$q['pagename'] = $q[ $ptype_obj->query_var ];					$q['name'] = '';				}				// Only one request for a slug is possible, this is why name & pagename are overwritten above.				break;			} //end foreach			unset($ptype_obj);		}		if ( '' != $q['name'] ) {			$q['name'] = sanitize_title($q['name']);			$where .= " AND $wpdb->posts.post_name = '" . $q['name'] . "'";		} elseif ( '' != $q['pagename'] ) {			if ( isset($this->queried_object_id) ) {				$reqpage = $this->queried_object_id;			} else {				if ( 'page' != $q['post_type'] ) {					foreach ( (array)$q['post_type'] as $_post_type ) {						$ptype_obj = get_post_type_object($_post_type);						if ( !$ptype_obj || !$ptype_obj->hierarchical )							continue;						$reqpage = get_page_by_path($q['pagename'], OBJECT, $_post_type);						if ( $reqpage )							break;					}					unset($ptype_obj);				} else {					$reqpage = get_page_by_path($q['pagename']);				}				if ( !empty($reqpage) )					$reqpage = $reqpage->ID;				else					$reqpage = 0;			}			$page_for_posts = get_option('page_for_posts');			if  ( ('page' != get_option('show_on_front') ) || empty($page_for_posts) || ( $reqpage != $page_for_posts ) ) {				$q['pagename'] = str_replace('%2F', '/', urlencode(urldecode($q['pagename'])));				$page_paths = '/' . trim($q['pagename'], '/');				$q['pagename'] = sanitize_title(basename($page_paths));				$q['name'] = $q['pagename'];				$where .= " AND ($wpdb->posts.ID = '$reqpage')";				$reqpage_obj = get_page($reqpage);				if ( is_object($reqpage_obj) && 'attachment' == $reqpage_obj->post_type ) {					$this->is_attachment = true;					$post_type = $q['post_type'] = 'attachment';					$this->is_page = true;					$q['attachment_id'] = $reqpage;				}			}		} elseif ( '' != $q['attachment'] ) {			$q['attachment'] = str_replace('%2F', '/', urlencode(urldecode($q['attachment'])));			$attach_paths = '/' . trim($q['attachment'], '/');			$q['attachment'] = sanitize_title(basename($attach_paths));			$q['name'] = $q['attachment'];			$where .= " AND $wpdb->posts.post_name = '" . $q['attachment'] . "'";		}		if ( $q['w'] )			$where .= ' AND ' . _wp_mysql_week( "`$wpdb->posts`.`post_date`" ) . " = '" . $q['w'] . "'";		if ( intval($q['comments_popup']) )			$q['p'] = absint($q['comments_popup']);		// If an attachment is requested by number, let it supercede any post number.		if ( $q['attachment_id'] )			$q['p'] = absint($q['attachment_id']);		// If a post number is specified, load that post		if ( $q['p'] ) {			$where .= " AND {$wpdb->posts}.ID = " . $q['p'];		} elseif ( $q['post__in'] ) {			$post__in = implode(',', array_map( 'absint', $q['post__in'] ));			$where .= " AND {$wpdb->posts}.ID IN ($post__in)";		} elseif ( $q['post__not_in'] ) {			$post__not_in = implode(',',  array_map( 'absint', $q['post__not_in'] ));			$where .= " AND {$wpdb->posts}.ID NOT IN ($post__not_in)";		}		if ( is_numeric($q['post_parent']) )			$where .= $wpdb->prepare( " AND $wpdb->posts.post_parent = %d ", $q['post_parent'] );		if ( $q['page_id'] ) {			if  ( ('page' != get_option('show_on_front') ) || ( $q['page_id'] != get_option('page_for_posts') ) ) {				$q['p'] = $q['page_id'];				$where = " AND {$wpdb->posts}.ID = " . $q['page_id'];			}		}		// If a search pattern is specified, load the posts that match		if ( !empty($q['s']) ) {			// added slashes screw with quote grouping when done early, so done later			$q['s'] = stripslashes($q['s']);			if ( !empty($q['sentence']) ) {				$q['search_terms'] = array($q['s']);			} else {				preg_match_all('/".*?("|$)|((?<=[\\s",+])|^)[^\\s",+]+/', $q['s'], $matches);				$q['search_terms'] = array_map('_search_terms_tidy', $matches[0]);			}			$n = !empty($q['exact']) ? '' : '%';			$searchand = '';			foreach( (array) $q['search_terms'] as $term ) {				$term = addslashes_gpc($term);				$search .= "{$searchand}(($wpdb->posts.post_title LIKE '{$n}{$term}{$n}') OR ($wpdb->posts.post_content LIKE '{$n}{$term}{$n}'))";				$searchand = ' AND ';			}			$term = esc_sql($q['s']);			if ( empty($q['sentence']) && count($q['search_terms']) > 1 && $q['search_terms'][0] != $q['s'] )				$search .= " OR ($wpdb->posts.post_title LIKE '{$n}{$term}{$n}') OR ($wpdb->posts.post_content LIKE '{$n}{$term}{$n}')";			if ( !empty($search) ) {				$search = " AND ({$search}) ";				if ( !is_user_logged_in() )					$search .= " AND ($wpdb->posts.post_password = '') ";			}		}		// Allow plugins to contextually add/remove/modify the search section of the database query		$search = apply_filters_ref_array('posts_search', array( $search, &$this ) );		// Category stuff		if ( empty($q['cat']) || ($q['cat'] == '0') ||				// Bypass cat checks if fetching specific posts				$this->is_singular ) {			$whichcat = '';		} else {			$q['cat'] = ''.urldecode($q['cat']).'';			$q['cat'] = addslashes_gpc($q['cat']);			$cat_array = preg_split('/[,\s]+/', $q['cat']);			$q['cat'] = '';			$req_cats = array();			foreach ( (array) $cat_array as $cat ) {				$cat = intval($cat);				$req_cats[] = $cat;				$in = ($cat > 0);				$cat = abs($cat);				if ( $in ) {					$q['category__in'][] = $cat;					$q['category__in'] = array_merge($q['category__in'], get_term_children($cat, 'category'));				} else {					$q['category__not_in'][] = $cat;					$q['category__not_in'] = array_merge($q['category__not_in'], get_term_children($cat, 'category'));				}			}			$q['cat'] = implode(',', $req_cats);		}		if ( !empty($q['category__in']) ) {			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) ";			$whichcat .= " AND $wpdb->term_taxonomy.taxonomy = 'category' ";			$include_cats = "'" . implode("', '", $q['category__in']) . "'";			$whichcat .= " AND $wpdb->term_taxonomy.term_id IN ($include_cats) ";		}		if ( !empty($q['category__not_in']) ) {			$cat_string = "'" . implode("', '", $q['category__not_in']) . "'";			$whichcat .= " AND $wpdb->posts.ID NOT IN ( SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy = 'category' AND tt.term_id IN ($cat_string) )";		}		// Category stuff for nice URLs		if ( '' != $q['category_name'] && !$this->is_singular ) {			$q['category_name'] = implode('/', array_map('sanitize_title', explode('/', $q['category_name'])));			$reqcat = get_category_by_path($q['category_name']);			$q['category_name'] = str_replace('%2F', '/', urlencode(urldecode($q['category_name'])));			$cat_paths = '/' . trim($q['category_name'], '/');			$q['category_name'] = sanitize_title(basename($cat_paths));			$cat_paths = '/' . trim(urldecode($q['category_name']), '/');			$q['category_name'] = sanitize_title(basename($cat_paths));			$cat_paths = explode('/', $cat_paths);			$cat_path = '';			foreach ( (array) $cat_paths as $pathdir )				$cat_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);			//if we don't match the entire hierarchy fallback on just matching the nicename			if ( empty($reqcat) )				$reqcat = get_category_by_path($q['category_name'], false);			if ( !empty($reqcat) )				$reqcat = $reqcat->term_id;			else				$reqcat = 0;			$q['cat'] = $reqcat;			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) ";			$whichcat = " AND $wpdb->term_taxonomy.taxonomy = 'category' ";			$in_cats = array($q['cat']);			$in_cats = array_merge($in_cats, get_term_children($q['cat'], 'category'));			$in_cats = "'" . implode("', '", $in_cats) . "'";			$whichcat .= "AND $wpdb->term_taxonomy.term_id IN ($in_cats)";			$groupby = "{$wpdb->posts}.ID";		}		// Tags		if ( '' != $q['tag'] ) {			if ( strpos($q['tag'], ',') !== false ) {				$tags = preg_split('/[,\s]+/', $q['tag']);				foreach ( (array) $tags as $tag ) {					$tag = sanitize_term_field('slug', $tag, 0, 'post_tag', 'db');					$q['tag_slug__in'][] = $tag;				}			} else if ( preg_match('/[+\s]+/', $q['tag']) || !empty($q['cat']) ) {				$tags = preg_split('/[+\s]+/', $q['tag']);				foreach ( (array) $tags as $tag ) {					$tag = sanitize_term_field('slug', $tag, 0, 'post_tag', 'db');					$q['tag_slug__and'][] = $tag;				}			} else {				$q['tag'] = sanitize_term_field('slug', $q['tag'], 0, 'post_tag', 'db');				$q['tag_slug__in'][] = $q['tag'];			}		}		if ( !empty($q['category__in']) || !empty($q['meta_key']) || !empty($q['tag__in']) || !empty($q['tag_slug__in']) ) {			$groupby = "{$wpdb->posts}.ID";		}		if ( !empty($q['tag__in']) && empty($q['cat']) ) {			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) ";			$whichcat .= " AND $wpdb->term_taxonomy.taxonomy = 'post_tag' ";			$include_tags = "'" . implode("', '", $q['tag__in']) . "'";			$whichcat .= " AND $wpdb->term_taxonomy.term_id IN ($include_tags) ";			$reqtag = term_exists( $q['tag__in'][0], 'post_tag' );			if ( !empty($reqtag) )				$q['tag_id'] = $reqtag['term_id'];		}		if ( !empty($q['tag_slug__in']) && empty($q['cat']) ) {			$join = " INNER JOIN $wpdb->term_relationships ON ($wpdb->posts.ID = $wpdb->term_relationships.object_id) INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id) INNER JOIN $wpdb->terms ON ($wpdb->term_taxonomy.term_id = $wpdb->terms.term_id) ";			$whichcat .= " AND $wpdb->term_taxonomy.taxonomy = 'post_tag' ";			$include_tags = "'" . implode("', '", $q['tag_slug__in']) . "'";			$whichcat .= " AND $wpdb->terms.slug IN ($include_tags) ";			$reqtag = get_term_by( 'slug', $q['tag_slug__in'][0], 'post_tag' );			if ( !empty($reqtag) )				$q['tag_id'] = $reqtag->term_id;		}		if ( !empty($q['tag__not_in']) ) {			$tag_string = "'" . implode("', '", $q['tag__not_in']) . "'";			$whichcat .= " AND $wpdb->posts.ID NOT IN ( SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy = 'post_tag' AND tt.term_id IN ($tag_string) )";		}		// Tag and slug intersections.		$intersections = array('category__and' => 'category', 'tag__and' => 'post_tag', 'tag_slug__and' => 'post_tag', 'tag__in' => 'post_tag', 'tag_slug__in' => 'post_tag');		$tagin = array('tag__in', 'tag_slug__in'); // These are used to make some exceptions below		foreach ( $intersections as $item => $taxonomy ) {			if ( empty($q[$item]) ) continue;			if ( in_array($item, $tagin) && empty($q['cat']) ) continue; // We should already have what we need if categories aren't being used			if ( $item != 'category__and' ) {				$reqtag = term_exists( $q[$item][0], 'post_tag' );				if ( !empty($reqtag) )					$q['tag_id'] = $reqtag['term_id'];			}			if ( in_array( $item, array('tag_slug__and', 'tag_slug__in' ) ) )				$taxonomy_field = 'slug';			else				$taxonomy_field = 'term_id';			$q[$item] = array_unique($q[$item]);			$tsql = "SELECT p.ID FROM $wpdb->posts p INNER JOIN $wpdb->term_relationships tr ON (p.ID = tr.object_id) INNER JOIN $wpdb->term_taxonomy tt ON (tr.term_taxonomy_id = tt.term_taxonomy_id) INNER JOIN $wpdb->terms t ON (tt.term_id = t.term_id)";			$tsql .= " WHERE tt.taxonomy = '$taxonomy' AND t.$taxonomy_field IN ('" . implode("', '", $q[$item]) . "')";			if ( !in_array($item, $tagin) ) { // This next line is only helpful if we are doing an and relationship				$tsql .= " GROUP BY p.ID HAVING count(p.ID) = " . count($q[$item]);			}			$post_ids = $wpdb->get_col($tsql);			if ( count($post_ids) )				$whichcat .= " AND $wpdb->posts.ID IN (" . implode(', ', $post_ids) . ") ";			else {				$whichcat = " AND 0 = 1";				break;			}		}		// Taxonomies		if ( $this->is_tax ) {			if ( '' != $q['taxonomy'] ) {				$taxonomy = $q['taxonomy'];				$tt[$taxonomy] = $q['term'];			} else {				foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t ) {					if ( $t->query_var && '' != $q[$t->query_var] ) {						$tt[$taxonomy] = $q[$t->query_var];						break;					}				}			}			$terms = get_terms($taxonomy, array('slug' => $tt[$taxonomy], 'hide_empty' => !is_taxonomy_hierarchical($taxonomy)));			if ( is_wp_error($terms) || empty($terms) ) {				$whichcat = " AND 0 ";			} else {				foreach ( $terms as $term ) {					$term_ids[] = $term->term_id;					if ( is_taxonomy_hierarchical($taxonomy) ) {						$children = get_term_children($term->term_id, $taxonomy);						$term_ids = array_merge($term_ids, $children);					}				}				$post_ids = get_objects_in_term($term_ids, $taxonomy);				if ( !is_wp_error($post_ids) && !empty($post_ids) ) {					$whichcat .= " AND $wpdb->posts.ID IN (" . implode(', ', $post_ids) . ") ";					if ( empty($post_type) ) {						$post_type = 'any';						$post_status_join = true;					} elseif ( in_array('attachment', (array)$post_type) ) {						$post_status_join = true;					}				} else {					$whichcat = " AND 0 ";				}			}		}		// Author/user stuff		if ( empty($q['author']) || ($q['author'] == '0') ) {			$whichauthor = '';		} else {			$q['author'] = (string)urldecode($q['author']);			$q['author'] = addslashes_gpc($q['author']);			if ( strpos($q['author'], '-') !== false ) {				$eq = '!=';				$andor = 'AND';				$q['author'] = explode('-', $q['author']);				$q['author'] = (string)absint($q['author'][1]);			} else {				$eq = '=';				$andor = 'OR';			}			$author_array = preg_split('/[,\s]+/', $q['author']);			$_author_array = array();			foreach ( $author_array as $key => $_author )				$_author_array[] = "$wpdb->posts.post_author " . $eq . ' ' . absint($_author);			$whichauthor .= ' AND (' . implode(" $andor ", $_author_array) . ')';			unset($author_array, $_author_array);		}		// Author stuff for nice URLs		if ( '' != $q['author_name'] ) {			if ( strpos($q['author_name'], '/') !== false ) {				$q['author_name'] = explode('/', $q['author_name']);				if ( $q['author_name'][ count($q['author_name'])-1 ] ) {					$q['author_name'] = $q['author_name'][count($q['author_name'])-1]; // no trailing slash				} else {					$q['author_name'] = $q['author_name'][count($q['author_name'])-2]; // there was a trailling slash				}			}			$q['author_name'] = sanitize_title($q['author_name']);			$q['author'] = get_user_by('slug', $q['author_name']);			if ( $q['author'] )				$q['author'] = $q['author']->ID;			$whichauthor .= " AND ($wpdb->posts.post_author = " . absint($q['author']) . ')';		}		// MIME-Type stuff for attachment browsing		if ( isset($q['post_mime_type']) && '' != $q['post_mime_type'] ) {			$table_alias = $post_status_join ? $wpdb->posts : '';			$whichmimetype = wp_post_mime_type_where($q['post_mime_type'], $table_alias);		}		$where .= $search . $whichcat . $whichauthor . $whichmimetype;		if ( empty($q['order']) || ((strtoupper($q['order']) != 'ASC') && (strtoupper($q['order']) != 'DESC')) )			$q['order'] = 'DESC';		// Order by		if ( empty($q['orderby']) ) {			$q['orderby'] = "$wpdb->posts.post_date " . $q['order'];		} elseif ( 'none' == $q['orderby'] ) {			$q['orderby'] = '';		} else {			// Used to filter values			$allowed_keys = array('author', 'date', 'title', 'modified', 'menu_order', 'parent', 'ID', 'rand', 'comment_count');			if ( !empty($q['meta_key']) ) {				$allowed_keys[] = $q['meta_key'];				$allowed_keys[] = 'meta_value';				$allowed_keys[] = 'meta_value_num';			}			$q['orderby'] = urldecode($q['orderby']);			$q['orderby'] = addslashes_gpc($q['orderby']);			$orderby_array = explode(' ', $q['orderby']);			$q['orderby'] = '';			foreach ( $orderby_array as $i => $orderby ) {				// Only allow certain values for safety				if ( ! in_array($orderby, $allowed_keys) )					continue;				switch ( $orderby ) {					case 'menu_order':						break;					case 'ID':						$orderby = "$wpdb->posts.ID";						break;					case 'rand':						$orderby = 'RAND()';						break;					case $q['meta_key']:					case 'meta_value':						$orderby = "$wpdb->postmeta.meta_value";						break;					case 'meta_value_num':						$orderby = "$wpdb->postmeta.meta_value+0";						break;					case 'comment_count':						$orderby = "$wpdb->posts.comment_count";						break;					default:						$orderby = "$wpdb->posts.post_" . $orderby;				}				$q['orderby'] .= (($i == 0) ? '' : ',') . $orderby;			}			// append ASC or DESC at the end			if ( !empty($q['orderby']))				$q['orderby'] .= " {$q['order']}";			if ( empty($q['orderby']) )				$q['orderby'] = "$wpdb->posts.post_date ".$q['order'];		}		if ( is_array($post_type) ) {			$post_type_cap = 'multiple_post_type';		} else {			$post_type_object = get_post_type_object ( $post_type );			if ( !empty($post_type_object) )				$post_type_cap = $post_type_object->capability_type;			else				$post_type_cap = $post_type;		}		$exclude_post_types = '';		$in_search_post_types = get_post_types( array('exclude_from_search' => false) );		if ( ! empty( $in_search_post_types ) )			$exclude_post_types .= $wpdb->prepare(" AND $wpdb->posts.post_type IN ('" . join("', '", $in_search_post_types ) . "')");		if ( 'any' == $post_type ) {			$where .= $exclude_post_types;		} elseif ( !empty( $post_type ) && is_array( $post_type ) ) {			$where .= " AND $wpdb->posts.post_type IN ('" . join("', '", $post_type) . "')";		} elseif ( ! empty( $post_type ) ) {			$where .= " AND $wpdb->posts.post_type = '$post_type'";			$post_type_object = get_post_type_object ( $post_type );		} elseif ( $this->is_attachment ) {			$where .= " AND $wpdb->posts.post_type = 'attachment'";			$post_type_object = get_post_type_object ( 'attachment' );		} elseif ( $this->is_page ) {			$where .= " AND $wpdb->posts.post_type = 'page'";			$post_type_object = get_post_type_object ( 'page' );		} else {			$where .= " AND $wpdb->posts.post_type = 'post'";			$post_type_object = get_post_type_object ( 'post' );		}		if ( !empty($post_type_object) ) {			$post_type_cap = $post_type_object->capability_type;			$edit_cap = $post_type_object->cap->edit_post;			$read_cap = $post_type_object->cap->read_post;			$edit_others_cap = $post_type_object->cap->edit_others_posts;			$read_private_cap = $post_type_object->cap->read_private_posts;		} else {			$edit_cap = 'edit_' . $post_type_cap;			$read_cap = 'read_' . $post_type_cap;			$edit_others_cap = 'edit_others_' . $post_type_cap . 's';			$read_private_cap = 'read_private_' . $post_type_cap . 's';		}		if ( isset($q['post_status']) && '' != $q['post_status'] ) {			$statuswheres = array();			$q_status = explode(',', $q['post_status']);			$r_status = array();			$p_status = array();			$e_status = array();			if ( $q['post_status'] == 'any' ) {				foreach ( get_post_stati( array('exclude_from_search' => true) ) as $status )					$e_status[] = "$wpdb->posts.post_status <> '$status'";			} else {				foreach ( get_post_stati() as $status ) {					if ( in_array( $status, $q_status ) ) {						if ( 'private' == $status )							$p_status[] = "$wpdb->posts.post_status = '$status'";						else							$r_status[] = "$wpdb->posts.post_status = '$status'";					}				}			}			if ( empty($q['perm'] ) || 'readable' != $q['perm'] ) {				$r_status = array_merge($r_status, $p_status);				unset($p_status);			}			if ( !empty($e_status) ) {				$statuswheres[] = "(" . join( ' AND ', $e_status ) . ")";			}			if ( !empty($r_status) ) {				if ( !empty($q['perm'] ) && 'editable' == $q['perm'] && !current_user_can($edit_others_cap) )					$statuswheres[] = "($wpdb->posts.post_author = $user_ID " .  "AND (" . join( ' OR ', $r_status ) . "))";				else					$statuswheres[] = "(" . join( ' OR ', $r_status ) . ")";			}			if ( !empty($p_status) ) {				if ( !empty($q['perm'] ) && 'readable' == $q['perm'] && !current_user_can($read_private_cap) )					$statuswheres[] = "($wpdb->posts.post_author = $user_ID " .  "AND (" . join( ' OR ', $p_status ) . "))";				else					$statuswheres[] = "(" . join( ' OR ', $p_status ) . ")";			}			if ( $post_status_join ) {				$join .= " LEFT JOIN $wpdb->posts AS p2 ON ($wpdb->posts.post_parent = p2.ID) ";				foreach ( $statuswheres as $index => $statuswhere )					$statuswheres[$index] = "($statuswhere OR ($wpdb->posts.post_status = 'inherit' AND " . str_replace($wpdb->posts, 'p2', $statuswhere) . "))";			}			foreach ( $statuswheres as $statuswhere )				$where .= " AND $statuswhere";		} elseif ( !$this->is_singular ) {			$where .= " AND ($wpdb->posts.post_status = 'publish'";			// Add public states.			$public_states = get_post_stati( array('public' => true) );			foreach ( (array) $public_states as $state ) {				if ( 'publish' == $state ) // Publish is hard-coded above.					continue;				$where .= " OR $wpdb->posts.post_status = '$state'";			}			if ( is_admin() ) {				// Add protected states that should show in the admin all list.				$admin_all_states = get_post_stati( array('protected' => true, 'show_in_admin_all_list' => true) );				foreach ( (array) $admin_all_states as $state )					$where .= " OR $wpdb->posts.post_status = '$state'";			}			if ( is_user_logged_in() ) {				// Add private states that are limited to viewing by the author of a post or someone who has caps to read private states.				$private_states = get_post_stati( array('private' => true) );				foreach ( (array) $private_states as $state )					$where .= current_user_can( $read_private_cap ) ? " OR $wpdb->posts.post_status = '$state'" : " OR $wpdb->posts.post_author = $user_ID AND $wpdb->posts.post_status = '$state'";			}			$where .= ')';		}		// postmeta queries		if ( ! empty($q['meta_key']) || ! empty($q['meta_value']) )			$join .= " JOIN $wpdb->postmeta ON ($wpdb->posts.ID = $wpdb->postmeta.post_id) ";		if ( ! empty($q['meta_key']) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s ", $q['meta_key']);		if ( ! empty($q['meta_value']) ) {			if ( empty($q['meta_compare']) || ! in_array($q['meta_compare'], array('=', '!=', '>', '>=', '<', '<=')) )				$q['meta_compare'] = '=';			$where .= $wpdb->prepare("AND $wpdb->postmeta.meta_value {$q['meta_compare']} %s ", $q['meta_value']);		}		// Apply filters on where and join prior to paging so that any		// manipulations to them are reflected in the paging by day queries.		if ( !$q['suppress_filters'] ) {			$where = apply_filters_ref_array('posts_where', array( $where, &$this ) );			$join = apply_filters_ref_array('posts_join', array( $join, &$this ) );		}		// Paging		if ( empty($q['nopaging']) && !$this->is_singular ) {			$page = absint($q['paged']);			if ( empty($page) )				$page = 1;			if ( empty($q['offset']) ) {				$pgstrt = '';				$pgstrt = ($page - 1) * $q['posts_per_page'] . ', ';				$limits = 'LIMIT ' . $pgstrt . $q['posts_per_page'];			} else { // we're ignoring $page and using 'offset'				$q['offset'] = absint($q['offset']);				$pgstrt = $q['offset'] . ', ';				$limits = 'LIMIT ' . $pgstrt . $q['posts_per_page'];			}		}		// Comments feeds		if ( $this->is_comment_feed && ( $this->is_archive || $this->is_search || !$this->is_singular ) ) {			if ( $this->is_archive || $this->is_search ) {				$cjoin = "JOIN $wpdb->posts ON ($wpdb->comments.comment_post_ID = $wpdb->posts.ID) $join ";				$cwhere = "WHERE comment_approved = '1' $where";				$cgroupby = "$wpdb->comments.comment_id";			} else { // Other non singular e.g. front				$cjoin = "JOIN $wpdb->posts ON ( $wpdb->comments.comment_post_ID = $wpdb->posts.ID )";				$cwhere = "WHERE post_status = 'publish' AND comment_approved = '1'";				$cgroupby = '';			}			if ( !$q['suppress_filters'] ) {				$cjoin = apply_filters_ref_array('comment_feed_join', array( $cjoin, &$this ) );				$cwhere = apply_filters_ref_array('comment_feed_where', array( $cwhere, &$this ) );				$cgroupby = apply_filters_ref_array('comment_feed_groupby', array( $cgroupby, &$this ) );				$corderby = apply_filters_ref_array('comment_feed_orderby', array( 'comment_date_gmt DESC', &$this ) );				$climits = apply_filters_ref_array('comment_feed_limits', array( 'LIMIT ' . get_option('posts_per_rss'), &$this ) );			}			$cgroupby = ( ! empty( $cgroupby ) ) ? 'GROUP BY ' . $cgroupby : '';			$corderby = ( ! empty( $corderby ) ) ? 'ORDER BY ' . $corderby : '';			$this->comments = (array) $wpdb->get_results("SELECT $distinct $wpdb->comments.* FROM $wpdb->comments $cjoin $cwhere $cgroupby $corderby $climits");			$this->comment_count = count($this->comments);			$post_ids = array();			foreach ( $this->comments as $comment )				$post_ids[] = (int) $comment->comment_post_ID;			$post_ids = join(',', $post_ids);			$join = '';			if ( $post_ids )				$where = "AND $wpdb->posts.ID IN ($post_ids) ";			else				$where = "AND 0";		}		$orderby = $q['orderby'];		// Apply post-paging filters on where and join.  Only plugins that		// manipulate paging queries should use these hooks.		if ( !$q['suppress_filters'] ) {			$where		= apply_filters_ref_array( 'posts_where_paged',	array( $where, &$this ) );			$groupby	= apply_filters_ref_array( 'posts_groupby',		array( $groupby, &$this ) );			$join		= apply_filters_ref_array( 'posts_join_paged',	array( $join, &$this ) );			$orderby	= apply_filters_ref_array( 'posts_orderby',		array( $orderby, &$this ) );			$distinct	= apply_filters_ref_array( 'posts_distinct',	array( $distinct, &$this ) );			$limits		= apply_filters_ref_array( 'post_limits',		array( $limits, &$this ) );			$fields		= apply_filters_ref_array( 'posts_fields',		array( $fields, &$this ) );		}		// Announce current selection parameters.  For use by caching plugins.		do_action( 'posts_selection', $where . $groupby . $orderby . $limits . $join );		// Filter again for the benefit of caching plugins.  Regular plugins should use the hooks above.		if ( !$q['suppress_filters'] ) {			$where		= apply_filters_ref_array( 'posts_where_request',	array( $where, &$this ) );			$groupby	= apply_filters_ref_array( 'posts_groupby_request',		array( $groupby, &$this ) );			$join		= apply_filters_ref_array( 'posts_join_request',	array( $join, &$this ) );			$orderby	= apply_filters_ref_array( 'posts_orderby_request',		array( $orderby, &$this ) );			$distinct	= apply_filters_ref_array( 'posts_distinct_request',	array( $distinct, &$this ) );			$fields		= apply_filters_ref_array( 'posts_fields_request',		array( $fields, &$this ) );			$limits		= apply_filters_ref_array( 'post_limits_request',		array( $limits, &$this ) );		}		if ( ! empty($groupby) )			$groupby = 'GROUP BY ' . $groupby;		if ( !empty( $orderby ) )			$orderby = 'ORDER BY ' . $orderby;		$found_rows = '';		if ( !$q['no_found_rows'] && !empty($limits) )			$found_rows = 'SQL_CALC_FOUND_ROWS';		$this->request = " SELECT $found_rows $distinct $fields FROM $wpdb->posts $join WHERE 1=1 $where $groupby $orderby $limits";		if ( !$q['suppress_filters'] )			$this->request = apply_filters_ref_array('posts_request', array( $this->request, &$this ) );		$this->posts = $wpdb->get_results($this->request);		// Raw results filter.  Prior to status checks.		if ( !$q['suppress_filters'] )			$this->posts = apply_filters_ref_array('posts_results', array( $this->posts, &$this ) );		if ( !empty($this->posts) && $this->is_comment_feed && $this->is_singular ) {			$cjoin = apply_filters_ref_array('comment_feed_join', array( '', &$this ) );			$cwhere = apply_filters_ref_array('comment_feed_where', array( "WHERE comment_post_ID = '{$this->posts[0]->ID}' AND comment_approved = '1'", &$this ) );			$cgroupby = apply_filters_ref_array('comment_feed_groupby', array( '', &$this ) );			$cgroupby = ( ! empty( $cgroupby ) ) ? 'GROUP BY ' . $cgroupby : '';			$corderby = apply_filters_ref_array('comment_feed_orderby', array( 'comment_date_gmt DESC', &$this ) );			$corderby = ( ! empty( $corderby ) ) ? 'ORDER BY ' . $corderby : '';			$climits = apply_filters_ref_array('comment_feed_limits', array( 'LIMIT ' . get_option('posts_per_rss'), &$this ) );			$comments_request = "SELECT $wpdb->comments.* FROM $wpdb->comments $cjoin $cwhere $cgroupby $corderby $climits";			$this->comments = $wpdb->get_results($comments_request);			$this->comment_count = count($this->comments);		}		if ( !$q['no_found_rows'] && !empty($limits) ) {			$found_posts_query = apply_filters_ref_array( 'found_posts_query', array( 'SELECT FOUND_ROWS()', &$this ) );			$this->found_posts = $wpdb->get_var( $found_posts_query );			$this->found_posts = apply_filters_ref_array( 'found_posts', array( $this->found_posts, &$this ) );			$this->max_num_pages = ceil($this->found_posts / $q['posts_per_page']);		}		// Check post status to determine if post should be displayed.		if ( !empty($this->posts) && ($this->is_single || $this->is_page) ) {			$status = get_post_status($this->posts[0]);			$post_status_obj = get_post_status_object($status);			//$type = get_post_type($this->posts[0]);			if ( !$post_status_obj->public ) {				if ( ! is_user_logged_in() ) {					// User must be logged in to view unpublished posts.					$this->posts = array();				} else {					if  ( $post_status_obj->protected ) {						// User must have edit permissions on the draft to preview.						if ( ! current_user_can($edit_cap, $this->posts[0]->ID) ) {							$this->posts = array();						} else {							$this->is_preview = true;							if ( 'future' != $status )								$this->posts[0]->post_date = current_time('mysql');						}					} elseif ( $post_status_obj->private ) {						if ( ! current_user_can($read_cap, $this->posts[0]->ID) )							$this->posts = array();					} else {						$this->posts = array();					}				}			}			if ( $this->is_preview && current_user_can( $edit_cap, $this->posts[0]->ID ) )				$this->posts[0] = apply_filters_ref_array('the_preview', array( $this->posts[0], &$this ));		}		// Put sticky posts at the top of the posts array		$sticky_posts = get_option('sticky_posts');		if ( $this->is_home && $page <= 1 && is_array($sticky_posts) && !empty($sticky_posts) && !$q['caller_get_posts'] ) {			$num_posts = count($this->posts);			$sticky_offset = 0;			// Loop over posts and relocate stickies to the front.			for ( $i = 0; $i < $num_posts; $i++ ) {				if ( in_array($this->posts[$i]->ID, $sticky_posts) ) {					$sticky_post = $this->posts[$i];					// Remove sticky from current position					array_splice($this->posts, $i, 1);					// Move to front, after other stickies					array_splice($this->posts, $sticky_offset, 0, array($sticky_post));					// Increment the sticky offset.  The next sticky will be placed at this offset.					$sticky_offset++;					// Remove post from sticky posts array					$offset = array_search($sticky_post->ID, $sticky_posts);					unset( $sticky_posts[$offset] );				}			}			// If any posts have been excluded specifically, Ignore those that are sticky.			if ( !empty($sticky_posts) && !empty($q['post__not_in']) )				$sticky_posts = array_diff($sticky_posts, $q['post__not_in']);			// Fetch sticky posts that weren't in the query results			if ( !empty($sticky_posts) ) {				$stickies__in = implode(',', array_map( 'absint', $sticky_posts ));				// honor post type(s) if not set to any				$stickies_where = '';				if ( 'any' != $post_type && '' != $post_type ) {					if ( is_array( $post_type ) ) {						$post_types = join( "', '", $post_type );					} else {						$post_types = $post_type;					}					$stickies_where = "AND $wpdb->posts.post_type IN ('" . $post_types . "')";				}				$stickies = $wpdb->get_results( "SELECT * FROM $wpdb->posts WHERE $wpdb->posts.ID IN ($stickies__in) $stickies_where" );				foreach ( $stickies as $sticky_post ) {					// Ignore sticky posts the current user cannot read or are not published.					if ( 'publish' != $sticky_post->post_status )						continue;					array_splice($this->posts, $sticky_offset, 0, array($sticky_post));					$sticky_offset++;				}			}		}		if ( !$q['suppress_filters'] )			$this->posts = apply_filters_ref_array('the_posts', array( $this->posts, &$this ) );		$this->post_count = count($this->posts);		// Sanitize before caching so it'll only get done once		for ( $i = 0; $i < $this->post_count; $i++ ) {			$this->posts[$i] = sanitize_post($this->posts[$i], 'raw');		}		if ( $q['cache_results'] )			update_post_caches($this->posts, $post_type, $q['update_post_term_cache'], $q['update_post_meta_cache']);		if ( $this->post_count > 0 ) {			$this->post = $this->posts[0];		}		return $this->posts;	}	/**	 * Set up the next post and iterate current post index.	 *	 * @since 1.5.0	 * @access public	 *	 * @return object Next post.	 */	function next_post() {		$this->current_post++;		$this->post = $this->posts[$this->current_post];		return $this->post;	}	/**	 * Sets up the current post.	 *	 * Retrieves the next post, sets up the post, sets the 'in the loop'	 * property to true.	 *	 * @since 1.5.0	 * @access public	 * @uses $post	 * @uses do_action_ref_array() Calls 'loop_start' if loop has just started	 */	function the_post() {		global $post;		$this->in_the_loop = true;		if ( $this->current_post == -1 ) // loop has just started			do_action_ref_array('loop_start', array(&$this));		$post = $this->next_post();		setup_postdata($post);	}	/**	 * Whether there are more posts available in the loop.	 *	 * Calls action 'loop_end', when the loop is complete.	 *	 * @since 1.5.0	 * @access public	 * @uses do_action_ref_array() Calls 'loop_end' if loop is ended	 *	 * @return bool True if posts are available, false if end of loop.	 */	function have_posts() {		if ( $this->current_post + 1 < $this->post_count ) {			return true;		} elseif ( $this->current_post + 1 == $this->post_count && $this->post_count > 0 ) {			do_action_ref_array('loop_end', array(&$this));			// Do some cleaning up after the loop			$this->rewind_posts();		}		$this->in_the_loop = false;		return false;	}	/**	 * Rewind the posts and reset post index.	 *	 * @since 1.5.0	 * @access public	 */	function rewind_posts() {		$this->current_post = -1;		if ( $this->post_count > 0 ) {			$this->post = $this->posts[0];		}	}	/**	 * Iterate current comment index and return comment object.	 *	 * @since 2.2.0	 * @access public	 *	 * @return object Comment object.	 */	function next_comment() {		$this->current_comment++;		$this->comment = $this->comments[$this->current_comment];		return $this->comment;	}	/**	 * Sets up the current comment.	 *	 * @since 2.2.0	 * @access public	 * @global object $comment Current comment.	 * @uses do_action() Calls 'comment_loop_start' hook when first comment is processed.	 */	function the_comment() {		global $comment;		$comment = $this->next_comment();		if ( $this->current_comment == 0 ) {			do_action('comment_loop_start');		}	}	/**	 * Whether there are more comments available.	 *	 * Automatically rewinds comments when finished.	 *	 * @since 2.2.0	 * @access public	 *	 * @return bool True, if more comments. False, if no more posts.	 */	function have_comments() {		if ( $this->current_comment + 1 < $this->comment_count ) {			return true;		} elseif ( $this->current_comment + 1 == $this->comment_count ) {			$this->rewind_comments();		}		return false;	}	/**	 * Rewind the comments, resets the comment index and comment to first.	 *	 * @since 2.2.0	 * @access public	 */	function rewind_comments() {		$this->current_comment = -1;		if ( $this->comment_count > 0 ) {			$this->comment = $this->comments[0];		}	}	/**	 * Sets up the WordPress query by parsing query string.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query URL query string.	 * @return array List of posts.	 */	function &query($query) {		$this->parse_query($query);		return $this->get_posts();	}	/**	 * Retrieve queried object.	 *	 * If queried object is not set, then the queried object will be set from	 * the category, tag, taxonomy, posts page, single post, page, or author	 * query variable. After it is set up, it will be returned.	 *	 * @since 1.5.0	 * @access public	 *	 * @return object	 */	function get_queried_object() {		if ( isset($this->queried_object) )			return $this->queried_object;		$this->queried_object = NULL;		$this->queried_object_id = 0;		if ( $this->is_category ) {			$cat = $this->get('cat');			$category = &get_category($cat);			if ( is_wp_error( $category ) )				return NULL;			$this->queried_object = &$category;			$this->queried_object_id = (int) $cat;		} elseif ( $this->is_tag ) {			$tag_id = $this->get('tag_id');			$tag = &get_term($tag_id, 'post_tag');			if ( is_wp_error( $tag ) )				return NULL;			$this->queried_object = &$tag;			$this->queried_object_id = (int) $tag_id;		} elseif ( $this->is_tax ) {			$tax = $this->get('taxonomy');			$slug = $this->get('term');			$term = &get_terms($tax, array( 'slug' => $slug, 'hide_empty' => false ) );			if ( is_wp_error($term) || empty($term) )				return NULL;			$term = $term[0];			$this->queried_object = $term;			$this->queried_object_id = $term->term_id;		} elseif ( $this->is_posts_page ) {			$this->queried_object = & get_page(get_option('page_for_posts'));			$this->queried_object_id = (int) $this->queried_object->ID;		} elseif ( $this->is_single && !is_null($this->post) ) {			$this->queried_object = $this->post;			$this->queried_object_id = (int) $this->post->ID;		} elseif ( $this->is_page && !is_null($this->post) ) {			$this->queried_object = $this->post;			$this->queried_object_id = (int) $this->post->ID;		} elseif ( $this->is_author ) {			$author_id = (int) $this->get('author');			$author = get_userdata($author_id);			$this->queried_object = $author;			$this->queried_object_id = $author_id;		}		return $this->queried_object;	}	/**	 * Retrieve ID of the current queried object.	 *	 * @since 1.5.0	 * @access public	 *	 * @return int	 */	function get_queried_object_id() {		$this->get_queried_object();		if ( isset($this->queried_object_id) ) {			return $this->queried_object_id;		}		return 0;	}	/**	 * PHP4 type constructor.	 *	 * Sets up the WordPress query, if parameter is not empty.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $query URL query string.	 * @return WP_Query	 */	function WP_Query($query = '') {		if ( ! empty($query) ) {			$this->query($query);		}	}}/** * Redirect old slugs to the correct permalink. * * Attempts to find the current slug from the past slugs. * * @since 2.1.0 * @uses $wp_query * @uses $wpdb * * @return null If no link is found, null is returned. */function wp_old_slug_redirect() {	global $wp_query;	if ( is_404() && '' != $wp_query->query_vars['name'] ) :		global $wpdb;		$query = "SELECT post_id FROM $wpdb->postmeta, $wpdb->posts WHERE ID = post_id AND meta_key = '_wp_old_slug' AND meta_value='" . $wp_query->query_vars['name'] . "'";		// if year, monthnum, or day have been specified, make our query more precise		// just in case there are multiple identical _wp_old_slug values		if ( '' != $wp_query->query_vars['year'] )			$query .= " AND YEAR(post_date) = '{$wp_query->query_vars['year']}'";		if ( '' != $wp_query->query_vars['monthnum'] )			$query .= " AND MONTH(post_date) = '{$wp_query->query_vars['monthnum']}'";		if ( '' != $wp_query->query_vars['day'] )			$query .= " AND DAYOFMONTH(post_date) = '{$wp_query->query_vars['day']}'";		$id = (int) $wpdb->get_var($query);		if ( !$id )			return;		$link = get_permalink($id);		if ( !$link )			return;		wp_redirect($link, '301'); // Permanent redirect		exit;	endif;}/** * Set up global post data. * * @since 1.5.0 * * @param object $post Post data. * @uses do_action_ref_array() Calls 'the_post' * @return bool True when finished. */function setup_postdata($post) {	global $id, $authordata, $day, $currentmonth, $page, $pages, $multipage, $more, $numpages;	$id = (int) $post->ID;	$authordata = get_userdata($post->post_author);	$day = mysql2date('d.m.y', $post->post_date, false);	$currentmonth = mysql2date('m', $post->post_date, false);	$numpages = 1;	$page = get_query_var('page');	if ( !$page )		$page = 1;	if ( is_single() || is_page() || is_feed() )		$more = 1;	$content = $post->post_content;	if ( strpos( $content, '<!--nextpage-->' ) ) {		if ( $page > 1 )			$more = 1;		$multipage = 1;		$content = str_replace("\n<!--nextpage-->\n", '<!--nextpage-->', $content);		$content = str_replace("\n<!--nextpage-->", '<!--nextpage-->', $content);		$content = str_replace("<!--nextpage-->\n", '<!--nextpage-->', $content);		$pages = explode('<!--nextpage-->', $content);		$numpages = count($pages);	} else {		$pages = array( $post->post_content );		$multipage = 0;	}	do_action_ref_array('the_post', array(&$post));	return true;}?>
<?php/** * Writing settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Writing Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can submit content in several different ways; this screen holds the settings for all of them. The top section controls the editor within these administration screens, while the rest control external publishing methods. For more information on any of these methods, use the documentation links below.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Writing_SubPanel" target="_blank">Writing Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('writing'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="default_post_edit_rows"> <?php _e('Size of the post box') ?></label></th><td><input name="default_post_edit_rows" type="text" id="default_post_edit_rows" value="<?php form_option('default_post_edit_rows'); ?>" class="small-text" /><?php _e('lines') ?></td></tr><tr valign="top"><th scope="row"><?php _e('Formatting') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Formatting') ?></span></legend><label for="use_smilies"><input name="use_smilies" type="checkbox" id="use_smilies" value="1" <?php checked('1', get_option('use_smilies')); ?> /><?php _e('Convert emoticons like <code>:-)</code> and <code>:-P</code> to graphics on display') ?></label><br /><label for="use_balanceTags"><input name="use_balanceTags" type="checkbox" id="use_balanceTags" value="1" <?php checked('1', get_option('use_balanceTags')); ?> /> <?php _e('WordPress should correct invalidly nested XHTML automatically') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_category"><?php _e('Default Post Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_category', 'orderby' => 'name', 'selected' => get_option('default_category'), 'hierarchical' => true));?></td></tr><tr valign="top"><th scope="row"><label for="default_link_category"><?php _e('Default Link Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_link_category', 'orderby' => 'name', 'selected' => get_option('default_link_category'), 'hierarchical' => true, 'taxonomy' => 'link_category'));?></td></tr><?php do_settings_fields('writing', 'default'); ?></table><h3 class="title"><?php _e('Press This') ?></h3><p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p><p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p><p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p><p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p><?php if ( apply_filters( 'enable_post_by_email_configuration', true ) ) { ?><h3><?php _e('Post via e-mail') ?></h3><p><?php printf(__('To post to WordPress by e-mail you must set up a secret e-mail account with POP3 access. Any mail received at this address will be posted, so it&#8217;s a good idea to keep this address very secret. Here are three random strings you could use: <kbd>%s</kbd>, <kbd>%s</kbd>, <kbd>%s</kbd>.'), wp_generate_password(8, false), wp_generate_password(8, false), wp_generate_password(8, false)) ?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="mailserver_url"><?php _e('Mail Server') ?></label></th><td><input name="mailserver_url" type="text" id="mailserver_url" value="<?php form_option('mailserver_url'); ?>" class="regular-text code" /><label for="mailserver_port"><?php _e('Port') ?></label><input name="mailserver_port" type="text" id="mailserver_port" value="<?php form_option('mailserver_port'); ?>" class="small-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_login"><?php _e('Login Name') ?></label></th><td><input name="mailserver_login" type="text" id="mailserver_login" value="<?php form_option('mailserver_login'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_pass"><?php _e('Password') ?></label></th><td><input name="mailserver_pass" type="text" id="mailserver_pass" value="<?php form_option('mailserver_pass'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="default_email_category"><?php _e('Default Mail Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_email_category', 'orderby' => 'name', 'selected' => get_option('default_email_category'), 'hierarchical' => true));?></td></tr><?php do_settings_fields('writing', 'post_via_email'); ?></table><?php } ?><h3><?php _e('Remote Publishing') ?></h3><p><?php printf(__('To post to WordPress from a desktop blogging client or remote website that uses the Atom Publishing Protocol or one of the XML-RPC publishing interfaces you must enable them below.')) ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Atom Publishing Protocol') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Atom Publishing Protocol') ?></span></legend><label for="enable_app"><input name="enable_app" type="checkbox" id="enable_app" value="1" <?php checked('1', get_option('enable_app')); ?> /><?php _e('Enable the Atom Publishing Protocol.') ?></label><br /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('XML-RPC') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('XML-RPC') ?></span></legend><label for="enable_xmlrpc"><input name="enable_xmlrpc" type="checkbox" id="enable_xmlrpc" value="1" <?php checked('1', get_option('enable_xmlrpc')); ?> /><?php _e('Enable the WordPress, Movable Type, MetaWeblog and Blogger XML-RPC publishing protocols.') ?></label><br /></fieldset></td></tr><?php do_settings_fields('writing', 'remote_publishing'); ?></table><?php if ( apply_filters( 'enable_update_services_configuration', true ) ) { ?><h3><?php _e('Update Services') ?></h3><?php if ( get_option('blog_public') ) : ?><p><label for="ping_sites"><?php _e('When you publish a new post, WordPress automatically notifies the following site update services. For more about this, see <a href="http://codex.wordpress.org/Update_Services">Update Services</a> on the Codex. Separate multiple service <abbr title="Universal Resource Locator">URL</abbr>s with line breaks.') ?></label></p><textarea name="ping_sites" id="ping_sites" class="large-text code" rows="3"><?php form_option('ping_sites'); ?></textarea><?php else : ?>	<p><?php printf(__('WordPress is not notifying any <a href="http://codex.wordpress.org/Update_Services">Update Services</a> because of your site&#8217;s <a href="%s">privacy settings</a>.'), 'options-privacy.php'); ?></p><?php endif; ?><?php } // multisite ?><?php do_settings_sections('writing'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * WordPress Taxonomy Administration API. * * @package WordPress * @subpackage Administration *///// Category///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @return unknown */function category_exists($cat_name, $parent = 0) {	$id = term_exists($cat_name, 'category', $parent);	if ( is_array($id) )		$id = $id['term_id'];	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_category_to_edit( $id ) {	$category = get_category( $id, OBJECT, 'edit' );	return $category;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @param unknown_type $parent * @return unknown */function wp_create_category( $cat_name, $parent = 0 ) {	if ( $id = category_exists($cat_name, $parent) )		return $id;	return wp_insert_category( array('cat_name' => $cat_name, 'category_parent' => $parent) );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $categories * @param unknown_type $post_id * @return unknown */function wp_create_categories($categories, $post_id = '') {	$cat_ids = array ();	foreach ($categories as $category) {		if ($id = category_exists($category))			$cat_ids[] = $id;		else			if ($id = wp_create_category($category))				$cat_ids[] = $id;	}	if ( $post_id )		wp_set_post_categories($post_id, $cat_ids);	return $cat_ids;}/** * Deletes one existing category. * * @since 2.0.0 * * @param int $cat_ID * @return mixed Returns true if completes delete action; false if term doesnt exist; Zero on attempted deletion of default Category; WP_Error object is also a possibility. */function wp_delete_category($cat_ID) {	$cat_ID = (int) $cat_ID;	$default = get_option('default_category');	// Don't delete the default cat	if ( $cat_ID == $default )		return 0;	return wp_delete_term($cat_ID, 'category', array('default' => $default));}/** * Updates an existing Category or creates a new Category. * * @since 2.0.0 * * @param mixed $catarr See defaults below. Set 'cat_ID' to a non-zero value to update an existing category. The 'taxonomy' key was added in 3.0.0. * @param bool $wp_error Optional, since 2.5.0. Set this to true if the caller handles WP_Error return values. * @return int|object The ID number of the new or updated Category on success.  Zero or a WP_Error on failure, depending on param $wp_error. */function wp_insert_category($catarr, $wp_error = false) {	$cat_defaults = array('cat_ID' => 0, 'taxonomy' => 'category', 'cat_name' => '', 'category_description' => '', 'category_nicename' => '', 'category_parent' => '');	$catarr = wp_parse_args($catarr, $cat_defaults);	extract($catarr, EXTR_SKIP);	if ( trim( $cat_name ) == '' ) {		if ( ! $wp_error )			return 0;		else			return new WP_Error( 'cat_name', __('You did not enter a category name.') );	}	$cat_ID = (int) $cat_ID;	// Are we updating or creating?	if ( !empty ($cat_ID) )		$update = true;	else		$update = false;	$name = $cat_name;	$description = $category_description;	$slug = $category_nicename;	$parent = $category_parent;	$parent = (int) $parent;	if ( $parent < 0 )		$parent = 0;	if ( empty($parent) || !category_exists( $parent ) || ($cat_ID && cat_is_ancestor_of($cat_ID, $parent) ) )		$parent = 0;	$args = compact('name', 'slug', 'parent', 'description');	if ( $update )		$cat_ID = wp_update_term($cat_ID, $taxonomy, $args);	else		$cat_ID = wp_insert_term($cat_name, $taxonomy, $args);	if ( is_wp_error($cat_ID) ) {		if ( $wp_error )			return $cat_ID;		else			return 0;	}	return $cat_ID['term_id'];}/** * Aliases wp_insert_category() with minimal args. * * If you want to update only some fields of an existing category, call this * function with only the new values set inside $catarr. * * @since 2.0.0 * * @param array $catarr The 'cat_ID' value is required.  All other keys are optional. * @return int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure. */function wp_update_category($catarr) {	$cat_ID = (int) $catarr['cat_ID'];	if ( isset($catarr['category_parent']) && ($cat_ID == $catarr['category_parent']) )		return false;	// First, get all of the original fields	$category = get_category($cat_ID, ARRAY_A);	// Escape data pulled from DB.	$category = add_magic_quotes($category);	// Merge old and new fields with new fields overwriting old ones.	$catarr = array_merge($category, $catarr);	return wp_insert_category($catarr);}//// Tags///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_tags_to_edit( $post_id, $taxonomy = 'post_tag' ) {	return get_terms_to_edit( $post_id, $taxonomy);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_terms_to_edit( $post_id, $taxonomy = 'post_tag' ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	$tags = wp_get_post_terms($post_id, $taxonomy, array());	if ( !$tags )		return false;	if ( is_wp_error($tags) )		return $tags;	foreach ( $tags as $tag )		$tag_names[] = $tag->name;	$tags_to_edit = join( ',', $tag_names );	$tags_to_edit = esc_attr( $tags_to_edit );	$tags_to_edit = apply_filters( 'terms_to_edit', $tags_to_edit, $taxonomy );	return $tags_to_edit;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function tag_exists($tag_name) {	return term_exists($tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_tag($tag_name) {	return wp_create_term( $tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_term($tag_name, $taxonomy = 'post_tag') {	if ( $id = term_exists($tag_name, $taxonomy) )		return $id;	return wp_insert_term($tag_name, $taxonomy);}
<?php/** * Action handler for Multisite administration panels. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( empty( $_GET['action'] ) )	wp_redirect( admin_url( 'ms-admin.php' ) );do_action( 'wpmuadminedit' , '');if ( isset( $_GET['id' ]) )	$id = intval( $_GET['id'] );elseif ( isset( $_POST['id'] ) )	$id = intval( $_POST['id'] );switch ( $_GET['action'] ) {	case 'siteoptions':		check_admin_referer( 'siteoptions' );		if ( ! current_user_can( 'manage_network_options' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">options page</a>.', esc_url( admin_url( 'ms-options.php' ) ) ) ) );		if ( isset($_POST['WPLANG']) && ( '' === $_POST['WPLANG'] || in_array( $_POST['WPLANG'], get_available_languages() ) ) )			update_site_option( 'WPLANG', $_POST['WPLANG'] );		if ( is_email( $_POST['admin_email'] ) )			update_site_option( 'admin_email', $_POST['admin_email'] );		$illegal_names = split( ' ', $_POST['illegal_names'] );		foreach ( (array) $illegal_names as $name ) {			$name = trim( $name );			if ( $name != '' )				$names[] = trim( $name );		}		update_site_option( 'illegal_names', $names );		if ( $_POST['limited_email_domains'] != '' ) {			$limited_email_domains = str_replace( ' ', "\n", $_POST['limited_email_domains'] );			$limited_email_domains = split( "\n", stripslashes( $limited_email_domains ) );			$limited_email = array();			foreach ( (array) $limited_email_domains as $domain ) {					$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$limited_email[] = trim( $domain );			}			update_site_option( 'limited_email_domains', $limited_email );		} else {			update_site_option( 'limited_email_domains', '' );		}		if ( $_POST['banned_email_domains'] != '' ) {			$banned_email_domains = split( "\n", stripslashes( $_POST['banned_email_domains'] ) );			$banned = array();			foreach ( (array) $banned_email_domains as $domain ) {				$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$banned[] = trim( $domain );			}			update_site_option( 'banned_email_domains', $banned );		} else {			update_site_option( 'banned_email_domains', '' );		}		update_site_option( 'default_user_role', $_POST['default_user_role'] );		if ( trim( $_POST['dashboard_blog_orig'] ) == '' )			$_POST['dashboard_blog_orig'] = $current_site->blog_id;		if ( trim( $_POST['dashboard_blog'] ) == '' ) {			$_POST['dashboard_blog'] = $current_site->blog_id;			$dashboard_blog_id = $current_site->blog_id;		} elseif ( ! preg_match( '/(--|\.)/', $_POST['dashboard_blog'] ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $_POST['dashboard_blog'] ) ) {			$dashboard_blog = $_POST['dashboard_blog'];			$blog_details = get_blog_details( $dashboard_blog );			if ( false === $blog_details ) {				if ( is_numeric( $dashboard_blog ) )					wp_die( __( 'A dashboard site referenced by ID must already exist' ) );				if ( is_subdomain_install() ) {					$domain = $dashboard_blog . '.' . $current_site->domain;					$path = $current_site->path;				} else {					$domain = $current_site->domain;					$path = trailingslashit( $current_site->path . $dashboard_blog );				}				$wpdb->hide_errors();				$dashboard_blog_id = wpmu_create_blog( $domain, $path, __( 'My Dashboard' ), $current_user->id , array( 'public' => 0 ), $current_site->id );				$wpdb->show_errors();			} else {				$dashboard_blog_id = $blog_details->blog_id;			}		}		if ( is_wp_error( $dashboard_blog_id ) )			wp_die( __( 'Problem creating dashboard site: ' ) . $dashboard_blog_id->get_error_message() );		if ( $_POST['dashboard_blog_orig'] != $_POST['dashboard_blog'] ) {			$users = get_users_of_blog( get_site_option( 'dashboard_blog' ) );			$move_users = array();			foreach ( (array)$users as $user ) {				$user_meta_value = unserialize( $user->meta_value );				if ( is_array( $user_meta_value ) && array_pop( array_keys( $user_meta_value ) ) == 'subscriber' )					$move_users[] = $user->user_id;			}			if ( false == empty( $move_users ) ) {				foreach ( (array)$move_users as $user_id ) {					remove_user_from_blog($user_id, get_site_option( 'dashboard_blog' ) );					add_user_to_blog( $dashboard_blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );					update_user_meta( $user_id, 'primary_blog', $dashboard_blog_id );				}			}		}		update_site_option( 'dashboard_blog', $dashboard_blog_id );		$options = array( 'registrationnotification', 'registration', 'add_new_users', 'menu_items', 'mu_media_buttons', 'upload_space_check_disabled', 'blog_upload_space', 'upload_filetypes', 'site_name', 'first_post', 'first_page', 'first_comment', 'first_comment_url', 'first_comment_author', 'welcome_email', 'welcome_user_email', 'fileupload_maxk', 'admin_notice_feed', 'global_terms_enabled' );		$checked_options = array( 'mu_media_buttons' => array(), 'menu_items' => array(), 'registrationnotification' => 'no', 'upload_space_check_disabled' => 1 );		foreach ( $checked_options as $option_name => $option_unchecked_value ) {			if ( ! isset( $_POST[$option_name] ) )				$_POST[$option_name] = $option_unchecked_value;		}		foreach ( $options as $option_name ) {			if ( ! isset($_POST[$option_name]) )				continue;			$value = stripslashes_deep( $_POST[$option_name] );			update_site_option( $option_name, $value );		}		// Update more options here		do_action( 'update_wpmu_options' );		wp_redirect( add_query_arg( 'updated', 'true', admin_url( 'ms-options.php' ) ) );		exit();	break;	case 'addblog':		check_admin_referer( 'add-blog', '_wpnonce_add-blog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['blog'] ) == false )			wp_die(  __( 'Can&#8217;t create an empty site.' ) );		$blog = $_POST['blog'];		$domain = '';		if ( ! preg_match( '/(--)/', $blog['domain'] ) && preg_match( '|^([a-zA-Z0-9-])+$|', $blog['domain'] ) )			$domain = strtolower( $blog['domain'] );		// If not a subdomain install, make sure the domain isn't a reserved word		if ( ! is_subdomain_install() ) {			$subdirectory_reserved_names = apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) );			if ( in_array( $domain, $subdirectory_reserved_names ) )				wp_die( sprintf( __('The following words are reserved for use by WordPress functions and cannot be used as blog names: <code>%s</code>' ), implode( '</code>, <code>', $subdirectory_reserved_names ) ) );		}		$email = sanitize_email( $blog['email'] );		$title = $blog['title'];		if ( empty( $domain ) )			wp_die( __( 'Missing or invalid site address.' ) );		if ( empty( $email ) )			wp_die( __( 'Missing email address.' ) );		if ( !is_email( $email ) )			wp_die( __( 'Invalid email address.' ) );		if ( is_subdomain_install() ) {			$newdomain = $domain . '.' . preg_replace( '|^www\.|', '', $current_site->domain );			$path = $base;		} else {			$newdomain = $current_site->domain;			$path = $base . $domain . '/';		}		$password = 'N/A';		$user_id = email_exists($email);		if ( !$user_id ) { // Create a new user with a random password			$password = wp_generate_password();			$user_id = wpmu_create_user( $domain, $password, $email );			if ( false == $user_id )				wp_die( __( 'There was an error creating the user.' ) );			else				wp_new_user_notification( $user_id, $password );		}		$wpdb->hide_errors();		$id = wpmu_create_blog( $newdomain, $path, $title, $user_id , array( 'public' => 1 ), $current_site->id );		$wpdb->show_errors();		if ( !is_wp_error( $id ) ) {			$dashboard_blog = get_dashboard_blog();			if ( !is_super_admin( $user_id ) && get_user_option( 'primary_blog', $user_id ) == $dashboard_blog->blog_id )				update_user_option( $user_id, 'primary_blog', $id, true );			$content_mail = sprintf( __( "New site created by %1s\n\nAddress: http://%2s\nName: %3s"), $current_user->user_login , $newdomain . $path, stripslashes( $title ) );			wp_mail( get_site_option('admin_email'),  sprintf( __( '[%s] New Site Created' ), $current_site->site_name ), $content_mail, 'From: "Site Admin" <' . get_site_option( 'admin_email' ) . '>' );			wpmu_welcome_notification( $id, $user_id, $password, $title, array( 'public' => 1 ) );			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add-blog' ), wp_get_referer() ) );			exit();		} else {			wp_die( $id->get_error_message() );		}	break;	case 'updateblog':		check_admin_referer( 'editblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">sites page</a>', esc_url( admin_url( 'ms-sites.php' ) ) ) ) );		switch_to_blog( $id );		// themes		$allowedthemes = array();		if ( isset($_POST['theme']) && is_array( $_POST['theme'] ) ) {			foreach ( $_POST['theme'] as $theme => $val ) {				if ( 'on' == $val )					$allowedthemes[$theme] = true;			}		}		update_option( 'allowedthemes',  $allowedthemes );		// options		if ( is_array( $_POST['option'] ) ) {			$c = 1;			$count = count( $_POST['option'] );			foreach ( (array) $_POST['option'] as $key => $val ) {				if ( $key === 0 || is_array( $val ) )					continue; // Avoids "0 is a protected WP option and may not be modified" error when edit blog options				if ( $c == $count )					update_option( $key, stripslashes( $val ) );				else					update_option( $key, stripslashes( $val ), false ); // no need to refresh blog details yet				$c++;			}		}		// home and siteurl		if ( isset( $_POST['update_home_url'] ) && $_POST['update_home_url'] == 'update' ) {			$blog_address = get_blogaddress_by_domain( $_POST['blog']['domain'], $_POST['blog']['path'] );			if ( get_option( 'siteurl' ) !=  $blog_address )				update_option( 'siteurl', $blog_address );			if ( get_option( 'home' ) != $blog_address )				update_option( 'home', $blog_address );		}		// rewrite rules can't be flushed during switch to blog		delete_option( 'rewrite_rules' );		// update blogs table		$blog_data = stripslashes_deep( $_POST['blog'] );		update_blog_details( $id, $blog_data );		// get blog prefix		$blog_prefix = $wpdb->get_blog_prefix( $id );		// user roles		if ( isset( $_POST['role'] ) && is_array( $_POST['role'] ) == true ) {			$newroles = $_POST['role'];			reset( $newroles );			foreach ( (array) $newroles as $userid => $role ) {				$user = new WP_User( $userid );				if ( ! $user )					continue;				$user->for_blog( $id );				$user->set_role( $role );			}		}		// remove user		if ( isset( $_POST['blogusers'] ) && is_array( $_POST['blogusers'] ) ) {			reset( $_POST['blogusers'] );			foreach ( (array) $_POST['blogusers'] as $key => $val )				remove_user_from_blog( $key, $id );		}		// change password		if ( isset( $_POST['user_password'] ) && is_array( $_POST['user_password'] ) ) {			reset( $_POST['user_password'] );			$newroles = $_POST['role'];			foreach ( (array) $_POST['user_password'] as $userid => $pass ) {				unset( $_POST['role'] );				$_POST['role'] = $newroles[ $userid ];				if ( $pass != '' ) {					$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );					$userdata = get_userdata($userid);					$_POST['pass1'] = $_POST['pass2'] = $pass;					$_POST['email'] = $userdata->user_email;					$_POST['rich_editing'] = $userdata->rich_editing;					edit_user( $userid );					if ( $cap == null )						$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );				}			}			unset( $_POST['role'] );			$_POST['role'] = $newroles;		}		// add user		if ( !empty( $_POST['newuser'] ) ) {			$newuser = $_POST['newuser'];			$userid = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM " . $wpdb->users . " WHERE user_login = %s", $newuser ) );			if ( $userid ) {				$user = $wpdb->get_var( "SELECT user_id FROM " . $wpdb->usermeta . " WHERE user_id='$userid' AND meta_key='{$blog_prefix}capabilities'" );				if ( $user == false )					add_user_to_blog( $id, $userid, $_POST['new_role'] );			}		}		do_action( 'wpmu_update_blog_options' );		restore_current_blog();		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'editblog', 'id' => $id ), wp_get_referer() ) );	break;	case 'deleteblog':		check_admin_referer('deleteblog');		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( $id != '0' && $id != $current_site->blog_id )			wpmu_delete_blog( $id, true );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'delete' ), wp_get_referer() ) );		exit();	break;	case 'allblogs':		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' );			if ( ! current_user_can( 'manage_sites' ) )				wp_die( __( 'You do not have permission to access this page.' ) );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allblogs'] as $key => $val ) {				if ( $val != '0' && $val != $current_site->blog_id ) {					switch ( $doaction ) {						case 'delete':							$blogfunction = 'all_delete';							wpmu_delete_blog( $val, true );						break;						case 'spam':							$blogfunction = 'all_spam';							update_blog_status( $val, 'spam', '1', 0 );							set_time_limit( 60 );						break;						case 'notspam':							$blogfunction = 'all_notspam';							update_blog_status( $val, 'spam', '0', 0 );							set_time_limit( 60 );						break;					}				} else {					wp_die( __( 'You are not allowed to change the current site.' ) );				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $blogfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-sites.php' ) );		}	break;	case 'archiveblog':		check_admin_referer( 'archiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'archived', '1' );		do_action( 'archive_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'archive' ), wp_get_referer() ) );		exit();	break;	case 'unarchiveblog':		check_admin_referer( 'unarchiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'unarchive_blog', $id );		update_blog_status( $id, 'archived', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unarchive' ), wp_get_referer() ) );		exit();	break;	case 'activateblog':		check_admin_referer( 'activateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'deleted', '0' );		do_action( 'activate_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'activate' ), wp_get_referer() ) );		exit();	break;	case 'deactivateblog':		check_admin_referer( 'deactivateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'deactivate_blog', $id );		update_blog_status( $id, 'deleted', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'deactivate' ), wp_get_referer() ) );		exit();	break;	case 'unspamblog':		check_admin_referer( 'unspamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unspam' ), wp_get_referer() ) );		exit();	break;	case 'spamblog':		check_admin_referer( 'spamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'spam' ), wp_get_referer() ) );		exit();	break;	// Themes    case 'updatethemes':	if ( ! current_user_can( 'manage_network_themes' ) )		wp_die( __( 'You do not have permission to access this page.' ) );    	if ( is_array( $_POST['theme'] ) ) {			$themes = get_themes();			reset( $themes );			$allowed_themes = array();			foreach ( (array) $themes as $key => $theme ) {				if ( $_POST['theme'][ esc_html( $theme['Stylesheet'] ) ] == 'enabled' )					$allowed_themes[ esc_html( $theme['Stylesheet'] ) ] = true;			}			update_site_option( 'allowedthemes', $allowed_themes );		}		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'themes' ),  wp_get_referer() ) );		exit();	break;	// Common	case 'confirm':		if ( !headers_sent() ) {			nocache_headers();			header( 'Content-Type: text/html; charset=utf-8' );		}		if ( $current_site->blog_id == $id )			wp_die( __( 'You are not allowed to change the current site.' ) );		?>		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">		<html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>>			<head>				<title><?php _e( 'WordPress &rsaquo; Confirm your action' ); ?></title>				<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />				<?php				wp_admin_css( 'install', true );				wp_admin_css( 'ie', true );				?>			</head>			<body>				<h1 id="logo"><img alt="WordPress" src="<?php echo esc_attr( admin_url( 'images/wordpress-logo.png' ) ); ?>" /></h1>				<form action="ms-edit.php?action=<?php echo esc_attr( $_GET['action2'] ) ?>" method="post">					<input type="hidden" name="action" value="<?php echo esc_attr( $_GET['action2'] ) ?>" />					<input type="hidden" name="id" value="<?php echo esc_attr( $id ); ?>" />					<input type="hidden" name="_wp_http_referer" value="<?php echo esc_attr( wp_get_referer() ); ?>" />					<?php wp_nonce_field( $_GET['action2'], '_wpnonce', false ); ?>					<p><?php echo esc_html( stripslashes( $_GET['msg'] ) ); ?></p>					<p class="submit"><input class="button" type="submit" value="<?php _e( 'Confirm' ); ?>" /></p>				</form>			</body>		</html>		<?php	break;	// Users	case 'deleteuser':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		check_admin_referer( 'deleteuser' );		if ( $id != '0' && $id != '1' ) {			$_POST['allusers'] = array( $id ); // confirm_delete_users() can only handle with arrays			$title = __( 'Users' );			$parent_file = 'ms-admin.php';			require_once( 'admin-header.php' );			echo '<div class="wrap">';			confirm_delete_users( $_POST['allusers'] );			echo '</div>';            require_once( 'admin-footer.php' );            exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'allusers':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-users', '_wpnonce_bulk-ms-users' );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allusers'] as $key => $val ) {				if ( !empty( $val ) ) {					switch ( $doaction ) {						case 'delete':							$title = __( 'Users' );							$parent_file = 'ms-admin.php';							require_once( 'admin-header.php' );							echo '<div class="wrap">';							confirm_delete_users( $_POST['allusers'] );							echo '</div>';				            require_once( 'admin-footer.php' );				            exit();       					break;						case 'spam':							$user = new WP_User( $val );							if ( in_array( $user->user_login, get_super_admins() ) )								wp_die( sprintf( __( 'Warning! User cannot be modified. The user %s is a network administrator.' ), esc_html( $user->user_login ) ) );							$userfunction = 'all_spam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details ) {								if ( $details->userblog_id != $current_site->blog_id ) // main blog not a spam !									update_blog_status( $details->userblog_id, 'spam', '1' );							}							update_user_status( $val, 'spam', '1', 1 );						break;						case 'notspam':							$userfunction = 'all_notspam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details )								update_blog_status( $details->userblog_id, 'spam', '0' );							update_user_status( $val, 'spam', '0', 1 );						break;					}				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $userfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'dodelete':		check_admin_referer( 'ms-users-delete' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( ! empty( $_POST['blog'] ) && is_array( $_POST['blog'] ) ) {			foreach ( $_POST['blog'] as $id => $users ) {				foreach ( $users as $blogid => $user_id ) {					if ( ! empty( $_POST['delete'] ) && 'reassign' == $_POST['delete'][$blogid][$id] )						remove_user_from_blog( $id, $blogid, $user_id );					else						remove_user_from_blog( $id, $blogid );				}			}		}		$i = 0;		if ( is_array( $_POST['user'] ) && ! empty( $_POST['user'] ) )			foreach( $_POST['user'] as $id ) {				wpmu_delete_user( $id );				$i++;			}		if ( $i == 1 )			$deletefunction = 'delete';		else			$deletefunction = 'all_delete';		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $deletefunction ), admin_url( 'ms-users.php' ) ) );	break;	case 'adduser':		check_admin_referer( 'add-user', '_wpnonce_add-user' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['user'] ) == false )			wp_die( __( 'Cannot create an empty user.' ) );		$user = $_POST['user'];		if ( empty($user['username']) && empty($user['email']) )			wp_die( __( 'Missing username and email.' ) );		elseif ( empty($user['username']) )			wp_die( __( 'Missing username.' ) );		elseif ( empty($user['email']) )			wp_die( __( 'Missing email.' ) );		$password = wp_generate_password();		$user_id = wpmu_create_user( esc_html( strtolower( $user['username'] ) ), $password, esc_html( $user['email'] ) );		if ( false == $user_id ) 			wp_die( __( 'Duplicated username or email address.' ) );		else			wp_new_user_notification( $user_id, $password );		if ( get_site_option( 'dashboard_blog' ) == false )			add_user_to_blog( $current_site->blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( get_site_option( 'dashboard_blog' ), $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add' ), wp_get_referer() ) );		exit();	break;	default:		wp_redirect( admin_url( 'ms-admin.php' ) );	break;}?>
<?php/** * Users administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( !current_user_can('list_users') )	wp_die(__('Cheatin&#8217; uh?'));$title = __('Users');$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('This screen lists all the existing users for your site. Each user has one of five defined roles as set by the site admin: Site Administrator, Editor, Author, Contributor, or Subscriber. Users with roles other than Administrator will see fewer options when they are logged in, based on their role.') . '</p>' .    '<p>' . __('You can customize the display of information on this screen as you can on other screens, by using the Screen Options tab and the on-screen filters.') . '</p>' .    '<p>' . __('To add a new user for your site, click the Add New button at the top of the screen or Add New in the Users menu section.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Authors_and_Users_SubPanel" target="_blank">Documentation on Authors and Users</a>') . '</p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Roles_and_Capabilities" target="_blank">Roles and Capabilities Descriptions</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$update = $doaction = '';if ( isset($_REQUEST['action']) )	$doaction = $_REQUEST['action'] ? $_REQUEST['action'] : $_REQUEST['action2'];if ( empty($doaction) ) {	if ( isset($_GET['changeit']) && !empty($_GET['new_role']) )		$doaction = 'promote';}if ( empty($_REQUEST) ) {	$referer = '<input type="hidden" name="wp_http_referer" value="'. esc_attr(stripslashes($_SERVER['REQUEST_URI'])) . '" />';} elseif ( isset($_REQUEST['wp_http_referer']) ) {	$redirect = remove_query_arg(array('wp_http_referer', 'updated', 'delete_count'), stripslashes($_REQUEST['wp_http_referer']));	$referer = '<input type="hidden" name="wp_http_referer" value="' . esc_attr($redirect) . '" />';} else {	$redirect = 'users.php';	$referer = '';}switch ($doaction) {/* Bulk Dropdown menu Role changes */case 'promote':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	$editable_roles = get_editable_roles();	if ( empty( $editable_roles[$_REQUEST['new_role']] ) )		wp_die(__('You can&#8217;t give users that role.'));	$userids = $_REQUEST['users'];	$update = 'promote';	foreach ( $userids as $id ) {		$id = (int) $id;		if ( ! current_user_can('promote_user', $id) )			wp_die(__('You can&#8217;t edit that user.'));		// The new role of the current user must also have promote_users caps		if ( $id == $current_user->ID && !$wp_roles->role_objects[$_REQUEST['new_role']]->has_cap('promote_users') ) {			$update = 'err_admin_role';			continue;		}		// If the user doesn't already belong to the blog, bail.		if ( is_multisite() && !is_user_member_of_blog( $id ) )			wp_die(__('Cheatin&#8217; uh?'));		$user = new WP_User($id);		$user->set_role($_REQUEST['new_role']);	}	wp_redirect(add_query_arg('update', $update, $redirect));	exit();break;case 'dodelete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('delete-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		wp_die(__('You can&#8217;t delete users.'));	$userids = $_REQUEST['users'];	$update = 'del';	$delete_count = 0;	foreach ( (array) $userids as $id) {		$id = (int) $id;		if ( ! current_user_can( 'delete_user', $id ) )			wp_die(__( 'You can&#8217;t delete that user.' ) );		if ( $id == $current_user->ID ) {			$update = 'err_admin_del';			continue;		}		switch ( $_REQUEST['delete_option'] ) {		case 'delete':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id);			break;		case 'reassign':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id, $_REQUEST['reassign_user']);			break;		}		++$delete_count;	}	$redirect = add_query_arg( array('delete_count' => $delete_count, 'update' => $update), $redirect);	wp_redirect($redirect);	exit();break;case 'delete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		$errors = new WP_Error( 'edit_users', __( 'You can&#8217;t delete users.' ) );	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('delete-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Delete Users'); ?></h2><p><?php _e('You have specified these users for deletion:'); ?></p><ul><?php	$go_delete = false;	foreach ( (array) $userids as $id ) {		$id = (int) $id;		$user = new WP_User($id);		if ( $id == $current_user->ID ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be deleted.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"" . esc_attr($id) . "\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_delete = true;		}	}	// @todo Delete is always for !is_multisite(). Use API.	if ( !is_multisite() ) {		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users ORDER BY user_login");	} else {		// WPMU only searches users of current blog		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users, $wpdb->usermeta WHERE $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '".$wpdb->prefix."capabilities' ORDER BY user_login");	}	$user_dropdown = '<select name="reassign_user">';	foreach ( (array) $all_logins as $login )		if ( $login->ID == $current_user->ID || !in_array($login->ID, $userids) )			$user_dropdown .= "<option value=\"" . esc_attr($login->ID) . "\">{$login->user_login}</option>";	$user_dropdown .= '</select>';	?>	</ul><?php if ( $go_delete ) : ?>	<fieldset><p><legend><?php _e('What should be done with posts and links owned by this user?'); ?></legend></p>	<ul style="list-style:none;">		<li><label><input type="radio" id="delete_option0" name="delete_option" value="delete" checked="checked" />		<?php _e('Delete all posts and links.'); ?></label></li>		<li><input type="radio" id="delete_option1" name="delete_option" value="reassign" />		<?php echo '<label for="delete_option1">'.__('Attribute all posts and links to:')."</label> $user_dropdown"; ?></li>	</ul></fieldset>	<input type="hidden" name="action" value="dodelete" />	<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Deletion'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for deletion.'); ?></p><?php endif; ?></div></form><?phpbreak;case 'doremove':	check_admin_referer('remove-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit;	}	if ( !current_user_can('remove_users')  )		die(__('You can&#8217;t remove users.'));	$userids = $_REQUEST['users'];	$update = 'remove'; 	foreach ( $userids as $id ) {		$id = (int) $id;		if ( $id == $current_user->id && !is_super_admin() ) {			$update = 'err_admin_remove';			continue;		}		if ( !current_user_can('remove_user', $id) ) {			$update = 'err_admin_remove';			continue;		}		remove_user_from_blog($id, $blog_id);	}	$redirect = add_query_arg( array('update' => $update), $redirect);	wp_redirect($redirect);	exit;break;case 'remove':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( !current_user_can('remove_users') )		$error = new WP_Error('edit_users', __('You can&#8217;t remove users.'));	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('remove-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Remove Users from Site'); ?></h2><p><?php _e('You have specified these users for removal:'); ?></p><ul><?php	$go_remove = false; 	foreach ( $userids as $id ) {		$id = (int) $id; 		$user = new WP_User($id);		if ( $id == $current_user->id && !is_super_admin() ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be removed.</strong>'), $id, $user->user_login) . "</li>\n";		} elseif ( !current_user_can('remove_user', $id) ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>You don\'t have permission to remove this user.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"{$id}\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_remove = true;		} 	} 	?><?php if ( $go_remove ) : ?>		<input type="hidden" name="action" value="doremove" />		<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Removal'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for removal.'); ?></p><?php endif; ?></div></form><?phpbreak;default:	if ( !empty($_GET['_wp_http_referer']) ) {		wp_redirect(remove_query_arg(array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI'])));		exit;	}	include('./admin-header.php');	$usersearch = isset($_GET['usersearch']) ? $_GET['usersearch'] : null;	$userspage = isset($_GET['userspage']) ? $_GET['userspage'] : null;	$role = isset($_GET['role']) ? $_GET['role'] : null;	// Query the user IDs for this page	$wp_user_search = new WP_User_Search($usersearch, $userspage, $role);	// Query the post counts for this page	$post_counts = count_many_users_posts($wp_user_search->get_results());	// Query the users for this page	cache_users($wp_user_search->get_results());	$messages = array();	if ( isset($_GET['update']) ) :		switch($_GET['update']) {		case 'del':		case 'del_many':			$delete_count = isset($_GET['delete_count']) ? (int) $_GET['delete_count'] : 0;			$messages[] = '<div id="message" class="updated"><p>' . sprintf(_n('%s user deleted', '%s users deleted', $delete_count), $delete_count) . '</p></div>';			break;		case 'add':			$messages[] = '<div id="message" class="updated"><p>' . __('New user created.') . '</p></div>';			break;		case 'promote':			$messages[] = '<div id="message" class="updated"><p>' . __('Changed roles.') . '</p></div>';			break;		case 'err_admin_role':			$messages[] = '<div id="message" class="error"><p>' . __('The current user&#8217;s role must have user editing capabilities.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other user roles have been changed.') . '</p></div>';			break;		case 'err_admin_del':			$messages[] = '<div id="message" class="error"><p>' . __('You can&#8217;t delete the current user.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other users have been deleted.') . '</p></div>';			break;		case 'remove':			$messages[] = '<div id="message" class="updated fade"><p>' . __('User removed from this site.') . '</p></div>';			break;		case 'err_admin_remove':			$messages[] = '<div id="message" class="error"><p>' . __("You can't remove the current user.") . '</p></div>';			$messages[] = '<div id="message" class="updated fade"><p>' . __('Other users have been removed.') . '</p></div>';			break;		}	endif; ?><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty($messages) ) {	foreach ( $messages as $msg )		echo $msg;} ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can( 'create_users' ) ) { ?>  <a href="user-new.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'user'); ?></a><?php }if ( isset($_GET['usersearch']) && $_GET['usersearch'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( $_GET['usersearch'] ) ); ?></h2><div class="filter"><form id="list-filter" action="" method="get"><ul class="subsubsub"><?php$users_of_blog = count_users();$total_users = $users_of_blog['total_users'];$avail_roles =& $users_of_blog['avail_roles'];unset($users_of_blog);$current_role = false;$class = empty($role) ? ' class="current"' : '';$role_links = array();$role_links[] = "<li><a href='users.php'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';foreach ( $wp_roles->get_names() as $this_role => $name ) {	if ( !isset($avail_roles[$this_role]) )		continue;	$class = '';	if ( $this_role == $role ) {		$current_role = $role;		$class = ' class="current"';	}	$name = translate_user_role( $name );	/* translators: User role name with count */	$name = sprintf( __('%1$s <span class="count">(%2$s)</span>'), $name, $avail_roles[$this_role] );	$role_links[] = "<li><a href='users.php?role=$this_role'$class>$name</a>";}echo implode( " |</li>\n", $role_links) . '</li>';unset($role_links);?></ul></form></div><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="user-search-input"><?php _e( 'Search Users' ); ?>:</label>	<input type="text" id="user-search-input" name="usersearch" value="<?php echo esc_attr($wp_user_search->search_term); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" class="button" /></p></form><form id="posts-filter" action="" method="get"><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><label class="screen-reader-text" for="new_role"><?php _e('Change role to&hellip;') ?></label><select name="new_role" id="new_role"><option value=''><?php _e('Change role to&hellip;') ?></option><?php wp_dropdown_roles(); ?></select><input type="submit" value="<?php esc_attr_e('Change'); ?>" name="changeit" class="button-secondary" /><?php wp_nonce_field('bulk-users'); ?></div><br class="clear" /></div>	<?php if ( is_wp_error( $wp_user_search->search_errors ) ) : ?>		<div class="error">			<ul>			<?php				foreach ( $wp_user_search->search_errors->get_error_messages() as $message )					echo "<li>$message</li>";			?>			</ul>		</div>	<?php endif; ?><?php if ( $wp_user_search->get_results() ) : ?>	<?php if ( $wp_user_search->is_search() ) : ?>		<p><a href="users.php"><?php _e('&larr; Back to All Users'); ?></a></p>	<?php endif; ?><table class="widefat fixed" cellspacing="0"><thead><tr class="thead"><?php print_column_headers('users') ?></tr></thead><tfoot><tr class="thead"><?php print_column_headers('users', false) ?></tr></tfoot><tbody id="users" class="list:user user-list"><?php$style = '';foreach ( $wp_user_search->get_results() as $userid ) {	$user_object = new WP_User($userid);	$roles = $user_object->roles;	$role = array_shift($roles);	if ( is_multisite() && empty( $role ) )		continue;	$style = ( ' class="alternate"' == $style ) ? '' : ' class="alternate"';	echo "\n\t", user_row( $user_object, $style, $role, $post_counts[ $userid ] );}?></tbody></table><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><?php endif; ?></form></div><?phpif ( is_multisite() ) {	foreach ( array('user_login' => 'user_login', 'first_name' => 'user_firstname', 'last_name' => 'user_lastname', 'email' => 'user_email', 'url' => 'user_uri', 'role' => 'user_role') as $formpost => $var ) {		$var = 'new_' . $var;		$$var = isset($_REQUEST[$formpost]) ? esc_attr(stripslashes($_REQUEST[$formpost])) : '';	}	unset($name);}?><br class="clear" /><?phpbreak;} // end of the $doaction switchinclude('./admin-footer.php');?>
<?php/** * Category Template Tags and API. * * @package WordPress * @subpackage Template *//** * Retrieve category link URL. * * @since 1.0.0 * @uses apply_filters() Calls 'category_link' filter on category link and category ID. * * @param int $category_id Category ID. * @return string */function get_category_link( $category_id ) {	global $wp_rewrite;	$catlink = $wp_rewrite->get_category_permastruct();	if ( empty( $catlink ) ) {		$catlink = home_url('?cat=' . $category_id);	} else {		$category = &get_category( $category_id );		if ( is_wp_error( $category ) )			return $category;		$category_nicename = $category->slug;		if ( $category->parent == $category_id ) // recursive recursion			$category->parent = 0;		elseif ($category->parent != 0 )			$category_nicename = get_category_parents( $category->parent, false, '/', true ) . $category_nicename;		$catlink = str_replace( '%category%', $category_nicename, $catlink );		$catlink = home_url( user_trailingslashit( $catlink, 'category' ) );	}	return apply_filters( 'category_link', $catlink, $category_id );}/** * Retrieve category parents with separator. * * @since 1.2.0 * * @param int $id Category ID. * @param bool $link Optional, default is false. Whether to format with link. * @param string $separator Optional, default is '/'. How to separate categories. * @param bool $nicename Optional, default is false. Whether to use nice name for display. * @param array $visited Optional. Already linked to categories to prevent duplicates. * @return string */function get_category_parents( $id, $link = false, $separator = '/', $nicename = false, $visited = array() ) {	$chain = '';	$parent = &get_category( $id );	if ( is_wp_error( $parent ) )		return $parent;	if ( $nicename )		$name = $parent->slug;	else		$name = $parent->cat_name;	if ( $parent->parent && ( $parent->parent != $parent->term_id ) && !in_array( $parent->parent, $visited ) ) {		$visited[] = $parent->parent;		$chain .= get_category_parents( $parent->parent, $link, $separator, $nicename, $visited );	}	if ( $link )		$chain .= '<a href="' . get_category_link( $parent->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $parent->cat_name ) ) . '">'.$name.'</a>' . $separator;	else		$chain .= $name.$separator;	return $chain;}/** * Retrieve post categories. * * @since 0.71 * @uses $post * * @param int $id Optional, default to current post ID. The post ID. * @return array */function get_the_category( $id = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	$categories = get_object_term_cache( $id, 'category' );	if ( false === $categories ) {		$categories = wp_get_object_terms( $id, 'category' );		wp_cache_add($id, $categories, 'category_relationships');	}	if ( !empty( $categories ) )		usort( $categories, '_usort_terms_by_name' );	else		$categories = array();	foreach ( (array) array_keys( $categories ) as $key ) {		_make_cat_compat( $categories[$key] );	}	return $categories;}/** * Sort categories by name. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_name( $a, $b ) {	return strcmp( $a->name, $b->name );}/** * Sort categories by ID. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_ID( $a, $b ) {	if ( $a->term_id > $b->term_id )		return 1;	elseif ( $a->term_id < $b->term_id )		return -1;	else		return 0;}/** * Retrieve category name based on category ID. * * @since 0.71 * * @param int $cat_ID Category ID. * @return string Category name. */function get_the_category_by_ID( $cat_ID ) {	$cat_ID = (int) $cat_ID;	$category = &get_category( $cat_ID );	if ( is_wp_error( $category ) )		return $category;	return $category->name;}/** * Retrieve category list in either HTML list or custom format. * * @since 1.5.1 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. * @return string */function get_the_category_list( $separator = '', $parents='', $post_id = false ) {	global $wp_rewrite;	$categories = get_the_category( $post_id );	if ( !is_object_in_taxonomy( get_post_type( $post_id ), 'category' ) )		return apply_filters( 'the_category', '', $separator, $parents );	if ( empty( $categories ) )		return apply_filters( 'the_category', __( 'Uncategorized' ), $separator, $parents );	$rel = ( is_object( $wp_rewrite ) && $wp_rewrite->using_permalinks() ) ? 'rel="category tag"' : 'rel="category"';	$thelist = '';	if ( '' == $separator ) {		$thelist .= '<ul class="post-categories">';		foreach ( $categories as $category ) {			$thelist .= "\n\t<li>";			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a></li>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= $category->name.'</a></li>';					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a></li>';			}		}		$thelist .= '</ul>';	} else {		$i = 0;		foreach ( $categories as $category ) {			if ( 0 < $i )				$thelist .= $separator;			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= "$category->cat_name</a>";					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a>';			}			++$i;		}	}	return apply_filters( 'the_category', $thelist, $separator, $parents );}/** * Check if the current post in within any of the given categories. * * The given categories are checked against the post's categories' term_ids, names and slugs. * Categories given as integers will only be checked against the post's categories' term_ids. * * Prior to v2.5 of WordPress, category names were not supported. * Prior to v2.7, category slugs were not supported. * Prior to v2.7, only one category could be compared: in_category( $single_category ). * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 1.2.0 * * @uses is_object_in_term() * * @param int|string|array $category. Category ID, name or slug, or array of said. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post is in any of the given categories. */function in_category( $category, $_post = null ) {	if ( empty( $category ) )		return false;	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'category', $category );	if ( is_wp_error( $r ) )		return false;	return $r;}/** * Display the category list for the post. * * @since 0.71 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. */function the_category( $separator = '', $parents='', $post_id = false ) {	echo get_the_category_list( $separator, $parents, $post_id );}/** * Retrieve category description. * * @since 1.0.0 * * @param int $category Optional. Category ID. Will use global category ID by default. * @return string Category description, available. */function category_description( $category = 0 ) {	return term_description( $category, 'category' );}/** * Display or retrieve the HTML dropdown list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'show_option_none' (string) - Text to display for showing no categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link get_categories()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'depth' (int) - The max depth. *     'tab_index' (int) - Tab index for select element. *     'name' (string) - The name attribute value for select element. *     'id' (string) - The ID attribute value for select element. Defaults to name if omitted. *     'class' (string) - The class attribute value for select element. *     'selected' (int) - Which category ID is selected. *     'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category. * * The 'hierarchical' argument, which is disabled by default, will override the * depth argument, unless it is true. When the argument is false, it will * display all of the categories. When it is enabled it will use the value in * the 'depth' argument. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_dropdown_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'id', 'order' => 'ASC',		'show_last_update' => 0, 'show_count' => 0,		'hide_empty' => 1, 'child_of' => 0,		'exclude' => '', 'echo' => 1,		'selected' => 0, 'hierarchical' => 0,		'name' => 'cat', 'id' => '',		'class' => 'postform', 'depth' => 0,		'tab_index' => 0, 'taxonomy' => 'category',		'hide_if_empty' => false	);	$defaults['selected'] = ( is_category() ) ? get_query_var( 'cat' ) : 0;	// Back compat.	if ( isset( $args['type'] ) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$args['taxonomy'] = 'link_category';	}	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] ) {		$r['pad_counts'] = true;	}	$r['include_last_update_time'] = $r['show_last_update'];	extract( $r );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	$categories = get_terms( $taxonomy, $r );	$name = esc_attr( $name );	$class = esc_attr( $class );	$id = $id ? esc_attr( $id ) : $name;	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output = "<select name='$name' id='$id' class='$class' $tab_index_attribute>\n";	else		$output = '';	if ( empty($categories) && ! $r['hide_if_empty'] && !empty($show_option_none) ) {		$show_option_none = apply_filters( 'list_cats', $show_option_none );		$output .= "\t<option value='-1' selected='selected'>$show_option_none</option>\n";	}	if ( ! empty( $categories ) ) {		if ( $show_option_all ) {			$show_option_all = apply_filters( 'list_cats', $show_option_all );			$selected = ( '0' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='0'$selected>$show_option_all</option>\n";		}		if ( $show_option_none ) {			$show_option_none = apply_filters( 'list_cats', $show_option_none );			$selected = ( '-1' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='-1'$selected>$show_option_none</option>\n";		}		if ( $hierarchical )			$depth = $r['depth'];  // Walk the full depth.		else			$depth = -1; // Flat.		$output .= walk_category_dropdown_tree( $categories, $depth, $r );	}	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output .= "</select>\n";	$output = apply_filters( 'wp_dropdown_cats', $output );	if ( $echo )		echo $output;	return $output;}/** * Display or retrieve the HTML list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link * walk_category_dropdown_tree()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the * description instead of the category title. *     'feed' - See {@link get_categories()}. *     'feed_type' - See {@link get_categories()}. *     'feed_image' - See {@link get_categories()}. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'exclude_tree' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'current_category' (int) - See {@link get_categories()}. *     'hierarchical' (bool) - See {@link get_categories()}. *     'title_li' (string) - See {@link get_categories()}. *     'depth' (int) - The max depth. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_list_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => __('No categories'),		'orderby' => 'name', 'order' => 'ASC',		'show_last_update' => 0, 'style' => 'list',		'show_count' => 0, 'hide_empty' => 1,		'use_desc_for_title' => 1, 'child_of' => 0,		'feed' => '', 'feed_type' => '',		'feed_image' => '', 'exclude' => '',		'exclude_tree' => '', 'current_category' => 0,		'hierarchical' => true, 'title_li' => __( 'Categories' ),		'echo' => 1, 'depth' => 0,		'taxonomy' => 'category'	);	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] )		$r['pad_counts'] = true;	if ( isset( $r['show_date'] ) )		$r['include_last_update_time'] = $r['show_date'];	if ( true == $r['hierarchical'] ) {		$r['exclude_tree'] = $r['exclude'];		$r['exclude'] = '';	}	if ( !isset( $r['class'] ) )		$r['class'] = ( 'category' == $r['taxonomy'] ) ? 'categories' : $r['taxonomy'];	extract( $r );	if ( !taxonomy_exists($taxonomy) )		return false;	$categories = get_categories( $r );	$output = '';	if ( $title_li && 'list' == $style )			$output = '<li class="' . $class . '">' . $title_li . '<ul>';	if ( empty( $categories ) ) {		if ( ! empty( $show_option_none ) ) {			if ( 'list' == $style )				$output .= '<li>' . $show_option_none . '</li>';			else				$output .= $show_option_none;		}	} else {		global $wp_query;		if( !empty( $show_option_all ) )			if ( 'list' == $style )				$output .= '<li><a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a></li>';			else				$output .= '<a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a>';		if ( empty( $r['current_category'] ) && ( is_category() || is_tax() ) )			$r['current_category'] = $wp_query->get_queried_object_id();		if ( $hierarchical )			$depth = $r['depth'];		else			$depth = -1; // Flat.		$output .= walk_category_tree( $categories, $depth, $r );	}	if ( $title_li && 'list' == $style )		$output .= '</ul></li>';	$output = apply_filters( 'wp_list_categories', $output, $args );	if ( $echo )		echo $output;	else		return $output;}/** * Display tag cloud. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the top 45 tags in the tag cloud list. * * The 'topic_count_text_callback' argument is a function, which, given the count * of the posts  with that tag, returns a text for the tooltip of the tag link. * * The 'exclude' and 'include' arguments are used for the {@link get_tags()} * function. Only one should be used, because only one will be used and the * other ignored, if they are both set. * * @since 2.3.0 * * @param array|string $args Optional. Override default arguments. * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument. */function wp_tag_cloud( $args = '' ) {	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 45,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'exclude' => '', 'include' => '', 'link' => 'view', 'taxonomy' => 'post_tag', 'echo' => true	);	$args = wp_parse_args( $args, $defaults );	$tags = get_terms( $args['taxonomy'], array_merge( $args, array( 'orderby' => 'count', 'order' => 'DESC' ) ) ); // Always query top tags	if ( empty( $tags ) )		return;	foreach ( $tags as $key => $tag ) {		if ( 'edit' == $args['link'] )			$link = get_edit_tag_link( $tag->term_id, $args['taxonomy'] );		else			$link = get_term_link( intval($tag->term_id), $args['taxonomy'] );		if ( is_wp_error( $link ) )			return false;		$tags[ $key ]->link = $link;		$tags[ $key ]->id = $tag->term_id;	}	$return = wp_generate_tag_cloud( $tags, $args ); // Here's where those top tags get sorted according to $args	$return = apply_filters( 'wp_tag_cloud', $return, $args );	if ( 'array' == $args['format'] || empty($args['echo']) )		return $return;	echo $return;}/** * Default text for tooltip for tag links * * @param integer $count number of posts with that tag * @return string text for the tooltip of a tag link. */function default_topic_count_text( $count ) {	return sprintf( _n('%s topic', '%s topics', $count), number_format_i18n( $count ) );}/** * Default topic count scaling for tag links * * @param integer $count number of posts with that tag * @return integer scaled count */function default_topic_count_scale( $count ) {	return round(log10($count + 1) * 100);}/** * Generates a tag cloud (heatmap) from provided data. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'tag_cloud_sort' filter allows you to override the sorting. * Passed to the filter: $tags array and $args array, has to return the $tags array * after sorting it. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or * 'RAND'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the entire tag cloud list. * * The 'topic_count_text_callback' argument is a function, which given the count * of the posts  with that tag returns a text for the tooltip of the tag link. * * @todo Complete functionality. * @since 2.3.0 * * @param array $tags List of tags. * @param string|array $args Optional, override default arguments. * @return string */function wp_generate_tag_cloud( $tags, $args = '' ) {	global $wp_rewrite;	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 0,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'topic_count_text_callback' => 'default_topic_count_text',		'topic_count_scale_callback' => 'default_topic_count_scale', 'filter' => 1,	);	if ( !isset( $args['topic_count_text_callback'] ) && isset( $args['single_text'] ) && isset( $args['multiple_text'] ) ) {		$body = 'return sprintf (			_n(' . var_export($args['single_text'], true) . ', ' . var_export($args['multiple_text'], true) . ', $count),			number_format_i18n( $count ));';		$args['topic_count_text_callback'] = create_function('$count', $body);	}	$args = wp_parse_args( $args, $defaults );	extract( $args );	if ( empty( $tags ) )		return;	$tags_sorted = apply_filters( 'tag_cloud_sort', $tags, $args );	if ( $tags_sorted != $tags  ) { // the tags have been sorted by a plugin		$tags = $tags_sorted;		unset($tags_sorted);	} else {		if ( 'RAND' == $order ) {			shuffle($tags);		} else {			// SQL cannot save you; this is a second (potentially different) sort on a subset of data.			if ( 'name' == $orderby )				uasort( $tags, create_function('$a, $b', 'return strnatcasecmp($a->name, $b->name);') );			else				uasort( $tags, create_function('$a, $b', 'return ($a->count > $b->count);') );			if ( 'DESC' == $order )				$tags = array_reverse( $tags, true );		}	}	if ( $number > 0 )		$tags = array_slice($tags, 0, $number);	$counts = array();	$real_counts = array(); // For the alt tag	foreach ( (array) $tags as $key => $tag ) {		$real_counts[ $key ] = $tag->count;		$counts[ $key ] = $topic_count_scale_callback($tag->count);	}	$min_count = min( $counts );	$spread = max( $counts ) - $min_count;	if ( $spread <= 0 )		$spread = 1;	$font_spread = $largest - $smallest;	if ( $font_spread < 0 )		$font_spread = 1;	$font_step = $font_spread / $spread;	$a = array();	foreach ( $tags as $key => $tag ) {		$count = $counts[ $key ];		$real_count = $real_counts[ $key ];		$tag_link = '#' != $tag->link ? esc_url( $tag->link ) : '#';		$tag_id = isset($tags[ $key ]->id) ? $tags[ $key ]->id : $key;		$tag_name = $tags[ $key ]->name;		$a[] = "<a href='$tag_link' class='tag-link-$tag_id' title='" . esc_attr( $topic_count_text_callback( $real_count ) ) . "' style='font-size: " .			( $smallest + ( ( $count - $min_count ) * $font_step ) )			. "$unit;'>$tag_name</a>";	}	switch ( $format ) :	case 'array' :		$return =& $a;		break;	case 'list' :		$return = "<ul class='wp-tag-cloud'>\n\t<li>";		$return .= join( "</li>\n\t<li>", $a );		$return .= "</li>\n</ul>\n";		break;	default :		$return = join( $separator, $a );		break;	endswitch;    if ( $filter )		return apply_filters( 'wp_generate_tag_cloud', $return, $tags, $args );    else		return $return;}//// Helper functions///** * Retrieve HTML list content for category list. * * @uses Walker_Category to create HTML list content. * @since 2.1.0 * @see Walker_Category::walk() for parameters and return description. */function walk_category_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_Category;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}/** * Retrieve HTML dropdown (select) content for category list. * * @uses Walker_CategoryDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_CategoryDropdown::walk() for parameters and return description. */function walk_category_dropdown_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_CategoryDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}//// Tags///** * Retrieve the link to the tag. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_link' with tag link and tag ID as parameters. * * @param int $tag_id Tag (term) ID. * @return string */function get_tag_link( $tag_id ) {	global $wp_rewrite;	$taglink = $wp_rewrite->get_tag_permastruct();	$tag = &get_term( $tag_id, 'post_tag' );	if ( is_wp_error( $tag ) )		return $tag;	$slug = $tag->slug;	if ( empty( $taglink ) ) {		$file = get_option( 'home' ) . '/';		$taglink = $file . '?tag=' . $slug;	} else {		$taglink = str_replace( '%tag%', $slug, $taglink );		$taglink = get_option( 'home' ) . user_trailingslashit( $taglink, 'category' );	}	return apply_filters( 'tag_link', $taglink, $tag_id );}/** * Retrieve the tags for a post. * * @since 2.3.0 * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags. * * @param int $id Post ID. * @return array */function get_the_tags( $id = 0 ) {	return apply_filters( 'get_the_tags', get_the_terms( $id, 'post_tag' ) );}/** * Retrieve the tags for a post formatted as a string. * * @since 2.3.0 * @uses apply_filters() Calls 'the_tags' filter on string list of tags. * * @param string $before Optional. Before tags. * @param string $sep Optional. Between tags. * @param string $after Optional. After tags. * @return string */function get_the_tag_list( $before = '', $sep = '', $after = '' ) {	return apply_filters( 'the_tags', get_the_term_list( 0, 'post_tag', $before, $sep, $after ), $before, $sep, $after);}/** * Retrieve the tags for a post. * * @since 2.3.0 * * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function the_tags( $before = null, $sep = ', ', $after = '' ) {	if ( null === $before )		$before = __('Tags: ');	echo get_the_tag_list($before, $sep, $after);}/** * Retrieve tag description. * * @since 2.8 * * @param int $tag Optional. Tag ID. Will use global tag ID by default. * @return string Tag description, available. */function tag_description( $tag = 0 ) {	return term_description( $tag );}/** * Retrieve term description. * * @since 2.8 * * @param int $term Optional. Term ID. Will use global term ID by default. * @return string Term description, available. */function term_description( $term = 0, $taxonomy = 'post_tag' ) {	if ( !$term && ( is_tax() || is_tag() || is_category() ) ) {		global $wp_query;		$term = $wp_query->get_queried_object();		$taxonomy = $term->taxonomy;		$term = $term->term_id;	}	$description = get_term_field( 'description', $term, $taxonomy );	return is_wp_error( $description ) ? '' : $description;}/** * Retrieve the terms of the taxonomy that are attached to the post. * * This function can only be used within the loop. * * @since 2.5.0 * * @param int $id Post ID. Is not optional. * @param string $taxonomy Taxonomy name. * @return array|bool False on failure. Array of term objects on success. */function get_the_terms( $id = 0, $taxonomy ) {	global $post; 	$id = (int) $id;	if ( !$id ) {		if ( !$post->ID )			return false;		else			$id = (int) $post->ID;	}	$terms = get_object_term_cache( $id, $taxonomy );	if ( false === $terms )		$terms = wp_get_object_terms( $id, $taxonomy );	if ( empty( $terms ) )		return false;	return $terms;}/** * Retrieve a post's terms as a list with specified format. * * @since 2.5.0 * * @param int $id Post ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function get_the_term_list( $id = 0, $taxonomy, $before = '', $sep = '', $after = '' ) {	$terms = get_the_terms( $id, $taxonomy );	if ( is_wp_error( $terms ) )		return $terms;	if ( empty( $terms ) )		return false;	foreach ( $terms as $term ) {		$link = get_term_link( $term, $taxonomy );		if ( is_wp_error( $link ) )			return $link;		$term_links[] = '<a href="' . $link . '" rel="tag">' . $term->name . '</a>';	}	$term_links = apply_filters( "term_links-$taxonomy", $term_links );	return $before . join( $sep, $term_links ) . $after;}/** * Display the terms in a list. * * @since 2.5.0 * * @param int $id Term ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return null|bool False on WordPress error. Returns null when displaying. */function the_terms( $id, $taxonomy, $before = '', $sep = ', ', $after = '' ) {	$term_list = get_the_term_list( $id, $taxonomy, $before, $sep, $after );	if ( is_wp_error( $term_list ) )		return false;	echo apply_filters('the_terms', $term_list, $taxonomy, $before, $sep, $after);}/** * Check if the current post has any of given tags. * * The given tags are checked against the post's tags' term_ids, names and slugs. * Tags given as integers will only be checked against the post's tags' term_ids. * If no tags are given, determines if post has any tags. * * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids) * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 2.6.0 * * @uses is_object_in_term() * * @param string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post has any of the the given tags (or any tag, if no tag specified). */function has_tag( $tag = '', $_post = null ) {	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'post_tag', $tag );	if ( is_wp_error( $r ) )		return false;	return $r;}?>
<?php/** * Retrieves and creates the wp-config.php file. * * The permissions for the base directory must allow for writing files in order * for the wp-config.php to be created using this page. * * @package WordPress * @subpackage Administration *//** * We are installing. * * @package WordPress */define('WP_INSTALLING', true);/** * We are blissfully unaware of anything. */define('WP_SETUP_CONFIG', true);/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/**#@+ * These three defines are required to allow us to use require_wp_db() to load * the database class while being wp-content/db.php aware. * @ignore */define('ABSPATH', dirname(dirname(__FILE__)).'/');define('WPINC', 'wp-includes');define('WP_CONTENT_DIR', ABSPATH . 'wp-content');define('WP_DEBUG', false);/**#@-*/require_once(ABSPATH . WPINC . '/load.php');require_once(ABSPATH . WPINC . '/compat.php');require_once(ABSPATH . WPINC . '/functions.php');require_once(ABSPATH . WPINC . '/classes.php');require_once(ABSPATH . WPINC . '/version.php');if (!file_exists(ABSPATH . 'wp-config-sample.php'))	wp_die('Sorry, I need a wp-config-sample.php file to work from. Please re-upload this file from your WordPress installation.');$configFile = file(ABSPATH . 'wp-config-sample.php');// Check if wp-config.php has been createdif (file_exists(ABSPATH . 'wp-config.php'))	wp_die("<p>The file 'wp-config.php' already exists. If you need to reset any of the configuration items in this file, please delete it first. You may try <a href='install.php'>installing now</a>.</p>");// Check if wp-config.php exists above the root directory but is not part of another installif (file_exists(ABSPATH . '../wp-config.php') && ! file_exists(ABSPATH . '../wp-settings.php'))	wp_die("<p>The file 'wp-config.php' already exists one level above your WordPress installation. If you need to reset any of the configuration items in this file, please delete it first. You may try <a href='install.php'>installing now</a>.</p>");if ( version_compare( $required_php_version, phpversion(), '>' ) )	wp_die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress requires at least %2$s.'/*/WP_I18N_OLD_PHP*/, phpversion(), $required_php_version ) );if ( !extension_loaded('mysql') && !file_exists(ABSPATH . 'wp-content/db.php') )	wp_die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );if (isset($_GET['step']))	$step = $_GET['step'];else	$step = 0;/** * Display setup wp-config.php file header. * * @ignore * @since 2.3.0 * @package WordPress * @subpackage Installer_WP_Config */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>WordPress &rsaquo; Setup Configuration File</title><link rel="stylesheet" href="css/install.css" type="text/css" /></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php}//end function display_header();switch($step) {	case 0:		display_header();?><p>Welcome to WordPress. Before getting started, we need some information on the database. You will need to know the following items before proceeding.</p><ol>	<li>Database name</li>	<li>Database username</li>	<li>Database password</li>	<li>Database host</li>	<li>Table prefix (if you want to run more than one WordPress in a single database) </li></ol><p><strong>If for any reason this automatic file creation doesn't work, don't worry. All this does is fill in the database information to a configuration file. You may also simply open <code>wp-config-sample.php</code> in a text editor, fill in your information, and save it as <code>wp-config.php</code>. </strong></p><p>In all likelihood, these items were supplied to you by your Web Host. If you do not have this information, then you will need to contact them before you can continue. If you&#8217;re all ready&hellip;</p><p class="step"><a href="setup-config.php?step=1<?php if ( isset( $_GET['noapi'] ) ) echo '&amp;noapi'; ?>" class="button">Let&#8217;s go!</a></p><?php	break;	case 1:		display_header();	?><form method="post" action="setup-config.php?step=2">	<p>Below you should enter your database connection details. If you're not sure about these, contact your host. </p>	<table class="form-table">		<tr>			<th scope="row"><label for="dbname">Database Name</label></th>			<td><input name="dbname" id="dbname" type="text" size="25" value="wordpress" /></td>			<td>The name of the database you want to run WP in. </td>		</tr>		<tr>			<th scope="row"><label for="uname">User Name</label></th>			<td><input name="uname" id="uname" type="text" size="25" value="username" /></td>			<td>Your MySQL username</td>		</tr>		<tr>			<th scope="row"><label for="pwd">Password</label></th>			<td><input name="pwd" id="pwd" type="text" size="25" value="password" /></td>			<td>...and MySQL password.</td>		</tr>		<tr>			<th scope="row"><label for="dbhost">Database Host</label></th>			<td><input name="dbhost" id="dbhost" type="text" size="25" value="localhost" /></td>			<td>You should be able to get this info from your web host, if <code>localhost</code> does not work.</td>		</tr>		<tr>			<th scope="row"><label for="prefix">Table Prefix</label></th>			<td><input name="prefix" id="prefix" type="text" id="prefix" value="wp_" size="25" /></td>			<td>If you want to run multiple WordPress installations in a single database, change this.</td>		</tr>	</table>	<?php if ( isset( $_GET['noapi'] ) ) { ?><input name="noapi" type="hidden" value="true" /><?php } ?>	<p class="step"><input name="submit" type="submit" value="Submit" class="button" /></p></form><?php	break;	case 2:	$dbname  = trim($_POST['dbname']);	$uname   = trim($_POST['uname']);	$passwrd = trim($_POST['pwd']);	$dbhost  = trim($_POST['dbhost']);	$prefix  = trim($_POST['prefix']);	if ( empty($prefix) )		$prefix = 'wp_';	// Validate $prefix: it can only contain letters, numbers and underscores	if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: "Table Prefix" can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );	// Test the db connection.	/**#@+	 * @ignore	 */	define('DB_NAME', $dbname);	define('DB_USER', $uname);	define('DB_PASSWORD', $passwrd);	define('DB_HOST', $dbhost);	/**#@-*/	// We'll fail here if the values are no good.	require_wp_db();	if ( !empty($wpdb->error) )		wp_die($wpdb->error->get_error_message());	// Fetch or generate keys and salts.	$no_api = isset( $_POST['noapi'] );	require_once( ABSPATH . WPINC . '/plugin.php' );	require_once( ABSPATH . WPINC . '/l10n.php' );	require_once( ABSPATH . WPINC . '/pomo/translations.php' );	if ( ! $no_api ) {		require_once( ABSPATH . WPINC . '/class-http.php' );		require_once( ABSPATH . WPINC . '/http.php' );		wp_fix_server_vars();		/**#@+		 * @ignore		 */		function get_bloginfo() {			return ( ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . str_replace( $_SERVER['PHP_SELF'], '/wp-admin/setup-config.php', '' ) );		}		/**#@-*/		$secret_keys = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );	}	if ( $no_api || is_wp_error( $secret_keys ) ) {		$secret_keys = array();		require_once( ABSPATH . WPINC . '/pluggable.php' );		for ( $i = 0; $i < 8; $i++ ) {			$secret_keys[] = wp_generate_password( 64, true, true );		}	} else {		$secret_keys = explode( "\n", wp_remote_retrieve_body( $secret_keys ) );		foreach ( $secret_keys as $k => $v ) {			$secret_keys[$k] = substr( $v, 28, 64 );		}	}	$key = 0;	foreach ($configFile as $line_num => $line) {		switch (substr($line,0,16)) {			case "define('DB_NAME'":				$configFile[$line_num] = str_replace("database_name_here", $dbname, $line);				break;			case "define('DB_USER'":				$configFile[$line_num] = str_replace("'username_here'", "'$uname'", $line);				break;			case "define('DB_PASSW":				$configFile[$line_num] = str_replace("'password_here'", "'$passwrd'", $line);				break;			case "define('DB_HOST'":				$configFile[$line_num] = str_replace("localhost", $dbhost, $line);				break;			case '$table_prefix  =':				$configFile[$line_num] = str_replace('wp_', $prefix, $line);				break;			case "define('AUTH_KEY":			case "define('SECURE_A":			case "define('LOGGED_I":			case "define('NONCE_KE":			case "define('AUTH_SAL":			case "define('SECURE_A":			case "define('LOGGED_I":			case "define('NONCE_SA":				$configFile[$line_num] = str_replace('put your unique phrase here', $secret_keys[$key++], $line );				break;		}	}	if ( ! is_writable(ABSPATH) ) :		display_header();?><p>Sorry, but I can't write the <code>wp-config.php</code> file.</p><p>You can create the <code>wp-config.php</code> manually and paste the following text into it.</p><textarea cols="98" rows="15" class="code"><?php		foreach( $configFile as $line ) {			echo htmlentities($line, ENT_COMPAT, 'UTF-8');		}?></textarea><p>After you've done that, click "Run the install."</p><p class="step"><a href="install.php" class="button">Run the install</a></p><?php	else :		$handle = fopen(ABSPATH . 'wp-config.php', 'w');		foreach( $configFile as $line ) {			fwrite($handle, $line);		}		fclose($handle);		chmod(ABSPATH . 'wp-config.php', 0666);		display_header();?><p>All right sparky! You've made it through this part of the installation. WordPress can now communicate with your database. If you are ready, time now to&hellip;</p><p class="step"><a href="install.php" class="button">Run the install</a></p><?php	endif;	break;}?></body></html>
<?php/** * WordPress Feed API * * Many of the functions used in here belong in The Loop, or The Loop for the * Feeds. * * @package WordPress * @subpackage Feed *//** * RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.5.1 * @uses apply_filters() Calls 'get_bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. * @return string */function get_bloginfo_rss($show = '') {	$info = strip_tags(get_bloginfo($show));	return apply_filters('get_bloginfo_rss', convert_chars($info), $show);}/** * Display RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. */function bloginfo_rss($show = '') {	echo apply_filters('bloginfo_rss', get_bloginfo_rss($show), $show);}/** * Retrieve the default feed. * * The default feed is 'rss2', unless a plugin changes it through the * 'default_feed' filter. * * @package WordPress * @subpackage Feed * @since 2.5 * @uses apply_filters() Calls 'default_feed' hook on the default feed string. * * @return string Default feed, or for example 'rss2', 'atom', etc. */function get_default_feed() {	return apply_filters('default_feed', 'rss2');}/** * Retrieve the blog title for the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'get_wp_title_rss' hook on title. * @uses wp_title() See function for $sep parameter usage. * * @param string $sep Optional.How to separate the title. See wp_title() for more info. * @return string Error message on failure or blog title on success. */function get_wp_title_rss($sep = '&#187;') {	$title = wp_title($sep, false);	if ( is_wp_error( $title ) )		return $title->get_error_message();	$title = apply_filters('get_wp_title_rss', $title);	return $title;}/** * Display the blog title for display of the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'wp_title_rss' on the blog title. * @see wp_title() $sep parameter usage. * * @param string $sep Optional. */function wp_title_rss($sep = '&#187;') {	echo apply_filters('wp_title_rss', get_wp_title_rss($sep));}/** * Retrieve the current post title for the feed. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'the_title_rss' on the post title. * * @return string Current post title. */function get_the_title_rss() {	$title = get_the_title();	$title = apply_filters('the_title_rss', $title);	return $title;}/** * Display the post title in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses get_the_title_rss() Used to retrieve current post title. */function the_title_rss() {	echo get_the_title_rss();}/** * Retrieve the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function get_the_content_feed($feed_type = null) {	if ( !$feed_type )		$feed_type = get_default_feed();	$content = apply_filters('the_content', get_the_content());	$content = str_replace(']]>', ']]&gt;', $content);	return apply_filters('the_content_feed', $content, $feed_type);}/** * Display the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function the_content_feed($feed_type = null) {	echo get_the_content_feed();}/** * Display the post excerpt for the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_excerpt_rss' hook on the excerpt. */function the_excerpt_rss() {	$output = get_the_excerpt();	echo apply_filters('the_excerpt_rss', $output);}/** * Display the permalink to the post for use in feeds. * * @package WordPress * @subpackage Feed * @since 2.3.0 * @uses apply_filters() Call 'the_permalink_rss' on the post permalink */function the_permalink_rss() {	echo esc_url( apply_filters('the_permalink_rss', get_permalink() ));}/** * Outputs the link to the comments for the current post in an xml safe way * * @since 3.0.0 * @return none */function comments_link_feed() {	echo esc_url( get_comments_link() );}/** * Display the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. */function comment_guid($comment_id = null) {	echo esc_url( get_comment_guid($comment_id) );}/** * Retrieve the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. * @return bool|string false on failure or guid for comment on success. */function get_comment_guid($comment_id = null) {	$comment = get_comment($comment_id);	if ( !is_object($comment) )		return false;	return get_the_guid($comment->comment_post_ID) . '#comment-' . $comment->comment_ID;}/** * Display the link to the comments. * * @since 1.5.0 */function comment_link() {	echo esc_url( get_comment_link() );}/** * Retrieve the current comment author for use in the feeds. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'comment_author_rss' hook on comment author. * @uses get_comment_author() * * @return string Comment Author */function get_comment_author_rss() {	return apply_filters('comment_author_rss', get_comment_author() );}/** * Display the current comment author in the feed. * * @package WordPress * @subpackage Feed * @since 1.0.0 */function comment_author_rss() {	echo get_comment_author_rss();}/** * Display the current comment content for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.0.0 * @uses apply_filters() Calls 'comment_text_rss' filter on comment content. * @uses get_comment_text() */function comment_text_rss() {	$comment_text = get_comment_text();	$comment_text = apply_filters('comment_text_rss', $comment_text);	echo $comment_text;}/** * Retrieve all of the post categories, formatted for use in feeds. * * All of the categories for the current post in the feed loop, will be * retrieved and have feed markup added, so that they can easily be added to the * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds. * * @package WordPress * @subpackage Feed * @since 2.1.0 * @uses apply_filters() * * @param string $type Optional, default is the type returned by get_default_feed(). * @return string All of the post categories for displaying in the feed. */function get_the_category_rss($type = null) {	if ( empty($type) )		$type = get_default_feed();	$categories = get_the_category();	$tags = get_the_tags();	$the_list = '';	$cat_names = array();	$filter = 'rss';	if ( 'atom' == $type )		$filter = 'raw';	if ( !empty($categories) ) foreach ( (array) $categories as $category ) {		$cat_names[] = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);	}	if ( !empty($tags) ) foreach ( (array) $tags as $tag ) {		$cat_names[] = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);	}	$cat_names = array_unique($cat_names);	foreach ( $cat_names as $cat_name ) {		if ( 'rdf' == $type )			$the_list .= "\t\t<dc:subject><![CDATA[$cat_name]]></dc:subject>\n";		elseif ( 'atom' == $type )			$the_list .= sprintf( '<category scheme="%1$s" term="%2$s" />', esc_attr( apply_filters( 'get_bloginfo_rss', get_bloginfo( 'url' ) ) ), esc_attr( $cat_name ) );		else			$the_list .= "\t\t<category><![CDATA[" . @html_entity_decode( $cat_name, ENT_COMPAT, get_option('blog_charset') ) . "]]></category>\n";	}	return apply_filters('the_category_rss', $the_list, $type);}/** * Display the post categories in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @see get_the_category_rss() For better explanation. * * @param string $type Optional, default is the type returned by get_default_feed(). */function the_category_rss($type = null) {	echo get_the_category_rss($type);}/** * Display the HTML type based on the blog setting. * * The two possible values are either 'xhtml' or 'html'. * * @package WordPress * @subpackage Feed * @since 2.2.0 */function html_type_rss() {	$type = get_bloginfo('html_type');	if (strpos($type, 'xhtml') !== false)		$type = 'xhtml';	else		$type = 'html';	echo $type;}/** * Display the rss enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of enclosure HTML tag(s) with a URI and other * attributes. * * @package WordPress * @subpackage Template * @since 1.5.0 * @uses apply_filters() Calls 'rss_enclosure' hook on rss enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function rss_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = explode("\n", $enc);				//only get the the first element eg, audio/mpeg from 'audio/mpeg mpga mp2 mp3'				$t = preg_split('/[ \t]/', trim($enclosure[2]) );				$type = $t[0];				echo apply_filters('rss_enclosure', '<enclosure url="' . trim(htmlspecialchars($enclosure[0])) . '" length="' . trim($enclosure[1]) . '" type="' . $type . '" />' . "\n");			}		}	}}/** * Display the atom enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of link HTML tag(s) with a URI and other attributes. * * @package WordPress * @subpackage Template * @since 2.2.0 * @uses apply_filters() Calls 'atom_enclosure' hook on atom enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function atom_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val ) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = split("\n", $enc);				echo apply_filters('atom_enclosure', '<link href="' . trim(htmlspecialchars($enclosure[0])) . '" rel="enclosure" length="' . trim($enclosure[1]) . '" type="' . trim($enclosure[2]) . '" />' . "\n");			}		}	}}/** * Determine the type of a string of data with the data formatted. * * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1. * * In the case of WordPress, text is defined as containing no markup, * xhtml is defined as "well formed", and html as tag soup (i.e., the rest). * * Container div tags are added to xhtml values, per section 3.1.1.3. * * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1 * * @package WordPress * @subpackage Feed * @since 2.5 * * @param string $data Input string * @return array array(type, value) */function prep_atom_text_construct($data) {	if (strpos($data, '<') === false && strpos($data, '&') === false) {		return array('text', $data);	}	$parser = xml_parser_create();	xml_parse($parser, '<div>' . $data . '</div>', true);	$code = xml_get_error_code($parser);	xml_parser_free($parser);	if (!$code) {		if (strpos($data, '<') === false) {			return array('text', $data);		} else {			$data = "<div xmlns='http://www.w3.org/1999/xhtml'>$data</div>";			return array('xhtml', $data);		}	}	if (strpos($data, ']]>') == false) {		return array('html', "<![CDATA[$data]]>");	} else {		return array('html', htmlspecialchars($data));	}}/** * Display the link for the currently displayed feed in a XSS safe way. * * Generate a correct link for the atom:self element. * * @package WordPress * @subpackage Feed * @since 2.5 */function self_link() {	$host = @parse_url(home_url());	$host = $host['host'];	echo esc_url(		'http'		. ( (isset($_SERVER['https']) && $_SERVER['https'] == 'on') ? 's' : '' ) . '://'		. $host		. stripslashes($_SERVER['REQUEST_URI'])		);}/** * Return the content type for specified feed type. * * @package WordPress * @subpackage Feed * @since 2.8.0 */function feed_content_type( $type = '' ) {	if ( empty($type) )		$type = get_default_feed();	$types = array(		'rss'  => 'application/rss+xml',		'rss2' => 'application/rss+xml',		'rss-http'  => 'text/xml',		'atom' => 'application/atom+xml',		'rdf'  => 'application/rdf+xml'	);	$content_type = ( !empty($types[$type]) ) ? $types[$type] : 'application/octet-stream';	return apply_filters( 'feed_content_type', $content_type, $type );}/** * Build SimplePie object based on RSS or Atom feed from URL. * * @since 2.8 * * @param string $url URL to retrieve feed * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success */function fetch_feed($url) {	require_once (ABSPATH . WPINC . '/class-feed.php');	$feed = new SimplePie();	$feed->set_feed_url($url);	$feed->set_cache_class('WP_Feed_Cache');	$feed->set_file_class('WP_SimplePie_File');	$feed->set_cache_duration(apply_filters('wp_feed_cache_transient_lifetime', 43200, $url));	do_action_ref_array( 'wp_feed_options', array( &$feed, $url ) );	$feed->init();	$feed->handle_content_type();	if ( $feed->error() )		return new WP_Error('simplepie-error', $feed->error());	return $feed;}
<?php/** * WordPress AJAX Process Execution. * * @package WordPress * @subpackage Administration *//** * Executing AJAX process. * * @since unknown */define('DOING_AJAX', true);define('WP_ADMIN', true);require_once('../wp-load.php');if ( ! isset( $_REQUEST['action'] ) )	die('-1');require_once('./includes/admin.php');@header('Content-Type: text/html; charset=' . get_option('blog_charset'));send_nosniff_header();do_action('admin_init');if ( ! is_user_logged_in() ) {	if ( isset( $_POST['action'] ) && $_POST['action'] == 'autosave' ) {		$id = isset($_POST['post_ID'])? (int) $_POST['post_ID'] : 0;		if ( ! $id )			die('-1');		$message = sprintf( __('<strong>ALERT: You are logged out!</strong> Could not save draft. <a href="%s" target="_blank">Please log in again.</a>'), wp_login_url() );		$x = new WP_Ajax_Response( array(			'what' => 'autosave',			'id' => $id,			'data' => $message		) );		$x->send();	}	if ( !empty( $_REQUEST['action'] ) )		do_action( 'wp_ajax_nopriv_' . $_REQUEST['action'] );	die('-1');}if ( isset( $_GET['action'] ) ) :switch ( $action = $_GET['action'] ) :case 'ajax-tag-search' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$s = $_GET['q']; // is this slashed already?	if ( isset($_GET['tax']) )		$taxonomy = sanitize_title($_GET['tax']);	else		die('0');	if ( false !== strpos( $s, ',' ) ) {		$s = explode( ',', $s );		$s = $s[count( $s ) - 1];	}	$s = trim( $s );	if ( strlen( $s ) < 2 )		die; // require 2 chars for matching	$results = $wpdb->get_col( "SELECT t.name FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = '$taxonomy' AND t.name LIKE ('%" . $s . "%')" );	echo join( $results, "\n" );	die;	break;case 'wp-compression-test' :	if ( !current_user_can( 'manage_options' ) )		die('-1');	if ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {		update_site_option('can_compress_scripts', 0);		die('0');	}	if ( isset($_GET['test']) ) {		header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );		header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );		header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );		header( 'Pragma: no-cache' );		header('Content-Type: application/x-javascript; charset=UTF-8');		$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );		$test_str = '"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh."';		 if ( 1 == $_GET['test'] ) {		 	echo $test_str;		 	die;		 } elseif ( 2 == $_GET['test'] ) {			if ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )				die('-1');			if ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {				header('Content-Encoding: deflate');				$out = gzdeflate( $test_str, 1 );			} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {				header('Content-Encoding: gzip');				$out = gzencode( $test_str, 1 );			} else {				die('-1');			}			echo $out;			die;		} elseif ( 'no' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 0);		} elseif ( 'yes' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 1);		}	}	die('0');	break;case 'imgedit-preview' :	$post_id = intval($_GET['postid']);	if ( empty($post_id) || !current_user_can('edit_post', $post_id) )		die('-1');	check_ajax_referer( "image_editor-$post_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	if ( ! stream_preview_image($post_id) )		die('-1');	die();	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'oembed-cache' :	$return = ( $wp_embed->cache_oembed( $_GET['post'] ) ) ? '1' : '0';	die( $return );	break;default :	do_action( 'wp_ajax_' . $_GET['action'] );	die('0');	break;endswitch;endif;/** * Sends back current comment total and new page links if they need to be updated. * * Contrary to normal success AJAX response ("1"), die with time() on success. * * @since 2.7 * * @param int $comment_id * @return die */function _wp_ajax_delete_comment_response( $comment_id ) {	$total = (int) @$_POST['_total'];	$per_page = (int) @$_POST['_per_page'];	$page = (int) @$_POST['_page'];	$url = esc_url_raw( @$_POST['_url'] );	// JS didn't send us everything we need to know. Just die with success message	if ( !$total || !$per_page || !$page || !$url )		die( (string) time() );	if ( --$total < 0 ) // Take the total from POST and decrement it (since we just deleted one)		$total = 0;	if ( 0 != $total % $per_page && 1 != mt_rand( 1, $per_page ) ) // Only do the expensive stuff on a page-break, and about 1 other time per page		die( (string) time() );	$post_id = 0;	$status = 'total_comments'; // What type of comment count are we looking for?	$parsed = parse_url( $url );	if ( isset( $parsed['query'] ) ) {		parse_str( $parsed['query'], $query_vars );		if ( !empty( $query_vars['comment_status'] ) )			$status = $query_vars['comment_status'];		if ( !empty( $query_vars['p'] ) )			$post_id = (int) $query_vars['p'];	}	$comment_count = wp_count_comments($post_id);	$time = time(); // The time since the last comment count	if ( isset( $comment_count->$status ) ) // We're looking for a known type of comment count		$total = $comment_count->$status;	// else use the decremented value from above	$page_links = paginate_links( array(		'base' => add_query_arg( 'apage', '%#%', $url ),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => ceil($total / $per_page),		'current' => $page	) );	$x = new WP_Ajax_Response( array(		'what' => 'comment',		'id' => $comment_id, // here for completeness - not used		'supplemental' => array(			'pageLinks' => $page_links,			'total' => $total,			'time' => $time		)	) );	$x->send();}function _wp_ajax_add_hierarchical_term() {	$action = $_POST['action'];	$taxonomy = get_taxonomy(substr($action, 4));	check_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );	if ( !current_user_can( $taxonomy->cap->edit_terms ) )		die('-1');	$names = explode(',', $_POST['new'.$taxonomy->name]);	$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;	if ( 0 > $parent )		$parent = 0;	if ( $taxonomy->name == 'category' )		$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();	else		$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();	$checked_categories = array_map( 'absint', (array) $post_category );	$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$category_nicename = sanitize_title($cat_name);		if ( '' === $category_nicename )			continue;		if ( !($cat_id = term_exists($cat_name, $taxonomy->name, $parent)) ) {			$new_term = wp_insert_term($cat_name, $taxonomy->name, array('parent' => $parent));			$cat_id = $new_term['term_id'];		}		$checked_categories[] = $cat_id;		if ( $parent ) // Do these all at once in a second			continue;		$category = get_term( $cat_id, $taxonomy->name );		ob_start();			wp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $cat_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	if ( $parent ) { // Foncy - replace the parent and all its children		$parent = get_term( $parent, $taxonomy->name );		$term_id = $parent->term_id;		while ( $parent->parent ) { // get the top parent			$parent = &get_term( $parent->parent, $taxonomy->name );			if ( is_wp_error( $parent ) )				break;			$term_id = $parent->term_id;		}		ob_start();			wp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $term_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	ob_start();		wp_dropdown_categories( array(			'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',			'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'		) );	$sup = ob_get_contents();	ob_end_clean();	$add['supplemental'] = array( 'newcat_parent' => $sup );	$x = new WP_Ajax_Response( $add );	$x->send();}$id = isset($_POST['id'])? (int) $_POST['id'] : 0;switch ( $action = $_POST['action'] ) :case 'delete-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) )		die( (string) time() );	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) )		die('-1');	check_ajax_referer( "delete-comment_$id" );	$status = wp_get_comment_status( $comment->comment_ID );	if ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {		if ( 'trash' == $status )			die( (string) time() );		$r = wp_trash_comment( $comment->comment_ID );	} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {		if ( 'trash' != $status )			die( (string) time() );		$r = wp_untrash_comment( $comment->comment_ID );	} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {		if ( 'spam' == $status )			die( (string) time() );		$r = wp_spam_comment( $comment->comment_ID );	} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {		if ( 'spam' != $status )			die( (string) time() );		$r = wp_unspam_comment( $comment->comment_ID );	} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {		$r = wp_delete_comment( $comment->comment_ID );	} else {		die('-1');	}	if ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts		_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'delete-tag' :	$tag_id = (int) $_POST['tag_ID'];	check_ajax_referer( "delete-tag_$tag_id" );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	if ( !current_user_can( $tax->cap->delete_terms ) )		die('-1');	$tag = get_term( $tag_id, $taxonomy );	if ( !$tag || is_wp_error( $tag ) )		die('1');	if ( wp_delete_term($tag_id, $taxonomy))		die('1');	else		die('0');	break;case 'delete-link-cat' :	check_ajax_referer( "delete-link-category_$id" );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$cat = get_term( $id, 'link_category' );	if ( !$cat || is_wp_error( $cat ) )		die('1');	$cat_name = get_term_field('name', $id, 'link_category');	$default = get_option('default_link_category');	// Don't delete the default cats.	if ( $id == $default ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => new WP_Error( 'default-link-cat', sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name) )		) );		$x->send();	}	$r = wp_delete_term($id, 'link_category', array('default' => $default));	if ( !$r )		die('0');	if ( is_wp_error($r) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => $r		) );		$x->send();	}	die('1');	break;case 'delete-link' :	check_ajax_referer( "delete-bookmark_$id" );	if ( !current_user_can( 'manage_links' ) )		die('-1');	$link = get_bookmark( $id );	if ( !$link || is_wp_error( $link ) )		die('1');	if ( wp_delete_link( $id ) )		die('1');	else		die('0');	break;case 'delete-meta' :	check_ajax_referer( "delete-meta_$id" );	if ( !$meta = get_post_meta_by_id( $id ) )		die('1');	if ( !current_user_can( 'edit_post', $meta->post_id ) )		die('-1');	if ( delete_meta( $meta->meta_id ) )		die('1');	die('0');	break;case 'delete-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'trash-post' :case 'untrash-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( 'trash-post' == $action )		$done = wp_trash_post( $id );	else		$done = wp_untrash_post( $id );	if ( $done )		die('1');	die('0');	break;case 'delete-page' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_page', $id ) )		die('-1');	if ( !get_page( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'dim-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))		) );		$x->send();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) && !current_user_can( 'moderate_comments' ) )		die('-1');	$current = wp_get_comment_status( $comment->comment_ID );	if ( $_POST['new'] == $current )		die( (string) time() );	check_ajax_referer( "approve-comment_$id" );	if ( in_array( $current, array( 'unapproved', 'spam' ) ) )		$result = wp_set_comment_status( $comment->comment_ID, 'approve', true );	else		$result = wp_set_comment_status( $comment->comment_ID, 'hold', true );	if ( is_wp_error($result) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => $result		) );		$x->send();	}	// Decide if we need to send back '1' or a more complicated response including page links and comment counts	_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'add-link-category' : // On the Fly	check_ajax_referer( $action );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$names = explode(',', $_POST['newcat']);	$x = new WP_Ajax_Response();	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$slug = sanitize_title($cat_name);		if ( '' === $slug )			continue;		if ( !$cat_id = term_exists( $cat_name, 'link_category' ) ) {			$cat_id = wp_insert_term( $cat_name, 'link_category' );		}		$cat_id = $cat_id['term_id'];		$cat_name = esc_html(stripslashes($cat_name));		$x->add( array(			'what' => 'link-category',			'id' => $cat_id,			'data' => "<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='" . esc_attr($cat_id) . "' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>",			'position' => -1		) );	}	$x->send();	break;case 'add-link-cat' : // From Blogroll -> Categories	check_ajax_referer( 'add-link-category' );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	if ( '' === trim($_POST['name']) ) {		$x = new WP_Ajax_Response( array(			'what' => 'link-cat',			'id' => new WP_Error( 'name', __('You did not enter a category name.') )		) );		$x->send();	}	$r = wp_insert_term($_POST['name'], 'link_category', $_POST );	if ( is_wp_error( $r ) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $r		) );		$x->send();	}	extract($r, EXTR_SKIP);	if ( !$link_cat = link_cat_row( $term_id ) )		die('0');	$x = new WP_Ajax_Response( array(		'what' => 'link-cat',		'id' => $term_id,		'position' => -1,		'data' => $link_cat	) );	$x->send();	break;case 'add-tag' : // From Manage->Tags	check_ajax_referer( 'add-tag' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	$x = new WP_Ajax_Response();	if ( !current_user_can( $tax->cap->edit_terms ) )		die('-1');	$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );	if ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {		$message = __('An error has occured. Please reload the page and try again.');		if ( is_wp_error($tag) && $tag->get_error_message() )			$message = $tag->get_error_message();		$x->add( array(			'what' => 'taxonomy',			'data' => new WP_Error('error', $message )		) );		$x->send();	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	$level = 0;	$tag_full_name = false;	$tag_full_name = $tag->name;	if ( is_taxonomy_hierarchical($taxonomy) ) {		$_tag = $tag;		while ( $_tag->parent  ) {			$_tag = get_term( $_tag->parent, $taxonomy );			$tag_full_name = $_tag->name . ' &#8212; ' . $tag_full_name;			$level++;		}		$noparents = _tag_row( $tag, $level, $taxonomy );	}	$tag->name = $tag_full_name;	$parents = _tag_row( $tag, 0, $taxonomy);	$x->add( array(		'what' => 'taxonomy',		'supplemental' => compact('parents', 'noparents')		) );	$x->add( array(		'what' => 'term',		'position' => $level,		'supplemental' => get_term( $tag->term_id, $taxonomy, ARRAY_A ) //Refetch as $tag has been contaminated by the full name.		) );	$x->send();	break;case 'get-tagcloud' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	if ( isset($_POST['tax']) )		$taxonomy = sanitize_title($_POST['tax']);	else		die('0');	$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );	if ( empty( $tags ) ) {		$tax = get_taxonomy( $taxonomy );		die( isset( $tax->no_tagcloud ) ? $tax->no_tagcloud : __('No tags found!') );	}	if ( is_wp_error($tags) )		die($tags->get_error_message());	foreach ( $tags as $key => $tag ) {		$tags[ $key ]->link = '#';		$tags[ $key ]->id = $tag->term_id;	}	// We need raw tag names here, so don't filter the output	$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );	if ( empty($return) )		die('0');	echo $return;	exit;	break;case 'add-comment' :	check_ajax_referer( $action );	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$search = isset($_POST['s']) ? $_POST['s'] : false;	$status = isset($_POST['comment_status']) ? $_POST['comment_status'] : 'all';	$per_page = isset($_POST['per_page']) ?  (int) $_POST['per_page'] + 8 : 28;	$start = isset($_POST['page']) ? ( intval($_POST['page']) * $per_page ) -1 : $per_page - 1;	if ( 1 > $start )		$start = 27;	$mode = isset($_POST['mode']) ? $_POST['mode'] : 'detail';	$p = isset($_POST['p']) ? $_POST['p'] : 0;	$comment_type = isset($_POST['comment_type']) ? $_POST['comment_type'] : '';	list($comments, $total) = _wp_get_comment_list( $status, $search, $start, 1, $p, $comment_type );	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );	if ( !$comments )		die('1');	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, $mode, $status, true, true );			$comment_list_item = ob_get_contents();		ob_end_clean();		$x->add( array(			'what' => 'comment',			'id' => $comment->comment_ID,			'data' => $comment_list_item		) );	}	$x->send();	break;case 'get-comments' :	check_ajax_referer( $action );	$post_ID = (int) $_POST['post_ID'];	if ( !current_user_can( 'edit_post', $post_ID ) )		die('-1');	$start = isset($_POST['start']) ? intval($_POST['start']) : 0;	$num = isset($_POST['num']) ? intval($_POST['num']) : 10;	list($comments, $total) = _wp_get_comment_list( false, false, $start, $num, $post_ID );	if ( !$comments )		die('1');	$comment_list_item = '';	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, 'single', false, false );			$comment_list_item .= ob_get_contents();		ob_end_clean();	}	$x->add( array(		'what' => 'comments',		'data' => $comment_list_item	) );	$x->send();	break;case 'replyto-comment' :	check_ajax_referer( $action, '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( !current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	$status = $wpdb->get_var( $wpdb->prepare("SELECT post_status FROM $wpdb->posts WHERE ID = %d", $comment_post_ID) );	if ( empty($status) )		die('1');	elseif ( in_array($status, array('draft', 'pending', 'trash') ) )		die( __('Error: you are replying to a comment on a draft post.') );	$user = wp_get_current_user();	if ( $user->ID ) {		$comment_author       = $wpdb->escape($user->display_name);		$comment_author_email = $wpdb->escape($user->user_email);		$comment_author_url   = $wpdb->escape($user->user_url);		$comment_content      = trim($_POST['content']);		if ( current_user_can('unfiltered_html') ) {			if ( wp_create_nonce('unfiltered-html-comment_' . $comment_post_ID) != $_POST['_wp_unfiltered_html_comment'] ) {				kses_remove_filters(); // start with a clean slate				kses_init_filters(); // set up the filters			}		}	} else {		die( __('Sorry, you must be logged in to reply to a comment.') );	}	if ( '' == $comment_content )		die( __('Error: please type a comment.') );	$comment_parent = absint($_POST['comment_ID']);	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');	$comment_id = wp_new_comment( $commentdata );	$comment = get_comment($comment_id);	if ( ! $comment ) die('1');	$modes = array( 'single', 'detail', 'dashboard' );	$mode = isset($_POST['mode']) && in_array( $_POST['mode'], $modes ) ? $_POST['mode'] : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		if ( 'dashboard' == $mode ) {			require_once( ABSPATH . 'wp-admin/includes/dashboard.php' );			_wp_dashboard_recent_comments_row( $comment, false );		} else {			_wp_comment_row( $comment->comment_ID, $mode, false, $checkbox );		}		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'edit-comment' :	check_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( ! current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	if ( '' == $_POST['content'] )		die( __('Error: please type a comment.') );	$comment_id = (int) $_POST['comment_ID'];	$_POST['comment_status'] = $_POST['status'];	edit_comment();	$mode = ( isset($_POST['mode']) && 'single' == $_POST['mode'] ) ? 'single' : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	$comments_listing = isset($_POST['comments_listing']) ? $_POST['comments_listing'] : '';	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		_wp_comment_row( $comment_id, $mode, $comments_listing, $checkbox );		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'edit_comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'add-menu-item' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	$item_ids = wp_save_nav_menu_items( 0, $_POST['menu-item'] );	if ( is_wp_error( $item_ids ) )		die('-1');	foreach ( (array) $item_ids as $menu_item_id ) {		$menu_obj = get_post( $menu_item_id );		if ( ! empty( $menu_obj->ID ) ) {			$menu_obj = wp_setup_nav_menu_item( $menu_obj );			$menu_obj->label = $menu_obj->title; // don't show "(pending)" in ajax-added items			$menu_items[] = $menu_obj;		}	}	if ( ! empty( $menu_items ) ) {		$args = array(			'after' => '',			'before' => '',			'link_after' => '',			'link_before' => '',			'walker' => new Walker_Nav_Menu_Edit,		);		echo walk_nav_menu_tree( $menu_items, 0, (object) $args );	}	break;case 'add-meta' :	check_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );	$c = 0;	$pid = (int) $_POST['post_id'];	$post = get_post( $pid );	if ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {		if ( !current_user_can( 'edit_post', $pid ) )			die('-1');		if ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )			die('1');		if ( $post->post_status == 'auto-draft' ) {			$save_POST = $_POST; // Backup $_POST			$_POST = array(); // Make it empty for edit_post()			$_POST['action'] = 'draft'; // Warning fix			$_POST['post_ID'] = $pid;			$_POST['post_type'] = $post->post_type;			$_POST['post_status'] = 'draft';			$now = current_time('timestamp', 1);			$_POST['post_title'] = sprintf('Draft created on %s at %s', date(get_option('date_format'), $now), date(get_option('time_format'), $now));			if ( $pid = edit_post() ) {				if ( is_wp_error( $pid ) ) {					$x = new WP_Ajax_Response( array(						'what' => 'meta',						'data' => $pid					) );					$x->send();				}				$_POST = $save_POST; // Now we can restore original $_POST again				if ( !$mid = add_meta( $pid ) )					die(__('Please provide a custom field value.'));			} else {				die('0');			}		} else if ( !$mid = add_meta( $pid ) ) {			die(__('Please provide a custom field value.'));		}		$meta = get_post_meta_by_id( $mid );		$pid = (int) $meta->post_id;		$meta = get_object_vars( $meta );		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid,			'data' => _list_meta_row( $meta, $c ),			'position' => 1,			'supplemental' => array('postid' => $pid)		) );	} else { // Update?		$mid = (int) array_pop(array_keys($_POST['meta']));		$key = $_POST['meta'][$mid]['key'];		$value = $_POST['meta'][$mid]['value'];		if ( '' == trim($key) )			die(__('Please provide a custom field name.'));		if ( '' == trim($value) )			die(__('Please provide a custom field value.'));		if ( !$meta = get_post_meta_by_id( $mid ) )			die('0'); // if meta doesn't exist		if ( !current_user_can( 'edit_post', $meta->post_id ) )			die('-1');		if ( $meta->meta_value != stripslashes($value) || $meta->meta_key != stripslashes($key) ) {			if ( !$u = update_meta( $mid, $key, $value ) )				die('0'); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).		}		$key = stripslashes($key);		$value = stripslashes($value);		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid, 'old_id' => $mid,			'data' => _list_meta_row( array(				'meta_key' => $key,				'meta_value' => $value,				'meta_id' => $mid			), $c ),			'position' => 0,			'supplemental' => array('postid' => $meta->post_id)		) );	}	$x->send();	break;case 'add-user' :	check_ajax_referer( $action );	if ( !current_user_can('create_users') )		die('-1');	require_once(ABSPATH . WPINC . '/registration.php');	if ( !$user_id = add_user() )		die('0');	elseif ( is_wp_error( $user_id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'user',			'id' => $user_id		) );		$x->send();	}	$user_object = new WP_User( $user_id );	$x = new WP_Ajax_Response( array(		'what' => 'user',		'id' => $user_id,		'data' => user_row( $user_object, '', $user_object->roles[0] ),		'supplemental' => array(			'show-link' => sprintf(__( 'User <a href="#%s">%s</a> added' ), "user-$user_id", $user_object->user_login),			'role' => $user_object->roles[0]		)	) );	$x->send();	break;case 'autosave' : // The name of this action is hardcoded in edit_post()	define( 'DOING_AUTOSAVE', true );	$nonce_age = check_ajax_referer( 'autosave', 'autosavenonce' );	global $current_user;	$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$do_autosave = (bool) $_POST['autosave'];	$do_lock = true;	$data = '';	/* translators: draft saved date format, see http://php.net/date */	$draft_saved_date_format = __('g:i:s a');	/* translators: %s: date and time */	$message = sprintf( __('Draft saved at %s.'), date_i18n( $draft_saved_date_format ) );	$supplemental = array();	if ( isset($login_grace_period) )		$supplemental['session_expired'] = add_query_arg( 'interim-login', 1, wp_login_url() );	$id = $revision_id = 0;	$post_ID = (int) $_POST['post_ID'];	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'auto-draft' == $post->post_status )		$_POST['post_status'] = 'draft';	if ( $last = wp_check_post_lock( $post->ID ) ) {		$do_autosave = $do_lock = false;		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		$data = new WP_Error( 'locked', sprintf(			$_POST['post_type'] == 'page' ? __( 'Autosave disabled: %s is currently editing this page.' ) : __( 'Autosave disabled: %s is currently editing this post.' ),			esc_html( $last_user_name )		) );		$supplemental['disable_autosave'] = 'disable';	}	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			die(__('You are not allowed to edit this post.'));	}	if ( $do_autosave ) {		// Drafts and auto-drafts are just overwritten by autosave		if ( 'auto-draft' == $post->post_status || 'draft' == $post->post_status ) {			$id = edit_post();		} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.			$revision_id = wp_create_post_autosave( $post->ID );			if ( is_wp_error($revision_id) )				$id = $revision_id;			else				$id = $post->ID;		}		$data = $message;	} else {		if ( isset( $_POST['auto_draft'] ) && '1' == $_POST['auto_draft'] )			$id = 0; // This tells us it didn't actually save		else			$id = $post->ID;	}	if ( $do_lock && ( isset( $_POST['auto_draft'] ) && ( $_POST['auto_draft'] != '1' ) ) && $id && is_numeric($id) )		wp_set_post_lock( $id );	if ( $nonce_age == 2 ) {		$supplemental['replace-autosavenonce'] = wp_create_nonce('autosave');		$supplemental['replace-getpermalinknonce'] = wp_create_nonce('getpermalink');		$supplemental['replace-samplepermalinknonce'] = wp_create_nonce('samplepermalink');		$supplemental['replace-closedpostboxesnonce'] = wp_create_nonce('closedpostboxes');		if ( $id ) {			if ( $_POST['post_type'] == 'post' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-post_' . $id);			elseif ( $_POST['post_type'] == 'page' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-page_' . $id);		}	}	$x = new WP_Ajax_Response( array(		'what' => 'autosave',		'id' => $id,		'data' => $id ? $data : '',		'supplemental' => $supplemental	) );	$x->send();	break;case 'closed-postboxes' :	check_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );	$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();	$closed = array_filter($closed);	$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();	$hidden = array_filter($hidden);	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($closed) )		update_user_option($user->ID, "closedpostboxes_$page", $closed, true);	if ( is_array($hidden) ) {		$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown		update_user_option($user->ID, "metaboxhidden_$page", $hidden, true);	}	die('1');	break;case 'hidden-columns' :	check_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );	$hidden = isset( $_POST['hidden'] ) ? $_POST['hidden'] : '';	$hidden = explode( ',', $_POST['hidden'] );	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($hidden) )		update_user_option($user->ID, "manage{$page}columnshidden", $hidden, true);	die('1');	break;case 'menu-get-metabox' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	if ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {		$type = 'posttype';		$callback = 'wp_nav_menu_item_post_type_meta_box';		$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {		$type = 'taxonomy';		$callback = 'wp_nav_menu_item_taxonomy_meta_box';		$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );	}	if ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {		$item = apply_filters( 'nav_menu_meta_box_object', $items[ $_POST['item-object'] ] );		ob_start();		call_user_func_array($callback, array(			null,			array(				'id' => 'add-' . $item->name,				'title' => $item->labels->name,				'callback' => $callback,				'args' => $item,			)		));		$markup = ob_get_clean();		echo json_encode(array(			'replace-id' => $type . '-' . $item->name,			'markup' => $markup,		));	}	exit;	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'menu-locations-save':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	if ( ! isset( $_POST['menu-locations'] ) )		die('0');	set_theme_mod( 'nav_menu_locations', $_POST['menu-locations'] );	die('1');	break;case 'meta-box-order':	check_ajax_referer( 'meta-box-order' );	$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;	$page_columns = isset( $_POST['page_columns'] ) ? (int) $_POST['page_columns'] : 0;	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( $order )		update_user_option($user->ID, "meta-box-order_$page", $order, true);	if ( $page_columns )		update_user_option($user->ID, "screen_layout_$page", $page_columns, true);	die('1');	break;case 'get-permalink':	check_ajax_referer( 'getpermalink', 'getpermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	die(add_query_arg(array('preview' => 'true'), get_permalink($post_id)));break;case 'sample-permalink':	check_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	$title = isset($_POST['new_title'])? $_POST['new_title'] : '';	$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;	die(get_sample_permalink_html($post_id, $title, $slug));break;case 'inline-save':	check_ajax_referer( 'inlineeditnonce', '_inline_edit' );	if ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )		exit;	if ( 'page' == $_POST['post_type'] ) {		if ( ! current_user_can( 'edit_page', $post_ID ) )			die( __('You are not allowed to edit this page.') );	} else {		if ( ! current_user_can( 'edit_post', $post_ID ) )			die( __('You are not allowed to edit this post.') );	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	if ( $last = wp_check_post_lock( $post_ID ) ) {		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		printf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),	esc_html( $last_user_name ) );		exit;	}	$data = &$_POST;	$post = get_post( $post_ID, ARRAY_A );	$post = add_magic_quotes($post); //since it is from db	$data['content'] = $post['post_content'];	$data['excerpt'] = $post['post_excerpt'];	// rename	$data['user_ID'] = $GLOBALS['user_ID'];	if ( isset($data['post_parent']) )		$data['parent_id'] = $data['post_parent'];	// status	if ( isset($data['keep_private']) && 'private' == $data['keep_private'] )		$data['post_status'] = 'private';	else		$data['post_status'] = $data['_status'];	if ( empty($data['comment_status']) )		$data['comment_status'] = 'closed';	if ( empty($data['ping_status']) )		$data['ping_status'] = 'closed';	// update the post	edit_post();	$post = array();	if ( 'page' == $_POST['post_type'] ) {		$post[] = get_post($_POST['post_ID']);		page_rows($post);	} elseif ( 'post' == $_POST['post_type'] || in_array($_POST['post_type'], get_post_types( array('public' => true) ) ) ) {		$mode = $_POST['post_view'];		$post[] = get_post($_POST['post_ID']);		post_rows($post);	}	exit;	break;case 'inline-save-tax':	check_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : false;	if ( ! $taxonomy )		die( __('Cheatin&#8217; uh?') );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		die( __('Cheatin&#8217; uh?') );	if ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )		die(-1);	switch ($_POST['tax_type']) {		case 'link-cat' :			$updated = wp_update_term($id, 'link_category', $_POST);			if ( $updated && !is_wp_error($updated) )				echo link_cat_row($updated['term_id']);			else				die( __('Category not updated.') );			break;		case 'tag' :			$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';			$tag = get_term( $id, $taxonomy );			$_POST['description'] = $tag->description;			$updated = wp_update_term($id, $taxonomy, $_POST);			if ( $updated && !is_wp_error($updated) ) {				$tag = get_term( $updated['term_id'], $taxonomy );				if ( !$tag || is_wp_error( $tag ) ) {					if ( is_wp_error($tag) && $tag->get_error_message() )						die( $tag->get_error_message() );					die( __('Item not updated.') );				}				set_current_screen( 'edit-' . $taxonomy );				echo _tag_row($tag, 0, $taxonomy);			} else {				if ( is_wp_error($updated) && $updated->get_error_message() )					die( $updated->get_error_message() );				die( __('Item not updated.') );			}			break;	}	exit;	break;case 'find_posts':	check_ajax_referer( 'find-posts' );	if ( empty($_POST['ps']) )		exit;	if ( !empty($_POST['post_type']) && in_array( $_POST['post_type'], get_post_types() ) )		$what = $_POST['post_type'];	else		$what = 'post';	$s = stripslashes($_POST['ps']);	preg_match_all('/".*?("|$)|((?<=[\\s",+])|^)[^\\s",+]+/', $s, $matches);	$search_terms = array_map('_search_terms_tidy', $matches[0]);	$searchand = $search = '';	foreach ( (array) $search_terms as $term ) {		$term = addslashes_gpc($term);		$search .= "{$searchand}(($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%'))";		$searchand = ' AND ';	}	$term = $wpdb->escape($s);	if ( count($search_terms) > 1 && $search_terms[0] != $s )		$search .= " OR ($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%')";	$posts = $wpdb->get_results( "SELECT ID, post_title, post_status, post_date FROM $wpdb->posts WHERE post_type = '$what' AND post_status IN ('draft', 'publish') AND ($search) ORDER BY post_date_gmt DESC LIMIT 50" );	if ( ! $posts ) {		$posttype = get_post_type_object($what);		exit($posttype->labels->not_found);	}	$html = '<table class="widefat" cellspacing="0"><thead><tr><th class="found-radio"><br /></th><th>'.__('Title').'</th><th>'.__('Date').'</th><th>'.__('Status').'</th></tr></thead><tbody>';	foreach ( $posts as $post ) {		switch ( $post->post_status ) {			case 'publish' :			case 'private' :				$stat = __('Published');				break;			case 'future' :				$stat = __('Scheduled');				break;			case 'pending' :				$stat = __('Pending Review');				break;			case 'draft' :				$stat = __('Draft');				break;		}		if ( '0000-00-00 00:00:00' == $post->post_date ) {			$time = '';		} else {			/* translators: date format in table columns, see http://php.net/date */			$time = mysql2date(__('Y/m/d'), $post->post_date);		}		$html .= '<tr class="found-posts"><td class="found-radio"><input type="radio" id="found-'.$post->ID.'" name="found_post_id" value="' . esc_attr($post->ID) . '"></td>';		$html .= '<td><label for="found-'.$post->ID.'">'.esc_html( $post->post_title ).'</label></td><td>'.esc_html( $time ).'</td><td>'.esc_html( $stat ).'</td></tr>'."\n\n";	}	$html .= '</tbody></table>';	$x = new WP_Ajax_Response();	$x->add( array(		'what' => $what,		'data' => $html	));	$x->send();	break;case 'lj-importer' :	check_ajax_referer( 'lj-api-import' );	if ( !current_user_can( 'publish_posts' ) )		die('-1');	if ( empty( $_POST['step'] ) )		die( '-1' );	define('WP_IMPORTING', true);	include( ABSPATH . 'wp-admin/import/livejournal.php' );	$result = $lj_api_import->{ 'step' . ( (int) $_POST['step'] ) }();	if ( is_wp_error( $result ) )		echo $result->get_error_message();	die;	break;case 'widgets-order' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	// save widgets order for all sidebars	if ( is_array($_POST['sidebars']) ) {		$sidebars = array();		foreach ( $_POST['sidebars'] as $key => $val ) {			$sb = array();			if ( !empty($val) ) {				$val = explode(',', $val);				foreach ( $val as $k => $v ) {					if ( strpos($v, 'widget-') === false )						continue;					$sb[$k] = substr($v, strpos($v, '_') + 1);				}			}			$sidebars[$key] = $sb;		}		wp_set_sidebars_widgets($sidebars);		die('1');	}	die('-1');	break;case 'save-widget' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	do_action('load-widgets.php');	do_action('widgets.php');	do_action('sidebar_admin_setup');	$id_base = $_POST['id_base'];	$widget_id = $_POST['widget-id'];	$sidebar_id = $_POST['sidebar'];	$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;	$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;	$error = '<p>' . __('An error has occured. Please reload the page and try again.') . '</p>';	$sidebars = wp_get_sidebars_widgets();	$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();	// delete	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		if ( !isset($wp_registered_widgets[$widget_id]) )			die($error);		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {		if ( !$multi_number )			die($error);		$_POST['widget-' . $id_base] = array( $multi_number => array_shift($settings) );		$widget_id = $id_base . '-' . $multi_number;		$sidebar[] = $widget_id;	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name == $id_base ) {			if ( !is_callable( $control['callback'] ) )				continue;			ob_start();				call_user_func_array( $control['callback'], $control['params'] );			ob_end_clean();			break;		}	}	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		$sidebars[$sidebar_id] = $sidebar;		wp_set_sidebars_widgets($sidebars);		echo "deleted:$widget_id";		die();	}	if ( !empty($_POST['add_new']) )		die();	if ( $form = $wp_registered_widget_controls[$widget_id] )		call_user_func_array( $form['callback'], $form['params'] );	die();	break;case 'image-editor':	$attachment_id = intval($_POST['postid']);	if ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )		die('-1');	check_ajax_referer( "image_editor-$attachment_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	$msg = false;	switch ( $_POST['do'] ) {		case 'save' :			$msg = wp_save_image($attachment_id);			$msg = json_encode($msg);			die($msg);			break;		case 'scale' :			$msg = wp_save_image($attachment_id);			break;		case 'restore' :			$msg = wp_restore_image($attachment_id);			break;	}	wp_image_editor($attachment_id, $msg);	die();	break;case 'set-post-thumbnail':	$post_ID = intval( $_POST['post_id'] );	if ( !current_user_can( 'edit_post', $post_ID ) )		die( '-1' );	$thumbnail_id = intval( $_POST['thumbnail_id'] );	check_ajax_referer( "set_post_thumbnail-$post_ID" );	if ( $thumbnail_id == '-1' ) {		delete_post_meta( $post_ID, '_thumbnail_id' );		die( _wp_post_thumbnail_html() );	}	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'thumbnail' );		if ( !empty( $thumbnail_html ) ) {			update_post_meta( $post_ID, '_thumbnail_id', $thumbnail_id );			die( _wp_post_thumbnail_html( $thumbnail_id ) );		}	}	die( '0' );	break;default :	do_action( 'wp_ajax_' . $_POST['action'] );	die('0');	break;endswitch;?>
<?php/** * Install theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_themes') )	wp_die(__('You do not have sufficient permissions to install themes on this site.'));include(ABSPATH . 'wp-admin/includes/theme-install.php');$title = __('Install Themes');$parent_file = 'themes.php';$submenu_file = 'themes.php';wp_reset_vars( array('tab', 'paged') );wp_enqueue_style( 'theme-install' );wp_enqueue_script( 'theme-install' );add_thickbox();wp_enqueue_script( 'theme-preview' );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Theme Installer');//$tabs['popular']  = _x('Popular','Theme Installer');$tabs['new']      = _x('Newest','Theme Installer');$tabs['updated']  = _x('Recently Updated','Theme Installer');$nonmenu_tabs = array('theme-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_themes_tabs', $tabs );$nonmenu_tabs = apply_filters('install_themes_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;$body_id = $tab;do_action('install_themes_pre_' . $tab); //Used to override the general interface, Eg, install or theme information.$help = '<p>' . sprintf(__('You can find additional themes for your site by using the Theme Browser/Installer on this screen, which will display themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. These themes are designed and developed by third parties, are available free of charge, and are licensed under the GNU General Public License, version 2, just like WordPress.'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p>' . __('You can Search for themes by keyword, author, or tag, or can get more specific and search by criteria listed in the feature filter. Alternately, you can browse the themes that are Featured, Newest, or Recently Updated. When you find a theme you like, you can preview it or install it.') . '</p>';$help .= '<p>' . __('You can Upload a theme manually if you have already downloaded its ZIP archive onto your computer (make sure it is from a trusted and original source). You can also do it the old-fashioned way and copy a downloaded theme&#8217;s folder via FTP into your <code>/wp-content/themes</code> directory.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes#Adding_New_Themes" target="_blank">Documentation on Adding New Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab"><?php echo esc_html_x('Manage Themes', 'theme'); ?></a><a href="theme-install.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('theme-install.php?tab='. $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_themes_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
