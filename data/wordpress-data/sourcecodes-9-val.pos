<?php/** * Template WordPress Administration API. * * A Big Mess. Also some neat functions that are nicely written. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since 2.7 * * Outputs the HTML for the hidden table rows used in Categories, Link Categories and Tags quick edit. * * @param string $type "edit-tags", "categoried" or "edit-link-categories" * @param string $taxonomy The taxonomy of the row. * @return */function inline_edit_term_row($type, $taxonomy) {	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		return;	$columns = get_column_headers($type);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($type) ) );	$col_count = count($columns) - count($hidden);	?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<tr id="inline-edit" class="inline-edit-row" style="display: none"><td colspan="<?php echo $col_count; ?>">		<fieldset><div class="inline-edit-col">			<h4><?php _e( 'Quick Edit' ); ?></h4>			<label>				<span class="title"><?php _e( 'Name' ); ?></span>				<span class="input-text-wrap"><input type="text" name="name" class="ptitle" value="" /></span>			</label><?php if ( !is_multisite() ) { ?>			<label>				<span class="title"><?php _e( 'Slug' ); ?></span>				<span class="input-text-wrap"><input type="text" name="slug" class="ptitle" value="" /></span>			</label><?php } ?>		</div></fieldset><?php	$core_columns = array( 'cb' => true, 'description' => true, 'name' => true, 'slug' => true, 'posts' => true );	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( 'quick_edit_custom_box', $column_name, $type, $taxonomy );	}?>	<p class="inline-edit-save submit">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="cancel button-secondary alignleft"><?php _e('Cancel'); ?></a>		<?php $update_text = $tax->labels->update_item; ?>		<a accesskey="s" href="#inline-edit" title="<?php echo esc_attr( $update_text ); ?>" class="save button-primary alignright"><?php echo $update_text; ?></a>		<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<span class="error" style="display:none;"></span>		<?php wp_nonce_field( 'taxinlineeditnonce', '_inline_edit', false ); ?>		<input type="hidden" name="taxonomy" value="<?php echo esc_attr( $tax->name ); ?>" />		<br class="clear" />	</p>	</td></tr>	</tbody></table></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $category * @param unknown_type $name_override * @return unknown */function link_cat_row( $category, $name_override = false ) {	static $row_class = '';	if ( !$category = get_term( $category, 'link_category', OBJECT, 'display' ) )		return false;	if ( is_wp_error( $category ) )		return $category;	$default_cat_id = (int) get_option( 'default_link_category' );	$name = ( $name_override ? $name_override : $category->name );	$edit_link = "link-category.php?action=edit&amp;cat_ID=$category->term_id";	if ( current_user_can( 'manage_categories' ) ) {		$edit = "<a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $category->name)) . "'>$name</a><br />";		$actions = array();		$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		if ( $default_cat_id != $category->term_id )			$actions['delete'] = "<a class='delete:the-list:link-cat-$category->term_id submitdelete' href='" . wp_nonce_url("link-category.php?action=delete&amp;cat_ID=$category->term_id", 'delete-link-category_' . $category->term_id) . "'>" . __('Delete') . "</a>";		$actions = apply_filters('link_cat_row_actions', $actions, $category);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';	} else {		$edit = $name;	}	$row_class = 'alternate' == $row_class ? '' : 'alternate';	$qe_data = get_term_to_edit($category->term_id, 'link_category');	$category->count = number_format_i18n( $category->count );	$count = ( $category->count > 0 ) ? "<a href='link-manager.php?cat_id=$category->term_id'>$category->count</a>" : $category->count;	$output = "<tr id='link-cat-$category->term_id' class='iedit $row_class'>";	$columns = get_column_headers('edit-link-categories');	$hidden = get_hidden_columns('edit-link-categories');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$output .= "<th scope='row' class='check-column'>";				if ( absint( get_option( 'default_link_category' ) ) != $category->term_id ) {					$output .= "<input type='checkbox' name='delete[]' value='$category->term_id' />";				} else {					$output .= "&nbsp;";				}				$output .= "</th>";				break;			case 'name':				$output .= "<td $attributes>$edit";				$output .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';				$output .= '<div class="name">' . $qe_data->name . '</div>';				$output .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';				$output .= '<div class="cat_parent">' . $qe_data->parent . '</div></div></td>';				break;			case 'description':				$output .= "<td $attributes>$category->description</td>";				break;			case 'slug':				$output .= "<td $attributes>" . apply_filters('editable_slug', $category->slug) . "</td>";				break;			case 'links':				$attributes = 'class="links column-links num"' . $style;				$output .= "<td $attributes>$count</td>";				break;			default:				$output .= "<td $attributes>";				$output .= apply_filters('manage_link_categories_custom_column', '', $column_name, $category->term_id);				$output .= "</td>";		}	}	$output .= '</tr>';	return $output;}//// Category Checklists///** * {@internal Missing Short Description}} * * @since unknown */class Walker_Category_Checklist extends Walker {	var $tree_type = 'category';	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id'); //TODO: decouple this	function start_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	function end_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	function start_el(&$output, $category, $depth, $args) {		extract($args);		if ( empty($taxonomy) )			$taxonomy = 'category';		if ( $taxonomy == 'category' )			$name = 'post_category';		else			$name = 'tax_input['.$taxonomy.']';		$class = in_array( $category->term_id, $popular_cats ) ? ' class="popular-category"' : '';		$output .= "\n<li id='{$taxonomy}-{$category->term_id}'$class>" . '<label class="selectit"><input value="' . $category->term_id . '" type="checkbox" name="'.$name.'[]" id="in-'.$taxonomy.'-' . $category->term_id . '"' . checked( in_array( $category->term_id, $selected_cats ), true, false ) . disabled( empty( $args['disabled'] ), false, false ) . ' /> ' . esc_html( apply_filters('the_category', $category->name )) . '</label>';	}	function end_el(&$output, $category, $depth, $args) {		$output .= "</li>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @param unknown_type $descendants_and_self * @param unknown_type $selected_cats * @param unknown_type $popular_cats */function wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {	wp_terms_checklist($post_id,	 	array(			'taxonomy' => 'category',			'descendants_and_self' => $descendants_and_self,			'selected_cats' => $selected_cats,			'popular_cats' => $popular_cats,			'walker' => $walker,			'checked_ontop' => $checked_ontop  ));}/** * Taxonomy independent version of wp_category_checklist * * @param int $post_id * @param array $args */function wp_terms_checklist($post_id = 0, $args = array()) { 	$defaults = array(		'descendants_and_self' => 0,		'selected_cats' => false,		'popular_cats' => false,		'walker' => null,		'taxonomy' => 'category',		'checked_ontop' => true	);	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	if ( empty($walker) || !is_a($walker, 'Walker') )		$walker = new Walker_Category_Checklist;	$descendants_and_self = (int) $descendants_and_self;	$args = array('taxonomy' => $taxonomy);	$tax = get_taxonomy($taxonomy);	$args['disabled'] = !current_user_can($tax->cap->assign_terms);	if ( is_array( $selected_cats ) )		$args['selected_cats'] = $selected_cats;	elseif ( $post_id )		$args['selected_cats'] = wp_get_object_terms($post_id, $taxonomy, array_merge($args, array('fields' => 'ids')));	else		$args['selected_cats'] = array();	if ( is_array( $popular_cats ) )		$args['popular_cats'] = $popular_cats;	else		$args['popular_cats'] = get_terms( $taxonomy, array( 'fields' => 'ids', 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );	if ( $descendants_and_self ) {		$categories = (array) get_terms($taxonomy, array( 'child_of' => $descendants_and_self, 'hierarchical' => 0, 'hide_empty' => 0 ) );		$self = get_term( $descendants_and_self, $taxonomy );		array_unshift( $categories, $self );	} else {		$categories = (array) get_terms($taxonomy, array('get' => 'all'));	}	if ( $checked_ontop ) {		// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)		$checked_categories = array();		$keys = array_keys( $categories );		foreach( $keys as $k ) {			if ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {				$checked_categories[] = $categories[$k];				unset( $categories[$k] );			}		}		// Put checked cats on top		echo call_user_func_array(array(&$walker, 'walk'), array($checked_categories, 0, $args));	}	// Then the rest of them	echo call_user_func_array(array(&$walker, 'walk'), array($categories, 0, $args));}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $taxonomy * @param unknown_type $default * @param unknown_type $number * @param unknown_type $echo * @return unknown */function wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {	global $post_ID;	if ( $post_ID )		$checked_terms = wp_get_object_terms($post_ID, $taxonomy, array('fields'=>'ids'));	else		$checked_terms = array();	$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can($tax->cap->assign_terms) )		$disabled = 'disabled="disabled"';	else		$disabled = '';	$popular_ids = array();	foreach ( (array) $terms as $term ) {		$popular_ids[] = $term->term_id;		if ( !$echo ) // hack for AJAX use			continue;		$id = "popular-$taxonomy-$term->term_id";		$checked = in_array( $term->term_id, $checked_terms ) ? 'checked="checked"' : '';		?>		<li id="<?php echo $id; ?>" class="popular-category">			<label class="selectit">			<input id="in-<?php echo $id; ?>" type="checkbox" <?php echo $checked; ?> value="<?php echo (int) $term->term_id; ?>" <?php echo $disabled ?>/>				<?php echo esc_html( apply_filters( 'the_category', $term->name ) ); ?>			</label>		</li>		<?php	}	return $popular_ids;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id */function wp_link_category_checklist( $link_id = 0 ) {	$default = 1;	if ( $link_id ) {		$checked_categories = wp_get_link_cats( $link_id );		// No selected categories, strange		if ( ! count( $checked_categories ) )			$checked_categories[] = $default;	} else {		$checked_categories[] = $default;	}	$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );	if ( empty( $categories ) )		return;	foreach ( $categories as $category ) {		$cat_id = $category->term_id;		$name = esc_html( apply_filters( 'the_category', $category->name ) );		$checked = in_array( $cat_id, $checked_categories ) ? ' checked="checked"' : '';		echo '<li id="link-category-', $cat_id, '"><label for="in-link-category-', $cat_id, '" class="selectit"><input value="', $cat_id, '" type="checkbox" name="link_category[]" id="in-link-category-', $cat_id, '"', $checked, '/> ', $name, "</label></li>";	}}// Tag stuff// Returns a single tag row (see tag_rows below)// Note: this is also used in admin-ajax.php!/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag * @param unknown_type $class * @return unknown */function _tag_row( $tag, $level, $taxonomy = 'post_tag' ) {		global $post_type, $current_screen;		static $row_class = '';		$row_class = ($row_class == '' ? ' class="alternate"' : '');		$count = number_format_i18n( $tag->count );		$tax = get_taxonomy($taxonomy);		if ( 'post_tag' == $taxonomy ) {			$tagsel = 'tag';		} elseif ( 'category' == $taxonomy ) {			$tagsel = 'category_name';		} elseif ( ! empty($tax->query_var) ) {			$tagsel = $tax->query_var;		} else {			$tagsel = $taxonomy;		}		$pad = str_repeat( '&#8212; ', max(0, $level) );		$name = apply_filters( 'term_name', $pad . ' ' . $tag->name, $tag );		$qe_data = get_term($tag->term_id, $taxonomy, object, 'edit');		$edit_link = "edit-tags.php?action=edit&amp;taxonomy=$taxonomy&amp;post_type=$post_type&amp;tag_ID=$tag->term_id";		$out = '';		$out .= '<tr id="tag-' . $tag->term_id . '"' . $row_class . '>';		$columns = get_column_headers($current_screen);		$hidden = get_hidden_columns($current_screen);		$default_term = get_option('default_' . $taxonomy);		foreach ( $columns as $column_name => $column_display_name ) {			$class = "class=\"$column_name column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch ($column_name) {				case 'cb':					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$out .= '<th scope="row" class="check-column"> <input type="checkbox" name="delete_tags[]" value="' . $tag->term_id . '" /></th>';					else						$out .= '<th scope="row" class="check-column">&nbsp;</th>';					break;				case 'name':					$out .= '<td ' . $attributes . '><strong><a class="row-title" href="' . $edit_link . '" title="' . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $name)) . '">' . $name . '</a></strong><br />';					$actions = array();					if ( current_user_can($tax->cap->edit_terms) ) {						$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';						$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';					}					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$actions['delete'] = "<a class='delete-tag' href='" . wp_nonce_url("edit-tags.php?action=delete&amp;taxonomy=$taxonomy&amp;tag_ID=$tag->term_id", 'delete-tag_' . $tag->term_id) . "'>" . __('Delete') . "</a>";					$actions = apply_filters('tag_row_actions', $actions, $tag);					$actions = apply_filters("${taxonomy}_row_actions", $actions, $tag);					$action_count = count($actions);					$i = 0;					$out .= '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						$out .= "<span class='$action'>$link$sep</span>";					}					$out .= '</div>';					$out .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';					$out .= '<div class="name">' . $qe_data->name . '</div>';					$out .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';					$out .= '<div class="parent">' . $qe_data->parent . '</div></div></td>';					break;				case 'description':					$out .= "<td $attributes>$tag->description</td>";					break;				case 'slug':					$out .= "<td $attributes>" . apply_filters('editable_slug', $tag->slug) . "</td>";					break;				case 'posts':					$attributes = 'class="posts column-posts num"' . $style;					$out .= "<td $attributes><a href='edit.php?$tagsel=$tag->slug&amp;post_type=$post_type'>$count</a></td>";					break;				default:					$out .= "<td $attributes>";					$out .= apply_filters("manage_${taxonomy}_custom_column", '', $column_name, $tag->term_id);					$out .= "</td>";			}		}		$out .= "</tr>\n";		return $out;}// Outputs appropriate rows for the Nth page of the Tag Management screen,// assuming M tags displayed at a time on the page// Returns the number of tags displayed/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $pagesize * @param unknown_type $searchterms * @return unknown */function tag_rows( $page = 1, $pagesize = 20, $searchterms = '', $taxonomy = 'post_tag' ) {	// Get a page worth of tags	$start = ($page - 1) * $pagesize;	$args = array('offset' => $start, 'number' => $pagesize, 'hide_empty' => 0);	if ( !empty( $searchterms ) )		$args['search'] = $searchterms;	// convert it to table rows	$out = '';	$count = 0;	if ( is_taxonomy_hierarchical($taxonomy) ) {		// We'll need the full set of terms then.		$args['number'] = $args['offset'] = 0;		$terms = get_terms( $taxonomy, $args );		if ( !empty( $searchterms ) ) // Ignore children on searches.			$children = array();		else			$children = _get_term_hierarchy($taxonomy);		// Some funky recursion to get the job done(Paging & parents mainly) is contained within, Skip it for non-hierarchical taxonomies for performance sake		$out .= _term_rows($taxonomy, $terms, $children, $page, $pagesize, $count);	} else {		$terms = get_terms( $taxonomy, $args );		foreach( $terms as $term )			$out .= _tag_row( $term, 0, $taxonomy );		$count = $pagesize; // Only displaying a single page.	}	echo $out;	return $count;}function _term_rows( $taxonomy, $terms, &$children, $page = 1, $per_page = 20, &$count, $parent = 0, $level = 0 ) {	$start = ($page - 1) * $per_page;	$end = $start + $per_page;	$output = '';	foreach ( $terms as $key => $term ) {		if ( $count >= $end )			break;		if ( $term->parent != $parent && empty($_GET['s']) )			continue;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $term->parent > 0 && empty($_GET['s']) ) {			$my_parents = $parent_ids = array();			$p = $term->parent;			while ( $p ) {				$my_parent = get_term( $p, $taxonomy );				$my_parents[] = $my_parent;				$p = $my_parent->parent;				if ( in_array($p, $parent_ids) ) // Prevent parent loops.					break;				$parent_ids[] = $p;			}			unset($parent_ids);			$num_parents = count($my_parents);			while ( $my_parent = array_pop($my_parents) ) {				$output .=  "\t" . _tag_row( $my_parent, $level - $num_parents, $taxonomy );				$num_parents--;			}		}		if ( $count >= $start )			$output .= "\t" . _tag_row( $term, $level, $taxonomy );		++$count;		unset($terms[$key]);		if ( isset($children[$term->term_id]) && empty($_GET['s']) )			$output .= _term_rows( $taxonomy, $terms, $children, $page, $per_page, $count, $term->term_id, $level + 1 );	}	return $output;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_posts_columns( $screen = '') {	if ( empty($screen) )		$post_type = 'post';	else		$post_type = $screen->post_type;	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	/* translators: manage posts column name */	$posts_columns['title'] = _x('Title', 'column name');	$posts_columns['author'] = __('Author');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'category') )		$posts_columns['categories'] = __('Categories');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'post_tag') )		$posts_columns['tags'] = __('Tags');	$post_status = !empty($_REQUEST['post_status']) ? $_REQUEST['post_status'] : 'all';	if ( !in_array( $post_status, array('pending', 'draft', 'future') ) && ( empty($post_type) || post_type_supports($post_type, 'comments') ) )		$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	$posts_columns['date'] = __('Date');	if ( 'page' == $post_type )		$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );	else		$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );	$posts_columns = apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );	return $posts_columns;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_media_columns() {	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	$posts_columns['icon'] = '';	/* translators: column name */	$posts_columns['media'] = _x('File', 'column name');	$posts_columns['author'] = __('Author');	//$posts_columns['tags'] = _x('Tags', 'column name');	/* translators: column name */	$posts_columns['parent'] = _x('Attached to', 'column name');	$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	//$posts_columns['comments'] = __('Comments');	/* translators: column name */	$posts_columns['date'] = _x('Date', 'column name');	$posts_columns = apply_filters('manage_media_columns', $posts_columns);	return $posts_columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_pages_columns() {	return wp_manage_posts_columns();}/** * Get the column headers for a screen * * @since unknown * * @param string|object $screen The screen you want the headers for * @return array Containing the headers in the format id => UI String */function get_column_headers($screen) {	global $_wp_column_headers;	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	if ( is_string($screen) )		$screen = convert_to_screen($screen);	// Store in static to avoid running filters on each call	if ( isset($_wp_column_headers[$screen->id]) )		return $_wp_column_headers[$screen->id];	switch ($screen->base) {		case 'edit':			 $_wp_column_headers[$screen->id] = wp_manage_posts_columns( $screen );			 break;		case 'edit-comments':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'author' => __('Author'),				/* translators: column name */				'comment' => _x('Comment', 'column name'),				//'date' => __('Submitted'),				'response' => __('In Response To')			);			break;		case 'link-manager':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'url' => __('URL'),				'categories' => __('Categories'),				'rel' => __('Relationship'),				'visible' => __('Visible'),				'rating' => __('Rating')			);			break;		case 'upload':			$_wp_column_headers[$screen->id] = wp_manage_media_columns();			break;		case 'categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'edit-link-categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'links' => __('Links')			);			break;		case 'edit-tags':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'users':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'username' => __('Username'),				'name' => __('Name'),				'email' => __('E-mail'),				'role' => __('Role'),				'posts' => __('Posts')			);			break;		default :			$_wp_column_headers[$screen->id] = array();	}	$_wp_column_headers[$screen->id] = apply_filters('manage_' . $screen->id . '_columns', $_wp_column_headers[$screen->id]);	return $_wp_column_headers[$screen->id];}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen * @param unknown_type $id */function print_column_headers( $screen, $id = true ) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = get_column_headers( $screen );	$hidden = get_hidden_columns($screen);	$styles = array();	foreach ( $columns as $column_key => $column_display_name ) {		$class = ' class="manage-column';		$class .= " column-$column_key";		if ( 'cb' == $column_key )			$class .= ' check-column';		elseif ( in_array($column_key, array('posts', 'comments', 'links')) )			$class .= ' num';		$class .= '"';		$style = '';		if ( in_array($column_key, $hidden) )			$style = 'display:none;';		if ( isset($styles[$screen->id]) && isset($styles[$screen->id][$column_key]) )			$style .= ' ' . $styles[$screen>id][$column_key];		$style = ' style="' . $style . '"';?>	<th scope="col" <?php echo $id ? "id=\"$column_key\"" : ""; echo $class; echo $style; ?>><?php echo $column_display_name; ?></th><?php }}/** * Register column headers for a particular screen.  The header names will be listed in the Screen Options. * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param array $columns An array of columns with column IDs as the keys and translated column names as the values * @see get_column_headers(), print_column_headers(), get_hidden_columns() */function register_column_headers($screen, $columns) {	global $_wp_column_headers;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	$_wp_column_headers[$screen->id] = $columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function get_hidden_columns($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	return (array) get_user_option( 'manage' . $screen->id. 'columnshidden' );}/** * {@internal Missing Short Description}} * * Outputs the quick edit and bulk edit table rows for posts and pages * * @since 2.7 * * @param string $screen */function inline_edit_row( $screen ) {	global $current_user, $mode;	if ( is_string($screen) ) {		$screen = array('id' => 'edit-' . $screen, 'base' => 'edit', 'post_type' => $screen );		$screen = (object) $screen;	}	$post = get_default_post_to_edit( $screen->post_type );	$post_type_object = get_post_type_object( $screen->post_type );	$taxonomy_names = get_object_taxonomies( $screen->post_type );	$hierarchical_taxonomies = array();	$flat_taxonomies = array();	foreach ( $taxonomy_names as $taxonomy_name ) {		$taxonomy = get_taxonomy( $taxonomy_name);		if ( !$taxonomy->show_ui )			continue;		if ( $taxonomy->hierarchical )			$hierarchical_taxonomies[] = $taxonomy;		else			$flat_taxonomies[] = $taxonomy;	}	$columns = wp_manage_posts_columns($screen);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($screen) ) );	$col_count = count($columns) - count($hidden);	$m = ( isset($mode) && 'excerpt' == $mode ) ? 'excerpt' : 'list';	$can_publish = current_user_can($post_type_object->cap->publish_posts);	$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<?php	$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';	$bulk = 0;	while ( $bulk < 2 ) { ?>	<tr id="<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>" class="inline-edit-row inline-edit-row-<?php echo "$hclass inline-edit-$screen->post_type ";		echo $bulk ? "bulk-edit-row bulk-edit-row-$hclass bulk-edit-$screen->post_type" : "quick-edit-row quick-edit-row-$hclass inline-edit-$screen->post_type";	?>" style="display: none"><td colspan="<?php echo $col_count; ?>">	<fieldset class="inline-edit-col-left"><div class="inline-edit-col">		<h4><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></h4><?phpif ( post_type_supports( $screen->post_type, 'title' ) ) :	if ( $bulk ) : ?>		<div id="bulk-title-div">			<div id="bulk-titles"></div>		</div><?php else : // $bulk ?>		<label>			<span class="title"><?php _e( 'Title' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_title" class="ptitle" value="" /></span>		</label>		<label>			<span class="title"><?php _e( 'Slug' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_name" value="" /></span>		</label><?php endif; // $bulkendif; // post_type_supports title ?><?php if ( !$bulk ) : ?>		<label><span class="title"><?php _e( 'Date' ); ?></span></label>		<div class="inline-edit-date">			<?php touch_time(1, 1, 4, 1); ?>		</div>		<br class="clear" /><?php endif; // $bulk	if ( post_type_supports( $screen->post_type, 'author' ) ) :		$authors = get_editable_user_ids( $current_user->id, true, $screen->post_type ); // TODO: ROLE SYSTEM		$authors_dropdown = '';		if ( $authors && count( $authors ) > 1 ) :			$users_opt = array('include' => $authors, 'name' => 'post_author', 'class'=> 'authors', 'multi' => 1, 'echo' => 0);			if ( $bulk )				$users_opt['show_option_none'] = __('&mdash; No Change &mdash;');			$authors_dropdown  = '<label>';			$authors_dropdown .= '<span class="title">' . __( 'Author' ) . '</span>';			$authors_dropdown .= wp_dropdown_users( $users_opt );			$authors_dropdown .= '</label>';		endif; // authors?><?php if ( !$bulk ) echo $authors_dropdown;endif; // post_type_supports authorif ( !$bulk ) :?>		<div class="inline-edit-group">			<label class="alignleft">				<span class="title"><?php _e( 'Password' ); ?></span>				<span class="input-text-wrap"><input type="text" name="post_password" class="inline-edit-password-input" value="" /></span>			</label>			<em style="margin:5px 10px 0 0" class="alignleft">				<?php				/* translators: Between password field and private checkbox on post quick edit interface */				echo __( '&ndash;OR&ndash;' );				?>			</em>			<label class="alignleft inline-edit-private">				<input type="checkbox" name="keep_private" value="private" />				<span class="checkbox-title"><?php echo __('Private'); ?></span>			</label>		</div><?php endif; ?>	</div></fieldset><?php if ( count($hierarchical_taxonomies) && !$bulk ) : ?>	<fieldset class="inline-edit-col-center inline-edit-categories"><div class="inline-edit-col"><?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>		<span class="title inline-edit-categories-label"><?php echo esc_html($taxonomy->labels->name) ?>			<span class="catshow"><?php _e('[more]'); ?></span>			<span class="cathide" style="display:none;"><?php _e('[less]'); ?></span>		</span>		<input type="hidden" name="<?php echo ( $taxonomy->name == 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr($taxonomy->name) . '][]'; ?>" value="0" />		<ul class="cat-checklist <?php echo esc_attr($taxonomy->name)?>-checklist">			<?php wp_terms_checklist(null, array('taxonomy' => $taxonomy->name)) ?>		</ul><?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>	</div></fieldset><?php endif; // count($hierarchical_taxonomies) && !$bulk ?>	<fieldset class="inline-edit-col-right"><div class="inline-edit-col"><?php	if ( post_type_supports( $screen->post_type, 'author' ) && $bulk )		echo $authors_dropdown;?><?php if ( $post_type_object->hierarchical ) : ?>		<label>			<span class="title"><?php _e( 'Parent' ); ?></span><?php	$dropdown_args = array('post_type' => $post_type_object->name, 'selected' => $post->post_parent, 'name' => 'post_parent', 'show_option_none' => __('Main Page (no parent)'), 'option_none_value' => 0, 'sort_column'=> 'menu_order, post_title');	if ( $bulk )		$dropdown_args['show_option_no_change'] =  __('&mdash; No Change &mdash;');	$dropdown_args = apply_filters('quick_edit_dropdown_pages_args', $dropdown_args);	wp_dropdown_pages($dropdown_args);?>		</label><?php if ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :		if ( !$bulk ) : ?>		<label>			<span class="title"><?php _e( 'Order' ); ?></span>			<span class="input-text-wrap"><input type="text" name="menu_order" class="inline-edit-menu-order-input" value="<?php echo $post->menu_order ?>" /></span>		</label><?php	endif; // !$bulk ?>		<label>			<span class="title"><?php _e( 'Template' ); ?></span>			<select name="page_template"><?php	if ( $bulk ) : ?>				<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php	endif; // $bulk ?>				<option value="default"><?php _e( 'Default Template' ); ?></option>				<?php page_template_dropdown() ?>			</select>		</label><?php	endif; // post_type_supports page-attributesendif; // $post_type_object->hierarchical ?><?php if ( count($flat_taxonomies) && !$bulk ) : ?><?php foreach ( $flat_taxonomies as $taxonomy ) : ?>		<label class="inline-edit-tags">			<span class="title"><?php echo esc_html($taxonomy->labels->name) ?></span>			<textarea cols="22" rows="1" name="tax_input[<?php echo esc_attr($taxonomy->name)?>]" class="tax_input_<?php echo esc_attr($taxonomy->name)?>"></textarea>		</label><?php endforeach; //$flat_taxonomies as $taxonomy ?><?php endif; // count($flat_taxonomies) && !$bulk  ?><?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :	if ( $bulk ) : ?>		<div class="inline-edit-group">	<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>		<label class="alignleft">			<span class="title"><?php _e( 'Comments' ); ?></span>			<select name="comment_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>		<label class="alignright">			<span class="title"><?php _e( 'Pings' ); ?></span>			<select name="ping_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; ?>		</div><?php else : // $bulk ?>		<div class="inline-edit-group">		<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="comment_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Comments' ); ?></span>			</label>		<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="ping_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Pings' ); ?></span>			</label>		<?php endif; ?>		</div><?php endif; // $bulkendif; // post_type_supports comments or pings ?>		<div class="inline-edit-group">			<label class="inline-edit-status alignleft">				<span class="title"><?php _e( 'Status' ); ?></span>				<select name="_status"><?php if ( $bulk ) : ?>					<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php endif; // $bulk ?>				<?php if ( $can_publish ) : // Contributors only get "Unpublished" and "Pending Review" ?>					<option value="publish"><?php _e( 'Published' ); ?></option>					<option value="future"><?php _e( 'Scheduled' ); ?></option><?php if ( $bulk ) : ?>					<option value="private"><?php _e('Private') ?></option><?php endif; // $bulk ?>				<?php endif; ?>					<option value="pending"><?php _e( 'Pending Review' ); ?></option>					<option value="draft"><?php _e( 'Draft' ); ?></option>				</select>			</label><?php if ( 'post' == $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?><?php	if ( $bulk ) : ?>			<label class="alignright">				<span class="title"><?php _e( 'Sticky' ); ?></span>				<select name="sticky">					<option value="-1"><?php _e( '&mdash; No Change &mdash;' ); ?></option>					<option value="sticky"><?php _e( 'Sticky' ); ?></option>					<option value="unsticky"><?php _e( 'Not Sticky' ); ?></option>				</select>			</label><?php	else : // $bulk ?>			<label class="alignleft">				<input type="checkbox" name="sticky" value="sticky" />				<span class="checkbox-title"><?php _e( 'Make this post sticky' ); ?></span>			</label><?php	endif; // $bulk ?><?php endif; // !$is_page && $can_publish && current_user_can( 'edit_others_cap' ) ?>		</div>	</div></fieldset><?php	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( $bulk ? 'bulk_edit_custom_box' : 'quick_edit_custom_box', $column_name, $screen->post_type );	}?>	<p class="submit inline-edit-save">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="button-secondary cancel alignleft"><?php _e('Cancel'); ?></a>		<?php if ( ! $bulk ) {			wp_nonce_field( 'inlineeditnonce', '_inline_edit', false );			$update_text = __( 'Update' );			?>			<a accesskey="s" href="#inline-edit" title="<?php _e('Update'); ?>" class="button-primary save alignright"><?php echo esc_attr( $update_text ); ?></a>			<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<?php } else {			$update_text = __( 'Update' );		?>			<input accesskey="s" class="button-primary alignright" type="submit" name="bulk_edit" value="<?php echo esc_attr( $update_text ); ?>" />		<?php } ?>		<input type="hidden" name="post_view" value="<?php echo esc_attr($m); ?>" />		<input type="hidden" name="screen" value="<?php echo esc_attr($screen->id); ?>" />		<br class="clear" />	</p>	</td></tr><?php	$bulk++;	} ?>	</tbody></table></form><?php}// adds hidden fields with the data for use in the inline editor for posts and pages/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post */function get_inline_data($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( ! current_user_can($post_type_object->cap->edit_post, $post->ID) )		return;	$title = esc_attr( get_the_title( $post->ID ) );	echo '<div class="hidden" id="inline_' . $post->ID . '">	<div class="post_title">' . $title . '</div>	<div class="post_name">' . apply_filters('editable_slug', $post->post_name) . '</div>	<div class="post_author">' . $post->post_author . '</div>	<div class="comment_status">' . $post->comment_status . '</div>	<div class="ping_status">' . $post->ping_status . '</div>	<div class="_status">' . $post->post_status . '</div>	<div class="jj">' . mysql2date( 'd', $post->post_date, false ) . '</div>	<div class="mm">' . mysql2date( 'm', $post->post_date, false ) . '</div>	<div class="aa">' . mysql2date( 'Y', $post->post_date, false ) . '</div>	<div class="hh">' . mysql2date( 'H', $post->post_date, false ) . '</div>	<div class="mn">' . mysql2date( 'i', $post->post_date, false ) . '</div>	<div class="ss">' . mysql2date( 's', $post->post_date, false ) . '</div>	<div class="post_password">' . esc_html( $post->post_password ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="post_parent">' . $post->post_parent . '</div>';	if ( $post->post_type == 'page' )		echo '<div class="page_template">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="menu_order">' . $post->menu_order . '</div>';	$taxonomy_names = get_object_taxonomies( $post->post_type );	foreach ( $taxonomy_names as $taxonomy_name) {		$taxonomy = get_taxonomy( $taxonomy_name );		if ( $taxonomy->hierarchical && $taxonomy->show_ui )				echo '<div class="post_category" id="'.$taxonomy_name.'_'.$post->ID.'">' . implode( ',', wp_get_object_terms( $post->ID, $taxonomy_name, array('fields'=>'ids')) ) . '</div>';		elseif ( $taxonomy->show_ui )			echo '<div class="tags_input" id="'.$taxonomy_name.'_'.$post->ID.'">' . esc_html( str_replace( ',', ', ', get_terms_to_edit($post->ID, $taxonomy_name) ) ) . '</div>';	}	if ( !$post_type_object->hierarchical )		echo '<div class="sticky">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';	echo '</div>';}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $posts */function post_rows( $posts = array() ) {	global $wp_query, $post, $mode;	add_filter('the_title','esc_html');	// Create array of post IDs.	$post_ids = array();	if ( empty($posts) )		$posts = &$wp_query->posts;	foreach ( $posts as $a_post )		$post_ids[] = $a_post->ID;	$comment_pending_count = get_pending_comments_num($post_ids);	foreach ( $posts as $post ) {		if ( empty($comment_pending_count[$post->ID]) )			$comment_pending_count[$post->ID] = 0;		_post_row($post, $comment_pending_count[$post->ID], $mode);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $a_post * @param unknown_type $pending_comments * @param unknown_type $mode */function _post_row($a_post, $pending_comments, $mode) {	global $post, $current_user, $current_screen;	static $rowclass;	$global_post = $post;	$post = $a_post;	setup_postdata($post);	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );	$edit_link = get_edit_post_link( $post->ID );	$title = _draft_or_post_title();	$post_type_object = get_post_type_object($post->post_type);?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo trim( $rowclass . ' author-' . $post_owner . ' status-' . $post->post_status ); ?> iedit' valign="top"><?php	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns( $current_screen );	foreach ( $posts_columns as $column_name=>$column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {		case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $post->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;		case 'date':			if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {				$t_time = $h_time = __('Unpublished');				$time_diff = 0;			} else {				$t_time = get_the_time(__('Y/m/d g:i:s A'));				$m_time = $post->post_date;				$time = get_post_time('G', true, $post);				$time_diff = time() - $time;				if ( $time_diff > 0 && $time_diff < 24*60*60 )					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );				else					$h_time = mysql2date(__('Y/m/d'), $m_time);			}			echo '<td ' . $attributes . '>';			if ( 'excerpt' == $mode )				echo apply_filters('post_date_column_time', $t_time, $post, $column_name, $mode);			else				echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $post, $column_name, $mode) . '</abbr>';			echo '<br />';			if ( 'publish' == $post->post_status ) {				_e('Published');			} elseif ( 'future' == $post->post_status ) {				if ( $time_diff > 0 )					echo '<strong class="attention">' . __('Missed schedule') . '</strong>';				else					_e('Scheduled');			} else {				_e('Last Modified');			}			echo '</td>';		break;		case 'title':			$attributes = 'class="post-title column-title"' . $style;		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $title ?></a><?php } else { echo $title; }; _post_states($post); ?></strong>		<?php			if ( 'excerpt' == $mode )				the_excerpt();			$actions = array();			if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && 'trash' != $post->post_status ) {				$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '" title="' . esc_attr(__('Edit this item')) . '">' . __('Edit') . '</a>';				$actions['inline hide-if-no-js'] = '<a href="#" class="editinline" title="' . esc_attr(__('Edit this item inline')) . '">' . __('Quick&nbsp;Edit') . '</a>';			}			if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) {				if ( 'trash' == $post->post_status )					$actions['untrash'] = "<a title='" . esc_attr(__('Restore this item from the Trash')) . "' href='" . wp_nonce_url( admin_url( sprintf($post_type_object->_edit_link . '&amp;action=untrash', $post->ID) ), 'untrash-' . $post->post_type . '_' . $post->ID ) . "'>" . __('Restore') . "</a>";				elseif ( EMPTY_TRASH_DAYS )					$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this item to the Trash')) . "' href='" . get_delete_post_link($post->ID) . "'>" . __('Trash') . "</a>";				if ( 'trash' == $post->post_status || !EMPTY_TRASH_DAYS )					$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this item permanently')) . "' href='" . get_delete_post_link($post->ID, '', true) . "'>" . __('Delete Permanently') . "</a>";			}			if ( in_array($post->post_status, array('pending', 'draft')) ) {				if ( current_user_can($post_type_object->cap->edit_post, $post->ID) )					$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($post->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';			} elseif ( 'trash' != $post->post_status ) {				$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';			}			$actions = apply_filters('post_row_actions', $actions, $post);			$action_count = count($actions);			$i = 0;			echo '<div class="row-actions">';			foreach ( $actions as $action => $link ) {				++$i;				( $i == $action_count ) ? $sep = '' : $sep = ' | ';				echo "<span class='$action'>$link$sep</span>";			}			echo '</div>';			get_inline_data($post);		?>		</td>		<?php		break;		case 'categories':		?>		<td <?php echo $attributes ?>><?php			$categories = get_the_category();			if ( !empty( $categories ) ) {				$out = array();				foreach ( $categories as $c )					$out[] = "<a href='edit.php?category_name=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'category', 'display')) . "</a>";					echo join( ', ', $out );			} else {				_e('Uncategorized');			}		?></td>		<?php		break;		case 'tags':		?>		<td <?php echo $attributes ?>><?php			$tags = get_the_tags($post->ID);			if ( !empty( $tags ) ) {				$out = array();				foreach ( $tags as $c )					$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";				echo join( ', ', $out );			} else {				_e('No Tags');			}		?></td>		<?php		break;		case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php			$pending_phrase = sprintf( __('%s pending'), number_format( $pending_comments ) );			if ( $pending_comments )				echo '<strong>';				comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');				if ( $pending_comments )				echo '</strong>';		?>		</div></td>		<?php		break;		case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post->post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;		case 'control_view':		?>		<td><a href="<?php the_permalink(); ?>" rel="permalink" class="view"><?php _e('View'); ?></a></td>		<?php		break;		case 'control_edit':		?>		<td><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) ) { echo "<a href='$edit_link' class='edit'>" . __('Edit') . "</a>"; } ?></td>		<?php		break;		case 'control_delete':		?>		<td><?php if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) { echo "<a href='" . wp_nonce_url("post.php?action=delete&amp;post=$id", 'delete-post_' . $post->ID) . "' class='delete'>" . __('Delete') . "</a>"; } ?></td>		<?php		break;		default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_posts_custom_column', $column_name, $post->ID); ?></td>		<?php		break;	}}?>	</tr><?php	$post = $global_post;}/* * display one row if the page doesn't have any children * otherwise, display the row and its children in subsequent rows *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $level */function display_page_row( $page, $level = 0 ) {	global $post, $current_screen;	static $rowclass;	$post = $page;	setup_postdata($page);	if ( 0 == $level && (int)$page->post_parent > 0 ) {		//sent level 0 by accident, by default, or because we don't know the actual level		$find_main_page = (int)$page->post_parent;		while ( $find_main_page > 0 ) {			$parent = get_page($find_main_page);			if ( is_null($parent) )				break;			$level++;			$find_main_page = (int)$parent->post_parent;			if ( !isset($parent_name) )				$parent_name = $parent->post_title;		}	}	$page->post_title = esc_html( $page->post_title );	$pad = str_repeat( '&#8212; ', $level );	$id = (int) $page->ID;	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns(  $current_screen );	$title = _draft_or_post_title();	$post_type = $page->post_type;	$post_type_object = get_post_type_object($post_type);?><tr id="page-<?php echo $id; ?>" class="<?php echo $rowclass; ?> iedit"><?phpforeach ( $posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch ($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $page->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $page->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');			$time_diff = 0;		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $page->post_date;			$time = get_post_time('G', true);			$time_diff = time() - $time;			if ( $time_diff > 0 && $time_diff < 24*60*60 )				$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			else				$h_time = mysql2date(__('Y/m/d'), $m_time);		}		echo '<td ' . $attributes . '>';		echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $page, $column_name, '') . '</abbr>';		echo '<br />';		if ( 'publish' == $page->post_status ) {			_e('Published');		} elseif ( 'future' == $page->post_status ) {			if ( $time_diff > 0 )				echo '<strong class="attention">' . __('Missed schedule') . '</strong>';			else				_e('Scheduled');		} else {			_e('Last Modified');		}		echo '</td>';		break;	case 'title':		$attributes = 'class="post-title page-title column-title"' . $style;		$edit_link = get_edit_post_link( $page->ID );		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $pad; echo $title ?></a><?php } else { echo $pad; echo $title; }; _post_states($page); echo isset($parent_name) ? ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html($parent_name) : ''; ?></strong>		<?php		$actions = array();		if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) {			$actions['edit'] = '<a href="' . $edit_link . '" title="' . esc_attr(__('Edit this page')) . '">' . __('Edit') . '</a>';			$actions['inline'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		}		if ( current_user_can($post_type_object->cap->delete_post, $page->ID) ) {			if ( $post->post_status == 'trash' )				$actions['untrash'] = "<a title='" . esc_attr(__('Remove this page from the Trash')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=untrash&amp;post=$page->ID", 'untrash-' . $post->post_type . '_' . $page->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS )				$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this page to the Trash')) . "' href='" . get_delete_post_link($page->ID) . "'>" . __('Trash') . "</a>";			if ( $post->post_status == 'trash' || !EMPTY_TRASH_DAYS )				$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this page permanently')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=delete&amp;post=$page->ID", 'delete-' . $post->post_type . '_' . $page->ID) . "'>" . __('Delete Permanently') . "</a>";		}		if ( in_array($post->post_status, array('pending', 'draft')) ) {			if ( current_user_can($post_type_object->cap->edit_post, $page->ID) )				$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($page->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';		} elseif ( $post->post_status != 'trash' ) {			$actions['view'] = '<a href="' . get_permalink($page->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters('page_row_actions', $actions, $page);		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		get_inline_data($post);		echo '</td>';		break;	case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $page->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_pages_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?></tr><?php}/* * displays pages in hierarchical order with paging support *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $pages * @param unknown_type $pagenum * @param unknown_type $per_page * @return unknown */function page_rows($pages, $pagenum = 1, $per_page = 20) {	global $wpdb;	$level = 0;	if ( ! $pages ) {		$pages = get_pages( array('sort_column' => 'menu_order') );		if ( ! $pages )			return false;	}	/*	 * arrange pages into two parts: top level pages and children_pages	 * children_pages is two dimensional array, eg.	 * children_pages[10][] contains all sub-pages whose parent is 10.	 * It only takes O(N) to arrange this and it takes O(1) for subsequent lookup operations	 * If searching, ignore hierarchy and treat everything as top level	 */	if ( empty($_GET['s']) ) {		$top_level_pages = array();		$children_pages = array();		foreach ( $pages as $page ) {			// catch and repair bad pages			if ( $page->post_parent == $page->ID ) {				$page->post_parent = 0;				$wpdb->update($wpdb->posts, array('post_parent' => 0), array('ID' => $page->ID));				clean_page_cache( $page->ID );			}			if ( 0 == $page->post_parent )				$top_level_pages[] = $page;			else				$children_pages[ $page->post_parent ][] = $page;		}		$pages = &$top_level_pages;	}	$count = 0;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $pages as $page ) {		if ( $count >= $end )			break;		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		if ( isset($children_pages) )			_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	// if it is the last pagenum and there are orphaned pages, display them with paging as well	if ( isset($children_pages) && $count < $end ){		foreach( $children_pages as $orphans ){			foreach ( $orphans as $op ) {				if ( $count >= $end )					break;				if ( $count >= $start )					echo "\t" . display_page_row( $op, 0 );				$count++;			}		}	}}/** * Given a top level page ID, display the nested hierarchy of sub-pages * together with paging support * * @since unknown * * @param unknown_type $children_pages * @param unknown_type $count * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $pagenum * @param unknown_type $per_page */function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page ) {	if ( ! isset( $children_pages[$parent] ) )		return;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $children_pages[$parent] as $page ) {		if ( $count >= $end )			break;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $page->post_parent > 0 ) {			$my_parents = array();			$my_parent = $page->post_parent;			while ( $my_parent) {				$my_parent = get_post($my_parent);				$my_parents[] = $my_parent;				if ( !$my_parent->post_parent )					break;				$my_parent = $my_parent->post_parent;			}			$num_parents = count($my_parents);			while( $my_parent = array_pop($my_parents) ) {				echo "\t" . display_page_row( $my_parent, $level - $num_parents );				$num_parents--;			}		}		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	unset( $children_pages[$parent] ); //required in order to keep track of orphans}/** * Generate HTML for a single row on the users.php admin panel. * * @since 2.1.0 * * @param object $user_object * @param string $style Optional. Attributes added to the TR element.  Must be sanitized. * @param string $role Key for the $wp_roles array. * @param int $numposts Optional. Post count to display for this user.  Defaults to zero, as in, a new user has made zero posts. * @return string */function user_row( $user_object, $style = '', $role = '', $numposts = 0 ) {	global $wp_roles;	$current_user = wp_get_current_user();	if ( !( is_object( $user_object) && is_a( $user_object, 'WP_User' ) ) )		$user_object = new WP_User( (int) $user_object );	$user_object = sanitize_user_object($user_object, 'display');	$email = $user_object->user_email;	$url = $user_object->user_url;	$short_url = str_replace( 'http://', '', $url );	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	$checkbox = '';	// Check if the user for this row is editable	if ( current_user_can( 'list_users' ) ) {		// Set up the user editing link		// TODO: make profile/user-edit determination a separate function		if ($current_user->ID == $user_object->ID) {			$edit_link = 'profile.php';		} else {			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( esc_url( stripslashes( $_SERVER['REQUEST_URI'] ) ) ), "user-edit.php?user_id=$user_object->ID" ) );		}		$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";		// Set up the hover actions for this user		$actions = array();		if ( current_user_can('edit_user',  $user_object->ID) ) {			$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";			$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		} else {			$edit = "<strong>$user_object->user_login</strong><br />";		}		if ( !is_multisite() && $current_user->ID != $user_object->ID && current_user_can('delete_user', $user_object->ID) )			$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=delete&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Delete') . "</a>";		if ( is_multisite() && $current_user->ID != $user_object->ID && current_user_can('remove_user', $user_object->ID) )			$actions['remove'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=remove&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Remove') . "</a>";		$actions = apply_filters('user_row_actions', $actions, $user_object);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';		// Set up the checkbox (because the user is editable, otherwise its empty)		$checkbox = "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />";	} else {		$edit = '<strong>' . $user_object->user_login . '</strong>';	}	$role_name = isset($wp_roles->role_names[$role]) ? translate_user_role($wp_roles->role_names[$role] ) : __('None');	$r = "<tr id='user-$user_object->ID'$style>";	$columns = get_column_headers('users');	$hidden = get_hidden_columns('users');	$avatar = get_avatar( $user_object->ID, 32 );	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$r .= "<th scope='row' class='check-column'>$checkbox</th>";				break;			case 'username':				$r .= "<td $attributes>$avatar $edit</td>";				break;			case 'name':				$r .= "<td $attributes>$user_object->first_name $user_object->last_name</td>";				break;			case 'email':				$r .= "<td $attributes><a href='mailto:$email' title='" . sprintf( __('E-mail: %s' ), $email ) . "'>$email</a></td>";				break;			case 'role':				$r .= "<td $attributes>$role_name</td>";				break;			case 'posts':				$attributes = 'class="posts column-posts num"' . $style;				$r .= "<td $attributes>";				if ( $numposts > 0 ) {					$r .= "<a href='edit.php?author=$user_object->ID' title='" . __( 'View posts by this author' ) . "' class='edit'>";					$r .= $numposts;					$r .= '</a>';				} else {					$r .= 0;				}				$r .= "</td>";				break;			default:				$r .= "<td $attributes>";				$r .= apply_filters('manage_users_custom_column', '', $column_name, $user_object->ID);				$r .= "</td>";		}	}	$r .= '</tr>';	return $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param string $status Comment status (approved, spam, trash, etc) * @param string $s Term to search for * @param int $start Offset to start at for pagination * @param int $num Maximum number of comments to return * @param int $post Post ID or 0 to return all comments * @param string $type Comment type (comment, trackback, pingback, etc) * @return array [0] contains the comments and [1] contains the total number of comments that match (ignoring $start and $num) */function _wp_get_comment_list( $status = '', $s = false, $start, $num, $post = 0, $type = '' ) {	global $wpdb;	$start = abs( (int) $start );	$num = (int) $num;	$post = (int) $post;	$count = wp_count_comments();	$index = '';	if ( 'moderated' == $status ) {		$approved = "c.comment_approved = '0'";		$total = $count->moderated;	} elseif ( 'approved' == $status ) {		$approved = "c.comment_approved = '1'";		$total = $count->approved;	} elseif ( 'spam' == $status ) {		$approved = "c.comment_approved = 'spam'";		$total = $count->spam;	} elseif ( 'trash' == $status ) {		$approved = "c.comment_approved = 'trash'";		$total = $count->trash;	} else {		$approved = "( c.comment_approved = '0' OR c.comment_approved = '1' )";		$total = $count->moderated + $count->approved;		$index = 'USE INDEX (c.comment_date_gmt)';	}	if ( $post ) {		$total = '';		$post = " AND c.comment_post_ID = '$post'";	} else {		$post = '';	}	$orderby = "ORDER BY c.comment_date_gmt DESC LIMIT $start, $num";	if ( 'comment' == $type )		$typesql = "AND c.comment_type = ''";	elseif ( 'pings' == $type )		$typesql = "AND ( c.comment_type = 'pingback' OR c.comment_type = 'trackback' )";	elseif ( 'all' == $type )		$typesql = '';	elseif ( !empty($type) )		$typesql = $wpdb->prepare("AND c.comment_type = %s", $type);	else		$typesql = '';	if ( !empty($type) )		$total = '';	$query = "FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ";	if ( $s ) {		$total = '';		$s = $wpdb->escape($s);		$query .= "AND			(c.comment_author LIKE '%$s%' OR			c.comment_author_email LIKE '%$s%' OR			c.comment_author_url LIKE ('%$s%') OR			c.comment_author_IP LIKE ('%$s%') OR			c.comment_content LIKE ('%$s%') ) AND			$approved			$typesql";	} else {		$query .= "AND $approved $post $typesql";	}	$comments = $wpdb->get_results("SELECT * $query $orderby");	if ( '' === $total )		$total = $wpdb->get_var("SELECT COUNT(c.comment_ID) $query");	update_comment_cache($comments);	return array($comments, $total);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $comment_id * @param unknown_type $mode * @param unknown_type $comment_status * @param unknown_type $checkbox */function _wp_comment_row( $comment_id, $mode, $comment_status, $checkbox = true, $from_ajax = false ) {	global $comment, $post, $_comment_pending_count;	$comment = get_comment( $comment_id );	$post = get_post($comment->comment_post_ID);	$the_comment_status = wp_get_comment_status($comment->comment_ID);	$post_type_object = get_post_type_object($post->post_type);	$user_can = current_user_can($post_type_object->cap->edit_post, $post->ID);	$comment_url = esc_url(get_comment_link($comment->comment_ID));	$author_url = get_comment_author_url();	if ( 'http://' == $author_url )		$author_url = '';	$author_url_display = preg_replace('|http://(www\.)?|i', '', $author_url);	if ( strlen($author_url_display) > 50 )		$author_url_display = substr($author_url_display, 0, 49) . '...';	$ptime = date('G', strtotime( $comment->comment_date ) );	if ( ( abs(time() - $ptime) ) < 86400 )		$ptime = sprintf( __('%s ago'), human_time_diff( $ptime ) );	else		$ptime = mysql2date(__('Y/m/d \a\t g:i A'), $comment->comment_date );	if ( $user_can ) {		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$unspam_url = esc_url( "comment.php?action=unspamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$untrash_url = esc_url( "comment.php?action=untrashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );	}	echo "<tr id='comment-$comment->comment_ID' class='$the_comment_status'>";	$columns = get_column_headers('edit-comments');	$hidden = get_hidden_columns('edit-comments');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				if ( !$checkbox ) break;				echo '<th scope="row" class="check-column">';				if ( $user_can ) echo "<input type='checkbox' name='delete_comments[]' value='$comment->comment_ID' />";				echo '</th>';				break;			case 'comment':				echo "<td $attributes>";				echo '<div id="submitted-on">';				/* translators: 2: comment date, 3: comment time */				printf( __( '<a href="%1$s">%2$s at %3$s</a>' ), $comment_url,					/* translators: comment date format. See http://php.net/date */ get_comment_date( __('Y/m/d') ),					/* translators: comment time format. See http://php.net/date */ get_comment_date( get_option( 'time_format' ) ) );				if ( $comment->comment_parent ) {					$parent = get_comment( $comment->comment_parent );					$parent_link = esc_url( get_comment_link( $comment->comment_parent ) );					$name = apply_filters( 'get_comment_author', $parent->comment_author ); // there's no API function for this					printf( ' | '.__( 'In reply to <a href="%1$s">%2$s</a>.' ), $parent_link, $name );				}				echo '</div>';				comment_text();				if ( $user_can ) { ?>				<div id="inline-<?php echo $comment->comment_ID; ?>" class="hidden">				<textarea class="comment" rows="1" cols="1"><?php echo htmlspecialchars( apply_filters('comment_edit_pre', $comment->comment_content), ENT_QUOTES ); ?></textarea>				<div class="author-email"><?php echo esc_attr( $comment->comment_author_email ); ?></div>				<div class="author"><?php echo esc_attr( $comment->comment_author ); ?></div>				<div class="author-url"><?php echo esc_attr( $comment->comment_author_url ); ?></div>				<div class="comment_status"><?php echo $comment->comment_approved; ?></div>				</div>				<?php				}				if ( $user_can ) {					// preorder it: Approve | Reply | Quick Edit | Edit | Spam | Trash					$actions = array(						'approve' => '', 'unapprove' => '',						'reply' => '',						'quickedit' => '',						'edit' => '',						'spam' => '', 'unspam' => '',						'trash' => '', 'untrash' => '', 'delete' => ''					);					if ( $comment_status && 'all' != $comment_status ) { // not looking at all comments						if ( 'approved' == $the_comment_status )							$actions['unapprove'] = "<a href='$unapprove_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=unapproved vim-u vim-destructive' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';						else if ( 'unapproved' == $the_comment_status )							$actions['approve'] = "<a href='$approve_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=approved vim-a vim-destructive' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';					} else {						$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';						$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';					}					if ( 'spam' != $the_comment_status && 'trash' != $the_comment_status ) {						$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . esc_attr__( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */ _x( 'Spam', 'verb' ) . '</a>';					} elseif ( 'spam' == $the_comment_status ) {						$actions['unspam'] = "<a href='$unspam_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:unspam=1 vim-z vim-destructive'>" . _x( 'Not Spam', 'comment' ) . '</a>';					} elseif ( 'trash' == $the_comment_status ) {						$actions['untrash'] = "<a href='$untrash_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:untrash=1 vim-z vim-destructive'>" . __( 'Restore' ) . '</a>';					}					if ( 'spam' == $the_comment_status || 'trash' == $the_comment_status || !EMPTY_TRASH_DAYS ) {						$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::delete=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';					} else {						$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . esc_attr__( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';					}					if ( 'trash' != $the_comment_status ) {						$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . esc_attr__('Edit comment') . "'>". __('Edit') . '</a>';						$actions['quickedit'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\',\'edit\');return false;" class="vim-q" title="'.esc_attr__('Quick Edit').'" href="#">' . __('Quick&nbsp;Edit') . '</a>';						if ( 'spam' != $the_comment_status )							$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\');return false;" class="vim-r" title="'.esc_attr__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';					}					$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';						// Reply and quickedit need a hide-if-no-js span when not added with ajax						if ( ('reply' == $action || 'quickedit' == $action) && ! $from_ajax )							$action .= ' hide-if-no-js';						elseif ( ($action == 'untrash' && $the_comment_status == 'trash') || ($action == 'unspam' && $the_comment_status == 'spam') ) {							if ('1' == get_comment_meta($comment_id, '_wp_trash_meta_status', true))								$action .= ' approve';							else								$action .= ' unapprove';						}						echo "<span class='$action'>$sep$link</span>";					}					echo '</div>';				}				echo '</td>';				break;			case 'author':				echo "<td $attributes><strong>"; comment_author(); echo '</strong><br />';				if ( !empty($author_url) )					echo "<a title='$author_url' href='$author_url'>$author_url_display</a><br />";				if ( $user_can ) {					if ( !empty($comment->comment_author_email) ) {						comment_author_email_link();						echo '<br />';					}					echo '<a href="edit-comments.php?s=';					comment_author_IP();					echo '&amp;mode=detail';					if ( 'spam' == $comment_status )						echo '&amp;comment_status=spam';					echo '">';					comment_author_IP();					echo '</a>';				} //current_user_can				echo '</td>';				break;			case 'date':				echo "<td $attributes>" . get_comment_date(__('Y/m/d \a\t g:ia')) . '</td>';				break;			case 'response':				if ( 'single' !== $mode ) {					if ( isset( $_comment_pending_count[$post->ID] ) ) {						$pending_comments = $_comment_pending_count[$post->ID];					} else {						$_comment_pending_count_temp = get_pending_comments_num( array( $post->ID ) );						$pending_comments = $_comment_pending_count[$post->ID] = $_comment_pending_count_temp[$post->ID];					}					if ( $user_can ) {						$post_link = "<a href='" . get_edit_post_link($post->ID) . "'>";						$post_link .= get_the_title($post->ID) . '</a>';					} else {						$post_link = get_the_title($post->ID);					}					echo "<td $attributes>\n";					echo '<div class="response-links"><span class="post-com-count-wrapper">';					echo $post_link . '<br />';					$pending_phrase = esc_attr(sprintf( __('%s pending'), number_format( $pending_comments ) ));					if ( $pending_comments )						echo '<strong>';					comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');					if ( $pending_comments )						echo '</strong>';					echo '</span> ';					echo "<a href='" . get_permalink( $post->ID ) . "'>#</a>";					echo '</div>';					if ( 'attachment' == $post->post_type && ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) )						echo $thumb;					echo '</td>';				}				break;			default:				echo "<td $attributes>\n";				do_action( 'manage_comments_custom_column', $column_name, $comment->comment_ID );				echo "</td>\n";				break;		}	}	echo "</tr>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $position * @param unknown_type $checkbox * @param unknown_type $mode */function wp_comment_reply($position = '1', $checkbox = false, $mode = 'single', $table_row = true) {	global $current_user;	// allow plugin to replace the popup content	$content = apply_filters( 'wp_comment_reply', '', array('position' => $position, 'checkbox' => $checkbox, 'mode' => $mode) );	if ( ! empty($content) ) {		echo $content;		return;	}	$columns = get_column_headers('edit-comments');	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns('edit-comments') ) );	$col_count = count($columns) - count($hidden);?><form method="get" action=""><?php if ( $table_row ) : ?><table style="display:none;"><tbody id="com-reply"><tr id="replyrow" style="display:none;"><td colspan="<?php echo $col_count; ?>"><?php else : ?><div id="com-reply" style="display:none;"><div id="replyrow" style="display:none;"><?php endif; ?>	<div id="replyhead" style="display:none;"><?php _e('Reply to Comment'); ?></div>	<div id="edithead" style="display:none;">		<div class="inside">		<label for="author"><?php _e('Name') ?></label>		<input type="text" name="newcomment_author" size="50" value="" tabindex="101" id="author" />		</div>		<div class="inside">		<label for="author-email"><?php _e('E-mail') ?></label>		<input type="text" name="newcomment_author_email" size="50" value="" tabindex="102" id="author-email" />		</div>		<div class="inside">		<label for="author-url"><?php _e('URL') ?></label>		<input type="text" id="author-url" name="newcomment_author_url" size="103" value="" tabindex="103" />		</div>		<div style="clear:both;"></div>	</div>	<div id="replycontainer"><textarea rows="8" cols="40" name="replycontent" tabindex="104" id="replycontent"></textarea></div>	<p id="replysubmit" class="submit">	<a href="#comments-form" class="cancel button-secondary alignleft" tabindex="106"><?php _e('Cancel'); ?></a>	<a href="#comments-form" class="save button-primary alignright" tabindex="104">	<span id="savebtn" style="display:none;"><?php _e('Update Comment'); ?></span>	<span id="replybtn" style="display:none;"><?php _e('Submit Reply'); ?></span></a>	<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />	<span class="error" style="display:none;"></span>	<br class="clear" />	</p>	<input type="hidden" name="user_ID" id="user_ID" value="<?php echo $current_user->ID; ?>" />	<input type="hidden" name="action" id="action" value="" />	<input type="hidden" name="comment_ID" id="comment_ID" value="" />	<input type="hidden" name="comment_post_ID" id="comment_post_ID" value="" />	<input type="hidden" name="status" id="status" value="" />	<input type="hidden" name="position" id="position" value="<?php echo $position; ?>" />	<input type="hidden" name="checkbox" id="checkbox" value="<?php echo $checkbox ? 1 : 0; ?>" />	<input type="hidden" name="mode" id="mode" value="<?php echo esc_attr($mode); ?>" />	<?php wp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false ); ?>	<?php wp_comment_form_unfiltered_html_nonce(); ?><?php if ( $table_row ) : ?></td></tr></tbody></table><?php else : ?></div></div><?php endif; ?></form><?php}/** * Output 'undo move to trash' text for comments * * @since 2.9.0 */function wp_comment_trashnotice() {?><div class="hidden" id="trash-undo-holder">	<div class="trash-undo-inside"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class="undo untrash"><a href="#"><?php _e('Undo'); ?></a></span></div></div><div class="hidden" id="spam-undo-holder">	<div class="spam-undo-inside"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class="undo unspam"><a href="#"><?php _e('Undo'); ?></a></span></div></div><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta */function list_meta( $meta ) {	// Exit if no meta	if ( ! $meta ) {		echo '<table id="list-table" style="display: none;">	<thead>	<tr>		<th class="left">' . __( 'Name' ) . '</th>		<th>' . __( 'Value' ) . '</th>	</tr>	</thead>	<tbody id="the-list" class="list:meta">	<tr><td></td></tr>	</tbody></table>'; //TBODY needed for list-manipulation JS		return;	}	$count = 0;?><table id="list-table">	<thead>	<tr>		<th class="left"><?php _e( 'Name' ) ?></th>		<th><?php _e( 'Value' ) ?></th>	</tr>	</thead>	<tbody id='the-list' class='list:meta'><?php	foreach ( $meta as $entry )		echo _list_meta_row( $entry, $count );?>	</tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $entry * @param unknown_type $count * @return unknown */function _list_meta_row( $entry, &$count ) {	static $update_nonce = false;	if ( !$update_nonce )		$update_nonce = wp_create_nonce( 'add-meta' );	$r = '';	++ $count;	if ( $count % 2 )		$style = 'alternate';	else		$style = '';	if ('_' == $entry['meta_key'] { 0 } )		$style .= ' hidden';	if ( is_serialized( $entry['meta_value'] ) ) {		if ( is_serialized_string( $entry['meta_value'] ) ) {			// this is a serialized string, so we should display it			$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );		} else {			// this is a serialized array/object so we should NOT display it			--$count;			return;		}	}	$entry['meta_key'] = esc_attr($entry['meta_key']);	$entry['meta_value'] = htmlspecialchars($entry['meta_value']); // using a <textarea />	$entry['meta_id'] = (int) $entry['meta_id'];	$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );	$r .= "\n\t<tr id='meta-{$entry['meta_id']}' class='$style'>";	$r .= "\n\t\t<td class='left'><label class='screen-reader-text' for='meta[{$entry['meta_id']}][key]'>" . __( 'Key' ) . "</label><input name='meta[{$entry['meta_id']}][key]' id='meta[{$entry['meta_id']}][key]' tabindex='6' type='text' size='20' value='{$entry['meta_key']}' />";	$r .= "\n\t\t<div class='submit'><input name='deletemeta[{$entry['meta_id']}]' type='submit' ";	$r .= "class='delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce deletemeta' tabindex='6' value='". esc_attr__( 'Delete' ) ."' />";	$r .= "\n\t\t<input name='updatemeta' type='submit' tabindex='6' value='". esc_attr__( 'Update' ) ."' class='add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce updatemeta' /></div>";	$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );	$r .= "</td>";	$r .= "\n\t\t<td><label class='screen-reader-text' for='meta[{$entry['meta_id']}][value]'>" . __( 'Value' ) . "</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta[{$entry['meta_id']}][value]' tabindex='6' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\n\t</tr>";	return $r;}/** * {@internal Missing Short Description}} * * @since unknown */function meta_form() {	global $wpdb;	$limit = (int) apply_filters( 'postmeta_form_limit', 30 );	$keys = $wpdb->get_col( "		SELECT meta_key		FROM $wpdb->postmeta		GROUP BY meta_key		HAVING meta_key NOT LIKE '\_%'		ORDER BY meta_key		LIMIT $limit" );	if ( $keys )		natcasesort($keys);?><p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p><table id="newmeta"><thead><tr><th class="left"><label for="metakeyselect"><?php _e( 'Name' ) ?></label></th><th><label for="metavalue"><?php _e( 'Value' ) ?></label></th></tr></thead><tbody><tr><td id="newmetaleft" class="left"><?php if ( $keys ) { ?><select id="metakeyselect" name="metakeyselect" tabindex="7"><option value="#NONE#"><?php _e( '&mdash; Select &mdash;' ); ?></option><?php	foreach ( $keys as $key ) {		echo "\n<option value='" . esc_attr($key) . "'>" . esc_html($key) . "</option>";	}?></select><input class="hide-if-js" type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><a href="#postcustomstuff" class="hide-if-no-js" onclick="jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;"><span id="enternew"><?php _e('Enter new'); ?></span><span id="cancelnew" class="hidden"><?php _e('Cancel'); ?></span></a><?php } else { ?><input type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><?php } ?></td><td><textarea id="metavalue" name="metavalue" rows="2" cols="25" tabindex="8"></textarea></td></tr><tr><td colspan="2" class="submit"><input type="submit" id="addmetasub" name="addmeta" class="add:the-list:newmeta" tabindex="9" value="<?php esc_attr_e( 'Add Custom Field' ) ?>" /><?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?></td></tr></tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $edit * @param unknown_type $for_post * @param unknown_type $tab_index * @param unknown_type $multi */function touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {	global $wp_locale, $post, $comment;	if ( $for_post )		$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	// echo '<label for="timestamp" style="display: block;"><input type="checkbox" class="checkbox" name="edit_date" value="1" id="timestamp"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';	$time_adj = current_time('timestamp');	$post_date = ($for_post) ? $post->post_date : $comment->comment_date;	$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );	$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );	$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );	$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );	$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );	$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );	$cur_jj = gmdate( 'd', $time_adj );	$cur_mm = gmdate( 'm', $time_adj );	$cur_aa = gmdate( 'Y', $time_adj );	$cur_hh = gmdate( 'H', $time_adj );	$cur_mn = gmdate( 'i', $time_adj );	$month = "<select " . ( $multi ? '' : 'id="mm" ' ) . "name=\"mm\"$tab_index_attribute>\n";	for ( $i = 1; $i < 13; $i = $i +1 ) {		$month .= "\t\t\t" . '<option value="' . zeroise($i, 2) . '"';		if ( $i == $mm )			$month .= ' selected="selected"';		$month .= '>' . $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) ) . "</option>\n";	}	$month .= '</select>';	$day = '<input type="text" ' . ( $multi ? '' : 'id="jj" ' ) . 'name="jj" value="' . $jj . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$year = '<input type="text" ' . ( $multi ? '' : 'id="aa" ' ) . 'name="aa" value="' . $aa . '" size="4" maxlength="4"' . $tab_index_attribute . ' autocomplete="off" />';	$hour = '<input type="text" ' . ( $multi ? '' : 'id="hh" ' ) . 'name="hh" value="' . $hh . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$minute = '<input type="text" ' . ( $multi ? '' : 'id="mn" ' ) . 'name="mn" value="' . $mn . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	echo '<div class="timestamp-wrap">';	/* translators: 1: month input, 2: day input, 3: year input, 4: hour input, 5: minute input */	printf(__('%1$s%2$s, %3$s @ %4$s : %5$s'), $month, $day, $year, $hour, $minute);	echo '</div><input type="hidden" id="ss" name="ss" value="' . $ss . '" />';	if ( $multi ) return;	echo "\n\n";	foreach ( array('mm', 'jj', 'aa', 'hh', 'mn') as $timeunit ) {		echo '<input type="hidden" id="hidden_' . $timeunit . '" name="hidden_' . $timeunit . '" value="' . $$timeunit . '" />' . "\n";		$cur_timeunit = 'cur_' . $timeunit;		echo '<input type="hidden" id="'. $cur_timeunit . '" name="'. $cur_timeunit . '" value="' . $$cur_timeunit . '" />' . "\n";	}?><p><a href="#edit_timestamp" class="save-timestamp hide-if-no-js button"><?php _e('OK'); ?></a><a href="#edit_timestamp" class="cancel-timestamp hide-if-no-js"><?php _e('Cancel'); ?></a></p><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default */function page_template_dropdown( $default = '' ) {	$templates = get_page_templates();	ksort( $templates );	foreach (array_keys( $templates ) as $template )		: if ( $default == $templates[$template] )			$selected = " selected='selected'";		else			$selected = '';	echo "\n\t<option value='".$templates[$template]."' $selected>$template</option>";	endforeach;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $level * @return unknown */function parent_dropdown( $default = 0, $parent = 0, $level = 0 ) {	global $wpdb, $post_ID;	$items = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order", $parent) );	if ( $items ) {		foreach ( $items as $item ) {			// A page cannot be its own parent.			if (!empty ( $post_ID ) ) {				if ( $item->ID == $post_ID ) {					continue;				}			}			$pad = str_repeat( '&nbsp;', $level * 3 );			if ( $item->ID == $default)				$current = ' selected="selected"';			else				$current = '';			echo "\n\t<option class='level-$level' value='$item->ID'$current>$pad " . esc_html($item->post_title) . "</option>";			parent_dropdown( $default, $item->ID, $level +1 );		}	} else {		return false;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function the_attachment_links( $id = false ) {	$id = (int) $id;	$post = & get_post( $id );	if ( $post->post_type != 'attachment' )		return false;	$icon = wp_get_attachment_image( $post->ID, 'thumbnail', true );	$attachment_data = wp_get_attachment_metadata( $id );	$thumb = isset( $attachment_data['thumb'] );?><form id="the-attachment-links"><table>	<col />	<col class="widefat" />	<tr>		<th scope="row"><?php _e( 'URL' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><?php echo wp_get_attachment_url(); ?></textarea></td>	</tr><?php if ( $icon ) : ?>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to file' ) : _e( 'Image linked to file' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>"><?php echo $icon ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to page' ) : _e( 'Image linked to page' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID; ?>"><?php echo $icon ?></a></textarea></td>	</tr><?php else : ?>	<tr>		<th scope="row"><?php _e( 'Link to file' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>" class="attachmentlink"><?php echo basename( wp_get_attachment_url() ); ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php _e( 'Link to page' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID ?>"><?php the_title(); ?></a></textarea></td>	</tr><?php endif; ?></table></form><?php}/** * Print out <option> html elements for role selectors based on $wp_roles * * @package WordPress * @subpackage Administration * @since 2.1 * * @uses $wp_roles * @param string $default slug for the role that should be already selected */function wp_dropdown_roles( $selected = false ) {	$p = '';	$r = '';	$editable_roles = get_editable_roles();	foreach ( $editable_roles as $role => $details ) {		$name = translate_user_role($details['name'] );		if ( $selected == $role ) // Make default first in list			$p = "\n\t<option selected='selected' value='" . esc_attr($role) . "'>$name</option>";		else			$r .= "\n\t<option value='" . esc_attr($role) . "'>$name</option>";	}	echo $p . $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $size * @return unknown */function wp_convert_hr_to_bytes( $size ) {	$size = strtolower($size);	$bytes = (int) $size;	if ( strpos($size, 'k') !== false )		$bytes = intval($size) * 1024;	elseif ( strpos($size, 'm') !== false )		$bytes = intval($size) * 1024 * 1024;	elseif ( strpos($size, 'g') !== false )		$bytes = intval($size) * 1024 * 1024 * 1024;	return $bytes;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $bytes * @return unknown */function wp_convert_bytes_to_hr( $bytes ) {	$units = array( 0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB' );	$log = log( $bytes, 1024 );	$power = (int) $log;	$size = pow(1024, $log - $power);	return $size . $units[$power];}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_max_upload_size() {	$u_bytes = wp_convert_hr_to_bytes( ini_get( 'upload_max_filesize' ) );	$p_bytes = wp_convert_hr_to_bytes( ini_get( 'post_max_size' ) );	$bytes = apply_filters( 'upload_size_limit', min($u_bytes, $p_bytes), $u_bytes, $p_bytes );	return $bytes;}/** * Outputs the form used by the importers to accept the data to be imported * * @since 2.0 * * @param string $action The action attribute for the form. */function wp_import_upload_form( $action ) {	$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );	$size = wp_convert_bytes_to_hr( $bytes );	$upload_dir = wp_upload_dir();	if ( ! empty( $upload_dir['error'] ) ) :		?><div class="error"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>		<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php	else :?><form enctype="multipart/form-data" id="import-upload-form" method="post" action="<?php echo esc_attr(wp_nonce_url($action, 'import-upload')); ?>"><p><label for="upload"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)<input type="file" id="upload" name="import" size="25" /><input type="hidden" name="action" value="save" /><input type="hidden" name="max_file_size" value="<?php echo $bytes; ?>" /></p><p class="submit"><input type="submit" class="button" value="<?php esc_attr_e( 'Upload file and import' ); ?>" /></p></form><?php	endif;}/** * Add a meta box to an edit form. * * @since 2.5.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $title Title of the meta box. * @param string $callback Function that fills the box with the desired content. The function should echo its output. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). * @param string $priority The priority within the context where the boxes should show ('high', 'low'). */function add_meta_box($id, $title, $callback, $page, $context = 'advanced', $priority = 'default', $callback_args=null) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {	foreach ( array('high', 'core', 'default', 'low') as $a_priority ) {		if ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )			continue;		// If a core box was previously added or removed by a plugin, don't add.		if ( 'core' == $priority ) {			// If core box previously deleted, don't add			if ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )				return;			// If box was added with default priority, give it core priority to maintain sort order			if ( 'default' == $a_priority ) {				$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];				unset($wp_meta_boxes[$page][$a_context]['default'][$id]);			}			return;		}		// If no priority given and id already present, use existing priority		if ( empty($priority) ) {			$priority = $a_priority;		// else if we're adding to the sorted priortiy, we don't know the title or callback. Glab them from the previously added context/priority.		} elseif ( 'sorted' == $priority ) {			$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];			$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];			$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];		}		// An id can be in only one priority and one context		if ( $priority != $a_priority || $context != $a_context )			unset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);	}	}	if ( empty($priority) )		$priority = 'low';	if ( !isset($wp_meta_boxes[$page][$context][$priority]) )		$wp_meta_boxes[$page][$context][$priority] = array();	$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);}/** * Meta-Box template function * * @since 2.5.0 * * @param string $page page identifier, also known as screen identifier * @param string $context box context * @param mixed $object gets passed to the box callback function as first parameter * @return int number of meta_boxes */function do_meta_boxes($page, $context, $object) {	global $wp_meta_boxes;	static $already_sorted = false;	$hidden = get_hidden_meta_boxes($page);	printf('<div id="%s-sortables" class="meta-box-sortables">', htmlspecialchars($context));	$i = 0;	do {		// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose		if ( !$already_sorted && $sorted = get_user_option( "meta-box-order_$page" ) ) {			foreach ( $sorted as $box_context => $ids )				foreach ( explode(',', $ids) as $id )					if ( $id )						add_meta_box( $id, null, null, $page, $box_context, 'sorted' );		}		$already_sorted = true;		if ( !isset($wp_meta_boxes) || !isset($wp_meta_boxes[$page]) || !isset($wp_meta_boxes[$page][$context]) )			break;		foreach ( array('high', 'sorted', 'core', 'default', 'low') as $priority ) {			if ( isset($wp_meta_boxes[$page][$context][$priority]) ) {				foreach ( (array) $wp_meta_boxes[$page][$context][$priority] as $box ) {					if ( false == $box || ! $box['title'] )						continue;					$i++;					$style = '';					$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';					echo '<div id="' . $box['id'] . '" class="postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '" ' . '>' . "\n";					echo '<div class="handlediv" title="' . __('Click to toggle') . '"><br /></div>';					echo "<h3 class='hndle'><span>{$box['title']}</span></h3>\n";					echo '<div class="inside">' . "\n";					call_user_func($box['callback'], $object, $box);					echo "</div>\n";					echo "</div>\n";				}			}		}	} while(0);	echo "</div>";	return $i;}/** * Remove a meta box from an edit form. * * @since 2.6.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). */function remove_meta_box($id, $page, $context) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array('high', 'core', 'default', 'low') as $priority )		$wp_meta_boxes[$page][$context][$priority][$id] = false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function meta_box_prefs($screen) {	global $wp_meta_boxes;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( empty($wp_meta_boxes[$screen->id]) )		return;	$hidden = get_hidden_meta_boxes($screen);	foreach ( array_keys($wp_meta_boxes[$screen->id]) as $context ) {		foreach ( array_keys($wp_meta_boxes[$screen->id][$context]) as $priority ) {			foreach ( $wp_meta_boxes[$screen->id][$context][$priority] as $box ) {				if ( false == $box || ! $box['title'] )					continue;				// Submit box cannot be hidden				if ( 'submitdiv' == $box['id'] || 'linksubmitdiv' == $box['id'] )					continue;				$box_id = $box['id'];				echo '<label for="' . $box_id . '-hide">';				echo '<input class="hide-postbox-tog" name="' . $box_id . '-hide" type="checkbox" id="' . $box_id . '-hide" value="' . $box_id . '"' . (! in_array($box_id, $hidden) ? ' checked="checked"' : '') . ' />';				echo "{$box['title']}</label>\n";			}		}	}}/** * Get Hidden Meta Boxes * * @since 2.7 * * @param string|object $screen Screen identifier * @return array Hidden Meta Boxes */function get_hidden_meta_boxes( $screen ) {	if ( is_string( $screen ) )		$screen = convert_to_screen( $screen );	$hidden = get_user_option( "metaboxhidden_{$screen->id}" );	// Hide slug boxes by default	if ( !is_array( $hidden ) )		$hidden = array('slugdiv');	return $hidden;}/** * Add a new section to a settings page. * * Part of the Settings API. Use this to define new settings sections for an admin page. * Show settings sections in your admin page callback function with do_settings_sections(). * Add settings fields to your section with add_settings_field() * * The $callback argument should be the name of a function that echoes out any * content you want to show at the top of the settings section before the actual * fields. It can output nothing if you want. * * @since 2.7.0 * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * * @param string $id Slug-name to identify the section. Used in the 'id' attribute of tags. * @param string $title Formatted title of the section. Shown as the heading for the section. * @param string $callback Function that echos out any content at the top of the section (between heading and fields). * @param string $page The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page(); */function add_settings_section($id, $title, $callback, $page) {	global $wp_settings_sections;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_sections) )		$wp_settings_sections = array();	if ( !isset($wp_settings_sections[$page]) )		$wp_settings_sections[$page] = array();	if ( !isset($wp_settings_sections[$page][$id]) )		$wp_settings_sections[$page][$id] = array();	$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);}/** * Add a new field to a section of a settings page * * Part of the Settings API. Use this to define a settings field that will show * as part of a settings section inside a settings page. The fields are shown using * do_settings_fields() in do_settings-sections() * * The $callback argument should be the name of a function that echoes out the * html input tags for this setting field. Use get_option() to retrive existing * values to show. * * @since 2.7.0 * * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * * @param string $id Slug-name to identify the field. Used in the 'id' attribute of tags. * @param string $title Formatted title of the field. Shown as the label for the field during output. * @param string $callback Function that fills the field with the desired form inputs. The function should echo its output. * @param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...). * @param string $section The slug-name of the section of the settingss page in which to show the box (default, ...). * @param array $args Additional arguments */function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {	global $wp_settings_fields;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_fields) )		$wp_settings_fields = array();	if ( !isset($wp_settings_fields[$page]) )		$wp_settings_fields[$page] = array();	if ( !isset($wp_settings_fields[$page][$section]) )		$wp_settings_fields[$page][$section] = array();	$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);}/** * Prints out all settings sections added to a particular settings page * * Part of the Settings API. Use this in a settings page callback function * to output all the sections and fields that were added to that $page with * add_settings_section() and add_settings_field() * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * @since unknown * * @param string $page The slug name of the page whos settings sections you want to output */function do_settings_sections($page) {	global $wp_settings_sections, $wp_settings_fields;	if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )		return;	foreach ( (array) $wp_settings_sections[$page] as $section ) {		echo "<h3>{$section['title']}</h3>\n";		call_user_func($section['callback'], $section);		if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )			continue;		echo '<table class="form-table">';		do_settings_fields($page, $section['id']);		echo '</table>';	}}/** * Print out the settings fields for a particular settings section * * Part of the Settings API. Use this in a settings page to output * a specific section. Should normally be called by do_settings_sections() * rather than directly. * * @global $wp_settings_fields Storage array of settings fields and their pages/sections * * @since unknown * * @param string $page Slug title of the admin page who's settings fields you want to show. * @param section $section Slug title of the settings section who's fields you want to show. */function do_settings_fields($page, $section) {	global $wp_settings_fields;	if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section]) )		return;	foreach ( (array) $wp_settings_fields[$page][$section] as $field ) {		echo '<tr valign="top">';		if ( !empty($field['args']['label_for']) )			echo '<th scope="row"><label for="' . $field['args']['label_for'] . '">' . $field['title'] . '</label></th>';		else			echo '<th scope="row">' . $field['title'] . '</th>';		echo '<td>';		call_user_func($field['callback'], $field['args']);		echo '</td>';		echo '</tr>';	}}/** * Register a settings error to be displayed to the user * * Part of the Settings API. Use this to show messages to users about settings validation * problems, missing settings or anything else. * * Settings errors should be added inside the $sanitize_callback function defined in * register_setting() for a given setting to give feedback about the submission. * * By default messages will show immediately after the submission that generated the error. * Additional calls to settings_errors() can be used to show errors even when the settings * page is first accessed. * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Slug title of the setting to which this error applies * @param string $code Slug-name to identify the error. Used as part of 'id' attribute in HTML output. * @param string $message The formatted message text to display to the user (will be shown inside styled <div> and <p>) * @param string $type The type of message it is, controls HTML class. Use 'error' or 'updated'. */function add_settings_error( $setting, $code, $message, $type = 'error' ) {	global $wp_settings_errors;	if ( !isset($wp_settings_errors) )		$wp_settings_errors = array();	$new_error = array(		'setting' => $setting,		'code' => $code,		'message' => $message,		'type' => $type	);	$wp_settings_errors[] = $new_error;}/** * Fetch settings errors registered by add_settings_error() * * Checks the $wp_settings_errors array for any errors declared during the current * pageload and returns them. * * If changes were just submitted ($_GET['updated']) and settings errors were saved * to the 'settings_errors' transient then those errors will be returned instead. This * is used to pass errors back across pageloads. * * Use the $sanitize argument to manually re-sanitize the option before returning errors. * This is useful if you have errors or notices you want to show even when the user * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook) * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @return array Array of settings errors */function get_settings_errors( $setting = '', $sanitize = FALSE ) {	global $wp_settings_errors;	// If $sanitize is true, manually re-run the sanitizisation for this option	// This allows the $sanitize_callback from register_setting() to run, adding	// any settings errors you want to show by default.	if ( $sanitize )		sanitize_option( $setting, get_option($setting));	// If settings were passed back from options.php then use them	// Ignore transients if $sanitize is true, we dont' want the old values anyway	if ( isset($_GET['updated']) && $_GET['updated'] && get_transient('settings_errors') ) {		$settings_errors = get_transient('settings_errors');		delete_transient('settings_errors');	// Otherwise check global in case validation has been run on this pageload	} elseif ( count( $wp_settings_errors ) ) {		$settings_errors = $wp_settings_errors;	} else {		return;	}	// Filter the results to those of a specific setting if one was set	if ( $setting ) {		foreach ( (array) $settings_errors as $key => $details )			if ( $setting != $details['setting'] )				unset( $settings_errors[$key] );	}	return $settings_errors;}/** * Display settings errors registered by add_settings_error() * * Part of the Settings API. Outputs a <div> for each error retrieved by get_settings_errors(). * * This is called automatically after a settings page based on the Settings API is submitted. * Errors should be added during the validation callback function for a setting defined in register_setting() * * The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization * on its current value. * * The $hide_on_update option will cause errors to only show when the settings page is first loaded. * if the user has already saved new values it will be hidden to avoid repeating messages already * shown in the default error reporting after submission. This is useful to show general errors like missing * settings when the user arrives at the settings page. * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted. * @return <type> */function settings_errors ( $setting = '', $sanitize = FALSE, $hide_on_update = FALSE ) {	if ($hide_on_update AND $_GET['updated']) return;	$settings_errors = get_settings_errors( $setting, $sanitize );	if ( !is_array($settings_errors) ) return;	$output = '';	foreach ( $settings_errors as $key => $details ) {		$css_id = 'setting-error-' . $details['code'];		$css_class = $details['type'] . ' settings-error';		$output .= "<div id='$css_id' class='$css_class'> \n";		$output .= "<p><strong>{$details['message']}</strong></p>";		$output .= "</div> \n";	}	echo $output;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page */function manage_columns_prefs( $page ) {	$columns = get_column_headers( $page );	$hidden  = get_hidden_columns( $page );	$special = array('_title', 'cb', 'comment', 'media', 'name', 'title', 'username');	foreach ( $columns as $column => $title ) {		// Can't hide these or they are special		if ( in_array( $column, $special ) )			continue;		if ( empty( $title ) )			continue;		if ( 'comments' == $column )			$title = __( 'Comments' );		$id = "$column-hide";		echo '<label for="' . $id . '">';		echo '<input class="hide-column-tog" name="' . $id . '" type="checkbox" id="' . $id . '" value="' . $column . '"' . (! in_array($column, $hidden) ? ' checked="checked"' : '') . ' />';		echo "$title</label>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $found_action */function find_posts_div($found_action = '') {?>	<div id="find-posts" class="find-box" style="display:none;">		<div id="find-posts-head" class="find-box-head"><?php _e('Find Posts or Pages'); ?></div>		<div class="find-box-inside">			<div class="find-box-search">				<?php if ( $found_action ) { ?>					<input type="hidden" name="found_action" value="<?php echo esc_attr($found_action); ?>" />				<?php } ?>				<input type="hidden" name="affected" id="affected" value="" />				<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>				<label class="screen-reader-text" for="find-posts-input"><?php _e( 'Search' ); ?></label>				<input type="text" id="find-posts-input" name="ps" value="" />				<input type="button" onclick="findPosts.send();" value="<?php esc_attr_e( 'Search' ); ?>" class="button" /><br />				<?php				$post_types = get_post_types( array('public' => true), 'objects' );				foreach ( $post_types as $post ) {					if ( 'attachment' == $post->name )						continue;				?>				<input type="radio" name="find-posts-what" id="find-posts-<?php echo esc_attr($post->name); ?>" value="<?php echo esc_attr($post->name); ?>" <?php checked($post->name,  'post'); ?> />				<label for="find-posts-<?php echo esc_attr($post->name); ?>"><?php echo $post->label; ?></label>				<?php				} ?>			</div>			<div id="find-posts-response"></div>		</div>		<div class="find-box-buttons">			<input type="button" class="button alignleft" onclick="findPosts.close();" value="<?php esc_attr_e('Close'); ?>" />			<input id="find-posts-submit" type="submit" class="button-primary alignright" value="<?php esc_attr_e('Select'); ?>" />		</div>	</div><?php}/** * Display the post password. * * The password is passed through {@link esc_attr()} to ensure that it * is safe for placing in an html attribute. * * @uses attr * @since 2.7.0 */function the_post_password() {	global $post;	if ( isset( $post->post_password ) ) echo esc_attr( $post->post_password );}/** * {@internal Missing Short Description}} * * @since unknown */function favorite_actions( $screen = null ) {	$default_action = false;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( isset($screen->post_type) ) {		$post_type_object = get_post_type_object($screen->post_type);		if ( 'add' != $screen->action )			$default_action = array('post-new.php?post_type=' . $post_type_object->name => array($post_type_object->labels->new_item, $post_type_object->cap->edit_posts));		else			$default_action = array('edit.php?post_type=' . $post_type_object->name => array($post_type_object->labels->name, $post_type_object->cap->edit_posts));	}	if ( !$default_action ) {		switch ( $screen->id ) {			case 'upload':				$default_action = array('media-new.php' => array(__('New Media'), 'upload_files'));				break;			case 'media':				$default_action = array('upload.php' => array(__('Edit Media'), 'upload_files'));				break;			case 'link-manager':			case 'link':				if ( 'add' != $screen->action )					$default_action = array('link-add.php' => array(__('New Link'), 'manage_links'));				else					$default_action = array('link-manager.php' => array(__('Edit Links'), 'manage_links'));				break;			case 'users':				$default_action = array('user-new.php' => array(__('New User'), 'create_users'));				break;			case 'user':				$default_action = array('users.php' => array(__('Edit Users'), 'edit_users'));				break;			case 'plugins':				$default_action = array('plugin-install.php' => array(__('Install Plugins'), 'install_plugins'));				break;			case 'plugin-install':				$default_action = array('plugins.php' => array(__('Manage Plugins'), 'activate_plugins'));				break;			case 'themes':				$default_action = array('theme-install.php' => array(__('Install Themes'), 'install_themes'));				break;			case 'theme-install':				$default_action = array('themes.php' => array(__('Manage Themes'), 'switch_themes'));				break;			default:				$default_action = array('post-new.php' => array(__('New Post'), 'edit_posts'));				break;		}	}	$actions = array(		'post-new.php' => array(__('New Post'), 'edit_posts'),		'edit.php?post_status=draft' => array(__('Drafts'), 'edit_posts'),		'post-new.php?post_type=page' => array(__('New Page'), 'edit_pages'),		'media-new.php' => array(__('Upload'), 'upload_files'),		'edit-comments.php' => array(__('Comments'), 'moderate_comments')		);	$default_key = array_keys($default_action);	$default_key = $default_key[0];	if ( isset($actions[$default_key]) )		unset($actions[$default_key]);	$actions = array_merge($default_action, $actions);	$actions = apply_filters('favorite_actions', $actions);	$allowed_actions = array();	foreach ( $actions as $action => $data ) {		if ( current_user_can($data[1]) )			$allowed_actions[$action] = $data[0];	}	if ( empty($allowed_actions) )		return;	$first = array_keys($allowed_actions);	$first = $first[0];	echo '<div id="favorite-actions">';	echo '<div id="favorite-first"><a href="' . $first . '">' . $allowed_actions[$first] . '</a></div><div id="favorite-toggle"><br /></div>';	echo '<div id="favorite-inside">';	array_shift($allowed_actions);	foreach ( $allowed_actions as $action => $label) {		echo "<div class='favorite-action'><a href='$action'>";		echo $label;		echo "</a></div>\n";	}	echo "</div></div>\n";}/** * Get the post title. * * The post title is fetched and if it is blank then a default string is * returned. * * @since 2.7.0 * @param int $id The post id. If not supplied the global $post is used. * */function _draft_or_post_title($post_id = 0) {	$title = get_the_title($post_id);	if ( empty($title) )		$title = __('(no title)');	return $title;}/** * Display the search query. * * A simple wrapper to display the "s" parameter in a GET URI. This function * should only be used when {@link the_search_query()} cannot. * * @uses attr * @since 2.7.0 * */function _admin_search_query() {	echo isset($_GET['s']) ? esc_attr( stripslashes( $_GET['s'] ) ) : '';}/** * Generic Iframe header for use with Thickbox * * @since 2.7.0 * @param string $title Title of the Iframe page. * @param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued). * */function iframe_header( $title = '', $limit_styles = false ) {global $hook_suffix;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );if ( ! $limit_styles )	wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}//]]></script><?phpdo_action('admin_print_styles');do_action('admin_print_scripts');do_action('admin_head');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>  class="no-js <?php echo $admin_body_class; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><?php}/** * Generic Iframe footer for use with Thickbox * * @since 2.7.0 * */function iframe_footer() {	//We're going to hide any footer output on iframe pages, but run the hooks anyway since they output Javascript or other needed content. ?>	<div class="hidden"><?php	do_action('admin_footer', '');	do_action('admin_print_footer_scripts'); ?>	</div><script type="text/javascript">if(typeof wpOnload=="function")wpOnload();</script></body></html><?php}function _post_states($post) {	$post_states = array();	if ( isset($_GET['post_status']) )		$post_status = $_GET['post_status'];	else		$post_status = '';	if ( !empty($post->post_password) )		$post_states[] = __('Password protected');	if ( 'private' == $post->post_status && 'private' != $post_status )		$post_states[] = __('Private');	if ( 'draft' == $post->post_status && 'draft' != $post_status )		$post_states[] = __('Draft');	if ( 'pending' == $post->post_status && 'pending' != $post_status )		/* translators: post state */		$post_states[] = _x('Pending', 'post state');	if ( is_sticky($post->ID) )		$post_states[] = __('Sticky');	$post_states = apply_filters( 'display_post_states', $post_states );	if ( ! empty($post_states) ) {		$state_count = count($post_states);		$i = 0;		echo ' - ';		foreach ( $post_states as $state ) {			++$i;			( $i == $state_count ) ? $sep = '' : $sep = ', ';			echo "<span class='post-state'>$state$sep</span>";		}	}}/** * Convert a screen string to a screen object * * @since 3.0.0 * * @param string $screen The name of the screen * @return object An object containing the safe screen name and id */function convert_to_screen( $screen ) {	$screen = str_replace( array('.php', '-new', '-add' ), '', $screen);	$screen = (string) apply_filters( 'screen_meta_screen', $screen );	$screen = (object) array('id' => $screen, 'base' => $screen);	return $screen;}function screen_meta($screen) {	global $wp_meta_boxes, $_wp_contextual_help, $title;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$column_screens = get_column_headers($screen);	$meta_screens = array('index' => 'dashboard');	if ( isset($meta_screens[$screen->id]) ) {		$screen->id = $meta_screens[$screen->id];		$screen->base = $screen->id;	}	$show_screen = false;	if ( !empty($wp_meta_boxes[$screen->id]) || !empty($column_screens) )		$show_screen = true;	$screen_options = screen_options($screen);	if ( $screen_options )		$show_screen = true;	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$settings = apply_filters('screen_settings', '', $screen);	switch ( $screen->id ) {		case 'widgets':			$settings = '<p><a id="access-on" href="widgets.php?widgets-access=on">' . __('Enable accessibility mode') . '</a><a id="access-off" href="widgets.php?widgets-access=off">' . __('Disable accessibility mode') . "</a></p>\n";			$show_screen = true;			break;	}	if( ! empty( $settings ) )		$show_screen = true;?><div id="screen-meta"><?php if ( $show_screen ) : ?><div id="screen-options-wrap" class="hidden">	<form id="adv-settings" action="" method="post">	<?php if ( isset($wp_meta_boxes[$screen->id]) ) : ?>		<h5><?php _ex('Show on screen', 'Metaboxes') ?></h5>		<div class="metabox-prefs">			<?php meta_box_prefs($screen); ?>			<br class="clear" />		</div>		<?php endif;		if ( ! empty($column_screens) ) : ?>		<h5><?php echo ( isset( $column_screens['_title'] ) ?  $column_screens['_title'] :  _x('Show on screen', 'Columns') ) ?></h5>		<div class="metabox-prefs">			<?php manage_columns_prefs($screen); ?>			<br class="clear" />		</div>	<?php endif;	echo screen_layout($screen);	if ( !empty( $screen_options ) ) {		?>		<h5><?php _ex('Show on screen', 'Screen Options') ?></h5>		<?php	}	echo $screen_options;	echo $settings; ?><div><?php wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false ); ?></div></form></div><?php endif; // $show_screen	$_wp_contextual_help = apply_filters('contextual_help_list', $_wp_contextual_help, $screen);	?>	<div id="contextual-help-wrap" class="hidden">	<?php	$contextual_help = '';	if ( isset($_wp_contextual_help[$screen->id]) ) {		$contextual_help .= '<div class="metabox-prefs">' . $_wp_contextual_help[$screen->id] . "</div>\n";	} else {		$contextual_help .= '<div class="metabox-prefs">';		$default_help = __('<a href="http://codex.wordpress.org/" target="_blank">Documentation</a>');		$default_help .= '<br />';		$default_help .= __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>');		$contextual_help .= apply_filters('default_contextual_help', $default_help);		$contextual_help .= "</div>\n";	}	echo apply_filters('contextual_help', $contextual_help, $screen->id, $screen);	?>	</div><div id="screen-meta-links"><div id="contextual-help-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#contextual-help" id="contextual-help-link" class="show-settings"><?php _e('Help') ?></a></div><?php if ( $show_screen ) { ?><div id="screen-options-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#screen-options" id="show-settings-link" class="show-settings"><?php _e('Screen Options') ?></a></div><?php } ?></div></div><?php}/** * Add contextual help text for a page * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param string $help Arbitrary help text */function add_contextual_help($screen, $help) {	global $_wp_contextual_help;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$_wp_contextual_help[$screen->id] = $help;}function drag_drop_help() {	return '	<p>' .	__('Most of the modules on this screen can be moved. If you hover your mouse over the title bar of a module you&rsquo;ll notice the 4 arrow cursor appears to let you know it is movable. Click on it, hold down the mouse button and start dragging the module to a new location. As you drag the module, notice the dotted gray box that also moves. This box indicates where the module will be placed when you release the mouse button.') . '</p>	<p>' . __('The same modules can be expanded and collapsed by clicking once on their title bar and also completely hidden from the Screen Options tab.') . '</p>';}function plugins_search_help() {	return '	<p><strong>' . __('Search help') . '</strong></p>' .	'<p>' . __('You may search based on 3 criteria:') . '<br />' .	__('<strong>Term:</strong> Searches theme names and descriptions for the specified term.') . '<br />' .	__('<strong>Tag:</strong> Searches for themes tagged as such.') . '<br />' .	__('<strong>Author:</strong> Searches for themes created by the Author, or which the Author contributed to.') . '</p>';}function screen_layout($screen) {	global $screen_layout_columns;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = array('dashboard' => 4, 'link' => 2);	// Add custom post types	foreach ( get_post_types( array('show_ui' => true) ) as $post_type )		$columns[$post_type] = 2;	$columns = apply_filters('screen_layout_columns', $columns, $screen->id, $screen);	if ( !isset($columns[$screen->id]) ) {		$screen_layout_columns = 0;		return ''; 	}	$screen_layout_columns = get_user_option("screen_layout_$screen->id");	$num = $columns[$screen->id];	if ( ! $screen_layout_columns )			$screen_layout_columns = 2;	$i = 1;	$return = '<h5>' . __('Screen Layout') . "</h5>\n<div class='columns-prefs'>" . __('Number of Columns:') . "\n";	while ( $i <= $num ) {		$return .= "<label><input type='radio' name='screen_columns' value='$i'" . ( ($screen_layout_columns == $i) ? " checked='checked'" : "" ) . " /> $i</label>\n";		++$i;	}	$return .= "</div>\n";	return $return;}function screen_options($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	switch ( $screen->base ) {		case 'edit':		case 'edit-pages':			$post_type = 'post';			if ( isset($_GET['post_type']) && in_array( $_GET['post_type'], get_post_types( array('public' => true ) ) ) )				$post_type = $_GET['post_type'];			$post_type_object = get_post_type_object($post_type);			$per_page_label = $post_type_object->labels->name;			break;		case 'ms-sites':			$per_page_label = _x( 'Sites', 'sites per page (screen options)' );			break;		case 'ms-users':			$per_page_label = _x( 'Users', 'users per page (screen options)' );			break;		case 'edit-comments':			$per_page_label = _x( 'Comments', 'comments per page (screen options)' );			break;		case 'upload':			$per_page_label = _x( 'Media items', 'items per page (screen options)' );			break;		case 'edit-tags':			global $tax;			$per_page_label = $tax->labels->name;			break;		case 'plugins':			$per_page_label = _x( 'Plugins', 'plugins per page (screen options)' );			break;		default:			return '';	}	$option = str_replace( '-', '_', "{$screen->id}_per_page" );	if ( 'edit_tags_per_page' == $option ) {		if ( 'category' == $tax->name )			$option = 'categories_per_page';		elseif ( 'post_tag' != $tax->name )			$option = 'edit_' . $tax->name . '_per_page';	}	$per_page = (int) get_user_option( $option );	if ( empty( $per_page ) || $per_page < 1 ) {		if ( 'plugins' == $screen->id )			$per_page = 999;		else			$per_page = 20;	}	if ( 'edit_comments_per_page' == $option )		$per_page = apply_filters( 'comments_per_page', $per_page, isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all' );	elseif ( 'categories_per_page' == $option )		$per_page = apply_filters( 'edit_categories_per_page', $per_page );	else		$per_page = apply_filters( $option, $per_page );	$return = "<div class='screen-options'>\n";	if ( !empty($per_page_label) )		$return .= "<input type='text' class='screen-per-page' name='wp_screen_options[value]' id='$option' maxlength='3' value='$per_page' /> <label for='$option'>$per_page_label</label>\n";	$return .= "<input type='submit' class='button' value='" . esc_attr__('Apply') . "' />";	$return .= "<input type='hidden' name='wp_screen_options[option]' value='" . esc_attr($option) . "' />";	$return .= "</div>\n";	return $return;}function screen_icon($screen = '') {	global $current_screen;	if ( empty($screen) )		$screen = $current_screen;	elseif ( is_string($screen) )		$name = $screen;	if ( empty($name) ) {		if ( !empty($screen->parent_base) )			$name = $screen->parent_base;		else			$name = $screen->base;		if ( 'edit' == $name && isset($screen->post_type) && 'page' == $screen->post_type )			$name = 'edit-pages';	}?>	<div id="icon-<?php echo $name; ?>" class="icon32"><br /></div><?php}/** * Test support for compressing JavaScript from PHP * * Outputs JavaScript that tests if compression from PHP works as expected * and sets an option with the result. Has no effect when the current user * is not an administrator. To run the test again the option 'can_compress_scripts' * has to be deleted. * * @since 2.8.0 */function compression_test() {?>	<script type="text/javascript">	/* <![CDATA[ */	var testCompression = {		get : function(test) {			var x;			if ( window.XMLHttpRequest ) {				x = new XMLHttpRequest();			} else {				try{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}			}			if (x) {				x.onreadystatechange = function() {					var r, h;					if ( x.readyState == 4 ) {						r = x.responseText.substr(0, 18);						h = x.getResponseHeader('Content-Encoding');						testCompression.check(r, h, test);					}				}				x.open('GET', 'admin-ajax.php?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);				x.send('');			}		},		check : function(r, h, test) {			if ( ! r && ! test )				this.get(1);			if ( 1 == test ) {				if ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )					this.get('no');				else					this.get(2);				return;			}			if ( 2 == test ) {				if ( '"wpCompressionTest' == r )					this.get('yes');				else					this.get('no');			}		}	};	testCompression.check();	/* ]]> */	</script><?php}/** * Set the current screen object * * @since 3.0.0 * * @uses $current_screen * * @param string $id Screen id, optional. */function set_current_screen( $id =  '' ) {	global $current_screen, $hook_suffix, $typenow, $taxnow;	$action = '';	if ( empty($id) ) {		$current_screen = $hook_suffix;		$current_screen = str_replace('.php', '', $current_screen);		if ( preg_match('/-add|-new$/', $current_screen) )			$action = 'add';		$current_screen = str_replace('-new', '', $current_screen);		$current_screen = str_replace('-add', '', $current_screen);		$current_screen = array('id' => $current_screen, 'base' => $current_screen);	} else {		$id = sanitize_key($id);		if ( false !== strpos($id, '-') ) {			list( $id, $typenow ) = explode('-', $id, 2);			if ( taxonomy_exists( $typenow ) ) {				$id = 'edit-tags';				$taxnow = $typenow;				$typenow = '';			}		}		$current_screen = array('id' => $id, 'base' => $id);	}	$current_screen = (object) $current_screen;	$current_screen->action = $action;	// Map index to dashboard	if ( 'index' == $current_screen->base )		$current_screen->base = 'dashboard';	if ( 'index' == $current_screen->id )		$current_screen->id = 'dashboard';	if ( 'edit' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id .= '-' . $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'post' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id = $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'edit-tags' == $current_screen->id ) {		if ( empty($taxnow) )			$taxnow = 'post_tag';		$current_screen->id = 'edit-' . $taxnow;		$current_screen->taxonomy = $taxnow;	}	$current_screen = apply_filters('current_screen', $current_screen);}?>
<?php/** * Edit tag form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( empty($tag_ID) ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'You did not select an item for editing.' ); ?></strong></p></div><?php	return;}if ( 'category' == $taxonomy )	do_action('edit_category_form_pre', $tag );else	do_action('edit_tag_form_pre', $tag);do_action($taxonomy . '_pre_edit_form', $tag, $taxonomy);  ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo $tax->labels->edit_item; ?></h2><div id="ajax-response"></div><form name="edittag" id="edittag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="editedtag" /><input type="hidden" name="tag_ID" value="<?php echo esc_attr($tag->term_id) ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field('update-tag_' . $tag_ID); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _ex('Name', 'Taxonomy Name'); ?></label></th>			<td><input name="name" id="name" type="text" value="<?php if ( isset( $tag->name ) ) echo esc_attr($tag->name); ?>" size="40" aria-required="true" />			<p class="description"><?php _e('The name is how it appears on your site.'); ?></p></td>		</tr><?php if ( !global_terms_enabled() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php if ( isset( $tag->slug ) ) echo esc_attr(apply_filters('editable_slug', $tag->slug)); ?>" size="40" />			<p class="description"><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></td>		</tr><?php } ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label></th>			<td>				<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'name' => 'parent', 'orderby' => 'name', 'taxonomy' => $taxonomy, 'selected' => $tag->parent, 'exclude' => $tag->term_id, 'hierarchical' => true, 'show_option_none' => __('None'))); ?><br />				<?php if ( 'category' == $taxonomy ) : ?>				<span class="description"><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></span>				<?php endif; ?>			</td>		</tr><?php endif; // is_taxonomy_hierarchical() ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _ex('Description', 'Taxonomy Description'); ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo esc_html($tag->description); ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default, however some themes may show it.'); ?></span></td>		</tr>		<?php		if ( 'category' == $taxonomy )			do_action('edit_category_form_fields', $tag);		else			do_action('edit_tag_form_fields', $tag);		do_action($taxonomy . '_edit_form_fields', $tag, $taxonomy);		?>	</table><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form', $tag);else	do_action('edit_tag_form', $tag);do_action($taxonomy . '_edit_form', $tag, $taxonomy);?><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr( __( 'Update' ) ); ?>" /></p></form></div>
<?php/** * Build Administration Menu. * * @package WordPress * @subpackage Administration *//** * Constructs the admin menu bar. * * The elements in the array are : *     0: Menu item name *     1: Minimum level or capability required. *     2: The URL of the item's file *     3: Class *     4: ID *     5: Icon for top level menu * * @global array $menu * @name $menu * @var array */$awaiting_mod = wp_count_comments();$awaiting_mod = $awaiting_mod->moderated;if ( is_multisite() && is_super_admin() ) {	/* translators: Network menu item */	$menu[0] = array(__('Super Admin'), 'manage_network', 'ms-admin.php', '', 'menu-top menu-top-first menu-icon-site', 'menu-site', 'div');	$submenu[ 'ms-admin.php' ][1] = array( __('Admin'), 'manage_network', 'ms-admin.php' );	/* translators: Sites menu item */	$submenu[ 'ms-admin.php' ][5] = array( __('Sites'), 'manage_sites', 'ms-sites.php' );	$submenu[ 'ms-admin.php' ][10] = array( __('Users'), 'manage_network_users', 'ms-users.php' );	$submenu[ 'ms-admin.php' ][20] = array( __('Themes'), 'manage_network_themes', 'ms-themes.php' );	$submenu[ 'ms-admin.php' ][25] = array( __('Options'), 'manage_network_options', 'ms-options.php' );	$submenu[ 'ms-admin.php' ][30] = array( __('Update'), 'manage_network', 'ms-upgrade-network.php' );	$menu[1] = array( '', 'read', 'separator1', '', 'wp-menu-separator' );	$menu[2] = array( __('Dashboard'), 'read', 'index.php', '', 'menu-top menu-icon-dashboard', 'menu-dashboard', 'div' );} else {	$menu[2] = array( __('Dashboard'), 'read', 'index.php', '', 'menu-top menu-top-first menu-icon-dashboard', 'menu-dashboard', 'div' );}if ( is_multisite() || is_super_admin() ) {	$submenu[ 'index.php' ][0] = array( __('Dashboard'), 'read', 'index.php' );	if ( is_multisite() )		$submenu[ 'index.php' ][5] = array( __('My Sites'), 'read', 'my-sites.php' );	if ( is_super_admin() ) {		$plugin_update_count = $theme_update_count = $wordpress_update_count = 0;		$update_plugins = get_site_transient( 'update_plugins' );		if ( !empty($update_plugins->response) )			$plugin_update_count = count( $update_plugins->response );		$update_themes = get_site_transient( 'update_themes' );		if ( !empty($update_themes->response) )			$theme_update_count = count( $update_themes->response );		$update_wordpress = get_core_updates( array('dismissed' => false) );		if ( !empty($update_wordpress) && !in_array( $update_wordpress[0]->response, array('development', 'latest') ) )			$wordpress_update_count = 1;		$update_count = $plugin_update_count + $theme_update_count + $wordpress_update_count;		$update_title = array();		if ( $wordpress_update_count )			$update_title[] = sprintf(__('%d WordPress Update'), $wordpress_update_count);		if ( $plugin_update_count )			$update_title[] = sprintf(_n('%d Plugin Update', '%d Plugin Updates', $plugin_update_count), $plugin_update_count);		if ( $theme_update_count )			$update_title[] = sprintf(_n('%d Theme Update', '%d Themes Updates', $theme_update_count), $theme_update_count);		$update_title = !empty($update_title) ? esc_attr(implode(', ', $update_title)) : '';		$submenu[ 'index.php' ][10] = array( sprintf( __('Updates %s'), "<span class='update-plugins count-$update_count' title='$update_title'><span class='update-count'>" . number_format_i18n($update_count) . "</span></span>" ), 'install_plugins',  'update-core.php');		unset($plugin_update_count, $theme_update_count, $wordpress_update_count, $update_count, $update_title);	}}$menu[4] = array( '', 'read', 'separator1', '', 'wp-menu-separator' );$menu[5] = array( __('Posts'), 'edit_posts', 'edit.php', '', 'open-if-no-js menu-top menu-icon-post', 'menu-posts', 'div' );	$submenu['edit.php'][5]  = array( __('Posts'), 'edit_posts', 'edit.php' );	/* translators: add new post */	$submenu['edit.php'][10]  = array( _x('Add New', 'post'), 'edit_posts', 'post-new.php' );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array('post', (array) $tax->object_type, true) )			continue;		$submenu['edit.php'][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, 'edit-tags.php?taxonomy=' . $tax->name );	}	unset($tax);$menu[10] = array( __('Media'), 'upload_files', 'upload.php', '', 'menu-top menu-icon-media', 'menu-media', 'div' );	$submenu['upload.php'][5] = array( __('Library'), 'upload_files', 'upload.php');	/* translators: add new file */	$submenu['upload.php'][10] = array( _x('Add New', 'file'), 'upload_files', 'media-new.php');$menu[15] = array( __('Links'), 'manage_links', 'link-manager.php', '', 'menu-top menu-icon-links', 'menu-links', 'div' );	$submenu['link-manager.php'][5] = array( __('Links'), 'manage_links', 'link-manager.php' );	/* translators: add new links */	$submenu['link-manager.php'][10] = array( _x('Add New', 'link'), 'manage_links', 'link-add.php' );	$submenu['link-manager.php'][15] = array( __('Link Categories'), 'manage_categories', 'edit-link-categories.php' );$menu[20] = array( __('Pages'), 'edit_pages', 'edit.php?post_type=page', '', 'menu-top menu-icon-page', 'menu-pages', 'div' );	$submenu['edit.php?post_type=page'][5] = array( __('Pages'), 'edit_pages', 'edit.php?post_type=page' );	/* translators: add new page */	$submenu['edit.php?post_type=page'][10] = array( _x('Add New', 'page'), 'edit_pages', 'post-new.php?post_type=page' );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array('page', (array) $tax->object_type, true) )			continue;		$submenu['edit.php?post_type=page'][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, 'edit-tags.php?taxonomy=' . $tax->name );	}	unset($tax);$menu[25] = array( sprintf( __('Comments %s'), "<span id='awaiting-mod' class='count-$awaiting_mod'><span class='pending-count'>" . number_format_i18n($awaiting_mod) . "</span></span>" ), 'edit_posts', 'edit-comments.php', '', 'menu-top menu-icon-comments', 'menu-comments', 'div' );$_wp_last_object_menu = 25; // The index of the last top-level menu in the object menu groupforeach ( (array) get_post_types( array('show_ui' => true, '_builtin' => false) ) as $ptype ) {	$ptype_obj = get_post_type_object( $ptype );	$ptype_menu_position = is_int( $ptype_obj->menu_position ) ? $ptype_obj->menu_position : $_wp_last_object_menu++; // If we're to use $_wp_last_object_menu, increment it first.	$ptype_for_id = sanitize_html_class( $ptype );	if ( is_string( $ptype_obj->menu_icon ) ) {		$menu_icon   = esc_url( $ptype_obj->menu_icon );		$ptype_class = $ptype_for_id;	} else {		$menu_icon   = 'div';		$ptype_class = 'post';	}	// if $ptype_menu_position is already populated or will be populated by a hard-coded value below, increment the position.	$core_menu_positions = array(59, 60, 65, 70, 75, 80, 85, 99);	while ( isset($menu[$ptype_menu_position]) || in_array($ptype_menu_position, $core_menu_positions) )		$ptype_menu_position++;	$menu[$ptype_menu_position] = array( esc_attr( $ptype_obj->labels->name ), $ptype_obj->cap->edit_posts, "edit.php?post_type=$ptype", '', 'menu-top menu-icon-' . $ptype_class, 'menu-posts-' . $ptype_for_id, $menu_icon );	$submenu["edit.php?post_type=$ptype"][5]  = array( $ptype_obj->labels->name, $ptype_obj->cap->edit_posts,  "edit.php?post_type=$ptype");	$submenu["edit.php?post_type=$ptype"][10]  = array( $ptype_obj->labels->add_new, $ptype_obj->cap->edit_posts, "post-new.php?post_type=$ptype" );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array($ptype, (array) $tax->object_type, true) )			continue;		$submenu["edit.php?post_type=$ptype"][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, "edit-tags.php?taxonomy=$tax->name&amp;post_type=$ptype" );	}}unset($ptype, $ptype_obj);$menu[59] = array( '', 'read', 'separator2', '', 'wp-menu-separator' );if ( current_user_can( 'switch_themes') ) {	$menu[60] = array( __('Appearance'), 'switch_themes', 'themes.php', '', 'menu-top menu-icon-appearance', 'menu-appearance', 'div' );		$submenu['themes.php'][5]  = array(__('Themes'), 'switch_themes', 'themes.php');		if ( current_theme_supports( 'menus' ) || current_theme_supports( 'widgets' ) )			$submenu['themes.php'][10] = array(__('Menus'), 'edit_theme_options', 'nav-menus.php');} else {	$menu[60] = array( __('Appearance'), 'edit_theme_options', 'themes.php', '', 'menu-top menu-icon-appearance', 'menu-appearance', 'div' );		$submenu['themes.php'][5]  = array(__('Themes'), 'edit_theme_options', 'themes.php');		if ( current_theme_supports( 'menus' ) || current_theme_supports( 'widgets' ) )			$submenu['themes.php'][10] = array(__('Menus'), 'edit_theme_options', 'nav-menus.php' );}// Add 'Editor' to the bottom of the Appearence menu.add_action('admin_menu', '_add_themes_utility_last', 101);function _add_themes_utility_last() {	// Must use API on the admin_menu hook, direct modification is only possible on/before the _admin_menu hook	add_submenu_page('themes.php', _x('Editor', 'theme editor'), _x('Editor', 'theme editor'), 'edit_themes', 'theme-editor.php');}$update_plugins = get_site_transient( 'update_plugins' );$update_count = 0;if ( !empty($update_plugins->response) )	$update_count = count( $update_plugins->response );$menu_perms = get_site_option('menu_items', array());if ( is_super_admin() || ( is_multisite() && isset($menu_perms['plugins']) && $menu_perms['plugins'] ) ) {	$menu[65] = array( sprintf( __('Plugins %s'), "<span class='update-plugins count-$update_count'><span class='plugin-count'>" . number_format_i18n($update_count) . "</span></span>" ), 'activate_plugins', 'plugins.php', '', 'menu-top menu-icon-plugins', 'menu-plugins', 'div' );		$submenu['plugins.php'][5]  = array( __('Plugins'), 'activate_plugins', 'plugins.php' );		/* translators: add new plugin */		$submenu['plugins.php'][10] = array(_x('Add New', 'plugin'), 'install_plugins', 'plugin-install.php');		$submenu['plugins.php'][15] = array( _x('Editor', 'plugin editor'), 'edit_plugins', 'plugin-editor.php' );}unset($menu_perms, $update_plugins, $update_count);if ( current_user_can('list_users') )	$menu[70] = array( __('Users'), 'list_users', 'users.php', '', 'menu-top menu-icon-users', 'menu-users', 'div' );else	$menu[70] = array( __('Profile'), 'read', 'profile.php', '', 'menu-top menu-icon-users', 'menu-users', 'div' );if ( current_user_can('list_users') ) {	$_wp_real_parent_file['profile.php'] = 'users.php'; // Back-compat for plugins adding submenus to profile.php.	$submenu['users.php'][5] = array(__('Users'), 'list_users', 'users.php');	$submenu['users.php'][10] = array(_x('Add New', 'user'), 'create_users', 'user-new.php');	$submenu['users.php'][15] = array(__('Your Profile'), 'read', 'profile.php');} else {	$_wp_real_parent_file['users.php'] = 'profile.php';	$submenu['profile.php'][5] = array(__('Your Profile'), 'read', 'profile.php');	$submenu['profile.php'][10] = array(__('Add New User'), 'create_users', 'user-new.php');}$menu[75] = array( __('Tools'), 'edit_posts', 'tools.php', '', 'menu-top menu-icon-tools', 'menu-tools', 'div' );	$submenu['tools.php'][5] = array( __('Tools'), 'edit_posts', 'tools.php' );	$submenu['tools.php'][10] = array( __('Import'), 'import', 'import.php' );	$submenu['tools.php'][15] = array( __('Export'), 'import', 'export.php' );	if ( is_multisite() && !is_main_site() )		$submenu['tools.php'][25] = array( __('Delete Site'), 'manage_options', 'ms-delete-site.php' );	if ( ( ! is_multisite() || defined( 'MULTISITE' ) ) && defined('WP_ALLOW_MULTISITE') && WP_ALLOW_MULTISITE && is_super_admin() )		$submenu['tools.php'][50] = array(__('Network'), 'manage_options', 'network.php');$menu[80] = array( __('Settings'), 'manage_options', 'options-general.php', '', 'menu-top menu-icon-settings', 'menu-settings', 'div' );	$submenu['options-general.php'][10] = array(_x('General', 'settings screen'), 'manage_options', 'options-general.php');	$submenu['options-general.php'][15] = array(__('Writing'), 'manage_options', 'options-writing.php');	$submenu['options-general.php'][20] = array(__('Reading'), 'manage_options', 'options-reading.php');	$submenu['options-general.php'][25] = array(__('Discussion'), 'manage_options', 'options-discussion.php');	$submenu['options-general.php'][30] = array(__('Media'), 'manage_options', 'options-media.php');	$submenu['options-general.php'][35] = array(__('Privacy'), 'manage_options', 'options-privacy.php');	$submenu['options-general.php'][40] = array(__('Permalinks'), 'manage_options', 'options-permalink.php');$_wp_last_utility_menu = 80; // The index of the last top-level menu in the utility menu group$menu[99] = array( '', 'read', 'separator-last', '', 'wp-menu-separator-last' );// Back-compat for old top-levels$_wp_real_parent_file['post.php'] = 'edit.php';$_wp_real_parent_file['post-new.php'] = 'edit.php';$_wp_real_parent_file['edit-pages.php'] = 'edit.php?post_type=page';$_wp_real_parent_file['page-new.php'] = 'edit.php?post_type=page';$_wp_real_parent_file['wpmu-admin.php'] = 'ms-admin.php';do_action('_admin_menu');// Create list of page plugin hook names.foreach ($menu as $menu_page) {	if ( false !== $pos = strpos($menu_page[2], '?') ) {		// Handle post_type=post|page|foo pages.		$hook_name = substr($menu_page[2], 0, $pos);		$hook_args = substr($menu_page[2], $pos + 1);		wp_parse_str($hook_args, $hook_args);		// Set the hook name to be the post type.		if ( isset($hook_args['post_type']) )			$hook_name = $hook_args['post_type'];		else			$hook_name = basename($hook_name, '.php');		unset($hook_args);	} else {		$hook_name = basename($menu_page[2], '.php');	}	$hook_name = sanitize_title($hook_name);	// ensure we're backwards compatible	$compat = array(		'index' => 'dashboard',		'edit' => 'posts',		'post' => 'posts',		'upload' => 'media',		'link-manager' => 'links',		'edit-pages' => 'pages',		'page' => 'pages',		'edit-comments' => 'comments',		'options-general' => 'settings',		'themes' => 'appearance',		);	if ( isset($compat[$hook_name]) )		$hook_name = $compat[$hook_name];	elseif ( !$hook_name )		continue;	$admin_page_hooks[$menu_page[2]] = $hook_name;}unset($menu_page);$_wp_submenu_nopriv = array();$_wp_menu_nopriv = array();// Loop over submenus and remove pages for which the user does not have privs.foreach ( array( 'submenu' ) as $sub_loop ) {	foreach ($$sub_loop as $parent => $sub) {		foreach ($sub as $index => $data) {			if ( ! current_user_can($data[1]) ) {				unset(${$sub_loop}[$parent][$index]);				$_wp_submenu_nopriv[$parent][$data[2]] = true;			}		}		unset($index, $data);		if ( empty(${$sub_loop}[$parent]) )			unset(${$sub_loop}[$parent]);	}	unset($sub, $parent);}unset($sub_loop);// Loop over the top-level menu.// Menus for which the original parent is not accessible due to lack of privs will have the next// submenu in line be assigned as the new menu parent.foreach ( $menu as $id => $data ) {	if ( empty($submenu[$data[2]]) )		continue;	$subs = $submenu[$data[2]];	$first_sub = array_shift($subs);	$old_parent = $data[2];	$new_parent = $first_sub[2];	// If the first submenu is not the same as the assigned parent,	// make the first submenu the new parent.	if ( $new_parent != $old_parent ) {		$_wp_real_parent_file[$old_parent] = $new_parent;		$menu[$id][2] = $new_parent;		foreach ($submenu[$old_parent] as $index => $data) {			$submenu[$new_parent][$index] = $submenu[$old_parent][$index];			unset($submenu[$old_parent][$index]);		}		unset($submenu[$old_parent], $index);		if ( isset($_wp_submenu_nopriv[$old_parent]) )			$_wp_submenu_nopriv[$new_parent] = $_wp_submenu_nopriv[$old_parent];	}}unset($id, $data, $subs, $first_sub, $old_parent, $new_parent);do_action('admin_menu', '');// Remove menus that have no accessible submenus and require privs that the user does not have.// Run re-parent loop again.foreach ( $menu as $id => $data ) {	if ( ! current_user_can($data[1]) )		$_wp_menu_nopriv[$data[2]] = true;	// If submenu is empty...	if ( empty($submenu[$data[2]]) ) {		// And user doesn't have privs, remove menu.		if ( isset( $_wp_menu_nopriv[$data[2]] ) ) {			unset($menu[$id]);		}	}}unset($id, $data);// Remove any duplicated seperators$seperator_found = false;foreach ( $menu as $id => $data ) {	if ( 0 == strcmp('wp-menu-separator', $data[4] ) ) {		if (false == $seperator_found) {			$seperator_found = true;		} else {			unset($menu[$id]);			$seperator_found = false;		}	} else {		$seperator_found = false;	}}unset($id, $data);function add_cssclass($add, $class) {	$class = empty($class) ? $add : $class .= ' ' . $add;	return $class;}function add_menu_classes($menu) {	$first = $lastorder = false;	$i = 0;	$mc = count($menu);	foreach ( $menu as $order => $top ) {		$i++;		if ( 0 == $order ) { // dashboard is always shown/single			$menu[0][4] = add_cssclass('menu-top-first', $top[4]);			$lastorder = 0;			continue;		}		if ( 0 === strpos($top[2], 'separator') ) { // if separator			$first = true;			$c = $menu[$lastorder][4];			$menu[$lastorder][4] = add_cssclass('menu-top-last', $c);			continue;		}		if ( $first ) {			$c = $menu[$order][4];			$menu[$order][4] = add_cssclass('menu-top-first', $c);			$first = false;		}		if ( $mc == $i ) { // last item			$c = $menu[$order][4];			$menu[$order][4] = add_cssclass('menu-top-last', $c);		}		$lastorder = $order;	}	return apply_filters( 'add_menu_classes', $menu );}uksort($menu, "strnatcasecmp"); // make it all prettyif ( apply_filters('custom_menu_order', false) ) {	$menu_order = array();	foreach ( $menu as $menu_item ) {		$menu_order[] = $menu_item[2];	}	unset($menu_item);	$default_menu_order = $menu_order;	$menu_order = apply_filters('menu_order', $menu_order);	$menu_order = array_flip($menu_order);	$default_menu_order = array_flip($default_menu_order);	function sort_menu($a, $b) {		global $menu_order, $default_menu_order;		$a = $a[2];		$b = $b[2];		if ( isset($menu_order[$a]) && !isset($menu_order[$b]) ) {			return -1;		} elseif ( !isset($menu_order[$a]) && isset($menu_order[$b]) ) {			return 1;		} elseif ( isset($menu_order[$a]) && isset($menu_order[$b]) ) {			if ( $menu_order[$a] == $menu_order[$b] )				return 0;			return ($menu_order[$a] < $menu_order[$b]) ? -1 : 1;		} else {			return ($default_menu_order[$a] <= $default_menu_order[$b]) ? -1 : 1;		}	}	usort($menu, 'sort_menu');	unset($menu_order, $default_menu_order);}$menu = add_menu_classes($menu);if ( !user_can_access_admin_page() ) {	do_action('admin_page_access_denied');	wp_die( __('You do not have sufficient permissions to access this page.') );}?>
<?php/** * Post advanced form for inclusion in the administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');wp_enqueue_script('post');if ( post_type_supports($post_type, 'editor') ) {	if ( user_can_richedit() )		wp_enqueue_script('editor');	wp_enqueue_script('word-count');}if ( post_type_supports($post_type, 'editor') || post_type_supports($post_type, 'thumbnail') ) {	add_thickbox();	wp_enqueue_script('media-upload');}/** * Post ID global * @name $post_ID * @var int */$post_ID = isset($post_ID) ? (int) $post_ID : 0;$temp_ID = isset($temp_ID) ? (int) $temp_ID : 0;$user_ID = isset($user_ID) ? (int) $user_ID : 0;$action = isset($action) ? $action : '';$messages = array();$messages['post'] = array(	 0 => '', // Unused. Messages start at index 1.	 1 => sprintf( __('Post updated. <a href="%s">View post</a>'), esc_url( get_permalink($post_ID) ) ),	 2 => __('Custom field updated.'),	 3 => __('Custom field deleted.'),	 4 => __('Post updated.'),	/* translators: %s: date and time of the revision */	 5 => isset($_GET['revision']) ? sprintf( __('Post restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,	 6 => sprintf( __('Post published. <a href="%s">View post</a>'), esc_url( get_permalink($post_ID) ) ),	 7 => __('Post saved.'),	 8 => sprintf( __('Post submitted. <a target="_blank" href="%s">Preview post</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),	 9 => sprintf( __('Post scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview post</a>'),		// translators: Publish box date format, see http://php.net/date		date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),	10 => sprintf( __('Post draft updated. <a target="_blank" href="%s">Preview post</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),);$messages['page'] = array(	 0 => '', // Unused. Messages start at index 1.	 1 => sprintf( __('Page updated. <a href="%s">View page</a>'), esc_url( get_permalink($post_ID) ) ),	 2 => __('Custom field updated.'),	 3 => __('Custom field deleted.'),	 4 => __('Page updated.'),	 5 => isset($_GET['revision']) ? sprintf( __('Page restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,	 6 => sprintf( __('Page published. <a href="%s">View page</a>'), esc_url( get_permalink($post_ID) ) ),	 7 => __('Page saved.'),	 8 => sprintf( __('Page submitted. <a target="_blank" href="%s">Preview page</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),	 9 => sprintf( __('Page scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview page</a>'), date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),	10 => sprintf( __('Page draft updated. <a target="_blank" href="%s">Preview page</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),);$messages = apply_filters( 'post_updated_messages', $messages );$message = false;if ( isset($_GET['message']) ) {	$_GET['message'] = absint( $_GET['message'] );	if ( isset($messages[$post_type][$_GET['message']]) )		$message = $messages[$post_type][$_GET['message']];	elseif ( !isset($messages[$post_type]) && isset($messages['post'][$_GET['message']]) )		$message = $messages['post'][$_GET['message']];}$notice = false;$form_extra = '';if ( 'auto-draft' == $post->post_status ) {	if ( 'edit' == $action )		$post->post_title = '';	$autosave = false;	$form_extra .= "<input type='hidden' id='auto_draft' name='auto_draft' value='1' />";} else {	$autosave = wp_get_post_autosave( $post_ID );}$form_action = 'editpost';$nonce_action = 'update-' . $post_type . '_' . $post_ID;$form_extra .= "<input type='hidden' id='post_ID' name='post_ID' value='" . esc_attr($post_ID) . "' />";// Detect if there exists an autosave newer than the post and if that autosave is different than the postif ( $autosave && mysql2date( 'U', $autosave->post_modified_gmt, false ) > mysql2date( 'U', $post->post_modified_gmt, false ) ) {	foreach ( _wp_post_revision_fields() as $autosave_field => $_autosave_field ) {		if ( normalize_whitespace( $autosave->$autosave_field ) != normalize_whitespace( $post->$autosave_field ) ) {			$notice = sprintf( __( 'There is an autosave of this post that is more recent than the version below.  <a href="%s">View the autosave</a>' ), get_edit_post_link( $autosave->ID ) );			break;		}	}	unset($autosave_field, $_autosave_field);}$post_type_object = get_post_type_object($post_type);// All meta boxes should be defined and added before the first do_meta_boxes() call (or potentially during the do_meta_boxes action).require_once('./includes/meta-boxes.php');add_meta_box('submitdiv', __('Publish'), 'post_submit_meta_box', $post_type, 'side', 'core');// all taxonomiesforeach ( get_object_taxonomies($post_type) as $tax_name ) {	$taxonomy = get_taxonomy($tax_name);	if ( ! $taxonomy->show_ui )		continue;	$label = $taxonomy->labels->name;	if ( !is_taxonomy_hierarchical($tax_name) )		add_meta_box('tagsdiv-' . $tax_name, $label, 'post_tags_meta_box', $post_type, 'side', 'core', array( 'taxonomy' => $tax_name ));	else		add_meta_box($tax_name . 'div', $label, 'post_categories_meta_box', $post_type, 'side', 'core', array( 'taxonomy' => $tax_name ));}if ( post_type_supports($post_type, 'page-attributes') )	add_meta_box('pageparentdiv', 'page' == $post_type ? __('Page Attributes') : __('Attributes'), 'page_attributes_meta_box', $post_type, 'side', 'core');if ( current_theme_supports( 'post-thumbnails', $post_type ) && post_type_supports( $post_type, 'thumbnail' )	&& ( ! is_multisite() || ( ( $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ) ) && ! empty( $mu_media_buttons['image'] ) ) ) )		add_meta_box('postimagediv', __('Featured Image'), 'post_thumbnail_meta_box', $post_type, 'side', 'low');if ( post_type_supports($post_type, 'excerpt') )	add_meta_box('postexcerpt', __('Excerpt'), 'post_excerpt_meta_box', $post_type, 'normal', 'core');if ( post_type_supports($post_type, 'trackbacks') )	add_meta_box('trackbacksdiv', __('Send Trackbacks'), 'post_trackback_meta_box', $post_type, 'normal', 'core');if ( post_type_supports($post_type, 'custom-fields') )	add_meta_box('postcustom', __('Custom Fields'), 'post_custom_meta_box', $post_type, 'normal', 'core');do_action('dbx_post_advanced');if ( post_type_supports($post_type, 'comments') )	add_meta_box('commentstatusdiv', __('Discussion'), 'post_comment_status_meta_box', $post_type, 'normal', 'core');if ( ('publish' == $post->post_status || 'private' == $post->post_status) && post_type_supports($post_type, 'comments') )	add_meta_box('commentsdiv', __('Comments'), 'post_comment_meta_box', $post_type, 'normal', 'core');if ( !( 'pending' == $post->post_status && !current_user_can( $post_type_object->cap->publish_posts ) ) )	add_meta_box('slugdiv', __('Slug'), 'post_slug_meta_box', $post_type, 'normal', 'core');if ( post_type_supports($post_type, 'author') ) {	$authors = get_editable_user_ids( $current_user->id ); // TODO: ROLE SYSTEM	if ( $post->post_author && !in_array($post->post_author, $authors) )		$authors[] = $post->post_author;	if ( ( $authors && count( $authors ) > 1 ) || is_super_admin() )		add_meta_box('authordiv', __('Author'), 'post_author_meta_box', $post_type, 'normal', 'core');}if ( post_type_supports($post_type, 'revisions') && 0 < $post_ID && wp_get_post_revisions( $post_ID ) )	add_meta_box('revisionsdiv', __('Revisions'), 'post_revisions_meta_box', $post_type, 'normal', 'core');do_action('add_meta_boxes', $post_type, $post);do_action('add_meta_boxes_' . $post_type, $post);do_action('do_meta_boxes', $post_type, 'normal', $post);do_action('do_meta_boxes', $post_type, 'advanced', $post);do_action('do_meta_boxes', $post_type, 'side', $post);if ( 'post' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('The title field and the big Post Editing Area are fixed in place, but you can reposition all the other boxes that allow you to add metadata to your post using drag and drop, and can minimize or expand them by clicking the title bar of the box. You can also hide any of the boxes by using the Screen Options tab, where you can also choose a 1- or 2-column layout for this screen.') . '</p>' .	'<p>' . __('<strong>Title</strong> - Enter a title for your post. After you enter a title, you&#8217;ll see the permalink below, which you can edit.') . '</p>' .	'<p>' . __('<strong>Post editor</strong> - Enter the text for your post. There are two modes of editing: Visual and HTML. Choose the mode by clicking on the appropriate tab. Visual mode gives you a WYSIWYG editor. Click the last icon in the row to get a second row of controls. The HTML mode allows you to enter raw HTML along with your post text. You can insert media files by clicking the icons above the post editor and following the directions.') . '</p>' .	'<p>' . __('<strong>Publish</strong> - You can set the terms of publishing your post in the Publish box. For Status, Visibility, and Publish (immediately), click on the Edit link to reveal more options. Visibility includes options for password-protecting a post or making it stay at the top of your blog indefinitely (sticky). Publish (immediately) allows you to set a future or past date and time, so you can schedule a post to be published in the future or backdate a post.') . '</p>' .	'<p>' . __('<strong>Featured Image</strong> - This allows you to associate an image with your post without inserting it. This is usually useful only if your theme makes use of the featured image as a post thumbnail on the home page, a custom header, etc.') . '</p>' .	'<p>' . __('<strong>Send Trackbacks</strong> - Trackbacks are a way to notify legacy blog systems that you&#8217;ve linked to them. Enter the URL(s) you want to send trackbacks. If you link to other WordPress sites they&#8217;ll be notified automatically using pingbacks, and this field is unnecessary.') . '</p>' .	'<p>' . __('<strong>Discussion</strong> - You can turn comments and pings on or off, and if there are comments on the post, you can see them here and moderate them.') . '</p>' .	'<p>' . sprintf(__('You can also create posts with the <a href="%s">Press This bookmarklet</a>.'), 'options-writing.php') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Writing_Posts" target="_blank">Documentation on Writing Posts</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} elseif ( 'page' == $post_type ) {	add_contextual_help($current_screen, '<p>' . __('Pages are similar to Posts in that they have a title, body text, and associated metadata, but they are different in that they are not part of the chronological blog stream, kind of like permanent posts. Pages are not categorized or tagged, but can have a hierarchy. You can nest Pages under other Pages by making one the &#8220;Parent&#8221; of the other, creating a group of Pages.') . '</p>' .	'<p>' . __('Creating a Page is very similar to creating a Post, and the screens can be customized in the same way using drag and drop, the Screen Options tab, and expanding/collapsing boxes as you choose. The Page editor mostly works the same Post editor, but there are some Page-specific features in the Page Attributes box:') . '</p>' .	'<p>' . __('<strong>Parent</strong> - You can arrange your pages in hierarchies. For example, you could have an &#8220;About&#8221; page that has &#8220;Life Story&#8221; and &#8220;My Dog&#8221; pages under it. There are no limits to how many levels you can nest pages.') . '</p>' .	'<p>' . __('<strong>Template</strong> - Some themes have custom templates you can use for certain pages that might have additional features or custom layouts. If so, you&#8217;ll see them in this dropdown menu.') . '</p>' .	'<p>' . __('<strong>Order</strong> - Pages are usually ordered alphabetically, but you can choose your own order by entering a number (1 for first, etc.) in this field.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Pages_Add_New_SubPanel" target="_blank">Page Creation Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( $notice ) : ?><div id="notice" class="error"><p><?php echo $notice ?></p></div><?php endif; ?><?php if ( $message ) : ?><div id="message" class="updated"><p><?php echo $message; ?></p></div><?php endif; ?><form name="post" action="post.php" method="post" id="post"<?php do_action('post_edit_form_tag'); ?>><?php wp_nonce_field($nonce_action); ?><input type="hidden" id="user-id" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" id="hiddenaction" name="action" value="<?php echo esc_attr($form_action) ?>" /><input type="hidden" id="originalaction" name="originalaction" value="<?php echo esc_attr($form_action) ?>" /><input type="hidden" id="post_author" name="post_author" value="<?php echo esc_attr( $post->post_author ); ?>" /><input type="hidden" id="post_type" name="post_type" value="<?php echo esc_attr($post_type) ?>" /><input type="hidden" id="original_post_status" name="original_post_status" value="<?php echo esc_attr($post->post_status) ?>" /><input type="hidden" id="referredby" name="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?phpif ( 'draft' != $post->post_status )	wp_original_referer_field(true, 'previous');echo $form_extra;wp_nonce_field( 'autosave', 'autosavenonce', false );wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );?><div id="poststuff" class="metabox-holder<?php echo 2 == $screen_layout_columns ? ' has-right-sidebar' : ''; ?>"><div id="side-info-column" class="inner-sidebar"><?php('page' == $post_type) ? do_action('submitpage_box') : do_action('submitpost_box');$side_meta_boxes = do_meta_boxes($post_type, 'side', $post);?></div><div id="post-body"><div id="post-body-content"><?php if ( post_type_supports($post_type, 'title') ) { ?><div id="titlediv"><div id="titlewrap">	<label class="hide-if-no-js" style="visibility:hidden" id="title-prompt-text" for="title"><?php _e('Enter title here') ?></label>	<input type="text" name="post_title" size="30" tabindex="1" value="<?php echo esc_attr( htmlspecialchars( $post->post_title ) ); ?>" id="title" autocomplete="off" /></div><div class="inside"><?php$sample_permalink_html = get_sample_permalink_html($post->ID);$shortlink = wp_get_shortlink($post->ID, 'post');if ( !empty($shortlink) )    $sample_permalink_html .= '<input id="shortlink" type="hidden" value="' . esc_attr($shortlink) . '" /><a href="#" class="button" onclick="prompt(&#39;URL:&#39;, jQuery(\'#shortlink\').val()); return false;">' . __('Get Shortlink') . '</a>';if ( !( 'pending' == $post->post_status && !current_user_can( $post_type_object->cap->publish_posts ) ) ) { ?>	<div id="edit-slug-box">	<?php		if ( ! empty($post->ID) && ! empty($sample_permalink_html) && 'auto-draft' != $post->post_status )			echo $sample_permalink_html;	?>	</div><?php}?></div><?phpwp_nonce_field( 'samplepermalink', 'samplepermalinknonce', false );?></div><?php } ?><?php if ( post_type_supports($post_type, 'editor') ) { ?><div id="<?php echo user_can_richedit() ? 'postdivrich' : 'postdiv'; ?>" class="postarea"><?php the_editor($post->post_content); ?><table id="post-status-info" cellspacing="0"><tbody><tr>	<td id="wp-word-count"></td>	<td class="autosave-info">	<span id="autosave">&nbsp;</span><?php	if ( 'auto-draft' != $post->post_status ) {		echo '<span id="last-edit">';		if ( $last_id = get_post_meta($post_ID, '_edit_last', true) ) {			$last_user = get_userdata($last_id);			printf(__('Last edited by %1$s on %2$s at %3$s'), esc_html( $last_user->display_name ), mysql2date(get_option('date_format'), $post->post_modified), mysql2date(get_option('time_format'), $post->post_modified));		} else {			printf(__('Last edited on %1$s at %2$s'), mysql2date(get_option('date_format'), $post->post_modified), mysql2date(get_option('time_format'), $post->post_modified));		}		echo '</span>';	} ?>	</td></tr></tbody></table></div><?php}do_meta_boxes($post_type, 'normal', $post);( 'page' == $post_type ) ? do_action('edit_page_form') : do_action('edit_form_advanced');do_meta_boxes($post_type, 'advanced', $post);do_action('dbx_post_sidebar'); ?></div></div><br class="clear" /></div><!-- /poststuff --></form></div><?php wp_comment_reply(); ?><?php if ((isset($post->post_title) && '' == $post->post_title) || (isset($_GET['message']) && 2 > $_GET['message'])) : ?><script type="text/javascript">try{document.post.title.focus();}catch(e){}</script><?php endif; ?>
<?php/** * Default Widgets * * @package WordPress * @subpackage Widgets *//** * Pages widget class * * @since 2.8.0 */class WP_Widget_Pages extends WP_Widget {	function WP_Widget_Pages() {		$widget_ops = array('classname' => 'widget_pages', 'description' => __( 'Your site&#8217;s WordPress Pages') );		$this->WP_Widget('pages', __('Pages'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Pages' ) : $instance['title'], $instance, $this->id_base);		$sortby = empty( $instance['sortby'] ) ? 'menu_order' : $instance['sortby'];		$exclude = empty( $instance['exclude'] ) ? '' : $instance['exclude'];		if ( $sortby == 'menu_order' )			$sortby = 'menu_order, post_title';		$out = wp_list_pages( apply_filters('widget_pages_args', array('title_li' => '', 'echo' => 0, 'sort_column' => $sortby, 'exclude' => $exclude) ) );		if ( !empty( $out ) ) {			echo $before_widget;			if ( $title)				echo $before_title . $title . $after_title;		?>		<ul>			<?php echo $out; ?>		</ul>		<?php			echo $after_widget;		}	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( in_array( $new_instance['sortby'], array( 'post_title', 'menu_order', 'ID' ) ) ) {			$instance['sortby'] = $new_instance['sortby'];		} else {			$instance['sortby'] = 'menu_order';		}		$instance['exclude'] = strip_tags( $new_instance['exclude'] );		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'sortby' => 'post_title', 'title' => '', 'exclude' => '') );		$title = esc_attr( $instance['title'] );		$exclude = esc_attr( $instance['exclude'] );	?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p>			<label for="<?php echo $this->get_field_id('sortby'); ?>"><?php _e( 'Sort by:' ); ?></label>			<select name="<?php echo $this->get_field_name('sortby'); ?>" id="<?php echo $this->get_field_id('sortby'); ?>" class="widefat">				<option value="post_title"<?php selected( $instance['sortby'], 'post_title' ); ?>><?php _e('Page title'); ?></option>				<option value="menu_order"<?php selected( $instance['sortby'], 'menu_order' ); ?>><?php _e('Page order'); ?></option>				<option value="ID"<?php selected( $instance['sortby'], 'ID' ); ?>><?php _e( 'Page ID' ); ?></option>			</select>		</p>		<p>			<label for="<?php echo $this->get_field_id('exclude'); ?>"><?php _e( 'Exclude:' ); ?></label> <input type="text" value="<?php echo $exclude; ?>" name="<?php echo $this->get_field_name('exclude'); ?>" id="<?php echo $this->get_field_id('exclude'); ?>" class="widefat" />			<br />			<small><?php _e( 'Page IDs, separated by commas.' ); ?></small>		</p><?php	}}/** * Links widget class * * @since 2.8.0 */class WP_Widget_Links extends WP_Widget {	function WP_Widget_Links() {		$widget_ops = array('description' => __( "Your blogroll" ) );		$this->WP_Widget('links', __('Links'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args, EXTR_SKIP);		$show_description = isset($instance['description']) ? $instance['description'] : false;		$show_name = isset($instance['name']) ? $instance['name'] : false;		$show_rating = isset($instance['rating']) ? $instance['rating'] : false;		$show_images = isset($instance['images']) ? $instance['images'] : true;		$category = isset($instance['category']) ? $instance['category'] : false;		if ( is_admin() && !$category ) {			// Display All Links widget as such in the widgets screen			echo $before_widget . $before_title. __('All Links') . $after_title . $after_widget;			return;		}		$before_widget = preg_replace('/id="[^"]*"/','id="%id"', $before_widget);		wp_list_bookmarks(apply_filters('widget_links_args', array(			'title_before' => $before_title, 'title_after' => $after_title,			'category_before' => $before_widget, 'category_after' => $after_widget,			'show_images' => $show_images, 'show_description' => $show_description,			'show_name' => $show_name, 'show_rating' => $show_rating,			'category' => $category, 'class' => 'linkcat widget'		)));	}	function update( $new_instance, $old_instance ) {		$new_instance = (array) $new_instance;		$instance = array( 'images' => 0, 'name' => 0, 'description' => 0, 'rating' => 0);		foreach ( $instance as $field => $val ) {			if ( isset($new_instance[$field]) )				$instance[$field] = 1;		}		$instance['category'] = intval($new_instance['category']);		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'images' => true, 'name' => true, 'description' => false, 'rating' => false, 'category' => false ) );		$link_cats = get_terms( 'link_category');?>		<p>		<label for="<?php echo $this->get_field_id('category'); ?>" class="screen-reader-text"><?php _e('Select Link Category'); ?></label>		<select class="widefat" id="<?php echo $this->get_field_id('category'); ?>" name="<?php echo $this->get_field_name('category'); ?>">		<option value=""><?php _e('All Links'); ?></option>		<?php		foreach ( $link_cats as $link_cat ) {			echo '<option value="' . intval($link_cat->term_id) . '"'				. ( $link_cat->term_id == $instance['category'] ? ' selected="selected"' : '' )				. '>' . $link_cat->name . "</option>\n";		}		?>		</select></p>		<p>		<input class="checkbox" type="checkbox" <?php checked($instance['images'], true) ?> id="<?php echo $this->get_field_id('images'); ?>" name="<?php echo $this->get_field_name('images'); ?>" />		<label for="<?php echo $this->get_field_id('images'); ?>"><?php _e('Show Link Image'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['name'], true) ?> id="<?php echo $this->get_field_id('name'); ?>" name="<?php echo $this->get_field_name('name'); ?>" />		<label for="<?php echo $this->get_field_id('name'); ?>"><?php _e('Show Link Name'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['description'], true) ?> id="<?php echo $this->get_field_id('description'); ?>" name="<?php echo $this->get_field_name('description'); ?>" />		<label for="<?php echo $this->get_field_id('description'); ?>"><?php _e('Show Link Description'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['rating'], true) ?> id="<?php echo $this->get_field_id('rating'); ?>" name="<?php echo $this->get_field_name('rating'); ?>" />		<label for="<?php echo $this->get_field_id('rating'); ?>"><?php _e('Show Link Rating'); ?></label>		</p><?php	}}/** * Search widget class * * @since 2.8.0 */class WP_Widget_Search extends WP_Widget {	function WP_Widget_Search() {		$widget_ops = array('classname' => 'widget_search', 'description' => __( "A search form for your site") );		$this->WP_Widget('search', __('Search'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		// Use current theme search form if it exists		get_search_form();		echo $after_widget;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = $instance['title'];?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></label></p><?php	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args((array) $new_instance, array( 'title' => ''));		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}}/** * Archives widget class * * @since 2.8.0 */class WP_Widget_Archives extends WP_Widget {	function WP_Widget_Archives() {		$widget_ops = array('classname' => 'widget_archive', 'description' => __( 'A monthly archive of your site&#8217;s posts') );		$this->WP_Widget('archives', __('Archives'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$c = $instance['count'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		$title = apply_filters('widget_title', empty($instance['title']) ? __('Archives') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		if ( $d ) {?>		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'> <option value=""><?php echo esc_attr(__('Select Month')); ?></option> <?php wp_get_archives(apply_filters('widget_archives_dropdown_args', array('type' => 'monthly', 'format' => 'option', 'show_post_count' => $c))); ?> </select><?php		} else {?>		<ul>		<?php wp_get_archives(apply_filters('widget_archives_args', array('type' => 'monthly', 'show_post_count' => $c))); ?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args( (array) $new_instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = $new_instance['count'] ? 1 : 0;		$instance['dropdown'] = $new_instance['dropdown'] ? 1 : 0;		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$title = strip_tags($instance['title']);		$count = $instance['count'] ? 'checked="checked"' : '';		$dropdown = $instance['dropdown'] ? 'checked="checked"' : '';?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<p>			<input class="checkbox" type="checkbox" <?php echo $count; ?> id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>" /> <label for="<?php echo $this->get_field_id('count'); ?>"><?php _e('Show post counts'); ?></label>			<br />			<input class="checkbox" type="checkbox" <?php echo $dropdown; ?> id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>" /> <label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e('Display as a drop down'); ?></label>		</p><?php	}}/** * Meta widget class * * Displays log in/out, RSS feed links, etc. * * @since 2.8.0 */class WP_Widget_Meta extends WP_Widget {	function WP_Widget_Meta() {		$widget_ops = array('classname' => 'widget_meta', 'description' => __( "Log in/out, admin, feed and WordPress links") );		$this->WP_Widget('meta', __('Meta'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Meta') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;?>			<ul>			<?php wp_register(); ?>			<li><?php wp_loginout(); ?></li>			<li><a href="<?php bloginfo('rss2_url'); ?>" title="<?php echo esc_attr(__('Syndicate this site using RSS 2.0')); ?>"><?php _e('Entries <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="<?php bloginfo('comments_rss2_url'); ?>" title="<?php echo esc_attr(__('The latest comments to all posts in RSS')); ?>"><?php _e('Comments <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="http://wordpress.org/" title="<?php echo esc_attr(__('Powered by WordPress, state-of-the-art semantic personal publishing platform.')); ?>">WordPress.org</a></li>			<?php wp_meta(); ?>			</ul><?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>			<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Calendar widget class * * @since 2.8.0 */class WP_Widget_Calendar extends WP_Widget {	function WP_Widget_Calendar() {		$widget_ops = array('classname' => 'widget_calendar', 'description' => __( 'A calendar of your site&#8217;s posts') );		$this->WP_Widget('calendar', __('Calendar'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? '&nbsp;' : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div id="calendar_wrap">';		get_calendar();		echo '</div>';		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Text widget class * * @since 2.8.0 */class WP_Widget_Text extends WP_Widget {	function WP_Widget_Text() {		$widget_ops = array('classname' => 'widget_text', 'description' => __('Arbitrary text or HTML'));		$control_ops = array('width' => 400, 'height' => 350);		$this->WP_Widget('text', __('Text'), $widget_ops, $control_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters( 'widget_title', empty($instance['title']) ? '' : $instance['title'], $instance, $this->id_base);		$text = apply_filters( 'widget_text', $instance['text'], $instance );		echo $before_widget;		if ( !empty( $title ) ) { echo $before_title . $title . $after_title; } ?>			<div class="textwidget"><?php echo $instance['filter'] ? wpautop($text) : $text; ?></div>		<?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( current_user_can('unfiltered_html') )			$instance['text'] =  $new_instance['text'];		else			$instance['text'] = stripslashes( wp_filter_post_kses( addslashes($new_instance['text']) ) ); // wp_filter_post_kses() expects slashed		$instance['filter'] = isset($new_instance['filter']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'text' => '' ) );		$title = strip_tags($instance['title']);		$text = format_to_edit($instance['text']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<textarea class="widefat" rows="16" cols="20" id="<?php echo $this->get_field_id('text'); ?>" name="<?php echo $this->get_field_name('text'); ?>"><?php echo $text; ?></textarea>		<p><input id="<?php echo $this->get_field_id('filter'); ?>" name="<?php echo $this->get_field_name('filter'); ?>" type="checkbox" <?php checked(isset($instance['filter']) ? $instance['filter'] : 0); ?> />&nbsp;<label for="<?php echo $this->get_field_id('filter'); ?>"><?php _e('Automatically add paragraphs'); ?></label></p><?php	}}/** * Categories widget class * * @since 2.8.0 */class WP_Widget_Categories extends WP_Widget {	function WP_Widget_Categories() {		$widget_ops = array( 'classname' => 'widget_categories', 'description' => __( "A list or dropdown of categories" ) );		$this->WP_Widget('categories', __('Categories'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Categories' ) : $instance['title'], $instance, $this->id_base);		$c = $instance['count'] ? '1' : '0';		$h = $instance['hierarchical'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		$cat_args = array('orderby' => 'name', 'show_count' => $c, 'hierarchical' => $h);		if ( $d ) {			$cat_args['show_option_none'] = __('Select Category');			wp_dropdown_categories(apply_filters('widget_categories_dropdown_args', $cat_args));?><script type='text/javascript'>/* <![CDATA[ */	var dropdown = document.getElementById("cat");	function onCatChange() {		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {			location.href = "<?php echo home_url(); ?>/?cat="+dropdown.options[dropdown.selectedIndex].value;		}	}	dropdown.onchange = onCatChange;/* ]]> */</script><?php		} else {?>		<ul><?php		$cat_args['title_li'] = '';		wp_list_categories(apply_filters('widget_categories_args', $cat_args));?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = !empty($new_instance['count']) ? 1 : 0;		$instance['hierarchical'] = !empty($new_instance['hierarchical']) ? 1 : 0;		$instance['dropdown'] = !empty($new_instance['dropdown']) ? 1 : 0;		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = esc_attr( $instance['title'] );		$count = isset($instance['count']) ? (bool) $instance['count'] :false;		$hierarchical = isset( $instance['hierarchical'] ) ? (bool) $instance['hierarchical'] : false;		$dropdown = isset( $instance['dropdown'] ) ? (bool) $instance['dropdown'] : false;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:' ); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>"<?php checked( $dropdown ); ?> />		<label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e( 'Show as dropdown' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>"<?php checked( $count ); ?> />		<label for="<?php echo $this->get_field_id('count'); ?>"><?php _e( 'Show post counts' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('hierarchical'); ?>" name="<?php echo $this->get_field_name('hierarchical'); ?>"<?php checked( $hierarchical ); ?> />		<label for="<?php echo $this->get_field_id('hierarchical'); ?>"><?php _e( 'Show hierarchy' ); ?></label></p><?php	}}/** * Recent_Posts widget class * * @since 2.8.0 */class WP_Widget_Recent_Posts extends WP_Widget {	function WP_Widget_Recent_Posts() {		$widget_ops = array('classname' => 'widget_recent_entries', 'description' => __( "The most recent posts on your site") );		$this->WP_Widget('recent-posts', __('Recent Posts'), $widget_ops);		$this->alt_option_name = 'widget_recent_entries';		add_action( 'save_post', array(&$this, 'flush_widget_cache') );		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );	}	function widget($args, $instance) {		$cache = wp_cache_get('widget_recent_posts', 'widget');		if ( !is_array($cache) )			$cache = array();		if ( isset($cache[$args['widget_id']]) ) {			echo $cache[$args['widget_id']];			return;		}		ob_start();		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Posts') : $instance['title'], $instance, $this->id_base);		if ( !$number = (int) $instance['number'] )			$number = 10;		else if ( $number < 1 )			$number = 1;		else if ( $number > 15 )			$number = 15;		$r = new WP_Query(array('showposts' => $number, 'nopaging' => 0, 'post_status' => 'publish', 'caller_get_posts' => 1));		if ($r->have_posts()) :?>		<?php echo $before_widget; ?>		<?php if ( $title ) echo $before_title . $title . $after_title; ?>		<ul>		<?php  while ($r->have_posts()) : $r->the_post(); ?>		<li><a href="<?php the_permalink() ?>" title="<?php echo esc_attr(get_the_title() ? get_the_title() : get_the_ID()); ?>"><?php if ( get_the_title() ) the_title(); else the_ID(); ?></a></li>		<?php endwhile; ?>		</ul>		<?php echo $after_widget; ?><?php		// Reset the global $the_post as this query will have stomped on it		wp_reset_postdata();		endif;		$cache[$args['widget_id']] = ob_get_flush();		wp_cache_set('widget_recent_posts', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_entries']) )			delete_option('widget_recent_entries');		return $instance;	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_posts', 'widget');	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		if ( !isset($instance['number']) || !$number = (int) $instance['number'] )			$number = 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of posts to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * Recent_Comments widget class * * @since 2.8.0 */class WP_Widget_Recent_Comments extends WP_Widget {	function WP_Widget_Recent_Comments() {		$widget_ops = array('classname' => 'widget_recent_comments', 'description' => __( 'The most recent comments' ) );		$this->WP_Widget('recent-comments', __('Recent Comments'), $widget_ops);		$this->alt_option_name = 'widget_recent_comments';		if ( is_active_widget(false, false, $this->id_base) )			add_action( 'wp_head', array(&$this, 'recent_comments_style') );		add_action( 'comment_post', array(&$this, 'flush_widget_cache') );		add_action( 'transition_comment_status', array(&$this, 'flush_widget_cache') );	}	function recent_comments_style() { ?>	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style><?php	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_comments', 'widget');	}	function widget( $args, $instance ) {		global $comments, $comment;		$cache = wp_cache_get('widget_recent_comments', 'widget');		if ( ! is_array( $cache ) )			$cache = array();		if ( isset( $cache[$args['widget_id']] ) ) {			echo $cache[$args['widget_id']];			return;		} 		extract($args, EXTR_SKIP); 		$output = ''; 		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Comments') : $instance['title']);		if ( ! $number = (int) $instance['number'] ) 			$number = 5; 		else if ( $number < 1 ) 			$number = 1;		$comments = get_comments( array( 'number' => $number, 'status' => 'approve' ) );		$output .= $before_widget;		if ( $title )			$output .= $before_title . $title . $after_title;		$output .= '<ul id="recentcomments">';		if ( $comments ) {			foreach ( (array) $comments as $comment) {				$output .=  '<li class="recentcomments">' . /* translators: comments widget: 1: comment author, 2: post link */ sprintf(_x('%1$s on %2$s', 'widgets'), get_comment_author_link(), '<a href="' . esc_url( get_comment_link($comment->comment_ID) ) . '">' . get_the_title($comment->comment_post_ID) . '</a>') . '</li>';			} 		}		$output .= '</ul>';		$output .= $after_widget;		echo $output;		$cache[$args['widget_id']] = $output;		wp_cache_set('widget_recent_comments', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_comments']) )			delete_option('widget_recent_comments');		return $instance;	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		$number = isset($instance['number']) ? absint($instance['number']) : 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of comments to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * RSS widget class * * @since 2.8.0 */class WP_Widget_RSS extends WP_Widget {	function WP_Widget_RSS() {		$widget_ops = array( 'description' => __('Entries from any RSS or Atom feed') );		$control_ops = array( 'width' => 400, 'height' => 200 );		$this->WP_Widget( 'rss', __('RSS'), $widget_ops, $control_ops );	}	function widget($args, $instance) {		if ( isset($instance['error']) && $instance['error'] )			return;		extract($args, EXTR_SKIP);		$url = $instance['url'];		while ( stristr($url, 'http') != $url )			$url = substr($url, 1);		if ( empty($url) )			return;		$rss = fetch_feed($url);		$title = $instance['title'];		$desc = '';		$link = '';		if ( ! is_wp_error($rss) ) {			$desc = esc_attr(strip_tags(@html_entity_decode($rss->get_description(), ENT_QUOTES, get_option('blog_charset'))));			if ( empty($title) )				$title = esc_html(strip_tags($rss->get_title()));			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);		}		if ( empty($title) )			$title = empty($desc) ? __('Unknown Feed') : $desc;		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		$url = esc_url(strip_tags($url));		$icon = includes_url('images/rss.png');		if ( $title )			$title = "<a class='rsswidget' href='$url' title='" . esc_attr__( 'Syndicate this content' ) ."'><img style='border:0' width='14' height='14' src='$icon' alt='RSS' /></a> <a class='rsswidget' href='$link' title='$desc'>$title</a>";		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		wp_widget_rss_output( $rss, $instance );		echo $after_widget;		if ( ! is_wp_error($rss) )			$rss->__destruct();		unset($rss);	}	function update($new_instance, $old_instance) {		$testurl = ( isset($new_instance['url']) && ($new_instance['url'] != $old_instance['url']) );		return wp_widget_rss_process( $new_instance, $testurl );	}	function form($instance) {		if ( empty($instance) )			$instance = array( 'title' => '', 'url' => '', 'items' => 10, 'error' => false, 'show_summary' => 0, 'show_author' => 0, 'show_date' => 0 );		$instance['number'] = $this->number;		wp_widget_rss_form( $instance );	}}/** * Display the RSS entries in a list. * * @since 2.5.0 * * @param string|array|object $rss RSS url. * @param array $args Widget arguments. */function wp_widget_rss_output( $rss, $args = array() ) {	if ( is_string( $rss ) ) {		$rss = fetch_feed($rss);	} elseif ( is_array($rss) && isset($rss['url']) ) {		$args = $rss;		$rss = fetch_feed($rss['url']);	} elseif ( !is_object($rss) ) {		return;	}	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') )			echo '<p>' . sprintf( __('<strong>RSS Error</strong>: %s'), $rss->get_error_message() ) . '</p>';		return;	}	$default_args = array( 'show_author' => 0, 'show_date' => 0, 'show_summary' => 0 );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$items = (int) $items;	if ( $items < 1 || 20 < $items )		$items = 10;	$show_summary  = (int) $show_summary;	$show_author   = (int) $show_author;	$show_date     = (int) $show_date;	if ( !$rss->get_item_quantity() ) {		echo '<ul><li>' . __( 'An error has occurred; the feed is probably down. Try again later.' ) . '</li></ul>';		$rss->__destruct();		unset($rss);		return;	}	echo '<ul>';	foreach ( $rss->get_items(0, $items) as $item ) {		$link = $item->get_link();		while ( stristr($link, 'http') != $link )			$link = substr($link, 1);		$link = esc_url(strip_tags($link));		$title = esc_attr(strip_tags($item->get_title()));		if ( empty($title) )			$title = __('Untitled');		$desc = str_replace( array("\n", "\r"), ' ', esc_attr( strip_tags( @html_entity_decode( $item->get_description(), ENT_QUOTES, get_option('blog_charset') ) ) ) );		$desc = wp_html_excerpt( $desc, 360 );		// Append ellipsis. Change existing [...] to [&hellip;].		if ( '[...]' == substr( $desc, -5 ) )			$desc = substr( $desc, 0, -5 ) . '[&hellip;]';		elseif ( '[&hellip;]' != substr( $desc, -10 ) )			$desc .= ' [&hellip;]';		$desc = esc_html( $desc );		if ( $show_summary ) {			$summary = "<div class='rssSummary'>$desc</div>";		} else {			$summary = '';		}		$date = '';		if ( $show_date ) {			$date = $item->get_date();			if ( $date ) {				if ( $date_stamp = strtotime( $date ) )					$date = ' <span class="rss-date">' . date_i18n( get_option( 'date_format' ), $date_stamp ) . '</span>';				else					$date = '';			}		}		$author = '';		if ( $show_author ) {			$author = $item->get_author();			if ( is_object($author) ) {				$author = $author->get_name();				$author = ' <cite>' . esc_html( strip_tags( $author ) ) . '</cite>';			}		}		if ( $link == '' ) {			echo "<li>$title{$date}{$summary}{$author}</li>";		} else {			echo "<li><a class='rsswidget' href='$link' title='$desc'>$title</a>{$date}{$summary}{$author}</li>";		}	}	echo '</ul>';	$rss->__destruct();	unset($rss);}/** * Display RSS widget options form. * * The options for what fields are displayed for the RSS form are all booleans * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author', * 'show_date'. * * @since 2.5.0 * * @param array|string $args Values for input fields. * @param array $inputs Override default display options. */function wp_widget_rss_form( $args, $inputs = null ) {	$default_inputs = array( 'url' => true, 'title' => true, 'items' => true, 'show_summary' => true, 'show_author' => true, 'show_date' => true );	$inputs = wp_parse_args( $inputs, $default_inputs );	extract( $args );	extract( $inputs, EXTR_SKIP);	$number = esc_attr( $number );	$title  = esc_attr( $title );	$url    = esc_url( $url );	$items  = (int) $items;	if ( $items < 1 || 20 < $items )		$items  = 10;	$show_summary   = (int) $show_summary;	$show_author    = (int) $show_author;	$show_date      = (int) $show_date;	if ( !empty($error) )		echo '<p class="widget-error"><strong>' . sprintf( __('RSS Error: %s'), $error) . '</strong></p>';	if ( $inputs['url'] ) :?>	<p><label for="rss-url-<?php echo $number; ?>"><?php _e('Enter the RSS feed URL here:'); ?></label>	<input class="widefat" id="rss-url-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][url]" type="text" value="<?php echo $url; ?>" /></p><?php endif; if ( $inputs['title'] ) : ?>	<p><label for="rss-title-<?php echo $number; ?>"><?php _e('Give the feed a title (optional):'); ?></label>	<input class="widefat" id="rss-title-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][title]" type="text" value="<?php echo $title; ?>" /></p><?php endif; if ( $inputs['items'] ) : ?>	<p><label for="rss-items-<?php echo $number; ?>"><?php _e('How many items would you like to display?'); ?></label>	<select id="rss-items-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][items]"><?php		for ( $i = 1; $i <= 20; ++$i )			echo "<option value='$i' " . ( $items == $i ? "selected='selected'" : '' ) . ">$i</option>";?>	</select></p><?php endif; if ( $inputs['show_summary'] ) : ?>	<p><input id="rss-show-summary-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_summary]" type="checkbox" value="1" <?php if ( $show_summary ) echo 'checked="checked"'; ?>/>	<label for="rss-show-summary-<?php echo $number; ?>"><?php _e('Display item content?'); ?></label></p><?php endif; if ( $inputs['show_author'] ) : ?>	<p><input id="rss-show-author-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_author]" type="checkbox" value="1" <?php if ( $show_author ) echo 'checked="checked"'; ?>/>	<label for="rss-show-author-<?php echo $number; ?>"><?php _e('Display item author if available?'); ?></label></p><?php endif; if ( $inputs['show_date'] ) : ?>	<p><input id="rss-show-date-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_date]" type="checkbox" value="1" <?php if ( $show_date ) echo 'checked="checked"'; ?>/>	<label for="rss-show-date-<?php echo $number; ?>"><?php _e('Display item date?'); ?></label></p><?php	endif;	foreach ( array_keys($default_inputs) as $input ) :		if ( 'hidden' === $inputs[$input] ) :			$id = str_replace( '_', '-', $input );?>	<input type="hidden" id="rss-<?php echo $id; ?>-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][<?php echo $input; ?>]" value="<?php echo $$input; ?>" /><?php		endif;	endforeach;}/** * Process RSS feed widget data and optionally retrieve feed items. * * The feed widget can not have more than 20 items or it will reset back to the * default, which is 10. * * The resulting array has the feed title, feed url, feed link (from channel), * feed items, error (if any), and whether to show summary, author, and date. * All respectively in the order of the array elements. * * @since 2.5.0 * * @param array $widget_rss RSS widget feed data. Expects unescaped data. * @param bool $check_feed Optional, default is true. Whether to check feed for errors. * @return array */function wp_widget_rss_process( $widget_rss, $check_feed = true ) {	$items = (int) $widget_rss['items'];	if ( $items < 1 || 20 < $items )		$items = 10;	$url           = esc_url_raw(strip_tags( $widget_rss['url'] ));	$title         = trim(strip_tags( $widget_rss['title'] ));	$show_summary  = isset($widget_rss['show_summary']) ? (int) $widget_rss['show_summary'] : 0;	$show_author   = isset($widget_rss['show_author']) ? (int) $widget_rss['show_author'] :0;	$show_date     = isset($widget_rss['show_date']) ? (int) $widget_rss['show_date'] : 0;	if ( $check_feed ) {		$rss = fetch_feed($url);		$error = false;		$link = '';		if ( is_wp_error($rss) ) {			$error = $rss->get_error_message();		} else {			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);			$rss->__destruct();			unset($rss);		}	}	return compact( 'title', 'url', 'link', 'items', 'error', 'show_summary', 'show_author', 'show_date' );}/** * Tag cloud widget class * * @since 2.8.0 */class WP_Widget_Tag_Cloud extends WP_Widget {	function WP_Widget_Tag_Cloud() {		$widget_ops = array( 'description' => __( "Your most used tags in cloud format") );		$this->WP_Widget('tag_cloud', __('Tag Cloud'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$current_taxonomy = $this->_get_current_taxonomy($instance);		if ( !empty($instance['title']) ) {			$title = $instance['title'];		} else {			if ( 'post_tag' == $current_taxonomy ) {				$title = __('Tags');			} else {				$tax = get_taxonomy($current_taxonomy);				$title = $tax->labels->name;			}		}		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div>';		wp_tag_cloud( apply_filters('widget_tag_cloud_args', array('taxonomy' => $current_taxonomy) ) );		echo "</div>\n";		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags(stripslashes($new_instance['title']));		$instance['taxonomy'] = stripslashes($new_instance['taxonomy']);		return $instance;	}	function form( $instance ) {		$current_taxonomy = $this->_get_current_taxonomy($instance);?>	<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>	<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php if (isset ( $instance['title'])) {echo esc_attr( $instance['title'] );} ?>" /></p>	<p><label for="<?php echo $this->get_field_id('taxonomy'); ?>"><?php _e('Taxonomy:') ?></label>	<select class="widefat" id="<?php echo $this->get_field_id('taxonomy'); ?>" name="<?php echo $this->get_field_name('taxonomy'); ?>">	<?php foreach ( get_object_taxonomies('post') as $taxonomy ) :				$tax = get_taxonomy($taxonomy);				if ( !$tax->show_tagcloud || empty($tax->labels->name) )					continue;	?>		<option value="<?php echo esc_attr($taxonomy) ?>" <?php selected($taxonomy, $current_taxonomy) ?>><?php echo $tax->labels->name; ?></option>	<?php endforeach; ?>	</select></p><?php	}	function _get_current_taxonomy($instance) {		if ( !empty($instance['taxonomy']) && taxonomy_exists($instance['taxonomy']) )			return $instance['taxonomy'];		return 'post_tag';	}}/** * Navigation Menu widget class * * @since 3.0.0 */ class WP_Nav_Menu_Widget extends WP_Widget {	function WP_Nav_Menu_Widget() {		$widget_ops = array( 'description' => __('Use this widget to add one of your custom menus as a widget.') );		parent::WP_Widget( 'nav_menu', __('Custom Menu'), $widget_ops );	}	function widget($args, $instance) {		// Get menu		$nav_menu = wp_get_nav_menu_object( $instance['nav_menu'] );		if ( !$nav_menu )			return;		echo $args['before_widget'];		if ( !empty($instance['title']) )			echo $args['before_title'] . $instance['title'] . $args['after_title'];		wp_nav_menu( array( 'fallback_cb' => '', 'menu' => $nav_menu ) );		echo $args['after_widget'];	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags( stripslashes($new_instance['title']) );		$instance['nav_menu'] = (int) $new_instance['nav_menu'];		return $instance;	}	function form( $instance ) {		$title = isset( $instance['title'] ) ? $instance['title'] : '';		$nav_menu = isset( $instance['nav_menu'] ) ? $instance['nav_menu'] : '';		// Get menus		$menus = get_terms( 'nav_menu', array( 'hide_empty' => false ) );		// If no menus exists, direct the user to go and create some.		if ( !$menus ) {			echo '<p>'. sprintf( __('No menus have been created yet. <a href="%s">Create some</a>.'), admin_url('nav-menus.php') ) .'</p>';			return;		}		?>		<p>			<label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>			<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>" />		</p>		<p>			<label for="<?php echo $this->get_field_id('nav_menu'); ?>"><?php _e('Select Menu:'); ?></label>			<select id="<?php echo $this->get_field_id('nav_menu'); ?>" name="<?php echo $this->get_field_name('nav_menu'); ?>">		<?php			foreach ( $menus as $menu ) {				$selected = $nav_menu == $menu->term_id ? ' selected="selected"' : '';				echo '<option'. $selected .' value="'. $menu->term_id .'">'. $menu->name .'</option>';			}		?>			</select>		</p>		<?php	}}/** * Register all of the default WordPress widgets on startup. * * Calls 'widgets_init' action after all of the WordPress widgets have been * registered. * * @since 2.2.0 */function wp_widgets_init() {	if ( !is_blog_installed() )		return;	register_widget('WP_Widget_Pages');	register_widget('WP_Widget_Calendar');	register_widget('WP_Widget_Archives');	register_widget('WP_Widget_Links');	register_widget('WP_Widget_Meta');	register_widget('WP_Widget_Search');	register_widget('WP_Widget_Text');	register_widget('WP_Widget_Categories');	register_widget('WP_Widget_Recent_Posts');	register_widget('WP_Widget_Recent_Comments');	register_widget('WP_Widget_RSS');	register_widget('WP_Widget_Tag_Cloud');	register_widget('WP_Nav_Menu_Widget');	do_action('widgets_init');}add_action('init', 'wp_widgets_init', 1);
<?php/** * Multi-site WordPress API * * @package WordPress * @subpackage Multisite * @since 3.0.0 */function get_sitestats() {	global $wpdb;	$stats['blogs'] = get_blog_count();	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( "SELECT COUNT(ID) FROM $wpdb->users" );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	} else {		$count = get_site_option( 'user_count' );	}	$stats['users'] = $count;	return $stats;}function get_admin_users_for_domain( $sitedomain = '', $path = '' ) {	global $wpdb;	if ( ! $sitedomain )		$site_id = $wpdb->siteid;	else		$site_id = $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE domain = %s AND path = %s", $sitedomain, $path ) );	if ( $site_id )		return $wpdb->get_results( $wpdb->prepare( "SELECT u.ID, u.user_login, u.user_pass FROM $wpdb->users AS u, $wpdb->sitemeta AS sm WHERE sm.meta_key = 'admin_user_id' AND u.ID = sm.meta_value AND sm.site_id = %d", $site_id ), ARRAY_A );	return false;}function get_blogs_of_user( $id, $all = false ) {	global $wpdb;	$cache_suffix = $all ? '_all' : '_short';	$return = wp_cache_get( 'blogs_of_user_' . $id . $cache_suffix, 'users' );	if ( $return )		return apply_filters( 'get_blogs_of_user', $return, $id, $all );	$user = get_userdata( (int) $id );	if ( !$user )		return false;	$blogs = $match = array();	$prefix_length = strlen($wpdb->base_prefix);	foreach ( (array) $user as $key => $value ) {		if ( $prefix_length && substr($key, 0, $prefix_length) != $wpdb->base_prefix )			continue;		if ( substr($key, -12, 12) != 'capabilities' )			continue;		if ( preg_match( '/^' . $wpdb->base_prefix . '((\d+)_)?capabilities$/', $key, $match ) ) {			if ( count( $match ) > 2 )				$blog_id = $match[ 2 ];			else				$blog_id = 1;			$blog = get_blog_details( $blog_id );			if ( $blog && isset( $blog->domain ) && ( $all == true || $all == false && ( $blog->archived == 0 && $blog->spam == 0 && $blog->deleted == 0 ) ) ) {				$blogs[ $blog_id ]->userblog_id	= $blog_id;				$blogs[ $blog_id ]->blogname		= $blog->blogname;				$blogs[ $blog_id ]->domain		= $blog->domain;				$blogs[ $blog_id ]->path			= $blog->path;				$blogs[ $blog_id ]->site_id		= $blog->site_id;				$blogs[ $blog_id ]->siteurl		= $blog->siteurl;			}		}	}	wp_cache_add( 'blogs_of_user_' . $id . $cache_suffix, $blogs, 'users', 5 );	return apply_filters( 'get_blogs_of_user', $blogs, $id, $all );}function get_active_blog_for_user( $user_id ) { // get an active blog for user - either primary blog or from blogs list	global $wpdb;	$blogs = get_blogs_of_user( $user_id );	if ( empty( $blogs ) ) {		$details = get_dashboard_blog();		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );		update_user_meta( $user_id, 'primary_blog', $details->blog_id );		wp_cache_delete( $user_id, 'users' );		return $details;	}	$primary_blog = get_user_meta( $user_id, 'primary_blog', true );	$details = get_dashboard_blog();	if ( $primary_blog ) {		$blogs = get_blogs_of_user( $user_id );		if ( isset( $blogs[ $primary_blog ] ) == false ) {			add_user_to_blog( $details->blog_id, $user_id, 'subscriber' );			update_user_meta( $user_id, 'primary_blog', $details->blog_id );			wp_cache_delete( $user_id, 'users' );		} else {			$details = get_blog_details( $primary_blog );		}	} else {		add_user_to_blog( $details->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog		update_user_meta( $user_id, 'primary_blog', $details->blog_id );	}	if ( ( is_object( $details ) == false ) || ( is_object( $details ) && $details->archived == 1 || $details->spam == 1 || $details->deleted == 1 ) ) {		$blogs = get_blogs_of_user( $user_id, true ); // if a user's primary blog is shut down, check their other blogs.		$ret = false;		if ( is_array( $blogs ) && count( $blogs ) > 0 ) {			foreach ( (array) $blogs as $blog_id => $blog ) {				if ( $blog->site_id != $wpdb->siteid )					continue;				$details = get_blog_details( $blog_id );				if ( is_object( $details ) && $details->archived == 0 && $details->spam == 0 && $details->deleted == 0 ) {					$ret = $blog;					$changed = false;					if ( get_user_meta( $user_id , 'primary_blog', true ) != $blog_id ) {						update_user_meta( $user_id, 'primary_blog', $blog_id );						$changed = true;					}					if ( !get_user_meta($user_id , 'source_domain', true) ) {						update_user_meta( $user_id, 'source_domain', $blog->domain );						$changed = true;					}					if ( $changed )						wp_cache_delete( $user_id, 'users' );					break;				}			}		} else {			// Should never get here			$dashboard_blog = get_dashboard_blog();			add_user_to_blog( $dashboard_blog->blog_id, $user_id, 'subscriber' ); // Add subscriber permission for dashboard blog			update_user_meta( $user_id, 'primary_blog', $dashboard_blog->blog_id );			return $dashboard_blog;		}		return $ret;	} else {		return $details;	}}function is_user_member_of_blog( $user_id, $blog_id = 0 ) {	$user_id = (int) $user_id;	$blog_id = (int) $blog_id;	if ( $blog_id == 0 ) {		global $wpdb;		$blog_id = $wpdb->blogid;	}	$blogs = get_blogs_of_user( $user_id );	if ( is_array( $blogs ) )		return array_key_exists( $blog_id, $blogs );	else		return false;}function get_user_count() {	global $wpdb;	$count_ts = get_site_option( 'user_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(ID) as c FROM $wpdb->users WHERE spam = '0' AND deleted = '0'") );		update_site_option( 'user_count', $count );		update_site_option( 'user_count_ts', time() );	}	$count = get_site_option( 'user_count' );	return $count;}function get_blog_count( $id = 0 ) {	global $wpdb;	if ( $id == 0 )		$id = $wpdb->siteid;	$count_ts = get_site_option( 'blog_count_ts' );	if ( time() - $count_ts > 3600 ) {		$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(blog_id) as c FROM $wpdb->blogs WHERE site_id = %d AND spam = '0' AND deleted = '0' and archived = '0'", $id) );		update_site_option( 'blog_count', $count );		update_site_option( 'blog_count_ts', time() );	}	$count = get_site_option( 'blog_count' );	return $count;}function get_blog_post( $blog_id, $post_id ) {	global $wpdb;	$key = $blog_id . '-' . $post_id;	$post = wp_cache_get( $key, 'global-posts' );	if ( $post == false ) {		$post = $wpdb->get_row( $wpdb->prepare( 'SELECT * FROM ' . $wpdb->get_blog_prefix( $blog_id ) . 'posts WHERE ID = %d', $post_id ) );		wp_cache_add( $key, $post, 'global-posts' );	}	return $post;}function add_user_to_blog( $blog_id, $user_id, $role ) {	switch_to_blog($blog_id);	$user = new WP_User($user_id);	if ( empty($user) || !$user->ID )		return new WP_Error('user_does_not_exist', __('That user does not exist.'));	if ( !get_user_meta($user_id, 'primary_blog', true) ) {		update_user_meta($user_id, 'primary_blog', $blog_id);		$details = get_blog_details($blog_id);		update_user_meta($user_id, 'source_domain', $details->domain);	}	$user->set_role($role);	do_action('add_user_to_blog', $user_id, $role, $blog_id);	wp_cache_delete( $user_id, 'users' );	restore_current_blog();	return true;}function remove_user_from_blog($user_id, $blog_id = '', $reassign = '') {	global $wpdb;	switch_to_blog($blog_id);	$user_id = (int) $user_id;	do_action('remove_user_from_blog', $user_id, $blog_id);	// If being removed from the primary blog, set a new primary if the user is assigned	// to multiple blogs.	$primary_blog = get_user_meta($user_id, 'primary_blog', true);	if ( $primary_blog == $blog_id ) {		$new_id = '';		$new_domain = '';		$blogs = get_blogs_of_user($user_id);		foreach ( (array) $blogs as $blog ) {			if ( $blog->userblog_id == $blog_id )				continue;			$new_id = $blog->userblog_id;			$new_domain = $blog->domain;			break;		}		update_user_meta($user_id, 'primary_blog', $new_id);		update_user_meta($user_id, 'source_domain', $new_domain);	}	// wp_revoke_user($user_id);	$user = new WP_User($user_id);	$user->remove_all_caps();	$blogs = get_blogs_of_user($user_id);	if ( count($blogs) == 0 ) {		update_user_meta($user_id, 'primary_blog', '');		update_user_meta($user_id, 'source_domain', '');	}	if ( $reassign != '' ) {		$reassign = (int) $reassign;		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_author = %d WHERE post_author = %d", $reassign, $user_id) );		$wpdb->query( $wpdb->prepare("UPDATE $wpdb->links SET link_owner = %d WHERE link_owner = %d", $reassign, $user_id) );	}	restore_current_blog();}function create_empty_blog( $domain, $path, $weblog_title, $site_id = 1 ) {	$domain			= addslashes( $domain );	$weblog_title	= addslashes( $weblog_title );	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return __( 'Error: Site URL already taken.' );	// Need to backup wpdb table names, and create a new wp_blogs entry for new blog.	// Need to get blog_id from wp_blogs, and create new table names.	// Must restore table names at the end of function.	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return __( 'Error: problem creating site entry.' );	switch_to_blog($blog_id);	install_blog($blog_id);	restore_current_blog();	return $blog_id;}function get_blog_permalink( $_blog_id, $post_id ) {	$key = "{$_blog_id}-{$post_id}-blog_permalink";	$link = wp_cache_get( $key, 'site-options' );	if ( $link == false ) {		switch_to_blog( $_blog_id );		$link = get_permalink( $post_id );		restore_current_blog();		wp_cache_add( $key, $link, 'site-options', 360 );	}	return $link;}function get_blog_id_from_url( $domain, $path = '/' ) {	global $wpdb;	$domain = strtolower( $wpdb->escape( $domain ) );	$path = strtolower( $wpdb->escape( $path ) );	$id = wp_cache_get( md5( $domain . $path ), 'blog-id-cache' );	if ( $id == -1 ) { // blog does not exist		return 0;	} elseif ( $id ) {		return (int)$id;	}	$id = $wpdb->get_var( "SELECT blog_id FROM $wpdb->blogs WHERE domain = '$domain' and path = '$path' /* get_blog_id_from_url */" );	if ( !$id ) {		wp_cache_set( md5( $domain . $path ), -1, 'blog-id-cache' );		return false;	}	wp_cache_set( md5( $domain . $path ), $id, 'blog-id-cache' );	return $id;}// wpmu admin functionsfunction wpmu_admin_do_redirect( $url = '' ) {	$ref = '';	if ( isset( $_GET['ref'] ) )		$ref = $_GET['ref'];	if ( isset( $_POST['ref'] ) )		$ref = $_POST['ref'];	if ( $ref ) {		$ref = wpmu_admin_redirect_add_updated_param( $ref );		wp_redirect( $ref );		exit();	}	if ( empty( $_SERVER['HTTP_REFERER'] ) == false ) {		wp_redirect( $_SERVER['HTTP_REFERER'] );		exit();	}	$url = wpmu_admin_redirect_add_updated_param( $url );	if ( isset( $_GET['redirect'] ) ) {		if ( substr( $_GET['redirect'], 0, 2 ) == 's_' )			$url .= '&action=blogs&s='. esc_html( substr( $_GET['redirect'], 2 ) );	} elseif ( isset( $_POST['redirect'] ) ) {		$url = wpmu_admin_redirect_add_updated_param( $_POST['redirect'] );	}	wp_redirect( $url );	exit();}function wpmu_admin_redirect_add_updated_param( $url = '' ) {	if ( strpos( $url, 'updated=true' ) === false ) {		if ( strpos( $url, '?' ) === false )			return $url . '?updated=true';		else			return $url . '&updated=true';	}	return $url;}function is_blog_user( $blog_id = 0 ) {	global $current_user, $wpdb;	if ( !$blog_id )		$blog_id = $wpdb->blogid;	$cap_key = $wpdb->base_prefix . $blog_id . '_capabilities';	if ( is_array($current_user->$cap_key) && in_array(1, $current_user->$cap_key) )		return true;	return false;}function is_email_address_unsafe( $user_email ) {	$banned_names = get_site_option( 'banned_email_domains' );	if ($banned_names && !is_array( $banned_names ))		$banned_names = explode( "\n", $banned_names);	if ( is_array( $banned_names ) && empty( $banned_names ) == false ) {		$email_domain = strtolower( substr( $user_email, 1 + strpos( $user_email, '@' ) ) );		foreach ( (array) $banned_names as $banned_domain ) {			if ( $banned_domain == '' )				continue;			if (				strstr( $email_domain, $banned_domain ) ||				(					strstr( $banned_domain, '/' ) &&					preg_match( $banned_domain, $email_domain )				)			)			return true;		}	}	return false;}function wpmu_validate_user_signup($user_name, $user_email) {	global $wpdb;	$errors = new WP_Error();	$orig_username = $user_name;	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$maybe = array();	preg_match( '/[a-z0-9]+/', $user_name, $maybe );	if ( $user_name != $orig_username || $user_name != $maybe[0] ) {		$errors->add( 'user_name', __( "Only the lowercase letters a-z and numbers allowed" ) );		$user_name = $orig_username;	}	$user_email = sanitize_email( $user_email );	if ( empty( $user_name ) )	   	$errors->add('user_name', __('Please enter a username'));	$illegal_names = get_site_option( 'illegal_names' );	if ( is_array( $illegal_names ) == false ) {		$illegal_names = array(  'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	if ( in_array( $user_name, $illegal_names ) == true )		$errors->add('user_name',  __('That username is not allowed'));	if ( is_email_address_unsafe( $user_email ) )		$errors->add('user_email',  __('You cannot use that email address to signup. We are having problems with them blocking some of our email. Please use another email provider.'));	if ( strlen( $user_name ) < 4 )		$errors->add('user_name',  __('Username must be at least 4 characters'));	if ( strpos( ' ' . $user_name, '_' ) != false )		$errors->add( 'user_name', __( 'Sorry, usernames may not contain the character &#8220;_&#8221;!' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $user_name, $match );	if ( $match[0] == $user_name )		$errors->add('user_name', __('Sorry, usernames must have letters too!'));	if ( !is_email( $user_email ) )		$errors->add('user_email', __('Please enter a correct email address'));	$limited_email_domains = get_site_option( 'limited_email_domains' );	if ( is_array( $limited_email_domains ) && empty( $limited_email_domains ) == false ) {		$emaildomain = substr( $user_email, 1 + strpos( $user_email, '@' ) );		if ( in_array( $emaildomain, $limited_email_domains ) == false )			$errors->add('user_email', __('Sorry, that email address is not allowed!'));	}	// Check if the username has been used already.	if ( username_exists($user_name) )		$errors->add('user_name', __('Sorry, that username already exists!'));	// Check if the email address has been used already.	if ( email_exists($user_email) )		$errors->add('user_email', __('Sorry, that email address is already used!'));	// Has someone already signed up for this username?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_login = %s", $user_name) );	if ( $signup != null ) {		$registered_at =  mysql2date('U', $signup->registered);		$now = current_time( 'timestamp', true );		$diff = $now - $registered_at;		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_login = %s", $user_name) );		else			$errors->add('user_name', __('That username is currently reserved but may be available in a couple of days.'));		if ( $signup->active == 0 && $signup->user_email == $user_email )			$errors->add('user_email_used', __('username and email used'));	}	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE user_email = %s", $user_email) );	if ( $signup != null ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE user_email = %s", $user_email) );		else			$errors->add('user_email', __('That email address has already been used. Please check your inbox for an activation email. It will become available in a couple of days if you do nothing.'));	}	$result = array('user_name' => $user_name, 'orig_username' => $orig_username, 'user_email' => $user_email, 'errors' => $errors);	return apply_filters('wpmu_validate_user_signup', $result);}function wpmu_validate_blog_signup($blogname, $blog_title, $user = '') {	global $wpdb, $domain, $base, $current_site;	$blog_title = strip_tags( $blog_title );	$blog_title = substr( $blog_title, 0, 50 );	$errors = new WP_Error();	$illegal_names = get_site_option( 'illegal_names' );	if ( $illegal_names == false ) {		$illegal_names = array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator' );		add_site_option( 'illegal_names', $illegal_names );	}	// On sub dir installs, Some names are so illegal, only a filter can spring them from jail	if (! is_subdomain_install() )		$illegal_names = array_merge($illegal_names, apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) ) );	if ( empty( $blogname ) )		$errors->add('blogname', __('Please enter a site name'));	$maybe = array();	preg_match( '/[a-z0-9]+/', $blogname, $maybe );	if ( $blogname != $maybe[0] )		$errors->add('blogname', __('Only lowercase letters and numbers allowed'));	if ( in_array( $blogname, $illegal_names ) == true )		$errors->add('blogname',  __('That name is not allowed'));	if ( strlen( $blogname ) < 4 && !is_super_admin() )		$errors->add('blogname',  __('Site name must be at least 4 characters'));	if ( strpos( ' ' . $blogname, '_' ) != false )		$errors->add( 'blogname', __( 'Sorry, site names may not contain the character &#8220;_&#8221;!' ) );	// do not allow users to create a blog that conflicts with a page on the main blog.	if ( !is_subdomain_install() && $wpdb->get_var( $wpdb->prepare( "SELECT post_name FROM " . $wpdb->get_blog_prefix( $current_site->blog_id ) . "posts WHERE post_type = 'page' AND post_name = %s", $blogname ) ) )		$errors->add( 'blogname', __( 'Sorry, you may not use that site name.' ) );	// all numeric?	$match = array();	preg_match( '/[0-9]*/', $blogname, $match );	if ( $match[0] == $blogname )		$errors->add('blogname', __('Sorry, site names must have letters too!'));	$blogname = apply_filters( 'newblogname', $blogname );	$blog_title = stripslashes(  $blog_title );	if ( empty( $blog_title ) )		$errors->add('blog_title', __('Please enter a site title'));	// Check if the domain/path has been used already.	if ( is_subdomain_install() ) {		$mydomain = $blogname . '.' . preg_replace( '|^www\.|', '', $domain );		$path = $base;	} else {		$mydomain = "$domain";		$path = $base.$blogname.'/';	}	if ( domain_exists($mydomain, $path) )		$errors->add('blogname', __('Sorry, that site already exists!'));	if ( username_exists( $blogname ) ) {		if ( is_object( $user ) == false || ( is_object($user) && ( $user->user_login != $blogname ) ) )			$errors->add( 'blogname', __( 'Sorry, that site is reserved!' ) );	}	// Has someone already signed up for this domain?	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) ); // TODO: Check email too?	if ( ! empty($signup) ) {		$diff = current_time( 'timestamp', true ) - mysql2date('U', $signup->registered);		// If registered more than two days ago, cancel registration and let this signup go through.		if ( $diff > 172800 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->signups WHERE domain = %s AND path = %s", $mydomain, $path) );		else			$errors->add('blogname', __('That site is currently reserved but may be available in a couple days.'));	}	$result = array('domain' => $mydomain, 'path' => $path, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors);	return apply_filters('wpmu_validate_blog_signup', $result);}// Record signup information for future activation. wpmu_validate_signup() should be run// on the inputs before calling wpmu_signup().function wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta = '') {	global $wpdb;	$key = substr( md5( time() . rand() . $domain ), 0, 16 );	$meta = serialize($meta);	$domain = $wpdb->escape($domain);	$path = $wpdb->escape($path);	$title = $wpdb->escape($title);	$wpdb->insert( $wpdb->signups, array(		'domain' => $domain,		'path' => $path,		'title' => $title,		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta);}function wpmu_signup_user($user, $user_email, $meta = '') {	global $wpdb;	// Format data	$user = preg_replace( '/\s+/', '', sanitize_user( $user, true ) );	$user_email = sanitize_email( $user_email );	$key = substr( md5( time() . rand() . $user_email ), 0, 16 );	$meta = serialize($meta);	$wpdb->insert( $wpdb->signups, array(		'domain' => '',		'path' => '',		'title' => '',		'user_login' => $user,		'user_email' => $user_email,		'registered' => current_time('mysql', true),		'activation_key' => $key,		'meta' => $meta	) );	wpmu_signup_user_notification($user, $user_email, $key, $meta);}// Notify user of signup success.function wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_signup_blog_notification', $domain, $path, $title, $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	if ( !is_subdomain_install() || $current_site->id != 1 )		$activate_url = network_site_url("wp-activate.php?key=$key");	else		$activate_url = "http://{$domain}{$path}wp-activate.php?key=$key"; // @todo use *_url() API	$activate_url = esc_url($activate_url);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_blog_notification_email', __( "To activate your blog, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\nAfter you activate, you can visit your site here:\n\n%s" ) ), $activate_url, esc_url( "http://{$domain}{$path}" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( apply_filters( 'wpmu_signup_blog_notification_subject', __( '[%1s] Activate %2s' ) ), $from_name, esc_url( 'http://' . $domain . $path ) );	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_signup_user_notification($user, $user_email, $key, $meta = '') {	if ( !apply_filters('wpmu_signup_user_notification', $user, $user_email, $key, $meta) )		return false;	// Send email with activation link.	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = sprintf( apply_filters( 'wpmu_signup_user_notification_email', __( "To activate your user, please click the following link:\n\n%s\n\nAfter you activate, you will receive *another email* with your login.\n\n" ) ), site_url( "wp-activate.php?key=$key" ), $key );	// TODO: Don't hard code activation link.	$subject = sprintf( __( apply_filters( 'wpmu_signup_user_notification_subject', '[%1s] Activate %2s' ) ), $from_name, $user);	wp_mail($user_email, $subject, $message, $message_headers);	return true;}function wpmu_activate_signup($key) {	global $wpdb, $current_site;	$signup = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->signups WHERE activation_key = %s", $key) );	if ( empty($signup) )		return new WP_Error('invalid_key', __('Invalid activation key.'));	if ( $signup->active )		return new WP_Error('already_active', __('The site is already active.'), $signup);	$meta = unserialize($signup->meta);	$user_login = $wpdb->escape($signup->user_login);	$user_email = $wpdb->escape($signup->user_email);	$password = wp_generate_password();	$user_id = username_exists($user_login);	if ( ! $user_id )		$user_id = wpmu_create_user($user_login, $password, $user_email);	else		$user_already_exists = true;	if ( ! $user_id )		return new WP_Error('create_user', __('Could not create user'), $signup);	$now = current_time('mysql', true);	if ( empty($signup->domain) ) {		$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );		if ( isset( $user_already_exists ) )			return new WP_Error( 'user_already_exists', __( 'That username is already activated.' ), $signup);		wpmu_welcome_user_notification($user_id, $password, $meta);		$user_site = get_site_option( 'dashboard_blog', $current_site->blog_id );		if ( $user_site == false )			add_user_to_blog( '1', $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( $user_site, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		add_new_user_to_blog( $user_id, $user_email, $meta );		do_action('wpmu_activate_user', $user_id, $password, $meta);		return array('user_id' => $user_id, 'password' => $password, 'meta' => $meta);	}	$blog_id = wpmu_create_blog( $signup->domain, $signup->path, $signup->title, $user_id, $meta, $wpdb->siteid );	// TODO: What to do if we create a user but cannot create a blog?	if ( is_wp_error($blog_id) ) {		// If blog is taken, that means a previous attempt to activate this blog failed in between creating the blog and		// setting the activation flag.  Let's just set the active flag and instruct the user to reset their password.		if ( 'blog_taken' == $blog_id->get_error_code() ) {			$blog_id->add_data( $signup );			$wpdb->update( $wpdb->signups, array( 'active' => 1, 'activated' => $now ), array( 'activation_key' => $key ) );		}		return $blog_id;	}	$wpdb->update( $wpdb->signups, array('active' => 1, 'activated' => $now), array('activation_key' => $key) );	wpmu_welcome_notification($blog_id, $user_id, $password, $signup->title, $meta);	do_action('wpmu_activate_blog', $blog_id, $user_id, $password, $signup->title, $meta);	return array('blog_id' => $blog_id, 'user_id' => $user_id, 'password' => $password, 'title' => $signup->title, 'meta' => $meta);}function wpmu_create_user( $user_name, $password, $email) {	$user_name = preg_replace( '/\s+/', '', sanitize_user( $user_name, true ) );	$user_id = wp_create_user( $user_name, $password, $email );	if ( is_wp_error($user_id) )		return false;	// Newly created users have no roles or caps until they are added to a blog.	delete_user_option( $user_id, 'capabilities' );	delete_user_option( $user_id, 'user_level' );	do_action( 'wpmu_new_user', $user_id );	return $user_id;}function wpmu_create_blog($domain, $path, $title, $user_id, $meta = '', $site_id = 1) {	$domain = preg_replace( '/\s+/', '', sanitize_user( $domain, true ) );	if ( is_subdomain_install() )		$domain = str_replace( '@', '', $domain );	$title = strip_tags( $title );	$user_id = (int) $user_id;	if ( empty($path) )		$path = '/';	// Check if the domain has been used already. We should return an error message.	if ( domain_exists($domain, $path, $site_id) )		return new WP_Error('blog_taken', __('Site already exists.'));	if ( !defined('WP_INSTALLING') )		define( 'WP_INSTALLING', true );	if ( ! $blog_id = insert_blog($domain, $path, $site_id) )		return new WP_Error('insert_blog', __('Could not create site.'));	switch_to_blog($blog_id);	install_blog($blog_id, $title);	wp_install_defaults($user_id);	add_user_to_blog($blog_id, $user_id, 'administrator');	if ( is_array($meta) ) foreach ($meta as $key => $value) {		if ( $key == 'public' || $key == 'archived' || $key == 'mature' || $key == 'spam' || $key == 'deleted' || $key == 'lang_id' )			update_blog_status( $blog_id, $key, $value );		else			update_option( $key, $value );	}	add_option( 'WPLANG', get_site_option( 'WPLANG' ) );	update_option( 'blog_public', (int)$meta['public'] );	if ( !is_super_admin() && get_user_meta( $user_id, 'primary_blog', true ) == get_site_option( 'dashboard_blog', 1 ) )		update_user_meta( $user_id, 'primary_blog', $blog_id );	restore_current_blog();	do_action( 'wpmu_new_blog', $blog_id, $user_id, $domain, $path, $site_id, $meta );	return $blog_id;}function newblog_notify_siteadmin( $blog_id, $deprecated = '' ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$options_site_url = esc_url(network_admin_url('ms-options.php'));	switch_to_blog( $blog_id );	$blogname = get_option( 'blogname' );	$siteurl = site_url();	restore_current_blog();	$msg = sprintf( __( 'New Site: %1sURL: %2sRemote IP: %3sDisable these notifications: %4s' ), $blogname, $siteurl, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newblog_notify_siteadmin', $msg );	wp_mail( $email, sprintf( __( 'New Site Registration: %s' ), $siteurl ), $msg );	return true;}function newuser_notify_siteadmin( $user_id ) {	if ( get_site_option( 'registrationnotification' ) != 'yes' )		return false;	$email = get_site_option( 'admin_email' );	if ( is_email($email) == false )		return false;	$user = new WP_User($user_id);	$options_site_url = esc_url(network_admin_url('ms-options.php'));	$msg = sprintf(__('New User: %1sRemote IP: %2sDisable these notifications: %3s'), $user->user_login, $_SERVER['REMOTE_ADDR'], $options_site_url);	$msg = apply_filters( 'newuser_notify_siteadmin', $msg );	wp_mail( $email, sprintf(__('New User Registration: %s'), $user->user_login), $msg );	return true;}function domain_exists($domain, $path, $site_id = 1) {	global $wpdb;	return $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s AND site_id = %d", $domain, $path, $site_id) );}function insert_blog($domain, $path, $site_id) {	global $wpdb;	$path = trailingslashit($path);	$site_id = (int) $site_id;	$result = $wpdb->insert( $wpdb->blogs, array('site_id' => $site_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time('mysql')) );	if ( ! $result )		return false;	refresh_blog_details($wpdb->insert_id);	return $wpdb->insert_id;}// Install an empty blog.  wpdb should already be switched.function install_blog($blog_id, $blog_title = '') {	global $wpdb, $table_prefix, $wp_roles;	$wpdb->suppress_errors();	// Cast for security	$blog_id = (int) $blog_id;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	if ( $wpdb->get_results("SELECT ID FROM $wpdb->posts") )		die(__('<h1>Already Installed</h1><p>You appear to have already installed WordPress. To reinstall please clear your old database tables first.</p>') . '</body></html>');	$wpdb->suppress_errors(false);	$url = get_blogaddress_by_id($blog_id);	// Set everything up	make_db_current_silent();	populate_options();	populate_roles();	$wp_roles->_init();	// fix url.	update_option('siteurl', $url);	update_option('home', $url);	update_option('fileupload_url', $url . "files" );	update_option('upload_path', "wp-content/blogs.dir/" . $blog_id . "/files");	update_option('blogname', stripslashes( $blog_title ) );	update_option('admin_email', '');	$wpdb->update( $wpdb->options, array('option_value' => ''), array('option_name' => 'admin_email') );	// remove all perms	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'user_level') );	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE meta_key = %s", $table_prefix.'capabilities') );	$wpdb->suppress_errors( false );}// Deprecated, use wp_install_defaults()// should be switched already as $blog_id is ignored.function install_blog_defaults($blog_id, $user_id) {	global $wpdb;	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	$wpdb->suppress_errors();	wp_install_defaults($user_id);	$wpdb->suppress_errors( false );}function wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_notification', $blog_id, $user_id, $password, $title, $meta) )		return false;	$welcome_email = stripslashes( get_site_option( 'welcome_email' ) );	if ( $welcome_email == false )		$welcome_email = stripslashes( __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' ) );	$url = get_blogaddress_by_id($blog_id);	$user = new WP_User($user_id);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'BLOG_TITLE', $title, $welcome_email );	$welcome_email = str_replace( 'BLOG_URL', $url, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = apply_filters( 'update_welcome_email', $welcome_email, $blog_id, $user_id, $password, $title, $meta);	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_subject', sprintf(__('New %1$s Site: %2$s'), $current_site->site_name, stripslashes( $title ) ) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function wpmu_welcome_user_notification($user_id, $password, $meta = '') {	global $current_site;	if ( !apply_filters('wpmu_welcome_user_notification', $user_id, $password, $meta) )		return false;	$welcome_email = get_site_option( 'welcome_user_email' );	$user = new WP_User($user_id);	$welcome_email = apply_filters( 'update_welcome_user_email', $welcome_email, $user_id, $password, $meta);	$welcome_email = str_replace( 'SITE_NAME', $current_site->site_name, $welcome_email );	$welcome_email = str_replace( 'USERNAME', $user->user_login, $welcome_email );	$welcome_email = str_replace( 'PASSWORD', $password, $welcome_email );	$welcome_email = str_replace( 'LOGINLINK', wp_login_url(), $welcome_email );	$admin_email = get_site_option( 'admin_email' );	if ( $admin_email == '' )		$admin_email = 'support@' . $_SERVER['SERVER_NAME'];	$from_name = get_site_option( 'site_name' ) == '' ? 'WordPress' : esc_html( get_site_option( 'site_name' ) );	$message_headers = "From: \"{$from_name}\" <{$admin_email}>\n" . "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	$message = $welcome_email;	if ( empty( $current_site->site_name ) )		$current_site->site_name = 'WordPress MU';	$subject = apply_filters( 'update_welcome_user_subject', sprintf(__('New %1$s User: %2$s'), $current_site->site_name, $user->user_login) );	wp_mail($user->user_email, $subject, $message, $message_headers);	return true;}function get_current_site() {	global $current_site;	return $current_site;}function get_user_id_from_string( $string ) {	$user_id = 0;	if ( is_email( $string ) ) {		$user = get_user_by('email', $string);		if ( $user )			$user_id = $user->ID;	} elseif ( is_numeric( $string ) ) {		$user_id = $string;	} else {		$user = get_user_by('login', $string);		if ( $user )			$user_id = $user->ID;	}	return $user_id;}function get_most_recent_post_of_user( $user_id ) {	global $wpdb;	$user_blogs = get_blogs_of_user( (int) $user_id );	$most_recent_post = array();	// Walk through each blog and get the most recent post	// published by $user_id	foreach ( (array) $user_blogs as $blog ) {		$recent_post = $wpdb->get_row( $wpdb->prepare("SELECT ID, post_date_gmt FROM {$wpdb->base_prefix}{$blog->userblog_id}_posts WHERE post_author = %d AND post_type = 'post' AND post_status = 'publish' ORDER BY post_date_gmt DESC LIMIT 1", $user_id ), ARRAY_A);		// Make sure we found a post		if ( isset($recent_post['ID']) ) {			$post_gmt_ts = strtotime($recent_post['post_date_gmt']);			// If this is the first post checked or if this post is			// newer than the current recent post, make it the new			// most recent post.			if ( !isset($most_recent_post['post_gmt_ts']) || ( $post_gmt_ts > $most_recent_post['post_gmt_ts'] ) ) {				$most_recent_post = array(					'blog_id'		=> $blog->userblog_id,					'post_id'		=> $recent_post['ID'],					'post_date_gmt'	=> $recent_post['post_date_gmt'],					'post_gmt_ts'	=> $post_gmt_ts				);			}		}	}	return $most_recent_post;}/* Misc functions */function get_dirsize( $directory ) {	$dirsize = get_transient( 'dirsize_cache' );	if ( is_array( $dirsize ) && isset( $dirsize[ $directory ][ 'size' ] ) )		return $dirsize[ $directory ][ 'size' ];	if ( false == is_array( $dirsize ) )		$dirsize = array();	$dirsize[ $directory ][ 'size' ] = recurse_dirsize( $directory );	set_transient( 'dirsize_cache', $dirsize, 3600 );	return $dirsize[ $directory ][ 'size' ];}function recurse_dirsize( $directory ) {	$size = 0;	if ( substr( $directory, -1 ) == '/' )		$directory = substr($directory,0,-1);	if ( !file_exists($directory) || !is_dir( $directory ) || !is_readable( $directory ) )		return false;	if ($handle = opendir($directory)) {		while(($file = readdir($handle)) !== false) {			$path = $directory.'/'.$file;			if ($file != '.' && $file != '..') {				if (is_file($path)) {					$size += filesize($path);				} elseif (is_dir($path)) {					$handlesize = recurse_dirsize($path);					if ($handlesize > 0)						$size += $handlesize;				}			}		}		closedir($handle);	}	return $size;}function upload_is_user_over_quota( $echo = true ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$spaceAllowed = get_space_allowed();	if ( empty( $spaceAllowed ) || !is_numeric( $spaceAllowed ) )		$spaceAllowed = 10;	// Default space allowed is 10 MB	$dirName = BLOGUPLOADDIR;	$size = get_dirsize($dirName) / 1024 / 1024;	if ( ($spaceAllowed-$size) < 0 ) {		if ( $echo )			_e( 'Sorry, you have used your space allocation. Please delete some files to upload more files.' ); // No space left		return true;	} else {		return false;	}}function check_upload_mimes( $mimes ) {	$site_exts = explode( ' ', get_site_option( 'upload_filetypes' ) );	foreach ( $site_exts as $ext ) {		foreach ( $mimes as $ext_pattern => $mime ) {			if ( $ext != '' && strpos( $ext_pattern, $ext ) !== false )				$site_mimes[$ext_pattern] = $mime;		}	}	return $site_mimes;}function update_posts_count( $deprecated = '' ) {	global $wpdb;	update_option( 'post_count', (int) $wpdb->get_var( "SELECT COUNT(ID) FROM {$wpdb->posts} WHERE post_status = 'publish' and post_type = 'post'" ) );}function wpmu_log_new_registrations( $blog_id, $user_id ) {	global $wpdb;	$user = new WP_User( (int) $user_id );	$wpdb->insert( $wpdb->registration_log, array('email' => $user->user_email, 'IP' => preg_replace( '/[^0-9., ]/', '',$_SERVER['REMOTE_ADDR'] ), 'blog_id' => $blog_id, 'date_registered' => current_time('mysql')) );}function fix_import_form_size( $size ) {	if ( upload_is_user_over_quota( false ) == true )		return 0;	$spaceAllowed = 1024 * 1024 * get_space_allowed();	$dirName = BLOGUPLOADDIR;	$dirsize = get_dirsize($dirName) ;	if ( $size > $spaceAllowed - $dirsize )		return $spaceAllowed - $dirsize; // remaining space	else		return $size; // default}/** * Maintains a canonical list of terms by syncing terms created for each blog with the global terms table. * * @since 3.0.0 * * @see term_id_filter * * @param int $term_id An ID for a term on the current blog. * @return int An ID from the global terms table mapped from $term_id. */function global_terms( $term_id, $deprecated = '' ) {	global $wpdb;	static $global_terms_recurse = null;	if ( !global_terms_enabled() )		return $term_id;	// prevent a race condition	$recurse_start = false;	if ( $global_terms_recurse === null ) {		$recurse_start = true;		$global_terms_recurse = 1;	} elseif ( 10 < $global_terms_recurse++ ) {		return $term_id;	}	$term_id = intval( $term_id );	$c = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->terms WHERE term_id = %d", $term_id ) );	$global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE category_nicename = %s", $c->slug ) );	if ( $global_id == null ) {		$used_global_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM $wpdb->sitecategories WHERE cat_ID = %d", $c->term_id ) );		if ( null == $used_global_id ) {			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $term_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;			if ( empty( $global_id ) )				return $term_id;		} else {			$max_global_id = $wpdb->get_var( "SELECT MAX(cat_ID) FROM $wpdb->sitecategories" );			$max_local_id = $wpdb->get_var( "SELECT MAX(term_id) FROM $wpdb->terms" );			$new_global_id = max( $max_global_id, $max_local_id ) + mt_rand( 100, 400 );			$wpdb->insert( $wpdb->sitecategories, array( 'cat_ID' => $new_global_id, 'cat_name' => $c->name, 'category_nicename' => $c->slug ) );			$global_id = $wpdb->insert_id;		}	} elseif ( $global_id != $term_id ) {		$local_id = $wpdb->get_row( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE term_id = %d", $global_id ) );		if ( null != $local_id )			$local_id = global_terms( $local_id );			if ( 10 < $global_terms_recurse )				$global_id = $term_id;	}	if ( $global_id != $term_id ) {		if ( get_option( 'default_category' ) == $term_id )			update_option( 'default_category', $global_id );		$wpdb->update( $wpdb->terms, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('term_id' => $global_id), array('term_id' => $term_id) );		$wpdb->update( $wpdb->term_taxonomy, array('parent' => $global_id), array('parent' => $term_id) );		clean_term_cache($term_id);	}	if( $recurse_start )		$global_terms_recurse = null;	return $global_id;}function redirect_this_site( $deprecated = '' ) {	global $current_site;	return array( $current_site->domain );}function upload_is_file_too_big( $upload ) {	if ( is_array( $upload ) == false || defined( 'WP_IMPORTING' ) )		return $upload;	if ( strlen( $upload['bits'] )  > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		return sprintf( __( 'This file is too big. Files must be less than %d KB in size.' ) . '<br />', get_site_option( 'fileupload_maxk', 1500 ));	return $upload;}function wordpressmu_wp_mail_from( $email ) {	if ( strpos( $email, 'wordpress@' ) !== false )		$email = get_option( 'admin_email' );	return $email;}function signup_nonce_fields() {	$id = mt_rand();	echo "<input type='hidden' name='signup_form_id' value='{$id}' />";	wp_nonce_field('signup_form_' . $id, '_signup_form', false);}function signup_nonce_check( $result ) {	if ( !strpos( $_SERVER[ 'PHP_SELF' ], 'wp-signup.php' ) )		return $result;	if ( wp_create_nonce('signup_form_' . $_POST[ 'signup_form_id' ]) != $_POST['_signup_form'] )		wp_die( __('Please try again!') );	return $result;}function maybe_redirect_404() {	global $current_site;	if ( is_main_site() && is_404() && defined( 'NOBLOGREDIRECT' ) && ( $destination = apply_filters( 'blog_redirect_404', NOBLOGREDIRECT ) ) ) {		if ( $destination == '%siteurl%' )			$destination = network_home_url();		wp_redirect( $destination );		exit();	}}function maybe_add_existing_user_to_blog() {	if ( false === strpos( $_SERVER[ 'REQUEST_URI' ], '/newbloguser/' ) )		return false;	$parts = explode( '/', $_SERVER[ 'REQUEST_URI' ] );	$key = array_pop( $parts );	if ( $key == '' )		$key = array_pop( $parts );	$details = get_option( 'new_user_' . $key );	if ( !empty( $details ) )		delete_option( 'new_user_' . $key );	if ( empty( $details ) || is_wp_error( add_existing_user_to_blog( $details ) ) )		wp_die( sprintf(__('An error occurred adding you to this site. Back to the <a href="%s">homepage</a>.'), site_url() ) );	wp_die( sprintf(__('You have been added to this site. Please visit the <a href="%s">homepage</a> or <a href="%s">login</a> using your username and password.'), site_url(), admin_url() ), __('Success') );}function add_existing_user_to_blog( $details = false ) {	if ( is_array( $details ) ) {		$result = add_user_to_blog( '', $details[ 'user_id' ], $details[ 'role' ] );		do_action( 'added_existing_user', $details[ 'user_id' ], $result );	}	return $result;}function add_new_user_to_blog( $user_id, $email, $meta ) {	global $current_site;	if ( $meta[ 'add_to_blog' ] ) {		$blog_id = $meta[ 'add_to_blog' ];		$role = $meta[ 'new_role' ];		remove_user_from_blog($user_id, $current_site->blogid); // remove user from main blog.		add_user_to_blog( $blog_id, $user_id, $role );		update_user_meta( $user_id, 'primary_blog', $blog_id );	}}function fix_phpmailer_messageid( $phpmailer ) {	global $current_site;	$phpmailer->Hostname = $current_site->domain;}function is_user_spammy( $username = 0 ) {	if ( $username == 0 ) {		global $current_user;		$user_id = $current_user->ID;	} else {		$user_id = get_user_id_from_string( $username );	}	$u = new WP_User( $user_id );	if ( $u->spam == 1 )		return true;	return false;}function update_blog_public( $old_value, $value ) {	global $wpdb;	do_action('update_blog_public');	update_blog_status( $wpdb->blogid, 'public', (int) $value );}add_action('update_option_blog_public', 'update_blog_public', 10, 2);/* Redirect all hits to "dashboard" blog to wp-admin/ Dashboard. */function redirect_mu_dashboard() {	global $current_site, $current_blog;	$dashboard_blog = get_dashboard_blog();	if ( $current_blog->blog_id == $dashboard_blog->blog_id && $dashboard_blog->blog_id != $current_site->blog_id ) {		$protocol = ( is_ssl() ? 'https://' : 'http://' );		wp_redirect( $protocol . $dashboard_blog->domain . trailingslashit( $dashboard_blog->path ) . 'wp-admin/' );		die();	}}add_action( 'template_redirect', 'redirect_mu_dashboard' );function get_dashboard_blog() {	if ( $blog = get_site_option( 'dashboard_blog' ) )		return get_blog_details( $blog );	return get_blog_details( $GLOBALS['current_site']->blog_id );}function is_user_option_local( $key, $user_id = 0, $blog_id = 0 ) {	global $current_user, $wpdb;	if ( $user_id == 0 )		$user_id = $current_user->ID;	if ( $blog_id == 0 )		$blog_id = $wpdb->blogid;	$local_key = $wpdb->base_prefix . $blog_id . '_' . $key;	if ( isset( $current_user->$local_key ) )		return true;	return false;}function users_can_register_signup_filter() {	$registration = get_site_option('registration');	if ( $registration == 'all' || $registration == 'user' )		return true;	return false;}add_filter('option_users_can_register', 'users_can_register_signup_filter');function welcome_user_msg_filter( $text ) {	if ( !$text ) {		return __( 'Dear User,Your new account is set up.You can log in with the following information:Username: USERNAMEPassword: PASSWORDLOGINLINKThanks!--The Team @ SITE_NAME' );	}	return $text;}add_filter( 'site_option_welcome_user_email', 'welcome_user_msg_filter' );/** * Whether to force SSL on content. * * @since 2.8.5 * * @param string|bool $force * @return bool True if forced, false if not forced. */function force_ssl_content( $force = '' ) {	static $forced_content;	if ( '' != $force ) {		$old_forced = $forced_content;		$forced_content = $force;		return $old_forced;	}	return $forced_content;}/** * Formats an String URL to use HTTPS if HTTP is found. * Useful as a filter. * * @since 2.8.5 **/function filter_SSL( $url ) {	if ( !is_string( $url ) )		return get_bloginfo( 'url' ); //return home blog url with proper scheme	$arrURL = parse_url( $url );	if ( force_ssl_content() && is_ssl() ) {		if ( 'http' === $arrURL['scheme'] && 'https' !== $arrURL['scheme'] )			$url = str_replace( $arrURL['scheme'], 'https', $url );	}	return $url;}?>
<?php/** * WordPress Administration Bootstrap * * @package WordPress * @subpackage Administration *//** * In WordPress Administration Panels * * @since unknown */if ( !defined('WP_ADMIN') )	define('WP_ADMIN', TRUE);if ( isset($_GET['import']) && !defined('WP_LOAD_IMPORTERS') )	define('WP_LOAD_IMPORTERS', true);require_once(dirname(dirname(__FILE__)) . '/wp-load.php');if ( get_option('db_upgraded') ) {	$wp_rewrite->flush_rules();	update_option( 'db_upgraded',  false );	/**	 * Runs on the next page load after successful upgrade	 *	 * @since 2.8	 */	do_action('after_db_upgrade');} elseif ( get_option('db_version') != $wp_db_version ) {	if ( !is_multisite() ) {		wp_redirect(admin_url('upgrade.php?_wp_http_referer=' . urlencode(stripslashes($_SERVER['REQUEST_URI']))));		exit;	} elseif ( apply_filters( 'do_mu_upgrade', true ) ) {		/**		 * On really small MU installs run the upgrader every time,		 * else run it less often to reduce load.		 *		 * @since 2.8.4b		 */		$c = get_blog_count();		if ( $c <= 50 || ( $c > 50 && mt_rand( 0, (int)( $c / 50 ) ) == 1 ) ) {			require_once( ABSPATH . WPINC . '/http.php' );			$response = wp_remote_get( admin_url( 'upgrade.php?step=1' ), array( 'timeout' => 120, 'httpversion' => '1.1' ) );			do_action( 'after_mu_upgrade', $response );			unset($response);		}		unset($c);	}}require_once(ABSPATH . 'wp-admin/includes/admin.php');auth_redirect();nocache_headers();update_category_cache();// Schedule trash collectionif ( !wp_next_scheduled('wp_scheduled_delete') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'daily', 'wp_scheduled_delete');set_screen_options();$date_format = get_option('date_format');$time_format = get_option('time_format');wp_reset_vars(array('profile', 'redirect', 'redirect_url', 'a', 'text', 'trackback', 'pingback'));wp_enqueue_script( 'common' );wp_enqueue_script( 'jquery-color' );$editing = false;if ( isset($_GET['page']) ) {	$plugin_page = stripslashes($_GET['page']);	$plugin_page = plugin_basename($plugin_page);}if ( isset($_GET['post_type']) )	$typenow = sanitize_key($_GET['post_type']);else	$typenow = '';if ( isset($_GET['taxonomy']) )	$taxnow = sanitize_key($_GET['taxonomy']);else	$taxnow = '';require(ABSPATH . 'wp-admin/menu.php');if ( current_user_can( 'manage_options' ) )	@ini_set( 'memory_limit', apply_filters( 'admin_memory_limit', '256M' ) );do_action('admin_init');if ( isset($plugin_page) ) {	if ( !empty($typenow) )		$the_parent = $pagenow . '?post_type=' . $typenow;	else		$the_parent = $pagenow;	if ( ! $page_hook = get_plugin_page_hook($plugin_page, $the_parent) ) {		$page_hook = get_plugin_page_hook($plugin_page, $plugin_page);		// backwards compatibility for plugins using add_management_page		if ( empty( $page_hook ) && 'edit.php' == $pagenow && '' != get_plugin_page_hook($plugin_page, 'tools.php') ) {			// There could be plugin specific params on the URL, so we need the whole query string			if ( !empty($_SERVER[ 'QUERY_STRING' ]) )				$query_string = $_SERVER[ 'QUERY_STRING' ];			else				$query_string = 'page=' . $plugin_page;			wp_redirect( 'tools.php?' . $query_string );			exit;		}	}	unset($the_parent);}$hook_suffix = '';if ( isset($page_hook) )	$hook_suffix = $page_hook;else if ( isset($plugin_page) )	$hook_suffix = $plugin_page;else if ( isset($pagenow) )	$hook_suffix = $pagenow;set_current_screen();// Handle plugin admin pages.if ( isset($plugin_page) ) {	if ( $page_hook ) {		do_action('load-' . $page_hook);		if (! isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		do_action($page_hook);	} else {		if ( validate_file($plugin_page) )			wp_die(__('Invalid plugin page'));		if ( !( file_exists(WP_PLUGIN_DIR . "/$plugin_page") && is_file(WP_PLUGIN_DIR . "/$plugin_page") ) && !( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") && is_file(WPMU_PLUGIN_DIR . "/$plugin_page") ) )			wp_die(sprintf(__('Cannot load %s.'), htmlentities($plugin_page)));		do_action('load-' . $plugin_page);		if ( !isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		if ( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") )			include(WPMU_PLUGIN_DIR . "/$plugin_page");		else			include(ABSPATH . PLUGINDIR . "/$plugin_page");	}	include(ABSPATH . 'wp-admin/admin-footer.php');	exit();} else if (isset($_GET['import'])) {	$importer = $_GET['import'];	if ( ! current_user_can('import') )		wp_die(__('You are not allowed to import.'));	if ( validate_file($importer) )		wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );	// Allow plugins to define importers as well	if ( !isset($wp_importers) || !isset($wp_importers[$importer]) || ! is_callable($wp_importers[$importer][2])) {		if (! file_exists(ABSPATH . "wp-admin/import/$importer.php"))			wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );		include(ABSPATH . "wp-admin/import/$importer.php");	}	$parent_file = 'tools.php';	$submenu_file = 'import.php';	$title = __('Import');	if (! isset($_GET['noheader']))		require_once(ABSPATH . 'wp-admin/admin-header.php');	require_once(ABSPATH . 'wp-admin/includes/upgrade.php');	define('WP_IMPORTING', true);	if ( is_multisite() )		kses_init_filters();  // Always filter imported data with kses.	call_user_func($wp_importers[$importer][2]);	include(ABSPATH . 'wp-admin/admin-footer.php');	// Make sure rules are flushed	global $wp_rewrite;	$wp_rewrite->flush_rules(false);	exit();} else {	do_action("load-$pagenow");}if ( !empty($_REQUEST['action']) )	do_action('admin_action_' . $_REQUEST['action']);?>
<?php/** * WordPress DB Class * * Original code from {@link http://php.justinvincent.com Justin Vincent (justin@visunet.ie)} * * @package WordPress * @subpackage Database * @since 0.71 *//** * @since 0.71 */define( 'EZSQL_VERSION', 'WP1.25' );/** * @since 0.71 */define( 'OBJECT', 'OBJECT', true );/** * @since 2.5.0 */define( 'OBJECT_K', 'OBJECT_K' );/** * @since 0.71 */define( 'ARRAY_A', 'ARRAY_A' );/** * @since 0.71 */define( 'ARRAY_N', 'ARRAY_N' );/** * WordPress Database Access Abstraction Object * * It is possible to replace this class with your own * by setting the $wpdb global variable in wp-content/db.php * file with your class. You can name it wpdb also, since * this file will not be included, if the other file is * available. * * @link http://codex.wordpress.org/Function_Reference/wpdb_Class * * @package WordPress * @subpackage Database * @since 0.71 * @final */class wpdb {	/**	 * Whether to show SQL/DB errors	 *	 * @since 0.71	 * @access private	 * @var bool	 */	var $show_errors = false;	/**	 * Whether to suppress errors during the DB bootstrapping.	 *	 * @access private	 * @since 2.5	 * @var bool	 */	var $suppress_errors = false;	/**	 * The last error during query.	 *	 * @see get_last_error()	 * @since 2.5	 * @access private	 * @var string	 */	var $last_error = '';	/**	 * Amount of queries made	 *	 * @since 1.2.0	 * @access private	 * @var int	 */	var $num_queries = 0;	/**	 * Count of rows returned by previous query	 *	 * @since 1.2	 * @access private	 * @var int	 */	var $num_rows = 0;	/**	 * Count of affected rows by previous query	 *	 * @since 0.71	 * @access private	 * @var int	 */	var $rows_affected = 0;	/**	 * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).	 *	 * @since 0.71	 * @access public	 * @var int	 */	var $insert_id = 0;	/**	 * Saved result of the last query made	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $last_query;	/**	 * Results of the last query made	 *	 * @since 1.0.0	 * @access private	 * @var array|null	 */	var $last_result;	/**	 * Saved info on the table column	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $col_info;	/**	 * Saved queries that were executed	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queries;	/**	 * WordPress table prefix	 *	 * You can set this to have multiple WordPress installations	 * in a single database. The second reason is for possible	 * security precautions.	 *	 * @since 0.71	 * @access private	 * @var string	 */	var $prefix = '';	/**	 * Whether the database queries are ready to start executing.	 *	 * @since 2.5.0	 * @access private	 * @var bool	 */	var $ready = false;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $blogid = 0;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $siteid = 0;	/**	 * List of WordPress per-blog tables	 *	 * @since 2.5.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $tables = array( 'posts', 'comments', 'links', 'options', 'postmeta',		'terms', 'term_taxonomy', 'term_relationships', 'commentmeta' );	/**	 * List of deprecated WordPress tables	 *	 * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539	 *	 * @since 2.9.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $old_tables = array( 'categories', 'post2cat', 'link2cat' );	/**	 * List of WordPress global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $global_tables = array( 'users', 'usermeta' );	/**	 * List of Multisite global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $ms_global_tables = array( 'blogs', 'signups', 'site', 'sitemeta',		'sitecategories', 'registration_log', 'blog_versions' );	/**	 * WordPress Comments table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $comments;	/**	 * WordPress Comment Metadata table	 *	 * @since 2.9.0	 * @access public	 * @var string	 */	var $commentmeta;	/**	 * WordPress Links table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $links;	/**	 * WordPress Options table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $options;	/**	 * WordPress Post Metadata table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $postmeta;	/**	 * WordPress Posts table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $posts;	/**	 * WordPress Terms table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $terms;	/**	 * WordPress Term Relationships table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_relationships;	/**	 * WordPress Term Taxonomy table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_taxonomy;	/*	 * Global and Multisite tables	 */	/**	 * WordPress User Metadata table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $usermeta;	/**	 * WordPress Users table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $users;	/**	 * Multisite Blogs table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blogs;	/**	 * Multisite Blog Versions table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blog_versions;	/**	 * Multisite Registration Log table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $registration_log;	/**	 * Multisite Signups table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $signups;	/**	 * Multisite Sites table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $site;	/**	 * Multisite Sitewide Terms table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitecategories;	/**	 * Multisite Site Metadata table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitemeta;	/**	 * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.	 *	 * Keys are column names, values are format types: 'ID' => '%d'	 *	 * @since 2.8.0	 * @see wpdb:prepare()	 * @see wpdb:insert()	 * @see wpdb:update()	 * @see wp_set_wpdb_vars()	 * @access public	 * @var array	 */	var $field_types = array();	/**	 * Database table columns charset	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $charset;	/**	 * Database table columns collate	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $collate;	/**	 * Whether to use mysql_real_escape_string	 *	 * @since 2.8.0	 * @access public	 * @var bool	 */	var $real_escape = false;	/**	 * Database Username	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $dbuser;	/**	 * A textual description of the last query/get_row/get_var call	 *	 * @since unknown	 * @access public	 * @var string	 */	var $func_call;	/**	 * Connects to the database server and selects a database	 *	 * PHP4 compatibility layer for calling the PHP5 constructor.	 *	 * @uses wpdb::__construct() Passes parameters and returns result	 * @since 0.71	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function wpdb( $dbuser, $dbpassword, $dbname, $dbhost ) {		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB )			$this->db_connect();		return $this->__construct( $dbuser, $dbpassword, $dbname, $dbhost );	}	/**	 * Connects to the database server and selects a database	 *	 * PHP5 style constructor for compatibility with PHP5. Does	 * the actual setting up of the class properties and connection	 * to the database.	 *	 * @link http://core.trac.wordpress.org/ticket/3354	 * @since 2.0.8	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function __construct( $dbuser, $dbpassword, $dbname, $dbhost ) {		register_shutdown_function( array( &$this, '__destruct' ) );		if ( WP_DEBUG )			$this->show_errors();		if ( is_multisite() ) {			$this->charset = 'utf8';			if ( defined( 'DB_COLLATE' ) && DB_COLLATE )				$this->collate = DB_COLLATE;			else				$this->collate = 'utf8_general_ci';		} elseif ( defined( 'DB_COLLATE' ) ) {			$this->collate = DB_COLLATE;		}		if ( defined( 'DB_CHARSET' ) )			$this->charset = DB_CHARSET;		$this->dbuser = $dbuser;		$this->dbh = @mysql_connect( $dbhost, $dbuser, $dbpassword, true );		if ( !$this->dbh ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $dbhost ), 'db_connect_fail' );			return;		}		$this->ready = true;		if ( $this->has_cap( 'collation' ) && !empty( $this->charset ) ) {			if ( function_exists( 'mysql_set_charset' ) ) {				mysql_set_charset( $this->charset, $this->dbh );				$this->real_escape = true;			} else {				$query = $this->prepare( 'SET NAMES %s', $this->charset );				if ( ! empty( $this->collate ) )					$query .= $this->prepare( ' COLLATE %s', $this->collate );				$this->query( $query );			}		}		$this->select( $dbname, $this->dbh );	}	/**	 * PHP5 style destructor and will run when database object is destroyed.	 *	 * @see wpdb::__construct()	 * @since 2.0.8	 * @return bool true	 */	function __destruct() {		return true;	}	/**	 * Sets the table prefix for the WordPress tables.	 *	 * @since 2.5.0	 *	 * @param string $prefix Alphanumeric name for the new prefix.	 * @return string|WP_Error Old prefix or WP_Error on error	 */	function set_prefix( $prefix, $set_table_names = true ) {		if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )			return new WP_Error('invalid_db_prefix', /*WP_I18N_DB_BAD_PREFIX*/'Invalid database prefix'/*/WP_I18N_DB_BAD_PREFIX*/);		$old_prefix = is_multisite() ? '' : $prefix;		if ( isset( $this->base_prefix ) )			$old_prefix = $this->base_prefix;		$this->base_prefix = $prefix;		if ( $set_table_names ) {			foreach ( $this->tables( 'global' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			if ( is_multisite() && empty( $this->blogid ) )				return $old_prefix;			$this->prefix = $this->get_blog_prefix();			foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			foreach ( $this->tables( 'old' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;		}		return $old_prefix;	}	/**	 * Sets blog id.	 *	 * @since 3.0.0	 * @access public	 * @param int $blog_id	 * @param int $site_id Optional.	 * @return string previous blog id	 */	function set_blog_id( $blog_id, $site_id = 0 ) {		if ( ! empty( $site_id ) )			$this->siteid = $site_id;		$old_blog_id  = $this->blogid;		$this->blogid = $blog_id;		$this->prefix = $this->get_blog_prefix();		foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		foreach ( $this->tables( 'old' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		return $old_blog_id;	}	/**	 * Gets blog prefix.	 *	 * @uses is_multisite()	 * @since 3.0.0	 * @param int $blog_id Optional.	 * @return string Blog prefix.	 */	function get_blog_prefix( $blog_id = null ) {		if ( is_multisite() ) {			if ( null === $blog_id )				$blog_id = $this->blogid;			if ( defined( 'MULTISITE' ) && ( 0 == $blog_id || 1 == $blog_id ) )				return $this->base_prefix;			else				return $this->base_prefix . $blog_id . '_';		} else {			return $this->base_prefix;		}	}	/**	 * Returns an array of WordPress tables.	 *	 * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to	 * override the WordPress users and usersmeta tables that would otherwise	 * be determined by the prefix.	 *	 * The scope argument can take one of the following:	 *	 * 'all' - returns 'all' and 'global' tables. No old tables are returned.	 * 'blog' - returns the blog-level tables for the queried blog.	 * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.	 * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.	 * 'old' - returns tables which are deprecated.	 *	 * @since 3.0.0	 * @uses wpdb::$tables	 * @uses wpdb::$old_tables	 * @uses wpdb::$global_tables	 * @uses wpdb::$ms_global_tables	 * @uses is_multisite()	 *	 * @param string $scope Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.	 * @param bool $prefix Optional. Whether to include table prefixes. Default true. If blog	 * 	prefix is requested, then the custom users and usermeta tables will be mapped.	 * @param int $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.	 * @return array Table names. When a prefix is requested, the key is the unprefixed table name.	 */	function tables( $scope = 'all', $prefix = true, $blog_id = 0 ) {		switch ( $scope ) {			case 'all' :				$tables = array_merge( $this->global_tables, $this->tables );				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'blog' :				$tables = $this->tables;				break;			case 'global' :				$tables = $this->global_tables;				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'ms_global' :				$tables = $this->ms_global_tables;				break;			case 'old' :				$tables = $this->old_tables;				break;			default :				return array();				break;		}		if ( $prefix ) {			if ( ! $blog_id )				$blog_id = $this->blogid;			$blog_prefix = $this->get_blog_prefix( $blog_id );			$base_prefix = $this->base_prefix;			$global_tables = array_merge( $this->global_tables, $this->ms_global_tables );			foreach ( $tables as $k => $table ) {				if ( in_array( $table, $global_tables ) )					$tables[ $table ] = $base_prefix . $table;				else					$tables[ $table ] = $blog_prefix . $table;				unset( $tables[ $k ] );			}			if ( isset( $tables['users'] ) && defined( 'CUSTOM_USER_TABLE' ) )				$tables['users'] = CUSTOM_USER_TABLE;			if ( isset( $tables['usermeta'] ) && defined( 'CUSTOM_USER_META_TABLE' ) )				$tables['usermeta'] = CUSTOM_USER_META_TABLE;		}		return $tables;	}	/**	 * Selects a database using the current database connection.	 *	 * The database name will be changed based on the current database	 * connection. On failure, the execution will bail and display an DB error.	 *	 * @since 0.71	 *	 * @param string $db MySQL database name	 * @param resource $dbh Optional link identifier.	 * @return null Always null.	 */	function select( $db, $dbh = null) {		if ( is_null($dbh) ) 			$dbh = $this->dbh;		if ( !@mysql_select_db( $db, $dbh ) ) {			$this->ready = false;			$this->bail( sprintf( /*WP_I18N_DB_SELECT_DB*/'<h1>Can&#8217;t select database</h1><p>We were able to connect to the database server (which means your username and password is okay) but not able to select the <code>%1$s</code> database.</p><ul><li>Are you sure it exists?</li><li>Does the user <code>%2$s</code> have permission to use the <code>%1$s</code> database?</li><li>On some systems the name of your database is prefixed with your username, so it would be like <code>username_%1$s</code>. Could that be the problem?</li></ul><p>If you don\'t know how to set up a database you should <strong>contact your host</strong>. If all else fails you may find help at the <a href="http://wordpress.org/support/">WordPress Support Forums</a>.</p>'/*/WP_I18N_DB_SELECT_DB*/, $db, $this->dbuser ), 'db_select_fail' );			return;		}	}	/**	 * Weak escape, using addslashes()	 *	 * @see addslashes()	 * @since 2.8.0	 * @access private	 *	 * @param string $string	 * @return string	 */	function _weak_escape( $string ) {		return addslashes( $string );	}	/**	 * Real escape, using mysql_real_escape_string() or addslashes()	 *	 * @see mysql_real_escape_string()	 * @see addslashes()	 * @since 2.8	 * @access private	 *	 * @param  string $string to escape	 * @return string escaped	 */	function _real_escape( $string ) {		if ( $this->dbh && $this->real_escape )			return mysql_real_escape_string( $string, $this->dbh );		else			return addslashes( $string );	}	/**	 * Escape data. Works on arrays.	 *     * @uses wpdb::_escape()     * @uses wpdb::_real_escape()	 * @since  2.8	 * @access private	 *	 * @param  string|array $data	 * @return string|array escaped	 */	function _escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array($v) )					$data[$k] = $this->_escape( $v );				else					$data[$k] = $this->_real_escape( $v );			}		} else {			$data = $this->_real_escape( $data );		}		return $data;	}	/**	 * Escapes content for insertion into the database using addslashes(), for security.	 *	 * Works on arrays.	 *	 * @since 0.71	 * @param string|array $data to escape	 * @return string|array escaped as query safe string	 */	function escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array( $v ) )					$data[$k] = $this->escape( $v );				else					$data[$k] = $this->_weak_escape( $v );			}		} else {			$data = $this->_weak_escape( $data );		}		return $data;	}	/**	 * Escapes content by reference for insertion into the database, for security	 *	 * @uses wpdb::_real_escape()	 * @since 2.3.0	 * @param string $string to escape	 * @return void	 */	function escape_by_ref( &$string ) {		$string = $this->_real_escape( $string );	}	/**	 * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.	 *	 * The following directives can be used in the query format string:	 *   %d (decimal number)	 *   %s (string)	 *   %% (literal percentage sign - no argument needed)	 *	 * Both %d and %s are to be left unquoted in the query string and they need an argument passed for them.	 * Literals (%) as parts of the query must be properly written as %%.	 *	 * This function only supports a small subset of the sprintf syntax; it only supports %d (decimal number), %s (string).	 * Does not support sign, padding, alignment, width or precision specifiers.	 * Does not support argument numbering/swapping.	 *	 * May be called like {@link http://php.net/sprintf sprintf()} or like {@link http://php.net/vsprintf vsprintf()}.	 *	 * Both %d and %s should be left unquoted in the query string.	 *	 * <code>	 * wpdb::prepare( "SELECT * FROM `table` WHERE `column` = %s AND `field` = %d", 'foo', 1337 )	 * wpdb::prepare( "SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s", 'foo' );	 * </code>	 *	 * @link http://php.net/sprintf Description of syntax.	 * @since 2.3.0	 *	 * @param string $query Query statement with sprintf()-like placeholders	 * @param array|mixed $args The array of variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/vsprintf vsprintf()}, or the first variable to substitute into the query's placeholders if	 * 	being called like {@link http://php.net/sprintf sprintf()}.	 * @param mixed $args,... further variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/sprintf sprintf()}.	 * @return null|false|string Sanitized query string, null if there is no query, false if there is an error and string	 * 	if there was something to prepare	 */	function prepare( $query = null ) { // ( $query, *$args )		if ( is_null( $query ) )			return;		$args = func_get_args();		array_shift( $args );		// If args were passed as an array (as in vsprintf), move them up		if ( isset( $args[0] ) && is_array($args[0]) )			$args = $args[0];		$query = str_replace( "'%s'", '%s', $query ); // in case someone mistakenly already singlequoted it		$query = str_replace( '"%s"', '%s', $query ); // doublequote unquoting		$query = preg_replace( '|(?<!%)%s|', "'%s'", $query ); // quote the strings, avoiding escaped strings like %%s		array_walk( $args, array( &$this, 'escape_by_ref' ) );		return @vsprintf( $query, $args );	}	/**	 * Print SQL/DB error.	 *	 * @since 0.71	 * @global array $EZSQL_ERROR Stores error information of query and error string	 *	 * @param string $str The error to display	 * @return bool False if the showing of errors is disabled.	 */	function print_error( $str = '' ) {		global $EZSQL_ERROR;		if ( !$str )			$str = mysql_error( $this->dbh );		$EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str );		if ( $this->suppress_errors )			return false;		if ( $caller = $this->get_caller() )			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR_FULL*/'WordPress database error %1$s for query %2$s made by %3$s'/*/WP_I18N_DB_QUERY_ERROR_FULL*/, $str, $this->last_query, $caller );		else			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR*/'WordPress database error %1$s for query %2$s'/*/WP_I18N_DB_QUERY_ERROR*/, $str, $this->last_query );		if ( function_exists( 'error_log' )			&& ( $log_file = @ini_get( 'error_log' ) )			&& ( 'syslog' == $log_file || @is_writable( $log_file ) )			)			@error_log( $error_str );		// Are we showing errors?		if ( ! $this->show_errors )			return false;		// If there is an error then take note of it		if ( is_multisite() ) {			$msg = "WordPress database error: [$str]\n{$this->last_query}\n";			if ( defined( 'ERRORLOGFILE' ) )				error_log( $msg, 3, ERRORLOGFILE );			if ( defined( 'DIEONDBERROR' ) )				wp_die( $msg );		} else {			$str   = htmlspecialchars( $str, ENT_QUOTES );			$query = htmlspecialchars( $this->last_query, ENT_QUOTES );			print "<div id='error'>			<p class='wpdberror'><strong>WordPress database error:</strong> [$str]<br />			<code>$query</code></p>			</div>";		}	}	/**	 * Enables showing of database errors.	 *	 * This function should be used only to enable showing of errors.	 * wpdb::hide_errors() should be used instead for hiding of errors. However,	 * this function can be used to enable and disable showing of database	 * errors.	 *	 * @since 0.71	 * @see wpdb::hide_errors()	 *	 * @param bool $show Whether to show or hide errors	 * @return bool Old value for showing errors.	 */	function show_errors( $show = true ) {		$errors = $this->show_errors;		$this->show_errors = $show;		return $errors;	}	/**	 * Disables showing of database errors.	 *	 * By default database errors are not shown.	 *	 * @since 0.71	 * @see wpdb::show_errors()	 *	 * @return bool Whether showing of errors was active	 */	function hide_errors() {		$show = $this->show_errors;		$this->show_errors = false;		return $show;	}	/**	 * Whether to suppress database errors.	 *	 * By default database errors are suppressed, with a simple	 * call to this function they can be enabled.	 *	 * @since 2.5	 * @see wpdb::hide_errors()	 * @param bool $suppress Optional. New value. Defaults to true.	 * @return bool Old value	 */	function suppress_errors( $suppress = true ) {		$errors = $this->suppress_errors;		$this->suppress_errors = (bool) $suppress;		return $errors;	}	/**	 * Kill cached query results.	 *	 * @since 0.71	 * @return void	 */	function flush() {		$this->last_result = array();		$this->col_info    = null;		$this->last_query  = null;	}	function db_connect( $query = "SELECT" ) {		global $db_list, $global_db_list;		if ( ! is_array( $db_list ) )			return true;		if ( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {			$action = 'global';			$details = $global_db_list[ mt_rand( 0, count( $global_db_list ) -1 ) ];			$this->db_global = $details;		} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {			$action = 'write';			$details = $db_list[ 'write' ][ mt_rand( 0, count( $db_list[ 'write' ] ) -1 ) ];			$this->db_write = $details;		} else {			$action = '';			$details = $db_list[ 'read' ][ mt_rand( 0, count( $db_list[ 'read' ] ) -1 ) ];			$this->db_read = $details;		}		$dbhname = "dbh" . $action;		$this->$dbhname = @mysql_connect( $details[ 'db_host' ], $details[ 'db_user' ], $details[ 'db_password' ] );		if (!$this->$dbhname ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $details['db_host'] ), 'db_connect_fail' );		}		$this->select( $details[ 'db_name' ], $this->$dbhname );	}	/**	 * Perform a MySQL database query, using current database connection.	 *	 * More information can be found on the codex page.	 *	 * @since 0.71	 *	 * @param string $query Database query	 * @return int|false Number of rows affected/selected or false on error	 */	function query( $query ) {		if ( ! $this->ready )			return false;		// some queries are made before the plugins have been loaded, and thus cannot be filtered with this method		if ( function_exists( 'apply_filters' ) )			$query = apply_filters( 'query', $query );		$return_val = 0;		$this->flush();		// Log how the function was called		$this->func_call = "\$db->query(\"$query\")";		// Keep track of the last query for debug..		$this->last_query = $query;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->timer_start();		// use $this->dbh for read ops, and $this->dbhwrite for write ops		// use $this->dbhglobal for gloal table ops		unset( $dbh );		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB ) {			if( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {				if( false == isset( $this->dbhglobal ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhglobal;				$this->last_db_used = "global";			} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {				if( false == isset( $this->dbhwrite ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhwrite;				$this->last_db_used = "write";			} else {				$dbh =& $this->dbh;				$this->last_db_used = "read";			}		} else {			$dbh =& $this->dbh;			$this->last_db_used = "other/read";		}		$this->result = @mysql_query( $query, $dbh );		$this->num_queries++;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() );		// If there is an error then take note of it..		if ( $this->last_error = mysql_error( $dbh ) ) {			$this->print_error();			return false;		}		if ( preg_match( "/^\\s*(insert|delete|update|replace|alter) /i", $query ) ) {			$this->rows_affected = mysql_affected_rows( $dbh );			// Take note of the insert_id			if ( preg_match( "/^\\s*(insert|replace) /i", $query ) ) {				$this->insert_id = mysql_insert_id($dbh);			}			// Return number of rows affected			$return_val = $this->rows_affected;		} else {			$i = 0;			while ( $i < @mysql_num_fields( $this->result ) ) {				$this->col_info[$i] = @mysql_fetch_field( $this->result );				$i++;			}			$num_rows = 0;			while ( $row = @mysql_fetch_object( $this->result ) ) {				$this->last_result[$num_rows] = $row;				$num_rows++;			}			@mysql_free_result( $this->result );			// Log number of rows the query returned			// and return number of rows selected			$this->num_rows = $num_rows;			$return_val     = $num_rows;		}		return $return_val;	}	/**	 * Insert a row into a table.	 *	 * <code>	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows inserted, or false on error.	 */	function insert( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'INSERT' );	}	/**	 * Replace a row into a table.	 *	 * <code>	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function replace( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'REPLACE' );	}	/**	 * Helper function for insert and replace.	 *	 * Runs an insert or replace query based on $type argument.	 *	 * @access private	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs).  Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function _insert_replace_helper( $table, $data, $format = null, $type = 'INSERT' ) {		if ( ! in_array( strtoupper( $type ), array( 'REPLACE', 'INSERT' ) ) )			return false;		$formats = $format = (array) $format;		$fields = array_keys( $data );		$formatted_fields = array();		foreach ( $fields as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$formatted_fields[] = $form;		}		$sql = "{$type} INTO `$table` (`" . implode( '`,`', $fields ) . "`) VALUES ('" . implode( "','", $formatted_fields ) . "')";		return $this->query( $this->prepare( $sql, $data ) );	}	/**	 * Update a row in the table	 *	 * <code>	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to update (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be "raw".	 * @param array|string $format Optional. An array of formats to be mapped to each of the values in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @param array|string $format_where Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where.  A format is one of '%d', '%s' (decimal number, string).  If omitted, all values in $where will be treated as strings.	 * @return int|false The number of rows updated, or false on error.	 */	function update( $table, $data, $where, $format = null, $where_format = null ) {		if ( ! is_array( $data ) || ! is_array( $where ) )			return false;		$formats = $format = (array) $format;		$bits = $wheres = array();		foreach ( (array) array_keys( $data ) as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset($this->field_types[$field]) )				$form = $this->field_types[$field];			else				$form = '%s';			$bits[] = "`$field` = {$form}";		}		$where_formats = $where_format = (array) $where_format;		foreach ( (array) array_keys( $where ) as $field ) {			if ( !empty( $where_format ) )				$form = ( $form = array_shift( $where_formats ) ) ? $form : $where_format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$wheres[] = "`$field` = {$form}";		}		$sql = "UPDATE `$table` SET " . implode( ', ', $bits ) . ' WHERE ' . implode( ' AND ', $wheres );		return $this->query( $this->prepare( $sql, array_merge( array_values( $data ), array_values( $where ) ) ) );	}	/**	 * Retrieve one variable from the database.	 *	 * Executes a SQL query and returns the value from the SQL result.	 * If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified.	 * If $query is null, this function returns the value in the specified column and row from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.	 * @param int $x Optional. Column of value to return.  Indexed from 0.	 * @param int $y Optional. Row of value to return.  Indexed from 0.	 * @return string|null Database query result (as string), or null on failure	 */	function get_var( $query = null, $x = 0, $y = 0 ) {		$this->func_call = "\$db->get_var(\"$query\", $x, $y)";		if ( $query )			$this->query( $query );		// Extract var out of cached results based x,y vals		if ( !empty( $this->last_result[$y] ) ) {			$values = array_values( get_object_vars( $this->last_result[$y] ) );		}		// If there is a value return it else return null		return ( isset( $values[$x] ) && $values[$x] !== '' ) ? $values[$x] : null;	}	/**	 * Retrieve one row from the database.	 *	 * Executes a SQL query and returns the row from the SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query SQL query.	 * @param string $output Optional. one of ARRAY_A | ARRAY_N | OBJECT constants. Return an associative array (column => value, ...),	 * 	a numerically indexed array (0 => value, ...) or an object ( ->column = value ), respectively.	 * @param int $y Optional. Row to return. Indexed from 0.	 * @return mixed Database query result in format specifed by $output or null on failure	 */	function get_row( $query = null, $output = OBJECT, $y = 0 ) {		$this->func_call = "\$db->get_row(\"$query\",$output,$y)";		if ( $query )			$this->query( $query );		else			return null;		if ( !isset( $this->last_result[$y] ) )			return null;		if ( $output == OBJECT ) {			return $this->last_result[$y] ? $this->last_result[$y] : null;		} elseif ( $output == ARRAY_A ) {			return $this->last_result[$y] ? get_object_vars( $this->last_result[$y] ) : null;		} elseif ( $output == ARRAY_N ) {			return $this->last_result[$y] ? array_values( get_object_vars( $this->last_result[$y] ) ) : null;		} else {			$this->print_error(/*WP_I18N_DB_GETROW_ERROR*/" \$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N"/*/WP_I18N_DB_GETROW_ERROR*/);		}	}	/**	 * Retrieve one column from the database.	 *	 * Executes a SQL query and returns the column from the SQL result.	 * If the SQL result contains more than one column, this function returns the column specified.	 * If $query is null, this function returns the specified column from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to previous query.	 * @param int $x Optional. Column to return. Indexed from 0.	 * @return array Database query result. Array indexed from 0 by SQL result row number.	 */	function get_col( $query = null , $x = 0 ) {		if ( $query )			$this->query( $query );		$new_array = array();		// Extract the column values		for ( $i = 0, $j = count( $this->last_result ); $i < $j; $i++ ) {			$new_array[$i] = $this->get_var( null, $x, $i );		}		return $new_array;	}	/**	 * Retrieve an entire SQL result set from the database (i.e., many rows)	 *	 * Executes a SQL query and returns the entire SQL result.	 *	 * @since 0.71	 *	 * @param string $query SQL query.	 * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants. With one of the first three, return an array of rows indexed from 0 by SQL result row number.	 * 	Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.	 * 	With OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value.  Duplicate keys are discarded.	 * @return mixed Database query results	 */	function get_results( $query = null, $output = OBJECT ) {		$this->func_call = "\$db->get_results(\"$query\", $output)";		if ( $query )			$this->query( $query );		else			return null;		$new_array = array();		if ( $output == OBJECT ) {			// Return an integer-keyed array of row objects			return $this->last_result;		} elseif ( $output == OBJECT_K ) {			// Return an array of row objects with keys from column 1			// (Duplicates are discarded)			foreach ( $this->last_result as $row ) {				$key = array_shift( get_object_vars( $row ) );				if ( ! isset( $new_array[ $key ] ) )					$new_array[ $key ] = $row;			}			return $new_array;		} elseif ( $output == ARRAY_A || $output == ARRAY_N ) {			// Return an integer-keyed array of...			if ( $this->last_result ) {				foreach( (array) $this->last_result as $row ) {					if ( $output == ARRAY_N ) {						// ...integer-keyed row arrays						$new_array[] = array_values( get_object_vars( $row ) );					} else {						// ...column name-keyed row arrays						$new_array[] = get_object_vars( $row );					}				}			}			return $new_array;		}		return null;	}	/**	 * Retrieve column metadata from the last query.	 *	 * @since 0.71	 *	 * @param string $info_type Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill	 * @param int $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type	 * @return mixed Column Results	 */	function get_col_info( $info_type = 'name', $col_offset = -1 ) {		if ( $this->col_info ) {			if ( $col_offset == -1 ) {				$i = 0;				$new_array = array();				foreach( (array) $this->col_info as $col ) {					$new_array[$i] = $col->{$info_type};					$i++;				}				return $new_array;			} else {				return $this->col_info[$col_offset]->{$info_type};			}		}	}	/**	 * Starts the timer, for debugging purposes.	 *	 * @since 1.5.0	 *	 * @return true	 */	function timer_start() {		$mtime            = explode( ' ', microtime() );		$this->time_start = $mtime[1] + $mtime[0];		return true;	}	/**	 * Stops the debugging timer.	 *	 * @since 1.5.0	 *	 * @return int Total time spent on the query, in milliseconds	 */	function timer_stop() {		$mtime      = explode( ' ', microtime() );		$time_end   = $mtime[1] + $mtime[0];		$time_total = $time_end - $this->time_start;		return $time_total;	}	/**	 * Wraps errors in a nice header and footer and dies.	 *	 * Will not die if wpdb::$show_errors is true	 *	 * @since 1.5.0	 *	 * @param string $message The Error message	 * @param string $error_code Optional. A Computer readable string to identify the error.	 * @return false|void	 */	function bail( $message, $error_code = '500' ) {		if ( !$this->show_errors ) {			if ( class_exists( 'WP_Error' ) )				$this->error = new WP_Error($error_code, $message);			else				$this->error = $message;			return false;		}		wp_die($message);	}	/**	 * Whether MySQL database is at least the required minimum version.	 *	 * @since 2.5.0	 * @uses $wp_version	 * @uses $required_mysql_version	 *	 * @return WP_Error	 */	function check_database_version() {		global $wp_version, $required_mysql_version;		// Make sure the server has the required MySQL version		if ( version_compare($this->db_version(), $required_mysql_version, '<') )			return new WP_Error('database_version', sprintf( __( '<strong>ERROR</strong>: WordPress %1$s requires MySQL %2$s or higher' ), $wp_version, $required_mysql_version ));	}	/**	 * Whether the database supports collation.	 *	 * Called when WordPress is generating the table scheme.	 *	 * @since 2.5.0	 *	 * @return bool True if collation is supported, false if version does not	 */	function supports_collation() {		return $this->has_cap( 'collation' );	}	/**	 * Determine if a database supports a particular feature	 *	 * @since 2.7	 * @see   wpdb::db_version()	 *	 * @param string $db_cap the feature	 * @return bool	 */	function has_cap( $db_cap ) {		$version = $this->db_version();		switch ( strtolower( $db_cap ) ) {			case 'collation' :    // @since 2.5.0			case 'group_concat' : // @since 2.7			case 'subqueries' :   // @since 2.7				return version_compare( $version, '4.1', '>=' );		};		return false;	}	/**	 * Retrieve the name of the function that called wpdb.	 *	 * Searches up the list of functions until it reaches	 * the one that would most logically had called this method.	 *	 * @since 2.5.0	 *	 * @return string The name of the calling function	 */	function get_caller() {		$trace  = array_reverse( debug_backtrace() );		$caller = array();		foreach ( $trace as $call ) {			if ( isset( $call['class'] ) && __CLASS__ == $call['class'] )				continue; // Filter out wpdb calls.			$caller[] = isset( $call['class'] ) ? "{$call['class']}->{$call['function']}" : $call['function'];		}		return join( ', ', $caller );	}	/**	 * The database version number.	 *	 * @return false|string false on failure, version number on success	 */	function db_version() {		return preg_replace( '/[^0-9.].*/', '', mysql_get_server_info( $this->dbh ) );	}}if ( ! isset( $wpdb ) ) {	/**	 * WordPress Database Object, if it isn't set already in wp-content/db.php	 * @global object $wpdb Creates a new wpdb object based on wp-config.php Constants for the database	 * @since 0.71	 */	$wpdb = new wpdb( DB_USER, DB_PASSWORD, DB_NAME, DB_HOST );}?>
<?php/** * Holds Most of the WordPress classes. * * Some of the other classes are contained in other files. For example, the * WordPress cache is in cache.php and the WordPress roles API is in * capabilities.php. The third party libraries are contained in their own * separate files. * * @package WordPress *//** * WordPress environment setup class. * * @package WordPress * @since 2.0.0 */class WP {	/**	 * Public query variables.	 *	 * Long list of public query variables.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'debug', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'comments_popup', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type');	/**	 * Private query variables.	 *	 * Long list of private query variables.	 *	 * @since 2.0.0	 * @var array	 */	var $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page');	/**	 * Extra query variables set by the user.	 *	 * @since 2.1.0	 * @var array	 */	var $extra_query_vars = array();	/**	 * Query variables for setting up the WordPress Query Loop.	 *	 * @since 2.0.0	 * @var array	 */	var $query_vars;	/**	 * String parsed to set the query variables.	 *	 * @since 2.0.0	 * @var string	 */	var $query_string;	/**	 * Permalink or requested URI.	 *	 * @since 2.0.0	 * @var string	 */	var $request;	/**	 * Rewrite rule the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_rule;	/**	 * Rewrite query the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_query;	/**	 * Whether already did the permalink.	 *	 * @since 2.0.0	 * @var bool	 */	var $did_permalink = false;	/**	 * Add name to list of public query variables.	 *	 * @since 2.1.0	 *	 * @param string $qv Query variable name.	 */	function add_query_var($qv) {		if ( !in_array($qv, $this->public_query_vars) )			$this->public_query_vars[] = $qv;	}	/**	 * Set the value of a query variable.	 *	 * @since 2.3.0	 *	 * @param string $key Query variable name.	 * @param mixed $value Query variable value.	 */	function set_query_var($key, $value) {		$this->query_vars[$key] = $value;	}	/**	 * Parse request to find correct WordPress query.	 *	 * Sets up the query variables based on the request. There are also many	 * filters and actions that can be used to further manipulate the result.	 *	 * @since 2.0.0	 *	 * @param array|string $extra_query_vars Set the extra query variables.	 */	function parse_request($extra_query_vars = '') {		global $wp_rewrite;		$this->query_vars = array();		$taxonomy_query_vars = array();		$post_type_query_vars = array();		if ( is_array($extra_query_vars) )			$this->extra_query_vars = & $extra_query_vars;		else if (! empty($extra_query_vars))			parse_str($extra_query_vars, $this->extra_query_vars);		// Process PATH_INFO, REQUEST_URI, and 404 for permalinks.		// Fetch the rewrite rules.		$rewrite = $wp_rewrite->wp_rewrite_rules();		if ( ! empty($rewrite) ) {			// If we match a rewrite rule, this will be cleared.			$error = '404';			$this->did_permalink = true;			if ( isset($_SERVER['PATH_INFO']) )				$pathinfo = $_SERVER['PATH_INFO'];			else				$pathinfo = '';			$pathinfo_array = explode('?', $pathinfo);			$pathinfo = str_replace("%", "%25", $pathinfo_array[0]);			$req_uri = $_SERVER['REQUEST_URI'];			$req_uri_array = explode('?', $req_uri);			$req_uri = $req_uri_array[0];			$self = $_SERVER['PHP_SELF'];			$home_path = parse_url(home_url());			if ( isset($home_path['path']) )				$home_path = $home_path['path'];			else				$home_path = '';			$home_path = trim($home_path, '/');			// Trim path info from the end and the leading home path from the			// front.  For path info requests, this leaves us with the requesting			// filename, if any.  For 404 requests, this leaves us with the			// requested permalink.			$req_uri = str_replace($pathinfo, '', rawurldecode($req_uri));			$req_uri = trim($req_uri, '/');			$req_uri = preg_replace("|^$home_path|", '', $req_uri);			$req_uri = trim($req_uri, '/');			$pathinfo = trim($pathinfo, '/');			$pathinfo = preg_replace("|^$home_path|", '', $pathinfo);			$pathinfo = trim($pathinfo, '/');			$self = trim($self, '/');			$self = preg_replace("|^$home_path|", '', $self);			$self = trim($self, '/');			// The requested permalink is in $pathinfo for path info requests and			//  $req_uri for other requests.			if ( ! empty($pathinfo) && !preg_match('|^.*' . $wp_rewrite->index . '$|', $pathinfo) ) {				$request = $pathinfo;			} else {				// If the request uri is the index, blank it out so that we don't try to match it against a rule.				if ( $req_uri == $wp_rewrite->index )					$req_uri = '';				$request = $req_uri;			}			$this->request = $request;			// Look for matches.			$request_match = $request;			foreach ( (array) $rewrite as $match => $query) {				// Don't try to match against AtomPub calls				if ( $req_uri == 'wp-app.php' )					break;				// If the requesting file is the anchor of the match, prepend it				// to the path info.				if ( (! empty($req_uri)) && (strpos($match, $req_uri) === 0) && ($req_uri != $request) )					$request_match = $req_uri . '/' . $request;				if ( preg_match("#^$match#", $request_match, $matches) ||					preg_match("#^$match#", urldecode($request_match), $matches) ) {					// Got a match.					$this->matched_rule = $match;					// Trim the query of everything up to the '?'.					$query = preg_replace("!^.+\?!", '', $query);					// Substitute the substring matches into the query.					$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));					$this->matched_query = $query;					// Parse the query.					parse_str($query, $perma_query_vars);					// If we're processing a 404 request, clear the error var					// since we found something.					if ( isset($_GET['error']) )						unset($_GET['error']);					if ( isset($error) )						unset($error);					break;				}			}			// If req_uri is empty or if it is a request for ourself, unset error.			if ( empty($request) || $req_uri == $self || strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false ) {				if ( isset($_GET['error']) )					unset($_GET['error']);				if ( isset($error) )					unset($error);				if ( isset($perma_query_vars) && strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )					unset($perma_query_vars);				$this->did_permalink = false;			}		}		$this->public_query_vars = apply_filters('query_vars', $this->public_query_vars);		foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t )			if ( $t->query_var )				$taxonomy_query_vars[$t->query_var] = $taxonomy;		foreach ( $GLOBALS['wp_post_types'] as $post_type => $t )			if ( $t->query_var )				$post_type_query_vars[$t->query_var] = $post_type;		for ( $i = 0; $i < count($this->public_query_vars); $i += 1 ) {			$wpvar = $this->public_query_vars[$i];			if ( isset($this->extra_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $this->extra_query_vars[$wpvar];			elseif ( isset($GLOBALS[$wpvar]) )				$this->query_vars[$wpvar] = $GLOBALS[$wpvar];			elseif ( !empty($_POST[$wpvar]) )				$this->query_vars[$wpvar] = $_POST[$wpvar];			elseif ( !empty($_GET[$wpvar]) )				$this->query_vars[$wpvar] = $_GET[$wpvar];			elseif ( !empty($perma_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $perma_query_vars[$wpvar];			if ( !empty( $this->query_vars[$wpvar] ) ) {				$this->query_vars[$wpvar] = (string) $this->query_vars[$wpvar];				if ( isset( $taxonomy_query_vars[$wpvar] ) ) {					$this->query_vars['taxonomy'] = $taxonomy_query_vars[$wpvar];					$this->query_vars['term'] = $this->query_vars[$wpvar];				} elseif ( isset($post_type_query_vars[$wpvar] ) ) {					$this->query_vars['post_type'] = $post_type_query_vars[$wpvar];					$this->query_vars['name'] = $this->query_vars[$wpvar];				}			}		}		// Limit publicly queried post_types to those that are publicly_queryable		if ( isset( $this->query_vars['post_type']) ) {			$queryable_post_types =  get_post_types( array('publicly_queryable' => true) );			if ( ! in_array( $this->query_vars['post_type'], $queryable_post_types ) )				unset( $this->query_vars['post_type'] );		}		foreach ( (array) $this->private_query_vars as $var) {			if ( isset($this->extra_query_vars[$var]) )				$this->query_vars[$var] = $this->extra_query_vars[$var];			elseif ( isset($GLOBALS[$var]) && '' != $GLOBALS[$var] )				$this->query_vars[$var] = $GLOBALS[$var];		}		if ( isset($error) )			$this->query_vars['error'] = $error;		$this->query_vars = apply_filters('request', $this->query_vars);		do_action_ref_array('parse_request', array(&$this));	}	/**	 * Send additional HTTP headers for caching, content type, etc.	 *	 * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing	 * a feed, it will also send last-modified, etag, and 304 status if needed.	 *	 * @since 2.0.0	 */	function send_headers() {		$headers = array('X-Pingback' => get_bloginfo('pingback_url'));		$status = null;		$exit_required = false;		if ( is_user_logged_in() )			$headers = array_merge($headers, wp_get_nocache_headers());		if ( !empty($this->query_vars['error']) && '404' == $this->query_vars['error'] ) {			$status = 404;			if ( !is_user_logged_in() )				$headers = array_merge($headers, wp_get_nocache_headers());			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else if ( empty($this->query_vars['feed']) ) {			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else {			// We're showing a feed, so WP is indeed the only thing that last changed			if ( !empty($this->query_vars['withcomments'])				|| ( empty($this->query_vars['withoutcomments'])					&& ( !empty($this->query_vars['p'])						|| !empty($this->query_vars['name'])						|| !empty($this->query_vars['page_id'])						|| !empty($this->query_vars['pagename'])						|| !empty($this->query_vars['attachment'])						|| !empty($this->query_vars['attachment_id'])					)				)			)				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastcommentmodified('GMT'), 0).' GMT';			else				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';			$wp_etag = '"' . md5($wp_last_modified) . '"';			$headers['Last-Modified'] = $wp_last_modified;			$headers['ETag'] = $wp_etag;			// Support for Conditional GET			if (isset($_SERVER['HTTP_IF_NONE_MATCH']))				$client_etag = stripslashes(stripslashes($_SERVER['HTTP_IF_NONE_MATCH']));			else $client_etag = false;			$client_last_modified = empty($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? '' : trim($_SERVER['HTTP_IF_MODIFIED_SINCE']);			// If string is empty, return 0. If not, attempt to parse into a timestamp			$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;			// Make a timestamp for our most recent modification...			$wp_modified_timestamp = strtotime($wp_last_modified);			if ( ($client_last_modified && $client_etag) ?					 (($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :					 (($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {				$status = 304;				$exit_required = true;			}		}		$headers = apply_filters('wp_headers', $headers, $this);		if ( ! empty( $status ) )			status_header( $status );		foreach( (array) $headers as $name => $field_value )			@header("{$name}: {$field_value}");		if ($exit_required)			exit();		do_action_ref_array('send_headers', array(&$this));	}	/**	 * Sets the query string property based off of the query variable property.	 *	 * The 'query_string' filter is deprecated, but still works. Plugins should	 * use the 'request' filter instead.	 *	 * @since 2.0.0	 */	function build_query_string() {		$this->query_string = '';		foreach ( (array) array_keys($this->query_vars) as $wpvar) {			if ( '' != $this->query_vars[$wpvar] ) {				$this->query_string .= (strlen($this->query_string) < 1) ? '' : '&';				if ( !is_scalar($this->query_vars[$wpvar]) ) // Discard non-scalars.					continue;				$this->query_string .= $wpvar . '=' . rawurlencode($this->query_vars[$wpvar]);			}		}		// query_string filter deprecated.  Use request filter instead.		if ( has_filter('query_string') ) {  // Don't bother filtering and parsing if no plugins are hooked in.			$this->query_string = apply_filters('query_string', $this->query_string);			parse_str($this->query_string, $this->query_vars);		}	}	/**	 * Set up the WordPress Globals.	 *	 * The query_vars property will be extracted to the GLOBALS. So care should	 * be taken when naming global variables that might interfere with the	 * WordPress environment.	 *	 * @global string $query_string Query string for the loop.	 * @global int $more Only set, if single page or post.	 * @global int $single If single page or post. Only set, if single page or post.	 *	 * @since 2.0.0	 */	function register_globals() {		global $wp_query;		// Extract updated query vars back into global namespace.		foreach ( (array) $wp_query->query_vars as $key => $value) {			$GLOBALS[$key] = $value;		}		$GLOBALS['query_string'] = $this->query_string;		$GLOBALS['posts'] = & $wp_query->posts;		$GLOBALS['post'] = $wp_query->post;		$GLOBALS['request'] = $wp_query->request;		if ( is_single() || is_page() ) {			$GLOBALS['more'] = 1;			$GLOBALS['single'] = 1;		}	}	/**	 * Set up the current user.	 *	 * @since 2.0.0	 */	function init() {		wp_get_current_user();	}	/**	 * Set up the Loop based on the query variables.	 *	 * @uses WP::$query_vars	 * @since 2.0.0	 */	function query_posts() {		global $wp_the_query;		$this->build_query_string();		$wp_the_query->query($this->query_vars); 	} 	/** 	 * Set the Headers for 404, if nothing is found for requested URL.	 *	 * Issue a 404 if a request doesn't match any posts and doesn't match	 * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already	 * issued, and if the request was not a search or the homepage.	 *	 * Otherwise, issue a 200.	 *	 * @since 2.0.0 	 */	function handle_404() {		global $wp_query;		if ( ( 0 == count( $wp_query->posts ) ) && !is_404() && !is_robots() && !is_search() && !is_home() ) {			// Don't 404 for these queries if they matched an object.			if ( ( is_tag() || is_category() || is_tax() || is_author() ) && $wp_query->get_queried_object() && !is_paged() ) {				if ( !is_404() )					status_header( 200 );				return;			}			$wp_query->set_404();			status_header( 404 );			nocache_headers();		} elseif ( !is_404() ) {			status_header( 200 );		}	}	/**	 * Sets up all of the variables required by the WordPress environment.	 *	 * The action 'wp' has one parameter that references the WP object. It	 * allows for accessing the properties and methods to further manipulate the	 * object.	 *	 * @since 2.0.0	 *	 * @param string|array $query_args Passed to {@link parse_request()}	 */	function main($query_args = '') {		$this->init();		$this->parse_request($query_args);		$this->send_headers();		$this->query_posts();		$this->handle_404();		$this->register_globals();		do_action_ref_array('wp', array(&$this));	}	/**	 * PHP4 Constructor - Does nothing.	 *	 * Call main() method when ready to run setup.	 *	 * @since 2.0.0	 *	 * @return WP	 */	function WP() {		// Empty.	}}/** * WordPress Error class. * * Container for checking for WordPress errors and error messages. Return * WP_Error and use {@link is_wp_error()} to check if this class is returned. * Many core WordPress functions pass this class in the event of an error and * if not handled properly will result in code errors. * * @package WordPress * @since 2.1.0 */class WP_Error {	/**	 * Stores the list of errors.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $errors = array();	/**	 * Stores the list of data for error codes.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $error_data = array();	/**	 * PHP4 Constructor - Sets up error message.	 *	 * If code parameter is empty then nothing will be done. It is possible to	 * add multiple messages to the same code, but with other methods in the	 * class.	 *	 * All parameters are optional, but if the code parameter is set, then the	 * data parameter is optional.	 *	 * @since 2.1.0	 *	 * @param string|int $code Error code	 * @param string $message Error message	 * @param mixed $data Optional. Error data.	 * @return WP_Error	 */	function WP_Error($code = '', $message = '', $data = '') {		if ( empty($code) )			return;		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Retrieve all error codes.	 *	 * @since 2.1.0	 * @access public	 *	 * @return array List of error codes, if avaiable.	 */	function get_error_codes() {		if ( empty($this->errors) )			return array();		return array_keys($this->errors);	}	/**	 * Retrieve first error code available.	 *	 * @since 2.1.0	 * @access public	 *	 * @return string|int Empty string, if no error codes.	 */	function get_error_code() {		$codes = $this->get_error_codes();		if ( empty($codes) )			return '';		return $codes[0];	}	/**	 * Retrieve all error messages or error messages matching code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Retrieve messages matching code, if exists.	 * @return array Error strings on success, or empty array on failure (if using codee parameter).	 */	function get_error_messages($code = '') {		// Return all messages if no code specified.		if ( empty($code) ) {			$all_messages = array();			foreach ( (array) $this->errors as $code => $messages )				$all_messages = array_merge($all_messages, $messages);			return $all_messages;		}		if ( isset($this->errors[$code]) )			return $this->errors[$code];		else			return array();	}	/**	 * Get single error message.	 *	 * This will get the first message available for the code. If no code is	 * given then the first code available will be used.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code to retrieve message.	 * @return string	 */	function get_error_message($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$messages = $this->get_error_messages($code);		if ( empty($messages) )			return '';		return $messages[0];	}	/**	 * Retrieve error data for error code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code.	 * @return mixed Null, if no errors.	 */	function get_error_data($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		if ( isset($this->error_data[$code]) )			return $this->error_data[$code];		return null;	}	/**	 * Append more error messages to list of error messages.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $code Error code.	 * @param string $message Error message.	 * @param mixed $data Optional. Error data.	 */	function add($code, $message, $data = '') {		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Add data for error code.	 *	 * The error code can only contain one error data.	 *	 * @since 2.1.0	 *	 * @param mixed $data Error data.	 * @param string|int $code Error code.	 */	function add_data($data, $code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$this->error_data[$code] = $data;	}}/** * Check whether variable is a WordPress Error. * * Looks at the object and if a WP_Error class. Does not check to see if the * parent is also WP_Error, so can't inherit WP_Error and still use this * function. * * @since 2.1.0 * * @param mixed $thing Check if unknown variable is WordPress Error object. * @return bool True, if WP_Error. False, if not WP_Error. */function is_wp_error($thing) {	if ( is_object($thing) && is_a($thing, 'WP_Error') )		return true;	return false;}/** * A class for displaying various tree-like structures. * * Extend the Walker class to use it, see examples at the below. Child classes * do not need to implement all of the abstract methods in the class. The child * only needs to implement the methods that are needed. Also, the methods are * not strictly abstract in that the parameter definition needs to be followed. * The child classes can have additional parameters. * * @package WordPress * @since 2.1.0 * @abstract */class Walker {	/**	 * What the class handles.	 *	 * @since 2.1.0	 * @var string	 * @access public	 */	var $tree_type;	/**	 * DB fields to use.	 *	 * @since 2.1.0	 * @var array	 * @access protected	 */	var $db_fields;	/**	 * Max number of pages walked by the paged walker	 *	 * @since 2.7.0	 * @var int	 * @access protected	 */	var $max_pages = 1;	/**	 * Starts the list before the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method is called at the start of the output list.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_lvl(&$output) {}	/**	 * Ends the list of after the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method finishes the list at the end of output of the elements.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_lvl(&$output)   {}	/**	 * Start the element output.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. Includes	 * the element output also.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_el(&$output)  {}	/**	 * Ends the element output, if needed.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_el(&$output)    {}	/**	 * Traverse elements to create list from elements.	 *	 * Display one element if the element doesn't have any children otherwise,	 * display the element and its children. Will only traverse up to the max	 * depth and no ignore elements under that depth. It is possible to set the	 * max depth to include all depths, see walk() method.	 *	 * This method shouldn't be called directly, use the walk() method instead.	 *	 * @since 2.5.0	 *	 * @param object $element Data object	 * @param array $children_elements List of elements to continue traversing.	 * @param int $max_depth Max depth to traverse.	 * @param int $depth Depth of current element.	 * @param array $args	 * @param string $output Passed by reference. Used to append additional content.	 * @return null Null on failure with no changes to parameters.	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		//display this element		if ( is_array( $args[0] ) )			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'start_el'), $cb_args);		$id = $element->$id_field;		// descend only when the depth is right and there are childrens for this element		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {			foreach( $children_elements[ $id ] as $child ){				if ( !isset($newlevel) ) {					$newlevel = true;					//start the child delimiter					$cb_args = array_merge( array(&$output, $depth), $args);					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);				}				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );			}			unset( $children_elements[ $id ] );		}		if ( isset($newlevel) && $newlevel ){			//end the child delimiter			$cb_args = array_merge( array(&$output, $depth), $args);			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);		}		//end this element		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'end_el'), $cb_args);	}	/**	 * Display array of elements hierarchically.	 *	 * It is a generic function which does not assume any existing order of	 * elements. max_depth = -1 means flatly display every element. max_depth =	 * 0 means display all levels. max_depth > 0  specifies the number of	 * display levels.	 *	 * @since 2.1.0	 *	 * @param array $elements	 * @param int $max_depth	 * @return string	 */	function walk( $elements, $max_depth) {		$args = array_slice(func_get_args(), 2);		$output = '';		if ($max_depth < -1) //invalid parameter			return $output;		if (empty($elements)) //nothing to walk			return $output;		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		// flat display		if ( -1 == $max_depth ) {			$empty_array = array();			foreach ( $elements as $e )				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			return $output;		}		/*		 * need to display in hierarchical order		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		/*		 * when none of the elements is top level		 * assume the first one must be root of the sub elements		 */		if ( empty($top_level_elements) ) {			$first = array_slice( $elements, 0, 1 );			$root = $first[0];			$top_level_elements = array();			$children_elements  = array();			foreach ( $elements as $e) {				if ( $root->$parent_field == $e->$parent_field )					$top_level_elements[] = $e;				else					$children_elements[ $e->$parent_field ][] = $e;			}		}		foreach ( $top_level_elements as $e )			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		/*		 * if we are displaying all levels, and remaining children_elements is not empty,		 * then we got orphans, which should be displayed regardless		 */		if ( ( $max_depth == 0 ) && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		 }		 return $output;	}	/** 	 * paged_walk() - produce a page of nested elements 	 * 	 * Given an array of hierarchical elements, the maximum depth, a specific page number, 	 * and number of elements per page, this function first determines all top level root elements 	 * belonging to that page, then lists them and all of their children in hierarchical order. 	 * 	 * @package WordPress 	 * @since 2.7 	 * @param $max_depth = 0  means display all levels; $max_depth > 0  specifies the number of display levels. 	 * @param $page_num the specific page number, beginning with 1. 	 * @return XHTML of the specified page of elements 	 */	function paged_walk( $elements, $max_depth, $page_num, $per_page ) {		/* sanity check */		if ( empty($elements) || $max_depth < -1 )			return '';		$args = array_slice( func_get_args(), 4 );		$output = '';		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		$count = -1;		if ( -1 == $max_depth )			$total_top = count( $elements );		if ( $page_num < 1 || $per_page < 0  ) {			// No paging			$paging = false;			$start = 0;			if ( -1 == $max_depth )				$end = $total_top;			$this->max_pages = 1;		} else {			$paging = true;			$start = ( (int)$page_num - 1 ) * (int)$per_page;			$end   = $start + $per_page;			if ( -1 == $max_depth )				$this->max_pages = ceil($total_top / $per_page);		}		// flat display		if ( -1 == $max_depth ) {			if ( !empty($args[0]['reverse_top_level']) ) {				$elements = array_reverse( $elements );				$oldstart = $start;				$start = $total_top - $end;				$end = $total_top - $oldstart;			}			$empty_array = array();			foreach ( $elements as $e ) {				$count++;				if ( $count < $start )					continue;				if ( $count >= $end )					break;				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			}			return $output;		}		/*		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		$total_top = count( $top_level_elements );		if ( $paging )			$this->max_pages = ceil($total_top / $per_page);		else			$end = $total_top;		if ( !empty($args[0]['reverse_top_level']) ) {			$top_level_elements = array_reverse( $top_level_elements );			$oldstart = $start;			$start = $total_top - $end;			$end = $total_top - $oldstart;		}		if ( !empty($args[0]['reverse_children']) ) {			foreach ( $children_elements as $parent => $children )				$children_elements[$parent] = array_reverse( $children );		}		foreach ( $top_level_elements as $e ) {			$count++;			//for the last page, need to unset earlier children in order to keep track of orphans			if ( $end >= $total_top && $count < $start )					$this->unset_children( $e, $children_elements );			if ( $count < $start )				continue;			if ( $count >= $end )				break;			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		}		if ( $end >= $total_top && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		}		return $output;	}	function get_number_of_root_elements( $elements ){		$num = 0;		$parent_field = $this->db_fields['parent'];		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$num++;		}		return $num;	}	// unset all the children for a given top level element	function unset_children( $e, &$children_elements ){		if ( !$e || !$children_elements )			return;		$id_field = $this->db_fields['id'];		$id = $e->$id_field;		if ( !empty($children_elements[$id]) && is_array($children_elements[$id]) )			foreach ( (array) $children_elements[$id] as $child )				$this->unset_children( $child, $children_elements );		if ( isset($children_elements[$id]) )			unset( $children_elements[$id] );	}}/** * Create HTML list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Page extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page. Used for padding.	 * @param int $current_page Page ID.	 * @param array $args	 */	function start_el(&$output, $page, $depth, $args, $current_page) {		if ( $depth )			$indent = str_repeat("\t", $depth);		else			$indent = '';		extract($args, EXTR_SKIP);		$css_class = array('page_item', 'page-item-'.$page->ID);		if ( !empty($current_page) ) {			$_current_page = get_page( $current_page );			if ( isset($_current_page->ancestors) && in_array($page->ID, (array) $_current_page->ancestors) )				$css_class[] = 'current_page_ancestor';			if ( $page->ID == $current_page )				$css_class[] = 'current_page_item';			elseif ( $_current_page && $page->ID == $_current_page->post_parent )				$css_class[] = 'current_page_parent';		} elseif ( $page->ID == get_option('page_for_posts') ) {			$css_class[] = 'current_page_parent';		}		$css_class = implode(' ', apply_filters('page_css_class', $css_class, $page));		$output .= $indent . '<li class="' . $css_class . '"><a href="' . get_page_link($page->ID) . '" title="' . esc_attr( wp_strip_all_tags( apply_filters( 'the_title', $page->post_title, $page->ID ) ) ) . '">' . $link_before . apply_filters( 'the_title', $page->post_title, $page->ID ) . $link_after . '</a>';		if ( !empty($show_date) ) {			if ( 'modified' == $show_date )				$time = $page->post_modified;			else				$time = $page->post_date;			$output .= " " . mysql2date($date_format, $time);		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $page, $depth) {		$output .= "</li>\n";	}}/** * Create HTML dropdown list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_PageDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page in reference to parent pages. Used for padding.	 * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.	 */	function start_el(&$output, $page, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$output .= "\t<option class=\"level-$depth\" value=\"$page->ID\"";		if ( $page->ID == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$title = esc_html($page->post_title);		$output .= "$pad$title";		$output .= "</option>\n";	}}/** * Create HTML list of categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Category extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function start_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function end_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category in reference to parents.	 * @param array $args	 */	function start_el(&$output, $category, $depth, $args) {		extract($args);		$cat_name = esc_attr( $category->name);		$cat_name = apply_filters( 'list_cats', $cat_name, $category );		$link = '<a href="' . get_term_link( $category, $category->taxonomy ) . '" ';		if ( $use_desc_for_title == 0 || empty($category->description) )			$link .= 'title="' . sprintf(__( 'View all posts filed under %s' ), $cat_name) . '"';		else			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';		$link .= '>';		$link .= $cat_name . '</a>';		if ( (! empty($feed_image)) || (! empty($feed)) ) {			$link .= ' ';			if ( empty($feed_image) )				$link .= '(';			$link .= '<a href="' . get_term_feed_link( $category->term_id, $category->taxonomy, $feed_type ) . '"';			if ( empty($feed) )				$alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s' ), $cat_name ) . '"';			else {				$title = ' title="' . $feed . '"';				$alt = ' alt="' . $feed . '"';				$name = $feed;				$link .= $title;			}			$link .= '>';			if ( empty($feed_image) )				$link .= $name;			else				$link .= "<img src='$feed_image'$alt$title" . ' />';			$link .= '</a>';			if ( empty($feed_image) )				$link .= ')';		}		if ( isset($show_count) && $show_count )			$link .= ' (' . intval($category->count) . ')';		if ( isset($show_date) && $show_date ) {			$link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);		}		if ( isset($current_category) && $current_category )			$_current_category = get_category( $current_category );		if ( 'list' == $args['style'] ) {			$output .= "\t<li";			$class = 'cat-item cat-item-'.$category->term_id;			if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )				$class .=  ' current-cat';			elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )				$class .=  ' current-cat-parent';			$output .=  ' class="'.$class.'"';			$output .= ">$link\n";		} else {			$output .= "\t$link<br />\n";		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Not used.	 * @param int $depth Depth of category. Not used.	 * @param array $args Only uses 'list' for whether should append to output.	 */	function end_el(&$output, $page, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$output .= "</li>\n";	}}/** * Create HTML dropdown list of Categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_CategoryDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category. Used for padding.	 * @param array $args Uses 'selected', 'show_count', and 'show_last_update' keys, if they exist.	 */	function start_el(&$output, $category, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$cat_name = apply_filters('list_cats', $category->name, $category);		$output .= "\t<option class=\"level-$depth\" value=\"".$category->term_id."\"";		if ( $category->term_id == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$output .= $pad.$cat_name;		if ( $args['show_count'] )			$output .= '&nbsp;&nbsp;('. $category->count .')';		if ( $args['show_last_update'] ) {			$format = 'Y-m-d';			$output .= '&nbsp;&nbsp;' . gmdate($format, $category->last_update_timestamp);		}		$output .= "</option>\n";	}}/** * Send XML response back to AJAX request. * * @package WordPress * @since 2.1.0 */class WP_Ajax_Response {	/**	 * Store XML responses to send.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $responses = array();	/**	 * PHP4 Constructor - Passes args to {@link WP_Ajax_Response::add()}.	 *	 * @since 2.1.0	 * @see WP_Ajax_Response::add()	 *	 * @param string|array $args Optional. Will be passed to add() method.	 * @return WP_Ajax_Response	 */	function WP_Ajax_Response( $args = '' ) {		if ( !empty($args) )			$this->add($args);	}	/**	 * Append to XML response based on given arguments.	 *	 * The arguments that can be passed in the $args parameter are below. It is	 * also possible to pass a WP_Error object in either the 'id' or 'data'	 * argument. The parameter isn't actually optional, content should be given	 * in order to send the correct response.	 *	 * 'what' argument is a string that is the XMLRPC response type.	 * 'action' argument is a boolean or string that acts like a nonce.	 * 'id' argument can be WP_Error or an integer.	 * 'old_id' argument is false by default or an integer of the previous ID.	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,	 * html ID = after, -html ID = before.	 * 'data' argument is a string with the content or message.	 * 'supplemental' argument is an array of strings that will be children of	 * the supplemental element.	 *	 * @since 2.1.0	 *	 * @param string|array $args Override defaults.	 * @return string XML response.	 */	function add( $args = '' ) {		$defaults = array(			'what' => 'object', 'action' => false,			'id' => '0', 'old_id' => false,			'position' => 1,			'data' => '', 'supplemental' => array()		);		$r = wp_parse_args( $args, $defaults );		extract( $r, EXTR_SKIP );		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );		if ( is_wp_error($id) ) {			$data = $id;			$id = 0;		}		$response = '';		if ( is_wp_error($data) ) {			foreach ( (array) $data->get_error_codes() as $code ) {				$response .= "<wp_error code='$code'><![CDATA[" . $data->get_error_message($code) . "]]></wp_error>";				if ( !$error_data = $data->get_error_data($code) )					continue;				$class = '';				if ( is_object($error_data) ) {					$class = ' class="' . get_class($error_data) . '"';					$error_data = get_object_vars($error_data);				}				$response .= "<wp_error_data code='$code'$class>";				if ( is_scalar($error_data) ) {					$response .= "<![CDATA[$error_data]]>";				} elseif ( is_array($error_data) ) {					foreach ( $error_data as $k => $v )						$response .= "<$k><![CDATA[$v]]></$k>";				}				$response .= "</wp_error_data>";			}		} else {			$response = "<response_data><![CDATA[$data]]></response_data>";		}		$s = '';		if ( is_array($supplemental) ) {			foreach ( $supplemental as $k => $v )				$s .= "<$k><![CDATA[$v]]></$k>";			$s = "<supplemental>$s</supplemental>";		}		if ( false === $action )			$action = $_POST['action'];		$x = '';		$x .= "<response action='{$action}_$id'>"; // The action attribute in the xml output is formatted like a nonce action		$x .=	"<$what id='$id' " . ( false === $old_id ? '' : "old_id='$old_id' " ) . "position='$position'>";		$x .=		$response;		$x .=		$s;		$x .=	"</$what>";		$x .= "</response>";		$this->responses[] = $x;		return $x;	}	/**	 * Display XML formatted responses.	 *	 * Sets the content type header to text/xml.	 *	 * @since 2.1.0	 */	function send() {		header('Content-Type: text/xml');		echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";		foreach ( (array) $this->responses as $response )			echo $response;		echo '</wp_ajax>';		die();	}}/** * Helper class to remove the need to use eval to replace $matches[] in query strings. * * @since 2.9.0 */class WP_MatchesMapRegex {	/**	 * store for matches	 *	 * @access private	 * @var array	 */	var $_matches;	/**	 * store for mapping result	 *	 * @access public	 * @var string	 */	var $output;	/**	 * subject to perform mapping on (query string containing $matches[] references	 *	 * @access private	 * @var string	 */	var $_subject;	/**	 * regexp pattern to match $matches[] references	 *	 * @var string	 */	var $_pattern = '(\$matches\[[1-9]+[0-9]*\])'; // magic number	/**	 * constructor	 *	 * @param string $subject subject if regex	 * @param array  $matches data to use in map	 * @return self	 */	function WP_MatchesMapRegex($subject, $matches) {		$this->_subject = $subject;		$this->_matches = $matches;		$this->output = $this->_map();	}	/**	 * Substitute substring matches in subject.	 *	 * static helper function to ease use	 *	 * @access public	 * @param string $subject subject	 * @param array  $matches data used for subsitution	 * @return string	 */	function apply($subject, $matches) {		$oSelf =& new WP_MatchesMapRegex($subject, $matches);		return $oSelf->output;	}	/**	 * do the actual mapping	 *	 * @access private	 * @return string	 */	function _map() {		$callback = array(&$this, 'callback');		return preg_replace_callback($this->_pattern, $callback, $this->_subject);	}	/**	 * preg_replace_callback hook	 *	 * @access public	 * @param  array $matches preg_replace regexp matches	 * @return string	 */	function callback($matches) {		$index = intval(substr($matches[0], 9, -1));		return ( isset( $this->_matches[$index] ) ? urlencode($this->_matches[$index]) : '' );	}}?>
<?php/** * Action handler for Multisite administration panels. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( empty( $_GET['action'] ) )	wp_redirect( admin_url( 'ms-admin.php' ) );do_action( 'wpmuadminedit' , '');if ( isset( $_GET['id' ]) )	$id = intval( $_GET['id'] );elseif ( isset( $_POST['id'] ) )	$id = intval( $_POST['id'] );switch ( $_GET['action'] ) {	case 'siteoptions':		check_admin_referer( 'siteoptions' );		if ( ! current_user_can( 'manage_network_options' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">options page</a>.', esc_url( admin_url( 'ms-options.php' ) ) ) ) );		if ( isset($_POST['WPLANG']) && ( '' === $_POST['WPLANG'] || in_array( $_POST['WPLANG'], get_available_languages() ) ) )			update_site_option( 'WPLANG', $_POST['WPLANG'] );		if ( is_email( $_POST['admin_email'] ) )			update_site_option( 'admin_email', $_POST['admin_email'] );		$illegal_names = split( ' ', $_POST['illegal_names'] );		foreach ( (array) $illegal_names as $name ) {			$name = trim( $name );			if ( $name != '' )				$names[] = trim( $name );		}		update_site_option( 'illegal_names', $names );		if ( $_POST['limited_email_domains'] != '' ) {			$limited_email_domains = str_replace( ' ', "\n", $_POST['limited_email_domains'] );			$limited_email_domains = split( "\n", stripslashes( $limited_email_domains ) );			$limited_email = array();			foreach ( (array) $limited_email_domains as $domain ) {					$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$limited_email[] = trim( $domain );			}			update_site_option( 'limited_email_domains', $limited_email );		} else {			update_site_option( 'limited_email_domains', '' );		}		if ( $_POST['banned_email_domains'] != '' ) {			$banned_email_domains = split( "\n", stripslashes( $_POST['banned_email_domains'] ) );			$banned = array();			foreach ( (array) $banned_email_domains as $domain ) {				$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$banned[] = trim( $domain );			}			update_site_option( 'banned_email_domains', $banned );		} else {			update_site_option( 'banned_email_domains', '' );		}		update_site_option( 'default_user_role', $_POST['default_user_role'] );		if ( trim( $_POST['dashboard_blog_orig'] ) == '' )			$_POST['dashboard_blog_orig'] = $current_site->blog_id;		if ( trim( $_POST['dashboard_blog'] ) == '' ) {			$_POST['dashboard_blog'] = $current_site->blog_id;			$dashboard_blog_id = $current_site->blog_id;		} elseif ( ! preg_match( '/(--|\.)/', $_POST['dashboard_blog'] ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $_POST['dashboard_blog'] ) ) {			$dashboard_blog = $_POST['dashboard_blog'];			$blog_details = get_blog_details( $dashboard_blog );			if ( false === $blog_details ) {				if ( is_numeric( $dashboard_blog ) )					wp_die( __( 'A dashboard site referenced by ID must already exist' ) );				if ( is_subdomain_install() ) {					$domain = $dashboard_blog . '.' . $current_site->domain;					$path = $current_site->path;				} else {					$domain = $current_site->domain;					$path = trailingslashit( $current_site->path . $dashboard_blog );				}				$wpdb->hide_errors();				$dashboard_blog_id = wpmu_create_blog( $domain, $path, __( 'My Dashboard' ), $current_user->id , array( 'public' => 0 ), $current_site->id );				$wpdb->show_errors();			} else {				$dashboard_blog_id = $blog_details->blog_id;			}		}		if ( is_wp_error( $dashboard_blog_id ) )			wp_die( __( 'Problem creating dashboard site: ' ) . $dashboard_blog_id->get_error_message() );		if ( $_POST['dashboard_blog_orig'] != $_POST['dashboard_blog'] ) {			$users = get_users_of_blog( get_site_option( 'dashboard_blog' ) );			$move_users = array();			foreach ( (array)$users as $user ) {				$user_meta_value = unserialize( $user->meta_value );				if ( is_array( $user_meta_value ) && array_pop( array_keys( $user_meta_value ) ) == 'subscriber' )					$move_users[] = $user->user_id;			}			if ( false == empty( $move_users ) ) {				foreach ( (array)$move_users as $user_id ) {					remove_user_from_blog($user_id, get_site_option( 'dashboard_blog' ) );					add_user_to_blog( $dashboard_blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );					update_user_meta( $user_id, 'primary_blog', $dashboard_blog_id );				}			}		}		update_site_option( 'dashboard_blog', $dashboard_blog_id );		$options = array( 'registrationnotification', 'registration', 'add_new_users', 'menu_items', 'mu_media_buttons', 'upload_space_check_disabled', 'blog_upload_space', 'upload_filetypes', 'site_name', 'first_post', 'first_page', 'first_comment', 'first_comment_url', 'first_comment_author', 'welcome_email', 'welcome_user_email', 'fileupload_maxk', 'admin_notice_feed', 'global_terms_enabled' );		$checked_options = array( 'mu_media_buttons' => array(), 'menu_items' => array(), 'registrationnotification' => 'no', 'upload_space_check_disabled' => 1 );		foreach ( $checked_options as $option_name => $option_unchecked_value ) {			if ( ! isset( $_POST[$option_name] ) )				$_POST[$option_name] = $option_unchecked_value;		}		foreach ( $options as $option_name ) {			if ( ! isset($_POST[$option_name]) )				continue;			$value = stripslashes_deep( $_POST[$option_name] );			update_site_option( $option_name, $value );		}		// Update more options here		do_action( 'update_wpmu_options' );		wp_redirect( add_query_arg( 'updated', 'true', admin_url( 'ms-options.php' ) ) );		exit();	break;	case 'addblog':		check_admin_referer( 'add-blog', '_wpnonce_add-blog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['blog'] ) == false )			wp_die(  __( 'Can&#8217;t create an empty site.' ) );		$blog = $_POST['blog'];		$domain = '';		if ( ! preg_match( '/(--)/', $blog['domain'] ) && preg_match( '|^([a-zA-Z0-9-])+$|', $blog['domain'] ) )			$domain = strtolower( $blog['domain'] );		// If not a subdomain install, make sure the domain isn't a reserved word		if ( ! is_subdomain_install() ) {			$subdirectory_reserved_names = apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) );			if ( in_array( $domain, $subdirectory_reserved_names ) )				wp_die( sprintf( __('The following words are reserved for use by WordPress functions and cannot be used as blog names: <code>%s</code>' ), implode( '</code>, <code>', $subdirectory_reserved_names ) ) );		}		$email = sanitize_email( $blog['email'] );		$title = $blog['title'];		if ( empty( $domain ) )			wp_die( __( 'Missing or invalid site address.' ) );		if ( empty( $email ) )			wp_die( __( 'Missing email address.' ) );		if ( !is_email( $email ) )			wp_die( __( 'Invalid email address.' ) );		if ( is_subdomain_install() ) {			$newdomain = $domain . '.' . preg_replace( '|^www\.|', '', $current_site->domain );			$path = $base;		} else {			$newdomain = $current_site->domain;			$path = $base . $domain . '/';		}		$password = 'N/A';		$user_id = email_exists($email);		if ( !$user_id ) { // Create a new user with a random password			$password = wp_generate_password();			$user_id = wpmu_create_user( $domain, $password, $email );			if ( false == $user_id )				wp_die( __( 'There was an error creating the user.' ) );			else				wp_new_user_notification( $user_id, $password );		}		$wpdb->hide_errors();		$id = wpmu_create_blog( $newdomain, $path, $title, $user_id , array( 'public' => 1 ), $current_site->id );		$wpdb->show_errors();		if ( !is_wp_error( $id ) ) {			$dashboard_blog = get_dashboard_blog();			if ( !is_super_admin( $user_id ) && get_user_option( 'primary_blog', $user_id ) == $dashboard_blog->blog_id )				update_user_option( $user_id, 'primary_blog', $id, true );			$content_mail = sprintf( __( "New site created by %1s\n\nAddress: http://%2s\nName: %3s"), $current_user->user_login , $newdomain . $path, stripslashes( $title ) );			wp_mail( get_site_option('admin_email'),  sprintf( __( '[%s] New Site Created' ), $current_site->site_name ), $content_mail, 'From: "Site Admin" <' . get_site_option( 'admin_email' ) . '>' );			wpmu_welcome_notification( $id, $user_id, $password, $title, array( 'public' => 1 ) );			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add-blog' ), wp_get_referer() ) );			exit();		} else {			wp_die( $id->get_error_message() );		}	break;	case 'updateblog':		check_admin_referer( 'editblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">sites page</a>', esc_url( admin_url( 'ms-sites.php' ) ) ) ) );		switch_to_blog( $id );		// themes		$allowedthemes = array();		if ( isset($_POST['theme']) && is_array( $_POST['theme'] ) ) {			foreach ( $_POST['theme'] as $theme => $val ) {				if ( 'on' == $val )					$allowedthemes[$theme] = true;			}		}		update_option( 'allowedthemes',  $allowedthemes );		// options		if ( is_array( $_POST['option'] ) ) {			$c = 1;			$count = count( $_POST['option'] );			foreach ( (array) $_POST['option'] as $key => $val ) {				if ( $key === 0 || is_array( $val ) )					continue; // Avoids "0 is a protected WP option and may not be modified" error when edit blog options				if ( $c == $count )					update_option( $key, stripslashes( $val ) );				else					update_option( $key, stripslashes( $val ), false ); // no need to refresh blog details yet				$c++;			}		}		// home and siteurl		if ( isset( $_POST['update_home_url'] ) && $_POST['update_home_url'] == 'update' ) {			$blog_address = get_blogaddress_by_domain( $_POST['blog']['domain'], $_POST['blog']['path'] );			if ( get_option( 'siteurl' ) !=  $blog_address )				update_option( 'siteurl', $blog_address );			if ( get_option( 'home' ) != $blog_address )				update_option( 'home', $blog_address );		}		// rewrite rules can't be flushed during switch to blog		delete_option( 'rewrite_rules' );		// update blogs table		$blog_data = stripslashes_deep( $_POST['blog'] );		update_blog_details( $id, $blog_data );		// get blog prefix		$blog_prefix = $wpdb->get_blog_prefix( $id );		// user roles		if ( isset( $_POST['role'] ) && is_array( $_POST['role'] ) == true ) {			$newroles = $_POST['role'];			reset( $newroles );			foreach ( (array) $newroles as $userid => $role ) {				$user = new WP_User( $userid );				if ( ! $user )					continue;				$user->for_blog( $id );				$user->set_role( $role );			}		}		// remove user		if ( isset( $_POST['blogusers'] ) && is_array( $_POST['blogusers'] ) ) {			reset( $_POST['blogusers'] );			foreach ( (array) $_POST['blogusers'] as $key => $val )				remove_user_from_blog( $key, $id );		}		// change password		if ( isset( $_POST['user_password'] ) && is_array( $_POST['user_password'] ) ) {			reset( $_POST['user_password'] );			$newroles = $_POST['role'];			foreach ( (array) $_POST['user_password'] as $userid => $pass ) {				unset( $_POST['role'] );				$_POST['role'] = $newroles[ $userid ];				if ( $pass != '' ) {					$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );					$userdata = get_userdata($userid);					$_POST['pass1'] = $_POST['pass2'] = $pass;					$_POST['email'] = $userdata->user_email;					$_POST['rich_editing'] = $userdata->rich_editing;					edit_user( $userid );					if ( $cap == null )						$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );				}			}			unset( $_POST['role'] );			$_POST['role'] = $newroles;		}		// add user		if ( !empty( $_POST['newuser'] ) ) {			$newuser = $_POST['newuser'];			$userid = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM " . $wpdb->users . " WHERE user_login = %s", $newuser ) );			if ( $userid ) {				$user = $wpdb->get_var( "SELECT user_id FROM " . $wpdb->usermeta . " WHERE user_id='$userid' AND meta_key='{$blog_prefix}capabilities'" );				if ( $user == false )					add_user_to_blog( $id, $userid, $_POST['new_role'] );			}		}		do_action( 'wpmu_update_blog_options' );		restore_current_blog();		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'editblog', 'id' => $id ), wp_get_referer() ) );	break;	case 'deleteblog':		check_admin_referer('deleteblog');		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( $id != '0' && $id != $current_site->blog_id )			wpmu_delete_blog( $id, true );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'delete' ), wp_get_referer() ) );		exit();	break;	case 'allblogs':		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' );			if ( ! current_user_can( 'manage_sites' ) )				wp_die( __( 'You do not have permission to access this page.' ) );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allblogs'] as $key => $val ) {				if ( $val != '0' && $val != $current_site->blog_id ) {					switch ( $doaction ) {						case 'delete':							$blogfunction = 'all_delete';							wpmu_delete_blog( $val, true );						break;						case 'spam':							$blogfunction = 'all_spam';							update_blog_status( $val, 'spam', '1', 0 );							set_time_limit( 60 );						break;						case 'notspam':							$blogfunction = 'all_notspam';							update_blog_status( $val, 'spam', '0', 0 );							set_time_limit( 60 );						break;					}				} else {					wp_die( __( 'You are not allowed to change the current site.' ) );				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $blogfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-sites.php' ) );		}	break;	case 'archiveblog':		check_admin_referer( 'archiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'archived', '1' );		do_action( 'archive_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'archive' ), wp_get_referer() ) );		exit();	break;	case 'unarchiveblog':		check_admin_referer( 'unarchiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'unarchive_blog', $id );		update_blog_status( $id, 'archived', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unarchive' ), wp_get_referer() ) );		exit();	break;	case 'activateblog':		check_admin_referer( 'activateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'deleted', '0' );		do_action( 'activate_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'activate' ), wp_get_referer() ) );		exit();	break;	case 'deactivateblog':		check_admin_referer( 'deactivateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'deactivate_blog', $id );		update_blog_status( $id, 'deleted', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'deactivate' ), wp_get_referer() ) );		exit();	break;	case 'unspamblog':		check_admin_referer( 'unspamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unspam' ), wp_get_referer() ) );		exit();	break;	case 'spamblog':		check_admin_referer( 'spamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'spam' ), wp_get_referer() ) );		exit();	break;	// Themes    case 'updatethemes':	if ( ! current_user_can( 'manage_network_themes' ) )		wp_die( __( 'You do not have permission to access this page.' ) );    	if ( is_array( $_POST['theme'] ) ) {			$themes = get_themes();			reset( $themes );			$allowed_themes = array();			foreach ( (array) $themes as $key => $theme ) {				if ( $_POST['theme'][ esc_html( $theme['Stylesheet'] ) ] == 'enabled' )					$allowed_themes[ esc_html( $theme['Stylesheet'] ) ] = true;			}			update_site_option( 'allowedthemes', $allowed_themes );		}		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'themes' ),  wp_get_referer() ) );		exit();	break;	// Common	case 'confirm':		if ( !headers_sent() ) {			nocache_headers();			header( 'Content-Type: text/html; charset=utf-8' );		}		if ( $current_site->blog_id == $id )			wp_die( __( 'You are not allowed to change the current site.' ) );		?>		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">		<html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>>			<head>				<title><?php _e( 'WordPress &rsaquo; Confirm your action' ); ?></title>				<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />				<?php				wp_admin_css( 'install', true );				wp_admin_css( 'ie', true );				?>			</head>			<body>				<h1 id="logo"><img alt="WordPress" src="<?php echo esc_attr( admin_url( 'images/wordpress-logo.png' ) ); ?>" /></h1>				<form action="ms-edit.php?action=<?php echo esc_attr( $_GET['action2'] ) ?>" method="post">					<input type="hidden" name="action" value="<?php echo esc_attr( $_GET['action2'] ) ?>" />					<input type="hidden" name="id" value="<?php echo esc_attr( $id ); ?>" />					<input type="hidden" name="_wp_http_referer" value="<?php echo esc_attr( wp_get_referer() ); ?>" />					<?php wp_nonce_field( $_GET['action2'], '_wpnonce', false ); ?>					<p><?php echo esc_html( stripslashes( $_GET['msg'] ) ); ?></p>					<p class="submit"><input class="button" type="submit" value="<?php _e( 'Confirm' ); ?>" /></p>				</form>			</body>		</html>		<?php	break;	// Users	case 'deleteuser':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		check_admin_referer( 'deleteuser' );		if ( $id != '0' && $id != '1' ) {			$_POST['allusers'] = array( $id ); // confirm_delete_users() can only handle with arrays			$title = __( 'Users' );			$parent_file = 'ms-admin.php';			require_once( 'admin-header.php' );			echo '<div class="wrap">';			confirm_delete_users( $_POST['allusers'] );			echo '</div>';            require_once( 'admin-footer.php' );            exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'allusers':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-users', '_wpnonce_bulk-ms-users' );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allusers'] as $key => $val ) {				if ( !empty( $val ) ) {					switch ( $doaction ) {						case 'delete':							$title = __( 'Users' );							$parent_file = 'ms-admin.php';							require_once( 'admin-header.php' );							echo '<div class="wrap">';							confirm_delete_users( $_POST['allusers'] );							echo '</div>';				            require_once( 'admin-footer.php' );				            exit();       					break;						case 'spam':							$user = new WP_User( $val );							if ( in_array( $user->user_login, get_super_admins() ) )								wp_die( sprintf( __( 'Warning! User cannot be modified. The user %s is a network administrator.' ), esc_html( $user->user_login ) ) );							$userfunction = 'all_spam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details ) {								if ( $details->userblog_id != $current_site->blog_id ) // main blog not a spam !									update_blog_status( $details->userblog_id, 'spam', '1' );							}							update_user_status( $val, 'spam', '1', 1 );						break;						case 'notspam':							$userfunction = 'all_notspam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details )								update_blog_status( $details->userblog_id, 'spam', '0' );							update_user_status( $val, 'spam', '0', 1 );						break;					}				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $userfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'dodelete':		check_admin_referer( 'ms-users-delete' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( ! empty( $_POST['blog'] ) && is_array( $_POST['blog'] ) ) {			foreach ( $_POST['blog'] as $id => $users ) {				foreach ( $users as $blogid => $user_id ) {					if ( ! empty( $_POST['delete'] ) && 'reassign' == $_POST['delete'][$blogid][$id] )						remove_user_from_blog( $id, $blogid, $user_id );					else						remove_user_from_blog( $id, $blogid );				}			}		}		$i = 0;		if ( is_array( $_POST['user'] ) && ! empty( $_POST['user'] ) )			foreach( $_POST['user'] as $id ) {				wpmu_delete_user( $id );				$i++;			}		if ( $i == 1 )			$deletefunction = 'delete';		else			$deletefunction = 'all_delete';		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $deletefunction ), admin_url( 'ms-users.php' ) ) );	break;	case 'adduser':		check_admin_referer( 'add-user', '_wpnonce_add-user' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['user'] ) == false )			wp_die( __( 'Cannot create an empty user.' ) );		$user = $_POST['user'];		if ( empty($user['username']) && empty($user['email']) )			wp_die( __( 'Missing username and email.' ) );		elseif ( empty($user['username']) )			wp_die( __( 'Missing username.' ) );		elseif ( empty($user['email']) )			wp_die( __( 'Missing email.' ) );		$password = wp_generate_password();		$user_id = wpmu_create_user( esc_html( strtolower( $user['username'] ) ), $password, esc_html( $user['email'] ) );		if ( false == $user_id ) 			wp_die( __( 'Duplicated username or email address.' ) );		else			wp_new_user_notification( $user_id, $password );		if ( get_site_option( 'dashboard_blog' ) == false )			add_user_to_blog( $current_site->blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( get_site_option( 'dashboard_blog' ), $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add' ), wp_get_referer() ) );		exit();	break;	default:		wp_redirect( admin_url( 'ms-admin.php' ) );	break;}?>
<?php/** * Writing settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Writing Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can submit content in several different ways; this screen holds the settings for all of them. The top section controls the editor within these administration screens, while the rest control external publishing methods. For more information on any of these methods, use the documentation links below.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Writing_SubPanel" target="_blank">Writing Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('writing'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="default_post_edit_rows"> <?php _e('Size of the post box') ?></label></th><td><input name="default_post_edit_rows" type="text" id="default_post_edit_rows" value="<?php form_option('default_post_edit_rows'); ?>" class="small-text" /><?php _e('lines') ?></td></tr><tr valign="top"><th scope="row"><?php _e('Formatting') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Formatting') ?></span></legend><label for="use_smilies"><input name="use_smilies" type="checkbox" id="use_smilies" value="1" <?php checked('1', get_option('use_smilies')); ?> /><?php _e('Convert emoticons like <code>:-)</code> and <code>:-P</code> to graphics on display') ?></label><br /><label for="use_balanceTags"><input name="use_balanceTags" type="checkbox" id="use_balanceTags" value="1" <?php checked('1', get_option('use_balanceTags')); ?> /> <?php _e('WordPress should correct invalidly nested XHTML automatically') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_category"><?php _e('Default Post Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_category', 'orderby' => 'name', 'selected' => get_option('default_category'), 'hierarchical' => true));?></td></tr><tr valign="top"><th scope="row"><label for="default_link_category"><?php _e('Default Link Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_link_category', 'orderby' => 'name', 'selected' => get_option('default_link_category'), 'hierarchical' => true, 'taxonomy' => 'link_category'));?></td></tr><?php do_settings_fields('writing', 'default'); ?></table><h3 class="title"><?php _e('Press This') ?></h3><p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p><p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p><p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p><p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p><?php if ( apply_filters( 'enable_post_by_email_configuration', true ) ) { ?><h3><?php _e('Post via e-mail') ?></h3><p><?php printf(__('To post to WordPress by e-mail you must set up a secret e-mail account with POP3 access. Any mail received at this address will be posted, so it&#8217;s a good idea to keep this address very secret. Here are three random strings you could use: <kbd>%s</kbd>, <kbd>%s</kbd>, <kbd>%s</kbd>.'), wp_generate_password(8, false), wp_generate_password(8, false), wp_generate_password(8, false)) ?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="mailserver_url"><?php _e('Mail Server') ?></label></th><td><input name="mailserver_url" type="text" id="mailserver_url" value="<?php form_option('mailserver_url'); ?>" class="regular-text code" /><label for="mailserver_port"><?php _e('Port') ?></label><input name="mailserver_port" type="text" id="mailserver_port" value="<?php form_option('mailserver_port'); ?>" class="small-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_login"><?php _e('Login Name') ?></label></th><td><input name="mailserver_login" type="text" id="mailserver_login" value="<?php form_option('mailserver_login'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_pass"><?php _e('Password') ?></label></th><td><input name="mailserver_pass" type="text" id="mailserver_pass" value="<?php form_option('mailserver_pass'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="default_email_category"><?php _e('Default Mail Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_email_category', 'orderby' => 'name', 'selected' => get_option('default_email_category'), 'hierarchical' => true));?></td></tr><?php do_settings_fields('writing', 'post_via_email'); ?></table><?php } ?><h3><?php _e('Remote Publishing') ?></h3><p><?php printf(__('To post to WordPress from a desktop blogging client or remote website that uses the Atom Publishing Protocol or one of the XML-RPC publishing interfaces you must enable them below.')) ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Atom Publishing Protocol') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Atom Publishing Protocol') ?></span></legend><label for="enable_app"><input name="enable_app" type="checkbox" id="enable_app" value="1" <?php checked('1', get_option('enable_app')); ?> /><?php _e('Enable the Atom Publishing Protocol.') ?></label><br /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('XML-RPC') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('XML-RPC') ?></span></legend><label for="enable_xmlrpc"><input name="enable_xmlrpc" type="checkbox" id="enable_xmlrpc" value="1" <?php checked('1', get_option('enable_xmlrpc')); ?> /><?php _e('Enable the WordPress, Movable Type, MetaWeblog and Blogger XML-RPC publishing protocols.') ?></label><br /></fieldset></td></tr><?php do_settings_fields('writing', 'remote_publishing'); ?></table><?php if ( apply_filters( 'enable_update_services_configuration', true ) ) { ?><h3><?php _e('Update Services') ?></h3><?php if ( get_option('blog_public') ) : ?><p><label for="ping_sites"><?php _e('When you publish a new post, WordPress automatically notifies the following site update services. For more about this, see <a href="http://codex.wordpress.org/Update_Services">Update Services</a> on the Codex. Separate multiple service <abbr title="Universal Resource Locator">URL</abbr>s with line breaks.') ?></label></p><textarea name="ping_sites" id="ping_sites" class="large-text code" rows="3"><?php form_option('ping_sites'); ?></textarea><?php else : ?>	<p><?php printf(__('WordPress is not notifying any <a href="http://codex.wordpress.org/Update_Services">Update Services</a> because of your site&#8217;s <a href="%s">privacy settings</a>.'), 'options-privacy.php'); ?></p><?php endif; ?><?php } // multisite ?><?php do_settings_sections('writing'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * WordPress Administration for Navigation Menus * Interface functions * * @version 2.0.0 * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once( 'admin.php' );// Load all the nav menu interface functionsrequire_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );if ( ! current_theme_supports( 'menus' ) && ! current_theme_supports( 'widgets' ) )	wp_die( __( 'Your theme does not support navigation menus or widgets.' ) );// Permissions Checkif ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );// Nav Menu CSSwp_admin_css( 'nav-menu' );// jQuerywp_enqueue_script( 'jquery' );wp_enqueue_script( 'jquery-ui-draggable' );wp_enqueue_script( 'jquery-ui-droppable' );wp_enqueue_script( 'jquery-ui-sortable' );// Nav Menu functionswp_enqueue_script( 'nav-menu' );// Metaboxeswp_enqueue_script( 'common' );wp_enqueue_script( 'wp-lists' );wp_enqueue_script( 'postbox' );// Container for any messages displayed to the user$messages = array();// Container that stores the name of the active menu$nav_menu_selected_title = '';// The menu id of the current menu being edited$nav_menu_selected_id = isset( $_REQUEST['menu'] ) ? (int) $_REQUEST['menu'] : 0;// Allowed actions: add, update, delete$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'edit';switch ( $action ) {	case 'add-menu-item':		check_admin_referer( 'add-menu_item', 'menu-settings-column-nonce' );		if ( isset( $_REQUEST['nav-menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_REQUEST['menu-locations'] ) );		elseif ( isset( $_REQUEST['menu-item'] ) )			wp_save_nav_menu_items( $nav_menu_selected_id, $_REQUEST['menu-item'] );		break;	case 'move-down-menu-item' :		// moving down a menu item is the same as moving up the next in order		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// get next in order				if (					isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1] )				) {					$next_item_id = $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1];					$next_item_data = (array) wp_setup_nav_menu_item( get_post( $next_item_id ) );					// if not siblings of same parent, bubble menu item up but keep order					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						(							empty( $next_item_data['menu_item_parent'] ) ||							$next_item_data['menu_item_parent'] != $menu_item_data['menu_item_parent']						)					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						}					// make menu item a child of its next sibling					} else {						$next_item_data['menu_order'] = $next_item_data['menu_order'] - 1;						$menu_item_data['menu_order'] = $menu_item_data['menu_order'] + 1;						$menu_item_data['menu_item_parent'] = $next_item_data['ID'];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);						wp_update_post($next_item_data);					}				// the item is last but still has a parent, so bubble up				} elseif (					! empty( $menu_item_data['menu_item_parent'] ) &&					in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids )				) {					$menu_item_data['menu_item_parent'] = (int) get_post_meta( $menu_item_data['menu_item_parent'], '_menu_item_menu_item_parent', true);					update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );				}			}		}		break;	case 'move-up-menu-item' :		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// if this menu item is not first				if ( ! empty( $dbids_to_orders[$menu_item_id] ) && ! empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ) {					// if this menu item is a child of the previous					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) &&						isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) &&						( $menu_item_data['menu_item_parent'] == $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] )					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							// if there is something before the parent and parent a child of it, make menu item a child also of it							if (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] ) &&								! empty( $parent_data['menu_item_parent'] )							) {								$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							// else if there is something before parent and parent not a child of it, make menu item a child of that something's parent							} elseif (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] )							) {								$_possible_parent_id = (int) get_post_meta( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1], '_menu_item_menu_item_parent', true);								if ( in_array( $_possible_parent_id, array_keys( $dbids_to_orders ) ) )									$menu_item_data['menu_item_parent'] = $_possible_parent_id;								else									$menu_item_data['menu_item_parent'] = 0;							// else there isn't something before the parent							} else {								$menu_item_data['menu_item_parent'] = 0;							}							// set former parent's [menu_order] to that of menu-item's							$parent_data['menu_order'] = $parent_data['menu_order'] + 1;							// set menu-item's [menu_order] to that of former parent							$menu_item_data['menu_order'] = $menu_item_data['menu_order'] - 1;							// save changes							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );							wp_update_post($menu_item_data);							wp_update_post($parent_data);						}					// else this menu item is not a child of the previous					} elseif (						empty( $menu_item_data['menu_order'] ) ||						empty( $menu_item_data['menu_item_parent'] ) ||						! in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) ||						empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ||						$orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] != $menu_item_data['menu_item_parent']					) {						// just make it a child of the previous; keep the order						$menu_item_data['menu_item_parent'] = (int) $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);					}				}			}		}		break;	case 'delete-menu-item':		$menu_item_id = (int) $_REQUEST['menu-item'];		check_admin_referer( 'delete-menu_item_' . $menu_item_id );		if ( is_nav_menu_item( $menu_item_id ) && wp_delete_post( $menu_item_id, true ) )			$messages[] = '<div id="message" class="updated"><p>' . __('The menu item has been successfully deleted.') . '</p></div>';		break;	case 'delete':		check_admin_referer( 'delete-nav_menu-' . $nav_menu_selected_id );		if ( is_nav_menu( $nav_menu_selected_id ) ) {			$deleted_nav_menu = wp_get_nav_menu_object( $nav_menu_selected_id );			$delete_nav_menu = wp_delete_nav_menu( $nav_menu_selected_id );			if ( is_wp_error($delete_nav_menu) ) {				$messages[] = '<div id="message" class="error"><p>' . $delete_nav_menu->get_error_message() . '</p></div>';			} else {				// Remove this menu from any locations.				$locations = get_theme_mod( 'nav_menu_locations' );				foreach ( (array) $locations as $location => $menu_id ) {					if ( $menu_id == $nav_menu_selected_id )						$locations[ $location ] = 0;				}				set_theme_mod( 'nav_menu_locations', $locations );				$messages[] = '<div id="message" class="updated"><p>' . __('The menu has been successfully deleted.') . '</p></div>';				// Select the next available menu				$nav_menu_selected_id = 0;				$_nav_menus = wp_get_nav_menus( array('orderby' => 'name') );				foreach( $_nav_menus as $index => $_nav_menu ) {					if ( strcmp( $_nav_menu->name, $deleted_nav_menu->name ) >= 0					 || $index == count( $_nav_menus ) - 1 ) {						$nav_menu_selected_id = $_nav_menu->term_id;						break;					}				}			}			unset( $delete_nav_menu, $deleted_nav_menu, $_nav_menus );		} else {			// Reset the selected menu			$nav_menu_selected_id = 0;			unset( $_REQUEST['menu'] );		}		break;	case 'update':		check_admin_referer( 'update-nav_menu', 'update-nav-menu-nonce' );		// Update menu theme locations		if ( isset( $_POST['menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );		// Add Menu		if ( 0 == $nav_menu_selected_id ) {			$new_menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( $new_menu_title ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( 0, array('menu-name' => $new_menu_title) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					if ( ( $_menu_locations = get_registered_nav_menus() ) && 1 == count( wp_get_nav_menus() ) )						set_theme_mod( 'nav_menu_locations', array( key( $_menu_locations ) => $_nav_menu_selected_id ) );					unset( $_menu_locations );					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_id = $_nav_menu_selected_id;					$nav_menu_selected_title = $_menu_object->name;					$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been successfully created.'), $nav_menu_selected_title ) . '</p></div>';				}			} else {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';			}		// update existing menu		} else {			$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );			$menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( ! $menu_title ) {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';				$menu_title = $_menu_object->name;			}			if ( ! is_wp_error( $_menu_object ) ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( $nav_menu_selected_id, array( 'menu-name' => $menu_title ) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$_menu_object = $_nav_menu_selected_id;					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_title = $_menu_object->name;				}			}			// Update menu items			if ( ! is_wp_error( $_menu_object ) ) {				$unsorted_menu_items = wp_get_nav_menu_items( $nav_menu_selected_id, array('orderby' => 'ID', 'output' => ARRAY_A, 'output_key' => 'ID', 'post_status' => 'draft,publish') );				$menu_items = array();				// Index menu items by db ID				foreach( $unsorted_menu_items as $_item )					$menu_items[$_item->db_id] = $_item;				$post_fields = array( 'menu-item-db-id', 'menu-item-object-id', 'menu-item-object', 'menu-item-parent-id', 'menu-item-position', 'menu-item-type', 'menu-item-title', 'menu-item-url', 'menu-item-description', 'menu-item-attr-title', 'menu-item-target', 'menu-item-classes', 'menu-item-xfn' );				wp_defer_term_counting(true);				// Loop through all the menu items' POST variables				if ( ! empty( $_POST['menu-item-db-id'] ) ) {					foreach( (array) $_POST['menu-item-db-id'] as $_key => $k ) {						// Menu item title can't be blank						if ( empty( $_POST['menu-item-title'][$_key] ) )							continue;						$args = array();						foreach ( $post_fields as $field )							$args[$field] = isset( $_POST[$field][$_key] ) ? $_POST[$field][$_key] : '';						$menu_item_db_id = wp_update_nav_menu_item( $nav_menu_selected_id, ( $_POST['menu-item-db-id'][$_key] != $_key ? 0 : $_key ), $args );						if ( is_wp_error( $menu_item_db_id ) )							$messages[] = '<div id="message" class="error"><p>' . $menu_item_db_id->get_error_message() . '</p></div>';						elseif ( isset( $menu_items[$menu_item_db_id] ) )							unset( $menu_items[$menu_item_db_id] );					}				}				// Remove menu items from the menu that weren't in $_POST				if ( ! empty( $menu_items ) ) {					foreach ( array_keys( $menu_items ) as $menu_item_id ) {						if ( is_nav_menu_item( $menu_item_id ) ) {							wp_delete_post( $menu_item_id );						}					}				}				// Store 'auto-add' pages.				$auto_add = ! empty( $_POST['auto-add-pages'] );				$nav_menu_option = (array) get_option( 'nav_menu_options' );				if ( ! isset( $nav_menu_option['auto_add'] ) )					$nav_menu_option['auto_add'] = array();				if ( $auto_add ) {					if ( ! in_array( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) )						$nav_menu_option['auto_add'][] = $nav_menu_selected_id;				} else {					if ( false !== ( $key = array_search( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) ) )						unset( $nav_menu_option['auto_add'][$key] );				}				// Remove nonexistent/deleted menus				$nav_menu_option['auto_add'] = array_intersect( $nav_menu_option['auto_add'], wp_get_nav_menus( array( 'fields' => 'ids' ) ) );				update_option( 'nav_menu_options', $nav_menu_option );				wp_defer_term_counting(false);				do_action( 'wp_update_nav_menu', $nav_menu_selected_id );				$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been updated.'), $nav_menu_selected_title ) . '</p></div>';				unset( $menu_items, $unsorted_menu_items );			}		}		break;}// Get all nav menus$nav_menus = wp_get_nav_menus( array('orderby' => 'name') );// Get recently edited nav menu$recently_edited = (int) get_user_option( 'nav_menu_recently_edited' );// If there was no recently edited menu, and $nav_menu_selected_id is a nav menu, update recently edited menu.if ( !$recently_edited && is_nav_menu( $nav_menu_selected_id ) ) {	$recently_edited = $nav_menu_selected_id;// Else if $nav_menu_selected_id is not a menu and not requesting that we create a new menu, but $recently_edited is a menu, grab that one.} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && is_nav_menu( $recently_edited ) ) {	$nav_menu_selected_id = $recently_edited;// Else try to grab the first menu from the menus list} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && ! empty($nav_menus) ) {	$nav_menu_selected_id = $nav_menus[0]->term_id;}// Update the user's settingif ( $nav_menu_selected_id != $recently_edited && is_nav_menu( $nav_menu_selected_id ) )	update_user_meta( $current_user->ID, 'nav_menu_recently_edited', $nav_menu_selected_id );// If there's a menu, get its name.if ( ! $nav_menu_selected_title && is_nav_menu( $nav_menu_selected_id ) ) {	$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );	$nav_menu_selected_title = ! is_wp_error( $_menu_object ) ? $_menu_object->name : '';}// Generate truncated menu namesforeach( (array) $nav_menus as $key => $_nav_menu ) {	$_nav_menu->truncated_name = trim( wp_html_excerpt( $_nav_menu->name, 40 ) );	if ( $_nav_menu->truncated_name != $_nav_menu->name )		$_nav_menu->truncated_name .= '&hellip;';	$nav_menus[$key]->truncated_name = $_nav_menu->truncated_name;}// Ensure the user will be able to scroll horizontally// by adding a class for the max menu depth.global $_wp_nav_menu_max_depth;$_wp_nav_menu_max_depth = 0;// Calling wp_get_nav_menu_to_edit generates $_wp_nav_menu_max_depthif ( is_nav_menu( $nav_menu_selected_id ) )	$edit_markup = wp_get_nav_menu_to_edit( $nav_menu_selected_id  );function wp_nav_menu_max_depth() {	global $_wp_nav_menu_max_depth;	return "menu-max-depth-$_wp_nav_menu_max_depth";}add_action('admin_body_class','wp_nav_menu_max_depth');wp_nav_menu_setup();wp_initial_nav_menu_meta_boxes();if ( ! current_theme_supports( 'menus' ) && ! wp_get_nav_menus() )	echo '<div id="message" class="updated"><p>' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p></div>';$help =  '<p>' . __('This feature is new in version 3.0; to use a custom menu in place of your theme&#8217;s default menus, support for this feature must be registered in the theme&#8217;s functions.php file. If your theme does not support the custom menus feature yet (the new default theme, Twenty Ten, does), you can learn about adding support yourself by following the below link.') . '</p>';$help .= '<p>' . __('You can create custom menus for your site. These menus may contain links to pages, categories, custom links or other content types (use the Screen Options tab to decide which ones to show on the screen). You can specify a different navigation label for a menu item as well as other attributes. You can create multiple menus. If your theme includes more than one menu, you can choose which custom menu to associate with each. You can also use custom menus in conjunction with the Custom Menus widget.') . '</p>';$help .= '<p>' . __('To create a new custom menu, click on the + tab, give the menu a name, and click Create Menu. Next, add menu items from the appropriate boxes. You&#8217;ll be able to edit the information for each menu item, and can drag and drop to put them in order. You can also drag a menu item a little to the right to make it a submenu, to create menus with hierarchy. You&#8217;ll see when the position of the drop target shifts over to create the nested placement. Don&#8217;t forget to click Save when you&#8217;re finished.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Menus_SubPanel" target="_blank">Menus Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// Get the admin headerrequire_once( 'admin-header.php' );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e('Menus'); ?></h2>	<?php	foreach( $messages as $message ) :		echo $message . "\n";	endforeach;	?>	<div id="nav-menus-frame">	<div id="menu-settings-column" class="metabox-holder<?php if ( !$nav_menu_selected_id ) { echo ' metabox-holder-disabled'; } ?>">		<form id="nav-menu-meta" action="<?php echo admin_url( 'nav-menus.php' ); ?>" class="nav-menu-meta" method="post" enctype="multipart/form-data">			<input type="hidden" name="menu" id="nav-menu-meta-object-id" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />			<input type="hidden" name="action" value="add-menu-item" />			<?php wp_nonce_field( 'add-menu_item', 'menu-settings-column-nonce' ); ?>			<?php do_meta_boxes( 'nav-menus', 'side', null ); ?>		</form>	</div><!-- /#menu-settings-column -->	<div id="menu-management-liquid">		<div id="menu-management">			<div id="select-nav-menu-container" class="hide-if-js">				<form id="select-nav-menu" action="">					<strong><label for="select-nav-menu"><?php esc_html_e( 'Select Menu:' ); ?></label></strong>					<select class="select-nav-menu" name="menu">						<?php foreach( (array) $nav_menus as $_nav_menu ) : ?>							<option value="<?php echo esc_attr($_nav_menu->term_id) ?>" <?php selected($nav_menu_selected_id, $_nav_menu->term_id); ?>>								<?php echo esc_html( $_nav_menu->truncated_name ); ?>							</option>						<?php endforeach; ?>						<option value="0"><?php esc_html_e('Add New Menu'); ?></option>					</select>					<input type="hidden" name="action" value="edit" />					<input class="button-secondary" name="select_menu" type="submit" value="<?php esc_attr_e('Select'); ?>" />				</form>			</div>			<div class="nav-tabs-wrapper">			<div class="nav-tabs">				<?php				foreach( (array) $nav_menus as $_nav_menu ) :					if ( $nav_menu_selected_id == $_nav_menu->term_id ) : ?><span class="nav-tab nav-tab-active">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</span><?php else : ?><a href="<?php							echo esc_url(add_query_arg(								array(									'action' => 'edit',									'menu' => $_nav_menu->term_id,								),								admin_url( 'nav-menus.php' )							));						?>" class="nav-tab hide-if-no-js">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</a><?php endif;				endforeach;				if ( 0 == $nav_menu_selected_id ) : ?><span class="nav-tab menu-add-new nav-tab-active">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</span><?php else : ?><a href="<?php					echo esc_url(add_query_arg(						array(							'action' => 'edit',							'menu' => 0,						),						admin_url( 'nav-menus.php' )					));				?>" class="nav-tab menu-add-new">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</a><?php endif; ?>			</div>			</div>			<div class="menu-edit">				<form id="update-nav-menu" action="<?php echo admin_url( 'nav-menus.php' ); ?>" method="post" enctype="multipart/form-data">					<div id="nav-menu-header">						<div id="submitpost" class="submitbox">							<div class="major-publishing-actions">								<label class="menu-name-label howto open-label" for="menu-name">									<span><?php _e('Menu Name'); ?></span>									<input name="menu-name" id="menu-name" type="text" class="menu-name regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Enter menu name here'); ?>" value="<?php echo esc_attr( $nav_menu_selected_title  ); ?>" />								</label>								<?php if ( !empty( $nav_menu_selected_id ) ) :									if ( ! isset( $auto_add ) ) {										$auto_add = get_option( 'nav_menu_options' );										if ( ! isset( $auto_add['auto_add'] ) )											$auto_add = false;										elseif ( false !== array_search( $nav_menu_selected_id, $auto_add['auto_add'] ) )											$auto_add = true;										else											$auto_add = false;									}								?>								<div class="auto-add-pages">									<label class="howto"><input type="checkbox"<?php checked( $auto_add ); ?> name="auto-add-pages" value="1" /> <?php printf( __('Automatically add new top-level pages' ), esc_url( admin_url( 'edit.php?post_type=page' ) ) ); ?></label>								</div>								<?php endif; ?>								<br class="clear" />								<div class="publishing-action">									<input class="button-primary menu-save" name="save_menu" type="submit" value="<?php empty($nav_menu_selected_id) ? esc_attr_e('Create Menu') : esc_attr_e('Save Menu'); ?>" />								</div><!-- END .publishing-action -->								<?php if ( ! empty( $nav_menu_selected_id ) ) : ?>								<div class="delete-action">									<a class="submitdelete deletion menu-delete" href="<?php echo esc_url( wp_nonce_url( admin_url('nav-menus.php?action=delete&amp;menu=' . $nav_menu_selected_id), 'delete-nav_menu-' . $nav_menu_selected_id ) ); ?>"><?php _e('Delete Menu'); ?></a>								</div><!-- END .delete-action -->								<?php endif; ?>							</div><!-- END .major-publishing-actions -->						</div><!-- END #submitpost .submitbox -->						<?php						wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );						wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );						wp_nonce_field( 'update-nav_menu', 'update-nav-menu-nonce' );						?>						<input type="hidden" name="action" value="update" />						<input type="hidden" name="menu" id="menu" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />					</div><!-- END #nav-menu-header -->					<div id="post-body">						<div id="post-body-content">							<?php							if ( isset( $edit_markup ) ) {								if ( ! is_wp_error( $edit_markup ) )									echo $edit_markup;							} else if ( empty( $nav_menu_selected_id ) ) {								echo '<div class="post-body-plain">';								echo '<p>' . __('To create a custom menu, give it a name above and click Create Menu. Then choose items like pages, categories or custom links from the left column to add to this menu.') . '</p>';								echo '<p>' . __('After you have added your items, drag and drop to put them in the order you want. You can also click each item to reveal additional configuration options.') . '</p>';								echo '<p>' . __('When you have finished building your custom menu, make sure you click the Save Menu button.') . '</p>';								echo '</div>';							}							?>						</div><!-- /#post-body-content -->					</div><!-- /#post-body -->				</form><!-- /#update-nav-menu -->			</div><!-- /.menu-edit -->		</div><!-- /#menu-management -->	</div><!-- /#menu-management-liquid -->	</div><!-- /#nav-menus-frame --></div><!-- /.wrap--><?php include( 'admin-footer.php' ); ?>
<?php/** * General template tags that can go anywhere in a template. * * @package WordPress * @subpackage Template *//** * Load header template. * * Includes the header template for a theme or if a name is specified then a * specialised header will be included. * * For the parameter, if the file is called "header-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_header' action. * * @param string $name The name of the specialised header. */function get_header( $name = null ) {	do_action( 'get_header', $name );	$templates = array();	if ( isset($name) )		$templates[] = "header-{$name}.php";	$templates[] = "header.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/header.php');}/** * Load footer template. * * Includes the footer template for a theme or if a name is specified then a * specialised footer will be included. * * For the parameter, if the file is called "footer-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_footer' action. * * @param string $name The name of the specialised footer. */function get_footer( $name = null ) {	do_action( 'get_footer', $name );	$templates = array();	if ( isset($name) )		$templates[] = "footer-{$name}.php";	$templates[] = "footer.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/footer.php');}/** * Load sidebar template. * * Includes the sidebar template for a theme or if a name is specified then a * specialised sidebar will be included. * * For the parameter, if the file is called "sidebar-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_sidebar' action. * * @param string $name The name of the specialised sidebar. */function get_sidebar( $name = null ) {	do_action( 'get_sidebar', $name );	$templates = array();	if ( isset($name) )		$templates[] = "sidebar-{$name}.php";	$templates[] = "sidebar.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/sidebar.php');}/** * Load a template part into a template * * Makes it easy for a theme to reuse sections of code in a easy to overload way * for child themes. * * Includes the named template part for a theme or if a name is specified then a * specialised part will be included. If the theme contains no {slug}.php file * then no template will be included. * * The template is included using require, not require_once, so you may include the * same template part multiple times. * * For the parameter, if the file is called "{slug}-special.php" then specify * "special". * * @uses locate_template() * @since 3.0.0 * @uses do_action() Calls 'get_template_part{$slug}' action. * * @param string $slug The slug name for the generic template. * @param string $name The name of the specialised template. */function get_template_part( $slug, $name = null ) {	do_action( "get_template_part_{$slug}", $slug, $name );	$templates = array();	if ( isset($name) )		$templates[] = "{$slug}-{$name}.php";	$templates[] = "{$slug}.php";	locate_template($templates, true, false);}/** * Display search form. * * Will first attempt to locate the searchform.php file in either the child or * the parent, then load it. If it doesn't exist, then the default search form * will be displayed. The default search form is HTML, which will be displayed. * There is a filter applied to the search form HTML in order to edit or replace * it. The filter is 'get_search_form'. * * This function is primarily used by themes which want to hardcode the search * form into the sidebar and also by the search widget in WordPress. * * There is also an action that is called whenever the function is run called, * 'get_search_form'. This can be useful for outputting JavaScript that the * search relies on or various formatting that applies to the beginning of the * search. To give a few examples of what it can be used for. * * @since 2.7.0 * @param boolean $echo Default to echo and not return the form. */function get_search_form($echo = true) {	do_action( 'get_search_form' );	$search_form_template = locate_template(array('searchform.php'));	if ( '' != $search_form_template ) {		require($search_form_template);		return;	}	$form = '<form role="search" method="get" id="searchform" action="' . home_url( '/' ) . '" >	<div><label class="screen-reader-text" for="s">' . __('Search for:') . '</label>	<input type="text" value="' . get_search_query() . '" name="s" id="s" />	<input type="submit" id="searchsubmit" value="'. esc_attr__('Search') .'" />	</div>	</form>';	if ( $echo )		echo apply_filters('get_search_form', $form);	else		return apply_filters('get_search_form', $form);}/** * Display the Log In/Out link. * * Displays a link, which allows users to navigate to the Log In page to log in * or log out depending on whether they are currently logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'loginout' hook on HTML link content. * * @param string $redirect Optional path to redirect to on login/logout. * @param boolean $echo Default to echo and not return the link. */function wp_loginout($redirect = '', $echo = true) {	if ( ! is_user_logged_in() )		$link = '<a href="' . esc_url( wp_login_url($redirect) ) . '">' . __('Log in') . '</a>';	else		$link = '<a href="' . esc_url( wp_logout_url($redirect) ) . '">' . __('Log out') . '</a>';	if ( $echo )		echo apply_filters('loginout', $link);	else		return apply_filters('loginout', $link);}/** * Returns the Log Out URL. * * Returns the URL that allows the user to log out of the site * * @since 2.7 * @uses wp_nonce_url() To protect against CSRF * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'logout_url' hook on final logout url * * @param string $redirect Path to redirect to on logout. */function wp_logout_url($redirect = '') {	$args = array( 'action' => 'logout' );	if ( !empty($redirect) ) {		$args['redirect_to'] = urlencode( $redirect );	}	$logout_url = add_query_arg($args, site_url('wp-login.php', 'login'));	$logout_url = wp_nonce_url( $logout_url, 'log-out' );	return apply_filters('logout_url', $logout_url, $redirect);}/** * Returns the Log In URL. * * Returns the URL that allows the user to log in to the site * * @since 2.7 * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'login_url' hook on final login url * * @param string $redirect Path to redirect to on login. * @param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false. * @return string A log in url */function wp_login_url($redirect = '', $force_reauth = false) {	$login_url = site_url('wp-login.php', 'login');	if ( !empty($redirect) )		$login_url = add_query_arg('redirect_to', urlencode($redirect), $login_url);	if ( $force_reauth )		$login_url = add_query_arg('reauth', '1', $login_url);	return apply_filters('login_url', $login_url, $redirect);}/** * Provides a simple login form for use anywhere within WordPress. By default, it echoes * the HTML immediately. Pass array('echo'=>false) to return the string instead. * * @since 3.0.0 * @param array $args Configuration options to modify the form output * @return Void, or string containing the form */function wp_login_form( $args = array() ) {	$defaults = array( 'echo' => true,						'redirect' => site_url( $_SERVER['REQUEST_URI'] ), // Default redirect is back to the current page	 					'form_id' => 'loginform',						'label_username' => __( 'Username' ),						'label_password' => __( 'Password' ),						'label_remember' => __( 'Remember Me' ),						'label_log_in' => __( 'Log In' ),						'id_username' => 'user_login',						'id_password' => 'user_pass',						'id_remember' => 'rememberme',						'id_submit' => 'wp-submit',						'remember' => true,						'value_username' => '',						'value_remember' => false, // Set this to true to default the "Remember me" checkbox to checked					);	$args = wp_parse_args( $args, apply_filters( 'login_form_defaults', $defaults ) );	$form = '		<form name="' . $args['form_id'] . '" id="' . $args['form_id'] . '" action="' . site_url( 'wp-login.php', 'login' ) . '" method="post">			' . apply_filters( 'login_form_top', '' ) . '			<p class="login-username">				<label for="' . esc_attr( $args['id_username'] ) . '">' . esc_html( $args['label_username'] ) . '</label>				<input type="text" name="log" id="' . esc_attr( $args['id_username'] ) . '" class="input" value="' . esc_attr( $args['value_username'] ) . '" size="20" tabindex="10" />			</p>			<p class="login-password">				<label for="' . esc_attr( $args['id_password'] ) . '">' . esc_html( $args['label_password'] ) . '</label>				<input type="password" name="pwd" id="' . esc_attr( $args['id_password'] ) . '" class="input" value="" size="20" tabindex="20" />			</p>			' . apply_filters( 'login_form_middle', '' ) . '			' . ( $args['remember'] ? '<p class="login-remember"><label><input name="rememberme" type="checkbox" id="' . esc_attr( $args['id_remember'] ) . '" value="forever" tabindex="90"' . ( $args['value_remember'] ? ' checked="checked"' : '' ) . ' /> ' . esc_html( $args['label_remember'] ) . '</label></p>' : '' ) . '			<p class="login-submit">				<input type="submit" name="wp-submit" id="' . esc_attr( $args['id_submit'] ) . '" class="button-primary" value="' . esc_attr( $args['label_log_in'] ) . '" tabindex="100" />				<input type="hidden" name="redirect_to" value="' . esc_attr( $args['redirect'] ) . '" />			</p>			' . apply_filters( 'login_form_bottom', '' ) . '		</form>';	if ( $args['echo'] )		echo $form;	else		return $form;}/** * Returns the Lost Password URL. * * Returns the URL that allows the user to retrieve the lost password * * @since 2.8.0 * @uses site_url() To generate the lost password URL * @uses apply_filters() calls 'lostpassword_url' hook on the lostpassword url * * @param string $redirect Path to redirect to on login. */function wp_lostpassword_url($redirect = '') {	$args = array( 'action' => 'lostpassword' );	if ( !empty($redirect) ) {		$args['redirect_to'] = $redirect;	}	$lostpassword_url = add_query_arg($args, site_url('wp-login.php', 'login'));	return apply_filters('lostpassword_url', $lostpassword_url, $redirect);}/** * Display the Registration or Admin link. * * Display a link which allows the user to navigate to the registration page if * not logged in and registration is enabled or to the dashboard if logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'register' hook on register / admin link content. * * @param string $before Text to output before the link (defaults to <li>). * @param string $after Text to output after the link (defaults to </li>). * @param boolean $echo Default to echo and not return the link. */function wp_register( $before = '<li>', $after = '</li>', $echo = true ) {	if ( ! is_user_logged_in() ) {		if ( get_option('users_can_register') )			$link = $before . '<a href="' . site_url('wp-login.php?action=register', 'login') . '">' . __('Register') . '</a>' . $after;		else			$link = '';	} else {		$link = $before . '<a href="' . admin_url() . '">' . __('Site Admin') . '</a>' . $after;	}	if ( $echo )		echo apply_filters('register', $link);	else		return apply_filters('register', $link);}/** * Theme container function for the 'wp_meta' action. * * The 'wp_meta' action can have several purposes, depending on how you use it, * but one purpose might have been to allow for theme switching. * * @since 1.5.0 * @link http://trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action. * @uses do_action() Calls 'wp_meta' hook. */function wp_meta() {	do_action('wp_meta');}/** * Display information about the blog. * * @see get_bloginfo() For possible values for the parameter. * @since 0.71 * * @param string $show What to display. */function bloginfo( $show='' ) {	echo get_bloginfo( $show, 'display' );}/** * Retrieve information about the blog. * * Some show parameter values are deprecated and will be removed in future * versions. These options will trigger the _deprecated_argument() function. * The deprecated blog info options are listed in the function contents. * * The possible values for the 'show' parameter are listed below. * <ol> * <li><strong>url<strong> - Blog URI to homepage.</li> * <li><strong>wpurl</strong> - Blog URI path to WordPress.</li> * <li><strong>description</strong> - Secondary title</li> * </ol> * * The feed URL options can be retrieved from 'rdf_url' (RSS 0.91), * 'rss_url' (RSS 1.0), 'rss2_url' (RSS 2.0), or 'atom_url' (Atom feed). The * comment feeds can be retrieved from the 'comments_atom_url' (Atom comment * feed) or 'comments_rss2_url' (RSS 2.0 comment feed). * * @since 0.71 * * @param string $show Blog info to retrieve. * @param string $filter How to filter what is retrieved. * @return string Mostly string values, might be empty. */function get_bloginfo( $show = '', $filter = 'raw' ) {	switch( $show ) {		case 'home' : // DEPRECATED		case 'siteurl' : // DEPRECATED			_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> option instead.' ), 'url'  ) );		case 'url' :			$output = home_url();			break;		case 'wpurl' :			$output = site_url();			break;		case 'description':			$output = get_option('blogdescription');			break;		case 'rdf_url':			$output = get_feed_link('rdf');			break;		case 'rss_url':			$output = get_feed_link('rss');			break;		case 'rss2_url':			$output = get_feed_link('rss2');			break;		case 'atom_url':			$output = get_feed_link('atom');			break;		case 'comments_atom_url':			$output = get_feed_link('comments_atom');			break;		case 'comments_rss2_url':			$output = get_feed_link('comments_rss2');			break;		case 'pingback_url':			$output = get_option('siteurl') .'/xmlrpc.php';			break;		case 'stylesheet_url':			$output = get_stylesheet_uri();			break;		case 'stylesheet_directory':			$output = get_stylesheet_directory_uri();			break;		case 'template_directory':		case 'template_url':			$output = get_template_directory_uri();			break;		case 'admin_email':			$output = get_option('admin_email');			break;		case 'charset':			$output = get_option('blog_charset');			if ('' == $output) $output = 'UTF-8';			break;		case 'html_type' :			$output = get_option('html_type');			break;		case 'version':			global $wp_version;			$output = $wp_version;			break;		case 'language':			$output = get_locale();			$output = str_replace('_', '-', $output);			break;		case 'text_direction':			//_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> function instead.' ), 'is_rtl()'  ) );			if ( function_exists( 'is_rtl' ) ) {				$output = is_rtl() ? 'rtl' : 'ltr';			} else {				$output = 'ltr';			}			break;		case 'name':		default:			$output = get_option('blogname');			break;	}	$url = true;	if (strpos($show, 'url') === false &&		strpos($show, 'directory') === false &&		strpos($show, 'home') === false)		$url = false;	if ( 'display' == $filter ) {		if ( $url )			$output = apply_filters('bloginfo_url', $output, $show);		else			$output = apply_filters('bloginfo', $output, $show);	}	return $output;}/** * Display or retrieve page title for all areas of blog. * * By default, the page title will display the separator before the page title, * so that the blog title will be before the page title. This is not good for * title display, since the blog title shows up on most tabs and not what is * important, which is the page that the user is looking at. * * There are also SEO benefits to having the blog title after or to the 'right' * or the page title. However, it is mostly common sense to have the blog title * to the right with most browsers supporting tabs. You can achieve this by * using the seplocation parameter and setting the value to 'right'. This change * was introduced around 2.5.0, in case backwards compatibility of themes is * important. * * @since 1.0.0 * * @param string $sep Optional, default is '&raquo;'. How to separate the various items within the page title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @param string $seplocation Optional. Direction to display title, 'right'. * @return string|null String on retrieve, null when displaying. */function wp_title($sep = '&raquo;', $display = true, $seplocation = '') {	global $wpdb, $wp_locale, $wp_query;	$cat = get_query_var('cat');	$tag = get_query_var('tag_id');	$category_name = get_query_var('category_name');	$author = get_query_var('author');	$author_name = get_query_var('author_name');	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	$day = get_query_var('day');	$search = get_query_var('s');	$title = '';	$t_sep = '%WP_TITILE_SEP%'; // Temporary separator, for accurate flipping, if necessary	// If there's a category	if ( !empty($cat) ) {			// category exclusion			if ( !stristr($cat,'-') )				$title = apply_filters('single_cat_title', get_the_category_by_ID($cat));	} elseif ( !empty($category_name) ) {		if ( stristr($category_name,'/') ) {				$category_name = explode('/',$category_name);				if ( $category_name[count($category_name)-1] )					$category_name = $category_name[count($category_name)-1]; // no trailing slash				else					$category_name = $category_name[count($category_name)-2]; // there was a trailling slash		}		$cat = get_term_by('slug', $category_name, 'category', OBJECT, 'display');		if ( $cat )			$title = apply_filters('single_cat_title', $cat->name);	}	if ( !empty($tag) ) {		$tag = get_term($tag, 'post_tag', OBJECT, 'display');		if ( is_wp_error( $tag ) )			return $tag;		if ( ! empty($tag->name) )			$title = apply_filters('single_tag_title', $tag->name);	}	// If there's an author	if ( !empty($author) ) {		$title = get_userdata($author);		$title = $title->display_name;	}	if ( !empty($author_name) ) {		// We do a direct query here because we don't cache by nicename.		$title = $wpdb->get_var($wpdb->prepare("SELECT display_name FROM $wpdb->users WHERE user_nicename = %s", $author_name));	}	// If there's a month	if ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));		$my_day = intval(substr($m, 6, 2));		$title = $my_year . ($my_month ? $t_sep . $my_month : "") . ($my_day ? $t_sep . $my_day : "");	}	if ( !empty($year) ) {		$title = $year;		if ( !empty($monthnum) )			$title .= $t_sep . $wp_locale->get_month($monthnum);		if ( !empty($day) )			$title .= $t_sep . zeroise($day, 2);	}	// If there is a post	if ( is_single() || ( is_home() && !is_front_page() ) || ( is_page() && !is_front_page() ) ) {		$post = $wp_query->get_queried_object();		$title = apply_filters( 'single_post_title', $post->post_title );	}	// If there's a taxonomy	if ( is_tax() ) {		$taxonomy = get_query_var( 'taxonomy' );		$tax = get_taxonomy( $taxonomy );		$term = $wp_query->get_queried_object();		$term = $term->name;		$title = $tax->labels->name . $t_sep . $term;	}	//If it's a search	if ( is_search() ) {		/* translators: 1: separator, 2: search phrase */		$title = sprintf(__('Search Results %1$s %2$s'), $t_sep, strip_tags($search));	}	if ( is_404() ) {		$title = __('Page not found');	}	$prefix = '';	if ( !empty($title) )		$prefix = " $sep "; 	// Determines position of the separator and direction of the breadcrumb	if ( 'right' == $seplocation ) { // sep on right, so reverse the order		$title_array = explode( $t_sep, $title );		$title_array = array_reverse( $title_array );		$title = implode( " $sep ", $title_array ) . $prefix;	} else {		$title_array = explode( $t_sep, $title );		$title = $prefix . implode( " $sep ", $title_array );	}	$title = apply_filters('wp_title', $title, $sep, $seplocation);	// Send it out	if ( $display )		echo $title;	else		return $title;}/** * Display or retrieve page title for post. * * This is optimized for single.php template file for displaying the post title. * Only useful for posts, does not support pages for example. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * @uses $wpdb * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_post_title($prefix = '', $display = true) {	global $wp_query, $post;	if ( ! $post )		$_post = $wp_query->get_queried_object();	else		$_post = $post;	if ( !isset($_post->post_title) )		return;	$title = apply_filters('single_post_title', $_post->post_title, $_post);	if ( $display )		echo $prefix . $title;	else		return $title;}/** * Display or retrieve page title for category archive. * * This is useful for category template file or files, because it is optimized * for category page title and with less overhead than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_cat_title($prefix = '', $display = true ) {	global $wp_query;	if ( is_tag() )		return single_tag_title($prefix, $display);	if ( !is_category() )		return;	$cat = $wp_query->get_queried_object();	$my_cat_name = apply_filters('single_cat_title', $cat->name);	if ( !empty($my_cat_name) ) {		if ( $display )			echo $prefix . $my_cat_name;		else			return $my_cat_name;	}}/** * Display or retrieve page title for tag post archive. * * Useful for tag template files for displaying the tag page title. It has less * overhead than {@link wp_title()}, because of its limited implementation. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 2.3.0 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_tag_title($prefix = '', $display = true ) {	global $wp_query;	if ( !is_tag() )		return;	$tag = $wp_query->get_queried_object();	if ( ! $tag )		return;	$my_tag_name = apply_filters('single_tag_title', $tag->name);	if ( !empty($my_tag_name) ) {		if ( $display )			echo $prefix . $my_tag_name;		else			return $my_tag_name;	}}/** * Display or retrieve page title for post archive based on date. * * Useful for when the template only needs to display the month and year, if * either are available. Optimized for just this purpose, so if it is all that * is needed, should be better than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_month_title($prefix = '', $display = true ) {	global $wp_locale;	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	if ( !empty($monthnum) && !empty($year) ) {		$my_year = $year;		$my_month = $wp_locale->get_month($monthnum);	} elseif ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));	}	if ( empty($my_month) )		return false;	$result = $prefix . $my_month . $prefix . $my_year;	if ( !$display )		return $result;	echo $result;}/** * Retrieve archive link content based on predefined or custom code. * * The format can be one of four styles. The 'link' for head element, 'option' * for use in the select element, 'html' for use in list (either ol or ul HTML * elements). Custom content is also supported using the before and after * parameters. * * The 'link' format uses the link HTML element with the <em>archives</em> * relationship. The before and after parameters are not used. The text * parameter is used to describe the link. * * The 'option' format uses the option HTML element for use in select element. * The value is the url parameter and the before and after parameters are used * between the text description. * * The 'html' format, which is the default, uses the li HTML element for use in * the list HTML elements. The before parameter is before the link and the after * parameter is after the closing link. * * The custom format uses the before parameter before the link ('a' HTML * element) and the after parameter after the closing link tag. If the above * three values for the format are not used, then custom format is assumed. * * @since 1.0.0 * * @param string $url URL to archive. * @param string $text Archive text description. * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom. * @param string $before Optional. * @param string $after Optional. * @return string HTML link content for archive. */function get_archives_link($url, $text, $format = 'html', $before = '', $after = '') {	$text = wptexturize($text);	$title_text = esc_attr($text);	$url = esc_url($url);	if ('link' == $format)		$link_html = "\t<link rel='archives' title='$title_text' href='$url' />\n";	elseif ('option' == $format)		$link_html = "\t<option value='$url'>$before $text $after</option>\n";	elseif ('html' == $format)		$link_html = "\t<li>$before<a href='$url' title='$title_text'>$text</a>$after</li>\n";	else // custom		$link_html = "\t$before<a href='$url' title='$title_text'>$text</a>$after\n";	$link_html = apply_filters( "get_archives_link", $link_html );	return $link_html;}/** * Display archive links based on type and format. * * The 'type' argument offers a few choices and by default will display monthly * archive links. The other options for values are 'daily', 'weekly', 'monthly', * 'yearly', 'postbypost' or 'alpha'. Both 'postbypost' and 'alpha' display the * same archive link list, the difference between the two is that 'alpha' * will order by post title and 'postbypost' will order by post date. * * The date archives will logically display dates with links to the archive post * page. The 'postbypost' and 'alpha' values for 'type' argument will display * the post titles. * * The 'limit' argument will only display a limited amount of links, specified * by the 'limit' integer value. By default, there is no limit. The * 'show_post_count' argument will show how many posts are within the archive. * By default, the 'show_post_count' argument is set to false. * * For the 'format', 'before', and 'after' arguments, see {@link * get_archives_link()}. The values of these arguments have to do with that * function. * * @since 1.2.0 * * @param string|array $args Optional. Override defaults. */function wp_get_archives($args = '') {	global $wpdb, $wp_locale;	$defaults = array(		'type' => 'monthly', 'limit' => '',		'format' => 'html', 'before' => '',		'after' => '', 'show_post_count' => false,		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	if ( '' == $type )		$type = 'monthly';	if ( '' != $limit ) {		$limit = absint($limit);		$limit = ' LIMIT '.$limit;	}	// this is what will separate dates on weekly archive links	$archive_week_separator = '&#8211;';	// over-ride general date format ? 0 = no: use the date format set in Options, 1 = yes: over-ride	$archive_date_format_over_ride = 0;	// options for daily archive (only if you over-ride the general date format)	$archive_day_date_format = 'Y/m/d';	// options for weekly archive (only if you over-ride the general date format)	$archive_week_start_date_format = 'Y/m/d';	$archive_week_end_date_format	= 'Y/m/d';	if ( !$archive_date_format_over_ride ) {		$archive_day_date_format = get_option('date_format');		$archive_week_start_date_format = get_option('date_format');		$archive_week_end_date_format = get_option('date_format');	}	//filters	$where = apply_filters('getarchives_where', "WHERE post_type = 'post' AND post_status = 'publish'", $r );	$join = apply_filters('getarchives_join', "", $r);	$output = '';	if ( 'monthly' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url = get_month_link( $arcresult->year, $arcresult->month );				/* translators: 1: month name, 2: 4-digit year */				$text = sprintf(__('%1$s %2$d'), $wp_locale->get_month($arcresult->month), $arcresult->year);				if ( $show_post_count )					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ('yearly' == $type) {		$query = "SELECT YEAR(post_date) AS `year`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ($arcresults) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult) {				$url = get_year_link($arcresult->year);				$text = sprintf('%d', $arcresult->year);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'daily' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, DAYOFMONTH(post_date) AS `dayofmonth`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date), DAYOFMONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url	= get_day_link($arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$date = sprintf('%1$d-%2$02d-%3$02d 00:00:00', $arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$text = mysql2date($archive_day_date_format, $date);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'weekly' == $type ) {		$week = _wp_mysql_week( '`post_date`' );		$query = "SELECT DISTINCT $week AS `week`, YEAR( `post_date` ) AS `yr`, DATE_FORMAT( `post_date`, '%Y-%m-%d' ) AS `yyyymmdd`, count( `ID` ) AS `posts` FROM `$wpdb->posts` $join $where GROUP BY $week, YEAR( `post_date` ) ORDER BY `post_date` DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		$arc_w_last = '';		$afterafter = $after;		if ( $arcresults ) {				foreach ( (array) $arcresults as $arcresult ) {					if ( $arcresult->week != $arc_w_last ) {						$arc_year = $arcresult->yr;						$arc_w_last = $arcresult->week;						$arc_week = get_weekstartend($arcresult->yyyymmdd, get_option('start_of_week'));						$arc_week_start = date_i18n($archive_week_start_date_format, $arc_week['start']);						$arc_week_end = date_i18n($archive_week_end_date_format, $arc_week['end']);						$url  = sprintf('%1$s/%2$s%3$sm%4$s%5$s%6$sw%7$s%8$d', home_url(), '', '?', '=', $arc_year, '&amp;', '=', $arcresult->week);						$text = $arc_week_start . $archive_week_separator . $arc_week_end;						if ($show_post_count)							$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;						$output .= get_archives_link($url, $text, $format, $before, $after);					}				}		}	} elseif ( ( 'postbypost' == $type ) || ('alpha' == $type) ) {		$orderby = ('alpha' == $type) ? "post_title ASC " : "post_date DESC ";		$query = "SELECT * FROM $wpdb->posts $join $where ORDER BY $orderby $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			foreach ( (array) $arcresults as $arcresult ) {				if ( $arcresult->post_date != '0000-00-00 00:00:00' ) {					$url  = get_permalink($arcresult);					$arc_title = $arcresult->post_title;					if ( $arc_title )						$text = strip_tags(apply_filters('the_title', $arc_title));					else						$text = $arcresult->ID;					$output .= get_archives_link($url, $text, $format, $before, $after);				}			}		}	}	if ( $echo )		echo $output;	else		return $output;}/** * Get number of days since the start of the week. * * @since 1.5.0 * @usedby get_calendar() * * @param int $num Number of day. * @return int Days since the start of the week. */function calendar_week_mod($num) {	$base = 7;	return ($num - $base*floor($num/$base));}/** * Display calendar with days that have posts as links. * * The calendar is cached, which will be retrieved, if it exists. If there are * no posts for the month, then it will not be displayed. * * @since 1.0.0 * * @param bool $initial Optional, default is true. Use initial calendar names. * @param bool $echo Optional, default is true. Set to false for return. */function get_calendar($initial = true, $echo = true) {	global $wpdb, $m, $monthnum, $year, $wp_locale, $posts;	$cache = array();	$key = md5( $m . $monthnum . $year );	if ( $cache = wp_cache_get( 'get_calendar', 'calendar' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			if ( $echo ) {				echo apply_filters( 'get_calendar',  $cache[$key] );				return;			} else {				return apply_filters( 'get_calendar',  $cache[$key] );			}		}	}	if ( !is_array($cache) )		$cache = array();	// Quick check. If we have no posts at all, abort!	if ( !$posts ) {		$gotsome = $wpdb->get_var("SELECT 1 as test FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'publish' LIMIT 1");		if ( !$gotsome ) {			$cache[ $key ] = '';			wp_cache_set( 'get_calendar', $cache, 'calendar' );			return;		}	}	if ( isset($_GET['w']) )		$w = ''.intval($_GET['w']);	// week_begins = 0 stands for Sunday	$week_begins = intval(get_option('start_of_week'));	// Let's figure out when we are	if ( !empty($monthnum) && !empty($year) ) {		$thismonth = ''.zeroise(intval($monthnum), 2);		$thisyear = ''.intval($year);	} elseif ( !empty($w) ) {		// We need to get the month from MySQL		$thisyear = ''.intval(substr($m, 0, 4));		$d = (($w - 1) * 7) + 6; //it seems MySQL's weeks disagree with PHP's		$thismonth = $wpdb->get_var("SELECT DATE_FORMAT((DATE_ADD('${thisyear}0101', INTERVAL $d DAY) ), '%m')");	} elseif ( !empty($m) ) {		$thisyear = ''.intval(substr($m, 0, 4));		if ( strlen($m) < 6 )				$thismonth = '01';		else				$thismonth = ''.zeroise(intval(substr($m, 4, 2)), 2);	} else {		$thisyear = gmdate('Y', current_time('timestamp'));		$thismonth = gmdate('m', current_time('timestamp'));	}	$unixmonth = mktime(0, 0 , 0, $thismonth, 1, $thisyear);	// Get the next and previous month and year with at least one post	$previous = $wpdb->get_row("SELECT DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date < '$thisyear-$thismonth-01'		AND post_type = 'post' AND post_status = 'publish'			ORDER BY post_date DESC			LIMIT 1");	$next = $wpdb->get_row("SELECT	DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date >	'$thisyear-$thismonth-01'		AND MONTH( post_date ) != MONTH( '$thisyear-$thismonth-01' )		AND post_type = 'post' AND post_status = 'publish'			ORDER	BY post_date ASC			LIMIT 1");	/* translators: Calendar caption: 1: month name, 2: 4-digit year */	$calendar_caption = _x('%1$s %2$s', 'calendar caption');	$calendar_output = '<table id="wp-calendar" summary="' . esc_attr__('Calendar') . '">	<caption>' . sprintf($calendar_caption, $wp_locale->get_month($thismonth), date('Y', $unixmonth)) . '</caption>	<thead>	<tr>';	$myweek = array();	for ( $wdcount=0; $wdcount<=6; $wdcount++ ) {		$myweek[] = $wp_locale->get_weekday(($wdcount+$week_begins)%7);	}	foreach ( $myweek as $wd ) {		$day_name = (true == $initial) ? $wp_locale->get_weekday_initial($wd) : $wp_locale->get_weekday_abbrev($wd);		$wd = esc_attr($wd);		$calendar_output .= "\n\t\t<th scope=\"col\" title=\"$wd\">$day_name</th>";	}	$calendar_output .= '	</tr>	</thead>	<tfoot>	<tr>';	if ( $previous ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev"><a href="' . get_month_link($previous->year, $previous->month) . '" title="' . sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($previous->month), date('Y', mktime(0, 0 , 0, $previous->month, 1, $previous->year))) . '">&laquo; ' . $wp_locale->get_month_abbrev($wp_locale->get_month($previous->month)) . '</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev" class="pad">&nbsp;</td>';	}	$calendar_output .= "\n\t\t".'<td class="pad">&nbsp;</td>';	if ( $next ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next"><a href="' . get_month_link($next->year, $next->month) . '" title="' . esc_attr( sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($next->month), date('Y', mktime(0, 0 , 0, $next->month, 1, $next->year))) ) . '">' . $wp_locale->get_month_abbrev($wp_locale->get_month($next->month)) . ' &raquo;</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next" class="pad">&nbsp;</td>';	}	$calendar_output .= '	</tr>	</tfoot>	<tbody>	<tr>';	// Get days with posts	$dayswithposts = $wpdb->get_results("SELECT DISTINCT DAYOFMONTH(post_date)		FROM $wpdb->posts WHERE MONTH(post_date) = '$thismonth'		AND YEAR(post_date) = '$thisyear'		AND post_type = 'post' AND post_status = 'publish'		AND post_date < '" . current_time('mysql') . '\'', ARRAY_N);	if ( $dayswithposts ) {		foreach ( (array) $dayswithposts as $daywith ) {			$daywithpost[] = $daywith[0];		}	} else {		$daywithpost = array();	}	if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'camino') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false)		$ak_title_separator = "\n";	else		$ak_title_separator = ', ';	$ak_titles_for_day = array();	$ak_post_titles = $wpdb->get_results("SELECT ID, post_title, DAYOFMONTH(post_date) as dom "		."FROM $wpdb->posts "		."WHERE YEAR(post_date) = '$thisyear' "		."AND MONTH(post_date) = '$thismonth' "		."AND post_date < '".current_time('mysql')."' "		."AND post_type = 'post' AND post_status = 'publish'"	);	if ( $ak_post_titles ) {		foreach ( (array) $ak_post_titles as $ak_post_title ) {				$post_title = esc_attr( apply_filters( 'the_title', $ak_post_title->post_title, $ak_post_title->ID ) );				if ( empty($ak_titles_for_day['day_'.$ak_post_title->dom]) )					$ak_titles_for_day['day_'.$ak_post_title->dom] = '';				if ( empty($ak_titles_for_day["$ak_post_title->dom"]) ) // first one					$ak_titles_for_day["$ak_post_title->dom"] = $post_title;				else					$ak_titles_for_day["$ak_post_title->dom"] .= $ak_title_separator . $post_title;		}	}	// See how much we should pad in the beginning	$pad = calendar_week_mod(date('w', $unixmonth)-$week_begins);	if ( 0 != $pad )		$calendar_output .= "\n\t\t".'<td colspan="'. esc_attr($pad) .'" class="pad">&nbsp;</td>';	$daysinmonth = intval(date('t', $unixmonth));	for ( $day = 1; $day <= $daysinmonth; ++$day ) {		if ( isset($newrow) && $newrow )			$calendar_output .= "\n\t</tr>\n\t<tr>\n\t\t";		$newrow = false;		if ( $day == gmdate('j', current_time('timestamp')) && $thismonth == gmdate('m', current_time('timestamp')) && $thisyear == gmdate('Y', current_time('timestamp')) )			$calendar_output .= '<td id="today">';		else			$calendar_output .= '<td>';		if ( in_array($day, $daywithpost) ) // any posts today?				$calendar_output .= '<a href="' . get_day_link($thisyear, $thismonth, $day) . "\" title=\"" . esc_attr($ak_titles_for_day[$day]) . "\">$day</a>";		else			$calendar_output .= $day;		$calendar_output .= '</td>';		if ( 6 == calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins) )			$newrow = true;	}	$pad = 7 - calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins);	if ( $pad != 0 && $pad != 7 )		$calendar_output .= "\n\t\t".'<td class="pad" colspan="'. esc_attr($pad) .'">&nbsp;</td>';	$calendar_output .= "\n\t</tr>\n\t</tbody>\n\t</table>";	$cache[ $key ] = $calendar_output;	wp_cache_set( 'get_calendar', $cache, 'calendar' );	if ( $echo )		echo apply_filters( 'get_calendar',  $calendar_output );	else		return apply_filters( 'get_calendar',  $calendar_output );}/** * Purge the cached results of get_calendar. * * @see get_calendar * @since 2.1.0 */function delete_get_calendar_cache() {	wp_cache_delete( 'get_calendar', 'calendar' );}add_action( 'save_post', 'delete_get_calendar_cache' );add_action( 'delete_post', 'delete_get_calendar_cache' );add_action( 'update_option_start_of_week', 'delete_get_calendar_cache' );add_action( 'update_option_gmt_offset', 'delete_get_calendar_cache' );/** * Display all of the allowed tags in HTML format with attributes. * * This is useful for displaying in the comment area, which elements and * attributes are supported. As well as any plugins which want to display it. * * @since 1.0.1 * @uses $allowedtags * * @return string HTML allowed tags entity encoded. */function allowed_tags() {	global $allowedtags;	$allowed = '';	foreach ( (array) $allowedtags as $tag => $attributes ) {		$allowed .= '<'.$tag;		if ( 0 < count($attributes) ) {			foreach ( $attributes as $attribute => $limits ) {				$allowed .= ' '.$attribute.'=""';			}		}		$allowed .= '> ';	}	return htmlentities($allowed);}/***** Date/Time tags *****//** * Outputs the date in iso8601 format for xml files. * * @since 1.0.0 */function the_date_xml() {	global $post;	echo mysql2date('Y-m-d', $post->post_date, false);}/** * Display or Retrieve the date the current $post was written (once per date) * * Will only output the date if the current post's date is different from the * previous one output. * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the * function is called several times for each post. * * HTML output can be filtered with 'the_date'. * Date string output can be filtered with 'get_the_date'. * * @since 0.71 * @uses get_the_date() * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_date( $d = '', $before = '', $after = '', $echo = true ) {	global $day, $previousday;	$the_date = '';	if ( $day != $previousday ) {		$the_date .= $before;		$the_date .= get_the_date( $d );		$the_date .= $after;		$previousday = $day;		$the_date = apply_filters('the_date', $the_date, $d, $before, $after);		if ( $echo )			echo $the_date;		else			return $the_date;	}	return null;}/** * Retrieve the date the current $post was written. * * Unlike the_date() this function will always return the date. * Modify output with 'get_the_date' filter. * * @since 3.0.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @return string|null Null if displaying, string if retrieving. */function get_the_date( $d = '' ) {	global $post;	$the_date = '';	if ( '' == $d )		$the_date .= mysql2date(get_option('date_format'), $post->post_date);	else		$the_date .= mysql2date($d, $post->post_date);	return apply_filters('get_the_date', $the_date, $d);}/** * Display the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_modified_date($d = '', $before='', $after='', $echo = true) {	$the_modified_date = $before . get_the_modified_date($d) . $after;	$the_modified_date = apply_filters('the_modified_date', $the_modified_date, $d, $before, $after);	if ( $echo )		echo $the_modified_date;	else		return $the_modified_date;}/** * Retrieve the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format. Defaults to the "date_format" option * @return string */function get_the_modified_date($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('date_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_date', $the_time, $d);}/** * Display the time at which the post was written. * * @since 0.71 * * @param string $d Either 'G', 'U', or php date format. */function the_time( $d = '' ) {	echo apply_filters('the_time', get_the_time( $d ), $d);}/** * Retrieve the time at which the post was written. * * @since 1.5.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @param int|object $post Optional post ID or object. Default is global $post object. * @return string */function get_the_time( $d = '', $post = null ) {	$post = get_post($post);	if ( '' == $d )		$the_time = get_post_time(get_option('time_format'), false, $post, true);	else		$the_time = get_post_time($d, false, $post, true);	return apply_filters('get_the_time', $the_time, $d, $post);}/** * Retrieve the time at which the post was written. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional post ID or object. Default is global $post object. * @param bool $translate Whether to translate the time string * @return string */function get_post_time( $d = 'U', $gmt = false, $post = null, $translate = false ) { // returns timestamp	$post = get_post($post);	if ( $gmt )		$time = $post->post_date_gmt;	else		$time = $post->post_date;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_time', $time, $d, $gmt);}/** * Display the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. */function the_modified_time($d = '') {	echo apply_filters('the_modified_time', get_the_modified_time($d), $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @return string */function get_the_modified_time($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('time_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_time', $the_time, $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional, default is 'U'. Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional, default is global post object. A post_id or post object * @param bool $translate Optional, default is false. Whether to translate the result * @return string Returns timestamp */function get_post_modified_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {	$post = get_post($post);	if ( $gmt )		$time = $post->post_modified_gmt;	else		$time = $post->post_modified;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_modified_time', $time, $d, $gmt);}/** * Display the weekday on which the post was written. * * @since 0.71 * @uses $wp_locale * @uses $post */function the_weekday() {	global $wp_locale, $post;	$the_weekday = $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));	$the_weekday = apply_filters('the_weekday', $the_weekday);	echo $the_weekday;}/** * Display the weekday on which the post was written. * * Will only output the weekday if the current post's weekday is different from * the previous one output. * * @since 0.71 * * @param string $before Optional Output before the date. * @param string $after Optional Output after the date.  */function the_weekday_date($before='',$after='') {	global $wp_locale, $post, $day, $previousweekday;	$the_weekday_date = '';	if ( $day != $previousweekday ) {		$the_weekday_date .= $before;		$the_weekday_date .= $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));		$the_weekday_date .= $after;		$previousweekday = $day;	}	$the_weekday_date = apply_filters('the_weekday_date', $the_weekday_date, $before, $after);	echo $the_weekday_date;}/** * Fire the wp_head action * * @since 1.2.0 * @uses do_action() Calls 'wp_head' hook. */function wp_head() {	do_action('wp_head');}/** * Fire the wp_footer action * * @since 1.5.1 * @uses do_action() Calls 'wp_footer' hook. */function wp_footer() {	do_action('wp_footer');}/** * Display the links to the general feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links( $args = array() ) {	if ( !current_theme_supports('automatic-feed-links') )		return;	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'	=> _x('&raquo;', 'feed link'),		/* translators: 1: blog title, 2: separator (raquo) */		'feedtitle'	=> __('%1$s %2$s Feed'),		/* translators: %s: blog title, 2: separator (raquo) */		'comstitle'	=> __('%1$s %2$s Comments Feed'),	);	$args = wp_parse_args( $args, $defaults );	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['feedtitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link() . "\" />\n";	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['comstitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link( 'comments_' . get_default_feed() ) . "\" />\n";}/** * Display the links to the extra feeds such as category feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links_extra( $args = array() ) {	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'   => _x('&raquo;', 'feed link'),		/* translators: 1: blog name, 2: separator(raquo), 3: post title */		'singletitle' => __('%1$s %2$s %3$s Comments Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: category name */		'cattitle'    => __('%1$s %2$s %3$s Category Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: tag name */		'tagtitle'    => __('%1$s %2$s %3$s Tag Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: author name  */		'authortitle' => __('%1$s %2$s Posts by %3$s Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: search phrase */		'searchtitle' => __('%1$s %2$s Search Results for &#8220;%3$s&#8221; Feed'),	);	$args = wp_parse_args( $args, $defaults );	if ( is_single() || is_page() ) {		$post = &get_post( $id = 0 );		if ( comments_open() || pings_open() || $post->comment_count > 0 ) {			$title = esc_attr(sprintf( $args['singletitle'], get_bloginfo('name'), $args['separator'], esc_html( get_the_title() ) ));			$href = get_post_comments_feed_link( $post->ID );		}	} elseif ( is_category() ) {		$cat_id = intval( get_query_var('cat') );		$title = esc_attr(sprintf( $args['cattitle'], get_bloginfo('name'), $args['separator'], get_cat_name( $cat_id ) ));		$href = get_category_feed_link( $cat_id );	} elseif ( is_tag() ) {		$tag_id = intval( get_query_var('tag_id') );		$tag = get_tag( $tag_id );		$title = esc_attr(sprintf( $args['tagtitle'], get_bloginfo('name'), $args['separator'], $tag->name ));		$href = get_tag_feed_link( $tag_id );	} elseif ( is_author() ) {		$author_id = intval( get_query_var('author') );		$title = esc_attr(sprintf( $args['authortitle'], get_bloginfo('name'), $args['separator'], get_the_author_meta( 'display_name', $author_id ) ));		$href = get_author_feed_link( $author_id );	} elseif ( is_search() ) {		$title = esc_attr(sprintf( $args['searchtitle'], get_bloginfo('name'), $args['separator'], get_search_query( false ) ));		$href = get_search_feed_link();	}	if ( isset($title) && isset($href) )		echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . $title . '" href="' . $href . '" />' . "\n";}/** * Display the link to the Really Simple Discovery service endpoint. * * @link http://archipelago.phrasewise.com/rsd * @since 2.0.0 */function rsd_link() {	echo '<link rel="EditURI" type="application/rsd+xml" title="RSD" href="' . get_bloginfo('wpurl') . "/xmlrpc.php?rsd\" />\n";}/** * Display the link to the Windows Live Writer manifest file. * * @link http://msdn.microsoft.com/en-us/library/bb463265.aspx * @since 2.3.1 */function wlwmanifest_link() {	echo '<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="'		. get_bloginfo('wpurl') . '/wp-includes/wlwmanifest.xml" /> ' . "\n";}/** * Display a noindex meta tag if required by the blog configuration. * * If a blog is marked as not being public then the noindex meta tag will be * output to tell web robots not to index the page content. * * @since 2.1.0 */function noindex() {	// If the blog is not public, tell robots to go away.	if ( '0' == get_option('blog_public') )		echo "<meta name='robots' content='noindex,nofollow' />\n";}/** * Determine if TinyMCE is available. * * Checks to see if the user has deleted the tinymce files to slim down there WordPress install. * * @since 2.1.0 * * @return bool Whether TinyMCE exists. */function rich_edit_exists() {	global $wp_rich_edit_exists;	if ( !isset($wp_rich_edit_exists) )		$wp_rich_edit_exists = file_exists(ABSPATH . WPINC . '/js/tinymce/tiny_mce.js');	return $wp_rich_edit_exists;}/** * Whether the user should have a WYSIWIG editor. * * Checks that the user requires a WYSIWIG editor and that the editor is * supported in the users browser. * * @since 2.0.0 * * @return bool */function user_can_richedit() {	global $wp_rich_edit, $pagenow;	if ( !isset( $wp_rich_edit) ) {		if ( get_user_option( 'rich_editing' ) == 'true' &&			( ( preg_match( '!AppleWebKit/(\d+)!', $_SERVER['HTTP_USER_AGENT'], $match ) && intval($match[1]) >= 420 ) ||				!preg_match( '!opera[ /][2-8]|konqueror|safari!i', $_SERVER['HTTP_USER_AGENT'] ) )				&& 'comment.php' != $pagenow ) {			$wp_rich_edit = true;		} else {			$wp_rich_edit = false;		}	}	return apply_filters('user_can_richedit', $wp_rich_edit);}/** * Find out which editor should be displayed by default. * * Works out which of the two editors to display as the current editor for a * user. * * @since 2.5.0 * * @return string Either 'tinymce', or 'html', or 'test' */function wp_default_editor() {	$r = user_can_richedit() ? 'tinymce' : 'html'; // defaults	if ( $user = wp_get_current_user() ) { // look for cookie		$ed = get_user_setting('editor', 'tinymce');		$r = ( in_array($ed, array('tinymce', 'html', 'test') ) ) ? $ed : $r;	}	return apply_filters( 'wp_default_editor', $r ); // filter}/** * Display visual editor forms: TinyMCE, or HTML, or both. * * The amount of rows the text area will have for the content has to be between * 3 and 100 or will default at 12. There is only one option used for all users, * named 'default_post_edit_rows'. * * If the user can not use the rich editor (TinyMCE), then the switch button * will not be displayed. * * @since 2.1.0 * * @param string $content Textarea content. * @param string $id Optional, default is 'content'. HTML ID attribute value. * @param string $prev_id Optional, default is 'title'. HTML ID name for switching back and forth between visual editors. * @param bool $media_buttons Optional, default is true. Whether to display media buttons. * @param int $tab_index Optional, default is 2. Tabindex for textarea element. */function the_editor($content, $id = 'content', $prev_id = 'title', $media_buttons = true, $tab_index = 2) {	$rows = get_option('default_post_edit_rows');	if (($rows < 3) || ($rows > 100))		$rows = 12;	if ( !current_user_can( 'upload_files' ) )		$media_buttons = false;	$richedit =  user_can_richedit();	$class = '';	if ( $richedit || $media_buttons ) { ?>	<div id="editor-toolbar"><?php	if ( $richedit ) {		$wp_default_editor = wp_default_editor(); ?>		<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('<?php echo $id; ?>')" /></div><?php	if ( 'html' == $wp_default_editor ) {			add_filter('the_editor_content', 'wp_htmledit_pre'); ?>			<a id="edButtonHTML" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	} else {			$class = " class='theEditor'";			add_filter('the_editor_content', 'wp_richedit_pre'); ?>			<a id="edButtonHTML" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	}	}	if ( $media_buttons ) { ?>		<div id="media-buttons" class="hide-if-no-js"><?php	do_action( 'media_buttons' ); ?>		</div><?php	} ?>	</div><?php	}?>	<div id="quicktags"><?php	wp_print_scripts( 'quicktags' ); ?>	<script type="text/javascript">edToolbar()</script>	</div><?php	$the_editor = apply_filters('the_editor', "<div id='editorcontainer'><textarea rows='$rows'$class cols='40' name='$id' tabindex='$tab_index' id='$id'>%s</textarea></div>\n");	$the_editor_content = apply_filters('the_editor_content', $content);	printf($the_editor, $the_editor_content);?>	<script type="text/javascript">	edCanvas = document.getElementById('<?php echo $id; ?>');	</script><?php}/** * Retrieve the contents of the search WordPress query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @since 2.3.0 * @uses esc_attr() * * @param bool $escaped Whether the result is escaped. Default true. * 	Only use when you are later escaping it. Do not use unescaped. * @return string */function get_search_query( $escaped = true ) {	$query = apply_filters( 'get_search_query', get_query_var( 's' ) );	if ( $escaped )		$query = esc_attr( $query );	return $query;}/** * Display the contents of the search query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @uses esc_attr() * @since 2.1.0 */function the_search_query() {	echo esc_attr( apply_filters( 'the_search_query', get_search_query( false ) ) );}/** * Display the language attributes for the html tag. * * Builds up a set of html attributes containing the text direction and language * information for the page. * * @since 2.1.0 * * @param string $doctype The type of html document (xhtml|html). */function language_attributes($doctype = 'html') {	$attributes = array();	$output = '';	if ( function_exists( 'is_rtl' ) )		$attributes[] = 'dir="' . ( is_rtl() ? 'rtl' : 'ltr' ) . '"';	if ( $lang = get_bloginfo('language') ) {		if ( get_option('html_type') == 'text/html' || $doctype == 'html' )			$attributes[] = "lang=\"$lang\"";		if ( get_option('html_type') != 'text/html' || $doctype == 'xhtml' )			$attributes[] = "xml:lang=\"$lang\"";	}	$output = implode(' ', $attributes);	$output = apply_filters('language_attributes', $output);	echo $output;}/** * Retrieve paginated link for archive post pages. * * Technically, the function can be used to create paginated link list for any * area. The 'base' argument is used to reference the url, which will be used to * create the paginated links. The 'format' argument is then used for replacing * the page number. It is however, most likely and by default, to be used on the * archive post pages. * * The 'type' argument controls format of the returned value. The default is * 'plain', which is just a string with the links separated by a newline * character. The other possible values are either 'array' or 'list'. The * 'array' value will return an array of the paginated link list to offer full * control of display. The 'list' value will place all of the paginated links in * an unordered HTML list. * * The 'total' argument is the total amount of pages and is an integer. The * 'current' argument is the current page number and is also an integer. * * An example of the 'base' argument is "http://example.com/all_posts.php%_%" * and the '%_%' is required. The '%_%' will be replaced by the contents of in * the 'format' argument. An example for the 'format' argument is "?page=%#%" * and the '%#%' is also required. The '%#%' will be replaced with the page * number. * * You can include the previous and next links in the list by setting the * 'prev_next' argument to true, which it is by default. You can set the * previous text, by using the 'prev_text' argument. You can set the next text * by setting the 'next_text' argument. * * If the 'show_all' argument is set to true, then it will show all of the pages * instead of a short list of the pages near the current page. By default, the * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size' * arguments. The 'end_size' argument is how many numbers on either the start * and the end list edges, by default is 1. The 'mid_size' argument is how many * numbers to either side of current page, but not including current page. * * It is possible to add query vars to the link by using the 'add_args' argument * and see {@link add_query_arg()} for more information. * * @since 2.1.0 * * @param string|array $args Optional. Override defaults. * @return array|string String of page links or array of page links. */function paginate_links( $args = '' ) {	$defaults = array(		'base' => '%_%', // http://example.com/all_posts.php%_% : %_% is replaced by format (below)		'format' => '?page=%#%', // ?page=%#% : %#% is replaced by the page number		'total' => 1,		'current' => 0,		'show_all' => false,		'prev_next' => true,		'prev_text' => __('&laquo; Previous'),		'next_text' => __('Next &raquo;'),		'end_size' => 1,		'mid_size' => 2,		'type' => 'plain',		'add_args' => false, // array of query args to add		'add_fragment' => ''	);	$args = wp_parse_args( $args, $defaults );	extract($args, EXTR_SKIP);	// Who knows what else people pass in $args	$total = (int) $total;	if ( $total < 2 )		return;	$current  = (int) $current;	$end_size = 0  < (int) $end_size ? (int) $end_size : 1; // Out of bounds?  Make it the default.	$mid_size = 0 <= (int) $mid_size ? (int) $mid_size : 2;	$add_args = is_array($add_args) ? $add_args : false;	$r = '';	$page_links = array();	$n = 0;	$dots = false;	if ( $prev_next && $current && 1 < $current ) :		$link = str_replace('%_%', 2 == $current ? '' : $format, $base);		$link = str_replace('%#%', $current - 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='prev page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$prev_text</a>";	endif;	for ( $n = 1; $n <= $total; $n++ ) :		$n_display = number_format_i18n($n);		if ( $n == $current ) :			$page_links[] = "<span class='page-numbers current'>$n_display</span>";			$dots = true;		else :			if ( $show_all || ( $n <= $end_size || ( $current && $n >= $current - $mid_size && $n <= $current + $mid_size ) || $n > $total - $end_size ) ) :				$link = str_replace('%_%', 1 == $n ? '' : $format, $base);				$link = str_replace('%#%', $n, $link);				if ( $add_args )					$link = add_query_arg( $add_args, $link );				$link .= $add_fragment;				$page_links[] = "<a class='page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$n_display</a>";				$dots = true;			elseif ( $dots && !$show_all ) :				$page_links[] = "<span class='page-numbers dots'>...</span>";				$dots = false;			endif;		endif;	endfor;	if ( $prev_next && $current && ( $current < $total || -1 == $total ) ) :		$link = str_replace('%_%', $format, $base);		$link = str_replace('%#%', $current + 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='next page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$next_text</a>";	endif;	switch ( $type ) :		case 'array' :			return $page_links;			break;		case 'list' :			$r .= "<ul class='page-numbers'>\n\t<li>";			$r .= join("</li>\n\t<li>", $page_links);			$r .= "</li>\n</ul>\n";			break;		default :			$r = join("\n", $page_links);			break;	endswitch;	return $r;}/** * Registers an admin colour scheme css file. * * Allows a plugin to register a new admin colour scheme. For example: * <code> * wp_admin_css_color('classic', __('Classic'), admin_url("css/colors-classic.css"), * array('#07273E', '#14568A', '#D54E21', '#2683AE')); * </code> * * @since 2.5.0 * * @param string $key The unique key for this theme. * @param string $name The name of the theme. * @param string $url The url of the css file containing the colour scheme. * @param array @colors Optional An array of CSS color definitions which are used to give the user a feel for the theme. */function wp_admin_css_color($key, $name, $url, $colors = array()) {	global $_wp_admin_css_colors;	if ( !isset($_wp_admin_css_colors) )		$_wp_admin_css_colors = array();	$_wp_admin_css_colors[$key] = (object) array('name' => $name, 'url' => $url, 'colors' => $colors);}/** * Registers the default Admin color schemes * * @since 3.0.0 */function register_admin_color_schemes() {	wp_admin_css_color('classic', __('Blue'), admin_url("css/colors-classic.css"), array('#073447', '#21759B', '#EAF3FA', '#BBD8E7'));	wp_admin_css_color('fresh', __('Gray'), admin_url("css/colors-fresh.css"), array('#464646', '#6D6D6D', '#F1F1F1', '#DFDFDF'));}/** * Display the URL of a WordPress admin CSS file. * * @see WP_Styles::_css_href and its style_loader_src filter. * * @since 2.3.0 * * @param string $file file relative to wp-admin/ without its ".css" extension. */function wp_admin_css_uri( $file = 'wp-admin' ) {	if ( defined('WP_INSTALLING') ) {		$_file = "./$file.css";	} else {		$_file = admin_url("$file.css");	}	$_file = add_query_arg( 'version', get_bloginfo( 'version' ),  $_file );	return apply_filters( 'wp_admin_css_uri', $_file, $file );}/** * Enqueues or directly prints a stylesheet link to the specified CSS file. * * "Intelligently" decides to enqueue or to print the CSS file. If the * 'wp_print_styles' action has *not* yet been called, the CSS file will be * enqueued. If the wp_print_styles action *has* been called, the CSS link will * be printed. Printing may be forced by passing TRUE as the $force_echo * (second) parameter. * * For backward compatibility with WordPress 2.3 calling method: If the $file * (first) parameter does not correspond to a registered CSS file, we assume * $file is a file relative to wp-admin/ without its ".css" extension. A * stylesheet link to that generated URL is printed. * * @package WordPress * @since 2.3.0 * @uses $wp_styles WordPress Styles Object * * @param string $file Style handle name or file name (without ".css" extension) relative to wp-admin/ * @param bool $force_echo Optional.  Force the stylesheet link to be printed rather than enqueued. */function wp_admin_css( $file = 'wp-admin', $force_echo = false ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	// For backward compatibility	$handle = 0 === strpos( $file, 'css/' ) ? substr( $file, 4 ) : $file;	if ( $wp_styles->query( $handle ) ) {		if ( $force_echo || did_action( 'wp_print_styles' ) ) // we already printed the style queue.  Print this one immediately			wp_print_styles( $handle );		else // Add to style queue			wp_enqueue_style( $handle );		return;	}	echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( $file ) ) . "' type='text/css' />\n", $file );	if ( is_rtl() )		echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( "$file-rtl" ) ) . "' type='text/css' />\n", "$file-rtl" );}/** * Enqueues the default ThickBox js and css. * * If any of the settings need to be changed, this can be done with another js * file similar to media-upload.js and theme-preview.js. That file should * require array('thickbox') to ensure it is loaded after. * * @since 2.5.0 */function add_thickbox() {	wp_enqueue_script( 'thickbox' );	wp_enqueue_style( 'thickbox' );}/** * Display the XHTML generator that is generated on the wp_head hook. * * @since 2.5.0 */function wp_generator() {	the_generator( apply_filters( 'wp_generator_type', 'xhtml' ) );}/** * Display the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators overall the the_generator filter. * * @since 2.5.0 * @uses apply_filters() Calls 'the_generator' hook. * * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export). */function the_generator( $type ) {	echo apply_filters('the_generator', get_the_generator($type), $type) . "\n";}/** * Creates the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators on an individual basis using the * 'get_the_generator_{$type}' filter. * * @since 2.5.0 * @uses apply_filters() Calls 'get_the_generator_$type' hook. * * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export). * @return string The HTML content for the generator. */function get_the_generator( $type = '' ) {	if ( empty( $type ) ) {		$current_filter = current_filter();		if ( empty( $current_filter ) )			return;		switch ( $current_filter ) {			case 'rss2_head' :			case 'commentsrss2_head' :				$type = 'rss2';				break;			case 'rss_head' :			case 'opml_head' :				$type = 'comment';				break;			case 'rdf_header' :				$type = 'rdf';				break;			case 'atom_head' :			case 'comments_atom_head' :			case 'app_head' :				$type = 'atom';				break;		}	}	switch ( $type ) {		case 'html':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '">';			break;		case 'xhtml':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '" />';			break;		case 'atom':			$gen = '<generator uri="http://wordpress.org/" version="' . get_bloginfo_rss( 'version' ) . '">WordPress</generator>';			break;		case 'rss2':			$gen = '<generator>http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '</generator>';			break;		case 'rdf':			$gen = '<admin:generatorAgent rdf:resource="http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '" />';			break;		case 'comment':			$gen = '<!-- generator="WordPress/' . get_bloginfo( 'version' ) . '" -->';			break;		case 'export':			$gen = '<!-- generator="WordPress/' . get_bloginfo_rss('version') . '" created="'. date('Y-m-d H:i') . '"-->';			break;	}	return apply_filters( "get_the_generator_{$type}", $gen, $type );}/** * Outputs the html checked attribute. * * Compares the first two arguments and if identical marks as checked * * @since 1.0 * * @param mixed $checked One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function checked( $checked, $current = true, $echo = true ) {	return __checked_selected_helper( $checked, $current, $echo, 'checked' );}/** * Outputs the html selected attribute. * * Compares the first two arguments and if identical marks as selected * * @since 1.0 * * @param mixed selected One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function selected( $selected, $current = true, $echo = true ) {	return __checked_selected_helper( $selected, $current, $echo, 'selected' );}/** * Outputs the html disabled attribute. * * Compares the first two arguments and if identical marks as disabled * * @since 3.0.0 * * @param mixed $disabled One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function disabled( $disabled, $current = true, $echo = true ) {	return __checked_selected_helper( $disabled, $current, $echo, 'disabled' );}/** * Private helper function for checked, selected, and disabled. * * Compares the first two arguments and if identical marks as $type * * @since 2.8 * @access private * * @param any $helper One of the values to compare * @param any $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @param string $type The type of checked|selected|disabled we are doing * @return string html attribute or empty string */function __checked_selected_helper( $helper, $current, $echo, $type ) {	if ( (string) $helper === (string) $current )		$result = " $type='$type'";	else		$result = '';	if ( $echo )		echo $result;	return $result;}?>
<?php/** * These functions are needed to load WordPress. * * @package WordPress *//** * Turn register globals off. * * @access private * @since 2.1.0 * @return null Will return null if register_globals PHP directive was disabled */function wp_unregister_GLOBALS() {	if ( !ini_get( 'register_globals' ) )		return;	if ( isset( $_REQUEST['GLOBALS'] ) )		die( /*WP_I18N_GLOBALS_OVERWRITE*/'GLOBALS overwrite attempt detected'/*/WP_I18N_GLOBALS_OVERWRITE*/ );	// Variables that shouldn't be unset	$no_unset = array( 'GLOBALS', '_GET', '_POST', '_COOKIE', '_REQUEST', '_SERVER', '_ENV', '_FILES', 'table_prefix' );	$input = array_merge( $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_FILES, isset( $_SESSION ) && is_array( $_SESSION ) ? $_SESSION : array() );	foreach ( $input as $k => $v )		if ( !in_array( $k, $no_unset ) && isset( $GLOBALS[$k] ) ) {			$GLOBALS[$k] = null;			unset( $GLOBALS[$k] );		}}/** * Fix $_SERVER variables for various setups. * * @access private * @since 3.0.0 */function wp_fix_server_vars() {	global $PHP_SELF;	$default_server_values = array(		'SERVER_SOFTWARE' => '',		'REQUEST_URI' => '',	);	$_SERVER = array_merge( $default_server_values, $_SERVER );	// Fix for IIS when running with PHP ISAPI	if ( empty( $_SERVER['REQUEST_URI'] ) || ( php_sapi_name() != 'cgi-fcgi' && preg_match( '/^Microsoft-IIS\//', $_SERVER['SERVER_SOFTWARE'] ) ) ) {		// IIS Mod-Rewrite		if ( isset( $_SERVER['HTTP_X_ORIGINAL_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_ORIGINAL_URL'];		}		// IIS Isapi_Rewrite		else if ( isset( $_SERVER['HTTP_X_REWRITE_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL'];		} else {			// Use ORIG_PATH_INFO if there is no PATH_INFO			if ( !isset( $_SERVER['PATH_INFO'] ) && isset( $_SERVER['ORIG_PATH_INFO'] ) )				$_SERVER['PATH_INFO'] = $_SERVER['ORIG_PATH_INFO'];			// Some IIS + PHP configurations puts the script-name in the path-info (No need to append it twice)			if ( isset( $_SERVER['PATH_INFO'] ) ) {				if ( $_SERVER['PATH_INFO'] == $_SERVER['SCRIPT_NAME'] )					$_SERVER['REQUEST_URI'] = $_SERVER['PATH_INFO'];				else					$_SERVER['REQUEST_URI'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];			}			// Append the query string if it exists and isn't null			if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {				$_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];			}		}	}	// Fix for PHP as CGI hosts that set SCRIPT_FILENAME to something ending in php.cgi for all requests	if ( isset( $_SERVER['SCRIPT_FILENAME'] ) && ( strpos( $_SERVER['SCRIPT_FILENAME'], 'php.cgi' ) == strlen( $_SERVER['SCRIPT_FILENAME'] ) - 7 ) )		$_SERVER['SCRIPT_FILENAME'] = $_SERVER['PATH_TRANSLATED'];	// Fix for Dreamhost and other PHP as CGI hosts	if ( strpos( $_SERVER['SCRIPT_NAME'], 'php.cgi' ) !== false )		unset( $_SERVER['PATH_INFO'] );	// Fix empty PHP_SELF	$PHP_SELF = $_SERVER['PHP_SELF'];	if ( empty( $PHP_SELF ) )		$_SERVER['PHP_SELF'] = $PHP_SELF = preg_replace( '/(\?.*)?$/', '', $_SERVER["REQUEST_URI"] );}/** * Check for the required PHP version, and the MySQL extension or a database drop-in. * * Dies if requirements are not met. * * @access private * @since 3.0.0 */function wp_check_php_mysql_versions() {	// we can probably extend this function to check if wp_die() exists then use translated strings, and then use it in install.php etc.	global $required_php_version, $wp_version;	$php_version = phpversion();	if ( version_compare( $required_php_version, $php_version, '>' ) )		die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress %2$s requires at least %3$s.'/*/WP_I18N_OLD_PHP*/, $php_version, $wp_version, $required_php_version ) );	if ( !extension_loaded( 'mysql' ) && !file_exists( WP_CONTENT_DIR . '/db.php' ) )		die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );}/** * Don't load all of WordPress when handling a favicon.ico request. * Instead, send the headers for a zero-length favicon and bail. * * @since 3.0.0 */function wp_favicon_request() {	if ( '/favicon.ico' == $_SERVER['REQUEST_URI'] ) {		header('Content-Type: image/vnd.microsoft.icon');		header('Content-Length: 0');		exit;	}}/** * Dies with a maintenance message when conditions are met. * * Checks for a file in the WordPress root directory named ".maintenance". * This file will contain the variable $upgrading, set to the time the file * was created. If the file was created less than 10 minutes ago, WordPress * enters maintenance mode and displays a message. * * The default message can be replaced by using a drop-in (maintenance.php in * the wp-content directory). * * @access private * @since 3.0.0 */function wp_maintenance() {	if ( !file_exists( ABSPATH . '.maintenance' ) || defined( 'WP_INSTALLING' ) )		return;	global $upgrading;	include( ABSPATH . '.maintenance' );	// If the $upgrading timestamp is older than 10 minutes, don't die.	if ( ( time() - $upgrading ) >= 600 )		return;	if ( file_exists( WP_CONTENT_DIR . '/maintenance.php' ) ) {		require_once( WP_CONTENT_DIR . '/maintenance.php' );		die();	}	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	header( "$protocol 503 Service Unavailable", true, 503 );	header( 'Content-Type: text/html; charset=utf-8' );	header( 'Retry-After: 600' );?>	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">	<html xmlns="http://www.w3.org/1999/xhtml">	<head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />		<title><?php echo /*WP_I18N_MAINTENANCE*/'Maintenance'/*/WP_I18N_MAINTENANCE*/; ?></title>	</head>	<body>		<h1><?php echo /*WP_I18N_MAINT_MSG*/'Briefly unavailable for scheduled maintenance. Check back in a minute.'/*/WP_I18N_MAINT_MSG*/; ?></h1>	</body>	</html><?php	die();}/** * PHP 4 standard microtime start capture. * * @access private * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when function is called. * @return bool Always returns true. */function timer_start() {	global $timestart;	$mtime = explode( ' ', microtime() );	$timestart = $mtime[1] + $mtime[0];	return true;}/** * Return and/or display the time from the page start to when function is called. * * You can get the results and print them by doing: * <code> * $nTimePageTookToExecute = timer_stop(); * echo $nTimePageTookToExecute; * </code> * * Or instead, you can do: * <code> * timer_stop(1); * </code> * which will do what the above does. If you need the result, you can assign it to a variable, but * most cases, you only need to echo it. * * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when timer_start() is called * @global int $timeend  Seconds and Microseconds added together from when function is called * * @param int $display Use '0' or null to not echo anything and 1 to echo the total time * @param int $precision The amount of digits from the right of the decimal to display. Default is 3. * @return float The "second.microsecond" finished time calculation */function timer_stop( $display = 0, $precision = 3 ) { // if called like timer_stop(1), will echo $timetotal	global $timestart, $timeend;	$mtime = microtime();	$mtime = explode( ' ', $mtime );	$timeend = $mtime[1] + $mtime[0];	$timetotal = $timeend - $timestart;	$r = ( function_exists( 'number_format_i18n' ) ) ? number_format_i18n( $timetotal, $precision ) : number_format( $timetotal, $precision );	if ( $display )		echo $r;	return $r;}/** * Sets PHP error handling and handles WordPress debug mode. * * Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be * defined in wp-config.php. Example: <code> define( 'WP_DEBUG', true ); </code> * * WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true. * WP_DEBUG defaults to false. * * When WP_DEBUG is true, all PHP notices are reported. WordPress will also display * notices, including one when a deprecated WordPress function, function argument, * or file is used. Deprecated code may be removed from a later version. * * It is strongly recommended that plugin and theme developers use WP_DEBUG in their * development environments. * * When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed. * WP_DEBUG_DISPLAY defaults to true. Defining it as false prevents WordPress from * changing the global configuration setting. (Defining WP_DEBUG_DISPLAY as false * will never force errors to be hidden.) * * When WP_DEBUG_LOG is true, errors will be logged to wp-content/debug.log. * WP_DEBUG_LOG defaults to false. * * @access private * @since 3.0.0 */function wp_debug_mode() {	if ( WP_DEBUG ) {		if ( defined( 'E_DEPRECATED' ) )			error_reporting( E_ALL & ~E_DEPRECATED & ~E_STRICT );		else			error_reporting( E_ALL );		if ( WP_DEBUG_DISPLAY )			ini_set( 'display_errors', 1 );		if ( WP_DEBUG_LOG ) {			ini_set( 'log_errors', 1 );			ini_set( 'error_log', WP_CONTENT_DIR . '/debug.log' );		}	} else {		if ( defined( 'E_RECOVERABLE_ERROR' ) )			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );		else			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING );	}}/** * Sets the location of the language directory. * * To set directory manually, define <code>WP_LANG_DIR</code> in wp-config.php. * * First looks for language folder in WP_CONTENT_DIR and uses that folder if it * exists. Or it uses the "languages" folder in WPINC. * * The WP_LANG_DIR constant was introduced in 2.1.0. * * @access private * @since 3.0.0 */function wp_set_lang_dir() {	if ( !defined( 'WP_LANG_DIR' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/languages' ) && @is_dir( WP_CONTENT_DIR . '/languages' ) ) {			define( 'WP_LANG_DIR', WP_CONTENT_DIR . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old static relative path maintained for limited backwards compatibility - won't work in some cases				define( 'LANGDIR', 'wp-content/languages' );			}		} else {			define( 'WP_LANG_DIR', ABSPATH . WPINC . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old relative path maintained for backwards compatibility				define( 'LANGDIR', WPINC . '/languages' );			}		}	}}/** * Sets the database table prefix and the format specifiers for database table columns. * * Columns not listed here default to %s. * * @see wpdb::$field_types Since 2.8.0 * @see wpdb::prepare() * @see wpdb::insert() * @see wpdb::update() * @see wpdb::set_prefix() * * @access private * @since 3.0.0 */function wp_set_wpdb_vars() {	global $wpdb, $table_prefix;	if ( !empty( $wpdb->error ) )		dead_db();	$wpdb->field_types = array( 'post_author' => '%d', 'post_parent' => '%d', 'menu_order' => '%d', 'term_id' => '%d', 'term_group' => '%d', 'term_taxonomy_id' => '%d',		'parent' => '%d', 'count' => '%d','object_id' => '%d', 'term_order' => '%d', 'ID' => '%d', 'commment_ID' => '%d', 'comment_post_ID' => '%d', 'comment_parent' => '%d',		'user_id' => '%d', 'link_id' => '%d', 'link_owner' => '%d', 'link_rating' => '%d', 'option_id' => '%d', 'blog_id' => '%d', 'meta_id' => '%d', 'post_id' => '%d',		'user_status' => '%d', 'umeta_id' => '%d', 'comment_karma' => '%d', 'comment_count' => '%d',		// multisite:		'active' => '%d', 'cat_id' => '%d', 'deleted' => '%d', 'lang_id' => '%d', 'mature' => '%d', 'public' => '%d', 'site_id' => '%d', 'spam' => '%d',	);	$prefix = $wpdb->set_prefix( $table_prefix );	if ( is_wp_error( $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: <code>$table_prefix</code> in <code>wp-config.php</code> can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );}/** * Starts the WordPress object cache. * * If an object-cache.php file exists in the wp-content directory, * it uses that drop-in as an external object cache. * * @access private * @since 3.0.0 */function wp_start_object_cache() {	global $_wp_using_ext_object_cache;	$first_init = false; 	if ( ! function_exists( 'wp_cache_init' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {			require_once ( WP_CONTENT_DIR . '/object-cache.php' );			$_wp_using_ext_object_cache = true;		} else {			require_once ( ABSPATH . WPINC . '/cache.php' );			$_wp_using_ext_object_cache = false;		}		$first_init = true;	} else if ( !$_wp_using_ext_object_cache && file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {		// Sometimes advanced-cache.php can load object-cache.php before it is loaded here.		// This breaks the function_exists check above and can result in $_wp_using_ext_object_cache		// being set incorrectly.  Double check if an external cache exists.		$_wp_using_ext_object_cache = true;	}	// If cache supports reset, reset instead of init if already initialized.	// Reset signals to the cache that global IDs have changed and it may need to update keys	// and cleanup caches.	if ( !$first_init && function_exists('wp_cache_reset') )		wp_cache_reset();	else		wp_cache_init();	if ( function_exists( 'wp_cache_add_global_groups' ) ) {		wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-transient', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'global-posts' ) );		wp_cache_add_non_persistent_groups( array( 'comment', 'counts', 'plugins' ) );	}}/** * Redirects to the installer if WordPress is not installed. * * Dies with an error message when multisite is enabled. * * @access private * @since 3.0.0 */function wp_not_installed() {	if ( is_multisite() ) {		if ( ! is_blog_installed() && ! defined( 'WP_INSTALLING' ) )			wp_die( __( 'The site you have requested is not installed properly. Please contact the system administrator.' ) );	} elseif ( ! is_blog_installed() && false === strpos( $_SERVER['PHP_SELF'], 'install.php' ) && !defined( 'WP_INSTALLING' ) ) {		if ( defined( 'WP_SITEURL' ) )			$link = WP_SITEURL . '/wp-admin/install.php';		elseif ( false !== strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) )			$link = preg_replace( '|/wp-admin/?.*?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		else			$link = preg_replace( '|/[^/]+?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		require( ABSPATH . WPINC . '/kses.php' );		require( ABSPATH . WPINC . '/pluggable.php' );		require( ABSPATH . WPINC . '/formatting.php' );		wp_redirect( $link );		die();	}}/** * Returns array of must-use plugin files to be included in global scope. * * The default directory is wp-content/mu-plugins. To change the default directory * manually, define <code>WPMU_PLUGIN_DIR</code> and <code>WPMU_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_mu_plugins() {	$mu_plugins = array();	if ( !is_dir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	if ( ! $dh = opendir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	while ( ( $plugin = readdir( $dh ) ) !== false ) {		if ( substr( $plugin, -4 ) == '.php' )			$mu_plugins[] = WPMU_PLUGIN_DIR . '/' . $plugin;	}	closedir( $dh );	sort( $mu_plugins );	return $mu_plugins;}/** * Returns array of plugin files to be included in global scope. * * The default directory is wp-content/plugins. To change the default directory * manually, define <code>WP_PLUGIN_DIR</code> and <code>WP_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_active_and_valid_plugins() {	$plugins = array();	$active_plugins = (array) get_option( 'active_plugins', array() );	// Get active network plugins	if ( is_multisite() ) {		$active_sitewide_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		if ( !empty($active_sitewide_plugins) ) {			$active_plugins = array_merge( $active_plugins, array_keys( $active_sitewide_plugins ) );			sort( $active_plugins );		}	}	// Check for hacks file if the option is enabled	if ( get_option( 'hack_file' ) && file_exists( ABSPATH . 'my-hacks.php' ) ) {		_deprecated_file( 'my-hacks.php', '1.5' );		array_unshift( $plugins, ABSPATH . 'my-hacks.php' );	}	if ( empty( $active_plugins ) || defined( 'WP_INSTALLING' ) )		return $plugins;	foreach ( $active_plugins as $plugin ) {		if ( ! validate_file( $plugin ) // $plugin must validate as file			&& '.php' == substr( $plugin, -4 ) // $plugin must end with '.php'			&& file_exists( WP_PLUGIN_DIR . '/' . $plugin ) // $plugin must exist			)		$plugins[] = WP_PLUGIN_DIR . '/' . $plugin;	}	return $plugins;}/** * Sets internal encoding using mb_internal_encoding(). * * In most cases the default internal encoding is latin1, which is of no use, * since we want to use the mb_ functions for utf-8 strings. * * @access private * @since 3.0.0 */function wp_set_internal_encoding() {	if ( function_exists( 'mb_internal_encoding' ) ) {		if ( !@mb_internal_encoding( get_option( 'blog_charset' ) ) )			mb_internal_encoding( 'UTF-8' );	}}/** * Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER. * * Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE, * or $_ENV are needed, use those superglobals directly. * * @access private * @since 3.0.0 */function wp_magic_quotes() {	// If already slashed, strip.	if ( get_magic_quotes_gpc() ) {		$_GET    = stripslashes_deep( $_GET    );		$_POST   = stripslashes_deep( $_POST   );		$_COOKIE = stripslashes_deep( $_COOKIE );	}	// Escape with wpdb.	$_GET    = add_magic_quotes( $_GET    );	$_POST   = add_magic_quotes( $_POST   );	$_COOKIE = add_magic_quotes( $_COOKIE );	$_SERVER = add_magic_quotes( $_SERVER );	// Force REQUEST to be GET + POST.	$_REQUEST = array_merge( $_GET, $_POST );}/** * Runs just before PHP shuts down execution. * * @access private * @since 1.2.0 */function shutdown_action_hook() {	do_action( 'shutdown' );	wp_cache_close();}/** * Copy an object. * * Returns a cloned copy of an object. * * @since 2.7.0 * * @param object $object The object to clone * @return object The cloned object */function wp_clone( $object ) {	static $can_clone;	if ( !isset( $can_clone ) )		$can_clone = version_compare( phpversion(), '5.0', '>=' );	return $can_clone ? clone( $object ) : $object;}/** * Whether the current request is in WordPress admin Panel * * Does not inform on whether the user is an admin! Use capability checks to * tell if the user should be accessing a section or not. * * @since 1.5.1 * * @return bool True if inside WordPress administration pages. */function is_admin() {	if ( defined( 'WP_ADMIN' ) )		return WP_ADMIN;	return false;}/** * Whether Multisite support is enabled * * @since 3.0.0 * * @return bool True if multisite is enabled, false otherwise. */function is_multisite() {	if ( defined( 'MULTISITE' ) )		return MULTISITE;	if ( defined( 'VHOST' ) || defined( 'SUNRISE' ) )		return true;	return false;}?>
<?php/** * New User Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('create_users') )	wp_die(__('Cheatin&#8217; uh?'));if ( is_multisite() && !get_site_option( 'add_new_users' ) )	wp_die( __('Page disabled by the administrator') );/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( is_multisite() ) {	function admin_created_user_email( $text ) {		return sprintf( __( "Hi,You've been invited to join '%s' at%s as a %s.If you do not want to join this site please ignorethis email. This invitation will expire in a few days.Please click the following link to activate your user account:%%s" ), get_bloginfo('name'), site_url(), esc_html( $_REQUEST[ 'role' ] ) );	}	add_filter( 'wpmu_signup_user_notification_email', 'admin_created_user_email' );	function admin_created_user_subject( $text ) {		return "[" . get_bloginfo('name') . "] Your site invite";	}}if ( isset($_REQUEST['action']) && 'adduser' == $_REQUEST['action'] ) {	check_admin_referer('add-user');	if ( !is_multisite() ) {		$user_id = add_user();		if ( is_wp_error( $user_id ) ) {			$add_user_errors = $user_id;		} else {			if ( current_user_can('edit_users') ) {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				$redirect = 'users.php?usersearch='. urlencode($new_user_login) . '&update=add' . '#user-' . $user_id;			} else {				$redirect = add_query_arg( 'update', 'add', 'user-new.php' );			}			wp_redirect( $redirect );			die();		}	} else {		$user_login = preg_replace( "/\s+/", '', sanitize_user( $_REQUEST[ 'user_login' ], true ) );		$user_details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$wpdb->users} WHERE user_login = %s AND user_email = %s", $user_login, $_REQUEST[ 'email' ] ) );		if ( $user_details ) {			// Adding an existing user to this blog			$new_user_email = esc_html(trim($_REQUEST['email']));			$redirect = 'user-new.php';			$username = $user_details->user_login;			$user_id = $user_details->ID;			if ( ( $username != null && !is_super_admin( $user_id ) ) && ( array_key_exists($blog_id, get_blogs_of_user($user_id)) ) ) {				$redirect = add_query_arg( array('update' => 'addexisting'), 'user-new.php' );			} else {				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_existing_user_to_blog( array( 'user_id' => $user_id, 'role' => $_REQUEST[ 'role' ] ) );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$newuser_key = substr( md5( $user_id ), 0, 5 );					add_option( 'new_user_' . $newuser_key, array( 'user_id' => $user_id, 'email' => $user_details->user_email, 'role' => $_REQUEST[ 'role' ] ) );					$message = __("Hi,\n\nYou have been invited to join '%s' at\n%s as a %s.\nPlease click the following link to confirm the invite:\n%s\n");					wp_mail( $new_user_email, sprintf( __( '[%s] Joining confirmation' ), get_option( 'blogname' ) ),  sprintf($message, get_option('blogname'), site_url(), $_REQUEST[ 'role' ], site_url("/newbloguser/$newuser_key/")));					$redirect = add_query_arg( array('update' => 'add'), 'user-new.php' );				}			}			wp_redirect( $redirect );			die();		} else {			// Adding a new user to this blog			$user_details = wpmu_validate_user_signup( $_REQUEST[ 'user_login' ], $_REQUEST[ 'email' ] );			unset( $user_details[ 'errors' ]->errors[ 'user_email_used' ] );			if ( is_wp_error( $user_details[ 'errors' ] ) && !empty( $user_details[ 'errors' ]->errors ) ) {				$add_user_errors = $user_details[ 'errors' ];			} else {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_filter( 'wpmu_signup_user_notification', '__return_false' ); // Disable confirmation email				}				wpmu_signup_user( $new_user_login, $_REQUEST[ 'email' ], array( 'add_to_blog' => $wpdb->blogid, 'new_role' => $_REQUEST[ 'role' ] ) );				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					$key = $wpdb->get_var( $wpdb->prepare( "SELECT activation_key FROM {$wpdb->signups} WHERE user_login = %s AND user_email = %s", $new_user_login, $_REQUEST[ 'email' ] ) );					wpmu_activate_signup( $key );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$redirect = add_query_arg( array('update' => 'newuserconfimation'), 'user-new.php' );				}				wp_redirect( $redirect );				die();			}		}	}}$title = __('Add New User');$parent_file = 'users.php';add_contextual_help($current_screen,    '<p>' . __('To add a new user to your site, fill in the form on this screen. If you&#8217;re not sure which role to assign, you can use the link below to review the different roles and their capabilities. Here is a basic overview of roles:') . '</p>' .    '<ul>' .        '<li>' . __('Administrators have access to all the administration features.') . '</li>' .        '<li>' . __('Editors can publish posts, manage posts as well as manage other people&#8217;s posts, etc.')  . '</li>' .        '<li>' . __('Authors can publish and manage their own posts.') . '</li>' .        '<li>' . __('Contributors can write and manage their posts but not publish posts or upload media files.') . '</li>' .        '<li>' . __('Subscribers can read comments/comment/receive newsletters, etc.') . '</li>' .    '</ul>' .    '<p>' . __('You must assign a password to the new user, but don&#8217;t worry; when they log in for the first time they will be prompted to change it. The username, however, cannot be changed.') . '</p>' .    '<p>' . __('New users will receive an email letting them know they&#8217;ve been added as a user for your site. By default, this email will also contain their password. Uncheck the box if you do not the password to be included in the welcome email.') . '</p>' .    '<p>' . __('Remember to click the Add User button at the bottom of this screen when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Add_New_SubPanel" target="_blank">Documentation on Adding New Users</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script('wp-ajax-response');wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');require_once ('admin-header.php');if ( isset($_GET['update']) ) {	$messages = array();	if ( is_multisite() ) {		switch ( $_GET['update'] ) {			case "newuserconfimation":				$messages[] = __('Invitation email sent to new user. A confirmation link must be clicked before their account is created.');				break;			case "add":				$messages[] = __('Invitation email sent to user. A confirmation link must be clicked for them to be added to your site.');				break;			case "addnoconfirmation":				$messages[] = __('User has been added to your site.');				break;			case "addexisting":				$messages[] = __('That user is already a member of this site.');				break;		}	} else {		if ( 'add' == $_GET['update'] )			$messages[] = __('User added.');	}}?><div class="wrap"><?php screen_icon(); ?><h2 id="add-new-user"><?php _e('Add New User') ?></h2><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty( $messages ) ) {	foreach ( $messages as $msg )		echo '<div id="message" class="updated"><p>' . $msg . '</p></div>';} ?><?php if ( isset($add_user_errors) && is_wp_error( $add_user_errors ) ) : ?>	<div class="error">		<?php			foreach ( $add_user_errors->get_error_messages() as $message )				echo "<p>$message</p>";		?>	</div><?php endif; ?><div id="ajax-response"></div><?phpif ( !is_multisite() ) {	if ( get_option('users_can_register') )		echo '<p>' . sprintf(__('Users can <a href="%1$s">register themselves</a> or you can manually create users here.'), site_url('wp-register.php')) . '</p>';	else		echo '<p>' . sprintf(__('Users cannot currently <a href="%1$s">register themselves</a>, but you can manually create users here.'), admin_url('options-general.php#users_can_register')) . '</p>';} else {	echo '<p>' . __( 'You can add new users to your site in two ways:' ) . '<ol><li> ' . __( 'Enter the username and email address of an existing user on this site.' ) . '</li><li> ' . __( 'Enter the username and the email address of a person who is not already a member of this site. Choose the username carefully, it cannot be changed.' ) . '</li></ol></p>';	echo '<p>' . __( 'That person will be sent an email asking them to click a link confirming the invite. New users will then be sent an email with a randomly generated password and a login link.' ) . '</p>';}?><form action="#add-new-user" method="post" name="adduser" id="adduser" class="add:users: validate"<?php do_action('user_new_form_tag');?>><?php wp_nonce_field('add-user') ?><?php//Load up the passed data, else set to a default.foreach ( array('user_login' => 'login', 'first_name' => 'firstname', 'last_name' => 'lastname',				'email' => 'email', 'url' => 'uri', 'role' => 'role') as $post_field => $var ) {	$var = "new_user_$var";	if ( ! isset($$var) )		$$var = isset($_POST[$post_field]) ? stripslashes($_POST[$post_field]) : '';}$new_user_send_password = !$_POST || isset($_POST['send_password']);?><table class="form-table">	<tr class="form-field form-required">		<th scope="row"><label for="user_login"><?php _e('Username'); ?> <span class="description"><?php _e('(required)'); ?></span></label>		<input name="action" type="hidden" id="action" value="adduser" /></th>		<td><input name="user_login" type="text" id="user_login" value="<?php echo esc_attr($new_user_login); ?>" aria-required="true" /></td>	</tr>	<tr class="form-field form-required">		<th scope="row"><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>		<td><input name="email" type="text" id="email" value="<?php echo esc_attr($new_user_email); ?>" /></td>	</tr><?php if ( !is_multisite() ) { ?>	<tr class="form-field">		<th scope="row"><label for="first_name"><?php _e('First Name') ?> </label></th>		<td><input name="first_name" type="text" id="first_name" value="<?php echo esc_attr($new_user_firstname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="last_name"><?php _e('Last Name') ?> </label></th>		<td><input name="last_name" type="text" id="last_name" value="<?php echo esc_attr($new_user_lastname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="url"><?php _e('Website') ?></label></th>		<td><input name="url" type="text" id="url" class="code" value="<?php echo esc_attr($new_user_uri); ?>" /></td>	</tr><?php if ( apply_filters('show_password_fields', true) ) : ?>	<tr class="form-field form-required">		<th scope="row"><label for="pass1"><?php _e('Password'); ?> <span class="description"><?php /* translators: password input field */_e('(twice, required)'); ?></span></label></th>		<td><input name="pass1" type="password" id="pass1" autocomplete="off" />		<br />		<input name="pass2" type="password" id="pass2" autocomplete="off" />		<br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>		</td>	</tr>	<tr>		<th scope="row"><label for="send_password"><?php _e('Send Password?') ?></label></th>		<td><label for="send_password"><input type="checkbox" name="send_password" id="send_password" <?php checked($new_user_send_password, true); ?> /> <?php _e('Send this password to the new user by email.'); ?></label></td>	</tr><?php endif; ?><?php } // !is_multisite ?>	<tr class="form-field">		<th scope="row"><label for="role"><?php _e('Role'); ?></label></th>		<td><select name="role" id="role">			<?php			if ( !$new_user_role )				$new_user_role = !empty($current_role) ? $current_role : get_option('default_role');			wp_dropdown_roles($new_user_role);			?>			</select>		</td>	</tr>	<?php if ( is_multisite() && is_super_admin() ) { ?>	<tr>		<th scope="row"><label for="noconfirmation"><?php _e('Skip Confirmation Email') ?></label></th>		<td><label for="noconfirmation"><input type="checkbox" name="noconfirmation" id="noconfirmation" value="1" /> <?php _e( 'Site administrators can add a user without sending the confirmation email.' ); ?></label></td>	</tr>	<?php } ?></table><p class="submit">	<input name="adduser" type="submit" id="addusersub" class="button-primary" value="<?php esc_attr_e('Add User') ?>" /></p></form></div><?phpinclude('./admin-footer.php');?>
<?php/** * WordPress Link Template Functions * * @package WordPress * @subpackage Template *//** * Display the permalink for the current post. * * @since 1.2.0 * @uses apply_filters() Calls 'the_permalink' filter on the permalink string. */function the_permalink() {	echo apply_filters('the_permalink', get_permalink());}/** * Retrieve trailing slash string, if blog set for adding trailing slashes. * * Conditionally adds a trailing slash if the permalink structure has a trailing * slash, strips the trailing slash if not. The string is passed through the * 'user_trailingslashit' filter. Will remove trailing slash from string, if * blog is not set to have them. * * @since 2.2.0 * @uses $wp_rewrite * * @param $string String a URL with or without a trailing slash. * @param $type_of_url String the type of URL being considered (e.g. single, category, etc) for use in the filter. * @return string */function user_trailingslashit($string, $type_of_url = '') {	global $wp_rewrite;	if ( $wp_rewrite->use_trailing_slashes )		$string = trailingslashit($string);	else		$string = untrailingslashit($string);	// Note that $type_of_url can be one of following:	// single, single_trackback, single_feed, single_paged, feed, category, page, year, month, day, paged	$string = apply_filters('user_trailingslashit', $string, $type_of_url);	return $string;}/** * Display permalink anchor for current post. * * The permalink mode title will use the post title for the 'a' element 'id' * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute. * * @since 0.71 * * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'. */function permalink_anchor($mode = 'id') {	global $post;	switch ( strtolower($mode) ) {		case 'title':			$title = sanitize_title($post->post_title) . '-' . $post->ID;			echo '<a id="'.$title.'"></a>';			break;		case 'id':		default:			echo '<a id="post-' . $post->ID . '"></a>';			break;	}}/** * Retrieve full permalink for current post or post ID. * * @since 1.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name. * @return string */function get_permalink($id = 0, $leavename = false) {	$rewritecode = array(		'%year%',		'%monthnum%',		'%day%',		'%hour%',		'%minute%',		'%second%',		$leavename? '' : '%postname%',		'%post_id%',		'%category%',		'%author%',		$leavename? '' : '%pagename%',	);	if ( is_object($id) && isset($id->filter) && 'sample' == $id->filter ) {		$post = $id;		$sample = true;	} else {		$post = &get_post($id);		$sample = false;	}	if ( empty($post->ID) )		return false;	if ( $post->post_type == 'page' )		return get_page_link($post->ID, $leavename, $sample);	elseif ( $post->post_type == 'attachment' )		return get_attachment_link($post->ID);	elseif ( in_array($post->post_type, get_post_types( array('_builtin' => false) ) ) )		return get_post_permalink($post, $leavename, $sample);	$permalink = get_option('permalink_structure');	$permalink = apply_filters('pre_post_link', $permalink, $post, $leavename);	if ( '' != $permalink && !in_array($post->post_status, array('draft', 'pending', 'auto-draft')) ) {		$unixtime = strtotime($post->post_date);		$category = '';		if ( strpos($permalink, '%category%') !== false ) {			$cats = get_the_category($post->ID);			if ( $cats ) {				usort($cats, '_usort_terms_by_ID'); // order by ID				$category = $cats[0]->slug;				if ( $parent = $cats[0]->parent )					$category = get_category_parents($parent, false, '/', true) . $category;			}			// show default category in permalinks, without			// having to assign it explicitly			if ( empty($category) ) {				$default_category = get_category( get_option( 'default_category' ) );				$category = is_wp_error( $default_category ) ? '' : $default_category->slug;			}		}		$author = '';		if ( strpos($permalink, '%author%') !== false ) {			$authordata = get_userdata($post->post_author);			$author = $authordata->user_nicename;		}		$date = explode(" ",date('Y m d H i s', $unixtime));		$rewritereplace =		array(			$date[0],			$date[1],			$date[2],			$date[3],			$date[4],			$date[5],			$post->post_name,			$post->ID,			$category,			$author,			$post->post_name,		);		$permalink = home_url( str_replace($rewritecode, $rewritereplace, $permalink) );		$permalink = user_trailingslashit($permalink, 'single');	} else { // if they're not using the fancy permalink option		$permalink = home_url('?p=' . $post->ID);	}	return apply_filters('post_link', $permalink, $post, $leavename);}/** * Retrieve the permalink for a post with a custom post type. * * @since 3.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_post_permalink( $id = 0, $leavename = false, $sample = false ) {	global $wp_rewrite;	$post = &get_post($id);	if ( is_wp_error( $post ) )		return $post;	$post_link = $wp_rewrite->get_extra_permastruct($post->post_type);	$slug = $post->post_name;	$draft_or_pending = in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft' ) );	$post_type = get_post_type_object($post->post_type);	if ( !empty($post_link) && ( ( isset($post->post_status) && !$draft_or_pending ) || $sample ) ) {		if ( ! $leavename ) {			if ( $post_type->hierarchical )				$slug = get_page_uri($id);			$post_link = str_replace("%$post->post_type%", $slug, $post_link);		}		$post_link = home_url( user_trailingslashit($post_link) );	} else {		if ( $post_type->query_var && ( isset($post->post_status) && !$draft_or_pending ) )			$post_link = add_query_arg($post_type->query_var, $slug, '');		else			$post_link = add_query_arg(array('post_type' => $post->post_type, 'p' => $post->ID), '');		$post_link = home_url($post_link);	}	return apply_filters('post_type_link', $post_link, $id, $leavename, $sample);}/** * Retrieve permalink from post ID. * * @since 1.0.0 * * @param int $post_id Optional. Post ID. * @param mixed $deprecated Not used. * @return string */function post_permalink( $post_id = 0, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	return get_permalink($post_id);}/** * Retrieve the permalink for current page or page ID. * * Respects page_on_front. Use this one. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep page name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	if ( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') )		$link = home_url('/');	else		$link = _get_page_link( $id , $leavename, $sample );	return apply_filters('page_link', $link, $id, $sample);}/** * Retrieve the page permalink. * * Ignores page_on_front. Internal use only. * * @since 2.1.0 * @access private * * @param int $id Optional. Post ID. * @param bool $leavename Optional. Leave name. * @param bool $sample Optional. Sample permalink. * @return string */function _get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post, $wp_rewrite;	if ( !$id )		$id = (int) $post->ID;	else		$post = &get_post($id);	$link = $wp_rewrite->get_page_permastruct();	if ( '' != $link && ( ( isset($post->post_status) && 'draft' != $post->post_status && 'pending' != $post->post_status ) || $sample ) ) {		if ( ! $leavename )			$link = str_replace('%pagename%', get_page_uri($id), $link);		$link = home_url($link);		$link = user_trailingslashit($link, 'page');	} else {		$link = home_url("?page_id=$id");	}	return apply_filters( '_get_page_link', $link, $id );}/** * Retrieve permalink for attachment. * * This can be used in the WordPress Loop or outside of it. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @return string */function get_attachment_link($id = false) {	global $post, $wp_rewrite;	$link = false;	if ( ! $id)		$id = (int) $post->ID;	$object = get_post($id);	if ( $wp_rewrite->using_permalinks() && ($object->post_parent > 0) && ($object->post_parent != $id) ) {		$parent = get_post($object->post_parent);		if ( 'page' == $parent->post_type )			$parentlink = _get_page_link( $object->post_parent ); // Ignores page_on_front		else			$parentlink = get_permalink( $object->post_parent );		if ( is_numeric($object->post_name) || false !== strpos(get_option('permalink_structure'), '%category%') )			$name = 'attachment/' . $object->post_name; // <permalink>/<int>/ is paged so we use the explicit attachment marker		else			$name = $object->post_name;		if ( strpos($parentlink, '?') === false )			$link = user_trailingslashit( trailingslashit($parentlink) . $name );	}	if ( ! $link )		$link = home_url( "/?attachment_id=$id" );	return apply_filters('attachment_link', $link, $id);}/** * Retrieve the permalink for the year archives. * * @since 1.5.0 * * @param int|bool $year False for current year or year for permalink. * @return string */function get_year_link($year) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	$yearlink = $wp_rewrite->get_year_permastruct();	if ( !empty($yearlink) ) {		$yearlink = str_replace('%year%', $year, $yearlink);		return apply_filters('year_link', home_url( user_trailingslashit($yearlink, 'year') ), $year);	} else {		return apply_filters('year_link', home_url('?m=' . $year), $year);	}}/** * Retrieve the permalink for the month archives with year. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @return string */function get_month_link($year, $month) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	$monthlink = $wp_rewrite->get_month_permastruct();	if ( !empty($monthlink) ) {		$monthlink = str_replace('%year%', $year, $monthlink);		$monthlink = str_replace('%monthnum%', zeroise(intval($month), 2), $monthlink);		return apply_filters('month_link', home_url( user_trailingslashit($monthlink, 'month') ), $year, $month);	} else {		return apply_filters('month_link', home_url( '?m=' . $year . zeroise($month, 2) ), $year, $month);	}}/** * Retrieve the permalink for the day archives with year and month. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @param bool|int $day False for current day. Integer of day. * @return string */function get_day_link($year, $month, $day) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	if ( !$day )		$day = gmdate('j', current_time('timestamp'));	$daylink = $wp_rewrite->get_day_permastruct();	if ( !empty($daylink) ) {		$daylink = str_replace('%year%', $year, $daylink);		$daylink = str_replace('%monthnum%', zeroise(intval($month), 2), $daylink);		$daylink = str_replace('%day%', zeroise(intval($day), 2), $daylink);		return apply_filters('day_link', home_url( user_trailingslashit($daylink, 'day') ), $year, $month, $day);	} else {		return apply_filters('day_link', home_url( '?m=' . $year . zeroise($month, 2) . zeroise($day, 2) ), $year, $month, $day);	}}/** * Display the permalink for the feed type. * * @since 3.0.0 * * @param string $anchor The link's anchor text. * @param string $feed Optional, defaults to default feed. Feed type. */function the_feed_link( $anchor, $feed = '' ) {	$link = '<a href="' . esc_url( get_feed_link( $feed ) ) . '">' . $anchor . '</a>';	echo apply_filters( 'the_feed_link', $link, $feed );}/** * Retrieve the permalink for the feed type. * * @since 1.5.0 * * @param string $feed Optional, defaults to default feed. Feed type. * @return string */function get_feed_link($feed = '') {	global $wp_rewrite;	$permalink = $wp_rewrite->get_feed_permastruct();	if ( '' != $permalink ) {		if ( false !== strpos($feed, 'comments_') ) {			$feed = str_replace('comments_', '', $feed);			$permalink = $wp_rewrite->get_comment_feed_permastruct();		}		if ( get_default_feed() == $feed )			$feed = '';		$permalink = str_replace('%feed%', $feed, $permalink);		$permalink = preg_replace('#/+#', '/', "/$permalink");		$output =  home_url( user_trailingslashit($permalink, 'feed') );	} else {		if ( empty($feed) )			$feed = get_default_feed();		if ( false !== strpos($feed, 'comments_') )			$feed = str_replace('comments_', 'comments-', $feed);		$output = home_url("?feed={$feed}");	}	return apply_filters('feed_link', $output, $feed);}/** * Retrieve the permalink for the post comments feed. * * @since 2.2.0 * * @param int $post_id Optional. Post ID. * @param string $feed Optional. Feed type. * @return string */function get_post_comments_feed_link($post_id = '', $feed = '') {	global $id;	if ( empty($post_id) )		$post_id = (int) $id;	if ( empty($feed) )		$feed = get_default_feed();	if ( '' != get_option('permalink_structure') ) {		if ( 'page' == get_option('show_on_front') && $post_id == get_option('page_on_front') )			$url = _get_page_link( $post_id );		else			$url = get_permalink($post_id);		$url = trailingslashit($url) . 'feed';		if ( $feed != get_default_feed() )			$url .= "/$feed";		$url = user_trailingslashit($url, 'single_feed');	} else {		$type = get_post_field('post_type', $post_id);		if ( 'page' == $type )			$url = home_url("?feed=$feed&amp;page_id=$post_id");		else			$url = home_url("?feed=$feed&amp;p=$post_id");	}	return apply_filters('post_comments_feed_link', $url);}/** * Display the comment feed link for a post. * * Prints out the comment feed link for a post. Link text is placed in the * anchor. If no link text is specified, default text is used. If no post ID is * specified, the current post is used. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param string $link_text Descriptive text. * @param int $post_id Optional post ID.  Default to current post. * @param string $feed Optional. Feed format. * @return string Link to the comment feed for the current post.*/function post_comments_feed_link( $link_text = '', $post_id = '', $feed = '' ) {	$url = get_post_comments_feed_link($post_id, $feed);	if ( empty($link_text) )		$link_text = __('Comments Feed');	echo apply_filters( 'post_comments_feed_link_html', "<a href='$url'>$link_text</a>", $post_id, $feed );}/** * Retrieve the feed link for a given author. * * Returns a link to the feed for all posts by a given author. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $author_id ID of an author. * @param string $feed Optional. Feed type. * @return string Link to the feed for the author specified by $author_id.*/function get_author_feed_link( $author_id, $feed = '' ) {	$author_id = (int) $author_id;	$permalink_structure = get_option('permalink_structure');	if ( empty($feed) )		$feed = get_default_feed();	if ( '' == $permalink_structure ) {		$link = home_url("?feed=$feed&amp;author=" . $author_id);	} else {		$link = get_author_posts_url($author_id);		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit($link) . user_trailingslashit($feed_link, 'feed');	}	$link = apply_filters('author_feed_link', $link, $feed);	return $link;}/** * Retrieve the feed link for a category. * * Returns a link to the feed for all post in a given category. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $cat_id ID of a category. * @param string $feed Optional. Feed type. * @return string Link to the feed for the category specified by $cat_id.*/function get_category_feed_link($cat_id, $feed = '') {	return get_term_feed_link($cat_id, 'category', $feed);}/** * Retrieve the feed link for a taxonomy. * * Returns a link to the feed for all post in a given term. A specific feed * can be requested or left blank to get the default feed. * * @since 3.0 * * @param int $term_id ID of a category. * @param string $taxonomy Optional. Taxonomy of $term_id * @param string $feed Optional. Feed type. * @return string Link to the feed for the taxonomy specified by $term_id and $taxonomy.*/function get_term_feed_link( $term_id, $taxonomy = 'category', $feed = '' ) {	global $wp_rewrite;	$term_id = ( int ) $term_id;	$term = get_term( $term_id, $taxonomy  );	if ( empty( $term ) || is_wp_error( $term ) )		return false;	if ( empty( $feed ) )		$feed = get_default_feed();	$permalink_structure = get_option( 'permalink_structure' );	if ( '' == $permalink_structure ) {		if ( 'category' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;cat=$term_id");		}		elseif ( 'post_tag' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;tag=$term->slug");		} else {			$t = get_taxonomy( $taxonomy );			$link = home_url("?feed=$feed&amp;$t->query_var=$term->slug");		}	} else {		$link = get_term_link( $term_id, $term->taxonomy );		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit( $link ) . user_trailingslashit( $feed_link, 'feed' );	}	if ( 'category' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	elseif ( 'post_tag' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	else		$link = apply_filters( 'taxonomy_feed_link', $link, $feed, $taxonomy );	return $link;}/** * Retrieve permalink for feed of tag. * * @since 2.3.0 * * @param int $tag_id Tag ID. * @param string $feed Optional. Feed type. * @return string */function get_tag_feed_link($tag_id, $feed = '') {	return get_term_feed_link($tag_id, 'post_tag', $feed);}/** * Retrieve edit tag link. * * @since 2.7.0 * * @param int $tag_id Tag ID * @return string */function get_edit_tag_link( $tag_id = 0, $taxonomy = 'post_tag' ) {	global $post_type;	$tax = get_taxonomy($taxonomy);	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag_id, $taxonomy);	$location = admin_url('edit-tags.php?action=edit&amp;taxonomy=' . $taxonomy . '&amp;' . (!empty($post_type) ? 'post_type=' . $post_type .'&amp;' : '') .'tag_ID=' . $tag->term_id);	return apply_filters( 'get_edit_tag_link', $location );}/** * Display or retrieve edit tag link with formatting. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int|object $tag Tag object or ID * @return string|null HTML content, if $echo is set to false. */function edit_tag_link( $link = '', $before = '', $after = '', $tag = null ) {	$tax = get_taxonomy('post_tag');	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag, 'post_tag');	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_tag_link( $tag->term_id ) . '" title="' . __( 'Edit Tag' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_tag_link', $link, $tag->term_id ) . $after;}/*** Retrieve permalink for search.** @since  3.0.0* @param string $query Optional. The query string to use. If empty the current query is used.* @return string*/function get_search_link( $query = '' ) {	global $wp_rewrite;	if ( empty($query) )		$search = get_search_query( false );	else		$search = stripslashes($query);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty( $permastruct ) ) {		$link = home_url('?s=' . urlencode($search) );	} else {		$search = urlencode($search);		$search = str_replace('%2F', '/', $search); // %2F(/) is not valid within a URL, send it unencoded.		$link = str_replace( '%search%', $search, $permastruct );		$link = home_url( user_trailingslashit( $link, 'search' ) );	}	return apply_filters( 'search_link', $link, $search );}/** * Retrieve the permalink for the feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	$link = get_search_link($search_query);	if ( empty($feed) )		$feed = get_default_feed();	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) ) {		$link = add_query_arg('feed', $feed, $link);	} else {		$link = trailingslashit($link);		$link .= "feed/$feed/";	}	$link = apply_filters('search_feed_link', $link, $feed, 'posts');	return $link;}/** * Retrieve the permalink for the comments feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_comments_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	if ( empty($feed) )		$feed = get_default_feed();	$link = get_search_feed_link($search_query, $feed);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) )		$link = add_query_arg('feed', 'comments-' . $feed, $link);	else		$link = add_query_arg('withcomments', 1, $link);	$link = apply_filters('search_feed_link', $link, $feed, 'comments');	return $link;}/** * Retrieve edit posts link for post. * * Can be used within the WordPress loop or outside of it. Can be used with * pages, posts, attachments, and revisions. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @param string $context Optional, default to display. How to write the '&', defaults to '&amp;'. * @return string */function get_edit_post_link( $id = 0, $context = 'display' ) {	if ( !$post = &get_post( $id ) )		return;	if ( 'display' == $context )		$action = '&amp;action=edit';	else		$action = '&action=edit';	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->edit_post, $post->ID ) )		return;	return apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );}/** * Display edit post link for post. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $id Optional. Post ID. */function edit_post_link( $link = null, $before = '', $after = '', $id = 0 ) {	if ( !$post = &get_post( $id ) )		return;	if ( !$url = get_edit_post_link( $post->ID ) )		return;	if ( null === $link )		$link = __('Edit This');	$post_type_obj = get_post_type_object( $post->post_type );	$link = '<a class="post-edit-link" href="' . $url . '" title="' . esc_attr( $post_type_obj->labels->edit_item ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_post_link', $link, $post->ID ) . $after;}/** * Retrieve delete posts link for post. * * Can be used within the WordPress loop or outside of it, with any post type. * * @since 2.9.0 * * @param int $id Optional. Post ID. * @param string $deprecated Not used. * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return string */function get_delete_post_link( $id = 0, $deprecated = '', $force_delete = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0.0' );	if ( !$post = &get_post( $id ) )		return;	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->delete_post, $post->ID ) )		return;	$action = ( $force_delete || !EMPTY_TRASH_DAYS ) ? 'delete' : 'trash';	$delete_link = add_query_arg( 'action', $action, admin_url( sprintf( $post_type_object->_edit_link, $post->ID ) ) );	return apply_filters( 'get_delete_post_link', wp_nonce_url( $delete_link, "$action-{$post->post_type}_{$post->ID}" ), $post->ID, $force_delete );}/** * Retrieve edit comment link. * * @since 2.3.0 * * @param int $comment_id Optional. Comment ID. * @return string */function get_edit_comment_link( $comment_id = 0 ) {	$comment = &get_comment( $comment_id );	$post = &get_post( $comment->comment_post_ID );	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	$location = admin_url('comment.php?action=editcomment&amp;c=') . $comment->comment_ID;	return apply_filters( 'get_edit_comment_link', $location );}/** * Display or retrieve edit comment link with formatting. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @return string|null HTML content, if $echo is set to false. */function edit_comment_link( $link = null, $before = '', $after = '' ) {	global $comment, $post;	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	if ( null === $link )		$link = __('Edit This');	$link = '<a class="comment-edit-link" href="' . get_edit_comment_link( $comment->comment_ID ) . '" title="' . __( 'Edit comment' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_comment_link', $link, $comment->comment_ID ) . $after;}/** * Display edit bookmark (literally a URL external to blog) link. * * @since 2.7.0 * * @param int $link Optional. Bookmark ID. * @return string */function get_edit_bookmark_link( $link = 0 ) {	$link = get_bookmark( $link );	if ( !current_user_can('manage_links') )		return;	$location = admin_url('link.php?action=edit&amp;link_id=') . $link->link_id;	return apply_filters( 'get_edit_bookmark_link', $location, $link->link_id );}/** * Display edit bookmark (literally a URL external to blog) link anchor content. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $bookmark Optional. Bookmark ID. */function edit_bookmark_link( $link = '', $before = '', $after = '', $bookmark = null ) {	$bookmark = get_bookmark($bookmark);	if ( !current_user_can('manage_links') )		return;	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_bookmark_link( $link ) . '" title="' . __( 'Edit Link' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_bookmark_link', $link, $bookmark->link_id ) . $after;}// Navigation links/** * Retrieve previous post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_previous_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories);}/** * Retrieve next post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_next_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories, false);}/** * Retrieve adjacent post link. * * Can either be next or previous post link. * * @since 2.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve previous post. * @return string */function get_adjacent_post($in_same_cat = false, $excluded_categories = '', $previous = true) {	global $post, $wpdb;	if ( empty( $post ) )		return null;	$current_post_date = $post->post_date;	$join = '';	$posts_in_ex_cats_sql = '';	if ( $in_same_cat || !empty($excluded_categories) ) {		$join = " INNER JOIN $wpdb->term_relationships AS tr ON p.ID = tr.object_id INNER JOIN $wpdb->term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";		if ( $in_same_cat ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));			$join .= " AND tt.taxonomy = 'category' AND tt.term_id IN (" . implode(',', $cat_array) . ")";		}		$posts_in_ex_cats_sql = "AND tt.taxonomy = 'category'";		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(' and ', $excluded_categories));			if ( !empty($cat_array) ) {				$excluded_categories = array_diff($excluded_categories, $cat_array);				$posts_in_ex_cats_sql = '';			}			if ( !empty($excluded_categories) ) {				$posts_in_ex_cats_sql = " AND tt.taxonomy = 'category' AND tt.term_id NOT IN (" . implode($excluded_categories, ',') . ')';			}		}	}	$adjacent = $previous ? 'previous' : 'next';	$op = $previous ? '<' : '>';	$order = $previous ? 'DESC' : 'ASC';	$join  = apply_filters( "get_{$adjacent}_post_join", $join, $in_same_cat, $excluded_categories );	$where = apply_filters( "get_{$adjacent}_post_where", $wpdb->prepare("WHERE p.post_date $op %s AND p.post_type = %s AND p.post_status = 'publish' $posts_in_ex_cats_sql", $current_post_date, $post->post_type), $in_same_cat, $excluded_categories );	$sort  = apply_filters( "get_{$adjacent}_post_sort", "ORDER BY p.post_date $order LIMIT 1" );	$query = "SELECT p.* FROM $wpdb->posts AS p $join $where $sort";	$query_key = 'adjacent_post_' . md5($query);	$result = wp_cache_get($query_key, 'counts');	if ( false !== $result )		return $result;	$result = $wpdb->get_row("SELECT p.* FROM $wpdb->posts AS p $join $where $sort");	if ( null === $result )		$result = '';	wp_cache_set($query_key, $result, 'counts');	return $result;}/** * Get adjacent post relational link. * * Can either be next or previous post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. * @return string */function get_adjacent_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() && is_object( $GLOBALS['post'] ) )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat,$excluded_categories,$previous);	if ( empty($post) )		return;	if ( empty($post->post_title) )		$post->post_title = $previous ? __('Previous Post') : __('Next Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $previous ? "<link rel='prev' title='" : "<link rel='next' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	$adjacent = $previous ? 'previous' : 'next';	return apply_filters( "{$adjacent}_post_rel_link", $link );}/** * Display relational links for the posts adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function adjacent_posts_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational links for the posts adjacent to the current post for single post pages. * * This is meant to be attached to actions like 'wp_head'.  Do not call this directly in plugins or theme templates. * @since 3.0.0 * */function adjacent_posts_rel_link_wp_head() {	if ( !is_singular() || is_attachment() )		return;	adjacent_posts_rel_link();}/** * Display relational link for the next post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational link for the previous post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function prev_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);}/** * Retrieve boundary post. * * Boundary being either the first or last post by publish date within the contraitns specified * by in same category or excluded categories. * * @since 2.8.0 * * @param bool $in_same_cat Optional. Whether returned post should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve first post. * @return object */function get_boundary_post($in_same_cat = false, $excluded_categories = '', $start = true) {	global $post;	if ( empty($post) || !is_single() || is_attachment() )		return null;	$cat_array = array();	$excluded_categories = array();	if ( !empty($in_same_cat) || !empty($excluded_categories) ) {		if ( !empty($in_same_cat) ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));		}		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(',', $excluded_categories));			if ( !empty($cat_array) )				$excluded_categories = array_diff($excluded_categories, $cat_array);			$inverse_cats = array();			foreach ( $excluded_categories as $excluded_category)				$inverse_cats[] = $excluded_category * -1;			$excluded_categories = $inverse_cats;		}	}	$categories = implode(',', array_merge($cat_array, $excluded_categories) );	$order = $start ? 'ASC' : 'DESC';	return get_posts( array('numberposts' => 1, 'no_found_rows' => true, 'order' => $order, 'orderby' => 'ID', 'category' => $categories) );}/** * Get boundary post relational link. * * Can either be start or end post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $start Optional, default is true. Whether display link to first post. * @return string */function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {	$posts = get_boundary_post($in_same_cat,$excluded_categories,$start);	// If there is no post stop.	if ( empty($posts) )		return;	// Even though we limited get_posts to return only 1 item it still returns an array of objects.	$post = $posts[0];	if ( empty($post->post_title) )		$post->post_title = $start ? __('First Post') : __('Last Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $start ? "<link rel='start' title='" : "<link rel='end' title='";	$link .= esc_attr($title);	$link .= "' href='" . get_permalink($post) . "' />\n";	$boundary = $start ? 'start' : 'end';	return apply_filters( "{$boundary}_post_rel_link", $link );}/** * Display relational link for the first post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_boundary_post_rel_link($title, $in_same_cat, $excluded_categories, true);}/** * Get site index relational link. * * @since 2.8.0 * * @return string */function get_index_rel_link() {	$link = "<link rel='index' title='" . esc_attr( get_bloginfo( 'name', 'display' ) ) . "' href='" . esc_url( user_trailingslashit( get_bloginfo( 'url', 'display' ) ) ) . "' />\n";	return apply_filters( "index_rel_link", $link );}/** * Display relational link for the site index. * * @since 2.8.0 */function index_rel_link() {	echo get_index_rel_link();}/** * Get parent post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @return string */function get_parent_post_rel_link($title = '%title') {	if ( ! empty( $GLOBALS['post'] ) && ! empty( $GLOBALS['post']->post_parent ) )		$post = & get_post($GLOBALS['post']->post_parent);	if ( empty($post) )		return;	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = "<link rel='up' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	return apply_filters( "parent_post_rel_link", $link );}/** * Display relational link for parent item * * @since 2.8.0 */function parent_post_rel_link($title = '%title') {	echo get_parent_post_rel_link($title);}/** * Display previous post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, true);}/** * Display next post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, false);}/** * Display adjacent post link. * * Can be either next post link or previous. * * @since 2.5.0 * * @param string $format Link anchor format. * @param string $link Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. */function adjacent_post_link($format, $link, $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat, $excluded_categories, $previous);	if ( !$post )		return;	$title = $post->post_title;	if ( empty($post->post_title) )		$title = $previous ? __('Previous Post') : __('Next Post');	$title = apply_filters('the_title', $title, $post->ID);	$date = mysql2date(get_option('date_format'), $post->post_date);	$rel = $previous ? 'prev' : 'next';	$string = '<a href="'.get_permalink($post).'" rel="'.$rel.'">';	$link = str_replace('%title', $title, $link);	$link = str_replace('%date', $date, $link);	$link = $string . $link . '</a>';	$format = str_replace('%link', $link, $format);	$adjacent = $previous ? 'previous' : 'next';	echo apply_filters( "{$adjacent}_post_link", $format, $link );}/** * Retrieve get links for page numbers. * * @since 1.5.0 * * @param int $pagenum Optional. Page ID. * @return string */function get_pagenum_link($pagenum = 1) {	global $wp_rewrite;	$pagenum = (int) $pagenum;	$request = remove_query_arg( 'paged' );	$home_root = parse_url(home_url());	$home_root = ( isset($home_root['path']) ) ? $home_root['path'] : '';	$home_root = preg_quote( trailingslashit( $home_root ), '|' );	$request = preg_replace('|^'. $home_root . '|', '', $request);	$request = preg_replace('|^/+|', '', $request);	if ( !$wp_rewrite->using_permalinks() || is_admin() ) {		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $pagenum > 1 ) {			$result = add_query_arg( 'paged', $pagenum, $base . $request );		} else {			$result = $base . $request;		}	} else {		$qs_regex = '|\?.*?$|';		preg_match( $qs_regex, $request, $qs_match );		if ( !empty( $qs_match[0] ) ) {			$query_string = $qs_match[0];			$request = preg_replace( $qs_regex, '', $request );		} else {			$query_string = '';		}		$request = preg_replace( '|page/\d+/?$|', '', $request);		$request = preg_replace( '|^index\.php|', '', $request);		$request = ltrim($request, '/');		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $wp_rewrite->using_index_permalinks() && ( $pagenum > 1 || '' != $request ) )			$base .= 'index.php/';		if ( $pagenum > 1 ) {			$request = ( ( !empty( $request ) ) ? trailingslashit( $request ) : $request ) . user_trailingslashit( 'page/' . $pagenum, 'paged' );		}		$result = $base . $request . $query_string;	}	$result = apply_filters('get_pagenum_link', $result);	return $result;}/** * Retrieve next posts pages link. * * Backported from 2.1.3 to 2.0.10. * * @since 2.0.10 * * @param int $max_page Optional. Max pages. * @return string */function get_next_posts_page_link($max_page = 0) {	global $paged;	if ( !is_single() ) {		if ( !$paged )			$paged = 1;		$nextpage = intval($paged) + 1;		if ( !$max_page || $max_page >= $nextpage )			return get_pagenum_link($nextpage);	}}/** * Display or return the next posts pages link. * * @since 0.71 * * @param int $max_page Optional. Max pages. * @param boolean $echo Optional. Echo or return; */function next_posts( $max_page = 0, $echo = true ) {	$output = esc_url( get_next_posts_page_link( $max_page ) );	if ( $echo )		echo $output;	else		return $output;}/** * Return the next posts pages link. * * @since 2.7.0 * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. * @return string|null */function get_next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	global $paged, $wp_query;	if ( !$max_page )		$max_page = $wp_query->max_num_pages;	if ( !$paged )		$paged = 1;	$nextpage = intval($paged) + 1;	if ( !is_single() && ( empty($paged) || $nextpage <= $max_page) ) {		$attr = apply_filters( 'next_posts_link_attributes', '' );		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';	}}/** * Display the next posts pages link. * * @since 0.71 * @uses get_next_posts_link() * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. */function next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	echo get_next_posts_link( $label, $max_page );}/** * Retrieve previous post pages link. * * Will only return string, if not on a single page or post. * * Backported to 2.0.10 from 2.1.3. * * @since 2.0.10 * * @return string|null */function get_previous_posts_page_link() {	global $paged;	if ( !is_single() ) {		$nextpage = intval($paged) - 1;		if ( $nextpage < 1 )			$nextpage = 1;		return get_pagenum_link($nextpage);	}}/** * Display or return the previous posts pages link. * * @since 0.71 * * @param boolean $echo Optional. Echo or return; */function previous_posts( $echo = true ) {	$output = esc_url( get_previous_posts_page_link() );	if ( $echo )		echo $output;	else		return $output;}/** * Return the previous posts pages link. * * @since 2.7.0 * * @param string $label Optional. Previous page link text. * @return string|null */function get_previous_posts_link( $label = '&laquo; Previous Page' ) {	global $paged;	if ( !is_single() && $paged > 1 ) {		$attr = apply_filters( 'previous_posts_link_attributes', '' );		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/', '&#038;$1', $label ) .'</a>';	}}/** * Display the previous posts page link. * * @since 0.71 * @uses get_previous_posts_link() * * @param string $label Optional. Previous page link text. */function previous_posts_link( $label = '&laquo; Previous Page' ) {	echo get_previous_posts_link( $label );}/** * Return post pages link navigation for previous and next pages. * * @since 2.8 * * @param string|array $args Optional args. * @return string The posts link navigation. */function get_posts_nav_link( $args = array() ) {	global $wp_query;	$return = '';	if ( !is_singular() ) {		$defaults = array(			'sep' => ' &#8212; ',			'prelabel' => __('&laquo; Previous Page'),			'nxtlabel' => __('Next Page &raquo;'),		);		$args = wp_parse_args( $args, $defaults );		$max_num_pages = $wp_query->max_num_pages;		$paged = get_query_var('paged');		//only have sep if there's both prev and next results		if ($paged < 2 || $paged >= $max_num_pages) {			$args['sep'] = '';		}		if ( $max_num_pages > 1 ) {			$return = get_previous_posts_link($args['prelabel']);			$return .= preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $args['sep']);			$return .= get_next_posts_link($args['nxtlabel']);		}	}	return $return;}/** * Display post pages link navigation for previous and next pages. * * @since 0.71 * * @param string $sep Optional. Separator for posts navigation links. * @param string $prelabel Optional. Label for previous pages. * @param string $nxtlabel Optional Label for next pages. */function posts_nav_link( $sep = '', $prelabel = '', $nxtlabel = '' ) {	$args = array_filter( compact('sep', 'prelabel', 'nxtlabel') );	echo get_posts_nav_link($args);}/** * Retrieve page numbers links. * * @since 2.7.0 * * @param int $pagenum Optional. Page number. * @return string */function get_comments_pagenum_link( $pagenum = 1, $max_page = 0 ) {	global $post, $wp_rewrite;	$pagenum = (int) $pagenum;	$result = get_permalink( $post->ID );	if ( 'newest' == get_option('default_comments_page') ) {		if ( $pagenum != $max_page ) {			if ( $wp_rewrite->using_permalinks() )				$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');			else				$result = add_query_arg( 'cpage', $pagenum, $result );		}	} elseif ( $pagenum > 1 ) {		if ( $wp_rewrite->using_permalinks() )			$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');		else			$result = add_query_arg( 'cpage', $pagenum, $result );	}	$result .= '#comments';	$result = apply_filters('get_comments_pagenum_link', $result);	return $result;}/** * Return the link to next comments pages. * * @since 2.7.1 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. * @return string|null */function get_next_comments_link( $label = '', $max_page = 0 ) {	global $wp_query;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	$nextpage = intval($page) + 1;	if ( empty($max_page) )		$max_page = $wp_query->max_num_comment_pages;	if ( empty($max_page) )		$max_page = get_comment_pages_count();	if ( $nextpage > $max_page )		return;	if ( empty($label) )		$label = __('Newer Comments &raquo;');	return '<a href="' . esc_url( get_comments_pagenum_link( $nextpage, $max_page ) ) . '" ' . apply_filters( 'next_comments_link_attributes', '' ) . '>'. preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the link to next comments pages. * * @since 2.7.0 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. */function next_comments_link( $label = '', $max_page = 0 ) {	echo get_next_comments_link( $label, $max_page );}/** * Return the previous comments page link. * * @since 2.7.1 * * @param string $label Optional. Label for comments link text. * @return string|null */function get_previous_comments_link( $label = '' ) {	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( intval($page) <= 1 )		return;	$prevpage = intval($page) - 1;	if ( empty($label) )		$label = __('&laquo; Older Comments');	return '<a href="' . esc_url( get_comments_pagenum_link( $prevpage ) ) . '" ' . apply_filters( 'previous_comments_link_attributes', '' ) . '>' . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the previous comments page link. * * @since 2.7.0 * * @param string $label Optional. Label for comments link text. */function previous_comments_link( $label = '' ) {	echo get_previous_comments_link( $label );}/** * Create pagination links for the comments on the current post. * * @see paginate_links() * @since 2.7.0 * * @param string|array $args Optional args. See paginate_links. * @return string Markup for pagination links.*/function paginate_comments_links($args = array()) {	global $wp_rewrite;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( !$page )		$page = 1;	$max_page = get_comment_pages_count();	$defaults = array(		'base' => add_query_arg( 'cpage', '%#%' ),		'format' => '',		'total' => $max_page,		'current' => $page,		'echo' => true,		'add_fragment' => '#comments'	);	if ( $wp_rewrite->using_permalinks() )		$defaults['base'] = user_trailingslashit(trailingslashit(get_permalink()) . 'comment-page-%#%', 'commentpaged');	$args = wp_parse_args( $args, $defaults );	$page_links = paginate_links( $args );	if ( $args['echo'] )		echo $page_links;	else		return $page_links;}/** * Retrieve shortcut link. * * Use this in 'a' element 'href' attribute. * * @since 2.6.0 * * @return string */function get_shortcut_link() {	$link = "javascript:			var d=document,			w=window,			e=w.getSelection,			k=d.getSelection,			x=d.selection,			s=(e?e():(k)?k():(x?x.createRange().text:0)),			f='" . admin_url('press-this.php') . "',			l=d.location,			e=encodeURIComponent,			u=f+'?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s)+'&v=4';			a=function(){if(!w.open(u,'t','toolbar=0,resizable=1,scrollbars=1,status=1,width=720,height=570'))l.href=u;};			if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0); else a();			void(0)";	$link = str_replace(array("\r", "\n", "\t"),  '', $link);	return apply_filters('shortcut_link', $link);}/** * Retrieve the home url for the current site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @uses get_home_url() * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function home_url( $path = '', $scheme = null ) {	return get_home_url(null, $path, $scheme);}/** * Retrieve the home url for a given site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  int $blog_id   (optional) Blog ID. Defaults to current blog. * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function get_home_url( $blog_id = null, $path = '', $scheme = null ) {	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	if ( empty( $blog_id ) || !is_multisite() )		$home = get_option( 'home' );	else		$home = get_blog_option( $blog_id, 'home' );	$url = str_replace( 'http://', "$scheme://", $home );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'home_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the site url for the current site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 2.6.0 * * @uses get_site_url() * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function site_url( $path = '', $scheme = null ) {	return get_site_url(null, $path, $scheme);}/** * Retrieve the site url for a given site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function get_site_url( $blog_id = null, $path = '', $scheme = null ) {	// should the list of allowed schemes be maintained elsewhere?	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ( 'login' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		elseif ( ( 'admin' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	if ( empty( $blog_id ) || !is_multisite() )		$url = get_option( 'siteurl' );	else		$url = get_blog_option( $blog_id, 'siteurl' );	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'site_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the url to the admin area for the current site. * * @package WordPress * @since 2.6.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function admin_url( $path = '', $scheme = 'admin' ) {	return get_admin_url(null, $path, $scheme);}/** * Retrieve the url to the admin area for a given site. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function get_admin_url( $blog_id = null, $path = '', $scheme = 'admin' ) {	$url = get_site_url($blog_id, 'wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('admin_url', $url, $path, $blog_id);}/** * Retrieve the url to the includes directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the includes url. * @return string Includes url link with optional path appended.*/function includes_url($path = '') {	$url = site_url() . '/' . WPINC . '/';	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('includes_url', $url, $path);}/** * Retrieve the url to the content directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the content url. * @return string Content url link with optional path appended.*/function content_url($path = '') {	$url = WP_CONTENT_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('content_url', $url, $path);}/** * Retrieve the url to the plugins directory or to a specific file within that directory. * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the plugins url. * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__ * @return string Plugins url link with optional path appended.*/function plugins_url($path = '', $plugin = '') {	$mu_plugin_dir = WPMU_PLUGIN_DIR;	foreach ( array('path', 'plugin', 'mu_plugin_dir') as $var ) {		$$var = str_replace('\\' ,'/', $$var); // sanitize for Win32 installs		$$var = preg_replace('|/+|', '/', $$var);	}	if ( !empty($plugin) && 0 === strpos($plugin, $mu_plugin_dir) )		$url = WPMU_PLUGIN_URL;	else		$url = WP_PLUGIN_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($plugin) && is_string($plugin) ) {		$folder = dirname(plugin_basename($plugin));		if ( '.' != $folder )			$url .= '/' . ltrim($folder, '/');	}	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('plugins_url', $url, $path, $plugin);}/** * Retrieve the site url for the current network. * * Returns the site url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function network_site_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return site_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('login' == $scheme) && ( force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('admin' == $scheme) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_site_url', $url, $path, $orig_scheme);}/** * Retrieve the home url for the current network. * * Returns the home url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function network_home_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return home_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "$scheme://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= ltrim( $path, '/' );	return apply_filters( 'network_home_url', $url, $path, $orig_scheme);}/** * Retrieve the url to the admin area for the network. * * @package WordPress * @since 3.0.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function network_admin_url( $path = '', $scheme = 'admin' ) {	$url = network_site_url('wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_admin_url', $url, $path);}/** * Output rel=canonical for singular queries * * @package WordPress * @since 2.9.0*/function rel_canonical() {	if ( !is_singular() )		return;	global $wp_the_query;	if ( !$id = $wp_the_query->get_queried_object_id() )		return;	$link = get_permalink( $id );	echo "<link rel='canonical' href='$link' />\n";}/** * Return a shortlink for a post, page, attachment, or blog. * * This function exists to provide a shortlink tag that all themes and plugins can target.  A plugin must hook in to * provide the actual shortlinks.  Default shortlink support is limited to providing ?p= style links for posts. * Plugins can short circuit this function via the pre_get_shortlink filter or filter the output * via the get_shortlink filter. * * @since 3.0.0. * * @param int $id A post or blog id.  Default is 0, which means the current post or blog. * @param string $contex Whether the id is a 'blog' id, 'post' id, or 'media' id.  If 'post', the post_type of the post is consulted.  If 'query', the current query is consulted to determine the id and context. Default is 'post'. * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. */function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {	// Allow plugins to short-circuit this function.	$shortlink = apply_filters('pre_get_shortlink', false, $id, $context, $allow_slugs);	if ( false !== $shortlink )		return $shortlink;	global $wp_query;	$post_id = 0;	if ( 'query' == $context && is_single() ) {		$post_id = $wp_query->get_queried_object_id();	} elseif ( 'post' == $context ) {		$post = get_post($id);		$post_id = $post->ID;	}	$shortlink = '';	// Return p= link for posts.	if ( !empty($post_id) && '' != get_option('permalink_structure') ) {		$post = get_post($post_id);		if ( isset($post->post_type) && 'post' == $post->post_type )			$shortlink = home_url('?p=' . $post->ID);	}	return apply_filters('get_shortlink', $shortlink, $id, $context, $allow_slugs);}/** *  Inject rel=sortlink into head if a shortlink is defined for the current page. * *  Attached to the wp_head action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_wp_head() {	$shortlink = wp_get_shortlink( 0, 'query' );	if ( empty( $shortlink ) )		return;	echo "<link rel='shortlink' href='" . esc_url_raw( $shortlink ) . "' />\n";}/** * Send a Link: rel=shortlink header if a shortlink is defined for the current page. * * Attached to the wp action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_header() {    if ( headers_sent() )		return;	$shortlink = wp_get_shortlink(0, 'query');	if ( empty($shortlink) )		return;	header('Link: <' . $shortlink . '>; rel=shortlink', false);}/** * Display the Short Link for a Post * * Must be called from inside "The Loop" * * Call like the_shortlink(__('Shortlinkage FTW')) * * @since 3.0.0 * * @param string $text Optional The link text or HTML to be displayed.  Defaults to 'This is the short link.' * @param string $title Optional The tooltip for the link.  Must be sanitized.  Defaults to the sanitized post title. * @param string $before Optional HTML to display before the link. * @param string $before Optional HTML to display after the link. */function the_shortlink( $text = '', $title = '', $before = '', $after = '' ) {	global $post;	if ( empty( $text ) )		$text = __('This is the short link.');	if ( empty( $title ) )		$title = the_title_attribute( array( 'echo' => FALSE ) );	$shortlink = wp_get_shortlink( $post->ID );	if ( !empty( $shortlink ) ) {		$link = '<a rel="shortlink" href="' . esc_url( $shortlink ) . '" title="' . $title . '">' . $text . '</a>';		$link = apply_filters( 'the_shortlink', $link, $shortlink, $text, $title );		echo $before, $link, $after;	}}?>
<?php/** * Users administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( !current_user_can('list_users') )	wp_die(__('Cheatin&#8217; uh?'));$title = __('Users');$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('This screen lists all the existing users for your site. Each user has one of five defined roles as set by the site admin: Site Administrator, Editor, Author, Contributor, or Subscriber. Users with roles other than Administrator will see fewer options when they are logged in, based on their role.') . '</p>' .    '<p>' . __('You can customize the display of information on this screen as you can on other screens, by using the Screen Options tab and the on-screen filters.') . '</p>' .    '<p>' . __('To add a new user for your site, click the Add New button at the top of the screen or Add New in the Users menu section.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Authors_and_Users_SubPanel" target="_blank">Documentation on Authors and Users</a>') . '</p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Roles_and_Capabilities" target="_blank">Roles and Capabilities Descriptions</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$update = $doaction = '';if ( isset($_REQUEST['action']) )	$doaction = $_REQUEST['action'] ? $_REQUEST['action'] : $_REQUEST['action2'];if ( empty($doaction) ) {	if ( isset($_GET['changeit']) && !empty($_GET['new_role']) )		$doaction = 'promote';}if ( empty($_REQUEST) ) {	$referer = '<input type="hidden" name="wp_http_referer" value="'. esc_attr(stripslashes($_SERVER['REQUEST_URI'])) . '" />';} elseif ( isset($_REQUEST['wp_http_referer']) ) {	$redirect = remove_query_arg(array('wp_http_referer', 'updated', 'delete_count'), stripslashes($_REQUEST['wp_http_referer']));	$referer = '<input type="hidden" name="wp_http_referer" value="' . esc_attr($redirect) . '" />';} else {	$redirect = 'users.php';	$referer = '';}switch ($doaction) {/* Bulk Dropdown menu Role changes */case 'promote':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	$editable_roles = get_editable_roles();	if ( empty( $editable_roles[$_REQUEST['new_role']] ) )		wp_die(__('You can&#8217;t give users that role.'));	$userids = $_REQUEST['users'];	$update = 'promote';	foreach ( $userids as $id ) {		$id = (int) $id;		if ( ! current_user_can('promote_user', $id) )			wp_die(__('You can&#8217;t edit that user.'));		// The new role of the current user must also have promote_users caps		if ( $id == $current_user->ID && !$wp_roles->role_objects[$_REQUEST['new_role']]->has_cap('promote_users') ) {			$update = 'err_admin_role';			continue;		}		// If the user doesn't already belong to the blog, bail.		if ( is_multisite() && !is_user_member_of_blog( $id ) )			wp_die(__('Cheatin&#8217; uh?'));		$user = new WP_User($id);		$user->set_role($_REQUEST['new_role']);	}	wp_redirect(add_query_arg('update', $update, $redirect));	exit();break;case 'dodelete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('delete-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		wp_die(__('You can&#8217;t delete users.'));	$userids = $_REQUEST['users'];	$update = 'del';	$delete_count = 0;	foreach ( (array) $userids as $id) {		$id = (int) $id;		if ( ! current_user_can( 'delete_user', $id ) )			wp_die(__( 'You can&#8217;t delete that user.' ) );		if ( $id == $current_user->ID ) {			$update = 'err_admin_del';			continue;		}		switch ( $_REQUEST['delete_option'] ) {		case 'delete':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id);			break;		case 'reassign':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id, $_REQUEST['reassign_user']);			break;		}		++$delete_count;	}	$redirect = add_query_arg( array('delete_count' => $delete_count, 'update' => $update), $redirect);	wp_redirect($redirect);	exit();break;case 'delete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		$errors = new WP_Error( 'edit_users', __( 'You can&#8217;t delete users.' ) );	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('delete-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Delete Users'); ?></h2><p><?php _e('You have specified these users for deletion:'); ?></p><ul><?php	$go_delete = false;	foreach ( (array) $userids as $id ) {		$id = (int) $id;		$user = new WP_User($id);		if ( $id == $current_user->ID ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be deleted.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"" . esc_attr($id) . "\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_delete = true;		}	}	// @todo Delete is always for !is_multisite(). Use API.	if ( !is_multisite() ) {		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users ORDER BY user_login");	} else {		// WPMU only searches users of current blog		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users, $wpdb->usermeta WHERE $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '".$wpdb->prefix."capabilities' ORDER BY user_login");	}	$user_dropdown = '<select name="reassign_user">';	foreach ( (array) $all_logins as $login )		if ( $login->ID == $current_user->ID || !in_array($login->ID, $userids) )			$user_dropdown .= "<option value=\"" . esc_attr($login->ID) . "\">{$login->user_login}</option>";	$user_dropdown .= '</select>';	?>	</ul><?php if ( $go_delete ) : ?>	<fieldset><p><legend><?php _e('What should be done with posts and links owned by this user?'); ?></legend></p>	<ul style="list-style:none;">		<li><label><input type="radio" id="delete_option0" name="delete_option" value="delete" checked="checked" />		<?php _e('Delete all posts and links.'); ?></label></li>		<li><input type="radio" id="delete_option1" name="delete_option" value="reassign" />		<?php echo '<label for="delete_option1">'.__('Attribute all posts and links to:')."</label> $user_dropdown"; ?></li>	</ul></fieldset>	<input type="hidden" name="action" value="dodelete" />	<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Deletion'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for deletion.'); ?></p><?php endif; ?></div></form><?phpbreak;case 'doremove':	check_admin_referer('remove-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit;	}	if ( !current_user_can('remove_users')  )		die(__('You can&#8217;t remove users.'));	$userids = $_REQUEST['users'];	$update = 'remove'; 	foreach ( $userids as $id ) {		$id = (int) $id;		if ( $id == $current_user->id && !is_super_admin() ) {			$update = 'err_admin_remove';			continue;		}		if ( !current_user_can('remove_user', $id) ) {			$update = 'err_admin_remove';			continue;		}		remove_user_from_blog($id, $blog_id);	}	$redirect = add_query_arg( array('update' => $update), $redirect);	wp_redirect($redirect);	exit;break;case 'remove':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( !current_user_can('remove_users') )		$error = new WP_Error('edit_users', __('You can&#8217;t remove users.'));	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('remove-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Remove Users from Site'); ?></h2><p><?php _e('You have specified these users for removal:'); ?></p><ul><?php	$go_remove = false; 	foreach ( $userids as $id ) {		$id = (int) $id; 		$user = new WP_User($id);		if ( $id == $current_user->id && !is_super_admin() ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be removed.</strong>'), $id, $user->user_login) . "</li>\n";		} elseif ( !current_user_can('remove_user', $id) ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>You don\'t have permission to remove this user.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"{$id}\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_remove = true;		} 	} 	?><?php if ( $go_remove ) : ?>		<input type="hidden" name="action" value="doremove" />		<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Removal'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for removal.'); ?></p><?php endif; ?></div></form><?phpbreak;default:	if ( !empty($_GET['_wp_http_referer']) ) {		wp_redirect(remove_query_arg(array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI'])));		exit;	}	include('./admin-header.php');	$usersearch = isset($_GET['usersearch']) ? $_GET['usersearch'] : null;	$userspage = isset($_GET['userspage']) ? $_GET['userspage'] : null;	$role = isset($_GET['role']) ? $_GET['role'] : null;	// Query the user IDs for this page	$wp_user_search = new WP_User_Search($usersearch, $userspage, $role);	// Query the post counts for this page	$post_counts = count_many_users_posts($wp_user_search->get_results());	// Query the users for this page	cache_users($wp_user_search->get_results());	$messages = array();	if ( isset($_GET['update']) ) :		switch($_GET['update']) {		case 'del':		case 'del_many':			$delete_count = isset($_GET['delete_count']) ? (int) $_GET['delete_count'] : 0;			$messages[] = '<div id="message" class="updated"><p>' . sprintf(_n('%s user deleted', '%s users deleted', $delete_count), $delete_count) . '</p></div>';			break;		case 'add':			$messages[] = '<div id="message" class="updated"><p>' . __('New user created.') . '</p></div>';			break;		case 'promote':			$messages[] = '<div id="message" class="updated"><p>' . __('Changed roles.') . '</p></div>';			break;		case 'err_admin_role':			$messages[] = '<div id="message" class="error"><p>' . __('The current user&#8217;s role must have user editing capabilities.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other user roles have been changed.') . '</p></div>';			break;		case 'err_admin_del':			$messages[] = '<div id="message" class="error"><p>' . __('You can&#8217;t delete the current user.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other users have been deleted.') . '</p></div>';			break;		case 'remove':			$messages[] = '<div id="message" class="updated fade"><p>' . __('User removed from this site.') . '</p></div>';			break;		case 'err_admin_remove':			$messages[] = '<div id="message" class="error"><p>' . __("You can't remove the current user.") . '</p></div>';			$messages[] = '<div id="message" class="updated fade"><p>' . __('Other users have been removed.') . '</p></div>';			break;		}	endif; ?><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty($messages) ) {	foreach ( $messages as $msg )		echo $msg;} ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can( 'create_users' ) ) { ?>  <a href="user-new.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'user'); ?></a><?php }if ( isset($_GET['usersearch']) && $_GET['usersearch'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( $_GET['usersearch'] ) ); ?></h2><div class="filter"><form id="list-filter" action="" method="get"><ul class="subsubsub"><?php$users_of_blog = count_users();$total_users = $users_of_blog['total_users'];$avail_roles =& $users_of_blog['avail_roles'];unset($users_of_blog);$current_role = false;$class = empty($role) ? ' class="current"' : '';$role_links = array();$role_links[] = "<li><a href='users.php'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';foreach ( $wp_roles->get_names() as $this_role => $name ) {	if ( !isset($avail_roles[$this_role]) )		continue;	$class = '';	if ( $this_role == $role ) {		$current_role = $role;		$class = ' class="current"';	}	$name = translate_user_role( $name );	/* translators: User role name with count */	$name = sprintf( __('%1$s <span class="count">(%2$s)</span>'), $name, $avail_roles[$this_role] );	$role_links[] = "<li><a href='users.php?role=$this_role'$class>$name</a>";}echo implode( " |</li>\n", $role_links) . '</li>';unset($role_links);?></ul></form></div><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="user-search-input"><?php _e( 'Search Users' ); ?>:</label>	<input type="text" id="user-search-input" name="usersearch" value="<?php echo esc_attr($wp_user_search->search_term); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" class="button" /></p></form><form id="posts-filter" action="" method="get"><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><label class="screen-reader-text" for="new_role"><?php _e('Change role to&hellip;') ?></label><select name="new_role" id="new_role"><option value=''><?php _e('Change role to&hellip;') ?></option><?php wp_dropdown_roles(); ?></select><input type="submit" value="<?php esc_attr_e('Change'); ?>" name="changeit" class="button-secondary" /><?php wp_nonce_field('bulk-users'); ?></div><br class="clear" /></div>	<?php if ( is_wp_error( $wp_user_search->search_errors ) ) : ?>		<div class="error">			<ul>			<?php				foreach ( $wp_user_search->search_errors->get_error_messages() as $message )					echo "<li>$message</li>";			?>			</ul>		</div>	<?php endif; ?><?php if ( $wp_user_search->get_results() ) : ?>	<?php if ( $wp_user_search->is_search() ) : ?>		<p><a href="users.php"><?php _e('&larr; Back to All Users'); ?></a></p>	<?php endif; ?><table class="widefat fixed" cellspacing="0"><thead><tr class="thead"><?php print_column_headers('users') ?></tr></thead><tfoot><tr class="thead"><?php print_column_headers('users', false) ?></tr></tfoot><tbody id="users" class="list:user user-list"><?php$style = '';foreach ( $wp_user_search->get_results() as $userid ) {	$user_object = new WP_User($userid);	$roles = $user_object->roles;	$role = array_shift($roles);	if ( is_multisite() && empty( $role ) )		continue;	$style = ( ' class="alternate"' == $style ) ? '' : ' class="alternate"';	echo "\n\t", user_row( $user_object, $style, $role, $post_counts[ $userid ] );}?></tbody></table><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><?php endif; ?></form></div><?phpif ( is_multisite() ) {	foreach ( array('user_login' => 'user_login', 'first_name' => 'user_firstname', 'last_name' => 'user_lastname', 'email' => 'user_email', 'url' => 'user_uri', 'role' => 'user_role') as $formpost => $var ) {		$var = 'new_' . $var;		$$var = isset($_REQUEST[$formpost]) ? esc_attr(stripslashes($_REQUEST[$formpost])) : '';	}	unset($name);}?><br class="clear" /><?phpbreak;} // end of the $doaction switchinclude('./admin-footer.php');?>
<?php/** * The loop that displays posts. * * The loop displays the posts and the post content.  See * http://codex.wordpress.org/The_Loop to understand it and * http://codex.wordpress.org/Template_Tags to understand * the tags used in it. * * This can be overridden in child themes with loop.php or * loop-template.php, where 'template' is the loop context * requested by a template. For example, loop-index.php would * be used if it exists and we ask for the loop with: * <code>get_template_part( 'loop', 'index' );</code> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if ( $wp_query->max_num_pages > 1 ) : ?>	<div id="nav-above" class="navigation">		<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>		<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>	</div><!-- #nav-above --><?php endif; ?><?php /* If there are no posts to display, such as an empty archive page */ ?><?php if ( ! have_posts() ) : ?>	<div id="post-0" class="post error404 not-found">		<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>		<div class="entry-content">			<p><?php _e( 'Apologies, but no results were found for the requested archive. Perhaps searching will help find a related post.', 'twentyten' ); ?></p>			<?php get_search_form(); ?>		</div><!-- .entry-content -->	</div><!-- #post-0 --><?php endif; ?><?php	/* Start the Loop.	 *	 * In Twenty Ten we use the same loop in multiple contexts.	 * It is broken into three main parts: when we're displaying	 * posts that are in the gallery category, when we're displaying	 * posts in the asides category, and finally all other posts.	 *	 * Additionally, we sometimes check for whether we are on an	 * archive page, a search page, etc., allowing for small differences	 * in the loop on each template without actually duplicating	 * the rest of the loop that is shared.	 *	 * Without further ado, the loop:	 */ ?><?php while ( have_posts() ) : the_post(); ?><?php /* How to display posts in the Gallery category. */ ?>	<?php if ( in_category( _x('gallery', 'gallery category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->			<div class="entry-content"><?php if ( post_password_required() ) : ?>				<?php the_content(); ?><?php else : ?>				<div class="gallery-thumb"><?php	$images = get_children( array( 'post_parent' => $post->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image', 'orderby' => 'menu_order', 'order' => 'ASC', 'numberposts' => 999 ) );	$total_images = count( $images );	$image = array_shift( $images );	$image_img_tag = wp_get_attachment_image( $image->ID, 'thumbnail' );?>					<a class="size-thumbnail" href="<?php the_permalink(); ?>"><?php echo $image_img_tag; ?></a>				</div><!-- .gallery-thumb -->				<p><em><?php printf( __( 'This gallery contains <a %1$s>%2$s photos</a>.', 'twentyten' ),						'href="' . get_permalink() . '" title="' . sprintf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ) . '" rel="bookmark"',						$total_images					); ?></em></p>				<?php the_excerpt(); ?><?php endif; ?>			</div><!-- .entry-content -->			<div class="entry-utility">				<a href="<?php echo get_term_link( _x('gallery', 'gallery category slug', 'twentyten'), 'category' ); ?>" title="<?php esc_attr_e( 'View posts in the Gallery category', 'twentyten' ); ?>"><?php _e( 'More Galleries', 'twentyten' ); ?></a>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display posts in the asides category */ ?>	<?php elseif ( in_category( _x('asides', 'asides category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>		<?php if ( is_archive() || is_search() ) : // Display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->		<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>			</div><!-- .entry-content -->		<?php endif; ?>			<div class="entry-utility">				<?php twentyten_posted_on(); ?>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display all other posts. */ ?>	<?php else : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->	<?php if ( is_archive() || is_search() ) : // Only display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->	<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>				<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>			</div><!-- .entry-content -->	<?php endif; ?>			<div class="entry-utility">				<?php if ( count( get_the_category() ) ) : ?>					<span class="cat-links">						<?php printf( __( '<span class="%1$s">Posted in</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-cat-links', get_the_category_list( ', ' ) ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<?php					$tags_list = get_the_tag_list( '', ', ' );					if ( $tags_list ):				?>					<span class="tag-links">						<?php printf( __( '<span class="%1$s">Tagged</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-tag-links', $tags_list ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## -->		<?php comments_template( '', true ); ?>	<?php endif; // This was the if statement that broke the loop into three parts based on categories. ?><?php endwhile; // End the loop. Whew. ?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if (  $wp_query->max_num_pages > 1 ) : ?>				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>					<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>				</div><!-- #nav-below --><?php endif; ?>
<?php/** * Import WordPress Administration Panel * * @package WordPress * @subpackage Administration */define('WP_LOAD_IMPORTERS', true);/** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('import') )	wp_die(__('You do not have sufficient permissions to import content in this site.'));$title = __('Import');add_contextual_help($current_screen,	'<p>' . __('This screen lists links to plugins to import data from blogging/content management platforms. Choose the platform you want to import from, and click Install Now when you are prompted in the popup window. If your platform is not listed, click the link to search the plugin directory for other importer plugins to see if there is one for your platform.') . '</p>' .	'<p>' . __('In previous versions of WordPress, all the importers were built-in, but they have been turned into plugins as of version 3.0 since most people only use them once or infrequently.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Import_SubPanel" target="_blank">Import Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$popular_importers = array();if ( current_user_can('install_plugins') )	$popular_importers = array(		'blogger' => array( __('Blogger'), __('Install the Blogger importer to import posts, comments, and users from a Blogger blog.'), 'install' ),		'wpcat2tag' => array(__('Categories and Tags Converter'), __('Install the category/tag converter to convert existing categories to tags or tags to categories, selectively.'), 'install', 'wp-cat2tag' ),		'livejournal' => array( __( 'LiveJournal' ), __( 'Install the LiveJournal importer to import posts from LiveJournal using their API.' ), 'install' ),		'movabletype' => array( __('Movable Type and TypePad'), __('Install the Movable Type importer to import posts and comments from a Movable Type or TypePad blog.'), 'install', 'mt' ),		'opml' => array( __('Blogroll'), __('Install the blogroll importer to import links in OPML format.'), 'install' ),		'rss' => array( __('RSS'), __('Install the RSS importer to import posts from an RSS feed.'), 'install' ),		'wordpress' => array( 'WordPress', __('Install the WordPress importer to import posts, pages, comments, custom fields, categories, and tags from a WordPress export file.'), 'install' )	);if ( ! empty( $_GET['invalid'] ) && !empty($popular_importers[$_GET['invalid']][3]) ) {	wp_redirect("import.php?import=" . $popular_importers[$_GET['invalid']][3]);	exit;}add_thickbox();require_once ('admin-header.php');$parent_file = 'tools.php';?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( ! empty( $_GET['invalid'] ) ) : ?>	<div class="error"><p><strong><?php _e('ERROR:')?></strong> <?php printf( __('The <strong>%s</strong> importer is invalid or is not installed.'), esc_html( $_GET['invalid'] ) ); ?></p></div><?php endif; ?><p><?php _e('If you have posts or comments in another system, WordPress can import those into this site. To get started, choose a system to import from below:'); ?></p><?php// Load all importers so that they can register.$import_loc = 'wp-admin/import';$import_root = ABSPATH.$import_loc;$imports_dir = @ opendir($import_root);if ($imports_dir) {	while (($file = readdir($imports_dir)) !== false) {		if ($file{0} == '.') {			continue;		} elseif (substr($file, -4) == '.php') {			require_once($import_root . '/' . $file);		}	}}@closedir($imports_dir);$importers = get_importers();// If a popular importer is not registered, create a dummy registration that links to the plugin installer.foreach ( $popular_importers as $pop_importer => $pop_data ) {	if ( isset($importers[$pop_importer] ) )		continue;	if ( isset( $pop_data[3] ) && isset( $importers[ $pop_data[3] ] ) )		continue;	$importers[$pop_importer] = $popular_importers[$pop_importer];}if (empty ($importers)) {	echo '<p>'.__('No importers are available.').'</p>'; // TODO: make more helpful} else {	uasort($importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));?><table class="widefat" cellspacing="0"><?php	$style = '';	foreach ($importers as $id => $data) {		$style = ('class="alternate"' == $style || 'class="alternate active"' == $style) ? '' : 'alternate';		$action = '';		if ( 'install' == $data[2] ) {			$plugin_slug = $id . '-importer';			if ( file_exists( WP_PLUGIN_DIR . '/' . $plugin_slug ) ) {				// Looks like Importer is installed, But not active				$plugins = get_plugins( '/' . $plugin_slug );				if ( !empty($plugins) ) {					$keys = array_keys($plugins);					$plugin_file = $plugin_slug . '/' . $keys[0];					$action = '<a href="' . esc_url(wp_nonce_url(admin_url('plugins.php?action=activate&plugin=' . $plugin_file . '&from=import'), 'activate-plugin_' . $plugin_file)) .											'"title="' . esc_attr__('Activate importer') . '"">' . $data[0] . '</a>';				}			}			if ( empty($action) )				$action = '<a href="' . esc_url(admin_url('plugin-install.php?tab=plugin-information&plugin=' . $plugin_slug .										'&from=import&TB_iframe=true&width=600&height=550')) . '" class="thickbox" title="' .										esc_attr__('Install importer') . '">' . $data[0] . '</a>';		} else {			$action = "<a href='" . esc_url("admin.php?import=$id") . "' title='" . esc_attr( wptexturize(strip_tags($data[1])) ) ."'>{$data[0]}</a>";		}		if ($style != '')			$style = 'class="'.$style.'"';		echo "			<tr $style>				<td class='import-system row-title'>$action</td>				<td class='desc'>{$data[1]}</td>			</tr>";	}?></table><?php}if ( current_user_can('install_plugins') )	echo '<p>' . sprintf('If the importer you need is not listed, <a href="%s">search the plugins directory</a> to see if an importer is available.', esc_url(admin_url('plugin-install.php?tab=search&type=tag&s=importer')) ) . '</p>';?></div><?phpinclude ('admin-footer.php');?>
<?php/** * Post functions and post utility function. * * @package WordPress * @subpackage Post * @since 1.5.0 *///// Post Type Registration///** * Creates the initial post types when 'init' action is fired. */function create_initial_post_types() {	register_post_type( 'post', array(		'public'  => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'page', array(		'public' => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'page',		'hierarchical' => true,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'attachment', array(		'labels' => array(			'name' => __( 'Media' ),		),		'public' => true,		'show_ui' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'media.php?attachment_id=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'can_export' => false,		'show_in_nav_menus' => false,	) );	register_post_type( 'revision', array(		'labels' => array(			'name' => __( 'Revisions' ),			'singular_name' => __( 'Revision' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_type( 'nav_menu_item', array(		'labels' => array(			'name' => __( 'Navigation Menu Items' ),			'singular_name' => __( 'Navigation Menu Item' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_status( 'publish', array(		'label'       => _x( 'Published', 'post' ),		'public'      => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Published <span class="count">(%s)</span>', 'Published <span class="count">(%s)</span>' ),	) );	register_post_status( 'future', array(		'label'       => _x( 'Scheduled', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop('Scheduled <span class="count">(%s)</span>', 'Scheduled <span class="count">(%s)</span>' ),	) );	register_post_status( 'draft', array(		'label'       => _x( 'Draft', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Draft <span class="count">(%s)</span>', 'Drafts <span class="count">(%s)</span>' ),	) );	register_post_status( 'pending', array(		'label'       => _x( 'Pending', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Pending <span class="count">(%s)</span>', 'Pending <span class="count">(%s)</span>' ),	) );	register_post_status( 'private', array(		'label'       => _x( 'Private', 'post' ),		'private'     => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Private <span class="count">(%s)</span>', 'Private <span class="count">(%s)</span>' ),	) );	register_post_status( 'trash', array(		'label'       => _x( 'Trash', 'post' ),		'internal'    => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>' ),		'show_in_admin_status_list' => true,	) );	register_post_status( 'auto-draft', array(		'label'    => 'auto-draft',		'internal' => true,		'_builtin' => true, /* internal use only. */	) );	register_post_status( 'inherit', array(		'label'    => 'inherit',		'internal' => true,		'_builtin' => true, /* internal use only. */		'exclude_from_search' => false,	) );}add_action( 'init', 'create_initial_post_types', 0 ); // highest priority/** * Retrieve attached file path based on attachment ID. * * You can optionally send it through the 'get_attached_file' filter, but by * default it will just return the file path unfiltered. * * The function works by getting the single post meta name, named * '_wp_attached_file' and returning it. This is a convenience function to * prevent looking up the meta name and provide a mechanism for sending the * attached filename through a filter. * * @since 2.0.0 * @uses apply_filters() Calls 'get_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID. * @param bool $unfiltered Whether to apply filters. * @return string The file path to the attached file. */function get_attached_file( $attachment_id, $unfiltered = false ) {	$file = get_post_meta( $attachment_id, '_wp_attached_file', true );	// If the file is relative, prepend upload dir	if ( 0 !== strpos($file, '/') && !preg_match('|^.:\\\|', $file) && ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) )		$file = $uploads['basedir'] . "/$file";	if ( $unfiltered )		return $file;	return apply_filters( 'get_attached_file', $file, $attachment_id );}/** * Update attachment file path based on attachment ID. * * Used to update the file path of the attachment, which uses post meta name * '_wp_attached_file' to store the path of the attachment. * * @since 2.1.0 * @uses apply_filters() Calls 'update_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID * @param string $file File path for the attachment * @return bool False on failure, true on success. */function update_attached_file( $attachment_id, $file ) {	if ( !get_post( $attachment_id ) )		return false;	$file = apply_filters( 'update_attached_file', $file, $attachment_id );	$file = _wp_relative_upload_path($file);	return update_post_meta( $attachment_id, '_wp_attached_file', $file );}/** * Return relative path to an uploaded file. * * The path is relative to the current upload dir. * * @since 2.9.0 * @uses apply_filters() Calls '_wp_relative_upload_path' on file path. * * @param string $path Full path to the file * @return string relative path on success, unchanged path on failure. */function _wp_relative_upload_path( $path ) {	$new_path = $path;	if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) {		if ( 0 === strpos($new_path, $uploads['basedir']) ) {				$new_path = str_replace($uploads['basedir'], '', $new_path);				$new_path = ltrim($new_path, '/');		}	}	return apply_filters( '_wp_relative_upload_path', $new_path, $path );}/** * Retrieve all children of the post parent ID. * * Normally, without any enhancements, the children would apply to pages. In the * context of the inner workings of WordPress, pages, posts, and attachments * share the same table, so therefore the functionality could apply to any one * of them. It is then noted that while this function does not work on posts, it * does not mean that it won't work on posts. It is recommended that you know * what context you wish to retrieve the children of. * * Attachments may also be made the child of a post, so if that is an accurate * statement (which needs to be verified), it would then be possible to get * all of the attachments for a post. Attachments have since changed since * version 2.5, so this is most likely unaccurate, but serves generally as an * example of what is possible. * * The arguments listed as defaults are for this function and also of the * {@link get_posts()} function. The arguments are combined with the * get_children defaults and are then passed to the {@link get_posts()} * function, which accepts additional arguments. You can replace the defaults in * this function, listed below and the additional arguments listed in the * {@link get_posts()} function. * * The 'post_parent' is the most important argument and important attention * needs to be paid to the $args parameter. If you pass either an object or an * integer (number), then just the 'post_parent' is grabbed and everything else * is lost. If you don't specify any arguments, then it is assumed that you are * in The Loop and the post parent will be grabbed for from the current post. * * The 'post_parent' argument is the ID to get the children. The 'numberposts' * is the amount of posts to retrieve that has a default of '-1', which is * used to get all of the posts. Giving a number higher than 0 will only * retrieve that amount of posts. * * The 'post_type' and 'post_status' arguments can be used to choose what * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress * post types are 'post', 'pages', and 'attachments'. The 'post_status' * argument will accept any post status within the write administration panels. * * @see get_posts() Has additional arguments that can be replaced. * @internal Claims made in the long description might be inaccurate. * * @since 2.0.0 * * @param mixed $args Optional. User defined arguments for replacing the defaults. * @param string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N. * @return array|bool False on failure and the type will be determined by $output parameter. */function &get_children($args = '', $output = OBJECT) {	$kids = array();	if ( empty( $args ) ) {		if ( isset( $GLOBALS['post'] ) ) {			$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );		} else {			return $kids;		}	} elseif ( is_object( $args ) ) {		$args = array('post_parent' => (int) $args->post_parent );	} elseif ( is_numeric( $args ) ) {		$args = array('post_parent' => (int) $args);	}	$defaults = array(		'numberposts' => -1, 'post_type' => 'any',		'post_status' => 'any', 'post_parent' => 0,	);	$r = wp_parse_args( $args, $defaults );	$children = get_posts( $r );	if ( !$children )		return $kids;	update_post_cache($children);	foreach ( $children as $key => $child )		$kids[$child->ID] =& $children[$key];	if ( $output == OBJECT ) {		return $kids;	} elseif ( $output == ARRAY_A ) {		foreach ( (array) $kids as $kid )			$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);		return $weeuns;	} elseif ( $output == ARRAY_N ) {		foreach ( (array) $kids as $kid )			$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));		return $babes;	} else {		return $kids;	}}/** * Get extended entry info (<!--more-->). * * There should not be any space after the second dash and before the word * 'more'. There can be text or space(s) after the word 'more', but won't be * referenced. * * The returned array has 'main' and 'extended' keys. Main has the text before * the <code><!--more--></code>. The 'extended' key has the content after the * <code><!--more--></code> comment. * * @since 1.0.0 * * @param string $post Post content. * @return array Post before ('main') and after ('extended'). */function get_extended($post) {	//Match the new style more links	if ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {		list($main, $extended) = explode($matches[0], $post, 2);	} else {		$main = $post;		$extended = '';	}	// Strip leading and trailing whitespace	$main = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $main);	$extended = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $extended);	return array('main' => $main, 'extended' => $extended);}/** * Retrieves post data given a post ID or post object. * * See {@link sanitize_post()} for optional $filter values. Also, the parameter * $post, must be given as a variable, since it is passed by reference. * * @since 1.5.1 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post * * @param int|object $post Post ID or post object. * @param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional, default is raw. * @return mixed Post data */function &get_post(&$post, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($post) ) {		if ( isset($GLOBALS['post']) )			$_post = & $GLOBALS['post'];		else			return $null;	} elseif ( is_object($post) && empty($post->filter) ) {		_get_post_ancestors($post);		$_post = sanitize_post($post, 'raw');		wp_cache_add($post->ID, $_post, 'posts');	} else {		if ( is_object($post) )			$post_id = $post->ID;		else			$post_id = $post;		$post_id = (int) $post_id;		if ( ! $_post = wp_cache_get($post_id, 'posts') ) {			$_post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d LIMIT 1", $post_id));			if ( ! $_post )				return $null;			_get_post_ancestors($_post);			$_post = sanitize_post($_post, 'raw');			wp_cache_add($_post->ID, $_post, 'posts');		}	}	if ($filter != 'raw')		$_post = sanitize_post($_post, $filter);	if ( $output == OBJECT ) {		return $_post;	} elseif ( $output == ARRAY_A ) {		$__post = get_object_vars($_post);		return $__post;	} elseif ( $output == ARRAY_N ) {		$__post = array_values(get_object_vars($_post));		return $__post;	} else {		return $_post;	}}/** * Retrieve ancestors of a post. * * @since 2.5.0 * * @param int|object $post Post ID or post object * @return array Ancestor IDs or empty array if none are found. */function get_post_ancestors($post) {	$post = get_post($post);	if ( !empty($post->ancestors) )		return $post->ancestors;	return array();}/** * Retrieve data from a post field based on Post ID. * * Examples of the post field will be, 'post_type', 'post_status', 'content', * etc and based off of the post object property or key names. * * The context values are based off of the taxonomy filter functions and * supported values are found within those functions. * * @since 2.3.0 * @uses sanitize_post_field() See for possible $context values. * * @param string $field Post field name * @param id $post Post ID * @param string $context Optional. How to filter the field. Default is display. * @return WP_Error|string Value in post field or WP_Error on failure */function get_post_field( $field, $post, $context = 'display' ) {	$post = (int) $post;	$post = get_post( $post );	if ( is_wp_error($post) )		return $post;	if ( !is_object($post) )		return '';	if ( !isset($post->$field) )		return '';	return sanitize_post_field($field, $post->$field, $post->ID, $context);}/** * Retrieve the mime type of an attachment based on the ID. * * This function can be used with any post type, but it makes more sense with * attachments. * * @since 2.0.0 * * @param int $ID Optional. Post ID. * @return bool|string False on failure or returns the mime type */function get_post_mime_type($ID = '') {	$post = & get_post($ID);	if ( is_object($post) )		return $post->post_mime_type;	return false;}/** * Retrieve the post status based on the Post ID. * * If the post ID is of an attachment, then the parent post status will be given * instead. * * @since 2.0.0 * * @param int $ID Post ID * @return string|bool Post status or false on failure. */function get_post_status($ID = '') {	$post = get_post($ID);	if ( !is_object($post) )		return false;	// Unattached attachments are assumed to be published.	if ( ('attachment' == $post->post_type) && ('inherit' == $post->post_status) && ( 0 == $post->post_parent) )		return 'publish';	if ( ('attachment' == $post->post_type) && $post->post_parent && ($post->ID != $post->post_parent) )		return get_post_status($post->post_parent);	return $post->post_status;}/** * Retrieve all of the WordPress supported post statuses. * * Posts have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of post statuses. */function get_post_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'pending'		=> __('Pending Review'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Retrieve all of the WordPress support page statuses. * * Pages have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of page statuses. */function get_page_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post status based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post status name. * * * Optional $args contents: * * label - A descriptive name for the post status marked for translation. Defaults to $post_status. * public - Whether posts of this status should be shown in the admin UI. Defaults to true. * exclude_from_search - Whether to exclude posts with this post status from search results. Defaults to true. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses Inserts new post status object into the list * * @param string $post_status Name of the post status. * @param array|string $args See above description. */function register_post_status($post_status, $args = array()) {	global $wp_post_statuses;	if (!is_array($wp_post_statuses))		$wp_post_statuses = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array('label' => false, 'label_count' => false, 'exclude_from_search' => null, '_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'hierarchical' => false, 'public' => null, 'internal' => null, 'protected' => null, 'private' => null, 'show_in_admin_all' => null, 'publicly_queryable' => null, 'show_in_admin_status_list' => null, 'show_in_admin_all_list' => null, 'single_view_cap' => null);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_status = sanitize_user($post_status, true);	$args->name = $post_status;	if ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )		$args->internal = true;	if ( null === $args->public  )		$args->public = false;	if ( null === $args->private  )		$args->private = false;	if ( null === $args->protected  )		$args->protected = false;	if ( null === $args->internal  )		$args->internal = false;	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	if ( null === $args->exclude_from_search )		$args->exclude_from_search = $args->internal;	if ( null === $args->show_in_admin_all_list )		$args->show_in_admin_all_list = !$args->internal;	if ( null === $args->show_in_admin_status_list )			$args->show_in_admin_status_list = !$args->internal;	if ( null === $args->single_view_cap )		$args->single_view_cap = $args->public ? '' : 'edit';	if ( false === $args->label )		$args->label = $post_status;	if ( false === $args->label_count )		$args->label_count = array( $args->label, $args->label );	$wp_post_statuses[$post_status] = $args;	return $args;}/** * Retrieve a post status object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_statuses * * @param string $post_type The name of a registered post status * @return object A post status object */function get_post_status_object( $post_status ) {	global $wp_post_statuses;	if ( empty($wp_post_statuses[$post_status]) )		return null;	return $wp_post_statuses[$post_status];}/** * Get a list of all registered post status objects. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_status_object * * @param array|string $args An array of key => value arguments to match against the post status objects. * @param string $output The type of output to return, either post status 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_statuses;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_statuses, $args, $operator, $field);}/** * Whether the post type is hierarchical. * * A false return value might also mean that the post type does not exist. * * @since 3.0.0 * @see get_post_type_object * * @param string $post Post type name * @return bool Whether post type is hierarchical. */function is_post_type_hierarchical( $post_type ) {	if ( ! post_type_exists( $post_type ) )		return false;	$post_type = get_post_type_object( $post_type );	return $post_type->hierarchical;}/** * Checks if a post type is registered. * * @since 3.0.0 * @uses get_post_type_object() * * @param string Post type name * @return bool Whether post type is registered. */function post_type_exists( $post_type ) {	return (bool) get_post_type_object( $post_type );}/** * Retrieve the post type of the current post or of a given post. * * @since 2.1.0 * * @uses $post The Loop current post global * * @param mixed $the_post Optional. Post object or post ID. * @return bool|string post type or false on failure. */function get_post_type( $the_post = false ) {	global $post;	if ( false === $the_post )		$the_post = $post;	elseif ( is_numeric($the_post) )		$the_post = get_post($the_post);	if ( is_object($the_post) )		return $the_post->post_type;	return false;}/** * Retrieve a post type object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_types * @see register_post_type * @see get_post_types * * @param string $post_type The name of a registered post type * @return object A post type object */function get_post_type_object( $post_type ) {	global $wp_post_types;	if ( empty($wp_post_types[$post_type]) )		return null;	return $wp_post_types[$post_type];}/** * Get a list of all registered post type objects. * * @package WordPress * @subpackage Post * @since 2.9.0 * @uses $wp_post_types * @see register_post_type * * @param array|string $args An array of key => value arguments to match against the post type objects. * @param string $output The type of output to return, either post type 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_types;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_types, $args, $operator, $field);}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post type based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post type name. * * * Optional $args contents: * * - label - Name of the post type shown in the menu. Usually plural. If not set, labels['name'] will be used. * - description - A short descriptive summary of what the post type is. Defaults to blank. * - public - Whether posts of this type should be shown in the admin UI. Defaults to false. * - exclude_from_search - Whether to exclude posts with this post type from search results. Defaults to true if the type is not public, false if the type is public. * - publicly_queryable - Whether post_type queries can be performed from the front page.  Defaults to whatever public is set as. * - show_ui - Whether to generate a default UI for managing this post type. Defaults to true if the type is public, false if the type is not public. * - menu_position - The position in the menu order the post type should appear. Defaults to the bottom. * - menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon. * - capability_type - The post type to use for checking read, edit, and delete capabilities. Defaults to "post". * - capabilities - Array of capabilities for this post type. You can see accepted values in {@link get_post_type_capabilities()}. By default the capability_type is used to construct capabilities. * - hierarchical - Whether the post type is hierarchical. Defaults to false. * - supports - An alias for calling add_post_type_support() directly. See add_post_type_support() for Documentation. Defaults to none. * - register_meta_box_cb - Provide a callback function that will be called when setting up the meta boxes for the edit form.  Do remove_meta_box() and add_meta_box() calls in the callback. * - taxonomies - An array of taxonomy identifiers that will be registered for the post type.  Default is no taxonomies. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). * - labels - An array of labels for this post type. You can see accepted values in {@link get_post_type_labels()}. By default post labels are used for non-hierarchical types and page labels for hierarchical ones. * - permalink_epmask - The default rewrite endpoint bitmasks. * - rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize permastruct; default will use $post_type as slug. * - query_var - false to prevent queries, or string to value of the query var to use for this post type * - can_export - true allows this post type to be exported. * - show_in_nav_menus - true makes this post type available for selection in navigation menus. * - _builtin - true if this post type is a native or "built-in" post_type.  THIS IS FOR INTERNAL USE ONLY! * - _edit_link - URL segement to use for edit link of this post type.  Set to 'post.php?post=%d'.  THIS IS FOR INTERNAL USE ONLY! * * @since 2.9.0 * @uses $wp_post_types Inserts new post type object into the list * * @param string $post_type Name of the post type. * @param array|string $args See above description. * @return object the registered post type object */function register_post_type($post_type, $args = array()) {	global $wp_post_types, $wp_rewrite, $wp;	if ( !is_array($wp_post_types) )		$wp_post_types = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array(		'labels' => array(), 'description' => '', 'publicly_queryable' => null, 'exclude_from_search' => null,		'_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'capabilities' => array(), 'hierarchical' => false,		'public' => false, 'rewrite' => true, 'query_var' => true, 'supports' => array(), 'register_meta_box_cb' => null,		'taxonomies' => array(), 'show_ui' => null, 'menu_position' => null, 'menu_icon' => null,		'permalink_epmask' => EP_PERMALINK, 'can_export' => true, 'show_in_nav_menus' => null	);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_type = sanitize_user($post_type, true);	$args->name = $post_type;	// If not set, default to the setting for public.	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	// If not set, default to the setting for public.	if ( null === $args->show_ui )		$args->show_ui = $args->public;	// Whether to show this type in nav-menus.php.  Defaults to the setting for public.	if ( null === $args->show_in_nav_menus )		$args->show_in_nav_menus = $args->public;	// If not set, default to true if not public, false if public.	if ( null === $args->exclude_from_search )		$args->exclude_from_search = !$args->public;	if ( empty($args->capability_type) )		$args->capability_type = 'post';	$args->cap = get_post_type_capabilities( $args );	unset($args->capabilities);	if ( ! empty($args->supports) ) {		add_post_type_support($post_type, $args->supports);		unset($args->supports);	} else {		// Add default features		add_post_type_support($post_type, array('title', 'editor'));	}	if ( false !== $args->query_var && !empty($wp) ) {		if ( true === $args->query_var )			$args->query_var = $post_type;		$args->query_var = sanitize_title_with_dashes($args->query_var);		$wp->add_query_var($args->query_var);	}	if ( false !== $args->rewrite && '' != get_option('permalink_structure') ) {		if ( !is_array($args->rewrite) )			$args->rewrite = array();		if ( !isset($args->rewrite['slug']) )			$args->rewrite['slug'] = $post_type;		if ( !isset($args->rewrite['with_front']) )			$args->rewrite['with_front'] = true;		if ( $args->hierarchical )			$wp_rewrite->add_rewrite_tag("%$post_type%", '(.+?)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		else			$wp_rewrite->add_rewrite_tag("%$post_type%", '([^/]+)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		$wp_rewrite->add_permastruct($post_type, "{$args->rewrite['slug']}/%$post_type%", $args->rewrite['with_front'], $args->permalink_epmask);	}	if ( $args->register_meta_box_cb )		add_action('add_meta_boxes_' . $post_type, $args->register_meta_box_cb, 10, 1);	$args->labels = get_post_type_labels( $args );	$args->label = $args->labels->name;	$wp_post_types[$post_type] = $args;	add_action( 'future_' . $post_type, '_future_post_hook', 5, 2 );	foreach ( $args->taxonomies as $taxonomy ) {		register_taxonomy_for_object_type( $taxonomy, $post_type );	}	return $args;}/** * Builds an object with all post type capabilities out of a post type object * * Accepted keys of the capabilities array in the post type object: * - edit_post - The meta capability that controls editing a particular object of this post type. Defaults to "edit_ . $capability_type" (edit_post). * - edit_posts - The capability that controls editing objects of this post type as a class. Defaults to "edit_ . $capability_type . s" (edit_posts). * - edit_others_posts - The capability that controls editing objects of this post type that are owned by other users. Defaults to "edit_others_ . $capability_type . s" (edit_others_posts). * - publish_posts - The capability that controls publishing objects of this post type. Defaults to "publish_ . $capability_type . s" (publish_posts). * - read_post - The meta capability that controls reading a particular object of this post type. Defaults to "read_ . $capability_type" (read_post). * - read_private_posts - The capability that controls reading private posts. Defaults to "read_private . $capability_type . s" (read_private_posts). * - delete_post - The meta capability that controls deleting a particular object of this post type. Defaults to "delete_ . $capability_type" (delete_post). * * @since 3.0.0 * @param object $args * @return object object with all the capabilities as member variables */function get_post_type_capabilities( $args ) {	$defaults = array(		'edit_post'          => 'edit_'         . $args->capability_type,		'edit_posts'         => 'edit_'         . $args->capability_type . 's',		'edit_others_posts'  => 'edit_others_'  . $args->capability_type . 's',		'publish_posts'      => 'publish_'      . $args->capability_type . 's',		'read_post'          => 'read_'         . $args->capability_type,		'read_private_posts' => 'read_private_' . $args->capability_type . 's',		'delete_post'        => 'delete_'       . $args->capability_type,	);	$labels = array_merge( $defaults, $args->capabilities );	return (object) $labels;}/** * Builds an object with all post type labels out of a post type object * * Accepted keys of the label array in the post type object: * - name - general name for the post type, usually plural. The same and overriden by $post_type_object->label. Default is Posts/Pages * - singular_name - name for one object of this post type. Default is Post/Page * - add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a {@link http://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context} matching your post type. Example: <code>_x('Add New', 'product');</code> * - add_new_item - Default is Add New Post/Add New Page * - edit_item - Default is Edit Post/Edit Page * - new_item - Default is New Post/New Page * - view_item - Default is View Post/View Page * - search_items - Default is Search Posts/Search Pages * - not_found - Default is No posts found/No pages found * - not_found_in_trash - Default is No posts found in Trash/No pages found in Trash * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page: * * Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages.) * * @since 3.0.0 * @param object $post_type_object * @return object object with all the labels as member variables */function get_post_type_labels( $post_type_object ) {	$nohier_vs_hier_defaults = array(		'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),		'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),		'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),		'add_new_item' => array( __('Add New Post'), __('Add New Page') ),		'edit_item' => array( __('Edit Post'), __('Edit Page') ),		'new_item' => array( __('New Post'), __('New Page') ),		'view_item' => array( __('View Post'), __('View Page') ),		'search_items' => array( __('Search Posts'), __('Search Pages') ),		'not_found' => array( __('No posts found'), __('No pages found') ),		'not_found_in_trash' => array( __('No posts found in Trash'), __('No pages found in Trash') ),		'parent_item_colon' => array( null, __('Parent Page:') )	);	return _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );}/** * Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object * * @access private */function _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {	if ( isset( $object->label ) && empty( $object->labels['name'] ) )		$object->labels['name'] = $object->label;	if ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )		$object->labels['singular_name'] = $object->labels['name'];	$defaults = array_map( create_function( '$x', $object->hierarchical? 'return $x[1];' : 'return $x[0];' ), $nohier_vs_hier_defaults );	$labels = array_merge( $defaults, $object->labels );	return (object)$labels;}/** * Register support of certain features for a post type. * * All features are directly associated with a functional area of the edit screen, such as the * editor or a meta box: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', * 'excerpt', 'page-attributes', 'thumbnail', and 'custom-fields'. * * Additionally, the 'revisions' feature dictates whether the post type will store revisions, * and the 'comments' feature dicates whether the comments count will show on the edit screen. * * @since 3.0.0 * @param string $post_type The post type for which to add the feature * @param string|array $feature the feature being added, can be an array of feature strings or a single string */function add_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	$features = (array) $feature;	foreach ($features as $feature) {		if ( func_num_args() == 2 )			$_wp_post_type_features[$post_type][$feature] = true;		else			$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );	}}/** * Remove support for a feature from a post type. * * @since 3.0.0 * @param string $post_type The post type for which to remove the feature * @param string $feature The feature being removed */function remove_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset($_wp_post_type_features[$post_type]) )		return;	if ( isset($_wp_post_type_features[$post_type][$feature]) )		unset($_wp_post_type_features[$post_type][$feature]);}/** * Checks a post type's support for a given feature * * @since 3.0.0 * @param string $post_type The post type being checked * @param string $feature the feature being checked * @return boolean */function post_type_supports( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset( $_wp_post_type_features[$post_type][$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 2 )		return true;	// @todo Allow pluggable arg checking	//$args = array_slice( func_get_args(), 2 );	return true;}/** * Updates the post type for the post ID. * * The page or post cache will be cleaned for the post ID. * * @since 2.5.0 * * @uses $wpdb * * @param int $post_id Post ID to change post type. Not actually optional. * @param string $post_type Optional, default is post. Supported values are 'post' or 'page' to *  name a few. * @return int Amount of rows changed. Should be 1 for success and 0 for failure. */function set_post_type( $post_id = 0, $post_type = 'post' ) {	global $wpdb;	$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');	$return = $wpdb->update($wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );	if ( 'page' == $post_type )		clean_page_cache($post_id);	else		clean_post_cache($post_id);	return $return;}/** * Retrieve list of latest posts or posts matching criteria. * * The defaults are as follows: *     'numberposts' - Default is 5. Total number of posts to retrieve. *     'offset' - Default is 0. See {@link WP_Query::query()} for more. *     'category' - What category to pull the posts from. *     'orderby' - Default is 'post_date'. How to order the posts. *     'order' - Default is 'DESC'. The order to retrieve the posts. *     'include' - See {@link WP_Query::query()} for more. *     'exclude' - See {@link WP_Query::query()} for more. *     'meta_key' - See {@link WP_Query::query()} for more. *     'meta_value' - See {@link WP_Query::query()} for more. *     'post_type' - Default is 'post'. Can be 'page', or 'attachment' to name a few. *     'post_parent' - The parent of the post or post type. *     'post_status' - Default is 'published'. Post status to retrieve. * * @since 1.2.0 * @uses $wpdb * @uses WP_Query::query() See for more default arguments and information. * @link http://codex.wordpress.org/Template_Tags/get_posts * * @param array $args Optional. Overrides defaults. * @return array List of posts. */function get_posts($args = null) {	$defaults = array(		'numberposts' => 5, 'offset' => 0,		'category' => 0, 'orderby' => 'post_date',		'order' => 'DESC', 'include' => array(),		'exclude' => array(), 'meta_key' => '',		'meta_value' =>'', 'post_type' => 'post',		'suppress_filters' => true	);	$r = wp_parse_args( $args, $defaults );	if ( empty( $r['post_status'] ) )		$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';	if ( ! empty($r['numberposts']) )		$r['posts_per_page'] = $r['numberposts'];	if ( ! empty($r['category']) )		$r['cat'] = $r['category'];	if ( ! empty($r['include']) ) {		$incposts = wp_parse_id_list( $r['include'] );		$r['posts_per_page'] = count($incposts);  // only the number of posts included		$r['post__in'] = $incposts;	} elseif ( ! empty($r['exclude']) )		$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );	$r['caller_get_posts'] = true;	$get_posts = new WP_Query;	return $get_posts->query($r);}//// Post meta functions///** * Add meta data field to a post. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/add_post_meta * * @param int $post_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_post_meta($post_id, $meta_key, $meta_value, $unique = false) {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return add_metadata('post', $post_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a post. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/delete_post_meta * * @param int $post_id post ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_post_meta($post_id, $meta_key, $meta_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return delete_metadata('post', $post_id, $meta_key, $meta_value);}/** * Retrieve post meta field for a post. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post_meta * * @param int $post_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_post_meta($post_id, $key, $single = false) {	return get_metadata('post', $post_id, $key, $single);}/** * Update post meta field based on post ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and post ID. * * If the meta field for the post does not exist, it will be added. * * @since 1.5 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/update_post_meta * * @param int $post_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return update_metadata('post', $post_id, $meta_key, $meta_value, $prev_value);}/** * Delete everything from post meta matching meta key. * * @since 2.3.0 * @uses $wpdb * * @param string $post_meta_key Key to search for when deleting. * @return bool Whether the post meta key was deleted from the database */function delete_post_meta_by_key($post_meta_key) {	if ( !$post_meta_key )		return false;	global $wpdb;	$post_ids = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key));	if ( $post_ids ) {		$postmetaids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key ) );		$in = implode( ',', array_fill(1, count($postmetaids), '%d'));		do_action( 'delete_postmeta', $postmetaids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN($in)", $postmetaids ));		do_action( 'deleted_postmeta', $postmetaids );		foreach ( $post_ids as $post_id )			wp_cache_delete($post_id, 'post_meta');		return true;	}	return false;}/** * Retrieve post meta fields, based on post ID. * * The post meta fields are retrieved from the cache, so the function is * optimized to be called more than once. It also applies to the functions, that * use this function. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom * * @uses $id Current Loop Post ID * * @param int $post_id post ID * @return array */function get_post_custom($post_id = 0) {	global $id;	if ( !$post_id )		$post_id = (int) $id;	$post_id = (int) $post_id;	if ( ! wp_cache_get($post_id, 'post_meta') )		update_postmeta_cache($post_id);	return wp_cache_get($post_id, 'post_meta');}/** * Retrieve meta field names for a post. * * If there are no meta fields, then nothing (null) will be returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_keys * * @param int $post_id post ID * @return array|null Either array of the keys, or null if keys could not be retrieved. */function get_post_custom_keys( $post_id = 0 ) {	$custom = get_post_custom( $post_id );	if ( !is_array($custom) )		return;	if ( $keys = array_keys($custom) )		return $keys;}/** * Retrieve values for a custom post field. * * The parameters must not be considered optional. All of the post meta fields * will be retrieved and only the meta field key values returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_values * * @param string $key Meta field key. * @param int $post_id Post ID * @return array Meta field values. */function get_post_custom_values( $key = '', $post_id = 0 ) {	if ( !$key )		return null;	$custom = get_post_custom($post_id);	return isset($custom[$key]) ? $custom[$key] : null;}/** * Check if post is sticky. * * Sticky posts should remain at the top of The Loop. If the post ID is not * given, then The Loop ID for the current post will be used. * * @since 2.7.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post is sticky. */function is_sticky($post_id = null) {	global $id;	$post_id = absint($post_id);	if ( !$post_id )		$post_id = absint($id);	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return false;	if ( in_array($post_id, $stickies) )		return true;	return false;}/** * Sanitize every post field. * * If the context is 'raw', then the post object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_post_field() Used to sanitize the fields. * * @param object|array $post The Post Object or Array * @param string $context Optional, default is 'display'. How to sanitize post fields. * @return object|array The now sanitized Post Object or Array (will be the same type as $post) */function sanitize_post($post, $context = 'display') {	if ( is_object($post) ) {		// Check if post already filtered for this context		if ( isset($post->filter) && $context == $post->filter )			return $post;		if ( !isset($post->ID) )			$post->ID = 0;		foreach ( array_keys(get_object_vars($post)) as $field )			$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);		$post->filter = $context;	} else {		// Check if post already filtered for this context		if ( isset($post['filter']) && $context == $post['filter'] )			return $post;		if ( !isset($post['ID']) )			$post['ID'] = 0;		foreach ( array_keys($post) as $field )			$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);		$post['filter'] = $context;	}	return $post;}/** * Sanitize post field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $post_id if $context == 'edit' and field name prefix == 'post_'. * * @uses apply_filters() Calls 'edit_post_$field' passing $value and $post_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'post_'. * * @uses apply_filters() Calls '$field' passing $value, $post_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls 'post_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'post_'. * * @param string $field The Post Object field name. * @param mixed $value The Post Object value. * @param int $post_id Post ID. * @param string $context How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_post_field($field, $value, $post_id, $context) {	$int_fields = array('ID', 'post_parent', 'menu_order');	if ( in_array($field, $int_fields) )		$value = (int) $value;	// Fields which contain arrays of ints.	$array_int_fields = array( 'ancestors' );	if ( in_array($field, $array_int_fields) ) {		$value = array_map( 'absint', $value);		return $value;	}	if ( 'raw' == $context )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'post_') ) {		$prefixed = true;		$field_no_prefix = str_replace('post_', '', $field);	}	if ( 'edit' == $context ) {		$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $post_id);			// Old school			$value = apply_filters("${field_no_prefix}_edit_pre", $value, $post_id);		} else {			$value = apply_filters("edit_post_$field", $value, $post_id);		}		if ( in_array($field, $format_to_edit) ) {			if ( 'post_content' == $field )				$value = format_to_edit($value, user_can_richedit());			else				$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);			$value = apply_filters("${field_no_prefix}_save_pre", $value);		} else {			$value = apply_filters("pre_post_$field", $value);			$value = apply_filters("${field}_pre", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $post_id, $context);		else			$value = apply_filters("post_$field", $value, $post_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Make a post sticky. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function stick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		$stickies = array($post_id);	if ( ! in_array($post_id, $stickies) )		$stickies[] = $post_id;	update_option('sticky_posts', $stickies);}/** * Unstick a post. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function unstick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return;	if ( ! in_array($post_id, $stickies) )		return;	$offset = array_search($post_id, $stickies);	if ( false === $offset )		return;	array_splice($stickies, $offset, 1);	update_option('sticky_posts', $stickies);}/** * Count number of posts of a post type and is user has permissions to view. * * This function provides an efficient method of finding the amount of post's * type a blog has. Another method is to count the amount of items in * get_posts(), but that method has a lot of overhead with doing so. Therefore, * when developing for 2.5+, use this function instead. * * The $perm parameter checks for 'readable' value and if the user can read * private posts, it will display that for the user that is signed in. * * @since 2.5.0 * @link http://codex.wordpress.org/Template_Tags/wp_count_posts * * @param string $type Optional. Post type to retrieve count * @param string $perm Optional. 'readable' or empty. * @return object Number of posts for each status */function wp_count_posts( $type = 'post', $perm = '' ) {	global $wpdb;	$user = wp_get_current_user();	$cache_key = $type;	$query = "SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s";	if ( 'readable' == $perm && is_user_logged_in() ) {		$post_type_object = get_post_type_object($type);		if ( !current_user_can( $post_type_object->cap->read_private_posts ) ) {			$cache_key .= '_' . $perm . '_' . $user->ID;			$query .= " AND (post_status != 'private' OR ( post_author = '$user->ID' AND post_status = 'private' ))";		}	}	$query .= ' GROUP BY post_status';	$count = wp_cache_get($cache_key, 'counts');	if ( false !== $count )		return $count;	$count = $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );	$stats = array();	foreach ( get_post_stati() as $state )		$stats[$state] = 0;	foreach ( (array) $count as $row )		$stats[$row['post_status']] = $row['num_posts'];	$stats = (object) $stats;	wp_cache_set($cache_key, $stats, 'counts');	return $stats;}/** * Count number of attachments for the mime type(s). * * If you set the optional mime_type parameter, then an array will still be * returned, but will only have the item you are looking for. It does not give * you the number of attachments that are children of a post. You can get that * by counting the number of children that post has. * * @since 2.5.0 * * @param string|array $mime_type Optional. Array or comma-separated list of MIME patterns. * @return array Number of posts for each mime type. */function wp_count_attachments( $mime_type = '' ) {	global $wpdb;	$and = wp_post_mime_type_where( $mime_type );	$count = $wpdb->get_results( "SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type", ARRAY_A );	$stats = array( );	foreach( (array) $count as $row ) {		$stats[$row['post_mime_type']] = $row['num_posts'];	}	$stats['trash'] = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and");	return (object) $stats;}/** * Check a MIME-Type against a list. * * If the wildcard_mime_types parameter is a string, it must be comma separated * list. If the real_mime_types is a string, it is also comma separated to * create the list. * * @since 2.5.0 * * @param string|array $wildcard_mime_types e.g. audio/mpeg or image (same as image/*) or *  flash (same as *flash*). * @param string|array $real_mime_types post_mime_type values * @return array array(wildcard=>array(real types)) */function wp_match_mime_types($wildcard_mime_types, $real_mime_types) {	$matches = array();	if ( is_string($wildcard_mime_types) )		$wildcard_mime_types = array_map('trim', explode(',', $wildcard_mime_types));	if ( is_string($real_mime_types) )		$real_mime_types = array_map('trim', explode(',', $real_mime_types));	$wild = '[-._a-z0-9]*';	foreach ( (array) $wildcard_mime_types as $type ) {		$type = str_replace('*', $wild, $type);		$patternses[1][$type] = "^$type$";		if ( false === strpos($type, '/') ) {			$patternses[2][$type] = "^$type/";			$patternses[3][$type] = $type;		}	}	asort($patternses);	foreach ( $patternses as $patterns )		foreach ( $patterns as $type => $pattern )			foreach ( (array) $real_mime_types as $real )				if ( preg_match("#$pattern#", $real) && ( empty($matches[$type]) || false === array_search($real, $matches[$type]) ) )					$matches[$type][] = $real;	return $matches;}/** * Convert MIME types into SQL. * * @since 2.5.0 * * @param string|array $mime_types List of mime types or comma separated string of mime types. * @param string $table_alias Optional. Specify a table alias, if needed. * @return string The SQL AND clause for mime searching. */function wp_post_mime_type_where($post_mime_types, $table_alias = '') {	$where = '';	$wildcards = array('', '%', '%/%');	if ( is_string($post_mime_types) )		$post_mime_types = array_map('trim', explode(',', $post_mime_types));	foreach ( (array) $post_mime_types as $mime_type ) {		$mime_type = preg_replace('/\s/', '', $mime_type);		$slashpos = strpos($mime_type, '/');		if ( false !== $slashpos ) {			$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));			$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));			if ( empty($mime_subgroup) )				$mime_subgroup = '*';			else				$mime_subgroup = str_replace('/', '', $mime_subgroup);			$mime_pattern = "$mime_group/$mime_subgroup";		} else {			$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);			if ( false === strpos($mime_pattern, '*') )				$mime_pattern .= '/*';		}		$mime_pattern = preg_replace('/\*+/', '%', $mime_pattern);		if ( in_array( $mime_type, $wildcards ) )			return '';		if ( false !== strpos($mime_pattern, '%') )			$wheres[] = empty($table_alias) ? "post_mime_type LIKE '$mime_pattern'" : "$table_alias.post_mime_type LIKE '$mime_pattern'";		else			$wheres[] = empty($table_alias) ? "post_mime_type = '$mime_pattern'" : "$table_alias.post_mime_type = '$mime_pattern'";	}	if ( !empty($wheres) )		$where = ' AND (' . join(' OR ', $wheres) . ') ';	return $where;}/** * Trashes or deletes a post or page. * * When the post and page is permanently deleted, everything that is tied to it is deleted also. * This includes comments, post meta fields, and terms associated with the post. * * The post or page is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * @since 1.0.0 * @uses do_action() on 'delete_post' before deletion unless post type is 'attachment'. * @uses do_action() on 'deleted_post' after deletion unless post type is 'attachment'. * @uses wp_delete_attachment() if post type is 'attachment'. * @uses wp_trash_post() if item should be trashed. * * @param int $postid Post ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure */function wp_delete_post( $postid = 0, $force_delete = false ) {	global $wpdb, $wp_rewrite;	if ( !$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $postid)) )		return $post;	if ( !$force_delete && ( $post->post_type == 'post' || $post->post_type == 'page') && get_post_status( $postid ) != 'trash' && EMPTY_TRASH_DAYS )			return wp_trash_post($postid);	if ( $post->post_type == 'attachment' )		return wp_delete_attachment( $postid, $force_delete );	do_action('delete_post', $postid);	delete_post_meta($postid,'_wp_trash_meta_status');	delete_post_meta($postid,'_wp_trash_meta_time');	wp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));	$parent_data = array( 'post_parent' => $post->post_parent );	$parent_where = array( 'post_parent' => $postid );	if ( 'page' == $post->post_type) {	 	// if the page is defined in option page_on_front or post_for_posts,		// adjust the corresponding options		if ( get_option('page_on_front') == $postid ) {			update_option('show_on_front', 'posts');			delete_option('page_on_front');		}		if ( get_option('page_for_posts') == $postid ) {			delete_option('page_for_posts');		}		// Point children of this page to its parent, also clean the cache of affected children		$children_query = $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type='page'", $postid);		$children = $wpdb->get_results($children_query);		$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'page' ) );	} else {		unstick_post($postid);	}	// Do raw query.  wp_get_post_revisions() is filtered	$revision_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'", $postid ) );	// Use wp_delete_post (via wp_delete_post_revision) again.  Ensures any meta/misplaced data gets cleaned up.	foreach ( $revision_ids as $revision_id )		wp_delete_post_revision( $revision_id );	// Point all attachments to this post up one level	$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $postid ));	if ( ! empty($comment_ids) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $postid ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $postid );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $postid ));	do_action( 'deleted_post', $postid );	if ( 'page' == $post->post_type ) {		clean_page_cache($postid);		foreach ( (array) $children as $child )			clean_page_cache($child->ID);		$wp_rewrite->flush_rules(false);	} else {		clean_post_cache($postid);	}	wp_clear_scheduled_hook('publish_future_post', array( $postid ) );	do_action('deleted_post', $postid);	return $post;}/** * Moves a post or page to the Trash * * If trash is disabled, the post or page is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_post' before trashing * @uses do_action() on 'trashed_post' after trashing * @uses wp_delete_post() if trash is disabled * * @param int $postid Post ID. * @return mixed False on failure */function wp_trash_post($post_id = 0) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_post($post_id, true);	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] == 'trash' )		return false;	do_action('trash_post', $post_id);	add_post_meta($post_id,'_wp_trash_meta_status', $post['post_status']);	add_post_meta($post_id,'_wp_trash_meta_time', time());	$post['post_status'] = 'trash';	wp_insert_post($post);	wp_trash_post_comments($post_id);	do_action('trashed_post', $post_id);	return $post;}/** * Restores a post or page from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_post' before undeletion * @uses do_action() on 'untrashed_post' after undeletion * * @param int $postid Post ID. * @return mixed False on failure */function wp_untrash_post($post_id = 0) {	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] != 'trash' )		return false;	do_action('untrash_post', $post_id);	$post_status = get_post_meta($post_id, '_wp_trash_meta_status', true);	$post['post_status'] = $post_status;	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	wp_insert_post($post);	wp_untrash_post_comments($post_id);	do_action('untrashed_post', $post_id);	return $post;}/** * Moves comments for a post to the trash * * @since 2.9.0 * @uses do_action() on 'trash_post_comments' before trashing * @uses do_action() on 'trashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_trash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	do_action('trash_post_comments', $post_id);	$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id) );	if ( empty($comments) )		return;	// Cache current status for each comment	$statuses = array();	foreach ( $comments as $comment )		$statuses[$comment->comment_ID] = $comment->comment_approved;	add_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);	// Set status for all comments to post-trashed	$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));	clean_comment_cache( array_keys($statuses) );	do_action('trashed_post_comments', $post_id, $statuses);	return $result;}/** * Restore comments for a post from the trash * * @since 2.9.0 * @uses do_action() on 'untrash_post_comments' before trashing * @uses do_action() on 'untrashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_untrash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);	if ( empty($statuses) )		return true;	do_action('untrash_post_comments', $post_id);	// Restore each comment to its original status	$group_by_status = array();	foreach ( $statuses as $comment_id => $comment_status )		$group_by_status[$comment_status][] = $comment_id;	foreach ( $group_by_status as $status => $comments ) {		// Sanity check. This shouldn't happen.		if ( 'post-trashed' == $status )			$status = '0';		$comments_in = implode( "', '", $comments );		$wpdb->query( "UPDATE $wpdb->comments SET comment_approved = '$status' WHERE comment_ID IN ('" . $comments_in . "')" );	}	clean_comment_cache( array_keys($statuses) );	delete_post_meta($post_id, '_wp_trash_meta_comments_status');	do_action('untrashed_post_comments', $post_id);}/** * Retrieve the list of categories for a post. * * Compatibility layer for themes and plugins. Also an easy layer of abstraction * away from the complexity of the taxonomy layer. * * @since 2.1.0 * * @uses wp_get_object_terms() Retrieves the categories. Args details can be found here. * * @param int $post_id Optional. The Post ID. * @param array $args Optional. Overwrite the defaults. * @return array */function wp_get_post_categories( $post_id = 0, $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'ids');	$args = wp_parse_args( $args, $defaults );	$cats = wp_get_object_terms($post_id, 'category', $args);	return $cats;}/** * Retrieve the tags for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_tags( $post_id = 0, $args = array() ) {	return wp_get_post_terms( $post_id, 'post_tag', $args);}/** * Retrieve the terms for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.8.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag. * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$tags = wp_get_object_terms($post_id, $taxonomy, $args);	return $tags;}/** * Retrieve number of recent posts. * * @since 1.0.0 * @uses $wpdb * * @param int $num Optional, default is 10. Number of posts to get. * @return array List of posts. */function wp_get_recent_posts($num = 10) {	global $wpdb;	// Set the limit clause, if we got a limit	$num = (int) $num;	if ( $num ) {		$limit = "LIMIT $num";	}	$sql = "SELECT * FROM $wpdb->posts WHERE post_type = 'post' AND post_status IN ( 'draft', 'publish', 'future', 'pending', 'private' ) ORDER BY post_date DESC $limit";	$result = $wpdb->get_results($sql, ARRAY_A);	return $result ? $result : array();}/** * Retrieve a single post, based on post ID. * * Has categories in 'post_category' property or key. Has tags in 'tags_input' * property or key. * * @since 1.0.0 * * @param int $postid Post ID. * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A. * @return object|array Post object or array holding post contents and information */function wp_get_single_post($postid = 0, $mode = OBJECT) {	$postid = (int) $postid;	$post = get_post($postid, $mode);	// Set categories and tags	if ( $mode == OBJECT ) {		$post->post_category = array();		if ( is_object_in_taxonomy($post->post_type, 'category') )			$post->post_category = wp_get_post_categories($postid);		$post->tags_input = array();		if ( is_object_in_taxonomy($post->post_type, 'post_tag') )			$post->tags_input = wp_get_post_tags($postid, array('fields' => 'names'));	} else {		$post['post_category'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'category') )			$post['post_category'] = wp_get_post_categories($postid);		$post['tags_input'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'post_tag') )			$post['tags_input'] = wp_get_post_tags($postid, array('fields' => 'names'));	}	return $post;}/** * Insert a post. * * If the $postarr parameter has 'ID' set to a value, then post will be updated. * * You can set the post date manually, but setting the values for 'post_date' * and 'post_date_gmt' keys. You can close the comments or open the comments by * setting the value for 'comment_status' key. * * The defaults for the parameter $postarr are: *     'post_status'   - Default is 'draft'. *     'post_type'     - Default is 'post'. *     'post_author'   - Default is current user ID ($user_ID). The ID of the user who added the post. *     'ping_status'   - Default is the value in 'default_ping_status' option. *                       Whether the attachment can accept pings. *     'post_parent'   - Default is 0. Set this for the post it belongs to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Post content filtered. *     'post_excerpt'  - Post excerpt. * * @since 1.0.0 * @link http://core.trac.wordpress.org/ticket/9084 Bug report on 'wp_insert_post_data' filter. * @uses $wpdb * @uses $wp_rewrite * @uses $user_ID * * @uses do_action() Calls 'pre_post_update' on post ID if this is an update. * @uses do_action() Calls 'edit_post' action on post ID and post data if this is an update. * @uses do_action() Calls 'save_post' and 'wp_insert_post' on post id and post data just before *                   returning. * * @uses apply_filters() Calls 'wp_insert_post_data' passing $data, $postarr prior to database *                       update or insert. * @uses wp_transition_post_status() * * @param array $postarr Optional. Overrides defaults. * @param bool $wp_error Optional. Allow return of WP_Error on failure. * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success. */function wp_insert_post($postarr = array(), $wp_error = false) {	global $wpdb, $wp_rewrite, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0,		'post_content' => '', 'post_title' => '');	$postarr = wp_parse_args($postarr, $defaults);	$postarr = sanitize_post($postarr, 'db');	// export array as variables	extract($postarr, EXTR_SKIP);	// Are we updating or creating?	$update = false;	if ( !empty($ID) ) {		$update = true;		$previous_status = get_post_field('post_status', $ID);	} else {		$previous_status = 'new';	}	if ( ('' == $post_content) && ('' == $post_title) && ('' == $post_excerpt) && ('attachment' != $post_type) ) {		if ( $wp_error )			return new WP_Error('empty_content', __('Content, title, and excerpt are empty.'));		else			return 0;	}	if ( empty($post_type) )		$post_type = 'post';	if ( empty($post_status) )		$post_status = 'draft';	if ( !empty($post_category) )		$post_category = array_filter($post_category); // Filter out empty terms	// Make sure we set a valid category.	if ( empty($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	if ( empty($post_author) )		$post_author = $user_ID;	$post_ID = 0;	// Get the post ID and GUID	if ( $update ) {		$post_ID = (int) $ID;		$guid = get_post_field( 'guid', $post_ID );		$post_before = get_post($post_ID);	}	// Don't allow contributors to set to set the post slug for pending review posts	if ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) )		$post_name = '';	// Create a valid post name.  Drafts and pending posts are allowed to have an empty	// post name.	if ( empty($post_name) ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_name = sanitize_title($post_title);		else			$post_name = '';	} else {		$post_name = sanitize_title($post_name);	}	// If the post date is empty (due to having been new or a draft) and status is not 'draft' or 'pending', set date to now	if ( empty($post_date) || '0000-00-00 00:00:00' == $post_date )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) || '0000-00-00 00:00:00' == $post_date_gmt ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_date_gmt = get_gmt_from_date($post_date);		else			$post_date_gmt = '0000-00-00 00:00:00';	}	if ( $update || '0000-00-00 00:00:00' == $post_date ) {		$post_modified     = current_time( 'mysql' );		$post_modified_gmt = current_time( 'mysql', 1 );	} else {		$post_modified     = $post_date;		$post_modified_gmt = $post_date_gmt;	}	if ( 'publish' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) )			$post_status = 'future';	} elseif( 'future' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) )			$post_status = 'publish';	}	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( ! isset($pinged) )		$pinged = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( !empty($post_ID) ) {		if ( $post_parent == $post_ID ) {			// Post can't be its own parent			$post_parent = 0;		} elseif ( !empty($post_parent) ) {			$parent_post = get_post($post_parent);			// Check for circular dependency			if ( isset( $parent_post->post_parent ) && $parent_post->post_parent == $post_ID )				$post_parent = 0;		}	}	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) || 'private' == $post_status )		$post_password = '';	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'guid' ) );	$data = apply_filters('wp_insert_post_data', $data, $postarr);	$data = stripslashes_deep( $data );	$where = array( 'ID' => $post_ID );	if ( $update ) {		do_action( 'pre_post_update', $post_ID );		if ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {			if ( $wp_error )				return new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);			else				return 0;		}	} else {		if ( isset($post_mime_type) )			$data['post_mime_type'] = stripslashes( $post_mime_type ); // This isn't in the update		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		if ( false === $wpdb->insert( $wpdb->posts, $data ) ) {			if ( $wp_error )				return new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);			else				return 0;		}		$post_ID = (int) $wpdb->insert_id;		// use the newly generated $post_ID		$where = array( 'ID' => $post_ID );	}	if ( empty($data['post_name']) && !in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {		$data['post_name'] = sanitize_title($data['post_title'], $post_ID);		$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );	}	if ( is_object_in_taxonomy($post_type, 'category') )		wp_set_post_categories( $post_ID, $post_category );	if ( isset( $tags_input ) && is_object_in_taxonomy($post_type, 'post_tag') )		wp_set_post_tags( $post_ID, $tags_input );	// new-style support for all custom taxonomies	if ( !empty($tax_input) ) {		foreach ( $tax_input as $taxonomy => $tags ) {			$taxonomy_obj = get_taxonomy($taxonomy);			if ( is_array($tags) ) // array = hierarchical, string = non-hierarchical.				$tags = array_filter($tags);			if ( current_user_can($taxonomy_obj->cap->assign_terms) )				wp_set_post_terms( $post_ID, $tags, $taxonomy );		}	}	$current_guid = get_post_field( 'guid', $post_ID );	if ( 'page' == $data['post_type'] )		clean_page_cache($post_ID);	else		clean_post_cache($post_ID);	// Set GUID	if ( !$update && '' == $current_guid )		$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );	$post = get_post($post_ID);	if ( !empty($page_template) && 'page' == $data['post_type'] ) {		$post->page_template = $page_template;		$page_templates = get_page_templates();		if ( 'default' != $page_template && !in_array($page_template, $page_templates) ) {			if ( $wp_error )				return new WP_Error('invalid_page_template', __('The page template is invalid.'));			else				return 0;		}		update_post_meta($post_ID, '_wp_page_template',  $page_template);	}	wp_transition_post_status($data['post_status'], $previous_status, $post);	if ( $update ) {		do_action('edit_post', $post_ID, $post);		$post_after = get_post($post_ID);		do_action( 'post_updated', $post_ID, $post_after, $post_before);	}	do_action('save_post', $post_ID, $post);	do_action('wp_insert_post', $post_ID, $post);	return $post_ID;}/** * Update a post with new post data. * * The date does not have to be set for drafts. You can set the date and it will * not be overridden. * * @since 1.0.0 * * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not. * @return int 0 on failure, Post ID on success. */function wp_update_post($postarr = array()) {	if ( is_object($postarr) ) {		// non-escaped post was passed		$postarr = get_object_vars($postarr);		$postarr = add_magic_quotes($postarr);	}	// First, get all of the original fields	$post = wp_get_single_post($postarr['ID'], ARRAY_A);	// Escape data pulled from DB.	$post = add_magic_quotes($post);	// Passed post category list overwrites existing category list if not empty.	if ( isset($postarr['post_category']) && is_array($postarr['post_category'])			 && 0 != count($postarr['post_category']) )		$post_cats = $postarr['post_category'];	else		$post_cats = $post['post_category'];	// Drafts shouldn't be assigned a date unless explicitly done so by the user	if ( in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&			 ('0000-00-00 00:00:00' == $post['post_date_gmt']) )		$clear_date = true;	else		$clear_date = false;	// Merge old and new fields with new fields overwriting old ones.	$postarr = array_merge($post, $postarr);	$postarr['post_category'] = $post_cats;	if ( $clear_date ) {		$postarr['post_date'] = current_time('mysql');		$postarr['post_date_gmt'] = '';	}	if ($postarr['post_type'] == 'attachment')		return wp_insert_attachment($postarr);	return wp_insert_post($postarr);}/** * Publish a post by transitioning the post status. * * @since 2.1.0 * @uses $wpdb * @uses do_action() Calls 'edit_post', 'save_post', and 'wp_insert_post' on post_id and post data. * * @param int $post_id Post ID. * @return null */function wp_publish_post($post_id) {	global $wpdb;	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'publish' == $post->post_status )		return;	$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post_id ) );	$old_status = $post->post_status;	$post->post_status = 'publish';	wp_transition_post_status('publish', $old_status, $post);	// Update counts for the post's terms.	foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {		$tt_ids = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'tt_ids'));		wp_update_term_count($tt_ids, $taxonomy);	}	do_action('edit_post', $post_id, $post);	do_action('save_post', $post_id, $post);	do_action('wp_insert_post', $post_id, $post);}/** * Publish future post and make sure post ID has future post status. * * Invoked by cron 'publish_future_post' event. This safeguard prevents cron * from publishing drafts, etc. * * @since 2.5.0 * * @param int $post_id Post ID. * @return null Nothing is returned. Which can mean that no action is required or post was published. */function check_and_publish_future_post($post_id) {	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'future' != $post->post_status )		return;	$time = strtotime( $post->post_date_gmt . ' GMT' );	if ( $time > time() ) { // Uh oh, someone jumped the gun!		wp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system		wp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );		return;	}	return wp_publish_post($post_id);}/** * Computes a unique slug for the post, when given the desired slug and some post details. * * @global wpdb $wpdb * @global WP_Rewrite $wp_rewrite * @param string $slug the desired slug (post_name) * @param integer $post_ID * @param string $post_status no uniqueness checks are made if the post is still draft or pending * @param string $post_type * @param integer $post_parent * @return string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix) */function wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {	if ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )		return $slug;	global $wpdb, $wp_rewrite;	$feeds = $wp_rewrite->feeds;	if ( ! is_array( $feeds ) )		$feeds = array();	$hierarchical_post_types = apply_filters( 'hierarchical_post_types', array( 'page' ) );	if ( 'attachment' == $post_type ) {		// Attachment slugs must be unique across all types.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr ($slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare($check_sql, $alt_post_name, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} elseif ( in_array( $post_type, $hierarchical_post_types ) ) {		// Page slugs must be unique within their own trees. Pages are in a separate		// namespace than posts so page slugs are allowed to overlap post slugs.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( '" . implode( "', '", esc_sql( $hierarchical_post_types ) ) . "' ) AND ID != %d AND post_parent = %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID, $post_parent ) );		if ( $post_name_check || in_array( $slug, $feeds ) || preg_match( '@^(page)?\d+$@', $slug ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID, $post_parent ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} else {		// Post slugs must be unique across all posts.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	}	return $slug;}/** * Adds tags to a post. * * @uses wp_set_post_tags() Same first two parameters, but the last parameter is always set to true. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @param int $post_id Post ID * @param string $tags The tags to set for the post, separated by commas. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_add_post_tags($post_id = 0, $tags = '') {	return wp_set_post_tags($post_id, $tags, true);}/** * Set the tags for a post. * * @since 2.3.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {	return wp_set_post_terms( $post_id, $tags, 'post_tag', $append);}/** * Set the terms for a post. * * @since 2.8.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( empty($tags) )		$tags = array();	$tags = is_array($tags) ? $tags : explode( ',', trim($tags, " \n\t\r\0\x0B,") );	// Hierarchical taxonomies must always pass IDs rather than names so that children with the same	// names but different parents aren't confused.	if ( is_taxonomy_hierarchical( $taxonomy ) ) {		$tags = array_map( 'intval', $tags );		$tags = array_unique( $tags );	}	wp_set_object_terms($post_id, $tags, $taxonomy, $append);}/** * Set categories for a post. * * If the post categories parameter is not set, then the default category is * going used. * * @since 2.1.0 * * @param int $post_ID Post ID. * @param array $post_categories Optional. List of categories. * @return bool|mixed */function wp_set_post_categories($post_ID = 0, $post_categories = array()) {	$post_ID = (int) $post_ID;	$post_type = get_post_type( $post_ID );	$post_status = get_post_status( $post_ID );	// If $post_categories isn't already an array, make it one:	if ( !is_array($post_categories) || empty($post_categories) ) {		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_categories = array( get_option('default_category') );		else			$post_categories = array();	} else if ( 1 == count($post_categories) && '' == reset($post_categories) ) {		return true;	}	if ( !empty($post_categories) ) {		$post_categories = array_map('intval', $post_categories);		$post_categories = array_unique($post_categories);	}	return wp_set_object_terms($post_ID, $post_categories, 'category');}/** * Transition the post status of a post. * * Calls hooks to transition post status. * * The first is 'transition_post_status' with new status, old status, and post data. * * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the * post data. * * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status * parameter and POSTTYPE is post_type post data. * * @since 2.3.0 * @link http://codex.wordpress.org/Post_Status_Transitions * * @uses do_action() Calls 'transition_post_status' on $new_status, $old_status and *  $post if there is a status change. * @uses do_action() Calls '${old_status}_to_$new_status' on $post if there is a status change. * @uses do_action() Calls '${new_status}_$post->post_type' on post ID and $post. * * @param string $new_status Transition to this post status. * @param string $old_status Previous post status. * @param object $post Post data. */function wp_transition_post_status($new_status, $old_status, $post) {	do_action('transition_post_status', $new_status, $old_status, $post);	do_action("${old_status}_to_$new_status", $post);	do_action("${new_status}_$post->post_type", $post->ID, $post);}//// Trackback and ping functions///** * Add a URL to those already pung. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @param string $uri Ping URI. * @return int How many rows were updated. */function add_ping($post_id, $uri) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung[] = $uri;	$new = implode("\n", $pung);	$new = apply_filters('add_ping', $new);	// expected_slashed ($new)	$new = stripslashes($new);	return $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post_id ) );}/** * Retrieve enclosures already enclosed for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array List of enclosures */function get_enclosed($post_id) {	$custom_fields = get_post_custom( $post_id );	$pung = array();	if ( !is_array( $custom_fields ) )		return $pung;	foreach ( $custom_fields as $key => $val ) {		if ( 'enclosure' != $key || !is_array( $val ) )			continue;		foreach( $val as $enc ) {			$enclosure = split( "\n", $enc );			$pung[] = trim( $enclosure[ 0 ] );		}	}	$pung = apply_filters('get_enclosed', $pung);	return $pung;}/** * Retrieve URLs already pinged for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array */function get_pung($post_id) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung = apply_filters('get_pung', $pung);	return $pung;}/** * Retrieve URLs that need to be pinged. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID * @return array */function get_to_ping($post_id) {	global $wpdb;	$to_ping = $wpdb->get_var( $wpdb->prepare( "SELECT to_ping FROM $wpdb->posts WHERE ID = %d", $post_id ));	$to_ping = trim($to_ping);	$to_ping = preg_split('/\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);	$to_ping = apply_filters('get_to_ping',  $to_ping);	return $to_ping;}/** * Do trackbacks for a list of URLs. * * @since 1.0.0 * * @param string $tb_list Comma separated list of URLs * @param int $post_id Post ID */function trackback_url_list($tb_list, $post_id) {	if ( ! empty( $tb_list ) ) {		// get post data		$postdata = wp_get_single_post($post_id, ARRAY_A);		// import postdata as variables		extract($postdata, EXTR_SKIP);		// form an excerpt		$excerpt = strip_tags($post_excerpt ? $post_excerpt : $post_content);		if (strlen($excerpt) > 255) {			$excerpt = substr($excerpt,0,252) . '...';		}		$trackback_urls = explode(',', $tb_list);		foreach( (array) $trackback_urls as $tb_url) {			$tb_url = trim($tb_url);			trackback($tb_url, stripslashes($post_title), $excerpt, $post_id);		}	}}//// Page functions///** * Get a list of page IDs. * * @since 2.0.0 * @uses $wpdb * * @return array List of page IDs. */function get_all_page_ids() {	global $wpdb;	if ( ! $page_ids = wp_cache_get('all_page_ids', 'posts') ) {		$page_ids = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'page'");		wp_cache_add('all_page_ids', $page_ids, 'posts');	}	return $page_ids;}/** * Retrieves page data given a page ID or page object. * * @since 1.5.1 * * @param mixed $page Page object or page ID. Passed by reference. * @param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter How the return value should be filtered. * @return mixed Page data. */function &get_page(&$page, $output = OBJECT, $filter = 'raw') {	$p = get_post($page, $output, $filter);	return $p;}/** * Retrieves a page given its path. * * @since 2.1.0 * @uses $wpdb * * @param string $page_path Page path * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed Null when complete. */function get_page_by_path($page_path, $output = OBJECT, $post_type = 'page') {	global $wpdb;	$page_path = rawurlencode(urldecode($page_path));	$page_path = str_replace('%2F', '/', $page_path);	$page_path = str_replace('%20', ' ', $page_path);	$page_paths = '/' . trim($page_path, '/');	$leaf_path  = sanitize_title(basename($page_paths));	$page_paths = explode('/', $page_paths);	$full_path = '';	foreach ( (array) $page_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);	$pages = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_name = %s AND (post_type = %s OR post_type = 'attachment')", $leaf_path, $post_type ));	if ( empty($pages) )		return null;	foreach ( $pages as $page ) {		$path = '/' . $leaf_path;		$curpage = $page;		while ( $curpage->post_parent != 0 ) {			$curpage = $wpdb->get_row( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE ID = %d and post_type = %s", $curpage->post_parent, $post_type ));			$path = '/' . $curpage->post_name . $path;		}		if ( $path == $full_path )			return get_page($page->ID, $output, $post_type);	}	return null;}/** * Retrieve a page given its title. * * @since 2.1.0 * @uses $wpdb * * @param string $page_title Page title * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed */function get_page_by_title($page_title, $output = OBJECT, $post_type = 'page' ) {	global $wpdb;	$page = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_title = %s AND post_type= %s", $page_title, $post_type ) );	if ( $page )		return get_page($page, $output);	return null;}/** * Retrieve child pages from list of pages matching page ID. * * Matches against the pages parameter against the page ID. Also matches all * children for the same to retrieve all children of a page. Does not make any * SQL queries to get the children. * * @since 1.5.1 * * @param int $page_id Page ID. * @param array $pages List of pages' objects. * @return array */function &get_page_children($page_id, $pages) {	$page_list = array();	foreach ( (array) $pages as $page ) {		if ( $page->post_parent == $page_id ) {			$page_list[] = $page;			if ( $children = get_page_children($page->ID, $pages) )				$page_list = array_merge($page_list, $children);		}	}	return $page_list;}/** * Order the pages with children under parents in a flat list. * * It uses auxiliary structure to hold parent-children relationships and * runs in O(N) complexity * * @since 2.0.0 * * @param array $posts Posts array. * @param int $parent Parent page ID. * @return array A list arranged by hierarchy. Children immediately follow their parents. */function &get_page_hierarchy( &$pages, $page_id = 0 ) {	if ( empty( $pages ) ) {		$result = array();		return $result;	}	$children = array();	foreach ( (array) $pages as $p ) {		$parent_id = intval( $p->post_parent );		$children[ $parent_id ][] = $p;	 }	 $result = array();	 _page_traverse_name( $page_id, $children, $result );	return $result;}/** * function to traverse and return all the nested children post names of a root page. * $children contains parent-chilren relations * */function _page_traverse_name( $page_id, &$children, &$result ){	if ( isset( $children[ $page_id ] ) ){		foreach( (array)$children[ $page_id ] as $child ) {			$result[ $child->ID ] = $child->post_name;			_page_traverse_name( $child->ID, $children, $result );		}	}}/** * Builds URI for a page. * * Sub pages will be in the "directory" under the parent page post name. * * @since 1.5.0 * * @param mixed $page Page object or page ID. * @return string Page URI. */function get_page_uri($page) {	if ( ! is_object($page) )		$page = get_page($page);	$uri = $page->post_name;	// A page cannot be it's own parent.	if ( $page->post_parent == $page->ID )		return $uri;	while ($page->post_parent != 0) {		$page = get_page($page->post_parent);		$uri = $page->post_name . "/" . $uri;	}	return $uri;}/** * Retrieve a list of pages. * * The defaults that can be overridden are the following: 'child_of', * 'sort_order', 'sort_column', 'post_title', 'hierarchical', 'exclude', * 'include', 'meta_key', 'meta_value','authors', 'number', and 'offset'. * * @since 1.5.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options that overrides defaults. * @return array List of pages matching defaults or $args */function &get_pages($args = '') {	global $wpdb;	$defaults = array(		'child_of' => 0, 'sort_order' => 'ASC',		'sort_column' => 'post_title', 'hierarchical' => 1,		'exclude' => array(), 'include' => array(),		'meta_key' => '', 'meta_value' => '',		'authors' => '', 'parent' => -1, 'exclude_tree' => '',		'number' => '', 'offset' => 0,		'post_type' => 'page', 'post_status' => 'publish',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$number = (int) $number;	$offset = (int) $offset;	// Make sure the post type is hierarchical	$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );	if ( !in_array( $post_type, $hierarchical_post_types ) )		return false;	// Make sure we have a valid post status	if ( !in_array($post_status, get_post_stati()) )		return false;	$cache = array();	$key = md5( serialize( compact(array_keys($defaults)) ) );	if ( $cache = wp_cache_get( 'get_pages', 'posts' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			$pages = apply_filters('get_pages', $cache[ $key ], $r );			return $pages;		}	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include		$parent = -1;		$exclude = '';		$meta_key = '';		$meta_value = '';		$hierarchical = false;		$incpages = wp_parse_id_list( $include );		if ( ! empty( $incpages ) ) {			foreach ( $incpages as $incpage ) {				if (empty($inclusions))					$inclusions = $wpdb->prepare(' AND ( ID = %d ', $incpage);				else					$inclusions .= $wpdb->prepare(' OR ID = %d ', $incpage);			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$expages = wp_parse_id_list( $exclude );		if ( ! empty( $expages ) ) {			foreach ( $expages as $expage ) {				if (empty($exclusions))					$exclusions = $wpdb->prepare(' AND ( ID <> %d ', $expage);				else					$exclusions .= $wpdb->prepare(' AND ID <> %d ', $expage);			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	$author_query = '';	if (!empty($authors)) {		$post_authors = preg_split('/[\s,]+/',$authors);		if ( ! empty( $post_authors ) ) {			foreach ( $post_authors as $post_author ) {				//Do we have an author id or an author login?				if ( 0 == intval($post_author) ) {					$post_author = get_userdatabylogin($post_author);					if ( empty($post_author) )						continue;					if ( empty($post_author->ID) )						continue;					$post_author = $post_author->ID;				}				if ( '' == $author_query )					$author_query = $wpdb->prepare(' post_author = %d ', $post_author);				else					$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);			}			if ( '' != $author_query )				$author_query = " AND ($author_query)";		}	}	$join = '';	$where = "$exclusions $inclusions ";	if ( ! empty( $meta_key ) || ! empty( $meta_value ) ) {		$join = " LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )";		// meta_key and meta_value might be slashed		$meta_key = stripslashes($meta_key);		$meta_value = stripslashes($meta_value);		if ( ! empty( $meta_key ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s", $meta_key);		if ( ! empty( $meta_value ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_value = %s", $meta_value);	}	if ( $parent >= 0 )		$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);	$where_post_type = $wpdb->prepare( "post_type = '%s' AND post_status = '%s'", $post_type, $post_status );	$query = "SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where ";	$query .= $author_query;	$query .= " ORDER BY " . $sort_column . " " . $sort_order ;	if ( !empty($number) )		$query .= ' LIMIT ' . $offset . ',' . $number;	$pages = $wpdb->get_results($query);	if ( empty($pages) ) {		$pages = apply_filters('get_pages', array(), $r);		return $pages;	}	// Sanitize before caching so it'll only get done once	$num_pages = count($pages);	for ($i = 0; $i < $num_pages; $i++) {		$pages[$i] = sanitize_post($pages[$i], 'raw');	}	// Update cache.	update_page_cache($pages);	if ( $child_of || $hierarchical )		$pages = & get_page_children($child_of, $pages);	if ( !empty($exclude_tree) ) {		$exclude = (int) $exclude_tree;		$children = get_page_children($exclude, $pages);		$excludes = array();		foreach ( $children as $child )			$excludes[] = $child->ID;		$excludes[] = $exclude;		$num_pages = count($pages);		for ( $i = 0; $i < $num_pages; $i++ ) {			if ( in_array($pages[$i]->ID, $excludes) )				unset($pages[$i]);		}	}	$cache[ $key ] = $pages;	wp_cache_set( 'get_pages', $cache, 'posts' );	$pages = apply_filters('get_pages', $pages, $r);	return $pages;}//// Attachment functions///** * Check if the attachment URI is local one and is really an attachment. * * @since 2.0.0 * * @param string $url URL to check * @return bool True on success, false on failure. */function is_local_attachment($url) {	if (strpos($url, home_url()) === false)		return false;	if (strpos($url, home_url('/?attachment_id=')) !== false)		return true;	if ( $id = url_to_postid($url) ) {		$post = & get_post($id);		if ( 'attachment' == $post->post_type )			return true;	}	return false;}/** * Insert an attachment. * * If you set the 'ID' in the $object parameter, it will mean that you are * updating and attempt to update the attachment. You can also set the * attachment name or title by setting the key 'post_name' or 'post_title'. * * You can set the dates for the attachment manually by setting the 'post_date' * and 'post_date_gmt' keys' values. * * By default, the comments will use the default settings for whether the * comments are allowed. You can close them manually or keep them open by * setting the value for the 'comment_status' key. * * The $object parameter can have the following: *     'post_status'   - Default is 'draft'. Can not be overridden, set the same as parent post. *     'post_type'     - Default is 'post', will be set to attachment. Can not override. *     'post_author'   - Default is current user ID. The ID of the user, who added the attachment. *     'ping_status'   - Default is the value in default ping status option. Whether the attachment *                       can accept pings. *     'post_parent'   - Default is 0. Can use $parent parameter or set this for the post it belongs *                       to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Attachment post content filtered. *     'post_excerpt'  - Attachment excerpt. * * @since 2.0.0 * @uses $wpdb * @uses $user_ID * @uses do_action() Calls 'edit_attachment' on $post_ID if this is an update. * @uses do_action() Calls 'add_attachment' on $post_ID if this is not an update. * * @param string|array $object Arguments to override defaults. * @param string $file Optional filename. * @param int $post_parent Parent post ID. * @return int Attachment ID. */function wp_insert_attachment($object, $file = false, $parent = 0) {	global $wpdb, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0);	$object = wp_parse_args($object, $defaults);	if ( !empty($parent) )		$object['post_parent'] = $parent;	$object = sanitize_post($object, 'db');	// export array as variables	extract($object, EXTR_SKIP);	if ( empty($post_author) )		$post_author = $user_ID;	$post_type = 'attachment';	$post_status = 'inherit';	// Make sure we set a valid category.	if ( !isset($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	// Are we updating or creating?	if ( !empty($ID) ) {		$update = true;		$post_ID = (int) $ID;	} else {		$update = false;		$post_ID = 0;	}	// Create a valid post name.	if ( empty($post_name) )		$post_name = sanitize_title($post_title);	else		$post_name = sanitize_title($post_name);	// expected_slashed ($post_name)	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	if ( empty($post_date) )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) )		$post_date_gmt = current_time('mysql', 1);	if ( empty($post_modified) )		$post_modified = $post_date;	if ( empty($post_modified_gmt) )		$post_modified_gmt = $post_date_gmt;	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) )		$post_password = '';	if ( ! isset($pinged) )		$pinged = '';	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' ) );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->posts, $data, array( 'ID' => $post_ID ) );	} else {		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		$wpdb->insert( $wpdb->posts, $data );		$post_ID = (int) $wpdb->insert_id;	}	if ( empty($post_name) ) {		$post_name = sanitize_title($post_title, $post_ID);		$wpdb->update( $wpdb->posts, compact("post_name"), array( 'ID' => $post_ID ) );	}	wp_set_post_categories($post_ID, $post_category);	if ( $file )		update_attached_file( $post_ID, $file );	clean_post_cache($post_ID);	if ( isset($post_parent) && $post_parent < 0 )		add_post_meta($post_ID, '_wp_attachment_temp_parent', $post_parent, true);	if ( $update) {		do_action('edit_attachment', $post_ID);	} else {		do_action('add_attachment', $post_ID);	}	return $post_ID;}/** * Trashes or deletes an attachment. * * When an attachment is permanently deleted, the file will also be removed. * Deletion removes all post meta fields, taxonomy, comments, etc. associated * with the attachment (except the main post). * * The attachment is moved to the trash instead of permanently deleted unless trash * for media is disabled, item is already in the trash, or $force_delete is true. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_attachment' hook on Attachment ID. * * @param int $postid Attachment ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure. Post data on success. */function wp_delete_attachment( $post_id, $force_delete = false ) {	global $wpdb;	if ( !$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) ) )		return $post;	if ( 'attachment' != $post->post_type )		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' != $post->post_status )		return wp_trash_post( $post_id );	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	$meta = wp_get_attachment_metadata( $post_id );	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	$file = get_attached_file( $post_id );	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	do_action('delete_attachment', $post_id);	wp_delete_object_term_relationships($post_id, array('category', 'post_tag'));	wp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->postmeta WHERE meta_key = '_thumbnail_id' AND meta_value = %d", $post_id ));	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id ));	if ( ! empty( $comment_ids ) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $post_id ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $post_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $post_id ));	do_action( 'deleted_post', $post_id );	$uploadpath = wp_upload_dir();	if ( ! empty($meta['thumb']) ) {		// Don't delete the thumb if another attachment uses it		if (! $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d", '%' . $meta['thumb'] . '%', $post_id)) ) {			$thumbfile = str_replace(basename($file), $meta['thumb'], $file);			$thumbfile = apply_filters('wp_delete_file', $thumbfile);			@ unlink( path_join($uploadpath['basedir'], $thumbfile) );		}	}	// remove intermediate and backup images if there are any	foreach ( get_intermediate_image_sizes() as $size ) {		if ( $intermediate = image_get_intermediate_size($post_id, $size) ) {			$intermediate_file = apply_filters('wp_delete_file', $intermediate['path']);			@ unlink( path_join($uploadpath['basedir'], $intermediate_file) );		}	}	if ( is_array($backup_sizes) ) {		foreach ( $backup_sizes as $size ) {			$del_file = path_join( dirname($meta['file']), $size['file'] );			$del_file = apply_filters('wp_delete_file', $del_file);            @ unlink( path_join($uploadpath['basedir'], $del_file) );		}	}	$file = apply_filters('wp_delete_file', $file);	if ( ! empty($file) )		@ unlink($file);	clean_post_cache($post_id);	return $post;}/** * Retrieve attachment meta field for attachment ID. * * @since 2.1.0 * * @param int $post_id Attachment ID * @param bool $unfiltered Optional, default is false. If true, filters are not run. * @return string|bool Attachment meta field. False on failure. */function wp_get_attachment_metadata( $post_id = 0, $unfiltered = false ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );	if ( $unfiltered )		return $data;	return apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );}/** * Update metadata for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @param array $data Attachment data. * @return int */function wp_update_attachment_metadata( $post_id, $data ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID );	return update_post_meta( $post->ID, '_wp_attachment_metadata', $data);}/** * Retrieve the URL for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return string */function wp_get_attachment_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$url = '';	if ( $file = get_post_meta( $post->ID, '_wp_attached_file', true) ) { //Get attached file		if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) { //Get upload directory			if ( 0 === strpos($file, $uploads['basedir']) ) //Check that the upload base exists in the file location				$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file); //replace file location with url location            elseif ( false !== strpos($file, 'wp-content/uploads') )                $url = $uploads['baseurl'] . substr( $file, strpos($file, 'wp-content/uploads') + 18 );            else                $url = $uploads['baseurl'] . "/$file"; //Its a newly uploaded file, therefor $file is relative to the basedir.		}	}	if ( empty($url) ) //If any of the above options failed, Fallback on the GUID as used pre-2.7, not recomended to rely upon this.		$url = get_the_guid( $post->ID );	if ( 'attachment' != $post->post_type || empty($url) )		return false;	return apply_filters( 'wp_get_attachment_url', $url, $post->ID );}/** * Retrieve thumbnail for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return mixed False on failure. Thumbnail file path on success. */function wp_get_attachment_thumb_file( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )		return false;	$file = get_attached_file( $post->ID );	if ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) )		return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );	return false;}/** * Retrieve URL for an attachment thumbnail. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return string|bool False on failure. Thumbnail URL on success. */function wp_get_attachment_thumb_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$url = wp_get_attachment_url( $post->ID ) )		return false;	$sized = image_downsize( $post_id, 'thumbnail' );	if ( $sized )		return $sized[0];	if ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )		return false;	$url = str_replace(basename($url), basename($thumb), $url);	return apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );}/** * Check if the attachment is an image. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return bool */function wp_attachment_is_image( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$file = get_attached_file( $post->ID ) )		return false;	$ext = preg_match('/\.([^.]+)$/', $file, $matches) ? strtolower($matches[1]) : false;	$image_exts = array('jpg', 'jpeg', 'gif', 'png');	if ( 'image/' == substr($post->post_mime_type, 0, 6) || $ext && 'import' == $post->post_mime_type && in_array($ext, $image_exts) )		return true;	return false;}/** * Retrieve the icon for a MIME type. * * @since 2.1.0 * * @param string $mime MIME type * @return string|bool */function wp_mime_type_icon( $mime = 0 ) {	if ( !is_numeric($mime) )		$icon = wp_cache_get("mime_type_icon_$mime");	if ( empty($icon) ) {		$post_id = 0;		$post_mimes = array();		if ( is_numeric($mime) ) {			$mime = (int) $mime;			if ( $post =& get_post( $mime ) ) {				$post_id = (int) $post->ID;				$ext = preg_replace('/^.+?\.([^.]+)$/', '$1', $post->guid);				if ( !empty($ext) ) {					$post_mimes[] = $ext;					if ( $ext_type = wp_ext2type( $ext ) )						$post_mimes[] = $ext_type;				}				$mime = $post->post_mime_type;			} else {				$mime = 0;			}		} else {			$post_mimes[] = $mime;		}		$icon_files = wp_cache_get('icon_files');		if ( !is_array($icon_files) ) {			$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );			$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url('images/crystal') );			$dirs = apply_filters( 'icon_dirs', array($icon_dir => $icon_dir_uri) );			$icon_files = array();			while ( $dirs ) {				$dir = array_shift($keys = array_keys($dirs));				$uri = array_shift($dirs);				if ( $dh = opendir($dir) ) {					while ( false !== $file = readdir($dh) ) {						$file = basename($file);						if ( substr($file, 0, 1) == '.' )							continue;						if ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {							if ( is_dir("$dir/$file") )								$dirs["$dir/$file"] = "$uri/$file";							continue;						}						$icon_files["$dir/$file"] = "$uri/$file";					}					closedir($dh);				}			}			wp_cache_set('icon_files', $icon_files, 600);		}		// Icon basename - extension = MIME wildcard		foreach ( $icon_files as $file => $uri )			$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];		if ( ! empty($mime) ) {			$post_mimes[] = substr($mime, 0, strpos($mime, '/'));			$post_mimes[] = substr($mime, strpos($mime, '/') + 1);			$post_mimes[] = str_replace('/', '_', $mime);		}		$matches = wp_match_mime_types(array_keys($types), $post_mimes);		$matches['default'] = array('default');		foreach ( $matches as $match => $wilds ) {			if ( isset($types[$wilds[0]])) {				$icon = $types[$wilds[0]];				if ( !is_numeric($mime) )					wp_cache_set("mime_type_icon_$mime", $icon);				break;			}		}	}	return apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id ); // Last arg is 0 if function pass mime type.}/** * Checked for changed slugs for published posts and save old slug. * * The function is used along with form POST data. It checks for the wp-old-slug * POST field. Will only be concerned with published posts and the slug actually * changing. * * If the slug was changed and not already part of the old slugs then it will be * added to the post meta field ('_wp_old_slug') for storing old slugs for that * post. * * The most logically usage of this function is redirecting changed posts, so * that those that linked to an changed post will be redirected to the new post. * * @since 2.1.0 * * @param int $post_id Post ID. * @return int Same as $post_id */function wp_check_for_changed_slugs($post_id, $post, $post_before) {	// dont bother if it hasnt changed	if ( $post->post_name == $post_before->post_name )		return;	// we're only concerned with published posts	if ( $post->post_status != 'publish' || $post->post_type != 'post' )		return;	$old_slugs = (array) get_post_meta($post_id, '_wp_old_slug');	// if we haven't added this old slug before, add it now	if ( !in_array($post_before->post_name, $old_slugs) )		add_post_meta($post_id, '_wp_old_slug', $post_before->post_name);	// if the new slug was used previously, delete it from the list	if ( in_array($post->post_name, $old_slugs) )		delete_post_meta($post_id, '_wp_old_slug', $post->post_name);}/** * Retrieve the private post SQL based on capability. * * This function provides a standardized way to appropriately select on the * post_status of posts/pages. The function will return a piece of SQL code that * can be added to a WHERE clause; this SQL is constructed to allow all * published posts, and all private posts to which the user has access. * * It also allows plugins that define their own post type to control the cap by * using the hook 'pub_priv_sql_capability'. The plugin is expected to return * the capability the user must have to read the private post type. * * @since 2.2.0 * * @uses $user_ID * @uses apply_filters() Call 'pub_priv_sql_capability' filter for plugins with different post types. * * @param string $post_type currently only supports 'post' or 'page'. * @return string SQL code that can be added to a where clause. */function get_private_posts_cap_sql($post_type) {	return get_posts_by_author_sql($post_type, FALSE);}/** * Retrieve the post SQL based on capability, author, and type. * * See above for full description. * * @since 3.0.0 * @param string $post_type currently only supports 'post' or 'page'. * @param bool $full Optional.  Returns a full WHERE statement instead of just an 'andalso' term. * @param int $post_author Optional.  Query posts having a single author ID. * @return string SQL WHERE code that can be added to a query. */function get_posts_by_author_sql($post_type, $full = TRUE, $post_author = NULL) {	global $user_ID, $wpdb;	// Private posts	if ($post_type == 'post') {		$cap = 'read_private_posts';	// Private pages	} elseif ($post_type == 'page') {		$cap = 'read_private_pages';	// Dunno what it is, maybe plugins have their own post type?	} else {		$cap = '';		$cap = apply_filters('pub_priv_sql_capability', $cap);		if (empty($cap)) {			// We don't know what it is, filters don't change anything,			// so set the SQL up to return nothing.			return ' 1 = 0 ';		}	}	if ($full) {		if (is_null($post_author)) {			$sql = $wpdb->prepare('WHERE post_type = %s AND ', $post_type);		} else {			$sql = $wpdb->prepare('WHERE post_author = %d AND post_type = %s AND ', $post_author, $post_type);		}	} else {		$sql = '';	}	$sql .= "(post_status = 'publish'";	if (current_user_can($cap)) {		// Does the user have the capability to view private posts? Guess so.		$sql .= " OR post_status = 'private'";	} elseif (is_user_logged_in()) {		// Users can view their own private posts.		$id = (int) $user_ID;		if (is_null($post_author) || !$full) {			$sql .= " OR post_status = 'private' AND post_author = $id";		} elseif ($id == (int)$post_author) {			$sql .= " OR post_status = 'private'";		} // else none	} // else none	$sql .= ')';	return $sql;}/** * Retrieve the date that the last post was published. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is the date when the last post was posted. The * 'gmt' is when the last post was posted in GMT formatted date. * * @since 0.71 * * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostdate' filter * * @global mixed $cache_lastpostdate Stores the last post date * @global mixed $pagenow The current page being viewed * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date of the last post. */function get_lastpostdate($timezone = 'server') {	global $cache_lastpostdate, $wpdb, $blog_id;	$add_seconds_server = date('Z');	if ( !isset($cache_lastpostdate[$blog_id][$timezone]) ) {		switch(strtolower($timezone)) {			case 'gmt':				$lastpostdate = $wpdb->get_var("SELECT post_date_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'blog':				$lastpostdate = $wpdb->get_var("SELECT post_date FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'server':				$lastpostdate = $wpdb->get_var("SELECT DATE_ADD(post_date_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;		}		$cache_lastpostdate[$blog_id][$timezone] = $lastpostdate;	} else {		$lastpostdate = $cache_lastpostdate[$blog_id][$timezone];	}	return apply_filters( 'get_lastpostdate', $lastpostdate, $timezone );}/** * Retrieve last post modified date depending on timezone. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is just when the last post was modified. The * 'gmt' is when the last post was modified in GMT time. * * @since 1.2.0 * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostmodified' filter * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date the post was last modified. */function get_lastpostmodified($timezone = 'server') {	global $wpdb;	$add_seconds_server = date('Z');	$timezone = strtolower( $timezone );	$lastpostmodified = wp_cache_get( "lastpostmodified:$timezone", 'timeinfo' );	if ( $lastpostmodified )		return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );	switch ( strtolower($timezone) ) {		case 'gmt':			$lastpostmodified = $wpdb->get_var("SELECT post_modified_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'blog':			$lastpostmodified = $wpdb->get_var("SELECT post_modified FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'server':			$lastpostmodified = $wpdb->get_var("SELECT DATE_ADD(post_modified_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;	}	$lastpostdate = get_lastpostdate($timezone);	if ( $lastpostdate > $lastpostmodified )		$lastpostmodified = $lastpostdate;	if ( $lastpostmodified )		wp_cache_set( "lastpostmodified:$timezone", $lastpostmodified, 'timeinfo' );	return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );}/** * Updates posts in cache. * * @usedby update_page_cache() Aliased by this function. * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $posts Array of post objects */function update_post_cache(&$posts) {	if ( !$posts )		return;	foreach ( $posts as $post )		wp_cache_add($post->ID, $post, 'posts');}/** * Will clean the post in the cache. * * Cleaning means delete from the cache of the post. Will call to clean the term * object cache associated with the post ID. * * clean_post_cache() will call itself recursively for each child post. * * This function not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Calls 'clean_post_cache' on $id before adding children (if any). * * @param int $id The Post ID in the cache to clean */function clean_post_cache($id) {	global $_wp_suspend_cache_invalidation, $wpdb;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	clean_object_term_cache($id, 'post');	wp_cache_delete( 'wp_get_archives', 'general' );	do_action('clean_post_cache', $id);	if ( $children = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d", $id) ) ) {		foreach( $children as $cid )			clean_post_cache( $cid );	}	if ( is_multisite() )		wp_cache_delete( $wpdb->blogid . '-' . $id, 'global-posts' );}/** * Alias of update_post_cache(). * * @see update_post_cache() Posts and pages are the same, alias is intentional * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $pages list of page objects */function update_page_cache(&$pages) {	update_post_cache($pages);}/** * Will clean the page in the cache. * * Clean (read: delete) page from cache that matches $id. Will also clean cache * associated with 'all_page_ids' and 'get_pages'. * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Will call the 'clean_page_cache' hook action. * * @param int $id Page ID to clean */function clean_page_cache($id) {	clean_post_cache($id);	wp_cache_delete( 'all_page_ids', 'posts' );	wp_cache_delete( 'get_pages', 'posts' );	do_action('clean_page_cache', $id);}/** * Call major cache updating functions for list of Post objects. * * @package WordPress * @subpackage Cache * @since 1.5.0 * * @uses $wpdb * @uses update_post_cache() * @uses update_object_term_cache() * @uses update_postmeta_cache() * * @param array $posts Array of Post objects * @param string $post_type The post type of the posts in $posts. Default is 'post'. * @param bool $update_term_cache Whether to update the term cache. Default is true. * @param bool $update_meta_cache Whether to update the meta cache. Default is true. */function update_post_caches(&$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true) {	// No point in doing all this work if we didn't match any posts.	if ( !$posts )		return;	update_post_cache($posts);	$post_ids = array();	foreach ( $posts as $post )		$post_ids[] = $post->ID;	if ( empty($post_type) )		$post_type = 'post';	if ( !is_array($post_type) && 'any' != $post_type && $update_term_cache )		update_object_term_cache($post_ids, $post_type);	if ( $update_meta_cache )		update_postmeta_cache($post_ids);}/** * Updates metadata cache for list of post IDs. * * Performs SQL query to retrieve the metadata for the post IDs and updates the * metadata cache for the posts. Therefore, the functions, which call this * function, do not need to perform SQL queries on their own. * * @package WordPress * @subpackage Cache * @since 2.1.0 * * @uses $wpdb * * @param array $post_ids List of post IDs. * @return bool|array Returns false if there is nothing to update or an array of metadata. */function update_postmeta_cache($post_ids) {	return update_meta_cache('post', $post_ids);}/** * Will clean the attachment in the cache. * * Cleaning means delete from the cache. Optionaly will clean the term * object cache associated with the attachment ID. * * This function will not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 3.0.0 * * @uses do_action() Calls 'clean_attachment_cache' on $id. * * @param int $id The attachment ID in the cache to clean * @param bool $clean_terms optional. Whether to clean terms cache */function clean_attachment_cache($id, $clean_terms = false) {	global $_wp_suspend_cache_invalidation;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	if ( $clean_terms )		clean_object_term_cache($id, 'attachment');	do_action('clean_attachment_cache', $id);}//// Hooks///** * Hook for managing future post transitions to published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses do_action() Calls 'private_to_published' on post ID if this is a 'private_to_published' call. * @uses wp_clear_scheduled_hook() with 'publish_future_post' and post ID. * * @param string $new_status New post status * @param string $old_status Previous post status * @param object $post Object type containing the post information */function _transition_post_status($new_status, $old_status, $post) {	global $wpdb;	if ( $old_status != 'publish' && $new_status == 'publish' ) {		// Reset GUID if transitioning to publish and it is empty		if ( '' == get_the_guid($post->ID) )			$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );		do_action('private_to_published', $post->ID);  // Deprecated, use private_to_publish	}	// If published posts changed clear the lastpostmodified cache	if ( 'publish' == $new_status || 'publish' == $old_status) {		wp_cache_delete( 'lastpostmodified:server', 'timeinfo' );		wp_cache_delete( 'lastpostmodified:gmt',    'timeinfo' );		wp_cache_delete( 'lastpostmodified:blog',   'timeinfo' );	}	// Always clears the hook in case the post status bounced from future to draft.	wp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );}/** * Hook used to schedule publication for a post marked for the future. * * The $post properties used and must exist are 'ID' and 'post_date_gmt'. * * @since 2.3.0 * @access private * * @param int $deprecated Not used. Can be set to null. Never implemented. *   Not marked as deprecated with _deprecated_argument() as it conflicts with *   wp_transition_post_status() and the default filter for _future_post_hook(). * @param object $post Object type containing the post information */function _future_post_hook( $deprecated = '', $post ) {	wp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );	wp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );}/** * Hook to schedule pings and enclosures when a post is published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses XMLRPC_REQUEST and APP_REQUEST constants. * @uses do_action() Calls 'xmlprc_publish_post' on post ID if XMLRPC_REQUEST is defined. * @uses do_action() Calls 'app_publish_post' on post ID if APP_REQUEST is defined. * * @param int $post_id The ID in the database table of the post being published */function _publish_post_hook($post_id) {	global $wpdb;	if ( defined('XMLRPC_REQUEST') )		do_action('xmlrpc_publish_post', $post_id);	if ( defined('APP_REQUEST') )		do_action('app_publish_post', $post_id);	if ( defined('WP_IMPORTING') )		return;	$data = array( 'post_id' => $post_id, 'meta_value' => '1' );	if ( get_option('default_pingback_flag') ) {		$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_pingme' ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_pingme', 1 );	}	$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_encloseme' ) );	do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_encloseme', 1 );	wp_schedule_single_event(time(), 'do_pings');}/** * Hook used to prevent page/post cache and rewrite rules from staying dirty. * * Does two things. If the post is a page and has a template then it will * update/add that template to the meta. For both pages and posts, it will clean * the post cache to make sure that the cache updates to the changes done * recently. For pages, the rewrite rules of WordPress are flushed to allow for * any changes. * * The $post parameter, only uses 'post_type' property and 'page_template' * property. * * @since 2.3.0 * @access private * @uses $wp_rewrite Flushes Rewrite Rules. * * @param int $post_id The ID in the database table for the $post * @param object $post Object type containing the post information */function _save_post_hook($post_id, $post) {	if ( $post->post_type == 'page' ) {		clean_page_cache($post_id);		// Avoid flushing rules for every post during import.		if ( !defined('WP_IMPORTING') ) {			global $wp_rewrite;			$wp_rewrite->flush_rules(false);		}	} else {		clean_post_cache($post_id);	}}/** * Retrieve post ancestors and append to post ancestors property. * * Will only retrieve ancestors once, if property is already set, then nothing * will be done. If there is not a parent post, or post ID and post parent ID * are the same then nothing will be done. * * The parameter is passed by reference, so nothing needs to be returned. The * property will be updated and can be referenced after the function is * complete. The post parent will be an ancestor and the parent of the post * parent will be an ancestor. There will only be two ancestors at the most. * * @since unknown * @access private * @uses $wpdb * * @param object $_post Post data. * @return null When nothing needs to be done. */function _get_post_ancestors(&$_post) {	global $wpdb;	if ( isset($_post->ancestors) )		return;	$_post->ancestors = array();	if ( empty($_post->post_parent) || $_post->ID == $_post->post_parent )		return;	$id = $_post->ancestors[] = $_post->post_parent;	while ( $ancestor = $wpdb->get_var( $wpdb->prepare("SELECT `post_parent` FROM $wpdb->posts WHERE ID = %d LIMIT 1", $id) ) ) {		if ( $id == $ancestor )			break;		$id = $_post->ancestors[] = $ancestor;	}}/** * Determines which fields of posts are to be saved in revisions. * * Does two things. If passed a post *array*, it will return a post array ready * to be insterted into the posts table as a post revision. Otherwise, returns * an array whose keys are the post fields to be saved for post revisions. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * @access private * @uses apply_filters() Calls '_wp_post_revision_fields' on 'title', 'content' and 'excerpt' fields. * * @param array $post Optional a post array to be processed for insertion as a post revision. * @param bool $autosave optional Is the revision an autosave? * @return array Post array ready to be inserted as a post revision or array of fields that can be versioned. */function _wp_post_revision_fields( $post = null, $autosave = false ) {	static $fields = false;	if ( !$fields ) {		// Allow these to be versioned		$fields = array(			'post_title' => __( 'Title' ),			'post_content' => __( 'Content' ),			'post_excerpt' => __( 'Excerpt' ),		);		// Runs only once		$fields = apply_filters( '_wp_post_revision_fields', $fields );		// WP uses these internally either in versioning or elsewhere - they cannot be versioned		foreach ( array( 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', 'post_author' ) as $protect )			unset( $fields[$protect] );	}	if ( !is_array($post) )		return $fields;	$return = array();	foreach ( array_intersect( array_keys( $post ), array_keys( $fields ) ) as $field )		$return[$field] = $post[$field];	$return['post_parent']   = $post['ID'];	$return['post_status']   = 'inherit';	$return['post_type']     = 'revision';	$return['post_name']     = $autosave ? "$post[ID]-autosave" : "$post[ID]-revision";	$return['post_date']     = isset($post['post_modified']) ? $post['post_modified'] : '';	$return['post_date_gmt'] = isset($post['post_modified_gmt']) ? $post['post_modified_gmt'] : '';	return $return;}/** * Saves an already existing post as a post revision. * * Typically used immediately prior to post updates. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_put_post_revision() * * @param int $post_id The ID of the post to save as a revision. * @return mixed Null or 0 if error, new revision ID, if success. */function wp_save_post_revision( $post_id ) {	// We do autosaves manually with wp_create_post_autosave()	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )		return;	// WP_POST_REVISIONS = 0, false	if ( ! WP_POST_REVISIONS )		return;	if ( !$post = get_post( $post_id, ARRAY_A ) )		return;	if ( !post_type_supports($post['post_type'], 'revisions') )		return;	$return = _wp_put_post_revision( $post );	// WP_POST_REVISIONS = true (default), -1	if ( !is_numeric( WP_POST_REVISIONS ) || WP_POST_REVISIONS < 0 )		return $return;	// all revisions and (possibly) one autosave	$revisions = wp_get_post_revisions( $post_id, array( 'order' => 'ASC' ) );	// WP_POST_REVISIONS = (int) (# of autosaves to save)	$delete = count($revisions) - WP_POST_REVISIONS;	if ( $delete < 1 )		return $return;	$revisions = array_slice( $revisions, 0, $delete );	for ( $i = 0; isset($revisions[$i]); $i++ ) {		if ( false !== strpos( $revisions[$i]->post_name, 'autosave' ) )			continue;		wp_delete_post_revision( $revisions[$i]->ID );	}	return $return;}/** * Retrieve the autosaved data of the specified post. * * Returns a post object containing the information that was autosaved for the * specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int $post_id The post ID. * @return object|bool The autosaved data or false on failure or when no autosave exists. */function wp_get_post_autosave( $post_id ) {	if ( !$post = get_post( $post_id ) )		return false;	$q = array(		'name' => "{$post->ID}-autosave",		'post_parent' => $post->ID,		'post_type' => 'revision',		'post_status' => 'inherit'	);	// Use WP_Query so that the result gets cached	$autosave_query = new WP_Query;	add_action( 'parse_query', '_wp_get_post_autosave_hack' );	$autosave = $autosave_query->query( $q );	remove_action( 'parse_query', '_wp_get_post_autosave_hack' );	if ( $autosave && is_array($autosave) && is_object($autosave[0]) )		return $autosave[0];	return false;}/** * Internally used to hack WP_Query into submission. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param object $query WP_Query object */function _wp_get_post_autosave_hack( $query ) {	$query->is_single = false;}/** * Determines if the specified post is a revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of revision's parent otherwise. */function wp_is_post_revision( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	return (int) $post->post_parent;}/** * Determines if the specified post is an autosave. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of autosave's parent otherwise */function wp_is_post_autosave( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	if ( "{$post->post_parent}-autosave" !== $post->post_name )		return false;	return (int) $post->post_parent;}/** * Inserts post data into the posts table as a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_insert_post() * * @param int|object|array $post Post ID, post object OR post array. * @param bool $autosave Optional. Is the revision an autosave? * @return mixed Null or 0 if error, new revision ID if success. */function _wp_put_post_revision( $post = null, $autosave = false ) {	if ( is_object($post) )		$post = get_object_vars( $post );	elseif ( !is_array($post) )		$post = get_post($post, ARRAY_A);	if ( !$post || empty($post['ID']) )		return;	if ( isset($post['post_type']) && 'revision' == $post['post_type'] )		return new WP_Error( 'post_type', __( 'Cannot create a revision of a revision' ) );	$post = _wp_post_revision_fields( $post, $autosave );	$post = add_magic_quotes($post); //since data is from db	$revision_id = wp_insert_post( $post );	if ( is_wp_error($revision_id) )		return $revision_id;	if ( $revision_id )		do_action( '_wp_put_post_revision', $revision_id );	return $revision_id;}/** * Gets a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_post() * * @param int|object $post Post ID or post object * @param string $output Optional. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional sanitation filter.  @see sanitize_post() * @return mixed Null if error or post object if success */function &wp_get_post_revision(&$post, $output = OBJECT, $filter = 'raw') {	$null = null;	if ( !$revision = get_post( $post, OBJECT, $filter ) )		return $revision;	if ( 'revision' !== $revision->post_type )		return $null;	if ( $output == OBJECT ) {		return $revision;	} elseif ( $output == ARRAY_A ) {		$_revision = get_object_vars($revision);		return $_revision;	} elseif ( $output == ARRAY_N ) {		$_revision = array_values(get_object_vars($revision));		return $_revision;	}	return $revision;}/** * Restores a post to the specified revision. * * Can restore a past revision using all fields of the post revision, or only selected fields. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_update_post() * @uses do_action() Calls 'wp_restore_post_revision' on post ID and revision ID if wp_update_post() *  is successful. * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from. Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_restore_post_revision( $revision_id, $fields = null ) {	if ( !$revision = wp_get_post_revision( $revision_id, ARRAY_A ) )		return $revision;	if ( !is_array( $fields ) )		$fields = array_keys( _wp_post_revision_fields() );	$update = array();	foreach( array_intersect( array_keys( $revision ), $fields ) as $field )		$update[$field] = $revision[$field];	if ( !$update )		return false;	$update['ID'] = $revision['post_parent'];	$update = add_magic_quotes( $update ); //since data is from db	$post_id = wp_update_post( $update );	if ( is_wp_error( $post_id ) )		return $post_id;	if ( $post_id )		do_action( 'wp_restore_post_revision', $post_id, $revision['ID'] );	return $post_id;}/** * Deletes a revision. * * Deletes the row from the posts table corresponding to the specified revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_delete_post() * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from.  Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_delete_post_revision( $revision_id ) {	if ( !$revision = wp_get_post_revision( $revision_id ) )		return $revision;	$delete = wp_delete_post( $revision->ID );	if ( is_wp_error( $delete ) )		return $delete;	if ( $delete )		do_action( 'wp_delete_post_revision', $revision->ID, $revision );	return $delete;}/** * Returns all revisions of specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_children() * * @param int|object $post_id Post ID or post object * @return array empty if no revisions */function wp_get_post_revisions( $post_id = 0, $args = null ) {	if ( ! WP_POST_REVISIONS )		return array();	if ( ( !$post = get_post( $post_id ) ) || empty( $post->ID ) )		return array();	$defaults = array( 'order' => 'DESC', 'orderby' => 'date' );	$args = wp_parse_args( $args, $defaults );	$args = array_merge( $args, array( 'post_parent' => $post->ID, 'post_type' => 'revision', 'post_status' => 'inherit' ) );	if ( !$revisions = get_children( $args ) )		return array();	return $revisions;}function _set_preview($post) {	if ( ! is_object($post) )		return $post;	$preview = wp_get_post_autosave($post->ID);	if ( ! is_object($preview) )		return $post;	$preview = sanitize_post($preview);	$post->post_content = $preview->post_content;	$post->post_title = $preview->post_title;	$post->post_excerpt = $preview->post_excerpt;	return $post;}function _show_post_preview() {	if ( isset($_GET['preview_id']) && isset($_GET['preview_nonce']) ) {		$id = (int) $_GET['preview_id'];		if ( false == wp_verify_nonce( $_GET['preview_nonce'], 'post_preview_' . $id ) )			wp_die( __('You do not have permission to preview drafts.') );		add_filter('the_preview', '_set_preview');	}}
<?php/** * Update Core administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('update_plugins') )	wp_die(__('You do not have sufficient permissions to update plugins for this site.'));function list_core_update( $update ) {	global $wp_local_package, $wpdb;	$version_string = ('en_US' == $update->locale && 'en_US' == get_locale() ) ?			$update->current : sprintf("%s&ndash;<strong>%s</strong>", $update->current, $update->locale);	$current = false;	if ( !isset($update->response) || 'latest' == $update->response )		$current = true;	$submit = __('Update Automatically');	$form_action = 'update-core.php?action=do-core-upgrade';	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$show_buttons = true;	if ( 'development' == $update->response ) {		$message = __('You are using a development version of WordPress.  You can update to the latest nightly build automatically or download the nightly build and install it manually:');		$download = __('Download nightly build');	} else {		if ( $current ) {			$message = sprintf(__('You have the latest version of WordPress. You do not need to update. However, if you want to re-install version %s, you can do so automatically or download the package and re-install manually:'), $version_string);			$submit = __('Re-install Automatically');			$form_action = 'update-core.php?action=do-core-reinstall';		} else {			$php_compat     = version_compare( $php_version, $update->php_version, '>=' );			$mysql_compat   = version_compare( $mysql_version, $update->mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );			if ( !$mysql_compat && !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $update->current, $update->php_version, $update->mysql_version, $php_version, $mysql_version );			elseif ( !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $update->current, $update->php_version, $php_version );			elseif ( !$mysql_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $update->current, $update->mysql_version, $mysql_version );			else				$message = 	sprintf(__('You can update to <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> automatically or download the package and install it manually:'), $version_string);			if ( !$mysql_compat || !$php_compat )				$show_buttons = false;		}		$download = sprintf(__('Download %s'), $version_string);	}	echo '<p>';	echo $message;	echo '</p>';	echo '<form method="post" action="' . $form_action . '" name="upgrade" class="upgrade">';	wp_nonce_field('upgrade-core');	echo '<p>';	echo '<input name="version" value="'. esc_attr($update->current) .'" type="hidden"/>';	echo '<input name="locale" value="'. esc_attr($update->locale) .'" type="hidden"/>';	if ( $show_buttons ) {		echo '<input id="upgrade" class="button" type="submit" value="' . esc_attr($submit) . '" name="upgrade" />&nbsp;';		echo '<a href="' . esc_url($update->package) . '" class="button">' . $download . '</a>&nbsp;';	}	if ( 'en_US' != $update->locale )		if ( !isset( $update->dismissed ) || !$update->dismissed )			echo '<input id="dismiss" class="button" type="submit" value="' . esc_attr__('Hide this update') . '" name="dismiss" />';		else			echo '<input id="undismiss" class="button" type="submit" value="' . esc_attr__('Bring back this update') . '" name="undismiss" />';	echo '</p>';	if ( 'en_US' != $update->locale && ( !isset($wp_local_package) || $wp_local_package != $update->locale ) )	    echo '<p class="hint">'.__('This localized version contains both the translation and various other localization fixes. You can skip upgrading if you want to keep your current translation.').'</p>';	else if ( 'en_US' == $update->locale && get_locale() != 'en_US' ) {	    echo '<p class="hint">'.sprintf( __('You are about to install WordPress %s <strong>in English.</strong> There is a chance this upgrade will break your translation. You may prefer to wait for the localized version to be released.'), $update->current ).'</p>';	}	echo '</form>';}function dismissed_updates() {	$dismissed = get_core_updates( array( 'dismissed' => true, 'available' => false ) );	if ( $dismissed ) {		$show_text = esc_js(__('Show hidden updates'));		$hide_text = esc_js(__('Hide hidden updates'));	?>	<script type="text/javascript">		jQuery(function($) {			$('dismissed-updates').show();			$('#show-dismissed').toggle(function(){$(this).text('<?php echo $hide_text; ?>');}, function() {$(this).text('<?php echo $show_text; ?>')});			$('#show-dismissed').click(function() { $('#dismissed-updates').toggle('slow');});		});	</script>	<?php		echo '<p class="hide-if-no-js"><a id="show-dismissed" href="#">'.__('Show hidden updates').'</a></p>';		echo '<ul id="dismissed-updates" class="core-updates dismissed">';		foreach( (array) $dismissed as $update) {			echo '<li>';			list_core_update( $update );			echo '</li>';		}		echo '</ul>';	}}/** * Display upgrade WordPress for downloading latest or upgrading automatically form. * * @since 2.7 * * @return null */function core_upgrade_preamble() {	global $upgrade_error;	$updates = get_core_updates();?>	<div class="wrap">	<?php screen_icon('tools'); ?>	<h2><?php _e('WordPress Updates'); ?></h2><?php	if ( $upgrade_error ) {		echo '<div class="error"><p>';		_e('Please select one or more plugins to upgrade.');		echo '</p></div>';	}	if ( !isset($updates[0]->response) || 'latest' == $updates[0]->response ) {		echo '<h3>';		_e('You have the latest version of WordPress.');		echo '</h3>';	} else {		echo '<div class="updated"><p>';		_e('<strong>Important:</strong> before updating, please <a href="http://codex.wordpress.org/WordPress_Backups">backup your database and files</a>. For help with updates, visit the <a href="http://codex.wordpress.org/Updating_WordPress">Updating WordPress</a> Codex page.');		echo '</p></div>';		echo '<h3 class="response">';		_e( 'An updated version of WordPress is available.' );		echo '</h3>';	}	echo '<ul class="core-updates">';	$alternate = true;	foreach( (array) $updates as $update ) {		$class = $alternate? ' class="alternate"' : '';		$alternate = !$alternate;		echo "<li $class>";		list_core_update( $update );		echo '</li>';	}	echo '</ul>';	echo '<p>' . __( 'While your site is being updated, it will be in maintenance mode. As soon as your updates are complete, your site will return to normal.' ) . '</p>';	dismissed_updates();	list_plugin_updates();	list_theme_updates();	do_action('core_upgrade_preamble');	echo '</div>';}function list_plugin_updates() {	global $wp_version;	$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);	require_once(ABSPATH . 'wp-admin/includes/plugin-install.php');	$plugins = get_plugin_updates();	if ( empty( $plugins ) ) {		echo '<h3>' . __( 'Plugins' ) . '</h3>';		echo '<p>' . __( 'Your plugins are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-plugin-upgrade';	$core_updates = get_core_updates();	if ( !isset($core_updates[0]->response) || 'latest' == $core_updates[0]->response || 'development' == $core_updates[0]->response || version_compare( $core_updates[0]->current, $cur_wp_version, '=') )		$core_update_version = false;	else		$core_update_version = $core_updates[0]->current;	?><h3><?php _e( 'Plugins' ); ?></h3><p><?php _e( 'The following plugins have new versions available. Check the ones you want to update and then click &#8220;Update Plugins&#8221;.' ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-plugins" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-plugins" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $plugins as $plugin_file => $plugin_data) {		$info = plugins_api('plugin_information', array('slug' => $plugin_data->update->slug ));		// Get plugin compat for running version of WordPress.		if ( isset($info->tested) && version_compare($info->tested, $cur_wp_version, '>=') ) {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: 100%% (according to its author)'), $cur_wp_version);		} elseif ( isset($info->compatibility[$cur_wp_version][$plugin_data->update->new_version]) ) {			$compat = $info->compatibility[$cur_wp_version][$plugin_data->update->new_version];			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $cur_wp_version, $compat[0], $compat[2], $compat[1]);		} else {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $cur_wp_version);		}		// Get plugin compat for updated version of WordPress.		if ( $core_update_version ) {			if ( isset($info->compatibility[$core_update_version][$plugin_data->update->new_version]) ) {				$update_compat = $info->compatibility[$core_update_version][$plugin_data->update->new_version];				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $core_update_version, $update_compat[0], $update_compat[2], $update_compat[1]);			} else {				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $core_update_version);			}		}		// Get the upgrade notice for the new plugin version.		if ( isset($plugin_data->update->upgrade_notice) ) {			$upgrade_notice = '<br />' . strip_tags($plugin_data->update->upgrade_notice);		} else {			$upgrade_notice = '';		}		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' /></th>		<td class='plugin-title'><strong>{$plugin_data->Name}</strong>" . sprintf(__('You have version %1$s installed. Update to %2$s.'), $plugin_data->Version, $plugin_data->update->new_version) . $compat . $upgrade_notice . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-plugins-2" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p></form><?php}function list_theme_updates() {	$themes = get_theme_updates();	if ( empty( $themes ) ) {		echo '<h3>' . __( 'Themes' ) . '</h3>';		echo '<p>' . __( 'Your themes are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-theme-upgrade';?><h3><?php _e( 'Themes' ); ?></h3><p><?php _e( 'The following themes have new versions available. Check the ones you want to update and then click &#8220;Update Themes&#8221;.' ); ?></p><p><?php printf( __('<strong>Please Note:</strong> Any customizations you have made to the Themes files will be lost. Please consider using <a href="%s">child themes</a> for modifications.'), _x('http://codex.wordpress.org/Child_Themes', 'Link used in suggestion to use child themes in GUU') ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-themes" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-themes" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-themes-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $themes as $stylesheet => $theme_data) {		$screenshot = $theme_data->{'Theme Root URI'} . '/' . $stylesheet . '/' . $theme_data->Screenshot;		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($stylesheet) . "' /></th>		<td class='plugin-title'><img src='$screenshot' width='64' height='64' style='float:left; padding: 5px' /><strong>{$theme_data->Name}</strong>" .  sprintf(__('You have version %1$s installed. Update to %2$s.'), $theme_data->Version, $theme_data->update['new_version']) . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-themes-2" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p></form><?php}/** * Upgrade WordPress core display. * * @since 2.7 * * @return null */function do_core_upgrade( $reinstall = false ) {	global $wp_filesystem;	if ( $reinstall )		$url = 'update-core.php?action=do-core-reinstall';	else		$url = 'update-core.php?action=do-core-upgrade';	$url = wp_nonce_url($url, 'upgrade-core');	if ( false === ($credentials = request_filesystem_credentials($url, '', false, ABSPATH)) )		return;	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	if ( ! WP_Filesystem($credentials, ABSPATH) ) {		request_filesystem_credentials($url, '', true, ABSPATH); //Failed to connect, Error and request again		return;	}?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e('Update WordPress'); ?></h2><?php	if ( $wp_filesystem->errors->get_error_code() ) {		foreach ( $wp_filesystem->errors->get_error_messages() as $message )			show_message($message);		echo '</div>';		return;	}	if ( $reinstall )		$update->response = 'reinstall';	$result = wp_update_core($update, 'show_message');	if ( is_wp_error($result) ) {		show_message($result);		if ('up_to_date' != $result->get_error_code() )			show_message( __('Installation Failed') );	} else {		show_message( __('WordPress updated successfully') );		show_message( '<strong>' . __('Actions:') . '</strong> <a href="' . esc_url( admin_url() ) . '">' . __('Go to Dashboard') . '</a>' );	}	echo '</div>';}function do_dismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	dismiss_core_update( $update );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function do_undismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	undismiss_core_update( $version, $locale );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function no_update_actions($actions) {	return '';}$action = isset($_GET['action']) ? $_GET['action'] : 'upgrade-core';$upgrade_error = false;if ( 'do-plugin-upgrade' == $action && !isset($_GET['plugins']) && !isset($_POST['checked']) ) {	$upgrade_error = true;	$action = 'upgrade-core';}$title = __('WordPress Updates');$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen lets you update to the latest version of WordPress as well as update your themes and plugins from the WordPress.org repository. When updates are available, the number of available updates will appear in a bubble on the left hand menu as a notification. It is very important to keep your WordPress installation up to date for security reasons, so when you see a number appear, make sure you take the time to update, which is an easy process.') . '</p>' .	'<p>' . __('Updating your WordPress installation is a simple one-click procedure; just click on the Update button when it says a new version is available.') . '</p>' .	'<p>' . __('To upgrade themes or plugins from this screen, use the checkboxes to make your selection and click on the appropriate Update button. Check the box at the top of the Themes or Plugins section to select all and update them all at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_Updates_SubPanel" target="_blank">Documentation on Updating WordPress</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( 'upgrade-core' == $action ) {	wp_version_check();	require_once('./admin-header.php');	core_upgrade_preamble();} elseif ( 'do-core-upgrade' == $action || 'do-core-reinstall' == $action ) {	check_admin_referer('upgrade-core');	// do the (un)dismiss actions before headers,	// so that they can redirect	if ( isset( $_POST['dismiss'] ) )		do_dismiss_core_update();	elseif ( isset( $_POST['undismiss'] ) )		do_undismiss_core_update();	require_once('./admin-header.php');	if ( 'do-core-reinstall' == $action )		$reinstall = true;	else		$reinstall = false;	if ( isset( $_POST['upgrade'] ) )		do_core_upgrade($reinstall);} elseif ( 'do-plugin-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['plugins'] ) ) {		$plugins = explode( ',', $_GET['plugins'] );	} elseif ( isset( $_POST['checked'] ) ) {		$plugins = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected&plugins=' . urlencode(implode(',', $plugins));	$url = wp_nonce_url($url, 'bulk-update-plugins');	$title = __('Update Plugins');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('plugins');	echo '<h2>' . esc_html__('Update Plugins') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';} elseif ( 'do-theme-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['themes'] ) ) {		$themes = explode( ',', $_GET['themes'] );	} elseif ( isset( $_POST['checked'] ) ) {		$themes = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected-themes&themes=' . urlencode(implode(',', $themes));	$url = wp_nonce_url($url, 'bulk-update-themes');	$title = __('Update Themes');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('themes');	echo '<h2>' . esc_html__('Update Themes') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';}include('./admin-footer.php');
<?php/** * Theme, template, and stylesheet functions. * * @package WordPress * @subpackage Template *//** * Whether a child theme is in use. * * @since 3.0.0 * * @return bool true if a child theme is in use, false otherwise. **/function is_child_theme() {	return ( TEMPLATEPATH !== STYLESHEETPATH );}/** * Retrieve name of the current stylesheet. * * The theme name that the administrator has currently set the front end theme * as. * * For all extensive purposes, the template name and the stylesheet name are * going to be the same for most cases. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet' filter on stylesheet name. * * @return string Stylesheet name. */function get_stylesheet() {	return apply_filters('stylesheet', get_option('stylesheet'));}/** * Retrieve stylesheet directory path for current theme. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet_directory' filter on stylesheet directory and theme name. * * @return string Path to current theme directory. */function get_stylesheet_directory() {	$stylesheet = get_stylesheet();	$theme_root = get_theme_root( $stylesheet );	$stylesheet_dir = "$theme_root/$stylesheet";	return apply_filters( 'stylesheet_directory', $stylesheet_dir, $stylesheet, $theme_root );}/** * Retrieve stylesheet directory URI. * * @since 1.5.0 * * @return string */function get_stylesheet_directory_uri() {	$stylesheet = get_stylesheet();	$theme_root_uri = get_theme_root_uri( $stylesheet );	$stylesheet_dir_uri = "$theme_root_uri/$stylesheet";	return apply_filters( 'stylesheet_directory_uri', $stylesheet_dir_uri, $stylesheet, $theme_root_uri );}/** * Retrieve URI of current theme stylesheet. * * The stylesheet file name is 'style.css' which is appended to {@link * get_stylesheet_directory_uri() stylesheet directory URI} path. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI. * * @return string */function get_stylesheet_uri() {	$stylesheet_dir_uri = get_stylesheet_directory_uri();	$stylesheet_uri = $stylesheet_dir_uri . "/style.css";	return apply_filters('stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri);}/** * Retrieve localized stylesheet URI. * * The stylesheet directory for the localized stylesheet files are located, by * default, in the base theme directory. The name of the locale file will be the * locale followed by '.css'. If that does not exist, then the text direction * stylesheet will be checked for existence, for example 'ltr.css'. * * The theme may change the location of the stylesheet directory by either using * the 'stylesheet_directory_uri' filter or the 'locale_stylesheet_uri' filter. * If you want to change the location of the stylesheet files for the entire * WordPress workflow, then change the former. If you just have the locale in a * separate folder, then change the latter. * * @since 2.1.0 * @uses apply_filters() Calls 'locale_stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI. * * @return string */function get_locale_stylesheet_uri() {	global $wp_locale;	$stylesheet_dir_uri = get_stylesheet_directory_uri();	$dir = get_stylesheet_directory();	$locale = get_locale();	if ( file_exists("$dir/$locale.css") )		$stylesheet_uri = "$stylesheet_dir_uri/$locale.css";	elseif ( !empty($wp_locale->text_direction) && file_exists("$dir/{$wp_locale->text_direction}.css") )		$stylesheet_uri = "$stylesheet_dir_uri/{$wp_locale->text_direction}.css";	else		$stylesheet_uri = '';	return apply_filters('locale_stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri);}/** * Retrieve name of the current theme. * * @since 1.5.0 * @uses apply_filters() Calls 'template' filter on template option. * * @return string Template name. */function get_template() {	return apply_filters('template', get_option('template'));}/** * Retrieve current theme directory. * * @since 1.5.0 * @uses apply_filters() Calls 'template_directory' filter on template directory path and template name. * * @return string Template directory path. */function get_template_directory() {	$template = get_template();	$theme_root = get_theme_root( $template );	$template_dir = "$theme_root/$template";	return apply_filters( 'template_directory', $template_dir, $template, $theme_root );}/** * Retrieve theme directory URI. * * @since 1.5.0 * @uses apply_filters() Calls 'template_directory_uri' filter on template directory URI path and template name. * * @return string Template directory URI. */function get_template_directory_uri() {	$template = get_template();	$theme_root_uri = get_theme_root_uri( $template );	$template_dir_uri = "$theme_root_uri/$template";	return apply_filters( 'template_directory_uri', $template_dir_uri, $template, $theme_root_uri );}/** * Retrieve theme data from parsed theme file. * * The description will have the tags filtered with the following HTML elements * whitelisted. The <b>'a'</b> element with the <em>href</em> and <em>title</em> * attributes. The <b>abbr</b> element with the <em>title</em> attribute. The * <b>acronym<b> element with the <em>title</em> attribute allowed. The * <b>code</b>, <b>em</b>, and <b>strong</b> elements also allowed. * * The style.css file must contain theme name, theme URI, and description. The * data can also contain author URI, author, template (parent template), * version, status, and finally tags. Some of these are not used by WordPress * administration panels, but are used by theme directory web sites which list * the theme. * * @since 1.5.0 * * @param string $theme_file Theme file path. * @return array Theme data. */function get_theme_data( $theme_file ) {	$default_headers = array(		'Name' => 'Theme Name',		'URI' => 'Theme URI',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'Version' => 'Version',		'Template' => 'Template',		'Status' => 'Status',		'Tags' => 'Tags'		);	$themes_allowed_tags = array(		'a' => array(			'href' => array(),'title' => array()			),		'abbr' => array(			'title' => array()			),		'acronym' => array(			'title' => array()			),		'code' => array(),		'em' => array(),		'strong' => array()	);	$theme_data = get_file_data( $theme_file, $default_headers, 'theme' );	$theme_data['Name'] = $theme_data['Title'] = wp_kses( $theme_data['Name'], $themes_allowed_tags );	$theme_data['URI'] = esc_url( $theme_data['URI'] );	$theme_data['Description'] = wptexturize( wp_kses( $theme_data['Description'], $themes_allowed_tags ) );	$theme_data['AuthorURI'] = esc_url( $theme_data['AuthorURI'] );	$theme_data['Template'] = wp_kses( $theme_data['Template'], $themes_allowed_tags );	$theme_data['Version'] = wp_kses( $theme_data['Version'], $themes_allowed_tags );	if ( $theme_data['Status'] == '' )		$theme_data['Status'] = 'publish';	else		$theme_data['Status'] = wp_kses( $theme_data['Status'], $themes_allowed_tags );	if ( $theme_data['Tags'] == '' )		$theme_data['Tags'] = array();	else		$theme_data['Tags'] = array_map( 'trim', explode( ',', wp_kses( $theme_data['Tags'], array() ) ) );	if ( $theme_data['Author'] == '' ) {		$theme_data['Author'] = $theme_data['AuthorName'] = __('Anonymous');	} else {		$theme_data['AuthorName'] = wp_kses( $theme_data['Author'], $themes_allowed_tags );		if ( empty( $theme_data['AuthorURI'] ) ) {			$theme_data['Author'] = $theme_data['AuthorName'];		} else {			$theme_data['Author'] = sprintf( '<a href="%1$s" title="%2$s">%3$s</a>', $theme_data['AuthorURI'], __( 'Visit author homepage' ), $theme_data['AuthorName'] );		}	}	return $theme_data;}/** * Retrieve list of themes with theme data in theme directory. * * The theme is broken, if it doesn't have a parent theme and is missing either * style.css and, or index.php. If the theme has a parent theme then it is * broken, if it is missing style.css; index.php is optional. The broken theme * list is saved in the {@link $wp_broken_themes} global, which is displayed on * the theme list in the administration panels. * * @since 1.5.0 * @global array $wp_broken_themes Stores the broken themes. * @global array $wp_themes Stores the working themes. * * @return array Theme list with theme data. */function get_themes() {	global $wp_themes, $wp_broken_themes;	if ( isset($wp_themes) )		return $wp_themes;	/* Register the default root as a theme directory */	register_theme_directory( get_theme_root() );	if ( !$theme_files = search_theme_directories() )		return false;	asort( $theme_files );	$wp_themes = array();	foreach ( (array) $theme_files as $theme_file ) {		$theme_root = $theme_file['theme_root'];		$theme_file = $theme_file['theme_file'];		if ( !is_readable("$theme_root/$theme_file") ) {			$wp_broken_themes[$theme_file] = array('Name' => $theme_file, 'Title' => $theme_file, 'Description' => __('File not readable.'));			continue;		}		$theme_data = get_theme_data("$theme_root/$theme_file");		$name        = $theme_data['Name'];		$title       = $theme_data['Title'];		$description = wptexturize($theme_data['Description']);		$version     = $theme_data['Version'];		$author      = $theme_data['Author'];		$template    = $theme_data['Template'];		$stylesheet  = dirname($theme_file);		$screenshot = false;		foreach ( array('png', 'gif', 'jpg', 'jpeg') as $ext ) {			if (file_exists("$theme_root/$stylesheet/screenshot.$ext")) {				$screenshot = "screenshot.$ext";				break;			}		}		if ( empty($name) ) {			$name = dirname($theme_file);			$title = $name;		}		$parent_template = $template;		if ( empty($template) ) {			if ( file_exists("$theme_root/$stylesheet/index.php") )				$template = $stylesheet;			else				continue;		}		$template = trim( $template );		if ( !file_exists("$theme_root/$template/index.php") ) {			$parent_dir = dirname(dirname($theme_file));			if ( file_exists("$theme_root/$parent_dir/$template/index.php") ) {				$template = "$parent_dir/$template";				$template_directory = "$theme_root/$template";			} else {				/**				 * The parent theme doesn't exist in the current theme's folder or sub folder				 * so lets use the theme root for the parent template.				 */				if ( isset($theme_files[$template]) && file_exists( $theme_files[$template]['theme_root'] . "/$template/index.php" ) ) {					$template_directory = $theme_files[$template]['theme_root'] . "/$template";				} else {					if ( empty( $parent_template) )						$wp_broken_themes[$name] = array('Name' => $name, 'Title' => $title, 'Description' => __('Template is missing.'), 'error' => 'no_template');					else						$wp_broken_themes[$name] = array('Name' => $name, 'Title' => $title, 'Description' => sprintf( __('The parent theme is missing. Please install the "%s" parent theme.'),  $parent_template ), 'error' => 'no_parent', 'parent' => $parent_template );					continue;				}			}		} else {			$template_directory = trim( $theme_root . '/' . $template );		}		$stylesheet_files = array();		$template_files = array();		$stylesheet_dir = @ dir("$theme_root/$stylesheet");		if ( $stylesheet_dir ) {			while ( ($file = $stylesheet_dir->read()) !== false ) {				if ( !preg_match('|^\.+$|', $file) ) {					if ( preg_match('|\.css$|', $file) )						$stylesheet_files[] = "$theme_root/$stylesheet/$file";					elseif ( preg_match('|\.php$|', $file) )						$template_files[] = "$theme_root/$stylesheet/$file";				}			}			@ $stylesheet_dir->close();		}		$template_dir = @ dir("$template_directory");		if ( $template_dir ) {			while ( ($file = $template_dir->read()) !== false ) {				if ( preg_match('|^\.+$|', $file) )					continue;				if ( preg_match('|\.php$|', $file) ) {					$template_files[] = "$template_directory/$file";				} elseif ( is_dir("$template_directory/$file") ) {					$template_subdir = @ dir("$template_directory/$file");					if ( !$template_subdir )						continue;					while ( ($subfile = $template_subdir->read()) !== false ) {						if ( preg_match('|^\.+$|', $subfile) )							continue;						if ( preg_match('|\.php$|', $subfile) )							$template_files[] = "$template_directory/$file/$subfile";					}					@ $template_subdir->close();				}			}			@ $template_dir->close();		}		//Make unique and remove duplicates when stylesheet and template are the same i.e. most themes		$template_files = array_unique($template_files);		$stylesheet_files = array_unique($stylesheet_files);		$template_dir = dirname($template_files[0]);		$stylesheet_dir = dirname($stylesheet_files[0]);		if ( empty($template_dir) )			$template_dir = '/';		if ( empty($stylesheet_dir) )			$stylesheet_dir = '/';		// Check for theme name collision.  This occurs if a theme is copied to		// a new theme directory and the theme header is not updated.  Whichever		// theme is first keeps the name.  Subsequent themes get a suffix applied.		// The Default and Classic themes always trump their pretenders.		if ( isset($wp_themes[$name]) ) {			if ( ('WordPress Default' == $name || 'WordPress Classic' == $name) &&					 ('default' == $stylesheet || 'classic' == $stylesheet) ) {				// If another theme has claimed to be one of our default themes, move				// them aside.				$suffix = $wp_themes[$name]['Stylesheet'];				$new_name = "$name/$suffix";				$wp_themes[$new_name] = $wp_themes[$name];				$wp_themes[$new_name]['Name'] = $new_name;			} else {				$name = "$name/$stylesheet";			}		}		$theme_roots[$stylesheet] = str_replace( WP_CONTENT_DIR, '', $theme_root );		$wp_themes[$name] = array(			'Name' => $name,			'Title' => $title,			'Description' => $description,			'Author' => $author,			'Author Name' => $theme_data['AuthorName'],			'Author URI' => $theme_data['AuthorURI'],			'Version' => $version,			'Template' => $template,			'Stylesheet' => $stylesheet,			'Template Files' => $template_files,			'Stylesheet Files' => $stylesheet_files,			'Template Dir' => $template_dir,			'Stylesheet Dir' => $stylesheet_dir,			'Status' => $theme_data['Status'],			'Screenshot' => $screenshot,			'Tags' => $theme_data['Tags'],			'Theme Root' => $theme_root,			'Theme Root URI' => str_replace( WP_CONTENT_DIR, content_url(), $theme_root ),		);	}	unset($theme_files);	/* Store theme roots in the DB */	if ( get_site_transient( 'theme_roots' ) != $theme_roots )		set_site_transient( 'theme_roots', $theme_roots, 7200 ); // cache for two hours	unset($theme_roots);	/* Resolve theme dependencies. */	$theme_names = array_keys( $wp_themes );	foreach ( (array) $theme_names as $theme_name ) {		$wp_themes[$theme_name]['Parent Theme'] = '';		if ( $wp_themes[$theme_name]['Stylesheet'] != $wp_themes[$theme_name]['Template'] ) {			foreach ( (array) $theme_names as $parent_theme_name ) {				if ( ($wp_themes[$parent_theme_name]['Stylesheet'] == $wp_themes[$parent_theme_name]['Template']) && ($wp_themes[$parent_theme_name]['Template'] == $wp_themes[$theme_name]['Template']) ) {					$wp_themes[$theme_name]['Parent Theme'] = $wp_themes[$parent_theme_name]['Name'];					break;				}			}		}	}	return $wp_themes;}/** * Retrieve theme roots. * * @since 2.9.0 * * @return array Theme roots */function get_theme_roots() {	$theme_roots = get_site_transient( 'theme_roots' );	if ( false === $theme_roots ) {		get_themes();		$theme_roots = get_site_transient( 'theme_roots' ); // this is set in get_theme()	}	return $theme_roots;}/** * Retrieve theme data. * * @since 1.5.0 * * @param string $theme Theme name. * @return array|null Null, if theme name does not exist. Theme data, if exists. */function get_theme($theme) {	$themes = get_themes();	if ( array_key_exists($theme, $themes) )		return $themes[$theme];	return null;}/** * Retrieve current theme display name. * * If the 'current_theme' option has already been set, then it will be returned * instead. If it is not set, then each theme will be iterated over until both * the current stylesheet and current template name. * * @since 1.5.0 * * @return string */function get_current_theme() {	if ( $theme = get_option('current_theme') )		return $theme;	$themes = get_themes();	$theme_names = array_keys($themes);	$current_template = get_option('template');	$current_stylesheet = get_option('stylesheet');	$current_theme = 'WordPress Default';	if ( $themes ) {		foreach ( (array) $theme_names as $theme_name ) {			if ( $themes[$theme_name]['Stylesheet'] == $current_stylesheet &&					$themes[$theme_name]['Template'] == $current_template ) {				$current_theme = $themes[$theme_name]['Name'];				break;			}		}	}	update_option('current_theme', $current_theme);	return $current_theme;}/** * Register a directory that contains themes. * * @since 2.9.0 * * @param string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR * @return bool */function register_theme_directory( $directory) {	global $wp_theme_directories;	/* If this folder does not exist, return and do not register */	if ( !file_exists( $directory ) )			/* Try prepending as the theme directory could be relative to the content directory */		$registered_directory = WP_CONTENT_DIR . '/' . $directory;	else		$registered_directory = $directory;	/* If this folder does not exist, return and do not register */	if ( !file_exists( $registered_directory ) )		return false;	$wp_theme_directories[] = $registered_directory;	return true;}/** * Search all registered theme directories for complete and valid themes. * * @since 2.9.0 * * @return array Valid themes found */function search_theme_directories() {	global $wp_theme_directories, $wp_broken_themes;	if ( empty( $wp_theme_directories ) )		return false;	$theme_files = array();	$wp_broken_themes = array();	/* Loop the registered theme directories and extract all themes */	foreach ( (array) $wp_theme_directories as $theme_root ) {		$theme_loc = $theme_root;		/* We don't want to replace all forward slashes, see Trac #4541 */		if ( '/' != WP_CONTENT_DIR )			$theme_loc = str_replace(WP_CONTENT_DIR, '', $theme_root);		/* Files in the root of the current theme directory and one subdir down */		$themes_dir = @ opendir($theme_root);		if ( !$themes_dir )			return false;		while ( ($theme_dir = readdir($themes_dir)) !== false ) {			if ( is_dir($theme_root . '/' . $theme_dir) && is_readable($theme_root . '/' . $theme_dir) ) {				if ( $theme_dir{0} == '.' || $theme_dir == 'CVS' )					continue;				$stylish_dir = @opendir($theme_root . '/' . $theme_dir);				$found_stylesheet = false;				while ( ($theme_file = readdir($stylish_dir)) !== false ) {					if ( $theme_file == 'style.css' ) {						$theme_files[$theme_dir] = array( 'theme_file' => $theme_dir . '/' . $theme_file, 'theme_root' => $theme_root );						$found_stylesheet = true;						break;					}				}				@closedir($stylish_dir);				if ( !$found_stylesheet ) { // look for themes in that dir					$subdir = "$theme_root/$theme_dir";					$subdir_name = $theme_dir;					$theme_subdirs = @opendir( $subdir );					$found_subdir_themes = false;					while ( ($theme_subdir = readdir($theme_subdirs)) !== false ) {						if ( is_dir( $subdir . '/' . $theme_subdir) && is_readable($subdir . '/' . $theme_subdir) ) {							if ( $theme_subdir{0} == '.' || $theme_subdir == 'CVS' )								continue;							$stylish_dir = @opendir($subdir . '/' . $theme_subdir);							$found_stylesheet = false;							while ( ($theme_file = readdir($stylish_dir)) !== false ) {								if ( $theme_file == 'style.css' ) {									$theme_files["$theme_dir/$theme_subdir"] = array( 'theme_file' => $subdir_name . '/' . $theme_subdir . '/' . $theme_file, 'theme_root' => $theme_root );									$found_stylesheet = true;									$found_subdir_themes = true;									break;								}							}							@closedir($stylish_dir);						}					}					@closedir($theme_subdirs);					if ( !$found_subdir_themes )						$wp_broken_themes[$theme_dir] = array('Name' => $theme_dir, 'Title' => $theme_dir, 'Description' => __('Stylesheet is missing.'));				}			}		}		@closedir( $themes_dir );	}	return $theme_files;}/** * Retrieve path to themes directory. * * Does not have trailing slash. * * @since 1.5.0 * @param $stylesheet_or_template The stylesheet or template name of the theme * @uses apply_filters() Calls 'theme_root' filter on path. * * @return string Theme path. */function get_theme_root( $stylesheet_or_template = false ) {	if ($stylesheet_or_template) {		$theme_roots = get_theme_roots();		if ( ! empty( $theme_roots[$stylesheet_or_template] ) )			$theme_root = WP_CONTENT_DIR . $theme_roots[$stylesheet_or_template];		else			$theme_root = WP_CONTENT_DIR . '/themes';	} else {		$theme_root = WP_CONTENT_DIR . '/themes';	}	return apply_filters( 'theme_root', $theme_root );}/** * Retrieve URI for themes directory. * * Does not have trailing slash. * * @since 1.5.0 * @param $stylesheet_or_template The stylesheet or template name of the theme * * @return string Themes URI. */function get_theme_root_uri( $stylesheet_or_template = false ) {	$theme_roots = get_theme_roots();	if ( isset( $theme_roots[$stylesheet_or_template] ) && $theme_roots[$stylesheet_or_template] )		$theme_root_uri = content_url( $theme_roots[$stylesheet_or_template] );	else		$theme_root_uri = content_url( 'themes' );	return apply_filters( 'theme_root_uri', $theme_root_uri, get_option('siteurl'), $stylesheet_or_template );}/** * Retrieve path to file without the use of extension. * * Used to quickly retrieve the path of file without including the file * extension. It will also check the parent template, if the file exists, with * the use of {@link locate_template()}. Allows for more generic file location * without the use of the other get_*_template() functions. * * Can be used with include() or require() to retrieve path. * <code> * if( '' != get_query_template( '404' ) ) *     include( get_query_template( '404' ) ); * </code> * or the same can be accomplished with * <code> * if( '' != get_404_template() ) *     include( get_404_template() ); * </code> * * @since 1.5.0 * * @param string $type Filename without extension. * @return string Full path to file. */function get_query_template($type) {	$type = preg_replace( '|[^a-z0-9-]+|', '', $type );	return apply_filters("{$type}_template", locate_template(array("{$type}.php")));}/** * Retrieve path of index template in current or parent template. * * @since 3.0.0 * * @return string */function get_index_template() {	return get_query_template('index');}/** * Retrieve path of 404 template in current or parent template. * * @since 1.5.0 * * @return string */function get_404_template() {	return get_query_template('404');}/** * Retrieve path of archive template in current or parent template. * * @since 1.5.0 * * @return string */function get_archive_template() {	return get_query_template('archive');}/** * Retrieve path of author template in current or parent template. * * @since 1.5.0 * * @return string */function get_author_template() {	$author_id = absint( get_query_var( 'author' ) );	$author = get_user_by( 'id', $author_id );	$author = $author->user_nicename;	$templates = array();	if ( $author )		$templates[] = "author-{$author}.php";	if ( $author_id )		$templates[] = "author-{$author_id}.php";	$templates[] = 'author.php';	$template = locate_template( $templates );	return apply_filters( 'author_template', $template );}/** * Retrieve path of category template in current or parent template. * * Works by first retrieving the current slug for example 'category-default.php' and then * trying category ID, for example 'category-1.php' and will finally fallback to category.php * template, if those files don't exist. * * @since 1.5.0 * @uses apply_filters() Calls 'category_template' on file path of category template. * * @return string */function get_category_template() {	$cat_ID = absint( get_query_var('cat') );	$category = get_category( $cat_ID );	$templates = array();	if ( !is_wp_error($category) )		$templates[] = "category-{$category->slug}.php";	$templates[] = "category-$cat_ID.php";	$templates[] = "category.php";	$template = locate_template($templates);	return apply_filters('category_template', $template);}/** * Retrieve path of tag template in current or parent template. * * Works by first retrieving the current tag name, for example 'tag-wordpress.php' and then * trying tag ID, for example 'tag-1.php' and will finally fallback to tag.php * template, if those files don't exist. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_template' on file path of tag template. * * @return string */function get_tag_template() {	$tag_id = absint( get_query_var('tag_id') );	$tag_name = get_query_var('tag');	$templates = array();	if ( $tag_name )		$templates[] = "tag-$tag_name.php";	if ( $tag_id )		$templates[] = "tag-$tag_id.php";	$templates[] = "tag.php";	$template = locate_template($templates);	return apply_filters('tag_template', $template);}/** * Retrieve path of taxonomy template in current or parent template. * * Retrieves the taxonomy and term, if term is available. The template is * prepended with 'taxonomy-' and followed by both the taxonomy string and * the taxonomy string followed by a dash and then followed by the term. * * The taxonomy and term template is checked and used first, if it exists. * Second, just the taxonomy template is checked, and then finally, taxonomy.php * template is used. If none of the files exist, then it will fall back on to * index.php. * * @since unknown (2.6.0 most likely) * @uses apply_filters() Calls 'taxonomy_template' filter on found path. * * @return string */function get_taxonomy_template() {	$taxonomy = get_query_var('taxonomy');	$term = get_query_var('term');	$templates = array();	if ( $taxonomy && $term )		$templates[] = "taxonomy-$taxonomy-$term.php";	if ( $taxonomy )		$templates[] = "taxonomy-$taxonomy.php";	$templates[] = "taxonomy.php";	$template = locate_template($templates);	return apply_filters('taxonomy_template', $template);}/** * Retrieve path of date template in current or parent template. * * @since 1.5.0 * * @return string */function get_date_template() {	return get_query_template('date');}/** * Retrieve path of home template in current or parent template. * * This is the template used for the page containing the blog posts * * Attempts to locate 'home.php' first before falling back to 'index.php'. * * @since 1.5.0 * @uses apply_filters() Calls 'home_template' on file path of home template. * * @return string */function get_home_template() {	$template = locate_template(array('home.php', 'index.php'));	return apply_filters('home_template', $template);}/** * Retrieve path of front-page template in current or parent template. * * Looks for 'front-page.php'. * * @since 3.0.0 * @uses apply_filters() Calls 'front_page_template' on file path of template. * * @return string */function get_front_page_template() {	return apply_filters( 'front_page_template', locate_template( array('front-page.php') ) );}/** * Retrieve path of page template in current or parent template. * * Will first look for the specifically assigned page template * The will search for 'page-{slug}.php' followed by 'page-id.php' * and finally 'page.php' * * @since 1.5.0 * * @return string */function get_page_template() {	global $wp_query;	$id = (int) $wp_query->get_queried_object_id();	$template = get_post_meta($id, '_wp_page_template', true);	$pagename = get_query_var('pagename');	if ( !$pagename && $id > 0 ) {		// If a static page is set as the front page, $pagename will not be set. Retrieve it from the queried object		$post = $wp_query->get_queried_object();		$pagename = $post->post_name;	}	if ( 'default' == $template )		$template = '';	$templates = array();	if ( !empty($template) && !validate_file($template) )		$templates[] = $template;	if ( $pagename )		$templates[] = "page-$pagename.php";	if ( $id )		$templates[] = "page-$id.php";	$templates[] = "page.php";	return apply_filters('page_template', locate_template($templates));}/** * Retrieve path of paged template in current or parent template. * * @since 1.5.0 * * @return string */function get_paged_template() {	return get_query_template('paged');}/** * Retrieve path of search template in current or parent template. * * @since 1.5.0 * * @return string */function get_search_template() {	return get_query_template('search');}/** * Retrieve path of single template in current or parent template. * * @since 1.5.0 * * @return string */function get_single_template() {	global $wp_query;	$object = $wp_query->get_queried_object();	$templates = array('single-' . $object->post_type . '.php', 'single.php');	return apply_filters('single_template', locate_template($templates));}/** * Retrieve path of attachment template in current or parent template. * * The attachment path first checks if the first part of the mime type exists. * The second check is for the second part of the mime type. The last check is * for both types separated by an underscore. If neither are found then the file * 'attachment.php' is checked and returned. * * Some examples for the 'text/plain' mime type are 'text.php', 'plain.php', and * finally 'text_plain.php'. * * @since 2.0.0 * * @return string */function get_attachment_template() {	global $posts;	$type = explode('/', $posts[0]->post_mime_type);	if ( $template = get_query_template($type[0]) )		return $template;	elseif ( $template = get_query_template($type[1]) )		return $template;	elseif ( $template = get_query_template("$type[0]_$type[1]") )		return $template;	else		return get_query_template('attachment');}/** * Retrieve path of comment popup template in current or parent template. * * Checks for comment popup template in current template, if it exists or in the * parent template. * * @since 1.5.0 * @uses apply_filters() Calls 'comments_popup_template' filter on path. * * @return string */function get_comments_popup_template() {	$template = locate_template(array("comments-popup.php"));	// Backward compat code will be removed in a future release	if ('' == $template)		$template = WPINC . '/theme-compat/comments-popup.php';	return apply_filters('comments_popup_template', $template);}/** * Retrieve the name of the highest priority template file that exists. * * Searches in the STYLESHEETPATH before TEMPLATEPATH so that themes which * inherit from a parent theme can just overload one file. * * @since 2.7.0 * * @param array $template_names Array of template files to search for in priority order. * @param bool $load If true the template file will be loaded if it is found. * @param bool $require_once Whether to require_once or require. Default true. Has no effect if $load is false. * @return string The template filename if one is located. */function locate_template($template_names, $load = false, $require_once = true ) {	if ( !is_array($template_names) )		return '';	$located = '';	foreach ( $template_names as $template_name ) {		if ( !$template_name )			continue;		if ( file_exists(STYLESHEETPATH . '/' . $template_name)) {			$located = STYLESHEETPATH . '/' . $template_name;			break;		} else if ( file_exists(TEMPLATEPATH . '/' . $template_name) ) {			$located = TEMPLATEPATH . '/' . $template_name;			break;		}	}	if ( $load && '' != $located )		load_template( $located, $require_once );	return $located;}/** * Require the template file with WordPress environment. * * The globals are set up for the template file to ensure that the WordPress * environment is available from within the function. The query variables are * also available. * * @since 1.5.0 * * @param string $_template_file Path to template file. * @param bool $require_once Whether to require_once or require. Default true. */function load_template( $_template_file, $require_once = true ) {	global $posts, $post, $wp_did_header, $wp_did_template_redirect, $wp_query, $wp_rewrite, $wpdb, $wp_version, $wp, $id, $comment, $user_ID;	if ( is_array( $wp_query->query_vars ) )		extract( $wp_query->query_vars, EXTR_SKIP );	if ( $require_once )		require_once( $_template_file );	else		require( $_template_file );}/** * Display localized stylesheet link element. * * @since 2.1.0 */function locale_stylesheet() {	$stylesheet = get_locale_stylesheet_uri();	if ( empty($stylesheet) )		return;	echo '<link rel="stylesheet" href="' . $stylesheet . '" type="text/css" media="screen" />';}/** * Start preview theme output buffer. * * Will only preform task if the user has permissions and template and preview * query variables exist. * * @since 2.6.0 */function preview_theme() {	if ( ! (isset($_GET['template']) && isset($_GET['preview'])) )		return;	if ( !current_user_can( 'switch_themes' ) )		return;	$_GET['template'] = preg_replace('|[^a-z0-9_./-]|i', '', $_GET['template']);	if ( validate_file($_GET['template']) )		return;	add_filter( 'template', '_preview_theme_template_filter' );	if ( isset($_GET['stylesheet']) ) {		$_GET['stylesheet'] = preg_replace('|[^a-z0-9_./-]|i', '', $_GET['stylesheet']);		if ( validate_file($_GET['stylesheet']) )			return;		add_filter( 'stylesheet', '_preview_theme_stylesheet_filter' );	}	// Prevent theme mods to current theme being used on theme being previewed	add_filter( 'pre_option_mods_' . get_current_theme(), '__return_empty_array' );	ob_start( 'preview_theme_ob_filter' );}add_action('setup_theme', 'preview_theme');/** * Private function to modify the current template when previewing a theme * * @since 2.9.0 * @access private * * @return string */function _preview_theme_template_filter() {	return isset($_GET['template']) ? $_GET['template'] : '';}/** * Private function to modify the current stylesheet when previewing a theme * * @since 2.9.0 * @access private * * @return string */function _preview_theme_stylesheet_filter() {	return isset($_GET['stylesheet']) ? $_GET['stylesheet'] : '';}/** * Callback function for ob_start() to capture all links in the theme. * * @since 2.6.0 * @access private * * @param string $content * @return string */function preview_theme_ob_filter( $content ) {	return preg_replace_callback( "|(<a.*?href=([\"']))(.*?)([\"'].*?>)|", 'preview_theme_ob_filter_callback', $content );}/** * Manipulates preview theme links in order to control and maintain location. * * Callback function for preg_replace_callback() to accept and filter matches. * * @since 2.6.0 * @access private * * @param array $matches * @return string */function preview_theme_ob_filter_callback( $matches ) {	if ( strpos($matches[4], 'onclick') !== false )		$matches[4] = preg_replace('#onclick=([\'"]).*?(?<!\\\)\\1#i', '', $matches[4]); //Strip out any onclicks from rest of <a>. (?<!\\\) means to ignore the '" if its escaped by \  to prevent breaking mid-attribute.	if (		( false !== strpos($matches[3], '/wp-admin/') )	||		( false !== strpos( $matches[3], '://' ) && 0 !== strpos( $matches[3], home_url() ) )	||		( false !== strpos($matches[3], '/feed/') )	||		( false !== strpos($matches[3], '/trackback/') )	)		return $matches[1] . "#$matches[2] onclick=$matches[2]return false;" . $matches[4];	$link = add_query_arg( array('preview' => 1, 'template' => $_GET['template'], 'stylesheet' => @$_GET['stylesheet'] ), $matches[3] );	if ( 0 === strpos($link, 'preview=1') )		$link = "?$link";	return $matches[1] . esc_attr( $link ) . $matches[4];}/** * Switches current theme to new template and stylesheet names. * * @since unknown * @uses do_action() Calls 'switch_theme' action on updated theme display name. * * @param string $template Template name * @param string $stylesheet Stylesheet name. */function switch_theme($template, $stylesheet) {	update_option('template', $template);	update_option('stylesheet', $stylesheet);	delete_option('current_theme');	$theme = get_current_theme();	do_action('switch_theme', $theme);}/** * Checks that current theme files 'index.php' and 'style.css' exists. * * Does not check the default theme, which is the fallback and should always exist. * Will switch theme to the fallback theme if current theme does not validate. * You can use the 'validate_current_theme' filter to return FALSE to * disable this functionality. * * @since 1.5.0 * @see WP_DEFAULT_THEME * * @return bool */function validate_current_theme() {	// Don't validate during an install/upgrade.	if ( defined('WP_INSTALLING') || !apply_filters( 'validate_current_theme', true ) )		return true;	if ( get_template() != WP_DEFAULT_THEME && !file_exists(get_template_directory() . '/index.php') ) {		switch_theme( WP_DEFAULT_THEME, WP_DEFAULT_THEME );		return false;	}	if ( get_stylesheet() != WP_DEFAULT_THEME && !file_exists(get_template_directory() . '/style.css') ) {		switch_theme( WP_DEFAULT_THEME, WP_DEFAULT_THEME );		return false;	}	return true;}/** * Retrieve theme modification value for the current theme. * * If the modification name does not exist, then the $default will be passed * through {@link http://php.net/sprintf sprintf()} PHP function with the first * string the template directory URI and the second string the stylesheet * directory URI. * * @since 2.1.0 * @uses apply_filters() Calls 'theme_mod_$name' filter on the value. * * @param string $name Theme modification name. * @param bool|string $default * @return string */function get_theme_mod($name, $default = false) {	$theme = get_current_theme();	$mods = get_option( "mods_$theme" );	if ( isset($mods[$name]) )		return apply_filters( "theme_mod_$name", $mods[$name] );	return apply_filters( "theme_mod_$name", sprintf($default, get_template_directory_uri(), get_stylesheet_directory_uri()) );}/** * Update theme modification value for the current theme. * * @since 2.1.0 * * @param string $name Theme modification name. * @param string $value theme modification value. */function set_theme_mod($name, $value) {	$theme = get_current_theme();	$mods = get_option("mods_$theme");	$mods[$name] = $value;	update_option("mods_$theme", $mods);	wp_cache_delete("mods_$theme", 'options');}/** * Remove theme modification name from current theme list. * * If removing the name also removes all elements, then the entire option will * be removed. * * @since 2.1.0 * * @param string $name Theme modification name. * @return null */function remove_theme_mod( $name ) {	$theme = get_current_theme();	$mods = get_option("mods_$theme");	if ( !isset($mods[$name]) )		return;	unset($mods[$name]);	if ( empty($mods) )		return remove_theme_mods();	update_option("mods_$theme", $mods);	wp_cache_delete("mods_$theme", 'options');}/** * Remove theme modifications option for current theme. * * @since 2.1.0 */function remove_theme_mods() {	$theme = get_current_theme();	delete_option("mods_$theme");}/** * Retrieve text color for custom header. * * @since 2.1.0 * @uses HEADER_TEXTCOLOR * * @return string */function get_header_textcolor() {	$default = defined('HEADER_TEXTCOLOR') ? HEADER_TEXTCOLOR : '';	return get_theme_mod('header_textcolor', $default);}/** * Display text color for custom header. * * @since 2.1.0 */function header_textcolor() {	echo get_header_textcolor();}/** * Retrieve header image for custom header. * * @since 2.1.0 * @uses HEADER_IMAGE * * @return string */function get_header_image() {	$default = defined('HEADER_IMAGE') ? HEADER_IMAGE : '';	return get_theme_mod('header_image', $default);}/** * Display header image path. * * @since 2.1.0 */function header_image() {	echo get_header_image();}/** * Add callbacks for image header display. * * The parameter $header_callback callback will be required to display the * content for the 'wp_head' action. The parameter $admin_header_callback * callback will be added to Custom_Image_Header class and that will be added * to the 'admin_menu' action. * * @since 2.1.0 * @uses Custom_Image_Header Sets up for $admin_header_callback for administration panel display. * * @param callback $header_callback Call on 'wp_head' action. * @param callback $admin_header_callback Call on custom header administration screen. * @param callback $admin_image_div_callback Output a custom header image div on the custom header administration screen. Optional. */function add_custom_image_header($header_callback, $admin_header_callback, $admin_image_div_callback = '') {	if ( ! empty($header_callback) )		add_action('wp_head', $header_callback);	add_theme_support( 'custom-header' );	if ( ! is_admin() )		return;	require_once(ABSPATH . 'wp-admin/custom-header.php');	$GLOBALS['custom_image_header'] =& new Custom_Image_Header($admin_header_callback, $admin_image_div_callback);	add_action('admin_menu', array(&$GLOBALS['custom_image_header'], 'init'));}/** * Register a selection of default headers to be displayed by the custom header admin UI. * * @since 3.0.0 * * @param array $headers Array of headers keyed by a string id. The ids point to arrays containing 'url', 'thumbnail_url', and 'description' keys. */function register_default_headers( $headers ) {	global $_wp_default_headers;	$_wp_default_headers = array_merge( (array) $_wp_default_headers, (array) $headers );}/** * Unregister default headers. * * This function must be called after register_default_headers() has already added the * header you want to remove. * * @see register_default_headers() * @since 3.0.0 * * @param string|array The header string id (key of array) to remove, or an array thereof. * @return True on success, false on failure. */function unregister_default_headers( $header ) {	global $_wp_default_headers;	if ( is_array( $header ) ) {		array_map( 'unregister_default_headers', $header );	} elseif ( isset( $_wp_default_headers[ $header ] ) ) {		unset( $_wp_default_headers[ $header ] );		return true;	} else {		return false;	}}/** * Retrieve background image for custom background. * * @since 3.0.0 * * @return string */function get_background_image() {	$default = defined('BACKGROUND_IMAGE') ? BACKGROUND_IMAGE : '';	return get_theme_mod('background_image', $default);}/** * Display background image path. * * @since 3.0.0 */function background_image() {	echo get_background_image();}/** * Retrieve value for custom background color. * * @since 3.0.0 * @uses BACKGROUND_COLOR * * @return string */function get_background_color() {	$default = defined('BACKGROUND_COLOR') ? BACKGROUND_COLOR : '';	return get_theme_mod('background_color', $default);}/** * Display background color value. * * @since 3.0.0 */function background_color() {	echo get_background_color();}/** * Add callbacks for background image display. * * The parameter $header_callback callback will be required to display the * content for the 'wp_head' action. The parameter $admin_header_callback * callback will be added to Custom_Background class and that will be added * to the 'admin_menu' action. * * @since 3.0.0 * @uses Custom_Background Sets up for $admin_header_callback for administration panel display. * * @param callback $header_callback Call on 'wp_head' action. * @param callback $admin_header_callback Call on custom background administration screen. * @param callback $admin_image_div_callback Output a custom background image div on the custom background administration screen. Optional. */function add_custom_background($header_callback = '', $admin_header_callback = '', $admin_image_div_callback = '') {	if ( isset($GLOBALS['custom_background']) )		return;	if ( empty($header_callback) )		$header_callback = '_custom_background_cb';	add_action('wp_head', $header_callback);	add_theme_support( 'custom-background' );	if ( ! is_admin() )		return;	require_once(ABSPATH . 'wp-admin/custom-background.php');	$GLOBALS['custom_background'] =& new Custom_Background($admin_header_callback, $admin_image_div_callback);	add_action('admin_menu', array(&$GLOBALS['custom_background'], 'init'));}/** * Default custom background callback. * * @since 3.0.0 * @see add_custom_background() * @access protected */function _custom_background_cb() {	$background = get_background_image();	$color = get_background_color();	if ( ! $background && ! $color )		return;	$style = $color ? "background-color: #$color;" : '';	if ( $background ) {		$image = " background-image: url('$background');";		$repeat = get_theme_mod( 'background_repeat', 'repeat' );		if ( ! in_array( $repeat, array( 'no-repeat', 'repeat-x', 'repeat-y', 'repeat' ) ) )			$repeat = 'repeat';		$repeat = " background-repeat: $repeat;";		$position = get_theme_mod( 'background_position_x', 'left' );		if ( ! in_array( $position, array( 'center', 'right', 'left' ) ) )			$position = 'left';		$position = " background-position: top $position;";		$attachment = get_theme_mod( 'background_attachment', 'scroll' );		if ( ! in_array( $attachment, array( 'fixed', 'scroll' ) ) )			$attachment = 'scroll';		$attachment = " background-attachment: $attachment;";		$style .= $image . $repeat . $position . $attachment;	}?><style type="text/css">body { <?php echo trim( $style ); ?> }</style><?php}/** * Add callback for custom TinyMCE editor stylesheets. * * The parameter $stylesheet is the name of the stylesheet, relative to * the theme root. It also accepts an array of stylesheets. * It is optional and defaults to 'editor-style.css'. * * @since 3.0.0 * * @param mixed $stylesheet Optional. Stylesheet name or array thereof, relative to theme root. * 	Defaults to 'editor-style.css' */function add_editor_style( $stylesheet = 'editor-style.css' ) {	add_theme_support( 'editor-style' );	if ( ! is_admin() )		return;	global $editor_styles;	$editor_styles = (array) $editor_styles;	$stylesheet    = (array) $stylesheet;	if ( is_rtl() ) {		$rtl_stylesheet = str_replace('.css', '-rtl.css', $stylesheet[0]);		$stylesheet[] = $rtl_stylesheet;	}	$editor_styles = array_merge( $editor_styles, $stylesheet );}/** * Allows a theme to register its support of a certain feature * * Must be called in the theme's functions.php file to work. * If attached to a hook, it must be after_setup_theme. * The init hook may be too late for some features. * * @since 2.9.0 * @param string $feature the feature being added */function add_theme_support( $feature ) {	global $_wp_theme_features;	if ( func_num_args() == 1 )		$_wp_theme_features[$feature] = true;	else		$_wp_theme_features[$feature] = array_slice( func_get_args(), 1 );}/** * Allows a theme to de-register its support of a certain feature * * Should be called in the theme's functions.php file. Generally would * be used for child themes to override support from the parent theme. * * @since 3.0.0 * @see add_theme_support() * @param string $feature the feature being added * @return bool Whether feature was removed. */function remove_theme_support( $feature ) {	// Blacklist: for internal registrations not used directly by themes.	if ( in_array( $feature, array( 'custom-background', 'custom-header', 'editor-style', 'widgets' ) ) )		return false;	global $_wp_theme_features;	if ( ! isset( $_wp_theme_features[$feature] ) )		return false;	unset( $_wp_theme_features[$feature] );	return true;}/** * Checks a theme's support for a given feature * * @since 2.9.0 * @param string $feature the feature being checked * @return boolean */function current_theme_supports( $feature ) {	global $_wp_theme_features;	if ( !isset( $_wp_theme_features[$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 1 )		return true;	$args = array_slice( func_get_args(), 1 );	// @todo Allow pluggable arg checking	switch ( $feature ) {		case 'post-thumbnails':			// post-thumbnails can be registered for only certain content/post types by passing			// an array of types to add_theme_support().  If no array was passed, then			// any type is accepted			if ( true === $_wp_theme_features[$feature] )  // Registered for all types				return true;			$content_type = $args[0];			if ( in_array($content_type, $_wp_theme_features[$feature][0]) )				return true;			else				return false;			break;	}	return true;}/** * Checks a theme's support for a given feature before loading the functions which implement it. * * @since 2.9.0 * @param string $feature the feature being checked * @param string $include the file containing the functions that implement the feature */function require_if_theme_supports( $feature, $include) {	if ( current_theme_supports( $feature ) )		require ( $include );}/** * Checks an attachment being deleted to see if it's a header or background image. * * If true it removes the theme modification which would be pointing at the deleted * attachment * * @access private * @since 3.0.0 * @param int $id the attachment id */function _delete_attachment_theme_mod( $id ) {	$attachment_image = wp_get_attachment_url( $id );	$header_image = get_header_image();	$background_image = get_background_image();	if ( $header_image && $header_image == $attachment_image )		remove_theme_mod( 'header_image' );	if ( $background_image && $background_image == $attachment_image )		remove_theme_mod( 'background_image' );}add_action( 'delete_attachment', '_delete_attachment_theme_mod' );?>
<?php/** * Themes administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('switch_themes') && !current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );if ( current_user_can('switch_themes') && isset($_GET['action']) ) {	if ( 'activate' == $_GET['action'] ) {		check_admin_referer('switch-theme_' . $_GET['template']);		switch_theme($_GET['template'], $_GET['stylesheet']);		wp_redirect('themes.php?activated=true');		exit;	} else if ( 'delete' == $_GET['action'] ) {		check_admin_referer('delete-theme_' . $_GET['template']);		if ( !current_user_can('delete_themes') )			wp_die( __( 'Cheatin&#8217; uh?' ) );		delete_theme($_GET['template']);		wp_redirect('themes.php?deleted=true');		exit;	}}$title = __('Manage Themes');$parent_file = 'themes.php';if ( current_user_can( 'switch_themes' ) ) :$help = '<p>' . __('Aside from the default theme included with your WordPress installation, themes are designed and developed by third parties.') . '</p>';$help .= '<p>' . __('You can see your active theme at the top of the screen. Below are the other themes you have installed that are not currently in use. You can see what your site would look like with one of these themes by clicking the Preview link. To change themes, click the Activate link.') . '</p>';if ( current_user_can('install_themes') )	$help .= '<p>' . sprintf(__('If you would like to see more themes to choose from, click on the &#8220;Install Themes&#8221; tab and you will be able to browse or search for additional themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. Themes in the WordPress.org Theme Directory are designed and developed by third parties, and are licensed under the GNU General Public License, version 2, just like WordPress. Oh, and they&#8217;re free!'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);add_thickbox();wp_enqueue_script( 'theme-preview' );endif;require_once('./admin-header.php');if ( is_multisite() && current_user_can('edit_themes') ) {	?><div id="message0" class="updated"><p><?php printf( __('Administrator: new themes must be activated in the <a href="%s">Network Themes</a> screen before they appear here.'), admin_url( 'ms-themes.php') ); ?></p></div><?php}?><?php if ( ! validate_current_theme() ) : ?><div id="message1" class="updated"><p><?php _e('The active theme is broken.  Reverting to the default theme.'); ?></p></div><?php elseif ( isset($_GET['activated']) ) :		if ( isset($wp_registered_sidebars) && count( (array) $wp_registered_sidebars ) && current_user_can('edit_theme_options') ) { ?><div id="message2" class="updated"><p><?php printf( __('New theme activated. This theme supports widgets, please visit the <a href="%s">widgets settings</a> screen to configure them.'), admin_url( 'widgets.php' ) ); ?></p></div><?php		} else { ?><div id="message2" class="updated"><p><?php printf( __( 'New theme activated. <a href="%s">Visit site</a>' ), home_url( '/' ) ); ?></p></div><?php		}	elseif ( isset($_GET['deleted']) ) : ?><div id="message3" class="updated"><p><?php _e('Theme deleted.') ?></p></div><?php endif; ?><?php$themes = get_allowed_themes();$ct = current_theme_info();unset($themes[$ct->name]);uksort( $themes, "strnatcasecmp" );$theme_total = count( $themes );$per_page = 15;if ( isset( $_GET['pagenum'] ) )	$page = absint( $_GET['pagenum'] );if ( empty($page) )	$page = 1;$start = $offset = ( $page - 1 ) * $per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ) . '#themenav',	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($theme_total / $per_page),	'current' => $page));$themes = array_slice( $themes, $start, $per_page );?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a><?php if ( current_user_can('install_themes') ) { ?><a href="theme-install.php" class="nav-tab"><?php echo esc_html_x('Install Themes', 'theme'); ?></a><?php } ?></h2><h3><?php _e('Current Theme'); ?></h3><div id="current-theme"><?php if ( $ct->screenshot ) : ?><img src="<?php echo $ct->theme_root_uri . '/' . $ct->stylesheet . '/' . $ct->screenshot; ?>" alt="<?php _e('Current theme preview'); ?>" /><?php endif; ?><h4><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $ct->title, $ct->version, $ct->author) ; ?></h4><p class="theme-description"><?php echo $ct->description; ?></p><?php if ( current_user_can('edit_themes') && $ct->parent_theme ) { ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ), $ct->title, $ct->parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ) ); ?></p><?php } ?><?php if ( $ct->tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $ct->tags); ?></p><?php endif; ?><?php theme_update_available($ct); ?></div><div class="clear"></div><?phpif ( ! current_user_can( 'switch_themes' ) ) {	echo '</div>';	require( './admin-footer.php' );	exit;}?><h3><?php _e('Available Themes'); ?></h3><div class="clear"></div><?php if ( $theme_total ) { ?><?php if ( $page_links ) : ?><div class="tablenav"><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $per_page, $theme_total ) ),	number_format_i18n( $theme_total ),	$page_links); echo $page_links_text; ?></div></div><?php endif; ?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php$style = '';$theme_names = array_keys($themes);natcasesort($theme_names);$table = array();$rows = ceil(count($theme_names) / 3);for ( $row = 1; $row <= $rows; $row++ )	for ( $col = 1; $col <= 3; $col++ )		$table[$row][$col] = array_shift($theme_names);foreach ( $table as $row => $cols ) {?><tr><?phpforeach ( $cols as $col => $theme_name ) {	$class = array('available-theme');	if ( $row == 1 ) $class[] = 'top';	if ( $col == 1 ) $class[] = 'left';	if ( $row == $rows ) $class[] = 'bottom';	if ( $col == 3 ) $class[] = 'right';?>	<td class="<?php echo join(' ', $class); ?>"><?php if ( !empty($theme_name) ) :	$template = $themes[$theme_name]['Template'];	$stylesheet = $themes[$theme_name]['Stylesheet'];	$title = $themes[$theme_name]['Title'];	$version = $themes[$theme_name]['Version'];	$description = $themes[$theme_name]['Description'];	$author = $themes[$theme_name]['Author'];	$screenshot = $themes[$theme_name]['Screenshot'];	$stylesheet_dir = $themes[$theme_name]['Stylesheet Dir'];	$template_dir = $themes[$theme_name]['Template Dir'];	$parent_theme = $themes[$theme_name]['Parent Theme'];	$theme_root = $themes[$theme_name]['Theme Root'];	$theme_root_uri = $themes[$theme_name]['Theme Root URI'];	$preview_link = esc_url(get_option('home') . '/');	if ( is_ssl() )		$preview_link = str_replace( 'http://', 'https://', $preview_link );	$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), $preview_link ) );	$preview_text = esc_attr( sprintf( __('Preview of &#8220;%s&#8221;'), $title ) );	$tags = $themes[$theme_name]['Tags'];	$thickbox_class = 'thickbox thickbox-preview';	$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=".urlencode($template)."&amp;stylesheet=".urlencode($stylesheet), 'switch-theme_' . $template);	$activate_text = esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $title ) );	$actions = array();	$actions[] = '<a href="' . $activate_link .  '" class="activatelink" title="' . $activate_text . '">' . __('Activate') . '</a>';	$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $theme_name)) . '">' . __('Preview') . '</a>';	if ( current_user_can('delete_themes') )		$actions[] = '<a class="submitdelete deletion" href="' . wp_nonce_url("themes.php?action=delete&amp;template=$stylesheet", 'delete-theme_' . $stylesheet) . '" onclick="' . "return confirm('" . esc_js(sprintf( __("You are about to delete this theme '%s'\n  'Cancel' to stop, 'OK' to delete."), $theme_name )) . "');" . '">' . __('Delete') . '</a>';	$actions = apply_filters('theme_action_links', $actions, $themes[$theme_name]);	$actions = implode ( ' | ', $actions );?>		<a href="<?php echo $preview_link; ?>" class="<?php echo $thickbox_class; ?> screenshot"><?php if ( $screenshot ) : ?>			<img src="<?php echo $theme_root_uri . '/' . $stylesheet . '/' . $screenshot; ?>" alt="" /><?php endif; ?>		</a><h3><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $title, $version, $author) ; ?></h3><p class="description"><?php echo $description; ?></p><span class='action-links'><?php echo $actions ?></span>	<?php if ( current_user_can('edit_themes') && $parent_theme ) {	/* translators: 1: theme title, 2:  template dir, 3: stylesheet_dir, 4: theme title, 5: parent_theme */ ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ), $title, $parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ) ); ?></p><?php } ?><?php if ( $tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $tags); ?></p><?php endif; ?>		<?php theme_update_available( $themes[$theme_name] ); ?><?php endif; // end if not empty theme_name ?>	</td><?php } // end foreach $cols ?></tr><?php } // end foreach $table ?></table><?php } else { ?><p><?php	if ( current_user_can('install_themes') )		printf(__('You only have one theme installed right now. Live a little! You can choose from over 1,000 free themes in the WordPress.org Theme Directory at any time: just click on the <em><a href="%s">Install Themes</a></em> tab above.'), 'theme-install.php');	else		printf(__('Only the current theme is available to you. Contact the %s administrator for information about accessing additional themes.'), get_site_option('site_name'));	?></p><?php } // end if $theme_total?><br class="clear" /><?php if ( $page_links ) : ?><div class="tablenav"><?php echo "<div class='tablenav-pages'>$page_links_text</div>"; ?><br class="clear" /></div><?php endif; ?><br class="clear" /><?php// List broken themes, if any.$broken_themes = get_broken_themes();if ( current_user_can('edit_themes') && count( $broken_themes ) ) {?><h2><?php _e('Broken Themes'); ?> <?php if ( is_multisite() ) _e( '(Site admin only)' ); ?></h2><p><?php _e('The following themes are installed but incomplete. Themes must have a stylesheet and a template.'); ?></p><table id="broken-themes">	<tr>		<th><?php _e('Name'); ?></th>		<th><?php _e('Description'); ?></th>	</tr><?php	$theme = '';	$theme_names = array_keys($broken_themes);	natcasesort($theme_names);	foreach ($theme_names as $theme_name) {		$title = $broken_themes[$theme_name]['Title'];		$description = $broken_themes[$theme_name]['Description'];		$theme = ('class="alternate"' == $theme) ? '' : 'class="alternate"';		echo "		<tr $theme>			 <td>$title</td>			 <td>$description</td>		</tr>";	}?></table><?php}?></div><?php require('./admin-footer.php'); ?>
<?php/** * WordPress Administration Media API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_tabs() {	$_default_tabs = array(		'type' => __('From Computer'), // handler action suffix => tab text		'type_url' => __('From URL'),		'gallery' => __('Gallery'),		'library' => __('Media Library')	);	return apply_filters('media_upload_tabs', $_default_tabs);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tabs * @return unknown */function update_gallery_tab($tabs) {	global $wpdb;	if ( !isset($_REQUEST['post_id']) ) {		unset($tabs['gallery']);		return $tabs;	}	$post_id = intval($_REQUEST['post_id']);	if ( $post_id )		$attachments = intval( $wpdb->get_var( $wpdb->prepare( "SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d", $post_id ) ) );	if ( empty($attachments) ) {		unset($tabs['gallery']);		return $tabs;	}	$tabs['gallery'] = sprintf(__('Gallery (%s)'), "<span id='attachments-count'>$attachments</span>");	return $tabs;}add_filter('media_upload_tabs', 'update_gallery_tab');/** * {@internal Missing Short Description}} * * @since unknown */function the_media_upload_tabs() {	global $redir_tab;	$tabs = media_upload_tabs();	if ( !empty($tabs) ) {		echo "<ul id='sidemenu'>\n";		if ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) )			$current = $redir_tab;		elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) )			$current = $_GET['tab'];		else			$current = apply_filters('media_upload_default_tab', 'type');		foreach ( $tabs as $callback => $text ) {			$class = '';			if ( $current == $callback )				$class = " class='current'";			$href = add_query_arg(array('tab'=>$callback, 's'=>false, 'paged'=>false, 'post_mime_type'=>false, 'm'=>false));			$link = "<a href='" . esc_url($href) . "'$class>$text</a>";			echo "\t<li id='" . esc_attr("tab-$callback") . "'>$link</li>\n";		}		echo "</ul>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $rel * @param unknown_type $size * @return unknown */function get_image_send_to_editor($id, $caption, $title, $align, $url='', $rel = false, $size='medium', $alt = '') {	$html = get_image_tag($id, $alt, $title, $align, $size);	$rel = $rel ? ' rel="attachment wp-att-' . esc_attr($id).'"' : '';	if ( $url )		$html = '<a href="' . esc_attr($url) . "\"$rel>$html</a>";	$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );	return $html;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $size * @return unknown */function image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {	if ( empty($caption) || apply_filters( 'disable_captions', '' ) )		return $html;	$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';	if ( ! preg_match( '/width="([0-9]+)/', $html, $matches ) )		return $html;	$width = $matches[1];	$html = preg_replace( '/(class=["\'][^\'"]*)align(none|left|right|center)\s?/', '$1', $html );	if ( empty($align) )		$align = 'none';	$shcode = '[caption id="' . $id . '" align="align' . $align	. '" width="' . $width . '" caption="' . addslashes($caption) . '"]' . $html . '[/caption]';	return apply_filters( 'image_add_caption_shortcode', $shcode, $html );}add_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html */function media_send_to_editor($html) {?><script type="text/javascript">/* <![CDATA[ */var win = window.dialogArguments || opener || parent || top;win.send_to_editor('<?php echo addslashes($html); ?>');/* ]]> */</script><?php	exit;}/** * {@internal Missing Short Description}} * * This handles the file upload POST itself, creating the attachment post. * * @since unknown * * @param string $file_id Index into the {@link $_FILES} array of the upload * @param int $post_id The post ID the media is associated with * @param array $post_data allows you to overwrite some of the attachment * @param array $overrides allows you to override the {@link wp_handle_upload()} behavior * @return int the ID of the attachment */function media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {	$time = current_time('mysql');	if ( $post = get_post($post_id) ) {		if ( substr( $post->post_date, 0, 4 ) > 0 )			$time = $post->post_date;	}	$name = $_FILES[$file_id]['name'];	$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$name_parts = pathinfo($name);	$name = trim( substr( $name, 0, -(1 + strlen($name_parts['extension'])) ) );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = $name;	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the data	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );	}	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file_array * @param unknown_type $post_id * @param unknown_type $desc * @param unknown_type $post_data * @return unknown */function media_handle_sideload($file_array, $post_id, $desc = null, $post_data = array()) {	$overrides = array('test_form'=>false);	$file = wp_handle_sideload($file_array, $overrides);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = preg_replace('/\.[^.]+$/', '', basename($file));	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	$title = @$desc;	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the attachment metadata	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		return $url;	}	return $id;}/** * {@internal Missing Short Description}} * * Wrap iframe content (produced by $content_func) in a doctype, html head/body * etc any additional function args will be passed to content_func. * * @since unknown * * @param unknown_type $content_func */function wp_iframe($content_func /* ... */) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );// Check callback name for 'media'if ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) ) || 0 === strpos( $content_func, 'media' ) )	wp_enqueue_style( 'media' );wp_enqueue_style( 'ie' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time(); ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup';//]]></script><?phpdo_action('admin_enqueue_scripts', 'media-upload-popup');do_action('admin_print_styles-media-upload-popup');do_action('admin_print_styles');do_action('admin_print_scripts-media-upload-popup');do_action('admin_print_scripts');do_action('admin_head-media-upload-popup');do_action('admin_head');if ( is_string($content_func) )	do_action( "admin_head_{$content_func}" );?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>><?php	$args = func_get_args();	$args = array_slice($args, 1);	call_user_func_array($content_func, $args);	do_action('admin_print_footer_scripts');?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html><?php}/** * {@internal Missing Short Description}} * * @since unknown */function media_buttons() {	$do_image = $do_audio = $do_video = true;	if ( is_multisite() ) {		$media_buttons = get_site_option( 'mu_media_buttons' );		if ( empty($media_buttons['image']) )			$do_image = false;		if ( empty($media_buttons['audio']) )			$do_audio = false;		if ( empty($media_buttons['video']) )			$do_video = false;	}	$out = '';	if ( $do_image )		$out .= _media_button(__('Add an Image'), 'images/media-button-image.gif?ver=20100531', 'image');	if ( $do_video )		$out .= _media_button(__('Add Video'), 'images/media-button-video.gif?ver=20100531', 'video');	if ( $do_audio )		$out .= _media_button(__('Add Audio'), 'images/media-button-music.gif?ver=20100531', 'audio');	$out .= _media_button(__('Add Media'), 'images/media-button-other.gif?ver=20100531', 'media');	$context = apply_filters('media_buttons_context', __('Upload/Insert %s'));	printf($context, $out);}add_action( 'media_buttons', 'media_buttons' );function _media_button($title, $icon, $type) {	return "<a href='" . esc_url( get_upload_iframe_src($type) ) . "' id='add_$type' class='thickbox' title='$title'><img src='" . esc_url( admin_url( $icon ) ) . "' alt='$title' /></a>";}function get_upload_iframe_src($type) {	global $post_ID, $temp_ID;	$uploading_iframe_ID = (int) (0 == $post_ID ? $temp_ID : $post_ID);	$upload_iframe_src = add_query_arg('post_id', $uploading_iframe_ID, 'media-upload.php');	if ( 'media' != $type )		$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);	$upload_iframe_src = apply_filters($type . '_upload_iframe_src', $upload_iframe_src);	return add_query_arg('TB_iframe', true, $upload_iframe_src);}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_form_handler() {	check_admin_referer('media-form');	$errors = null;	if ( isset($_POST['send']) ) {		$keys = array_keys($_POST['send']);		$send_id = (int) array_shift($keys);	}	if ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {		$post = $_post = get_post($attachment_id, ARRAY_A);		if ( isset($attachment['post_content']) )			$post['post_content'] = $attachment['post_content'];		if ( isset($attachment['post_title']) )			$post['post_title'] = $attachment['post_title'];		if ( isset($attachment['post_excerpt']) )			$post['post_excerpt'] = $attachment['post_excerpt'];		if ( isset($attachment['menu_order']) )			$post['menu_order'] = $attachment['menu_order'];		if ( isset($send_id) && $attachment_id == $send_id ) {			if ( isset($attachment['post_parent']) )				$post['post_parent'] = $attachment['post_parent'];		}		$post = apply_filters('attachment_fields_to_save', $post, $attachment);		if ( isset($attachment['image_alt']) ) {			$image_alt = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);			if ( $image_alt != stripslashes($attachment['image_alt']) ) {				$image_alt = wp_strip_all_tags( stripslashes($attachment['image_alt']), true );				// update_meta expects slashed				update_post_meta( $attachment_id, '_wp_attachment_image_alt', addslashes($image_alt) );			}		}		if ( isset($post['errors']) ) {			$errors[$attachment_id] = $post['errors'];			unset($post['errors']);		}		if ( $post != $_post )			wp_update_post($post);		foreach ( get_attachment_taxonomies($post) as $t ) {			if ( isset($attachment[$t]) )				wp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);		}	}	if ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>		<script type="text/javascript">		/* <![CDATA[ */		var win = window.dialogArguments || opener || parent || top;		win.tb_remove();		/* ]]> */		</script>		<?php		exit;	}	if ( isset($send_id) ) {		$attachment = stripslashes_deep( $_POST['attachments'][$send_id] );		$html = $attachment['post_title'];		if ( !empty($attachment['url']) ) {			$rel = '';			if ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )				$rel = " rel='attachment wp-att-" . esc_attr($send_id) . "'";			$html = "<a href='{$attachment['url']}'$rel>$html</a>";		}		$html = apply_filters('media_send_to_editor', $html, $send_id, $attachment);		return media_send_to_editor($html);	}	return $errors;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_image() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$alt = $align = '';		$src = $_POST['insertonly']['src'];		if ( !empty($src) && !strpos($src, '://') )			$src = "http://$src";		$alt = esc_attr($_POST['insertonly']['alt']);		if ( isset($_POST['insertonly']['align']) ) {			$align = esc_attr($_POST['insertonly']['align']);			$class = " class='align$align'";		}		if ( !empty($src) )			$html = "<img src='" . esc_url($src) . "' alt='$alt'$class />";		$html = apply_filters('image_send_to_editor_url', $html, esc_url_raw($src), $alt, $align);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'image', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'image', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $post_id * @param unknown_type $desc * @return unknown */function media_sideload_image($file, $post_id, $desc = null) {	if (!empty($file) ) {		// Download file to temp location		$tmp = download_url($file);		// Set variables for storage		// fix file filename for query strings		preg_match('/[^\?]+\.(jpg|JPG|jpe|JPE|jpeg|JPEG|gif|GIF|png|PNG)/', $file, $matches);		$file_array['name'] = basename($matches[0]);		$file_array['tmp_name'] = $tmp;		// If error storing temporarily, unlink		if ( is_wp_error($tmp) ) {			@unlink($file_array['tmp_name']);			$file_array['tmp_name'] = '';		}		// do the validation and storage stuff		$id = media_handle_sideload($file_array, $post_id, @$desc);		$src = $id;		// If error storing permanently, unlink		if ( is_wp_error($id) ) {			@unlink($file_array['tmp_name']);			return $id;		}	}	// Finally check to make sure the file has been saved, then return the html	if ( !empty($src) ) {		$alt = @$desc;		$html = "<img src='$src' alt='$alt' />";		return $html;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_audio() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('audio_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'audio', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'audio', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_video() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);        if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('video_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'video', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'video', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_file() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )			$title = basename($href);		if ( !empty($title) && !empty($href) )			$html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('file_send_to_editor_url', $html, esc_url_raw($href), $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'file', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'file', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_gallery() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	wp_enqueue_script('admin-gallery');	return wp_iframe( 'media_upload_gallery_form', $errors );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_library() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	return wp_iframe( 'media_upload_library_form', $errors );}/** * Retrieve HTML for the image alignment radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_align_input_fields( $post, $checked = '' ) {	if ( empty($checked) )		$checked = get_user_setting('align', 'none');	$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));	if ( !array_key_exists( (string) $checked, $alignments ) )		$checked = 'none';	$out = array();	foreach ( $alignments as $name => $label ) {		$name = esc_attr($name);		$out[] = "<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'".		 	( $checked == $name ? " checked='checked'" : "" ) .			" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>";	}	return join("\n", $out);}/** * Retrieve HTML for the size radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_size_input_fields( $post, $check = '' ) {		// get a list of the actual pixel dimensions of each possible intermediate version of this image		$size_names = array('thumbnail' => __('Thumbnail'), 'medium' => __('Medium'), 'large' => __('Large'), 'full' => __('Full Size'));		if ( empty($check) )			$check = get_user_setting('imgsize', 'medium');		foreach ( $size_names as $size => $label ) {			$downsize = image_downsize($post->ID, $size);			$checked = '';			// is this size selectable?			$enabled = ( $downsize[3] || 'full' == $size );			$css_id = "image-size-{$size}-{$post->ID}";			// if this size is the default but that's not available, don't select it			if ( $size == $check ) {				if ( $enabled )					$checked = " checked='checked'";				else					$check = '';			} elseif ( !$check && $enabled && 'thumbnail' != $size ) {				// if $check is not enabled, default to the first available size that's bigger than a thumbnail				$check = $size;				$checked = " checked='checked'";			}			$html = "<div class='image-size-item'><input type='radio' " . disabled( $enabled, false, false ) . "name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />";			$html .= "<label for='{$css_id}'>$label</label>";			// only show the dimensions if that choice is available			if ( $enabled )				$html .= " <label for='{$css_id}' class='help'>" . sprintf( "(%d&nbsp;&times;&nbsp;%d)", $downsize[1], $downsize[2] ). "</label>";			$html .= '</div>';			$out[] = $html;		}		return array(			'label' => __('Size'),			'input' => 'html',			'html'  => join("\n", $out),		);}/** * Retrieve HTML for the Link URL buttons with the default link type as specified. * * @since unknown * * @param unknown_type $post * @param unknown_type $url_type * @return unknown */function image_link_input_fields($post, $url_type = '') {	$file = wp_get_attachment_url($post->ID);	$link = get_attachment_link($post->ID);	if ( empty($url_type) )		$url_type = get_user_setting('urlbutton', 'post');	$url = '';	if ( $url_type == 'file' )		$url = $file;	elseif ( $url_type == 'post' )		$url = $link;	return "	<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='" . esc_attr($url) . "' /><br />	<button type='button' class='button urlnone' title=''>" . __('None') . "</button>	<button type='button' class='button urlfile' title='" . esc_attr($file) . "'>" . __('File URL') . "</button>	<button type='button' class='button urlpost' title='" . esc_attr($link) . "'>" . __('Post URL') . "</button>";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function image_attachment_fields_to_edit($form_fields, $post) {	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);		if ( empty($alt) )			$alt = '';		$form_fields['post_title']['required'] = true;		$form_fields['image_alt'] = array(			'value' => $alt,			'label' => __('Alternate Text'),			'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')		);		$form_fields['align'] = array(			'label' => __('Alignment'),			'input' => 'html',			'html'  => image_align_input_fields($post, get_option('image_default_align')),		);		$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );	} else {		unset( $form_fields['image_alt'] );	}	return $form_fields;}add_filter('attachment_fields_to_edit', 'image_attachment_fields_to_edit', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function media_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);	return $form_fields;}function media_post_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['image_url']);	return $form_fields;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $attachment * @return unknown */function image_attachment_fields_to_save($post, $attachment) {	if ( substr($post['post_mime_type'], 0, 5) == 'image' ) {		if ( strlen(trim($post['post_title'])) == 0 ) {			$post['post_title'] = preg_replace('/\.\w+$/', '', basename($post['guid']));			$post['errors']['post_title']['errors'][] = __('Empty Title filled from filename.');		}	}	return $post;}add_filter('attachment_fields_to_save', 'image_attachment_fields_to_save', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $attachment_id * @param unknown_type $attachment * @return unknown */function image_media_send_to_editor($html, $attachment_id, $attachment) {	$post =& get_post($attachment_id);	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$url = $attachment['url'];		$align = !empty($attachment['align']) ? $attachment['align'] : 'none';		$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';		$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';		$rel = ( $url == get_attachment_link($attachment_id) );		return get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);	}	return $html;}add_filter('media_send_to_editor', 'image_media_send_to_editor', 10, 3);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $errors * @return unknown */function get_attachment_fields_to_edit($post, $errors = null) {	if ( is_int($post) )		$post =& get_post($post);	if ( is_array($post) )		$post = (object) $post;	$image_url = wp_get_attachment_url($post->ID);	$edit_post = sanitize_post($post, 'edit');	$form_fields = array(		'post_title'   => array(			'label'      => __('Title'),			'value'      => $edit_post->post_title		),		'image_alt'   => array(),		'post_excerpt' => array(			'label'      => __('Caption'),			'value'      => $edit_post->post_excerpt		),		'post_content' => array(			'label'      => __('Description'),			'value'      => $edit_post->post_content,			'input'      => 'textarea'		),		'url'          => array(			'label'      => __('Link URL'),			'input'      => 'html',			'html'       => image_link_input_fields($post, get_option('image_default_link_type')),			'helps'      => __('Enter a link URL or click above for presets.')		),		'menu_order'   => array(			'label'      => __('Order'),			'value'      => $edit_post->menu_order		),		'image_url'	=> array(			'label'      => __('File URL'),			'input'      => 'html',			'html'       => "<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='" . esc_attr($image_url) . "' /><br />",			'value'      => wp_get_attachment_url($post->ID),			'helps'      => __('Location of the uploaded file.')		)	);	foreach ( get_attachment_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$values = array();		foreach ( $terms as $term )			$values[] = $term->name;		$t['value'] = join(', ', $values);		$form_fields[$taxonomy] = $t;	}	// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default	// The recursive merge is easily traversed with array casting: foreach( (array) $things as $thing )	$form_fields = array_merge_recursive($form_fields, (array) $errors);	$form_fields = apply_filters('attachment_fields_to_edit', $form_fields, $post);	return $form_fields;}/** * Retrieve HTML for media items of post gallery. * * The HTML markup retrieved will be created for the progress of SWF Upload * component. Will also create link for showing and hiding the form to modify * the image attachment. * * @since unknown * * @param int $post_id Optional. Post ID. * @param array $errors Errors for attachment, if any. * @return string */function get_media_items( $post_id, $errors ) {	$attachments = array();	if ( $post_id ) {		$post = get_post($post_id);		if ( $post && $post->post_type == 'attachment' )			$attachments = array($post->ID => $post);		else			$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );	} else {		if ( is_array($GLOBALS['wp_the_query']->posts) )			foreach ( $GLOBALS['wp_the_query']->posts as $attachment )				$attachments[$attachment->ID] = $attachment;	}	$output = '';	foreach ( (array) $attachments as $id => $attachment ) {		if ( $attachment->post_status == 'trash' )			continue;		if ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )			$output .= "\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress'><div class='bar'></div></div><div id='media-upload-error-$id'></div><div class='filename'></div>$item\n</div>";	}	return $output;}/** * Retrieve HTML form for modifying the image attachment. * * @since unknown * * @param int $attachment_id Attachment ID for modification. * @param string|array $args Optional. Override defaults. * @return string HTML form for attachment. */function get_media_item( $attachment_id, $args = null ) {	global $redir_tab;	if ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )		$thumb_url = $thumb_url[0];	else		$thumb_url = false;	$post = get_post( $attachment_id );	$default_args = array( 'errors' => null, 'send' => post_type_supports(get_post_type($post->post_parent), 'editor'), 'delete' => true, 'toggle' => true, 'show_title' => true );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$toggle_on  = __( 'Show' );	$toggle_off = __( 'Hide' );	$filename = basename( $post->guid );	$title = esc_attr( $post->post_title );	if ( $_tags = get_the_tags( $attachment_id ) ) {		foreach ( $_tags as $tag )			$tags[] = $tag->name;		$tags = esc_attr( join( ', ', $tags ) );	}	$post_mime_types = get_post_mime_types();	$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );	$type = array_shift( $keys );	$type_html = "<input type='hidden' id='type-of-$attachment_id' value='" . esc_attr( $type ) . "' />";	$form_fields = get_attachment_fields_to_edit( $post, $errors );	if ( $toggle ) {		$class = empty( $errors ) ? 'startclosed' : 'startopen';		$toggle_links = "	<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>	<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>";	} else {		$class = 'form-table';		$toggle_links = '';	}	$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case	$display_title = $show_title ? "<div class='filename new'><span class='title'>" . wp_html_excerpt( $display_title, 60 ) . "</span></div>" : '';	$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );	$order = '';	foreach ( $form_fields as $key => $val ) {		if ( 'menu_order' == $key ) {			if ( $gallery )				$order = "<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ). "' /></div>";			else				$order = "<input type='hidden' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ) . "' />";			unset( $form_fields['menu_order'] );			break;		}	}	$media_dims = '';	$meta = wp_get_attachment_metadata( $post->ID );	if ( is_array( $meta ) && array_key_exists( 'width', $meta ) && array_key_exists( 'height', $meta ) )		$media_dims .= "<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> ";	$media_dims = apply_filters( 'media_meta', $media_dims, $post );	$image_edit_button = '';	if ( gd_edit_image_support( $post->post_mime_type ) ) {		$nonce = wp_create_nonce( "image_editor-$post->ID" );		$image_edit_button = "<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \"$nonce\" )' class='button' value='" . esc_attr__( 'Edit Image' ) . "' /> <img src='" . esc_url( admin_url( 'images/wpspin_light.gif' ) ) . "' class='imgedit-wait-spin' alt='' />";	}	$attachment_url = get_permalink( $attachment_id );	$item = "	$type_html	$toggle_links	$order	$display_title	<table class='slidetoggle describe $class'>		<thead class='media-item-info' id='media-head-$post->ID'>		<tr valign='top'>			<td class='A1B1' id='thumbnail-head-$post->ID'>			<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' style='margin-top: 3px' /></a></p>			<p>$image_edit_button</p>			</td>			<td>			<p><strong>" . __('File name:') . "</strong> $filename</p>			<p><strong>" . __('File type:') . "</strong> $post->post_mime_type</p>			<p><strong>" . __('Upload date:') . "</strong> " . mysql2date( get_option('date_format'), $post->post_date ). '</p>';			if ( !empty( $media_dims ) )				$item .= "<p><strong>" . __('Dimensions:') . "</strong> $media_dims</p>\n";			$item .= "</td></tr>\n";	$item .= "		</thead>		<tbody>		<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>		<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\n";	$defaults = array(		'input'      => 'text',		'required'   => false,		'value'      => '',		'extra_rows' => array(),	);	if ( $send )		$send = "<input type='submit' class='button' name='send[$attachment_id]' value='" . esc_attr__( 'Insert into Post' ) . "' />";	if ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {		if ( !EMPTY_TRASH_DAYS ) {			$delete = "<a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Delete Permanently' ) . '</a>';		} elseif ( !MEDIA_TRASH ) {			$delete = "<a href='#' class='del-link' onclick=\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\">" . __( 'Delete' ) . "</a>			 <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>" . sprintf( __( 'You are about to delete <strong>%s</strong>.' ), $filename ) . "			 <a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='button'>" . __( 'Continue' ) . "</a>			 <a href='#' class='button' onclick=\"this.parentNode.style.display='none';return false;\">" . __( 'Cancel' ) . "</a>			 </div>";		} else {			$delete = "<a href='" . wp_nonce_url( "post.php?action=trash&amp;post=$attachment_id", 'trash-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Move to Trash' ) . "</a>			<a href='" . wp_nonce_url( "post.php?action=untrash&amp;post=$attachment_id", 'untrash-attachment_' . $attachment_id ) . "' id='undo[$attachment_id]' class='undo hidden'>" . __( 'Undo' ) . "</a>";		}	} else {		$delete = '';	}	$thumbnail = '';	$calling_post_id = 0;	if ( isset( $_GET['post_id'] ) )		$calling_post_id = absint( $_GET['post_id'] );	elseif ( isset( $_POST ) && count( $_POST ) ) // Like for async-upload where $_GET['post_id'] isn't set		$calling_post_id = $post->post_parent;	if ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {		$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$calling_post_id" );		$thumbnail = "<a class='wp-post-thumbnail' id='wp-post-thumbnail-" . $attachment_id . "' href='#' onclick='WPSetAsThumbnail(\"$attachment_id\", \"$ajax_nonce\");return false;'>" . esc_html__( "Use as featured image" ) . "</a>";	}	if ( ( $send || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) )		$form_fields['buttons'] = array( 'tr' => "\t\t<tr class='submit'><td></td><td class='savesend'>$send $thumbnail $delete</td></tr>\n" );	$hidden_fields = array();	foreach ( $form_fields as $id => $field ) {		if ( $id{0} == '_' )			continue;		if ( !empty( $field['tr'] ) ) {			$item .= $field['tr'];			continue;		}		$field = array_merge( $defaults, $field );		$name = "attachments[$attachment_id][$id]";		if ( $field['input'] == 'hidden' ) {			$hidden_fields[$name] = $field['value'];			continue;		}		$required      = $field['required'] ? '<span class="alignright"><abbr title="required" class="required">*</abbr></span>' : '';		$aria_required = $field['required'] ? " aria-required='true' " : '';		$class  = $id;		$class .= $field['required'] ? ' form-required' : '';		$item .= "\t\t<tr class='$class'>\n\t\t\t<th valign='top' scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label></th>\n\t\t\t<td class='field'>";		if ( !empty( $field[ $field['input'] ] ) )			$item .= $field[ $field['input'] ];		elseif ( $field['input'] == 'textarea' ) {			$item .= "<textarea type='text' id='$name' name='$name' $aria_required>" . esc_html( $field['value'] ) . '</textarea>';		} else {			$item .= "<input type='text' class='text' id='$name' name='$name' value='" . esc_attr( $field['value'] ) . "' $aria_required />";		}		if ( !empty( $field['helps'] ) )			$item .= "<p class='help'>" . join( "</p>\n<p class='help'>", array_unique( (array) $field['helps'] ) ) . '</p>';		$item .= "</td>\n\t\t</tr>\n";		$extra_rows = array();		if ( !empty( $field['errors'] ) )			foreach ( array_unique( (array) $field['errors'] ) as $error )				$extra_rows['error'][] = $error;		if ( !empty( $field['extra_rows'] ) )			foreach ( $field['extra_rows'] as $class => $rows )				foreach ( (array) $rows as $html )					$extra_rows[$class][] = $html;		foreach ( $extra_rows as $class => $rows )			foreach ( $rows as $html )				$item .= "\t\t<tr><td></td><td class='$class'>$html</td></tr>\n";	}	if ( !empty( $form_fields['_final'] ) )		$item .= "\t\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\n";	$item .= "\t</tbody>\n";	$item .= "\t</table>\n";	foreach ( $hidden_fields as $name => $value )		$item .= "\t<input type='hidden' name='$name' id='$name' value='" . esc_attr( $value ) . "' />\n";	if ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {		$parent = (int) $_REQUEST['post_id'];		$parent_name = "attachments[$attachment_id][post_parent]";		$item .= "\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\n";	}	return $item;}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_header() {	?>	<script type="text/javascript">post_id = <?php echo intval($_REQUEST['post_id']); ?>;</script>	<div id="media-upload-header">	<?php the_media_upload_tabs(); ?>	</div>	<?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_form( $errors = null ) {	global $type, $tab;	$flash_action_url = admin_url('async-upload.php');	// If Mac and mod_security, no Flash. :(	$flash = true;	if ( false !== stripos($_SERVER['HTTP_USER_AGENT'], 'mac') && apache_mod_loaded('mod_security') )		$flash = false;	$flash = apply_filters('flash_uploader', $flash);	$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;	$upload_size_unit = $max_upload_size =  wp_max_upload_size();	$sizes = array( 'KB', 'MB', 'GB' );	for ( $u = -1; $upload_size_unit > 1024 && $u < count( $sizes ) - 1; $u++ )		$upload_size_unit /= 1024;	if ( $u < 0 ) {		$upload_size_unit = 0;		$u = 0;	} else {		$upload_size_unit = (int) $upload_size_unit;	}?><script type="text/javascript">//<![CDATA[var uploaderMode = 0;jQuery(document).ready(function($){	uploaderMode = getUserSetting('uploader');	$('.upload-html-bypass a').click(function(){deleteUserSetting('uploader');uploaderMode=0;swfuploadPreLoad();return false;});	$('.upload-flash-bypass a').click(function(){setUserSetting('uploader', '1');uploaderMode=1;swfuploadPreLoad();return false;});});//]]></script><div id="media-upload-notice"><?php if (isset($errors['upload_notice']) ) { ?>	<?php echo $errors['upload_notice']; ?><?php } ?></div><div id="media-upload-error"><?php if (isset($errors['upload_error']) && is_wp_error($errors['upload_error'])) { ?>	<?php echo $errors['upload_error']->get_error_message(); ?><?php } ?></div><?php// Check quota for this blog if multisiteif ( is_multisite() && !is_upload_space_available() ) {	echo '<p>' . sprintf( __( 'Sorry, you have filled your storage quota (%s MB).' ), get_space_allowed() ) . '</p>';	return;}do_action('pre-upload-ui');if ( $flash ) : ?><script type="text/javascript">//<![CDATA[var swfu;SWFUpload.onload = function() {	var settings = {			button_text: '<span class="button"><?php _e('Select Files'); ?><\/span>',			button_text_style: '.button { text-align: center; font-weight: bold; font-family:"Lucida Grande",Verdana,Arial,"Bitstream Vera Sans",sans-serif; font-size: 11px; text-shadow: 0 1px 0 #FFFFFF; color:#464646; }',			button_height: "23",			button_width: "132",			button_text_top_padding: 3,			button_image_url: '<?php echo includes_url('images/upload.png?ver=20100531'); ?>',			button_placeholder_id: "flash-browse-button",			upload_url : "<?php echo esc_attr( $flash_action_url ); ?>",			flash_url : "<?php echo includes_url('js/swfupload/swfupload.swf'); ?>",			file_post_name: "async-upload",			file_types: "<?php echo apply_filters('upload_file_glob', '*.*'); ?>",			post_params : {				"post_id" : "<?php echo $post_id; ?>",				"auth_cookie" : "<?php echo (is_ssl() ? $_COOKIE[SECURE_AUTH_COOKIE] : $_COOKIE[AUTH_COOKIE]); ?>",				"logged_in_cookie": "<?php echo $_COOKIE[LOGGED_IN_COOKIE]; ?>",				"_wpnonce" : "<?php echo wp_create_nonce('media-form'); ?>",				"type" : "<?php echo $type; ?>",				"tab" : "<?php echo $tab; ?>",				"short" : "1"			},			file_size_limit : "<?php echo $max_upload_size; ?>b",			file_dialog_start_handler : fileDialogStart,			file_queued_handler : fileQueued,			upload_start_handler : uploadStart,			upload_progress_handler : uploadProgress,			upload_error_handler : uploadError,			upload_success_handler : uploadSuccess,			upload_complete_handler : uploadComplete,			file_queue_error_handler : fileQueueError,			file_dialog_complete_handler : fileDialogComplete,			swfupload_pre_load_handler: swfuploadPreLoad,			swfupload_load_failed_handler: swfuploadLoadFailed,			custom_settings : {				degraded_element_id : "html-upload-ui", // id of the element displayed when swfupload is unavailable				swfupload_element_id : "flash-upload-ui" // id of the element displayed when swfupload is available			},			debug: false		};		swfu = new SWFUpload(settings);};//]]></script><div id="flash-upload-ui" class="hide-if-no-js"><?php do_action('pre-flash-upload-ui'); ?>	<div>	<?php _e( 'Choose files to upload' ); ?>	<div id="flash-browse-button"></div>	<span><input id="cancel-upload" disabled="disabled" onclick="cancelUpload()" type="button" value="<?php esc_attr_e('Cancel Upload'); ?>" class="button" /></span>	</div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p><?php do_action('post-flash-upload-ui'); ?>	<p class="howto"><?php _e('After a file has been uploaded, you can add titles and descriptions.'); ?></p></div><?php endif; // $flash ?><div id="html-upload-ui"><?php do_action('pre-html-upload-ui'); ?>	<p id="async-upload-wrap">	<label class="screen-reader-text" for="async-upload"><?php _e('Upload'); ?></label>	<input type="file" name="async-upload" id="async-upload" /> <input type="submit" class="button" name="html-upload" value="<?php esc_attr_e('Upload'); ?>" /> <a href="#" onclick="try{top.tb_remove();}catch(e){}; return false;"><?php _e('Cancel'); ?></a>	</p>	<div class="clear"></div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p>	<?php if ( is_lighttpd_before_150() ): ?>	<p><?php _e('If you want to use all capabilities of the uploader, like uploading multiple files at once, please upgrade to lighttpd 1.5.'); ?></p>	<?php endif;?><?php do_action('post-html-upload-ui', $flash); ?></div><?php do_action('post-upload-ui'); ?><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="submit" class="hidden" name="save" value="" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><h3 class="media-title"><?php _e('Add media files from your computer'); ?></h3><?php media_upload_form( $errors ); ?><script type="text/javascript">//<![CDATA[jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});	}	updateMediaForm();});//]]></script><div id="media-items"><?phpif ( $id ) {	if ( !is_wp_error($id) ) {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_items( $id, $errors );	} else {		echo '<div id="media-upload-error">'.esc_html($id->get_error_message()).'</div>';		exit;	}}?></div><p class="savebutton ml-submit"><input type="submit" class="button" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_url_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$callback = "type_url_form_$type";?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><?php if ( is_callable($callback) ) { ?><h3 class="media-title"><?php _e('Add media file from URL'); ?></h3><script type="text/javascript">//<![CDATA[var addExtImage = {	width : '',	height : '',	align : 'alignnone',	insert : function() {		var t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';		if ( '' == f.src.value || '' == t.width )			return false;		if ( f.title.value ) {			title = f.title.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');			title = ' title="'+title+'"';		}		if ( f.alt.value )			alt = f.alt.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php if ( ! apply_filters( 'disable_captions', '' ) ) { ?>		if ( f.caption.value )			caption = f.caption.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php } ?>		cls = caption ? '' : ' class="'+t.align+'"';		html = '<img alt="'+alt+'" src="'+f.src.value+'"'+title+cls+' width="'+t.width+'" height="'+t.height+'" />';		if ( f.url.value )			html = '<a href="'+f.url.value+'">'+html+'</a>';		if ( caption )			html = '[caption id="" align="'+t.align+'" width="'+t.width+'" caption="'+caption+'"]'+html+'[/caption]';		var win = window.dialogArguments || opener || parent || top;		win.send_to_editor(html);		return false;	},	resetImageData : function() {		var t = addExtImage;		t.width = t.height = '';		document.getElementById('go_button').style.color = '#bbb';		if ( ! document.forms[0].src.value )			document.getElementById('status_img').innerHTML = '*';		else document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>" alt="" />';	},	updateImageData : function() {		var t = addExtImage;		t.width = t.preloadImg.width;		t.height = t.preloadImg.height;		document.getElementById('go_button').style.color = '#333';		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>" alt="" />';	},	getImageData : function() {		var t = addExtImage, src = document.forms[0].src.value;		if ( ! src ) {			t.resetImageData();			return false;		}		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />';		t.preloadImg = new Image();		t.preloadImg.onload = t.updateImageData;		t.preloadImg.onerror = t.resetImageData;		t.preloadImg.src = src;	}}//]]></script><div id="media-items"><div class="media-item media-blank"><?php echo apply_filters($callback, call_user_func($callback)); ?></div></div></form><?php	} else {		wp_die( __('Unknown action.') );	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_gallery_form($errors) {	global $redir_tab, $type;	$redir_tab = 'gallery';	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=gallery&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="sort-buttons" class="hide-if-no-js"><span><?php _e('All Tabs:'); ?><a href="#" id="showall"><?php _e('Show'); ?></a><a href="#" id="hideall" style="display:none;"><?php _e('Hide'); ?></a></span><?php _e('Sort Order:'); ?><a href="#" id="asc"><?php _e('Ascending'); ?></a> |<a href="#" id="desc"><?php _e('Descending'); ?></a> |<a href="#" id="clear"><?php _ex('Clear', 'verb'); ?></a></div><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="gallery-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><table class="widefat" cellspacing="0"><thead><tr><th><?php _e('Media'); ?></th><th class="order-head"><?php _e('Order'); ?></th><th class="actions-head"><?php _e('Actions'); ?></th></tr></thead></table><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items($post_id, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" style="display:none;" name="save" id="save-all" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="type" value="<?php echo esc_attr( $GLOBALS['type'] ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $GLOBALS['tab'] ); ?>" /></p><div id="gallery-settings" style="display:none;"><div class="title"><?php _e('Gallery Settings'); ?></div><table id="basic" class="describe"><tbody>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Link thumbnails to:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" name="linkto" id="linkto-file" value="file" />		<label for="linkto-file" class="radio"><?php _e('Image File'); ?></label>		<input type="radio" checked="checked" name="linkto" id="linkto-post" value="post" />		<label for="linkto-post" class="radio"><?php _e('Attachment Page'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order images by:'); ?></span>		</label>	</th>	<td class="field">		<select id="orderby" name="orderby">			<option value="menu_order" selected="selected"><?php _e('Menu order'); ?></option>			<option value="title"><?php _e('Title'); ?></option>			<option value="ID"><?php _e('Date/Time'); ?></option>			<option value="rand"><?php _e('Random'); ?></option>		</select>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" checked="checked" name="order" id="order-asc" value="asc" />		<label for="order-asc" class="radio"><?php _e('Ascending'); ?></label>		<input type="radio" name="order" id="order-desc" value="desc" />		<label for="order-desc" class="radio"><?php _e('Descending'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Gallery columns:'); ?></span>		</label>	</th>	<td class="field">		<select id="columns" name="columns">			<option value="2">2</option>			<option value="3" selected="selected">3</option>			<option value="4">4</option>			<option value="5">5</option>			<option value="6">6</option>			<option value="7">7</option>			<option value="8">8</option>			<option value="9">9</option>		</select>	</td>	</tr></tbody></table><p class="ml-submit"><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="insert-gallery" id="insert-gallery" value="<?php esc_attr_e( 'Insert gallery' ); ?>" /><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="update-gallery" id="update-gallery" value="<?php esc_attr_e( 'Update gallery settings' ); ?>" /></p></div></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_library_form($errors) {	global $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=library&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$_GET['paged'] = isset( $_GET['paged'] ) ? intval($_GET['paged']) : 0;	if ( $_GET['paged'] < 1 )		$_GET['paged'] = 1;	$start = ( $_GET['paged'] - 1 ) * 10;	if ( $start < 1 )		$start = 0;	add_filter( 'post_limits', create_function( '$a', "return 'LIMIT $start, 10';" ) );	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();?><form id="filter" action="" method="get"><input type="hidden" name="type" value="<?php echo esc_attr( $type ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $tab ); ?>" /><input type="hidden" name="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="post_mime_type" value="<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>" /><p id="media-search" class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e('Search Media');?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $_type => $reals )	foreach ( $reals as $real )		if ( isset($num_posts[$_type]) )			$num_posts[$_type] += $_num_posts[$real];		else			$num_posts[$_type] = $_num_posts[$real];// If available type specified by media button clicked, filter by that typeif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {	$_GET['post_mime_type'] = $type;	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}if ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )	$class = ' class="current"';else	$class = '';$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . "'$class>".__('All Types')."</a>";foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . "'$class>" . sprintf(_n($label[2][0], $label[2][1], $num_posts[$mime_type]), "<span id='$mime_type-counter'>" . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';}echo implode(' | </li>', $type_links) . '</li>';unset($type_links);?></ul><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($wp_query->found_posts / 10),	'current' => $_GET['paged']));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><?php$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?><select name='m'><option<?php selected( @$_GET['m'], 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . "'>";	echo esc_html( $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear" );	echo "</option>\n";}?></select><?php } ?><input type="submit" id="post-query-submit" value="<?php echo esc_attr( __( 'Filter &#187;' ) ); ?>" class="button-secondary" /></div><br class="clear" /></div></form><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="library-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items(null, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_image() {	if ( !apply_filters( 'disable_captions', '' ) ) {		$caption = '		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="caption">' . __('Image Caption') . '</label></span>			</th>			<td class="field"><input id="caption" name="caption" value="" type="text" /></td>		</tr>';	} else {		$caption = '';	}	$default_align = get_option('image_default_align');	if ( empty($default_align) )		$default_align = 'none';	return '	<h4 class="media-sub-title">' . __('Insert an image from another web site') . '</h4>	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label" style="width:130px;">				<span class="alignleft"><label for="src">' . __('Image URL') . '</label></span>				<span class="alignright"><abbr id="status_img" title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="src" name="src" value="" type="text" aria-required="true" onblur="addExtImage.getImageData()" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="title">' . __('Image Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="title" name="title" value="" type="text" aria-required="true" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="alt">' . __('Alternate Text') . '</label></span>			</th>			<td class="field"><input id="alt" name="alt" value="" type="text" aria-required="true" />			<p class="help">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>		</tr>		' . $caption . '		<tr class="align">			<th valign="top" scope="row" class="label"><p><label for="align">' . __('Alignment') . '</label></p></th>			<td class="field">				<input name="align" id="align-none" value="none" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'none' ? ' checked="checked"' : '').' />				<label for="align-none" class="align image-align-none-label">' . __('None') . '</label>				<input name="align" id="align-left" value="left" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'left' ? ' checked="checked"' : '').' />				<label for="align-left" class="align image-align-left-label">' . __('Left') . '</label>				<input name="align" id="align-center" value="center" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'center' ? ' checked="checked"' : '').' />				<label for="align-center" class="align image-align-center-label">' . __('Center') . '</label>				<input name="align" id="align-right" value="right" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'right' ? ' checked="checked"' : '').' />				<label for="align-right" class="align image-align-right-label">' . __('Right') . '</label>			</td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="url">' . __('Link Image To:') . '</label></span>			</th>			<td class="field"><input id="url" name="url" value="" type="text" /><br />			<button type="button" class="button" value="" onclick="document.forms[0].url.value=null">' . __('None') . '</button>			<button type="button" class="button" value="" onclick="document.forms[0].url.value=document.forms[0].src.value">' . __('Link to image') . '</button>			<p class="help">' . __('Enter a link URL or click above for presets.') . '</p></td>		</tr>	' . _insert_into_post_button('image') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_audio() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Audio File URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Still Alive by Jonathan Coulton&#8221;') . '</td></tr>	' . _insert_into_post_button('audio') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_video() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Video URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Lucy on YouTube&#8220;') . '</td></tr>	' . _insert_into_post_button('video') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_file() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</td></tr>	' . _insert_into_post_button('file') . '	</tbody></table>';}function _insert_into_post_button($type) {	if ( !post_type_supports(get_post_type($_GET['post_id']), 'editor') )		return '';	if ( 'image' == $type )	return '		<tr>			<td></td>			<td>				<input type="button" class="button" id="go_button" style="color:#bbb;" onclick="addExtImage.insert()" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';	return '		<tr>			<td></td>			<td>				<input type="submit" class="button" name="insertonlybutton" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';}/** * {@internal Missing Short Description}} * * Support a GET parameter for disabling the flash uploader. * * @since unknown * * @param unknown_type $flash * @return unknown */function media_upload_use_flash($flash) {	if ( array_key_exists('flash', $_REQUEST) )		$flash = !empty($_REQUEST['flash']);	return $flash;}add_filter('flash_uploader', 'media_upload_use_flash');/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_flash_bypass() {	echo '<p class="upload-flash-bypass">';	printf( __('You are using the Flash uploader.  Problems?  Try the <a href="%s">Browser uploader</a> instead.'), esc_url(add_query_arg('flash', 0)) );	echo '</p>';}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_html_bypass($flash = true) {	echo '<p class="upload-html-bypass hide-if-no-js">';	_e('You are using the Browser uploader.');	if ( $flash ) {		// the user manually selected the browser uploader, so let them switch back to Flash		echo ' ';		printf( __('Try the <a href="%s">Flash uploader</a> instead.'), esc_url(add_query_arg('flash', 1)) );	}	echo "</p>\n";}add_action('post-flash-upload-ui', 'media_upload_flash_bypass');add_action('post-html-upload-ui', 'media_upload_html_bypass');/** * {@internal Missing Short Description}} * * Make sure the GET parameter sticks when we submit a form. * * @since unknown * * @param unknown_type $url * @return unknown */function media_upload_bypass_url($url) {	if ( array_key_exists('flash', $_REQUEST) )		$url = add_query_arg('flash', intval($_REQUEST['flash']));	return $url;}add_filter('media_upload_form_url', 'media_upload_bypass_url');add_filter('async_upload_image', 'get_media_item', 10, 2);add_filter('async_upload_audio', 'get_media_item', 10, 2);add_filter('async_upload_video', 'get_media_item', 10, 2);add_filter('async_upload_file', 'get_media_item', 10, 2);add_action('media_upload_image', 'media_upload_image');add_action('media_upload_audio', 'media_upload_audio');add_action('media_upload_video', 'media_upload_video');add_action('media_upload_file', 'media_upload_file');add_filter('media_upload_gallery', 'media_upload_gallery');add_filter('media_upload_library', 'media_upload_library');
<?php/** * Multisite administration functions. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Determine if uploaded file exceeds space quota. * * @since 3.0.0 * * @param array $file $_FILES array for a given file. * @return array $_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise. */function check_upload_size( $file ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return $file;	if ( $file['error'] != '0' ) // there's already an error		return $file;	if ( defined( 'WP_IMPORTING' ) )		return $file;	$space_allowed = 1048576 * get_space_allowed();	$space_used = get_dirsize( BLOGUPLOADDIR );	$space_left = $space_allowed - $space_used;	$file_size = filesize( $file['tmp_name'] );	if ( $space_left < $file_size )		$file['error'] = sprintf( __( 'Not enough space to upload. %1$s KB needed.' ), number_format( ($file_size - $space_left) /1024 ) );	if ( $file_size > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		$file['error'] = sprintf(__('This file is too big. Files must be less than %1$s KB in size.'), get_site_option( 'fileupload_maxk', 1500 ) );	if ( upload_is_user_over_quota( false ) ) {		$file['error'] = __( 'You have used your space quota. Please delete files before uploading.' );	}	if ( $file['error'] != '0' && !isset($_POST['html-upload']) )		wp_die( $file['error'] . ' <a href="javascript:history.go(-1)">' . __( 'Back' ) . '</a>' );	return $file;}add_filter( 'wp_handle_upload_prefilter', 'check_upload_size' );/** * Delete a blog * * @since 3.0.0 * * @param int $blog_id Blog ID * @param bool $drop True if blog's table should be dropped.  Default is false. * @return void */function wpmu_delete_blog( $blog_id, $drop = false ) {	global $wpdb;	$switch = false;	if ( $blog_id != $wpdb->blogid ) {		$switch = true;		switch_to_blog( $blog_id );	}	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	do_action( 'delete_blog', $blog_id, $drop );	$users = get_users_of_blog( $blog_id );	// Remove users from this blog.	if ( ! empty( $users ) ) {		foreach ( $users as $user ) {			remove_user_from_blog( $user->user_id, $blog_id) ;		}	}	update_blog_status( $blog_id, 'deleted', 1 );	if ( $drop ) {		if ( substr( $blog_prefix, -1 ) == '_' )			$blog_prefix =  substr( $blog_prefix, 0, -1 ) . '\_';		$drop_tables = $wpdb->get_results( "SHOW TABLES LIKE '{$blog_prefix}%'", ARRAY_A );		$drop_tables = apply_filters( 'wpmu_drop_tables', $drop_tables );		reset( $drop_tables );		foreach ( (array) $drop_tables as $drop_table) {			$wpdb->query( "DROP TABLE IF EXISTS ". current( $drop_table ) ."" );		}		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->blogs WHERE blog_id = %d", $blog_id ) );		$dir = apply_filters( 'wpmu_delete_blog_upload_dir', WP_CONTENT_DIR . "/blogs.dir/{$blog_id}/files/", $blog_id );		$dir = rtrim( $dir, DIRECTORY_SEPARATOR );		$top_dir = $dir;		$stack = array($dir);		$index = 0;		while ( $index < count( $stack ) ) {			# Get indexed directory from stack			$dir = $stack[$index];			$dh = @opendir( $dir );			if ( $dh ) {				while ( ( $file = @readdir( $dh ) ) !== false ) {					if ( $file == '.' || $file == '..' )						continue;					if ( @is_dir( $dir . DIRECTORY_SEPARATOR . $file ) )						$stack[] = $dir . DIRECTORY_SEPARATOR . $file;					else if ( @is_file( $dir . DIRECTORY_SEPARATOR . $file ) )						@unlink( $dir . DIRECTORY_SEPARATOR . $file );				}			}			$index++;		}		$stack = array_reverse( $stack );  // Last added dirs are deepest		foreach( (array) $stack as $dir ) {			if ( $dir != $top_dir)			@rmdir( $dir );		}	}	$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE meta_key = '{$blog_prefix}autosave_draft_ids'" );	$blogs = get_site_option( 'blog_list' );	if ( is_array( $blogs ) ) {		foreach ( $blogs as $n => $blog ) {			if ( $blog['blog_id'] == $blog_id )				unset( $blogs[$n] );		}		update_site_option( 'blog_list', $blogs );	}	if ( $switch === true )		restore_current_blog();}// @todo Merge with wp_delete_user() ?function wpmu_delete_user( $id ) {	global $wpdb;	$id = (int) $id;	do_action( 'wpmu_delete_user', $id );	$blogs = get_blogs_of_user( $id );	if ( ! empty( $blogs ) ) {		foreach ( $blogs as $blog ) {			switch_to_blog( $blog->userblog_id );			remove_user_from_blog( $id, $blog->userblog_id );			$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id ) );			foreach ( (array) $post_ids as $post_id ) {				wp_delete_post( $post_id );			}			// Clean links			$link_ids = $wpdb->get_col( $wpdb->prepare( "SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id ) );			if ( $link_ids ) {				foreach ( $link_ids as $link_id )					wp_delete_link( $link_id );			}			restore_current_blog();		}	}	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->users WHERE ID = %d", $id ) );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id ) );	clean_user_cache( $id );	// allow for commit transaction	do_action( 'deleted_user', $id );	return true;}function confirm_delete_users( $users ) {	global $current_user;	if ( !is_array( $users ) )		return false;    screen_icon();    ?>	<h2><?php esc_html_e( 'Users' ); ?></h2>	<p><?php _e( 'Transfer or delete posts and links before deleting users.' ); ?></p>	<form action="ms-edit.php?action=dodelete" method="post">	<input type="hidden" name="dodelete" />    <?php	wp_nonce_field( 'ms-users-delete' );	$site_admins = get_super_admins();	$admin_out = "<option value='$current_user->ID'>$current_user->user_login</option>";	foreach ( ( $allusers = (array) $_POST['allusers'] ) as $key => $val ) {		if ( $val != '' && $val != '0' ) {			$delete_user = new WP_User( $val );			if ( in_array( $delete_user->user_login, $site_admins ) )				wp_die( sprintf( __( 'Warning! User cannot be deleted. The user %s is a network admnistrator.' ), $delete_user->user_login ) );			echo "<input type='hidden' name='user[]' value='{$val}'/>\n";			$blogs = get_blogs_of_user( $val, true );			if ( !empty( $blogs ) ) {				?>				<br /><fieldset><p><legend><?php printf( __( "What should be done with posts and links owned by <em>%s</em>?" ), $delete_user->user_login ); ?></legend></p>				<?php				foreach ( (array) $blogs as $key => $details ) {					$blog_users = get_users_of_blog( $details->userblog_id );					if ( is_array( $blog_users ) && !empty( $blog_users ) ) {						$user_site = "<a href='" . esc_url( get_home_url( $details->userblog_id ) ) . "'>{$details->blogname}</a>";						$user_dropdown = "<select name='blog[$val][{$key}]'>";						$user_list = '';						foreach ( $blog_users as $user ) {							if ( $user->user_id != $val && !in_array( $user->user_id, $allusers ) )								$user_list .= "<option value='{$user->user_id}'>{$user->user_login}</option>";						}						if ( '' == $user_list )							$user_list = $admin_out;						$user_dropdown .= $user_list;						$user_dropdown .= "</select>\n";						?>						<ul style="list-style:none;">							<li><?php printf( __( 'Site: %s' ), $user_site ); ?></li>							<li><label><input type="radio" id="delete_option0" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="delete" checked="checked" />							<?php _e( 'Delete all posts and links.' ); ?></label></li>							<li><label><input type="radio" id="delete_option1" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="reassign" />							<?php echo __( 'Attribute all posts and links to:' ) . '</label>' . $user_dropdown; ?></li>						</ul>						<?php					}				}				echo "</fieldset>";			}		}	}	?>	<p class="submit"><input type="submit" class="button-secondary delete" value="<?php esc_attr_e( 'Confirm Deletion' ); ?>" /></p>	</form>    <?php	return true;}function wpmu_get_blog_allowedthemes( $blog_id = 0 ) {	$themes = get_themes();	if ( $blog_id != 0 )		switch_to_blog( $blog_id );	$blog_allowed_themes = get_option( 'allowedthemes' );	if ( !is_array( $blog_allowed_themes ) || empty( $blog_allowed_themes ) ) { // convert old allowed_themes to new allowedthemes		$blog_allowed_themes = get_option( 'allowed_themes' );		if ( is_array( $blog_allowed_themes ) ) {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $blog_allowed_themes[$key] ) == true ) {					$blog_allowedthemes[$theme_key] = 1;				}			}			$blog_allowed_themes = $blog_allowedthemes;			add_option( 'allowedthemes', $blog_allowed_themes );			delete_option( 'allowed_themes' );		}	}	if ( $blog_id != 0 )		restore_current_blog();	return $blog_allowed_themes;}function update_option_new_admin_email( $old_value, $value ) {	$email = get_option( 'admin_email' );	if ( $value == get_option( 'admin_email' ) || !is_email( $value ) )		return;	$hash = md5( $value. time() .mt_rand() );	$new_admin_email = array(		'hash' => $hash,		'newemail' => $value	);	update_option( 'adminhash', $new_admin_email );	$content = apply_filters( 'new_admin_email_content', __( "Dear user,You recently requested to have the administration email address onyour site changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL### "), $new_admin_email );	$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'options.php?adminhash='.$hash ) ), $content );	$content = str_replace( '###EMAIL###', $value, $content );	$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );	$content = str_replace( '###SITEURL###', network_home_url(), $content );	wp_mail( $value, sprintf( __( '[%s] New Admin Email Address' ), get_option( 'blogname' ) ), $content );}add_action( 'update_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );add_action( 'add_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );function send_confirmation_on_profile_email() {	global $errors, $wpdb, $current_user;	if ( ! is_object($errors) )		$errors = new WP_Error();	if ( $current_user->id != $_POST['user_id'] )		return false;	if ( $current_user->user_email != $_POST['email'] ) {		if ( !is_email( $_POST['email'] ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address isn't correct." ), array( 'form-field' => 'email' ) );			return;		}		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_email FROM {$wpdb->users} WHERE user_email=%s", $_POST['email'] ) ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address is already used." ), array( 'form-field' => 'email' ) );			delete_option( $current_user->ID . '_new_email' );			return;		}		$hash = md5( $_POST['email'] . time() . mt_rand() );		$new_user_email = array(				'hash' => $hash,				'newemail' => $_POST['email']				);		update_option( $current_user->ID . '_new_email', $new_user_email );		$content = apply_filters( 'new_user_email_content', __( "Dear user,You recently requested to have the email address on your account changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL###" ), $new_user_email );		$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'profile.php?newuseremail='.$hash ) ), $content );		$content = str_replace( '###EMAIL###', $_POST['email'], $content);		$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );		$content = str_replace( '###SITEURL###', network_home_url(), $content );		wp_mail( $_POST['email'], sprintf( __( '[%s] New Email Address' ), get_option( 'blogname' ) ), $content );		$_POST['email'] = $current_user->user_email;	}}add_action( 'personal_options_update', 'send_confirmation_on_profile_email' );function new_user_email_admin_notice() {	global $current_user;	if ( strpos( $_SERVER['PHP_SELF'], 'profile.php' ) && isset( $_GET['updated'] ) && $email = get_option( $current_user->ID . '_new_email' ) )		echo "<div class='update-nag'>" . sprintf( __( "Your email address has not been updated yet. Please check your inbox at %s for a confirmation email." ), $email['newemail'] ) . "</div>";}add_action( 'admin_notices', 'new_user_email_admin_notice' );function get_site_allowed_themes() {	$themes = get_themes();	$allowed_themes = get_site_option( 'allowedthemes' );	if ( !is_array( $allowed_themes ) || empty( $allowed_themes ) ) {		$allowed_themes = get_site_option( 'allowed_themes' ); // convert old allowed_themes format		if ( !is_array( $allowed_themes ) ) {			$allowed_themes = array();		} else {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $allowed_themes[ $key ] ) == true ) {					$allowedthemes[ $theme_key ] = 1;				}			}			$allowed_themes = $allowedthemes;		}	}	return $allowed_themes;}/** * Determines if there is any upload space left in the current blog's quota. * * @since 3.0.0 * @return bool True if space is available, false otherwise. */function is_upload_space_available() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	if ( !( $space_allowed = get_upload_space_available() ) )		return false;	return true;}/* * @since 3.0.0 * * @return int of upload size limit in bytes */function upload_size_limit_filter( $size ) {	$fileupload_maxk = 1024 * get_site_option( 'fileupload_maxk', 1500 );	return min( $size, $fileupload_maxk, get_upload_space_available() );}/** * Determines if there is any upload space left in the current blog's quota. * * @return int of upload space available in bytes */function get_upload_space_available() {	$space_allowed = get_space_allowed() * 1024 * 1024;	if ( get_site_option( 'upload_space_check_disabled' ) )		return $space_allowed;	$dir_name = trailingslashit( BLOGUPLOADDIR );	if ( !( is_dir( $dir_name) && is_readable( $dir_name ) ) )		return $space_allowed;  	$dir = dir( $dir_name );   	$size = 0;	while ( $file = $dir->read() ) {		if ( $file != '.' && $file != '..' ) {			if ( is_dir( $dir_name . $file) ) {				$size += get_dirsize( $dir_name . $file );			} else {				$size += filesize( $dir_name . $file );			}		}	}	$dir->close();	if ( ( $space_allowed - $size ) <= 0 )		return 0;	return $space_allowed - $size;}/** * Returns the upload quota for the current blog. * * @return int Quota */function get_space_allowed() {	$space_allowed = get_option( 'blog_upload_space' );	if ( $space_allowed == false )		$space_allowed = get_site_option( 'blog_upload_space' );	if ( empty( $space_allowed ) || !is_numeric( $space_allowed ) )		$space_allowed = 50;	return $space_allowed;}function display_space_usage() {	$space = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	$percentused = ( $used / $space ) * 100;	if ( $space > 1000 ) {		$space = number_format( $space / 1024 );		/* translators: Gigabytes */		$space .= __( 'GB' );	} else {		/* translators: Megabytes */		$space .= __( 'MB' );	}	?>	<strong><?php printf( __( 'Used: %1s%% of %2s' ), number_format( $percentused ), $space ); ?></strong>	<?php}// Display File upload quota on dashboardfunction dashboard_quota() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$quota = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	if ( $used > $quota )		$percentused = '100';	else		$percentused = ( $used / $quota ) * 100;	$used_color = ( $percentused < 70 ) ? ( ( $percentused >= 40 ) ? 'waiting' : 'approved' ) : 'spam';	$used = round( $used, 2 );	$percentused = number_format( $percentused );	?>	<p class="sub musub"><?php _e( 'Storage Space' ); ?></p>	<div class="table table_content musubtable">	<table>		<tr class="first">			<td class="first b b-posts"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB</a>' ), esc_url( admin_url( 'upload.php' ) ), $quota ); ?></td>			<td class="t posts"><?php _e( 'Space Allowed' ); ?></td>		</tr>	</table>	</div>	<div class="table table_discussion musubtable">	<table>		<tr class="first">			<td class="b b-comments"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB (%3$s%%)</a>' ), esc_url( admin_url( 'upload.php' ) ), $used, $percentused ); ?></td>			<td class="last t comments <?php echo $used_color;?>"><?php _e( 'Space Used' );?></td>		</tr>	</table>	</div>	<br class="clear" />	<?php}if ( current_user_can( 'edit_posts' ) )	add_action( 'activity_box_end', 'dashboard_quota' );// Edit blog upload space setting on Edit Blog pagefunction upload_space_setting( $id ) {	$quota = get_blog_option( $id, 'blog_upload_space' );	if ( !$quota )		$quota = '';	?>	<tr>		<th><?php _e( 'Site Upload Space Quota '); ?></th>		<td><input type="text" size="3" name="option[blog_upload_space]" value="<?php echo $quota; ?>" /> <?php _e( 'MB (Leave blank for network default)' ); ?></td>	</tr>	<?php}add_action( 'wpmueditblogaction', 'upload_space_setting' );function update_user_status( $id, $pref, $value, $refresh = 1 ) {	global $wpdb;	$wpdb->update( $wpdb->users, array( $pref => $value ), array( 'ID' => $id ) );	if ( $refresh == 1 )		refresh_user_details( $id );	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( 'make_spam_user', $id );		else			do_action( 'make_ham_user', $id );	}	return $value;}function refresh_user_details( $id ) {	$id = (int) $id;	if ( !$user = get_userdata( $id ) )		return false;	clean_user_cache( $id );	return $id;}function format_code_lang( $code = '' ) {	$code = strtolower( substr( $code, 0, 2 ) );	$lang_codes = array(		'aa' => 'Afar', 'ab' => 'Abkhazian', 'af' => 'Afrikaans', 'ak' => 'Akan', 'sq' => 'Albanian', 'am' => 'Amharic', 'ar' => 'Arabic', 'an' => 'Aragonese', 'hy' => 'Armenian', 'as' => 'Assamese', 'av' => 'Avaric', 'ae' => 'Avestan', 'ay' => 'Aymara', 'az' => 'Azerbaijani', 'ba' => 'Bashkir', 'bm' => 'Bambara', 'eu' => 'Basque', 'be' => 'Belarusian', 'bn' => 'Bengali',		'bh' => 'Bihari', 'bi' => 'Bislama', 'bs' => 'Bosnian', 'br' => 'Breton', 'bg' => 'Bulgarian', 'my' => 'Burmese', 'ca' => 'Catalan; Valencian', 'ch' => 'Chamorro', 'ce' => 'Chechen', 'zh' => 'Chinese', 'cu' => 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic', 'cv' => 'Chuvash', 'kw' => 'Cornish', 'co' => 'Corsican', 'cr' => 'Cree',		'cs' => 'Czech', 'da' => 'Danish', 'dv' => 'Divehi; Dhivehi; Maldivian', 'nl' => 'Dutch; Flemish', 'dz' => 'Dzongkha', 'en' => 'English', 'eo' => 'Esperanto', 'et' => 'Estonian', 'ee' => 'Ewe', 'fo' => 'Faroese', 'fj' => 'Fijjian', 'fi' => 'Finnish', 'fr' => 'French', 'fy' => 'Western Frisian', 'ff' => 'Fulah', 'ka' => 'Georgian', 'de' => 'German', 'gd' => 'Gaelic; Scottish Gaelic',		'ga' => 'Irish', 'gl' => 'Galician', 'gv' => 'Manx', 'el' => 'Greek, Modern', 'gn' => 'Guarani', 'gu' => 'Gujarati', 'ht' => 'Haitian; Haitian Creole', 'ha' => 'Hausa', 'he' => 'Hebrew', 'hz' => 'Herero', 'hi' => 'Hindi', 'ho' => 'Hiri Motu', 'hu' => 'Hungarian', 'ig' => 'Igbo', 'is' => 'Icelandic', 'io' => 'Ido', 'ii' => 'Sichuan Yi', 'iu' => 'Inuktitut', 'ie' => 'Interlingue',		'ia' => 'Interlingua (International Auxiliary Language Association)', 'id' => 'Indonesian', 'ik' => 'Inupiaq', 'it' => 'Italian', 'jv' => 'Javanese', 'ja' => 'Japanese', 'kl' => 'Kalaallisut; Greenlandic', 'kn' => 'Kannada', 'ks' => 'Kashmiri', 'kr' => 'Kanuri', 'kk' => 'Kazakh', 'km' => 'Central Khmer', 'ki' => 'Kikuyu; Gikuyu', 'rw' => 'Kinyarwanda', 'ky' => 'Kirghiz; Kyrgyz',		'kv' => 'Komi', 'kg' => 'Kongo', 'ko' => 'Korean', 'kj' => 'Kuanyama; Kwanyama', 'ku' => 'Kurdish', 'lo' => 'Lao', 'la' => 'Latin', 'lv' => 'Latvian', 'li' => 'Limburgan; Limburger; Limburgish', 'ln' => 'Lingala', 'lt' => 'Lithuanian', 'lb' => 'Luxembourgish; Letzeburgesch', 'lu' => 'Luba-Katanga', 'lg' => 'Ganda', 'mk' => 'Macedonian', 'mh' => 'Marshallese', 'ml' => 'Malayalam',		'mi' => 'Maori', 'mr' => 'Marathi', 'ms' => 'Malay', 'mg' => 'Malagasy', 'mt' => 'Maltese', 'mo' => 'Moldavian', 'mn' => 'Mongolian', 'na' => 'Nauru', 'nv' => 'Navajo; Navaho', 'nr' => 'Ndebele, South; South Ndebele', 'nd' => 'Ndebele, North; North Ndebele', 'ng' => 'Ndonga', 'ne' => 'Nepali', 'nn' => 'Norwegian Nynorsk; Nynorsk, Norwegian', 'nb' => 'Bokml, Norwegian, Norwegian Bokml',		'no' => 'Norwegian', 'ny' => 'Chichewa; Chewa; Nyanja', 'oc' => 'Occitan, Provenal', 'oj' => 'Ojibwa', 'or' => 'Oriya', 'om' => 'Oromo', 'os' => 'Ossetian; Ossetic', 'pa' => 'Panjabi; Punjabi', 'fa' => 'Persian', 'pi' => 'Pali', 'pl' => 'Polish', 'pt' => 'Portuguese', 'ps' => 'Pushto', 'qu' => 'Quechua', 'rm' => 'Romansh', 'ro' => 'Romanian', 'rn' => 'Rundi', 'ru' => 'Russian',		'sg' => 'Sango', 'sa' => 'Sanskrit', 'sr' => 'Serbian', 'hr' => 'Croatian', 'si' => 'Sinhala; Sinhalese', 'sk' => 'Slovak', 'sl' => 'Slovenian', 'se' => 'Northern Sami', 'sm' => 'Samoan', 'sn' => 'Shona', 'sd' => 'Sindhi', 'so' => 'Somali', 'st' => 'Sotho, Southern', 'es' => 'Spanish; Castilian', 'sc' => 'Sardinian', 'ss' => 'Swati', 'su' => 'Sundanese', 'sw' => 'Swahili',		'sv' => 'Swedish', 'ty' => 'Tahitian', 'ta' => 'Tamil', 'tt' => 'Tatar', 'te' => 'Telugu', 'tg' => 'Tajik', 'tl' => 'Tagalog', 'th' => 'Thai', 'bo' => 'Tibetan', 'ti' => 'Tigrinya', 'to' => 'Tonga (Tonga Islands)', 'tn' => 'Tswana', 'ts' => 'Tsonga', 'tk' => 'Turkmen', 'tr' => 'Turkish', 'tw' => 'Twi', 'ug' => 'Uighur; Uyghur', 'uk' => 'Ukrainian', 'ur' => 'Urdu', 'uz' => 'Uzbek',		've' => 'Venda', 'vi' => 'Vietnamese', 'vo' => 'Volapk', 'cy' => 'Welsh','wa' => 'Walloon','wo' => 'Wolof', 'xh' => 'Xhosa', 'yi' => 'Yiddish', 'yo' => 'Yoruba', 'za' => 'Zhuang; Chuang', 'zu' => 'Zulu' );	$lang_codes = apply_filters( 'lang_codes', $lang_codes, $code );	return strtr( $code, $lang_codes );}function sync_category_tag_slugs( $term, $taxonomy ) {	if ( global_terms_enabled() && ( $taxonomy == 'category' || $taxonomy == 'post_tag' ) ) {		if ( is_object( $term ) ) {			$term->slug = sanitize_title( $term->name );		} else {			$term['slug'] = sanitize_title( $term['name'] );		}	}	return $term;}add_filter( 'get_term', 'sync_category_tag_slugs', 10, 2 );function redirect_user_to_blog() {	global $current_user;	$c = 0;	if ( isset( $_GET['c'] ) )		$c = (int) $_GET['c'];	if ( $c >= 5 ) {		wp_die( __( "You don&#8217;t have permission to view this site. Please contact the system administrator." ) );	}	$c ++;	$blog = get_active_blog_for_user( $current_user->ID );	$dashboard_blog = get_dashboard_blog();	if ( is_object( $blog ) ) {		wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) ); // redirect and count to 5, "just in case"		exit;	}	/*	   If the user is a member of only 1 blog and the user's primary_blog isn't set to that blog,	   then update the primary_blog record to match the user's blog	 */	$blogs = get_blogs_of_user( $current_user->ID );	if ( !empty( $blogs ) ) {		foreach( $blogs as $blogid => $blog ) {			if ( $blogid != $dashboard_blog->blog_id && get_user_meta( $current_user->ID , 'primary_blog', true ) == $dashboard_blog->blog_id ) {				update_user_meta( $current_user->ID, 'primary_blog', $blogid );				continue;			}		}		$blog = get_blog_details( get_user_meta( $current_user->ID, 'primary_blog', true ) );			wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) );		exit;	}	wp_die( __( 'You do not have sufficient permissions to access this page.' ) );}add_action( 'admin_page_access_denied', 'redirect_user_to_blog', 99 );function check_import_new_users( $permission ) {	if ( !is_super_admin() )		return false;	return true;}add_filter( 'import_allow_create_users', 'check_import_new_users' );// See "import_allow_fetch_attachments" and "import_attachment_size_limit" filters too.function mu_dropdown_languages( $lang_files = array(), $current = '' ) {	$flag = false;	$output = array();	foreach ( (array) $lang_files as $val ) {		$code_lang = basename( $val, '.mo' );		if ( $code_lang == 'en_US' ) { // American English			$flag = true;			$ae = __( 'American English' );			$output[$ae] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $ae . '</option>';		} elseif ( $code_lang == 'en_GB' ) { // British English			$flag = true;			$be = __( 'British English' );			$output[$be] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $be . '</option>';		} else {			$translated = format_code_lang( $code_lang );			$output[$translated] =  '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . esc_html ( $translated ) . '</option>';		}	}	if ( $flag === false ) // WordPress english		$output[] = '<option value=""' . selected( $current, '' ) . '>' . __( 'English' ) . "</option>";	// Order by name	uksort( $output, 'strnatcasecmp' );	$output = apply_filters( 'mu_dropdown_languages', $output, $lang_files, $current );	echo implode( "\n\t", $output );}/* Warn the admin if SECRET SALT information is missing from wp-config.php */function secret_salt_warning() {	if ( !is_super_admin() )		return;	$secret_keys = array( 'AUTH_KEY', 'SECURE_AUTH_KEY', 'LOGGED_IN_KEY', 'NONCE_KEY', 'AUTH_SALT', 'SECURE_AUTH_SALT', 'LOGGED_IN_SALT', 'NONCE_SALT' );	$out = '';	foreach( $secret_keys as $key ) {		if ( ! defined( $key ) )			$out .= "define( '$key', '" . esc_html( wp_generate_password( 64, true, true ) ) . "' );<br />";	}	if ( $out != '' ) {		$msg  = __( 'Warning! WordPress encrypts user cookies, but you must add the following lines to <strong>wp-config.php</strong> for it to be more secure.' );		$msg .= '<br/>' . __( "Before the line <code>/* That's all, stop editing! Happy blogging. */</code> please add this code:" );		$msg .= "<br/><br/><code>$out</code>";		echo "<div class='update-nag'>$msg</div>";	}}add_action( 'admin_notices', 'secret_salt_warning' );function admin_notice_feed() {	global $current_user, $current_screen;	if ( $current_screen->id != 'dashboard' )		return;	if ( !empty( $_GET['feed_dismiss'] ) ) {		update_user_option( $current_user->id, 'admin_feed_dismiss', $_GET['feed_dismiss'], true );		return;	}	$url = get_site_option( 'admin_notice_feed' );	if ( empty( $url ) )		return;	$rss = fetch_feed( $url );	if ( ! is_wp_error( $rss ) && $item = $rss->get_item() ) {		$title = $item->get_title();		if ( md5( $title ) == get_user_option( 'admin_feed_dismiss' ) )			return;		$msg = "<h3>" . esc_html( $title ) . "</h3>\n";		$content = $item->get_description();		$content = $content ? wp_html_excerpt( $content, 200 ) . ' &hellip; ' : '';		$link = esc_url( strip_tags( $item->get_link() ) );		$msg .= "<p>" . $content . "<a href='$link'>" . __( 'Read More' ) . "</a> <a href='index.php?feed_dismiss=" . md5( $title ) . "'>" . __( 'Dismiss' ) . "</a></p>";		echo "<div class='updated'>$msg</div>";	} elseif ( is_super_admin() ) {		printf( '<div class="update-nag">' . __( 'Your feed at %s is empty.' ) . '</div>', esc_html( $url ) );	}}add_action( 'admin_notices', 'admin_notice_feed' );function site_admin_notice() {	global $current_user, $wp_db_version;	if ( !is_super_admin() )		return false;	if ( get_site_option( 'wpmu_upgrade_site' ) != $wp_db_version )		echo "<div class='update-nag'>" . sprintf( __( 'Thank you for Updating! Please visit the <a href="%s">Update Network</a> page to update all your sites.' ), esc_url( admin_url( 'ms-upgrade-network.php' ) ) ) . "</div>";}add_action( 'admin_notices', 'site_admin_notice' );function avoid_blog_page_permalink_collision( $data, $postarr ) {	if ( is_subdomain_install() )		return $data;	if ( $data['post_type'] != 'page' )		return $data;	if ( !isset( $data['post_name'] ) || $data['post_name'] == '' )		return $data;	if ( !is_main_site() )		return $data;	$post_name = $data['post_name'];	$c = 0;	while( $c < 10 && get_id_from_blogname( $post_name ) ) {		$post_name .= mt_rand( 1, 10 );		$c ++;	}	if ( $post_name != $data['post_name'] ) {		$data['post_name'] = $post_name;	}	return $data;}add_filter( 'wp_insert_post_data', 'avoid_blog_page_permalink_collision', 10, 2 );function choose_primary_blog() {	global $current_user;	?>	<table class="form-table">	<tr>	<?php /* translators: My sites label */ ?>		<th scope="row"><?php _e( 'Primary Site' ); ?></th>		<td>		<?php		$all_blogs = get_blogs_of_user( $current_user->ID );		$primary_blog = get_user_meta( $current_user->ID, 'primary_blog', true );		if ( count( $all_blogs ) > 1 ) {			$found = false;			?>			<select name="primary_blog">				<?php foreach( (array) $all_blogs as $blog ) {					if ( $primary_blog == $blog->userblog_id )						$found = true;					?><option value="<?php echo $blog->userblog_id ?>"<?php selected( $primary_blog,  $blog->userblog_id ); ?>><?php echo esc_url( get_home_url( $blog->userblog_id ) ) ?></option><?php				} ?>			</select>			<?php			if ( !$found ) {				$blog = array_shift( $all_blogs );				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );			}		} elseif ( count( $all_blogs ) == 1 ) {			$blog = array_shift( $all_blogs );			echo $blog->domain;			if ( $primary_blog != $blog->userblog_id ) // Set the primary blog again if it's out of sync with blog list.				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );		} else {			echo "N/A";		}		?>		</td>	</tr>	<?php if ( in_array( get_site_option( 'registration' ), array( 'all', 'blog' ) ) ) : ?>		<tr>			<th scope="row" colspan="2" class="th-full">				<a href="<?php echo apply_filters( 'wp_signup_location', network_home_url( 'wp-signup.php' ) ); ?>"><?php _e( 'Create a New Site' ); ?></a>			</th>		</tr>	<?php endif; ?>	</table>	<?php}function show_post_thumbnail_warning() {	if ( ! is_super_admin() )		return;	$mu_media_buttons = get_site_option( 'mu_media_buttons', array() );	if ( empty($mu_media_buttons['image']) && current_theme_supports( 'post-thumbnails' ) ) {		echo "<div class='update-nag'>" . sprintf( __( "Warning! The current theme supports Featured Images. You must enable image uploads on <a href='%s'>the options page</a> for it to work." ), esc_url( admin_url( 'ms-options.php' ) ) ) . "</div>";	}}add_action( 'admin_notices', 'show_post_thumbnail_warning' );function ms_deprecated_blogs_file() {	if ( ! is_super_admin() )		return;	if ( ! file_exists( WP_CONTENT_DIR . '/blogs.php' ) )		return;	echo '<div class="update-nag">' . sprintf( __( 'The <code>%1$s</code> file is deprecated. Please remove it and update your server rewrite rules to use <code>%2$s</code> instead.' ), 'wp-content/blogs.php', 'wp-includes/ms-files.php' ) . '</div>';}add_action( 'admin_notices', 'ms_deprecated_blogs_file' );/** * Outputs the notice message for multisite regarding activation of plugin page. * * @since 3.0.0 * @return none */function _admin_notice_multisite_activate_plugins_page() {	$message = sprintf( __( 'The plugins page is not visible to normal users. It must be activated first. %s' ), '<a href="' . esc_url( admin_url( 'ms-options.php#menu' ) ) . '">' . __( 'Activate' ) . '</a>' );	echo "<div class='error'><p>$message</p></div>";}/** * Grants super admin privileges. * * @since 3.0.0 * @param $user_id */function grant_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'grant_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( ! in_array( $user->user_login, $super_admins ) ) {		$super_admins[] = $user->user_login;		update_site_option( 'site_admins' , $super_admins );		do_action( 'granted_super_admin', $user_id );		return true;	}	return false;}/** * Revokes super admin privileges. * * @since 3.0.0 * @param $user_id */function revoke_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'revoke_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( $user->user_email != get_site_option( 'admin_email' ) ) {		if ( false !== ( $key = array_search( $user->user_login, $super_admins ) ) ) {			unset( $super_admins[$key] );			update_site_option( 'site_admins', $super_admins );			do_action( 'revoked_super_admin', $user_id );			return true;		}	}	return false;}?>
