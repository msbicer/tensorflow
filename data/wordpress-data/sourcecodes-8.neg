<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress *//** * Defines initial WordPress constants * * @see wp_debug_mode() * * @since 3.0.0 */function wp_initial_constants( ) {	global $blog_id;	// set memory limits	if ( !defined('WP_MEMORY_LIMIT') ) {		if( is_multisite() ) {			define('WP_MEMORY_LIMIT', '64M');		} else {			define('WP_MEMORY_LIMIT', '32M');		}	}	/**	 * The $blog_id global, which you can change in the config allows you to create a simple	 * multiple blog installation using just one WordPress and changing $blog_id around.	 *	 * @global int $blog_id	 * @since 2.0.0	 */	if ( ! isset($blog_id) )		$blog_id = 1;	// set memory limits.	if ( function_exists('memory_get_usage') && ( (int) @ini_get('memory_limit') < abs(intval(WP_MEMORY_LIMIT)) ) )		@ini_set('memory_limit', WP_MEMORY_LIMIT);	if ( !defined('WP_CONTENT_DIR') )		define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' ); // no trailing slash, full paths only - WP_CONTENT_URL is defined further down	// Add define('WP_DEBUG', true); to wp-config.php to enable display of notices during development.	if ( !defined('WP_DEBUG') )		define( 'WP_DEBUG', false );	// Add define('WP_DEBUG_DISPLAY', false); to wp-config.php use the globally configured setting for display_errors and not force errors to be displayed.	if ( !defined('WP_DEBUG_DISPLAY') )		define( 'WP_DEBUG_DISPLAY', true );	// Add define('WP_DEBUG_LOG', true); to enable error logging to wp-content/debug.log.	if ( !defined('WP_DEBUG_LOG') )		define('WP_DEBUG_LOG', false);	if ( !defined('WP_CACHE') )		define('WP_CACHE', false);	/**	 * Private	 */	if ( !defined('MEDIA_TRASH') )		define('MEDIA_TRASH', false);	if ( !defined('SHORTINIT') )		define('SHORTINIT', false);}/** * Defines plugin directory WordPress constants * * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in * * @since 3.0.0 */function wp_plugin_directory_constants( ) {	if ( !defined('WP_CONTENT_URL') )		define( 'WP_CONTENT_URL', get_option('siteurl') . '/wp-content'); // full url - WP_CONTENT_DIR is defined further up	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.6.0	 */	if ( !defined('WP_PLUGIN_DIR') )		define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' ); // full path, no trailing slash	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.6.0	 */	if ( !defined('WP_PLUGIN_URL') )		define( 'WP_PLUGIN_URL', WP_CONTENT_URL . '/plugins' ); // full url, no trailing slash	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.1.0	 * @deprecated	 */	if ( !defined('PLUGINDIR') )		define( 'PLUGINDIR', 'wp-content/plugins' ); // Relative to ABSPATH.  For back compat.	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 */	if ( !defined('WPMU_PLUGIN_DIR') )		define( 'WPMU_PLUGIN_DIR', WP_CONTENT_DIR . '/mu-plugins' ); // full path, no trailing slash	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 */	if ( !defined('WPMU_PLUGIN_URL') )		define( 'WPMU_PLUGIN_URL', WP_CONTENT_URL . '/mu-plugins' ); // full url, no trailing slash	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 * @deprecated	 */	if ( !defined( 'MUPLUGINDIR' ) )		define( 'MUPLUGINDIR', 'wp-content/mu-plugins' ); // Relative to ABSPATH.  For back compat.}/** * Defines cookie related WordPress constants * * Defines constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies(). * @since 3.0.0 */function wp_cookie_constants( ) {	global $wp_default_secret_key;	/**	 * Used to guarantee unique hash cookies	 * @since 1.5	 */	if ( !defined( 'COOKIEHASH' ) ) {		$siteurl = get_site_option( 'siteurl' );		if ( $siteurl )			define( 'COOKIEHASH', md5( $siteurl ) );		else			define( 'COOKIEHASH', '' );	}	/**	 * Should be exactly the same as the default value of SECRET_KEY in wp-config-sample.php	 * @since 2.5.0	 */	$wp_default_secret_key = 'put your unique phrase here';	/**	 * @since 2.0.0	 */	if ( !defined('USER_COOKIE') )		define('USER_COOKIE', 'wordpressuser_' . COOKIEHASH);	/**	 * @since 2.0.0	 */	if ( !defined('PASS_COOKIE') )		define('PASS_COOKIE', 'wordpresspass_' . COOKIEHASH);	/**	 * @since 2.5.0	 */	if ( !defined('AUTH_COOKIE') )		define('AUTH_COOKIE', 'wordpress_' . COOKIEHASH);	/**	 * @since 2.6.0	 */	if ( !defined('SECURE_AUTH_COOKIE') )		define('SECURE_AUTH_COOKIE', 'wordpress_sec_' . COOKIEHASH);	/**	 * @since 2.6.0	 */	if ( !defined('LOGGED_IN_COOKIE') )		define('LOGGED_IN_COOKIE', 'wordpress_logged_in_' . COOKIEHASH);	/**	 * @since 2.3.0	 */	if ( !defined('TEST_COOKIE') )		define('TEST_COOKIE', 'wordpress_test_cookie');	/**	 * @since 1.2.0	 */	if ( !defined('COOKIEPATH') )		define('COOKIEPATH', preg_replace('|https?://[^/]+|i', '', get_option('home') . '/' ) );	/**	 * @since 1.5.0	 */	if ( !defined('SITECOOKIEPATH') )		define('SITECOOKIEPATH', preg_replace('|https?://[^/]+|i', '', get_option('siteurl') . '/' ) );	/**	 * @since 2.6.0	 */	if ( !defined('ADMIN_COOKIE_PATH') )		define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );	/**	 * @since 2.6.0	 */	if ( !defined('PLUGINS_COOKIE_PATH') )		define( 'PLUGINS_COOKIE_PATH', preg_replace('|https?://[^/]+|i', '', WP_PLUGIN_URL)  );	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') )		define('COOKIE_DOMAIN', false);}/** * Defines cookie related WordPress constants * * @since 3.0.0 */function wp_ssl_constants( ) {	/**	 * @since 2.6.0	 */	if ( !defined('FORCE_SSL_ADMIN') )		define('FORCE_SSL_ADMIN', false);	force_ssl_admin(FORCE_SSL_ADMIN);	/**	 * @since 2.6.0	 */	if ( !defined('FORCE_SSL_LOGIN') )		define('FORCE_SSL_LOGIN', false);	force_ssl_login(FORCE_SSL_LOGIN);}/** * Defines functionality related WordPress constants * * @since 3.0.0 */function wp_functionality_constants( ) {	/**	 * @since 2.5.0	 */	if ( !defined( 'AUTOSAVE_INTERVAL' ) )		define( 'AUTOSAVE_INTERVAL', 60 );	/**	 * @since 2.9.0	 */	if ( !defined( 'EMPTY_TRASH_DAYS' ) )		define( 'EMPTY_TRASH_DAYS', 30 );	if ( !defined('WP_POST_REVISIONS') )		define('WP_POST_REVISIONS', true);}/** * Defines templating related WordPress constants * * @since 3.0.0 */function wp_templating_constants( ) {	/**	 * Web Path to the current active template directory	 * @since 1.5.0	 */	define('TEMPLATEPATH', get_template_directory());	/**	 * Web Path to the current active template stylesheet directory	 * @since 2.1.0	 */	define('STYLESHEETPATH', get_stylesheet_directory());	/**	 * Slug of the default theme for this install.	 * Used as the default theme when installing new sites.	 * Will be used as the fallback if the current theme doesn't exist.	 * @since 3.0.0	 */	if ( !defined('WP_DEFAULT_THEME') )		define( 'WP_DEFAULT_THEME', 'twentyten' );}?>
<?php/** * The Footer widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php	/* The footer widget area is triggered if any of the areas	 * have widgets. So let's check that first.	 *	 * If none of the sidebars have widgets, then let's bail early.	 */	if (   ! is_active_sidebar( 'first-footer-widget-area'  )		&& ! is_active_sidebar( 'second-footer-widget-area' )		&& ! is_active_sidebar( 'third-footer-widget-area'  )		&& ! is_active_sidebar( 'fourth-footer-widget-area' )	)		return;	// If we get this far, we have widgets. Let do this.?>			<div id="footer-widget-area" role="complementary"><?php if ( is_active_sidebar( 'first-footer-widget-area' ) ) : ?>				<div id="first" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'first-footer-widget-area' ); ?>					</ul>				</div><!-- #first .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'second-footer-widget-area' ) ) : ?>				<div id="second" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'second-footer-widget-area' ); ?>					</ul>				</div><!-- #second .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'third-footer-widget-area' ) ) : ?>				<div id="third" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'third-footer-widget-area' ); ?>					</ul>				</div><!-- #third .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'fourth-footer-widget-area' ) ) : ?>				<div id="fourth" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'fourth-footer-widget-area' ); ?>					</ul>				</div><!-- #fourth .widget-area --><?php endif; ?>			</div><!-- #footer-widget-area -->
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the Unix `diff` program via shell_exec to compute the * differences between the two input arrays. * * Copyright 2007-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Milian Wolff <mail@milianw.de> * @package Text_Diff * @since   0.3.0 */class Text_Diff_Engine_shell {    /**     * Path to the diff executable     *     * @var string     */    var $_diffCommand = 'diff';    /**     * Returns the array of differences.     *     * @param array $from_lines lines of text from old file     * @param array $to_lines   lines of text from new file     *     * @return array all changes made (array with Text_Diff_Op_* objects)     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        $temp_dir = Text_Diff::_getTempDir();        // Execute gnu diff or similar to get a standard diff file.        $from_file = tempnam($temp_dir, 'Text_Diff');        $to_file = tempnam($temp_dir, 'Text_Diff');        $fp = fopen($from_file, 'w');        fwrite($fp, implode("\n", $from_lines));        fclose($fp);        $fp = fopen($to_file, 'w');        fwrite($fp, implode("\n", $to_lines));        fclose($fp);        $diff = shell_exec($this->_diffCommand . ' ' . $from_file . ' ' . $to_file);        unlink($from_file);        unlink($to_file);        if (is_null($diff)) {            // No changes were made            return array(new Text_Diff_Op_copy($from_lines));        }        $from_line_no = 1;        $to_line_no = 1;        $edits = array();        // Get changed lines by parsing something like:        // 0a1,2        // 1,2c4,6        // 1,5d6        preg_match_all('#^(\d+)(?:,(\d+))?([adc])(\d+)(?:,(\d+))?$#m', $diff,            $matches, PREG_SET_ORDER);        foreach ($matches as $match) {            if (!isset($match[5])) {                // This paren is not set every time (see regex).                $match[5] = false;            }            if ($match[3] == 'a') {                $from_line_no--;            }            if ($match[3] == 'd') {                $to_line_no--;            }            if ($from_line_no < $match[1] || $to_line_no < $match[4]) {                // copied lines                assert('$match[1] - $from_line_no == $match[4] - $to_line_no');                array_push($edits,                    new Text_Diff_Op_copy(                        $this->_getLines($from_lines, $from_line_no, $match[1] - 1),                        $this->_getLines($to_lines, $to_line_no, $match[4] - 1)));            }            switch ($match[3]) {            case 'd':                // deleted lines                array_push($edits,                    new Text_Diff_Op_delete(                        $this->_getLines($from_lines, $from_line_no, $match[2])));                $to_line_no++;                break;            case 'c':                // changed lines                array_push($edits,                    new Text_Diff_Op_change(                        $this->_getLines($from_lines, $from_line_no, $match[2]),                        $this->_getLines($to_lines, $to_line_no, $match[5])));                break;            case 'a':                // added lines                array_push($edits,                    new Text_Diff_Op_add(                        $this->_getLines($to_lines, $to_line_no, $match[5])));                $from_line_no++;                break;            }        }        if (!empty($from_lines)) {            // Some lines might still be pending. Add them as copied            array_push($edits,                new Text_Diff_Op_copy(                    $this->_getLines($from_lines, $from_line_no,                                     $from_line_no + count($from_lines) - 1),                    $this->_getLines($to_lines, $to_line_no,                                     $to_line_no + count($to_lines) - 1)));        }        return $edits;    }    /**     * Get lines from either the old or new text     *     * @access private     *     * @param array &$text_lines Either $from_lines or $to_lines     * @param int   &$line_no    Current line number     * @param int   $end         Optional end line, when we want to chop more     *                           than one line.     *     * @return array The chopped lines     */    function _getLines(&$text_lines, &$line_no, $end = false)    {        if (!empty($end)) {            $lines = array();            // We can shift even more            while ($line_no <= $end) {                array_push($lines, array_shift($text_lines));                $line_no++;            }        } else {            $lines = array(array_shift($text_lines));            $line_no++;        }        return $lines;    }}
<?php/** * Displays Administration Menu. * * @package WordPress * @subpackage Administration *//** * The current page. * * @global string $self * @name $self * @var string */$self = preg_replace('|^.*/wp-admin/|i', '', $_SERVER['PHP_SELF']);$self = preg_replace('|^.*/plugins/|i', '', $self);$self = preg_replace('|^.*/mu-plugins/|i', '', $self);global $menu, $submenu, $parent_file; //For when admin-header is included from within a function.$parent_file = apply_filters("parent_file", $parent_file); // For plugins to move submenu tabs around.get_admin_page_parent();/** * Display menu. * * @access private * @since 2.7.0 * * @param array $menu * @param array $submenu * @param bool $submenu_as_parent */function _wp_menu_output( $menu, $submenu, $submenu_as_parent = true ) {	global $self, $parent_file, $submenu_file, $plugin_page, $pagenow, $typenow;	$first = true;	// 0 = name, 1 = capability, 2 = file, 3 = class, 4 = id, 5 = icon src	foreach ( $menu as $key => $item ) {		$admin_is_parent = false;		$class = array();		if ( $first ) {			$class[] = 'wp-first-item';			$first = false;		}		if ( !empty($submenu[$item[2]]) )			$class[] = 'wp-has-submenu';		if ( ( $parent_file && $item[2] == $parent_file ) || ( false === strpos($parent_file, '?') && $self == $item[2] ) ) {			if ( !empty($submenu[$item[2]]) )				$class[] = 'wp-has-current-submenu wp-menu-open';			else				$class[] = 'current';		}		if ( ! empty($item[4]) )			$class[] = $item[4];		$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';		$tabindex = ' tabindex="1"';		$id = ! empty($item[5]) ? ' id="' . preg_replace( '|[^a-zA-Z0-9_:.]|', '-', $item[5] ) . '"' : '';		$img = '';		if ( ! empty($item[6]) ) {			if ( 'div' === $item[6] )				$img = '<br />';			else				$img = '<img src="' . $item[6] . '" alt="" />';		}		$toggle = '<div class="wp-menu-toggle"><br /></div>';		$title = wptexturize($item[0]);		echo "\n\t<li$class$id>";		if ( false !== strpos($class, 'wp-menu-separator') ) {			echo '<a class="separator" href="?unfoldmenu=1"><br /></a>';		} elseif ( $submenu_as_parent && !empty($submenu[$item[2]]) ) {			$submenu[$item[2]] = array_values($submenu[$item[2]]);  // Re-index.			$menu_hook = get_plugin_page_hook($submenu[$item[2]][0][2], $item[2]);			$menu_file = $submenu[$item[2]][0][2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ( ('index.php' != $submenu[$item[2]][0][2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") ) || !empty($menu_hook)) {				$admin_is_parent = true;				echo "<div class='wp-menu-image'><a href='admin.php?page={$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='admin.php?page={$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='{$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			}		} else if ( current_user_can($item[1]) ) {			$menu_hook = get_plugin_page_hook($item[2], 'admin.php');			$menu_file = $item[2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ('index.php' != $item[2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") || !empty($menu_hook) ) {				$admin_is_parent = true;				echo "\n\t<div class='wp-menu-image'><a href='admin.php?page={$item[2]}'>$img</a></div>$toggle<a href='admin.php?page={$item[2]}'$class$tabindex>{$item[0]}</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$item[2]}'>$img</a></div>$toggle<a href='{$item[2]}'$class$tabindex>{$item[0]}</a>";			}		}		if ( !empty($submenu[$item[2]]) ) {			echo "\n\t<div class='wp-submenu'><div class='wp-submenu-head'>{$item[0]}</div><ul>";			$first = true;			foreach ( $submenu[$item[2]] as $sub_key => $sub_item ) {				if ( !current_user_can($sub_item[1]) )					continue;				$class = array();				if ( $first ) {					$class[] = 'wp-first-item';					$first = false;				}				$menu_file = $item[2];				if ( false !== $pos = strpos($menu_file, '?') )					$menu_file = substr($menu_file, 0, $pos);				// Handle current for post_type=post|page|foo pages, which won't match $self.				if ( !empty($typenow) )					$self_type = $self . '?post_type=' . $typenow;				else					$self_type = 'nothing';				if ( isset($submenu_file) ) {					if ( $submenu_file == $sub_item[2] )						$class[] = 'current';				// If plugin_page is set the parent must either match the current page or not physically exist.				// This allows plugin pages with the same hook to exist under different parents.				} else if ( (isset($plugin_page) && $plugin_page == $sub_item[2] && (!file_exists($menu_file) || ($item[2] == $self) || ($item[2] == $self_type))) || (!isset($plugin_page) && $self == $sub_item[2]) ) {					$class[] = 'current';				}				$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';				$menu_hook = get_plugin_page_hook($sub_item[2], $item[2]);				$sub_file = $sub_item[2];				if ( false !== $pos = strpos($sub_file, '?') )					$sub_file = substr($sub_file, 0, $pos);				$title = wptexturize($sub_item[0]);				if ( ( ('index.php' != $sub_item[2]) && file_exists(WP_PLUGIN_DIR . "/$sub_file") ) || ! empty($menu_hook) ) {					// If admin.php is the current page or if the parent exists as a file in the plugins or admin dir					if ( (!$admin_is_parent && file_exists(WP_PLUGIN_DIR . "/$menu_file") && !is_dir(WP_PLUGIN_DIR . "/{$item[2]}")) || file_exists($menu_file) )						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), $item[2] );					else						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), 'admin.php' );					$sub_item_url = esc_url($sub_item_url);					echo "<li$class><a href='$sub_item_url'$class$tabindex>$title</a></li>";				} else {					echo "<li$class><a href='{$sub_item[2]}'$class$tabindex>$title</a></li>";				}			}			echo "</ul></div>";		}		echo "</li>";	}}?><ul id="adminmenu"><?php_wp_menu_output( $menu, $submenu );do_action( 'adminmenu' );?></ul>
<?php/** * The template for displaying Archive pages. * * Used to display archive-type pages if nothing more specific matches a query. * For example, puts together date-based pages if no date.php file exists. * * Learn more: http://codex.wordpress.org/Template_Hierarchy * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know	 * what date we're dealing with (if that is the case).	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>			<h1 class="page-title"><?php if ( is_day() ) : ?>				<?php printf( __( 'Daily Archives: <span>%s</span>', 'twentyten' ), get_the_date() ); ?><?php elseif ( is_month() ) : ?>				<?php printf( __( 'Monthly Archives: <span>%s</span>', 'twentyten' ), get_the_date('F Y') ); ?><?php elseif ( is_year() ) : ?>				<?php printf( __( 'Yearly Archives: <span>%s</span>', 'twentyten' ), get_the_date('Y') ); ?><?php else : ?>				<?php _e( 'Blog Archives', 'twentyten' ); ?><?php endif; ?>			</h1><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the archives page to output the posts.	 * If you want to overload this in a child theme then include a file	 * called loop-archives.php and that will be used instead.	 */	 get_template_part( 'loop', 'archive' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Update/Install Plugin/Theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');include_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';if ( isset($_GET['action']) ) {	$plugin = isset($_REQUEST['plugin']) ? trim($_REQUEST['plugin']) : '';	$theme = isset($_REQUEST['theme']) ? urldecode($_REQUEST['theme']) : '';	$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';	if ( 'update-selected' == $action ) {		if ( ! current_user_can( 'update_plugins' ) )			wp_die( __( 'You do not have sufficient permissions to update plugins for this site.' ) );		check_admin_referer( 'bulk-update-plugins' );		if ( isset( $_GET['plugins'] ) )			$plugins = explode( ',', stripslashes($_GET['plugins']) );		elseif ( isset( $_POST['checked'] ) )			$plugins = (array) $_POST['checked'];		else			$plugins = array();		$plugins = array_map('urldecode', $plugins);		$url = 'update.php?action=update-selected&amp;plugins=' . urlencode(implode(',', $plugins));		$nonce = 'bulk-update-plugins';		require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );		wp_enqueue_script('jquery');		iframe_header();		$upgrader = new Plugin_Upgrader( new Bulk_Plugin_Upgrader_Skin( compact( 'nonce', 'url' ) ) );		$upgrader->bulk_upgrade( $plugins );		iframe_footer();	} elseif ( 'upgrade-plugin' == $action ) {		if ( ! current_user_can('update_plugins') )			wp_die(__('You do not have sufficient permissions to update plugins for this site.'));		check_admin_referer('upgrade-plugin_' . $plugin);		$title = __('Upgrade Plugin');		$parent_file = 'plugins.php';		$submenu_file = 'plugins.php';		require_once('./admin-header.php');		$nonce = 'upgrade-plugin_' . $plugin;		$url = 'update.php?action=upgrade-plugin&plugin=' . $plugin;		$upgrader = new Plugin_Upgrader( new Plugin_Upgrader_Skin( compact('title', 'nonce', 'url', 'plugin') ) );		$upgrader->upgrade($plugin);		include('./admin-footer.php');	} elseif ('activate-plugin' == $action ) {		if ( ! current_user_can('update_plugins') )			wp_die(__('You do not have sufficient permissions to update plugins for this site.'));		check_admin_referer('activate-plugin_' . $plugin);		if ( ! isset($_GET['failure']) && ! isset($_GET['success']) ) {			wp_redirect( 'update.php?action=activate-plugin&failure=true&plugin=' . $plugin . '&_wpnonce=' . $_GET['_wpnonce'] );			activate_plugin( $plugin, '', ! empty( $_GET['networkwide'] ) );			wp_redirect( 'update.php?action=activate-plugin&success=true&plugin=' . $plugin . '&_wpnonce=' . $_GET['_wpnonce'] );			die();		}		iframe_header( __('Plugin Reactivation'), true );		if ( isset($_GET['success']) )			echo '<p>' . __('Plugin reactivated successfully.') . '</p>';		if ( isset($_GET['failure']) ){			echo '<p>' . __('Plugin failed to reactivate due to a fatal error.') . '</p>';			if ( defined('E_RECOVERABLE_ERROR') )				error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);			else				error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			include(WP_PLUGIN_DIR . '/' . $plugin);		}		iframe_footer();	} elseif ( 'install-plugin' == $action ) {		if ( ! current_user_can('install_plugins') )			wp_die(__('You do not have sufficient permissions to install plugins for this site.'));		include_once ABSPATH . 'wp-admin/includes/plugin-install.php'; //for plugins_api..		check_admin_referer('install-plugin_' . $plugin);		$api = plugins_api('plugin_information', array('slug' => $plugin, 'fields' => array('sections' => false) ) ); //Save on a bit of bandwidth.		if ( is_wp_error($api) )	 		wp_die($api);		$title = __('Plugin Install');		$parent_file = 'plugins.php';		$submenu_file = 'plugin-install.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Plugin: %s'), $api->name . ' ' . $api->version );		$nonce = 'install-plugin_' . $plugin;		$url = 'update.php?action=install-plugin&plugin=' . $plugin;		if ( isset($_GET['from']) )			$url .= '&from=' . urlencode(stripslashes($_GET['from']));		$type = 'web'; //Install plugin type, From Web or an Upload.		$upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact('title', 'url', 'nonce', 'plugin', 'api') ) );		$upgrader->install($api->download_link);		include('./admin-footer.php');	} elseif ( 'upload-plugin' == $action ) {		if ( ! current_user_can('install_plugins') )			wp_die(__('You do not have sufficient permissions to install plugins for this site.'));		check_admin_referer('plugin-upload');		$file_upload = new File_Upload_Upgrader('pluginzip', 'package');		$title = __('Upload Plugin');		$parent_file = 'plugins.php';		$submenu_file = 'plugin-install.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Plugin from uploaded file: %s'), basename( $file_upload->filename ) );		$nonce = 'plugin-upload';		$url = add_query_arg(array('package' => $file_upload->filename ), 'update.php?action=upload-plugin');		$type = 'upload'; //Install plugin type, From Web or an Upload.		$upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact('type', 'title', 'nonce', 'url') ) );		$upgrader->install( $file_upload->package );		include('./admin-footer.php');	} elseif ( 'upgrade-theme' == $action ) {		if ( ! current_user_can('update_themes') )			wp_die(__('You do not have sufficient permissions to update themes for this site.'));		check_admin_referer('upgrade-theme_' . $theme);		add_thickbox();		wp_enqueue_script('theme-preview');		$title = __('Upgrade Theme');		$parent_file = 'themes.php';		$submenu_file = 'themes.php';		require_once('./admin-header.php');		$nonce = 'upgrade-theme_' . $theme;		$url = 'update.php?action=upgrade-theme&theme=' . $theme;		$upgrader = new Theme_Upgrader( new Theme_Upgrader_Skin( compact('title', 'nonce', 'url', 'theme') ) );		$upgrader->upgrade($theme);		include('./admin-footer.php');	} elseif ( 'update-selected-themes' == $action ) {		if ( ! current_user_can( 'update_themes' ) )			wp_die( __( 'You do not have sufficient permissions to update themes for this site.' ) );		check_admin_referer( 'bulk-update-themes' );		if ( isset( $_GET['themes'] ) )			$themes = explode( ',', stripslashes($_GET['themes']) );		elseif ( isset( $_POST['checked'] ) )			$themes = (array) $_POST['checked'];		else			$themes = array();		$themes = array_map('urldecode', $themes);		$url = 'update.php?action=update-selected-themes&amp;themes=' . urlencode(implode(',', $themes));		$nonce = 'bulk-update-themes';		require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );		wp_enqueue_script('jquery');		iframe_header();		$upgrader = new Theme_Upgrader( new Bulk_Theme_Upgrader_Skin( compact( 'nonce', 'url' ) ) );		$upgrader->bulk_upgrade( $themes );		iframe_footer();	} elseif ( 'install-theme' == $action ) {		if ( ! current_user_can('install_themes') )			wp_die(__('You do not have sufficient permissions to install themes for this site.'));		include_once ABSPATH . 'wp-admin/includes/theme-install.php'; //for themes_api..		check_admin_referer('install-theme_' . $theme);		$api = themes_api('theme_information', array('slug' => $theme, 'fields' => array('sections' => false) ) ); //Save on a bit of bandwidth.		if ( is_wp_error($api) )	 		wp_die($api);		add_thickbox();		wp_enqueue_script('theme-preview');		$title = __('Install Themes');		$parent_file = 'themes.php';		$submenu_file = 'themes.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Theme: %s'), $api->name . ' ' . $api->version );		$nonce = 'install-theme_' . $theme;		$url = 'update.php?action=install-theme&theme=' . $theme;		$type = 'web'; //Install theme type, From Web or an Upload.		$upgrader = new Theme_Upgrader( new Theme_Installer_Skin( compact('title', 'url', 'nonce', 'plugin', 'api') ) );		$upgrader->install($api->download_link);		include('./admin-footer.php');	} elseif ( 'upload-theme' == $action ) {		if ( ! current_user_can('install_themes') )			wp_die(__('You do not have sufficient permissions to install themes for this site.'));		check_admin_referer('theme-upload');		$file_upload = new File_Upload_Upgrader('themezip', 'package');		$title = __('Upload Theme');		$parent_file = 'themes.php';		$submenu_file = 'theme-install.php';		add_thickbox();		wp_enqueue_script('theme-preview');		require_once('./admin-header.php');		$title = sprintf( __('Installing Theme from uploaded file: %s'), basename( $file_upload->filename ) );		$nonce = 'theme-upload';		$url = add_query_arg(array('package' => $file_upload->filename), 'update.php?action=upload-theme');		$type = 'upload'; //Install plugin type, From Web or an Upload.		$upgrader = new Theme_Upgrader( new Theme_Installer_Skin( compact('type', 'title', 'nonce', 'url') ) );		$upgrader->install( $file_upload->package );		include('./admin-footer.php');	} else {		do_action('update-custom_' . $action);	}}
<?php/** * The template for displaying the footer. * * Contains the closing of the id=main div and all content * after.  Calls sidebar-footer.php for bottom widgets. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>	</div><!-- #main -->	<div id="footer" role="contentinfo">		<div id="colophon"><?php	/* A sidebar in the footer? Yep. You can can customize	 * your footer with four columns of widgets.	 */	get_sidebar( 'footer' );?>			<div id="site-info">				<a href="<?php echo home_url( '/' ) ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home">					<?php bloginfo( 'name' ); ?>				</a>			</div><!-- #site-info -->			<div id="site-generator">				<?php do_action( 'twentyten_credits' ); ?>				<a href="<?php echo esc_url( __('http://wordpress.org/', 'twentyten') ); ?>"						title="<?php esc_attr_e('Semantic Personal Publishing Platform', 'twentyten'); ?>" rel="generator">					<?php printf( __('Proudly powered by %s.', 'twentyten'), 'WordPress' ); ?>				</a>			</div><!-- #site-generator -->		</div><!-- #colophon -->	</div><!-- #footer --></div><!-- #wrapper --><?php	/* Always have wp_footer() just before the closing </body>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to reference JavaScript files.	 */	wp_footer();?></body></html>
<?php/** * Redirects to the RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss2_url' ), 301 );?>
<?php/** * WordPress Cron Implementation for hosts, which do not offer CRON or for which * the user has not set up a CRON job pointing to this file. * * The HTTP request to this file will not slow down the visitor who happens to * visit when the cron job is needed to run. * * @package WordPress */ignore_user_abort(true);if ( !empty($_POST) || defined('DOING_AJAX') || defined('DOING_CRON') )	die();/** * Tell WordPress we are doing the CRON task. * * @var bool */define('DOING_CRON', true);if ( !defined('ABSPATH') ) {	/** Set up WordPress environment */	require_once('./wp-load.php');}if ( false === $crons = _get_cron_array() )	die();$keys = array_keys( $crons );$local_time = time();if ( isset($keys[0]) && $keys[0] > $local_time )	die();foreach ($crons as $timestamp => $cronhooks) {	if ( $timestamp > $local_time )		break;	foreach ($cronhooks as $hook => $keys) {		foreach ($keys as $k => $v) {			$schedule = $v['schedule'];			if ($schedule != false) {				$new_args = array($timestamp, $schedule, $hook, $v['args']);				call_user_func_array('wp_reschedule_event', $new_args);			}			wp_unschedule_event($timestamp, $hook, $v['args']); 			do_action_ref_array($hook, $v['args']);		}	}}die();
<?php/** * Deprecated functions from WordPress MU and the multisite feature. You shouldn't * use these functions and look for the alternatives instead. The functions will be * removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//* * Deprecated functions come here to die. *//** * @since unknown * @deprecated 3.0.0 * @deprecated Use wp_generate_password() * @see wp_generate_password() */function generate_random_password( $len = 8 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_generate_password()' );	return wp_generate_password( $len );}/** * Determine if user is a site admin. * * Plugins should use is_multisite() instead of checking if this function exists * to determine if multisite is enabled. * * This function must reside in a file included only if is_multisite() due to * legacy function_exists() checks to determine if multisite is enabled. * * @since MU * @deprecated 3.0.0 * @deprecated Use is_super_admin() * @see is_super_admin() * @see is_multisite() * */function is_site_admin( $user_login = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'is_super_admin()' );	if ( empty( $user_login ) ) {		$user_id = get_current_user_id();		if ( !$user_id )			return false;	} else {		$user = new WP_User( null, $user_login) ;		if ( empty( $user->id ) )			return false;		$user_id = $user->id;	}	return is_super_admin( $user_id );}if ( !function_exists( 'graceful_fail' ) ) :/** * @since MU * @deprecated 3.0.0 * @deprecated Use wp_die() * @see wp_die() */function graceful_fail( $message ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_die()' );	$message = apply_filters( 'graceful_fail', $message );	$message_template = apply_filters( 'graceful_fail_template','<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Error!</title><style type="text/css">img {	border: 0;}body {line-height: 1.6em; font-family: Georgia, serif; width: 390px; margin: auto;text-align: center;}.message {	font-size: 22px;	width: 350px;	margin: auto;}</style></head><body><p class="message">%s</p></body></html>' );	die( sprintf( $message_template, $message ) );}endif;/** * @since MU * @deprecated 3.0.0 * @deprecated Use get_user_by() * @see get_user_by() */function get_user_details( $username ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_user_by()' );	return get_user_by('login', $username);}/** * @since MU * @deprecated 3.0.0 * @deprecated Use clean_post_cache() * @see clean_post_cache() */function clear_global_post_cache( $post_id ) {	_deprecated_function( __FUNCTION__, '3.0', 'clean_post_cache()' );}/** * @since MU * @deprecated 3.0.0 * @deprecated Use is_main_site() * @see is_main_site() */function is_main_blog() {	_deprecated_function( __FUNCTION__, '3.0', 'is_main_site()' );	return is_main_site();}/** * @since MU * @deprecated 3.0.0 * @deprecated Use is_email() * @see is_email() */function validate_email( $email, $check_domain = true) {	_deprecated_function( __FUNCTION__, '3.0', 'is_email()' );	return is_email( $email, $check_domain );}/** * @since MU * @deprecated 3.0.0 * @deprecated Don't use this, really. */function get_blog_list( $start = 0, $num = 10, $deprecated = '' ) {	_deprecated_function( __FUNCTION__, '3.0', "Don't use this, really." );	global $wpdb;	$blogs = $wpdb->get_results( $wpdb->prepare("SELECT blog_id, domain, path FROM $wpdb->blogs WHERE site_id = %d AND public = '1' AND archived = '0' AND mature = '0' AND spam = '0' AND deleted = '0' ORDER BY registered DESC", $wpdb->siteid), ARRAY_A );	foreach ( (array) $blogs as $details ) {		$blog_list[ $details['blog_id'] ] = $details;		$blog_list[ $details['blog_id'] ]['postcount'] = $wpdb->get_var( "SELECT COUNT(ID) FROM " . $wpdb->get_blog_prefix( $details['blog_id'] ). "posts WHERE post_status='publish' AND post_type='post'" );	}	unset( $blogs );	$blogs = $blog_list;	if ( false == is_array( $blogs ) )		return array();	if ( $num == 'all' )		return array_slice( $blogs, $start, count( $blogs ) );	else		return array_slice( $blogs, $start, $num );}/** * @since MU * @deprecated 3.0.0 * @deprecated Don't use this, really. */function get_most_active_blogs( $num = 10, $display = true ) {	_deprecated_function( __FUNCTION__, '3.0', "Don't use this, really." );	$blogs = get_blog_list( 0, 'all', false ); // $blog_id -> $details	if ( is_array( $blogs ) ) {		reset( $blogs );		foreach ( (array) $blogs as $key => $details ) {			$most_active[ $details['blog_id'] ] = $details['postcount'];			$blog_list[ $details['blog_id'] ] = $details; // array_slice() removes keys!!		}		arsort( $most_active );		reset( $most_active );		foreach ( (array) $most_active as $key => $details )			$t[ $key ] = $blog_list[ $key ];		unset( $most_active );		$most_active = $t;	}	if ( $display == true ) {		if ( is_array( $most_active ) ) {			reset( $most_active );			foreach ( (array) $most_active as $key => $details ) {				$url = esc_url('http://' . $details['domain'] . $details['path']);				echo '<li>' . $details['postcount'] . " <a href='$url'>$url</a></li>";			}		}	}	return array_slice( $most_active, 0, $num );}?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);$basepath = dirname(__FILE__);function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return false;	return @file_get_contents($path);}$expires_offset = 31536000;header('Content-Type: application/x-javascript; charset=UTF-8');header('Vary: Accept-Encoding'); // Handle proxiesheader('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( isset($_GET['c']) && 1 == $_GET['c'] && isset($_SERVER['HTTP_ACCEPT_ENCODING'])	&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && ( $file = get_file($basepath . '/wp-tinymce.js.gz') ) ) {	header('Content-Encoding: gzip');	echo $file;} else {	echo get_file($basepath . '/tiny_mce.js');}exit;
<?php/** * Edit comment form for inclusion in another file. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');/** * @var string */$submitbutton_text = __('Edit Comment');$toprow_title = sprintf(__('Editing Comment # %s'), $comment->comment_ID);$form_action = 'editedcomment';$form_extra = "' />\n<input type='hidden' name='comment_ID' value='" . esc_attr($comment->comment_ID) . "' />\n<input type='hidden' name='comment_post_ID' value='" . esc_attr($comment->comment_post_ID);$comment->comment_author_email = esc_attr($comment->comment_author_email);?><form name="post" action="comment.php" method="post" id="post"><?php wp_nonce_field('update-comment_' . $comment->comment_ID) ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Edit Comment'); ?></h2><div id="poststuff" class="metabox-holder has-right-sidebar"><input type="hidden" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" name="action" value='<?php echo $form_action . $form_extra ?>' /><div id="side-info-column" class="inner-sidebar"><div id="submitdiv" class="stuffbox" ><h3><span class='hndle'><?php _e('Status') ?></span></h3><div class="inside"><div class="submitbox" id="submitcomment"><div id="minor-publishing"><div id="minor-publishing-actions"><div id="preview-action"><a class="preview button" href="<?php echo get_comment_link(); ?>" target="_blank"><?php _e('View Comment'); ?></a></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section" id="comment-status-radio"><label class="approved"><input type="radio"<?php checked( $comment->comment_approved, '1' ); ?> name="comment_status" value="1" /><?php /* translators: comment type radio button */ _ex('Approved', 'adjective') ?></label><br /><label class="waiting"><input type="radio"<?php checked( $comment->comment_approved, '0' ); ?> name="comment_status" value="0" /><?php /* translators: comment type radio button */ _ex('Pending', 'adjective') ?></label><br /><label class="spam"><input type="radio"<?php checked( $comment->comment_approved, 'spam' ); ?> name="comment_status" value="spam" /><?php /* translators: comment type radio button */ _ex('Spam', 'adjective'); ?></label></div><div class="misc-pub-section curtime misc-pub-section-last"><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );$stamp = __('Submitted on: <b>%1$s</b>');$date = date_i18n( $datef, strtotime( $comment->comment_date ) );?><span id="timestamp"><?php printf($stamp, $date); ?></span>&nbsp;<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id='timestampdiv' class='hide-if-js'><?php touch_time(('editcomment' == $action), 0, 5); ?></div></div></div> <!-- misc actions --><div class="clear"></div></div><div id="major-publishing-actions"><div id="delete-action"><?php echo "<a class='submitdelete deletion' href='" . wp_nonce_url("comment.php?action=" . ( !EMPTY_TRASH_DAYS ? 'deletecomment' : 'trashcomment' ) . "&amp;c=$comment->comment_ID&amp;_wp_original_http_referer=" . urlencode(wp_get_referer()), 'delete-comment_' . $comment->comment_ID) . "'>" . ( !EMPTY_TRASH_DAYS ? __('Delete Permanently') : __('Move to Trash') ) . "</a>\n"; ?></div><div id="publishing-action"><input type="submit" name="save" value="<?php esc_attr_e('Update Comment'); ?>" tabindex="4" class="button-primary" /></div><div class="clear"></div></div></div></div></div></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="name"><?php _e( 'Author' ) ?></label></h3><div class="inside"><table class="form-table editcomment"><tbody><tr valign="top">	<td class="first"><?php _e( 'Name:' ); ?></td>	<td><input type="text" name="newcomment_author" size="30" value="<?php echo esc_attr( $comment->comment_author ); ?>" tabindex="1" id="name" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( $comment->comment_author_email ) {			printf( __( 'E-mail (%s):' ), get_comment_author_email_link( __( 'send e-mail' ), '', '' ) );		} else {			_e( 'E-mail:' );		}?></td>	<td><input type="text" name="newcomment_author_email" size="30" value="<?php echo $comment->comment_author_email; ?>" tabindex="2" id="email" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( ! empty( $comment->comment_author_url ) && 'http://' != $comment->comment_author_url ) {			$link = '<a href="' . $comment->comment_author_url . '" rel="external nofollow" target="_blank">' . __('visit site') . '</a>';			printf( __( 'URL (%s):' ), apply_filters('get_comment_author_link', $link ) );		} else {			_e( 'URL:' );		} ?></td>	<td><input type="text" id="newcomment_author_url" name="newcomment_author_url" size="30" class="code" value="<?php echo esc_attr($comment->comment_author_url); ?>" tabindex="3" /></td></tr></tbody></table><br /></div></div><div id="postdiv" class="postarea"><?php the_editor($comment->comment_content, 'content', 'newcomment_author_url', false, 4); ?><?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?></div><?phpdo_action('add_meta_boxes', 'comment', $comment);do_action('add_meta_boxes_comment', $comment);do_meta_boxes('comment', 'normal', $comment);?><input type="hidden" name="c" value="<?php echo esc_attr($comment->comment_ID) ?>" /><input type="hidden" name="p" value="<?php echo esc_attr($comment->comment_post_ID) ?>" /><input name="referredby" type="hidden" id="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?php wp_original_referer_field(true, 'previous'); ?><input type="hidden" name="noredir" value="1" /></div></div></div></div></form><script type="text/javascript">try{document.post.name.focus();}catch(e){}</script>
<?php/** * Atom Feed Template for displaying Atom Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="' . get_option('blog_charset') . '" ?' . '>';?><feed	xmlns="http://www.w3.org/2005/Atom"	xml:lang="<?php echo get_option('rss_language'); ?>"	xmlns:thr="http://purl.org/syndication/thread/1.0"	<?php do_action('atom_ns'); do_action('atom_comments_ns'); ?>>	<title type="text"><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %1$s searching on %2$s')), get_bloginfo_rss( 'name' ), get_search_query() );		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<subtitle type="text"><?php bloginfo_rss('description'); ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastcommentmodified('GMT'), false); ?></updated><?php if ( is_singular() ) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php comments_link_feed(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_post_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_post_comments_feed_link('', 'atom'); ?></id><?php } elseif(is_search()) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php echo home_url() . '?s=' . get_search_query(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_search_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_search_comments_feed_link('', 'atom'); ?></id><?php } else { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php bloginfo_rss('url'); ?>" />	<link rel="self" type="application/atom+xml" href="<?php bloginfo_rss('comments_atom_url'); ?>" />	<id><?php bloginfo_rss('comments_atom_url'); ?></id><?php } ?><?php do_action('comments_atom_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<entry>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link rel="alternate" href="<?php comment_link(); ?>" type="<?php bloginfo_rss('html_type'); ?>" />		<author>			<name><?php comment_author_rss(); ?></name>			<?php if (get_comment_author_url()) echo '<uri>' . get_comment_author_url() . '</uri>'; ?>		</author>		<id><?php comment_guid(); ?></id>		<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></updated>		<published><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></published><?php if ( post_password_required($comment_post) ) : ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php echo get_the_password_form(); ?>]]></content><?php else : // post pass ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php comment_text(); ?>]]></content><?php endif; // post pass	// Return comment threading information (http://www.ietf.org/rfc/rfc4685.txt)	if ( $comment->comment_parent == 0 ) : // This comment is top level ?>		<thr:in-reply-to ref="<?php the_guid(); ?>" href="<?php the_permalink_rss() ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php else : // This comment is in reply to another comment	$parent_comment = get_comment($comment->comment_parent);	// The rel attribute below and the id tag above should be GUIDs, but WP doesn't create them for comments (unlike posts). Either way, its more important that they both use the same system?>		<thr:in-reply-to ref="<?php comment_guid($parent_comment) ?>" href="<?php echo get_comment_link($parent_comment) ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php endif;	do_action('comment_atom_entry', $comment->comment_ID, $comment_post->ID);?>	</entry><?php endwhile; endif; ?></feed>
<?php/** * Edit links form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( ! empty($link_id) ) {	$heading = sprintf( __( '<a href="%s">Links</a> / Edit Link' ), 'link-manager.php' );	$submit_text = __('Update Link');	$form = '<form name="editlink" id="editlink" method="post" action="link.php">';	$nonce_action = 'update-bookmark_' . $link_id;} else {	$heading = sprintf( __( '<a href="%s">Links</a> / Add New Link' ), 'link-manager.php' );	$submit_text = __('Add Link');	$form = '<form name="addlink" id="addlink" method="post" action="link.php">';	$nonce_action = 'add-bookmark';}require_once('./includes/meta-boxes.php');add_meta_box('linksubmitdiv', __('Save'), 'link_submit_meta_box', 'link', 'side', 'core');add_meta_box('linkcategorydiv', __('Categories'), 'link_categories_meta_box', 'link', 'normal', 'core');add_meta_box('linktargetdiv', __('Target'), 'link_target_meta_box', 'link', 'normal', 'core');add_meta_box('linkxfndiv', __('Link Relationship (XFN)'), 'link_xfn_meta_box', 'link', 'normal', 'core');add_meta_box('linkadvanceddiv', __('Advanced'), 'link_advanced_meta_box', 'link', 'normal', 'core');do_action('add_meta_boxes', 'link', $link);do_action('add_meta_boxes_link', $link);do_action('do_meta_boxes', 'link', 'normal', $link);do_action('do_meta_boxes', 'link', 'advanced', $link);do_action('do_meta_boxes', 'link', 'side', $link);add_contextual_help($current_screen,	'<p>' . __( 'You can add or edit links on this screen by entering information in each of the boxes. Only the link&#8217;s web address and name (the text you want to display on your site as the link) are required fields.' ) . '</p>' .	'<p>' . __( 'The boxes for link name, web address, and description have fixed positions, while the others may be repositioned using drag and drop. You can also hide boxes you don&#8217;t use in the Screen Options tab, or minimize boxes by clicking on the title bar of the box.' ) . '</p>' .	'<p>' . __( 'XFN stands for <a href="http://gmpg.org/xfn/" target="_blank">XHTML Friends Network</a>, which is optional. WordPress allows the generation of XFN attributes to show how you are related to the authors/owners of the site to which you are linking.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Links_Add_New_SubPanel" target="_blank">Documentation on Creating Links</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>');require_once ('admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset( $_GET['added'] ) ) : ?><div id="message" class="updated"><p><?php _e('Link added.'); ?></p></div><?php endif; ?><?phpif ( !empty($form) )	echo $form;if ( !empty($link_added) )	echo $link_added;wp_nonce_field( $nonce_action );wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?><div id="poststuff" class="metabox-holder<?php echo 2 == $screen_layout_columns ? ' has-right-sidebar' : ''; ?>"><div id="side-info-column" class="inner-sidebar"><?phpdo_action('submitlink_box');$side_meta_boxes = do_meta_boxes( 'link', 'side', $link );?></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="link_name"><?php _e('Name') ?></label></h3><div class="inside">	<input type="text" name="link_name" size="30" tabindex="1" value="<?php echo esc_attr($link->link_name); ?>" id="link_name" />    <p><?php _e('Example: Nifty blogging software'); ?></p></div></div><div id="addressdiv" class="stuffbox"><h3><label for="link_url"><?php _e('Web Address') ?></label></h3><div class="inside">	<input type="text" name="link_url" size="30" class="code" tabindex="1" value="<?php echo esc_attr($link->link_url); ?>" id="link_url" />    <p><?php _e('Example: <code>http://wordpress.org/</code> &#8212; don&#8217;t forget the <code>http://</code>'); ?></p></div></div><div id="descriptiondiv" class="stuffbox"><h3><label for="link_description"><?php _e('Description') ?></label></h3><div class="inside">	<input type="text" name="link_description" size="30" tabindex="1" value="<?php echo isset($link->link_description) ? esc_attr($link->link_description) : ''; ?>" id="link_description" />    <p><?php _e('This will be shown when someone hovers over the link in the blogroll, or optionally below the link.'); ?></p></div></div><?phpdo_meta_boxes('link', 'normal', $link);do_meta_boxes('link', 'advanced', $link);if ( $link_id ) : ?><input type="hidden" name="action" value="save" /><input type="hidden" name="link_id" value="<?php echo (int) $link_id; ?>" /><input type="hidden" name="order_by" value="<?php echo esc_attr($order_by); ?>" /><input type="hidden" name="cat_id" value="<?php echo (int) $cat_id ?>" /><?php else: ?><input type="hidden" name="action" value="add" /><?php endif; ?></div></div></div></form></div>
<?php/** * The Template for displaying all single posts. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="nav-above" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-above -->				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-meta">						<?php twentyten_posted_on(); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content --><?php if ( get_the_author_meta( 'description' ) ) : // If a user has filled out their description, show a bio on their entries  ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( esc_attr__( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>							<div id="author-link">								<a href="<?php echo get_author_posts_url( get_the_author_meta( 'ID' ) ); ?>">									<?php printf( __( 'View all posts by %s <span class="meta-nav">&rarr;</span>', 'twentyten' ), get_the_author() ); ?>								</a>							</div><!-- #author-link	-->						</div><!-- #author-description -->					</div><!-- #entry-author-info --><?php endif; ?>					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## -->				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-below -->				<?php comments_template( '', true ); ?><?php endwhile; // end of the loop. ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Deprecated.  Use rss.php instead. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC . '/rss.php' );require_once (ABSPATH . WPINC . '/rss.php');?>
<?php/** * WordPress Post Thumbnail Template Functions. * * Support for post thumbnails * Themes function.php must call add_theme_support( 'post-thumbnails' ) to use these. * * @package WordPress * @subpackage Template *//** * Check if post has an image attached. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post has an image attached. */function has_post_thumbnail( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return !! get_post_thumbnail_id( $post_id );}/** * Retrieve Post Thumbnail ID. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return int */function get_post_thumbnail_id( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return get_post_meta( $post_id, '_thumbnail_id', true );}/** * Display Post Thumbnail. * * @since 2.9.0 * * @param int $size Optional. Image size.  Defaults to 'post-thumbnail', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );. * @param string|array $attr Optional. Query string or array of attributes. */function the_post_thumbnail( $size = 'post-thumbnail', $attr = '' ) {	echo get_the_post_thumbnail( NULL, $size, $attr );}/** * Retrieve Post Thumbnail. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @param string $size Optional. Image size.  Defaults to 'thumbnail'. * @param string|array $attr Optional. Query string or array of attributes.  */function get_the_post_thumbnail( $post_id = NULL, $size = 'post-thumbnail', $attr = '' ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	$post_thumbnail_id = get_post_thumbnail_id( $post_id );	$size = apply_filters( 'post_thumbnail_size', $size );	if ( $post_thumbnail_id ) {		do_action( 'begin_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size ); // for "Just In Time" filtering of all of wp_get_attachment_image()'s filters		$html = wp_get_attachment_image( $post_thumbnail_id, $size, false, $attr );		do_action( 'end_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size );	} else {		$html = '';	}	return apply_filters( 'post_thumbnail_html', $html, $post_id, $post_thumbnail_id, $size, $attr );}?>
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * FTP implementation using fsockopen to connect. * * @package PemFTP * @subpackage Pure * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(false, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@stream_set_timeout($sock, $this->_timeout)) {			$this->PushError('_settimeout','socket set send timeout');			$this->_quit();			return FALSE;		}		return TRUE;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		$sock = @fsockopen($host, $port, $errno, $errstr, $this->_timeout);		if (!$sock) {			$this->PushError('_connect','socket connect failed', $errstr." (".$errno.")");			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction, 'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@fgets($this->_ftp_control_sock, 512);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed');			} else {				$this->_message.=$tmp;				if(preg_match("/^([0-9]{3})(-(.*[".CRLF."]{1,2})+\\1)? [^".CRLF."]+[".CRLF."]{1,2}$/", $this->_message, $regs)) $go=false;			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@fputs($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed');			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_data_sock=@fsockopen($this->_datahost, $this->_dataport, $errno, $errstr, $this->_timeout);			if(!$this->_ftp_data_sock) {				$this->PushError("_data_prepare","fsockopen fails", $errstr." (".$errno.")");				$this->_data_close();				return FALSE;			}			else $this->_ftp_data_sock;		} else {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		while (!feof($this->_ftp_data_sock)) {			$block=fread($this->_ftp_data_sock, $this->_ftp_buff_size);			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return TRUE;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@fwrite($this->_ftp_data_sock, $block))===FALSE) {				$this->PushError("_data_write","Can't write to socket");				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@fclose($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit($force=FALSE) {		if($this->_connected or $force) {			@fclose($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * RSS 0.92 Feed Template for displaying RSS 0.92 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="0.92"><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<docs>http://backend.userland.com/rss092</docs>	<language><?php echo get_option('rss_language'); ?></language>	<?php do_action('rss_head'); ?><?php while (have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>		<link><?php the_permalink_rss() ?></link>		<?php do_action('rss_item'); ?>	</item><?php endwhile; ?></channel></rss>
<?php/** * Comment Management Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once('./admin.php');$parent_file = 'edit-comments.php';$submenu_file = 'edit-comments.php';wp_reset_vars( array('action') );if ( isset( $_POST['deletecomment'] ) )	$action = 'deletecomment';if ( 'cdc' == $action )	$action = 'delete';elseif ( 'mac' == $action )	$action = 'approve';if ( isset( $_GET['dt'] ) ) {	if ( 'spam' == $_GET['dt'] )		$action = 'spam';	elseif ( 'trash' == $_GET['dt'] )		$action = 'trash';}/** * Display error message at bottom of comments. * * @param string $msg Error Message. Assumed to contain HTML and be sanitized. */function comment_footer_die( $msg ) {	echo "<div class='wrap'><p>$msg</p></div>";	include('./admin-footer.php');	die;}switch( $action ) {case 'editcomment' :	$title = __('Edit Comment');	add_contextual_help( $current_screen, '<p>' . __( 'You can edit the information left in a comment if needed. This is often useful when you notice that a commenter has made a typographical error.' ) . '</p>' .	'<p>' . __( 'You can also moderate the comment from this screen using the Status box, where you can also change the timestamp of the comment.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Administration_Panels#Comments" target="_blank">Comments Documentation</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank" >Support Forums</a>' ) . '</p>'	);	wp_enqueue_script('comment');	require_once('./admin-header.php');	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment( $comment_id ) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'javascript:history.go(-1)') );	if ( !current_user_can('edit_post', $comment->comment_post_ID) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( 'trash' == $comment->comment_approved )		comment_footer_die( __('This comment is in the Trash. Please move it out of the Trash if you want to edit it.') );	$comment = get_comment_to_edit( $comment_id );	include('./edit-form-comment.php');	break;case 'delete'  :case 'approve' :case 'trash'   :case 'spam'    :	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment_to_edit( $comment_id ) ) {		wp_redirect( admin_url('edit-comments.php?error=1') );		die();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) ) {		wp_redirect( admin_url('edit-comments.php?error=2') );		die();	}	// No need to re-approve/re-trash/re-spam a comment.	if ( $action == str_replace( '1', 'approve', $comment->comment_approved ) ) {		wp_redirect( admin_url( 'edit-comments.php?same=' . $comment_id ) );		die(); 	}	require_once('./admin-header.php');	$formaction    = $action . 'comment';	$nonce_action  = 'approve' == $action ? 'approve-comment_' : 'delete-comment_';	$nonce_action .= $comment_id;?><div class='wrap'><div class="narrow"><?php screen_icon(); ?><h2><?php esc_html_e( 'Moderate Comment' ); ?></h2><?phpswitch ( $action ) {	case 'spam' :		$caution_msg = __('You are about to mark the following comment as spam:');		$button      = __('Spam Comment');		break;	case 'trash' :		$caution_msg = __('You are about to move the following comment to the Trash:');		$button      = __('Trash Comment');		break;	case 'delete' :		$caution_msg = __('You are about to delete the following comment:');		$button      = __('Permanently Delete Comment');		break;	default :		$caution_msg = __('You are about to approve the following comment:');		$button      = __('Approve Comment');		break;}if ( $comment->comment_approved != '0' ) { // if not unapproved	$message = '';	switch ( $comment->comment_approved ) {		case '1' :			$message = __('This comment is currently approved.');			break;		case 'spam' :			$message  = __('This comment is currently marked as spam.');			break;		case 'trash' :			$message  = __('This comment is currently in the Trash.');			break;	}	if ( $message )		echo '<div class="updated"><p>' . $message . '</p></div>';}?><p><strong><?php _e('Caution:'); ?></strong> <?php echo $caution_msg; ?></p><table class="form-table comment-ays"><tr class="alt"><th scope="row"><?php _e('Author'); ?></th><td><?php echo $comment->comment_author; ?></td></tr><?php if ( $comment->comment_author_email ) { ?><tr><th scope="row"><?php _e('E-mail'); ?></th><td><?php echo $comment->comment_author_email; ?></td></tr><?php } ?><?php if ( $comment->comment_author_url ) { ?><tr><th scope="row"><?php _e('URL'); ?></th><td><a href="<?php echo $comment->comment_author_url; ?>"><?php echo $comment->comment_author_url; ?></a></td></tr><?php } ?><tr><th scope="row" valign="top"><?php /* translators: field name in comment form */ _ex('Comment', 'noun'); ?></th><td><?php echo $comment->comment_content; ?></td></tr></table><p><?php _e('Are you sure you want to do this?'); ?></p><form action='comment.php' method='get'><table width="100%"><tr><td><a class="button" href="<?php echo admin_url('edit-comments.php'); ?>"><?php esc_attr_e('No'); ?></a></td><td class="textright"><input type='submit' class="button" value='<?php echo esc_attr($button); ?>' /></td></tr></table><?php wp_nonce_field( $nonce_action ); ?><input type='hidden' name='action' value='<?php echo esc_attr($formaction); ?>' /><input type='hidden' name='p' value='<?php echo esc_attr($comment->comment_post_ID); ?>' /><input type='hidden' name='c' value='<?php echo esc_attr($comment->comment_ID); ?>' /><input type='hidden' name='noredir' value='1' /></form></div></div><?php	break;case 'deletecomment'    :case 'trashcomment'     :case 'untrashcomment'   :case 'spamcomment'      :case 'unspamcomment'    :case 'approvecomment'   :case 'unapprovecomment' :	$comment_id = absint( $_REQUEST['c'] );	if ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		check_admin_referer( 'approve-comment_' . $comment_id );	else		check_admin_referer( 'delete-comment_' . $comment_id );	$noredir = isset($_REQUEST['noredir']);	if ( !$comment = get_comment($comment_id) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'edit-comments.php') );	if ( !current_user_can('edit_post', $comment->comment_post_ID ) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( '' != wp_get_referer() && ! $noredir && false === strpos(wp_get_referer(), 'comment.php') )		$redir = wp_get_referer();	elseif ( '' != wp_get_original_referer() && ! $noredir )		$redir = wp_get_original_referer();	elseif ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		$redir = admin_url('edit-comments.php?p=' . absint( $comment->comment_post_ID ) );	else		$redir = admin_url('edit-comments.php');	$redir = remove_query_arg( array('spammed', 'unspammed', 'trashed', 'untrashed', 'deleted', 'ids', 'approved', 'unapproved'), $redir );	switch ( $action ) {		case 'deletecomment' :			wp_delete_comment( $comment_id );			$redir = add_query_arg( array('deleted' => '1'), $redir );			break;		case 'trashcomment' :			wp_trash_comment($comment_id);			$redir = add_query_arg( array('trashed' => '1', 'ids' => $comment_id), $redir );			break;		case 'untrashcomment' :			wp_untrash_comment($comment_id);			$redir = add_query_arg( array('untrashed' => '1'), $redir );			break;		case 'spamcomment' :			wp_spam_comment($comment_id);			$redir = add_query_arg( array('spammed' => '1', 'ids' => $comment_id), $redir );			break;		case 'unspamcomment' :			wp_unspam_comment($comment_id);			$redir = add_query_arg( array('unspammed' => '1'), $redir );			break;		case 'approvecomment' :			wp_set_comment_status( $comment_id, 'approve' );			$redir = add_query_arg( array( 'approved' => 1 ), $redir );			break;		case 'unapprovecomment' :			wp_set_comment_status( $comment_id, 'hold' );			$redir = add_query_arg( array( 'unapproved' => 1 ), $redir );			break;	}	wp_redirect( $redir );	die;	break;case 'editedcomment' :	$comment_id = absint( $_POST['comment_ID'] );	$comment_post_id = absint( $_POST['comment_post_ID'] );	check_admin_referer( 'update-comment_' . $comment_id );	edit_comment();	$location = ( empty( $_POST['referredby'] ) ? "edit-comments.php?p=$comment_post_id" : $_POST['referredby'] ) . '#comment-' . $comment_id;	$location = apply_filters( 'comment_edit_redirect', $location, $comment_id );	wp_redirect( $location );	exit();	break;default:	wp_die( __('Unknown action.') );	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Class for working with MO files * * @version $Id: mo.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage mo */require_once dirname(__FILE__) . '/translations.php';require_once dirname(__FILE__) . '/streams.php';if ( !class_exists( 'MO' ) ):class MO extends Gettext_Translations {	var $_nplurals = 2;	/**	 * Fills up with the entries from MO file $filename	 *	 * @param string $filename MO file to load	 */	function import_from_file($filename) {		$reader = new POMO_FileReader($filename);		if (!$reader->is_resource())			return false;		return $this->import_from_reader($reader);	}	function export_to_file($filename) {		$fh = fopen($filename, 'wb');		if ( !$fh ) return false;		$entries = array_filter($this->entries, create_function('$e', 'return !empty($e->translations);'));		ksort($entries);		$magic = 0x950412de;		$revision = 0;		$total = count($entries) + 1; // all the headers are one entry		$originals_lenghts_addr = 28;		$translations_lenghts_addr = $originals_lenghts_addr + 8 * $total;		$size_of_hash = 0;		$hash_addr = $translations_lenghts_addr + 8 * $total;		$current_addr = $hash_addr;		fwrite($fh, pack('V*', $magic, $revision, $total, $originals_lenghts_addr,			$translations_lenghts_addr, $size_of_hash, $hash_addr));		fseek($fh, $originals_lenghts_addr);		// headers' msgid is an empty string		fwrite($fh, pack('VV', 0, $current_addr));		$current_addr++;		$originals_table = chr(0);		foreach($entries as $entry) {			$originals_table .= $this->export_original($entry) . chr(0);			$length = strlen($this->export_original($entry));			fwrite($fh, pack('VV', $length, $current_addr));			$current_addr += $length + 1; // account for the NULL byte after		}		$exported_headers = $this->export_headers();		fwrite($fh, pack('VV', strlen($exported_headers), $current_addr));		$current_addr += strlen($exported_headers) + 1;		$translations_table = $exported_headers . chr(0);		foreach($entries as $entry) {			$translations_table .= $this->export_translations($entry) . chr(0);			$length = strlen($this->export_translations($entry));			fwrite($fh, pack('VV', $length, $current_addr));			$current_addr += $length + 1;		}		fwrite($fh, $originals_table);		fwrite($fh, $translations_table);		fclose($fh);	}	function export_original($entry) {		//TODO: warnings for control characters		$exported = $entry->singular;		if ($entry->is_plural) $exported .= chr(0).$entry->plural;		if (!is_null($entry->context)) $exported = $entry->context . chr(4) . $exported;		return $exported;	}	function export_translations($entry) {		//TODO: warnings for control characters		return implode(chr(0), $entry->translations);	}	function export_headers() {		$exported = '';		foreach($this->headers as $header => $value) {			$exported.= "$header: $value\n";		}		return $exported;	}	function get_byteorder($magic) {		// The magic is 0x950412de		// bug in PHP 5.0.2, see https://savannah.nongnu.org/bugs/?func=detailitem&item_id=10565		$magic_little = (int) - 1794895138;		$magic_little_64 = (int) 2500072158;		// 0xde120495		$magic_big = ((int) - 569244523) & 0xFFFFFFFF;		if ($magic_little == $magic || $magic_little_64 == $magic) {			return 'little';		} else if ($magic_big == $magic) {			return 'big';		} else {			return false;		}	}	function import_from_reader($reader) {		$endian_string = MO::get_byteorder($reader->readint32());		if (false === $endian_string) {			return false;		}		$reader->setEndian($endian_string);		$endian = ('big' == $endian_string)? 'N' : 'V';		$header = $reader->read(24);		if ($reader->strlen($header) != 24)			return false;		// parse header		$header = unpack("{$endian}revision/{$endian}total/{$endian}originals_lenghts_addr/{$endian}translations_lenghts_addr/{$endian}hash_length/{$endian}hash_addr", $header);		if (!is_array($header))			return false;		extract( $header );		// support revision 0 of MO format specs, only		if ($revision != 0)			return false;		// seek to data blocks		$reader->seekto($originals_lenghts_addr);		// read originals' indices		$originals_lengths_length = $translations_lenghts_addr - $originals_lenghts_addr;		if ( $originals_lengths_length != $total * 8 )			return false;		$originals = $reader->read($originals_lengths_length);		if ( $reader->strlen( $originals ) != $originals_lengths_length )			return false;		// read translations' indices		$translations_lenghts_length = $hash_addr - $translations_lenghts_addr;		if ( $translations_lenghts_length != $total * 8 )			return false;		$translations = $reader->read($translations_lenghts_length);		if ( $reader->strlen( $translations ) != $translations_lenghts_length )			return false;		// transform raw data into set of indices		$originals    = $reader->str_split( $originals, 8 );		$translations = $reader->str_split( $translations, 8 );		// skip hash table		$strings_addr = $hash_addr + $hash_length * 4;		$reader->seekto($strings_addr);		$strings = $reader->read_all();		$reader->close();		for ( $i = 0; $i < $total; $i++ ) {			$o = unpack( "{$endian}length/{$endian}pos", $originals[$i] );			$t = unpack( "{$endian}length/{$endian}pos", $translations[$i] );			if ( !$o || !$t ) return false;			// adjust offset due to reading strings to separate space before			$o['pos'] -= $strings_addr;			$t['pos'] -= $strings_addr;			$original    = $reader->substr( $strings, $o['pos'], $o['length'] );			$translation = $reader->substr( $strings, $t['pos'], $t['length'] );			if ('' === $original) {				$this->set_headers($this->make_headers($translation));			} else {				$entry = &$this->make_entry($original, $translation);				$this->entries[$entry->key()] = &$entry;			}		}		return true;	}	/**	 * Build a Translation_Entry from original string and translation strings,	 * found in a MO file	 *	 * @static	 * @param string $original original string to translate from MO file. Might contain	 * 	0x04 as context separator or 0x00 as singular/plural separator	 * @param string $translation translation string from MO file. Might contain	 * 	0x00 as a plural translations separator	 */	function &make_entry($original, $translation) {		$entry = new Translation_Entry();		// look for context		$parts = explode(chr(4), $original);		if (isset($parts[1])) {			$original = $parts[1];			$entry->context = $parts[0];		}		// look for plural original		$parts = explode(chr(0), $original);		$entry->singular = $parts[0];		if (isset($parts[1])) {			$entry->is_plural = true;			$entry->plural = $parts[1];		}		// plural translations are also separated by \0		$entry->translations = explode(chr(0), $translation);		return $entry;	}	function select_plural_form($count) {		return $this->gettext_select_plural_form($count);	}	function get_plural_forms_count() {		return $this->_nplurals;	}}endif;
<?php/** * The template for displaying Search Results pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) : ?>				<h1 class="page-title"><?php printf( __( 'Search Results for: %s', 'twentyten' ), '<span>' . get_search_query() . '</span>' ); ?></h1>				<?php				/* Run the loop for the search to output the results.				 * If you want to overload this in a child theme then include a file				 * called loop-search.php and that will be used instead.				 */				 get_template_part( 'loop', 'search' );				?><?php else : ?>				<div id="post-0" class="post no-results not-found">					<h2 class="entry-title"><?php _e( 'Nothing Found', 'twentyten' ); ?></h2>					<div class="entry-content">						<p><?php _e( 'Sorry, but nothing matched your search criteria. Please try again with some different keywords.', 'twentyten' ); ?></p>						<?php get_search_form(); ?>					</div><!-- .entry-content -->				</div><!-- #post-0 --><?php endif; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Class used internally by Text_Diff to actually compute the diffs. * * This class is implemented using native PHP code. * * The algorithm used here is mostly lifted from the perl module * Algorithm::Diff (version 1.06) by Ned Konz, which is available at: * http://www.perl.com/CPAN/authors/id/N/NE/NEDKONZ/Algorithm-Diff-1.06.zip * * More ideas are taken from: http://www.ics.uci.edu/~eppstein/161/960229.html * * Some ideas (and a bit of code) are taken from analyze.c, of GNU * diffutils-2.7, which can be found at: * ftp://gnudist.gnu.org/pub/gnu/diffutils/diffutils-2.7.tar.gz * * Some ideas (subdivision by NCHUNKS > 2, and some optimizations) are from * Geoffrey T. Dairiki <dairiki@dairiki.org>. The original PHP version of this * code was written by him, and is used/adapted with his permission. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * @package Text_Diff */class Text_Diff_Engine_native {    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        $n_from = count($from_lines);        $n_to = count($to_lines);        $this->xchanged = $this->ychanged = array();        $this->xv = $this->yv = array();        $this->xind = $this->yind = array();        unset($this->seq);        unset($this->in_seq);        unset($this->lcs);        // Skip leading common lines.        for ($skip = 0; $skip < $n_from && $skip < $n_to; $skip++) {            if ($from_lines[$skip] !== $to_lines[$skip]) {                break;            }            $this->xchanged[$skip] = $this->ychanged[$skip] = false;        }        // Skip trailing common lines.        $xi = $n_from; $yi = $n_to;        for ($endskip = 0; --$xi > $skip && --$yi > $skip; $endskip++) {            if ($from_lines[$xi] !== $to_lines[$yi]) {                break;            }            $this->xchanged[$xi] = $this->ychanged[$yi] = false;        }        // Ignore lines which do not exist in both files.        for ($xi = $skip; $xi < $n_from - $endskip; $xi++) {            $xhash[$from_lines[$xi]] = 1;        }        for ($yi = $skip; $yi < $n_to - $endskip; $yi++) {            $line = $to_lines[$yi];            if (($this->ychanged[$yi] = empty($xhash[$line]))) {                continue;            }            $yhash[$line] = 1;            $this->yv[] = $line;            $this->yind[] = $yi;        }        for ($xi = $skip; $xi < $n_from - $endskip; $xi++) {            $line = $from_lines[$xi];            if (($this->xchanged[$xi] = empty($yhash[$line]))) {                continue;            }            $this->xv[] = $line;            $this->xind[] = $xi;        }        // Find the LCS.        $this->_compareseq(0, count($this->xv), 0, count($this->yv));        // Merge edits when possible.        $this->_shiftBoundaries($from_lines, $this->xchanged, $this->ychanged);        $this->_shiftBoundaries($to_lines, $this->ychanged, $this->xchanged);        // Compute the edit operations.        $edits = array();        $xi = $yi = 0;        while ($xi < $n_from || $yi < $n_to) {            assert($yi < $n_to || $this->xchanged[$xi]);            assert($xi < $n_from || $this->ychanged[$yi]);            // Skip matching "snake".            $copy = array();            while ($xi < $n_from && $yi < $n_to                   && !$this->xchanged[$xi] && !$this->ychanged[$yi]) {                $copy[] = $from_lines[$xi++];                ++$yi;            }            if ($copy) {                $edits[] = &new Text_Diff_Op_copy($copy);            }            // Find deletes & adds.            $delete = array();            while ($xi < $n_from && $this->xchanged[$xi]) {                $delete[] = $from_lines[$xi++];            }            $add = array();            while ($yi < $n_to && $this->ychanged[$yi]) {                $add[] = $to_lines[$yi++];            }            if ($delete && $add) {                $edits[] = &new Text_Diff_Op_change($delete, $add);            } elseif ($delete) {                $edits[] = &new Text_Diff_Op_delete($delete);            } elseif ($add) {                $edits[] = &new Text_Diff_Op_add($add);            }        }        return $edits;    }    /**     * Divides the Largest Common Subsequence (LCS) of the sequences (XOFF,     * XLIM) and (YOFF, YLIM) into NCHUNKS approximately equally sized     * segments.     *     * Returns (LCS, PTS).  LCS is the length of the LCS. PTS is an array of     * NCHUNKS+1 (X, Y) indexes giving the diving points between sub     * sequences.  The first sub-sequence is contained in (X0, X1), (Y0, Y1),     * the second in (X1, X2), (Y1, Y2) and so on.  Note that (X0, Y0) ==     * (XOFF, YOFF) and (X[NCHUNKS], Y[NCHUNKS]) == (XLIM, YLIM).     *     * This function assumes that the first lines of the specified portions of     * the two files do not match, and likewise that the last lines do not     * match.  The caller must trim matching lines from the beginning and end     * of the portions it is going to specify.     */    function _diag ($xoff, $xlim, $yoff, $ylim, $nchunks)    {        $flip = false;        if ($xlim - $xoff > $ylim - $yoff) {            /* Things seems faster (I'm not sure I understand why) when the             * shortest sequence is in X. */            $flip = true;            list ($xoff, $xlim, $yoff, $ylim)                = array($yoff, $ylim, $xoff, $xlim);        }        if ($flip) {            for ($i = $ylim - 1; $i >= $yoff; $i--) {                $ymatches[$this->xv[$i]][] = $i;            }        } else {            for ($i = $ylim - 1; $i >= $yoff; $i--) {                $ymatches[$this->yv[$i]][] = $i;            }        }        $this->lcs = 0;        $this->seq[0]= $yoff - 1;        $this->in_seq = array();        $ymids[0] = array();        $numer = $xlim - $xoff + $nchunks - 1;        $x = $xoff;        for ($chunk = 0; $chunk < $nchunks; $chunk++) {            if ($chunk > 0) {                for ($i = 0; $i <= $this->lcs; $i++) {                    $ymids[$i][$chunk - 1] = $this->seq[$i];                }            }            $x1 = $xoff + (int)(($numer + ($xlim - $xoff) * $chunk) / $nchunks);            for (; $x < $x1; $x++) {                $line = $flip ? $this->yv[$x] : $this->xv[$x];                if (empty($ymatches[$line])) {                    continue;                }                $matches = $ymatches[$line];                reset($matches);                while (list(, $y) = each($matches)) {                    if (empty($this->in_seq[$y])) {                        $k = $this->_lcsPos($y);                        assert($k > 0);                        $ymids[$k] = $ymids[$k - 1];                        break;                    }                }                while (list(, $y) = each($matches)) {                    if ($y > $this->seq[$k - 1]) {                        assert($y <= $this->seq[$k]);                        /* Optimization: this is a common case: next match is                         * just replacing previous match. */                        $this->in_seq[$this->seq[$k]] = false;                        $this->seq[$k] = $y;                        $this->in_seq[$y] = 1;                    } elseif (empty($this->in_seq[$y])) {                        $k = $this->_lcsPos($y);                        assert($k > 0);                        $ymids[$k] = $ymids[$k - 1];                    }                }            }        }        $seps[] = $flip ? array($yoff, $xoff) : array($xoff, $yoff);        $ymid = $ymids[$this->lcs];        for ($n = 0; $n < $nchunks - 1; $n++) {            $x1 = $xoff + (int)(($numer + ($xlim - $xoff) * $n) / $nchunks);            $y1 = $ymid[$n] + 1;            $seps[] = $flip ? array($y1, $x1) : array($x1, $y1);        }        $seps[] = $flip ? array($ylim, $xlim) : array($xlim, $ylim);        return array($this->lcs, $seps);    }    function _lcsPos($ypos)    {        $end = $this->lcs;        if ($end == 0 || $ypos > $this->seq[$end]) {            $this->seq[++$this->lcs] = $ypos;            $this->in_seq[$ypos] = 1;            return $this->lcs;        }        $beg = 1;        while ($beg < $end) {            $mid = (int)(($beg + $end) / 2);            if ($ypos > $this->seq[$mid]) {                $beg = $mid + 1;            } else {                $end = $mid;            }        }        assert($ypos != $this->seq[$end]);        $this->in_seq[$this->seq[$end]] = false;        $this->seq[$end] = $ypos;        $this->in_seq[$ypos] = 1;        return $end;    }    /**     * Finds LCS of two sequences.     *     * The results are recorded in the vectors $this->{x,y}changed[], by     * storing a 1 in the element for each line that is an insertion or     * deletion (ie. is not in the LCS).     *     * The subsequence of file 0 is (XOFF, XLIM) and likewise for file 1.     *     * Note that XLIM, YLIM are exclusive bounds.  All line numbers are     * origin-0 and discarded lines are not counted.     */    function _compareseq ($xoff, $xlim, $yoff, $ylim)    {        /* Slide down the bottom initial diagonal. */        while ($xoff < $xlim && $yoff < $ylim               && $this->xv[$xoff] == $this->yv[$yoff]) {            ++$xoff;            ++$yoff;        }        /* Slide up the top initial diagonal. */        while ($xlim > $xoff && $ylim > $yoff               && $this->xv[$xlim - 1] == $this->yv[$ylim - 1]) {            --$xlim;            --$ylim;        }        if ($xoff == $xlim || $yoff == $ylim) {            $lcs = 0;        } else {            /* This is ad hoc but seems to work well.  $nchunks =             * sqrt(min($xlim - $xoff, $ylim - $yoff) / 2.5); $nchunks =             * max(2,min(8,(int)$nchunks)); */            $nchunks = min(7, $xlim - $xoff, $ylim - $yoff) + 1;            list($lcs, $seps)                = $this->_diag($xoff, $xlim, $yoff, $ylim, $nchunks);        }        if ($lcs == 0) {            /* X and Y sequences have no common subsequence: mark all             * changed. */            while ($yoff < $ylim) {                $this->ychanged[$this->yind[$yoff++]] = 1;            }            while ($xoff < $xlim) {                $this->xchanged[$this->xind[$xoff++]] = 1;            }        } else {            /* Use the partitions to split this problem into subproblems. */            reset($seps);            $pt1 = $seps[0];            while ($pt2 = next($seps)) {                $this->_compareseq ($pt1[0], $pt2[0], $pt1[1], $pt2[1]);                $pt1 = $pt2;            }        }    }    /**     * Adjusts inserts/deletes of identical lines to join changes as much as     * possible.     *     * We do something when a run of changed lines include a line at one end     * and has an excluded, identical line at the other.  We are free to     * choose which identical line is included.  `compareseq' usually chooses     * the one at the beginning, but usually it is cleaner to consider the     * following identical line to be the "change".     *     * This is extracted verbatim from analyze.c (GNU diffutils-2.7).     */    function _shiftBoundaries($lines, &$changed, $other_changed)    {        $i = 0;        $j = 0;        assert('count($lines) == count($changed)');        $len = count($lines);        $other_len = count($other_changed);        while (1) {            /* Scan forward to find the beginning of another run of             * changes. Also keep track of the corresponding point in the             * other file.             *             * Throughout this code, $i and $j are adjusted together so that             * the first $i elements of $changed and the first $j elements of             * $other_changed both contain the same number of zeros (unchanged             * lines).             *             * Furthermore, $j is always kept so that $j == $other_len or             * $other_changed[$j] == false. */            while ($j < $other_len && $other_changed[$j]) {                $j++;            }            while ($i < $len && ! $changed[$i]) {                assert('$j < $other_len && ! $other_changed[$j]');                $i++; $j++;                while ($j < $other_len && $other_changed[$j]) {                    $j++;                }            }            if ($i == $len) {                break;            }            $start = $i;            /* Find the end of this run of changes. */            while (++$i < $len && $changed[$i]) {                continue;            }            do {                /* Record the length of this run of changes, so that we can                 * later determine whether the run has grown. */                $runlength = $i - $start;                /* Move the changed region back, so long as the previous                 * unchanged line matches the last changed one.  This merges                 * with previous changed regions. */                while ($start > 0 && $lines[$start - 1] == $lines[$i - 1]) {                    $changed[--$start] = 1;                    $changed[--$i] = false;                    while ($start > 0 && $changed[$start - 1]) {                        $start--;                    }                    assert('$j > 0');                    while ($other_changed[--$j]) {                        continue;                    }                    assert('$j >= 0 && !$other_changed[$j]');                }                /* Set CORRESPONDING to the end of the changed run, at the                 * last point where it corresponds to a changed run in the                 * other file. CORRESPONDING == LEN means no such point has                 * been found. */                $corresponding = $j < $other_len ? $i : $len;                /* Move the changed region forward, so long as the first                 * changed line matches the following unchanged one.  This                 * merges with following changed regions.  Do this second, so                 * that if there are no merges, the changed region is moved                 * forward as far as possible. */                while ($i < $len && $lines[$start] == $lines[$i]) {                    $changed[$start++] = false;                    $changed[$i++] = 1;                    while ($i < $len && $changed[$i]) {                        $i++;                    }                    assert('$j < $other_len && ! $other_changed[$j]');                    $j++;                    if ($j < $other_len && $other_changed[$j]) {                        $corresponding = $i;                        while ($j < $other_len && $other_changed[$j]) {                            $j++;                        }                    }                }            } while ($runlength != $i - $start);            /* If possible, move the fully-merged run of changes back to a             * corresponding run in the other file. */            while ($corresponding < $i) {                $changed[--$start] = 1;                $changed[--$i] = 0;                assert('$j > 0');                while ($other_changed[--$j]) {                    continue;                }                assert('$j >= 0 && !$other_changed[$j]');            }        }    }}
<?php/** * Used to be the page which displayed the registration form. * * This file is no longer used in WordPress and is * deprecated. * * @package WordPress * @deprecated Use wp_register() to create a registration link instead */require('./wp-load.php');wp_redirect('wp-login.php?action=register');?>
<?php/** * A class to render Diffs in different formats. * * This class renders the diff in classic diff format. It is intended that * this class be customized via inheritance, to obtain fancier outputs. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff */class Text_Diff_Renderer {    /**     * Number of leading context "lines" to preserve.     *     * This should be left at zero for this class, but subclasses may want to     * set this to other values.     */    var $_leading_context_lines = 0;    /**     * Number of trailing context "lines" to preserve.     *     * This should be left at zero for this class, but subclasses may want to     * set this to other values.     */    var $_trailing_context_lines = 0;    /**     * Constructor.     */    function Text_Diff_Renderer($params = array())    {        foreach ($params as $param => $value) {            $v = '_' . $param;            if (isset($this->$v)) {                $this->$v = $value;            }        }    }    /**     * Get any renderer parameters.     *     * @return array  All parameters of this renderer object.     */    function getParams()    {        $params = array();        foreach (get_object_vars($this) as $k => $v) {            if ($k[0] == '_') {                $params[substr($k, 1)] = $v;            }        }        return $params;    }    /**     * Renders a diff.     *     * @param Text_Diff $diff  A Text_Diff object.     *     * @return string  The formatted output.     */    function render($diff)    {        $xi = $yi = 1;        $block = false;        $context = array();        $nlead = $this->_leading_context_lines;        $ntrail = $this->_trailing_context_lines;        $output = $this->_startDiff();        $diffs = $diff->getDiff();        foreach ($diffs as $i => $edit) {            /* If these are unchanged (copied) lines, and we want to keep             * leading or trailing context lines, extract them from the copy             * block. */            if (is_a($edit, 'Text_Diff_Op_copy')) {                /* Do we have any diff blocks yet? */                if (is_array($block)) {                    /* How many lines to keep as context from the copy                     * block. */                    $keep = $i == count($diffs) - 1 ? $ntrail : $nlead + $ntrail;                    if (count($edit->orig) <= $keep) {                        /* We have less lines in the block than we want for                         * context => keep the whole block. */                        $block[] = $edit;                    } else {                        if ($ntrail) {                            /* Create a new block with as many lines as we need                             * for the trailing context. */                            $context = array_slice($edit->orig, 0, $ntrail);                            $block[] = &new Text_Diff_Op_copy($context);                        }                        /* @todo */                        $output .= $this->_block($x0, $ntrail + $xi - $x0,                                                 $y0, $ntrail + $yi - $y0,                                                 $block);                        $block = false;                    }                }                /* Keep the copy block as the context for the next block. */                $context = $edit->orig;            } else {                /* Don't we have any diff blocks yet? */                if (!is_array($block)) {                    /* Extract context lines from the preceding copy block. */                    $context = array_slice($context, count($context) - $nlead);                    $x0 = $xi - count($context);                    $y0 = $yi - count($context);                    $block = array();                    if ($context) {                        $block[] = &new Text_Diff_Op_copy($context);                    }                }                $block[] = $edit;            }            if ($edit->orig) {                $xi += count($edit->orig);            }            if ($edit->final) {                $yi += count($edit->final);            }        }        if (is_array($block)) {            $output .= $this->_block($x0, $xi - $x0,                                     $y0, $yi - $y0,                                     $block);        }        return $output . $this->_endDiff();    }    function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)    {        $output = $this->_startBlock($this->_blockHeader($xbeg, $xlen, $ybeg, $ylen));        foreach ($edits as $edit) {            switch (strtolower(get_class($edit))) {            case 'text_diff_op_copy':                $output .= $this->_context($edit->orig);                break;            case 'text_diff_op_add':                $output .= $this->_added($edit->final);                break;            case 'text_diff_op_delete':                $output .= $this->_deleted($edit->orig);                break;            case 'text_diff_op_change':                $output .= $this->_changed($edit->orig, $edit->final);                break;            }        }        return $output . $this->_endBlock();    }    function _startDiff()    {        return '';    }    function _endDiff()    {        return '';    }    function _blockHeader($xbeg, $xlen, $ybeg, $ylen)    {        if ($xlen > 1) {            $xbeg .= ',' . ($xbeg + $xlen - 1);        }        if ($ylen > 1) {            $ybeg .= ',' . ($ybeg + $ylen - 1);        }        // this matches the GNU Diff behaviour        if ($xlen && !$ylen) {            $ybeg--;        } elseif (!$xlen) {            $xbeg--;        }        return $xbeg . ($xlen ? ($ylen ? 'c' : 'd') : 'a') . $ybeg;    }    function _startBlock($header)    {        return $header . "\n";    }    function _endBlock()    {        return '';    }    function _lines($lines, $prefix = ' ')    {        return $prefix . implode("\n$prefix", $lines) . "\n";    }    function _context($lines)    {        return $this->_lines($lines, '  ');    }    function _added($lines)    {        return $this->_lines($lines, '> ');    }    function _deleted($lines)    {        return $this->_lines($lines, '< ');    }    function _changed($orig, $final)    {        return $this->_deleted($orig) . "---\n" . $this->_added($final);    }}
<?php/** * WordPress Diff bastard child of old MediaWiki Diff Formatter. * * Basically all that remains is the table structure and some method names. * * @package WordPress * @subpackage Diff */if ( !class_exists( 'Text_Diff' ) ) {	/** Text_Diff class */	require( dirname(__FILE__).'/Text/Diff.php' );	/** Text_Diff_Renderer class */	require( dirname(__FILE__).'/Text/Diff/Renderer.php' );	/** Text_Diff_Renderer_inline class */	require( dirname(__FILE__).'/Text/Diff/Renderer/inline.php' );}/** * Table renderer to display the diff lines. * * @since 2.6.0 * @uses Text_Diff_Renderer Extends */class WP_Text_Diff_Renderer_Table extends Text_Diff_Renderer {	/**	 * @see Text_Diff_Renderer::_leading_context_lines	 * @var int	 * @access protected	 * @since 2.6.0	 */	var $_leading_context_lines  = 10000;	/**	 * @see Text_Diff_Renderer::_trailing_context_lines	 * @var int	 * @access protected	 * @since 2.6.0	 */	var $_trailing_context_lines = 10000;	/**	 * {@internal Missing Description}}	 *	 * @var float	 * @access protected	 * @since 2.6.0	 */	var $_diff_threshold = 0.6;	/**	 * Inline display helper object name.	 *	 * @var string	 * @access protected	 * @since 2.6.0	 */	var $inline_diff_renderer = 'WP_Text_Diff_Renderer_inline';	/**	 * PHP4 Constructor - Call parent constructor with params array.	 *	 * This will set class properties based on the key value pairs in the array.	 *	 * @since unknown	 *	 * @param array $params	 */	function Text_Diff_Renderer_Table( $params = array() ) {		$parent = get_parent_class($this);		$this->$parent( $params );	}	/**	 * @ignore	 *	 * @param string $header	 * @return string	 */	function _startBlock( $header ) {		return '';	}	/**	 * @ignore	 *	 * @param array $lines	 * @param string $prefix	 */	function _lines( $lines, $prefix=' ' ) {	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function addedLine( $line ) {		return "<td>+</td><td class='diff-addedline'>{$line}</td>";	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function deletedLine( $line ) {		return "<td>-</td><td class='diff-deletedline'>{$line}</td>";	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function contextLine( $line ) {		return "<td> </td><td class='diff-context'>{$line}</td>";	}	/**	 * @ignore	 *	 * @return string	 */	function emptyLine() {		return '<td colspan="2">&nbsp;</td>';	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _added( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' . $this->emptyLine() . $this->addedLine( $line ) . "</tr>\n";		}		return $r;	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _deleted( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' . $this->deletedLine( $line ) . $this->emptyLine() . "</tr>\n";		}		return $r;	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _context( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' .				$this->contextLine( $line ) . $this->contextLine( $line ) . "</tr>\n";		}		return $r;	}	/**	 * Process changed lines to do word-by-word diffs for extra highlighting.	 *	 * (TRAC style) sometimes these lines can actually be deleted or added rows.	 * We do additional processing to figure that out	 *	 * @access private	 * @since 2.6.0	 *	 * @param array $orig	 * @param array $final	 * @return string	 */	function _changed( $orig, $final ) {		$r = '';		// Does the aforementioned additional processing		// *_matches tell what rows are "the same" in orig and final.  Those pairs will be diffed to get word changes		//	match is numeric: an index in other column		//	match is 'X': no match.  It is a new row		// *_rows are column vectors for the orig column and the final column.		//	row >= 0: an indix of the $orig or $final array		//	row  < 0: a blank row for that column		list($orig_matches, $final_matches, $orig_rows, $final_rows) = $this->interleave_changed_lines( $orig, $final );		// These will hold the word changes as determined by an inline diff		$orig_diffs  = array();		$final_diffs = array();		// Compute word diffs for each matched pair using the inline diff		foreach ( $orig_matches as $o => $f ) {			if ( is_numeric($o) && is_numeric($f) ) {				$text_diff = new Text_Diff( 'auto', array( array($orig[$o]), array($final[$f]) ) );				$renderer = new $this->inline_diff_renderer;				$diff = $renderer->render( $text_diff );				// If they're too different, don't include any <ins> or <dels>				if ( $diff_count = preg_match_all( '!(<ins>.*?</ins>|<del>.*?</del>)!', $diff, $diff_matches ) ) {					// length of all text between <ins> or <del>					$stripped_matches = strlen(strip_tags( join(' ', $diff_matches[0]) ));					// since we count lengith of text between <ins> or <del> (instead of picking just one),					//	we double the length of chars not in those tags.					$stripped_diff = strlen(strip_tags( $diff )) * 2 - $stripped_matches;					$diff_ratio = $stripped_matches / $stripped_diff;					if ( $diff_ratio > $this->_diff_threshold )						continue; // Too different.  Don't save diffs.				}				// Un-inline the diffs by removing del or ins				$orig_diffs[$o]  = preg_replace( '|<ins>.*?</ins>|', '', $diff );				$final_diffs[$f] = preg_replace( '|<del>.*?</del>|', '', $diff );			}		}		foreach ( array_keys($orig_rows) as $row ) {			// Both columns have blanks.  Ignore them.			if ( $orig_rows[$row] < 0 && $final_rows[$row] < 0 )				continue;			// If we have a word based diff, use it.  Otherwise, use the normal line.			if ( isset( $orig_diffs[$orig_rows[$row]] ) )				$orig_line = $orig_diffs[$orig_rows[$row]];			elseif ( isset( $orig[$orig_rows[$row]] ) )				$orig_line = htmlspecialchars($orig[$orig_rows[$row]]);			else				$orig_line = '';			if ( isset( $final_diffs[$final_rows[$row]] ) )				$final_line = $final_diffs[$final_rows[$row]];			elseif ( isset( $final[$final_rows[$row]] ) )				$final_line = htmlspecialchars($final[$final_rows[$row]]);			else				$final_line = '';			if ( $orig_rows[$row] < 0 ) { // Orig is blank.  This is really an added row.				$r .= $this->_added( array($final_line), false );			} elseif ( $final_rows[$row] < 0 ) { // Final is blank.  This is really a deleted row.				$r .= $this->_deleted( array($orig_line), false );			} else { // A true changed row.				$r .= '<tr>' . $this->deletedLine( $orig_line ) . $this->addedLine( $final_line ) . "</tr>\n";			}		}		return $r;	}	/**	 * Takes changed blocks and matches which rows in orig turned into which rows in final.	 *	 * Returns	 *	*_matches ( which rows match with which )	 *	*_rows ( order of rows in each column interleaved with blank rows as	 *		necessary )	 *	 * @since 2.6.0	 *	 * @param unknown_type $orig	 * @param unknown_type $final	 * @return unknown	 */	function interleave_changed_lines( $orig, $final ) {		// Contains all pairwise string comparisons.  Keys are such that this need only be a one dimensional array.		$matches = array();		foreach ( array_keys($orig) as $o ) {			foreach ( array_keys($final) as $f ) {				$matches["$o,$f"] = $this->compute_string_distance( $orig[$o], $final[$f] );			}		}		asort($matches); // Order by string distance.		$orig_matches  = array();		$final_matches = array();		foreach ( $matches as $keys => $difference ) {			list($o, $f) = explode(',', $keys);			$o = (int) $o;			$f = (int) $f;			// Already have better matches for these guys			if ( isset($orig_matches[$o]) && isset($final_matches[$f]) )				continue;			// First match for these guys.  Must be best match			if ( !isset($orig_matches[$o]) && !isset($final_matches[$f]) ) {				$orig_matches[$o] = $f;				$final_matches[$f] = $o;				continue;			}			// Best match of this final is already taken?  Must mean this final is a new row.			if ( isset($orig_matches[$o]) )				$final_matches[$f] = 'x';			// Best match of this orig is already taken?  Must mean this orig is a deleted row.			elseif ( isset($final_matches[$f]) )				$orig_matches[$o] = 'x';		}		// We read the text in this order		ksort($orig_matches);		ksort($final_matches);		// Stores rows and blanks for each column.		$orig_rows = $orig_rows_copy = array_keys($orig_matches);		$final_rows = array_keys($final_matches);		// Interleaves rows with blanks to keep matches aligned.		// We may end up with some extraneous blank rows, but we'll just ignore them later.		foreach ( $orig_rows_copy as $orig_row ) {			$final_pos = array_search($orig_matches[$orig_row], $final_rows, true);			$orig_pos = (int) array_search($orig_row, $orig_rows, true);			if ( false === $final_pos ) { // This orig is paired with a blank final.				array_splice( $final_rows, $orig_pos, 0, -1 );			} elseif ( $final_pos < $orig_pos ) { // This orig's match is up a ways.  Pad final with blank rows.				$diff_pos = $final_pos - $orig_pos;				while ( $diff_pos < 0 )					array_splice( $final_rows, $orig_pos, 0, $diff_pos++ );			} elseif ( $final_pos > $orig_pos ) { // This orig's match is down a ways.  Pad orig with blank rows.				$diff_pos = $orig_pos - $final_pos;				while ( $diff_pos < 0 )					array_splice( $orig_rows, $orig_pos, 0, $diff_pos++ );			}		}		// Pad the ends with blank rows if the columns aren't the same length		$diff_count = count($orig_rows) - count($final_rows);		if ( $diff_count < 0 ) {			while ( $diff_count < 0 )				array_push($orig_rows, $diff_count++);		} elseif ( $diff_count > 0 ) {			$diff_count = -1 * $diff_count;			while ( $diff_count < 0 )				array_push($final_rows, $diff_count++);		}		return array($orig_matches, $final_matches, $orig_rows, $final_rows);/*		// Debug		echo "\n\n\n\n\n";		echo "-- DEBUG Matches: Orig -> Final --";		foreach ( $orig_matches as $o => $f ) {			echo "\n\n\n\n\n";			echo "ORIG: $o, FINAL: $f\n";			var_dump($orig[$o],$final[$f]);		}		echo "\n\n\n\n\n";		echo "-- DEBUG Matches: Final -> Orig --";		foreach ( $final_matches as $f => $o ) {			echo "\n\n\n\n\n";			echo "FINAL: $f, ORIG: $o\n";			var_dump($final[$f],$orig[$o]);		}		echo "\n\n\n\n\n";		echo "-- DEBUG Rows: Orig -- Final --";		echo "\n\n\n\n\n";		foreach ( $orig_rows as $row => $o ) {			if ( $o < 0 )				$o = 'X';			$f = $final_rows[$row];			if ( $f < 0 )				$f = 'X';			echo "$o -- $f\n";		}		echo "\n\n\n\n\n";		echo "-- END DEBUG --";		echo "\n\n\n\n\n";		return array($orig_matches, $final_matches, $orig_rows, $final_rows);*/	}	/**	 * Computes a number that is intended to reflect the "distance" between two strings.	 *	 * @since 2.6.0	 *	 * @param string $string1	 * @param string $string2	 * @return int	 */	function compute_string_distance( $string1, $string2 ) {		// Vectors containing character frequency for all chars in each string		$chars1 = count_chars($string1);		$chars2 = count_chars($string2);		// L1-norm of difference vector.		$difference = array_sum( array_map( array(&$this, 'difference'), $chars1, $chars2 ) );		// $string1 has zero length? Odd.  Give huge penalty by not dividing.		if ( !$string1 )			return $difference;		// Return distance per charcter (of string1)		return $difference / strlen($string1);	}	/**	 * @ignore	 * @since 2.6.0	 *	 * @param int $a	 * @param int $b	 * @return int	 */	function difference( $a, $b ) {		return abs( $a - $b );	}}/** * Better word splitting than the PEAR package provides. * * @since 2.6.0 * @uses Text_Diff_Renderer_inline Extends */class WP_Text_Diff_Renderer_inline extends Text_Diff_Renderer_inline {	/**	 * @ignore	 * @since 2.6.0	 *	 * @param string $string	 * @param string $newlineEscape	 * @return string	 */	function _splitOnWords($string, $newlineEscape = "\n") {		$string = str_replace("\0", '', $string);		$words  = preg_split( '/([^\w])/u', $string, -1, PREG_SPLIT_DELIM_CAPTURE );		$words  = str_replace( "\n", $newlineEscape, $words );		return $words;	}}?>
<?phpfunction mce_put_file( $path, $content ) {	if ( function_exists('file_put_contents') )		return @file_put_contents( $path, $content );	$newfile = false;	$fp = @fopen( $path, 'wb' );	if ($fp) {		$newfile = fwrite( $fp, $content );		fclose($fp);	}	return $newfile;}// escape text only if it needs translatingfunction mce_escape($text) {	global $language;	if ( 'en' == $language ) return $text;	else return esc_js($text);}$lang = 'tinyMCE.addI18n({' . $language . ':{common:{edit_confirm:"' . mce_escape( __('Do you want to use the WYSIWYG mode for this textarea?') ) . '",apply:"' . mce_escape( __('Apply') ) . '",insert:"' . mce_escape( __('Insert') ) . '",update:"' . mce_escape( __('Update') ) . '",cancel:"' . mce_escape( __('Cancel') ) . '",close:"' . mce_escape( __('Close') ) . '",browse:"' . mce_escape( __('Browse') ) . '",class_name:"' . mce_escape( __('Class') ) . '",not_set:"' . mce_escape( __('-- Not set --') ) . '",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",clipboard_no_support:"' . mce_escape( __('Currently not supported by your browser, use keyboard shortcuts instead.') ) . '",popup_blocked:"' . mce_escape( __('Sorry, but we have noticed that your popup-blocker has disabled a window that provides application functionality. You will need to disable popup blocking on this site in order to fully utilize this tool.') ) . '",invalid_data:"' . mce_escape( __('Error: Invalid values entered, these are marked in red.') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '"},contextmenu:{align:"' . mce_escape( /* translators: alignment */ __('Alignment') ) . '",left:"' . mce_escape( /* translators: alignment */ __('Left') ) . '",center:"' . mce_escape( /* translators: alignment */ __('Center') ) . '",right:"' . mce_escape( /* translators: alignment */ __('Right') ) . '",full:"' . mce_escape( /* translators: alignment */ __('Full') ) . '"},insertdatetime:{date_fmt:"' . mce_escape( /* translators: year, month, date */ __('%Y-%m-%d') ) . '",time_fmt:"' . mce_escape( /* translators: hours, minutes, seconds */ __('%H:%M:%S') ) . '",insertdate_desc:"' . mce_escape( __('Insert date') ) . '",inserttime_desc:"' . mce_escape( __('Insert time') ) . '",months_long:"' . mce_escape( __('January').','.__('February').','.__('March').','.__('April').','.__('May').','.__('June').','.__('July').','.__('August').','.__('September').','.__('October').','.__('November').','.__('December') ) . '",months_short:"' . mce_escape( __('Jan_January_abbreviation').','.__('Feb_February_abbreviation').','.__('Mar_March_abbreviation').','.__('Apr_April_abbreviation').','.__('May_May_abbreviation').','.__('Jun_June_abbreviation').','.__('Jul_July_abbreviation').','.__('Aug_August_abbreviation').','.__('Sep_September_abbreviation').','.__('Oct_October_abbreviation').','.__('Nov_November_abbreviation').','.__('Dec_December_abbreviation') ) . '",day_long:"' . mce_escape( __('Sunday').','.__('Monday').','.__('Tuesday').','.__('Wednesday').','.__('Thursday').','.__('Friday').','.__('Saturday') ) . '",day_short:"' . mce_escape( __('Sun').','.__('Mon').','.__('Tue').','.__('Wed').','.__('Thu').','.__('Fri').','.__('Sat') ) . '"},print:{print_desc:"' . mce_escape( __('Print') ) . '"},preview:{preview_desc:"' . mce_escape( __('Preview') ) . '"},directionality:{ltr_desc:"' . mce_escape( __('Direction left to right') ) . '",rtl_desc:"' . mce_escape( __('Direction right to left') ) . '"},layer:{insertlayer_desc:"' . mce_escape( __('Insert new layer') ) . '",forward_desc:"' . mce_escape( __('Move forward') ) . '",backward_desc:"' . mce_escape( __('Move backward') ) . '",absolute_desc:"' . mce_escape( __('Toggle absolute positioning') ) . '",content:"' . mce_escape( __('New layer...') ) . '"},save:{save_desc:"' . mce_escape( __('Save') ) . '",cancel_desc:"' . mce_escape( __('Cancel all changes') ) . '"},nonbreaking:{nonbreaking_desc:"' . mce_escape( __('Insert non-breaking space character') ) . '"},iespell:{iespell_desc:"' . mce_escape( __('Run spell checking') ) . '",download:"' . mce_escape( __('ieSpell not detected. Do you want to install it now?') ) . '"},advhr:{advhr_desc:"' . mce_escape( __('Horizontale rule') ) . '"},emotions:{emotions_desc:"' . mce_escape( __('Emotions') ) . '"},searchreplace:{search_desc:"' . mce_escape( __('Find') ) . '",replace_desc:"' . mce_escape( __('Find/Replace') ) . '"},advimage:{image_desc:"' . mce_escape( __('Insert/edit image') ) . '"},advlink:{link_desc:"' . mce_escape( __('Insert/edit link') ) . '"},xhtmlxtras:{cite_desc:"' . mce_escape( __('Citation') ) . '",abbr_desc:"' . mce_escape( __('Abbreviation') ) . '",acronym_desc:"' . mce_escape( __('Acronym') ) . '",del_desc:"' . mce_escape( __('Deletion') ) . '",ins_desc:"' . mce_escape( __('Insertion') ) . '",attribs_desc:"' . mce_escape( __('Insert/Edit Attributes') ) . '"},style:{desc:"' . mce_escape( __('Edit CSS Style') ) . '"},paste:{paste_text_desc:"' . mce_escape( __('Paste as Plain Text') ) . '",paste_word_desc:"' . mce_escape( __('Paste from Word') ) . '",selectall_desc:"' . mce_escape( __('Select All') ) . '"},paste_dlg:{text_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '",text_linebreaks:"' . mce_escape( __('Keep linebreaks') ) . '",word_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '"},table:{desc:"' . mce_escape( __('Inserts a new table') ) . '",row_before_desc:"' . mce_escape( __('Insert row before') ) . '",row_after_desc:"' . mce_escape( __('Insert row after') ) . '",delete_row_desc:"' . mce_escape( __('Delete row') ) . '",col_before_desc:"' . mce_escape( __('Insert column before') ) . '",col_after_desc:"' . mce_escape( __('Insert column after') ) . '",delete_col_desc:"' . mce_escape( __('Remove column') ) . '",split_cells_desc:"' . mce_escape( __('Split merged table cells') ) . '",merge_cells_desc:"' . mce_escape( __('Merge table cells') ) . '",row_desc:"' . mce_escape( __('Table row properties') ) . '",cell_desc:"' . mce_escape( __('Table cell properties') ) . '",props_desc:"' . mce_escape( __('Table properties') ) . '",paste_row_before_desc:"' . mce_escape( __('Paste table row before') ) . '",paste_row_after_desc:"' . mce_escape( __('Paste table row after') ) . '",cut_row_desc:"' . mce_escape( __('Cut table row') ) . '",copy_row_desc:"' . mce_escape( __('Copy table row') ) . '",del:"' . mce_escape( __('Delete table') ) . '",row:"' . mce_escape( __('Row') ) . '",col:"' . mce_escape( __('Column') ) . '",cell:"' . mce_escape( __('Cell') ) . '"},autosave:{unload_msg:"' . mce_escape( __('The changes you made will be lost if you navigate away from this page.') ) . '"},fullscreen:{desc:"' . mce_escape( __('Toggle fullscreen mode') ) . ' (Alt+Shift+G)"},media:{desc:"' . mce_escape( __('Insert / edit embedded media') ) . '",delta_width:"' . /* translators: Extra width for the media popup in pixels */ mce_escape( _x('0', 'media popup width') ) . '",delta_height:"' . /* translators: Extra height for the media popup in pixels */ mce_escape( _x('0', 'media popup height') ) . '",edit:"' . mce_escape( __('Edit embedded media') ) . '"},fullpage:{desc:"' . mce_escape( __('Document properties') ) . '"},template:{desc:"' . mce_escape( __('Insert predefined template content') ) . '"},visualchars:{desc:"' . mce_escape( __('Visual control characters on/off.') ) . '"},spellchecker:{desc:"' . mce_escape( __('Toggle spellchecker') ) . ' (Alt+Shift+N)",menu:"' . mce_escape( __('Spellchecker settings') ) . '",ignore_word:"' . mce_escape( __('Ignore word') ) . '",ignore_words:"' . mce_escape( __('Ignore all') ) . '",langs:"' . mce_escape( __('Languages') ) . '",wait:"' . mce_escape( __('Please wait...') ) . '",sug:"' . mce_escape( __('Suggestions') ) . '",no_sug:"' . mce_escape( __('No suggestions') ) . '",no_mpell:"' . mce_escape( __('No misspellings found.') ) . '"},pagebreak:{desc:"' . mce_escape( __('Insert Page Break') ) . '"}}});tinyMCE.addI18n("' . $language . '.advanced",{style_select:"' . mce_escape( /* translators: TinyMCE font styles */ _x('Styles', 'TinyMCE font styles') ) . '",font_size:"' . mce_escape( __('Font size') ) . '",fontdefault:"' . mce_escape( __('Font family') ) . '",block:"' . mce_escape( __('Format') ) . '",paragraph:"' . mce_escape( __('Paragraph') ) . '",div:"' . mce_escape( __('Div') ) . '",address:"' . mce_escape( __('Address') ) . '",pre:"' . mce_escape( __('Preformatted') ) . '",h1:"' . mce_escape( __('Heading 1') ) . '",h2:"' . mce_escape( __('Heading 2') ) . '",h3:"' . mce_escape( __('Heading 3') ) . '",h4:"' . mce_escape( __('Heading 4') ) . '",h5:"' . mce_escape( __('Heading 5') ) . '",h6:"' . mce_escape( __('Heading 6') ) . '",blockquote:"' . mce_escape( __('Blockquote') ) . '",code:"' . mce_escape( __('Code') ) . '",samp:"' . mce_escape( __('Code sample') ) . '",dt:"' . mce_escape( __('Definition term ') ) . '",dd:"' . mce_escape( __('Definition description') ) . '",bold_desc:"' . mce_escape( __('Bold') ) . ' (Ctrl / Alt+Shift + B)",italic_desc:"' . mce_escape( __('Italic') ) . ' (Ctrl / Alt+Shift + I)",underline_desc:"' . mce_escape( __('Underline') ) . '",striketrough_desc:"' . mce_escape( __('Strikethrough') ) . ' (Alt+Shift+D)",justifyleft_desc:"' . mce_escape( __('Align Left') ) . ' (Alt+Shift+L)",justifycenter_desc:"' . mce_escape( __('Align Center') ) . ' (Alt+Shift+C)",justifyright_desc:"' . mce_escape( __('Align Right') ) . ' (Alt+Shift+R)",justifyfull_desc:"' . mce_escape( __('Align Full') ) . ' (Alt+Shift+J)",bullist_desc:"' . mce_escape( __('Unordered list') ) . ' (Alt+Shift+U)",numlist_desc:"' . mce_escape( __('Ordered list') ) . ' (Alt+Shift+O)",outdent_desc:"' . mce_escape( __('Outdent') ) . '",indent_desc:"' . mce_escape( __('Indent') ) . '",undo_desc:"' . mce_escape( __('Undo') ) . ' (Ctrl+Z)",redo_desc:"' . mce_escape( __('Redo') ) . ' (Ctrl+Y)",link_desc:"' . mce_escape( __('Insert/edit link') ) . ' (Alt+Shift+A)",link_delta_width:"' . /* translators: Extra width for the link popup in pixels */ mce_escape( _x('0', 'link popup width') ) . '",link_delta_height:"' . /* translators: Extra height for the link popup in pixels */ mce_escape( _x('0', 'link popup height') ) . '",unlink_desc:"' . mce_escape( __('Unlink') ) . ' (Alt+Shift+S)",image_desc:"' . mce_escape( __('Insert/edit image') ) . ' (Alt+Shift+M)",image_delta_width:"' . /* translators: Extra width for the image popup in pixels */ mce_escape( _x('0', 'image popup width') ) . '",image_delta_height:"' . /* translators: Extra height for the image popup in pixels */ mce_escape( _x('0', 'image popup height') ) . '",cleanup_desc:"' . mce_escape( __('Cleanup messy code') ) . '",code_desc:"' . mce_escape( __('Edit HTML Source') ) . '",sub_desc:"' . mce_escape( __('Subscript') ) . '",sup_desc:"' . mce_escape( __('Superscript') ) . '",hr_desc:"' . mce_escape( __('Insert horizontal ruler') ) . '",removeformat_desc:"' . mce_escape( __('Remove formatting') ) . '",forecolor_desc:"' . mce_escape( __('Select text color') ) . '",backcolor_desc:"' . mce_escape( __('Select background color') ) . '",charmap_desc:"' . mce_escape( __('Insert custom character') ) . '",visualaid_desc:"' . mce_escape( __('Toggle guidelines/invisible elements') ) . '",anchor_desc:"' . mce_escape( __('Insert/edit anchor') ) . '",cut_desc:"' . mce_escape( __('Cut') ) . '",copy_desc:"' . mce_escape( __('Copy') ) . '",paste_desc:"' . mce_escape( __('Paste') ) . '",image_props_desc:"' . mce_escape( __('Image properties') ) . '",newdocument_desc:"' . mce_escape( __('New document') ) . '",help_desc:"' . mce_escape( __('Help') ) . '",blockquote_desc:"' . mce_escape( __('Blockquote') ) . ' (Alt+Shift+Q)",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",path:"' . mce_escape( __('Path') ) . '",newdocument:"' . mce_escape( __('Are you sure you want to clear all contents?') ) . '",toolbar_focus:"' . mce_escape( __('Jump to tool buttons - Alt+Q, Jump to editor - Alt-Z, Jump to element path - Alt-X') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '",colorpicker_delta_width:"' . /* translators: Extra width for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup width') ) . '",colorpicker_delta_height:"' . /* translators: Extra height for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup height') ) . '"});tinyMCE.addI18n("' . $language . '.advanced_dlg",{about_title:"' . mce_escape( __('About TinyMCE') ) . '",about_general:"' . mce_escape( __('About') ) . '",about_help:"' . mce_escape( __('Help') ) . '",about_license:"' . mce_escape( __('License') ) . '",about_plugins:"' . mce_escape( __('Plugins') ) . '",about_plugin:"' . mce_escape( __('Plugin') ) . '",about_author:"' . mce_escape( __('Author') ) . '",about_version:"' . mce_escape( __('Version') ) . '",about_loaded:"' . mce_escape( __('Loaded plugins') ) . '",anchor_title:"' . mce_escape( __('Insert/edit anchor') ) . '",anchor_name:"' . mce_escape( __('Anchor name') ) . '",code_title:"' . mce_escape( __('HTML Source Editor') ) . '",code_wordwrap:"' . mce_escape( __('Word wrap') ) . '",colorpicker_title:"' . mce_escape( __('Select a color') ) . '",colorpicker_picker_tab:"' . mce_escape( __('Picker') ) . '",colorpicker_picker_title:"' . mce_escape( __('Color picker') ) . '",colorpicker_palette_tab:"' . mce_escape( __('Palette') ) . '",colorpicker_palette_title:"' . mce_escape( __('Palette colors') ) . '",colorpicker_named_tab:"' . mce_escape( __('Named') ) . '",colorpicker_named_title:"' . mce_escape( __('Named colors') ) . '",colorpicker_color:"' . mce_escape( __('Color:') ) . '",colorpicker_name:"' . mce_escape( __('Name:') ) . '",charmap_title:"' . mce_escape( __('Select custom character') ) . '",image_title:"' . mce_escape( __('Insert/edit image') ) . '",image_src:"' . mce_escape( __('Image URL') ) . '",image_alt:"' . mce_escape( __('Image description') ) . '",image_list:"' . mce_escape( __('Image list') ) . '",image_border:"' . mce_escape( __('Border') ) . '",image_dimensions:"' . mce_escape( __('Dimensions') ) . '",image_vspace:"' . mce_escape( __('Vertical space') ) . '",image_hspace:"' . mce_escape( __('Horizontal space') ) . '",image_align:"' . mce_escape( __('Alignment') ) . '",image_align_baseline:"' . mce_escape( __('Baseline') ) . '",image_align_top:"' . mce_escape( __('Top') ) . '",image_align_middle:"' . mce_escape( __('Middle') ) . '",image_align_bottom:"' . mce_escape( __('Bottom') ) . '",image_align_texttop:"' . mce_escape( __('Text top') ) . '",image_align_textbottom:"' . mce_escape( __('Text bottom') ) . '",image_align_left:"' . mce_escape( __('Left') ) . '",image_align_right:"' . mce_escape( __('Right') ) . '",link_title:"' . mce_escape( __('Insert/edit link') ) . '",link_url:"' . mce_escape( __('Link URL') ) . '",link_target:"' . mce_escape( __('Target') ) . '",link_target_same:"' . mce_escape( __('Open link in the same window') ) . '",link_target_blank:"' . mce_escape( __('Open link in a new window') ) . '",link_titlefield:"' . mce_escape( __('Title') ) . '",link_is_email:"' . mce_escape( __('The URL you entered seems to be an email address, do you want to add the required mailto: prefix?') ) . '",link_is_external:"' . mce_escape( __('The URL you entered seems to external link, do you want to add the required http:// prefix?') ) . '",link_list:"' . mce_escape( __('Link list') ) . '"});tinyMCE.addI18n("' . $language . '.media_dlg",{title:"' . mce_escape( __('Insert / edit embedded media') ) . '",general:"' . mce_escape( __('General') ) . '",advanced:"' . mce_escape( __('Advanced') ) . '",file:"' . mce_escape( __('File/URL') ) . '",list:"' . mce_escape( __('List') ) . '",size:"' . mce_escape( __('Dimensions') ) . '",preview:"' . mce_escape( __('Preview') ) . '",constrain_proportions:"' . mce_escape( __('Constrain proportions') ) . '",type:"' . mce_escape( __('Type') ) . '",id:"' . mce_escape( __('Id') ) . '",name:"' . mce_escape( __('Name') ) . '",class_name:"' . mce_escape( __('Class') ) . '",vspace:"' . mce_escape( __('V-Space') ) . '",hspace:"' . mce_escape( __('H-Space') ) . '",play:"' . mce_escape( __('Auto play') ) . '",loop:"' . mce_escape( __('Loop') ) . '",menu:"' . mce_escape( __('Show menu') ) . '",quality:"' . mce_escape( __('Quality') ) . '",scale:"' . mce_escape( __('Scale') ) . '",align:"' . mce_escape( __('Align') ) . '",salign:"' . mce_escape( __('SAlign') ) . '",wmode:"' . mce_escape( __('WMode') ) . '",bgcolor:"' . mce_escape( __('Background') ) . '",base:"' . mce_escape( __('Base') ) . '",flashvars:"' . mce_escape( __('Flashvars') ) . '",liveconnect:"' . mce_escape( __('SWLiveConnect') ) . '",autohref:"' . mce_escape( __('AutoHREF') ) . '",cache:"' . mce_escape( __('Cache') ) . '",hidden:"' . mce_escape( __('Hidden') ) . '",controller:"' . mce_escape( __('Controller') ) . '",kioskmode:"' . mce_escape( __('Kiosk mode') ) . '",playeveryframe:"' . mce_escape( __('Play every frame') ) . '",targetcache:"' . mce_escape( __('Target cache') ) . '",correction:"' . mce_escape( __('No correction') ) . '",enablejavascript:"' . mce_escape( __('Enable JavaScript') ) . '",starttime:"' . mce_escape( __('Start time') ) . '",endtime:"' . mce_escape( __('End time') ) . '",href:"' . mce_escape( __('href') ) . '",qtsrcchokespeed:"' . mce_escape( __('Choke speed') ) . '",target:"' . mce_escape( __('Target') ) . '",volume:"' . mce_escape( __('Volume') ) . '",autostart:"' . mce_escape( __('Auto start') ) . '",enabled:"' . mce_escape( __('Enabled') ) . '",fullscreen:"' . mce_escape( __('Fullscreen') ) . '",invokeurls:"' . mce_escape( __('Invoke URLs') ) . '",mute:"' . mce_escape( __('Mute') ) . '",stretchtofit:"' . mce_escape( __('Stretch to fit') ) . '",windowlessvideo:"' . mce_escape( __('Windowless video') ) . '",balance:"' . mce_escape( __('Balance') ) . '",baseurl:"' . mce_escape( __('Base URL') ) . '",captioningid:"' . mce_escape( __('Captioning id') ) . '",currentmarker:"' . mce_escape( __('Current marker') ) . '",currentposition:"' . mce_escape( __('Current position') ) . '",defaultframe:"' . mce_escape( __('Default frame') ) . '",playcount:"' . mce_escape( __('Play count') ) . '",rate:"' . mce_escape( __('Rate') ) . '",uimode:"' . mce_escape( __('UI Mode') ) . '",flash_options:"' . mce_escape( __('Flash options') ) . '",qt_options:"' . mce_escape( __('Quicktime options') ) . '",wmp_options:"' . mce_escape( __('Windows media player options') ) . '",rmp_options:"' . mce_escape( __('Real media player options') ) . '",shockwave_options:"' . mce_escape( __('Shockwave options') ) . '",autogotourl:"' . mce_escape( __('Auto goto URL') ) . '",center:"' . mce_escape( __('Center') ) . '",imagestatus:"' . mce_escape( __('Image status') ) . '",maintainaspect:"' . mce_escape( __('Maintain aspect') ) . '",nojava:"' . mce_escape( __('No java') ) . '",prefetch:"' . mce_escape( __('Prefetch') ) . '",shuffle:"' . mce_escape( __('Shuffle') ) . '",console:"' . mce_escape( __('Console') ) . '",numloop:"' . mce_escape( __('Num loops') ) . '",controls:"' . mce_escape( __('Controls') ) . '",scriptcallbacks:"' . mce_escape( __('Script callbacks') ) . '",swstretchstyle:"' . mce_escape( __('Stretch style') ) . '",swstretchhalign:"' . mce_escape( __('Stretch H-Align') ) . '",swstretchvalign:"' . mce_escape( __('Stretch V-Align') ) . '",sound:"' . mce_escape( __('Sound') ) . '",progress:"' . mce_escape( __('Progress') ) . '",qtsrc:"' . mce_escape( __('QT Src') ) . '",qt_stream_warn:"' . mce_escape( __('Streamed rtsp resources should be added to the QT Src field under the advanced tab.') ) . '",align_top:"' . mce_escape( __('Top') ) . '",align_right:"' . mce_escape( __('Right') ) . '",align_bottom:"' . mce_escape( __('Bottom') ) . '",align_left:"' . mce_escape( __('Left') ) . '",align_center:"' . mce_escape( __('Center') ) . '",align_top_left:"' . mce_escape( __('Top left') ) . '",align_top_right:"' . mce_escape( __('Top right') ) . '",align_bottom_left:"' . mce_escape( __('Bottom left') ) . '",align_bottom_right:"' . mce_escape( __('Bottom right') ) . '",flv_options:"' . mce_escape( __('Flash video options') ) . '",flv_scalemode:"' . mce_escape( __('Scale mode') ) . '",flv_buffer:"' . mce_escape( __('Buffer') ) . '",flv_startimage:"' . mce_escape( __('Start image') ) . '",flv_starttime:"' . mce_escape( __('Start time') ) . '",flv_defaultvolume:"' . mce_escape( __('Default volume') ) . '",flv_hiddengui:"' . mce_escape( __('Hidden GUI') ) . '",flv_autostart:"' . mce_escape( __('Auto start') ) . '",flv_loop:"' . mce_escape( __('Loop') ) . '",flv_showscalemodes:"' . mce_escape( __('Show scale modes') ) . '",flv_smoothvideo:"' . mce_escape( __('Smooth video') ) . '",flv_jscallback:"' . mce_escape( __('JS Callback') ) . '"});tinyMCE.addI18n("' . $language . '.wordpress",{wp_adv_desc:"' . mce_escape( __('Show/Hide Kitchen Sink') )  . ' (Alt+Shift+Z)",wp_more_desc:"' . mce_escape( __('Insert More Tag') ) . ' (Alt+Shift+T)",wp_page_desc:"' . mce_escape( __('Insert Page break') ) . ' (Alt+Shift+P)",wp_help_desc:"' . mce_escape( __('Help') ) . ' (Alt+Shift+H)",wp_more_alt:"' . mce_escape( __('More...') ) . '",wp_page_alt:"' . mce_escape( __('Next page...') ) . '",add_media:"' . mce_escape( __('Add Media') ) . '",add_image:"' . mce_escape( __('Add an Image') ) . '",add_video:"' . mce_escape( __('Add Video') ) . '",add_audio:"' . mce_escape( __('Add Audio') ) . '",editgallery:"' . mce_escape( __('Edit Gallery') ) . '",delgallery:"' . mce_escape( __('Delete Gallery') ) . '"});tinyMCE.addI18n("' . $language . '.wpeditimage",{edit_img:"' . mce_escape( __('Edit Image') )  . '",del_img:"' . mce_escape( __('Delete Image') )  . '",adv_settings:"' . mce_escape( __('Advanced Settings') )  . '",none:"' . mce_escape( __('None') )  . '",size:"' . mce_escape( __('Size') ) . '",thumbnail:"' . mce_escape( __('Thumbnail') ) . '",medium:"' . mce_escape( __('Medium') ) . '",full_size:"' . mce_escape( __('Full Size') ) . '",current_link:"' . mce_escape( __('Current Link') ) . '",link_to_img:"' . mce_escape( __('Link to Image') ) . '",link_help:"' . mce_escape( __('Enter a link URL or click above for presets.') ) . '",adv_img_settings:"' . mce_escape( __('Advanced Image Settings') ) . '",source:"' . mce_escape( __('Source') )  . '",width:"' . mce_escape( __('Width') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",adv_link_settings:"' . mce_escape( __('Advanced Link Settings') )  . '",link_rel:"' . mce_escape( __('Link Rel') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",s60:"' . mce_escape( __('60%') ) . '",s70:"' . mce_escape( __('70%') ) . '",s80:"' . mce_escape( __('80%') ) . '",s90:"' . mce_escape( __('90%') ) . '",s100:"' . mce_escape( __('100%') ) . '",s110:"' . mce_escape( __('110%') ) . '",s120:"' . mce_escape( __('120%') ) . '",s130:"' . mce_escape( __('130%') ) . '",img_title:"' . mce_escape( __('Edit Image Title') ) . '",caption:"' . mce_escape( __('Edit Image Caption') ) . '",alt:"' . mce_escape( __('Edit Alternate Text') ) . '"});';
<?php/** * Multisite upload handler. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite */define( 'SHORTINIT', true );require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );if( !is_multisite() )	die( 'Multisite support not enabled' );ms_file_constants();error_reporting( 0 );if ( $current_blog->archived == '1' || $current_blog->spam == '1' || $current_blog->deleted == '1' ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$file = BLOGUPLOADDIR . str_replace( '..', '', $_GET[ 'file' ] );if ( !is_file( $file ) ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$mime = wp_check_filetype( $_SERVER[ 'REQUEST_URI' ] );if( false === $mime[ 'type' ] && function_exists( 'mime_content_type' ) )	$mime[ 'type' ] = mime_content_type( $file );if( $mime[ 'type' ] )	$mimetype = $mime[ 'type' ];else	$mimetype = 'image/' . substr( $_SERVER[ 'REQUEST_URI' ], strrpos( $_SERVER[ 'REQUEST_URI' ], '.' ) + 1 );header( 'Content-type: ' . $mimetype ); // always send thisif ( false === strpos( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) )	header( 'Content-Length: ' . filesize( $file ) );// Optional support for X-Sendfile and X-Accel-Redirectif ( WPMU_ACCEL_REDIRECT ) {	header( 'X-Accel-Redirect: ' . str_replace( WP_CONTENT_DIR, '', $file ) );	exit;} elseif ( WPMU_SENDFILE ) {	header( 'X-Sendfile: ' . $file );	exit;}$last_modified = gmdate( 'D, d M Y H:i:s', filemtime( $file ) );$etag = '"' . md5( $last_modified ) . '"';header( "Last-Modified: $last_modified GMT" );header( 'ETag: ' . $etag );header( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 100000000 ) . ' GMT' );// Support for Conditional GET$client_etag = isset( $_SERVER['HTTP_IF_NONE_MATCH'] ) ? stripslashes( $_SERVER['HTTP_IF_NONE_MATCH'] ) : false;if( ! isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) )	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = false;$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );// If string is empty, return 0. If not, attempt to parse into a timestamp$client_modified_timestamp = $client_last_modified ? strtotime( $client_last_modified ) : 0;// Make a timestamp for our most recent modification...$modified_timestamp = strtotime($last_modified);if ( ( $client_last_modified && $client_etag )	? ( ( $client_modified_timestamp >= $modified_timestamp) && ( $client_etag == $etag ) )	: ( ( $client_modified_timestamp >= $modified_timestamp) || ( $client_etag == $etag ) )	) {	status_header( 304 );	exit;}// If we made it this far, just serve the filereadfile( $file );?>
<?php/** * The base configurations of the WordPress. * * This file has the following configurations: MySQL settings, Table Prefix, * Secret Keys, WordPress Language, and ABSPATH. You can find more information * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing * wp-config.php} Codex page. You can get the MySQL settings from your web host. * * This file is used by the wp-config.php creation script during the * installation. You don't have to use the web site, you can just copy this file * to "wp-config.php" and fill in the values. * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define('DB_NAME', 'database_name_here');/** MySQL database username */define('DB_USER', 'username_here');/** MySQL database password */define('DB_PASSWORD', 'password_here');/** MySQL hostname */define('DB_HOST', 'localhost');/** Database Charset to use in creating database tables. */define('DB_CHARSET', 'utf8');/** The Database Collate type. Don't change this if in doubt. */define('DB_COLLATE', '');/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define('AUTH_KEY',         'put your unique phrase here');define('SECURE_AUTH_KEY',  'put your unique phrase here');define('LOGGED_IN_KEY',    'put your unique phrase here');define('NONCE_KEY',        'put your unique phrase here');define('AUTH_SALT',        'put your unique phrase here');define('SECURE_AUTH_SALT', 'put your unique phrase here');define('LOGGED_IN_SALT',   'put your unique phrase here');define('NONCE_SALT',       'put your unique phrase here');/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each a unique * prefix. Only numbers, letters, and underscores please! */$table_prefix  = 'wp_';/** * WordPress Localized Language, defaults to English. * * Change this to localize WordPress.  A corresponding MO file for the chosen * language must be installed to wp-content/languages. For example, install * de.mo to wp-content/languages and set WPLANG to 'de' to enable German * language support. */define ('WPLANG', '');/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. */define('WP_DEBUG', false);/* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') )	define('ABSPATH', dirname(__FILE__) . '/');/** Sets up WordPress vars and included files. */require_once(ABSPATH . 'wp-settings.php');
<?phpif ( !class_exists( 'Services_JSON' ) ) :/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: *//** * Converts to and from JSON format. * * JSON (JavaScript Object Notation) is a lightweight data-interchange * format. It is easy for humans to read and write. It is easy for machines * to parse and generate. It is based on a subset of the JavaScript * Programming Language, Standard ECMA-262 3rd Edition - December 1999. * This feature can also be found in  Python. JSON is a text format that is * completely language independent but uses conventions that are familiar * to programmers of the C-family of languages, including C, C++, C#, Java, * JavaScript, Perl, TCL, and many others. These properties make JSON an * ideal data-interchange language. * * This package provides a simple encoder and decoder for JSON notation. It * is intended for use with client-side Javascript applications that make * use of HTTPRequest to perform server communication functions - data can * be encoded into JSON notation for use in a client-side javascript, or * decoded from incoming Javascript requests. JSON format is native to * Javascript, and can be directly eval()'ed with no further parsing * overhead * * All strings should be in ASCII or UTF-8 format! * * LICENSE: Redistribution and use in source and binary forms, with or * without modification, are permitted provided that the following * conditions are met: Redistributions of source code must retain the * above copyright notice, this list of conditions and the following * disclaimer. Redistributions in binary form must reproduce the above * copyright notice, this list of conditions and the following disclaimer * in the documentation and/or other materials provided with the * distribution. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * DAMAGE. * * @category * @package		Services_JSON * @author		Michal Migurski <mike-json@teczno.com> * @author		Matt Knapp <mdknapp[at]gmail[dot]com> * @author		Brett Stimmerman <brettstimmerman[at]gmail[dot]com> * @copyright	2005 Michal Migurski * @version     CVS: $Id: JSON.php 288200 2009-09-09 15:41:29Z alan_k $ * @license		http://www.opensource.org/licenses/bsd-license.php * @link		http://pear.php.net/pepr/pepr-proposal-show.php?id=198 *//** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_SLICE', 1);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_STR',  2);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_ARR',  3);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_OBJ',  4);/** * Marker constant for Services_JSON::decode(), used to flag stack state */define('SERVICES_JSON_IN_CMT', 5);/** * Behavior switch for Services_JSON::decode() */define('SERVICES_JSON_LOOSE_TYPE', 16);/** * Behavior switch for Services_JSON::decode() */define('SERVICES_JSON_SUPPRESS_ERRORS', 32);/** * Converts to and from JSON format. * * Brief example of use: * * <code> * // create a new instance of Services_JSON * $json = new Services_JSON(); * * // convert a complexe value to JSON notation, and send it to the browser * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4))); * $output = $json->encode($value); * * print($output); * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]] * * // accept incoming POST data, assumed to be in JSON notation * $input = file_get_contents('php://input', 1000000); * $value = $json->decode($input); * </code> */class Services_JSON{ /**	* constructs a new JSON instance	*	* @param int $use object behavior flags; combine with boolean-OR	*	*						possible values:	*						- SERVICES_JSON_LOOSE_TYPE:  loose typing.	*								"{...}" syntax creates associative arrays	*								instead of objects in decode().	*						- SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.	*								Values which can't be encoded (e.g. resources)	*								appear as NULL instead of throwing errors.	*								By default, a deeply-nested resource will	*								bubble up with an error, so all return values	*								from encode() should be checked with isError()	*/	function Services_JSON($use = 0)	{		$this->use = $use;	} /**	* convert a string from one UTF-16 char to one UTF-8 char	*	* Normally should be handled by mb_convert_encoding, but	* provides a slower PHP-only method for installations	* that lack the multibye string extension.	*	* @param	string  $utf16  UTF-16 character	* @return string  UTF-8 character	* @access private	*/	function utf162utf8($utf16)	{		// oh please oh please oh please oh please oh please		if(function_exists('mb_convert_encoding')) {			return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');		}		$bytes = (ord($utf16{0}) << 8) | ord($utf16{1});		switch(true) {			case ((0x7F & $bytes) == $bytes):				// this case should never be reached, because we are in ASCII range				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0x7F & $bytes);			case (0x07FF & $bytes) == $bytes:				// return a 2-byte UTF-8 character				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0xC0 | (($bytes >> 6) & 0x1F))					. chr(0x80 | ($bytes & 0x3F));			case (0xFFFF & $bytes) == $bytes:				// return a 3-byte UTF-8 character				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0xE0 | (($bytes >> 12) & 0x0F))					. chr(0x80 | (($bytes >> 6) & 0x3F))					. chr(0x80 | ($bytes & 0x3F));		}		// ignoring UTF-32 for now, sorry		return '';	} /**	* convert a string from one UTF-8 char to one UTF-16 char	*	* Normally should be handled by mb_convert_encoding, but	* provides a slower PHP-only method for installations	* that lack the multibye string extension.	*	* @param	string  $utf8 UTF-8 character	* @return string  UTF-16 character	* @access private	*/	function utf82utf16($utf8)	{		// oh please oh please oh please oh please oh please		if(function_exists('mb_convert_encoding')) {			return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8');		}		switch(strlen($utf8)) {			case 1:				// this case should never be reached, because we are in ASCII range				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return $utf8;			case 2:				// return a UTF-16 character from a 2-byte UTF-8 char				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr(0x07 & (ord($utf8{0}) >> 2))					. chr((0xC0 & (ord($utf8{0}) << 6))						| (0x3F & ord($utf8{1})));			case 3:				// return a UTF-16 character from a 3-byte UTF-8 char				// see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8				return chr((0xF0 & (ord($utf8{0}) << 4))						| (0x0F & (ord($utf8{1}) >> 2)))					. chr((0xC0 & (ord($utf8{1}) << 6))						| (0x7F & ord($utf8{2})));		}		// ignoring UTF-32 for now, sorry		return '';	} /**	* encodes an arbitrary variable into JSON format (and sends JSON Header)	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function encode($var)	{		header('Content-type: application/json');		return $this->_encode($var);	}	/**	* encodes an arbitrary variable into JSON format without JSON Header - warning - may allow CSS!!!!)	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function encodeUnsafe($var)	{		return $this->_encode($var);	}	/**	* PRIVATE CODE that does the work of encodes an arbitrary variable into JSON format	*	* @param	mixed $var	any number, boolean, string, array, or object to be encoded.	*						see argument 1 to Services_JSON() above for array-parsing behavior.	*						if var is a strng, note that encode() always expects it	*						to be in ASCII or UTF-8 format!	*	* @return mixed JSON string representation of input var or an error if a problem occurs	* @access public	*/	function _encode($var)	{		switch (gettype($var)) {			case 'boolean':				return $var ? 'true' : 'false';			case 'NULL':				return 'null';			case 'integer':				return (int) $var;			case 'double':			case 'float':				return (float) $var;			case 'string':				// STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT				$ascii = '';				$strlen_var = strlen($var);			/*				* Iterate over every character in the string,				* escaping with a slash or encoding to UTF-8 where necessary				*/				for ($c = 0; $c < $strlen_var; ++$c) {					$ord_var_c = ord($var{$c});					switch (true) {						case $ord_var_c == 0x08:							$ascii .= '\b';							break;						case $ord_var_c == 0x09:							$ascii .= '\t';							break;						case $ord_var_c == 0x0A:							$ascii .= '\n';							break;						case $ord_var_c == 0x0C:							$ascii .= '\f';							break;						case $ord_var_c == 0x0D:							$ascii .= '\r';							break;						case $ord_var_c == 0x22:						case $ord_var_c == 0x2F:						case $ord_var_c == 0x5C:							// double quote, slash, slosh							$ascii .= '\\'.$var{$c};							break;						case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):							// characters U-00000000 - U-0000007F (same as ASCII)							$ascii .= $var{$c};							break;						case (($ord_var_c & 0xE0) == 0xC0):							// characters U-00000080 - U-000007FF, mask 110XXXXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							if ($c+1 >= $strlen_var) {								$c += 1;								$ascii .= '?';								break;							}							$char = pack('C*', $ord_var_c, ord($var{$c + 1}));							$c += 1;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xF0) == 0xE0):							if ($c+2 >= $strlen_var) {								$c += 2;								$ascii .= '?';								break;							}							// characters U-00000800 - U-0000FFFF, mask 1110XXXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										@ord($var{$c + 1}),										@ord($var{$c + 2}));							$c += 2;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xF8) == 0xF0):							if ($c+3 >= $strlen_var) {								$c += 3;								$ascii .= '?';								break;							}							// characters U-00010000 - U-001FFFFF, mask 11110XXX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}));							$c += 3;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xFC) == 0xF8):							// characters U-00200000 - U-03FFFFFF, mask 111110XX							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							if ($c+4 >= $strlen_var) {								$c += 4;								$ascii .= '?';								break;							}							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}),										ord($var{$c + 4}));							$c += 4;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;						case (($ord_var_c & 0xFE) == 0xFC):						if ($c+5 >= $strlen_var) {								$c += 5;								$ascii .= '?';								break;							}							// characters U-04000000 - U-7FFFFFFF, mask 1111110X							// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8							$char = pack('C*', $ord_var_c,										ord($var{$c + 1}),										ord($var{$c + 2}),										ord($var{$c + 3}),										ord($var{$c + 4}),										ord($var{$c + 5}));							$c += 5;							$utf16 = $this->utf82utf16($char);							$ascii .= sprintf('\u%04s', bin2hex($utf16));							break;					}				}				return  '"'.$ascii.'"';			case 'array':			/*				* As per JSON spec if any array key is not an integer				* we must treat the the whole array as an object. We				* also try to catch a sparsely populated associative				* array with numeric keys here because some JS engines				* will create an array with empty indexes up to				* max_index which can cause memory issues and because				* the keys, which may be relevant, will be remapped				* otherwise.				*				* As per the ECMA and JSON specification an object may				* have any string as a property. Unfortunately due to				* a hole in the ECMA specification if the key is a				* ECMA reserved word or starts with a digit the				* parameter is only accessible using ECMAScript's				* bracket notation.				*/				// treat as a JSON object				if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {					$properties = array_map(array($this, 'name_value'),											array_keys($var),											array_values($var));					foreach($properties as $property) {						if(Services_JSON::isError($property)) {							return $property;						}					}					return '{' . join(',', $properties) . '}';				}				// treat it like a regular array				$elements = array_map(array($this, '_encode'), $var);				foreach($elements as $element) {					if(Services_JSON::isError($element)) {						return $element;					}				}				return '[' . join(',', $elements) . ']';			case 'object':				$vars = get_object_vars($var);				$properties = array_map(array($this, 'name_value'),										array_keys($vars),										array_values($vars));				foreach($properties as $property) {					if(Services_JSON::isError($property)) {						return $property;					}				}				return '{' . join(',', $properties) . '}';			default:				return ($this->use & SERVICES_JSON_SUPPRESS_ERRORS)					? 'null'					: new Services_JSON_Error(gettype($var)." can not be encoded as JSON string");		}	} /**	* array-walking function for use in generating JSON-formatted name-value pairs	*	* @param	string  $name name of key to use	* @param	mixed $value  reference to an array element to be encoded	*	* @return string  JSON-formatted name-value pair, like '"name":value'	* @access private	*/	function name_value($name, $value)	{		$encoded_value = $this->_encode($value);		if(Services_JSON::isError($encoded_value)) {			return $encoded_value;		}		return $this->_encode(strval($name)) . ':' . $encoded_value;	} /**	* reduce a string by removing leading and trailing comments and whitespace	*	* @param	$str	string	string value to strip of comments and whitespace	*	* @return string  string value stripped of comments and whitespace	* @access private	*/	function reduce_string($str)	{		$str = preg_replace(array(				// eliminate single line comments in '// ...' form				'#^\s*//(.+)$#m',				// eliminate multi-line comments in '/* ... */' form, at start of string				'#^\s*/\*(.+)\*/#Us',				// eliminate multi-line comments in '/* ... */' form, at end of string				'#/\*(.+)\*/\s*$#Us'			), '', $str);		// eliminate extraneous space		return trim($str);	} /**	* decodes a JSON string into appropriate variable	*	* @param	string  $str	JSON-formatted string	*	* @return mixed number, boolean, string, array, or object	*				corresponding to given JSON input string.	*				See argument 1 to Services_JSON() above for object-output behavior.	*				Note that decode() always returns strings	*				in ASCII or UTF-8 format!	* @access public	*/	function decode($str)	{		$str = $this->reduce_string($str);		switch (strtolower($str)) {			case 'true':				return true;			case 'false':				return false;			case 'null':				return null;			default:				$m = array();				if (is_numeric($str)) {					// Lookie-loo, it's a number					// This would work on its own, but I'm trying to be					// good about returning integers where appropriate:					// return (float)$str;					// Return float or int, as appropriate					return ((float)$str == (integer)$str)						? (integer)$str						: (float)$str;				} elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) && $m[1] == $m[2]) {					// STRINGS RETURNED IN UTF-8 FORMAT					$delim = substr($str, 0, 1);					$chrs = substr($str, 1, -1);					$utf8 = '';					$strlen_chrs = strlen($chrs);					for ($c = 0; $c < $strlen_chrs; ++$c) {						$substr_chrs_c_2 = substr($chrs, $c, 2);						$ord_chrs_c = ord($chrs{$c});						switch (true) {							case $substr_chrs_c_2 == '\b':								$utf8 .= chr(0x08);								++$c;								break;							case $substr_chrs_c_2 == '\t':								$utf8 .= chr(0x09);								++$c;								break;							case $substr_chrs_c_2 == '\n':								$utf8 .= chr(0x0A);								++$c;								break;							case $substr_chrs_c_2 == '\f':								$utf8 .= chr(0x0C);								++$c;								break;							case $substr_chrs_c_2 == '\r':								$utf8 .= chr(0x0D);								++$c;								break;							case $substr_chrs_c_2 == '\\"':							case $substr_chrs_c_2 == '\\\'':							case $substr_chrs_c_2 == '\\\\':							case $substr_chrs_c_2 == '\\/':								if (($delim == '"' && $substr_chrs_c_2 != '\\\'') ||								($delim == "'" && $substr_chrs_c_2 != '\\"')) {									$utf8 .= $chrs{++$c};								}								break;							case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)):								// single, escaped unicode character								$utf16 = chr(hexdec(substr($chrs, ($c + 2), 2)))									. chr(hexdec(substr($chrs, ($c + 4), 2)));								$utf8 .= $this->utf162utf8($utf16);								$c += 5;								break;							case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F):								$utf8 .= $chrs{$c};								break;							case ($ord_chrs_c & 0xE0) == 0xC0:								// characters U-00000080 - U-000007FF, mask 110XXXXX								//see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 2);								++$c;								break;							case ($ord_chrs_c & 0xF0) == 0xE0:								// characters U-00000800 - U-0000FFFF, mask 1110XXXX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 3);								$c += 2;								break;							case ($ord_chrs_c & 0xF8) == 0xF0:								// characters U-00010000 - U-001FFFFF, mask 11110XXX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 4);								$c += 3;								break;							case ($ord_chrs_c & 0xFC) == 0xF8:								// characters U-00200000 - U-03FFFFFF, mask 111110XX								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 5);								$c += 4;								break;							case ($ord_chrs_c & 0xFE) == 0xFC:								// characters U-04000000 - U-7FFFFFFF, mask 1111110X								// see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8								$utf8 .= substr($chrs, $c, 6);								$c += 5;								break;						}					}					return $utf8;				} elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) {					// array, or object notation					if ($str{0} == '[') {						$stk = array(SERVICES_JSON_IN_ARR);						$arr = array();					} else {						if ($this->use & SERVICES_JSON_LOOSE_TYPE) {							$stk = array(SERVICES_JSON_IN_OBJ);							$obj = array();						} else {							$stk = array(SERVICES_JSON_IN_OBJ);							$obj = new stdClass();						}					}					array_push($stk, array('what'  => SERVICES_JSON_SLICE,										'where' => 0,										'delim' => false));					$chrs = substr($str, 1, -1);					$chrs = $this->reduce_string($chrs);					if ($chrs == '') {						if (reset($stk) == SERVICES_JSON_IN_ARR) {							return $arr;						} else {							return $obj;						}					}					//print("\nparsing {$chrs}\n");					$strlen_chrs = strlen($chrs);					for ($c = 0; $c <= $strlen_chrs; ++$c) {						$top = end($stk);						$substr_chrs_c_2 = substr($chrs, $c, 2);						if (($c == $strlen_chrs) || (($chrs{$c} == ',') && ($top['what'] == SERVICES_JSON_SLICE))) {							// found a comma that is not inside a string, array, etc.,							// OR we've reached the end of the character list							$slice = substr($chrs, $top['where'], ($c - $top['where']));							array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => ($c + 1), 'delim' => false));							//print("Found split at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");							if (reset($stk) == SERVICES_JSON_IN_ARR) {								// we are in an array, so just push an element onto the stack								array_push($arr, $this->decode($slice));							} elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {								// we are in an object, so figure								// out the property name and set an								// element in an associative array,								// for now								$parts = array();								if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {									// "name":value pair									$key = $this->decode($parts[1]);									$val = $this->decode($parts[2]);									if ($this->use & SERVICES_JSON_LOOSE_TYPE) {										$obj[$key] = $val;									} else {										$obj->$key = $val;									}								} elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {									// name:value pair, where name is unquoted									$key = $parts[1];									$val = $this->decode($parts[2]);									if ($this->use & SERVICES_JSON_LOOSE_TYPE) {										$obj[$key] = $val;									} else {										$obj->$key = $val;									}								}							}						} elseif ((($chrs{$c} == '"') || ($chrs{$c} == "'")) && ($top['what'] != SERVICES_JSON_IN_STR)) {							// found a quote, and we are not inside a string							array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs{$c}));							//print("Found start of string at {$c}\n");						} elseif (($chrs{$c} == $top['delim']) &&								($top['what'] == SERVICES_JSON_IN_STR) &&								((strlen(substr($chrs, 0, $c)) - strlen(rtrim(substr($chrs, 0, $c), '\\'))) % 2 != 1)) {							// found a quote, we're in a string, and it's not escaped							// we know that it's not escaped becase there is _not_ an							// odd number of backslashes at the end of the string so far							array_pop($stk);							//print("Found end of string at {$c}: ".substr($chrs, $top['where'], (1 + 1 + $c - $top['where']))."\n");						} elseif (($chrs{$c} == '[') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a left-bracket, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false));							//print("Found start of array at {$c}\n");						} elseif (($chrs{$c} == ']') && ($top['what'] == SERVICES_JSON_IN_ARR)) {							// found a right-bracket, and we're in an array							array_pop($stk);							//print("Found end of array at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						} elseif (($chrs{$c} == '{') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a left-brace, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false));							//print("Found start of object at {$c}\n");						} elseif (($chrs{$c} == '}') && ($top['what'] == SERVICES_JSON_IN_OBJ)) {							// found a right-brace, and we're in an object							array_pop($stk);							//print("Found end of object at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						} elseif (($substr_chrs_c_2 == '/*') &&								in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {							// found a comment start, and we are in an array, object, or slice							array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false));							$c++;							//print("Found start of comment at {$c}\n");						} elseif (($substr_chrs_c_2 == '*/') && ($top['what'] == SERVICES_JSON_IN_CMT)) {							// found a comment end, and we're in one now							array_pop($stk);							$c++;							for ($i = $top['where']; $i <= $c; ++$i)								$chrs = substr_replace($chrs, ' ', $i, 1);							//print("Found end of comment at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");						}					}					if (reset($stk) == SERVICES_JSON_IN_ARR) {						return $arr;					} elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {						return $obj;					}				}		}	}	/**	* @todo Ultimately, this should just call PEAR::isError()	*/	function isError($data, $code = null)	{		if (class_exists('pear')) {			return PEAR::isError($data, $code);		} elseif (is_object($data) && (get_class($data) == 'services_json_error' ||								is_subclass_of($data, 'services_json_error'))) {			return true;		}		return false;	}}if (class_exists('PEAR_Error')) {	class Services_JSON_Error extends PEAR_Error	{		function Services_JSON_Error($message = 'unknown error', $code = null,									$mode = null, $options = null, $userinfo = null)		{			parent::PEAR_Error($message, $code, $mode, $options, $userinfo);		}	}} else {	/**	* @todo Ultimately, this class shall be descended from PEAR_Error	*/	class Services_JSON_Error	{		function Services_JSON_Error($message = 'unknown error', $code = null,									$mode = null, $options = null, $userinfo = null)		{		}	}}endif;?>
<?php/** * Redirects to the Atom feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'atom_url' ), 301 );?>
<?php/** * WordPress CRON API * * @package WordPress *//** * Schedules a hook to run only once. * * Schedules a hook which will be executed once by the WordPress actions core at * a time which you specify. The action will fire off when someone visits your * WordPress site, if the schedule time has passed. * * @since 2.1.0 * @link http://codex.wordpress.org/Function_Reference/wp_schedule_single_event * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. */function wp_schedule_single_event( $timestamp, $hook, $args = array()) {	// don't schedule a duplicate if there's already an identical event due in the next 10 minutes	$next = wp_next_scheduled($hook, $args);	if ( $next && $next <= $timestamp + 600 )		return;	$crons = _get_cron_array();	$key = md5(serialize($args));	$crons[$timestamp][$hook][$key] = array( 'schedule' => false, 'args' => $args );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Schedule a periodic event. * * Schedules a hook which will be executed by the WordPress actions core on a * specific interval, specified by you. The action will trigger when someone * visits your WordPress site, if the scheduled time has passed. * * Valid values for the recurrence are hourly, daily and twicedaily.  These can * be extended using the cron_schedules filter in wp_get_schedules(). * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure, null when complete with scheduling event. */function wp_schedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	if ( !isset( $schedules[$recurrence] ) )		return false;	$crons[$timestamp][$hook][$key] = array( 'schedule' => $recurrence, 'args' => $args, 'interval' => $schedules[$recurrence]['interval'] );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Reschedule a recurring event. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure. Null when event is rescheduled. */function wp_reschedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	$interval = 0;	// First we try to get it from the schedule	if ( 0 == $interval )		$interval = $schedules[$recurrence]['interval'];	// Now we try to get it from the saved interval in case the schedule disappears	if ( 0 == $interval )		$interval = $crons[$timestamp][$hook][$key]['interval'];	// Now we assume something is wrong and fail to schedule	if ( 0 == $interval )		return false;	$now = time();    if ( $timestamp >= $now )        $timestamp = $now + $interval;    else        $timestamp = $now + ($interval - (($now - $timestamp) % $interval));	wp_schedule_event( $timestamp, $recurrence, $hook, $args );}/** * Unschedule a previously scheduled cron job. * * The $timestamp and $hook parameters are required, so that the event can be * identified. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Arguments to pass to the hook's callback function. * Although not passed to a callback function, these arguments are used * to uniquely identify the scheduled event, so they should be the same * as those used when originally scheduling the event. */function wp_unschedule_event( $timestamp, $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	unset( $crons[$timestamp][$hook][$key] );	if ( empty($crons[$timestamp][$hook]) )		unset( $crons[$timestamp][$hook] );	if ( empty($crons[$timestamp]) )		unset( $crons[$timestamp] );	_set_cron_array( $crons );}/** * Unschedule all cron jobs attached to a specific hook. * * @since 2.1.0 * * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Optional. Arguments that were to be pass to the hook's callback function. */function wp_clear_scheduled_hook( $hook, $args = array() ) {	// Backward compatibility	// Previously this function took the arguments as discrete vars rather than an array like the rest of the API	if ( !is_array($args) ) {		_deprecated_argument( __FUNCTION__, '3.0.0', __('This argument has changed to an array to match the behavior of the other cron functions.') );		$args = array_slice( func_get_args(), 1 );	}	while ( $timestamp = wp_next_scheduled( $hook, $args ) )		wp_unschedule_event( $timestamp, $hook, $args );}/** * Retrieve the next timestamp for a cron event. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|int The UNIX timestamp of the next time the scheduled event will occur. */function wp_next_scheduled( $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $timestamp;	}	return false;}/** * Send request to run cron through HTTP request that doesn't halt page loading. * * @since 2.1.0 * * @return null Cron could not be spawned, because it is not needed to run. */function spawn_cron( $local_time = 0 ) {	if ( !$local_time )		$local_time = time();	if ( defined('DOING_CRON') || isset($_GET['doing_wp_cron']) )		return;	/*	 * do not even start the cron if local server timer has drifted	 * such as due to power failure, or misconfiguration	 */	$timer_accurate = check_server_timer( $local_time );	if ( !$timer_accurate )		return;	/*	* multiple processes on multiple web servers can run this code concurrently	* try to make this as atomic as possible by setting doing_cron switch	*/	$flag = get_transient('doing_cron');	if ( $flag > $local_time + 10*60 )		$flag = 0;	// don't run if another process is currently running it or more than once every 60 sec.	if ( $flag + 60 > $local_time )		return;	//sanity check	$crons = _get_cron_array();	if ( !is_array($crons) )		return;	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	if ( defined('ALTERNATE_WP_CRON') && ALTERNATE_WP_CRON ) {		if ( !empty($_POST) || defined('DOING_AJAX') )			return;		set_transient( 'doing_cron', $local_time );		ob_start();		wp_redirect( add_query_arg('doing_wp_cron', '', stripslashes($_SERVER['REQUEST_URI'])) );		echo ' ';		// flush any buffers and send the headers		while ( @ob_end_flush() );		flush();		WP_DEBUG ? include_once( ABSPATH . 'wp-cron.php' ) : @include_once( ABSPATH . 'wp-cron.php' );		return;	}	set_transient( 'doing_cron', $local_time );	$cron_url = get_option( 'siteurl' ) . '/wp-cron.php?doing_wp_cron';	wp_remote_post( $cron_url, array('timeout' => 0.01, 'blocking' => false, 'sslverify' => apply_filters('https_local_ssl_verify', true)) );}/** * Run scheduled callbacks or spawn cron for all scheduled events. * * @since 2.1.0 * * @return null When doesn't need to run Cron. */function wp_cron() {	// Prevent infinite loops caused by lack of wp-cron.php	if ( strpos($_SERVER['REQUEST_URI'], '/wp-cron.php') !== false || ( defined('DISABLE_WP_CRON') && DISABLE_WP_CRON ) )		return;	if ( false === $crons = _get_cron_array() )		return;	$local_time = time();	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	$schedules = wp_get_schedules();	foreach ( $crons as $timestamp => $cronhooks ) {		if ( $timestamp > $local_time ) break;		foreach ( (array) $cronhooks as $hook => $args ) {			if ( isset($schedules[$hook]['callback']) && !call_user_func( $schedules[$hook]['callback'] ) )				continue;			spawn_cron( $local_time );			break 2;		}	}}/** * Retrieve supported and filtered Cron recurrences. * * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by * hooking into the 'cron_schedules' filter. The filter accepts an array of * arrays. The outer array has a key that is the name of the schedule or for * example 'weekly'. The value is an array with two keys, one is 'interval' and * the other is 'display'. * * The 'interval' is a number in seconds of when the cron job should run. So for * 'hourly', the time is 3600 or 60*60. For weekly, the value would be * 60*60*24*7 or 604800. The value of 'interval' would then be 604800. * * The 'display' is the description. For the 'weekly' key, the 'display' would * be <code>__('Once Weekly')</code>. * * For your plugin, you will be passed an array. you can easily add your * schedule by doing the following. * <code> * // filter parameter variable name is 'array' *	$array['weekly'] = array( *		'interval' => 604800, *		'display' => __('Once Weekly') *	); * </code> * * @since 2.1.0 * * @return array */function wp_get_schedules() {	$schedules = array(		'hourly' => array( 'interval' => 3600, 'display' => __('Once Hourly') ),		'twicedaily' => array( 'interval' => 43200, 'display' => __('Twice Daily') ),		'daily' => array( 'interval' => 86400, 'display' => __('Once Daily') ),	);	return array_merge( apply_filters( 'cron_schedules', array() ), $schedules );}/** * Retrieve Cron schedule for hook with arguments. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return string|bool False, if no schedule. Schedule on success. */function wp_get_schedule($hook, $args = array()) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $cron[$hook][$key]['schedule'];	}	return false;}//// Private functions///** * Retrieve cron info array option. * * @since 2.1.0 * @access private * * @return array CRON info array. */function _get_cron_array()  {	$cron = get_option('cron');	if ( ! is_array($cron) )		return false;	if ( !isset($cron['version']) )		$cron = _upgrade_cron_array($cron);	unset($cron['version']);	return $cron;}/** * Updates the CRON option with the new CRON array. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. */function _set_cron_array($cron) {	$cron['version'] = 2;	update_option( 'cron', $cron );}/** * Upgrade a Cron info array. * * This function upgrades the Cron info array to version 2. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. * @return array An upgraded Cron info array. */function _upgrade_cron_array($cron) {	if ( isset($cron['version']) && 2 == $cron['version'])		return $cron;	$new_cron = array();	foreach ( (array) $cron as $timestamp => $hooks) {		foreach ( (array) $hooks as $hook => $args ) {			$key = md5(serialize($args['args']));			$new_cron[$timestamp][$hook][$key] = $args;		}	}	$new_cron['version'] = 2;	update_option( 'cron', $new_cron );	return $new_cron;}// stub for checking server timer accuracy, using outside standard time sourcesfunction check_server_timer( $local_time ) {	return true;}
<?php/* Continent and city translations for timezone selection. * This file is not included anywhere. It exists solely for use by xgettext. */__('Africa', 'continents-cities');__('Abidjan', 'continents-cities');__('Accra', 'continents-cities');__('Addis Ababa', 'continents-cities');__('Algiers', 'continents-cities');__('Asmara', 'continents-cities');__('Asmera', 'continents-cities');__('Bamako', 'continents-cities');__('Bangui', 'continents-cities');__('Banjul', 'continents-cities');__('Bissau', 'continents-cities');__('Blantyre', 'continents-cities');__('Brazzaville', 'continents-cities');__('Bujumbura', 'continents-cities');__('Cairo', 'continents-cities');__('Casablanca', 'continents-cities');__('Ceuta', 'continents-cities');__('Conakry', 'continents-cities');__('Dakar', 'continents-cities');__('Dar es Salaam', 'continents-cities');__('Djibouti', 'continents-cities');__('Douala', 'continents-cities');__('El Aaiun', 'continents-cities');__('Freetown', 'continents-cities');__('Gaborone', 'continents-cities');__('Harare', 'continents-cities');__('Johannesburg', 'continents-cities');__('Kampala', 'continents-cities');__('Khartoum', 'continents-cities');__('Kigali', 'continents-cities');__('Kinshasa', 'continents-cities');__('Lagos', 'continents-cities');__('Libreville', 'continents-cities');__('Lome', 'continents-cities');__('Luanda', 'continents-cities');__('Lubumbashi', 'continents-cities');__('Lusaka', 'continents-cities');__('Malabo', 'continents-cities');__('Maputo', 'continents-cities');__('Maseru', 'continents-cities');__('Mbabane', 'continents-cities');__('Mogadishu', 'continents-cities');__('Monrovia', 'continents-cities');__('Nairobi', 'continents-cities');__('Ndjamena', 'continents-cities');__('Niamey', 'continents-cities');__('Nouakchott', 'continents-cities');__('Ouagadougou', 'continents-cities');__('Porto-Novo', 'continents-cities');__('Sao Tome', 'continents-cities');__('Timbuktu', 'continents-cities');__('Tripoli', 'continents-cities');__('Tunis', 'continents-cities');__('Windhoek', 'continents-cities');__('America', 'continents-cities');__('Adak', 'continents-cities');__('Anchorage', 'continents-cities');__('Anguilla', 'continents-cities');__('Antigua', 'continents-cities');__('Araguaina', 'continents-cities');__('Argentina', 'continents-cities');__('Buenos Aires', 'continents-cities');__('Catamarca', 'continents-cities');__('ComodRivadavia', 'continents-cities');__('Cordoba', 'continents-cities');__('Jujuy', 'continents-cities');__('La Rioja', 'continents-cities');__('Mendoza', 'continents-cities');__('Rio Gallegos', 'continents-cities');__('San Juan', 'continents-cities');__('San Luis', 'continents-cities');__('Tucuman', 'continents-cities');__('Ushuaia', 'continents-cities');__('Aruba', 'continents-cities');__('Asuncion', 'continents-cities');__('Atikokan', 'continents-cities');__('Atka', 'continents-cities');__('Bahia', 'continents-cities');__('Barbados', 'continents-cities');__('Belem', 'continents-cities');__('Belize', 'continents-cities');__('Blanc-Sablon', 'continents-cities');__('Boa Vista', 'continents-cities');__('Bogota', 'continents-cities');__('Boise', 'continents-cities');__('Cambridge Bay', 'continents-cities');__('Campo Grande', 'continents-cities');__('Cancun', 'continents-cities');__('Caracas', 'continents-cities');__('Cayenne', 'continents-cities');__('Cayman', 'continents-cities');__('Chicago', 'continents-cities');__('Chihuahua', 'continents-cities');__('Coral Harbour', 'continents-cities');__('Costa Rica', 'continents-cities');__('Cuiaba', 'continents-cities');__('Curacao', 'continents-cities');__('Danmarkshavn', 'continents-cities');__('Dawson', 'continents-cities');__('Dawson Creek', 'continents-cities');__('Denver', 'continents-cities');__('Detroit', 'continents-cities');__('Dominica', 'continents-cities');__('Edmonton', 'continents-cities');__('Eirunepe', 'continents-cities');__('El Salvador', 'continents-cities');__('Ensenada', 'continents-cities');__('Fort Wayne', 'continents-cities');__('Fortaleza', 'continents-cities');__('Glace Bay', 'continents-cities');__('Godthab', 'continents-cities');__('Goose Bay', 'continents-cities');__('Grand Turk', 'continents-cities');__('Grenada', 'continents-cities');__('Guadeloupe', 'continents-cities');__('Guatemala', 'continents-cities');__('Guayaquil', 'continents-cities');__('Guyana', 'continents-cities');__('Halifax', 'continents-cities');__('Havana', 'continents-cities');__('Hermosillo', 'continents-cities');__('Indiana', 'continents-cities');__('Indianapolis', 'continents-cities');__('Knox', 'continents-cities');__('Marengo', 'continents-cities');__('Petersburg', 'continents-cities');__('Tell City', 'continents-cities');__('Vevay', 'continents-cities');__('Vincennes', 'continents-cities');__('Winamac', 'continents-cities');__('Inuvik', 'continents-cities');__('Iqaluit', 'continents-cities');__('Jamaica', 'continents-cities');__('Juneau', 'continents-cities');__('Kentucky', 'continents-cities');__('Louisville', 'continents-cities');__('Monticello', 'continents-cities');__('Knox IN', 'continents-cities');__('La Paz', 'continents-cities');__('Lima', 'continents-cities');__('Los Angeles', 'continents-cities');__('Maceio', 'continents-cities');__('Managua', 'continents-cities');__('Manaus', 'continents-cities');__('Marigot', 'continents-cities');__('Martinique', 'continents-cities');__('Mazatlan', 'continents-cities');__('Menominee', 'continents-cities');__('Merida', 'continents-cities');__('Mexico City', 'continents-cities');__('Miquelon', 'continents-cities');__('Moncton', 'continents-cities');__('Monterrey', 'continents-cities');__('Montevideo', 'continents-cities');__('Montreal', 'continents-cities');__('Montserrat', 'continents-cities');__('Nassau', 'continents-cities');__('New York', 'continents-cities');__('Nipigon', 'continents-cities');__('Nome', 'continents-cities');__('Noronha', 'continents-cities');__('North Dakota', 'continents-cities');__('Center', 'continents-cities');__('New Salem', 'continents-cities');__('Panama', 'continents-cities');__('Pangnirtung', 'continents-cities');__('Paramaribo', 'continents-cities');__('Phoenix', 'continents-cities');__('Port-au-Prince', 'continents-cities');__('Port of Spain', 'continents-cities');__('Porto Acre', 'continents-cities');__('Porto Velho', 'continents-cities');__('Puerto Rico', 'continents-cities');__('Rainy River', 'continents-cities');__('Rankin Inlet', 'continents-cities');__('Recife', 'continents-cities');__('Regina', 'continents-cities');__('Resolute', 'continents-cities');__('Rio Branco', 'continents-cities');__('Rosario', 'continents-cities');__('Santiago', 'continents-cities');__('Santo Domingo', 'continents-cities');__('Sao Paulo', 'continents-cities');__('Scoresbysund', 'continents-cities');__('Shiprock', 'continents-cities');__('St Barthelemy', 'continents-cities');__('St Johns', 'continents-cities');__('St Kitts', 'continents-cities');__('St Lucia', 'continents-cities');__('St Thomas', 'continents-cities');__('St Vincent', 'continents-cities');__('Swift Current', 'continents-cities');__('Tegucigalpa', 'continents-cities');__('Thule', 'continents-cities');__('Thunder Bay', 'continents-cities');__('Tijuana', 'continents-cities');__('Toronto', 'continents-cities');__('Tortola', 'continents-cities');__('Vancouver', 'continents-cities');__('Virgin', 'continents-cities');__('Whitehorse', 'continents-cities');__('Winnipeg', 'continents-cities');__('Yakutat', 'continents-cities');__('Yellowknife', 'continents-cities');__('Antarctica', 'continents-cities');__('Casey', 'continents-cities');__('Davis', 'continents-cities');__('DumontDUrville', 'continents-cities');__('Mawson', 'continents-cities');__('McMurdo', 'continents-cities');__('Palmer', 'continents-cities');__('Rothera', 'continents-cities');__('South Pole', 'continents-cities');__('Syowa', 'continents-cities');__('Vostok', 'continents-cities');__('Arctic', 'continents-cities');__('Longyearbyen', 'continents-cities');__('Asia', 'continents-cities');__('Aden', 'continents-cities');__('Almaty', 'continents-cities');__('Amman', 'continents-cities');__('Anadyr', 'continents-cities');__('Aqtau', 'continents-cities');__('Aqtobe', 'continents-cities');__('Ashgabat', 'continents-cities');__('Ashkhabad', 'continents-cities');__('Baghdad', 'continents-cities');__('Bahrain', 'continents-cities');__('Baku', 'continents-cities');__('Bangkok', 'continents-cities');__('Beirut', 'continents-cities');__('Bishkek', 'continents-cities');__('Brunei', 'continents-cities');__('Calcutta', 'continents-cities');__('Choibalsan', 'continents-cities');__('Chongqing', 'continents-cities');__('Chungking', 'continents-cities');__('Colombo', 'continents-cities');__('Dacca', 'continents-cities');__('Damascus', 'continents-cities');__('Dhaka', 'continents-cities');__('Dili', 'continents-cities');__('Dubai', 'continents-cities');__('Dushanbe', 'continents-cities');__('Gaza', 'continents-cities');__('Harbin', 'continents-cities');__('Ho Chi Minh', 'continents-cities');__('Hong Kong', 'continents-cities');__('Hovd', 'continents-cities');__('Irkutsk', 'continents-cities');__('Istanbul', 'continents-cities');__('Jakarta', 'continents-cities');__('Jayapura', 'continents-cities');__('Jerusalem', 'continents-cities');__('Kabul', 'continents-cities');__('Kamchatka', 'continents-cities');__('Karachi', 'continents-cities');__('Kashgar', 'continents-cities');__('Katmandu', 'continents-cities');__('Kolkata', 'continents-cities');__('Krasnoyarsk', 'continents-cities');__('Kuala Lumpur', 'continents-cities');__('Kuching', 'continents-cities');__('Kuwait', 'continents-cities');__('Macao', 'continents-cities');__('Macau', 'continents-cities');__('Magadan', 'continents-cities');__('Makassar', 'continents-cities');__('Manila', 'continents-cities');__('Muscat', 'continents-cities');__('Nicosia', 'continents-cities');__('Novosibirsk', 'continents-cities');__('Omsk', 'continents-cities');__('Oral', 'continents-cities');__('Phnom Penh', 'continents-cities');__('Pontianak', 'continents-cities');__('Pyongyang', 'continents-cities');__('Qatar', 'continents-cities');__('Qyzylorda', 'continents-cities');__('Rangoon', 'continents-cities');__('Riyadh', 'continents-cities');__('Saigon', 'continents-cities');__('Sakhalin', 'continents-cities');__('Samarkand', 'continents-cities');__('Seoul', 'continents-cities');__('Shanghai', 'continents-cities');__('Singapore', 'continents-cities');__('Taipei', 'continents-cities');__('Tashkent', 'continents-cities');__('Tbilisi', 'continents-cities');__('Tehran', 'continents-cities');__('Tel Aviv', 'continents-cities');__('Thimbu', 'continents-cities');__('Thimphu', 'continents-cities');__('Tokyo', 'continents-cities');__('Ujung Pandang', 'continents-cities');__('Ulaanbaatar', 'continents-cities');__('Ulan Bator', 'continents-cities');__('Urumqi', 'continents-cities');__('Vientiane', 'continents-cities');__('Vladivostok', 'continents-cities');__('Yakutsk', 'continents-cities');__('Yekaterinburg', 'continents-cities');__('Yerevan', 'continents-cities');__('Atlantic', 'continents-cities');__('Azores', 'continents-cities');__('Bermuda', 'continents-cities');__('Canary', 'continents-cities');__('Cape Verde', 'continents-cities');__('Faeroe', 'continents-cities');__('Faroe', 'continents-cities');__('Jan Mayen', 'continents-cities');__('Madeira', 'continents-cities');__('Reykjavik', 'continents-cities');__('South Georgia', 'continents-cities');__('St Helena', 'continents-cities');__('Stanley', 'continents-cities');__('Australia', 'continents-cities');__('ACT', 'continents-cities');__('Adelaide', 'continents-cities');__('Brisbane', 'continents-cities');__('Broken Hill', 'continents-cities');__('Canberra', 'continents-cities');__('Currie', 'continents-cities');__('Darwin', 'continents-cities');__('Eucla', 'continents-cities');__('Hobart', 'continents-cities');__('LHI', 'continents-cities');__('Lindeman', 'continents-cities');__('Lord Howe', 'continents-cities');__('Melbourne', 'continents-cities');__('North', 'continents-cities');__('NSW', 'continents-cities');__('Perth', 'continents-cities');__('Queensland', 'continents-cities');__('South', 'continents-cities');__('Sydney', 'continents-cities');__('Tasmania', 'continents-cities');__('Victoria', 'continents-cities');__('West', 'continents-cities');__('Yancowinna', 'continents-cities');__('Etc', 'continents-cities');__('GMT', 'continents-cities');__('GMT+0', 'continents-cities');__('GMT+1', 'continents-cities');__('GMT+10', 'continents-cities');__('GMT+11', 'continents-cities');__('GMT+12', 'continents-cities');__('GMT+2', 'continents-cities');__('GMT+3', 'continents-cities');__('GMT+4', 'continents-cities');__('GMT+5', 'continents-cities');__('GMT+6', 'continents-cities');__('GMT+7', 'continents-cities');__('GMT+8', 'continents-cities');__('GMT+9', 'continents-cities');__('GMT-0', 'continents-cities');__('GMT-1', 'continents-cities');__('GMT-10', 'continents-cities');__('GMT-11', 'continents-cities');__('GMT-12', 'continents-cities');__('GMT-13', 'continents-cities');__('GMT-14', 'continents-cities');__('GMT-2', 'continents-cities');__('GMT-3', 'continents-cities');__('GMT-4', 'continents-cities');__('GMT-5', 'continents-cities');__('GMT-6', 'continents-cities');__('GMT-7', 'continents-cities');__('GMT-8', 'continents-cities');__('GMT-9', 'continents-cities');__('GMT0', 'continents-cities');__('Greenwich', 'continents-cities');__('UCT', 'continents-cities');__('Universal', 'continents-cities');__('UTC', 'continents-cities');__('Zulu', 'continents-cities');__('Europe', 'continents-cities');__('Amsterdam', 'continents-cities');__('Andorra', 'continents-cities');__('Athens', 'continents-cities');__('Belfast', 'continents-cities');__('Belgrade', 'continents-cities');__('Berlin', 'continents-cities');__('Bratislava', 'continents-cities');__('Brussels', 'continents-cities');__('Bucharest', 'continents-cities');__('Budapest', 'continents-cities');__('Chisinau', 'continents-cities');__('Copenhagen', 'continents-cities');__('Dublin', 'continents-cities');__('Gibraltar', 'continents-cities');__('Guernsey', 'continents-cities');__('Helsinki', 'continents-cities');__('Isle of Man', 'continents-cities');__('Jersey', 'continents-cities');__('Kaliningrad', 'continents-cities');__('Kiev', 'continents-cities');__('Lisbon', 'continents-cities');__('Ljubljana', 'continents-cities');__('London', 'continents-cities');__('Luxembourg', 'continents-cities');__('Madrid', 'continents-cities');__('Malta', 'continents-cities');__('Mariehamn', 'continents-cities');__('Minsk', 'continents-cities');__('Monaco', 'continents-cities');__('Moscow', 'continents-cities');__('Oslo', 'continents-cities');__('Paris', 'continents-cities');__('Podgorica', 'continents-cities');__('Prague', 'continents-cities');__('Riga', 'continents-cities');__('Rome', 'continents-cities');__('Samara', 'continents-cities');__('San Marino', 'continents-cities');__('Sarajevo', 'continents-cities');__('Simferopol', 'continents-cities');__('Skopje', 'continents-cities');__('Sofia', 'continents-cities');__('Stockholm', 'continents-cities');__('Tallinn', 'continents-cities');__('Tirane', 'continents-cities');__('Tiraspol', 'continents-cities');__('Uzhgorod', 'continents-cities');__('Vaduz', 'continents-cities');__('Vatican', 'continents-cities');__('Vienna', 'continents-cities');__('Vilnius', 'continents-cities');__('Volgograd', 'continents-cities');__('Warsaw', 'continents-cities');__('Zagreb', 'continents-cities');__('Zaporozhye', 'continents-cities');__('Zurich', 'continents-cities');__('Indian', 'continents-cities');__('Antananarivo', 'continents-cities');__('Chagos', 'continents-cities');__('Christmas', 'continents-cities');__('Cocos', 'continents-cities');__('Comoro', 'continents-cities');__('Kerguelen', 'continents-cities');__('Mahe', 'continents-cities');__('Maldives', 'continents-cities');__('Mauritius', 'continents-cities');__('Mayotte', 'continents-cities');__('Reunion', 'continents-cities');__('Pacific', 'continents-cities');__('Apia', 'continents-cities');__('Auckland', 'continents-cities');__('Chatham', 'continents-cities');__('Easter', 'continents-cities');__('Efate', 'continents-cities');__('Enderbury', 'continents-cities');__('Fakaofo', 'continents-cities');__('Fiji', 'continents-cities');__('Funafuti', 'continents-cities');__('Galapagos', 'continents-cities');__('Gambier', 'continents-cities');__('Guadalcanal', 'continents-cities');__('Guam', 'continents-cities');__('Honolulu', 'continents-cities');__('Johnston', 'continents-cities');__('Kiritimati', 'continents-cities');__('Kosrae', 'continents-cities');__('Kwajalein', 'continents-cities');__('Majuro', 'continents-cities');__('Marquesas', 'continents-cities');__('Midway', 'continents-cities');__('Nauru', 'continents-cities');__('Niue', 'continents-cities');__('Norfolk', 'continents-cities');__('Noumea', 'continents-cities');__('Pago Pago', 'continents-cities');__('Palau', 'continents-cities');__('Pitcairn', 'continents-cities');__('Ponape', 'continents-cities');__('Port Moresby', 'continents-cities');__('Rarotonga', 'continents-cities');__('Saipan', 'continents-cities');__('Samoa', 'continents-cities');__('Tahiti', 'continents-cities');__('Tarawa', 'continents-cities');__('Tongatapu', 'continents-cities');__('Truk', 'continents-cities');__('Wake', 'continents-cities');__('Wallis', 'continents-cities');__('Yap', 'continents-cities');
<?php/** * The template for displaying Category Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Category Archives: %s', 'twentyten' ), '<span>' . single_cat_title( '', false ) . '</span>' );				?></h1>				<?php					$category_description = category_description();					if ( ! empty( $category_description ) )						echo '<div class="archive-meta">' . $category_description . '</div>';				/* Run the loop for the category page to output the posts.				 * If you want to overload this in a child theme then include a file				 * called loop-category.php and that will be used instead.				 */				get_template_part( 'loop', 'category' );				?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Gets the email message from the user's mailbox to add as * a WordPress post. Mailbox connection information must be * configured under Settings > Writing * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require(dirname(__FILE__) . '/wp-load.php');if ( ! apply_filters( 'enable_post_by_email_configuration', true ) )	wp_die( __( 'This action has been disabled by the administrator.' ) );/** Allow a plugin to do a complete takeover of Post by Email **/do_action('wp-mail.php');/** Get the POP3 class with which to access the mailbox. */require_once( ABSPATH . WPINC . '/class-pop3.php' );/** Only check at this interval for new messages. */if ( !defined('WP_MAIL_INTERVAL') )	define('WP_MAIL_INTERVAL', 300); // 5 minutes$last_checked = get_transient('mailserver_last_checked');if ( $last_checked )	wp_die(__('Slow down cowboy, no need to check for new mails so often!'));set_transient('mailserver_last_checked', true, WP_MAIL_INTERVAL);$time_difference = get_option('gmt_offset') * 3600;$phone_delim = '::';$pop3 = new POP3();if ( !$pop3->connect( get_option('mailserver_url'), get_option('mailserver_port') ) || !$pop3->user( get_option('mailserver_login') ) )	wp_die( esc_html( $pop3->ERROR ) );$count = $pop3->pass( get_option('mailserver_pass') );if( false === $count )	wp_die( esc_html( $pop3->ERROR ) );if( 0 === $count ) {	$pop3->quit();	wp_die( __('There doesn&#8217;t seem to be any new mail.') );}for ( $i = 1; $i <= $count; $i++ ) {	$message = $pop3->get($i);	$bodysignal = false;	$boundary = '';	$charset = '';	$content = '';	$content_type = '';	$content_transfer_encoding = '';	$post_author = 1;	$author_found = false;	$dmonths = array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');	foreach ($message as $line) {		// body signal		if ( strlen($line) < 3 )			$bodysignal = true;		if ( $bodysignal ) {			$content .= $line;		} else {			if ( preg_match('/Content-Type: /i', $line) ) {				$content_type = trim($line);				$content_type = substr($content_type, 14, strlen($content_type) - 14);				$content_type = explode(';', $content_type);				if ( ! empty( $content_type[1] ) ) {					$charset = explode('=', $content_type[1]);					$charset = ( ! empty( $charset[1] ) ) ? trim($charset[1]) : '';				}				$content_type = $content_type[0];			}			if ( preg_match('/Content-Transfer-Encoding: /i', $line) ) {				$content_transfer_encoding = trim($line);				$content_transfer_encoding = substr($content_transfer_encoding, 27, strlen($content_transfer_encoding) - 27);				$content_transfer_encoding = explode(';', $content_transfer_encoding);				$content_transfer_encoding = $content_transfer_encoding[0];			}			if ( ( $content_type == 'multipart/alternative' ) && ( false !== strpos($line, 'boundary="') ) && ( '' == $boundary ) ) {				$boundary = trim($line);				$boundary = explode('"', $boundary);				$boundary = $boundary[1];			}			if (preg_match('/Subject: /i', $line)) {				$subject = trim($line);				$subject = substr($subject, 9, strlen($subject) - 9);				// Captures any text in the subject before $phone_delim as the subject				if ( function_exists('iconv_mime_decode') ) {					$subject = iconv_mime_decode($subject, 2, get_option('blog_charset'));				} else {					$subject = wp_iso_descrambler($subject);				}				$subject = explode($phone_delim, $subject);				$subject = $subject[0];			}			// Set the author using the email address (From or Reply-To, the last used)			// otherwise use the site admin			if ( preg_match('/(From|Reply-To): /', $line) )  {				if ( preg_match('|[a-z0-9_.-]+@[a-z0-9_.-]+(?!.*<)|i', $line, $matches) )					$author = $matches[0];				else					$author = trim($line);				$author = sanitize_email($author);				if ( is_email($author) ) {					echo '<p>' . sprintf(__('Author is %s'), $author) . '</p>';					$userdata = get_user_by_email($author);					if ( empty($userdata) ) {						$author_found = false;					} else {						$post_author = $userdata->ID;						$author_found = true;					}				} else {					$author_found = false;				}			}			if (preg_match('/Date: /i', $line)) { // of the form '20 Mar 2002 20:32:37'				$ddate = trim($line);				$ddate = str_replace('Date: ', '', $ddate);				if (strpos($ddate, ',')) {					$ddate = trim(substr($ddate, strpos($ddate, ',') + 1, strlen($ddate)));				}				$date_arr = explode(' ', $ddate);				$date_time = explode(':', $date_arr[3]);				$ddate_H = $date_time[0];				$ddate_i = $date_time[1];				$ddate_s = $date_time[2];				$ddate_m = $date_arr[1];				$ddate_d = $date_arr[0];				$ddate_Y = $date_arr[2];				for ( $j = 0; $j < 12; $j++ ) {					if ( $ddate_m == $dmonths[$j] ) {						$ddate_m = $j+1;					}				}				$time_zn = intval($date_arr[4]) * 36;				$ddate_U = gmmktime($ddate_H, $ddate_i, $ddate_s, $ddate_m, $ddate_d, $ddate_Y);				$ddate_U = $ddate_U - $time_zn;				$post_date = gmdate('Y-m-d H:i:s', $ddate_U + $time_difference);				$post_date_gmt = gmdate('Y-m-d H:i:s', $ddate_U);			}		}	}	// Set $post_status based on $author_found and on author's publish_posts capability	if ( $author_found ) {		$user = new WP_User($post_author);		$post_status = ( $user->has_cap('publish_posts') ) ? 'publish' : 'pending';	} else {		// Author not found in DB, set status to pending.  Author already set to admin.		$post_status = 'pending';	}	$subject = trim($subject);	if ( $content_type == 'multipart/alternative' ) {		$content = explode('--'.$boundary, $content);		$content = $content[2];		// match case-insensitive content-transfer-encoding		if ( preg_match( '/Content-Transfer-Encoding: quoted-printable/i', $content, $delim) ) {			$content = explode($delim[0], $content);			$content = $content[1];		}		$content = strip_tags($content, '<img><p><br><i><b><u><em><strong><strike><font><span><div>');	}	$content = trim($content);	//Give Post-By-Email extending plugins full access to the content	//Either the raw content or the content of the last quoted-printable section	$content = apply_filters('wp_mail_original_content', $content);	if ( false !== stripos($content_transfer_encoding, "quoted-printable") ) {		$content = quoted_printable_decode($content);	}	if ( function_exists('iconv') && ! empty( $charset ) ) {		$content = iconv($charset, get_option('blog_charset'), $content);	}	// Captures any text in the body after $phone_delim as the body	$content = explode($phone_delim, $content);	$content = empty( $content[1] ) ? $content[0] : $content[1];	$content = trim($content);	$post_content = apply_filters('phone_content', $content);	$post_title = xmlrpc_getposttitle($content);	if ($post_title == '') $post_title = $subject;	$post_category = array(get_option('default_email_category'));	$post_data = compact('post_content','post_title','post_date','post_date_gmt','post_author','post_category', 'post_status');	$post_data = add_magic_quotes($post_data);	$post_ID = wp_insert_post($post_data);	if ( is_wp_error( $post_ID ) )		echo "\n" . $post_ID->get_error_message();	// We couldn't post, for whatever reason. Better move forward to the next email.	if ( empty( $post_ID ) )		continue;	do_action('publish_phone', $post_ID);	echo "\n<p>" . sprintf(__('<strong>Author:</strong> %s'), esc_html($post_author)) . '</p>';	echo "\n<p>" . sprintf(__('<strong>Posted title:</strong> %s'), esc_html($post_title)) . '</p>';	if(!$pop3->delete($i)) {		echo '<p>' . sprintf(__('Oops: %s'), esc_html($pop3->ERROR)) . '</p>';		$pop3->reset();		exit;	} else {		echo '<p>' . sprintf(__('Mission complete.  Message <strong>%s</strong> deleted.'), $i) . '</p>';	}}$pop3->quit();?>
<?php/** * Redirects to the RSS feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss_url' ), 301 );?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff) * to compute the differences between the two input arrays. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Jon Parise <jon@horde.org> * @package Text_Diff */class Text_Diff_Engine_xdiff {    /**     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        /* Convert the two input arrays into strings for xdiff processing. */        $from_string = implode("\n", $from_lines);        $to_string = implode("\n", $to_lines);        /* Diff the two strings and convert the result to an array. */        $diff = xdiff_string_diff($from_string, $to_string, count($to_lines));        $diff = explode("\n", $diff);        /* Walk through the diff one line at a time.  We build the $edits         * array of diff operations by reading the first character of the         * xdiff output (which is in the "unified diff" format).         *         * Note that we don't have enough information to detect "changed"         * lines using this approach, so we can't add Text_Diff_Op_changed         * instances to the $edits array.  The result is still perfectly         * valid, albeit a little less descriptive and efficient. */        $edits = array();        foreach ($diff as $line) {            if (!strlen($line)) {                continue;            }            switch ($line[0]) {            case ' ':                $edits[] = &new Text_Diff_Op_copy(array(substr($line, 1)));                break;            case '+':                $edits[] = &new Text_Diff_Op_add(array(substr($line, 1)));                break;            case '-':                $edits[] = &new Text_Diff_Op_delete(array(substr($line, 1)));                break;            }        }        return $edits;    }}
<?php/** * WordPress Comment Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * @uses $wpdb * * @param string $comment_author * @param string $comment_date * @return mixed Comment ID on success. */function comment_exists($comment_author, $comment_date) {	global $wpdb;	$comment_author = stripslashes($comment_author);	$comment_date = stripslashes($comment_date);	return $wpdb->get_var( $wpdb->prepare("SELECT comment_post_ID FROM $wpdb->comments			WHERE comment_author = %s AND comment_date = %s", $comment_author, $comment_date) );}/** * {@internal Missing Short Description}} * * @since unknown */function edit_comment() {	$comment_post_ID = (int) $_POST['comment_post_ID'];	if (!current_user_can( 'edit_post', $comment_post_ID ))		wp_die( __('You are not allowed to edit comments on this post, so you cannot edit this comment.' ));	$_POST['comment_author'] = $_POST['newcomment_author'];	$_POST['comment_author_email'] = $_POST['newcomment_author_email'];	$_POST['comment_author_url'] = $_POST['newcomment_author_url'];	$_POST['comment_approved'] = $_POST['comment_status'];	$_POST['comment_content'] = $_POST['content'];	$_POST['comment_ID'] = (int) $_POST['comment_ID'];	foreach ( array ('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $_POST['hidden_' . $timeunit] ) && $_POST['hidden_' . $timeunit] != $_POST[$timeunit] ) {			$_POST['edit_date'] = '1';			break;		}	}	if (!empty ( $_POST['edit_date'] ) ) {		$aa = $_POST['aa'];		$mm = $_POST['mm'];		$jj = $_POST['jj'];		$hh = $_POST['hh'];		$mn = $_POST['mn'];		$ss = $_POST['ss'];		$jj = ($jj > 31 ) ? 31 : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$_POST['comment_date'] = "$aa-$mm-$jj $hh:$mn:$ss";	}	wp_update_comment( $_POST);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_comment_to_edit( $id ) {	if ( !$comment = get_comment($id) )		return false;	$comment->comment_ID = (int) $comment->comment_ID;	$comment->comment_post_ID = (int) $comment->comment_post_ID;	$comment->comment_content = format_to_edit( $comment->comment_content );	$comment->comment_content = apply_filters( 'comment_edit_pre', $comment->comment_content);	$comment->comment_author = format_to_edit( $comment->comment_author );	$comment->comment_author_email = format_to_edit( $comment->comment_author_email );	$comment->comment_author_url = format_to_edit( $comment->comment_author_url );	$comment->comment_author_url = esc_url($comment->comment_author_url);	return $comment;}/** * Get the number of pending comments on a post or posts * * @since unknown * @uses $wpdb * * @param int|array $post_id Either a single Post ID or an array of Post IDs * @return int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs */function get_pending_comments_num( $post_id ) {	global $wpdb;	$single = false;	if ( !is_array($post_id) ) {		$post_id_array = (array) $post_id;		$single = true;	} else {		$post_id_array = $post_id;	}	$post_id_array = array_map('intval', $post_id_array);	$post_id_in = "'" . implode("', '", $post_id_array) . "'";	$pending = $wpdb->get_results( "SELECT comment_post_ID, COUNT(comment_ID) as num_comments FROM $wpdb->comments WHERE comment_post_ID IN ( $post_id_in ) AND comment_approved = '0' GROUP BY comment_post_ID", ARRAY_A );	if ( $single ) {		if ( empty($pending) )			return 0;		else			return absint($pending[0]['num_comments']);	}	$pending_keyed = array();	// Default to zero pending for all posts in request	foreach ( $post_id_array as $id )		$pending_keyed[$id] = 0;	if ( !empty($pending) )		foreach ( $pending as $pend )			$pending_keyed[$pend['comment_post_ID']] = absint($pend['num_comments']);	return $pending_keyed;}/** * Add avatars to relevant places in admin, or try to. * * @since 2.5.0 * @uses $comment * * @param string $name User name. * @return string Avatar with Admin name. */function floated_admin_avatar( $name ) {	global $comment;	$avatar = get_avatar( $comment, 32 );	return "$avatar $name";}function enqueue_comment_hotkeys_js() {	if ( 'true' == get_user_option( 'comment_shortcuts' ) )		wp_enqueue_script( 'jquery-table-hotkeys' );}if ( is_admin() && isset($pagenow) && ('edit-comments.php' == $pagenow || 'edit.php' == $pagenow) ) {	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>     <title><?php printf(__('%1$s - Comments on %2$s'), get_option('blogname'), the_title('','',false)); ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<style type="text/css" media="screen">		@import url( <?php bloginfo('stylesheet_url'); ?> );		body { margin: 3px; }	</style></head><body id="commentspopup"><h1 id="header"><a href="" title="<?php echo get_option('blogname'); ?>"><?php echo get_option('blogname'); ?></a></h1><?php/* Don't remove these lines. */add_filter('comment_text', 'popuplinks');if ( have_posts() ) :while( have_posts()) : the_post();?><h2 id="comments"><?php _e('Comments'); ?></h2><p><a href="<?php echo get_post_comments_feed_link($post->ID); ?>"><?php _e('<abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.'); ?></a></p><?php if ( pings_open() ) { ?><p><?php printf(__('The <abbr title="Universal Resource Locator">URL</abbr> to TrackBack this entry is: <em>%s</em>'), get_trackback_url()); ?></p><?php } ?><?php// this line is WordPress' motor, do not delete it.$commenter = wp_get_current_commenter();extract($commenter);$comments = get_approved_comments($id);$post = get_post($id);if ( post_password_required($post) ) {  // and it doesn't match the cookie	echo(get_the_password_form());} else { ?><?php if ($comments) { ?><ol id="commentlist"><?php foreach ($comments as $comment) { ?>	<li id="comment-<?php comment_ID() ?>">	<?php comment_text() ?>	<p><cite><?php comment_type(__('Comment'), __('Trackback'), __('Pingback')); ?> <?php printf(__('by %1$s &#8212; %2$s @ <a href="#comment-%3$s">%4$s</a>'), get_comment_author_link(), get_comment_date(), get_comment_ID(), get_comment_time()); ?></cite></p>	</li><?php } // end for each comment ?></ol><?php } else { // this is displayed if there are no comments so far ?>	<p><?php _e('No comments yet.'); ?></p><?php } ?><?php if ( comments_open() ) { ?><h2><?php _e('Leave a comment'); ?></h2><p><?php printf(__('Line and paragraph breaks automatic, e-mail address never displayed, <acronym title="Hypertext Markup Language">HTML</acronym> allowed: <code>%s</code>'), allowed_tags()); ?></p><form action="<?php echo get_option('siteurl'); ?>/wp-comments-post.php" method="post" id="commentform"><?php if ( $user_ID ) : ?>	<p><?php printf(__('Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out &raquo;</a>'), get_option('siteurl') . '/wp-admin/profile.php', $user_identity, wp_logout_url(get_permalink())); ?></p><?php else : ?>	<p>	  <input type="text" name="author" id="author" class="textarea" value="<?php echo esc_attr($comment_author); ?>" size="28" tabindex="1" />	   <label for="author"><?php _e('Name'); ?></label>	</p>	<p>	  <input type="text" name="email" id="email" value="<?php echo esc_attr($comment_author_email); ?>" size="28" tabindex="2" />	   <label for="email"><?php _e('E-mail'); ?></label>	</p>	<p>	  <input type="text" name="url" id="url" value="<?php echo esc_attr($comment_author_url); ?>" size="28" tabindex="3" />	   <label for="url"><?php _e('<abbr title="Universal Resource Locator">URL</abbr>'); ?></label>	</p><?php endif; ?>	<p>	  <label for="comment"><?php _e('Your Comment'); ?></label>	<br />	  <textarea name="comment" id="comment" cols="70" rows="4" tabindex="4"></textarea>	</p>	<p>	  <input type="hidden" name="comment_post_ID" value="<?php echo $id; ?>" />	  <input type="hidden" name="redirect_to" value="<?php echo esc_attr($_SERVER["REQUEST_URI"]); ?>" />	  <input name="submit" type="submit" tabindex="5" value="<?php _e('Say It!' ); ?>" />	</p>	<?php do_action('comment_form', $post->ID); ?></form><?php } else { // comments are closed ?><p><?php _e('Sorry, the comment form is closed at this time.'); ?></p><?php }} // end password check?><div><strong><a href="javascript:window.close()"><?php _e('Close this window.'); ?></a></strong></div><?php // if you delete this the sky will fall on your headendwhile; // have_posts()else: // have_posts()?><p><?php _e('Sorry, no posts matched your criteria.'); ?></p><?php endif; ?><!-- // this is just the end of the motor - don't touch that line either :) --><?php //} ?><p class="credit"><?php timer_stop(1); ?> <cite><?php printf(__('Powered by <a href="%s" title="Powered by WordPress, state-of-the-art semantic personal publishing platform"><strong>WordPress</strong></a>'), 'http://wordpress.org/'); ?></cite></p><?php // Seen at http://www.mijnkopthee.nl/log2/archive/2003/05/28/esc(18) ?><script type="text/javascript"><!--document.onkeypress = function esc(e) {	if(typeof(e) == "undefined") { e=event; }	if (e.keyCode == 27) { self.close(); }}// --></script></body></html>
<?php/** * Parse OPML XML files and store in globals. * * @package WordPress * @subpackage Administration */if ( ! defined('ABSPATH') )	die();global $opml, $map;// columns we wish to find are:  link_url, link_name, link_target, link_description// we need to map XML attribute names to our columns$opml_map = array('URL'         => 'link_url',	'HTMLURL'     => 'link_url',	'TEXT'        => 'link_name',	'TITLE'       => 'link_name',	'TARGET'      => 'link_target',	'DESCRIPTION' => 'link_description',	'XMLURL'      => 'link_rss');$map = $opml_map;/** * XML callback function for the start of a new XML tag. * * @since unknown * @access private * * @uses $updated_timestamp Not used inside function. * @uses $all_links Not used inside function. * @uses $map Stores names of attributes to use. * @global array $names * @global array $urls * @global array $targets * @global array $descriptions * @global array $feeds * * @param mixed $parser XML Parser resource. * @param string $tagName XML element name. * @param array $attrs XML element attributes. */function startElement($parser, $tagName, $attrs) {	global $updated_timestamp, $all_links, $map;	global $names, $urls, $targets, $descriptions, $feeds;	if ($tagName == 'OUTLINE') {		foreach (array_keys($map) as $key) {			if (isset($attrs[$key])) {				$$map[$key] = $attrs[$key];			}		}		//echo("got data: link_url = [$link_url], link_name = [$link_name], link_target = [$link_target], link_description = [$link_description]<br />\n");		// save the data away.		$names[] = $link_name;		$urls[] = $link_url;		$targets[] = $link_target;		$feeds[] = $link_rss;		$descriptions[] = $link_description;	} // end if outline}/** * XML callback function that is called at the end of a XML tag. * * @since unknown * @access private * @package WordPress * @subpackage Dummy * * @param mixed $parser XML Parser resource. * @param string $tagName XML tag name. */function endElement($parser, $tagName) {	// nothing to do.}// Create an XML parser$xml_parser = xml_parser_create();// Set the functions to handle opening and closing tagsxml_set_element_handler($xml_parser, "startElement", "endElement");if (!xml_parse($xml_parser, $opml, true)) {	echo(sprintf(__('XML error: %1$s at line %2$s'),	xml_error_string(xml_get_error_code($xml_parser)),	xml_get_current_line_number($xml_parser)));}// Free up memory used by the XML parserxml_parser_free($xml_parser);?>
<?php/** * Loads the WordPress environment and template. * * @package WordPress */if ( !isset($wp_did_header) ) {	$wp_did_header = true;	require_once( dirname(__FILE__) . '/wp-load.php' );	wp();	require_once( ABSPATH . WPINC . '/template-loader.php' );}?>
<?php/** * Deprecated pluggable functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed in a * later version. * * Deprecated warnings are also thrown if one of these functions is being defined by a plugin. * * @package WordPress * @subpackage Deprecated * @see pluggable.php *//* * Deprecated functions come here to die. */if ( !function_exists('set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * @since 2.0.1 * @see wp_set_current_user() An alias of wp_set_current_user() * @deprecated 3.0.0 * @deprecated Use wp_set_current_user() * * @param int|null $id User ID. * @param string $name Optional. The user's username * @return object returns wp_set_current_user() */function set_current_user($id, $name = '') {	_deprecated_function( __FUNCTION__, '3.0', 'wp_set_current_user()' );	return wp_set_current_user($id, $name);}endif;if ( !function_exists('wp_setcookie') ) :/** * Sets a cookie for a user who just logged in. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_set_auth_cookie() * @see wp_set_auth_cookie() * * @param string $username The user's username * @param string $password Optional. The user's password * @param bool $already_md5 Optional. Whether the password has already been through MD5 * @param string $home Optional. Will be used instead of COOKIEPATH if set * @param string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set * @param bool $remember Optional. Remember that the user is logged in */function wp_setcookie($username, $password = '', $already_md5 = false, $home = '', $siteurl = '', $remember = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_set_auth_cookie()' );	$user = get_userdatabylogin($username);	wp_set_auth_cookie($user->ID, $remember);}else :	_deprecated_function( 'wp_setcookie', '2.5', 'wp_set_auth_cookie()' );endif;if ( !function_exists('wp_clearcookie') ) :/** * Clears the authentication cookie, logging the user out. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_clear_auth_cookie() * @see wp_clear_auth_cookie() */function wp_clearcookie() {	_deprecated_function( __FUNCTION__, '2.5', 'wp_clear_auth_cookie()' );	wp_clear_auth_cookie();}else :	_deprecated_function( 'wp_clearcookie', '2.5', 'wp_clear_auth_cookie()' );endif;if ( !function_exists('wp_get_cookie_login') ):/** * Gets the user cookie login. This function is deprecated. * * This function is deprecated and should no longer be extended as it won't be * used anywhere in WordPress. Also, plugins shouldn't use it either. * * @since 2.0.3 * @deprecated 2.5 * @deprecated No alternative * * @return bool Always returns false */function wp_get_cookie_login() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}else :	_deprecated_function( 'wp_get_cookie_login', '2.5' );endif;if ( !function_exists('wp_login') ) :/** * Checks a users login information and logs them in if it checks out. This function is deprecated. * * Use the global $error to get the reason why the login failed. If the username * is blank, no error will be set, so assume blank username on that case. * * Plugins extending this function should also provide the global $error and set * what the error is, so that those checking the global for why there was a * failure can utilize it later. * * @since 1.2.2 * @deprecated Use wp_signon() * @global string $error Error when false is returned * * @param string $username User's username * @param string $password User's password * @param bool $deprecated Not used * @return bool False on login failure, true on successful check */function wp_login($username, $password, $deprecated = '') {	_deprecated_function( __FUNCTION__, '2.5', 'wp_signon()' );	global $error;	$user = wp_authenticate($username, $password);	if ( ! is_wp_error($user) )		return true;	$error = $user->get_error_message();	return false;}else :	_deprecated_function( 'wp_login', '2.5', 'wp_signon()' );endif;
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><title><?php wp_title('&laquo;', true, 'right'); ?> <?php bloginfo('name'); ?></title><link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>" type="text/css" media="screen" /><link rel="pingback" href="<?php bloginfo('pingback_url'); ?>" /><style type="text/css" media="screen"><?php// Checks to see whether it needs a sidebarif ( empty($withcomments) && !is_single() ) {?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbg-<?php bloginfo('text_direction'); ?>.jpg") repeat-y top; border: none; }<?php } else { // No sidebar ?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbgwide.jpg") repeat-y top; border: none; }<?php } ?></style><?php if ( is_singular() ) wp_enqueue_script( 'comment-reply' ); ?><?php wp_head(); ?></head><body <?php body_class(); ?>><div id="page"><div id="header" role="banner">	<div id="headerimg">		<h1><a href="<?php echo home_url(); ?>/"><?php bloginfo('name'); ?></a></h1>		<div class="description"><?php bloginfo('description'); ?></div>	</div></div><hr />
<?php/** * A simple set of functions to check our version 1.0 update service. * * @package WordPress * @since 2.3.0 *//** * Check WordPress version against the newest version. * * The WordPress version, PHP version, and Locale is sent. Checks against the * WordPress server at api.wordpress.org server. Will only check if WordPress * isn't installing. * * @package WordPress * @since 2.3.0 * @uses $wp_version Used to check against the newest WordPress version. * * @return mixed Returns null if update is unsupported. Returns false if check is too soon. */function wp_version_check() {	if ( defined('WP_INSTALLING') )		return;	global $wp_version, $wpdb, $wp_local_package;	$php_version = phpversion();	$current = get_site_transient( 'update_core' );	if ( ! is_object($current) ) {		$current = new stdClass;		$current->updates = array();		$current->version_checked = $wp_version;	}	$locale = apply_filters( 'core_version_check_locale', get_locale() );	// Update last_checked for current to prevent multiple blocking requests if request hangs	$current->last_checked = time();	set_site_transient( 'update_core', $current );	if ( method_exists( $wpdb, 'db_version' ) )		$mysql_version = preg_replace('/[^0-9.].*/', '', $wpdb->db_version());	else		$mysql_version = 'N/A';	$num_blogs = 1;	$wp_install = home_url( '/' );	$multisite_enabled = 0;	$user_count = count_users( );	if ( is_multisite( ) ) {		$num_blogs = get_blog_count( );		$wp_install = network_site_url( );		$multisite_enabled = 1;	}	$local_package = isset( $wp_local_package )? $wp_local_package : '';	$url = "http://api.wordpress.org/core/version-check/1.5/?version=$wp_version&php=$php_version&locale=$locale&mysql=$mysql_version&local_package=$local_package&blogs=$num_blogs&users={$user_count['total_users']}&multisite_enabled=$multisite_enabled";	$options = array(		'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3 ),		'user-agent' => 'WordPress/' . $wp_version . '; ' . home_url( '/' ),		'headers' => array(			'wp_install' => $wp_install,			'wp_blog' => home_url( '/' )		)	);	$response = wp_remote_get($url, $options);	if ( is_wp_error( $response ) )		return false;	if ( 200 != $response['response']['code'] )		return false;	$body = trim( $response['body'] );	$body = str_replace(array("\r\n", "\r"), "\n", $body);	$new_options = array();	foreach ( explode( "\n\n", $body ) as $entry ) {		$returns = explode("\n", $entry);		$new_option = new stdClass();		$new_option->response = esc_attr( $returns[0] );		if ( isset( $returns[1] ) )			$new_option->url = esc_url( $returns[1] );		if ( isset( $returns[2] ) )			$new_option->package = esc_url( $returns[2] );		if ( isset( $returns[3] ) )			$new_option->current = esc_attr( $returns[3] );		if ( isset( $returns[4] ) )			$new_option->locale = esc_attr( $returns[4] );		if ( isset( $returns[5] ) )			$new_option->php_version = esc_attr( $returns[5] );		if ( isset( $returns[6] ) )			$new_option->mysql_version = esc_attr( $returns[6] );		$new_options[] = $new_option;	}	$updates = new stdClass();	$updates->updates = $new_options;	$updates->last_checked = time();	$updates->version_checked = $wp_version;	set_site_transient( 'update_core',  $updates);}/** * Check plugin versions against the latest versions hosted on WordPress.org. * * The WordPress version, PHP version, and Locale is sent along with a list of * all plugins installed. Checks against the WordPress server at * api.wordpress.org. Will only check if WordPress isn't installing. * * @package WordPress * @since 2.3.0 * @uses $wp_version Used to notidy the WordPress version. * * @return mixed Returns null if update is unsupported. Returns false if check is too soon. */function wp_update_plugins() {	global $wp_version;	if ( defined('WP_INSTALLING') )		return false;	// If running blog-side, bail unless we've not checked in the last 12 hours	if ( !function_exists( 'get_plugins' ) )		require_once( ABSPATH . 'wp-admin/includes/plugin.php' );	$plugins = get_plugins();	$active  = get_option( 'active_plugins', array() );	$current = get_site_transient( 'update_plugins' );	if ( ! is_object($current) )		$current = new stdClass;	$new_option = new stdClass;	$new_option->last_checked = time();	$timeout = 'load-plugins.php' == current_filter() ? 3600 : 43200; //Check for updated every 60 minutes if hitting the themes page, Else, check every 12 hours	$time_not_changed = isset( $current->last_checked ) && $timeout > ( time() - $current->last_checked );	$plugin_changed = false;	foreach ( $plugins as $file => $p ) {		$new_option->checked[ $file ] = $p['Version'];		if ( !isset( $current->checked[ $file ] ) || strval($current->checked[ $file ]) !== strval($p['Version']) )			$plugin_changed = true;	}	if ( isset ( $current->response ) && is_array( $current->response ) ) {		foreach ( $current->response as $plugin_file => $update_details ) {			if ( ! isset($plugins[ $plugin_file ]) ) {				$plugin_changed = true;				break;			}		}	}	// Bail if we've checked in the last 12 hours and if nothing has changed	if ( $time_not_changed && !$plugin_changed )		return false;	// Update last_checked for current to prevent multiple blocking requests if request hangs	$current->last_checked = time();	set_site_transient( 'update_plugins', $current );	$to_send = (object) compact('plugins', 'active');	$options = array(		'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3),		'body' => array( 'plugins' => serialize( $to_send ) ),		'user-agent' => 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )	);	$raw_response = wp_remote_post('http://api.wordpress.org/plugins/update-check/1.0/', $options);	if ( is_wp_error( $raw_response ) )		return false;	if ( 200 != $raw_response['response']['code'] )		return false;	$response = unserialize( $raw_response['body'] );	if ( false !== $response )		$new_option->response = $response;	else		$new_option->response = array();	set_site_transient( 'update_plugins', $new_option );}/** * Check theme versions against the latest versions hosted on WordPress.org. * * A list of all themes installed in sent to WP. Checks against the * WordPress server at api.wordpress.org. Will only check if WordPress isn't * installing. * * @package WordPress * @since 2.7.0 * @uses $wp_version Used to notidy the WordPress version. * * @return mixed Returns null if update is unsupported. Returns false if check is too soon. */function wp_update_themes( ) {	global $wp_version;	if ( defined( 'WP_INSTALLING' ) )		return false;	if ( !function_exists( 'get_themes' ) )		require_once( ABSPATH . 'wp-includes/theme.php' );	$installed_themes = get_themes( );	$current_theme = get_site_transient( 'update_themes' );	if ( ! is_object($current_theme) )		$current_theme = new stdClass;	$new_option = new stdClass;	$new_option->last_checked = time( );	$timeout = 'load-themes.php' == current_filter() ? 3600 : 43200; //Check for updated every 60 minutes if hitting the themes page, Else, check every 12 hours	$time_not_changed = isset( $current_theme->last_checked ) && $timeout > ( time( ) - $current_theme->last_checked );	$themes = array();	$checked = array();	$themes['current_theme'] = (array) $current_theme;	foreach ( (array) $installed_themes as $theme_title => $theme ) {		$themes[$theme['Stylesheet']] = array();		$checked[$theme['Stylesheet']] = $theme['Version'];		foreach ( (array) $theme as $key => $value )			$themes[$theme['Stylesheet']][$key] = $value;	}	$theme_changed = false;	foreach ( $checked as $slug => $v ) {		$new_option->checked[ $slug ] = $v;		if ( !isset( $current_theme->checked[ $slug ] ) || strval($current_theme->checked[ $slug ]) !== strval($v) )			$theme_changed = true;	}	if ( isset ( $current_theme->response ) && is_array( $current_theme->response ) ) {		foreach ( $current_theme->response as $slug => $update_details ) {			if ( ! isset($checked[ $slug ]) ) {				$theme_changed = true;				break;			}		}	}	if ( $time_not_changed && !$theme_changed )		return false;	// Update last_checked for current to prevent multiple blocking requests if request hangs	$current_theme->last_checked = time();	set_site_transient( 'update_themes', $current_theme );	$current_theme->template = get_option( 'template' );	$options = array(		'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3),		'body'			=> array( 'themes' => serialize( $themes ) ),		'user-agent'	=> 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )	);	$raw_response = wp_remote_post( 'http://api.wordpress.org/themes/update-check/1.0/', $options );	if ( is_wp_error( $raw_response ) )		return false;	if ( 200 != $raw_response['response']['code'] )		return false;	$response = unserialize( $raw_response['body'] );	if ( $response ) {		$new_option->checked = $checked;		$new_option->response = $response;	}	set_site_transient( 'update_themes', $new_option );}function _maybe_update_core() {	global $wp_version;	$current = get_site_transient( 'update_core' );	if ( isset( $current->last_checked ) &&		43200 > ( time() - $current->last_checked ) &&		isset( $current->version_checked ) &&		$current->version_checked == $wp_version )		return;	wp_version_check();}/** * Check the last time plugins were run before checking plugin versions. * * This might have been backported to WordPress 2.6.1 for performance reasons. * This is used for the wp-admin to check only so often instead of every page * load. * * @since 2.7.0 * @access private */function _maybe_update_plugins() {	$current = get_site_transient( 'update_plugins' );	if ( isset( $current->last_checked ) && 43200 > ( time() - $current->last_checked ) )		return;	wp_update_plugins();}/** * Check themes versions only after a duration of time. * * This is for performance reasons to make sure that on the theme version * checker is not run on every page load. * * @since 2.7.0 * @access private */function _maybe_update_themes( ) {	$current = get_site_transient( 'update_themes' );	if ( isset( $current->last_checked ) && 43200 > ( time( ) - $current->last_checked ) )		return;	wp_update_themes();}add_action( 'admin_init', '_maybe_update_core' );add_action( 'wp_version_check', 'wp_version_check' );add_action( 'load-plugins.php', 'wp_update_plugins' );add_action( 'load-update.php', 'wp_update_plugins' );add_action( 'load-update-core.php', 'wp_update_plugins' );add_action( 'admin_init', '_maybe_update_plugins' );add_action( 'wp_update_plugins', 'wp_update_plugins' );add_action( 'load-themes.php', 'wp_update_themes' );add_action( 'load-update.php', 'wp_update_themes' );add_action( 'load-update-core.php', 'wp_update_themes' );add_action( 'admin_init', '_maybe_update_themes' );add_action( 'wp_update_themes', 'wp_update_themes' );if ( !wp_next_scheduled('wp_version_check') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'twicedaily', 'wp_version_check');if ( !wp_next_scheduled('wp_update_plugins') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'twicedaily', 'wp_update_plugins');if ( !wp_next_scheduled('wp_update_themes') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'twicedaily', 'wp_update_themes');?>
<?php/** * Default Embed Handlers * * @package WordPress * @subpackage Embeds *//** * The Google Video embed handler callback. Google Video does not support oEmbed. * * @see WP_Embed::register_handler() * @see WP_Embed::shortcode() * * @param array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}. * @param array $attr Embed attributes. * @param string $url The original URL that was matched by the regex. * @param array $rawattr The original unmodified attributes. * @return string The embed HTML. */function wp_embed_handler_googlevideo( $matches, $attr, $url, $rawattr ) {	// If the user supplied a fixed width AND height, use it	if ( !empty($rawattr['width']) && !empty($rawattr['height']) ) {		$width  = (int) $rawattr['width'];		$height = (int) $rawattr['height'];	} else {		list( $width, $height ) = wp_expand_dimensions( 425, 344, $attr['width'], $attr['height'] );	}	return apply_filters( 'embed_googlevideo', '<embed type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docid=' . esc_attr($matches[2]) . '&amp;hl=en&amp;fs=true" style="width:' . esc_attr($width) . 'px;height:' . esc_attr($height) . 'px" allowFullScreen="true" allowScriptAccess="always"></embed>', $matches, $attr, $url, $rawattr );}wp_embed_register_handler( 'googlevideo', '#http://video\.google\.([A-Za-z.]{2,5})/videoplay\?docid=([\d-]+)(.*?)#i', 'wp_embed_handler_googlevideo' );?>
<?php/** * Classes, which help reading streams of data from files. * Based on the classes from Danilo Segan <danilo@kvota.net> * * @version $Id: streams.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage streams */if ( !class_exists( 'POMO_Reader' ) ):class POMO_Reader {	var $endian = 'little';	var $_post = '';	function POMO_Reader() {		$this->is_overloaded = ((ini_get("mbstring.func_overload") & 2) != 0) && function_exists('mb_substr');		$this->_pos = 0;	}	/**	 * Sets the endianness of the file.	 *	 * @param $endian string 'big' or 'little'	 */	function setEndian($endian) {		$this->endian = $endian;	}	/**	 * Reads a 32bit Integer from the Stream	 *	 * @return mixed The integer, corresponding to the next 32 bits from	 * 	the stream of false if there are not enough bytes or on error	 */	function readint32() {		$bytes = $this->read(4);		if (4 != $this->strlen($bytes))			return false;		$endian_letter = ('big' == $this->endian)? 'N' : 'V';		$int = unpack($endian_letter, $bytes);		return array_shift($int);	}	/**	 * Reads an array of 32-bit Integers from the Stream	 *	 * @param integer count How many elements should be read	 * @return mixed Array of integers or false if there isn't	 * 	enough data or on error	 */	function readint32array($count) {		$bytes = $this->read(4 * $count);		if (4*$count != $this->strlen($bytes))			return false;		$endian_letter = ('big' == $this->endian)? 'N' : 'V';		return unpack($endian_letter.$count, $bytes);	}	function substr($string, $start, $length) {		if ($this->is_overloaded) {			return mb_substr($string, $start, $length, 'ascii');		} else {			return substr($string, $start, $length);		}	}	function strlen($string) {		if ($this->is_overloaded) {			return mb_strlen($string, 'ascii');		} else {			return strlen($string);		}	}	function str_split($string, $chunk_size) {		if (!function_exists('str_split')) {			$length = $this->strlen($string);			$out = array();			for ($i = 0; $i < $length; $i += $chunk_size)				$out[] = $this->substr($string, $i, $chunk_size);			return $out;		} else {			return str_split( $string, $chunk_size );		}	}	function pos() {		return $this->_pos;	}	function is_resource() {		return true;	}	function close() {		return true;	}}endif;if ( !class_exists( 'POMO_FileReader' ) ):class POMO_FileReader extends POMO_Reader {	function POMO_FileReader($filename) {		parent::POMO_Reader();		$this->_f = fopen($filename, 'r');	}	function read($bytes) {		return fread($this->_f, $bytes);	}	function seekto($pos) {		if ( -1 == fseek($this->_f, $pos, SEEK_SET)) {			return false;		}		$this->_pos = $pos;		return true;	}	function is_resource() {		return is_resource($this->_f);	}	function feof() {		return feof($this->_f);	}	function close() {		return fclose($this->_f);	}	function read_all() {		$all = '';		while ( !$this->feof() )			$all .= $this->read(4096);		return $all;	}}endif;if ( !class_exists( 'POMO_StringReader' ) ):/** * Provides file-like methods for manipulating a string instead * of a physical file. */class POMO_StringReader extends POMO_Reader {	var $_str = '';	function POMO_StringReader($str = '') {		parent::POMO_Reader();		$this->_str = $str;		$this->_pos = 0;	}	function read($bytes) {		$data = $this->substr($this->_str, $this->_pos, $bytes);		$this->_pos += $bytes;		if ($this->strlen($this->_str) < $this->_pos) $this->_pos = $this->strlen($this->_str);		return $data;	}	function seekto($pos) {		$this->_pos = $pos;		if ($this->strlen($this->_str) < $this->_pos) $this->_pos = $this->strlen($this->_str);		return $this->_pos;	}	function length() {		return $this->strlen($this->_str);	}	function read_all() {		return $this->substr($this->_str, $this->_pos, $this->strlen($this->_str));	}}endif;if ( !class_exists( 'POMO_CachedFileReader' ) ):/** * Reads the contents of the file in the beginning. */class POMO_CachedFileReader extends POMO_StringReader {	function POMO_CachedFileReader($filename) {		parent::POMO_StringReader();		$this->_str = file_get_contents($filename);		if (false === $this->_str)			return false;		$this->_pos = 0;	}}endif;if ( !class_exists( 'POMO_CachedIntFileReader' ) ):/** * Reads the contents of the file in the beginning. */class POMO_CachedIntFileReader extends POMO_CachedFileReader {	function POMO_CachedIntFileReader($filename) {		parent::POMO_CachedFileReader($filename);	}}endif;
<?php/** * User Registration API * * @package WordPress *//** * Checks whether the given username exists. * * @since 2.0.0 * * @param string $username Username. * @return null|int The user's ID on success, and null on failure. */function username_exists( $username ) {	if ( $user = get_userdatabylogin( $username ) ) {		return $user->ID;	} else {		return null;	}}/** * Checks whether the given email exists. * * @since 2.1.0 * @uses $wpdb * * @param string $email Email. * @return bool|int The user's ID on success, and false on failure. */function email_exists( $email ) {	if ( $user = get_user_by_email($email) )		return $user->ID;	return false;}/** * Checks whether an username is valid. * * @since 2.0.1 * @uses apply_filters() Calls 'validate_username' hook on $valid check and $username as parameters * * @param string $username Username. * @return bool Whether username given is valid */function validate_username( $username ) {	$sanitized = sanitize_user( $username, true );	$valid = ( $sanitized == $username );	return apply_filters( 'validate_username', $valid, $username );}/** * Insert an user into the database. * * Can update a current user or insert a new user based on whether the user's ID * is present. * * Can be used to update the user's info (see below), set the user's role, and * set the user's preference on whether they want the rich editor on. * * Most of the $userdata array fields have filters associated with the values. * The exceptions are 'rich_editing', 'role', 'jabber', 'aim', 'yim', * 'user_registered', and 'ID'. The filters have the prefix 'pre_user_' followed * by the field name. An example using 'description' would have the filter * called, 'pre_user_description' that can be hooked into. * * The $userdata array can contain the following fields: * 'ID' - An integer that will be used for updating an existing user. * 'user_pass' - A string that contains the plain text password for the user. * 'user_login' - A string that contains the user's username for logging in. * 'user_nicename' - A string that contains a nicer looking name for the user. *		The default is the user's username. * 'user_url' - A string containing the user's URL for the user's web site. * 'user_email' - A string containing the user's email address. * 'display_name' - A string that will be shown on the site. Defaults to user's *		username. It is likely that you will want to change this, for both *		appearance and security through obscurity (that is if you don't use and *		delete the default 'admin' user). * 'nickname' - The user's nickname, defaults to the user's username. * 'first_name' - The user's first name. * 'last_name' - The user's last name. * 'description' - A string containing content about the user. * 'rich_editing' - A string for whether to enable the rich editor. False *		if not empty. * 'user_registered' - The date the user registered. Format is 'Y-m-d H:i:s'. * 'role' - A string used to set the user's role. * 'jabber' - User's Jabber account. * 'aim' - User's AOL IM account. * 'yim' - User's Yahoo IM account. * * @since 2.0.0 * @uses $wpdb WordPress database layer. * @uses apply_filters() Calls filters for most of the $userdata fields with the prefix 'pre_user'. See note above. * @uses do_action() Calls 'profile_update' hook when updating giving the user's ID * @uses do_action() Calls 'user_register' hook when creating a new user giving the user's ID * * @param array $userdata An array of user data. * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not be created. */function wp_insert_user($userdata) {	global $wpdb;	extract($userdata, EXTR_SKIP);	// Are we updating or creating?	if ( !empty($ID) ) {		$ID = (int) $ID;		$update = true;		$old_user_data = get_userdata($ID);	} else {		$update = false;		// Hash the password		$user_pass = wp_hash_password($user_pass);	}	$user_login = sanitize_user($user_login, true);	$user_login = apply_filters('pre_user_login', $user_login);	//Remove any non-printable chars from the login string to see if we have ended up with an empty username	$user_login = trim($user_login);	if ( empty($user_login) )		return new WP_Error('empty_user_login', __('Cannot create a user with an empty login name.') );	if ( !$update && username_exists( $user_login ) )		return new WP_Error('existing_user_login', __('This username is already registered.') );	if ( empty($user_nicename) )		$user_nicename = sanitize_title( $user_login );	$user_nicename = apply_filters('pre_user_nicename', $user_nicename);	if ( empty($user_url) )		$user_url = '';	$user_url = apply_filters('pre_user_url', $user_url);	if ( empty($user_email) )		$user_email = '';	$user_email = apply_filters('pre_user_email', $user_email);	if ( !$update && ! defined( 'WP_IMPORTING' ) && email_exists($user_email) )		return new WP_Error('existing_user_email', __('This email address is already registered.') );	if ( empty($display_name) )		$display_name = $user_login;	$display_name = apply_filters('pre_user_display_name', $display_name);	if ( empty($nickname) )		$nickname = $user_login;	$nickname = apply_filters('pre_user_nickname', $nickname);	if ( empty($first_name) )		$first_name = '';	$first_name = apply_filters('pre_user_first_name', $first_name);	if ( empty($last_name) )		$last_name = '';	$last_name = apply_filters('pre_user_last_name', $last_name);	if ( empty($description) )		$description = '';	$description = apply_filters('pre_user_description', $description);	if ( empty($rich_editing) )		$rich_editing = 'true';	if ( empty($comment_shortcuts) )		$comment_shortcuts = 'false';	if ( empty($admin_color) )		$admin_color = 'fresh';	$admin_color = preg_replace('|[^a-z0-9 _.\-@]|i', '', $admin_color);	if ( empty($use_ssl) )		$use_ssl = 0;	if ( empty($user_registered) )		$user_registered = gmdate('Y-m-d H:i:s');	$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $user_nicename, $user_login));	if ( $user_nicename_check ) {		$suffix = 2;		while ($user_nicename_check) {			$alt_user_nicename = $user_nicename . "-$suffix";			$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $alt_user_nicename, $user_login));			$suffix++;		}		$user_nicename = $alt_user_nicename;	}	$data = compact( 'user_pass', 'user_email', 'user_url', 'user_nicename', 'display_name', 'user_registered' );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->users, $data, compact( 'ID' ) );		$user_id = (int) $ID;	} else {		$wpdb->insert( $wpdb->users, $data + compact( 'user_login' ) );		$user_id = (int) $wpdb->insert_id;	}	update_user_meta( $user_id, 'first_name', $first_name);	update_user_meta( $user_id, 'last_name', $last_name);	update_user_meta( $user_id, 'nickname', $nickname );	update_user_meta( $user_id, 'description', $description );	update_user_meta( $user_id, 'rich_editing', $rich_editing);	update_user_meta( $user_id, 'comment_shortcuts', $comment_shortcuts);	update_user_meta( $user_id, 'admin_color', $admin_color);	update_user_meta( $user_id, 'use_ssl', $use_ssl);	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( empty($$method) )			$$method = '';		update_user_meta( $user_id, $method, $$method );	}	if ( isset($role) ) {		$user = new WP_User($user_id);		$user->set_role($role);	} elseif ( !$update ) {		$user = new WP_User($user_id);		$user->set_role(get_option('default_role'));	}	wp_cache_delete($user_id, 'users');	wp_cache_delete($user_login, 'userlogins');	if ( $update )		do_action('profile_update', $user_id, $old_user_data);	else		do_action('user_register', $user_id);	return $user_id;}/** * Update an user in the database. * * It is possible to update a user's password by specifying the 'user_pass' * value in the $userdata parameter array. * * If $userdata does not contain an 'ID' key, then a new user will be created * and the new user's ID will be returned. * * If current user's password is being updated, then the cookies will be * cleared. * * @since 2.0.0 * @see wp_insert_user() For what fields can be set in $userdata * @uses wp_insert_user() Used to update existing user or add new one if user doesn't exist already * * @param array $userdata An array of user data. * @return int The updated user's ID. */function wp_update_user($userdata) {	$ID = (int) $userdata['ID'];	// First, get all of the original fields	$user = get_userdata($ID);	// Escape data pulled from DB.	$user = add_magic_quotes(get_object_vars($user));	// If password is changing, hash it now.	if ( ! empty($userdata['user_pass']) ) {		$plaintext_pass = $userdata['user_pass'];		$userdata['user_pass'] = wp_hash_password($userdata['user_pass']);	}	wp_cache_delete($user[ 'user_email' ], 'useremail');	// Merge old and new fields with new fields overwriting old ones.	$userdata = array_merge($user, $userdata);	$user_id = wp_insert_user($userdata);	// Update the cookies if the password changed.	$current_user = wp_get_current_user();	if ( $current_user->id == $ID ) {		if ( isset($plaintext_pass) ) {			wp_clear_auth_cookie();			wp_set_auth_cookie($ID);		}	}	return $user_id;}/** * A simpler way of inserting an user into the database. * * Creates a new user with just the username, password, and email. For a more * detail creation of a user, use wp_insert_user() to specify more infomation. * * @since 2.0.0 * @see wp_insert_user() More complete way to create a new user * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function wp_create_user($username, $password, $email = '') {	$user_login = esc_sql( $username );	$user_email = esc_sql( $email    );	$user_pass = $password;	$userdata = compact('user_login', 'user_email', 'user_pass');	return wp_insert_user($userdata);}/** * Set up the default contact methods * * @access private * @since * * @return array $user_contactmethods Array of contact methods and their labels. */function _wp_get_user_contactmethods() {	$user_contactmethods = array(		'aim' => __('AIM'),		'yim' => __('Yahoo IM'),		'jabber' => __('Jabber / Google Talk')	);	return apply_filters('user_contactmethods',$user_contactmethods);}?>
<?php/** * WordPress scripts and styles default loader. * * Most of the functionality that existed here was moved to * {@link http://backpress.automattic.com/ BackPress}. WordPress themes and * plugins will only be concerned about the filters and actions set in this * file. * * Several constants are used to manage the loading, concatenating and compression of scripts and CSS: * define('SCRIPT_DEBUG', true); loads the development (non-minified) versions of all scripts and CSS, and disables compression and concatenation, * define('CONCATENATE_SCRIPTS', false); disables compression and concatenation of scripts and CSS, * define('COMPRESS_SCRIPTS', false); disables compression of scripts, * define('COMPRESS_CSS', false); disables compression of CSS, * define('ENFORCE_GZIP', true); forces gzip for compression (default is deflate). * * The globals $concatenate_scripts, $compress_scripts and $compress_css can be set by plugins * to temporarily override the above settings. Also a compression test is run once and the result is saved * as option 'can_compress_scripts' (0/1). The test will run again if that option is deleted. * * @package WordPress *//** BackPress: WordPress Dependencies Class */require( ABSPATH . WPINC . '/class.wp-dependencies.php' );/** BackPress: WordPress Scripts Class */require( ABSPATH . WPINC . '/class.wp-scripts.php' );/** BackPress: WordPress Scripts Functions */require( ABSPATH . WPINC . '/functions.wp-scripts.php' );/** BackPress: WordPress Styles Class */require( ABSPATH . WPINC . '/class.wp-styles.php' );/** BackPress: WordPress Styles Functions */require( ABSPATH . WPINC . '/functions.wp-styles.php' );/** * Set up WordPress scripts to load by default for Administration Panels. * * Localizes a few of the scripts. * $scripts->add_data( 'script-handle', 'group', 1 ); queues the script for the footer * * @since 2.6.0 * * @param object $scripts WP_Scripts object. */function wp_default_scripts( &$scripts ) {	if ( !$guessurl = site_url() )		$guessurl = wp_guess_url();	$scripts->base_url = $guessurl;	$scripts->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$scripts->default_version = get_bloginfo( 'version' );	$scripts->default_dirs = array('/wp-admin/js/', '/wp-includes/js/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$scripts->add( 'utils', "/wp-admin/js/utils$suffix.js", false, '20090102' );	$scripts->add( 'common', "/wp-admin/js/common$suffix.js", array('jquery', 'hoverIntent', 'utils'), '20100531' );	$scripts->add_data( 'common', 'group', 1 );	$scripts->localize( 'common', 'commonL10n', array(		'warnDelete' => __("You are about to permanently delete the selected items.\n  'Cancel' to stop, 'OK' to delete."),		'l10n_print_after' => 'try{convertEntities(commonL10n);}catch(e){};'	) );	$scripts->add( 'sack', "/wp-includes/js/tw-sack$suffix.js", false, '1.6.1' );	$scripts->add_data( 'sack', 'group', 1 );	$scripts->add( 'quicktags', "/wp-includes/js/quicktags$suffix.js", false, '20090307' );	$scripts->localize( 'quicktags', 'quicktagsL10n', array(		'quickLinks' => __('(Quick Links)'),		'wordLookup' => __('Enter a word to look up:'),		'dictionaryLookup' => esc_attr(__('Dictionary lookup')),		'lookup' => esc_attr(__('lookup')),		'closeAllOpenTags' => esc_attr(__('Close all open tags')),		'closeTags' => esc_attr(__('close tags')),		'enterURL' => __('Enter the URL'),		'enterImageURL' => __('Enter the URL of the image'),		'enterImageDescription' => __('Enter a description of the image'),		'l10n_print_after' => 'try{convertEntities(quicktagsL10n);}catch(e){};'	) );	$scripts->add( 'colorpicker', "/wp-includes/js/colorpicker$suffix.js", array('prototype'), '3517m' );	$scripts->add( 'editor', "/wp-admin/js/editor$suffix.js", false, '20091124' );	$scripts->add( 'prototype', '/wp-includes/js/prototype.js', false, '1.6.1');	$scripts->add( 'wp-ajax-response', "/wp-includes/js/wp-ajax-response$suffix.js", array('jquery'), '20091119' );	$scripts->add_data( 'wp-ajax-response', 'group', 1 );	$scripts->localize( 'wp-ajax-response', 'wpAjax', array(		'noPerm' => __('You do not have permission to do that.'),		'broken' => __('An unidentified error has occurred.'),		'l10n_print_after' => 'try{convertEntities(wpAjax);}catch(e){};'	) );	$scripts->add( 'autosave', "/wp-includes/js/autosave$suffix.js", array('schedule', 'wp-ajax-response'), '20100410' );	$scripts->add_data( 'autosave', 'group', 1 );	$scripts->add( 'wp-lists', "/wp-includes/js/wp-lists$suffix.js", array('wp-ajax-response'), '20091128' );	$scripts->add_data( 'wp-lists', 'group', 1 );	$scripts->add( 'scriptaculous-root', '/wp-includes/js/scriptaculous/wp-scriptaculous.js', array('prototype'), '1.8.3');	$scripts->add( 'scriptaculous-builder', '/wp-includes/js/scriptaculous/builder.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-dragdrop', '/wp-includes/js/scriptaculous/dragdrop.js', array('scriptaculous-builder', 'scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-effects', '/wp-includes/js/scriptaculous/effects.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-slider', '/wp-includes/js/scriptaculous/slider.js', array('scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-sound', '/wp-includes/js/scriptaculous/sound.js', array( 'scriptaculous-root' ), '1.8.3' );	$scripts->add( 'scriptaculous-controls', '/wp-includes/js/scriptaculous/controls.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous', '', array('scriptaculous-dragdrop', 'scriptaculous-slider', 'scriptaculous-controls'), '1.8.3');	// not used in core, replaced by Jcrop.js	$scripts->add( 'cropper', '/wp-includes/js/crop/cropper.js', array('scriptaculous-dragdrop'), '20070118');	$scripts->add( 'jquery', '/wp-includes/js/jquery/jquery.js', false, '1.4.2');	$scripts->add( 'jquery-ui-core', '/wp-includes/js/jquery/ui.core.js', array('jquery'), '1.7.3' );	$scripts->add_data( 'jquery-ui-core', 'group', 1 );	$scripts->add( 'jquery-ui-tabs', '/wp-includes/js/jquery/ui.tabs.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-tabs', 'group', 1 );	$scripts->add( 'jquery-ui-sortable', '/wp-includes/js/jquery/ui.sortable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-sortable', 'group', 1 );	$scripts->add( 'jquery-ui-draggable', '/wp-includes/js/jquery/ui.draggable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-draggable', 'group', 1 );	$scripts->add( 'jquery-ui-droppable', '/wp-includes/js/jquery/ui.droppable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-droppable', 'group', 1 );	$scripts->add( 'jquery-ui-selectable', '/wp-includes/js/jquery/ui.selectable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-selectable', 'group', 1 );	$scripts->add( 'jquery-ui-resizable', '/wp-includes/js/jquery/ui.resizable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-resizable', 'group', 1 );	$scripts->add( 'jquery-ui-dialog', '/wp-includes/js/jquery/ui.dialog.js', array('jquery-ui-resizable', 'jquery-ui-draggable'), '1.7.3' );	$scripts->add_data( 'jquery-ui-dialog', 'group', 1 );	// deprecated, not used in core, most functionality is included in jQuery 1.3	$scripts->add( 'jquery-form', "/wp-includes/js/jquery/jquery.form$suffix.js", array('jquery'), '2.02m');	$scripts->add_data( 'jquery-form', 'group', 1 );	$scripts->add( 'jquery-color', "/wp-includes/js/jquery/jquery.color$suffix.js", array('jquery'), '2.0-4561m');	$scripts->add_data( 'jquery-color', 'group', 1 );	$scripts->add( 'suggest', "/wp-includes/js/jquery/suggest$suffix.js", array('jquery'), '1.1-20090125');	$scripts->add_data( 'suggest', 'group', 1 );	$scripts->add( 'schedule', '/wp-includes/js/jquery/jquery.schedule.js', array('jquery'), '20m');	$scripts->add_data( 'schedule', 'group', 1 );	$scripts->add( 'jquery-hotkeys', "/wp-includes/js/jquery/jquery.hotkeys$suffix.js", array('jquery'), '0.0.2m' );	$scripts->add_data( 'jquery-hotkeys', 'group', 1 );	$scripts->add( 'jquery-table-hotkeys', "/wp-includes/js/jquery/jquery.table-hotkeys$suffix.js", array('jquery', 'jquery-hotkeys'), '20090102' );	$scripts->add_data( 'jquery-table-hotkeys', 'group', 1 );	$scripts->add( 'thickbox', "/wp-includes/js/thickbox/thickbox.js", array('jquery'), '3.1-20100407');	$scripts->add_data( 'thickbox', 'group', 1 );	$scripts->localize( 'thickbox', 'thickboxL10n', array(			'next' => __('Next &gt;'),			'prev' => __('&lt; Prev'),			'image' => __('Image'),			'of' => __('of'),			'close' => __('Close'),			'noiframes' => __('This feature requires inline frames. You have iframes disabled or your browser does not support them.'),			'l10n_print_after' => 'try{convertEntities(thickboxL10n);}catch(e){};'	) );	$scripts->add( 'jcrop', "/wp-includes/js/jcrop/jquery.Jcrop$suffix.js", array('jquery'), '0.9.8');	$scripts->add( 'swfobject', "/wp-includes/js/swfobject.js", false, '2.2');	$scripts->add( 'swfupload', '/wp-includes/js/swfupload/swfupload.js', false, '2201');	$scripts->add( 'swfupload-swfobject', '/wp-includes/js/swfupload/plugins/swfupload.swfobject.js', array('swfupload', 'swfobject'), '2201');	$scripts->add( 'swfupload-queue', '/wp-includes/js/swfupload/plugins/swfupload.queue.js', array('swfupload'), '2201');	$scripts->add( 'swfupload-speed', '/wp-includes/js/swfupload/plugins/swfupload.speed.js', array('swfupload'), '2201');	if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) {		// queue all SWFUpload scripts that are used by default		$scripts->add( 'swfupload-all', false, array('swfupload', 'swfupload-swfobject', 'swfupload-queue'), '2201');	} else {		$scripts->add( 'swfupload-all', '/wp-includes/js/swfupload/swfupload-all.js', array(), '2201');	}	$scripts->add( 'swfupload-handlers', "/wp-includes/js/swfupload/handlers$suffix.js", array('swfupload-all', 'jquery'), '2201-20100523');	$max_upload_size = ( (int) ( $max_up = @ini_get('upload_max_filesize') ) < (int) ( $max_post = @ini_get('post_max_size') ) ) ? $max_up : $max_post;	if ( empty($max_upload_size) )		$max_upload_size = __('not configured');	// these error messages came from the sample swfupload js, they might need changing.	$scripts->localize( 'swfupload-handlers', 'swfuploadL10n', array(			'queue_limit_exceeded' => __('You have attempted to queue too many files.'),			'file_exceeds_size_limit' => __('This file exceeds the maximum upload size for this site.'),			'zero_byte_file' => __('This file is empty. Please try another.'),			'invalid_filetype' => __('This file type is not allowed. Please try another.'),			'default_error' => __('An error occurred in the upload. Please try again later.'),			'missing_upload_url' => __('There was a configuration error. Please contact the server administrator.'),			'upload_limit_exceeded' => __('You may only upload 1 file.'),			'http_error' => __('HTTP error.'),			'upload_failed' => __('Upload failed.'),			'io_error' => __('IO error.'),			'security_error' => __('Security error.'),			'file_cancelled' => __('File canceled.'),			'upload_stopped' => __('Upload stopped.'),			'dismiss' => __('Dismiss'),			'crunching' => __('Crunching&hellip;'),			'deleted' => __('moved to the trash.'),			'l10n_print_after' => 'try{convertEntities(swfuploadL10n);}catch(e){};',			'error_uploading' => __('&#8220;%s&#8221; has failed to upload due to an error')	) );	$scripts->add( 'comment-reply', "/wp-includes/js/comment-reply$suffix.js", false, '20090102');	$scripts->add( 'json2', "/wp-includes/js/json2$suffix.js", false, '20090817');	$scripts->add( 'imgareaselect', "/wp-includes/js/imgareaselect/jquery.imgareaselect$suffix.js", array('jquery'), '0.9.1' );	$scripts->add_data( 'imgareaselect', 'group', 1 );	if ( is_admin() ) {		$scripts->add( 'ajaxcat', "/wp-admin/js/cat$suffix.js", array( 'wp-lists' ), '20090102' );		$scripts->add_data( 'ajaxcat', 'group', 1 );		$scripts->localize( 'ajaxcat', 'catL10n', array(			'add' => esc_attr(__('Add')),			'how' => __('Separate multiple categories with commas.'),			'l10n_print_after' => 'try{convertEntities(catL10n);}catch(e){};'		) );		$scripts->add( 'admin-categories', "/wp-admin/js/categories$suffix.js", array('wp-lists'), '20091201' );		$scripts->add_data( 'admin-categories', 'group', 1 );		$scripts->add( 'admin-tags', "/wp-admin/js/tags$suffix.js", array('jquery', 'wp-ajax-response'), '20100213' );		$scripts->add_data( 'admin-tags', 'group', 1 );		$scripts->localize( 'admin-tags', 'tagsl10n', array(			'noPerm' => __('You do not have permission to do that.'),			'broken' => __('An unidentified error has occurred.'),			'l10n_print_after' => 'try{convertEntities(tagsl10n);}catch(e){};'		));		$scripts->add( 'admin-custom-fields', "/wp-admin/js/custom-fields$suffix.js", array('wp-lists'), '20090106' );		$scripts->add_data( 'admin-custom-fields', 'group', 1 );		$scripts->add( 'password-strength-meter', "/wp-admin/js/password-strength-meter$suffix.js", array('jquery'), '20100331' );		$scripts->add_data( 'password-strength-meter', 'group', 1 );		$scripts->localize( 'password-strength-meter', 'pwsL10n', array(			'empty' => __('Strength indicator'),			'short' => __('Very weak'),			'bad' => __('Weak'),			/* translators: password strength */			'good' => _x('Medium', 'password strength'),			'strong' => __('Strong'),			'mismatch' => __('Mismatch'),			'l10n_print_after' => 'try{convertEntities(pwsL10n);}catch(e){};'		) );		$scripts->add( 'user-profile', "/wp-admin/js/user-profile$suffix.js", array('jquery'), '20100301' );		$scripts->add_data( 'user-profile', 'group', 1 );		$scripts->add( 'admin-comments', "/wp-admin/js/edit-comments$suffix.js", array('wp-lists', 'jquery-ui-resizable', 'quicktags'), '20100418' );		$scripts->add_data( 'admin-comments', 'group', 1 );		$scripts->localize( 'admin-comments', 'adminCommentsL10n', array(			'hotkeys_highlight_first' => isset($_GET['hotkeys_highlight_first']),			'hotkeys_highlight_last' => isset($_GET['hotkeys_highlight_last'])		) );		$scripts->add( 'xfn', "/wp-admin/js/xfn$suffix.js", array('jquery'), '20100403' );		$scripts->add_data( 'xfn', 'group', 1 );		$scripts->add( 'postbox', "/wp-admin/js/postbox$suffix.js", array('jquery-ui-sortable'), '20091012' );		$scripts->add_data( 'postbox', 'group', 1 );		$scripts->add( 'post', "/wp-admin/js/post$suffix.js", array('suggest', 'wp-lists', 'postbox'), '20100526' );		$scripts->add_data( 'post', 'group', 1 );		$scripts->localize( 'post', 'postL10n', array(			'tagsUsed' =>  __('Tags used on this post:'),			'add' => esc_attr(__('Add')),			'addTag' => esc_attr(__('Add new tag')),			'separate' => __('Separate tags with commas'),			'ok' => __('OK'),			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'publishOn' => __('Publish on:'),			'publishOnFuture' =>  __('Schedule for:'),			'publishOnPast' => __('Published on:'),			'showcomm' => __('Show more comments'),			'endcomm' => __('No more comments found.'),			'publish' => __('Publish'),			'schedule' => __('Schedule'),			'updatePost' => __('Update Post'),			'updatePage' => __('Update Page'),			'savePending' => __('Save as Pending'),			'saveDraft' => __('Save Draft'),			'private' => __('Private'),			'public' => __('Public'),			'publicSticky' => __('Public, Sticky'),			'password' => __('Password Protected'),			'privatelyPublished' => __('Privately Published'),			'published' => __('Published'),			'l10n_print_after' => 'try{convertEntities(postL10n);}catch(e){};'		) );		$scripts->add( 'link', "/wp-admin/js/link$suffix.js", array('wp-lists', 'postbox'), '20090526' );		$scripts->add_data( 'link', 'group', 1 );		$scripts->add( 'comment', "/wp-admin/js/comment$suffix.js", array('jquery'), '20091202' );		$scripts->add_data( 'comment', 'group', 1 );		$scripts->localize( 'comment', 'commentL10n', array(			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'submittedOn' => __('Submitted on:'),			'l10n_print_after' => 'try{convertEntities(commentL10n);}catch(e){};'		) );		$scripts->add( 'admin-gallery', "/wp-admin/js/gallery$suffix.js", array( 'jquery-ui-sortable' ), '20090516' );		$scripts->add( 'media-upload', "/wp-admin/js/media-upload$suffix.js", array( 'thickbox' ), '20091023' );		$scripts->add_data( 'media-upload', 'group', 1 );		$scripts->add( 'admin-widgets', "/wp-admin/js/widgets$suffix.js", array( 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable' ), '20090824' );		$scripts->add_data( 'admin-widgets', 'group', 1 );		$scripts->add( 'word-count', "/wp-admin/js/word-count$suffix.js", array( 'jquery' ), '20090422' );		$scripts->add_data( 'word-count', 'group', 1 );		$scripts->localize( 'word-count', 'wordCountL10n', array(			'count' => __('Word count: %d'),			'l10n_print_after' => 'try{convertEntities(wordCountL10n);}catch(e){};'		));		$scripts->add( 'theme-preview', "/wp-admin/js/theme-preview$suffix.js", array( 'thickbox', 'jquery' ), '20100407' );		$scripts->add_data( 'theme-preview', 'group', 1 );		$scripts->add( 'inline-edit-post', "/wp-admin/js/inline-edit-post$suffix.js", array( 'jquery', 'suggest' ), '20091202' );		$scripts->add_data( 'inline-edit-post', 'group', 1 );		$scripts->localize( 'inline-edit-post', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'ntdeltitle' => __('Remove From Bulk Edit'),			'notitle' => __('(no title)'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'inline-edit-tax', "/wp-admin/js/inline-edit-tax$suffix.js", array( 'jquery' ), '20090623' );		$scripts->add_data( 'inline-edit-tax', 'group', 1 );		$scripts->localize( 'inline-edit-tax', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'plugin-install', "/wp-admin/js/plugin-install$suffix.js", array( 'jquery', 'thickbox' ), '20100407' );		$scripts->add_data( 'plugin-install', 'group', 1 );		$scripts->localize( 'plugin-install', 'plugininstallL10n', array(			'plugin_information' => __('Plugin Information:'),			'ays' => __('Are you sure you want to install this plugin?'),			'l10n_print_after' => 'try{convertEntities(plugininstallL10n);}catch(e){};'		) );		$scripts->add( 'farbtastic', '/wp-admin/js/farbtastic.js', array('jquery'), '1.2' );		$scripts->add( 'dashboard', "/wp-admin/js/dashboard$suffix.js", array( 'jquery', 'admin-comments', 'postbox' ), '20100523' );		$scripts->add_data( 'dashboard', 'group', 1 );		$scripts->add( 'hoverIntent', "/wp-includes/js/hoverIntent$suffix.js", array('jquery'), '20090102' );		$scripts->add_data( 'hoverIntent', 'group', 1 );		$scripts->add( 'list-revisions', "/wp-includes/js/wp-list-revisions$suffix.js", null, '20091223' );		$scripts->add( 'media', "/wp-admin/js/media$suffix.js", array( 'jquery-ui-draggable' ), '20100524' );		$scripts->add_data( 'media', 'group', 1 );		$scripts->add( 'image-edit', "/wp-admin/js/image-edit$suffix.js", array('jquery', 'json2', 'imgareaselect'), '20091111' );		$scripts->add_data( 'image-edit', 'group', 1 );		$scripts->add( 'set-post-thumbnail', "/wp-admin/js/set-post-thumbnail$suffix.js", array( 'jquery' ), '20100518' );		$scripts->add_data( 'set-post-thumbnail', 'group', 1 );		$scripts->localize( 'set-post-thumbnail', 'setPostThumbnailL10n', array(			'setThumbnail' => __( 'Use as featured image' ),			'saving' => __( 'Saving...' ),			'error' => __( 'Could not set that as the thumbnail image. Try a different attachment.' ),			'done' => __( 'Done' )		) );		// Navigation Menus		$scripts->add( 'nav-menu', "/wp-admin/js/nav-menu$suffix.js", false, '20100611' );		$scripts->localize( 'nav-menu', 'navMenuL10n', array(			'noResultsFound' => _x('No results found.', 'search results'),			'warnDeleteMenu' => __( "You are about to permanently delete this menu. \n 'Cancel' to stop, 'OK' to delete." ),			'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		) );		$scripts->add( 'custom-background', "/wp-admin/js/custom-background$suffix.js", array('farbtastic'), '20100531' );		$scripts->add_data( 'custom-background', 'group', 1 );	}}/** * Assign default styles to $styles object. * * Nothing is returned, because the $styles parameter is passed by reference. * Meaning that whatever object is passed will be updated without having to * reassign the variable that was passed back to the same value. This saves * memory. * * Adding default styles is not the only task, it also assigns the base_url * property, the default version, and text direction for the object. * * @since 2.6.0 * * @param object $styles */function wp_default_styles( &$styles ) {	// This checks to see if site_url() returns something and if it does not	// then it assigns $guess_url to wp_guess_url(). Strange format, but it works.	if ( ! $guessurl = site_url() )		$guessurl = wp_guess_url();	$styles->base_url = $guessurl;	$styles->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$styles->default_version = get_bloginfo( 'version' );	$styles->text_direction = function_exists( 'is_rtl' ) && is_rtl() ? 'rtl' : 'ltr';	$styles->default_dirs = array('/wp-admin/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$rtl_styles = array( 'wp-admin', 'global', 'colors', 'colors-fresh', 'colors-classic', 'dashboard', 'ie', 'install', 'login', 'media', 'theme-editor', 'upload', 'widgets', 'press-this', 'plugin-install', 'nav-menu', 'farbtastic' );	// Any rtl stylesheets that don't have a .dev version for ltr	$no_suffix = array( 'farbtastic' );	$styles->add( 'wp-admin', "/wp-admin/css/wp-admin$suffix.css", array(), '20100614' );	$styles->add( 'ie', "/wp-admin/css/ie$suffix.css", array(), '20100610' );	$styles->add_data( 'ie', 'conditional', 'lte IE 7' );	// all colors stylesheets need to have the same query strings (cache manifest compat)	$colors_version = '20100610';	// Register "meta" stylesheet for admin colors. All colors-* style sheets should have the same version string.	$styles->add( 'colors', true, array(), $colors_version );	// do not refer to these directly, the right one is queued by the above "meta" colors handle	$styles->add( 'colors-fresh', "/wp-admin/css/colors-fresh$suffix.css", array(), $colors_version );	$styles->add( 'colors-classic', "/wp-admin/css/colors-classic$suffix.css", array(), $colors_version );	$styles->add( 'ms', "/wp-admin/css/ms$suffix.css", array(), '20100528' );	$styles->add( 'global', "/wp-admin/css/global$suffix.css", array(), '20100108' );	$styles->add( 'media', "/wp-admin/css/media$suffix.css", array(), '20100519' );	$styles->add( 'widgets', "/wp-admin/css/widgets$suffix.css", array(), '20100610' );	$styles->add( 'dashboard', "/wp-admin/css/dashboard$suffix.css", array(), '20100424' );	$styles->add( 'install', "/wp-admin/css/install$suffix.css", array(), '20100605' ); // Readme as well	$styles->add( 'theme-editor', "/wp-admin/css/theme-editor$suffix.css", array(), '20100514' );	$styles->add( 'press-this', "/wp-admin/css/press-this$suffix.css", array(), '20100424' );	$styles->add( 'thickbox', '/wp-includes/js/thickbox/thickbox.css', array(), '20090514' );	$styles->add( 'login', "/wp-admin/css/login$suffix.css", array(), '20100601' );	$styles->add( 'plugin-install', "/wp-admin/css/plugin-install$suffix.css", array(), '20100402' );	$styles->add( 'theme-install', "/wp-admin/css/theme-install$suffix.css", array(), '20100523' );	$styles->add( 'farbtastic', '/wp-admin/css/farbtastic.css', array(), '1.2' );	$styles->add( 'jcrop', '/wp-includes/js/jcrop/jquery.Jcrop.css', array(), '0.9.8' );	$styles->add( 'imgareaselect', '/wp-includes/js/imgareaselect/imgareaselect.css', array(), '0.9.1' );	$styles->add( 'nav-menu', "/wp-admin/css/nav-menu$suffix.css", array(), '20100611' );	foreach ( $rtl_styles as $rtl_style ) {		$styles->add_data( $rtl_style, 'rtl', true );		if ( $suffix && ! in_array( $rtl_style, $no_suffix ) )			$styles->add_data( $rtl_style, 'suffix', $suffix );	}}/** * Reorder JavaScript scripts array to place prototype before jQuery. * * @since 2.3.1 * * @param array $js_array JavaScript scripst array * @return array Reordered array, if needed. */function wp_prototype_before_jquery( $js_array ) {	if ( false === $jquery = array_search( 'jquery', $js_array, true ) )		return $js_array;	if ( false === $prototype = array_search( 'prototype', $js_array, true ) )		return $js_array;	if ( $prototype < $jquery )		return $js_array;	unset($js_array[$prototype]);	array_splice( $js_array, $jquery, 0, 'prototype' );	return $js_array;}/** * Load localized data on print rather than initialization. * * These localizations require information that may not be loaded even by init. * * @since 2.5.0 */function wp_just_in_time_script_localization() {	wp_localize_script( 'autosave', 'autosaveL10n', array(		'autosaveInterval' => AUTOSAVE_INTERVAL,		'previewPageText' => __('Preview this Page'),		'previewPostText' => __('Preview this Post'),		'requestFile' => admin_url('admin-ajax.php'),		'savingText' => __('Saving Draft&#8230;'),		'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		'l10n_print_after' => 'try{convertEntities(autosaveL10n);}catch(e){};'	) );}/** * Administration Panel CSS for changing the styles. * * If installing the 'wp-admin/' directory will be replaced with './'. * * The $_wp_admin_css_colors global manages the Administration Panels CSS * stylesheet that is loaded. The option that is set is 'admin_color' and is the * color and key for the array. The value for the color key is an object with * a 'url' parameter that has the URL path to the CSS file. * * The query from $src parameter will be appended to the URL that is given from * the $_wp_admin_css_colors array value URL. * * @since 2.6.0 * @uses $_wp_admin_css_colors * * @param string $src Source URL. * @param string $handle Either 'colors' or 'colors-rtl'. * @return string URL path to CSS stylesheet for Administration Panels. */function wp_style_loader_src( $src, $handle ) {	if ( defined('WP_INSTALLING') )		return preg_replace( '#^wp-admin/#', './', $src );	if ( 'colors' == $handle || 'colors-rtl' == $handle ) {		global $_wp_admin_css_colors;		$color = get_user_option('admin_color');		if ( empty($color) || !isset($_wp_admin_css_colors[$color]) )			$color = 'fresh';		$color = $_wp_admin_css_colors[$color];		$parsed = parse_url( $src );		$url = $color->url;		if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG )			$url = preg_replace('/.css$|.css(?=\?)/', '.dev.css', $url);		if ( isset($parsed['query']) && $parsed['query'] ) {			wp_parse_str( $parsed['query'], $qv );			$url = add_query_arg( $qv, $url );		}		return $url;	}	return $src;}/** * Prints the script queue in the HTML head on admin pages. * * Postpones the scripts that were queued for the footer. * print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 * @see wp_print_scripts() */function print_head_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_head_items();	if ( apply_filters('print_head_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}/** * Prints the scripts that were queued for the footer on admin pages. * * @since 2.8 */function print_footer_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_footer_scripts') )		do_action('wp_print_footer_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // No need to run if not instantiated.	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_footer_items();	if ( apply_filters('print_footer_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}function _print_scripts() {	global $wp_scripts, $compress_scripts;	$zip = $compress_scripts ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	if ( !empty($wp_scripts->concat) ) {		if ( !empty($wp_scripts->print_code) ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $wp_scripts->print_code;			echo "/* ]]> */\n";			echo "</script>\n";		}		$ver = md5("$wp_scripts->concat_version");		$src = $wp_scripts->base_url . "/wp-admin/load-scripts.php?c={$zip}&load=" . trim($wp_scripts->concat, ', ') . "&ver=$ver";		echo "<script type='text/javascript' src='" . esc_attr($src) . "'></script>\n";	}	if ( !empty($wp_scripts->print_html) )		echo $wp_scripts->print_html;}/** * Prints the script queue in the HTML head on the front end. * * Postpones the scripts that were queued for the footer. * wp_print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 */function wp_print_head_scripts() {	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // no need to run if nothing is queued	return print_head_scripts();}/** * Prints the scripts that were queued for the footer on the front end. * * @since 2.8 */function wp_print_footer_scripts() {	return print_footer_scripts();}/** * Wrapper for do_action('wp_enqueue_scripts') * * Allows plugins to queue scripts for the front end using wp_enqueue_script(). * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available. * * @since 2.8 */function wp_enqueue_scripts() {	do_action('wp_enqueue_scripts');}function print_admin_styles() {	global $wp_styles, $concatenate_scripts, $compress_css;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	script_concat_settings();	$wp_styles->do_concat = $concatenate_scripts;	$zip = $compress_css ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	$wp_styles->do_items(false);	if ( apply_filters('print_admin_styles', true) ) {		if ( !empty($wp_styles->concat) ) {			$dir = $wp_styles->text_direction;			$ver = md5("$wp_styles->concat_version{$dir}");			$href = $wp_styles->base_url . "/wp-admin/load-styles.php?c={$zip}&dir={$dir}&load=" . trim($wp_styles->concat, ', ') . "&ver=$ver";			echo "<link rel='stylesheet' href='" . esc_attr($href) . "' type='text/css' media='all' />\n";		}		if ( !empty($wp_styles->print_html) )			echo $wp_styles->print_html;	}	$wp_styles->do_concat = false;	$wp_styles->concat = $wp_styles->concat_version = $wp_styles->print_html = '';	return $wp_styles->done;}function script_concat_settings() {	global $concatenate_scripts, $compress_scripts, $compress_css;	$compressed_output = ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') );	if ( ! isset($concatenate_scripts) ) {		$concatenate_scripts = defined('CONCATENATE_SCRIPTS') ? CONCATENATE_SCRIPTS : true;		if ( ! is_admin() || ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) )			$concatenate_scripts = false;	}	if ( ! isset($compress_scripts) ) {		$compress_scripts = defined('COMPRESS_SCRIPTS') ? COMPRESS_SCRIPTS : true;		if ( $compress_scripts && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_scripts = false;	}	if ( ! isset($compress_css) ) {		$compress_css = defined('COMPRESS_CSS') ? COMPRESS_CSS : true;		if ( $compress_css && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_css = false;	}}add_action( 'wp_default_scripts', 'wp_default_scripts' );add_filter( 'wp_print_scripts', 'wp_just_in_time_script_localization' );add_filter( 'print_scripts_array', 'wp_prototype_before_jquery' );add_action( 'wp_default_styles', 'wp_default_styles' );add_filter( 'style_loader_src', 'wp_style_loader_src', 10, 2 );
<?php/** * Handle default dashboard widgets options AJAX. * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once( './admin.php' );/** Load WordPress Administration Dashboard API */require( './includes/dashboard.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );send_nosniff_header();switch ( $_GET['jax'] ) {case 'dashboard_incoming_links' :	wp_dashboard_incoming_links_output();	break;case 'dashboard_primary' :	wp_dashboard_rss_output( 'dashboard_primary' );	break;case 'dashboard_secondary' :	wp_dashboard_secondary_output();	break;case 'dashboard_plugins' :	wp_dashboard_plugins_output();	break;case 'dashboard_quick_press' :	wp_dashboard_quick_press_output();	break;}?>
<?php/** * General settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('General Settings');$parent_file = 'options-general.php';/* translators: date and time format for exact current time, mainly about timezones, see http://php.net/date */$timezone_format = _x('Y-m-d G:i:s', 'timezone date format');/** * Display JavaScript on the page. * * @package WordPress * @subpackage General_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[	jQuery(document).ready(function($){		$("input[name='date_format']").click(function(){			if ( "date_format_custom_radio" != $(this).attr("id") )				$("input[name='date_format_custom']").val( $(this).val() );		});		$("input[name='date_format_custom']").focus(function(){			$("#date_format_custom_radio").attr("checked", "checked");		});		$("input[name='time_format']").click(function(){			if ( "time_format_custom_radio" != $(this).attr("id") )				$("input[name='time_format_custom']").val( $(this).val() );		});		$("input[name='time_format_custom']").focus(function(){			$("#time_format_custom_radio").attr("checked", "checked");		});	});//]]></script><?php}add_filter('admin_head', 'add_js');add_contextual_help($current_screen,	'<p>' . __('The fields on this screen determine some of the basics of your site setup.') . '</p>' .	'<p>' . __('Most themes display the site title at the top of every page, in the title bar of the browser, and as the identifying name for syndicated feeds. The tagline is also displayed by many themes.') . '</p>' .	'<p>' . __('The WordPress URL and the Site URL can be the same (example.com) or different; for example, having the WordPress core files (example.com/wordpress) in a subdirectory instead of the root directory.') . '</p>' .	'<p>' . __('If you want site visitors to be able to register themselves, as opposed to being registered by the site administrator, check the membership box. A default user role can be set for all new users, whether self-registered or registered by the site administrator.') . '</p>' .	'<p>' . __('UTC means Coordinated Universal Time.') . '</p>' .	'<p>' . __('Remember to click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_General_SubPanel" target="_blank">Documentation on General Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('general'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="blogname"><?php _e('Site Title') ?></label></th><td><input name="blogname" type="text" id="blogname" value="<?php form_option('blogname'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="blogdescription"><?php _e('Tagline') ?></label></th><td><input name="blogdescription" type="text" id="blogdescription"  value="<?php form_option('blogdescription'); ?>" class="regular-text" /><span class="description"><?php _e('In a few words, explain what this site is about.') ?></span></td></tr><?php if ( !is_multisite() ) { ?><tr valign="top"><th scope="row"><label for="siteurl"><?php _e('WordPress address (URL)') ?></label></th><td><input name="siteurl" type="text" id="siteurl" value="<?php form_option('siteurl'); ?>"<?php disabled( defined( 'WP_SITEURL' ) ); ?> class="regular-text code<?php if ( defined( 'WP_SITEURL' ) ) echo ' disabled' ?>" /></td></tr><tr valign="top"><th scope="row"><label for="home"><?php _e('Site address (URL)') ?></label></th><td><input name="home" type="text" id="home" value="<?php form_option('home'); ?>"<?php disabled( defined( 'WP_HOME' ) ); ?> class="regular-text code<?php if ( defined( 'WP_HOME' ) ) echo ' disabled' ?>" /><span class="description"><?php _e('Enter the address here if you want your site homepage <a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">to be different from the directory</a> you installed WordPress.'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="admin_email" type="text" id="admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text" /><span class="description"><?php _e('This address is used for admin purposes, like new user notification.') ?></span></td></tr><tr valign="top"><th scope="row"><?php _e('Membership') ?></th><td> <fieldset><legend class="screen-reader-text"><span><?php _e('Membership') ?></span></legend><label for="users_can_register"><input name="users_can_register" type="checkbox" id="users_can_register" value="1" <?php checked('1', get_option('users_can_register')); ?> /><?php _e('Anyone can register') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_role"><?php _e('New User Default Role') ?></label></th><td><select name="default_role" id="default_role"><?php wp_dropdown_roles( get_option('default_role') ); ?></select></td></tr><?php } else { ?><tr valign="top"><th scope="row"><label for="new_admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="new_admin_email" type="text" id="new_admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text code" /><span class="setting-description"><?php _e('This address is used for admin purposes. If you change this we will send you an e-mail at your new address to confirm it. <strong>The new address will not become active until confirmed.</strong>') ?></span><?php$new_admin_email = get_option( 'new_admin_email' );if ( $new_admin_email && $new_admin_email != get_option('admin_email') ) : ?><div class="updated inline"><p><?php printf( __('There is a pending change of the admin e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_admin_email, esc_url( admin_url( 'options.php?dismiss=new_admin_email' ) ) ); ?></p></div><?php endif; ?></td></tr><?php } ?><tr><?phpif ( !wp_timezone_supported() ) : // no magic timezone support here?><th scope="row"><label for="gmt_offset"><?php _e('Timezone') ?> </label></th><td><select name="gmt_offset" id="gmt_offset"><?php$current_offset = get_option('gmt_offset');$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,	0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);foreach ( $offset_range as $offset ) {	if ( 0 < $offset )		$offset_name = '+' . $offset;	elseif ( 0 == $offset )		$offset_name = '';	else		$offset_name = (string) $offset;	$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);	$selected = '';	if ( $current_offset == $offset ) {		$selected = " selected='selected'";		$current_offset_name = $offset_name;	}	echo "<option value=\"" . esc_attr($offset) . "\"$selected>" . sprintf(__('UTC %s'), $offset_name) . '</option>';}?></select><?php _e('hours'); ?><span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n( $time_format, false, 'gmt')); ?></span><?php if ($current_offset) : ?>	<span id="local-time"><?php printf(__('UTC %1$s is <code>%2$s</code>'), $current_offset_name, date_i18n($time_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Unfortunately, you have to manually update this for daylight saving time. The PHP Date/Time library is not supported by your web host.'); ?></span></td><?phpelse: // looks like we can do nice timezone selection!$current_offset = get_option('gmt_offset');$tzstring = get_option('timezone_string');$check_zone_info = true;// Remove old Etc mappings.  Fallback to gmt_offset.if ( false !== strpos($tzstring,'Etc/GMT') )	$tzstring = '';if ( empty($tzstring) ) { // Create a UTC+- zone if no timezone string exists	$check_zone_info = false;	if ( 0 == $current_offset )		$tzstring = 'UTC+0';	elseif ($current_offset < 0)		$tzstring = 'UTC' . $current_offset;	else		$tzstring = 'UTC+' . $current_offset;}?><th scope="row"><label for="timezone_string"><?php _e('Timezone') ?></label></th><td><select id="timezone_string" name="timezone_string"><?php echo wp_timezone_choice($tzstring); ?></select>    <span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n($timezone_format, false, 'gmt')); ?></span><?php if ( get_option('timezone_string') || !empty($current_offset) ) : ?>	<span id="local-time"><?php printf(__('Local time is <code>%1$s</code>'), date_i18n($timezone_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Choose a city in the same timezone as you.'); ?></span><?php if ($check_zone_info && $tzstring) : ?><br /><span>	<?php	// Set TZ so localtime works.	date_default_timezone_set($tzstring);	$now = localtime(time(), true);	if ( $now['tm_isdst'] )		_e('This timezone is currently in daylight saving time.');	else		_e('This timezone is currently in standard time.');	?>	<br />	<?php	if ( function_exists('timezone_transitions_get') ) {		$found = false;		$date_time_zone_selected = new DateTimeZone($tzstring);		$tz_offset = timezone_offset_get($date_time_zone_selected, date_create());		$right_now = time();		foreach ( timezone_transitions_get($date_time_zone_selected) as $tr) {			if ( $tr['ts'] > $right_now ) {			    $found = true;				break;			}		}		if ( $found ) {			echo ' ';			$message = $tr['isdst'] ?				__('Daylight saving time begins on: <code>%s</code>.') :				__('Standard time begins  on: <code>%s</code>.');			// Add the difference between the current offset and the new offset to ts to get the correct transition time from date_i18n().			printf( $message, date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $tr['ts'] + ($tz_offset - $tr['offset']) ) );		} else {			_e('This timezone does not observe daylight saving time.');		}	}	// Set back to UTC.	date_default_timezone_set('UTC');	?>	</span><?php endif; ?></td><?php endif; ?></tr><tr><th scope="row"><?php _e('Date Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Date Format') ?></span></legend><?php	$date_formats = apply_filters( 'date_formats', array(		__('F j, Y'),		'Y/m/d',		'm/d/Y',		'd/m/Y',	) );	$custom = true;	foreach ( $date_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='date_format' value='" . esc_attr($format) . "'";		if ( get_option('date_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="date_format" id="date_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="date_format_custom" value="' . esc_attr( get_option('date_format') ) . '" class="small-text" /> ' . date_i18n( get_option('date_format') ) . "\n";	echo "\t<p>" . __('<a href="http://codex.wordpress.org/Formatting_Date_and_Time">Documentation on date formatting</a>. Click &#8220;Save Changes&#8221; to update sample output.') . "</p>\n";?>	</fieldset></td></tr><tr><th scope="row"><?php _e('Time Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Time Format') ?></span></legend><?php	$time_formats = apply_filters( 'time_formats', array(		__('g:i a'),		'g:i A',		'H:i',	) );	$custom = true;	foreach ( $time_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='time_format' value='" . esc_attr($format) . "'";		if ( get_option('time_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="time_format" id="time_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="time_format_custom" value="' . esc_attr( get_option('time_format') ) . '" class="small-text" /> ' . date_i18n( get_option('time_format') ) . "\n";?>	</fieldset></td></tr><tr><th scope="row"><label for="start_of_week"><?php _e('Week Starts On') ?></label></th><td><select name="start_of_week" id="start_of_week"><?phpfor ($day_index = 0; $day_index <= 6; $day_index++) :	$selected = (get_option('start_of_week') == $day_index) ? 'selected="selected"' : '';	echo "\n\t<option value='" . esc_attr($day_index) . "' $selected>" . $wp_locale->get_weekday($day_index) . '</option>';endfor;?></select></td></tr><?php do_settings_fields('general', 'default'); ?><?php	$languages = get_available_languages();	if ( is_multisite() && !empty( $languages ) ):?>	<tr valign="top">		<th width="33%" scope="row"><?php _e('Site language:') ?></th>		<td>			<select name="WPLANG" id="WPLANG">				<?php mu_dropdown_languages( $languages, get_option('WPLANG') ); ?>			</select>		</td>	</tr><?php	endif;?></table><?php do_settings_sections('general'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Accepts file uploads from swfupload or other asynchronous upload methods. * * @package WordPress * @subpackage Administration */define('WP_ADMIN', true);if ( defined('ABSPATH') )	require_once(ABSPATH . 'wp-load.php');else	require_once('../wp-load.php');// Flash often fails to send cookies with the POST or upload, so we need to pass it in GET or POST insteadif ( is_ssl() && empty($_COOKIE[SECURE_AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[SECURE_AUTH_COOKIE] = $_REQUEST['auth_cookie'];elseif ( empty($_COOKIE[AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[AUTH_COOKIE] = $_REQUEST['auth_cookie'];if ( empty($_COOKIE[LOGGED_IN_COOKIE]) && !empty($_REQUEST['logged_in_cookie']) )	$_COOKIE[LOGGED_IN_COOKIE] = $_REQUEST['logged_in_cookie'];unset($current_user);require_once('./admin.php');header('Content-Type: text/plain; charset=' . get_option('blog_charset'));if ( !current_user_can('upload_files') )	wp_die(__('You do not have permission to upload files.'));// just fetch the detail form for that attachmentif ( isset($_REQUEST['attachment_id']) && ($id = intval($_REQUEST['attachment_id'])) && $_REQUEST['fetch'] ) {	if ( 2 == $_REQUEST['fetch'] ) {		add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id, array( 'send' => false, 'delete' => true ));	} else {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id);	}	exit;}check_admin_referer('media-form');$id = media_handle_upload('async-upload', $_REQUEST['post_id']);if ( is_wp_error($id) ) {	echo '<div class="error-div">	<a class="dismiss" href="#" onclick="jQuery(this).parents(\'div.media-item\').slideUp(200, function(){jQuery(this).remove();});">' . __('Dismiss') . '</a>	<strong>' . sprintf(__('&#8220;%s&#8221; has failed to upload due to an error'), esc_html($_FILES['async-upload']['name']) ) . '</strong><br />' .	esc_html($id->get_error_message()) . '</div>';	exit;}if ( $_REQUEST['short'] ) {	// short form response - attachment ID only	echo $id;} else {	// long form response - big chunk o html	$type = $_REQUEST['type'];	echo apply_filters("async_upload_{$type}", $id);}?>
<?php/** * Multisite themes administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! current_user_can( 'manage_network_themes' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Themes' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen enables and disables the inclusion of themes available to choose in the Appearance menu for each site. It does not activate or deactivate which theme a site is currently using.') . '</p>' .	'<p>' . __('If the network admin disables a theme that is in use, it can still remain selected on that site. If another theme is chosen, the disabled theme will not appear in the site&#8217;s Appearance > Themes screen.') . '</p>' .	'<p>' . __('Themes can be enabled on a site by site basis by the network admin on the Edit Site screen you go to via the Edit action link on the Sites screen.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Themes_SubPanel" target="_blank">Documentation on Network Themes</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) ) {	?>	<div id="message" class="updated"><p><?php _e( 'Site themes saved.' ) ?></p></div>	<?php}$themes = get_themes();$allowed_themes = get_site_allowed_themes();?><div class="wrap">	<form action="<?php echo esc_url( admin_url( 'ms-edit.php?action=updatethemes' ) ); ?>" method="post">		<?php screen_icon(); ?>		<h2><?php _e( 'Network Themes' ) ?></h2>		<p><?php _e( 'Themes must be enabled for your network before they will be available to individual sites.' ) ?></p>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>		<table class="widefat">			<thead>				<tr>					<th style="width:15%;"><?php _e( 'Enable' ) ?></th>					<th style="width:25%;"><?php _e( 'Theme' ) ?></th>					<th style="width:10%;"><?php _e( 'Version' ) ?></th>					<th style="width:60%;"><?php _e( 'Description' ) ?></th>				</tr>			</thead>			<tbody id="plugins">			<?php			$total_theme_count = $activated_themes_count = 0;			$class = '';			foreach ( (array) $themes as $key => $theme ) {				$total_theme_count++;				$theme_key = esc_html( $theme['Stylesheet'] );				$class = ( 'alt' == $class ) ? '' : 'alt';				$class1 = $enabled = $disabled = '';				$enabled = $disabled = false;				if ( isset( $allowed_themes[$theme_key] ) == true ) {					$enabled = true;					$activated_themes_count++;					$class1 = 'active';				} else {					$disabled = true;				}				?>				<tr valign="top" class="<?php echo $class . ' ' . $class1; ?>">					<td>						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="enabled_<?php echo $theme_key ?>" value="enabled" <?php checked( $enabled ) ?> /> <?php _e( 'Yes' ) ?></label>						&nbsp;&nbsp;&nbsp;						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="disabled_<?php echo $theme_key ?>" value="disabled" <?php checked( $disabled ) ?> /> <?php _e( 'No' ) ?></label>					</td>					<th scope="row" style="text-align:left;"><?php echo $key ?></th>					<td><?php echo $theme['Version'] ?></td>					<td><?php echo $theme['Description'] ?></td>				</tr>			<?php } ?>			</tbody>		</table>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>	</form>	<h3><?php _e( 'Total' )?></h3>	<p>		<?php printf( __( 'Themes Installed: %d' ), $total_theme_count); ?>		<br />		<?php printf( __( 'Themes Enabled: %d' ), $activated_themes_count); ?>	</p></div><?php include( './admin-footer.php' ); ?>
<?php/** * Portable PHP password hashing framework. * @package phpass * @since 2.5 * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ */## Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in# the public domain.## There's absolutely no warranty.## Please be sure to update the Version line if you edit this file in any way.# It is suggested that you leave the main version number intact, but indicate# your project name (after the slash) and add your own revision information.## Please do not change the "private" password hashing method implemented in# here, thereby making your hashes incompatible.  However, if you must, please# change the hash type identifier (the "$P$") to something different.## Obviously, since this code is in the public domain, the above are not# requirements (there can be none), but merely suggestions.#/** * Portable PHP password hashing framework. * * @package phpass * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ * @since 2.5 */class PasswordHash {	var $itoa64;	var $iteration_count_log2;	var $portable_hashes;	var $random_state;	function PasswordHash($iteration_count_log2, $portable_hashes)	{		$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)			$iteration_count_log2 = 8;		$this->iteration_count_log2 = $iteration_count_log2;		$this->portable_hashes = $portable_hashes;		$this->random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons	}	function get_random_bytes($count)	{		$output = '';		if ( @is_readable('/dev/urandom') &&		    ($fh = @fopen('/dev/urandom', 'rb'))) {			$output = fread($fh, $count);			fclose($fh);		}		if (strlen($output) < $count) {			$output = '';			for ($i = 0; $i < $count; $i += 16) {				$this->random_state =				    md5(microtime() . $this->random_state);				$output .=				    pack('H*', md5($this->random_state));			}			$output = substr($output, 0, $count);		}		return $output;	}	function encode64($input, $count)	{		$output = '';		$i = 0;		do {			$value = ord($input[$i++]);			$output .= $this->itoa64[$value & 0x3f];			if ($i < $count)				$value |= ord($input[$i]) << 8;			$output .= $this->itoa64[($value >> 6) & 0x3f];			if ($i++ >= $count)				break;			if ($i < $count)				$value |= ord($input[$i]) << 16;			$output .= $this->itoa64[($value >> 12) & 0x3f];			if ($i++ >= $count)				break;			$output .= $this->itoa64[($value >> 18) & 0x3f];		} while ($i < $count);		return $output;	}	function gensalt_private($input)	{		$output = '$P$';		$output .= $this->itoa64[min($this->iteration_count_log2 +			((PHP_VERSION >= '5') ? 5 : 3), 30)];		$output .= $this->encode64($input, 6);		return $output;	}	function crypt_private($password, $setting)	{		$output = '*0';		if (substr($setting, 0, 2) == $output)			$output = '*1';		if (substr($setting, 0, 3) != '$P$')			return $output;		$count_log2 = strpos($this->itoa64, $setting[3]);		if ($count_log2 < 7 || $count_log2 > 30)			return $output;		$count = 1 << $count_log2;		$salt = substr($setting, 4, 8);		if (strlen($salt) != 8)			return $output;		# We're kind of forced to use MD5 here since it's the only		# cryptographic primitive available in all versions of PHP		# currently in use.  To implement our own low-level crypto		# in PHP would result in much worse performance and		# consequently in lower iteration counts and hashes that are		# quicker to crack (by non-PHP code).		if (PHP_VERSION >= '5') {			$hash = md5($salt . $password, TRUE);			do {				$hash = md5($hash . $password, TRUE);			} while (--$count);		} else {			$hash = pack('H*', md5($salt . $password));			do {				$hash = pack('H*', md5($hash . $password));			} while (--$count);		}		$output = substr($setting, 0, 12);		$output .= $this->encode64($hash, 16);		return $output;	}	function gensalt_extended($input)	{		$count_log2 = min($this->iteration_count_log2 + 8, 24);		# This should be odd to not reveal weak DES keys, and the		# maximum valid value is (2**24 - 1) which is odd anyway.		$count = (1 << $count_log2) - 1;		$output = '_';		$output .= $this->itoa64[$count & 0x3f];		$output .= $this->itoa64[($count >> 6) & 0x3f];		$output .= $this->itoa64[($count >> 12) & 0x3f];		$output .= $this->itoa64[($count >> 18) & 0x3f];		$output .= $this->encode64($input, 3);		return $output;	}	function gensalt_blowfish($input)	{		# This one needs to use a different order of characters and a		# different encoding scheme from the one in encode64() above.		# We care because the last character in our encoded string will		# only represent 2 bits.  While two known implementations of		# bcrypt will happily accept and correct a salt string which		# has the 4 unused bits set to non-zero, we do not want to take		# chances and we also do not want to waste an additional byte		# of entropy.		$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';		$output = '$2a$';		$output .= chr(ord('0') + $this->iteration_count_log2 / 10);		$output .= chr(ord('0') + $this->iteration_count_log2 % 10);		$output .= '$';		$i = 0;		do {			$c1 = ord($input[$i++]);			$output .= $itoa64[$c1 >> 2];			$c1 = ($c1 & 0x03) << 4;			if ($i >= 16) {				$output .= $itoa64[$c1];				break;			}			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 4;			$output .= $itoa64[$c1];			$c1 = ($c2 & 0x0f) << 2;			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 6;			$output .= $itoa64[$c1];			$output .= $itoa64[$c2 & 0x3f];		} while (1);		return $output;	}	function HashPassword($password)	{		$random = '';		if (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {			$random = $this->get_random_bytes(16);			$hash =			    crypt($password, $this->gensalt_blowfish($random));			if (strlen($hash) == 60)				return $hash;		}		if (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {			if (strlen($random) < 3)				$random = $this->get_random_bytes(3);			$hash =			    crypt($password, $this->gensalt_extended($random));			if (strlen($hash) == 20)				return $hash;		}		if (strlen($random) < 6)			$random = $this->get_random_bytes(6);		$hash =		    $this->crypt_private($password,		    $this->gensalt_private($random));		if (strlen($hash) == 34)			return $hash;		# Returning '*' on error is safe here, but would _not_ be safe		# in a crypt(3)-like function used _both_ for generating new		# hashes and for validating passwords against existing hashes.		return '*';	}	function CheckPassword($password, $stored_hash)	{		$hash = $this->crypt_private($password, $stored_hash);		if ($hash[0] == '*')			$hash = crypt($password, $stored_hash);		return $hash == $stored_hash;	}}?>
<?php/** * Manage link administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for link actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( ! current_user_can('manage_links') )	wp_die( __('You do not have sufficient permissions to edit the links for this site.') );if ( !empty($_POST['deletebookmarks']) )	$action = 'deletebookmarks';if ( !empty($_POST['move']) )	$action = 'move';if ( !empty($_POST['linkcheck']) )	$linkcheck = $_POST['linkcheck'];$this_file = 'link-manager.php';switch ($action) {	case 'deletebookmarks' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$deleted = 0;		foreach ($linkcheck as $link_id) {			$link_id = (int) $link_id;			if ( wp_delete_link($link_id) )				$deleted++;		}		wp_redirect("$this_file?deleted=$deleted");		exit;		break;	case 'move' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$all_links = join(',', $linkcheck);		// should now have an array of links we can change		//$q = $wpdb->query("update $wpdb->links SET link_category='$category' WHERE link_id IN ($all_links)");		wp_redirect($this_file);		exit;		break;	case 'add' :		check_admin_referer('add-bookmark');		$redir = wp_get_referer();		if ( add_link() )			$redir = add_query_arg( 'added', 'true', $redir );		wp_redirect( $redir );		exit;		break;	case 'save' :		$link_id = (int) $_POST['link_id'];		check_admin_referer('update-bookmark_' . $link_id);		edit_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'delete' :		$link_id = (int) $_GET['link_id'];		check_admin_referer('delete-bookmark_' . $link_id);		wp_delete_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'edit' :		wp_enqueue_script('link');		wp_enqueue_script('xfn');		$parent_file = 'link-manager.php';		$submenu_file = 'link-manager.php';		$title = __('Edit Link');		$link_id = (int) $_GET['link_id'];		if (!$link = get_link_to_edit($link_id))			wp_die(__('Link not found.'));		include ('edit-link-form.php');		include ('admin-footer.php');		break;	default :		break;}?>
<?php/** * Media settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Media Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can set maximum sizes for images inserted into your written content; you can also insert an image as Full Size.') . '</p>' .	'<p>' . __('The Embed option allows you embed a video, image, or other media content into your content automatically by typing the URL (of the web page where the file lives) on its own line when you create your content.') . '</p>' .	'<p>' . __('Uploading Options gives you folder and path choices for storing your files in your installation&#8217;s directory.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Media_SubPanel" target="_blank">Documentation on Media Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form action="options.php" method="post"><?php settings_fields('media'); ?><h3><?php _e('Image sizes') ?></h3><p><?php _e('The sizes listed below determine the maximum dimensions in pixels to use when inserting an image into the body of a post.'); ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Thumbnail size') ?></th><td><label for="thumbnail_size_w"><?php _e('Width'); ?></label><input name="thumbnail_size_w" type="text" id="thumbnail_size_w" value="<?php form_option('thumbnail_size_w'); ?>" class="small-text" /><label for="thumbnail_size_h"><?php _e('Height'); ?></label><input name="thumbnail_size_h" type="text" id="thumbnail_size_h" value="<?php form_option('thumbnail_size_h'); ?>" class="small-text" /><br /><input name="thumbnail_crop" type="checkbox" id="thumbnail_crop" value="1" <?php checked('1', get_option('thumbnail_crop')); ?>/><label for="thumbnail_crop"><?php _e('Crop thumbnail to exact dimensions (normally thumbnails are proportional)'); ?></label></td></tr><tr valign="top"><th scope="row"><?php _e('Medium size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Medium size'); ?></span></legend><label for="medium_size_w"><?php _e('Max Width'); ?></label><input name="medium_size_w" type="text" id="medium_size_w" value="<?php form_option('medium_size_w'); ?>" class="small-text" /><label for="medium_size_h"><?php _e('Max Height'); ?></label><input name="medium_size_h" type="text" id="medium_size_h" value="<?php form_option('medium_size_h'); ?>" class="small-text" /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Large size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Large size'); ?></span></legend><label for="large_size_w"><?php _e('Max Width'); ?></label><input name="large_size_w" type="text" id="large_size_w" value="<?php form_option('large_size_w'); ?>" class="small-text" /><label for="large_size_h"><?php _e('Max Height'); ?></label><input name="large_size_h" type="text" id="large_size_h" value="<?php form_option('large_size_h'); ?>" class="small-text" /></fieldset></td></tr><?php do_settings_fields('media', 'default'); ?></table><h3><?php _e('Embeds') ?></h3><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Auto-embeds'); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Attempt to automatically embed all plain text URLs'); ?></span></legend><label for="embed_autourls"><input name="embed_autourls" type="checkbox" id="embed_autourls" value="1" <?php checked( '1', get_option('embed_autourls') ); ?>/> <?php _e('Attempt to automatically embed all plain text URLs'); ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum embed size') ?></th><td><label for="embed_size_w"><?php _e('Width'); ?></label><input name="embed_size_w" type="text" id="embed_size_w" value="<?php form_option('embed_size_w'); ?>" class="small-text" /><label for="embed_size_h"><?php _e('Height'); ?></label><input name="embed_size_h" type="text" id="embed_size_h" value="<?php form_option('embed_size_h'); ?>" class="small-text" /><?php if ( !empty($content_width) ) echo '<br />' . __("If the width value is left blank, embeds will default to the max width of your theme."); ?></td></tr><?php do_settings_fields('media', 'embeds'); ?></table><?php if ( !is_multisite() ) : ?><h3><?php _e('Uploading Files'); ?></h3><table class="form-table"><tr valign="top"><th scope="row"><label for="upload_path"><?php _e('Store uploads in this folder'); ?></label></th><td><input name="upload_path" type="text" id="upload_path" value="<?php echo esc_attr(get_option('upload_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Default is <code>wp-content/uploads</code>'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="upload_url_path"><?php _e('Full URL path to files'); ?></label></th><td><input name="upload_url_path" type="text" id="upload_url_path" value="<?php echo esc_attr( get_option('upload_url_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Configuring this is optional. By default, it should be blank.'); ?></span></td></tr><tr><th scope="row" colspan="2" class="th-full"><label for="uploads_use_yearmonth_folders"><input name="uploads_use_yearmonth_folders" type="checkbox" id="uploads_use_yearmonth_folders" value="1"<?php checked('1', get_option('uploads_use_yearmonth_folders')); ?> /><?php _e('Organize my uploads into month- and year-based folders'); ?></label></th></tr><?php do_settings_fields('media', 'uploads'); ?></table><?php endif; ?><?php do_settings_sections('media'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * BackPress Styles enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress Styles enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r74 */class WP_Styles extends WP_Dependencies {	var $base_url;	var $content_url;	var $default_version;	var $text_direction = 'ltr';	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_styles', array(&$this) );	}	function do_item( $handle ) {		if ( !parent::do_item($handle) )			return false;		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		if ( $this->do_concat ) {			if ( $this->in_default_dir($this->registered[$handle]->src) && !isset($this->registered[$handle]->extra['conditional']) && !isset($this->registered[$handle]->extra['alt']) ) {				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			}		}		if ( isset($this->registered[$handle]->args) )			$media = esc_attr( $this->registered[$handle]->args );		else			$media = 'all';		$href = $this->_css_href( $this->registered[$handle]->src, $ver, $handle );		$rel = isset($this->registered[$handle]->extra['alt']) && $this->registered[$handle]->extra['alt'] ? 'alternate stylesheet' : 'stylesheet';		$title = isset($this->registered[$handle]->extra['title']) ? "title='" . esc_attr( $this->registered[$handle]->extra['title'] ) . "'" : '';		$end_cond = $tag = '';		if ( isset($this->registered[$handle]->extra['conditional']) && $this->registered[$handle]->extra['conditional'] ) {			$tag .= "<!--[if {$this->registered[$handle]->extra['conditional']}]>\n";			$end_cond = "<![endif]-->\n";		}		$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-css' $title href='$href' type='text/css' media='$media' />\n", $handle );		if ( 'rtl' === $this->text_direction && isset($this->registered[$handle]->extra['rtl']) && $this->registered[$handle]->extra['rtl'] ) {			if ( is_bool( $this->registered[$handle]->extra['rtl'] ) ) {				$suffix = isset( $this->registered[$handle]->extra['suffix'] ) ? $this->registered[$handle]->extra['suffix'] : '';				$rtl_href = str_replace( "{$suffix}.css", "-rtl{$suffix}.css", $this->_css_href( $this->registered[$handle]->src , $ver, "$handle-rtl" ));			} else {				$rtl_href = $this->_css_href( $this->registered[$handle]->extra['rtl'], $ver, "$handle-rtl" );			}			$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-rtl-css' $title href='$rtl_href' type='text/css' media='$media' />\n", $handle );		}		$tag .= $end_cond;		if ( $this->do_concat )			$this->print_html .= $tag;		else			echo $tag;		// Could do something with $this->registered[$handle]->extra here to print out extra CSS rules//		echo "<style type='text/css'>\n";//		echo "/* <![CDATA[ */\n";//		echo "/* ]]> */\n";//		echo "</style>\n";		return true;	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_styles_array', $this->to_do );		return $r;	}	function _css_href( $src, $ver, $handle ) {		if ( !is_bool($src) && !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = apply_filters( 'style_loader_src', $src, $handle );		return esc_url( $src );	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}}
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * Redirects to the Comments RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'comments_rss2_url' ), 301 );?>
<?php/** * Add Link Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('manage_links') )	wp_die(__('You do not have sufficient permissions to add links to this site.'));$title = __('Add New Link');$parent_file = 'link-manager.php';wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image',	'description', 'visible', 'target', 'category', 'link_id',	'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel',	'notes', 'linkcheck[]'));wp_enqueue_script('link');wp_enqueue_script('xfn');$link = get_default_link_to_edit();include('./edit-link-form.php');require('./admin-footer.php');?>
<?php/** * WordPress Translation API * * @package WordPress * @subpackage i18n *//** * Gets the current locale. * * If the locale is set, then it will filter the locale in the 'locale' filter * hook and return the value. * * If the locale is not set already, then the WPLANG constant is used if it is * defined. Then it is filtered through the 'locale' filter hook and the value * for the locale global set and the locale is returned. * * The process to get the locale should only be done once but the locale will * always be filtered using the 'locale' hook. * * @since 1.5.0 * @uses apply_filters() Calls 'locale' hook on locale value. * @uses $locale Gets the locale stored in the global. * * @return string The locale of the blog or from the 'locale' hook. */function get_locale() {	global $locale;	if ( isset( $locale ) )		return apply_filters( 'locale', $locale );	// WPLANG is defined in wp-config.	if ( defined( 'WPLANG' ) )		$locale = WPLANG;	// If multisite, check options.	if ( is_multisite() && !defined('WP_INSTALLING') ) {		$ms_locale = get_option('WPLANG');		if ( $ms_locale === false )			$ms_locale = get_site_option('WPLANG');		if ( $ms_locale !== false )			$locale = $ms_locale;	}	if ( empty( $locale ) )		$locale = 'en_US';	return apply_filters( 'locale', $locale );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see __() Don't use translate() directly, use __() * @since 2.2.0 * @uses apply_filters() Calls 'gettext' on domain translated text *		with the untranslated text as second parameter. * * @param string $text Text to translate. * @param string $domain Domain to retrieve the translated text. * @return string Translated text */function translate( $text, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext', $translations->translate( $text ), $text, $domain );}function before_last_bar( $string ) {	$last_bar = strrpos( $string, '|' );	if ( false == $last_bar )		return $string;	else		return substr( $string, 0, $last_bar );}function translate_with_gettext_context( $text, $context, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext_with_context', $translations->translate( $text, $context ), $text, $context, $domain );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @since 2.1.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function __( $text, $domain = 'default' ) {	return translate( $text, $domain );}/** * Retrieves the translation of $text and escapes it for safe use in an attribute. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_attr__( $text, $domain = 'default' ) {	return esc_attr( translate( $text, $domain ) );}/** * Retrieves the translation of $text and escapes it for safe use in HTML output. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_html__( $text, $domain = 'default' ) {	return esc_html( translate( $text, $domain ) );}/** * Displays the returned translated text from translate(). * * @see translate() Echoes returned translate() string * @since 1.2.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function _e( $text, $domain = 'default' ) {	echo translate( $text, $domain );}/** * Displays translated text that has been escaped for safe use in an attribute. * * @see translate() Echoes returned translate() string * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_attr_e( $text, $domain = 'default' ) {	echo esc_attr( translate( $text, $domain ) );}/** * Displays translated text that has been escaped for safe use in HTML output. * * @see translate() Echoes returned translate() string * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_html_e( $text, $domain = 'default' ) {	echo esc_html( translate( $text, $domain ) );}/** * Retrieve translated string with gettext context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * By including the context in the pot file translators can translate the two * string differently. * * @since 2.8.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _x( $single, $context, $domain = 'default' ) {	return translate_with_gettext_context( $single, $context, $domain );}/** * Displays translated string with gettext context * * @see _x * @since 3.0.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _ex( $single, $context, $domain = 'default' ) {	echo _x( $single, $context, $domain );}function esc_attr_x( $single, $context, $domain = 'default' ) {	return esc_attr( translate_with_gettext_context( $single, $context, $domain ) );}function esc_html_x( $single, $context, $domain = 'default' ) {	return esc_html( translate_with_gettext_context( $single, $context, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * If the domain is not set in the $l10n list, then a comparison will be made * and either $plural or $single parameters returned. * * If the domain does exist, then the parameters $single, $plural, and $number * will first be passed to the domain's ngettext method. Then it will be passed * to the 'ngettext' filter hook along with the same parameters. The expected * type will be a string. * * @since 2.8.0 * @uses $l10n Gets list of domain translated string (gettext_reader) objects * @uses apply_filters() Calls 'ngettext' hook on domains text returned, *		along with $single, $plural, and $number parameters. Expected to return string. * * @param string $single The text that will be used if $number is 1 * @param string $plural The text that will be used if $number is not 1 * @param int $number The number to compare against to use either $single or $plural * @param string $domain Optional. The domain identifier the text should be retrieved in * @return string Either $single or $plural translated text */function _n( $single, $plural, $number, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number );	return apply_filters( 'ngettext', $translation, $single, $plural, $number, $domain );}/** * A hybrid of _n() and _x(). It supports contexts and plurals. * * @see _n() * @see _x() * */function _nx($single, $plural, $number, $context, $domain = 'default') {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number, $context );	return apply_filters( 'ngettext_with_context', $translation, $single, $plural, $number, $context, $domain );}/** * Register plural strings in POT file, but don't translate them. * * Used when you want do keep structures with translatable plural strings and * use them later. * * Example: *  $messages = array( *  	'post' => _n_noop('%s post', '%s posts'), *  	'page' => _n_noop('%s pages', '%s pages') *  ); *  ... *  $message = $messages[$type]; *  $usable_text = sprintf(_n($message[0], $message[1], $count), $count); * * @since 2.5 * @param $single Single form to be i18ned * @param $plural Plural form to be i18ned * @return array array($single, $plural) */function _n_noop( $single, $plural ) {	return array( $single, $plural );}/** * Register plural strings with context in POT file, but don't translate them. * * @see _n_noop() */function _nx_noop( $single, $plural, $context ) {	return array( $single, $plural, $context );}/** * Loads a MO file into the domain $domain. * * If the domain already exists, the translations will be merged. If both * sets have the same string, the translation from the original value will be taken. * * On success, the .mo file will be placed in the $l10n global by $domain * and will be a MO object. * * @since 1.5.0 * @uses $l10n Gets list of domain translated string objects * * @param string $domain Unique identifier for retrieving translated strings * @param string $mofile Path to the .mo file * @return bool true on success, false on failure */function load_textdomain( $domain, $mofile ) {	global $l10n;	$plugin_override = apply_filters( 'override_load_textdomain', false, $domain, $mofile );	if ( true == $plugin_override ) {		return true;	}	do_action( 'load_textdomain', $domain, $mofile );	$mofile = apply_filters( 'load_textdomain_mofile', $mofile, $domain );	if ( !is_readable( $mofile ) ) return false;	$mo = new MO();	if ( !$mo->import_from_file( $mofile ) ) return false;	if ( isset( $l10n[$domain] ) )		$mo->merge_with( $l10n[$domain] );	$l10n[$domain] = &$mo;	return true;}/** * Unloads translations for a domain * * @since 3.0.0 * @param string $domain Textdomain to be unloaded * @return bool Whether textdomain was unloaded */function unload_textdomain( $domain ) {	global $l10n;	$plugin_override = apply_filters( 'override_unload_textdomain', false, $domain );	if ( $plugin_override )		return true;	do_action( 'unload_textdomain', $domain );	if ( isset( $l10n[$domain] ) ) {		unset( $l10n[$domain] );		return true;	}	return false;}/** * Loads default translated strings based on locale. * * Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The * translated (.mo) file is named based off of the locale. * * @since 1.5.0 */function load_default_textdomain() {	$locale = get_locale();	load_textdomain( 'default', WP_LANG_DIR . "/$locale.mo" );	if ( is_multisite() || ( defined( 'WP_NETWORK_ADMIN_PAGE' ) && WP_NETWORK_ADMIN_PAGE ) ) {		load_textdomain( 'default', WP_LANG_DIR . "/ms-$locale.mo" );	}}/** * Loads the plugin's translated strings. * * If the path is not given then it will be the root of the plugin directory. * The .mo file should be named based on the domain with a dash, and then the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings * @param string $abs_rel_path Optional. Relative path to ABSPATH of a folder, * 	where the .mo file resides. Deprecated, but still functional until 2.7 * @param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precendence over $abs_rel_path */function load_plugin_textdomain( $domain, $abs_rel_path = false, $plugin_rel_path = false ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	if ( false !== $plugin_rel_path	) {		$path = WP_PLUGIN_DIR . '/' . trim( $plugin_rel_path, '/' );	} else if ( false !== $abs_rel_path ) {		_deprecated_argument( __FUNCTION__, '2.7' );		$path = ABSPATH . trim( $abs_rel_path, '/' );	} else {		$path = WP_PLUGIN_DIR;	}	$mofile = $path . '/'. $domain . '-' . $locale . '.mo';	return load_textdomain( $domain, $mofile );}/** * Load the translated strings for a plugin residing in the mu-plugins dir. * * @since 3.0.0 * * @param string $domain Unique identifier for retrieving translated strings * @param strings $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which * the MO file resides. Defaults is empty string. */function load_muplugin_textdomain( $domain, $mu_plugin_rel_path = '' ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	$path = WPMU_PLUGIN_DIR . '/' . ltrim( $mu_plugin_rel_path, '/' );	load_textdomain( $domain, trailingslashit( $path ) . "$domain-$locale.mo" );}/** * Loads the theme's translated strings. * * If the current locale exists as a .mo file in the theme's root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_template_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Loads the child themes translated strings. * * If the current locale exists as a .mo file in the child themes root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 2.9.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_child_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_stylesheet_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Returns the Translations instance for a domain. If there isn't one, * returns empty Translations instance. * * @param string $domain * @return object A Translation instance */function &get_translations_for_domain( $domain ) {	global $l10n;	if ( !isset( $l10n[$domain] ) ) {		$l10n[$domain] = &new NOOP_Translations;	}	return $l10n[$domain];}/** * Whether there are translations for the domain * * @since 3.0.0 * @param string $domain * @return bool Whether there are translations */function is_textdomain_loaded( $domain ) {	global $l10n;	return isset( $l10n[$domain] );}/** * Translates role name. Since the role names are in the database and * not in the source there are dummy gettext calls to get them into the POT * file and this function properly translates them back. * * The before_last_bar() call is needed, because older installs keep the roles * using the old context format: 'Role name|User role' and just skipping the * content after the last bar is easier than fixing them in the DB. New installs * won't suffer from that problem. */function translate_user_role( $name ) {	return translate_with_gettext_context( before_last_bar($name), 'User role' );}/** * Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR. * * @since 3.0.0 * * @param string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR. * @return array Array of language codes or an empty array if no languages are present.  Language codes are formed by stripping the .mo extension from the language file names. */function get_available_languages( $dir = null ) {	$languages = array();	foreach( (array)glob( ( is_null( $dir) ? WP_LANG_DIR : $dir ) . '/*.mo' ) as $lang_file ) {		$lang_file = basename($lang_file, '.mo');		if ( 0 !== strpos( $lang_file, 'continents-cities' ) && 0 !== strpos( $lang_file, 'ms-' ) )			$languages[] = $lang_file;	}	return $languages;}
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );// Do not delete these lines	if (!empty($_SERVER['SCRIPT_FILENAME']) && 'comments.php' == basename($_SERVER['SCRIPT_FILENAME']))		die ('Please do not load this page directly. Thanks!');		if ( post_password_required() ) { ?>		<p class="nocomments"><?php _e('This post is password protected. Enter the password to view comments.'); ?></p> 	<?php		return;	}?><!-- You can start editing here. --><?php if ( have_comments() ) : ?>	<h3 id="comments"><?php	printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number() ),									number_format_i18n( get_comments_number() ), '&#8220;' . get_the_title() . '&#8221;' ); ?></h3>	<div class="navigation">		<div class="alignleft"><?php previous_comments_link() ?></div>		<div class="alignright"><?php next_comments_link() ?></div>	</div>	<ol class="commentlist">	<?php wp_list_comments();?>	</ol>	<div class="navigation">		<div class="alignleft"><?php previous_comments_link() ?></div>		<div class="alignright"><?php next_comments_link() ?></div>	</div> <?php else : // this is displayed if there are no comments so far ?>	<?php if ( comments_open() ) : ?>		<!-- If comments are open, but there are no comments. -->	 <?php else : // comments are closed ?>		<!-- If comments are closed. -->		<p class="nocomments"><?php _e('Comments are closed.'); ?></p>	<?php endif; ?><?php endif; ?><?php if ( comments_open() ) : ?><div id="respond"><h3><?php comment_form_title( __('Leave a Reply'), __('Leave a Reply to %s' ) ); ?></h3><div id="cancel-comment-reply"> 	<small><?php cancel_comment_reply_link() ?></small></div> <?php if ( get_option('comment_registration') && !is_user_logged_in() ) : ?><p><?php printf(__('You must be <a href="%s">logged in</a> to post a comment.'), wp_login_url( get_permalink() )); ?></p><?php else : ?><form action="<?php echo get_option('siteurl'); ?>/wp-comments-post.php" method="post" id="commentform"><?php if ( is_user_logged_in() ) : ?><p><?php printf(__('Logged in as <a href="%1$s">%2$s</a>.'), get_option('siteurl') . '/wp-admin/profile.php', $user_identity); ?> <a href="<?php echo wp_logout_url(get_permalink()); ?>" title="<?php _e('Log out of this account'); ?>"><?php _e('Log out &raquo;'); ?></a></p><?php else : ?><p><input type="text" name="author" id="author" value="<?php echo esc_attr($comment_author); ?>" size="22" tabindex="1" <?php if ($req) echo "aria-required='true'"; ?> /><label for="author"><small><?php _e('Name'); ?> <?php if ($req) _e('(required)'); ?></small></label></p><p><input type="text" name="email" id="email" value="<?php echo esc_attr($comment_author_email); ?>" size="22" tabindex="2" <?php if ($req) echo "aria-required='true'"; ?> /><label for="email"><small><?php _e('Mail (will not be published)'); ?> <?php if ($req) _e('(required)'); ?></small></label></p><p><input type="text" name="url" id="url" value="<?php echo  esc_attr($comment_author_url); ?>" size="22" tabindex="3" /><label for="url"><small><?php _e('Website'); ?></small></label></p><?php endif; ?><!--<p><small><?php printf(__('<strong>XHTML:</strong> You can use these tags: <code>%s</code>'), allowed_tags()); ?></small></p>--><p><textarea name="comment" id="comment" cols="58" rows="10" tabindex="4"></textarea></p><p><input name="submit" type="submit" id="submit" tabindex="5" value="<?php _e('Submit Comment'); ?>" /><?php comment_id_fields(); ?> </p><?php do_action('comment_form', $post->ID); ?></form><?php endif; // If registration required and not logged in ?></div><?php endif; // if you delete this the sky will fall on your head ?>
<?php/** * WordPress Administration Generic POST Handler. * * @package WordPress * @subpackage Administration *//** We are located in WordPress Administration Panels */define('WP_ADMIN', true);if ( defined('ABSPATH') )	require_once(ABSPATH . 'wp-load.php');else	require_once('../wp-load.php');require_once(ABSPATH . 'wp-admin/includes/admin.php');nocache_headers();do_action('admin_init');$action = 'admin_post';if ( !wp_validate_auth_cookie() )	$action .= '_nopriv';if ( !empty($_REQUEST['action']) )	$action .= '_' . $_REQUEST['action'];do_action($action);?>
<?php/** * RSS 1 RDF Feed Template for displaying RSS 1 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rdf') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rdf:RDF	xmlns="http://purl.org/rss/1.0/"	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:admin="http://webns.net/mvcb/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	<?php do_action('rdf_ns'); ?>><channel rdf:about="<?php bloginfo_rss("url") ?>">	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></dc:date>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>	<?php do_action('rdf_header'); ?>	<items>		<rdf:Seq>		<?php while (have_posts()): the_post(); ?>			<rdf:li rdf:resource="<?php the_permalink_rss() ?>"/>		<?php endwhile; ?>		</rdf:Seq>	</items></channel><?php rewind_posts(); while (have_posts()): the_post(); ?><item rdf:about="<?php the_permalink_rss() ?>">	<title><?php the_title_rss() ?></title>	<link><?php the_permalink_rss() ?></link>	 <dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', $post->post_date_gmt, false); ?></dc:date>	<dc:creator><?php the_author() ?></dc:creator>	<?php the_category_rss('rdf') ?><?php if (get_option('rss_use_excerpt')) : ?>	<description><?php the_excerpt_rss() ?></description><?php else : ?>	<description><?php the_excerpt_rss() ?></description>	<content:encoded><![CDATA[<?php the_content_feed('rdf') ?>]]></content:encoded><?php endif; ?>	<?php do_action('rdf_item'); ?></item><?php endwhile;  ?></rdf:RDF>
<?php/** * Template Name: One column, no sidebar * * A custom page template without sidebar. * * The "Template Name:" bit above allows this to be selectable * from a dropdown menu on the edit page screen. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container" class="one-column">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * Bookmark Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of bookmarks. * * The $bookmarks array must contain bookmark objects and will be iterated over * to retrieve the bookmark to be used in the output. * * The output is formatted as HTML with no way to change that format. However, * what is between, before, and after can be changed. The link itself will be * HTML. * * This function is used internally by wp_list_bookmarks() and should not be * used by themes. * * The defaults for overwriting are: * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'show_description' - Default is 0 (integer). Whether to show the description *		of the bookmark. * 'show_images' - Default is 1 (integer). Whether to show link image if *		available. * 'show_name' - Default is 0 (integer). Whether to show link name if *		available. * 'before' - Default is '<li>' (string). The html or text to prepend to each *		bookmarks. * 'after' - Default is '</li>' (string). The html or text to append to each *		bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *		bookmarks inside the <a> tag. * 'link_after' - Default is '' (string). The html or text to append to each *		bookmarks inside the <a> tag. * 'between' - Default is '\n' (string). The string for use in between the link, *		description, and image. * 'show_rating' - Default is 0 (integer). Whether to show the link rating. * * @since 2.1.0 * @access private * @usedby wp_list_bookmarks() * * @param array $bookmarks List of bookmarks to traverse * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML */function _walk_bookmarks($bookmarks, $args = '' ) {	$defaults = array(		'show_updated' => 0, 'show_description' => 0,		'show_images' => 1, 'show_name' => 0,		'before' => '<li>', 'after' => '</li>', 'between' => "\n",		'show_rating' => 0, 'link_before' => '', 'link_after' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = ''; // Blank string to start with.	foreach ( (array) $bookmarks as $bookmark ) {		if ( !isset($bookmark->recently_updated) )			$bookmark->recently_updated = false;		$output .= $before;		if ( $show_updated && $bookmark->recently_updated )			$output .= get_option('links_recently_updated_prepend');		$the_link = '#';		if ( !empty($bookmark->link_url) )			$the_link = esc_url($bookmark->link_url);		$desc = esc_attr(sanitize_bookmark_field('link_description', $bookmark->link_description, $bookmark->link_id, 'display'));		$name = esc_attr(sanitize_bookmark_field('link_name', $bookmark->link_name, $bookmark->link_id, 'display')); 		$title = $desc;		if ( $show_updated )			if ( '00' != substr($bookmark->link_updated_f, 0, 2) ) {				$title .= ' (';				$title .= sprintf(__('Last updated: %s'), date(get_option('links_updated_date_format'), $bookmark->link_updated_f + (get_option('gmt_offset') * 3600)));				$title .= ')';			}		$alt = ' alt="' . $name . ( $show_description ? ' ' . $title : '' ) . '"';		if ( '' != $title )			$title = ' title="' . $title . '"';		$rel = $bookmark->link_rel;		if ( '' != $rel )			$rel = ' rel="' . esc_attr($rel) . '"';		$target = $bookmark->link_target;		if ( '' != $target )			$target = ' target="' . $target . '"';		$output .= '<a href="' . $the_link . '"' . $rel . $title . $target . '>';		$output .= $link_before;		if ( $bookmark->link_image != null && $show_images ) {			if ( strpos($bookmark->link_image, 'http') === 0 )				$output .= "<img src=\"$bookmark->link_image\" $alt $title />";			else // If it's a relative path				$output .= "<img src=\"" . get_option('siteurl') . "$bookmark->link_image\" $alt $title />";			if ( $show_name )				$output .= " $name";		} else {			$output .= $name;		}		$output .= $link_after;		$output .= '</a>';		if ( $show_updated && $bookmark->recently_updated )			$output .= get_option('links_recently_updated_append');		if ( $show_description && '' != $desc )			$output .= $between . $desc;		if ( $show_rating )			$output .= $between . sanitize_bookmark_field('link_rating', $bookmark->link_rating, $bookmark->link_id, 'display');		$output .= "$after\n";	} // end while	return $output;}/** * Retrieve or echo all of the bookmarks. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'echo' - Default is 1 (integer). Whether to echo (default) or return the *		formatted bookmarks. * 'categorize' - Default is 1 (integer). Whether to show links listed by *		category (default) or show links in one column. * 'show_description' - Default is 0 (integer). Whether to show the description *		of the bookmark. * * These options define how the Category name will appear before the category * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will * display for only the 'title_li' string and only if 'title_li' is not empty. * 'title_li' - Default is 'Bookmarks' (translatable string). What to show *		before the links appear. * 'title_before' - Default is '<h2>' (string). The HTML or text to show before *		the 'title_li' string. * 'title_after' - Default is '</h2>' (string). The HTML or text to show after *		the 'title_li' string. * 'class' - Default is 'linkcat' (string). The CSS class to use for the *		'title_li'. * * 'category_before' - Default is '<li id="%id" class="%class">'. String must *		contain '%id' and '%class' to get * the id of the category and the 'class' argument. These are used for *		formatting in themes. * Argument will be displayed before the 'title_before' argument. * 'category_after' - Default is '</li>' (string). The HTML or text that will *		appear after the list of links. * * These are only used if 'categorize' is set to 1 or true. * 'category_orderby' - Default is 'name'. How to order the bookmark category *		based on term scheme. * 'category_order' - Default is 'ASC'. Set the order by either ASC (ascending) *		or DESC (descending). * * @see _walk_bookmarks() For other arguments that can be set in this function *		and passed to _walk_bookmarks(). * @see get_bookmarks() For other arguments that can be set in this function and *		passed to get_bookmarks(). * @link http://codex.wordpress.org/Template_Tags/wp_list_bookmarks * * @since 2.1.0 * @uses _list_bookmarks() Used to iterate over all of the bookmarks and return *		the html * @uses get_terms() Gets all of the categories that are for links. * * @param string|array $args Optional. Overwrite the defaults of the function * @return string|null Will only return if echo option is set to not echo. *		Default is not return anything. */function wp_list_bookmarks($args = '') {	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '', 'exclude_category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'echo' => 1,		'categorize' => 1, 'title_li' => __('Bookmarks'),		'title_before' => '<h2>', 'title_after' => '</h2>',		'category_orderby' => 'name', 'category_order' => 'ASC',		'class' => 'linkcat', 'category_before' => '<li id="%id" class="%class">',		'category_after' => '</li>'	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	if ( $categorize ) {		//Split the bookmarks into ul's for each category		$cats = get_terms('link_category', array('name__like' => $category_name, 'include' => $category, 'exclude' => $exclude_category, 'orderby' => $category_orderby, 'order' => $category_order, 'hierarchical' => 0));		foreach ( (array) $cats as $cat ) {			$params = array_merge($r, array('category'=>$cat->term_id));			$bookmarks = get_bookmarks($params);			if ( empty($bookmarks) )				continue;			$output .= str_replace(array('%id', '%class'), array("linkcat-$cat->term_id", $class), $category_before);			$catname = apply_filters( "link_category", $cat->name );			$output .= "$title_before$catname$title_after\n\t<ul class='xoxo blogroll'>\n";			$output .= _walk_bookmarks($bookmarks, $r);			$output .= "\n\t</ul>\n$category_after\n";		}	} else {		//output one single list using title_li for the title		$bookmarks = get_bookmarks($r);		if ( !empty($bookmarks) ) {			if ( !empty( $title_li ) ){				$output .= str_replace(array('%id', '%class'), array("linkcat-$category", $class), $category_before);				$output .= "$title_before$title_li$title_after\n\t<ul class='xoxo blogroll'>\n";				$output .= _walk_bookmarks($bookmarks, $r);				$output .= "\n\t</ul>\n$category_after\n";			} else {				$output .= _walk_bookmarks($bookmarks, $r);			}		}	}	$output = apply_filters( 'wp_list_bookmarks', $output );	if ( !$echo )		return $output;	echo $output;}?>
<?php/** * BackPress script procedural API. * * @package BackPress * @since r16 *//** * Prints script tags in document head. * * Called by admin-header.php and by wp_head hook. Since it is called by wp_head * on every page load, the function does not instantiate the WP_Scripts object * unless script names are explicitly passed. Does make use of already * instantiated $wp_scripts if present. Use provided wp_print_scripts hook to * register/enqueue new scripts. * * @since r16 * @see WP_Dependencies::print_scripts() */function wp_print_scripts( $handles = false ) {	do_action( 'wp_print_scripts' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_scripts = new WP_Scripts();	}	return $wp_scripts->do_items( $handles );}/** * Register new JavaScript file. * * @since r16 * @param string $handle Script name * @param string $src Script url * @param array $deps (optional) Array of script names on which this script depends * @param string|bool $ver (optional) Script version (used for cache busting), set to NULL to disable * @param bool (optional) Wether to enqueue the script before </head> or before </body> * @return null */function wp_register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->add( $handle, $src, $deps, $ver );	if ( $in_footer )		$wp_scripts->add_data( $handle, 'group', 1 );}/** * Localizes a script. * * Localizes only if script has already been added. * * @since r16 * @see WP_Scripts::localize() */function wp_localize_script( $handle, $object_name, $l10n ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return false;	return $wp_scripts->localize( $handle, $object_name, $l10n );}/** * Remove a registered script. * * @since r16 * @see WP_Scripts::remove() For parameter information. */function wp_deregister_script( $handle ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->remove( $handle );}/** * Enqueues script. * * Registers the script if src provided (does NOT overwrite) and enqueues. * * @since r16 * @see wp_register_script() For parameter information. */function wp_enqueue_script( $handle, $src = false, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_scripts->add( $_handle[0], $src, $deps, $ver );		if ( $in_footer )			$wp_scripts->add_data( $_handle[0], 'group', 1 );	}	$wp_scripts->enqueue( $handle );}/** * Check whether script has been added to WordPress Scripts. * * The values for list defaults to 'queue', which is the same as enqueue for * scripts. * * @since WP unknown; BP unknown * * @param string $handle Handle used to add script. * @param string $list Optional, defaults to 'queue'. Others values are 'registered', 'queue', 'done', 'to_do' * @return bool */function wp_script_is( $handle, $list = 'queue' ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$query = $wp_scripts->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * The Header for our theme. * * Displays all of the <head> section and everything up till <div id="main"> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><!DOCTYPE html><html <?php language_attributes(); ?>><head><meta charset="<?php bloginfo( 'charset' ); ?>" /><title><?php	/*	 * Print the <title> tag based on what is being viewed.	 * We filter the output of wp_title() a bit -- see	 * twentyten_filter_wp_title() in functions.php.	 */	wp_title( '|', true, 'right' );	?></title><link rel="profile" href="http://gmpg.org/xfn/11" /><link rel="stylesheet" type="text/css" media="all" href="<?php bloginfo( 'stylesheet_url' ); ?>" /><link rel="pingback" href="<?php bloginfo( 'pingback_url' ); ?>" /><?php	/* We add some JavaScript to pages with the comment form	 * to support sites with threaded comments (when in use).	 */	if ( is_singular() && get_option( 'thread_comments' ) )		wp_enqueue_script( 'comment-reply' );	/* Always have wp_head() just before the closing </head>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to add elements to <head> such	 * as styles, scripts, and meta tags.	 */	wp_head();?></head><body <?php body_class(); ?>><div id="wrapper" class="hfeed">	<div id="header">		<div id="masthead">			<div id="branding" role="banner">				<?php $heading_tag = ( is_home() || is_front_page() ) ? 'h1' : 'div'; ?>				<<?php echo $heading_tag; ?> id="site-title">					<span>						<a href="<?php echo home_url( '/' ); ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home"><?php bloginfo( 'name' ); ?></a>					</span>				</<?php echo $heading_tag; ?>>				<div id="site-description"><?php bloginfo( 'description' ); ?></div>				<?php					// Check if this is a post or page, if it has a thumbnail, and if it's a big one					if ( is_singular() &&							has_post_thumbnail( $post->ID ) &&							( /* $src, $width, $height */ $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'post-thumbnail' ) ) &&							$image[1] >= HEADER_IMAGE_WIDTH ) :						// Houston, we have a new header image!						echo get_the_post_thumbnail( $post->ID, 'post-thumbnail' );					else : ?>						<img src="<?php header_image(); ?>" width="<?php echo HEADER_IMAGE_WIDTH; ?>" height="<?php echo HEADER_IMAGE_HEIGHT; ?>" alt="" />					<?php endif; ?>			</div><!-- #branding -->			<div id="access" role="navigation">			  <?php /*  Allow screen readers / text browsers to skip the navigation menu and get right to the good stuff */ ?>				<div class="skip-link screen-reader-text"><a href="#content" title="<?php esc_attr_e( 'Skip to content', 'twentyten' ); ?>"><?php _e( 'Skip to content', 'twentyten' ); ?></a></div>				<?php /* Our navigation menu.  If one isn't filled out, wp_nav_menu falls back to wp_page_menu.  The menu assiged to the primary position is the one used.  If none is assigned, the menu with the lowest ID is used.  */ ?>				<?php wp_nav_menu( array( 'container_class' => 'menu-header', 'theme_location' => 'primary' ) ); ?>			</div><!-- #access -->		</div><!-- #masthead -->	</div><!-- #header -->	<div id="main">
<?php/** * Multisite sites administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_sites' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Sites' );$parent_file = 'ms-admin.php';if ( isset( $_GET['action'] ) && 'editblog' == $_GET['action'] ) {	add_contextual_help($current_screen,		'<p>' . __('This extensive list of options has five modules: Site Info, Site Options, allowing Site Themes for this given site, changing user roles and passwords for that site, adding a new user, and Miscellaneous Site Actions (upload size limits).') . '</p>' .		'<p>' . __('Note that some fields in Site Options are grayed out and say Serialized Data. These are stored values in the database which you cannot change from here.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_Edit_Site" target="_blank">Documentation on Editing Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} else {	add_contextual_help($current_screen,		'<p>' . __('Add New takes you farther down on this same page. You can search for a site by Name, ID number, or IP address. Screen Options allows you to choose how many sites to display on one page.') . '</p>' .		'<p>' . __('This is the main table of all sites on this network. Switch between list and excerpt views by using the icons above the right side of the table.') . '</p>' .		'<p>' . __('Hovering over each site reveals seven options (three for the primary site):') . '</p>' .		'<ul><li>' . __('an Edit link to a separate Edit Site screen.') . '</li>' .		'<li>' . __('Backend means the Dashboard for that site.') . '</li>' .		'<li>' . __('Deactivate, Archive, and Spam which lead to confirmation screens. These actions can be reversed later.') . '</li>' .		'<li>' . __('Delete which is a permanent action after the confirmations screen.') . '</li>' .		'<li>' . __('Visit to go to the frontend site live.') . '</li></ul>' .		'<p>' . __('The site ID is used internally, and is not shown on the front end of the site or to users/viewers.') . '</p>' .		'<p>' . __('Clicking on bold settings can re-sort this table. The upper right icons switch between list and excerpt views.') . '</p>' .		'<p>' . __("Clicking on Add Site, after filling out the address, title, and admin's email address, adds the site instantly to the network and this table. You may want to then click on the action link to edit options for that site.") . '</p>' .		'<p>' . __('If the admin email for the new site does not exist in the database, a new user will also be created.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_SubPanel" target="_blank">Documentation on Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );$id = isset( $_GET['id'] ) ? intval( $_GET['id'] ) : 0;if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'all_notspam':				_e( 'Sites removed from spam.' );			break;			case 'all_spam':				_e( 'Sites marked as spam.' );			break;			case 'all_delete':				_e( 'Sites deleted.' );			break;			case 'delete':				_e( 'Site deleted.' );			break;			case 'add-blog':				_e( 'Site added.' );			break;			case 'archive':				_e( 'Site archived.' );			break;			case 'unarchive':				_e( 'Site unarchived.' );			break;			case 'activate':				_e( 'Site activated.' );			break;			case 'deactivate':				_e( 'Site deactivated.' );			break;			case 'unspam':				_e( 'Site removed from spam.' );			break;			case 'spam':				_e( 'Site marked as spam.' );			break;			default:				_e( 'Settings saved.' );			break;		}		?>	</p></div>	<?php}$action = isset( $_GET['action'] ) ? $_GET['action'] : 'list';switch ( $action ) {	// Edit site	case 'editblog':		$blog_prefix = $wpdb->get_blog_prefix( $id );		$options = $wpdb->get_results( "SELECT * FROM {$blog_prefix}options WHERE option_name NOT LIKE '\_%' AND option_name NOT LIKE '%user_roles'" );		$details = get_blog_details( $id );		$editblog_roles = get_blog_option( $id, "{$blog_prefix}user_roles" );		$is_main_site = is_main_site( $id );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e( 'Edit Site' ); ?> - <a href="<?php echo esc_url( get_home_url( $id ) ); ?>"><?php echo esc_url( get_home_url( $id ) ); ?></a></h2>		<form method="post" action="ms-edit.php?action=updateblog">			<?php wp_nonce_field( 'editblog' ); ?>			<input type="hidden" name="id" value="<?php echo esc_attr( $id ) ?>" />			<div class="metabox-holder" style="width:49%;float:left;">				<div id="blogedit_bloginfo" class="postbox">				<h3 class="hndle"><span><?php _e( 'Site info (wp_blogs)' ); ?></span></h3>				<div class="inside">					<table class="form-table">						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Domain' ) ?></th>							<?php							$protocol = is_ssl() ? 'https://' : 'http://';							if ( $is_main_site ) { ?>							<td><code><?php echo $protocol; echo esc_attr( $details->domain ) ?></code></td>							<?php } else { ?>							<td><?php echo $protocol; ?><input name="blog[domain]" type="text" id="domain" value="<?php echo esc_attr( $details->domain ) ?>" size="33" /></td>							<?php } ?>						</tr>						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Path' ) ?></th>							<?php if ( $is_main_site ) { ?>							<td><code><?php echo esc_attr( $details->path ) ?></code></td>							<?php } else { ?>							<td><input name="blog[path]" type="text" id="path" value="<?php echo esc_attr( $details->path ) ?>" size="40" style='margin-bottom:5px;' />							<br /><input type="checkbox" style="width:20px;" name="update_home_url" value="update" <?php if ( get_blog_option( $id, 'siteurl' ) == untrailingslashit( get_blogaddress_by_id ($id ) ) || get_blog_option( $id, 'home' ) == untrailingslashit( get_blogaddress_by_id( $id ) ) ) echo 'checked="checked"'; ?> /> <?php _e( 'Update <code>siteurl</code> and <code>home</code> as well.' ); ?></td>							<?php } ?>						</tr>						<tr class="form-field">							<th scope="row"><?php _ex( 'Registered', 'site' ) ?></th>							<td><input name="blog[registered]" type="text" id="blog_registered" value="<?php echo esc_attr( $details->registered ) ?>" size="40" /></td>						</tr>						<tr class="form-field">							<th scope="row"><?php _e('Last Updated') ?></th>							<td><input name="blog[last_updated]" type="text" id="blog_last_updated" value="<?php echo esc_attr( $details->last_updated ) ?>" size="40" /></td>						</tr>						<?php						$radio_fields = array( 'public' => __( 'Public' ) );						if ( ! $is_main_site ) {							$radio_fields['archived'] = __( 'Archived' );							$radio_fields['spam']     = _x( 'Spam', 'site' );							$radio_fields['deleted']  = __( 'Deleted' );						}						$radio_fields['mature'] = __( 'Mature' );						foreach ( $radio_fields as $field_key => $field_label ) {						?>						<tr>							<th scope="row"><?php echo $field_label; ?></th>							<td>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_1" value="1"<?php checked( $details->$field_key, 1 ); ?> />								<label for="blog_<?php echo $field_key; ?>_1"><?php _e('Yes'); ?></label>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_0" value="0"<?php checked( $details->$field_key, 0 ); ?> />								<label for="blog_<?php echo $field_key; ?>_0"><?php _e('No'); ?></label>							</td>						</tr>						<?php } ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_blogoptions" class="postbox" >				<h3 class="hndle"><span><?php printf( __( 'Site options (%soptions)' ), $blog_prefix ); ?></span></h3>				<div class="inside">					<table class="form-table">						<?php						$editblog_default_role = 'subscriber';						foreach ( $options as $option ) {							if ( $option->option_name == 'default_role' )								$editblog_default_role = $option->option_value;							$disabled = false;							$class = 'all-options';							if ( is_serialized( $option->option_value ) ) {								if ( is_serialized_string( $option->option_value ) ) {									$option->option_value = esc_html( maybe_unserialize( $option->option_value ), 'single' );								} else {									$option->option_value = 'SERIALIZED DATA';									$disabled = true;									$class = 'all-options disabled';								}							}							if ( strpos( $option->option_value, "\n" ) !== false ) {							?>								<tr class="form-field">									<th scope="row"><?php echo ucwords( str_replace( "_", " ", $option->option_name ) ) ?></th>									<td><textarea class="<?php echo $class; ?>" rows="5" cols="40" name="option[<?php echo esc_attr( $option->option_name ) ?>]" id="<?php echo esc_attr( $option->option_name ) ?>"<?php disabled( $disabled ) ?>><?php wp_htmledit_pre( $option->option_value ) ?></textarea></td>								</tr>							<?php							} else {							?>								<tr class="form-field">									<th scope="row"><?php echo esc_html( ucwords( str_replace( "_", " ", $option->option_name ) ) ); ?></th>									<?php if ( $is_main_site && in_array( $option->option_name, array( 'siteurl', 'home' ) ) ) { ?>									<td><code><?php echo esc_html( $option->option_value ) ?></code></td>									<?php } else { ?>									<td><input class="<?php echo $class; ?>" name="option[<?php echo esc_attr( $option->option_name ) ?>]" type="text" id="<?php echo esc_attr( $option->option_name ) ?>" value="<?php echo esc_attr( $option->option_value ) ?>" size="40" <?php disabled( $disabled ) ?> /></td>									<?php } ?>								</tr>							<?php							}						} // End foreach						?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div class="metabox-holder" style="width:49%;float:right;">				<?php				// Site Themes				$themes = get_themes();				$blog_allowed_themes = wpmu_get_blog_allowedthemes( $id );				$allowed_themes = get_site_option( 'allowedthemes' );				if ( ! $allowed_themes )					$allowed_themes = array_keys( $themes );				$out = '';				foreach ( $themes as $key => $theme ) {					$theme_key = esc_html( $theme['Stylesheet'] );					if ( ! isset( $allowed_themes[$theme_key] ) ) {						$checked = isset( $blog_allowed_themes[ $theme_key ] ) ? 'checked="checked"' : '';						$out .= '<tr class="form-field form-required">								<th title="' . esc_attr( $theme["Description"] ).'" scope="row">' . esc_html( $key ) . '</th>								<td><label><input name="theme[' . esc_attr( $theme_key ) . ']" type="checkbox" style="width:20px;" value="on" '.$checked.'/> ' . __( 'Active' ) . '</label></td>							</tr>';					}				}				if ( $out != '' ) {				?>				<div id="blogedit_blogthemes" class="postbox">				<h3 class="hndle"><span><?php esc_html_e( 'Site Themes' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Activate the themename of an existing theme and hit "Update Options" to allow the theme for this site.' ) ?></p>					<table class="form-table">						<?php echo $out; ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div></div>				<?php }				// Site users				$blogusers = get_users_of_blog( $id );				if ( is_array( $blogusers ) ) {					echo '<div id="blogedit_blogusers" class="postbox"><h3 class="hndle"><span>' . __( 'Site Users' ) . '</span></h3><div class="inside">';					echo '<table class="form-table">';					echo "<tr><th>" . __( 'User' ) . "</th><th>" . __( 'Role' ) . "</th><th>" . __( 'Password' ) . "</th><th>" . __( 'Remove' ) . "</th></tr>";					reset( $blogusers );					foreach ( (array) $blogusers as $key => $val ) {						if ( isset( $val->meta_value ) && ! $val->meta_value )							continue;						$t = @unserialize( $val->meta_value );						if ( is_array( $t ) ) {							reset( $t );							$existing_role = key( $t );						}						echo '<tr><td><a href="user-edit.php?user_id=' . $val->user_id . '">' . $val->user_login . '</a></td>';						if ( $val->user_id != $current_user->data->ID ) {							?>							<td>								<select name="role[<?php echo $val->user_id ?>]" id="new_role_1"><?php									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										echo '<option ' . selected( $role, $existing_role, false ) . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>								</select>							</td>							<td>								<input type="text" name="user_password[<?php echo esc_attr( $val->user_id ) ?>]" />							</td>							<?php							echo '<td><input title="' . __( 'Click to remove user' ) . '" type="checkbox" name="blogusers[' . esc_attr( $val->user_id ) . ']" /></td>';						} else {							echo "<td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __( 'N/A' ) . "</strong></td>";						}						echo '</tr>';					}					echo "</table>";					echo '<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="' . esc_attr__( 'Update Options' ) . '" /></p>';					echo "</div></div>";				}				?>				<div id="blogedit_blogadduser" class="postbox">				<h3 class="hndle"><span><?php _e( 'Add a new user' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Enter the username of an existing user and hit &#8220;Update Options&#8221; to add the user.' ) ?></p>					<table class="form-table">							<tr>								<th scope="row"><?php _e( 'User&nbsp;Login:' ) ?></th>								<td><input type="text" name="newuser" id="newuser" /></td>							</tr>							<tr>								<th scope="row"><?php _e( 'Role:' ) ?></th>								<td>									<select name="new_role" id="new_role_0">									<?php									reset( $editblog_roles );									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										$selected = ( $role == $editblog_default_role ) ? 'selected="selected"' : '';										echo '<option ' . $selected . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>									</select>								</td>							</tr>						</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_miscoptions" class="postbox">				<h3 class="hndle"><span><?php _e( 'Misc Site Actions' ) ?></span></h3>				<div class="inside">					<table class="form-table">							<?php do_action( 'wpmueditblogaction', $id ); ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div style="clear:both;"></div>		</form>		</div>		<?php	break;	// List sites	case 'list':	default:		$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;		if ( empty($pagenum) )			$pagenum = 1;		$per_page = (int) get_user_option( 'ms_sites_per_page' );		if ( empty( $per_page ) || $per_page < 1 )			$per_page = 15;		$per_page = apply_filters( 'ms_sites_per_page', $per_page );		$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';		$like_s = esc_sql( like_escape( $s ) );		$query = "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' ";		if ( isset( $_GET['searchaction'] ) ) {			if ( 'name' == $_GET['searchaction'] ) {				$query .= " AND ( {$wpdb->blogs}.domain LIKE '%{$like_s}%' OR {$wpdb->blogs}.path LIKE '%{$like_s}%' ) ";			} elseif ( 'id' == $_GET['searchaction'] ) {				$query .= " AND {$wpdb->blogs}.blog_id = '{$like_s}' ";			} elseif ( 'ip' == $_GET['searchaction'] ) {				$query = "SELECT *					FROM {$wpdb->blogs}, {$wpdb->registration_log}					WHERE site_id = '{$wpdb->siteid}'					AND {$wpdb->blogs}.blog_id = {$wpdb->registration_log}.blog_id					AND {$wpdb->registration_log}.IP LIKE ('%{$like_s}%')";			}		}		$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';		if ( $order_by == 'registered' ) {			$query .= ' ORDER BY registered ';		} elseif ( $order_by == 'lastupdated' ) {			$query .= ' ORDER BY last_updated ';		} elseif ( $order_by == 'blogname' ) {			$query .= ' ORDER BY domain ';		} else {			$order_by = 'id';			$query .= " ORDER BY {$wpdb->blogs}.blog_id ";		}		$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? "DESC" : "ASC";		$query .= $order;		$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(blog_id)', $query ) );		$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page ) . ", " . intval( $per_page );		$blog_list = $wpdb->get_results( $query, ARRAY_A );		$num_pages = ceil($total / $per_page);		$page_links = paginate_links( array(			'base' => add_query_arg( 'paged', '%#%' ),			'format' => '',			'prev_text' => __( '&laquo;' ),			'next_text' => __( '&raquo;' ),			'total' => $num_pages,			'current' => $pagenum		));		if ( empty( $_GET['mode'] ) )			$mode = 'list';		else			$mode = esc_attr( $_GET['mode'] );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e('Sites') ?>		<a href="#form-add-site" class="button add-new-h2"><?php echo esc_html_x( 'Add New', 'sites' ); ?></a>		<?php		if ( isset( $_GET['s'] ) && $_GET['s'] )		printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );		?>		</h2>		<form action="ms-sites.php" method="get" id="ms-search">		<p class="search-box">		<input type="hidden" name="action" value="blogs" />		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" />		<input type="submit" class="button" value="<?php esc_attr_e( 'Search Site by' ) ?>" />		<select name="searchaction">			<option value="name" selected="selected"><?php _e( 'Name' ); ?></option>			<option value="id"><?php _e( 'ID' ); ?></option>			<option value="ip"><?php _e( 'IP address' ); ?></option>		</select>		</p>		</form>		<form id="form-site-list" action="ms-edit.php?action=allblogs" method="post">		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">		<div class="alignleft actions">			<select name="action">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />			<?php wp_nonce_field( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' ); ?>		</div>		<?php if ( $page_links ) { ?>		<div class="tablenav-pages">		<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',		number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),		number_format_i18n( min( $pagenum * $per_page, $total ) ),		number_format_i18n( $total ),		$page_links		); echo $page_links_text; ?>		</div>		<?php } ?>		<div class="view-switch">			<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>			<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>		</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$blogname_columns = ( is_subdomain_install() ) ? __( 'Domain' ) : __( 'Path' );		$sites_columns = array(			'id'           => __( 'ID' ),			'blogname'     => $blogname_columns,			'lastupdated'  => __( 'Last Updated'),			'registered'   => _x( 'Registered', 'site' ),			'users'        => __( 'Users' )		);		if ( has_filter( 'wpmublogsaction' ) )			$sites_columns['plugins'] = __( 'Actions' );		$sites_columns = apply_filters( 'wpmu_blogs_columns', $sites_columns );		?>		<table class="widefat">			<thead>				<tr>				<th class="manage-column column-cb check-column" id="cb" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($sites_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array('action', 'updated'), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( ( $column_id == 'users' || $column_id == 'plugins' ) ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url ?>				</tr>			</thead>			<tfoot>				<tr>				<th class="manage-column column-cb check-column" id="cb1" scope="col">					<input type="checkbox" />				</th>					<?php echo $col_url ?>				</tr>			</tfoot>			<tbody id="the-site-list" class="list:site">			<?php			$status_list = array( 'archived' => array( 'site-archived', __( 'Archived' ) ), 'spam' => array( 'site-spammed', _x( 'Spam', 'site' ) ), 'deleted' => array( 'site-deleted', __( 'Deleted' ) ), 'mature' => array( 'site-mature', __( 'Mature' ) ) );			if ( $blog_list ) {				$class = '';				foreach ( $blog_list as $blog ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					reset( $status_list );					$blog_states = array();					foreach ( $status_list as $status => $col ) {						if ( get_blog_status( $blog['blog_id'], $status ) == 1 ) {							$class = $col[0];							$blog_states[] = $col[1];						}					}					$blog_state = '';					if ( ! empty( $blog_states ) ) {						$state_count = count( $blog_states );						$i = 0;						$blog_state .= ' - ';						foreach ( $blog_states as $state ) {							++$i;							( $i == $state_count ) ? $sep = '' : $sep = ', ';							$blog_state .= "<span class='post-state'>$state$sep</span>";						}					}					echo "<tr class='$class'>";					$blogname = ( is_subdomain_install() ) ? str_replace( '.'.$current_site->domain, '', $blog['domain'] ) : $blog['path'];					foreach ( $sites_columns as $column_name=>$column_display_name ) {						switch ( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $blog['blog_id'] ?>" name="allblogs[]" value="<?php echo esc_attr( $blog['blog_id'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $blog['blog_id'] ?>								</th>							<?php							break;							case 'blogname': ?>								<td class="column-title">									<a href="<?php echo esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ); ?>" class="edit"><?php echo $blogname . $blog_state; ?></a>									<?php									if ( 'list' != $mode )										echo '<p>' . sprintf( _x( '%1$s &#8211; <em>%2$s</em>', '%1$s: site name. %2$s: site tagline.' ), get_blog_option( $blog['blog_id'], 'blogname' ), get_blog_option( $blog['blog_id'], 'blogdescription ' ) ) . '</p>';									// Preordered.									$actions = array(										'edit' => '', 'backend' => '',										'activate' => '', 'deactivate' => '',										'archive' => '', 'unarchive' => '',										'spam' => '', 'unspam' => '',										'delete' => '',										'visit' => '',									);									$actions['edit']	= '<span class="edit"><a href="' . esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ) . '">' . __( 'Edit' ) . '</a></span>';									$actions['backend']	= "<span class='backend'><a href='" . esc_url( get_admin_url($blog['blog_id']) ) . "' class='edit'>" . __( 'Backend' ) . '</a></span>';									if ( $current_site->blog_id != $blog['blog_id'] ) {										if ( get_blog_status( $blog['blog_id'], 'deleted' ) == '1' )											$actions['activate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=activateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to activate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Activate' ) . '</a></span>';										else											$actions['deactivate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deactivateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to deactivate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Deactivate' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'archived' ) == '1' )											$actions['unarchive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unarchiveblog&amp;id=' .  $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unarchive the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Unarchive' ) . '</a></span>';										else											$actions['archive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=archiveblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to archive the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Archive', 'verb; site' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'spam' ) == '1' )											$actions['unspam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unspamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unspam the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Not Spam', 'site' ) . '</a></span>';										else											$actions['spam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=spamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to mark the site %s as spam.' ), $blogname ) ) ) ) . '">' . _x( 'Spam', 'site' ) . '</a></span>';										$actions['delete']	= '<span class="delete"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deleteblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to delete the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Delete' ) . '</a></span>';									}									$actions['visit']	= "<span class='view'><a href='" . esc_url( get_home_url( $blog['blog_id'] ) ) . "' rel='permalink'>" . __( 'Visit' ) . '</a></span>';									$actions = array_filter( $actions );									if ( count( $actions ) ) : ?>									<div class="row-actions">										<?php echo implode( ' | ', $actions ); ?>									</div>									<?php endif; ?>								</td>							<?php							break;							case 'lastupdated': ?>								<td valign="top">									<?php									if ( 'list' == $mode )										$date = 'Y/m/d';									else										$date = 'Y/m/d \<\b\r \/\> g:i:s a';									echo ( $blog['last_updated'] == '0000-00-00 00:00:00' ) ? __( 'Never' ) : mysql2date( __( $date ), $blog['last_updated'] ); ?>								</td>							<?php							break;						case 'registered': ?>								<td valign="top">								<?php								if ( $blog['registered'] == '0000-00-00 00:00:00' )									echo '&#x2014;';								else									echo mysql2date( __( $date ), $blog['registered'] );								?>								</td>						<?php						break;							case 'users': ?>								<td valign="top">									<?php									$blogusers = get_users_of_blog( $blog['blog_id'] );									if ( is_array( $blogusers ) ) {										$blogusers_warning = '';										if ( count( $blogusers ) > 5 ) {											$blogusers = array_slice( $blogusers, 0, 5 );											$blogusers_warning = __( 'Only showing first 5 users.' ) . ' <a href="' . esc_url( get_admin_url( $blog['blog_id'], 'users.php' ) ) . '">' . __( 'More' ) . '</a>';										}										foreach ( $blogusers as $key => $val ) {											echo '<a href="' . esc_url( admin_url( 'user-edit.php?user_id=' . $val->user_id ) ) . '">' . esc_html( $val->user_login ) . '</a> ';											if ( 'list' != $mode )												echo '(' . $val->user_email . ')';											echo '<br />';										}										if ( $blogusers_warning != '' )											echo '<strong>' . $blogusers_warning . '</strong><br />';									}									?>								</td>							<?php							break;							case 'plugins': ?>								<?php if ( has_filter( 'wpmublogsaction' ) ) { ?>								<td valign="top">									<?php do_action( 'wpmublogsaction', $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;							default: ?>								<?php if ( has_filter( 'manage_blogs_custom_column' ) ) { ?>								<td valign="top">									<?php do_action( 'manage_blogs_custom_column', $column_name, $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;						}					}					?>					</tr>					<?php				}			} else { ?>				<tr>					<td colspan="<?php echo (int) count( $sites_columns ); ?>"><?php _e( 'No sites found.' ) ?></td>				</tr>			<?php			} // end if ($blogs)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">			<select name="action2">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div>		<div id="form-add-site" class="wrap">			<h3><?php _e( 'Add Site' ) ?></h3>			<form method="post" action="ms-edit.php?action=addblog">				<?php wp_nonce_field( 'add-blog', '_wpnonce_add-blog' ) ?>				<table class="form-table">					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Address' ) ?></th>						<td>						<?php if ( is_subdomain_install() ) { ?>							<input name="blog[domain]" type="text" class="regular-text" title="<?php _e( 'Domain' ) ?>"/>.<?php echo preg_replace( '|^www\.|', '', $current_site->domain );?>						<?php } else {							echo $current_site->domain . $current_site->path ?><input name="blog[domain]" class="regular-text" type="text" title="<?php _e( 'Domain' ) ?>"/>						<?php }						echo '<p>' . __( 'Only the characters a-z and 0-9 recommended.' ) . '</p>';						?>						</td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Title' ) ?></th>						<td><input name="blog[title]" type="text" class="regular-text" title="<?php _e( 'Title' ) ?>"/></td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Admin Email' ) ?></th>						<td><input name="blog[email]" type="text" class="regular-text" title="<?php _e( 'Email' ) ?>"/></td>					</tr>					<tr class="form-field">						<td colspan="2"><?php _e( 'A new user will be created if the above email address is not in the database.' ) ?><br /><?php _e( 'The username and password will be mailed to this email address.' ) ?></td>					</tr>				</table>				<p class="submit">					<input class="button" type="submit" name="go" value="<?php esc_attr_e( 'Add Site' ) ?>" /></p>			</form>		</div>		<?php	break;} // end switch( $action )include( './admin-footer.php' ); ?>
<?php/** * @package TinyMCE * @author Moxiecode * @copyright Copyright  2005-2006, Moxiecode Systems AB, All rights reserved. *//** @ignore */require_once('../../../wp-load.php');header('Content-Type: text/html; charset=' . get_bloginfo('charset'));?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php _e('Rich Editor Help') ?></title><script type="text/javascript" src="tiny_mce_popup.js?ver=3223"></script><?phpwp_admin_css( 'global', true );wp_admin_css( 'wp-admin', true );?><style type="text/css">	#wphead {		font-size: 80%;		border-top: 0;		color: #555;		background-color: #f1f1f1;	}	#wphead h1 {		font-size: 24px;		color: #555;		margin: 0;		padding: 10px;	}	#tabs {		padding: 15px 15px 3px;		background-color: #f1f1f1;		border-bottom: 1px solid #dfdfdf;	}	#tabs li {		display: inline;	}	#tabs a.current {		background-color: #fff;		border-color: #dfdfdf;		border-bottom-color: #fff;		color: #d54e21;	}	#tabs a {		color: #2583AD;		padding: 6px;		border-width: 1px 1px 0;		border-style: solid solid none;		border-color: #f1f1f1;		text-decoration: none;	}	#tabs a:hover {		color: #d54e21;	}	.wrap h2 {		border-bottom-color: #dfdfdf;		color: #555;		margin: 5px 0;		padding: 0;		font-size: 18px;	}	#user_info {		right: 5%;		top: 5px;	}	h3 {		font-size: 1.1em;		margin-top: 10px;		margin-bottom: 0px;	}	#flipper {		margin: 0;		padding: 5px 20px 10px;		background-color: #fff;		border-left: 1px solid #dfdfdf;		border-bottom: 1px solid #dfdfdf;	}	* html {        overflow-x: hidden;        overflow-y: scroll;    }	#flipper div p {		margin-top: 0.4em;		margin-bottom: 0.8em;		text-align: justify;	}	th {		text-align: center;	}	.top th {		text-decoration: underline;	}	.top .key {		text-align: center;		width: 5em;	}	.top .action {		text-align: left;	}	.align {		border-left: 3px double #333;		border-right: 3px double #333;	}	.keys {		margin-bottom: 15px;	}	.keys p {		display: inline-block;		margin: 0px;		padding: 0px;	}	.keys .left { text-align: left; }	.keys .center { text-align: center; }	.keys .right { text-align: right; }	td b {		font-family: "Times New Roman" Times serif;	}	#buttoncontainer {		text-align: center;		margin-bottom: 20px;	}	#buttoncontainer a, #buttoncontainer a:hover {		border-bottom: 0px;	}</style><?php if ( is_rtl() ) : ?><style type="text/css">	#wphead, #tabs {		padding-left: auto;		padding-right: 15px;	}	#flipper {		margin: 5px 0 3px 10px;	}	.keys .left, .top, .action { text-align: right; }	.keys .right { text-align: left; }	td b { font-family: Tahoma, "Times New Roman", Times, serif }</style><?php endif; ?><script type="text/javascript">	function d(id) { return document.getElementById(id); }	function flipTab(n) {		for (i=1;i<=4;i++) {			c = d('content'+i.toString());			t = d('tab'+i.toString());			if ( n == i ) {				c.className = '';				t.className = 'current';			} else {				c.className = 'hidden';				t.className = '';			}		}	}    function init() {        document.getElementById('version').innerHTML = tinymce.majorVersion + "." + tinymce.minorVersion;        document.getElementById('date').innerHTML = tinymce.releaseDate;    }    tinyMCEPopup.onInit.add(init);</script></head><body><div id="wphead"><h1><?php echo get_bloginfo('blogtitle'); ?></h1></div><ul id="tabs">	<li><a id="tab1" href="javascript:flipTab(1)" title="<?php _e('Basics of Rich Editing') ?>" accesskey="1" tabindex="1" class="current"><?php _e('Basics') ?></a></li>	<li><a id="tab2" href="javascript:flipTab(2)" title="<?php _e('Advanced use of the Rich Editor') ?>" accesskey="2" tabindex="2"><?php _e('Advanced') ?></a></li>	<li><a id="tab3" href="javascript:flipTab(3)" title="<?php _e('Hotkeys') ?>" accesskey="3" tabindex="3"><?php _e('Hotkeys') ?></a></li>	<li><a id="tab4" href="javascript:flipTab(4)" title="<?php _e('About the software') ?>" accesskey="4" tabindex="4"><?php _e('About') ?></a></li></ul><div id="flipper" class="wrap"><div id="content1">	<h2><?php _e('Rich Editing Basics') ?></h2>	<p><?php _e('<em>Rich editing</em>, also called WYSIWYG for What You See Is What You Get, means your text is formatted as you type. The rich editor creates HTML code behind the scenes while you concentrate on writing. Font styles, links and images all appear approximately as they will on the internet.') ?></p>	<p><?php _e('WordPress includes a rich HTML editor that works well in all major web browsers used today. However editing HTML is not the same as typing text. Each web page has two major components: the structure, which is the actual HTML code and is produced by the editor as you type, and the display, that is applied to it by the currently selected WordPress theme and is defined in style.css. WordPress is producing valid XHTML 1.0 which means that inserting multiple line breaks (BR tags) after a paragraph would not produce white space on the web page. The BR tags will be removed as invalid by the internal HTML correcting functions.') ?></p>	<p><?php _e('While using the editor, most basic keyboard shortcuts work like in any other text editor. For example: Shift+Enter inserts line break, Ctrl+C = copy, Ctrl+X = cut, Ctrl+Z = undo, Ctrl+Y = redo, Ctrl+A = select all, etc. (on Mac use the Command key instead of Ctrl). See the Hotkeys tab for all available keyboard shortcuts.') ?></p>    <p><?php _e('If you do not like the way the rich editor works, you may turn it off from Your Profile submenu, under Users in the admin menu.') ?></p></div><div id="content2" class="hidden">	<h2><?php _e('Advanced Rich Editing') ?></h2>	<h3><?php _e('Images and Attachments') ?></h3>	<p><?php _e('There is a button in the editor toolbar for inserting images that are already hosted somewhere on the internet. If you have a URL for an image, click this button and enter the URL in the box which appears.') ?></p>	<p><?php _e('If you need to upload an image or another media file from your computer, you can use the Media Library buttons above the editor. The media library will attempt to create a thumbnail-sized copy from each uploaded image. To insert your image into the post, first click on the thumbnail to reveal a menu of options. When you have selected the options you like, click "Send to Editor" and your image or file will appear in the post you are editing. If you are inserting a movie, there are additional options in the "Media" dialog that can be opened from the second toolbar row.') ?></p>	<h3><?php _e('HTML in the Rich Editor') ?></h3>	<p><?php _e('Any HTML entered directly into the rich editor will show up as text when the post is viewed. What you see is what you get. When you want to include HTML elements that cannot be generated with the toolbar buttons, you must enter it by hand in the HTML editor. Examples are tables and &lt;code&gt;. To do this, click the HTML tab and edit the code, then switch back to Visual mode. If the code is valid and understood by the editor, you should see it rendered immediately.') ?></p>	<h3><?php _e('Pasting in the Rich Editor') ?></h3>	<p><?php _e('When pasting content from another web page the results can be inconsistent and depend on your browser and on the web page you are pasting from. The editor tries to correct any invalid HTML code that was pasted, but for best results try using the HTML tab or one of the paste buttons that are on the second row. Alternatively try pasting paragraph by paragraph. In most browsers to select one paragraph at a time, triple-click on it.') ?></p>	<p><?php _e('Pasting content from another application, like Word or Excel, is best done with the Paste from Word button on the second row, or in HTML mode.') ?></p></div><div id="content3" class="hidden">	<h2><?php _e('Writing at Full Speed') ?></h2>    <p><?php _e('Rather than reaching for your mouse to click on the toolbar, use these access keys. Windows and Linux use Ctrl + letter. Macintosh uses Command + letter.') ?></p>	<table class="keys" width="100%" style="border: 0 none;">		<tr class="top"><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th></tr>		<tr><th>c</th><td><?php _e('Copy') ?></td><th>v</th><td><?php _e('Paste') ?></td></tr>		<tr><th>a</th><td><?php _e('Select all') ?></td><th>x</th><td><?php _e('Cut') ?></td></tr>		<tr><th>z</th><td><?php _e('Undo') ?></td><th>y</th><td><?php _e('Redo') ?></td></tr>		<script type="text/javascript">		if ( ! tinymce.isWebKit )			document.write("<tr><th>b</th><td><?php _e('Bold') ?></td><th>i</th><td><?php _e('Italic') ?></td></tr>"+			"<tr><th>u</th><td><?php _e('Underline') ?></td><th>1</th><td><?php _e('Heading 1') ?></td></tr>"+			"<tr><th>2</th><td><?php _e('Heading 2') ?></td><th>3</th><td><?php _e('Heading 3') ?></td></tr>"+			"<tr><th>4</th><td><?php _e('Heading 4') ?></td><th>5</th><td><?php _e('Heading 5') ?></td></tr>"+			"<tr><th>6</th><td><?php _e('Heading 6') ?></td><th>9</th><td><?php _e('Address') ?></td></tr>")		</script>	</table>	<p><?php _e('The following shortcuts use different access keys: Alt + Shift + letter.') ?></p>	<table class="keys" width="100%" style="border: 0 none;">		<tr class="top"><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th></tr>		<script type="text/javascript">		if ( tinymce.isWebKit )			document.write("<tr><th>b</th><td><?php _e('Bold') ?></td><th>i</th><td><?php _e('Italic') ?></td></tr>")		</script>		<tr><th>n</th><td><?php _e('Check Spelling') ?></td><th>l</th><td><?php _e('Align Left') ?></td></tr>		<tr><th>j</th><td><?php _e('Justify Text') ?></td><th>c</th><td><?php _e('Align Center') ?></td></tr>		<tr><th>d</th><td><span style="text-decoration: line-through;"><?php _e('Strikethrough') ?></span></td><th>r</th><td><?php _e('Align Right') ?></td></tr>		<tr><th>u</th><td><strong>&bull;</strong> <?php _e('List') ?></td><th>a</th><td><?php _e('Insert link') ?></td></tr>		<tr><th>o</th><td>1. <?php _e('List') ?></td><th>s</th><td><?php _e('Remove link') ?></td></tr>		<tr><th>q</th><td><?php _e('Quote') ?></td><th>m</th><td><?php _e('Insert Image') ?></td></tr>		<tr><th>g</th><td><?php _e('Full Screen') ?></td><th>t</th><td><?php _e('Insert More Tag') ?></td></tr>		<tr><th>p</th><td><?php _e('Insert Page Break tag') ?></td><th>h</th><td><?php _e('Help') ?></td></tr>		<tr><th>e</th><td colspan="3"><?php _e('Switch to HTML mode') ?></td></tr>	</table></div><div id="content4" class="hidden">	<h2><?php _e('About TinyMCE'); ?></h2>    <p><?php _e('Version:'); ?> <span id="version"></span> (<span id="date"></span>)</p>	<p><?php printf(__('TinyMCE is a platform independent web based Javascript HTML WYSIWYG editor control released as Open Source under %sLGPL</a>	by Moxiecode Systems AB. It has the ability to convert HTML TEXTAREA fields or other HTML elements to editor instances.'), '<a href="'.home_url('/wp-includes/js/tinymce/license.txt').'" target="_blank" title="'.__('GNU Library General Public Licence').'">') ?></p>	<p><?php _e('Copyright &copy; 2003-2007, <a href="http://www.moxiecode.com" target="_blank">Moxiecode Systems AB</a>, All rights reserved.') ?></p>	<p><?php _e('For more information about this software visit the <a href="http://tinymce.moxiecode.com" target="_blank">TinyMCE website</a>.') ?></p>	<div id="buttoncontainer">		<a href="http://www.moxiecode.com" target="_blank"><img src="themes/advanced/img/gotmoxie.png" alt="<?php _e('Got Moxie?') ?>" style="border: none;" /></a>		<a href="http://sourceforge.net/projects/tinymce/" target="_blank"><img src="themes/advanced/img/sflogo.png" alt="<?php _e('Hosted By Sourceforge') ?>" style="border: none;" /></a>		<a href="http://www.freshmeat.net/projects/tinymce" target="_blank"><img src="themes/advanced/img/fm.gif" alt="<?php _e('Also on freshmeat') ?>" style="border: none;" /></a>	</div></div></div><div class="mceActionPanel">	<div style="margin: 8px auto; text-align: center;padding-bottom: 10px;">		<input type="button" id="cancel" name="cancel" value="<?php _e('Close'); ?>" title="<?php _e('Close'); ?>" onclick="tinyMCEPopup.close();" />	</div></div></body></html>
<?php/** * Upload new media Administration Panel. * * @package WordPress * @subpackage Administration */$_GET['inline'] = 'true';/** Administration bootstrap */require_once('./admin.php');require_once('./media-upload.php');?>
<?php/** * @package Hello_Dolly * @version 1.5.1 *//*Plugin Name: Hello DollyPlugin URI: http://wordpress.org/#Description: This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong: Hello, Dolly. When activated you will randomly see a lyric from <cite>Hello, Dolly</cite> in the upper right of your admin screen on every page.Author: Matt MullenwegVersion: 1.5.1Author URI: http://ma.tt/*/function hello_dolly_get_lyric() {	/** These are the lyrics to Hello Dolly */	$lyrics = "Hello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenSo, take her wrap, fellasFind her an empty lap, fellasDolly'll never go away againHello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenGolly, gee, fellasFind her a vacant knee, fellasDolly'll never go awayDolly'll never go awayDolly'll never go away again";	// Here we split it into lines	$lyrics = explode("\n", $lyrics);	// And then randomly choose a line	return wptexturize( $lyrics[ mt_rand(0, count($lyrics) - 1) ] );}// This just echoes the chosen line, we'll position it laterfunction hello_dolly() {	$chosen = hello_dolly_get_lyric();	echo "<p id='dolly'>$chosen</p>";}// Now we set that function up to execute when the admin_footer action is calledadd_action('admin_footer', 'hello_dolly');// We need some CSS to position the paragraphfunction dolly_css() {	// This makes sure that the posinioning is also good for right-to-left languages	$x = ( is_rtl() ) ? 'left' : 'right';	echo "	<style type='text/css'>	#dolly {		position: absolute;		top: 4.5em;		margin: 0;		padding: 0;		$x: 215px;		font-size: 11px;	}	</style>	";}add_action('admin_head', 'dolly_css');?>
<?php/** * Link/Bookmark API * * @package WordPress * @subpackage Bookmark *//** * Retrieve Bookmark data based on ID * * @since 2.1.0 * @uses $wpdb Database Object * * @param int $bookmark_id * @param string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant * @param string $filter Optional, default is 'raw'. * @return array|object Type returned depends on $output value. */function get_bookmark($bookmark, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( empty($bookmark) ) {		if ( isset($GLOBALS['link']) )			$_bookmark = & $GLOBALS['link'];		else			$_bookmark = null;	} elseif ( is_object($bookmark) ) {		wp_cache_add($bookmark->link_id, $bookmark, 'bookmark');		$_bookmark = $bookmark;	} else {		if ( isset($GLOBALS['link']) && ($GLOBALS['link']->link_id == $bookmark) ) {			$_bookmark = & $GLOBALS['link'];		} elseif ( ! $_bookmark = wp_cache_get($bookmark, 'bookmark') ) {			$_bookmark = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->links WHERE link_id = %d LIMIT 1", $bookmark));			$_bookmark->link_category = array_unique( wp_get_object_terms($_bookmark->link_id, 'link_category', array('fields' => 'ids')) );			wp_cache_add($_bookmark->link_id, $_bookmark, 'bookmark');		}	}	$_bookmark = sanitize_bookmark($_bookmark, $filter);	if ( $output == OBJECT ) {		return $_bookmark;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($_bookmark);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($_bookmark));	} else {		return $_bookmark;	}}/** * Retrieve single bookmark data item or field. * * @since 2.3.0 * @uses get_bookmark() Gets bookmark object using $bookmark as ID * @uses sanitize_bookmark_field() Sanitizes Bookmark field based on $context. * * @param string $field The name of the data field to return * @param int $bookmark The bookmark ID to get field * @param string $context Optional. The context of how the field will be used. * @return string */function get_bookmark_field( $field, $bookmark, $context = 'display' ) {	$bookmark = (int) $bookmark;	$bookmark = get_bookmark( $bookmark );	if ( is_wp_error($bookmark) )		return $bookmark;	if ( !is_object($bookmark) )		return '';	if ( !isset($bookmark->$field) )		return '';	return sanitize_bookmark_field($field, $bookmark->$field, $bookmark->link_id, $context);}/** * Retrieves the list of bookmarks * * Attempts to retrieve from the cache first based on MD5 hash of arguments. If * that fails, then the query will be built from the arguments and executed. The * results will be stored to the cache. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'include' - Default is empty string (string). Include other categories *		separated by commas. * 'exclude' - Default is empty string (string). Exclude other categories *		separated by commas. * * @since 2.1.0 * @uses $wpdb Database Object * @link http://codex.wordpress.org/Template_Tags/get_bookmarks * * @param string|array $args List of arguments to overwrite the defaults * @return array List of bookmark row objects */function get_bookmarks($args = '') {	global $wpdb;	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'include' => '',		'exclude' => '', 'search' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$cache = array();	$key = md5( serialize( $r ) );	if ( $cache = wp_cache_get( 'get_bookmarks', 'bookmark' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) )			return apply_filters('get_bookmarks', $cache[ $key ], $r );	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';  //ignore exclude, category, and category_name params if using include		$category = '';		$category_name = '';		$inclinks = preg_split('/[\s,]+/',$include);		if ( count($inclinks) ) {			foreach ( $inclinks as $inclink ) {				if (empty($inclusions))					$inclusions = ' AND ( link_id = ' . intval($inclink) . ' ';				else					$inclusions .= ' OR link_id = ' . intval($inclink) . ' ';			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$exlinks = preg_split('/[\s,]+/',$exclude);		if ( count($exlinks) ) {			foreach ( $exlinks as $exlink ) {				if (empty($exclusions))					$exclusions = ' AND ( link_id <> ' . intval($exlink) . ' ';				else					$exclusions .= ' AND link_id <> ' . intval($exlink) . ' ';			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	if ( !empty($category_name) ) {		if ( $category = get_term_by('name', $category_name, 'link_category') ) {			$category = $category->term_id;		} else {			$cache[ $key ] = array();			wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );			return apply_filters( 'get_bookmarks', array(), $r );		}	}	if ( ! empty($search) ) {		$search = like_escape($search);		$search = " AND ( (link_url LIKE '%$search%') OR (link_name LIKE '%$search%') OR (link_description LIKE '%$search%') ) ";	}	$category_query = '';	$join = '';	if ( !empty($category) ) {		$incategories = preg_split('/[\s,]+/',$category);		if ( count($incategories) ) {			foreach ( $incategories as $incat ) {				if (empty($category_query))					$category_query = ' AND ( tt.term_id = ' . intval($incat) . ' ';				else					$category_query .= ' OR tt.term_id = ' . intval($incat) . ' ';			}		}	}	if (!empty($category_query)) {		$category_query .= ") AND taxonomy = 'link_category'";		$join = " INNER JOIN $wpdb->term_relationships AS tr ON ($wpdb->links.link_id = tr.object_id) INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_taxonomy_id = tr.term_taxonomy_id";	}	if ( $show_updated && get_option('links_recently_updated_time') ) {		$recently_updated_test = ", IF (DATE_ADD(link_updated, INTERVAL " . get_option('links_recently_updated_time') . " MINUTE) >= NOW(), 1,0) as recently_updated ";	} else {		$recently_updated_test = '';	}	$get_updated = ( $show_updated ) ? ', UNIX_TIMESTAMP(link_updated) AS link_updated_f ' : '';	$orderby = strtolower($orderby);	$length = '';	switch ($orderby) {		case 'length':			$length = ", CHAR_LENGTH(link_name) AS length";			break;		case 'rand':			$orderby = 'rand()';			break;		default:			$orderparams = array();			foreach ( explode(',', $orderby) as $ordparam )				$orderparams[] = 'link_' . trim($ordparam);			$orderby = implode(',', $orderparams);	}	if ( 'link_id' == $orderby )		$orderby = "$wpdb->links.link_id";	$visible = '';	if ( $hide_invisible )		$visible = "AND link_visible = 'Y'";	$query = "SELECT * $length $recently_updated_test $get_updated FROM $wpdb->links $join WHERE 1=1 $visible $category_query";	$query .= " $exclusions $inclusions $search";	$query .= " ORDER BY $orderby $order";	if ($limit != -1)		$query .= " LIMIT $limit";	$results = $wpdb->get_results($query);	$cache[ $key ] = $results;	wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );	return apply_filters('get_bookmarks', $results, $r);}/** * Sanitizes all bookmark fields * * @since 2.3.0 * * @param object|array $bookmark Bookmark row * @param string $context Optional, default is 'display'. How to filter the *		fields * @return object|array Same type as $bookmark but with fields sanitized. */function sanitize_bookmark($bookmark, $context = 'display') {	$fields = array('link_id', 'link_url', 'link_name', 'link_image', 'link_target', 'link_category',		'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_updated',		'link_rel', 'link_notes', 'link_rss', );	if ( is_object($bookmark) ) {		$do_object = true;		$link_id = $bookmark->link_id;	} else {		$do_object = false;		$link_id = $bookmark['link_id'];	}	foreach ( $fields as $field ) {		if ( $do_object ) {			if ( isset($bookmark->$field) )				$bookmark->$field = sanitize_bookmark_field($field, $bookmark->$field, $link_id, $context);		} else {			if ( isset($bookmark[$field]) )				$bookmark[$field] = sanitize_bookmark_field($field, $bookmark[$field], $link_id, $context);		}	}	return $bookmark;}/** * Sanitizes a bookmark field * * Sanitizes the bookmark fields based on what the field name is. If the field * has a strict value set, then it will be tested for that, else a more generic * filtering is applied. After the more strict filter is applied, if the * $context is 'raw' then the value is immediately return. * * Hooks exist for the more generic cases. With the 'edit' context, the * 'edit_$field' filter will be called and passed the $value and $bookmark_id * respectively. With the 'db' context, the 'pre_$field' filter is called and * passed the value. The 'display' context is the final context and has the * $field has the filter name and is passed the $value, $bookmark_id, and * $context respectively. * * @since 2.3.0 * * @param string $field The bookmark field * @param mixed $value The bookmark field value * @param int $bookmark_id Bookmark ID * @param string $context How to filter the field value. Either 'raw', 'edit', *		'attribute', 'js', 'db', or 'display' * @return mixed The filtered value */function sanitize_bookmark_field($field, $value, $bookmark_id, $context) {	switch ( $field ) {	case 'link_id' : // ints	case 'link_rating' :		$value = (int) $value;		break;	case 'link_category' : // array( ints )		$value = array_map('absint', (array) $value);		// We return here so that the categories aren't filtered.		// The 'link_category' filter is for the name of a link category, not an array of a link's link categories		return $value;		break;	case 'link_visible' : // bool stored as Y|N		$value = preg_replace('/[^YNyn]/', '', $value);		break;	case 'link_target' : // "enum"		$targets = array('_top', '_blank');		if ( ! in_array($value, $targets) )			$value = '';		break;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$format_to_edit = array('link_notes');		$value = apply_filters("edit_$field", $value, $bookmark_id);		if ( in_array($field, $format_to_edit) ) {			$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		$value = apply_filters("pre_$field", $value);	} else {		// Use display filters by default.		$value = apply_filters($field, $value, $bookmark_id, $context);		if ( 'attribute' == $context )			$value = esc_attr($value);		else if ( 'js' == $context )			$value = esc_js($value);	}	return $value;}/** * Deletes bookmark cache * * @since 2.7.0 * @uses wp_cache_delete() Deletes the contents of 'get_bookmarks' */function clean_bookmark_cache($bookmark_id) {	wp_cache_delete( $bookmark_id, 'bookmark' );	wp_cache_delete( 'get_bookmarks', 'bookmark' );}?>
<?php/** * Multisite delete site panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );// @todo Create a delete blog cap.if ( ! current_user_can( 'manage_options' ) )	wp_die(__( 'You do not have sufficient permissions to delete this site.'));if ( isset( $_GET['h'] ) && $_GET['h'] != '' && get_option( 'delete_blog_hash' ) != false ) {	if ( get_option( 'delete_blog_hash' ) == $_GET['h'] ) {		wpmu_delete_blog( $wpdb->blogid );		wp_die( sprintf( __( 'Thank you for using %s, your site has been deleted. Happy trails to you until we meet again.' ), $current_site->site_name ) );	} else {		wp_die( __( "I'm sorry, the link you clicked is stale. Please select another option." ) );	}}$title = __( 'Delete Site' );$parent_file = 'tools.php';require_once( './admin-header.php' );echo '<div class="wrap">';screen_icon();echo '<h2>' . esc_html( $title ) . '</h2>';if ( isset( $_POST['action'] ) && $_POST['action'] == 'deleteblog' && isset( $_POST['confirmdelete'] ) && $_POST['confirmdelete'] == '1' ) {	$hash = wp_generate_password( 20, false );	update_option( 'delete_blog_hash', $hash );	$url_delete = esc_url( admin_url( 'ms-delete-site.php?h=' . $hash ) );	$content = apply_filters( 'delete_site_email_content', __( "Dear User,You recently clicked the 'Delete Site' link on your site and filled in aform on that page.If you really want to delete your site, click the link below. You will notbe asked to confirm again so only click this link if you are absolutely certain:###URL_DELETE###If you delete your site, please consider opening a new site heresome time in the future! (But remember your current site and usernameare gone forever.)Thanks for using the site,Webmaster###SITE_NAME###" ) );	$content = str_replace( '###URL_DELETE###', $url_delete, $content );	$content = str_replace( '###SITE_NAME###', $current_site->site_name, $content );	wp_mail( get_option( 'admin_email' ), "[ " . get_option( 'blogname' ) . " ] ".__( 'Delete My Site' ), $content );	?>	<p><?php _e( 'Thank you. Please check your email for a link to confirm your action. Your site will not be deleted until this link is clicked. ') ?></p><?php } else {	?>	<p><?php printf( __( 'If you do not want to use your %s site any more, you can delete it using the form below. When you click <strong>Delete My Site Permanently</strong> you will be sent an email with a link in it. Click on this link to delete your site.'), $current_site->site_name); ?></p>	<p><?php _e( 'Remember, once deleted your site cannot be restored.' ) ?></p>	<form method="post" name="deletedirect">		<input type="hidden" name="action" value="deleteblog" />		<p><input id="confirmdelete" type="checkbox" name="confirmdelete" value="1" /> <label for="confirmdelete"><strong><?php printf( __( "I'm sure I want to permanently disable my site, and I am aware I can never get it back or use %s again." ), is_subdomain_install() ? $current_blog->domain : $current_blog->domain . $current_blog->path ); ?></strong></label></p>		<p class="submit"><input type="submit" value="<?php esc_attr_e( 'Delete My Site Permanently' ) ?>" /></p>	</form>	<?php}echo '</div>';include( './admin-footer.php' );?>
<?php/** * Navigation Menu template functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Create HTML list of nav menu items. * * @package WordPress * @since 3.0.0 * @uses Walker */class Walker_Nav_Menu extends Walker {	/**	 * @see Walker::$tree_type	 * @since 3.0.0	 * @var string	 */	var $tree_type = array( 'post_type', 'taxonomy', 'custom' );	/**	 * @see Walker::$db_fields	 * @since 3.0.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array( 'parent' => 'menu_item_parent', 'id' => 'db_id' );	/**	 * @see Walker::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class=\"sub-menu\">\n";	}	/**	 * @see Walker::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $wp_query;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$class_names = $value = '';		$classes = empty( $item->classes ) ? array() : (array) $item->classes;		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item ) );		$class_names = ' class="' . esc_attr( $class_names ) . '"';		$output .= $indent . '<li id="menu-item-'. $item->ID . '"' . $value . $class_names .'>';		$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : '';		$attributes .= ! empty( $item->target )     ? ' target="' . esc_attr( $item->target     ) .'"' : '';		$attributes .= ! empty( $item->xfn )        ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';		$attributes .= ! empty( $item->url )        ? ' href="'   . esc_attr( $item->url        ) .'"' : '';		$item_output = $args->before;		$item_output .= '<a'. $attributes .'>';		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;		$item_output .= '</a>';		$item_output .= $args->after;		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );	}	/**	 * @see Walker::end_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $item, $depth) {		$output .= "</li>\n";	}}/** * Displays a navigation menu. * * Optional $args contents: * * menu - The menu that is desired.  Accepts (matching in order) id, slug, name. Defaults to blank. * menu_class - CSS class to use for the ul element which forms the menu. Defaults to 'menu'. * menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented. * container - Whether to wrap the ul, and what to wrap it with. Defaults to 'div'. * container_class - the class that is applied to the container. Defaults to 'menu-{menu slug}-container'. * container_id - The ID that is applied to the container. Defaults to blank. * fallback_cb - If the menu doesn't exists, a callback function will fire. Defaults to 'wp_page_menu'. * before - Text before the link text. * after - Text after the link text. * link_before - Text before the link. * link_after - Text after the link. * echo - Whether to echo the menu or return it. Defaults to echo. * depth - how many levels of the hierarchy are to be included.  0 means all.  Defaults to 0. * walker - allows a custom walker to be specified. * theme_location - the location in the theme to be used.  Must be registered with register_nav_menu() in order to be selectable by the user. * * @since 3.0.0 * * @param array $args Arguments */function wp_nav_menu( $args = array() ) {	static $menu_id_slugs = array();	$defaults = array( 'menu' => '', 'container' => 'div', 'container_class' => '', 'container_id' => '', 'menu_class' => 'menu', 'menu_id' => '',	'echo' => true, 'fallback_cb' => 'wp_page_menu', 'before' => '', 'after' => '', 'link_before' => '', 'link_after' => '',	'depth' => 0, 'walker' => '', 'theme_location' => '' );	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_nav_menu_args', $args );	$args = (object) $args;	// Get the nav menu based on the requested menu	$menu = wp_get_nav_menu_object( $args->menu );	// Get the nav menu based on the theme_location	if ( ! $menu && $args->theme_location && ( $locations = get_nav_menu_locations() ) && isset( $locations[ $args->theme_location ] ) )		$menu = wp_get_nav_menu_object( $locations[ $args->theme_location ] );	// get the first menu that has items if we still can't find a menu	if ( ! $menu && !$args->theme_location ) {		$menus = wp_get_nav_menus();		foreach ( $menus as $menu_maybe ) {			if ( $menu_items = wp_get_nav_menu_items($menu_maybe->term_id) ) {				$menu = $menu_maybe;				break;			}		}	}	// If the menu exists, get its items.	if ( $menu && ! is_wp_error($menu) && !isset($menu_items) )		$menu_items = wp_get_nav_menu_items( $menu->term_id );	// If no menu was found or if the menu has no items and no location was requested, call the fallback_cb if it exists	if ( ( !$menu || is_wp_error($menu) || ( isset($menu_items) && empty($menu_items) && !$args->theme_location ) )		&& ( function_exists($args->fallback_cb) || is_callable( $args->fallback_cb ) ) )			return call_user_func( $args->fallback_cb, (array) $args );	// If no fallback function was specified and the menu doesn't exists, bail.	if ( !$menu || is_wp_error($menu) )		return false;	$nav_menu = $items = '';	$show_container = false;	if ( $args->container ) {		$allowed_tags = apply_filters( 'wp_nav_menu_container_allowedtags', array( 'div', 'nav' ) );		if ( in_array( $args->container, $allowed_tags ) ) {			$show_container = true;			$class = $args->container_class ? ' class="' . esc_attr( $args->container_class ) . '"' : ' class="menu-'. $menu->slug .'-container"';			$id = $args->container_id ? ' id="' . esc_attr( $args->container_id ) . '"' : '';			$nav_menu .= '<'. $args->container . $id . $class . '>';		}	}	// Set up the $menu_item variables	_wp_menu_item_classes_by_context( $menu_items );	$sorted_menu_items = array();	foreach ( (array) $menu_items as $key => $menu_item )		$sorted_menu_items[$menu_item->menu_order] = $menu_item;	unset($menu_items);	$items .= walk_nav_menu_tree( $sorted_menu_items, $args->depth, $args );	unset($sorted_menu_items);	// Attributes	if ( ! empty( $args->menu_id ) ) {		$slug = $args->menu_id;	} else {		$slug = 'menu-' . $menu->slug;		while ( in_array( $slug, $menu_id_slugs ) ) {			if ( preg_match( '#-(\d+)$#', $slug, $matches ) )				$slug = preg_replace('#-(\d+)$#', '-' . ++$matches[1], $slug);			else				$slug = $slug . '-1';		}	}	$menu_id_slugs[] = $slug;	$attributes = ' id="' . $slug . '"';	$attributes .= $args->menu_class ? ' class="'. $args->menu_class .'"' : '';	$nav_menu .= '<ul'. $attributes .'>';	// Allow plugins to hook into the menu to add their own <li>'s	$items = apply_filters( 'wp_nav_menu_items', $items, $args );	$items = apply_filters( "wp_nav_menu_{$menu->slug}_items", $items, $args );	$nav_menu .= $items;	unset($items);	$nav_menu .= '</ul>';	if ( $show_container )		$nav_menu .= '</' . $args->container . '>';	$nav_menu = apply_filters( 'wp_nav_menu', $nav_menu, $args );	if ( $args->echo )		echo $nav_menu;	else		return $nav_menu;}/** * Add the class property classes for the current context, if applicable. * * @access private * @since 3.0 * * @param array $menu_items The current menu item objects to which to add the class property information. */function _wp_menu_item_classes_by_context( &$menu_items ) {	global $wp_query;	$queried_object = $wp_query->get_queried_object();	$queried_object_id = (int) $wp_query->queried_object_id;	$active_object = '';	$active_ancestor_item_ids = array();	$active_parent_item_ids = array();	$active_parent_object_ids = array();	$possible_taxonomy_ancestors = array();	$possible_object_parents = array();	$home_page_id = (int) get_option( 'page_for_posts' );	if ( $wp_query->is_singular && ! empty( $queried_object->post_type ) && ! is_post_type_hierarchical( $queried_object->post_type ) ) {		foreach ( (array) get_object_taxonomies( $queried_object->post_type ) as $taxonomy ) {			if ( is_taxonomy_hierarchical( $taxonomy ) ) {				$term_hierarchy = _get_term_hierarchy( $taxonomy );				$terms = wp_get_object_terms( $queried_object_id, $taxonomy, array( 'fields' => 'ids' ) );				if ( is_array( $terms ) ) {					$possible_object_parents = array_merge( $possible_object_parents, $terms );					$term_to_ancestor = array();					foreach ( (array) $term_hierarchy as $anc => $descs ) {						foreach ( (array) $descs as $desc )							$term_to_ancestor[ $desc ] = $anc;					}					foreach ( $terms as $desc ) {						do {							$possible_taxonomy_ancestors[ $taxonomy ][] = $desc;							if ( isset( $term_to_ancestor[ $desc ] ) ) {								$_desc = $term_to_ancestor[ $desc ];								unset( $term_to_ancestor[ $desc ] );								$desc = $_desc;							} else {								$desc = 0;							}						} while ( ! empty( $desc ) );					}				}			}		}	} elseif ( ! empty( $queried_object->post_type ) && is_post_type_hierarchical( $queried_object->post_type ) ) {		_get_post_ancestors( $queried_object );	} elseif ( ! empty( $queried_object->taxonomy ) && is_taxonomy_hierarchical( $queried_object->taxonomy ) ) {		$term_hierarchy = _get_term_hierarchy( $queried_object->taxonomy );		$term_to_ancestor = array();		foreach ( (array) $term_hierarchy as $anc => $descs ) {			foreach ( (array) $descs as $desc )				$term_to_ancestor[ $desc ] = $anc;		}		$desc = $queried_object->term_id;		do {			$possible_taxonomy_ancestors[ $queried_object->taxonomy ][] = $desc;			if ( isset( $term_to_ancestor[ $desc ] ) ) {				$_desc = $term_to_ancestor[ $desc ];				unset( $term_to_ancestor[ $desc ] );				$desc = $_desc;			} else {				$desc = 0;			}		} while ( ! empty( $desc ) );	}	$possible_object_parents = array_filter( $possible_object_parents );	foreach ( (array) $menu_items as $key => $menu_item ) {		$classes = (array) $menu_item->classes;		$classes[] = 'menu-item';		$classes[] = 'menu-item-type-' . $menu_item->type;		// if the menu item corresponds to a taxonomy term for the currently-queried non-hierarchical post object		if ( $wp_query->is_singular && 'taxonomy' == $menu_item->type && in_array( $menu_item->object_id, $possible_object_parents ) ) {			$active_parent_object_ids[] = (int) $menu_item->object_id;			$active_parent_item_ids[] = (int) $menu_item->db_id;			$active_object = $queried_object->post_type;		// if the menu item corresponds to the currently-queried post or taxonomy object		} elseif (			$menu_item->object_id == $queried_object_id &&			(				( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && $wp_query->is_home && $home_page_id == $menu_item->object_id ) ||				( 'post_type' == $menu_item->type && $wp_query->is_singular ) ||				( 'taxonomy' == $menu_item->type && ( $wp_query->is_category || $wp_query->is_tag || $wp_query->is_tax ) )			)		) {			$classes[] = 'current-menu-item';			$_anc_id = (int) $menu_item->db_id;			while(				( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&				! in_array( $_anc_id, $active_ancestor_item_ids )			) {				$active_ancestor_item_ids[] = $_anc_id;			}			if ( 'post_type' == $menu_item->type && 'page' == $menu_item->object ) {				// Back compat classes for pages to match wp_page_menu()				$classes[] = 'page_item';				$classes[] = 'page-item-' . $menu_item->object_id;				$classes[] = 'current_page_item';			}			$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;			$active_parent_object_ids[] = (int) $menu_item->post_parent;			$active_object = $menu_item->object;		// if the menu item corresponds to the currently-requested URL		} elseif ( 'custom' == $menu_item->object ) {			$current_url = ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];			$item_url = strpos( $menu_item->url, '#' ) ? substr( $menu_item->url, 0, strpos( $menu_item->url, '#' ) ) : $menu_item->url;			if ( $item_url == $current_url ) {				$classes[] = 'current-menu-item';				$_anc_id = (int) $menu_item->db_id;				while(					( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&					! in_array( $_anc_id, $active_ancestor_item_ids )				) {					$active_ancestor_item_ids[] = $_anc_id;				}				if ( untrailingslashit($current_url) == home_url() ) {					$classes[] = 'menu-item-home';					// Back compat for home limk to match wp_page_menu()					$classes[] = 'current_page_item';				}				$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;				$active_parent_object_ids[] = (int) $menu_item->post_parent;				$active_object = $menu_item->object;			}		}		// back-compat with wp_page_menu: add "current_page_parent" to static home page link for any non-page query		if ( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && empty( $wp_query->is_page ) && $home_page_id == $menu_item->object_id )			$classes[] = 'current_page_parent';		$menu_items[$key]->classes = array_unique( $classes );	}	$active_ancestor_item_ids = array_filter( array_unique( $active_ancestor_item_ids ) );	$active_parent_item_ids = array_filter( array_unique( $active_parent_item_ids ) );	$active_parent_object_ids = array_filter( array_unique( $active_parent_object_ids ) );	// set parent's class	foreach ( (array) $menu_items as $key => $parent_item ) {		$classes = (array) $parent_item->classes;		if (			isset( $parent_item->type ) &&			(				// ancestral post object				(					'post_type' == $parent_item->type &&					! empty( $queried_object->post_type ) &&					is_post_type_hierarchical( $queried_object->post_type ) &&					in_array( $parent_item->object_id, $queried_object->ancestors )				) ||				// ancestral term				(					'taxonomy' == $parent_item->type &&					isset( $possible_taxonomy_ancestors[ $parent_item->object ] ) &&					in_array( $parent_item->object_id, $possible_taxonomy_ancestors[ $parent_item->object ] )				)			)		) {			$classes[] = empty( $queried_object->taxonomy ) ? 'current-' . $queried_object->post_type . '-ancestor' : 'current-' . $queried_object->taxonomy . '-ancestor';		}		if ( in_array(  intval( $parent_item->db_id ), $active_ancestor_item_ids ) ) {			$classes[] = 'current-menu-ancestor';		}		if ( in_array( $parent_item->db_id, $active_parent_item_ids ) )			$classes[] = 'current-menu-parent';		if ( in_array( $parent_item->object_id, $active_parent_object_ids ) )			$classes[] = 'current-' . $active_object . '-parent';		if ( 'post_type' == $parent_item->type && 'page' == $parent_item->object ) {			// Back compat classes for pages to match wp_page_menu()			if ( in_array('current-menu-parent', $classes) )				$classes[] = 'current_page_parent';			if ( in_array('current-menu-ancestor', $classes) )				$classes[] = 'current_page_ancestor';		}		$menu_items[$key]->classes = array_unique( $classes );	}}/** * Retrieve the HTML list content for nav menu items. * * @uses Walker_Nav_Menu to create HTML list content. * @since 2.1.0 * @see Walker::walk() for parameters and return description. */function walk_nav_menu_tree( $items, $depth, $r ) {	$walker = ( empty($r->walker) ) ? new Walker_Nav_Menu : $r->walker;	$args = array( $items, $depth, $r );	return call_user_func_array( array(&$walker, 'walk'), $args );}?>
<?php/** * HTML/XHTML filter that only allows some elements and attributes * * Added wp_ prefix to avoid conflicts with existing kses users * * @version 0.2.2 * @copyright (C) 2002, 2003, 2005 * @author Ulf Harnhammar <metaur@users.sourceforge.net> * * @package External * @subpackage KSES * * @internal * *** CONTACT INFORMATION *** * E-mail:      metaur at users dot sourceforge dot net * Web page:    http://sourceforge.net/projects/kses * Paper mail:  Ulf Harnhammar *              Ymergatan 17 C *              753 25  Uppsala *              SWEDEN * * [kses strips evil scripts!] *//** * You can override this in a plugin. * * @since 1.2.0 */if ( ! defined( 'CUSTOM_TAGS' ) )	define( 'CUSTOM_TAGS', false );if ( ! CUSTOM_TAGS ) {	/**	 * Kses global for default allowable HTML tags.	 *	 * Can be override by using CUSTOM_TAGS constant.	 *	 * @global array $allowedposttags	 * @since 2.0.0	 */	$allowedposttags = array(		'address' => array(),		'a' => array(			'class' => array (),			'href' => array (),			'id' => array (),			'title' => array (),			'rel' => array (),			'rev' => array (),			'name' => array (),			'target' => array()),		'abbr' => array(			'class' => array (),			'title' => array ()),		'acronym' => array(			'title' => array ()),		'article' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'aside' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'b' => array(),		'big' => array(),		'blockquote' => array(			'id' => array (),			'cite' => array (),			'class' => array(),			'lang' => array(),			'xml:lang' => array()),		'br' => array (			'class' => array ()),		'button' => array(			'disabled' => array (),			'name' => array (),			'type' => array (),			'value' => array ()),		'caption' => array(			'align' => array (),			'class' => array ()),		'cite' => array (			'class' => array(),			'dir' => array(),			'lang' => array(),			'title' => array ()),		'code' => array (			'style' => array()),		'col' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'span' => array (),			'dir' => array(),			'style' => array (),			'valign' => array (),			'width' => array ()),		'del' => array(			'datetime' => array ()),		'dd' => array(),		'details' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'open' => array (),			'style' => array (),			'xml:lang' => array(),		),		'div' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'dl' => array(),		'dt' => array(),		'em' => array(),		'fieldset' => array(),		'figure' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'figcaption' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'font' => array(			'color' => array (),			'face' => array (),			'size' => array ()),		'footer' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'form' => array(			'action' => array (),			'accept' => array (),			'accept-charset' => array (),			'enctype' => array (),			'method' => array (),			'name' => array (),			'target' => array ()),		'h1' => array(			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h2' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h3' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h4' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h5' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h6' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'header' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hgroup' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hr' => array (			'align' => array (),			'class' => array (),			'noshade' => array (),			'size' => array (),			'width' => array ()),		'i' => array(),		'img' => array(			'alt' => array (),			'align' => array (),			'border' => array (),			'class' => array (),			'height' => array (),			'hspace' => array (),			'longdesc' => array (),			'vspace' => array (),			'src' => array (),			'style' => array (),			'width' => array ()),		'ins' => array(			'datetime' => array (),			'cite' => array ()),		'kbd' => array(),		'label' => array(			'for' => array ()),		'legend' => array(			'align' => array ()),		'li' => array (			'align' => array (),			'class' => array ()),		'menu' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'nav' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'p' => array(			'class' => array (),			'align' => array (),			'dir' => array(),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'pre' => array(			'style' => array(),			'width' => array ()),		'q' => array(			'cite' => array ()),		's' => array(),		'span' => array (			'class' => array (),			'dir' => array (),			'align' => array (),			'lang' => array (),			'style' => array (),			'title' => array (),			'xml:lang' => array()),		'section' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'strike' => array(),		'strong' => array(),		'sub' => array(),		'summary' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'sup' => array(),		'table' => array(			'align' => array (),			'bgcolor' => array (),			'border' => array (),			'cellpadding' => array (),			'cellspacing' => array (),			'class' => array (),			'dir' => array(),			'id' => array(),			'rules' => array (),			'style' => array (),			'summary' => array (),			'width' => array ()),		'tbody' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'valign' => array ()),		'td' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'dir' => array(),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'style' => array (),			'valign' => array (),			'width' => array ()),		'textarea' => array(			'cols' => array (),			'rows' => array (),			'disabled' => array (),			'name' => array (),			'readonly' => array ()),		'tfoot' => array(			'align' => array (),			'char' => array (),			'class' => array (),			'charoff' => array (),			'valign' => array ()),		'th' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'valign' => array (),			'width' => array ()),		'thead' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'valign' => array ()),		'title' => array(),		'tr' => array(			'align' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'style' => array (),			'valign' => array ()),		'tt' => array(),		'u' => array(),		'ul' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'ol' => array (			'class' => array (),			'start' => array (),			'style' => array (),			'type' => array ()),		'var' => array ());	/**	 * Kses allowed HTML elements.	 *	 * @global array $allowedtags	 * @since 1.0.0	 */	$allowedtags = array(		'a' => array(			'href' => array (),			'title' => array ()),		'abbr' => array(			'title' => array ()),		'acronym' => array(			'title' => array ()),		'b' => array(),		'blockquote' => array(			'cite' => array ()),		//	'br' => array(),		'cite' => array (),		'code' => array(),		'del' => array(			'datetime' => array ()),		//	'dd' => array(),		//	'dl' => array(),		//	'dt' => array(),		'em' => array (), 'i' => array (),		//	'ins' => array('datetime' => array(), 'cite' => array()),		//	'li' => array(),		//	'ol' => array(),		//	'p' => array(),		'q' => array(			'cite' => array ()),		'strike' => array(),		'strong' => array(),		//	'sub' => array(),		//	'sup' => array(),		//	'u' => array(),		//	'ul' => array(),	);	$allowedentitynames = array(		'nbsp',    'iexcl',  'cent',    'pound',  'curren', 'yen',		'brvbar',  'sect',   'uml',     'copy',   'ordf',   'laquo',		'not',     'shy',    'reg',     'macr',   'deg',    'plusmn',		'acute',   'micro',  'para',    'middot', 'cedil',  'ordm',		'raquo',   'iquest', 'Agrave',  'Aacute', 'Acirc',  'Atilde',		'Auml',    'Aring',  'AElig',   'Ccedil', 'Egrave', 'Eacute',		'Ecirc',   'Euml',   'Igrave',  'Iacute', 'Icirc',  'Iuml',		'ETH',     'Ntilde', 'Ograve',  'Oacute', 'Ocirc',  'Otilde',		'Ouml',    'times',  'Oslash',  'Ugrave', 'Uacute', 'Ucirc',		'Uuml',    'Yacute', 'THORN',   'szlig',  'agrave', 'aacute',		'acirc',   'atilde', 'auml',    'aring',  'aelig',  'ccedil',		'egrave',  'eacute', 'ecirc',   'euml',   'igrave', 'iacute',		'icirc',   'iuml',   'eth',     'ntilde', 'ograve', 'oacute',		'ocirc',   'otilde', 'ouml',    'divide', 'oslash', 'ugrave',		'uacute',  'ucirc',  'uuml',    'yacute', 'thorn',  'yuml',		'quot',    'amp',    'lt',      'gt',     'apos',   'OElig',		'oelig',   'Scaron', 'scaron',  'Yuml',   'circ',   'tilde',		'ensp',    'emsp',   'thinsp',  'zwnj',   'zwj',    'lrm',		'rlm',     'ndash',  'mdash',   'lsquo',  'rsquo',  'sbquo',		'ldquo',   'rdquo',  'bdquo',   'dagger', 'Dagger', 'permil',		'lsaquo',  'rsaquo', 'euro',    'fnof',   'Alpha',  'Beta',		'Gamma',   'Delta',  'Epsilon', 'Zeta',   'Eta',    'Theta',		'Iota',    'Kappa',  'Lambda',  'Mu',     'Nu',     'Xi',		'Omicron', 'Pi',     'Rho',     'Sigma',  'Tau',    'Upsilon',		'Phi',     'Chi',    'Psi',     'Omega',  'alpha',  'beta',		'gamma',   'delta',  'epsilon', 'zeta',   'eta',    'theta',		'iota',    'kappa',  'lambda',  'mu',     'nu',     'xi',		'omicron', 'pi',     'rho',     'sigmaf', 'sigma',  'tau',		'upsilon', 'phi',    'chi',     'psi',    'omega',  'thetasym',		'upsih',   'piv',    'bull',    'hellip', 'prime',  'Prime',		'oline',   'frasl',  'weierp',  'image',  'real',   'trade',		'alefsym', 'larr',   'uarr',    'rarr',   'darr',   'harr',		'crarr',   'lArr',   'uArr',    'rArr',   'dArr',   'hArr',		'forall',  'part',   'exist',   'empty',  'nabla',  'isin',		'notin',   'ni',     'prod',    'sum',    'minus',  'lowast',		'radic',   'prop',   'infin',   'ang',    'and',    'or',		'cap',     'cup',    'int',     'sim',    'cong',   'asymp',		'ne',      'equiv',  'le',      'ge',     'sub',    'sup',		'nsub',    'sube',   'supe',    'oplus',  'otimes', 'perp',		'sdot',    'lceil',  'rceil',   'lfloor', 'rfloor', 'lang',		'rang',    'loz',    'spades',  'clubs',  'hearts', 'diams',	);}/** * Filters content and keeps only allowable HTML elements. * * This function makes sure that only the allowed HTML element names, attribute * names and attribute values plus only sane HTML entities will occur in * $string. You have to remove any slashes from PHP's magic quotes before you * call this function. * * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news', * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This * covers all common link protocols, except for 'javascript' which should not * be allowed for untrusted users. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Optional. Allowed protocol in links. * @return string Filtered content with only allowed HTML elements */function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {	$allowed_protocols = wp_parse_args( $allowed_protocols, apply_filters('kses_allowed_protocols', array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn') ));	$string = wp_kses_no_null($string);	$string = wp_kses_js_entities($string);	$string = wp_kses_normalize_entities($string);	$allowed_html_fixed = wp_kses_array_lc($allowed_html);	$string = wp_kses_hook($string, $allowed_html_fixed, $allowed_protocols); // WP changed the order of these funcs and added args to wp_kses_hook	return wp_kses_split($string, $allowed_html_fixed, $allowed_protocols);}/** * You add any kses hooks here. * * There is currently only one kses WordPress hook and it is called here. All * parameters are passed to the hooks and expected to recieve a string. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Allowed protocol in links * @return string Filtered content through 'pre_kses' hook */function wp_kses_hook($string, $allowed_html, $allowed_protocols) {	$string = apply_filters('pre_kses', $string, $allowed_html, $allowed_protocols);	return $string;}/** * This function returns kses' version number. * * @since 1.0.0 * * @return string KSES Version Number */function wp_kses_version() {	return '0.2.2';}/** * Searches for HTML tags, no matter how malformed. * * It also matches stray ">" characters. * * @since 1.0.0 * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Content with fixed HTML tags */function wp_kses_split($string, $allowed_html, $allowed_protocols) {	global $pass_allowed_html, $pass_allowed_protocols;	$pass_allowed_html = $allowed_html;	$pass_allowed_protocols = $allowed_protocols;	return preg_replace_callback('%((<!--.*?(-->|$))|(<[^>]*(>|$)|>))%',		create_function('$match', 'global $pass_allowed_html, $pass_allowed_protocols; return wp_kses_split2($match[1], $pass_allowed_html, $pass_allowed_protocols);'), $string);}/** * Callback for wp_kses_split for fixing malformed HTML tags. * * This function does a lot of work. It rejects some very malformed things like * <:::>. It returns an empty string, if the element isn't allowed (look ma, no * strip_tags()!). Otherwise it splits the tag into an element and an attribute * list. * * After the tag is split into an element and an attribute list, it is run * through another filter which will remove illegal attributes and once that is * completed, will be returned. * * @access private * @since 1.0.0 * @uses wp_kses_attr() * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Fixed HTML element */function wp_kses_split2($string, $allowed_html, $allowed_protocols) {	$string = wp_kses_stripslashes($string);	if (substr($string, 0, 1) != '<')		return '&gt;';	# It matched a ">" character	if (preg_match('%^<!--(.*?)(-->)?$%', $string, $matches)) {		$string = str_replace(array('<!--', '-->'), '', $matches[1]);		while ( $string != $newstring = wp_kses($string, $allowed_html, $allowed_protocols) )			$string = $newstring;		if ( $string == '' )			return '';		// prevent multiple dashes in comments		$string = preg_replace('/--+/', '-', $string);		// prevent three dashes closing a comment		$string = preg_replace('/-$/', '', $string);		return "<!--{$string}-->";	}	# Allow HTML comments	if (!preg_match('%^<\s*(/\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))		return '';	# It's seriously malformed	$slash = trim($matches[1]);	$elem = $matches[2];	$attrlist = $matches[3];	if (!@isset($allowed_html[strtolower($elem)]))		return '';	# They are using a not allowed HTML element	if ($slash != '')		return "<$slash$elem>";	# No attributes are allowed for closing elements	return wp_kses_attr("$slash$elem", $attrlist, $allowed_html, $allowed_protocols);}/** * Removes all attributes, if none are allowed for this element. * * If some are allowed it calls wp_kses_hair() to split them further, and then * it builds up new HTML code from the data that kses_hair() returns. It also * removes "<" and ">" characters, if there are any left. One more thing it does * is to check if the tag has a closing XHTML slash, and if it does, it puts one * in the returned code as well. * * @since 1.0.0 * * @param string $element HTML element/tag * @param string $attr HTML attributes from HTML element to closing HTML element tag * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Sanitized HTML element */function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {	# Is there a closing XHTML slash at the end of the attributes?	$xhtml_slash = '';	if (preg_match('%\s*/\s*$%', $attr))		$xhtml_slash = ' /';	# Are any attributes allowed at all for this element?	if (@ count($allowed_html[strtolower($element)]) == 0)		return "<$element$xhtml_slash>";	# Split it	$attrarr = wp_kses_hair($attr, $allowed_protocols);	# Go through $attrarr, and save the allowed attributes for this element	# in $attr2	$attr2 = '';	foreach ($attrarr as $arreach) {		if (!@ isset ($allowed_html[strtolower($element)][strtolower($arreach['name'])]))			continue; # the attribute is not allowed		$current = $allowed_html[strtolower($element)][strtolower($arreach['name'])];		if ($current == '')			continue; # the attribute is not allowed		if (!is_array($current))			$attr2 .= ' '.$arreach['whole'];		# there are no checks		else {			# there are some checks			$ok = true;			foreach ($current as $currkey => $currval)				if (!wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval)) {					$ok = false;					break;				}			if ( $arreach['name'] == 'style' ) {				$orig_value = $arreach['value'];				$value = safecss_filter_attr($orig_value);				if ( empty($value) )					continue;				$arreach['value'] = $value;				$arreach['whole'] = str_replace($orig_value, $value, $arreach['whole']);			}			if ($ok)				$attr2 .= ' '.$arreach['whole']; # it passed them		} # if !is_array($current)	} # foreach	# Remove any "<" or ">" characters	$attr2 = preg_replace('/[<>]/', '', $attr2);	return "<$element$attr2$xhtml_slash>";}/** * Builds an attribute list from string containing attributes. * * This function does a lot of work. It parses an attribute list into an array * with attribute data, and tries to do the right thing even if it gets weird * input. It will add quotes around attribute values that don't have any quotes * or apostrophes around them, to make it easier to produce HTML code that will * conform to W3C's HTML specification. It will also remove bad URL protocols * from attribute values.  It also reduces duplicate attributes by using the * attribute defined first (foo='bar' foo='baz' will result in foo='bar'). * * @since 1.0.0 * * @param string $attr Attribute list from HTML element to closing HTML element tag * @param array $allowed_protocols Allowed protocols to keep * @return array List of attributes after parsing */function wp_kses_hair($attr, $allowed_protocols) {	$attrarr = array ();	$mode = 0;	$attrname = '';	$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');	# Loop through the whole attribute list	while (strlen($attr) != 0) {		$working = 0; # Was the last operation successful?		switch ($mode) {			case 0 : # attribute name, href for instance				if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {					$attrname = $match[1];					$working = $mode = 1;					$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);				}				break;			case 1 : # equals sign or valueless ("selected")				if (preg_match('/^\s*=\s*/', $attr)) # equals sign					{					$working = 1;					$mode = 2;					$attr = preg_replace('/^\s*=\s*/', '', $attr);					break;				}				if (preg_match('/^\s+/', $attr)) # valueless					{					$working = 1;					$mode = 0;					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');					}					$attr = preg_replace('/^\s+/', '', $attr);				}				break;			case 2 : # attribute value, a URL after href= for instance				if (preg_match('%^"([^"]*)"(\s+|/?$)%', $attr, $match))					# "value"					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);					break;				}				if (preg_match("%^'([^']*)'(\s+|/?$)%", $attr, $match))					# 'value'					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname='$thisval'", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);					break;				}				if (preg_match("%^([^\s\"']+)(\s+|/?$)%", $attr, $match))					# value					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					# We add quotes to conform to W3C's HTML spec.					$working = 1;					$mode = 0;					$attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);				}				break;		} # switch		if ($working == 0) # not well formed, remove and try again		{			$attr = wp_kses_html_error($attr);			$mode = 0;		}	} # while	if ($mode == 1 && FALSE === array_key_exists($attrname, $attrarr))		# special case, for when the attribute list ends with a valueless		# attribute like "selected"		$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');	return $attrarr;}/** * Performs different checks for attribute values. * * The currently implemented checks are "maxlen", "minlen", "maxval", "minval" * and "valueless" with even more checks to come soon. * * @since 1.0.0 * * @param string $value Attribute value * @param string $vless Whether the value is valueless. Use 'y' or 'n' * @param string $checkname What $checkvalue is checking for. * @param mixed $checkvalue What constraint the value should pass * @return bool Whether check passes */function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {	$ok = true;	switch (strtolower($checkname)) {		case 'maxlen' :			# The maxlen check makes sure that the attribute value has a length not			# greater than the given value. This can be used to avoid Buffer Overflows			# in WWW clients and various Internet servers.			if (strlen($value) > $checkvalue)				$ok = false;			break;		case 'minlen' :			# The minlen check makes sure that the attribute value has a length not			# smaller than the given value.			if (strlen($value) < $checkvalue)				$ok = false;			break;		case 'maxval' :			# The maxval check does two things: it checks that the attribute value is			# an integer from 0 and up, without an excessive amount of zeroes or			# whitespace (to avoid Buffer Overflows). It also checks that the attribute			# value is not greater than the given value.			# This check can be used to avoid Denial of Service attacks.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value > $checkvalue)				$ok = false;			break;		case 'minval' :			# The minval check checks that the attribute value is a positive integer,			# and that it is not smaller than the given value.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value < $checkvalue)				$ok = false;			break;		case 'valueless' :			# The valueless check checks if the attribute has a value			# (like <a href="blah">) or not (<option selected>). If the given value			# is a "y" or a "Y", the attribute must not have a value.			# If the given value is an "n" or an "N", the attribute must have one.			if (strtolower($checkvalue) != $vless)				$ok = false;			break;	} # switch	return $ok;}/** * Sanitize string from bad protocols. * * This function removes all non-allowed protocols from the beginning of * $string. It ignores whitespace and the case of the letters, and it does * understand HTML entities. It does its work in a while loop, so it won't be * fooled by a string like "javascript:javascript:alert(57)". * * @since 1.0.0 * * @param string $string Content to filter bad protocols from * @param array $allowed_protocols Allowed protocols to keep * @return string Filtered content */function wp_kses_bad_protocol($string, $allowed_protocols) {	$string = wp_kses_no_null($string);	$string2 = $string.'a';	while ($string != $string2) {		$string2 = $string;		$string = wp_kses_bad_protocol_once($string, $allowed_protocols);	} # while	return $string;}/** * Removes any NULL characters in $string. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_no_null($string) {	$string = preg_replace('/\0+/', '', $string);	$string = preg_replace('/(\\\\0)+/', '', $string);	return $string;}/** * Strips slashes from in front of quotes. * * This function changes the character sequence  \"  to just  ". It leaves all * other slashes alone. It's really weird, but the quoting from * preg_replace(//e) seems to require this. * * @since 1.0.0 * * @param string $string String to strip slashes * @return string Fixed strings with quoted slashes */function wp_kses_stripslashes($string) {	return preg_replace('%\\\\"%', '"', $string);}/** * Goes through an array and changes the keys to all lower case. * * @since 1.0.0 * * @param array $inarray Unfiltered array * @return array Fixed array with all lowercase keys */function wp_kses_array_lc($inarray) {	$outarray = array ();	foreach ( (array) $inarray as $inkey => $inval) {		$outkey = strtolower($inkey);		$outarray[$outkey] = array ();		foreach ( (array) $inval as $inkey2 => $inval2) {			$outkey2 = strtolower($inkey2);			$outarray[$outkey][$outkey2] = $inval2;		} # foreach $inval	} # foreach $inarray	return $outarray;}/** * Removes the HTML JavaScript entities found in early versions of Netscape 4. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_js_entities($string) {	return preg_replace('%&\s*\{[^}]*(\}\s*;?|$)%', '', $string);}/** * Handles parsing errors in wp_kses_hair(). * * The general plan is to remove everything to and including some whitespace, * but it deals with quotes and apostrophes as well. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_html_error($string) {	return preg_replace('/^("[^"]*("|$)|\'[^\']*(\'|$)|\S)*\s*/', '', $string);}/** * Sanitizes content from bad protocols and other characters. * * This function searches for URL protocols at the beginning of $string, while * handling whitespace and HTML entities. * * @since 1.0.0 * * @param string $string Content to check for bad protocols * @param string $allowed_protocols Allowed protocols * @return string Sanitized content */function wp_kses_bad_protocol_once($string, $allowed_protocols) {	global $_kses_allowed_protocols;	$_kses_allowed_protocols = $allowed_protocols;	$string2 = preg_split('/:|&#58;|&#x3a;/i', $string, 2);	if ( isset($string2[1]) && !preg_match('%/\?%', $string2[0]) )		$string = wp_kses_bad_protocol_once2($string2[0]) . trim($string2[1]);	else		$string = preg_replace_callback('/^((&[^;]*;|[\sA-Za-z0-9])*)'.'(:|&#58;|&#[Xx]3[Aa];)\s*/', 'wp_kses_bad_protocol_once2', $string);	return $string;}/** * Callback for wp_kses_bad_protocol_once() regular expression. * * This function processes URL protocols, checks to see if they're in the * white-list or not, and returns different data depending on the answer. * * @access private * @since 1.0.0 * * @param mixed $matches string or preg_replace_callback() matches array to check for bad protocols * @return string Sanitized content */function wp_kses_bad_protocol_once2($matches) {	global $_kses_allowed_protocols;	if ( is_array($matches) ) {		if ( empty($matches[1]) )			return '';		$string = $matches[1];	} else {		$string = $matches;	}	$string2 = wp_kses_decode_entities($string);	$string2 = preg_replace('/\s/', '', $string2);	$string2 = wp_kses_no_null($string2);	$string2 = strtolower($string2);	$allowed = false;	foreach ( (array) $_kses_allowed_protocols as $one_protocol)		if (strtolower($one_protocol) == $string2) {			$allowed = true;			break;		}	if ($allowed)		return "$string2:";	else		return '';}/** * Converts and fixes HTML entities. * * This function normalizes HTML entities. It will convert "AT&T" to the correct * "AT&amp;T", "&#00058;" to "&#58;", "&#XYZZY;" to "&amp;#XYZZY;" and so on. * * @since 1.0.0 * * @param string $string Content to normalize entities * @return string Content with normalized entities */function wp_kses_normalize_entities($string) {	# Disarm all entities by converting & to &amp;	$string = str_replace('&', '&amp;', $string);	# Change back the allowed entities in our entity whitelist	$string = preg_replace_callback('/&amp;([A-Za-z]{2,8});/', 'wp_kses_named_entities', $string);	$string = preg_replace_callback('/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string);	$string = preg_replace_callback('/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string);	return $string;}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function only accepts valid named entity references, which are finite, * case-sensitive, and highly scrutinized by HTML and XML validators. * * @since 3.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_named_entities($matches) {	global $allowedentitynames;	if ( empty($matches[1]) )		return '';	$i = $matches[1];	return ( ( ! in_array($i, $allowedentitynames) ) ? "&amp;$i;" : "&$i;" );}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function helps wp_kses_normalize_entities() to only accept 16 bit values * and nothing more for &#number; entities. * * @access private * @since 1.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities2($matches) {	if ( empty($matches[1]) )		return '';	$i = $matches[1];	if (valid_unicode($i)) {		$i = str_pad(ltrim($i,'0'), 3, '0', STR_PAD_LEFT);		$i = "&#$i;";	} else {		$i = "&amp;#$i;";	}	return $i;}/** * Callback for wp_kses_normalize_entities() for regular expression. * * This function helps wp_kses_normalize_entities() to only accept valid Unicode * numeric entities in hex form. * * @access private * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities3($matches) {	if ( empty($matches[1]) )		return '';	$hexchars = $matches[1];	return ( ( ! valid_unicode(hexdec($hexchars)) ) ? "&amp;#x$hexchars;" : '&#x'.ltrim($hexchars,'0').';' );}/** * Helper function to determine if a Unicode value is valid. * * @param int $i Unicode value * @return bool true if the value was a valid Unicode number */function valid_unicode($i) {	return ( $i == 0x9 || $i == 0xa || $i == 0xd ||			($i >= 0x20 && $i <= 0xd7ff) ||			($i >= 0xe000 && $i <= 0xfffd) ||			($i >= 0x10000 && $i <= 0x10ffff) );}/** * Convert all entities to their character counterparts. * * This function decodes numeric HTML entities (&#65; and &#x41;). It doesn't do * anything with other entities like &auml;, but we don't need them in the URL * protocol whitelisting system anyway. * * @since 1.0.0 * * @param string $string Content to change entities * @return string Content after decoded entities */function wp_kses_decode_entities($string) {	$string = preg_replace_callback('/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string);	$string = preg_replace_callback('/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string);	return $string;}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr( $match ) {	return chr( $match[1] );}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr_hexdec( $match ) {	return chr( hexdec( $match[1] ) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 1.0.0 * @uses $allowedtags * * @param string $data Content to filter, expected to be escaped with slashes * @return string Filtered content */function wp_filter_kses($data) {	global $allowedtags;	return addslashes( wp_kses(stripslashes( $data ), $allowedtags) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 2.9.0 * @uses $allowedtags * * @param string $data Content to filter, expected to not be escaped * @return string Filtered content */function wp_kses_data($data) {	global $allowedtags;	return wp_kses( $data , $allowedtags );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.0.0 * @uses $allowedposttags * * @param string $data Post content to filter, expected to be escaped with slashes * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_filter_post_kses($data) {	global $allowedposttags;	return addslashes ( wp_kses(stripslashes( $data ), $allowedposttags) );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.9.0 * @uses $allowedposttags * * @param string $data Post content to filter * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_kses_post($data) {	global $allowedposttags;	return wp_kses( $data , $allowedposttags );}/** * Strips all of the HTML in the content. * * @since 2.1.0 * * @param string $data Content to strip all HTML from * @return string Filtered content without any HTML */function wp_filter_nohtml_kses($data) {	return addslashes ( wp_kses(stripslashes( $data ), array()) );}/** * Adds all Kses input form content filters. * * All hooks have default priority. The wp_filter_kses() function is added to * the 'pre_comment_content' and 'title_save_pre' hooks. * * The wp_filter_post_kses() function is added to the 'content_save_pre', * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks. * * @since 2.0.0 * @uses add_filter() See description for what functions are added to what hooks. */function kses_init_filters() {	// Normal filtering.	add_filter('pre_comment_content', 'wp_filter_kses');	add_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	add_filter('content_save_pre', 'wp_filter_post_kses');	add_filter('excerpt_save_pre', 'wp_filter_post_kses');	add_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Removes all Kses input form content filters. * * A quick procedural method to removing all of the filters that kses uses for * content in WordPress Loop. * * Does not remove the kses_init() function from 'init' hook (priority is * default). Also does not remove kses_init() function from 'set_current_user' * hook (priority is also default). * * @since 2.0.6 */function kses_remove_filters() {	// Normal filtering.	remove_filter('pre_comment_content', 'wp_filter_kses');	remove_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	remove_filter('content_save_pre', 'wp_filter_post_kses');	remove_filter('excerpt_save_pre', 'wp_filter_post_kses');	remove_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Sets up most of the Kses filters for input form content. * * If you remove the kses_init() function from 'init' hook and * 'set_current_user' (priority is default), then none of the Kses filter hooks * will be added. * * First removes all of the Kses filters in case the current user does not need * to have Kses filter the content. If the user does not have unfiltered html * capability, then Kses filters are added. * * @uses kses_remove_filters() Removes the Kses filters * @uses kses_init_filters() Adds the Kses filters back if the user *		does not have unfiltered HTML capability. * @since 2.0.0 */function kses_init() {	kses_remove_filters();	if (current_user_can('unfiltered_html') == false)		kses_init_filters();}add_action('init', 'kses_init');add_action('set_current_user', 'kses_init');/** * Inline CSS filter * * @since 2.8.1 */function safecss_filter_attr( $css, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented	$css = wp_kses_no_null($css);	$css = str_replace(array("\n","\r","\t"), '', $css);	if ( preg_match( '%[\\(&]|/\*%', $css ) ) // remove any inline css containing \ ( & or comments		return '';	$css_array = split( ';', trim( $css ) );	$allowed_attr = apply_filters( 'safe_style_css', array( 'text-align', 'margin', 'color', 'float',	'border', 'background', 'background-color', 'border-bottom', 'border-bottom-color',	'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-left',	'border-left-color', 'border-left-style', 'border-left-width', 'border-right', 'border-right-color',	'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top',	'border-top-color', 'border-top-style', 'border-top-width', 'border-width', 'caption-side',	'clear', 'cursor', 'direction', 'font', 'font-family', 'font-size', 'font-style',	'font-variant', 'font-weight', 'height', 'letter-spacing', 'line-height', 'margin-bottom',	'margin-left', 'margin-right', 'margin-top', 'overflow', 'padding', 'padding-bottom',	'padding-left', 'padding-right', 'padding-top', 'text-decoration', 'text-indent', 'vertical-align',	'width' ) );	if ( empty($allowed_attr) )		return $css;	$css = '';	foreach ( $css_array as $css_item ) {		if ( $css_item == '' )			continue;		$css_item = trim( $css_item );		$found = false;		if ( strpos( $css_item, ':' ) === false ) {			$found = true;		} else {			$parts = split( ':', $css_item );			if ( in_array( trim( $parts[0] ), $allowed_attr ) )				$found = true;		}		if ( $found ) {			if( $css != '' )				$css .= ';';			$css .= $css_item;		}	}	return $css;}
<?php/** * Atom Syndication Format PHP Library * * @package AtomLib * @link http://code.google.com/p/phpatomlib/ * * @author Elias Torres <elias@torrez.us> * @version 0.4 * @since 2.3 *//** * Structure that store common Atom Feed Properties * * @package AtomLib */class AtomFeed {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array     * @access public     */    var $categories = array();	/**	 * Stores Entries	 *	 * @var array	 * @access public	 */    var $entries = array();}/** * Structure that store Atom Entry Properties * * @package AtomLib */class AtomEntry {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array	 * @access public     */    var $categories = array();}/** * AtomLib Atom Parser API * * @package AtomLib */class AtomParser {    var $NS = 'http://www.w3.org/2005/Atom';    var $ATOM_CONTENT_ELEMENTS = array('content','summary','title','subtitle','rights');    var $ATOM_SIMPLE_ELEMENTS = array('id','updated','published','draft');    var $debug = false;    var $depth = 0;    var $indent = 2;    var $in_content;    var $ns_contexts = array();    var $ns_decls = array();    var $content_ns_decls = array();    var $content_ns_contexts = array();    var $is_xhtml = false;    var $is_html = false;    var $is_text = true;    var $skipped_div = false;    var $FILE = "php://input";    var $feed;    var $current;    function AtomParser() {        $this->feed = new AtomFeed();        $this->current = null;        $this->map_attrs_func = create_function('$k,$v', 'return "$k=\"$v\"";');        $this->map_xmlns_func = create_function('$p,$n', '$xd = "xmlns"; if(strlen($n[0])>0) $xd .= ":{$n[0]}"; return "{$xd}=\"{$n[1]}\"";');    }    function _p($msg) {        if($this->debug) {            print str_repeat(" ", $this->depth * $this->indent) . $msg ."\n";        }    }    function error_handler($log_level, $log_text, $error_file, $error_line) {        $this->error = $log_text;    }    function parse() {        set_error_handler(array(&$this, 'error_handler'));        array_unshift($this->ns_contexts, array());        $parser = xml_parser_create_ns();        xml_set_object($parser, $this);        xml_set_element_handler($parser, "start_element", "end_element");        xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);        xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,0);        xml_set_character_data_handler($parser, "cdata");        xml_set_default_handler($parser, "_default");        xml_set_start_namespace_decl_handler($parser, "start_ns");        xml_set_end_namespace_decl_handler($parser, "end_ns");        $this->content = '';        $ret = true;        $fp = fopen($this->FILE, "r");        while ($data = fread($fp, 4096)) {            if($this->debug) $this->content .= $data;            if(!xml_parse($parser, $data, feof($fp))) {                trigger_error(sprintf(__('XML error: %s at line %d')."\n",                    xml_error_string(xml_get_error_code($xml_parser)),                    xml_get_current_line_number($xml_parser)));                $ret = false;                break;            }        }        fclose($fp);        xml_parser_free($parser);        restore_error_handler();        return $ret;    }    function start_element($parser, $name, $attrs) {        $tag = array_pop(split(":", $name));        switch($name) {            case $this->NS . ':feed':                $this->current = $this->feed;                break;            case $this->NS . ':entry':                $this->current = new AtomEntry();                break;        };        $this->_p("start_element('$name')");        #$this->_p(print_r($this->ns_contexts,true));        #$this->_p('current(' . $this->current . ')');        array_unshift($this->ns_contexts, $this->ns_decls);        $this->depth++;        if(!empty($this->in_content)) {            $this->content_ns_decls = array();            if($this->is_html || $this->is_text)                trigger_error("Invalid content in element found. Content must not be of type text or html if it contains markup.");            $attrs_prefix = array();            // resolve prefixes for attributes            foreach($attrs as $key => $value) {                $with_prefix = $this->ns_to_prefix($key, true);                $attrs_prefix[$with_prefix[1]] = $this->xml_escape($value);            }            $attrs_str = join(' ', array_map($this->map_attrs_func, array_keys($attrs_prefix), array_values($attrs_prefix)));            if(strlen($attrs_str) > 0) {                $attrs_str = " " . $attrs_str;            }            $with_prefix = $this->ns_to_prefix($name);            if(!$this->is_declared_content_ns($with_prefix[0])) {                array_push($this->content_ns_decls, $with_prefix[0]);            }            $xmlns_str = '';            if(count($this->content_ns_decls) > 0) {                array_unshift($this->content_ns_contexts, $this->content_ns_decls);                $xmlns_str .= join(' ', array_map($this->map_xmlns_func, array_keys($this->content_ns_contexts[0]), array_values($this->content_ns_contexts[0])));                if(strlen($xmlns_str) > 0) {                    $xmlns_str = " " . $xmlns_str;                }            }            array_push($this->in_content, array($tag, $this->depth, "<". $with_prefix[1] ."{$xmlns_str}{$attrs_str}" . ">"));        } else if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS) || in_array($tag, $this->ATOM_SIMPLE_ELEMENTS)) {            $this->in_content = array();            $this->is_xhtml = $attrs['type'] == 'xhtml';            $this->is_html = $attrs['type'] == 'html' || $attrs['type'] == 'text/html';            $this->is_text = !in_array('type',array_keys($attrs)) || $attrs['type'] == 'text';            $type = $this->is_xhtml ? 'XHTML' : ($this->is_html ? 'HTML' : ($this->is_text ? 'TEXT' : $attrs['type']));            if(in_array('src',array_keys($attrs))) {                $this->current->$tag = $attrs;            } else {                array_push($this->in_content, array($tag,$this->depth, $type));            }        } else if($tag == 'link') {            array_push($this->current->links, $attrs);        } else if($tag == 'category') {            array_push($this->current->categories, $attrs);        }        $this->ns_decls = array();    }    function end_element($parser, $name) {        $tag = array_pop(split(":", $name));        $ccount = count($this->in_content);        # if we are *in* content, then let's proceed to serialize it        if(!empty($this->in_content)) {            # if we are ending the original content element            # then let's finalize the content            if($this->in_content[0][0] == $tag &&                $this->in_content[0][1] == $this->depth) {                $origtype = $this->in_content[0][2];                array_shift($this->in_content);                $newcontent = array();                foreach($this->in_content as $c) {                    if(count($c) == 3) {                        array_push($newcontent, $c[2]);                    } else {                        if($this->is_xhtml || $this->is_text) {                            array_push($newcontent, $this->xml_escape($c));                        } else {                            array_push($newcontent, $c);                        }                    }                }                if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS)) {                    $this->current->$tag = array($origtype, join('',$newcontent));                } else {                    $this->current->$tag = join('',$newcontent);                }                $this->in_content = array();            } else if($this->in_content[$ccount-1][0] == $tag &&                $this->in_content[$ccount-1][1] == $this->depth) {                $this->in_content[$ccount-1][2] = substr($this->in_content[$ccount-1][2],0,-1) . "/>";            } else {                # else, just finalize the current element's content                $endtag = $this->ns_to_prefix($name);                array_push($this->in_content, array($tag, $this->depth, "</$endtag[1]>"));            }        }        array_shift($this->ns_contexts);        $this->depth--;        if($name == ($this->NS . ':entry')) {            array_push($this->feed->entries, $this->current);            $this->current = null;        }        $this->_p("end_element('$name')");    }    function start_ns($parser, $prefix, $uri) {        $this->_p("starting: " . $prefix . ":" . $uri);        array_push($this->ns_decls, array($prefix,$uri));    }    function end_ns($parser, $prefix) {        $this->_p("ending: #" . $prefix . "#");    }    function cdata($parser, $data) {        $this->_p("data: #" . str_replace(array("\n"), array("\\n"), trim($data)) . "#");        if(!empty($this->in_content)) {            array_push($this->in_content, $data);        }    }    function _default($parser, $data) {        # when does this gets called?    }    function ns_to_prefix($qname, $attr=false) {        # split 'http://www.w3.org/1999/xhtml:div' into ('http','//www.w3.org/1999/xhtml','div')        $components = split(":", $qname);        # grab the last one (e.g 'div')        $name = array_pop($components);        if(!empty($components)) {            # re-join back the namespace component            $ns = join(":",$components);            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if($mapping[1] == $ns && strlen($mapping[0]) > 0) {                        return array($mapping, "$mapping[0]:$name");                    }                }            }        }        if($attr) {            return array(null, $name);        } else {            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if(strlen($mapping[0]) == 0) {                        return array($mapping, $name);                    }                }            }        }    }    function is_declared_content_ns($new_mapping) {        foreach($this->content_ns_contexts as $context) {            foreach($context as $mapping) {                if($new_mapping == $mapping) {                    return true;                }            }        }        return false;    }    function xml_escape($string)    {             return str_replace(array('&','"',"'",'<','>'),                array('&amp;','&quot;','&apos;','&lt;','&gt;'),                $string );    }}?>
<?php/** * General API for generating and formatting diffs - the differences between * two sequences of strings. * * The original PHP version of this code was written by Geoffrey T. Dairiki * <dairiki@dairiki.org>, and is used/adapted with his permission. * * Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org> * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_Diff {    /**     * Array of changes.     *     * @var array     */    var $_edits;    /**     * Computes diffs between sequences of strings.     *     * @param string $engine     Name of the diffing engine to use.  'auto'     *                           will automatically select the best.     * @param array $params      Parameters to pass to the diffing engine.     *                           Normally an array of two arrays, each     *                           containing the lines from a file.     */    function Text_Diff($engine, $params)    {        // Backward compatibility workaround.        if (!is_string($engine)) {            $params = array($engine, $params);            $engine = 'auto';        }        if ($engine == 'auto') {            $engine = extension_loaded('xdiff') ? 'xdiff' : 'native';        } else {            $engine = basename($engine);        }        // WP #7391        require_once dirname(__FILE__).'/Diff/Engine/' . $engine . '.php';        $class = 'Text_Diff_Engine_' . $engine;        $diff_engine = new $class();        $this->_edits = call_user_func_array(array($diff_engine, 'diff'), $params);    }    /**     * Returns the array of differences.     */    function getDiff()    {        return $this->_edits;    }    /**     * returns the number of new (added) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of new lines     */    function countAddedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_add') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->nfinal();            }        }        return $count;    }    /**     * Returns the number of deleted (removed) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of deleted lines     */    function countDeletedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_delete') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->norig();            }        }        return $count;    }    /**     * Computes a reversed diff.     *     * Example:     * <code>     * $diff = new Text_Diff($lines1, $lines2);     * $rev = $diff->reverse();     * </code>     *     * @return Text_Diff  A Diff object representing the inverse of the     *                    original diff.  Note that we purposely don't return a     *                    reference here, since this essentially is a clone()     *                    method.     */    function reverse()    {        if (version_compare(zend_version(), '2', '>')) {            $rev = clone($this);        } else {            $rev = $this;        }        $rev->_edits = array();        foreach ($this->_edits as $edit) {            $rev->_edits[] = $edit->reverse();        }        return $rev;    }    /**     * Checks for an empty diff.     *     * @return boolean  True if two sequences were identical.     */    function isEmpty()    {        foreach ($this->_edits as $edit) {            if (!is_a($edit, 'Text_Diff_Op_copy')) {                return false;            }        }        return true;    }    /**     * Computes the length of the Longest Common Subsequence (LCS).     *     * This is mostly for diagnostic purposes.     *     * @return integer  The length of the LCS.     */    function lcs()    {        $lcs = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_copy')) {                $lcs += count($edit->orig);            }        }        return $lcs;    }    /**     * Gets the original set of lines.     *     * This reconstructs the $from_lines parameter passed to the constructor.     *     * @return array  The original sequence of strings.     */    function getOriginal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->orig) {                array_splice($lines, count($lines), 0, $edit->orig);            }        }        return $lines;    }    /**     * Gets the final set of lines.     *     * This reconstructs the $to_lines parameter passed to the constructor.     *     * @return array  The sequence of strings.     */    function getFinal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->final) {                array_splice($lines, count($lines), 0, $edit->final);            }        }        return $lines;    }    /**     * Removes trailing newlines from a line of text. This is meant to be used     * with array_walk().     *     * @param string $line  The line to trim.     * @param integer $key  The index of the line in the array. Not used.     */    function trimNewlines(&$line, $key)    {        $line = str_replace(array("\n", "\r"), '', $line);    }    /**     * Determines the location of the system temporary directory.     *     * @static     *     * @access protected     *     * @return string  A directory name which can be used for temp files.     *                 Returns false if one could not be found.     */    function _getTempDir()    {        $tmp_locations = array('/tmp', '/var/tmp', 'c:\WUTemp', 'c:\temp',                               'c:\windows\temp', 'c:\winnt\temp');        /* Try PHP's upload_tmp_dir directive. */        $tmp = ini_get('upload_tmp_dir');        /* Otherwise, try to determine the TMPDIR environment variable. */        if (!strlen($tmp)) {            $tmp = getenv('TMPDIR');        }        /* If we still cannot determine a value, then cycle through a list of         * preset possibilities. */        while (!strlen($tmp) && count($tmp_locations)) {            $tmp_check = array_shift($tmp_locations);            if (@is_dir($tmp_check)) {                $tmp = $tmp_check;            }        }        /* If it is still empty, we have failed, so return false; otherwise         * return the directory determined. */        return strlen($tmp) ? $tmp : false;    }    /**     * Checks a diff for validity.     *     * This is here only for debugging purposes.     */    function _check($from_lines, $to_lines)    {        if (serialize($from_lines) != serialize($this->getOriginal())) {            trigger_error("Reconstructed original doesn't match", E_USER_ERROR);        }        if (serialize($to_lines) != serialize($this->getFinal())) {            trigger_error("Reconstructed final doesn't match", E_USER_ERROR);        }        $rev = $this->reverse();        if (serialize($to_lines) != serialize($rev->getOriginal())) {            trigger_error("Reversed original doesn't match", E_USER_ERROR);        }        if (serialize($from_lines) != serialize($rev->getFinal())) {            trigger_error("Reversed final doesn't match", E_USER_ERROR);        }        $prevtype = null;        foreach ($this->_edits as $edit) {            if ($prevtype == get_class($edit)) {                trigger_error("Edit sequence is non-optimal", E_USER_ERROR);            }            $prevtype = get_class($edit);        }        return true;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_MappedDiff extends Text_Diff {    /**     * Computes a diff between sequences of strings.     *     * This can be used to compute things like case-insensitve diffs, or diffs     * which ignore changes in white-space.     *     * @param array $from_lines         An array of strings.     * @param array $to_lines           An array of strings.     * @param array $mapped_from_lines  This array should have the same size     *                                  number of elements as $from_lines.  The     *                                  elements in $mapped_from_lines and     *                                  $mapped_to_lines are what is actually     *                                  compared when computing the diff.     * @param array $mapped_to_lines    This array should have the same number     *                                  of elements as $to_lines.     */    function Text_MappedDiff($from_lines, $to_lines,                             $mapped_from_lines, $mapped_to_lines)    {        assert(count($from_lines) == count($mapped_from_lines));        assert(count($to_lines) == count($mapped_to_lines));        parent::Text_Diff($mapped_from_lines, $mapped_to_lines);        $xi = $yi = 0;        for ($i = 0; $i < count($this->_edits); $i++) {            $orig = &$this->_edits[$i]->orig;            if (is_array($orig)) {                $orig = array_slice($from_lines, $xi, count($orig));                $xi += count($orig);            }            $final = &$this->_edits[$i]->final;            if (is_array($final)) {                $final = array_slice($to_lines, $yi, count($final));                $yi += count($final);            }        }    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op {    var $orig;    var $final;    function &reverse()    {        trigger_error('Abstract method', E_USER_ERROR);    }    function norig()    {        return $this->orig ? count($this->orig) : 0;    }    function nfinal()    {        return $this->final ? count($this->final) : 0;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_copy extends Text_Diff_Op {    function Text_Diff_Op_copy($orig, $final = false)    {        if (!is_array($final)) {            $final = $orig;        }        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_copy($this->final, $this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_delete extends Text_Diff_Op {    function Text_Diff_Op_delete($lines)    {        $this->orig = $lines;        $this->final = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_add($this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_add extends Text_Diff_Op {    function Text_Diff_Op_add($lines)    {        $this->final = $lines;        $this->orig = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_delete($this->final);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_change extends Text_Diff_Op {    function Text_Diff_Op_change($orig, $final)    {        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_change($this->final, $this->orig);        return $reverse;    }}
<?php/** * Privacy Options Settings Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Privacy Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can choose whether or not your site will be crawled by robots, ping services, and spiders. If you want those services to ignore your site, click the second option here. Note that your privacy is not complete; your site is still visible on the web.') . '</p>' .	'<p>' . __('When this setting is in effect a reminder is shown in the header of these administration screens that says, &#8220;Search Engines Blocked,&#8221; to remind you that your site is not being crawled.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Privacy_SubPanel" target="_blank">Privacy Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('privacy'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Site Visibility') ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Site Visibility') ?> </span></legend><input id="blog-public" type="radio" name="blog_public" value="1" <?php checked('1', get_option('blog_public')); ?> /><label for="blog-public"><?php _e('I would like my site to be visible to everyone, including search engines (like Google, Bing, Technorati) and archivers');?></label><br/><input id="blog-norobots" type="radio" name="blog_public" value="0" <?php checked('0', get_option('blog_public')); ?> /><label for="blog-norobots"><?php _e('I would like to block search engines, but allow normal visitors'); ?></label><?php do_action('blog_privacy_selector'); ?></fieldset></td></tr><?php do_settings_fields('privacy', 'default'); ?></table><?php do_settings_sections('privacy'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * WordPress core upgrade functionality. * * @package WordPress * @subpackage Administration * @since 2.7.0 *//** * Stores files to be deleted. * * @since 2.7.0 * @global array $_old_files * @var array * @name $_old_files */global $_old_files;$_old_files = array('wp-admin/bookmarklet.php','wp-admin/css/upload.css','wp-admin/css/upload-rtl.css','wp-admin/css/press-this-ie.css','wp-admin/css/press-this-ie-rtl.css','wp-admin/edit-form.php','wp-admin/link-import.php','wp-admin/images/box-bg-left.gif','wp-admin/images/box-bg-right.gif','wp-admin/images/box-bg.gif','wp-admin/images/box-butt-left.gif','wp-admin/images/box-butt-right.gif','wp-admin/images/box-butt.gif','wp-admin/images/box-head-left.gif','wp-admin/images/box-head-right.gif','wp-admin/images/box-head.gif','wp-admin/images/heading-bg.gif','wp-admin/images/login-bkg-bottom.gif','wp-admin/images/login-bkg-tile.gif','wp-admin/images/notice.gif','wp-admin/images/toggle.gif','wp-admin/images/comment-stalk-classic.gif','wp-admin/images/comment-stalk-fresh.gif','wp-admin/images/comment-stalk-rtl.gif','wp-admin/images/comment-pill.gif','wp-admin/images/del.png','wp-admin/images/media-button-gallery.gif','wp-admin/images/media-buttons.gif','wp-admin/images/tail.gif','wp-admin/images/gear.png','wp-admin/images/tab.png','wp-admin/images/postbox-bg.gif','wp-admin/includes/upload.php','wp-admin/js/dbx-admin-key.js','wp-admin/js/link-cat.js','wp-admin/js/forms.js','wp-admin/js/upload.js','wp-admin/js/set-post-thumbnail-handler.js','wp-admin/js/set-post-thumbnail-handler.dev.js','wp-admin/js/page.js','wp-admin/js/page.dev.js','wp-admin/js/slug.js','wp-admin/js/slug.dev.js','wp-admin/profile-update.php','wp-admin/templates.php','wp-includes/images/audio.png','wp-includes/images/css.png','wp-includes/images/default.png','wp-includes/images/doc.png','wp-includes/images/exe.png','wp-includes/images/html.png','wp-includes/images/js.png','wp-includes/images/pdf.png','wp-includes/images/swf.png','wp-includes/images/tar.png','wp-includes/images/text.png','wp-includes/images/video.png','wp-includes/images/zip.png','wp-includes/js/dbx.js','wp-includes/js/fat.js','wp-includes/js/list-manipulation.js','wp-includes/js/jquery/jquery.dimensions.min.js','wp-includes/js/tinymce/langs/en.js','wp-includes/js/tinymce/plugins/autosave/editor_plugin_src.js','wp-includes/js/tinymce/plugins/autosave/langs','wp-includes/js/tinymce/plugins/directionality/images','wp-includes/js/tinymce/plugins/directionality/langs','wp-includes/js/tinymce/plugins/inlinepopups/css','wp-includes/js/tinymce/plugins/inlinepopups/images','wp-includes/js/tinymce/plugins/inlinepopups/jscripts','wp-includes/js/tinymce/plugins/paste/images','wp-includes/js/tinymce/plugins/paste/jscripts','wp-includes/js/tinymce/plugins/paste/langs','wp-includes/js/tinymce/plugins/spellchecker/classes/HttpClient.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyGoogleSpell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspellShell.class.php','wp-includes/js/tinymce/plugins/spellchecker/css/spellchecker.css','wp-includes/js/tinymce/plugins/spellchecker/images','wp-includes/js/tinymce/plugins/spellchecker/langs','wp-includes/js/tinymce/plugins/spellchecker/tinyspell.php','wp-includes/js/tinymce/plugins/wordpress/images','wp-includes/js/tinymce/plugins/wordpress/langs','wp-includes/js/tinymce/plugins/wordpress/popups.css','wp-includes/js/tinymce/plugins/wordpress/wordpress.css','wp-includes/js/tinymce/plugins/wphelp','wp-includes/js/tinymce/themes/advanced/css','wp-includes/js/tinymce/themes/advanced/images','wp-includes/js/tinymce/themes/advanced/jscripts','wp-includes/js/tinymce/themes/advanced/langs','wp-includes/js/tinymce/tiny_mce_gzip.php','wp-includes/js/wp-ajax.js','wp-admin/admin-db.php','wp-admin/cat.js','wp-admin/categories.js','wp-admin/custom-fields.js','wp-admin/dbx-admin-key.js','wp-admin/edit-comments.js','wp-admin/install-rtl.css','wp-admin/install.css','wp-admin/upgrade-schema.php','wp-admin/upload-functions.php','wp-admin/upload-rtl.css','wp-admin/upload.css','wp-admin/upload.js','wp-admin/users.js','wp-admin/widgets-rtl.css','wp-admin/widgets.css','wp-admin/xfn.js','wp-includes/js/tinymce/license.html','wp-admin/cat-js.php','wp-admin/edit-form-ajax-cat.php','wp-admin/execute-pings.php','wp-admin/import/b2.php','wp-admin/import/btt.php','wp-admin/import/jkw.php','wp-admin/inline-uploading.php','wp-admin/link-categories.php','wp-admin/list-manipulation.js','wp-admin/list-manipulation.php','wp-includes/comment-functions.php','wp-includes/feed-functions.php','wp-includes/functions-compat.php','wp-includes/functions-formatting.php','wp-includes/functions-post.php','wp-includes/js/dbx-key.js','wp-includes/js/tinymce/plugins/autosave/langs/cs.js','wp-includes/js/tinymce/plugins/autosave/langs/sv.js','wp-includes/js/tinymce/themes/advanced/editor_template_src.js','wp-includes/links.php','wp-includes/pluggable-functions.php','wp-includes/template-functions-author.php','wp-includes/template-functions-category.php','wp-includes/template-functions-general.php','wp-includes/template-functions-links.php','wp-includes/template-functions-post.php','wp-includes/wp-l10n.php','wp-admin/import-b2.php','wp-admin/import-blogger.php','wp-admin/import-greymatter.php','wp-admin/import-livejournal.php','wp-admin/import-mt.php','wp-admin/import-rss.php','wp-admin/import-textpattern.php','wp-admin/quicktags.js','wp-images/fade-butt.png','wp-images/get-firefox.png','wp-images/header-shadow.png','wp-images/smilies','wp-images/wp-small.png','wp-images/wpminilogo.png','wp.php','wp-includes/gettext.php','wp-includes/streams.php',// MU'wp-admin/wpmu-admin.php','wp-admin/wpmu-blogs.php','wp-admin/wpmu-edit.php','wp-admin/wpmu-options.php','wp-admin/wpmu-themes.php','wp-admin/wpmu-upgrade-site.php','wp-admin/wpmu-users.php','wp-includes/wpmu-default-filters.php','wp-includes/wpmu-functions.php','wpmu-settings.php','index-install.php','README.txt','htaccess.dist','wp-admin/css/mu-rtl.css','wp-admin/css/mu.css','wp-admin/images/site-admin.png','wp-admin/includes/mu.php','wp-includes/images/wordpress-mu.png',// 3.0'wp-admin/categories.php','wp-admin/edit-category-form.php','wp-admin/edit-page-form.php','wp-admin/edit-pages.php','wp-admin/images/wp-logo.gif','wp-admin/js/wp-gears.dev.js','wp-admin/js/wp-gears.js','wp-admin/options-misc.php','wp-admin/page-new.php','wp-admin/page.php','wp-admin/rtl.css','wp-admin/rtl.dev.css','wp-admin/update-links.php','wp-admin/wp-admin.css','wp-admin/wp-admin.dev.css','wp-includes/js/codepress','wp-includes/js/jquery/autocomplete.dev.js','wp-includes/js/jquery/interface.js','wp-includes/js/jquery/autocomplete.js','wp-includes/js/scriptaculous/prototype.js','wp-includes/js/tinymce/wp-tinymce.js','wp-content/themes/twentyten/searchform.php','wp-admin/import','wp-admin/images/ico-edit.png','wp-admin/images/fav-top.png','wp-admin/images/ico-close.png','wp-admin/images/admin-header-footer.png','wp-admin/images/screen-options-left.gif','wp-admin/images/ico-add.png','wp-admin/images/browse-happy.gif','wp-admin/images/ico-viewpage.png',);/** * Upgrade the core of WordPress. * * This will create a .maintenance file at the base of the WordPress directory * to ensure that people can not access the web site, when the files are being * copied to their locations. * * The files in the {@link $_old_files} list will be removed and the new files * copied from the zip file after the database is upgraded. * * The steps for the upgrader for after the new release is downloaded and * unzipped is: *   1. Test unzipped location for select files to ensure that unzipped worked. *   2. Create the .maintenance file in current WordPress base. *   3. Copy new WordPress directory over old WordPress files. *   4. Upgrade WordPress to new version. *   5. Delete new WordPress directory path. *   6. Delete .maintenance file. *   7. Remove old files. *   8. Delete 'update_core' option. * * There are several areas of failure. For instance if PHP times out before step * 6, then you will not be able to access any portion of your site. Also, since * the upgrade will not continue where it left off, you will not be able to * automatically remove old files and remove the 'update_core' option. This * isn't that bad. * * If the copy of the new WordPress over the old fails, then the worse is that * the new WordPress directory will remain. * * If it is assumed that every file will be copied over, including plugins and * themes, then if you edit the default theme, you should rename it, so that * your changes remain. * * @since 2.7.0 * * @param string $from New release unzipped path. * @param string $to Path to old WordPress installation. * @return WP_Error|null WP_Error on failure, null on success. */function update_core($from, $to) {	global $wp_filesystem, $_old_files, $wpdb;	@set_time_limit( 300 );	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$required_php_version = '4.3';	$required_mysql_version = '4.1.2';	$wp_version = '3.0';	$php_compat     = version_compare( $php_version, $required_php_version, '>=' );	$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );	if ( !$mysql_compat || !$php_compat )		$wp_filesystem->delete($from, true);	if ( !$mysql_compat && !$php_compat )		return new WP_Error( 'php_mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version ) );	elseif ( !$php_compat )		return new WP_Error( 'php_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version ) );	elseif ( !$mysql_compat )		return new WP_Error( 'mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version ) );	// Sanity check the unzipped distribution	apply_filters('update_feedback', __('Verifying the unpacked files&#8230;'));	$distro = '';	$roots = array( '/wordpress', '/wordpress-mu' );	foreach( $roots as $root ) {		if ( $wp_filesystem->exists($from . $root . '/wp-settings.php') && $wp_filesystem->exists($from . $root . '/wp-admin/admin.php') &&			$wp_filesystem->exists($from . $root . '/wp-includes/functions.php') ) {			$distro = $root;			break;		}	}	if ( !$distro ) {		$wp_filesystem->delete($from, true);		return new WP_Error('insane_distro', __('The update could not be unpacked') );	}	apply_filters('update_feedback', __('Installing the latest version&#8230;'));	// Create maintenance file to signal that we are upgrading	$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';	$maintenance_file = $to . '.maintenance';	$wp_filesystem->delete($maintenance_file);	$wp_filesystem->put_contents($maintenance_file, $maintenance_string, FS_CHMOD_FILE);	// Copy new versions of WP files into place.	$result = copy_dir($from . $distro, $to);	if ( is_wp_error($result) ) {		$wp_filesystem->delete($maintenance_file);		$wp_filesystem->delete($from, true);		return $result;	}	// Remove old files	foreach ( $_old_files as $old_file ) {		$old_file = $to . $old_file;		if ( !$wp_filesystem->exists($old_file) )			continue;		$wp_filesystem->delete($old_file, true);	}	// Upgrade DB with separate request	apply_filters('update_feedback', __('Upgrading database&#8230;'));	$db_upgrade_url = admin_url('upgrade.php?step=upgrade_db');	wp_remote_post($db_upgrade_url, array('timeout' => 60));	// Remove working directory	$wp_filesystem->delete($from, true);	// Force refresh of update information	if ( function_exists('delete_site_transient') )		delete_site_transient('update_core');	else		delete_option('update_core');	// Remove maintenance file, we're done.	$wp_filesystem->delete($maintenance_file);}?>
<?php/** * Date and Time Locale object * * @package WordPress * @subpackage i18n *//** * Class that loads the calendar locale. * * @since 2.1.0 */class WP_Locale {	/**	 * Stores the translated strings for the full weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday;	/**	 * Stores the translated strings for the one character weekday names.	 *	 * There is a hack to make sure that Tuesday and Thursday, as well	 * as Sunday and Saturday don't conflict. See init() method for more.	 *	 * @see WP_Locale::init() for how to handle the hack.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_initial;	/**	 * Stores the translated strings for the abbreviated weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_abbrev;	/**	 * Stores the translated strings for the full month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month;	/**	 * Stores the translated strings for the abbreviated month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month_abbrev;	/**	 * Stores the translated strings for 'am' and 'pm'.	 *	 * Also the capalized versions.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $meridiem;	/**	 * The text direction of the locale language.	 *	 * Default is left to right 'ltr'.	 *	 * @since 2.1.0	 * @var string	 * @access private	 */	var $text_direction = 'ltr';	/**	 * Imports the global version to the class property.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $locale_vars = array('text_direction');	/**	 * Sets up the translated strings and object properties.	 *	 * The method creates the translatable strings for various	 * calendar elements. Which allows for specifying locale	 * specific calendar names and text direction.	 *	 * @since 2.1.0	 * @access private	 */	function init() {		// The Weekdays		$this->weekday[0] = /* translators: weekday */ __('Sunday');		$this->weekday[1] = /* translators: weekday */ __('Monday');		$this->weekday[2] = /* translators: weekday */ __('Tuesday');		$this->weekday[3] = /* translators: weekday */ __('Wednesday');		$this->weekday[4] = /* translators: weekday */ __('Thursday');		$this->weekday[5] = /* translators: weekday */ __('Friday');		$this->weekday[6] = /* translators: weekday */ __('Saturday');		// The first letter of each day.  The _%day%_initial suffix is a hack to make		// sure the day initials are unique.		$this->weekday_initial[__('Sunday')]    = /* translators: one-letter abbreviation of the weekday */ __('S_Sunday_initial');		$this->weekday_initial[__('Monday')]    = /* translators: one-letter abbreviation of the weekday */ __('M_Monday_initial');		$this->weekday_initial[__('Tuesday')]   = /* translators: one-letter abbreviation of the weekday */ __('T_Tuesday_initial');		$this->weekday_initial[__('Wednesday')] = /* translators: one-letter abbreviation of the weekday */ __('W_Wednesday_initial');		$this->weekday_initial[__('Thursday')]  = /* translators: one-letter abbreviation of the weekday */ __('T_Thursday_initial');		$this->weekday_initial[__('Friday')]    = /* translators: one-letter abbreviation of the weekday */ __('F_Friday_initial');		$this->weekday_initial[__('Saturday')]  = /* translators: one-letter abbreviation of the weekday */ __('S_Saturday_initial');		foreach ($this->weekday_initial as $weekday_ => $weekday_initial_) {			$this->weekday_initial[$weekday_] = preg_replace('/_.+_initial$/', '', $weekday_initial_);		}		// Abbreviations for each day.		$this->weekday_abbrev[__('Sunday')]    = /* translators: three-letter abbreviation of the weekday */ __('Sun');		$this->weekday_abbrev[__('Monday')]    = /* translators: three-letter abbreviation of the weekday */ __('Mon');		$this->weekday_abbrev[__('Tuesday')]   = /* translators: three-letter abbreviation of the weekday */ __('Tue');		$this->weekday_abbrev[__('Wednesday')] = /* translators: three-letter abbreviation of the weekday */ __('Wed');		$this->weekday_abbrev[__('Thursday')]  = /* translators: three-letter abbreviation of the weekday */ __('Thu');		$this->weekday_abbrev[__('Friday')]    = /* translators: three-letter abbreviation of the weekday */ __('Fri');		$this->weekday_abbrev[__('Saturday')]  = /* translators: three-letter abbreviation of the weekday */ __('Sat');		// The Months		$this->month['01'] = /* translators: month name */ __('January');		$this->month['02'] = /* translators: month name */ __('February');		$this->month['03'] = /* translators: month name */ __('March');		$this->month['04'] = /* translators: month name */ __('April');		$this->month['05'] = /* translators: month name */ __('May');		$this->month['06'] = /* translators: month name */ __('June');		$this->month['07'] = /* translators: month name */ __('July');		$this->month['08'] = /* translators: month name */ __('August');		$this->month['09'] = /* translators: month name */ __('September');		$this->month['10'] = /* translators: month name */ __('October');		$this->month['11'] = /* translators: month name */ __('November');		$this->month['12'] = /* translators: month name */ __('December');		// Abbreviations for each month. Uses the same hack as above to get around the		// 'May' duplication.		$this->month_abbrev[__('January')] = /* translators: three-letter abbreviation of the month */ __('Jan_January_abbreviation');		$this->month_abbrev[__('February')] = /* translators: three-letter abbreviation of the month */ __('Feb_February_abbreviation');		$this->month_abbrev[__('March')] = /* translators: three-letter abbreviation of the month */ __('Mar_March_abbreviation');		$this->month_abbrev[__('April')] = /* translators: three-letter abbreviation of the month */ __('Apr_April_abbreviation');		$this->month_abbrev[__('May')] = /* translators: three-letter abbreviation of the month */ __('May_May_abbreviation');		$this->month_abbrev[__('June')] = /* translators: three-letter abbreviation of the month */ __('Jun_June_abbreviation');		$this->month_abbrev[__('July')] = /* translators: three-letter abbreviation of the month */ __('Jul_July_abbreviation');		$this->month_abbrev[__('August')] = /* translators: three-letter abbreviation of the month */ __('Aug_August_abbreviation');		$this->month_abbrev[__('September')] = /* translators: three-letter abbreviation of the month */ __('Sep_September_abbreviation');		$this->month_abbrev[__('October')] = /* translators: three-letter abbreviation of the month */ __('Oct_October_abbreviation');		$this->month_abbrev[__('November')] = /* translators: three-letter abbreviation of the month */ __('Nov_November_abbreviation');		$this->month_abbrev[__('December')] = /* translators: three-letter abbreviation of the month */ __('Dec_December_abbreviation');		foreach ($this->month_abbrev as $month_ => $month_abbrev_) {			$this->month_abbrev[$month_] = preg_replace('/_.+_abbreviation$/', '', $month_abbrev_);		}		// The Meridiems		$this->meridiem['am'] = __('am');		$this->meridiem['pm'] = __('pm');		$this->meridiem['AM'] = __('AM');		$this->meridiem['PM'] = __('PM');		// Numbers formatting		// See http://php.net/number_format		/* translators: $thousands_sep argument for http://php.net/number_format, default is , */		$trans = __('number_format_thousands_sep');		$this->number_format['thousands_sep'] = ('number_format_thousands_sep' == $trans) ? ',' : $trans;		/* translators: $dec_point argument for http://php.net/number_format, default is . */		$trans = __('number_format_decimal_point');		$this->number_format['decimal_point'] = ('number_format_decimal_point' == $trans) ? '.' : $trans;		// Import global locale vars set during inclusion of $locale.php.		foreach ( (array) $this->locale_vars as $var ) {			if ( isset($GLOBALS[$var]) )				$this->$var = $GLOBALS[$var];		}	}	/**	 * Retrieve the full translated weekday word.	 *	 * Week starts on translated Sunday and can be fetched	 * by using 0 (zero). So the week starts with 0 (zero)	 * and ends on Saturday with is fetched by using 6 (six).	 *	 * @since 2.1.0	 * @access public	 *	 * @param int $weekday_number 0 for Sunday through 6 Saturday	 * @return string Full translated weekday	 */	function get_weekday($weekday_number) {		return $this->weekday[$weekday_number];	}	/**	 * Retrieve the translated weekday initial.	 *	 * The weekday initial is retrieved by the translated	 * full weekday word. When translating the weekday initial	 * pay attention to make sure that the starting letter does	 * not conflict.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name	 * @return string	 */	function get_weekday_initial($weekday_name) {		return $this->weekday_initial[$weekday_name];	}	/**	 * Retrieve the translated weekday abbreviation.	 *	 * The weekday abbreviation is retrieved by the translated	 * full weekday word.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name Full translated weekday word	 * @return string Translated weekday abbreviation	 */	function get_weekday_abbrev($weekday_name) {		return $this->weekday_abbrev[$weekday_name];	}	/**	 * Retrieve the full translated month by month number.	 *	 * The $month_number parameter has to be a string	 * because it must have the '0' in front of any number	 * that is less than 10. Starts from '01' and ends at	 * '12'.	 *	 * You can use an integer instead and it will add the	 * '0' before the numbers less than 10 for you.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $month_number '01' through '12'	 * @return string Translated full month name	 */	function get_month($month_number) {		return $this->month[zeroise($month_number, 2)];	}	/**	 * Retrieve translated version of month abbreviation string.	 *	 * The $month_name parameter is expected to be the translated or	 * translatable version of the month.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $month_name Translated month to get abbreviated version	 * @return string Translated abbreviated month	 */	function get_month_abbrev($month_name) {		return $this->month_abbrev[$month_name];	}	/**	 * Retrieve translated version of meridiem string.	 *	 * The $meridiem parameter is expected to not be translated.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $meridiem Either 'am', 'pm', 'AM', or 'PM'. Not translated version.	 * @return string Translated version	 */	function get_meridiem($meridiem) {		return $this->meridiem[$meridiem];	}	/**	 * Global variables are deprecated. For backwards compatibility only.	 *	 * @deprecated For backwards compatibility only.	 * @access private	 *	 * @since 2.1.0	 */	function register_globals() {		$GLOBALS['weekday']         = $this->weekday;		$GLOBALS['weekday_initial'] = $this->weekday_initial;		$GLOBALS['weekday_abbrev']  = $this->weekday_abbrev;		$GLOBALS['month']           = $this->month;		$GLOBALS['month_abbrev']    = $this->month_abbrev;	}	/**	 * PHP4 style constructor which calls helper methods to set up object variables	 *	 * @uses WP_Locale::init()	 * @uses WP_Locale::register_globals()	 * @since 2.1.0	 *	 * @return WP_Locale	 */	function WP_Locale() {		$this->init();		$this->register_globals();	}	/**	 * Checks if current locale is RTL.	 *	 * @since 3.0.0	 * @return bool Whether locale is RTL.	 */	 function is_rtl() {	 	return 'rtl' == $this->text_direction;	 }}/** * Checks if current locale is RTL. * * @since 3.0.0 * @return bool Whether locale is RTL. */function is_rtl() {	global $wp_locale;	return $wp_locale->is_rtl();}?>
<?phpif ( !defined('ABSPATH') )	exit;require(ABSPATH . 'wp-includes/version.php');$man_version = md5( $tinymce_version . $manifest_version );$mce_ver = "ver=$tinymce_version";/** * Retrieve list of all cacheable WP files * * Array format: file, version (optional), bool (whether to use src and set ignoreQuery, defaults to true) */function &get_manifest() {	global $mce_ver;	$files = array(		array('images/align-center.png'),		array('images/align-left.png'),		array('images/align-none.png'),		array('images/align-right.png'),		array('images/archive-link.png'),		array('images/blue-grad.png'),		array('images/bubble_bg.gif'),		array('images/bubble_bg-rtl.gif'),		array('images/button-grad.png'),		array('images/button-grad-active.png'),		array('images/comment-grey-bubble.png'),		array('images/date-button.gif'),		array('images/ed-bg.gif'),		array('images/fade-butt.png'),		array('images/fav.png'),		array('images/fav-arrow.gif'),		array('images/fav-arrow-rtl.gif'),		array('images/generic.png'),		array('images/gray-grad.png'),		array('images/icons32.png'),		array('images/icons32-vs.png'),		array('images/list.png'),		array('images/list-vs.png'),		array('images/wpspin_light.gif'),		array('images/wpspin_dark.gif'),		array('images/logo.gif'),		array('images/logo-ghost.png'),		array('images/logo-login.gif'),		array('images/media-button-image.gif'),		array('images/media-button-music.gif'),		array('images/media-button-other.gif'),		array('images/media-button-video.gif'),		array('images/menu.png'),		array('images/menu-vs.png'),		array('images/menu-arrows.gif'),		array('images/menu-bits.gif'),		array('images/menu-bits-rtl.gif'),		array('images/menu-dark.gif'),		array('images/menu-dark-rtl.gif'),		array('images/no.png'),		array('images/required.gif'),		array('images/resize.gif'),		array('images/screen-options-right.gif'),		array('images/screen-options-right-up.gif'),		array('images/se.png'),		array('images/star.gif'),		array('images/toggle-arrow.gif'),		array('images/toggle-arrow-rtl.gif'),		array('images/white-grad.png'),		array('images/white-grad-active.png'),		array('images/wordpress-logo.png'),		array('images/wp-logo.png'),		array('images/xit.gif'),		array('images/yes.png'),		array('../wp-includes/images/crystal/archive.png'),		array('../wp-includes/images/crystal/audio.png'),		array('../wp-includes/images/crystal/code.png'),		array('../wp-includes/images/crystal/default.png'),		array('../wp-includes/images/crystal/document.png'),		array('../wp-includes/images/crystal/interactive.png'),		array('../wp-includes/images/crystal/text.png'),		array('../wp-includes/images/crystal/video.png'),		array('../wp-includes/images/crystal/spreadsheet.png'),		array('../wp-includes/images/rss.png'),		array('../wp-includes/images/blank.gif'),		array('../wp-includes/images/upload.png'),		array('../wp-includes/js/thickbox/loadingAnimation.gif'),		array('../wp-includes/js/thickbox/tb-close.png'),	);	if ( @is_file('../wp-includes/js/tinymce/tiny_mce.js') ) :	$mce = array(		array('../wp-includes/js/tinymce/wp-tinymce.php', $mce_ver),		array('../wp-includes/js/tinymce/tiny_mce.js', $mce_ver),		array('../wp-includes/js/tinymce/langs/wp-langs-en.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/mctabs.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/validate.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/form_utils.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/editable_selects.js', $mce_ver),		array('../wp-includes/js/tinymce/tiny_mce_popup.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/editor_template.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/source_editor.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/anchor.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/image.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/link.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/color_picker.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/charmap.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/color_picker.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/charmap.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/image.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/link.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/source_editor.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/anchor.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/ui.css', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/content.css', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/dialog.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/fullscreen/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/fullscreen/fullscreen.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/template.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/window.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/js/media.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/media.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/css/media.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/js/pasteword.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/js/pastetext.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/pasteword.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/blank.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/pastetext.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/safari/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/spellchecker/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/spellchecker/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/tabfocus/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wordpress/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wordpress/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/editimage.html', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/js/editimage.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/css/editimage.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/css/editimage-rtl.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpgallery/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/img/icons.gif'),		array('../wp-includes/js/tinymce/themes/advanced/img/colorpicker.jpg'),		array('../wp-includes/js/tinymce/themes/advanced/img/fm.gif'),		array('../wp-includes/js/tinymce/themes/advanced/img/gotmoxie.png'),		array('../wp-includes/js/tinymce/themes/advanced/img/sflogo.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/butt2.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/fade-butt.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/tabs.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/down_arrow.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/progress.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/menu_check.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/menu_arrow.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/drag.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/corners.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/buttons.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/horizontal.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/alert.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/button.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/confirm.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/vertical.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/flash.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/flv_player.swf'),		array('../wp-includes/js/tinymce/plugins/media/img/quicktime.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/realmedia.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/shockwave.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/windowsmedia.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/trans.gif'),		array('../wp-includes/js/tinymce/plugins/spellchecker/img/wline.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/more.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/more_bug.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/page.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/page_bug.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/toolbars.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/help.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/image.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/media.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/video.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/audio.gif'),		array('../wp-includes/js/tinymce/plugins/wpeditimage/img/image.png'),		array('../wp-includes/js/tinymce/plugins/wpeditimage/img/delete.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/delete.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/edit.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/gallery.png')	);	$files = array_merge($files, $mce);	endif;	return $files;}
<?phpif ( !class_exists( 'SimplePie' ) ) :/** * SimplePie * * A PHP-Based RSS and Atom Feed Framework. * Takes the hard work out of managing a complete RSS/Atom solution. * * Copyright (c) 2004-2009, Ryan Parman and Geoffrey Sneddon * All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, are * permitted provided that the following conditions are met: * * 	* Redistributions of source code must retain the above copyright notice, this list of * 	  conditions and the following disclaimer. * * 	* Redistributions in binary form must reproduce the above copyright notice, this list * 	  of conditions and the following disclaimer in the documentation and/or other materials * 	  provided with the distribution. * * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used * 	  to endorse or promote products derived from this software without specific prior * 	  written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. * * @package SimplePie * @version 1.2 * @copyright 2004-2009 Ryan Parman, Geoffrey Sneddon * @author Ryan Parman * @author Geoffrey Sneddon * @link http://simplepie.org/ SimplePie * @link http://simplepie.org/support/ Please submit all bug reports and feature requests to the SimplePie forums * @license http://www.opensource.org/licenses/bsd-license.php BSD License * @todo phpDoc comments *//** * SimplePie Name */define('SIMPLEPIE_NAME', 'SimplePie');/** * SimplePie Version */define('SIMPLEPIE_VERSION', '1.2');/** * SimplePie Build */define('SIMPLEPIE_BUILD', '20090627192103');/** * SimplePie Website URL */define('SIMPLEPIE_URL', 'http://simplepie.org');/** * SimplePie Useragent * @see SimplePie::set_useragent() */define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);/** * SimplePie Linkback */define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');/** * No Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_NONE', 0);/** * Feed Link Element Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);/** * Local Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);/** * Local Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);/** * Remote Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);/** * Remote Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);/** * All Feed Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_ALL', 31);/** * No known feed type */define('SIMPLEPIE_TYPE_NONE', 0);/** * RSS 0.90 */define('SIMPLEPIE_TYPE_RSS_090', 1);/** * RSS 0.91 (Netscape) */define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);/** * RSS 0.91 (Userland) */define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);/** * RSS 0.91 (both Netscape and Userland) */define('SIMPLEPIE_TYPE_RSS_091', 6);/** * RSS 0.92 */define('SIMPLEPIE_TYPE_RSS_092', 8);/** * RSS 0.93 */define('SIMPLEPIE_TYPE_RSS_093', 16);/** * RSS 0.94 */define('SIMPLEPIE_TYPE_RSS_094', 32);/** * RSS 1.0 */define('SIMPLEPIE_TYPE_RSS_10', 64);/** * RSS 2.0 */define('SIMPLEPIE_TYPE_RSS_20', 128);/** * RDF-based RSS */define('SIMPLEPIE_TYPE_RSS_RDF', 65);/** * Non-RDF-based RSS (truly intended as syndication format) */define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);/** * All RSS */define('SIMPLEPIE_TYPE_RSS_ALL', 255);/** * Atom 0.3 */define('SIMPLEPIE_TYPE_ATOM_03', 256);/** * Atom 1.0 */define('SIMPLEPIE_TYPE_ATOM_10', 512);/** * All Atom */define('SIMPLEPIE_TYPE_ATOM_ALL', 768);/** * All feed types */define('SIMPLEPIE_TYPE_ALL', 1023);/** * No construct */define('SIMPLEPIE_CONSTRUCT_NONE', 0);/** * Text construct */define('SIMPLEPIE_CONSTRUCT_TEXT', 1);/** * HTML construct */define('SIMPLEPIE_CONSTRUCT_HTML', 2);/** * XHTML construct */define('SIMPLEPIE_CONSTRUCT_XHTML', 4);/** * base64-encoded construct */define('SIMPLEPIE_CONSTRUCT_BASE64', 8);/** * IRI construct */define('SIMPLEPIE_CONSTRUCT_IRI', 16);/** * A construct that might be HTML */define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);/** * All constructs */define('SIMPLEPIE_CONSTRUCT_ALL', 63);/** * Don't change case */define('SIMPLEPIE_SAME_CASE', 1);/** * Change to lowercase */define('SIMPLEPIE_LOWERCASE', 2);/** * Change to uppercase */define('SIMPLEPIE_UPPERCASE', 4);/** * PCRE for HTML attributes */define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');/** * PCRE for XML attributes */define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');/** * XML Namespace */define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');/** * Atom 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');/** * Atom 0.3 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');/** * RDF Namespace */define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');/** * RSS 0.90 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');/** * RSS 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');/** * RSS 1.0 Content Module Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');/** * RSS 2.0 Namespace * (Stupid, I know, but I'm certain it will confuse people less with support.) */define('SIMPLEPIE_NAMESPACE_RSS_20', '');/** * DC 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');/** * DC 1.1 Namespace */define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');/** * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace */define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');/** * GeoRSS Namespace */define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');/** * Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');/** * Wrong Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');/** * iTunes RSS Namespace */define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');/** * XHTML Namespace */define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');/** * IANA Link Relations Registry */define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');/** * Whether we're running on PHP5 */define('SIMPLEPIE_PHP5', version_compare(PHP_VERSION, '5.0.0', '>='));/** * No file source */define('SIMPLEPIE_FILE_SOURCE_NONE', 0);/** * Remote file source */define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);/** * Local file source */define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);/** * fsockopen() file source */define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);/** * cURL file source */define('SIMPLEPIE_FILE_SOURCE_CURL', 8);/** * file_get_contents() file source */define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);/** * SimplePie * * @package SimplePie */class SimplePie{	/**	 * @var array Raw data	 * @access private	 */	var $data = array();	/**	 * @var mixed Error string	 * @access private	 */	var $error;	/**	 * @var object Instance of SimplePie_Sanitize (or other class)	 * @see SimplePie::set_sanitize_class()	 * @access private	 */	var $sanitize;	/**	 * @var string SimplePie Useragent	 * @see SimplePie::set_useragent()	 * @access private	 */	var $useragent = SIMPLEPIE_USERAGENT;	/**	 * @var string Feed URL	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $feed_url;	/**	 * @var object Instance of SimplePie_File to use as a feed	 * @see SimplePie::set_file()	 * @access private	 */	var $file;	/**	 * @var string Raw feed data	 * @see SimplePie::set_raw_data()	 * @access private	 */	var $raw_data;	/**	 * @var int Timeout for fetching remote files	 * @see SimplePie::set_timeout()	 * @access private	 */	var $timeout = 10;	/**	 * @var bool Forces fsockopen() to be used for remote files instead	 * of cURL, even if a new enough version is installed	 * @see SimplePie::force_fsockopen()	 * @access private	 */	var $force_fsockopen = false;	/**	 * @var bool Force the given data/URL to be treated as a feed no matter what	 * it appears like	 * @see SimplePie::force_feed()	 * @access private	 */	var $force_feed = false;	/**	 * @var bool Enable/Disable XML dump	 * @see SimplePie::enable_xml_dump()	 * @access private	 */	var $xml_dump = false;	/**	 * @var bool Enable/Disable Caching	 * @see SimplePie::enable_cache()	 * @access private	 */	var $cache = true;	/**	 * @var int Cache duration (in seconds)	 * @see SimplePie::set_cache_duration()	 * @access private	 */	var $cache_duration = 3600;	/**	 * @var int Auto-discovery cache duration (in seconds)	 * @see SimplePie::set_autodiscovery_cache_duration()	 * @access private	 */	var $autodiscovery_cache_duration = 604800; // 7 Days.	/**	 * @var string Cache location (relative to executing script)	 * @see SimplePie::set_cache_location()	 * @access private	 */	var $cache_location = './cache';	/**	 * @var string Function that creates the cache filename	 * @see SimplePie::set_cache_name_function()	 * @access private	 */	var $cache_name_function = 'md5';	/**	 * @var bool Reorder feed by date descending	 * @see SimplePie::enable_order_by_date()	 * @access private	 */	var $order_by_date = true;	/**	 * @var mixed Force input encoding to be set to the follow value	 * (false, or anything type-cast to false, disables this feature)	 * @see SimplePie::set_input_encoding()	 * @access private	 */	var $input_encoding = false;	/**	 * @var int Feed Autodiscovery Level	 * @see SimplePie::set_autodiscovery_level()	 * @access private	 */	var $autodiscovery = SIMPLEPIE_LOCATOR_ALL;	/**	 * @var string Class used for caching feeds	 * @see SimplePie::set_cache_class()	 * @access private	 */	var $cache_class = 'SimplePie_Cache';	/**	 * @var string Class used for locating feeds	 * @see SimplePie::set_locator_class()	 * @access private	 */	var $locator_class = 'SimplePie_Locator';	/**	 * @var string Class used for parsing feeds	 * @see SimplePie::set_parser_class()	 * @access private	 */	var $parser_class = 'SimplePie_Parser';	/**	 * @var string Class used for fetching feeds	 * @see SimplePie::set_file_class()	 * @access private	 */	var $file_class = 'SimplePie_File';	/**	 * @var string Class used for items	 * @see SimplePie::set_item_class()	 * @access private	 */	var $item_class = 'SimplePie_Item';	/**	 * @var string Class used for authors	 * @see SimplePie::set_author_class()	 * @access private	 */	var $author_class = 'SimplePie_Author';	/**	 * @var string Class used for categories	 * @see SimplePie::set_category_class()	 * @access private	 */	var $category_class = 'SimplePie_Category';	/**	 * @var string Class used for enclosures	 * @see SimplePie::set_enclosures_class()	 * @access private	 */	var $enclosure_class = 'SimplePie_Enclosure';	/**	 * @var string Class used for Media RSS <media:text> captions	 * @see SimplePie::set_caption_class()	 * @access private	 */	var $caption_class = 'SimplePie_Caption';	/**	 * @var string Class used for Media RSS <media:copyright>	 * @see SimplePie::set_copyright_class()	 * @access private	 */	var $copyright_class = 'SimplePie_Copyright';	/**	 * @var string Class used for Media RSS <media:credit>	 * @see SimplePie::set_credit_class()	 * @access private	 */	var $credit_class = 'SimplePie_Credit';	/**	 * @var string Class used for Media RSS <media:rating>	 * @see SimplePie::set_rating_class()	 * @access private	 */	var $rating_class = 'SimplePie_Rating';	/**	 * @var string Class used for Media RSS <media:restriction>	 * @see SimplePie::set_restriction_class()	 * @access private	 */	var $restriction_class = 'SimplePie_Restriction';	/**	 * @var string Class used for content-type sniffing	 * @see SimplePie::set_content_type_sniffer_class()	 * @access private	 */	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	/**	 * @var string Class used for item sources.	 * @see SimplePie::set_source_class()	 * @access private	 */	var $source_class = 'SimplePie_Source';	/**	 * @var mixed Set javascript query string parameter (false, or	 * anything type-cast to false, disables this feature)	 * @see SimplePie::set_javascript()	 * @access private	 */	var $javascript = 'js';	/**	 * @var int Maximum number of feeds to check with autodiscovery	 * @see SimplePie::set_max_checked_feeds()	 * @access private	 */	var $max_checked_feeds = 10;	/**	 * @var array All the feeds found during the autodiscovery process	 * @see SimplePie::get_all_discovered_feeds()	 * @access private	 */	var $all_discovered_feeds = array();	/**	 * @var string Web-accessible path to the handler_favicon.php file.	 * @see SimplePie::set_favicon_handler()	 * @access private	 */	var $favicon_handler = '';	/**	 * @var string Web-accessible path to the handler_image.php file.	 * @see SimplePie::set_image_handler()	 * @access private	 */	var $image_handler = '';	/**	 * @var array Stores the URLs when multiple feeds are being initialized.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $multifeed_url = array();	/**	 * @var array Stores SimplePie objects when multiple feeds initialized.	 * @access private	 */	var $multifeed_objects = array();	/**	 * @var array Stores the get_object_vars() array for use with multifeeds.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $config_settings = null;	/**	 * @var integer Stores the number of items to return per-feed with multifeeds.	 * @see SimplePie::set_item_limit()	 * @access private	 */	var $item_limit = 0;	/**	 * @var array Stores the default attributes to be stripped by strip_attributes().	 * @see SimplePie::strip_attributes()	 * @access private	 */	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	/**	 * @var array Stores the default tags to be stripped by strip_htmltags().	 * @see SimplePie::strip_htmltags()	 * @access private	 */	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	/**	 * The SimplePie class contains feed level data and options	 *	 * There are two ways that you can create a new SimplePie object. The first	 * is by passing a feed URL as a parameter to the SimplePie constructor	 * (as well as optionally setting the cache location and cache expiry). This	 * will initialise the whole feed with all of the default settings, and you	 * can begin accessing methods and properties immediately.	 *	 * The second way is to create the SimplePie object with no parameters	 * at all. This will enable you to set configuration options. After setting	 * them, you must initialise the feed using $feed->init(). At that point the	 * object's methods and properties will be available to you. This format is	 * what is used throughout this documentation.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param string $feed_url This is the URL you want to parse.	 * @param string $cache_location This is where you want the cache to be stored.	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.	 */	function SimplePie($feed_url = null, $cache_location = null, $cache_duration = null)	{		// Other objects, instances created here so we can set options on them		$this->sanitize =& new SimplePie_Sanitize;		// Set options if they're passed to the constructor		if ($cache_location !== null)		{			$this->set_cache_location($cache_location);		}		if ($cache_duration !== null)		{			$this->set_cache_duration($cache_duration);		}		// Only init the script if we're passed a feed URL		if ($feed_url !== null)		{			$this->set_feed_url($feed_url);			$this->init();		}	}	/**	 * Used for converting object to a string	 */	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			if (!empty($this->data['items']))			{				foreach ($this->data['items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['items']);			}			if (!empty($this->data['ordered_items']))			{				foreach ($this->data['ordered_items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['ordered_items']);			}		}	}	/**	 * Force the given data/URL to be treated as a feed no matter what it	 * appears like	 *	 * @access public	 * @since 1.1	 * @param bool $enable Force the given data/URL to be treated as a feed	 */	function force_feed($enable = false)	{		$this->force_feed = (bool) $enable;	}	/**	 * This is the URL of the feed you want to parse.	 *	 * This allows you to enter the URL of the feed you want to parse, or the	 * website you want to try to use auto-discovery on. This takes priority	 * over any set raw data.	 *	 * You can set multiple feeds to mash together by passing an array instead	 * of a string for the $url. Remember that with each additional feed comes	 * additional processing and resources.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.	 * @see SimplePie::set_raw_data()	 */	function set_feed_url($url)	{		if (is_array($url))		{			$this->multifeed_url = array();			foreach ($url as $value)			{				$this->multifeed_url[] = SimplePie_Misc::fix_protocol($value, 1);			}		}		else		{			$this->feed_url = SimplePie_Misc::fix_protocol($url, 1);		}	}	/**	 * Provides an instance of SimplePie_File to use as a feed	 *	 * @access public	 * @param object &$file Instance of SimplePie_File (or subclass)	 * @return bool True on success, false on failure	 */	function set_file(&$file)	{		if (is_a($file, 'SimplePie_File'))		{			$this->feed_url = $file->url;			$this->file =& $file;			return true;		}		return false;	}	/**	 * Allows you to use a string of RSS/Atom data instead of a remote feed.	 *	 * If you have a feed available as a string in PHP, you can tell SimplePie	 * to parse that data string instead of a remote feed. Any set feed URL	 * takes precedence.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param string $data RSS or Atom data as a string.	 * @see SimplePie::set_feed_url()	 */	function set_raw_data($data)	{		$this->raw_data = $data;	}	/**	 * Allows you to override the default timeout for fetching remote feeds.	 *	 * This allows you to change the maximum time the feed's server to respond	 * and send the feed back.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.	 */	function set_timeout($timeout = 10)	{		$this->timeout = (int) $timeout;	}	/**	 * Forces SimplePie to use fsockopen() instead of the preferred cURL	 * functions.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param bool $enable Force fsockopen() to be used	 */	function force_fsockopen($enable = false)	{		$this->force_fsockopen = (bool) $enable;	}	/**	 * Outputs the raw XML content of the feed, after it has gone through	 * SimplePie's filters.	 *	 * Used only for debugging, this function will output the XML content as	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up	 * before trying to parse it. Many parts of the feed are re-written in	 * memory, and in the end, you have a parsable feed. XML dump shows you the	 * actual XML that SimplePie tries to parse, which may or may not be very	 * different from the original feed.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable XML dump	 */	function enable_xml_dump($enable = false)	{		$this->xml_dump = (bool) $enable;	}	/**	 * Enables/disables caching in SimplePie.	 *	 * This option allows you to disable caching all-together in SimplePie.	 * However, disabling the cache can lead to longer load times.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable caching	 */	function enable_cache($enable = true)	{		$this->cache = (bool) $enable;	}	/**	 * Set the length of time (in seconds) that the contents of a feed	 * will be cached.	 *	 * @access public	 * @param int $seconds The feed content cache duration.	 */	function set_cache_duration($seconds = 3600)	{		$this->cache_duration = (int) $seconds;	}	/**	 * Set the length of time (in seconds) that the autodiscovered feed	 * URL will be cached.	 *	 * @access public	 * @param int $seconds The autodiscovered feed URL cache duration.	 */	function set_autodiscovery_cache_duration($seconds = 604800)	{		$this->autodiscovery_cache_duration = (int) $seconds;	}	/**	 * Set the file system location where the cached files should be stored.	 *	 * @access public	 * @param string $location The file system location.	 */	function set_cache_location($location = './cache')	{		$this->cache_location = (string) $location;	}	/**	 * Determines whether feed items should be sorted into reverse chronological order.	 *	 * @access public	 * @param bool $enable Sort as reverse chronological order.	 */	function enable_order_by_date($enable = true)	{		$this->order_by_date = (bool) $enable;	}	/**	 * Allows you to override the character encoding reported by the feed.	 *	 * @access public	 * @param string $encoding Character encoding.	 */	function set_input_encoding($encoding = false)	{		if ($encoding)		{			$this->input_encoding = (string) $encoding;		}		else		{			$this->input_encoding = false;		}	}	/**	 * Set how much feed autodiscovery to do	 *	 * @access public	 * @see SIMPLEPIE_LOCATOR_NONE	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY	 * @see SIMPLEPIE_LOCATOR_ALL	 * @param int $level Feed Autodiscovery Level (level can be a	 * combination of the above constants, see bitwise OR operator)	 */	function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL)	{		$this->autodiscovery = (int) $level;	}	/**	 * Allows you to change which class SimplePie uses for caching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_cache_class($class = 'SimplePie_Cache')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Cache'))		{			$this->cache_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for auto-discovery.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_locator_class($class = 'SimplePie_Locator')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Locator'))		{			$this->locator_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for XML parsing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_parser_class($class = 'SimplePie_Parser')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Parser'))		{			$this->parser_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for remote file fetching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_file_class($class = 'SimplePie_File')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_File'))		{			$this->file_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for data sanitization.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_sanitize_class($class = 'SimplePie_Sanitize')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Sanitize'))		{			$this->sanitize =& new $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling feed items.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_item_class($class = 'SimplePie_Item')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Item'))		{			$this->item_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling author data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_author_class($class = 'SimplePie_Author')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Author'))		{			$this->author_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling category data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_category_class($class = 'SimplePie_Category')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Category'))		{			$this->category_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for feed enclosures.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_enclosure_class($class = 'SimplePie_Enclosure')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Enclosure'))		{			$this->enclosure_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:text> captions	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_caption_class($class = 'SimplePie_Caption')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Caption'))		{			$this->caption_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:copyright>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_copyright_class($class = 'SimplePie_Copyright')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Copyright'))		{			$this->copyright_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:credit>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_credit_class($class = 'SimplePie_Credit')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Credit'))		{			$this->credit_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:rating>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_rating_class($class = 'SimplePie_Rating')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Rating'))		{			$this->rating_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:restriction>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_restriction_class($class = 'SimplePie_Restriction')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Restriction'))		{			$this->restriction_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for content-type sniffing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Content_Type_Sniffer'))		{			$this->content_type_sniffer_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses item sources.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_source_class($class = 'SimplePie_Source')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Source'))		{			$this->source_class = $class;			return true;		}		return false;	}	/**	 * Allows you to override the default user agent string.	 *	 * @access public	 * @param string $ua New user agent string.	 */	function set_useragent($ua = SIMPLEPIE_USERAGENT)	{		$this->useragent = (string) $ua;	}	/**	 * Set callback function to create cache filename with	 *	 * @access public	 * @param mixed $function Callback function	 */	function set_cache_name_function($function = 'md5')	{		if (is_callable($function))		{			$this->cache_name_function = $function;		}	}	/**	 * Set javascript query string parameter	 *	 * @access public	 * @param mixed $get Javascript query string parameter	 */	function set_javascript($get = 'js')	{		if ($get)		{			$this->javascript = (string) $get;		}		else		{			$this->javascript = false;		}	}	/**	 * Set options to make SP as fast as possible.  Forgoes a	 * substantial amount of data sanitization in favor of speed.	 *	 * @access public	 * @param bool $set Whether to set them or not	 */	function set_stupidly_fast($set = false)	{		if ($set)		{			$this->enable_order_by_date(false);			$this->remove_div(false);			$this->strip_comments(false);			$this->strip_htmltags(false);			$this->strip_attributes(false);			$this->set_image_handler(false);		}	}	/**	 * Set maximum number of feeds to check with autodiscovery	 *	 * @access public	 * @param int $max Maximum number of feeds to check	 */	function set_max_checked_feeds($max = 10)	{		$this->max_checked_feeds = (int) $max;	}	function remove_div($enable = true)	{		$this->sanitize->remove_div($enable);	}	function strip_htmltags($tags = '', $encode = null)	{		if ($tags === '')		{			$tags = $this->strip_htmltags;		}		$this->sanitize->strip_htmltags($tags);		if ($encode !== null)		{			$this->sanitize->encode_instead_of_strip($tags);		}	}	function encode_instead_of_strip($enable = true)	{		$this->sanitize->encode_instead_of_strip($enable);	}	function strip_attributes($attribs = '')	{		if ($attribs === '')		{			$attribs = $this->strip_attributes;		}		$this->sanitize->strip_attributes($attribs);	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->sanitize->set_output_encoding($encoding);	}	function strip_comments($strip = false)	{		$this->sanitize->strip_comments($strip);	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->sanitize->set_url_replacements($element_attribute);	}	/**	 * Set the handler to enable the display of cached favicons.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_favicon.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_favicon_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->favicon_handler = $page . '?' . $qs . '=';		}		else		{			$this->favicon_handler = '';		}	}	/**	 * Set the handler to enable the display of cached images.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_image.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_image_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->sanitize->set_image_handler($page . '?' . $qs . '=');		}		else		{			$this->image_handler = '';		}	}	/**	 * Set the limit for items returned per-feed with multifeeds.	 *	 * @access public	 * @param integer $limit The maximum number of items to return.	 */	function set_item_limit($limit = 0)	{		$this->item_limit = (int) $limit;	}	function init()	{		// Check absolute bare minimum requirements.		if ((function_exists('version_compare') && version_compare(PHP_VERSION, '4.3.0', '<')) || !extension_loaded('xml') || !extension_loaded('pcre'))		{			return false;		}		// Then check the xml extension is sane (i.e., libxml 2.7.x issue on PHP < 5.2.9 and libxml 2.7.0 to 2.7.2 on any version) if we don't have xmlreader.		elseif (!extension_loaded('xmlreader'))		{			static $xml_is_sane = null;			if ($xml_is_sane === null)			{				$parser_check = xml_parser_create();				xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);				xml_parser_free($parser_check);				$xml_is_sane = isset($values[0]['value']);			}			if (!$xml_is_sane)			{				return false;			}		}		if (isset($_GET[$this->javascript]))		{			SimplePie_Misc::output_javascript();			exit;		}		// Pass whatever was set with config options over to the sanitizer.		$this->sanitize->pass_cache_data($this->cache, $this->cache_location, $this->cache_name_function, $this->cache_class);		$this->sanitize->pass_file_data($this->file_class, $this->timeout, $this->useragent, $this->force_fsockopen);		if ($this->feed_url !== null || $this->raw_data !== null)		{			$this->data = array();			$this->multifeed_objects = array();			$cache = false;			if ($this->feed_url !== null)			{				$parsed_feed_url = SimplePie_Misc::parse_url($this->feed_url);				// Decide whether to enable caching				if ($this->cache && $parsed_feed_url['scheme'] !== '')				{					$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $this->feed_url), 'spc');				}				// If it's enabled and we don't want an XML dump, use the cache				if ($cache && !$this->xml_dump)				{					// Load the Cache					$this->data = $cache->load();					if (!empty($this->data))					{						// If the cache is for an outdated build of SimplePie						if (!isset($this->data['build']) || $this->data['build'] !== SIMPLEPIE_BUILD)						{							$cache->unlink();							$this->data = array();						}						// If we've hit a collision just rerun it with caching disabled						elseif (isset($this->data['url']) && $this->data['url'] !== $this->feed_url)						{							$cache = false;							$this->data = array();						}						// If we've got a non feed_url stored (if the page isn't actually a feed, or is a redirect) use that URL.						elseif (isset($this->data['feed_url']))						{							// If the autodiscovery cache is still valid use it.							if ($cache->mtime() + $this->autodiscovery_cache_duration > time())							{								// Do not need to do feed autodiscovery yet.								if ($this->data['feed_url'] === $this->data['url'])								{									$cache->unlink();									$this->data = array();								}								else								{									$this->set_feed_url($this->data['feed_url']);									return $this->init();								}							}						}						// Check if the cache has been updated						elseif ($cache->mtime() + $this->cache_duration < time())						{							// If we have last-modified and/or etag set							if (isset($this->data['headers']['last-modified']) || isset($this->data['headers']['etag']))							{								$headers = array();								if (isset($this->data['headers']['last-modified']))								{									$headers['if-modified-since'] = $this->data['headers']['last-modified'];								}								if (isset($this->data['headers']['etag']))								{									$headers['if-none-match'] = '"' . $this->data['headers']['etag'] . '"';								}								$file =& new $this->file_class($this->feed_url, $this->timeout/10, 5, $headers, $this->useragent, $this->force_fsockopen);								if ($file->success)								{									if ($file->status_code === 304)									{										$cache->touch();										return true;									}									else									{										$headers = $file->headers;									}								}								else								{									unset($file);								}							}						}						// If the cache is still valid, just return true						else						{							return true;						}					}					// If the cache is empty, delete it					else					{						$cache->unlink();						$this->data = array();					}				}				// If we don't already have the file (it'll only exist if we've opened it to check if the cache has been modified), open it.				if (!isset($file))				{					if (is_a($this->file, 'SimplePie_File') && $this->file->url === $this->feed_url)					{						$file =& $this->file;					}					else					{						$file =& new $this->file_class($this->feed_url, $this->timeout, 5, null, $this->useragent, $this->force_fsockopen);					}				}				// If the file connection has an error, set SimplePie::error to that and quit				if (!$file->success && !($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))				{					$this->error = $file->error;					if (!empty($this->data))					{						return true;					}					else					{						return false;					}				}				if (!$this->force_feed)				{					// Check if the supplied URL is a feed, if it isn't, look for it.					$locate =& new $this->locator_class($file, $this->timeout, $this->useragent, $this->file_class, $this->max_checked_feeds, $this->content_type_sniffer_class);					if (!$locate->is_feed($file))					{						// We need to unset this so that if SimplePie::set_file() has been called that object is untouched						unset($file);						if ($file = $locate->find($this->autodiscovery, $this->all_discovered_feeds))						{							if ($cache)							{								$this->data = array('url' => $this->feed_url, 'feed_url' => $file->url, 'build' => SIMPLEPIE_BUILD);								if (!$cache->save($this))								{									trigger_error("$this->cache_location is not writeable", E_USER_WARNING);								}								$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $file->url), 'spc');							}							$this->feed_url = $file->url;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}					$locate = null;				}				$headers = $file->headers;				$data = $file->body;				$sniffer =& new $this->content_type_sniffer_class($file);				$sniffed = $sniffer->get_type();			}			else			{				$data = $this->raw_data;			}			// Set up array of possible encodings			$encodings = array();			// First check to see if input has been overridden.			if ($this->input_encoding !== false)			{				$encodings[] = $this->input_encoding;			}			$application_types = array('application/xml', 'application/xml-dtd', 'application/xml-external-parsed-entity');			$text_types = array('text/xml', 'text/xml-external-parsed-entity');			// RFC 3023 (only applies to sniffed content)			if (isset($sniffed))			{				if (in_array($sniffed, $application_types) || substr($sniffed, 0, 12) === 'application/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = strtoupper($charset[1]);					}					$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));					$encodings[] = 'UTF-8';				}				elseif (in_array($sniffed, $text_types) || substr($sniffed, 0, 5) === 'text/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = $charset[1];					}					$encodings[] = 'US-ASCII';				}				// Text MIME-type default				elseif (substr($sniffed, 0, 5) === 'text/')				{					$encodings[] = 'US-ASCII';				}			}			// Fallback to XML 1.0 Appendix F.1/UTF-8/ISO-8859-1			$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));			$encodings[] = 'UTF-8';			$encodings[] = 'ISO-8859-1';			// There's no point in trying an encoding twice			$encodings = array_unique($encodings);			// If we want the XML, just output that with the most likely encoding and quit			if ($this->xml_dump)			{				header('Content-type: text/xml; charset=' . $encodings[0]);				echo $data;				exit;			}			// Loop through each possible encoding, till we return something, or run out of possibilities			foreach ($encodings as $encoding)			{				// Change the encoding to UTF-8 (as we always use UTF-8 internally)				if ($utf8_data = SimplePie_Misc::change_encoding($data, $encoding, 'UTF-8'))				{					// Create new parser					$parser =& new $this->parser_class();					// If it's parsed fine					if ($parser->parse($utf8_data, 'UTF-8'))					{						$this->data = $parser->get_data();						if ($this->get_type() & ~SIMPLEPIE_TYPE_NONE)						{							if (isset($headers))							{								$this->data['headers'] = $headers;							}							$this->data['build'] = SIMPLEPIE_BUILD;							// Cache the file if caching is enabled							if ($cache && !$cache->save($this))							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);							}							return true;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}				}			}			if(isset($parser))			{				// We have an error, just set SimplePie_Misc::error to it and quit				$this->error = sprintf('XML error: %s at line %d, column %d', $parser->get_error_string(), $parser->get_current_line(), $parser->get_current_column());			}			else			{				$this->error = 'The data could not be converted to UTF-8';			}			SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);			return false;		}		elseif (!empty($this->multifeed_url))		{			$i = 0;			$success = 0;			$this->multifeed_objects = array();			foreach ($this->multifeed_url as $url)			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$this->multifeed_objects[$i] = clone($this);				}				else				{					$this->multifeed_objects[$i] = $this;				}				$this->multifeed_objects[$i]->set_feed_url($url);				$success |= $this->multifeed_objects[$i]->init();				$i++;			}			return (bool) $success;		}		else		{			return false;		}	}	/**	 * Return the error message for the occured error	 *	 * @access public	 * @return string Error message	 */	function error()	{		return $this->error;	}	function get_encoding()	{		return $this->sanitize->output_encoding;	}	function handle_content_type($mime = 'text/html')	{		if (!headers_sent())		{			$header = "Content-type: $mime;";			if ($this->get_encoding())			{				$header .= ' charset=' . $this->get_encoding();			}			else			{				$header .= ' charset=UTF-8';			}			header($header);		}	}	function get_type()	{		if (!isset($this->data['type']))		{			$this->data['type'] = SIMPLEPIE_TYPE_ALL;			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_10;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_03;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF']))			{				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_10;				}				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_090;				}			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_RSS_ALL;				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))				{					switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))					{						case '0.91':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091;							if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))							{								switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))								{									case '0':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_NETSCAPE;										break;									case '24':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_USERLAND;										break;								}							}							break;						case '0.92':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_092;							break;						case '0.93':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_093;							break;						case '0.94':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_094;							break;						case '2.0':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_20;							break;					}				}			}			else			{				$this->data['type'] = SIMPLEPIE_TYPE_NONE;			}		}		return $this->data['type'];	}	/**	 * Returns the URL for the favicon of the feed's website.	 *	 * @todo Cache atom:icon	 * @access public	 * @since 1.0	 */	function get_favicon()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif (($url = $this->get_link()) !== null && preg_match('/^http(s)?:\/\//i', $url))		{			$favicon = SimplePie_Misc::absolutize_url('/favicon.ico', $url);			if ($this->cache && $this->favicon_handler)			{				$favicon_filename = call_user_func($this->cache_name_function, $favicon);				$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $favicon_filename, 'spi');				if ($cache->load())				{					return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);				}				else				{					$file =& new $this->file_class($favicon, $this->timeout / 10, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);					if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)) && strlen($file->body) > 0)					{						$sniffer =& new $this->content_type_sniffer_class($file);						if (substr($sniffer->get_type(), 0, 6) === 'image/')						{							if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))							{								return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);							}							else							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);								return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);							}						}						// not an image						else						{							return false;						}					}				}			}			else			{				return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);			}		}		return false;	}	/**	 * @todo If we have a perm redirect we should return the new URL	 * @todo When we make the above change, let's support <itunes:new-feed-url> as well	 * @todo Also, |atom:link|@rel=self	 */	function subscribe_url()	{		if ($this->feed_url !== null)		{			return $this->sanitize($this->feed_url, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_feed()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_outlook()	{		if ($this->feed_url !== null)		{			return $this->sanitize('outlook' . SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_podcast()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 3), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_itunes()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 4), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	/**	 * Creates the subscribe_* methods' return data	 *	 * @access private	 * @param string $feed_url String to prefix to the feed URL	 * @param string $site_url String to prefix to the site URL (and	 * suffix to the feed URL)	 * @return mixed URL if feed exists, false otherwise	 */	function subscribe_service($feed_url, $site_url = null)	{		if ($this->subscribe_url())		{			$return = $feed_url . rawurlencode($this->feed_url);			if ($site_url !== null && $this->get_link() !== null)			{				$return .= $site_url . rawurlencode($this->get_link());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_aol()	{		return $this->subscribe_service('http://feeds.my.aol.com/add.jsp?url=');	}	function subscribe_bloglines()	{		return $this->subscribe_service('http://www.bloglines.com/sub/');	}	function subscribe_eskobo()	{		return $this->subscribe_service('http://www.eskobo.com/?AddToMyPage=');	}	function subscribe_feedfeeds()	{		return $this->subscribe_service('http://www.feedfeeds.com/add?feed=');	}	function subscribe_feedster()	{		return $this->subscribe_service('http://www.feedster.com/myfeedster.php?action=addrss&confirm=no&rssurl=');	}	function subscribe_google()	{		return $this->subscribe_service('http://fusion.google.com/add?feedurl=');	}	function subscribe_gritwire()	{		return $this->subscribe_service('http://my.gritwire.com/feeds/addExternalFeed.aspx?FeedUrl=');	}	function subscribe_msn()	{		return $this->subscribe_service('http://my.msn.com/addtomymsn.armx?id=rss&ut=', '&ru=');	}	function subscribe_netvibes()	{		return $this->subscribe_service('http://www.netvibes.com/subscribe.php?url=');	}	function subscribe_newsburst()	{		return $this->subscribe_service('http://www.newsburst.com/Source/?add=');	}	function subscribe_newsgator()	{		return $this->subscribe_service('http://www.newsgator.com/ngs/subscriber/subext.aspx?url=');	}	function subscribe_odeo()	{		return $this->subscribe_service('http://www.odeo.com/listen/subscribe?feed=');	}	function subscribe_podnova()	{		return $this->subscribe_service('http://www.podnova.com/index_your_podcasts.srf?action=add&url=');	}	function subscribe_rojo()	{		return $this->subscribe_service('http://www.rojo.com/add-subscription?resource=');	}	function subscribe_yahoo()	{		return $this->subscribe_service('http://add.my.yahoo.com/rss?url=');	}	function get_feed_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_10)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_ATOM_03)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_RDF)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag];			}		}		return null;	}	function get_channel_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_ALL)		{			if ($return = $this->get_feed_tags($namespace, $tag))			{				return $return;			}		}		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_image_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($image = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_base($element = array())	{		if (!($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION) && !empty($element['xml_base_explicit']) && isset($element['xml_base']))		{			return $element['xml_base'];		}		elseif ($this->get_link() !== null)		{			return $this->get_link();		}		else		{			return $this->subscribe_url();		}	}	function sanitize($data, $type, $base = '')	{		return $this->sanitize->sanitize($data, $type, $base);	}	function get_title()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->category_class($term, $scheme, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->author_class($name, $uri, $email);			}		}		if ($author = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_all_discovered_feeds()	{		return $this->all_discovered_feeds;	}	function get_description()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['headers']['content-language']))		{			return $this->sanitize($this->data['headers']['content-language'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_title()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_link()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_width()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'width'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 88.0;		}		else		{			return null;		}	}	function get_image_height()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'height'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 31.0;		}		else		{			return null;		}	}	function get_item_quantity($max = 0)	{		$max = (int) $max;		$qty = count($this->get_items());		if ($max === 0)		{			return $qty;		}		else		{			return ($qty > $max) ? $max : $qty;		}	}	function get_item($key = 0)	{		$items = $this->get_items();		if (isset($items[$key]))		{			return $items[$key];		}		else		{			return null;		}	}	function get_items($start = 0, $end = 0)	{		if (!isset($this->data['items']))		{			if (!empty($this->multifeed_objects))			{				$this->data['items'] = SimplePie::merge_items($this->multifeed_objects, $start, $end, $this->item_limit);			}			else			{				$this->data['items'] = array();				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}			}		}		if (!empty($this->data['items']))		{			// If we want to order it by date, check if all items have a date, and then sort it			if ($this->order_by_date && empty($this->multifeed_objects))			{				if (!isset($this->data['ordered_items']))				{					$do_sort = true;					foreach ($this->data['items'] as $item)					{						if (!$item->get_date('U'))						{							$do_sort = false;							break;						}					}					$item = null;					$this->data['ordered_items'] = $this->data['items'];					if ($do_sort)					{						usort($this->data['ordered_items'], array(&$this, 'sort_items'));					}				}				$items = $this->data['ordered_items'];			}			else			{				$items = $this->data['items'];			}			// Slice the data as desired			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			return array();		}	}	/**	 * @static	 */	function sort_items($a, $b)	{		return $a->get_date('U') <= $b->get_date('U');	}	/**	 * @static	 */	function merge_items($urls, $start = 0, $end = 0, $limit = 0)	{		if (is_array($urls) && sizeof($urls) > 0)		{			$items = array();			foreach ($urls as $arg)			{				if (is_a($arg, 'SimplePie'))				{					$items = array_merge($items, $arg->get_items(0, $limit));				}				else				{					trigger_error('Arguments must be SimplePie objects', E_USER_WARNING);				}			}			$do_sort = true;			foreach ($items as $item)			{				if (!$item->get_date('U'))				{					$do_sort = false;					break;				}			}			$item = null;			if ($do_sort)			{				usort($items, array('SimplePie', 'sort_items'));			}			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			trigger_error('Cannot merge zero SimplePie objects', E_USER_WARNING);			return array();		}	}}class SimplePie_Item{	var $feed;	var $data = array();	function SimplePie_Item($feed, $data)	{		$this->feed = $feed;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			unset($this->feed);		}	}	function get_item_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->feed->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->feed->sanitize($data, $type, $base);	}	function get_feed()	{		return $this->feed;	}	function get_id($hash = false)	{		if (!$hash)		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif (($return = $this->get_permalink()) !== null)			{				return $return;			}			elseif (($return = $this->get_title()) !== null)			{				return $return;			}		}		if ($this->get_permalink() !== null || $this->get_title() !== null)		{			return md5($this->get_permalink() . $this->get_title());		}		else		{			return md5(serialize($this->data));		}	}	function get_title()	{		if (!isset($this->data['title']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$this->data['title'] = null;			}		}		return $this->data['title'];	}	function get_description($description_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (!$description_only)		{			return $this->get_content(true);		}		else		{			return null;		}	}	function get_content($content_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_content_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT, 'encoded'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif (!$content_only)		{			return $this->get_description(true);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->feed->author_class($name, $url, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'author'))		{			$authors[] =& new $this->feed->author_class(null, null, $this->sanitize($author[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		elseif (($source = $this->get_source()) && ($authors = $source->get_authors()))		{			return $authors;		}		elseif ($authors = $this->feed->get_authors())		{			return $authors;		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_date($date_format = 'j F Y, g:i a')	{		if (!isset($this->data['date']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'published'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'updated'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'issued'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'created'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'modified'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'pubDate'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			if (!empty($this->data['date']['raw']))			{				$parser = SimplePie_Parse_Date::get();				$this->data['date']['parsed'] = $parser->parse($this->data['date']['raw']);			}			else			{				$this->data['date'] = null;			}		}		if ($this->data['date'])		{			$date_format = (string) $date_format;			switch ($date_format)			{				case '':					return $this->sanitize($this->data['date']['raw'], SIMPLEPIE_CONSTRUCT_TEXT);				case 'U':					return $this->data['date']['parsed'];				default:					return date($date_format, $this->data['date']['parsed']);			}		}		else		{			return null;		}	}	function get_local_date($date_format = '%c')	{		if (!$date_format)		{			return $this->sanitize($this->get_date(''), SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (($date = $this->get_date('U')) !== null)		{			return strftime($date_format, $date);		}		else		{			return null;		}	}	function get_permalink()	{		$link = $this->get_link();		$enclosure = $this->get_enclosure(0);		if ($link !== null)		{			return $link;		}		elseif ($enclosure !== null)		{			return $enclosure->get_link();		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if ($links[$key] !== null)		{			return $links[$key];		}		else		{			return null;		}	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				if (!isset($links[0]['attribs']['']['isPermaLink']) || strtolower(trim($links[0]['attribs']['']['isPermaLink'])) === 'true')				{					$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));				}			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	/**	 * @todo Add ability to prefer one type of content over another (in a media group).	 */	function get_enclosure($key = 0, $prefer = null)	{		$enclosures = $this->get_enclosures();		if (isset($enclosures[$key]))		{			return $enclosures[$key];		}		else		{			return null;		}	}	/**	 * Grabs all available enclosures (podcasts, etc.)	 *	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.	 *	 * At this point, we're pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.	 *	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).	 * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).	 */	function get_enclosures()	{		if (!isset($this->data['enclosures']))		{			$this->data['enclosures'] = array();			// Elements			$captions_parent = null;			$categories_parent = null;			$copyrights_parent = null;			$credits_parent = null;			$description_parent = null;			$duration_parent = null;			$hashes_parent = null;			$keywords_parent = null;			$player_parent = null;			$ratings_parent = null;			$restrictions_parent = null;			$thumbnails_parent = null;			$title_parent = null;			// Let's do the channel and item-level ones first, and just re-use them if we need to.			$parent = $this->get_feed();			// CAPTIONS			if ($captions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			elseif ($captions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			if (is_array($captions_parent))			{				$captions_parent = array_values(SimplePie_Misc::array_unique($captions_parent));			}			// CATEGORIES			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'category') as $category)			{				$term = null;				$scheme = 'http://www.itunes.com/dtds/podcast-1.0.dtd';				$label = null;				if (isset($category['attribs']['']['text']))				{					$label = $this->sanitize($category['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);				if (isset($category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category']))				{					foreach ((array) $category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category'] as $subcategory)					{						if (isset($subcategory['attribs']['']['text']))						{							$label = $this->sanitize($subcategory['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);					}				}			}			if (is_array($categories_parent))			{				$categories_parent = array_values(SimplePie_Misc::array_unique($categories_parent));			}			// COPYRIGHT			if ($copyright = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent =& new $this->feed->copyright_class($copyright_url, $copyright_label);			}			elseif ($copyright = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent =& new $this->feed->copyright_class($copyright_url, $copyright_label);			}			// CREDITS			if ($credits = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			elseif ($credits = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			if (is_array($credits_parent))			{				$credits_parent = array_values(SimplePie_Misc::array_unique($credits_parent));			}			// DESCRIPTION			if ($description_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($description_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// DURATION			if ($duration_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'duration'))			{				$seconds = null;				$minutes = null;				$hours = null;				if (isset($duration_parent[0]['data']))				{					$temp = explode(':', $this->sanitize($duration_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					if (sizeof($temp) > 0)					{						$seconds = (int) array_pop($temp);					}					if (sizeof($temp) > 0)					{						$minutes = (int) array_pop($temp);						$seconds += $minutes * 60;					}					if (sizeof($temp) > 0)					{						$hours = (int) array_pop($temp);						$seconds += $hours * 3600;					}					unset($temp);					$duration_parent = $seconds;				}			}			// HASHES			if ($hashes_iterator = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			elseif ($hashes_iterator = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			if (is_array($hashes_parent))			{				$hashes_parent = array_values(SimplePie_Misc::array_unique($hashes_parent));			}			// KEYWORDS			if ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			if (is_array($keywords_parent))			{				$keywords_parent = array_values(SimplePie_Misc::array_unique($keywords_parent));			}			// PLAYER			if ($player_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			elseif ($player_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			// RATINGS			if ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			if (is_array($ratings_parent))			{				$ratings_parent = array_values(SimplePie_Misc::array_unique($ratings_parent));			}			// RESTRICTIONS			if ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			if (is_array($restrictions_parent))			{				$restrictions_parent = array_values(SimplePie_Misc::array_unique($restrictions_parent));			}			// THUMBNAILS			if ($thumbnails = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			elseif ($thumbnails = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			// TITLES			if ($title_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($title_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// Clear the memory			unset($parent);			// Attributes			$bitrate = null;			$channels = null;			$duration = null;			$expression = null;			$framerate = null;			$height = null;			$javascript = null;			$lang = null;			$length = null;			$medium = null;			$samplingrate = null;			$type = null;			$url = null;			$width = null;			// Elements			$captions = null;			$categories = null;			$copyrights = null;			$credits = null;			$description = null;			$hashes = null;			$keywords = null;			$player = null;			$ratings = null;			$restrictions = null;			$thumbnails = null;			$title = null;			// If we have media:group tags, loop through them.			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group') as $group)			{				// If we have media:content tags, loop through them.				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			// If we have standalone media:content tags, loop through them.			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content']))			{				foreach ((array) $this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						else						{							$categories = null;						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if ($enclosure = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'enclosure'))			{				if (isset($enclosure[0]['attribs']['']['url']))				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($enclosure[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($enclosure[0]));					if (isset($enclosure[0]['attribs']['']['type']))					{						$type = $this->sanitize($enclosure[0]['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($enclosure[0]['attribs']['']['length']))					{						$length = ceil($enclosure[0]['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if (sizeof($this->data['enclosures']) === 0 && ($url || $type || $length || $bitrate || $captions_parent || $categories_parent || $channels || $copyrights_parent || $credits_parent || $description_parent || $duration_parent || $expression || $framerate || $hashes_parent || $height || $keywords_parent || $lang || $medium || $player_parent || $ratings_parent || $restrictions_parent || $samplingrate || $thumbnails_parent || $title_parent || $width))			{				// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor				$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);			}			$this->data['enclosures'] = array_values(SimplePie_Misc::array_unique($this->data['enclosures']));		}		if (!empty($this->data['enclosures']))		{			return $this->data['enclosures'];		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_source()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'source'))		{			return new $this->feed->source_class($this, $return[0]);		}		else		{			return null;		}	}	/**	 * Creates the add_to_* methods' return data	 *	 * @access private	 * @param string $item_url String to prefix to the item permalink	 * @param string $title_url String to prefix to the item title	 * (and suffix to the item permalink)	 * @return mixed URL if feed exists, false otherwise	 */	function add_to_service($item_url, $title_url = null, $summary_url = null)	{		if ($this->get_permalink() !== null)		{			$return = $item_url . rawurlencode($this->get_permalink());			if ($title_url !== null && $this->get_title() !== null)			{				$return .= $title_url . rawurlencode($this->get_title());			}			if ($summary_url !== null && $this->get_description() !== null)			{				$return .= $summary_url . rawurlencode($this->get_description());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function add_to_blinklist()	{		return $this->add_to_service('http://www.blinklist.com/index.php?Action=Blink/addblink.php&Description=&Url=', '&Title=');	}	function add_to_blogmarks()	{		return $this->add_to_service('http://blogmarks.net/my/new.php?mini=1&simple=1&url=', '&title=');	}	function add_to_delicious()	{		return $this->add_to_service('http://del.icio.us/post/?v=4&url=', '&title=');	}	function add_to_digg()	{		return $this->add_to_service('http://digg.com/submit?url=', '&title=', '&bodytext=');	}	function add_to_furl()	{		return $this->add_to_service('http://www.furl.net/storeIt.jsp?u=', '&t=');	}	function add_to_magnolia()	{		return $this->add_to_service('http://ma.gnolia.com/bookmarklet/add?url=', '&title=');	}	function add_to_myweb20()	{		return $this->add_to_service('http://myweb2.search.yahoo.com/myresults/bookmarklet?u=', '&t=');	}	function add_to_newsvine()	{		return $this->add_to_service('http://www.newsvine.com/_wine/save?u=', '&h=');	}	function add_to_reddit()	{		return $this->add_to_service('http://reddit.com/submit?url=', '&title=');	}	function add_to_segnalo()	{		return $this->add_to_service('http://segnalo.com/post.html.php?url=', '&title=');	}	function add_to_simpy()	{		return $this->add_to_service('http://www.simpy.com/simpy/LinkAdd.do?href=', '&title=');	}	function add_to_spurl()	{		return $this->add_to_service('http://www.spurl.net/spurl.php?v=3&url=', '&title=');	}	function add_to_wists()	{		return $this->add_to_service('http://wists.com/r.php?c=&r=', '&title=');	}	function search_technorati()	{		return $this->add_to_service('http://www.technorati.com/search/');	}}class SimplePie_Source{	var $item;	var $data = array();	function SimplePie_Source($item, $data)	{		$this->item = $item;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	function get_source_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->item->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->item->sanitize($data, $type, $base);	}	function get_item()	{		return $this->item;	}	function get_title()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->item->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->item->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->item->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->item->feed->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->item->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->item->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_description()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['xml_lang']))		{			return $this->sanitize($this->data['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}}class SimplePie_Author{	var $name;	var $link;	var $email;	// Constructor, used to input the data	function SimplePie_Author($name = null, $link = null, $email = null)	{		$this->name = $name;		$this->link = $link;		$this->email = $email;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return $this->link;		}		else		{			return null;		}	}	function get_email()	{		if ($this->email !== null)		{			return $this->email;		}		else		{			return null;		}	}}class SimplePie_Category{	var $term;	var $scheme;	var $label;	// Constructor, used to input the data	function SimplePie_Category($term = null, $scheme = null, $label = null)	{		$this->term = $term;		$this->scheme = $scheme;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_term()	{		if ($this->term !== null)		{			return $this->term;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_label()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return $this->get_term();		}	}}class SimplePie_Enclosure{	var $bitrate;	var $captions;	var $categories;	var $channels;	var $copyright;	var $credits;	var $description;	var $duration;	var $expression;	var $framerate;	var $handler;	var $hashes;	var $height;	var $javascript;	var $keywords;	var $lang;	var $length;	var $link;	var $medium;	var $player;	var $ratings;	var $restrictions;	var $samplingrate;	var $thumbnails;	var $title;	var $type;	var $width;	// Constructor, used to input the data	function SimplePie_Enclosure($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null)	{		$this->bitrate = $bitrate;		$this->captions = $captions;		$this->categories = $categories;		$this->channels = $channels;		$this->copyright = $copyright;		$this->credits = $credits;		$this->description = $description;		$this->duration = $duration;		$this->expression = $expression;		$this->framerate = $framerate;		$this->hashes = $hashes;		$this->height = $height;		$this->javascript = $javascript;		$this->keywords = $keywords;		$this->lang = $lang;		$this->length = $length;		$this->link = $link;		$this->medium = $medium;		$this->player = $player;		$this->ratings = $ratings;		$this->restrictions = $restrictions;		$this->samplingrate = $samplingrate;		$this->thumbnails = $thumbnails;		$this->title = $title;		$this->type = $type;		$this->width = $width;		if (class_exists('idna_convert'))		{			$idn =& new idna_convert;			$parsed = SimplePie_Misc::parse_url($link);			$this->link = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->handler = $this->get_handler(); // Needs to load last	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_bitrate()	{		if ($this->bitrate !== null)		{			return $this->bitrate;		}		else		{			return null;		}	}	function get_caption($key = 0)	{		$captions = $this->get_captions();		if (isset($captions[$key]))		{			return $captions[$key];		}		else		{			return null;		}	}	function get_captions()	{		if ($this->captions !== null)		{			return $this->captions;		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		if ($this->categories !== null)		{			return $this->categories;		}		else		{			return null;		}	}	function get_channels()	{		if ($this->channels !== null)		{			return $this->channels;		}		else		{			return null;		}	}	function get_copyright()	{		if ($this->copyright !== null)		{			return $this->copyright;		}		else		{			return null;		}	}	function get_credit($key = 0)	{		$credits = $this->get_credits();		if (isset($credits[$key]))		{			return $credits[$key];		}		else		{			return null;		}	}	function get_credits()	{		if ($this->credits !== null)		{			return $this->credits;		}		else		{			return null;		}	}	function get_description()	{		if ($this->description !== null)		{			return $this->description;		}		else		{			return null;		}	}	function get_duration($convert = false)	{		if ($this->duration !== null)		{			if ($convert)			{				$time = SimplePie_Misc::time_hms($this->duration);				return $time;			}			else			{				return $this->duration;			}		}		else		{			return null;		}	}	function get_expression()	{		if ($this->expression !== null)		{			return $this->expression;		}		else		{			return 'full';		}	}	function get_extension()	{		if ($this->link !== null)		{			$url = SimplePie_Misc::parse_url($this->link);			if ($url['path'] !== '')			{				return pathinfo($url['path'], PATHINFO_EXTENSION);			}		}		return null;	}	function get_framerate()	{		if ($this->framerate !== null)		{			return $this->framerate;		}		else		{			return null;		}	}	function get_handler()	{		return $this->get_real_type(true);	}	function get_hash($key = 0)	{		$hashes = $this->get_hashes();		if (isset($hashes[$key]))		{			return $hashes[$key];		}		else		{			return null;		}	}	function get_hashes()	{		if ($this->hashes !== null)		{			return $this->hashes;		}		else		{			return null;		}	}	function get_height()	{		if ($this->height !== null)		{			return $this->height;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_keyword($key = 0)	{		$keywords = $this->get_keywords();		if (isset($keywords[$key]))		{			return $keywords[$key];		}		else		{			return null;		}	}	function get_keywords()	{		if ($this->keywords !== null)		{			return $this->keywords;		}		else		{			return null;		}	}	function get_length()	{		if ($this->length !== null)		{			return $this->length;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return urldecode($this->link);		}		else		{			return null;		}	}	function get_medium()	{		if ($this->medium !== null)		{			return $this->medium;		}		else		{			return null;		}	}	function get_player()	{		if ($this->player !== null)		{			return $this->player;		}		else		{			return null;		}	}	function get_rating($key = 0)	{		$ratings = $this->get_ratings();		if (isset($ratings[$key]))		{			return $ratings[$key];		}		else		{			return null;		}	}	function get_ratings()	{		if ($this->ratings !== null)		{			return $this->ratings;		}		else		{			return null;		}	}	function get_restriction($key = 0)	{		$restrictions = $this->get_restrictions();		if (isset($restrictions[$key]))		{			return $restrictions[$key];		}		else		{			return null;		}	}	function get_restrictions()	{		if ($this->restrictions !== null)		{			return $this->restrictions;		}		else		{			return null;		}	}	function get_sampling_rate()	{		if ($this->samplingrate !== null)		{			return $this->samplingrate;		}		else		{			return null;		}	}	function get_size()	{		$length = $this->get_length();		if ($length !== null)		{			return round($length/1048576, 2);		}		else		{			return null;		}	}	function get_thumbnail($key = 0)	{		$thumbnails = $this->get_thumbnails();		if (isset($thumbnails[$key]))		{			return $thumbnails[$key];		}		else		{			return null;		}	}	function get_thumbnails()	{		if ($this->thumbnails !== null)		{			return $this->thumbnails;		}		else		{			return null;		}	}	function get_title()	{		if ($this->title !== null)		{			return $this->title;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_width()	{		if ($this->width !== null)		{			return $this->width;		}		else		{			return null;		}	}	function native_embed($options='')	{		return $this->embed($options, true);	}	/**	 * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.	 */	function embed($options = '', $native = false)	{		// Set up defaults		$audio = '';		$video = '';		$alt = '';		$altclass = '';		$loop = 'false';		$width = 'auto';		$height = 'auto';		$bgcolor = '#ffffff';		$mediaplayer = '';		$widescreen = false;		$handler = $this->get_handler();		$type = $this->get_real_type();		// Process options and reassign values as necessary		if (is_array($options))		{			extract($options);		}		else		{			$options = explode(',', $options);			foreach($options as $option)			{				$opt = explode(':', $option, 2);				if (isset($opt[0], $opt[1]))				{					$opt[0] = trim($opt[0]);					$opt[1] = trim($opt[1]);					switch ($opt[0])					{						case 'audio':							$audio = $opt[1];							break;						case 'video':							$video = $opt[1];							break;						case 'alt':							$alt = $opt[1];							break;						case 'altclass':							$altclass = $opt[1];							break;						case 'loop':							$loop = $opt[1];							break;						case 'width':							$width = $opt[1];							break;						case 'height':							$height = $opt[1];							break;						case 'bgcolor':							$bgcolor = $opt[1];							break;						case 'mediaplayer':							$mediaplayer = $opt[1];							break;						case 'widescreen':							$widescreen = $opt[1];							break;					}				}			}		}		$mime = explode('/', $type, 2);		$mime = $mime[0];		// Process values for 'auto'		if ($width === 'auto')		{			if ($mime === 'video')			{				if ($height === 'auto')				{					$width = 480;				}				elseif ($widescreen)				{					$width = round((intval($height)/9)*16);				}				else				{					$width = round((intval($height)/3)*4);				}			}			else			{				$width = '100%';			}		}		if ($height === 'auto')		{			if ($mime === 'audio')			{				$height = 0;			}			elseif ($mime === 'video')			{				if ($width === 'auto')				{					if ($widescreen)					{						$height = 270;					}					else					{						$height = 360;					}				}				elseif ($widescreen)				{					$height = round((intval($width)/16)*9);				}				else				{					$height = round((intval($width)/4)*3);				}			}			else			{				$height = 376;			}		}		elseif ($mime === 'audio')		{			$height = 0;		}		// Set proper placeholder value		if ($mime === 'audio')		{			$placeholder = $audio;		}		elseif ($mime === 'video')		{			$placeholder = $video;		}		$embed = '';		// Make sure the JS library is included		if (!$native)		{			static $javascript_outputted = null;			if (!$javascript_outputted && $this->javascript)			{				$embed .= '<script type="text/javascript" src="?' . htmlspecialchars($this->javascript) . '"></script>';				$javascript_outputted = true;			}		}		// Odeo Feed MP3's		if ($handler === 'odeo')		{			if ($native)			{				$embed .= '<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://adobe.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url=' . $this->get_link() . '"></embed>';			}			else			{				$embed .= '<script type="text/javascript">embed_odeo("' . $this->get_link() . '");</script>';			}		}		// Flash		elseif ($handler === 'flash')		{			if ($native)			{				$embed .= "<embed src=\"" . $this->get_link() . "\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"$type\" quality=\"high\" width=\"$width\" height=\"$height\" bgcolor=\"$bgcolor\" loop=\"$loop\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flash('$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$loop', '$type');</script>";			}		}		// Flash Media Player file types.		// Preferred handler for MP3 file types.		elseif ($handler === 'fmedia' || ($handler === 'mp3' && $mediaplayer !== ''))		{			$height += 20;			if ($native)			{				$embed .= "<embed src=\"$mediaplayer\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" quality=\"high\" width=\"$width\" height=\"$height\" wmode=\"transparent\" flashvars=\"file=" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "&autostart=false&repeat=$loop&showdigits=true&showfsbutton=false\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flv('$width', '$height', '" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "', '$placeholder', '$loop', '$mediaplayer');</script>";			}		}		// QuickTime 7 file types.  Need to test with QuickTime 6.		// Only handle MP3's if the Flash Media Player is not present.		elseif ($handler === 'quicktime' || ($handler === 'mp3' && $mediaplayer === ''))		{			$height += 16;			if ($native)			{				if ($placeholder !== '')				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" href=\"" . $this->get_link() . "\" src=\"$placeholder\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"false\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}				else				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" src=\"" . $this->get_link() . "\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"true\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}			}			else			{				$embed .= "<script type='text/javascript'>embed_quicktime('$type', '$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$placeholder', '$loop');</script>";			}		}		// Windows Media		elseif ($handler === 'wmedia')		{			$height += 45;			if ($native)			{				$embed .= "<embed type=\"application/x-mplayer2\" src=\"" . $this->get_link() . "\" autosize=\"1\" width=\"$width\" height=\"$height\" showcontrols=\"1\" showstatusbar=\"0\" showdisplay=\"0\" autostart=\"0\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_wmedia('$width', '$height', '" . $this->get_link() . "');</script>";			}		}		// Everything else		else $embed .= '<a href="' . $this->get_link() . '" class="' . $altclass . '">' . $alt . '</a>';		return $embed;	}	function get_real_type($find_handler = false)	{		// If it's Odeo, let's get it out of the way.		if (substr(strtolower($this->get_link()), 0, 15) === 'http://odeo.com')		{			return 'odeo';		}		// Mime-types by handler.		$types_flash = array('application/x-shockwave-flash', 'application/futuresplash'); // Flash		$types_fmedia = array('video/flv', 'video/x-flv','flv-application/octet-stream'); // Flash Media Player		$types_quicktime = array('audio/3gpp', 'audio/3gpp2', 'audio/aac', 'audio/x-aac', 'audio/aiff', 'audio/x-aiff', 'audio/mid', 'audio/midi', 'audio/x-midi', 'audio/mp4', 'audio/m4a', 'audio/x-m4a', 'audio/wav', 'audio/x-wav', 'video/3gpp', 'video/3gpp2', 'video/m4v', 'video/x-m4v', 'video/mp4', 'video/mpeg', 'video/x-mpeg', 'video/quicktime', 'video/sd-video'); // QuickTime		$types_wmedia = array('application/asx', 'application/x-mplayer2', 'audio/x-ms-wma', 'audio/x-ms-wax', 'video/x-ms-asf-plugin', 'video/x-ms-asf', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wvx'); // Windows Media		$types_mp3 = array('audio/mp3', 'audio/x-mp3', 'audio/mpeg', 'audio/x-mpeg'); // MP3		if ($this->get_type() !== null)		{			$type = strtolower($this->type);		}		else		{			$type = null;		}		// If we encounter an unsupported mime-type, check the file extension and guess intelligently.		if (!in_array($type, array_merge($types_flash, $types_fmedia, $types_quicktime, $types_wmedia, $types_mp3)))		{			switch (strtolower($this->get_extension()))			{				// Audio mime-types				case 'aac':				case 'adts':					$type = 'audio/acc';					break;				case 'aif':				case 'aifc':				case 'aiff':				case 'cdda':					$type = 'audio/aiff';					break;				case 'bwf':					$type = 'audio/wav';					break;				case 'kar':				case 'mid':				case 'midi':				case 'smf':					$type = 'audio/midi';					break;				case 'm4a':					$type = 'audio/x-m4a';					break;				case 'mp3':				case 'swa':					$type = 'audio/mp3';					break;				case 'wav':					$type = 'audio/wav';					break;				case 'wax':					$type = 'audio/x-ms-wax';					break;				case 'wma':					$type = 'audio/x-ms-wma';					break;				// Video mime-types				case '3gp':				case '3gpp':					$type = 'video/3gpp';					break;				case '3g2':				case '3gp2':					$type = 'video/3gpp2';					break;				case 'asf':					$type = 'video/x-ms-asf';					break;				case 'flv':					$type = 'video/x-flv';					break;				case 'm1a':				case 'm1s':				case 'm1v':				case 'm15':				case 'm75':				case 'mp2':				case 'mpa':				case 'mpeg':				case 'mpg':				case 'mpm':				case 'mpv':					$type = 'video/mpeg';					break;				case 'm4v':					$type = 'video/x-m4v';					break;				case 'mov':				case 'qt':					$type = 'video/quicktime';					break;				case 'mp4':				case 'mpg4':					$type = 'video/mp4';					break;				case 'sdv':					$type = 'video/sd-video';					break;				case 'wm':					$type = 'video/x-ms-wm';					break;				case 'wmv':					$type = 'video/x-ms-wmv';					break;				case 'wvx':					$type = 'video/x-ms-wvx';					break;				// Flash mime-types				case 'spl':					$type = 'application/futuresplash';					break;				case 'swf':					$type = 'application/x-shockwave-flash';					break;			}		}		if ($find_handler)		{			if (in_array($type, $types_flash))			{				return 'flash';			}			elseif (in_array($type, $types_fmedia))			{				return 'fmedia';			}			elseif (in_array($type, $types_quicktime))			{				return 'quicktime';			}			elseif (in_array($type, $types_wmedia))			{				return 'wmedia';			}			elseif (in_array($type, $types_mp3))			{				return 'mp3';			}			else			{				return null;			}		}		else		{			return $type;		}	}}class SimplePie_Caption{	var $type;	var $lang;	var $startTime;	var $endTime;	var $text;	// Constructor, used to input the data	function SimplePie_Caption($type = null, $lang = null, $startTime = null, $endTime = null, $text = null)	{		$this->type = $type;		$this->lang = $lang;		$this->startTime = $startTime;		$this->endTime = $endTime;		$this->text = $text;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_endtime()	{		if ($this->endTime !== null)		{			return $this->endTime;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_starttime()	{		if ($this->startTime !== null)		{			return $this->startTime;		}		else		{			return null;		}	}	function get_text()	{		if ($this->text !== null)		{			return $this->text;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}}class SimplePie_Credit{	var $role;	var $scheme;	var $name;	// Constructor, used to input the data	function SimplePie_Credit($role = null, $scheme = null, $name = null)	{		$this->role = $role;		$this->scheme = $scheme;		$this->name = $name;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_role()	{		if ($this->role !== null)		{			return $this->role;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}}class SimplePie_Copyright{	var $url;	var $label;	// Constructor, used to input the data	function SimplePie_Copyright($url = null, $label = null)	{		$this->url = $url;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_url()	{		if ($this->url !== null)		{			return $this->url;		}		else		{			return null;		}	}	function get_attribution()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return null;		}	}}class SimplePie_Rating{	var $scheme;	var $value;	// Constructor, used to input the data	function SimplePie_Rating($scheme = null, $value = null)	{		$this->scheme = $scheme;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}class SimplePie_Restriction{	var $relationship;	var $type;	var $value;	// Constructor, used to input the data	function SimplePie_Restriction($relationship = null, $type = null, $value = null)	{		$this->relationship = $relationship;		$this->type = $type;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_relationship()	{		if ($this->relationship !== null)		{			return $this->relationship;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}/** * @todo Move to properly supporting RFC2616 (HTTP/1.1) */class SimplePie_File{	var $url;	var $useragent;	var $success = true;	var $headers = array();	var $body;	var $status_code;	var $redirects = 0;	var $error;	var $method = SIMPLEPIE_FILE_SOURCE_NONE;	function SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false)	{		if (class_exists('idna_convert'))		{			$idn =& new idna_convert;			$parsed = SimplePie_Misc::parse_url($url);			$url = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->url = $url;		$this->useragent = $useragent;		if (preg_match('/^http(s)?:\/\//i', $url))		{			if ($useragent === null)			{				$useragent = ini_get('user_agent');				$this->useragent = $useragent;			}			if (!is_array($headers))			{				$headers = array();			}			if (!$force_fsockopen && function_exists('curl_exec'))			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_CURL;				$fp = curl_init();				$headers2 = array();				foreach ($headers as $key => $value)				{					$headers2[] = "$key: $value";				}				if (version_compare(SimplePie_Misc::get_curl_version(), '7.10.5', '>='))				{					curl_setopt($fp, CURLOPT_ENCODING, '');				}				curl_setopt($fp, CURLOPT_URL, $url);				curl_setopt($fp, CURLOPT_HEADER, 1);				curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);				curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_REFERER, $url);				curl_setopt($fp, CURLOPT_USERAGENT, $useragent);				curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);				if (!ini_get('open_basedir') && !ini_get('safe_mode') && version_compare(SimplePie_Misc::get_curl_version(), '7.15.2', '>='))				{					curl_setopt($fp, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($fp, CURLOPT_MAXREDIRS, $redirects);				}				$this->headers = curl_exec($fp);				if (curl_errno($fp) === 23 || curl_errno($fp) === 61)				{					curl_setopt($fp, CURLOPT_ENCODING, 'none');					$this->headers = curl_exec($fp);				}				if (curl_errno($fp))				{					$this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);					$this->success = false;				}				else				{					$info = curl_getinfo($fp);					curl_close($fp);					$this->headers = explode("\r\n\r\n", $this->headers, $info['redirect_count'] + 1);					$this->headers = array_pop($this->headers);					$parser =& new SimplePie_HTTP_Parser($this->headers);					if ($parser->parse())					{						$this->headers = $parser->headers;						$this->body = $parser->body;						$this->status_code = $parser->status_code;						if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)						{							$this->redirects++;							$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);							return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);						}					}				}			}			else			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_FSOCKOPEN;				$url_parts = parse_url($url);				if (isset($url_parts['scheme']) && strtolower($url_parts['scheme']) === 'https')				{					$url_parts['host'] = "ssl://$url_parts[host]";					$url_parts['port'] = 443;				}				if (!isset($url_parts['port']))				{					$url_parts['port'] = 80;				}				$fp = @fsockopen($url_parts['host'], $url_parts['port'], $errno, $errstr, $timeout);				if (!$fp)				{					$this->error = 'fsockopen error: ' . $errstr;					$this->success = false;				}				else				{					stream_set_timeout($fp, $timeout);					if (isset($url_parts['path']))					{						if (isset($url_parts['query']))						{							$get = "$url_parts[path]?$url_parts[query]";						}						else						{							$get = $url_parts['path'];						}					}					else					{						$get = '/';					}					$out = "GET $get HTTP/1.0\r\n";					$out .= "Host: $url_parts[host]\r\n";					$out .= "User-Agent: $useragent\r\n";					if (extension_loaded('zlib'))					{						$out .= "Accept-Encoding: x-gzip,gzip,deflate\r\n";					}					if (isset($url_parts['user']) && isset($url_parts['pass']))					{						$out .= "Authorization: Basic " . base64_encode("$url_parts[user]:$url_parts[pass]") . "\r\n";					}					foreach ($headers as $key => $value)					{						$out .= "$key: $value\r\n";					}					$out .= "Connection: Close\r\n\r\n";					fwrite($fp, $out);					$info = stream_get_meta_data($fp);					$this->headers = '';					while (!$info['eof'] && !$info['timed_out'])					{						$this->headers .= fread($fp, 1160);						$info = stream_get_meta_data($fp);					}					if (!$info['timed_out'])					{						$parser =& new SimplePie_HTTP_Parser($this->headers);						if ($parser->parse())						{							$this->headers = $parser->headers;							$this->body = $parser->body;							$this->status_code = $parser->status_code;							if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)							{								$this->redirects++;								$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);								return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);							}							if (isset($this->headers['content-encoding']))							{								// Hey, we act dumb elsewhere, so let's do that here too								switch (strtolower(trim($this->headers['content-encoding'], "\x09\x0A\x0D\x20")))								{									case 'gzip':									case 'x-gzip':										$decoder =& new SimplePie_gzdecode($this->body);										if (!$decoder->parse())										{											$this->error = 'Unable to decode HTTP "gzip" stream';											$this->success = false;										}										else										{											$this->body = $decoder->data;										}										break;									case 'deflate':										if (($body = gzuncompress($this->body)) === false)										{											if (($body = gzinflate($this->body)) === false)											{												$this->error = 'Unable to decode HTTP "deflate" stream';												$this->success = false;											}										}										$this->body = $body;										break;									default:										$this->error = 'Unknown content coding';										$this->success = false;								}							}						}					}					else					{						$this->error = 'fsocket timed out';						$this->success = false;					}					fclose($fp);				}			}		}		else		{			$this->method = SIMPLEPIE_FILE_SOURCE_LOCAL | SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS;			if (!$this->body = file_get_contents($url))			{				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}/** * HTTP Response Parser * * @package SimplePie */class SimplePie_HTTP_Parser{	/**	 * HTTP Version	 *	 * @access public	 * @var float	 */	var $http_version = 0.0;	/**	 * Status code	 *	 * @access public	 * @var int	 */	var $status_code = 0;	/**	 * Reason phrase	 *	 * @access public	 * @var string	 */	var $reason = '';	/**	 * Key/value pairs of the headers	 *	 * @access public	 * @var array	 */	var $headers = array();	/**	 * Body of the response	 *	 * @access public	 * @var string	 */	var $body = '';	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'http_version';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Name of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $name = '';	/**	 * Value of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $value = '';	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_HTTP_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit' || $this->state === 'body')		{			return true;		}		else		{			$this->http_version = '';			$this->status_code = '';			$this->reason = '';			$this->headers = array();			$this->body = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * See if the next character is LWS	 *	 * @access private	 * @return bool true if the next character is LWS, false if not	 */	function is_linear_whitespace()	{		return (bool) ($this->data[$this->position] === "\x09"			|| $this->data[$this->position] === "\x20"			|| ($this->data[$this->position] === "\x0A"				&& isset($this->data[$this->position + 1])				&& ($this->data[$this->position + 1] === "\x09" || $this->data[$this->position + 1] === "\x20")));	}	/**	 * Parse the HTTP version	 *	 * @access private	 */	function http_version()	{		if (strpos($this->data, "\x0A") !== false && strtoupper(substr($this->data, 0, 5)) === 'HTTP/')		{			$len = strspn($this->data, '0123456789.', 5);			$this->http_version = substr($this->data, 5, $len);			$this->position += 5 + $len;			if (substr_count($this->http_version, '.') <= 1)			{				$this->http_version = (float) $this->http_version;				$this->position += strspn($this->data, "\x09\x20", $this->position);				$this->state = 'status';			}			else			{				$this->state = false;			}		}		else		{			$this->state = false;		}	}	/**	 * Parse the status code	 *	 * @access private	 */	function status()	{		if ($len = strspn($this->data, '0123456789', $this->position))		{			$this->status_code = (int) substr($this->data, $this->position, $len);			$this->position += $len;			$this->state = 'reason';		}		else		{			$this->state = false;		}	}	/**	 * Parse the reason phrase	 *	 * @access private	 */	function reason()	{		$len = strcspn($this->data, "\x0A", $this->position);		$this->reason = trim(substr($this->data, $this->position, $len), "\x09\x0D\x20");		$this->position += $len + 1;		$this->state = 'new_line';	}	/**	 * Deal with a new line, shifting data around as needed	 *	 * @access private	 */	function new_line()	{		$this->value = trim($this->value, "\x0D\x20");		if ($this->name !== '' && $this->value !== '')		{			$this->name = strtolower($this->name);			if (isset($this->headers[$this->name]))			{				$this->headers[$this->name] .= ', ' . $this->value;			}			else			{				$this->headers[$this->name] = $this->value;			}		}		$this->name = '';		$this->value = '';		if (substr($this->data[$this->position], 0, 2) === "\x0D\x0A")		{			$this->position += 2;			$this->state = 'body';		}		elseif ($this->data[$this->position] === "\x0A")		{			$this->position++;			$this->state = 'body';		}		else		{			$this->state = 'name';		}	}	/**	 * Parse a header name	 *	 * @access private	 */	function name()	{		$len = strcspn($this->data, "\x0A:", $this->position);		if (isset($this->data[$this->position + $len]))		{			if ($this->data[$this->position + $len] === "\x0A")			{				$this->position += $len;				$this->state = 'new_line';			}			else			{				$this->name = substr($this->data, $this->position, $len);				$this->position += $len + 1;				$this->state = 'value';			}		}		else		{			$this->state = false;		}	}	/**	 * Parse LWS, replacing consecutive LWS characters with a single space	 *	 * @access private	 */	function linear_whitespace()	{		do		{			if (substr($this->data, $this->position, 2) === "\x0D\x0A")			{				$this->position += 2;			}			elseif ($this->data[$this->position] === "\x0A")			{				$this->position++;			}			$this->position += strspn($this->data, "\x09\x20", $this->position);		} while ($this->has_data() && $this->is_linear_whitespace());		$this->value .= "\x20";	}	/**	 * See what state to move to while within non-quoted header values	 *	 * @access private	 */	function value()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'quote';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				default:					$this->state = 'value_char';					break;			}		}	}	/**	 * Parse a header value while outside quotes	 *	 * @access private	 */	function value_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * See what state to move to while within quoted header values	 *	 * @access private	 */	function quote()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'value';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				case '\\':					$this->position++;					$this->state = 'quote_escaped';					break;				default:					$this->state = 'quote_char';					break;			}		}	}	/**	 * Parse a header value while within quotes	 *	 * @access private	 */	function quote_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"\\", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * Parse an escaped character within quotes	 *	 * @access private	 */	function quote_escaped()	{		$this->value .= $this->data[$this->position];		$this->position++;		$this->state = 'quote';	}	/**	 * Parse the body	 *	 * @access private	 */	function body()	{		$this->body = substr($this->data, $this->position);		$this->state = 'emit';	}}/** * gzdecode * * @package SimplePie */class SimplePie_gzdecode{	/**	 * Compressed data	 *	 * @access private	 * @see gzdecode::$data	 */	var $compressed_data;	/**	 * Size of compressed data	 *	 * @access private	 */	var $compressed_size;	/**	 * Minimum size of a valid gzip string	 *	 * @access private	 */	var $min_compressed_size = 18;	/**	 * Current position of pointer	 *	 * @access private	 */	var $position = 0;	/**	 * Flags (FLG)	 *	 * @access private	 */	var $flags;	/**	 * Uncompressed data	 *	 * @access public	 * @see gzdecode::$compressed_data	 */	var $data;	/**	 * Modified time	 *	 * @access public	 */	var $MTIME;	/**	 * Extra Flags	 *	 * @access public	 */	var $XFL;	/**	 * Operating System	 *	 * @access public	 */	var $OS;	/**	 * Subfield ID 1	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI2	 */	var $SI1;	/**	 * Subfield ID 2	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI1	 */	var $SI2;	/**	 * Extra field content	 *	 * @access public	 * @see gzdecode::$SI1	 * @see gzdecode::$SI2	 */	var $extra_field;	/**	 * Original filename	 *	 * @access public	 */	var $filename;	/**	 * Human readable comment	 *	 * @access public	 */	var $comment;	/**	 * Don't allow anything to be set	 *	 * @access public	 */	function __set($name, $value)	{		trigger_error("Cannot write property $name", E_USER_ERROR);	}	/**	 * Set the compressed string and related properties	 *	 * @access public	 */	function SimplePie_gzdecode($data)	{		$this->compressed_data = $data;		$this->compressed_size = strlen($data);	}	/**	 * Decode the GZIP stream	 *	 * @access public	 */	function parse()	{		if ($this->compressed_size >= $this->min_compressed_size)		{			// Check ID1, ID2, and CM			if (substr($this->compressed_data, 0, 3) !== "\x1F\x8B\x08")			{				return false;			}			// Get the FLG (FLaGs)			$this->flags = ord($this->compressed_data[3]);			// FLG bits above (1 << 4) are reserved			if ($this->flags > 0x1F)			{				return false;			}			// Advance the pointer after the above			$this->position += 4;			// MTIME			$mtime = substr($this->compressed_data, $this->position, 4);			// Reverse the string if we're on a big-endian arch because l is the only signed long and is machine endianness			if (current(unpack('S', "\x00\x01")) === 1)			{				$mtime = strrev($mtime);			}			$this->MTIME = current(unpack('l', $mtime));			$this->position += 4;			// Get the XFL (eXtra FLags)			$this->XFL = ord($this->compressed_data[$this->position++]);			// Get the OS (Operating System)			$this->OS = ord($this->compressed_data[$this->position++]);			// Parse the FEXTRA			if ($this->flags & 4)			{				// Read subfield IDs				$this->SI1 = $this->compressed_data[$this->position++];				$this->SI2 = $this->compressed_data[$this->position++];				// SI2 set to zero is reserved for future use				if ($this->SI2 === "\x00")				{					return false;				}				// Get the length of the extra field				$len = current(unpack('v', substr($this->compressed_data, $this->position, 2)));				$position += 2;				// Check the length of the string is still valid				$this->min_compressed_size += $len + 4;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the extra field to the given data					$this->extra_field = substr($this->compressed_data, $this->position, $len);					$this->position += $len;				}				else				{					return false;				}			}			// Parse the FNAME			if ($this->flags & 8)			{				// Get the length of the filename				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original filename to the given string					$this->filename = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FCOMMENT			if ($this->flags & 16)			{				// Get the length of the comment				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original comment to the given string					$this->comment = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FHCRC			if ($this->flags & 2)			{				// Check the length of the string is still valid				$this->min_compressed_size += $len + 2;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Read the CRC					$crc = current(unpack('v', substr($this->compressed_data, $this->position, 2)));					// Check the CRC matches					if ((crc32(substr($this->compressed_data, 0, $this->position)) & 0xFFFF) === $crc)					{						$this->position += 2;					}					else					{						return false;					}				}				else				{					return false;				}			}			// Decompress the actual data			if (($this->data = gzinflate(substr($this->compressed_data, $this->position, -8))) === false)			{				return false;			}			else			{				$this->position = $this->compressed_size - 8;			}			// Check CRC of data			$crc = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			/*if (extension_loaded('hash') && sprintf('%u', current(unpack('V', hash('crc32b', $this->data)))) !== sprintf('%u', $crc))			{				return false;			}*/			// Check ISIZE of data			$isize = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			if (sprintf('%u', strlen($this->data) & 0xFFFFFFFF) !== sprintf('%u', $isize))			{				return false;			}			// Wow, against all odds, we've actually got a valid gzip string			return true;		}		else		{			return false;		}	}}class SimplePie_Cache{	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function SimplePie_Cache()	{		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension)	{		$location_iri =& new SimplePie_IRI($location);		switch ($location_iri->get_scheme())		{			case 'mysql':				if (extension_loaded('mysql'))				{					return new SimplePie_Cache_MySQL($location_iri, $filename, $extension);				}				break;			default:				return new SimplePie_Cache_File($location, $filename, $extension);		}	}}class SimplePie_Cache_File{	var $location;	var $filename;	var $extension;	var $name;	function SimplePie_Cache_File($location, $filename, $extension)	{		$this->location = $location;		$this->filename = $filename;		$this->extension = $extension;		$this->name = "$this->location/$this->filename.$this->extension";	}	function save($data)	{		if (file_exists($this->name) && is_writeable($this->name) || file_exists($this->location) && is_writeable($this->location))		{			if (is_a($data, 'SimplePie'))			{				$data = $data->data;			}			$data = serialize($data);			if (function_exists('file_put_contents'))			{				return (bool) file_put_contents($this->name, $data);			}			else			{				$fp = fopen($this->name, 'wb');				if ($fp)				{					fwrite($fp, $data);					fclose($fp);					return true;				}			}		}		return false;	}	function load()	{		if (file_exists($this->name) && is_readable($this->name))		{			return unserialize(file_get_contents($this->name));		}		return false;	}	function mtime()	{		if (file_exists($this->name))		{			return filemtime($this->name);		}		return false;	}	function touch()	{		if (file_exists($this->name))		{			return touch($this->name);		}		return false;	}	function unlink()	{		if (file_exists($this->name))		{			return unlink($this->name);		}		return false;	}}class SimplePie_Cache_DB{	function prepare_simplepie_object_for_cache($data)	{		$items = $data->get_items();		$items_by_id = array();		if (!empty($items))		{			foreach ($items as $item)			{				$items_by_id[$item->get_id()] = $item;			}			if (count($items_by_id) !== count($items))			{				$items_by_id = array();				foreach ($items as $item)				{					$items_by_id[$item->get_id(true)] = $item;				}			}			if (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0];			}			else			{				$channel = null;			}			if ($channel !== null)			{				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']);				}			}			if (isset($data->data['items']))			{				unset($data->data['items']);			}			if (isset($data->data['ordered_items']))			{				unset($data->data['ordered_items']);			}		}		return array(serialize($data->data), $items_by_id);	}}class SimplePie_Cache_MySQL extends SimplePie_Cache_DB{	var $mysql;	var $options;	var $id;	function SimplePie_Cache_MySQL($mysql_location, $name, $extension)	{		$host = $mysql_location->get_host();		if (SimplePie_Misc::stripos($host, 'unix(') === 0 && substr($host, -1) === ')')		{			$server = ':' . substr($host, 5, -1);		}		else		{			$server = $host;			if ($mysql_location->get_port() !== null)			{				$server .= ':' . $mysql_location->get_port();			}		}		if (strpos($mysql_location->get_userinfo(), ':') !== false)		{			list($username, $password) = explode(':', $mysql_location->get_userinfo(), 2);		}		else		{			$username = $mysql_location->get_userinfo();			$password = null;		}		if ($this->mysql = mysql_connect($server, $username, $password))		{			$this->id = $name . $extension;			$this->options = SimplePie_Misc::parse_str($mysql_location->get_query());			if (!isset($this->options['prefix'][0]))			{				$this->options['prefix'][0] = '';			}			if (mysql_select_db(ltrim($mysql_location->get_path(), '/'))				&& mysql_query('SET NAMES utf8')				&& ($query = mysql_unbuffered_query('SHOW TABLES')))			{				$db = array();				while ($row = mysql_fetch_row($query))				{					$db[] = $row[0];				}				if (!in_array($this->options['prefix'][0] . 'cache_data', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'cache_data` (`id` TEXT CHARACTER SET utf8 NOT NULL, `items` SMALLINT NOT NULL DEFAULT 0, `data` BLOB NOT NULL, `mtime` INT UNSIGNED NOT NULL, UNIQUE (`id`(125)))'))					{						$this->mysql = null;					}				}				if (!in_array($this->options['prefix'][0] . 'items', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'items` (`feed_id` TEXT CHARACTER SET utf8 NOT NULL, `id` TEXT CHARACTER SET utf8 NOT NULL, `data` TEXT CHARACTER SET utf8 NOT NULL, `posted` INT UNSIGNED NOT NULL, INDEX `feed_id` (`feed_id`(125)))'))					{						$this->mysql = null;					}				}			}			else			{				$this->mysql = null;			}		}	}	function save($data)	{		if ($this->mysql)		{			$feed_id = "'" . mysql_real_escape_string($this->id) . "'";			if (is_a($data, 'SimplePie'))			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$data = clone($data);				}				$prepared = $this->prepare_simplepie_object_for_cache($data);				if ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))				{					if (mysql_num_rows($query))					{						$items = count($prepared[1]);						if ($items)						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = ' . $items . ', `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						else						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						if (!mysql_query($sql, $this->mysql))						{							return false;						}					}					elseif (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(' . $feed_id . ', ' . count($prepared[1]) . ', \'' . mysql_real_escape_string($prepared[0]) . '\', ' . time() . ')', $this->mysql))					{						return false;					}					$ids = array_keys($prepared[1]);					if (!empty($ids))					{						foreach ($ids as $id)						{							$database_ids[] = mysql_real_escape_string($id);						}						if ($query = mysql_unbuffered_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'items` WHERE `id` = \'' . implode('\' OR `id` = \'', $database_ids) . '\' AND `feed_id` = ' . $feed_id, $this->mysql))						{							$existing_ids = array();							while ($row = mysql_fetch_row($query))							{								$existing_ids[] = $row[0];							}							$new_ids = array_diff($ids, $existing_ids);							foreach ($new_ids as $new_id)							{								if (!($date = $prepared[1][$new_id]->get_date('U')))								{									$date = time();								}								if (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'items` (`feed_id`, `id`, `data`, `posted`) VALUES(' . $feed_id . ', \'' . mysql_real_escape_string($new_id) . '\', \'' . mysql_real_escape_string(serialize($prepared[1][$new_id]->data)) . '\', ' . $date . ')', $this->mysql))								{									return false;								}							}							return true;						}					}					else					{						return true;					}				}			}			elseif ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))			{				if (mysql_num_rows($query))				{					if (mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = 0, `data` = \'' . mysql_real_escape_string(serialize($data)) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id, $this->mysql))					{						return true;					}				}				elseif (mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(\'' . mysql_real_escape_string($this->id) . '\', 0, \'' . mysql_real_escape_string(serialize($data)) . '\', ' . time() . ')', $this->mysql))				{					return true;				}			}		}		return false;	}	function load()	{		if ($this->mysql && ($query = mysql_query('SELECT `items`, `data` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			$data = unserialize($row[1]);			if (isset($this->options['items'][0]))			{				$items = (int) $this->options['items'][0];			}			else			{				$items = (int) $row[0];			}			if ($items !== 0)			{				if (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0];				}				else				{					$feed = null;				}				if ($feed !== null)				{					$sql = 'SELECT `data` FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . '\' ORDER BY `posted` DESC';					if ($items > 0)					{						$sql .= ' LIMIT ' . $items;					}					if ($query = mysql_unbuffered_query($sql, $this->mysql))					{						while ($row = mysql_fetch_row($query))						{							$feed['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry'][] = unserialize($row[0]);						}					}					else					{						return false;					}				}			}			return $data;		}		return false;	}	function mtime()	{		if ($this->mysql && ($query = mysql_query('SELECT `mtime` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			return $row[0];		}		else		{			return false;		}	}	function touch()	{		if ($this->mysql && ($query = mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `mtime` = ' . time() . ' WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && mysql_affected_rows($this->mysql))		{			return true;		}		else		{			return false;		}	}	function unlink()	{		if ($this->mysql && ($query = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($query2 = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)))		{			return true;		}		else		{			return false;		}	}}class SimplePie_Misc{	function time_hms($seconds)	{		$time = '';		$hours = floor($seconds / 3600);		$remainder = $seconds % 3600;		if ($hours > 0)		{			$time .= $hours.':';		}		$minutes = floor($remainder / 60);		$seconds = $remainder % 60;		if ($minutes < 10 && $hours > 0)		{			$minutes = '0' . $minutes;		}		if ($seconds < 10)		{			$seconds = '0' . $seconds;		}		$time .= $minutes.':';		$time .= $seconds;		return $time;	}	function absolutize_url($relative, $base)	{		$iri = SimplePie_IRI::absolutize(new SimplePie_IRI($base), $relative);		return $iri->get_iri();	}	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	function get_element($realname, $string)	{		$return = array();		$name = preg_quote($realname, '/');		if (preg_match_all("/<($name)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$name>|(\/)?>)/siU", $string, $matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE))		{			for ($i = 0, $total_matches = count($matches); $i < $total_matches; $i++)			{				$return[$i]['tag'] = $realname;				$return[$i]['full'] = $matches[$i][0][0];				$return[$i]['offset'] = $matches[$i][0][1];				if (strlen($matches[$i][3][0]) <= 2)				{					$return[$i]['self_closing'] = true;				}				else				{					$return[$i]['self_closing'] = false;					$return[$i]['content'] = $matches[$i][4][0];				}				$return[$i]['attribs'] = array();				if (isset($matches[$i][2][0]) && preg_match_all('/[\x09\x0A\x0B\x0C\x0D\x20]+([^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*)(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"([^"]*)"|\'([^\']*)\'|([^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?/', ' ' . $matches[$i][2][0] . ' ', $attribs, PREG_SET_ORDER))				{					for ($j = 0, $total_attribs = count($attribs); $j < $total_attribs; $j++)					{						if (count($attribs[$j]) === 2)						{							$attribs[$j][2] = $attribs[$j][1];						}						$return[$i]['attribs'][strtolower($attribs[$j][1])]['data'] = SimplePie_Misc::entities_decode(end($attribs[$j]), 'UTF-8');					}				}			}		}		return $return;	}	function element_implode($element)	{		$full = "<$element[tag]";		foreach ($element['attribs'] as $key => $value)		{			$key = strtolower($key);			$full .= " $key=\"" . htmlspecialchars($value['data']) . '"';		}		if ($element['self_closing'])		{			$full .= ' />';		}		else		{			$full .= ">$element[content]</$element[tag]>";		}		return $full;	}	function error($message, $level, $file, $line)	{		if ((ini_get('error_reporting') & $level) > 0)		{			switch ($level)			{				case E_USER_ERROR:					$note = 'PHP Error';					break;				case E_USER_WARNING:					$note = 'PHP Warning';					break;				case E_USER_NOTICE:					$note = 'PHP Notice';					break;				default:					$note = 'Unknown Error';					break;			}			error_log("$note: $message in $file on line $line", 0);		}		return $message;	}	/**	 * If a file has been cached, retrieve and display it.	 *	 * This is most useful for caching images (get_favicon(), etc.),	 * however it works for all cached files.  This WILL NOT display ANY	 * file/image/page/whatever, but rather only display what has already	 * been cached by SimplePie.	 *	 * @access public	 * @see SimplePie::get_favicon()	 * @param str $identifier_url URL that is used to identify the content.	 * This may or may not be the actual URL of the live content.	 * @param str $cache_location Location of SimplePie's cache.  Defaults	 * to './cache'.	 * @param str $cache_extension The file extension that the file was	 * cached with.  Defaults to 'spc'.	 * @param str $cache_class Name of the cache-handling class being used	 * in SimplePie.  Defaults to 'SimplePie_Cache', and should be left	 * as-is unless you've overloaded the class.	 * @param str $cache_name_function Obsolete. Exists for backwards	 * compatibility reasons only.	 */	function display_cached_file($identifier_url, $cache_location = './cache', $cache_extension = 'spc', $cache_class = 'SimplePie_Cache', $cache_name_function = 'md5')	{		$cache = call_user_func(array($cache_class, 'create'), $cache_location, $identifier_url, $cache_extension);		if ($file = $cache->load())		{			if (isset($file['headers']['content-type']))			{				header('Content-type:' . $file['headers']['content-type']);			}			else			{				header('Content-type: application/octet-stream');			}			header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days			echo $file['body'];			exit;		}		die('Cached file for ' . $identifier_url . ' cannot be found.');	}	function fix_protocol($url, $http = 1)	{		$url = SimplePie_Misc::normalize_url($url);		$parsed = SimplePie_Misc::parse_url($url);		if ($parsed['scheme'] !== '' && $parsed['scheme'] !== 'http' && $parsed['scheme'] !== 'https')		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['authority'], $parsed['path'], $parsed['query'], $parsed['fragment']), $http);		}		if ($parsed['scheme'] === '' && $parsed['authority'] === '' && !file_exists($url))		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['path'], '', $parsed['query'], $parsed['fragment']), $http);		}		if ($http === 2 && $parsed['scheme'] !== '')		{			return "feed:$url";		}		elseif ($http === 3 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'podcast', 0, 4);		}		elseif ($http === 4 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'itpc', 0, 4);		}		else		{			return $url;		}	}	function parse_url($url)	{		$iri =& new SimplePie_IRI($url);		return array(			'scheme' => (string) $iri->get_scheme(),			'authority' => (string) $iri->get_authority(),			'path' => (string) $iri->get_path(),			'query' => (string) $iri->get_query(),			'fragment' => (string) $iri->get_fragment()		);	}	function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')	{		$iri =& new SimplePie_IRI('');		$iri->set_scheme($scheme);		$iri->set_authority($authority);		$iri->set_path($path);		$iri->set_query($query);		$iri->set_fragment($fragment);		return $iri->get_iri();	}	function normalize_url($url)	{		$iri =& new SimplePie_IRI($url);		return $iri->get_iri();	}	function percent_encoding_normalization($match)	{		$integer = hexdec($match[1]);		if ($integer >= 0x41 && $integer <= 0x5A || $integer >= 0x61 && $integer <= 0x7A || $integer >= 0x30 && $integer <= 0x39 || $integer === 0x2D || $integer === 0x2E || $integer === 0x5F || $integer === 0x7E)		{			return chr($integer);		}		else		{			return strtoupper($match[0]);		}	}	/**	 * Remove bad UTF-8 bytes	 *	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C	 * FAQ: Multilingual Forms (modified to include full ASCII range)	 *	 * @author Geoffrey Sneddon	 * @see http://www.w3.org/International/questions/qa-forms-utf-8	 * @param string $str String to remove bad UTF-8 bytes from	 * @return string UTF-8 string	 */	function utf8_bad_replace($str)	{		if (function_exists('iconv') && ($return = @iconv('UTF-8', 'UTF-8//IGNORE', $str)))		{			return $return;		}		elseif (function_exists('mb_convert_encoding') && ($return = @mb_convert_encoding($str, 'UTF-8', 'UTF-8')))		{			return $return;		}		elseif (preg_match_all('/(?:[\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})+/', $str, $matches))		{			return implode("\xEF\xBF\xBD", $matches[0]);		}		elseif ($str !== '')		{			return "\xEF\xBF\xBD";		}		else		{			return '';		}	}	/**	 * Converts a Windows-1252 encoded string to a UTF-8 encoded string	 *	 * @static	 * @access public	 * @param string $string Windows-1252 encoded string	 * @return string UTF-8 encoded string	 */	function windows_1252_to_utf8($string)	{		static $convert_table = array("\x80" => "\xE2\x82\xAC", "\x81" => "\xEF\xBF\xBD", "\x82" => "\xE2\x80\x9A", "\x83" => "\xC6\x92", "\x84" => "\xE2\x80\x9E", "\x85" => "\xE2\x80\xA6", "\x86" => "\xE2\x80\xA0", "\x87" => "\xE2\x80\xA1", "\x88" => "\xCB\x86", "\x89" => "\xE2\x80\xB0", "\x8A" => "\xC5\xA0", "\x8B" => "\xE2\x80\xB9", "\x8C" => "\xC5\x92", "\x8D" => "\xEF\xBF\xBD", "\x8E" => "\xC5\xBD", "\x8F" => "\xEF\xBF\xBD", "\x90" => "\xEF\xBF\xBD", "\x91" => "\xE2\x80\x98", "\x92" => "\xE2\x80\x99", "\x93" => "\xE2\x80\x9C", "\x94" => "\xE2\x80\x9D", "\x95" => "\xE2\x80\xA2", "\x96" => "\xE2\x80\x93", "\x97" => "\xE2\x80\x94", "\x98" => "\xCB\x9C", "\x99" => "\xE2\x84\xA2", "\x9A" => "\xC5\xA1", "\x9B" => "\xE2\x80\xBA", "\x9C" => "\xC5\x93", "\x9D" => "\xEF\xBF\xBD", "\x9E" => "\xC5\xBE", "\x9F" => "\xC5\xB8", "\xA0" => "\xC2\xA0", "\xA1" => "\xC2\xA1", "\xA2" => "\xC2\xA2", "\xA3" => "\xC2\xA3", "\xA4" => "\xC2\xA4", "\xA5" => "\xC2\xA5", "\xA6" => "\xC2\xA6", "\xA7" => "\xC2\xA7", "\xA8" => "\xC2\xA8", "\xA9" => "\xC2\xA9", "\xAA" => "\xC2\xAA", "\xAB" => "\xC2\xAB", "\xAC" => "\xC2\xAC", "\xAD" => "\xC2\xAD", "\xAE" => "\xC2\xAE", "\xAF" => "\xC2\xAF", "\xB0" => "\xC2\xB0", "\xB1" => "\xC2\xB1", "\xB2" => "\xC2\xB2", "\xB3" => "\xC2\xB3", "\xB4" => "\xC2\xB4", "\xB5" => "\xC2\xB5", "\xB6" => "\xC2\xB6", "\xB7" => "\xC2\xB7", "\xB8" => "\xC2\xB8", "\xB9" => "\xC2\xB9", "\xBA" => "\xC2\xBA", "\xBB" => "\xC2\xBB", "\xBC" => "\xC2\xBC", "\xBD" => "\xC2\xBD", "\xBE" => "\xC2\xBE", "\xBF" => "\xC2\xBF", "\xC0" => "\xC3\x80", "\xC1" => "\xC3\x81", "\xC2" => "\xC3\x82", "\xC3" => "\xC3\x83", "\xC4" => "\xC3\x84", "\xC5" => "\xC3\x85", "\xC6" => "\xC3\x86", "\xC7" => "\xC3\x87", "\xC8" => "\xC3\x88", "\xC9" => "\xC3\x89", "\xCA" => "\xC3\x8A", "\xCB" => "\xC3\x8B", "\xCC" => "\xC3\x8C", "\xCD" => "\xC3\x8D", "\xCE" => "\xC3\x8E", "\xCF" => "\xC3\x8F", "\xD0" => "\xC3\x90", "\xD1" => "\xC3\x91", "\xD2" => "\xC3\x92", "\xD3" => "\xC3\x93", "\xD4" => "\xC3\x94", "\xD5" => "\xC3\x95", "\xD6" => "\xC3\x96", "\xD7" => "\xC3\x97", "\xD8" => "\xC3\x98", "\xD9" => "\xC3\x99", "\xDA" => "\xC3\x9A", "\xDB" => "\xC3\x9B", "\xDC" => "\xC3\x9C", "\xDD" => "\xC3\x9D", "\xDE" => "\xC3\x9E", "\xDF" => "\xC3\x9F", "\xE0" => "\xC3\xA0", "\xE1" => "\xC3\xA1", "\xE2" => "\xC3\xA2", "\xE3" => "\xC3\xA3", "\xE4" => "\xC3\xA4", "\xE5" => "\xC3\xA5", "\xE6" => "\xC3\xA6", "\xE7" => "\xC3\xA7", "\xE8" => "\xC3\xA8", "\xE9" => "\xC3\xA9", "\xEA" => "\xC3\xAA", "\xEB" => "\xC3\xAB", "\xEC" => "\xC3\xAC", "\xED" => "\xC3\xAD", "\xEE" => "\xC3\xAE", "\xEF" => "\xC3\xAF", "\xF0" => "\xC3\xB0", "\xF1" => "\xC3\xB1", "\xF2" => "\xC3\xB2", "\xF3" => "\xC3\xB3", "\xF4" => "\xC3\xB4", "\xF5" => "\xC3\xB5", "\xF6" => "\xC3\xB6", "\xF7" => "\xC3\xB7", "\xF8" => "\xC3\xB8", "\xF9" => "\xC3\xB9", "\xFA" => "\xC3\xBA", "\xFB" => "\xC3\xBB", "\xFC" => "\xC3\xBC", "\xFD" => "\xC3\xBD", "\xFE" => "\xC3\xBE", "\xFF" => "\xC3\xBF");		return strtr($string, $convert_table);	}	function change_encoding($data, $input, $output)	{		$input = SimplePie_Misc::encoding($input);		$output = SimplePie_Misc::encoding($output);		// We fail to fail on non US-ASCII bytes		if ($input === 'US-ASCII')		{			static $non_ascii_octects = '';			if (!$non_ascii_octects)			{				for ($i = 0x80; $i <= 0xFF; $i++)				{					$non_ascii_octects .= chr($i);				}			}			$data = substr($data, 0, strcspn($data, $non_ascii_octects));		}		// This is first, as behaviour of this is completely predictable		if ($input === 'windows-1252' && $output === 'UTF-8')		{			return SimplePie_Misc::windows_1252_to_utf8($data);		}		// This is second, as behaviour of this varies only with PHP version (the middle part of this expression checks the encoding is supported).		elseif (function_exists('mb_convert_encoding') && @mb_convert_encoding("\x80", 'UTF-16BE', $input) !== "\x00\x80" && ($return = @mb_convert_encoding($data, $output, $input)))		{			return $return;		}		// This is last, as behaviour of this varies with OS userland and PHP version		elseif (function_exists('iconv') && ($return = @iconv($input, $output, $data)))		{			return $return;		}		// If we can't do anything, just fail		else		{			return false;		}	}	function encoding($charset)	{		// Normalization from UTS #22		switch (strtolower(preg_replace('/(?:[^a-zA-Z0-9]+|([^0-9])0+)/', '\1', $charset)))		{			case 'adobestandardencoding':			case 'csadobestandardencoding':				return 'Adobe-Standard-Encoding';			case 'adobesymbolencoding':			case 'cshppsmath':				return 'Adobe-Symbol-Encoding';			case 'ami1251':			case 'amiga1251':				return 'Amiga-1251';			case 'ansix31101983':			case 'csat5001983':			case 'csiso99naplps':			case 'isoir99':			case 'naplps':				return 'ANSI_X3.110-1983';			case 'arabic7':			case 'asmo449':			case 'csiso89asmo449':			case 'iso9036':			case 'isoir89':				return 'ASMO_449';			case 'big5':			case 'csbig5':			case 'xxbig5':				return 'Big5';			case 'big5hkscs':				return 'Big5-HKSCS';			case 'bocu1':			case 'csbocu1':				return 'BOCU-1';			case 'brf':			case 'csbrf':				return 'BRF';			case 'bs4730':			case 'csiso4unitedkingdom':			case 'gb':			case 'iso646gb':			case 'isoir4':			case 'uk':				return 'BS_4730';			case 'bsviewdata':			case 'csiso47bsviewdata':			case 'isoir47':				return 'BS_viewdata';			case 'cesu8':			case 'cscesu8':				return 'CESU-8';			case 'ca':			case 'csa71':			case 'csaz243419851':			case 'csiso121canadian1':			case 'iso646ca':			case 'isoir121':				return 'CSA_Z243.4-1985-1';			case 'csa72':			case 'csaz243419852':			case 'csiso122canadian2':			case 'iso646ca2':			case 'isoir122':				return 'CSA_Z243.4-1985-2';			case 'csaz24341985gr':			case 'csiso123csaz24341985gr':			case 'isoir123':				return 'CSA_Z243.4-1985-gr';			case 'csiso139csn369103':			case 'csn369103':			case 'isoir139':				return 'CSN_369103';			case 'csdecmcs':			case 'dec':			case 'decmcs':				return 'DEC-MCS';			case 'csiso21german':			case 'de':			case 'din66003':			case 'iso646de':			case 'isoir21':				return 'DIN_66003';			case 'csdkus':			case 'dkus':				return 'dk-us';			case 'csiso646danish':			case 'dk':			case 'ds2089':			case 'iso646dk':				return 'DS_2089';			case 'csibmebcdicatde':			case 'ebcdicatde':				return 'EBCDIC-AT-DE';			case 'csebcdicatdea':			case 'ebcdicatdea':				return 'EBCDIC-AT-DE-A';			case 'csebcdiccafr':			case 'ebcdiccafr':				return 'EBCDIC-CA-FR';			case 'csebcdicdkno':			case 'ebcdicdkno':				return 'EBCDIC-DK-NO';			case 'csebcdicdknoa':			case 'ebcdicdknoa':				return 'EBCDIC-DK-NO-A';			case 'csebcdices':			case 'ebcdices':				return 'EBCDIC-ES';			case 'csebcdicesa':			case 'ebcdicesa':				return 'EBCDIC-ES-A';			case 'csebcdicess':			case 'ebcdicess':				return 'EBCDIC-ES-S';			case 'csebcdicfise':			case 'ebcdicfise':				return 'EBCDIC-FI-SE';			case 'csebcdicfisea':			case 'ebcdicfisea':				return 'EBCDIC-FI-SE-A';			case 'csebcdicfr':			case 'ebcdicfr':				return 'EBCDIC-FR';			case 'csebcdicit':			case 'ebcdicit':				return 'EBCDIC-IT';			case 'csebcdicpt':			case 'ebcdicpt':				return 'EBCDIC-PT';			case 'csebcdicuk':			case 'ebcdicuk':				return 'EBCDIC-UK';			case 'csebcdicus':			case 'ebcdicus':				return 'EBCDIC-US';			case 'csiso111ecmacyrillic':			case 'ecmacyrillic':			case 'isoir111':			case 'koi8e':				return 'ECMA-cyrillic';			case 'csiso17spanish':			case 'es':			case 'iso646es':			case 'isoir17':				return 'ES';			case 'csiso85spanish2':			case 'es2':			case 'iso646es2':			case 'isoir85':				return 'ES2';			case 'cseucfixwidjapanese':			case 'extendedunixcodefixedwidthforjapanese':				return 'Extended_UNIX_Code_Fixed_Width_for_Japanese';			case 'cseucpkdfmtjapanese':			case 'eucjp':			case 'extendedunixcodepackedformatforjapanese':				return 'Extended_UNIX_Code_Packed_Format_for_Japanese';			case 'gb18030':				return 'GB18030';			case 'chinese':			case 'cp936':			case 'csgb2312':			case 'csiso58gb231280':			case 'gb2312':			case 'gb231280':			case 'gbk':			case 'isoir58':			case 'ms936':			case 'windows936':				return 'GBK';			case 'cn':			case 'csiso57gb1988':			case 'gb198880':			case 'iso646cn':			case 'isoir57':				return 'GB_1988-80';			case 'csiso153gost1976874':			case 'gost1976874':			case 'isoir153':			case 'stsev35888':				return 'GOST_19768-74';			case 'csiso150':			case 'csiso150greekccitt':			case 'greekccitt':			case 'isoir150':				return 'greek-ccitt';			case 'csiso88greek7':			case 'greek7':			case 'isoir88':				return 'greek7';			case 'csiso18greek7old':			case 'greek7old':			case 'isoir18':				return 'greek7-old';			case 'cshpdesktop':			case 'hpdesktop':				return 'HP-DeskTop';			case 'cshplegal':			case 'hplegal':				return 'HP-Legal';			case 'cshpmath8':			case 'hpmath8':				return 'HP-Math8';			case 'cshppifont':			case 'hppifont':				return 'HP-Pi-font';			case 'cshproman8':			case 'hproman8':			case 'r8':			case 'roman8':				return 'hp-roman8';			case 'hzgb2312':				return 'HZ-GB-2312';			case 'csibmsymbols':			case 'ibmsymbols':				return 'IBM-Symbols';			case 'csibmthai':			case 'ibmthai':				return 'IBM-Thai';			case 'ccsid858':			case 'cp858':			case 'ibm858':			case 'pcmultilingual850euro':				return 'IBM00858';			case 'ccsid924':			case 'cp924':			case 'ebcdiclatin9euro':			case 'ibm924':				return 'IBM00924';			case 'ccsid1140':			case 'cp1140':			case 'ebcdicus37euro':			case 'ibm1140':				return 'IBM01140';			case 'ccsid1141':			case 'cp1141':			case 'ebcdicde273euro':			case 'ibm1141':				return 'IBM01141';			case 'ccsid1142':			case 'cp1142':			case 'ebcdicdk277euro':			case 'ebcdicno277euro':			case 'ibm1142':				return 'IBM01142';			case 'ccsid1143':			case 'cp1143':			case 'ebcdicfi278euro':			case 'ebcdicse278euro':			case 'ibm1143':				return 'IBM01143';			case 'ccsid1144':			case 'cp1144':			case 'ebcdicit280euro':			case 'ibm1144':				return 'IBM01144';			case 'ccsid1145':			case 'cp1145':			case 'ebcdices284euro':			case 'ibm1145':				return 'IBM01145';			case 'ccsid1146':			case 'cp1146':			case 'ebcdicgb285euro':			case 'ibm1146':				return 'IBM01146';			case 'ccsid1147':			case 'cp1147':			case 'ebcdicfr297euro':			case 'ibm1147':				return 'IBM01147';			case 'ccsid1148':			case 'cp1148':			case 'ebcdicinternational500euro':			case 'ibm1148':				return 'IBM01148';			case 'ccsid1149':			case 'cp1149':			case 'ebcdicis871euro':			case 'ibm1149':				return 'IBM01149';			case 'cp37':			case 'csibm37':			case 'ebcdiccpca':			case 'ebcdiccpnl':			case 'ebcdiccpus':			case 'ebcdiccpwt':			case 'ibm37':				return 'IBM037';			case 'cp38':			case 'csibm38':			case 'ebcdicint':			case 'ibm38':				return 'IBM038';			case 'cp273':			case 'csibm273':			case 'ibm273':				return 'IBM273';			case 'cp274':			case 'csibm274':			case 'ebcdicbe':			case 'ibm274':				return 'IBM274';			case 'cp275':			case 'csibm275':			case 'ebcdicbr':			case 'ibm275':				return 'IBM275';			case 'csibm277':			case 'ebcdiccpdk':			case 'ebcdiccpno':			case 'ibm277':				return 'IBM277';			case 'cp278':			case 'csibm278':			case 'ebcdiccpfi':			case 'ebcdiccpse':			case 'ibm278':				return 'IBM278';			case 'cp280':			case 'csibm280':			case 'ebcdiccpit':			case 'ibm280':				return 'IBM280';			case 'cp281':			case 'csibm281':			case 'ebcdicjpe':			case 'ibm281':				return 'IBM281';			case 'cp284':			case 'csibm284':			case 'ebcdiccpes':			case 'ibm284':				return 'IBM284';			case 'cp285':			case 'csibm285':			case 'ebcdiccpgb':			case 'ibm285':				return 'IBM285';			case 'cp290':			case 'csibm290':			case 'ebcdicjpkana':			case 'ibm290':				return 'IBM290';			case 'cp297':			case 'csibm297':			case 'ebcdiccpfr':			case 'ibm297':				return 'IBM297';			case 'cp420':			case 'csibm420':			case 'ebcdiccpar1':			case 'ibm420':				return 'IBM420';			case 'cp423':			case 'csibm423':			case 'ebcdiccpgr':			case 'ibm423':				return 'IBM423';			case 'cp424':			case 'csibm424':			case 'ebcdiccphe':			case 'ibm424':				return 'IBM424';			case '437':			case 'cp437':			case 'cspc8codepage437':			case 'ibm437':				return 'IBM437';			case 'cp500':			case 'csibm500':			case 'ebcdiccpbe':			case 'ebcdiccpch':			case 'ibm500':				return 'IBM500';			case 'cp775':			case 'cspc775baltic':			case 'ibm775':				return 'IBM775';			case '850':			case 'cp850':			case 'cspc850multilingual':			case 'ibm850':				return 'IBM850';			case '851':			case 'cp851':			case 'csibm851':			case 'ibm851':				return 'IBM851';			case '852':			case 'cp852':			case 'cspcp852':			case 'ibm852':				return 'IBM852';			case '855':			case 'cp855':			case 'csibm855':			case 'ibm855':				return 'IBM855';			case '857':			case 'cp857':			case 'csibm857':			case 'ibm857':				return 'IBM857';			case '860':			case 'cp860':			case 'csibm860':			case 'ibm860':				return 'IBM860';			case '861':			case 'cp861':			case 'cpis':			case 'csibm861':			case 'ibm861':				return 'IBM861';			case '862':			case 'cp862':			case 'cspc862latinhebrew':			case 'ibm862':				return 'IBM862';			case '863':			case 'cp863':			case 'csibm863':			case 'ibm863':				return 'IBM863';			case 'cp864':			case 'csibm864':			case 'ibm864':				return 'IBM864';			case '865':			case 'cp865':			case 'csibm865':			case 'ibm865':				return 'IBM865';			case '866':			case 'cp866':			case 'csibm866':			case 'ibm866':				return 'IBM866';			case 'cp868':			case 'cpar':			case 'csibm868':			case 'ibm868':				return 'IBM868';			case '869':			case 'cp869':			case 'cpgr':			case 'csibm869':			case 'ibm869':				return 'IBM869';			case 'cp870':			case 'csibm870':			case 'ebcdiccproece':			case 'ebcdiccpyu':			case 'ibm870':				return 'IBM870';			case 'cp871':			case 'csibm871':			case 'ebcdiccpis':			case 'ibm871':				return 'IBM871';			case 'cp880':			case 'csibm880':			case 'ebcdiccyrillic':			case 'ibm880':				return 'IBM880';			case 'cp891':			case 'csibm891':			case 'ibm891':				return 'IBM891';			case 'cp903':			case 'csibm903':			case 'ibm903':				return 'IBM903';			case '904':			case 'cp904':			case 'csibbm904':			case 'ibm904':				return 'IBM904';			case 'cp905':			case 'csibm905':			case 'ebcdiccptr':			case 'ibm905':				return 'IBM905';			case 'cp918':			case 'csibm918':			case 'ebcdiccpar2':			case 'ibm918':				return 'IBM918';			case 'cp1026':			case 'csibm1026':			case 'ibm1026':				return 'IBM1026';			case 'ibm1047':				return 'IBM1047';			case 'csiso143iecp271':			case 'iecp271':			case 'isoir143':				return 'IEC_P27-1';			case 'csiso49inis':			case 'inis':			case 'isoir49':				return 'INIS';			case 'csiso50inis8':			case 'inis8':			case 'isoir50':				return 'INIS-8';			case 'csiso51iniscyrillic':			case 'iniscyrillic':			case 'isoir51':				return 'INIS-cyrillic';			case 'csinvariant':			case 'invariant':				return 'INVARIANT';			case 'iso2022cn':				return 'ISO-2022-CN';			case 'iso2022cnext':				return 'ISO-2022-CN-EXT';			case 'csiso2022jp':			case 'iso2022jp':				return 'ISO-2022-JP';			case 'csiso2022jp2':			case 'iso2022jp2':				return 'ISO-2022-JP-2';			case 'csiso2022kr':			case 'iso2022kr':				return 'ISO-2022-KR';			case 'cswindows30latin1':			case 'iso88591windows30latin1':				return 'ISO-8859-1-Windows-3.0-Latin-1';			case 'cswindows31latin1':			case 'iso88591windows31latin1':				return 'ISO-8859-1-Windows-3.1-Latin-1';			case 'csisolatin2':			case 'iso88592':			case 'iso885921987':			case 'isoir101':			case 'l2':			case 'latin2':				return 'ISO-8859-2';			case 'cswindows31latin2':			case 'iso88592windowslatin2':				return 'ISO-8859-2-Windows-Latin-2';			case 'csisolatin3':			case 'iso88593':			case 'iso885931988':			case 'isoir109':			case 'l3':			case 'latin3':				return 'ISO-8859-3';			case 'csisolatin4':			case 'iso88594':			case 'iso885941988':			case 'isoir110':			case 'l4':			case 'latin4':				return 'ISO-8859-4';			case 'csisolatincyrillic':			case 'cyrillic':			case 'iso88595':			case 'iso885951988':			case 'isoir144':				return 'ISO-8859-5';			case 'arabic':			case 'asmo708':			case 'csisolatinarabic':			case 'ecma114':			case 'iso88596':			case 'iso885961987':			case 'isoir127':				return 'ISO-8859-6';			case 'csiso88596e':			case 'iso88596e':				return 'ISO-8859-6-E';			case 'csiso88596i':			case 'iso88596i':				return 'ISO-8859-6-I';			case 'csisolatingreek':			case 'ecma118':			case 'elot928':			case 'greek':			case 'greek8':			case 'iso88597':			case 'iso885971987':			case 'isoir126':				return 'ISO-8859-7';			case 'csisolatinhebrew':			case 'hebrew':			case 'iso88598':			case 'iso885981988':			case 'isoir138':				return 'ISO-8859-8';			case 'csiso88598e':			case 'iso88598e':				return 'ISO-8859-8-E';			case 'csiso88598i':			case 'iso88598i':				return 'ISO-8859-8-I';			case 'cswindows31latin5':			case 'iso88599windowslatin5':				return 'ISO-8859-9-Windows-Latin-5';			case 'csisolatin6':			case 'iso885910':			case 'iso8859101992':			case 'isoir157':			case 'l6':			case 'latin6':				return 'ISO-8859-10';			case 'iso885913':				return 'ISO-8859-13';			case 'iso885914':			case 'iso8859141998':			case 'isoceltic':			case 'isoir199':			case 'l8':			case 'latin8':				return 'ISO-8859-14';			case 'iso885915':			case 'latin9':				return 'ISO-8859-15';			case 'iso885916':			case 'iso8859162001':			case 'isoir226':			case 'l10':			case 'latin10':				return 'ISO-8859-16';			case 'iso10646j1':				return 'ISO-10646-J-1';			case 'csunicode':			case 'iso10646ucs2':				return 'ISO-10646-UCS-2';			case 'csucs4':			case 'iso10646ucs4':				return 'ISO-10646-UCS-4';			case 'csunicodeascii':			case 'iso10646ucsbasic':				return 'ISO-10646-UCS-Basic';			case 'csunicodelatin1':			case 'iso10646':			case 'iso10646unicodelatin1':				return 'ISO-10646-Unicode-Latin1';			case 'csiso10646utf1':			case 'iso10646utf1':				return 'ISO-10646-UTF-1';			case 'csiso115481':			case 'iso115481':			case 'isotr115481':				return 'ISO-11548-1';			case 'csiso90':			case 'isoir90':				return 'iso-ir-90';			case 'csunicodeibm1261':			case 'isounicodeibm1261':				return 'ISO-Unicode-IBM-1261';			case 'csunicodeibm1264':			case 'isounicodeibm1264':				return 'ISO-Unicode-IBM-1264';			case 'csunicodeibm1265':			case 'isounicodeibm1265':				return 'ISO-Unicode-IBM-1265';			case 'csunicodeibm1268':			case 'isounicodeibm1268':				return 'ISO-Unicode-IBM-1268';			case 'csunicodeibm1276':			case 'isounicodeibm1276':				return 'ISO-Unicode-IBM-1276';			case 'csiso646basic1983':			case 'iso646basic1983':			case 'ref':				return 'ISO_646.basic:1983';			case 'csiso2intlrefversion':			case 'irv':			case 'iso646irv1983':			case 'isoir2':				return 'ISO_646.irv:1983';			case 'csiso2033':			case 'e13b':			case 'iso20331983':			case 'isoir98':				return 'ISO_2033-1983';			case 'csiso5427cyrillic':			case 'iso5427':			case 'isoir37':				return 'ISO_5427';			case 'iso5427cyrillic1981':			case 'iso54271981':			case 'isoir54':				return 'ISO_5427:1981';			case 'csiso5428greek':			case 'iso54281980':			case 'isoir55':				return 'ISO_5428:1980';			case 'csiso6937add':			case 'iso6937225':			case 'isoir152':				return 'ISO_6937-2-25';			case 'csisotextcomm':			case 'iso69372add':			case 'isoir142':				return 'ISO_6937-2-add';			case 'csiso8859supp':			case 'iso8859supp':			case 'isoir154':			case 'latin125':				return 'ISO_8859-supp';			case 'csiso10367box':			case 'iso10367box':			case 'isoir155':				return 'ISO_10367-box';			case 'csiso15italian':			case 'iso646it':			case 'isoir15':			case 'it':				return 'IT';			case 'csiso13jisc6220jp':			case 'isoir13':			case 'jisc62201969':			case 'jisc62201969jp':			case 'katakana':			case 'x2017':				return 'JIS_C6220-1969-jp';			case 'csiso14jisc6220ro':			case 'iso646jp':			case 'isoir14':			case 'jisc62201969ro':			case 'jp':				return 'JIS_C6220-1969-ro';			case 'csiso42jisc62261978':			case 'isoir42':			case 'jisc62261978':				return 'JIS_C6226-1978';			case 'csiso87jisx208':			case 'isoir87':			case 'jisc62261983':			case 'jisx2081983':			case 'x208':				return 'JIS_C6226-1983';			case 'csiso91jisc62291984a':			case 'isoir91':			case 'jisc62291984a':			case 'jpocra':				return 'JIS_C6229-1984-a';			case 'csiso92jisc62991984b':			case 'iso646jpocrb':			case 'isoir92':			case 'jisc62291984b':			case 'jpocrb':				return 'JIS_C6229-1984-b';			case 'csiso93jis62291984badd':			case 'isoir93':			case 'jisc62291984badd':			case 'jpocrbadd':				return 'JIS_C6229-1984-b-add';			case 'csiso94jis62291984hand':			case 'isoir94':			case 'jisc62291984hand':			case 'jpocrhand':				return 'JIS_C6229-1984-hand';			case 'csiso95jis62291984handadd':			case 'isoir95':			case 'jisc62291984handadd':			case 'jpocrhandadd':				return 'JIS_C6229-1984-hand-add';			case 'csiso96jisc62291984kana':			case 'isoir96':			case 'jisc62291984kana':				return 'JIS_C6229-1984-kana';			case 'csjisencoding':			case 'jisencoding':				return 'JIS_Encoding';			case 'cshalfwidthkatakana':			case 'jisx201':			case 'x201':				return 'JIS_X0201';			case 'csiso159jisx2121990':			case 'isoir159':			case 'jisx2121990':			case 'x212':				return 'JIS_X0212-1990';			case 'csiso141jusib1002':			case 'iso646yu':			case 'isoir141':			case 'js':			case 'jusib1002':			case 'yu':				return 'JUS_I.B1.002';			case 'csiso147macedonian':			case 'isoir147':			case 'jusib1003mac':			case 'macedonian':				return 'JUS_I.B1.003-mac';			case 'csiso146serbian':			case 'isoir146':			case 'jusib1003serb':			case 'serbian':				return 'JUS_I.B1.003-serb';			case 'koi7switched':				return 'KOI7-switched';			case 'cskoi8r':			case 'koi8r':				return 'KOI8-R';			case 'koi8u':				return 'KOI8-U';			case 'csksc5636':			case 'iso646kr':			case 'ksc5636':				return 'KSC5636';			case 'cskz1048':			case 'kz1048':			case 'rk1048':			case 'strk10482002':				return 'KZ-1048';			case 'csiso19latingreek':			case 'isoir19':			case 'latingreek':				return 'latin-greek';			case 'csiso27latingreek1':			case 'isoir27':			case 'latingreek1':				return 'Latin-greek-1';			case 'csiso158lap':			case 'isoir158':			case 'lap':			case 'latinlap':				return 'latin-lap';			case 'csmacintosh':			case 'mac':			case 'macintosh':				return 'macintosh';			case 'csmicrosoftpublishing':			case 'microsoftpublishing':				return 'Microsoft-Publishing';			case 'csmnem':			case 'mnem':				return 'MNEM';			case 'csmnemonic':			case 'mnemonic':				return 'MNEMONIC';			case 'csiso86hungarian':			case 'hu':			case 'iso646hu':			case 'isoir86':			case 'msz77953':				return 'MSZ_7795.3';			case 'csnatsdano':			case 'isoir91':			case 'natsdano':				return 'NATS-DANO';			case 'csnatsdanoadd':			case 'isoir92':			case 'natsdanoadd':				return 'NATS-DANO-ADD';			case 'csnatssefi':			case 'isoir81':			case 'natssefi':				return 'NATS-SEFI';			case 'csnatssefiadd':			case 'isoir82':			case 'natssefiadd':				return 'NATS-SEFI-ADD';			case 'csiso151cuba':			case 'cuba':			case 'iso646cu':			case 'isoir151':			case 'ncnc1081':				return 'NC_NC00-10:81';			case 'csiso69french':			case 'fr':			case 'iso646fr':			case 'isoir69':			case 'nfz62010':				return 'NF_Z_62-010';			case 'csiso25french':			case 'iso646fr1':			case 'isoir25':			case 'nfz620101973':				return 'NF_Z_62-010_(1973)';			case 'csiso60danishnorwegian':			case 'csiso60norwegian1':			case 'iso646no':			case 'isoir60':			case 'no':			case 'ns45511':				return 'NS_4551-1';			case 'csiso61norwegian2':			case 'iso646no2':			case 'isoir61':			case 'no2':			case 'ns45512':				return 'NS_4551-2';			case 'osdebcdicdf3irv':				return 'OSD_EBCDIC_DF03_IRV';			case 'osdebcdicdf41':				return 'OSD_EBCDIC_DF04_1';			case 'osdebcdicdf415':				return 'OSD_EBCDIC_DF04_15';			case 'cspc8danishnorwegian':			case 'pc8danishnorwegian':				return 'PC8-Danish-Norwegian';			case 'cspc8turkish':			case 'pc8turkish':				return 'PC8-Turkish';			case 'csiso16portuguese':			case 'iso646pt':			case 'isoir16':			case 'pt':				return 'PT';			case 'csiso84portuguese2':			case 'iso646pt2':			case 'isoir84':			case 'pt2':				return 'PT2';			case 'cp154':			case 'csptcp154':			case 'cyrillicasian':			case 'pt154':			case 'ptcp154':				return 'PTCP154';			case 'scsu':				return 'SCSU';			case 'csiso10swedish':			case 'fi':			case 'iso646fi':			case 'iso646se':			case 'isoir10':			case 'se':			case 'sen850200b':				return 'SEN_850200_B';			case 'csiso11swedishfornames':			case 'iso646se2':			case 'isoir11':			case 'se2':			case 'sen850200c':				return 'SEN_850200_C';			case 'csshiftjis':			case 'mskanji':			case 'shiftjis':				return 'Shift_JIS';			case 'csiso102t617bit':			case 'isoir102':			case 't617bit':				return 'T.61-7bit';			case 'csiso103t618bit':			case 'isoir103':			case 't61':			case 't618bit':				return 'T.61-8bit';			case 'csiso128t101g2':			case 'isoir128':			case 't101g2':				return 'T.101-G2';			case 'cstscii':			case 'tscii':				return 'TSCII';			case 'csunicode11':			case 'unicode11':				return 'UNICODE-1-1';			case 'csunicode11utf7':			case 'unicode11utf7':				return 'UNICODE-1-1-UTF-7';			case 'csunknown8bit':			case 'unknown8bit':				return 'UNKNOWN-8BIT';			case 'ansix341968':			case 'ansix341986':			case 'ascii':			case 'cp367':			case 'csascii':			case 'ibm367':			case 'iso646irv1991':			case 'iso646us':			case 'isoir6':			case 'us':			case 'usascii':				return 'US-ASCII';			case 'csusdk':			case 'usdk':				return 'us-dk';			case 'utf7':				return 'UTF-7';			case 'utf8':				return 'UTF-8';			case 'utf16':				return 'UTF-16';			case 'utf16be':				return 'UTF-16BE';			case 'utf16le':				return 'UTF-16LE';			case 'utf32':				return 'UTF-32';			case 'utf32be':				return 'UTF-32BE';			case 'utf32le':				return 'UTF-32LE';			case 'csventurainternational':			case 'venturainternational':				return 'Ventura-International';			case 'csventuramath':			case 'venturamath':				return 'Ventura-Math';			case 'csventuraus':			case 'venturaus':				return 'Ventura-US';			case 'csiso70videotexsupp1':			case 'isoir70':			case 'videotexsuppl':				return 'videotex-suppl';			case 'csviqr':			case 'viqr':				return 'VIQR';			case 'csviscii':			case 'viscii':				return 'VISCII';			case 'cswindows31j':			case 'windows31j':				return 'Windows-31J';			case 'iso885911':			case 'tis620':				return 'windows-874';			case 'cseuckr':			case 'csksc56011987':			case 'euckr':			case 'isoir149':			case 'korean':			case 'ksc5601':			case 'ksc56011987':			case 'ksc56011989':			case 'windows949':				return 'windows-949';			case 'windows1250':				return 'windows-1250';			case 'windows1251':				return 'windows-1251';			case 'cp819':			case 'csisolatin1':			case 'ibm819':			case 'iso88591':			case 'iso885911987':			case 'isoir100':			case 'l1':			case 'latin1':			case 'windows1252':				return 'windows-1252';			case 'windows1253':				return 'windows-1253';			case 'csisolatin5':			case 'iso88599':			case 'iso885991989':			case 'isoir148':			case 'l5':			case 'latin5':			case 'windows1254':				return 'windows-1254';			case 'windows1255':				return 'windows-1255';			case 'windows1256':				return 'windows-1256';			case 'windows1257':				return 'windows-1257';			case 'windows1258':				return 'windows-1258';			default:				return $charset;		}	}	function get_curl_version()	{		if (is_array($curl = curl_version()))		{			$curl = $curl['version'];		}		elseif (substr($curl, 0, 5) === 'curl/')		{			$curl = substr($curl, 5, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 5));		}		elseif (substr($curl, 0, 8) === 'libcurl/')		{			$curl = substr($curl, 8, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 8));		}		else		{			$curl = 0;		}		return $curl;	}	function is_subclass_of($class1, $class2)	{		if (func_num_args() !== 2)		{			trigger_error('Wrong parameter count for SimplePie_Misc::is_subclass_of()', E_USER_WARNING);		}		elseif (version_compare(PHP_VERSION, '5.0.3', '>=') || is_object($class1))		{			return is_subclass_of($class1, $class2);		}		elseif (is_string($class1) && is_string($class2))		{			if (class_exists($class1))			{				if (class_exists($class2))				{					$class2 = strtolower($class2);					while ($class1 = strtolower(get_parent_class($class1)))					{						if ($class1 === $class2)						{							return true;						}					}				}			}			else			{				trigger_error('Unknown class passed as parameter', E_USER_WARNNG);			}		}		return false;	}	/**	 * Strip HTML comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function strip_comments($data)	{		$output = '';		while (($start = strpos($data, '<!--')) !== false)		{			$output .= substr($data, 0, $start);			if (($end = strpos($data, '-->', $start)) !== false)			{				$data = substr_replace($data, '', 0, $end + 3);			}			else			{				$data = '';			}		}		return $output . $data;	}	function parse_date($dt)	{		$parser = SimplePie_Parse_Date::get();		return $parser->parse($dt);	}	/**	 * Decode HTML entities	 *	 * @static	 * @access public	 * @param string $data Input data	 * @return string Output data	 */	function entities_decode($data)	{		$decoder =& new SimplePie_Decode_HTML_Entities($data);		return $decoder->parse();	}	/**	 * Remove RFC822 comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function uncomment_rfc822($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	function parse_mime($mime)	{		if (($pos = strpos($mime, ';')) === false)		{			return trim($mime);		}		else		{			return trim(substr($mime, 0, $pos));		}	}	function htmlspecialchars_decode($string, $quote_style)	{		if (function_exists('htmlspecialchars_decode'))		{			return htmlspecialchars_decode($string, $quote_style);		}		else		{			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}	function atom_03_construct_type($attribs)	{		if (isset($attribs['']['mode']) && strtolower(trim($attribs['']['mode']) === 'base64'))		{			$mode = SIMPLEPIE_CONSTRUCT_BASE64;		}		else		{			$mode = SIMPLEPIE_CONSTRUCT_NONE;		}		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':				case 'text/plain':					return SIMPLEPIE_CONSTRUCT_TEXT | $mode;				case 'html':				case 'text/html':					return SIMPLEPIE_CONSTRUCT_HTML | $mode;				case 'xhtml':				case 'application/xhtml+xml':					return SIMPLEPIE_CONSTRUCT_XHTML | $mode;				default:					return SIMPLEPIE_CONSTRUCT_NONE | $mode;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT | $mode;		}	}	function atom_10_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;				default:					return SIMPLEPIE_CONSTRUCT_NONE;			}		}		return SIMPLEPIE_CONSTRUCT_TEXT;	}	function atom_10_content_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			$type = strtolower(trim($attribs['']['type']));			switch ($type)			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;			}			if (in_array(substr($type, -4), array('+xml', '/xml')) || substr($type, 0, 5) === 'text/')			{				return SIMPLEPIE_CONSTRUCT_NONE;			}			else			{				return SIMPLEPIE_CONSTRUCT_BASE64;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT;		}	}	function is_isegment_nz_nc($string)	{		return (bool) preg_match('/^([A-Za-z0-9\-._~\x{A0}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFEF}\x{10000}-\x{1FFFD}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}\x{40000}-\x{4FFFD}\x{50000}-\x{5FFFD}\x{60000}-\x{6FFFD}\x{70000}-\x{7FFFD}\x{80000}-\x{8FFFD}\x{90000}-\x{9FFFD}\x{A0000}-\x{AFFFD}\x{B0000}-\x{BFFFD}\x{C0000}-\x{CFFFD}\x{D0000}-\x{DFFFD}\x{E1000}-\x{EFFFD}!$&\'()*+,;=@]|(%[0-9ABCDEF]{2}))+$/u', $string);	}	function space_seperated_tokens($string)	{		$space_characters = "\x20\x09\x0A\x0B\x0C\x0D";		$string_length = strlen($string);		$position = strspn($string, $space_characters);		$tokens = array();		while ($position < $string_length)		{			$len = strcspn($string, $space_characters, $position);			$tokens[] = substr($string, $position, $len);			$position += $len;			$position += strspn($string, $space_characters, $position);		}		return $tokens;	}	function array_unique($array)	{		if (version_compare(PHP_VERSION, '5.2', '>='))		{			return array_unique($array);		}		else		{			$array = (array) $array;			$new_array = array();			$new_array_strings = array();			foreach ($array as $key => $value)			{				if (is_object($value))				{					if (method_exists($value, '__toString'))					{						$cmp = $value->__toString();					}					else					{						trigger_error('Object of class ' . get_class($value) . ' could not be converted to string', E_USER_ERROR);					}				}				elseif (is_array($value))				{					$cmp = (string) reset($value);				}				else				{					$cmp = (string) $value;				}				if (!in_array($cmp, $new_array_strings))				{					$new_array[$key] = $value;					$new_array_strings[] = $cmp;				}			}			return $new_array;		}	}	/**	 * Converts a unicode codepoint to a UTF-8 character	 *	 * @static	 * @access public	 * @param int $codepoint Unicode codepoint	 * @return string UTF-8 character	 */	function codepoint_to_utf8($codepoint)	{		$codepoint = (int) $codepoint;		if ($codepoint < 0)		{			return false;		}		else if ($codepoint <= 0x7f)		{			return chr($codepoint);		}		else if ($codepoint <= 0x7ff)		{			return chr(0xc0 | ($codepoint >> 6)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0xffff)		{			return chr(0xe0 | ($codepoint >> 12)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0x10ffff)		{			return chr(0xf0 | ($codepoint >> 18)) . chr(0x80 | (($codepoint >> 12) & 0x3f)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else		{			// U+FFFD REPLACEMENT CHARACTER			return "\xEF\xBF\xBD";		}	}	/**	 * Re-implementation of PHP 5's stripos()	 *	 * Returns the numeric position of the first occurrence of needle in the	 * haystack string.	 *	 * @static	 * @access string	 * @param object $haystack	 * @param string $needle Note that the needle may be a string of one or more	 *     characters. If needle is not a string, it is converted to an integer	 *     and applied as the ordinal value of a character.	 * @param int $offset The optional offset parameter allows you to specify which	 *     character in haystack to start searching. The position returned is still	 *     relative to the beginning of haystack.	 * @return bool If needle is not found, stripos() will return boolean false.	 */	function stripos($haystack, $needle, $offset = 0)	{		if (function_exists('stripos'))		{			return stripos($haystack, $needle, $offset);		}		else		{			if (is_string($needle))			{				$needle = strtolower($needle);			}			elseif (is_int($needle) || is_bool($needle) || is_double($needle))			{				$needle = strtolower(chr($needle));			}			else			{				trigger_error('needle is not a string or an integer', E_USER_WARNING);				return false;			}			return strpos(strtolower($haystack), $needle, $offset);		}	}	/**	 * Similar to parse_str()	 *	 * Returns an associative array of name/value pairs, where the value is an	 * array of values that have used the same name	 *	 * @static	 * @access string	 * @param string $str The input string.	 * @return array	 */	function parse_str($str)	{		$return = array();		$str = explode('&', $str);		foreach ($str as $section)		{			if (strpos($section, '=') !== false)			{				list($name, $value) = explode('=', $section, 2);				$return[urldecode($name)][] = urldecode($value);			}			else			{				$return[urldecode($section)][] = null;			}		}		return $return;	}	/**	 * Detect XML encoding, as per XML 1.0 Appendix F.1	 *	 * @todo Add support for EBCDIC	 * @param string $data XML data	 * @return array Possible encodings	 */	function xml_encoding($data)	{		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$encoding[] = 'UTF-16LE';		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$encoding[] = 'UTF-8';		}		// UTF-32 Big Endian Without BOM		elseif (substr($data, 0, 20) === "\x00\x00\x00\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C")		{			if ($pos = strpos($data, "\x00\x00\x00\x3F\x00\x00\x00\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian Without BOM		elseif (substr($data, 0, 20) === "\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C\x00\x00\x00")		{			if ($pos = strpos($data, "\x3F\x00\x00\x00\x3E\x00\x00\x00"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian Without BOM		elseif (substr($data, 0, 10) === "\x00\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C")		{			if ($pos = strpos($data, "\x00\x3F\x00\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian Without BOM		elseif (substr($data, 0, 10) === "\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C\x00")		{			if ($pos = strpos($data, "\x3F\x00\x3E\x00"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16LE';		}		// US-ASCII (or superset)		elseif (substr($data, 0, 5) === "\x3C\x3F\x78\x6D\x6C")		{			if ($pos = strpos($data, "\x3F\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-8';		}		// Fallback to UTF-8		else		{			$encoding[] = 'UTF-8';		}		return $encoding;	}	function output_javascript()	{		if (function_exists('ob_gzhandler'))		{			ob_start('ob_gzhandler');		}		header('Content-type: text/javascript; charset: UTF-8');		header('Cache-Control: must-revalidate');		header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days		?>function embed_odeo(link) {	document.writeln('<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url='+link+'"></embed>');}function embed_quicktime(type, bgcolor, width, height, link, placeholder, loop) {	if (placeholder != '') {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" href="'+link+'" src="'+placeholder+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="false" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}	else {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" src="'+link+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="true" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}}function embed_flash(bgcolor, width, height, link, loop, type) {	document.writeln('<embed src="'+link+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="'+type+'" quality="high" width="'+width+'" height="'+height+'" bgcolor="'+bgcolor+'" loop="'+loop+'"></embed>');}function embed_flv(width, height, link, placeholder, loop, player) {	document.writeln('<embed src="'+player+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="'+width+'" height="'+height+'" wmode="transparent" flashvars="file='+link+'&autostart=false&repeat='+loop+'&showdigits=true&showfsbutton=false"></embed>');}function embed_wmedia(width, height, link) {	document.writeln('<embed type="application/x-mplayer2" src="'+link+'" autosize="1" width="'+width+'" height="'+height+'" showcontrols="1" showstatusbar="0" showdisplay="0" autostart="0"></embed>');}		<?php	}}/** * Decode HTML Entities * * This implements HTML5 as of revision 967 (2007-06-28) * * @package SimplePie */class SimplePie_Decode_HTML_Entities{	/**	 * Data to be parsed	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Currently consumed bytes	 *	 * @access private	 * @var string	 */	var $consumed = '';	/**	 * Position of the current byte being parsed	 *	 * @access private	 * @var int	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_Decode_HTML_Entities($data)	{		$this->data = $data;	}	/**	 * Parse the input data	 *	 * @access public	 * @return string Output data	 */	function parse()	{		while (($this->position = strpos($this->data, '&', $this->position)) !== false)		{			$this->consume();			$this->entity();			$this->consumed = '';		}		return $this->data;	}	/**	 * Consume the next byte	 *	 * @access private	 * @return mixed The next byte, or false, if there is no more data	 */	function consume()	{		if (isset($this->data[$this->position]))		{			$this->consumed .= $this->data[$this->position];			return $this->data[$this->position++];		}		else		{			return false;		}	}	/**	 * Consume a range of characters	 *	 * @access private	 * @param string $chars Characters to consume	 * @return mixed A series of characters that match the range, or false	 */	function consume_range($chars)	{		if ($len = strspn($this->data, $chars, $this->position))		{			$data = substr($this->data, $this->position, $len);			$this->consumed .= $data;			$this->position += $len;			return $data;		}		else		{			return false;		}	}	/**	 * Unconsume one byte	 *	 * @access private	 */	function unconsume()	{		$this->consumed = substr($this->consumed, 0, -1);		$this->position--;	}	/**	 * Decode an entity	 *	 * @access private	 */	function entity()	{		switch ($this->consume())		{			case "\x09":			case "\x0A":			case "\x0B":			case "\x0B":			case "\x0C":			case "\x20":			case "\x3C":			case "\x26":			case false:				break;			case "\x23":				switch ($this->consume())				{					case "\x78":					case "\x58":						$range = '0123456789ABCDEFabcdef';						$hex = true;						break;					default:						$range = '0123456789';						$hex = false;						$this->unconsume();						break;				}				if ($codepoint = $this->consume_range($range))				{					static $windows_1252_specials = array(0x0D => "\x0A", 0x80 => "\xE2\x82\xAC", 0x81 => "\xEF\xBF\xBD", 0x82 => "\xE2\x80\x9A", 0x83 => "\xC6\x92", 0x84 => "\xE2\x80\x9E", 0x85 => "\xE2\x80\xA6", 0x86 => "\xE2\x80\xA0", 0x87 => "\xE2\x80\xA1", 0x88 => "\xCB\x86", 0x89 => "\xE2\x80\xB0", 0x8A => "\xC5\xA0", 0x8B => "\xE2\x80\xB9", 0x8C => "\xC5\x92", 0x8D => "\xEF\xBF\xBD", 0x8E => "\xC5\xBD", 0x8F => "\xEF\xBF\xBD", 0x90 => "\xEF\xBF\xBD", 0x91 => "\xE2\x80\x98", 0x92 => "\xE2\x80\x99", 0x93 => "\xE2\x80\x9C", 0x94 => "\xE2\x80\x9D", 0x95 => "\xE2\x80\xA2", 0x96 => "\xE2\x80\x93", 0x97 => "\xE2\x80\x94", 0x98 => "\xCB\x9C", 0x99 => "\xE2\x84\xA2", 0x9A => "\xC5\xA1", 0x9B => "\xE2\x80\xBA", 0x9C => "\xC5\x93", 0x9D => "\xEF\xBF\xBD", 0x9E => "\xC5\xBE", 0x9F => "\xC5\xB8");					if ($hex)					{						$codepoint = hexdec($codepoint);					}					else					{						$codepoint = intval($codepoint);					}					if (isset($windows_1252_specials[$codepoint]))					{						$replacement = $windows_1252_specials[$codepoint];					}					else					{						$replacement = SimplePie_Misc::codepoint_to_utf8($codepoint);					}					if (!in_array($this->consume(), array(';', false), true))					{						$this->unconsume();					}					$consumed_length = strlen($this->consumed);					$this->data = substr_replace($this->data, $replacement, $this->position - $consumed_length, $consumed_length);					$this->position += strlen($replacement) - $consumed_length;				}				break;			default:				static $entities = array('Aacute' => "\xC3\x81", 'aacute' => "\xC3\xA1", 'Aacute;' => "\xC3\x81", 'aacute;' => "\xC3\xA1", 'Acirc' => "\xC3\x82", 'acirc' => "\xC3\xA2", 'Acirc;' => "\xC3\x82", 'acirc;' => "\xC3\xA2", 'acute' => "\xC2\xB4", 'acute;' => "\xC2\xB4", 'AElig' => "\xC3\x86", 'aelig' => "\xC3\xA6", 'AElig;' => "\xC3\x86", 'aelig;' => "\xC3\xA6", 'Agrave' => "\xC3\x80", 'agrave' => "\xC3\xA0", 'Agrave;' => "\xC3\x80", 'agrave;' => "\xC3\xA0", 'alefsym;' => "\xE2\x84\xB5", 'Alpha;' => "\xCE\x91", 'alpha;' => "\xCE\xB1", 'AMP' => "\x26", 'amp' => "\x26", 'AMP;' => "\x26", 'amp;' => "\x26", 'and;' => "\xE2\x88\xA7", 'ang;' => "\xE2\x88\xA0", 'apos;' => "\x27", 'Aring' => "\xC3\x85", 'aring' => "\xC3\xA5", 'Aring;' => "\xC3\x85", 'aring;' => "\xC3\xA5", 'asymp;' => "\xE2\x89\x88", 'Atilde' => "\xC3\x83", 'atilde' => "\xC3\xA3", 'Atilde;' => "\xC3\x83", 'atilde;' => "\xC3\xA3", 'Auml' => "\xC3\x84", 'auml' => "\xC3\xA4", 'Auml;' => "\xC3\x84", 'auml;' => "\xC3\xA4", 'bdquo;' => "\xE2\x80\x9E", 'Beta;' => "\xCE\x92", 'beta;' => "\xCE\xB2", 'brvbar' => "\xC2\xA6", 'brvbar;' => "\xC2\xA6", 'bull;' => "\xE2\x80\xA2", 'cap;' => "\xE2\x88\xA9", 'Ccedil' => "\xC3\x87", 'ccedil' => "\xC3\xA7", 'Ccedil;' => "\xC3\x87", 'ccedil;' => "\xC3\xA7", 'cedil' => "\xC2\xB8", 'cedil;' => "\xC2\xB8", 'cent' => "\xC2\xA2", 'cent;' => "\xC2\xA2", 'Chi;' => "\xCE\xA7", 'chi;' => "\xCF\x87", 'circ;' => "\xCB\x86", 'clubs;' => "\xE2\x99\xA3", 'cong;' => "\xE2\x89\x85", 'COPY' => "\xC2\xA9", 'copy' => "\xC2\xA9", 'COPY;' => "\xC2\xA9", 'copy;' => "\xC2\xA9", 'crarr;' => "\xE2\x86\xB5", 'cup;' => "\xE2\x88\xAA", 'curren' => "\xC2\xA4", 'curren;' => "\xC2\xA4", 'Dagger;' => "\xE2\x80\xA1", 'dagger;' => "\xE2\x80\xA0", 'dArr;' => "\xE2\x87\x93", 'darr;' => "\xE2\x86\x93", 'deg' => "\xC2\xB0", 'deg;' => "\xC2\xB0", 'Delta;' => "\xCE\x94", 'delta;' => "\xCE\xB4", 'diams;' => "\xE2\x99\xA6", 'divide' => "\xC3\xB7", 'divide;' => "\xC3\xB7", 'Eacute' => "\xC3\x89", 'eacute' => "\xC3\xA9", 'Eacute;' => "\xC3\x89", 'eacute;' => "\xC3\xA9", 'Ecirc' => "\xC3\x8A", 'ecirc' => "\xC3\xAA", 'Ecirc;' => "\xC3\x8A", 'ecirc;' => "\xC3\xAA", 'Egrave' => "\xC3\x88", 'egrave' => "\xC3\xA8", 'Egrave;' => "\xC3\x88", 'egrave;' => "\xC3\xA8", 'empty;' => "\xE2\x88\x85", 'emsp;' => "\xE2\x80\x83", 'ensp;' => "\xE2\x80\x82", 'Epsilon;' => "\xCE\x95", 'epsilon;' => "\xCE\xB5", 'equiv;' => "\xE2\x89\xA1", 'Eta;' => "\xCE\x97", 'eta;' => "\xCE\xB7", 'ETH' => "\xC3\x90", 'eth' => "\xC3\xB0", 'ETH;' => "\xC3\x90", 'eth;' => "\xC3\xB0", 'Euml' => "\xC3\x8B", 'euml' => "\xC3\xAB", 'Euml;' => "\xC3\x8B", 'euml;' => "\xC3\xAB", 'euro;' => "\xE2\x82\xAC", 'exist;' => "\xE2\x88\x83", 'fnof;' => "\xC6\x92", 'forall;' => "\xE2\x88\x80", 'frac12' => "\xC2\xBD", 'frac12;' => "\xC2\xBD", 'frac14' => "\xC2\xBC", 'frac14;' => "\xC2\xBC", 'frac34' => "\xC2\xBE", 'frac34;' => "\xC2\xBE", 'frasl;' => "\xE2\x81\x84", 'Gamma;' => "\xCE\x93", 'gamma;' => "\xCE\xB3", 'ge;' => "\xE2\x89\xA5", 'GT' => "\x3E", 'gt' => "\x3E", 'GT;' => "\x3E", 'gt;' => "\x3E", 'hArr;' => "\xE2\x87\x94", 'harr;' => "\xE2\x86\x94", 'hearts;' => "\xE2\x99\xA5", 'hellip;' => "\xE2\x80\xA6", 'Iacute' => "\xC3\x8D", 'iacute' => "\xC3\xAD", 'Iacute;' => "\xC3\x8D", 'iacute;' => "\xC3\xAD", 'Icirc' => "\xC3\x8E", 'icirc' => "\xC3\xAE", 'Icirc;' => "\xC3\x8E", 'icirc;' => "\xC3\xAE", 'iexcl' => "\xC2\xA1", 'iexcl;' => "\xC2\xA1", 'Igrave' => "\xC3\x8C", 'igrave' => "\xC3\xAC", 'Igrave;' => "\xC3\x8C", 'igrave;' => "\xC3\xAC", 'image;' => "\xE2\x84\x91", 'infin;' => "\xE2\x88\x9E", 'int;' => "\xE2\x88\xAB", 'Iota;' => "\xCE\x99", 'iota;' => "\xCE\xB9", 'iquest' => "\xC2\xBF", 'iquest;' => "\xC2\xBF", 'isin;' => "\xE2\x88\x88", 'Iuml' => "\xC3\x8F", 'iuml' => "\xC3\xAF", 'Iuml;' => "\xC3\x8F", 'iuml;' => "\xC3\xAF", 'Kappa;' => "\xCE\x9A", 'kappa;' => "\xCE\xBA", 'Lambda;' => "\xCE\x9B", 'lambda;' => "\xCE\xBB", 'lang;' => "\xE3\x80\x88", 'laquo' => "\xC2\xAB", 'laquo;' => "\xC2\xAB", 'lArr;' => "\xE2\x87\x90", 'larr;' => "\xE2\x86\x90", 'lceil;' => "\xE2\x8C\x88", 'ldquo;' => "\xE2\x80\x9C", 'le;' => "\xE2\x89\xA4", 'lfloor;' => "\xE2\x8C\x8A", 'lowast;' => "\xE2\x88\x97", 'loz;' => "\xE2\x97\x8A", 'lrm;' => "\xE2\x80\x8E", 'lsaquo;' => "\xE2\x80\xB9", 'lsquo;' => "\xE2\x80\x98", 'LT' => "\x3C", 'lt' => "\x3C", 'LT;' => "\x3C", 'lt;' => "\x3C", 'macr' => "\xC2\xAF", 'macr;' => "\xC2\xAF", 'mdash;' => "\xE2\x80\x94", 'micro' => "\xC2\xB5", 'micro;' => "\xC2\xB5", 'middot' => "\xC2\xB7", 'middot;' => "\xC2\xB7", 'minus;' => "\xE2\x88\x92", 'Mu;' => "\xCE\x9C", 'mu;' => "\xCE\xBC", 'nabla;' => "\xE2\x88\x87", 'nbsp' => "\xC2\xA0", 'nbsp;' => "\xC2\xA0", 'ndash;' => "\xE2\x80\x93", 'ne;' => "\xE2\x89\xA0", 'ni;' => "\xE2\x88\x8B", 'not' => "\xC2\xAC", 'not;' => "\xC2\xAC", 'notin;' => "\xE2\x88\x89", 'nsub;' => "\xE2\x8A\x84", 'Ntilde' => "\xC3\x91", 'ntilde' => "\xC3\xB1", 'Ntilde;' => "\xC3\x91", 'ntilde;' => "\xC3\xB1", 'Nu;' => "\xCE\x9D", 'nu;' => "\xCE\xBD", 'Oacute' => "\xC3\x93", 'oacute' => "\xC3\xB3", 'Oacute;' => "\xC3\x93", 'oacute;' => "\xC3\xB3", 'Ocirc' => "\xC3\x94", 'ocirc' => "\xC3\xB4", 'Ocirc;' => "\xC3\x94", 'ocirc;' => "\xC3\xB4", 'OElig;' => "\xC5\x92", 'oelig;' => "\xC5\x93", 'Ograve' => "\xC3\x92", 'ograve' => "\xC3\xB2", 'Ograve;' => "\xC3\x92", 'ograve;' => "\xC3\xB2", 'oline;' => "\xE2\x80\xBE", 'Omega;' => "\xCE\xA9", 'omega;' => "\xCF\x89", 'Omicron;' => "\xCE\x9F", 'omicron;' => "\xCE\xBF", 'oplus;' => "\xE2\x8A\x95", 'or;' => "\xE2\x88\xA8", 'ordf' => "\xC2\xAA", 'ordf;' => "\xC2\xAA", 'ordm' => "\xC2\xBA", 'ordm;' => "\xC2\xBA", 'Oslash' => "\xC3\x98", 'oslash' => "\xC3\xB8", 'Oslash;' => "\xC3\x98", 'oslash;' => "\xC3\xB8", 'Otilde' => "\xC3\x95", 'otilde' => "\xC3\xB5", 'Otilde;' => "\xC3\x95", 'otilde;' => "\xC3\xB5", 'otimes;' => "\xE2\x8A\x97", 'Ouml' => "\xC3\x96", 'ouml' => "\xC3\xB6", 'Ouml;' => "\xC3\x96", 'ouml;' => "\xC3\xB6", 'para' => "\xC2\xB6", 'para;' => "\xC2\xB6", 'part;' => "\xE2\x88\x82", 'permil;' => "\xE2\x80\xB0", 'perp;' => "\xE2\x8A\xA5", 'Phi;' => "\xCE\xA6", 'phi;' => "\xCF\x86", 'Pi;' => "\xCE\xA0", 'pi;' => "\xCF\x80", 'piv;' => "\xCF\x96", 'plusmn' => "\xC2\xB1", 'plusmn;' => "\xC2\xB1", 'pound' => "\xC2\xA3", 'pound;' => "\xC2\xA3", 'Prime;' => "\xE2\x80\xB3", 'prime;' => "\xE2\x80\xB2", 'prod;' => "\xE2\x88\x8F", 'prop;' => "\xE2\x88\x9D", 'Psi;' => "\xCE\xA8", 'psi;' => "\xCF\x88", 'QUOT' => "\x22", 'quot' => "\x22", 'QUOT;' => "\x22", 'quot;' => "\x22", 'radic;' => "\xE2\x88\x9A", 'rang;' => "\xE3\x80\x89", 'raquo' => "\xC2\xBB", 'raquo;' => "\xC2\xBB", 'rArr;' => "\xE2\x87\x92", 'rarr;' => "\xE2\x86\x92", 'rceil;' => "\xE2\x8C\x89", 'rdquo;' => "\xE2\x80\x9D", 'real;' => "\xE2\x84\x9C", 'REG' => "\xC2\xAE", 'reg' => "\xC2\xAE", 'REG;' => "\xC2\xAE", 'reg;' => "\xC2\xAE", 'rfloor;' => "\xE2\x8C\x8B", 'Rho;' => "\xCE\xA1", 'rho;' => "\xCF\x81", 'rlm;' => "\xE2\x80\x8F", 'rsaquo;' => "\xE2\x80\xBA", 'rsquo;' => "\xE2\x80\x99", 'sbquo;' => "\xE2\x80\x9A", 'Scaron;' => "\xC5\xA0", 'scaron;' => "\xC5\xA1", 'sdot;' => "\xE2\x8B\x85", 'sect' => "\xC2\xA7", 'sect;' => "\xC2\xA7", 'shy' => "\xC2\xAD", 'shy;' => "\xC2\xAD", 'Sigma;' => "\xCE\xA3", 'sigma;' => "\xCF\x83", 'sigmaf;' => "\xCF\x82", 'sim;' => "\xE2\x88\xBC", 'spades;' => "\xE2\x99\xA0", 'sub;' => "\xE2\x8A\x82", 'sube;' => "\xE2\x8A\x86", 'sum;' => "\xE2\x88\x91", 'sup;' => "\xE2\x8A\x83", 'sup1' => "\xC2\xB9", 'sup1;' => "\xC2\xB9", 'sup2' => "\xC2\xB2", 'sup2;' => "\xC2\xB2", 'sup3' => "\xC2\xB3", 'sup3;' => "\xC2\xB3", 'supe;' => "\xE2\x8A\x87", 'szlig' => "\xC3\x9F", 'szlig;' => "\xC3\x9F", 'Tau;' => "\xCE\xA4", 'tau;' => "\xCF\x84", 'there4;' => "\xE2\x88\xB4", 'Theta;' => "\xCE\x98", 'theta;' => "\xCE\xB8", 'thetasym;' => "\xCF\x91", 'thinsp;' => "\xE2\x80\x89", 'THORN' => "\xC3\x9E", 'thorn' => "\xC3\xBE", 'THORN;' => "\xC3\x9E", 'thorn;' => "\xC3\xBE", 'tilde;' => "\xCB\x9C", 'times' => "\xC3\x97", 'times;' => "\xC3\x97", 'TRADE;' => "\xE2\x84\xA2", 'trade;' => "\xE2\x84\xA2", 'Uacute' => "\xC3\x9A", 'uacute' => "\xC3\xBA", 'Uacute;' => "\xC3\x9A", 'uacute;' => "\xC3\xBA", 'uArr;' => "\xE2\x87\x91", 'uarr;' => "\xE2\x86\x91", 'Ucirc' => "\xC3\x9B", 'ucirc' => "\xC3\xBB", 'Ucirc;' => "\xC3\x9B", 'ucirc;' => "\xC3\xBB", 'Ugrave' => "\xC3\x99", 'ugrave' => "\xC3\xB9", 'Ugrave;' => "\xC3\x99", 'ugrave;' => "\xC3\xB9", 'uml' => "\xC2\xA8", 'uml;' => "\xC2\xA8", 'upsih;' => "\xCF\x92", 'Upsilon;' => "\xCE\xA5", 'upsilon;' => "\xCF\x85", 'Uuml' => "\xC3\x9C", 'uuml' => "\xC3\xBC", 'Uuml;' => "\xC3\x9C", 'uuml;' => "\xC3\xBC", 'weierp;' => "\xE2\x84\x98", 'Xi;' => "\xCE\x9E", 'xi;' => "\xCE\xBE", 'Yacute' => "\xC3\x9D", 'yacute' => "\xC3\xBD", 'Yacute;' => "\xC3\x9D", 'yacute;' => "\xC3\xBD", 'yen' => "\xC2\xA5", 'yen;' => "\xC2\xA5", 'yuml' => "\xC3\xBF", 'Yuml;' => "\xC5\xB8", 'yuml;' => "\xC3\xBF", 'Zeta;' => "\xCE\x96", 'zeta;' => "\xCE\xB6", 'zwj;' => "\xE2\x80\x8D", 'zwnj;' => "\xE2\x80\x8C");				for ($i = 0, $match = null; $i < 9 && $this->consume() !== false; $i++)				{					$consumed = substr($this->consumed, 1);					if (isset($entities[$consumed]))					{						$match = $consumed;					}				}				if ($match !== null)				{ 					$this->data = substr_replace($this->data, $entities[$match], $this->position - strlen($consumed) - 1, strlen($match) + 1);					$this->position += strlen($entities[$match]) - strlen($consumed) - 1;				}				break;		}	}}/** * IRI parser/serialiser * * @package SimplePie */class SimplePie_IRI{	/**	 * Scheme	 *	 * @access private	 * @var string	 */	var $scheme;	/**	 * User Information	 *	 * @access private	 * @var string	 */	var $userinfo;	/**	 * Host	 *	 * @access private	 * @var string	 */	var $host;	/**	 * Port	 *	 * @access private	 * @var string	 */	var $port;	/**	 * Path	 *	 * @access private	 * @var string	 */	var $path;	/**	 * Query	 *	 * @access private	 * @var string	 */	var $query;	/**	 * Fragment	 *	 * @access private	 * @var string	 */	var $fragment;	/**	 * Whether the object represents a valid IRI	 *	 * @access private	 * @var array	 */	var $valid = array();	/**	 * Return the entire IRI when you try and read the object as a string	 *	 * @access public	 * @return string	 */	function __toString()	{		return $this->get_iri();	}	/**	 * Create a new IRI object, from a specified string	 *	 * @access public	 * @param string $iri	 * @return SimplePie_IRI	 */	function SimplePie_IRI($iri)	{		$iri = (string) $iri;		if ($iri !== '')		{			$parsed = $this->parse_iri($iri);			$this->set_scheme($parsed['scheme']);			$this->set_authority($parsed['authority']);			$this->set_path($parsed['path']);			$this->set_query($parsed['query']);			$this->set_fragment($parsed['fragment']);		}	}	/**	 * Create a new IRI object by resolving a relative IRI	 *	 * @static	 * @access public	 * @param SimplePie_IRI $base Base IRI	 * @param string $relative Relative IRI	 * @return SimplePie_IRI	 */	function absolutize($base, $relative)	{		$relative = (string) $relative;		if ($relative !== '')		{			$relative =& new SimplePie_IRI($relative);			if ($relative->get_scheme() !== null)			{				$target = $relative;			}			elseif ($base->get_iri() !== null)			{				if ($relative->get_authority() !== null)				{					$target = $relative;					$target->set_scheme($base->get_scheme());				}				else				{					$target =& new SimplePie_IRI('');					$target->set_scheme($base->get_scheme());					$target->set_userinfo($base->get_userinfo());					$target->set_host($base->get_host());					$target->set_port($base->get_port());					if ($relative->get_path() !== null)					{						if (strpos($relative->get_path(), '/') === 0)						{							$target->set_path($relative->get_path());						}						elseif (($base->get_userinfo() !== null || $base->get_host() !== null || $base->get_port() !== null) && $base->get_path() === null)						{							$target->set_path('/' . $relative->get_path());						}						elseif (($last_segment = strrpos($base->get_path(), '/')) !== false)						{							$target->set_path(substr($base->get_path(), 0, $last_segment + 1) . $relative->get_path());						}						else						{							$target->set_path($relative->get_path());						}						$target->set_query($relative->get_query());					}					else					{						$target->set_path($base->get_path());						if ($relative->get_query() !== null)						{							$target->set_query($relative->get_query());						}						elseif ($base->get_query() !== null)						{							$target->set_query($base->get_query());						}					}				}				$target->set_fragment($relative->get_fragment());			}			else			{				// No base URL, just return the relative URL				$target = $relative;			}		}		else		{			$target = $base;		}		return $target;	}	/**	 * Parse an IRI into scheme/authority/path/query/fragment segments	 *	 * @access private	 * @param string $iri	 * @return array	 */	function parse_iri($iri)	{		preg_match('/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/', $iri, $match);		for ($i = count($match); $i <= 9; $i++)		{			$match[$i] = '';		}		return array('scheme' => $match[2], 'authority' => $match[4], 'path' => $match[5], 'query' => $match[7], 'fragment' => $match[9]);	}	/**	 * Remove dot segments from a path	 *	 * @access private	 * @param string $input	 * @return string	 */	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	/**	 * Replace invalid character with percent encoding	 *	 * @access private	 * @param string $string Input string	 * @param string $valid_chars Valid characters	 * @param int $case Normalise case	 * @return string	 */	function replace_invalid_with_pct_encoding($string, $valid_chars, $case = SIMPLEPIE_SAME_CASE)	{		// Normalise case		if ($case & SIMPLEPIE_LOWERCASE)		{			$string = strtolower($string);		}		elseif ($case & SIMPLEPIE_UPPERCASE)		{			$string = strtoupper($string);		}		// Store position and string length (to avoid constantly recalculating this)		$position = 0;		$strlen = strlen($string);		// Loop as long as we have invalid characters, advancing the position to the next invalid character		while (($position += strspn($string, $valid_chars, $position)) < $strlen)		{			// If we have a % character			if ($string[$position] === '%')			{				// If we have a pct-encoded section				if ($position + 2 < $strlen && strspn($string, '0123456789ABCDEFabcdef', $position + 1, 2) === 2)				{					// Get the the represented character					$chr = chr(hexdec(substr($string, $position + 1, 2)));					// If the character is valid, replace the pct-encoded with the actual character while normalising case					if (strpos($valid_chars, $chr) !== false)					{						if ($case & SIMPLEPIE_LOWERCASE)						{							$chr = strtolower($chr);						}						elseif ($case & SIMPLEPIE_UPPERCASE)						{							$chr = strtoupper($chr);						}						$string = substr_replace($string, $chr, $position, 3);						$strlen -= 2;						$position++;					}					// Otherwise just normalise the pct-encoded to uppercase					else					{						$string = substr_replace($string, strtoupper(substr($string, $position + 1, 2)), $position + 1, 2);						$position += 3;					}				}				// If we don't have a pct-encoded section, just replace the % with its own esccaped form				else				{					$string = substr_replace($string, '%25', $position, 1);					$strlen += 2;					$position += 3;				}			}			// If we have an invalid character, change into its pct-encoded form			else			{				$replacement = sprintf("%%%02X", ord($string[$position]));				$string = str_replace($string[$position], $replacement, $string);				$strlen = strlen($string);			}		}		return $string;	}	/**	 * Check if the object represents a valid IRI	 *	 * @access public	 * @return bool	 */	function is_valid()	{		return array_sum($this->valid) === count($this->valid);	}	/**	 * Set the scheme. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $scheme	 * @return bool	 */	function set_scheme($scheme)	{		if ($scheme === null || $scheme === '')		{			$this->scheme = null;		}		else		{			$len = strlen($scheme);			switch (true)			{				case $len > 1:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.', 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}				case $len > 0:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 0, 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}			}			$this->scheme = strtolower($scheme);		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the authority. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $authority	 * @return bool	 */	function set_authority($authority)	{		if (($userinfo_end = strrpos($authority, '@')) !== false)		{			$userinfo = substr($authority, 0, $userinfo_end);			$authority = substr($authority, $userinfo_end + 1);		}		else		{			$userinfo = null;		}		if (($port_start = strpos($authority, ':')) !== false)		{			$port = substr($authority, $port_start + 1);			$authority = substr($authority, 0, $port_start);		}		else		{			$port = null;		}		return $this->set_userinfo($userinfo) && $this->set_host($authority) && $this->set_port($port);	}	/**	 * Set the userinfo.	 *	 * @access public	 * @param string $userinfo	 * @return bool	 */	function set_userinfo($userinfo)	{		if ($userinfo === null || $userinfo === '')		{			$this->userinfo = null;		}		else		{			$this->userinfo = $this->replace_invalid_with_pct_encoding($userinfo, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the host. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $host	 * @return bool	 */	function set_host($host)	{		if ($host === null || $host === '')		{			$this->host = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif ($host[0] === '[' && substr($host, -1) === ']')		{			if (Net_IPv6::checkIPv6(substr($host, 1, -1)))			{				$this->host = $host;				$this->valid[__FUNCTION__] = true;				return true;			}			else			{				$this->host = null;				$this->valid[__FUNCTION__] = false;				return false;			}		}		else		{			$this->host = $this->replace_invalid_with_pct_encoding($host, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=', SIMPLEPIE_LOWERCASE);			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the port. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $port	 * @return bool	 */	function set_port($port)	{		if ($port === null || $port === '')		{			$this->port = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (strspn($port, '0123456789') === strlen($port))		{			$this->port = (int) $port;			$this->valid[__FUNCTION__] = true;			return true;		}		else		{			$this->port = null;			$this->valid[__FUNCTION__] = false;			return false;		}	}	/**	 * Set the path.	 *	 * @access public	 * @param string $path	 * @return bool	 */	function set_path($path)	{		if ($path === null || $path === '')		{			$this->path = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (substr($path, 0, 2) === '//' && $this->userinfo === null && $this->host === null && $this->port === null)		{			$this->path = null;			$this->valid[__FUNCTION__] = false;			return false;		}		else		{			$this->path = $this->replace_invalid_with_pct_encoding($path, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=@/');			if ($this->scheme !== null)			{				$this->path = $this->remove_dot_segments($this->path);			}			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the query.	 *	 * @access public	 * @param string $query	 * @return bool	 */	function set_query($query)	{		if ($query === null || $query === '')		{			$this->query = null;		}		else		{			$this->query = $this->replace_invalid_with_pct_encoding($query, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the fragment.	 *	 * @access public	 * @param string $fragment	 * @return bool	 */	function set_fragment($fragment)	{		if ($fragment === null || $fragment === '')		{			$this->fragment = null;		}		else		{			$this->fragment = $this->replace_invalid_with_pct_encoding($fragment, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Get the complete IRI	 *	 * @access public	 * @return string	 */	function get_iri()	{		$iri = '';		if ($this->scheme !== null)		{			$iri .= $this->scheme . ':';		}		if (($authority = $this->get_authority()) !== null)		{			$iri .= '//' . $authority;		}		if ($this->path !== null)		{			$iri .= $this->path;		}		if ($this->query !== null)		{			$iri .= '?' . $this->query;		}		if ($this->fragment !== null)		{			$iri .= '#' . $this->fragment;		}		if ($iri !== '')		{			return $iri;		}		else		{			return null;		}	}	/**	 * Get the scheme	 *	 * @access public	 * @return string	 */	function get_scheme()	{		return $this->scheme;	}	/**	 * Get the complete authority	 *	 * @access public	 * @return string	 */	function get_authority()	{		$authority = '';		if ($this->userinfo !== null)		{			$authority .= $this->userinfo . '@';		}		if ($this->host !== null)		{			$authority .= $this->host;		}		if ($this->port !== null)		{			$authority .= ':' . $this->port;		}		if ($authority !== '')		{			return $authority;		}		else		{			return null;		}	}	/**	 * Get the user information	 *	 * @access public	 * @return string	 */	function get_userinfo()	{		return $this->userinfo;	}	/**	 * Get the host	 *	 * @access public	 * @return string	 */	function get_host()	{		return $this->host;	}	/**	 * Get the port	 *	 * @access public	 * @return string	 */	function get_port()	{		return $this->port;	}	/**	 * Get the path	 *	 * @access public	 * @return string	 */	function get_path()	{		return $this->path;	}	/**	 * Get the query	 *	 * @access public	 * @return string	 */	function get_query()	{		return $this->query;	}	/**	 * Get the fragment	 *	 * @access public	 * @return string	 */	function get_fragment()	{		return $this->fragment;	}}/** * Class to validate and to work with IPv6 addresses. * * @package SimplePie * @copyright 2003-2005 The PHP Group * @license http://www.opensource.org/licenses/bsd-license.php * @link http://pear.php.net/package/Net_IPv6 * @author Alexander Merz <alexander.merz@web.de> * @author elfrink at introweb dot nl * @author Josh Peck <jmp at joshpeck dot org> * @author Geoffrey Sneddon <geoffers@gmail.com> */class SimplePie_Net_IPv6{	/**	 * Removes a possible existing netmask specification of an IP address.	 *	 * @param string $ip the (compressed) IP as Hex representation	 * @return string the IP the without netmask	 * @since 1.1.0	 * @access public	 * @static	 */	function removeNetmaskSpec($ip)	{		if (strpos($ip, '/') !== false)		{			list($addr, $nm) = explode('/', $ip);		}		else		{			$addr = $ip;		}		return $addr;	}	/**	 * Uncompresses an IPv6 address	 *	 * RFC 2373 allows you to compress zeros in an address to '::'. This	 * function expects an valid IPv6 address and expands the '::' to	 * the required zeros.	 *	 * Example:	 FF01::101	->	FF01:0:0:0:0:0:0:101	 *			 ::1		->	0:0:0:0:0:0:0:1	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return string the uncompressed IPv6-address (hex format)	 */	function Uncompress($ip)	{		$uip = SimplePie_Net_IPv6::removeNetmaskSpec($ip);		$c1 = -1;		$c2 = -1;		if (strpos($ip, '::') !== false)		{			list($ip1, $ip2) = explode('::', $ip);			if ($ip1 === '')			{				$c1 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip1, ':')) > 0)				{					$c1 = $pos;				}				else				{					$c1 = 0;				}			}			if ($ip2 === '')			{				$c2 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip2, ':')) > 0)				{					$c2 = $pos;				}				else				{					$c2 = 0;				}			}			if (strstr($ip2, '.'))			{				$c2++;			}			// ::			if ($c1 === -1 && $c2 === -1)			{				$uip = '0:0:0:0:0:0:0:0';			}			// ::xxx			else if ($c1 === -1)			{				$fill = str_repeat('0:', 7 - $c2);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::			else if ($c2 === -1)			{				$fill = str_repeat(':0', 7 - $c1);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::xxx			else			{				$fill = str_repeat(':0:', 6 - $c2 - $c1);				$uip =	str_replace('::', $fill, $uip);				$uip =	str_replace('::', ':', $uip);			}		}		return $uip;	}	/**	 * Splits an IPv6 address into the IPv6 and a possible IPv4 part	 *	 * RFC 2373 allows you to note the last two parts of an IPv6 address as	 * an IPv4 compatible address	 *	 * Example:	 0:0:0:0:0:0:13.1.68.3	 *			 0:0:0:0:0:FFFF:129.144.52.38	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return array [0] contains the IPv6 part, [1] the IPv4 part (hex format)	 */	function SplitV64($ip)	{		$ip = SimplePie_Net_IPv6::Uncompress($ip);		if (strstr($ip, '.'))		{			$pos = strrpos($ip, ':');			$ip[$pos] = '_';			$ipPart = explode('_', $ip);			return $ipPart;		}		else		{			return array($ip, '');		}	}	/**	 * Checks an IPv6 address	 *	 * Checks if the given IP is IPv6-compatible	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address	 * @return bool true if $ip is an IPv6 address	 */	function checkIPv6($ip)	{		$ipPart = SimplePie_Net_IPv6::SplitV64($ip);		$count = 0;		if (!empty($ipPart[0]))		{			$ipv6 = explode(':', $ipPart[0]);			for ($i = 0; $i < count($ipv6); $i++)			{				$dec = hexdec($ipv6[$i]);				$hex = strtoupper(preg_replace('/^[0]{1,3}(.*[0-9a-fA-F])$/', '\\1', $ipv6[$i]));				if ($ipv6[$i] >= 0 && $dec <= 65535 && $hex === strtoupper(dechex($dec)))				{					$count++;				}			}			if ($count === 8)			{				return true;			}			elseif ($count === 6 && !empty($ipPart[1]))			{				$ipv4 = explode('.', $ipPart[1]);				$count = 0;				foreach ($ipv4 as $ipv4_part)				{					if ($ipv4_part >= 0 && $ipv4_part <= 255 && preg_match('/^\d{1,3}$/', $ipv4_part))					{						$count++;					}				}				if ($count === 4)				{					return true;				}			}			else			{				return false;			}		}		else		{			return false;		}	}}/** * Date Parser * * @package SimplePie */class SimplePie_Parse_Date{	/**	 * Input data	 *	 * @access protected	 * @var string	 */	var $date;	/**	 * List of days, calendar day name => ordinal day number in the week	 *	 * @access protected	 * @var array	 */	var $day = array(		// English		'mon' => 1,		'monday' => 1,		'tue' => 2,		'tuesday' => 2,		'wed' => 3,		'wednesday' => 3,		'thu' => 4,		'thursday' => 4,		'fri' => 5,		'friday' => 5,		'sat' => 6,		'saturday' => 6,		'sun' => 7,		'sunday' => 7,		// Dutch		'maandag' => 1,		'dinsdag' => 2,		'woensdag' => 3,		'donderdag' => 4,		'vrijdag' => 5,		'zaterdag' => 6,		'zondag' => 7,		// French		'lundi' => 1,		'mardi' => 2,		'mercredi' => 3,		'jeudi' => 4,		'vendredi' => 5,		'samedi' => 6,		'dimanche' => 7,		// German		'montag' => 1,		'dienstag' => 2,		'mittwoch' => 3,		'donnerstag' => 4,		'freitag' => 5,		'samstag' => 6,		'sonnabend' => 6,		'sonntag' => 7,		// Italian		'luned' => 1,		'marted' => 2,		'mercoled' => 3,		'gioved' => 4,		'venerd' => 5,		'sabato' => 6,		'domenica' => 7,		// Spanish		'lunes' => 1,		'martes' => 2,		'mircoles' => 3,		'jueves' => 4,		'viernes' => 5,		'sbado' => 6,		'domingo' => 7,		// Finnish		'maanantai' => 1,		'tiistai' => 2,		'keskiviikko' => 3,		'torstai' => 4,		'perjantai' => 5,		'lauantai' => 6,		'sunnuntai' => 7,		// Hungarian		'htf' => 1,		'kedd' => 2,		'szerda' => 3,		'cstrtok' => 4,		'pntek' => 5,		'szombat' => 6,		'vasrnap' => 7,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 4,		'' => 5,		'' => 6,		'' => 7,	);	/**	 * List of months, calendar month name => calendar month number	 *	 * @access protected	 * @var array	 */	var $month = array(		// English		'jan' => 1,		'january' => 1,		'feb' => 2,		'february' => 2,		'mar' => 3,		'march' => 3,		'apr' => 4,		'april' => 4,		'may' => 5,		// No long form of May		'jun' => 6,		'june' => 6,		'jul' => 7,		'july' => 7,		'aug' => 8,		'august' => 8,		'sep' => 9,		'september' => 8,		'oct' => 10,		'october' => 10,		'nov' => 11,		'november' => 11,		'dec' => 12,		'december' => 12,		// Dutch		'januari' => 1,		'februari' => 2,		'maart' => 3,		'april' => 4,		'mei' => 5,		'juni' => 6,		'juli' => 7,		'augustus' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'december' => 12,		// French		'janvier' => 1,		'fvrier' => 2,		'mars' => 3,		'avril' => 4,		'mai' => 5,		'juin' => 6,		'juillet' => 7,		'aot' => 8,		'septembre' => 9,		'octobre' => 10,		'novembre' => 11,		'dcembre' => 12,		// German		'januar' => 1,		'februar' => 2,		'mrz' => 3,		'april' => 4,		'mai' => 5,		'juni' => 6,		'juli' => 7,		'august' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'dezember' => 12,		// Italian		'gennaio' => 1,		'febbraio' => 2,		'marzo' => 3,		'aprile' => 4,		'maggio' => 5,		'giugno' => 6,		'luglio' => 7,		'agosto' => 8,		'settembre' => 9,		'ottobre' => 10,		'novembre' => 11,		'dicembre' => 12,		// Spanish		'enero' => 1,		'febrero' => 2,		'marzo' => 3,		'abril' => 4,		'mayo' => 5,		'junio' => 6,		'julio' => 7,		'agosto' => 8,		'septiembre' => 9,		'setiembre' => 9,		'octubre' => 10,		'noviembre' => 11,		'diciembre' => 12,		// Finnish		'tammikuu' => 1,		'helmikuu' => 2,		'maaliskuu' => 3,		'huhtikuu' => 4,		'toukokuu' => 5,		'keskuu' => 6,		'heinkuu' => 7,		'elokuu' => 8,		'suuskuu' => 9,		'lokakuu' => 10,		'marras' => 11,		'joulukuu' => 12,		// Hungarian		'janur' => 1,		'februr' => 2,		'mrcius' => 3,		'prilis' => 4,		'mjus' => 5,		'jnius' => 6,		'jlius' => 7,		'augusztus' => 8,		'szeptember' => 9,		'oktber' => 10,		'november' => 11,		'december' => 12,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 3,		'' => 4,		'' => 5,		'' => 5,		'' => 5,		'' => 6,		'' => 6,		'' => 7,		'' => 7,		'' => 8,		'' => 8,		'' => 9,		'' => 10,		'' => 11,		'' => 12,	);	/**	 * List of timezones, abbreviation => offset from UTC	 *	 * @access protected	 * @var array	 */	var $timezone = array(		'ACDT' => 37800,		'ACIT' => 28800,		'ACST' => 34200,		'ACT' => -18000,		'ACWDT' => 35100,		'ACWST' => 31500,		'AEDT' => 39600,		'AEST' => 36000,		'AFT' => 16200,		'AKDT' => -28800,		'AKST' => -32400,		'AMDT' => 18000,		'AMT' => -14400,		'ANAST' => 46800,		'ANAT' => 43200,		'ART' => -10800,		'AZOST' => -3600,		'AZST' => 18000,		'AZT' => 14400,		'BIOT' => 21600,		'BIT' => -43200,		'BOT' => -14400,		'BRST' => -7200,		'BRT' => -10800,		'BST' => 3600,		'BTT' => 21600,		'CAST' => 18000,		'CAT' => 7200,		'CCT' => 23400,		'CDT' => -18000,		'CEDT' => 7200,		'CET' => 3600,		'CGST' => -7200,		'CGT' => -10800,		'CHADT' => 49500,		'CHAST' => 45900,		'CIST' => -28800,		'CKT' => -36000,		'CLDT' => -10800,		'CLST' => -14400,		'COT' => -18000,		'CST' => -21600,		'CVT' => -3600,		'CXT' => 25200,		'DAVT' => 25200,		'DTAT' => 36000,		'EADT' => -18000,		'EAST' => -21600,		'EAT' => 10800,		'ECT' => -18000,		'EDT' => -14400,		'EEST' => 10800,		'EET' => 7200,		'EGT' => -3600,		'EKST' => 21600,		'EST' => -18000,		'FJT' => 43200,		'FKDT' => -10800,		'FKST' => -14400,		'FNT' => -7200,		'GALT' => -21600,		'GEDT' => 14400,		'GEST' => 10800,		'GFT' => -10800,		'GILT' => 43200,		'GIT' => -32400,		'GST' => 14400,		'GST' => -7200,		'GYT' => -14400,		'HAA' => -10800,		'HAC' => -18000,		'HADT' => -32400,		'HAE' => -14400,		'HAP' => -25200,		'HAR' => -21600,		'HAST' => -36000,		'HAT' => -9000,		'HAY' => -28800,		'HKST' => 28800,		'HMT' => 18000,		'HNA' => -14400,		'HNC' => -21600,		'HNE' => -18000,		'HNP' => -28800,		'HNR' => -25200,		'HNT' => -12600,		'HNY' => -32400,		'IRDT' => 16200,		'IRKST' => 32400,		'IRKT' => 28800,		'IRST' => 12600,		'JFDT' => -10800,		'JFST' => -14400,		'JST' => 32400,		'KGST' => 21600,		'KGT' => 18000,		'KOST' => 39600,		'KOVST' => 28800,		'KOVT' => 25200,		'KRAST' => 28800,		'KRAT' => 25200,		'KST' => 32400,		'LHDT' => 39600,		'LHST' => 37800,		'LINT' => 50400,		'LKT' => 21600,		'MAGST' => 43200,		'MAGT' => 39600,		'MAWT' => 21600,		'MDT' => -21600,		'MESZ' => 7200,		'MEZ' => 3600,		'MHT' => 43200,		'MIT' => -34200,		'MNST' => 32400,		'MSDT' => 14400,		'MSST' => 10800,		'MST' => -25200,		'MUT' => 14400,		'MVT' => 18000,		'MYT' => 28800,		'NCT' => 39600,		'NDT' => -9000,		'NFT' => 41400,		'NMIT' => 36000,		'NOVST' => 25200,		'NOVT' => 21600,		'NPT' => 20700,		'NRT' => 43200,		'NST' => -12600,		'NUT' => -39600,		'NZDT' => 46800,		'NZST' => 43200,		'OMSST' => 25200,		'OMST' => 21600,		'PDT' => -25200,		'PET' => -18000,		'PETST' => 46800,		'PETT' => 43200,		'PGT' => 36000,		'PHOT' => 46800,		'PHT' => 28800,		'PKT' => 18000,		'PMDT' => -7200,		'PMST' => -10800,		'PONT' => 39600,		'PST' => -28800,		'PWT' => 32400,		'PYST' => -10800,		'PYT' => -14400,		'RET' => 14400,		'ROTT' => -10800,		'SAMST' => 18000,		'SAMT' => 14400,		'SAST' => 7200,		'SBT' => 39600,		'SCDT' => 46800,		'SCST' => 43200,		'SCT' => 14400,		'SEST' => 3600,		'SGT' => 28800,		'SIT' => 28800,		'SRT' => -10800,		'SST' => -39600,		'SYST' => 10800,		'SYT' => 7200,		'TFT' => 18000,		'THAT' => -36000,		'TJT' => 18000,		'TKT' => -36000,		'TMT' => 18000,		'TOT' => 46800,		'TPT' => 32400,		'TRUT' => 36000,		'TVT' => 43200,		'TWT' => 28800,		'UYST' => -7200,		'UYT' => -10800,		'UZT' => 18000,		'VET' => -14400,		'VLAST' => 39600,		'VLAT' => 36000,		'VOST' => 21600,		'VUT' => 39600,		'WAST' => 7200,		'WAT' => 3600,		'WDT' => 32400,		'WEST' => 3600,		'WFT' => 43200,		'WIB' => 25200,		'WIT' => 32400,		'WITA' => 28800,		'WKST' => 18000,		'WST' => 28800,		'YAKST' => 36000,		'YAKT' => 32400,		'YAPT' => 36000,		'YEKST' => 21600,		'YEKT' => 18000,	);	/**	 * Cached PCRE for SimplePie_Parse_Date::$day	 *	 * @access protected	 * @var string	 */	var $day_pcre;	/**	 * Cached PCRE for SimplePie_Parse_Date::$month	 *	 * @access protected	 * @var string	 */	var $month_pcre;	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $built_in = array();	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $user = array();	/**	 * Create new SimplePie_Parse_Date object, and set self::day_pcre,	 * self::month_pcre, and self::built_in	 *	 * @access private	 */	function SimplePie_Parse_Date()	{		$this->day_pcre = '(' . implode(array_keys($this->day), '|') . ')';		$this->month_pcre = '(' . implode(array_keys($this->month), '|') . ')';		static $cache;		if (!isset($cache[get_class($this)]))		{			$all_methods = get_class_methods($this);			foreach ($all_methods as $method)			{				if (strtolower(substr($method, 0, 5)) === 'date_')				{					$cache[get_class($this)][] = $method;				}			}		}		foreach ($cache[get_class($this)] as $method)		{			$this->built_in[] = $method;		}	}	/**	 * Get the object	 *	 * @access public	 */	function get()	{		static $object;		if (!$object)		{			$object =& new SimplePie_Parse_Date;		}		return $object;	}	/**	 * Parse a date	 *	 * @final	 * @access public	 * @param string $date Date to parse	 * @return int Timestamp corresponding to date string, or false on failure	 */	function parse($date)	{		foreach ($this->user as $method)		{			if (($returned = call_user_func($method, $date)) !== false)			{				return $returned;			}		}		foreach ($this->built_in as $method)		{			if (($returned = call_user_func(array(&$this, $method), $date)) !== false)			{				return $returned;			}		}		return false;	}	/**	 * Add a callback method to parse a date	 *	 * @final	 * @access public	 * @param callback $callback	 */	function add_callback($callback)	{		if (is_callable($callback))		{			$this->user[] = $callback;		}		else		{			trigger_error('User-supplied function must be a valid callback', E_USER_WARNING);		}	}	/**	 * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as	 * well as allowing any of upper or lower case "T", horizontal tabs, or	 * spaces to be used as the time seperator (including more than one))	 *	 * @access protected	 * @return int Timestamp	 */	function date_w3cdtf($date)	{		static $pcre;		if (!$pcre)		{			$year = '([0-9]{4})';			$month = $day = $hour = $minute = $second = '([0-9]{2})';			$decimal = '([0-9]*)';			$zone = '(?:(Z)|([+\-])([0-9]{1,2}):?([0-9]{1,2}))';			$pcre = '/^' . $year . '(?:-?' . $month . '(?:-?' . $day . '(?:[Tt\x09\x20]+' . $hour . '(?::?' . $minute . '(?::?' . $second . '(?:.' . $decimal . ')?)?)?' . $zone . ')?)?)?$/';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Year			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Decimal fraction of a second			8: Zulu			9: Timezone 			10: Timezone hours			11: Timezone minutes			*/			// Fill in empty matches			for ($i = count($match); $i <= 3; $i++)			{				$match[$i] = '1';			}			for ($i = count($match); $i <= 7; $i++)			{				$match[$i] = '0';			}			// Numeric timezone			if (isset($match[9]) && $match[9] !== '')			{				$timezone = $match[10] * 3600;				$timezone += $match[11] * 60;				if ($match[9] === '-')				{					$timezone = 0 - $timezone;				}			}			else			{				$timezone = 0;			}			// Convert the number of seconds to an integer, taking decimals into account			$second = round($match[6] + $match[7] / pow(10, strlen($match[7])));			return gmmktime($match[4], $match[5], $second, $match[2], $match[3], $match[1]) - $timezone;		}		else		{			return false;		}	}	/**	 * Remove RFC822 comments	 *	 * @access protected	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function remove_rfc2822_comments($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	/**	 * Parse RFC2822's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc2822($date)	{		static $pcre;		if (!$pcre)		{			$wsp = '[\x09\x20]';			$fws = '(?:' . $wsp . '+|' . $wsp . '*(?:\x0D\x0A' . $wsp . '+)+)';			$optional_fws = $fws . '?';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $minute = $second = '([0-9]{2})';			$year = '([0-9]{2,4})';			$num_zone = '([+\-])([0-9]{2})([0-9]{2})';			$character_zone = '([A-Z]{1,5})';			$zone = '(?:' . $num_zone . '|' . $character_zone . ')';			$pcre = '/(?:' . $optional_fws . $day_name . $optional_fws . ',)?' . $optional_fws . $day . $fws . $month . $fws . $year . $fws . $hour . $optional_fws . ':' . $optional_fws . $minute . '(?:' . $optional_fws . ':' . $optional_fws . $second . ')?' . $fws . $zone . '/i';		}		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone 			9: Timezone hours			10: Timezone minutes			11: Alphabetic timezone			*/			// Find the month number			$month = $this->month[strtolower($match[3])];			// Numeric timezone			if ($match[8] !== '')			{				$timezone = $match[9] * 3600;				$timezone += $match[10] * 60;				if ($match[8] === '-')				{					$timezone = 0 - $timezone;				}			}			// Character timezone			elseif (isset($this->timezone[strtoupper($match[11])]))			{				$timezone = $this->timezone[strtoupper($match[11])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2/3 digit years			if ($match[4] < 50)			{				$match[4] += 2000;			}			elseif ($match[4] < 1000)			{				$match[4] += 1900;			}			// Second is optional, if it is empty set it to zero			if ($match[7] !== '')			{				$second = $match[7];			}			else			{				$second = 0;			}			return gmmktime($match[5], $match[6], $second, $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse RFC850's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc850($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$year = $hour = $minute = $second = '([0-9]{2})';			$zone = '([A-Z]{1,5})';			$pcre = '/^' . $day_name . ',' . $space . $day . '-' . $month . '-' . $year . $space . $hour . ':' . $minute . ':' . $second . $space . $zone . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone			*/			// Month			$month = $this->month[strtolower($match[3])];			// Character timezone			if (isset($this->timezone[strtoupper($match[8])]))			{				$timezone = $this->timezone[strtoupper($match[8])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2 digit year			if ($match[4] < 50)			{				$match[4] += 2000;			}			else			{				$match[4] += 1900;			}			return gmmktime($match[5], $match[6], $match[7], $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse C99's asctime()'s date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_asctime($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$wday_name = $this->day_pcre;			$mon_name = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $sec = $min = '([0-9]{2})';			$year = '([0-9]{4})';			$terminator = '\x0A?\x00?';			$pcre = '/^' . $wday_name . $space . $mon_name . $space . $day . $space . $hour . ':' . $min . ':' . $sec . $space . $year . $terminator . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Year			*/			$month = $this->month[strtolower($match[2])];			return gmmktime($match[4], $match[5], $match[6], $month, $match[3], $match[7]);		}		else		{			return false;		}	}	/**	 * Parse dates using strtotime()	 *	 * @access protected	 * @return int Timestamp	 */	function date_strtotime($date)	{		$strtotime = strtotime($date);		if ($strtotime === -1 || $strtotime === false)		{			return false;		}		else		{			return $strtotime;		}	}}/** * Content-type sniffing * * @package SimplePie */class SimplePie_Content_Type_Sniffer{	/**	 * File object	 *	 * @var SimplePie_File	 * @access private	 */	var $file;	/**	 * Create an instance of the class with the input file	 *	 * @access public	 * @param SimplePie_Content_Type_Sniffer $file Input file	 */	function SimplePie_Content_Type_Sniffer($file)	{		$this->file = $file;	}	/**	 * Get the Content-Type of the specified file	 *	 * @access public	 * @return string Actual Content-Type	 */	function get_type()	{		if (isset($this->file->headers['content-type']))		{			if (!isset($this->file->headers['content-encoding'])				&& ($this->file->headers['content-type'] === 'text/plain'					|| $this->file->headers['content-type'] === 'text/plain; charset=ISO-8859-1'					|| $this->file->headers['content-type'] === 'text/plain; charset=iso-8859-1'))			{				return $this->text_or_binary();			}			if (($pos = strpos($this->file->headers['content-type'], ';')) !== false)			{				$official = substr($this->file->headers['content-type'], 0, $pos);			}			else			{				$official = $this->file->headers['content-type'];			}			$official = strtolower($official);			if ($official === 'unknown/unknown'				|| $official === 'application/unknown')			{				return $this->unknown();			}			elseif (substr($official, -4) === '+xml'				|| $official === 'text/xml'				|| $official === 'application/xml')			{				return $official;			}			elseif (substr($official, 0, 6) === 'image/')			{				if ($return = $this->image())				{					return $return;				}				else				{					return $official;				}			}			elseif ($official === 'text/html')			{				return $this->feed_or_html();			}			else			{				return $official;			}		}		else		{			return $this->unknown();		}	}	/**	 * Sniff text or binary	 *	 * @access private	 * @return string Actual Content-Type	 */	function text_or_binary()	{		if (substr($this->file->body, 0, 2) === "\xFE\xFF"			|| substr($this->file->body, 0, 2) === "\xFF\xFE"			|| substr($this->file->body, 0, 4) === "\x00\x00\xFE\xFF"			|| substr($this->file->body, 0, 3) === "\xEF\xBB\xBF")		{			return 'text/plain';		}		elseif (preg_match('/[\x00-\x08\x0E-\x1A\x1C-\x1F]/', $this->file->body))		{			return 'application/octect-stream';		}		else		{			return 'text/plain';		}	}	/**	 * Sniff unknown	 *	 * @access private	 * @return string Actual Content-Type	 */	function unknown()	{		$ws = strspn($this->file->body, "\x09\x0A\x0B\x0C\x0D\x20");		if (strtolower(substr($this->file->body, $ws, 14)) === '<!doctype html'			|| strtolower(substr($this->file->body, $ws, 5)) === '<html'			|| strtolower(substr($this->file->body, $ws, 7)) === '<script')		{			return 'text/html';		}		elseif (substr($this->file->body, 0, 5) === '%PDF-')		{			return 'application/pdf';		}		elseif (substr($this->file->body, 0, 11) === '%!PS-Adobe-')		{			return 'application/postscript';		}		elseif (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return $this->text_or_binary();		}	}	/**	 * Sniff images	 *	 * @access private	 * @return string Actual Content-Type	 */	function image()	{		if (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return false;		}	}	/**	 * Sniff HTML	 *	 * @access private	 * @return string Actual Content-Type	 */	function feed_or_html()	{		$len = strlen($this->file->body);		$pos = strspn($this->file->body, "\x09\x0A\x0D\x20");		while ($pos < $len)		{			switch ($this->file->body[$pos])			{				case "\x09":				case "\x0A":				case "\x0D":				case "\x20":					$pos += strspn($this->file->body, "\x09\x0A\x0D\x20", $pos);					continue 2;				case '<':					$pos++;					break;				default:					return 'text/html';			}			if (substr($this->file->body, $pos, 3) === '!--')			{				$pos += 3;				if ($pos < $len && ($pos = strpos($this->file->body, '-->', $pos)) !== false)				{					$pos += 3;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '!')			{				if ($pos < $len && ($pos = strpos($this->file->body, '>', $pos)) !== false)				{					$pos++;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '?')			{				if ($pos < $len && ($pos = strpos($this->file->body, '?>', $pos)) !== false)				{					$pos += 2;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 3) === 'rss'				|| substr($this->file->body, $pos, 7) === 'rdf:RDF')			{				return 'application/rss+xml';			}			elseif (substr($this->file->body, $pos, 4) === 'feed')			{				return 'application/atom+xml';			}			else			{				return 'text/html';			}		}		return 'text/html';	}}/** * Parses the XML Declaration * * @package SimplePie */class SimplePie_XML_Declaration_Parser{	/**	 * XML Version	 *	 * @access public	 * @var string	 */	var $version = '1.0';	/**	 * Encoding	 *	 * @access public	 * @var string	 */	var $encoding = 'UTF-8';	/**	 * Standalone	 *	 * @access public	 * @var bool	 */	var $standalone = false;	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'before_version_name';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_XML_Declaration_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit')		{			return true;		}		else		{			$this->version = '';			$this->encoding = '';			$this->standalone = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * Advance past any whitespace	 *	 * @return int Number of whitespace characters passed	 */	function skip_whitespace()	{		$whitespace = strspn($this->data, "\x09\x0A\x0D\x20", $this->position);		$this->position += $whitespace;		return $whitespace;	}	/**	 * Read value	 */	function get_value()	{		$quote = substr($this->data, $this->position, 1);		if ($quote === '"' || $quote === "'")		{			$this->position++;			$len = strcspn($this->data, $quote, $this->position);			if ($this->has_data())			{				$value = substr($this->data, $this->position, $len);				$this->position += $len + 1;				return $value;			}		}		return false;	}	function before_version_name()	{		if ($this->skip_whitespace())		{			$this->state = 'version_name';		}		else		{			$this->state = false;		}	}	function version_name()	{		if (substr($this->data, $this->position, 7) === 'version')		{			$this->position += 7;			$this->skip_whitespace();			$this->state = 'version_equals';		}		else		{			$this->state = false;		}	}	function version_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'version_value';		}		else		{			$this->state = false;		}	}	function version_value()	{		if ($this->version = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'encoding_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = 'standalone_name';		}	}	function encoding_name()	{		if (substr($this->data, $this->position, 8) === 'encoding')		{			$this->position += 8;			$this->skip_whitespace();			$this->state = 'encoding_equals';		}		else		{			$this->state = false;		}	}	function encoding_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'encoding_value';		}		else		{			$this->state = false;		}	}	function encoding_value()	{		if ($this->encoding = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'standalone_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}	function standalone_name()	{		if (substr($this->data, $this->position, 10) === 'standalone')		{			$this->position += 10;			$this->skip_whitespace();			$this->state = 'standalone_equals';		}		else		{			$this->state = false;		}	}	function standalone_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'standalone_value';		}		else		{			$this->state = false;		}	}	function standalone_value()	{		if ($standalone = $this->get_value())		{			switch ($standalone)			{				case 'yes':					$this->standalone = true;					break;				case 'no':					$this->standalone = false;					break;				default:					$this->state = false;					return;			}			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = false;			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}}class SimplePie_Locator{	var $useragent;	var $timeout;	var $file;	var $local = array();	var $elsewhere = array();	var $file_class = 'SimplePie_File';	var $cached_entities = array();	var $http_base;	var $base;	var $base_location = 0;	var $checked_feeds = 0;	var $max_checked_feeds = 10;	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	function SimplePie_Locator(&$file, $timeout = 10, $useragent = null, $file_class = 'SimplePie_File', $max_checked_feeds = 10, $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer')	{		$this->file =& $file;		$this->file_class = $file_class;		$this->useragent = $useragent;		$this->timeout = $timeout;		$this->max_checked_feeds = $max_checked_feeds;		$this->content_type_sniffer_class = $content_type_sniffer_class;	}	function find($type = SIMPLEPIE_LOCATOR_ALL, &$working)	{		if ($this->is_feed($this->file))		{			return $this->file;		}		if ($this->file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer =& new $this->content_type_sniffer_class($this->file);			if ($sniffer->get_type() !== 'text/html')			{				return null;			}		}		if ($type & ~SIMPLEPIE_LOCATOR_NONE)		{			$this->get_base();		}		if ($type & SIMPLEPIE_LOCATOR_AUTODISCOVERY && $working = $this->autodiscovery())		{			return $working[0];		}		if ($type & (SIMPLEPIE_LOCATOR_LOCAL_EXTENSION | SIMPLEPIE_LOCATOR_LOCAL_BODY | SIMPLEPIE_LOCATOR_REMOTE_EXTENSION | SIMPLEPIE_LOCATOR_REMOTE_BODY) && $this->get_links())		{			if ($type & SIMPLEPIE_LOCATOR_LOCAL_EXTENSION && $working = $this->extension($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_LOCAL_BODY && $working = $this->body($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_EXTENSION && $working = $this->extension($this->elsewhere))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_BODY && $working = $this->body($this->elsewhere))			{				return $working;			}		}		return null;	}	function is_feed(&$file)	{		if ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer =& new $this->content_type_sniffer_class($file);			$sniffed = $sniffer->get_type();			if (in_array($sniffed, array('application/rss+xml', 'application/rdf+xml', 'text/rdf', 'application/atom+xml', 'text/xml', 'application/xml')))			{				return true;			}			else			{				return false;			}		}		elseif ($file->method & SIMPLEPIE_FILE_SOURCE_LOCAL)		{			return true;		}		else		{			return false;		}	}	function get_base()	{		$this->http_base = $this->file->url;		$this->base = $this->http_base;		$elements = SimplePie_Misc::get_element('base', $this->file->body);		foreach ($elements as $element)		{			if ($element['attribs']['href']['data'] !== '')			{				$this->base = SimplePie_Misc::absolutize_url(trim($element['attribs']['href']['data']), $this->http_base);				$this->base_location = $element['offset'];				break;			}		}	}	function autodiscovery()	{		$links = array_merge(SimplePie_Misc::get_element('link', $this->file->body), SimplePie_Misc::get_element('a', $this->file->body), SimplePie_Misc::get_element('area', $this->file->body));		$done = array();		$feeds = array();		foreach ($links as $link)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (isset($link['attribs']['href']['data']) && isset($link['attribs']['rel']['data']))			{				$rel = array_unique(SimplePie_Misc::space_seperated_tokens(strtolower($link['attribs']['rel']['data'])));				if ($this->base_location < $link['offset'])				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);				}				else				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);				}				if (!in_array($href, $done) && in_array('feed', $rel) || (in_array('alternate', $rel) && !empty($link['attribs']['type']['data']) && in_array(strtolower(SimplePie_Misc::parse_mime($link['attribs']['type']['data'])), array('application/rss+xml', 'application/atom+xml'))) && !isset($feeds[$href]))				{					$this->checked_feeds++;					$feed =& new $this->file_class($href, $this->timeout, 5, null, $this->useragent);					if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))					{						$feeds[$href] = $feed;					}				}				$done[] = $href;			}		}		if (!empty($feeds))		{			return array_values($feeds);		}		else {			return null;		}	}	function get_links()	{		$links = SimplePie_Misc::get_element('a', $this->file->body);		foreach ($links as $link)		{			if (isset($link['attribs']['href']['data']))			{				$href = trim($link['attribs']['href']['data']);				$parsed = SimplePie_Misc::parse_url($href);				if ($parsed['scheme'] === '' || preg_match('/^(http(s)|feed)?$/i', $parsed['scheme']))				{					if ($this->base_location < $link['offset'])					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);					}					else					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);					}					$current = SimplePie_Misc::parse_url($this->file->url);					if ($parsed['authority'] === '' || $parsed['authority'] === $current['authority'])					{						$this->local[] = $href;					}					else					{						$this->elsewhere[] = $href;					}				}			}		}		$this->local = array_unique($this->local);		$this->elsewhere = array_unique($this->elsewhere);		if (!empty($this->local) || !empty($this->elsewhere))		{			return true;		}		return null;	}	function extension(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (in_array(strtolower(strrchr($value, '.')), array('.rss', '.rdf', '.atom', '.xml')))			{				$this->checked_feeds++;				$feed =& new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}	function body(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (preg_match('/(rss|rdf|atom|xml)/i', $value))			{				$this->checked_feeds++;				$feed =& new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}}class SimplePie_Parser{	var $error_code;	var $error_string;	var $current_line;	var $current_column;	var $current_byte;	var $separator = ' ';	var $namespace = array('');	var $element = array('');	var $xml_base = array('');	var $xml_base_explicit = array(false);	var $xml_lang = array('');	var $data = array();	var $datas = array(array());	var $current_xhtml_construct = -1;	var $encoding;	function parse(&$data, $encoding)	{		// Use UTF-8 if we get passed US-ASCII, as every US-ASCII character is a UTF-8 character		if (strtoupper($encoding) === 'US-ASCII')		{			$this->encoding = 'UTF-8';		}		else		{			$this->encoding = $encoding;		}		// Strip BOM:		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$data = substr($data, 4);		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$data = substr($data, 4);		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$data = substr($data, 2);		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$data = substr($data, 2);		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$data = substr($data, 3);		}		if (substr($data, 0, 5) === '<?xml' && strspn(substr($data, 5, 1), "\x09\x0A\x0D\x20") && ($pos = strpos($data, '?>')) !== false)		{			$declaration =& new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));			if ($declaration->parse())			{				$data = substr($data, $pos + 2);				$data = '<?xml version="' . $declaration->version . '" encoding="' . $encoding . '" standalone="' . (($declaration->standalone) ? 'yes' : 'no') . '"?>' . $data;			}			else			{				$this->error_string = 'SimplePie bug! Please report this!';				return false;			}		}		$return = true;		static $xml_is_sane = null;		if ($xml_is_sane === null)		{			$parser_check = xml_parser_create();			xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);			xml_parser_free($parser_check);			$xml_is_sane = isset($values[0]['value']);		}		// Create the parser		if ($xml_is_sane)		{			$xml = xml_parser_create_ns($this->encoding, $this->separator);			xml_parser_set_option($xml, XML_OPTION_SKIP_WHITE, 1);			xml_parser_set_option($xml, XML_OPTION_CASE_FOLDING, 0);			xml_set_object($xml, $this);			xml_set_character_data_handler($xml, 'cdata');			xml_set_element_handler($xml, 'tag_open', 'tag_close');			// Parse!			if (!xml_parse($xml, $data, true))			{				$this->error_code = xml_get_error_code($xml);				$this->error_string = xml_error_string($this->error_code);				$return = false;			}			$this->current_line = xml_get_current_line_number($xml);			$this->current_column = xml_get_current_column_number($xml);			$this->current_byte = xml_get_current_byte_index($xml);			xml_parser_free($xml);			return $return;		}		else		{			libxml_clear_errors();			$xml =& new XMLReader();			$xml->xml($data);			while (@$xml->read())			{				switch ($xml->nodeType)				{					case constant('XMLReader::END_ELEMENT'):						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$this->tag_close(null, $tagName);						break;					case constant('XMLReader::ELEMENT'):						$empty = $xml->isEmptyElement;						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$attributes = array();						while ($xml->moveToNextAttribute())						{							if ($xml->namespaceURI !== '')							{								$attrName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";							}							else							{								$attrName = $xml->localName;							}							$attributes[$attrName] = $xml->value;						}						$this->tag_open(null, $tagName, $attributes);						if ($empty)						{							$this->tag_close(null, $tagName);						}						break;					case constant('XMLReader::TEXT'):					case constant('XMLReader::CDATA'):						$this->cdata(null, $xml->value);						break;				}			}			if ($error = libxml_get_last_error())			{				$this->error_code = $error->code;				$this->error_string = $error->message;				$this->current_line = $error->line;				$this->current_column = $error->column;				return false;			}			else			{				return true;			}		}	}	function get_error_code()	{		return $this->error_code;	}	function get_error_string()	{		return $this->error_string;	}	function get_current_line()	{		return $this->current_line;	}	function get_current_column()	{		return $this->current_column;	}	function get_current_byte()	{		return $this->current_byte;	}	function get_data()	{		return $this->data;	}	function tag_open($parser, $tag, $attributes)	{		list($this->namespace[], $this->element[]) = $this->split_ns($tag);		$attribs = array();		foreach ($attributes as $name => $value)		{			list($attrib_namespace, $attribute) = $this->split_ns($name);			$attribs[$attrib_namespace][$attribute] = $value;		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['base']))		{			$this->xml_base[] = SimplePie_Misc::absolutize_url($attribs[SIMPLEPIE_NAMESPACE_XML]['base'], end($this->xml_base));			$this->xml_base_explicit[] = true;		}		else		{			$this->xml_base[] = end($this->xml_base);			$this->xml_base_explicit[] = end($this->xml_base_explicit);		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['lang']))		{			$this->xml_lang[] = $attribs[SIMPLEPIE_NAMESPACE_XML]['lang'];		}		else		{			$this->xml_lang[] = end($this->xml_lang);		}		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct++;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML)			{				$this->data['data'] .= '<' . end($this->element);				if (isset($attribs['']))				{					foreach ($attribs[''] as $name => $value)					{						$this->data['data'] .= ' ' . $name . '="' . htmlspecialchars($value, ENT_COMPAT, $this->encoding) . '"';					}				}				$this->data['data'] .= '>';			}		}		else		{			$this->datas[] =& $this->data;			$this->data =& $this->data['child'][end($this->namespace)][end($this->element)][];			$this->data = array('data' => '', 'attribs' => $attribs, 'xml_base' => end($this->xml_base), 'xml_base_explicit' => end($this->xml_base_explicit), 'xml_lang' => end($this->xml_lang));			if ((end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_03 && in_array(end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml')			|| (end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_10 && in_array(end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml'))			{				$this->current_xhtml_construct = 0;			}		}	}	function cdata($parser, $cdata)	{		if ($this->current_xhtml_construct >= 0)		{			$this->data['data'] .= htmlspecialchars($cdata, ENT_QUOTES, $this->encoding);		}		else		{			$this->data['data'] .= $cdata;		}	}	function tag_close($parser, $tag)	{		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct--;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML && !in_array(end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param')))			{				$this->data['data'] .= '</' . end($this->element) . '>';			}		}		if ($this->current_xhtml_construct === -1)		{			$this->data =& $this->datas[count($this->datas) - 1];			array_pop($this->datas);		}		array_pop($this->element);		array_pop($this->namespace);		array_pop($this->xml_base);		array_pop($this->xml_base_explicit);		array_pop($this->xml_lang);	}	function split_ns($string)	{		static $cache = array();		if (!isset($cache[$string]))		{			if ($pos = strpos($string, $this->separator))			{				static $separator_length;				if (!$separator_length)				{					$separator_length = strlen($this->separator);				}				$namespace = substr($string, 0, $pos);				$local_name = substr($string, $pos + $separator_length);				if (strtolower($namespace) === SIMPLEPIE_NAMESPACE_ITUNES)				{					$namespace = SIMPLEPIE_NAMESPACE_ITUNES;				}				// Normalize the Media RSS namespaces				if ($namespace === SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG)				{					$namespace = SIMPLEPIE_NAMESPACE_MEDIARSS;				}				$cache[$string] = array($namespace, $local_name);			}			else			{				$cache[$string] = array('', $string);			}		}		return $cache[$string];	}}/** * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags */class SimplePie_Sanitize{	// Private vars	var $base;	// Options	var $remove_div = true;	var $image_handler = '';	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	var $encode_instead_of_strip = false;	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	var $strip_comments = false;	var $output_encoding = 'UTF-8';	var $enable_cache = true;	var $cache_location = './cache';	var $cache_name_function = 'md5';	var $cache_class = 'SimplePie_Cache';	var $file_class = 'SimplePie_File';	var $timeout = 10;	var $useragent = '';	var $force_fsockopen = false;	var $replace_url_attributes = array(		'a' => 'href',		'area' => 'href',		'blockquote' => 'cite',		'del' => 'cite',		'form' => 'action',		'img' => array('longdesc', 'src'),		'input' => 'src',		'ins' => 'cite',		'q' => 'cite'	);	function remove_div($enable = true)	{		$this->remove_div = (bool) $enable;	}	function set_image_handler($page = false)	{		if ($page)		{			$this->image_handler = (string) $page;		}		else		{			$this->image_handler = false;		}	}	function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')	{		if (isset($enable_cache))		{			$this->enable_cache = (bool) $enable_cache;		}		if ($cache_location)		{			$this->cache_location = (string) $cache_location;		}		if ($cache_name_function)		{			$this->cache_name_function = (string) $cache_name_function;		}		if ($cache_class)		{			$this->cache_class = (string) $cache_class;		}	}	function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false)	{		if ($file_class)		{			$this->file_class = (string) $file_class;		}		if ($timeout)		{			$this->timeout = (string) $timeout;		}		if ($useragent)		{			$this->useragent = (string) $useragent;		}		if ($force_fsockopen)		{			$this->force_fsockopen = (string) $force_fsockopen;		}	}	function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))	{		if ($tags)		{			if (is_array($tags))			{				$this->strip_htmltags = $tags;			}			else			{				$this->strip_htmltags = explode(',', $tags);			}		}		else		{			$this->strip_htmltags = false;		}	}	function encode_instead_of_strip($encode = false)	{		$this->encode_instead_of_strip = (bool) $encode;	}	function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))	{		if ($attribs)		{			if (is_array($attribs))			{				$this->strip_attributes = $attribs;			}			else			{				$this->strip_attributes = explode(',', $attribs);			}		}		else		{			$this->strip_attributes = false;		}	}	function strip_comments($strip = false)	{		$this->strip_comments = (bool) $strip;	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->output_encoding = (string) $encoding;	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->replace_url_attributes = (array) $element_attribute;	}	function sanitize($data, $type, $base = '')	{		$data = trim($data);		if ($data !== '' || $type & SIMPLEPIE_CONSTRUCT_IRI)		{			if ($type & SIMPLEPIE_CONSTRUCT_MAYBE_HTML)			{				if (preg_match('/(&(#(x[0-9a-fA-F]+|[0-9]+)|[a-zA-Z0-9]+)|<\/[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>)/', $data))				{					$type |= SIMPLEPIE_CONSTRUCT_HTML;				}				else				{					$type |= SIMPLEPIE_CONSTRUCT_TEXT;				}			}			if ($type & SIMPLEPIE_CONSTRUCT_BASE64)			{				$data = base64_decode($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_XHTML)			{				if ($this->remove_div)				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '', $data);					$data = preg_replace('/<\/div>$/', '', $data);				}				else				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '<div>', $data);				}			}			if ($type & (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))			{				// Strip comments				if ($this->strip_comments)				{					$data = SimplePie_Misc::strip_comments($data);				}				// Strip out HTML tags and attributes that might cause various security problems.				// Based on recommendations by Mark Pilgrim at:				// http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely				if ($this->strip_htmltags)				{					foreach ($this->strip_htmltags as $tag)					{						$pcre = "/<($tag)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$tag" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>|(\/)?>)/siU';						while (preg_match($pcre, $data))						{							$data = preg_replace_callback($pcre, array(&$this, 'do_strip_htmltags'), $data);						}					}				}				if ($this->strip_attributes)				{					foreach ($this->strip_attributes as $attrib)					{						$data = preg_replace('/(<[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*)' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . trim($attrib) . '(?:\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>/', '\1\2\3>', $data);					}				}				// Replace relative URLs				$this->base = $base;				foreach ($this->replace_url_attributes as $element => $attributes)				{					$data = $this->replace_urls($data, $element, $attributes);				}				// If image handling (caching, etc.) is enabled, cache and rewrite all the image tags.				if (isset($this->image_handler) && ((string) $this->image_handler) !== '' && $this->enable_cache)				{					$images = SimplePie_Misc::get_element('img', $data);					foreach ($images as $img)					{						if (isset($img['attribs']['src']['data']))						{							$image_url = call_user_func($this->cache_name_function, $img['attribs']['src']['data']);							$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $image_url, 'spi');							if ($cache->load())							{								$img['attribs']['src']['data'] = $this->image_handler . $image_url;								$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);							}							else							{								$file =& new $this->file_class($img['attribs']['src']['data'], $this->timeout, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);								$headers = $file->headers;								if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))								{									if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))									{										$img['attribs']['src']['data'] = $this->image_handler . $image_url;										$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);									}									else									{										trigger_error("$this->cache_location is not writeable", E_USER_WARNING);									}								}							}						}					}				}				// Having (possibly) taken stuff out, there may now be whitespace at the beginning/end of the data				$data = trim($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_IRI)			{				$data = SimplePie_Misc::absolutize_url($data, $base);			}			if ($type & (SIMPLEPIE_CONSTRUCT_TEXT | SIMPLEPIE_CONSTRUCT_IRI))			{				$data = htmlspecialchars($data, ENT_COMPAT, 'UTF-8');			}			if ($this->output_encoding !== 'UTF-8')			{				$data = SimplePie_Misc::change_encoding($data, 'UTF-8', $this->output_encoding);			}		}		return $data;	}	function replace_urls($data, $tag, $attributes)	{		if (!is_array($this->strip_htmltags) || !in_array($tag, $this->strip_htmltags))		{			$elements = SimplePie_Misc::get_element($tag, $data);			foreach ($elements as $element)			{				if (is_array($attributes))				{					foreach ($attributes as $attribute)					{						if (isset($element['attribs'][$attribute]['data']))						{							$element['attribs'][$attribute]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attribute]['data'], $this->base);							$new_element = SimplePie_Misc::element_implode($element);							$data = str_replace($element['full'], $new_element, $data);							$element['full'] = $new_element;						}					}				}				elseif (isset($element['attribs'][$attributes]['data']))				{					$element['attribs'][$attributes]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attributes]['data'], $this->base);					$data = str_replace($element['full'], SimplePie_Misc::element_implode($element), $data);				}			}		}		return $data;	}	function do_strip_htmltags($match)	{		if ($this->encode_instead_of_strip)		{			if (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))			{				$match[1] = htmlspecialchars($match[1], ENT_COMPAT, 'UTF-8');				$match[2] = htmlspecialchars($match[2], ENT_COMPAT, 'UTF-8');				return "&lt;$match[1]$match[2]&gt;$match[3]&lt;/$match[1]&gt;";			}			else			{				return htmlspecialchars($match[0], ENT_COMPAT, 'UTF-8');			}		}		elseif (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))		{			return $match[4];		}		else		{			return '';		}	}}endif;?>
<?php/** * Plugins may load this file to gain access to special helper functions for * plugin installation. This file is not included by WordPress and it is * recommended, to prevent fatal errors, that this file is included using * require_once(). * * These functions are not optimized for speed, but they should only be used * once in a while, so speed shouldn't be a concern. If it is and you are * needing to use these functions a lot, you might experience time outs. If you * do, then it is advised to just write the SQL code yourself. * * You can turn debugging on, by setting $debug to 1 after you include this * file. * * <code> * check_column('wp_links', 'link_description', 'mediumtext'); * if (check_column($wpdb->comments, 'comment_author', 'tinytext')) *     echo "ok\n"; * * $error_count = 0; * $tablename = $wpdb->links; * // check the column * if (!check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $ddl = "ALTER TABLE $wpdb->links MODIFY COLUMN link_description varchar(255) NOT NULL DEFAULT '' "; *     $q = $wpdb->query($ddl); * } * * if (check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $res .= $tablename . ' - ok <br />'; * } else { *     $res .= 'There was a problem with ' . $tablename . '<br />'; *     ++$error_count; * } * </code> * * @package WordPress * @subpackage Plugin *//** * @global bool $wp_only_load_config * @name $wp_only_load_config * @var bool * @since unknown */$wp_only_load_config = true;/** Load WordPress Bootstrap */require_once(dirname(dirname(__FILE__)).'/wp-load.php');/** * Turn debugging on or off. * @global bool|int $debug * @name $debug * @var bool|int * @since unknown */$debug = 0;if ( ! function_exists('maybe_create_table') ) :/** * Create database table, if it doesn't already exist. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Database table name. * @param string $create_ddl Create database table SQL. * @return bool False on error, true if already exists or success. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	return false;}endif;if ( ! function_exists('maybe_add_column') ) :/** * Add column to database table, if column doesn't already exist in table. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * @uses $debug * * @param string $table_name Database table name * @param string $column_name Table column name * @param string $create_ddl SQL to add column to table. * @return bool False on failure. True, if already exists or was successful. */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}endif;/** * Drop column from database table, if it exists. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Table name * @param string $column_name Column name * @param string $drop_ddl SQL statement to drop column. * @return bool False on failure, true on success or doesn't exist. */function maybe_drop_column($table_name, $column_name, $drop_ddl) {	global $wpdb;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			//found it try to drop it.			$wpdb->query($drop_ddl);			// we cannot directly tell that whether this succeeded!			foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {				if ($column == $column_name) {					return false;				}			}		}	}	// else didn't find it	return true;}/** * Check column matches criteria. * * Uses the SQL DESC for retrieving the table info for the column. It will help * understand the parameters, if you do more research on what column information * is returned by the SQL statement. Pass in null to skip checking that * criteria. * * Column names returned from DESC table are case sensitive and are listed: *      Field *      Type *      Null *      Key *      Default *      Extra * * @since unknown * @package WordPress * @subpackage Plugin * * @param string $table_name Table name * @param string $col_name Column name * @param string $col_type Column type * @param bool $is_null Optional. Check is null. * @param mixed $key Optional. Key info. * @param mixed $default Optional. Default value. * @param mixed $extra Optional. Extra value. * @return bool True, if matches. False, if not matching. */function check_column($table_name, $col_name, $col_type, $is_null = null, $key = null, $default = null, $extra = null) {	global $wpdb, $debug;	$diffs = 0;	$results = $wpdb->get_results("DESC $table_name");	foreach ($results as $row ) {		if ($debug > 1) print_r($row);		if ($row->Field == $col_name) {			// got our column, check the params			if ($debug) echo ("checking $row->Type against $col_type\n");			if (($col_type != null) && ($row->Type != $col_type)) {				++$diffs;			}			if (($is_null != null) && ($row->Null != $is_null)) {				++$diffs;			}			if (($key != null) && ($row->Key  != $key)) {				++$diffs;			}			if (($default != null) && ($row->Default != $default)) {				++$diffs;			}			if (($extra != null) && ($row->Extra != $extra)) {				++$diffs;			}			if ($diffs > 0) {				if ($debug) echo ("diffs = $diffs returning false\n");				return false;			}			return true;		} // end if found our column	}	return false;}?>
<?php/** * "Inline" diff renderer. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Ciprian Popovici * @package Text_Diff *//** Text_Diff_Renderer */// WP #7391require_once dirname(dirname(__FILE__)) . '/Renderer.php';/** * "Inline" diff renderer. * * This class renders diffs in the Wiki-style "inline" format. * * @author  Ciprian Popovici * @package Text_Diff */class Text_Diff_Renderer_inline extends Text_Diff_Renderer {    /**     * Number of leading context "lines" to preserve.     *     * @var integer     */    var $_leading_context_lines = 10000;    /**     * Number of trailing context "lines" to preserve.     *     * @var integer     */    var $_trailing_context_lines = 10000;    /**     * Prefix for inserted text.     *     * @var string     */    var $_ins_prefix = '<ins>';    /**     * Suffix for inserted text.     *     * @var string     */    var $_ins_suffix = '</ins>';    /**     * Prefix for deleted text.     *     * @var string     */    var $_del_prefix = '<del>';    /**     * Suffix for deleted text.     *     * @var string     */    var $_del_suffix = '</del>';    /**     * Header for each change block.     *     * @var string     */    var $_block_header = '';    /**     * Whether to split down to character-level.     *     * @var boolean     */    var $_split_characters = false;    /**     * What are we currently splitting on? Used to recurse to show word-level     * or character-level changes.     *     * @var string     */    var $_split_level = 'lines';    function _blockHeader($xbeg, $xlen, $ybeg, $ylen)    {        return $this->_block_header;    }    function _startBlock($header)    {        return $header;    }    function _lines($lines, $prefix = ' ', $encode = true)    {        if ($encode) {            array_walk($lines, array(&$this, '_encode'));        }        if ($this->_split_level == 'lines') {            return implode("\n", $lines) . "\n";        } else {            return implode('', $lines);        }    }    function _added($lines)    {        array_walk($lines, array(&$this, '_encode'));        $lines[0] = $this->_ins_prefix . $lines[0];        $lines[count($lines) - 1] .= $this->_ins_suffix;        return $this->_lines($lines, ' ', false);    }    function _deleted($lines, $words = false)    {        array_walk($lines, array(&$this, '_encode'));        $lines[0] = $this->_del_prefix . $lines[0];        $lines[count($lines) - 1] .= $this->_del_suffix;        return $this->_lines($lines, ' ', false);    }    function _changed($orig, $final)    {        /* If we've already split on characters, just display. */        if ($this->_split_level == 'characters') {            return $this->_deleted($orig)                . $this->_added($final);        }        /* If we've already split on words, just display. */        if ($this->_split_level == 'words') {            $prefix = '';            while ($orig[0] !== false && $final[0] !== false &&                   substr($orig[0], 0, 1) == ' ' &&                   substr($final[0], 0, 1) == ' ') {                $prefix .= substr($orig[0], 0, 1);                $orig[0] = substr($orig[0], 1);                $final[0] = substr($final[0], 1);            }            return $prefix . $this->_deleted($orig) . $this->_added($final);        }        $text1 = implode("\n", $orig);        $text2 = implode("\n", $final);        /* Non-printing newline marker. */        $nl = "\0";        if ($this->_split_characters) {            $diff = new Text_Diff('native',                                  array(preg_split('//', $text1),                                        preg_split('//', $text2)));        } else {            /* We want to split on word boundaries, but we need to preserve             * whitespace as well. Therefore we split on words, but include             * all blocks of whitespace in the wordlist. */            $diff = new Text_Diff('native',                                  array($this->_splitOnWords($text1, $nl),                                        $this->_splitOnWords($text2, $nl)));        }        /* Get the diff in inline format. */        $renderer = new Text_Diff_Renderer_inline            (array_merge($this->getParams(),                         array('split_level' => $this->_split_characters ? 'characters' : 'words')));        /* Run the diff and get the output. */        return str_replace($nl, "\n", $renderer->render($diff)) . "\n";    }    function _splitOnWords($string, $newlineEscape = "\n")    {        // Ignore \0; otherwise the while loop will never finish.        $string = str_replace("\0", '', $string);        $words = array();        $length = strlen($string);        $pos = 0;        while ($pos < $length) {            // Eat a word with any preceding whitespace.            $spaces = strspn(substr($string, $pos), " \n");            $nextpos = strcspn(substr($string, $pos + $spaces), " \n");            $words[] = str_replace("\n", $newlineEscape, substr($string, $pos, $spaces + $nextpos));            $pos += $spaces + $nextpos;        }        return $words;    }    function _encode(&$string)    {        $string = htmlspecialchars($string);    }}
<?php/** * Tools Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Tools');add_contextual_help($current_screen,	'<p>' . __('Press This is a bookmarklet that makes it easy to blog about something you come across on the web. You can use it to just grab a link, or to post an excerpt. Press This will even allow you to choose from images included on the page and use them in your post. Just drag the Press This link on this screen to your bookmarks bar in your browser, and you&#8217;ll be on your way to easier content creation.') . '</p>' .	'<p>' . __('Note: Turbo/Gears is no longer promoted on this screen as it was in previous versions due to the fact that Google has discontinued support for it.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Tools_SubPanel" target="_blank">Tools Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( current_user_can('edit_posts') ) : ?><div class="tool-box">	<h3 class="title"><?php _e('Press This') ?></h3>	<p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p>	<p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p>	<p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p>	<p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p></div><?phpendif;if ( current_user_can( 'import' ) ) :$cats = get_taxonomy('category');$tags = get_taxonomy('post_tag');if ( current_user_can($cats->cap->manage_terms) || current_user_can($tags->cap->manage_terms) ) : ?><div class="tool-box">    <h3 class="title"><?php _e( 'Categories and Tags Converter' ) ?></h3>    <p><?php printf( __('<a href="%s">Use this</a> to convert categories to tags or tags to categories.'), 'import.php' ); ?></p></div><?phpendif;endif;do_action( 'tool_box' );?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Revisions administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script('list-revisions');wp_reset_vars(array('revision', 'left', 'right', 'action'));$revision_id = absint($revision);$left        = absint($left);$right       = absint($right);$redirect = 'edit.php';switch ( $action ) :case 'restore' :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !current_user_can( 'edit_post', $revision->post_parent ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	check_admin_referer( "restore-post_$post->ID|$revision->ID" );	wp_restore_post_revision( $revision->ID );	$redirect = add_query_arg( array( 'message' => 5, 'revision' => $revision->ID ), get_edit_post_link( $post->ID, 'url' ) );	break;case 'diff' :	if ( !$left_revision  = get_post( $left ) )		break;	if ( !$right_revision = get_post( $right ) )		break;	if ( !current_user_can( 'read_post', $left_revision->ID ) || !current_user_can( 'read_post', $right_revision->ID ) )		break;	// If we're comparing a revision to itself, redirect to the 'view' page for that revision or the edit page for that post	if ( $left_revision->ID == $right_revision->ID ) {		$redirect = get_edit_post_link( $left_revision->ID );		include( './js/revisions-js.php' );		break;	}	// Don't allow reverse diffs?	if ( strtotime($right_revision->post_modified_gmt) < strtotime($left_revision->post_modified_gmt) ) {		$redirect = add_query_arg( array( 'left' => $right, 'right' => $left ) );		break;	}	if ( $left_revision->ID == $right_revision->post_parent ) // right is a revision of left		$post =& $left_revision;	elseif ( $left_revision->post_parent == $right_revision->ID ) // left is a revision of right		$post =& $right_revision;	elseif ( $left_revision->post_parent == $right_revision->post_parent ) // both are revisions of common parent		$post = get_post( $left_revision->post_parent );	else		break; // Don't diff two unrelated revisions	if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) { // Revisions disabled		if (			// we're not looking at an autosave			( !wp_is_post_autosave( $left_revision ) && !wp_is_post_autosave( $right_revision ) )		||			// we're not comparing an autosave to the current post			( $post->ID !== $left_revision->ID && $post->ID !== $right_revision->ID )		) {			$redirect = 'edit.php?post_type=' . $post->post_type;			break;		}	}	if (		// They're the same		$left_revision->ID == $right_revision->ID	||		// Neither is a revision		( !wp_get_post_revision( $left_revision->ID ) && !wp_get_post_revision( $right_revision->ID ) )	)		break;	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$h2 = sprintf( __( 'Compare Revisions of &#8220;%1$s&#8221;' ), $post_title );	$title = __( 'Revisions' );	$left  = $left_revision->ID;	$right = $right_revision->ID;	$redirect = false;	break;case 'view' :default :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	if ( !current_user_can( 'read_post', $revision->ID ) || !current_user_can( 'read_post', $post->ID ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$revision_title = wp_post_revision_title( $revision, false );	$h2 = sprintf( __( 'Revision for &#8220;%1$s&#8221; created on %2$s' ), $post_title, $revision_title );	$title = __( 'Revisions' );	// Sets up the diff radio buttons	$left  = $revision->ID;	$right = $post->ID;	$redirect = false;	break;endswitch;// Empty post_type means either malformed object found, or no valid parent was found.if ( !$redirect && empty($post->post_type) )	$redirect = 'edit.php';if ( !empty($redirect) ) {	wp_redirect( $redirect );	exit;}// This is so that the correct "Edit" menu item is selected.if ( !empty($post->post_type) && 'post' != $post->post_type )	$parent_file = $submenu_file = 'edit.php?post_type=' . $post->post_type;else	$parent_file = $submenu_file = 'edit.php';require_once( './admin-header.php' );?><div class="wrap"><h2 class="long-header"><?php echo $h2; ?></h2><table class="form-table ie-fixed">	<col class="th" /><?php if ( 'diff' == $action ) : ?><tr id="revision">	<th scope="row"></th>	<th scope="col" class="th-full">		<span class="alignleft"><?php printf( __('Older: %s'), wp_post_revision_title( $left_revision ) ); ?></span>		<span class="alignright"><?php printf( __('Newer: %s'), wp_post_revision_title( $right_revision ) ); ?></span>	</th></tr><?php endif;// use get_post_to_edit filters?$identical = true;foreach ( _wp_post_revision_fields() as $field => $field_title ) :	if ( 'diff' == $action ) {		$left_content = apply_filters( "_wp_post_revision_field_$field", $left_revision->$field, $field );		$right_content = apply_filters( "_wp_post_revision_field_$field", $right_revision->$field, $field );		if ( !$content = wp_text_diff( $left_content, $right_content ) )			continue; // There is no difference between left and right		$identical = false;	} else {		add_filter( "_wp_post_revision_field_$field", 'htmlspecialchars' );		$content = apply_filters( "_wp_post_revision_field_$field", $revision->$field, $field );	}	?>	<tr id="revision-field-<?php echo $field; ?>">		<th scope="row"><?php echo esc_html( $field_title ); ?></th>		<td><div class="pre"><?php echo $content; ?></div></td>	</tr>	<?phpendforeach;if ( 'diff' == $action && $identical ) :	?>	<tr><td colspan="2"><div class="updated"><p><?php _e( 'These revisions are identical.' ); ?></p></div></td></tr>	<?phpendif;?></table><br class="clear" /><h2><?php echo $title; ?></h2><?php$args = array( 'format' => 'form-table', 'parent' => true, 'right' => $right, 'left' => $left );if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') )	$args['type'] = 'autosave';wp_list_post_revisions( $post, $args );?></div><?phprequire_once( './admin-footer.php' );
<?php/** * WordPress FTP Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing FTP. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_FTPext extends WP_Filesystem_Base {	var $link;	var $errors = null;	var $options = array();	function WP_Filesystem_FTPext($opt='') {		$this->method = 'ftpext';		$this->errors = new WP_Error();		//Check if possible to use ftp functions.		if ( ! extension_loaded('ftp') ) {			$this->errors->add('no_ftp_ext', __('The ftp PHP extension is not available'));			return false;		}		// Set defaults:		//This Class uses the timeout on a per-connection basis, Others use it on a per-action basis.		if ( ! defined('FS_TIMEOUT') )			define('FS_TIMEOUT', 240);		if ( empty($opt['port']) )			$this->options['port'] = 21;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('FTP hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( empty($opt['username']) )			$this->errors->add('empty_username', __('FTP username is required'));		else			$this->options['username'] = $opt['username'];		if ( empty($opt['password']) )			$this->errors->add('empty_password', __('FTP password is required'));		else			$this->options['password'] = $opt['password'];		$this->options['ssl'] = false;		if ( isset($opt['connection_type']) && 'ftps' == $opt['connection_type'] )			$this->options['ssl'] = true;	}	function connect() {		if ( isset($this->options['ssl']) && $this->options['ssl'] && function_exists('ftp_ssl_connect') )			$this->link = @ftp_ssl_connect($this->options['hostname'], $this->options['port'], FS_CONNECT_TIMEOUT);		else			$this->link = @ftp_connect($this->options['hostname'], $this->options['port'], FS_CONNECT_TIMEOUT);		if ( ! $this->link ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! @ftp_login($this->link,$this->options['username'], $this->options['password']) ) {			$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));			return false;		}		//Set the Connection to use Passive FTP		@ftp_pasv( $this->link, true );		if ( @ftp_get_option($this->link, FTP_TIMEOUT_SEC) < FS_TIMEOUT )			@ftp_set_option($this->link, FTP_TIMEOUT_SEC, FS_TIMEOUT);		return true;	}	function get_contents($file, $type = '', $resumepos = 0 ) {		if ( empty($type) )			$type = FTP_BINARY;		$tempfile = wp_tempnam($file);		$temp = fopen($tempfile, 'w+');		if ( ! $temp )			return false;		if ( ! @ftp_fget($this->link, $temp, $file, $type, $resumepos) )			return false;		fseek($temp, 0); //Skip back to the start of the file being written to		$contents = '';		while ( ! feof($temp) )			$contents .= fread($temp, 8192);		fclose($temp);		unlink($tempfile);		return $contents;	}	function get_contents_array($file) {		return explode("\n", $this->get_contents($file));	}	function put_contents($file, $contents, $mode = false ) {		$tempfile = wp_tempnam($file);		$temp = fopen($tempfile, 'w+');		if ( ! $temp )			return false;		fwrite($temp, $contents);		fseek($temp, 0); //Skip back to the start of the file being written to		$type = $this->is_binary($contents) ? FTP_BINARY : FTP_ASCII;		$ret = @ftp_fput($this->link, $file, $temp, $type);		fclose($temp);		unlink($tempfile);		$this->chmod($file, $mode);		return $ret;	}	function cwd() {		$cwd = @ftp_pwd($this->link);		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($dir) {		return @ftp_chdir($this->link, $dir);	}	function chgrp($file, $group, $recursive = false ) {		return false;	}	function chmod($file, $mode = false, $recursive = false) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		// chmod any sub-objects if recursive.		if ( $recursive && $this->is_dir($file) ) {			$filelist = $this->dirlist($file);			foreach ( (array)$filelist as $filename => $filemeta )				$this->chmod($file . '/' . $filename, $mode, $recursive);		}		// chmod the file or directory		if ( ! function_exists('ftp_chmod') )			return (bool)@ftp_site($this->link, sprintf('CHMOD %o %s', $mode, $file));		return (bool)@ftp_chmod($this->link, $mode, $file);	}	function chown($file, $owner, $recursive = false ) {		return false;	}	function owner($file) {		$dir = $this->dirlist($file);		return $dir[$file]['owner'];	}	function getchmod($file) {		$dir = $this->dirlist($file);		return $dir[$file]['permsn'];	}	function group($file) {		$dir = $this->dirlist($file);		return $dir[$file]['group'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content)			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false) {		return ftp_rename($this->link, $source, $destination);	}	function delete($file, $recursive = false ) {		if ( empty($file) )			return false;		if ( $this->is_file($file) )			return @ftp_delete($this->link, $file);		if ( !$recursive )			return @ftp_rmdir($this->link, $file);		$filelist = $this->dirlist( trailingslashit($file) );		if ( !empty($filelist) )			foreach ( $filelist as $delete_file )				$this->delete( trailingslashit($file) . $delete_file['name'], $recursive);		return @ftp_rmdir($this->link, $file);	}	function exists($file) {		$list = @ftp_nlist($this->link, $file);		return !empty($list); //empty list = no file, so invert.	}	function is_file($file) {		return $this->exists($file) && !$this->is_dir($file);	}	function is_dir($path) {		$cwd = $this->cwd();		$result = @ftp_chdir($this->link, trailingslashit($path) );		if ( $result && $path == $this->cwd() || $this->cwd() != $cwd ) {			@ftp_chdir($this->link, $cwd);			return true;		}		return false;	}	function is_readable($file) {		//Get dir list, Check if the file is readable by the current user??		return true;	}	function is_writable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function atime($file) {		return false;	}	function mtime($file) {		return ftp_mdtm($this->link, $file);	}	function size($file) {		return ftp_size($this->link, $file);	}	function touch($file, $time = 0, $atime = 0) {		return false;	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		if ( !@ftp_mkdir($this->link, $path) )			return false;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function parselisting($line) {		static $is_windows;		if ( is_null($is_windows) )			$is_windows = stripos( ftp_systype($this->link), 'win') !== false;		if ( $is_windows && preg_match('/([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)/', $line, $lucifer) ) {			$b = array();			if ( $lucifer[3] < 70 )				$lucifer[3] +=2000;			else				$lucifer[3] += 1900; // 4digit year fix			$b['isdir'] = ( $lucifer[7] == '<DIR>');			if ( $b['isdir'] )				$b['type'] = 'd';			else				$b['type'] = 'f';			$b['size'] = $lucifer[7];			$b['month'] = $lucifer[1];			$b['day'] = $lucifer[2];			$b['year'] = $lucifer[3];			$b['hour'] = $lucifer[4];			$b['minute'] = $lucifer[5];			$b['time'] = @mktime($lucifer[4] + (strcasecmp($lucifer[6], "PM") == 0 ? 12 : 0), $lucifer[5], 0, $lucifer[1], $lucifer[2], $lucifer[3]);			$b['am/pm'] = $lucifer[6];			$b['name'] = $lucifer[8];		} elseif ( !$is_windows && $lucifer = preg_split('/[ ]/', $line, 9, PREG_SPLIT_NO_EMPTY)) {			//echo $line."\n";			$lcount = count($lucifer);			if ( $lcount < 8 )				return '';			$b = array();			$b['isdir'] = $lucifer[0]{0} === 'd';			$b['islink'] = $lucifer[0]{0} === 'l';			if ( $b['isdir'] )				$b['type'] = 'd';			elseif ( $b['islink'] )				$b['type'] = 'l';			else				$b['type'] = 'f';			$b['perms'] = $lucifer[0];			$b['number'] = $lucifer[1];			$b['owner'] = $lucifer[2];			$b['group'] = $lucifer[3];			$b['size'] = $lucifer[4];			if ( $lcount == 8 ) {				sscanf($lucifer[5], '%d-%d-%d', $b['year'], $b['month'], $b['day']);				sscanf($lucifer[6], '%d:%d', $b['hour'], $b['minute']);				$b['time'] = @mktime($b['hour'], $b['minute'], 0, $b['month'], $b['day'], $b['year']);				$b['name'] = $lucifer[7];			} else {				$b['month'] = $lucifer[5];				$b['day'] = $lucifer[6];				if ( preg_match('/([0-9]{2}):([0-9]{2})/', $lucifer[7], $l2) ) {					$b['year'] = date("Y");					$b['hour'] = $l2[1];					$b['minute'] = $l2[2];				} else {					$b['year'] = $lucifer[7];					$b['hour'] = 0;					$b['minute'] = 0;				}				$b['time'] = strtotime( sprintf('%d %s %d %02d:%02d', $b['day'], $b['month'], $b['year'], $b['hour'], $b['minute']) );				$b['name'] = $lucifer[8];			}		}		return $b;	}	function dirlist($path = '.', $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path) . '/';		} else {			$limit_file = false;		}		$pwd = @ftp_pwd($this->link);		if ( ! @ftp_chdir($this->link, $path) ) // Cant change to folder = folder doesnt exist			return false;		$list = @ftp_rawlist($this->link, '-a', false);		@ftp_chdir($this->link, $pwd);		if ( empty($list) ) // Empty array = non-existent folder (real folder will show . at least)			return false;		$dirlist = array();		foreach ( $list as $k => $v ) {			$entry = $this->parselisting($v);			if ( empty($entry) )				continue;			if ( '.' == $entry['name'] || '..' == $entry['name'] )				continue;			if ( ! $include_hidden && '.' == $entry['name'][0] )				continue;			if ( $limit_file && $entry['name'] != $limit_file)				continue;			$dirlist[ $entry['name'] ] = $entry;		}		$ret = array();		foreach ( (array)$dirlist as $struc ) {			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		return $ret;	}	function __destruct() {		if ( $this->link )			ftp_close($this->link);	}}?>
<?php/** * Multisite administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Admin' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Until WordPress 3.0, running multiple sites required using WordPress MU instead of regular WordPress. In version 3.0, these applications have merged. If you are a former MU user, you should be aware of the following changes:') . '</p>' .	'<ul><li>' . __('Site Admin is now Super Admin (we highly encourage you to get yourself a cape!).') . '</li>' .	'<li>' . __('Blogs are now called Sites; Site is now called Network.') . '</li></ul>' .	'<p>' . __('This screen provides the network administrator with links to the screens for Sites and Users to either create a new site or user, or to search existing users and sites. Those screens are also accessible through the left-hand navigation in the Super Admin section.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Super_Admin_Menu" target="_blank">Documentation on Super Admin Menu</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );$c_users = get_user_count();$c_blogs = get_blog_count();$user_text = sprintf( _n( '%s user', '%s users', $c_users ), number_format_i18n( $c_users ) );$blog_text = sprintf( _n( '%s site', '%s sites', $c_blogs ), number_format_i18n( $c_blogs ) );$sentence = sprintf( __( 'You have %1$s and %2$s.' ), $blog_text, $user_text );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub">	<li><a href="ms-sites.php#form-add-site"><?php _e( 'Create a New Site' ); ?></a> |</li>	<li><a href="ms-users.php#form-add-user"><?php _e( 'Create a New User' ); ?></a></li>	</ul>	<br class="clear" />	<p class="youhave"><?php echo $sentence; ?></p>	<?php do_action( 'wpmuadminresult', '' ); ?>	<form name="searchform" action="ms-users.php" method="get">		<p>			<input type="hidden" name="action" value="users" />			<input type="text" name="s" value="" size="17" />			<input class="button" type="submit" name="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" />		</p>	</form>	<form name="searchform" action="ms-sites.php" method="get">		<p>			<input type="hidden" name="action" value="blogs" />			<input type="hidden" name="searchaction" value="name" />			<input type="text" name="s" value="" size="17" />			<input class="button" type="submit" name="blog_name" value="<?php esc_attr_e( 'Search Sites' ); ?>" />		</p>	</form>	<?php do_action( 'mu_rightnow_end' ); ?>	<?php do_action( 'mu_activity_box_end' ); ?></div><?php include( './admin-footer.php' ); ?>
<?php/** * Deprecated multisite admin functions from past WordPress versions and WordPress MU. * You shouldn't use these functions and look for the alternatives instead. The functions * will be removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//** * @deprecated 3.0.0 */function wpmu_menu() {	_deprecated_function(__FUNCTION__, '3.0' );	// deprecated. See #11763}/**  * Determines if the available space defined by the admin has been exceeded by the user.  *  * @deprecated 3.0.0  * @see is_upload_space_available() */function wpmu_checkAvailableSpace() {	_deprecated_function(__FUNCTION__, '3.0', 'is_upload_space_available()' );	if ( !is_upload_space_available() )		wp_die( __('Sorry, you must delete files before you can upload any more.') );}/** * @deprecated 3.0.0 */function mu_options( $options ) {	_deprecated_function(__FUNCTION__, '3.0' );	return $options;}/** * @deprecated 3.0.0 * @see activate_plugin() */function activate_sitewide_plugin() {	_deprecated_function(__FUNCTION__, '3.0', 'activate_plugin()' );	return false;}/** * @deprecated 3.0.0 * @see deactivate_sitewide_plugin() */function deactivate_sitewide_plugin( $plugin = false ) {	_deprecated_function(__FUNCTION__, '3.0', 'deactivate_plugin()' );	return;}/** * @deprecated 3.0.0 * @see is_network_only_plugin() */function is_wpmu_sitewide_plugin( $file ) {	_deprecated_function(__FUNCTION__, '3.0', 'is_network_only_plugin()' );	return is_network_only_plugin( $file );}?>
<?php/** * Defines the Gears manifest file for Google Gears offline storage. * * @package WordPress * @subpackage Administration *//** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );require(ABSPATH . '/wp-admin/includes/manifest.php');$files = get_manifest();header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );header( 'Pragma: no-cache' );header( 'Content-Type: application/x-javascript; charset=UTF-8' );?>{"betaManifestVersion" : 1,"version" : "<?php echo $man_version; ?>","entries" : [<?php$entries = '';foreach ( $files as $file ) {	// Set ignoreQuery, defaulting to true	$ignore_query = ( isset($file[2]) && !$file[2] ) ? '' : ', "ignoreQuery" : true ';	// If version is not set, just output the file	if ( !isset($file[1]) )		$entries .= '{ "url" : "' . $file[0] . '"' . $ignore_query . ' }' . "\n";	// Output url and src	else		$entries .= '{ "url" : "' . $file[0] . '", "src" : "' . $file[0] . '?' . $file[1] . '"' . $ignore_query . ' },' . "\n";}echo trim( trim($entries), ',' );?>]}
<?php/** * WordPress FTP Sockets Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing FTP Sockets. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_ftpsockets extends WP_Filesystem_Base {	var $ftp = false;	var $errors = null;	var $options = array();	function WP_Filesystem_ftpsockets($opt = '') {		$this->method = 'ftpsockets';		$this->errors = new WP_Error();		//Check if possible to use ftp functions.		if ( ! @include_once ABSPATH . 'wp-admin/includes/class-ftp.php' )				return false;		$this->ftp = new ftp();		//Set defaults:		if ( empty($opt['port']) )			$this->options['port'] = 21;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('FTP hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( empty ($opt['username']) )			$this->errors->add('empty_username', __('FTP username is required'));		else			$this->options['username'] = $opt['username'];		if ( empty ($opt['password']) )			$this->errors->add('empty_password', __('FTP password is required'));		else			$this->options['password'] = $opt['password'];	}	function connect() {		if ( ! $this->ftp )			return false;		$this->ftp->setTimeout(FS_CONNECT_TIMEOUT);		if ( ! $this->ftp->SetServer($this->options['hostname'], $this->options['port']) ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! $this->ftp->connect() ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! $this->ftp->login($this->options['username'], $this->options['password']) ) {			$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));			return false;		}		$this->ftp->SetType(FTP_AUTOASCII);		$this->ftp->Passive(true);		$this->ftp->setTimeout(FS_TIMEOUT);		return true;	}	function get_contents($file, $type = '', $resumepos = 0) {		if ( ! $this->exists($file) )			return false;		if ( empty($type) )			$type = FTP_AUTOASCII;		$this->ftp->SetType($type);		$temp = wp_tempnam( $file );		if ( ! $temphandle = fopen($temp, 'w+') )			return false;		if ( ! $this->ftp->fget($temphandle, $file) ) {			fclose($temphandle);			unlink($temp);			return ''; //Blank document, File does exist, Its just blank.		}		fseek($temphandle, 0); //Skip back to the start of the file being written to		$contents = '';		while ( ! feof($temphandle) )			$contents .= fread($temphandle, 8192);		fclose($temphandle);		unlink($temp);		return $contents;	}	function get_contents_array($file) {		return explode("\n", $this->get_contents($file) );	}	function put_contents($file, $contents, $mode = false ) {		$temp = wp_tempnam( $file );		if ( ! $temphandle = @fopen($temp, 'w+') ) {			unlink($temp);			return false;		}		fwrite($temphandle, $contents);		fseek($temphandle, 0); //Skip back to the start of the file being written to		$type = $this->is_binary($contents) ? FTP_BINARY : FTP_ASCII;		$this->ftp->SetType($type);		$ret = $this->ftp->fput($file, $temphandle);		fclose($temphandle);		unlink($temp);		$this->chmod($file, $mode);		return $ret;	}	function cwd() {		$cwd = $this->ftp->pwd();		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($file) {		return $this->ftp->chdir($file);	}	function chgrp($file, $group, $recursive = false ) {		return false;	}	function chmod($file, $mode = false, $recursive = false ) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		// chmod any sub-objects if recursive.		if ( $recursive && $this->is_dir($file) ) {			$filelist = $this->dirlist($file);			foreach ( (array)$filelist as $filename => $filemeta )				$this->chmod($file . '/' . $filename, $mode, $recursive);		}		// chmod the file or directory		return $this->ftp->chmod($file, $mode);	}	function chown($file, $owner, $recursive = false ) {		return false;	}	function owner($file) {		$dir = $this->dirlist($file);		return $dir[$file]['owner'];	}	function getchmod($file) {		$dir = $this->dirlist($file);		return $dir[$file]['permsn'];	}	function group($file) {		$dir = $this->dirlist($file);		return $dir[$file]['group'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content )			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false ) {		return $this->ftp->rename($source, $destination);	}	function delete($file, $recursive = false ) {		if ( empty($file) )			return false;		if ( $this->is_file($file) )			return $this->ftp->delete($file);		if ( !$recursive )			return $this->ftp->rmdir($file);		return $this->ftp->mdel($file);	}	function exists($file) {		return $this->ftp->is_exists($file);	}	function is_file($file) {		if ( $this->is_dir($file) )			return false;		if ( $this->exists($file) )			return true;		return false;	}	function is_dir($path) {		$cwd = $this->cwd();		if ( $this->chdir($path) ) {			$this->chdir($cwd);			return true;		}		return false;	}	function is_readable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function is_writable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function atime($file) {		return false;	}	function mtime($file) {		return $this->ftp->mdtm($file);	}	function size($file) {		return $this->ftp->filesize($file);	}	function touch($file, $time = 0, $atime = 0 ) {		return false;	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false ) {		if ( ! $this->ftp->mkdir($path) )			return false;		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false ) {		$this->delete($path, $recursive);	}	function dirlist($path = '.', $include_hidden = true, $recursive = false ) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path) . '/';		} else {			$limit_file = false;		}		$list = $this->ftp->dirlist($path);		if ( empty($list) && !$this->exists($path) )			return false;		$ret = array();		foreach ( $list as $struc ) {			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue;			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file )				continue;			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		return $ret;	}	function __destruct() {		$this->ftp->quit();	}}?>
<?php/** * Deprecated. Use registration.php. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC .  '/registration.php' );require_once(ABSPATH . WPINC .  '/registration.php');?>
<?php/** * Class for working with PO files * * @version $Id: po.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage po */require_once dirname(__FILE__) . '/translations.php';define('PO_MAX_LINE_LEN', 79);ini_set('auto_detect_line_endings', 1);/** * Routines for working with PO files */if ( !class_exists( 'PO' ) ):class PO extends Gettext_Translations {	/**	 * Exports headers to a PO entry	 *	 * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end	 */	function export_headers() {		$header_string = '';		foreach($this->headers as $header => $value) {			$header_string.= "$header: $value\n";		}		$poified = PO::poify($header_string);		return rtrim("msgid \"\"\nmsgstr $poified");	}	/**	 * Exports all entries to PO format	 *	 * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end	 */	function export_entries() {		//TODO sorting		return implode("\n\n", array_map(array('PO', 'export_entry'), $this->entries));	}	/**	 * Exports the whole PO file as a string	 *	 * @param bool $include_headers whether to include the headers in the export	 * @return string ready for inclusion in PO file string for headers and all the enrtries	 */	function export($include_headers = true) {		$res = '';		if ($include_headers) {			$res .= $this->export_headers();			$res .= "\n\n";		}		$res .= $this->export_entries();		return $res;	}	/**	 * Same as {@link export}, but writes the result to a file	 *	 * @param string $filename where to write the PO string	 * @param bool $include_headers whether to include tje headers in the export	 * @return bool true on success, false on error	 */	function export_to_file($filename, $include_headers = true) {		$fh = fopen($filename, 'w');		if (false === $fh) return false;		$export = $this->export($include_headers);		$res = fwrite($fh, $export);		if (false === $res) return false;		return fclose($fh);	}	/**	 * Formats a string in PO-style	 *	 * @static	 * @param string $string the string to format	 * @return string the poified string	 */	function poify($string) {		$quote = '"';		$slash = '\\';		$newline = "\n";		$replaces = array(			"$slash" 	=> "$slash$slash",			"$quote"	=> "$slash$quote",			"\t" 		=> '\t',		);		$string = str_replace(array_keys($replaces), array_values($replaces), $string);		$po = $quote.implode("${slash}n$quote$newline$quote", explode($newline, $string)).$quote;		// add empty string on first line for readbility		if (false !== strpos($string, $newline) &&				(substr_count($string, $newline) > 1 || !($newline === substr($string, -strlen($newline))))) {			$po = "$quote$quote$newline$po";		}		// remove empty strings		$po = str_replace("$newline$quote$quote", '', $po);		return $po;	}	/**	 * Gives back the original string from a PO-formatted string	 *	 * @static	 * @param string $string PO-formatted string	 * @return string enascaped string	 */	function unpoify($string) {		$escapes = array('t' => "\t", 'n' => "\n", '\\' => '\\');		$lines = array_map('trim', explode("\n", $string));		$lines = array_map(array('PO', 'trim_quotes'), $lines);		$unpoified = '';		$previous_is_backslash = false;		foreach($lines as $line) {			preg_match_all('/./u', $line, $chars);			$chars = $chars[0];			foreach($chars as $char) {				if (!$previous_is_backslash) {					if ('\\' == $char)						$previous_is_backslash = true;					else						$unpoified .= $char;				} else {					$previous_is_backslash = false;					$unpoified .= isset($escapes[$char])? $escapes[$char] : $char;				}			}		}		return $unpoified;	}	/**	 * Inserts $with in the beginning of every new line of $string and	 * returns the modified string	 *	 * @static	 * @param string $string prepend lines in this string	 * @param string $with prepend lines with this string	 */	function prepend_each_line($string, $with) {		$php_with = var_export($with, true);		$lines = explode("\n", $string);		// do not prepend the string on the last empty line, artefact by explode		if ("\n" == substr($string, -1)) unset($lines[count($lines) - 1]);		$res = implode("\n", array_map(create_function('$x', "return $php_with.\$x;"), $lines));		// give back the empty line, we ignored above		if ("\n" == substr($string, -1)) $res .= "\n";		return $res;	}	/**	 * Prepare a text as a comment -- wraps the lines and prepends #	 * and a special character to each line	 *	 * @access private	 * @param string $text the comment text	 * @param string $char character to denote a special PO comment,	 * 	like :, default is a space	 */	function comment_block($text, $char=' ') {		$text = wordwrap($text, PO_MAX_LINE_LEN - 3);		return PO::prepend_each_line($text, "#$char ");	}	/**	 * Builds a string from the entry for inclusion in PO file	 *	 * @static	 * @param object &$entry the entry to convert to po string	 * @return string|bool PO-style formatted string for the entry or	 * 	false if the entry is empty	 */	function export_entry(&$entry) {		if (is_null($entry->singular)) return false;		$po = array();		if (!empty($entry->translator_comments)) $po[] = PO::comment_block($entry->translator_comments);		if (!empty($entry->extracted_comments)) $po[] = PO::comment_block($entry->extracted_comments, '.');		if (!empty($entry->references)) $po[] = PO::comment_block(implode(' ', $entry->references), ':');		if (!empty($entry->flags)) $po[] = PO::comment_block(implode(", ", $entry->flags), ',');		if (!is_null($entry->context)) $po[] = 'msgctxt '.PO::poify($entry->context);		$po[] = 'msgid '.PO::poify($entry->singular);		if (!$entry->is_plural) {			$translation = empty($entry->translations)? '' : $entry->translations[0];			$po[] = 'msgstr '.PO::poify($translation);		} else {			$po[] = 'msgid_plural '.PO::poify($entry->plural);			$translations = empty($entry->translations)? array('', '') : $entry->translations;			foreach($translations as $i => $translation) {				$po[] = "msgstr[$i] ".PO::poify($translation);			}		}		return implode("\n", $po);	}	function import_from_file($filename) {		$f = fopen($filename, 'r');		if (!$f) return false;		$lineno = 0;		while (true) {			$res = $this->read_entry($f, $lineno);			if (!$res) break;			if ($res['entry']->singular == '') {				$this->set_headers($this->make_headers($res['entry']->translations[0]));			} else {				$this->add_entry($res['entry']);			}		}		PO::read_line($f, 'clear');		return $res !== false;	}	function read_entry($f, $lineno = 0) {		$entry = new Translation_Entry();		// where were we in the last step		// can be: comment, msgctxt, msgid, msgid_plural, msgstr, msgstr_plural		$context = '';		$msgstr_index = 0;		$is_final = create_function('$context', 'return $context == "msgstr" || $context == "msgstr_plural";');		while (true) {			$lineno++;			$line = PO::read_line($f);			if (!$line)  {				if (feof($f)) {					if ($is_final($context))						break;					elseif (!$context) // we haven't read a line and eof came						return null;					else						return false;				} else {					return false;				}			}			if ($line == "\n") continue;			$line = trim($line);			if (preg_match('/^#/', $line, $m)) {				// the comment is the start of a new entry				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				// comments have to be at the beginning				if ($context && $context != 'comment') {					return false;				}				// add comment				$this->add_comment_to_entry($entry, $line);			} elseif (preg_match('/^msgctxt\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'comment') {					return false;				}				$context = 'msgctxt';				$entry->context .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'msgctxt' && $context != 'comment') {					return false;				}				$context = 'msgid';				$entry->singular .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid_plural\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgid_plural';				$entry->is_plural = true;				$entry->plural .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgstr\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgstr';				$entry->translations = array(PO::unpoify($m[1]));			} elseif (preg_match('/^msgstr\[(\d+)\]\s+(".*")/', $line, $m)) {				if ($context != 'msgid_plural' && $context != 'msgstr_plural') {					return false;				}				$context = 'msgstr_plural';				$msgstr_index = $m[1];				$entry->translations[$m[1]] = PO::unpoify($m[2]);			} elseif (preg_match('/^".*"$/', $line)) {				$unpoified = PO::unpoify($line);				switch ($context) {					case 'msgid':						$entry->singular .= $unpoified; break;					case 'msgctxt':						$entry->context .= $unpoified; break;					case 'msgid_plural':						$entry->plural .= $unpoified; break;					case 'msgstr':						$entry->translations[0] .= $unpoified; break;					case 'msgstr_plural':						$entry->translations[$msgstr_index] .= $unpoified; break;					default:						return false;				}			} else {				return false;			}		}		if (array() == array_filter($entry->translations, create_function('$t', 'return $t || "0" === $t;'))) {			$entry->translations = array();		}		return array('entry' => $entry, 'lineno' => $lineno);	}	function read_line($f, $action = 'read') {		static $last_line = '';		static $use_last_line = false;		if ('clear' == $action) {			$last_line = '';			return true;		}		if ('put-back' == $action) {			$use_last_line = true;			return true;		}		$line = $use_last_line? $last_line : fgets($f);		$last_line = $line;		$use_last_line = false;		return $line;	}	function add_comment_to_entry(&$entry, $po_comment_line) {		$first_two = substr($po_comment_line, 0, 2);		$comment = trim(substr($po_comment_line, 2));		if ('#:' == $first_two) {			$entry->references = array_merge($entry->references, preg_split('/\s+/', $comment));		} elseif ('#.' == $first_two) {			$entry->extracted_comments = trim($entry->extracted_comments . "\n" . $comment);		} elseif ('#,' == $first_two) {			$entry->flags = array_merge($entry->flags, preg_split('/,\s*/', $comment));		} else {			$entry->translator_comments = trim($entry->translator_comments . "\n" . $comment);		}	}	function trim_quotes($s) {		if ( substr($s, 0, 1) == '"') $s = substr($s, 1);		if ( substr($s, -1, 1) == '"') $s = substr($s, 0, -1);		return $s;	}}endif;
<?php/** * Edit attachments table for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( have_posts() ) { ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('upload'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('upload', false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:post"><?phpadd_filter('the_title','esc_html');$alt = '';$posts_columns = get_column_headers('upload');$hidden = get_hidden_columns('upload');while ( have_posts() ) : the_post();if ( $is_trash && $post->post_status != 'trash' )	continue;elseif ( !$is_trash && $post->post_status == 'trash' )	continue;$alt = ( 'alternate' == $alt ) ? '' : 'alternate';global $current_user;$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );$att_title = _draft_or_post_title();?>	<tr id='post-<?php echo $id; ?>' class='<?php echo trim( $alt . ' author-' . $post_owner . ' status-' . $post->post_status ); ?>' valign="top"><?phpforeach ($posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can('edit_post', $post->ID) ) { ?><input type="checkbox" name="media[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'icon':		$attributes = 'class="column-icon media-icon"' . $style;		?>		<td <?php echo $attributes ?>><?php			if ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) {				if ( $is_trash ) echo $thumb;				else {?>				<a href="<?php echo get_edit_post_link( $post->ID, true ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>">					<?php echo $thumb; ?>				</a><?php			}			}		?></td>		<?php		// TODO		break;	case 'media':		?>		<td <?php echo $attributes ?>><strong><?php if ( $is_trash ) echo $att_title; else { ?><a href="<?php echo get_edit_post_link( $post->ID, true ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $att_title; ?></a><?php } ?></strong>		<p>		<?php		if ( preg_match( '/^.*?\.(\w+)$/', get_attached_file( $post->ID ), $matches ) )			echo esc_html( strtoupper( $matches[1] ) );		else			echo strtoupper( str_replace( 'image/', '', get_post_mime_type() ) );		?>		</p>		<?php		$actions = array();		if ( current_user_can('edit_post', $post->ID) && !$is_trash )			$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '">' . __('Edit') . '</a>';		if ( current_user_can('delete_post', $post->ID) ) {			if ( $is_trash )				$actions['untrash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=untrash&amp;post=$post->ID", 'untrash-attachment_' . $post->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS && MEDIA_TRASH )				$actions['trash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=trash&amp;post=$post->ID", 'trash-attachment_' . $post->ID) . "'>" . __('Trash') . "</a>";			if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) {				$delete_ays = (!$is_trash && !MEDIA_TRASH) ? " onclick='return showNotice.warn();'" : '';				$actions['delete'] = "<a class='submitdelete'$delete_ays href='" . wp_nonce_url("post.php?action=delete&amp;post=$post->ID", 'delete-attachment_' . $post->ID) . "'>" . __('Delete Permanently') . "</a>";			}		}		if ( !$is_trash ) {			$title =_draft_or_post_title($post->post_parent);			$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters( 'media_row_actions', $actions, $post );		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		?></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><?php the_author() ?></td>		<?php		break;	case 'tags':		?>		<td <?php echo $attributes ?>><?php		$tags = get_the_tags();		if ( !empty( $tags ) ) {			$out = array();			foreach ( $tags as $c )				$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";			echo join( ', ', $out );		} else {			_e('No Tags');		}		?></td>		<?php		break;	case 'desc':		?>		<td <?php echo $attributes ?>><?php echo has_excerpt() ? $post->post_excerpt : ''; ?></td>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $post->post_date;			$time = get_post_time( 'G', true, $post, false );			if ( ( abs($t_diff = time() - $time) ) < 86400 ) {				if ( $t_diff < 0 )					$h_time = sprintf( __('%s from now'), human_time_diff( $time ) );				else					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			} else {				$h_time = mysql2date(__('Y/m/d'), $m_time);			}		}		?>		<td <?php echo $attributes ?>><?php echo $h_time ?></td>		<?php		break;	case 'parent':		if ( $post->post_parent > 0 ) {			if ( get_post($post->post_parent) ) {				$title =_draft_or_post_title($post->post_parent);			}			?>			<td <?php echo $attributes ?>><strong><a href="<?php echo get_edit_post_link( $post->post_parent ); ?>"><?php echo $title ?></a></strong>, <?php echo get_the_time(__('Y/m/d')); ?></td>			<?php		} else {			?>			<td <?php echo $attributes ?>><?php _e('(Unattached)'); ?><br />			<a class="hide-if-no-js" onclick="findPosts.open('media[]','<?php echo $post->ID ?>');return false;" href="#the-list"><?php _e('Attach'); ?></a></td>			<?php		}		break;	case 'comments':		$attributes = 'class="comments column-comments num"' . $style;		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $post->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'actions':		?>		<td <?php echo $attributes ?>>		<a href="media.php?action=edit&amp;attachment_id=<?php the_ID(); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php _e('Edit'); ?></a> |		<a href="<?php the_permalink(); ?>"><?php _e('Get permalink'); ?></a>		</td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_media_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?>	</tr><?php endwhile; ?>	</tbody></table><?php } else { ?><p><?php _e('No media attachments found.') ?></p><?php} // end if ( have_posts() )?>
<?php/** * WordPress SSH2 Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing SSH2. * * To use this class you must follow these steps for PHP 5.2.6+ * * @contrib http://kevin.vanzonneveld.net/techblog/article/make_ssh_connections_with_php/ - Installation Notes * * Complie libssh2 (Note: Only 0.14 is officaly working with PHP 5.2.6+ right now, But many users have found the latest versions work) * * cd /usr/src * wget http://surfnet.dl.sourceforge.net/sourceforge/libssh2/libssh2-0.14.tar.gz * tar -zxvf libssh2-0.14.tar.gz * cd libssh2-0.14/ * ./configure * make all install * * Note: Do not leave the directory yet! * * Enter: pecl install -f ssh2 * * Copy the ssh.so file it creates to your PHP Module Directory. * Open up your PHP.INI file and look for where extensions are placed. * Add in your PHP.ini file: extension=ssh2.so * * Restart Apache! * Check phpinfo() streams to confirm that: ssh2.shell, ssh2.exec, ssh2.tunnel, ssh2.scp, ssh2.sftp  exist. * * Note: as of WordPress 2.8, This utilises the PHP5+ function 'stream_get_contents' * * @since 2.7 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_SSH2 extends WP_Filesystem_Base {	var $link = false;	var $sftp_link = false;	var $keys = false;	var $errors = array();	var $options = array();	function WP_Filesystem_SSH2($opt='') {		$this->method = 'ssh2';		$this->errors = new WP_Error();		//Check if possible to use ssh2 functions.		if ( ! extension_loaded('ssh2') ) {			$this->errors->add('no_ssh2_ext', __('The ssh2 PHP extension is not available'));			return false;		}		if ( !function_exists('stream_get_contents') ) {			$this->errors->add('ssh2_php_requirement', __('The ssh2 PHP extension is available, however, we require the PHP5 function <code>stream_get_contents()</code>'));			return false;		}		// Set defaults:		if ( empty($opt['port']) )			$this->options['port'] = 22;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('SSH2 hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( !empty ($opt['public_key']) && !empty ($opt['private_key']) ) {			$this->options['public_key'] = $opt['public_key'];			$this->options['private_key'] = $opt['private_key'];			$this->options['hostkey'] = array('hostkey' => 'ssh-rsa');			$this->keys = true;		} elseif ( empty ($opt['username']) ) {			$this->errors->add('empty_username', __('SSH2 username is required'));		}		if ( !empty($opt['username']) )			$this->options['username'] = $opt['username'];		if ( empty ($opt['password']) ) {			if ( !$this->keys )	//password can be blank if we are using keys				$this->errors->add('empty_password', __('SSH2 password is required'));		} else {			$this->options['password'] = $opt['password'];		}	}	function connect() {		if ( ! $this->keys ) {			$this->link = @ssh2_connect($this->options['hostname'], $this->options['port']);		} else {			$this->link = @ssh2_connect($this->options['hostname'], $this->options['port'], $this->options['hostkey']);		}		if ( ! $this->link ) {			$this->errors->add('connect', sprintf(__('Failed to connect to SSH2 Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( !$this->keys ) {			if ( ! @ssh2_auth_password($this->link, $this->options['username'], $this->options['password']) ) {				$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));				return false;			}		} else {			if ( ! @ssh2_auth_pubkey_file($this->link, $this->options['username'], $this->options['public_key'], $this->options['private_key'], $this->options['password'] ) ) {				$this->errors->add('auth', sprintf(__('Public and Private keys incorrect for %s'), $this->options['username']));				return false;			}		}		$this->sftp_link = ssh2_sftp($this->link);		return true;	}	function run_command( $command, $returnbool = false) {		if ( ! $this->link )			return false;		if ( ! ($stream = ssh2_exec($this->link, $command)) ) {			$this->errors->add('command', sprintf(__('Unable to perform command: %s'), $command));		} else {			stream_set_blocking( $stream, true );			stream_set_timeout( $stream, FS_TIMEOUT );			$data = stream_get_contents( $stream );			fclose( $stream );			if ( $returnbool )				return ( $data === false ) ? false : '' != trim($data);			else				return $data;		}		return false;	}	function get_contents($file, $type = '', $resumepos = 0 ) {		$file = ltrim($file, '/');		return file_get_contents('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function get_contents_array($file) {		$file = ltrim($file, '/');		return file('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function put_contents($file, $contents, $mode = false ) {		$file = ltrim($file, '/');		$ret = file_put_contents('ssh2.sftp://' . $this->sftp_link . '/' . $file, $contents);		$this->chmod($file, $mode);		return false !== $ret;	}	function cwd() {		$cwd = $this->run_command('pwd');		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($dir) {		return $this->run_command('cd ' . $dir, true);	}	function chgrp($file, $group, $recursive = false ) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chgrp %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chgrp -R %o %s', $mode, escapeshellarg($file)), true);	}	function chmod($file, $mode = false, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chmod %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chmod -R %o %s', $mode, escapeshellarg($file)), true);	}	function chown($file, $owner, $recursive = false ) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chown %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chown -R %o %s', $mode, escapeshellarg($file)), true);	}	function owner($file) {		$owneruid = @fileowner('ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/'));		if ( ! $owneruid )			return false;		if ( ! function_exists('posix_getpwuid') )			return $owneruid;		$ownerarray = posix_getpwuid($owneruid);		return $ownerarray['name'];	}	function getchmod($file) {		return substr(decoct(@fileperms( 'ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/') )),3);	}	function group($file) {		$gid = @filegroup('ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/'));		if ( ! $gid )			return false;		if ( ! function_exists('posix_getgrgid') )			return $gid;		$grouparray = posix_getgrgid($gid);		return $grouparray['name'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content)			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false) {		return @ssh2_sftp_rename($this->link, $source, $destination);	}	function delete($file, $recursive = false) {		if ( $this->is_file($file) )			return ssh2_sftp_unlink($this->sftp_link, $file);		if ( ! $recursive )			 return ssh2_sftp_rmdir($this->sftp_link, $file);		$filelist = $this->dirlist($file);		if ( is_array($filelist) ) {			foreach ( $filelist as $filename => $fileinfo) {				$this->delete($file . '/' . $filename, $recursive);			}		}		return ssh2_sftp_rmdir($this->sftp_link, $file);	}	function exists($file) {		$file = ltrim($file, '/');		return file_exists('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_file($file) {		$file = ltrim($file, '/');		return is_file('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_dir($path) {		$path = ltrim($path, '/');		return is_dir('ssh2.sftp://' . $this->sftp_link . '/' . $path);	}	function is_readable($file) {		$file = ltrim($file, '/');		return is_readable('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_writable($file) {		$file = ltrim($file, '/');		return is_writable('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function atime($file) {		$file = ltrim($file, '/');		return fileatime('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function mtime($file) {		$file = ltrim($file, '/');		return filemtime('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function size($file) {		$file = ltrim($file, '/');		return filesize('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function touch($file, $time = 0, $atime = 0) {		//Not implmented.	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		$path = untrailingslashit($path);		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		if ( ! ssh2_sftp_mkdir($this->sftp_link, $path, $chmod, true) )			return false;		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function dirlist($path, $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path);		} else {			$limit_file = false;		}		if ( ! $this->is_dir($path) )			return false;		$ret = array();		$dir = @dir('ssh2.sftp://' . $this->sftp_link .'/' . ltrim($path, '/') );		if ( ! $dir )			return false;		while (false !== ($entry = $dir->read()) ) {			$struc = array();			$struc['name'] = $entry;			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue; //Do not care about these folders.			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file )				continue;			$struc['perms'] 	= $this->gethchmod($path.'/'.$entry);			$struc['permsn']	= $this->getnumchmodfromh($struc['perms']);			$struc['number'] 	= false;			$struc['owner']    	= $this->owner($path.'/'.$entry);			$struc['group']    	= $this->group($path.'/'.$entry);			$struc['size']    	= $this->size($path.'/'.$entry);			$struc['lastmodunix']= $this->mtime($path.'/'.$entry);			$struc['lastmod']   = date('M j',$struc['lastmodunix']);			$struc['time']    	= date('h:i:s',$struc['lastmodunix']);			$struc['type']		= $this->is_dir($path.'/'.$entry) ? 'd' : 'f';			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		$dir->close();		unset($dir);		return $ret;	}}
<?php/** * Simple and uniform HTTP request API. * * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * WordPress HTTP Class for managing HTTP Transports and making HTTP requests. * * This class is called for the functionality of making HTTP requests and replaces Snoopy * functionality. There is no available functionality to add HTTP transport implementations, since * most of the HTTP transports are added and available for use. * * There are no properties, because none are needed and for performance reasons. Some of the * functions are static and while they do have some overhead over functions in PHP4, the purpose is * maintainability. When PHP5 is finally the requirement, it will be easy to add the static keyword * to the code. It is not as easy to convert a function to a method after enough code uses the old * way. * * Debugging includes several actions, which pass different variables for debugging the HTTP API. * * <strong>http_transport_get_debug</strong> - gives working, nonblocking, and blocking transports. * * <strong>http_transport_post_debug</strong> - gives working, nonblocking, and blocking transports. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http {	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor	 *	 * @since 2.7.0	 * @return WP_Http	 */	function WP_Http() {		$this->__construct();	}	/**	 * PHP5 style Constructor - Set up available transport if not available.	 *	 * PHP4 does not have the 'self' keyword and since WordPress supports PHP4, the class needs to	 * be used for the static call. The transport are set up to save time and will only be created	 * once. This class can be created many times without having to go through the step of finding	 * which transports are available.	 *	 * @since 2.7.0	 * @return WP_Http	 */	function __construct() {		WP_Http::_getTransport();		WP_Http::_postTransport();	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches that object to be	 * used later.	 *	 * The order for the GET/HEAD requests are HTTP Extension, cURL, Streams, Fopen, and finally	 * Fsockopen. fsockopen() is used last, because it has the most overhead in its implementation.	 * There isn't any real way around it, since redirects have to be supported, much the same way	 * the other transports also handle redirects.	 *	 * There are currently issues with "localhost" not resolving correctly with DNS. This may cause	 * an error "failed to open stream: A connection attempt failed because the connected party did	 * not properly respond after a period of time, or established connection failed because [the]	 * connected host has failed to respond."	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_getTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fopen::test($args) ) {				$working_transport['fopen'] = new WP_Http_Fopen();				$blocking_transport[] = &$working_transport['fopen'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fopen', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_get_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches	 * that object to be used later. This is for posting content to a URL and	 * is used when there is a body. The plain Fopen Transport can not be used	 * to send content, but the streams transport can. This is a limitation that	 * is addressed here, by just not including that transport.	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_postTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_post_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Send a HTTP request to a URI.	 *	 * The body and headers are part of the arguments. The 'body' argument is for the body and will	 * accept either a string or an array. The 'headers' argument should be an array, but a string	 * is acceptable. If the 'body' argument is an array, then it will automatically be escaped	 * using http_build_query().	 *	 * The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS	 * protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send	 * headers. Other protocols are unsupported and most likely will fail.	 *	 * The defaults are 'method', 'timeout', 'redirection', 'httpversion', 'blocking' and	 * 'user-agent'.	 *	 * Accepted 'method' values are 'GET', 'POST', and 'HEAD', some transports technically allow	 * others, but should not be assumed. The 'timeout' is used to sent how long the connection	 * should stay open before failing when no response. 'redirection' is used to track how many	 * redirects were taken and used to sent the amount for other transports, but not all transports	 * accept setting that value.	 *	 * The 'httpversion' option is used to sent the HTTP version and accepted values are '1.0', and	 * '1.1' and should be a string. Version 1.1 is not supported, because of chunk response. The	 * 'user-agent' option is the user-agent and is used to replace the default user-agent, which is	 * 'WordPress/WP_Version', where WP_Version is the value from $wp_version.	 *	 * 'blocking' is the default, which is used to tell the transport, whether it should halt PHP	 * while it performs the request or continue regardless. Actually, that isn't entirely correct.	 * Blocking mode really just means whether the fread should just pull what it can whenever it	 * gets bytes or if it should wait until it has enough in the buffer to read or finishes reading	 * the entire content. It doesn't actually always mean that PHP will continue going after making	 * the request.	 *	 * @access public	 * @since 2.7.0	 * @todo Refactor this code. The code in this method extends the scope of its original purpose	 *		and should be refactored to allow for cleaner abstraction and reduce duplication of the	 *		code. One suggestion is to create a class specifically for the arguments, however	 *		preliminary refactoring to this affect has affect more than just the scope of the	 *		arguments. Something to ponder at least.	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array containing 'headers', 'body', 'response', 'cookies'	 */	function request( $url, $args = array() ) {		global $wp_version;		$defaults = array(			'method' => 'GET',			'timeout' => apply_filters( 'http_request_timeout', 5),			'redirection' => apply_filters( 'http_request_redirection_count', 5),			'httpversion' => apply_filters( 'http_request_version', '1.0'),			'user-agent' => apply_filters( 'http_headers_useragent', 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )  ),			'blocking' => true,			'headers' => array(),			'cookies' => array(),			'body' => null,			'compress' => false,			'decompress' => true,			'sslverify' => true		);		$r = wp_parse_args( $args, $defaults );		$r = apply_filters( 'http_request_args', $r, $url );		// Allow plugins to short-circuit the request		$pre = apply_filters( 'pre_http_request', false, $r, $url );		if ( false !== $pre )			return $pre;		$arrURL = parse_url($url);		if ( empty( $url ) || empty($url['scheme'] ) )			return new WP_Error('http_request_failed', __('A valid URL was not provided.'));		if ( $this->block_request( $url ) )			return new WP_Error('http_request_failed', __('User has blocked requests through HTTP.'));		// Determine if this is a https call and pass that on to the transport functions		// so that we can blacklist the transports that do not support ssl verification		$r['ssl'] = $arrURL['scheme'] == 'https' || $arrURL['scheme'] == 'ssl';		// Determine if this request is to OUR install of WordPress		$homeURL = parse_url( get_bloginfo('url') );		$r['local'] = $homeURL['host'] == $arrURL['host'] || 'localhost' == $arrURL['host'];		unset($homeURL);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( ! is_array($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		}		if ( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		if ( WP_Http_Encoding::is_available() )			$r['headers']['Accept-Encoding'] = WP_Http_Encoding::accept_encoding();		if ( empty($r['body']) ) {			// Some servers fail when sending content without the content-length header being set.			// Also, to fix another bug, we only send when doing POST and PUT and the content-length			// header isn't already set.			if( ($r['method'] == 'POST' || $r['method'] == 'PUT') && ! isset($r['headers']['Content-Length']) )				$r['headers']['Content-Length'] = 0;			// The method is ambiguous, because we aren't talking about HTTP methods, the "get" in			// this case is simply that we aren't sending any bodies and to get the transports that			// don't support sending bodies along with those which do.			$transports = WP_Http::_getTransport($r);		} else {			if ( is_array( $r['body'] ) || is_object( $r['body'] ) ) {				if ( ! version_compare(phpversion(), '5.1.2', '>=') )					$r['body'] = _http_build_query($r['body'], null, '&');				else					$r['body'] = http_build_query($r['body'], null, '&');				$r['headers']['Content-Type'] = 'application/x-www-form-urlencoded; charset=' . get_option('blog_charset');				$r['headers']['Content-Length'] = strlen($r['body']);			}			if ( ! isset( $r['headers']['Content-Length'] ) && ! isset( $r['headers']['content-length'] ) )				$r['headers']['Content-Length'] = strlen($r['body']);			// The method is ambiguous, because we aren't talking about HTTP methods, the "post" in			// this case is simply that we are sending HTTP body and to get the transports that do			// support sending the body. Not all do, depending on the limitations of the PHP core			// limitations.			$transports = WP_Http::_postTransport($r);		}		do_action( 'http_api_debug', $transports, 'transports_list' );		$response = array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		foreach ( (array) $transports as $transport ) {			$response = $transport->request($url, $r);			do_action( 'http_api_debug', $response, 'response', get_class($transport) );			if ( ! is_wp_error($response) )				return apply_filters( 'http_response', $response, $r, $url );		}		return $response;	}	/**	 * Uses the POST HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function post($url, $args = array()) {		$defaults = array('method' => 'POST');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the GET HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function get($url, $args = array()) {		$defaults = array('method' => 'GET');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the HEAD HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function head($url, $args = array()) {		$defaults = array('method' => 'HEAD');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Parses the responses and splits the parts into headers and body.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string $strResponse The full response string	 * @return array Array with 'headers' and 'body' keys.	 */	function processResponse($strResponse) {		$res = explode("\r\n\r\n", $strResponse, 2);		return array('headers' => isset($res[0]) ? $res[0] : array(), 'body' => isset($res[1]) ? $res[1] : '');	}	/**	 * Transform header string into an array.	 *	 * If an array is given then it is assumed to be raw header data with numeric keys with the	 * headers as the values. No headers must be passed that were already processed.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string|array $headers	 * @return array Processed string headers. If duplicate headers are encountered,	 * 					Then a numbered array is returned as the value of that header-key.	 */	function processHeaders($headers) {		// split headers, one per array element		if ( is_string($headers) ) {			// tolerate line terminator: CRLF = LF (RFC 2616 19.3)			$headers = str_replace("\r\n", "\n", $headers);			// unfold folded header fields. LWS = [CRLF] 1*( SP | HT ) <US-ASCII SP, space (32)>, <US-ASCII HT, horizontal-tab (9)> (RFC 2616 2.2)			$headers = preg_replace('/\n[ \t]/', ' ', $headers);			// create the headers array			$headers = explode("\n", $headers);		}		$response = array('code' => 0, 'message' => '');		// If a redirection has taken place, The headers for each page request may have been passed.		// In this case, determine the final HTTP header and parse from there.		for ( $i = count($headers)-1; $i >= 0; $i-- ) {			if ( !empty($headers[$i]) && false === strpos($headers[$i], ':') ) {				$headers = array_splice($headers, $i);				break;			}		}		$cookies = array();		$newheaders = array();		foreach ( $headers as $tempheader ) {			if ( empty($tempheader) )				continue;			if ( false === strpos($tempheader, ':') ) {				list( , $response['code'], $response['message']) = explode(' ', $tempheader, 3);				continue;			}			list($key, $value) = explode(':', $tempheader, 2);			if ( !empty( $value ) ) {				$key = strtolower( $key );				if ( isset( $newheaders[$key] ) ) {					if ( !is_array($newheaders[$key]) )						$newheaders[$key] = array($newheaders[$key]);					$newheaders[$key][] = trim( $value );				} else {					$newheaders[$key] = trim( $value );				}				if ( 'set-cookie' == strtolower( $key ) )					$cookies[] = new WP_Http_Cookie( $value );			}		}		return array('response' => $response, 'headers' => $newheaders, 'cookies' => $cookies);	}	/**	 * Takes the arguments for a ::request() and checks for the cookie array.	 *	 * If it's found, then it's assumed to contain WP_Http_Cookie objects, which are each parsed	 * into strings and added to the Cookie: header (within the arguments array). Edits the array by	 * reference.	 *	 * @access public	 * @version 2.8.0	 * @static	 *	 * @param array $r Full array of args passed into ::request()	 */	function buildCookieHeader( &$r ) {		if ( ! empty($r['cookies']) ) {			$cookies_header = '';			foreach ( (array) $r['cookies'] as $cookie ) {				$cookies_header .= $cookie->getHeaderValue() . '; ';			}			$cookies_header = substr( $cookies_header, 0, -2 );			$r['headers']['cookie'] = $cookies_header;		}	}	/**	 * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.	 *	 * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support	 * returning footer headers. Shouldn't be too difficult to support it though.	 *	 * @todo Add support for footer chunked headers.	 * @access public	 * @since 2.7.0	 * @static	 *	 * @param string $body Body content	 * @return string Chunked decoded body on success or raw body on failure.	 */	function chunkTransferDecode($body) {		$body = str_replace(array("\r\n", "\r"), "\n", $body);		// The body is not chunked encoding or is malformed.		if ( ! preg_match( '/^[0-9a-f]+(\s|\n)+/mi', trim($body) ) )			return $body;		$parsedBody = '';		//$parsedHeaders = array(); Unsupported		while ( true ) {			$hasChunk = (bool) preg_match( '/^([0-9a-f]+)(\s|\n)+/mi', $body, $match );			if ( $hasChunk ) {				if ( empty( $match[1] ) )					return $body;				$length = hexdec( $match[1] );				$chunkLength = strlen( $match[0] );				$strBody = substr($body, $chunkLength, $length);				$parsedBody .= $strBody;				$body = ltrim(str_replace(array($match[0], $strBody), '', $body), "\n");				if ( "0" == trim($body) )					return $parsedBody; // Ignore footer headers.			} else {				return $body;			}		}	}	/**	 * Block requests through the proxy.	 *	 * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will	 * prevent plugins from working and core functionality, if you don't include api.wordpress.org.	 *	 * You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php	 * file and this will only allow localhost and your blog to make requests. The constant	 * WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the	 * WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow.	 *	 * @since 2.8.0	 * @link http://core.trac.wordpress.org/ticket/8927 Allow preventing external requests.	 *	 * @param string $uri URI of url.	 * @return bool True to block, false to allow.	 */	function block_request($uri) {		// We don't need to block requests, because nothing is blocked.		if ( ! defined( 'WP_HTTP_BLOCK_EXTERNAL' ) || ! WP_HTTP_BLOCK_EXTERNAL )			return false;		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		/* Malformed URL, can not process, but this could mean ssl, so let through anyway.		 *		 * This isn't very security sound. There are instances where a hacker might attempt		 * to bypass the proxy and this check. However, the reason for this behavior is that		 * WordPress does not do any checking currently for non-proxy requests, so it is keeps with		 * the default unsecure nature of the HTTP request.		 */		if ( $check === false )			return false;		$home = parse_url( get_option('siteurl') );		// Don't block requests back to ourselves by default		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return apply_filters('block_local_requests', false);		if ( !defined('WP_ACCESSIBLE_HOSTS') )			return true;		static $accessible_hosts;		if ( null == $accessible_hosts )			$accessible_hosts = preg_split('|,\s*|', WP_ACCESSIBLE_HOSTS);		return !in_array( $check['host'], $accessible_hosts ); //Inverse logic, If its in the array, then we can't access it.	}}/** * HTTP request method uses fsockopen function to retrieve the url. * * This would be the preferred method, but the fsockopen implementation has the most overhead of all * the HTTP transport implementations. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fsockopen {	/**	 * Send a HTTP request to a URI using fsockopen().	 *	 * Does not support non-blocking mode.	 *	 * @see WP_Http::request For default options descriptions.	 *	 * @since 2.7	 * @access public	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$iError = null; // Store error number		$strError = null; // Store error string		$arrURL = parse_url($url);		$fsockopen_host = $arrURL['host'];		$secure_transport = false;		if ( ! isset( $arrURL['port'] ) ) {			if ( ( $arrURL['scheme'] == 'ssl' || $arrURL['scheme'] == 'https' ) && extension_loaded('openssl') ) {				$fsockopen_host = "ssl://$fsockopen_host";				$arrURL['port'] = 443;				$secure_transport = true;			} else {				$arrURL['port'] = 80;			}		}		//fsockopen has issues with 'localhost' with IPv6 with certain versions of PHP, It attempts to connect to ::1,		// which fails when the server is not set up for it. For compatibility, always connect to the IPv4 address.		if ( 'localhost' == strtolower($fsockopen_host) )			$fsockopen_host = '127.0.0.1';		// There are issues with the HTTPS and SSL protocols that cause errors that can be safely		// ignored and should be ignored.		if ( true === $secure_transport )			$error_reporting = error_reporting(0);		$startDelay = time();		$proxy = new WP_HTTP_Proxy();		if ( !WP_DEBUG ) {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = @fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = @fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		} else {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		}		$endDelay = time();		// If the delay is greater than the timeout then fsockopen should't be used, because it will		// cause a long delay.		$elapseDelay = ($endDelay-$startDelay) > $r['timeout'];		if ( true === $elapseDelay )			add_option( 'disable_fsockopen', $endDelay, null, true );		if ( false === $handle )			return new WP_Error('http_request_failed', $iError . ': ' . $strError);		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) //Some proxies require full URL in this field.			$requestPath = $url;		else			$requestPath = $arrURL['path'] . ( isset($arrURL['query']) ? '?' . $arrURL['query'] : '' );		if ( empty($requestPath) )			$requestPath .= '/';		$strHeaders = strtoupper($r['method']) . ' ' . $requestPath . ' HTTP/' . $r['httpversion'] . "\r\n";		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )			$strHeaders .= 'Host: ' . $arrURL['host'] . ':' . $arrURL['port'] . "\r\n";		else			$strHeaders .= 'Host: ' . $arrURL['host'] . "\r\n";		if ( isset($r['user-agent']) )			$strHeaders .= 'User-agent: ' . $r['user-agent'] . "\r\n";		if ( is_array($r['headers']) ) {			foreach ( (array) $r['headers'] as $header => $headerValue )				$strHeaders .= $header . ': ' . $headerValue . "\r\n";		} else {			$strHeaders .= $r['headers'];		}		if ( $proxy->use_authentication() )			$strHeaders .= $proxy->authentication_header() . "\r\n";		$strHeaders .= "\r\n";		if ( ! is_null($r['body']) )			$strHeaders .= $r['body'];		fwrite($handle, $strHeaders);		if ( ! $r['blocking'] ) {			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		fclose($handle);		if ( true === $secure_transport )			error_reporting($error_reporting);		$process = WP_Http::processResponse($strResponse);		$arrHeaders = WP_Http::processHeaders($process['headers']);		// Is the response code within the 400 range?		if ( (int) $arrHeaders['response']['code'] >= 400 && (int) $arrHeaders['response']['code'] < 500 )			return new WP_Error('http_request_failed', $arrHeaders['response']['code'] . ': ' . $arrHeaders['response']['message']);		// If location is found, then assume redirect and redirect to location.		if ( 'HEAD' != $r['method'] && isset($arrHeaders['headers']['location']) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($arrHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		// If the body was chunk encoded, then decode it.		if ( ! empty( $process['body'] ) && isset( $arrHeaders['headers']['transfer-encoding'] ) && 'chunked' == $arrHeaders['headers']['transfer-encoding'] )			$process['body'] = WP_Http::chunkTransferDecode($process['body']);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($arrHeaders['headers']) )			$process['body'] = WP_Http_Encoding::decompress( $process['body'] );		return array('headers' => $arrHeaders['headers'], 'body' => $process['body'], 'response' => $arrHeaders['response'], 'cookies' => $arrHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test( $args = array() ) {		if ( false !== ($option = get_option( 'disable_fsockopen' )) && time()-$option < 43200 ) // 12 hours			return false;		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( ! $is_ssl && function_exists( 'fsockopen' ) )			$use = true;		elseif ( $is_ssl && extension_loaded('openssl') && function_exists( 'fsockopen' ) )			$use = true;		else			$use = false;		return apply_filters('use_fsockopen_transport', $use, $args);	}}/** * HTTP request method uses fopen function to retrieve the url. * * Requires PHP version greater than 4.3.0 for stream support. Does not allow for $context support, * but should still be okay, to write the headers, before getting the response. Also requires that * 'allow_url_fopen' to be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fopen {	/**	 * Send a HTTP request to a URI using fopen().	 *	 * This transport does not support sending of headers and body, therefore should not be used in	 * the instances, where there is a body and headers.	 *	 * Notes: Does not support non-blocking mode. Ignores 'redirection' option.	 *	 * @see WP_Http::retrieve For default options descriptions.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = str_replace($arrURL['scheme'], 'http', $url);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( is_string($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		$initial_user_agent = ini_get('user_agent');		if ( !empty($r['headers']) && is_array($r['headers']) ) {			$user_agent_extra_headers = '';			foreach ( $r['headers'] as $header => $value )				$user_agent_extra_headers .= "\r\n$header: $value";			@ini_set('user_agent', $r['user-agent'] . $user_agent_extra_headers);		} else {			@ini_set('user_agent', $r['user-agent']);		}		if ( !WP_DEBUG )			$handle = @fopen($url, 'r');		else			$handle = fopen($url, 'r');		if (! $handle)			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			fclose($handle);			@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		if ( function_exists('stream_get_meta_data') ) {			$meta = stream_get_meta_data($handle);			$theHeaders = $meta['wrapper_data'];			if ( isset( $meta['wrapper_data']['headers'] ) )				$theHeaders = $meta['wrapper_data']['headers'];		} else {			//$http_response_header is a PHP reserved variable which is set in the current-scope when using the HTTP Wrapper			//see http://php.oregonstate.edu/manual/en/reserved.variables.httpresponseheader.php			$theHeaders = $http_response_header;		}		fclose($handle);		@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added		$processedHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( isset($args['method']) && 'HEAD' == $args['method'] ) //This transport cannot make a HEAD request			return false;		$use = true;		//PHP does not verify SSL certs, We can only make a request via this transports if SSL Verification is turned off.		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl ) {			$is_local = isset($args['local']) && $args['local'];			$ssl_verify = isset($args['sslverify']) && $args['sslverify'];			if ( $is_local && true != apply_filters('https_local_ssl_verify', true) )				$use = true;			elseif ( !$is_local && true != apply_filters('https_ssl_verify', true) )				$use = true;			elseif ( !$ssl_verify )				$use = true;			else				$use = false;		}		return apply_filters('use_fopen_transport', $use, $args);	}}/** * HTTP request method uses Streams to retrieve the url. * * Requires PHP 5.0+ and uses fopen with stream context. Requires that 'allow_url_fopen' PHP setting * to be enabled. * * Second preferred method for getting the URL, for PHP 5. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Streams {	/**	 * Send a HTTP request to a URI using streams with fopen().	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		// Convert Header array to string.		$strHeaders = '';		if ( is_array( $r['headers'] ) )			foreach ( $r['headers'] as $name => $value )				$strHeaders .= "{$name}: $value\r\n";		else if ( is_string( $r['headers'] ) )			$strHeaders = $r['headers'];		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$arrContext = array('http' =>			array(				'method' => strtoupper($r['method']),				'user_agent' => $r['user-agent'],				'max_redirects' => $r['redirection'] + 1, // See #11557				'protocol_version' => (float) $r['httpversion'],				'header' => $strHeaders,				'ignore_errors' => true, // Return non-200 requests.				'timeout' => $r['timeout'],				'ssl' => array(						'verify_peer' => $ssl_verify,						'verify_host' => $ssl_verify				)			)		);		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$arrContext['http']['proxy'] = 'tcp://' . $proxy->host() . ':' . $proxy->port();			$arrContext['http']['request_fulluri'] = true;			// We only support Basic authentication so this will only work if that is what your proxy supports.			if ( $proxy->use_authentication() )				$arrContext['http']['header'] .= $proxy->authentication_header() . "\r\n";		}		if ( 'HEAD' == $r['method'] ) // Disable redirects for HEAD requests			$arrContext['http']['max_redirects'] = 1;		if ( ! empty($r['body'] ) )			$arrContext['http']['content'] = $r['body'];		$context = stream_context_create($arrContext);		if ( !WP_DEBUG )			$handle = @fopen($url, 'r', false, $context);		else			$handle = fopen($url, 'r', false, $context);		if ( ! $handle )			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			stream_set_blocking($handle, 0);			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = stream_get_contents($handle);		$meta = stream_get_meta_data($handle);		fclose($handle);		$processedHeaders = array();		if ( isset( $meta['wrapper_data']['headers'] ) )			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']['headers']);		else			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @access public	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( version_compare(PHP_VERSION, '5.0', '<') )			return false;		//HTTPS via Proxy was added in 5.1.0		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl && version_compare(PHP_VERSION, '5.1.0', '<') ) {			$proxy = new WP_HTTP_Proxy();			/**			 * No URL check, as its not currently passed to the ::test() function			 * In the case where a Proxy is in use, Just bypass this transport for HTTPS.			 */			if ( $proxy->is_enabled() )				return false;		}		return apply_filters('use_streams_transport', true, $args);	}}/** * HTTP request method uses HTTP extension to retrieve the url. * * Requires the HTTP extension to be installed. This would be the preferred transport since it can * handle a lot of the problems that forces the others to use the HTTP version 1.0. Even if PHP 5.2+ * is being used, it doesn't mean that the HTTP extension will be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_ExtHTTP {	/**	 * Send a HTTP request to a URI using HTTP extension.	 *	 * Does not support non-blocking.	 *	 * @access public	 * @since 2.7	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		switch ( $r['method'] ) {			case 'POST':				$r['method'] = HTTP_METH_POST;				break;			case 'HEAD':				$r['method'] = HTTP_METH_HEAD;				break;			case 'PUT':				$r['method'] =  HTTP_METH_PUT;				break;			case 'GET':			default:				$r['method'] = HTTP_METH_GET;		}		$arrURL = parse_url($url);		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$r['timeout'] = (int) ceil( $r['timeout'] );		$options = array(			'timeout' => $r['timeout'],			'connecttimeout' => $r['timeout'],			'redirect' => $r['redirection'],			'useragent' => $r['user-agent'],			'headers' => $r['headers'],			'ssl' => array(				'verifypeer' => $ssl_verify,				'verifyhost' => $ssl_verify			)		);		if ( HTTP_METH_HEAD == $r['method'] )			$options['redirect'] = 0; // Assumption: Docs seem to suggest that this means do not follow. Untested.		// The HTTP extensions offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$options['proxyhost'] = $proxy->host();			$options['proxyport'] = $proxy->port();			$options['proxytype'] = HTTP_PROXY_HTTP;			if ( $proxy->use_authentication() ) {				$options['proxyauth'] = $proxy->authentication();				$options['proxyauthtype'] = HTTP_AUTH_ANY;			}		}		if ( !WP_DEBUG ) //Emits warning level notices for max redirects and timeouts			$strResponse = @http_request($r['method'], $url, $r['body'], $options, $info);		else			$strResponse = http_request($r['method'], $url, $r['body'], $options, $info); //Emits warning level notices for max redirects and timeouts		// Error may still be set, Response may return headers or partial document, and error		// contains a reason the request was aborted, eg, timeout expired or max-redirects reached.		if ( false === $strResponse || ! empty($info['error']) )			return new WP_Error('http_request_failed', $info['response_code'] . ': ' . $info['error']);		if ( ! $r['blocking'] )			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		$headers_body = WP_HTTP::processResponse($strResponse);		$theHeaders = $headers_body['headers'];		$theBody = $headers_body['body'];		unset($headers_body);		$theHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $theBody ) && isset( $theHeaders['headers']['transfer-encoding'] ) && 'chunked' == $theHeaders['headers']['transfer-encoding'] ) {			if ( !WP_DEBUG )				$theBody = @http_chunked_decode($theBody);			else				$theBody = http_chunked_decode($theBody);		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = http_inflate( $theBody );		$theResponse = array();		$theResponse['code'] = $info['response_code'];		$theResponse['message'] = get_status_header_desc($info['response_code']);		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $theResponse, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		return apply_filters('use_http_extension_transport', function_exists('http_request'), $args );	}}/** * HTTP request method uses Curl extension to retrieve the url. * * Requires the Curl extension to be installed. * * @package WordPress * @subpackage HTTP * @since 2.7 */class WP_Http_Curl {	/**	 * Send a HTTP request to a URI using cURL extension.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set.		WP_Http::buildCookieHeader( $r );		$handle = curl_init();		// cURL offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$isPHP5 = version_compare(PHP_VERSION, '5.0.0', '>=');			if ( $isPHP5 ) {				curl_setopt( $handle, CURLOPT_PROXYTYPE, CURLPROXY_HTTP );				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() );				curl_setopt( $handle, CURLOPT_PROXYPORT, $proxy->port() );			} else {				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() .':'. $proxy->port() );			}			if ( $proxy->use_authentication() ) {				if ( $isPHP5 )					curl_setopt( $handle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );				curl_setopt( $handle, CURLOPT_PROXYUSERPWD, $proxy->authentication() );			}		}		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		// CURLOPT_TIMEOUT and CURLOPT_CONNECTTIMEOUT expect integers.  Have to use ceil since		// a value of 0 will allow an ulimited timeout.		$timeout = (int) ceil( $r['timeout'] );		curl_setopt( $handle, CURLOPT_CONNECTTIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_TIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_URL, $url);		curl_setopt( $handle, CURLOPT_RETURNTRANSFER, true );		curl_setopt( $handle, CURLOPT_SSL_VERIFYHOST, $ssl_verify );		curl_setopt( $handle, CURLOPT_SSL_VERIFYPEER, $ssl_verify );		curl_setopt( $handle, CURLOPT_USERAGENT, $r['user-agent'] );		curl_setopt( $handle, CURLOPT_MAXREDIRS, $r['redirection'] );		switch ( $r['method'] ) {			case 'HEAD':				curl_setopt( $handle, CURLOPT_NOBODY, true );				break;			case 'POST':				curl_setopt( $handle, CURLOPT_POST, true );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;			case 'PUT':				curl_setopt( $handle, CURLOPT_CUSTOMREQUEST, 'PUT' );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;		}		if ( true === $r['blocking'] )			curl_setopt( $handle, CURLOPT_HEADER, true );		else			curl_setopt( $handle, CURLOPT_HEADER, false );		// The option doesn't work with safe mode or when open_basedir is set.		// Disable HEAD when making HEAD requests.		if ( !ini_get('safe_mode') && !ini_get('open_basedir') && 'HEAD' != $r['method'] )			curl_setopt( $handle, CURLOPT_FOLLOWLOCATION, true );		if ( !empty( $r['headers'] ) ) {			// cURL expects full header strings in each element			$headers = array();			foreach ( $r['headers'] as $name => $value ) {				$headers[] = "{$name}: $value";			}			curl_setopt( $handle, CURLOPT_HTTPHEADER, $headers );		}		if ( $r['httpversion'] == '1.0' )			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0 );		else			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1 );		// Cookies are not handled by the HTTP API currently. Allow for plugin authors to handle it		// themselves... Although, it is somewhat pointless without some reference.		do_action_ref_array( 'http_api_curl', array(&$handle) );		// We don't need to return the body, so don't. Just execute request and return.		if ( ! $r['blocking'] ) {			curl_exec( $handle );			curl_close( $handle );			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$theResponse = curl_exec( $handle );		if ( !empty($theResponse) ) {			$headerLength = curl_getinfo($handle, CURLINFO_HEADER_SIZE);			$theHeaders = trim( substr($theResponse, 0, $headerLength) );			if ( strlen($theResponse) > $headerLength )				$theBody = substr( $theResponse, $headerLength );			else				$theBody = '';			if ( false !== strrpos($theHeaders, "\r\n\r\n") ) {				$headerParts = explode("\r\n\r\n", $theHeaders);				$theHeaders = $headerParts[ count($headerParts) -1 ];			}			$theHeaders = WP_Http::processHeaders($theHeaders);		} else {			if ( $curl_error = curl_error($handle) )				return new WP_Error('http_request_failed', $curl_error);			if ( in_array( curl_getinfo( $handle, CURLINFO_HTTP_CODE ), array(301, 302) ) )				return new WP_Error('http_request_failed', __('Too many redirects.'));			$theHeaders = array( 'headers' => array(), 'cookies' => array() );			$theBody = '';		}		$response = array();		$response['code'] = curl_getinfo( $handle, CURLINFO_HTTP_CODE );		$response['message'] = get_status_header_desc($response['code']);		curl_close( $handle );		// See #11305 - When running under safe mode, redirection is disabled above. Handle it manually.		if ( !empty($theHeaders['headers']['location']) && (ini_get('safe_mode') || ini_get('open_basedir')) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($theHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = WP_Http_Encoding::decompress( $theBody );		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $response, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( function_exists('curl_init') && function_exists('curl_exec') )			return apply_filters('use_curl_transport', true, $args);		return false;	}}/** * Adds Proxy support to the WordPress HTTP API. * * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to * enable proxy support. There are also a few filters that plugins can hook into for some of the * constants. * * Please note that only BASIC authentication is supported by most transports. * cURL and the PHP HTTP Extension MAY support more methods (such as NTLM authentication) depending on your environment. * * The constants are as follows: * <ol> * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li> * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li> * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li> * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li> * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy. * You do not need to have localhost and the blog host in this list, because they will not be passed * through the proxy. The list should be presented in a comma separated list</li> * </ol> * * An example can be as seen below. * <code> * define('WP_PROXY_HOST', '192.168.84.101'); * define('WP_PROXY_PORT', '8080'); * define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com'); * </code> * * @link http://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress. * @since 2.8 */class WP_HTTP_Proxy {	/**	 * Whether proxy connection should be used.	 *	 * @since 2.8	 * @use WP_PROXY_HOST	 * @use WP_PROXY_PORT	 *	 * @return bool	 */	function is_enabled() {		return defined('WP_PROXY_HOST') && defined('WP_PROXY_PORT');	}	/**	 * Whether authentication should be used.	 *	 * @since 2.8	 * @use WP_PROXY_USERNAME	 * @use WP_PROXY_PASSWORD	 *	 * @return bool	 */	function use_authentication() {		return defined('WP_PROXY_USERNAME') && defined('WP_PROXY_PASSWORD');	}	/**	 * Retrieve the host for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function host() {		if ( defined('WP_PROXY_HOST') )			return WP_PROXY_HOST;		return '';	}	/**	 * Retrieve the port for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function port() {		if ( defined('WP_PROXY_PORT') )			return WP_PROXY_PORT;		return '';	}	/**	 * Retrieve the username for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function username() {		if ( defined('WP_PROXY_USERNAME') )			return WP_PROXY_USERNAME;		return '';	}	/**	 * Retrieve the password for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function password() {		if ( defined('WP_PROXY_PASSWORD') )			return WP_PROXY_PASSWORD;		return '';	}	/**	 * Retrieve authentication string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication() {		return $this->username() . ':' . $this->password();	}	/**	 * Retrieve header string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication_header() {		return 'Proxy-Authorization: Basic ' . base64_encode( $this->authentication() );	}	/**	 * Whether URL should be sent through the proxy server.	 *	 * We want to keep localhost and the blog URL from being sent through the proxy server, because	 * some proxies can not handle this. We also have the constant available for defining other	 * hosts that won't be sent through the proxy.	 *	 * @uses WP_PROXY_BYPASS_HOSTS	 * @since unknown	 *	 * @param string $uri URI to check.	 * @return bool True, to send through the proxy and false if, the proxy should not be used.	 */	function send_through_proxy( $uri ) {		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		// Malformed URL, can not process, but this could mean ssl, so let through anyway.		if ( $check === false )			return true;		$home = parse_url( get_option('siteurl') );		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return false;		if ( !defined('WP_PROXY_BYPASS_HOSTS') )			return true;		static $bypass_hosts;		if ( null == $bypass_hosts )			$bypass_hosts = preg_split('|,\s*|', WP_PROXY_BYPASS_HOSTS);		return !in_array( $check['host'], $bypass_hosts );	}}/** * Internal representation of a single cookie. * * Returned cookies are represented using this class, and when cookies are set, if they are not * already a WP_Http_Cookie() object, then they are turned into one. * * @todo The WordPress convention is to use underscores instead of camelCase for function and method * names. Need to switch to use underscores instead for the methods. * * @package WordPress * @subpackage HTTP * @since 2.8.0 */class WP_Http_Cookie {	/**	 * Cookie name.	 *	 * @since 2.8.0	 * @var string	 */	var $name;	/**	 * Cookie value.	 *	 * @since 2.8.0	 * @var string	 */	var $value;	/**	 * When the cookie expires.	 *	 * @since 2.8.0	 * @var string	 */	var $expires;	/**	 * Cookie URL path.	 *	 * @since 2.8.0	 * @var string	 */	var $path;	/**	 * Cookie Domain.	 *	 * @since 2.8.0	 * @var string	 */	var $domain;	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor.	 *	 * @access public	 * @since 2.8.0	 * @param string|array $data Raw cookie data.	 */	function WP_Http_Cookie( $data ) {		$this->__construct( $data );	}	/**	 * Sets up this cookie object.	 *	 * The parameter $data should be either an associative array containing the indices names below	 * or a header string detailing it.	 *	 * If it's an array, it should include the following elements:	 * <ol>	 * <li>Name</li>	 * <li>Value - should NOT be urlencoded already.</li>	 * <li>Expires - (optional) String or int (UNIX timestamp).</li>	 * <li>Path (optional)</li>	 * <li>Domain (optional)</li>	 * </ol>	 *	 * @access public	 * @since 2.8.0	 *	 * @param string|array $data Raw cookie data.	 */	function __construct( $data ) {		if ( is_string( $data ) ) {			// Assume it's a header string direct from a previous request			$pairs = explode( ';', $data );			// Special handling for first pair; name=value. Also be careful of "=" in value			$name  = trim( substr( $pairs[0], 0, strpos( $pairs[0], '=' ) ) );			$value = substr( $pairs[0], strpos( $pairs[0], '=' ) + 1 );			$this->name  = $name;			$this->value = urldecode( $value );			array_shift( $pairs ); //Removes name=value from items.			// Set everything else as a property			foreach ( $pairs as $pair ) {				$pair = rtrim($pair);				if ( empty($pair) ) //Handles the cookie ending in ; which results in a empty final pair					continue;				list( $key, $val ) = strpos( $pair, '=' ) ? explode( '=', $pair ) : array( $pair, '' );				$key = strtolower( trim( $key ) );				if ( 'expires' == $key )					$val = strtotime( $val );				$this->$key = $val;			}		} else {			if ( !isset( $data['name'] ) )				return false;			// Set properties based directly on parameters			$this->name   = $data['name'];			$this->value  = isset( $data['value'] ) ? $data['value'] : '';			$this->path   = isset( $data['path'] ) ? $data['path'] : '';			$this->domain = isset( $data['domain'] ) ? $data['domain'] : '';			if ( isset( $data['expires'] ) )				$this->expires = is_int( $data['expires'] ) ? $data['expires'] : strtotime( $data['expires'] );			else				$this->expires = null;		}	}	/**	 * Confirms that it's OK to send this cookie to the URL checked against.	 *	 * Decision is based on RFC 2109/2965, so look there for details on validity.	 *	 * @access public	 * @since 2.8.0	 *	 * @param string $url URL you intend to send this cookie to	 * @return boolean TRUE if allowed, FALSE otherwise.	 */	function test( $url ) {		// Expires - if expired then nothing else matters		if ( time() > $this->expires )			return false;		// Get details on the URL we're thinking about sending to		$url = parse_url( $url );		$url['port'] = isset( $url['port'] ) ? $url['port'] : 80;		$url['path'] = isset( $url['path'] ) ? $url['path'] : '/';		// Values to use for comparison against the URL		$path   = isset( $this->path )   ? $this->path   : '/';		$port   = isset( $this->port )   ? $this->port   : 80;		$domain = isset( $this->domain ) ? strtolower( $this->domain ) : strtolower( $url['host'] );		if ( false === stripos( $domain, '.' ) )			$domain .= '.local';		// Host - very basic check that the request URL ends with the domain restriction (minus leading dot)		$domain = substr( $domain, 0, 1 ) == '.' ? substr( $domain, 1 ) : $domain;		if ( substr( $url['host'], -strlen( $domain ) ) != $domain )			return false;		// Port - supports "port-lists" in the format: "80,8000,8080"		if ( !in_array( $url['port'], explode( ',', $port) ) )			return false;		// Path - request path must start with path restriction		if ( substr( $url['path'], 0, strlen( $path ) ) != $path )			return false;		return true;	}	/**	 * Convert cookie name and value back to header string.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string Header encoded cookie name and value.	 */	function getHeaderValue() {		if ( empty( $this->name ) || empty( $this->value ) )			return '';		return $this->name . '=' . urlencode( $this->value );	}	/**	 * Retrieve cookie header for usage in the rest of the WordPress HTTP API.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string	 */	function getFullHeader() {		return 'Cookie: ' . $this->getHeaderValue();	}}/** * Implementation for deflate and gzip transfer encodings. * * Includes RFC 1950, RFC 1951, and RFC 1952. * * @since 2.8 * @package WordPress * @subpackage HTTP */class WP_Http_Encoding {	/**	 * Compress raw string using the deflate format.	 *	 * Supports the RFC 1951 standard.	 *	 * @since 2.8	 *	 * @param string $raw String to compress.	 * @param int $level Optional, default is 9. Compression level, 9 is highest.	 * @param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.	 * @return string|bool False on failure.	 */	function compress( $raw, $level = 9, $supports = null ) {		return gzdeflate( $raw, $level );	}	/**	 * Decompression of deflated string.	 *	 * Will attempt to decompress using the RFC 1950 standard, and if that fails	 * then the RFC 1951 standard deflate will be attempted. Finally, the RFC	 * 1952 standard gzip decode will be attempted. If all fail, then the	 * original compressed string will be returned.	 *	 * @since 2.8	 *	 * @param string $compressed String to decompress.	 * @param int $length The optional length of the compressed data.	 * @return string|bool False on failure.	 */	function decompress( $compressed, $length = null ) {		if ( empty($compressed) )			return $compressed;		if ( false !== ( $decompressed = @gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = WP_Http_Encoding::compatible_gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = @gzuncompress( $compressed ) ) )			return $decompressed;		if ( function_exists('gzdecode') ) {			$decompressed = @gzdecode( $compressed );			if ( false !== $decompressed )				return $decompressed;		}		return $compressed;	}	/**	 * Decompression of deflated string while staying compatible with the majority of servers.	 *	 * Certain Servers will return deflated data with headers which PHP's gziniflate()	 * function cannot handle out of the box. The following function lifted from	 * http://au2.php.net/manual/en/function.gzinflate.php#77336 will attempt to deflate	 * the various return forms used.	 *	 * @since 2.8.1	 * @link http://au2.php.net/manual/en/function.gzinflate.php#77336	 *	 * @param string $gzData String to decompress.	 * @return string|bool False on failure.	 */	function compatible_gzinflate($gzData) {		if ( substr($gzData, 0, 3) == "\x1f\x8b\x08" ) {			$i = 10;			$flg = ord( substr($gzData, 3, 1) );			if ( $flg > 0 ) {				if ( $flg & 4 ) {					list($xlen) = unpack('v', substr($gzData, $i, 2) );					$i = $i + 2 + $xlen;				}				if ( $flg & 8 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 16 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 2 )					$i = $i + 2;			}			return gzinflate( substr($gzData, $i, -8) );		} else {			return false;		}	}	/**	 * What encoding types to accept and their priority values.	 *	 * @since 2.8	 *	 * @return string Types of encoding to accept.	 */	function accept_encoding() {		$type = array();		if ( function_exists( 'gzinflate' ) )			$type[] = 'deflate;q=1.0';		if ( function_exists( 'gzuncompress' ) )			$type[] = 'compress;q=0.5';		if ( function_exists( 'gzdecode' ) )			$type[] = 'gzip;q=0.5';		return implode(', ', $type);	}	/**	 * What enconding the content used when it was compressed to send in the headers.	 *	 * @since 2.8	 *	 * @return string Content-Encoding string to send in the header.	 */	function content_encoding() {		return 'deflate';	}	/**	 * Whether the content be decoded based on the headers.	 *	 * @since 2.8	 *	 * @param array|string $headers All of the available headers.	 * @return bool	 */	function should_decode($headers) {		if ( is_array( $headers ) ) {			if ( array_key_exists('content-encoding', $headers) && ! empty( $headers['content-encoding'] ) )				return true;		} else if ( is_string( $headers ) ) {			return ( stripos($headers, 'content-encoding:') !== false );		}		return false;	}	/**	 * Whether decompression and compression are supported by the PHP version.	 *	 * Each function is tested instead of checking for the zlib extension, to	 * ensure that the functions all exist in the PHP version and aren't	 * disabled.	 *	 * @since 2.8	 *	 * @return bool	 */	function is_available() {		return ( function_exists('gzuncompress') || function_exists('gzdeflate') || function_exists('gzinflate') );	}}
<?php/** * Edit Link Categories Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');// Handle bulk actionsif ( isset($_GET['action']) && isset($_GET['delete']) ) {	check_admin_referer('bulk-link-categories');	$doaction = $_GET['action'] ? $_GET['action'] : $_GET['action2'];	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	if ( 'delete' == $doaction ) {		$cats = (array) $_GET['delete'];		$default_cat_id = get_option('default_link_category');		foreach( $cats as $cat_ID ) {			$cat_ID = (int) $cat_ID;			// Don't delete the default cats.			if ( $cat_ID == $default_cat_id )				wp_die( sprintf( __("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), get_term_field('name', $cat_ID, 'link_category') ) );			wp_delete_term($cat_ID, 'link_category', array('default' => $default_cat_id));		}		$location = 'edit-link-categories.php';		if ( $referer = wp_get_referer() ) {			if ( false !== strpos($referer, 'edit-link-categories.php') )				$location = $referer;		}		$location = add_query_arg('message', 6, $location);		wp_redirect($location);		exit();	}} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}$title = __('Link Categories');wp_enqueue_script('admin-categories');if ( current_user_can('manage_categories') )	wp_enqueue_script('inline-edit-tax');add_contextual_help($current_screen, '<p>' . __('You can create groups of links by using link categories. Link category names must be unique and link categories are separate from the categories you use for posts.') . '</p>' .	'<p>' . __('You can delete link categories, but that action does not delete the links within the category. Instead, it moves them to the default link category.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Links_Link_Categories_SubPanel" target="_blank">Link Categories Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once ('admin-header.php');$messages[1] = __('Category added.');$messages[2] = __('Category deleted.');$messages[3] = __('Category updated.');$messages[4] = __('Category not added.');$messages[5] = __('Category not updated.');$messages[6] = __('Categories deleted.'); ?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?php if ( isset($_GET['message']) && ( $msg = (int) $_GET['message'] ) ) : ?><div id="message" class="updated"><p><?php echo $messages[$msg]; ?></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);endif; ?><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="link-category-search-input"><?php _e( 'Search Categories' ); ?>:</label>	<input type="text" id="link-category-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Categories' ); ?>" class="button" /></p></form><br class="clear" /><div id="col-container"><div id="col-right"><div class="col-wrap"><form id="posts-filter" action="" method="get"><div class="tablenav"><?php$pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;if ( ! isset( $catsperpage ) || $catsperpage < 0 )	$catsperpage = 20;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil(wp_count_terms('link_category') / $catsperpage),	'current' => $pagenum));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-link-categories'); ?></div><br class="clear" /></div><div class="clear"></div><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('edit-link-categories'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('edit-link-categories', false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:link-cat"><?php$start = ($pagenum - 1) * $catsperpage;$args = array('offset' => $start, 'number' => $catsperpage, 'hide_empty' => 0);if ( !empty( $_GET['s'] ) )	$args['search'] = $_GET['s'];$categories = get_terms( 'link_category', $args );if ( $categories ) {	$output = '';	foreach ( $categories as $category ) {		$output .= link_cat_row($category);	}	echo $output;	unset($category);}?>	</tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><br class="clear" /></form><div class="form-wrap"><p><?php printf(__('<strong>Note:</strong><br />Deleting a category does not delete the links in that category. Instead, links that were only assigned to the deleted category are set to the category <strong>%s</strong>.'), get_term_field('name', get_option('default_link_category'), 'link_category')) ?></p></div></div></div><!-- /col-right --><div id="col-left"><div class="col-wrap"><?php if ( current_user_can('manage_categories') ) {	$category = (object) array(); $category->parent = 0; do_action('add_link_category_form_pre', $category); ?><div class="form-wrap"><h3><?php _e('Add Link Category'); ?></h3><div id="ajax-response"></div><form name="addcat" id="addcat" class="add:the-list: validate" method="post" action="link-category.php"><input type="hidden" name="action" value="addcat" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field('add-link-category'); ?><div class="form-field form-required">	<label for="name"><?php _e('Link Category name') ?></label>	<input name="name" id="link-name" type="text" value="" size="40" aria-required="true" /></div><?php if ( !global_terms_enabled() ) { ?><div class="form-field">	<label for="slug"><?php _e('Link Category slug') ?></label>	<input name="slug" id="link-slug" type="text" value="" size="40" />	<p><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></div><?php } ?><div class="form-field">	<label for="description"><?php _e('Description (optional)') ?></label>	<textarea name="description" id="link-description" rows="5" cols="40"></textarea>	<p><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></p></div><p class="submit"><input type="submit" class="button" name="submit" value="<?php esc_attr_e('Add Category'); ?>" /></p><?php do_action('edit_link_category_form', $category); ?></form></div><?php } ?></div></div><!-- /col-left --></div><!-- /col-container --></div><!-- /wrap --><?php inline_edit_term_row('edit-link-categories', 'link_category'); ?><?php include('./admin-footer.php'); ?>
<?php/** * The template for displaying Author Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know who	 * the author is when we try to get their name,	 * URL, description, avatar, etc.	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>				<h1 class="page-title author"><?php printf( __( 'Author Archives: %s', 'twentyten' ), "<span class='vcard'><a class='url fn n' href='" . get_author_posts_url( get_the_author_meta( 'ID' ) ) . "' title='" . esc_attr( get_the_author() ) . "' rel='me'>" . get_the_author() . "</a></span>" ); ?></h1><?php// If a user has filled out their description, show a bio on their entries.if ( get_the_author_meta( 'description' ) ) : ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( __( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>						</div><!-- #author-description	-->					</div><!-- #entry-author-info --><?php endif; ?><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the author archive page to output the authors posts	 * If you want to overload this in a child theme then include a file	 * called loop-author.php and that will be used instead.	 */	 get_template_part( 'loop', 'author' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * WordPress Options Header. * * Resets variables: 'action', 'standalone', and 'option_group_id'. Displays * updated message, if updated variable is part of the URL query. * * @package WordPress * @subpackage Administration */wp_reset_vars(array('action', 'standalone', 'option_group_id'));settings_errors();?>
<?php/** * Site/blog functions that work with the blogs table and related data. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// @todo use update_blog_detailsfunction wpmu_update_blogs_date() {	global $wpdb;	$wpdb->update( $wpdb->blogs, array('last_updated' => current_time('mysql', true)), array('blog_id' => $wpdb->blogid) );	refresh_blog_details( $wpdb->blogid );	do_action( 'wpmu_blog_updated', $wpdb->blogid );}function get_blogaddress_by_id( $blog_id ) {	$bloginfo = get_blog_details( (int) $blog_id, false ); // only get bare details!	return esc_url( 'http://' . $bloginfo->domain . $bloginfo->path );}function get_blogaddress_by_name( $blogname ) {	global $current_site;	if ( is_subdomain_install() ) {		if ( $blogname == 'main' )			$blogname = 'www';		$url = rtrim( network_home_url(), '/' );		if ( !empty( $blogname ) )			$url = preg_replace( '|^([^\.]+://)|', '$1' . $blogname . '.', $url );	} else {		$url = network_home_url( $blogname );	}	return esc_url( $url . '/' );}function get_blogaddress_by_domain( $domain, $path ){	if ( is_subdomain_install() ) {		$url = "http://".$domain.$path;	} else {		if ( $domain != $_SERVER['HTTP_HOST'] ) {			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );			$url = 'http://' . substr( $domain, strpos( $domain, '.' ) + 1 ) . $path;			// we're not installing the main blog			if ( $blogname != 'www.' )				$url .= $blogname . '/';		} else { // main blog			$url = 'http://' . $domain . $path;		}	}	return esc_url( $url );}function get_id_from_blogname( $name ) {	global $wpdb, $current_site;	$blog_id = wp_cache_get( "get_id_from_blogname_" . $name, 'blog-details' );	if ( $blog_id )		return $blog_id;	if ( is_subdomain_install() ) {		$domain = $name . '.' . $current_site->domain;		$path = $current_site->path;	} else {		$domain = $current_site->domain;		$path = $current_site->path . $name . '/';	}	$blog_id = $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM {$wpdb->blogs} WHERE domain = %s AND path = %s", $domain, $path) );	wp_cache_set( 'get_id_from_blogname_' . $name, $blog_id, 'blog-details' );	return $blog_id;}/** * Retrieve the details for a blog from the blogs table and blog options. * * @since 3.0.0 * @param int|string|array $fields A blog ID, a blog name, or an array of fields to query against. * @param bool $get_all Whether to retrieve all details or only the details in the blogs table. Default is true. * @return object Blog details. */function get_blog_details( $fields, $get_all = true ) {	global $wpdb;	if ( is_array($fields ) ) {		if ( isset($fields['blog_id']) ) {			$blog_id = $fields['blog_id'];		} elseif ( isset($fields['domain']) && isset($fields['path']) ) {			$key = md5( $fields['domain'] . $fields['path'] );			$blog = wp_cache_get($key, 'blog-lookup');			if ( false !== $blog )				return $blog;			if ( substr( $fields['domain'], 0, 4 ) == 'www.' ) {				$nowww = substr( $fields['domain'], 4 );				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain IN (%s,%s) AND path = %s ORDER BY CHAR_LENGTH(domain) DESC", $nowww, $fields['domain'], $fields['path'] ) );			} else {				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain = %s AND path = %s", $fields['domain'], $fields['path'] ) );			}			if ( $blog ) {				wp_cache_set($blog->blog_id . 'short', $blog, 'blog-details');				$blog_id = $blog->blog_id;			} else {				return false;			}		} elseif ( isset($fields['domain']) && is_subdomain_install() ) {			$key = md5( $fields['domain'] );			$blog = wp_cache_get($key, 'blog-lookup');			if ( false !== $blog )				return $blog;			if ( substr( $fields['domain'], 0, 4 ) == 'www.' ) {				$nowww = substr( $fields['domain'], 4 );				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain IN (%s,%s) ORDER BY CHAR_LENGTH(domain) DESC", $nowww, $fields['domain'] ) );			} else {				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain = %s", $fields['domain'] ) );			}			if ( $blog ) {				wp_cache_set($blog->blog_id . 'short', $blog, 'blog-details');				$blog_id = $blog->blog_id;			} else {				return false;			}		} else {			return false;		}	} else {		if ( !is_numeric( $fields ) )			$blog_id = get_id_from_blogname( $fields );		else			$blog_id = $fields;	}	$blog_id = (int) $blog_id;	$all = $get_all == true ? '' : 'short';	$details = wp_cache_get( $blog_id . $all, 'blog-details' );	if ( $details ) {		if ( ! is_object( $details ) ) {			if ( $details == -1 ) {				return false;			} else {				// Clear old pre-serialized objects. Cache clients do better with that.				wp_cache_delete( $blog_id . $all, 'blog-details' );				unset($details);			}		} else {			return $details;		}	}	// Try the other cache.	if ( $get_all ) {		$details = wp_cache_get( $blog_id . 'short', 'blog-details' );	} else {		$details = wp_cache_get( $blog_id, 'blog-details' );		// If short was requested and full cache is set, we can return.		if ( $details ) {			if ( ! is_object( $details ) ) {				if ( $details == -1 ) {					return false;				} else {					// Clear old pre-serialized objects. Cache clients do better with that.					wp_cache_delete( $blog_id, 'blog-details' );					unset($details);				}			} else {				return $details;			}		}	}	if ( empty($details) ) {		$details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE blog_id = %d /* get_blog_details */", $blog_id ) );		if ( ! $details ) {			// Set the full cache.			wp_cache_set( $blog_id, -1, 'blog-details' );			return false;		}	}	if ( ! $get_all ) {		wp_cache_set( $blog_id . $all, $details, 'blog-details' );		return $details;	}	$details->blogname		= get_blog_option( $blog_id, 'blogname' );	$details->siteurl		= get_blog_option( $blog_id, 'siteurl' );	$details->post_count	= get_blog_option( $blog_id, 'post_count' );	$details = apply_filters( 'blog_details', $details );	wp_cache_set( $blog_id . $all, $details, 'blog-details' );	$key = md5( $details->domain . $details->path );	wp_cache_set( $key, $details, 'blog-lookup' );	return $details;}/** * Clear the blog details cache. * * @since 3.0.0 * * @param int $blog_id Blog ID */function refresh_blog_details( $blog_id ) {	$blog_id = (int) $blog_id;	$details = get_blog_details( $blog_id, false );	wp_cache_delete( $blog_id , 'blog-details' );	wp_cache_delete( $blog_id . 'short' , 'blog-details' );	wp_cache_delete( md5( $details->domain . $details->path )  , 'blog-lookup' );	wp_cache_delete( 'current_blog_' . $details->domain, 'site-options' );	wp_cache_delete( 'current_blog_' . $details->domain . $details->path, 'site-options' );}/** * Update the details for a blog. Updates the blogs table for a given blog id. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param array $details Array of details keyed by blogs table field names. * @return bool True if update succeeds, false otherwise. */function update_blog_details( $blog_id, $details = array() ) {	global $wpdb;	if ( empty($details) )		return false;	if ( is_object($details) )		$details = get_object_vars($details);	$current_details = get_blog_details($blog_id, false);	if ( empty($current_details) )		return false;	$current_details = get_object_vars($current_details);	$details = array_merge($current_details, $details);	$details['last_updated'] = current_time('mysql', true);	$update_details = array();	$fields = array( 'site_id', 'domain', 'path', 'registered', 'last_updated', 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id');	foreach ( array_intersect( array_keys( $details ), $fields ) as $field )		$update_details[$field] = $details[$field];	$wpdb->update( $wpdb->blogs, $update_details, array('blog_id' => $blog_id) );	// If spam status changed, issue actions.	if ( $details[ 'spam' ] != $current_details[ 'spam' ] ) {		if ( $details[ 'spam' ] == 1 )			do_action( "make_spam_blog", $blog_id );		else			do_action( "make_ham_blog", $blog_id );	}	if ( isset($details[ 'public' ]) )		update_blog_option( $blog_id, 'blog_public', $details[ 'public' ], false );	refresh_blog_details($blog_id);	return true;}/** * Retrieve option value based on setting name and blog_id. * * If the option does not exist or does not have a value, then the return value * will be false. This is useful to check whether you need to install an option * and is commonly used during installation of plugin options and to test * whether upgrading is required. * * There is a filter called 'blog_option_$option' with the $option being * replaced with the option name. The filter takes two parameters. $value and * $blog_id. It returns $value. * The 'option_$option' filter in get_option() is not called. * * @since NA * @package WordPress MU * @subpackage Option * @uses apply_filters() Calls 'blog_option_$optionname' with the option name value. * * @param int $blog_id is the id of the blog. * @param string $setting Name of option to retrieve. Should already be SQL-escaped * @param string $default (optional) Default value returned if option not found. * @return mixed Value set for the option. */function get_blog_option( $blog_id, $setting, $default = false ) {	global $wpdb;	$key = $blog_id."-".$setting."-blog_option";	$value = wp_cache_get( $key, "site-options" );	if ( $value == null ) {		if ( $blog_id == $wpdb->blogid ) {			$value = get_option( $setting, $default );			$notoptions = wp_cache_get( 'notoptions', 'options' );			if ( isset( $notoptions[$setting] ) ) {				wp_cache_set( $key, 'noop', 'site-options' );				$value = $default;			} elseif ( $value == false ) {				wp_cache_set( $key, 'falsevalue', 'site-options' );			} else {				wp_cache_set( $key, $value, 'site-options' );			}			return apply_filters( 'blog_option_' . $setting, $value, $blog_id );		} else {			$blog_prefix = $wpdb->get_blog_prefix( $blog_id );			$row = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$blog_prefix}options WHERE option_name = %s", $setting ) );			if ( is_object( $row ) ) { // Has to be get_row instead of get_var because of funkiness with 0, false, null values				$value = $row->option_value;				if ( $value == false )					wp_cache_set( $key, 'falsevalue', 'site-options' );				else					wp_cache_set( $key, $value, 'site-options' );			} else { // option does not exist, so we must cache its non-existence				wp_cache_set( $key, 'noop', 'site-options' );				$value = $default;			}		}	} elseif ( $value == 'noop' ) {		$value = $default;	} elseif ( $value == 'falsevalue' ) {		$value = false;	}	// If home is not set use siteurl.	if ( 'home' == $setting && '' == $value )		return get_blog_option( $blog_id, 'siteurl' );	if ( 'siteurl' == $setting || 'home' == $setting || 'category_base' == $setting )		$value = untrailingslashit( $value );	if (! @unserialize( $value ) )		$value = stripslashes( $value );	return apply_filters( 'blog_option_' . $setting, maybe_unserialize( $value ), $blog_id );}function add_blog_option( $id, $key, $value ) {	$id = (int) $id;	switch_to_blog($id);	add_option( $key, $value );	restore_current_blog();	wp_cache_set( $id."-".$key."-blog_option", $value, 'site-options' );}function delete_blog_option( $id, $key ) {	$id = (int) $id;	switch_to_blog($id);	delete_option( $key );	restore_current_blog();	wp_cache_set( $id."-".$key."-blog_option", '', 'site-options' );}function update_blog_option( $id, $key, $value, $refresh = true ) {	$id = (int) $id;	switch_to_blog($id);	update_option( $key, $value );	restore_current_blog();	if ( $refresh == true )		refresh_blog_details( $id );	wp_cache_set( $id."-".$key."-blog_option", $value, 'site-options');}function switch_to_blog( $new_blog, $validate = false ) {	global $wpdb, $table_prefix, $blog_id, $switched, $switched_stack, $wp_roles, $current_user, $wp_object_cache;	if ( empty($new_blog) )		$new_blog = $blog_id;	if ( $validate && ! get_blog_details( $new_blog ) )		return false;	if ( empty($switched_stack) )		$switched_stack = array();	$switched_stack[] = $blog_id;	/* If we're switching to the same blog id that we're on,	* set the right vars, do the associated actions, but skip	* the extra unnecessary work */	if ( $blog_id == $new_blog ) {		do_action( 'switch_blog', $blog_id, $blog_id );		$switched = true;		return true;	}	$wpdb->set_blog_id($new_blog);	$table_prefix = $wpdb->prefix;	$prev_blog_id = $blog_id;	$blog_id = $new_blog;	if ( is_object( $wp_roles ) ) {		$wpdb->suppress_errors();		if ( method_exists( $wp_roles ,'_init' ) )			$wp_roles->_init();		elseif ( method_exists( $wp_roles, '__construct' ) )			$wp_roles->__construct();		$wpdb->suppress_errors( false );	}	if ( is_object( $current_user ) )		$current_user->for_blog( $blog_id );	if ( is_object( $wp_object_cache ) && isset( $wp_object_cache->global_groups ) )		$global_groups = $wp_object_cache->global_groups;	else		$global_groups = false;	wp_cache_init();	if ( function_exists('wp_cache_add_global_groups') ) {		if ( is_array( $global_groups ) )			wp_cache_add_global_groups( $global_groups );		else			wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'site-transient', 'global-posts' ) );		wp_cache_add_non_persistent_groups(array( 'comment', 'counts', 'plugins' ));	}	do_action('switch_blog', $blog_id, $prev_blog_id);	$switched = true;	return true;}function restore_current_blog() {	global $table_prefix, $wpdb, $blog_id, $switched, $switched_stack, $wp_roles, $current_user, $wp_object_cache;	if ( !$switched )		return false;	if ( !is_array( $switched_stack ) )		return false;	$blog = array_pop( $switched_stack );	if ( $blog_id == $blog ) {		do_action( 'switch_blog', $blog, $blog );		/* If we still have items in the switched stack, consider ourselves still 'switched' */		$switched = ( is_array( $switched_stack ) && count( $switched_stack ) > 0 );		return true;	}	$wpdb->set_blog_id($blog);	$prev_blog_id = $blog_id;	$blog_id = $blog;	$table_prefix = $wpdb->prefix;	if ( is_object( $wp_roles ) ) {		$wpdb->suppress_errors();		if ( method_exists( $wp_roles ,'_init' ) )			$wp_roles->_init();		elseif ( method_exists( $wp_roles, '__construct' ) )			$wp_roles->__construct();		$wpdb->suppress_errors( false );	}	if ( is_object( $current_user ) )		$current_user->for_blog( $blog_id );	if ( is_object( $wp_object_cache ) && isset( $wp_object_cache->global_groups ) )		$global_groups = $wp_object_cache->global_groups;	else		$global_groups = false;	wp_cache_init();	if ( function_exists('wp_cache_add_global_groups') ) {		if ( is_array( $global_groups ) )			wp_cache_add_global_groups( $global_groups );		else			wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'site-transient' ) );		wp_cache_add_non_persistent_groups(array( 'comment', 'counts', 'plugins' ));	}	do_action('switch_blog', $blog_id, $prev_blog_id);	/* If we still have items in the switched stack, consider ourselves still 'switched' */	$switched = ( is_array( $switched_stack ) && count( $switched_stack ) > 0 );	return true;}function is_archived( $id ) {	return get_blog_status($id, 'archived');}function update_archived( $id, $archived ) {	update_blog_status($id, 'archived', $archived);	return $archived;}/** * Update a blog details field. * * @since 3.0.0 * * @param int $blog_id BLog ID * @param string $pref A field name * @param string $value Value for $pref * @param bool $refresh Whether to refresh the blog details cache. Default is true. */function update_blog_status( $blog_id, $pref, $value, $refresh = true ) {	global $wpdb;	if ( !in_array( $pref, array( 'site_id', 'domain', 'path', 'registered', 'last_updated', 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id') ) )		return $value;	$wpdb->update( $wpdb->blogs, array($pref => $value, 'last_updated' => current_time('mysql', true)), array('blog_id' => $blog_id) );	if ( $refresh )		refresh_blog_details($blog_id);	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( "make_spam_blog", $blog_id );		else			do_action( "make_ham_blog", $blog_id );	}	return $value;}function get_blog_status( $id, $pref ) {	global $wpdb;	$details = get_blog_details( $id, false );	if ( $details )		return $details->$pref;	return $wpdb->get_var( $wpdb->prepare("SELECT %s FROM {$wpdb->blogs} WHERE blog_id = %d", $pref, $id) );}function get_last_updated( $deprecated = '', $start = 0, $quantity = 40 ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT blog_id, domain, path FROM $wpdb->blogs WHERE site_id = %d AND public = '1' AND archived = '0' AND mature = '0' AND spam = '0' AND deleted = '0' AND last_updated != '0000-00-00 00:00:00' ORDER BY last_updated DESC limit %d, %d", $wpdb->siteid, $start, $quantity ) , ARRAY_A );}?>
<?php// Silence is golden.?>
<?php/** * WordPress Administration Importer API. * * @package WordPress * @subpackage Administration *//** * Retrieve list of importers. * * @since 2.0.0 * * @return array */function get_importers() {	global $wp_importers;	if ( is_array($wp_importers) )		uasort($wp_importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));	return $wp_importers;}/** * Register importer for WordPress. * * @since 2.0.0 * * @param string $id Importer tag. Used to uniquely identify importer. * @param string $name Importer name and title. * @param string $description Importer description. * @param callback $callback Callback to run. * @return WP_Error Returns WP_Error when $callback is WP_Error. */function register_importer( $id, $name, $description, $callback ) {	global $wp_importers;	if ( is_wp_error( $callback ) )		return $callback;	$wp_importers[$id] = array ( $name, $description, $callback );}/** * Cleanup importer. * * Removes attachment based on ID. * * @since 2.0.0 * * @param string $id Importer ID. */function wp_import_cleanup( $id ) {	wp_delete_attachment( $id );}/** * Handle importer uploading and add attachment. * * @since 2.0.0 * * @return array */function wp_import_handle_upload() {	if ( !isset($_FILES['import']) ) {		$file['error'] = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return $file;	}	$overrides = array( 'test_form' => false, 'test_type' => false );	$_FILES['import']['name'] .= '.txt';	$file = wp_handle_upload( $_FILES['import'], $overrides );	if ( isset( $file['error'] ) )		return $file;	$url = $file['url'];	$type = $file['type'];	$file = addslashes( $file['file'] );	$filename = basename( $file );	// Construct the object array	$object = array( 'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url	);	// Save the data	$id = wp_insert_attachment( $object, $file );	return array( 'file' => $file, 'id' => $id );}?>
<?php/** * Used to set up and fix common variables and include * the Multisite procedural and class library. * * Allows for some configuration in wp-config.php (see ms-default-constants.php) * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// $base sanity check.if ( 'BASE' == $base )	die( /*WP_I18N_BASE_ERROR*/'Configuration error in <code>wp-config.php</code>. <code>$base</code> is set to <code>BASE</code> when it should be like <code>/</code> or <code>/blogs/</code>.'/*/WP_I18N_BASE_ERROR*/ );/** Include Multisite initialization functions */require( ABSPATH . WPINC . '/ms-load.php' );require( ABSPATH . WPINC . '/ms-default-constants.php' );if ( defined( 'SUNRISE' ) )	include_once( WP_CONTENT_DIR . '/sunrise.php' );/** Check for and define SUBDOMAIN_INSTALL and the deprecated VHOST constant. */ms_subdomain_constants();if ( !isset( $current_site ) || !isset( $current_blog ) ) {	$domain = addslashes( $_SERVER['HTTP_HOST'] );	if ( false !== strpos( $domain, ':' ) ) {		if ( substr( $domain, -3 ) == ':80' ) {			$domain = substr( $domain, 0, -3 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -3 );		} elseif ( substr( $domain, -4 ) == ':443' ) {			$domain = substr( $domain, 0, -4 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -4 );		} else {			wp_die( /*WP_I18N_NO_PORT_NUMBER*/'Multisite only works without the port number in the URL.'/*/WP_I18N_NO_PORT_NUMBER*/ );		}	}	$domain = rtrim( $domain, '.' );	$cookie_domain = $domain;	if ( substr( $cookie_domain, 0, 4 ) == 'www.' )		$cookie_domain = substr( $cookie_domain, 4 );	$path = preg_replace( '|([a-z0-9-]+.php.*)|', '', $_SERVER['REQUEST_URI'] );	$path = str_replace ( '/wp-admin/', '/', $path );	$path = preg_replace( '|(/[a-z0-9-]+?/).*|', '$1', $path );	$current_site = wpmu_current_site();	if ( ! isset( $current_site->blog_id ) )		$current_site->blog_id = $wpdb->get_var( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s", $current_site->domain, $current_site->path ) );	if ( is_subdomain_install() ) {		$current_blog = wp_cache_get( 'current_blog_' . $domain, 'site-options' );		if ( !$current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain, $current_blog, 'site-options' );		}		if ( $current_blog && $current_blog->site_id != $current_site->id )			$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE id = %d", $current_blog->site_id ) );		else			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );	} else {		$blogname = htmlspecialchars( substr( $_SERVER[ 'REQUEST_URI' ], strlen( $path ) ) );		if ( false !== strpos( $blogname, '/' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '/' ) );		if ( false !== strpos( $blogname, '?' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '?' ) );		$reserved_blognames = array( 'page', 'comments', 'blog', 'wp-admin', 'wp-includes', 'wp-content', 'files', 'feed' );		if ( $blogname != '' && ! in_array( $blogname, $reserved_blognames ) && ! is_file( $blogname ) )			$path .= $blogname . '/';		$current_blog = wp_cache_get( 'current_blog_' . $domain . $path, 'site-options' );		if ( ! $current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain, 'path' => $path ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain . $path, $current_blog, 'site-options' );		}	}	if ( ! defined( 'WP_INSTALLING' ) && is_subdomain_install() && ! is_object( $current_blog ) ) {		if ( defined( 'NOBLOGREDIRECT' ) ) {			$destination = NOBLOGREDIRECT;			if ( '%siteurl%' == $destination )				$destination = "http://" . $current_site->domain . $current_site->path;		} else {			$destination = 'http://' . $current_site->domain . $current_site->path . 'wp-signup.php?new=' . str_replace( '.' . $current_site->domain, '', $domain );		}		header( 'Location: ' . $destination );		die();	}	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( $current_site && ! $current_blog ) {			if ( $current_site->domain != $_SERVER[ 'HTTP_HOST' ] ) {				header( 'Location: http://' . $current_site->domain . $current_site->path );				exit;			}			$current_blog = get_blog_details( array( 'domain' => $current_site->domain, 'path' => $current_site->path ), false );		}		if ( ! $current_blog || ! $current_site )			ms_not_installed();	}	$blog_id = $current_blog->blog_id;	$public  = $current_blog->public;	if ( empty( $current_blog->site_id ) )		$current_blog->site_id = 1;	$site_id = $current_blog->site_id;	$current_site = get_current_site_name( $current_site );	if ( ! $blog_id ) {		if ( defined( 'WP_INSTALLING' ) ) {			$current_blog->blog_id = $blog_id = 1;		} else {			$msg = ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) ? ' ' . /*WP_I18N_TABLES_MISSING*/'Database tables are missing.'/*/WP_I18N_TABLES_MISSING*/ : '';			wp_die( /*WP_I18N_NO_BLOG*/'No site by that name on this system.'/*/WP_I18N_NO_BLOG*/ . $msg );		}	}}$wpdb->set_prefix( $table_prefix, false ); // $table_prefix can be set in sunrise.php$wpdb->set_blog_id( $current_blog->blog_id, $current_blog->site_id );$table_prefix = $wpdb->get_blog_prefix();// need to init cache again after blog_id is setwp_start_object_cache();// Define upload directory constantsms_upload_constants();
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?>	<div id="sidebar" role="complementary">		<ul>			<?php 	/* Widgetized sidebar, if you have the plugin installed. */					if ( !function_exists('dynamic_sidebar') || !dynamic_sidebar() ) : ?>			<li>				<?php get_search_form(); ?>			</li>			<!-- Author information is disabled per default. Uncomment and fill in your details if you want to use it.			<li><h2><?php _e('Author'); ?></h2>			<p>A little something about you, the author. Nothing lengthy, just an overview.</p>			</li>			-->			<?php if ( is_404() || is_category() || is_day() || is_month() ||						is_year() || is_search() || is_paged() ) {			?> <li>			<?php /* If this is a 404 page */ if (is_404()) { ?>			<?php /* If this is a category archive */ } elseif (is_category()) { ?>			<p><?php printf(__('You are currently browsing the archives for the %s category.'), single_cat_title('', false)); ?></p>			<?php /* If this is a daily archive */ } elseif (is_day()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the day %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('l, F jS, Y'))); ?></p>			<?php /* If this is a monthly archive */ } elseif (is_month()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('F, Y'))); ?></p>			<?php /* If this is a yearly archive */ } elseif (is_year()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the year %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time('Y')); ?></p>			<?php /* If this is a search result */ } elseif (is_search()) { ?>			<p><?php printf(__('You have searched the <a href="%1$s/">%2$s</a> blog archives for <strong>&#8216;%3$s&#8217;</strong>. If you are unable to find anything in these search results, you can try one of these links.'), get_bloginfo('url'), get_bloginfo('name'), esc_html( get_search_query() ) ); ?></p>			<?php /* If this set is paginated */ } elseif (isset($_GET['paged']) && !empty($_GET['paged'])) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives.'), get_bloginfo('url'), get_bloginfo('name')); ?></p>			<?php } ?>			</li>		<?php }?>		</ul>		<ul role="navigation">			<?php wp_list_pages('title_li=<h2>' . __('Pages') . '</h2>' ); ?>			<li><h2><?php _e('Archives'); ?></h2>				<ul>				<?php wp_get_archives(array('type' => 'monthly')); ?>				</ul>			</li>			<?php wp_list_categories(array('show_count' => 1, 'title_li' => '<h2>' . __('Categories') . '</h2>')); ?>		</ul>		<ul>			<?php /* If this is the frontpage */ if ( is_home() || is_page() ) { ?>				<?php wp_list_bookmarks(); ?>				<li><h2><?php _e('Meta'); ?></h2>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<li><a href="http://validator.w3.org/check/referer" title="<?php _e('This page validates as XHTML 1.0 Transitional'); ?>"><?php _e('Valid <abbr title="eXtensible HyperText Markup Language">XHTML</abbr>'); ?></a></li>					<li><a href="http://gmpg.org/xfn/"><abbr title="<?php _e('XHTML Friends Network'); ?>"><?php _e('XFN'); ?></abbr></a></li>					<li><a href="http://wordpress.org/" title="<?php _e('Powered by WordPress, state-of-the-art semantic personal publishing platform.'); ?>">WordPress</a></li>					<?php wp_meta(); ?>				</ul>				</li>			<?php } ?>			<?php endif; ?>		</ul>	</div>
<?php/** * Bootstrap file for setting the ABSPATH constant * and loading the wp-config.php file. The wp-config.php * file will then load the wp-settings.php file, which * will then set up the WordPress environment. * * If the wp-config.php file is not found then an error * will be displayed asking the visitor to set up the * wp-config.php file. * * Will also search for wp-config.php in WordPress' parent * directory to allow the WordPress directory to remain * untouched. * * @package WordPress *//** Define ABSPATH as this files directory */define( 'ABSPATH', dirname(__FILE__) . '/' );if ( defined('E_RECOVERABLE_ERROR') )	error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);else	error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);if ( file_exists( ABSPATH . 'wp-config.php') ) {	/** The config file resides in ABSPATH */	require_once( ABSPATH . 'wp-config.php' );} elseif ( file_exists( dirname(ABSPATH) . '/wp-config.php' ) && ! file_exists( dirname(ABSPATH) . '/wp-settings.php' ) ) {	/** The config file resides one level above ABSPATH but is not part of another install*/	require_once( dirname(ABSPATH) . '/wp-config.php' );} else {	// A config file doesn't exist	// Set a path for the link to the installer	if (strpos($_SERVER['PHP_SELF'], 'wp-admin') !== false) $path = '';	else $path = 'wp-admin/';	// Die with an error message	require_once( ABSPATH . '/wp-includes/classes.php' );	require_once( ABSPATH . '/wp-includes/functions.php' );	require_once( ABSPATH . '/wp-includes/plugin.php' );	$text_direction = /*WP_I18N_TEXT_DIRECTION*/"ltr"/*/WP_I18N_TEXT_DIRECTION*/;	wp_die(sprintf(/*WP_I18N_NO_CONFIG*/"There doesn't seem to be a <code>wp-config.php</code> file. I need this before we can get started. Need more help? <a href='http://codex.wordpress.org/Editing_wp-config.php'>We got it</a>. You can create a <code>wp-config.php</code> file through a web interface, but this doesn't work for all server setups. The safest way is to manually create the file.</p><p><a href='%ssetup-config.php' class='button'>Create a Configuration File</a>"/*/WP_I18N_NO_CONFIG*/, $path), /*WP_I18N_ERROR_TITLE*/"WordPress &rsaquo; Error"/*/WP_I18N_ERROR_TITLE*/, array('text_direction' => $text_direction));}?>
<?php/** * WP_Importer base class */class WP_Importer {	/**	 * Class Constructor	 *	 * @return void	 */	function __construct() {}	function WP_Importer() {		$this->__construct();	}	/**	 * Returns array with imported permalinks from WordPress database	 *	 * @param string $bid	 * @return array	 */	function get_imported_posts( $importer_name, $bid ) {		global $wpdb;		$hashtable = array();		$limit = 100;		$offset = 0;		// Grab all posts in chunks		do {			$meta_key = $importer_name . '_' . $bid . '_permalink';			$sql = $wpdb->prepare( "SELECT post_id, meta_value FROM $wpdb->postmeta WHERE meta_key = '%s' LIMIT %d,%d", $meta_key, $offset, $limit );			$results = $wpdb->get_results( $sql );			// Increment offset			$offset = ( $limit + $offset );			if ( !empty( $results ) ) {				foreach ( $results as $r ) {					// Set permalinks into array					$hashtable[$r->meta_value] = intval( $r->post_id );				}			}		} while ( count( $results ) == $limit );		// unset to save memory		unset( $results, $r );		return $hashtable;	}	/**	 * Return count of imported permalinks from WordPress database	 *	 * @param string $bid	 * @return int	 */	function count_imported_posts( $importer_name, $bid ) {		global $wpdb;		$count = 0;		// Get count of permalinks		$meta_key = $importer_name . '_' . $bid . '_permalink';		$sql = $wpdb->prepare( "SELECT COUNT( post_id ) AS cnt FROM $wpdb->postmeta WHERE meta_key = '%s'", $meta_key );		$result = $wpdb->get_results( $sql );		if ( !empty( $result ) )			$count = intval( $result[0]->cnt );		// unset to save memory		unset( $results );		return $count;	}	/**	 * Set array with imported comments from WordPress database	 *	 * @param string $bid	 * @return array	 */	function get_imported_comments( $bid ) {		global $wpdb;		$hashtable = array();		$limit = 100;		$offset = 0;		// Grab all comments in chunks		do {			$sql = $wpdb->prepare( "SELECT comment_ID, comment_agent FROM $wpdb->comments LIMIT %d,%d", $offset, $limit );			$results = $wpdb->get_results( $sql );			// Increment offset			$offset = ( $limit + $offset );			if ( !empty( $results ) ) {				foreach ( $results as $r ) {					// Explode comment_agent key					list ( $ca_bid, $source_comment_id ) = explode( '-', $r->comment_agent );					$source_comment_id = intval( $source_comment_id );					// Check if this comment came from this blog					if ( $bid == $ca_bid ) {						$hashtable[$source_comment_id] = intval( $r->comment_ID );					}				}			}		} while ( count( $results ) == $limit );		// unset to save memory		unset( $results, $r );		return $hashtable;	}	function set_blog( $blog_id ) {		if ( is_numeric( $blog_id ) ) {			$blog_id = (int) $blog_id;		} else {			$blog = 'http://' . preg_replace( '#^https?://#', '', $blog_id );			if ( ( !$parsed = parse_url( $blog ) ) || empty( $parsed['host'] ) ) {				fwrite( STDERR, "Error: can not determine blog_id from $blog_id\n" );				exit();			}			if ( empty( $parsed['path'] ) )				$parsed['path'] = '/';			if ( !$blog = get_blog_info( $parsed['host'], $parsed['path'] ) ) {				fwrite( STDERR, "Error: Could not find blog\n" );				exit();			}			$blog_id = (int) $blog->blog_id;			// Restore global $current_blog			global $current_blog;			$current_blog = $blog;		}		if ( function_exists( 'is_multisite' ) ) {			if ( is_multisite() )				switch_to_blog( $blog_id );		}		return $blog_id;	}	function set_user( $user_id ) {		if ( is_numeric( $user_id ) ) {			$user_id = (int) $user_id;		} else {			$user_id = (int) username_exists( $user_id );		}		if ( !$user_id || !wp_set_current_user( $user_id ) ) {			fwrite( STDERR, "Error: can not find user\n" );			exit();		}		return $user_id;	}	/**	 * Sort by strlen, longest string first	 *	 * @param string $a	 * @param string $b	 * @return int	 */	function cmpr_strlen( $a, $b ) {		return strlen( $b ) - strlen( $a );	}	/**	 * GET URL	 *	 * @param string $url	 * @param string $username	 * @param string $password	 * @param bool $head	 * @return array	 */	function get_page( $url, $username = '', $password = '', $head = false ) {		// Increase the timeout		add_filter( 'http_request_timeout', array( &$this, 'bump_request_timeout' ) );		$headers = array();		$args = array();		if ( true === $head )			$args['method'] = 'HEAD';		if ( !empty( $username ) && !empty( $password ) )			$headers['Authorization'] = 'Basic ' . base64_encode( "$username:$password" );		$args['headers'] = $headers;		return wp_remote_request( $url, $args );	}	/**	 * Bump up the request timeout for http requests	 *	 * @param int $val	 * @return int	 */	function bump_request_timeout( $val ) {		return 60;	}	/**	 * Check if user has exceeded disk quota	 *	 * @return bool	 */	function is_user_over_quota() {		global $current_user, $current_blog;		if ( function_exists( 'upload_is_user_over_quota' ) ) {			if ( upload_is_user_over_quota( 1 ) ) {				echo "Sorry, you have used your upload quota.\n";				return true;			}		}		return false;	}	/**	 * Replace newlines, tabs, and multiple spaces with a single space	 *	 * @param string $string	 * @return string	 */	function min_whitespace( $string ) {		return preg_replace( '|[\r\n\t ]+|', ' ', $string );	}	/**	 * Reset global variables that grow out of control during imports	 *	 * @return void	 */	function stop_the_insanity() {		global $wpdb, $wp_actions;		// Or define( 'WP_IMPORTING', true );		$wpdb->queries = array();		// Reset $wp_actions to keep it from growing out of control		$wp_actions = array();	}}/** * Returns value of command line params. * Exits when a required param is not set. * * @param string $param * @param bool $required * @return mixed */function get_cli_args( $param, $required = false ) {	$args = $_SERVER['argv'];	$out = array();	$last_arg = null;	$return = null;	$il = sizeof( $args );	for ( $i = 1, $il; $i < $il; $i++ ) {		if ( (bool) preg_match( "/^--(.+)/", $args[$i], $match ) ) {			$parts = explode( "=", $match[1] );			$key = preg_replace( "/[^a-z0-9]+/", "", $parts[0] );			if ( isset( $parts[1] ) ) {				$out[$key] = $parts[1];			} else {				$out[$key] = true;			}			$last_arg = $key;		} else if ( (bool) preg_match( "/^-([a-zA-Z0-9]+)/", $args[$i], $match ) ) {			for ( $j = 0, $jl = strlen( $match[1] ); $j < $jl; $j++ ) {				$key = $match[1]{$j};				$out[$key] = true;			}			$last_arg = $key;		} else if ( $last_arg !== null ) {			$out[$last_arg] = $args[$i];		}	}	// Check array for specified param	if ( isset( $out[$param] ) ) {		// Set return value		$return = $out[$param];	}	// Check for missing required param	if ( !isset( $out[$param] ) && $required ) {		// Display message and exit		echo "\"$param\" parameter is required but was not specified\n";		exit();	}	return $return;}
<?php/** * Object Cache API * * @link http://codex.wordpress.org/Function_Reference/WP_Cache * * @package WordPress * @subpackage Cache *//** * Adds data to the cache, if the cache key doesn't aleady exist. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::add() * * @param int|string $key The cache ID to use for retrieval later * @param mixed $data The data to add to the cache store * @param string $flag The group to add the cache to * @param int $expire When the cache data should be expired * @return unknown */function wp_cache_add($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->add($key, $data, $flag, $expire);}/** * Closes the cache. * * This function has ceased to do anything since WordPress 2.5. The * functionality was removed along with the rest of the persistant cache. This * does not mean that plugins can't implement this function when they need to * make sure that the cache is cleaned up after WordPress no longer needs it. * * @since 2.0.0 * * @return bool Always returns True */function wp_cache_close() {	return true;}/** * Removes the cache contents matching ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::delete() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool True on successful removal, false on failure */function wp_cache_delete($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->delete($id, $flag);}/** * Removes all cache items. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::flush() * * @return bool Always returns true */function wp_cache_flush() {	global $wp_object_cache;	return $wp_object_cache->flush();}/** * Retrieves the cache contents from the cache by ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::get() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool|mixed False on failure to retrieve contents or the cache *		contents on success */function wp_cache_get($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->get($id, $flag);}/** * Sets up Object Cache Global and assigns it. * * @since 2.0.0 * @global WP_Object_Cache $wp_object_cache WordPress Object Cache */function wp_cache_init() {	$GLOBALS['wp_object_cache'] =& new WP_Object_Cache();}/** * Replaces the contents of the cache with new data. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::replace() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_replace($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->replace($key, $data, $flag, $expire);}/** * Saves the data to the cache. * * @since 2.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::set() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_set($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->set($key, $data, $flag, $expire);}/** * Adds a group or set of groups to the list of global groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_global_groups( $groups ) {	global $wp_object_cache;	return $wp_object_cache->add_global_groups($groups);}/** * Adds a group or set of groups to the list of non-persistent groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_non_persistent_groups( $groups ) {	// Default cache doesn't persist so nothing to do here.	return;}/** * Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys, * this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_reset() {	global $wp_object_cache;	return $wp_object_cache->reset();}/** * WordPress Object Cache * * The WordPress Object Cache is used to save on trips to the database. The * Object Cache stores all of the cache data to memory and makes the cache * contents available by using a key, which is used to name and later retrieve * the cache contents. * * The Object Cache can be replaced by other caching mechanisms by placing files * in the wp-content folder which is looked at in wp-settings. If that file * exists, then this file will not be included. * * @package WordPress * @subpackage Cache * @since 2.0 */class WP_Object_Cache {	/**	 * Holds the cached objects	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $cache = array ();	/**	 * Cache objects that do not exist in the cache	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $non_existent_objects = array ();	/**	 * The amount of times the cache data was already stored in the cache.	 *	 * @since 2.5.0	 * @access private	 * @var int	 */	var $cache_hits = 0;	/**	 * Amount of times the cache did not have the request in cache	 *	 * @var int	 * @access public	 * @since 2.0.0	 */	var $cache_misses = 0;	/**	 * List of global groups	 *	 * @var array	 * @access protected	 * @since 3.0.0	 */	var $global_groups = array();	/**	 * Adds data to the cache if it doesn't already exist.	 *	 * @uses WP_Object_Cache::get Checks to see if the cache already has data.	 * @uses WP_Object_Cache::set Sets the data after the checking the cache	 *		contents existance.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if cache ID and group already exists, true on success	 */	function add( $id, $data, $group = 'default', $expire = '' ) {		if ( empty ($group) )			$group = 'default';		if (false !== $this->get($id, $group))			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Sets the list of global groups.	 *	 * @since 3.0.0	 *	 * @param array $groups List of groups that are global.	 */	function add_global_groups( $groups ) {		$groups = (array) $groups;		$this->global_groups = array_merge($this->global_groups, $groups);		$this->global_groups = array_unique($this->global_groups);	}	/**	 * Remove the contents of the cache ID in the group	 *	 * If the cache ID does not exist in the group and $force parameter is set	 * to false, then nothing will happen. The $force parameter is set to false	 * by default.	 *	 * On success the group and the id will be added to the	 * $non_existent_objects property in the class.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @param bool $force Optional. Whether to force the unsetting of the cache	 *		ID in the group	 * @return bool False if the contents weren't deleted and true on success	 */	function delete($id, $group = 'default', $force = false) {		if (empty ($group))			$group = 'default';		if (!$force && false === $this->get($id, $group))			return false;		unset ($this->cache[$group][$id]);		$this->non_existent_objects[$group][$id] = true;		return true;	}	/**	 * Clears the object cache of all data	 *	 * @since 2.0.0	 *	 * @return bool Always returns true	 */	function flush() {		$this->cache = array ();		return true;	}	/**	 * Retrieves the cache contents, if it exists	 *	 * The contents will be first attempted to be retrieved by searching by the	 * ID in the cache group. If the cache is hit (success) then the contents	 * are returned.	 *	 * On failure, the $non_existent_objects property is checked and if the	 * cache group and ID exist in there the cache misses will not be	 * incremented. If not in the nonexistent objects property, then the cache	 * misses will be incremented and the cache group and ID will be added to	 * the nonexistent objects.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @return bool|mixed False on failure to retrieve contents or the cache	 *		contents on success	 */	function get($id, $group = 'default') {		if ( empty ($group) )			$group = 'default';		if ( isset ($this->cache[$group][$id]) ) {			$this->cache_hits += 1;			if ( is_object($this->cache[$group][$id]) )				return wp_clone($this->cache[$group][$id]);			else				return $this->cache[$group][$id];		}		if ( isset ($this->non_existent_objects[$group][$id]) )			return false;		$this->non_existent_objects[$group][$id] = true;		$this->cache_misses += 1;		return false;	}	/**	 * Replace the contents in the cache, if contents already exist	 *	 * @since 2.0.0	 * @see WP_Object_Cache::set()	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if not exists, true if contents were replaced	 */	function replace($id, $data, $group = 'default', $expire = '') {		if (empty ($group))			$group = 'default';		if ( false === $this->get($id, $group) )			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Reset keys	 *	 * @since 3.0.0	 */	function reset() {		// Clear out non-global caches since the blog ID has changed.		foreach ( array_keys($this->cache) as $group ) {			if ( !in_array($group, $this->global_groups) )				unset($this->cache[$group]);		}	}	/**	 * Sets the data contents into the cache	 *	 * The cache contents is grouped by the $group parameter followed by the	 * $id. This allows for duplicate ids in unique groups. Therefore, naming of	 * the group should be used with care and should follow normal function	 * naming guidelines outside of core WordPress usage.	 *	 * The $expire parameter is not used, because the cache will automatically	 * expire for each time a page is accessed and PHP finishes. The method is	 * more for cache plugins which use files.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire Not Used	 * @return bool Always returns true	 */	function set($id, $data, $group = 'default', $expire = '') {		if ( empty ($group) )			$group = 'default';		if ( NULL === $data )			$data = '';		if ( is_object($data) )			$data = wp_clone($data);		$this->cache[$group][$id] = $data;		if ( isset($this->non_existent_objects[$group][$id]) )			unset ($this->non_existent_objects[$group][$id]);		return true;	}	/**	 * Echoes the stats of the caching.	 *	 * Gives the cache hits, and cache misses. Also prints every cached group,	 * key and the data.	 *	 * @since 2.0.0	 */	function stats() {		echo "<p>";		echo "<strong>Cache Hits:</strong> {$this->cache_hits}<br />";		echo "<strong>Cache Misses:</strong> {$this->cache_misses}<br />";		echo "</p>";		foreach ($this->cache as $group => $cache) {			echo "<p>";			echo "<strong>Group:</strong> $group<br />";			echo "<strong>Cache:</strong>";			echo "<pre>";			print_r($cache);			echo "</pre>";		}	}	/**	 * PHP4 constructor; Calls PHP 5 style constructor	 *	 * @since 2.0.0	 *	 * @return WP_Object_Cache	 */	function WP_Object_Cache() {		return $this->__construct();	}	/**	 * Sets up object properties; PHP 5 style constructor	 *	 * @since 2.0.8	 * @return null|WP_Object_Cache If cache is disabled, returns null.	 */	function __construct() {		/**		 * @todo This should be moved to the PHP4 style constructor, PHP5		 * already calls __destruct()		 */		register_shutdown_function(array(&$this, "__destruct"));	}	/**	 * Will save the object cache before object is completely destroyed.	 *	 * Called upon object destruction, which should be when PHP ends.	 *	 * @since  2.0.8	 *	 * @return bool True value. Won't be used by PHP	 */	function __destruct() {		return true;	}}?>
<?php/** * Atom Feed Template for displaying Atom Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><feed  xmlns="http://www.w3.org/2005/Atom"  xmlns:thr="http://purl.org/syndication/thread/1.0"  xml:lang="<?php echo get_option('rss_language'); ?>"  xml:base="<?php bloginfo_rss('url') ?>/wp-atom.php"  <?php do_action('atom_ns'); ?> >	<title type="text"><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<subtitle type="text"><?php bloginfo_rss("description") ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated>	<link rel="alternate" type="text/html" href="<?php bloginfo_rss('url') ?>" />	<id><?php bloginfo('atom_url'); ?></id>	<link rel="self" type="application/atom+xml" href="<?php self_link(); ?>" />	<?php do_action('atom_head'); ?>	<?php while (have_posts()) : the_post(); ?>	<entry>		<author>			<name><?php the_author() ?></name>			<?php $author_url = get_the_author_meta('url'); if ( !empty($author_url) ) : ?>			<uri><?php the_author_meta('url')?></uri>			<?php endif; ?>		</author>		<title type="<?php html_type_rss(); ?>"><![CDATA[<?php the_title_rss() ?>]]></title>		<link rel="alternate" type="text/html" href="<?php the_permalink_rss() ?>" />		<id><?php the_guid() ; ?></id>		<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>		<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>		<?php the_category_rss('atom') ?>		<summary type="<?php html_type_rss(); ?>"><![CDATA[<?php the_excerpt_rss(); ?>]]></summary><?php if ( !get_option('rss_use_excerpt') ) : ?>		<content type="<?php html_type_rss(); ?>" xml:base="<?php the_permalink_rss() ?>"><![CDATA[<?php the_content_feed('atom') ?>]]></content><?php endif; ?><?php atom_enclosure(); ?><?php do_action('atom_entry'); ?>		<link rel="replies" type="text/html" href="<?php the_permalink_rss() ?>#comments" thr:count="<?php echo get_comments_number()?>"/>		<link rel="replies" type="application/atom+xml" href="<?php echo get_post_comments_feed_link(0,'atom') ?>" thr:count="<?php echo get_comments_number()?>"/>		<thr:total><?php echo get_comments_number()?></thr:total>	</entry>	<?php endwhile ; ?></feed>
<?php/** * Navigation Menu functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Returns a navigation menu object. * * @since 3.0.0 * * @uses get_term * @uses get_term_by * * @param string $menu Menu id, slug or name * @return mixed false if $menu param isn't supplied or term does not exist, menu object if successful. */function wp_get_nav_menu_object( $menu ) {	if ( ! $menu )		return false;	$menu_obj = get_term( $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'slug', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'name', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = false;	return $menu_obj;}/** * Check if the given ID is a navigation menu. * * Returns true if it is; false otherwise. * * @since 3.0.0 * * @param int|string $menu The menu to check (id, slug, or name) * @return bool Whether the menu exists. */function is_nav_menu( $menu ) {	if ( ! $menu )		return false;	$menu_obj = wp_get_nav_menu_object( $menu );	if (		$menu_obj &&		! is_wp_error( $menu_obj ) &&		! empty( $menu_obj->taxonomy ) &&		'nav_menu' == $menu_obj->taxonomy	)		return true;	return false;}/** * Register navigation menus for a theme. * * @since 3.0.0 * * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text. */function register_nav_menus( $locations = array() ) {	global $_wp_registered_nav_menus;	add_theme_support( 'menus' );	$_wp_registered_nav_menus = array_merge( (array) $_wp_registered_nav_menus, $locations );}/** * Register a navigation menu for a theme. * * @since 3.0.0 * * @param string $location Menu location identifier, like a slug. * @param string $description Menu location descriptive text. */function register_nav_menu( $location, $description ) {	register_nav_menus( array( $location => $description ) );}/** * Returns an array of all registered navigation menus in a theme * * @since 3.0.0 * @return array */function get_registered_nav_menus() {	global $_wp_registered_nav_menus;	if ( isset( $_wp_registered_nav_menus ) )		return $_wp_registered_nav_menus;	return array();}/** * Returns an array with the registered navigation menu locations and the menu assigned to it * * @since 3.0.0 * @return array */function get_nav_menu_locations() {	return get_theme_mod( 'nav_menu_locations' );}/** * Whether a registered nav menu location has a menu assigned to it. * * @since 3.0.0 * @param string $location Menu location identifier. * @return bool Whether location has a menu. */function has_nav_menu( $location ) {	$locations = get_nav_menu_locations();	return ( ! empty( $locations[ $location ] ) );}/** * Determine whether the given ID is a nav menu item. * * @since 3.0.0 * * @param int $menu_item_id The ID of the potential nav menu item. * @return bool Whether the given ID is that of a nav menu item. */function is_nav_menu_item( $menu_item_id = 0 ) {	return ( ! is_wp_error( $menu_item_id ) && ( 'nav_menu_item' == get_post_type( $menu_item_id ) ) );}/** * Create a Navigation Menu. * * @since 3.0.0 * * @param string $menu_name Menu Name * @return mixed Menu object on success|WP_Error on failure */function wp_create_nav_menu( $menu_name ) {	return wp_update_nav_menu_object( 0, array( 'menu-name' => $menu_name ) );}/** * Delete a Navigation Menu. * * @since 3.0.0 * * @param string $menu name|id|slug * @return mixed Menu object on success|WP_Error on failure */function wp_delete_nav_menu( $menu ) {	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	$menu_objects = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( ! empty( $menu_objects ) ) {		foreach ( $menu_objects as $item ) {			wp_delete_post( $item );		}	}	$result = wp_delete_term( $menu->term_id, 'nav_menu' );	if ( $result && !is_wp_error($result) )		do_action( 'wp_delete_nav_menu', $menu->term_id );	return $result;}/** * Save the properties of a menu or create a new menu with those properties. * * @since 3.0.0 * * @param int $menu_id The ID of the menu or "0" to create a new menu. * @param array $menu_data The array of menu data. * @return int|error object The menu's ID or WP_Error object. */function wp_update_nav_menu_object( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$_menu = wp_get_nav_menu_object( $menu_id );	$args = array(		'description' => ( isset( $menu_data['description'] ) ? $menu_data['description']  : '' ),		'name'        => ( isset( $menu_data['menu-name']   ) ? $menu_data['menu-name']    : '' ),		'parent'      => ( isset( $menu_data['parent']      ) ? (int) $menu_data['parent'] : 0  ),		'slug'        => null,	);	// double-check that we're not going to have one menu take the name of another	$_possible_existing = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );	if (		$_possible_existing &&		! is_wp_error( $_possible_existing ) &&		isset( $_possible_existing->term_id ) &&		$_possible_existing->term_id != $menu_id	)		return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );	// menu doesn't already exist, so create a new menu	if ( ! $_menu || is_wp_error( $_menu ) ) {		$menu_exists = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );		if ( $menu_exists )			return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );		$_menu = wp_insert_term( $menu_data['menu-name'], 'nav_menu', $args );		if ( is_wp_error( $_menu ) )			return $_menu;		do_action( 'wp_create_nav_menu', $_menu['term_id'], $menu_data );		return (int) $_menu['term_id'];	}	if ( ! $_menu || ! isset( $_menu->term_id ) )		return 0;	$menu_id = (int) $_menu->term_id;	$update_response = wp_update_term( $menu_id, 'nav_menu', $args );	if ( is_wp_error( $update_response ) )		return $update_response;	do_action( 'wp_update_nav_menu', $menu_id, $menu_data );	return $menu_id;}/** * Save the properties of a menu item or create a new one. * * @since 3.0.0 * * @param int $menu_id The ID of the menu. Required. If "0", makes the menu item a draft orphan. * @param int $menu_item_db_id The ID of the menu item. If "0", creates a new menu item. * @param array $menu_item_data The menu item's data. * @return int The menu item's database ID or WP_Error object on failure. */function wp_update_nav_menu_item( $menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array() ) {	$menu_id = (int) $menu_id;	$menu_item_db_id = (int) $menu_item_db_id;	// make sure that we don't convert non-nav_menu_item objects into nav_menu_item objects	if ( ! empty( $menu_item_db_id ) && ! is_nav_menu_item( $menu_item_db_id ) )		return new WP_Error('update_nav_menu_item_failed', __('The given object ID is not that of a menu item.'));	$menu = wp_get_nav_menu_object( $menu_id );	if ( ( ! $menu && 0 !== $menu_id ) || is_wp_error( $menu ) )		return $menu;	$menu_items = 0 == $menu_id ? array() : (array) wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );	$count = count( $menu_items );	$defaults = array(		'menu-item-db-id' => $menu_item_db_id,		'menu-item-object-id' => 0,		'menu-item-object' => '',		'menu-item-parent-id' => 0,		'menu-item-position' => 0,		'menu-item-type' => 'custom',		'menu-item-title' => '',		'menu-item-url' => '',		'menu-item-description' => '',		'menu-item-attr-title' => '',		'menu-item-target' => '',		'menu-item-classes' => '',		'menu-item-xfn' => '',		'menu-item-status' => '',	);	$args = wp_parse_args( $menu_item_data, $defaults );	if ( 0 == $menu_id ) {		$args['menu-item-position'] = 1;	} elseif ( 0 == (int) $args['menu-item-position'] ) {		$last_item = array_pop( $menu_items );		$args['menu-item-position'] = ( $last_item && isset( $last_item->menu_order ) ) ? 1 + $last_item->menu_order : $count;	}	$original_parent = 0 < $menu_item_db_id ? get_post_field( 'post_parent', $menu_item_db_id ) : 0;	if ( 'custom' != $args['menu-item-type'] ) {		/* if non-custom menu item, then:			* use original object's URL			* blank default title to sync with original object's		*/		$args['menu-item-url'] = '';		$original_title = '';		if ( 'taxonomy' == $args['menu-item-type'] ) {			$original_parent = get_term_field( 'parent', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );			$original_title = get_term_field( 'name', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );		} elseif ( 'post_type' == $args['menu-item-type'] ) {			$original_object = get_post( $args['menu-item-object-id'] );			$original_parent = (int) $original_object->post_parent;			$original_title = $original_object->post_title;		}		if ( empty( $args['menu-item-title'] ) || $args['menu-item-title'] == $original_title ) {			$args['menu-item-title'] = '';			// hack to get wp to create a post object when too many properties are empty			if ( empty( $args['menu-item-description'] ) )				$args['menu-item-description'] = ' ';		}	}	// Populate the menu item object	$post = array(		'menu_order' => $args['menu-item-position'],		'ping_status' => 0,		'post_content' => $args['menu-item-description'],		'post_excerpt' => $args['menu-item-attr-title'],		'post_parent' => $original_parent,		'post_title' => $args['menu-item-title'],		'post_type' => 'nav_menu_item',	);	if ( 0 != $menu_id )		$post['tax_input'] = array( 'nav_menu' => array( intval( $menu->term_id ) ) );	// New menu item. Default is draft status	if ( 0 == $menu_item_db_id ) {		$post['ID'] = 0;		$post['post_status'] = 'publish' == $args['menu-item-status'] ? 'publish' : 'draft';		$menu_item_db_id = wp_insert_post( $post );	// Update existing menu item. Default is publish status	} else {		$post['ID'] = $menu_item_db_id;		$post['post_status'] = 'draft' == $args['menu-item-status'] ? 'draft' : 'publish';		wp_update_post( $post );	}	if ( 'custom' == $args['menu-item-type'] ) {		$args['menu-item-object-id'] = $menu_item_db_id;		$args['menu-item-object'] = 'custom';	}	if ( ! $menu_item_db_id || is_wp_error( $menu_item_db_id ) )		return $menu_item_db_id;	$menu_item_db_id = (int) $menu_item_db_id;	update_post_meta( $menu_item_db_id, '_menu_item_type', sanitize_key($args['menu-item-type']) );	update_post_meta( $menu_item_db_id, '_menu_item_menu_item_parent', (int) $args['menu-item-parent-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object_id', (int) $args['menu-item-object-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object', sanitize_key($args['menu-item-object']) );	update_post_meta( $menu_item_db_id, '_menu_item_target', sanitize_key($args['menu-item-target']) );	$args['menu-item-classes'] = array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-classes'] ) );	$args['menu-item-xfn'] = implode( ' ', array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-xfn'] ) ) );	update_post_meta( $menu_item_db_id, '_menu_item_classes', $args['menu-item-classes'] );	update_post_meta( $menu_item_db_id, '_menu_item_xfn', $args['menu-item-xfn'] );	update_post_meta( $menu_item_db_id, '_menu_item_url', esc_url_raw($args['menu-item-url']) );	if ( 0 == $menu_id )		update_post_meta( $menu_item_db_id, '_menu_item_orphaned', time() );	else		delete_post_meta( $menu_item_db_id, '_menu_item_orphaned' );	do_action('wp_update_nav_menu_item', $menu_id, $menu_item_db_id, $args );	return $menu_item_db_id;}/** * Returns all navigation menu objects. * * @since 3.0.0 * * @param $args array Array of arguments passed on to get_terms(). * @return array menu objects */function wp_get_nav_menus( $args = array() ) {	$defaults = array( 'hide_empty' => false, 'orderby' => 'none' );	$args = wp_parse_args( $args, $defaults );	return apply_filters( 'wp_get_nav_menus', get_terms( 'nav_menu',  $args), $args );}/** * Sort menu items by the desired key. * * @since 3.0.0 * @access private * * @param object $a The first object to compare * @param object $b The second object to compare * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b. */function _sort_nav_menu_items( $a, $b ) {	global $_menu_item_sort_prop;	if ( empty( $_menu_item_sort_prop ) )		return 0;	if ( ! isset( $a->$_menu_item_sort_prop ) || ! isset( $b->$_menu_item_sort_prop ) )		return 0;	$_a = (int) $a->$_menu_item_sort_prop;	$_b = (int) $b->$_menu_item_sort_prop;	if ( $a->$_menu_item_sort_prop == $b->$_menu_item_sort_prop )		return 0;	elseif ( $_a == $a->$_menu_item_sort_prop && $_b == $b->$_menu_item_sort_prop )		return $_a < $_b ? -1 : 1;	else		return strcmp( $a->$_menu_item_sort_prop, $b->$_menu_item_sort_prop );}/** * Returns all menu items of a navigation menu. * * @since 3.0.0 * * @param string $menu menu name, id, or slug * @param string $args * @return mixed $items array of menu items, else false. */function wp_get_nav_menu_items( $menu, $args = array() ) {	global $_wp_using_ext_object_cache;	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	static $fetched = array();	$items = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( empty( $items ) )		return $items;	$defaults = array( 'order' => 'ASC', 'orderby' => 'menu_order', 'post_type' => 'nav_menu_item',		'post_status' => 'publish', 'output' => ARRAY_A, 'output_key' => 'menu_order', 'nopaging' => true,		'update_post_term_cache' => false );	$args = wp_parse_args( $args, $defaults );	if ( count( $items ) > 1 )		$args['include'] = implode( ',', $items );	else		$args['include'] = $items[0];	$items = get_posts( $args );	if ( is_wp_error( $items ) || ! is_array( $items ) )		return false;	// Get all posts and terms at once to prime the caches	if ( empty( $fetched[$menu->term_id] ) || $_wp_using_ext_object_cache ) {		$fetched[$menu->term_id] = true;		$posts = array();		$terms = array();		foreach ( $items as $item ) {			$object_id = get_post_meta( $item->ID, '_menu_item_object_id', true );			$object    = get_post_meta( $item->ID, '_menu_item_object',    true );			$type      = get_post_meta( $item->ID, '_menu_item_type',      true );			if ( 'post_type' == $type )				$posts[$object][] = $object_id;			elseif ( 'taxonomy' == $type)				$terms[$object][] = $object_id;		}		if ( ! empty( $posts ) ) {			foreach ( array_keys($posts) as $post_type ) {				get_posts( array('post__in' => $posts[$post_type], 'post_type' => $post_type, 'nopaging' => true, 'update_post_term_cache' => false) );			}		}		unset($posts);		if ( ! empty( $terms ) ) {			foreach ( array_keys($terms) as $taxonomy ) {				get_terms($taxonomy, array('include' => $terms[$taxonomy]) );			}		}		unset($terms);	}	$items = array_map( 'wp_setup_nav_menu_item', $items );	if ( ARRAY_A == $args['output'] ) {		$GLOBALS['_menu_item_sort_prop'] = $args['output_key'];		usort($items, '_sort_nav_menu_items');		$i = 1;		foreach( $items as $k => $item ) {			$items[$k]->$args['output_key'] = $i++;		}	}	return apply_filters( 'wp_get_nav_menu_items',  $items, $menu, $args );}/** * Decorates a menu item object with the shared navigation menu item properties. * * Properties: * - db_id: 		The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist). * - object_id:		The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories. * - type:		The family of objects originally represented, such as "post_type" or "taxonomy." * - object:		The type of object originally represented, such as "category," "post", or "attachment." * - type_label:	The singular label used to describe this type of menu item. * - post_parent:	The DB ID of the original object's parent object, if any (0 otherwise). * - menu_item_parent: 	The DB ID of the nav_menu_item that is this item's menu parent, if any.  0 otherwise. * - url:		The URL to which this menu item points. * - title:		The title of this menu item. * - target: 		The target attribute of the link element for this menu item. * - attr_title:	The title attribute of the link element for this menu item. * - classes:		The array of class attribute values for the link element of this menu item. * - xfn:		The XFN relationship expressed in the link of this menu item. * - description:	The description of this menu item. * * @since 3.0.0 * * @param object $menu_item The menu item to modify. * @return object $menu_item The menu item with standard menu item properties. */function wp_setup_nav_menu_item( $menu_item ) {	if ( isset( $menu_item->post_type ) ) {		if ( 'nav_menu_item' == $menu_item->post_type ) {			$menu_item->db_id = (int) $menu_item->ID;			$menu_item->menu_item_parent = empty( $menu_item->menu_item_parent ) ? get_post_meta( $menu_item->ID, '_menu_item_menu_item_parent', true ) : $menu_item->menu_item_parent;			$menu_item->object_id = empty( $menu_item->object_id ) ? get_post_meta( $menu_item->ID, '_menu_item_object_id', true ) : $menu_item->object_id;			$menu_item->object = empty( $menu_item->object ) ? get_post_meta( $menu_item->ID, '_menu_item_object', true ) : $menu_item->object;			$menu_item->type = empty( $menu_item->type ) ? get_post_meta( $menu_item->ID, '_menu_item_type', true ) : $menu_item->type;			if ( 'post_type' == $menu_item->type ) {				$object = get_post_type_object( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$menu_item->url = get_permalink( $menu_item->object_id );				$original_object = get_post( $menu_item->object_id );				$original_title = $original_object->post_title;				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} elseif ( 'taxonomy' == $menu_item->type ) {				$object = get_taxonomy( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$term_url = get_term_link( (int) $menu_item->object_id, $menu_item->object );				$menu_item->url = !is_wp_error( $term_url ) ? $term_url : '';				$original_title = get_term_field( 'name', $menu_item->object_id, $menu_item->object, 'raw' );				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} else {				$menu_item->type_label = __('Custom');				$menu_item->title = $menu_item->post_title;				$menu_item->url = empty( $menu_item->url ) ? get_post_meta( $menu_item->ID, '_menu_item_url', true ) : $menu_item->url;			}			$menu_item->target = empty( $menu_item->target ) ? get_post_meta( $menu_item->ID, '_menu_item_target', true ) : $menu_item->target;			$menu_item->attr_title = empty( $menu_item->attr_title ) ? apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt ) : $menu_item->attr_title;			$menu_item->description = empty( $menu_item->description ) ? apply_filters( 'nav_menu_description', $menu_item->post_content ) : $menu_item->description;			$menu_item->classes = empty( $menu_item->classes ) ? (array) get_post_meta( $menu_item->ID, '_menu_item_classes', true ) : $menu_item->classes;			$menu_item->xfn = empty( $menu_item->xfn ) ? get_post_meta( $menu_item->ID, '_menu_item_xfn', true ) : $menu_item->xfn;		} else {			$menu_item->db_id = 0;			$menu_item->menu_item_parent = 0;			$menu_item->object_id = (int) $menu_item->ID;			$menu_item->type = 'post_type';			$object = get_post_type_object( $menu_item->post_type );			$menu_item->object = $object->name;			$menu_item->type_label = $object->labels->singular_name;			$menu_item->title = $menu_item->post_title;			$menu_item->url = get_permalink( $menu_item->ID );			$menu_item->target = '';			$menu_item->attr_title = apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt );			$menu_item->description = apply_filters( 'nav_menu_description', $menu_item->post_content );			$menu_item->classes = array();			$menu_item->xfn = '';		}	} elseif ( isset( $menu_item->taxonomy ) ) {		$menu_item->ID = $menu_item->term_id;		$menu_item->db_id = 0;		$menu_item->menu_item_parent = 0;		$menu_item->object_id = (int) $menu_item->term_id;		$menu_item->post_parent = (int) $menu_item->parent;		$menu_item->type = 'taxonomy';		$object = get_taxonomy( $menu_item->taxonomy );		$menu_item->object = $object->name;		$menu_item->type_label = $object->labels->singular_name;		$menu_item->title = $menu_item->name;		$menu_item->url = get_term_link( $menu_item, $menu_item->taxonomy );		$menu_item->target = '';		$menu_item->attr_title = '';		$menu_item->description = get_term_field( 'description', $menu_item->term_id, $menu_item->taxonomy );		$menu_item->classes = array();		$menu_item->xfn = '';	}	return apply_filters( 'wp_setup_nav_menu_item', $menu_item );}/** * Get the menu items associated with a particular object. * * @since 3.0.0 * * @param int $object_id The ID of the original object. * @param string $object_type The type of object, such as "taxonomy" or "post_type." * @return array The array of menu item IDs; empty array if none; */function wp_get_associated_nav_menu_items( $object_id = 0, $object_type = 'post_type' ) {	$object_id = (int) $object_id;	$menu_item_ids = array();	$query = new WP_Query;	$menu_items = $query->query(		array(			'meta_key' => '_menu_item_object_id',			'meta_value' => $object_id,			'post_status' => 'any',			'post_type' => 'nav_menu_item',			'showposts' => -1,		)	);	foreach( (array) $menu_items as $menu_item ) {		if ( isset( $menu_item->ID ) && is_nav_menu_item( $menu_item->ID ) ) {			if ( get_post_meta( $menu_item->ID, '_menu_item_type', true ) != $object_type )				continue;			$menu_item_ids[] = (int) $menu_item->ID;		}	}	return array_unique( $menu_item_ids );}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_post_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'post_type' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_tax_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'taxonomy' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Automatically add newly published page objects to menus with that as an option. * * @since 3.0.0 * @access private * * @param string $new_status The new status of the post object. * @param string $old_status The old status of the post object. * @param object $post The post object being transitioned from one status to another. * @return void */function _wp_auto_add_pages_to_menu( $new_status, $old_status, $post ) {	if ( 'publish' != $new_status || 'publish' == $old_status || 'page' != $post->post_type )		return;	if ( ! empty( $post->post_parent ) )		return;	$auto_add = get_option( 'nav_menu_options' );	if ( empty( $auto_add ) || ! is_array( $auto_add ) || ! isset( $auto_add['auto_add'] ) )		return;	$auto_add = $auto_add['auto_add'];	if ( empty( $auto_add ) || ! is_array( $auto_add ) )		return;	$args = array(		'menu-item-object-id' => $post->ID,		'menu-item-object' => $post->post_type,		'menu-item-type' => 'post_type',		'menu-item-status' => 'publish',	);	foreach ( $auto_add as $menu_id ) {		$items = wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );		if ( ! is_array( $items ) )			continue;		foreach ( $items as $item ) {			if ( $post->ID == $item->object_id )				continue 2;		}		wp_update_nav_menu_item( $menu_id, 0, $args );	}}?>
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Defines the newline characters, if not defined already. * * This can be redefined. * * @since 2.5 * @var string */if(!defined('CRLF')) define('CRLF',"\r\n");/** * Sets whatever to autodetect ASCII mode. * * This can be redefined. * * @since 2.5 * @var int */if(!defined("FTP_AUTOASCII")) define("FTP_AUTOASCII", -1);/** * * This can be redefined. * @since 2.5 * @var int */if(!defined("FTP_BINARY")) define("FTP_BINARY", 1);/** * * This can be redefined. * @since 2.5 * @var int */if(!defined("FTP_ASCII")) define("FTP_ASCII", 0);/** * Whether to force FTP. * * This can be redefined. * * @since 2.5 * @var bool */if(!defined('FTP_FORCE')) define('FTP_FORCE', true);/** * @since 2.5 * @var string */define('FTP_OS_Unix','u');/** * @since 2.5 * @var string */define('FTP_OS_Windows','w');/** * @since 2.5 * @var string */define('FTP_OS_Mac','m');/** * PemFTP base class * */class ftp_base {	/* Public variables */	var $LocalEcho;	var $Verbose;	var $OS_local;	var $OS_remote;	/* Private variables */	var $_lastaction;	var $_errors;	var $_type;	var $_umask;	var $_timeout;	var $_passive;	var $_host;	var $_fullhost;	var $_port;	var $_datahost;	var $_dataport;	var $_ftp_control_sock;	var $_ftp_data_sock;	var $_ftp_temp_sock;	var $_ftp_buff_size;	var $_login;	var $_password;	var $_connected;	var $_ready;	var $_code;	var $_message;	var $_can_restore;	var $_port_available;	var $_curtype;	var $_features;	var $_error_array;	var $AuthorizedTransferMode;	var $OS_FullName;	var $_eol_code;	var $AutoAsciiExt;	/* Constructor */	function ftp_base($port_mode=FALSE) {		$this->__construct($port_mode);	}	function __construct($port_mode=FALSE, $verb=FALSE, $le=FALSE) {		$this->LocalEcho=$le;		$this->Verbose=$verb;		$this->_lastaction=NULL;		$this->_error_array=array();		$this->_eol_code=array(FTP_OS_Unix=>"\n", FTP_OS_Mac=>"\r", FTP_OS_Windows=>"\r\n");		$this->AuthorizedTransferMode=array(FTP_AUTOASCII, FTP_ASCII, FTP_BINARY);		$this->OS_FullName=array(FTP_OS_Unix => 'UNIX', FTP_OS_Windows => 'WINDOWS', FTP_OS_Mac => 'MACOS');		$this->AutoAsciiExt=array("ASP","BAT","C","CPP","CSS","CSV","JS","H","HTM","HTML","SHTML","INI","LOG","PHP3","PHTML","PL","PERL","SH","SQL","TXT");		$this->_port_available=($port_mode==TRUE);		$this->SendMSG("Staring FTP client class".($this->_port_available?"":" without PORT mode support"));		$this->_connected=FALSE;		$this->_ready=FALSE;		$this->_can_restore=FALSE;		$this->_code=0;		$this->_message="";		$this->_ftp_buff_size=4096;		$this->_curtype=NULL;		$this->SetUmask(0022);		$this->SetType(FTP_AUTOASCII);		$this->SetTimeout(30);		$this->Passive(!$this->_port_available);		$this->_login="anonymous";		$this->_password="anon@ftp.com";		$this->_features=array();	    $this->OS_local=FTP_OS_Unix;		$this->OS_remote=FTP_OS_Unix;		$this->features=array();		if(strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') $this->OS_local=FTP_OS_Windows;		elseif(strtoupper(substr(PHP_OS, 0, 3)) === 'MAC') $this->OS_local=FTP_OS_Mac;	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Public functions                                                                  -->// <!-- --------------------------------------------------------------------------------------- -->	function parselisting($line) {		$is_windows = ($this->OS_remote == FTP_OS_Windows);		if ($is_windows && preg_match("/([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)/",$line,$lucifer)) {			$b = array();			if ($lucifer[3]<70) { $lucifer[3]+=2000; } else { $lucifer[3]+=1900; } // 4digit year fix			$b['isdir'] = ($lucifer[7]=="<DIR>");			if ( $b['isdir'] )				$b['type'] = 'd';			else				$b['type'] = 'f';			$b['size'] = $lucifer[7];			$b['month'] = $lucifer[1];			$b['day'] = $lucifer[2];			$b['year'] = $lucifer[3];			$b['hour'] = $lucifer[4];			$b['minute'] = $lucifer[5];			$b['time'] = @mktime($lucifer[4]+(strcasecmp($lucifer[6],"PM")==0?12:0),$lucifer[5],0,$lucifer[1],$lucifer[2],$lucifer[3]);			$b['am/pm'] = $lucifer[6];			$b['name'] = $lucifer[8];		} else if (!$is_windows && $lucifer=preg_split("/[ ]/",$line,9,PREG_SPLIT_NO_EMPTY)) {			//echo $line."\n";			$lcount=count($lucifer);			if ($lcount<8) return '';			$b = array();			$b['isdir'] = $lucifer[0]{0} === "d";			$b['islink'] = $lucifer[0]{0} === "l";			if ( $b['isdir'] )				$b['type'] = 'd';			elseif ( $b['islink'] )				$b['type'] = 'l';			else				$b['type'] = 'f';			$b['perms'] = $lucifer[0];			$b['number'] = $lucifer[1];			$b['owner'] = $lucifer[2];			$b['group'] = $lucifer[3];			$b['size'] = $lucifer[4];			if ($lcount==8) {				sscanf($lucifer[5],"%d-%d-%d",$b['year'],$b['month'],$b['day']);				sscanf($lucifer[6],"%d:%d",$b['hour'],$b['minute']);				$b['time'] = @mktime($b['hour'],$b['minute'],0,$b['month'],$b['day'],$b['year']);				$b['name'] = $lucifer[7];			} else {				$b['month'] = $lucifer[5];				$b['day'] = $lucifer[6];				if (preg_match("/([0-9]{2}):([0-9]{2})/",$lucifer[7],$l2)) {					$b['year'] = date("Y");					$b['hour'] = $l2[1];					$b['minute'] = $l2[2];				} else {					$b['year'] = $lucifer[7];					$b['hour'] = 0;					$b['minute'] = 0;				}				$b['time'] = strtotime(sprintf("%d %s %d %02d:%02d",$b['day'],$b['month'],$b['year'],$b['hour'],$b['minute']));				$b['name'] = $lucifer[8];			}		}		return $b;	}	function SendMSG($message = "", $crlf=true) {		if ($this->Verbose) {			echo $message.($crlf?CRLF:"");			flush();		}		return TRUE;	}	function SetType($mode=FTP_AUTOASCII) {		if(!in_array($mode, $this->AuthorizedTransferMode)) {			$this->SendMSG("Wrong type");			return FALSE;		}		$this->_type=$mode;		$this->SendMSG("Transfer type: ".($this->_type==FTP_BINARY?"binary":($this->_type==FTP_ASCII?"ASCII":"auto ASCII") ) );		return TRUE;	}	function _settype($mode=FTP_ASCII) {		if($this->_ready) {			if($mode==FTP_BINARY) {				if($this->_curtype!=FTP_BINARY) {					if(!$this->_exec("TYPE I", "SetType")) return FALSE;					$this->_curtype=FTP_BINARY;				}			} elseif($this->_curtype!=FTP_ASCII) {				if(!$this->_exec("TYPE A", "SetType")) return FALSE;				$this->_curtype=FTP_ASCII;			}		} else return FALSE;		return TRUE;	}	function Passive($pasv=NULL) {		if(is_null($pasv)) $this->_passive=!$this->_passive;		else $this->_passive=$pasv;		if(!$this->_port_available and !$this->_passive) {			$this->SendMSG("Only passive connections available!");			$this->_passive=TRUE;			return FALSE;		}		$this->SendMSG("Passive mode ".($this->_passive?"on":"off"));		return TRUE;	}	function SetServer($host, $port=21, $reconnect=true) {		if(!is_long($port)) {	        $this->verbose=true;    	    $this->SendMSG("Incorrect port syntax");			return FALSE;		} else {			$ip=@gethostbyname($host);	        $dns=@gethostbyaddr($host);	        if(!$ip) $ip=$host;	        if(!$dns) $dns=$host;	        // Validate the IPAddress PHP4 returns -1 for invalid, PHP5 false	        // -1 === "255.255.255.255" which is the broadcast address which is also going to be invalid	        $ipaslong = ip2long($ip);			if ( ($ipaslong == false) || ($ipaslong === -1) ) {				$this->SendMSG("Wrong host name/address \"".$host."\"");				return FALSE;			}	        $this->_host=$ip;	        $this->_fullhost=$dns;	        $this->_port=$port;	        $this->_dataport=$port-1;		}		$this->SendMSG("Host \"".$this->_fullhost."(".$this->_host."):".$this->_port."\"");		if($reconnect){			if($this->_connected) {				$this->SendMSG("Reconnecting");				if(!$this->quit(FTP_FORCE)) return FALSE;				if(!$this->connect()) return FALSE;			}		}		return TRUE;	}	function SetUmask($umask=0022) {		$this->_umask=$umask;		umask($this->_umask);		$this->SendMSG("UMASK 0".decoct($this->_umask));		return TRUE;	}	function SetTimeout($timeout=30) {		$this->_timeout=$timeout;		$this->SendMSG("Timeout ".$this->_timeout);		if($this->_connected)			if(!$this->_settimeout($this->_ftp_control_sock)) return FALSE;		return TRUE;	}	function connect($server=NULL) {		if(!empty($server)) {			if(!$this->SetServer($server)) return false;		}		if($this->_ready) return true;	    $this->SendMsg('Local OS : '.$this->OS_FullName[$this->OS_local]);		if(!($this->_ftp_control_sock = $this->_connect($this->_host, $this->_port))) {			$this->SendMSG("Error : Cannot connect to remote host \"".$this->_fullhost." :".$this->_port."\"");			return FALSE;		}		$this->SendMSG("Connected to remote host \"".$this->_fullhost.":".$this->_port."\". Waiting for greeting.");		do {			if(!$this->_readmsg()) return FALSE;			if(!$this->_checkCode()) return FALSE;			$this->_lastaction=time();		} while($this->_code<200);		$this->_ready=true;		$syst=$this->systype();		if(!$syst) $this->SendMSG("Can't detect remote OS");		else {			if(preg_match("/win|dos|novell/i", $syst[0])) $this->OS_remote=FTP_OS_Windows;			elseif(preg_match("/os/i", $syst[0])) $this->OS_remote=FTP_OS_Mac;			elseif(preg_match("/(li|u)nix/i", $syst[0])) $this->OS_remote=FTP_OS_Unix;			else $this->OS_remote=FTP_OS_Mac;			$this->SendMSG("Remote OS: ".$this->OS_FullName[$this->OS_remote]);		}		if(!$this->features()) $this->SendMSG("Can't get features list. All supported - disabled");		else $this->SendMSG("Supported features: ".implode(", ", array_keys($this->_features)));		return TRUE;	}	function quit($force=false) {		if($this->_ready) {			if(!$this->_exec("QUIT") and !$force) return FALSE;			if(!$this->_checkCode() and !$force) return FALSE;			$this->_ready=false;			$this->SendMSG("Session finished");		}		$this->_quit();		return TRUE;	}	function login($user=NULL, $pass=NULL) {		if(!is_null($user)) $this->_login=$user;		else $this->_login="anonymous";		if(!is_null($pass)) $this->_password=$pass;		else $this->_password="anon@anon.com";		if(!$this->_exec("USER ".$this->_login, "login")) return FALSE;		if(!$this->_checkCode()) return FALSE;		if($this->_code!=230) {			if(!$this->_exec((($this->_code==331)?"PASS ":"ACCT ").$this->_password, "login")) return FALSE;			if(!$this->_checkCode()) return FALSE;		}		$this->SendMSG("Authentication succeeded");		if(empty($this->_features)) {			if(!$this->features()) $this->SendMSG("Can't get features list. All supported - disabled");			else $this->SendMSG("Supported features: ".implode(", ", array_keys($this->_features)));		}		return TRUE;	}	function pwd() {		if(!$this->_exec("PWD", "pwd")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return ereg_replace("^[0-9]{3} \"(.+)\".+", "\\1", $this->_message);	}	function cdup() {		if(!$this->_exec("CDUP", "cdup")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return true;	}	function chdir($pathname) {		if(!$this->_exec("CWD ".$pathname, "chdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function rmdir($pathname) {		if(!$this->_exec("RMD ".$pathname, "rmdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function mkdir($pathname) {		if(!$this->_exec("MKD ".$pathname, "mkdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function rename($from, $to) {		if(!$this->_exec("RNFR ".$from, "rename")) return FALSE;		if(!$this->_checkCode()) return FALSE;		if($this->_code==350) {			if(!$this->_exec("RNTO ".$to, "rename")) return FALSE;			if(!$this->_checkCode()) return FALSE;		} else return FALSE;		return TRUE;	}	function filesize($pathname) {		if(!isset($this->_features["SIZE"])) {			$this->PushError("filesize", "not supported by server");			return FALSE;		}		if(!$this->_exec("SIZE ".$pathname, "filesize")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return ereg_replace("^[0-9]{3} ([0-9]+)".CRLF, "\\1", $this->_message);	}	function abort() {		if(!$this->_exec("ABOR", "abort")) return FALSE;		if(!$this->_checkCode()) {			if($this->_code!=426) return FALSE;			if(!$this->_readmsg("abort")) return FALSE;			if(!$this->_checkCode()) return FALSE;		}		return true;	}	function mdtm($pathname) {		if(!isset($this->_features["MDTM"])) {			$this->PushError("mdtm", "not supported by server");			return FALSE;		}		if(!$this->_exec("MDTM ".$pathname, "mdtm")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$mdtm = ereg_replace("^[0-9]{3} ([0-9]+)".CRLF, "\\1", $this->_message);		$date = sscanf($mdtm, "%4d%2d%2d%2d%2d%2d");		$timestamp = mktime($date[3], $date[4], $date[5], $date[1], $date[2], $date[0]);		return $timestamp;	}	function systype() {		if(!$this->_exec("SYST", "systype")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$DATA = explode(" ", $this->_message);		return array($DATA[1], $DATA[3]);	}	function delete($pathname) {		if(!$this->_exec("DELE ".$pathname, "delete")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function site($command, $fnction="site") {		if(!$this->_exec("SITE ".$command, $fnction)) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function chmod($pathname, $mode) {		if(!$this->site( sprintf('CHMOD %o %s', $mode, $pathname), "chmod")) return FALSE;		return TRUE;	}	function restore($from) {		if(!isset($this->_features["REST"])) {			$this->PushError("restore", "not supported by server");			return FALSE;		}		if($this->_curtype!=FTP_BINARY) {			$this->PushError("restore", "can't restore in ASCII mode");			return FALSE;		}		if(!$this->_exec("REST ".$from, "resore")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function features() {		if(!$this->_exec("FEAT", "features")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$f=preg_split("/[".CRLF."]+/", preg_replace("/[0-9]{3}[ -].*[".CRLF."]+/", "", $this->_message), -1, PREG_SPLIT_NO_EMPTY);		$this->_features=array();		foreach($f as $k=>$v) {			$v=explode(" ", trim($v));			$this->_features[array_shift($v)]=$v;		}		return true;	}	function rawlist($pathname="", $arg="") {		return $this->_list(($arg?" ".$arg:"").($pathname?" ".$pathname:""), "LIST", "rawlist");	}	function nlist($pathname="") {		return $this->_list(($arg?" ".$arg:"").($pathname?" ".$pathname:""), "NLST", "nlist");	}	function is_exists($pathname) {		return $this->file_exists($pathname);	}	function file_exists($pathname) {		$exists=true;		if(!$this->_exec("RNFR ".$pathname, "rename")) $exists=FALSE;		else {			if(!$this->_checkCode()) $exists=FALSE;			$this->abort();		}		if($exists) $this->SendMSG("Remote file ".$pathname." exists");		else $this->SendMSG("Remote file ".$pathname." does not exist");		return $exists;	}	function fget($fp, $remotefile,$rest=0) {		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("RETR ".$remotefile, "get")) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$out=$this->_data_read($mode, $fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $out;	}	function get($remotefile, $localfile=NULL, $rest=0) {		if(is_null($localfile)) $localfile=$remotefile;		if (@file_exists($localfile)) $this->SendMSG("Warning : local file will be overwritten");		$fp = @fopen($localfile, "w");		if (!$fp) {			$this->PushError("get","can't open local file", "Cannot create \"".$localfile."\"");			return FALSE;		}		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			fclose($fp);			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("RETR ".$remotefile, "get")) {			$this->_data_close();			fclose($fp);			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			fclose($fp);			return FALSE;		}		$out=$this->_data_read($mode, $fp);		fclose($fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $out;	}	function fput($remotefile, $fp) {		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("STOR ".$remotefile, "put")) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$ret=$this->_data_write($mode, $fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $ret;	}	function put($localfile, $remotefile=NULL, $rest=0) {		if(is_null($remotefile)) $remotefile=$localfile;		if (!file_exists($localfile)) {			$this->PushError("put","can't open local file", "No such file or directory \"".$localfile."\"");			return FALSE;		}		$fp = @fopen($localfile, "r");		if (!$fp) {			$this->PushError("put","can't open local file", "Cannot read file \"".$localfile."\"");			return FALSE;		}		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($localfile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			fclose($fp);			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("STOR ".$remotefile, "put")) {			$this->_data_close();			fclose($fp);			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			fclose($fp);			return FALSE;		}		$ret=$this->_data_write($mode, $fp);		fclose($fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $ret;	}	function mput($local=".", $remote=NULL, $continious=false) {		$local=realpath($local);		if(!@file_exists($local)) {			$this->PushError("mput","can't open local folder", "Cannot stat folder \"".$local."\"");			return FALSE;		}		if(!is_dir($local)) return $this->put($local, $remote);		if(empty($remote)) $remote=".";		elseif(!$this->file_exists($remote) and !$this->mkdir($remote)) return FALSE;		if($handle = opendir($local)) {			$list=array();			while (false !== ($file = readdir($handle))) {				if ($file != "." && $file != "..") $list[]=$file;			}			closedir($handle);		} else {			$this->PushError("mput","can't open local folder", "Cannot read folder \"".$local."\"");			return FALSE;		}		if(empty($list)) return TRUE;		$ret=true;		foreach($list as $el) {			if(is_dir($local."/".$el)) $t=$this->mput($local."/".$el, $remote."/".$el);			else $t=$this->put($local."/".$el, $remote."/".$el);			if(!$t) {				$ret=FALSE;				if(!$continious) break;			}		}		return $ret;	}	function mget($remote, $local=".", $continious=false) {		$list=$this->rawlist($remote, "-lA");		if($list===false) {			$this->PushError("mget","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return FALSE;		}		if(empty($list)) return true;		if(!@file_exists($local)) {			if(!@mkdir($local)) {				$this->PushError("mget","can't create local folder", "Cannot create folder \"".$local."\"");				return FALSE;			}		}		foreach($list as $k=>$v) {			$list[$k]=$this->parselisting($v);			if($list[$k]["name"]=="." or $list[$k]["name"]=="..") unset($list[$k]);		}		$ret=true;		foreach($list as $el) {			if($el["type"]=="d") {				if(!$this->mget($remote."/".$el["name"], $local."/".$el["name"], $continious)) {					$this->PushError("mget", "can't copy folder", "Can't copy remote folder \"".$remote."/".$el["name"]."\" to local \"".$local."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			} else {				if(!$this->get($remote."/".$el["name"], $local."/".$el["name"])) {					$this->PushError("mget", "can't copy file", "Can't copy remote file \"".$remote."/".$el["name"]."\" to local \"".$local."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			}			@chmod($local."/".$el["name"], $el["perms"]);			$t=strtotime($el["date"]);			if($t!==-1 and $t!==false) @touch($local."/".$el["name"], $t);		}		return $ret;	}	function mdel($remote, $continious=false) {		$list=$this->rawlist($remote, "-la");		if($list===false) {			$this->PushError("mdel","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return false;		}		foreach($list as $k=>$v) {			$list[$k]=$this->parselisting($v);			if($list[$k]["name"]=="." or $list[$k]["name"]=="..") unset($list[$k]);		}		$ret=true;		foreach($list as $el) {			if ( empty($el) )				continue;			if($el["type"]=="d") {				if(!$this->mdel($remote."/".$el["name"], $continious)) {					$ret=false;					if(!$continious) break;				}			} else {				if (!$this->delete($remote."/".$el["name"])) {					$this->PushError("mdel", "can't delete file", "Can't delete remote file \"".$remote."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			}		}		if(!$this->rmdir($remote)) {			$this->PushError("mdel", "can't delete folder", "Can't delete remote folder \"".$remote."/".$el["name"]."\"");			$ret=false;		}		return $ret;	}	function mmkdir($dir, $mode = 0777) {		if(empty($dir)) return FALSE;		if($this->is_exists($dir) or $dir == "/" ) return TRUE;		if(!$this->mmkdir(dirname($dir), $mode)) return false;		$r=$this->mkdir($dir, $mode);		$this->chmod($dir,$mode);		return $r;	}	function glob($pattern, $handle=NULL) {		$path=$output=null;		if(PHP_OS=='WIN32') $slash='\\';		else $slash='/';		$lastpos=strrpos($pattern,$slash);		if(!($lastpos===false)) {			$path=substr($pattern,0,-$lastpos-1);			$pattern=substr($pattern,$lastpos);		} else $path=getcwd();		if(is_array($handle) and !empty($handle)) {			while($dir=each($handle)) {				if($this->glob_pattern_match($pattern,$dir))				$output[]=$dir;			}		} else {			$handle=@opendir($path);			if($handle===false) return false;			while($dir=readdir($handle)) {				if($this->glob_pattern_match($pattern,$dir))				$output[]=$dir;			}			closedir($handle);		}		if(is_array($output)) return $output;		return false;	}	function glob_pattern_match($pattern,$string) {		$out=null;		$chunks=explode(';',$pattern);		foreach($chunks as $pattern) {			$escape=array('$','^','.','{','}','(',')','[',']','|');			while(strpos($pattern,'**')!==false)				$pattern=str_replace('**','*',$pattern);			foreach($escape as $probe)				$pattern=str_replace($probe,"\\$probe",$pattern);			$pattern=str_replace('?*','*',				str_replace('*?','*',					str_replace('*',".*",						str_replace('?','.{1,1}',$pattern))));			$out[]=$pattern;		}		if(count($out)==1) return($this->glob_regexp("^$out[0]$",$string));		else {			foreach($out as $tester)				if($this->my_regexp("^$tester$",$string)) return true;		}		return false;	}	function glob_regexp($pattern,$probe) {		$sensitive=(PHP_OS!='WIN32');		return ($sensitive?			ereg($pattern,$probe):			eregi($pattern,$probe)		);	}	function dirlist($remote) {		$list=$this->rawlist($remote, "-la");		if($list===false) {			$this->PushError("dirlist","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return false;		}		$dirlist = array();		foreach($list as $k=>$v) {			$entry=$this->parselisting($v);			if ( empty($entry) )				continue;			if($entry["name"]=="." or $entry["name"]=="..")				continue;			$dirlist[$entry['name']] = $entry;		}		return $dirlist;	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _checkCode() {		return ($this->_code<400 and $this->_code>0);	}	function _list($arg="", $cmd="LIST", $fnction="_list") {		if(!$this->_data_prepare()) return false;		if(!$this->_exec($cmd.$arg, $fnction)) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$out="";		if($this->_code<200) {			$out=$this->_data_read();			$this->_data_close();			if(!$this->_readmsg()) return FALSE;			if(!$this->_checkCode()) return FALSE;			if($out === FALSE ) return FALSE;			$out=preg_split("/[".CRLF."]+/", $out, -1, PREG_SPLIT_NO_EMPTY);//			$this->SendMSG(implode($this->_eol_code[$this->OS_local], $out));		}		return $out;	}// <!-- --------------------------------------------------------------------------------------- -->// <!-- Partie : gestion des erreurs                                                            -->// <!-- --------------------------------------------------------------------------------------- -->// Gnre une erreur pour traitement externe  la classe	function PushError($fctname,$msg,$desc=false){		$error=array();		$error['time']=time();		$error['fctname']=$fctname;		$error['msg']=$msg;		$error['desc']=$desc;		if($desc) $tmp=' ('.$desc.')'; else $tmp='';		$this->SendMSG($fctname.': '.$msg.$tmp);		return(array_push($this->_error_array,$error));	}// Rcupre une erreur externe	function PopError(){		if(count($this->_error_array)) return(array_pop($this->_error_array));			else return(false);	}}$mod_sockets=TRUE;if (!extension_loaded('sockets')) {	$prefix = (PHP_SHLIB_SUFFIX == 'dll') ? 'php_' : '';	if(!@dl($prefix . 'sockets.' . PHP_SHLIB_SUFFIX)) $mod_sockets=FALSE;}require_once "class-ftp-".($mod_sockets?"sockets":"pure").".php";?>
<?php/** * Sets up the default filters and actions for Multisite. * * If you need to remove a default hook, this file will give you the priority * for which to use to remove the hook. * * Not all of the Multisite default hooks are found in ms-default-filters.php * * @package WordPress * @subpackage Multisite * @see default-filters.php * @since 3.0.0 */// Usersadd_filter( 'wpmu_validate_user_signup', 'signup_nonce_check' );add_action( 'init', 'maybe_add_existing_user_to_blog' );add_action( 'wpmu_new_user', 'newuser_notify_siteadmin' );add_action( 'wpmu_activate_user', 'add_new_user_to_blog', 10, 3 );add_action( 'sanitize_user', 'strtolower' );// Blogsadd_filter( 'wpmu_validate_blog_signup', 'signup_nonce_check' );add_action( 'wpmu_new_blog', 'wpmu_log_new_registrations', 10, 2 );add_action( 'wpmu_new_blog', 'newblog_notify_siteadmin', 10, 2 );// Register Nonceadd_action( 'signup_hidden_fields', 'signup_nonce_fields' );// Templateadd_action( 'template_redirect', 'maybe_redirect_404' );add_filter( 'allowed_redirect_hosts', 'redirect_this_site' );// Administrationadd_filter( 'term_id_filter', 'global_terms', 10, 2 );add_action( 'publish_post', 'update_posts_count' );add_action( 'delete_post', 'wpmu_update_blogs_date' );add_action( 'private_to_published', 'wpmu_update_blogs_date' );add_action( 'publish_phone', 'wpmu_update_blogs_date' );add_action( 'publish_post', 'wpmu_update_blogs_date' );// Filesadd_filter( 'wp_upload_bits', 'upload_is_file_too_big' );add_filter( 'import_upload_size_limit', 'fix_import_form_size' );add_filter( 'upload_mimes', 'check_upload_mimes' );add_filter( 'upload_size_limit', 'upload_size_limit_filter' );// Mailadd_filter( 'wp_mail_from', 'wordpressmu_wp_mail_from' );add_action( 'phpmailer_init', 'fix_phpmailer_messageid' );// Disable somethings by default for multisiteadd_filter( 'enable_update_services_configuration', '__return_false' );if ( ! defined('POST_BY_EMAIL') || ! POST_BY_EMAIL ) // back compat constant.	add_filter( 'enable_post_by_email_configuration', '__return_false' );if ( ! defined('EDIT_ANY_USER') || ! EDIT_ANY_USER ) // back compat constant.	add_filter( 'enable_edit_any_user_configuration', '__return_false' );// WP_HOME and WP_SITEURL should not have any effect in MSremove_filter( 'option_siteurl', '_config_wp_siteurl' );remove_filter( 'option_home',    '_config_wp_home'    );?>
<?php/** * The template for displaying all pages. * * This is the template that displays all pages by default. * Please note that this is the wordpress construct of pages * and that other 'pages' on your wordpress site will use a * different template. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<?php if ( is_front_page() ) { ?>						<h2 class="entry-title"><?php the_title(); ?></h2>					<?php } else { ?>							<h1 class="entry-title"><?php the_title(); ?></h1>					<?php } ?>									<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * WordPress Bookmark Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function add_link() {	return edit_link();}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function edit_link( $link_id = '' ) {	if (!current_user_can( 'manage_links' ))		wp_die( __( 'Cheatin&#8217; uh?' ));	$_POST['link_url'] = esc_html( $_POST['link_url'] );	$_POST['link_url'] = esc_url($_POST['link_url']);	$_POST['link_name'] = esc_html( $_POST['link_name'] );	$_POST['link_image'] = esc_html( $_POST['link_image'] );	$_POST['link_rss'] = esc_url($_POST['link_rss']);	if ( !isset($_POST['link_visible']) || 'N' != $_POST['link_visible'] )		$_POST['link_visible'] = 'Y';	if ( !empty( $link_id ) ) {		$_POST['link_id'] = $link_id;		return wp_update_link( $_POST);	} else {		return wp_insert_link( $_POST);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_default_link_to_edit() {	if ( isset( $_GET['linkurl'] ) )		$link->link_url = esc_url( $_GET['linkurl']);	else		$link->link_url = '';	if ( isset( $_GET['name'] ) )		$link->link_name = esc_attr( $_GET['name']);	else		$link->link_name = '';	$link->link_visible = 'Y';	return $link;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_delete_link( $link_id ) {	global $wpdb;	do_action( 'delete_link', $link_id );	wp_delete_object_term_relationships( $link_id, 'link_category' );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->links WHERE link_id = %d", $link_id ) );	do_action( 'deleted_link', $link_id );	clean_bookmark_cache( $link_id );	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_get_link_cats( $link_id = 0 ) {	$cats = wp_get_object_terms( $link_id, 'link_category', array('fields' => 'ids') );	return array_unique( $cats );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function get_link_to_edit( $link_id ) {	return get_bookmark( $link_id, OBJECT, 'edit' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_insert_link( $linkdata, $wp_error = false ) {	global $wpdb, $current_user;	$defaults = array( 'link_id' => 0, 'link_name' => '', 'link_url' => '', 'link_rating' => 0 );	$linkdata = wp_parse_args( $linkdata, $defaults );	$linkdata = sanitize_bookmark( $linkdata, 'db' );	extract( stripslashes_deep( $linkdata ), EXTR_SKIP );	$update = false;	if ( !empty( $link_id ) )		$update = true;	if ( trim( $link_name ) == '' ) {		if ( trim( $link_url ) != '' ) {			$link_name = $link_url;		} else {			return 0;		}	}	if ( trim( $link_url ) == '' )		return 0;	if ( empty( $link_rating ) )		$link_rating = 0;	if ( empty( $link_image ) )		$link_image = '';	if ( empty( $link_target ) )		$link_target = '';	if ( empty( $link_visible ) )		$link_visible = 'Y';	if ( empty( $link_owner ) )		$link_owner = $current_user->id;	if ( empty( $link_notes ) )		$link_notes = '';	if ( empty( $link_description ) )		$link_description = '';	if ( empty( $link_rss ) )		$link_rss = '';	if ( empty( $link_rel ) )		$link_rel = '';	// Make sure we set a valid category	if ( ! isset( $link_category ) ||0 == count( $link_category ) || !is_array( $link_category ) ) {		$link_category = array( get_option( 'default_link_category' ) );	}	if ( $update ) {		if ( false === $wpdb->update( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_rating', 'link_rel', 'link_notes', 'link_rss'), compact('link_id') ) ) {			if ( $wp_error )				return new WP_Error( 'db_update_error', __( 'Could not update link in the database' ), $wpdb->last_error );			else				return 0;		}	} else {		if ( false === $wpdb->insert( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_rel', 'link_notes', 'link_rss') ) ) {			if ( $wp_error )				return new WP_Error( 'db_insert_error', __( 'Could not insert link into the database' ), $wpdb->last_error );			else				return 0;		}		$link_id = (int) $wpdb->insert_id;	}	wp_set_link_cats( $link_id, $link_category );	if ( $update )		do_action( 'edit_link', $link_id );	else		do_action( 'add_link', $link_id );	clean_bookmark_cache( $link_id );	return $link_id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @param unknown_type $link_categories */function wp_set_link_cats( $link_id = 0, $link_categories = array() ) {	// If $link_categories isn't already an array, make it one:	if ( !is_array( $link_categories ) || 0 == count( $link_categories ) )		$link_categories = array( get_option( 'default_link_category' ) );	$link_categories = array_map( 'intval', $link_categories );	$link_categories = array_unique( $link_categories );	wp_set_object_terms( $link_id, $link_categories, 'link_category' );	clean_bookmark_cache( $link_id );}	// wp_set_link_cats()/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_update_link( $linkdata ) {	$link_id = (int) $linkdata['link_id'];	$link = get_bookmark( $link_id, ARRAY_A );	// Escape data pulled from DB.	$link = add_magic_quotes( $link );	// Passed link category list overwrites existing category list if not empty.	if ( isset( $linkdata['link_category'] ) && is_array( $linkdata['link_category'] )			 && 0 != count( $linkdata['link_category'] ) )		$link_cats = $linkdata['link_category'];	else		$link_cats = $link['link_category'];	// Merge old and new fields with new fields overwriting old ones.	$linkdata = array_merge( $link, $linkdata );	$linkdata['link_category'] = $link_cats;	return wp_insert_link( $linkdata );}?>
<?php/** * Simple and uniform HTTP request API. * * Will eventually replace and standardize the WordPress HTTP requests made. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * Returns the initialized WP_Http Object * * @since 2.7.0 * @access private * * @return WP_Http HTTP Transport object. */function &_wp_http_get_object() {	static $http;	if ( is_null($http) )		$http = new WP_Http();	return $http;}/** * Retrieve the raw response from the HTTP request. * * The array structure is a little complex. * * <code> * $res = array( 'headers' => array(), 'response' => array('code' => int, 'message' => string) ); * </code> * * All of the headers in $res['headers'] are with the name as the key and the * value as the value. So to get the User-Agent, you would do the following. * * <code> * $user_agent = $res['headers']['user-agent']; * </code> * * The body is the raw response content and can be retrieved from $res['body']. * * This function is called first to make the request and there are other API * functions to abstract out the above convoluted setup. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_request($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->request($url, $args);}/** * Retrieve the raw response from the HTTP request using the GET method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_get($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->get($url, $args);}/** * Retrieve the raw response from the HTTP request using the POST method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_post($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->post($url, $args);}/** * Retrieve the raw response from the HTTP request using the HEAD method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_head($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->head($url, $args);}/** * Retrieve only the headers from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return array The headers of the response. Empty array if incorrect parameter given. */function wp_remote_retrieve_headers(&$response) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return array();	return $response['headers'];}/** * Retrieve a single header by name from the raw response. * * @since 2.7.0 * * @param array $response * @param string $header Header name to retrieve value from. * @return string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist. */function wp_remote_retrieve_header(&$response, $header) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return '';	if ( array_key_exists($header, $response['headers']) )		return $response['headers'][$header];	return '';}/** * Retrieve only the response code from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string the response code. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_code(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['code'];}/** * Retrieve only the response message from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The response message. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_message(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['message'];}/** * Retrieve only the body from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The body of the response. Empty string if no body or incorrect parameter given. */function wp_remote_retrieve_body(&$response) {	if ( is_wp_error($response) || ! isset($response['body']) )		return '';	return $response['body'];}?>
<?php/** * The custom header image script. * * @package WordPress * @subpackage Administration *//** * The custom header image class. * * @since 2.1.0 * @package WordPress * @subpackage Administration */class Custom_Image_Header {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since 2.1.0	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds default headers.	 *	 * @var array	 * @since 3.0.0	 * @access private	 */	var $default_headers = array();	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 2.1.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Image_Header	 */	function Custom_Image_Header($admin_header_callback, $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Header admin page.	 *	 * @since 2.1.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Header'), __('Header'), 'edit_theme_options', 'custom-header', array(&$this, 'admin_page'));		add_action("admin_print_scripts-$page", array(&$this, 'js_includes'));		add_action("admin_print_styles-$page", array(&$this, 'css_includes'));		add_action("admin_head-$page", array(&$this, 'help') );		add_action("admin_head-$page", array(&$this, 'take_action'), 50);		add_action("admin_head-$page", array(&$this, 'js'), 50);		add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Adds contextual help.	 *	 * @since 3.0.0	 */	function help() {		add_contextual_help( $this->page, '<p>' . __( 'You can set a custom image header for your site. Simply upload the image and crop it, and the new header will go live immediately.' ) . '</p>' .		'<p>' . __( 'If you want to discard your custom header and go back to the default included in your theme, click on the buttons to remove the custom image and restore the original header image.' ) . '</p>' .		'<p>' . __( 'Some themes come with additional header images bundled. If you see multiple images displayed, select the one you&#8217;d like and click the Save Changes button.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Header_SubPanel" target="_blank">Documentation on Custom Header</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );	}	/**	 * Get the current step.	 *	 * @since 2.6.0	 *	 * @return int Current step	 */	function step() {		if ( ! isset( $_GET['step'] ) )			return 1;		$step = (int) $_GET['step'];		if ( $step < 1 || 3 < $step )			$step = 1;		return $step;	}	/**	 * Set up the enqueue for the JavaScript files.	 *	 * @since 2.1.0	 */	function js_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_script('farbtastic');		elseif ( 2 == $step )			wp_enqueue_script('imgareaselect');	}	/**	 * Set up the enqueue for the CSS files	 *	 * @since 2.7	 */	function css_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_style('farbtastic');		elseif ( 2 == $step )			wp_enqueue_style('imgareaselect');	}	/**	 * Check if header text is allowed	 *	 * @since 3.0.0	 */	function header_text() {		if ( defined( 'NO_HEADER_TEXT' ) && NO_HEADER_TEXT )			return false;		return true;	}	/**	 * Execute custom header modification.	 *	 * @since 2.6.0	 */	function take_action() {		if ( ! current_user_can('edit_theme_options') )			return;		if ( empty( $_POST ) )			return;		$this->updated = true;		if ( isset( $_POST['resetheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod( 'header_image' );			return;		}		if ( isset( $_POST['resettext'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod('header_textcolor');			return;		}		if ( isset( $_POST['removeheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			set_theme_mod( 'header_image', '' );			return;		}		if ( isset( $_POST['text-color'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$_POST['text-color'] = str_replace( '#', '', $_POST['text-color'] );			if ( 'blank' == $_POST['text-color'] ) {				set_theme_mod( 'header_textcolor', 'blank' );			} else {				$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['text-color']);				if ( strlen($color) == 6 || strlen($color) == 3 )					set_theme_mod('header_textcolor', $color);			}		}		if ( isset($_POST['default-header']) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$this->process_default_headers();			if ( isset($this->default_headers[$_POST['default-header']]) )				set_theme_mod('header_image', esc_url($this->default_headers[$_POST['default-header']]['url']));		}	}	/**	 * Process the default headers	 *	 * @since 3.0.0	 */	function process_default_headers() {		global $_wp_default_headers;		if ( !empty($this->headers) )			return;		if ( !isset($_wp_default_headers) )			return;		$this->default_headers = $_wp_default_headers;		foreach ( array_keys($this->default_headers) as $header ) {			$this->default_headers[$header]['url'] =  sprintf( $this->default_headers[$header]['url'], get_template_directory_uri(), get_stylesheet_directory_uri() );			$this->default_headers[$header]['thumbnail_url'] =  sprintf( $this->default_headers[$header]['thumbnail_url'], get_template_directory_uri(), get_stylesheet_directory_uri() );		}	}	/**	 * Display UI for selecting one of several default headers.	 *	 * @since 3.0.0	 */	function show_default_header_selector() {		echo '<div id="available-headers">';		foreach ( $this->default_headers as $header_key => $header ) {			$header_thumbnail = $header['thumbnail_url'];			$header_url = $header['url'];			$header_desc = $header['description'];			echo '<div class="default-header">';			echo '<label><input name="default-header" type="radio" value="' . esc_attr($header_key) . '" ' . checked($header_url, get_theme_mod( 'header_image' ), false) . ' />';			echo '<img src="' . $header_thumbnail . '" alt="' . esc_attr($header_desc) .'" title="' . esc_attr($header_desc) .'" /></label>';			echo '</div>';		}		echo '<div class="clear"></div></div>';	}	/**	 * Execute Javascript depending on step.	 *	 * @since 2.1.0	 */	function js() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			$this->js_1();		elseif ( 2 == $step )			$this->js_2();	}	/**	 * Display Javascript based on Step 1 and 3.	 *	 * @since 2.6.0	 */	function js_1() { ?><script type="text/javascript">/* <![CDATA[ */	var text_objects = ['#name', '#desc', '#text-color-row'];	var farbtastic;	var default_color = '#<?php echo HEADER_TEXTCOLOR; ?>';	var old_color = null;	function pickColor(color) {		jQuery('#name').css('color', color);		jQuery('#desc').css('color', color);		jQuery('#text-color').val(color);		farbtastic.setColor(color);	}	function toggle_text(s) {		if (jQuery(s).attr('id') == 'showtext' && jQuery('#text-color').val() != 'blank')			return;		if (jQuery(s).attr('id') == 'hidetext' && jQuery('#text-color').val() == 'blank')			return;		if (jQuery('#text-color').val() == 'blank') {			//Show text			if (old_color == '#blank')				old_color = default_color;			jQuery( text_objects.toString() ).show();			jQuery('#text-color').val(old_color);			jQuery('#name').css('color', old_color);			jQuery('#desc').css('color', old_color);			pickColor(old_color);		} else {			//Hide text			jQuery( text_objects.toString() ).hide();			old_color = jQuery('#text-color').val();			jQuery('#text-color').val('blank');		}	}	jQuery(document).ready(function() {		jQuery('#pickcolor').click(function() {			jQuery('#color-picker').show();		});		jQuery('input[name="hidetext"]').click(function() {			toggle_text(this);		});		jQuery('#defaultcolor').click(function() {			pickColor(default_color);			jQuery('#text-color').val(default_color)		});		jQuery('#text-color').keyup(function() {			var _hex = jQuery('#text-color').val();			var hex = _hex;			if ( hex[0] != '#' )				hex = '#' + hex;			hex = hex.replace(/[^#a-fA-F0-9]+/, '');			if ( hex != _hex )				jQuery('#text-color').val(hex);			if ( hex.length == 4 || hex.length == 7 )				pickColor( hex );		});		jQuery(document).mousedown(function(){			jQuery('#color-picker').each( function() {				var display = jQuery(this).css('display');				if (display == 'block')					jQuery(this).fadeOut(2);			});		});		farbtastic = jQuery.farbtastic('#color-picker', function(color) { pickColor(color); });		<?php if ( $color = get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) ) { ?>		pickColor('#<?php echo $color; ?>');		<?php } ?>		<?php if ( 'blank' == get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() ) { ?>		toggle_text();		<?php } ?>		});</script><?php	}	/**	 * Display Javascript based on Step 2.	 *	 * @since 2.6.0	 */	function js_2() { ?><script type="text/javascript">/* <![CDATA[ */	function onEndCrop( coords ) {		jQuery( '#x1' ).val(coords.x);		jQuery( '#y1' ).val(coords.y);		jQuery( '#width' ).val(coords.w);		jQuery( '#height' ).val(coords.h);	}	jQuery(document).ready(function() {		var xinit = <?php echo HEADER_IMAGE_WIDTH; ?>;		var yinit = <?php echo HEADER_IMAGE_HEIGHT; ?>;		var ratio = xinit / yinit;		var ximg = jQuery('img#upload').width();		var yimg = jQuery('img#upload').height();		if ( yimg < yinit || ximg < xinit ) {			if ( ximg / yimg > ratio ) {				yinit = yimg;				xinit = yinit * ratio;			} else {				xinit = ximg;				yinit = xinit / ratio;			}		}		jQuery('img#upload').imgAreaSelect({			handles: true,			keys: true,			aspectRatio: xinit + ':' + yinit,			show: true,			x1: 0,			y1: 0,			x2: xinit,			y2: yinit,			maxHeight: <?php echo HEADER_IMAGE_HEIGHT; ?>,			maxWidth: <?php echo HEADER_IMAGE_WIDTH; ?>,			onInit: function () {				jQuery('#width').val(xinit);				jQuery('#height').val(yinit);			},			onSelectChange: function(img, c) {				jQuery('#x1').val(c.x1);				jQuery('#y1').val(c.y1);				jQuery('#width').val(c.width);				jQuery('#height').val(c.height);			}		});	});/* ]]> */</script><?php	}	/**	 * Display first step of custom header image page.	 *	 * @since 2.1.0	 */	function step_1() {		$this->process_default_headers();?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Custom Header'); ?></h2><?php if ( ! empty( $this->updated ) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Header updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php } ?><h3><?php _e( 'Header Image' ) ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e( 'Preview' ); ?></th><td >	<?php if ( $this->admin_image_div_callback ) {	  call_user_func( $this->admin_image_div_callback );	} else {	?>	<div id="headimg" style="max-width:<?php echo HEADER_IMAGE_WIDTH; ?>px;height:<?php echo HEADER_IMAGE_HEIGHT; ?>px;background-image:url(<?php esc_url ( header_image() ) ?>);">		<?php		if ( 'blank' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() )			$style = ' style="display:none;"';		else			$style = ' style="color:#' . get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) . ';"';		?>		<h1><a id="name"<?php echo $style; ?> onclick="return false;" href="<?php bloginfo('url'); ?>"><?php bloginfo( 'name' ); ?></a></h1>		<div id="desc"<?php echo $style; ?>><?php bloginfo( 'description' ); ?></div>	</div>	<?php } ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'Upload Image' ); ?></th><td>	<p><?php _e( 'You can upload a custom header image to be shown at the top of your site instead of the default one. On the next screen you will be able to crop the image.' ); ?><br />	<?php printf( __( 'Images of exactly <strong>%1$d &times; %2$d pixels</strong> will be used as-is.' ), HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT ); ?></p>	<form enctype="multipart/form-data" id="upload-form" method="post" action="<?php echo esc_attr( add_query_arg( 'step', 2 ) ) ?>">	<p>		<label for="upload"><?php _e( 'Choose an image from your computer:' ); ?></label><br />		<input type="file" id="upload" name="import" />		<input type="hidden" name="action" value="save" />		<?php wp_nonce_field( 'custom-header-upload', '_wpnonce-custom-header-upload' ) ?>		<input type="submit" class="button" value="<?php esc_attr_e( 'Upload' ); ?>" />	</p>	</form></td></tr></tbody></table><form method="post" action="<?php echo esc_attr( add_query_arg( 'step', 1 ) ) ?>"><table class="form-table"><tbody>	<?php if ( ! empty( $this->default_headers ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Default Images' ); ?></th><td>	<p><?php _e( 'If you don&lsquo;t want to upload your own image, you can use one of these cool headers.' ) ?></p>	<?php		$this->show_default_header_selector();	?></td></tr>	<?php endif;	if ( get_header_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Remove Image' ); ?></th><td>	<p><?php _e( 'This will remove the header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="removeheader" value="<?php esc_attr_e( 'Remove Header Image' ); ?>" /></td></tr>	<?php endif;	if ( defined( 'HEADER_IMAGE' ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Reset Image' ); ?></th><td>	<p><?php _e( 'This will restore the original header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resetheader" value="<?php esc_attr_e( 'Restore Original Header Image' ); ?>" /></td></tr>	<?php endif; ?></tbody></table>	<?php if ( $this->header_text() ) : ?><h3><?php _e( 'Header Text' ) ?></h3><table class="form-table"><tbody><tr valign="top" class="hide-if-no-js"><th scope="row"><?php _e( 'Display Text' ); ?></th><td>	<p>	<?php $hidetext = get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ); ?>	<label><input type="radio" value="1" name="hidetext" id="hidetext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) )  ? true : false ); ?> /> <?php _e( 'No' ); ?></label>	<label><input type="radio" value="0" name="hidetext" id="showtext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) ) ? false : true ); ?> /> <?php _e( 'Yes' ); ?></label>	</p></td></tr><tr valign="top" id="text-color-row"><th scope="row"><?php _e( 'Text Color' ); ?></th><td>	<p>		<input type="text" name="text-color" id="text-color" value="#<?php echo esc_attr( get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) ); ?>" />		<span class="description hide-if-js"><?php _e( 'If you want to hide header text, add <strong>#blank</strong> as text color.' );?></span>		<input type="button" class="button hide-if-no-js" value="<?php esc_attr_e( 'Select a Color' ); ?>" id="pickcolor" />	</p>	<div id="color-picker" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></td></tr>	<?php if ( defined('HEADER_TEXTCOLOR') && get_theme_mod('header_textcolor') ) { ?><tr valign="top"><th scope="row"><?php _e('Reset Text Color'); ?></th><td>	<p><?php _e( 'This will restore the original header text. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resettext" value="<?php esc_attr_e( 'Restore Original Header Text' ); ?>" /></td></tr>	<?php } ?></tbody></table>	<?php endif;wp_nonce_field( 'custom-header-options', '_wpnonce-custom-header-options' ); ?><p class="submit"><input type="submit" class="button-primary" name="save-header-options" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php }	/**	 * Display second step of custom header image page.	 *	 * @since 2.1.0	 */	function step_2() {		check_admin_referer('custom-header-upload', '_wpnonce-custom-header-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'],  __( 'Image Upload Error' ) );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(		'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url);		// Save the data		$id = wp_insert_attachment($object, $file);		list($width, $height, $type, $attr) = getimagesize( $file );		if ( $width == HEADER_IMAGE_WIDTH && $height == HEADER_IMAGE_HEIGHT ) {			// Add the meta-data			wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );			set_theme_mod('header_image', esc_url($url));			do_action('wp_create_file_in_uploads', $file, $id); // For replication			return $this->finished();		} elseif ( $width > HEADER_IMAGE_WIDTH ) {			$oitar = $width / HEADER_IMAGE_WIDTH;			$image = wp_crop_image($file, 0, 0, $width, $height, HEADER_IMAGE_WIDTH, $height / $oitar, false, str_replace(basename($file), 'midsize-'.basename($file), $file));			if ( is_wp_error( $image ) )				wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );			$image = apply_filters('wp_create_file_in_uploads', $image, $id); // For replication			$url = str_replace(basename($url), basename($image), $url);			$width = $width / $oitar;			$height = $height / $oitar;		} else {			$oitar = 1;		}		?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Crop Header Image' ); ?></h2><form method="post" action="<?php echo esc_attr(add_query_arg('step', 3)); ?>">	<p class="hide-if-no-js"><?php _e('Choose the part of the image you want to use as your header.'); ?></p>	<p class="hide-if-js"><strong><?php _e( 'You need Javascript to choose a part of the image.'); ?></strong></p>	<div id="crop_image" style="position: relative">		<img src="<?php echo esc_url( $url ); ?>" id="upload" width="<?php echo $width; ?>" height="<?php echo $height; ?>" />	</div>	<p class="submit">	<input type="hidden" name="x1" id="x1" value="0"/>	<input type="hidden" name="y1" id="y1" value="0"/>	<input type="hidden" name="width" id="width" value="<?php echo esc_attr( $width ); ?>"/>	<input type="hidden" name="height" id="height" value="<?php echo esc_attr( $height ); ?>"/>	<input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr( $id ); ?>" />	<input type="hidden" name="oitar" id="oitar" value="<?php echo esc_attr( $oitar ); ?>" />	<?php wp_nonce_field( 'custom-header-crop-image' ) ?>	<input type="submit" class="button-primary" value="<?php esc_attr_e( 'Crop and Publish' ); ?>" />	</p></form></div>		<?php	}	/**	 * Display third step of custom header image page.	 *	 * @since 2.1.0	 */	function step_3() {		check_admin_referer('custom-header-crop-image');		if ( $_POST['oitar'] > 1 ) {			$_POST['x1'] = $_POST['x1'] * $_POST['oitar'];			$_POST['y1'] = $_POST['y1'] * $_POST['oitar'];			$_POST['width'] = $_POST['width'] * $_POST['oitar'];			$_POST['height'] = $_POST['height'] * $_POST['oitar'];		}		$original = get_attached_file( $_POST['attachment_id'] );		$cropped = wp_crop_image($_POST['attachment_id'], $_POST['x1'], $_POST['y1'], $_POST['width'], $_POST['height'], HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT);		if ( is_wp_error( $cropped ) )			wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );		$cropped = apply_filters('wp_create_file_in_uploads', $cropped, $_POST['attachment_id']); // For replication		$parent = get_post($_POST['attachment_id']);		$parent_url = $parent->guid;		$url = str_replace(basename($parent_url), basename($cropped), $parent_url);		// Construct the object array		$object = array(			'ID' => $_POST['attachment_id'],			'post_title' => basename($cropped),			'post_content' => $url,			'post_mime_type' => 'image/jpeg',			'guid' => $url		);		// Update the attachment		wp_insert_attachment($object, $cropped);		wp_update_attachment_metadata( $_POST['attachment_id'], wp_generate_attachment_metadata( $_POST['attachment_id'], $cropped ) );		set_theme_mod('header_image', $url);		// cleanup		$medium = str_replace(basename($original), 'midsize-'.basename($original), $original);		@unlink( apply_filters( 'wp_delete_file', $medium ) );		@unlink( apply_filters( 'wp_delete_file', $original ) );		return $this->finished();	}	/**	 * Display last step of custom header image page.	 *	 * @since 2.1.0	 */	function finished() {		$this->updated = true;		$this->step_1();	}	/**	 * Display the page based on the current step.	 *	 * @since 2.1.0	 */	function admin_page() {		if ( ! current_user_can('edit_theme_options') )			wp_die(__('You do not have permission to customize headers.'));		$step = $this->step();		if ( 1 == $step )			$this->step_1();		elseif ( 2 == $step )			$this->step_2();		elseif ( 3 == $step )			$this->step_3();	}}?>
<?php/** * My Sites dashboard. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can('read') )	wp_die( __( 'You do not have sufficient permissions to view this page.' ) );$action = isset( $_POST['action'] ) ? $_POST['action'] : 'splash';$blogs = get_blogs_of_user( $current_user->id );if ( empty( $blogs ) )	wp_die( __( 'You must be a member of at least one site to use this page.' ) );$updated = false;if ( 'updateblogsettings' == $action && isset( $_POST['primary_blog'] ) ) {	check_admin_referer( 'update-my-sites' );	$blog = get_blog_details( (int) $_POST['primary_blog'] );	if ( $blog && isset( $blog->domain ) ) {		update_user_option( $current_user->id, 'primary_blog', (int) $_POST['primary_blog'], true );		$updated = true;	} else {		wp_die( __( 'The primary site you chose does not exist.' ) );	}}$title = __( 'My Sites' );$parent_file = 'index.php';add_contextual_help($current_screen,	'<p>' . __('This screen shows an individual user all of their sites in this network, and also allows that user to set a primary site. He or she can use the links under each site to visit either the frontend or the dashboard for that site.') . '</p>' .	'<p>' . __('Up until WordPress version 3.0, what is now called a Multi-site Network had to be installed separately as WordPress MU (multi-user).') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_My_Sites_SubPanel" target="_blank">My Sites Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( $updated ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'Settings saved.' ); ?></strong></p></div><?php } ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="myblogs" action="" method="post">	<?php	choose_primary_blog();	do_action( 'myblogs_allblogs_options' );	?>	<br clear="all" />	<table class="widefat fixed">	<?php	$settings_html = apply_filters( 'myblogs_options', '', 'global' );	if ( $settings_html != '' ) {		echo '<tr><td valign="top"><h3>' . __( 'Global Settings' ) . '</h3></td><td>';		echo $settings_html;		echo '</td></tr>';	}	reset( $blogs );	$num = count( $blogs );	$cols = 1;	if ( $num >= 20 )		$cols = 4;	elseif ( $num >= 10 )		$cols = 2;	$num_rows = ceil( $num / $cols );	$split = 0;	for ( $i = 1; $i <= $num_rows; $i++ ) {		$rows[] = array_slice( $blogs, $split, $cols );		$split = $split + $cols;	}	$c = '';	foreach ( $rows as $row ) {		$c = $c == 'alternate' ? '' : 'alternate';		echo "<tr class='$c'>";		$i = 0;		foreach ( $row as $user_blog ) {			$s = $i == 3 ? '' : 'border-right: 1px solid #ccc;';			echo "<td valign='top' style='$s'>";			echo "<h3>{$user_blog->blogname}</h3>";			echo "<p>" . apply_filters( 'myblogs_blog_actions', "<a href='" . esc_url( get_home_url( $user_blog->userblog_id ) ). "'>" . __( 'Visit' ) . "</a> | <a href='" . esc_url( get_admin_url( $user_blog->userblog_id ) ) . "'>" . __( 'Dashboard' ) . "</a>", $user_blog ) . "</p>";			echo apply_filters( 'myblogs_options', '', $user_blog );			echo "</td>";			$i++;		}		echo "</tr>";	}?>	</table>	<input type="hidden" name="action" value="updateblogsettings" />	<?php wp_nonce_field( 'update-my-sites' ); ?>	<p>	 <input type="submit" class="button-primary" value="<?php _e( 'Save Changes' ) ?>" />	</p>	</form>	</div><?phpinclude( './admin-footer.php' );?>
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
<?php/** * Manage media uploaded file. * * There are many filters in here for media. Plugins can extend functionality * by hooking into the filters. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if (!current_user_can('upload_files'))	wp_die(__('You do not have permission to upload files.'));wp_enqueue_script('swfupload-all');wp_enqueue_script('swfupload-handlers');wp_enqueue_script('image-edit');wp_enqueue_script('set-post-thumbnail' );wp_enqueue_style('imgareaselect');@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));// IDs should be integers$ID = isset($ID) ? (int) $ID : 0;$post_id = isset($post_id)? (int) $post_id : 0;// Require an ID for the edit screenif ( isset($action) && $action == 'edit' && !$ID )	wp_die(__("You are not allowed to be here"));if ( isset($_GET['inline']) ) {	$errors = array();	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( isset($_GET['upload-page-form']) ) {		$errors = array_merge($errors, (array) media_upload_form_handler());		$location = 'upload.php';		if ( $errors )			$location .= '?message=3';		wp_redirect( admin_url($location) );	}	$title = __('Upload New Media');	$parent_file = 'upload.php';	add_contextual_help( $current_screen,'<p>' . __('You can upload media files here without creating a post first. This allows you to upload files to use with posts and pages later and/or to get a web link for a particular file that you can share.') . '</p>' .		'<p>' . __('There are two options for uploading files: <em>Select Files</em> will open the Flash-based uploader (multiple file upload allowed), or you can use the <em>Browser Uploader</em>. Clicking <em>Select Files</em> opens a navigation window showing you files in your operating system. Selecting <em>Open</em> after clicking on the file you want activates a progress bar on the uploader screen. Basic image editing is available after upload is complete. Make sure you click<em>Save</em> before leaving this screen.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Media_Add_New_SubPanel" target="_blank">Documentation on Uploading Media Files</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);	require_once('./admin-header.php'); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<form enctype="multipart/form-data" method="post" action="<?php echo admin_url('media-upload.php?inline=&amp;upload-page-form='); ?>" class="media-upload-form type-form validate" id="file-form">	<?php media_upload_form(); ?>	<script type="text/javascript">	jQuery(function($){		var preloaded = $(".media-item.preloaded");		if ( preloaded.length > 0 ) {			preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		}		updateMediaForm();		post_id = 0;		shortform = 1;	});	</script>	<input type="hidden" name="post_id" id="post_id" value="0" />	<?php wp_nonce_field('media-form'); ?>	<div id="media-items" class="hide-if-no-js"> </div>	<p>	<input type="submit" class="button savebutton hide-if-no-js" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" />	</p>	</form>	</div><?php	include('./admin-footer.php');} else {	// upload type: image, video, file, ..?	if ( isset($_GET['type']) )		$type = strval($_GET['type']);	else		$type = apply_filters('media_upload_default_type', 'file');	// tab: gallery, library, or type-specific	if ( isset($_GET['tab']) )		$tab = strval($_GET['tab']);	else		$tab = apply_filters('media_upload_default_tab', 'type');	$body_id = 'media-upload';	// let the action code decide how to handle the request	if ( $tab == 'type' || $tab == 'type_url' )		do_action("media_upload_$type");	else		do_action("media_upload_$tab");}?>
<?php/** * Handle Trackbacks and Pingbacks sent to WordPress * * @package WordPress */if (empty($wp)) {	require_once('./wp-load.php');	wp( array( 'tb' => '1' ) );}/** * trackback_response() - Respond with error or success XML message * * @param int|bool $error Whether there was an error * @param string $error_message Error message if an error occurred */function trackback_response($error = 0, $error_message = '') {	header('Content-Type: text/xml; charset=' . get_option('blog_charset') );	if ($error) {		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";		echo "<response>\n";		echo "<error>1</error>\n";		echo "<message>$error_message</message>\n";		echo "</response>";		die();	} else {		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";		echo "<response>\n";		echo "<error>0</error>\n";		echo "</response>";	}}// trackback is done by a POST$request_array = 'HTTP_POST_VARS';if ( !isset($_GET['tb_id']) || !$_GET['tb_id'] ) {	$tb_id = explode('/', $_SERVER['REQUEST_URI']);	$tb_id = intval( $tb_id[ count($tb_id) - 1 ] );}$tb_url  = isset($_POST['url'])     ? $_POST['url']     : '';$charset = isset($_POST['charset']) ? $_POST['charset'] : '';// These three are stripslashed here so that they can be properly escaped after mb_convert_encoding()$title     = isset($_POST['title'])     ? stripslashes($_POST['title'])      : '';$excerpt   = isset($_POST['excerpt'])   ? stripslashes($_POST['excerpt'])    : '';$blog_name = isset($_POST['blog_name']) ? stripslashes($_POST['blog_name'])  : '';if ($charset)	$charset = str_replace( array(',', ' '), '', strtoupper( trim($charset) ) );else	$charset = 'ASCII, UTF-8, ISO-8859-1, JIS, EUC-JP, SJIS';// No valid uses for UTF-7if ( false !== strpos($charset, 'UTF-7') )	die;if ( function_exists('mb_convert_encoding') ) { // For international trackbacks	$title     = mb_convert_encoding($title, get_option('blog_charset'), $charset);	$excerpt   = mb_convert_encoding($excerpt, get_option('blog_charset'), $charset);	$blog_name = mb_convert_encoding($blog_name, get_option('blog_charset'), $charset);}// Now that mb_convert_encoding() has been given a swing, we need to escape these three$title     = $wpdb->escape($title);$excerpt   = $wpdb->escape($excerpt);$blog_name = $wpdb->escape($blog_name);if ( is_single() || is_page() )	$tb_id = $posts[0]->ID;if ( !isset($tb_id) || !intval( $tb_id ) )	trackback_response(1, 'I really need an ID for this to work.');if (empty($title) && empty($tb_url) && empty($blog_name)) {	// If it doesn't look like a trackback at all...	wp_redirect(get_permalink($tb_id));	exit;}if ( !empty($tb_url) && !empty($title) ) {	header('Content-Type: text/xml; charset=' . get_option('blog_charset') );	if ( !pings_open($tb_id) )		trackback_response(1, 'Sorry, trackbacks are closed for this item.');	$title =  wp_html_excerpt( $title, 250 ).'...';	$excerpt = wp_html_excerpt( $excerpt, 252 ).'...';	$comment_post_ID = (int) $tb_id;	$comment_author = $blog_name;	$comment_author_email = '';	$comment_author_url = $tb_url;	$comment_content = "<strong>$title</strong>\n\n$excerpt";	$comment_type = 'trackback';	$dupe = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $comment_post_ID, $comment_author_url) );	if ( $dupe )		trackback_response(1, 'We already have a ping from that URL for this post.');	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type');	wp_new_comment($commentdata);	do_action('trackback_post', $wpdb->insert_id);	trackback_response(0);}?>
<?php/** * API for creating dynamic sidebar without hardcoding functionality into * themes. Includes both internal WordPress routines and theme use routines. * * This functionality was found in a plugin before WordPress 2.2 release which * included it in the core from that point on. * * @link http://codex.wordpress.org/Plugins/WordPress_Widgets WordPress Widgets * @link http://codex.wordpress.org/Plugins/WordPress_Widgets_Api Widgets API * * @package WordPress * @subpackage Widgets *//** * This class must be extended for each widget and WP_Widget::widget(), WP_Widget::update() * and WP_Widget::form() need to be over-ridden. * * @package WordPress * @subpackage Widgets * @since 2.8 */class WP_Widget {	var $id_base;			// Root id for all widgets of this type.	var $name;				// Name for this widget type.	var $widget_options;	// Option array passed to wp_register_sidebar_widget()	var $control_options;	// Option array passed to wp_register_widget_control()	var $number = false;	// Unique ID number of the current instance.	var $id = false;		// Unique ID string of the current instance (id_base-number)	var $updated = false;	// Set true when we update the data after a POST submit - makes sure we don't do it twice.	// Member functions that you must over-ride.	/** Echo the widget content.	 *	 * Subclasses should over-ride this function to generate their widget code.	 *	 * @param array $args Display arguments including before_title, after_title, before_widget, and after_widget.	 * @param array $instance The settings for the particular instance of the widget	 */	function widget($args, $instance) {		die('function WP_Widget::widget() must be over-ridden in a sub-class.');	}	/** Update a particular instance.	 *	 * This function should check that $new_instance is set correctly.	 * The newly calculated value of $instance should be returned.	 * If "false" is returned, the instance won't be saved/updated.	 *	 * @param array $new_instance New settings for this instance as input by the user via form()	 * @param array $old_instance Old settings for this instance	 * @return array Settings to save or bool false to cancel saving	 */	function update($new_instance, $old_instance) {		return $new_instance;	}	/** Echo the settings update form	 *	 * @param array $instance Current settings	 */	function form($instance) {		echo '<p class="no-options-widget">' . __('There are no options for this widget.') . '</p>';		return 'noform';	}	// Functions you'll need to call.	/**	 * PHP4 constructor	 */	function WP_Widget( $id_base = false, $name, $widget_options = array(), $control_options = array() ) {		$this->__construct( $id_base, $name, $widget_options, $control_options );	}	/**	 * PHP5 constructor	 *	 * @param string $id_base Optional Base ID for the widget, lower case,	 * if left empty a portion of the widget's class name will be used. Has to be unique.	 * @param string $name Name for the widget displayed on the configuration page.	 * @param array $widget_options Optional Passed to wp_register_sidebar_widget()	 *	 - description: shown on the configuration page	 *	 - classname	 * @param array $control_options Optional Passed to wp_register_widget_control()	 *	 - width: required if more than 250px	 *	 - height: currently not used but may be needed in the future	 */	function __construct( $id_base = false, $name, $widget_options = array(), $control_options = array() ) {		$this->id_base = empty($id_base) ? preg_replace( '/(wp_)?widget_/', '', strtolower(get_class($this)) ) : strtolower($id_base);		$this->name = $name;		$this->option_name = 'widget_' . $this->id_base;		$this->widget_options = wp_parse_args( $widget_options, array('classname' => $this->option_name) );		$this->control_options = wp_parse_args( $control_options, array('id_base' => $this->id_base) );	}	/**	 * Constructs name attributes for use in form() fields	 *	 * This function should be used in form() methods to create name attributes for fields to be saved by update()	 *	 * @param string $field_name Field name	 * @return string Name attribute for $field_name	 */	function get_field_name($field_name) {		return 'widget-' . $this->id_base . '[' . $this->number . '][' . $field_name . ']';	}	/**	 * Constructs id attributes for use in form() fields	 *	 * This function should be used in form() methods to create id attributes for fields to be saved by update()	 *	 * @param string $field_name Field name	 * @return string ID attribute for $field_name	 */	function get_field_id($field_name) {		return 'widget-' . $this->id_base . '-' . $this->number . '-' . $field_name;	}	// Private Functions. Don't worry about these.	function _register() {		$settings = $this->get_settings();		$empty = true;		if ( is_array($settings) ) {			foreach ( array_keys($settings) as $number ) {				if ( is_numeric($number) ) {					$this->_set($number);					$this->_register_one($number);					$empty = false;				}			}		}		if ( $empty ) {			// If there are none, we register the widget's existance with a			// generic template			$this->_set(1);			$this->_register_one();		}	}	function _set($number) {		$this->number = $number;		$this->id = $this->id_base . '-' . $number;	}	function _get_display_callback() {		return array(&$this, 'display_callback');	}	function _get_update_callback() {		return array(&$this, 'update_callback');	}	function _get_form_callback() {		return array(&$this, 'form_callback');	}	/** Generate the actual widget content.	 *	Just finds the instance and calls widget().	 *	Do NOT over-ride this function. */	function display_callback( $args, $widget_args = 1 ) {		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$this->_set( $widget_args['number'] );		$instance = $this->get_settings();		if ( array_key_exists( $this->number, $instance ) ) {			$instance = $instance[$this->number];			// filters the widget's settings, return false to stop displaying the widget			$instance = apply_filters('widget_display_callback', $instance, $this, $args);			if ( false !== $instance )				$this->widget($args, $instance);		}	}	/** Deal with changed settings.	 *	Do NOT over-ride this function. */	function update_callback( $widget_args = 1 ) {		global $wp_registered_widgets;		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$all_instances = $this->get_settings();		// We need to update the data		if ( $this->updated )			return;		$sidebars_widgets = wp_get_sidebars_widgets();		if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {			// Delete the settings for this instance of the widget			if ( isset($_POST['the-widget-id']) )				$del_id = $_POST['the-widget-id'];			else				return;			if ( isset($wp_registered_widgets[$del_id]['params'][0]['number']) ) {				$number = $wp_registered_widgets[$del_id]['params'][0]['number'];				if ( $this->id_base . '-' . $number == $del_id )					unset($all_instances[$number]);			}		} else {			if ( isset($_POST['widget-' . $this->id_base]) && is_array($_POST['widget-' . $this->id_base]) ) {				$settings = $_POST['widget-' . $this->id_base];			} elseif ( isset($_POST['id_base']) && $_POST['id_base'] == $this->id_base ) {				$num = $_POST['multi_number'] ? (int) $_POST['multi_number'] : (int) $_POST['widget_number'];				$settings = array( $num => array() );			} else {				return;			}			foreach ( $settings as $number => $new_instance ) {				$new_instance = stripslashes_deep($new_instance);				$this->_set($number);				$old_instance = isset($all_instances[$number]) ? $all_instances[$number] : array();				$instance = $this->update($new_instance, $old_instance);				// filters the widget's settings before saving, return false to cancel saving (keep the old settings if updating)				$instance = apply_filters('widget_update_callback', $instance, $new_instance, $old_instance, $this);				if ( false !== $instance )					$all_instances[$number] = $instance;				break; // run only once			}		}		$this->save_settings($all_instances);		$this->updated = true;	}	/** Generate the control form.	 *	Do NOT over-ride this function. */	function form_callback( $widget_args = 1 ) {		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$all_instances = $this->get_settings();		if ( -1 == $widget_args['number'] ) {			// We echo out a form where 'number' can be set later			$this->_set('__i__');			$instance = array();		} else {			$this->_set($widget_args['number']);			$instance = $all_instances[ $widget_args['number'] ];		}		// filters the widget admin form before displaying, return false to stop displaying it		$instance = apply_filters('widget_form_callback', $instance, $this);		$return = null;		if ( false !== $instance ) {			$return = $this->form($instance);			// add extra fields in the widget form - be sure to set $return to null if you add any			// if the widget has no form the text echoed from the default form method can be hidden using css			do_action_ref_array( 'in_widget_form', array(&$this, &$return, $instance) );		}		return $return;	}	/** Helper function: Registers a single instance. */	function _register_one($number = -1) {		wp_register_sidebar_widget(	$this->id, $this->name,	$this->_get_display_callback(), $this->widget_options, array( 'number' => $number ) );		_register_widget_update_callback( $this->id_base, $this->_get_update_callback(), $this->control_options, array( 'number' => -1 ) );		_register_widget_form_callback(	$this->id, $this->name,	$this->_get_form_callback(), $this->control_options, array( 'number' => $number ) );	}	function save_settings($settings) {		$settings['_multiwidget'] = 1;		update_option( $this->option_name, $settings );	}	function get_settings() {		$settings = get_option($this->option_name);		if ( false === $settings && isset($this->alt_option_name) )			$settings = get_option($this->alt_option_name);		if ( !is_array($settings) )			$settings = array();		if ( !array_key_exists('_multiwidget', $settings) ) {			// old format, conver if single widget			$settings = wp_convert_widget_settings($this->id_base, $this->option_name, $settings);		}		unset($settings['_multiwidget'], $settings['__i__']);		return $settings;	}}/** * Singleton that registers and instantiates WP_Widget classes. * * @package WordPress * @subpackage Widgets * @since 2.8 */class WP_Widget_Factory {	var $widgets = array();	function WP_Widget_Factory() {		add_action( 'widgets_init', array( &$this, '_register_widgets' ), 100 );	}	function register($widget_class) {		$this->widgets[$widget_class] = & new $widget_class();	}	function unregister($widget_class) {		if ( isset($this->widgets[$widget_class]) )			unset($this->widgets[$widget_class]);	}	function _register_widgets() {		global $wp_registered_widgets;		$keys = array_keys($this->widgets);		$registered = array_keys($wp_registered_widgets);		$registered = array_map('_get_widget_id_base', $registered);		foreach ( $keys as $key ) {			// don't register new widget if old widget with the same id is already registered			if ( in_array($this->widgets[$key]->id_base, $registered, true) ) {				unset($this->widgets[$key]);				continue;			}			$this->widgets[$key]->_register();		}	}}/* Global Variables *//** @ignore */global $wp_registered_sidebars, $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;/** * Stores the sidebars, since many themes can have more than one. * * @global array $wp_registered_sidebars * @since 2.2.0 */$wp_registered_sidebars = array();/** * Stores the registered widgets. * * @global array $wp_registered_widgets * @since 2.2.0 */$wp_registered_widgets = array();/** * Stores the registered widget control (options). * * @global array $wp_registered_widget_controls * @since 2.2.0 */$wp_registered_widget_controls = array();$wp_registered_widget_updates = array();/** * Private */$_wp_sidebars_widgets = array();/** * Private */ $_wp_deprecated_widgets_callbacks = array( 	'wp_widget_pages',	'wp_widget_pages_control',	'wp_widget_calendar',	'wp_widget_calendar_control',	'wp_widget_archives',	'wp_widget_archives_control',	'wp_widget_links',	'wp_widget_meta',	'wp_widget_meta_control',	'wp_widget_search',	'wp_widget_recent_entries',	'wp_widget_recent_entries_control',	'wp_widget_tag_cloud',	'wp_widget_tag_cloud_control',	'wp_widget_categories',	'wp_widget_categories_control',	'wp_widget_text',	'wp_widget_text_control',	'wp_widget_rss',	'wp_widget_rss_control',	'wp_widget_recent_comments',	'wp_widget_recent_comments_control' );/* Template tags & API functions *//** * Register a widget * * Registers a WP_Widget widget * * @since 2.8.0 * * @see WP_Widget * @see WP_Widget_Factory * @uses WP_Widget_Factory * * @param string $widget_class The name of a class that extends WP_Widget */function register_widget($widget_class) {	global $wp_widget_factory;	$wp_widget_factory->register($widget_class);}/** * Unregister a widget * * Unregisters a WP_Widget widget. Useful for unregistering default widgets. * Run within a function hooked to the widgets_init action. * * @since 2.8.0 * * @see WP_Widget * @see WP_Widget_Factory * @uses WP_Widget_Factory * * @param string $widget_class The name of a class that extends WP_Widget */function unregister_widget($widget_class) {	global $wp_widget_factory;	$wp_widget_factory->unregister($widget_class);}/** * Creates multiple sidebars. * * If you wanted to quickly create multiple sidebars for a theme or internally. * This function will allow you to do so. If you don't pass the 'name' and/or * 'id' in $args, then they will be built for you. * * The default for the name is "Sidebar #", with '#' being replaced with the * number the sidebar is currently when greater than one. If first sidebar, the * name will be just "Sidebar". The default for id is "sidebar-" followed by the * number the sidebar creation is currently at. If the id is provided, and mutliple * sidebars are being defined, the id will have "-2" appended, and so on. * * @since 2.2.0 * * @see register_sidebar() The second parameter is documented by register_sidebar() and is the same here. * @uses parse_str() Converts a string to an array to be used in the rest of the function. * @uses register_sidebar() Sends single sidebar information [name, id] to this *	function to handle building the sidebar. * * @param int $number Number of sidebars to create. * @param string|array $args Builds Sidebar based off of 'name' and 'id' values. */function register_sidebars($number = 1, $args = array()) {	global $wp_registered_sidebars;	$number = (int) $number;	if ( is_string($args) )		parse_str($args, $args);	for ( $i = 1; $i <= $number; $i++ ) {		$_args = $args;		if ( $number > 1 )			$_args['name'] = isset($args['name']) ? sprintf($args['name'], $i) : sprintf(__('Sidebar %d'), $i);		else			$_args['name'] = isset($args['name']) ? $args['name'] : __('Sidebar');		// Custom specified ID's are suffixed if they exist already.		// Automatically generated sidebar names need to be suffixed regardless starting at -0		if ( isset($args['id']) ) {			$_args['id'] = $args['id'];			$n = 2; // Start at -2 for conflicting custom ID's			while ( isset($wp_registered_sidebars[$_args['id']]) )				$_args['id'] = $args['id'] . '-' . $n++;		} else {			$n = count($wp_registered_sidebars);			do {				$_args['id'] = 'sidebar-' . ++$n;			} while ( isset($wp_registered_sidebars[$_args['id']]) );		}		register_sidebar($_args);	}}/** * Builds the definition for a single sidebar and returns the ID. * * The $args parameter takes either a string or an array with 'name' and 'id' * contained in either usage. It will be noted that the values will be applied * to all sidebars, so if creating more than one, it will be advised to allow * for WordPress to create the defaults for you. * * Example for string would be <code>'name=whatever;id=whatever1'</code> and for * the array it would be <code>array( *    'name' => 'whatever', *    'id' => 'whatever1')</code>. * * name - The name of the sidebar, which presumably the title which will be *     displayed. * id - The unique identifier by which the sidebar will be called by. * before_widget - The content that will prepended to the widgets when they are *     displayed. * after_widget - The content that will be appended to the widgets when they are *     displayed. * before_title - The content that will be prepended to the title when displayed. * after_title - the content that will be appended to the title when displayed. * * <em>Content</em> is assumed to be HTML and should be formatted as such, but * doesn't have to be. * * @since 2.2.0 * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID. * * @param string|array $args Builds Sidebar based off of 'name' and 'id' values * @return string The sidebar id that was added. */function register_sidebar($args = array()) {	global $wp_registered_sidebars;	$i = count($wp_registered_sidebars) + 1;	$defaults = array(		'name' => sprintf(__('Sidebar %d'), $i ),		'id' => "sidebar-$i",		'description' => '',		'before_widget' => '<li id="%1$s" class="widget %2$s">',		'after_widget' => "</li>\n",		'before_title' => '<h2 class="widgettitle">',		'after_title' => "</h2>\n",	);	$sidebar = wp_parse_args( $args, $defaults );	$wp_registered_sidebars[$sidebar['id']] = $sidebar;	add_theme_support('widgets');	do_action( 'register_sidebar', $sidebar );	return $sidebar['id'];}/** * Removes a sidebar from the list. * * @since 2.2.0 * * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID. * * @param string $name The ID of the sidebar when it was added. */function unregister_sidebar( $name ) {	global $wp_registered_sidebars;	if ( isset( $wp_registered_sidebars[$name] ) )		unset( $wp_registered_sidebars[$name] );}/** * Register widget for use in sidebars. * * The default widget option is 'classname' that can be override. * * The function can also be used to unregister widgets when $output_callback * parameter is an empty string. * * @since 2.2.0 * * @uses $wp_registered_widgets Uses stored registered widgets. * @uses $wp_register_widget_defaults Retrieves widget defaults. * * @param int|string $id Widget ID. * @param string $name Widget display title. * @param callback $output_callback Run when widget is called. * @param array|string Optional. $options Widget Options. * @param mixed $params,... Widget parameters to add to widget. * @return null Will return if $output_callback is empty after removing widget. */function wp_register_sidebar_widget($id, $name, $output_callback, $options = array()) {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates, $_wp_deprecated_widgets_callbacks;	$id = strtolower($id);	if ( empty($output_callback) ) {		unset($wp_registered_widgets[$id]);		return;	}	$id_base = _get_widget_id_base($id);	if ( in_array($output_callback, $_wp_deprecated_widgets_callbacks, true) && !is_callable($output_callback) ) {		if ( isset($wp_registered_widget_controls[$id]) )			unset($wp_registered_widget_controls[$id]);		if ( isset($wp_registered_widget_updates[$id_base]) )			unset($wp_registered_widget_updates[$id_base]);		return;	}	$defaults = array('classname' => $output_callback);	$options = wp_parse_args($options, $defaults);	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $output_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	if ( is_callable($output_callback) && ( !isset($wp_registered_widgets[$id]) || did_action( 'widgets_init' ) ) ) {		do_action( 'wp_register_sidebar_widget', $widget );		$wp_registered_widgets[$id] = $widget;	}}/** * Retrieve description for widget. * * When registering widgets, the options can also include 'description' that * describes the widget for display on the widget administration panel or * in the theme. * * @since 2.5.0 * * @param int|string $id Widget ID. * @return string Widget description, if available. Null on failure to retrieve description. */function wp_widget_description( $id ) {	if ( !is_scalar($id) )		return;	global $wp_registered_widgets;	if ( isset($wp_registered_widgets[$id]['description']) )		return esc_html( $wp_registered_widgets[$id]['description'] );}/** * Retrieve description for a sidebar. * * When registering sidebars a 'description' parameter can be included that * describes the sidebar for display on the widget administration panel. * * @since 2.9.0 * * @param int|string $id sidebar ID. * @return string Sidebar description, if available. Null on failure to retrieve description. */function wp_sidebar_description( $id ) {	if ( !is_scalar($id) )		return;	global $wp_registered_sidebars;	if ( isset($wp_registered_sidebars[$id]['description']) )		return esc_html( $wp_registered_sidebars[$id]['description'] );}/** * Remove widget from sidebar. * * @since 2.2.0 * * @param int|string $id Widget ID. */function wp_unregister_sidebar_widget($id) {	do_action( 'wp_unregister_sidebar_widget', $id );	wp_register_sidebar_widget($id, '', '');	wp_unregister_widget_control($id);}/** * Registers widget control callback for customizing options. * * The options contains the 'height', 'width', and 'id_base' keys. The 'height' * option is never used. The 'width' option is the width of the fully expanded * control form, but try hard to use the default width. The 'id_base' is for * multi-widgets (widgets which allow multiple instances such as the text * widget), an id_base must be provided. The widget id will end up looking like * {$id_base}-{$unique_number}. * * @since 2.2.0 * * @param int|string $id Sidebar ID. * @param string $name Sidebar display name. * @param callback $control_callback Run when sidebar is displayed. * @param array|string $options Optional. Widget options. See above long description. * @param mixed $params,... Optional. Additional parameters to add to widget. */function wp_register_widget_control($id, $name, $control_callback, $options = array()) {	global $wp_registered_widget_controls, $wp_registered_widget_updates, $wp_registered_widgets, $_wp_deprecated_widgets_callbacks;	$id = strtolower($id);	$id_base = _get_widget_id_base($id);	if ( empty($control_callback) ) {		unset($wp_registered_widget_controls[$id]);		unset($wp_registered_widget_updates[$id_base]);		return;	}	if ( in_array($control_callback, $_wp_deprecated_widgets_callbacks, true) && !is_callable($control_callback) ) {		if ( isset($wp_registered_widgets[$id]) )			unset($wp_registered_widgets[$id]);		return;	}	if ( isset($wp_registered_widget_controls[$id]) && !did_action( 'widgets_init' ) )		return;	$defaults = array('width' => 250, 'height' => 200 ); // height is never used	$options = wp_parse_args($options, $defaults);	$options['width'] = (int) $options['width'];	$options['height'] = (int) $options['height'];	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $control_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_controls[$id] = $widget;	if ( isset($wp_registered_widget_updates[$id_base]) )		return;	if ( isset($widget['params'][0]['number']) )		$widget['params'][0]['number'] = -1;	unset($widget['width'], $widget['height'], $widget['name'], $widget['id']);	$wp_registered_widget_updates[$id_base] = $widget;}function _register_widget_update_callback($id_base, $update_callback, $options = array()) {	global $wp_registered_widget_updates;	if ( isset($wp_registered_widget_updates[$id_base]) ) {		if ( empty($update_callback) )			unset($wp_registered_widget_updates[$id_base]);		return;	}	$widget = array(		'callback' => $update_callback,		'params' => array_slice(func_get_args(), 3)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_updates[$id_base] = $widget;}function _register_widget_form_callback($id, $name, $form_callback, $options = array()) {	global $wp_registered_widget_controls;	$id = strtolower($id);	if ( empty($form_callback) ) {		unset($wp_registered_widget_controls[$id]);		return;	}	if ( isset($wp_registered_widget_controls[$id]) && !did_action( 'widgets_init' ) )		return;	$defaults = array('width' => 250, 'height' => 200 );	$options = wp_parse_args($options, $defaults);	$options['width'] = (int) $options['width'];	$options['height'] = (int) $options['height'];	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $form_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_controls[$id] = $widget;}/** * Remove control callback for widget. * * @since 2.2.0 * @uses wp_register_widget_control() Unregisters by using empty callback. * * @param int|string $id Widget ID. */function wp_unregister_widget_control($id) {	return wp_register_widget_control($id, '', '');}/** * Display dynamic sidebar. * * By default it displays the default sidebar or 'sidebar-1'. The 'sidebar-1' is * not named by the theme, the actual name is '1', but 'sidebar-' is added to * the registered sidebars for the name. If you named your sidebar 'after-post', * then the parameter $index will still be 'after-post', but the lookup will be * for 'sidebar-after-post'. * * It is confusing for the $index parameter, but just know that it should just * work. When you register the sidebar in the theme, you will use the same name * for this function or "Pay no heed to the man behind the curtain." Just accept * it as an oddity of WordPress sidebar register and display. * * @since 2.2.0 * * @param int|string $index Optional, default is 1. Name or ID of dynamic sidebar. * @return bool True, if widget sidebar was found and called. False if not found or not called. */function dynamic_sidebar($index = 1) {	global $wp_registered_sidebars, $wp_registered_widgets;	if ( is_int($index) ) {		$index = "sidebar-$index";	} else {		$index = sanitize_title($index);		foreach ( (array) $wp_registered_sidebars as $key => $value ) {			if ( sanitize_title($value['name']) == $index ) {				$index = $key;				break;			}		}	}	$sidebars_widgets = wp_get_sidebars_widgets();	if ( empty($wp_registered_sidebars[$index]) || !array_key_exists($index, $sidebars_widgets) || !is_array($sidebars_widgets[$index]) || empty($sidebars_widgets[$index]) )		return false;	$sidebar = $wp_registered_sidebars[$index];	$did_one = false;	foreach ( (array) $sidebars_widgets[$index] as $id ) {		if ( !isset($wp_registered_widgets[$id]) ) continue;		$params = array_merge(			array( array_merge( $sidebar, array('widget_id' => $id, 'widget_name' => $wp_registered_widgets[$id]['name']) ) ),			(array) $wp_registered_widgets[$id]['params']		);		// Substitute HTML id and class attributes into before_widget		$classname_ = '';		foreach ( (array) $wp_registered_widgets[$id]['classname'] as $cn ) {			if ( is_string($cn) )				$classname_ .= '_' . $cn;			elseif ( is_object($cn) )				$classname_ .= '_' . get_class($cn);		}		$classname_ = ltrim($classname_, '_');		$params[0]['before_widget'] = sprintf($params[0]['before_widget'], $id, $classname_);		$params = apply_filters( 'dynamic_sidebar_params', $params );		$callback = $wp_registered_widgets[$id]['callback'];		do_action( 'dynamic_sidebar', $wp_registered_widgets[$id] );		if ( is_callable($callback) ) {			call_user_func_array($callback, $params);			$did_one = true;		}	}	return $did_one;}/** * Whether widget is displayied on the front-end. * * Either $callback or $id_base can be used * $id_base is the first argument when extending WP_Widget class * Without the optional $widget_id parameter, returns the ID of the first sidebar * in which the first instance of the widget with the given callback or $id_base is found. * With the $widget_id parameter, returns the ID of the sidebar where * the widget with that callback/$id_base AND that ID is found. * * NOTE: $widget_id and $id_base are the same for single widgets. To be effective * this function has to run after widgets have initialized, at action 'init' or later. * * @since 2.2.0 * * @param callback Optional, Widget callback to check. * @param int $widget_id Optional, but needed for checking. Widget ID. * @param string $id_base Optional, the base ID of a widget created by extending WP_Widget. * @param bool $skip_inactive Optional, whether to check in 'wp_inactive_widgets'. * @return mixed false if widget is not active or id of sidebar in which the widget is active. */function is_active_widget($callback = false, $widget_id = false, $id_base = false, $skip_inactive = true) {	global $wp_registered_widgets;	$sidebars_widgets = wp_get_sidebars_widgets();	if ( is_array($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $sidebar => $widgets ) {			if ( $skip_inactive && 'wp_inactive_widgets' == $sidebar )				continue;			if ( is_array($widgets) ) {				foreach ( $widgets as $widget ) {					if ( ( $callback && isset($wp_registered_widgets[$widget]['callback']) && $wp_registered_widgets[$widget]['callback'] == $callback ) || ( $id_base && _get_widget_id_base($widget) == $id_base ) ) {						if ( !$widget_id || $widget_id == $wp_registered_widgets[$widget]['id'] )							return $sidebar;					}				}			}		}	}	return false;}/** * Whether the dynamic sidebar is enabled and used by theme. * * @since 2.2.0 * * @return bool True, if using widgets. False, if not using widgets. */function is_dynamic_sidebar() {	global $wp_registered_widgets, $wp_registered_sidebars;	$sidebars_widgets = get_option('sidebars_widgets');	foreach ( (array) $wp_registered_sidebars as $index => $sidebar ) {		if ( count($sidebars_widgets[$index]) ) {			foreach ( (array) $sidebars_widgets[$index] as $widget )				if ( array_key_exists($widget, $wp_registered_widgets) )					return true;		}	}	return false;}/** * Whether a sidebar is in use. * * @since 2.8 * * @param mixed $index, sidebar name, id or number to check. * @return bool true if the sidebar is in use, false otherwise. */function is_active_sidebar( $index ) {	$index = ( is_int($index) ) ? "sidebar-$index" : sanitize_title($index);	$sidebars_widgets = wp_get_sidebars_widgets();	if ( !empty($sidebars_widgets[$index]) )		return true;	return false;}/* Internal Functions *//** * Retrieve full list of sidebars and their widgets. * * Will upgrade sidebar widget list, if needed. Will also save updated list, if * needed. * * @since 2.2.0 * @access private * * @param bool $deprecated. Not used. * @return array Upgraded list of widgets to version 3 array format when called from the admin. */function wp_get_sidebars_widgets($deprecated = true) {	if ( $deprecated !== true )		_deprecated_argument( __FUNCTION__, '2.8.1' );	global $wp_registered_widgets, $wp_registered_sidebars, $_wp_sidebars_widgets;	// If loading from front page, consult $_wp_sidebars_widgets rather than options	// to see if wp_convert_widget_settings() has made manipulations in memory.	if ( !is_admin() ) {		if ( empty($_wp_sidebars_widgets) )			$_wp_sidebars_widgets = get_option('sidebars_widgets', array());		$sidebars_widgets = $_wp_sidebars_widgets;	} else {		$sidebars_widgets = get_option('sidebars_widgets', array());		$_sidebars_widgets = array();		if ( isset($sidebars_widgets['wp_inactive_widgets']) || empty($sidebars_widgets) )			$sidebars_widgets['array_version'] = 3;		elseif ( !isset($sidebars_widgets['array_version']) )			$sidebars_widgets['array_version'] = 1;		switch ( $sidebars_widgets['array_version'] ) {			case 1 :				foreach ( (array) $sidebars_widgets as $index => $sidebar )				if ( is_array($sidebar) )				foreach ( (array) $sidebar as $i => $name ) {					$id = strtolower($name);					if ( isset($wp_registered_widgets[$id]) ) {						$_sidebars_widgets[$index][$i] = $id;						continue;					}					$id = sanitize_title($name);					if ( isset($wp_registered_widgets[$id]) ) {						$_sidebars_widgets[$index][$i] = $id;						continue;					}					$found = false;					foreach ( $wp_registered_widgets as $widget_id => $widget ) {						if ( strtolower($widget['name']) == strtolower($name) ) {							$_sidebars_widgets[$index][$i] = $widget['id'];							$found = true;							break;						} elseif ( sanitize_title($widget['name']) == sanitize_title($name) ) {							$_sidebars_widgets[$index][$i] = $widget['id'];							$found = true;							break;						}					}					if ( $found )						continue;					unset($_sidebars_widgets[$index][$i]);				}				$_sidebars_widgets['array_version'] = 2;				$sidebars_widgets = $_sidebars_widgets;				unset($_sidebars_widgets);			case 2 :				$sidebars = array_keys( $wp_registered_sidebars );				if ( !empty( $sidebars ) ) {					// Move the known-good ones first					foreach ( (array) $sidebars as $id ) {						if ( array_key_exists( $id, $sidebars_widgets ) ) {							$_sidebars_widgets[$id] = $sidebars_widgets[$id];							unset($sidebars_widgets[$id], $sidebars[$id]);						}					}					// move the rest to wp_inactive_widgets					if ( !isset($_sidebars_widgets['wp_inactive_widgets']) )						$_sidebars_widgets['wp_inactive_widgets'] = array();					if ( !empty($sidebars_widgets) ) {						foreach ( $sidebars_widgets as $lost => $val ) {							if ( is_array($val) )								$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );						}					}					$sidebars_widgets = $_sidebars_widgets;					unset($_sidebars_widgets);				}		}	}	if ( is_array( $sidebars_widgets ) && isset($sidebars_widgets['array_version']) )		unset($sidebars_widgets['array_version']);	$sidebars_widgets = apply_filters('sidebars_widgets', $sidebars_widgets);	return $sidebars_widgets;}/** * Set the sidebar widget option to update sidebars. * * @since 2.2.0 * @access private * * @param array $sidebars_widgets Sidebar widgets and their settings. */function wp_set_sidebars_widgets( $sidebars_widgets ) {	if ( !isset( $sidebars_widgets['array_version'] ) )		$sidebars_widgets['array_version'] = 3;	update_option( 'sidebars_widgets', $sidebars_widgets );}/** * Retrieve default registered sidebars list. * * @since 2.2.0 * @access private * * @return array */function wp_get_widget_defaults() {	global $wp_registered_sidebars;	$defaults = array();	foreach ( (array) $wp_registered_sidebars as $index => $sidebar )		$defaults[$index] = array();	return $defaults;}/** * Convert the widget settings from single to multi-widget format. * * @since 2.8.0 * * @return array */function wp_convert_widget_settings($base_name, $option_name, $settings) {	// This test may need expanding.	$single = $changed = false;	if ( empty($settings) ) {		$single = true;	} else {		foreach ( array_keys($settings) as $number ) {			if ( 'number' == $number )				continue;			if ( !is_numeric($number) ) {				$single = true;				break;			}		}	}	if ( $single ) {		$settings = array( 2 => $settings );		// If loading from the front page, update sidebar in memory but don't save to options		if ( is_admin() ) {			$sidebars_widgets = get_option('sidebars_widgets');		} else {			if ( empty($GLOBALS['_wp_sidebars_widgets']) )				$GLOBALS['_wp_sidebars_widgets'] = get_option('sidebars_widgets', array());			$sidebars_widgets = &$GLOBALS['_wp_sidebars_widgets'];		}		foreach ( (array) $sidebars_widgets as $index => $sidebar ) {			if ( is_array($sidebar) ) {				foreach ( $sidebar as $i => $name ) {					if ( $base_name == $name ) {						$sidebars_widgets[$index][$i] = "$name-2";						$changed = true;						break 2;					}				}			}		}		if ( is_admin() && $changed )			update_option('sidebars_widgets', $sidebars_widgets);	}	$settings['_multiwidget'] = 1;	if ( is_admin() )		update_option( $option_name, $settings );	return $settings;}/** * Output an arbitrary widget as a template tag * * @since 2.8 * * @param string $widget the widget's PHP class name (see default-widgets.php) * @param array $instance the widget's instance settings * @param array $args the widget's sidebar args * @return void **/function the_widget($widget, $instance = array(), $args = array()) {	global $wp_widget_factory;	$widget_obj = $wp_widget_factory->widgets[$widget];	if ( !is_a($widget_obj, 'WP_Widget') )		return;	$before_widget = sprintf('<div class="widget %s">', $widget_obj->widget_options['classname']);	$default_args = array('before_widget' => $before_widget, 'after_widget' => "</div>", 'before_title' => '<h2 class="widgettitle">', 'after_title' => '</h2>');	$args = wp_parse_args($args, $default_args);	$instance = wp_parse_args($instance);	do_action( 'the_widget', $widget, $instance, $args );	$widget_obj->_set(-1);	$widget_obj->widget($args, $instance);}/** * Private */function _get_widget_id_base($id) {	return preg_replace( '/-[0-9]+$/', '', $id );}
<?php/** * The template for displaying Tag Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Tag Archives: %s', 'twentyten' ), '<span>' . single_tag_title( '', false ) . '</span>' );				?></h1><?php/* Run the loop for the tag archive to output the posts * If you want to overload this in a child theme then include a file * called loop-tag.php and that will be used instead. */ get_template_part( 'loop', 'tag' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Press This Display and Handler. * * @package WordPress * @subpackage Press_This *//** WordPress Administration Bootstrap */require_once('./admin.php');header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! current_user_can('edit_posts') )	wp_die( __( 'Cheatin&#8217; uh?' ) );/** * Press It form handler. * * @package WordPress * @subpackage Press_This * @since 2.6.0 * * @return int Post ID */function press_it() {	// define some basic variables	$quick['post_status'] = 'draft'; // set as draft first	$quick['post_category'] = isset($_POST['post_category']) ? $_POST['post_category'] : null;	$quick['tax_input'] = isset($_POST['tax_input']) ? $_POST['tax_input'] : null;	$quick['post_title'] = ( trim($_POST['title']) != '' ) ? $_POST['title'] : '  ';	$quick['post_content'] = isset($_POST['post_content']) ? $_POST['post_content'] : '';	// insert the post with nothing in it, to get an ID	$post_ID = wp_insert_post($quick, true);	if ( is_wp_error($post_ID) )		wp_die($post_ID);	$content = isset($_POST['content']) ? $_POST['content'] : '';	$upload = false;	if ( !empty($_POST['photo_src']) && current_user_can('upload_files') ) {		foreach( (array) $_POST['photo_src'] as $key => $image) {			// see if files exist in content - we don't want to upload non-used selected files.			if ( strpos($_POST['content'], htmlspecialchars($image)) !== false ) {				$desc = isset($_POST['photo_description'][$key]) ? $_POST['photo_description'][$key] : '';				$upload = media_sideload_image($image, $post_ID, $desc);				// Replace the POSTED content <img> with correct uploaded ones. Regex contains fix for Magic Quotes				if ( !is_wp_error($upload) )					$content = preg_replace('/<img ([^>]*)src=\\\?(\"|\')'.preg_quote(htmlspecialchars($image), '/').'\\\?(\2)([^>\/]*)\/*>/is', $upload, $content);			}		}	}	// set the post_content and status	$quick['post_status'] = isset($_POST['publish']) ? 'publish' : 'draft';	$quick['post_content'] = $content;	// error handling for media_sideload	if ( is_wp_error($upload) ) {		wp_delete_post($post_ID);		wp_die($upload);	} else {		$quick['ID'] = $post_ID;		wp_update_post($quick);	}	return $post_ID;}// For submitted posts.if ( isset($_REQUEST['action']) && 'post' == $_REQUEST['action'] ) {	check_admin_referer('press-this');	$post_ID = press_it();	$posted =  $post_ID;} else {	$post_ID = 0;}// Set Variables$title = isset( $_GET['t'] ) ? trim( strip_tags( html_entity_decode( stripslashes( $_GET['t'] ) , ENT_QUOTES) ) ) : '';$selection = '';if ( !empty($_GET['s']) ) {	$selection = str_replace('&apos;', "'", stripslashes($_GET['s']));	$selection = trim( htmlspecialchars( html_entity_decode($selection, ENT_QUOTES) ) );}if ( ! empty($selection) ) {	$selection = preg_replace('/(\r?\n|\r)/', '</p><p>', $selection);	$selection = '<p>' . str_replace('<p></p>', '', $selection) . '</p>';}$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';$image = isset($_GET['i']) ? $_GET['i'] : '';if ( !empty($_REQUEST['ajax']) ) {	switch ($_REQUEST['ajax']) {		case 'video': ?>			<script type="text/javascript" charset="utf-8">			/* <![CDATA[ */				jQuery('.select').click(function() {					append_editor(jQuery('#embed-code').val());					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});				jQuery('.close').click(function() {					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});			/* ]]> */			</script>			<div class="postbox">				<h2><label for="embed-code"><?php _e('Embed Code') ?></label></h2>				<div class="inside">					<textarea name="embed-code" id="embed-code" rows="8" cols="40"><?php echo wp_htmledit_pre( $selection ); ?></textarea>					<p id="options"><a href="#" class="select button"><?php _e('Insert Video'); ?></a> <a href="#" class="close button"><?php _e('Cancel'); ?></a></p>				</div>			</div>			<?php break;		case 'photo_thickbox': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo_description"><?php _e('Description') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p class="centered">				<input type="hidden" name="this_photo" value="<?php echo esc_attr($image); ?>" id="this_photo" />				<a href="#" class="select">					<img src="<?php echo esc_url($image); ?>" alt="<?php echo esc_attr(__('Click to insert.')); ?>" title="<?php echo esc_attr(__('Click to insert.')); ?>" />				</a>			</p>			<p id="options"><a href="#" class="select button"><?php _e('Insert Image'); ?></a> <a href="#" class="cancel button"><?php _e('Cancel'); ?></a></p>			<?php break;		case 'photo_thickbox_url': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo"><?php _e('URL') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo" name="this_photo" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" />				</div>			</div>			<h3 class="tb"><label for="photo_description"><?php _e('Description') ?></label></h3>			<div id="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p id="options"><a href="#" class="select"><?php _e('Insert Image'); ?></a> | <a href="#" class="cancel"><?php _e('Cancel'); ?></a></p>			<?php break;	case 'photo_images':		/**		 * Retrieve all image URLs from given URI.		 *		 * @package WordPress		 * @subpackage Press_This		 * @since 2.6.0		 *		 * @param string $uri		 * @return string		 */		function get_images_from_uri($uri) {			$uri = preg_replace('/\/#.+?$/','', $uri);			if ( preg_match('/\.(jpg|jpe|jpeg|png|gif)$/', $uri) && !strpos($uri,'blogger.com') )				return "'" . esc_attr( html_entity_decode($uri) ) . "'";			$content = wp_remote_fopen($uri);			if ( false === $content )				return '';			$host = parse_url($uri);			$pattern = '/<img ([^>]*)src=(\"|\')([^<>\'\"]+)(\2)([^>]*)\/*>/i';			$content = str_replace(array("\n","\t","\r"), '', $content);			preg_match_all($pattern, $content, $matches);			if ( empty($matches[0]) )				return '';			$sources = array();			foreach ($matches[3] as $src) {				// if no http in url				if (strpos($src, 'http') === false)					// if it doesn't have a relative uri					if ( strpos($src, '../') === false && strpos($src, './') === false && strpos($src, '/') === 0)						$src = 'http://'.str_replace('//','/', $host['host'].'/'.$src);					else						$src = 'http://'.str_replace('//','/', $host['host'].'/'.dirname($host['path']).'/'.$src);				$sources[] = esc_attr($src);			}			return "'" . implode("','", $sources) . "'";		}		$url = wp_kses(urldecode($url), null);		echo 'new Array('.get_images_from_uri($url).')';		break;	case 'photo_js': ?>		// gather images and load some default JS		var last = null		var img, img_tag, aspect, w, h, skip, i, strtoappend = "";		if(photostorage == false) {		var my_src = eval(			jQuery.ajax({		   		type: "GET",		   		url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",				cache : false,				async : false,		   		data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",				dataType : "script"			}).responseText		);		if(my_src.length == 0) {			var my_src = eval(				jQuery.ajax({		   			type: "GET",		   			url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",					cache : false,					async : false,		   			data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",					dataType : "script"				}).responseText			);			if(my_src.length == 0) {				strtoappend = '<?php _e('Unable to retrieve images or no images on page.'); ?>';			}		}		}		for (i = 0; i < my_src.length; i++) {			img = new Image();			img.src = my_src[i];			img_attr = 'id="img' + i + '"';			skip = false;			maybeappend = '<a href="?ajax=photo_thickbox&amp;i=' + encodeURIComponent(img.src) + '&amp;u=<?php echo urlencode($url); ?>&amp;height=400&amp;width=500" title="" class="thickbox"><img src="' + img.src + '" ' + img_attr + '/></a>';			if (img.width && img.height) {				if (img.width >= 30 && img.height >= 30) {					aspect = img.width / img.height;					scale = (aspect > 1) ? (71 / img.width) : (71 / img.height);					w = img.width;					h = img.height;					if (scale < 1) {						w = parseInt(img.width * scale);						h = parseInt(img.height * scale);					}					img_attr += ' style="width: ' + w + 'px; height: ' + h + 'px;"';					strtoappend += maybeappend;				}			} else {				strtoappend += maybeappend;			}		}		function pick(img, desc) {			if (img) {				if('object' == typeof jQuery('.photolist input') && jQuery('.photolist input').length != 0) length = jQuery('.photolist input').length;				if(length == 0) length = 1;				jQuery('.photolist').append('<input name="photo_src[' + length + ']" value="' + img +'" type="hidden"/>');				jQuery('.photolist').append('<input name="photo_description[' + length + ']" value="' + desc +'" type="hidden"/>');				insert_editor( "\n\n" + encodeURI('<p style="text-align: center;"><a href="<?php echo $url; ?>"><img src="' + img +'" alt="' + desc + '" /></a></p>'));			}			return false;		}		function image_selector() {			tb_remove();			desc = jQuery('#this_photo_description').val();			src = jQuery('#this_photo').val();			pick(src, desc);			jQuery('#extra-fields').hide();			jQuery('#extra-fields').html('');			return false;		}			jQuery('#extra-fields').html('<div class="postbox"><h2>Add Photos <small id="photo_directions">(<?php _e("click images to select") ?>)</small></h2><ul class="actions"><li><a href="#" id="photo-add-url" class="thickbox button"><?php _e("Add from URL") ?> +</a></li></ul><div class="inside"><div class="titlewrap"><div id="img_container"></div></div><p id="options"><a href="#" class="close button"><?php _e('Cancel'); ?></a><a href="#" class="refresh button"><?php _e('Refresh'); ?></a></p></div>');			jQuery('#img_container').html(strtoappend);		<?php break;}die;}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<title><?php _e('Press This') ?></title><?php	add_thickbox();	wp_enqueue_style( 'press-this' );	wp_enqueue_style( 'press-this-ie');	wp_enqueue_style( 'colors' );	wp_enqueue_script( 'post' );	wp_enqueue_script( 'editor' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time() ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'press-this';var photostorage = false;//]]></script><?php	do_action('admin_print_styles');	do_action('admin_print_scripts');	do_action('admin_head');	if ( user_can_richedit() )		wp_tiny_mce( true, array( 'height' => '370' ) );?>	<script type="text/javascript">	function insert_plain_editor(text) {		edCanvas = document.getElementById('content');		edInsertContent(edCanvas, text);	}	function set_editor(text) {		if ( '' == text || '<p></p>' == text ) text = '<p><br /></p>';		if ( tinyMCE.activeEditor ) tinyMCE.execCommand('mceSetContent', false, text);	}	function insert_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceInsertContent', false, '<p>' + decodeURI(tinymce.DOM.decode(text)) + '</p>', {format : 'raw'});		} else {			insert_plain_editor(decodeURI(text));		}	}	function append_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceSetContent', false, tinyMCE.activeEditor.getContent({format : 'raw'}) + '<p>' + text + '</p>');			tinyMCE.execCommand('mceCleanup');		} else {			insert_plain_editor(text);		}	}	function show(tab_name) {		jQuery('#extra-fields').html('');		switch(tab_name) {			case 'video' :				jQuery('#extra-fields').load('<?php echo esc_url($_SERVER['PHP_SELF']); ?>', { ajax: 'video', s: '<?php echo esc_attr($selection); ?>'}, function() {					<?php					$content = '';					if ( preg_match("/youtube\.com\/watch/i", $url) ) {						list($domain, $video_id) = split("v=", $url);						$video_id = esc_attr($video_id);						$content = '<object width="425" height="350"><param name="movie" value="http://www.youtube.com/v/' . $video_id . '"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/' . $video_id . '" type="application/x-shockwave-flash" wmode="transparent" width="425" height="350"></embed></object>';					} elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) {						list($domain, $video_id) = split(".com/", $url);						$video_id = esc_attr($video_id);						$content = '<object width="400" height="225"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" />	<embed src="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="225"></embed></object>';						if ( trim($selection) == '' )							$selection = '<p><a href="http://www.vimeo.com/' . $video_id . '?pg=embed&sec=' . $video_id . '">' . $title . '</a> on <a href="http://vimeo.com?pg=embed&sec=' . $video_id . '">Vimeo</a></p>';					} elseif ( strpos( $selection, '<object' ) !== false ) {						$content = $selection;					}					?>					jQuery('#embed-code').prepend('<?php echo htmlentities($content); ?>');				});				jQuery('#extra-fields').show();				return false;				break;			case 'photo' :				function setup_photo_actions() {					jQuery('.close').click(function() {						jQuery('#extra-fields').hide();						jQuery('#extra-fields').html('');					});					jQuery('.refresh').click(function() {						photostorage = false;						show('photo');					});					jQuery('#photo-add-url').attr('href', '?ajax=photo_thickbox_url&height=200&width=500');					tb_init('#extra-fields .thickbox');					jQuery('#waiting').hide();					jQuery('#extra-fields').show();				}				jQuery('#extra-fields').before('<div id="waiting"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /> <?php echo esc_js( __( 'Loading...' ) ); ?></div>');				if(photostorage == false) {					jQuery.ajax({						type: "GET",						cache : false,						url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",						data: "ajax=photo_js&u=<?php echo urlencode($url)?>",						dataType : "script",						success : function(data) {							eval(data);							photostorage = jQuery('#extra-fields').html();							setup_photo_actions();						}					});				} else {					jQuery('#extra-fields').html(photostorage);					setup_photo_actions();				}				return false;				break;		}	}	jQuery(document).ready(function($) {		//resize screen		window.resizeTo(720,540);		// set button actions    	jQuery('#photo_button').click(function() { show('photo'); return false; });		jQuery('#video_button').click(function() { show('video'); return false; });		// auto select		<?php if ( preg_match("/youtube\.com\/watch/i", $url) ) { ?>			show('video');		<?php } elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) { ?>			show('video');		<?php  } elseif ( preg_match("/flickr\.com/i", $url) ) { ?>			show('photo');		<?php } ?>		jQuery('#title').unbind();		jQuery('#publish, #save').click(function() { jQuery('#saving').css('display', 'inline'); });		$('#tagsdiv-post_tag, #categorydiv').children('h3, .handlediv').click(function(){			$(this).siblings('.inside').toggle();		});	});</script></head><body class="press-this wp-admin"><div id="wphead"></div><form action="press-this.php?action=post" method="post"><div id="poststuff" class="metabox-holder">	<div id="side-info-column">		<div class="sleeve">			<h1 id="viewsite"><a href="<?php echo get_option('home'); ?>/" target="_blank"><?php bloginfo('name'); ?> &rsaquo; <?php _e('Press This') ?></a></span></h1>			<?php wp_nonce_field('press-this') ?>			<input type="hidden" name="post_type" id="post_type" value="text"/>			<input type="hidden" name="autosave" id="autosave" />			<input type="hidden" id="original_post_status" name="original_post_status" value="draft" />			<input type="hidden" id="prev_status" name="prev_status" value="draft" />			<!-- This div holds the photo metadata -->			<div class="photolist"></div>			<div id="submitdiv" class="stuffbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><?php _e('Publish') ?></h3>				<div class="inside">					<p>						<input class="button" type="submit" name="draft" value="<?php esc_attr_e('Save Draft') ?>" id="save" />						<?php if ( current_user_can('publish_posts') ) { ?>							<input class="button-primary" type="submit" name="publish" value="<?php esc_attr_e('Publish') ?>" id="publish" />						<?php } else { ?>							<br /><br /><input class="button-primary" type="submit" name="review" value="<?php esc_attr_e('Submit for Review') ?>" id="review" />						<?php } ?>						<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" id="saving" style="display:none;" />					</p>				</div>			</div>			<?php $tax = get_taxonomy( 'category' ); ?>			<div id="categorydiv" class="postbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>"><br /></div>				<h3 class="hndle"><?php _e('Categories') ?></h3>				<div class="inside">				<div id="taxonomy-category" class="categorydiv">					<ul id="category-tabs" class="category-tabs">						<li class="tabs"><a href="#category-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>						<li class="hide-if-no-js"><a href="#category-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>					</ul>					<div id="category-pop" class="tabs-panel" style="display: none;">						<ul id="categorychecklist-pop" class="categorychecklist form-no-clear" >							<?php $popular_ids = wp_popular_terms_checklist( 'category' ); ?>						</ul>					</div>					<div id="category-all" class="tabs-panel">						<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">							<?php wp_terms_checklist($post_ID, array( 'taxonomy' => 'category', 'popular_cats' => $popular_ids ) ) ?>						</ul>					</div>					<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>					<p><em><?php _e('You cannot modify this Taxonomy.'); ?></em></p>					<?php endif; ?>					<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>						<div id="category-adder" class="wp-hidden-children">							<h4>								<a id="category-add-toggle" href="#category-add" class="hide-if-no-js" tabindex="3">									<?php printf( __( '+ %s' ), $tax->labels->add_new_item ); ?>								</a>							</h4>							<p id="category-add" class="category-add wp-hidden-child">								<label class="screen-reader-text" for="newcategory"><?php echo $tax->labels->add_new_item; ?></label>								<input type="text" name="newcategory" id="newcategory" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>								<label class="screen-reader-text" for="newcategory_parent">									<?php echo $tax->labels->parent_item_colon; ?>								</label>								<?php wp_dropdown_categories( array( 'taxonomy' => 'category', 'hide_empty' => 0, 'name' => 'newcategory_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>								<input type="button" id="category-add-submit" class="add:categorychecklist:category-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />								<?php wp_nonce_field( 'add-category', '_ajax_nonce', false ); ?>								<span id="category-ajax-response"></span>							</p>						</div>					<?php endif; ?>				</div>				</div>			</div>			<div id="tagsdiv-post_tag" class="stuffbox" >				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><span><?php _e('Post Tags'); ?></span></h3>				<div class="inside">					<div class="tagsdiv" id="post_tag">						<p class="jaxtag">							<label class="screen-reader-text" for="newtag"><?php _e('Post Tags'); ?></label>							<input type="hidden" name="tax_input[post_tag]" class="the-tags" id="tax-input[post_tag]" value="" />							<div class="ajaxtag">								<input type="text" name="newtag[post_tag]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />								<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" />							</div>						</p>						<div class="tagchecklist"></div>					</div>					<p class="tagcloud-link"><a href="#titlediv" class="tagcloud-link" id="link-post_tag"><?php _e('Choose from the most used tags in Post Tags'); ?></a></p>				</div>			</div>		</div>	</div>	<div class="posting">		<?php if ( isset($posted) && intval($posted) ) { $post_ID = intval($posted); ?>		<div id="message" class="updated"><p><strong><?php _e('Your post has been saved.'); ?></strong> <a onclick="window.opener.location.replace(this.href); window.close();" href="<?php echo get_permalink( $post_ID); ?>"><?php _e('View post'); ?></a> | <a href="<?php echo get_edit_post_link( $post_ID ); ?>" onclick="window.opener.location.replace(this.href); window.close();"><?php _e('Edit Post'); ?></a> | <a href="#" onclick="window.close();"><?php _e('Close Window'); ?></a></p></div>		<?php } ?>		<div id="titlediv">			<div class="titlewrap">				<input name="title" id="title" class="text" value="<?php echo esc_attr($title);?>"/>			</div>		</div>		<div id="extra-fields" style="display: none"></div>		<div class="postdivrich">			<ul id="actions" class="actions">				<li id="photo_button">					Add: <?php if ( current_user_can('upload_files') ) { ?><a title="<?php _e('Insert an Image'); ?>" href="#"><img alt="<?php _e('Insert an Image'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-image.gif?ver=20100531' ) ); ?>"/></a>					<?php } ?>				</li>				<li id="video_button">					<a title="<?php _e('Embed a Video'); ?>" href="#"><img alt="<?php _e('Embed a Video'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-video.gif?ver=20100531' ) ); ?>"/></a>				</li>				<?php if ( user_can_richedit() ) { ?>				<li id="switcher">					<?php wp_print_scripts( 'quicktags' ); ?>					<?php add_filter('the_editor_content', 'wp_richedit_pre'); ?>					<a id="edButtonHTML" onclick="switchEditors.go('content', 'html');"><?php _e('HTML'); ?></a>					<a id="edButtonPreview" class="active" onclick="switchEditors.go('content', 'tinymce');"><?php _e('Visual'); ?></a>					<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('content')" /></div>				</li>				<?php } ?>			</ul>			<div id="quicktags"></div>			<div class="editor-container">				<textarea name="content" id="content" style="width:100%;" class="theEditor" rows="15"><?php					if ( $selection )						echo wp_richedit_pre($selection);					if ( $url ) {						echo '<p>';						if ( $selection )							_e('via ');						printf( "<a href='%s'>%s</a>.</p>", esc_url( $url ), esc_html( $title ) );					}				?></textarea>			</div>		</div>	</div></div></form><?php do_action('admin_print_footer_scripts'); ?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?php/** * The template for displaying 404 pages (Not Found). * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>	<div id="container">		<div id="content" role="main">			<div id="post-0" class="post error404 not-found">				<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>				<div class="entry-content">					<p><?php _e( 'Apologies, but the page you requested could not be found. Perhaps searching will help.', 'twentyten' ); ?></p>					<?php get_search_form(); ?>				</div><!-- .entry-content -->			</div><!-- #post-0 -->		</div><!-- #content -->	</div><!-- #container -->	<script type="text/javascript">		// focus on search field after it has loaded		document.getElementById('s') && document.getElementById('s').focus();	</script><?php get_footer(); ?>
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress enqueued dependiences class. * * @package BackPress * @uses _WP_Dependency * @since r74 */class WP_Dependencies {	var $registered = array();	var $queue = array();	var $to_do = array();	var $done = array();	var $args = array();	var $groups = array();	var $group = 0;	function WP_Dependencies() {		$args = func_get_args();		call_user_func_array( array(&$this, '__construct'), $args );	}	function __construct() {}	/**	 * Do the dependencies	 *	 * Process the items passed to it or the queue.  Processes all dependencies.	 *	 * @param mixed handles (optional) items to be processed.  (void) processes queue, (string) process that item, (array of strings) process those items	 * @return array Items that have been processed	 */	function do_items( $handles = false, $group = false ) {		// Print the queue if nothing is passed.  If a string is passed, print that script.  If an array is passed, print those scripts.		$handles = false === $handles ? $this->queue : (array) $handles;		$this->all_deps( $handles );		foreach( $this->to_do as $key => $handle ) {			if ( !in_array($handle, $this->done) && isset($this->registered[$handle]) ) {				if ( ! $this->registered[$handle]->src ) { // Defines a group.					$this->done[] = $handle;					continue;				}				if ( $this->do_item( $handle, $group ) )					$this->done[] = $handle;				unset( $this->to_do[$key] );			}		}		return $this->done;	}	function do_item( $handle ) {		return isset($this->registered[$handle]);	}	/**	 * Determines dependencies	 *	 * Recursively builds array of items to process taking dependencies into account.  Does NOT catch infinite loops.	 *	 * @param mixed handles Accepts (string) dep name or (array of strings) dep names	 * @param bool recursion Used internally when function calls itself	 */	function all_deps( $handles, $recursion = false, $group = false ) {		if ( !$handles = (array) $handles )			return false;		foreach ( $handles as $handle ) {			$handle_parts = explode('?', $handle);			$handle = $handle_parts[0];			$queued = in_array($handle, $this->to_do, true);			if ( in_array($handle, $this->done, true) ) // Already done				continue;			$moved = $this->set_group( $handle, $recursion, $group );			if ( $queued && !$moved ) // already queued and in the right group				continue;			$keep_going = true;			if ( !isset($this->registered[$handle]) )				$keep_going = false; // Script doesn't exist			elseif ( $this->registered[$handle]->deps && array_diff($this->registered[$handle]->deps, array_keys($this->registered)) )				$keep_going = false; // Script requires deps which don't exist (not a necessary check.  efficiency?)			elseif ( $this->registered[$handle]->deps && !$this->all_deps( $this->registered[$handle]->deps, true, $group ) )				$keep_going = false; // Script requires deps which don't exist			if ( !$keep_going ) { // Either script or its deps don't exist.				if ( $recursion )					return false; // Abort this branch.				else					continue; // We're at the top level.  Move on to the next one.			}			if ( $queued ) // Already grobbed it and its deps				continue;			if ( isset($handle_parts[1]) )				$this->args[$handle] = $handle_parts[1];			$this->to_do[] = $handle;		}		return true;	}	/**	 * Adds item	 *	 * Adds the item only if no item of that name already exists	 *	 * @param string handle Script name	 * @param string src Script url	 * @param array deps (optional) Array of script names on which this script depends	 * @param string ver (optional) Script version (used for cache busting)	 * @return array Hierarchical array of dependencies	 */	function add( $handle, $src, $deps = array(), $ver = false, $args = null ) {		if ( isset($this->registered[$handle]) )			return false;		$this->registered[$handle] = new _WP_Dependency( $handle, $src, $deps, $ver, $args );		return true;	}	/**	 * Adds extra data	 *	 * Adds data only if script has already been added	 *	 * @param string handle Script name	 * @param string data_name Name of object in which to store extra data	 * @param array data Array of extra data	 * @return bool success	 */	function add_data( $handle, $data_name, $data ) {		if ( !isset($this->registered[$handle]) )			return false;		return $this->registered[$handle]->add_data( $data_name, $data );	}	function remove( $handles ) {		foreach ( (array) $handles as $handle )			unset($this->registered[$handle]);	}	function enqueue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			if ( !in_array($handle[0], $this->queue) && isset($this->registered[$handle[0]]) ) {				$this->queue[] = $handle[0];				if ( isset($handle[1]) )					$this->args[$handle[0]] = $handle[1];			}		}	}	function dequeue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			$key = array_search($handle[0], $this->queue);			if ( false !== $key ) {				unset($this->queue[$key]);				unset($this->args[$handle[0]]);			}		}	}	function query( $handle, $list = 'registered' ) { // registered, queue, done, to_do		switch ( $list ) :		case 'registered':		case 'scripts': // back compat			if ( isset($this->registered[$handle]) )				return $this->registered[$handle];			break;		case 'to_print': // back compat		case 'printed': // back compat			if ( 'to_print' == $list )				$list = 'to_do';			else				$list = 'printed';		default:			if ( in_array($handle, $this->$list) )				return true;			break;		endswitch;		return false;	}	function set_group( $handle, $recursion, $group ) {		$group = (int) $group;		if ( $recursion )			$group = min($this->group, $group);		else			$this->group = $group;		if ( isset($this->groups[$handle]) && $this->groups[$handle] <= $group )			return false;		$this->groups[$handle] = $group;		return true;	}}class _WP_Dependency {	var $handle;	var $src;	var $deps = array();	var $ver = false;	var $args = null;	var $extra = array();	function _WP_Dependency() {		@list($this->handle, $this->src, $this->deps, $this->ver, $this->args) = func_get_args();		if ( !is_array($this->deps) )			$this->deps = array();	}	function add_data( $name, $data ) {		if ( !is_scalar($name) )			return false;		$this->extra[$name] = $data;		return true;	}}
<?php/** * mail_fetch/setup.php * * @package SquirrelMail * * @copyright (c) 1999-2006 The SquirrelMail Project Team * * @copyright (c) 1999 CDI (cdi@thewebmasters.net) All Rights Reserved * Modified by Philippe Mingo 2001 mingo@rotedic.com * An RFC 1939 compliant wrapper class for the POP3 protocol. * * Licensed under the GNU GPL. For full terms see the file COPYING. * * pop3 class * * $Id$ */class POP3 {    var $ERROR      = '';       //  Error string.    var $TIMEOUT    = 60;       //  Default timeout before giving up on a                                //  network operation.    var $COUNT      = -1;       //  Mailbox msg count    var $BUFFER     = 512;      //  Socket buffer for socket fgets() calls.                                //  Per RFC 1939 the returned line a POP3                                //  server can send is 512 bytes.    var $FP         = '';       //  The connection to the server's                                //  file descriptor    var $MAILSERVER = '';       // Set this to hard code the server name    var $DEBUG      = FALSE;    // set to true to echo pop3                                // commands and responses to error_log                                // this WILL log passwords!    var $BANNER     = '';       //  Holds the banner returned by the                                //  pop server - used for apop()    var $ALLOWAPOP  = FALSE;    //  Allow or disallow apop()                                //  This must be set to true                                //  manually    function POP3 ( $server = '', $timeout = '' ) {        settype($this->BUFFER,"integer");        if( !empty($server) ) {            // Do not allow programs to alter MAILSERVER            // if it is already specified. They can get around            // this if they -really- want to, so don't count on it.            if(empty($this->MAILSERVER))                $this->MAILSERVER = $server;        }        if(!empty($timeout)) {            settype($timeout,"integer");            $this->TIMEOUT = $timeout;            if (!ini_get('safe_mode'))                set_time_limit($timeout);        }        return true;    }    function update_timer () {        if (!ini_get('safe_mode'))            set_time_limit($this->TIMEOUT);        return true;    }    function connect ($server, $port = 110)  {        //  Opens a socket to the specified server. Unless overridden,        //  port defaults to 110. Returns true on success, false on fail        // If MAILSERVER is set, override $server with it's value	if (!isset($port) || !$port) {$port = 110;}        if(!empty($this->MAILSERVER))            $server = $this->MAILSERVER;        if(empty($server)){            $this->ERROR = "POP3 connect: " . _("No server specified");            unset($this->FP);            return false;        }        $fp = @fsockopen("$server", $port, $errno, $errstr);        if(!$fp) {            $this->ERROR = "POP3 connect: " . _("Error ") . "[$errno] [$errstr]";            unset($this->FP);            return false;        }        socket_set_blocking($fp,-1);        $this->update_timer();        $reply = fgets($fp,$this->BUFFER);        $reply = $this->strip_clf($reply);        if($this->DEBUG)            error_log("POP3 SEND [connect: $server] GOT [$reply]",0);        if(!$this->is_ok($reply)) {            $this->ERROR = "POP3 connect: " . _("Error ") . "[$reply]";            unset($this->FP);            return false;        }        $this->FP = $fp;        $this->BANNER = $this->parse_banner($reply);        return true;    }    function user ($user = "") {        // Sends the USER command, returns true or false        if( empty($user) ) {            $this->ERROR = "POP3 user: " . _("no login ID submitted");            return false;        } elseif(!isset($this->FP)) {            $this->ERROR = "POP3 user: " . _("connection not established");            return false;        } else {            $reply = $this->send_cmd("USER $user");            if(!$this->is_ok($reply)) {                $this->ERROR = "POP3 user: " . _("Error ") . "[$reply]";                return false;            } else                return true;        }    }    function pass ($pass = "")     {        // Sends the PASS command, returns # of msgs in mailbox,        // returns false (undef) on Auth failure        if(empty($pass)) {            $this->ERROR = "POP3 pass: " . _("No password submitted");            return false;        } elseif(!isset($this->FP)) {            $this->ERROR = "POP3 pass: " . _("connection not established");            return false;        } else {            $reply = $this->send_cmd("PASS $pass");            if(!$this->is_ok($reply)) {                $this->ERROR = "POP3 pass: " . _("Authentication failed") . " [$reply]";                $this->quit();                return false;            } else {                //  Auth successful.                $count = $this->last("count");                $this->COUNT = $count;                return $count;            }        }    }    function apop ($login,$pass) {        //  Attempts an APOP login. If this fails, it'll        //  try a standard login. YOUR SERVER MUST SUPPORT        //  THE USE OF THE APOP COMMAND!        //  (apop is optional per rfc1939)        if(!isset($this->FP)) {            $this->ERROR = "POP3 apop: " . _("No connection to server");            return false;        } elseif(!$this->ALLOWAPOP) {            $retVal = $this->login($login,$pass);            return $retVal;        } elseif(empty($login)) {            $this->ERROR = "POP3 apop: " . _("No login ID submitted");            return false;        } elseif(empty($pass)) {            $this->ERROR = "POP3 apop: " . _("No password submitted");            return false;        } else {            $banner = $this->BANNER;            if( (!$banner) or (empty($banner)) ) {                $this->ERROR = "POP3 apop: " . _("No server banner") . ' - ' . _("abort");                $retVal = $this->login($login,$pass);                return $retVal;            } else {                $AuthString = $banner;                $AuthString .= $pass;                $APOPString = md5($AuthString);                $cmd = "APOP $login $APOPString";                $reply = $this->send_cmd($cmd);                if(!$this->is_ok($reply)) {                    $this->ERROR = "POP3 apop: " . _("apop authentication failed") . ' - ' . _("abort");                    $retVal = $this->login($login,$pass);                    return $retVal;                } else {                    //  Auth successful.                    $count = $this->last("count");                    $this->COUNT = $count;                    return $count;                }            }        }    }    function login ($login = "", $pass = "") {        // Sends both user and pass. Returns # of msgs in mailbox or        // false on failure (or -1, if the error occurs while getting        // the number of messages.)        if( !isset($this->FP) ) {            $this->ERROR = "POP3 login: " . _("No connection to server");            return false;        } else {            $fp = $this->FP;            if( !$this->user( $login ) ) {                //  Preserve the error generated by user()                return false;            } else {                $count = $this->pass($pass);                if( (!$count) || ($count == -1) ) {                    //  Preserve the error generated by last() and pass()                    return false;                } else                    return $count;            }        }    }    function top ($msgNum, $numLines = "0") {        //  Gets the header and first $numLines of the msg body        //  returns data in an array with each returned line being        //  an array element. If $numLines is empty, returns        //  only the header information, and none of the body.        if(!isset($this->FP)) {            $this->ERROR = "POP3 top: " . _("No connection to server");            return false;        }        $this->update_timer();        $fp = $this->FP;        $buffer = $this->BUFFER;        $cmd = "TOP $msgNum $numLines";        fwrite($fp, "TOP $msgNum $numLines\r\n");        $reply = fgets($fp, $buffer);        $reply = $this->strip_clf($reply);        if($this->DEBUG) {            @error_log("POP3 SEND [$cmd] GOT [$reply]",0);        }        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 top: " . _("Error ") . "[$reply]";            return false;        }        $count = 0;        $MsgArray = array();        $line = fgets($fp,$buffer);        while ( !ereg("^\.\r\n",$line))        {            $MsgArray[$count] = $line;            $count++;            $line = fgets($fp,$buffer);            if(empty($line))    { break; }        }        return $MsgArray;    }    function pop_list ($msgNum = "") {        //  If called with an argument, returns that msgs' size in octets        //  No argument returns an associative array of undeleted        //  msg numbers and their sizes in octets        if(!isset($this->FP))        {            $this->ERROR = "POP3 pop_list: " . _("No connection to server");            return false;        }        $fp = $this->FP;        $Total = $this->COUNT;        if( (!$Total) or ($Total == -1) )        {            return false;        }        if($Total == 0)        {            return array("0","0");            // return -1;   // mailbox empty        }        $this->update_timer();        if(!empty($msgNum))        {            $cmd = "LIST $msgNum";            fwrite($fp,"$cmd\r\n");            $reply = fgets($fp,$this->BUFFER);            $reply = $this->strip_clf($reply);            if($this->DEBUG) {                @error_log("POP3 SEND [$cmd] GOT [$reply]",0);            }            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 pop_list: " . _("Error ") . "[$reply]";                return false;            }            list($junk,$num,$size) = preg_split('/\s+/',$reply);            return $size;        }        $cmd = "LIST";        $reply = $this->send_cmd($cmd);        if(!$this->is_ok($reply))        {            $reply = $this->strip_clf($reply);            $this->ERROR = "POP3 pop_list: " . _("Error ") .  "[$reply]";            return false;        }        $MsgArray = array();        $MsgArray[0] = $Total;        for($msgC=1;$msgC <= $Total; $msgC++)        {            if($msgC > $Total) { break; }            $line = fgets($fp,$this->BUFFER);            $line = $this->strip_clf($line);            if(ereg("^\.",$line))            {                $this->ERROR = "POP3 pop_list: " . _("Premature end of list");                return false;            }            list($thisMsg,$msgSize) = preg_split('/\s+/',$line);            settype($thisMsg,"integer");            if($thisMsg != $msgC)            {                $MsgArray[$msgC] = "deleted";            }            else            {                $MsgArray[$msgC] = $msgSize;            }        }        return $MsgArray;    }    function get ($msgNum) {        //  Retrieve the specified msg number. Returns an array        //  where each line of the msg is an array element.        if(!isset($this->FP))        {            $this->ERROR = "POP3 get: " . _("No connection to server");            return false;        }        $this->update_timer();        $fp = $this->FP;        $buffer = $this->BUFFER;        $cmd = "RETR $msgNum";        $reply = $this->send_cmd($cmd);        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 get: " . _("Error ") . "[$reply]";            return false;        }        $count = 0;        $MsgArray = array();        $line = fgets($fp,$buffer);        while ( !ereg("^\.\r\n",$line))        {            if ( $line{0} == '.' ) { $line = substr($line,1); }            $MsgArray[$count] = $line;            $count++;            $line = fgets($fp,$buffer);            if(empty($line))    { break; }        }        return $MsgArray;    }    function last ( $type = "count" ) {        //  Returns the highest msg number in the mailbox.        //  returns -1 on error, 0+ on success, if type != count        //  results in a popstat() call (2 element array returned)        $last = -1;        if(!isset($this->FP))        {            $this->ERROR = "POP3 last: " . _("No connection to server");            return $last;        }        $reply = $this->send_cmd("STAT");        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 last: " . _("Error ") . "[$reply]";            return $last;        }        $Vars = preg_split('/\s+/',$reply);        $count = $Vars[1];        $size = $Vars[2];        settype($count,"integer");        settype($size,"integer");        if($type != "count")        {            return array($count,$size);        }        return $count;    }    function reset () {        //  Resets the status of the remote server. This includes        //  resetting the status of ALL msgs to not be deleted.        //  This method automatically closes the connection to the server.        if(!isset($this->FP))        {            $this->ERROR = "POP3 reset: " . _("No connection to server");            return false;        }        $reply = $this->send_cmd("RSET");        if(!$this->is_ok($reply))        {            //  The POP3 RSET command -never- gives a -ERR            //  response - if it ever does, something truely            //  wild is going on.            $this->ERROR = "POP3 reset: " . _("Error ") . "[$reply]";            @error_log("POP3 reset: ERROR [$reply]",0);        }        $this->quit();        return true;    }    function send_cmd ( $cmd = "" )    {        //  Sends a user defined command string to the        //  POP server and returns the results. Useful for        //  non-compliant or custom POP servers.        //  Do NOT includ the \r\n as part of your command        //  string - it will be appended automatically.        //  The return value is a standard fgets() call, which        //  will read up to $this->BUFFER bytes of data, until it        //  encounters a new line, or EOF, whichever happens first.        //  This method works best if $cmd responds with only        //  one line of data.        if(!isset($this->FP))        {            $this->ERROR = "POP3 send_cmd: " . _("No connection to server");            return false;        }        if(empty($cmd))        {            $this->ERROR = "POP3 send_cmd: " . _("Empty command string");            return "";        }        $fp = $this->FP;        $buffer = $this->BUFFER;        $this->update_timer();        fwrite($fp,"$cmd\r\n");        $reply = fgets($fp,$buffer);        $reply = $this->strip_clf($reply);        if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }        return $reply;    }    function quit() {        //  Closes the connection to the POP3 server, deleting        //  any msgs marked as deleted.        if(!isset($this->FP))        {            $this->ERROR = "POP3 quit: " . _("connection does not exist");            return false;        }        $fp = $this->FP;        $cmd = "QUIT";        fwrite($fp,"$cmd\r\n");        $reply = fgets($fp,$this->BUFFER);        $reply = $this->strip_clf($reply);        if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }        fclose($fp);        unset($this->FP);        return true;    }    function popstat () {        //  Returns an array of 2 elements. The number of undeleted        //  msgs in the mailbox, and the size of the mbox in octets.        $PopArray = $this->last("array");        if($PopArray == -1) { return false; }        if( (!$PopArray) or (empty($PopArray)) )        {            return false;        }        return $PopArray;    }    function uidl ($msgNum = "")    {        //  Returns the UIDL of the msg specified. If called with        //  no arguments, returns an associative array where each        //  undeleted msg num is a key, and the msg's uidl is the element        //  Array element 0 will contain the total number of msgs        if(!isset($this->FP)) {            $this->ERROR = "POP3 uidl: " . _("No connection to server");            return false;        }        $fp = $this->FP;        $buffer = $this->BUFFER;        if(!empty($msgNum)) {            $cmd = "UIDL $msgNum";            $reply = $this->send_cmd($cmd);            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 uidl: " . _("Error ") . "[$reply]";                return false;            }            list ($ok,$num,$myUidl) = preg_split('/\s+/',$reply);            return $myUidl;        } else {            $this->update_timer();            $UIDLArray = array();            $Total = $this->COUNT;            $UIDLArray[0] = $Total;            if ($Total < 1)            {                return $UIDLArray;            }            $cmd = "UIDL";            fwrite($fp, "UIDL\r\n");            $reply = fgets($fp, $buffer);            $reply = $this->strip_clf($reply);            if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 uidl: " . _("Error ") . "[$reply]";                return false;            }            $line = "";            $count = 1;            $line = fgets($fp,$buffer);            while ( !ereg("^\.\r\n",$line)) {                if(ereg("^\.\r\n",$line)) {                    break;                }                list ($msg,$msgUidl) = preg_split('/\s+/',$line);                $msgUidl = $this->strip_clf($msgUidl);                if($count == $msg) {                    $UIDLArray[$msg] = $msgUidl;                }                else                {                    $UIDLArray[$count] = 'deleted';                }                $count++;                $line = fgets($fp,$buffer);            }        }        return $UIDLArray;    }    function delete ($msgNum = "") {        //  Flags a specified msg as deleted. The msg will not        //  be deleted until a quit() method is called.        if(!isset($this->FP))        {            $this->ERROR = "POP3 delete: " . _("No connection to server");            return false;        }        if(empty($msgNum))        {            $this->ERROR = "POP3 delete: " . _("No msg number submitted");            return false;        }        $reply = $this->send_cmd("DELE $msgNum");        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 delete: " . _("Command failed ") . "[$reply]";            return false;        }        return true;    }    //  *********************************************************    //  The following methods are internal to the class.    function is_ok ($cmd = "") {        //  Return true or false on +OK or -ERR        if( empty($cmd) )            return false;        else            return( ereg ("^\+OK", $cmd ) );    }    function strip_clf ($text = "") {        // Strips \r\n from server responses        if(empty($text))            return $text;        else {            $stripped = str_replace("\r",'',$text);            $stripped = str_replace("\n",'',$stripped);            return $stripped;        }    }    function parse_banner ( $server_text ) {        $outside = true;        $banner = "";        $length = strlen($server_text);        for($count =0; $count < $length; $count++)        {            $digit = substr($server_text,$count,1);            if(!empty($digit))             {                if( (!$outside) && ($digit != '<') && ($digit != '>') )                {                    $banner .= $digit;                }                if ($digit == '<')                {                    $outside = false;                }                if($digit == '>')                {                    $outside = true;                }            }        }        $banner = $this->strip_clf($banner);    // Just in case        return "<$banner>";    }}   // End class?>
<?php/** * WordPress Direct Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for direct PHP file and folder manipulation. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_Direct extends WP_Filesystem_Base {	var $errors = null;	/**	 * constructor	 *	 * @param $arg mixed ingored argument	 */	function WP_Filesystem_Direct($arg) {		$this->method = 'direct';		$this->errors = new WP_Error();	}	/**	 * connect filesystem.	 *	 * @return bool Returns true on success or false on failure (always true for WP_Filesystem_Direct).	 */	function connect() {		return true;	}	/**	 * Reads entire file into a string	 *	 * @param $file string Name of the file to read.	 * @return string|bool The function returns the read data or false on failure.	 */	function get_contents($file) {		return @file_get_contents($file);	}	/**	 * Reads entire file into an array	 *	 * @param $file string Path to the file.	 * @return array|bool the file contents in an array or false on failure.	 */	function get_contents_array($file) {		return @file($file);	}	/**	 * Write a string to a file	 *	 * @param $file string Remote path to the file where to write the data.	 * @param $contents string The data to write.	 * @param $mode int (optional) The file permissions as octal number, usually 0644.	 * @return bool False upon failure.	 */	function put_contents($file, $contents, $mode = false ) {		if ( ! ($fp = @fopen($file, 'w')) )			return false;		@fwrite($fp, $contents);		@fclose($fp);		$this->chmod($file, $mode);		return true;	}	/**	 * Gets the current working directory	 *	 * @return string|bool the current working directory on success, or false on failure.	 */	function cwd() {		return @getcwd();	}	/**	 * Change directory	 *	 * @param $dir string The new current directory.	 * @return bool Returns true on success or false on failure.	 */	function chdir($dir) {		return @chdir($dir);	}	/**	 * Changes file group	 *	 * @param $file string Path to the file.	 * @param $group mixed A group name or number.	 * @param $recursive bool (optional) If set True changes file group recursivly. Defaults to False.	 * @return bool Returns true on success or false on failure.	 */	function chgrp($file, $group, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive )			return @chgrp($file, $group);		if ( ! $this->is_dir($file) )			return @chgrp($file, $group);		//Is a directory, and we want recursive		$file = trailingslashit($file);		$filelist = $this->dirlist($file);		foreach ($filelist as $filename)			$this->chgrp($file . $filename, $group, $recursive);		return true;	}	/**	 * Changes filesystem permissions	 *	 * @param $file string Path to the file.	 * @param $mode int (optional) The permissions as octal number, usually 0644 for files, 0755 for dirs.	 * @param $recursive bool (optional) If set True changes file group recursivly. Defaults to False.	 * @return bool Returns true on success or false on failure.	 */	function chmod($file, $mode = false, $recursive = false) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		if ( ! $recursive || ! $this->is_dir($file) )			return @chmod($file, $mode);		//Is a directory, and we want recursive		$file = trailingslashit($file);		$filelist = $this->dirlist($file);		foreach ( (array)$filelist as $filename => $filemeta)			$this->chmod($file . $filename, $mode, $recursive);		return true;	}	/**	 * Changes file owner	 *	 * @param $file string Path to the file.	 * @param $owner mixed A user name or number.	 * @param $recursive bool (optional) If set True changes file owner recursivly. Defaults to False.	 * @return bool Returns true on success or false on failure.	 */	function chown($file, $owner, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive )			return @chown($file, $owner);		if ( ! $this->is_dir($file) )			return @chown($file, $owner);		//Is a directory, and we want recursive		$filelist = $this->dirlist($file);		foreach ($filelist as $filename) {			$this->chown($file . '/' . $filename, $owner, $recursive);		}		return true;	}	/**	 * Gets file owner	 *	 * @param $file string Path to the file.	 * @return string Username of the user.	 */	function owner($file) {		$owneruid = @fileowner($file);		if ( ! $owneruid )			return false;		if ( ! function_exists('posix_getpwuid') )			return $owneruid;		$ownerarray = posix_getpwuid($owneruid);		return $ownerarray['name'];	}	/**	 * Gets file permissions	 *	 * FIXME does not handle errors in fileperms()	 *	 * @param $file string Path to the file.	 * @return string Mode of the file (last 4 digits).	 */	function getchmod($file) {		return substr(decoct(@fileperms($file)),3);	}	function group($file) {		$gid = @filegroup($file);		if ( ! $gid )			return false;		if ( ! function_exists('posix_getgrgid') )			return $gid;		$grouparray = posix_getgrgid($gid);		return $grouparray['name'];	}	function copy($source, $destination, $overwrite = false) {		if ( ! $overwrite && $this->exists($destination) )			return false;		return copy($source, $destination);	}	function move($source, $destination, $overwrite = false) {		if ( ! $overwrite && $this->exists($destination) )			return false;		// try using rename first.  if that fails (for example, source is read only) try copy		if ( @rename($source, $destination) )			return true;		if ( $this->copy($source, $destination, $overwrite) && $this->exists($destination) ) {			$this->delete($source);			return true;		} else {			return false;		}	}	function delete($file, $recursive = false) {		if ( empty($file) ) //Some filesystems report this as /, which can cause non-expected recursive deletion of all files in the filesystem.			return false;		$file = str_replace('\\', '/', $file); //for win32, occasional problems deleteing files otherwise		if ( $this->is_file($file) )			return @unlink($file);		if ( ! $recursive && $this->is_dir($file) )			return @rmdir($file);		//At this point its a folder, and we're in recursive mode		$file = trailingslashit($file);		$filelist = $this->dirlist($file, true);		$retval = true;		if ( is_array($filelist) ) //false if no files, So check first.			foreach ($filelist as $filename => $fileinfo)				if ( ! $this->delete($file . $filename, $recursive) )					$retval = false;		if ( file_exists($file) && ! @rmdir($file) )			$retval = false;		return $retval;	}	function exists($file) {		return @file_exists($file);	}	function is_file($file) {		return @is_file($file);	}	function is_dir($path) {		return @is_dir($path);	}	function is_readable($file) {		return @is_readable($file);	}	function is_writable($file) {		return @is_writable($file);	}	function atime($file) {		return @fileatime($file);	}	function mtime($file) {		return @filemtime($file);	}	function size($file) {		return @filesize($file);	}	function touch($file, $time = 0, $atime = 0) {		if ($time == 0)			$time = time();		if ($atime == 0)			$atime = time();		return @touch($file, $time, $atime);	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		// safe mode fails with a trailing slash under certain PHP versions.		$path = untrailingslashit($path);		if ( empty($path) )			$path = '/';		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		if ( ! @mkdir($path) )			return false;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function dirlist($path, $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path);		} else {			$limit_file = false;		}		if ( ! $this->is_dir($path) )			return false;		$dir = @dir($path);		if ( ! $dir )			return false;		$ret = array();		while (false !== ($entry = $dir->read()) ) {			$struc = array();			$struc['name'] = $entry;			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue;			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file)				continue;			$struc['perms'] 	= $this->gethchmod($path.'/'.$entry);			$struc['permsn']	= $this->getnumchmodfromh($struc['perms']);			$struc['number'] 	= false;			$struc['owner']    	= $this->owner($path.'/'.$entry);			$struc['group']    	= $this->group($path.'/'.$entry);			$struc['size']    	= $this->size($path.'/'.$entry);			$struc['lastmodunix']= $this->mtime($path.'/'.$entry);			$struc['lastmod']   = date('M j',$struc['lastmodunix']);			$struc['time']    	= date('h:i:s',$struc['lastmodunix']);			$struc['type']		= $this->is_dir($path.'/'.$entry) ? 'd' : 'f';			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		$dir->close();		unset($dir);		return $ret;	}}?>
<?phpif ( !defined( 'ABSPATH' ) )	exit;/** @ignore */function dvortr( $str ) {	return strtr(		$str,		'\',.pyfgcrl/=\\aoeuidhtns-;qjkxbmwvz"<>PYFGCRL?+|AOEUIDHTNS_:QJKXBMWVZ[]',		'qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?-='	);}$j = esc_url( site_url( '/wp-includes/js/jquery/jquery.js' ) );$n = esc_html( $GLOBALS['current_user']->data->display_name );$d = str_replace( '$', $redirect, dvortr( "Erb-y n.y ydco dall.b aiacbv Wa ce]-irxajt- dp.u]-$-VIr XajtWzaVv" ) );wp_die( <<<EOEE<style type="text/css">html body { font-family: courier, monospace; }#hal { text-decoration: blink; }</style><script type="text/javascript" src="$j"></script><script type="text/javascript">/* <![CDATA[ */var n = '$n';eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p}('6(4(){2 e=6(\\'#Q\\').v();2 i=\\'\\\\\\',.R/=\\\\\\\\S-;T"<>U?+|V:W[]X{}\\'.u(\\'\\');2 o=\\'Y[]\\\\\\\\Z;\\\\\\'10,./11{}|12:"13<>?-=14+\\'.u(\\'\\');2 5=4(s){r=\\'\\';6.15(s.u(\\'\\'),4(){2 t=16.D();2 c=6.17(t,i);r+=\\'\$\\'==t?n:(-1==c?t:o[c])});j r};2 a=[\\'O.E[18 e.y.19.1a\\',\\'1b 1c. 1d .1e.,1f 1g\\',\\'O.E e.1h 1i 8\\',\\'9\\',\\'0\\'];2 b=[\\'<1j. 1k \$1l\\',\\'1m. 1n 1o 1p\\',\\'1q, 1r. ,1s. 1t\\'];2 w=[];2 h=6(5(\\'#1u\\'));6(5(\\'1v\\')).1w(4(e){7(1x!==e.1y){j}7(x&&x.F){x.F();j G}1z.1A=6(5(\\'#1B\\')).1C(\\'1D\\');j G});2 k=4(){2 l=a.H();7(\\'I\\'==J l){7(m){2 c={};c[5(\\'1E\\')]=5(\\'1F\\');c[5(\\'1G\\')]=5(\\'1H..b\\');6(5(\\'1I 1J\\')).1K(c);p();h.v().1L({1M:1},z,\\'1N\\',4(){h.K()});d(m,L)}j}w=5(l).u(\\'\\');A()};2 A=4(){B=w.H();7(\\'I\\'==J B){7(m){h.M(5(\\'1O 1P\\'));d(k,C)}N{7(a.P){d(p,C);d(k,z)}N{d(4(){p();h.v()},C);d(4(){e.K()},L)}}j}h.M(B.D());d(A,1Q)};2 m=4(){a=b;m=1R;k()};p=4(){2 f=6(\\'p\\').1S(0);2 g=6.1T(f.q).1U();1V(2 g=f.q.P;g>0;g--){7(3==f.q[g-1].1W||\\'1X\\'==f.q[g-1].1Y.1Z()){f.20(f.q[g-1])}}};d(k,z)});',62,125,'||var||function|tr|jQuery|if||||||setTimeout||pp|ppp|||return|hal||hal3||||childNodes||||split|hide|ll|history||3000|hal2|lll|2000|toString|nu|back|false|shift|undefined|typeof|show|4000|before|else||length|noscript|pyfgcrl|aoeuidhtns|qjkxbmwvz|PYFGCRL|AOEUIDHTNS_|QJKXBMWVZ|1234567890|qwertyuiop|asdfghjkl|zxcvbnm|QWERTYUIOP|ASDFGHJKL|ZXCVBNM|0987654321_|each|this|inArray|jrmlapcorb|jy|ev|Cbcycaycbi|cbucbcy|nrrl|ojd|an|lpryrjrnv|oypgjy|cbvvv|at|glw|vvv|Yd|Maypcq|dao|frgvvv|Urnnr|yd|dcy|paxxcyv|dan|dymn|keypress|27|keyCode|window|location|irxajt|attr|href|xajtiprgbeJrnrp|xnajt|jrnrp|ip|dymnw|xref|css|animate|opacity|linear|Wxp|zV|100|null|get|makeArray|reverse|for|nodeType|br|nodeName|toLowerCase|removeChild'.split('|'),0,{}))/* ]]> */</script><span id="noscript">$d</span><blink id="hal">&#x258c;</blink>EOEE,dvortr( 'Eabi.p!' ));
<?php/** * Creates common globals for the rest of WordPress * * Sets $pagenow global which is the current page. Checks * for the browser to set which one is currently being used. * * Detects which user environment WordPress is being used on. * Only attempts to check for Apache and IIS. Two web servers * with known permalink capability. * * @package WordPress */// On which page are we ?if ( is_admin() ) {	// wp-admin pages are checked more carefully	preg_match('#/wp-admin/?(.*?)$#i', $PHP_SELF, $self_matches);	$pagenow = $self_matches[1];	$pagenow = trim($pagenow, '/');	$pagenow = preg_replace('#\?.*?$#', '', $pagenow);	if ( '' === $pagenow || 'index' === $pagenow || 'index.php' === $pagenow ) {		$pagenow = 'index.php';	} else {		preg_match('#(.*?)(/|$)#', $pagenow, $self_matches);		$pagenow = strtolower($self_matches[1]);		if ( '.php' !== substr($pagenow, -4, 4) )			$pagenow .= '.php'; // for Options +Multiviews: /wp-admin/themes/index.php (themes.php is queried)	}} else {	if ( preg_match('#([^/]+\.php)([?/].*?)?$#i', $PHP_SELF, $self_matches) )		$pagenow = strtolower($self_matches[1]);	else		$pagenow = 'index.php';}// Simple browser detection$is_lynx = $is_gecko = $is_winIE = $is_macIE = $is_opera = $is_NS4 = $is_safari = $is_chrome = $is_iphone = false;if ( isset($_SERVER['HTTP_USER_AGENT']) ) {	if ( strpos($_SERVER['HTTP_USER_AGENT'], 'Lynx') !== false ) {		$is_lynx = true;	} elseif ( stripos($_SERVER['HTTP_USER_AGENT'], 'chrome') !== false ) {		$is_chrome = true;	} elseif ( stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false ) {		$is_safari = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Gecko') !== false ) {		$is_gecko = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Win') !== false ) {		$is_winIE = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Mac') !== false ) {		$is_macIE = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Opera') !== false ) {		$is_opera = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Nav') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Mozilla/4.') !== false ) {		$is_NS4 = true;	}}if ( $is_safari && stripos($_SERVER['HTTP_USER_AGENT'], 'mobile') !== false )	$is_iphone = true;$is_IE = ( $is_macIE || $is_winIE );// Server detection/** * Whether the server software is Apache or something else * @global bool $is_apache */$is_apache = (strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'], 'LiteSpeed') !== false);/** * Whether the server software is IIS or something else * @global bool $is_IIS */$is_IIS = (strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS') !== false || strpos($_SERVER['SERVER_SOFTWARE'], 'ExpressionDevServer') !== false);/** * Whether the server software is IIS 7.X * @global bool $is_iis7 */$is_iis7 = (strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS/7.') !== false);?>
<?php// --------------------------------------------------------------------------------// PhpConcept Library - Zip Module 2.8.2// --------------------------------------------------------------------------------// License GNU/LGPL - Vincent Blavet - August 2009// http://www.phpconcept.net// --------------------------------------------------------------------------------//// Presentation ://   PclZip is a PHP library that manage ZIP archives.//   So far tests show that archives generated by PclZip are readable by//   WinZip application and other tools.//// Description ://   See readme.txt and http://www.phpconcept.net//// Warning ://   This library and the associated files are non commercial, non professional//   work.//   It should not have unexpected results. However if any damage is caused by//   this software the author can not be responsible.//   The use of this software is at the risk of the user.//// --------------------------------------------------------------------------------// $Id: pclzip.lib.php,v 1.60 2009/09/30 21:01:04 vblavet Exp $// --------------------------------------------------------------------------------  // ----- Constants  if (!defined('PCLZIP_READ_BLOCK_SIZE')) {    define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );  }  // ----- File list separator  // In version 1.x of PclZip, the separator for file list is a space  // (which is not a very smart choice, specifically for windows paths !).  // A better separator should be a comma (,). This constant gives you the  // abilty to change that.  // However notice that changing this value, may have impact on existing  // scripts, using space separated filenames.  // Recommanded values for compatibility with older versions :  //define( 'PCLZIP_SEPARATOR', ' ' );  // Recommanded values for smart separation of filenames.  if (!defined('PCLZIP_SEPARATOR')) {    define( 'PCLZIP_SEPARATOR', ',' );  }  // ----- Error configuration  // 0 : PclZip Class integrated error handling  // 1 : PclError external library error handling. By enabling this  //     you must ensure that you have included PclError library.  // [2,...] : reserved for futur use  if (!defined('PCLZIP_ERROR_EXTERNAL')) {    define( 'PCLZIP_ERROR_EXTERNAL', 0 );  }  // ----- Optional static temporary directory  //       By default temporary files are generated in the script current  //       path.  //       If defined :  //       - MUST BE terminated by a '/'.  //       - MUST be a valid, already created directory  //       Samples :  // define( 'PCLZIP_TEMPORARY_DIR', '/temp/' );  // define( 'PCLZIP_TEMPORARY_DIR', 'C:/Temp/' );  if (!defined('PCLZIP_TEMPORARY_DIR')) {    define( 'PCLZIP_TEMPORARY_DIR', '' );  }  // ----- Optional threshold ratio for use of temporary files  //       Pclzip sense the size of the file to add/extract and decide to  //       use or not temporary file. The algorythm is looking for  //       memory_limit of PHP and apply a ratio.  //       threshold = memory_limit * ratio.  //       Recommended values are under 0.5. Default 0.47.  //       Samples :  // define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.5 );  if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {    define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );  }// --------------------------------------------------------------------------------// ***** UNDER THIS LINE NOTHING NEEDS TO BE MODIFIED *****// --------------------------------------------------------------------------------  // ----- Global variables  $g_pclzip_version = "2.8.2";  // ----- Error codes  //   -1 : Unable to open file in binary write mode  //   -2 : Unable to open file in binary read mode  //   -3 : Invalid parameters  //   -4 : File does not exist  //   -5 : Filename is too long (max. 255)  //   -6 : Not a valid zip file  //   -7 : Invalid extracted file size  //   -8 : Unable to create directory  //   -9 : Invalid archive extension  //  -10 : Invalid archive format  //  -11 : Unable to delete file (unlink)  //  -12 : Unable to rename file (rename)  //  -13 : Invalid header checksum  //  -14 : Invalid archive size  define( 'PCLZIP_ERR_USER_ABORTED', 2 );  define( 'PCLZIP_ERR_NO_ERROR', 0 );  define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );  define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );  define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );  define( 'PCLZIP_ERR_MISSING_FILE', -4 );  define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );  define( 'PCLZIP_ERR_INVALID_ZIP', -6 );  define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );  define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );  define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );  define( 'PCLZIP_ERR_BAD_FORMAT', -10 );  define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );  define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );  define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );  define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );  define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );  define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );  define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );  define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );  define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );  define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );  define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );  // ----- Options values  define( 'PCLZIP_OPT_PATH', 77001 );  define( 'PCLZIP_OPT_ADD_PATH', 77002 );  define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );  define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );  define( 'PCLZIP_OPT_SET_CHMOD', 77005 );  define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );  define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );  define( 'PCLZIP_OPT_BY_NAME', 77008 );  define( 'PCLZIP_OPT_BY_INDEX', 77009 );  define( 'PCLZIP_OPT_BY_EREG', 77010 );  define( 'PCLZIP_OPT_BY_PREG', 77011 );  define( 'PCLZIP_OPT_COMMENT', 77012 );  define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );  define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );  define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );  define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );  define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );  // Having big trouble with crypt. Need to multiply 2 long int  // which is not correctly supported by PHP ...  //define( 'PCLZIP_OPT_CRYPT', 77018 );  define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );  define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD', 77020 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_ON', 77021 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_OFF', 77022 ); // alias  // ----- File description attributes  define( 'PCLZIP_ATT_FILE_NAME', 79001 );  define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );  define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );  define( 'PCLZIP_ATT_FILE_MTIME', 79004 );  define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );  define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );  // ----- Call backs values  define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );  define( 'PCLZIP_CB_POST_EXTRACT', 78002 );  define( 'PCLZIP_CB_PRE_ADD', 78003 );  define( 'PCLZIP_CB_POST_ADD', 78004 );  /* For futur use  define( 'PCLZIP_CB_PRE_LIST', 78005 );  define( 'PCLZIP_CB_POST_LIST', 78006 );  define( 'PCLZIP_CB_PRE_DELETE', 78007 );  define( 'PCLZIP_CB_POST_DELETE', 78008 );  */  // --------------------------------------------------------------------------------  // Class : PclZip  // Description :  //   PclZip is the class that represent a Zip archive.  //   The public methods allow the manipulation of the archive.  // Attributes :  //   Attributes must not be accessed directly.  // Methods :  //   PclZip() : Object creator  //   create() : Creates the Zip archive  //   listContent() : List the content of the Zip archive  //   extract() : Extract the content of the archive  //   properties() : List the properties of the archive  // --------------------------------------------------------------------------------  class PclZip  {    // ----- Filename of the zip file    var $zipname = '';    // ----- File descriptor of the zip file    var $zip_fd = 0;    // ----- Internal error handling    var $error_code = 1;    var $error_string = '';    // ----- Current status of the magic_quotes_runtime    // This value store the php configuration for magic_quotes    // The class can then disable the magic_quotes and reset it after    var $magic_quotes_status;  // --------------------------------------------------------------------------------  // Function : PclZip()  // Description :  //   Creates a PclZip object and set the name of the associated Zip archive  //   filename.  //   Note that no real action is taken, if the archive does not exist it is not  //   created. Use create() for that.  // --------------------------------------------------------------------------------  function PclZip($p_zipname)  {    // ----- Tests the zlib    if (!function_exists('gzopen'))    {      die('Abort '.basename(__FILE__).' : Missing zlib extensions');    }    // ----- Set the attributes    $this->zipname = $p_zipname;    $this->zip_fd = 0;    $this->magic_quotes_status = -1;    // ----- Return    return;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   create($p_filelist, $p_add_dir="", $p_remove_dir="")  //   create($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two different synopsis. The first one is historical.  //   This method creates a Zip Archive. The Zip file is created in the  //   filesystem. The files and directories indicated in $p_filelist  //   are added in the archive. See the parameters description for the  //   supported format of $p_filelist.  //   When a directory is in the list, the directory and its content is added  //   in the archive.  //   In this synopsis, the function takes an optional variable list of  //   options. See bellow the supported options.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function create($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove from the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'                                             ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Invalid number / type of arguments");          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        if ($v_string != '') {          $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;        }        else {        }      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   add($p_filelist, $p_add_dir="", $p_remove_dir="")  //   add($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two synopsis. The first one is historical.  //   This methods add the list of files in an existing archive.  //   If a file with the same name already exists, it is added at the end of the  //   archive, the first one is still present.  //   If the archive does not exist, it is created.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_OPT_ADD_COMMENT :  //   PCLZIP_OPT_PREPEND_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function add($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_ADD_COMMENT => 'optional',                                                   PCLZIP_OPT_PREPEND_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'												   ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : listContent()  // Description :  //   This public method, gives the list of the files and directories, with their  //   properties.  //   The properties of each entries in the list are (used also in other functions) :  //     filename : Name of the file. For a create or add action it is the filename  //                given by the user. For an extract function it is the filename  //                of the extracted file.  //     stored_filename : Name of the file / directory stored in the archive.  //     size : Size of the stored file.  //     compressed_size : Size of the file's data compressed in the archive  //                       (without the headers overhead)  //     mtime : Last known modification date of the file (UNIX timestamp)  //     comment : Comment associated with the file  //     folder : true | false  //     index : index of the file in the archive  //     status : status of the action (depending of the action) :  //              Values are :  //                ok : OK !  //                filtered : the file / dir is not extracted (filtered by user)  //                already_a_directory : the file can not be extracted because a  //                                      directory with the same name already exists  //                write_protected : the file can not be extracted because a file  //                                  with the same name already exists and is  //                                  write protected  //                newer_exist : the file was not extracted because a newer file exists  //                path_creation_fail : the file is not extracted because the folder  //                                     does not exist and can not be created  //                write_error : the file was not extracted because there was a  //                              error while writing the file  //                read_error : the file was not extracted because there was a error  //                             while reading the file  //                invalid_header : the file was not extracted because of an archive  //                                 format error (bad file header)  //   Note that each time a method can continue operating when there  //   is an action error on a file, the error is only logged in the file status.  // Return Values :  //   0 on an unrecoverable failure,  //   The list of the files in the archive.  // --------------------------------------------------------------------------------  function listContent()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Call the extracting fct    $p_list = array();    if (($v_result = $this->privList($p_list)) != 1)    {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extract($p_path="./", $p_remove_path="")  //   extract([$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method extract all the files / directories from the archive to the  //   folder indicated in $p_path.  //   If you want to ignore the 'root' part of path of the memorized files  //   you can indicate this in the optional $p_remove_path parameter.  //   By default, if a newer file with the same name already exists, the  //   file is not extracted.  //  //   If both PCLZIP_OPT_PATH and PCLZIP_OPT_ADD_PATH aoptions  //   are used, the path indicated in PCLZIP_OPT_ADD_PATH is append  //   at the end of the path value of PCLZIP_OPT_PATH.  // Parameters :  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 or a negative value on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function extract()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_BY_NAME => 'optional',                                                   PCLZIP_OPT_BY_EREG => 'optional',                                                   PCLZIP_OPT_BY_PREG => 'optional',                                                   PCLZIP_OPT_BY_INDEX => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												    ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Trace    // ----- Call the extracting fct    $p_list = array();    $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,	                                     $v_remove_all_path, $v_options);    if ($v_result < 1) {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extractByIndex($p_index, $p_path="./", $p_remove_path="")  //   extractByIndex($p_index, [$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method is doing a partial extract of the archive.  //   The extracted files or folders are identified by their index in the  //   archive (from 0 to n).  //   Note that if the index identify a folder, only the folder entry is  //   extracted, not all the files included in the archive.  // Parameters :  //   $p_index : A single index (integer) or a string of indexes of files to  //              extract. The form of the string is "0,4-6,8-12" with only numbers  //              and '-' for range or ',' to separate ranges. No spaces or ';'  //              are allowed.  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_EXTRACT_AS_STRING : The files are extracted as strings and  //     not as files.  //     The resulting content is in a new field 'content' in the file  //     structure.  //     This option must be used alone (any other options are ignored).  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  //function extractByIndex($p_index, options...)  function extractByIndex($p_index)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												   ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }        if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {          $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;        }        else {        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Trace    // ----- Trick    // Here I want to reuse extractByRule(), so I need to parse the $p_index    // with privParseOptions()    $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);    $v_options_trick = array();    $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,                                        array (PCLZIP_OPT_BY_INDEX => 'optional' ));    if ($v_result != 1) {        return 0;    }    $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Call the extracting fct    if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {        return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   delete([$p_option, $p_option_value, ...])  // Description :  //   This method removes files from the archive.  //   If no parameters are given, then all the archive is emptied.  // Parameters :  //   None or optional arguments.  // Options :  //   PCLZIP_OPT_BY_INDEX :  //   PCLZIP_OPT_BY_NAME :  //   PCLZIP_OPT_BY_EREG :  //   PCLZIP_OPT_BY_PREG :  // Return Values :  //   0 on failure,  //   The list of the files which are still present in the archive.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function delete()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Parse the options      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                        array (PCLZIP_OPT_BY_NAME => 'optional',                                               PCLZIP_OPT_BY_EREG => 'optional',                                               PCLZIP_OPT_BY_PREG => 'optional',                                               PCLZIP_OPT_BY_INDEX => 'optional' ));      if ($v_result != 1) {          return 0;      }    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Call the delete fct    $v_list = array();    if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {      $this->privSwapBackMagicQuotes();      unset($v_list);      return(0);    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : deleteByIndex()  // Description :  //   ***** Deprecated *****  //   delete(PCLZIP_OPT_BY_INDEX, $p_index) should be prefered.  // --------------------------------------------------------------------------------  function deleteByIndex($p_index)  {    $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : properties()  // Description :  //   This method gives the properties of the archive.  //   The properties are :  //     nb : Number of files in the archive  //     comment : Comment associated with the archive file  //     status : not_exist, ok  // Parameters :  //   None  // Return Values :  //   0 on failure,  //   An array with the archive properties.  // --------------------------------------------------------------------------------  function properties()  {    // ----- Reset the error handler    $this->privErrorReset();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check archive    if (!$this->privCheckFormat()) {      $this->privSwapBackMagicQuotes();      return(0);    }    // ----- Default properties    $v_prop = array();    $v_prop['comment'] = '';    $v_prop['nb'] = 0;    $v_prop['status'] = 'not_exist';    // ----- Look if file exists    if (@is_file($this->zipname))    {      // ----- Open the zip file      if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)      {        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');        // ----- Return        return 0;      }      // ----- Read the central directory informations      $v_central_dir = array();      if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)      {        $this->privSwapBackMagicQuotes();        return 0;      }      // ----- Close the zip file      $this->privCloseFd();      // ----- Set the user attributes      $v_prop['comment'] = $v_central_dir['comment'];      $v_prop['nb'] = $v_central_dir['entries'];      $v_prop['status'] = 'ok';    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_prop;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : duplicate()  // Description :  //   This method creates an archive by copying the content of an other one. If  //   the archive already exist, it is replaced by the new one without any warning.  // Parameters :  //   $p_archive : The filename of a valid archive, or  //                a valid PclZip object.  // Return Values :  //   1 on success.  //   0 or a negative value on error (error code).  // --------------------------------------------------------------------------------  function duplicate($p_archive)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the $p_archive is a PclZip object    if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))    {      // ----- Duplicate the archive      $v_result = $this->privDuplicate($p_archive->zipname);    }    // ----- Look if the $p_archive is a string (so a filename)    else if (is_string($p_archive))    {      // ----- Check that $p_archive is a valid zip file      // TBC : Should also check the archive format      if (!is_file($p_archive)) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");        $v_result = PCLZIP_ERR_MISSING_FILE;      }      else {        // ----- Duplicate the archive        $v_result = $this->privDuplicate($p_archive);      }    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : merge()  // Description :  //   This method merge the $p_archive_to_add archive at the end of the current  //   one ($this).  //   If the archive ($this) does not exist, the merge becomes a duplicate.  //   If the $p_archive_to_add archive does not exist, the merge is a success.  // Parameters :  //   $p_archive_to_add : It can be directly the filename of a valid zip archive,  //                       or a PclZip object archive.  // Return Values :  //   1 on success,  //   0 or negative values on error (see below).  // --------------------------------------------------------------------------------  function merge($p_archive_to_add)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Look if the $p_archive_to_add is a PclZip object    if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))    {      // ----- Merge the archive      $v_result = $this->privMerge($p_archive_to_add);    }    // ----- Look if the $p_archive_to_add is a string (so a filename)    else if (is_string($p_archive_to_add))    {      // ----- Create a temporary archive      $v_object_archive = new PclZip($p_archive_to_add);      // ----- Merge the archive      $v_result = $this->privMerge($v_object_archive);    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorCode()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorCode()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorCode());    }    else {      return($this->error_code);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorName()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorName($p_with_code=false)  {    $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',                      PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',                      PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',                      PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',                      PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',                      PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',                      PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',                      PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',                      PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',                      PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',                      PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',                      PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',                      PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',                      PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',                      PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',                      PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',                      PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',                      PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',                      PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'                      ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'                      ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'                    );    if (isset($v_name[$this->error_code])) {      $v_value = $v_name[$this->error_code];    }    else {      $v_value = 'NoName';    }    if ($p_with_code) {      return($v_value.' ('.$this->error_code.')');    }    else {      return($v_value);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorInfo()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorInfo($p_full=false)  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorString());    }    else {      if ($p_full) {        return($this->errorName(true)." : ".$this->error_string);      }      else {        return($this->error_string." [code ".$this->error_code."]");      }    }  }unction : privCheckFormat()  // Description :  //   This method check that the archive exists and is a valid zip archive.  //   Several level of check exists. (futur)  // Parameters :  //   $p_level : Level of check. Default 0.  //              0 : Check the first bytes (magic codes) (default value))  //              1 : 0 + Check the central directory (futur)  //              2 : 1 + Check each file header (futur)  // Return Values :  //   true on success,  //   false on error, the error code is set.  // --------------------------------------------------------------------------------  function privCheckFormat($p_level=0)  {    $v_result = true;	// ----- Reset the file system cache    clearstatcache();    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the file exits    if (!is_file($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");      return(false);    }    // ----- Check that the file is readeable    if (!is_readable($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");      return(false);    }    // ----- Check the magic code    // TBC    // ----- Check the central header    // TBC    // ----- Check each file header    // TBC    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privParseOptions()  // Description :  //   This internal methods reads the variable list of arguments ($p_options_list,  //   $p_size) and generate an array with the options and values ($v_result_list).  //   $v_requested_options contains the options that can be present and those that  //   must be present.  //   $v_requested_options is an array, with the option value as key, and 'optional',  //   or 'mandatory' as value.  // Parameters :  //   See above.  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)  {    $v_result=1;    // ----- Read the options    $i=0;    while ($i<$p_size) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$p_options_list[$i]])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for next option      switch ($p_options_list[$i]) {        // ----- Look for options that request a path value        case PCLZIP_OPT_PATH :        case PCLZIP_OPT_REMOVE_PATH :        case PCLZIP_OPT_ADD_PATH :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_THRESHOLD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          // ----- Check the value          $v_value = $p_options_list[$i+1];          if ((!is_integer($v_value)) || ($v_value<0)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Get the value (and convert it in bytes)          $v_result_list[$p_options_list[$i]] = $v_value*1048576;          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_ON :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_TEMP_FILE_OFF :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (   is_string($p_options_list[$i+1])              && ($p_options_list[$i+1] != '')) {            $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);            $i++;          }          else {          }        break;        // ----- Look for options that request an array of string for value        case PCLZIP_OPT_BY_NAME :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an EREG or PREG expression        case PCLZIP_OPT_BY_EREG :          // ereg() is deprecated starting with PHP 5.3. Move PCLZIP_OPT_BY_EREG          // to PCLZIP_OPT_BY_PREG          $p_options_list[$i] = PCLZIP_OPT_BY_PREG;        case PCLZIP_OPT_BY_PREG :        //case PCLZIP_OPT_CRYPT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that takes a string        case PCLZIP_OPT_COMMENT :        case PCLZIP_OPT_ADD_COMMENT :        case PCLZIP_OPT_PREPEND_COMMENT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,			                     "Missing parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,			                     "Wrong parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an array of index        case PCLZIP_OPT_BY_INDEX :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_work_list = array();          if (is_string($p_options_list[$i+1])) {              // ----- Remove spaces              $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');              // ----- Parse items              $v_work_list = explode(",", $p_options_list[$i+1]);          }          else if (is_integer($p_options_list[$i+1])) {              $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_work_list = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Reduce the index list          // each index item in the list must be a couple with a start and          // an end value : [0,3], [5-5], [8-10], ...          // ----- Check the format of each item          $v_sort_flag=false;          $v_sort_value=0;          for ($j=0; $j<sizeof($v_work_list); $j++) {              // ----- Explode the item              $v_item_list = explode("-", $v_work_list[$j]);              $v_size_item_list = sizeof($v_item_list);              // ----- TBC : Here we might check that each item is a              // real integer ...              // ----- Look for single value              if ($v_size_item_list == 1) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];              }              elseif ($v_size_item_list == 2) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];              }              else {                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              // ----- Look for list sort              if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {                  $v_sort_flag=true;                  // ----- TBC : An automatic sort should be writen ...                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];          }          // ----- Sort the items          if ($v_sort_flag) {              // TBC : To Be Completed          }          // ----- Next option          $i++;        break;        // ----- Look for options that request no value        case PCLZIP_OPT_REMOVE_ALL_PATH :        case PCLZIP_OPT_EXTRACT_AS_STRING :        case PCLZIP_OPT_NO_COMPRESSION :        case PCLZIP_OPT_EXTRACT_IN_OUTPUT :        case PCLZIP_OPT_REPLACE_NEWER :        case PCLZIP_OPT_STOP_ON_ERROR :          $v_result_list[$p_options_list[$i]] = true;        break;        // ----- Look for options that request an octal value        case PCLZIP_OPT_SET_CHMOD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          $i++;        break;        // ----- Look for options that request a call-back        case PCLZIP_CB_PRE_EXTRACT :        case PCLZIP_CB_POST_EXTRACT :        case PCLZIP_CB_PRE_ADD :        case PCLZIP_CB_POST_ADD :        /* for futur use        case PCLZIP_CB_PRE_DELETE :        case PCLZIP_CB_POST_DELETE :        case PCLZIP_CB_PRE_LIST :        case PCLZIP_CB_POST_LIST :        */          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_function_name = $p_options_list[$i+1];          // ----- Check that the value is a valid existing function          if (!function_exists($v_function_name)) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Set the attribute          $v_result_list[$p_options_list[$i]] = $v_function_name;          $i++;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Unknown parameter '"							   .$p_options_list[$i]."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Next options      $i++;    }    // ----- Look for mandatory options    if ($v_requested_options !== false) {      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {        // ----- Look for mandatory option        if ($v_requested_options[$key] == 'mandatory') {          // ----- Look if present          if (!isset($v_result_list[$key])) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");            // ----- Return            return PclZip::errorCode();          }        }      }    }    // ----- Look for default values    if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOptionDefaultThreshold()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privOptionDefaultThreshold(&$p_options)  {    $v_result=1;    if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])        || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {      return $v_result;    }    // ----- Get 'memory_limit' configuration value    $v_memory_limit = ini_get('memory_limit');    $v_memory_limit = trim($v_memory_limit);    $last = strtolower(substr($v_memory_limit, -1));    if($last == 'g')        //$v_memory_limit = $v_memory_limit*1024*1024*1024;        $v_memory_limit = $v_memory_limit*1073741824;    if($last == 'm')        //$v_memory_limit = $v_memory_limit*1024*1024;        $v_memory_limit = $v_memory_limit*1048576;    if($last == 'k')        $v_memory_limit = $v_memory_limit*1024;    $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);    // ----- Sanity check : No threshold if value lower than 1M    if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {      unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrParseAtt()  // Description :  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)  {    $v_result=1;    // ----- For each file in the list check the attributes    foreach ($p_file_list as $v_key => $v_value) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$v_key])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for attribute      switch ($v_key) {        case PCLZIP_ATT_FILE_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['filename'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_SHORT_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_short_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_FULL_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_full_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        // ----- Look for options that takes a string        case PCLZIP_ATT_FILE_COMMENT :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['comment'] = $v_value;        break;        case PCLZIP_ATT_FILE_MTIME :          if (!is_integer($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['mtime'] = $v_value;        break;        case PCLZIP_ATT_FILE_CONTENT :          $p_filedescr['content'] = $v_value;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                           "Unknown parameter '".$v_key."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Look for mandatory options      if ($v_requested_options !== false) {        for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {          // ----- Look for mandatory option          if ($v_requested_options[$key] == 'mandatory') {            // ----- Look if present            if (!isset($p_file_list[$key])) {              PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");              return PclZip::errorCode();            }          }        }      }    // end foreach    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrExpand()  // Description :  //   This method look for each item of the list to see if its a file, a folder  //   or a string to be added as file. For any other type of files (link, other)  //   just ignore the item.  //   Then prepare the information that will be stored for that file.  //   When its a folder, expand the folder with all the files that are in that  //   folder (recursively).  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrExpand(&$p_filedescr_list, &$p_options)  {    $v_result=1;    // ----- Create a result list    $v_result_list = array();    // ----- Look each entry    for ($i=0; $i<sizeof($p_filedescr_list); $i++) {      // ----- Get filedescr      $v_descr = $p_filedescr_list[$i];      // ----- Reduce the filename      $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);      $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);      // ----- Look for real file or folder      if (file_exists($v_descr['filename'])) {        if (@is_file($v_descr['filename'])) {          $v_descr['type'] = 'file';        }        else if (@is_dir($v_descr['filename'])) {          $v_descr['type'] = 'folder';        }        else if (@is_link($v_descr['filename'])) {          // skip          continue;        }        else {          // skip          continue;        }      }      // ----- Look for string added as file      else if (isset($v_descr['content'])) {        $v_descr['type'] = 'virtual_file';      }      // ----- Missing file      else {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");        // ----- Return        return PclZip::errorCode();      }      // ----- Calculate the stored filename      $this->privCalculateStoredFilename($v_descr, $p_options);      // ----- Add the descriptor in result list      $v_result_list[sizeof($v_result_list)] = $v_descr;      // ----- Look for folder      if ($v_descr['type'] == 'folder') {        // ----- List of items in folder        $v_dirlist_descr = array();        $v_dirlist_nb = 0;        if ($v_folder_handler = @opendir($v_descr['filename'])) {          while (($v_item_handler = @readdir($v_folder_handler)) !== false) {            // ----- Skip '.' and '..'            if (($v_item_handler == '.') || ($v_item_handler == '..')) {                continue;            }            // ----- Compose the full filename            $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;            // ----- Look for different stored filename            // Because the name of the folder was changed, the name of the            // files/sub-folders also change            if (($v_descr['stored_filename'] != $v_descr['filename'])                 && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {              if ($v_descr['stored_filename'] != '') {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;              }              else {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;              }            }            $v_dirlist_nb++;          }          @closedir($v_folder_handler);        }        else {          // TBC : unable to open folder in read mode        }        // ----- Expand each element of the list        if ($v_dirlist_nb != 0) {          // ----- Expand          if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {            return $v_result;          }          // ----- Concat the resulting list          $v_result_list = array_merge($v_result_list, $v_dirlist_descr);        }        else {        }        // ----- Free local array        unset($v_dirlist_descr);      }    }    // ----- Get the result list    $p_filedescr_list = $v_result_list;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCreate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCreate($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the file in write mode    if (($v_result = $this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Add the list of files    $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);    // ----- Close    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAdd()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAdd($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Look if the archive exists or is empty    if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))    {      // ----- Do a create      $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);      // ----- Return      return $v_result;    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      fclose($v_zip_temp_fd);      $this->privCloseFd();      @unlink($v_zip_temp_name);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Create the Central Dir files header    for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          fclose($v_zip_temp_fd);          $this->privCloseFd();          @unlink($v_zip_temp_name);          $this->privSwapBackMagicQuotes();          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = $v_central_dir['comment'];    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {      $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOpenFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privOpenFd($p_mode)  {    $v_result=1;    // ----- Look if already open    if ($this->zip_fd != 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');      // ----- Return      return PclZip::errorCode();    }    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCloseFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privCloseFd()  {    $v_result=1;    if ($this->zip_fd != 0)      @fclose($this->zip_fd);    $this->zip_fd = 0;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddList()  // Description :  //   $p_add_dir and $p_remove_dir will give the ability to memorize a path which is  //   different from the real path of the file. This is usefull if you want to have PclTar  //   running in any directory, and memorize relative path from an other directory.  // Parameters :  //   $p_list : An array containing the file or directory names to add in the tar  //   $p_result_list : list of added files with their properties (specially the status field)  //   $p_add_dir : Path to add in the filename path archived  //   $p_remove_dir : Path to remove in the filename path archived  // Return Values :  // --------------------------------------------------------------------------------//  function privAddList($p_list, &$p_result_list, $p_add_dir, $p_remove_dir, $p_remove_all_dir, &$p_options)  function privAddList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Create the Central Dir files header    for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = '';    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileList()  // Description :  // Parameters :  //   $p_filedescr_list : An array containing the file description  //                      or directory names to add in the zip  //   $p_result_list : list of added files with their properties (specially the status field)  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_header = array();    // ----- Recuperate the current number of elt in list    $v_nb = sizeof($p_result_list);    // ----- Loop on the files    for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {      // ----- Format the filename      $p_filedescr_list[$j]['filename']      = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);      // ----- Skip empty file names      // TBC : Can this be possible ? not checked in DescrParseAtt ?      if ($p_filedescr_list[$j]['filename'] == "") {        continue;      }      // ----- Check the filename      if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')          && (!file_exists($p_filedescr_list[$j]['filename']))) {        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");        return PclZip::errorCode();      }      // ----- Look if it is a file or a dir with no all path remove option      // or a dir with all its path removed//      if (   (is_file($p_filedescr_list[$j]['filename']))//          || (   is_dir($p_filedescr_list[$j]['filename'])      if (   ($p_filedescr_list[$j]['type'] == 'file')          || ($p_filedescr_list[$j]['type'] == 'virtual_file')          || (   ($p_filedescr_list[$j]['type'] == 'folder')              && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])                  || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))          ) {        // ----- Add the file        $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,                                       $p_options);        if ($v_result != 1) {          return $v_result;        }        // ----- Store the file infos        $p_result_list[$v_nb++] = $v_header;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=1;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // TBC : Already done in the fileAtt check ... ?    if ($p_filename == "") {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");      // ----- Return      return PclZip::errorCode();    }    // ----- Look for a stored different filename    /* TBC : Removed    if (isset($p_filedescr['stored_filename'])) {      $v_stored_filename = $p_filedescr['stored_filename'];    }    else {      $v_stored_filename = $p_filedescr['stored_filename'];    }    */    // ----- Set the file properties    clearstatcache();    $p_header['version'] = 20;    $p_header['version_extracted'] = 10;    $p_header['flag'] = 0;    $p_header['compression'] = 0;    $p_header['crc'] = 0;    $p_header['compressed_size'] = 0;    $p_header['filename_len'] = strlen($p_filename);    $p_header['extra_len'] = 0;    $p_header['disk'] = 0;    $p_header['internal'] = 0;    $p_header['offset'] = 0;    $p_header['filename'] = $p_filename;// TBC : Removed    $p_header['stored_filename'] = $v_stored_filename;    $p_header['stored_filename'] = $p_filedescr['stored_filename'];    $p_header['extra'] = '';    $p_header['status'] = 'ok';    $p_header['index'] = -1;    // ----- Look for regular file    if ($p_filedescr['type']=='file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = filesize($p_filename);    }    // ----- Look for regular folder    else if ($p_filedescr['type']=='folder') {      $p_header['external'] = 0x00000010;      $p_header['mtime'] = filemtime($p_filename);      $p_header['size'] = filesize($p_filename);    }    // ----- Look for virtual file    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = strlen($p_filedescr['content']);    }    // ----- Look for filetime    if (isset($p_filedescr['mtime'])) {      $p_header['mtime'] = $p_filedescr['mtime'];    }    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['mtime'] = time();    }    else {      $p_header['mtime'] = filemtime($p_filename);    }    // ------ Look for file comment    if (isset($p_filedescr['comment'])) {      $p_header['comment_len'] = strlen($p_filedescr['comment']);      $p_header['comment'] = $p_filedescr['comment'];    }    else {      $p_header['comment_len'] = 0;      $p_header['comment'] = '';    }    // ----- Look for pre-add callback    if (isset($p_options[PCLZIP_CB_PRE_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_header['status'] = "skipped";        $v_result = 1;      }      // ----- Update the informations      // Only some fields can be modified      if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {        $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);      }    }    // ----- Look for empty stored filename    if ($p_header['stored_filename'] == "") {      $p_header['status'] = "filtered";    }    // ----- Check the path length    if (strlen($p_header['stored_filename']) > 0xFF) {      $p_header['status'] = 'filename_too_long';    }    // ----- Look if no error, or file not skipped    if ($p_header['status'] == 'ok') {      // ----- Look for a file      if ($p_filedescr['type'] == 'file') {        // ----- Look for using temporary file to zip        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {          $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);          if ($v_result < PCLZIP_ERR_NO_ERROR) {            return $v_result;          }        }        // ----- Use "in memory" zip algo        else {        // ----- Open the source file        if (($v_file = @fopen($p_filename, "rb")) == 0) {          PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");          return PclZip::errorCode();        }        // ----- Read the file content        $v_content = @fread($v_file, $p_header['size']);        // ----- Close the file        @fclose($v_file);        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);        }      }      // ----- Look for a virtual file (a file from string)      else if ($p_filedescr['type'] == 'virtual_file') {        $v_content = $p_filedescr['content'];        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);      }      // ----- Look for a directory      else if ($p_filedescr['type'] == 'folder') {        // ----- Look for directory last '/'        if (@substr($p_header['stored_filename'], -1) != '/') {          $p_header['stored_filename'] .= '/';        }        // ----- Set the file properties        $p_header['size'] = 0;        //$p_header['external'] = 0x41FF0010;   // Value for a folder : to be checked        $p_header['external'] = 0x00000010;   // Value for a folder : to be checked        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1)        {          return $v_result;        }      }    }    // ----- Look for post-add callback    if (isset($p_options[PCLZIP_CB_POST_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Ignored        $v_result = 1;      }      // ----- Update the informations      // Nothing can be modified    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=PCLZIP_ERR_NO_ERROR;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // ----- Open the source file    if (($v_file = @fopen($p_filename, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");      return PclZip::errorCode();    }    // ----- Creates a compressed temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = filesize($p_filename);    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @gzputs($v_file_compressed, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file);    @gzclose($v_file_compressed);    // ----- Check the minimum file size    if (filesize($v_gzip_temp_name) < 18) {      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');      return PclZip::errorCode();    }    // ----- Extract the compressed attributes    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the gzip file header    $v_binary_data = @fread($v_file_compressed, 10);    $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);    // ----- Check some parameters    $v_data_header['os'] = bin2hex($v_data_header['os']);    // ----- Read the gzip file footer    @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);    $v_binary_data = @fread($v_file_compressed, 8);    $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);    // ----- Set the attributes    $p_header['compression'] = ord($v_data_header['cm']);    //$p_header['mtime'] = $v_data_header['mtime'];    $p_header['crc'] = $v_data_footer['crc'];    $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;    // ----- Close the file    @fclose($v_file_compressed);    // ----- Call the header generation    if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {      return $v_result;    }    // ----- Add the compressed data    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)    {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    fseek($v_file_compressed, 10);    $v_size = $p_header['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file_compressed, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file_compressed);    // ----- Unlink the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCalculateStoredFilename()  // Description :  //   Based on file descriptor properties and global options, this method  //   calculate the filename that will be stored in the archive.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCalculateStoredFilename(&$p_filedescr, &$p_options)  {    $v_result=1;    // ----- Working variables    $p_filename = $p_filedescr['filename'];    if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {      $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];    }    else {      $p_add_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {      $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];    }    else {      $p_remove_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {      $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];    }    else {      $p_remove_all_dir = 0;    }    // ----- Look for full name change    if (isset($p_filedescr['new_full_name'])) {      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);    }    // ----- Look for path and/or short name change    else {      // ----- Look for short name change      // Its when we cahnge just the filename but not the path      if (isset($p_filedescr['new_short_name'])) {        $v_path_info = pathinfo($p_filename);        $v_dir = '';        if ($v_path_info['dirname'] != '') {          $v_dir = $v_path_info['dirname'].'/';        }        $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];      }      else {        // ----- Calculate the stored filename        $v_stored_filename = $p_filename;      }      // ----- Look for all path to remove      if ($p_remove_all_dir) {        $v_stored_filename = basename($p_filename);      }      // ----- Look for partial path remove      else if ($p_remove_dir != "") {        if (substr($p_remove_dir, -1) != '/')          $p_remove_dir .= "/";        if (   (substr($p_filename, 0, 2) == "./")            || (substr($p_remove_dir, 0, 2) == "./")) {          if (   (substr($p_filename, 0, 2) == "./")              && (substr($p_remove_dir, 0, 2) != "./")) {            $p_remove_dir = "./".$p_remove_dir;          }          if (   (substr($p_filename, 0, 2) != "./")              && (substr($p_remove_dir, 0, 2) == "./")) {            $p_remove_dir = substr($p_remove_dir, 2);          }        }        $v_compare = PclZipUtilPathInclusion($p_remove_dir,                                             $v_stored_filename);        if ($v_compare > 0) {          if ($v_compare == 2) {            $v_stored_filename = "";          }          else {            $v_stored_filename = substr($v_stored_filename,                                        strlen($p_remove_dir));          }        }      }      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);      // ----- Look for path to add      if ($p_add_dir != "") {        if (substr($p_add_dir, -1) == "/")          $v_stored_filename = $p_add_dir.$v_stored_filename;        else          $v_stored_filename = $p_add_dir."/".$v_stored_filename;      }    }    // ----- Filename (reduce the path of stored name)    $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);    $p_filedescr['stored_filename'] = $v_stored_filename;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteFileHeader(&$p_header)  {    $v_result=1;    // ----- Store the offset position of the file    $p_header['offset'] = ftell($this->zip_fd);    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,	                      $p_header['version_extracted'], $p_header['flag'],                          $p_header['compression'], $v_mtime, $v_mdate,                          $p_header['crc'], $p_header['compressed_size'],						  $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len']);    // ----- Write the first 148 bytes of the header in the archive    fputs($this->zip_fd, $v_binary_data, 30);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralFileHeader(&$p_header)  {    $v_result=1;    // TBC    //for(reset($p_header); $key = key($p_header); next($p_header)) {    //}    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,	                      $p_header['version'], $p_header['version_extracted'],                          $p_header['flag'], $p_header['compression'],						  $v_mtime, $v_mdate, $p_header['crc'],                          $p_header['compressed_size'], $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len'], $p_header['comment_len'],                          $p_header['disk'], $p_header['internal'],						  $p_header['external'], $p_header['offset']);    // ----- Write the 42 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 46);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    if ($p_header['comment_len'] != 0)    {      fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)  {    $v_result=1;    // ----- Packed data    $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,	                      $p_nb_entries, $p_size,						  $p_offset, strlen($p_comment));    // ----- Write the 22 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 22);    // ----- Write the variable fields    if (strlen($p_comment) != 0)    {      fputs($this->zip_fd, $p_comment, strlen($p_comment));    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privList()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privList(&$p_list)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of Central Dir    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_central_dir['offset']))    {      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    for ($i=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        $this->privSwapBackMagicQuotes();        return $v_result;      }      $v_header['index'] = $i;      // ----- Get the only interesting attributes      $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);      unset($v_header);    }    // ----- Close the zip file    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privConvertHeader2FileInfo()  // Description :  //   This function takes the file informations from the central directory  //   entries and extract the interesting parameters that will be given back.  //   The resulting file infos are set in the array $p_info  //     $p_info['filename'] : Filename with full path. Given by user (add),  //                           extracted in the filesystem (extract).  //     $p_info['stored_filename'] : Stored filename in the archive.  //     $p_info['size'] = Size of the file.  //     $p_info['compressed_size'] = Compressed size of the file.  //     $p_info['mtime'] = Last modification date of the file.  //     $p_info['comment'] = Comment associated with the file.  //     $p_info['folder'] = true/false : indicates if the entry is a folder or not.  //     $p_info['status'] = status of the action on the file.  //     $p_info['crc'] = CRC of the file content.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privConvertHeader2FileInfo($p_header, &$p_info)  {    $v_result=1;    // ----- Get the interesting attributes    $v_temp_path = PclZipUtilPathReduction($p_header['filename']);    $p_info['filename'] = $v_temp_path;    $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);    $p_info['stored_filename'] = $v_temp_path;    $p_info['size'] = $p_header['size'];    $p_info['compressed_size'] = $p_header['compressed_size'];    $p_info['mtime'] = $p_header['mtime'];    $p_info['comment'] = $p_header['comment'];    $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);    $p_info['index'] = $p_header['index'];    $p_info['status'] = $p_header['status'];    $p_info['crc'] = $p_header['crc'];    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractByRule()  // Description :  //   Extract a file or directory depending of rules (by index, by name, ...)  // Parameters :  //   $p_file_list : An array where will be placed the properties of each  //                  extracted file  //   $p_path : Path to add while writing the extracted files  //   $p_remove_path : Path to remove (from the file memorized path) while writing the  //                    extracted files. If the path does not match the file path,  //                    the file is extracted with its memorized path.  //                    $p_remove_path does not apply to 'list' mode.  //                    $p_path and $p_remove_path are commulative.  // Return Values :  //   1 on success,0 or less on error (see error code list)  // --------------------------------------------------------------------------------  function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check the path    if (   ($p_path == "")	    || (   (substr($p_path, 0, 1) != "/")		    && (substr($p_path, 0, 3) != "../")			&& (substr($p_path,1,2)!=":/")))      $p_path = "./".$p_path;    // ----- Reduce the path last (and duplicated) '/'    if (($p_path != "./") && ($p_path != "/"))    {      // ----- Look for the path end '/'      while (substr($p_path, -1) == "/")      {        $p_path = substr($p_path, 0, strlen($p_path)-1);      }    }    // ----- Look for path to remove format (should end by /)    if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))    {      $p_remove_path .= '/';    }    $p_remove_path_size = strlen($p_remove_path);    // ----- Open the zip file    if (($v_result = $this->privOpenFd('rb')) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      // ----- Close the zip file      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    // ----- Read each entry    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read next Central dir entry      @rewind($this->zip_fd);      if (@fseek($this->zip_fd, $v_pos_entry))      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');        // ----- Return        return PclZip::errorCode();      }      // ----- Read the file header      $v_header = array();      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        return $v_result;      }      // ----- Store the index      $v_header['index'] = $i;      // ----- Store the file position      $v_pos_entry = ftell($this->zip_fd);      // ----- Look for the specific extract rules      $v_extract = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_extract = true;                  }              }              // ----- Look for a filename              elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_extract = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_extract = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      // ----- Look for no rule, which means extract all the archive      else {          $v_extract = true;      }	  // ----- Check compression method	  if (   ($v_extract)	      && (   ($v_header['compression'] != 8)		      && ($v_header['compression'] != 0))) {          $v_header['status'] = 'unsupported_compression';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,			                       "Filename '".$v_header['stored_filename']."' is "				  	    	  	   ."compressed by an unsupported compression "				  	    	  	   ."method (".$v_header['compression'].") ");              return PclZip::errorCode();		  }	  }	  // ----- Check encrypted files	  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {          $v_header['status'] = 'unsupported_encryption';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,			                       "Unsupported encryption for "				  	    	  	   ." filename '".$v_header['stored_filename']								   ."'");              return PclZip::errorCode();		  }    }      // ----- Look for real extraction      if (($v_extract) && ($v_header['status'] != 'ok')) {          $v_result = $this->privConvertHeader2FileInfo($v_header,		                                        $p_file_list[$v_nb_extracted++]);          if ($v_result != 1) {              $this->privCloseFd();              $this->privSwapBackMagicQuotes();              return $v_result;          }          $v_extract = false;      }      // ----- Look for real extraction      if ($v_extract)      {        // ----- Go to the file position        @rewind($this->zip_fd);        if (@fseek($this->zip_fd, $v_header['offset']))        {          // ----- Close the zip file          $this->privCloseFd();          $this->privSwapBackMagicQuotes();          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');          // ----- Return          return PclZip::errorCode();        }        // ----- Look for extraction as string        if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {          $v_string = '';          // ----- Extracting the file          $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Set the file content          $p_file_list[$v_nb_extracted]['content'] = $v_string;          // ----- Next extracted file          $v_nb_extracted++;          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for extraction in standard output        elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))		        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {          // ----- Extracting the file in standard output          $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for normal extraction        else {          // ----- Extracting the file          $v_result1 = $this->privExtractFile($v_header,		                                      $p_path, $p_remove_path,											  $p_remove_all_path,											  $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }      }    }    // ----- Close the zip file    $this->privCloseFd();    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFile()  // Description :  // Parameters :  // Return Values :  //  // 1 : ... ?  // PCLZIP_ERR_USER_ABORTED(2) : User ask for extraction stop in callback  // --------------------------------------------------------------------------------  function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for all path to remove    if ($p_remove_all_path == true) {        // ----- Look for folder entry that not need to be extracted        if (($p_entry['external']&0x00000010)==0x00000010) {            $p_entry['status'] = "filtered";            return $v_result;        }        // ----- Get the basename of the path        $p_entry['filename'] = basename($p_entry['filename']);    }    // ----- Look for path to remove    else if ($p_remove_path != "")    {      if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)      {        // ----- Change the file status        $p_entry['status'] = "filtered";        // ----- Return        return $v_result;      }      $p_remove_path_size = strlen($p_remove_path);      if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)      {        // ----- Remove the path        $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);      }    }    // ----- Add the path    if ($p_path != '') {      $p_entry['filename'] = $p_path."/".$p_entry['filename'];    }    // ----- Check a base_dir_restriction    if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {      $v_inclusion      = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],                                $p_entry['filename']);      if ($v_inclusion == 0) {        PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,			                     "Filename '".$p_entry['filename']."' is "								 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");        return PclZip::errorCode();      }    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {    // ----- Look for specific actions while the file exist    if (file_exists($p_entry['filename']))    {      // ----- Look if file is a directory      if (is_dir($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "already_a_directory";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,			                     "Filename '".$p_entry['filename']."' is "								 ."already used by an existing directory");            return PclZip::errorCode();		    }      }      // ----- Look if file is write protected      else if (!is_writeable($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "write_protected";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			                     "Filename '".$p_entry['filename']."' exists "								 ."and is write protected");            return PclZip::errorCode();		    }      }      // ----- Look if the extracted file is older      else if (filemtime($p_entry['filename']) > $p_entry['mtime'])      {        // ----- Change the file status        if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))		    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {	  	  }		    else {            $p_entry['status'] = "newer_exist";            // ----- Look for PCLZIP_OPT_STOP_ON_ERROR            // For historical reason first PclZip implementation does not stop            // when this kind of error occurs.            if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {                PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			             "Newer version of '".$p_entry['filename']."' exists "					    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");                return PclZip::errorCode();		      }		    }      }      else {      }    }    // ----- Check the directory availability and create it if necessary    else {      if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))        $v_dir_to_check = $p_entry['filename'];      else if (!strstr($p_entry['filename'], "/"))        $v_dir_to_check = "";      else        $v_dir_to_check = dirname($p_entry['filename']);        if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {          // ----- Change the file status          $p_entry['status'] = "path_creation_fail";          // ----- Return          //return $v_result;          $v_result = 1;        }      }    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010))      {        // ----- Look for not compressed file        if ($p_entry['compression'] == 0) {    		  // ----- Opening destination file          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)          {            // ----- Change the file status            $p_entry['status'] = "write_error";            // ----- Return            return $v_result;          }          // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks          $v_size = $p_entry['compressed_size'];          while ($v_size != 0)          {            $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);            $v_buffer = @fread($this->zip_fd, $v_read_size);            /* Try to speed up the code            $v_binary_data = pack('a'.$v_read_size, $v_buffer);            @fwrite($v_dest_file, $v_binary_data, $v_read_size);            */            @fwrite($v_dest_file, $v_buffer, $v_read_size);            $v_size -= $v_read_size;          }          // ----- Closing the destination file          fclose($v_dest_file);          // ----- Change the file mtime          touch($p_entry['filename'], $p_entry['mtime']);        }        else {          // ----- TBC          // Need to be finished          if (($p_entry['flag'] & 1) == 1) {            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');            return PclZip::errorCode();          }          // ----- Look for using temporary file to unzip          if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))              && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                  || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                      && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {            $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);            if ($v_result < PCLZIP_ERR_NO_ERROR) {              return $v_result;            }          }          // ----- Look for extract in memory          else {            // ----- Read the compressed file in a buffer (one shot)            $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);            // ----- Decompress the file            $v_file_content = @gzinflate($v_buffer);            unset($v_buffer);            if ($v_file_content === FALSE) {              // ----- Change the file status              // TBC              $p_entry['status'] = "error";              return $v_result;            }            // ----- Opening destination file            if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {              // ----- Change the file status              $p_entry['status'] = "write_error";              return $v_result;            }            // ----- Write the uncompressed data            @fwrite($v_dest_file, $v_file_content, $p_entry['size']);            unset($v_file_content);            // ----- Closing the destination file            @fclose($v_dest_file);          }          // ----- Change the file mtime          @touch($p_entry['filename'], $p_entry['mtime']);        }        // ----- Look for chmod option        if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {          // ----- Change the mode of the file          @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);        }      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileUsingTempFile(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Creates a temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Write gz file format header    $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));    @fwrite($v_dest_file, $v_binary_data, 10);    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Write gz file format footer    $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);    @fwrite($v_dest_file, $v_binary_data, 8);    // ----- Close the temporary file    @fclose($v_dest_file);    // ----- Opening destination file    if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {      $p_entry['status'] = "write_error";      return $v_result;    }    // ----- Open the temporary gz file    if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {      @fclose($v_dest_file);      $p_entry['status'] = "read_error";      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['size'];    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @gzread($v_src_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    @fclose($v_dest_file);    @gzclose($v_src_file);    // ----- Delete the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileInOutput()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileInOutput(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1) {      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.//      eval('$v_result = '.$p_options[PCLZIP_CB_PRE_EXTRACT].'(PCLZIP_CB_PRE_EXTRACT, $v_local_header);');      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Trace    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file        if ($p_entry['compressed_size'] == $p_entry['size']) {          // ----- Read the file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Send the file to the output          echo $v_buffer;          unset($v_buffer);        }        else {          // ----- Read the compressed file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          $v_file_content = gzinflate($v_buffer);          unset($v_buffer);          // ----- Send the file to the output          echo $v_file_content;          unset($v_file_content);        }      }    }	// ----- Change abort status	if ($p_entry['status'] == "aborted") {      $p_entry['status'] = "skipped";	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileAsString()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)  {    $v_result=1;    // ----- Read the file header    $v_header = array();    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file  //      if ($p_entry['compressed_size'] == $p_entry['size'])        if ($p_entry['compression'] == 0) {          // ----- Reading the file          $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);        }        else {          // ----- Reading the file          $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          if (($p_string = @gzinflate($v_data)) === FALSE) {              // TBC          }        }        // ----- Trace      }      else {          // TBC : error : can not extract a folder in a string      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Swap the content to header      $v_local_header['content'] = $p_string;      $p_string = '';      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Swap back the content to header      $p_string = $v_local_header['content'];      unset($v_local_header['content']);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x04034b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 26);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 26)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);    // ----- Get filename    $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);    // ----- Get extra_fields    if ($v_data['extra_len'] != 0) {      $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);    }    else {      $p_header['extra'] = '';    }    // ----- Extract properties    $p_header['version_extracted'] = $v_data['version'];    $p_header['compression'] = $v_data['compression'];    $p_header['size'] = $v_data['size'];    $p_header['compressed_size'] = $v_data['compressed_size'];    $p_header['crc'] = $v_data['crc'];    $p_header['flag'] = $v_data['flag'];    $p_header['filename_len'] = $v_data['filename_len'];    // ----- Recuperate date in UNIX format    $p_header['mdate'] = $v_data['mdate'];    $p_header['mtime'] = $v_data['mtime'];    if ($p_header['mdate'] && $p_header['mtime'])    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // TBC    //for(reset($v_data); $key = key($v_data); next($v_data)) {    //}    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set the status field    $p_header['status'] = "ok";    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadCentralFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x02014b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 42);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 42)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);    // ----- Get filename    if ($p_header['filename_len'] != 0)      $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);    else      $p_header['filename'] = '';    // ----- Get extra    if ($p_header['extra_len'] != 0)      $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);    else      $p_header['extra'] = '';    // ----- Get comment    if ($p_header['comment_len'] != 0)      $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);    else      $p_header['comment'] = '';    // ----- Extract properties    // ----- Recuperate date in UNIX format    //if ($p_header['mdate'] && $p_header['mtime'])    // TBC : bug : this was ignoring time with 0/0/0    if (1)    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set default status to ok    $p_header['status'] = 'ok';    // ----- Look if it is a directory    if (substr($p_header['filename'], -1) == '/') {      //$p_header['external'] = 0x41FF0010;      $p_header['external'] = 0x00000010;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCheckFileHeaders()  // Description :  // Parameters :  // Return Values :  //   1 on success,  //   0 on error;  // --------------------------------------------------------------------------------  function privCheckFileHeaders(&$p_local_header, &$p_central_header)  {    $v_result=1;  	// ----- Check the static values  	// TBC  	if ($p_local_header['filename'] != $p_central_header['filename']) {  	}  	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {  	}  	if ($p_local_header['flag'] != $p_central_header['flag']) {  	}  	if ($p_local_header['compression'] != $p_central_header['compression']) {  	}  	if ($p_local_header['mtime'] != $p_central_header['mtime']) {  	}  	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {  	}  	// ----- Look for flag bit 3  	if (($p_local_header['flag'] & 8) == 8) {          $p_local_header['size'] = $p_central_header['size'];          $p_local_header['compressed_size'] = $p_central_header['compressed_size'];          $p_local_header['crc'] = $p_central_header['crc'];  	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadEndCentralDir()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadEndCentralDir(&$p_central_dir)  {    $v_result=1;    // ----- Go to the end of the zip file    $v_size = filesize($this->zipname);    @fseek($this->zip_fd, $v_size);    if (@ftell($this->zip_fd) != $v_size)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');      // ----- Return      return PclZip::errorCode();    }    // ----- First try : look if this is an archive with no commentaries (most of the time)    // in this case the end of central dir is at 22 bytes of the file end    $v_found = 0;    if ($v_size > 26) {      @fseek($this->zip_fd, $v_size-22);      if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read for bytes      $v_binary_data = @fread($this->zip_fd, 4);      $v_data = @unpack('Vid', $v_binary_data);      // ----- Check signature      if ($v_data['id'] == 0x06054b50) {        $v_found = 1;      }      $v_pos = ftell($this->zip_fd);    }    // ----- Go back to the maximum possible size of the Central Dir End Record    if (!$v_found) {      $v_maximum_size = 65557; // 0xFFFF + 22;      if ($v_maximum_size > $v_size)        $v_maximum_size = $v_size;      @fseek($this->zip_fd, $v_size-$v_maximum_size);      if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read byte per byte in order to find the signature      $v_pos = ftell($this->zip_fd);      $v_bytes = 0x00000000;      while ($v_pos < $v_size)      {        // ----- Read a byte        $v_byte = @fread($this->zip_fd, 1);        // -----  Add the byte        //$v_bytes = ($v_bytes << 8) | Ord($v_byte);        // Note we mask the old value down such that once shifted we can never end up with more than a 32bit number        // Otherwise on systems where we have 64bit integers the check below for the magic number will fail.        $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte);        // ----- Compare the bytes        if ($v_bytes == 0x504b0506)        {          $v_pos++;          break;        }        $v_pos++;      }      // ----- Look if not found end of central dir      if ($v_pos == $v_size)      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");        // ----- Return        return PclZip::errorCode();      }    }    // ----- Read the first 18 bytes of the header    $v_binary_data = fread($this->zip_fd, 18);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 18)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);    // ----- Check the global size    if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {	  // ----- Removed in release 2.2 see readme file	  // The check of the file size is a little too strict.	  // Some bugs where found when a zip is encrypted/decrypted with 'crypt'.	  // While decrypted, zip has training 0 bytes	  if (0) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,	                       'The central dir is not at the end of the archive.'						   .' Some trailing bytes exists after the archive.');      // ----- Return      return PclZip::errorCode();	  }    }    // ----- Get comment    if ($v_data['comment_size'] != 0) {      $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);    }    else      $p_central_dir['comment'] = '';    $p_central_dir['entries'] = $v_data['entries'];    $p_central_dir['disk_entries'] = $v_data['disk_entries'];    $p_central_dir['offset'] = $v_data['offset'];    $p_central_dir['size'] = $v_data['size'];    $p_central_dir['disk'] = $v_data['disk'];    $p_central_dir['disk_start'] = $v_data['disk_start'];    // TBC    //for(reset($p_central_dir); $key = key($p_central_dir); next($p_central_dir)) {    //}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDeleteByRule()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDeleteByRule(&$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Scan all the files    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_pos_entry))    {      // ----- Close the zip file      $this->privCloseFd();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    $v_header_list = array();    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      $v_header_list[$v_nb_extracted] = array();      if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        return $v_result;      }      // ----- Store the index      $v_header_list[$v_nb_extracted]['index'] = $i;      // ----- Look for the specific extract rules      $v_found = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }                  elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) /* Indicates a folder */                          && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }              }              // ----- Look for a filename              elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_found = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_found = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      else {      	$v_found = true;      }      // ----- Look for deletion      if ($v_found)      {        unset($v_header_list[$v_nb_extracted]);      }      else      {        $v_nb_extracted++;      }    }    // ----- Look if something need to be deleted    if ($v_nb_extracted > 0) {        // ----- Creates a temporay file        $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';        // ----- Creates a temporary zip archive        $v_temp_zip = new PclZip($v_zip_temp_name);        // ----- Open the temporary zip file in write mode        if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {            $this->privCloseFd();            // ----- Return            return $v_result;        }        // ----- Look which file need to be kept        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Calculate the position of the header            @rewind($this->zip_fd);            if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Error log                PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');                // ----- Return                return PclZip::errorCode();            }            // ----- Read the file header            $v_local_header = array();            if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Check that local file header is same as central file header            if ($this->privCheckFileHeaders($v_local_header,			                                $v_header_list[$i]) != 1) {                // TBC            }            unset($v_local_header);            // ----- Write the file header            if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Read/write the data block            if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }        }        // ----- Store the offset of the central dir        $v_offset = @ftell($v_temp_zip->zip_fd);        // ----- Re-Create the Central Dir files header        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Create the file header            if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {                $v_temp_zip->privCloseFd();                $this->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Transform the header to a 'usable' info            $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);        }        // ----- Zip file comment        $v_comment = '';        if (isset($p_options[PCLZIP_OPT_COMMENT])) {          $v_comment = $p_options[PCLZIP_OPT_COMMENT];        }        // ----- Calculate the size of the central header        $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;        // ----- Create the central dir footer        if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {            // ----- Reset the file list            unset($v_header_list);            $v_temp_zip->privCloseFd();            $this->privCloseFd();            @unlink($v_zip_temp_name);            // ----- Return            return $v_result;        }        // ----- Close        $v_temp_zip->privCloseFd();        $this->privCloseFd();        // ----- Delete the zip file        // TBC : I should test the result ...        @unlink($this->zipname);        // ----- Rename the temporary file        // TBC : I should test the result ...        //@rename($v_zip_temp_name, $this->zipname);        PclZipUtilRename($v_zip_temp_name, $this->zipname);        // ----- Destroy the temporary archive        unset($v_temp_zip);    }    // ----- Remove every files : reset the file    else if ($v_central_dir['entries'] != 0) {        $this->privCloseFd();        if (($v_result = $this->privOpenFd('wb')) != 1) {          return $v_result;        }        if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {          return $v_result;        }        $this->privCloseFd();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDirCheck()  // Description :  //   Check if a directory exists, if not it creates it and all the parents directory  //   which may be useful.  // Parameters :  //   $p_dir : Directory path to check.  // Return Values :  //    1 : OK  //   -1 : Unable to create directory  // --------------------------------------------------------------------------------  function privDirCheck($p_dir, $p_is_dir=false)  {    $v_result = 1;    // ----- Remove the final '/'    if (($p_is_dir) && (substr($p_dir, -1)=='/'))    {      $p_dir = substr($p_dir, 0, strlen($p_dir)-1);    }    // ----- Check the directory availability    if ((is_dir($p_dir)) || ($p_dir == ""))    {      return 1;    }    // ----- Extract parent directory    $p_parent_dir = dirname($p_dir);    // ----- Just a check    if ($p_parent_dir != $p_dir)    {      // ----- Look for parent directory      if ($p_parent_dir != "")      {        if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)        {          return $v_result;        }      }    }    // ----- Create the directory    if (!@mkdir($p_dir, 0777))    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privMerge()  // Description :  //   If $p_archive_to_add does not exist, the function exit with a success result.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privMerge(&$p_archive_to_add)  {    $v_result=1;    // ----- Look if the archive_to_add exists    if (!is_file($p_archive_to_add->zipname))    {      // ----- Nothing to merge, so merge is a success      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Look if the archive exists    if (!is_file($this->zipname))    {      // ----- Do a duplicate      $v_result = $this->privDuplicate($p_archive_to_add->zipname);      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Open the archive_to_add file    if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)    {      $this->privCloseFd();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir_to_add = array();    if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($p_archive_to_add->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the files from the archive_to_add into the temporary file    $v_size = $v_central_dir_to_add['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($v_zip_temp_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the block of file headers from the archive_to_add    $v_size = $v_central_dir_to_add['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Merge the file comments    $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];    // ----- Calculate the size of the (new) central header    $v_size = @ftell($v_zip_temp_fd)-$v_offset;    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive fd    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      @fclose($v_zip_temp_fd);      $this->zip_fd = null;      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    $p_archive_to_add->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDuplicate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDuplicate($p_archive_filename)  {    $v_result=1;    // ----- Look if the $p_archive_filename exists    if (!is_file($p_archive_filename))    {      // ----- Nothing to duplicate, so duplicate is a success.      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)    {      $this->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = filesize($p_archive_filename);    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorLog()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorLog($p_error_code=0, $p_error_string='')  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclError($p_error_code, $p_error_string);    }    else {      $this->error_code = $p_error_code;      $this->error_string = $p_error_string;    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorReset()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorReset()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclErrorReset();    }    else {      $this->error_code = 0;      $this->error_string = '';    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDisableMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDisableMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if already done    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Get and memorize the magic_quote value	$this->magic_quotes_status = @get_magic_quotes_runtime();	// ----- Disable magic_quotes	if ($this->magic_quotes_status == 1) {	  @set_magic_quotes_runtime(0);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privSwapBackMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privSwapBackMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if something to do    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Swap back magic_quotes	if ($this->magic_quotes_status == 1) {  	  @set_magic_quotes_runtime($this->magic_quotes_status);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  }  // End of class  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathReduction()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilPathReduction($p_dir)  {    $v_result = "";    // ----- Look for not empty path    if ($p_dir != "") {      // ----- Explode path by directory names      $v_list = explode("/", $p_dir);      // ----- Study directories from last to first      $v_skip = 0;      for ($i=sizeof($v_list)-1; $i>=0; $i--) {        // ----- Look for current path        if ($v_list[$i] == ".") {          // ----- Ignore this directory          // Should be the first $i=0, but no check is done        }        else if ($v_list[$i] == "..") {		  $v_skip++;        }        else if ($v_list[$i] == "") {		  // ----- First '/' i.e. root slash		  if ($i == 0) {            $v_result = "/".$v_result;		    if ($v_skip > 0) {		        // ----- It is an invalid path, so the path is not modified		        // TBC		        $v_result = $p_dir;                $v_skip = 0;		    }		  }		  // ----- Last '/' i.e. indicates a directory		  else if ($i == (sizeof($v_list)-1)) {            $v_result = $v_list[$i];		  }		  // ----- Double '/' inside the path		  else {            // ----- Ignore only the double '//' in path,            // but not the first and last '/'		  }        }        else {		  // ----- Look for item to skip		  if ($v_skip > 0) {		    $v_skip--;		  }		  else {            $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");		  }        }      }      // ----- Look for skip      if ($v_skip > 0) {        while ($v_skip > 0) {            $v_result = '../'.$v_result;            $v_skip--;        }      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathInclusion()  // Description :  //   This function indicates if the path $p_path is under the $p_dir tree. Or,  //   said in an other way, if the file or sub-dir $p_path is inside the dir  //   $p_dir.  //   The function indicates also if the path is exactly the same as the dir.  //   This function supports path with duplicated '/' like '//', but does not  //   support '.' or '..' statements.  // Parameters :  // Return Values :  //   0 if $p_path is not inside directory $p_dir  //   1 if $p_path is inside directory $p_dir  //   2 if $p_path is exactly the same as $p_dir  // --------------------------------------------------------------------------------  function PclZipUtilPathInclusion($p_dir, $p_path)  {    $v_result = 1;    // ----- Look for path beginning by ./    if (   ($p_dir == '.')        || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {      $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);    }    if (   ($p_path == '.')        || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {      $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);    }    // ----- Explode dir and path by directory separator    $v_list_dir = explode("/", $p_dir);    $v_list_dir_size = sizeof($v_list_dir);    $v_list_path = explode("/", $p_path);    $v_list_path_size = sizeof($v_list_path);    // ----- Study directories paths    $i = 0;    $j = 0;    while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {      // ----- Look for empty dir (path reduction)      if ($v_list_dir[$i] == '') {        $i++;        continue;      }      if ($v_list_path[$j] == '') {        $j++;        continue;      }      // ----- Compare the items      if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {        $v_result = 0;      }      // ----- Next items      $i++;      $j++;    }    // ----- Look if everything seems to be the same    if ($v_result) {      // ----- Skip all the empty items      while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;      while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;      if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {        // ----- There are exactly the same        $v_result = 2;      }      else if ($i < $v_list_dir_size) {        // ----- The path is shorter than the dir        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilCopyBlock()  // Description :  // Parameters :  //   $p_mode : read/write compression mode  //             0 : src & dest normal  //             1 : src gzip, dest normal  //             2 : src normal, dest gzip  //             3 : src & dest gzip  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)  {    $v_result = 1;    if ($p_mode==0)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==1)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==2)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==3)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilRename()  // Description :  //   This function tries to do a simple rename() function. If it fails, it  //   tries to copy the $p_src file in a new $p_dest file and then unlink the  //   first one.  // Parameters :  //   $p_src : Old filename  //   $p_dest : New filename  // Return Values :  //   1 on success, 0 on failure.  // --------------------------------------------------------------------------------  function PclZipUtilRename($p_src, $p_dest)  {    $v_result = 1;    // ----- Try to rename the files    if (!@rename($p_src, $p_dest)) {      // ----- Try to copy & unlink the src      if (!@copy($p_src, $p_dest)) {        $v_result = 0;      }      else if (!@unlink($p_src)) {        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilOptionText()  // Description :  //   Translate option value in text. Mainly for debug purpose.  // Parameters :  //   $p_option : the option value.  // Return Values :  //   The option text value.  // --------------------------------------------------------------------------------  function PclZipUtilOptionText($p_option)  {    $v_list = get_defined_constants();    for (reset($v_list); $v_key = key($v_list); next($v_list)) {	    $v_prefix = substr($v_key, 0, 10);	    if ((   ($v_prefix == 'PCLZIP_OPT')           || ($v_prefix == 'PCLZIP_CB_')           || ($v_prefix == 'PCLZIP_ATT'))	        && ($v_list[$v_key] == $p_option)) {        return $v_key;	    }    }    $v_result = 'Unknown';    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilTranslateWinPath()  // Description :  //   Translate windows path by replacing '\' by '/' and optionally removing  //   drive letter.  // Parameters :  //   $p_path : path to translate.  //   $p_remove_disk_letter : true | false  // Return Values :  //   The path translated.  // --------------------------------------------------------------------------------  function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)  {    if (stristr(php_uname(), 'windows')) {      // ----- Look for potential disk letter      if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {          $p_path = substr($p_path, $v_position+1);      }      // ----- Change potential windows directory separator      if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {          $p_path = strtr($p_path, '\\', '/');      }    }    return $p_path;  }  // --------------------------------------------------------------------------------?>
<?php/** * Dashboard Administration Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once('./admin.php');/** Load WordPress dashboard API */require_once(ABSPATH . 'wp-admin/includes/dashboard.php');wp_dashboard_setup();wp_enqueue_script( 'dashboard' );wp_enqueue_script( 'plugin-install' );wp_enqueue_script( 'media-upload' );wp_admin_css( 'dashboard' );wp_admin_css( 'plugin-install' );add_thickbox();$title = __('Dashboard');$parent_file = 'index.php';add_contextual_help($current_screen,	'<p>' . __('Welcome to your WordPress Dashboard! You will find helpful tips in the Help tab of each screen to assist you as you get to know the application.') . '</p>' .	'<p>' . __('The left-hand navigation menu provides links to the administration screens in your WordPress application. You can expand or collapse navigation sections by clicking on the arrow that appears on the right side of each navigation item when you hover over it. You can also minimize the navigation menu to a narrow icon strip by clicking on the separator lines between navigation sections that end in double arrowheads; when minimized, the submenu items will be displayed on hover.') . '</p>' .	'<p>' . __('You can configure your dashboard by choosing which modules to display, how many columns to display them in, and where each module should be placed. You can hide/show modules and select the number of columns in the Screen Options tab. To rearrange the modules, drag and drop by clicking on the title bar of the selected module and releasing when you see a gray dotted-line box appear in the location you want to place the module. You can also expand or collapse each module by clicking once on the the module&#8217;s title bar. In addition, some modules are configurable, and will show a &#8220;Configure&#8221; link in the title bar when you hover over it.') . '</p>' .	'<p>' . __('The modules on your Dashboard screen are:') . '</p>' .	'<p>' . __('<strong>Right Now</strong> - Displays a summary of the content on your site and identifies which theme and version of WordPress you are using.') . '</p>' .	'<p>' . __('<strong>Recent Comments</strong> - Shows the most recent comments on your posts (configurable, up to 30) and allows you to moderate them.') . '</p>' .	'<p>' . __('<strong>Incoming Links</strong> - Shows links to your site found by Google Blog Search.') . '</p>' .	'<p>' . __('<strong>QuickPress</strong> - Allows you to create a new post and either publish it or save it as a draft.') . '</p>' .	'<p>' . __('<strong>Recent Drafts</strong> - Displays links to the 5 most recent draft posts you&#8217;ve started.') . '</p>' .	'<p>' . __('<strong>Other WordPress News</strong> - Shows the feed from <a href="http://planet.wordpress.org" target="_blank">WordPress Planet</a>. You can configure it to show a different feed of your choosing.') . '</p>' .	'<p>' . __('<strong>Plugins</strong> - Features the most popular, newest, and recently updated plugins from the WordPress.org Plugin Directory.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_SubPanel" target="_blank">Dashboard Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');$today = current_time('mysql', 1);?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div id="dashboard-widgets-wrap"><?php wp_dashboard(); ?><div class="clear"></div></div><!-- dashboard-widgets-wrap --></div><!-- wrap --><?php require(ABSPATH . 'wp-admin/admin-footer.php'); ?>
<?php/** * The Sidebar containing the primary and secondary widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>		<div id="primary" class="widget-area" role="complementary">			<ul class="xoxo"><?php	/* When we call the dynamic_sidebar() function, it'll spit out	 * the widgets for that widget area. If it instead returns false,	 * then the sidebar simply doesn't exist, so we'll hard-code in	 * some default sidebar stuff just in case.	 */	if ( ! dynamic_sidebar( 'primary-widget-area' ) ) : ?>				<li id="search" class="widget-container widget_search">				<?php get_search_form(); ?>			</li>			<li id="archives" class="widget-container">				<h3 class="widget-title"><?php _e( 'Archives', 'twentyten' ); ?></h3>				<ul>					<?php wp_get_archives( 'type=monthly' ); ?>				</ul>			</li>			<li id="meta" class="widget-container">				<h3 class="widget-title"><?php _e( 'Meta', 'twentyten' ); ?></h3>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<?php wp_meta(); ?>				</ul>			</li>		<?php endif; // end primary widget area ?>			</ul>		</div><!-- #primary .widget-area --><?php	// A second sidebar for widgets, just because.	if ( is_active_sidebar( 'secondary-widget-area' ) ) : ?>		<div id="secondary" class="widget-area" role="complementary">			<ul class="xoxo">				<?php dynamic_sidebar( 'secondary-widget-area' ); ?>			</ul>		</div><!-- #secondary .widget-area --><?php endif; ?>
<?php/** * This holds the version number in a separate file so we can bump it without cluttering the SVN *//** * The WordPress version string * * @global string $wp_version */$wp_version = '3.0';/** * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema. * * @global int $wp_db_version */$wp_db_version = 15260;/** * Holds the TinyMCE version * * @global string $tinymce_version */$tinymce_version = '327-1235';/** * Holds the cache manifest version * * @global string $manifest_version */$manifest_version = '20100530';/** * Holds the required PHP version * * @global string $required_php_version */$required_php_version = '4.3';/** * Holds the required MySQL version * * @global string $required_mysql_version */$required_mysql_version = '4.1.2';
<?php/** * RSS2 Feed Template for displaying RSS2 Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>';?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	<?php do_action('rss2_ns'); do_action('rss2_comments_ns'); ?>	><channel>	<title><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on: %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %s searching on %s')), get_bloginfo_rss( 'name' ), esc_attr($wp_query->query_vars['s']));		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php (is_single()) ? the_permalink_rss() : bloginfo_rss("url") ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('r', get_lastcommentmodified('GMT')); ?></lastBuildDate>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('commentsrss2_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<item>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link><?php comment_link() ?></link>		<dc:creator><?php echo get_comment_author_rss() ?></dc:creator>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_comment_time('Y-m-d H:i:s', true, false), false); ?></pubDate>		<guid isPermaLink="false"><?php comment_guid() ?></guid><?php if ( post_password_required($comment_post) ) : ?>		<description><?php echo ent2ncr(__('Protected Comments: Please enter your password to view comments.')); ?></description>		<content:encoded><![CDATA[<?php echo get_the_password_form() ?>]]></content:encoded><?php else : // post pass ?>		<description><?php comment_text_rss() ?></description>		<content:encoded><![CDATA[<?php comment_text() ?>]]></content:encoded><?php endif; // post pass	do_action('commentrss2_item', $comment->comment_ID, $comment_post->ID);?>	</item><?php endwhile; endif; ?></channel></rss>
<?php/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );add_action( 'wp_head', 'signuppageheaders' ) ;require( './wp-blog-header.php' );require_once( ABSPATH . WPINC . '/registration.php' );if ( is_array( get_site_option( 'illegal_names' )) && isset( $_GET[ 'new' ] ) && in_array( $_GET[ 'new' ], get_site_option( 'illegal_names' ) ) == true ) {	wp_redirect( network_home_url() );	die();}function do_signup_header() {	do_action("signup_header");}add_action( 'wp_head', 'do_signup_header' );function signuppageheaders() {	echo "<meta name='robots' content='noindex,nofollow' />\n";}if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}if ( !is_main_site() ) {	wp_redirect( network_home_url( 'wp-signup.php' ) );	die();}// Fix for page title$wp_query->is_404 = false;function wpmu_signup_stylesheet() {	?>	<style type="text/css">		.mu_register { width: 90%; margin:0 auto; }		.mu_register form { margin-top: 2em; }		.mu_register .error { font-weight:700; padding:10px; color:#333333; background:#FFEBE8; border:1px solid #CC0000; }		.mu_register input[type="submit"],			.mu_register #blog_title,			.mu_register #user_email,			.mu_register #blogname,			.mu_register #user_name { width:100%; font-size: 24px; margin:5px 0; }		.mu_register .prefix_address,			.mu_register .suffix_address {font-size: 18px;display:inline; }		.mu_register label { font-weight:700; font-size:15px; display:block; margin:10px 0; }		.mu_register label.checkbox { display:inline; }		.mu_register .mu_alert { font-weight:700; padding:10px; color:#333333; background:#ffffe0; border:1px solid #e6db55; }	</style>	<?php}add_action( 'wp_head', 'wpmu_signup_stylesheet' );get_header();do_action( 'before_signup_form' );?><div id="content" class="widecolumn"><div class="mu_register"><?phpfunction show_blog_form($blogname = '', $blog_title = '', $errors = '') {	global $current_site;	// Blog name	if ( !is_subdomain_install() )		echo '<label for="blogname">' . __('Site Name:') . '</label>';	else		echo '<label for="blogname">' . __('Site Domain:') . '</label>';	if ( $errmsg = $errors->get_error_message('blogname') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	if ( !is_subdomain_install() )		echo '<span class="prefix_address">' . $current_site->domain . $current_site->path . '</span><input name="blogname" type="text" id="blogname" value="'. esc_attr($blogname) .'" maxlength="60" /><br />';	else		echo '<input name="blogname" type="text" id="blogname" value="'.esc_attr($blogname).'" maxlength="60" /><span class="suffix_address">.' . ( $site_domain = preg_replace( '|^www\.|', '', $current_site->domain ) ) . '</span><br />';	if ( !is_user_logged_in() ) {		print '(<strong>' . __( 'Your address will be ' );		if ( !is_subdomain_install() )			print $current_site->domain . $current_site->path . __( 'sitename' );		else			print __( 'domain.' ) . $site_domain . $current_site->path;		echo '.</strong>) ' . __( 'Must be at least 4 characters, letters and numbers only. It cannot be changed, so choose carefully!' ) . '</p>';	}	// Blog Title	?>	<label for="blog_title"><?php _e('Site Title:') ?></label>	<?php if ( $errmsg = $errors->get_error_message('blog_title') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	echo '<input name="blog_title" type="text" id="blog_title" value="'.esc_attr($blog_title).'" />';	?>	<div id="privacy">        <p class="privacy-intro">            <label for="blog_public_on"><?php _e('Privacy:') ?></label>            <?php _e('Allow my site to appear in search engines like Google, Technorati, and in public listings around this network.'); ?>            <br style="clear:both" />            <label class="checkbox" for="blog_public_on">                <input type="radio" id="blog_public_on" name="blog_public" value="1" <?php if ( !isset( $_POST['blog_public'] ) || $_POST['blog_public'] == '1' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'Yes' ); ?></strong>            </label>            <label class="checkbox" for="blog_public_off">                <input type="radio" id="blog_public_off" name="blog_public" value="0" <?php if ( isset( $_POST['blog_public'] ) && $_POST['blog_public'] == '0' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'No' ); ?></strong>            </label>        </p>	</div>	<?php	do_action('signup_blogform', $errors);}function validate_blog_form() {	$user = '';	if ( is_user_logged_in() )		$user = wp_get_current_user();	return wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title'], $user);}function show_user_form($user_name = '', $user_email = '', $errors = '') {	// User name	echo '<label for="user_name">' . __('Username:') . '</label>';	if ( $errmsg = $errors->get_error_message('user_name') ) {		echo '<p class="error">'.$errmsg.'</p>';	}	echo '<input name="user_name" type="text" id="user_name" value="'. esc_attr($user_name) .'" maxlength="60" /><br />';	_e( '(Must be at least 4 characters, letters and numbers only.)' );	?>	<label for="user_email"><?php _e( 'Email&nbsp;Address:' ) ?></label>	<?php if ( $errmsg = $errors->get_error_message('user_email') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php } ?>	<input name="user_email" type="text" id="user_email" value="<?php  echo esc_attr($user_email) ?>" maxlength="200" /><br /><?php _e('We send your registration email to this address. (Double-check your email address before continuing.)') ?>	<?php	if ( $errmsg = $errors->get_error_message('generic') ) {		echo '<p class="error">' . $errmsg . '</p>';	}	do_action( 'signup_extra_fields', $errors );}function validate_user_form() {	return wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);}function signup_another_blog($blogname = '', $blog_title = '', $errors = '') {	global $current_user, $current_site;	if ( ! is_wp_error($errors) ) {		$errors = new WP_Error();	}	// allow definition of default variables	$filtered_results = apply_filters('signup_another_blog_init', array('blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	echo '<h2>' . sprintf( __( 'Get <em>another</em> %s site in seconds' ), $current_site->site_name ) . '</h2>';	if ( $errors->get_error_code() ) {		echo '<p>' . __( 'There was a problem, please correct the form below and try again.' ) . '</p>';	}	?>	<p><?php printf( __( 'Welcome back, %s. By filling out the form below, you can <strong>add another site to your account</strong>. There is no limit to the number of sites you can have, so create to your heart&#8217;s content, but write responsibly!' ), $current_user->display_name ) ?></p>	<?php	$blogs = get_blogs_of_user($current_user->ID);	if ( !empty($blogs) ) { ?>			<p><?php _e( 'Sites you are already a member of:' ) ?></p>			<ul>				<?php foreach ( $blogs as $blog ) {					$home_url = get_home_url( $blog->userblog_id );					echo '<li><a href="' . esc_url( $home_url ) . '">' . $home_url . '</a></li>';				} ?>			</ul>	<?php } ?>	<p><?php _e( 'If you&#8217;re not going to use a great site domain, leave it for a new user. Now have at it!' ) ?></p>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="gimmeanotherblog" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e( 'Create Site' ) ?>" /></p>	</form>	<?php}function validate_another_blog_signup() {	global $wpdb, $current_user, $blogname, $blog_title, $errors, $domain, $path;	$current_user = wp_get_current_user();	if ( !is_user_logged_in() )		die();	$result = validate_blog_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_another_blog($blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = apply_filters( 'signup_create_blog_meta', array( 'lang_id' => 1, 'public' => $public ) ); // deprecated	$meta = apply_filters( 'add_signup_meta', $meta );	wpmu_create_blog( $domain, $path, $blog_title, $current_user->id, $meta, $wpdb->siteid );	confirm_another_blog_signup($domain, $path, $blog_title, $current_user->user_login, $current_user->user_email, $meta);	return true;}function confirm_another_blog_signup($domain, $path, $blog_title, $user_name, $user_email = '', $meta = '') {	?>	<h2><?php printf( __( 'The site %s is yours.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p>		<?php printf( __( '<a href="http://%1$s">http://%2$s</a> is your new site.  <a href="%3$s">Log in</a> as &#8220;%4$s&#8221; using your existing password.' ), $domain.$path, $domain.$path, "http://" . $domain.$path . "wp-login.php", $user_name ) ?>	</p>	<?php	do_action( 'signup_finished' );}function signup_user($user_name = '', $user_email = '', $errors = '') {	global $current_site, $active_signup;	if ( !is_wp_error($errors) )		$errors = new WP_Error();	if ( isset( $_POST[ 'signup_for' ] ) )		$signup[ esc_html( $_POST[ 'signup_for' ] ) ] = 'checked="checked"';	else		$signup[ 'blog' ] = 'checked="checked"';	//TODO - This doesn't seem to do anything do we really need it?	$signup['user'] = isset( $signup['user'] ) ? $signup['user'] : '';	// allow definition of default variables	$filtered_results = apply_filters('signup_user_init', array('user_name' => $user_name, 'user_email' => $user_email, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$errors = $filtered_results['errors'];	?>	<h2><?php printf( __( 'Get your own %s account in seconds' ), $current_site->site_name ) ?></h2>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-user-signup" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_user_form($user_name, $user_email, $errors); ?>		<p>		<?php if ( $active_signup == 'blog' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="blog" />		<?php } elseif ( $active_signup == 'user' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="user" />		<?php } else { ?>			<input id="signupblog" type="radio" name="signup_for" value="blog" <?php echo $signup['blog'] ?> />			<label class="checkbox" for="signupblog"><?php _e('Gimme a site!') ?></label>			<br />			<input id="signupuser" type="radio" name="signup_for" value="user" <?php echo $signup['user'] ?> />			<label class="checkbox" for="signupuser"><?php _e('Just a username, please.') ?></label>		<?php } ?>		</p>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Next') ?>" /></p>	</form>	<?php}function validate_user_signup() {	$result = validate_user_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	if ( 'blog' == $_POST['signup_for'] ) {		signup_blog($user_name, $user_email);		return false;	}	wpmu_signup_user($user_name, $user_email, apply_filters( "add_signup_meta", array() ) );	confirm_user_signup($user_name, $user_email);	return true;}function confirm_user_signup($user_name, $user_email) {	?>	<h2><?php printf( __( '%s is your new username' ), $user_name) ?></h2>	<p><?php _e( 'But, before you can start using your new username, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf(__( 'Check your inbox at <strong>%1$s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your username within two days, you will have to sign up again.' ); ?></p>	<?php	do_action( 'signup_finished' );}function signup_blog($user_name = '', $user_email = '', $blogname = '', $blog_title = '', $errors = '') {	if ( !is_wp_error($errors) )		$errors = new WP_Error();	// allow definition of default variables	$filtered_results = apply_filters('signup_blog_init', array('user_name' => $user_name, 'user_email' => $user_email, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	if ( empty($blogname) )		$blogname = $user_name;	?>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-blog-signup" />		<input type="hidden" name="user_name" value="<?php echo esc_attr($user_name) ?>" />		<input type="hidden" name="user_email" value="<?php echo esc_attr($user_email) ?>" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Signup') ?>" /></p>	</form>	<?php}function validate_blog_signup() {	// Re-validate user info.	$result = wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	$result = wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title']);	extract($result);	if ( $errors->get_error_code() ) {		signup_blog($user_name, $user_email, $blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = array ('lang_id' => 1, 'public' => $public);	$meta = apply_filters( "add_signup_meta", $meta );	wpmu_signup_blog($domain, $path, $blog_title, $user_name, $user_email, $meta);	confirm_blog_signup($domain, $path, $blog_title, $user_name, $user_email, $meta);	return true;}function confirm_blog_signup($domain, $path, $blog_title, $user_name = '', $user_email = '', $meta) {	?>	<h2><?php printf( __( 'Congratulations! Your new site, %s, is almost ready.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p><?php _e( 'But, before you can start using your site, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf( __( 'Check your inbox at <strong>%s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your site within two days, you will have to sign up again.' ); ?></p>	<h2><?php _e( 'Still waiting for your email?' ); ?></h2>	<p>		<?php _e( 'If you haven&#8217;t received your email yet, there are a number of things you can do:' ) ?>		<ul id="noemail-tips">			<li><p><strong><?php _e( 'Wait a little longer. Sometimes delivery of email can be delayed by processes outside of our control.' ) ?></strong></p></li>			<li><p><?php _e( 'Check the junk or spam folder of your email client. Sometime emails wind up there by mistake.' ) ?></p></li>			<li><?php printf( __( 'Have you entered your email correctly?  You have entered %s, if it&#8217;s incorrect, you will not receive your email.' ), $user_email ) ?></li>		</ul>	</p>	<?php	do_action( 'signup_finished' );}// Main$active_signup = get_site_option( 'registration' );if ( !$active_signup )	$active_signup = 'all';$active_signup = apply_filters( 'wpmu_active_signup', $active_signup ); // return "all", "none", "blog" or "user"// Make the signup type translatable.$i18n_signup['all'] = _x('all', 'Multisite active signup type');$i18n_signup['none'] = _x('none', 'Multisite active signup type');$i18n_signup['blog'] = _x('blog', 'Multisite active signup type');$i18n_signup['user'] = _x('user', 'Multisite active signup type');if ( is_super_admin() )	echo '<div class="mu_alert">' . sprintf( __( 'Greetings Site Administrator! You are currently allowing &#8220;%s&#8221; registrations. To change or disable registration go to your <a href="%s">Options page</a>.' ), $i18n_signup[$active_signup], esc_url( network_admin_url( 'ms-options.php' ) ) ) . '</div>';$newblogname = isset($_GET['new']) ? strtolower(preg_replace('/^-|-$|[^-a-zA-Z0-9]/', '', $_GET['new'])) : null;$current_user = wp_get_current_user();if ( $active_signup == "none" ) {	_e( 'Registration has been disabled.' );} elseif ( $active_signup == 'blog' && !is_user_logged_in() ) {	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$login_url = site_url( 'wp-login.php?redirect_to=' . urlencode($proto . $_SERVER['HTTP_HOST'] . '/wp-signup.php' ));	echo sprintf( __( 'You must first <a href="%s">log in</a>, and then you can create a new site.' ), $login_url );} else {	$stage = isset( $_POST['stage'] ) ?  $_POST['stage'] : 'default';	switch ( $stage ) {		case 'validate-user-signup' :			if ( $active_signup == 'all' || $_POST[ 'signup_for' ] == 'blog' && $active_signup == 'blog' || $_POST[ 'signup_for' ] == 'user' && $active_signup == 'user' )				validate_user_signup();			else				_e( 'User registration has been disabled.' );		break;		case 'validate-blog-signup':			if ( $active_signup == 'all' || $active_signup == 'blog' )				validate_blog_signup();			else				_e( 'Site registration has been disabled.' );			break;		case 'gimmeanotherblog':			validate_another_blog_signup();			break;		case 'default':		default :			$user_email = isset( $_POST[ 'user_email' ] ) ? $_POST[ 'user_email' ] : '';			do_action( "preprocess_signup_form" ); // populate the form from invites, elsewhere?			if ( is_user_logged_in() && ( $active_signup == 'all' || $active_signup == 'blog' ) )				signup_another_blog($newblogname);			elseif ( is_user_logged_in() == false && ( $active_signup == 'all' || $active_signup == 'user' ) )				signup_user( $newblogname, $user_email );			elseif ( is_user_logged_in() == false && ( $active_signup == 'blog' ) )				_e( 'Sorry, new registrations are not allowed at this time.' );			else				_e( 'You are logged in already. No need to register again!' );			if ( $newblogname ) {				$newblog = get_blogaddress_by_name( $newblogname );				if ( $active_signup == 'blog' || $active_signup == 'all' )					printf( __( '<p><em>The site you were looking for, <strong>%s</strong> does not exist, but you can create it now!</em></p>' ), $newblog );				else					printf( __( '<p><em>The site you were looking for, <strong>%s</strong>, does not exist.</em></p>' ), $newblog );			}			break;	}}?></div></div><?php do_action( 'after_signup_form' ); ?><?php get_footer(); ?>
<?php/** * WordPress implementation for PHP functions missing from older PHP versions. * * @package PHP * @access private */// Added in PHP 5.0if (!function_exists('http_build_query')) {	function http_build_query($data, $prefix=null, $sep=null) {		return _http_build_query($data, $prefix, $sep);	}}// from php.net (modified by Mark Jaquith to behave like the native PHP5 function)function _http_build_query($data, $prefix=null, $sep=null, $key='', $urlencode=true) {	$ret = array();	foreach ( (array) $data as $k => $v ) {		if ( $urlencode)			$k = urlencode($k);		if ( is_int($k) && $prefix != null )			$k = $prefix.$k;		if ( !empty($key) )			$k = $key . '%5B' . $k . '%5D';		if ( $v === NULL )			continue;		elseif ( $v === FALSE )			$v = '0';		if ( is_array($v) || is_object($v) )			array_push($ret,_http_build_query($v, '', $sep, $k, $urlencode));		elseif ( $urlencode )			array_push($ret, $k.'='.urlencode($v));		else			array_push($ret, $k.'='.$v);	}	if ( NULL === $sep )		$sep = ini_get('arg_separator.output');	return implode($sep, $ret);}if ( !function_exists('_') ) {	function _($string) {		return $string;	}}if (!function_exists('stripos')) {	function stripos($haystack, $needle, $offset = 0) {		return strpos(strtolower($haystack), strtolower($needle), $offset);	}}if ( !function_exists('hash_hmac') ):function hash_hmac($algo, $data, $key, $raw_output = false) {	return _hash_hmac($algo, $data, $key, $raw_output);}endif;function _hash_hmac($algo, $data, $key, $raw_output = false) {	$packs = array('md5' => 'H32', 'sha1' => 'H40');	if ( !isset($packs[$algo]) )		return false;	$pack = $packs[$algo];	if (strlen($key) > 64)		$key = pack($pack, $algo($key));	$key = str_pad($key, 64, chr(0));	$ipad = (substr($key, 0, 64) ^ str_repeat(chr(0x36), 64));	$opad = (substr($key, 0, 64) ^ str_repeat(chr(0x5C), 64));	$hmac = $algo($opad . pack($pack, $algo($ipad . $data)));	if ( $raw_output )		return pack( $pack, $hmac );	return $hmac;}if ( !function_exists('mb_substr') ):	function mb_substr( $str, $start, $length=null, $encoding=null ) {		return _mb_substr($str, $start, $length, $encoding);	}endif;function _mb_substr( $str, $start, $length=null, $encoding=null ) {	// the solution below, works only for utf-8, so in case of a different	// charset, just use built-in substr	$charset = get_option( 'blog_charset' );	if ( !in_array( $charset, array('utf8', 'utf-8', 'UTF8', 'UTF-8') ) ) {		return is_null( $length )? substr( $str, $start ) : substr( $str, $start, $length);	}	// use the regex unicode support to separate the UTF-8 characters into an array	preg_match_all( '/./us', $str, $match );	$chars = is_null( $length )? array_slice( $match[0], $start ) : array_slice( $match[0], $start, $length );	return implode( '', $chars );}if ( !function_exists( 'htmlspecialchars_decode' ) ) {	// Added in PHP 5.1.0	// Error checks from PEAR::PHP_Compat	function htmlspecialchars_decode( $string, $quote_style = ENT_COMPAT )	{		if ( !is_scalar( $string ) ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 1 to be string, ' . gettype( $string ) . ' given', E_USER_WARNING );			return;		}		if ( !is_int( $quote_style ) && $quote_style !== null ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 2 to be integer, ' . gettype( $quote_style ) . ' given', E_USER_WARNING );			return;		}		return wp_specialchars_decode( $string, $quote_style );	}}// For PHP < 5.2.0if ( !function_exists('json_encode') ) {	function json_encode( $string ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		return $wp_json->encodeUnsafe( $string );	}}if ( !function_exists('json_decode') ) {	function json_decode( $string, $assoc_array = false ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		$res = $wp_json->decode( $string );		if ( $assoc_array )			$res = _json_decode_object_helper( $res );		return $res;	}	function _json_decode_object_helper($data) {		if ( is_object($data) )			$data = get_object_vars($data);		return is_array($data) ? array_map(__FUNCTION__, $data) : $data;	}}// pathinfo that fills 'filename' without extension like in PHP 5.2+function pathinfo52($path) {	$parts = pathinfo($path);	if ( !isset($parts['filename']) ) {		$parts['filename'] = substr( $parts['basename'], 0, strrpos($parts['basename'], '.') );		if ( empty($parts['filename']) ) // there's no extension			$parts['filename'] = $parts['basename'];	}	return $parts;}
